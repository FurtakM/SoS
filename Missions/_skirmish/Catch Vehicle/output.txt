// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_INT 91
3392: EQUAL
3393: IFFALSE 3465
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3395: LD_INT 68
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 255
3407: PPUSH
3408: CALL_OW 321
3412: PUSH
3413: LD_INT 2
3415: EQUAL
3416: IFFALSE 3428
// eff := 70 else
3418: LD_ADDR_VAR 0 4
3422: PUSH
3423: LD_INT 70
3425: ST_TO_ADDR
3426: GO 3436
// eff := 30 ;
3428: LD_ADDR_VAR 0 4
3432: PUSH
3433: LD_INT 30
3435: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3436: LD_VAR 0 1
3440: PPUSH
3441: CALL_OW 250
3445: PPUSH
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 251
3455: PPUSH
3456: LD_VAR 0 4
3460: PPUSH
3461: CALL_OW 495
// end ; end ;
3465: LD_VAR 0 2
3469: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3470: LD_INT 0
3472: PPUSH
// end ;
3473: LD_VAR 0 4
3477: RET
// export function SOS_Command ( cmd ) ; begin
3478: LD_INT 0
3480: PPUSH
// end ;
3481: LD_VAR 0 2
3485: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3486: LD_INT 0
3488: PPUSH
// end ;
3489: LD_VAR 0 6
3493: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
3494: LD_INT 0
3496: PPUSH
3497: PPUSH
// if not vehicle or not factory then
3498: LD_VAR 0 1
3502: NOT
3503: PUSH
3504: LD_VAR 0 2
3508: NOT
3509: OR
3510: IFFALSE 3514
// exit ;
3512: GO 3745
// if factoryWaypoints >= factory then
3514: LD_EXP 81
3518: PUSH
3519: LD_VAR 0 2
3523: GREATEREQUAL
3524: IFFALSE 3745
// if factoryWaypoints [ factory ] then
3526: LD_EXP 81
3530: PUSH
3531: LD_VAR 0 2
3535: ARRAY
3536: IFFALSE 3745
// begin if GetControl ( vehicle ) = control_manual then
3538: LD_VAR 0 1
3542: PPUSH
3543: CALL_OW 263
3547: PUSH
3548: LD_INT 1
3550: EQUAL
3551: IFFALSE 3632
// begin driver := IsDrivenBy ( vehicle ) ;
3553: LD_ADDR_VAR 0 4
3557: PUSH
3558: LD_VAR 0 1
3562: PPUSH
3563: CALL_OW 311
3567: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3568: LD_VAR 0 4
3572: PPUSH
3573: LD_EXP 81
3577: PUSH
3578: LD_VAR 0 2
3582: ARRAY
3583: PUSH
3584: LD_INT 3
3586: ARRAY
3587: PPUSH
3588: LD_EXP 81
3592: PUSH
3593: LD_VAR 0 2
3597: ARRAY
3598: PUSH
3599: LD_INT 4
3601: ARRAY
3602: PPUSH
3603: CALL_OW 171
// AddComExitVehicle ( driver ) ;
3607: LD_VAR 0 4
3611: PPUSH
3612: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
3616: LD_VAR 0 4
3620: PPUSH
3621: LD_VAR 0 2
3625: PPUSH
3626: CALL_OW 180
// end else
3630: GO 3745
// if GetControl ( vehicle ) = control_remote then
3632: LD_VAR 0 1
3636: PPUSH
3637: CALL_OW 263
3641: PUSH
3642: LD_INT 2
3644: EQUAL
3645: IFFALSE 3706
// begin wait ( 0 0$2 ) ;
3647: LD_INT 70
3649: PPUSH
3650: CALL_OW 67
// if Connect ( vehicle ) then
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL 32395 0 1
3663: IFFALSE 3704
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3665: LD_VAR 0 1
3669: PPUSH
3670: LD_EXP 81
3674: PUSH
3675: LD_VAR 0 2
3679: ARRAY
3680: PUSH
3681: LD_INT 3
3683: ARRAY
3684: PPUSH
3685: LD_EXP 81
3689: PUSH
3690: LD_VAR 0 2
3694: ARRAY
3695: PUSH
3696: LD_INT 4
3698: ARRAY
3699: PPUSH
3700: CALL_OW 171
// end else
3704: GO 3745
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3706: LD_VAR 0 1
3710: PPUSH
3711: LD_EXP 81
3715: PUSH
3716: LD_VAR 0 2
3720: ARRAY
3721: PUSH
3722: LD_INT 3
3724: ARRAY
3725: PPUSH
3726: LD_EXP 81
3730: PUSH
3731: LD_VAR 0 2
3735: ARRAY
3736: PUSH
3737: LD_INT 4
3739: ARRAY
3740: PPUSH
3741: CALL_OW 171
// end ; end ;
3745: LD_VAR 0 3
3749: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
3750: LD_INT 0
3752: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
3753: LD_VAR 0 1
3757: PUSH
3758: LD_INT 250
3760: EQUAL
3761: PUSH
3762: LD_VAR 0 2
3766: PPUSH
3767: CALL_OW 264
3771: PUSH
3772: LD_INT 81
3774: EQUAL
3775: AND
3776: IFFALSE 3797
// MinerPlaceMine ( unit , x , y ) ;
3778: LD_VAR 0 2
3782: PPUSH
3783: LD_VAR 0 4
3787: PPUSH
3788: LD_VAR 0 5
3792: PPUSH
3793: CALL 6787 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
3797: LD_VAR 0 1
3801: PUSH
3802: LD_INT 251
3804: EQUAL
3805: PUSH
3806: LD_VAR 0 2
3810: PPUSH
3811: CALL_OW 264
3815: PUSH
3816: LD_INT 81
3818: EQUAL
3819: AND
3820: IFFALSE 3841
// MinerDetonateMine ( unit , x , y ) ;
3822: LD_VAR 0 2
3826: PPUSH
3827: LD_VAR 0 4
3831: PPUSH
3832: LD_VAR 0 5
3836: PPUSH
3837: CALL 7062 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
3841: LD_VAR 0 1
3845: PUSH
3846: LD_INT 252
3848: EQUAL
3849: PUSH
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 264
3859: PUSH
3860: LD_INT 81
3862: EQUAL
3863: AND
3864: IFFALSE 3885
// MinerCreateMinefield ( unit , x , y ) ;
3866: LD_VAR 0 2
3870: PPUSH
3871: LD_VAR 0 4
3875: PPUSH
3876: LD_VAR 0 5
3880: PPUSH
3881: CALL 7479 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
3885: LD_VAR 0 1
3889: PUSH
3890: LD_INT 253
3892: EQUAL
3893: PUSH
3894: LD_VAR 0 2
3898: PPUSH
3899: CALL_OW 257
3903: PUSH
3904: LD_INT 5
3906: EQUAL
3907: AND
3908: IFFALSE 3929
// ComBinocular ( unit , x , y ) ;
3910: LD_VAR 0 2
3914: PPUSH
3915: LD_VAR 0 4
3919: PPUSH
3920: LD_VAR 0 5
3924: PPUSH
3925: CALL 7848 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3929: LD_VAR 0 1
3933: PUSH
3934: LD_INT 254
3936: EQUAL
3937: PUSH
3938: LD_VAR 0 2
3942: PPUSH
3943: CALL_OW 264
3947: PUSH
3948: LD_INT 99
3950: EQUAL
3951: AND
3952: PUSH
3953: LD_VAR 0 3
3957: PPUSH
3958: CALL_OW 263
3962: PUSH
3963: LD_INT 3
3965: EQUAL
3966: AND
3967: IFFALSE 3983
// HackDestroyVehicle ( unit , selectedUnit ) ;
3969: LD_VAR 0 2
3973: PPUSH
3974: LD_VAR 0 3
3978: PPUSH
3979: CALL 6151 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3983: LD_VAR 0 1
3987: PUSH
3988: LD_INT 255
3990: EQUAL
3991: PUSH
3992: LD_VAR 0 2
3996: PPUSH
3997: CALL_OW 264
4001: PUSH
4002: LD_INT 14
4004: PUSH
4005: LD_INT 53
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: IN
4012: AND
4013: PUSH
4014: LD_VAR 0 4
4018: PPUSH
4019: LD_VAR 0 5
4023: PPUSH
4024: CALL_OW 488
4028: AND
4029: IFFALSE 4053
// CutTreeXYR ( unit , x , y , 12 ) ;
4031: LD_VAR 0 2
4035: PPUSH
4036: LD_VAR 0 4
4040: PPUSH
4041: LD_VAR 0 5
4045: PPUSH
4046: LD_INT 12
4048: PPUSH
4049: CALL 4148 0 4
// if cmd = 256 then
4053: LD_VAR 0 1
4057: PUSH
4058: LD_INT 256
4060: EQUAL
4061: IFFALSE 4082
// SetFactoryWaypoint ( unit , x , y ) ;
4063: LD_VAR 0 2
4067: PPUSH
4068: LD_VAR 0 4
4072: PPUSH
4073: LD_VAR 0 5
4077: PPUSH
4078: CALL 22776 0 3
// if cmd = 257 then
4082: LD_VAR 0 1
4086: PUSH
4087: LD_INT 257
4089: EQUAL
4090: IFFALSE 4111
// SetWarehouseGatheringPoint ( unit , x , y ) ;
4092: LD_VAR 0 2
4096: PPUSH
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_VAR 0 5
4106: PPUSH
4107: CALL 23138 0 3
// if cmd = 258 then
4111: LD_VAR 0 1
4115: PUSH
4116: LD_INT 258
4118: EQUAL
4119: IFFALSE 4143
// BurnTreeXYR ( unit , x , y , 8 ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 4
4130: PPUSH
4131: LD_VAR 0 5
4135: PPUSH
4136: LD_INT 8
4138: PPUSH
4139: CALL 4542 0 4
// end ;
4143: LD_VAR 0 6
4147: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
4148: LD_INT 0
4150: PPUSH
4151: PPUSH
4152: PPUSH
4153: PPUSH
4154: PPUSH
4155: PPUSH
4156: PPUSH
4157: PPUSH
4158: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
4159: LD_VAR 0 1
4163: PPUSH
4164: CALL_OW 302
4168: NOT
4169: PUSH
4170: LD_VAR 0 2
4174: PPUSH
4175: LD_VAR 0 3
4179: PPUSH
4180: CALL_OW 488
4184: NOT
4185: OR
4186: PUSH
4187: LD_VAR 0 4
4191: NOT
4192: OR
4193: IFFALSE 4197
// exit ;
4195: GO 4537
// list := [ ] ;
4197: LD_ADDR_VAR 0 13
4201: PUSH
4202: EMPTY
4203: ST_TO_ADDR
// if x - r < 0 then
4204: LD_VAR 0 2
4208: PUSH
4209: LD_VAR 0 4
4213: MINUS
4214: PUSH
4215: LD_INT 0
4217: LESS
4218: IFFALSE 4230
// min_x := 0 else
4220: LD_ADDR_VAR 0 7
4224: PUSH
4225: LD_INT 0
4227: ST_TO_ADDR
4228: GO 4246
// min_x := x - r ;
4230: LD_ADDR_VAR 0 7
4234: PUSH
4235: LD_VAR 0 2
4239: PUSH
4240: LD_VAR 0 4
4244: MINUS
4245: ST_TO_ADDR
// if y - r < 0 then
4246: LD_VAR 0 3
4250: PUSH
4251: LD_VAR 0 4
4255: MINUS
4256: PUSH
4257: LD_INT 0
4259: LESS
4260: IFFALSE 4272
// min_y := 0 else
4262: LD_ADDR_VAR 0 8
4266: PUSH
4267: LD_INT 0
4269: ST_TO_ADDR
4270: GO 4288
// min_y := y - r ;
4272: LD_ADDR_VAR 0 8
4276: PUSH
4277: LD_VAR 0 3
4281: PUSH
4282: LD_VAR 0 4
4286: MINUS
4287: ST_TO_ADDR
// max_x := x + r ;
4288: LD_ADDR_VAR 0 9
4292: PUSH
4293: LD_VAR 0 2
4297: PUSH
4298: LD_VAR 0 4
4302: PLUS
4303: ST_TO_ADDR
// max_y := y + r ;
4304: LD_ADDR_VAR 0 10
4308: PUSH
4309: LD_VAR 0 3
4313: PUSH
4314: LD_VAR 0 4
4318: PLUS
4319: ST_TO_ADDR
// for _x = min_x to max_x do
4320: LD_ADDR_VAR 0 11
4324: PUSH
4325: DOUBLE
4326: LD_VAR 0 7
4330: DEC
4331: ST_TO_ADDR
4332: LD_VAR 0 9
4336: PUSH
4337: FOR_TO
4338: IFFALSE 4455
// for _y = min_y to max_y do
4340: LD_ADDR_VAR 0 12
4344: PUSH
4345: DOUBLE
4346: LD_VAR 0 8
4350: DEC
4351: ST_TO_ADDR
4352: LD_VAR 0 10
4356: PUSH
4357: FOR_TO
4358: IFFALSE 4451
// begin if not ValidHex ( _x , _y ) then
4360: LD_VAR 0 11
4364: PPUSH
4365: LD_VAR 0 12
4369: PPUSH
4370: CALL_OW 488
4374: NOT
4375: IFFALSE 4379
// continue ;
4377: GO 4357
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4379: LD_VAR 0 11
4383: PPUSH
4384: LD_VAR 0 12
4388: PPUSH
4389: CALL_OW 351
4393: PUSH
4394: LD_VAR 0 11
4398: PPUSH
4399: LD_VAR 0 12
4403: PPUSH
4404: CALL_OW 554
4408: AND
4409: IFFALSE 4449
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4411: LD_ADDR_VAR 0 13
4415: PUSH
4416: LD_VAR 0 13
4420: PPUSH
4421: LD_VAR 0 13
4425: PUSH
4426: LD_INT 1
4428: PLUS
4429: PPUSH
4430: LD_VAR 0 11
4434: PUSH
4435: LD_VAR 0 12
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PPUSH
4444: CALL_OW 2
4448: ST_TO_ADDR
// end ;
4449: GO 4357
4451: POP
4452: POP
4453: GO 4337
4455: POP
4456: POP
// if not list then
4457: LD_VAR 0 13
4461: NOT
4462: IFFALSE 4466
// exit ;
4464: GO 4537
// for i in list do
4466: LD_ADDR_VAR 0 6
4470: PUSH
4471: LD_VAR 0 13
4475: PUSH
4476: FOR_IN
4477: IFFALSE 4535
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4479: LD_VAR 0 1
4483: PPUSH
4484: LD_STRING M
4486: PUSH
4487: LD_VAR 0 6
4491: PUSH
4492: LD_INT 1
4494: ARRAY
4495: PUSH
4496: LD_VAR 0 6
4500: PUSH
4501: LD_INT 2
4503: ARRAY
4504: PUSH
4505: LD_INT 0
4507: PUSH
4508: LD_INT 0
4510: PUSH
4511: LD_INT 0
4513: PUSH
4514: LD_INT 0
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: PUSH
4526: EMPTY
4527: LIST
4528: PPUSH
4529: CALL_OW 447
4533: GO 4476
4535: POP
4536: POP
// end ;
4537: LD_VAR 0 5
4541: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
4542: LD_INT 0
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
4550: PPUSH
4551: PPUSH
4552: PPUSH
4553: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
4554: LD_VAR 0 1
4558: PPUSH
4559: CALL_OW 302
4563: NOT
4564: PUSH
4565: LD_VAR 0 2
4569: PPUSH
4570: LD_VAR 0 3
4574: PPUSH
4575: CALL_OW 488
4579: NOT
4580: OR
4581: PUSH
4582: LD_VAR 0 4
4586: NOT
4587: OR
4588: IFFALSE 4592
// exit ;
4590: GO 5105
// list := [ ] ;
4592: LD_ADDR_VAR 0 13
4596: PUSH
4597: EMPTY
4598: ST_TO_ADDR
// if x - r < 0 then
4599: LD_VAR 0 2
4603: PUSH
4604: LD_VAR 0 4
4608: MINUS
4609: PUSH
4610: LD_INT 0
4612: LESS
4613: IFFALSE 4625
// min_x := 0 else
4615: LD_ADDR_VAR 0 7
4619: PUSH
4620: LD_INT 0
4622: ST_TO_ADDR
4623: GO 4641
// min_x := x - r ;
4625: LD_ADDR_VAR 0 7
4629: PUSH
4630: LD_VAR 0 2
4634: PUSH
4635: LD_VAR 0 4
4639: MINUS
4640: ST_TO_ADDR
// if y - r < 0 then
4641: LD_VAR 0 3
4645: PUSH
4646: LD_VAR 0 4
4650: MINUS
4651: PUSH
4652: LD_INT 0
4654: LESS
4655: IFFALSE 4667
// min_y := 0 else
4657: LD_ADDR_VAR 0 8
4661: PUSH
4662: LD_INT 0
4664: ST_TO_ADDR
4665: GO 4683
// min_y := y - r ;
4667: LD_ADDR_VAR 0 8
4671: PUSH
4672: LD_VAR 0 3
4676: PUSH
4677: LD_VAR 0 4
4681: MINUS
4682: ST_TO_ADDR
// max_x := x + r ;
4683: LD_ADDR_VAR 0 9
4687: PUSH
4688: LD_VAR 0 2
4692: PUSH
4693: LD_VAR 0 4
4697: PLUS
4698: ST_TO_ADDR
// max_y := y + r ;
4699: LD_ADDR_VAR 0 10
4703: PUSH
4704: LD_VAR 0 3
4708: PUSH
4709: LD_VAR 0 4
4713: PLUS
4714: ST_TO_ADDR
// for _x = min_x to max_x do
4715: LD_ADDR_VAR 0 11
4719: PUSH
4720: DOUBLE
4721: LD_VAR 0 7
4725: DEC
4726: ST_TO_ADDR
4727: LD_VAR 0 9
4731: PUSH
4732: FOR_TO
4733: IFFALSE 4850
// for _y = min_y to max_y do
4735: LD_ADDR_VAR 0 12
4739: PUSH
4740: DOUBLE
4741: LD_VAR 0 8
4745: DEC
4746: ST_TO_ADDR
4747: LD_VAR 0 10
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4846
// begin if not ValidHex ( _x , _y ) then
4755: LD_VAR 0 11
4759: PPUSH
4760: LD_VAR 0 12
4764: PPUSH
4765: CALL_OW 488
4769: NOT
4770: IFFALSE 4774
// continue ;
4772: GO 4752
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4774: LD_VAR 0 11
4778: PPUSH
4779: LD_VAR 0 12
4783: PPUSH
4784: CALL_OW 351
4788: PUSH
4789: LD_VAR 0 11
4793: PPUSH
4794: LD_VAR 0 12
4798: PPUSH
4799: CALL_OW 554
4803: AND
4804: IFFALSE 4844
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4806: LD_ADDR_VAR 0 13
4810: PUSH
4811: LD_VAR 0 13
4815: PPUSH
4816: LD_VAR 0 13
4820: PUSH
4821: LD_INT 1
4823: PLUS
4824: PPUSH
4825: LD_VAR 0 11
4829: PUSH
4830: LD_VAR 0 12
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PPUSH
4839: CALL_OW 2
4843: ST_TO_ADDR
// end ;
4844: GO 4752
4846: POP
4847: POP
4848: GO 4732
4850: POP
4851: POP
// if not list then
4852: LD_VAR 0 13
4856: NOT
4857: IFFALSE 4861
// exit ;
4859: GO 5105
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
4861: LD_ADDR_VAR 0 13
4865: PUSH
4866: LD_VAR 0 1
4870: PPUSH
4871: LD_VAR 0 13
4875: PPUSH
4876: LD_INT 1
4878: PPUSH
4879: LD_INT 1
4881: PPUSH
4882: CALL 29537 0 4
4886: ST_TO_ADDR
// ComStop ( flame ) ;
4887: LD_VAR 0 1
4891: PPUSH
4892: CALL_OW 141
// for i in list do
4896: LD_ADDR_VAR 0 6
4900: PUSH
4901: LD_VAR 0 13
4905: PUSH
4906: FOR_IN
4907: IFFALSE 4938
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
4909: LD_VAR 0 1
4913: PPUSH
4914: LD_VAR 0 6
4918: PUSH
4919: LD_INT 1
4921: ARRAY
4922: PPUSH
4923: LD_VAR 0 6
4927: PUSH
4928: LD_INT 2
4930: ARRAY
4931: PPUSH
4932: CALL_OW 176
4936: GO 4906
4938: POP
4939: POP
// repeat wait ( 0 0$1 ) ;
4940: LD_INT 35
4942: PPUSH
4943: CALL_OW 67
// task := GetTaskList ( flame ) ;
4947: LD_ADDR_VAR 0 14
4951: PUSH
4952: LD_VAR 0 1
4956: PPUSH
4957: CALL_OW 437
4961: ST_TO_ADDR
// if not task then
4962: LD_VAR 0 14
4966: NOT
4967: IFFALSE 4971
// exit ;
4969: GO 5105
// if task [ 1 ] [ 1 ] <> | then
4971: LD_VAR 0 14
4975: PUSH
4976: LD_INT 1
4978: ARRAY
4979: PUSH
4980: LD_INT 1
4982: ARRAY
4983: PUSH
4984: LD_STRING |
4986: NONEQUAL
4987: IFFALSE 4991
// exit ;
4989: GO 5105
// _x := task [ 1 ] [ 2 ] ;
4991: LD_ADDR_VAR 0 11
4995: PUSH
4996: LD_VAR 0 14
5000: PUSH
5001: LD_INT 1
5003: ARRAY
5004: PUSH
5005: LD_INT 2
5007: ARRAY
5008: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
5009: LD_ADDR_VAR 0 12
5013: PUSH
5014: LD_VAR 0 14
5018: PUSH
5019: LD_INT 1
5021: ARRAY
5022: PUSH
5023: LD_INT 3
5025: ARRAY
5026: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
5027: LD_VAR 0 11
5031: PPUSH
5032: LD_VAR 0 12
5036: PPUSH
5037: CALL_OW 351
5041: NOT
5042: PUSH
5043: LD_VAR 0 11
5047: PPUSH
5048: LD_VAR 0 12
5052: PPUSH
5053: CALL_OW 554
5057: NOT
5058: OR
5059: IFFALSE 5093
// begin task := Delete ( task , 1 ) ;
5061: LD_ADDR_VAR 0 14
5065: PUSH
5066: LD_VAR 0 14
5070: PPUSH
5071: LD_INT 1
5073: PPUSH
5074: CALL_OW 3
5078: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
5079: LD_VAR 0 1
5083: PPUSH
5084: LD_VAR 0 14
5088: PPUSH
5089: CALL_OW 446
// end ; until not HasTask ( flame ) ;
5093: LD_VAR 0 1
5097: PPUSH
5098: CALL_OW 314
5102: NOT
5103: IFFALSE 4940
// end ;
5105: LD_VAR 0 5
5109: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
5110: LD_EXP 12
5114: NOT
5115: IFFALSE 5165
5117: GO 5119
5119: DISABLE
// begin initHack := true ;
5120: LD_ADDR_EXP 12
5124: PUSH
5125: LD_INT 1
5127: ST_TO_ADDR
// hackTanks := [ ] ;
5128: LD_ADDR_EXP 13
5132: PUSH
5133: EMPTY
5134: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
5135: LD_ADDR_EXP 14
5139: PUSH
5140: EMPTY
5141: ST_TO_ADDR
// hackLimit := 3 ;
5142: LD_ADDR_EXP 15
5146: PUSH
5147: LD_INT 3
5149: ST_TO_ADDR
// hackDist := 12 ;
5150: LD_ADDR_EXP 16
5154: PUSH
5155: LD_INT 12
5157: ST_TO_ADDR
// hackCounter := [ ] ;
5158: LD_ADDR_EXP 17
5162: PUSH
5163: EMPTY
5164: ST_TO_ADDR
// end ;
5165: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
5166: LD_EXP 12
5170: PUSH
5171: LD_INT 34
5173: PUSH
5174: LD_INT 99
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PPUSH
5181: CALL_OW 69
5185: AND
5186: IFFALSE 5439
5188: GO 5190
5190: DISABLE
5191: LD_INT 0
5193: PPUSH
5194: PPUSH
// begin enable ;
5195: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
5196: LD_ADDR_VAR 0 1
5200: PUSH
5201: LD_INT 34
5203: PUSH
5204: LD_INT 99
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: PPUSH
5211: CALL_OW 69
5215: PUSH
5216: FOR_IN
5217: IFFALSE 5437
// begin if not i in hackTanks then
5219: LD_VAR 0 1
5223: PUSH
5224: LD_EXP 13
5228: IN
5229: NOT
5230: IFFALSE 5313
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
5232: LD_ADDR_EXP 13
5236: PUSH
5237: LD_EXP 13
5241: PPUSH
5242: LD_EXP 13
5246: PUSH
5247: LD_INT 1
5249: PLUS
5250: PPUSH
5251: LD_VAR 0 1
5255: PPUSH
5256: CALL_OW 1
5260: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
5261: LD_ADDR_EXP 14
5265: PUSH
5266: LD_EXP 14
5270: PPUSH
5271: LD_EXP 14
5275: PUSH
5276: LD_INT 1
5278: PLUS
5279: PPUSH
5280: EMPTY
5281: PPUSH
5282: CALL_OW 1
5286: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
5287: LD_ADDR_EXP 17
5291: PUSH
5292: LD_EXP 17
5296: PPUSH
5297: LD_EXP 17
5301: PUSH
5302: LD_INT 1
5304: PLUS
5305: PPUSH
5306: EMPTY
5307: PPUSH
5308: CALL_OW 1
5312: ST_TO_ADDR
// end ; if not IsOk ( i ) then
5313: LD_VAR 0 1
5317: PPUSH
5318: CALL_OW 302
5322: NOT
5323: IFFALSE 5336
// begin HackUnlinkAll ( i ) ;
5325: LD_VAR 0 1
5329: PPUSH
5330: CALL 5442 0 1
// continue ;
5334: GO 5216
// end ; HackCheckCapturedStatus ( i ) ;
5336: LD_VAR 0 1
5340: PPUSH
5341: CALL 5885 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
5345: LD_ADDR_VAR 0 2
5349: PUSH
5350: LD_INT 81
5352: PUSH
5353: LD_VAR 0 1
5357: PPUSH
5358: CALL_OW 255
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 33
5369: PUSH
5370: LD_INT 3
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: LD_INT 91
5379: PUSH
5380: LD_VAR 0 1
5384: PUSH
5385: LD_EXP 16
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 50
5397: PUSH
5398: EMPTY
5399: LIST
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: PPUSH
5407: CALL_OW 69
5411: ST_TO_ADDR
// if not tmp then
5412: LD_VAR 0 2
5416: NOT
5417: IFFALSE 5421
// continue ;
5419: GO 5216
// HackLink ( i , tmp ) ;
5421: LD_VAR 0 1
5425: PPUSH
5426: LD_VAR 0 2
5430: PPUSH
5431: CALL 5578 0 2
// end ;
5435: GO 5216
5437: POP
5438: POP
// end ;
5439: PPOPN 2
5441: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
5442: LD_INT 0
5444: PPUSH
5445: PPUSH
5446: PPUSH
// if not hack in hackTanks then
5447: LD_VAR 0 1
5451: PUSH
5452: LD_EXP 13
5456: IN
5457: NOT
5458: IFFALSE 5462
// exit ;
5460: GO 5573
// index := GetElementIndex ( hackTanks , hack ) ;
5462: LD_ADDR_VAR 0 4
5466: PUSH
5467: LD_EXP 13
5471: PPUSH
5472: LD_VAR 0 1
5476: PPUSH
5477: CALL 28834 0 2
5481: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
5482: LD_EXP 14
5486: PUSH
5487: LD_VAR 0 4
5491: ARRAY
5492: IFFALSE 5573
// begin for i in hackTanksCaptured [ index ] do
5494: LD_ADDR_VAR 0 3
5498: PUSH
5499: LD_EXP 14
5503: PUSH
5504: LD_VAR 0 4
5508: ARRAY
5509: PUSH
5510: FOR_IN
5511: IFFALSE 5537
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
5513: LD_VAR 0 3
5517: PUSH
5518: LD_INT 1
5520: ARRAY
5521: PPUSH
5522: LD_VAR 0 3
5526: PUSH
5527: LD_INT 2
5529: ARRAY
5530: PPUSH
5531: CALL_OW 235
5535: GO 5510
5537: POP
5538: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
5539: LD_ADDR_EXP 14
5543: PUSH
5544: LD_EXP 14
5548: PPUSH
5549: LD_VAR 0 4
5553: PPUSH
5554: EMPTY
5555: PPUSH
5556: CALL_OW 1
5560: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
5561: LD_VAR 0 1
5565: PPUSH
5566: LD_INT 0
5568: PPUSH
5569: CALL_OW 505
// end ; end ;
5573: LD_VAR 0 2
5577: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
5578: LD_INT 0
5580: PPUSH
5581: PPUSH
5582: PPUSH
// if not hack in hackTanks or not vehicles then
5583: LD_VAR 0 1
5587: PUSH
5588: LD_EXP 13
5592: IN
5593: NOT
5594: PUSH
5595: LD_VAR 0 2
5599: NOT
5600: OR
5601: IFFALSE 5605
// exit ;
5603: GO 5880
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
5605: LD_ADDR_VAR 0 2
5609: PUSH
5610: LD_VAR 0 1
5614: PPUSH
5615: LD_VAR 0 2
5619: PPUSH
5620: LD_INT 1
5622: PPUSH
5623: LD_INT 1
5625: PPUSH
5626: CALL 29484 0 4
5630: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
5631: LD_ADDR_VAR 0 5
5635: PUSH
5636: LD_EXP 13
5640: PPUSH
5641: LD_VAR 0 1
5645: PPUSH
5646: CALL 28834 0 2
5650: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
5651: LD_EXP 14
5655: PUSH
5656: LD_VAR 0 5
5660: ARRAY
5661: PUSH
5662: LD_EXP 15
5666: LESS
5667: IFFALSE 5856
// begin for i := 1 to vehicles do
5669: LD_ADDR_VAR 0 4
5673: PUSH
5674: DOUBLE
5675: LD_INT 1
5677: DEC
5678: ST_TO_ADDR
5679: LD_VAR 0 2
5683: PUSH
5684: FOR_TO
5685: IFFALSE 5854
// begin if hackTanksCaptured [ index ] = hackLimit then
5687: LD_EXP 14
5691: PUSH
5692: LD_VAR 0 5
5696: ARRAY
5697: PUSH
5698: LD_EXP 15
5702: EQUAL
5703: IFFALSE 5707
// break ;
5705: GO 5854
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
5707: LD_ADDR_EXP 17
5711: PUSH
5712: LD_EXP 17
5716: PPUSH
5717: LD_VAR 0 5
5721: PPUSH
5722: LD_EXP 17
5726: PUSH
5727: LD_VAR 0 5
5731: ARRAY
5732: PUSH
5733: LD_INT 1
5735: PLUS
5736: PPUSH
5737: CALL_OW 1
5741: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
5742: LD_ADDR_EXP 14
5746: PUSH
5747: LD_EXP 14
5751: PPUSH
5752: LD_VAR 0 5
5756: PUSH
5757: LD_EXP 14
5761: PUSH
5762: LD_VAR 0 5
5766: ARRAY
5767: PUSH
5768: LD_INT 1
5770: PLUS
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: PPUSH
5776: LD_VAR 0 2
5780: PUSH
5781: LD_VAR 0 4
5785: ARRAY
5786: PUSH
5787: LD_VAR 0 2
5791: PUSH
5792: LD_VAR 0 4
5796: ARRAY
5797: PPUSH
5798: CALL_OW 255
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: PPUSH
5807: CALL 29049 0 3
5811: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
5812: LD_VAR 0 2
5816: PUSH
5817: LD_VAR 0 4
5821: ARRAY
5822: PPUSH
5823: LD_VAR 0 1
5827: PPUSH
5828: CALL_OW 255
5832: PPUSH
5833: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
5837: LD_VAR 0 2
5841: PUSH
5842: LD_VAR 0 4
5846: ARRAY
5847: PPUSH
5848: CALL_OW 141
// end ;
5852: GO 5684
5854: POP
5855: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5856: LD_VAR 0 1
5860: PPUSH
5861: LD_EXP 14
5865: PUSH
5866: LD_VAR 0 5
5870: ARRAY
5871: PUSH
5872: LD_INT 0
5874: PLUS
5875: PPUSH
5876: CALL_OW 505
// end ;
5880: LD_VAR 0 3
5884: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
// if not hack in hackTanks then
5891: LD_VAR 0 1
5895: PUSH
5896: LD_EXP 13
5900: IN
5901: NOT
5902: IFFALSE 5906
// exit ;
5904: GO 6146
// index := GetElementIndex ( hackTanks , hack ) ;
5906: LD_ADDR_VAR 0 4
5910: PUSH
5911: LD_EXP 13
5915: PPUSH
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL 28834 0 2
5925: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
5926: LD_ADDR_VAR 0 3
5930: PUSH
5931: DOUBLE
5932: LD_EXP 14
5936: PUSH
5937: LD_VAR 0 4
5941: ARRAY
5942: INC
5943: ST_TO_ADDR
5944: LD_INT 1
5946: PUSH
5947: FOR_DOWNTO
5948: IFFALSE 6120
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
5950: LD_ADDR_VAR 0 5
5954: PUSH
5955: LD_EXP 14
5959: PUSH
5960: LD_VAR 0 4
5964: ARRAY
5965: PUSH
5966: LD_VAR 0 3
5970: ARRAY
5971: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
5972: LD_VAR 0 5
5976: PUSH
5977: LD_INT 1
5979: ARRAY
5980: PPUSH
5981: CALL_OW 302
5985: NOT
5986: PUSH
5987: LD_VAR 0 5
5991: PUSH
5992: LD_INT 1
5994: ARRAY
5995: PPUSH
5996: CALL_OW 255
6000: PUSH
6001: LD_VAR 0 1
6005: PPUSH
6006: CALL_OW 255
6010: NONEQUAL
6011: OR
6012: IFFALSE 6118
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
6014: LD_VAR 0 5
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: PPUSH
6023: CALL_OW 305
6027: PUSH
6028: LD_VAR 0 5
6032: PUSH
6033: LD_INT 1
6035: ARRAY
6036: PPUSH
6037: CALL_OW 255
6041: PUSH
6042: LD_VAR 0 1
6046: PPUSH
6047: CALL_OW 255
6051: EQUAL
6052: AND
6053: IFFALSE 6077
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
6055: LD_VAR 0 5
6059: PUSH
6060: LD_INT 1
6062: ARRAY
6063: PPUSH
6064: LD_VAR 0 5
6068: PUSH
6069: LD_INT 2
6071: ARRAY
6072: PPUSH
6073: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
6077: LD_ADDR_EXP 14
6081: PUSH
6082: LD_EXP 14
6086: PPUSH
6087: LD_VAR 0 4
6091: PPUSH
6092: LD_EXP 14
6096: PUSH
6097: LD_VAR 0 4
6101: ARRAY
6102: PPUSH
6103: LD_VAR 0 3
6107: PPUSH
6108: CALL_OW 3
6112: PPUSH
6113: CALL_OW 1
6117: ST_TO_ADDR
// end ; end ;
6118: GO 5947
6120: POP
6121: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
6122: LD_VAR 0 1
6126: PPUSH
6127: LD_EXP 14
6131: PUSH
6132: LD_VAR 0 4
6136: ARRAY
6137: PUSH
6138: LD_INT 0
6140: PLUS
6141: PPUSH
6142: CALL_OW 505
// end ;
6146: LD_VAR 0 2
6150: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
6151: LD_INT 0
6153: PPUSH
6154: PPUSH
6155: PPUSH
6156: PPUSH
// if not hack in hackTanks then
6157: LD_VAR 0 1
6161: PUSH
6162: LD_EXP 13
6166: IN
6167: NOT
6168: IFFALSE 6172
// exit ;
6170: GO 6257
// index := GetElementIndex ( hackTanks , hack ) ;
6172: LD_ADDR_VAR 0 5
6176: PUSH
6177: LD_EXP 13
6181: PPUSH
6182: LD_VAR 0 1
6186: PPUSH
6187: CALL 28834 0 2
6191: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
6192: LD_ADDR_VAR 0 4
6196: PUSH
6197: DOUBLE
6198: LD_INT 1
6200: DEC
6201: ST_TO_ADDR
6202: LD_EXP 14
6206: PUSH
6207: LD_VAR 0 5
6211: ARRAY
6212: PUSH
6213: FOR_TO
6214: IFFALSE 6255
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
6216: LD_EXP 14
6220: PUSH
6221: LD_VAR 0 5
6225: ARRAY
6226: PUSH
6227: LD_VAR 0 4
6231: ARRAY
6232: PUSH
6233: LD_INT 1
6235: ARRAY
6236: PUSH
6237: LD_VAR 0 2
6241: EQUAL
6242: IFFALSE 6253
// KillUnit ( vehicle ) ;
6244: LD_VAR 0 2
6248: PPUSH
6249: CALL_OW 66
6253: GO 6213
6255: POP
6256: POP
// end ;
6257: LD_VAR 0 3
6261: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
6262: LD_EXP 18
6266: NOT
6267: IFFALSE 6302
6269: GO 6271
6271: DISABLE
// begin initMiner := true ;
6272: LD_ADDR_EXP 18
6276: PUSH
6277: LD_INT 1
6279: ST_TO_ADDR
// minersList := [ ] ;
6280: LD_ADDR_EXP 19
6284: PUSH
6285: EMPTY
6286: ST_TO_ADDR
// minerMinesList := [ ] ;
6287: LD_ADDR_EXP 20
6291: PUSH
6292: EMPTY
6293: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
6294: LD_ADDR_EXP 21
6298: PUSH
6299: LD_INT 5
6301: ST_TO_ADDR
// end ;
6302: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
6303: LD_EXP 18
6307: PUSH
6308: LD_INT 34
6310: PUSH
6311: LD_INT 81
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PPUSH
6318: CALL_OW 69
6322: AND
6323: IFFALSE 6784
6325: GO 6327
6327: DISABLE
6328: LD_INT 0
6330: PPUSH
6331: PPUSH
6332: PPUSH
6333: PPUSH
// begin enable ;
6334: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
6335: LD_ADDR_VAR 0 1
6339: PUSH
6340: LD_INT 34
6342: PUSH
6343: LD_INT 81
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PPUSH
6350: CALL_OW 69
6354: PUSH
6355: FOR_IN
6356: IFFALSE 6428
// begin if not i in minersList then
6358: LD_VAR 0 1
6362: PUSH
6363: LD_EXP 19
6367: IN
6368: NOT
6369: IFFALSE 6426
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
6371: LD_ADDR_EXP 19
6375: PUSH
6376: LD_EXP 19
6380: PPUSH
6381: LD_EXP 19
6385: PUSH
6386: LD_INT 1
6388: PLUS
6389: PPUSH
6390: LD_VAR 0 1
6394: PPUSH
6395: CALL_OW 1
6399: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
6400: LD_ADDR_EXP 20
6404: PUSH
6405: LD_EXP 20
6409: PPUSH
6410: LD_EXP 20
6414: PUSH
6415: LD_INT 1
6417: PLUS
6418: PPUSH
6419: EMPTY
6420: PPUSH
6421: CALL_OW 1
6425: ST_TO_ADDR
// end end ;
6426: GO 6355
6428: POP
6429: POP
// for i := minerMinesList downto 1 do
6430: LD_ADDR_VAR 0 1
6434: PUSH
6435: DOUBLE
6436: LD_EXP 20
6440: INC
6441: ST_TO_ADDR
6442: LD_INT 1
6444: PUSH
6445: FOR_DOWNTO
6446: IFFALSE 6782
// begin if IsLive ( minersList [ i ] ) then
6448: LD_EXP 19
6452: PUSH
6453: LD_VAR 0 1
6457: ARRAY
6458: PPUSH
6459: CALL_OW 300
6463: IFFALSE 6491
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
6465: LD_EXP 19
6469: PUSH
6470: LD_VAR 0 1
6474: ARRAY
6475: PPUSH
6476: LD_EXP 20
6480: PUSH
6481: LD_VAR 0 1
6485: ARRAY
6486: PPUSH
6487: CALL_OW 505
// if not minerMinesList [ i ] then
6491: LD_EXP 20
6495: PUSH
6496: LD_VAR 0 1
6500: ARRAY
6501: NOT
6502: IFFALSE 6506
// continue ;
6504: GO 6445
// for j := minerMinesList [ i ] downto 1 do
6506: LD_ADDR_VAR 0 2
6510: PUSH
6511: DOUBLE
6512: LD_EXP 20
6516: PUSH
6517: LD_VAR 0 1
6521: ARRAY
6522: INC
6523: ST_TO_ADDR
6524: LD_INT 1
6526: PUSH
6527: FOR_DOWNTO
6528: IFFALSE 6778
// begin side := GetSide ( minersList [ i ] ) ;
6530: LD_ADDR_VAR 0 3
6534: PUSH
6535: LD_EXP 19
6539: PUSH
6540: LD_VAR 0 1
6544: ARRAY
6545: PPUSH
6546: CALL_OW 255
6550: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
6551: LD_ADDR_VAR 0 4
6555: PUSH
6556: LD_EXP 20
6560: PUSH
6561: LD_VAR 0 1
6565: ARRAY
6566: PUSH
6567: LD_VAR 0 2
6571: ARRAY
6572: PUSH
6573: LD_INT 1
6575: ARRAY
6576: PPUSH
6577: LD_EXP 20
6581: PUSH
6582: LD_VAR 0 1
6586: ARRAY
6587: PUSH
6588: LD_VAR 0 2
6592: ARRAY
6593: PUSH
6594: LD_INT 2
6596: ARRAY
6597: PPUSH
6598: CALL_OW 428
6602: ST_TO_ADDR
// if not tmp then
6603: LD_VAR 0 4
6607: NOT
6608: IFFALSE 6612
// continue ;
6610: GO 6527
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
6612: LD_VAR 0 4
6616: PUSH
6617: LD_INT 81
6619: PUSH
6620: LD_VAR 0 3
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PPUSH
6629: CALL_OW 69
6633: IN
6634: PUSH
6635: LD_EXP 20
6639: PUSH
6640: LD_VAR 0 1
6644: ARRAY
6645: PUSH
6646: LD_VAR 0 2
6650: ARRAY
6651: PUSH
6652: LD_INT 1
6654: ARRAY
6655: PPUSH
6656: LD_EXP 20
6660: PUSH
6661: LD_VAR 0 1
6665: ARRAY
6666: PUSH
6667: LD_VAR 0 2
6671: ARRAY
6672: PUSH
6673: LD_INT 2
6675: ARRAY
6676: PPUSH
6677: CALL_OW 458
6681: AND
6682: IFFALSE 6776
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
6684: LD_EXP 20
6688: PUSH
6689: LD_VAR 0 1
6693: ARRAY
6694: PUSH
6695: LD_VAR 0 2
6699: ARRAY
6700: PUSH
6701: LD_INT 1
6703: ARRAY
6704: PPUSH
6705: LD_EXP 20
6709: PUSH
6710: LD_VAR 0 1
6714: ARRAY
6715: PUSH
6716: LD_VAR 0 2
6720: ARRAY
6721: PUSH
6722: LD_INT 2
6724: ARRAY
6725: PPUSH
6726: LD_VAR 0 3
6730: PPUSH
6731: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
6735: LD_ADDR_EXP 20
6739: PUSH
6740: LD_EXP 20
6744: PPUSH
6745: LD_VAR 0 1
6749: PPUSH
6750: LD_EXP 20
6754: PUSH
6755: LD_VAR 0 1
6759: ARRAY
6760: PPUSH
6761: LD_VAR 0 2
6765: PPUSH
6766: CALL_OW 3
6770: PPUSH
6771: CALL_OW 1
6775: ST_TO_ADDR
// end ; end ;
6776: GO 6527
6778: POP
6779: POP
// end ;
6780: GO 6445
6782: POP
6783: POP
// end ;
6784: PPOPN 4
6786: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
6787: LD_INT 0
6789: PPUSH
6790: PPUSH
// result := false ;
6791: LD_ADDR_VAR 0 4
6795: PUSH
6796: LD_INT 0
6798: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
6799: LD_VAR 0 1
6803: PPUSH
6804: CALL_OW 264
6808: PUSH
6809: LD_INT 81
6811: EQUAL
6812: NOT
6813: IFFALSE 6817
// exit ;
6815: GO 7057
// index := GetElementIndex ( minersList , unit ) ;
6817: LD_ADDR_VAR 0 5
6821: PUSH
6822: LD_EXP 19
6826: PPUSH
6827: LD_VAR 0 1
6831: PPUSH
6832: CALL 28834 0 2
6836: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
6837: LD_EXP 20
6841: PUSH
6842: LD_VAR 0 5
6846: ARRAY
6847: PUSH
6848: LD_EXP 21
6852: GREATEREQUAL
6853: IFFALSE 6857
// exit ;
6855: GO 7057
// ComMoveXY ( unit , x , y ) ;
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_VAR 0 2
6866: PPUSH
6867: LD_VAR 0 3
6871: PPUSH
6872: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6876: LD_INT 35
6878: PPUSH
6879: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
6883: LD_VAR 0 1
6887: PPUSH
6888: LD_VAR 0 2
6892: PPUSH
6893: LD_VAR 0 3
6897: PPUSH
6898: CALL 60575 0 3
6902: NOT
6903: PUSH
6904: LD_VAR 0 1
6908: PPUSH
6909: CALL_OW 314
6913: AND
6914: IFFALSE 6918
// exit ;
6916: GO 7057
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
6918: LD_VAR 0 2
6922: PPUSH
6923: LD_VAR 0 3
6927: PPUSH
6928: CALL_OW 428
6932: PUSH
6933: LD_VAR 0 1
6937: EQUAL
6938: PUSH
6939: LD_VAR 0 1
6943: PPUSH
6944: CALL_OW 314
6948: NOT
6949: AND
6950: IFFALSE 6876
// PlaySoundXY ( x , y , PlantMine ) ;
6952: LD_VAR 0 2
6956: PPUSH
6957: LD_VAR 0 3
6961: PPUSH
6962: LD_STRING PlantMine
6964: PPUSH
6965: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
6969: LD_VAR 0 2
6973: PPUSH
6974: LD_VAR 0 3
6978: PPUSH
6979: LD_VAR 0 1
6983: PPUSH
6984: CALL_OW 255
6988: PPUSH
6989: LD_INT 0
6991: PPUSH
6992: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
6996: LD_ADDR_EXP 20
7000: PUSH
7001: LD_EXP 20
7005: PPUSH
7006: LD_VAR 0 5
7010: PUSH
7011: LD_EXP 20
7015: PUSH
7016: LD_VAR 0 5
7020: ARRAY
7021: PUSH
7022: LD_INT 1
7024: PLUS
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PPUSH
7030: LD_VAR 0 2
7034: PUSH
7035: LD_VAR 0 3
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PPUSH
7044: CALL 29049 0 3
7048: ST_TO_ADDR
// result := true ;
7049: LD_ADDR_VAR 0 4
7053: PUSH
7054: LD_INT 1
7056: ST_TO_ADDR
// end ;
7057: LD_VAR 0 4
7061: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
7062: LD_INT 0
7064: PPUSH
7065: PPUSH
7066: PPUSH
// if not unit in minersList then
7067: LD_VAR 0 1
7071: PUSH
7072: LD_EXP 19
7076: IN
7077: NOT
7078: IFFALSE 7082
// exit ;
7080: GO 7474
// index := GetElementIndex ( minersList , unit ) ;
7082: LD_ADDR_VAR 0 6
7086: PUSH
7087: LD_EXP 19
7091: PPUSH
7092: LD_VAR 0 1
7096: PPUSH
7097: CALL 28834 0 2
7101: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
7102: LD_ADDR_VAR 0 5
7106: PUSH
7107: DOUBLE
7108: LD_EXP 20
7112: PUSH
7113: LD_VAR 0 6
7117: ARRAY
7118: INC
7119: ST_TO_ADDR
7120: LD_INT 1
7122: PUSH
7123: FOR_DOWNTO
7124: IFFALSE 7285
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
7126: LD_EXP 20
7130: PUSH
7131: LD_VAR 0 6
7135: ARRAY
7136: PUSH
7137: LD_VAR 0 5
7141: ARRAY
7142: PUSH
7143: LD_INT 1
7145: ARRAY
7146: PUSH
7147: LD_VAR 0 2
7151: EQUAL
7152: PUSH
7153: LD_EXP 20
7157: PUSH
7158: LD_VAR 0 6
7162: ARRAY
7163: PUSH
7164: LD_VAR 0 5
7168: ARRAY
7169: PUSH
7170: LD_INT 2
7172: ARRAY
7173: PUSH
7174: LD_VAR 0 3
7178: EQUAL
7179: AND
7180: IFFALSE 7283
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
7182: LD_EXP 20
7186: PUSH
7187: LD_VAR 0 6
7191: ARRAY
7192: PUSH
7193: LD_VAR 0 5
7197: ARRAY
7198: PUSH
7199: LD_INT 1
7201: ARRAY
7202: PPUSH
7203: LD_EXP 20
7207: PUSH
7208: LD_VAR 0 6
7212: ARRAY
7213: PUSH
7214: LD_VAR 0 5
7218: ARRAY
7219: PUSH
7220: LD_INT 2
7222: ARRAY
7223: PPUSH
7224: LD_VAR 0 1
7228: PPUSH
7229: CALL_OW 255
7233: PPUSH
7234: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
7238: LD_ADDR_EXP 20
7242: PUSH
7243: LD_EXP 20
7247: PPUSH
7248: LD_VAR 0 6
7252: PPUSH
7253: LD_EXP 20
7257: PUSH
7258: LD_VAR 0 6
7262: ARRAY
7263: PPUSH
7264: LD_VAR 0 5
7268: PPUSH
7269: CALL_OW 3
7273: PPUSH
7274: CALL_OW 1
7278: ST_TO_ADDR
// exit ;
7279: POP
7280: POP
7281: GO 7474
// end ; end ;
7283: GO 7123
7285: POP
7286: POP
// for i := minerMinesList [ index ] downto 1 do
7287: LD_ADDR_VAR 0 5
7291: PUSH
7292: DOUBLE
7293: LD_EXP 20
7297: PUSH
7298: LD_VAR 0 6
7302: ARRAY
7303: INC
7304: ST_TO_ADDR
7305: LD_INT 1
7307: PUSH
7308: FOR_DOWNTO
7309: IFFALSE 7472
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
7311: LD_EXP 20
7315: PUSH
7316: LD_VAR 0 6
7320: ARRAY
7321: PUSH
7322: LD_VAR 0 5
7326: ARRAY
7327: PUSH
7328: LD_INT 1
7330: ARRAY
7331: PPUSH
7332: LD_EXP 20
7336: PUSH
7337: LD_VAR 0 6
7341: ARRAY
7342: PUSH
7343: LD_VAR 0 5
7347: ARRAY
7348: PUSH
7349: LD_INT 2
7351: ARRAY
7352: PPUSH
7353: LD_VAR 0 2
7357: PPUSH
7358: LD_VAR 0 3
7362: PPUSH
7363: CALL_OW 298
7367: PUSH
7368: LD_INT 6
7370: LESS
7371: IFFALSE 7470
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
7373: LD_EXP 20
7377: PUSH
7378: LD_VAR 0 6
7382: ARRAY
7383: PUSH
7384: LD_VAR 0 5
7388: ARRAY
7389: PUSH
7390: LD_INT 1
7392: ARRAY
7393: PPUSH
7394: LD_EXP 20
7398: PUSH
7399: LD_VAR 0 6
7403: ARRAY
7404: PUSH
7405: LD_VAR 0 5
7409: ARRAY
7410: PUSH
7411: LD_INT 2
7413: ARRAY
7414: PPUSH
7415: LD_VAR 0 1
7419: PPUSH
7420: CALL_OW 255
7424: PPUSH
7425: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
7429: LD_ADDR_EXP 20
7433: PUSH
7434: LD_EXP 20
7438: PPUSH
7439: LD_VAR 0 6
7443: PPUSH
7444: LD_EXP 20
7448: PUSH
7449: LD_VAR 0 6
7453: ARRAY
7454: PPUSH
7455: LD_VAR 0 5
7459: PPUSH
7460: CALL_OW 3
7464: PPUSH
7465: CALL_OW 1
7469: ST_TO_ADDR
// end ; end ;
7470: GO 7308
7472: POP
7473: POP
// end ;
7474: LD_VAR 0 4
7478: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
7479: LD_INT 0
7481: PPUSH
7482: PPUSH
7483: PPUSH
7484: PPUSH
7485: PPUSH
7486: PPUSH
7487: PPUSH
7488: PPUSH
7489: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
7490: LD_VAR 0 1
7494: PPUSH
7495: CALL_OW 264
7499: PUSH
7500: LD_INT 81
7502: EQUAL
7503: NOT
7504: PUSH
7505: LD_VAR 0 1
7509: PUSH
7510: LD_EXP 19
7514: IN
7515: NOT
7516: OR
7517: IFFALSE 7521
// exit ;
7519: GO 7843
// index := GetElementIndex ( minersList , unit ) ;
7521: LD_ADDR_VAR 0 6
7525: PUSH
7526: LD_EXP 19
7530: PPUSH
7531: LD_VAR 0 1
7535: PPUSH
7536: CALL 28834 0 2
7540: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
7541: LD_ADDR_VAR 0 8
7545: PUSH
7546: LD_EXP 21
7550: PUSH
7551: LD_EXP 20
7555: PUSH
7556: LD_VAR 0 6
7560: ARRAY
7561: MINUS
7562: ST_TO_ADDR
// if not minesFreeAmount then
7563: LD_VAR 0 8
7567: NOT
7568: IFFALSE 7572
// exit ;
7570: GO 7843
// tmp := [ ] ;
7572: LD_ADDR_VAR 0 7
7576: PUSH
7577: EMPTY
7578: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
7579: LD_ADDR_VAR 0 5
7583: PUSH
7584: DOUBLE
7585: LD_INT 1
7587: DEC
7588: ST_TO_ADDR
7589: LD_VAR 0 8
7593: PUSH
7594: FOR_TO
7595: IFFALSE 7790
// begin _d := rand ( 0 , 5 ) ;
7597: LD_ADDR_VAR 0 11
7601: PUSH
7602: LD_INT 0
7604: PPUSH
7605: LD_INT 5
7607: PPUSH
7608: CALL_OW 12
7612: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
7613: LD_ADDR_VAR 0 12
7617: PUSH
7618: LD_INT 2
7620: PPUSH
7621: LD_INT 6
7623: PPUSH
7624: CALL_OW 12
7628: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
7629: LD_ADDR_VAR 0 9
7633: PUSH
7634: LD_VAR 0 2
7638: PPUSH
7639: LD_VAR 0 11
7643: PPUSH
7644: LD_VAR 0 12
7648: PPUSH
7649: CALL_OW 272
7653: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
7654: LD_ADDR_VAR 0 10
7658: PUSH
7659: LD_VAR 0 3
7663: PPUSH
7664: LD_VAR 0 11
7668: PPUSH
7669: LD_VAR 0 12
7673: PPUSH
7674: CALL_OW 273
7678: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
7679: LD_VAR 0 9
7683: PPUSH
7684: LD_VAR 0 10
7688: PPUSH
7689: CALL_OW 488
7693: PUSH
7694: LD_VAR 0 9
7698: PUSH
7699: LD_VAR 0 10
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_VAR 0 7
7712: IN
7713: NOT
7714: AND
7715: PUSH
7716: LD_VAR 0 9
7720: PPUSH
7721: LD_VAR 0 10
7725: PPUSH
7726: CALL_OW 458
7730: NOT
7731: AND
7732: IFFALSE 7774
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
7734: LD_ADDR_VAR 0 7
7738: PUSH
7739: LD_VAR 0 7
7743: PPUSH
7744: LD_VAR 0 7
7748: PUSH
7749: LD_INT 1
7751: PLUS
7752: PPUSH
7753: LD_VAR 0 9
7757: PUSH
7758: LD_VAR 0 10
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PPUSH
7767: CALL_OW 1
7771: ST_TO_ADDR
7772: GO 7788
// i := i - 1 ;
7774: LD_ADDR_VAR 0 5
7778: PUSH
7779: LD_VAR 0 5
7783: PUSH
7784: LD_INT 1
7786: MINUS
7787: ST_TO_ADDR
// end ;
7788: GO 7594
7790: POP
7791: POP
// for i in tmp do
7792: LD_ADDR_VAR 0 5
7796: PUSH
7797: LD_VAR 0 7
7801: PUSH
7802: FOR_IN
7803: IFFALSE 7841
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
7805: LD_VAR 0 1
7809: PPUSH
7810: LD_VAR 0 5
7814: PUSH
7815: LD_INT 1
7817: ARRAY
7818: PPUSH
7819: LD_VAR 0 5
7823: PUSH
7824: LD_INT 2
7826: ARRAY
7827: PPUSH
7828: CALL 6787 0 3
7832: NOT
7833: IFFALSE 7839
// exit ;
7835: POP
7836: POP
7837: GO 7843
7839: GO 7802
7841: POP
7842: POP
// end ;
7843: LD_VAR 0 4
7847: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
7848: LD_INT 0
7850: PPUSH
7851: PPUSH
7852: PPUSH
7853: PPUSH
7854: PPUSH
7855: PPUSH
7856: PPUSH
// if not GetClass ( unit ) = class_sniper then
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 257
7866: PUSH
7867: LD_INT 5
7869: EQUAL
7870: NOT
7871: IFFALSE 7875
// exit ;
7873: GO 8263
// dist := 8 ;
7875: LD_ADDR_VAR 0 5
7879: PUSH
7880: LD_INT 8
7882: ST_TO_ADDR
// viewRange := 12 ;
7883: LD_ADDR_VAR 0 7
7887: PUSH
7888: LD_INT 12
7890: ST_TO_ADDR
// side := GetSide ( unit ) ;
7891: LD_ADDR_VAR 0 6
7895: PUSH
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 255
7905: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
7906: LD_INT 61
7908: PPUSH
7909: LD_VAR 0 6
7913: PPUSH
7914: CALL_OW 321
7918: PUSH
7919: LD_INT 2
7921: EQUAL
7922: IFFALSE 7932
// viewRange := 16 ;
7924: LD_ADDR_VAR 0 7
7928: PUSH
7929: LD_INT 16
7931: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
7932: LD_VAR 0 1
7936: PPUSH
7937: LD_VAR 0 2
7941: PPUSH
7942: LD_VAR 0 3
7946: PPUSH
7947: CALL_OW 297
7951: PUSH
7952: LD_VAR 0 5
7956: GREATER
7957: IFFALSE 8036
// begin ComMoveXY ( unit , x , y ) ;
7959: LD_VAR 0 1
7963: PPUSH
7964: LD_VAR 0 2
7968: PPUSH
7969: LD_VAR 0 3
7973: PPUSH
7974: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7978: LD_INT 35
7980: PPUSH
7981: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
7985: LD_VAR 0 1
7989: PPUSH
7990: LD_VAR 0 2
7994: PPUSH
7995: LD_VAR 0 3
7999: PPUSH
8000: CALL 60575 0 3
8004: NOT
8005: IFFALSE 8009
// exit ;
8007: GO 8263
// until GetDistUnitXY ( unit , x , y ) < dist ;
8009: LD_VAR 0 1
8013: PPUSH
8014: LD_VAR 0 2
8018: PPUSH
8019: LD_VAR 0 3
8023: PPUSH
8024: CALL_OW 297
8028: PUSH
8029: LD_VAR 0 5
8033: LESS
8034: IFFALSE 7978
// end ; ComTurnXY ( unit , x , y ) ;
8036: LD_VAR 0 1
8040: PPUSH
8041: LD_VAR 0 2
8045: PPUSH
8046: LD_VAR 0 3
8050: PPUSH
8051: CALL_OW 118
// wait ( 5 ) ;
8055: LD_INT 5
8057: PPUSH
8058: CALL_OW 67
// _d := GetDir ( unit ) ;
8062: LD_ADDR_VAR 0 10
8066: PUSH
8067: LD_VAR 0 1
8071: PPUSH
8072: CALL_OW 254
8076: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
8077: LD_ADDR_VAR 0 8
8081: PUSH
8082: LD_VAR 0 1
8086: PPUSH
8087: CALL_OW 250
8091: PPUSH
8092: LD_VAR 0 10
8096: PPUSH
8097: LD_VAR 0 5
8101: PPUSH
8102: CALL_OW 272
8106: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
8107: LD_ADDR_VAR 0 9
8111: PUSH
8112: LD_VAR 0 1
8116: PPUSH
8117: CALL_OW 251
8121: PPUSH
8122: LD_VAR 0 10
8126: PPUSH
8127: LD_VAR 0 5
8131: PPUSH
8132: CALL_OW 273
8136: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8137: LD_VAR 0 8
8141: PPUSH
8142: LD_VAR 0 9
8146: PPUSH
8147: CALL_OW 488
8151: NOT
8152: IFFALSE 8156
// exit ;
8154: GO 8263
// ComAnimCustom ( unit , 1 ) ;
8156: LD_VAR 0 1
8160: PPUSH
8161: LD_INT 1
8163: PPUSH
8164: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
8168: LD_VAR 0 8
8172: PPUSH
8173: LD_VAR 0 9
8177: PPUSH
8178: LD_VAR 0 6
8182: PPUSH
8183: LD_VAR 0 7
8187: PPUSH
8188: CALL_OW 330
// repeat wait ( 1 ) ;
8192: LD_INT 1
8194: PPUSH
8195: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
8199: LD_VAR 0 1
8203: PPUSH
8204: CALL_OW 316
8208: PUSH
8209: LD_VAR 0 1
8213: PPUSH
8214: CALL_OW 314
8218: OR
8219: PUSH
8220: LD_VAR 0 1
8224: PPUSH
8225: CALL_OW 302
8229: NOT
8230: OR
8231: PUSH
8232: LD_VAR 0 1
8236: PPUSH
8237: CALL_OW 301
8241: OR
8242: IFFALSE 8192
// RemoveSeeing ( _x , _y , side ) ;
8244: LD_VAR 0 8
8248: PPUSH
8249: LD_VAR 0 9
8253: PPUSH
8254: LD_VAR 0 6
8258: PPUSH
8259: CALL_OW 331
// end ; end_of_file
8263: LD_VAR 0 4
8267: RET
// export globalGameSaveCounter ; every 0 0$1 do
8268: GO 8270
8270: DISABLE
// begin enable ;
8271: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8272: LD_STRING updateTimer(
8274: PUSH
8275: LD_OWVAR 1
8279: STR
8280: PUSH
8281: LD_STRING );
8283: STR
8284: PPUSH
8285: CALL_OW 559
// end ;
8289: END
// every 0 0$1 do
8290: GO 8292
8292: DISABLE
// begin globalGameSaveCounter := 0 ;
8293: LD_ADDR_EXP 22
8297: PUSH
8298: LD_INT 0
8300: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8301: LD_STRING setGameSaveCounter(0)
8303: PPUSH
8304: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8308: LD_STRING initStreamRollete();
8310: PPUSH
8311: CALL_OW 559
// InitStreamMode ;
8315: CALL 9658 0 0
// DefineStreamItems ( false ) ;
8319: LD_INT 0
8321: PPUSH
8322: CALL 10122 0 1
// end ;
8326: END
// export function SOS_MapStart ( ) ; begin
8327: LD_INT 0
8329: PPUSH
// if streamModeActive then
8330: LD_EXP 23
8334: IFFALSE 8343
// DefineStreamItems ( true ) ;
8336: LD_INT 1
8338: PPUSH
8339: CALL 10122 0 1
// UpdateLuaVariables ( ) ;
8343: CALL 8360 0 0
// UpdateFactoryWaypoints ( ) ;
8347: CALL 22991 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8351: CALL 23248 0 0
// end ;
8355: LD_VAR 0 1
8359: RET
// function UpdateLuaVariables ( ) ; begin
8360: LD_INT 0
8362: PPUSH
// if globalGameSaveCounter then
8363: LD_EXP 22
8367: IFFALSE 8401
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8369: LD_ADDR_EXP 22
8373: PUSH
8374: LD_EXP 22
8378: PPUSH
8379: CALL 63139 0 1
8383: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8384: LD_STRING setGameSaveCounter(
8386: PUSH
8387: LD_EXP 22
8391: STR
8392: PUSH
8393: LD_STRING )
8395: STR
8396: PPUSH
8397: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
8401: LD_STRING setGameDifficulty(
8403: PUSH
8404: LD_OWVAR 67
8408: STR
8409: PUSH
8410: LD_STRING )
8412: STR
8413: PPUSH
8414: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
8418: LD_STRING displayDifficulty(
8420: PUSH
8421: LD_OWVAR 67
8425: STR
8426: PUSH
8427: LD_STRING )
8429: STR
8430: PPUSH
8431: CALL_OW 559
// end ;
8435: LD_VAR 0 1
8439: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8440: LD_INT 0
8442: PPUSH
// if p2 = stream_mode then
8443: LD_VAR 0 2
8447: PUSH
8448: LD_INT 100
8450: EQUAL
8451: IFFALSE 9454
// begin if not StreamModeActive then
8453: LD_EXP 23
8457: NOT
8458: IFFALSE 8468
// StreamModeActive := true ;
8460: LD_ADDR_EXP 23
8464: PUSH
8465: LD_INT 1
8467: ST_TO_ADDR
// if p3 = 0 then
8468: LD_VAR 0 3
8472: PUSH
8473: LD_INT 0
8475: EQUAL
8476: IFFALSE 8482
// InitStreamMode ;
8478: CALL 9658 0 0
// if p3 = 1 then
8482: LD_VAR 0 3
8486: PUSH
8487: LD_INT 1
8489: EQUAL
8490: IFFALSE 8500
// sRocket := true ;
8492: LD_ADDR_EXP 28
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// if p3 = 2 then
8500: LD_VAR 0 3
8504: PUSH
8505: LD_INT 2
8507: EQUAL
8508: IFFALSE 8518
// sSpeed := true ;
8510: LD_ADDR_EXP 27
8514: PUSH
8515: LD_INT 1
8517: ST_TO_ADDR
// if p3 = 3 then
8518: LD_VAR 0 3
8522: PUSH
8523: LD_INT 3
8525: EQUAL
8526: IFFALSE 8536
// sEngine := true ;
8528: LD_ADDR_EXP 29
8532: PUSH
8533: LD_INT 1
8535: ST_TO_ADDR
// if p3 = 4 then
8536: LD_VAR 0 3
8540: PUSH
8541: LD_INT 4
8543: EQUAL
8544: IFFALSE 8554
// sSpec := true ;
8546: LD_ADDR_EXP 26
8550: PUSH
8551: LD_INT 1
8553: ST_TO_ADDR
// if p3 = 5 then
8554: LD_VAR 0 3
8558: PUSH
8559: LD_INT 5
8561: EQUAL
8562: IFFALSE 8572
// sLevel := true ;
8564: LD_ADDR_EXP 30
8568: PUSH
8569: LD_INT 1
8571: ST_TO_ADDR
// if p3 = 6 then
8572: LD_VAR 0 3
8576: PUSH
8577: LD_INT 6
8579: EQUAL
8580: IFFALSE 8590
// sArmoury := true ;
8582: LD_ADDR_EXP 31
8586: PUSH
8587: LD_INT 1
8589: ST_TO_ADDR
// if p3 = 7 then
8590: LD_VAR 0 3
8594: PUSH
8595: LD_INT 7
8597: EQUAL
8598: IFFALSE 8608
// sRadar := true ;
8600: LD_ADDR_EXP 32
8604: PUSH
8605: LD_INT 1
8607: ST_TO_ADDR
// if p3 = 8 then
8608: LD_VAR 0 3
8612: PUSH
8613: LD_INT 8
8615: EQUAL
8616: IFFALSE 8626
// sBunker := true ;
8618: LD_ADDR_EXP 33
8622: PUSH
8623: LD_INT 1
8625: ST_TO_ADDR
// if p3 = 9 then
8626: LD_VAR 0 3
8630: PUSH
8631: LD_INT 9
8633: EQUAL
8634: IFFALSE 8644
// sHack := true ;
8636: LD_ADDR_EXP 34
8640: PUSH
8641: LD_INT 1
8643: ST_TO_ADDR
// if p3 = 10 then
8644: LD_VAR 0 3
8648: PUSH
8649: LD_INT 10
8651: EQUAL
8652: IFFALSE 8662
// sFire := true ;
8654: LD_ADDR_EXP 35
8658: PUSH
8659: LD_INT 1
8661: ST_TO_ADDR
// if p3 = 11 then
8662: LD_VAR 0 3
8666: PUSH
8667: LD_INT 11
8669: EQUAL
8670: IFFALSE 8680
// sRefresh := true ;
8672: LD_ADDR_EXP 36
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// if p3 = 12 then
8680: LD_VAR 0 3
8684: PUSH
8685: LD_INT 12
8687: EQUAL
8688: IFFALSE 8698
// sExp := true ;
8690: LD_ADDR_EXP 37
8694: PUSH
8695: LD_INT 1
8697: ST_TO_ADDR
// if p3 = 13 then
8698: LD_VAR 0 3
8702: PUSH
8703: LD_INT 13
8705: EQUAL
8706: IFFALSE 8716
// sDepot := true ;
8708: LD_ADDR_EXP 38
8712: PUSH
8713: LD_INT 1
8715: ST_TO_ADDR
// if p3 = 14 then
8716: LD_VAR 0 3
8720: PUSH
8721: LD_INT 14
8723: EQUAL
8724: IFFALSE 8734
// sFlag := true ;
8726: LD_ADDR_EXP 39
8730: PUSH
8731: LD_INT 1
8733: ST_TO_ADDR
// if p3 = 15 then
8734: LD_VAR 0 3
8738: PUSH
8739: LD_INT 15
8741: EQUAL
8742: IFFALSE 8752
// sKamikadze := true ;
8744: LD_ADDR_EXP 47
8748: PUSH
8749: LD_INT 1
8751: ST_TO_ADDR
// if p3 = 16 then
8752: LD_VAR 0 3
8756: PUSH
8757: LD_INT 16
8759: EQUAL
8760: IFFALSE 8770
// sTroll := true ;
8762: LD_ADDR_EXP 48
8766: PUSH
8767: LD_INT 1
8769: ST_TO_ADDR
// if p3 = 17 then
8770: LD_VAR 0 3
8774: PUSH
8775: LD_INT 17
8777: EQUAL
8778: IFFALSE 8788
// sSlow := true ;
8780: LD_ADDR_EXP 49
8784: PUSH
8785: LD_INT 1
8787: ST_TO_ADDR
// if p3 = 18 then
8788: LD_VAR 0 3
8792: PUSH
8793: LD_INT 18
8795: EQUAL
8796: IFFALSE 8806
// sLack := true ;
8798: LD_ADDR_EXP 50
8802: PUSH
8803: LD_INT 1
8805: ST_TO_ADDR
// if p3 = 19 then
8806: LD_VAR 0 3
8810: PUSH
8811: LD_INT 19
8813: EQUAL
8814: IFFALSE 8824
// sTank := true ;
8816: LD_ADDR_EXP 52
8820: PUSH
8821: LD_INT 1
8823: ST_TO_ADDR
// if p3 = 20 then
8824: LD_VAR 0 3
8828: PUSH
8829: LD_INT 20
8831: EQUAL
8832: IFFALSE 8842
// sRemote := true ;
8834: LD_ADDR_EXP 53
8838: PUSH
8839: LD_INT 1
8841: ST_TO_ADDR
// if p3 = 21 then
8842: LD_VAR 0 3
8846: PUSH
8847: LD_INT 21
8849: EQUAL
8850: IFFALSE 8860
// sPowell := true ;
8852: LD_ADDR_EXP 54
8856: PUSH
8857: LD_INT 1
8859: ST_TO_ADDR
// if p3 = 22 then
8860: LD_VAR 0 3
8864: PUSH
8865: LD_INT 22
8867: EQUAL
8868: IFFALSE 8878
// sTeleport := true ;
8870: LD_ADDR_EXP 57
8874: PUSH
8875: LD_INT 1
8877: ST_TO_ADDR
// if p3 = 23 then
8878: LD_VAR 0 3
8882: PUSH
8883: LD_INT 23
8885: EQUAL
8886: IFFALSE 8896
// sOilTower := true ;
8888: LD_ADDR_EXP 59
8892: PUSH
8893: LD_INT 1
8895: ST_TO_ADDR
// if p3 = 24 then
8896: LD_VAR 0 3
8900: PUSH
8901: LD_INT 24
8903: EQUAL
8904: IFFALSE 8914
// sShovel := true ;
8906: LD_ADDR_EXP 60
8910: PUSH
8911: LD_INT 1
8913: ST_TO_ADDR
// if p3 = 25 then
8914: LD_VAR 0 3
8918: PUSH
8919: LD_INT 25
8921: EQUAL
8922: IFFALSE 8932
// sSheik := true ;
8924: LD_ADDR_EXP 61
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// if p3 = 26 then
8932: LD_VAR 0 3
8936: PUSH
8937: LD_INT 26
8939: EQUAL
8940: IFFALSE 8950
// sEarthquake := true ;
8942: LD_ADDR_EXP 63
8946: PUSH
8947: LD_INT 1
8949: ST_TO_ADDR
// if p3 = 27 then
8950: LD_VAR 0 3
8954: PUSH
8955: LD_INT 27
8957: EQUAL
8958: IFFALSE 8968
// sAI := true ;
8960: LD_ADDR_EXP 64
8964: PUSH
8965: LD_INT 1
8967: ST_TO_ADDR
// if p3 = 28 then
8968: LD_VAR 0 3
8972: PUSH
8973: LD_INT 28
8975: EQUAL
8976: IFFALSE 8986
// sCargo := true ;
8978: LD_ADDR_EXP 67
8982: PUSH
8983: LD_INT 1
8985: ST_TO_ADDR
// if p3 = 29 then
8986: LD_VAR 0 3
8990: PUSH
8991: LD_INT 29
8993: EQUAL
8994: IFFALSE 9004
// sDLaser := true ;
8996: LD_ADDR_EXP 68
9000: PUSH
9001: LD_INT 1
9003: ST_TO_ADDR
// if p3 = 30 then
9004: LD_VAR 0 3
9008: PUSH
9009: LD_INT 30
9011: EQUAL
9012: IFFALSE 9022
// sExchange := true ;
9014: LD_ADDR_EXP 69
9018: PUSH
9019: LD_INT 1
9021: ST_TO_ADDR
// if p3 = 31 then
9022: LD_VAR 0 3
9026: PUSH
9027: LD_INT 31
9029: EQUAL
9030: IFFALSE 9040
// sFac := true ;
9032: LD_ADDR_EXP 70
9036: PUSH
9037: LD_INT 1
9039: ST_TO_ADDR
// if p3 = 32 then
9040: LD_VAR 0 3
9044: PUSH
9045: LD_INT 32
9047: EQUAL
9048: IFFALSE 9058
// sPower := true ;
9050: LD_ADDR_EXP 71
9054: PUSH
9055: LD_INT 1
9057: ST_TO_ADDR
// if p3 = 33 then
9058: LD_VAR 0 3
9062: PUSH
9063: LD_INT 33
9065: EQUAL
9066: IFFALSE 9076
// sRandom := true ;
9068: LD_ADDR_EXP 72
9072: PUSH
9073: LD_INT 1
9075: ST_TO_ADDR
// if p3 = 34 then
9076: LD_VAR 0 3
9080: PUSH
9081: LD_INT 34
9083: EQUAL
9084: IFFALSE 9094
// sShield := true ;
9086: LD_ADDR_EXP 73
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// if p3 = 35 then
9094: LD_VAR 0 3
9098: PUSH
9099: LD_INT 35
9101: EQUAL
9102: IFFALSE 9112
// sTime := true ;
9104: LD_ADDR_EXP 74
9108: PUSH
9109: LD_INT 1
9111: ST_TO_ADDR
// if p3 = 36 then
9112: LD_VAR 0 3
9116: PUSH
9117: LD_INT 36
9119: EQUAL
9120: IFFALSE 9130
// sTools := true ;
9122: LD_ADDR_EXP 75
9126: PUSH
9127: LD_INT 1
9129: ST_TO_ADDR
// if p3 = 101 then
9130: LD_VAR 0 3
9134: PUSH
9135: LD_INT 101
9137: EQUAL
9138: IFFALSE 9148
// sSold := true ;
9140: LD_ADDR_EXP 40
9144: PUSH
9145: LD_INT 1
9147: ST_TO_ADDR
// if p3 = 102 then
9148: LD_VAR 0 3
9152: PUSH
9153: LD_INT 102
9155: EQUAL
9156: IFFALSE 9166
// sDiff := true ;
9158: LD_ADDR_EXP 41
9162: PUSH
9163: LD_INT 1
9165: ST_TO_ADDR
// if p3 = 103 then
9166: LD_VAR 0 3
9170: PUSH
9171: LD_INT 103
9173: EQUAL
9174: IFFALSE 9184
// sFog := true ;
9176: LD_ADDR_EXP 44
9180: PUSH
9181: LD_INT 1
9183: ST_TO_ADDR
// if p3 = 104 then
9184: LD_VAR 0 3
9188: PUSH
9189: LD_INT 104
9191: EQUAL
9192: IFFALSE 9202
// sReset := true ;
9194: LD_ADDR_EXP 45
9198: PUSH
9199: LD_INT 1
9201: ST_TO_ADDR
// if p3 = 105 then
9202: LD_VAR 0 3
9206: PUSH
9207: LD_INT 105
9209: EQUAL
9210: IFFALSE 9220
// sSun := true ;
9212: LD_ADDR_EXP 46
9216: PUSH
9217: LD_INT 1
9219: ST_TO_ADDR
// if p3 = 106 then
9220: LD_VAR 0 3
9224: PUSH
9225: LD_INT 106
9227: EQUAL
9228: IFFALSE 9238
// sTiger := true ;
9230: LD_ADDR_EXP 42
9234: PUSH
9235: LD_INT 1
9237: ST_TO_ADDR
// if p3 = 107 then
9238: LD_VAR 0 3
9242: PUSH
9243: LD_INT 107
9245: EQUAL
9246: IFFALSE 9256
// sBomb := true ;
9248: LD_ADDR_EXP 43
9252: PUSH
9253: LD_INT 1
9255: ST_TO_ADDR
// if p3 = 108 then
9256: LD_VAR 0 3
9260: PUSH
9261: LD_INT 108
9263: EQUAL
9264: IFFALSE 9274
// sWound := true ;
9266: LD_ADDR_EXP 51
9270: PUSH
9271: LD_INT 1
9273: ST_TO_ADDR
// if p3 = 109 then
9274: LD_VAR 0 3
9278: PUSH
9279: LD_INT 109
9281: EQUAL
9282: IFFALSE 9292
// sBetray := true ;
9284: LD_ADDR_EXP 55
9288: PUSH
9289: LD_INT 1
9291: ST_TO_ADDR
// if p3 = 110 then
9292: LD_VAR 0 3
9296: PUSH
9297: LD_INT 110
9299: EQUAL
9300: IFFALSE 9310
// sContamin := true ;
9302: LD_ADDR_EXP 56
9306: PUSH
9307: LD_INT 1
9309: ST_TO_ADDR
// if p3 = 111 then
9310: LD_VAR 0 3
9314: PUSH
9315: LD_INT 111
9317: EQUAL
9318: IFFALSE 9328
// sOil := true ;
9320: LD_ADDR_EXP 58
9324: PUSH
9325: LD_INT 1
9327: ST_TO_ADDR
// if p3 = 112 then
9328: LD_VAR 0 3
9332: PUSH
9333: LD_INT 112
9335: EQUAL
9336: IFFALSE 9346
// sStu := true ;
9338: LD_ADDR_EXP 62
9342: PUSH
9343: LD_INT 1
9345: ST_TO_ADDR
// if p3 = 113 then
9346: LD_VAR 0 3
9350: PUSH
9351: LD_INT 113
9353: EQUAL
9354: IFFALSE 9364
// sBazooka := true ;
9356: LD_ADDR_EXP 65
9360: PUSH
9361: LD_INT 1
9363: ST_TO_ADDR
// if p3 = 114 then
9364: LD_VAR 0 3
9368: PUSH
9369: LD_INT 114
9371: EQUAL
9372: IFFALSE 9382
// sMortar := true ;
9374: LD_ADDR_EXP 66
9378: PUSH
9379: LD_INT 1
9381: ST_TO_ADDR
// if p3 = 115 then
9382: LD_VAR 0 3
9386: PUSH
9387: LD_INT 115
9389: EQUAL
9390: IFFALSE 9400
// sRanger := true ;
9392: LD_ADDR_EXP 76
9396: PUSH
9397: LD_INT 1
9399: ST_TO_ADDR
// if p3 = 116 then
9400: LD_VAR 0 3
9404: PUSH
9405: LD_INT 116
9407: EQUAL
9408: IFFALSE 9418
// sComputer := true ;
9410: LD_ADDR_EXP 77
9414: PUSH
9415: LD_INT 1
9417: ST_TO_ADDR
// if p3 = 117 then
9418: LD_VAR 0 3
9422: PUSH
9423: LD_INT 117
9425: EQUAL
9426: IFFALSE 9436
// s30 := true ;
9428: LD_ADDR_EXP 78
9432: PUSH
9433: LD_INT 1
9435: ST_TO_ADDR
// if p3 = 118 then
9436: LD_VAR 0 3
9440: PUSH
9441: LD_INT 118
9443: EQUAL
9444: IFFALSE 9454
// s60 := true ;
9446: LD_ADDR_EXP 79
9450: PUSH
9451: LD_INT 1
9453: ST_TO_ADDR
// end ; if p2 = hack_mode then
9454: LD_VAR 0 2
9458: PUSH
9459: LD_INT 101
9461: EQUAL
9462: IFFALSE 9590
// begin case p3 of 1 :
9464: LD_VAR 0 3
9468: PUSH
9469: LD_INT 1
9471: DOUBLE
9472: EQUAL
9473: IFTRUE 9477
9475: GO 9484
9477: POP
// hHackUnlimitedResources ; 2 :
9478: CALL 21737 0 0
9482: GO 9590
9484: LD_INT 2
9486: DOUBLE
9487: EQUAL
9488: IFTRUE 9492
9490: GO 9499
9492: POP
// hHackSetLevel10 ; 3 :
9493: CALL 21870 0 0
9497: GO 9590
9499: LD_INT 3
9501: DOUBLE
9502: EQUAL
9503: IFTRUE 9507
9505: GO 9514
9507: POP
// hHackSetLevel10YourUnits ; 4 :
9508: CALL 21955 0 0
9512: GO 9590
9514: LD_INT 4
9516: DOUBLE
9517: EQUAL
9518: IFTRUE 9522
9520: GO 9529
9522: POP
// hHackInvincible ; 5 :
9523: CALL 22403 0 0
9527: GO 9590
9529: LD_INT 5
9531: DOUBLE
9532: EQUAL
9533: IFTRUE 9537
9535: GO 9544
9537: POP
// hHackInvisible ; 6 :
9538: CALL 22514 0 0
9542: GO 9590
9544: LD_INT 6
9546: DOUBLE
9547: EQUAL
9548: IFTRUE 9552
9550: GO 9559
9552: POP
// hHackChangeYourSide ; 7 :
9553: CALL 22571 0 0
9557: GO 9590
9559: LD_INT 7
9561: DOUBLE
9562: EQUAL
9563: IFTRUE 9567
9565: GO 9574
9567: POP
// hHackChangeUnitSide ; 8 :
9568: CALL 22613 0 0
9572: GO 9590
9574: LD_INT 8
9576: DOUBLE
9577: EQUAL
9578: IFTRUE 9582
9580: GO 9589
9582: POP
// hHackFog ; end ;
9583: CALL 22714 0 0
9587: GO 9590
9589: POP
// end ; if p2 = game_save_mode then
9590: LD_VAR 0 2
9594: PUSH
9595: LD_INT 102
9597: EQUAL
9598: IFFALSE 9653
// begin if p3 = 1 then
9600: LD_VAR 0 3
9604: PUSH
9605: LD_INT 1
9607: EQUAL
9608: IFFALSE 9620
// globalGameSaveCounter := p4 ;
9610: LD_ADDR_EXP 22
9614: PUSH
9615: LD_VAR 0 4
9619: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9620: LD_VAR 0 3
9624: PUSH
9625: LD_INT 2
9627: EQUAL
9628: PUSH
9629: LD_EXP 22
9633: AND
9634: IFFALSE 9653
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9636: LD_STRING setGameSaveCounter(
9638: PUSH
9639: LD_EXP 22
9643: STR
9644: PUSH
9645: LD_STRING )
9647: STR
9648: PPUSH
9649: CALL_OW 559
// end ; end ;
9653: LD_VAR 0 7
9657: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9658: LD_INT 0
9660: PPUSH
// streamModeActive := false ;
9661: LD_ADDR_EXP 23
9665: PUSH
9666: LD_INT 0
9668: ST_TO_ADDR
// normalCounter := 36 ;
9669: LD_ADDR_EXP 24
9673: PUSH
9674: LD_INT 36
9676: ST_TO_ADDR
// hardcoreCounter := 18 ;
9677: LD_ADDR_EXP 25
9681: PUSH
9682: LD_INT 18
9684: ST_TO_ADDR
// sRocket := false ;
9685: LD_ADDR_EXP 28
9689: PUSH
9690: LD_INT 0
9692: ST_TO_ADDR
// sSpeed := false ;
9693: LD_ADDR_EXP 27
9697: PUSH
9698: LD_INT 0
9700: ST_TO_ADDR
// sEngine := false ;
9701: LD_ADDR_EXP 29
9705: PUSH
9706: LD_INT 0
9708: ST_TO_ADDR
// sSpec := false ;
9709: LD_ADDR_EXP 26
9713: PUSH
9714: LD_INT 0
9716: ST_TO_ADDR
// sLevel := false ;
9717: LD_ADDR_EXP 30
9721: PUSH
9722: LD_INT 0
9724: ST_TO_ADDR
// sArmoury := false ;
9725: LD_ADDR_EXP 31
9729: PUSH
9730: LD_INT 0
9732: ST_TO_ADDR
// sRadar := false ;
9733: LD_ADDR_EXP 32
9737: PUSH
9738: LD_INT 0
9740: ST_TO_ADDR
// sBunker := false ;
9741: LD_ADDR_EXP 33
9745: PUSH
9746: LD_INT 0
9748: ST_TO_ADDR
// sHack := false ;
9749: LD_ADDR_EXP 34
9753: PUSH
9754: LD_INT 0
9756: ST_TO_ADDR
// sFire := false ;
9757: LD_ADDR_EXP 35
9761: PUSH
9762: LD_INT 0
9764: ST_TO_ADDR
// sRefresh := false ;
9765: LD_ADDR_EXP 36
9769: PUSH
9770: LD_INT 0
9772: ST_TO_ADDR
// sExp := false ;
9773: LD_ADDR_EXP 37
9777: PUSH
9778: LD_INT 0
9780: ST_TO_ADDR
// sDepot := false ;
9781: LD_ADDR_EXP 38
9785: PUSH
9786: LD_INT 0
9788: ST_TO_ADDR
// sFlag := false ;
9789: LD_ADDR_EXP 39
9793: PUSH
9794: LD_INT 0
9796: ST_TO_ADDR
// sKamikadze := false ;
9797: LD_ADDR_EXP 47
9801: PUSH
9802: LD_INT 0
9804: ST_TO_ADDR
// sTroll := false ;
9805: LD_ADDR_EXP 48
9809: PUSH
9810: LD_INT 0
9812: ST_TO_ADDR
// sSlow := false ;
9813: LD_ADDR_EXP 49
9817: PUSH
9818: LD_INT 0
9820: ST_TO_ADDR
// sLack := false ;
9821: LD_ADDR_EXP 50
9825: PUSH
9826: LD_INT 0
9828: ST_TO_ADDR
// sTank := false ;
9829: LD_ADDR_EXP 52
9833: PUSH
9834: LD_INT 0
9836: ST_TO_ADDR
// sRemote := false ;
9837: LD_ADDR_EXP 53
9841: PUSH
9842: LD_INT 0
9844: ST_TO_ADDR
// sPowell := false ;
9845: LD_ADDR_EXP 54
9849: PUSH
9850: LD_INT 0
9852: ST_TO_ADDR
// sTeleport := false ;
9853: LD_ADDR_EXP 57
9857: PUSH
9858: LD_INT 0
9860: ST_TO_ADDR
// sOilTower := false ;
9861: LD_ADDR_EXP 59
9865: PUSH
9866: LD_INT 0
9868: ST_TO_ADDR
// sShovel := false ;
9869: LD_ADDR_EXP 60
9873: PUSH
9874: LD_INT 0
9876: ST_TO_ADDR
// sSheik := false ;
9877: LD_ADDR_EXP 61
9881: PUSH
9882: LD_INT 0
9884: ST_TO_ADDR
// sEarthquake := false ;
9885: LD_ADDR_EXP 63
9889: PUSH
9890: LD_INT 0
9892: ST_TO_ADDR
// sAI := false ;
9893: LD_ADDR_EXP 64
9897: PUSH
9898: LD_INT 0
9900: ST_TO_ADDR
// sCargo := false ;
9901: LD_ADDR_EXP 67
9905: PUSH
9906: LD_INT 0
9908: ST_TO_ADDR
// sDLaser := false ;
9909: LD_ADDR_EXP 68
9913: PUSH
9914: LD_INT 0
9916: ST_TO_ADDR
// sExchange := false ;
9917: LD_ADDR_EXP 69
9921: PUSH
9922: LD_INT 0
9924: ST_TO_ADDR
// sFac := false ;
9925: LD_ADDR_EXP 70
9929: PUSH
9930: LD_INT 0
9932: ST_TO_ADDR
// sPower := false ;
9933: LD_ADDR_EXP 71
9937: PUSH
9938: LD_INT 0
9940: ST_TO_ADDR
// sRandom := false ;
9941: LD_ADDR_EXP 72
9945: PUSH
9946: LD_INT 0
9948: ST_TO_ADDR
// sShield := false ;
9949: LD_ADDR_EXP 73
9953: PUSH
9954: LD_INT 0
9956: ST_TO_ADDR
// sTime := false ;
9957: LD_ADDR_EXP 74
9961: PUSH
9962: LD_INT 0
9964: ST_TO_ADDR
// sTools := false ;
9965: LD_ADDR_EXP 75
9969: PUSH
9970: LD_INT 0
9972: ST_TO_ADDR
// sSold := false ;
9973: LD_ADDR_EXP 40
9977: PUSH
9978: LD_INT 0
9980: ST_TO_ADDR
// sDiff := false ;
9981: LD_ADDR_EXP 41
9985: PUSH
9986: LD_INT 0
9988: ST_TO_ADDR
// sFog := false ;
9989: LD_ADDR_EXP 44
9993: PUSH
9994: LD_INT 0
9996: ST_TO_ADDR
// sReset := false ;
9997: LD_ADDR_EXP 45
10001: PUSH
10002: LD_INT 0
10004: ST_TO_ADDR
// sSun := false ;
10005: LD_ADDR_EXP 46
10009: PUSH
10010: LD_INT 0
10012: ST_TO_ADDR
// sTiger := false ;
10013: LD_ADDR_EXP 42
10017: PUSH
10018: LD_INT 0
10020: ST_TO_ADDR
// sBomb := false ;
10021: LD_ADDR_EXP 43
10025: PUSH
10026: LD_INT 0
10028: ST_TO_ADDR
// sWound := false ;
10029: LD_ADDR_EXP 51
10033: PUSH
10034: LD_INT 0
10036: ST_TO_ADDR
// sBetray := false ;
10037: LD_ADDR_EXP 55
10041: PUSH
10042: LD_INT 0
10044: ST_TO_ADDR
// sContamin := false ;
10045: LD_ADDR_EXP 56
10049: PUSH
10050: LD_INT 0
10052: ST_TO_ADDR
// sOil := false ;
10053: LD_ADDR_EXP 58
10057: PUSH
10058: LD_INT 0
10060: ST_TO_ADDR
// sStu := false ;
10061: LD_ADDR_EXP 62
10065: PUSH
10066: LD_INT 0
10068: ST_TO_ADDR
// sBazooka := false ;
10069: LD_ADDR_EXP 65
10073: PUSH
10074: LD_INT 0
10076: ST_TO_ADDR
// sMortar := false ;
10077: LD_ADDR_EXP 66
10081: PUSH
10082: LD_INT 0
10084: ST_TO_ADDR
// sRanger := false ;
10085: LD_ADDR_EXP 76
10089: PUSH
10090: LD_INT 0
10092: ST_TO_ADDR
// sComputer := false ;
10093: LD_ADDR_EXP 77
10097: PUSH
10098: LD_INT 0
10100: ST_TO_ADDR
// s30 := false ;
10101: LD_ADDR_EXP 78
10105: PUSH
10106: LD_INT 0
10108: ST_TO_ADDR
// s60 := false ;
10109: LD_ADDR_EXP 79
10113: PUSH
10114: LD_INT 0
10116: ST_TO_ADDR
// end ;
10117: LD_VAR 0 1
10121: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10122: LD_INT 0
10124: PPUSH
10125: PPUSH
10126: PPUSH
10127: PPUSH
10128: PPUSH
10129: PPUSH
10130: PPUSH
// result := [ ] ;
10131: LD_ADDR_VAR 0 2
10135: PUSH
10136: EMPTY
10137: ST_TO_ADDR
// if campaign_id = 1 then
10138: LD_OWVAR 69
10142: PUSH
10143: LD_INT 1
10145: EQUAL
10146: IFFALSE 13312
// begin case mission_number of 1 :
10148: LD_OWVAR 70
10152: PUSH
10153: LD_INT 1
10155: DOUBLE
10156: EQUAL
10157: IFTRUE 10161
10159: GO 10237
10161: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10162: LD_ADDR_VAR 0 2
10166: PUSH
10167: LD_INT 2
10169: PUSH
10170: LD_INT 4
10172: PUSH
10173: LD_INT 11
10175: PUSH
10176: LD_INT 12
10178: PUSH
10179: LD_INT 15
10181: PUSH
10182: LD_INT 16
10184: PUSH
10185: LD_INT 22
10187: PUSH
10188: LD_INT 23
10190: PUSH
10191: LD_INT 26
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: PUSH
10205: LD_INT 101
10207: PUSH
10208: LD_INT 102
10210: PUSH
10211: LD_INT 106
10213: PUSH
10214: LD_INT 116
10216: PUSH
10217: LD_INT 117
10219: PUSH
10220: LD_INT 118
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: ST_TO_ADDR
10235: GO 13310
10237: LD_INT 2
10239: DOUBLE
10240: EQUAL
10241: IFTRUE 10245
10243: GO 10329
10245: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10246: LD_ADDR_VAR 0 2
10250: PUSH
10251: LD_INT 2
10253: PUSH
10254: LD_INT 4
10256: PUSH
10257: LD_INT 11
10259: PUSH
10260: LD_INT 12
10262: PUSH
10263: LD_INT 15
10265: PUSH
10266: LD_INT 16
10268: PUSH
10269: LD_INT 22
10271: PUSH
10272: LD_INT 23
10274: PUSH
10275: LD_INT 26
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 101
10291: PUSH
10292: LD_INT 102
10294: PUSH
10295: LD_INT 105
10297: PUSH
10298: LD_INT 106
10300: PUSH
10301: LD_INT 108
10303: PUSH
10304: LD_INT 116
10306: PUSH
10307: LD_INT 117
10309: PUSH
10310: LD_INT 118
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: ST_TO_ADDR
10327: GO 13310
10329: LD_INT 3
10331: DOUBLE
10332: EQUAL
10333: IFTRUE 10337
10335: GO 10425
10337: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10338: LD_ADDR_VAR 0 2
10342: PUSH
10343: LD_INT 2
10345: PUSH
10346: LD_INT 4
10348: PUSH
10349: LD_INT 5
10351: PUSH
10352: LD_INT 11
10354: PUSH
10355: LD_INT 12
10357: PUSH
10358: LD_INT 15
10360: PUSH
10361: LD_INT 16
10363: PUSH
10364: LD_INT 22
10366: PUSH
10367: LD_INT 26
10369: PUSH
10370: LD_INT 36
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 101
10387: PUSH
10388: LD_INT 102
10390: PUSH
10391: LD_INT 105
10393: PUSH
10394: LD_INT 106
10396: PUSH
10397: LD_INT 108
10399: PUSH
10400: LD_INT 116
10402: PUSH
10403: LD_INT 117
10405: PUSH
10406: LD_INT 118
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: ST_TO_ADDR
10423: GO 13310
10425: LD_INT 4
10427: DOUBLE
10428: EQUAL
10429: IFTRUE 10433
10431: GO 10529
10433: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10434: LD_ADDR_VAR 0 2
10438: PUSH
10439: LD_INT 2
10441: PUSH
10442: LD_INT 4
10444: PUSH
10445: LD_INT 5
10447: PUSH
10448: LD_INT 8
10450: PUSH
10451: LD_INT 11
10453: PUSH
10454: LD_INT 12
10456: PUSH
10457: LD_INT 15
10459: PUSH
10460: LD_INT 16
10462: PUSH
10463: LD_INT 22
10465: PUSH
10466: LD_INT 23
10468: PUSH
10469: LD_INT 26
10471: PUSH
10472: LD_INT 36
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: PUSH
10489: LD_INT 101
10491: PUSH
10492: LD_INT 102
10494: PUSH
10495: LD_INT 105
10497: PUSH
10498: LD_INT 106
10500: PUSH
10501: LD_INT 108
10503: PUSH
10504: LD_INT 116
10506: PUSH
10507: LD_INT 117
10509: PUSH
10510: LD_INT 118
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: ST_TO_ADDR
10527: GO 13310
10529: LD_INT 5
10531: DOUBLE
10532: EQUAL
10533: IFTRUE 10537
10535: GO 10649
10537: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10538: LD_ADDR_VAR 0 2
10542: PUSH
10543: LD_INT 2
10545: PUSH
10546: LD_INT 4
10548: PUSH
10549: LD_INT 5
10551: PUSH
10552: LD_INT 6
10554: PUSH
10555: LD_INT 8
10557: PUSH
10558: LD_INT 11
10560: PUSH
10561: LD_INT 12
10563: PUSH
10564: LD_INT 15
10566: PUSH
10567: LD_INT 16
10569: PUSH
10570: LD_INT 22
10572: PUSH
10573: LD_INT 23
10575: PUSH
10576: LD_INT 25
10578: PUSH
10579: LD_INT 26
10581: PUSH
10582: LD_INT 36
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: PUSH
10601: LD_INT 101
10603: PUSH
10604: LD_INT 102
10606: PUSH
10607: LD_INT 105
10609: PUSH
10610: LD_INT 106
10612: PUSH
10613: LD_INT 108
10615: PUSH
10616: LD_INT 109
10618: PUSH
10619: LD_INT 112
10621: PUSH
10622: LD_INT 116
10624: PUSH
10625: LD_INT 117
10627: PUSH
10628: LD_INT 118
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: ST_TO_ADDR
10647: GO 13310
10649: LD_INT 6
10651: DOUBLE
10652: EQUAL
10653: IFTRUE 10657
10655: GO 10789
10657: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10658: LD_ADDR_VAR 0 2
10662: PUSH
10663: LD_INT 2
10665: PUSH
10666: LD_INT 4
10668: PUSH
10669: LD_INT 5
10671: PUSH
10672: LD_INT 6
10674: PUSH
10675: LD_INT 8
10677: PUSH
10678: LD_INT 11
10680: PUSH
10681: LD_INT 12
10683: PUSH
10684: LD_INT 15
10686: PUSH
10687: LD_INT 16
10689: PUSH
10690: LD_INT 20
10692: PUSH
10693: LD_INT 21
10695: PUSH
10696: LD_INT 22
10698: PUSH
10699: LD_INT 23
10701: PUSH
10702: LD_INT 25
10704: PUSH
10705: LD_INT 26
10707: PUSH
10708: LD_INT 30
10710: PUSH
10711: LD_INT 31
10713: PUSH
10714: LD_INT 32
10716: PUSH
10717: LD_INT 36
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_INT 101
10743: PUSH
10744: LD_INT 102
10746: PUSH
10747: LD_INT 105
10749: PUSH
10750: LD_INT 106
10752: PUSH
10753: LD_INT 108
10755: PUSH
10756: LD_INT 109
10758: PUSH
10759: LD_INT 112
10761: PUSH
10762: LD_INT 116
10764: PUSH
10765: LD_INT 117
10767: PUSH
10768: LD_INT 118
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: ST_TO_ADDR
10787: GO 13310
10789: LD_INT 7
10791: DOUBLE
10792: EQUAL
10793: IFTRUE 10797
10795: GO 10909
10797: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10798: LD_ADDR_VAR 0 2
10802: PUSH
10803: LD_INT 2
10805: PUSH
10806: LD_INT 4
10808: PUSH
10809: LD_INT 5
10811: PUSH
10812: LD_INT 7
10814: PUSH
10815: LD_INT 11
10817: PUSH
10818: LD_INT 12
10820: PUSH
10821: LD_INT 15
10823: PUSH
10824: LD_INT 16
10826: PUSH
10827: LD_INT 20
10829: PUSH
10830: LD_INT 21
10832: PUSH
10833: LD_INT 22
10835: PUSH
10836: LD_INT 23
10838: PUSH
10839: LD_INT 25
10841: PUSH
10842: LD_INT 26
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: PUSH
10861: LD_INT 101
10863: PUSH
10864: LD_INT 102
10866: PUSH
10867: LD_INT 103
10869: PUSH
10870: LD_INT 105
10872: PUSH
10873: LD_INT 106
10875: PUSH
10876: LD_INT 108
10878: PUSH
10879: LD_INT 112
10881: PUSH
10882: LD_INT 116
10884: PUSH
10885: LD_INT 117
10887: PUSH
10888: LD_INT 118
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: ST_TO_ADDR
10907: GO 13310
10909: LD_INT 8
10911: DOUBLE
10912: EQUAL
10913: IFTRUE 10917
10915: GO 11057
10917: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10918: LD_ADDR_VAR 0 2
10922: PUSH
10923: LD_INT 2
10925: PUSH
10926: LD_INT 4
10928: PUSH
10929: LD_INT 5
10931: PUSH
10932: LD_INT 6
10934: PUSH
10935: LD_INT 7
10937: PUSH
10938: LD_INT 8
10940: PUSH
10941: LD_INT 11
10943: PUSH
10944: LD_INT 12
10946: PUSH
10947: LD_INT 15
10949: PUSH
10950: LD_INT 16
10952: PUSH
10953: LD_INT 20
10955: PUSH
10956: LD_INT 21
10958: PUSH
10959: LD_INT 22
10961: PUSH
10962: LD_INT 23
10964: PUSH
10965: LD_INT 25
10967: PUSH
10968: LD_INT 26
10970: PUSH
10971: LD_INT 30
10973: PUSH
10974: LD_INT 31
10976: PUSH
10977: LD_INT 32
10979: PUSH
10980: LD_INT 36
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 101
11007: PUSH
11008: LD_INT 102
11010: PUSH
11011: LD_INT 103
11013: PUSH
11014: LD_INT 105
11016: PUSH
11017: LD_INT 106
11019: PUSH
11020: LD_INT 108
11022: PUSH
11023: LD_INT 109
11025: PUSH
11026: LD_INT 112
11028: PUSH
11029: LD_INT 116
11031: PUSH
11032: LD_INT 117
11034: PUSH
11035: LD_INT 118
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: ST_TO_ADDR
11055: GO 13310
11057: LD_INT 9
11059: DOUBLE
11060: EQUAL
11061: IFTRUE 11065
11063: GO 11213
11065: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11066: LD_ADDR_VAR 0 2
11070: PUSH
11071: LD_INT 2
11073: PUSH
11074: LD_INT 4
11076: PUSH
11077: LD_INT 5
11079: PUSH
11080: LD_INT 6
11082: PUSH
11083: LD_INT 7
11085: PUSH
11086: LD_INT 8
11088: PUSH
11089: LD_INT 11
11091: PUSH
11092: LD_INT 12
11094: PUSH
11095: LD_INT 15
11097: PUSH
11098: LD_INT 16
11100: PUSH
11101: LD_INT 20
11103: PUSH
11104: LD_INT 21
11106: PUSH
11107: LD_INT 22
11109: PUSH
11110: LD_INT 23
11112: PUSH
11113: LD_INT 25
11115: PUSH
11116: LD_INT 26
11118: PUSH
11119: LD_INT 28
11121: PUSH
11122: LD_INT 30
11124: PUSH
11125: LD_INT 31
11127: PUSH
11128: LD_INT 32
11130: PUSH
11131: LD_INT 36
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 101
11159: PUSH
11160: LD_INT 102
11162: PUSH
11163: LD_INT 103
11165: PUSH
11166: LD_INT 105
11168: PUSH
11169: LD_INT 106
11171: PUSH
11172: LD_INT 108
11174: PUSH
11175: LD_INT 109
11177: PUSH
11178: LD_INT 112
11180: PUSH
11181: LD_INT 114
11183: PUSH
11184: LD_INT 116
11186: PUSH
11187: LD_INT 117
11189: PUSH
11190: LD_INT 118
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: ST_TO_ADDR
11211: GO 13310
11213: LD_INT 10
11215: DOUBLE
11216: EQUAL
11217: IFTRUE 11221
11219: GO 11417
11221: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11222: LD_ADDR_VAR 0 2
11226: PUSH
11227: LD_INT 2
11229: PUSH
11230: LD_INT 4
11232: PUSH
11233: LD_INT 5
11235: PUSH
11236: LD_INT 6
11238: PUSH
11239: LD_INT 7
11241: PUSH
11242: LD_INT 8
11244: PUSH
11245: LD_INT 9
11247: PUSH
11248: LD_INT 10
11250: PUSH
11251: LD_INT 11
11253: PUSH
11254: LD_INT 12
11256: PUSH
11257: LD_INT 13
11259: PUSH
11260: LD_INT 14
11262: PUSH
11263: LD_INT 15
11265: PUSH
11266: LD_INT 16
11268: PUSH
11269: LD_INT 17
11271: PUSH
11272: LD_INT 18
11274: PUSH
11275: LD_INT 19
11277: PUSH
11278: LD_INT 20
11280: PUSH
11281: LD_INT 21
11283: PUSH
11284: LD_INT 22
11286: PUSH
11287: LD_INT 23
11289: PUSH
11290: LD_INT 24
11292: PUSH
11293: LD_INT 25
11295: PUSH
11296: LD_INT 26
11298: PUSH
11299: LD_INT 28
11301: PUSH
11302: LD_INT 30
11304: PUSH
11305: LD_INT 31
11307: PUSH
11308: LD_INT 32
11310: PUSH
11311: LD_INT 36
11313: PUSH
11314: EMPTY
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 101
11347: PUSH
11348: LD_INT 102
11350: PUSH
11351: LD_INT 103
11353: PUSH
11354: LD_INT 104
11356: PUSH
11357: LD_INT 105
11359: PUSH
11360: LD_INT 106
11362: PUSH
11363: LD_INT 107
11365: PUSH
11366: LD_INT 108
11368: PUSH
11369: LD_INT 109
11371: PUSH
11372: LD_INT 110
11374: PUSH
11375: LD_INT 111
11377: PUSH
11378: LD_INT 112
11380: PUSH
11381: LD_INT 114
11383: PUSH
11384: LD_INT 116
11386: PUSH
11387: LD_INT 117
11389: PUSH
11390: LD_INT 118
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: ST_TO_ADDR
11415: GO 13310
11417: LD_INT 11
11419: DOUBLE
11420: EQUAL
11421: IFTRUE 11425
11423: GO 11629
11425: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11426: LD_ADDR_VAR 0 2
11430: PUSH
11431: LD_INT 2
11433: PUSH
11434: LD_INT 3
11436: PUSH
11437: LD_INT 4
11439: PUSH
11440: LD_INT 5
11442: PUSH
11443: LD_INT 6
11445: PUSH
11446: LD_INT 7
11448: PUSH
11449: LD_INT 8
11451: PUSH
11452: LD_INT 9
11454: PUSH
11455: LD_INT 10
11457: PUSH
11458: LD_INT 11
11460: PUSH
11461: LD_INT 12
11463: PUSH
11464: LD_INT 13
11466: PUSH
11467: LD_INT 14
11469: PUSH
11470: LD_INT 15
11472: PUSH
11473: LD_INT 16
11475: PUSH
11476: LD_INT 17
11478: PUSH
11479: LD_INT 18
11481: PUSH
11482: LD_INT 19
11484: PUSH
11485: LD_INT 20
11487: PUSH
11488: LD_INT 21
11490: PUSH
11491: LD_INT 22
11493: PUSH
11494: LD_INT 23
11496: PUSH
11497: LD_INT 24
11499: PUSH
11500: LD_INT 25
11502: PUSH
11503: LD_INT 26
11505: PUSH
11506: LD_INT 28
11508: PUSH
11509: LD_INT 30
11511: PUSH
11512: LD_INT 31
11514: PUSH
11515: LD_INT 32
11517: PUSH
11518: LD_INT 34
11520: PUSH
11521: LD_INT 36
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: PUSH
11557: LD_INT 101
11559: PUSH
11560: LD_INT 102
11562: PUSH
11563: LD_INT 103
11565: PUSH
11566: LD_INT 104
11568: PUSH
11569: LD_INT 105
11571: PUSH
11572: LD_INT 106
11574: PUSH
11575: LD_INT 107
11577: PUSH
11578: LD_INT 108
11580: PUSH
11581: LD_INT 109
11583: PUSH
11584: LD_INT 110
11586: PUSH
11587: LD_INT 111
11589: PUSH
11590: LD_INT 112
11592: PUSH
11593: LD_INT 114
11595: PUSH
11596: LD_INT 116
11598: PUSH
11599: LD_INT 117
11601: PUSH
11602: LD_INT 118
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: ST_TO_ADDR
11627: GO 13310
11629: LD_INT 12
11631: DOUBLE
11632: EQUAL
11633: IFTRUE 11637
11635: GO 11857
11637: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11638: LD_ADDR_VAR 0 2
11642: PUSH
11643: LD_INT 1
11645: PUSH
11646: LD_INT 2
11648: PUSH
11649: LD_INT 3
11651: PUSH
11652: LD_INT 4
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: LD_INT 6
11660: PUSH
11661: LD_INT 7
11663: PUSH
11664: LD_INT 8
11666: PUSH
11667: LD_INT 9
11669: PUSH
11670: LD_INT 10
11672: PUSH
11673: LD_INT 11
11675: PUSH
11676: LD_INT 12
11678: PUSH
11679: LD_INT 13
11681: PUSH
11682: LD_INT 14
11684: PUSH
11685: LD_INT 15
11687: PUSH
11688: LD_INT 16
11690: PUSH
11691: LD_INT 17
11693: PUSH
11694: LD_INT 18
11696: PUSH
11697: LD_INT 19
11699: PUSH
11700: LD_INT 20
11702: PUSH
11703: LD_INT 21
11705: PUSH
11706: LD_INT 22
11708: PUSH
11709: LD_INT 23
11711: PUSH
11712: LD_INT 24
11714: PUSH
11715: LD_INT 25
11717: PUSH
11718: LD_INT 26
11720: PUSH
11721: LD_INT 27
11723: PUSH
11724: LD_INT 28
11726: PUSH
11727: LD_INT 30
11729: PUSH
11730: LD_INT 31
11732: PUSH
11733: LD_INT 32
11735: PUSH
11736: LD_INT 33
11738: PUSH
11739: LD_INT 34
11741: PUSH
11742: LD_INT 36
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: PUSH
11781: LD_INT 101
11783: PUSH
11784: LD_INT 102
11786: PUSH
11787: LD_INT 103
11789: PUSH
11790: LD_INT 104
11792: PUSH
11793: LD_INT 105
11795: PUSH
11796: LD_INT 106
11798: PUSH
11799: LD_INT 107
11801: PUSH
11802: LD_INT 108
11804: PUSH
11805: LD_INT 109
11807: PUSH
11808: LD_INT 110
11810: PUSH
11811: LD_INT 111
11813: PUSH
11814: LD_INT 112
11816: PUSH
11817: LD_INT 113
11819: PUSH
11820: LD_INT 114
11822: PUSH
11823: LD_INT 116
11825: PUSH
11826: LD_INT 117
11828: PUSH
11829: LD_INT 118
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: ST_TO_ADDR
11855: GO 13310
11857: LD_INT 13
11859: DOUBLE
11860: EQUAL
11861: IFTRUE 11865
11863: GO 12073
11865: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11866: LD_ADDR_VAR 0 2
11870: PUSH
11871: LD_INT 1
11873: PUSH
11874: LD_INT 2
11876: PUSH
11877: LD_INT 3
11879: PUSH
11880: LD_INT 4
11882: PUSH
11883: LD_INT 5
11885: PUSH
11886: LD_INT 8
11888: PUSH
11889: LD_INT 9
11891: PUSH
11892: LD_INT 10
11894: PUSH
11895: LD_INT 11
11897: PUSH
11898: LD_INT 12
11900: PUSH
11901: LD_INT 14
11903: PUSH
11904: LD_INT 15
11906: PUSH
11907: LD_INT 16
11909: PUSH
11910: LD_INT 17
11912: PUSH
11913: LD_INT 18
11915: PUSH
11916: LD_INT 19
11918: PUSH
11919: LD_INT 20
11921: PUSH
11922: LD_INT 21
11924: PUSH
11925: LD_INT 22
11927: PUSH
11928: LD_INT 23
11930: PUSH
11931: LD_INT 24
11933: PUSH
11934: LD_INT 25
11936: PUSH
11937: LD_INT 26
11939: PUSH
11940: LD_INT 27
11942: PUSH
11943: LD_INT 28
11945: PUSH
11946: LD_INT 30
11948: PUSH
11949: LD_INT 31
11951: PUSH
11952: LD_INT 32
11954: PUSH
11955: LD_INT 33
11957: PUSH
11958: LD_INT 34
11960: PUSH
11961: LD_INT 36
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 101
11999: PUSH
12000: LD_INT 102
12002: PUSH
12003: LD_INT 103
12005: PUSH
12006: LD_INT 104
12008: PUSH
12009: LD_INT 105
12011: PUSH
12012: LD_INT 106
12014: PUSH
12015: LD_INT 107
12017: PUSH
12018: LD_INT 108
12020: PUSH
12021: LD_INT 109
12023: PUSH
12024: LD_INT 110
12026: PUSH
12027: LD_INT 111
12029: PUSH
12030: LD_INT 112
12032: PUSH
12033: LD_INT 113
12035: PUSH
12036: LD_INT 114
12038: PUSH
12039: LD_INT 116
12041: PUSH
12042: LD_INT 117
12044: PUSH
12045: LD_INT 118
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: ST_TO_ADDR
12071: GO 13310
12073: LD_INT 14
12075: DOUBLE
12076: EQUAL
12077: IFTRUE 12081
12079: GO 12305
12081: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12082: LD_ADDR_VAR 0 2
12086: PUSH
12087: LD_INT 1
12089: PUSH
12090: LD_INT 2
12092: PUSH
12093: LD_INT 3
12095: PUSH
12096: LD_INT 4
12098: PUSH
12099: LD_INT 5
12101: PUSH
12102: LD_INT 6
12104: PUSH
12105: LD_INT 7
12107: PUSH
12108: LD_INT 8
12110: PUSH
12111: LD_INT 9
12113: PUSH
12114: LD_INT 10
12116: PUSH
12117: LD_INT 11
12119: PUSH
12120: LD_INT 12
12122: PUSH
12123: LD_INT 13
12125: PUSH
12126: LD_INT 14
12128: PUSH
12129: LD_INT 15
12131: PUSH
12132: LD_INT 16
12134: PUSH
12135: LD_INT 17
12137: PUSH
12138: LD_INT 18
12140: PUSH
12141: LD_INT 19
12143: PUSH
12144: LD_INT 20
12146: PUSH
12147: LD_INT 21
12149: PUSH
12150: LD_INT 22
12152: PUSH
12153: LD_INT 23
12155: PUSH
12156: LD_INT 24
12158: PUSH
12159: LD_INT 25
12161: PUSH
12162: LD_INT 26
12164: PUSH
12165: LD_INT 27
12167: PUSH
12168: LD_INT 28
12170: PUSH
12171: LD_INT 29
12173: PUSH
12174: LD_INT 30
12176: PUSH
12177: LD_INT 31
12179: PUSH
12180: LD_INT 32
12182: PUSH
12183: LD_INT 33
12185: PUSH
12186: LD_INT 34
12188: PUSH
12189: LD_INT 36
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 101
12231: PUSH
12232: LD_INT 102
12234: PUSH
12235: LD_INT 103
12237: PUSH
12238: LD_INT 104
12240: PUSH
12241: LD_INT 105
12243: PUSH
12244: LD_INT 106
12246: PUSH
12247: LD_INT 107
12249: PUSH
12250: LD_INT 108
12252: PUSH
12253: LD_INT 109
12255: PUSH
12256: LD_INT 110
12258: PUSH
12259: LD_INT 111
12261: PUSH
12262: LD_INT 112
12264: PUSH
12265: LD_INT 113
12267: PUSH
12268: LD_INT 114
12270: PUSH
12271: LD_INT 116
12273: PUSH
12274: LD_INT 117
12276: PUSH
12277: LD_INT 118
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: ST_TO_ADDR
12303: GO 13310
12305: LD_INT 15
12307: DOUBLE
12308: EQUAL
12309: IFTRUE 12313
12311: GO 12537
12313: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12314: LD_ADDR_VAR 0 2
12318: PUSH
12319: LD_INT 1
12321: PUSH
12322: LD_INT 2
12324: PUSH
12325: LD_INT 3
12327: PUSH
12328: LD_INT 4
12330: PUSH
12331: LD_INT 5
12333: PUSH
12334: LD_INT 6
12336: PUSH
12337: LD_INT 7
12339: PUSH
12340: LD_INT 8
12342: PUSH
12343: LD_INT 9
12345: PUSH
12346: LD_INT 10
12348: PUSH
12349: LD_INT 11
12351: PUSH
12352: LD_INT 12
12354: PUSH
12355: LD_INT 13
12357: PUSH
12358: LD_INT 14
12360: PUSH
12361: LD_INT 15
12363: PUSH
12364: LD_INT 16
12366: PUSH
12367: LD_INT 17
12369: PUSH
12370: LD_INT 18
12372: PUSH
12373: LD_INT 19
12375: PUSH
12376: LD_INT 20
12378: PUSH
12379: LD_INT 21
12381: PUSH
12382: LD_INT 22
12384: PUSH
12385: LD_INT 23
12387: PUSH
12388: LD_INT 24
12390: PUSH
12391: LD_INT 25
12393: PUSH
12394: LD_INT 26
12396: PUSH
12397: LD_INT 27
12399: PUSH
12400: LD_INT 28
12402: PUSH
12403: LD_INT 29
12405: PUSH
12406: LD_INT 30
12408: PUSH
12409: LD_INT 31
12411: PUSH
12412: LD_INT 32
12414: PUSH
12415: LD_INT 33
12417: PUSH
12418: LD_INT 34
12420: PUSH
12421: LD_INT 36
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: PUSH
12461: LD_INT 101
12463: PUSH
12464: LD_INT 102
12466: PUSH
12467: LD_INT 103
12469: PUSH
12470: LD_INT 104
12472: PUSH
12473: LD_INT 105
12475: PUSH
12476: LD_INT 106
12478: PUSH
12479: LD_INT 107
12481: PUSH
12482: LD_INT 108
12484: PUSH
12485: LD_INT 109
12487: PUSH
12488: LD_INT 110
12490: PUSH
12491: LD_INT 111
12493: PUSH
12494: LD_INT 112
12496: PUSH
12497: LD_INT 113
12499: PUSH
12500: LD_INT 114
12502: PUSH
12503: LD_INT 116
12505: PUSH
12506: LD_INT 117
12508: PUSH
12509: LD_INT 118
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: ST_TO_ADDR
12535: GO 13310
12537: LD_INT 16
12539: DOUBLE
12540: EQUAL
12541: IFTRUE 12545
12543: GO 12681
12545: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12546: LD_ADDR_VAR 0 2
12550: PUSH
12551: LD_INT 2
12553: PUSH
12554: LD_INT 4
12556: PUSH
12557: LD_INT 5
12559: PUSH
12560: LD_INT 7
12562: PUSH
12563: LD_INT 11
12565: PUSH
12566: LD_INT 12
12568: PUSH
12569: LD_INT 15
12571: PUSH
12572: LD_INT 16
12574: PUSH
12575: LD_INT 20
12577: PUSH
12578: LD_INT 21
12580: PUSH
12581: LD_INT 22
12583: PUSH
12584: LD_INT 23
12586: PUSH
12587: LD_INT 25
12589: PUSH
12590: LD_INT 26
12592: PUSH
12593: LD_INT 30
12595: PUSH
12596: LD_INT 31
12598: PUSH
12599: LD_INT 32
12601: PUSH
12602: LD_INT 33
12604: PUSH
12605: LD_INT 34
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 101
12631: PUSH
12632: LD_INT 102
12634: PUSH
12635: LD_INT 103
12637: PUSH
12638: LD_INT 106
12640: PUSH
12641: LD_INT 108
12643: PUSH
12644: LD_INT 112
12646: PUSH
12647: LD_INT 113
12649: PUSH
12650: LD_INT 114
12652: PUSH
12653: LD_INT 116
12655: PUSH
12656: LD_INT 117
12658: PUSH
12659: LD_INT 118
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: ST_TO_ADDR
12679: GO 13310
12681: LD_INT 17
12683: DOUBLE
12684: EQUAL
12685: IFTRUE 12689
12687: GO 12913
12689: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12690: LD_ADDR_VAR 0 2
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: LD_INT 2
12700: PUSH
12701: LD_INT 3
12703: PUSH
12704: LD_INT 4
12706: PUSH
12707: LD_INT 5
12709: PUSH
12710: LD_INT 6
12712: PUSH
12713: LD_INT 7
12715: PUSH
12716: LD_INT 8
12718: PUSH
12719: LD_INT 9
12721: PUSH
12722: LD_INT 10
12724: PUSH
12725: LD_INT 11
12727: PUSH
12728: LD_INT 12
12730: PUSH
12731: LD_INT 13
12733: PUSH
12734: LD_INT 14
12736: PUSH
12737: LD_INT 15
12739: PUSH
12740: LD_INT 16
12742: PUSH
12743: LD_INT 17
12745: PUSH
12746: LD_INT 18
12748: PUSH
12749: LD_INT 19
12751: PUSH
12752: LD_INT 20
12754: PUSH
12755: LD_INT 21
12757: PUSH
12758: LD_INT 22
12760: PUSH
12761: LD_INT 23
12763: PUSH
12764: LD_INT 24
12766: PUSH
12767: LD_INT 25
12769: PUSH
12770: LD_INT 26
12772: PUSH
12773: LD_INT 27
12775: PUSH
12776: LD_INT 28
12778: PUSH
12779: LD_INT 29
12781: PUSH
12782: LD_INT 30
12784: PUSH
12785: LD_INT 31
12787: PUSH
12788: LD_INT 32
12790: PUSH
12791: LD_INT 33
12793: PUSH
12794: LD_INT 34
12796: PUSH
12797: LD_INT 36
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 101
12839: PUSH
12840: LD_INT 102
12842: PUSH
12843: LD_INT 103
12845: PUSH
12846: LD_INT 104
12848: PUSH
12849: LD_INT 105
12851: PUSH
12852: LD_INT 106
12854: PUSH
12855: LD_INT 107
12857: PUSH
12858: LD_INT 108
12860: PUSH
12861: LD_INT 109
12863: PUSH
12864: LD_INT 110
12866: PUSH
12867: LD_INT 111
12869: PUSH
12870: LD_INT 112
12872: PUSH
12873: LD_INT 113
12875: PUSH
12876: LD_INT 114
12878: PUSH
12879: LD_INT 116
12881: PUSH
12882: LD_INT 117
12884: PUSH
12885: LD_INT 118
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: ST_TO_ADDR
12911: GO 13310
12913: LD_INT 18
12915: DOUBLE
12916: EQUAL
12917: IFTRUE 12921
12919: GO 13069
12921: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12922: LD_ADDR_VAR 0 2
12926: PUSH
12927: LD_INT 2
12929: PUSH
12930: LD_INT 4
12932: PUSH
12933: LD_INT 5
12935: PUSH
12936: LD_INT 7
12938: PUSH
12939: LD_INT 11
12941: PUSH
12942: LD_INT 12
12944: PUSH
12945: LD_INT 15
12947: PUSH
12948: LD_INT 16
12950: PUSH
12951: LD_INT 20
12953: PUSH
12954: LD_INT 21
12956: PUSH
12957: LD_INT 22
12959: PUSH
12960: LD_INT 23
12962: PUSH
12963: LD_INT 25
12965: PUSH
12966: LD_INT 26
12968: PUSH
12969: LD_INT 30
12971: PUSH
12972: LD_INT 31
12974: PUSH
12975: LD_INT 32
12977: PUSH
12978: LD_INT 33
12980: PUSH
12981: LD_INT 34
12983: PUSH
12984: LD_INT 35
12986: PUSH
12987: LD_INT 36
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 101
13015: PUSH
13016: LD_INT 102
13018: PUSH
13019: LD_INT 103
13021: PUSH
13022: LD_INT 106
13024: PUSH
13025: LD_INT 108
13027: PUSH
13028: LD_INT 112
13030: PUSH
13031: LD_INT 113
13033: PUSH
13034: LD_INT 114
13036: PUSH
13037: LD_INT 115
13039: PUSH
13040: LD_INT 116
13042: PUSH
13043: LD_INT 117
13045: PUSH
13046: LD_INT 118
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: ST_TO_ADDR
13067: GO 13310
13069: LD_INT 19
13071: DOUBLE
13072: EQUAL
13073: IFTRUE 13077
13075: GO 13309
13077: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13078: LD_ADDR_VAR 0 2
13082: PUSH
13083: LD_INT 1
13085: PUSH
13086: LD_INT 2
13088: PUSH
13089: LD_INT 3
13091: PUSH
13092: LD_INT 4
13094: PUSH
13095: LD_INT 5
13097: PUSH
13098: LD_INT 6
13100: PUSH
13101: LD_INT 7
13103: PUSH
13104: LD_INT 8
13106: PUSH
13107: LD_INT 9
13109: PUSH
13110: LD_INT 10
13112: PUSH
13113: LD_INT 11
13115: PUSH
13116: LD_INT 12
13118: PUSH
13119: LD_INT 13
13121: PUSH
13122: LD_INT 14
13124: PUSH
13125: LD_INT 15
13127: PUSH
13128: LD_INT 16
13130: PUSH
13131: LD_INT 17
13133: PUSH
13134: LD_INT 18
13136: PUSH
13137: LD_INT 19
13139: PUSH
13140: LD_INT 20
13142: PUSH
13143: LD_INT 21
13145: PUSH
13146: LD_INT 22
13148: PUSH
13149: LD_INT 23
13151: PUSH
13152: LD_INT 24
13154: PUSH
13155: LD_INT 25
13157: PUSH
13158: LD_INT 26
13160: PUSH
13161: LD_INT 27
13163: PUSH
13164: LD_INT 28
13166: PUSH
13167: LD_INT 29
13169: PUSH
13170: LD_INT 30
13172: PUSH
13173: LD_INT 31
13175: PUSH
13176: LD_INT 32
13178: PUSH
13179: LD_INT 33
13181: PUSH
13182: LD_INT 34
13184: PUSH
13185: LD_INT 35
13187: PUSH
13188: LD_INT 36
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: PUSH
13229: LD_INT 101
13231: PUSH
13232: LD_INT 102
13234: PUSH
13235: LD_INT 103
13237: PUSH
13238: LD_INT 104
13240: PUSH
13241: LD_INT 105
13243: PUSH
13244: LD_INT 106
13246: PUSH
13247: LD_INT 107
13249: PUSH
13250: LD_INT 108
13252: PUSH
13253: LD_INT 109
13255: PUSH
13256: LD_INT 110
13258: PUSH
13259: LD_INT 111
13261: PUSH
13262: LD_INT 112
13264: PUSH
13265: LD_INT 113
13267: PUSH
13268: LD_INT 114
13270: PUSH
13271: LD_INT 115
13273: PUSH
13274: LD_INT 116
13276: PUSH
13277: LD_INT 117
13279: PUSH
13280: LD_INT 118
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: ST_TO_ADDR
13307: GO 13310
13309: POP
// end else
13310: GO 13541
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13312: LD_ADDR_VAR 0 2
13316: PUSH
13317: LD_INT 1
13319: PUSH
13320: LD_INT 2
13322: PUSH
13323: LD_INT 3
13325: PUSH
13326: LD_INT 4
13328: PUSH
13329: LD_INT 5
13331: PUSH
13332: LD_INT 6
13334: PUSH
13335: LD_INT 7
13337: PUSH
13338: LD_INT 8
13340: PUSH
13341: LD_INT 9
13343: PUSH
13344: LD_INT 10
13346: PUSH
13347: LD_INT 11
13349: PUSH
13350: LD_INT 12
13352: PUSH
13353: LD_INT 13
13355: PUSH
13356: LD_INT 14
13358: PUSH
13359: LD_INT 15
13361: PUSH
13362: LD_INT 16
13364: PUSH
13365: LD_INT 17
13367: PUSH
13368: LD_INT 18
13370: PUSH
13371: LD_INT 19
13373: PUSH
13374: LD_INT 20
13376: PUSH
13377: LD_INT 21
13379: PUSH
13380: LD_INT 22
13382: PUSH
13383: LD_INT 23
13385: PUSH
13386: LD_INT 24
13388: PUSH
13389: LD_INT 25
13391: PUSH
13392: LD_INT 26
13394: PUSH
13395: LD_INT 27
13397: PUSH
13398: LD_INT 28
13400: PUSH
13401: LD_INT 29
13403: PUSH
13404: LD_INT 30
13406: PUSH
13407: LD_INT 31
13409: PUSH
13410: LD_INT 32
13412: PUSH
13413: LD_INT 33
13415: PUSH
13416: LD_INT 34
13418: PUSH
13419: LD_INT 35
13421: PUSH
13422: LD_INT 36
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 101
13465: PUSH
13466: LD_INT 102
13468: PUSH
13469: LD_INT 103
13471: PUSH
13472: LD_INT 104
13474: PUSH
13475: LD_INT 105
13477: PUSH
13478: LD_INT 106
13480: PUSH
13481: LD_INT 107
13483: PUSH
13484: LD_INT 108
13486: PUSH
13487: LD_INT 109
13489: PUSH
13490: LD_INT 110
13492: PUSH
13493: LD_INT 111
13495: PUSH
13496: LD_INT 112
13498: PUSH
13499: LD_INT 113
13501: PUSH
13502: LD_INT 114
13504: PUSH
13505: LD_INT 115
13507: PUSH
13508: LD_INT 116
13510: PUSH
13511: LD_INT 117
13513: PUSH
13514: LD_INT 118
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: ST_TO_ADDR
// if result then
13541: LD_VAR 0 2
13545: IFFALSE 14331
// begin normal :=  ;
13547: LD_ADDR_VAR 0 5
13551: PUSH
13552: LD_STRING 
13554: ST_TO_ADDR
// hardcore :=  ;
13555: LD_ADDR_VAR 0 6
13559: PUSH
13560: LD_STRING 
13562: ST_TO_ADDR
// active :=  ;
13563: LD_ADDR_VAR 0 7
13567: PUSH
13568: LD_STRING 
13570: ST_TO_ADDR
// for i = 1 to normalCounter do
13571: LD_ADDR_VAR 0 8
13575: PUSH
13576: DOUBLE
13577: LD_INT 1
13579: DEC
13580: ST_TO_ADDR
13581: LD_EXP 24
13585: PUSH
13586: FOR_TO
13587: IFFALSE 13688
// begin tmp := 0 ;
13589: LD_ADDR_VAR 0 3
13593: PUSH
13594: LD_STRING 0
13596: ST_TO_ADDR
// if result [ 1 ] then
13597: LD_VAR 0 2
13601: PUSH
13602: LD_INT 1
13604: ARRAY
13605: IFFALSE 13670
// if result [ 1 ] [ 1 ] = i then
13607: LD_VAR 0 2
13611: PUSH
13612: LD_INT 1
13614: ARRAY
13615: PUSH
13616: LD_INT 1
13618: ARRAY
13619: PUSH
13620: LD_VAR 0 8
13624: EQUAL
13625: IFFALSE 13670
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13627: LD_ADDR_VAR 0 2
13631: PUSH
13632: LD_VAR 0 2
13636: PPUSH
13637: LD_INT 1
13639: PPUSH
13640: LD_VAR 0 2
13644: PUSH
13645: LD_INT 1
13647: ARRAY
13648: PPUSH
13649: LD_INT 1
13651: PPUSH
13652: CALL_OW 3
13656: PPUSH
13657: CALL_OW 1
13661: ST_TO_ADDR
// tmp := 1 ;
13662: LD_ADDR_VAR 0 3
13666: PUSH
13667: LD_STRING 1
13669: ST_TO_ADDR
// end ; normal := normal & tmp ;
13670: LD_ADDR_VAR 0 5
13674: PUSH
13675: LD_VAR 0 5
13679: PUSH
13680: LD_VAR 0 3
13684: STR
13685: ST_TO_ADDR
// end ;
13686: GO 13586
13688: POP
13689: POP
// for i = 1 to hardcoreCounter do
13690: LD_ADDR_VAR 0 8
13694: PUSH
13695: DOUBLE
13696: LD_INT 1
13698: DEC
13699: ST_TO_ADDR
13700: LD_EXP 25
13704: PUSH
13705: FOR_TO
13706: IFFALSE 13811
// begin tmp := 0 ;
13708: LD_ADDR_VAR 0 3
13712: PUSH
13713: LD_STRING 0
13715: ST_TO_ADDR
// if result [ 2 ] then
13716: LD_VAR 0 2
13720: PUSH
13721: LD_INT 2
13723: ARRAY
13724: IFFALSE 13793
// if result [ 2 ] [ 1 ] = 100 + i then
13726: LD_VAR 0 2
13730: PUSH
13731: LD_INT 2
13733: ARRAY
13734: PUSH
13735: LD_INT 1
13737: ARRAY
13738: PUSH
13739: LD_INT 100
13741: PUSH
13742: LD_VAR 0 8
13746: PLUS
13747: EQUAL
13748: IFFALSE 13793
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13750: LD_ADDR_VAR 0 2
13754: PUSH
13755: LD_VAR 0 2
13759: PPUSH
13760: LD_INT 2
13762: PPUSH
13763: LD_VAR 0 2
13767: PUSH
13768: LD_INT 2
13770: ARRAY
13771: PPUSH
13772: LD_INT 1
13774: PPUSH
13775: CALL_OW 3
13779: PPUSH
13780: CALL_OW 1
13784: ST_TO_ADDR
// tmp := 1 ;
13785: LD_ADDR_VAR 0 3
13789: PUSH
13790: LD_STRING 1
13792: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13793: LD_ADDR_VAR 0 6
13797: PUSH
13798: LD_VAR 0 6
13802: PUSH
13803: LD_VAR 0 3
13807: STR
13808: ST_TO_ADDR
// end ;
13809: GO 13705
13811: POP
13812: POP
// if isGameLoad then
13813: LD_VAR 0 1
13817: IFFALSE 14292
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13819: LD_ADDR_VAR 0 4
13823: PUSH
13824: LD_EXP 28
13828: PUSH
13829: LD_EXP 27
13833: PUSH
13834: LD_EXP 29
13838: PUSH
13839: LD_EXP 26
13843: PUSH
13844: LD_EXP 30
13848: PUSH
13849: LD_EXP 31
13853: PUSH
13854: LD_EXP 32
13858: PUSH
13859: LD_EXP 33
13863: PUSH
13864: LD_EXP 34
13868: PUSH
13869: LD_EXP 35
13873: PUSH
13874: LD_EXP 36
13878: PUSH
13879: LD_EXP 37
13883: PUSH
13884: LD_EXP 38
13888: PUSH
13889: LD_EXP 39
13893: PUSH
13894: LD_EXP 47
13898: PUSH
13899: LD_EXP 48
13903: PUSH
13904: LD_EXP 49
13908: PUSH
13909: LD_EXP 50
13913: PUSH
13914: LD_EXP 52
13918: PUSH
13919: LD_EXP 53
13923: PUSH
13924: LD_EXP 54
13928: PUSH
13929: LD_EXP 57
13933: PUSH
13934: LD_EXP 59
13938: PUSH
13939: LD_EXP 60
13943: PUSH
13944: LD_EXP 61
13948: PUSH
13949: LD_EXP 63
13953: PUSH
13954: LD_EXP 64
13958: PUSH
13959: LD_EXP 67
13963: PUSH
13964: LD_EXP 68
13968: PUSH
13969: LD_EXP 69
13973: PUSH
13974: LD_EXP 70
13978: PUSH
13979: LD_EXP 71
13983: PUSH
13984: LD_EXP 72
13988: PUSH
13989: LD_EXP 73
13993: PUSH
13994: LD_EXP 74
13998: PUSH
13999: LD_EXP 75
14003: PUSH
14004: LD_EXP 40
14008: PUSH
14009: LD_EXP 41
14013: PUSH
14014: LD_EXP 44
14018: PUSH
14019: LD_EXP 45
14023: PUSH
14024: LD_EXP 46
14028: PUSH
14029: LD_EXP 42
14033: PUSH
14034: LD_EXP 43
14038: PUSH
14039: LD_EXP 51
14043: PUSH
14044: LD_EXP 55
14048: PUSH
14049: LD_EXP 56
14053: PUSH
14054: LD_EXP 58
14058: PUSH
14059: LD_EXP 62
14063: PUSH
14064: LD_EXP 65
14068: PUSH
14069: LD_EXP 66
14073: PUSH
14074: LD_EXP 76
14078: PUSH
14079: LD_EXP 77
14083: PUSH
14084: LD_EXP 78
14088: PUSH
14089: LD_EXP 79
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: ST_TO_ADDR
// tmp :=  ;
14150: LD_ADDR_VAR 0 3
14154: PUSH
14155: LD_STRING 
14157: ST_TO_ADDR
// for i = 1 to normalCounter do
14158: LD_ADDR_VAR 0 8
14162: PUSH
14163: DOUBLE
14164: LD_INT 1
14166: DEC
14167: ST_TO_ADDR
14168: LD_EXP 24
14172: PUSH
14173: FOR_TO
14174: IFFALSE 14210
// begin if flags [ i ] then
14176: LD_VAR 0 4
14180: PUSH
14181: LD_VAR 0 8
14185: ARRAY
14186: IFFALSE 14208
// tmp := tmp & i & ; ;
14188: LD_ADDR_VAR 0 3
14192: PUSH
14193: LD_VAR 0 3
14197: PUSH
14198: LD_VAR 0 8
14202: STR
14203: PUSH
14204: LD_STRING ;
14206: STR
14207: ST_TO_ADDR
// end ;
14208: GO 14173
14210: POP
14211: POP
// for i = 1 to hardcoreCounter do
14212: LD_ADDR_VAR 0 8
14216: PUSH
14217: DOUBLE
14218: LD_INT 1
14220: DEC
14221: ST_TO_ADDR
14222: LD_EXP 25
14226: PUSH
14227: FOR_TO
14228: IFFALSE 14274
// begin if flags [ normalCounter + i ] then
14230: LD_VAR 0 4
14234: PUSH
14235: LD_EXP 24
14239: PUSH
14240: LD_VAR 0 8
14244: PLUS
14245: ARRAY
14246: IFFALSE 14272
// tmp := tmp & ( 100 + i ) & ; ;
14248: LD_ADDR_VAR 0 3
14252: PUSH
14253: LD_VAR 0 3
14257: PUSH
14258: LD_INT 100
14260: PUSH
14261: LD_VAR 0 8
14265: PLUS
14266: STR
14267: PUSH
14268: LD_STRING ;
14270: STR
14271: ST_TO_ADDR
// end ;
14272: GO 14227
14274: POP
14275: POP
// if tmp then
14276: LD_VAR 0 3
14280: IFFALSE 14292
// active := tmp ;
14282: LD_ADDR_VAR 0 7
14286: PUSH
14287: LD_VAR 0 3
14291: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14292: LD_STRING getStreamItemsFromMission("
14294: PUSH
14295: LD_VAR 0 5
14299: STR
14300: PUSH
14301: LD_STRING ","
14303: STR
14304: PUSH
14305: LD_VAR 0 6
14309: STR
14310: PUSH
14311: LD_STRING ","
14313: STR
14314: PUSH
14315: LD_VAR 0 7
14319: STR
14320: PUSH
14321: LD_STRING ")
14323: STR
14324: PPUSH
14325: CALL_OW 559
// end else
14329: GO 14338
// ToLua ( getStreamItemsFromMission("","","") ) ;
14331: LD_STRING getStreamItemsFromMission("","","")
14333: PPUSH
14334: CALL_OW 559
// end ;
14338: LD_VAR 0 2
14342: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14343: LD_EXP 23
14347: PUSH
14348: LD_EXP 28
14352: AND
14353: IFFALSE 14477
14355: GO 14357
14357: DISABLE
14358: LD_INT 0
14360: PPUSH
14361: PPUSH
// begin enable ;
14362: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14363: LD_ADDR_VAR 0 2
14367: PUSH
14368: LD_INT 22
14370: PUSH
14371: LD_OWVAR 2
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 2
14382: PUSH
14383: LD_INT 34
14385: PUSH
14386: LD_INT 7
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: LD_INT 34
14395: PUSH
14396: LD_INT 45
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 34
14405: PUSH
14406: LD_INT 28
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 34
14415: PUSH
14416: LD_INT 47
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PPUSH
14434: CALL_OW 69
14438: ST_TO_ADDR
// if not tmp then
14439: LD_VAR 0 2
14443: NOT
14444: IFFALSE 14448
// exit ;
14446: GO 14477
// for i in tmp do
14448: LD_ADDR_VAR 0 1
14452: PUSH
14453: LD_VAR 0 2
14457: PUSH
14458: FOR_IN
14459: IFFALSE 14475
// begin SetLives ( i , 0 ) ;
14461: LD_VAR 0 1
14465: PPUSH
14466: LD_INT 0
14468: PPUSH
14469: CALL_OW 234
// end ;
14473: GO 14458
14475: POP
14476: POP
// end ;
14477: PPOPN 2
14479: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14480: LD_EXP 23
14484: PUSH
14485: LD_EXP 29
14489: AND
14490: IFFALSE 14574
14492: GO 14494
14494: DISABLE
14495: LD_INT 0
14497: PPUSH
14498: PPUSH
// begin enable ;
14499: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14500: LD_ADDR_VAR 0 2
14504: PUSH
14505: LD_INT 22
14507: PUSH
14508: LD_OWVAR 2
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 32
14519: PUSH
14520: LD_INT 3
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PPUSH
14531: CALL_OW 69
14535: ST_TO_ADDR
// if not tmp then
14536: LD_VAR 0 2
14540: NOT
14541: IFFALSE 14545
// exit ;
14543: GO 14574
// for i in tmp do
14545: LD_ADDR_VAR 0 1
14549: PUSH
14550: LD_VAR 0 2
14554: PUSH
14555: FOR_IN
14556: IFFALSE 14572
// begin SetLives ( i , 0 ) ;
14558: LD_VAR 0 1
14562: PPUSH
14563: LD_INT 0
14565: PPUSH
14566: CALL_OW 234
// end ;
14570: GO 14555
14572: POP
14573: POP
// end ;
14574: PPOPN 2
14576: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14577: LD_EXP 23
14581: PUSH
14582: LD_EXP 26
14586: AND
14587: IFFALSE 14680
14589: GO 14591
14591: DISABLE
14592: LD_INT 0
14594: PPUSH
// begin enable ;
14595: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14596: LD_ADDR_VAR 0 1
14600: PUSH
14601: LD_INT 22
14603: PUSH
14604: LD_OWVAR 2
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PUSH
14613: LD_INT 2
14615: PUSH
14616: LD_INT 25
14618: PUSH
14619: LD_INT 5
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 25
14628: PUSH
14629: LD_INT 9
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: LD_INT 25
14638: PUSH
14639: LD_INT 8
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PPUSH
14656: CALL_OW 69
14660: PUSH
14661: FOR_IN
14662: IFFALSE 14678
// begin SetClass ( i , 1 ) ;
14664: LD_VAR 0 1
14668: PPUSH
14669: LD_INT 1
14671: PPUSH
14672: CALL_OW 336
// end ;
14676: GO 14661
14678: POP
14679: POP
// end ;
14680: PPOPN 1
14682: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14683: LD_EXP 23
14687: PUSH
14688: LD_EXP 27
14692: AND
14693: PUSH
14694: LD_OWVAR 65
14698: PUSH
14699: LD_INT 7
14701: LESS
14702: AND
14703: IFFALSE 14717
14705: GO 14707
14707: DISABLE
// begin enable ;
14708: ENABLE
// game_speed := 7 ;
14709: LD_ADDR_OWVAR 65
14713: PUSH
14714: LD_INT 7
14716: ST_TO_ADDR
// end ;
14717: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14718: LD_EXP 23
14722: PUSH
14723: LD_EXP 30
14727: AND
14728: IFFALSE 14930
14730: GO 14732
14732: DISABLE
14733: LD_INT 0
14735: PPUSH
14736: PPUSH
14737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14738: LD_ADDR_VAR 0 3
14742: PUSH
14743: LD_INT 81
14745: PUSH
14746: LD_OWVAR 2
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 21
14757: PUSH
14758: LD_INT 1
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 69
14773: ST_TO_ADDR
// if not tmp then
14774: LD_VAR 0 3
14778: NOT
14779: IFFALSE 14783
// exit ;
14781: GO 14930
// if tmp > 5 then
14783: LD_VAR 0 3
14787: PUSH
14788: LD_INT 5
14790: GREATER
14791: IFFALSE 14803
// k := 5 else
14793: LD_ADDR_VAR 0 2
14797: PUSH
14798: LD_INT 5
14800: ST_TO_ADDR
14801: GO 14813
// k := tmp ;
14803: LD_ADDR_VAR 0 2
14807: PUSH
14808: LD_VAR 0 3
14812: ST_TO_ADDR
// for i := 1 to k do
14813: LD_ADDR_VAR 0 1
14817: PUSH
14818: DOUBLE
14819: LD_INT 1
14821: DEC
14822: ST_TO_ADDR
14823: LD_VAR 0 2
14827: PUSH
14828: FOR_TO
14829: IFFALSE 14928
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14831: LD_VAR 0 3
14835: PUSH
14836: LD_VAR 0 1
14840: ARRAY
14841: PPUSH
14842: LD_VAR 0 1
14846: PUSH
14847: LD_INT 4
14849: MOD
14850: PUSH
14851: LD_INT 1
14853: PLUS
14854: PPUSH
14855: CALL_OW 259
14859: PUSH
14860: LD_INT 10
14862: LESS
14863: IFFALSE 14926
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14865: LD_VAR 0 3
14869: PUSH
14870: LD_VAR 0 1
14874: ARRAY
14875: PPUSH
14876: LD_VAR 0 1
14880: PUSH
14881: LD_INT 4
14883: MOD
14884: PUSH
14885: LD_INT 1
14887: PLUS
14888: PPUSH
14889: LD_VAR 0 3
14893: PUSH
14894: LD_VAR 0 1
14898: ARRAY
14899: PPUSH
14900: LD_VAR 0 1
14904: PUSH
14905: LD_INT 4
14907: MOD
14908: PUSH
14909: LD_INT 1
14911: PLUS
14912: PPUSH
14913: CALL_OW 259
14917: PUSH
14918: LD_INT 1
14920: PLUS
14921: PPUSH
14922: CALL_OW 237
14926: GO 14828
14928: POP
14929: POP
// end ;
14930: PPOPN 3
14932: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14933: LD_EXP 23
14937: PUSH
14938: LD_EXP 31
14942: AND
14943: IFFALSE 14963
14945: GO 14947
14947: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14948: LD_INT 4
14950: PPUSH
14951: LD_OWVAR 2
14955: PPUSH
14956: LD_INT 0
14958: PPUSH
14959: CALL_OW 324
14963: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14964: LD_EXP 23
14968: PUSH
14969: LD_EXP 60
14973: AND
14974: IFFALSE 14994
14976: GO 14978
14978: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14979: LD_INT 19
14981: PPUSH
14982: LD_OWVAR 2
14986: PPUSH
14987: LD_INT 0
14989: PPUSH
14990: CALL_OW 324
14994: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14995: LD_EXP 23
14999: PUSH
15000: LD_EXP 32
15004: AND
15005: IFFALSE 15107
15007: GO 15009
15009: DISABLE
15010: LD_INT 0
15012: PPUSH
15013: PPUSH
// begin enable ;
15014: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15015: LD_ADDR_VAR 0 2
15019: PUSH
15020: LD_INT 22
15022: PUSH
15023: LD_OWVAR 2
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 2
15034: PUSH
15035: LD_INT 34
15037: PUSH
15038: LD_INT 11
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 34
15047: PUSH
15048: LD_INT 30
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: LIST
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PPUSH
15064: CALL_OW 69
15068: ST_TO_ADDR
// if not tmp then
15069: LD_VAR 0 2
15073: NOT
15074: IFFALSE 15078
// exit ;
15076: GO 15107
// for i in tmp do
15078: LD_ADDR_VAR 0 1
15082: PUSH
15083: LD_VAR 0 2
15087: PUSH
15088: FOR_IN
15089: IFFALSE 15105
// begin SetLives ( i , 0 ) ;
15091: LD_VAR 0 1
15095: PPUSH
15096: LD_INT 0
15098: PPUSH
15099: CALL_OW 234
// end ;
15103: GO 15088
15105: POP
15106: POP
// end ;
15107: PPOPN 2
15109: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15110: LD_EXP 23
15114: PUSH
15115: LD_EXP 33
15119: AND
15120: IFFALSE 15140
15122: GO 15124
15124: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15125: LD_INT 32
15127: PPUSH
15128: LD_OWVAR 2
15132: PPUSH
15133: LD_INT 0
15135: PPUSH
15136: CALL_OW 324
15140: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15141: LD_EXP 23
15145: PUSH
15146: LD_EXP 34
15150: AND
15151: IFFALSE 15332
15153: GO 15155
15155: DISABLE
15156: LD_INT 0
15158: PPUSH
15159: PPUSH
15160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15161: LD_ADDR_VAR 0 2
15165: PUSH
15166: LD_INT 22
15168: PUSH
15169: LD_OWVAR 2
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PUSH
15178: LD_INT 33
15180: PUSH
15181: LD_INT 3
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PPUSH
15192: CALL_OW 69
15196: ST_TO_ADDR
// if not tmp then
15197: LD_VAR 0 2
15201: NOT
15202: IFFALSE 15206
// exit ;
15204: GO 15332
// side := 0 ;
15206: LD_ADDR_VAR 0 3
15210: PUSH
15211: LD_INT 0
15213: ST_TO_ADDR
// for i := 1 to 8 do
15214: LD_ADDR_VAR 0 1
15218: PUSH
15219: DOUBLE
15220: LD_INT 1
15222: DEC
15223: ST_TO_ADDR
15224: LD_INT 8
15226: PUSH
15227: FOR_TO
15228: IFFALSE 15276
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15230: LD_OWVAR 2
15234: PUSH
15235: LD_VAR 0 1
15239: NONEQUAL
15240: PUSH
15241: LD_OWVAR 2
15245: PPUSH
15246: LD_VAR 0 1
15250: PPUSH
15251: CALL_OW 81
15255: PUSH
15256: LD_INT 2
15258: EQUAL
15259: AND
15260: IFFALSE 15274
// begin side := i ;
15262: LD_ADDR_VAR 0 3
15266: PUSH
15267: LD_VAR 0 1
15271: ST_TO_ADDR
// break ;
15272: GO 15276
// end ;
15274: GO 15227
15276: POP
15277: POP
// if not side then
15278: LD_VAR 0 3
15282: NOT
15283: IFFALSE 15287
// exit ;
15285: GO 15332
// for i := 1 to tmp do
15287: LD_ADDR_VAR 0 1
15291: PUSH
15292: DOUBLE
15293: LD_INT 1
15295: DEC
15296: ST_TO_ADDR
15297: LD_VAR 0 2
15301: PUSH
15302: FOR_TO
15303: IFFALSE 15330
// if Prob ( 60 ) then
15305: LD_INT 60
15307: PPUSH
15308: CALL_OW 13
15312: IFFALSE 15328
// SetSide ( i , side ) ;
15314: LD_VAR 0 1
15318: PPUSH
15319: LD_VAR 0 3
15323: PPUSH
15324: CALL_OW 235
15328: GO 15302
15330: POP
15331: POP
// end ;
15332: PPOPN 3
15334: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15335: LD_EXP 23
15339: PUSH
15340: LD_EXP 36
15344: AND
15345: IFFALSE 15464
15347: GO 15349
15349: DISABLE
15350: LD_INT 0
15352: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15353: LD_ADDR_VAR 0 1
15357: PUSH
15358: LD_INT 22
15360: PUSH
15361: LD_OWVAR 2
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: LD_INT 21
15372: PUSH
15373: LD_INT 1
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 3
15382: PUSH
15383: LD_INT 23
15385: PUSH
15386: LD_INT 0
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: LIST
15401: PPUSH
15402: CALL_OW 69
15406: PUSH
15407: FOR_IN
15408: IFFALSE 15462
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15410: LD_VAR 0 1
15414: PPUSH
15415: CALL_OW 257
15419: PUSH
15420: LD_INT 1
15422: PUSH
15423: LD_INT 2
15425: PUSH
15426: LD_INT 3
15428: PUSH
15429: LD_INT 4
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: IN
15438: IFFALSE 15460
// SetClass ( un , rand ( 1 , 4 ) ) ;
15440: LD_VAR 0 1
15444: PPUSH
15445: LD_INT 1
15447: PPUSH
15448: LD_INT 4
15450: PPUSH
15451: CALL_OW 12
15455: PPUSH
15456: CALL_OW 336
15460: GO 15407
15462: POP
15463: POP
// end ;
15464: PPOPN 1
15466: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15467: LD_EXP 23
15471: PUSH
15472: LD_EXP 35
15476: AND
15477: IFFALSE 15556
15479: GO 15481
15481: DISABLE
15482: LD_INT 0
15484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15485: LD_ADDR_VAR 0 1
15489: PUSH
15490: LD_INT 22
15492: PUSH
15493: LD_OWVAR 2
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 21
15504: PUSH
15505: LD_INT 3
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PPUSH
15516: CALL_OW 69
15520: ST_TO_ADDR
// if not tmp then
15521: LD_VAR 0 1
15525: NOT
15526: IFFALSE 15530
// exit ;
15528: GO 15556
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15530: LD_VAR 0 1
15534: PUSH
15535: LD_INT 1
15537: PPUSH
15538: LD_VAR 0 1
15542: PPUSH
15543: CALL_OW 12
15547: ARRAY
15548: PPUSH
15549: LD_INT 100
15551: PPUSH
15552: CALL_OW 234
// end ;
15556: PPOPN 1
15558: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15559: LD_EXP 23
15563: PUSH
15564: LD_EXP 37
15568: AND
15569: IFFALSE 15667
15571: GO 15573
15573: DISABLE
15574: LD_INT 0
15576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15577: LD_ADDR_VAR 0 1
15581: PUSH
15582: LD_INT 22
15584: PUSH
15585: LD_OWVAR 2
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 21
15596: PUSH
15597: LD_INT 1
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PPUSH
15608: CALL_OW 69
15612: ST_TO_ADDR
// if not tmp then
15613: LD_VAR 0 1
15617: NOT
15618: IFFALSE 15622
// exit ;
15620: GO 15667
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15622: LD_VAR 0 1
15626: PUSH
15627: LD_INT 1
15629: PPUSH
15630: LD_VAR 0 1
15634: PPUSH
15635: CALL_OW 12
15639: ARRAY
15640: PPUSH
15641: LD_INT 1
15643: PPUSH
15644: LD_INT 4
15646: PPUSH
15647: CALL_OW 12
15651: PPUSH
15652: LD_INT 3000
15654: PPUSH
15655: LD_INT 9000
15657: PPUSH
15658: CALL_OW 12
15662: PPUSH
15663: CALL_OW 492
// end ;
15667: PPOPN 1
15669: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15670: LD_EXP 23
15674: PUSH
15675: LD_EXP 38
15679: AND
15680: IFFALSE 15700
15682: GO 15684
15684: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15685: LD_INT 1
15687: PPUSH
15688: LD_OWVAR 2
15692: PPUSH
15693: LD_INT 0
15695: PPUSH
15696: CALL_OW 324
15700: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15701: LD_EXP 23
15705: PUSH
15706: LD_EXP 39
15710: AND
15711: IFFALSE 15794
15713: GO 15715
15715: DISABLE
15716: LD_INT 0
15718: PPUSH
15719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15720: LD_ADDR_VAR 0 2
15724: PUSH
15725: LD_INT 22
15727: PUSH
15728: LD_OWVAR 2
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 21
15739: PUSH
15740: LD_INT 3
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PPUSH
15751: CALL_OW 69
15755: ST_TO_ADDR
// if not tmp then
15756: LD_VAR 0 2
15760: NOT
15761: IFFALSE 15765
// exit ;
15763: GO 15794
// for i in tmp do
15765: LD_ADDR_VAR 0 1
15769: PUSH
15770: LD_VAR 0 2
15774: PUSH
15775: FOR_IN
15776: IFFALSE 15792
// SetBLevel ( i , 10 ) ;
15778: LD_VAR 0 1
15782: PPUSH
15783: LD_INT 10
15785: PPUSH
15786: CALL_OW 241
15790: GO 15775
15792: POP
15793: POP
// end ;
15794: PPOPN 2
15796: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15797: LD_EXP 23
15801: PUSH
15802: LD_EXP 40
15806: AND
15807: IFFALSE 15918
15809: GO 15811
15811: DISABLE
15812: LD_INT 0
15814: PPUSH
15815: PPUSH
15816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15817: LD_ADDR_VAR 0 3
15821: PUSH
15822: LD_INT 22
15824: PUSH
15825: LD_OWVAR 2
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 25
15836: PUSH
15837: LD_INT 1
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PPUSH
15848: CALL_OW 69
15852: ST_TO_ADDR
// if not tmp then
15853: LD_VAR 0 3
15857: NOT
15858: IFFALSE 15862
// exit ;
15860: GO 15918
// un := tmp [ rand ( 1 , tmp ) ] ;
15862: LD_ADDR_VAR 0 2
15866: PUSH
15867: LD_VAR 0 3
15871: PUSH
15872: LD_INT 1
15874: PPUSH
15875: LD_VAR 0 3
15879: PPUSH
15880: CALL_OW 12
15884: ARRAY
15885: ST_TO_ADDR
// if Crawls ( un ) then
15886: LD_VAR 0 2
15890: PPUSH
15891: CALL_OW 318
15895: IFFALSE 15906
// ComWalk ( un ) ;
15897: LD_VAR 0 2
15901: PPUSH
15902: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15906: LD_VAR 0 2
15910: PPUSH
15911: LD_INT 5
15913: PPUSH
15914: CALL_OW 336
// end ;
15918: PPOPN 3
15920: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15921: LD_EXP 23
15925: PUSH
15926: LD_EXP 41
15930: AND
15931: PUSH
15932: LD_OWVAR 67
15936: PUSH
15937: LD_INT 4
15939: LESS
15940: AND
15941: IFFALSE 15960
15943: GO 15945
15945: DISABLE
// begin Difficulty := Difficulty + 1 ;
15946: LD_ADDR_OWVAR 67
15950: PUSH
15951: LD_OWVAR 67
15955: PUSH
15956: LD_INT 1
15958: PLUS
15959: ST_TO_ADDR
// end ;
15960: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15961: LD_EXP 23
15965: PUSH
15966: LD_EXP 42
15970: AND
15971: IFFALSE 16074
15973: GO 15975
15975: DISABLE
15976: LD_INT 0
15978: PPUSH
// begin for i := 1 to 5 do
15979: LD_ADDR_VAR 0 1
15983: PUSH
15984: DOUBLE
15985: LD_INT 1
15987: DEC
15988: ST_TO_ADDR
15989: LD_INT 5
15991: PUSH
15992: FOR_TO
15993: IFFALSE 16072
// begin uc_nation := nation_nature ;
15995: LD_ADDR_OWVAR 21
15999: PUSH
16000: LD_INT 0
16002: ST_TO_ADDR
// uc_side := 0 ;
16003: LD_ADDR_OWVAR 20
16007: PUSH
16008: LD_INT 0
16010: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16011: LD_ADDR_OWVAR 29
16015: PUSH
16016: LD_INT 12
16018: PUSH
16019: LD_INT 12
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: ST_TO_ADDR
// hc_agressivity := 20 ;
16026: LD_ADDR_OWVAR 35
16030: PUSH
16031: LD_INT 20
16033: ST_TO_ADDR
// hc_class := class_tiger ;
16034: LD_ADDR_OWVAR 28
16038: PUSH
16039: LD_INT 14
16041: ST_TO_ADDR
// hc_gallery :=  ;
16042: LD_ADDR_OWVAR 33
16046: PUSH
16047: LD_STRING 
16049: ST_TO_ADDR
// hc_name :=  ;
16050: LD_ADDR_OWVAR 26
16054: PUSH
16055: LD_STRING 
16057: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16058: CALL_OW 44
16062: PPUSH
16063: LD_INT 0
16065: PPUSH
16066: CALL_OW 51
// end ;
16070: GO 15992
16072: POP
16073: POP
// end ;
16074: PPOPN 1
16076: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16077: LD_EXP 23
16081: PUSH
16082: LD_EXP 43
16086: AND
16087: IFFALSE 16096
16089: GO 16091
16091: DISABLE
// StreamSibBomb ;
16092: CALL 16097 0 0
16096: END
// export function StreamSibBomb ; var i , x , y ; begin
16097: LD_INT 0
16099: PPUSH
16100: PPUSH
16101: PPUSH
16102: PPUSH
// result := false ;
16103: LD_ADDR_VAR 0 1
16107: PUSH
16108: LD_INT 0
16110: ST_TO_ADDR
// for i := 1 to 16 do
16111: LD_ADDR_VAR 0 2
16115: PUSH
16116: DOUBLE
16117: LD_INT 1
16119: DEC
16120: ST_TO_ADDR
16121: LD_INT 16
16123: PUSH
16124: FOR_TO
16125: IFFALSE 16324
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16127: LD_ADDR_VAR 0 3
16131: PUSH
16132: LD_INT 10
16134: PUSH
16135: LD_INT 20
16137: PUSH
16138: LD_INT 30
16140: PUSH
16141: LD_INT 40
16143: PUSH
16144: LD_INT 50
16146: PUSH
16147: LD_INT 60
16149: PUSH
16150: LD_INT 70
16152: PUSH
16153: LD_INT 80
16155: PUSH
16156: LD_INT 90
16158: PUSH
16159: LD_INT 100
16161: PUSH
16162: LD_INT 110
16164: PUSH
16165: LD_INT 120
16167: PUSH
16168: LD_INT 130
16170: PUSH
16171: LD_INT 140
16173: PUSH
16174: LD_INT 150
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: PUSH
16194: LD_INT 1
16196: PPUSH
16197: LD_INT 15
16199: PPUSH
16200: CALL_OW 12
16204: ARRAY
16205: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16206: LD_ADDR_VAR 0 4
16210: PUSH
16211: LD_INT 10
16213: PUSH
16214: LD_INT 20
16216: PUSH
16217: LD_INT 30
16219: PUSH
16220: LD_INT 40
16222: PUSH
16223: LD_INT 50
16225: PUSH
16226: LD_INT 60
16228: PUSH
16229: LD_INT 70
16231: PUSH
16232: LD_INT 80
16234: PUSH
16235: LD_INT 90
16237: PUSH
16238: LD_INT 100
16240: PUSH
16241: LD_INT 110
16243: PUSH
16244: LD_INT 120
16246: PUSH
16247: LD_INT 130
16249: PUSH
16250: LD_INT 140
16252: PUSH
16253: LD_INT 150
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: PUSH
16273: LD_INT 1
16275: PPUSH
16276: LD_INT 15
16278: PPUSH
16279: CALL_OW 12
16283: ARRAY
16284: ST_TO_ADDR
// if ValidHex ( x , y ) then
16285: LD_VAR 0 3
16289: PPUSH
16290: LD_VAR 0 4
16294: PPUSH
16295: CALL_OW 488
16299: IFFALSE 16322
// begin result := [ x , y ] ;
16301: LD_ADDR_VAR 0 1
16305: PUSH
16306: LD_VAR 0 3
16310: PUSH
16311: LD_VAR 0 4
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: ST_TO_ADDR
// break ;
16320: GO 16324
// end ; end ;
16322: GO 16124
16324: POP
16325: POP
// if result then
16326: LD_VAR 0 1
16330: IFFALSE 16390
// begin ToLua ( playSibBomb() ) ;
16332: LD_STRING playSibBomb()
16334: PPUSH
16335: CALL_OW 559
// wait ( 0 0$14 ) ;
16339: LD_INT 490
16341: PPUSH
16342: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16346: LD_VAR 0 1
16350: PUSH
16351: LD_INT 1
16353: ARRAY
16354: PPUSH
16355: LD_VAR 0 1
16359: PUSH
16360: LD_INT 2
16362: ARRAY
16363: PPUSH
16364: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16368: LD_VAR 0 1
16372: PUSH
16373: LD_INT 1
16375: ARRAY
16376: PPUSH
16377: LD_VAR 0 1
16381: PUSH
16382: LD_INT 2
16384: ARRAY
16385: PPUSH
16386: CALL_OW 429
// end ; end ;
16390: LD_VAR 0 1
16394: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16395: LD_EXP 23
16399: PUSH
16400: LD_EXP 45
16404: AND
16405: IFFALSE 16417
16407: GO 16409
16409: DISABLE
// YouLost (  ) ;
16410: LD_STRING 
16412: PPUSH
16413: CALL_OW 104
16417: END
// every 0 0$1 trigger StreamModeActive and sFog do
16418: LD_EXP 23
16422: PUSH
16423: LD_EXP 44
16427: AND
16428: IFFALSE 16442
16430: GO 16432
16432: DISABLE
// FogOff ( your_side ) ;
16433: LD_OWVAR 2
16437: PPUSH
16438: CALL_OW 344
16442: END
// every 0 0$1 trigger StreamModeActive and sSun do
16443: LD_EXP 23
16447: PUSH
16448: LD_EXP 46
16452: AND
16453: IFFALSE 16481
16455: GO 16457
16457: DISABLE
// begin solar_recharge_percent := 0 ;
16458: LD_ADDR_OWVAR 79
16462: PUSH
16463: LD_INT 0
16465: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16466: LD_INT 10500
16468: PPUSH
16469: CALL_OW 67
// solar_recharge_percent := 100 ;
16473: LD_ADDR_OWVAR 79
16477: PUSH
16478: LD_INT 100
16480: ST_TO_ADDR
// end ;
16481: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16482: LD_EXP 23
16486: PUSH
16487: LD_EXP 47
16491: AND
16492: IFFALSE 16731
16494: GO 16496
16496: DISABLE
16497: LD_INT 0
16499: PPUSH
16500: PPUSH
16501: PPUSH
// begin tmp := [ ] ;
16502: LD_ADDR_VAR 0 3
16506: PUSH
16507: EMPTY
16508: ST_TO_ADDR
// for i := 1 to 6 do
16509: LD_ADDR_VAR 0 1
16513: PUSH
16514: DOUBLE
16515: LD_INT 1
16517: DEC
16518: ST_TO_ADDR
16519: LD_INT 6
16521: PUSH
16522: FOR_TO
16523: IFFALSE 16628
// begin uc_nation := nation_nature ;
16525: LD_ADDR_OWVAR 21
16529: PUSH
16530: LD_INT 0
16532: ST_TO_ADDR
// uc_side := 0 ;
16533: LD_ADDR_OWVAR 20
16537: PUSH
16538: LD_INT 0
16540: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16541: LD_ADDR_OWVAR 29
16545: PUSH
16546: LD_INT 12
16548: PUSH
16549: LD_INT 12
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: ST_TO_ADDR
// hc_agressivity := 20 ;
16556: LD_ADDR_OWVAR 35
16560: PUSH
16561: LD_INT 20
16563: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16564: LD_ADDR_OWVAR 28
16568: PUSH
16569: LD_INT 17
16571: ST_TO_ADDR
// hc_gallery :=  ;
16572: LD_ADDR_OWVAR 33
16576: PUSH
16577: LD_STRING 
16579: ST_TO_ADDR
// hc_name :=  ;
16580: LD_ADDR_OWVAR 26
16584: PUSH
16585: LD_STRING 
16587: ST_TO_ADDR
// un := CreateHuman ;
16588: LD_ADDR_VAR 0 2
16592: PUSH
16593: CALL_OW 44
16597: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16598: LD_VAR 0 2
16602: PPUSH
16603: LD_INT 1
16605: PPUSH
16606: CALL_OW 51
// tmp := tmp ^ un ;
16610: LD_ADDR_VAR 0 3
16614: PUSH
16615: LD_VAR 0 3
16619: PUSH
16620: LD_VAR 0 2
16624: ADD
16625: ST_TO_ADDR
// end ;
16626: GO 16522
16628: POP
16629: POP
// repeat wait ( 0 0$1 ) ;
16630: LD_INT 35
16632: PPUSH
16633: CALL_OW 67
// for un in tmp do
16637: LD_ADDR_VAR 0 2
16641: PUSH
16642: LD_VAR 0 3
16646: PUSH
16647: FOR_IN
16648: IFFALSE 16722
// begin if IsDead ( un ) then
16650: LD_VAR 0 2
16654: PPUSH
16655: CALL_OW 301
16659: IFFALSE 16679
// begin tmp := tmp diff un ;
16661: LD_ADDR_VAR 0 3
16665: PUSH
16666: LD_VAR 0 3
16670: PUSH
16671: LD_VAR 0 2
16675: DIFF
16676: ST_TO_ADDR
// continue ;
16677: GO 16647
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16679: LD_VAR 0 2
16683: PPUSH
16684: LD_INT 3
16686: PUSH
16687: LD_INT 22
16689: PUSH
16690: LD_INT 0
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PPUSH
16701: CALL_OW 69
16705: PPUSH
16706: LD_VAR 0 2
16710: PPUSH
16711: CALL_OW 74
16715: PPUSH
16716: CALL_OW 115
// end ;
16720: GO 16647
16722: POP
16723: POP
// until not tmp ;
16724: LD_VAR 0 3
16728: NOT
16729: IFFALSE 16630
// end ;
16731: PPOPN 3
16733: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16734: LD_EXP 23
16738: PUSH
16739: LD_EXP 48
16743: AND
16744: IFFALSE 16798
16746: GO 16748
16748: DISABLE
// begin ToLua ( displayTroll(); ) ;
16749: LD_STRING displayTroll();
16751: PPUSH
16752: CALL_OW 559
// wait ( 3 3$00 ) ;
16756: LD_INT 6300
16758: PPUSH
16759: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16763: LD_STRING hideTroll();
16765: PPUSH
16766: CALL_OW 559
// wait ( 1 1$00 ) ;
16770: LD_INT 2100
16772: PPUSH
16773: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16777: LD_STRING displayTroll();
16779: PPUSH
16780: CALL_OW 559
// wait ( 1 1$00 ) ;
16784: LD_INT 2100
16786: PPUSH
16787: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16791: LD_STRING hideTroll();
16793: PPUSH
16794: CALL_OW 559
// end ;
16798: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16799: LD_EXP 23
16803: PUSH
16804: LD_EXP 49
16808: AND
16809: IFFALSE 16872
16811: GO 16813
16813: DISABLE
16814: LD_INT 0
16816: PPUSH
// begin p := 0 ;
16817: LD_ADDR_VAR 0 1
16821: PUSH
16822: LD_INT 0
16824: ST_TO_ADDR
// repeat game_speed := 1 ;
16825: LD_ADDR_OWVAR 65
16829: PUSH
16830: LD_INT 1
16832: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16833: LD_INT 35
16835: PPUSH
16836: CALL_OW 67
// p := p + 1 ;
16840: LD_ADDR_VAR 0 1
16844: PUSH
16845: LD_VAR 0 1
16849: PUSH
16850: LD_INT 1
16852: PLUS
16853: ST_TO_ADDR
// until p >= 60 ;
16854: LD_VAR 0 1
16858: PUSH
16859: LD_INT 60
16861: GREATEREQUAL
16862: IFFALSE 16825
// game_speed := 4 ;
16864: LD_ADDR_OWVAR 65
16868: PUSH
16869: LD_INT 4
16871: ST_TO_ADDR
// end ;
16872: PPOPN 1
16874: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16875: LD_EXP 23
16879: PUSH
16880: LD_EXP 50
16884: AND
16885: IFFALSE 17031
16887: GO 16889
16889: DISABLE
16890: LD_INT 0
16892: PPUSH
16893: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16894: LD_ADDR_VAR 0 1
16898: PUSH
16899: LD_INT 22
16901: PUSH
16902: LD_OWVAR 2
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 2
16913: PUSH
16914: LD_INT 30
16916: PUSH
16917: LD_INT 0
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 30
16926: PUSH
16927: LD_INT 1
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: LIST
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PPUSH
16943: CALL_OW 69
16947: ST_TO_ADDR
// if not depot then
16948: LD_VAR 0 1
16952: NOT
16953: IFFALSE 16957
// exit ;
16955: GO 17031
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16957: LD_ADDR_VAR 0 2
16961: PUSH
16962: LD_VAR 0 1
16966: PUSH
16967: LD_INT 1
16969: PPUSH
16970: LD_VAR 0 1
16974: PPUSH
16975: CALL_OW 12
16979: ARRAY
16980: PPUSH
16981: CALL_OW 274
16985: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16986: LD_VAR 0 2
16990: PPUSH
16991: LD_INT 1
16993: PPUSH
16994: LD_INT 0
16996: PPUSH
16997: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17001: LD_VAR 0 2
17005: PPUSH
17006: LD_INT 2
17008: PPUSH
17009: LD_INT 0
17011: PPUSH
17012: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17016: LD_VAR 0 2
17020: PPUSH
17021: LD_INT 3
17023: PPUSH
17024: LD_INT 0
17026: PPUSH
17027: CALL_OW 277
// end ;
17031: PPOPN 2
17033: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17034: LD_EXP 23
17038: PUSH
17039: LD_EXP 51
17043: AND
17044: IFFALSE 17141
17046: GO 17048
17048: DISABLE
17049: LD_INT 0
17051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17052: LD_ADDR_VAR 0 1
17056: PUSH
17057: LD_INT 22
17059: PUSH
17060: LD_OWVAR 2
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 21
17071: PUSH
17072: LD_INT 1
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 3
17081: PUSH
17082: LD_INT 23
17084: PUSH
17085: LD_INT 0
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: LIST
17100: PPUSH
17101: CALL_OW 69
17105: ST_TO_ADDR
// if not tmp then
17106: LD_VAR 0 1
17110: NOT
17111: IFFALSE 17115
// exit ;
17113: GO 17141
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17115: LD_VAR 0 1
17119: PUSH
17120: LD_INT 1
17122: PPUSH
17123: LD_VAR 0 1
17127: PPUSH
17128: CALL_OW 12
17132: ARRAY
17133: PPUSH
17134: LD_INT 200
17136: PPUSH
17137: CALL_OW 234
// end ;
17141: PPOPN 1
17143: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17144: LD_EXP 23
17148: PUSH
17149: LD_EXP 52
17153: AND
17154: IFFALSE 17233
17156: GO 17158
17158: DISABLE
17159: LD_INT 0
17161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17162: LD_ADDR_VAR 0 1
17166: PUSH
17167: LD_INT 22
17169: PUSH
17170: LD_OWVAR 2
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 21
17181: PUSH
17182: LD_INT 2
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PPUSH
17193: CALL_OW 69
17197: ST_TO_ADDR
// if not tmp then
17198: LD_VAR 0 1
17202: NOT
17203: IFFALSE 17207
// exit ;
17205: GO 17233
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17207: LD_VAR 0 1
17211: PUSH
17212: LD_INT 1
17214: PPUSH
17215: LD_VAR 0 1
17219: PPUSH
17220: CALL_OW 12
17224: ARRAY
17225: PPUSH
17226: LD_INT 60
17228: PPUSH
17229: CALL_OW 234
// end ;
17233: PPOPN 1
17235: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17236: LD_EXP 23
17240: PUSH
17241: LD_EXP 53
17245: AND
17246: IFFALSE 17345
17248: GO 17250
17250: DISABLE
17251: LD_INT 0
17253: PPUSH
17254: PPUSH
// begin enable ;
17255: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17256: LD_ADDR_VAR 0 1
17260: PUSH
17261: LD_INT 22
17263: PUSH
17264: LD_OWVAR 2
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 61
17275: PUSH
17276: EMPTY
17277: LIST
17278: PUSH
17279: LD_INT 33
17281: PUSH
17282: LD_INT 2
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: LIST
17293: PPUSH
17294: CALL_OW 69
17298: ST_TO_ADDR
// if not tmp then
17299: LD_VAR 0 1
17303: NOT
17304: IFFALSE 17308
// exit ;
17306: GO 17345
// for i in tmp do
17308: LD_ADDR_VAR 0 2
17312: PUSH
17313: LD_VAR 0 1
17317: PUSH
17318: FOR_IN
17319: IFFALSE 17343
// if IsControledBy ( i ) then
17321: LD_VAR 0 2
17325: PPUSH
17326: CALL_OW 312
17330: IFFALSE 17341
// ComUnlink ( i ) ;
17332: LD_VAR 0 2
17336: PPUSH
17337: CALL_OW 136
17341: GO 17318
17343: POP
17344: POP
// end ;
17345: PPOPN 2
17347: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17348: LD_EXP 23
17352: PUSH
17353: LD_EXP 54
17357: AND
17358: IFFALSE 17498
17360: GO 17362
17362: DISABLE
17363: LD_INT 0
17365: PPUSH
17366: PPUSH
// begin ToLua ( displayPowell(); ) ;
17367: LD_STRING displayPowell();
17369: PPUSH
17370: CALL_OW 559
// uc_side := 0 ;
17374: LD_ADDR_OWVAR 20
17378: PUSH
17379: LD_INT 0
17381: ST_TO_ADDR
// uc_nation := 2 ;
17382: LD_ADDR_OWVAR 21
17386: PUSH
17387: LD_INT 2
17389: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17390: LD_ADDR_OWVAR 37
17394: PUSH
17395: LD_INT 14
17397: ST_TO_ADDR
// vc_engine := engine_siberite ;
17398: LD_ADDR_OWVAR 39
17402: PUSH
17403: LD_INT 3
17405: ST_TO_ADDR
// vc_control := control_apeman ;
17406: LD_ADDR_OWVAR 38
17410: PUSH
17411: LD_INT 5
17413: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17414: LD_ADDR_OWVAR 40
17418: PUSH
17419: LD_INT 29
17421: ST_TO_ADDR
// un := CreateVehicle ;
17422: LD_ADDR_VAR 0 2
17426: PUSH
17427: CALL_OW 45
17431: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17432: LD_VAR 0 2
17436: PPUSH
17437: LD_INT 1
17439: PPUSH
17440: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17444: LD_INT 35
17446: PPUSH
17447: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17451: LD_VAR 0 2
17455: PPUSH
17456: LD_INT 22
17458: PUSH
17459: LD_OWVAR 2
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PPUSH
17468: CALL_OW 69
17472: PPUSH
17473: LD_VAR 0 2
17477: PPUSH
17478: CALL_OW 74
17482: PPUSH
17483: CALL_OW 115
// until IsDead ( un ) ;
17487: LD_VAR 0 2
17491: PPUSH
17492: CALL_OW 301
17496: IFFALSE 17444
// end ;
17498: PPOPN 2
17500: END
// every 0 0$1 trigger StreamModeActive and sStu do
17501: LD_EXP 23
17505: PUSH
17506: LD_EXP 62
17510: AND
17511: IFFALSE 17527
17513: GO 17515
17515: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17516: LD_STRING displayStucuk();
17518: PPUSH
17519: CALL_OW 559
// ResetFog ;
17523: CALL_OW 335
// end ;
17527: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17528: LD_EXP 23
17532: PUSH
17533: LD_EXP 55
17537: AND
17538: IFFALSE 17679
17540: GO 17542
17542: DISABLE
17543: LD_INT 0
17545: PPUSH
17546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17547: LD_ADDR_VAR 0 2
17551: PUSH
17552: LD_INT 22
17554: PUSH
17555: LD_OWVAR 2
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 21
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL_OW 69
17582: ST_TO_ADDR
// if not tmp then
17583: LD_VAR 0 2
17587: NOT
17588: IFFALSE 17592
// exit ;
17590: GO 17679
// un := tmp [ rand ( 1 , tmp ) ] ;
17592: LD_ADDR_VAR 0 1
17596: PUSH
17597: LD_VAR 0 2
17601: PUSH
17602: LD_INT 1
17604: PPUSH
17605: LD_VAR 0 2
17609: PPUSH
17610: CALL_OW 12
17614: ARRAY
17615: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17616: LD_VAR 0 1
17620: PPUSH
17621: LD_INT 0
17623: PPUSH
17624: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17628: LD_VAR 0 1
17632: PPUSH
17633: LD_OWVAR 3
17637: PUSH
17638: LD_VAR 0 1
17642: DIFF
17643: PPUSH
17644: LD_VAR 0 1
17648: PPUSH
17649: CALL_OW 74
17653: PPUSH
17654: CALL_OW 115
// wait ( 0 0$20 ) ;
17658: LD_INT 700
17660: PPUSH
17661: CALL_OW 67
// SetSide ( un , your_side ) ;
17665: LD_VAR 0 1
17669: PPUSH
17670: LD_OWVAR 2
17674: PPUSH
17675: CALL_OW 235
// end ;
17679: PPOPN 2
17681: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17682: LD_EXP 23
17686: PUSH
17687: LD_EXP 56
17691: AND
17692: IFFALSE 17798
17694: GO 17696
17696: DISABLE
17697: LD_INT 0
17699: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17700: LD_ADDR_VAR 0 1
17704: PUSH
17705: LD_INT 22
17707: PUSH
17708: LD_OWVAR 2
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 2
17719: PUSH
17720: LD_INT 30
17722: PUSH
17723: LD_INT 0
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: PUSH
17730: LD_INT 30
17732: PUSH
17733: LD_INT 1
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PPUSH
17749: CALL_OW 69
17753: ST_TO_ADDR
// if not depot then
17754: LD_VAR 0 1
17758: NOT
17759: IFFALSE 17763
// exit ;
17761: GO 17798
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17763: LD_VAR 0 1
17767: PUSH
17768: LD_INT 1
17770: ARRAY
17771: PPUSH
17772: CALL_OW 250
17776: PPUSH
17777: LD_VAR 0 1
17781: PUSH
17782: LD_INT 1
17784: ARRAY
17785: PPUSH
17786: CALL_OW 251
17790: PPUSH
17791: LD_INT 70
17793: PPUSH
17794: CALL_OW 495
// end ;
17798: PPOPN 1
17800: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17801: LD_EXP 23
17805: PUSH
17806: LD_EXP 57
17810: AND
17811: IFFALSE 18022
17813: GO 17815
17815: DISABLE
17816: LD_INT 0
17818: PPUSH
17819: PPUSH
17820: PPUSH
17821: PPUSH
17822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17823: LD_ADDR_VAR 0 5
17827: PUSH
17828: LD_INT 22
17830: PUSH
17831: LD_OWVAR 2
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 21
17842: PUSH
17843: LD_INT 1
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PPUSH
17854: CALL_OW 69
17858: ST_TO_ADDR
// if not tmp then
17859: LD_VAR 0 5
17863: NOT
17864: IFFALSE 17868
// exit ;
17866: GO 18022
// for i in tmp do
17868: LD_ADDR_VAR 0 1
17872: PUSH
17873: LD_VAR 0 5
17877: PUSH
17878: FOR_IN
17879: IFFALSE 18020
// begin d := rand ( 0 , 5 ) ;
17881: LD_ADDR_VAR 0 4
17885: PUSH
17886: LD_INT 0
17888: PPUSH
17889: LD_INT 5
17891: PPUSH
17892: CALL_OW 12
17896: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17897: LD_ADDR_VAR 0 2
17901: PUSH
17902: LD_VAR 0 1
17906: PPUSH
17907: CALL_OW 250
17911: PPUSH
17912: LD_VAR 0 4
17916: PPUSH
17917: LD_INT 3
17919: PPUSH
17920: LD_INT 12
17922: PPUSH
17923: CALL_OW 12
17927: PPUSH
17928: CALL_OW 272
17932: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17933: LD_ADDR_VAR 0 3
17937: PUSH
17938: LD_VAR 0 1
17942: PPUSH
17943: CALL_OW 251
17947: PPUSH
17948: LD_VAR 0 4
17952: PPUSH
17953: LD_INT 3
17955: PPUSH
17956: LD_INT 12
17958: PPUSH
17959: CALL_OW 12
17963: PPUSH
17964: CALL_OW 273
17968: ST_TO_ADDR
// if ValidHex ( x , y ) then
17969: LD_VAR 0 2
17973: PPUSH
17974: LD_VAR 0 3
17978: PPUSH
17979: CALL_OW 488
17983: IFFALSE 18018
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17985: LD_VAR 0 1
17989: PPUSH
17990: LD_VAR 0 2
17994: PPUSH
17995: LD_VAR 0 3
17999: PPUSH
18000: LD_INT 3
18002: PPUSH
18003: LD_INT 6
18005: PPUSH
18006: CALL_OW 12
18010: PPUSH
18011: LD_INT 1
18013: PPUSH
18014: CALL_OW 483
// end ;
18018: GO 17878
18020: POP
18021: POP
// end ;
18022: PPOPN 5
18024: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18025: LD_EXP 23
18029: PUSH
18030: LD_EXP 58
18034: AND
18035: IFFALSE 18129
18037: GO 18039
18039: DISABLE
18040: LD_INT 0
18042: PPUSH
18043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18044: LD_ADDR_VAR 0 2
18048: PUSH
18049: LD_INT 22
18051: PUSH
18052: LD_OWVAR 2
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 32
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 21
18073: PUSH
18074: LD_INT 2
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: LIST
18085: PPUSH
18086: CALL_OW 69
18090: ST_TO_ADDR
// if not tmp then
18091: LD_VAR 0 2
18095: NOT
18096: IFFALSE 18100
// exit ;
18098: GO 18129
// for i in tmp do
18100: LD_ADDR_VAR 0 1
18104: PUSH
18105: LD_VAR 0 2
18109: PUSH
18110: FOR_IN
18111: IFFALSE 18127
// SetFuel ( i , 0 ) ;
18113: LD_VAR 0 1
18117: PPUSH
18118: LD_INT 0
18120: PPUSH
18121: CALL_OW 240
18125: GO 18110
18127: POP
18128: POP
// end ;
18129: PPOPN 2
18131: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18132: LD_EXP 23
18136: PUSH
18137: LD_EXP 59
18141: AND
18142: IFFALSE 18208
18144: GO 18146
18146: DISABLE
18147: LD_INT 0
18149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18150: LD_ADDR_VAR 0 1
18154: PUSH
18155: LD_INT 22
18157: PUSH
18158: LD_OWVAR 2
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 30
18169: PUSH
18170: LD_INT 29
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PPUSH
18181: CALL_OW 69
18185: ST_TO_ADDR
// if not tmp then
18186: LD_VAR 0 1
18190: NOT
18191: IFFALSE 18195
// exit ;
18193: GO 18208
// DestroyUnit ( tmp [ 1 ] ) ;
18195: LD_VAR 0 1
18199: PUSH
18200: LD_INT 1
18202: ARRAY
18203: PPUSH
18204: CALL_OW 65
// end ;
18208: PPOPN 1
18210: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18211: LD_EXP 23
18215: PUSH
18216: LD_EXP 61
18220: AND
18221: IFFALSE 18350
18223: GO 18225
18225: DISABLE
18226: LD_INT 0
18228: PPUSH
// begin uc_side := 0 ;
18229: LD_ADDR_OWVAR 20
18233: PUSH
18234: LD_INT 0
18236: ST_TO_ADDR
// uc_nation := nation_arabian ;
18237: LD_ADDR_OWVAR 21
18241: PUSH
18242: LD_INT 2
18244: ST_TO_ADDR
// hc_gallery :=  ;
18245: LD_ADDR_OWVAR 33
18249: PUSH
18250: LD_STRING 
18252: ST_TO_ADDR
// hc_name :=  ;
18253: LD_ADDR_OWVAR 26
18257: PUSH
18258: LD_STRING 
18260: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18261: LD_INT 1
18263: PPUSH
18264: LD_INT 11
18266: PPUSH
18267: LD_INT 10
18269: PPUSH
18270: CALL_OW 380
// un := CreateHuman ;
18274: LD_ADDR_VAR 0 1
18278: PUSH
18279: CALL_OW 44
18283: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18284: LD_VAR 0 1
18288: PPUSH
18289: LD_INT 1
18291: PPUSH
18292: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18296: LD_INT 35
18298: PPUSH
18299: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18303: LD_VAR 0 1
18307: PPUSH
18308: LD_INT 22
18310: PUSH
18311: LD_OWVAR 2
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PPUSH
18320: CALL_OW 69
18324: PPUSH
18325: LD_VAR 0 1
18329: PPUSH
18330: CALL_OW 74
18334: PPUSH
18335: CALL_OW 115
// until IsDead ( un ) ;
18339: LD_VAR 0 1
18343: PPUSH
18344: CALL_OW 301
18348: IFFALSE 18296
// end ;
18350: PPOPN 1
18352: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18353: LD_EXP 23
18357: PUSH
18358: LD_EXP 63
18362: AND
18363: IFFALSE 18375
18365: GO 18367
18367: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18368: LD_STRING earthquake(getX(game), 0, 32)
18370: PPUSH
18371: CALL_OW 559
18375: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18376: LD_EXP 23
18380: PUSH
18381: LD_EXP 64
18385: AND
18386: IFFALSE 18477
18388: GO 18390
18390: DISABLE
18391: LD_INT 0
18393: PPUSH
// begin enable ;
18394: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18395: LD_ADDR_VAR 0 1
18399: PUSH
18400: LD_INT 22
18402: PUSH
18403: LD_OWVAR 2
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 21
18414: PUSH
18415: LD_INT 2
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 33
18424: PUSH
18425: LD_INT 3
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: LIST
18436: PPUSH
18437: CALL_OW 69
18441: ST_TO_ADDR
// if not tmp then
18442: LD_VAR 0 1
18446: NOT
18447: IFFALSE 18451
// exit ;
18449: GO 18477
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18451: LD_VAR 0 1
18455: PUSH
18456: LD_INT 1
18458: PPUSH
18459: LD_VAR 0 1
18463: PPUSH
18464: CALL_OW 12
18468: ARRAY
18469: PPUSH
18470: LD_INT 1
18472: PPUSH
18473: CALL_OW 234
// end ;
18477: PPOPN 1
18479: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18480: LD_EXP 23
18484: PUSH
18485: LD_EXP 65
18489: AND
18490: IFFALSE 18631
18492: GO 18494
18494: DISABLE
18495: LD_INT 0
18497: PPUSH
18498: PPUSH
18499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18500: LD_ADDR_VAR 0 3
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_OWVAR 2
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 25
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PPUSH
18531: CALL_OW 69
18535: ST_TO_ADDR
// if not tmp then
18536: LD_VAR 0 3
18540: NOT
18541: IFFALSE 18545
// exit ;
18543: GO 18631
// un := tmp [ rand ( 1 , tmp ) ] ;
18545: LD_ADDR_VAR 0 2
18549: PUSH
18550: LD_VAR 0 3
18554: PUSH
18555: LD_INT 1
18557: PPUSH
18558: LD_VAR 0 3
18562: PPUSH
18563: CALL_OW 12
18567: ARRAY
18568: ST_TO_ADDR
// if Crawls ( un ) then
18569: LD_VAR 0 2
18573: PPUSH
18574: CALL_OW 318
18578: IFFALSE 18589
// ComWalk ( un ) ;
18580: LD_VAR 0 2
18584: PPUSH
18585: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18589: LD_VAR 0 2
18593: PPUSH
18594: LD_INT 9
18596: PPUSH
18597: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18601: LD_INT 28
18603: PPUSH
18604: LD_OWVAR 2
18608: PPUSH
18609: LD_INT 2
18611: PPUSH
18612: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18616: LD_INT 29
18618: PPUSH
18619: LD_OWVAR 2
18623: PPUSH
18624: LD_INT 2
18626: PPUSH
18627: CALL_OW 322
// end ;
18631: PPOPN 3
18633: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18634: LD_EXP 23
18638: PUSH
18639: LD_EXP 66
18643: AND
18644: IFFALSE 18755
18646: GO 18648
18648: DISABLE
18649: LD_INT 0
18651: PPUSH
18652: PPUSH
18653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18654: LD_ADDR_VAR 0 3
18658: PUSH
18659: LD_INT 22
18661: PUSH
18662: LD_OWVAR 2
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 25
18673: PUSH
18674: LD_INT 1
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PPUSH
18685: CALL_OW 69
18689: ST_TO_ADDR
// if not tmp then
18690: LD_VAR 0 3
18694: NOT
18695: IFFALSE 18699
// exit ;
18697: GO 18755
// un := tmp [ rand ( 1 , tmp ) ] ;
18699: LD_ADDR_VAR 0 2
18703: PUSH
18704: LD_VAR 0 3
18708: PUSH
18709: LD_INT 1
18711: PPUSH
18712: LD_VAR 0 3
18716: PPUSH
18717: CALL_OW 12
18721: ARRAY
18722: ST_TO_ADDR
// if Crawls ( un ) then
18723: LD_VAR 0 2
18727: PPUSH
18728: CALL_OW 318
18732: IFFALSE 18743
// ComWalk ( un ) ;
18734: LD_VAR 0 2
18738: PPUSH
18739: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18743: LD_VAR 0 2
18747: PPUSH
18748: LD_INT 8
18750: PPUSH
18751: CALL_OW 336
// end ;
18755: PPOPN 3
18757: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18758: LD_EXP 23
18762: PUSH
18763: LD_EXP 67
18767: AND
18768: IFFALSE 18912
18770: GO 18772
18772: DISABLE
18773: LD_INT 0
18775: PPUSH
18776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18777: LD_ADDR_VAR 0 2
18781: PUSH
18782: LD_INT 22
18784: PUSH
18785: LD_OWVAR 2
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 21
18796: PUSH
18797: LD_INT 2
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 2
18806: PUSH
18807: LD_INT 34
18809: PUSH
18810: LD_INT 12
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 34
18819: PUSH
18820: LD_INT 51
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: PUSH
18827: LD_INT 34
18829: PUSH
18830: LD_INT 32
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: LIST
18847: PPUSH
18848: CALL_OW 69
18852: ST_TO_ADDR
// if not tmp then
18853: LD_VAR 0 2
18857: NOT
18858: IFFALSE 18862
// exit ;
18860: GO 18912
// for i in tmp do
18862: LD_ADDR_VAR 0 1
18866: PUSH
18867: LD_VAR 0 2
18871: PUSH
18872: FOR_IN
18873: IFFALSE 18910
// if GetCargo ( i , mat_artifact ) = 0 then
18875: LD_VAR 0 1
18879: PPUSH
18880: LD_INT 4
18882: PPUSH
18883: CALL_OW 289
18887: PUSH
18888: LD_INT 0
18890: EQUAL
18891: IFFALSE 18908
// SetCargo ( i , mat_siberit , 100 ) ;
18893: LD_VAR 0 1
18897: PPUSH
18898: LD_INT 3
18900: PPUSH
18901: LD_INT 100
18903: PPUSH
18904: CALL_OW 290
18908: GO 18872
18910: POP
18911: POP
// end ;
18912: PPOPN 2
18914: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18915: LD_EXP 23
18919: PUSH
18920: LD_EXP 68
18924: AND
18925: IFFALSE 19108
18927: GO 18929
18929: DISABLE
18930: LD_INT 0
18932: PPUSH
18933: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18934: LD_ADDR_VAR 0 2
18938: PUSH
18939: LD_INT 22
18941: PUSH
18942: LD_OWVAR 2
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PPUSH
18951: CALL_OW 69
18955: ST_TO_ADDR
// if not tmp then
18956: LD_VAR 0 2
18960: NOT
18961: IFFALSE 18965
// exit ;
18963: GO 19108
// for i := 1 to 2 do
18965: LD_ADDR_VAR 0 1
18969: PUSH
18970: DOUBLE
18971: LD_INT 1
18973: DEC
18974: ST_TO_ADDR
18975: LD_INT 2
18977: PUSH
18978: FOR_TO
18979: IFFALSE 19106
// begin uc_side := your_side ;
18981: LD_ADDR_OWVAR 20
18985: PUSH
18986: LD_OWVAR 2
18990: ST_TO_ADDR
// uc_nation := nation_american ;
18991: LD_ADDR_OWVAR 21
18995: PUSH
18996: LD_INT 1
18998: ST_TO_ADDR
// vc_chassis := us_morphling ;
18999: LD_ADDR_OWVAR 37
19003: PUSH
19004: LD_INT 5
19006: ST_TO_ADDR
// vc_engine := engine_siberite ;
19007: LD_ADDR_OWVAR 39
19011: PUSH
19012: LD_INT 3
19014: ST_TO_ADDR
// vc_control := control_computer ;
19015: LD_ADDR_OWVAR 38
19019: PUSH
19020: LD_INT 3
19022: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19023: LD_ADDR_OWVAR 40
19027: PUSH
19028: LD_INT 10
19030: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19031: LD_VAR 0 2
19035: PUSH
19036: LD_INT 1
19038: ARRAY
19039: PPUSH
19040: CALL_OW 310
19044: NOT
19045: IFFALSE 19092
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19047: CALL_OW 45
19051: PPUSH
19052: LD_VAR 0 2
19056: PUSH
19057: LD_INT 1
19059: ARRAY
19060: PPUSH
19061: CALL_OW 250
19065: PPUSH
19066: LD_VAR 0 2
19070: PUSH
19071: LD_INT 1
19073: ARRAY
19074: PPUSH
19075: CALL_OW 251
19079: PPUSH
19080: LD_INT 12
19082: PPUSH
19083: LD_INT 1
19085: PPUSH
19086: CALL_OW 50
19090: GO 19104
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19092: CALL_OW 45
19096: PPUSH
19097: LD_INT 1
19099: PPUSH
19100: CALL_OW 51
// end ;
19104: GO 18978
19106: POP
19107: POP
// end ;
19108: PPOPN 2
19110: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19111: LD_EXP 23
19115: PUSH
19116: LD_EXP 69
19120: AND
19121: IFFALSE 19343
19123: GO 19125
19125: DISABLE
19126: LD_INT 0
19128: PPUSH
19129: PPUSH
19130: PPUSH
19131: PPUSH
19132: PPUSH
19133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19134: LD_ADDR_VAR 0 6
19138: PUSH
19139: LD_INT 22
19141: PUSH
19142: LD_OWVAR 2
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 21
19153: PUSH
19154: LD_INT 1
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 3
19163: PUSH
19164: LD_INT 23
19166: PUSH
19167: LD_INT 0
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: LIST
19182: PPUSH
19183: CALL_OW 69
19187: ST_TO_ADDR
// if not tmp then
19188: LD_VAR 0 6
19192: NOT
19193: IFFALSE 19197
// exit ;
19195: GO 19343
// s1 := rand ( 1 , 4 ) ;
19197: LD_ADDR_VAR 0 2
19201: PUSH
19202: LD_INT 1
19204: PPUSH
19205: LD_INT 4
19207: PPUSH
19208: CALL_OW 12
19212: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19213: LD_ADDR_VAR 0 4
19217: PUSH
19218: LD_VAR 0 6
19222: PUSH
19223: LD_INT 1
19225: ARRAY
19226: PPUSH
19227: LD_VAR 0 2
19231: PPUSH
19232: CALL_OW 259
19236: ST_TO_ADDR
// if s1 = 1 then
19237: LD_VAR 0 2
19241: PUSH
19242: LD_INT 1
19244: EQUAL
19245: IFFALSE 19265
// s2 := rand ( 2 , 4 ) else
19247: LD_ADDR_VAR 0 3
19251: PUSH
19252: LD_INT 2
19254: PPUSH
19255: LD_INT 4
19257: PPUSH
19258: CALL_OW 12
19262: ST_TO_ADDR
19263: GO 19273
// s2 := 1 ;
19265: LD_ADDR_VAR 0 3
19269: PUSH
19270: LD_INT 1
19272: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19273: LD_ADDR_VAR 0 5
19277: PUSH
19278: LD_VAR 0 6
19282: PUSH
19283: LD_INT 1
19285: ARRAY
19286: PPUSH
19287: LD_VAR 0 3
19291: PPUSH
19292: CALL_OW 259
19296: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19297: LD_VAR 0 6
19301: PUSH
19302: LD_INT 1
19304: ARRAY
19305: PPUSH
19306: LD_VAR 0 2
19310: PPUSH
19311: LD_VAR 0 5
19315: PPUSH
19316: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19320: LD_VAR 0 6
19324: PUSH
19325: LD_INT 1
19327: ARRAY
19328: PPUSH
19329: LD_VAR 0 3
19333: PPUSH
19334: LD_VAR 0 4
19338: PPUSH
19339: CALL_OW 237
// end ;
19343: PPOPN 6
19345: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19346: LD_EXP 23
19350: PUSH
19351: LD_EXP 70
19355: AND
19356: IFFALSE 19435
19358: GO 19360
19360: DISABLE
19361: LD_INT 0
19363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19364: LD_ADDR_VAR 0 1
19368: PUSH
19369: LD_INT 22
19371: PUSH
19372: LD_OWVAR 2
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 30
19383: PUSH
19384: LD_INT 3
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PPUSH
19395: CALL_OW 69
19399: ST_TO_ADDR
// if not tmp then
19400: LD_VAR 0 1
19404: NOT
19405: IFFALSE 19409
// exit ;
19407: GO 19435
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19409: LD_VAR 0 1
19413: PUSH
19414: LD_INT 1
19416: PPUSH
19417: LD_VAR 0 1
19421: PPUSH
19422: CALL_OW 12
19426: ARRAY
19427: PPUSH
19428: LD_INT 1
19430: PPUSH
19431: CALL_OW 234
// end ;
19435: PPOPN 1
19437: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19438: LD_EXP 23
19442: PUSH
19443: LD_EXP 71
19447: AND
19448: IFFALSE 19560
19450: GO 19452
19452: DISABLE
19453: LD_INT 0
19455: PPUSH
19456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19457: LD_ADDR_VAR 0 2
19461: PUSH
19462: LD_INT 22
19464: PUSH
19465: LD_OWVAR 2
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 2
19476: PUSH
19477: LD_INT 30
19479: PUSH
19480: LD_INT 27
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 30
19489: PUSH
19490: LD_INT 26
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 30
19499: PUSH
19500: LD_INT 28
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PPUSH
19517: CALL_OW 69
19521: ST_TO_ADDR
// if not tmp then
19522: LD_VAR 0 2
19526: NOT
19527: IFFALSE 19531
// exit ;
19529: GO 19560
// for i in tmp do
19531: LD_ADDR_VAR 0 1
19535: PUSH
19536: LD_VAR 0 2
19540: PUSH
19541: FOR_IN
19542: IFFALSE 19558
// SetLives ( i , 1 ) ;
19544: LD_VAR 0 1
19548: PPUSH
19549: LD_INT 1
19551: PPUSH
19552: CALL_OW 234
19556: GO 19541
19558: POP
19559: POP
// end ;
19560: PPOPN 2
19562: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19563: LD_EXP 23
19567: PUSH
19568: LD_EXP 72
19572: AND
19573: IFFALSE 19860
19575: GO 19577
19577: DISABLE
19578: LD_INT 0
19580: PPUSH
19581: PPUSH
19582: PPUSH
// begin i := rand ( 1 , 7 ) ;
19583: LD_ADDR_VAR 0 1
19587: PUSH
19588: LD_INT 1
19590: PPUSH
19591: LD_INT 7
19593: PPUSH
19594: CALL_OW 12
19598: ST_TO_ADDR
// case i of 1 :
19599: LD_VAR 0 1
19603: PUSH
19604: LD_INT 1
19606: DOUBLE
19607: EQUAL
19608: IFTRUE 19612
19610: GO 19622
19612: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19613: LD_STRING earthquake(getX(game), 0, 32)
19615: PPUSH
19616: CALL_OW 559
19620: GO 19860
19622: LD_INT 2
19624: DOUBLE
19625: EQUAL
19626: IFTRUE 19630
19628: GO 19644
19630: POP
// begin ToLua ( displayStucuk(); ) ;
19631: LD_STRING displayStucuk();
19633: PPUSH
19634: CALL_OW 559
// ResetFog ;
19638: CALL_OW 335
// end ; 3 :
19642: GO 19860
19644: LD_INT 3
19646: DOUBLE
19647: EQUAL
19648: IFTRUE 19652
19650: GO 19756
19652: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19653: LD_ADDR_VAR 0 2
19657: PUSH
19658: LD_INT 22
19660: PUSH
19661: LD_OWVAR 2
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 25
19672: PUSH
19673: LD_INT 1
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PPUSH
19684: CALL_OW 69
19688: ST_TO_ADDR
// if not tmp then
19689: LD_VAR 0 2
19693: NOT
19694: IFFALSE 19698
// exit ;
19696: GO 19860
// un := tmp [ rand ( 1 , tmp ) ] ;
19698: LD_ADDR_VAR 0 3
19702: PUSH
19703: LD_VAR 0 2
19707: PUSH
19708: LD_INT 1
19710: PPUSH
19711: LD_VAR 0 2
19715: PPUSH
19716: CALL_OW 12
19720: ARRAY
19721: ST_TO_ADDR
// if Crawls ( un ) then
19722: LD_VAR 0 3
19726: PPUSH
19727: CALL_OW 318
19731: IFFALSE 19742
// ComWalk ( un ) ;
19733: LD_VAR 0 3
19737: PPUSH
19738: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19742: LD_VAR 0 3
19746: PPUSH
19747: LD_INT 8
19749: PPUSH
19750: CALL_OW 336
// end ; 4 :
19754: GO 19860
19756: LD_INT 4
19758: DOUBLE
19759: EQUAL
19760: IFTRUE 19764
19762: GO 19838
19764: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19765: LD_ADDR_VAR 0 2
19769: PUSH
19770: LD_INT 22
19772: PUSH
19773: LD_OWVAR 2
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 30
19784: PUSH
19785: LD_INT 29
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PPUSH
19796: CALL_OW 69
19800: ST_TO_ADDR
// if not tmp then
19801: LD_VAR 0 2
19805: NOT
19806: IFFALSE 19810
// exit ;
19808: GO 19860
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19810: LD_VAR 0 2
19814: PUSH
19815: LD_INT 1
19817: ARRAY
19818: PPUSH
19819: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19823: LD_VAR 0 2
19827: PUSH
19828: LD_INT 1
19830: ARRAY
19831: PPUSH
19832: CALL_OW 65
// end ; 5 .. 7 :
19836: GO 19860
19838: LD_INT 5
19840: DOUBLE
19841: GREATEREQUAL
19842: IFFALSE 19850
19844: LD_INT 7
19846: DOUBLE
19847: LESSEQUAL
19848: IFTRUE 19852
19850: GO 19859
19852: POP
// StreamSibBomb ; end ;
19853: CALL 16097 0 0
19857: GO 19860
19859: POP
// end ;
19860: PPOPN 3
19862: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19863: LD_EXP 23
19867: PUSH
19868: LD_EXP 73
19872: AND
19873: IFFALSE 20029
19875: GO 19877
19877: DISABLE
19878: LD_INT 0
19880: PPUSH
19881: PPUSH
19882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19883: LD_ADDR_VAR 0 2
19887: PUSH
19888: LD_INT 81
19890: PUSH
19891: LD_OWVAR 2
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: LD_INT 21
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 21
19915: PUSH
19916: LD_INT 2
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PPUSH
19932: CALL_OW 69
19936: ST_TO_ADDR
// if not tmp then
19937: LD_VAR 0 2
19941: NOT
19942: IFFALSE 19946
// exit ;
19944: GO 20029
// p := 0 ;
19946: LD_ADDR_VAR 0 3
19950: PUSH
19951: LD_INT 0
19953: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19954: LD_INT 35
19956: PPUSH
19957: CALL_OW 67
// p := p + 1 ;
19961: LD_ADDR_VAR 0 3
19965: PUSH
19966: LD_VAR 0 3
19970: PUSH
19971: LD_INT 1
19973: PLUS
19974: ST_TO_ADDR
// for i in tmp do
19975: LD_ADDR_VAR 0 1
19979: PUSH
19980: LD_VAR 0 2
19984: PUSH
19985: FOR_IN
19986: IFFALSE 20017
// if GetLives ( i ) < 1000 then
19988: LD_VAR 0 1
19992: PPUSH
19993: CALL_OW 256
19997: PUSH
19998: LD_INT 1000
20000: LESS
20001: IFFALSE 20015
// SetLives ( i , 1000 ) ;
20003: LD_VAR 0 1
20007: PPUSH
20008: LD_INT 1000
20010: PPUSH
20011: CALL_OW 234
20015: GO 19985
20017: POP
20018: POP
// until p > 20 ;
20019: LD_VAR 0 3
20023: PUSH
20024: LD_INT 20
20026: GREATER
20027: IFFALSE 19954
// end ;
20029: PPOPN 3
20031: END
// every 0 0$1 trigger StreamModeActive and sTime do
20032: LD_EXP 23
20036: PUSH
20037: LD_EXP 74
20041: AND
20042: IFFALSE 20077
20044: GO 20046
20046: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20047: LD_INT 28
20049: PPUSH
20050: LD_OWVAR 2
20054: PPUSH
20055: LD_INT 2
20057: PPUSH
20058: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20062: LD_INT 30
20064: PPUSH
20065: LD_OWVAR 2
20069: PPUSH
20070: LD_INT 2
20072: PPUSH
20073: CALL_OW 322
// end ;
20077: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20078: LD_EXP 23
20082: PUSH
20083: LD_EXP 75
20087: AND
20088: IFFALSE 20209
20090: GO 20092
20092: DISABLE
20093: LD_INT 0
20095: PPUSH
20096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20097: LD_ADDR_VAR 0 2
20101: PUSH
20102: LD_INT 22
20104: PUSH
20105: LD_OWVAR 2
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 21
20116: PUSH
20117: LD_INT 1
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 3
20126: PUSH
20127: LD_INT 23
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: PPUSH
20146: CALL_OW 69
20150: ST_TO_ADDR
// if not tmp then
20151: LD_VAR 0 2
20155: NOT
20156: IFFALSE 20160
// exit ;
20158: GO 20209
// for i in tmp do
20160: LD_ADDR_VAR 0 1
20164: PUSH
20165: LD_VAR 0 2
20169: PUSH
20170: FOR_IN
20171: IFFALSE 20207
// begin if Crawls ( i ) then
20173: LD_VAR 0 1
20177: PPUSH
20178: CALL_OW 318
20182: IFFALSE 20193
// ComWalk ( i ) ;
20184: LD_VAR 0 1
20188: PPUSH
20189: CALL_OW 138
// SetClass ( i , 2 ) ;
20193: LD_VAR 0 1
20197: PPUSH
20198: LD_INT 2
20200: PPUSH
20201: CALL_OW 336
// end ;
20205: GO 20170
20207: POP
20208: POP
// end ;
20209: PPOPN 2
20211: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20212: LD_EXP 23
20216: PUSH
20217: LD_EXP 76
20221: AND
20222: IFFALSE 20510
20224: GO 20226
20226: DISABLE
20227: LD_INT 0
20229: PPUSH
20230: PPUSH
20231: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20232: LD_OWVAR 2
20236: PPUSH
20237: LD_INT 9
20239: PPUSH
20240: LD_INT 1
20242: PPUSH
20243: LD_INT 1
20245: PPUSH
20246: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20250: LD_INT 9
20252: PPUSH
20253: LD_OWVAR 2
20257: PPUSH
20258: CALL_OW 343
// uc_side := 9 ;
20262: LD_ADDR_OWVAR 20
20266: PUSH
20267: LD_INT 9
20269: ST_TO_ADDR
// uc_nation := 2 ;
20270: LD_ADDR_OWVAR 21
20274: PUSH
20275: LD_INT 2
20277: ST_TO_ADDR
// hc_name := Dark Warrior ;
20278: LD_ADDR_OWVAR 26
20282: PUSH
20283: LD_STRING Dark Warrior
20285: ST_TO_ADDR
// hc_gallery :=  ;
20286: LD_ADDR_OWVAR 33
20290: PUSH
20291: LD_STRING 
20293: ST_TO_ADDR
// hc_noskilllimit := true ;
20294: LD_ADDR_OWVAR 76
20298: PUSH
20299: LD_INT 1
20301: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20302: LD_ADDR_OWVAR 31
20306: PUSH
20307: LD_INT 30
20309: PUSH
20310: LD_INT 30
20312: PUSH
20313: LD_INT 30
20315: PUSH
20316: LD_INT 30
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: ST_TO_ADDR
// un := CreateHuman ;
20325: LD_ADDR_VAR 0 3
20329: PUSH
20330: CALL_OW 44
20334: ST_TO_ADDR
// hc_noskilllimit := false ;
20335: LD_ADDR_OWVAR 76
20339: PUSH
20340: LD_INT 0
20342: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20343: LD_VAR 0 3
20347: PPUSH
20348: LD_INT 1
20350: PPUSH
20351: CALL_OW 51
// ToLua ( playRanger() ) ;
20355: LD_STRING playRanger()
20357: PPUSH
20358: CALL_OW 559
// p := 0 ;
20362: LD_ADDR_VAR 0 2
20366: PUSH
20367: LD_INT 0
20369: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20370: LD_INT 35
20372: PPUSH
20373: CALL_OW 67
// p := p + 1 ;
20377: LD_ADDR_VAR 0 2
20381: PUSH
20382: LD_VAR 0 2
20386: PUSH
20387: LD_INT 1
20389: PLUS
20390: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20391: LD_VAR 0 3
20395: PPUSH
20396: CALL_OW 256
20400: PUSH
20401: LD_INT 1000
20403: LESS
20404: IFFALSE 20418
// SetLives ( un , 1000 ) ;
20406: LD_VAR 0 3
20410: PPUSH
20411: LD_INT 1000
20413: PPUSH
20414: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20418: LD_VAR 0 3
20422: PPUSH
20423: LD_INT 81
20425: PUSH
20426: LD_OWVAR 2
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 91
20437: PUSH
20438: LD_VAR 0 3
20442: PUSH
20443: LD_INT 30
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL_OW 69
20459: PPUSH
20460: LD_VAR 0 3
20464: PPUSH
20465: CALL_OW 74
20469: PPUSH
20470: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20474: LD_VAR 0 2
20478: PUSH
20479: LD_INT 80
20481: GREATER
20482: PUSH
20483: LD_VAR 0 3
20487: PPUSH
20488: CALL_OW 301
20492: OR
20493: IFFALSE 20370
// if un then
20495: LD_VAR 0 3
20499: IFFALSE 20510
// RemoveUnit ( un ) ;
20501: LD_VAR 0 3
20505: PPUSH
20506: CALL_OW 64
// end ;
20510: PPOPN 3
20512: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20513: LD_EXP 77
20517: IFFALSE 20633
20519: GO 20521
20521: DISABLE
20522: LD_INT 0
20524: PPUSH
20525: PPUSH
20526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20527: LD_ADDR_VAR 0 2
20531: PUSH
20532: LD_INT 81
20534: PUSH
20535: LD_OWVAR 2
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 21
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PPUSH
20558: CALL_OW 69
20562: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20563: LD_STRING playComputer()
20565: PPUSH
20566: CALL_OW 559
// if not tmp then
20570: LD_VAR 0 2
20574: NOT
20575: IFFALSE 20579
// exit ;
20577: GO 20633
// for i in tmp do
20579: LD_ADDR_VAR 0 1
20583: PUSH
20584: LD_VAR 0 2
20588: PUSH
20589: FOR_IN
20590: IFFALSE 20631
// for j := 1 to 4 do
20592: LD_ADDR_VAR 0 3
20596: PUSH
20597: DOUBLE
20598: LD_INT 1
20600: DEC
20601: ST_TO_ADDR
20602: LD_INT 4
20604: PUSH
20605: FOR_TO
20606: IFFALSE 20627
// SetSkill ( i , j , 10 ) ;
20608: LD_VAR 0 1
20612: PPUSH
20613: LD_VAR 0 3
20617: PPUSH
20618: LD_INT 10
20620: PPUSH
20621: CALL_OW 237
20625: GO 20605
20627: POP
20628: POP
20629: GO 20589
20631: POP
20632: POP
// end ;
20633: PPOPN 3
20635: END
// every 0 0$1 trigger s30 do var i , tmp ;
20636: LD_EXP 78
20640: IFFALSE 20709
20642: GO 20644
20644: DISABLE
20645: LD_INT 0
20647: PPUSH
20648: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20649: LD_ADDR_VAR 0 2
20653: PUSH
20654: LD_INT 22
20656: PUSH
20657: LD_OWVAR 2
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PPUSH
20666: CALL_OW 69
20670: ST_TO_ADDR
// if not tmp then
20671: LD_VAR 0 2
20675: NOT
20676: IFFALSE 20680
// exit ;
20678: GO 20709
// for i in tmp do
20680: LD_ADDR_VAR 0 1
20684: PUSH
20685: LD_VAR 0 2
20689: PUSH
20690: FOR_IN
20691: IFFALSE 20707
// SetLives ( i , 300 ) ;
20693: LD_VAR 0 1
20697: PPUSH
20698: LD_INT 300
20700: PPUSH
20701: CALL_OW 234
20705: GO 20690
20707: POP
20708: POP
// end ;
20709: PPOPN 2
20711: END
// every 0 0$1 trigger s60 do var i , tmp ;
20712: LD_EXP 79
20716: IFFALSE 20785
20718: GO 20720
20720: DISABLE
20721: LD_INT 0
20723: PPUSH
20724: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20725: LD_ADDR_VAR 0 2
20729: PUSH
20730: LD_INT 22
20732: PUSH
20733: LD_OWVAR 2
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PPUSH
20742: CALL_OW 69
20746: ST_TO_ADDR
// if not tmp then
20747: LD_VAR 0 2
20751: NOT
20752: IFFALSE 20756
// exit ;
20754: GO 20785
// for i in tmp do
20756: LD_ADDR_VAR 0 1
20760: PUSH
20761: LD_VAR 0 2
20765: PUSH
20766: FOR_IN
20767: IFFALSE 20783
// SetLives ( i , 600 ) ;
20769: LD_VAR 0 1
20773: PPUSH
20774: LD_INT 600
20776: PPUSH
20777: CALL_OW 234
20781: GO 20766
20783: POP
20784: POP
// end ;
20785: PPOPN 2
20787: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20788: LD_INT 0
20790: PPUSH
// case cmd of 301 :
20791: LD_VAR 0 1
20795: PUSH
20796: LD_INT 301
20798: DOUBLE
20799: EQUAL
20800: IFTRUE 20804
20802: GO 20836
20804: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20805: LD_VAR 0 6
20809: PPUSH
20810: LD_VAR 0 7
20814: PPUSH
20815: LD_VAR 0 8
20819: PPUSH
20820: LD_VAR 0 4
20824: PPUSH
20825: LD_VAR 0 5
20829: PPUSH
20830: CALL 22045 0 5
20834: GO 20957
20836: LD_INT 302
20838: DOUBLE
20839: EQUAL
20840: IFTRUE 20844
20842: GO 20881
20844: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20845: LD_VAR 0 6
20849: PPUSH
20850: LD_VAR 0 7
20854: PPUSH
20855: LD_VAR 0 8
20859: PPUSH
20860: LD_VAR 0 9
20864: PPUSH
20865: LD_VAR 0 4
20869: PPUSH
20870: LD_VAR 0 5
20874: PPUSH
20875: CALL 22136 0 6
20879: GO 20957
20881: LD_INT 303
20883: DOUBLE
20884: EQUAL
20885: IFTRUE 20889
20887: GO 20926
20889: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20890: LD_VAR 0 6
20894: PPUSH
20895: LD_VAR 0 7
20899: PPUSH
20900: LD_VAR 0 8
20904: PPUSH
20905: LD_VAR 0 9
20909: PPUSH
20910: LD_VAR 0 4
20914: PPUSH
20915: LD_VAR 0 5
20919: PPUSH
20920: CALL 20962 0 6
20924: GO 20957
20926: LD_INT 304
20928: DOUBLE
20929: EQUAL
20930: IFTRUE 20934
20932: GO 20956
20934: POP
// hHackTeleport ( unit , x , y ) ; end ;
20935: LD_VAR 0 2
20939: PPUSH
20940: LD_VAR 0 4
20944: PPUSH
20945: LD_VAR 0 5
20949: PPUSH
20950: CALL 22729 0 3
20954: GO 20957
20956: POP
// end ;
20957: LD_VAR 0 12
20961: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20962: LD_INT 0
20964: PPUSH
20965: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20966: LD_VAR 0 1
20970: PUSH
20971: LD_INT 1
20973: LESS
20974: PUSH
20975: LD_VAR 0 1
20979: PUSH
20980: LD_INT 3
20982: GREATER
20983: OR
20984: PUSH
20985: LD_VAR 0 5
20989: PPUSH
20990: LD_VAR 0 6
20994: PPUSH
20995: CALL_OW 428
20999: OR
21000: IFFALSE 21004
// exit ;
21002: GO 21732
// uc_side := your_side ;
21004: LD_ADDR_OWVAR 20
21008: PUSH
21009: LD_OWVAR 2
21013: ST_TO_ADDR
// uc_nation := nation ;
21014: LD_ADDR_OWVAR 21
21018: PUSH
21019: LD_VAR 0 1
21023: ST_TO_ADDR
// bc_level = 1 ;
21024: LD_ADDR_OWVAR 43
21028: PUSH
21029: LD_INT 1
21031: ST_TO_ADDR
// case btype of 1 :
21032: LD_VAR 0 2
21036: PUSH
21037: LD_INT 1
21039: DOUBLE
21040: EQUAL
21041: IFTRUE 21045
21043: GO 21056
21045: POP
// bc_type := b_depot ; 2 :
21046: LD_ADDR_OWVAR 42
21050: PUSH
21051: LD_INT 0
21053: ST_TO_ADDR
21054: GO 21676
21056: LD_INT 2
21058: DOUBLE
21059: EQUAL
21060: IFTRUE 21064
21062: GO 21075
21064: POP
// bc_type := b_warehouse ; 3 :
21065: LD_ADDR_OWVAR 42
21069: PUSH
21070: LD_INT 1
21072: ST_TO_ADDR
21073: GO 21676
21075: LD_INT 3
21077: DOUBLE
21078: EQUAL
21079: IFTRUE 21083
21081: GO 21094
21083: POP
// bc_type := b_lab ; 4 .. 9 :
21084: LD_ADDR_OWVAR 42
21088: PUSH
21089: LD_INT 6
21091: ST_TO_ADDR
21092: GO 21676
21094: LD_INT 4
21096: DOUBLE
21097: GREATEREQUAL
21098: IFFALSE 21106
21100: LD_INT 9
21102: DOUBLE
21103: LESSEQUAL
21104: IFTRUE 21108
21106: GO 21168
21108: POP
// begin bc_type := b_lab_half ;
21109: LD_ADDR_OWVAR 42
21113: PUSH
21114: LD_INT 7
21116: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21117: LD_ADDR_OWVAR 44
21121: PUSH
21122: LD_INT 10
21124: PUSH
21125: LD_INT 11
21127: PUSH
21128: LD_INT 12
21130: PUSH
21131: LD_INT 15
21133: PUSH
21134: LD_INT 14
21136: PUSH
21137: LD_INT 13
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: PUSH
21148: LD_VAR 0 2
21152: PUSH
21153: LD_INT 3
21155: MINUS
21156: ARRAY
21157: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
21158: LD_ADDR_OWVAR 45
21162: PUSH
21163: LD_INT 9
21165: ST_TO_ADDR
// end ; 10 .. 13 :
21166: GO 21676
21168: LD_INT 10
21170: DOUBLE
21171: GREATEREQUAL
21172: IFFALSE 21180
21174: LD_INT 13
21176: DOUBLE
21177: LESSEQUAL
21178: IFTRUE 21182
21180: GO 21259
21182: POP
// begin bc_type := b_lab_full ;
21183: LD_ADDR_OWVAR 42
21187: PUSH
21188: LD_INT 8
21190: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21191: LD_ADDR_OWVAR 44
21195: PUSH
21196: LD_INT 10
21198: PUSH
21199: LD_INT 12
21201: PUSH
21202: LD_INT 14
21204: PUSH
21205: LD_INT 13
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: PUSH
21214: LD_VAR 0 2
21218: PUSH
21219: LD_INT 9
21221: MINUS
21222: ARRAY
21223: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21224: LD_ADDR_OWVAR 45
21228: PUSH
21229: LD_INT 11
21231: PUSH
21232: LD_INT 15
21234: PUSH
21235: LD_INT 12
21237: PUSH
21238: LD_INT 15
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: PUSH
21247: LD_VAR 0 2
21251: PUSH
21252: LD_INT 9
21254: MINUS
21255: ARRAY
21256: ST_TO_ADDR
// end ; 14 :
21257: GO 21676
21259: LD_INT 14
21261: DOUBLE
21262: EQUAL
21263: IFTRUE 21267
21265: GO 21278
21267: POP
// bc_type := b_workshop ; 15 :
21268: LD_ADDR_OWVAR 42
21272: PUSH
21273: LD_INT 2
21275: ST_TO_ADDR
21276: GO 21676
21278: LD_INT 15
21280: DOUBLE
21281: EQUAL
21282: IFTRUE 21286
21284: GO 21297
21286: POP
// bc_type := b_factory ; 16 :
21287: LD_ADDR_OWVAR 42
21291: PUSH
21292: LD_INT 3
21294: ST_TO_ADDR
21295: GO 21676
21297: LD_INT 16
21299: DOUBLE
21300: EQUAL
21301: IFTRUE 21305
21303: GO 21316
21305: POP
// bc_type := b_ext_gun ; 17 :
21306: LD_ADDR_OWVAR 42
21310: PUSH
21311: LD_INT 17
21313: ST_TO_ADDR
21314: GO 21676
21316: LD_INT 17
21318: DOUBLE
21319: EQUAL
21320: IFTRUE 21324
21322: GO 21352
21324: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21325: LD_ADDR_OWVAR 42
21329: PUSH
21330: LD_INT 19
21332: PUSH
21333: LD_INT 23
21335: PUSH
21336: LD_INT 19
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: LIST
21343: PUSH
21344: LD_VAR 0 1
21348: ARRAY
21349: ST_TO_ADDR
21350: GO 21676
21352: LD_INT 18
21354: DOUBLE
21355: EQUAL
21356: IFTRUE 21360
21358: GO 21371
21360: POP
// bc_type := b_ext_radar ; 19 :
21361: LD_ADDR_OWVAR 42
21365: PUSH
21366: LD_INT 20
21368: ST_TO_ADDR
21369: GO 21676
21371: LD_INT 19
21373: DOUBLE
21374: EQUAL
21375: IFTRUE 21379
21377: GO 21390
21379: POP
// bc_type := b_ext_radio ; 20 :
21380: LD_ADDR_OWVAR 42
21384: PUSH
21385: LD_INT 22
21387: ST_TO_ADDR
21388: GO 21676
21390: LD_INT 20
21392: DOUBLE
21393: EQUAL
21394: IFTRUE 21398
21396: GO 21409
21398: POP
// bc_type := b_ext_siberium ; 21 :
21399: LD_ADDR_OWVAR 42
21403: PUSH
21404: LD_INT 21
21406: ST_TO_ADDR
21407: GO 21676
21409: LD_INT 21
21411: DOUBLE
21412: EQUAL
21413: IFTRUE 21417
21415: GO 21428
21417: POP
// bc_type := b_ext_computer ; 22 :
21418: LD_ADDR_OWVAR 42
21422: PUSH
21423: LD_INT 24
21425: ST_TO_ADDR
21426: GO 21676
21428: LD_INT 22
21430: DOUBLE
21431: EQUAL
21432: IFTRUE 21436
21434: GO 21447
21436: POP
// bc_type := b_ext_track ; 23 :
21437: LD_ADDR_OWVAR 42
21441: PUSH
21442: LD_INT 16
21444: ST_TO_ADDR
21445: GO 21676
21447: LD_INT 23
21449: DOUBLE
21450: EQUAL
21451: IFTRUE 21455
21453: GO 21466
21455: POP
// bc_type := b_ext_laser ; 24 :
21456: LD_ADDR_OWVAR 42
21460: PUSH
21461: LD_INT 25
21463: ST_TO_ADDR
21464: GO 21676
21466: LD_INT 24
21468: DOUBLE
21469: EQUAL
21470: IFTRUE 21474
21472: GO 21485
21474: POP
// bc_type := b_control_tower ; 25 :
21475: LD_ADDR_OWVAR 42
21479: PUSH
21480: LD_INT 36
21482: ST_TO_ADDR
21483: GO 21676
21485: LD_INT 25
21487: DOUBLE
21488: EQUAL
21489: IFTRUE 21493
21491: GO 21504
21493: POP
// bc_type := b_breastwork ; 26 :
21494: LD_ADDR_OWVAR 42
21498: PUSH
21499: LD_INT 31
21501: ST_TO_ADDR
21502: GO 21676
21504: LD_INT 26
21506: DOUBLE
21507: EQUAL
21508: IFTRUE 21512
21510: GO 21523
21512: POP
// bc_type := b_bunker ; 27 :
21513: LD_ADDR_OWVAR 42
21517: PUSH
21518: LD_INT 32
21520: ST_TO_ADDR
21521: GO 21676
21523: LD_INT 27
21525: DOUBLE
21526: EQUAL
21527: IFTRUE 21531
21529: GO 21542
21531: POP
// bc_type := b_turret ; 28 :
21532: LD_ADDR_OWVAR 42
21536: PUSH
21537: LD_INT 33
21539: ST_TO_ADDR
21540: GO 21676
21542: LD_INT 28
21544: DOUBLE
21545: EQUAL
21546: IFTRUE 21550
21548: GO 21561
21550: POP
// bc_type := b_armoury ; 29 :
21551: LD_ADDR_OWVAR 42
21555: PUSH
21556: LD_INT 4
21558: ST_TO_ADDR
21559: GO 21676
21561: LD_INT 29
21563: DOUBLE
21564: EQUAL
21565: IFTRUE 21569
21567: GO 21580
21569: POP
// bc_type := b_barracks ; 30 :
21570: LD_ADDR_OWVAR 42
21574: PUSH
21575: LD_INT 5
21577: ST_TO_ADDR
21578: GO 21676
21580: LD_INT 30
21582: DOUBLE
21583: EQUAL
21584: IFTRUE 21588
21586: GO 21599
21588: POP
// bc_type := b_solar_power ; 31 :
21589: LD_ADDR_OWVAR 42
21593: PUSH
21594: LD_INT 27
21596: ST_TO_ADDR
21597: GO 21676
21599: LD_INT 31
21601: DOUBLE
21602: EQUAL
21603: IFTRUE 21607
21605: GO 21618
21607: POP
// bc_type := b_oil_power ; 32 :
21608: LD_ADDR_OWVAR 42
21612: PUSH
21613: LD_INT 26
21615: ST_TO_ADDR
21616: GO 21676
21618: LD_INT 32
21620: DOUBLE
21621: EQUAL
21622: IFTRUE 21626
21624: GO 21637
21626: POP
// bc_type := b_siberite_power ; 33 :
21627: LD_ADDR_OWVAR 42
21631: PUSH
21632: LD_INT 28
21634: ST_TO_ADDR
21635: GO 21676
21637: LD_INT 33
21639: DOUBLE
21640: EQUAL
21641: IFTRUE 21645
21643: GO 21656
21645: POP
// bc_type := b_oil_mine ; 34 :
21646: LD_ADDR_OWVAR 42
21650: PUSH
21651: LD_INT 29
21653: ST_TO_ADDR
21654: GO 21676
21656: LD_INT 34
21658: DOUBLE
21659: EQUAL
21660: IFTRUE 21664
21662: GO 21675
21664: POP
// bc_type := b_siberite_mine ; end ;
21665: LD_ADDR_OWVAR 42
21669: PUSH
21670: LD_INT 30
21672: ST_TO_ADDR
21673: GO 21676
21675: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21676: LD_ADDR_VAR 0 8
21680: PUSH
21681: LD_VAR 0 5
21685: PPUSH
21686: LD_VAR 0 6
21690: PPUSH
21691: LD_VAR 0 3
21695: PPUSH
21696: CALL_OW 47
21700: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21701: LD_OWVAR 42
21705: PUSH
21706: LD_INT 32
21708: PUSH
21709: LD_INT 33
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: IN
21716: IFFALSE 21732
// PlaceWeaponTurret ( b , weapon ) ;
21718: LD_VAR 0 8
21722: PPUSH
21723: LD_VAR 0 4
21727: PPUSH
21728: CALL_OW 431
// end ;
21732: LD_VAR 0 7
21736: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21737: LD_INT 0
21739: PPUSH
21740: PPUSH
21741: PPUSH
21742: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21743: LD_ADDR_VAR 0 4
21747: PUSH
21748: LD_INT 22
21750: PUSH
21751: LD_OWVAR 2
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 2
21762: PUSH
21763: LD_INT 30
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 30
21775: PUSH
21776: LD_INT 1
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PPUSH
21792: CALL_OW 69
21796: ST_TO_ADDR
// if not tmp then
21797: LD_VAR 0 4
21801: NOT
21802: IFFALSE 21806
// exit ;
21804: GO 21865
// for i in tmp do
21806: LD_ADDR_VAR 0 2
21810: PUSH
21811: LD_VAR 0 4
21815: PUSH
21816: FOR_IN
21817: IFFALSE 21863
// for j = 1 to 3 do
21819: LD_ADDR_VAR 0 3
21823: PUSH
21824: DOUBLE
21825: LD_INT 1
21827: DEC
21828: ST_TO_ADDR
21829: LD_INT 3
21831: PUSH
21832: FOR_TO
21833: IFFALSE 21859
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21835: LD_VAR 0 2
21839: PPUSH
21840: CALL_OW 274
21844: PPUSH
21845: LD_VAR 0 3
21849: PPUSH
21850: LD_INT 99999
21852: PPUSH
21853: CALL_OW 277
21857: GO 21832
21859: POP
21860: POP
21861: GO 21816
21863: POP
21864: POP
// end ;
21865: LD_VAR 0 1
21869: RET
// export function hHackSetLevel10 ; var i , j ; begin
21870: LD_INT 0
21872: PPUSH
21873: PPUSH
21874: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21875: LD_ADDR_VAR 0 2
21879: PUSH
21880: LD_INT 21
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PPUSH
21890: CALL_OW 69
21894: PUSH
21895: FOR_IN
21896: IFFALSE 21948
// if IsSelected ( i ) then
21898: LD_VAR 0 2
21902: PPUSH
21903: CALL_OW 306
21907: IFFALSE 21946
// begin for j := 1 to 4 do
21909: LD_ADDR_VAR 0 3
21913: PUSH
21914: DOUBLE
21915: LD_INT 1
21917: DEC
21918: ST_TO_ADDR
21919: LD_INT 4
21921: PUSH
21922: FOR_TO
21923: IFFALSE 21944
// SetSkill ( i , j , 10 ) ;
21925: LD_VAR 0 2
21929: PPUSH
21930: LD_VAR 0 3
21934: PPUSH
21935: LD_INT 10
21937: PPUSH
21938: CALL_OW 237
21942: GO 21922
21944: POP
21945: POP
// end ;
21946: GO 21895
21948: POP
21949: POP
// end ;
21950: LD_VAR 0 1
21954: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21955: LD_INT 0
21957: PPUSH
21958: PPUSH
21959: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21960: LD_ADDR_VAR 0 2
21964: PUSH
21965: LD_INT 22
21967: PUSH
21968: LD_OWVAR 2
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 21
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PPUSH
21991: CALL_OW 69
21995: PUSH
21996: FOR_IN
21997: IFFALSE 22038
// begin for j := 1 to 4 do
21999: LD_ADDR_VAR 0 3
22003: PUSH
22004: DOUBLE
22005: LD_INT 1
22007: DEC
22008: ST_TO_ADDR
22009: LD_INT 4
22011: PUSH
22012: FOR_TO
22013: IFFALSE 22034
// SetSkill ( i , j , 10 ) ;
22015: LD_VAR 0 2
22019: PPUSH
22020: LD_VAR 0 3
22024: PPUSH
22025: LD_INT 10
22027: PPUSH
22028: CALL_OW 237
22032: GO 22012
22034: POP
22035: POP
// end ;
22036: GO 21996
22038: POP
22039: POP
// end ;
22040: LD_VAR 0 1
22044: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22045: LD_INT 0
22047: PPUSH
// uc_side := your_side ;
22048: LD_ADDR_OWVAR 20
22052: PUSH
22053: LD_OWVAR 2
22057: ST_TO_ADDR
// uc_nation := nation ;
22058: LD_ADDR_OWVAR 21
22062: PUSH
22063: LD_VAR 0 1
22067: ST_TO_ADDR
// InitHc ;
22068: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22072: LD_INT 0
22074: PPUSH
22075: LD_VAR 0 2
22079: PPUSH
22080: LD_VAR 0 3
22084: PPUSH
22085: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22089: LD_VAR 0 4
22093: PPUSH
22094: LD_VAR 0 5
22098: PPUSH
22099: CALL_OW 428
22103: PUSH
22104: LD_INT 0
22106: EQUAL
22107: IFFALSE 22131
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22109: CALL_OW 44
22113: PPUSH
22114: LD_VAR 0 4
22118: PPUSH
22119: LD_VAR 0 5
22123: PPUSH
22124: LD_INT 1
22126: PPUSH
22127: CALL_OW 48
// end ;
22131: LD_VAR 0 6
22135: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22136: LD_INT 0
22138: PPUSH
22139: PPUSH
// uc_side := your_side ;
22140: LD_ADDR_OWVAR 20
22144: PUSH
22145: LD_OWVAR 2
22149: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22150: LD_VAR 0 1
22154: PUSH
22155: LD_INT 1
22157: PUSH
22158: LD_INT 2
22160: PUSH
22161: LD_INT 3
22163: PUSH
22164: LD_INT 4
22166: PUSH
22167: LD_INT 5
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: IN
22177: IFFALSE 22189
// uc_nation := nation_american else
22179: LD_ADDR_OWVAR 21
22183: PUSH
22184: LD_INT 1
22186: ST_TO_ADDR
22187: GO 22232
// if chassis in [ 11 , 12 , 13 , 14 ] then
22189: LD_VAR 0 1
22193: PUSH
22194: LD_INT 11
22196: PUSH
22197: LD_INT 12
22199: PUSH
22200: LD_INT 13
22202: PUSH
22203: LD_INT 14
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: IN
22212: IFFALSE 22224
// uc_nation := nation_arabian else
22214: LD_ADDR_OWVAR 21
22218: PUSH
22219: LD_INT 2
22221: ST_TO_ADDR
22222: GO 22232
// uc_nation := nation_russian ;
22224: LD_ADDR_OWVAR 21
22228: PUSH
22229: LD_INT 3
22231: ST_TO_ADDR
// vc_chassis := chassis ;
22232: LD_ADDR_OWVAR 37
22236: PUSH
22237: LD_VAR 0 1
22241: ST_TO_ADDR
// vc_engine := engine ;
22242: LD_ADDR_OWVAR 39
22246: PUSH
22247: LD_VAR 0 2
22251: ST_TO_ADDR
// vc_control := control ;
22252: LD_ADDR_OWVAR 38
22256: PUSH
22257: LD_VAR 0 3
22261: ST_TO_ADDR
// vc_weapon := weapon ;
22262: LD_ADDR_OWVAR 40
22266: PUSH
22267: LD_VAR 0 4
22271: ST_TO_ADDR
// un := CreateVehicle ;
22272: LD_ADDR_VAR 0 8
22276: PUSH
22277: CALL_OW 45
22281: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22282: LD_VAR 0 8
22286: PPUSH
22287: LD_INT 0
22289: PPUSH
22290: LD_INT 5
22292: PPUSH
22293: CALL_OW 12
22297: PPUSH
22298: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22302: LD_VAR 0 8
22306: PPUSH
22307: LD_VAR 0 5
22311: PPUSH
22312: LD_VAR 0 6
22316: PPUSH
22317: LD_INT 1
22319: PPUSH
22320: CALL_OW 48
// end ;
22324: LD_VAR 0 7
22328: RET
// export hInvincible ; every 1 do
22329: GO 22331
22331: DISABLE
// hInvincible := [ ] ;
22332: LD_ADDR_EXP 80
22336: PUSH
22337: EMPTY
22338: ST_TO_ADDR
22339: END
// every 10 do var i ;
22340: GO 22342
22342: DISABLE
22343: LD_INT 0
22345: PPUSH
// begin enable ;
22346: ENABLE
// if not hInvincible then
22347: LD_EXP 80
22351: NOT
22352: IFFALSE 22356
// exit ;
22354: GO 22400
// for i in hInvincible do
22356: LD_ADDR_VAR 0 1
22360: PUSH
22361: LD_EXP 80
22365: PUSH
22366: FOR_IN
22367: IFFALSE 22398
// if GetLives ( i ) < 1000 then
22369: LD_VAR 0 1
22373: PPUSH
22374: CALL_OW 256
22378: PUSH
22379: LD_INT 1000
22381: LESS
22382: IFFALSE 22396
// SetLives ( i , 1000 ) ;
22384: LD_VAR 0 1
22388: PPUSH
22389: LD_INT 1000
22391: PPUSH
22392: CALL_OW 234
22396: GO 22366
22398: POP
22399: POP
// end ;
22400: PPOPN 1
22402: END
// export function hHackInvincible ; var i ; begin
22403: LD_INT 0
22405: PPUSH
22406: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22407: LD_ADDR_VAR 0 2
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: LD_INT 21
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 21
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: PPUSH
22440: CALL_OW 69
22444: PUSH
22445: FOR_IN
22446: IFFALSE 22507
// if IsSelected ( i ) then
22448: LD_VAR 0 2
22452: PPUSH
22453: CALL_OW 306
22457: IFFALSE 22505
// begin if i in hInvincible then
22459: LD_VAR 0 2
22463: PUSH
22464: LD_EXP 80
22468: IN
22469: IFFALSE 22489
// hInvincible := hInvincible diff i else
22471: LD_ADDR_EXP 80
22475: PUSH
22476: LD_EXP 80
22480: PUSH
22481: LD_VAR 0 2
22485: DIFF
22486: ST_TO_ADDR
22487: GO 22505
// hInvincible := hInvincible union i ;
22489: LD_ADDR_EXP 80
22493: PUSH
22494: LD_EXP 80
22498: PUSH
22499: LD_VAR 0 2
22503: UNION
22504: ST_TO_ADDR
// end ;
22505: GO 22445
22507: POP
22508: POP
// end ;
22509: LD_VAR 0 1
22513: RET
// export function hHackInvisible ; var i , j ; begin
22514: LD_INT 0
22516: PPUSH
22517: PPUSH
22518: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22519: LD_ADDR_VAR 0 2
22523: PUSH
22524: LD_INT 21
22526: PUSH
22527: LD_INT 1
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PPUSH
22534: CALL_OW 69
22538: PUSH
22539: FOR_IN
22540: IFFALSE 22564
// if IsSelected ( i ) then
22542: LD_VAR 0 2
22546: PPUSH
22547: CALL_OW 306
22551: IFFALSE 22562
// ComForceInvisible ( i ) ;
22553: LD_VAR 0 2
22557: PPUSH
22558: CALL_OW 496
22562: GO 22539
22564: POP
22565: POP
// end ;
22566: LD_VAR 0 1
22570: RET
// export function hHackChangeYourSide ; begin
22571: LD_INT 0
22573: PPUSH
// if your_side = 8 then
22574: LD_OWVAR 2
22578: PUSH
22579: LD_INT 8
22581: EQUAL
22582: IFFALSE 22594
// your_side := 0 else
22584: LD_ADDR_OWVAR 2
22588: PUSH
22589: LD_INT 0
22591: ST_TO_ADDR
22592: GO 22608
// your_side := your_side + 1 ;
22594: LD_ADDR_OWVAR 2
22598: PUSH
22599: LD_OWVAR 2
22603: PUSH
22604: LD_INT 1
22606: PLUS
22607: ST_TO_ADDR
// end ;
22608: LD_VAR 0 1
22612: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22613: LD_INT 0
22615: PPUSH
22616: PPUSH
22617: PPUSH
// for i in all_units do
22618: LD_ADDR_VAR 0 2
22622: PUSH
22623: LD_OWVAR 3
22627: PUSH
22628: FOR_IN
22629: IFFALSE 22707
// if IsSelected ( i ) then
22631: LD_VAR 0 2
22635: PPUSH
22636: CALL_OW 306
22640: IFFALSE 22705
// begin j := GetSide ( i ) ;
22642: LD_ADDR_VAR 0 3
22646: PUSH
22647: LD_VAR 0 2
22651: PPUSH
22652: CALL_OW 255
22656: ST_TO_ADDR
// if j = 8 then
22657: LD_VAR 0 3
22661: PUSH
22662: LD_INT 8
22664: EQUAL
22665: IFFALSE 22677
// j := 0 else
22667: LD_ADDR_VAR 0 3
22671: PUSH
22672: LD_INT 0
22674: ST_TO_ADDR
22675: GO 22691
// j := j + 1 ;
22677: LD_ADDR_VAR 0 3
22681: PUSH
22682: LD_VAR 0 3
22686: PUSH
22687: LD_INT 1
22689: PLUS
22690: ST_TO_ADDR
// SetSide ( i , j ) ;
22691: LD_VAR 0 2
22695: PPUSH
22696: LD_VAR 0 3
22700: PPUSH
22701: CALL_OW 235
// end ;
22705: GO 22628
22707: POP
22708: POP
// end ;
22709: LD_VAR 0 1
22713: RET
// export function hHackFog ; begin
22714: LD_INT 0
22716: PPUSH
// FogOff ( true ) ;
22717: LD_INT 1
22719: PPUSH
22720: CALL_OW 344
// end ;
22724: LD_VAR 0 1
22728: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22729: LD_INT 0
22731: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22732: LD_VAR 0 1
22736: PPUSH
22737: LD_VAR 0 2
22741: PPUSH
22742: LD_VAR 0 3
22746: PPUSH
22747: LD_INT 1
22749: PPUSH
22750: LD_INT 1
22752: PPUSH
22753: CALL_OW 483
// CenterOnXY ( x , y ) ;
22757: LD_VAR 0 2
22761: PPUSH
22762: LD_VAR 0 3
22766: PPUSH
22767: CALL_OW 84
// end ;
22771: LD_VAR 0 4
22775: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22776: LD_INT 0
22778: PPUSH
22779: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22780: LD_VAR 0 1
22784: NOT
22785: PUSH
22786: LD_VAR 0 2
22790: PPUSH
22791: LD_VAR 0 3
22795: PPUSH
22796: CALL_OW 488
22800: NOT
22801: OR
22802: PUSH
22803: LD_VAR 0 1
22807: PPUSH
22808: CALL_OW 266
22812: PUSH
22813: LD_INT 3
22815: NONEQUAL
22816: PUSH
22817: LD_VAR 0 1
22821: PPUSH
22822: CALL_OW 247
22826: PUSH
22827: LD_INT 1
22829: EQUAL
22830: NOT
22831: AND
22832: OR
22833: IFFALSE 22837
// exit ;
22835: GO 22986
// if GetType ( factory ) = unit_human then
22837: LD_VAR 0 1
22841: PPUSH
22842: CALL_OW 247
22846: PUSH
22847: LD_INT 1
22849: EQUAL
22850: IFFALSE 22867
// factory := IsInUnit ( factory ) ;
22852: LD_ADDR_VAR 0 1
22856: PUSH
22857: LD_VAR 0 1
22861: PPUSH
22862: CALL_OW 310
22866: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22867: LD_VAR 0 1
22871: PPUSH
22872: CALL_OW 266
22876: PUSH
22877: LD_INT 3
22879: NONEQUAL
22880: IFFALSE 22884
// exit ;
22882: GO 22986
// if HexInfo ( x , y ) = factory then
22884: LD_VAR 0 2
22888: PPUSH
22889: LD_VAR 0 3
22893: PPUSH
22894: CALL_OW 428
22898: PUSH
22899: LD_VAR 0 1
22903: EQUAL
22904: IFFALSE 22931
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22906: LD_ADDR_EXP 81
22910: PUSH
22911: LD_EXP 81
22915: PPUSH
22916: LD_VAR 0 1
22920: PPUSH
22921: LD_INT 0
22923: PPUSH
22924: CALL_OW 1
22928: ST_TO_ADDR
22929: GO 22982
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22931: LD_ADDR_EXP 81
22935: PUSH
22936: LD_EXP 81
22940: PPUSH
22941: LD_VAR 0 1
22945: PPUSH
22946: LD_VAR 0 1
22950: PPUSH
22951: CALL_OW 255
22955: PUSH
22956: LD_VAR 0 1
22960: PUSH
22961: LD_VAR 0 2
22965: PUSH
22966: LD_VAR 0 3
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: PPUSH
22977: CALL_OW 1
22981: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22982: CALL 22991 0 0
// end ;
22986: LD_VAR 0 4
22990: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22991: LD_INT 0
22993: PPUSH
22994: PPUSH
22995: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22996: LD_STRING resetFactoryWaypoint();
22998: PPUSH
22999: CALL_OW 559
// if factoryWaypoints then
23003: LD_EXP 81
23007: IFFALSE 23133
// begin list := PrepareArray ( factoryWaypoints ) ;
23009: LD_ADDR_VAR 0 3
23013: PUSH
23014: LD_EXP 81
23018: PPUSH
23019: CALL 65536 0 1
23023: ST_TO_ADDR
// for i := 1 to list do
23024: LD_ADDR_VAR 0 2
23028: PUSH
23029: DOUBLE
23030: LD_INT 1
23032: DEC
23033: ST_TO_ADDR
23034: LD_VAR 0 3
23038: PUSH
23039: FOR_TO
23040: IFFALSE 23131
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23042: LD_STRING setFactoryWaypointXY(
23044: PUSH
23045: LD_VAR 0 3
23049: PUSH
23050: LD_VAR 0 2
23054: ARRAY
23055: PUSH
23056: LD_INT 1
23058: ARRAY
23059: STR
23060: PUSH
23061: LD_STRING ,
23063: STR
23064: PUSH
23065: LD_VAR 0 3
23069: PUSH
23070: LD_VAR 0 2
23074: ARRAY
23075: PUSH
23076: LD_INT 2
23078: ARRAY
23079: STR
23080: PUSH
23081: LD_STRING ,
23083: STR
23084: PUSH
23085: LD_VAR 0 3
23089: PUSH
23090: LD_VAR 0 2
23094: ARRAY
23095: PUSH
23096: LD_INT 3
23098: ARRAY
23099: STR
23100: PUSH
23101: LD_STRING ,
23103: STR
23104: PUSH
23105: LD_VAR 0 3
23109: PUSH
23110: LD_VAR 0 2
23114: ARRAY
23115: PUSH
23116: LD_INT 4
23118: ARRAY
23119: STR
23120: PUSH
23121: LD_STRING )
23123: STR
23124: PPUSH
23125: CALL_OW 559
23129: GO 23039
23131: POP
23132: POP
// end ; end ;
23133: LD_VAR 0 1
23137: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23138: LD_INT 0
23140: PPUSH
// if HexInfo ( x , y ) = warehouse then
23141: LD_VAR 0 2
23145: PPUSH
23146: LD_VAR 0 3
23150: PPUSH
23151: CALL_OW 428
23155: PUSH
23156: LD_VAR 0 1
23160: EQUAL
23161: IFFALSE 23188
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23163: LD_ADDR_EXP 82
23167: PUSH
23168: LD_EXP 82
23172: PPUSH
23173: LD_VAR 0 1
23177: PPUSH
23178: LD_INT 0
23180: PPUSH
23181: CALL_OW 1
23185: ST_TO_ADDR
23186: GO 23239
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23188: LD_ADDR_EXP 82
23192: PUSH
23193: LD_EXP 82
23197: PPUSH
23198: LD_VAR 0 1
23202: PPUSH
23203: LD_VAR 0 1
23207: PPUSH
23208: CALL_OW 255
23212: PUSH
23213: LD_VAR 0 1
23217: PUSH
23218: LD_VAR 0 2
23222: PUSH
23223: LD_VAR 0 3
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: PPUSH
23234: CALL_OW 1
23238: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23239: CALL 23248 0 0
// end ;
23243: LD_VAR 0 4
23247: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23248: LD_INT 0
23250: PPUSH
23251: PPUSH
23252: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23253: LD_STRING resetWarehouseGatheringPoints();
23255: PPUSH
23256: CALL_OW 559
// if warehouseGatheringPoints then
23260: LD_EXP 82
23264: IFFALSE 23390
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23266: LD_ADDR_VAR 0 3
23270: PUSH
23271: LD_EXP 82
23275: PPUSH
23276: CALL 65536 0 1
23280: ST_TO_ADDR
// for i := 1 to list do
23281: LD_ADDR_VAR 0 2
23285: PUSH
23286: DOUBLE
23287: LD_INT 1
23289: DEC
23290: ST_TO_ADDR
23291: LD_VAR 0 3
23295: PUSH
23296: FOR_TO
23297: IFFALSE 23388
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23299: LD_STRING setWarehouseGatheringPointXY(
23301: PUSH
23302: LD_VAR 0 3
23306: PUSH
23307: LD_VAR 0 2
23311: ARRAY
23312: PUSH
23313: LD_INT 1
23315: ARRAY
23316: STR
23317: PUSH
23318: LD_STRING ,
23320: STR
23321: PUSH
23322: LD_VAR 0 3
23326: PUSH
23327: LD_VAR 0 2
23331: ARRAY
23332: PUSH
23333: LD_INT 2
23335: ARRAY
23336: STR
23337: PUSH
23338: LD_STRING ,
23340: STR
23341: PUSH
23342: LD_VAR 0 3
23346: PUSH
23347: LD_VAR 0 2
23351: ARRAY
23352: PUSH
23353: LD_INT 3
23355: ARRAY
23356: STR
23357: PUSH
23358: LD_STRING ,
23360: STR
23361: PUSH
23362: LD_VAR 0 3
23366: PUSH
23367: LD_VAR 0 2
23371: ARRAY
23372: PUSH
23373: LD_INT 4
23375: ARRAY
23376: STR
23377: PUSH
23378: LD_STRING )
23380: STR
23381: PPUSH
23382: CALL_OW 559
23386: GO 23296
23388: POP
23389: POP
// end ; end ;
23390: LD_VAR 0 1
23394: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23395: LD_EXP 82
23399: IFFALSE 24084
23401: GO 23403
23403: DISABLE
23404: LD_INT 0
23406: PPUSH
23407: PPUSH
23408: PPUSH
23409: PPUSH
23410: PPUSH
23411: PPUSH
23412: PPUSH
23413: PPUSH
23414: PPUSH
// begin enable ;
23415: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23416: LD_ADDR_VAR 0 3
23420: PUSH
23421: LD_EXP 82
23425: PPUSH
23426: CALL 65536 0 1
23430: ST_TO_ADDR
// if not list then
23431: LD_VAR 0 3
23435: NOT
23436: IFFALSE 23440
// exit ;
23438: GO 24084
// for i := 1 to list do
23440: LD_ADDR_VAR 0 1
23444: PUSH
23445: DOUBLE
23446: LD_INT 1
23448: DEC
23449: ST_TO_ADDR
23450: LD_VAR 0 3
23454: PUSH
23455: FOR_TO
23456: IFFALSE 24082
// begin depot := list [ i ] [ 2 ] ;
23458: LD_ADDR_VAR 0 8
23462: PUSH
23463: LD_VAR 0 3
23467: PUSH
23468: LD_VAR 0 1
23472: ARRAY
23473: PUSH
23474: LD_INT 2
23476: ARRAY
23477: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23478: LD_ADDR_VAR 0 5
23482: PUSH
23483: LD_VAR 0 3
23487: PUSH
23488: LD_VAR 0 1
23492: ARRAY
23493: PUSH
23494: LD_INT 1
23496: ARRAY
23497: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23498: LD_VAR 0 8
23502: PPUSH
23503: CALL_OW 301
23507: PUSH
23508: LD_VAR 0 5
23512: PUSH
23513: LD_VAR 0 8
23517: PPUSH
23518: CALL_OW 255
23522: NONEQUAL
23523: OR
23524: IFFALSE 23553
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23526: LD_ADDR_EXP 82
23530: PUSH
23531: LD_EXP 82
23535: PPUSH
23536: LD_VAR 0 8
23540: PPUSH
23541: LD_INT 0
23543: PPUSH
23544: CALL_OW 1
23548: ST_TO_ADDR
// exit ;
23549: POP
23550: POP
23551: GO 24084
// end ; x := list [ i ] [ 3 ] ;
23553: LD_ADDR_VAR 0 6
23557: PUSH
23558: LD_VAR 0 3
23562: PUSH
23563: LD_VAR 0 1
23567: ARRAY
23568: PUSH
23569: LD_INT 3
23571: ARRAY
23572: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23573: LD_ADDR_VAR 0 7
23577: PUSH
23578: LD_VAR 0 3
23582: PUSH
23583: LD_VAR 0 1
23587: ARRAY
23588: PUSH
23589: LD_INT 4
23591: ARRAY
23592: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23593: LD_ADDR_VAR 0 9
23597: PUSH
23598: LD_VAR 0 6
23602: PPUSH
23603: LD_VAR 0 7
23607: PPUSH
23608: LD_INT 16
23610: PPUSH
23611: CALL 64124 0 3
23615: ST_TO_ADDR
// if not cratesNearbyPoint then
23616: LD_VAR 0 9
23620: NOT
23621: IFFALSE 23627
// exit ;
23623: POP
23624: POP
23625: GO 24084
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23627: LD_ADDR_VAR 0 4
23631: PUSH
23632: LD_INT 22
23634: PUSH
23635: LD_VAR 0 5
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 3
23646: PUSH
23647: LD_INT 60
23649: PUSH
23650: EMPTY
23651: LIST
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 91
23659: PUSH
23660: LD_VAR 0 8
23664: PUSH
23665: LD_INT 6
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 2
23675: PUSH
23676: LD_INT 25
23678: PUSH
23679: LD_INT 2
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 25
23688: PUSH
23689: LD_INT 16
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: LIST
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: PPUSH
23707: CALL_OW 69
23711: PUSH
23712: LD_VAR 0 8
23716: PPUSH
23717: CALL_OW 313
23721: PPUSH
23722: LD_INT 3
23724: PUSH
23725: LD_INT 60
23727: PUSH
23728: EMPTY
23729: LIST
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 2
23737: PUSH
23738: LD_INT 25
23740: PUSH
23741: LD_INT 2
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 25
23750: PUSH
23751: LD_INT 16
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PPUSH
23767: CALL_OW 72
23771: UNION
23772: ST_TO_ADDR
// if tmp then
23773: LD_VAR 0 4
23777: IFFALSE 23857
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23779: LD_ADDR_VAR 0 4
23783: PUSH
23784: LD_VAR 0 4
23788: PPUSH
23789: LD_INT 3
23791: PPUSH
23792: CALL 62093 0 2
23796: ST_TO_ADDR
// for j in tmp do
23797: LD_ADDR_VAR 0 2
23801: PUSH
23802: LD_VAR 0 4
23806: PUSH
23807: FOR_IN
23808: IFFALSE 23851
// begin if IsInUnit ( j ) then
23810: LD_VAR 0 2
23814: PPUSH
23815: CALL_OW 310
23819: IFFALSE 23830
// ComExit ( j ) ;
23821: LD_VAR 0 2
23825: PPUSH
23826: CALL 62176 0 1
// AddComCollect ( j , x , y ) ;
23830: LD_VAR 0 2
23834: PPUSH
23835: LD_VAR 0 6
23839: PPUSH
23840: LD_VAR 0 7
23844: PPUSH
23845: CALL_OW 177
// end ;
23849: GO 23807
23851: POP
23852: POP
// exit ;
23853: POP
23854: POP
23855: GO 24084
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23857: LD_ADDR_VAR 0 4
23861: PUSH
23862: LD_INT 22
23864: PUSH
23865: LD_VAR 0 5
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 91
23876: PUSH
23877: LD_VAR 0 8
23881: PUSH
23882: LD_INT 8
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 2
23892: PUSH
23893: LD_INT 34
23895: PUSH
23896: LD_INT 12
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 34
23905: PUSH
23906: LD_INT 51
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 34
23915: PUSH
23916: LD_INT 32
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 34
23925: PUSH
23926: LD_INT 89
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: LIST
23944: PPUSH
23945: CALL_OW 69
23949: ST_TO_ADDR
// if tmp then
23950: LD_VAR 0 4
23954: IFFALSE 24080
// begin for j in tmp do
23956: LD_ADDR_VAR 0 2
23960: PUSH
23961: LD_VAR 0 4
23965: PUSH
23966: FOR_IN
23967: IFFALSE 24078
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23969: LD_VAR 0 2
23973: PPUSH
23974: CALL_OW 262
23978: PUSH
23979: LD_INT 3
23981: EQUAL
23982: PUSH
23983: LD_VAR 0 2
23987: PPUSH
23988: CALL_OW 261
23992: PUSH
23993: LD_INT 20
23995: GREATER
23996: OR
23997: PUSH
23998: LD_VAR 0 2
24002: PPUSH
24003: CALL_OW 314
24007: NOT
24008: AND
24009: PUSH
24010: LD_VAR 0 2
24014: PPUSH
24015: CALL_OW 263
24019: PUSH
24020: LD_INT 1
24022: NONEQUAL
24023: PUSH
24024: LD_VAR 0 2
24028: PPUSH
24029: CALL_OW 311
24033: OR
24034: AND
24035: IFFALSE 24076
// begin ComCollect ( j , x , y ) ;
24037: LD_VAR 0 2
24041: PPUSH
24042: LD_VAR 0 6
24046: PPUSH
24047: LD_VAR 0 7
24051: PPUSH
24052: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24056: LD_VAR 0 2
24060: PPUSH
24061: LD_VAR 0 8
24065: PPUSH
24066: CALL_OW 172
// exit ;
24070: POP
24071: POP
24072: POP
24073: POP
24074: GO 24084
// end ;
24076: GO 23966
24078: POP
24079: POP
// end ; end ;
24080: GO 23455
24082: POP
24083: POP
// end ; end_of_file end_of_file
24084: PPOPN 9
24086: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24087: LD_INT 0
24089: PPUSH
24090: PPUSH
// if exist_mode then
24091: LD_VAR 0 2
24095: IFFALSE 24120
// unit := CreateCharacter ( prefix & ident ) else
24097: LD_ADDR_VAR 0 5
24101: PUSH
24102: LD_VAR 0 3
24106: PUSH
24107: LD_VAR 0 1
24111: STR
24112: PPUSH
24113: CALL_OW 34
24117: ST_TO_ADDR
24118: GO 24135
// unit := NewCharacter ( ident ) ;
24120: LD_ADDR_VAR 0 5
24124: PUSH
24125: LD_VAR 0 1
24129: PPUSH
24130: CALL_OW 25
24134: ST_TO_ADDR
// result := unit ;
24135: LD_ADDR_VAR 0 4
24139: PUSH
24140: LD_VAR 0 5
24144: ST_TO_ADDR
// end ;
24145: LD_VAR 0 4
24149: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24150: LD_INT 0
24152: PPUSH
24153: PPUSH
// if not side or not nation then
24154: LD_VAR 0 1
24158: NOT
24159: PUSH
24160: LD_VAR 0 2
24164: NOT
24165: OR
24166: IFFALSE 24170
// exit ;
24168: GO 24938
// case nation of nation_american :
24170: LD_VAR 0 2
24174: PUSH
24175: LD_INT 1
24177: DOUBLE
24178: EQUAL
24179: IFTRUE 24183
24181: GO 24397
24183: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24184: LD_ADDR_VAR 0 4
24188: PUSH
24189: LD_INT 35
24191: PUSH
24192: LD_INT 45
24194: PUSH
24195: LD_INT 46
24197: PUSH
24198: LD_INT 47
24200: PUSH
24201: LD_INT 82
24203: PUSH
24204: LD_INT 83
24206: PUSH
24207: LD_INT 84
24209: PUSH
24210: LD_INT 85
24212: PUSH
24213: LD_INT 86
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: LD_INT 2
24221: PUSH
24222: LD_INT 6
24224: PUSH
24225: LD_INT 15
24227: PUSH
24228: LD_INT 16
24230: PUSH
24231: LD_INT 7
24233: PUSH
24234: LD_INT 12
24236: PUSH
24237: LD_INT 13
24239: PUSH
24240: LD_INT 10
24242: PUSH
24243: LD_INT 14
24245: PUSH
24246: LD_INT 20
24248: PUSH
24249: LD_INT 21
24251: PUSH
24252: LD_INT 22
24254: PUSH
24255: LD_INT 25
24257: PUSH
24258: LD_INT 32
24260: PUSH
24261: LD_INT 27
24263: PUSH
24264: LD_INT 36
24266: PUSH
24267: LD_INT 69
24269: PUSH
24270: LD_INT 39
24272: PUSH
24273: LD_INT 34
24275: PUSH
24276: LD_INT 40
24278: PUSH
24279: LD_INT 48
24281: PUSH
24282: LD_INT 49
24284: PUSH
24285: LD_INT 50
24287: PUSH
24288: LD_INT 51
24290: PUSH
24291: LD_INT 52
24293: PUSH
24294: LD_INT 53
24296: PUSH
24297: LD_INT 54
24299: PUSH
24300: LD_INT 55
24302: PUSH
24303: LD_INT 56
24305: PUSH
24306: LD_INT 57
24308: PUSH
24309: LD_INT 58
24311: PUSH
24312: LD_INT 59
24314: PUSH
24315: LD_INT 60
24317: PUSH
24318: LD_INT 61
24320: PUSH
24321: LD_INT 62
24323: PUSH
24324: LD_INT 80
24326: PUSH
24327: LD_INT 82
24329: PUSH
24330: LD_INT 83
24332: PUSH
24333: LD_INT 84
24335: PUSH
24336: LD_INT 85
24338: PUSH
24339: LD_INT 86
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: ST_TO_ADDR
24395: GO 24862
24397: LD_INT 2
24399: DOUBLE
24400: EQUAL
24401: IFTRUE 24405
24403: GO 24631
24405: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24406: LD_ADDR_VAR 0 4
24410: PUSH
24411: LD_INT 35
24413: PUSH
24414: LD_INT 45
24416: PUSH
24417: LD_INT 46
24419: PUSH
24420: LD_INT 47
24422: PUSH
24423: LD_INT 82
24425: PUSH
24426: LD_INT 83
24428: PUSH
24429: LD_INT 84
24431: PUSH
24432: LD_INT 85
24434: PUSH
24435: LD_INT 87
24437: PUSH
24438: LD_INT 70
24440: PUSH
24441: LD_INT 1
24443: PUSH
24444: LD_INT 11
24446: PUSH
24447: LD_INT 3
24449: PUSH
24450: LD_INT 4
24452: PUSH
24453: LD_INT 5
24455: PUSH
24456: LD_INT 6
24458: PUSH
24459: LD_INT 15
24461: PUSH
24462: LD_INT 18
24464: PUSH
24465: LD_INT 7
24467: PUSH
24468: LD_INT 17
24470: PUSH
24471: LD_INT 8
24473: PUSH
24474: LD_INT 20
24476: PUSH
24477: LD_INT 21
24479: PUSH
24480: LD_INT 22
24482: PUSH
24483: LD_INT 72
24485: PUSH
24486: LD_INT 26
24488: PUSH
24489: LD_INT 69
24491: PUSH
24492: LD_INT 39
24494: PUSH
24495: LD_INT 40
24497: PUSH
24498: LD_INT 41
24500: PUSH
24501: LD_INT 42
24503: PUSH
24504: LD_INT 43
24506: PUSH
24507: LD_INT 48
24509: PUSH
24510: LD_INT 49
24512: PUSH
24513: LD_INT 50
24515: PUSH
24516: LD_INT 51
24518: PUSH
24519: LD_INT 52
24521: PUSH
24522: LD_INT 53
24524: PUSH
24525: LD_INT 54
24527: PUSH
24528: LD_INT 55
24530: PUSH
24531: LD_INT 56
24533: PUSH
24534: LD_INT 60
24536: PUSH
24537: LD_INT 61
24539: PUSH
24540: LD_INT 62
24542: PUSH
24543: LD_INT 66
24545: PUSH
24546: LD_INT 67
24548: PUSH
24549: LD_INT 68
24551: PUSH
24552: LD_INT 81
24554: PUSH
24555: LD_INT 82
24557: PUSH
24558: LD_INT 83
24560: PUSH
24561: LD_INT 84
24563: PUSH
24564: LD_INT 85
24566: PUSH
24567: LD_INT 87
24569: PUSH
24570: LD_INT 88
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: ST_TO_ADDR
24629: GO 24862
24631: LD_INT 3
24633: DOUBLE
24634: EQUAL
24635: IFTRUE 24639
24637: GO 24861
24639: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24640: LD_ADDR_VAR 0 4
24644: PUSH
24645: LD_INT 46
24647: PUSH
24648: LD_INT 47
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: LD_INT 2
24656: PUSH
24657: LD_INT 82
24659: PUSH
24660: LD_INT 83
24662: PUSH
24663: LD_INT 84
24665: PUSH
24666: LD_INT 85
24668: PUSH
24669: LD_INT 86
24671: PUSH
24672: LD_INT 11
24674: PUSH
24675: LD_INT 9
24677: PUSH
24678: LD_INT 20
24680: PUSH
24681: LD_INT 19
24683: PUSH
24684: LD_INT 21
24686: PUSH
24687: LD_INT 24
24689: PUSH
24690: LD_INT 22
24692: PUSH
24693: LD_INT 25
24695: PUSH
24696: LD_INT 28
24698: PUSH
24699: LD_INT 29
24701: PUSH
24702: LD_INT 30
24704: PUSH
24705: LD_INT 31
24707: PUSH
24708: LD_INT 37
24710: PUSH
24711: LD_INT 38
24713: PUSH
24714: LD_INT 32
24716: PUSH
24717: LD_INT 27
24719: PUSH
24720: LD_INT 33
24722: PUSH
24723: LD_INT 69
24725: PUSH
24726: LD_INT 39
24728: PUSH
24729: LD_INT 34
24731: PUSH
24732: LD_INT 40
24734: PUSH
24735: LD_INT 71
24737: PUSH
24738: LD_INT 23
24740: PUSH
24741: LD_INT 44
24743: PUSH
24744: LD_INT 48
24746: PUSH
24747: LD_INT 49
24749: PUSH
24750: LD_INT 50
24752: PUSH
24753: LD_INT 51
24755: PUSH
24756: LD_INT 52
24758: PUSH
24759: LD_INT 53
24761: PUSH
24762: LD_INT 54
24764: PUSH
24765: LD_INT 55
24767: PUSH
24768: LD_INT 56
24770: PUSH
24771: LD_INT 57
24773: PUSH
24774: LD_INT 58
24776: PUSH
24777: LD_INT 59
24779: PUSH
24780: LD_INT 63
24782: PUSH
24783: LD_INT 64
24785: PUSH
24786: LD_INT 65
24788: PUSH
24789: LD_INT 82
24791: PUSH
24792: LD_INT 83
24794: PUSH
24795: LD_INT 84
24797: PUSH
24798: LD_INT 85
24800: PUSH
24801: LD_INT 86
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: ST_TO_ADDR
24859: GO 24862
24861: POP
// if state > - 1 and state < 3 then
24862: LD_VAR 0 3
24866: PUSH
24867: LD_INT 1
24869: NEG
24870: GREATER
24871: PUSH
24872: LD_VAR 0 3
24876: PUSH
24877: LD_INT 3
24879: LESS
24880: AND
24881: IFFALSE 24938
// for i in result do
24883: LD_ADDR_VAR 0 5
24887: PUSH
24888: LD_VAR 0 4
24892: PUSH
24893: FOR_IN
24894: IFFALSE 24936
// if GetTech ( i , side ) <> state then
24896: LD_VAR 0 5
24900: PPUSH
24901: LD_VAR 0 1
24905: PPUSH
24906: CALL_OW 321
24910: PUSH
24911: LD_VAR 0 3
24915: NONEQUAL
24916: IFFALSE 24934
// result := result diff i ;
24918: LD_ADDR_VAR 0 4
24922: PUSH
24923: LD_VAR 0 4
24927: PUSH
24928: LD_VAR 0 5
24932: DIFF
24933: ST_TO_ADDR
24934: GO 24893
24936: POP
24937: POP
// end ;
24938: LD_VAR 0 4
24942: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24943: LD_INT 0
24945: PPUSH
24946: PPUSH
24947: PPUSH
// result := true ;
24948: LD_ADDR_VAR 0 3
24952: PUSH
24953: LD_INT 1
24955: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24956: LD_ADDR_VAR 0 5
24960: PUSH
24961: LD_VAR 0 2
24965: PPUSH
24966: CALL_OW 480
24970: ST_TO_ADDR
// if not tmp then
24971: LD_VAR 0 5
24975: NOT
24976: IFFALSE 24980
// exit ;
24978: GO 25029
// for i in tmp do
24980: LD_ADDR_VAR 0 4
24984: PUSH
24985: LD_VAR 0 5
24989: PUSH
24990: FOR_IN
24991: IFFALSE 25027
// if GetTech ( i , side ) <> state_researched then
24993: LD_VAR 0 4
24997: PPUSH
24998: LD_VAR 0 1
25002: PPUSH
25003: CALL_OW 321
25007: PUSH
25008: LD_INT 2
25010: NONEQUAL
25011: IFFALSE 25025
// begin result := false ;
25013: LD_ADDR_VAR 0 3
25017: PUSH
25018: LD_INT 0
25020: ST_TO_ADDR
// exit ;
25021: POP
25022: POP
25023: GO 25029
// end ;
25025: GO 24990
25027: POP
25028: POP
// end ;
25029: LD_VAR 0 3
25033: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25034: LD_INT 0
25036: PPUSH
25037: PPUSH
25038: PPUSH
25039: PPUSH
25040: PPUSH
25041: PPUSH
25042: PPUSH
25043: PPUSH
25044: PPUSH
25045: PPUSH
25046: PPUSH
25047: PPUSH
25048: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25049: LD_VAR 0 1
25053: NOT
25054: PUSH
25055: LD_VAR 0 1
25059: PPUSH
25060: CALL_OW 257
25064: PUSH
25065: LD_INT 9
25067: NONEQUAL
25068: OR
25069: IFFALSE 25073
// exit ;
25071: GO 25646
// side := GetSide ( unit ) ;
25073: LD_ADDR_VAR 0 9
25077: PUSH
25078: LD_VAR 0 1
25082: PPUSH
25083: CALL_OW 255
25087: ST_TO_ADDR
// tech_space := tech_spacanom ;
25088: LD_ADDR_VAR 0 12
25092: PUSH
25093: LD_INT 29
25095: ST_TO_ADDR
// tech_time := tech_taurad ;
25096: LD_ADDR_VAR 0 13
25100: PUSH
25101: LD_INT 28
25103: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25104: LD_ADDR_VAR 0 11
25108: PUSH
25109: LD_VAR 0 1
25113: PPUSH
25114: CALL_OW 310
25118: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25119: LD_VAR 0 11
25123: PPUSH
25124: CALL_OW 247
25128: PUSH
25129: LD_INT 2
25131: EQUAL
25132: IFFALSE 25136
// exit ;
25134: GO 25646
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25136: LD_ADDR_VAR 0 8
25140: PUSH
25141: LD_INT 81
25143: PUSH
25144: LD_VAR 0 9
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 3
25155: PUSH
25156: LD_INT 21
25158: PUSH
25159: LD_INT 3
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PPUSH
25174: CALL_OW 69
25178: ST_TO_ADDR
// if not tmp then
25179: LD_VAR 0 8
25183: NOT
25184: IFFALSE 25188
// exit ;
25186: GO 25646
// if in_unit then
25188: LD_VAR 0 11
25192: IFFALSE 25216
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25194: LD_ADDR_VAR 0 10
25198: PUSH
25199: LD_VAR 0 8
25203: PPUSH
25204: LD_VAR 0 11
25208: PPUSH
25209: CALL_OW 74
25213: ST_TO_ADDR
25214: GO 25236
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25216: LD_ADDR_VAR 0 10
25220: PUSH
25221: LD_VAR 0 8
25225: PPUSH
25226: LD_VAR 0 1
25230: PPUSH
25231: CALL_OW 74
25235: ST_TO_ADDR
// if not enemy then
25236: LD_VAR 0 10
25240: NOT
25241: IFFALSE 25245
// exit ;
25243: GO 25646
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25245: LD_VAR 0 11
25249: PUSH
25250: LD_VAR 0 11
25254: PPUSH
25255: LD_VAR 0 10
25259: PPUSH
25260: CALL_OW 296
25264: PUSH
25265: LD_INT 13
25267: GREATER
25268: AND
25269: PUSH
25270: LD_VAR 0 1
25274: PPUSH
25275: LD_VAR 0 10
25279: PPUSH
25280: CALL_OW 296
25284: PUSH
25285: LD_INT 12
25287: GREATER
25288: OR
25289: IFFALSE 25293
// exit ;
25291: GO 25646
// missile := [ 1 ] ;
25293: LD_ADDR_VAR 0 14
25297: PUSH
25298: LD_INT 1
25300: PUSH
25301: EMPTY
25302: LIST
25303: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25304: LD_VAR 0 9
25308: PPUSH
25309: LD_VAR 0 12
25313: PPUSH
25314: CALL_OW 325
25318: IFFALSE 25347
// missile := Replace ( missile , missile + 1 , 2 ) ;
25320: LD_ADDR_VAR 0 14
25324: PUSH
25325: LD_VAR 0 14
25329: PPUSH
25330: LD_VAR 0 14
25334: PUSH
25335: LD_INT 1
25337: PLUS
25338: PPUSH
25339: LD_INT 2
25341: PPUSH
25342: CALL_OW 1
25346: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25347: LD_VAR 0 9
25351: PPUSH
25352: LD_VAR 0 13
25356: PPUSH
25357: CALL_OW 325
25361: PUSH
25362: LD_VAR 0 10
25366: PPUSH
25367: CALL_OW 255
25371: PPUSH
25372: LD_VAR 0 13
25376: PPUSH
25377: CALL_OW 325
25381: NOT
25382: AND
25383: IFFALSE 25412
// missile := Replace ( missile , missile + 1 , 3 ) ;
25385: LD_ADDR_VAR 0 14
25389: PUSH
25390: LD_VAR 0 14
25394: PPUSH
25395: LD_VAR 0 14
25399: PUSH
25400: LD_INT 1
25402: PLUS
25403: PPUSH
25404: LD_INT 3
25406: PPUSH
25407: CALL_OW 1
25411: ST_TO_ADDR
// if missile < 2 then
25412: LD_VAR 0 14
25416: PUSH
25417: LD_INT 2
25419: LESS
25420: IFFALSE 25424
// exit ;
25422: GO 25646
// x := GetX ( enemy ) ;
25424: LD_ADDR_VAR 0 4
25428: PUSH
25429: LD_VAR 0 10
25433: PPUSH
25434: CALL_OW 250
25438: ST_TO_ADDR
// y := GetY ( enemy ) ;
25439: LD_ADDR_VAR 0 5
25443: PUSH
25444: LD_VAR 0 10
25448: PPUSH
25449: CALL_OW 251
25453: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25454: LD_ADDR_VAR 0 6
25458: PUSH
25459: LD_VAR 0 4
25463: PUSH
25464: LD_INT 1
25466: NEG
25467: PPUSH
25468: LD_INT 1
25470: PPUSH
25471: CALL_OW 12
25475: PLUS
25476: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25477: LD_ADDR_VAR 0 7
25481: PUSH
25482: LD_VAR 0 5
25486: PUSH
25487: LD_INT 1
25489: NEG
25490: PPUSH
25491: LD_INT 1
25493: PPUSH
25494: CALL_OW 12
25498: PLUS
25499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25500: LD_VAR 0 6
25504: PPUSH
25505: LD_VAR 0 7
25509: PPUSH
25510: CALL_OW 488
25514: NOT
25515: IFFALSE 25537
// begin _x := x ;
25517: LD_ADDR_VAR 0 6
25521: PUSH
25522: LD_VAR 0 4
25526: ST_TO_ADDR
// _y := y ;
25527: LD_ADDR_VAR 0 7
25531: PUSH
25532: LD_VAR 0 5
25536: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25537: LD_ADDR_VAR 0 3
25541: PUSH
25542: LD_INT 1
25544: PPUSH
25545: LD_VAR 0 14
25549: PPUSH
25550: CALL_OW 12
25554: ST_TO_ADDR
// case i of 1 :
25555: LD_VAR 0 3
25559: PUSH
25560: LD_INT 1
25562: DOUBLE
25563: EQUAL
25564: IFTRUE 25568
25566: GO 25585
25568: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25569: LD_VAR 0 1
25573: PPUSH
25574: LD_VAR 0 10
25578: PPUSH
25579: CALL_OW 115
25583: GO 25646
25585: LD_INT 2
25587: DOUBLE
25588: EQUAL
25589: IFTRUE 25593
25591: GO 25615
25593: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25594: LD_VAR 0 1
25598: PPUSH
25599: LD_VAR 0 6
25603: PPUSH
25604: LD_VAR 0 7
25608: PPUSH
25609: CALL_OW 153
25613: GO 25646
25615: LD_INT 3
25617: DOUBLE
25618: EQUAL
25619: IFTRUE 25623
25621: GO 25645
25623: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25624: LD_VAR 0 1
25628: PPUSH
25629: LD_VAR 0 6
25633: PPUSH
25634: LD_VAR 0 7
25638: PPUSH
25639: CALL_OW 154
25643: GO 25646
25645: POP
// end ;
25646: LD_VAR 0 2
25650: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25651: LD_INT 0
25653: PPUSH
25654: PPUSH
25655: PPUSH
25656: PPUSH
25657: PPUSH
25658: PPUSH
// if not unit or not building then
25659: LD_VAR 0 1
25663: NOT
25664: PUSH
25665: LD_VAR 0 2
25669: NOT
25670: OR
25671: IFFALSE 25675
// exit ;
25673: GO 25833
// x := GetX ( building ) ;
25675: LD_ADDR_VAR 0 5
25679: PUSH
25680: LD_VAR 0 2
25684: PPUSH
25685: CALL_OW 250
25689: ST_TO_ADDR
// y := GetY ( building ) ;
25690: LD_ADDR_VAR 0 6
25694: PUSH
25695: LD_VAR 0 2
25699: PPUSH
25700: CALL_OW 251
25704: ST_TO_ADDR
// for i = 0 to 5 do
25705: LD_ADDR_VAR 0 4
25709: PUSH
25710: DOUBLE
25711: LD_INT 0
25713: DEC
25714: ST_TO_ADDR
25715: LD_INT 5
25717: PUSH
25718: FOR_TO
25719: IFFALSE 25831
// begin _x := ShiftX ( x , i , 3 ) ;
25721: LD_ADDR_VAR 0 7
25725: PUSH
25726: LD_VAR 0 5
25730: PPUSH
25731: LD_VAR 0 4
25735: PPUSH
25736: LD_INT 3
25738: PPUSH
25739: CALL_OW 272
25743: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25744: LD_ADDR_VAR 0 8
25748: PUSH
25749: LD_VAR 0 6
25753: PPUSH
25754: LD_VAR 0 4
25758: PPUSH
25759: LD_INT 3
25761: PPUSH
25762: CALL_OW 273
25766: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25767: LD_VAR 0 7
25771: PPUSH
25772: LD_VAR 0 8
25776: PPUSH
25777: CALL_OW 488
25781: NOT
25782: IFFALSE 25786
// continue ;
25784: GO 25718
// if HexInfo ( _x , _y ) = 0 then
25786: LD_VAR 0 7
25790: PPUSH
25791: LD_VAR 0 8
25795: PPUSH
25796: CALL_OW 428
25800: PUSH
25801: LD_INT 0
25803: EQUAL
25804: IFFALSE 25829
// begin ComMoveXY ( unit , _x , _y ) ;
25806: LD_VAR 0 1
25810: PPUSH
25811: LD_VAR 0 7
25815: PPUSH
25816: LD_VAR 0 8
25820: PPUSH
25821: CALL_OW 111
// exit ;
25825: POP
25826: POP
25827: GO 25833
// end ; end ;
25829: GO 25718
25831: POP
25832: POP
// end ;
25833: LD_VAR 0 3
25837: RET
// export function ScanBase ( side , base_area ) ; begin
25838: LD_INT 0
25840: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25841: LD_ADDR_VAR 0 3
25845: PUSH
25846: LD_VAR 0 2
25850: PPUSH
25851: LD_INT 81
25853: PUSH
25854: LD_VAR 0 1
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PPUSH
25863: CALL_OW 70
25867: ST_TO_ADDR
// end ;
25868: LD_VAR 0 3
25872: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25873: LD_INT 0
25875: PPUSH
25876: PPUSH
25877: PPUSH
25878: PPUSH
// result := false ;
25879: LD_ADDR_VAR 0 2
25883: PUSH
25884: LD_INT 0
25886: ST_TO_ADDR
// side := GetSide ( unit ) ;
25887: LD_ADDR_VAR 0 3
25891: PUSH
25892: LD_VAR 0 1
25896: PPUSH
25897: CALL_OW 255
25901: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25902: LD_ADDR_VAR 0 4
25906: PUSH
25907: LD_VAR 0 1
25911: PPUSH
25912: CALL_OW 248
25916: ST_TO_ADDR
// case nat of 1 :
25917: LD_VAR 0 4
25921: PUSH
25922: LD_INT 1
25924: DOUBLE
25925: EQUAL
25926: IFTRUE 25930
25928: GO 25941
25930: POP
// tech := tech_lassight ; 2 :
25931: LD_ADDR_VAR 0 5
25935: PUSH
25936: LD_INT 12
25938: ST_TO_ADDR
25939: GO 25980
25941: LD_INT 2
25943: DOUBLE
25944: EQUAL
25945: IFTRUE 25949
25947: GO 25960
25949: POP
// tech := tech_mortar ; 3 :
25950: LD_ADDR_VAR 0 5
25954: PUSH
25955: LD_INT 41
25957: ST_TO_ADDR
25958: GO 25980
25960: LD_INT 3
25962: DOUBLE
25963: EQUAL
25964: IFTRUE 25968
25966: GO 25979
25968: POP
// tech := tech_bazooka ; end ;
25969: LD_ADDR_VAR 0 5
25973: PUSH
25974: LD_INT 44
25976: ST_TO_ADDR
25977: GO 25980
25979: POP
// if Researched ( side , tech ) then
25980: LD_VAR 0 3
25984: PPUSH
25985: LD_VAR 0 5
25989: PPUSH
25990: CALL_OW 325
25994: IFFALSE 26021
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25996: LD_ADDR_VAR 0 2
26000: PUSH
26001: LD_INT 5
26003: PUSH
26004: LD_INT 8
26006: PUSH
26007: LD_INT 9
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: LIST
26014: PUSH
26015: LD_VAR 0 4
26019: ARRAY
26020: ST_TO_ADDR
// end ;
26021: LD_VAR 0 2
26025: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26026: LD_INT 0
26028: PPUSH
26029: PPUSH
26030: PPUSH
// if not mines then
26031: LD_VAR 0 2
26035: NOT
26036: IFFALSE 26040
// exit ;
26038: GO 26184
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26040: LD_ADDR_VAR 0 5
26044: PUSH
26045: LD_INT 81
26047: PUSH
26048: LD_VAR 0 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 3
26059: PUSH
26060: LD_INT 21
26062: PUSH
26063: LD_INT 3
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PPUSH
26078: CALL_OW 69
26082: ST_TO_ADDR
// for i in mines do
26083: LD_ADDR_VAR 0 4
26087: PUSH
26088: LD_VAR 0 2
26092: PUSH
26093: FOR_IN
26094: IFFALSE 26182
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26096: LD_VAR 0 4
26100: PUSH
26101: LD_INT 1
26103: ARRAY
26104: PPUSH
26105: LD_VAR 0 4
26109: PUSH
26110: LD_INT 2
26112: ARRAY
26113: PPUSH
26114: CALL_OW 458
26118: NOT
26119: IFFALSE 26123
// continue ;
26121: GO 26093
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26123: LD_VAR 0 4
26127: PUSH
26128: LD_INT 1
26130: ARRAY
26131: PPUSH
26132: LD_VAR 0 4
26136: PUSH
26137: LD_INT 2
26139: ARRAY
26140: PPUSH
26141: CALL_OW 428
26145: PUSH
26146: LD_VAR 0 5
26150: IN
26151: IFFALSE 26180
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26153: LD_VAR 0 4
26157: PUSH
26158: LD_INT 1
26160: ARRAY
26161: PPUSH
26162: LD_VAR 0 4
26166: PUSH
26167: LD_INT 2
26169: ARRAY
26170: PPUSH
26171: LD_VAR 0 1
26175: PPUSH
26176: CALL_OW 456
// end ;
26180: GO 26093
26182: POP
26183: POP
// end ;
26184: LD_VAR 0 3
26188: RET
// export function Count ( array ) ; begin
26189: LD_INT 0
26191: PPUSH
// result := array + 0 ;
26192: LD_ADDR_VAR 0 2
26196: PUSH
26197: LD_VAR 0 1
26201: PUSH
26202: LD_INT 0
26204: PLUS
26205: ST_TO_ADDR
// end ;
26206: LD_VAR 0 2
26210: RET
// export function IsEmpty ( building ) ; begin
26211: LD_INT 0
26213: PPUSH
// if not building then
26214: LD_VAR 0 1
26218: NOT
26219: IFFALSE 26223
// exit ;
26221: GO 26266
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26223: LD_ADDR_VAR 0 2
26227: PUSH
26228: LD_VAR 0 1
26232: PUSH
26233: LD_INT 22
26235: PUSH
26236: LD_VAR 0 1
26240: PPUSH
26241: CALL_OW 255
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 58
26252: PUSH
26253: EMPTY
26254: LIST
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PPUSH
26260: CALL_OW 69
26264: IN
26265: ST_TO_ADDR
// end ;
26266: LD_VAR 0 2
26270: RET
// export function IsNotFull ( building ) ; var places ; begin
26271: LD_INT 0
26273: PPUSH
26274: PPUSH
// if not building then
26275: LD_VAR 0 1
26279: NOT
26280: IFFALSE 26284
// exit ;
26282: GO 26312
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26284: LD_ADDR_VAR 0 2
26288: PUSH
26289: LD_VAR 0 1
26293: PPUSH
26294: LD_INT 3
26296: PUSH
26297: LD_INT 62
26299: PUSH
26300: EMPTY
26301: LIST
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PPUSH
26307: CALL_OW 72
26311: ST_TO_ADDR
// end ;
26312: LD_VAR 0 2
26316: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26317: LD_INT 0
26319: PPUSH
26320: PPUSH
26321: PPUSH
26322: PPUSH
// tmp := [ ] ;
26323: LD_ADDR_VAR 0 3
26327: PUSH
26328: EMPTY
26329: ST_TO_ADDR
// list := [ ] ;
26330: LD_ADDR_VAR 0 5
26334: PUSH
26335: EMPTY
26336: ST_TO_ADDR
// for i = 16 to 25 do
26337: LD_ADDR_VAR 0 4
26341: PUSH
26342: DOUBLE
26343: LD_INT 16
26345: DEC
26346: ST_TO_ADDR
26347: LD_INT 25
26349: PUSH
26350: FOR_TO
26351: IFFALSE 26424
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26353: LD_ADDR_VAR 0 3
26357: PUSH
26358: LD_VAR 0 3
26362: PUSH
26363: LD_INT 22
26365: PUSH
26366: LD_VAR 0 1
26370: PPUSH
26371: CALL_OW 255
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 91
26382: PUSH
26383: LD_VAR 0 1
26387: PUSH
26388: LD_INT 6
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 30
26398: PUSH
26399: LD_VAR 0 4
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: LIST
26412: PUSH
26413: EMPTY
26414: LIST
26415: PPUSH
26416: CALL_OW 69
26420: ADD
26421: ST_TO_ADDR
26422: GO 26350
26424: POP
26425: POP
// for i = 1 to tmp do
26426: LD_ADDR_VAR 0 4
26430: PUSH
26431: DOUBLE
26432: LD_INT 1
26434: DEC
26435: ST_TO_ADDR
26436: LD_VAR 0 3
26440: PUSH
26441: FOR_TO
26442: IFFALSE 26530
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26444: LD_ADDR_VAR 0 5
26448: PUSH
26449: LD_VAR 0 5
26453: PUSH
26454: LD_VAR 0 3
26458: PUSH
26459: LD_VAR 0 4
26463: ARRAY
26464: PPUSH
26465: CALL_OW 266
26469: PUSH
26470: LD_VAR 0 3
26474: PUSH
26475: LD_VAR 0 4
26479: ARRAY
26480: PPUSH
26481: CALL_OW 250
26485: PUSH
26486: LD_VAR 0 3
26490: PUSH
26491: LD_VAR 0 4
26495: ARRAY
26496: PPUSH
26497: CALL_OW 251
26501: PUSH
26502: LD_VAR 0 3
26506: PUSH
26507: LD_VAR 0 4
26511: ARRAY
26512: PPUSH
26513: CALL_OW 254
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: PUSH
26524: EMPTY
26525: LIST
26526: ADD
26527: ST_TO_ADDR
26528: GO 26441
26530: POP
26531: POP
// result := list ;
26532: LD_ADDR_VAR 0 2
26536: PUSH
26537: LD_VAR 0 5
26541: ST_TO_ADDR
// end ;
26542: LD_VAR 0 2
26546: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26547: LD_INT 0
26549: PPUSH
26550: PPUSH
26551: PPUSH
26552: PPUSH
26553: PPUSH
26554: PPUSH
26555: PPUSH
// if not factory then
26556: LD_VAR 0 1
26560: NOT
26561: IFFALSE 26565
// exit ;
26563: GO 27158
// if control = control_apeman then
26565: LD_VAR 0 4
26569: PUSH
26570: LD_INT 5
26572: EQUAL
26573: IFFALSE 26682
// begin tmp := UnitsInside ( factory ) ;
26575: LD_ADDR_VAR 0 8
26579: PUSH
26580: LD_VAR 0 1
26584: PPUSH
26585: CALL_OW 313
26589: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26590: LD_VAR 0 8
26594: PPUSH
26595: LD_INT 25
26597: PUSH
26598: LD_INT 12
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PPUSH
26605: CALL_OW 72
26609: NOT
26610: IFFALSE 26620
// control := control_manual ;
26612: LD_ADDR_VAR 0 4
26616: PUSH
26617: LD_INT 1
26619: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26620: LD_ADDR_VAR 0 8
26624: PUSH
26625: LD_VAR 0 1
26629: PPUSH
26630: CALL 26317 0 1
26634: ST_TO_ADDR
// if tmp then
26635: LD_VAR 0 8
26639: IFFALSE 26682
// begin for i in tmp do
26641: LD_ADDR_VAR 0 7
26645: PUSH
26646: LD_VAR 0 8
26650: PUSH
26651: FOR_IN
26652: IFFALSE 26680
// if i [ 1 ] = b_ext_radio then
26654: LD_VAR 0 7
26658: PUSH
26659: LD_INT 1
26661: ARRAY
26662: PUSH
26663: LD_INT 22
26665: EQUAL
26666: IFFALSE 26678
// begin control := control_remote ;
26668: LD_ADDR_VAR 0 4
26672: PUSH
26673: LD_INT 2
26675: ST_TO_ADDR
// break ;
26676: GO 26680
// end ;
26678: GO 26651
26680: POP
26681: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26682: LD_VAR 0 1
26686: PPUSH
26687: LD_VAR 0 2
26691: PPUSH
26692: LD_VAR 0 3
26696: PPUSH
26697: LD_VAR 0 4
26701: PPUSH
26702: LD_VAR 0 5
26706: PPUSH
26707: CALL_OW 448
26711: IFFALSE 26746
// begin result := [ chassis , engine , control , weapon ] ;
26713: LD_ADDR_VAR 0 6
26717: PUSH
26718: LD_VAR 0 2
26722: PUSH
26723: LD_VAR 0 3
26727: PUSH
26728: LD_VAR 0 4
26732: PUSH
26733: LD_VAR 0 5
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: ST_TO_ADDR
// exit ;
26744: GO 27158
// end ; _chassis := AvailableChassisList ( factory ) ;
26746: LD_ADDR_VAR 0 9
26750: PUSH
26751: LD_VAR 0 1
26755: PPUSH
26756: CALL_OW 475
26760: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26761: LD_ADDR_VAR 0 11
26765: PUSH
26766: LD_VAR 0 1
26770: PPUSH
26771: CALL_OW 476
26775: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26776: LD_ADDR_VAR 0 12
26780: PUSH
26781: LD_VAR 0 1
26785: PPUSH
26786: CALL_OW 477
26790: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26791: LD_ADDR_VAR 0 10
26795: PUSH
26796: LD_VAR 0 1
26800: PPUSH
26801: CALL_OW 478
26805: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26806: LD_VAR 0 9
26810: NOT
26811: PUSH
26812: LD_VAR 0 11
26816: NOT
26817: OR
26818: PUSH
26819: LD_VAR 0 12
26823: NOT
26824: OR
26825: PUSH
26826: LD_VAR 0 10
26830: NOT
26831: OR
26832: IFFALSE 26867
// begin result := [ chassis , engine , control , weapon ] ;
26834: LD_ADDR_VAR 0 6
26838: PUSH
26839: LD_VAR 0 2
26843: PUSH
26844: LD_VAR 0 3
26848: PUSH
26849: LD_VAR 0 4
26853: PUSH
26854: LD_VAR 0 5
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: ST_TO_ADDR
// exit ;
26865: GO 27158
// end ; if not chassis in _chassis then
26867: LD_VAR 0 2
26871: PUSH
26872: LD_VAR 0 9
26876: IN
26877: NOT
26878: IFFALSE 26904
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26880: LD_ADDR_VAR 0 2
26884: PUSH
26885: LD_VAR 0 9
26889: PUSH
26890: LD_INT 1
26892: PPUSH
26893: LD_VAR 0 9
26897: PPUSH
26898: CALL_OW 12
26902: ARRAY
26903: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26904: LD_VAR 0 2
26908: PPUSH
26909: LD_VAR 0 3
26913: PPUSH
26914: CALL 27163 0 2
26918: NOT
26919: IFFALSE 26978
// repeat engine := _engine [ 1 ] ;
26921: LD_ADDR_VAR 0 3
26925: PUSH
26926: LD_VAR 0 11
26930: PUSH
26931: LD_INT 1
26933: ARRAY
26934: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26935: LD_ADDR_VAR 0 11
26939: PUSH
26940: LD_VAR 0 11
26944: PPUSH
26945: LD_INT 1
26947: PPUSH
26948: CALL_OW 3
26952: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26953: LD_VAR 0 2
26957: PPUSH
26958: LD_VAR 0 3
26962: PPUSH
26963: CALL 27163 0 2
26967: PUSH
26968: LD_VAR 0 11
26972: PUSH
26973: EMPTY
26974: EQUAL
26975: OR
26976: IFFALSE 26921
// if not control in _control then
26978: LD_VAR 0 4
26982: PUSH
26983: LD_VAR 0 12
26987: IN
26988: NOT
26989: IFFALSE 27015
// control := _control [ rand ( 1 , _control ) ] ;
26991: LD_ADDR_VAR 0 4
26995: PUSH
26996: LD_VAR 0 12
27000: PUSH
27001: LD_INT 1
27003: PPUSH
27004: LD_VAR 0 12
27008: PPUSH
27009: CALL_OW 12
27013: ARRAY
27014: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27015: LD_VAR 0 2
27019: PPUSH
27020: LD_VAR 0 5
27024: PPUSH
27025: CALL 27383 0 2
27029: NOT
27030: IFFALSE 27089
// repeat weapon := _weapon [ 1 ] ;
27032: LD_ADDR_VAR 0 5
27036: PUSH
27037: LD_VAR 0 10
27041: PUSH
27042: LD_INT 1
27044: ARRAY
27045: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27046: LD_ADDR_VAR 0 10
27050: PUSH
27051: LD_VAR 0 10
27055: PPUSH
27056: LD_INT 1
27058: PPUSH
27059: CALL_OW 3
27063: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27064: LD_VAR 0 2
27068: PPUSH
27069: LD_VAR 0 5
27073: PPUSH
27074: CALL 27383 0 2
27078: PUSH
27079: LD_VAR 0 10
27083: PUSH
27084: EMPTY
27085: EQUAL
27086: OR
27087: IFFALSE 27032
// result := [ ] ;
27089: LD_ADDR_VAR 0 6
27093: PUSH
27094: EMPTY
27095: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27096: LD_VAR 0 1
27100: PPUSH
27101: LD_VAR 0 2
27105: PPUSH
27106: LD_VAR 0 3
27110: PPUSH
27111: LD_VAR 0 4
27115: PPUSH
27116: LD_VAR 0 5
27120: PPUSH
27121: CALL_OW 448
27125: IFFALSE 27158
// result := [ chassis , engine , control , weapon ] ;
27127: LD_ADDR_VAR 0 6
27131: PUSH
27132: LD_VAR 0 2
27136: PUSH
27137: LD_VAR 0 3
27141: PUSH
27142: LD_VAR 0 4
27146: PUSH
27147: LD_VAR 0 5
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: ST_TO_ADDR
// end ;
27158: LD_VAR 0 6
27162: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27163: LD_INT 0
27165: PPUSH
// if not chassis or not engine then
27166: LD_VAR 0 1
27170: NOT
27171: PUSH
27172: LD_VAR 0 2
27176: NOT
27177: OR
27178: IFFALSE 27182
// exit ;
27180: GO 27378
// case engine of engine_solar :
27182: LD_VAR 0 2
27186: PUSH
27187: LD_INT 2
27189: DOUBLE
27190: EQUAL
27191: IFTRUE 27195
27193: GO 27233
27195: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27196: LD_ADDR_VAR 0 3
27200: PUSH
27201: LD_INT 11
27203: PUSH
27204: LD_INT 12
27206: PUSH
27207: LD_INT 13
27209: PUSH
27210: LD_INT 14
27212: PUSH
27213: LD_INT 1
27215: PUSH
27216: LD_INT 2
27218: PUSH
27219: LD_INT 3
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: ST_TO_ADDR
27231: GO 27362
27233: LD_INT 1
27235: DOUBLE
27236: EQUAL
27237: IFTRUE 27241
27239: GO 27303
27241: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27242: LD_ADDR_VAR 0 3
27246: PUSH
27247: LD_INT 11
27249: PUSH
27250: LD_INT 12
27252: PUSH
27253: LD_INT 13
27255: PUSH
27256: LD_INT 14
27258: PUSH
27259: LD_INT 1
27261: PUSH
27262: LD_INT 2
27264: PUSH
27265: LD_INT 3
27267: PUSH
27268: LD_INT 4
27270: PUSH
27271: LD_INT 5
27273: PUSH
27274: LD_INT 21
27276: PUSH
27277: LD_INT 23
27279: PUSH
27280: LD_INT 22
27282: PUSH
27283: LD_INT 24
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: ST_TO_ADDR
27301: GO 27362
27303: LD_INT 3
27305: DOUBLE
27306: EQUAL
27307: IFTRUE 27311
27309: GO 27361
27311: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27312: LD_ADDR_VAR 0 3
27316: PUSH
27317: LD_INT 13
27319: PUSH
27320: LD_INT 14
27322: PUSH
27323: LD_INT 2
27325: PUSH
27326: LD_INT 3
27328: PUSH
27329: LD_INT 4
27331: PUSH
27332: LD_INT 5
27334: PUSH
27335: LD_INT 21
27337: PUSH
27338: LD_INT 22
27340: PUSH
27341: LD_INT 23
27343: PUSH
27344: LD_INT 24
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: ST_TO_ADDR
27359: GO 27362
27361: POP
// result := ( chassis in result ) ;
27362: LD_ADDR_VAR 0 3
27366: PUSH
27367: LD_VAR 0 1
27371: PUSH
27372: LD_VAR 0 3
27376: IN
27377: ST_TO_ADDR
// end ;
27378: LD_VAR 0 3
27382: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27383: LD_INT 0
27385: PPUSH
// if not chassis or not weapon then
27386: LD_VAR 0 1
27390: NOT
27391: PUSH
27392: LD_VAR 0 2
27396: NOT
27397: OR
27398: IFFALSE 27402
// exit ;
27400: GO 28462
// case weapon of us_machine_gun :
27402: LD_VAR 0 2
27406: PUSH
27407: LD_INT 2
27409: DOUBLE
27410: EQUAL
27411: IFTRUE 27415
27413: GO 27445
27415: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27416: LD_ADDR_VAR 0 3
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: LD_INT 2
27426: PUSH
27427: LD_INT 3
27429: PUSH
27430: LD_INT 4
27432: PUSH
27433: LD_INT 5
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: ST_TO_ADDR
27443: GO 28446
27445: LD_INT 3
27447: DOUBLE
27448: EQUAL
27449: IFTRUE 27453
27451: GO 27483
27453: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27454: LD_ADDR_VAR 0 3
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: LD_INT 2
27464: PUSH
27465: LD_INT 3
27467: PUSH
27468: LD_INT 4
27470: PUSH
27471: LD_INT 5
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: ST_TO_ADDR
27481: GO 28446
27483: LD_INT 11
27485: DOUBLE
27486: EQUAL
27487: IFTRUE 27491
27489: GO 27521
27491: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27492: LD_ADDR_VAR 0 3
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: LD_INT 2
27502: PUSH
27503: LD_INT 3
27505: PUSH
27506: LD_INT 4
27508: PUSH
27509: LD_INT 5
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: ST_TO_ADDR
27519: GO 28446
27521: LD_INT 4
27523: DOUBLE
27524: EQUAL
27525: IFTRUE 27529
27527: GO 27555
27529: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27530: LD_ADDR_VAR 0 3
27534: PUSH
27535: LD_INT 2
27537: PUSH
27538: LD_INT 3
27540: PUSH
27541: LD_INT 4
27543: PUSH
27544: LD_INT 5
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: ST_TO_ADDR
27553: GO 28446
27555: LD_INT 5
27557: DOUBLE
27558: EQUAL
27559: IFTRUE 27563
27561: GO 27589
27563: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27564: LD_ADDR_VAR 0 3
27568: PUSH
27569: LD_INT 2
27571: PUSH
27572: LD_INT 3
27574: PUSH
27575: LD_INT 4
27577: PUSH
27578: LD_INT 5
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: ST_TO_ADDR
27587: GO 28446
27589: LD_INT 9
27591: DOUBLE
27592: EQUAL
27593: IFTRUE 27597
27595: GO 27623
27597: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27598: LD_ADDR_VAR 0 3
27602: PUSH
27603: LD_INT 2
27605: PUSH
27606: LD_INT 3
27608: PUSH
27609: LD_INT 4
27611: PUSH
27612: LD_INT 5
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: ST_TO_ADDR
27621: GO 28446
27623: LD_INT 7
27625: DOUBLE
27626: EQUAL
27627: IFTRUE 27631
27629: GO 27657
27631: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27632: LD_ADDR_VAR 0 3
27636: PUSH
27637: LD_INT 2
27639: PUSH
27640: LD_INT 3
27642: PUSH
27643: LD_INT 4
27645: PUSH
27646: LD_INT 5
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: ST_TO_ADDR
27655: GO 28446
27657: LD_INT 12
27659: DOUBLE
27660: EQUAL
27661: IFTRUE 27665
27663: GO 27691
27665: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27666: LD_ADDR_VAR 0 3
27670: PUSH
27671: LD_INT 2
27673: PUSH
27674: LD_INT 3
27676: PUSH
27677: LD_INT 4
27679: PUSH
27680: LD_INT 5
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: ST_TO_ADDR
27689: GO 28446
27691: LD_INT 13
27693: DOUBLE
27694: EQUAL
27695: IFTRUE 27699
27697: GO 27725
27699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27700: LD_ADDR_VAR 0 3
27704: PUSH
27705: LD_INT 2
27707: PUSH
27708: LD_INT 3
27710: PUSH
27711: LD_INT 4
27713: PUSH
27714: LD_INT 5
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: ST_TO_ADDR
27723: GO 28446
27725: LD_INT 14
27727: DOUBLE
27728: EQUAL
27729: IFTRUE 27733
27731: GO 27751
27733: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27734: LD_ADDR_VAR 0 3
27738: PUSH
27739: LD_INT 4
27741: PUSH
27742: LD_INT 5
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: ST_TO_ADDR
27749: GO 28446
27751: LD_INT 6
27753: DOUBLE
27754: EQUAL
27755: IFTRUE 27759
27757: GO 27777
27759: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27760: LD_ADDR_VAR 0 3
27764: PUSH
27765: LD_INT 4
27767: PUSH
27768: LD_INT 5
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: ST_TO_ADDR
27775: GO 28446
27777: LD_INT 10
27779: DOUBLE
27780: EQUAL
27781: IFTRUE 27785
27783: GO 27803
27785: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27786: LD_ADDR_VAR 0 3
27790: PUSH
27791: LD_INT 4
27793: PUSH
27794: LD_INT 5
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: ST_TO_ADDR
27801: GO 28446
27803: LD_INT 22
27805: DOUBLE
27806: EQUAL
27807: IFTRUE 27811
27809: GO 27837
27811: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27812: LD_ADDR_VAR 0 3
27816: PUSH
27817: LD_INT 11
27819: PUSH
27820: LD_INT 12
27822: PUSH
27823: LD_INT 13
27825: PUSH
27826: LD_INT 14
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: ST_TO_ADDR
27835: GO 28446
27837: LD_INT 23
27839: DOUBLE
27840: EQUAL
27841: IFTRUE 27845
27843: GO 27871
27845: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27846: LD_ADDR_VAR 0 3
27850: PUSH
27851: LD_INT 11
27853: PUSH
27854: LD_INT 12
27856: PUSH
27857: LD_INT 13
27859: PUSH
27860: LD_INT 14
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: ST_TO_ADDR
27869: GO 28446
27871: LD_INT 24
27873: DOUBLE
27874: EQUAL
27875: IFTRUE 27879
27877: GO 27905
27879: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27880: LD_ADDR_VAR 0 3
27884: PUSH
27885: LD_INT 11
27887: PUSH
27888: LD_INT 12
27890: PUSH
27891: LD_INT 13
27893: PUSH
27894: LD_INT 14
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: ST_TO_ADDR
27903: GO 28446
27905: LD_INT 30
27907: DOUBLE
27908: EQUAL
27909: IFTRUE 27913
27911: GO 27939
27913: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27914: LD_ADDR_VAR 0 3
27918: PUSH
27919: LD_INT 11
27921: PUSH
27922: LD_INT 12
27924: PUSH
27925: LD_INT 13
27927: PUSH
27928: LD_INT 14
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: ST_TO_ADDR
27937: GO 28446
27939: LD_INT 25
27941: DOUBLE
27942: EQUAL
27943: IFTRUE 27947
27945: GO 27965
27947: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27948: LD_ADDR_VAR 0 3
27952: PUSH
27953: LD_INT 13
27955: PUSH
27956: LD_INT 14
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: ST_TO_ADDR
27963: GO 28446
27965: LD_INT 27
27967: DOUBLE
27968: EQUAL
27969: IFTRUE 27973
27971: GO 27991
27973: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27974: LD_ADDR_VAR 0 3
27978: PUSH
27979: LD_INT 13
27981: PUSH
27982: LD_INT 14
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: ST_TO_ADDR
27989: GO 28446
27991: LD_INT 92
27993: DOUBLE
27994: EQUAL
27995: IFTRUE 27999
27997: GO 28025
27999: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28000: LD_ADDR_VAR 0 3
28004: PUSH
28005: LD_INT 11
28007: PUSH
28008: LD_INT 12
28010: PUSH
28011: LD_INT 13
28013: PUSH
28014: LD_INT 14
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: ST_TO_ADDR
28023: GO 28446
28025: LD_INT 28
28027: DOUBLE
28028: EQUAL
28029: IFTRUE 28033
28031: GO 28051
28033: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28034: LD_ADDR_VAR 0 3
28038: PUSH
28039: LD_INT 13
28041: PUSH
28042: LD_INT 14
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: ST_TO_ADDR
28049: GO 28446
28051: LD_INT 29
28053: DOUBLE
28054: EQUAL
28055: IFTRUE 28059
28057: GO 28077
28059: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28060: LD_ADDR_VAR 0 3
28064: PUSH
28065: LD_INT 13
28067: PUSH
28068: LD_INT 14
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: ST_TO_ADDR
28075: GO 28446
28077: LD_INT 31
28079: DOUBLE
28080: EQUAL
28081: IFTRUE 28085
28083: GO 28103
28085: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28086: LD_ADDR_VAR 0 3
28090: PUSH
28091: LD_INT 13
28093: PUSH
28094: LD_INT 14
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: ST_TO_ADDR
28101: GO 28446
28103: LD_INT 26
28105: DOUBLE
28106: EQUAL
28107: IFTRUE 28111
28109: GO 28129
28111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28112: LD_ADDR_VAR 0 3
28116: PUSH
28117: LD_INT 13
28119: PUSH
28120: LD_INT 14
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: ST_TO_ADDR
28127: GO 28446
28129: LD_INT 42
28131: DOUBLE
28132: EQUAL
28133: IFTRUE 28137
28135: GO 28163
28137: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28138: LD_ADDR_VAR 0 3
28142: PUSH
28143: LD_INT 21
28145: PUSH
28146: LD_INT 22
28148: PUSH
28149: LD_INT 23
28151: PUSH
28152: LD_INT 24
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: ST_TO_ADDR
28161: GO 28446
28163: LD_INT 43
28165: DOUBLE
28166: EQUAL
28167: IFTRUE 28171
28169: GO 28197
28171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28172: LD_ADDR_VAR 0 3
28176: PUSH
28177: LD_INT 21
28179: PUSH
28180: LD_INT 22
28182: PUSH
28183: LD_INT 23
28185: PUSH
28186: LD_INT 24
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: ST_TO_ADDR
28195: GO 28446
28197: LD_INT 44
28199: DOUBLE
28200: EQUAL
28201: IFTRUE 28205
28203: GO 28231
28205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28206: LD_ADDR_VAR 0 3
28210: PUSH
28211: LD_INT 21
28213: PUSH
28214: LD_INT 22
28216: PUSH
28217: LD_INT 23
28219: PUSH
28220: LD_INT 24
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: ST_TO_ADDR
28229: GO 28446
28231: LD_INT 45
28233: DOUBLE
28234: EQUAL
28235: IFTRUE 28239
28237: GO 28265
28239: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28240: LD_ADDR_VAR 0 3
28244: PUSH
28245: LD_INT 21
28247: PUSH
28248: LD_INT 22
28250: PUSH
28251: LD_INT 23
28253: PUSH
28254: LD_INT 24
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: ST_TO_ADDR
28263: GO 28446
28265: LD_INT 49
28267: DOUBLE
28268: EQUAL
28269: IFTRUE 28273
28271: GO 28299
28273: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28274: LD_ADDR_VAR 0 3
28278: PUSH
28279: LD_INT 21
28281: PUSH
28282: LD_INT 22
28284: PUSH
28285: LD_INT 23
28287: PUSH
28288: LD_INT 24
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: ST_TO_ADDR
28297: GO 28446
28299: LD_INT 51
28301: DOUBLE
28302: EQUAL
28303: IFTRUE 28307
28305: GO 28333
28307: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28308: LD_ADDR_VAR 0 3
28312: PUSH
28313: LD_INT 21
28315: PUSH
28316: LD_INT 22
28318: PUSH
28319: LD_INT 23
28321: PUSH
28322: LD_INT 24
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: ST_TO_ADDR
28331: GO 28446
28333: LD_INT 52
28335: DOUBLE
28336: EQUAL
28337: IFTRUE 28341
28339: GO 28367
28341: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28342: LD_ADDR_VAR 0 3
28346: PUSH
28347: LD_INT 21
28349: PUSH
28350: LD_INT 22
28352: PUSH
28353: LD_INT 23
28355: PUSH
28356: LD_INT 24
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: ST_TO_ADDR
28365: GO 28446
28367: LD_INT 53
28369: DOUBLE
28370: EQUAL
28371: IFTRUE 28375
28373: GO 28393
28375: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28376: LD_ADDR_VAR 0 3
28380: PUSH
28381: LD_INT 23
28383: PUSH
28384: LD_INT 24
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: ST_TO_ADDR
28391: GO 28446
28393: LD_INT 46
28395: DOUBLE
28396: EQUAL
28397: IFTRUE 28401
28399: GO 28419
28401: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28402: LD_ADDR_VAR 0 3
28406: PUSH
28407: LD_INT 23
28409: PUSH
28410: LD_INT 24
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: ST_TO_ADDR
28417: GO 28446
28419: LD_INT 47
28421: DOUBLE
28422: EQUAL
28423: IFTRUE 28427
28425: GO 28445
28427: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28428: LD_ADDR_VAR 0 3
28432: PUSH
28433: LD_INT 23
28435: PUSH
28436: LD_INT 24
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: ST_TO_ADDR
28443: GO 28446
28445: POP
// result := ( chassis in result ) ;
28446: LD_ADDR_VAR 0 3
28450: PUSH
28451: LD_VAR 0 1
28455: PUSH
28456: LD_VAR 0 3
28460: IN
28461: ST_TO_ADDR
// end ;
28462: LD_VAR 0 3
28466: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28467: LD_INT 0
28469: PPUSH
28470: PPUSH
28471: PPUSH
28472: PPUSH
28473: PPUSH
28474: PPUSH
28475: PPUSH
// result := array ;
28476: LD_ADDR_VAR 0 5
28480: PUSH
28481: LD_VAR 0 1
28485: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28486: LD_VAR 0 1
28490: NOT
28491: PUSH
28492: LD_VAR 0 2
28496: NOT
28497: OR
28498: PUSH
28499: LD_VAR 0 3
28503: NOT
28504: OR
28505: PUSH
28506: LD_VAR 0 2
28510: PUSH
28511: LD_VAR 0 1
28515: GREATER
28516: OR
28517: PUSH
28518: LD_VAR 0 3
28522: PUSH
28523: LD_VAR 0 1
28527: GREATER
28528: OR
28529: IFFALSE 28533
// exit ;
28531: GO 28829
// if direction then
28533: LD_VAR 0 4
28537: IFFALSE 28601
// begin d := 1 ;
28539: LD_ADDR_VAR 0 9
28543: PUSH
28544: LD_INT 1
28546: ST_TO_ADDR
// if i_from > i_to then
28547: LD_VAR 0 2
28551: PUSH
28552: LD_VAR 0 3
28556: GREATER
28557: IFFALSE 28583
// length := ( array - i_from ) + i_to else
28559: LD_ADDR_VAR 0 11
28563: PUSH
28564: LD_VAR 0 1
28568: PUSH
28569: LD_VAR 0 2
28573: MINUS
28574: PUSH
28575: LD_VAR 0 3
28579: PLUS
28580: ST_TO_ADDR
28581: GO 28599
// length := i_to - i_from ;
28583: LD_ADDR_VAR 0 11
28587: PUSH
28588: LD_VAR 0 3
28592: PUSH
28593: LD_VAR 0 2
28597: MINUS
28598: ST_TO_ADDR
// end else
28599: GO 28662
// begin d := - 1 ;
28601: LD_ADDR_VAR 0 9
28605: PUSH
28606: LD_INT 1
28608: NEG
28609: ST_TO_ADDR
// if i_from > i_to then
28610: LD_VAR 0 2
28614: PUSH
28615: LD_VAR 0 3
28619: GREATER
28620: IFFALSE 28640
// length := i_from - i_to else
28622: LD_ADDR_VAR 0 11
28626: PUSH
28627: LD_VAR 0 2
28631: PUSH
28632: LD_VAR 0 3
28636: MINUS
28637: ST_TO_ADDR
28638: GO 28662
// length := ( array - i_to ) + i_from ;
28640: LD_ADDR_VAR 0 11
28644: PUSH
28645: LD_VAR 0 1
28649: PUSH
28650: LD_VAR 0 3
28654: MINUS
28655: PUSH
28656: LD_VAR 0 2
28660: PLUS
28661: ST_TO_ADDR
// end ; if not length then
28662: LD_VAR 0 11
28666: NOT
28667: IFFALSE 28671
// exit ;
28669: GO 28829
// tmp := array ;
28671: LD_ADDR_VAR 0 10
28675: PUSH
28676: LD_VAR 0 1
28680: ST_TO_ADDR
// for i = 1 to length do
28681: LD_ADDR_VAR 0 6
28685: PUSH
28686: DOUBLE
28687: LD_INT 1
28689: DEC
28690: ST_TO_ADDR
28691: LD_VAR 0 11
28695: PUSH
28696: FOR_TO
28697: IFFALSE 28817
// begin for j = 1 to array do
28699: LD_ADDR_VAR 0 7
28703: PUSH
28704: DOUBLE
28705: LD_INT 1
28707: DEC
28708: ST_TO_ADDR
28709: LD_VAR 0 1
28713: PUSH
28714: FOR_TO
28715: IFFALSE 28803
// begin k := j + d ;
28717: LD_ADDR_VAR 0 8
28721: PUSH
28722: LD_VAR 0 7
28726: PUSH
28727: LD_VAR 0 9
28731: PLUS
28732: ST_TO_ADDR
// if k > array then
28733: LD_VAR 0 8
28737: PUSH
28738: LD_VAR 0 1
28742: GREATER
28743: IFFALSE 28753
// k := 1 ;
28745: LD_ADDR_VAR 0 8
28749: PUSH
28750: LD_INT 1
28752: ST_TO_ADDR
// if not k then
28753: LD_VAR 0 8
28757: NOT
28758: IFFALSE 28770
// k := array ;
28760: LD_ADDR_VAR 0 8
28764: PUSH
28765: LD_VAR 0 1
28769: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28770: LD_ADDR_VAR 0 10
28774: PUSH
28775: LD_VAR 0 10
28779: PPUSH
28780: LD_VAR 0 8
28784: PPUSH
28785: LD_VAR 0 1
28789: PUSH
28790: LD_VAR 0 7
28794: ARRAY
28795: PPUSH
28796: CALL_OW 1
28800: ST_TO_ADDR
// end ;
28801: GO 28714
28803: POP
28804: POP
// array := tmp ;
28805: LD_ADDR_VAR 0 1
28809: PUSH
28810: LD_VAR 0 10
28814: ST_TO_ADDR
// end ;
28815: GO 28696
28817: POP
28818: POP
// result := array ;
28819: LD_ADDR_VAR 0 5
28823: PUSH
28824: LD_VAR 0 1
28828: ST_TO_ADDR
// end ;
28829: LD_VAR 0 5
28833: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28834: LD_INT 0
28836: PPUSH
28837: PPUSH
// result := 0 ;
28838: LD_ADDR_VAR 0 3
28842: PUSH
28843: LD_INT 0
28845: ST_TO_ADDR
// if not array or not value in array then
28846: LD_VAR 0 1
28850: NOT
28851: PUSH
28852: LD_VAR 0 2
28856: PUSH
28857: LD_VAR 0 1
28861: IN
28862: NOT
28863: OR
28864: IFFALSE 28868
// exit ;
28866: GO 28922
// for i = 1 to array do
28868: LD_ADDR_VAR 0 4
28872: PUSH
28873: DOUBLE
28874: LD_INT 1
28876: DEC
28877: ST_TO_ADDR
28878: LD_VAR 0 1
28882: PUSH
28883: FOR_TO
28884: IFFALSE 28920
// if value = array [ i ] then
28886: LD_VAR 0 2
28890: PUSH
28891: LD_VAR 0 1
28895: PUSH
28896: LD_VAR 0 4
28900: ARRAY
28901: EQUAL
28902: IFFALSE 28918
// begin result := i ;
28904: LD_ADDR_VAR 0 3
28908: PUSH
28909: LD_VAR 0 4
28913: ST_TO_ADDR
// exit ;
28914: POP
28915: POP
28916: GO 28922
// end ;
28918: GO 28883
28920: POP
28921: POP
// end ;
28922: LD_VAR 0 3
28926: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28927: LD_INT 0
28929: PPUSH
// vc_chassis := chassis ;
28930: LD_ADDR_OWVAR 37
28934: PUSH
28935: LD_VAR 0 1
28939: ST_TO_ADDR
// vc_engine := engine ;
28940: LD_ADDR_OWVAR 39
28944: PUSH
28945: LD_VAR 0 2
28949: ST_TO_ADDR
// vc_control := control ;
28950: LD_ADDR_OWVAR 38
28954: PUSH
28955: LD_VAR 0 3
28959: ST_TO_ADDR
// vc_weapon := weapon ;
28960: LD_ADDR_OWVAR 40
28964: PUSH
28965: LD_VAR 0 4
28969: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28970: LD_ADDR_OWVAR 41
28974: PUSH
28975: LD_VAR 0 5
28979: ST_TO_ADDR
// end ;
28980: LD_VAR 0 6
28984: RET
// export function WantPlant ( unit ) ; var task ; begin
28985: LD_INT 0
28987: PPUSH
28988: PPUSH
// result := false ;
28989: LD_ADDR_VAR 0 2
28993: PUSH
28994: LD_INT 0
28996: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28997: LD_ADDR_VAR 0 3
29001: PUSH
29002: LD_VAR 0 1
29006: PPUSH
29007: CALL_OW 437
29011: ST_TO_ADDR
// if task then
29012: LD_VAR 0 3
29016: IFFALSE 29044
// if task [ 1 ] [ 1 ] = p then
29018: LD_VAR 0 3
29022: PUSH
29023: LD_INT 1
29025: ARRAY
29026: PUSH
29027: LD_INT 1
29029: ARRAY
29030: PUSH
29031: LD_STRING p
29033: EQUAL
29034: IFFALSE 29044
// result := true ;
29036: LD_ADDR_VAR 0 2
29040: PUSH
29041: LD_INT 1
29043: ST_TO_ADDR
// end ;
29044: LD_VAR 0 2
29048: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29049: LD_INT 0
29051: PPUSH
29052: PPUSH
29053: PPUSH
29054: PPUSH
// if pos < 1 then
29055: LD_VAR 0 2
29059: PUSH
29060: LD_INT 1
29062: LESS
29063: IFFALSE 29067
// exit ;
29065: GO 29370
// if pos = 1 then
29067: LD_VAR 0 2
29071: PUSH
29072: LD_INT 1
29074: EQUAL
29075: IFFALSE 29108
// result := Replace ( arr , pos [ 1 ] , value ) else
29077: LD_ADDR_VAR 0 4
29081: PUSH
29082: LD_VAR 0 1
29086: PPUSH
29087: LD_VAR 0 2
29091: PUSH
29092: LD_INT 1
29094: ARRAY
29095: PPUSH
29096: LD_VAR 0 3
29100: PPUSH
29101: CALL_OW 1
29105: ST_TO_ADDR
29106: GO 29370
// begin tmp := arr ;
29108: LD_ADDR_VAR 0 6
29112: PUSH
29113: LD_VAR 0 1
29117: ST_TO_ADDR
// s_arr := [ tmp ] ;
29118: LD_ADDR_VAR 0 7
29122: PUSH
29123: LD_VAR 0 6
29127: PUSH
29128: EMPTY
29129: LIST
29130: ST_TO_ADDR
// for i = 1 to pos - 1 do
29131: LD_ADDR_VAR 0 5
29135: PUSH
29136: DOUBLE
29137: LD_INT 1
29139: DEC
29140: ST_TO_ADDR
29141: LD_VAR 0 2
29145: PUSH
29146: LD_INT 1
29148: MINUS
29149: PUSH
29150: FOR_TO
29151: IFFALSE 29196
// begin tmp := tmp [ pos [ i ] ] ;
29153: LD_ADDR_VAR 0 6
29157: PUSH
29158: LD_VAR 0 6
29162: PUSH
29163: LD_VAR 0 2
29167: PUSH
29168: LD_VAR 0 5
29172: ARRAY
29173: ARRAY
29174: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29175: LD_ADDR_VAR 0 7
29179: PUSH
29180: LD_VAR 0 7
29184: PUSH
29185: LD_VAR 0 6
29189: PUSH
29190: EMPTY
29191: LIST
29192: ADD
29193: ST_TO_ADDR
// end ;
29194: GO 29150
29196: POP
29197: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29198: LD_ADDR_VAR 0 6
29202: PUSH
29203: LD_VAR 0 6
29207: PPUSH
29208: LD_VAR 0 2
29212: PUSH
29213: LD_VAR 0 2
29217: ARRAY
29218: PPUSH
29219: LD_VAR 0 3
29223: PPUSH
29224: CALL_OW 1
29228: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29229: LD_ADDR_VAR 0 7
29233: PUSH
29234: LD_VAR 0 7
29238: PPUSH
29239: LD_VAR 0 7
29243: PPUSH
29244: LD_VAR 0 6
29248: PPUSH
29249: CALL_OW 1
29253: ST_TO_ADDR
// for i = s_arr downto 2 do
29254: LD_ADDR_VAR 0 5
29258: PUSH
29259: DOUBLE
29260: LD_VAR 0 7
29264: INC
29265: ST_TO_ADDR
29266: LD_INT 2
29268: PUSH
29269: FOR_DOWNTO
29270: IFFALSE 29354
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29272: LD_ADDR_VAR 0 6
29276: PUSH
29277: LD_VAR 0 7
29281: PUSH
29282: LD_VAR 0 5
29286: PUSH
29287: LD_INT 1
29289: MINUS
29290: ARRAY
29291: PPUSH
29292: LD_VAR 0 2
29296: PUSH
29297: LD_VAR 0 5
29301: PUSH
29302: LD_INT 1
29304: MINUS
29305: ARRAY
29306: PPUSH
29307: LD_VAR 0 7
29311: PUSH
29312: LD_VAR 0 5
29316: ARRAY
29317: PPUSH
29318: CALL_OW 1
29322: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29323: LD_ADDR_VAR 0 7
29327: PUSH
29328: LD_VAR 0 7
29332: PPUSH
29333: LD_VAR 0 5
29337: PUSH
29338: LD_INT 1
29340: MINUS
29341: PPUSH
29342: LD_VAR 0 6
29346: PPUSH
29347: CALL_OW 1
29351: ST_TO_ADDR
// end ;
29352: GO 29269
29354: POP
29355: POP
// result := s_arr [ 1 ] ;
29356: LD_ADDR_VAR 0 4
29360: PUSH
29361: LD_VAR 0 7
29365: PUSH
29366: LD_INT 1
29368: ARRAY
29369: ST_TO_ADDR
// end ; end ;
29370: LD_VAR 0 4
29374: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29375: LD_INT 0
29377: PPUSH
29378: PPUSH
// if not list then
29379: LD_VAR 0 1
29383: NOT
29384: IFFALSE 29388
// exit ;
29386: GO 29479
// i := list [ pos1 ] ;
29388: LD_ADDR_VAR 0 5
29392: PUSH
29393: LD_VAR 0 1
29397: PUSH
29398: LD_VAR 0 2
29402: ARRAY
29403: ST_TO_ADDR
// if not i then
29404: LD_VAR 0 5
29408: NOT
29409: IFFALSE 29413
// exit ;
29411: GO 29479
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29413: LD_ADDR_VAR 0 1
29417: PUSH
29418: LD_VAR 0 1
29422: PPUSH
29423: LD_VAR 0 2
29427: PPUSH
29428: LD_VAR 0 1
29432: PUSH
29433: LD_VAR 0 3
29437: ARRAY
29438: PPUSH
29439: CALL_OW 1
29443: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29444: LD_ADDR_VAR 0 1
29448: PUSH
29449: LD_VAR 0 1
29453: PPUSH
29454: LD_VAR 0 3
29458: PPUSH
29459: LD_VAR 0 5
29463: PPUSH
29464: CALL_OW 1
29468: ST_TO_ADDR
// result := list ;
29469: LD_ADDR_VAR 0 4
29473: PUSH
29474: LD_VAR 0 1
29478: ST_TO_ADDR
// end ;
29479: LD_VAR 0 4
29483: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29484: LD_INT 0
29486: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29487: LD_ADDR_VAR 0 5
29491: PUSH
29492: LD_VAR 0 1
29496: PPUSH
29497: CALL_OW 250
29501: PPUSH
29502: LD_VAR 0 1
29506: PPUSH
29507: CALL_OW 251
29511: PPUSH
29512: LD_VAR 0 2
29516: PPUSH
29517: LD_VAR 0 3
29521: PPUSH
29522: LD_VAR 0 4
29526: PPUSH
29527: CALL 29905 0 5
29531: ST_TO_ADDR
// end ;
29532: LD_VAR 0 5
29536: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
29537: LD_INT 0
29539: PPUSH
29540: PPUSH
29541: PPUSH
29542: PPUSH
// if not list or not unit then
29543: LD_VAR 0 2
29547: NOT
29548: PUSH
29549: LD_VAR 0 1
29553: NOT
29554: OR
29555: IFFALSE 29559
// exit ;
29557: GO 29900
// result := [ ] ;
29559: LD_ADDR_VAR 0 5
29563: PUSH
29564: EMPTY
29565: ST_TO_ADDR
// for i in list do
29566: LD_ADDR_VAR 0 6
29570: PUSH
29571: LD_VAR 0 2
29575: PUSH
29576: FOR_IN
29577: IFFALSE 29795
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
29579: LD_ADDR_VAR 0 8
29583: PUSH
29584: LD_VAR 0 1
29588: PPUSH
29589: LD_VAR 0 6
29593: PUSH
29594: LD_INT 1
29596: ARRAY
29597: PPUSH
29598: LD_VAR 0 6
29602: PUSH
29603: LD_INT 2
29605: ARRAY
29606: PPUSH
29607: CALL_OW 297
29611: ST_TO_ADDR
// if not Count ( result ) then
29612: LD_VAR 0 5
29616: PPUSH
29617: CALL 26189 0 1
29621: NOT
29622: IFFALSE 29655
// begin result := Join ( result , [ i , tmp ] ) ;
29624: LD_ADDR_VAR 0 5
29628: PUSH
29629: LD_VAR 0 5
29633: PPUSH
29634: LD_VAR 0 6
29638: PUSH
29639: LD_VAR 0 8
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PPUSH
29648: CALL 61778 0 2
29652: ST_TO_ADDR
// continue ;
29653: GO 29576
// end ; if result [ result ] [ 2 ] <= tmp then
29655: LD_VAR 0 5
29659: PUSH
29660: LD_VAR 0 5
29664: ARRAY
29665: PUSH
29666: LD_INT 2
29668: ARRAY
29669: PUSH
29670: LD_VAR 0 8
29674: LESSEQUAL
29675: IFFALSE 29708
// result := Join ( result , [ i , tmp ] ) else
29677: LD_ADDR_VAR 0 5
29681: PUSH
29682: LD_VAR 0 5
29686: PPUSH
29687: LD_VAR 0 6
29691: PUSH
29692: LD_VAR 0 8
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PPUSH
29701: CALL 61778 0 2
29705: ST_TO_ADDR
29706: GO 29793
// begin for j := 1 to Count ( result ) do
29708: LD_ADDR_VAR 0 7
29712: PUSH
29713: DOUBLE
29714: LD_INT 1
29716: DEC
29717: ST_TO_ADDR
29718: LD_VAR 0 5
29722: PPUSH
29723: CALL 26189 0 1
29727: PUSH
29728: FOR_TO
29729: IFFALSE 29791
// begin if tmp < result [ j ] [ 2 ] then
29731: LD_VAR 0 8
29735: PUSH
29736: LD_VAR 0 5
29740: PUSH
29741: LD_VAR 0 7
29745: ARRAY
29746: PUSH
29747: LD_INT 2
29749: ARRAY
29750: LESS
29751: IFFALSE 29789
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29753: LD_ADDR_VAR 0 5
29757: PUSH
29758: LD_VAR 0 5
29762: PPUSH
29763: LD_VAR 0 7
29767: PPUSH
29768: LD_VAR 0 6
29772: PUSH
29773: LD_VAR 0 8
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PPUSH
29782: CALL_OW 2
29786: ST_TO_ADDR
// break ;
29787: GO 29791
// end ; end ;
29789: GO 29728
29791: POP
29792: POP
// end ; end ;
29793: GO 29576
29795: POP
29796: POP
// if result and not asc then
29797: LD_VAR 0 5
29801: PUSH
29802: LD_VAR 0 3
29806: NOT
29807: AND
29808: IFFALSE 29825
// result := ReverseArray ( result ) ;
29810: LD_ADDR_VAR 0 5
29814: PUSH
29815: LD_VAR 0 5
29819: PPUSH
29820: CALL 57065 0 1
29824: ST_TO_ADDR
// tmp := [ ] ;
29825: LD_ADDR_VAR 0 8
29829: PUSH
29830: EMPTY
29831: ST_TO_ADDR
// if mode then
29832: LD_VAR 0 4
29836: IFFALSE 29900
// begin for i := 1 to result do
29838: LD_ADDR_VAR 0 6
29842: PUSH
29843: DOUBLE
29844: LD_INT 1
29846: DEC
29847: ST_TO_ADDR
29848: LD_VAR 0 5
29852: PUSH
29853: FOR_TO
29854: IFFALSE 29888
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
29856: LD_ADDR_VAR 0 8
29860: PUSH
29861: LD_VAR 0 8
29865: PPUSH
29866: LD_VAR 0 5
29870: PUSH
29871: LD_VAR 0 6
29875: ARRAY
29876: PUSH
29877: LD_INT 1
29879: ARRAY
29880: PPUSH
29881: CALL 61778 0 2
29885: ST_TO_ADDR
29886: GO 29853
29888: POP
29889: POP
// result := tmp ;
29890: LD_ADDR_VAR 0 5
29894: PUSH
29895: LD_VAR 0 8
29899: ST_TO_ADDR
// end ; end ;
29900: LD_VAR 0 5
29904: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29905: LD_INT 0
29907: PPUSH
29908: PPUSH
29909: PPUSH
29910: PPUSH
// if not list then
29911: LD_VAR 0 3
29915: NOT
29916: IFFALSE 29920
// exit ;
29918: GO 30308
// result := [ ] ;
29920: LD_ADDR_VAR 0 6
29924: PUSH
29925: EMPTY
29926: ST_TO_ADDR
// for i in list do
29927: LD_ADDR_VAR 0 7
29931: PUSH
29932: LD_VAR 0 3
29936: PUSH
29937: FOR_IN
29938: IFFALSE 30140
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29940: LD_ADDR_VAR 0 9
29944: PUSH
29945: LD_VAR 0 7
29949: PPUSH
29950: LD_VAR 0 1
29954: PPUSH
29955: LD_VAR 0 2
29959: PPUSH
29960: CALL_OW 297
29964: ST_TO_ADDR
// if not result then
29965: LD_VAR 0 6
29969: NOT
29970: IFFALSE 29996
// result := [ [ i , tmp ] ] else
29972: LD_ADDR_VAR 0 6
29976: PUSH
29977: LD_VAR 0 7
29981: PUSH
29982: LD_VAR 0 9
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: EMPTY
29992: LIST
29993: ST_TO_ADDR
29994: GO 30138
// begin if result [ result ] [ 2 ] < tmp then
29996: LD_VAR 0 6
30000: PUSH
30001: LD_VAR 0 6
30005: ARRAY
30006: PUSH
30007: LD_INT 2
30009: ARRAY
30010: PUSH
30011: LD_VAR 0 9
30015: LESS
30016: IFFALSE 30058
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30018: LD_ADDR_VAR 0 6
30022: PUSH
30023: LD_VAR 0 6
30027: PPUSH
30028: LD_VAR 0 6
30032: PUSH
30033: LD_INT 1
30035: PLUS
30036: PPUSH
30037: LD_VAR 0 7
30041: PUSH
30042: LD_VAR 0 9
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PPUSH
30051: CALL_OW 2
30055: ST_TO_ADDR
30056: GO 30138
// for j = 1 to result do
30058: LD_ADDR_VAR 0 8
30062: PUSH
30063: DOUBLE
30064: LD_INT 1
30066: DEC
30067: ST_TO_ADDR
30068: LD_VAR 0 6
30072: PUSH
30073: FOR_TO
30074: IFFALSE 30136
// begin if tmp < result [ j ] [ 2 ] then
30076: LD_VAR 0 9
30080: PUSH
30081: LD_VAR 0 6
30085: PUSH
30086: LD_VAR 0 8
30090: ARRAY
30091: PUSH
30092: LD_INT 2
30094: ARRAY
30095: LESS
30096: IFFALSE 30134
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30098: LD_ADDR_VAR 0 6
30102: PUSH
30103: LD_VAR 0 6
30107: PPUSH
30108: LD_VAR 0 8
30112: PPUSH
30113: LD_VAR 0 7
30117: PUSH
30118: LD_VAR 0 9
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PPUSH
30127: CALL_OW 2
30131: ST_TO_ADDR
// break ;
30132: GO 30136
// end ; end ;
30134: GO 30073
30136: POP
30137: POP
// end ; end ;
30138: GO 29937
30140: POP
30141: POP
// if result and not asc then
30142: LD_VAR 0 6
30146: PUSH
30147: LD_VAR 0 4
30151: NOT
30152: AND
30153: IFFALSE 30228
// begin tmp := result ;
30155: LD_ADDR_VAR 0 9
30159: PUSH
30160: LD_VAR 0 6
30164: ST_TO_ADDR
// for i = tmp downto 1 do
30165: LD_ADDR_VAR 0 7
30169: PUSH
30170: DOUBLE
30171: LD_VAR 0 9
30175: INC
30176: ST_TO_ADDR
30177: LD_INT 1
30179: PUSH
30180: FOR_DOWNTO
30181: IFFALSE 30226
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30183: LD_ADDR_VAR 0 6
30187: PUSH
30188: LD_VAR 0 6
30192: PPUSH
30193: LD_VAR 0 9
30197: PUSH
30198: LD_VAR 0 7
30202: MINUS
30203: PUSH
30204: LD_INT 1
30206: PLUS
30207: PPUSH
30208: LD_VAR 0 9
30212: PUSH
30213: LD_VAR 0 7
30217: ARRAY
30218: PPUSH
30219: CALL_OW 1
30223: ST_TO_ADDR
30224: GO 30180
30226: POP
30227: POP
// end ; tmp := [ ] ;
30228: LD_ADDR_VAR 0 9
30232: PUSH
30233: EMPTY
30234: ST_TO_ADDR
// if mode then
30235: LD_VAR 0 5
30239: IFFALSE 30308
// begin for i = 1 to result do
30241: LD_ADDR_VAR 0 7
30245: PUSH
30246: DOUBLE
30247: LD_INT 1
30249: DEC
30250: ST_TO_ADDR
30251: LD_VAR 0 6
30255: PUSH
30256: FOR_TO
30257: IFFALSE 30296
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30259: LD_ADDR_VAR 0 9
30263: PUSH
30264: LD_VAR 0 9
30268: PPUSH
30269: LD_VAR 0 7
30273: PPUSH
30274: LD_VAR 0 6
30278: PUSH
30279: LD_VAR 0 7
30283: ARRAY
30284: PUSH
30285: LD_INT 1
30287: ARRAY
30288: PPUSH
30289: CALL_OW 1
30293: ST_TO_ADDR
30294: GO 30256
30296: POP
30297: POP
// result := tmp ;
30298: LD_ADDR_VAR 0 6
30302: PUSH
30303: LD_VAR 0 9
30307: ST_TO_ADDR
// end ; end ;
30308: LD_VAR 0 6
30312: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30313: LD_INT 0
30315: PPUSH
30316: PPUSH
30317: PPUSH
30318: PPUSH
30319: PPUSH
30320: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30321: LD_ADDR_VAR 0 5
30325: PUSH
30326: LD_INT 0
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: EMPTY
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: ST_TO_ADDR
// if not x or not y then
30343: LD_VAR 0 2
30347: NOT
30348: PUSH
30349: LD_VAR 0 3
30353: NOT
30354: OR
30355: IFFALSE 30359
// exit ;
30357: GO 32009
// if not range then
30359: LD_VAR 0 4
30363: NOT
30364: IFFALSE 30374
// range := 10 ;
30366: LD_ADDR_VAR 0 4
30370: PUSH
30371: LD_INT 10
30373: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30374: LD_ADDR_VAR 0 8
30378: PUSH
30379: LD_INT 81
30381: PUSH
30382: LD_VAR 0 1
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 92
30393: PUSH
30394: LD_VAR 0 2
30398: PUSH
30399: LD_VAR 0 3
30403: PUSH
30404: LD_VAR 0 4
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 3
30417: PUSH
30418: LD_INT 21
30420: PUSH
30421: LD_INT 3
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: LIST
30436: PPUSH
30437: CALL_OW 69
30441: ST_TO_ADDR
// if not tmp then
30442: LD_VAR 0 8
30446: NOT
30447: IFFALSE 30451
// exit ;
30449: GO 32009
// for i in tmp do
30451: LD_ADDR_VAR 0 6
30455: PUSH
30456: LD_VAR 0 8
30460: PUSH
30461: FOR_IN
30462: IFFALSE 31984
// begin points := [ 0 , 0 , 0 ] ;
30464: LD_ADDR_VAR 0 9
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: LD_INT 0
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: LIST
30482: ST_TO_ADDR
// bpoints := 1 ;
30483: LD_ADDR_VAR 0 10
30487: PUSH
30488: LD_INT 1
30490: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30491: LD_VAR 0 6
30495: PPUSH
30496: CALL_OW 247
30500: PUSH
30501: LD_INT 1
30503: DOUBLE
30504: EQUAL
30505: IFTRUE 30509
30507: GO 31087
30509: POP
// begin if GetClass ( i ) = 1 then
30510: LD_VAR 0 6
30514: PPUSH
30515: CALL_OW 257
30519: PUSH
30520: LD_INT 1
30522: EQUAL
30523: IFFALSE 30544
// points := [ 10 , 5 , 3 ] ;
30525: LD_ADDR_VAR 0 9
30529: PUSH
30530: LD_INT 10
30532: PUSH
30533: LD_INT 5
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: LIST
30543: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30544: LD_VAR 0 6
30548: PPUSH
30549: CALL_OW 257
30553: PUSH
30554: LD_INT 2
30556: PUSH
30557: LD_INT 3
30559: PUSH
30560: LD_INT 4
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: LIST
30567: IN
30568: IFFALSE 30589
// points := [ 3 , 2 , 1 ] ;
30570: LD_ADDR_VAR 0 9
30574: PUSH
30575: LD_INT 3
30577: PUSH
30578: LD_INT 2
30580: PUSH
30581: LD_INT 1
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: LIST
30588: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30589: LD_VAR 0 6
30593: PPUSH
30594: CALL_OW 257
30598: PUSH
30599: LD_INT 5
30601: EQUAL
30602: IFFALSE 30623
// points := [ 130 , 5 , 2 ] ;
30604: LD_ADDR_VAR 0 9
30608: PUSH
30609: LD_INT 130
30611: PUSH
30612: LD_INT 5
30614: PUSH
30615: LD_INT 2
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30623: LD_VAR 0 6
30627: PPUSH
30628: CALL_OW 257
30632: PUSH
30633: LD_INT 8
30635: EQUAL
30636: IFFALSE 30657
// points := [ 35 , 35 , 30 ] ;
30638: LD_ADDR_VAR 0 9
30642: PUSH
30643: LD_INT 35
30645: PUSH
30646: LD_INT 35
30648: PUSH
30649: LD_INT 30
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30657: LD_VAR 0 6
30661: PPUSH
30662: CALL_OW 257
30666: PUSH
30667: LD_INT 9
30669: EQUAL
30670: IFFALSE 30691
// points := [ 20 , 55 , 40 ] ;
30672: LD_ADDR_VAR 0 9
30676: PUSH
30677: LD_INT 20
30679: PUSH
30680: LD_INT 55
30682: PUSH
30683: LD_INT 40
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: LIST
30690: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30691: LD_VAR 0 6
30695: PPUSH
30696: CALL_OW 257
30700: PUSH
30701: LD_INT 12
30703: PUSH
30704: LD_INT 16
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: IN
30711: IFFALSE 30732
// points := [ 5 , 3 , 2 ] ;
30713: LD_ADDR_VAR 0 9
30717: PUSH
30718: LD_INT 5
30720: PUSH
30721: LD_INT 3
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: LIST
30731: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30732: LD_VAR 0 6
30736: PPUSH
30737: CALL_OW 257
30741: PUSH
30742: LD_INT 17
30744: EQUAL
30745: IFFALSE 30766
// points := [ 100 , 50 , 75 ] ;
30747: LD_ADDR_VAR 0 9
30751: PUSH
30752: LD_INT 100
30754: PUSH
30755: LD_INT 50
30757: PUSH
30758: LD_INT 75
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30766: LD_VAR 0 6
30770: PPUSH
30771: CALL_OW 257
30775: PUSH
30776: LD_INT 15
30778: EQUAL
30779: IFFALSE 30800
// points := [ 10 , 5 , 3 ] ;
30781: LD_ADDR_VAR 0 9
30785: PUSH
30786: LD_INT 10
30788: PUSH
30789: LD_INT 5
30791: PUSH
30792: LD_INT 3
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30800: LD_VAR 0 6
30804: PPUSH
30805: CALL_OW 257
30809: PUSH
30810: LD_INT 14
30812: EQUAL
30813: IFFALSE 30834
// points := [ 10 , 0 , 0 ] ;
30815: LD_ADDR_VAR 0 9
30819: PUSH
30820: LD_INT 10
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: LIST
30833: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30834: LD_VAR 0 6
30838: PPUSH
30839: CALL_OW 257
30843: PUSH
30844: LD_INT 11
30846: EQUAL
30847: IFFALSE 30868
// points := [ 30 , 10 , 5 ] ;
30849: LD_ADDR_VAR 0 9
30853: PUSH
30854: LD_INT 30
30856: PUSH
30857: LD_INT 10
30859: PUSH
30860: LD_INT 5
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: LIST
30867: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30868: LD_VAR 0 1
30872: PPUSH
30873: LD_INT 5
30875: PPUSH
30876: CALL_OW 321
30880: PUSH
30881: LD_INT 2
30883: EQUAL
30884: IFFALSE 30901
// bpoints := bpoints * 1.8 ;
30886: LD_ADDR_VAR 0 10
30890: PUSH
30891: LD_VAR 0 10
30895: PUSH
30896: LD_REAL  1.80000000000000E+0000
30899: MUL
30900: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30901: LD_VAR 0 6
30905: PPUSH
30906: CALL_OW 257
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 2
30916: PUSH
30917: LD_INT 3
30919: PUSH
30920: LD_INT 4
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: IN
30929: PUSH
30930: LD_VAR 0 1
30934: PPUSH
30935: LD_INT 51
30937: PPUSH
30938: CALL_OW 321
30942: PUSH
30943: LD_INT 2
30945: EQUAL
30946: AND
30947: IFFALSE 30964
// bpoints := bpoints * 1.2 ;
30949: LD_ADDR_VAR 0 10
30953: PUSH
30954: LD_VAR 0 10
30958: PUSH
30959: LD_REAL  1.20000000000000E+0000
30962: MUL
30963: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30964: LD_VAR 0 6
30968: PPUSH
30969: CALL_OW 257
30973: PUSH
30974: LD_INT 5
30976: PUSH
30977: LD_INT 7
30979: PUSH
30980: LD_INT 9
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: LIST
30987: IN
30988: PUSH
30989: LD_VAR 0 1
30993: PPUSH
30994: LD_INT 52
30996: PPUSH
30997: CALL_OW 321
31001: PUSH
31002: LD_INT 2
31004: EQUAL
31005: AND
31006: IFFALSE 31023
// bpoints := bpoints * 1.5 ;
31008: LD_ADDR_VAR 0 10
31012: PUSH
31013: LD_VAR 0 10
31017: PUSH
31018: LD_REAL  1.50000000000000E+0000
31021: MUL
31022: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31023: LD_VAR 0 1
31027: PPUSH
31028: LD_INT 66
31030: PPUSH
31031: CALL_OW 321
31035: PUSH
31036: LD_INT 2
31038: EQUAL
31039: IFFALSE 31056
// bpoints := bpoints * 1.1 ;
31041: LD_ADDR_VAR 0 10
31045: PUSH
31046: LD_VAR 0 10
31050: PUSH
31051: LD_REAL  1.10000000000000E+0000
31054: MUL
31055: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31056: LD_ADDR_VAR 0 10
31060: PUSH
31061: LD_VAR 0 10
31065: PUSH
31066: LD_VAR 0 6
31070: PPUSH
31071: LD_INT 1
31073: PPUSH
31074: CALL_OW 259
31078: PUSH
31079: LD_REAL  1.15000000000000E+0000
31082: MUL
31083: MUL
31084: ST_TO_ADDR
// end ; unit_vehicle :
31085: GO 31913
31087: LD_INT 2
31089: DOUBLE
31090: EQUAL
31091: IFTRUE 31095
31093: GO 31901
31095: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31096: LD_VAR 0 6
31100: PPUSH
31101: CALL_OW 264
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: LD_INT 42
31111: PUSH
31112: LD_INT 24
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: LIST
31119: IN
31120: IFFALSE 31141
// points := [ 25 , 5 , 3 ] ;
31122: LD_ADDR_VAR 0 9
31126: PUSH
31127: LD_INT 25
31129: PUSH
31130: LD_INT 5
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31141: LD_VAR 0 6
31145: PPUSH
31146: CALL_OW 264
31150: PUSH
31151: LD_INT 4
31153: PUSH
31154: LD_INT 43
31156: PUSH
31157: LD_INT 25
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: LIST
31164: IN
31165: IFFALSE 31186
// points := [ 40 , 15 , 5 ] ;
31167: LD_ADDR_VAR 0 9
31171: PUSH
31172: LD_INT 40
31174: PUSH
31175: LD_INT 15
31177: PUSH
31178: LD_INT 5
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31186: LD_VAR 0 6
31190: PPUSH
31191: CALL_OW 264
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: LD_INT 23
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: IN
31206: IFFALSE 31227
// points := [ 7 , 25 , 8 ] ;
31208: LD_ADDR_VAR 0 9
31212: PUSH
31213: LD_INT 7
31215: PUSH
31216: LD_INT 25
31218: PUSH
31219: LD_INT 8
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: LIST
31226: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31227: LD_VAR 0 6
31231: PPUSH
31232: CALL_OW 264
31236: PUSH
31237: LD_INT 5
31239: PUSH
31240: LD_INT 27
31242: PUSH
31243: LD_INT 44
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: LIST
31250: IN
31251: IFFALSE 31272
// points := [ 14 , 50 , 16 ] ;
31253: LD_ADDR_VAR 0 9
31257: PUSH
31258: LD_INT 14
31260: PUSH
31261: LD_INT 50
31263: PUSH
31264: LD_INT 16
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: LIST
31271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31272: LD_VAR 0 6
31276: PPUSH
31277: CALL_OW 264
31281: PUSH
31282: LD_INT 6
31284: PUSH
31285: LD_INT 46
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: IN
31292: IFFALSE 31313
// points := [ 32 , 120 , 70 ] ;
31294: LD_ADDR_VAR 0 9
31298: PUSH
31299: LD_INT 32
31301: PUSH
31302: LD_INT 120
31304: PUSH
31305: LD_INT 70
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: LIST
31312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31313: LD_VAR 0 6
31317: PPUSH
31318: CALL_OW 264
31322: PUSH
31323: LD_INT 7
31325: PUSH
31326: LD_INT 28
31328: PUSH
31329: LD_INT 45
31331: PUSH
31332: LD_INT 92
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: IN
31341: IFFALSE 31362
// points := [ 35 , 20 , 45 ] ;
31343: LD_ADDR_VAR 0 9
31347: PUSH
31348: LD_INT 35
31350: PUSH
31351: LD_INT 20
31353: PUSH
31354: LD_INT 45
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: LIST
31361: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31362: LD_VAR 0 6
31366: PPUSH
31367: CALL_OW 264
31371: PUSH
31372: LD_INT 47
31374: PUSH
31375: EMPTY
31376: LIST
31377: IN
31378: IFFALSE 31399
// points := [ 67 , 45 , 75 ] ;
31380: LD_ADDR_VAR 0 9
31384: PUSH
31385: LD_INT 67
31387: PUSH
31388: LD_INT 45
31390: PUSH
31391: LD_INT 75
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31399: LD_VAR 0 6
31403: PPUSH
31404: CALL_OW 264
31408: PUSH
31409: LD_INT 26
31411: PUSH
31412: EMPTY
31413: LIST
31414: IN
31415: IFFALSE 31436
// points := [ 120 , 30 , 80 ] ;
31417: LD_ADDR_VAR 0 9
31421: PUSH
31422: LD_INT 120
31424: PUSH
31425: LD_INT 30
31427: PUSH
31428: LD_INT 80
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: LIST
31435: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31436: LD_VAR 0 6
31440: PPUSH
31441: CALL_OW 264
31445: PUSH
31446: LD_INT 22
31448: PUSH
31449: EMPTY
31450: LIST
31451: IN
31452: IFFALSE 31473
// points := [ 40 , 1 , 1 ] ;
31454: LD_ADDR_VAR 0 9
31458: PUSH
31459: LD_INT 40
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: LD_INT 1
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31473: LD_VAR 0 6
31477: PPUSH
31478: CALL_OW 264
31482: PUSH
31483: LD_INT 29
31485: PUSH
31486: EMPTY
31487: LIST
31488: IN
31489: IFFALSE 31510
// points := [ 70 , 200 , 400 ] ;
31491: LD_ADDR_VAR 0 9
31495: PUSH
31496: LD_INT 70
31498: PUSH
31499: LD_INT 200
31501: PUSH
31502: LD_INT 400
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: LIST
31509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31510: LD_VAR 0 6
31514: PPUSH
31515: CALL_OW 264
31519: PUSH
31520: LD_INT 14
31522: PUSH
31523: LD_INT 53
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: IN
31530: IFFALSE 31551
// points := [ 40 , 10 , 20 ] ;
31532: LD_ADDR_VAR 0 9
31536: PUSH
31537: LD_INT 40
31539: PUSH
31540: LD_INT 10
31542: PUSH
31543: LD_INT 20
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31551: LD_VAR 0 6
31555: PPUSH
31556: CALL_OW 264
31560: PUSH
31561: LD_INT 9
31563: PUSH
31564: EMPTY
31565: LIST
31566: IN
31567: IFFALSE 31588
// points := [ 5 , 70 , 20 ] ;
31569: LD_ADDR_VAR 0 9
31573: PUSH
31574: LD_INT 5
31576: PUSH
31577: LD_INT 70
31579: PUSH
31580: LD_INT 20
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: LIST
31587: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31588: LD_VAR 0 6
31592: PPUSH
31593: CALL_OW 264
31597: PUSH
31598: LD_INT 10
31600: PUSH
31601: EMPTY
31602: LIST
31603: IN
31604: IFFALSE 31625
// points := [ 35 , 110 , 70 ] ;
31606: LD_ADDR_VAR 0 9
31610: PUSH
31611: LD_INT 35
31613: PUSH
31614: LD_INT 110
31616: PUSH
31617: LD_INT 70
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31625: LD_VAR 0 6
31629: PPUSH
31630: CALL_OW 265
31634: PUSH
31635: LD_INT 25
31637: EQUAL
31638: IFFALSE 31659
// points := [ 80 , 65 , 100 ] ;
31640: LD_ADDR_VAR 0 9
31644: PUSH
31645: LD_INT 80
31647: PUSH
31648: LD_INT 65
31650: PUSH
31651: LD_INT 100
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: LIST
31658: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31659: LD_VAR 0 6
31663: PPUSH
31664: CALL_OW 263
31668: PUSH
31669: LD_INT 1
31671: EQUAL
31672: IFFALSE 31707
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31674: LD_ADDR_VAR 0 10
31678: PUSH
31679: LD_VAR 0 10
31683: PUSH
31684: LD_VAR 0 6
31688: PPUSH
31689: CALL_OW 311
31693: PPUSH
31694: LD_INT 3
31696: PPUSH
31697: CALL_OW 259
31701: PUSH
31702: LD_INT 4
31704: MUL
31705: MUL
31706: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31707: LD_VAR 0 6
31711: PPUSH
31712: CALL_OW 263
31716: PUSH
31717: LD_INT 2
31719: EQUAL
31720: IFFALSE 31771
// begin j := IsControledBy ( i ) ;
31722: LD_ADDR_VAR 0 7
31726: PUSH
31727: LD_VAR 0 6
31731: PPUSH
31732: CALL_OW 312
31736: ST_TO_ADDR
// if j then
31737: LD_VAR 0 7
31741: IFFALSE 31771
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31743: LD_ADDR_VAR 0 10
31747: PUSH
31748: LD_VAR 0 10
31752: PUSH
31753: LD_VAR 0 7
31757: PPUSH
31758: LD_INT 3
31760: PPUSH
31761: CALL_OW 259
31765: PUSH
31766: LD_INT 3
31768: MUL
31769: MUL
31770: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31771: LD_VAR 0 6
31775: PPUSH
31776: CALL_OW 264
31780: PUSH
31781: LD_INT 5
31783: PUSH
31784: LD_INT 6
31786: PUSH
31787: LD_INT 46
31789: PUSH
31790: LD_INT 44
31792: PUSH
31793: LD_INT 47
31795: PUSH
31796: LD_INT 45
31798: PUSH
31799: LD_INT 28
31801: PUSH
31802: LD_INT 7
31804: PUSH
31805: LD_INT 27
31807: PUSH
31808: LD_INT 29
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: IN
31823: PUSH
31824: LD_VAR 0 1
31828: PPUSH
31829: LD_INT 52
31831: PPUSH
31832: CALL_OW 321
31836: PUSH
31837: LD_INT 2
31839: EQUAL
31840: AND
31841: IFFALSE 31858
// bpoints := bpoints * 1.2 ;
31843: LD_ADDR_VAR 0 10
31847: PUSH
31848: LD_VAR 0 10
31852: PUSH
31853: LD_REAL  1.20000000000000E+0000
31856: MUL
31857: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31858: LD_VAR 0 6
31862: PPUSH
31863: CALL_OW 264
31867: PUSH
31868: LD_INT 6
31870: PUSH
31871: LD_INT 46
31873: PUSH
31874: LD_INT 47
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: IN
31882: IFFALSE 31899
// bpoints := bpoints * 1.2 ;
31884: LD_ADDR_VAR 0 10
31888: PUSH
31889: LD_VAR 0 10
31893: PUSH
31894: LD_REAL  1.20000000000000E+0000
31897: MUL
31898: ST_TO_ADDR
// end ; unit_building :
31899: GO 31913
31901: LD_INT 3
31903: DOUBLE
31904: EQUAL
31905: IFTRUE 31909
31907: GO 31912
31909: POP
// ; end ;
31910: GO 31913
31912: POP
// for j = 1 to 3 do
31913: LD_ADDR_VAR 0 7
31917: PUSH
31918: DOUBLE
31919: LD_INT 1
31921: DEC
31922: ST_TO_ADDR
31923: LD_INT 3
31925: PUSH
31926: FOR_TO
31927: IFFALSE 31980
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31929: LD_ADDR_VAR 0 5
31933: PUSH
31934: LD_VAR 0 5
31938: PPUSH
31939: LD_VAR 0 7
31943: PPUSH
31944: LD_VAR 0 5
31948: PUSH
31949: LD_VAR 0 7
31953: ARRAY
31954: PUSH
31955: LD_VAR 0 9
31959: PUSH
31960: LD_VAR 0 7
31964: ARRAY
31965: PUSH
31966: LD_VAR 0 10
31970: MUL
31971: PLUS
31972: PPUSH
31973: CALL_OW 1
31977: ST_TO_ADDR
31978: GO 31926
31980: POP
31981: POP
// end ;
31982: GO 30461
31984: POP
31985: POP
// result := Replace ( result , 4 , tmp ) ;
31986: LD_ADDR_VAR 0 5
31990: PUSH
31991: LD_VAR 0 5
31995: PPUSH
31996: LD_INT 4
31998: PPUSH
31999: LD_VAR 0 8
32003: PPUSH
32004: CALL_OW 1
32008: ST_TO_ADDR
// end ;
32009: LD_VAR 0 5
32013: RET
// export function DangerAtRange ( unit , range ) ; begin
32014: LD_INT 0
32016: PPUSH
// if not unit then
32017: LD_VAR 0 1
32021: NOT
32022: IFFALSE 32026
// exit ;
32024: GO 32071
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32026: LD_ADDR_VAR 0 3
32030: PUSH
32031: LD_VAR 0 1
32035: PPUSH
32036: CALL_OW 255
32040: PPUSH
32041: LD_VAR 0 1
32045: PPUSH
32046: CALL_OW 250
32050: PPUSH
32051: LD_VAR 0 1
32055: PPUSH
32056: CALL_OW 251
32060: PPUSH
32061: LD_VAR 0 2
32065: PPUSH
32066: CALL 30313 0 4
32070: ST_TO_ADDR
// end ;
32071: LD_VAR 0 3
32075: RET
// export function DangerInArea ( side , area ) ; begin
32076: LD_INT 0
32078: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32079: LD_ADDR_VAR 0 3
32083: PUSH
32084: LD_VAR 0 2
32088: PPUSH
32089: LD_INT 81
32091: PUSH
32092: LD_VAR 0 1
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PPUSH
32101: CALL_OW 70
32105: ST_TO_ADDR
// end ;
32106: LD_VAR 0 3
32110: RET
// export function IsExtension ( b ) ; begin
32111: LD_INT 0
32113: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32114: LD_ADDR_VAR 0 2
32118: PUSH
32119: LD_VAR 0 1
32123: PUSH
32124: LD_INT 23
32126: PUSH
32127: LD_INT 20
32129: PUSH
32130: LD_INT 22
32132: PUSH
32133: LD_INT 17
32135: PUSH
32136: LD_INT 24
32138: PUSH
32139: LD_INT 21
32141: PUSH
32142: LD_INT 19
32144: PUSH
32145: LD_INT 16
32147: PUSH
32148: LD_INT 25
32150: PUSH
32151: LD_INT 18
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: IN
32166: ST_TO_ADDR
// end ;
32167: LD_VAR 0 2
32171: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32172: LD_INT 0
32174: PPUSH
32175: PPUSH
32176: PPUSH
// result := [ ] ;
32177: LD_ADDR_VAR 0 4
32181: PUSH
32182: EMPTY
32183: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32184: LD_ADDR_VAR 0 5
32188: PUSH
32189: LD_VAR 0 2
32193: PPUSH
32194: LD_INT 21
32196: PUSH
32197: LD_INT 3
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PPUSH
32204: CALL_OW 70
32208: ST_TO_ADDR
// if not tmp then
32209: LD_VAR 0 5
32213: NOT
32214: IFFALSE 32218
// exit ;
32216: GO 32282
// if checkLink then
32218: LD_VAR 0 3
32222: IFFALSE 32272
// begin for i in tmp do
32224: LD_ADDR_VAR 0 6
32228: PUSH
32229: LD_VAR 0 5
32233: PUSH
32234: FOR_IN
32235: IFFALSE 32270
// if GetBase ( i ) <> base then
32237: LD_VAR 0 6
32241: PPUSH
32242: CALL_OW 274
32246: PUSH
32247: LD_VAR 0 1
32251: NONEQUAL
32252: IFFALSE 32268
// ComLinkToBase ( base , i ) ;
32254: LD_VAR 0 1
32258: PPUSH
32259: LD_VAR 0 6
32263: PPUSH
32264: CALL_OW 169
32268: GO 32234
32270: POP
32271: POP
// end ; result := tmp ;
32272: LD_ADDR_VAR 0 4
32276: PUSH
32277: LD_VAR 0 5
32281: ST_TO_ADDR
// end ;
32282: LD_VAR 0 4
32286: RET
// export function ComComplete ( units , b ) ; var i ; begin
32287: LD_INT 0
32289: PPUSH
32290: PPUSH
// if not units then
32291: LD_VAR 0 1
32295: NOT
32296: IFFALSE 32300
// exit ;
32298: GO 32390
// for i in units do
32300: LD_ADDR_VAR 0 4
32304: PUSH
32305: LD_VAR 0 1
32309: PUSH
32310: FOR_IN
32311: IFFALSE 32388
// if BuildingStatus ( b ) = bs_build then
32313: LD_VAR 0 2
32317: PPUSH
32318: CALL_OW 461
32322: PUSH
32323: LD_INT 1
32325: EQUAL
32326: IFFALSE 32386
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32328: LD_VAR 0 4
32332: PPUSH
32333: LD_STRING h
32335: PUSH
32336: LD_VAR 0 2
32340: PPUSH
32341: CALL_OW 250
32345: PUSH
32346: LD_VAR 0 2
32350: PPUSH
32351: CALL_OW 251
32355: PUSH
32356: LD_VAR 0 2
32360: PUSH
32361: LD_INT 0
32363: PUSH
32364: LD_INT 0
32366: PUSH
32367: LD_INT 0
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: PUSH
32379: EMPTY
32380: LIST
32381: PPUSH
32382: CALL_OW 446
32386: GO 32310
32388: POP
32389: POP
// end ;
32390: LD_VAR 0 3
32394: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32395: LD_INT 0
32397: PPUSH
32398: PPUSH
32399: PPUSH
32400: PPUSH
32401: PPUSH
32402: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32403: LD_VAR 0 1
32407: NOT
32408: PUSH
32409: LD_VAR 0 1
32413: PPUSH
32414: CALL_OW 263
32418: PUSH
32419: LD_INT 2
32421: NONEQUAL
32422: OR
32423: IFFALSE 32427
// exit ;
32425: GO 32743
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32427: LD_ADDR_VAR 0 6
32431: PUSH
32432: LD_INT 22
32434: PUSH
32435: LD_VAR 0 1
32439: PPUSH
32440: CALL_OW 255
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 2
32451: PUSH
32452: LD_INT 30
32454: PUSH
32455: LD_INT 36
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 34
32464: PUSH
32465: LD_INT 31
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: LIST
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PPUSH
32481: CALL_OW 69
32485: ST_TO_ADDR
// if not tmp then
32486: LD_VAR 0 6
32490: NOT
32491: IFFALSE 32495
// exit ;
32493: GO 32743
// result := [ ] ;
32495: LD_ADDR_VAR 0 2
32499: PUSH
32500: EMPTY
32501: ST_TO_ADDR
// for i in tmp do
32502: LD_ADDR_VAR 0 3
32506: PUSH
32507: LD_VAR 0 6
32511: PUSH
32512: FOR_IN
32513: IFFALSE 32584
// begin t := UnitsInside ( i ) ;
32515: LD_ADDR_VAR 0 4
32519: PUSH
32520: LD_VAR 0 3
32524: PPUSH
32525: CALL_OW 313
32529: ST_TO_ADDR
// if t then
32530: LD_VAR 0 4
32534: IFFALSE 32582
// for j in t do
32536: LD_ADDR_VAR 0 7
32540: PUSH
32541: LD_VAR 0 4
32545: PUSH
32546: FOR_IN
32547: IFFALSE 32580
// result := Replace ( result , result + 1 , j ) ;
32549: LD_ADDR_VAR 0 2
32553: PUSH
32554: LD_VAR 0 2
32558: PPUSH
32559: LD_VAR 0 2
32563: PUSH
32564: LD_INT 1
32566: PLUS
32567: PPUSH
32568: LD_VAR 0 7
32572: PPUSH
32573: CALL_OW 1
32577: ST_TO_ADDR
32578: GO 32546
32580: POP
32581: POP
// end ;
32582: GO 32512
32584: POP
32585: POP
// if not result then
32586: LD_VAR 0 2
32590: NOT
32591: IFFALSE 32595
// exit ;
32593: GO 32743
// mech := result [ 1 ] ;
32595: LD_ADDR_VAR 0 5
32599: PUSH
32600: LD_VAR 0 2
32604: PUSH
32605: LD_INT 1
32607: ARRAY
32608: ST_TO_ADDR
// if result > 1 then
32609: LD_VAR 0 2
32613: PUSH
32614: LD_INT 1
32616: GREATER
32617: IFFALSE 32729
// begin for i = 2 to result do
32619: LD_ADDR_VAR 0 3
32623: PUSH
32624: DOUBLE
32625: LD_INT 2
32627: DEC
32628: ST_TO_ADDR
32629: LD_VAR 0 2
32633: PUSH
32634: FOR_TO
32635: IFFALSE 32727
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32637: LD_ADDR_VAR 0 4
32641: PUSH
32642: LD_VAR 0 2
32646: PUSH
32647: LD_VAR 0 3
32651: ARRAY
32652: PPUSH
32653: LD_INT 3
32655: PPUSH
32656: CALL_OW 259
32660: PUSH
32661: LD_VAR 0 2
32665: PUSH
32666: LD_VAR 0 3
32670: ARRAY
32671: PPUSH
32672: CALL_OW 432
32676: MINUS
32677: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32678: LD_VAR 0 4
32682: PUSH
32683: LD_VAR 0 5
32687: PPUSH
32688: LD_INT 3
32690: PPUSH
32691: CALL_OW 259
32695: PUSH
32696: LD_VAR 0 5
32700: PPUSH
32701: CALL_OW 432
32705: MINUS
32706: GREATEREQUAL
32707: IFFALSE 32725
// mech := result [ i ] ;
32709: LD_ADDR_VAR 0 5
32713: PUSH
32714: LD_VAR 0 2
32718: PUSH
32719: LD_VAR 0 3
32723: ARRAY
32724: ST_TO_ADDR
// end ;
32725: GO 32634
32727: POP
32728: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32729: LD_VAR 0 1
32733: PPUSH
32734: LD_VAR 0 5
32738: PPUSH
32739: CALL_OW 135
// end ;
32743: LD_VAR 0 2
32747: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32748: LD_INT 0
32750: PPUSH
32751: PPUSH
32752: PPUSH
32753: PPUSH
32754: PPUSH
32755: PPUSH
32756: PPUSH
32757: PPUSH
32758: PPUSH
32759: PPUSH
32760: PPUSH
32761: PPUSH
32762: PPUSH
// result := [ ] ;
32763: LD_ADDR_VAR 0 7
32767: PUSH
32768: EMPTY
32769: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32770: LD_VAR 0 1
32774: PPUSH
32775: CALL_OW 266
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: IN
32790: NOT
32791: IFFALSE 32795
// exit ;
32793: GO 34429
// if name then
32795: LD_VAR 0 3
32799: IFFALSE 32815
// SetBName ( base_dep , name ) ;
32801: LD_VAR 0 1
32805: PPUSH
32806: LD_VAR 0 3
32810: PPUSH
32811: CALL_OW 500
// base := GetBase ( base_dep ) ;
32815: LD_ADDR_VAR 0 15
32819: PUSH
32820: LD_VAR 0 1
32824: PPUSH
32825: CALL_OW 274
32829: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32830: LD_ADDR_VAR 0 16
32834: PUSH
32835: LD_VAR 0 1
32839: PPUSH
32840: CALL_OW 255
32844: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32845: LD_ADDR_VAR 0 17
32849: PUSH
32850: LD_VAR 0 1
32854: PPUSH
32855: CALL_OW 248
32859: ST_TO_ADDR
// if sources then
32860: LD_VAR 0 5
32864: IFFALSE 32911
// for i = 1 to 3 do
32866: LD_ADDR_VAR 0 8
32870: PUSH
32871: DOUBLE
32872: LD_INT 1
32874: DEC
32875: ST_TO_ADDR
32876: LD_INT 3
32878: PUSH
32879: FOR_TO
32880: IFFALSE 32909
// AddResourceType ( base , i , sources [ i ] ) ;
32882: LD_VAR 0 15
32886: PPUSH
32887: LD_VAR 0 8
32891: PPUSH
32892: LD_VAR 0 5
32896: PUSH
32897: LD_VAR 0 8
32901: ARRAY
32902: PPUSH
32903: CALL_OW 276
32907: GO 32879
32909: POP
32910: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32911: LD_ADDR_VAR 0 18
32915: PUSH
32916: LD_VAR 0 15
32920: PPUSH
32921: LD_VAR 0 2
32925: PPUSH
32926: LD_INT 1
32928: PPUSH
32929: CALL 32172 0 3
32933: ST_TO_ADDR
// InitHc ;
32934: CALL_OW 19
// InitUc ;
32938: CALL_OW 18
// uc_side := side ;
32942: LD_ADDR_OWVAR 20
32946: PUSH
32947: LD_VAR 0 16
32951: ST_TO_ADDR
// uc_nation := nation ;
32952: LD_ADDR_OWVAR 21
32956: PUSH
32957: LD_VAR 0 17
32961: ST_TO_ADDR
// if buildings then
32962: LD_VAR 0 18
32966: IFFALSE 34288
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32968: LD_ADDR_VAR 0 19
32972: PUSH
32973: LD_VAR 0 18
32977: PPUSH
32978: LD_INT 2
32980: PUSH
32981: LD_INT 30
32983: PUSH
32984: LD_INT 29
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 30
32993: PUSH
32994: LD_INT 30
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: LIST
33005: PPUSH
33006: CALL_OW 72
33010: ST_TO_ADDR
// if tmp then
33011: LD_VAR 0 19
33015: IFFALSE 33063
// for i in tmp do
33017: LD_ADDR_VAR 0 8
33021: PUSH
33022: LD_VAR 0 19
33026: PUSH
33027: FOR_IN
33028: IFFALSE 33061
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33030: LD_VAR 0 8
33034: PPUSH
33035: CALL_OW 250
33039: PPUSH
33040: LD_VAR 0 8
33044: PPUSH
33045: CALL_OW 251
33049: PPUSH
33050: LD_VAR 0 16
33054: PPUSH
33055: CALL_OW 441
33059: GO 33027
33061: POP
33062: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33063: LD_VAR 0 18
33067: PPUSH
33068: LD_INT 2
33070: PUSH
33071: LD_INT 30
33073: PUSH
33074: LD_INT 32
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 30
33083: PUSH
33084: LD_INT 33
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: LIST
33095: PPUSH
33096: CALL_OW 72
33100: IFFALSE 33188
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33102: LD_ADDR_VAR 0 8
33106: PUSH
33107: LD_VAR 0 18
33111: PPUSH
33112: LD_INT 2
33114: PUSH
33115: LD_INT 30
33117: PUSH
33118: LD_INT 32
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 30
33127: PUSH
33128: LD_INT 33
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: LIST
33139: PPUSH
33140: CALL_OW 72
33144: PUSH
33145: FOR_IN
33146: IFFALSE 33186
// begin if not GetBWeapon ( i ) then
33148: LD_VAR 0 8
33152: PPUSH
33153: CALL_OW 269
33157: NOT
33158: IFFALSE 33184
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33160: LD_VAR 0 8
33164: PPUSH
33165: LD_VAR 0 8
33169: PPUSH
33170: LD_VAR 0 2
33174: PPUSH
33175: CALL 34434 0 2
33179: PPUSH
33180: CALL_OW 431
// end ;
33184: GO 33145
33186: POP
33187: POP
// end ; for i = 1 to personel do
33188: LD_ADDR_VAR 0 8
33192: PUSH
33193: DOUBLE
33194: LD_INT 1
33196: DEC
33197: ST_TO_ADDR
33198: LD_VAR 0 6
33202: PUSH
33203: FOR_TO
33204: IFFALSE 34268
// begin if i > 4 then
33206: LD_VAR 0 8
33210: PUSH
33211: LD_INT 4
33213: GREATER
33214: IFFALSE 33218
// break ;
33216: GO 34268
// case i of 1 :
33218: LD_VAR 0 8
33222: PUSH
33223: LD_INT 1
33225: DOUBLE
33226: EQUAL
33227: IFTRUE 33231
33229: GO 33311
33231: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33232: LD_ADDR_VAR 0 12
33236: PUSH
33237: LD_VAR 0 18
33241: PPUSH
33242: LD_INT 22
33244: PUSH
33245: LD_VAR 0 16
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 58
33256: PUSH
33257: EMPTY
33258: LIST
33259: PUSH
33260: LD_INT 2
33262: PUSH
33263: LD_INT 30
33265: PUSH
33266: LD_INT 32
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 30
33275: PUSH
33276: LD_INT 4
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 30
33285: PUSH
33286: LD_INT 5
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: PPUSH
33304: CALL_OW 72
33308: ST_TO_ADDR
33309: GO 33533
33311: LD_INT 2
33313: DOUBLE
33314: EQUAL
33315: IFTRUE 33319
33317: GO 33381
33319: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33320: LD_ADDR_VAR 0 12
33324: PUSH
33325: LD_VAR 0 18
33329: PPUSH
33330: LD_INT 22
33332: PUSH
33333: LD_VAR 0 16
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 2
33344: PUSH
33345: LD_INT 30
33347: PUSH
33348: LD_INT 0
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 30
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: LIST
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PPUSH
33374: CALL_OW 72
33378: ST_TO_ADDR
33379: GO 33533
33381: LD_INT 3
33383: DOUBLE
33384: EQUAL
33385: IFTRUE 33389
33387: GO 33451
33389: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33390: LD_ADDR_VAR 0 12
33394: PUSH
33395: LD_VAR 0 18
33399: PPUSH
33400: LD_INT 22
33402: PUSH
33403: LD_VAR 0 16
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 2
33414: PUSH
33415: LD_INT 30
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 30
33427: PUSH
33428: LD_INT 3
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: LIST
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PPUSH
33444: CALL_OW 72
33448: ST_TO_ADDR
33449: GO 33533
33451: LD_INT 4
33453: DOUBLE
33454: EQUAL
33455: IFTRUE 33459
33457: GO 33532
33459: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33460: LD_ADDR_VAR 0 12
33464: PUSH
33465: LD_VAR 0 18
33469: PPUSH
33470: LD_INT 22
33472: PUSH
33473: LD_VAR 0 16
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 2
33484: PUSH
33485: LD_INT 30
33487: PUSH
33488: LD_INT 6
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 30
33497: PUSH
33498: LD_INT 7
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 30
33507: PUSH
33508: LD_INT 8
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PPUSH
33525: CALL_OW 72
33529: ST_TO_ADDR
33530: GO 33533
33532: POP
// if i = 1 then
33533: LD_VAR 0 8
33537: PUSH
33538: LD_INT 1
33540: EQUAL
33541: IFFALSE 33652
// begin tmp := [ ] ;
33543: LD_ADDR_VAR 0 19
33547: PUSH
33548: EMPTY
33549: ST_TO_ADDR
// for j in f do
33550: LD_ADDR_VAR 0 9
33554: PUSH
33555: LD_VAR 0 12
33559: PUSH
33560: FOR_IN
33561: IFFALSE 33634
// if GetBType ( j ) = b_bunker then
33563: LD_VAR 0 9
33567: PPUSH
33568: CALL_OW 266
33572: PUSH
33573: LD_INT 32
33575: EQUAL
33576: IFFALSE 33603
// tmp := Insert ( tmp , 1 , j ) else
33578: LD_ADDR_VAR 0 19
33582: PUSH
33583: LD_VAR 0 19
33587: PPUSH
33588: LD_INT 1
33590: PPUSH
33591: LD_VAR 0 9
33595: PPUSH
33596: CALL_OW 2
33600: ST_TO_ADDR
33601: GO 33632
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33603: LD_ADDR_VAR 0 19
33607: PUSH
33608: LD_VAR 0 19
33612: PPUSH
33613: LD_VAR 0 19
33617: PUSH
33618: LD_INT 1
33620: PLUS
33621: PPUSH
33622: LD_VAR 0 9
33626: PPUSH
33627: CALL_OW 2
33631: ST_TO_ADDR
33632: GO 33560
33634: POP
33635: POP
// if tmp then
33636: LD_VAR 0 19
33640: IFFALSE 33652
// f := tmp ;
33642: LD_ADDR_VAR 0 12
33646: PUSH
33647: LD_VAR 0 19
33651: ST_TO_ADDR
// end ; x := personel [ i ] ;
33652: LD_ADDR_VAR 0 13
33656: PUSH
33657: LD_VAR 0 6
33661: PUSH
33662: LD_VAR 0 8
33666: ARRAY
33667: ST_TO_ADDR
// if x = - 1 then
33668: LD_VAR 0 13
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: EQUAL
33677: IFFALSE 33886
// begin for j in f do
33679: LD_ADDR_VAR 0 9
33683: PUSH
33684: LD_VAR 0 12
33688: PUSH
33689: FOR_IN
33690: IFFALSE 33882
// repeat InitHc ;
33692: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33696: LD_VAR 0 9
33700: PPUSH
33701: CALL_OW 266
33705: PUSH
33706: LD_INT 5
33708: EQUAL
33709: IFFALSE 33779
// begin if UnitsInside ( j ) < 3 then
33711: LD_VAR 0 9
33715: PPUSH
33716: CALL_OW 313
33720: PUSH
33721: LD_INT 3
33723: LESS
33724: IFFALSE 33760
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33726: LD_INT 0
33728: PPUSH
33729: LD_INT 5
33731: PUSH
33732: LD_INT 8
33734: PUSH
33735: LD_INT 9
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: LIST
33742: PUSH
33743: LD_VAR 0 17
33747: ARRAY
33748: PPUSH
33749: LD_VAR 0 4
33753: PPUSH
33754: CALL_OW 380
33758: GO 33777
// PrepareHuman ( false , i , skill ) ;
33760: LD_INT 0
33762: PPUSH
33763: LD_VAR 0 8
33767: PPUSH
33768: LD_VAR 0 4
33772: PPUSH
33773: CALL_OW 380
// end else
33777: GO 33796
// PrepareHuman ( false , i , skill ) ;
33779: LD_INT 0
33781: PPUSH
33782: LD_VAR 0 8
33786: PPUSH
33787: LD_VAR 0 4
33791: PPUSH
33792: CALL_OW 380
// un := CreateHuman ;
33796: LD_ADDR_VAR 0 14
33800: PUSH
33801: CALL_OW 44
33805: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33806: LD_ADDR_VAR 0 7
33810: PUSH
33811: LD_VAR 0 7
33815: PPUSH
33816: LD_INT 1
33818: PPUSH
33819: LD_VAR 0 14
33823: PPUSH
33824: CALL_OW 2
33828: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33829: LD_VAR 0 14
33833: PPUSH
33834: LD_VAR 0 9
33838: PPUSH
33839: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33843: LD_VAR 0 9
33847: PPUSH
33848: CALL_OW 313
33852: PUSH
33853: LD_INT 6
33855: EQUAL
33856: PUSH
33857: LD_VAR 0 9
33861: PPUSH
33862: CALL_OW 266
33866: PUSH
33867: LD_INT 32
33869: PUSH
33870: LD_INT 31
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: IN
33877: OR
33878: IFFALSE 33692
33880: GO 33689
33882: POP
33883: POP
// end else
33884: GO 34266
// for j = 1 to x do
33886: LD_ADDR_VAR 0 9
33890: PUSH
33891: DOUBLE
33892: LD_INT 1
33894: DEC
33895: ST_TO_ADDR
33896: LD_VAR 0 13
33900: PUSH
33901: FOR_TO
33902: IFFALSE 34264
// begin InitHc ;
33904: CALL_OW 19
// if not f then
33908: LD_VAR 0 12
33912: NOT
33913: IFFALSE 34002
// begin PrepareHuman ( false , i , skill ) ;
33915: LD_INT 0
33917: PPUSH
33918: LD_VAR 0 8
33922: PPUSH
33923: LD_VAR 0 4
33927: PPUSH
33928: CALL_OW 380
// un := CreateHuman ;
33932: LD_ADDR_VAR 0 14
33936: PUSH
33937: CALL_OW 44
33941: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33942: LD_ADDR_VAR 0 7
33946: PUSH
33947: LD_VAR 0 7
33951: PPUSH
33952: LD_INT 1
33954: PPUSH
33955: LD_VAR 0 14
33959: PPUSH
33960: CALL_OW 2
33964: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33965: LD_VAR 0 14
33969: PPUSH
33970: LD_VAR 0 1
33974: PPUSH
33975: CALL_OW 250
33979: PPUSH
33980: LD_VAR 0 1
33984: PPUSH
33985: CALL_OW 251
33989: PPUSH
33990: LD_INT 10
33992: PPUSH
33993: LD_INT 0
33995: PPUSH
33996: CALL_OW 50
// continue ;
34000: GO 33901
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34002: LD_VAR 0 12
34006: PUSH
34007: LD_INT 1
34009: ARRAY
34010: PPUSH
34011: CALL_OW 313
34015: PUSH
34016: LD_VAR 0 12
34020: PUSH
34021: LD_INT 1
34023: ARRAY
34024: PPUSH
34025: CALL_OW 266
34029: PUSH
34030: LD_INT 32
34032: PUSH
34033: LD_INT 31
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: IN
34040: AND
34041: PUSH
34042: LD_VAR 0 12
34046: PUSH
34047: LD_INT 1
34049: ARRAY
34050: PPUSH
34051: CALL_OW 313
34055: PUSH
34056: LD_INT 6
34058: EQUAL
34059: OR
34060: IFFALSE 34080
// f := Delete ( f , 1 ) ;
34062: LD_ADDR_VAR 0 12
34066: PUSH
34067: LD_VAR 0 12
34071: PPUSH
34072: LD_INT 1
34074: PPUSH
34075: CALL_OW 3
34079: ST_TO_ADDR
// if not f then
34080: LD_VAR 0 12
34084: NOT
34085: IFFALSE 34103
// begin x := x + 2 ;
34087: LD_ADDR_VAR 0 13
34091: PUSH
34092: LD_VAR 0 13
34096: PUSH
34097: LD_INT 2
34099: PLUS
34100: ST_TO_ADDR
// continue ;
34101: GO 33901
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34103: LD_VAR 0 12
34107: PUSH
34108: LD_INT 1
34110: ARRAY
34111: PPUSH
34112: CALL_OW 266
34116: PUSH
34117: LD_INT 5
34119: EQUAL
34120: IFFALSE 34194
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34122: LD_VAR 0 12
34126: PUSH
34127: LD_INT 1
34129: ARRAY
34130: PPUSH
34131: CALL_OW 313
34135: PUSH
34136: LD_INT 3
34138: LESS
34139: IFFALSE 34175
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34141: LD_INT 0
34143: PPUSH
34144: LD_INT 5
34146: PUSH
34147: LD_INT 8
34149: PUSH
34150: LD_INT 9
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: PUSH
34158: LD_VAR 0 17
34162: ARRAY
34163: PPUSH
34164: LD_VAR 0 4
34168: PPUSH
34169: CALL_OW 380
34173: GO 34192
// PrepareHuman ( false , i , skill ) ;
34175: LD_INT 0
34177: PPUSH
34178: LD_VAR 0 8
34182: PPUSH
34183: LD_VAR 0 4
34187: PPUSH
34188: CALL_OW 380
// end else
34192: GO 34211
// PrepareHuman ( false , i , skill ) ;
34194: LD_INT 0
34196: PPUSH
34197: LD_VAR 0 8
34201: PPUSH
34202: LD_VAR 0 4
34206: PPUSH
34207: CALL_OW 380
// un := CreateHuman ;
34211: LD_ADDR_VAR 0 14
34215: PUSH
34216: CALL_OW 44
34220: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34221: LD_ADDR_VAR 0 7
34225: PUSH
34226: LD_VAR 0 7
34230: PPUSH
34231: LD_INT 1
34233: PPUSH
34234: LD_VAR 0 14
34238: PPUSH
34239: CALL_OW 2
34243: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34244: LD_VAR 0 14
34248: PPUSH
34249: LD_VAR 0 12
34253: PUSH
34254: LD_INT 1
34256: ARRAY
34257: PPUSH
34258: CALL_OW 52
// end ;
34262: GO 33901
34264: POP
34265: POP
// end ;
34266: GO 33203
34268: POP
34269: POP
// result := result ^ buildings ;
34270: LD_ADDR_VAR 0 7
34274: PUSH
34275: LD_VAR 0 7
34279: PUSH
34280: LD_VAR 0 18
34284: ADD
34285: ST_TO_ADDR
// end else
34286: GO 34429
// begin for i = 1 to personel do
34288: LD_ADDR_VAR 0 8
34292: PUSH
34293: DOUBLE
34294: LD_INT 1
34296: DEC
34297: ST_TO_ADDR
34298: LD_VAR 0 6
34302: PUSH
34303: FOR_TO
34304: IFFALSE 34427
// begin if i > 4 then
34306: LD_VAR 0 8
34310: PUSH
34311: LD_INT 4
34313: GREATER
34314: IFFALSE 34318
// break ;
34316: GO 34427
// x := personel [ i ] ;
34318: LD_ADDR_VAR 0 13
34322: PUSH
34323: LD_VAR 0 6
34327: PUSH
34328: LD_VAR 0 8
34332: ARRAY
34333: ST_TO_ADDR
// if x = - 1 then
34334: LD_VAR 0 13
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: EQUAL
34343: IFFALSE 34347
// continue ;
34345: GO 34303
// PrepareHuman ( false , i , skill ) ;
34347: LD_INT 0
34349: PPUSH
34350: LD_VAR 0 8
34354: PPUSH
34355: LD_VAR 0 4
34359: PPUSH
34360: CALL_OW 380
// un := CreateHuman ;
34364: LD_ADDR_VAR 0 14
34368: PUSH
34369: CALL_OW 44
34373: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34374: LD_VAR 0 14
34378: PPUSH
34379: LD_VAR 0 1
34383: PPUSH
34384: CALL_OW 250
34388: PPUSH
34389: LD_VAR 0 1
34393: PPUSH
34394: CALL_OW 251
34398: PPUSH
34399: LD_INT 10
34401: PPUSH
34402: LD_INT 0
34404: PPUSH
34405: CALL_OW 50
// result := result ^ un ;
34409: LD_ADDR_VAR 0 7
34413: PUSH
34414: LD_VAR 0 7
34418: PUSH
34419: LD_VAR 0 14
34423: ADD
34424: ST_TO_ADDR
// end ;
34425: GO 34303
34427: POP
34428: POP
// end ; end ;
34429: LD_VAR 0 7
34433: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34434: LD_INT 0
34436: PPUSH
34437: PPUSH
34438: PPUSH
34439: PPUSH
34440: PPUSH
34441: PPUSH
34442: PPUSH
34443: PPUSH
34444: PPUSH
34445: PPUSH
34446: PPUSH
34447: PPUSH
34448: PPUSH
34449: PPUSH
34450: PPUSH
34451: PPUSH
// result := false ;
34452: LD_ADDR_VAR 0 3
34456: PUSH
34457: LD_INT 0
34459: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34460: LD_VAR 0 1
34464: NOT
34465: PUSH
34466: LD_VAR 0 1
34470: PPUSH
34471: CALL_OW 266
34475: PUSH
34476: LD_INT 32
34478: PUSH
34479: LD_INT 33
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: IN
34486: NOT
34487: OR
34488: IFFALSE 34492
// exit ;
34490: GO 35601
// nat := GetNation ( tower ) ;
34492: LD_ADDR_VAR 0 12
34496: PUSH
34497: LD_VAR 0 1
34501: PPUSH
34502: CALL_OW 248
34506: ST_TO_ADDR
// side := GetSide ( tower ) ;
34507: LD_ADDR_VAR 0 16
34511: PUSH
34512: LD_VAR 0 1
34516: PPUSH
34517: CALL_OW 255
34521: ST_TO_ADDR
// x := GetX ( tower ) ;
34522: LD_ADDR_VAR 0 10
34526: PUSH
34527: LD_VAR 0 1
34531: PPUSH
34532: CALL_OW 250
34536: ST_TO_ADDR
// y := GetY ( tower ) ;
34537: LD_ADDR_VAR 0 11
34541: PUSH
34542: LD_VAR 0 1
34546: PPUSH
34547: CALL_OW 251
34551: ST_TO_ADDR
// if not x or not y then
34552: LD_VAR 0 10
34556: NOT
34557: PUSH
34558: LD_VAR 0 11
34562: NOT
34563: OR
34564: IFFALSE 34568
// exit ;
34566: GO 35601
// weapon := 0 ;
34568: LD_ADDR_VAR 0 18
34572: PUSH
34573: LD_INT 0
34575: ST_TO_ADDR
// fac_list := [ ] ;
34576: LD_ADDR_VAR 0 17
34580: PUSH
34581: EMPTY
34582: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34583: LD_ADDR_VAR 0 6
34587: PUSH
34588: LD_VAR 0 1
34592: PPUSH
34593: CALL_OW 274
34597: PPUSH
34598: LD_VAR 0 2
34602: PPUSH
34603: LD_INT 0
34605: PPUSH
34606: CALL 32172 0 3
34610: PPUSH
34611: LD_INT 30
34613: PUSH
34614: LD_INT 3
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PPUSH
34621: CALL_OW 72
34625: ST_TO_ADDR
// if not factories then
34626: LD_VAR 0 6
34630: NOT
34631: IFFALSE 34635
// exit ;
34633: GO 35601
// for i in factories do
34635: LD_ADDR_VAR 0 8
34639: PUSH
34640: LD_VAR 0 6
34644: PUSH
34645: FOR_IN
34646: IFFALSE 34671
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34648: LD_ADDR_VAR 0 17
34652: PUSH
34653: LD_VAR 0 17
34657: PUSH
34658: LD_VAR 0 8
34662: PPUSH
34663: CALL_OW 478
34667: UNION
34668: ST_TO_ADDR
34669: GO 34645
34671: POP
34672: POP
// if not fac_list then
34673: LD_VAR 0 17
34677: NOT
34678: IFFALSE 34682
// exit ;
34680: GO 35601
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34682: LD_ADDR_VAR 0 5
34686: PUSH
34687: LD_INT 4
34689: PUSH
34690: LD_INT 5
34692: PUSH
34693: LD_INT 9
34695: PUSH
34696: LD_INT 10
34698: PUSH
34699: LD_INT 6
34701: PUSH
34702: LD_INT 7
34704: PUSH
34705: LD_INT 11
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 27
34719: PUSH
34720: LD_INT 28
34722: PUSH
34723: LD_INT 26
34725: PUSH
34726: LD_INT 30
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 43
34737: PUSH
34738: LD_INT 44
34740: PUSH
34741: LD_INT 46
34743: PUSH
34744: LD_INT 45
34746: PUSH
34747: LD_INT 47
34749: PUSH
34750: LD_INT 49
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: LIST
34765: PUSH
34766: LD_VAR 0 12
34770: ARRAY
34771: ST_TO_ADDR
// list := list isect fac_list ;
34772: LD_ADDR_VAR 0 5
34776: PUSH
34777: LD_VAR 0 5
34781: PUSH
34782: LD_VAR 0 17
34786: ISECT
34787: ST_TO_ADDR
// if not list then
34788: LD_VAR 0 5
34792: NOT
34793: IFFALSE 34797
// exit ;
34795: GO 35601
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34797: LD_VAR 0 12
34801: PUSH
34802: LD_INT 3
34804: EQUAL
34805: PUSH
34806: LD_INT 49
34808: PUSH
34809: LD_VAR 0 5
34813: IN
34814: AND
34815: PUSH
34816: LD_INT 31
34818: PPUSH
34819: LD_VAR 0 16
34823: PPUSH
34824: CALL_OW 321
34828: PUSH
34829: LD_INT 2
34831: EQUAL
34832: AND
34833: IFFALSE 34893
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34835: LD_INT 22
34837: PUSH
34838: LD_VAR 0 16
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 35
34849: PUSH
34850: LD_INT 49
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 91
34859: PUSH
34860: LD_VAR 0 1
34864: PUSH
34865: LD_INT 10
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: LIST
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: LIST
34877: PPUSH
34878: CALL_OW 69
34882: NOT
34883: IFFALSE 34893
// weapon := ru_time_lapser ;
34885: LD_ADDR_VAR 0 18
34889: PUSH
34890: LD_INT 49
34892: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34893: LD_VAR 0 12
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: IN
34908: PUSH
34909: LD_INT 11
34911: PUSH
34912: LD_VAR 0 5
34916: IN
34917: PUSH
34918: LD_INT 30
34920: PUSH
34921: LD_VAR 0 5
34925: IN
34926: OR
34927: AND
34928: PUSH
34929: LD_INT 6
34931: PPUSH
34932: LD_VAR 0 16
34936: PPUSH
34937: CALL_OW 321
34941: PUSH
34942: LD_INT 2
34944: EQUAL
34945: AND
34946: IFFALSE 35111
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34948: LD_INT 22
34950: PUSH
34951: LD_VAR 0 16
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 2
34962: PUSH
34963: LD_INT 35
34965: PUSH
34966: LD_INT 11
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 35
34975: PUSH
34976: LD_INT 30
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 91
34990: PUSH
34991: LD_VAR 0 1
34995: PUSH
34996: LD_INT 18
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: LIST
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: LIST
35008: PPUSH
35009: CALL_OW 69
35013: NOT
35014: PUSH
35015: LD_INT 22
35017: PUSH
35018: LD_VAR 0 16
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: LD_INT 30
35032: PUSH
35033: LD_INT 32
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 30
35042: PUSH
35043: LD_INT 33
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 91
35057: PUSH
35058: LD_VAR 0 1
35062: PUSH
35063: LD_INT 12
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: LIST
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: PUSH
35076: EMPTY
35077: LIST
35078: PPUSH
35079: CALL_OW 69
35083: PUSH
35084: LD_INT 2
35086: GREATER
35087: AND
35088: IFFALSE 35111
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35090: LD_ADDR_VAR 0 18
35094: PUSH
35095: LD_INT 11
35097: PUSH
35098: LD_INT 30
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_VAR 0 12
35109: ARRAY
35110: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35111: LD_VAR 0 18
35115: NOT
35116: PUSH
35117: LD_INT 40
35119: PPUSH
35120: LD_VAR 0 16
35124: PPUSH
35125: CALL_OW 321
35129: PUSH
35130: LD_INT 2
35132: EQUAL
35133: AND
35134: PUSH
35135: LD_INT 7
35137: PUSH
35138: LD_VAR 0 5
35142: IN
35143: PUSH
35144: LD_INT 28
35146: PUSH
35147: LD_VAR 0 5
35151: IN
35152: OR
35153: PUSH
35154: LD_INT 45
35156: PUSH
35157: LD_VAR 0 5
35161: IN
35162: OR
35163: AND
35164: IFFALSE 35418
// begin hex := GetHexInfo ( x , y ) ;
35166: LD_ADDR_VAR 0 4
35170: PUSH
35171: LD_VAR 0 10
35175: PPUSH
35176: LD_VAR 0 11
35180: PPUSH
35181: CALL_OW 546
35185: ST_TO_ADDR
// if hex [ 1 ] then
35186: LD_VAR 0 4
35190: PUSH
35191: LD_INT 1
35193: ARRAY
35194: IFFALSE 35198
// exit ;
35196: GO 35601
// height := hex [ 2 ] ;
35198: LD_ADDR_VAR 0 15
35202: PUSH
35203: LD_VAR 0 4
35207: PUSH
35208: LD_INT 2
35210: ARRAY
35211: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35212: LD_ADDR_VAR 0 14
35216: PUSH
35217: LD_INT 0
35219: PUSH
35220: LD_INT 2
35222: PUSH
35223: LD_INT 3
35225: PUSH
35226: LD_INT 5
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: ST_TO_ADDR
// for i in tmp do
35235: LD_ADDR_VAR 0 8
35239: PUSH
35240: LD_VAR 0 14
35244: PUSH
35245: FOR_IN
35246: IFFALSE 35416
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35248: LD_ADDR_VAR 0 9
35252: PUSH
35253: LD_VAR 0 10
35257: PPUSH
35258: LD_VAR 0 8
35262: PPUSH
35263: LD_INT 5
35265: PPUSH
35266: CALL_OW 272
35270: PUSH
35271: LD_VAR 0 11
35275: PPUSH
35276: LD_VAR 0 8
35280: PPUSH
35281: LD_INT 5
35283: PPUSH
35284: CALL_OW 273
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35293: LD_VAR 0 9
35297: PUSH
35298: LD_INT 1
35300: ARRAY
35301: PPUSH
35302: LD_VAR 0 9
35306: PUSH
35307: LD_INT 2
35309: ARRAY
35310: PPUSH
35311: CALL_OW 488
35315: IFFALSE 35414
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35317: LD_ADDR_VAR 0 4
35321: PUSH
35322: LD_VAR 0 9
35326: PUSH
35327: LD_INT 1
35329: ARRAY
35330: PPUSH
35331: LD_VAR 0 9
35335: PUSH
35336: LD_INT 2
35338: ARRAY
35339: PPUSH
35340: CALL_OW 546
35344: ST_TO_ADDR
// if hex [ 1 ] then
35345: LD_VAR 0 4
35349: PUSH
35350: LD_INT 1
35352: ARRAY
35353: IFFALSE 35357
// continue ;
35355: GO 35245
// h := hex [ 2 ] ;
35357: LD_ADDR_VAR 0 13
35361: PUSH
35362: LD_VAR 0 4
35366: PUSH
35367: LD_INT 2
35369: ARRAY
35370: ST_TO_ADDR
// if h + 7 < height then
35371: LD_VAR 0 13
35375: PUSH
35376: LD_INT 7
35378: PLUS
35379: PUSH
35380: LD_VAR 0 15
35384: LESS
35385: IFFALSE 35414
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35387: LD_ADDR_VAR 0 18
35391: PUSH
35392: LD_INT 7
35394: PUSH
35395: LD_INT 28
35397: PUSH
35398: LD_INT 45
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: LIST
35405: PUSH
35406: LD_VAR 0 12
35410: ARRAY
35411: ST_TO_ADDR
// break ;
35412: GO 35416
// end ; end ; end ;
35414: GO 35245
35416: POP
35417: POP
// end ; if not weapon then
35418: LD_VAR 0 18
35422: NOT
35423: IFFALSE 35483
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35425: LD_ADDR_VAR 0 5
35429: PUSH
35430: LD_VAR 0 5
35434: PUSH
35435: LD_INT 11
35437: PUSH
35438: LD_INT 30
35440: PUSH
35441: LD_INT 49
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: LIST
35448: DIFF
35449: ST_TO_ADDR
// if not list then
35450: LD_VAR 0 5
35454: NOT
35455: IFFALSE 35459
// exit ;
35457: GO 35601
// weapon := list [ rand ( 1 , list ) ] ;
35459: LD_ADDR_VAR 0 18
35463: PUSH
35464: LD_VAR 0 5
35468: PUSH
35469: LD_INT 1
35471: PPUSH
35472: LD_VAR 0 5
35476: PPUSH
35477: CALL_OW 12
35481: ARRAY
35482: ST_TO_ADDR
// end ; if weapon then
35483: LD_VAR 0 18
35487: IFFALSE 35601
// begin tmp := CostOfWeapon ( weapon ) ;
35489: LD_ADDR_VAR 0 14
35493: PUSH
35494: LD_VAR 0 18
35498: PPUSH
35499: CALL_OW 451
35503: ST_TO_ADDR
// j := GetBase ( tower ) ;
35504: LD_ADDR_VAR 0 9
35508: PUSH
35509: LD_VAR 0 1
35513: PPUSH
35514: CALL_OW 274
35518: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35519: LD_VAR 0 9
35523: PPUSH
35524: LD_INT 1
35526: PPUSH
35527: CALL_OW 275
35531: PUSH
35532: LD_VAR 0 14
35536: PUSH
35537: LD_INT 1
35539: ARRAY
35540: GREATEREQUAL
35541: PUSH
35542: LD_VAR 0 9
35546: PPUSH
35547: LD_INT 2
35549: PPUSH
35550: CALL_OW 275
35554: PUSH
35555: LD_VAR 0 14
35559: PUSH
35560: LD_INT 2
35562: ARRAY
35563: GREATEREQUAL
35564: AND
35565: PUSH
35566: LD_VAR 0 9
35570: PPUSH
35571: LD_INT 3
35573: PPUSH
35574: CALL_OW 275
35578: PUSH
35579: LD_VAR 0 14
35583: PUSH
35584: LD_INT 3
35586: ARRAY
35587: GREATEREQUAL
35588: AND
35589: IFFALSE 35601
// result := weapon ;
35591: LD_ADDR_VAR 0 3
35595: PUSH
35596: LD_VAR 0 18
35600: ST_TO_ADDR
// end ; end ;
35601: LD_VAR 0 3
35605: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35606: LD_INT 0
35608: PPUSH
35609: PPUSH
// result := true ;
35610: LD_ADDR_VAR 0 3
35614: PUSH
35615: LD_INT 1
35617: ST_TO_ADDR
// if array1 = array2 then
35618: LD_VAR 0 1
35622: PUSH
35623: LD_VAR 0 2
35627: EQUAL
35628: IFFALSE 35688
// begin for i = 1 to array1 do
35630: LD_ADDR_VAR 0 4
35634: PUSH
35635: DOUBLE
35636: LD_INT 1
35638: DEC
35639: ST_TO_ADDR
35640: LD_VAR 0 1
35644: PUSH
35645: FOR_TO
35646: IFFALSE 35684
// if array1 [ i ] <> array2 [ i ] then
35648: LD_VAR 0 1
35652: PUSH
35653: LD_VAR 0 4
35657: ARRAY
35658: PUSH
35659: LD_VAR 0 2
35663: PUSH
35664: LD_VAR 0 4
35668: ARRAY
35669: NONEQUAL
35670: IFFALSE 35682
// begin result := false ;
35672: LD_ADDR_VAR 0 3
35676: PUSH
35677: LD_INT 0
35679: ST_TO_ADDR
// break ;
35680: GO 35684
// end ;
35682: GO 35645
35684: POP
35685: POP
// end else
35686: GO 35696
// result := false ;
35688: LD_ADDR_VAR 0 3
35692: PUSH
35693: LD_INT 0
35695: ST_TO_ADDR
// end ;
35696: LD_VAR 0 3
35700: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35701: LD_INT 0
35703: PPUSH
35704: PPUSH
// if not array1 or not array2 then
35705: LD_VAR 0 1
35709: NOT
35710: PUSH
35711: LD_VAR 0 2
35715: NOT
35716: OR
35717: IFFALSE 35721
// exit ;
35719: GO 35785
// result := true ;
35721: LD_ADDR_VAR 0 3
35725: PUSH
35726: LD_INT 1
35728: ST_TO_ADDR
// for i = 1 to array1 do
35729: LD_ADDR_VAR 0 4
35733: PUSH
35734: DOUBLE
35735: LD_INT 1
35737: DEC
35738: ST_TO_ADDR
35739: LD_VAR 0 1
35743: PUSH
35744: FOR_TO
35745: IFFALSE 35783
// if array1 [ i ] <> array2 [ i ] then
35747: LD_VAR 0 1
35751: PUSH
35752: LD_VAR 0 4
35756: ARRAY
35757: PUSH
35758: LD_VAR 0 2
35762: PUSH
35763: LD_VAR 0 4
35767: ARRAY
35768: NONEQUAL
35769: IFFALSE 35781
// begin result := false ;
35771: LD_ADDR_VAR 0 3
35775: PUSH
35776: LD_INT 0
35778: ST_TO_ADDR
// break ;
35779: GO 35783
// end ;
35781: GO 35744
35783: POP
35784: POP
// end ;
35785: LD_VAR 0 3
35789: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35790: LD_INT 0
35792: PPUSH
35793: PPUSH
35794: PPUSH
// pom := GetBase ( fac ) ;
35795: LD_ADDR_VAR 0 5
35799: PUSH
35800: LD_VAR 0 1
35804: PPUSH
35805: CALL_OW 274
35809: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35810: LD_ADDR_VAR 0 4
35814: PUSH
35815: LD_VAR 0 2
35819: PUSH
35820: LD_INT 1
35822: ARRAY
35823: PPUSH
35824: LD_VAR 0 2
35828: PUSH
35829: LD_INT 2
35831: ARRAY
35832: PPUSH
35833: LD_VAR 0 2
35837: PUSH
35838: LD_INT 3
35840: ARRAY
35841: PPUSH
35842: LD_VAR 0 2
35846: PUSH
35847: LD_INT 4
35849: ARRAY
35850: PPUSH
35851: CALL_OW 449
35855: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35856: LD_ADDR_VAR 0 3
35860: PUSH
35861: LD_VAR 0 5
35865: PPUSH
35866: LD_INT 1
35868: PPUSH
35869: CALL_OW 275
35873: PUSH
35874: LD_VAR 0 4
35878: PUSH
35879: LD_INT 1
35881: ARRAY
35882: GREATEREQUAL
35883: PUSH
35884: LD_VAR 0 5
35888: PPUSH
35889: LD_INT 2
35891: PPUSH
35892: CALL_OW 275
35896: PUSH
35897: LD_VAR 0 4
35901: PUSH
35902: LD_INT 2
35904: ARRAY
35905: GREATEREQUAL
35906: AND
35907: PUSH
35908: LD_VAR 0 5
35912: PPUSH
35913: LD_INT 3
35915: PPUSH
35916: CALL_OW 275
35920: PUSH
35921: LD_VAR 0 4
35925: PUSH
35926: LD_INT 3
35928: ARRAY
35929: GREATEREQUAL
35930: AND
35931: ST_TO_ADDR
// end ;
35932: LD_VAR 0 3
35936: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35937: LD_INT 0
35939: PPUSH
35940: PPUSH
35941: PPUSH
35942: PPUSH
// pom := GetBase ( building ) ;
35943: LD_ADDR_VAR 0 3
35947: PUSH
35948: LD_VAR 0 1
35952: PPUSH
35953: CALL_OW 274
35957: ST_TO_ADDR
// if not pom then
35958: LD_VAR 0 3
35962: NOT
35963: IFFALSE 35967
// exit ;
35965: GO 36137
// btype := GetBType ( building ) ;
35967: LD_ADDR_VAR 0 5
35971: PUSH
35972: LD_VAR 0 1
35976: PPUSH
35977: CALL_OW 266
35981: ST_TO_ADDR
// if btype = b_armoury then
35982: LD_VAR 0 5
35986: PUSH
35987: LD_INT 4
35989: EQUAL
35990: IFFALSE 36000
// btype := b_barracks ;
35992: LD_ADDR_VAR 0 5
35996: PUSH
35997: LD_INT 5
35999: ST_TO_ADDR
// if btype = b_depot then
36000: LD_VAR 0 5
36004: PUSH
36005: LD_INT 0
36007: EQUAL
36008: IFFALSE 36018
// btype := b_warehouse ;
36010: LD_ADDR_VAR 0 5
36014: PUSH
36015: LD_INT 1
36017: ST_TO_ADDR
// if btype = b_workshop then
36018: LD_VAR 0 5
36022: PUSH
36023: LD_INT 2
36025: EQUAL
36026: IFFALSE 36036
// btype := b_factory ;
36028: LD_ADDR_VAR 0 5
36032: PUSH
36033: LD_INT 3
36035: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36036: LD_ADDR_VAR 0 4
36040: PUSH
36041: LD_VAR 0 5
36045: PPUSH
36046: LD_VAR 0 1
36050: PPUSH
36051: CALL_OW 248
36055: PPUSH
36056: CALL_OW 450
36060: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36061: LD_ADDR_VAR 0 2
36065: PUSH
36066: LD_VAR 0 3
36070: PPUSH
36071: LD_INT 1
36073: PPUSH
36074: CALL_OW 275
36078: PUSH
36079: LD_VAR 0 4
36083: PUSH
36084: LD_INT 1
36086: ARRAY
36087: GREATEREQUAL
36088: PUSH
36089: LD_VAR 0 3
36093: PPUSH
36094: LD_INT 2
36096: PPUSH
36097: CALL_OW 275
36101: PUSH
36102: LD_VAR 0 4
36106: PUSH
36107: LD_INT 2
36109: ARRAY
36110: GREATEREQUAL
36111: AND
36112: PUSH
36113: LD_VAR 0 3
36117: PPUSH
36118: LD_INT 3
36120: PPUSH
36121: CALL_OW 275
36125: PUSH
36126: LD_VAR 0 4
36130: PUSH
36131: LD_INT 3
36133: ARRAY
36134: GREATEREQUAL
36135: AND
36136: ST_TO_ADDR
// end ;
36137: LD_VAR 0 2
36141: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36142: LD_INT 0
36144: PPUSH
36145: PPUSH
36146: PPUSH
// pom := GetBase ( building ) ;
36147: LD_ADDR_VAR 0 4
36151: PUSH
36152: LD_VAR 0 1
36156: PPUSH
36157: CALL_OW 274
36161: ST_TO_ADDR
// if not pom then
36162: LD_VAR 0 4
36166: NOT
36167: IFFALSE 36171
// exit ;
36169: GO 36272
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36171: LD_ADDR_VAR 0 5
36175: PUSH
36176: LD_VAR 0 2
36180: PPUSH
36181: LD_VAR 0 1
36185: PPUSH
36186: CALL_OW 248
36190: PPUSH
36191: CALL_OW 450
36195: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36196: LD_ADDR_VAR 0 3
36200: PUSH
36201: LD_VAR 0 4
36205: PPUSH
36206: LD_INT 1
36208: PPUSH
36209: CALL_OW 275
36213: PUSH
36214: LD_VAR 0 5
36218: PUSH
36219: LD_INT 1
36221: ARRAY
36222: GREATEREQUAL
36223: PUSH
36224: LD_VAR 0 4
36228: PPUSH
36229: LD_INT 2
36231: PPUSH
36232: CALL_OW 275
36236: PUSH
36237: LD_VAR 0 5
36241: PUSH
36242: LD_INT 2
36244: ARRAY
36245: GREATEREQUAL
36246: AND
36247: PUSH
36248: LD_VAR 0 4
36252: PPUSH
36253: LD_INT 3
36255: PPUSH
36256: CALL_OW 275
36260: PUSH
36261: LD_VAR 0 5
36265: PUSH
36266: LD_INT 3
36268: ARRAY
36269: GREATEREQUAL
36270: AND
36271: ST_TO_ADDR
// end ;
36272: LD_VAR 0 3
36276: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36277: LD_INT 0
36279: PPUSH
36280: PPUSH
36281: PPUSH
36282: PPUSH
36283: PPUSH
36284: PPUSH
36285: PPUSH
36286: PPUSH
36287: PPUSH
36288: PPUSH
36289: PPUSH
// result := false ;
36290: LD_ADDR_VAR 0 8
36294: PUSH
36295: LD_INT 0
36297: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36298: LD_VAR 0 5
36302: NOT
36303: PUSH
36304: LD_VAR 0 1
36308: NOT
36309: OR
36310: PUSH
36311: LD_VAR 0 2
36315: NOT
36316: OR
36317: PUSH
36318: LD_VAR 0 3
36322: NOT
36323: OR
36324: IFFALSE 36328
// exit ;
36326: GO 37142
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36328: LD_ADDR_VAR 0 14
36332: PUSH
36333: LD_VAR 0 1
36337: PPUSH
36338: LD_VAR 0 2
36342: PPUSH
36343: LD_VAR 0 3
36347: PPUSH
36348: LD_VAR 0 4
36352: PPUSH
36353: LD_VAR 0 5
36357: PUSH
36358: LD_INT 1
36360: ARRAY
36361: PPUSH
36362: CALL_OW 248
36366: PPUSH
36367: LD_INT 0
36369: PPUSH
36370: CALL 38395 0 6
36374: ST_TO_ADDR
// if not hexes then
36375: LD_VAR 0 14
36379: NOT
36380: IFFALSE 36384
// exit ;
36382: GO 37142
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36384: LD_ADDR_VAR 0 17
36388: PUSH
36389: LD_VAR 0 5
36393: PPUSH
36394: LD_INT 22
36396: PUSH
36397: LD_VAR 0 13
36401: PPUSH
36402: CALL_OW 255
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: LD_INT 30
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 30
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: LIST
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PPUSH
36443: CALL_OW 72
36447: ST_TO_ADDR
// for i = 1 to hexes do
36448: LD_ADDR_VAR 0 9
36452: PUSH
36453: DOUBLE
36454: LD_INT 1
36456: DEC
36457: ST_TO_ADDR
36458: LD_VAR 0 14
36462: PUSH
36463: FOR_TO
36464: IFFALSE 37140
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36466: LD_ADDR_VAR 0 13
36470: PUSH
36471: LD_VAR 0 14
36475: PUSH
36476: LD_VAR 0 9
36480: ARRAY
36481: PUSH
36482: LD_INT 1
36484: ARRAY
36485: PPUSH
36486: LD_VAR 0 14
36490: PUSH
36491: LD_VAR 0 9
36495: ARRAY
36496: PUSH
36497: LD_INT 2
36499: ARRAY
36500: PPUSH
36501: CALL_OW 428
36505: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36506: LD_VAR 0 14
36510: PUSH
36511: LD_VAR 0 9
36515: ARRAY
36516: PUSH
36517: LD_INT 1
36519: ARRAY
36520: PPUSH
36521: LD_VAR 0 14
36525: PUSH
36526: LD_VAR 0 9
36530: ARRAY
36531: PUSH
36532: LD_INT 2
36534: ARRAY
36535: PPUSH
36536: CALL_OW 351
36540: PUSH
36541: LD_VAR 0 14
36545: PUSH
36546: LD_VAR 0 9
36550: ARRAY
36551: PUSH
36552: LD_INT 1
36554: ARRAY
36555: PPUSH
36556: LD_VAR 0 14
36560: PUSH
36561: LD_VAR 0 9
36565: ARRAY
36566: PUSH
36567: LD_INT 2
36569: ARRAY
36570: PPUSH
36571: CALL_OW 488
36575: NOT
36576: OR
36577: PUSH
36578: LD_VAR 0 13
36582: PPUSH
36583: CALL_OW 247
36587: PUSH
36588: LD_INT 3
36590: EQUAL
36591: OR
36592: IFFALSE 36598
// exit ;
36594: POP
36595: POP
36596: GO 37142
// if not tmp then
36598: LD_VAR 0 13
36602: NOT
36603: IFFALSE 36607
// continue ;
36605: GO 36463
// result := true ;
36607: LD_ADDR_VAR 0 8
36611: PUSH
36612: LD_INT 1
36614: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36615: LD_VAR 0 6
36619: PUSH
36620: LD_VAR 0 13
36624: PPUSH
36625: CALL_OW 247
36629: PUSH
36630: LD_INT 2
36632: EQUAL
36633: AND
36634: PUSH
36635: LD_VAR 0 13
36639: PPUSH
36640: CALL_OW 263
36644: PUSH
36645: LD_INT 1
36647: EQUAL
36648: AND
36649: IFFALSE 36813
// begin if IsDrivenBy ( tmp ) then
36651: LD_VAR 0 13
36655: PPUSH
36656: CALL_OW 311
36660: IFFALSE 36664
// continue ;
36662: GO 36463
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36664: LD_VAR 0 6
36668: PPUSH
36669: LD_INT 3
36671: PUSH
36672: LD_INT 60
36674: PUSH
36675: EMPTY
36676: LIST
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 3
36684: PUSH
36685: LD_INT 55
36687: PUSH
36688: EMPTY
36689: LIST
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PPUSH
36699: CALL_OW 72
36703: IFFALSE 36811
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36705: LD_ADDR_VAR 0 18
36709: PUSH
36710: LD_VAR 0 6
36714: PPUSH
36715: LD_INT 3
36717: PUSH
36718: LD_INT 60
36720: PUSH
36721: EMPTY
36722: LIST
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 3
36730: PUSH
36731: LD_INT 55
36733: PUSH
36734: EMPTY
36735: LIST
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PPUSH
36745: CALL_OW 72
36749: PUSH
36750: LD_INT 1
36752: ARRAY
36753: ST_TO_ADDR
// if IsInUnit ( driver ) then
36754: LD_VAR 0 18
36758: PPUSH
36759: CALL_OW 310
36763: IFFALSE 36774
// ComExit ( driver ) ;
36765: LD_VAR 0 18
36769: PPUSH
36770: CALL 62176 0 1
// AddComEnterUnit ( driver , tmp ) ;
36774: LD_VAR 0 18
36778: PPUSH
36779: LD_VAR 0 13
36783: PPUSH
36784: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36788: LD_VAR 0 18
36792: PPUSH
36793: LD_VAR 0 7
36797: PPUSH
36798: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36802: LD_VAR 0 18
36806: PPUSH
36807: CALL_OW 181
// end ; continue ;
36811: GO 36463
// end ; if not cleaners or not tmp in cleaners then
36813: LD_VAR 0 6
36817: NOT
36818: PUSH
36819: LD_VAR 0 13
36823: PUSH
36824: LD_VAR 0 6
36828: IN
36829: NOT
36830: OR
36831: IFFALSE 37138
// begin if dep then
36833: LD_VAR 0 17
36837: IFFALSE 36973
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36839: LD_ADDR_VAR 0 16
36843: PUSH
36844: LD_VAR 0 17
36848: PUSH
36849: LD_INT 1
36851: ARRAY
36852: PPUSH
36853: CALL_OW 250
36857: PPUSH
36858: LD_VAR 0 17
36862: PUSH
36863: LD_INT 1
36865: ARRAY
36866: PPUSH
36867: CALL_OW 254
36871: PPUSH
36872: LD_INT 5
36874: PPUSH
36875: CALL_OW 272
36879: PUSH
36880: LD_VAR 0 17
36884: PUSH
36885: LD_INT 1
36887: ARRAY
36888: PPUSH
36889: CALL_OW 251
36893: PPUSH
36894: LD_VAR 0 17
36898: PUSH
36899: LD_INT 1
36901: ARRAY
36902: PPUSH
36903: CALL_OW 254
36907: PPUSH
36908: LD_INT 5
36910: PPUSH
36911: CALL_OW 273
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36920: LD_VAR 0 16
36924: PUSH
36925: LD_INT 1
36927: ARRAY
36928: PPUSH
36929: LD_VAR 0 16
36933: PUSH
36934: LD_INT 2
36936: ARRAY
36937: PPUSH
36938: CALL_OW 488
36942: IFFALSE 36973
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36944: LD_VAR 0 13
36948: PPUSH
36949: LD_VAR 0 16
36953: PUSH
36954: LD_INT 1
36956: ARRAY
36957: PPUSH
36958: LD_VAR 0 16
36962: PUSH
36963: LD_INT 2
36965: ARRAY
36966: PPUSH
36967: CALL_OW 111
// continue ;
36971: GO 36463
// end ; end ; r := GetDir ( tmp ) ;
36973: LD_ADDR_VAR 0 15
36977: PUSH
36978: LD_VAR 0 13
36982: PPUSH
36983: CALL_OW 254
36987: ST_TO_ADDR
// if r = 5 then
36988: LD_VAR 0 15
36992: PUSH
36993: LD_INT 5
36995: EQUAL
36996: IFFALSE 37006
// r := 0 ;
36998: LD_ADDR_VAR 0 15
37002: PUSH
37003: LD_INT 0
37005: ST_TO_ADDR
// for j = r to 5 do
37006: LD_ADDR_VAR 0 10
37010: PUSH
37011: DOUBLE
37012: LD_VAR 0 15
37016: DEC
37017: ST_TO_ADDR
37018: LD_INT 5
37020: PUSH
37021: FOR_TO
37022: IFFALSE 37136
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37024: LD_ADDR_VAR 0 11
37028: PUSH
37029: LD_VAR 0 13
37033: PPUSH
37034: CALL_OW 250
37038: PPUSH
37039: LD_VAR 0 10
37043: PPUSH
37044: LD_INT 2
37046: PPUSH
37047: CALL_OW 272
37051: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37052: LD_ADDR_VAR 0 12
37056: PUSH
37057: LD_VAR 0 13
37061: PPUSH
37062: CALL_OW 251
37066: PPUSH
37067: LD_VAR 0 10
37071: PPUSH
37072: LD_INT 2
37074: PPUSH
37075: CALL_OW 273
37079: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37080: LD_VAR 0 11
37084: PPUSH
37085: LD_VAR 0 12
37089: PPUSH
37090: CALL_OW 488
37094: PUSH
37095: LD_VAR 0 11
37099: PPUSH
37100: LD_VAR 0 12
37104: PPUSH
37105: CALL_OW 428
37109: NOT
37110: AND
37111: IFFALSE 37134
// begin ComMoveXY ( tmp , _x , _y ) ;
37113: LD_VAR 0 13
37117: PPUSH
37118: LD_VAR 0 11
37122: PPUSH
37123: LD_VAR 0 12
37127: PPUSH
37128: CALL_OW 111
// break ;
37132: GO 37136
// end ; end ;
37134: GO 37021
37136: POP
37137: POP
// end ; end ;
37138: GO 36463
37140: POP
37141: POP
// end ;
37142: LD_VAR 0 8
37146: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37147: LD_INT 0
37149: PPUSH
// result := true ;
37150: LD_ADDR_VAR 0 3
37154: PUSH
37155: LD_INT 1
37157: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37158: LD_VAR 0 2
37162: PUSH
37163: LD_INT 24
37165: DOUBLE
37166: EQUAL
37167: IFTRUE 37177
37169: LD_INT 33
37171: DOUBLE
37172: EQUAL
37173: IFTRUE 37177
37175: GO 37202
37177: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37178: LD_ADDR_VAR 0 3
37182: PUSH
37183: LD_INT 32
37185: PPUSH
37186: LD_VAR 0 1
37190: PPUSH
37191: CALL_OW 321
37195: PUSH
37196: LD_INT 2
37198: EQUAL
37199: ST_TO_ADDR
37200: GO 37518
37202: LD_INT 20
37204: DOUBLE
37205: EQUAL
37206: IFTRUE 37210
37208: GO 37235
37210: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37211: LD_ADDR_VAR 0 3
37215: PUSH
37216: LD_INT 6
37218: PPUSH
37219: LD_VAR 0 1
37223: PPUSH
37224: CALL_OW 321
37228: PUSH
37229: LD_INT 2
37231: EQUAL
37232: ST_TO_ADDR
37233: GO 37518
37235: LD_INT 22
37237: DOUBLE
37238: EQUAL
37239: IFTRUE 37249
37241: LD_INT 36
37243: DOUBLE
37244: EQUAL
37245: IFTRUE 37249
37247: GO 37274
37249: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37250: LD_ADDR_VAR 0 3
37254: PUSH
37255: LD_INT 15
37257: PPUSH
37258: LD_VAR 0 1
37262: PPUSH
37263: CALL_OW 321
37267: PUSH
37268: LD_INT 2
37270: EQUAL
37271: ST_TO_ADDR
37272: GO 37518
37274: LD_INT 30
37276: DOUBLE
37277: EQUAL
37278: IFTRUE 37282
37280: GO 37307
37282: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37283: LD_ADDR_VAR 0 3
37287: PUSH
37288: LD_INT 20
37290: PPUSH
37291: LD_VAR 0 1
37295: PPUSH
37296: CALL_OW 321
37300: PUSH
37301: LD_INT 2
37303: EQUAL
37304: ST_TO_ADDR
37305: GO 37518
37307: LD_INT 28
37309: DOUBLE
37310: EQUAL
37311: IFTRUE 37321
37313: LD_INT 21
37315: DOUBLE
37316: EQUAL
37317: IFTRUE 37321
37319: GO 37346
37321: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37322: LD_ADDR_VAR 0 3
37326: PUSH
37327: LD_INT 21
37329: PPUSH
37330: LD_VAR 0 1
37334: PPUSH
37335: CALL_OW 321
37339: PUSH
37340: LD_INT 2
37342: EQUAL
37343: ST_TO_ADDR
37344: GO 37518
37346: LD_INT 16
37348: DOUBLE
37349: EQUAL
37350: IFTRUE 37354
37352: GO 37379
37354: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37355: LD_ADDR_VAR 0 3
37359: PUSH
37360: LD_INT 84
37362: PPUSH
37363: LD_VAR 0 1
37367: PPUSH
37368: CALL_OW 321
37372: PUSH
37373: LD_INT 2
37375: EQUAL
37376: ST_TO_ADDR
37377: GO 37518
37379: LD_INT 19
37381: DOUBLE
37382: EQUAL
37383: IFTRUE 37393
37385: LD_INT 23
37387: DOUBLE
37388: EQUAL
37389: IFTRUE 37393
37391: GO 37418
37393: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37394: LD_ADDR_VAR 0 3
37398: PUSH
37399: LD_INT 83
37401: PPUSH
37402: LD_VAR 0 1
37406: PPUSH
37407: CALL_OW 321
37411: PUSH
37412: LD_INT 2
37414: EQUAL
37415: ST_TO_ADDR
37416: GO 37518
37418: LD_INT 17
37420: DOUBLE
37421: EQUAL
37422: IFTRUE 37426
37424: GO 37451
37426: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37427: LD_ADDR_VAR 0 3
37431: PUSH
37432: LD_INT 39
37434: PPUSH
37435: LD_VAR 0 1
37439: PPUSH
37440: CALL_OW 321
37444: PUSH
37445: LD_INT 2
37447: EQUAL
37448: ST_TO_ADDR
37449: GO 37518
37451: LD_INT 18
37453: DOUBLE
37454: EQUAL
37455: IFTRUE 37459
37457: GO 37484
37459: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37460: LD_ADDR_VAR 0 3
37464: PUSH
37465: LD_INT 40
37467: PPUSH
37468: LD_VAR 0 1
37472: PPUSH
37473: CALL_OW 321
37477: PUSH
37478: LD_INT 2
37480: EQUAL
37481: ST_TO_ADDR
37482: GO 37518
37484: LD_INT 27
37486: DOUBLE
37487: EQUAL
37488: IFTRUE 37492
37490: GO 37517
37492: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37493: LD_ADDR_VAR 0 3
37497: PUSH
37498: LD_INT 35
37500: PPUSH
37501: LD_VAR 0 1
37505: PPUSH
37506: CALL_OW 321
37510: PUSH
37511: LD_INT 2
37513: EQUAL
37514: ST_TO_ADDR
37515: GO 37518
37517: POP
// end ;
37518: LD_VAR 0 3
37522: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37523: LD_INT 0
37525: PPUSH
37526: PPUSH
37527: PPUSH
37528: PPUSH
37529: PPUSH
37530: PPUSH
37531: PPUSH
37532: PPUSH
37533: PPUSH
37534: PPUSH
37535: PPUSH
// result := false ;
37536: LD_ADDR_VAR 0 6
37540: PUSH
37541: LD_INT 0
37543: ST_TO_ADDR
// if btype = b_depot then
37544: LD_VAR 0 2
37548: PUSH
37549: LD_INT 0
37551: EQUAL
37552: IFFALSE 37564
// begin result := true ;
37554: LD_ADDR_VAR 0 6
37558: PUSH
37559: LD_INT 1
37561: ST_TO_ADDR
// exit ;
37562: GO 38390
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37564: LD_VAR 0 1
37568: NOT
37569: PUSH
37570: LD_VAR 0 1
37574: PPUSH
37575: CALL_OW 266
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: IN
37590: NOT
37591: OR
37592: PUSH
37593: LD_VAR 0 2
37597: NOT
37598: OR
37599: PUSH
37600: LD_VAR 0 5
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: LD_INT 2
37613: PUSH
37614: LD_INT 3
37616: PUSH
37617: LD_INT 4
37619: PUSH
37620: LD_INT 5
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: IN
37631: NOT
37632: OR
37633: PUSH
37634: LD_VAR 0 3
37638: PPUSH
37639: LD_VAR 0 4
37643: PPUSH
37644: CALL_OW 488
37648: NOT
37649: OR
37650: IFFALSE 37654
// exit ;
37652: GO 38390
// side := GetSide ( depot ) ;
37654: LD_ADDR_VAR 0 9
37658: PUSH
37659: LD_VAR 0 1
37663: PPUSH
37664: CALL_OW 255
37668: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37669: LD_VAR 0 9
37673: PPUSH
37674: LD_VAR 0 2
37678: PPUSH
37679: CALL 37147 0 2
37683: NOT
37684: IFFALSE 37688
// exit ;
37686: GO 38390
// pom := GetBase ( depot ) ;
37688: LD_ADDR_VAR 0 10
37692: PUSH
37693: LD_VAR 0 1
37697: PPUSH
37698: CALL_OW 274
37702: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37703: LD_ADDR_VAR 0 11
37707: PUSH
37708: LD_VAR 0 2
37712: PPUSH
37713: LD_VAR 0 1
37717: PPUSH
37718: CALL_OW 248
37722: PPUSH
37723: CALL_OW 450
37727: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37728: LD_VAR 0 10
37732: PPUSH
37733: LD_INT 1
37735: PPUSH
37736: CALL_OW 275
37740: PUSH
37741: LD_VAR 0 11
37745: PUSH
37746: LD_INT 1
37748: ARRAY
37749: GREATEREQUAL
37750: PUSH
37751: LD_VAR 0 10
37755: PPUSH
37756: LD_INT 2
37758: PPUSH
37759: CALL_OW 275
37763: PUSH
37764: LD_VAR 0 11
37768: PUSH
37769: LD_INT 2
37771: ARRAY
37772: GREATEREQUAL
37773: AND
37774: PUSH
37775: LD_VAR 0 10
37779: PPUSH
37780: LD_INT 3
37782: PPUSH
37783: CALL_OW 275
37787: PUSH
37788: LD_VAR 0 11
37792: PUSH
37793: LD_INT 3
37795: ARRAY
37796: GREATEREQUAL
37797: AND
37798: NOT
37799: IFFALSE 37803
// exit ;
37801: GO 38390
// if GetBType ( depot ) = b_depot then
37803: LD_VAR 0 1
37807: PPUSH
37808: CALL_OW 266
37812: PUSH
37813: LD_INT 0
37815: EQUAL
37816: IFFALSE 37828
// dist := 28 else
37818: LD_ADDR_VAR 0 14
37822: PUSH
37823: LD_INT 28
37825: ST_TO_ADDR
37826: GO 37836
// dist := 36 ;
37828: LD_ADDR_VAR 0 14
37832: PUSH
37833: LD_INT 36
37835: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37836: LD_VAR 0 1
37840: PPUSH
37841: LD_VAR 0 3
37845: PPUSH
37846: LD_VAR 0 4
37850: PPUSH
37851: CALL_OW 297
37855: PUSH
37856: LD_VAR 0 14
37860: GREATER
37861: IFFALSE 37865
// exit ;
37863: GO 38390
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37865: LD_ADDR_VAR 0 12
37869: PUSH
37870: LD_VAR 0 2
37874: PPUSH
37875: LD_VAR 0 3
37879: PPUSH
37880: LD_VAR 0 4
37884: PPUSH
37885: LD_VAR 0 5
37889: PPUSH
37890: LD_VAR 0 1
37894: PPUSH
37895: CALL_OW 248
37899: PPUSH
37900: LD_INT 0
37902: PPUSH
37903: CALL 38395 0 6
37907: ST_TO_ADDR
// if not hexes then
37908: LD_VAR 0 12
37912: NOT
37913: IFFALSE 37917
// exit ;
37915: GO 38390
// hex := GetHexInfo ( x , y ) ;
37917: LD_ADDR_VAR 0 15
37921: PUSH
37922: LD_VAR 0 3
37926: PPUSH
37927: LD_VAR 0 4
37931: PPUSH
37932: CALL_OW 546
37936: ST_TO_ADDR
// if hex [ 1 ] then
37937: LD_VAR 0 15
37941: PUSH
37942: LD_INT 1
37944: ARRAY
37945: IFFALSE 37949
// exit ;
37947: GO 38390
// height := hex [ 2 ] ;
37949: LD_ADDR_VAR 0 13
37953: PUSH
37954: LD_VAR 0 15
37958: PUSH
37959: LD_INT 2
37961: ARRAY
37962: ST_TO_ADDR
// for i = 1 to hexes do
37963: LD_ADDR_VAR 0 7
37967: PUSH
37968: DOUBLE
37969: LD_INT 1
37971: DEC
37972: ST_TO_ADDR
37973: LD_VAR 0 12
37977: PUSH
37978: FOR_TO
37979: IFFALSE 38309
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37981: LD_VAR 0 12
37985: PUSH
37986: LD_VAR 0 7
37990: ARRAY
37991: PUSH
37992: LD_INT 1
37994: ARRAY
37995: PPUSH
37996: LD_VAR 0 12
38000: PUSH
38001: LD_VAR 0 7
38005: ARRAY
38006: PUSH
38007: LD_INT 2
38009: ARRAY
38010: PPUSH
38011: CALL_OW 488
38015: NOT
38016: PUSH
38017: LD_VAR 0 12
38021: PUSH
38022: LD_VAR 0 7
38026: ARRAY
38027: PUSH
38028: LD_INT 1
38030: ARRAY
38031: PPUSH
38032: LD_VAR 0 12
38036: PUSH
38037: LD_VAR 0 7
38041: ARRAY
38042: PUSH
38043: LD_INT 2
38045: ARRAY
38046: PPUSH
38047: CALL_OW 428
38051: PUSH
38052: LD_INT 0
38054: GREATER
38055: OR
38056: PUSH
38057: LD_VAR 0 12
38061: PUSH
38062: LD_VAR 0 7
38066: ARRAY
38067: PUSH
38068: LD_INT 1
38070: ARRAY
38071: PPUSH
38072: LD_VAR 0 12
38076: PUSH
38077: LD_VAR 0 7
38081: ARRAY
38082: PUSH
38083: LD_INT 2
38085: ARRAY
38086: PPUSH
38087: CALL_OW 351
38091: OR
38092: IFFALSE 38098
// exit ;
38094: POP
38095: POP
38096: GO 38390
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38098: LD_ADDR_VAR 0 8
38102: PUSH
38103: LD_VAR 0 12
38107: PUSH
38108: LD_VAR 0 7
38112: ARRAY
38113: PUSH
38114: LD_INT 1
38116: ARRAY
38117: PPUSH
38118: LD_VAR 0 12
38122: PUSH
38123: LD_VAR 0 7
38127: ARRAY
38128: PUSH
38129: LD_INT 2
38131: ARRAY
38132: PPUSH
38133: CALL_OW 546
38137: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38138: LD_VAR 0 8
38142: PUSH
38143: LD_INT 1
38145: ARRAY
38146: PUSH
38147: LD_VAR 0 8
38151: PUSH
38152: LD_INT 2
38154: ARRAY
38155: PUSH
38156: LD_VAR 0 13
38160: PUSH
38161: LD_INT 2
38163: PLUS
38164: GREATER
38165: OR
38166: PUSH
38167: LD_VAR 0 8
38171: PUSH
38172: LD_INT 2
38174: ARRAY
38175: PUSH
38176: LD_VAR 0 13
38180: PUSH
38181: LD_INT 2
38183: MINUS
38184: LESS
38185: OR
38186: PUSH
38187: LD_VAR 0 8
38191: PUSH
38192: LD_INT 3
38194: ARRAY
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: LD_INT 8
38201: PUSH
38202: LD_INT 9
38204: PUSH
38205: LD_INT 10
38207: PUSH
38208: LD_INT 11
38210: PUSH
38211: LD_INT 12
38213: PUSH
38214: LD_INT 13
38216: PUSH
38217: LD_INT 16
38219: PUSH
38220: LD_INT 17
38222: PUSH
38223: LD_INT 18
38225: PUSH
38226: LD_INT 19
38228: PUSH
38229: LD_INT 20
38231: PUSH
38232: LD_INT 21
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: IN
38250: NOT
38251: OR
38252: PUSH
38253: LD_VAR 0 8
38257: PUSH
38258: LD_INT 5
38260: ARRAY
38261: NOT
38262: OR
38263: PUSH
38264: LD_VAR 0 8
38268: PUSH
38269: LD_INT 6
38271: ARRAY
38272: PUSH
38273: LD_INT 1
38275: PUSH
38276: LD_INT 2
38278: PUSH
38279: LD_INT 7
38281: PUSH
38282: LD_INT 9
38284: PUSH
38285: LD_INT 10
38287: PUSH
38288: LD_INT 11
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: IN
38299: NOT
38300: OR
38301: IFFALSE 38307
// exit ;
38303: POP
38304: POP
38305: GO 38390
// end ;
38307: GO 37978
38309: POP
38310: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38311: LD_VAR 0 9
38315: PPUSH
38316: LD_VAR 0 3
38320: PPUSH
38321: LD_VAR 0 4
38325: PPUSH
38326: LD_INT 20
38328: PPUSH
38329: CALL 30313 0 4
38333: PUSH
38334: LD_INT 4
38336: ARRAY
38337: IFFALSE 38341
// exit ;
38339: GO 38390
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38341: LD_VAR 0 2
38345: PUSH
38346: LD_INT 29
38348: PUSH
38349: LD_INT 30
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: IN
38356: PUSH
38357: LD_VAR 0 3
38361: PPUSH
38362: LD_VAR 0 4
38366: PPUSH
38367: LD_VAR 0 9
38371: PPUSH
38372: CALL_OW 440
38376: NOT
38377: AND
38378: IFFALSE 38382
// exit ;
38380: GO 38390
// result := true ;
38382: LD_ADDR_VAR 0 6
38386: PUSH
38387: LD_INT 1
38389: ST_TO_ADDR
// end ;
38390: LD_VAR 0 6
38394: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38395: LD_INT 0
38397: PPUSH
38398: PPUSH
38399: PPUSH
38400: PPUSH
38401: PPUSH
38402: PPUSH
38403: PPUSH
38404: PPUSH
38405: PPUSH
38406: PPUSH
38407: PPUSH
38408: PPUSH
38409: PPUSH
38410: PPUSH
38411: PPUSH
38412: PPUSH
38413: PPUSH
38414: PPUSH
38415: PPUSH
38416: PPUSH
38417: PPUSH
38418: PPUSH
38419: PPUSH
38420: PPUSH
38421: PPUSH
38422: PPUSH
38423: PPUSH
38424: PPUSH
38425: PPUSH
38426: PPUSH
38427: PPUSH
38428: PPUSH
38429: PPUSH
38430: PPUSH
38431: PPUSH
38432: PPUSH
38433: PPUSH
38434: PPUSH
38435: PPUSH
38436: PPUSH
38437: PPUSH
38438: PPUSH
38439: PPUSH
38440: PPUSH
38441: PPUSH
38442: PPUSH
38443: PPUSH
38444: PPUSH
38445: PPUSH
38446: PPUSH
38447: PPUSH
38448: PPUSH
38449: PPUSH
38450: PPUSH
38451: PPUSH
38452: PPUSH
38453: PPUSH
38454: PPUSH
// result = [ ] ;
38455: LD_ADDR_VAR 0 7
38459: PUSH
38460: EMPTY
38461: ST_TO_ADDR
// temp_list = [ ] ;
38462: LD_ADDR_VAR 0 9
38466: PUSH
38467: EMPTY
38468: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38469: LD_VAR 0 4
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 2
38482: PUSH
38483: LD_INT 3
38485: PUSH
38486: LD_INT 4
38488: PUSH
38489: LD_INT 5
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: IN
38500: NOT
38501: PUSH
38502: LD_VAR 0 1
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: LD_INT 1
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: IN
38517: PUSH
38518: LD_VAR 0 5
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: LD_INT 3
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: LIST
38536: IN
38537: NOT
38538: AND
38539: OR
38540: IFFALSE 38544
// exit ;
38542: GO 56935
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38544: LD_VAR 0 1
38548: PUSH
38549: LD_INT 6
38551: PUSH
38552: LD_INT 7
38554: PUSH
38555: LD_INT 8
38557: PUSH
38558: LD_INT 13
38560: PUSH
38561: LD_INT 12
38563: PUSH
38564: LD_INT 15
38566: PUSH
38567: LD_INT 11
38569: PUSH
38570: LD_INT 14
38572: PUSH
38573: LD_INT 10
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: IN
38587: IFFALSE 38597
// btype = b_lab ;
38589: LD_ADDR_VAR 0 1
38593: PUSH
38594: LD_INT 6
38596: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38597: LD_VAR 0 6
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: LD_INT 1
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: IN
38616: NOT
38617: PUSH
38618: LD_VAR 0 1
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: LD_INT 2
38631: PUSH
38632: LD_INT 3
38634: PUSH
38635: LD_INT 6
38637: PUSH
38638: LD_INT 36
38640: PUSH
38641: LD_INT 4
38643: PUSH
38644: LD_INT 5
38646: PUSH
38647: LD_INT 31
38649: PUSH
38650: LD_INT 32
38652: PUSH
38653: LD_INT 33
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: IN
38669: NOT
38670: PUSH
38671: LD_VAR 0 6
38675: PUSH
38676: LD_INT 1
38678: EQUAL
38679: AND
38680: OR
38681: PUSH
38682: LD_VAR 0 1
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: LD_INT 3
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: IN
38697: NOT
38698: PUSH
38699: LD_VAR 0 6
38703: PUSH
38704: LD_INT 2
38706: EQUAL
38707: AND
38708: OR
38709: IFFALSE 38719
// mode = 0 ;
38711: LD_ADDR_VAR 0 6
38715: PUSH
38716: LD_INT 0
38718: ST_TO_ADDR
// case mode of 0 :
38719: LD_VAR 0 6
38723: PUSH
38724: LD_INT 0
38726: DOUBLE
38727: EQUAL
38728: IFTRUE 38732
38730: GO 50185
38732: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38733: LD_ADDR_VAR 0 11
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: LD_INT 1
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 1
38791: NEG
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: LD_INT 1
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: LD_INT 2
38818: NEG
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: LD_INT 2
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 1
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 1
38848: PUSH
38849: LD_INT 2
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: LD_INT 2
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: LD_INT 3
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 3
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: LD_INT 2
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38926: LD_ADDR_VAR 0 12
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: LD_INT 1
38946: NEG
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: NEG
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: LD_INT 0
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 2
39049: NEG
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 2
39060: NEG
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: NEG
39073: PUSH
39074: LD_INT 1
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 3
39083: NEG
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 3
39094: NEG
39095: PUSH
39096: LD_INT 1
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39122: LD_ADDR_VAR 0 13
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: LD_INT 0
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 1
39160: PUSH
39161: LD_INT 1
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: LD_INT 2
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 2
39225: PUSH
39226: LD_INT 2
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 1
39235: PUSH
39236: LD_INT 2
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 2
39245: NEG
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 2
39257: NEG
39258: PUSH
39259: LD_INT 2
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 2
39269: NEG
39270: PUSH
39271: LD_INT 3
39273: NEG
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 3
39281: NEG
39282: PUSH
39283: LD_INT 2
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 3
39293: NEG
39294: PUSH
39295: LD_INT 3
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39321: LD_ADDR_VAR 0 14
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: LD_INT 2
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: LD_INT 2
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: LD_INT 3
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 3
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: LD_INT 2
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39517: LD_ADDR_VAR 0 15
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 2
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: LD_INT 1
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 2
39651: NEG
39652: PUSH
39653: LD_INT 1
39655: NEG
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 2
39663: PUSH
39664: LD_INT 1
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 3
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 3
39684: PUSH
39685: LD_INT 1
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39710: LD_ADDR_VAR 0 16
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: LD_INT 0
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: LD_INT 1
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: NEG
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: LD_INT 2
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: LD_INT 2
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: LD_INT 2
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 2
39833: NEG
39834: PUSH
39835: LD_INT 1
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 2
39845: NEG
39846: PUSH
39847: LD_INT 2
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 3
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 3
39867: PUSH
39868: LD_INT 3
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 2
39877: PUSH
39878: LD_INT 3
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39903: LD_ADDR_VAR 0 17
39907: PUSH
39908: LD_INT 0
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 0
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 1
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 1
39961: NEG
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 1
39972: NEG
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 0
39996: PUSH
39997: LD_INT 2
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: LD_INT 1
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 2
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 2
40028: PUSH
40029: LD_INT 1
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 2
40038: PUSH
40039: LD_INT 2
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 0
40058: PUSH
40059: LD_INT 2
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: NEG
40080: PUSH
40081: LD_INT 0
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 2
40090: NEG
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 2
40102: NEG
40103: PUSH
40104: LD_INT 2
40106: NEG
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40133: LD_ADDR_VAR 0 18
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 0
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: LD_INT 2
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: LD_INT 2
40229: NEG
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 2
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: NEG
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 2
40320: NEG
40321: PUSH
40322: LD_INT 1
40324: NEG
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 2
40332: NEG
40333: PUSH
40334: LD_INT 2
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40363: LD_ADDR_VAR 0 19
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: NEG
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: LD_INT 2
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 2
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: LD_INT 2
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: LD_INT 2
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: LD_INT 2
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: NEG
40529: PUSH
40530: LD_INT 1
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: NEG
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 2
40550: NEG
40551: PUSH
40552: LD_INT 1
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 2
40562: NEG
40563: PUSH
40564: LD_INT 2
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40593: LD_ADDR_VAR 0 20
40597: PUSH
40598: LD_INT 0
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: PUSH
40632: LD_INT 1
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: LD_INT 1
40662: NEG
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: LD_INT 2
40689: NEG
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 2
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 2
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 2
40769: NEG
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: LD_INT 1
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 2
40792: NEG
40793: PUSH
40794: LD_INT 2
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40823: LD_ADDR_VAR 0 21
40827: PUSH
40828: LD_INT 0
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 1
40861: PUSH
40862: LD_INT 1
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: LD_INT 1
40896: NEG
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: LD_INT 2
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: LD_INT 2
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 2
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 2
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 2
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: LD_INT 2
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 2
40999: NEG
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 2
41010: NEG
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 2
41022: NEG
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41053: LD_ADDR_VAR 0 22
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: LD_INT 2
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: LD_INT 2
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 2
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 2
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: NEG
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: NEG
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 2
41252: NEG
41253: PUSH
41254: LD_INT 2
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41283: LD_ADDR_VAR 0 23
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: LD_INT 2
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: LD_INT 2
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 2
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 2
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 2
41459: NEG
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 2
41482: NEG
41483: PUSH
41484: LD_INT 2
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: LD_INT 3
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 3
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: LD_INT 2
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41563: LD_ADDR_VAR 0 24
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: NEG
41645: PUSH
41646: LD_INT 2
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: LD_INT 2
41659: NEG
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 2
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 2
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: LD_INT 2
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: LD_INT 2
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: LD_INT 2
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 2
41739: NEG
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 2
41750: NEG
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: NEG
41763: PUSH
41764: LD_INT 2
41766: NEG
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: LD_INT 2
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 3
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 3
41806: PUSH
41807: LD_INT 2
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41839: LD_ADDR_VAR 0 25
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 2
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: LD_INT 2
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 1
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 2
42015: NEG
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: LD_INT 2
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 3
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 3
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 3
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 3
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42113: LD_ADDR_VAR 0 26
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: NEG
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: LD_INT 2
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: LD_INT 2
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: LD_INT 1
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 2
42248: PUSH
42249: LD_INT 2
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: LD_INT 2
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: LD_INT 1
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 2
42300: NEG
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 2
42312: NEG
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: LD_INT 3
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: LD_INT 3
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 2
42355: NEG
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42389: LD_ADDR_VAR 0 27
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: NEG
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 2
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: PUSH
42525: LD_INT 2
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 2
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 2
42565: NEG
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 2
42576: NEG
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 2
42588: NEG
42589: PUSH
42590: LD_INT 2
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: LD_INT 2
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: NEG
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 3
42622: NEG
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 3
42634: NEG
42635: PUSH
42636: LD_INT 2
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42669: LD_ADDR_VAR 0 28
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: LD_INT 1
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 2
42856: NEG
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: NEG
42869: PUSH
42870: LD_INT 2
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: LD_INT 3
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: LD_INT 3
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 3
42904: NEG
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 3
42916: NEG
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42951: LD_ADDR_VAR 0 29
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 2
43117: NEG
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: LD_INT 2
43133: NEG
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 2
43141: NEG
43142: PUSH
43143: LD_INT 3
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 3
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: LD_INT 3
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 3
43195: NEG
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43230: LD_ADDR_VAR 0 30
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: NEG
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: LD_INT 3
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: LD_INT 2
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 3
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 2
43452: PUSH
43453: LD_INT 3
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 3
43473: NEG
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43508: LD_ADDR_VAR 0 31
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 1
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: LD_INT 2
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 2
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 2
43685: NEG
43686: PUSH
43687: LD_INT 2
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 2
43697: NEG
43698: PUSH
43699: LD_INT 3
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 3
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: LD_INT 3
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 3
43751: NEG
43752: PUSH
43753: LD_INT 2
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43786: LD_ADDR_VAR 0 32
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: NEG
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: LD_INT 2
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 1
43893: NEG
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 2
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 2
43911: PUSH
43912: LD_INT 2
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: LD_INT 2
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: NEG
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 2
43963: NEG
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: LD_INT 3
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: LD_INT 2
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 3
43998: PUSH
43999: LD_INT 2
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: LD_INT 3
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 2
44018: NEG
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 3
44029: NEG
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44064: LD_ADDR_VAR 0 33
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: LD_INT 0
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: LD_INT 0
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: LD_INT 2
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 2
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: LD_INT 2
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: LD_INT 2
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 2
44219: NEG
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 2
44230: NEG
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: LD_INT 2
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 2
44254: NEG
44255: PUSH
44256: LD_INT 3
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 3
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 3
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: LD_INT 2
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 3
44308: NEG
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44343: LD_ADDR_VAR 0 34
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 2
44439: NEG
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 2
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: NEG
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: NEG
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: LD_INT 3
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: LD_INT 3
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 3
44588: NEG
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44623: LD_ADDR_VAR 0 35
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: LD_INT 1
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44735: LD_ADDR_VAR 0 36
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44847: LD_ADDR_VAR 0 37
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44959: LD_ADDR_VAR 0 38
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: LD_INT 1
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 1
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45071: LD_ADDR_VAR 0 39
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: NEG
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: LD_INT 2
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45183: LD_ADDR_VAR 0 40
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45295: LD_ADDR_VAR 0 41
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 2
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: NEG
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: LD_INT 2
45477: NEG
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: LD_INT 3
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 3
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 3
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 3
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 3
45538: PUSH
45539: LD_INT 3
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 3
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: NEG
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 3
45569: NEG
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 3
45580: NEG
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 3
45592: NEG
45593: PUSH
45594: LD_INT 2
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 3
45604: NEG
45605: PUSH
45606: LD_INT 3
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45645: LD_ADDR_VAR 0 42
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: LD_INT 2
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: LD_INT 2
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: LD_INT 3
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: LD_INT 3
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 3
45891: PUSH
45892: LD_INT 3
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 2
45901: PUSH
45902: LD_INT 3
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: LD_INT 3
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 3
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 3
45942: NEG
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 3
45954: NEG
45955: PUSH
45956: LD_INT 3
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45995: LD_ADDR_VAR 0 43
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: LD_INT 1
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 2
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 3
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 3
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: LD_INT 2
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 2
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 3
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: PUSH
46250: LD_INT 3
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 0
46259: PUSH
46260: LD_INT 3
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 3
46291: NEG
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 3
46302: NEG
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46343: LD_ADDR_VAR 0 44
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 1
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: LD_INT 2
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: LD_INT 3
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 3
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 3
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 3
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 3
46586: PUSH
46587: LD_INT 3
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: LD_INT 3
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 3
46617: NEG
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 3
46628: NEG
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 3
46640: NEG
46641: PUSH
46642: LD_INT 2
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 3
46652: NEG
46653: PUSH
46654: LD_INT 3
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46693: LD_ADDR_VAR 0 45
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: NEG
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: LD_INT 2
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: LD_INT 2
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: NEG
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: LD_INT 3
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: LD_INT 3
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 3
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 3
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 3
46939: PUSH
46940: LD_INT 3
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: LD_INT 3
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: LD_INT 3
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: LD_INT 3
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: NEG
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 3
47002: NEG
47003: PUSH
47004: LD_INT 3
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47043: LD_ADDR_VAR 0 46
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 1
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 2
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 2
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 3
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: LD_INT 3
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 3
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 3
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: LD_INT 3
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 3
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 2
47328: NEG
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 3
47339: NEG
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 3
47350: NEG
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47391: LD_ADDR_VAR 0 47
47395: PUSH
47396: LD_INT 0
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: LD_INT 1
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: NEG
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: NEG
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47542: LD_ADDR_VAR 0 48
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 1
47623: NEG
47624: PUSH
47625: LD_INT 2
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 2
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47689: LD_ADDR_VAR 0 49
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: NEG
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 2
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47833: LD_ADDR_VAR 0 50
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 2
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 2
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47977: LD_ADDR_VAR 0 51
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48124: LD_ADDR_VAR 0 52
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 2
48251: NEG
48252: PUSH
48253: LD_INT 2
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48275: LD_ADDR_VAR 0 53
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 0
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: LD_INT 2
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: NEG
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 2
48462: NEG
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48505: LD_ADDR_VAR 0 54
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: LD_INT 2
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 2
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: NEG
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48735: LD_ADDR_VAR 0 55
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 1
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: LD_INT 1
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: LD_INT 2
48831: NEG
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 2
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 2
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: LD_INT 2
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 2
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 2
48934: NEG
48935: PUSH
48936: LD_INT 2
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48965: LD_ADDR_VAR 0 56
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 2
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 2
49152: NEG
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: NEG
49165: PUSH
49166: LD_INT 2
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49195: LD_ADDR_VAR 0 57
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: LD_INT 2
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 2
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 2
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: LD_INT 2
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: LD_INT 2
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: NEG
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 2
49394: NEG
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49425: LD_ADDR_VAR 0 58
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 1
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: LD_INT 2
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 2
49624: NEG
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49655: LD_ADDR_VAR 0 59
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49743: LD_ADDR_VAR 0 60
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49831: LD_ADDR_VAR 0 61
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49919: LD_ADDR_VAR 0 62
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50007: LD_ADDR_VAR 0 63
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 1
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50095: LD_ADDR_VAR 0 64
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: LD_INT 0
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: ST_TO_ADDR
// end ; 1 :
50183: GO 56080
50185: LD_INT 1
50187: DOUBLE
50188: EQUAL
50189: IFTRUE 50193
50191: GO 52816
50193: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50194: LD_ADDR_VAR 0 11
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 3
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 3
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 2
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: LIST
50237: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50238: LD_ADDR_VAR 0 12
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 3
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 3
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: LIST
50278: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50279: LD_ADDR_VAR 0 13
50283: PUSH
50284: LD_INT 3
50286: PUSH
50287: LD_INT 2
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 3
50296: PUSH
50297: LD_INT 3
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: LD_INT 3
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: LIST
50318: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50319: LD_ADDR_VAR 0 14
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 3
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 3
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: LIST
50359: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50360: LD_ADDR_VAR 0 15
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 3
50378: NEG
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 3
50389: NEG
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: LIST
50403: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50404: LD_ADDR_VAR 0 16
50408: PUSH
50409: LD_INT 2
50411: NEG
50412: PUSH
50413: LD_INT 3
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 3
50423: NEG
50424: PUSH
50425: LD_INT 2
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 3
50435: NEG
50436: PUSH
50437: LD_INT 3
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: LIST
50449: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50450: LD_ADDR_VAR 0 17
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 3
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 3
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: LIST
50493: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50494: LD_ADDR_VAR 0 18
50498: PUSH
50499: LD_INT 2
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 3
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: LIST
50534: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50535: LD_ADDR_VAR 0 19
50539: PUSH
50540: LD_INT 3
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 3
50552: PUSH
50553: LD_INT 3
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: PUSH
50563: LD_INT 3
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: LIST
50574: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50575: LD_ADDR_VAR 0 20
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: LD_INT 3
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 3
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: LIST
50615: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50616: LD_ADDR_VAR 0 21
50620: PUSH
50621: LD_INT 2
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 3
50634: NEG
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 3
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: LIST
50659: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50660: LD_ADDR_VAR 0 22
50664: PUSH
50665: LD_INT 2
50667: NEG
50668: PUSH
50669: LD_INT 3
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 3
50679: NEG
50680: PUSH
50681: LD_INT 2
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 3
50691: NEG
50692: PUSH
50693: LD_INT 3
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: LIST
50705: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50706: LD_ADDR_VAR 0 23
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: LD_INT 4
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: LD_INT 3
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: LIST
50749: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50750: LD_ADDR_VAR 0 24
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 3
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 4
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: LIST
50790: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50791: LD_ADDR_VAR 0 25
50795: PUSH
50796: LD_INT 3
50798: PUSH
50799: LD_INT 3
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 4
50808: PUSH
50809: LD_INT 3
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 3
50818: PUSH
50819: LD_INT 4
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: LIST
50830: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50831: LD_ADDR_VAR 0 26
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 3
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 4
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: LD_INT 3
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: LIST
50871: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50872: LD_ADDR_VAR 0 27
50876: PUSH
50877: LD_INT 3
50879: NEG
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 3
50890: NEG
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 4
50901: NEG
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: LIST
50915: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50916: LD_ADDR_VAR 0 28
50920: PUSH
50921: LD_INT 3
50923: NEG
50924: PUSH
50925: LD_INT 3
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 3
50935: NEG
50936: PUSH
50937: LD_INT 4
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 4
50947: NEG
50948: PUSH
50949: LD_INT 3
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: LIST
50961: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50962: LD_ADDR_VAR 0 29
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: LD_INT 3
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: LD_INT 3
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: LD_INT 4
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 4
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: LD_INT 3
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 5
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: LD_INT 5
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: LD_INT 4
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: LD_INT 6
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 6
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: LD_INT 5
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51117: LD_ADDR_VAR 0 30
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 3
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 3
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 3
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 4
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 4
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 4
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 5
51197: PUSH
51198: LD_INT 0
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 5
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 5
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 6
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 6
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51260: LD_ADDR_VAR 0 31
51264: PUSH
51265: LD_INT 3
51267: PUSH
51268: LD_INT 2
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 3
51277: PUSH
51278: LD_INT 3
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 3
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 4
51297: PUSH
51298: LD_INT 3
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 4
51307: PUSH
51308: LD_INT 4
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 3
51317: PUSH
51318: LD_INT 4
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 5
51327: PUSH
51328: LD_INT 4
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 5
51337: PUSH
51338: LD_INT 5
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 4
51347: PUSH
51348: LD_INT 5
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 6
51357: PUSH
51358: LD_INT 5
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 6
51367: PUSH
51368: LD_INT 6
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 5
51377: PUSH
51378: LD_INT 6
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51399: LD_ADDR_VAR 0 32
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: LD_INT 3
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 3
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: LD_INT 2
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 4
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 4
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 3
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 5
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 5
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 4
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: LD_INT 6
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: LD_INT 6
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 5
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51542: LD_ADDR_VAR 0 33
51546: PUSH
51547: LD_INT 2
51549: NEG
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 3
51560: NEG
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 3
51571: NEG
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 3
51583: NEG
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 4
51594: NEG
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 4
51605: NEG
51606: PUSH
51607: LD_INT 1
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 4
51617: NEG
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 5
51628: NEG
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 5
51639: NEG
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 5
51651: NEG
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 6
51662: NEG
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 6
51673: NEG
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51697: LD_ADDR_VAR 0 34
51701: PUSH
51702: LD_INT 2
51704: NEG
51705: PUSH
51706: LD_INT 3
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 3
51716: NEG
51717: PUSH
51718: LD_INT 2
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 3
51728: NEG
51729: PUSH
51730: LD_INT 3
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 3
51740: NEG
51741: PUSH
51742: LD_INT 4
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 4
51752: NEG
51753: PUSH
51754: LD_INT 3
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 4
51764: NEG
51765: PUSH
51766: LD_INT 4
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 4
51776: NEG
51777: PUSH
51778: LD_INT 5
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 5
51788: NEG
51789: PUSH
51790: LD_INT 4
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 5
51800: NEG
51801: PUSH
51802: LD_INT 5
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 5
51812: NEG
51813: PUSH
51814: LD_INT 6
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 6
51824: NEG
51825: PUSH
51826: LD_INT 5
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 6
51836: NEG
51837: PUSH
51838: LD_INT 6
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51860: LD_ADDR_VAR 0 41
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: LD_INT 3
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: LIST
51903: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51904: LD_ADDR_VAR 0 42
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 3
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: LIST
51944: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51945: LD_ADDR_VAR 0 43
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 3
51962: PUSH
51963: LD_INT 2
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: LD_INT 3
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51985: LD_ADDR_VAR 0 44
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: LD_INT 3
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: LIST
52025: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52026: LD_ADDR_VAR 0 45
52030: PUSH
52031: LD_INT 2
52033: NEG
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 3
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: LIST
52069: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52070: LD_ADDR_VAR 0 46
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: LD_INT 2
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: LD_INT 3
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 3
52101: NEG
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: LIST
52115: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52116: LD_ADDR_VAR 0 47
52120: PUSH
52121: LD_INT 2
52123: NEG
52124: PUSH
52125: LD_INT 3
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: LD_INT 3
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52149: LD_ADDR_VAR 0 48
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52180: LD_ADDR_VAR 0 49
52184: PUSH
52185: LD_INT 3
52187: PUSH
52188: LD_INT 1
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 3
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52209: LD_ADDR_VAR 0 50
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: LD_INT 3
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 3
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52238: LD_ADDR_VAR 0 51
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 2
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52269: LD_ADDR_VAR 0 52
52273: PUSH
52274: LD_INT 3
52276: NEG
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 3
52288: NEG
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52302: LD_ADDR_VAR 0 53
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 3
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: LIST
52345: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52346: LD_ADDR_VAR 0 54
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 3
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 3
52374: PUSH
52375: LD_INT 1
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: LIST
52386: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52387: LD_ADDR_VAR 0 55
52391: PUSH
52392: LD_INT 3
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 3
52404: PUSH
52405: LD_INT 3
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: LD_INT 3
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: LIST
52426: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52427: LD_ADDR_VAR 0 56
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: LD_INT 3
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 0
52444: PUSH
52445: LD_INT 3
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: LIST
52467: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52468: LD_ADDR_VAR 0 57
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 3
52486: NEG
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 3
52497: NEG
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: LIST
52511: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52512: LD_ADDR_VAR 0 58
52516: PUSH
52517: LD_INT 2
52519: NEG
52520: PUSH
52521: LD_INT 3
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 3
52531: NEG
52532: PUSH
52533: LD_INT 2
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 3
52543: NEG
52544: PUSH
52545: LD_INT 3
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: LIST
52557: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52558: LD_ADDR_VAR 0 59
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: LD_INT 2
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: LIST
52601: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52602: LD_ADDR_VAR 0 60
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 2
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: LIST
52642: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52643: LD_ADDR_VAR 0 61
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: LIST
52682: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52683: LD_ADDR_VAR 0 62
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52724: LD_ADDR_VAR 0 63
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 2
52742: NEG
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: NEG
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: LIST
52767: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52768: LD_ADDR_VAR 0 64
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 2
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: LD_INT 2
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: LIST
52813: ST_TO_ADDR
// end ; 2 :
52814: GO 56080
52816: LD_INT 2
52818: DOUBLE
52819: EQUAL
52820: IFTRUE 52824
52822: GO 56079
52824: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52825: LD_ADDR_VAR 0 29
52829: PUSH
52830: LD_INT 4
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 4
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 5
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 5
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 4
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 3
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 3
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 3
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 5
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: LD_INT 3
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: PUSH
52936: LD_INT 2
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 4
52945: PUSH
52946: LD_INT 3
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 4
52955: PUSH
52956: LD_INT 4
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 3
52965: PUSH
52966: LD_INT 4
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 4
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: LD_INT 4
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 4
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 3
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 4
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: LD_INT 5
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 5
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: LD_INT 4
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 3
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 2
53087: PUSH
53088: LD_INT 5
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: LD_INT 3
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 3
53108: NEG
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 3
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 2
53131: NEG
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 3
53153: NEG
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 4
53164: NEG
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 4
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 4
53187: NEG
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 4
53210: NEG
53211: PUSH
53212: LD_INT 4
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 4
53222: NEG
53223: PUSH
53224: LD_INT 5
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 3
53234: NEG
53235: PUSH
53236: LD_INT 4
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 3
53246: NEG
53247: PUSH
53248: LD_INT 3
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 4
53258: NEG
53259: PUSH
53260: LD_INT 3
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 5
53270: NEG
53271: PUSH
53272: LD_INT 4
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 5
53282: NEG
53283: PUSH
53284: LD_INT 5
53286: NEG
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 3
53294: NEG
53295: PUSH
53296: LD_INT 5
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 5
53306: NEG
53307: PUSH
53308: LD_INT 3
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53363: LD_ADDR_VAR 0 30
53367: PUSH
53368: LD_INT 4
53370: PUSH
53371: LD_INT 4
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 4
53380: PUSH
53381: LD_INT 3
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 5
53390: PUSH
53391: LD_INT 4
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 5
53400: PUSH
53401: LD_INT 5
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 4
53410: PUSH
53411: LD_INT 5
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 3
53420: PUSH
53421: LD_INT 4
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 3
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 5
53440: PUSH
53441: LD_INT 3
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 3
53450: PUSH
53451: LD_INT 5
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 3
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: LD_INT 3
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: LD_INT 4
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 4
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 2
53532: PUSH
53533: LD_INT 4
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 2
53542: NEG
53543: PUSH
53544: LD_INT 2
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 4
53553: NEG
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 4
53564: NEG
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 3
53576: NEG
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 3
53587: NEG
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 4
53598: NEG
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 5
53609: NEG
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 5
53620: NEG
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 5
53632: NEG
53633: PUSH
53634: LD_INT 2
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 3
53644: NEG
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 3
53655: NEG
53656: PUSH
53657: LD_INT 3
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 3
53667: NEG
53668: PUSH
53669: LD_INT 4
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: LD_INT 3
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 3
53703: NEG
53704: PUSH
53705: LD_INT 2
53707: NEG
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 4
53715: NEG
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 4
53727: NEG
53728: PUSH
53729: LD_INT 4
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: LD_INT 4
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 4
53751: NEG
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 4
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 5
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: LD_INT 4
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 3
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: LD_INT 3
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 4
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 5
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: LD_INT 5
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53910: LD_ADDR_VAR 0 31
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 4
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 3
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: LD_INT 4
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 5
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 5
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: LD_INT 4
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: LD_INT 3
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: PUSH
53990: LD_INT 5
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 2
53999: NEG
54000: PUSH
54001: LD_INT 3
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 3
54021: NEG
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: NEG
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: LD_INT 1
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 3
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 4
54066: NEG
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 4
54077: NEG
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 4
54089: NEG
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 2
54101: NEG
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 4
54112: NEG
54113: PUSH
54114: LD_INT 4
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 4
54124: NEG
54125: PUSH
54126: LD_INT 5
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 3
54136: NEG
54137: PUSH
54138: LD_INT 4
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 3
54148: NEG
54149: PUSH
54150: LD_INT 3
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 4
54160: NEG
54161: PUSH
54162: LD_INT 3
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 5
54172: NEG
54173: PUSH
54174: LD_INT 4
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 5
54184: NEG
54185: PUSH
54186: LD_INT 5
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: LD_INT 5
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 5
54208: NEG
54209: PUSH
54210: LD_INT 3
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 3
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 4
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 3
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 2
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: LD_INT 3
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: LD_INT 4
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 2
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: LD_INT 4
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 4
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 4
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 5
54343: PUSH
54344: LD_INT 0
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 5
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 4
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 3
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 3
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 3
54394: PUSH
54395: LD_INT 2
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 5
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54460: LD_ADDR_VAR 0 32
54464: PUSH
54465: LD_INT 4
54467: NEG
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 4
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 3
54490: NEG
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 3
54501: NEG
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 4
54512: NEG
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 5
54523: NEG
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 5
54534: NEG
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 5
54546: NEG
54547: PUSH
54548: LD_INT 2
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 3
54558: NEG
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 3
54569: NEG
54570: PUSH
54571: LD_INT 3
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 3
54581: NEG
54582: PUSH
54583: LD_INT 4
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: NEG
54594: PUSH
54595: LD_INT 3
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 2
54605: NEG
54606: PUSH
54607: LD_INT 2
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 3
54617: NEG
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 4
54629: NEG
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 4
54641: NEG
54642: PUSH
54643: LD_INT 4
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: NEG
54654: PUSH
54655: LD_INT 4
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 4
54665: NEG
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 4
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 5
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: LD_INT 4
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: LD_INT 3
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 3
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: LD_INT 4
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: LD_INT 5
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 2
54756: PUSH
54757: LD_INT 3
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: LD_INT 5
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 3
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 3
54789: PUSH
54790: LD_INT 1
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 4
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 4
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 3
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 4
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 4
54872: PUSH
54873: LD_INT 4
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 4
54882: PUSH
54883: LD_INT 3
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 5
54892: PUSH
54893: LD_INT 4
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 5
54902: PUSH
54903: LD_INT 5
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 4
54912: PUSH
54913: LD_INT 5
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 3
54922: PUSH
54923: LD_INT 4
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 3
54932: PUSH
54933: LD_INT 3
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 5
54942: PUSH
54943: LD_INT 3
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 3
54952: PUSH
54953: LD_INT 5
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55007: LD_ADDR_VAR 0 33
55011: PUSH
55012: LD_INT 4
55014: NEG
55015: PUSH
55016: LD_INT 4
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 4
55026: NEG
55027: PUSH
55028: LD_INT 5
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 3
55038: NEG
55039: PUSH
55040: LD_INT 4
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 3
55050: NEG
55051: PUSH
55052: LD_INT 3
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 4
55062: NEG
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 5
55074: NEG
55075: PUSH
55076: LD_INT 4
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 5
55086: NEG
55087: PUSH
55088: LD_INT 5
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 3
55098: NEG
55099: PUSH
55100: LD_INT 5
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 5
55110: NEG
55111: PUSH
55112: LD_INT 3
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 3
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 4
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: LD_INT 3
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: NEG
55178: PUSH
55179: LD_INT 3
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 4
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: NEG
55213: PUSH
55214: LD_INT 4
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 4
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 4
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 5
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 5
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 4
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 3
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: LD_INT 2
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 5
55307: PUSH
55308: LD_INT 2
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 3
55317: PUSH
55318: LD_INT 3
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 3
55327: PUSH
55328: LD_INT 2
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 4
55337: PUSH
55338: LD_INT 3
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 4
55347: PUSH
55348: LD_INT 4
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 3
55357: PUSH
55358: LD_INT 4
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: LD_INT 3
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 4
55387: PUSH
55388: LD_INT 2
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: LD_INT 4
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 4
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 3
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 4
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: LD_INT 5
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 5
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 4
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: LD_INT 3
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 2
55479: PUSH
55480: LD_INT 5
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: NEG
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55545: LD_ADDR_VAR 0 34
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: LD_INT 4
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 5
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: LD_INT 4
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 3
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: LD_INT 4
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: LD_INT 5
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 3
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: LD_INT 5
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 3
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 4
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 4
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 3
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: LD_INT 2
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 4
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 4
55747: PUSH
55748: LD_INT 4
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 4
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 5
55767: PUSH
55768: LD_INT 4
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 5
55777: PUSH
55778: LD_INT 5
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 4
55787: PUSH
55788: LD_INT 5
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 3
55797: PUSH
55798: LD_INT 4
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 3
55807: PUSH
55808: LD_INT 3
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 5
55817: PUSH
55818: LD_INT 3
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 3
55827: PUSH
55828: LD_INT 5
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 3
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 3
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: LD_INT 4
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: LD_INT 4
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: LD_INT 3
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: LD_INT 4
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 2
55919: NEG
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 4
55930: NEG
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 4
55941: NEG
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 3
55964: NEG
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 4
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 5
55986: NEG
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 5
55997: NEG
55998: PUSH
55999: LD_INT 1
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 5
56009: NEG
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 3
56021: NEG
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: ST_TO_ADDR
// end ; end ;
56077: GO 56080
56079: POP
// case btype of b_depot , b_warehouse :
56080: LD_VAR 0 1
56084: PUSH
56085: LD_INT 0
56087: DOUBLE
56088: EQUAL
56089: IFTRUE 56099
56091: LD_INT 1
56093: DOUBLE
56094: EQUAL
56095: IFTRUE 56099
56097: GO 56300
56099: POP
// case nation of nation_american :
56100: LD_VAR 0 5
56104: PUSH
56105: LD_INT 1
56107: DOUBLE
56108: EQUAL
56109: IFTRUE 56113
56111: GO 56169
56113: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56114: LD_ADDR_VAR 0 9
56118: PUSH
56119: LD_VAR 0 11
56123: PUSH
56124: LD_VAR 0 12
56128: PUSH
56129: LD_VAR 0 13
56133: PUSH
56134: LD_VAR 0 14
56138: PUSH
56139: LD_VAR 0 15
56143: PUSH
56144: LD_VAR 0 16
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: PUSH
56157: LD_VAR 0 4
56161: PUSH
56162: LD_INT 1
56164: PLUS
56165: ARRAY
56166: ST_TO_ADDR
56167: GO 56298
56169: LD_INT 2
56171: DOUBLE
56172: EQUAL
56173: IFTRUE 56177
56175: GO 56233
56177: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56178: LD_ADDR_VAR 0 9
56182: PUSH
56183: LD_VAR 0 17
56187: PUSH
56188: LD_VAR 0 18
56192: PUSH
56193: LD_VAR 0 19
56197: PUSH
56198: LD_VAR 0 20
56202: PUSH
56203: LD_VAR 0 21
56207: PUSH
56208: LD_VAR 0 22
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: PUSH
56221: LD_VAR 0 4
56225: PUSH
56226: LD_INT 1
56228: PLUS
56229: ARRAY
56230: ST_TO_ADDR
56231: GO 56298
56233: LD_INT 3
56235: DOUBLE
56236: EQUAL
56237: IFTRUE 56241
56239: GO 56297
56241: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56242: LD_ADDR_VAR 0 9
56246: PUSH
56247: LD_VAR 0 23
56251: PUSH
56252: LD_VAR 0 24
56256: PUSH
56257: LD_VAR 0 25
56261: PUSH
56262: LD_VAR 0 26
56266: PUSH
56267: LD_VAR 0 27
56271: PUSH
56272: LD_VAR 0 28
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: PUSH
56285: LD_VAR 0 4
56289: PUSH
56290: LD_INT 1
56292: PLUS
56293: ARRAY
56294: ST_TO_ADDR
56295: GO 56298
56297: POP
56298: GO 56853
56300: LD_INT 2
56302: DOUBLE
56303: EQUAL
56304: IFTRUE 56314
56306: LD_INT 3
56308: DOUBLE
56309: EQUAL
56310: IFTRUE 56314
56312: GO 56370
56314: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56315: LD_ADDR_VAR 0 9
56319: PUSH
56320: LD_VAR 0 29
56324: PUSH
56325: LD_VAR 0 30
56329: PUSH
56330: LD_VAR 0 31
56334: PUSH
56335: LD_VAR 0 32
56339: PUSH
56340: LD_VAR 0 33
56344: PUSH
56345: LD_VAR 0 34
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: PUSH
56358: LD_VAR 0 4
56362: PUSH
56363: LD_INT 1
56365: PLUS
56366: ARRAY
56367: ST_TO_ADDR
56368: GO 56853
56370: LD_INT 16
56372: DOUBLE
56373: EQUAL
56374: IFTRUE 56432
56376: LD_INT 17
56378: DOUBLE
56379: EQUAL
56380: IFTRUE 56432
56382: LD_INT 18
56384: DOUBLE
56385: EQUAL
56386: IFTRUE 56432
56388: LD_INT 19
56390: DOUBLE
56391: EQUAL
56392: IFTRUE 56432
56394: LD_INT 22
56396: DOUBLE
56397: EQUAL
56398: IFTRUE 56432
56400: LD_INT 20
56402: DOUBLE
56403: EQUAL
56404: IFTRUE 56432
56406: LD_INT 21
56408: DOUBLE
56409: EQUAL
56410: IFTRUE 56432
56412: LD_INT 23
56414: DOUBLE
56415: EQUAL
56416: IFTRUE 56432
56418: LD_INT 24
56420: DOUBLE
56421: EQUAL
56422: IFTRUE 56432
56424: LD_INT 25
56426: DOUBLE
56427: EQUAL
56428: IFTRUE 56432
56430: GO 56488
56432: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56433: LD_ADDR_VAR 0 9
56437: PUSH
56438: LD_VAR 0 35
56442: PUSH
56443: LD_VAR 0 36
56447: PUSH
56448: LD_VAR 0 37
56452: PUSH
56453: LD_VAR 0 38
56457: PUSH
56458: LD_VAR 0 39
56462: PUSH
56463: LD_VAR 0 40
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: PUSH
56476: LD_VAR 0 4
56480: PUSH
56481: LD_INT 1
56483: PLUS
56484: ARRAY
56485: ST_TO_ADDR
56486: GO 56853
56488: LD_INT 6
56490: DOUBLE
56491: EQUAL
56492: IFTRUE 56544
56494: LD_INT 7
56496: DOUBLE
56497: EQUAL
56498: IFTRUE 56544
56500: LD_INT 8
56502: DOUBLE
56503: EQUAL
56504: IFTRUE 56544
56506: LD_INT 13
56508: DOUBLE
56509: EQUAL
56510: IFTRUE 56544
56512: LD_INT 12
56514: DOUBLE
56515: EQUAL
56516: IFTRUE 56544
56518: LD_INT 15
56520: DOUBLE
56521: EQUAL
56522: IFTRUE 56544
56524: LD_INT 11
56526: DOUBLE
56527: EQUAL
56528: IFTRUE 56544
56530: LD_INT 14
56532: DOUBLE
56533: EQUAL
56534: IFTRUE 56544
56536: LD_INT 10
56538: DOUBLE
56539: EQUAL
56540: IFTRUE 56544
56542: GO 56600
56544: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56545: LD_ADDR_VAR 0 9
56549: PUSH
56550: LD_VAR 0 41
56554: PUSH
56555: LD_VAR 0 42
56559: PUSH
56560: LD_VAR 0 43
56564: PUSH
56565: LD_VAR 0 44
56569: PUSH
56570: LD_VAR 0 45
56574: PUSH
56575: LD_VAR 0 46
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: PUSH
56588: LD_VAR 0 4
56592: PUSH
56593: LD_INT 1
56595: PLUS
56596: ARRAY
56597: ST_TO_ADDR
56598: GO 56853
56600: LD_INT 36
56602: DOUBLE
56603: EQUAL
56604: IFTRUE 56608
56606: GO 56664
56608: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56609: LD_ADDR_VAR 0 9
56613: PUSH
56614: LD_VAR 0 47
56618: PUSH
56619: LD_VAR 0 48
56623: PUSH
56624: LD_VAR 0 49
56628: PUSH
56629: LD_VAR 0 50
56633: PUSH
56634: LD_VAR 0 51
56638: PUSH
56639: LD_VAR 0 52
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: PUSH
56652: LD_VAR 0 4
56656: PUSH
56657: LD_INT 1
56659: PLUS
56660: ARRAY
56661: ST_TO_ADDR
56662: GO 56853
56664: LD_INT 4
56666: DOUBLE
56667: EQUAL
56668: IFTRUE 56690
56670: LD_INT 5
56672: DOUBLE
56673: EQUAL
56674: IFTRUE 56690
56676: LD_INT 34
56678: DOUBLE
56679: EQUAL
56680: IFTRUE 56690
56682: LD_INT 37
56684: DOUBLE
56685: EQUAL
56686: IFTRUE 56690
56688: GO 56746
56690: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56691: LD_ADDR_VAR 0 9
56695: PUSH
56696: LD_VAR 0 53
56700: PUSH
56701: LD_VAR 0 54
56705: PUSH
56706: LD_VAR 0 55
56710: PUSH
56711: LD_VAR 0 56
56715: PUSH
56716: LD_VAR 0 57
56720: PUSH
56721: LD_VAR 0 58
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: PUSH
56734: LD_VAR 0 4
56738: PUSH
56739: LD_INT 1
56741: PLUS
56742: ARRAY
56743: ST_TO_ADDR
56744: GO 56853
56746: LD_INT 31
56748: DOUBLE
56749: EQUAL
56750: IFTRUE 56796
56752: LD_INT 32
56754: DOUBLE
56755: EQUAL
56756: IFTRUE 56796
56758: LD_INT 33
56760: DOUBLE
56761: EQUAL
56762: IFTRUE 56796
56764: LD_INT 27
56766: DOUBLE
56767: EQUAL
56768: IFTRUE 56796
56770: LD_INT 26
56772: DOUBLE
56773: EQUAL
56774: IFTRUE 56796
56776: LD_INT 28
56778: DOUBLE
56779: EQUAL
56780: IFTRUE 56796
56782: LD_INT 29
56784: DOUBLE
56785: EQUAL
56786: IFTRUE 56796
56788: LD_INT 30
56790: DOUBLE
56791: EQUAL
56792: IFTRUE 56796
56794: GO 56852
56796: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56797: LD_ADDR_VAR 0 9
56801: PUSH
56802: LD_VAR 0 59
56806: PUSH
56807: LD_VAR 0 60
56811: PUSH
56812: LD_VAR 0 61
56816: PUSH
56817: LD_VAR 0 62
56821: PUSH
56822: LD_VAR 0 63
56826: PUSH
56827: LD_VAR 0 64
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: PUSH
56840: LD_VAR 0 4
56844: PUSH
56845: LD_INT 1
56847: PLUS
56848: ARRAY
56849: ST_TO_ADDR
56850: GO 56853
56852: POP
// temp_list2 = [ ] ;
56853: LD_ADDR_VAR 0 10
56857: PUSH
56858: EMPTY
56859: ST_TO_ADDR
// for i in temp_list do
56860: LD_ADDR_VAR 0 8
56864: PUSH
56865: LD_VAR 0 9
56869: PUSH
56870: FOR_IN
56871: IFFALSE 56923
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56873: LD_ADDR_VAR 0 10
56877: PUSH
56878: LD_VAR 0 10
56882: PUSH
56883: LD_VAR 0 8
56887: PUSH
56888: LD_INT 1
56890: ARRAY
56891: PUSH
56892: LD_VAR 0 2
56896: PLUS
56897: PUSH
56898: LD_VAR 0 8
56902: PUSH
56903: LD_INT 2
56905: ARRAY
56906: PUSH
56907: LD_VAR 0 3
56911: PLUS
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: EMPTY
56918: LIST
56919: ADD
56920: ST_TO_ADDR
56921: GO 56870
56923: POP
56924: POP
// result = temp_list2 ;
56925: LD_ADDR_VAR 0 7
56929: PUSH
56930: LD_VAR 0 10
56934: ST_TO_ADDR
// end ;
56935: LD_VAR 0 7
56939: RET
// export function EnemyInRange ( unit , dist ) ; begin
56940: LD_INT 0
56942: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56943: LD_ADDR_VAR 0 3
56947: PUSH
56948: LD_VAR 0 1
56952: PPUSH
56953: CALL_OW 255
56957: PPUSH
56958: LD_VAR 0 1
56962: PPUSH
56963: CALL_OW 250
56967: PPUSH
56968: LD_VAR 0 1
56972: PPUSH
56973: CALL_OW 251
56977: PPUSH
56978: LD_VAR 0 2
56982: PPUSH
56983: CALL 30313 0 4
56987: PUSH
56988: LD_INT 4
56990: ARRAY
56991: ST_TO_ADDR
// end ;
56992: LD_VAR 0 3
56996: RET
// export function PlayerSeeMe ( unit ) ; begin
56997: LD_INT 0
56999: PPUSH
// result := See ( your_side , unit ) ;
57000: LD_ADDR_VAR 0 2
57004: PUSH
57005: LD_OWVAR 2
57009: PPUSH
57010: LD_VAR 0 1
57014: PPUSH
57015: CALL_OW 292
57019: ST_TO_ADDR
// end ;
57020: LD_VAR 0 2
57024: RET
// export function ReverseDir ( unit ) ; begin
57025: LD_INT 0
57027: PPUSH
// if not unit then
57028: LD_VAR 0 1
57032: NOT
57033: IFFALSE 57037
// exit ;
57035: GO 57060
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57037: LD_ADDR_VAR 0 2
57041: PUSH
57042: LD_VAR 0 1
57046: PPUSH
57047: CALL_OW 254
57051: PUSH
57052: LD_INT 3
57054: PLUS
57055: PUSH
57056: LD_INT 6
57058: MOD
57059: ST_TO_ADDR
// end ;
57060: LD_VAR 0 2
57064: RET
// export function ReverseArray ( array ) ; var i ; begin
57065: LD_INT 0
57067: PPUSH
57068: PPUSH
// if not array then
57069: LD_VAR 0 1
57073: NOT
57074: IFFALSE 57078
// exit ;
57076: GO 57133
// result := [ ] ;
57078: LD_ADDR_VAR 0 2
57082: PUSH
57083: EMPTY
57084: ST_TO_ADDR
// for i := array downto 1 do
57085: LD_ADDR_VAR 0 3
57089: PUSH
57090: DOUBLE
57091: LD_VAR 0 1
57095: INC
57096: ST_TO_ADDR
57097: LD_INT 1
57099: PUSH
57100: FOR_DOWNTO
57101: IFFALSE 57131
// result := Join ( result , array [ i ] ) ;
57103: LD_ADDR_VAR 0 2
57107: PUSH
57108: LD_VAR 0 2
57112: PPUSH
57113: LD_VAR 0 1
57117: PUSH
57118: LD_VAR 0 3
57122: ARRAY
57123: PPUSH
57124: CALL 61778 0 2
57128: ST_TO_ADDR
57129: GO 57100
57131: POP
57132: POP
// end ;
57133: LD_VAR 0 2
57137: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57138: LD_INT 0
57140: PPUSH
57141: PPUSH
57142: PPUSH
57143: PPUSH
57144: PPUSH
57145: PPUSH
// if not unit or not hexes then
57146: LD_VAR 0 1
57150: NOT
57151: PUSH
57152: LD_VAR 0 2
57156: NOT
57157: OR
57158: IFFALSE 57162
// exit ;
57160: GO 57285
// dist := 9999 ;
57162: LD_ADDR_VAR 0 5
57166: PUSH
57167: LD_INT 9999
57169: ST_TO_ADDR
// for i = 1 to hexes do
57170: LD_ADDR_VAR 0 4
57174: PUSH
57175: DOUBLE
57176: LD_INT 1
57178: DEC
57179: ST_TO_ADDR
57180: LD_VAR 0 2
57184: PUSH
57185: FOR_TO
57186: IFFALSE 57273
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57188: LD_ADDR_VAR 0 6
57192: PUSH
57193: LD_VAR 0 1
57197: PPUSH
57198: LD_VAR 0 2
57202: PUSH
57203: LD_VAR 0 4
57207: ARRAY
57208: PUSH
57209: LD_INT 1
57211: ARRAY
57212: PPUSH
57213: LD_VAR 0 2
57217: PUSH
57218: LD_VAR 0 4
57222: ARRAY
57223: PUSH
57224: LD_INT 2
57226: ARRAY
57227: PPUSH
57228: CALL_OW 297
57232: ST_TO_ADDR
// if tdist < dist then
57233: LD_VAR 0 6
57237: PUSH
57238: LD_VAR 0 5
57242: LESS
57243: IFFALSE 57271
// begin hex := hexes [ i ] ;
57245: LD_ADDR_VAR 0 8
57249: PUSH
57250: LD_VAR 0 2
57254: PUSH
57255: LD_VAR 0 4
57259: ARRAY
57260: ST_TO_ADDR
// dist := tdist ;
57261: LD_ADDR_VAR 0 5
57265: PUSH
57266: LD_VAR 0 6
57270: ST_TO_ADDR
// end ; end ;
57271: GO 57185
57273: POP
57274: POP
// result := hex ;
57275: LD_ADDR_VAR 0 3
57279: PUSH
57280: LD_VAR 0 8
57284: ST_TO_ADDR
// end ;
57285: LD_VAR 0 3
57289: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57290: LD_INT 0
57292: PPUSH
57293: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57294: LD_VAR 0 1
57298: NOT
57299: PUSH
57300: LD_VAR 0 1
57304: PUSH
57305: LD_INT 21
57307: PUSH
57308: LD_INT 2
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 23
57317: PUSH
57318: LD_INT 2
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PPUSH
57329: CALL_OW 69
57333: IN
57334: NOT
57335: OR
57336: IFFALSE 57340
// exit ;
57338: GO 57387
// for i = 1 to 3 do
57340: LD_ADDR_VAR 0 3
57344: PUSH
57345: DOUBLE
57346: LD_INT 1
57348: DEC
57349: ST_TO_ADDR
57350: LD_INT 3
57352: PUSH
57353: FOR_TO
57354: IFFALSE 57385
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57356: LD_VAR 0 1
57360: PPUSH
57361: CALL_OW 250
57365: PPUSH
57366: LD_VAR 0 1
57370: PPUSH
57371: CALL_OW 251
57375: PPUSH
57376: LD_INT 1
57378: PPUSH
57379: CALL_OW 453
57383: GO 57353
57385: POP
57386: POP
// end ;
57387: LD_VAR 0 2
57391: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57392: LD_INT 0
57394: PPUSH
57395: PPUSH
57396: PPUSH
57397: PPUSH
57398: PPUSH
57399: PPUSH
// if not unit or not enemy_unit then
57400: LD_VAR 0 1
57404: NOT
57405: PUSH
57406: LD_VAR 0 2
57410: NOT
57411: OR
57412: IFFALSE 57416
// exit ;
57414: GO 57883
// if GetLives ( i ) < 250 then
57416: LD_VAR 0 4
57420: PPUSH
57421: CALL_OW 256
57425: PUSH
57426: LD_INT 250
57428: LESS
57429: IFFALSE 57442
// begin ComAutodestruct ( i ) ;
57431: LD_VAR 0 4
57435: PPUSH
57436: CALL 57290 0 1
// exit ;
57440: GO 57883
// end ; x := GetX ( enemy_unit ) ;
57442: LD_ADDR_VAR 0 7
57446: PUSH
57447: LD_VAR 0 2
57451: PPUSH
57452: CALL_OW 250
57456: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57457: LD_ADDR_VAR 0 8
57461: PUSH
57462: LD_VAR 0 2
57466: PPUSH
57467: CALL_OW 251
57471: ST_TO_ADDR
// if not x or not y then
57472: LD_VAR 0 7
57476: NOT
57477: PUSH
57478: LD_VAR 0 8
57482: NOT
57483: OR
57484: IFFALSE 57488
// exit ;
57486: GO 57883
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57488: LD_ADDR_VAR 0 6
57492: PUSH
57493: LD_VAR 0 7
57497: PPUSH
57498: LD_INT 0
57500: PPUSH
57501: LD_INT 4
57503: PPUSH
57504: CALL_OW 272
57508: PUSH
57509: LD_VAR 0 8
57513: PPUSH
57514: LD_INT 0
57516: PPUSH
57517: LD_INT 4
57519: PPUSH
57520: CALL_OW 273
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_VAR 0 7
57533: PPUSH
57534: LD_INT 1
57536: PPUSH
57537: LD_INT 4
57539: PPUSH
57540: CALL_OW 272
57544: PUSH
57545: LD_VAR 0 8
57549: PPUSH
57550: LD_INT 1
57552: PPUSH
57553: LD_INT 4
57555: PPUSH
57556: CALL_OW 273
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_VAR 0 7
57569: PPUSH
57570: LD_INT 2
57572: PPUSH
57573: LD_INT 4
57575: PPUSH
57576: CALL_OW 272
57580: PUSH
57581: LD_VAR 0 8
57585: PPUSH
57586: LD_INT 2
57588: PPUSH
57589: LD_INT 4
57591: PPUSH
57592: CALL_OW 273
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_VAR 0 7
57605: PPUSH
57606: LD_INT 3
57608: PPUSH
57609: LD_INT 4
57611: PPUSH
57612: CALL_OW 272
57616: PUSH
57617: LD_VAR 0 8
57621: PPUSH
57622: LD_INT 3
57624: PPUSH
57625: LD_INT 4
57627: PPUSH
57628: CALL_OW 273
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_VAR 0 7
57641: PPUSH
57642: LD_INT 4
57644: PPUSH
57645: LD_INT 4
57647: PPUSH
57648: CALL_OW 272
57652: PUSH
57653: LD_VAR 0 8
57657: PPUSH
57658: LD_INT 4
57660: PPUSH
57661: LD_INT 4
57663: PPUSH
57664: CALL_OW 273
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_VAR 0 7
57677: PPUSH
57678: LD_INT 5
57680: PPUSH
57681: LD_INT 4
57683: PPUSH
57684: CALL_OW 272
57688: PUSH
57689: LD_VAR 0 8
57693: PPUSH
57694: LD_INT 5
57696: PPUSH
57697: LD_INT 4
57699: PPUSH
57700: CALL_OW 273
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: ST_TO_ADDR
// for i = tmp downto 1 do
57717: LD_ADDR_VAR 0 4
57721: PUSH
57722: DOUBLE
57723: LD_VAR 0 6
57727: INC
57728: ST_TO_ADDR
57729: LD_INT 1
57731: PUSH
57732: FOR_DOWNTO
57733: IFFALSE 57834
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57735: LD_VAR 0 6
57739: PUSH
57740: LD_VAR 0 4
57744: ARRAY
57745: PUSH
57746: LD_INT 1
57748: ARRAY
57749: PPUSH
57750: LD_VAR 0 6
57754: PUSH
57755: LD_VAR 0 4
57759: ARRAY
57760: PUSH
57761: LD_INT 2
57763: ARRAY
57764: PPUSH
57765: CALL_OW 488
57769: NOT
57770: PUSH
57771: LD_VAR 0 6
57775: PUSH
57776: LD_VAR 0 4
57780: ARRAY
57781: PUSH
57782: LD_INT 1
57784: ARRAY
57785: PPUSH
57786: LD_VAR 0 6
57790: PUSH
57791: LD_VAR 0 4
57795: ARRAY
57796: PUSH
57797: LD_INT 2
57799: ARRAY
57800: PPUSH
57801: CALL_OW 428
57805: PUSH
57806: LD_INT 0
57808: NONEQUAL
57809: OR
57810: IFFALSE 57832
// tmp := Delete ( tmp , i ) ;
57812: LD_ADDR_VAR 0 6
57816: PUSH
57817: LD_VAR 0 6
57821: PPUSH
57822: LD_VAR 0 4
57826: PPUSH
57827: CALL_OW 3
57831: ST_TO_ADDR
57832: GO 57732
57834: POP
57835: POP
// j := GetClosestHex ( unit , tmp ) ;
57836: LD_ADDR_VAR 0 5
57840: PUSH
57841: LD_VAR 0 1
57845: PPUSH
57846: LD_VAR 0 6
57850: PPUSH
57851: CALL 57138 0 2
57855: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57856: LD_VAR 0 1
57860: PPUSH
57861: LD_VAR 0 5
57865: PUSH
57866: LD_INT 1
57868: ARRAY
57869: PPUSH
57870: LD_VAR 0 5
57874: PUSH
57875: LD_INT 2
57877: ARRAY
57878: PPUSH
57879: CALL_OW 111
// end ;
57883: LD_VAR 0 3
57887: RET
// export function PrepareApemanSoldier ( ) ; begin
57888: LD_INT 0
57890: PPUSH
// uc_nation := 0 ;
57891: LD_ADDR_OWVAR 21
57895: PUSH
57896: LD_INT 0
57898: ST_TO_ADDR
// hc_sex := sex_male ;
57899: LD_ADDR_OWVAR 27
57903: PUSH
57904: LD_INT 1
57906: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57907: LD_ADDR_OWVAR 28
57911: PUSH
57912: LD_INT 15
57914: ST_TO_ADDR
// hc_gallery :=  ;
57915: LD_ADDR_OWVAR 33
57919: PUSH
57920: LD_STRING 
57922: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57923: LD_ADDR_OWVAR 31
57927: PUSH
57928: LD_INT 0
57930: PPUSH
57931: LD_INT 3
57933: PPUSH
57934: CALL_OW 12
57938: PUSH
57939: LD_INT 0
57941: PPUSH
57942: LD_INT 3
57944: PPUSH
57945: CALL_OW 12
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: ST_TO_ADDR
// end ;
57962: LD_VAR 0 1
57966: RET
// export function PrepareApemanEngineer ( ) ; begin
57967: LD_INT 0
57969: PPUSH
// uc_nation := 0 ;
57970: LD_ADDR_OWVAR 21
57974: PUSH
57975: LD_INT 0
57977: ST_TO_ADDR
// hc_sex := sex_male ;
57978: LD_ADDR_OWVAR 27
57982: PUSH
57983: LD_INT 1
57985: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57986: LD_ADDR_OWVAR 28
57990: PUSH
57991: LD_INT 16
57993: ST_TO_ADDR
// hc_gallery :=  ;
57994: LD_ADDR_OWVAR 33
57998: PUSH
57999: LD_STRING 
58001: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58002: LD_ADDR_OWVAR 31
58006: PUSH
58007: LD_INT 0
58009: PPUSH
58010: LD_INT 3
58012: PPUSH
58013: CALL_OW 12
58017: PUSH
58018: LD_INT 0
58020: PPUSH
58021: LD_INT 3
58023: PPUSH
58024: CALL_OW 12
58028: PUSH
58029: LD_INT 0
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: ST_TO_ADDR
// end ;
58041: LD_VAR 0 1
58045: RET
// export function PrepareApeman ( agressivity ) ; begin
58046: LD_INT 0
58048: PPUSH
// uc_side := 0 ;
58049: LD_ADDR_OWVAR 20
58053: PUSH
58054: LD_INT 0
58056: ST_TO_ADDR
// uc_nation := 0 ;
58057: LD_ADDR_OWVAR 21
58061: PUSH
58062: LD_INT 0
58064: ST_TO_ADDR
// hc_sex := sex_male ;
58065: LD_ADDR_OWVAR 27
58069: PUSH
58070: LD_INT 1
58072: ST_TO_ADDR
// hc_class := class_apeman ;
58073: LD_ADDR_OWVAR 28
58077: PUSH
58078: LD_INT 12
58080: ST_TO_ADDR
// hc_gallery :=  ;
58081: LD_ADDR_OWVAR 33
58085: PUSH
58086: LD_STRING 
58088: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58089: LD_ADDR_OWVAR 35
58093: PUSH
58094: LD_VAR 0 1
58098: NEG
58099: PPUSH
58100: LD_VAR 0 1
58104: PPUSH
58105: CALL_OW 12
58109: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58110: LD_ADDR_OWVAR 31
58114: PUSH
58115: LD_INT 0
58117: PPUSH
58118: LD_INT 3
58120: PPUSH
58121: CALL_OW 12
58125: PUSH
58126: LD_INT 0
58128: PPUSH
58129: LD_INT 3
58131: PPUSH
58132: CALL_OW 12
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: ST_TO_ADDR
// end ;
58149: LD_VAR 0 2
58153: RET
// export function PrepareTiger ( agressivity ) ; begin
58154: LD_INT 0
58156: PPUSH
// uc_side := 0 ;
58157: LD_ADDR_OWVAR 20
58161: PUSH
58162: LD_INT 0
58164: ST_TO_ADDR
// uc_nation := 0 ;
58165: LD_ADDR_OWVAR 21
58169: PUSH
58170: LD_INT 0
58172: ST_TO_ADDR
// hc_class := class_tiger ;
58173: LD_ADDR_OWVAR 28
58177: PUSH
58178: LD_INT 14
58180: ST_TO_ADDR
// hc_gallery :=  ;
58181: LD_ADDR_OWVAR 33
58185: PUSH
58186: LD_STRING 
58188: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58189: LD_ADDR_OWVAR 35
58193: PUSH
58194: LD_VAR 0 1
58198: NEG
58199: PPUSH
58200: LD_VAR 0 1
58204: PPUSH
58205: CALL_OW 12
58209: ST_TO_ADDR
// end ;
58210: LD_VAR 0 2
58214: RET
// export function PrepareEnchidna ( ) ; begin
58215: LD_INT 0
58217: PPUSH
// uc_side := 0 ;
58218: LD_ADDR_OWVAR 20
58222: PUSH
58223: LD_INT 0
58225: ST_TO_ADDR
// uc_nation := 0 ;
58226: LD_ADDR_OWVAR 21
58230: PUSH
58231: LD_INT 0
58233: ST_TO_ADDR
// hc_class := class_baggie ;
58234: LD_ADDR_OWVAR 28
58238: PUSH
58239: LD_INT 13
58241: ST_TO_ADDR
// hc_gallery :=  ;
58242: LD_ADDR_OWVAR 33
58246: PUSH
58247: LD_STRING 
58249: ST_TO_ADDR
// end ;
58250: LD_VAR 0 1
58254: RET
// export function PrepareFrog ( ) ; begin
58255: LD_INT 0
58257: PPUSH
// uc_side := 0 ;
58258: LD_ADDR_OWVAR 20
58262: PUSH
58263: LD_INT 0
58265: ST_TO_ADDR
// uc_nation := 0 ;
58266: LD_ADDR_OWVAR 21
58270: PUSH
58271: LD_INT 0
58273: ST_TO_ADDR
// hc_class := class_frog ;
58274: LD_ADDR_OWVAR 28
58278: PUSH
58279: LD_INT 19
58281: ST_TO_ADDR
// hc_gallery :=  ;
58282: LD_ADDR_OWVAR 33
58286: PUSH
58287: LD_STRING 
58289: ST_TO_ADDR
// end ;
58290: LD_VAR 0 1
58294: RET
// export function PrepareFish ( ) ; begin
58295: LD_INT 0
58297: PPUSH
// uc_side := 0 ;
58298: LD_ADDR_OWVAR 20
58302: PUSH
58303: LD_INT 0
58305: ST_TO_ADDR
// uc_nation := 0 ;
58306: LD_ADDR_OWVAR 21
58310: PUSH
58311: LD_INT 0
58313: ST_TO_ADDR
// hc_class := class_fish ;
58314: LD_ADDR_OWVAR 28
58318: PUSH
58319: LD_INT 20
58321: ST_TO_ADDR
// hc_gallery :=  ;
58322: LD_ADDR_OWVAR 33
58326: PUSH
58327: LD_STRING 
58329: ST_TO_ADDR
// end ;
58330: LD_VAR 0 1
58334: RET
// export function PrepareBird ( ) ; begin
58335: LD_INT 0
58337: PPUSH
// uc_side := 0 ;
58338: LD_ADDR_OWVAR 20
58342: PUSH
58343: LD_INT 0
58345: ST_TO_ADDR
// uc_nation := 0 ;
58346: LD_ADDR_OWVAR 21
58350: PUSH
58351: LD_INT 0
58353: ST_TO_ADDR
// hc_class := class_phororhacos ;
58354: LD_ADDR_OWVAR 28
58358: PUSH
58359: LD_INT 18
58361: ST_TO_ADDR
// hc_gallery :=  ;
58362: LD_ADDR_OWVAR 33
58366: PUSH
58367: LD_STRING 
58369: ST_TO_ADDR
// end ;
58370: LD_VAR 0 1
58374: RET
// export function PrepareHorse ( ) ; begin
58375: LD_INT 0
58377: PPUSH
// uc_side := 0 ;
58378: LD_ADDR_OWVAR 20
58382: PUSH
58383: LD_INT 0
58385: ST_TO_ADDR
// uc_nation := 0 ;
58386: LD_ADDR_OWVAR 21
58390: PUSH
58391: LD_INT 0
58393: ST_TO_ADDR
// hc_class := class_horse ;
58394: LD_ADDR_OWVAR 28
58398: PUSH
58399: LD_INT 21
58401: ST_TO_ADDR
// hc_gallery :=  ;
58402: LD_ADDR_OWVAR 33
58406: PUSH
58407: LD_STRING 
58409: ST_TO_ADDR
// end ;
58410: LD_VAR 0 1
58414: RET
// export function PrepareMastodont ( ) ; begin
58415: LD_INT 0
58417: PPUSH
// uc_side := 0 ;
58418: LD_ADDR_OWVAR 20
58422: PUSH
58423: LD_INT 0
58425: ST_TO_ADDR
// uc_nation := 0 ;
58426: LD_ADDR_OWVAR 21
58430: PUSH
58431: LD_INT 0
58433: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58434: LD_ADDR_OWVAR 37
58438: PUSH
58439: LD_INT 31
58441: ST_TO_ADDR
// vc_control := control_rider ;
58442: LD_ADDR_OWVAR 38
58446: PUSH
58447: LD_INT 4
58449: ST_TO_ADDR
// end ;
58450: LD_VAR 0 1
58454: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58455: LD_INT 0
58457: PPUSH
58458: PPUSH
58459: PPUSH
// uc_side = 0 ;
58460: LD_ADDR_OWVAR 20
58464: PUSH
58465: LD_INT 0
58467: ST_TO_ADDR
// uc_nation = 0 ;
58468: LD_ADDR_OWVAR 21
58472: PUSH
58473: LD_INT 0
58475: ST_TO_ADDR
// InitHc_All ( ) ;
58476: CALL_OW 584
// InitVc ;
58480: CALL_OW 20
// if mastodonts then
58484: LD_VAR 0 6
58488: IFFALSE 58555
// for i = 1 to mastodonts do
58490: LD_ADDR_VAR 0 11
58494: PUSH
58495: DOUBLE
58496: LD_INT 1
58498: DEC
58499: ST_TO_ADDR
58500: LD_VAR 0 6
58504: PUSH
58505: FOR_TO
58506: IFFALSE 58553
// begin vc_chassis := 31 ;
58508: LD_ADDR_OWVAR 37
58512: PUSH
58513: LD_INT 31
58515: ST_TO_ADDR
// vc_control := control_rider ;
58516: LD_ADDR_OWVAR 38
58520: PUSH
58521: LD_INT 4
58523: ST_TO_ADDR
// animal := CreateVehicle ;
58524: LD_ADDR_VAR 0 12
58528: PUSH
58529: CALL_OW 45
58533: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58534: LD_VAR 0 12
58538: PPUSH
58539: LD_VAR 0 8
58543: PPUSH
58544: LD_INT 0
58546: PPUSH
58547: CALL 60683 0 3
// end ;
58551: GO 58505
58553: POP
58554: POP
// if horses then
58555: LD_VAR 0 5
58559: IFFALSE 58626
// for i = 1 to horses do
58561: LD_ADDR_VAR 0 11
58565: PUSH
58566: DOUBLE
58567: LD_INT 1
58569: DEC
58570: ST_TO_ADDR
58571: LD_VAR 0 5
58575: PUSH
58576: FOR_TO
58577: IFFALSE 58624
// begin hc_class := 21 ;
58579: LD_ADDR_OWVAR 28
58583: PUSH
58584: LD_INT 21
58586: ST_TO_ADDR
// hc_gallery :=  ;
58587: LD_ADDR_OWVAR 33
58591: PUSH
58592: LD_STRING 
58594: ST_TO_ADDR
// animal := CreateHuman ;
58595: LD_ADDR_VAR 0 12
58599: PUSH
58600: CALL_OW 44
58604: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58605: LD_VAR 0 12
58609: PPUSH
58610: LD_VAR 0 8
58614: PPUSH
58615: LD_INT 0
58617: PPUSH
58618: CALL 60683 0 3
// end ;
58622: GO 58576
58624: POP
58625: POP
// if birds then
58626: LD_VAR 0 1
58630: IFFALSE 58697
// for i = 1 to birds do
58632: LD_ADDR_VAR 0 11
58636: PUSH
58637: DOUBLE
58638: LD_INT 1
58640: DEC
58641: ST_TO_ADDR
58642: LD_VAR 0 1
58646: PUSH
58647: FOR_TO
58648: IFFALSE 58695
// begin hc_class := 18 ;
58650: LD_ADDR_OWVAR 28
58654: PUSH
58655: LD_INT 18
58657: ST_TO_ADDR
// hc_gallery =  ;
58658: LD_ADDR_OWVAR 33
58662: PUSH
58663: LD_STRING 
58665: ST_TO_ADDR
// animal := CreateHuman ;
58666: LD_ADDR_VAR 0 12
58670: PUSH
58671: CALL_OW 44
58675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58676: LD_VAR 0 12
58680: PPUSH
58681: LD_VAR 0 8
58685: PPUSH
58686: LD_INT 0
58688: PPUSH
58689: CALL 60683 0 3
// end ;
58693: GO 58647
58695: POP
58696: POP
// if tigers then
58697: LD_VAR 0 2
58701: IFFALSE 58785
// for i = 1 to tigers do
58703: LD_ADDR_VAR 0 11
58707: PUSH
58708: DOUBLE
58709: LD_INT 1
58711: DEC
58712: ST_TO_ADDR
58713: LD_VAR 0 2
58717: PUSH
58718: FOR_TO
58719: IFFALSE 58783
// begin hc_class = class_tiger ;
58721: LD_ADDR_OWVAR 28
58725: PUSH
58726: LD_INT 14
58728: ST_TO_ADDR
// hc_gallery =  ;
58729: LD_ADDR_OWVAR 33
58733: PUSH
58734: LD_STRING 
58736: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58737: LD_ADDR_OWVAR 35
58741: PUSH
58742: LD_INT 7
58744: NEG
58745: PPUSH
58746: LD_INT 7
58748: PPUSH
58749: CALL_OW 12
58753: ST_TO_ADDR
// animal := CreateHuman ;
58754: LD_ADDR_VAR 0 12
58758: PUSH
58759: CALL_OW 44
58763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58764: LD_VAR 0 12
58768: PPUSH
58769: LD_VAR 0 8
58773: PPUSH
58774: LD_INT 0
58776: PPUSH
58777: CALL 60683 0 3
// end ;
58781: GO 58718
58783: POP
58784: POP
// if apemans then
58785: LD_VAR 0 3
58789: IFFALSE 58912
// for i = 1 to apemans do
58791: LD_ADDR_VAR 0 11
58795: PUSH
58796: DOUBLE
58797: LD_INT 1
58799: DEC
58800: ST_TO_ADDR
58801: LD_VAR 0 3
58805: PUSH
58806: FOR_TO
58807: IFFALSE 58910
// begin hc_class = class_apeman ;
58809: LD_ADDR_OWVAR 28
58813: PUSH
58814: LD_INT 12
58816: ST_TO_ADDR
// hc_gallery =  ;
58817: LD_ADDR_OWVAR 33
58821: PUSH
58822: LD_STRING 
58824: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58825: LD_ADDR_OWVAR 35
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PPUSH
58834: LD_INT 2
58836: PPUSH
58837: CALL_OW 12
58841: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58842: LD_ADDR_OWVAR 31
58846: PUSH
58847: LD_INT 1
58849: PPUSH
58850: LD_INT 3
58852: PPUSH
58853: CALL_OW 12
58857: PUSH
58858: LD_INT 1
58860: PPUSH
58861: LD_INT 3
58863: PPUSH
58864: CALL_OW 12
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 0
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: ST_TO_ADDR
// animal := CreateHuman ;
58881: LD_ADDR_VAR 0 12
58885: PUSH
58886: CALL_OW 44
58890: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58891: LD_VAR 0 12
58895: PPUSH
58896: LD_VAR 0 8
58900: PPUSH
58901: LD_INT 0
58903: PPUSH
58904: CALL 60683 0 3
// end ;
58908: GO 58806
58910: POP
58911: POP
// if enchidnas then
58912: LD_VAR 0 4
58916: IFFALSE 58983
// for i = 1 to enchidnas do
58918: LD_ADDR_VAR 0 11
58922: PUSH
58923: DOUBLE
58924: LD_INT 1
58926: DEC
58927: ST_TO_ADDR
58928: LD_VAR 0 4
58932: PUSH
58933: FOR_TO
58934: IFFALSE 58981
// begin hc_class = 13 ;
58936: LD_ADDR_OWVAR 28
58940: PUSH
58941: LD_INT 13
58943: ST_TO_ADDR
// hc_gallery =  ;
58944: LD_ADDR_OWVAR 33
58948: PUSH
58949: LD_STRING 
58951: ST_TO_ADDR
// animal := CreateHuman ;
58952: LD_ADDR_VAR 0 12
58956: PUSH
58957: CALL_OW 44
58961: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58962: LD_VAR 0 12
58966: PPUSH
58967: LD_VAR 0 8
58971: PPUSH
58972: LD_INT 0
58974: PPUSH
58975: CALL 60683 0 3
// end ;
58979: GO 58933
58981: POP
58982: POP
// if fishes then
58983: LD_VAR 0 7
58987: IFFALSE 59054
// for i = 1 to fishes do
58989: LD_ADDR_VAR 0 11
58993: PUSH
58994: DOUBLE
58995: LD_INT 1
58997: DEC
58998: ST_TO_ADDR
58999: LD_VAR 0 7
59003: PUSH
59004: FOR_TO
59005: IFFALSE 59052
// begin hc_class = 20 ;
59007: LD_ADDR_OWVAR 28
59011: PUSH
59012: LD_INT 20
59014: ST_TO_ADDR
// hc_gallery =  ;
59015: LD_ADDR_OWVAR 33
59019: PUSH
59020: LD_STRING 
59022: ST_TO_ADDR
// animal := CreateHuman ;
59023: LD_ADDR_VAR 0 12
59027: PUSH
59028: CALL_OW 44
59032: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59033: LD_VAR 0 12
59037: PPUSH
59038: LD_VAR 0 9
59042: PPUSH
59043: LD_INT 0
59045: PPUSH
59046: CALL 60683 0 3
// end ;
59050: GO 59004
59052: POP
59053: POP
// end ;
59054: LD_VAR 0 10
59058: RET
// export function WantHeal ( sci , unit ) ; begin
59059: LD_INT 0
59061: PPUSH
// if GetTaskList ( sci ) > 0 then
59062: LD_VAR 0 1
59066: PPUSH
59067: CALL_OW 437
59071: PUSH
59072: LD_INT 0
59074: GREATER
59075: IFFALSE 59145
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59077: LD_VAR 0 1
59081: PPUSH
59082: CALL_OW 437
59086: PUSH
59087: LD_INT 1
59089: ARRAY
59090: PUSH
59091: LD_INT 1
59093: ARRAY
59094: PUSH
59095: LD_STRING l
59097: EQUAL
59098: PUSH
59099: LD_VAR 0 1
59103: PPUSH
59104: CALL_OW 437
59108: PUSH
59109: LD_INT 1
59111: ARRAY
59112: PUSH
59113: LD_INT 4
59115: ARRAY
59116: PUSH
59117: LD_VAR 0 2
59121: EQUAL
59122: AND
59123: IFFALSE 59135
// result := true else
59125: LD_ADDR_VAR 0 3
59129: PUSH
59130: LD_INT 1
59132: ST_TO_ADDR
59133: GO 59143
// result := false ;
59135: LD_ADDR_VAR 0 3
59139: PUSH
59140: LD_INT 0
59142: ST_TO_ADDR
// end else
59143: GO 59153
// result := false ;
59145: LD_ADDR_VAR 0 3
59149: PUSH
59150: LD_INT 0
59152: ST_TO_ADDR
// end ;
59153: LD_VAR 0 3
59157: RET
// export function HealTarget ( sci ) ; begin
59158: LD_INT 0
59160: PPUSH
// if not sci then
59161: LD_VAR 0 1
59165: NOT
59166: IFFALSE 59170
// exit ;
59168: GO 59235
// result := 0 ;
59170: LD_ADDR_VAR 0 2
59174: PUSH
59175: LD_INT 0
59177: ST_TO_ADDR
// if GetTaskList ( sci ) then
59178: LD_VAR 0 1
59182: PPUSH
59183: CALL_OW 437
59187: IFFALSE 59235
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59189: LD_VAR 0 1
59193: PPUSH
59194: CALL_OW 437
59198: PUSH
59199: LD_INT 1
59201: ARRAY
59202: PUSH
59203: LD_INT 1
59205: ARRAY
59206: PUSH
59207: LD_STRING l
59209: EQUAL
59210: IFFALSE 59235
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59212: LD_ADDR_VAR 0 2
59216: PUSH
59217: LD_VAR 0 1
59221: PPUSH
59222: CALL_OW 437
59226: PUSH
59227: LD_INT 1
59229: ARRAY
59230: PUSH
59231: LD_INT 4
59233: ARRAY
59234: ST_TO_ADDR
// end ;
59235: LD_VAR 0 2
59239: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59240: LD_INT 0
59242: PPUSH
59243: PPUSH
59244: PPUSH
59245: PPUSH
// if not base_units then
59246: LD_VAR 0 1
59250: NOT
59251: IFFALSE 59255
// exit ;
59253: GO 59342
// result := false ;
59255: LD_ADDR_VAR 0 2
59259: PUSH
59260: LD_INT 0
59262: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59263: LD_ADDR_VAR 0 5
59267: PUSH
59268: LD_VAR 0 1
59272: PPUSH
59273: LD_INT 21
59275: PUSH
59276: LD_INT 3
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PPUSH
59283: CALL_OW 72
59287: ST_TO_ADDR
// if not tmp then
59288: LD_VAR 0 5
59292: NOT
59293: IFFALSE 59297
// exit ;
59295: GO 59342
// for i in tmp do
59297: LD_ADDR_VAR 0 3
59301: PUSH
59302: LD_VAR 0 5
59306: PUSH
59307: FOR_IN
59308: IFFALSE 59340
// begin result := EnemyInRange ( i , 22 ) ;
59310: LD_ADDR_VAR 0 2
59314: PUSH
59315: LD_VAR 0 3
59319: PPUSH
59320: LD_INT 22
59322: PPUSH
59323: CALL 56940 0 2
59327: ST_TO_ADDR
// if result then
59328: LD_VAR 0 2
59332: IFFALSE 59338
// exit ;
59334: POP
59335: POP
59336: GO 59342
// end ;
59338: GO 59307
59340: POP
59341: POP
// end ;
59342: LD_VAR 0 2
59346: RET
// export function FilterByTag ( units , tag ) ; begin
59347: LD_INT 0
59349: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59350: LD_ADDR_VAR 0 3
59354: PUSH
59355: LD_VAR 0 1
59359: PPUSH
59360: LD_INT 120
59362: PUSH
59363: LD_VAR 0 2
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PPUSH
59372: CALL_OW 72
59376: ST_TO_ADDR
// end ;
59377: LD_VAR 0 3
59381: RET
// export function IsDriver ( un ) ; begin
59382: LD_INT 0
59384: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59385: LD_ADDR_VAR 0 2
59389: PUSH
59390: LD_VAR 0 1
59394: PUSH
59395: LD_INT 55
59397: PUSH
59398: EMPTY
59399: LIST
59400: PPUSH
59401: CALL_OW 69
59405: IN
59406: ST_TO_ADDR
// end ;
59407: LD_VAR 0 2
59411: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59412: LD_INT 0
59414: PPUSH
59415: PPUSH
// list := [ ] ;
59416: LD_ADDR_VAR 0 5
59420: PUSH
59421: EMPTY
59422: ST_TO_ADDR
// case d of 0 :
59423: LD_VAR 0 3
59427: PUSH
59428: LD_INT 0
59430: DOUBLE
59431: EQUAL
59432: IFTRUE 59436
59434: GO 59569
59436: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59437: LD_ADDR_VAR 0 5
59441: PUSH
59442: LD_VAR 0 1
59446: PUSH
59447: LD_INT 4
59449: MINUS
59450: PUSH
59451: LD_VAR 0 2
59455: PUSH
59456: LD_INT 4
59458: MINUS
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: LIST
59467: PUSH
59468: LD_VAR 0 1
59472: PUSH
59473: LD_INT 3
59475: MINUS
59476: PUSH
59477: LD_VAR 0 2
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: LIST
59489: PUSH
59490: LD_VAR 0 1
59494: PUSH
59495: LD_INT 4
59497: PLUS
59498: PUSH
59499: LD_VAR 0 2
59503: PUSH
59504: LD_INT 4
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: LIST
59511: PUSH
59512: LD_VAR 0 1
59516: PUSH
59517: LD_INT 3
59519: PLUS
59520: PUSH
59521: LD_VAR 0 2
59525: PUSH
59526: LD_INT 3
59528: PLUS
59529: PUSH
59530: LD_INT 5
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: LIST
59537: PUSH
59538: LD_VAR 0 1
59542: PUSH
59543: LD_VAR 0 2
59547: PUSH
59548: LD_INT 4
59550: PLUS
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: LIST
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: ST_TO_ADDR
// end ; 1 :
59567: GO 60267
59569: LD_INT 1
59571: DOUBLE
59572: EQUAL
59573: IFTRUE 59577
59575: GO 59710
59577: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59578: LD_ADDR_VAR 0 5
59582: PUSH
59583: LD_VAR 0 1
59587: PUSH
59588: LD_VAR 0 2
59592: PUSH
59593: LD_INT 4
59595: MINUS
59596: PUSH
59597: LD_INT 3
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: LIST
59604: PUSH
59605: LD_VAR 0 1
59609: PUSH
59610: LD_INT 3
59612: MINUS
59613: PUSH
59614: LD_VAR 0 2
59618: PUSH
59619: LD_INT 3
59621: MINUS
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: LIST
59630: PUSH
59631: LD_VAR 0 1
59635: PUSH
59636: LD_INT 4
59638: MINUS
59639: PUSH
59640: LD_VAR 0 2
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: LIST
59652: PUSH
59653: LD_VAR 0 1
59657: PUSH
59658: LD_VAR 0 2
59662: PUSH
59663: LD_INT 3
59665: PLUS
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: LIST
59674: PUSH
59675: LD_VAR 0 1
59679: PUSH
59680: LD_INT 4
59682: PLUS
59683: PUSH
59684: LD_VAR 0 2
59688: PUSH
59689: LD_INT 4
59691: PLUS
59692: PUSH
59693: LD_INT 5
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: LIST
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: ST_TO_ADDR
// end ; 2 :
59708: GO 60267
59710: LD_INT 2
59712: DOUBLE
59713: EQUAL
59714: IFTRUE 59718
59716: GO 59847
59718: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59719: LD_ADDR_VAR 0 5
59723: PUSH
59724: LD_VAR 0 1
59728: PUSH
59729: LD_VAR 0 2
59733: PUSH
59734: LD_INT 3
59736: MINUS
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: LIST
59745: PUSH
59746: LD_VAR 0 1
59750: PUSH
59751: LD_INT 4
59753: PLUS
59754: PUSH
59755: LD_VAR 0 2
59759: PUSH
59760: LD_INT 4
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: LIST
59767: PUSH
59768: LD_VAR 0 1
59772: PUSH
59773: LD_VAR 0 2
59777: PUSH
59778: LD_INT 4
59780: PLUS
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: LIST
59789: PUSH
59790: LD_VAR 0 1
59794: PUSH
59795: LD_INT 3
59797: MINUS
59798: PUSH
59799: LD_VAR 0 2
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: LIST
59811: PUSH
59812: LD_VAR 0 1
59816: PUSH
59817: LD_INT 4
59819: MINUS
59820: PUSH
59821: LD_VAR 0 2
59825: PUSH
59826: LD_INT 4
59828: MINUS
59829: PUSH
59830: LD_INT 2
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: ST_TO_ADDR
// end ; 3 :
59845: GO 60267
59847: LD_INT 3
59849: DOUBLE
59850: EQUAL
59851: IFTRUE 59855
59853: GO 59988
59855: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59856: LD_ADDR_VAR 0 5
59860: PUSH
59861: LD_VAR 0 1
59865: PUSH
59866: LD_INT 3
59868: PLUS
59869: PUSH
59870: LD_VAR 0 2
59874: PUSH
59875: LD_INT 4
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: LIST
59882: PUSH
59883: LD_VAR 0 1
59887: PUSH
59888: LD_INT 4
59890: PLUS
59891: PUSH
59892: LD_VAR 0 2
59896: PUSH
59897: LD_INT 4
59899: PLUS
59900: PUSH
59901: LD_INT 5
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: LIST
59908: PUSH
59909: LD_VAR 0 1
59913: PUSH
59914: LD_INT 4
59916: MINUS
59917: PUSH
59918: LD_VAR 0 2
59922: PUSH
59923: LD_INT 1
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: LIST
59930: PUSH
59931: LD_VAR 0 1
59935: PUSH
59936: LD_VAR 0 2
59940: PUSH
59941: LD_INT 4
59943: MINUS
59944: PUSH
59945: LD_INT 3
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: LIST
59952: PUSH
59953: LD_VAR 0 1
59957: PUSH
59958: LD_INT 3
59960: MINUS
59961: PUSH
59962: LD_VAR 0 2
59966: PUSH
59967: LD_INT 3
59969: MINUS
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: LIST
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: ST_TO_ADDR
// end ; 4 :
59986: GO 60267
59988: LD_INT 4
59990: DOUBLE
59991: EQUAL
59992: IFTRUE 59996
59994: GO 60129
59996: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59997: LD_ADDR_VAR 0 5
60001: PUSH
60002: LD_VAR 0 1
60006: PUSH
60007: LD_VAR 0 2
60011: PUSH
60012: LD_INT 4
60014: PLUS
60015: PUSH
60016: LD_INT 0
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: LIST
60023: PUSH
60024: LD_VAR 0 1
60028: PUSH
60029: LD_INT 3
60031: PLUS
60032: PUSH
60033: LD_VAR 0 2
60037: PUSH
60038: LD_INT 3
60040: PLUS
60041: PUSH
60042: LD_INT 5
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: LIST
60049: PUSH
60050: LD_VAR 0 1
60054: PUSH
60055: LD_INT 4
60057: PLUS
60058: PUSH
60059: LD_VAR 0 2
60063: PUSH
60064: LD_INT 4
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: LIST
60071: PUSH
60072: LD_VAR 0 1
60076: PUSH
60077: LD_VAR 0 2
60081: PUSH
60082: LD_INT 3
60084: MINUS
60085: PUSH
60086: LD_INT 3
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: LIST
60093: PUSH
60094: LD_VAR 0 1
60098: PUSH
60099: LD_INT 4
60101: MINUS
60102: PUSH
60103: LD_VAR 0 2
60107: PUSH
60108: LD_INT 4
60110: MINUS
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: LIST
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: ST_TO_ADDR
// end ; 5 :
60127: GO 60267
60129: LD_INT 5
60131: DOUBLE
60132: EQUAL
60133: IFTRUE 60137
60135: GO 60266
60137: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60138: LD_ADDR_VAR 0 5
60142: PUSH
60143: LD_VAR 0 1
60147: PUSH
60148: LD_INT 4
60150: MINUS
60151: PUSH
60152: LD_VAR 0 2
60156: PUSH
60157: LD_INT 1
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: LIST
60164: PUSH
60165: LD_VAR 0 1
60169: PUSH
60170: LD_VAR 0 2
60174: PUSH
60175: LD_INT 4
60177: MINUS
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: LIST
60186: PUSH
60187: LD_VAR 0 1
60191: PUSH
60192: LD_INT 4
60194: PLUS
60195: PUSH
60196: LD_VAR 0 2
60200: PUSH
60201: LD_INT 4
60203: PLUS
60204: PUSH
60205: LD_INT 5
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: LIST
60212: PUSH
60213: LD_VAR 0 1
60217: PUSH
60218: LD_INT 3
60220: PLUS
60221: PUSH
60222: LD_VAR 0 2
60226: PUSH
60227: LD_INT 4
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: LIST
60234: PUSH
60235: LD_VAR 0 1
60239: PUSH
60240: LD_VAR 0 2
60244: PUSH
60245: LD_INT 3
60247: PLUS
60248: PUSH
60249: LD_INT 0
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: LIST
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: ST_TO_ADDR
// end ; end ;
60264: GO 60267
60266: POP
// result := list ;
60267: LD_ADDR_VAR 0 4
60271: PUSH
60272: LD_VAR 0 5
60276: ST_TO_ADDR
// end ;
60277: LD_VAR 0 4
60281: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60282: LD_INT 0
60284: PPUSH
60285: PPUSH
60286: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60287: LD_VAR 0 1
60291: NOT
60292: PUSH
60293: LD_VAR 0 2
60297: PUSH
60298: LD_INT 1
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: LD_INT 3
60306: PUSH
60307: LD_INT 4
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: IN
60316: NOT
60317: OR
60318: IFFALSE 60322
// exit ;
60320: GO 60405
// tmp := [ ] ;
60322: LD_ADDR_VAR 0 5
60326: PUSH
60327: EMPTY
60328: ST_TO_ADDR
// for i in units do
60329: LD_ADDR_VAR 0 4
60333: PUSH
60334: LD_VAR 0 1
60338: PUSH
60339: FOR_IN
60340: IFFALSE 60374
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60342: LD_ADDR_VAR 0 5
60346: PUSH
60347: LD_VAR 0 5
60351: PPUSH
60352: LD_VAR 0 4
60356: PPUSH
60357: LD_VAR 0 2
60361: PPUSH
60362: CALL_OW 259
60366: PPUSH
60367: CALL 61778 0 2
60371: ST_TO_ADDR
60372: GO 60339
60374: POP
60375: POP
// if not tmp then
60376: LD_VAR 0 5
60380: NOT
60381: IFFALSE 60385
// exit ;
60383: GO 60405
// result := SortListByListDesc ( units , tmp ) ;
60385: LD_ADDR_VAR 0 3
60389: PUSH
60390: LD_VAR 0 1
60394: PPUSH
60395: LD_VAR 0 5
60399: PPUSH
60400: CALL_OW 77
60404: ST_TO_ADDR
// end ;
60405: LD_VAR 0 3
60409: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60410: LD_INT 0
60412: PPUSH
60413: PPUSH
60414: PPUSH
// result := false ;
60415: LD_ADDR_VAR 0 3
60419: PUSH
60420: LD_INT 0
60422: ST_TO_ADDR
// if not building then
60423: LD_VAR 0 2
60427: NOT
60428: IFFALSE 60432
// exit ;
60430: GO 60570
// x := GetX ( building ) ;
60432: LD_ADDR_VAR 0 4
60436: PUSH
60437: LD_VAR 0 2
60441: PPUSH
60442: CALL_OW 250
60446: ST_TO_ADDR
// y := GetY ( building ) ;
60447: LD_ADDR_VAR 0 5
60451: PUSH
60452: LD_VAR 0 2
60456: PPUSH
60457: CALL_OW 251
60461: ST_TO_ADDR
// if not x or not y then
60462: LD_VAR 0 4
60466: NOT
60467: PUSH
60468: LD_VAR 0 5
60472: NOT
60473: OR
60474: IFFALSE 60478
// exit ;
60476: GO 60570
// if GetTaskList ( unit ) then
60478: LD_VAR 0 1
60482: PPUSH
60483: CALL_OW 437
60487: IFFALSE 60570
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60489: LD_STRING e
60491: PUSH
60492: LD_VAR 0 1
60496: PPUSH
60497: CALL_OW 437
60501: PUSH
60502: LD_INT 1
60504: ARRAY
60505: PUSH
60506: LD_INT 1
60508: ARRAY
60509: EQUAL
60510: PUSH
60511: LD_VAR 0 4
60515: PUSH
60516: LD_VAR 0 1
60520: PPUSH
60521: CALL_OW 437
60525: PUSH
60526: LD_INT 1
60528: ARRAY
60529: PUSH
60530: LD_INT 2
60532: ARRAY
60533: EQUAL
60534: AND
60535: PUSH
60536: LD_VAR 0 5
60540: PUSH
60541: LD_VAR 0 1
60545: PPUSH
60546: CALL_OW 437
60550: PUSH
60551: LD_INT 1
60553: ARRAY
60554: PUSH
60555: LD_INT 3
60557: ARRAY
60558: EQUAL
60559: AND
60560: IFFALSE 60570
// result := true end ;
60562: LD_ADDR_VAR 0 3
60566: PUSH
60567: LD_INT 1
60569: ST_TO_ADDR
// end ;
60570: LD_VAR 0 3
60574: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60575: LD_INT 0
60577: PPUSH
// result := false ;
60578: LD_ADDR_VAR 0 4
60582: PUSH
60583: LD_INT 0
60585: ST_TO_ADDR
// if GetTaskList ( unit ) then
60586: LD_VAR 0 1
60590: PPUSH
60591: CALL_OW 437
60595: IFFALSE 60678
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60597: LD_STRING M
60599: PUSH
60600: LD_VAR 0 1
60604: PPUSH
60605: CALL_OW 437
60609: PUSH
60610: LD_INT 1
60612: ARRAY
60613: PUSH
60614: LD_INT 1
60616: ARRAY
60617: EQUAL
60618: PUSH
60619: LD_VAR 0 2
60623: PUSH
60624: LD_VAR 0 1
60628: PPUSH
60629: CALL_OW 437
60633: PUSH
60634: LD_INT 1
60636: ARRAY
60637: PUSH
60638: LD_INT 2
60640: ARRAY
60641: EQUAL
60642: AND
60643: PUSH
60644: LD_VAR 0 3
60648: PUSH
60649: LD_VAR 0 1
60653: PPUSH
60654: CALL_OW 437
60658: PUSH
60659: LD_INT 1
60661: ARRAY
60662: PUSH
60663: LD_INT 3
60665: ARRAY
60666: EQUAL
60667: AND
60668: IFFALSE 60678
// result := true ;
60670: LD_ADDR_VAR 0 4
60674: PUSH
60675: LD_INT 1
60677: ST_TO_ADDR
// end ; end ;
60678: LD_VAR 0 4
60682: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60683: LD_INT 0
60685: PPUSH
60686: PPUSH
60687: PPUSH
60688: PPUSH
// if not unit or not area then
60689: LD_VAR 0 1
60693: NOT
60694: PUSH
60695: LD_VAR 0 2
60699: NOT
60700: OR
60701: IFFALSE 60705
// exit ;
60703: GO 60881
// tmp := AreaToList ( area , i ) ;
60705: LD_ADDR_VAR 0 6
60709: PUSH
60710: LD_VAR 0 2
60714: PPUSH
60715: LD_VAR 0 5
60719: PPUSH
60720: CALL_OW 517
60724: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60725: LD_ADDR_VAR 0 5
60729: PUSH
60730: DOUBLE
60731: LD_INT 1
60733: DEC
60734: ST_TO_ADDR
60735: LD_VAR 0 6
60739: PUSH
60740: LD_INT 1
60742: ARRAY
60743: PUSH
60744: FOR_TO
60745: IFFALSE 60879
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60747: LD_ADDR_VAR 0 7
60751: PUSH
60752: LD_VAR 0 6
60756: PUSH
60757: LD_INT 1
60759: ARRAY
60760: PUSH
60761: LD_VAR 0 5
60765: ARRAY
60766: PUSH
60767: LD_VAR 0 6
60771: PUSH
60772: LD_INT 2
60774: ARRAY
60775: PUSH
60776: LD_VAR 0 5
60780: ARRAY
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
60786: LD_INT 92
60788: PUSH
60789: LD_VAR 0 7
60793: PUSH
60794: LD_INT 1
60796: ARRAY
60797: PUSH
60798: LD_VAR 0 7
60802: PUSH
60803: LD_INT 2
60805: ARRAY
60806: PUSH
60807: LD_INT 2
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: PPUSH
60816: CALL_OW 69
60820: PUSH
60821: LD_INT 0
60823: EQUAL
60824: IFFALSE 60877
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60826: LD_VAR 0 1
60830: PPUSH
60831: LD_VAR 0 7
60835: PUSH
60836: LD_INT 1
60838: ARRAY
60839: PPUSH
60840: LD_VAR 0 7
60844: PUSH
60845: LD_INT 2
60847: ARRAY
60848: PPUSH
60849: LD_VAR 0 3
60853: PPUSH
60854: CALL_OW 48
// result := IsPlaced ( unit ) ;
60858: LD_ADDR_VAR 0 4
60862: PUSH
60863: LD_VAR 0 1
60867: PPUSH
60868: CALL_OW 305
60872: ST_TO_ADDR
// exit ;
60873: POP
60874: POP
60875: GO 60881
// end ; end ;
60877: GO 60744
60879: POP
60880: POP
// end ;
60881: LD_VAR 0 4
60885: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60886: LD_INT 0
60888: PPUSH
60889: PPUSH
60890: PPUSH
// if not side or side > 8 then
60891: LD_VAR 0 1
60895: NOT
60896: PUSH
60897: LD_VAR 0 1
60901: PUSH
60902: LD_INT 8
60904: GREATER
60905: OR
60906: IFFALSE 60910
// exit ;
60908: GO 61097
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60910: LD_ADDR_VAR 0 4
60914: PUSH
60915: LD_INT 22
60917: PUSH
60918: LD_VAR 0 1
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 21
60929: PUSH
60930: LD_INT 3
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PPUSH
60941: CALL_OW 69
60945: ST_TO_ADDR
// if not tmp then
60946: LD_VAR 0 4
60950: NOT
60951: IFFALSE 60955
// exit ;
60953: GO 61097
// enable_addtolog := true ;
60955: LD_ADDR_OWVAR 81
60959: PUSH
60960: LD_INT 1
60962: ST_TO_ADDR
// AddToLog ( [ ) ;
60963: LD_STRING [
60965: PPUSH
60966: CALL_OW 561
// for i in tmp do
60970: LD_ADDR_VAR 0 3
60974: PUSH
60975: LD_VAR 0 4
60979: PUSH
60980: FOR_IN
60981: IFFALSE 61088
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60983: LD_STRING [
60985: PUSH
60986: LD_VAR 0 3
60990: PPUSH
60991: CALL_OW 266
60995: STR
60996: PUSH
60997: LD_STRING , 
60999: STR
61000: PUSH
61001: LD_VAR 0 3
61005: PPUSH
61006: CALL_OW 250
61010: STR
61011: PUSH
61012: LD_STRING , 
61014: STR
61015: PUSH
61016: LD_VAR 0 3
61020: PPUSH
61021: CALL_OW 251
61025: STR
61026: PUSH
61027: LD_STRING , 
61029: STR
61030: PUSH
61031: LD_VAR 0 3
61035: PPUSH
61036: CALL_OW 254
61040: STR
61041: PUSH
61042: LD_STRING , 
61044: STR
61045: PUSH
61046: LD_VAR 0 3
61050: PPUSH
61051: LD_INT 1
61053: PPUSH
61054: CALL_OW 268
61058: STR
61059: PUSH
61060: LD_STRING , 
61062: STR
61063: PUSH
61064: LD_VAR 0 3
61068: PPUSH
61069: LD_INT 2
61071: PPUSH
61072: CALL_OW 268
61076: STR
61077: PUSH
61078: LD_STRING ],
61080: STR
61081: PPUSH
61082: CALL_OW 561
// end ;
61086: GO 60980
61088: POP
61089: POP
// AddToLog ( ]; ) ;
61090: LD_STRING ];
61092: PPUSH
61093: CALL_OW 561
// end ;
61097: LD_VAR 0 2
61101: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61102: LD_INT 0
61104: PPUSH
61105: PPUSH
61106: PPUSH
61107: PPUSH
61108: PPUSH
// if not area or not rate or not max then
61109: LD_VAR 0 1
61113: NOT
61114: PUSH
61115: LD_VAR 0 2
61119: NOT
61120: OR
61121: PUSH
61122: LD_VAR 0 4
61126: NOT
61127: OR
61128: IFFALSE 61132
// exit ;
61130: GO 61321
// while 1 do
61132: LD_INT 1
61134: IFFALSE 61321
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61136: LD_ADDR_VAR 0 9
61140: PUSH
61141: LD_VAR 0 1
61145: PPUSH
61146: LD_INT 1
61148: PPUSH
61149: CALL_OW 287
61153: PUSH
61154: LD_INT 10
61156: MUL
61157: ST_TO_ADDR
// r := rate / 10 ;
61158: LD_ADDR_VAR 0 7
61162: PUSH
61163: LD_VAR 0 2
61167: PUSH
61168: LD_INT 10
61170: DIVREAL
61171: ST_TO_ADDR
// time := 1 1$00 ;
61172: LD_ADDR_VAR 0 8
61176: PUSH
61177: LD_INT 2100
61179: ST_TO_ADDR
// if amount < min then
61180: LD_VAR 0 9
61184: PUSH
61185: LD_VAR 0 3
61189: LESS
61190: IFFALSE 61208
// r := r * 2 else
61192: LD_ADDR_VAR 0 7
61196: PUSH
61197: LD_VAR 0 7
61201: PUSH
61202: LD_INT 2
61204: MUL
61205: ST_TO_ADDR
61206: GO 61234
// if amount > max then
61208: LD_VAR 0 9
61212: PUSH
61213: LD_VAR 0 4
61217: GREATER
61218: IFFALSE 61234
// r := r / 2 ;
61220: LD_ADDR_VAR 0 7
61224: PUSH
61225: LD_VAR 0 7
61229: PUSH
61230: LD_INT 2
61232: DIVREAL
61233: ST_TO_ADDR
// time := time / r ;
61234: LD_ADDR_VAR 0 8
61238: PUSH
61239: LD_VAR 0 8
61243: PUSH
61244: LD_VAR 0 7
61248: DIVREAL
61249: ST_TO_ADDR
// if time < 0 then
61250: LD_VAR 0 8
61254: PUSH
61255: LD_INT 0
61257: LESS
61258: IFFALSE 61275
// time := time * - 1 ;
61260: LD_ADDR_VAR 0 8
61264: PUSH
61265: LD_VAR 0 8
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: MUL
61274: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61275: LD_VAR 0 8
61279: PUSH
61280: LD_INT 35
61282: PPUSH
61283: LD_INT 875
61285: PPUSH
61286: CALL_OW 12
61290: PLUS
61291: PPUSH
61292: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61296: LD_INT 1
61298: PPUSH
61299: LD_INT 5
61301: PPUSH
61302: CALL_OW 12
61306: PPUSH
61307: LD_VAR 0 1
61311: PPUSH
61312: LD_INT 1
61314: PPUSH
61315: CALL_OW 55
// end ;
61319: GO 61132
// end ;
61321: LD_VAR 0 5
61325: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61326: LD_INT 0
61328: PPUSH
61329: PPUSH
61330: PPUSH
61331: PPUSH
61332: PPUSH
61333: PPUSH
61334: PPUSH
61335: PPUSH
// if not turrets or not factories then
61336: LD_VAR 0 1
61340: NOT
61341: PUSH
61342: LD_VAR 0 2
61346: NOT
61347: OR
61348: IFFALSE 61352
// exit ;
61350: GO 61659
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61352: LD_ADDR_VAR 0 10
61356: PUSH
61357: LD_INT 5
61359: PUSH
61360: LD_INT 6
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: LD_INT 4
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 3
61379: PUSH
61380: LD_INT 5
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 24
61394: PUSH
61395: LD_INT 25
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 23
61404: PUSH
61405: LD_INT 27
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 42
61418: PUSH
61419: LD_INT 43
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 44
61428: PUSH
61429: LD_INT 46
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 45
61438: PUSH
61439: LD_INT 47
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: LIST
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: LIST
61455: ST_TO_ADDR
// result := [ ] ;
61456: LD_ADDR_VAR 0 3
61460: PUSH
61461: EMPTY
61462: ST_TO_ADDR
// for i in turrets do
61463: LD_ADDR_VAR 0 4
61467: PUSH
61468: LD_VAR 0 1
61472: PUSH
61473: FOR_IN
61474: IFFALSE 61657
// begin nat := GetNation ( i ) ;
61476: LD_ADDR_VAR 0 7
61480: PUSH
61481: LD_VAR 0 4
61485: PPUSH
61486: CALL_OW 248
61490: ST_TO_ADDR
// weapon := 0 ;
61491: LD_ADDR_VAR 0 8
61495: PUSH
61496: LD_INT 0
61498: ST_TO_ADDR
// if not nat then
61499: LD_VAR 0 7
61503: NOT
61504: IFFALSE 61508
// continue ;
61506: GO 61473
// for j in list [ nat ] do
61508: LD_ADDR_VAR 0 5
61512: PUSH
61513: LD_VAR 0 10
61517: PUSH
61518: LD_VAR 0 7
61522: ARRAY
61523: PUSH
61524: FOR_IN
61525: IFFALSE 61566
// if GetBWeapon ( i ) = j [ 1 ] then
61527: LD_VAR 0 4
61531: PPUSH
61532: CALL_OW 269
61536: PUSH
61537: LD_VAR 0 5
61541: PUSH
61542: LD_INT 1
61544: ARRAY
61545: EQUAL
61546: IFFALSE 61564
// begin weapon := j [ 2 ] ;
61548: LD_ADDR_VAR 0 8
61552: PUSH
61553: LD_VAR 0 5
61557: PUSH
61558: LD_INT 2
61560: ARRAY
61561: ST_TO_ADDR
// break ;
61562: GO 61566
// end ;
61564: GO 61524
61566: POP
61567: POP
// if not weapon then
61568: LD_VAR 0 8
61572: NOT
61573: IFFALSE 61577
// continue ;
61575: GO 61473
// for k in factories do
61577: LD_ADDR_VAR 0 6
61581: PUSH
61582: LD_VAR 0 2
61586: PUSH
61587: FOR_IN
61588: IFFALSE 61653
// begin weapons := AvailableWeaponList ( k ) ;
61590: LD_ADDR_VAR 0 9
61594: PUSH
61595: LD_VAR 0 6
61599: PPUSH
61600: CALL_OW 478
61604: ST_TO_ADDR
// if not weapons then
61605: LD_VAR 0 9
61609: NOT
61610: IFFALSE 61614
// continue ;
61612: GO 61587
// if weapon in weapons then
61614: LD_VAR 0 8
61618: PUSH
61619: LD_VAR 0 9
61623: IN
61624: IFFALSE 61651
// begin result := [ i , weapon ] ;
61626: LD_ADDR_VAR 0 3
61630: PUSH
61631: LD_VAR 0 4
61635: PUSH
61636: LD_VAR 0 8
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: ST_TO_ADDR
// exit ;
61645: POP
61646: POP
61647: POP
61648: POP
61649: GO 61659
// end ; end ;
61651: GO 61587
61653: POP
61654: POP
// end ;
61655: GO 61473
61657: POP
61658: POP
// end ;
61659: LD_VAR 0 3
61663: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61664: LD_INT 0
61666: PPUSH
// if not side or side > 8 then
61667: LD_VAR 0 3
61671: NOT
61672: PUSH
61673: LD_VAR 0 3
61677: PUSH
61678: LD_INT 8
61680: GREATER
61681: OR
61682: IFFALSE 61686
// exit ;
61684: GO 61745
// if not range then
61686: LD_VAR 0 4
61690: NOT
61691: IFFALSE 61702
// range := - 12 ;
61693: LD_ADDR_VAR 0 4
61697: PUSH
61698: LD_INT 12
61700: NEG
61701: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61702: LD_VAR 0 1
61706: PPUSH
61707: LD_VAR 0 2
61711: PPUSH
61712: LD_VAR 0 3
61716: PPUSH
61717: LD_VAR 0 4
61721: PPUSH
61722: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61726: LD_VAR 0 1
61730: PPUSH
61731: LD_VAR 0 2
61735: PPUSH
61736: LD_VAR 0 3
61740: PPUSH
61741: CALL_OW 331
// end ;
61745: LD_VAR 0 5
61749: RET
// export function Video ( mode ) ; begin
61750: LD_INT 0
61752: PPUSH
// ingame_video = mode ;
61753: LD_ADDR_OWVAR 52
61757: PUSH
61758: LD_VAR 0 1
61762: ST_TO_ADDR
// interface_hidden = mode ;
61763: LD_ADDR_OWVAR 54
61767: PUSH
61768: LD_VAR 0 1
61772: ST_TO_ADDR
// end ;
61773: LD_VAR 0 2
61777: RET
// export function Join ( array , element ) ; begin
61778: LD_INT 0
61780: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61781: LD_ADDR_VAR 0 3
61785: PUSH
61786: LD_VAR 0 1
61790: PPUSH
61791: LD_VAR 0 1
61795: PUSH
61796: LD_INT 1
61798: PLUS
61799: PPUSH
61800: LD_VAR 0 2
61804: PPUSH
61805: CALL_OW 1
61809: ST_TO_ADDR
// end ;
61810: LD_VAR 0 3
61814: RET
// export function JoinUnion ( array , element ) ; begin
61815: LD_INT 0
61817: PPUSH
// result := array union element ;
61818: LD_ADDR_VAR 0 3
61822: PUSH
61823: LD_VAR 0 1
61827: PUSH
61828: LD_VAR 0 2
61832: UNION
61833: ST_TO_ADDR
// end ;
61834: LD_VAR 0 3
61838: RET
// export function GetBehemoths ( side ) ; begin
61839: LD_INT 0
61841: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61842: LD_ADDR_VAR 0 2
61846: PUSH
61847: LD_INT 22
61849: PUSH
61850: LD_VAR 0 1
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 31
61861: PUSH
61862: LD_INT 25
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PPUSH
61873: CALL_OW 69
61877: ST_TO_ADDR
// end ;
61878: LD_VAR 0 2
61882: RET
// export function Shuffle ( array ) ; var i , index ; begin
61883: LD_INT 0
61885: PPUSH
61886: PPUSH
61887: PPUSH
// result := [ ] ;
61888: LD_ADDR_VAR 0 2
61892: PUSH
61893: EMPTY
61894: ST_TO_ADDR
// if not array then
61895: LD_VAR 0 1
61899: NOT
61900: IFFALSE 61904
// exit ;
61902: GO 62003
// Randomize ;
61904: CALL_OW 10
// for i = array downto 1 do
61908: LD_ADDR_VAR 0 3
61912: PUSH
61913: DOUBLE
61914: LD_VAR 0 1
61918: INC
61919: ST_TO_ADDR
61920: LD_INT 1
61922: PUSH
61923: FOR_DOWNTO
61924: IFFALSE 62001
// begin index := rand ( 1 , array ) ;
61926: LD_ADDR_VAR 0 4
61930: PUSH
61931: LD_INT 1
61933: PPUSH
61934: LD_VAR 0 1
61938: PPUSH
61939: CALL_OW 12
61943: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61944: LD_ADDR_VAR 0 2
61948: PUSH
61949: LD_VAR 0 2
61953: PPUSH
61954: LD_VAR 0 2
61958: PUSH
61959: LD_INT 1
61961: PLUS
61962: PPUSH
61963: LD_VAR 0 1
61967: PUSH
61968: LD_VAR 0 4
61972: ARRAY
61973: PPUSH
61974: CALL_OW 2
61978: ST_TO_ADDR
// array := Delete ( array , index ) ;
61979: LD_ADDR_VAR 0 1
61983: PUSH
61984: LD_VAR 0 1
61988: PPUSH
61989: LD_VAR 0 4
61993: PPUSH
61994: CALL_OW 3
61998: ST_TO_ADDR
// end ;
61999: GO 61923
62001: POP
62002: POP
// end ;
62003: LD_VAR 0 2
62007: RET
// export function GetBaseMaterials ( base ) ; begin
62008: LD_INT 0
62010: PPUSH
// result := [ 0 , 0 , 0 ] ;
62011: LD_ADDR_VAR 0 2
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: LIST
62029: ST_TO_ADDR
// if not base then
62030: LD_VAR 0 1
62034: NOT
62035: IFFALSE 62039
// exit ;
62037: GO 62088
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62039: LD_ADDR_VAR 0 2
62043: PUSH
62044: LD_VAR 0 1
62048: PPUSH
62049: LD_INT 1
62051: PPUSH
62052: CALL_OW 275
62056: PUSH
62057: LD_VAR 0 1
62061: PPUSH
62062: LD_INT 2
62064: PPUSH
62065: CALL_OW 275
62069: PUSH
62070: LD_VAR 0 1
62074: PPUSH
62075: LD_INT 3
62077: PPUSH
62078: CALL_OW 275
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: ST_TO_ADDR
// end ;
62088: LD_VAR 0 2
62092: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62093: LD_INT 0
62095: PPUSH
62096: PPUSH
// result := array ;
62097: LD_ADDR_VAR 0 3
62101: PUSH
62102: LD_VAR 0 1
62106: ST_TO_ADDR
// if size >= result then
62107: LD_VAR 0 2
62111: PUSH
62112: LD_VAR 0 3
62116: GREATEREQUAL
62117: IFFALSE 62121
// exit ;
62119: GO 62171
// if size then
62121: LD_VAR 0 2
62125: IFFALSE 62171
// for i := array downto size do
62127: LD_ADDR_VAR 0 4
62131: PUSH
62132: DOUBLE
62133: LD_VAR 0 1
62137: INC
62138: ST_TO_ADDR
62139: LD_VAR 0 2
62143: PUSH
62144: FOR_DOWNTO
62145: IFFALSE 62169
// result := Delete ( result , result ) ;
62147: LD_ADDR_VAR 0 3
62151: PUSH
62152: LD_VAR 0 3
62156: PPUSH
62157: LD_VAR 0 3
62161: PPUSH
62162: CALL_OW 3
62166: ST_TO_ADDR
62167: GO 62144
62169: POP
62170: POP
// end ;
62171: LD_VAR 0 3
62175: RET
// export function ComExit ( unit ) ; var tmp ; begin
62176: LD_INT 0
62178: PPUSH
62179: PPUSH
// if not IsInUnit ( unit ) then
62180: LD_VAR 0 1
62184: PPUSH
62185: CALL_OW 310
62189: NOT
62190: IFFALSE 62194
// exit ;
62192: GO 62254
// tmp := IsInUnit ( unit ) ;
62194: LD_ADDR_VAR 0 3
62198: PUSH
62199: LD_VAR 0 1
62203: PPUSH
62204: CALL_OW 310
62208: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62209: LD_VAR 0 3
62213: PPUSH
62214: CALL_OW 247
62218: PUSH
62219: LD_INT 2
62221: EQUAL
62222: IFFALSE 62235
// ComExitVehicle ( unit ) else
62224: LD_VAR 0 1
62228: PPUSH
62229: CALL_OW 121
62233: GO 62244
// ComExitBuilding ( unit ) ;
62235: LD_VAR 0 1
62239: PPUSH
62240: CALL_OW 122
// result := tmp ;
62244: LD_ADDR_VAR 0 2
62248: PUSH
62249: LD_VAR 0 3
62253: ST_TO_ADDR
// end ;
62254: LD_VAR 0 2
62258: RET
// export function ComExitAll ( units ) ; var i ; begin
62259: LD_INT 0
62261: PPUSH
62262: PPUSH
// if not units then
62263: LD_VAR 0 1
62267: NOT
62268: IFFALSE 62272
// exit ;
62270: GO 62298
// for i in units do
62272: LD_ADDR_VAR 0 3
62276: PUSH
62277: LD_VAR 0 1
62281: PUSH
62282: FOR_IN
62283: IFFALSE 62296
// ComExit ( i ) ;
62285: LD_VAR 0 3
62289: PPUSH
62290: CALL 62176 0 1
62294: GO 62282
62296: POP
62297: POP
// end ;
62298: LD_VAR 0 2
62302: RET
// export function ResetHc ; begin
62303: LD_INT 0
62305: PPUSH
// InitHc ;
62306: CALL_OW 19
// hc_importance := 0 ;
62310: LD_ADDR_OWVAR 32
62314: PUSH
62315: LD_INT 0
62317: ST_TO_ADDR
// end ;
62318: LD_VAR 0 1
62322: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62323: LD_INT 0
62325: PPUSH
62326: PPUSH
62327: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62328: LD_ADDR_VAR 0 6
62332: PUSH
62333: LD_VAR 0 1
62337: PUSH
62338: LD_VAR 0 3
62342: PLUS
62343: PUSH
62344: LD_INT 2
62346: DIV
62347: ST_TO_ADDR
// if _x < 0 then
62348: LD_VAR 0 6
62352: PUSH
62353: LD_INT 0
62355: LESS
62356: IFFALSE 62373
// _x := _x * - 1 ;
62358: LD_ADDR_VAR 0 6
62362: PUSH
62363: LD_VAR 0 6
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: MUL
62372: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62373: LD_ADDR_VAR 0 7
62377: PUSH
62378: LD_VAR 0 2
62382: PUSH
62383: LD_VAR 0 4
62387: PLUS
62388: PUSH
62389: LD_INT 2
62391: DIV
62392: ST_TO_ADDR
// if _y < 0 then
62393: LD_VAR 0 7
62397: PUSH
62398: LD_INT 0
62400: LESS
62401: IFFALSE 62418
// _y := _y * - 1 ;
62403: LD_ADDR_VAR 0 7
62407: PUSH
62408: LD_VAR 0 7
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: MUL
62417: ST_TO_ADDR
// result := [ _x , _y ] ;
62418: LD_ADDR_VAR 0 5
62422: PUSH
62423: LD_VAR 0 6
62427: PUSH
62428: LD_VAR 0 7
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: ST_TO_ADDR
// end ;
62437: LD_VAR 0 5
62441: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62442: LD_INT 0
62444: PPUSH
62445: PPUSH
62446: PPUSH
62447: PPUSH
// task := GetTaskList ( unit ) ;
62448: LD_ADDR_VAR 0 7
62452: PUSH
62453: LD_VAR 0 1
62457: PPUSH
62458: CALL_OW 437
62462: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62463: LD_VAR 0 7
62467: NOT
62468: PUSH
62469: LD_VAR 0 1
62473: PPUSH
62474: LD_VAR 0 2
62478: PPUSH
62479: CALL_OW 308
62483: NOT
62484: AND
62485: IFFALSE 62489
// exit ;
62487: GO 62607
// if IsInArea ( unit , area ) then
62489: LD_VAR 0 1
62493: PPUSH
62494: LD_VAR 0 2
62498: PPUSH
62499: CALL_OW 308
62503: IFFALSE 62521
// begin ComMoveToArea ( unit , goAway ) ;
62505: LD_VAR 0 1
62509: PPUSH
62510: LD_VAR 0 3
62514: PPUSH
62515: CALL_OW 113
// exit ;
62519: GO 62607
// end ; if task [ 1 ] [ 1 ] <> M then
62521: LD_VAR 0 7
62525: PUSH
62526: LD_INT 1
62528: ARRAY
62529: PUSH
62530: LD_INT 1
62532: ARRAY
62533: PUSH
62534: LD_STRING M
62536: NONEQUAL
62537: IFFALSE 62541
// exit ;
62539: GO 62607
// x := task [ 1 ] [ 2 ] ;
62541: LD_ADDR_VAR 0 5
62545: PUSH
62546: LD_VAR 0 7
62550: PUSH
62551: LD_INT 1
62553: ARRAY
62554: PUSH
62555: LD_INT 2
62557: ARRAY
62558: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62559: LD_ADDR_VAR 0 6
62563: PUSH
62564: LD_VAR 0 7
62568: PUSH
62569: LD_INT 1
62571: ARRAY
62572: PUSH
62573: LD_INT 3
62575: ARRAY
62576: ST_TO_ADDR
// if InArea ( x , y , area ) then
62577: LD_VAR 0 5
62581: PPUSH
62582: LD_VAR 0 6
62586: PPUSH
62587: LD_VAR 0 2
62591: PPUSH
62592: CALL_OW 309
62596: IFFALSE 62607
// ComStop ( unit ) ;
62598: LD_VAR 0 1
62602: PPUSH
62603: CALL_OW 141
// end ;
62607: LD_VAR 0 4
62611: RET
// export function Abs ( value ) ; begin
62612: LD_INT 0
62614: PPUSH
// result := value ;
62615: LD_ADDR_VAR 0 2
62619: PUSH
62620: LD_VAR 0 1
62624: ST_TO_ADDR
// if value < 0 then
62625: LD_VAR 0 1
62629: PUSH
62630: LD_INT 0
62632: LESS
62633: IFFALSE 62650
// result := value * - 1 ;
62635: LD_ADDR_VAR 0 2
62639: PUSH
62640: LD_VAR 0 1
62644: PUSH
62645: LD_INT 1
62647: NEG
62648: MUL
62649: ST_TO_ADDR
// end ;
62650: LD_VAR 0 2
62654: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62655: LD_INT 0
62657: PPUSH
62658: PPUSH
62659: PPUSH
62660: PPUSH
62661: PPUSH
62662: PPUSH
62663: PPUSH
62664: PPUSH
// if not unit or not building then
62665: LD_VAR 0 1
62669: NOT
62670: PUSH
62671: LD_VAR 0 2
62675: NOT
62676: OR
62677: IFFALSE 62681
// exit ;
62679: GO 62907
// x := GetX ( building ) ;
62681: LD_ADDR_VAR 0 4
62685: PUSH
62686: LD_VAR 0 2
62690: PPUSH
62691: CALL_OW 250
62695: ST_TO_ADDR
// y := GetY ( building ) ;
62696: LD_ADDR_VAR 0 6
62700: PUSH
62701: LD_VAR 0 2
62705: PPUSH
62706: CALL_OW 251
62710: ST_TO_ADDR
// d := GetDir ( building ) ;
62711: LD_ADDR_VAR 0 8
62715: PUSH
62716: LD_VAR 0 2
62720: PPUSH
62721: CALL_OW 254
62725: ST_TO_ADDR
// r := 4 ;
62726: LD_ADDR_VAR 0 9
62730: PUSH
62731: LD_INT 4
62733: ST_TO_ADDR
// for i := 1 to 5 do
62734: LD_ADDR_VAR 0 10
62738: PUSH
62739: DOUBLE
62740: LD_INT 1
62742: DEC
62743: ST_TO_ADDR
62744: LD_INT 5
62746: PUSH
62747: FOR_TO
62748: IFFALSE 62905
// begin _x := ShiftX ( x , d , r + i ) ;
62750: LD_ADDR_VAR 0 5
62754: PUSH
62755: LD_VAR 0 4
62759: PPUSH
62760: LD_VAR 0 8
62764: PPUSH
62765: LD_VAR 0 9
62769: PUSH
62770: LD_VAR 0 10
62774: PLUS
62775: PPUSH
62776: CALL_OW 272
62780: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62781: LD_ADDR_VAR 0 7
62785: PUSH
62786: LD_VAR 0 6
62790: PPUSH
62791: LD_VAR 0 8
62795: PPUSH
62796: LD_VAR 0 9
62800: PUSH
62801: LD_VAR 0 10
62805: PLUS
62806: PPUSH
62807: CALL_OW 273
62811: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62812: LD_VAR 0 5
62816: PPUSH
62817: LD_VAR 0 7
62821: PPUSH
62822: CALL_OW 488
62826: PUSH
62827: LD_VAR 0 5
62831: PPUSH
62832: LD_VAR 0 7
62836: PPUSH
62837: CALL_OW 428
62841: PPUSH
62842: CALL_OW 247
62846: PUSH
62847: LD_INT 3
62849: PUSH
62850: LD_INT 2
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: IN
62857: NOT
62858: AND
62859: IFFALSE 62903
// begin ComMoveXY ( unit , _x , _y ) ;
62861: LD_VAR 0 1
62865: PPUSH
62866: LD_VAR 0 5
62870: PPUSH
62871: LD_VAR 0 7
62875: PPUSH
62876: CALL_OW 111
// result := [ _x , _y ] ;
62880: LD_ADDR_VAR 0 3
62884: PUSH
62885: LD_VAR 0 5
62889: PUSH
62890: LD_VAR 0 7
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: ST_TO_ADDR
// exit ;
62899: POP
62900: POP
62901: GO 62907
// end ; end ;
62903: GO 62747
62905: POP
62906: POP
// end ;
62907: LD_VAR 0 3
62911: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62912: LD_INT 0
62914: PPUSH
62915: PPUSH
62916: PPUSH
// result := 0 ;
62917: LD_ADDR_VAR 0 3
62921: PUSH
62922: LD_INT 0
62924: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62925: LD_VAR 0 1
62929: PUSH
62930: LD_INT 0
62932: LESS
62933: PUSH
62934: LD_VAR 0 1
62938: PUSH
62939: LD_INT 8
62941: GREATER
62942: OR
62943: PUSH
62944: LD_VAR 0 2
62948: PUSH
62949: LD_INT 0
62951: LESS
62952: OR
62953: PUSH
62954: LD_VAR 0 2
62958: PUSH
62959: LD_INT 8
62961: GREATER
62962: OR
62963: IFFALSE 62967
// exit ;
62965: GO 63042
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62967: LD_ADDR_VAR 0 4
62971: PUSH
62972: LD_INT 22
62974: PUSH
62975: LD_VAR 0 2
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PPUSH
62984: CALL_OW 69
62988: PUSH
62989: FOR_IN
62990: IFFALSE 63040
// begin un := UnitShoot ( i ) ;
62992: LD_ADDR_VAR 0 5
62996: PUSH
62997: LD_VAR 0 4
63001: PPUSH
63002: CALL_OW 504
63006: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63007: LD_VAR 0 5
63011: PPUSH
63012: CALL_OW 255
63016: PUSH
63017: LD_VAR 0 1
63021: EQUAL
63022: IFFALSE 63038
// begin result := un ;
63024: LD_ADDR_VAR 0 3
63028: PUSH
63029: LD_VAR 0 5
63033: ST_TO_ADDR
// exit ;
63034: POP
63035: POP
63036: GO 63042
// end ; end ;
63038: GO 62989
63040: POP
63041: POP
// end ;
63042: LD_VAR 0 3
63046: RET
// export function GetCargoBay ( units ) ; begin
63047: LD_INT 0
63049: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63050: LD_ADDR_VAR 0 2
63054: PUSH
63055: LD_VAR 0 1
63059: PPUSH
63060: LD_INT 2
63062: PUSH
63063: LD_INT 34
63065: PUSH
63066: LD_INT 12
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 34
63075: PUSH
63076: LD_INT 51
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 34
63085: PUSH
63086: LD_INT 32
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 34
63095: PUSH
63096: LD_INT 89
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: PPUSH
63110: CALL_OW 72
63114: ST_TO_ADDR
// end ;
63115: LD_VAR 0 2
63119: RET
// export function Negate ( value ) ; begin
63120: LD_INT 0
63122: PPUSH
// result := not value ;
63123: LD_ADDR_VAR 0 2
63127: PUSH
63128: LD_VAR 0 1
63132: NOT
63133: ST_TO_ADDR
// end ;
63134: LD_VAR 0 2
63138: RET
// export function Inc ( value ) ; begin
63139: LD_INT 0
63141: PPUSH
// result := value + 1 ;
63142: LD_ADDR_VAR 0 2
63146: PUSH
63147: LD_VAR 0 1
63151: PUSH
63152: LD_INT 1
63154: PLUS
63155: ST_TO_ADDR
// end ;
63156: LD_VAR 0 2
63160: RET
// export function Dec ( value ) ; begin
63161: LD_INT 0
63163: PPUSH
// result := value - 1 ;
63164: LD_ADDR_VAR 0 2
63168: PUSH
63169: LD_VAR 0 1
63173: PUSH
63174: LD_INT 1
63176: MINUS
63177: ST_TO_ADDR
// end ;
63178: LD_VAR 0 2
63182: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63183: LD_INT 0
63185: PPUSH
63186: PPUSH
63187: PPUSH
63188: PPUSH
63189: PPUSH
63190: PPUSH
63191: PPUSH
63192: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63193: LD_VAR 0 1
63197: PPUSH
63198: LD_VAR 0 2
63202: PPUSH
63203: CALL_OW 488
63207: NOT
63208: PUSH
63209: LD_VAR 0 3
63213: PPUSH
63214: LD_VAR 0 4
63218: PPUSH
63219: CALL_OW 488
63223: NOT
63224: OR
63225: IFFALSE 63238
// begin result := - 1 ;
63227: LD_ADDR_VAR 0 5
63231: PUSH
63232: LD_INT 1
63234: NEG
63235: ST_TO_ADDR
// exit ;
63236: GO 63473
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63238: LD_ADDR_VAR 0 12
63242: PUSH
63243: LD_VAR 0 1
63247: PPUSH
63248: LD_VAR 0 2
63252: PPUSH
63253: LD_VAR 0 3
63257: PPUSH
63258: LD_VAR 0 4
63262: PPUSH
63263: CALL 62323 0 4
63267: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63268: LD_ADDR_VAR 0 11
63272: PUSH
63273: LD_VAR 0 1
63277: PPUSH
63278: LD_VAR 0 2
63282: PPUSH
63283: LD_VAR 0 12
63287: PUSH
63288: LD_INT 1
63290: ARRAY
63291: PPUSH
63292: LD_VAR 0 12
63296: PUSH
63297: LD_INT 2
63299: ARRAY
63300: PPUSH
63301: CALL_OW 298
63305: ST_TO_ADDR
// distance := 9999 ;
63306: LD_ADDR_VAR 0 10
63310: PUSH
63311: LD_INT 9999
63313: ST_TO_ADDR
// for i := 0 to 5 do
63314: LD_ADDR_VAR 0 6
63318: PUSH
63319: DOUBLE
63320: LD_INT 0
63322: DEC
63323: ST_TO_ADDR
63324: LD_INT 5
63326: PUSH
63327: FOR_TO
63328: IFFALSE 63471
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63330: LD_ADDR_VAR 0 7
63334: PUSH
63335: LD_VAR 0 1
63339: PPUSH
63340: LD_VAR 0 6
63344: PPUSH
63345: LD_VAR 0 11
63349: PPUSH
63350: CALL_OW 272
63354: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63355: LD_ADDR_VAR 0 8
63359: PUSH
63360: LD_VAR 0 2
63364: PPUSH
63365: LD_VAR 0 6
63369: PPUSH
63370: LD_VAR 0 11
63374: PPUSH
63375: CALL_OW 273
63379: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63380: LD_VAR 0 7
63384: PPUSH
63385: LD_VAR 0 8
63389: PPUSH
63390: CALL_OW 488
63394: NOT
63395: IFFALSE 63399
// continue ;
63397: GO 63327
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63399: LD_ADDR_VAR 0 9
63403: PUSH
63404: LD_VAR 0 12
63408: PUSH
63409: LD_INT 1
63411: ARRAY
63412: PPUSH
63413: LD_VAR 0 12
63417: PUSH
63418: LD_INT 2
63420: ARRAY
63421: PPUSH
63422: LD_VAR 0 7
63426: PPUSH
63427: LD_VAR 0 8
63431: PPUSH
63432: CALL_OW 298
63436: ST_TO_ADDR
// if tmp < distance then
63437: LD_VAR 0 9
63441: PUSH
63442: LD_VAR 0 10
63446: LESS
63447: IFFALSE 63469
// begin result := i ;
63449: LD_ADDR_VAR 0 5
63453: PUSH
63454: LD_VAR 0 6
63458: ST_TO_ADDR
// distance := tmp ;
63459: LD_ADDR_VAR 0 10
63463: PUSH
63464: LD_VAR 0 9
63468: ST_TO_ADDR
// end ; end ;
63469: GO 63327
63471: POP
63472: POP
// end ;
63473: LD_VAR 0 5
63477: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63478: LD_INT 0
63480: PPUSH
63481: PPUSH
// if not driver or not IsInUnit ( driver ) then
63482: LD_VAR 0 1
63486: NOT
63487: PUSH
63488: LD_VAR 0 1
63492: PPUSH
63493: CALL_OW 310
63497: NOT
63498: OR
63499: IFFALSE 63503
// exit ;
63501: GO 63593
// vehicle := IsInUnit ( driver ) ;
63503: LD_ADDR_VAR 0 3
63507: PUSH
63508: LD_VAR 0 1
63512: PPUSH
63513: CALL_OW 310
63517: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63518: LD_VAR 0 1
63522: PPUSH
63523: LD_STRING \
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: LD_INT 0
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 0
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: PUSH
63553: LD_STRING E
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: LD_VAR 0 3
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PPUSH
63589: CALL_OW 446
// end ;
63593: LD_VAR 0 2
63597: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63598: LD_INT 0
63600: PPUSH
63601: PPUSH
// if not driver or not IsInUnit ( driver ) then
63602: LD_VAR 0 1
63606: NOT
63607: PUSH
63608: LD_VAR 0 1
63612: PPUSH
63613: CALL_OW 310
63617: NOT
63618: OR
63619: IFFALSE 63623
// exit ;
63621: GO 63713
// vehicle := IsInUnit ( driver ) ;
63623: LD_ADDR_VAR 0 3
63627: PUSH
63628: LD_VAR 0 1
63632: PPUSH
63633: CALL_OW 310
63637: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63638: LD_VAR 0 1
63642: PPUSH
63643: LD_STRING \
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: LD_INT 0
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: PUSH
63673: LD_STRING E
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: LD_INT 0
63681: PUSH
63682: LD_VAR 0 3
63686: PUSH
63687: LD_INT 0
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: LD_INT 0
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PPUSH
63709: CALL_OW 447
// end ;
63713: LD_VAR 0 2
63717: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63718: LD_INT 0
63720: PPUSH
63721: PPUSH
63722: PPUSH
// tmp := [ ] ;
63723: LD_ADDR_VAR 0 5
63727: PUSH
63728: EMPTY
63729: ST_TO_ADDR
// for i in units do
63730: LD_ADDR_VAR 0 4
63734: PUSH
63735: LD_VAR 0 1
63739: PUSH
63740: FOR_IN
63741: IFFALSE 63779
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63743: LD_ADDR_VAR 0 5
63747: PUSH
63748: LD_VAR 0 5
63752: PPUSH
63753: LD_VAR 0 5
63757: PUSH
63758: LD_INT 1
63760: PLUS
63761: PPUSH
63762: LD_VAR 0 4
63766: PPUSH
63767: CALL_OW 256
63771: PPUSH
63772: CALL_OW 2
63776: ST_TO_ADDR
63777: GO 63740
63779: POP
63780: POP
// if not tmp then
63781: LD_VAR 0 5
63785: NOT
63786: IFFALSE 63790
// exit ;
63788: GO 63838
// if asc then
63790: LD_VAR 0 2
63794: IFFALSE 63818
// result := SortListByListAsc ( units , tmp ) else
63796: LD_ADDR_VAR 0 3
63800: PUSH
63801: LD_VAR 0 1
63805: PPUSH
63806: LD_VAR 0 5
63810: PPUSH
63811: CALL_OW 76
63815: ST_TO_ADDR
63816: GO 63838
// result := SortListByListDesc ( units , tmp ) ;
63818: LD_ADDR_VAR 0 3
63822: PUSH
63823: LD_VAR 0 1
63827: PPUSH
63828: LD_VAR 0 5
63832: PPUSH
63833: CALL_OW 77
63837: ST_TO_ADDR
// end ;
63838: LD_VAR 0 3
63842: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63843: LD_INT 0
63845: PPUSH
63846: PPUSH
// task := GetTaskList ( mech ) ;
63847: LD_ADDR_VAR 0 4
63851: PUSH
63852: LD_VAR 0 1
63856: PPUSH
63857: CALL_OW 437
63861: ST_TO_ADDR
// if not task then
63862: LD_VAR 0 4
63866: NOT
63867: IFFALSE 63871
// exit ;
63869: GO 63913
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63871: LD_ADDR_VAR 0 3
63875: PUSH
63876: LD_VAR 0 4
63880: PUSH
63881: LD_INT 1
63883: ARRAY
63884: PUSH
63885: LD_INT 1
63887: ARRAY
63888: PUSH
63889: LD_STRING r
63891: EQUAL
63892: PUSH
63893: LD_VAR 0 4
63897: PUSH
63898: LD_INT 1
63900: ARRAY
63901: PUSH
63902: LD_INT 4
63904: ARRAY
63905: PUSH
63906: LD_VAR 0 2
63910: EQUAL
63911: AND
63912: ST_TO_ADDR
// end ;
63913: LD_VAR 0 3
63917: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63918: LD_INT 0
63920: PPUSH
// SetDir ( unit , d ) ;
63921: LD_VAR 0 1
63925: PPUSH
63926: LD_VAR 0 4
63930: PPUSH
63931: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63935: LD_VAR 0 1
63939: PPUSH
63940: LD_VAR 0 2
63944: PPUSH
63945: LD_VAR 0 3
63949: PPUSH
63950: LD_VAR 0 5
63954: PPUSH
63955: CALL_OW 48
// end ;
63959: LD_VAR 0 6
63963: RET
// export function ToNaturalNumber ( number ) ; begin
63964: LD_INT 0
63966: PPUSH
// result := number div 1 ;
63967: LD_ADDR_VAR 0 2
63971: PUSH
63972: LD_VAR 0 1
63976: PUSH
63977: LD_INT 1
63979: DIV
63980: ST_TO_ADDR
// if number < 0 then
63981: LD_VAR 0 1
63985: PUSH
63986: LD_INT 0
63988: LESS
63989: IFFALSE 63999
// result := 0 ;
63991: LD_ADDR_VAR 0 2
63995: PUSH
63996: LD_INT 0
63998: ST_TO_ADDR
// end ;
63999: LD_VAR 0 2
64003: RET
// export function SortByClass ( units , class ) ; var un ; begin
64004: LD_INT 0
64006: PPUSH
64007: PPUSH
// if not units or not class then
64008: LD_VAR 0 1
64012: NOT
64013: PUSH
64014: LD_VAR 0 2
64018: NOT
64019: OR
64020: IFFALSE 64024
// exit ;
64022: GO 64119
// result := [ ] ;
64024: LD_ADDR_VAR 0 3
64028: PUSH
64029: EMPTY
64030: ST_TO_ADDR
// for un in units do
64031: LD_ADDR_VAR 0 4
64035: PUSH
64036: LD_VAR 0 1
64040: PUSH
64041: FOR_IN
64042: IFFALSE 64117
// if GetClass ( un ) = class then
64044: LD_VAR 0 4
64048: PPUSH
64049: CALL_OW 257
64053: PUSH
64054: LD_VAR 0 2
64058: EQUAL
64059: IFFALSE 64086
// result := Insert ( result , 1 , un ) else
64061: LD_ADDR_VAR 0 3
64065: PUSH
64066: LD_VAR 0 3
64070: PPUSH
64071: LD_INT 1
64073: PPUSH
64074: LD_VAR 0 4
64078: PPUSH
64079: CALL_OW 2
64083: ST_TO_ADDR
64084: GO 64115
// result := Replace ( result , result + 1 , un ) ;
64086: LD_ADDR_VAR 0 3
64090: PUSH
64091: LD_VAR 0 3
64095: PPUSH
64096: LD_VAR 0 3
64100: PUSH
64101: LD_INT 1
64103: PLUS
64104: PPUSH
64105: LD_VAR 0 4
64109: PPUSH
64110: CALL_OW 1
64114: ST_TO_ADDR
64115: GO 64041
64117: POP
64118: POP
// end ;
64119: LD_VAR 0 3
64123: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64124: LD_INT 0
64126: PPUSH
64127: PPUSH
64128: PPUSH
64129: PPUSH
64130: PPUSH
64131: PPUSH
64132: PPUSH
// result := [ ] ;
64133: LD_ADDR_VAR 0 4
64137: PUSH
64138: EMPTY
64139: ST_TO_ADDR
// if x - r < 0 then
64140: LD_VAR 0 1
64144: PUSH
64145: LD_VAR 0 3
64149: MINUS
64150: PUSH
64151: LD_INT 0
64153: LESS
64154: IFFALSE 64166
// min_x := 0 else
64156: LD_ADDR_VAR 0 8
64160: PUSH
64161: LD_INT 0
64163: ST_TO_ADDR
64164: GO 64182
// min_x := x - r ;
64166: LD_ADDR_VAR 0 8
64170: PUSH
64171: LD_VAR 0 1
64175: PUSH
64176: LD_VAR 0 3
64180: MINUS
64181: ST_TO_ADDR
// if y - r < 0 then
64182: LD_VAR 0 2
64186: PUSH
64187: LD_VAR 0 3
64191: MINUS
64192: PUSH
64193: LD_INT 0
64195: LESS
64196: IFFALSE 64208
// min_y := 0 else
64198: LD_ADDR_VAR 0 7
64202: PUSH
64203: LD_INT 0
64205: ST_TO_ADDR
64206: GO 64224
// min_y := y - r ;
64208: LD_ADDR_VAR 0 7
64212: PUSH
64213: LD_VAR 0 2
64217: PUSH
64218: LD_VAR 0 3
64222: MINUS
64223: ST_TO_ADDR
// max_x := x + r ;
64224: LD_ADDR_VAR 0 9
64228: PUSH
64229: LD_VAR 0 1
64233: PUSH
64234: LD_VAR 0 3
64238: PLUS
64239: ST_TO_ADDR
// max_y := y + r ;
64240: LD_ADDR_VAR 0 10
64244: PUSH
64245: LD_VAR 0 2
64249: PUSH
64250: LD_VAR 0 3
64254: PLUS
64255: ST_TO_ADDR
// for _x = min_x to max_x do
64256: LD_ADDR_VAR 0 5
64260: PUSH
64261: DOUBLE
64262: LD_VAR 0 8
64266: DEC
64267: ST_TO_ADDR
64268: LD_VAR 0 9
64272: PUSH
64273: FOR_TO
64274: IFFALSE 64375
// for _y = min_y to max_y do
64276: LD_ADDR_VAR 0 6
64280: PUSH
64281: DOUBLE
64282: LD_VAR 0 7
64286: DEC
64287: ST_TO_ADDR
64288: LD_VAR 0 10
64292: PUSH
64293: FOR_TO
64294: IFFALSE 64371
// begin if not ValidHex ( _x , _y ) then
64296: LD_VAR 0 5
64300: PPUSH
64301: LD_VAR 0 6
64305: PPUSH
64306: CALL_OW 488
64310: NOT
64311: IFFALSE 64315
// continue ;
64313: GO 64293
// if GetResourceTypeXY ( _x , _y ) then
64315: LD_VAR 0 5
64319: PPUSH
64320: LD_VAR 0 6
64324: PPUSH
64325: CALL_OW 283
64329: IFFALSE 64369
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64331: LD_ADDR_VAR 0 4
64335: PUSH
64336: LD_VAR 0 4
64340: PPUSH
64341: LD_VAR 0 4
64345: PUSH
64346: LD_INT 1
64348: PLUS
64349: PPUSH
64350: LD_VAR 0 5
64354: PUSH
64355: LD_VAR 0 6
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PPUSH
64364: CALL_OW 1
64368: ST_TO_ADDR
// end ;
64369: GO 64293
64371: POP
64372: POP
64373: GO 64273
64375: POP
64376: POP
// end ;
64377: LD_VAR 0 4
64381: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64382: LD_INT 0
64384: PPUSH
64385: PPUSH
64386: PPUSH
64387: PPUSH
64388: PPUSH
64389: PPUSH
64390: PPUSH
64391: PPUSH
// if not units then
64392: LD_VAR 0 1
64396: NOT
64397: IFFALSE 64401
// exit ;
64399: GO 64925
// result := UnitFilter ( units , [ f_ok ] ) ;
64401: LD_ADDR_VAR 0 3
64405: PUSH
64406: LD_VAR 0 1
64410: PPUSH
64411: LD_INT 50
64413: PUSH
64414: EMPTY
64415: LIST
64416: PPUSH
64417: CALL_OW 72
64421: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64422: LD_ADDR_VAR 0 8
64426: PUSH
64427: LD_VAR 0 1
64431: PUSH
64432: LD_INT 1
64434: ARRAY
64435: PPUSH
64436: CALL_OW 255
64440: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64441: LD_ADDR_VAR 0 10
64445: PUSH
64446: LD_INT 29
64448: PUSH
64449: LD_INT 91
64451: PUSH
64452: LD_INT 49
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: LIST
64459: ST_TO_ADDR
// if not result then
64460: LD_VAR 0 3
64464: NOT
64465: IFFALSE 64469
// exit ;
64467: GO 64925
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64469: LD_ADDR_VAR 0 5
64473: PUSH
64474: LD_INT 81
64476: PUSH
64477: LD_VAR 0 8
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PPUSH
64486: CALL_OW 69
64490: ST_TO_ADDR
// for i in result do
64491: LD_ADDR_VAR 0 4
64495: PUSH
64496: LD_VAR 0 3
64500: PUSH
64501: FOR_IN
64502: IFFALSE 64923
// begin tag := GetTag ( i ) + 1 ;
64504: LD_ADDR_VAR 0 9
64508: PUSH
64509: LD_VAR 0 4
64513: PPUSH
64514: CALL_OW 110
64518: PUSH
64519: LD_INT 1
64521: PLUS
64522: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64523: LD_ADDR_VAR 0 7
64527: PUSH
64528: LD_VAR 0 4
64532: PPUSH
64533: CALL_OW 250
64537: PPUSH
64538: LD_VAR 0 4
64542: PPUSH
64543: CALL_OW 251
64547: PPUSH
64548: LD_INT 6
64550: PPUSH
64551: CALL 64124 0 3
64555: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64556: LD_VAR 0 4
64560: PPUSH
64561: CALL_OW 247
64565: PUSH
64566: LD_INT 2
64568: EQUAL
64569: PUSH
64570: LD_VAR 0 7
64574: AND
64575: PUSH
64576: LD_VAR 0 4
64580: PPUSH
64581: CALL_OW 264
64585: PUSH
64586: LD_VAR 0 10
64590: IN
64591: NOT
64592: AND
64593: IFFALSE 64632
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64595: LD_VAR 0 4
64599: PPUSH
64600: LD_VAR 0 7
64604: PUSH
64605: LD_INT 1
64607: ARRAY
64608: PUSH
64609: LD_INT 1
64611: ARRAY
64612: PPUSH
64613: LD_VAR 0 7
64617: PUSH
64618: LD_INT 1
64620: ARRAY
64621: PUSH
64622: LD_INT 2
64624: ARRAY
64625: PPUSH
64626: CALL_OW 116
64630: GO 64921
// if path > tag then
64632: LD_VAR 0 2
64636: PUSH
64637: LD_VAR 0 9
64641: GREATER
64642: IFFALSE 64850
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64644: LD_ADDR_VAR 0 6
64648: PUSH
64649: LD_VAR 0 5
64653: PPUSH
64654: LD_INT 91
64656: PUSH
64657: LD_VAR 0 4
64661: PUSH
64662: LD_INT 8
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: LIST
64669: PPUSH
64670: CALL_OW 72
64674: ST_TO_ADDR
// if nearEnemy then
64675: LD_VAR 0 6
64679: IFFALSE 64748
// begin if GetWeapon ( i ) = ru_time_lapser then
64681: LD_VAR 0 4
64685: PPUSH
64686: CALL_OW 264
64690: PUSH
64691: LD_INT 49
64693: EQUAL
64694: IFFALSE 64722
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64696: LD_VAR 0 4
64700: PPUSH
64701: LD_VAR 0 6
64705: PPUSH
64706: LD_VAR 0 4
64710: PPUSH
64711: CALL_OW 74
64715: PPUSH
64716: CALL_OW 112
64720: GO 64746
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64722: LD_VAR 0 4
64726: PPUSH
64727: LD_VAR 0 6
64731: PPUSH
64732: LD_VAR 0 4
64736: PPUSH
64737: CALL_OW 74
64741: PPUSH
64742: CALL 65850 0 2
// end else
64746: GO 64848
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64748: LD_VAR 0 4
64752: PPUSH
64753: LD_VAR 0 2
64757: PUSH
64758: LD_VAR 0 9
64762: ARRAY
64763: PUSH
64764: LD_INT 1
64766: ARRAY
64767: PPUSH
64768: LD_VAR 0 2
64772: PUSH
64773: LD_VAR 0 9
64777: ARRAY
64778: PUSH
64779: LD_INT 2
64781: ARRAY
64782: PPUSH
64783: CALL_OW 297
64787: PUSH
64788: LD_INT 6
64790: GREATER
64791: IFFALSE 64834
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64793: LD_VAR 0 4
64797: PPUSH
64798: LD_VAR 0 2
64802: PUSH
64803: LD_VAR 0 9
64807: ARRAY
64808: PUSH
64809: LD_INT 1
64811: ARRAY
64812: PPUSH
64813: LD_VAR 0 2
64817: PUSH
64818: LD_VAR 0 9
64822: ARRAY
64823: PUSH
64824: LD_INT 2
64826: ARRAY
64827: PPUSH
64828: CALL_OW 114
64832: GO 64848
// SetTag ( i , tag ) ;
64834: LD_VAR 0 4
64838: PPUSH
64839: LD_VAR 0 9
64843: PPUSH
64844: CALL_OW 109
// end else
64848: GO 64921
// if enemy then
64850: LD_VAR 0 5
64854: IFFALSE 64921
// begin if GetWeapon ( i ) = ru_time_lapser then
64856: LD_VAR 0 4
64860: PPUSH
64861: CALL_OW 264
64865: PUSH
64866: LD_INT 49
64868: EQUAL
64869: IFFALSE 64897
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64871: LD_VAR 0 4
64875: PPUSH
64876: LD_VAR 0 5
64880: PPUSH
64881: LD_VAR 0 4
64885: PPUSH
64886: CALL_OW 74
64890: PPUSH
64891: CALL_OW 112
64895: GO 64921
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64897: LD_VAR 0 4
64901: PPUSH
64902: LD_VAR 0 5
64906: PPUSH
64907: LD_VAR 0 4
64911: PPUSH
64912: CALL_OW 74
64916: PPUSH
64917: CALL 65850 0 2
// end ; end ;
64921: GO 64501
64923: POP
64924: POP
// end ;
64925: LD_VAR 0 3
64929: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64930: LD_INT 0
64932: PPUSH
64933: PPUSH
64934: PPUSH
// if not unit or IsInUnit ( unit ) then
64935: LD_VAR 0 1
64939: NOT
64940: PUSH
64941: LD_VAR 0 1
64945: PPUSH
64946: CALL_OW 310
64950: OR
64951: IFFALSE 64955
// exit ;
64953: GO 65046
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64955: LD_ADDR_VAR 0 4
64959: PUSH
64960: LD_VAR 0 1
64964: PPUSH
64965: CALL_OW 250
64969: PPUSH
64970: LD_VAR 0 2
64974: PPUSH
64975: LD_INT 1
64977: PPUSH
64978: CALL_OW 272
64982: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64983: LD_ADDR_VAR 0 5
64987: PUSH
64988: LD_VAR 0 1
64992: PPUSH
64993: CALL_OW 251
64997: PPUSH
64998: LD_VAR 0 2
65002: PPUSH
65003: LD_INT 1
65005: PPUSH
65006: CALL_OW 273
65010: ST_TO_ADDR
// if ValidHex ( x , y ) then
65011: LD_VAR 0 4
65015: PPUSH
65016: LD_VAR 0 5
65020: PPUSH
65021: CALL_OW 488
65025: IFFALSE 65046
// ComTurnXY ( unit , x , y ) ;
65027: LD_VAR 0 1
65031: PPUSH
65032: LD_VAR 0 4
65036: PPUSH
65037: LD_VAR 0 5
65041: PPUSH
65042: CALL_OW 118
// end ;
65046: LD_VAR 0 3
65050: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65051: LD_INT 0
65053: PPUSH
65054: PPUSH
// result := false ;
65055: LD_ADDR_VAR 0 3
65059: PUSH
65060: LD_INT 0
65062: ST_TO_ADDR
// if not units then
65063: LD_VAR 0 2
65067: NOT
65068: IFFALSE 65072
// exit ;
65070: GO 65117
// for i in units do
65072: LD_ADDR_VAR 0 4
65076: PUSH
65077: LD_VAR 0 2
65081: PUSH
65082: FOR_IN
65083: IFFALSE 65115
// if See ( side , i ) then
65085: LD_VAR 0 1
65089: PPUSH
65090: LD_VAR 0 4
65094: PPUSH
65095: CALL_OW 292
65099: IFFALSE 65113
// begin result := true ;
65101: LD_ADDR_VAR 0 3
65105: PUSH
65106: LD_INT 1
65108: ST_TO_ADDR
// exit ;
65109: POP
65110: POP
65111: GO 65117
// end ;
65113: GO 65082
65115: POP
65116: POP
// end ;
65117: LD_VAR 0 3
65121: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65122: LD_INT 0
65124: PPUSH
65125: PPUSH
65126: PPUSH
65127: PPUSH
// if not unit or not points then
65128: LD_VAR 0 1
65132: NOT
65133: PUSH
65134: LD_VAR 0 2
65138: NOT
65139: OR
65140: IFFALSE 65144
// exit ;
65142: GO 65234
// dist := 99999 ;
65144: LD_ADDR_VAR 0 5
65148: PUSH
65149: LD_INT 99999
65151: ST_TO_ADDR
// for i in points do
65152: LD_ADDR_VAR 0 4
65156: PUSH
65157: LD_VAR 0 2
65161: PUSH
65162: FOR_IN
65163: IFFALSE 65232
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65165: LD_ADDR_VAR 0 6
65169: PUSH
65170: LD_VAR 0 1
65174: PPUSH
65175: LD_VAR 0 4
65179: PUSH
65180: LD_INT 1
65182: ARRAY
65183: PPUSH
65184: LD_VAR 0 4
65188: PUSH
65189: LD_INT 2
65191: ARRAY
65192: PPUSH
65193: CALL_OW 297
65197: ST_TO_ADDR
// if tmpDist < dist then
65198: LD_VAR 0 6
65202: PUSH
65203: LD_VAR 0 5
65207: LESS
65208: IFFALSE 65230
// begin result := i ;
65210: LD_ADDR_VAR 0 3
65214: PUSH
65215: LD_VAR 0 4
65219: ST_TO_ADDR
// dist := tmpDist ;
65220: LD_ADDR_VAR 0 5
65224: PUSH
65225: LD_VAR 0 6
65229: ST_TO_ADDR
// end ; end ;
65230: GO 65162
65232: POP
65233: POP
// end ;
65234: LD_VAR 0 3
65238: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65239: LD_INT 0
65241: PPUSH
// uc_side := side ;
65242: LD_ADDR_OWVAR 20
65246: PUSH
65247: LD_VAR 0 1
65251: ST_TO_ADDR
// uc_nation := 3 ;
65252: LD_ADDR_OWVAR 21
65256: PUSH
65257: LD_INT 3
65259: ST_TO_ADDR
// vc_chassis := 25 ;
65260: LD_ADDR_OWVAR 37
65264: PUSH
65265: LD_INT 25
65267: ST_TO_ADDR
// vc_engine := engine_siberite ;
65268: LD_ADDR_OWVAR 39
65272: PUSH
65273: LD_INT 3
65275: ST_TO_ADDR
// vc_control := control_computer ;
65276: LD_ADDR_OWVAR 38
65280: PUSH
65281: LD_INT 3
65283: ST_TO_ADDR
// vc_weapon := 59 ;
65284: LD_ADDR_OWVAR 40
65288: PUSH
65289: LD_INT 59
65291: ST_TO_ADDR
// result := CreateVehicle ;
65292: LD_ADDR_VAR 0 5
65296: PUSH
65297: CALL_OW 45
65301: ST_TO_ADDR
// SetDir ( result , d ) ;
65302: LD_VAR 0 5
65306: PPUSH
65307: LD_VAR 0 4
65311: PPUSH
65312: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65316: LD_VAR 0 5
65320: PPUSH
65321: LD_VAR 0 2
65325: PPUSH
65326: LD_VAR 0 3
65330: PPUSH
65331: LD_INT 0
65333: PPUSH
65334: CALL_OW 48
// end ;
65338: LD_VAR 0 5
65342: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65343: LD_INT 0
65345: PPUSH
65346: PPUSH
65347: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65348: LD_ADDR_VAR 0 2
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65371: LD_VAR 0 1
65375: NOT
65376: PUSH
65377: LD_VAR 0 1
65381: PPUSH
65382: CALL_OW 264
65386: PUSH
65387: LD_INT 12
65389: PUSH
65390: LD_INT 51
65392: PUSH
65393: LD_INT 32
65395: PUSH
65396: LD_INT 89
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: IN
65405: NOT
65406: OR
65407: IFFALSE 65411
// exit ;
65409: GO 65509
// for i := 1 to 3 do
65411: LD_ADDR_VAR 0 3
65415: PUSH
65416: DOUBLE
65417: LD_INT 1
65419: DEC
65420: ST_TO_ADDR
65421: LD_INT 3
65423: PUSH
65424: FOR_TO
65425: IFFALSE 65507
// begin tmp := GetCargo ( cargo , i ) ;
65427: LD_ADDR_VAR 0 4
65431: PUSH
65432: LD_VAR 0 1
65436: PPUSH
65437: LD_VAR 0 3
65441: PPUSH
65442: CALL_OW 289
65446: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65447: LD_ADDR_VAR 0 2
65451: PUSH
65452: LD_VAR 0 2
65456: PPUSH
65457: LD_VAR 0 3
65461: PPUSH
65462: LD_VAR 0 4
65466: PPUSH
65467: CALL_OW 1
65471: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65472: LD_ADDR_VAR 0 2
65476: PUSH
65477: LD_VAR 0 2
65481: PPUSH
65482: LD_INT 4
65484: PPUSH
65485: LD_VAR 0 2
65489: PUSH
65490: LD_INT 4
65492: ARRAY
65493: PUSH
65494: LD_VAR 0 4
65498: PLUS
65499: PPUSH
65500: CALL_OW 1
65504: ST_TO_ADDR
// end ;
65505: GO 65424
65507: POP
65508: POP
// end ;
65509: LD_VAR 0 2
65513: RET
// export function Length ( array ) ; begin
65514: LD_INT 0
65516: PPUSH
// result := array + 0 ;
65517: LD_ADDR_VAR 0 2
65521: PUSH
65522: LD_VAR 0 1
65526: PUSH
65527: LD_INT 0
65529: PLUS
65530: ST_TO_ADDR
// end ;
65531: LD_VAR 0 2
65535: RET
// export function PrepareArray ( array ) ; begin
65536: LD_INT 0
65538: PPUSH
// result := array diff 0 ;
65539: LD_ADDR_VAR 0 2
65543: PUSH
65544: LD_VAR 0 1
65548: PUSH
65549: LD_INT 0
65551: DIFF
65552: ST_TO_ADDR
// if not result [ 1 ] then
65553: LD_VAR 0 2
65557: PUSH
65558: LD_INT 1
65560: ARRAY
65561: NOT
65562: IFFALSE 65582
// result := Delete ( result , 1 ) ;
65564: LD_ADDR_VAR 0 2
65568: PUSH
65569: LD_VAR 0 2
65573: PPUSH
65574: LD_INT 1
65576: PPUSH
65577: CALL_OW 3
65581: ST_TO_ADDR
// end ;
65582: LD_VAR 0 2
65586: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65587: LD_INT 0
65589: PPUSH
65590: PPUSH
65591: PPUSH
65592: PPUSH
// sibRocketRange := 25 ;
65593: LD_ADDR_VAR 0 6
65597: PUSH
65598: LD_INT 25
65600: ST_TO_ADDR
// result := false ;
65601: LD_ADDR_VAR 0 4
65605: PUSH
65606: LD_INT 0
65608: ST_TO_ADDR
// for i := 0 to 5 do
65609: LD_ADDR_VAR 0 5
65613: PUSH
65614: DOUBLE
65615: LD_INT 0
65617: DEC
65618: ST_TO_ADDR
65619: LD_INT 5
65621: PUSH
65622: FOR_TO
65623: IFFALSE 65690
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65625: LD_VAR 0 1
65629: PPUSH
65630: LD_VAR 0 5
65634: PPUSH
65635: LD_VAR 0 6
65639: PPUSH
65640: CALL_OW 272
65644: PPUSH
65645: LD_VAR 0 2
65649: PPUSH
65650: LD_VAR 0 5
65654: PPUSH
65655: LD_VAR 0 6
65659: PPUSH
65660: CALL_OW 273
65664: PPUSH
65665: LD_VAR 0 3
65669: PPUSH
65670: CALL_OW 309
65674: IFFALSE 65688
// begin result := true ;
65676: LD_ADDR_VAR 0 4
65680: PUSH
65681: LD_INT 1
65683: ST_TO_ADDR
// exit ;
65684: POP
65685: POP
65686: GO 65692
// end ;
65688: GO 65622
65690: POP
65691: POP
// end ;
65692: LD_VAR 0 4
65696: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
65697: LD_INT 0
65699: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
65700: LD_VAR 0 1
65704: PPUSH
65705: LD_VAR 0 2
65709: PPUSH
65710: LD_INT 0
65712: PPUSH
65713: LD_INT 0
65715: PPUSH
65716: LD_INT 1
65718: PPUSH
65719: LD_INT 0
65721: PPUSH
65722: CALL_OW 587
// end ;
65726: LD_VAR 0 3
65730: RET
// export function CenterOnNow ( unit ) ; begin
65731: LD_INT 0
65733: PPUSH
// result := IsInUnit ( unit ) ;
65734: LD_ADDR_VAR 0 2
65738: PUSH
65739: LD_VAR 0 1
65743: PPUSH
65744: CALL_OW 310
65748: ST_TO_ADDR
// if not result then
65749: LD_VAR 0 2
65753: NOT
65754: IFFALSE 65766
// result := unit ;
65756: LD_ADDR_VAR 0 2
65760: PUSH
65761: LD_VAR 0 1
65765: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
65766: LD_VAR 0 1
65770: PPUSH
65771: CALL_OW 87
// end ;
65775: LD_VAR 0 2
65779: RET
// export function ComMoveHex ( unit , hex ) ; begin
65780: LD_INT 0
65782: PPUSH
// if not hex then
65783: LD_VAR 0 2
65787: NOT
65788: IFFALSE 65792
// exit ;
65790: GO 65845
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
65792: LD_VAR 0 2
65796: PUSH
65797: LD_INT 1
65799: ARRAY
65800: PPUSH
65801: LD_VAR 0 2
65805: PUSH
65806: LD_INT 2
65808: ARRAY
65809: PPUSH
65810: CALL_OW 428
65814: IFFALSE 65818
// exit ;
65816: GO 65845
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
65818: LD_VAR 0 1
65822: PPUSH
65823: LD_VAR 0 2
65827: PUSH
65828: LD_INT 1
65830: ARRAY
65831: PPUSH
65832: LD_VAR 0 2
65836: PUSH
65837: LD_INT 2
65839: ARRAY
65840: PPUSH
65841: CALL_OW 111
// end ;
65845: LD_VAR 0 3
65849: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
65850: LD_INT 0
65852: PPUSH
65853: PPUSH
65854: PPUSH
// if not unit or not enemy then
65855: LD_VAR 0 1
65859: NOT
65860: PUSH
65861: LD_VAR 0 2
65865: NOT
65866: OR
65867: IFFALSE 65871
// exit ;
65869: GO 65995
// x := GetX ( enemy ) ;
65871: LD_ADDR_VAR 0 4
65875: PUSH
65876: LD_VAR 0 2
65880: PPUSH
65881: CALL_OW 250
65885: ST_TO_ADDR
// y := GetY ( enemy ) ;
65886: LD_ADDR_VAR 0 5
65890: PUSH
65891: LD_VAR 0 2
65895: PPUSH
65896: CALL_OW 251
65900: ST_TO_ADDR
// if ValidHex ( x , y ) then
65901: LD_VAR 0 4
65905: PPUSH
65906: LD_VAR 0 5
65910: PPUSH
65911: CALL_OW 488
65915: IFFALSE 65995
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
65917: LD_VAR 0 2
65921: PPUSH
65922: CALL_OW 247
65926: PUSH
65927: LD_INT 3
65929: PUSH
65930: LD_INT 2
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: IN
65937: PUSH
65938: LD_VAR 0 1
65942: PPUSH
65943: CALL_OW 255
65947: PPUSH
65948: LD_VAR 0 2
65952: PPUSH
65953: CALL_OW 292
65957: OR
65958: IFFALSE 65976
// ComAttackUnit ( unit , enemy ) else
65960: LD_VAR 0 1
65964: PPUSH
65965: LD_VAR 0 2
65969: PPUSH
65970: CALL_OW 115
65974: GO 65995
// ComAgressiveMove ( unit , x , y ) ;
65976: LD_VAR 0 1
65980: PPUSH
65981: LD_VAR 0 4
65985: PPUSH
65986: LD_VAR 0 5
65990: PPUSH
65991: CALL_OW 114
// end ;
65995: LD_VAR 0 3
65999: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
66000: LD_INT 0
66002: PPUSH
66003: PPUSH
66004: PPUSH
// list := AreaToList ( area , 0 ) ;
66005: LD_ADDR_VAR 0 5
66009: PUSH
66010: LD_VAR 0 1
66014: PPUSH
66015: LD_INT 0
66017: PPUSH
66018: CALL_OW 517
66022: ST_TO_ADDR
// if not list then
66023: LD_VAR 0 5
66027: NOT
66028: IFFALSE 66032
// exit ;
66030: GO 66162
// if all then
66032: LD_VAR 0 2
66036: IFFALSE 66124
// begin for i := 1 to list [ 1 ] do
66038: LD_ADDR_VAR 0 4
66042: PUSH
66043: DOUBLE
66044: LD_INT 1
66046: DEC
66047: ST_TO_ADDR
66048: LD_VAR 0 5
66052: PUSH
66053: LD_INT 1
66055: ARRAY
66056: PUSH
66057: FOR_TO
66058: IFFALSE 66120
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
66060: LD_ADDR_VAR 0 3
66064: PUSH
66065: LD_VAR 0 3
66069: PPUSH
66070: LD_VAR 0 3
66074: PUSH
66075: LD_INT 1
66077: PLUS
66078: PPUSH
66079: LD_VAR 0 5
66083: PUSH
66084: LD_INT 1
66086: ARRAY
66087: PUSH
66088: LD_VAR 0 4
66092: ARRAY
66093: PUSH
66094: LD_VAR 0 5
66098: PUSH
66099: LD_INT 2
66101: ARRAY
66102: PUSH
66103: LD_VAR 0 4
66107: ARRAY
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PPUSH
66113: CALL_OW 1
66117: ST_TO_ADDR
66118: GO 66057
66120: POP
66121: POP
// exit ;
66122: GO 66162
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
66124: LD_ADDR_VAR 0 3
66128: PUSH
66129: LD_VAR 0 5
66133: PUSH
66134: LD_INT 1
66136: ARRAY
66137: PUSH
66138: LD_INT 1
66140: ARRAY
66141: PUSH
66142: LD_VAR 0 5
66146: PUSH
66147: LD_INT 2
66149: ARRAY
66150: PUSH
66151: LD_INT 1
66153: ARRAY
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: EMPTY
66160: LIST
66161: ST_TO_ADDR
// end ;
66162: LD_VAR 0 3
66166: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
66167: LD_INT 0
66169: PPUSH
66170: PPUSH
// list := AreaToList ( area , 0 ) ;
66171: LD_ADDR_VAR 0 4
66175: PUSH
66176: LD_VAR 0 1
66180: PPUSH
66181: LD_INT 0
66183: PPUSH
66184: CALL_OW 517
66188: ST_TO_ADDR
// if not list then
66189: LD_VAR 0 4
66193: NOT
66194: IFFALSE 66198
// exit ;
66196: GO 66239
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
66198: LD_ADDR_VAR 0 3
66202: PUSH
66203: LD_VAR 0 4
66207: PUSH
66208: LD_INT 1
66210: ARRAY
66211: PUSH
66212: LD_INT 1
66214: ARRAY
66215: PUSH
66216: LD_VAR 0 4
66220: PUSH
66221: LD_INT 2
66223: ARRAY
66224: PUSH
66225: LD_INT 1
66227: ARRAY
66228: PUSH
66229: LD_VAR 0 2
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: LIST
66238: ST_TO_ADDR
// end ;
66239: LD_VAR 0 3
66243: RET
// export function First ( array ) ; begin
66244: LD_INT 0
66246: PPUSH
// if not array then
66247: LD_VAR 0 1
66251: NOT
66252: IFFALSE 66256
// exit ;
66254: GO 66270
// result := array [ 1 ] ;
66256: LD_ADDR_VAR 0 2
66260: PUSH
66261: LD_VAR 0 1
66265: PUSH
66266: LD_INT 1
66268: ARRAY
66269: ST_TO_ADDR
// end ;
66270: LD_VAR 0 2
66274: RET
// export function Last ( array ) ; begin
66275: LD_INT 0
66277: PPUSH
// if not array then
66278: LD_VAR 0 1
66282: NOT
66283: IFFALSE 66287
// exit ;
66285: GO 66303
// result := array [ array ] ;
66287: LD_ADDR_VAR 0 2
66291: PUSH
66292: LD_VAR 0 1
66296: PUSH
66297: LD_VAR 0 1
66301: ARRAY
66302: ST_TO_ADDR
// end ;
66303: LD_VAR 0 2
66307: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
66308: LD_INT 0
66310: PPUSH
66311: PPUSH
// result := [ ] ;
66312: LD_ADDR_VAR 0 5
66316: PUSH
66317: EMPTY
66318: ST_TO_ADDR
// if not array then
66319: LD_VAR 0 1
66323: NOT
66324: IFFALSE 66328
// exit ;
66326: GO 66440
// for i := 1 to array do
66328: LD_ADDR_VAR 0 6
66332: PUSH
66333: DOUBLE
66334: LD_INT 1
66336: DEC
66337: ST_TO_ADDR
66338: LD_VAR 0 1
66342: PUSH
66343: FOR_TO
66344: IFFALSE 66438
// if array [ i ] [ index ] = value then
66346: LD_VAR 0 1
66350: PUSH
66351: LD_VAR 0 6
66355: ARRAY
66356: PUSH
66357: LD_VAR 0 2
66361: ARRAY
66362: PUSH
66363: LD_VAR 0 3
66367: EQUAL
66368: IFFALSE 66436
// begin if indexColumn then
66370: LD_VAR 0 4
66374: IFFALSE 66410
// result := Join ( result , array [ i ] [ indexColumn ] ) else
66376: LD_ADDR_VAR 0 5
66380: PUSH
66381: LD_VAR 0 5
66385: PPUSH
66386: LD_VAR 0 1
66390: PUSH
66391: LD_VAR 0 6
66395: ARRAY
66396: PUSH
66397: LD_VAR 0 4
66401: ARRAY
66402: PPUSH
66403: CALL 61778 0 2
66407: ST_TO_ADDR
66408: GO 66436
// result := Join ( result , array [ i ] ) ;
66410: LD_ADDR_VAR 0 5
66414: PUSH
66415: LD_VAR 0 5
66419: PPUSH
66420: LD_VAR 0 1
66424: PUSH
66425: LD_VAR 0 6
66429: ARRAY
66430: PPUSH
66431: CALL 61778 0 2
66435: ST_TO_ADDR
// end ;
66436: GO 66343
66438: POP
66439: POP
// end ;
66440: LD_VAR 0 5
66444: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
66445: LD_INT 0
66447: PPUSH
66448: PPUSH
66449: PPUSH
// if btype = b_depot then
66450: LD_VAR 0 2
66454: PUSH
66455: LD_INT 0
66457: EQUAL
66458: IFFALSE 66470
// begin result := true ;
66460: LD_ADDR_VAR 0 3
66464: PUSH
66465: LD_INT 1
66467: ST_TO_ADDR
// exit ;
66468: GO 66586
// end ; pom := GetBase ( depot ) ;
66470: LD_ADDR_VAR 0 4
66474: PUSH
66475: LD_VAR 0 1
66479: PPUSH
66480: CALL_OW 274
66484: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
66485: LD_ADDR_VAR 0 5
66489: PUSH
66490: LD_VAR 0 2
66494: PPUSH
66495: LD_VAR 0 1
66499: PPUSH
66500: CALL_OW 248
66504: PPUSH
66505: CALL_OW 450
66509: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
66510: LD_ADDR_VAR 0 3
66514: PUSH
66515: LD_VAR 0 4
66519: PPUSH
66520: LD_INT 1
66522: PPUSH
66523: CALL_OW 275
66527: PUSH
66528: LD_VAR 0 5
66532: PUSH
66533: LD_INT 1
66535: ARRAY
66536: GREATEREQUAL
66537: PUSH
66538: LD_VAR 0 4
66542: PPUSH
66543: LD_INT 2
66545: PPUSH
66546: CALL_OW 275
66550: PUSH
66551: LD_VAR 0 5
66555: PUSH
66556: LD_INT 2
66558: ARRAY
66559: GREATEREQUAL
66560: AND
66561: PUSH
66562: LD_VAR 0 4
66566: PPUSH
66567: LD_INT 3
66569: PPUSH
66570: CALL_OW 275
66574: PUSH
66575: LD_VAR 0 5
66579: PUSH
66580: LD_INT 3
66582: ARRAY
66583: GREATEREQUAL
66584: AND
66585: ST_TO_ADDR
// end ;
66586: LD_VAR 0 3
66590: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
66591: LD_INT 0
66593: PPUSH
// if not vehicles or not parkingPoint then
66594: LD_VAR 0 1
66598: NOT
66599: PUSH
66600: LD_VAR 0 2
66604: NOT
66605: OR
66606: IFFALSE 66610
// exit ;
66608: GO 66708
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
66610: LD_ADDR_VAR 0 1
66614: PUSH
66615: LD_VAR 0 1
66619: PPUSH
66620: LD_INT 50
66622: PUSH
66623: EMPTY
66624: LIST
66625: PUSH
66626: LD_INT 3
66628: PUSH
66629: LD_INT 92
66631: PUSH
66632: LD_VAR 0 2
66636: PUSH
66637: LD_INT 1
66639: ARRAY
66640: PUSH
66641: LD_VAR 0 2
66645: PUSH
66646: LD_INT 2
66648: ARRAY
66649: PUSH
66650: LD_INT 8
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PPUSH
66667: CALL_OW 72
66671: ST_TO_ADDR
// if not vehicles then
66672: LD_VAR 0 1
66676: NOT
66677: IFFALSE 66681
// exit ;
66679: GO 66708
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
66681: LD_VAR 0 1
66685: PPUSH
66686: LD_VAR 0 2
66690: PUSH
66691: LD_INT 1
66693: ARRAY
66694: PPUSH
66695: LD_VAR 0 2
66699: PUSH
66700: LD_INT 2
66702: ARRAY
66703: PPUSH
66704: CALL_OW 111
// end ;
66708: LD_VAR 0 3
66712: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
66713: LD_INT 0
66715: PPUSH
66716: PPUSH
66717: PPUSH
// if not side or not area then
66718: LD_VAR 0 1
66722: NOT
66723: PUSH
66724: LD_VAR 0 2
66728: NOT
66729: OR
66730: IFFALSE 66734
// exit ;
66732: GO 66853
// tmp := AreaToList ( area , 0 ) ;
66734: LD_ADDR_VAR 0 5
66738: PUSH
66739: LD_VAR 0 2
66743: PPUSH
66744: LD_INT 0
66746: PPUSH
66747: CALL_OW 517
66751: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
66752: LD_ADDR_VAR 0 4
66756: PUSH
66757: DOUBLE
66758: LD_INT 1
66760: DEC
66761: ST_TO_ADDR
66762: LD_VAR 0 5
66766: PUSH
66767: LD_INT 1
66769: ARRAY
66770: PUSH
66771: FOR_TO
66772: IFFALSE 66851
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
66774: LD_VAR 0 5
66778: PUSH
66779: LD_INT 1
66781: ARRAY
66782: PUSH
66783: LD_VAR 0 4
66787: ARRAY
66788: PPUSH
66789: LD_VAR 0 5
66793: PUSH
66794: LD_INT 2
66796: ARRAY
66797: PUSH
66798: LD_VAR 0 4
66802: ARRAY
66803: PPUSH
66804: CALL_OW 351
66808: IFFALSE 66849
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
66810: LD_VAR 0 5
66814: PUSH
66815: LD_INT 1
66817: ARRAY
66818: PUSH
66819: LD_VAR 0 4
66823: ARRAY
66824: PPUSH
66825: LD_VAR 0 5
66829: PUSH
66830: LD_INT 2
66832: ARRAY
66833: PUSH
66834: LD_VAR 0 4
66838: ARRAY
66839: PPUSH
66840: LD_VAR 0 1
66844: PPUSH
66845: CALL_OW 244
// end ;
66849: GO 66771
66851: POP
66852: POP
// end ; end_of_file
66853: LD_VAR 0 3
66857: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66858: LD_VAR 0 1
66862: PUSH
66863: LD_INT 200
66865: DOUBLE
66866: GREATEREQUAL
66867: IFFALSE 66875
66869: LD_INT 299
66871: DOUBLE
66872: LESSEQUAL
66873: IFTRUE 66877
66875: GO 66909
66877: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66878: LD_VAR 0 1
66882: PPUSH
66883: LD_VAR 0 2
66887: PPUSH
66888: LD_VAR 0 3
66892: PPUSH
66893: LD_VAR 0 4
66897: PPUSH
66898: LD_VAR 0 5
66902: PPUSH
66903: CALL 3750 0 5
66907: GO 66986
66909: LD_INT 300
66911: DOUBLE
66912: GREATEREQUAL
66913: IFFALSE 66921
66915: LD_INT 399
66917: DOUBLE
66918: LESSEQUAL
66919: IFTRUE 66923
66921: GO 66985
66923: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66924: LD_VAR 0 1
66928: PPUSH
66929: LD_VAR 0 2
66933: PPUSH
66934: LD_VAR 0 3
66938: PPUSH
66939: LD_VAR 0 4
66943: PPUSH
66944: LD_VAR 0 5
66948: PPUSH
66949: LD_VAR 0 6
66953: PPUSH
66954: LD_VAR 0 7
66958: PPUSH
66959: LD_VAR 0 8
66963: PPUSH
66964: LD_VAR 0 9
66968: PPUSH
66969: LD_VAR 0 10
66973: PPUSH
66974: LD_VAR 0 11
66978: PPUSH
66979: CALL 20788 0 11
66983: GO 66986
66985: POP
// end ;
66986: PPOPN 11
66988: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66989: LD_VAR 0 1
66993: PPUSH
66994: LD_VAR 0 2
66998: PPUSH
66999: LD_VAR 0 3
67003: PPUSH
67004: LD_VAR 0 4
67008: PPUSH
67009: LD_VAR 0 5
67013: PPUSH
67014: CALL 3486 0 5
// end ; end_of_file
67018: PPOPN 5
67020: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67021: LD_VAR 0 1
67025: PPUSH
67026: LD_VAR 0 2
67030: PPUSH
67031: LD_VAR 0 3
67035: PPUSH
67036: LD_VAR 0 4
67040: PPUSH
67041: LD_VAR 0 5
67045: PPUSH
67046: LD_VAR 0 6
67050: PPUSH
67051: CALL 8440 0 6
// end ;
67055: PPOPN 6
67057: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67058: LD_INT 0
67060: PPUSH
// begin if not units then
67061: LD_VAR 0 1
67065: NOT
67066: IFFALSE 67070
// exit ;
67068: GO 67070
// end ;
67070: PPOPN 7
67072: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67073: CALL 8327 0 0
// end ;
67077: PPOPN 1
67079: END
