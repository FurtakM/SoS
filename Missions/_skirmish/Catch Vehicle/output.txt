// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_EXP 77
3394: EQUAL
3395: IFFALSE 3467
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3397: LD_INT 68
3399: PPUSH
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 255
3409: PPUSH
3410: CALL_OW 321
3414: PUSH
3415: LD_INT 2
3417: EQUAL
3418: IFFALSE 3430
// eff := 70 else
3420: LD_ADDR_VAR 0 4
3424: PUSH
3425: LD_INT 70
3427: ST_TO_ADDR
3428: GO 3438
// eff := 30 ;
3430: LD_ADDR_VAR 0 4
3434: PUSH
3435: LD_INT 30
3437: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_VAR 0 1
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: LD_VAR 0 4
3462: PPUSH
3463: CALL_OW 495
// end ; end ;
3467: LD_VAR 0 2
3471: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3472: LD_INT 0
3474: PPUSH
// end ;
3475: LD_VAR 0 4
3479: RET
// export function SOS_Command ( cmd ) ; begin
3480: LD_INT 0
3482: PPUSH
// end ;
3483: LD_VAR 0 2
3487: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3488: LD_VAR 0 1
3492: PUSH
3493: LD_INT 254
3495: EQUAL
3496: PUSH
3497: LD_VAR 0 2
3501: PPUSH
3502: CALL_OW 264
3506: PUSH
3507: LD_EXP 75
3511: EQUAL
3512: AND
3513: PUSH
3514: LD_VAR 0 3
3518: PPUSH
3519: CALL_OW 263
3523: PUSH
3524: LD_INT 3
3526: EQUAL
3527: AND
3528: IFFALSE 3544
// HackDestroyVehicle ( unit , selectedUnit ) ;
3530: LD_VAR 0 2
3534: PPUSH
3535: LD_VAR 0 3
3539: PPUSH
3540: CALL 5051 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3544: LD_VAR 0 1
3548: PUSH
3549: LD_INT 255
3551: EQUAL
3552: PUSH
3553: LD_VAR 0 2
3557: PPUSH
3558: CALL_OW 264
3562: PUSH
3563: LD_INT 14
3565: PUSH
3566: LD_INT 53
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: IN
3573: AND
3574: PUSH
3575: LD_VAR 0 4
3579: PPUSH
3580: LD_VAR 0 5
3584: PPUSH
3585: CALL_OW 488
3589: AND
3590: IFFALSE 3614
// CutTreeXYR ( unit , x , y , 12 ) ;
3592: LD_VAR 0 2
3596: PPUSH
3597: LD_VAR 0 4
3601: PPUSH
3602: LD_VAR 0 5
3606: PPUSH
3607: LD_INT 12
3609: PPUSH
3610: CALL 3617 0 4
// end ;
3614: PPOPN 5
3616: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
3617: LD_INT 0
3619: PPUSH
3620: PPUSH
3621: PPUSH
3622: PPUSH
3623: PPUSH
3624: PPUSH
3625: PPUSH
3626: PPUSH
3627: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
3628: LD_VAR 0 1
3632: NOT
3633: PUSH
3634: LD_VAR 0 2
3638: PPUSH
3639: LD_VAR 0 3
3643: PPUSH
3644: CALL_OW 488
3648: NOT
3649: OR
3650: PUSH
3651: LD_VAR 0 4
3655: NOT
3656: OR
3657: IFFALSE 3661
// exit ;
3659: GO 4001
// list := [ ] ;
3661: LD_ADDR_VAR 0 13
3665: PUSH
3666: EMPTY
3667: ST_TO_ADDR
// if x - r < 0 then
3668: LD_VAR 0 2
3672: PUSH
3673: LD_VAR 0 4
3677: MINUS
3678: PUSH
3679: LD_INT 0
3681: LESS
3682: IFFALSE 3694
// min_x := 0 else
3684: LD_ADDR_VAR 0 7
3688: PUSH
3689: LD_INT 0
3691: ST_TO_ADDR
3692: GO 3710
// min_x := x - r ;
3694: LD_ADDR_VAR 0 7
3698: PUSH
3699: LD_VAR 0 2
3703: PUSH
3704: LD_VAR 0 4
3708: MINUS
3709: ST_TO_ADDR
// if y - r < 0 then
3710: LD_VAR 0 3
3714: PUSH
3715: LD_VAR 0 4
3719: MINUS
3720: PUSH
3721: LD_INT 0
3723: LESS
3724: IFFALSE 3736
// min_y := 0 else
3726: LD_ADDR_VAR 0 8
3730: PUSH
3731: LD_INT 0
3733: ST_TO_ADDR
3734: GO 3752
// min_y := y - r ;
3736: LD_ADDR_VAR 0 8
3740: PUSH
3741: LD_VAR 0 3
3745: PUSH
3746: LD_VAR 0 4
3750: MINUS
3751: ST_TO_ADDR
// max_x := x + r ;
3752: LD_ADDR_VAR 0 9
3756: PUSH
3757: LD_VAR 0 2
3761: PUSH
3762: LD_VAR 0 4
3766: PLUS
3767: ST_TO_ADDR
// max_y := y + r ;
3768: LD_ADDR_VAR 0 10
3772: PUSH
3773: LD_VAR 0 3
3777: PUSH
3778: LD_VAR 0 4
3782: PLUS
3783: ST_TO_ADDR
// for _x = min_x to max_x do
3784: LD_ADDR_VAR 0 11
3788: PUSH
3789: DOUBLE
3790: LD_VAR 0 7
3794: DEC
3795: ST_TO_ADDR
3796: LD_VAR 0 9
3800: PUSH
3801: FOR_TO
3802: IFFALSE 3919
// for _y = min_y to max_y do
3804: LD_ADDR_VAR 0 12
3808: PUSH
3809: DOUBLE
3810: LD_VAR 0 8
3814: DEC
3815: ST_TO_ADDR
3816: LD_VAR 0 10
3820: PUSH
3821: FOR_TO
3822: IFFALSE 3915
// begin if not ValidHex ( _x , _y ) then
3824: LD_VAR 0 11
3828: PPUSH
3829: LD_VAR 0 12
3833: PPUSH
3834: CALL_OW 488
3838: NOT
3839: IFFALSE 3843
// continue ;
3841: GO 3821
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
3843: LD_VAR 0 11
3847: PPUSH
3848: LD_VAR 0 12
3852: PPUSH
3853: CALL_OW 351
3857: PUSH
3858: LD_VAR 0 11
3862: PPUSH
3863: LD_VAR 0 12
3867: PPUSH
3868: CALL_OW 554
3872: AND
3873: IFFALSE 3913
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
3875: LD_ADDR_VAR 0 13
3879: PUSH
3880: LD_VAR 0 13
3884: PPUSH
3885: LD_VAR 0 13
3889: PUSH
3890: LD_INT 1
3892: PLUS
3893: PPUSH
3894: LD_VAR 0 11
3898: PUSH
3899: LD_VAR 0 12
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: PPUSH
3908: CALL_OW 2
3912: ST_TO_ADDR
// end ;
3913: GO 3821
3915: POP
3916: POP
3917: GO 3801
3919: POP
3920: POP
// if not list then
3921: LD_VAR 0 13
3925: NOT
3926: IFFALSE 3930
// exit ;
3928: GO 4001
// for i in list do
3930: LD_ADDR_VAR 0 6
3934: PUSH
3935: LD_VAR 0 13
3939: PUSH
3940: FOR_IN
3941: IFFALSE 3999
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
3943: LD_VAR 0 1
3947: PPUSH
3948: LD_STRING M
3950: PUSH
3951: LD_VAR 0 6
3955: PUSH
3956: LD_INT 1
3958: ARRAY
3959: PUSH
3960: LD_VAR 0 6
3964: PUSH
3965: LD_INT 2
3967: ARRAY
3968: PUSH
3969: LD_INT 0
3971: PUSH
3972: LD_INT 0
3974: PUSH
3975: LD_INT 0
3977: PUSH
3978: LD_INT 0
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: PUSH
3990: EMPTY
3991: LIST
3992: PPUSH
3993: CALL_OW 447
3997: GO 3940
3999: POP
4000: POP
// end ;
4001: LD_VAR 0 5
4005: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
4006: LD_EXP 12
4010: NOT
4011: IFFALSE 4061
4013: GO 4015
4015: DISABLE
// begin initHack := true ;
4016: LD_ADDR_EXP 12
4020: PUSH
4021: LD_INT 1
4023: ST_TO_ADDR
// hackTanks := [ ] ;
4024: LD_ADDR_EXP 13
4028: PUSH
4029: EMPTY
4030: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4031: LD_ADDR_EXP 14
4035: PUSH
4036: EMPTY
4037: ST_TO_ADDR
// hackLimit := 3 ;
4038: LD_ADDR_EXP 15
4042: PUSH
4043: LD_INT 3
4045: ST_TO_ADDR
// hackDist := 12 ;
4046: LD_ADDR_EXP 16
4050: PUSH
4051: LD_INT 12
4053: ST_TO_ADDR
// hackCounter := [ ] ;
4054: LD_ADDR_EXP 17
4058: PUSH
4059: EMPTY
4060: ST_TO_ADDR
// end ;
4061: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
4062: LD_EXP 12
4066: PUSH
4067: LD_INT 34
4069: PUSH
4070: LD_EXP 75
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PPUSH
4079: CALL_OW 69
4083: AND
4084: IFFALSE 4339
4086: GO 4088
4088: DISABLE
4089: LD_INT 0
4091: PPUSH
4092: PPUSH
// begin enable ;
4093: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
4094: LD_ADDR_VAR 0 1
4098: PUSH
4099: LD_INT 34
4101: PUSH
4102: LD_EXP 75
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PPUSH
4111: CALL_OW 69
4115: PUSH
4116: FOR_IN
4117: IFFALSE 4337
// begin if not i in hackTanks then
4119: LD_VAR 0 1
4123: PUSH
4124: LD_EXP 13
4128: IN
4129: NOT
4130: IFFALSE 4213
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
4132: LD_ADDR_EXP 13
4136: PUSH
4137: LD_EXP 13
4141: PPUSH
4142: LD_EXP 13
4146: PUSH
4147: LD_INT 1
4149: PLUS
4150: PPUSH
4151: LD_VAR 0 1
4155: PPUSH
4156: CALL_OW 1
4160: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
4161: LD_ADDR_EXP 14
4165: PUSH
4166: LD_EXP 14
4170: PPUSH
4171: LD_EXP 14
4175: PUSH
4176: LD_INT 1
4178: PLUS
4179: PPUSH
4180: EMPTY
4181: PPUSH
4182: CALL_OW 1
4186: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
4187: LD_ADDR_EXP 17
4191: PUSH
4192: LD_EXP 17
4196: PPUSH
4197: LD_EXP 17
4201: PUSH
4202: LD_INT 1
4204: PLUS
4205: PPUSH
4206: EMPTY
4207: PPUSH
4208: CALL_OW 1
4212: ST_TO_ADDR
// end ; if not IsOk ( i ) then
4213: LD_VAR 0 1
4217: PPUSH
4218: CALL_OW 302
4222: NOT
4223: IFFALSE 4236
// begin HackUnlinkAll ( i ) ;
4225: LD_VAR 0 1
4229: PPUSH
4230: CALL 4342 0 1
// continue ;
4234: GO 4116
// end ; HackCheckCapturedStatus ( i ) ;
4236: LD_VAR 0 1
4240: PPUSH
4241: CALL 4785 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
4245: LD_ADDR_VAR 0 2
4249: PUSH
4250: LD_INT 81
4252: PUSH
4253: LD_VAR 0 1
4257: PPUSH
4258: CALL_OW 255
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PUSH
4267: LD_INT 33
4269: PUSH
4270: LD_INT 3
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PUSH
4277: LD_INT 91
4279: PUSH
4280: LD_VAR 0 1
4284: PUSH
4285: LD_EXP 16
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 50
4297: PUSH
4298: EMPTY
4299: LIST
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: PPUSH
4307: CALL_OW 69
4311: ST_TO_ADDR
// if not tmp then
4312: LD_VAR 0 2
4316: NOT
4317: IFFALSE 4321
// continue ;
4319: GO 4116
// HackLink ( i , tmp ) ;
4321: LD_VAR 0 1
4325: PPUSH
4326: LD_VAR 0 2
4330: PPUSH
4331: CALL 4478 0 2
// end ;
4335: GO 4116
4337: POP
4338: POP
// end ;
4339: PPOPN 2
4341: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
4342: LD_INT 0
4344: PPUSH
4345: PPUSH
4346: PPUSH
// if not hack in hackTanks then
4347: LD_VAR 0 1
4351: PUSH
4352: LD_EXP 13
4356: IN
4357: NOT
4358: IFFALSE 4362
// exit ;
4360: GO 4473
// index := GetElementIndex ( hackTanks , hack ) ;
4362: LD_ADDR_VAR 0 4
4366: PUSH
4367: LD_EXP 13
4371: PPUSH
4372: LD_VAR 0 1
4376: PPUSH
4377: CALL 22687 0 2
4381: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
4382: LD_EXP 14
4386: PUSH
4387: LD_VAR 0 4
4391: ARRAY
4392: IFFALSE 4473
// begin for i in hackTanksCaptured [ index ] do
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: LD_EXP 14
4403: PUSH
4404: LD_VAR 0 4
4408: ARRAY
4409: PUSH
4410: FOR_IN
4411: IFFALSE 4437
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
4413: LD_VAR 0 3
4417: PUSH
4418: LD_INT 1
4420: ARRAY
4421: PPUSH
4422: LD_VAR 0 3
4426: PUSH
4427: LD_INT 2
4429: ARRAY
4430: PPUSH
4431: CALL_OW 235
4435: GO 4410
4437: POP
4438: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
4439: LD_ADDR_EXP 14
4443: PUSH
4444: LD_EXP 14
4448: PPUSH
4449: LD_VAR 0 4
4453: PPUSH
4454: EMPTY
4455: PPUSH
4456: CALL_OW 1
4460: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
4461: LD_VAR 0 1
4465: PPUSH
4466: LD_INT 0
4468: PPUSH
4469: CALL_OW 505
// end ; end ;
4473: LD_VAR 0 2
4477: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
4478: LD_INT 0
4480: PPUSH
4481: PPUSH
4482: PPUSH
// if not hack in hackTanks or not vehicles then
4483: LD_VAR 0 1
4487: PUSH
4488: LD_EXP 13
4492: IN
4493: NOT
4494: PUSH
4495: LD_VAR 0 2
4499: NOT
4500: OR
4501: IFFALSE 4505
// exit ;
4503: GO 4780
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
4505: LD_ADDR_VAR 0 2
4509: PUSH
4510: LD_VAR 0 1
4514: PPUSH
4515: LD_VAR 0 2
4519: PPUSH
4520: LD_INT 1
4522: PPUSH
4523: LD_INT 1
4525: PPUSH
4526: CALL 23337 0 4
4530: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
4531: LD_ADDR_VAR 0 5
4535: PUSH
4536: LD_EXP 13
4540: PPUSH
4541: LD_VAR 0 1
4545: PPUSH
4546: CALL 22687 0 2
4550: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
4551: LD_EXP 14
4555: PUSH
4556: LD_VAR 0 5
4560: ARRAY
4561: PUSH
4562: LD_EXP 15
4566: LESS
4567: IFFALSE 4756
// begin for i := 1 to vehicles do
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: DOUBLE
4575: LD_INT 1
4577: DEC
4578: ST_TO_ADDR
4579: LD_VAR 0 2
4583: PUSH
4584: FOR_TO
4585: IFFALSE 4754
// begin if hackTanksCaptured [ index ] = hackLimit then
4587: LD_EXP 14
4591: PUSH
4592: LD_VAR 0 5
4596: ARRAY
4597: PUSH
4598: LD_EXP 15
4602: EQUAL
4603: IFFALSE 4607
// break ;
4605: GO 4754
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
4607: LD_ADDR_EXP 17
4611: PUSH
4612: LD_EXP 17
4616: PPUSH
4617: LD_VAR 0 5
4621: PPUSH
4622: LD_EXP 17
4626: PUSH
4627: LD_VAR 0 5
4631: ARRAY
4632: PUSH
4633: LD_INT 1
4635: PLUS
4636: PPUSH
4637: CALL_OW 1
4641: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
4642: LD_ADDR_EXP 14
4646: PUSH
4647: LD_EXP 14
4651: PPUSH
4652: LD_VAR 0 5
4656: PUSH
4657: LD_EXP 14
4661: PUSH
4662: LD_VAR 0 5
4666: ARRAY
4667: PUSH
4668: LD_INT 1
4670: PLUS
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: PPUSH
4676: LD_VAR 0 2
4680: PUSH
4681: LD_VAR 0 4
4685: ARRAY
4686: PUSH
4687: LD_VAR 0 2
4691: PUSH
4692: LD_VAR 0 4
4696: ARRAY
4697: PPUSH
4698: CALL_OW 255
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PPUSH
4707: CALL 22902 0 3
4711: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
4712: LD_VAR 0 2
4716: PUSH
4717: LD_VAR 0 4
4721: ARRAY
4722: PPUSH
4723: LD_VAR 0 1
4727: PPUSH
4728: CALL_OW 255
4732: PPUSH
4733: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
4737: LD_VAR 0 2
4741: PUSH
4742: LD_VAR 0 4
4746: ARRAY
4747: PPUSH
4748: CALL_OW 141
// end ;
4752: GO 4584
4754: POP
4755: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
4756: LD_VAR 0 1
4760: PPUSH
4761: LD_EXP 14
4765: PUSH
4766: LD_VAR 0 5
4770: ARRAY
4771: PUSH
4772: LD_INT 0
4774: PLUS
4775: PPUSH
4776: CALL_OW 505
// end ;
4780: LD_VAR 0 3
4784: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
4785: LD_INT 0
4787: PPUSH
4788: PPUSH
4789: PPUSH
4790: PPUSH
// if not hack in hackTanks then
4791: LD_VAR 0 1
4795: PUSH
4796: LD_EXP 13
4800: IN
4801: NOT
4802: IFFALSE 4806
// exit ;
4804: GO 5046
// index := GetElementIndex ( hackTanks , hack ) ;
4806: LD_ADDR_VAR 0 4
4810: PUSH
4811: LD_EXP 13
4815: PPUSH
4816: LD_VAR 0 1
4820: PPUSH
4821: CALL 22687 0 2
4825: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
4826: LD_ADDR_VAR 0 3
4830: PUSH
4831: DOUBLE
4832: LD_EXP 14
4836: PUSH
4837: LD_VAR 0 4
4841: ARRAY
4842: INC
4843: ST_TO_ADDR
4844: LD_INT 1
4846: PUSH
4847: FOR_DOWNTO
4848: IFFALSE 5020
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
4850: LD_ADDR_VAR 0 5
4854: PUSH
4855: LD_EXP 14
4859: PUSH
4860: LD_VAR 0 4
4864: ARRAY
4865: PUSH
4866: LD_VAR 0 3
4870: ARRAY
4871: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
4872: LD_VAR 0 5
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: CALL_OW 302
4885: NOT
4886: PUSH
4887: LD_VAR 0 5
4891: PUSH
4892: LD_INT 1
4894: ARRAY
4895: PPUSH
4896: CALL_OW 255
4900: PUSH
4901: LD_VAR 0 1
4905: PPUSH
4906: CALL_OW 255
4910: NONEQUAL
4911: OR
4912: IFFALSE 5018
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
4914: LD_VAR 0 5
4918: PUSH
4919: LD_INT 1
4921: ARRAY
4922: PPUSH
4923: CALL_OW 305
4927: PUSH
4928: LD_VAR 0 5
4932: PUSH
4933: LD_INT 1
4935: ARRAY
4936: PPUSH
4937: CALL_OW 255
4941: PUSH
4942: LD_VAR 0 1
4946: PPUSH
4947: CALL_OW 255
4951: EQUAL
4952: AND
4953: IFFALSE 4977
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
4955: LD_VAR 0 5
4959: PUSH
4960: LD_INT 1
4962: ARRAY
4963: PPUSH
4964: LD_VAR 0 5
4968: PUSH
4969: LD_INT 2
4971: ARRAY
4972: PPUSH
4973: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
4977: LD_ADDR_EXP 14
4981: PUSH
4982: LD_EXP 14
4986: PPUSH
4987: LD_VAR 0 4
4991: PPUSH
4992: LD_EXP 14
4996: PUSH
4997: LD_VAR 0 4
5001: ARRAY
5002: PPUSH
5003: LD_VAR 0 3
5007: PPUSH
5008: CALL_OW 3
5012: PPUSH
5013: CALL_OW 1
5017: ST_TO_ADDR
// end ; end ;
5018: GO 4847
5020: POP
5021: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5022: LD_VAR 0 1
5026: PPUSH
5027: LD_EXP 14
5031: PUSH
5032: LD_VAR 0 4
5036: ARRAY
5037: PUSH
5038: LD_INT 0
5040: PLUS
5041: PPUSH
5042: CALL_OW 505
// end ;
5046: LD_VAR 0 2
5050: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
5051: LD_INT 0
5053: PPUSH
5054: PPUSH
5055: PPUSH
5056: PPUSH
// if not hack in hackTanks then
5057: LD_VAR 0 1
5061: PUSH
5062: LD_EXP 13
5066: IN
5067: NOT
5068: IFFALSE 5072
// exit ;
5070: GO 5157
// index := GetElementIndex ( hackTanks , hack ) ;
5072: LD_ADDR_VAR 0 5
5076: PUSH
5077: LD_EXP 13
5081: PPUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: CALL 22687 0 2
5091: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
5092: LD_ADDR_VAR 0 4
5096: PUSH
5097: DOUBLE
5098: LD_INT 1
5100: DEC
5101: ST_TO_ADDR
5102: LD_EXP 14
5106: PUSH
5107: LD_VAR 0 5
5111: ARRAY
5112: PUSH
5113: FOR_TO
5114: IFFALSE 5155
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
5116: LD_EXP 14
5120: PUSH
5121: LD_VAR 0 5
5125: ARRAY
5126: PUSH
5127: LD_VAR 0 4
5131: ARRAY
5132: PUSH
5133: LD_INT 1
5135: ARRAY
5136: PUSH
5137: LD_VAR 0 2
5141: EQUAL
5142: IFFALSE 5153
// KillUnit ( vehicle ) ;
5144: LD_VAR 0 2
5148: PPUSH
5149: CALL_OW 66
5153: GO 5113
5155: POP
5156: POP
// end ; end_of_file
5157: LD_VAR 0 3
5161: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
5162: LD_VAR 0 2
5166: PUSH
5167: LD_INT 100
5169: EQUAL
5170: IFFALSE 6119
// begin if not StreamModeActive then
5172: LD_EXP 18
5176: NOT
5177: IFFALSE 5187
// StreamModeActive := true ;
5179: LD_ADDR_EXP 18
5183: PUSH
5184: LD_INT 1
5186: ST_TO_ADDR
// if p3 = 0 then
5187: LD_VAR 0 3
5191: PUSH
5192: LD_INT 0
5194: EQUAL
5195: IFFALSE 5201
// InitStreamMode ;
5197: CALL 6352 0 0
// if p3 = 1 then
5201: LD_VAR 0 3
5205: PUSH
5206: LD_INT 1
5208: EQUAL
5209: IFFALSE 5219
// sRocket := true ;
5211: LD_ADDR_EXP 23
5215: PUSH
5216: LD_INT 1
5218: ST_TO_ADDR
// if p3 = 2 then
5219: LD_VAR 0 3
5223: PUSH
5224: LD_INT 2
5226: EQUAL
5227: IFFALSE 5237
// sSpeed := true ;
5229: LD_ADDR_EXP 22
5233: PUSH
5234: LD_INT 1
5236: ST_TO_ADDR
// if p3 = 3 then
5237: LD_VAR 0 3
5241: PUSH
5242: LD_INT 3
5244: EQUAL
5245: IFFALSE 5255
// sEngine := true ;
5247: LD_ADDR_EXP 24
5251: PUSH
5252: LD_INT 1
5254: ST_TO_ADDR
// if p3 = 4 then
5255: LD_VAR 0 3
5259: PUSH
5260: LD_INT 4
5262: EQUAL
5263: IFFALSE 5273
// sSpec := true ;
5265: LD_ADDR_EXP 21
5269: PUSH
5270: LD_INT 1
5272: ST_TO_ADDR
// if p3 = 5 then
5273: LD_VAR 0 3
5277: PUSH
5278: LD_INT 5
5280: EQUAL
5281: IFFALSE 5291
// sLevel := true ;
5283: LD_ADDR_EXP 25
5287: PUSH
5288: LD_INT 1
5290: ST_TO_ADDR
// if p3 = 6 then
5291: LD_VAR 0 3
5295: PUSH
5296: LD_INT 6
5298: EQUAL
5299: IFFALSE 5309
// sArmoury := true ;
5301: LD_ADDR_EXP 26
5305: PUSH
5306: LD_INT 1
5308: ST_TO_ADDR
// if p3 = 7 then
5309: LD_VAR 0 3
5313: PUSH
5314: LD_INT 7
5316: EQUAL
5317: IFFALSE 5327
// sRadar := true ;
5319: LD_ADDR_EXP 27
5323: PUSH
5324: LD_INT 1
5326: ST_TO_ADDR
// if p3 = 8 then
5327: LD_VAR 0 3
5331: PUSH
5332: LD_INT 8
5334: EQUAL
5335: IFFALSE 5345
// sBunker := true ;
5337: LD_ADDR_EXP 28
5341: PUSH
5342: LD_INT 1
5344: ST_TO_ADDR
// if p3 = 9 then
5345: LD_VAR 0 3
5349: PUSH
5350: LD_INT 9
5352: EQUAL
5353: IFFALSE 5363
// sHack := true ;
5355: LD_ADDR_EXP 29
5359: PUSH
5360: LD_INT 1
5362: ST_TO_ADDR
// if p3 = 10 then
5363: LD_VAR 0 3
5367: PUSH
5368: LD_INT 10
5370: EQUAL
5371: IFFALSE 5381
// sFire := true ;
5373: LD_ADDR_EXP 30
5377: PUSH
5378: LD_INT 1
5380: ST_TO_ADDR
// if p3 = 11 then
5381: LD_VAR 0 3
5385: PUSH
5386: LD_INT 11
5388: EQUAL
5389: IFFALSE 5399
// sRefresh := true ;
5391: LD_ADDR_EXP 31
5395: PUSH
5396: LD_INT 1
5398: ST_TO_ADDR
// if p3 = 12 then
5399: LD_VAR 0 3
5403: PUSH
5404: LD_INT 12
5406: EQUAL
5407: IFFALSE 5417
// sExp := true ;
5409: LD_ADDR_EXP 32
5413: PUSH
5414: LD_INT 1
5416: ST_TO_ADDR
// if p3 = 13 then
5417: LD_VAR 0 3
5421: PUSH
5422: LD_INT 13
5424: EQUAL
5425: IFFALSE 5435
// sDepot := true ;
5427: LD_ADDR_EXP 33
5431: PUSH
5432: LD_INT 1
5434: ST_TO_ADDR
// if p3 = 14 then
5435: LD_VAR 0 3
5439: PUSH
5440: LD_INT 14
5442: EQUAL
5443: IFFALSE 5453
// sFlag := true ;
5445: LD_ADDR_EXP 34
5449: PUSH
5450: LD_INT 1
5452: ST_TO_ADDR
// if p3 = 15 then
5453: LD_VAR 0 3
5457: PUSH
5458: LD_INT 15
5460: EQUAL
5461: IFFALSE 5471
// sKamikadze := true ;
5463: LD_ADDR_EXP 42
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// if p3 = 16 then
5471: LD_VAR 0 3
5475: PUSH
5476: LD_INT 16
5478: EQUAL
5479: IFFALSE 5489
// sTroll := true ;
5481: LD_ADDR_EXP 43
5485: PUSH
5486: LD_INT 1
5488: ST_TO_ADDR
// if p3 = 17 then
5489: LD_VAR 0 3
5493: PUSH
5494: LD_INT 17
5496: EQUAL
5497: IFFALSE 5507
// sSlow := true ;
5499: LD_ADDR_EXP 44
5503: PUSH
5504: LD_INT 1
5506: ST_TO_ADDR
// if p3 = 18 then
5507: LD_VAR 0 3
5511: PUSH
5512: LD_INT 18
5514: EQUAL
5515: IFFALSE 5525
// sLack := true ;
5517: LD_ADDR_EXP 45
5521: PUSH
5522: LD_INT 1
5524: ST_TO_ADDR
// if p3 = 19 then
5525: LD_VAR 0 3
5529: PUSH
5530: LD_INT 19
5532: EQUAL
5533: IFFALSE 5543
// sTank := true ;
5535: LD_ADDR_EXP 47
5539: PUSH
5540: LD_INT 1
5542: ST_TO_ADDR
// if p3 = 20 then
5543: LD_VAR 0 3
5547: PUSH
5548: LD_INT 20
5550: EQUAL
5551: IFFALSE 5561
// sRemote := true ;
5553: LD_ADDR_EXP 48
5557: PUSH
5558: LD_INT 1
5560: ST_TO_ADDR
// if p3 = 21 then
5561: LD_VAR 0 3
5565: PUSH
5566: LD_INT 21
5568: EQUAL
5569: IFFALSE 5579
// sPowell := true ;
5571: LD_ADDR_EXP 49
5575: PUSH
5576: LD_INT 1
5578: ST_TO_ADDR
// if p3 = 22 then
5579: LD_VAR 0 3
5583: PUSH
5584: LD_INT 22
5586: EQUAL
5587: IFFALSE 5597
// sTeleport := true ;
5589: LD_ADDR_EXP 52
5593: PUSH
5594: LD_INT 1
5596: ST_TO_ADDR
// if p3 = 23 then
5597: LD_VAR 0 3
5601: PUSH
5602: LD_INT 23
5604: EQUAL
5605: IFFALSE 5615
// sOilTower := true ;
5607: LD_ADDR_EXP 54
5611: PUSH
5612: LD_INT 1
5614: ST_TO_ADDR
// if p3 = 24 then
5615: LD_VAR 0 3
5619: PUSH
5620: LD_INT 24
5622: EQUAL
5623: IFFALSE 5633
// sShovel := true ;
5625: LD_ADDR_EXP 55
5629: PUSH
5630: LD_INT 1
5632: ST_TO_ADDR
// if p3 = 25 then
5633: LD_VAR 0 3
5637: PUSH
5638: LD_INT 25
5640: EQUAL
5641: IFFALSE 5651
// sSheik := true ;
5643: LD_ADDR_EXP 56
5647: PUSH
5648: LD_INT 1
5650: ST_TO_ADDR
// if p3 = 26 then
5651: LD_VAR 0 3
5655: PUSH
5656: LD_INT 26
5658: EQUAL
5659: IFFALSE 5669
// sEarthquake := true ;
5661: LD_ADDR_EXP 58
5665: PUSH
5666: LD_INT 1
5668: ST_TO_ADDR
// if p3 = 27 then
5669: LD_VAR 0 3
5673: PUSH
5674: LD_INT 27
5676: EQUAL
5677: IFFALSE 5687
// sAI := true ;
5679: LD_ADDR_EXP 59
5683: PUSH
5684: LD_INT 1
5686: ST_TO_ADDR
// if p3 = 28 then
5687: LD_VAR 0 3
5691: PUSH
5692: LD_INT 28
5694: EQUAL
5695: IFFALSE 5705
// sCargo := true ;
5697: LD_ADDR_EXP 62
5701: PUSH
5702: LD_INT 1
5704: ST_TO_ADDR
// if p3 = 29 then
5705: LD_VAR 0 3
5709: PUSH
5710: LD_INT 29
5712: EQUAL
5713: IFFALSE 5723
// sDLaser := true ;
5715: LD_ADDR_EXP 63
5719: PUSH
5720: LD_INT 1
5722: ST_TO_ADDR
// if p3 = 30 then
5723: LD_VAR 0 3
5727: PUSH
5728: LD_INT 30
5730: EQUAL
5731: IFFALSE 5741
// sExchange := true ;
5733: LD_ADDR_EXP 64
5737: PUSH
5738: LD_INT 1
5740: ST_TO_ADDR
// if p3 = 31 then
5741: LD_VAR 0 3
5745: PUSH
5746: LD_INT 31
5748: EQUAL
5749: IFFALSE 5759
// sFac := true ;
5751: LD_ADDR_EXP 65
5755: PUSH
5756: LD_INT 1
5758: ST_TO_ADDR
// if p3 = 32 then
5759: LD_VAR 0 3
5763: PUSH
5764: LD_INT 32
5766: EQUAL
5767: IFFALSE 5777
// sPower := true ;
5769: LD_ADDR_EXP 66
5773: PUSH
5774: LD_INT 1
5776: ST_TO_ADDR
// if p3 = 33 then
5777: LD_VAR 0 3
5781: PUSH
5782: LD_INT 33
5784: EQUAL
5785: IFFALSE 5795
// sRandom := true ;
5787: LD_ADDR_EXP 67
5791: PUSH
5792: LD_INT 1
5794: ST_TO_ADDR
// if p3 = 34 then
5795: LD_VAR 0 3
5799: PUSH
5800: LD_INT 34
5802: EQUAL
5803: IFFALSE 5813
// sShield := true ;
5805: LD_ADDR_EXP 68
5809: PUSH
5810: LD_INT 1
5812: ST_TO_ADDR
// if p3 = 35 then
5813: LD_VAR 0 3
5817: PUSH
5818: LD_INT 35
5820: EQUAL
5821: IFFALSE 5831
// sTime := true ;
5823: LD_ADDR_EXP 69
5827: PUSH
5828: LD_INT 1
5830: ST_TO_ADDR
// if p3 = 36 then
5831: LD_VAR 0 3
5835: PUSH
5836: LD_INT 36
5838: EQUAL
5839: IFFALSE 5849
// sTools := true ;
5841: LD_ADDR_EXP 70
5845: PUSH
5846: LD_INT 1
5848: ST_TO_ADDR
// if p3 = 101 then
5849: LD_VAR 0 3
5853: PUSH
5854: LD_INT 101
5856: EQUAL
5857: IFFALSE 5867
// sSold := true ;
5859: LD_ADDR_EXP 35
5863: PUSH
5864: LD_INT 1
5866: ST_TO_ADDR
// if p3 = 102 then
5867: LD_VAR 0 3
5871: PUSH
5872: LD_INT 102
5874: EQUAL
5875: IFFALSE 5885
// sDiff := true ;
5877: LD_ADDR_EXP 36
5881: PUSH
5882: LD_INT 1
5884: ST_TO_ADDR
// if p3 = 103 then
5885: LD_VAR 0 3
5889: PUSH
5890: LD_INT 103
5892: EQUAL
5893: IFFALSE 5903
// sFog := true ;
5895: LD_ADDR_EXP 39
5899: PUSH
5900: LD_INT 1
5902: ST_TO_ADDR
// if p3 = 104 then
5903: LD_VAR 0 3
5907: PUSH
5908: LD_INT 104
5910: EQUAL
5911: IFFALSE 5921
// sReset := true ;
5913: LD_ADDR_EXP 40
5917: PUSH
5918: LD_INT 1
5920: ST_TO_ADDR
// if p3 = 105 then
5921: LD_VAR 0 3
5925: PUSH
5926: LD_INT 105
5928: EQUAL
5929: IFFALSE 5939
// sSun := true ;
5931: LD_ADDR_EXP 41
5935: PUSH
5936: LD_INT 1
5938: ST_TO_ADDR
// if p3 = 106 then
5939: LD_VAR 0 3
5943: PUSH
5944: LD_INT 106
5946: EQUAL
5947: IFFALSE 5957
// sTiger := true ;
5949: LD_ADDR_EXP 37
5953: PUSH
5954: LD_INT 1
5956: ST_TO_ADDR
// if p3 = 107 then
5957: LD_VAR 0 3
5961: PUSH
5962: LD_INT 107
5964: EQUAL
5965: IFFALSE 5975
// sBomb := true ;
5967: LD_ADDR_EXP 38
5971: PUSH
5972: LD_INT 1
5974: ST_TO_ADDR
// if p3 = 108 then
5975: LD_VAR 0 3
5979: PUSH
5980: LD_INT 108
5982: EQUAL
5983: IFFALSE 5993
// sWound := true ;
5985: LD_ADDR_EXP 46
5989: PUSH
5990: LD_INT 1
5992: ST_TO_ADDR
// if p3 = 109 then
5993: LD_VAR 0 3
5997: PUSH
5998: LD_INT 109
6000: EQUAL
6001: IFFALSE 6011
// sBetray := true ;
6003: LD_ADDR_EXP 50
6007: PUSH
6008: LD_INT 1
6010: ST_TO_ADDR
// if p3 = 110 then
6011: LD_VAR 0 3
6015: PUSH
6016: LD_INT 110
6018: EQUAL
6019: IFFALSE 6029
// sContamin := true ;
6021: LD_ADDR_EXP 51
6025: PUSH
6026: LD_INT 1
6028: ST_TO_ADDR
// if p3 = 111 then
6029: LD_VAR 0 3
6033: PUSH
6034: LD_INT 111
6036: EQUAL
6037: IFFALSE 6047
// sOil := true ;
6039: LD_ADDR_EXP 53
6043: PUSH
6044: LD_INT 1
6046: ST_TO_ADDR
// if p3 = 112 then
6047: LD_VAR 0 3
6051: PUSH
6052: LD_INT 112
6054: EQUAL
6055: IFFALSE 6065
// sStu := true ;
6057: LD_ADDR_EXP 57
6061: PUSH
6062: LD_INT 1
6064: ST_TO_ADDR
// if p3 = 113 then
6065: LD_VAR 0 3
6069: PUSH
6070: LD_INT 113
6072: EQUAL
6073: IFFALSE 6083
// sBazooka := true ;
6075: LD_ADDR_EXP 60
6079: PUSH
6080: LD_INT 1
6082: ST_TO_ADDR
// if p3 = 114 then
6083: LD_VAR 0 3
6087: PUSH
6088: LD_INT 114
6090: EQUAL
6091: IFFALSE 6101
// sMortar := true ;
6093: LD_ADDR_EXP 61
6097: PUSH
6098: LD_INT 1
6100: ST_TO_ADDR
// if p3 = 115 then
6101: LD_VAR 0 3
6105: PUSH
6106: LD_INT 115
6108: EQUAL
6109: IFFALSE 6119
// sRanger := true ;
6111: LD_ADDR_EXP 71
6115: PUSH
6116: LD_INT 1
6118: ST_TO_ADDR
// end ; if p2 = 101 then
6119: LD_VAR 0 2
6123: PUSH
6124: LD_INT 101
6126: EQUAL
6127: IFFALSE 6330
// begin case p3 of 1 :
6129: LD_VAR 0 3
6133: PUSH
6134: LD_INT 1
6136: DOUBLE
6137: EQUAL
6138: IFTRUE 6142
6140: GO 6149
6142: POP
// hHackUnlimitedResources ; 2 :
6143: CALL 16424 0 0
6147: GO 6330
6149: LD_INT 2
6151: DOUBLE
6152: EQUAL
6153: IFTRUE 6157
6155: GO 6164
6157: POP
// hHackSetLevel10 ; 3 :
6158: CALL 16557 0 0
6162: GO 6330
6164: LD_INT 3
6166: DOUBLE
6167: EQUAL
6168: IFTRUE 6172
6170: GO 6179
6172: POP
// hHackSetLevel10YourUnits ; 4 :
6173: CALL 16642 0 0
6177: GO 6330
6179: LD_INT 4
6181: DOUBLE
6182: EQUAL
6183: IFTRUE 6187
6185: GO 6209
6187: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
6188: LD_VAR 0 4
6192: PPUSH
6193: LD_VAR 0 5
6197: PPUSH
6198: LD_VAR 0 6
6202: PPUSH
6203: CALL 16732 0 3
6207: GO 6330
6209: LD_INT 5
6211: DOUBLE
6212: EQUAL
6213: IFTRUE 6217
6215: GO 6224
6217: POP
// hHackSpawnVehicle ; 6 :
6218: CALL 16793 0 0
6222: GO 6330
6224: LD_INT 6
6226: DOUBLE
6227: EQUAL
6228: IFTRUE 6232
6230: GO 6239
6232: POP
// hHackInvincible ; 7 :
6233: CALL 17339 0 0
6237: GO 6330
6239: LD_INT 7
6241: DOUBLE
6242: EQUAL
6243: IFTRUE 6247
6245: GO 6254
6247: POP
// hHackInvisible ; 8 :
6248: CALL 17450 0 0
6252: GO 6330
6254: LD_INT 8
6256: DOUBLE
6257: EQUAL
6258: IFTRUE 6262
6260: GO 6269
6262: POP
// hHackChangeYourSide ; 9 :
6263: CALL 17507 0 0
6267: GO 6330
6269: LD_INT 9
6271: DOUBLE
6272: EQUAL
6273: IFTRUE 6277
6275: GO 6284
6277: POP
// hHackChangeUnitSide ; 10 :
6278: CALL 17549 0 0
6282: GO 6330
6284: LD_INT 10
6286: DOUBLE
6287: EQUAL
6288: IFTRUE 6292
6290: GO 6299
6292: POP
// hHackFog ; 11 :
6293: CALL 17650 0 0
6297: GO 6330
6299: LD_INT 11
6301: DOUBLE
6302: EQUAL
6303: IFTRUE 6307
6305: GO 6314
6307: POP
// hHackApeman ; 12 :
6308: CALL 17665 0 0
6312: GO 6330
6314: LD_INT 12
6316: DOUBLE
6317: EQUAL
6318: IFTRUE 6322
6320: GO 6329
6322: POP
// hHackBoom ; end ;
6323: CALL 17750 0 0
6327: GO 6330
6329: POP
// end ; end ;
6330: PPOPN 6
6332: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6333: GO 6335
6335: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6336: LD_STRING initStreamRollete();
6338: PPUSH
6339: CALL_OW 559
// InitStreamMode ;
6343: CALL 6352 0 0
// DefineStreamItems ( ) ;
6347: CALL 6792 0 0
// end ;
6351: END
// function InitStreamMode ; begin
6352: LD_INT 0
6354: PPUSH
// streamModeActive := false ;
6355: LD_ADDR_EXP 18
6359: PUSH
6360: LD_INT 0
6362: ST_TO_ADDR
// normalCounter := 36 ;
6363: LD_ADDR_EXP 19
6367: PUSH
6368: LD_INT 36
6370: ST_TO_ADDR
// hardcoreCounter := 16 ;
6371: LD_ADDR_EXP 20
6375: PUSH
6376: LD_INT 16
6378: ST_TO_ADDR
// sRocket := false ;
6379: LD_ADDR_EXP 23
6383: PUSH
6384: LD_INT 0
6386: ST_TO_ADDR
// sSpeed := false ;
6387: LD_ADDR_EXP 22
6391: PUSH
6392: LD_INT 0
6394: ST_TO_ADDR
// sEngine := false ;
6395: LD_ADDR_EXP 24
6399: PUSH
6400: LD_INT 0
6402: ST_TO_ADDR
// sSpec := false ;
6403: LD_ADDR_EXP 21
6407: PUSH
6408: LD_INT 0
6410: ST_TO_ADDR
// sLevel := false ;
6411: LD_ADDR_EXP 25
6415: PUSH
6416: LD_INT 0
6418: ST_TO_ADDR
// sArmoury := false ;
6419: LD_ADDR_EXP 26
6423: PUSH
6424: LD_INT 0
6426: ST_TO_ADDR
// sRadar := false ;
6427: LD_ADDR_EXP 27
6431: PUSH
6432: LD_INT 0
6434: ST_TO_ADDR
// sBunker := false ;
6435: LD_ADDR_EXP 28
6439: PUSH
6440: LD_INT 0
6442: ST_TO_ADDR
// sHack := false ;
6443: LD_ADDR_EXP 29
6447: PUSH
6448: LD_INT 0
6450: ST_TO_ADDR
// sFire := false ;
6451: LD_ADDR_EXP 30
6455: PUSH
6456: LD_INT 0
6458: ST_TO_ADDR
// sRefresh := false ;
6459: LD_ADDR_EXP 31
6463: PUSH
6464: LD_INT 0
6466: ST_TO_ADDR
// sExp := false ;
6467: LD_ADDR_EXP 32
6471: PUSH
6472: LD_INT 0
6474: ST_TO_ADDR
// sDepot := false ;
6475: LD_ADDR_EXP 33
6479: PUSH
6480: LD_INT 0
6482: ST_TO_ADDR
// sFlag := false ;
6483: LD_ADDR_EXP 34
6487: PUSH
6488: LD_INT 0
6490: ST_TO_ADDR
// sKamikadze := false ;
6491: LD_ADDR_EXP 42
6495: PUSH
6496: LD_INT 0
6498: ST_TO_ADDR
// sTroll := false ;
6499: LD_ADDR_EXP 43
6503: PUSH
6504: LD_INT 0
6506: ST_TO_ADDR
// sSlow := false ;
6507: LD_ADDR_EXP 44
6511: PUSH
6512: LD_INT 0
6514: ST_TO_ADDR
// sLack := false ;
6515: LD_ADDR_EXP 45
6519: PUSH
6520: LD_INT 0
6522: ST_TO_ADDR
// sTank := false ;
6523: LD_ADDR_EXP 47
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// sRemote := false ;
6531: LD_ADDR_EXP 48
6535: PUSH
6536: LD_INT 0
6538: ST_TO_ADDR
// sPowell := false ;
6539: LD_ADDR_EXP 49
6543: PUSH
6544: LD_INT 0
6546: ST_TO_ADDR
// sTeleport := false ;
6547: LD_ADDR_EXP 52
6551: PUSH
6552: LD_INT 0
6554: ST_TO_ADDR
// sOilTower := false ;
6555: LD_ADDR_EXP 54
6559: PUSH
6560: LD_INT 0
6562: ST_TO_ADDR
// sShovel := false ;
6563: LD_ADDR_EXP 55
6567: PUSH
6568: LD_INT 0
6570: ST_TO_ADDR
// sSheik := false ;
6571: LD_ADDR_EXP 56
6575: PUSH
6576: LD_INT 0
6578: ST_TO_ADDR
// sEarthquake := false ;
6579: LD_ADDR_EXP 58
6583: PUSH
6584: LD_INT 0
6586: ST_TO_ADDR
// sAI := false ;
6587: LD_ADDR_EXP 59
6591: PUSH
6592: LD_INT 0
6594: ST_TO_ADDR
// sCargo := false ;
6595: LD_ADDR_EXP 62
6599: PUSH
6600: LD_INT 0
6602: ST_TO_ADDR
// sDLaser := false ;
6603: LD_ADDR_EXP 63
6607: PUSH
6608: LD_INT 0
6610: ST_TO_ADDR
// sExchange := false ;
6611: LD_ADDR_EXP 64
6615: PUSH
6616: LD_INT 0
6618: ST_TO_ADDR
// sFac := false ;
6619: LD_ADDR_EXP 65
6623: PUSH
6624: LD_INT 0
6626: ST_TO_ADDR
// sPower := false ;
6627: LD_ADDR_EXP 66
6631: PUSH
6632: LD_INT 0
6634: ST_TO_ADDR
// sRandom := false ;
6635: LD_ADDR_EXP 67
6639: PUSH
6640: LD_INT 0
6642: ST_TO_ADDR
// sShield := false ;
6643: LD_ADDR_EXP 68
6647: PUSH
6648: LD_INT 0
6650: ST_TO_ADDR
// sTime := false ;
6651: LD_ADDR_EXP 69
6655: PUSH
6656: LD_INT 0
6658: ST_TO_ADDR
// sTools := false ;
6659: LD_ADDR_EXP 70
6663: PUSH
6664: LD_INT 0
6666: ST_TO_ADDR
// sSold := false ;
6667: LD_ADDR_EXP 35
6671: PUSH
6672: LD_INT 0
6674: ST_TO_ADDR
// sDiff := false ;
6675: LD_ADDR_EXP 36
6679: PUSH
6680: LD_INT 0
6682: ST_TO_ADDR
// sFog := false ;
6683: LD_ADDR_EXP 39
6687: PUSH
6688: LD_INT 0
6690: ST_TO_ADDR
// sReset := false ;
6691: LD_ADDR_EXP 40
6695: PUSH
6696: LD_INT 0
6698: ST_TO_ADDR
// sSun := false ;
6699: LD_ADDR_EXP 41
6703: PUSH
6704: LD_INT 0
6706: ST_TO_ADDR
// sTiger := false ;
6707: LD_ADDR_EXP 37
6711: PUSH
6712: LD_INT 0
6714: ST_TO_ADDR
// sBomb := false ;
6715: LD_ADDR_EXP 38
6719: PUSH
6720: LD_INT 0
6722: ST_TO_ADDR
// sWound := false ;
6723: LD_ADDR_EXP 46
6727: PUSH
6728: LD_INT 0
6730: ST_TO_ADDR
// sBetray := false ;
6731: LD_ADDR_EXP 50
6735: PUSH
6736: LD_INT 0
6738: ST_TO_ADDR
// sContamin := false ;
6739: LD_ADDR_EXP 51
6743: PUSH
6744: LD_INT 0
6746: ST_TO_ADDR
// sOil := false ;
6747: LD_ADDR_EXP 53
6751: PUSH
6752: LD_INT 0
6754: ST_TO_ADDR
// sStu := false ;
6755: LD_ADDR_EXP 57
6759: PUSH
6760: LD_INT 0
6762: ST_TO_ADDR
// sBazooka := false ;
6763: LD_ADDR_EXP 60
6767: PUSH
6768: LD_INT 0
6770: ST_TO_ADDR
// sMortar := false ;
6771: LD_ADDR_EXP 61
6775: PUSH
6776: LD_INT 0
6778: ST_TO_ADDR
// sRanger := false ;
6779: LD_ADDR_EXP 71
6783: PUSH
6784: LD_INT 0
6786: ST_TO_ADDR
// end ;
6787: LD_VAR 0 1
6791: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
6792: LD_INT 0
6794: PPUSH
6795: PPUSH
6796: PPUSH
6797: PPUSH
6798: PPUSH
// result := [ ] ;
6799: LD_ADDR_VAR 0 1
6803: PUSH
6804: EMPTY
6805: ST_TO_ADDR
// if campaign_id = 1 then
6806: LD_OWVAR 69
6810: PUSH
6811: LD_INT 1
6813: EQUAL
6814: IFFALSE 9752
// begin case mission_number of 1 :
6816: LD_OWVAR 70
6820: PUSH
6821: LD_INT 1
6823: DOUBLE
6824: EQUAL
6825: IFTRUE 6829
6827: GO 6893
6829: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
6830: LD_ADDR_VAR 0 1
6834: PUSH
6835: LD_INT 2
6837: PUSH
6838: LD_INT 4
6840: PUSH
6841: LD_INT 11
6843: PUSH
6844: LD_INT 12
6846: PUSH
6847: LD_INT 15
6849: PUSH
6850: LD_INT 16
6852: PUSH
6853: LD_INT 22
6855: PUSH
6856: LD_INT 23
6858: PUSH
6859: LD_INT 26
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: PUSH
6873: LD_INT 101
6875: PUSH
6876: LD_INT 102
6878: PUSH
6879: LD_INT 106
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: LIST
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: ST_TO_ADDR
6891: GO 9750
6893: LD_INT 2
6895: DOUBLE
6896: EQUAL
6897: IFTRUE 6901
6899: GO 6973
6901: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6902: LD_ADDR_VAR 0 1
6906: PUSH
6907: LD_INT 2
6909: PUSH
6910: LD_INT 4
6912: PUSH
6913: LD_INT 11
6915: PUSH
6916: LD_INT 12
6918: PUSH
6919: LD_INT 15
6921: PUSH
6922: LD_INT 16
6924: PUSH
6925: LD_INT 22
6927: PUSH
6928: LD_INT 23
6930: PUSH
6931: LD_INT 26
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 101
6947: PUSH
6948: LD_INT 102
6950: PUSH
6951: LD_INT 105
6953: PUSH
6954: LD_INT 106
6956: PUSH
6957: LD_INT 108
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: ST_TO_ADDR
6971: GO 9750
6973: LD_INT 3
6975: DOUBLE
6976: EQUAL
6977: IFTRUE 6981
6979: GO 7057
6981: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6982: LD_ADDR_VAR 0 1
6986: PUSH
6987: LD_INT 2
6989: PUSH
6990: LD_INT 4
6992: PUSH
6993: LD_INT 5
6995: PUSH
6996: LD_INT 11
6998: PUSH
6999: LD_INT 12
7001: PUSH
7002: LD_INT 15
7004: PUSH
7005: LD_INT 16
7007: PUSH
7008: LD_INT 22
7010: PUSH
7011: LD_INT 26
7013: PUSH
7014: LD_INT 36
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: PUSH
7029: LD_INT 101
7031: PUSH
7032: LD_INT 102
7034: PUSH
7035: LD_INT 105
7037: PUSH
7038: LD_INT 106
7040: PUSH
7041: LD_INT 108
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: ST_TO_ADDR
7055: GO 9750
7057: LD_INT 4
7059: DOUBLE
7060: EQUAL
7061: IFTRUE 7065
7063: GO 7149
7065: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
7066: LD_ADDR_VAR 0 1
7070: PUSH
7071: LD_INT 2
7073: PUSH
7074: LD_INT 4
7076: PUSH
7077: LD_INT 5
7079: PUSH
7080: LD_INT 8
7082: PUSH
7083: LD_INT 11
7085: PUSH
7086: LD_INT 12
7088: PUSH
7089: LD_INT 15
7091: PUSH
7092: LD_INT 16
7094: PUSH
7095: LD_INT 22
7097: PUSH
7098: LD_INT 23
7100: PUSH
7101: LD_INT 26
7103: PUSH
7104: LD_INT 36
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 101
7123: PUSH
7124: LD_INT 102
7126: PUSH
7127: LD_INT 105
7129: PUSH
7130: LD_INT 106
7132: PUSH
7133: LD_INT 108
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: ST_TO_ADDR
7147: GO 9750
7149: LD_INT 5
7151: DOUBLE
7152: EQUAL
7153: IFTRUE 7157
7155: GO 7257
7157: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
7158: LD_ADDR_VAR 0 1
7162: PUSH
7163: LD_INT 2
7165: PUSH
7166: LD_INT 4
7168: PUSH
7169: LD_INT 5
7171: PUSH
7172: LD_INT 6
7174: PUSH
7175: LD_INT 8
7177: PUSH
7178: LD_INT 11
7180: PUSH
7181: LD_INT 12
7183: PUSH
7184: LD_INT 15
7186: PUSH
7187: LD_INT 16
7189: PUSH
7190: LD_INT 22
7192: PUSH
7193: LD_INT 23
7195: PUSH
7196: LD_INT 25
7198: PUSH
7199: LD_INT 26
7201: PUSH
7202: LD_INT 36
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 101
7223: PUSH
7224: LD_INT 102
7226: PUSH
7227: LD_INT 105
7229: PUSH
7230: LD_INT 106
7232: PUSH
7233: LD_INT 108
7235: PUSH
7236: LD_INT 109
7238: PUSH
7239: LD_INT 112
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: ST_TO_ADDR
7255: GO 9750
7257: LD_INT 6
7259: DOUBLE
7260: EQUAL
7261: IFTRUE 7265
7263: GO 7385
7265: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7266: LD_ADDR_VAR 0 1
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: LD_INT 4
7276: PUSH
7277: LD_INT 5
7279: PUSH
7280: LD_INT 6
7282: PUSH
7283: LD_INT 8
7285: PUSH
7286: LD_INT 11
7288: PUSH
7289: LD_INT 12
7291: PUSH
7292: LD_INT 15
7294: PUSH
7295: LD_INT 16
7297: PUSH
7298: LD_INT 20
7300: PUSH
7301: LD_INT 21
7303: PUSH
7304: LD_INT 22
7306: PUSH
7307: LD_INT 23
7309: PUSH
7310: LD_INT 25
7312: PUSH
7313: LD_INT 26
7315: PUSH
7316: LD_INT 30
7318: PUSH
7319: LD_INT 31
7321: PUSH
7322: LD_INT 32
7324: PUSH
7325: LD_INT 36
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 101
7351: PUSH
7352: LD_INT 102
7354: PUSH
7355: LD_INT 105
7357: PUSH
7358: LD_INT 106
7360: PUSH
7361: LD_INT 108
7363: PUSH
7364: LD_INT 109
7366: PUSH
7367: LD_INT 112
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: ST_TO_ADDR
7383: GO 9750
7385: LD_INT 7
7387: DOUBLE
7388: EQUAL
7389: IFTRUE 7393
7391: GO 7493
7393: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7394: LD_ADDR_VAR 0 1
7398: PUSH
7399: LD_INT 2
7401: PUSH
7402: LD_INT 4
7404: PUSH
7405: LD_INT 5
7407: PUSH
7408: LD_INT 7
7410: PUSH
7411: LD_INT 11
7413: PUSH
7414: LD_INT 12
7416: PUSH
7417: LD_INT 15
7419: PUSH
7420: LD_INT 16
7422: PUSH
7423: LD_INT 20
7425: PUSH
7426: LD_INT 21
7428: PUSH
7429: LD_INT 22
7431: PUSH
7432: LD_INT 23
7434: PUSH
7435: LD_INT 25
7437: PUSH
7438: LD_INT 26
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: PUSH
7457: LD_INT 101
7459: PUSH
7460: LD_INT 102
7462: PUSH
7463: LD_INT 103
7465: PUSH
7466: LD_INT 105
7468: PUSH
7469: LD_INT 106
7471: PUSH
7472: LD_INT 108
7474: PUSH
7475: LD_INT 112
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: ST_TO_ADDR
7491: GO 9750
7493: LD_INT 8
7495: DOUBLE
7496: EQUAL
7497: IFTRUE 7501
7499: GO 7629
7501: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
7502: LD_ADDR_VAR 0 1
7506: PUSH
7507: LD_INT 2
7509: PUSH
7510: LD_INT 4
7512: PUSH
7513: LD_INT 5
7515: PUSH
7516: LD_INT 6
7518: PUSH
7519: LD_INT 7
7521: PUSH
7522: LD_INT 8
7524: PUSH
7525: LD_INT 11
7527: PUSH
7528: LD_INT 12
7530: PUSH
7531: LD_INT 15
7533: PUSH
7534: LD_INT 16
7536: PUSH
7537: LD_INT 20
7539: PUSH
7540: LD_INT 21
7542: PUSH
7543: LD_INT 22
7545: PUSH
7546: LD_INT 23
7548: PUSH
7549: LD_INT 25
7551: PUSH
7552: LD_INT 26
7554: PUSH
7555: LD_INT 30
7557: PUSH
7558: LD_INT 31
7560: PUSH
7561: LD_INT 32
7563: PUSH
7564: LD_INT 36
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: PUSH
7589: LD_INT 101
7591: PUSH
7592: LD_INT 102
7594: PUSH
7595: LD_INT 103
7597: PUSH
7598: LD_INT 105
7600: PUSH
7601: LD_INT 106
7603: PUSH
7604: LD_INT 108
7606: PUSH
7607: LD_INT 109
7609: PUSH
7610: LD_INT 112
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: ST_TO_ADDR
7627: GO 9750
7629: LD_INT 9
7631: DOUBLE
7632: EQUAL
7633: IFTRUE 7637
7635: GO 7773
7637: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
7638: LD_ADDR_VAR 0 1
7642: PUSH
7643: LD_INT 2
7645: PUSH
7646: LD_INT 4
7648: PUSH
7649: LD_INT 5
7651: PUSH
7652: LD_INT 6
7654: PUSH
7655: LD_INT 7
7657: PUSH
7658: LD_INT 8
7660: PUSH
7661: LD_INT 11
7663: PUSH
7664: LD_INT 12
7666: PUSH
7667: LD_INT 15
7669: PUSH
7670: LD_INT 16
7672: PUSH
7673: LD_INT 20
7675: PUSH
7676: LD_INT 21
7678: PUSH
7679: LD_INT 22
7681: PUSH
7682: LD_INT 23
7684: PUSH
7685: LD_INT 25
7687: PUSH
7688: LD_INT 26
7690: PUSH
7691: LD_INT 28
7693: PUSH
7694: LD_INT 30
7696: PUSH
7697: LD_INT 31
7699: PUSH
7700: LD_INT 32
7702: PUSH
7703: LD_INT 36
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 101
7731: PUSH
7732: LD_INT 102
7734: PUSH
7735: LD_INT 103
7737: PUSH
7738: LD_INT 105
7740: PUSH
7741: LD_INT 106
7743: PUSH
7744: LD_INT 108
7746: PUSH
7747: LD_INT 109
7749: PUSH
7750: LD_INT 112
7752: PUSH
7753: LD_INT 114
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: ST_TO_ADDR
7771: GO 9750
7773: LD_INT 10
7775: DOUBLE
7776: EQUAL
7777: IFTRUE 7781
7779: GO 7965
7781: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
7782: LD_ADDR_VAR 0 1
7786: PUSH
7787: LD_INT 2
7789: PUSH
7790: LD_INT 4
7792: PUSH
7793: LD_INT 5
7795: PUSH
7796: LD_INT 6
7798: PUSH
7799: LD_INT 7
7801: PUSH
7802: LD_INT 8
7804: PUSH
7805: LD_INT 9
7807: PUSH
7808: LD_INT 10
7810: PUSH
7811: LD_INT 11
7813: PUSH
7814: LD_INT 12
7816: PUSH
7817: LD_INT 13
7819: PUSH
7820: LD_INT 14
7822: PUSH
7823: LD_INT 15
7825: PUSH
7826: LD_INT 16
7828: PUSH
7829: LD_INT 17
7831: PUSH
7832: LD_INT 18
7834: PUSH
7835: LD_INT 19
7837: PUSH
7838: LD_INT 20
7840: PUSH
7841: LD_INT 21
7843: PUSH
7844: LD_INT 22
7846: PUSH
7847: LD_INT 23
7849: PUSH
7850: LD_INT 24
7852: PUSH
7853: LD_INT 25
7855: PUSH
7856: LD_INT 26
7858: PUSH
7859: LD_INT 28
7861: PUSH
7862: LD_INT 30
7864: PUSH
7865: LD_INT 31
7867: PUSH
7868: LD_INT 32
7870: PUSH
7871: LD_INT 36
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 101
7907: PUSH
7908: LD_INT 102
7910: PUSH
7911: LD_INT 103
7913: PUSH
7914: LD_INT 104
7916: PUSH
7917: LD_INT 105
7919: PUSH
7920: LD_INT 106
7922: PUSH
7923: LD_INT 107
7925: PUSH
7926: LD_INT 108
7928: PUSH
7929: LD_INT 109
7931: PUSH
7932: LD_INT 110
7934: PUSH
7935: LD_INT 111
7937: PUSH
7938: LD_INT 112
7940: PUSH
7941: LD_INT 114
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: ST_TO_ADDR
7963: GO 9750
7965: LD_INT 11
7967: DOUBLE
7968: EQUAL
7969: IFTRUE 7973
7971: GO 8165
7973: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7974: LD_ADDR_VAR 0 1
7978: PUSH
7979: LD_INT 2
7981: PUSH
7982: LD_INT 3
7984: PUSH
7985: LD_INT 4
7987: PUSH
7988: LD_INT 5
7990: PUSH
7991: LD_INT 6
7993: PUSH
7994: LD_INT 7
7996: PUSH
7997: LD_INT 8
7999: PUSH
8000: LD_INT 9
8002: PUSH
8003: LD_INT 10
8005: PUSH
8006: LD_INT 11
8008: PUSH
8009: LD_INT 12
8011: PUSH
8012: LD_INT 13
8014: PUSH
8015: LD_INT 14
8017: PUSH
8018: LD_INT 15
8020: PUSH
8021: LD_INT 16
8023: PUSH
8024: LD_INT 17
8026: PUSH
8027: LD_INT 18
8029: PUSH
8030: LD_INT 19
8032: PUSH
8033: LD_INT 20
8035: PUSH
8036: LD_INT 21
8038: PUSH
8039: LD_INT 22
8041: PUSH
8042: LD_INT 23
8044: PUSH
8045: LD_INT 24
8047: PUSH
8048: LD_INT 25
8050: PUSH
8051: LD_INT 26
8053: PUSH
8054: LD_INT 28
8056: PUSH
8057: LD_INT 30
8059: PUSH
8060: LD_INT 31
8062: PUSH
8063: LD_INT 32
8065: PUSH
8066: LD_INT 34
8068: PUSH
8069: LD_INT 36
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: PUSH
8105: LD_INT 101
8107: PUSH
8108: LD_INT 102
8110: PUSH
8111: LD_INT 103
8113: PUSH
8114: LD_INT 104
8116: PUSH
8117: LD_INT 105
8119: PUSH
8120: LD_INT 106
8122: PUSH
8123: LD_INT 107
8125: PUSH
8126: LD_INT 108
8128: PUSH
8129: LD_INT 109
8131: PUSH
8132: LD_INT 110
8134: PUSH
8135: LD_INT 111
8137: PUSH
8138: LD_INT 112
8140: PUSH
8141: LD_INT 114
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: ST_TO_ADDR
8163: GO 9750
8165: LD_INT 12
8167: DOUBLE
8168: EQUAL
8169: IFTRUE 8173
8171: GO 8381
8173: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
8174: LD_ADDR_VAR 0 1
8178: PUSH
8179: LD_INT 1
8181: PUSH
8182: LD_INT 2
8184: PUSH
8185: LD_INT 3
8187: PUSH
8188: LD_INT 4
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: LD_INT 6
8196: PUSH
8197: LD_INT 7
8199: PUSH
8200: LD_INT 8
8202: PUSH
8203: LD_INT 9
8205: PUSH
8206: LD_INT 10
8208: PUSH
8209: LD_INT 11
8211: PUSH
8212: LD_INT 12
8214: PUSH
8215: LD_INT 13
8217: PUSH
8218: LD_INT 14
8220: PUSH
8221: LD_INT 15
8223: PUSH
8224: LD_INT 16
8226: PUSH
8227: LD_INT 17
8229: PUSH
8230: LD_INT 18
8232: PUSH
8233: LD_INT 19
8235: PUSH
8236: LD_INT 20
8238: PUSH
8239: LD_INT 21
8241: PUSH
8242: LD_INT 22
8244: PUSH
8245: LD_INT 23
8247: PUSH
8248: LD_INT 24
8250: PUSH
8251: LD_INT 25
8253: PUSH
8254: LD_INT 26
8256: PUSH
8257: LD_INT 27
8259: PUSH
8260: LD_INT 28
8262: PUSH
8263: LD_INT 30
8265: PUSH
8266: LD_INT 31
8268: PUSH
8269: LD_INT 32
8271: PUSH
8272: LD_INT 33
8274: PUSH
8275: LD_INT 34
8277: PUSH
8278: LD_INT 36
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: PUSH
8317: LD_INT 101
8319: PUSH
8320: LD_INT 102
8322: PUSH
8323: LD_INT 103
8325: PUSH
8326: LD_INT 104
8328: PUSH
8329: LD_INT 105
8331: PUSH
8332: LD_INT 106
8334: PUSH
8335: LD_INT 107
8337: PUSH
8338: LD_INT 108
8340: PUSH
8341: LD_INT 109
8343: PUSH
8344: LD_INT 110
8346: PUSH
8347: LD_INT 111
8349: PUSH
8350: LD_INT 112
8352: PUSH
8353: LD_INT 113
8355: PUSH
8356: LD_INT 114
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: ST_TO_ADDR
8379: GO 9750
8381: LD_INT 13
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8585
8389: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8390: LD_ADDR_VAR 0 1
8394: PUSH
8395: LD_INT 1
8397: PUSH
8398: LD_INT 2
8400: PUSH
8401: LD_INT 3
8403: PUSH
8404: LD_INT 4
8406: PUSH
8407: LD_INT 5
8409: PUSH
8410: LD_INT 8
8412: PUSH
8413: LD_INT 9
8415: PUSH
8416: LD_INT 10
8418: PUSH
8419: LD_INT 11
8421: PUSH
8422: LD_INT 12
8424: PUSH
8425: LD_INT 14
8427: PUSH
8428: LD_INT 15
8430: PUSH
8431: LD_INT 16
8433: PUSH
8434: LD_INT 17
8436: PUSH
8437: LD_INT 18
8439: PUSH
8440: LD_INT 19
8442: PUSH
8443: LD_INT 20
8445: PUSH
8446: LD_INT 21
8448: PUSH
8449: LD_INT 22
8451: PUSH
8452: LD_INT 23
8454: PUSH
8455: LD_INT 24
8457: PUSH
8458: LD_INT 25
8460: PUSH
8461: LD_INT 26
8463: PUSH
8464: LD_INT 27
8466: PUSH
8467: LD_INT 28
8469: PUSH
8470: LD_INT 30
8472: PUSH
8473: LD_INT 31
8475: PUSH
8476: LD_INT 32
8478: PUSH
8479: LD_INT 33
8481: PUSH
8482: LD_INT 34
8484: PUSH
8485: LD_INT 36
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: PUSH
8521: LD_INT 101
8523: PUSH
8524: LD_INT 102
8526: PUSH
8527: LD_INT 103
8529: PUSH
8530: LD_INT 104
8532: PUSH
8533: LD_INT 105
8535: PUSH
8536: LD_INT 106
8538: PUSH
8539: LD_INT 107
8541: PUSH
8542: LD_INT 108
8544: PUSH
8545: LD_INT 109
8547: PUSH
8548: LD_INT 110
8550: PUSH
8551: LD_INT 111
8553: PUSH
8554: LD_INT 112
8556: PUSH
8557: LD_INT 113
8559: PUSH
8560: LD_INT 114
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: ST_TO_ADDR
8583: GO 9750
8585: LD_INT 14
8587: DOUBLE
8588: EQUAL
8589: IFTRUE 8593
8591: GO 8805
8593: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
8594: LD_ADDR_VAR 0 1
8598: PUSH
8599: LD_INT 1
8601: PUSH
8602: LD_INT 2
8604: PUSH
8605: LD_INT 3
8607: PUSH
8608: LD_INT 4
8610: PUSH
8611: LD_INT 5
8613: PUSH
8614: LD_INT 6
8616: PUSH
8617: LD_INT 7
8619: PUSH
8620: LD_INT 8
8622: PUSH
8623: LD_INT 9
8625: PUSH
8626: LD_INT 10
8628: PUSH
8629: LD_INT 11
8631: PUSH
8632: LD_INT 12
8634: PUSH
8635: LD_INT 13
8637: PUSH
8638: LD_INT 14
8640: PUSH
8641: LD_INT 15
8643: PUSH
8644: LD_INT 16
8646: PUSH
8647: LD_INT 17
8649: PUSH
8650: LD_INT 18
8652: PUSH
8653: LD_INT 19
8655: PUSH
8656: LD_INT 20
8658: PUSH
8659: LD_INT 21
8661: PUSH
8662: LD_INT 22
8664: PUSH
8665: LD_INT 23
8667: PUSH
8668: LD_INT 24
8670: PUSH
8671: LD_INT 25
8673: PUSH
8674: LD_INT 26
8676: PUSH
8677: LD_INT 27
8679: PUSH
8680: LD_INT 28
8682: PUSH
8683: LD_INT 29
8685: PUSH
8686: LD_INT 30
8688: PUSH
8689: LD_INT 31
8691: PUSH
8692: LD_INT 32
8694: PUSH
8695: LD_INT 33
8697: PUSH
8698: LD_INT 34
8700: PUSH
8701: LD_INT 36
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: PUSH
8741: LD_INT 101
8743: PUSH
8744: LD_INT 102
8746: PUSH
8747: LD_INT 103
8749: PUSH
8750: LD_INT 104
8752: PUSH
8753: LD_INT 105
8755: PUSH
8756: LD_INT 106
8758: PUSH
8759: LD_INT 107
8761: PUSH
8762: LD_INT 108
8764: PUSH
8765: LD_INT 109
8767: PUSH
8768: LD_INT 110
8770: PUSH
8771: LD_INT 111
8773: PUSH
8774: LD_INT 112
8776: PUSH
8777: LD_INT 113
8779: PUSH
8780: LD_INT 114
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: ST_TO_ADDR
8803: GO 9750
8805: LD_INT 15
8807: DOUBLE
8808: EQUAL
8809: IFTRUE 8813
8811: GO 9025
8813: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
8814: LD_ADDR_VAR 0 1
8818: PUSH
8819: LD_INT 1
8821: PUSH
8822: LD_INT 2
8824: PUSH
8825: LD_INT 3
8827: PUSH
8828: LD_INT 4
8830: PUSH
8831: LD_INT 5
8833: PUSH
8834: LD_INT 6
8836: PUSH
8837: LD_INT 7
8839: PUSH
8840: LD_INT 8
8842: PUSH
8843: LD_INT 9
8845: PUSH
8846: LD_INT 10
8848: PUSH
8849: LD_INT 11
8851: PUSH
8852: LD_INT 12
8854: PUSH
8855: LD_INT 13
8857: PUSH
8858: LD_INT 14
8860: PUSH
8861: LD_INT 15
8863: PUSH
8864: LD_INT 16
8866: PUSH
8867: LD_INT 17
8869: PUSH
8870: LD_INT 18
8872: PUSH
8873: LD_INT 19
8875: PUSH
8876: LD_INT 20
8878: PUSH
8879: LD_INT 21
8881: PUSH
8882: LD_INT 22
8884: PUSH
8885: LD_INT 23
8887: PUSH
8888: LD_INT 24
8890: PUSH
8891: LD_INT 25
8893: PUSH
8894: LD_INT 26
8896: PUSH
8897: LD_INT 27
8899: PUSH
8900: LD_INT 28
8902: PUSH
8903: LD_INT 29
8905: PUSH
8906: LD_INT 30
8908: PUSH
8909: LD_INT 31
8911: PUSH
8912: LD_INT 32
8914: PUSH
8915: LD_INT 33
8917: PUSH
8918: LD_INT 34
8920: PUSH
8921: LD_INT 36
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 101
8963: PUSH
8964: LD_INT 102
8966: PUSH
8967: LD_INT 103
8969: PUSH
8970: LD_INT 104
8972: PUSH
8973: LD_INT 105
8975: PUSH
8976: LD_INT 106
8978: PUSH
8979: LD_INT 107
8981: PUSH
8982: LD_INT 108
8984: PUSH
8985: LD_INT 109
8987: PUSH
8988: LD_INT 110
8990: PUSH
8991: LD_INT 111
8993: PUSH
8994: LD_INT 112
8996: PUSH
8997: LD_INT 113
8999: PUSH
9000: LD_INT 114
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: ST_TO_ADDR
9023: GO 9750
9025: LD_INT 16
9027: DOUBLE
9028: EQUAL
9029: IFTRUE 9033
9031: GO 9157
9033: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
9034: LD_ADDR_VAR 0 1
9038: PUSH
9039: LD_INT 2
9041: PUSH
9042: LD_INT 4
9044: PUSH
9045: LD_INT 5
9047: PUSH
9048: LD_INT 7
9050: PUSH
9051: LD_INT 11
9053: PUSH
9054: LD_INT 12
9056: PUSH
9057: LD_INT 15
9059: PUSH
9060: LD_INT 16
9062: PUSH
9063: LD_INT 20
9065: PUSH
9066: LD_INT 21
9068: PUSH
9069: LD_INT 22
9071: PUSH
9072: LD_INT 23
9074: PUSH
9075: LD_INT 25
9077: PUSH
9078: LD_INT 26
9080: PUSH
9081: LD_INT 30
9083: PUSH
9084: LD_INT 31
9086: PUSH
9087: LD_INT 32
9089: PUSH
9090: LD_INT 33
9092: PUSH
9093: LD_INT 34
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 101
9119: PUSH
9120: LD_INT 102
9122: PUSH
9123: LD_INT 103
9125: PUSH
9126: LD_INT 106
9128: PUSH
9129: LD_INT 108
9131: PUSH
9132: LD_INT 112
9134: PUSH
9135: LD_INT 113
9137: PUSH
9138: LD_INT 114
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: ST_TO_ADDR
9155: GO 9750
9157: LD_INT 17
9159: DOUBLE
9160: EQUAL
9161: IFTRUE 9165
9163: GO 9377
9165: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
9166: LD_ADDR_VAR 0 1
9170: PUSH
9171: LD_INT 1
9173: PUSH
9174: LD_INT 2
9176: PUSH
9177: LD_INT 3
9179: PUSH
9180: LD_INT 4
9182: PUSH
9183: LD_INT 5
9185: PUSH
9186: LD_INT 6
9188: PUSH
9189: LD_INT 7
9191: PUSH
9192: LD_INT 8
9194: PUSH
9195: LD_INT 9
9197: PUSH
9198: LD_INT 10
9200: PUSH
9201: LD_INT 11
9203: PUSH
9204: LD_INT 12
9206: PUSH
9207: LD_INT 13
9209: PUSH
9210: LD_INT 14
9212: PUSH
9213: LD_INT 15
9215: PUSH
9216: LD_INT 16
9218: PUSH
9219: LD_INT 17
9221: PUSH
9222: LD_INT 18
9224: PUSH
9225: LD_INT 19
9227: PUSH
9228: LD_INT 20
9230: PUSH
9231: LD_INT 21
9233: PUSH
9234: LD_INT 22
9236: PUSH
9237: LD_INT 23
9239: PUSH
9240: LD_INT 24
9242: PUSH
9243: LD_INT 25
9245: PUSH
9246: LD_INT 26
9248: PUSH
9249: LD_INT 27
9251: PUSH
9252: LD_INT 28
9254: PUSH
9255: LD_INT 29
9257: PUSH
9258: LD_INT 30
9260: PUSH
9261: LD_INT 31
9263: PUSH
9264: LD_INT 32
9266: PUSH
9267: LD_INT 33
9269: PUSH
9270: LD_INT 34
9272: PUSH
9273: LD_INT 36
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 101
9315: PUSH
9316: LD_INT 102
9318: PUSH
9319: LD_INT 103
9321: PUSH
9322: LD_INT 104
9324: PUSH
9325: LD_INT 105
9327: PUSH
9328: LD_INT 106
9330: PUSH
9331: LD_INT 107
9333: PUSH
9334: LD_INT 108
9336: PUSH
9337: LD_INT 109
9339: PUSH
9340: LD_INT 110
9342: PUSH
9343: LD_INT 111
9345: PUSH
9346: LD_INT 112
9348: PUSH
9349: LD_INT 113
9351: PUSH
9352: LD_INT 114
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: PUSH
9371: EMPTY
9372: LIST
9373: LIST
9374: ST_TO_ADDR
9375: GO 9750
9377: LD_INT 18
9379: DOUBLE
9380: EQUAL
9381: IFTRUE 9385
9383: GO 9521
9385: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9386: LD_ADDR_VAR 0 1
9390: PUSH
9391: LD_INT 2
9393: PUSH
9394: LD_INT 4
9396: PUSH
9397: LD_INT 5
9399: PUSH
9400: LD_INT 7
9402: PUSH
9403: LD_INT 11
9405: PUSH
9406: LD_INT 12
9408: PUSH
9409: LD_INT 15
9411: PUSH
9412: LD_INT 16
9414: PUSH
9415: LD_INT 20
9417: PUSH
9418: LD_INT 21
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_INT 23
9426: PUSH
9427: LD_INT 25
9429: PUSH
9430: LD_INT 26
9432: PUSH
9433: LD_INT 30
9435: PUSH
9436: LD_INT 31
9438: PUSH
9439: LD_INT 32
9441: PUSH
9442: LD_INT 33
9444: PUSH
9445: LD_INT 34
9447: PUSH
9448: LD_INT 35
9450: PUSH
9451: LD_INT 36
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 101
9479: PUSH
9480: LD_INT 102
9482: PUSH
9483: LD_INT 103
9485: PUSH
9486: LD_INT 106
9488: PUSH
9489: LD_INT 108
9491: PUSH
9492: LD_INT 112
9494: PUSH
9495: LD_INT 113
9497: PUSH
9498: LD_INT 114
9500: PUSH
9501: LD_INT 115
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: ST_TO_ADDR
9519: GO 9750
9521: LD_INT 19
9523: DOUBLE
9524: EQUAL
9525: IFTRUE 9529
9527: GO 9749
9529: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
9530: LD_ADDR_VAR 0 1
9534: PUSH
9535: LD_INT 1
9537: PUSH
9538: LD_INT 2
9540: PUSH
9541: LD_INT 3
9543: PUSH
9544: LD_INT 4
9546: PUSH
9547: LD_INT 5
9549: PUSH
9550: LD_INT 6
9552: PUSH
9553: LD_INT 7
9555: PUSH
9556: LD_INT 8
9558: PUSH
9559: LD_INT 9
9561: PUSH
9562: LD_INT 10
9564: PUSH
9565: LD_INT 11
9567: PUSH
9568: LD_INT 12
9570: PUSH
9571: LD_INT 13
9573: PUSH
9574: LD_INT 14
9576: PUSH
9577: LD_INT 15
9579: PUSH
9580: LD_INT 16
9582: PUSH
9583: LD_INT 17
9585: PUSH
9586: LD_INT 18
9588: PUSH
9589: LD_INT 19
9591: PUSH
9592: LD_INT 20
9594: PUSH
9595: LD_INT 21
9597: PUSH
9598: LD_INT 22
9600: PUSH
9601: LD_INT 23
9603: PUSH
9604: LD_INT 24
9606: PUSH
9607: LD_INT 25
9609: PUSH
9610: LD_INT 26
9612: PUSH
9613: LD_INT 27
9615: PUSH
9616: LD_INT 28
9618: PUSH
9619: LD_INT 29
9621: PUSH
9622: LD_INT 30
9624: PUSH
9625: LD_INT 31
9627: PUSH
9628: LD_INT 32
9630: PUSH
9631: LD_INT 33
9633: PUSH
9634: LD_INT 34
9636: PUSH
9637: LD_INT 35
9639: PUSH
9640: LD_INT 36
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 101
9683: PUSH
9684: LD_INT 102
9686: PUSH
9687: LD_INT 103
9689: PUSH
9690: LD_INT 104
9692: PUSH
9693: LD_INT 105
9695: PUSH
9696: LD_INT 106
9698: PUSH
9699: LD_INT 107
9701: PUSH
9702: LD_INT 108
9704: PUSH
9705: LD_INT 109
9707: PUSH
9708: LD_INT 110
9710: PUSH
9711: LD_INT 111
9713: PUSH
9714: LD_INT 112
9716: PUSH
9717: LD_INT 113
9719: PUSH
9720: LD_INT 114
9722: PUSH
9723: LD_INT 115
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: ST_TO_ADDR
9747: GO 9750
9749: POP
// end else
9750: GO 9969
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
9752: LD_ADDR_VAR 0 1
9756: PUSH
9757: LD_INT 1
9759: PUSH
9760: LD_INT 2
9762: PUSH
9763: LD_INT 3
9765: PUSH
9766: LD_INT 4
9768: PUSH
9769: LD_INT 5
9771: PUSH
9772: LD_INT 6
9774: PUSH
9775: LD_INT 7
9777: PUSH
9778: LD_INT 8
9780: PUSH
9781: LD_INT 9
9783: PUSH
9784: LD_INT 10
9786: PUSH
9787: LD_INT 11
9789: PUSH
9790: LD_INT 12
9792: PUSH
9793: LD_INT 13
9795: PUSH
9796: LD_INT 14
9798: PUSH
9799: LD_INT 15
9801: PUSH
9802: LD_INT 16
9804: PUSH
9805: LD_INT 17
9807: PUSH
9808: LD_INT 18
9810: PUSH
9811: LD_INT 19
9813: PUSH
9814: LD_INT 20
9816: PUSH
9817: LD_INT 21
9819: PUSH
9820: LD_INT 22
9822: PUSH
9823: LD_INT 23
9825: PUSH
9826: LD_INT 24
9828: PUSH
9829: LD_INT 25
9831: PUSH
9832: LD_INT 26
9834: PUSH
9835: LD_INT 27
9837: PUSH
9838: LD_INT 28
9840: PUSH
9841: LD_INT 29
9843: PUSH
9844: LD_INT 30
9846: PUSH
9847: LD_INT 31
9849: PUSH
9850: LD_INT 32
9852: PUSH
9853: LD_INT 33
9855: PUSH
9856: LD_INT 34
9858: PUSH
9859: LD_INT 35
9861: PUSH
9862: LD_INT 36
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 101
9905: PUSH
9906: LD_INT 102
9908: PUSH
9909: LD_INT 103
9911: PUSH
9912: LD_INT 104
9914: PUSH
9915: LD_INT 105
9917: PUSH
9918: LD_INT 106
9920: PUSH
9921: LD_INT 107
9923: PUSH
9924: LD_INT 108
9926: PUSH
9927: LD_INT 109
9929: PUSH
9930: LD_INT 110
9932: PUSH
9933: LD_INT 111
9935: PUSH
9936: LD_INT 112
9938: PUSH
9939: LD_INT 113
9941: PUSH
9942: LD_INT 114
9944: PUSH
9945: LD_INT 115
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: ST_TO_ADDR
// if result then
9969: LD_VAR 0 1
9973: IFFALSE 10262
// begin normal :=  ;
9975: LD_ADDR_VAR 0 3
9979: PUSH
9980: LD_STRING 
9982: ST_TO_ADDR
// hardcore :=  ;
9983: LD_ADDR_VAR 0 4
9987: PUSH
9988: LD_STRING 
9990: ST_TO_ADDR
// for i = 1 to normalCounter do
9991: LD_ADDR_VAR 0 5
9995: PUSH
9996: DOUBLE
9997: LD_INT 1
9999: DEC
10000: ST_TO_ADDR
10001: LD_EXP 19
10005: PUSH
10006: FOR_TO
10007: IFFALSE 10108
// begin tmp := 0 ;
10009: LD_ADDR_VAR 0 2
10013: PUSH
10014: LD_STRING 0
10016: ST_TO_ADDR
// if result [ 1 ] then
10017: LD_VAR 0 1
10021: PUSH
10022: LD_INT 1
10024: ARRAY
10025: IFFALSE 10090
// if result [ 1 ] [ 1 ] = i then
10027: LD_VAR 0 1
10031: PUSH
10032: LD_INT 1
10034: ARRAY
10035: PUSH
10036: LD_INT 1
10038: ARRAY
10039: PUSH
10040: LD_VAR 0 5
10044: EQUAL
10045: IFFALSE 10090
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10047: LD_ADDR_VAR 0 1
10051: PUSH
10052: LD_VAR 0 1
10056: PPUSH
10057: LD_INT 1
10059: PPUSH
10060: LD_VAR 0 1
10064: PUSH
10065: LD_INT 1
10067: ARRAY
10068: PPUSH
10069: LD_INT 1
10071: PPUSH
10072: CALL_OW 3
10076: PPUSH
10077: CALL_OW 1
10081: ST_TO_ADDR
// tmp := 1 ;
10082: LD_ADDR_VAR 0 2
10086: PUSH
10087: LD_STRING 1
10089: ST_TO_ADDR
// end ; normal := normal & tmp ;
10090: LD_ADDR_VAR 0 3
10094: PUSH
10095: LD_VAR 0 3
10099: PUSH
10100: LD_VAR 0 2
10104: STR
10105: ST_TO_ADDR
// end ;
10106: GO 10006
10108: POP
10109: POP
// for i = 1 to hardcoreCounter do
10110: LD_ADDR_VAR 0 5
10114: PUSH
10115: DOUBLE
10116: LD_INT 1
10118: DEC
10119: ST_TO_ADDR
10120: LD_EXP 20
10124: PUSH
10125: FOR_TO
10126: IFFALSE 10231
// begin tmp := 0 ;
10128: LD_ADDR_VAR 0 2
10132: PUSH
10133: LD_STRING 0
10135: ST_TO_ADDR
// if result [ 2 ] then
10136: LD_VAR 0 1
10140: PUSH
10141: LD_INT 2
10143: ARRAY
10144: IFFALSE 10213
// if result [ 2 ] [ 1 ] = 100 + i then
10146: LD_VAR 0 1
10150: PUSH
10151: LD_INT 2
10153: ARRAY
10154: PUSH
10155: LD_INT 1
10157: ARRAY
10158: PUSH
10159: LD_INT 100
10161: PUSH
10162: LD_VAR 0 5
10166: PLUS
10167: EQUAL
10168: IFFALSE 10213
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10170: LD_ADDR_VAR 0 1
10174: PUSH
10175: LD_VAR 0 1
10179: PPUSH
10180: LD_INT 2
10182: PPUSH
10183: LD_VAR 0 1
10187: PUSH
10188: LD_INT 2
10190: ARRAY
10191: PPUSH
10192: LD_INT 1
10194: PPUSH
10195: CALL_OW 3
10199: PPUSH
10200: CALL_OW 1
10204: ST_TO_ADDR
// tmp := 1 ;
10205: LD_ADDR_VAR 0 2
10209: PUSH
10210: LD_STRING 1
10212: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10213: LD_ADDR_VAR 0 4
10217: PUSH
10218: LD_VAR 0 4
10222: PUSH
10223: LD_VAR 0 2
10227: STR
10228: ST_TO_ADDR
// end ;
10229: GO 10125
10231: POP
10232: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10233: LD_STRING getStreamItemsFromMission("
10235: PUSH
10236: LD_VAR 0 3
10240: STR
10241: PUSH
10242: LD_STRING ","
10244: STR
10245: PUSH
10246: LD_VAR 0 4
10250: STR
10251: PUSH
10252: LD_STRING ")
10254: STR
10255: PPUSH
10256: CALL_OW 559
// end else
10260: GO 10269
// ToLua ( getStreamItemsFromMission("","") ) ;
10262: LD_STRING getStreamItemsFromMission("","")
10264: PPUSH
10265: CALL_OW 559
// end ;
10269: LD_VAR 0 1
10273: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10274: LD_EXP 18
10278: PUSH
10279: LD_EXP 23
10283: AND
10284: IFFALSE 10408
10286: GO 10288
10288: DISABLE
10289: LD_INT 0
10291: PPUSH
10292: PPUSH
// begin enable ;
10293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10294: LD_ADDR_VAR 0 2
10298: PUSH
10299: LD_INT 22
10301: PUSH
10302: LD_OWVAR 2
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 2
10313: PUSH
10314: LD_INT 34
10316: PUSH
10317: LD_INT 7
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 34
10326: PUSH
10327: LD_INT 45
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 34
10336: PUSH
10337: LD_INT 28
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 34
10346: PUSH
10347: LD_INT 47
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PPUSH
10365: CALL_OW 69
10369: ST_TO_ADDR
// if not tmp then
10370: LD_VAR 0 2
10374: NOT
10375: IFFALSE 10379
// exit ;
10377: GO 10408
// for i in tmp do
10379: LD_ADDR_VAR 0 1
10383: PUSH
10384: LD_VAR 0 2
10388: PUSH
10389: FOR_IN
10390: IFFALSE 10406
// begin SetLives ( i , 0 ) ;
10392: LD_VAR 0 1
10396: PPUSH
10397: LD_INT 0
10399: PPUSH
10400: CALL_OW 234
// end ;
10404: GO 10389
10406: POP
10407: POP
// end ;
10408: PPOPN 2
10410: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10411: LD_EXP 18
10415: PUSH
10416: LD_EXP 24
10420: AND
10421: IFFALSE 10505
10423: GO 10425
10425: DISABLE
10426: LD_INT 0
10428: PPUSH
10429: PPUSH
// begin enable ;
10430: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10431: LD_ADDR_VAR 0 2
10435: PUSH
10436: LD_INT 22
10438: PUSH
10439: LD_OWVAR 2
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 32
10450: PUSH
10451: LD_INT 3
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PPUSH
10462: CALL_OW 69
10466: ST_TO_ADDR
// if not tmp then
10467: LD_VAR 0 2
10471: NOT
10472: IFFALSE 10476
// exit ;
10474: GO 10505
// for i in tmp do
10476: LD_ADDR_VAR 0 1
10480: PUSH
10481: LD_VAR 0 2
10485: PUSH
10486: FOR_IN
10487: IFFALSE 10503
// begin SetLives ( i , 0 ) ;
10489: LD_VAR 0 1
10493: PPUSH
10494: LD_INT 0
10496: PPUSH
10497: CALL_OW 234
// end ;
10501: GO 10486
10503: POP
10504: POP
// end ;
10505: PPOPN 2
10507: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10508: LD_EXP 18
10512: PUSH
10513: LD_EXP 21
10517: AND
10518: IFFALSE 10611
10520: GO 10522
10522: DISABLE
10523: LD_INT 0
10525: PPUSH
// begin enable ;
10526: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10527: LD_ADDR_VAR 0 1
10531: PUSH
10532: LD_INT 22
10534: PUSH
10535: LD_OWVAR 2
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 2
10546: PUSH
10547: LD_INT 25
10549: PUSH
10550: LD_INT 5
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 25
10559: PUSH
10560: LD_INT 9
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 25
10569: PUSH
10570: LD_INT 8
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: PPUSH
10587: CALL_OW 69
10591: PUSH
10592: FOR_IN
10593: IFFALSE 10609
// begin SetClass ( i , 1 ) ;
10595: LD_VAR 0 1
10599: PPUSH
10600: LD_INT 1
10602: PPUSH
10603: CALL_OW 336
// end ;
10607: GO 10592
10609: POP
10610: POP
// end ;
10611: PPOPN 1
10613: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10614: LD_EXP 18
10618: PUSH
10619: LD_EXP 22
10623: AND
10624: PUSH
10625: LD_OWVAR 65
10629: PUSH
10630: LD_INT 7
10632: LESS
10633: AND
10634: IFFALSE 10648
10636: GO 10638
10638: DISABLE
// begin enable ;
10639: ENABLE
// game_speed := 7 ;
10640: LD_ADDR_OWVAR 65
10644: PUSH
10645: LD_INT 7
10647: ST_TO_ADDR
// end ;
10648: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10649: LD_EXP 18
10653: PUSH
10654: LD_EXP 25
10658: AND
10659: IFFALSE 10861
10661: GO 10663
10663: DISABLE
10664: LD_INT 0
10666: PPUSH
10667: PPUSH
10668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10669: LD_ADDR_VAR 0 3
10673: PUSH
10674: LD_INT 81
10676: PUSH
10677: LD_OWVAR 2
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 21
10688: PUSH
10689: LD_INT 1
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: PPUSH
10700: CALL_OW 69
10704: ST_TO_ADDR
// if not tmp then
10705: LD_VAR 0 3
10709: NOT
10710: IFFALSE 10714
// exit ;
10712: GO 10861
// if tmp > 5 then
10714: LD_VAR 0 3
10718: PUSH
10719: LD_INT 5
10721: GREATER
10722: IFFALSE 10734
// k := 5 else
10724: LD_ADDR_VAR 0 2
10728: PUSH
10729: LD_INT 5
10731: ST_TO_ADDR
10732: GO 10744
// k := tmp ;
10734: LD_ADDR_VAR 0 2
10738: PUSH
10739: LD_VAR 0 3
10743: ST_TO_ADDR
// for i := 1 to k do
10744: LD_ADDR_VAR 0 1
10748: PUSH
10749: DOUBLE
10750: LD_INT 1
10752: DEC
10753: ST_TO_ADDR
10754: LD_VAR 0 2
10758: PUSH
10759: FOR_TO
10760: IFFALSE 10859
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10762: LD_VAR 0 3
10766: PUSH
10767: LD_VAR 0 1
10771: ARRAY
10772: PPUSH
10773: LD_VAR 0 1
10777: PUSH
10778: LD_INT 4
10780: MOD
10781: PUSH
10782: LD_INT 1
10784: PLUS
10785: PPUSH
10786: CALL_OW 259
10790: PUSH
10791: LD_INT 10
10793: LESS
10794: IFFALSE 10857
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10796: LD_VAR 0 3
10800: PUSH
10801: LD_VAR 0 1
10805: ARRAY
10806: PPUSH
10807: LD_VAR 0 1
10811: PUSH
10812: LD_INT 4
10814: MOD
10815: PUSH
10816: LD_INT 1
10818: PLUS
10819: PPUSH
10820: LD_VAR 0 3
10824: PUSH
10825: LD_VAR 0 1
10829: ARRAY
10830: PPUSH
10831: LD_VAR 0 1
10835: PUSH
10836: LD_INT 4
10838: MOD
10839: PUSH
10840: LD_INT 1
10842: PLUS
10843: PPUSH
10844: CALL_OW 259
10848: PUSH
10849: LD_INT 1
10851: PLUS
10852: PPUSH
10853: CALL_OW 237
10857: GO 10759
10859: POP
10860: POP
// end ;
10861: PPOPN 3
10863: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10864: LD_EXP 18
10868: PUSH
10869: LD_EXP 26
10873: AND
10874: IFFALSE 10894
10876: GO 10878
10878: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10879: LD_INT 4
10881: PPUSH
10882: LD_OWVAR 2
10886: PPUSH
10887: LD_INT 0
10889: PPUSH
10890: CALL_OW 324
10894: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10895: LD_EXP 18
10899: PUSH
10900: LD_EXP 55
10904: AND
10905: IFFALSE 10925
10907: GO 10909
10909: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10910: LD_INT 19
10912: PPUSH
10913: LD_OWVAR 2
10917: PPUSH
10918: LD_INT 0
10920: PPUSH
10921: CALL_OW 324
10925: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10926: LD_EXP 18
10930: PUSH
10931: LD_EXP 27
10935: AND
10936: IFFALSE 11038
10938: GO 10940
10940: DISABLE
10941: LD_INT 0
10943: PPUSH
10944: PPUSH
// begin enable ;
10945: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10946: LD_ADDR_VAR 0 2
10950: PUSH
10951: LD_INT 22
10953: PUSH
10954: LD_OWVAR 2
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 2
10965: PUSH
10966: LD_INT 34
10968: PUSH
10969: LD_INT 11
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 34
10978: PUSH
10979: LD_INT 30
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: LIST
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PPUSH
10995: CALL_OW 69
10999: ST_TO_ADDR
// if not tmp then
11000: LD_VAR 0 2
11004: NOT
11005: IFFALSE 11009
// exit ;
11007: GO 11038
// for i in tmp do
11009: LD_ADDR_VAR 0 1
11013: PUSH
11014: LD_VAR 0 2
11018: PUSH
11019: FOR_IN
11020: IFFALSE 11036
// begin SetLives ( i , 0 ) ;
11022: LD_VAR 0 1
11026: PPUSH
11027: LD_INT 0
11029: PPUSH
11030: CALL_OW 234
// end ;
11034: GO 11019
11036: POP
11037: POP
// end ;
11038: PPOPN 2
11040: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11041: LD_EXP 18
11045: PUSH
11046: LD_EXP 28
11050: AND
11051: IFFALSE 11071
11053: GO 11055
11055: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11056: LD_INT 32
11058: PPUSH
11059: LD_OWVAR 2
11063: PPUSH
11064: LD_INT 0
11066: PPUSH
11067: CALL_OW 324
11071: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11072: LD_EXP 18
11076: PUSH
11077: LD_EXP 29
11081: AND
11082: IFFALSE 11263
11084: GO 11086
11086: DISABLE
11087: LD_INT 0
11089: PPUSH
11090: PPUSH
11091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11092: LD_ADDR_VAR 0 2
11096: PUSH
11097: LD_INT 22
11099: PUSH
11100: LD_OWVAR 2
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: LD_INT 33
11111: PUSH
11112: LD_INT 3
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PPUSH
11123: CALL_OW 69
11127: ST_TO_ADDR
// if not tmp then
11128: LD_VAR 0 2
11132: NOT
11133: IFFALSE 11137
// exit ;
11135: GO 11263
// side := 0 ;
11137: LD_ADDR_VAR 0 3
11141: PUSH
11142: LD_INT 0
11144: ST_TO_ADDR
// for i := 1 to 8 do
11145: LD_ADDR_VAR 0 1
11149: PUSH
11150: DOUBLE
11151: LD_INT 1
11153: DEC
11154: ST_TO_ADDR
11155: LD_INT 8
11157: PUSH
11158: FOR_TO
11159: IFFALSE 11207
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11161: LD_OWVAR 2
11165: PUSH
11166: LD_VAR 0 1
11170: NONEQUAL
11171: PUSH
11172: LD_OWVAR 2
11176: PPUSH
11177: LD_VAR 0 1
11181: PPUSH
11182: CALL_OW 81
11186: PUSH
11187: LD_INT 2
11189: EQUAL
11190: AND
11191: IFFALSE 11205
// begin side := i ;
11193: LD_ADDR_VAR 0 3
11197: PUSH
11198: LD_VAR 0 1
11202: ST_TO_ADDR
// break ;
11203: GO 11207
// end ;
11205: GO 11158
11207: POP
11208: POP
// if not side then
11209: LD_VAR 0 3
11213: NOT
11214: IFFALSE 11218
// exit ;
11216: GO 11263
// for i := 1 to tmp do
11218: LD_ADDR_VAR 0 1
11222: PUSH
11223: DOUBLE
11224: LD_INT 1
11226: DEC
11227: ST_TO_ADDR
11228: LD_VAR 0 2
11232: PUSH
11233: FOR_TO
11234: IFFALSE 11261
// if Prob ( 60 ) then
11236: LD_INT 60
11238: PPUSH
11239: CALL_OW 13
11243: IFFALSE 11259
// SetSide ( i , side ) ;
11245: LD_VAR 0 1
11249: PPUSH
11250: LD_VAR 0 3
11254: PPUSH
11255: CALL_OW 235
11259: GO 11233
11261: POP
11262: POP
// end ;
11263: PPOPN 3
11265: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11266: LD_EXP 18
11270: PUSH
11271: LD_EXP 31
11275: AND
11276: IFFALSE 11395
11278: GO 11280
11280: DISABLE
11281: LD_INT 0
11283: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11284: LD_ADDR_VAR 0 1
11288: PUSH
11289: LD_INT 22
11291: PUSH
11292: LD_OWVAR 2
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 21
11303: PUSH
11304: LD_INT 1
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 3
11313: PUSH
11314: LD_INT 23
11316: PUSH
11317: LD_INT 0
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: PPUSH
11333: CALL_OW 69
11337: PUSH
11338: FOR_IN
11339: IFFALSE 11393
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11341: LD_VAR 0 1
11345: PPUSH
11346: CALL_OW 257
11350: PUSH
11351: LD_INT 1
11353: PUSH
11354: LD_INT 2
11356: PUSH
11357: LD_INT 3
11359: PUSH
11360: LD_INT 4
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: IN
11369: IFFALSE 11391
// SetClass ( un , rand ( 1 , 4 ) ) ;
11371: LD_VAR 0 1
11375: PPUSH
11376: LD_INT 1
11378: PPUSH
11379: LD_INT 4
11381: PPUSH
11382: CALL_OW 12
11386: PPUSH
11387: CALL_OW 336
11391: GO 11338
11393: POP
11394: POP
// end ;
11395: PPOPN 1
11397: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11398: LD_EXP 18
11402: PUSH
11403: LD_EXP 30
11407: AND
11408: IFFALSE 11487
11410: GO 11412
11412: DISABLE
11413: LD_INT 0
11415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11416: LD_ADDR_VAR 0 1
11420: PUSH
11421: LD_INT 22
11423: PUSH
11424: LD_OWVAR 2
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 21
11435: PUSH
11436: LD_INT 3
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PPUSH
11447: CALL_OW 69
11451: ST_TO_ADDR
// if not tmp then
11452: LD_VAR 0 1
11456: NOT
11457: IFFALSE 11461
// exit ;
11459: GO 11487
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11461: LD_VAR 0 1
11465: PUSH
11466: LD_INT 1
11468: PPUSH
11469: LD_VAR 0 1
11473: PPUSH
11474: CALL_OW 12
11478: ARRAY
11479: PPUSH
11480: LD_INT 100
11482: PPUSH
11483: CALL_OW 234
// end ;
11487: PPOPN 1
11489: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11490: LD_EXP 18
11494: PUSH
11495: LD_EXP 32
11499: AND
11500: IFFALSE 11598
11502: GO 11504
11504: DISABLE
11505: LD_INT 0
11507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11508: LD_ADDR_VAR 0 1
11512: PUSH
11513: LD_INT 22
11515: PUSH
11516: LD_OWVAR 2
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 21
11527: PUSH
11528: LD_INT 1
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PPUSH
11539: CALL_OW 69
11543: ST_TO_ADDR
// if not tmp then
11544: LD_VAR 0 1
11548: NOT
11549: IFFALSE 11553
// exit ;
11551: GO 11598
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11553: LD_VAR 0 1
11557: PUSH
11558: LD_INT 1
11560: PPUSH
11561: LD_VAR 0 1
11565: PPUSH
11566: CALL_OW 12
11570: ARRAY
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: LD_INT 4
11577: PPUSH
11578: CALL_OW 12
11582: PPUSH
11583: LD_INT 3000
11585: PPUSH
11586: LD_INT 9000
11588: PPUSH
11589: CALL_OW 12
11593: PPUSH
11594: CALL_OW 492
// end ;
11598: PPOPN 1
11600: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11601: LD_EXP 18
11605: PUSH
11606: LD_EXP 33
11610: AND
11611: IFFALSE 11631
11613: GO 11615
11615: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11616: LD_INT 1
11618: PPUSH
11619: LD_OWVAR 2
11623: PPUSH
11624: LD_INT 0
11626: PPUSH
11627: CALL_OW 324
11631: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11632: LD_EXP 18
11636: PUSH
11637: LD_EXP 34
11641: AND
11642: IFFALSE 11725
11644: GO 11646
11646: DISABLE
11647: LD_INT 0
11649: PPUSH
11650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11651: LD_ADDR_VAR 0 2
11655: PUSH
11656: LD_INT 22
11658: PUSH
11659: LD_OWVAR 2
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: LD_INT 21
11670: PUSH
11671: LD_INT 3
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 69
11686: ST_TO_ADDR
// if not tmp then
11687: LD_VAR 0 2
11691: NOT
11692: IFFALSE 11696
// exit ;
11694: GO 11725
// for i in tmp do
11696: LD_ADDR_VAR 0 1
11700: PUSH
11701: LD_VAR 0 2
11705: PUSH
11706: FOR_IN
11707: IFFALSE 11723
// SetBLevel ( i , 10 ) ;
11709: LD_VAR 0 1
11713: PPUSH
11714: LD_INT 10
11716: PPUSH
11717: CALL_OW 241
11721: GO 11706
11723: POP
11724: POP
// end ;
11725: PPOPN 2
11727: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11728: LD_EXP 18
11732: PUSH
11733: LD_EXP 35
11737: AND
11738: IFFALSE 11849
11740: GO 11742
11742: DISABLE
11743: LD_INT 0
11745: PPUSH
11746: PPUSH
11747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11748: LD_ADDR_VAR 0 3
11752: PUSH
11753: LD_INT 22
11755: PUSH
11756: LD_OWVAR 2
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 25
11767: PUSH
11768: LD_INT 1
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PPUSH
11779: CALL_OW 69
11783: ST_TO_ADDR
// if not tmp then
11784: LD_VAR 0 3
11788: NOT
11789: IFFALSE 11793
// exit ;
11791: GO 11849
// un := tmp [ rand ( 1 , tmp ) ] ;
11793: LD_ADDR_VAR 0 2
11797: PUSH
11798: LD_VAR 0 3
11802: PUSH
11803: LD_INT 1
11805: PPUSH
11806: LD_VAR 0 3
11810: PPUSH
11811: CALL_OW 12
11815: ARRAY
11816: ST_TO_ADDR
// if Crawls ( un ) then
11817: LD_VAR 0 2
11821: PPUSH
11822: CALL_OW 318
11826: IFFALSE 11837
// ComWalk ( un ) ;
11828: LD_VAR 0 2
11832: PPUSH
11833: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11837: LD_VAR 0 2
11841: PPUSH
11842: LD_INT 5
11844: PPUSH
11845: CALL_OW 336
// end ;
11849: PPOPN 3
11851: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11852: LD_EXP 18
11856: PUSH
11857: LD_EXP 36
11861: AND
11862: PUSH
11863: LD_OWVAR 67
11867: PUSH
11868: LD_INT 3
11870: LESS
11871: AND
11872: IFFALSE 11891
11874: GO 11876
11876: DISABLE
// Difficulty := Difficulty + 1 ;
11877: LD_ADDR_OWVAR 67
11881: PUSH
11882: LD_OWVAR 67
11886: PUSH
11887: LD_INT 1
11889: PLUS
11890: ST_TO_ADDR
11891: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11892: LD_EXP 18
11896: PUSH
11897: LD_EXP 37
11901: AND
11902: IFFALSE 12005
11904: GO 11906
11906: DISABLE
11907: LD_INT 0
11909: PPUSH
// begin for i := 1 to 5 do
11910: LD_ADDR_VAR 0 1
11914: PUSH
11915: DOUBLE
11916: LD_INT 1
11918: DEC
11919: ST_TO_ADDR
11920: LD_INT 5
11922: PUSH
11923: FOR_TO
11924: IFFALSE 12003
// begin uc_nation := nation_nature ;
11926: LD_ADDR_OWVAR 21
11930: PUSH
11931: LD_INT 0
11933: ST_TO_ADDR
// uc_side := 0 ;
11934: LD_ADDR_OWVAR 20
11938: PUSH
11939: LD_INT 0
11941: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11942: LD_ADDR_OWVAR 29
11946: PUSH
11947: LD_INT 12
11949: PUSH
11950: LD_INT 12
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: ST_TO_ADDR
// hc_agressivity := 20 ;
11957: LD_ADDR_OWVAR 35
11961: PUSH
11962: LD_INT 20
11964: ST_TO_ADDR
// hc_class := class_tiger ;
11965: LD_ADDR_OWVAR 28
11969: PUSH
11970: LD_INT 14
11972: ST_TO_ADDR
// hc_gallery :=  ;
11973: LD_ADDR_OWVAR 33
11977: PUSH
11978: LD_STRING 
11980: ST_TO_ADDR
// hc_name :=  ;
11981: LD_ADDR_OWVAR 26
11985: PUSH
11986: LD_STRING 
11988: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11989: CALL_OW 44
11993: PPUSH
11994: LD_INT 0
11996: PPUSH
11997: CALL_OW 51
// end ;
12001: GO 11923
12003: POP
12004: POP
// end ;
12005: PPOPN 1
12007: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12008: LD_EXP 18
12012: PUSH
12013: LD_EXP 38
12017: AND
12018: IFFALSE 12027
12020: GO 12022
12022: DISABLE
// StreamSibBomb ;
12023: CALL 12028 0 0
12027: END
// export function StreamSibBomb ; var i , x , y ; begin
12028: LD_INT 0
12030: PPUSH
12031: PPUSH
12032: PPUSH
12033: PPUSH
// result := false ;
12034: LD_ADDR_VAR 0 1
12038: PUSH
12039: LD_INT 0
12041: ST_TO_ADDR
// for i := 1 to 16 do
12042: LD_ADDR_VAR 0 2
12046: PUSH
12047: DOUBLE
12048: LD_INT 1
12050: DEC
12051: ST_TO_ADDR
12052: LD_INT 16
12054: PUSH
12055: FOR_TO
12056: IFFALSE 12255
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12058: LD_ADDR_VAR 0 3
12062: PUSH
12063: LD_INT 10
12065: PUSH
12066: LD_INT 20
12068: PUSH
12069: LD_INT 30
12071: PUSH
12072: LD_INT 40
12074: PUSH
12075: LD_INT 50
12077: PUSH
12078: LD_INT 60
12080: PUSH
12081: LD_INT 70
12083: PUSH
12084: LD_INT 80
12086: PUSH
12087: LD_INT 90
12089: PUSH
12090: LD_INT 100
12092: PUSH
12093: LD_INT 110
12095: PUSH
12096: LD_INT 120
12098: PUSH
12099: LD_INT 130
12101: PUSH
12102: LD_INT 140
12104: PUSH
12105: LD_INT 150
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 1
12127: PPUSH
12128: LD_INT 15
12130: PPUSH
12131: CALL_OW 12
12135: ARRAY
12136: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12137: LD_ADDR_VAR 0 4
12141: PUSH
12142: LD_INT 10
12144: PUSH
12145: LD_INT 20
12147: PUSH
12148: LD_INT 30
12150: PUSH
12151: LD_INT 40
12153: PUSH
12154: LD_INT 50
12156: PUSH
12157: LD_INT 60
12159: PUSH
12160: LD_INT 70
12162: PUSH
12163: LD_INT 80
12165: PUSH
12166: LD_INT 90
12168: PUSH
12169: LD_INT 100
12171: PUSH
12172: LD_INT 110
12174: PUSH
12175: LD_INT 120
12177: PUSH
12178: LD_INT 130
12180: PUSH
12181: LD_INT 140
12183: PUSH
12184: LD_INT 150
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 1
12206: PPUSH
12207: LD_INT 15
12209: PPUSH
12210: CALL_OW 12
12214: ARRAY
12215: ST_TO_ADDR
// if ValidHex ( x , y ) then
12216: LD_VAR 0 3
12220: PPUSH
12221: LD_VAR 0 4
12225: PPUSH
12226: CALL_OW 488
12230: IFFALSE 12253
// begin result := [ x , y ] ;
12232: LD_ADDR_VAR 0 1
12236: PUSH
12237: LD_VAR 0 3
12241: PUSH
12242: LD_VAR 0 4
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: ST_TO_ADDR
// break ;
12251: GO 12255
// end ; end ;
12253: GO 12055
12255: POP
12256: POP
// if result then
12257: LD_VAR 0 1
12261: IFFALSE 12321
// begin ToLua ( playSibBomb() ) ;
12263: LD_STRING playSibBomb()
12265: PPUSH
12266: CALL_OW 559
// wait ( 0 0$14 ) ;
12270: LD_INT 490
12272: PPUSH
12273: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12277: LD_VAR 0 1
12281: PUSH
12282: LD_INT 1
12284: ARRAY
12285: PPUSH
12286: LD_VAR 0 1
12290: PUSH
12291: LD_INT 2
12293: ARRAY
12294: PPUSH
12295: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12299: LD_VAR 0 1
12303: PUSH
12304: LD_INT 1
12306: ARRAY
12307: PPUSH
12308: LD_VAR 0 1
12312: PUSH
12313: LD_INT 2
12315: ARRAY
12316: PPUSH
12317: CALL_OW 429
// end ; end ;
12321: LD_VAR 0 1
12325: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12326: LD_EXP 18
12330: PUSH
12331: LD_EXP 40
12335: AND
12336: IFFALSE 12348
12338: GO 12340
12340: DISABLE
// YouLost (  ) ;
12341: LD_STRING 
12343: PPUSH
12344: CALL_OW 104
12348: END
// every 0 0$1 trigger StreamModeActive and sFog do
12349: LD_EXP 18
12353: PUSH
12354: LD_EXP 39
12358: AND
12359: IFFALSE 12373
12361: GO 12363
12363: DISABLE
// FogOff ( your_side ) ;
12364: LD_OWVAR 2
12368: PPUSH
12369: CALL_OW 344
12373: END
// every 0 0$1 trigger StreamModeActive and sSun do
12374: LD_EXP 18
12378: PUSH
12379: LD_EXP 41
12383: AND
12384: IFFALSE 12412
12386: GO 12388
12388: DISABLE
// begin solar_recharge_percent := 0 ;
12389: LD_ADDR_OWVAR 79
12393: PUSH
12394: LD_INT 0
12396: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12397: LD_INT 10500
12399: PPUSH
12400: CALL_OW 67
// solar_recharge_percent := 100 ;
12404: LD_ADDR_OWVAR 79
12408: PUSH
12409: LD_INT 100
12411: ST_TO_ADDR
// end ;
12412: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12413: LD_EXP 18
12417: PUSH
12418: LD_EXP 42
12422: AND
12423: IFFALSE 12662
12425: GO 12427
12427: DISABLE
12428: LD_INT 0
12430: PPUSH
12431: PPUSH
12432: PPUSH
// begin tmp := [ ] ;
12433: LD_ADDR_VAR 0 3
12437: PUSH
12438: EMPTY
12439: ST_TO_ADDR
// for i := 1 to 6 do
12440: LD_ADDR_VAR 0 1
12444: PUSH
12445: DOUBLE
12446: LD_INT 1
12448: DEC
12449: ST_TO_ADDR
12450: LD_INT 6
12452: PUSH
12453: FOR_TO
12454: IFFALSE 12559
// begin uc_nation := nation_nature ;
12456: LD_ADDR_OWVAR 21
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// uc_side := 0 ;
12464: LD_ADDR_OWVAR 20
12468: PUSH
12469: LD_INT 0
12471: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12472: LD_ADDR_OWVAR 29
12476: PUSH
12477: LD_INT 12
12479: PUSH
12480: LD_INT 12
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: ST_TO_ADDR
// hc_agressivity := 20 ;
12487: LD_ADDR_OWVAR 35
12491: PUSH
12492: LD_INT 20
12494: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12495: LD_ADDR_OWVAR 28
12499: PUSH
12500: LD_INT 17
12502: ST_TO_ADDR
// hc_gallery :=  ;
12503: LD_ADDR_OWVAR 33
12507: PUSH
12508: LD_STRING 
12510: ST_TO_ADDR
// hc_name :=  ;
12511: LD_ADDR_OWVAR 26
12515: PUSH
12516: LD_STRING 
12518: ST_TO_ADDR
// un := CreateHuman ;
12519: LD_ADDR_VAR 0 2
12523: PUSH
12524: CALL_OW 44
12528: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12529: LD_VAR 0 2
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: CALL_OW 51
// tmp := tmp ^ un ;
12541: LD_ADDR_VAR 0 3
12545: PUSH
12546: LD_VAR 0 3
12550: PUSH
12551: LD_VAR 0 2
12555: ADD
12556: ST_TO_ADDR
// end ;
12557: GO 12453
12559: POP
12560: POP
// repeat wait ( 0 0$1 ) ;
12561: LD_INT 35
12563: PPUSH
12564: CALL_OW 67
// for un in tmp do
12568: LD_ADDR_VAR 0 2
12572: PUSH
12573: LD_VAR 0 3
12577: PUSH
12578: FOR_IN
12579: IFFALSE 12653
// begin if IsDead ( un ) then
12581: LD_VAR 0 2
12585: PPUSH
12586: CALL_OW 301
12590: IFFALSE 12610
// begin tmp := tmp diff un ;
12592: LD_ADDR_VAR 0 3
12596: PUSH
12597: LD_VAR 0 3
12601: PUSH
12602: LD_VAR 0 2
12606: DIFF
12607: ST_TO_ADDR
// continue ;
12608: GO 12578
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12610: LD_VAR 0 2
12614: PPUSH
12615: LD_INT 3
12617: PUSH
12618: LD_INT 22
12620: PUSH
12621: LD_INT 0
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PPUSH
12632: CALL_OW 69
12636: PPUSH
12637: LD_VAR 0 2
12641: PPUSH
12642: CALL_OW 74
12646: PPUSH
12647: CALL_OW 115
// end ;
12651: GO 12578
12653: POP
12654: POP
// until not tmp ;
12655: LD_VAR 0 3
12659: NOT
12660: IFFALSE 12561
// end ;
12662: PPOPN 3
12664: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12665: LD_EXP 18
12669: PUSH
12670: LD_EXP 43
12674: AND
12675: IFFALSE 12729
12677: GO 12679
12679: DISABLE
// begin ToLua ( displayTroll(); ) ;
12680: LD_STRING displayTroll();
12682: PPUSH
12683: CALL_OW 559
// wait ( 3 3$00 ) ;
12687: LD_INT 6300
12689: PPUSH
12690: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12694: LD_STRING hideTroll();
12696: PPUSH
12697: CALL_OW 559
// wait ( 1 1$00 ) ;
12701: LD_INT 2100
12703: PPUSH
12704: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12708: LD_STRING displayTroll();
12710: PPUSH
12711: CALL_OW 559
// wait ( 1 1$00 ) ;
12715: LD_INT 2100
12717: PPUSH
12718: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12722: LD_STRING hideTroll();
12724: PPUSH
12725: CALL_OW 559
// end ;
12729: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12730: LD_EXP 18
12734: PUSH
12735: LD_EXP 44
12739: AND
12740: IFFALSE 12803
12742: GO 12744
12744: DISABLE
12745: LD_INT 0
12747: PPUSH
// begin p := 0 ;
12748: LD_ADDR_VAR 0 1
12752: PUSH
12753: LD_INT 0
12755: ST_TO_ADDR
// repeat game_speed := 1 ;
12756: LD_ADDR_OWVAR 65
12760: PUSH
12761: LD_INT 1
12763: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12764: LD_INT 35
12766: PPUSH
12767: CALL_OW 67
// p := p + 1 ;
12771: LD_ADDR_VAR 0 1
12775: PUSH
12776: LD_VAR 0 1
12780: PUSH
12781: LD_INT 1
12783: PLUS
12784: ST_TO_ADDR
// until p >= 60 ;
12785: LD_VAR 0 1
12789: PUSH
12790: LD_INT 60
12792: GREATEREQUAL
12793: IFFALSE 12756
// game_speed := 4 ;
12795: LD_ADDR_OWVAR 65
12799: PUSH
12800: LD_INT 4
12802: ST_TO_ADDR
// end ;
12803: PPOPN 1
12805: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12806: LD_EXP 18
12810: PUSH
12811: LD_EXP 45
12815: AND
12816: IFFALSE 12962
12818: GO 12820
12820: DISABLE
12821: LD_INT 0
12823: PPUSH
12824: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12825: LD_ADDR_VAR 0 1
12829: PUSH
12830: LD_INT 22
12832: PUSH
12833: LD_OWVAR 2
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 2
12844: PUSH
12845: LD_INT 30
12847: PUSH
12848: LD_INT 0
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: LD_INT 30
12857: PUSH
12858: LD_INT 1
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: LIST
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PPUSH
12874: CALL_OW 69
12878: ST_TO_ADDR
// if not depot then
12879: LD_VAR 0 1
12883: NOT
12884: IFFALSE 12888
// exit ;
12886: GO 12962
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12888: LD_ADDR_VAR 0 2
12892: PUSH
12893: LD_VAR 0 1
12897: PUSH
12898: LD_INT 1
12900: PPUSH
12901: LD_VAR 0 1
12905: PPUSH
12906: CALL_OW 12
12910: ARRAY
12911: PPUSH
12912: CALL_OW 274
12916: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12917: LD_VAR 0 2
12921: PPUSH
12922: LD_INT 1
12924: PPUSH
12925: LD_INT 0
12927: PPUSH
12928: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12932: LD_VAR 0 2
12936: PPUSH
12937: LD_INT 2
12939: PPUSH
12940: LD_INT 0
12942: PPUSH
12943: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12947: LD_VAR 0 2
12951: PPUSH
12952: LD_INT 3
12954: PPUSH
12955: LD_INT 0
12957: PPUSH
12958: CALL_OW 277
// end ;
12962: PPOPN 2
12964: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12965: LD_EXP 18
12969: PUSH
12970: LD_EXP 46
12974: AND
12975: IFFALSE 13072
12977: GO 12979
12979: DISABLE
12980: LD_INT 0
12982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12983: LD_ADDR_VAR 0 1
12987: PUSH
12988: LD_INT 22
12990: PUSH
12991: LD_OWVAR 2
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 21
13002: PUSH
13003: LD_INT 1
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 3
13012: PUSH
13013: LD_INT 23
13015: PUSH
13016: LD_INT 0
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: LIST
13031: PPUSH
13032: CALL_OW 69
13036: ST_TO_ADDR
// if not tmp then
13037: LD_VAR 0 1
13041: NOT
13042: IFFALSE 13046
// exit ;
13044: GO 13072
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13046: LD_VAR 0 1
13050: PUSH
13051: LD_INT 1
13053: PPUSH
13054: LD_VAR 0 1
13058: PPUSH
13059: CALL_OW 12
13063: ARRAY
13064: PPUSH
13065: LD_INT 200
13067: PPUSH
13068: CALL_OW 234
// end ;
13072: PPOPN 1
13074: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13075: LD_EXP 18
13079: PUSH
13080: LD_EXP 47
13084: AND
13085: IFFALSE 13164
13087: GO 13089
13089: DISABLE
13090: LD_INT 0
13092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13093: LD_ADDR_VAR 0 1
13097: PUSH
13098: LD_INT 22
13100: PUSH
13101: LD_OWVAR 2
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: LD_INT 21
13112: PUSH
13113: LD_INT 2
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PPUSH
13124: CALL_OW 69
13128: ST_TO_ADDR
// if not tmp then
13129: LD_VAR 0 1
13133: NOT
13134: IFFALSE 13138
// exit ;
13136: GO 13164
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13138: LD_VAR 0 1
13142: PUSH
13143: LD_INT 1
13145: PPUSH
13146: LD_VAR 0 1
13150: PPUSH
13151: CALL_OW 12
13155: ARRAY
13156: PPUSH
13157: LD_INT 60
13159: PPUSH
13160: CALL_OW 234
// end ;
13164: PPOPN 1
13166: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13167: LD_EXP 18
13171: PUSH
13172: LD_EXP 48
13176: AND
13177: IFFALSE 13276
13179: GO 13181
13181: DISABLE
13182: LD_INT 0
13184: PPUSH
13185: PPUSH
// begin enable ;
13186: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13187: LD_ADDR_VAR 0 1
13191: PUSH
13192: LD_INT 22
13194: PUSH
13195: LD_OWVAR 2
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 61
13206: PUSH
13207: EMPTY
13208: LIST
13209: PUSH
13210: LD_INT 33
13212: PUSH
13213: LD_INT 2
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: LIST
13224: PPUSH
13225: CALL_OW 69
13229: ST_TO_ADDR
// if not tmp then
13230: LD_VAR 0 1
13234: NOT
13235: IFFALSE 13239
// exit ;
13237: GO 13276
// for i in tmp do
13239: LD_ADDR_VAR 0 2
13243: PUSH
13244: LD_VAR 0 1
13248: PUSH
13249: FOR_IN
13250: IFFALSE 13274
// if IsControledBy ( i ) then
13252: LD_VAR 0 2
13256: PPUSH
13257: CALL_OW 312
13261: IFFALSE 13272
// ComUnlink ( i ) ;
13263: LD_VAR 0 2
13267: PPUSH
13268: CALL_OW 136
13272: GO 13249
13274: POP
13275: POP
// end ;
13276: PPOPN 2
13278: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13279: LD_EXP 18
13283: PUSH
13284: LD_EXP 49
13288: AND
13289: IFFALSE 13429
13291: GO 13293
13293: DISABLE
13294: LD_INT 0
13296: PPUSH
13297: PPUSH
// begin ToLua ( displayPowell(); ) ;
13298: LD_STRING displayPowell();
13300: PPUSH
13301: CALL_OW 559
// uc_side := 0 ;
13305: LD_ADDR_OWVAR 20
13309: PUSH
13310: LD_INT 0
13312: ST_TO_ADDR
// uc_nation := 2 ;
13313: LD_ADDR_OWVAR 21
13317: PUSH
13318: LD_INT 2
13320: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13321: LD_ADDR_OWVAR 37
13325: PUSH
13326: LD_INT 14
13328: ST_TO_ADDR
// vc_engine := engine_siberite ;
13329: LD_ADDR_OWVAR 39
13333: PUSH
13334: LD_INT 3
13336: ST_TO_ADDR
// vc_control := control_apeman ;
13337: LD_ADDR_OWVAR 38
13341: PUSH
13342: LD_INT 5
13344: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13345: LD_ADDR_OWVAR 40
13349: PUSH
13350: LD_INT 29
13352: ST_TO_ADDR
// un := CreateVehicle ;
13353: LD_ADDR_VAR 0 2
13357: PUSH
13358: CALL_OW 45
13362: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13363: LD_VAR 0 2
13367: PPUSH
13368: LD_INT 1
13370: PPUSH
13371: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13375: LD_INT 35
13377: PPUSH
13378: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13382: LD_VAR 0 2
13386: PPUSH
13387: LD_INT 22
13389: PUSH
13390: LD_OWVAR 2
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 69
13403: PPUSH
13404: LD_VAR 0 2
13408: PPUSH
13409: CALL_OW 74
13413: PPUSH
13414: CALL_OW 115
// until IsDead ( un ) ;
13418: LD_VAR 0 2
13422: PPUSH
13423: CALL_OW 301
13427: IFFALSE 13375
// end ;
13429: PPOPN 2
13431: END
// every 0 0$1 trigger StreamModeActive and sStu do
13432: LD_EXP 18
13436: PUSH
13437: LD_EXP 57
13441: AND
13442: IFFALSE 13458
13444: GO 13446
13446: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13447: LD_STRING displayStucuk();
13449: PPUSH
13450: CALL_OW 559
// ResetFog ;
13454: CALL_OW 335
// end ;
13458: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13459: LD_EXP 18
13463: PUSH
13464: LD_EXP 50
13468: AND
13469: IFFALSE 13610
13471: GO 13473
13473: DISABLE
13474: LD_INT 0
13476: PPUSH
13477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13478: LD_ADDR_VAR 0 2
13482: PUSH
13483: LD_INT 22
13485: PUSH
13486: LD_OWVAR 2
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 21
13497: PUSH
13498: LD_INT 1
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PPUSH
13509: CALL_OW 69
13513: ST_TO_ADDR
// if not tmp then
13514: LD_VAR 0 2
13518: NOT
13519: IFFALSE 13523
// exit ;
13521: GO 13610
// un := tmp [ rand ( 1 , tmp ) ] ;
13523: LD_ADDR_VAR 0 1
13527: PUSH
13528: LD_VAR 0 2
13532: PUSH
13533: LD_INT 1
13535: PPUSH
13536: LD_VAR 0 2
13540: PPUSH
13541: CALL_OW 12
13545: ARRAY
13546: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13547: LD_VAR 0 1
13551: PPUSH
13552: LD_INT 0
13554: PPUSH
13555: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13559: LD_VAR 0 1
13563: PPUSH
13564: LD_OWVAR 3
13568: PUSH
13569: LD_VAR 0 1
13573: DIFF
13574: PPUSH
13575: LD_VAR 0 1
13579: PPUSH
13580: CALL_OW 74
13584: PPUSH
13585: CALL_OW 115
// wait ( 0 0$20 ) ;
13589: LD_INT 700
13591: PPUSH
13592: CALL_OW 67
// SetSide ( un , your_side ) ;
13596: LD_VAR 0 1
13600: PPUSH
13601: LD_OWVAR 2
13605: PPUSH
13606: CALL_OW 235
// end ;
13610: PPOPN 2
13612: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13613: LD_EXP 18
13617: PUSH
13618: LD_EXP 51
13622: AND
13623: IFFALSE 13729
13625: GO 13627
13627: DISABLE
13628: LD_INT 0
13630: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13631: LD_ADDR_VAR 0 1
13635: PUSH
13636: LD_INT 22
13638: PUSH
13639: LD_OWVAR 2
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: LD_INT 2
13650: PUSH
13651: LD_INT 30
13653: PUSH
13654: LD_INT 0
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 30
13663: PUSH
13664: LD_INT 1
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: LIST
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PPUSH
13680: CALL_OW 69
13684: ST_TO_ADDR
// if not depot then
13685: LD_VAR 0 1
13689: NOT
13690: IFFALSE 13694
// exit ;
13692: GO 13729
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13694: LD_VAR 0 1
13698: PUSH
13699: LD_INT 1
13701: ARRAY
13702: PPUSH
13703: CALL_OW 250
13707: PPUSH
13708: LD_VAR 0 1
13712: PUSH
13713: LD_INT 1
13715: ARRAY
13716: PPUSH
13717: CALL_OW 251
13721: PPUSH
13722: LD_INT 70
13724: PPUSH
13725: CALL_OW 495
// end ;
13729: PPOPN 1
13731: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13732: LD_EXP 18
13736: PUSH
13737: LD_EXP 52
13741: AND
13742: IFFALSE 13953
13744: GO 13746
13746: DISABLE
13747: LD_INT 0
13749: PPUSH
13750: PPUSH
13751: PPUSH
13752: PPUSH
13753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13754: LD_ADDR_VAR 0 5
13758: PUSH
13759: LD_INT 22
13761: PUSH
13762: LD_OWVAR 2
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 21
13773: PUSH
13774: LD_INT 1
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PPUSH
13785: CALL_OW 69
13789: ST_TO_ADDR
// if not tmp then
13790: LD_VAR 0 5
13794: NOT
13795: IFFALSE 13799
// exit ;
13797: GO 13953
// for i in tmp do
13799: LD_ADDR_VAR 0 1
13803: PUSH
13804: LD_VAR 0 5
13808: PUSH
13809: FOR_IN
13810: IFFALSE 13951
// begin d := rand ( 0 , 5 ) ;
13812: LD_ADDR_VAR 0 4
13816: PUSH
13817: LD_INT 0
13819: PPUSH
13820: LD_INT 5
13822: PPUSH
13823: CALL_OW 12
13827: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13828: LD_ADDR_VAR 0 2
13832: PUSH
13833: LD_VAR 0 1
13837: PPUSH
13838: CALL_OW 250
13842: PPUSH
13843: LD_VAR 0 4
13847: PPUSH
13848: LD_INT 3
13850: PPUSH
13851: LD_INT 12
13853: PPUSH
13854: CALL_OW 12
13858: PPUSH
13859: CALL_OW 272
13863: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13864: LD_ADDR_VAR 0 3
13868: PUSH
13869: LD_VAR 0 1
13873: PPUSH
13874: CALL_OW 251
13878: PPUSH
13879: LD_VAR 0 4
13883: PPUSH
13884: LD_INT 3
13886: PPUSH
13887: LD_INT 12
13889: PPUSH
13890: CALL_OW 12
13894: PPUSH
13895: CALL_OW 273
13899: ST_TO_ADDR
// if ValidHex ( x , y ) then
13900: LD_VAR 0 2
13904: PPUSH
13905: LD_VAR 0 3
13909: PPUSH
13910: CALL_OW 488
13914: IFFALSE 13949
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13916: LD_VAR 0 1
13920: PPUSH
13921: LD_VAR 0 2
13925: PPUSH
13926: LD_VAR 0 3
13930: PPUSH
13931: LD_INT 3
13933: PPUSH
13934: LD_INT 6
13936: PPUSH
13937: CALL_OW 12
13941: PPUSH
13942: LD_INT 1
13944: PPUSH
13945: CALL_OW 483
// end ;
13949: GO 13809
13951: POP
13952: POP
// end ;
13953: PPOPN 5
13955: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13956: LD_EXP 18
13960: PUSH
13961: LD_EXP 53
13965: AND
13966: IFFALSE 14060
13968: GO 13970
13970: DISABLE
13971: LD_INT 0
13973: PPUSH
13974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13975: LD_ADDR_VAR 0 2
13979: PUSH
13980: LD_INT 22
13982: PUSH
13983: LD_OWVAR 2
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 32
13994: PUSH
13995: LD_INT 1
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 21
14004: PUSH
14005: LD_INT 2
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: LIST
14016: PPUSH
14017: CALL_OW 69
14021: ST_TO_ADDR
// if not tmp then
14022: LD_VAR 0 2
14026: NOT
14027: IFFALSE 14031
// exit ;
14029: GO 14060
// for i in tmp do
14031: LD_ADDR_VAR 0 1
14035: PUSH
14036: LD_VAR 0 2
14040: PUSH
14041: FOR_IN
14042: IFFALSE 14058
// SetFuel ( i , 0 ) ;
14044: LD_VAR 0 1
14048: PPUSH
14049: LD_INT 0
14051: PPUSH
14052: CALL_OW 240
14056: GO 14041
14058: POP
14059: POP
// end ;
14060: PPOPN 2
14062: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14063: LD_EXP 18
14067: PUSH
14068: LD_EXP 54
14072: AND
14073: IFFALSE 14139
14075: GO 14077
14077: DISABLE
14078: LD_INT 0
14080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14081: LD_ADDR_VAR 0 1
14085: PUSH
14086: LD_INT 22
14088: PUSH
14089: LD_OWVAR 2
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 30
14100: PUSH
14101: LD_INT 29
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PPUSH
14112: CALL_OW 69
14116: ST_TO_ADDR
// if not tmp then
14117: LD_VAR 0 1
14121: NOT
14122: IFFALSE 14126
// exit ;
14124: GO 14139
// DestroyUnit ( tmp [ 1 ] ) ;
14126: LD_VAR 0 1
14130: PUSH
14131: LD_INT 1
14133: ARRAY
14134: PPUSH
14135: CALL_OW 65
// end ;
14139: PPOPN 1
14141: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14142: LD_EXP 18
14146: PUSH
14147: LD_EXP 56
14151: AND
14152: IFFALSE 14281
14154: GO 14156
14156: DISABLE
14157: LD_INT 0
14159: PPUSH
// begin uc_side := 0 ;
14160: LD_ADDR_OWVAR 20
14164: PUSH
14165: LD_INT 0
14167: ST_TO_ADDR
// uc_nation := nation_arabian ;
14168: LD_ADDR_OWVAR 21
14172: PUSH
14173: LD_INT 2
14175: ST_TO_ADDR
// hc_gallery :=  ;
14176: LD_ADDR_OWVAR 33
14180: PUSH
14181: LD_STRING 
14183: ST_TO_ADDR
// hc_name :=  ;
14184: LD_ADDR_OWVAR 26
14188: PUSH
14189: LD_STRING 
14191: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14192: LD_INT 1
14194: PPUSH
14195: LD_INT 11
14197: PPUSH
14198: LD_INT 10
14200: PPUSH
14201: CALL_OW 380
// un := CreateHuman ;
14205: LD_ADDR_VAR 0 1
14209: PUSH
14210: CALL_OW 44
14214: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14215: LD_VAR 0 1
14219: PPUSH
14220: LD_INT 1
14222: PPUSH
14223: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14227: LD_INT 35
14229: PPUSH
14230: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14234: LD_VAR 0 1
14238: PPUSH
14239: LD_INT 22
14241: PUSH
14242: LD_OWVAR 2
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PPUSH
14251: CALL_OW 69
14255: PPUSH
14256: LD_VAR 0 1
14260: PPUSH
14261: CALL_OW 74
14265: PPUSH
14266: CALL_OW 115
// until IsDead ( un ) ;
14270: LD_VAR 0 1
14274: PPUSH
14275: CALL_OW 301
14279: IFFALSE 14227
// end ;
14281: PPOPN 1
14283: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14284: LD_EXP 18
14288: PUSH
14289: LD_EXP 58
14293: AND
14294: IFFALSE 14306
14296: GO 14298
14298: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14299: LD_STRING earthquake(getX(game), 0, 32)
14301: PPUSH
14302: CALL_OW 559
14306: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14307: LD_EXP 18
14311: PUSH
14312: LD_EXP 59
14316: AND
14317: IFFALSE 14408
14319: GO 14321
14321: DISABLE
14322: LD_INT 0
14324: PPUSH
// begin enable ;
14325: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14326: LD_ADDR_VAR 0 1
14330: PUSH
14331: LD_INT 22
14333: PUSH
14334: LD_OWVAR 2
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 21
14345: PUSH
14346: LD_INT 2
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 33
14355: PUSH
14356: LD_INT 3
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: LIST
14367: PPUSH
14368: CALL_OW 69
14372: ST_TO_ADDR
// if not tmp then
14373: LD_VAR 0 1
14377: NOT
14378: IFFALSE 14382
// exit ;
14380: GO 14408
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14382: LD_VAR 0 1
14386: PUSH
14387: LD_INT 1
14389: PPUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 12
14399: ARRAY
14400: PPUSH
14401: LD_INT 1
14403: PPUSH
14404: CALL_OW 234
// end ;
14408: PPOPN 1
14410: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14411: LD_EXP 18
14415: PUSH
14416: LD_EXP 60
14420: AND
14421: IFFALSE 14562
14423: GO 14425
14425: DISABLE
14426: LD_INT 0
14428: PPUSH
14429: PPUSH
14430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14431: LD_ADDR_VAR 0 3
14435: PUSH
14436: LD_INT 22
14438: PUSH
14439: LD_OWVAR 2
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 25
14450: PUSH
14451: LD_INT 1
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PPUSH
14462: CALL_OW 69
14466: ST_TO_ADDR
// if not tmp then
14467: LD_VAR 0 3
14471: NOT
14472: IFFALSE 14476
// exit ;
14474: GO 14562
// un := tmp [ rand ( 1 , tmp ) ] ;
14476: LD_ADDR_VAR 0 2
14480: PUSH
14481: LD_VAR 0 3
14485: PUSH
14486: LD_INT 1
14488: PPUSH
14489: LD_VAR 0 3
14493: PPUSH
14494: CALL_OW 12
14498: ARRAY
14499: ST_TO_ADDR
// if Crawls ( un ) then
14500: LD_VAR 0 2
14504: PPUSH
14505: CALL_OW 318
14509: IFFALSE 14520
// ComWalk ( un ) ;
14511: LD_VAR 0 2
14515: PPUSH
14516: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14520: LD_VAR 0 2
14524: PPUSH
14525: LD_INT 9
14527: PPUSH
14528: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14532: LD_INT 28
14534: PPUSH
14535: LD_OWVAR 2
14539: PPUSH
14540: LD_INT 2
14542: PPUSH
14543: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14547: LD_INT 29
14549: PPUSH
14550: LD_OWVAR 2
14554: PPUSH
14555: LD_INT 2
14557: PPUSH
14558: CALL_OW 322
// end ;
14562: PPOPN 3
14564: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14565: LD_EXP 18
14569: PUSH
14570: LD_EXP 61
14574: AND
14575: IFFALSE 14686
14577: GO 14579
14579: DISABLE
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
14584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14585: LD_ADDR_VAR 0 3
14589: PUSH
14590: LD_INT 22
14592: PUSH
14593: LD_OWVAR 2
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: PUSH
14602: LD_INT 25
14604: PUSH
14605: LD_INT 1
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PPUSH
14616: CALL_OW 69
14620: ST_TO_ADDR
// if not tmp then
14621: LD_VAR 0 3
14625: NOT
14626: IFFALSE 14630
// exit ;
14628: GO 14686
// un := tmp [ rand ( 1 , tmp ) ] ;
14630: LD_ADDR_VAR 0 2
14634: PUSH
14635: LD_VAR 0 3
14639: PUSH
14640: LD_INT 1
14642: PPUSH
14643: LD_VAR 0 3
14647: PPUSH
14648: CALL_OW 12
14652: ARRAY
14653: ST_TO_ADDR
// if Crawls ( un ) then
14654: LD_VAR 0 2
14658: PPUSH
14659: CALL_OW 318
14663: IFFALSE 14674
// ComWalk ( un ) ;
14665: LD_VAR 0 2
14669: PPUSH
14670: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14674: LD_VAR 0 2
14678: PPUSH
14679: LD_INT 8
14681: PPUSH
14682: CALL_OW 336
// end ;
14686: PPOPN 3
14688: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14689: LD_EXP 18
14693: PUSH
14694: LD_EXP 62
14698: AND
14699: IFFALSE 14843
14701: GO 14703
14703: DISABLE
14704: LD_INT 0
14706: PPUSH
14707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14708: LD_ADDR_VAR 0 2
14712: PUSH
14713: LD_INT 22
14715: PUSH
14716: LD_OWVAR 2
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 21
14727: PUSH
14728: LD_INT 2
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 2
14737: PUSH
14738: LD_INT 34
14740: PUSH
14741: LD_INT 12
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 34
14750: PUSH
14751: LD_INT 51
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 34
14760: PUSH
14761: LD_INT 32
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: LIST
14778: PPUSH
14779: CALL_OW 69
14783: ST_TO_ADDR
// if not tmp then
14784: LD_VAR 0 2
14788: NOT
14789: IFFALSE 14793
// exit ;
14791: GO 14843
// for i in tmp do
14793: LD_ADDR_VAR 0 1
14797: PUSH
14798: LD_VAR 0 2
14802: PUSH
14803: FOR_IN
14804: IFFALSE 14841
// if GetCargo ( i , mat_artifact ) = 0 then
14806: LD_VAR 0 1
14810: PPUSH
14811: LD_INT 4
14813: PPUSH
14814: CALL_OW 289
14818: PUSH
14819: LD_INT 0
14821: EQUAL
14822: IFFALSE 14839
// SetCargo ( i , mat_siberit , 100 ) ;
14824: LD_VAR 0 1
14828: PPUSH
14829: LD_INT 3
14831: PPUSH
14832: LD_INT 100
14834: PPUSH
14835: CALL_OW 290
14839: GO 14803
14841: POP
14842: POP
// end ;
14843: PPOPN 2
14845: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14846: LD_EXP 18
14850: PUSH
14851: LD_EXP 63
14855: AND
14856: IFFALSE 15039
14858: GO 14860
14860: DISABLE
14861: LD_INT 0
14863: PPUSH
14864: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14865: LD_ADDR_VAR 0 2
14869: PUSH
14870: LD_INT 22
14872: PUSH
14873: LD_OWVAR 2
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PPUSH
14882: CALL_OW 69
14886: ST_TO_ADDR
// if not tmp then
14887: LD_VAR 0 2
14891: NOT
14892: IFFALSE 14896
// exit ;
14894: GO 15039
// for i := 1 to 2 do
14896: LD_ADDR_VAR 0 1
14900: PUSH
14901: DOUBLE
14902: LD_INT 1
14904: DEC
14905: ST_TO_ADDR
14906: LD_INT 2
14908: PUSH
14909: FOR_TO
14910: IFFALSE 15037
// begin uc_side := your_side ;
14912: LD_ADDR_OWVAR 20
14916: PUSH
14917: LD_OWVAR 2
14921: ST_TO_ADDR
// uc_nation := nation_american ;
14922: LD_ADDR_OWVAR 21
14926: PUSH
14927: LD_INT 1
14929: ST_TO_ADDR
// vc_chassis := us_morphling ;
14930: LD_ADDR_OWVAR 37
14934: PUSH
14935: LD_INT 5
14937: ST_TO_ADDR
// vc_engine := engine_siberite ;
14938: LD_ADDR_OWVAR 39
14942: PUSH
14943: LD_INT 3
14945: ST_TO_ADDR
// vc_control := control_computer ;
14946: LD_ADDR_OWVAR 38
14950: PUSH
14951: LD_INT 3
14953: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14954: LD_ADDR_OWVAR 40
14958: PUSH
14959: LD_INT 10
14961: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14962: LD_VAR 0 2
14966: PUSH
14967: LD_INT 1
14969: ARRAY
14970: PPUSH
14971: CALL_OW 310
14975: NOT
14976: IFFALSE 15023
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14978: CALL_OW 45
14982: PPUSH
14983: LD_VAR 0 2
14987: PUSH
14988: LD_INT 1
14990: ARRAY
14991: PPUSH
14992: CALL_OW 250
14996: PPUSH
14997: LD_VAR 0 2
15001: PUSH
15002: LD_INT 1
15004: ARRAY
15005: PPUSH
15006: CALL_OW 251
15010: PPUSH
15011: LD_INT 12
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: CALL_OW 50
15021: GO 15035
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15023: CALL_OW 45
15027: PPUSH
15028: LD_INT 1
15030: PPUSH
15031: CALL_OW 51
// end ;
15035: GO 14909
15037: POP
15038: POP
// end ;
15039: PPOPN 2
15041: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15042: LD_EXP 18
15046: PUSH
15047: LD_EXP 64
15051: AND
15052: IFFALSE 15274
15054: GO 15056
15056: DISABLE
15057: LD_INT 0
15059: PPUSH
15060: PPUSH
15061: PPUSH
15062: PPUSH
15063: PPUSH
15064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15065: LD_ADDR_VAR 0 6
15069: PUSH
15070: LD_INT 22
15072: PUSH
15073: LD_OWVAR 2
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: LD_INT 21
15084: PUSH
15085: LD_INT 1
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PUSH
15092: LD_INT 3
15094: PUSH
15095: LD_INT 23
15097: PUSH
15098: LD_INT 0
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: PPUSH
15114: CALL_OW 69
15118: ST_TO_ADDR
// if not tmp then
15119: LD_VAR 0 6
15123: NOT
15124: IFFALSE 15128
// exit ;
15126: GO 15274
// s1 := rand ( 1 , 4 ) ;
15128: LD_ADDR_VAR 0 2
15132: PUSH
15133: LD_INT 1
15135: PPUSH
15136: LD_INT 4
15138: PPUSH
15139: CALL_OW 12
15143: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15144: LD_ADDR_VAR 0 4
15148: PUSH
15149: LD_VAR 0 6
15153: PUSH
15154: LD_INT 1
15156: ARRAY
15157: PPUSH
15158: LD_VAR 0 2
15162: PPUSH
15163: CALL_OW 259
15167: ST_TO_ADDR
// if s1 = 1 then
15168: LD_VAR 0 2
15172: PUSH
15173: LD_INT 1
15175: EQUAL
15176: IFFALSE 15196
// s2 := rand ( 2 , 4 ) else
15178: LD_ADDR_VAR 0 3
15182: PUSH
15183: LD_INT 2
15185: PPUSH
15186: LD_INT 4
15188: PPUSH
15189: CALL_OW 12
15193: ST_TO_ADDR
15194: GO 15204
// s2 := 1 ;
15196: LD_ADDR_VAR 0 3
15200: PUSH
15201: LD_INT 1
15203: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15204: LD_ADDR_VAR 0 5
15208: PUSH
15209: LD_VAR 0 6
15213: PUSH
15214: LD_INT 1
15216: ARRAY
15217: PPUSH
15218: LD_VAR 0 3
15222: PPUSH
15223: CALL_OW 259
15227: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15228: LD_VAR 0 6
15232: PUSH
15233: LD_INT 1
15235: ARRAY
15236: PPUSH
15237: LD_VAR 0 2
15241: PPUSH
15242: LD_VAR 0 5
15246: PPUSH
15247: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15251: LD_VAR 0 6
15255: PUSH
15256: LD_INT 1
15258: ARRAY
15259: PPUSH
15260: LD_VAR 0 3
15264: PPUSH
15265: LD_VAR 0 4
15269: PPUSH
15270: CALL_OW 237
// end ;
15274: PPOPN 6
15276: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15277: LD_EXP 18
15281: PUSH
15282: LD_EXP 65
15286: AND
15287: IFFALSE 15366
15289: GO 15291
15291: DISABLE
15292: LD_INT 0
15294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15295: LD_ADDR_VAR 0 1
15299: PUSH
15300: LD_INT 22
15302: PUSH
15303: LD_OWVAR 2
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 30
15314: PUSH
15315: LD_INT 3
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PPUSH
15326: CALL_OW 69
15330: ST_TO_ADDR
// if not tmp then
15331: LD_VAR 0 1
15335: NOT
15336: IFFALSE 15340
// exit ;
15338: GO 15366
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15340: LD_VAR 0 1
15344: PUSH
15345: LD_INT 1
15347: PPUSH
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 12
15357: ARRAY
15358: PPUSH
15359: LD_INT 1
15361: PPUSH
15362: CALL_OW 234
// end ;
15366: PPOPN 1
15368: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15369: LD_EXP 18
15373: PUSH
15374: LD_EXP 66
15378: AND
15379: IFFALSE 15491
15381: GO 15383
15383: DISABLE
15384: LD_INT 0
15386: PPUSH
15387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15388: LD_ADDR_VAR 0 2
15392: PUSH
15393: LD_INT 22
15395: PUSH
15396: LD_OWVAR 2
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 2
15407: PUSH
15408: LD_INT 30
15410: PUSH
15411: LD_INT 27
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 30
15420: PUSH
15421: LD_INT 26
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 30
15430: PUSH
15431: LD_INT 28
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PPUSH
15448: CALL_OW 69
15452: ST_TO_ADDR
// if not tmp then
15453: LD_VAR 0 2
15457: NOT
15458: IFFALSE 15462
// exit ;
15460: GO 15491
// for i in tmp do
15462: LD_ADDR_VAR 0 1
15466: PUSH
15467: LD_VAR 0 2
15471: PUSH
15472: FOR_IN
15473: IFFALSE 15489
// SetLives ( i , 1 ) ;
15475: LD_VAR 0 1
15479: PPUSH
15480: LD_INT 1
15482: PPUSH
15483: CALL_OW 234
15487: GO 15472
15489: POP
15490: POP
// end ;
15491: PPOPN 2
15493: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15494: LD_EXP 18
15498: PUSH
15499: LD_EXP 67
15503: AND
15504: IFFALSE 15778
15506: GO 15508
15508: DISABLE
15509: LD_INT 0
15511: PPUSH
15512: PPUSH
15513: PPUSH
// begin i := rand ( 1 , 7 ) ;
15514: LD_ADDR_VAR 0 1
15518: PUSH
15519: LD_INT 1
15521: PPUSH
15522: LD_INT 7
15524: PPUSH
15525: CALL_OW 12
15529: ST_TO_ADDR
// case i of 1 :
15530: LD_VAR 0 1
15534: PUSH
15535: LD_INT 1
15537: DOUBLE
15538: EQUAL
15539: IFTRUE 15543
15541: GO 15553
15543: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15544: LD_STRING earthquake(getX(game), 0, 32)
15546: PPUSH
15547: CALL_OW 559
15551: GO 15778
15553: LD_INT 2
15555: DOUBLE
15556: EQUAL
15557: IFTRUE 15561
15559: GO 15575
15561: POP
// begin ToLua ( displayStucuk(); ) ;
15562: LD_STRING displayStucuk();
15564: PPUSH
15565: CALL_OW 559
// ResetFog ;
15569: CALL_OW 335
// end ; 3 :
15573: GO 15778
15575: LD_INT 3
15577: DOUBLE
15578: EQUAL
15579: IFTRUE 15583
15581: GO 15687
15583: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15584: LD_ADDR_VAR 0 2
15588: PUSH
15589: LD_INT 22
15591: PUSH
15592: LD_OWVAR 2
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 25
15603: PUSH
15604: LD_INT 1
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 69
15619: ST_TO_ADDR
// if not tmp then
15620: LD_VAR 0 2
15624: NOT
15625: IFFALSE 15629
// exit ;
15627: GO 15778
// un := tmp [ rand ( 1 , tmp ) ] ;
15629: LD_ADDR_VAR 0 3
15633: PUSH
15634: LD_VAR 0 2
15638: PUSH
15639: LD_INT 1
15641: PPUSH
15642: LD_VAR 0 2
15646: PPUSH
15647: CALL_OW 12
15651: ARRAY
15652: ST_TO_ADDR
// if Crawls ( un ) then
15653: LD_VAR 0 3
15657: PPUSH
15658: CALL_OW 318
15662: IFFALSE 15673
// ComWalk ( un ) ;
15664: LD_VAR 0 3
15668: PPUSH
15669: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15673: LD_VAR 0 3
15677: PPUSH
15678: LD_INT 8
15680: PPUSH
15681: CALL_OW 336
// end ; 4 :
15685: GO 15778
15687: LD_INT 4
15689: DOUBLE
15690: EQUAL
15691: IFTRUE 15695
15693: GO 15756
15695: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15696: LD_ADDR_VAR 0 2
15700: PUSH
15701: LD_INT 22
15703: PUSH
15704: LD_OWVAR 2
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PUSH
15713: LD_INT 30
15715: PUSH
15716: LD_INT 29
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PPUSH
15727: CALL_OW 69
15731: ST_TO_ADDR
// if not tmp then
15732: LD_VAR 0 2
15736: NOT
15737: IFFALSE 15741
// exit ;
15739: GO 15778
// DestroyUnit ( tmp [ 1 ] ) ;
15741: LD_VAR 0 2
15745: PUSH
15746: LD_INT 1
15748: ARRAY
15749: PPUSH
15750: CALL_OW 65
// end ; 5 .. 7 :
15754: GO 15778
15756: LD_INT 5
15758: DOUBLE
15759: GREATEREQUAL
15760: IFFALSE 15768
15762: LD_INT 7
15764: DOUBLE
15765: LESSEQUAL
15766: IFTRUE 15770
15768: GO 15777
15770: POP
// StreamSibBomb ; end ;
15771: CALL 12028 0 0
15775: GO 15778
15777: POP
// end ;
15778: PPOPN 3
15780: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15781: LD_EXP 18
15785: PUSH
15786: LD_EXP 68
15790: AND
15791: IFFALSE 15947
15793: GO 15795
15795: DISABLE
15796: LD_INT 0
15798: PPUSH
15799: PPUSH
15800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15801: LD_ADDR_VAR 0 2
15805: PUSH
15806: LD_INT 81
15808: PUSH
15809: LD_OWVAR 2
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 2
15820: PUSH
15821: LD_INT 21
15823: PUSH
15824: LD_INT 1
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 21
15833: PUSH
15834: LD_INT 2
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: LIST
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PPUSH
15850: CALL_OW 69
15854: ST_TO_ADDR
// if not tmp then
15855: LD_VAR 0 2
15859: NOT
15860: IFFALSE 15864
// exit ;
15862: GO 15947
// p := 0 ;
15864: LD_ADDR_VAR 0 3
15868: PUSH
15869: LD_INT 0
15871: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15872: LD_INT 35
15874: PPUSH
15875: CALL_OW 67
// p := p + 1 ;
15879: LD_ADDR_VAR 0 3
15883: PUSH
15884: LD_VAR 0 3
15888: PUSH
15889: LD_INT 1
15891: PLUS
15892: ST_TO_ADDR
// for i in tmp do
15893: LD_ADDR_VAR 0 1
15897: PUSH
15898: LD_VAR 0 2
15902: PUSH
15903: FOR_IN
15904: IFFALSE 15935
// if GetLives ( i ) < 1000 then
15906: LD_VAR 0 1
15910: PPUSH
15911: CALL_OW 256
15915: PUSH
15916: LD_INT 1000
15918: LESS
15919: IFFALSE 15933
// SetLives ( i , 1000 ) ;
15921: LD_VAR 0 1
15925: PPUSH
15926: LD_INT 1000
15928: PPUSH
15929: CALL_OW 234
15933: GO 15903
15935: POP
15936: POP
// until p > 20 ;
15937: LD_VAR 0 3
15941: PUSH
15942: LD_INT 20
15944: GREATER
15945: IFFALSE 15872
// end ;
15947: PPOPN 3
15949: END
// every 0 0$1 trigger StreamModeActive and sTime do
15950: LD_EXP 18
15954: PUSH
15955: LD_EXP 69
15959: AND
15960: IFFALSE 15995
15962: GO 15964
15964: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15965: LD_INT 28
15967: PPUSH
15968: LD_OWVAR 2
15972: PPUSH
15973: LD_INT 2
15975: PPUSH
15976: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15980: LD_INT 30
15982: PPUSH
15983: LD_OWVAR 2
15987: PPUSH
15988: LD_INT 2
15990: PPUSH
15991: CALL_OW 322
// end ;
15995: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15996: LD_EXP 18
16000: PUSH
16001: LD_EXP 70
16005: AND
16006: IFFALSE 16127
16008: GO 16010
16010: DISABLE
16011: LD_INT 0
16013: PPUSH
16014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16015: LD_ADDR_VAR 0 2
16019: PUSH
16020: LD_INT 22
16022: PUSH
16023: LD_OWVAR 2
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 21
16034: PUSH
16035: LD_INT 1
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 3
16044: PUSH
16045: LD_INT 23
16047: PUSH
16048: LD_INT 0
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 69
16068: ST_TO_ADDR
// if not tmp then
16069: LD_VAR 0 2
16073: NOT
16074: IFFALSE 16078
// exit ;
16076: GO 16127
// for i in tmp do
16078: LD_ADDR_VAR 0 1
16082: PUSH
16083: LD_VAR 0 2
16087: PUSH
16088: FOR_IN
16089: IFFALSE 16125
// begin if Crawls ( i ) then
16091: LD_VAR 0 1
16095: PPUSH
16096: CALL_OW 318
16100: IFFALSE 16111
// ComWalk ( i ) ;
16102: LD_VAR 0 1
16106: PPUSH
16107: CALL_OW 138
// SetClass ( i , 2 ) ;
16111: LD_VAR 0 1
16115: PPUSH
16116: LD_INT 2
16118: PPUSH
16119: CALL_OW 336
// end ;
16123: GO 16088
16125: POP
16126: POP
// end ;
16127: PPOPN 2
16129: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16130: LD_EXP 18
16134: PUSH
16135: LD_EXP 71
16139: AND
16140: IFFALSE 16421
16142: GO 16144
16144: DISABLE
16145: LD_INT 0
16147: PPUSH
16148: PPUSH
16149: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16150: LD_OWVAR 2
16154: PPUSH
16155: LD_INT 9
16157: PPUSH
16158: LD_INT 1
16160: PPUSH
16161: LD_INT 1
16163: PPUSH
16164: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16168: LD_INT 9
16170: PPUSH
16171: LD_OWVAR 2
16175: PPUSH
16176: CALL_OW 343
// uc_side := 9 ;
16180: LD_ADDR_OWVAR 20
16184: PUSH
16185: LD_INT 9
16187: ST_TO_ADDR
// uc_nation := 2 ;
16188: LD_ADDR_OWVAR 21
16192: PUSH
16193: LD_INT 2
16195: ST_TO_ADDR
// hc_name := Dark Warrior ;
16196: LD_ADDR_OWVAR 26
16200: PUSH
16201: LD_STRING Dark Warrior
16203: ST_TO_ADDR
// hc_gallery :=  ;
16204: LD_ADDR_OWVAR 33
16208: PUSH
16209: LD_STRING 
16211: ST_TO_ADDR
// hc_noskilllimit := true ;
16212: LD_ADDR_OWVAR 76
16216: PUSH
16217: LD_INT 1
16219: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16220: LD_ADDR_OWVAR 31
16224: PUSH
16225: LD_INT 30
16227: PUSH
16228: LD_INT 30
16230: PUSH
16231: LD_INT 30
16233: PUSH
16234: LD_INT 30
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: ST_TO_ADDR
// un := CreateHuman ;
16243: LD_ADDR_VAR 0 3
16247: PUSH
16248: CALL_OW 44
16252: ST_TO_ADDR
// hc_noskilllimit := false ;
16253: LD_ADDR_OWVAR 76
16257: PUSH
16258: LD_INT 0
16260: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16261: LD_VAR 0 3
16265: PPUSH
16266: LD_INT 1
16268: PPUSH
16269: CALL_OW 51
// p := 0 ;
16273: LD_ADDR_VAR 0 2
16277: PUSH
16278: LD_INT 0
16280: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16281: LD_INT 35
16283: PPUSH
16284: CALL_OW 67
// p := p + 1 ;
16288: LD_ADDR_VAR 0 2
16292: PUSH
16293: LD_VAR 0 2
16297: PUSH
16298: LD_INT 1
16300: PLUS
16301: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16302: LD_VAR 0 3
16306: PPUSH
16307: CALL_OW 256
16311: PUSH
16312: LD_INT 1000
16314: LESS
16315: IFFALSE 16329
// SetLives ( un , 1000 ) ;
16317: LD_VAR 0 3
16321: PPUSH
16322: LD_INT 1000
16324: PPUSH
16325: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16329: LD_VAR 0 3
16333: PPUSH
16334: LD_INT 81
16336: PUSH
16337: LD_OWVAR 2
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 91
16348: PUSH
16349: LD_VAR 0 3
16353: PUSH
16354: LD_INT 30
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: LIST
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: PPUSH
16366: CALL_OW 69
16370: PPUSH
16371: LD_VAR 0 3
16375: PPUSH
16376: CALL_OW 74
16380: PPUSH
16381: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16385: LD_VAR 0 2
16389: PUSH
16390: LD_INT 60
16392: GREATER
16393: PUSH
16394: LD_VAR 0 3
16398: PPUSH
16399: CALL_OW 301
16403: OR
16404: IFFALSE 16281
// if un then
16406: LD_VAR 0 3
16410: IFFALSE 16421
// RemoveUnit ( un ) ;
16412: LD_VAR 0 3
16416: PPUSH
16417: CALL_OW 64
// end ;
16421: PPOPN 3
16423: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16424: LD_INT 0
16426: PPUSH
16427: PPUSH
16428: PPUSH
16429: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16430: LD_ADDR_VAR 0 4
16434: PUSH
16435: LD_INT 22
16437: PUSH
16438: LD_OWVAR 2
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 2
16449: PUSH
16450: LD_INT 30
16452: PUSH
16453: LD_INT 0
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 30
16462: PUSH
16463: LD_INT 1
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: LIST
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PPUSH
16479: CALL_OW 69
16483: ST_TO_ADDR
// if not tmp then
16484: LD_VAR 0 4
16488: NOT
16489: IFFALSE 16493
// exit ;
16491: GO 16552
// for i in tmp do
16493: LD_ADDR_VAR 0 2
16497: PUSH
16498: LD_VAR 0 4
16502: PUSH
16503: FOR_IN
16504: IFFALSE 16550
// for j = 1 to 3 do
16506: LD_ADDR_VAR 0 3
16510: PUSH
16511: DOUBLE
16512: LD_INT 1
16514: DEC
16515: ST_TO_ADDR
16516: LD_INT 3
16518: PUSH
16519: FOR_TO
16520: IFFALSE 16546
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16522: LD_VAR 0 2
16526: PPUSH
16527: CALL_OW 274
16531: PPUSH
16532: LD_VAR 0 3
16536: PPUSH
16537: LD_INT 99999
16539: PPUSH
16540: CALL_OW 277
16544: GO 16519
16546: POP
16547: POP
16548: GO 16503
16550: POP
16551: POP
// end ;
16552: LD_VAR 0 1
16556: RET
// export function hHackSetLevel10 ; var i , j ; begin
16557: LD_INT 0
16559: PPUSH
16560: PPUSH
16561: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16562: LD_ADDR_VAR 0 2
16566: PUSH
16567: LD_INT 21
16569: PUSH
16570: LD_INT 1
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PPUSH
16577: CALL_OW 69
16581: PUSH
16582: FOR_IN
16583: IFFALSE 16635
// if IsSelected ( i ) then
16585: LD_VAR 0 2
16589: PPUSH
16590: CALL_OW 306
16594: IFFALSE 16633
// begin for j := 1 to 4 do
16596: LD_ADDR_VAR 0 3
16600: PUSH
16601: DOUBLE
16602: LD_INT 1
16604: DEC
16605: ST_TO_ADDR
16606: LD_INT 4
16608: PUSH
16609: FOR_TO
16610: IFFALSE 16631
// SetSkill ( i , j , 10 ) ;
16612: LD_VAR 0 2
16616: PPUSH
16617: LD_VAR 0 3
16621: PPUSH
16622: LD_INT 10
16624: PPUSH
16625: CALL_OW 237
16629: GO 16609
16631: POP
16632: POP
// end ;
16633: GO 16582
16635: POP
16636: POP
// end ;
16637: LD_VAR 0 1
16641: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16642: LD_INT 0
16644: PPUSH
16645: PPUSH
16646: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16647: LD_ADDR_VAR 0 2
16651: PUSH
16652: LD_INT 22
16654: PUSH
16655: LD_OWVAR 2
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 21
16666: PUSH
16667: LD_INT 1
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PPUSH
16678: CALL_OW 69
16682: PUSH
16683: FOR_IN
16684: IFFALSE 16725
// begin for j := 1 to 4 do
16686: LD_ADDR_VAR 0 3
16690: PUSH
16691: DOUBLE
16692: LD_INT 1
16694: DEC
16695: ST_TO_ADDR
16696: LD_INT 4
16698: PUSH
16699: FOR_TO
16700: IFFALSE 16721
// SetSkill ( i , j , 10 ) ;
16702: LD_VAR 0 2
16706: PPUSH
16707: LD_VAR 0 3
16711: PPUSH
16712: LD_INT 10
16714: PPUSH
16715: CALL_OW 237
16719: GO 16699
16721: POP
16722: POP
// end ;
16723: GO 16683
16725: POP
16726: POP
// end ;
16727: LD_VAR 0 1
16731: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
16732: LD_INT 0
16734: PPUSH
// uc_side := your_side ;
16735: LD_ADDR_OWVAR 20
16739: PUSH
16740: LD_OWVAR 2
16744: ST_TO_ADDR
// uc_nation := nation ;
16745: LD_ADDR_OWVAR 21
16749: PUSH
16750: LD_VAR 0 1
16754: ST_TO_ADDR
// InitHc ;
16755: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16759: LD_INT 0
16761: PPUSH
16762: LD_VAR 0 2
16766: PPUSH
16767: LD_VAR 0 3
16771: PPUSH
16772: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
16776: CALL_OW 44
16780: PPUSH
16781: LD_INT 1
16783: PPUSH
16784: CALL_OW 51
// end ;
16788: LD_VAR 0 4
16792: RET
// export function hHackSpawnVehicle ; begin
16793: LD_INT 0
16795: PPUSH
// uc_side := your_side ;
16796: LD_ADDR_OWVAR 20
16800: PUSH
16801: LD_OWVAR 2
16805: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
16806: LD_ADDR_OWVAR 21
16810: PUSH
16811: LD_INT 1
16813: PPUSH
16814: LD_INT 3
16816: PPUSH
16817: CALL_OW 12
16821: ST_TO_ADDR
// InitVc ;
16822: CALL_OW 20
// case uc_nation of 1 :
16826: LD_OWVAR 21
16830: PUSH
16831: LD_INT 1
16833: DOUBLE
16834: EQUAL
16835: IFTRUE 16839
16837: GO 16983
16839: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
16840: LD_ADDR_OWVAR 37
16844: PUSH
16845: LD_INT 1
16847: PUSH
16848: LD_INT 2
16850: PUSH
16851: LD_INT 3
16853: PUSH
16854: LD_INT 4
16856: PUSH
16857: LD_INT 5
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 1
16869: PPUSH
16870: LD_INT 5
16872: PPUSH
16873: CALL_OW 12
16877: ARRAY
16878: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16879: LD_ADDR_OWVAR 39
16883: PUSH
16884: LD_INT 1
16886: PPUSH
16887: LD_INT 3
16889: PPUSH
16890: CALL_OW 12
16894: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
16895: LD_ADDR_OWVAR 38
16899: PUSH
16900: LD_INT 1
16902: PUSH
16903: LD_INT 2
16905: PUSH
16906: LD_INT 3
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 1
16916: PPUSH
16917: LD_INT 3
16919: PPUSH
16920: CALL_OW 12
16924: ARRAY
16925: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
16926: LD_ADDR_OWVAR 40
16930: PUSH
16931: LD_INT 2
16933: PUSH
16934: LD_INT 4
16936: PUSH
16937: LD_INT 5
16939: PUSH
16940: LD_INT 3
16942: PUSH
16943: LD_INT 7
16945: PUSH
16946: LD_INT 8
16948: PUSH
16949: LD_INT 9
16951: PUSH
16952: LD_INT 10
16954: PUSH
16955: LD_INT 6
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 1
16971: PPUSH
16972: LD_INT 9
16974: PPUSH
16975: CALL_OW 12
16979: ARRAY
16980: ST_TO_ADDR
// end ; 2 :
16981: GO 17248
16983: LD_INT 2
16985: DOUBLE
16986: EQUAL
16987: IFTRUE 16991
16989: GO 17115
16991: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
16992: LD_ADDR_OWVAR 37
16996: PUSH
16997: LD_INT 11
16999: PUSH
17000: LD_INT 12
17002: PUSH
17003: LD_INT 13
17005: PUSH
17006: LD_INT 14
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 1
17017: PPUSH
17018: LD_INT 4
17020: PPUSH
17021: CALL_OW 12
17025: ARRAY
17026: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
17027: LD_ADDR_OWVAR 39
17031: PUSH
17032: LD_INT 1
17034: PPUSH
17035: LD_INT 3
17037: PPUSH
17038: CALL_OW 12
17042: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
17043: LD_ADDR_OWVAR 38
17047: PUSH
17048: LD_INT 1
17050: PUSH
17051: LD_INT 2
17053: PUSH
17054: LD_INT 5
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 1
17064: PPUSH
17065: LD_INT 3
17067: PPUSH
17068: CALL_OW 12
17072: ARRAY
17073: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
17074: LD_ADDR_OWVAR 40
17078: PUSH
17079: LD_INT 24
17081: PUSH
17082: LD_INT 26
17084: PUSH
17085: LD_INT 27
17087: PUSH
17088: LD_INT 28
17090: PUSH
17091: LD_INT 29
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 1
17103: PPUSH
17104: LD_INT 5
17106: PPUSH
17107: CALL_OW 12
17111: ARRAY
17112: ST_TO_ADDR
// end ; 3 :
17113: GO 17248
17115: LD_INT 3
17117: DOUBLE
17118: EQUAL
17119: IFTRUE 17123
17121: GO 17247
17123: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
17124: LD_ADDR_OWVAR 37
17128: PUSH
17129: LD_INT 21
17131: PUSH
17132: LD_INT 23
17134: PUSH
17135: LD_INT 22
17137: PUSH
17138: LD_INT 24
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 1
17149: PPUSH
17150: LD_INT 4
17152: PPUSH
17153: CALL_OW 12
17157: ARRAY
17158: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
17159: LD_ADDR_OWVAR 39
17163: PUSH
17164: LD_INT 1
17166: PPUSH
17167: LD_INT 3
17169: PPUSH
17170: CALL_OW 12
17174: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
17175: LD_ADDR_OWVAR 38
17179: PUSH
17180: LD_INT 1
17182: PUSH
17183: LD_INT 3
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 1
17192: PPUSH
17193: LD_INT 2
17195: PPUSH
17196: CALL_OW 12
17200: ARRAY
17201: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
17202: LD_ADDR_OWVAR 40
17206: PUSH
17207: LD_INT 42
17209: PUSH
17210: LD_INT 43
17212: PUSH
17213: LD_INT 44
17215: PUSH
17216: LD_INT 46
17218: PUSH
17219: LD_INT 48
17221: PUSH
17222: LD_INT 47
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 1
17235: PPUSH
17236: LD_INT 6
17238: PPUSH
17239: CALL_OW 12
17243: ARRAY
17244: ST_TO_ADDR
// end ; end ;
17245: GO 17248
17247: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17248: CALL_OW 45
17252: PPUSH
17253: LD_INT 1
17255: PPUSH
17256: CALL_OW 51
// end ;
17260: LD_VAR 0 1
17264: RET
// export hInvincible ; every 1 do
17265: GO 17267
17267: DISABLE
// hInvincible := [ ] ;
17268: LD_ADDR_EXP 72
17272: PUSH
17273: EMPTY
17274: ST_TO_ADDR
17275: END
// every 10 do var i ;
17276: GO 17278
17278: DISABLE
17279: LD_INT 0
17281: PPUSH
// begin enable ;
17282: ENABLE
// if not hInvincible then
17283: LD_EXP 72
17287: NOT
17288: IFFALSE 17292
// exit ;
17290: GO 17336
// for i in hInvincible do
17292: LD_ADDR_VAR 0 1
17296: PUSH
17297: LD_EXP 72
17301: PUSH
17302: FOR_IN
17303: IFFALSE 17334
// if GetLives ( i ) < 1000 then
17305: LD_VAR 0 1
17309: PPUSH
17310: CALL_OW 256
17314: PUSH
17315: LD_INT 1000
17317: LESS
17318: IFFALSE 17332
// SetLives ( i , 1000 ) ;
17320: LD_VAR 0 1
17324: PPUSH
17325: LD_INT 1000
17327: PPUSH
17328: CALL_OW 234
17332: GO 17302
17334: POP
17335: POP
// end ;
17336: PPOPN 1
17338: END
// export function hHackInvincible ; var i ; begin
17339: LD_INT 0
17341: PPUSH
17342: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17343: LD_ADDR_VAR 0 2
17347: PUSH
17348: LD_INT 2
17350: PUSH
17351: LD_INT 21
17353: PUSH
17354: LD_INT 1
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 21
17363: PUSH
17364: LD_INT 2
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: PPUSH
17376: CALL_OW 69
17380: PUSH
17381: FOR_IN
17382: IFFALSE 17443
// if IsSelected ( i ) then
17384: LD_VAR 0 2
17388: PPUSH
17389: CALL_OW 306
17393: IFFALSE 17441
// begin if i in hInvincible then
17395: LD_VAR 0 2
17399: PUSH
17400: LD_EXP 72
17404: IN
17405: IFFALSE 17425
// hInvincible := hInvincible diff i else
17407: LD_ADDR_EXP 72
17411: PUSH
17412: LD_EXP 72
17416: PUSH
17417: LD_VAR 0 2
17421: DIFF
17422: ST_TO_ADDR
17423: GO 17441
// hInvincible := hInvincible union i ;
17425: LD_ADDR_EXP 72
17429: PUSH
17430: LD_EXP 72
17434: PUSH
17435: LD_VAR 0 2
17439: UNION
17440: ST_TO_ADDR
// end ;
17441: GO 17381
17443: POP
17444: POP
// end ;
17445: LD_VAR 0 1
17449: RET
// export function hHackInvisible ; var i , j ; begin
17450: LD_INT 0
17452: PPUSH
17453: PPUSH
17454: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17455: LD_ADDR_VAR 0 2
17459: PUSH
17460: LD_INT 21
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PPUSH
17470: CALL_OW 69
17474: PUSH
17475: FOR_IN
17476: IFFALSE 17500
// if IsSelected ( i ) then
17478: LD_VAR 0 2
17482: PPUSH
17483: CALL_OW 306
17487: IFFALSE 17498
// ComForceInvisible ( i ) ;
17489: LD_VAR 0 2
17493: PPUSH
17494: CALL_OW 496
17498: GO 17475
17500: POP
17501: POP
// end ;
17502: LD_VAR 0 1
17506: RET
// export function hHackChangeYourSide ; begin
17507: LD_INT 0
17509: PPUSH
// if your_side = 8 then
17510: LD_OWVAR 2
17514: PUSH
17515: LD_INT 8
17517: EQUAL
17518: IFFALSE 17530
// your_side := 0 else
17520: LD_ADDR_OWVAR 2
17524: PUSH
17525: LD_INT 0
17527: ST_TO_ADDR
17528: GO 17544
// your_side := your_side + 1 ;
17530: LD_ADDR_OWVAR 2
17534: PUSH
17535: LD_OWVAR 2
17539: PUSH
17540: LD_INT 1
17542: PLUS
17543: ST_TO_ADDR
// end ;
17544: LD_VAR 0 1
17548: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17549: LD_INT 0
17551: PPUSH
17552: PPUSH
17553: PPUSH
// for i in all_units do
17554: LD_ADDR_VAR 0 2
17558: PUSH
17559: LD_OWVAR 3
17563: PUSH
17564: FOR_IN
17565: IFFALSE 17643
// if IsSelected ( i ) then
17567: LD_VAR 0 2
17571: PPUSH
17572: CALL_OW 306
17576: IFFALSE 17641
// begin j := GetSide ( i ) ;
17578: LD_ADDR_VAR 0 3
17582: PUSH
17583: LD_VAR 0 2
17587: PPUSH
17588: CALL_OW 255
17592: ST_TO_ADDR
// if j = 8 then
17593: LD_VAR 0 3
17597: PUSH
17598: LD_INT 8
17600: EQUAL
17601: IFFALSE 17613
// j := 0 else
17603: LD_ADDR_VAR 0 3
17607: PUSH
17608: LD_INT 0
17610: ST_TO_ADDR
17611: GO 17627
// j := j + 1 ;
17613: LD_ADDR_VAR 0 3
17617: PUSH
17618: LD_VAR 0 3
17622: PUSH
17623: LD_INT 1
17625: PLUS
17626: ST_TO_ADDR
// SetSide ( i , j ) ;
17627: LD_VAR 0 2
17631: PPUSH
17632: LD_VAR 0 3
17636: PPUSH
17637: CALL_OW 235
// end ;
17641: GO 17564
17643: POP
17644: POP
// end ;
17645: LD_VAR 0 1
17649: RET
// export function hHackFog ; begin
17650: LD_INT 0
17652: PPUSH
// FogOff ( true ) ;
17653: LD_INT 1
17655: PPUSH
17656: CALL_OW 344
// end ;
17660: LD_VAR 0 1
17664: RET
// export function hHackApeman ; begin
17665: LD_INT 0
17667: PPUSH
// uc_side := your_side ;
17668: LD_ADDR_OWVAR 20
17672: PUSH
17673: LD_OWVAR 2
17677: ST_TO_ADDR
// uc_nation := 0 ;
17678: LD_ADDR_OWVAR 21
17682: PUSH
17683: LD_INT 0
17685: ST_TO_ADDR
// hc_name :=  ;
17686: LD_ADDR_OWVAR 26
17690: PUSH
17691: LD_STRING 
17693: ST_TO_ADDR
// hc_gallery :=  ;
17694: LD_ADDR_OWVAR 33
17698: PUSH
17699: LD_STRING 
17701: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
17702: LD_ADDR_OWVAR 31
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: LD_INT 0
17712: PUSH
17713: LD_INT 0
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: ST_TO_ADDR
// hc_class := class_apeman ;
17725: LD_ADDR_OWVAR 28
17729: PUSH
17730: LD_INT 12
17732: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
17733: CALL_OW 44
17737: PPUSH
17738: LD_INT 1
17740: PPUSH
17741: CALL_OW 51
// end ;
17745: LD_VAR 0 1
17749: RET
// export function hHackBoom ; begin
17750: LD_INT 0
17752: PPUSH
// uc_side := your_side ;
17753: LD_ADDR_OWVAR 20
17757: PUSH
17758: LD_OWVAR 2
17762: ST_TO_ADDR
// uc_nation := 1 ;
17763: LD_ADDR_OWVAR 21
17767: PUSH
17768: LD_INT 1
17770: ST_TO_ADDR
// vc_chassis := us_morphling ;
17771: LD_ADDR_OWVAR 37
17775: PUSH
17776: LD_INT 5
17778: ST_TO_ADDR
// vc_engine := engine_siberite ;
17779: LD_ADDR_OWVAR 39
17783: PUSH
17784: LD_INT 3
17786: ST_TO_ADDR
// vc_control := control_computer ;
17787: LD_ADDR_OWVAR 38
17791: PUSH
17792: LD_INT 3
17794: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
17795: LD_ADDR_OWVAR 40
17799: PUSH
17800: LD_INT 8
17802: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17803: CALL_OW 45
17807: PPUSH
17808: LD_INT 1
17810: PPUSH
17811: CALL_OW 51
// end ; end_of_file end_of_file
17815: LD_VAR 0 1
17819: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
17820: LD_INT 0
17822: PPUSH
// ar_crane := 88 ;
17823: LD_ADDR_EXP 79
17827: PUSH
17828: LD_INT 88
17830: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
17831: LD_ADDR_EXP 74
17835: PUSH
17836: LD_INT 89
17838: ST_TO_ADDR
// us_hack := 99 ;
17839: LD_ADDR_EXP 75
17843: PUSH
17844: LD_INT 99
17846: ST_TO_ADDR
// us_artillery := 97 ;
17847: LD_ADDR_EXP 76
17851: PUSH
17852: LD_INT 97
17854: ST_TO_ADDR
// ar_bio_bomb := 91 ;
17855: LD_ADDR_EXP 77
17859: PUSH
17860: LD_INT 91
17862: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
17863: LD_ADDR_EXP 78
17867: PUSH
17868: LD_INT 92
17870: ST_TO_ADDR
// ru_radar := 98 ;
17871: LD_ADDR_EXP 73
17875: PUSH
17876: LD_INT 98
17878: ST_TO_ADDR
// tech_Artillery := 80 ;
17879: LD_ADDR_EXP 80
17883: PUSH
17884: LD_INT 80
17886: ST_TO_ADDR
// tech_RadMat := 81 ;
17887: LD_ADDR_EXP 81
17891: PUSH
17892: LD_INT 81
17894: ST_TO_ADDR
// tech_BasicTools := 82 ;
17895: LD_ADDR_EXP 82
17899: PUSH
17900: LD_INT 82
17902: ST_TO_ADDR
// tech_Cargo := 83 ;
17903: LD_ADDR_EXP 83
17907: PUSH
17908: LD_INT 83
17910: ST_TO_ADDR
// tech_Track := 84 ;
17911: LD_ADDR_EXP 84
17915: PUSH
17916: LD_INT 84
17918: ST_TO_ADDR
// tech_Crane := 85 ;
17919: LD_ADDR_EXP 85
17923: PUSH
17924: LD_INT 85
17926: ST_TO_ADDR
// tech_Bulldozer := 86 ;
17927: LD_ADDR_EXP 86
17931: PUSH
17932: LD_INT 86
17934: ST_TO_ADDR
// tech_Hovercraft := 87 ;
17935: LD_ADDR_EXP 87
17939: PUSH
17940: LD_INT 87
17942: ST_TO_ADDR
// end ;
17943: LD_VAR 0 1
17947: RET
// every 1 do
17948: GO 17950
17950: DISABLE
// InitGlobalVariables ; end_of_file
17951: CALL 17820 0 0
17955: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17956: LD_INT 0
17958: PPUSH
17959: PPUSH
// if exist_mode then
17960: LD_VAR 0 2
17964: IFFALSE 17989
// unit := CreateCharacter ( prefix & ident ) else
17966: LD_ADDR_VAR 0 5
17970: PUSH
17971: LD_VAR 0 3
17975: PUSH
17976: LD_VAR 0 1
17980: STR
17981: PPUSH
17982: CALL_OW 34
17986: ST_TO_ADDR
17987: GO 18004
// unit := NewCharacter ( ident ) ;
17989: LD_ADDR_VAR 0 5
17993: PUSH
17994: LD_VAR 0 1
17998: PPUSH
17999: CALL_OW 25
18003: ST_TO_ADDR
// result := unit ;
18004: LD_ADDR_VAR 0 4
18008: PUSH
18009: LD_VAR 0 5
18013: ST_TO_ADDR
// end ;
18014: LD_VAR 0 4
18018: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
18019: LD_INT 0
18021: PPUSH
18022: PPUSH
// if not side or not nation then
18023: LD_VAR 0 1
18027: NOT
18028: PUSH
18029: LD_VAR 0 2
18033: NOT
18034: OR
18035: IFFALSE 18039
// exit ;
18037: GO 18803
// case nation of nation_american :
18039: LD_VAR 0 2
18043: PUSH
18044: LD_INT 1
18046: DOUBLE
18047: EQUAL
18048: IFTRUE 18052
18050: GO 18266
18052: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
18053: LD_ADDR_VAR 0 4
18057: PUSH
18058: LD_INT 35
18060: PUSH
18061: LD_INT 45
18063: PUSH
18064: LD_INT 46
18066: PUSH
18067: LD_INT 47
18069: PUSH
18070: LD_INT 82
18072: PUSH
18073: LD_INT 83
18075: PUSH
18076: LD_INT 84
18078: PUSH
18079: LD_INT 85
18081: PUSH
18082: LD_INT 86
18084: PUSH
18085: LD_INT 1
18087: PUSH
18088: LD_INT 2
18090: PUSH
18091: LD_INT 6
18093: PUSH
18094: LD_INT 15
18096: PUSH
18097: LD_INT 16
18099: PUSH
18100: LD_INT 7
18102: PUSH
18103: LD_INT 12
18105: PUSH
18106: LD_INT 13
18108: PUSH
18109: LD_INT 10
18111: PUSH
18112: LD_INT 14
18114: PUSH
18115: LD_INT 20
18117: PUSH
18118: LD_INT 21
18120: PUSH
18121: LD_INT 22
18123: PUSH
18124: LD_INT 25
18126: PUSH
18127: LD_INT 32
18129: PUSH
18130: LD_INT 27
18132: PUSH
18133: LD_INT 36
18135: PUSH
18136: LD_INT 69
18138: PUSH
18139: LD_INT 39
18141: PUSH
18142: LD_INT 34
18144: PUSH
18145: LD_INT 40
18147: PUSH
18148: LD_INT 48
18150: PUSH
18151: LD_INT 49
18153: PUSH
18154: LD_INT 50
18156: PUSH
18157: LD_INT 51
18159: PUSH
18160: LD_INT 52
18162: PUSH
18163: LD_INT 53
18165: PUSH
18166: LD_INT 54
18168: PUSH
18169: LD_INT 55
18171: PUSH
18172: LD_INT 56
18174: PUSH
18175: LD_INT 57
18177: PUSH
18178: LD_INT 58
18180: PUSH
18181: LD_INT 59
18183: PUSH
18184: LD_INT 60
18186: PUSH
18187: LD_INT 61
18189: PUSH
18190: LD_INT 62
18192: PUSH
18193: LD_INT 80
18195: PUSH
18196: LD_INT 82
18198: PUSH
18199: LD_INT 83
18201: PUSH
18202: LD_INT 84
18204: PUSH
18205: LD_INT 85
18207: PUSH
18208: LD_INT 86
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: ST_TO_ADDR
18264: GO 18727
18266: LD_INT 2
18268: DOUBLE
18269: EQUAL
18270: IFTRUE 18274
18272: GO 18496
18274: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
18275: LD_ADDR_VAR 0 4
18279: PUSH
18280: LD_INT 35
18282: PUSH
18283: LD_INT 45
18285: PUSH
18286: LD_INT 46
18288: PUSH
18289: LD_INT 47
18291: PUSH
18292: LD_INT 82
18294: PUSH
18295: LD_INT 83
18297: PUSH
18298: LD_INT 84
18300: PUSH
18301: LD_INT 85
18303: PUSH
18304: LD_INT 87
18306: PUSH
18307: LD_INT 70
18309: PUSH
18310: LD_INT 1
18312: PUSH
18313: LD_INT 11
18315: PUSH
18316: LD_INT 3
18318: PUSH
18319: LD_INT 4
18321: PUSH
18322: LD_INT 5
18324: PUSH
18325: LD_INT 6
18327: PUSH
18328: LD_INT 15
18330: PUSH
18331: LD_INT 18
18333: PUSH
18334: LD_INT 7
18336: PUSH
18337: LD_INT 17
18339: PUSH
18340: LD_INT 8
18342: PUSH
18343: LD_INT 20
18345: PUSH
18346: LD_INT 21
18348: PUSH
18349: LD_INT 22
18351: PUSH
18352: LD_INT 72
18354: PUSH
18355: LD_INT 26
18357: PUSH
18358: LD_INT 69
18360: PUSH
18361: LD_INT 39
18363: PUSH
18364: LD_INT 40
18366: PUSH
18367: LD_INT 41
18369: PUSH
18370: LD_INT 42
18372: PUSH
18373: LD_INT 43
18375: PUSH
18376: LD_INT 48
18378: PUSH
18379: LD_INT 49
18381: PUSH
18382: LD_INT 50
18384: PUSH
18385: LD_INT 51
18387: PUSH
18388: LD_INT 52
18390: PUSH
18391: LD_INT 53
18393: PUSH
18394: LD_INT 54
18396: PUSH
18397: LD_INT 55
18399: PUSH
18400: LD_INT 56
18402: PUSH
18403: LD_INT 60
18405: PUSH
18406: LD_INT 61
18408: PUSH
18409: LD_INT 62
18411: PUSH
18412: LD_INT 66
18414: PUSH
18415: LD_INT 67
18417: PUSH
18418: LD_INT 68
18420: PUSH
18421: LD_INT 81
18423: PUSH
18424: LD_INT 82
18426: PUSH
18427: LD_INT 83
18429: PUSH
18430: LD_INT 84
18432: PUSH
18433: LD_INT 85
18435: PUSH
18436: LD_INT 87
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: ST_TO_ADDR
18494: GO 18727
18496: LD_INT 3
18498: DOUBLE
18499: EQUAL
18500: IFTRUE 18504
18502: GO 18726
18504: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
18505: LD_ADDR_VAR 0 4
18509: PUSH
18510: LD_INT 46
18512: PUSH
18513: LD_INT 47
18515: PUSH
18516: LD_INT 1
18518: PUSH
18519: LD_INT 2
18521: PUSH
18522: LD_INT 82
18524: PUSH
18525: LD_INT 83
18527: PUSH
18528: LD_INT 84
18530: PUSH
18531: LD_INT 85
18533: PUSH
18534: LD_INT 86
18536: PUSH
18537: LD_INT 11
18539: PUSH
18540: LD_INT 9
18542: PUSH
18543: LD_INT 20
18545: PUSH
18546: LD_INT 19
18548: PUSH
18549: LD_INT 21
18551: PUSH
18552: LD_INT 24
18554: PUSH
18555: LD_INT 22
18557: PUSH
18558: LD_INT 25
18560: PUSH
18561: LD_INT 28
18563: PUSH
18564: LD_INT 29
18566: PUSH
18567: LD_INT 30
18569: PUSH
18570: LD_INT 31
18572: PUSH
18573: LD_INT 37
18575: PUSH
18576: LD_INT 38
18578: PUSH
18579: LD_INT 32
18581: PUSH
18582: LD_INT 27
18584: PUSH
18585: LD_INT 33
18587: PUSH
18588: LD_INT 69
18590: PUSH
18591: LD_INT 39
18593: PUSH
18594: LD_INT 34
18596: PUSH
18597: LD_INT 40
18599: PUSH
18600: LD_INT 71
18602: PUSH
18603: LD_INT 23
18605: PUSH
18606: LD_INT 44
18608: PUSH
18609: LD_INT 48
18611: PUSH
18612: LD_INT 49
18614: PUSH
18615: LD_INT 50
18617: PUSH
18618: LD_INT 51
18620: PUSH
18621: LD_INT 52
18623: PUSH
18624: LD_INT 53
18626: PUSH
18627: LD_INT 54
18629: PUSH
18630: LD_INT 55
18632: PUSH
18633: LD_INT 56
18635: PUSH
18636: LD_INT 57
18638: PUSH
18639: LD_INT 58
18641: PUSH
18642: LD_INT 59
18644: PUSH
18645: LD_INT 63
18647: PUSH
18648: LD_INT 64
18650: PUSH
18651: LD_INT 65
18653: PUSH
18654: LD_INT 82
18656: PUSH
18657: LD_INT 83
18659: PUSH
18660: LD_INT 84
18662: PUSH
18663: LD_INT 85
18665: PUSH
18666: LD_INT 86
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: ST_TO_ADDR
18724: GO 18727
18726: POP
// if state > - 1 and state < 3 then
18727: LD_VAR 0 3
18731: PUSH
18732: LD_INT 1
18734: NEG
18735: GREATER
18736: PUSH
18737: LD_VAR 0 3
18741: PUSH
18742: LD_INT 3
18744: LESS
18745: AND
18746: IFFALSE 18803
// for i in result do
18748: LD_ADDR_VAR 0 5
18752: PUSH
18753: LD_VAR 0 4
18757: PUSH
18758: FOR_IN
18759: IFFALSE 18801
// if GetTech ( i , side ) <> state then
18761: LD_VAR 0 5
18765: PPUSH
18766: LD_VAR 0 1
18770: PPUSH
18771: CALL_OW 321
18775: PUSH
18776: LD_VAR 0 3
18780: NONEQUAL
18781: IFFALSE 18799
// result := result diff i ;
18783: LD_ADDR_VAR 0 4
18787: PUSH
18788: LD_VAR 0 4
18792: PUSH
18793: LD_VAR 0 5
18797: DIFF
18798: ST_TO_ADDR
18799: GO 18758
18801: POP
18802: POP
// end ;
18803: LD_VAR 0 4
18807: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18808: LD_INT 0
18810: PPUSH
18811: PPUSH
18812: PPUSH
// result := true ;
18813: LD_ADDR_VAR 0 3
18817: PUSH
18818: LD_INT 1
18820: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18821: LD_ADDR_VAR 0 5
18825: PUSH
18826: LD_VAR 0 2
18830: PPUSH
18831: CALL_OW 480
18835: ST_TO_ADDR
// if not tmp then
18836: LD_VAR 0 5
18840: NOT
18841: IFFALSE 18845
// exit ;
18843: GO 18894
// for i in tmp do
18845: LD_ADDR_VAR 0 4
18849: PUSH
18850: LD_VAR 0 5
18854: PUSH
18855: FOR_IN
18856: IFFALSE 18892
// if GetTech ( i , side ) <> state_researched then
18858: LD_VAR 0 4
18862: PPUSH
18863: LD_VAR 0 1
18867: PPUSH
18868: CALL_OW 321
18872: PUSH
18873: LD_INT 2
18875: NONEQUAL
18876: IFFALSE 18890
// begin result := false ;
18878: LD_ADDR_VAR 0 3
18882: PUSH
18883: LD_INT 0
18885: ST_TO_ADDR
// exit ;
18886: POP
18887: POP
18888: GO 18894
// end ;
18890: GO 18855
18892: POP
18893: POP
// end ;
18894: LD_VAR 0 3
18898: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18899: LD_INT 0
18901: PPUSH
18902: PPUSH
18903: PPUSH
18904: PPUSH
18905: PPUSH
18906: PPUSH
18907: PPUSH
18908: PPUSH
18909: PPUSH
18910: PPUSH
18911: PPUSH
18912: PPUSH
18913: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18914: LD_VAR 0 1
18918: NOT
18919: PUSH
18920: LD_VAR 0 1
18924: PPUSH
18925: CALL_OW 257
18929: PUSH
18930: LD_INT 9
18932: NONEQUAL
18933: OR
18934: IFFALSE 18938
// exit ;
18936: GO 19511
// side := GetSide ( unit ) ;
18938: LD_ADDR_VAR 0 9
18942: PUSH
18943: LD_VAR 0 1
18947: PPUSH
18948: CALL_OW 255
18952: ST_TO_ADDR
// tech_space := tech_spacanom ;
18953: LD_ADDR_VAR 0 12
18957: PUSH
18958: LD_INT 29
18960: ST_TO_ADDR
// tech_time := tech_taurad ;
18961: LD_ADDR_VAR 0 13
18965: PUSH
18966: LD_INT 28
18968: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18969: LD_ADDR_VAR 0 11
18973: PUSH
18974: LD_VAR 0 1
18978: PPUSH
18979: CALL_OW 310
18983: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18984: LD_VAR 0 11
18988: PPUSH
18989: CALL_OW 247
18993: PUSH
18994: LD_INT 2
18996: EQUAL
18997: IFFALSE 19001
// exit ;
18999: GO 19511
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19001: LD_ADDR_VAR 0 8
19005: PUSH
19006: LD_INT 81
19008: PUSH
19009: LD_VAR 0 9
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 3
19020: PUSH
19021: LD_INT 21
19023: PUSH
19024: LD_INT 3
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PPUSH
19039: CALL_OW 69
19043: ST_TO_ADDR
// if not tmp then
19044: LD_VAR 0 8
19048: NOT
19049: IFFALSE 19053
// exit ;
19051: GO 19511
// if in_unit then
19053: LD_VAR 0 11
19057: IFFALSE 19081
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
19059: LD_ADDR_VAR 0 10
19063: PUSH
19064: LD_VAR 0 8
19068: PPUSH
19069: LD_VAR 0 11
19073: PPUSH
19074: CALL_OW 74
19078: ST_TO_ADDR
19079: GO 19101
// enemy := NearestUnitToUnit ( tmp , unit ) ;
19081: LD_ADDR_VAR 0 10
19085: PUSH
19086: LD_VAR 0 8
19090: PPUSH
19091: LD_VAR 0 1
19095: PPUSH
19096: CALL_OW 74
19100: ST_TO_ADDR
// if not enemy then
19101: LD_VAR 0 10
19105: NOT
19106: IFFALSE 19110
// exit ;
19108: GO 19511
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
19110: LD_VAR 0 11
19114: PUSH
19115: LD_VAR 0 11
19119: PPUSH
19120: LD_VAR 0 10
19124: PPUSH
19125: CALL_OW 296
19129: PUSH
19130: LD_INT 13
19132: GREATER
19133: AND
19134: PUSH
19135: LD_VAR 0 1
19139: PPUSH
19140: LD_VAR 0 10
19144: PPUSH
19145: CALL_OW 296
19149: PUSH
19150: LD_INT 12
19152: GREATER
19153: OR
19154: IFFALSE 19158
// exit ;
19156: GO 19511
// missile := [ 1 ] ;
19158: LD_ADDR_VAR 0 14
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: EMPTY
19167: LIST
19168: ST_TO_ADDR
// if Researched ( side , tech_space ) then
19169: LD_VAR 0 9
19173: PPUSH
19174: LD_VAR 0 12
19178: PPUSH
19179: CALL_OW 325
19183: IFFALSE 19212
// missile := Insert ( missile , missile + 1 , 2 ) ;
19185: LD_ADDR_VAR 0 14
19189: PUSH
19190: LD_VAR 0 14
19194: PPUSH
19195: LD_VAR 0 14
19199: PUSH
19200: LD_INT 1
19202: PLUS
19203: PPUSH
19204: LD_INT 2
19206: PPUSH
19207: CALL_OW 2
19211: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
19212: LD_VAR 0 9
19216: PPUSH
19217: LD_VAR 0 13
19221: PPUSH
19222: CALL_OW 325
19226: PUSH
19227: LD_VAR 0 10
19231: PPUSH
19232: CALL_OW 255
19236: PPUSH
19237: LD_VAR 0 13
19241: PPUSH
19242: CALL_OW 325
19246: NOT
19247: AND
19248: IFFALSE 19277
// missile := Insert ( missile , missile + 1 , 3 ) ;
19250: LD_ADDR_VAR 0 14
19254: PUSH
19255: LD_VAR 0 14
19259: PPUSH
19260: LD_VAR 0 14
19264: PUSH
19265: LD_INT 1
19267: PLUS
19268: PPUSH
19269: LD_INT 3
19271: PPUSH
19272: CALL_OW 2
19276: ST_TO_ADDR
// if missile < 2 then
19277: LD_VAR 0 14
19281: PUSH
19282: LD_INT 2
19284: LESS
19285: IFFALSE 19289
// exit ;
19287: GO 19511
// x := GetX ( enemy ) ;
19289: LD_ADDR_VAR 0 4
19293: PUSH
19294: LD_VAR 0 10
19298: PPUSH
19299: CALL_OW 250
19303: ST_TO_ADDR
// y := GetY ( enemy ) ;
19304: LD_ADDR_VAR 0 5
19308: PUSH
19309: LD_VAR 0 10
19313: PPUSH
19314: CALL_OW 251
19318: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
19319: LD_ADDR_VAR 0 6
19323: PUSH
19324: LD_VAR 0 4
19328: PUSH
19329: LD_INT 1
19331: NEG
19332: PPUSH
19333: LD_INT 1
19335: PPUSH
19336: CALL_OW 12
19340: PLUS
19341: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
19342: LD_ADDR_VAR 0 7
19346: PUSH
19347: LD_VAR 0 5
19351: PUSH
19352: LD_INT 1
19354: NEG
19355: PPUSH
19356: LD_INT 1
19358: PPUSH
19359: CALL_OW 12
19363: PLUS
19364: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19365: LD_VAR 0 6
19369: PPUSH
19370: LD_VAR 0 7
19374: PPUSH
19375: CALL_OW 488
19379: NOT
19380: IFFALSE 19402
// begin _x := x ;
19382: LD_ADDR_VAR 0 6
19386: PUSH
19387: LD_VAR 0 4
19391: ST_TO_ADDR
// _y := y ;
19392: LD_ADDR_VAR 0 7
19396: PUSH
19397: LD_VAR 0 5
19401: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
19402: LD_ADDR_VAR 0 3
19406: PUSH
19407: LD_INT 1
19409: PPUSH
19410: LD_VAR 0 14
19414: PPUSH
19415: CALL_OW 12
19419: ST_TO_ADDR
// case i of 1 :
19420: LD_VAR 0 3
19424: PUSH
19425: LD_INT 1
19427: DOUBLE
19428: EQUAL
19429: IFTRUE 19433
19431: GO 19450
19433: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
19434: LD_VAR 0 1
19438: PPUSH
19439: LD_VAR 0 10
19443: PPUSH
19444: CALL_OW 115
19448: GO 19511
19450: LD_INT 2
19452: DOUBLE
19453: EQUAL
19454: IFTRUE 19458
19456: GO 19480
19458: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
19459: LD_VAR 0 1
19463: PPUSH
19464: LD_VAR 0 6
19468: PPUSH
19469: LD_VAR 0 7
19473: PPUSH
19474: CALL_OW 153
19478: GO 19511
19480: LD_INT 3
19482: DOUBLE
19483: EQUAL
19484: IFTRUE 19488
19486: GO 19510
19488: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
19489: LD_VAR 0 1
19493: PPUSH
19494: LD_VAR 0 6
19498: PPUSH
19499: LD_VAR 0 7
19503: PPUSH
19504: CALL_OW 154
19508: GO 19511
19510: POP
// end ;
19511: LD_VAR 0 2
19515: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19516: LD_INT 0
19518: PPUSH
19519: PPUSH
19520: PPUSH
19521: PPUSH
19522: PPUSH
19523: PPUSH
// if not unit or not building then
19524: LD_VAR 0 1
19528: NOT
19529: PUSH
19530: LD_VAR 0 2
19534: NOT
19535: OR
19536: IFFALSE 19540
// exit ;
19538: GO 19698
// x := GetX ( building ) ;
19540: LD_ADDR_VAR 0 5
19544: PUSH
19545: LD_VAR 0 2
19549: PPUSH
19550: CALL_OW 250
19554: ST_TO_ADDR
// y := GetY ( building ) ;
19555: LD_ADDR_VAR 0 6
19559: PUSH
19560: LD_VAR 0 2
19564: PPUSH
19565: CALL_OW 251
19569: ST_TO_ADDR
// for i = 0 to 5 do
19570: LD_ADDR_VAR 0 4
19574: PUSH
19575: DOUBLE
19576: LD_INT 0
19578: DEC
19579: ST_TO_ADDR
19580: LD_INT 5
19582: PUSH
19583: FOR_TO
19584: IFFALSE 19696
// begin _x := ShiftX ( x , i , 3 ) ;
19586: LD_ADDR_VAR 0 7
19590: PUSH
19591: LD_VAR 0 5
19595: PPUSH
19596: LD_VAR 0 4
19600: PPUSH
19601: LD_INT 3
19603: PPUSH
19604: CALL_OW 272
19608: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19609: LD_ADDR_VAR 0 8
19613: PUSH
19614: LD_VAR 0 6
19618: PPUSH
19619: LD_VAR 0 4
19623: PPUSH
19624: LD_INT 3
19626: PPUSH
19627: CALL_OW 273
19631: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19632: LD_VAR 0 7
19636: PPUSH
19637: LD_VAR 0 8
19641: PPUSH
19642: CALL_OW 488
19646: NOT
19647: IFFALSE 19651
// continue ;
19649: GO 19583
// if HexInfo ( _x , _y ) = 0 then
19651: LD_VAR 0 7
19655: PPUSH
19656: LD_VAR 0 8
19660: PPUSH
19661: CALL_OW 428
19665: PUSH
19666: LD_INT 0
19668: EQUAL
19669: IFFALSE 19694
// begin ComMoveXY ( unit , _x , _y ) ;
19671: LD_VAR 0 1
19675: PPUSH
19676: LD_VAR 0 7
19680: PPUSH
19681: LD_VAR 0 8
19685: PPUSH
19686: CALL_OW 111
// exit ;
19690: POP
19691: POP
19692: GO 19698
// end ; end ;
19694: GO 19583
19696: POP
19697: POP
// end ;
19698: LD_VAR 0 3
19702: RET
// export function ScanBase ( side , base_area ) ; begin
19703: LD_INT 0
19705: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19706: LD_ADDR_VAR 0 3
19710: PUSH
19711: LD_VAR 0 2
19715: PPUSH
19716: LD_INT 81
19718: PUSH
19719: LD_VAR 0 1
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PPUSH
19728: CALL_OW 70
19732: ST_TO_ADDR
// end ;
19733: LD_VAR 0 3
19737: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19738: LD_INT 0
19740: PPUSH
19741: PPUSH
19742: PPUSH
19743: PPUSH
// result := false ;
19744: LD_ADDR_VAR 0 2
19748: PUSH
19749: LD_INT 0
19751: ST_TO_ADDR
// side := GetSide ( unit ) ;
19752: LD_ADDR_VAR 0 3
19756: PUSH
19757: LD_VAR 0 1
19761: PPUSH
19762: CALL_OW 255
19766: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19767: LD_ADDR_VAR 0 4
19771: PUSH
19772: LD_VAR 0 1
19776: PPUSH
19777: CALL_OW 248
19781: ST_TO_ADDR
// case nat of 1 :
19782: LD_VAR 0 4
19786: PUSH
19787: LD_INT 1
19789: DOUBLE
19790: EQUAL
19791: IFTRUE 19795
19793: GO 19806
19795: POP
// tech := tech_lassight ; 2 :
19796: LD_ADDR_VAR 0 5
19800: PUSH
19801: LD_INT 12
19803: ST_TO_ADDR
19804: GO 19845
19806: LD_INT 2
19808: DOUBLE
19809: EQUAL
19810: IFTRUE 19814
19812: GO 19825
19814: POP
// tech := tech_mortar ; 3 :
19815: LD_ADDR_VAR 0 5
19819: PUSH
19820: LD_INT 41
19822: ST_TO_ADDR
19823: GO 19845
19825: LD_INT 3
19827: DOUBLE
19828: EQUAL
19829: IFTRUE 19833
19831: GO 19844
19833: POP
// tech := tech_bazooka ; end ;
19834: LD_ADDR_VAR 0 5
19838: PUSH
19839: LD_INT 44
19841: ST_TO_ADDR
19842: GO 19845
19844: POP
// if Researched ( side , tech ) then
19845: LD_VAR 0 3
19849: PPUSH
19850: LD_VAR 0 5
19854: PPUSH
19855: CALL_OW 325
19859: IFFALSE 19886
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19861: LD_ADDR_VAR 0 2
19865: PUSH
19866: LD_INT 5
19868: PUSH
19869: LD_INT 8
19871: PUSH
19872: LD_INT 9
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: LIST
19879: PUSH
19880: LD_VAR 0 4
19884: ARRAY
19885: ST_TO_ADDR
// end ;
19886: LD_VAR 0 2
19890: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19891: LD_INT 0
19893: PPUSH
19894: PPUSH
19895: PPUSH
// if not mines then
19896: LD_VAR 0 2
19900: NOT
19901: IFFALSE 19905
// exit ;
19903: GO 20049
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19905: LD_ADDR_VAR 0 5
19909: PUSH
19910: LD_INT 81
19912: PUSH
19913: LD_VAR 0 1
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 3
19924: PUSH
19925: LD_INT 21
19927: PUSH
19928: LD_INT 3
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PPUSH
19943: CALL_OW 69
19947: ST_TO_ADDR
// for i in mines do
19948: LD_ADDR_VAR 0 4
19952: PUSH
19953: LD_VAR 0 2
19957: PUSH
19958: FOR_IN
19959: IFFALSE 20047
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19961: LD_VAR 0 4
19965: PUSH
19966: LD_INT 1
19968: ARRAY
19969: PPUSH
19970: LD_VAR 0 4
19974: PUSH
19975: LD_INT 2
19977: ARRAY
19978: PPUSH
19979: CALL_OW 458
19983: NOT
19984: IFFALSE 19988
// continue ;
19986: GO 19958
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19988: LD_VAR 0 4
19992: PUSH
19993: LD_INT 1
19995: ARRAY
19996: PPUSH
19997: LD_VAR 0 4
20001: PUSH
20002: LD_INT 2
20004: ARRAY
20005: PPUSH
20006: CALL_OW 428
20010: PUSH
20011: LD_VAR 0 5
20015: IN
20016: IFFALSE 20045
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
20018: LD_VAR 0 4
20022: PUSH
20023: LD_INT 1
20025: ARRAY
20026: PPUSH
20027: LD_VAR 0 4
20031: PUSH
20032: LD_INT 2
20034: ARRAY
20035: PPUSH
20036: LD_VAR 0 1
20040: PPUSH
20041: CALL_OW 456
// end ;
20045: GO 19958
20047: POP
20048: POP
// end ;
20049: LD_VAR 0 3
20053: RET
// export function Count ( array ) ; var i ; begin
20054: LD_INT 0
20056: PPUSH
20057: PPUSH
// result := 0 ;
20058: LD_ADDR_VAR 0 2
20062: PUSH
20063: LD_INT 0
20065: ST_TO_ADDR
// for i in array do
20066: LD_ADDR_VAR 0 3
20070: PUSH
20071: LD_VAR 0 1
20075: PUSH
20076: FOR_IN
20077: IFFALSE 20101
// if i then
20079: LD_VAR 0 3
20083: IFFALSE 20099
// result := result + 1 ;
20085: LD_ADDR_VAR 0 2
20089: PUSH
20090: LD_VAR 0 2
20094: PUSH
20095: LD_INT 1
20097: PLUS
20098: ST_TO_ADDR
20099: GO 20076
20101: POP
20102: POP
// end ;
20103: LD_VAR 0 2
20107: RET
// export function IsEmpty ( building ) ; begin
20108: LD_INT 0
20110: PPUSH
// if not building then
20111: LD_VAR 0 1
20115: NOT
20116: IFFALSE 20120
// exit ;
20118: GO 20163
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
20120: LD_ADDR_VAR 0 2
20124: PUSH
20125: LD_VAR 0 1
20129: PUSH
20130: LD_INT 22
20132: PUSH
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 255
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 58
20149: PUSH
20150: EMPTY
20151: LIST
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PPUSH
20157: CALL_OW 69
20161: IN
20162: ST_TO_ADDR
// end ;
20163: LD_VAR 0 2
20167: RET
// export function IsNotFull ( building ) ; begin
20168: LD_INT 0
20170: PPUSH
// if not building then
20171: LD_VAR 0 1
20175: NOT
20176: IFFALSE 20180
// exit ;
20178: GO 20199
// result := UnitsInside ( building ) < 6 ;
20180: LD_ADDR_VAR 0 2
20184: PUSH
20185: LD_VAR 0 1
20189: PPUSH
20190: CALL_OW 313
20194: PUSH
20195: LD_INT 6
20197: LESS
20198: ST_TO_ADDR
// end ;
20199: LD_VAR 0 2
20203: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
20204: LD_INT 0
20206: PPUSH
20207: PPUSH
20208: PPUSH
20209: PPUSH
// tmp := [ ] ;
20210: LD_ADDR_VAR 0 3
20214: PUSH
20215: EMPTY
20216: ST_TO_ADDR
// list := [ ] ;
20217: LD_ADDR_VAR 0 5
20221: PUSH
20222: EMPTY
20223: ST_TO_ADDR
// for i = 16 to 25 do
20224: LD_ADDR_VAR 0 4
20228: PUSH
20229: DOUBLE
20230: LD_INT 16
20232: DEC
20233: ST_TO_ADDR
20234: LD_INT 25
20236: PUSH
20237: FOR_TO
20238: IFFALSE 20311
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
20240: LD_ADDR_VAR 0 3
20244: PUSH
20245: LD_VAR 0 3
20249: PUSH
20250: LD_INT 22
20252: PUSH
20253: LD_VAR 0 1
20257: PPUSH
20258: CALL_OW 255
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 91
20269: PUSH
20270: LD_VAR 0 1
20274: PUSH
20275: LD_INT 6
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 30
20285: PUSH
20286: LD_VAR 0 4
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: LIST
20299: PUSH
20300: EMPTY
20301: LIST
20302: PPUSH
20303: CALL_OW 69
20307: ADD
20308: ST_TO_ADDR
20309: GO 20237
20311: POP
20312: POP
// for i = 1 to tmp do
20313: LD_ADDR_VAR 0 4
20317: PUSH
20318: DOUBLE
20319: LD_INT 1
20321: DEC
20322: ST_TO_ADDR
20323: LD_VAR 0 3
20327: PUSH
20328: FOR_TO
20329: IFFALSE 20417
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
20331: LD_ADDR_VAR 0 5
20335: PUSH
20336: LD_VAR 0 5
20340: PUSH
20341: LD_VAR 0 3
20345: PUSH
20346: LD_VAR 0 4
20350: ARRAY
20351: PPUSH
20352: CALL_OW 266
20356: PUSH
20357: LD_VAR 0 3
20361: PUSH
20362: LD_VAR 0 4
20366: ARRAY
20367: PPUSH
20368: CALL_OW 250
20372: PUSH
20373: LD_VAR 0 3
20377: PUSH
20378: LD_VAR 0 4
20382: ARRAY
20383: PPUSH
20384: CALL_OW 251
20388: PUSH
20389: LD_VAR 0 3
20393: PUSH
20394: LD_VAR 0 4
20398: ARRAY
20399: PPUSH
20400: CALL_OW 254
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: PUSH
20411: EMPTY
20412: LIST
20413: ADD
20414: ST_TO_ADDR
20415: GO 20328
20417: POP
20418: POP
// result := list ;
20419: LD_ADDR_VAR 0 2
20423: PUSH
20424: LD_VAR 0 5
20428: ST_TO_ADDR
// end ;
20429: LD_VAR 0 2
20433: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
20434: LD_INT 0
20436: PPUSH
20437: PPUSH
20438: PPUSH
20439: PPUSH
20440: PPUSH
20441: PPUSH
20442: PPUSH
// if not factory then
20443: LD_VAR 0 1
20447: NOT
20448: IFFALSE 20452
// exit ;
20450: GO 21045
// if control = control_apeman then
20452: LD_VAR 0 4
20456: PUSH
20457: LD_INT 5
20459: EQUAL
20460: IFFALSE 20569
// begin tmp := UnitsInside ( factory ) ;
20462: LD_ADDR_VAR 0 8
20466: PUSH
20467: LD_VAR 0 1
20471: PPUSH
20472: CALL_OW 313
20476: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
20477: LD_VAR 0 8
20481: PPUSH
20482: LD_INT 25
20484: PUSH
20485: LD_INT 12
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PPUSH
20492: CALL_OW 72
20496: NOT
20497: IFFALSE 20507
// control := control_manual ;
20499: LD_ADDR_VAR 0 4
20503: PUSH
20504: LD_INT 1
20506: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20507: LD_ADDR_VAR 0 8
20511: PUSH
20512: LD_VAR 0 1
20516: PPUSH
20517: CALL 20204 0 1
20521: ST_TO_ADDR
// if tmp then
20522: LD_VAR 0 8
20526: IFFALSE 20569
// begin for i in tmp do
20528: LD_ADDR_VAR 0 7
20532: PUSH
20533: LD_VAR 0 8
20537: PUSH
20538: FOR_IN
20539: IFFALSE 20567
// if i [ 1 ] = b_ext_radio then
20541: LD_VAR 0 7
20545: PUSH
20546: LD_INT 1
20548: ARRAY
20549: PUSH
20550: LD_INT 22
20552: EQUAL
20553: IFFALSE 20565
// begin control := control_remote ;
20555: LD_ADDR_VAR 0 4
20559: PUSH
20560: LD_INT 2
20562: ST_TO_ADDR
// break ;
20563: GO 20567
// end ;
20565: GO 20538
20567: POP
20568: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20569: LD_VAR 0 1
20573: PPUSH
20574: LD_VAR 0 2
20578: PPUSH
20579: LD_VAR 0 3
20583: PPUSH
20584: LD_VAR 0 4
20588: PPUSH
20589: LD_VAR 0 5
20593: PPUSH
20594: CALL_OW 448
20598: IFFALSE 20633
// begin result := [ chassis , engine , control , weapon ] ;
20600: LD_ADDR_VAR 0 6
20604: PUSH
20605: LD_VAR 0 2
20609: PUSH
20610: LD_VAR 0 3
20614: PUSH
20615: LD_VAR 0 4
20619: PUSH
20620: LD_VAR 0 5
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: ST_TO_ADDR
// exit ;
20631: GO 21045
// end ; _chassis := AvailableChassisList ( factory ) ;
20633: LD_ADDR_VAR 0 9
20637: PUSH
20638: LD_VAR 0 1
20642: PPUSH
20643: CALL_OW 475
20647: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20648: LD_ADDR_VAR 0 11
20652: PUSH
20653: LD_VAR 0 1
20657: PPUSH
20658: CALL_OW 476
20662: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20663: LD_ADDR_VAR 0 12
20667: PUSH
20668: LD_VAR 0 1
20672: PPUSH
20673: CALL_OW 477
20677: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20678: LD_ADDR_VAR 0 10
20682: PUSH
20683: LD_VAR 0 1
20687: PPUSH
20688: CALL_OW 478
20692: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20693: LD_VAR 0 9
20697: NOT
20698: PUSH
20699: LD_VAR 0 11
20703: NOT
20704: OR
20705: PUSH
20706: LD_VAR 0 12
20710: NOT
20711: OR
20712: PUSH
20713: LD_VAR 0 10
20717: NOT
20718: OR
20719: IFFALSE 20754
// begin result := [ chassis , engine , control , weapon ] ;
20721: LD_ADDR_VAR 0 6
20725: PUSH
20726: LD_VAR 0 2
20730: PUSH
20731: LD_VAR 0 3
20735: PUSH
20736: LD_VAR 0 4
20740: PUSH
20741: LD_VAR 0 5
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: ST_TO_ADDR
// exit ;
20752: GO 21045
// end ; if not chassis in _chassis then
20754: LD_VAR 0 2
20758: PUSH
20759: LD_VAR 0 9
20763: IN
20764: NOT
20765: IFFALSE 20791
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20767: LD_ADDR_VAR 0 2
20771: PUSH
20772: LD_VAR 0 9
20776: PUSH
20777: LD_INT 1
20779: PPUSH
20780: LD_VAR 0 9
20784: PPUSH
20785: CALL_OW 12
20789: ARRAY
20790: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20791: LD_VAR 0 2
20795: PPUSH
20796: LD_VAR 0 3
20800: PPUSH
20801: CALL 21050 0 2
20805: NOT
20806: IFFALSE 20865
// repeat engine := _engine [ 1 ] ;
20808: LD_ADDR_VAR 0 3
20812: PUSH
20813: LD_VAR 0 11
20817: PUSH
20818: LD_INT 1
20820: ARRAY
20821: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20822: LD_ADDR_VAR 0 11
20826: PUSH
20827: LD_VAR 0 11
20831: PPUSH
20832: LD_INT 1
20834: PPUSH
20835: CALL_OW 3
20839: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20840: LD_VAR 0 2
20844: PPUSH
20845: LD_VAR 0 3
20849: PPUSH
20850: CALL 21050 0 2
20854: PUSH
20855: LD_VAR 0 11
20859: PUSH
20860: EMPTY
20861: EQUAL
20862: OR
20863: IFFALSE 20808
// if not control in _control then
20865: LD_VAR 0 4
20869: PUSH
20870: LD_VAR 0 12
20874: IN
20875: NOT
20876: IFFALSE 20902
// control := _control [ rand ( 1 , _control ) ] ;
20878: LD_ADDR_VAR 0 4
20882: PUSH
20883: LD_VAR 0 12
20887: PUSH
20888: LD_INT 1
20890: PPUSH
20891: LD_VAR 0 12
20895: PPUSH
20896: CALL_OW 12
20900: ARRAY
20901: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20902: LD_VAR 0 2
20906: PPUSH
20907: LD_VAR 0 5
20911: PPUSH
20912: CALL 21270 0 2
20916: NOT
20917: IFFALSE 20976
// repeat weapon := _weapon [ 1 ] ;
20919: LD_ADDR_VAR 0 5
20923: PUSH
20924: LD_VAR 0 10
20928: PUSH
20929: LD_INT 1
20931: ARRAY
20932: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20933: LD_ADDR_VAR 0 10
20937: PUSH
20938: LD_VAR 0 10
20942: PPUSH
20943: LD_INT 1
20945: PPUSH
20946: CALL_OW 3
20950: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20951: LD_VAR 0 2
20955: PPUSH
20956: LD_VAR 0 5
20960: PPUSH
20961: CALL 21270 0 2
20965: PUSH
20966: LD_VAR 0 10
20970: PUSH
20971: EMPTY
20972: EQUAL
20973: OR
20974: IFFALSE 20919
// result := [ ] ;
20976: LD_ADDR_VAR 0 6
20980: PUSH
20981: EMPTY
20982: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20983: LD_VAR 0 1
20987: PPUSH
20988: LD_VAR 0 2
20992: PPUSH
20993: LD_VAR 0 3
20997: PPUSH
20998: LD_VAR 0 4
21002: PPUSH
21003: LD_VAR 0 5
21007: PPUSH
21008: CALL_OW 448
21012: IFFALSE 21045
// result := [ chassis , engine , control , weapon ] ;
21014: LD_ADDR_VAR 0 6
21018: PUSH
21019: LD_VAR 0 2
21023: PUSH
21024: LD_VAR 0 3
21028: PUSH
21029: LD_VAR 0 4
21033: PUSH
21034: LD_VAR 0 5
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: ST_TO_ADDR
// end ;
21045: LD_VAR 0 6
21049: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
21050: LD_INT 0
21052: PPUSH
// if not chassis or not engine then
21053: LD_VAR 0 1
21057: NOT
21058: PUSH
21059: LD_VAR 0 2
21063: NOT
21064: OR
21065: IFFALSE 21069
// exit ;
21067: GO 21265
// case engine of engine_solar :
21069: LD_VAR 0 2
21073: PUSH
21074: LD_INT 2
21076: DOUBLE
21077: EQUAL
21078: IFTRUE 21082
21080: GO 21120
21082: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
21083: LD_ADDR_VAR 0 3
21087: PUSH
21088: LD_INT 11
21090: PUSH
21091: LD_INT 12
21093: PUSH
21094: LD_INT 13
21096: PUSH
21097: LD_INT 14
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: LD_INT 2
21105: PUSH
21106: LD_INT 3
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: LIST
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: ST_TO_ADDR
21118: GO 21249
21120: LD_INT 1
21122: DOUBLE
21123: EQUAL
21124: IFTRUE 21128
21126: GO 21190
21128: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
21129: LD_ADDR_VAR 0 3
21133: PUSH
21134: LD_INT 11
21136: PUSH
21137: LD_INT 12
21139: PUSH
21140: LD_INT 13
21142: PUSH
21143: LD_INT 14
21145: PUSH
21146: LD_INT 1
21148: PUSH
21149: LD_INT 2
21151: PUSH
21152: LD_INT 3
21154: PUSH
21155: LD_INT 4
21157: PUSH
21158: LD_INT 5
21160: PUSH
21161: LD_INT 21
21163: PUSH
21164: LD_INT 23
21166: PUSH
21167: LD_INT 22
21169: PUSH
21170: LD_INT 24
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: ST_TO_ADDR
21188: GO 21249
21190: LD_INT 3
21192: DOUBLE
21193: EQUAL
21194: IFTRUE 21198
21196: GO 21248
21198: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21199: LD_ADDR_VAR 0 3
21203: PUSH
21204: LD_INT 13
21206: PUSH
21207: LD_INT 14
21209: PUSH
21210: LD_INT 2
21212: PUSH
21213: LD_INT 3
21215: PUSH
21216: LD_INT 4
21218: PUSH
21219: LD_INT 5
21221: PUSH
21222: LD_INT 21
21224: PUSH
21225: LD_INT 22
21227: PUSH
21228: LD_INT 23
21230: PUSH
21231: LD_INT 24
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: ST_TO_ADDR
21246: GO 21249
21248: POP
// result := ( chassis in result ) ;
21249: LD_ADDR_VAR 0 3
21253: PUSH
21254: LD_VAR 0 1
21258: PUSH
21259: LD_VAR 0 3
21263: IN
21264: ST_TO_ADDR
// end ;
21265: LD_VAR 0 3
21269: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
21270: LD_INT 0
21272: PPUSH
// if not chassis or not weapon then
21273: LD_VAR 0 1
21277: NOT
21278: PUSH
21279: LD_VAR 0 2
21283: NOT
21284: OR
21285: IFFALSE 21289
// exit ;
21287: GO 22315
// case weapon of us_machine_gun :
21289: LD_VAR 0 2
21293: PUSH
21294: LD_INT 2
21296: DOUBLE
21297: EQUAL
21298: IFTRUE 21302
21300: GO 21332
21302: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
21303: LD_ADDR_VAR 0 3
21307: PUSH
21308: LD_INT 1
21310: PUSH
21311: LD_INT 2
21313: PUSH
21314: LD_INT 3
21316: PUSH
21317: LD_INT 4
21319: PUSH
21320: LD_INT 5
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: ST_TO_ADDR
21330: GO 22299
21332: LD_INT 3
21334: DOUBLE
21335: EQUAL
21336: IFTRUE 21340
21338: GO 21370
21340: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
21341: LD_ADDR_VAR 0 3
21345: PUSH
21346: LD_INT 1
21348: PUSH
21349: LD_INT 2
21351: PUSH
21352: LD_INT 3
21354: PUSH
21355: LD_INT 4
21357: PUSH
21358: LD_INT 5
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: ST_TO_ADDR
21368: GO 22299
21370: LD_INT 11
21372: DOUBLE
21373: EQUAL
21374: IFTRUE 21378
21376: GO 21408
21378: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
21379: LD_ADDR_VAR 0 3
21383: PUSH
21384: LD_INT 1
21386: PUSH
21387: LD_INT 2
21389: PUSH
21390: LD_INT 3
21392: PUSH
21393: LD_INT 4
21395: PUSH
21396: LD_INT 5
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: ST_TO_ADDR
21406: GO 22299
21408: LD_INT 4
21410: DOUBLE
21411: EQUAL
21412: IFTRUE 21416
21414: GO 21442
21416: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
21417: LD_ADDR_VAR 0 3
21421: PUSH
21422: LD_INT 2
21424: PUSH
21425: LD_INT 3
21427: PUSH
21428: LD_INT 4
21430: PUSH
21431: LD_INT 5
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: ST_TO_ADDR
21440: GO 22299
21442: LD_INT 5
21444: DOUBLE
21445: EQUAL
21446: IFTRUE 21450
21448: GO 21476
21450: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
21451: LD_ADDR_VAR 0 3
21455: PUSH
21456: LD_INT 2
21458: PUSH
21459: LD_INT 3
21461: PUSH
21462: LD_INT 4
21464: PUSH
21465: LD_INT 5
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: ST_TO_ADDR
21474: GO 22299
21476: LD_INT 9
21478: DOUBLE
21479: EQUAL
21480: IFTRUE 21484
21482: GO 21510
21484: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
21485: LD_ADDR_VAR 0 3
21489: PUSH
21490: LD_INT 2
21492: PUSH
21493: LD_INT 3
21495: PUSH
21496: LD_INT 4
21498: PUSH
21499: LD_INT 5
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: ST_TO_ADDR
21508: GO 22299
21510: LD_INT 7
21512: DOUBLE
21513: EQUAL
21514: IFTRUE 21518
21516: GO 21544
21518: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21519: LD_ADDR_VAR 0 3
21523: PUSH
21524: LD_INT 2
21526: PUSH
21527: LD_INT 3
21529: PUSH
21530: LD_INT 4
21532: PUSH
21533: LD_INT 5
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: ST_TO_ADDR
21542: GO 22299
21544: LD_INT 12
21546: DOUBLE
21547: EQUAL
21548: IFTRUE 21552
21550: GO 21578
21552: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21553: LD_ADDR_VAR 0 3
21557: PUSH
21558: LD_INT 2
21560: PUSH
21561: LD_INT 3
21563: PUSH
21564: LD_INT 4
21566: PUSH
21567: LD_INT 5
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: ST_TO_ADDR
21576: GO 22299
21578: LD_INT 13
21580: DOUBLE
21581: EQUAL
21582: IFTRUE 21586
21584: GO 21612
21586: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21587: LD_ADDR_VAR 0 3
21591: PUSH
21592: LD_INT 2
21594: PUSH
21595: LD_INT 3
21597: PUSH
21598: LD_INT 4
21600: PUSH
21601: LD_INT 5
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: ST_TO_ADDR
21610: GO 22299
21612: LD_INT 14
21614: DOUBLE
21615: EQUAL
21616: IFTRUE 21620
21618: GO 21638
21620: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21621: LD_ADDR_VAR 0 3
21625: PUSH
21626: LD_INT 4
21628: PUSH
21629: LD_INT 5
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: ST_TO_ADDR
21636: GO 22299
21638: LD_INT 6
21640: DOUBLE
21641: EQUAL
21642: IFTRUE 21646
21644: GO 21664
21646: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21647: LD_ADDR_VAR 0 3
21651: PUSH
21652: LD_INT 4
21654: PUSH
21655: LD_INT 5
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: ST_TO_ADDR
21662: GO 22299
21664: LD_INT 10
21666: DOUBLE
21667: EQUAL
21668: IFTRUE 21672
21670: GO 21690
21672: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21673: LD_ADDR_VAR 0 3
21677: PUSH
21678: LD_INT 4
21680: PUSH
21681: LD_INT 5
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: ST_TO_ADDR
21688: GO 22299
21690: LD_INT 22
21692: DOUBLE
21693: EQUAL
21694: IFTRUE 21698
21696: GO 21724
21698: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21699: LD_ADDR_VAR 0 3
21703: PUSH
21704: LD_INT 11
21706: PUSH
21707: LD_INT 12
21709: PUSH
21710: LD_INT 13
21712: PUSH
21713: LD_INT 14
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: ST_TO_ADDR
21722: GO 22299
21724: LD_INT 23
21726: DOUBLE
21727: EQUAL
21728: IFTRUE 21732
21730: GO 21758
21732: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21733: LD_ADDR_VAR 0 3
21737: PUSH
21738: LD_INT 11
21740: PUSH
21741: LD_INT 12
21743: PUSH
21744: LD_INT 13
21746: PUSH
21747: LD_INT 14
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: ST_TO_ADDR
21756: GO 22299
21758: LD_INT 24
21760: DOUBLE
21761: EQUAL
21762: IFTRUE 21766
21764: GO 21792
21766: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21767: LD_ADDR_VAR 0 3
21771: PUSH
21772: LD_INT 11
21774: PUSH
21775: LD_INT 12
21777: PUSH
21778: LD_INT 13
21780: PUSH
21781: LD_INT 14
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: ST_TO_ADDR
21790: GO 22299
21792: LD_INT 30
21794: DOUBLE
21795: EQUAL
21796: IFTRUE 21800
21798: GO 21826
21800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21801: LD_ADDR_VAR 0 3
21805: PUSH
21806: LD_INT 11
21808: PUSH
21809: LD_INT 12
21811: PUSH
21812: LD_INT 13
21814: PUSH
21815: LD_INT 14
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: ST_TO_ADDR
21824: GO 22299
21826: LD_INT 25
21828: DOUBLE
21829: EQUAL
21830: IFTRUE 21834
21832: GO 21852
21834: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21835: LD_ADDR_VAR 0 3
21839: PUSH
21840: LD_INT 13
21842: PUSH
21843: LD_INT 14
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: ST_TO_ADDR
21850: GO 22299
21852: LD_INT 27
21854: DOUBLE
21855: EQUAL
21856: IFTRUE 21860
21858: GO 21878
21860: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21861: LD_ADDR_VAR 0 3
21865: PUSH
21866: LD_INT 13
21868: PUSH
21869: LD_INT 14
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: ST_TO_ADDR
21876: GO 22299
21878: LD_INT 28
21880: DOUBLE
21881: EQUAL
21882: IFTRUE 21886
21884: GO 21904
21886: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21887: LD_ADDR_VAR 0 3
21891: PUSH
21892: LD_INT 13
21894: PUSH
21895: LD_INT 14
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: ST_TO_ADDR
21902: GO 22299
21904: LD_INT 29
21906: DOUBLE
21907: EQUAL
21908: IFTRUE 21912
21910: GO 21930
21912: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21913: LD_ADDR_VAR 0 3
21917: PUSH
21918: LD_INT 13
21920: PUSH
21921: LD_INT 14
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: ST_TO_ADDR
21928: GO 22299
21930: LD_INT 31
21932: DOUBLE
21933: EQUAL
21934: IFTRUE 21938
21936: GO 21956
21938: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21939: LD_ADDR_VAR 0 3
21943: PUSH
21944: LD_INT 13
21946: PUSH
21947: LD_INT 14
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: ST_TO_ADDR
21954: GO 22299
21956: LD_INT 26
21958: DOUBLE
21959: EQUAL
21960: IFTRUE 21964
21962: GO 21982
21964: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21965: LD_ADDR_VAR 0 3
21969: PUSH
21970: LD_INT 13
21972: PUSH
21973: LD_INT 14
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: ST_TO_ADDR
21980: GO 22299
21982: LD_INT 42
21984: DOUBLE
21985: EQUAL
21986: IFTRUE 21990
21988: GO 22016
21990: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21991: LD_ADDR_VAR 0 3
21995: PUSH
21996: LD_INT 21
21998: PUSH
21999: LD_INT 22
22001: PUSH
22002: LD_INT 23
22004: PUSH
22005: LD_INT 24
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: ST_TO_ADDR
22014: GO 22299
22016: LD_INT 43
22018: DOUBLE
22019: EQUAL
22020: IFTRUE 22024
22022: GO 22050
22024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
22025: LD_ADDR_VAR 0 3
22029: PUSH
22030: LD_INT 21
22032: PUSH
22033: LD_INT 22
22035: PUSH
22036: LD_INT 23
22038: PUSH
22039: LD_INT 24
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: ST_TO_ADDR
22048: GO 22299
22050: LD_INT 44
22052: DOUBLE
22053: EQUAL
22054: IFTRUE 22058
22056: GO 22084
22058: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
22059: LD_ADDR_VAR 0 3
22063: PUSH
22064: LD_INT 21
22066: PUSH
22067: LD_INT 22
22069: PUSH
22070: LD_INT 23
22072: PUSH
22073: LD_INT 24
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: ST_TO_ADDR
22082: GO 22299
22084: LD_INT 45
22086: DOUBLE
22087: EQUAL
22088: IFTRUE 22092
22090: GO 22118
22092: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
22093: LD_ADDR_VAR 0 3
22097: PUSH
22098: LD_INT 21
22100: PUSH
22101: LD_INT 22
22103: PUSH
22104: LD_INT 23
22106: PUSH
22107: LD_INT 24
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: ST_TO_ADDR
22116: GO 22299
22118: LD_INT 49
22120: DOUBLE
22121: EQUAL
22122: IFTRUE 22126
22124: GO 22152
22126: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
22127: LD_ADDR_VAR 0 3
22131: PUSH
22132: LD_INT 21
22134: PUSH
22135: LD_INT 22
22137: PUSH
22138: LD_INT 23
22140: PUSH
22141: LD_INT 24
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: ST_TO_ADDR
22150: GO 22299
22152: LD_INT 51
22154: DOUBLE
22155: EQUAL
22156: IFTRUE 22160
22158: GO 22186
22160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
22161: LD_ADDR_VAR 0 3
22165: PUSH
22166: LD_INT 21
22168: PUSH
22169: LD_INT 22
22171: PUSH
22172: LD_INT 23
22174: PUSH
22175: LD_INT 24
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: ST_TO_ADDR
22184: GO 22299
22186: LD_INT 52
22188: DOUBLE
22189: EQUAL
22190: IFTRUE 22194
22192: GO 22220
22194: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
22195: LD_ADDR_VAR 0 3
22199: PUSH
22200: LD_INT 21
22202: PUSH
22203: LD_INT 22
22205: PUSH
22206: LD_INT 23
22208: PUSH
22209: LD_INT 24
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: ST_TO_ADDR
22218: GO 22299
22220: LD_INT 53
22222: DOUBLE
22223: EQUAL
22224: IFTRUE 22228
22226: GO 22246
22228: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
22229: LD_ADDR_VAR 0 3
22233: PUSH
22234: LD_INT 23
22236: PUSH
22237: LD_INT 24
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: ST_TO_ADDR
22244: GO 22299
22246: LD_INT 46
22248: DOUBLE
22249: EQUAL
22250: IFTRUE 22254
22252: GO 22272
22254: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
22255: LD_ADDR_VAR 0 3
22259: PUSH
22260: LD_INT 23
22262: PUSH
22263: LD_INT 24
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: ST_TO_ADDR
22270: GO 22299
22272: LD_INT 47
22274: DOUBLE
22275: EQUAL
22276: IFTRUE 22280
22278: GO 22298
22280: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22281: LD_ADDR_VAR 0 3
22285: PUSH
22286: LD_INT 23
22288: PUSH
22289: LD_INT 24
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: ST_TO_ADDR
22296: GO 22299
22298: POP
// result := ( chassis in result ) ;
22299: LD_ADDR_VAR 0 3
22303: PUSH
22304: LD_VAR 0 1
22308: PUSH
22309: LD_VAR 0 3
22313: IN
22314: ST_TO_ADDR
// end ;
22315: LD_VAR 0 3
22319: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
22320: LD_INT 0
22322: PPUSH
22323: PPUSH
22324: PPUSH
22325: PPUSH
22326: PPUSH
22327: PPUSH
22328: PPUSH
// result := array ;
22329: LD_ADDR_VAR 0 5
22333: PUSH
22334: LD_VAR 0 1
22338: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
22339: LD_VAR 0 1
22343: NOT
22344: PUSH
22345: LD_VAR 0 2
22349: NOT
22350: OR
22351: PUSH
22352: LD_VAR 0 3
22356: NOT
22357: OR
22358: PUSH
22359: LD_VAR 0 2
22363: PUSH
22364: LD_VAR 0 1
22368: GREATER
22369: OR
22370: PUSH
22371: LD_VAR 0 3
22375: PUSH
22376: LD_VAR 0 1
22380: GREATER
22381: OR
22382: IFFALSE 22386
// exit ;
22384: GO 22682
// if direction then
22386: LD_VAR 0 4
22390: IFFALSE 22454
// begin d := 1 ;
22392: LD_ADDR_VAR 0 9
22396: PUSH
22397: LD_INT 1
22399: ST_TO_ADDR
// if i_from > i_to then
22400: LD_VAR 0 2
22404: PUSH
22405: LD_VAR 0 3
22409: GREATER
22410: IFFALSE 22436
// length := ( array - i_from ) + i_to else
22412: LD_ADDR_VAR 0 11
22416: PUSH
22417: LD_VAR 0 1
22421: PUSH
22422: LD_VAR 0 2
22426: MINUS
22427: PUSH
22428: LD_VAR 0 3
22432: PLUS
22433: ST_TO_ADDR
22434: GO 22452
// length := i_to - i_from ;
22436: LD_ADDR_VAR 0 11
22440: PUSH
22441: LD_VAR 0 3
22445: PUSH
22446: LD_VAR 0 2
22450: MINUS
22451: ST_TO_ADDR
// end else
22452: GO 22515
// begin d := - 1 ;
22454: LD_ADDR_VAR 0 9
22458: PUSH
22459: LD_INT 1
22461: NEG
22462: ST_TO_ADDR
// if i_from > i_to then
22463: LD_VAR 0 2
22467: PUSH
22468: LD_VAR 0 3
22472: GREATER
22473: IFFALSE 22493
// length := i_from - i_to else
22475: LD_ADDR_VAR 0 11
22479: PUSH
22480: LD_VAR 0 2
22484: PUSH
22485: LD_VAR 0 3
22489: MINUS
22490: ST_TO_ADDR
22491: GO 22515
// length := ( array - i_to ) + i_from ;
22493: LD_ADDR_VAR 0 11
22497: PUSH
22498: LD_VAR 0 1
22502: PUSH
22503: LD_VAR 0 3
22507: MINUS
22508: PUSH
22509: LD_VAR 0 2
22513: PLUS
22514: ST_TO_ADDR
// end ; if not length then
22515: LD_VAR 0 11
22519: NOT
22520: IFFALSE 22524
// exit ;
22522: GO 22682
// tmp := array ;
22524: LD_ADDR_VAR 0 10
22528: PUSH
22529: LD_VAR 0 1
22533: ST_TO_ADDR
// for i = 1 to length do
22534: LD_ADDR_VAR 0 6
22538: PUSH
22539: DOUBLE
22540: LD_INT 1
22542: DEC
22543: ST_TO_ADDR
22544: LD_VAR 0 11
22548: PUSH
22549: FOR_TO
22550: IFFALSE 22670
// begin for j = 1 to array do
22552: LD_ADDR_VAR 0 7
22556: PUSH
22557: DOUBLE
22558: LD_INT 1
22560: DEC
22561: ST_TO_ADDR
22562: LD_VAR 0 1
22566: PUSH
22567: FOR_TO
22568: IFFALSE 22656
// begin k := j + d ;
22570: LD_ADDR_VAR 0 8
22574: PUSH
22575: LD_VAR 0 7
22579: PUSH
22580: LD_VAR 0 9
22584: PLUS
22585: ST_TO_ADDR
// if k > array then
22586: LD_VAR 0 8
22590: PUSH
22591: LD_VAR 0 1
22595: GREATER
22596: IFFALSE 22606
// k := 1 ;
22598: LD_ADDR_VAR 0 8
22602: PUSH
22603: LD_INT 1
22605: ST_TO_ADDR
// if not k then
22606: LD_VAR 0 8
22610: NOT
22611: IFFALSE 22623
// k := array ;
22613: LD_ADDR_VAR 0 8
22617: PUSH
22618: LD_VAR 0 1
22622: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22623: LD_ADDR_VAR 0 10
22627: PUSH
22628: LD_VAR 0 10
22632: PPUSH
22633: LD_VAR 0 8
22637: PPUSH
22638: LD_VAR 0 1
22642: PUSH
22643: LD_VAR 0 7
22647: ARRAY
22648: PPUSH
22649: CALL_OW 1
22653: ST_TO_ADDR
// end ;
22654: GO 22567
22656: POP
22657: POP
// array := tmp ;
22658: LD_ADDR_VAR 0 1
22662: PUSH
22663: LD_VAR 0 10
22667: ST_TO_ADDR
// end ;
22668: GO 22549
22670: POP
22671: POP
// result := array ;
22672: LD_ADDR_VAR 0 5
22676: PUSH
22677: LD_VAR 0 1
22681: ST_TO_ADDR
// end ;
22682: LD_VAR 0 5
22686: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22687: LD_INT 0
22689: PPUSH
22690: PPUSH
// result := 0 ;
22691: LD_ADDR_VAR 0 3
22695: PUSH
22696: LD_INT 0
22698: ST_TO_ADDR
// if not array or not value in array then
22699: LD_VAR 0 1
22703: NOT
22704: PUSH
22705: LD_VAR 0 2
22709: PUSH
22710: LD_VAR 0 1
22714: IN
22715: NOT
22716: OR
22717: IFFALSE 22721
// exit ;
22719: GO 22775
// for i = 1 to array do
22721: LD_ADDR_VAR 0 4
22725: PUSH
22726: DOUBLE
22727: LD_INT 1
22729: DEC
22730: ST_TO_ADDR
22731: LD_VAR 0 1
22735: PUSH
22736: FOR_TO
22737: IFFALSE 22773
// if value = array [ i ] then
22739: LD_VAR 0 2
22743: PUSH
22744: LD_VAR 0 1
22748: PUSH
22749: LD_VAR 0 4
22753: ARRAY
22754: EQUAL
22755: IFFALSE 22771
// begin result := i ;
22757: LD_ADDR_VAR 0 3
22761: PUSH
22762: LD_VAR 0 4
22766: ST_TO_ADDR
// exit ;
22767: POP
22768: POP
22769: GO 22775
// end ;
22771: GO 22736
22773: POP
22774: POP
// end ;
22775: LD_VAR 0 3
22779: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22780: LD_INT 0
22782: PPUSH
// vc_chassis := chassis ;
22783: LD_ADDR_OWVAR 37
22787: PUSH
22788: LD_VAR 0 1
22792: ST_TO_ADDR
// vc_engine := engine ;
22793: LD_ADDR_OWVAR 39
22797: PUSH
22798: LD_VAR 0 2
22802: ST_TO_ADDR
// vc_control := control ;
22803: LD_ADDR_OWVAR 38
22807: PUSH
22808: LD_VAR 0 3
22812: ST_TO_ADDR
// vc_weapon := weapon ;
22813: LD_ADDR_OWVAR 40
22817: PUSH
22818: LD_VAR 0 4
22822: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22823: LD_ADDR_OWVAR 41
22827: PUSH
22828: LD_VAR 0 5
22832: ST_TO_ADDR
// end ;
22833: LD_VAR 0 6
22837: RET
// export function WantPlant ( unit ) ; var task ; begin
22838: LD_INT 0
22840: PPUSH
22841: PPUSH
// result := false ;
22842: LD_ADDR_VAR 0 2
22846: PUSH
22847: LD_INT 0
22849: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22850: LD_ADDR_VAR 0 3
22854: PUSH
22855: LD_VAR 0 1
22859: PPUSH
22860: CALL_OW 437
22864: ST_TO_ADDR
// if task then
22865: LD_VAR 0 3
22869: IFFALSE 22897
// if task [ 1 ] [ 1 ] = p then
22871: LD_VAR 0 3
22875: PUSH
22876: LD_INT 1
22878: ARRAY
22879: PUSH
22880: LD_INT 1
22882: ARRAY
22883: PUSH
22884: LD_STRING p
22886: EQUAL
22887: IFFALSE 22897
// result := true ;
22889: LD_ADDR_VAR 0 2
22893: PUSH
22894: LD_INT 1
22896: ST_TO_ADDR
// end ;
22897: LD_VAR 0 2
22901: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22902: LD_INT 0
22904: PPUSH
22905: PPUSH
22906: PPUSH
22907: PPUSH
// if pos < 1 then
22908: LD_VAR 0 2
22912: PUSH
22913: LD_INT 1
22915: LESS
22916: IFFALSE 22920
// exit ;
22918: GO 23223
// if pos = 1 then
22920: LD_VAR 0 2
22924: PUSH
22925: LD_INT 1
22927: EQUAL
22928: IFFALSE 22961
// result := Replace ( arr , pos [ 1 ] , value ) else
22930: LD_ADDR_VAR 0 4
22934: PUSH
22935: LD_VAR 0 1
22939: PPUSH
22940: LD_VAR 0 2
22944: PUSH
22945: LD_INT 1
22947: ARRAY
22948: PPUSH
22949: LD_VAR 0 3
22953: PPUSH
22954: CALL_OW 1
22958: ST_TO_ADDR
22959: GO 23223
// begin tmp := arr ;
22961: LD_ADDR_VAR 0 6
22965: PUSH
22966: LD_VAR 0 1
22970: ST_TO_ADDR
// s_arr := [ tmp ] ;
22971: LD_ADDR_VAR 0 7
22975: PUSH
22976: LD_VAR 0 6
22980: PUSH
22981: EMPTY
22982: LIST
22983: ST_TO_ADDR
// for i = 1 to pos - 1 do
22984: LD_ADDR_VAR 0 5
22988: PUSH
22989: DOUBLE
22990: LD_INT 1
22992: DEC
22993: ST_TO_ADDR
22994: LD_VAR 0 2
22998: PUSH
22999: LD_INT 1
23001: MINUS
23002: PUSH
23003: FOR_TO
23004: IFFALSE 23049
// begin tmp := tmp [ pos [ i ] ] ;
23006: LD_ADDR_VAR 0 6
23010: PUSH
23011: LD_VAR 0 6
23015: PUSH
23016: LD_VAR 0 2
23020: PUSH
23021: LD_VAR 0 5
23025: ARRAY
23026: ARRAY
23027: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
23028: LD_ADDR_VAR 0 7
23032: PUSH
23033: LD_VAR 0 7
23037: PUSH
23038: LD_VAR 0 6
23042: PUSH
23043: EMPTY
23044: LIST
23045: ADD
23046: ST_TO_ADDR
// end ;
23047: GO 23003
23049: POP
23050: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
23051: LD_ADDR_VAR 0 6
23055: PUSH
23056: LD_VAR 0 6
23060: PPUSH
23061: LD_VAR 0 2
23065: PUSH
23066: LD_VAR 0 2
23070: ARRAY
23071: PPUSH
23072: LD_VAR 0 3
23076: PPUSH
23077: CALL_OW 1
23081: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
23082: LD_ADDR_VAR 0 7
23086: PUSH
23087: LD_VAR 0 7
23091: PPUSH
23092: LD_VAR 0 7
23096: PPUSH
23097: LD_VAR 0 6
23101: PPUSH
23102: CALL_OW 1
23106: ST_TO_ADDR
// for i = s_arr downto 2 do
23107: LD_ADDR_VAR 0 5
23111: PUSH
23112: DOUBLE
23113: LD_VAR 0 7
23117: INC
23118: ST_TO_ADDR
23119: LD_INT 2
23121: PUSH
23122: FOR_DOWNTO
23123: IFFALSE 23207
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
23125: LD_ADDR_VAR 0 6
23129: PUSH
23130: LD_VAR 0 7
23134: PUSH
23135: LD_VAR 0 5
23139: PUSH
23140: LD_INT 1
23142: MINUS
23143: ARRAY
23144: PPUSH
23145: LD_VAR 0 2
23149: PUSH
23150: LD_VAR 0 5
23154: PUSH
23155: LD_INT 1
23157: MINUS
23158: ARRAY
23159: PPUSH
23160: LD_VAR 0 7
23164: PUSH
23165: LD_VAR 0 5
23169: ARRAY
23170: PPUSH
23171: CALL_OW 1
23175: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
23176: LD_ADDR_VAR 0 7
23180: PUSH
23181: LD_VAR 0 7
23185: PPUSH
23186: LD_VAR 0 5
23190: PUSH
23191: LD_INT 1
23193: MINUS
23194: PPUSH
23195: LD_VAR 0 6
23199: PPUSH
23200: CALL_OW 1
23204: ST_TO_ADDR
// end ;
23205: GO 23122
23207: POP
23208: POP
// result := s_arr [ 1 ] ;
23209: LD_ADDR_VAR 0 4
23213: PUSH
23214: LD_VAR 0 7
23218: PUSH
23219: LD_INT 1
23221: ARRAY
23222: ST_TO_ADDR
// end ; end ;
23223: LD_VAR 0 4
23227: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
23228: LD_INT 0
23230: PPUSH
23231: PPUSH
// if not list then
23232: LD_VAR 0 1
23236: NOT
23237: IFFALSE 23241
// exit ;
23239: GO 23332
// i := list [ pos1 ] ;
23241: LD_ADDR_VAR 0 5
23245: PUSH
23246: LD_VAR 0 1
23250: PUSH
23251: LD_VAR 0 2
23255: ARRAY
23256: ST_TO_ADDR
// if not i then
23257: LD_VAR 0 5
23261: NOT
23262: IFFALSE 23266
// exit ;
23264: GO 23332
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
23266: LD_ADDR_VAR 0 1
23270: PUSH
23271: LD_VAR 0 1
23275: PPUSH
23276: LD_VAR 0 2
23280: PPUSH
23281: LD_VAR 0 1
23285: PUSH
23286: LD_VAR 0 3
23290: ARRAY
23291: PPUSH
23292: CALL_OW 1
23296: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
23297: LD_ADDR_VAR 0 1
23301: PUSH
23302: LD_VAR 0 1
23306: PPUSH
23307: LD_VAR 0 3
23311: PPUSH
23312: LD_VAR 0 5
23316: PPUSH
23317: CALL_OW 1
23321: ST_TO_ADDR
// result := list ;
23322: LD_ADDR_VAR 0 4
23326: PUSH
23327: LD_VAR 0 1
23331: ST_TO_ADDR
// end ;
23332: LD_VAR 0 4
23336: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
23337: LD_INT 0
23339: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
23340: LD_ADDR_VAR 0 5
23344: PUSH
23345: LD_VAR 0 1
23349: PPUSH
23350: CALL_OW 250
23354: PPUSH
23355: LD_VAR 0 1
23359: PPUSH
23360: CALL_OW 251
23364: PPUSH
23365: LD_VAR 0 2
23369: PPUSH
23370: LD_VAR 0 3
23374: PPUSH
23375: LD_VAR 0 4
23379: PPUSH
23380: CALL 23390 0 5
23384: ST_TO_ADDR
// end ;
23385: LD_VAR 0 5
23389: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23390: LD_INT 0
23392: PPUSH
23393: PPUSH
23394: PPUSH
23395: PPUSH
// if not list then
23396: LD_VAR 0 3
23400: NOT
23401: IFFALSE 23405
// exit ;
23403: GO 23793
// result := [ ] ;
23405: LD_ADDR_VAR 0 6
23409: PUSH
23410: EMPTY
23411: ST_TO_ADDR
// for i in list do
23412: LD_ADDR_VAR 0 7
23416: PUSH
23417: LD_VAR 0 3
23421: PUSH
23422: FOR_IN
23423: IFFALSE 23625
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23425: LD_ADDR_VAR 0 9
23429: PUSH
23430: LD_VAR 0 7
23434: PPUSH
23435: LD_VAR 0 1
23439: PPUSH
23440: LD_VAR 0 2
23444: PPUSH
23445: CALL_OW 297
23449: ST_TO_ADDR
// if not result then
23450: LD_VAR 0 6
23454: NOT
23455: IFFALSE 23481
// result := [ [ i , tmp ] ] else
23457: LD_ADDR_VAR 0 6
23461: PUSH
23462: LD_VAR 0 7
23466: PUSH
23467: LD_VAR 0 9
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: EMPTY
23477: LIST
23478: ST_TO_ADDR
23479: GO 23623
// begin if result [ result ] [ 2 ] < tmp then
23481: LD_VAR 0 6
23485: PUSH
23486: LD_VAR 0 6
23490: ARRAY
23491: PUSH
23492: LD_INT 2
23494: ARRAY
23495: PUSH
23496: LD_VAR 0 9
23500: LESS
23501: IFFALSE 23543
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23503: LD_ADDR_VAR 0 6
23507: PUSH
23508: LD_VAR 0 6
23512: PPUSH
23513: LD_VAR 0 6
23517: PUSH
23518: LD_INT 1
23520: PLUS
23521: PPUSH
23522: LD_VAR 0 7
23526: PUSH
23527: LD_VAR 0 9
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PPUSH
23536: CALL_OW 2
23540: ST_TO_ADDR
23541: GO 23623
// for j = 1 to result do
23543: LD_ADDR_VAR 0 8
23547: PUSH
23548: DOUBLE
23549: LD_INT 1
23551: DEC
23552: ST_TO_ADDR
23553: LD_VAR 0 6
23557: PUSH
23558: FOR_TO
23559: IFFALSE 23621
// begin if tmp < result [ j ] [ 2 ] then
23561: LD_VAR 0 9
23565: PUSH
23566: LD_VAR 0 6
23570: PUSH
23571: LD_VAR 0 8
23575: ARRAY
23576: PUSH
23577: LD_INT 2
23579: ARRAY
23580: LESS
23581: IFFALSE 23619
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23583: LD_ADDR_VAR 0 6
23587: PUSH
23588: LD_VAR 0 6
23592: PPUSH
23593: LD_VAR 0 8
23597: PPUSH
23598: LD_VAR 0 7
23602: PUSH
23603: LD_VAR 0 9
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PPUSH
23612: CALL_OW 2
23616: ST_TO_ADDR
// break ;
23617: GO 23621
// end ; end ;
23619: GO 23558
23621: POP
23622: POP
// end ; end ;
23623: GO 23422
23625: POP
23626: POP
// if result and not asc then
23627: LD_VAR 0 6
23631: PUSH
23632: LD_VAR 0 4
23636: NOT
23637: AND
23638: IFFALSE 23713
// begin tmp := result ;
23640: LD_ADDR_VAR 0 9
23644: PUSH
23645: LD_VAR 0 6
23649: ST_TO_ADDR
// for i = tmp downto 1 do
23650: LD_ADDR_VAR 0 7
23654: PUSH
23655: DOUBLE
23656: LD_VAR 0 9
23660: INC
23661: ST_TO_ADDR
23662: LD_INT 1
23664: PUSH
23665: FOR_DOWNTO
23666: IFFALSE 23711
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23668: LD_ADDR_VAR 0 6
23672: PUSH
23673: LD_VAR 0 6
23677: PPUSH
23678: LD_VAR 0 9
23682: PUSH
23683: LD_VAR 0 7
23687: MINUS
23688: PUSH
23689: LD_INT 1
23691: PLUS
23692: PPUSH
23693: LD_VAR 0 9
23697: PUSH
23698: LD_VAR 0 7
23702: ARRAY
23703: PPUSH
23704: CALL_OW 1
23708: ST_TO_ADDR
23709: GO 23665
23711: POP
23712: POP
// end ; tmp := [ ] ;
23713: LD_ADDR_VAR 0 9
23717: PUSH
23718: EMPTY
23719: ST_TO_ADDR
// if mode then
23720: LD_VAR 0 5
23724: IFFALSE 23793
// begin for i = 1 to result do
23726: LD_ADDR_VAR 0 7
23730: PUSH
23731: DOUBLE
23732: LD_INT 1
23734: DEC
23735: ST_TO_ADDR
23736: LD_VAR 0 6
23740: PUSH
23741: FOR_TO
23742: IFFALSE 23781
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23744: LD_ADDR_VAR 0 9
23748: PUSH
23749: LD_VAR 0 9
23753: PPUSH
23754: LD_VAR 0 7
23758: PPUSH
23759: LD_VAR 0 6
23763: PUSH
23764: LD_VAR 0 7
23768: ARRAY
23769: PUSH
23770: LD_INT 1
23772: ARRAY
23773: PPUSH
23774: CALL_OW 1
23778: ST_TO_ADDR
23779: GO 23741
23781: POP
23782: POP
// result := tmp ;
23783: LD_ADDR_VAR 0 6
23787: PUSH
23788: LD_VAR 0 9
23792: ST_TO_ADDR
// end ; end ;
23793: LD_VAR 0 6
23797: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23798: LD_INT 0
23800: PPUSH
23801: PPUSH
23802: PPUSH
23803: PPUSH
23804: PPUSH
23805: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23806: LD_ADDR_VAR 0 5
23810: PUSH
23811: LD_INT 0
23813: PUSH
23814: LD_INT 0
23816: PUSH
23817: LD_INT 0
23819: PUSH
23820: EMPTY
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: ST_TO_ADDR
// if not x or not y then
23828: LD_VAR 0 2
23832: NOT
23833: PUSH
23834: LD_VAR 0 3
23838: NOT
23839: OR
23840: IFFALSE 23844
// exit ;
23842: GO 25490
// if not range then
23844: LD_VAR 0 4
23848: NOT
23849: IFFALSE 23859
// range := 10 ;
23851: LD_ADDR_VAR 0 4
23855: PUSH
23856: LD_INT 10
23858: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23859: LD_ADDR_VAR 0 8
23863: PUSH
23864: LD_INT 81
23866: PUSH
23867: LD_VAR 0 1
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 92
23878: PUSH
23879: LD_VAR 0 2
23883: PUSH
23884: LD_VAR 0 3
23888: PUSH
23889: LD_VAR 0 4
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 3
23902: PUSH
23903: LD_INT 21
23905: PUSH
23906: LD_INT 3
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: LIST
23921: PPUSH
23922: CALL_OW 69
23926: ST_TO_ADDR
// if not tmp then
23927: LD_VAR 0 8
23931: NOT
23932: IFFALSE 23936
// exit ;
23934: GO 25490
// for i in tmp do
23936: LD_ADDR_VAR 0 6
23940: PUSH
23941: LD_VAR 0 8
23945: PUSH
23946: FOR_IN
23947: IFFALSE 25465
// begin points := [ 0 , 0 , 0 ] ;
23949: LD_ADDR_VAR 0 9
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: LD_INT 0
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: ST_TO_ADDR
// bpoints := 1 ;
23968: LD_ADDR_VAR 0 10
23972: PUSH
23973: LD_INT 1
23975: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23976: LD_VAR 0 6
23980: PPUSH
23981: CALL_OW 247
23985: PUSH
23986: LD_INT 1
23988: DOUBLE
23989: EQUAL
23990: IFTRUE 23994
23992: GO 24572
23994: POP
// begin if GetClass ( i ) = 1 then
23995: LD_VAR 0 6
23999: PPUSH
24000: CALL_OW 257
24004: PUSH
24005: LD_INT 1
24007: EQUAL
24008: IFFALSE 24029
// points := [ 10 , 5 , 3 ] ;
24010: LD_ADDR_VAR 0 9
24014: PUSH
24015: LD_INT 10
24017: PUSH
24018: LD_INT 5
24020: PUSH
24021: LD_INT 3
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
24029: LD_VAR 0 6
24033: PPUSH
24034: CALL_OW 257
24038: PUSH
24039: LD_INT 2
24041: PUSH
24042: LD_INT 3
24044: PUSH
24045: LD_INT 4
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: LIST
24052: IN
24053: IFFALSE 24074
// points := [ 3 , 2 , 1 ] ;
24055: LD_ADDR_VAR 0 9
24059: PUSH
24060: LD_INT 3
24062: PUSH
24063: LD_INT 2
24065: PUSH
24066: LD_INT 1
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: LIST
24073: ST_TO_ADDR
// if GetClass ( i ) = 5 then
24074: LD_VAR 0 6
24078: PPUSH
24079: CALL_OW 257
24083: PUSH
24084: LD_INT 5
24086: EQUAL
24087: IFFALSE 24108
// points := [ 130 , 5 , 2 ] ;
24089: LD_ADDR_VAR 0 9
24093: PUSH
24094: LD_INT 130
24096: PUSH
24097: LD_INT 5
24099: PUSH
24100: LD_INT 2
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: ST_TO_ADDR
// if GetClass ( i ) = 8 then
24108: LD_VAR 0 6
24112: PPUSH
24113: CALL_OW 257
24117: PUSH
24118: LD_INT 8
24120: EQUAL
24121: IFFALSE 24142
// points := [ 35 , 35 , 30 ] ;
24123: LD_ADDR_VAR 0 9
24127: PUSH
24128: LD_INT 35
24130: PUSH
24131: LD_INT 35
24133: PUSH
24134: LD_INT 30
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: LIST
24141: ST_TO_ADDR
// if GetClass ( i ) = 9 then
24142: LD_VAR 0 6
24146: PPUSH
24147: CALL_OW 257
24151: PUSH
24152: LD_INT 9
24154: EQUAL
24155: IFFALSE 24176
// points := [ 20 , 55 , 40 ] ;
24157: LD_ADDR_VAR 0 9
24161: PUSH
24162: LD_INT 20
24164: PUSH
24165: LD_INT 55
24167: PUSH
24168: LD_INT 40
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: LIST
24175: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
24176: LD_VAR 0 6
24180: PPUSH
24181: CALL_OW 257
24185: PUSH
24186: LD_INT 12
24188: PUSH
24189: LD_INT 16
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: IN
24196: IFFALSE 24217
// points := [ 5 , 3 , 2 ] ;
24198: LD_ADDR_VAR 0 9
24202: PUSH
24203: LD_INT 5
24205: PUSH
24206: LD_INT 3
24208: PUSH
24209: LD_INT 2
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: LIST
24216: ST_TO_ADDR
// if GetClass ( i ) = 17 then
24217: LD_VAR 0 6
24221: PPUSH
24222: CALL_OW 257
24226: PUSH
24227: LD_INT 17
24229: EQUAL
24230: IFFALSE 24251
// points := [ 100 , 50 , 75 ] ;
24232: LD_ADDR_VAR 0 9
24236: PUSH
24237: LD_INT 100
24239: PUSH
24240: LD_INT 50
24242: PUSH
24243: LD_INT 75
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: LIST
24250: ST_TO_ADDR
// if GetClass ( i ) = 15 then
24251: LD_VAR 0 6
24255: PPUSH
24256: CALL_OW 257
24260: PUSH
24261: LD_INT 15
24263: EQUAL
24264: IFFALSE 24285
// points := [ 10 , 5 , 3 ] ;
24266: LD_ADDR_VAR 0 9
24270: PUSH
24271: LD_INT 10
24273: PUSH
24274: LD_INT 5
24276: PUSH
24277: LD_INT 3
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: ST_TO_ADDR
// if GetClass ( i ) = 14 then
24285: LD_VAR 0 6
24289: PPUSH
24290: CALL_OW 257
24294: PUSH
24295: LD_INT 14
24297: EQUAL
24298: IFFALSE 24319
// points := [ 10 , 0 , 0 ] ;
24300: LD_ADDR_VAR 0 9
24304: PUSH
24305: LD_INT 10
24307: PUSH
24308: LD_INT 0
24310: PUSH
24311: LD_INT 0
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: LIST
24318: ST_TO_ADDR
// if GetClass ( i ) = 11 then
24319: LD_VAR 0 6
24323: PPUSH
24324: CALL_OW 257
24328: PUSH
24329: LD_INT 11
24331: EQUAL
24332: IFFALSE 24353
// points := [ 30 , 10 , 5 ] ;
24334: LD_ADDR_VAR 0 9
24338: PUSH
24339: LD_INT 30
24341: PUSH
24342: LD_INT 10
24344: PUSH
24345: LD_INT 5
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: LIST
24352: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24353: LD_VAR 0 1
24357: PPUSH
24358: LD_INT 5
24360: PPUSH
24361: CALL_OW 321
24365: PUSH
24366: LD_INT 2
24368: EQUAL
24369: IFFALSE 24386
// bpoints := bpoints * 1.8 ;
24371: LD_ADDR_VAR 0 10
24375: PUSH
24376: LD_VAR 0 10
24380: PUSH
24381: LD_REAL  1.80000000000000E+0000
24384: MUL
24385: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24386: LD_VAR 0 6
24390: PPUSH
24391: CALL_OW 257
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: LD_INT 2
24401: PUSH
24402: LD_INT 3
24404: PUSH
24405: LD_INT 4
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: IN
24414: PUSH
24415: LD_VAR 0 1
24419: PPUSH
24420: LD_INT 51
24422: PPUSH
24423: CALL_OW 321
24427: PUSH
24428: LD_INT 2
24430: EQUAL
24431: AND
24432: IFFALSE 24449
// bpoints := bpoints * 1.2 ;
24434: LD_ADDR_VAR 0 10
24438: PUSH
24439: LD_VAR 0 10
24443: PUSH
24444: LD_REAL  1.20000000000000E+0000
24447: MUL
24448: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24449: LD_VAR 0 6
24453: PPUSH
24454: CALL_OW 257
24458: PUSH
24459: LD_INT 5
24461: PUSH
24462: LD_INT 7
24464: PUSH
24465: LD_INT 9
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: LIST
24472: IN
24473: PUSH
24474: LD_VAR 0 1
24478: PPUSH
24479: LD_INT 52
24481: PPUSH
24482: CALL_OW 321
24486: PUSH
24487: LD_INT 2
24489: EQUAL
24490: AND
24491: IFFALSE 24508
// bpoints := bpoints * 1.5 ;
24493: LD_ADDR_VAR 0 10
24497: PUSH
24498: LD_VAR 0 10
24502: PUSH
24503: LD_REAL  1.50000000000000E+0000
24506: MUL
24507: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24508: LD_VAR 0 1
24512: PPUSH
24513: LD_INT 66
24515: PPUSH
24516: CALL_OW 321
24520: PUSH
24521: LD_INT 2
24523: EQUAL
24524: IFFALSE 24541
// bpoints := bpoints * 1.1 ;
24526: LD_ADDR_VAR 0 10
24530: PUSH
24531: LD_VAR 0 10
24535: PUSH
24536: LD_REAL  1.10000000000000E+0000
24539: MUL
24540: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24541: LD_ADDR_VAR 0 10
24545: PUSH
24546: LD_VAR 0 10
24550: PUSH
24551: LD_VAR 0 6
24555: PPUSH
24556: LD_INT 1
24558: PPUSH
24559: CALL_OW 259
24563: PUSH
24564: LD_REAL  1.15000000000000E+0000
24567: MUL
24568: MUL
24569: ST_TO_ADDR
// end ; unit_vehicle :
24570: GO 25394
24572: LD_INT 2
24574: DOUBLE
24575: EQUAL
24576: IFTRUE 24580
24578: GO 25382
24580: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24581: LD_VAR 0 6
24585: PPUSH
24586: CALL_OW 264
24590: PUSH
24591: LD_INT 2
24593: PUSH
24594: LD_INT 42
24596: PUSH
24597: LD_INT 24
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: LIST
24604: IN
24605: IFFALSE 24626
// points := [ 25 , 5 , 3 ] ;
24607: LD_ADDR_VAR 0 9
24611: PUSH
24612: LD_INT 25
24614: PUSH
24615: LD_INT 5
24617: PUSH
24618: LD_INT 3
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24626: LD_VAR 0 6
24630: PPUSH
24631: CALL_OW 264
24635: PUSH
24636: LD_INT 4
24638: PUSH
24639: LD_INT 43
24641: PUSH
24642: LD_INT 25
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: LIST
24649: IN
24650: IFFALSE 24671
// points := [ 40 , 15 , 5 ] ;
24652: LD_ADDR_VAR 0 9
24656: PUSH
24657: LD_INT 40
24659: PUSH
24660: LD_INT 15
24662: PUSH
24663: LD_INT 5
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: LIST
24670: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24671: LD_VAR 0 6
24675: PPUSH
24676: CALL_OW 264
24680: PUSH
24681: LD_INT 3
24683: PUSH
24684: LD_INT 23
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: IN
24691: IFFALSE 24712
// points := [ 7 , 25 , 8 ] ;
24693: LD_ADDR_VAR 0 9
24697: PUSH
24698: LD_INT 7
24700: PUSH
24701: LD_INT 25
24703: PUSH
24704: LD_INT 8
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24712: LD_VAR 0 6
24716: PPUSH
24717: CALL_OW 264
24721: PUSH
24722: LD_INT 5
24724: PUSH
24725: LD_INT 27
24727: PUSH
24728: LD_INT 44
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: LIST
24735: IN
24736: IFFALSE 24757
// points := [ 14 , 50 , 16 ] ;
24738: LD_ADDR_VAR 0 9
24742: PUSH
24743: LD_INT 14
24745: PUSH
24746: LD_INT 50
24748: PUSH
24749: LD_INT 16
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: LIST
24756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24757: LD_VAR 0 6
24761: PPUSH
24762: CALL_OW 264
24766: PUSH
24767: LD_INT 6
24769: PUSH
24770: LD_INT 46
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: IN
24777: IFFALSE 24798
// points := [ 32 , 120 , 70 ] ;
24779: LD_ADDR_VAR 0 9
24783: PUSH
24784: LD_INT 32
24786: PUSH
24787: LD_INT 120
24789: PUSH
24790: LD_INT 70
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: LIST
24797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
24798: LD_VAR 0 6
24802: PPUSH
24803: CALL_OW 264
24807: PUSH
24808: LD_INT 7
24810: PUSH
24811: LD_INT 28
24813: PUSH
24814: LD_INT 45
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: LIST
24821: IN
24822: IFFALSE 24843
// points := [ 35 , 20 , 45 ] ;
24824: LD_ADDR_VAR 0 9
24828: PUSH
24829: LD_INT 35
24831: PUSH
24832: LD_INT 20
24834: PUSH
24835: LD_INT 45
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: LIST
24842: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24843: LD_VAR 0 6
24847: PPUSH
24848: CALL_OW 264
24852: PUSH
24853: LD_INT 47
24855: PUSH
24856: EMPTY
24857: LIST
24858: IN
24859: IFFALSE 24880
// points := [ 67 , 45 , 75 ] ;
24861: LD_ADDR_VAR 0 9
24865: PUSH
24866: LD_INT 67
24868: PUSH
24869: LD_INT 45
24871: PUSH
24872: LD_INT 75
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: LIST
24879: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24880: LD_VAR 0 6
24884: PPUSH
24885: CALL_OW 264
24889: PUSH
24890: LD_INT 26
24892: PUSH
24893: EMPTY
24894: LIST
24895: IN
24896: IFFALSE 24917
// points := [ 120 , 30 , 80 ] ;
24898: LD_ADDR_VAR 0 9
24902: PUSH
24903: LD_INT 120
24905: PUSH
24906: LD_INT 30
24908: PUSH
24909: LD_INT 80
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: LIST
24916: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24917: LD_VAR 0 6
24921: PPUSH
24922: CALL_OW 264
24926: PUSH
24927: LD_INT 22
24929: PUSH
24930: EMPTY
24931: LIST
24932: IN
24933: IFFALSE 24954
// points := [ 40 , 1 , 1 ] ;
24935: LD_ADDR_VAR 0 9
24939: PUSH
24940: LD_INT 40
24942: PUSH
24943: LD_INT 1
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: LIST
24953: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24954: LD_VAR 0 6
24958: PPUSH
24959: CALL_OW 264
24963: PUSH
24964: LD_INT 29
24966: PUSH
24967: EMPTY
24968: LIST
24969: IN
24970: IFFALSE 24991
// points := [ 70 , 200 , 400 ] ;
24972: LD_ADDR_VAR 0 9
24976: PUSH
24977: LD_INT 70
24979: PUSH
24980: LD_INT 200
24982: PUSH
24983: LD_INT 400
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: LIST
24990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24991: LD_VAR 0 6
24995: PPUSH
24996: CALL_OW 264
25000: PUSH
25001: LD_INT 14
25003: PUSH
25004: LD_INT 53
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: IN
25011: IFFALSE 25032
// points := [ 40 , 10 , 20 ] ;
25013: LD_ADDR_VAR 0 9
25017: PUSH
25018: LD_INT 40
25020: PUSH
25021: LD_INT 10
25023: PUSH
25024: LD_INT 20
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: LIST
25031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
25032: LD_VAR 0 6
25036: PPUSH
25037: CALL_OW 264
25041: PUSH
25042: LD_INT 9
25044: PUSH
25045: EMPTY
25046: LIST
25047: IN
25048: IFFALSE 25069
// points := [ 5 , 70 , 20 ] ;
25050: LD_ADDR_VAR 0 9
25054: PUSH
25055: LD_INT 5
25057: PUSH
25058: LD_INT 70
25060: PUSH
25061: LD_INT 20
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: LIST
25068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
25069: LD_VAR 0 6
25073: PPUSH
25074: CALL_OW 264
25078: PUSH
25079: LD_INT 10
25081: PUSH
25082: EMPTY
25083: LIST
25084: IN
25085: IFFALSE 25106
// points := [ 35 , 110 , 70 ] ;
25087: LD_ADDR_VAR 0 9
25091: PUSH
25092: LD_INT 35
25094: PUSH
25095: LD_INT 110
25097: PUSH
25098: LD_INT 70
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: LIST
25105: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
25106: LD_VAR 0 6
25110: PPUSH
25111: CALL_OW 265
25115: PUSH
25116: LD_INT 25
25118: EQUAL
25119: IFFALSE 25140
// points := [ 80 , 65 , 100 ] ;
25121: LD_ADDR_VAR 0 9
25125: PUSH
25126: LD_INT 80
25128: PUSH
25129: LD_INT 65
25131: PUSH
25132: LD_INT 100
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: LIST
25139: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
25140: LD_VAR 0 6
25144: PPUSH
25145: CALL_OW 263
25149: PUSH
25150: LD_INT 1
25152: EQUAL
25153: IFFALSE 25188
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
25155: LD_ADDR_VAR 0 10
25159: PUSH
25160: LD_VAR 0 10
25164: PUSH
25165: LD_VAR 0 6
25169: PPUSH
25170: CALL_OW 311
25174: PPUSH
25175: LD_INT 3
25177: PPUSH
25178: CALL_OW 259
25182: PUSH
25183: LD_INT 4
25185: MUL
25186: MUL
25187: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
25188: LD_VAR 0 6
25192: PPUSH
25193: CALL_OW 263
25197: PUSH
25198: LD_INT 2
25200: EQUAL
25201: IFFALSE 25252
// begin j := IsControledBy ( i ) ;
25203: LD_ADDR_VAR 0 7
25207: PUSH
25208: LD_VAR 0 6
25212: PPUSH
25213: CALL_OW 312
25217: ST_TO_ADDR
// if j then
25218: LD_VAR 0 7
25222: IFFALSE 25252
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
25224: LD_ADDR_VAR 0 10
25228: PUSH
25229: LD_VAR 0 10
25233: PUSH
25234: LD_VAR 0 7
25238: PPUSH
25239: LD_INT 3
25241: PPUSH
25242: CALL_OW 259
25246: PUSH
25247: LD_INT 3
25249: MUL
25250: MUL
25251: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
25252: LD_VAR 0 6
25256: PPUSH
25257: CALL_OW 264
25261: PUSH
25262: LD_INT 5
25264: PUSH
25265: LD_INT 6
25267: PUSH
25268: LD_INT 46
25270: PUSH
25271: LD_INT 44
25273: PUSH
25274: LD_INT 47
25276: PUSH
25277: LD_INT 45
25279: PUSH
25280: LD_INT 28
25282: PUSH
25283: LD_INT 7
25285: PUSH
25286: LD_INT 27
25288: PUSH
25289: LD_INT 29
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: IN
25304: PUSH
25305: LD_VAR 0 1
25309: PPUSH
25310: LD_INT 52
25312: PPUSH
25313: CALL_OW 321
25317: PUSH
25318: LD_INT 2
25320: EQUAL
25321: AND
25322: IFFALSE 25339
// bpoints := bpoints * 1.2 ;
25324: LD_ADDR_VAR 0 10
25328: PUSH
25329: LD_VAR 0 10
25333: PUSH
25334: LD_REAL  1.20000000000000E+0000
25337: MUL
25338: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25339: LD_VAR 0 6
25343: PPUSH
25344: CALL_OW 264
25348: PUSH
25349: LD_INT 6
25351: PUSH
25352: LD_INT 46
25354: PUSH
25355: LD_INT 47
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: LIST
25362: IN
25363: IFFALSE 25380
// bpoints := bpoints * 1.2 ;
25365: LD_ADDR_VAR 0 10
25369: PUSH
25370: LD_VAR 0 10
25374: PUSH
25375: LD_REAL  1.20000000000000E+0000
25378: MUL
25379: ST_TO_ADDR
// end ; unit_building :
25380: GO 25394
25382: LD_INT 3
25384: DOUBLE
25385: EQUAL
25386: IFTRUE 25390
25388: GO 25393
25390: POP
// ; end ;
25391: GO 25394
25393: POP
// for j = 1 to 3 do
25394: LD_ADDR_VAR 0 7
25398: PUSH
25399: DOUBLE
25400: LD_INT 1
25402: DEC
25403: ST_TO_ADDR
25404: LD_INT 3
25406: PUSH
25407: FOR_TO
25408: IFFALSE 25461
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25410: LD_ADDR_VAR 0 5
25414: PUSH
25415: LD_VAR 0 5
25419: PPUSH
25420: LD_VAR 0 7
25424: PPUSH
25425: LD_VAR 0 5
25429: PUSH
25430: LD_VAR 0 7
25434: ARRAY
25435: PUSH
25436: LD_VAR 0 9
25440: PUSH
25441: LD_VAR 0 7
25445: ARRAY
25446: PUSH
25447: LD_VAR 0 10
25451: MUL
25452: PLUS
25453: PPUSH
25454: CALL_OW 1
25458: ST_TO_ADDR
25459: GO 25407
25461: POP
25462: POP
// end ;
25463: GO 23946
25465: POP
25466: POP
// result := Replace ( result , 4 , tmp ) ;
25467: LD_ADDR_VAR 0 5
25471: PUSH
25472: LD_VAR 0 5
25476: PPUSH
25477: LD_INT 4
25479: PPUSH
25480: LD_VAR 0 8
25484: PPUSH
25485: CALL_OW 1
25489: ST_TO_ADDR
// end ;
25490: LD_VAR 0 5
25494: RET
// export function DangerAtRange ( unit , range ) ; begin
25495: LD_INT 0
25497: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25498: LD_ADDR_VAR 0 3
25502: PUSH
25503: LD_VAR 0 1
25507: PPUSH
25508: CALL_OW 255
25512: PPUSH
25513: LD_VAR 0 1
25517: PPUSH
25518: CALL_OW 250
25522: PPUSH
25523: LD_VAR 0 1
25527: PPUSH
25528: CALL_OW 251
25532: PPUSH
25533: LD_VAR 0 2
25537: PPUSH
25538: CALL 23798 0 4
25542: ST_TO_ADDR
// end ;
25543: LD_VAR 0 3
25547: RET
// export function DangerInArea ( side , area ) ; begin
25548: LD_INT 0
25550: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25551: LD_ADDR_VAR 0 3
25555: PUSH
25556: LD_VAR 0 2
25560: PPUSH
25561: LD_INT 81
25563: PUSH
25564: LD_VAR 0 1
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PPUSH
25573: CALL_OW 70
25577: ST_TO_ADDR
// end ;
25578: LD_VAR 0 3
25582: RET
// export function IsExtension ( b ) ; begin
25583: LD_INT 0
25585: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25586: LD_ADDR_VAR 0 2
25590: PUSH
25591: LD_VAR 0 1
25595: PUSH
25596: LD_INT 23
25598: PUSH
25599: LD_INT 20
25601: PUSH
25602: LD_INT 22
25604: PUSH
25605: LD_INT 17
25607: PUSH
25608: LD_INT 24
25610: PUSH
25611: LD_INT 21
25613: PUSH
25614: LD_INT 19
25616: PUSH
25617: LD_INT 16
25619: PUSH
25620: LD_INT 25
25622: PUSH
25623: LD_INT 18
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: IN
25638: ST_TO_ADDR
// end ;
25639: LD_VAR 0 2
25643: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
25644: LD_INT 0
25646: PPUSH
25647: PPUSH
25648: PPUSH
// result := [ ] ;
25649: LD_ADDR_VAR 0 3
25653: PUSH
25654: EMPTY
25655: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25656: LD_ADDR_VAR 0 4
25660: PUSH
25661: LD_VAR 0 2
25665: PPUSH
25666: LD_INT 21
25668: PUSH
25669: LD_INT 3
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PPUSH
25676: CALL_OW 70
25680: ST_TO_ADDR
// if not tmp then
25681: LD_VAR 0 4
25685: NOT
25686: IFFALSE 25690
// exit ;
25688: GO 25748
// for i in tmp do
25690: LD_ADDR_VAR 0 5
25694: PUSH
25695: LD_VAR 0 4
25699: PUSH
25700: FOR_IN
25701: IFFALSE 25736
// if GetBase ( i ) <> base then
25703: LD_VAR 0 5
25707: PPUSH
25708: CALL_OW 274
25712: PUSH
25713: LD_VAR 0 1
25717: NONEQUAL
25718: IFFALSE 25734
// ComLinkToBase ( base , i ) ;
25720: LD_VAR 0 1
25724: PPUSH
25725: LD_VAR 0 5
25729: PPUSH
25730: CALL_OW 169
25734: GO 25700
25736: POP
25737: POP
// result := tmp ;
25738: LD_ADDR_VAR 0 3
25742: PUSH
25743: LD_VAR 0 4
25747: ST_TO_ADDR
// end ;
25748: LD_VAR 0 3
25752: RET
// export function ComComplete ( unit , b ) ; var i ; begin
25753: LD_INT 0
25755: PPUSH
25756: PPUSH
// if BuildingStatus ( b ) = bs_build then
25757: LD_VAR 0 2
25761: PPUSH
25762: CALL_OW 461
25766: PUSH
25767: LD_INT 1
25769: EQUAL
25770: IFFALSE 25830
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25772: LD_VAR 0 1
25776: PPUSH
25777: LD_STRING h
25779: PUSH
25780: LD_VAR 0 2
25784: PPUSH
25785: CALL_OW 250
25789: PUSH
25790: LD_VAR 0 2
25794: PPUSH
25795: CALL_OW 251
25799: PUSH
25800: LD_VAR 0 2
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: LD_INT 0
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: PUSH
25823: EMPTY
25824: LIST
25825: PPUSH
25826: CALL_OW 446
// end ;
25830: LD_VAR 0 3
25834: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25835: LD_INT 0
25837: PPUSH
25838: PPUSH
25839: PPUSH
25840: PPUSH
25841: PPUSH
25842: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
25843: LD_VAR 0 1
25847: NOT
25848: PUSH
25849: LD_VAR 0 1
25853: PPUSH
25854: CALL_OW 263
25858: PUSH
25859: LD_INT 2
25861: EQUAL
25862: NOT
25863: OR
25864: IFFALSE 25868
// exit ;
25866: GO 26184
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25868: LD_ADDR_VAR 0 6
25872: PUSH
25873: LD_INT 22
25875: PUSH
25876: LD_VAR 0 1
25880: PPUSH
25881: CALL_OW 255
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 2
25892: PUSH
25893: LD_INT 30
25895: PUSH
25896: LD_INT 36
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 34
25905: PUSH
25906: LD_INT 31
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: LIST
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PPUSH
25922: CALL_OW 69
25926: ST_TO_ADDR
// if not tmp then
25927: LD_VAR 0 6
25931: NOT
25932: IFFALSE 25936
// exit ;
25934: GO 26184
// result := [ ] ;
25936: LD_ADDR_VAR 0 2
25940: PUSH
25941: EMPTY
25942: ST_TO_ADDR
// for i in tmp do
25943: LD_ADDR_VAR 0 3
25947: PUSH
25948: LD_VAR 0 6
25952: PUSH
25953: FOR_IN
25954: IFFALSE 26025
// begin t := UnitsInside ( i ) ;
25956: LD_ADDR_VAR 0 4
25960: PUSH
25961: LD_VAR 0 3
25965: PPUSH
25966: CALL_OW 313
25970: ST_TO_ADDR
// if t then
25971: LD_VAR 0 4
25975: IFFALSE 26023
// for j in t do
25977: LD_ADDR_VAR 0 7
25981: PUSH
25982: LD_VAR 0 4
25986: PUSH
25987: FOR_IN
25988: IFFALSE 26021
// result := Insert ( result , result + 1 , j ) ;
25990: LD_ADDR_VAR 0 2
25994: PUSH
25995: LD_VAR 0 2
25999: PPUSH
26000: LD_VAR 0 2
26004: PUSH
26005: LD_INT 1
26007: PLUS
26008: PPUSH
26009: LD_VAR 0 7
26013: PPUSH
26014: CALL_OW 2
26018: ST_TO_ADDR
26019: GO 25987
26021: POP
26022: POP
// end ;
26023: GO 25953
26025: POP
26026: POP
// if not result then
26027: LD_VAR 0 2
26031: NOT
26032: IFFALSE 26036
// exit ;
26034: GO 26184
// mech := result [ 1 ] ;
26036: LD_ADDR_VAR 0 5
26040: PUSH
26041: LD_VAR 0 2
26045: PUSH
26046: LD_INT 1
26048: ARRAY
26049: ST_TO_ADDR
// if result > 1 then
26050: LD_VAR 0 2
26054: PUSH
26055: LD_INT 1
26057: GREATER
26058: IFFALSE 26170
// for i = 2 to result do
26060: LD_ADDR_VAR 0 3
26064: PUSH
26065: DOUBLE
26066: LD_INT 2
26068: DEC
26069: ST_TO_ADDR
26070: LD_VAR 0 2
26074: PUSH
26075: FOR_TO
26076: IFFALSE 26168
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
26078: LD_ADDR_VAR 0 4
26082: PUSH
26083: LD_VAR 0 2
26087: PUSH
26088: LD_VAR 0 3
26092: ARRAY
26093: PPUSH
26094: LD_INT 3
26096: PPUSH
26097: CALL_OW 259
26101: PUSH
26102: LD_VAR 0 2
26106: PUSH
26107: LD_VAR 0 3
26111: ARRAY
26112: PPUSH
26113: CALL_OW 432
26117: MINUS
26118: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
26119: LD_VAR 0 4
26123: PUSH
26124: LD_VAR 0 5
26128: PPUSH
26129: LD_INT 3
26131: PPUSH
26132: CALL_OW 259
26136: PUSH
26137: LD_VAR 0 5
26141: PPUSH
26142: CALL_OW 432
26146: MINUS
26147: GREATEREQUAL
26148: IFFALSE 26166
// mech := result [ i ] ;
26150: LD_ADDR_VAR 0 5
26154: PUSH
26155: LD_VAR 0 2
26159: PUSH
26160: LD_VAR 0 3
26164: ARRAY
26165: ST_TO_ADDR
// end ;
26166: GO 26075
26168: POP
26169: POP
// ComLinkTo ( vehicle , mech ) ;
26170: LD_VAR 0 1
26174: PPUSH
26175: LD_VAR 0 5
26179: PPUSH
26180: CALL_OW 135
// end ;
26184: LD_VAR 0 2
26188: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26189: LD_INT 0
26191: PPUSH
26192: PPUSH
26193: PPUSH
26194: PPUSH
26195: PPUSH
26196: PPUSH
26197: PPUSH
26198: PPUSH
26199: PPUSH
26200: PPUSH
26201: PPUSH
26202: PPUSH
26203: PPUSH
// result := [ ] ;
26204: LD_ADDR_VAR 0 7
26208: PUSH
26209: EMPTY
26210: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
26211: LD_VAR 0 1
26215: PPUSH
26216: CALL_OW 266
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: LD_INT 1
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: IN
26231: NOT
26232: IFFALSE 26236
// exit ;
26234: GO 27867
// if name then
26236: LD_VAR 0 3
26240: IFFALSE 26256
// SetBName ( base_dep , name ) ;
26242: LD_VAR 0 1
26246: PPUSH
26247: LD_VAR 0 3
26251: PPUSH
26252: CALL_OW 500
// base := GetBase ( base_dep ) ;
26256: LD_ADDR_VAR 0 15
26260: PUSH
26261: LD_VAR 0 1
26265: PPUSH
26266: CALL_OW 274
26270: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
26271: LD_ADDR_VAR 0 16
26275: PUSH
26276: LD_VAR 0 1
26280: PPUSH
26281: CALL_OW 255
26285: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26286: LD_ADDR_VAR 0 17
26290: PUSH
26291: LD_VAR 0 1
26295: PPUSH
26296: CALL_OW 248
26300: ST_TO_ADDR
// if sources then
26301: LD_VAR 0 5
26305: IFFALSE 26352
// for i = 1 to 3 do
26307: LD_ADDR_VAR 0 8
26311: PUSH
26312: DOUBLE
26313: LD_INT 1
26315: DEC
26316: ST_TO_ADDR
26317: LD_INT 3
26319: PUSH
26320: FOR_TO
26321: IFFALSE 26350
// AddResourceType ( base , i , sources [ i ] ) ;
26323: LD_VAR 0 15
26327: PPUSH
26328: LD_VAR 0 8
26332: PPUSH
26333: LD_VAR 0 5
26337: PUSH
26338: LD_VAR 0 8
26342: ARRAY
26343: PPUSH
26344: CALL_OW 276
26348: GO 26320
26350: POP
26351: POP
// buildings := GetBaseBuildings ( base , area ) ;
26352: LD_ADDR_VAR 0 18
26356: PUSH
26357: LD_VAR 0 15
26361: PPUSH
26362: LD_VAR 0 2
26366: PPUSH
26367: CALL 25644 0 2
26371: ST_TO_ADDR
// InitHc ;
26372: CALL_OW 19
// InitUc ;
26376: CALL_OW 18
// uc_side := side ;
26380: LD_ADDR_OWVAR 20
26384: PUSH
26385: LD_VAR 0 16
26389: ST_TO_ADDR
// uc_nation := nation ;
26390: LD_ADDR_OWVAR 21
26394: PUSH
26395: LD_VAR 0 17
26399: ST_TO_ADDR
// if buildings then
26400: LD_VAR 0 18
26404: IFFALSE 27726
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26406: LD_ADDR_VAR 0 19
26410: PUSH
26411: LD_VAR 0 18
26415: PPUSH
26416: LD_INT 2
26418: PUSH
26419: LD_INT 30
26421: PUSH
26422: LD_INT 29
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 30
26431: PUSH
26432: LD_INT 30
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: LIST
26443: PPUSH
26444: CALL_OW 72
26448: ST_TO_ADDR
// if tmp then
26449: LD_VAR 0 19
26453: IFFALSE 26501
// for i in tmp do
26455: LD_ADDR_VAR 0 8
26459: PUSH
26460: LD_VAR 0 19
26464: PUSH
26465: FOR_IN
26466: IFFALSE 26499
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26468: LD_VAR 0 8
26472: PPUSH
26473: CALL_OW 250
26477: PPUSH
26478: LD_VAR 0 8
26482: PPUSH
26483: CALL_OW 251
26487: PPUSH
26488: LD_VAR 0 16
26492: PPUSH
26493: CALL_OW 441
26497: GO 26465
26499: POP
26500: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26501: LD_VAR 0 18
26505: PPUSH
26506: LD_INT 2
26508: PUSH
26509: LD_INT 30
26511: PUSH
26512: LD_INT 32
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 30
26521: PUSH
26522: LD_INT 33
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: LIST
26533: PPUSH
26534: CALL_OW 72
26538: IFFALSE 26626
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26540: LD_ADDR_VAR 0 8
26544: PUSH
26545: LD_VAR 0 18
26549: PPUSH
26550: LD_INT 2
26552: PUSH
26553: LD_INT 30
26555: PUSH
26556: LD_INT 32
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 30
26565: PUSH
26566: LD_INT 33
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: LIST
26577: PPUSH
26578: CALL_OW 72
26582: PUSH
26583: FOR_IN
26584: IFFALSE 26624
// begin if not GetBWeapon ( i ) then
26586: LD_VAR 0 8
26590: PPUSH
26591: CALL_OW 269
26595: NOT
26596: IFFALSE 26622
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26598: LD_VAR 0 8
26602: PPUSH
26603: LD_VAR 0 8
26607: PPUSH
26608: LD_VAR 0 2
26612: PPUSH
26613: CALL 27872 0 2
26617: PPUSH
26618: CALL_OW 431
// end ;
26622: GO 26583
26624: POP
26625: POP
// end ; for i = 1 to personel do
26626: LD_ADDR_VAR 0 8
26630: PUSH
26631: DOUBLE
26632: LD_INT 1
26634: DEC
26635: ST_TO_ADDR
26636: LD_VAR 0 6
26640: PUSH
26641: FOR_TO
26642: IFFALSE 27706
// begin if i > 4 then
26644: LD_VAR 0 8
26648: PUSH
26649: LD_INT 4
26651: GREATER
26652: IFFALSE 26656
// break ;
26654: GO 27706
// case i of 1 :
26656: LD_VAR 0 8
26660: PUSH
26661: LD_INT 1
26663: DOUBLE
26664: EQUAL
26665: IFTRUE 26669
26667: GO 26749
26669: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26670: LD_ADDR_VAR 0 12
26674: PUSH
26675: LD_VAR 0 18
26679: PPUSH
26680: LD_INT 22
26682: PUSH
26683: LD_VAR 0 16
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 58
26694: PUSH
26695: EMPTY
26696: LIST
26697: PUSH
26698: LD_INT 2
26700: PUSH
26701: LD_INT 30
26703: PUSH
26704: LD_INT 32
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 30
26713: PUSH
26714: LD_INT 4
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 30
26723: PUSH
26724: LD_INT 5
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: LIST
26741: PPUSH
26742: CALL_OW 72
26746: ST_TO_ADDR
26747: GO 26971
26749: LD_INT 2
26751: DOUBLE
26752: EQUAL
26753: IFTRUE 26757
26755: GO 26819
26757: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26758: LD_ADDR_VAR 0 12
26762: PUSH
26763: LD_VAR 0 18
26767: PPUSH
26768: LD_INT 22
26770: PUSH
26771: LD_VAR 0 16
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 2
26782: PUSH
26783: LD_INT 30
26785: PUSH
26786: LD_INT 0
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 30
26795: PUSH
26796: LD_INT 1
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: LIST
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PPUSH
26812: CALL_OW 72
26816: ST_TO_ADDR
26817: GO 26971
26819: LD_INT 3
26821: DOUBLE
26822: EQUAL
26823: IFTRUE 26827
26825: GO 26889
26827: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26828: LD_ADDR_VAR 0 12
26832: PUSH
26833: LD_VAR 0 18
26837: PPUSH
26838: LD_INT 22
26840: PUSH
26841: LD_VAR 0 16
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 2
26852: PUSH
26853: LD_INT 30
26855: PUSH
26856: LD_INT 2
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 30
26865: PUSH
26866: LD_INT 3
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: LIST
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PPUSH
26882: CALL_OW 72
26886: ST_TO_ADDR
26887: GO 26971
26889: LD_INT 4
26891: DOUBLE
26892: EQUAL
26893: IFTRUE 26897
26895: GO 26970
26897: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26898: LD_ADDR_VAR 0 12
26902: PUSH
26903: LD_VAR 0 18
26907: PPUSH
26908: LD_INT 22
26910: PUSH
26911: LD_VAR 0 16
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 2
26922: PUSH
26923: LD_INT 30
26925: PUSH
26926: LD_INT 6
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 30
26935: PUSH
26936: LD_INT 7
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 30
26945: PUSH
26946: LD_INT 8
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PPUSH
26963: CALL_OW 72
26967: ST_TO_ADDR
26968: GO 26971
26970: POP
// if i = 1 then
26971: LD_VAR 0 8
26975: PUSH
26976: LD_INT 1
26978: EQUAL
26979: IFFALSE 27090
// begin tmp := [ ] ;
26981: LD_ADDR_VAR 0 19
26985: PUSH
26986: EMPTY
26987: ST_TO_ADDR
// for j in f do
26988: LD_ADDR_VAR 0 9
26992: PUSH
26993: LD_VAR 0 12
26997: PUSH
26998: FOR_IN
26999: IFFALSE 27072
// if GetBType ( j ) = b_bunker then
27001: LD_VAR 0 9
27005: PPUSH
27006: CALL_OW 266
27010: PUSH
27011: LD_INT 32
27013: EQUAL
27014: IFFALSE 27041
// tmp := Insert ( tmp , 1 , j ) else
27016: LD_ADDR_VAR 0 19
27020: PUSH
27021: LD_VAR 0 19
27025: PPUSH
27026: LD_INT 1
27028: PPUSH
27029: LD_VAR 0 9
27033: PPUSH
27034: CALL_OW 2
27038: ST_TO_ADDR
27039: GO 27070
// tmp := Insert ( tmp , tmp + 1 , j ) ;
27041: LD_ADDR_VAR 0 19
27045: PUSH
27046: LD_VAR 0 19
27050: PPUSH
27051: LD_VAR 0 19
27055: PUSH
27056: LD_INT 1
27058: PLUS
27059: PPUSH
27060: LD_VAR 0 9
27064: PPUSH
27065: CALL_OW 2
27069: ST_TO_ADDR
27070: GO 26998
27072: POP
27073: POP
// if tmp then
27074: LD_VAR 0 19
27078: IFFALSE 27090
// f := tmp ;
27080: LD_ADDR_VAR 0 12
27084: PUSH
27085: LD_VAR 0 19
27089: ST_TO_ADDR
// end ; x := personel [ i ] ;
27090: LD_ADDR_VAR 0 13
27094: PUSH
27095: LD_VAR 0 6
27099: PUSH
27100: LD_VAR 0 8
27104: ARRAY
27105: ST_TO_ADDR
// if x = - 1 then
27106: LD_VAR 0 13
27110: PUSH
27111: LD_INT 1
27113: NEG
27114: EQUAL
27115: IFFALSE 27324
// begin for j in f do
27117: LD_ADDR_VAR 0 9
27121: PUSH
27122: LD_VAR 0 12
27126: PUSH
27127: FOR_IN
27128: IFFALSE 27320
// repeat InitHc ;
27130: CALL_OW 19
// if GetBType ( j ) = b_barracks then
27134: LD_VAR 0 9
27138: PPUSH
27139: CALL_OW 266
27143: PUSH
27144: LD_INT 5
27146: EQUAL
27147: IFFALSE 27217
// begin if UnitsInside ( j ) < 3 then
27149: LD_VAR 0 9
27153: PPUSH
27154: CALL_OW 313
27158: PUSH
27159: LD_INT 3
27161: LESS
27162: IFFALSE 27198
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27164: LD_INT 0
27166: PPUSH
27167: LD_INT 5
27169: PUSH
27170: LD_INT 8
27172: PUSH
27173: LD_INT 9
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: LIST
27180: PUSH
27181: LD_VAR 0 17
27185: ARRAY
27186: PPUSH
27187: LD_VAR 0 4
27191: PPUSH
27192: CALL_OW 380
27196: GO 27215
// PrepareHuman ( false , i , skill ) ;
27198: LD_INT 0
27200: PPUSH
27201: LD_VAR 0 8
27205: PPUSH
27206: LD_VAR 0 4
27210: PPUSH
27211: CALL_OW 380
// end else
27215: GO 27234
// PrepareHuman ( false , i , skill ) ;
27217: LD_INT 0
27219: PPUSH
27220: LD_VAR 0 8
27224: PPUSH
27225: LD_VAR 0 4
27229: PPUSH
27230: CALL_OW 380
// un := CreateHuman ;
27234: LD_ADDR_VAR 0 14
27238: PUSH
27239: CALL_OW 44
27243: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27244: LD_ADDR_VAR 0 7
27248: PUSH
27249: LD_VAR 0 7
27253: PPUSH
27254: LD_INT 1
27256: PPUSH
27257: LD_VAR 0 14
27261: PPUSH
27262: CALL_OW 2
27266: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
27267: LD_VAR 0 14
27271: PPUSH
27272: LD_VAR 0 9
27276: PPUSH
27277: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27281: LD_VAR 0 9
27285: PPUSH
27286: CALL_OW 313
27290: PUSH
27291: LD_INT 6
27293: EQUAL
27294: PUSH
27295: LD_VAR 0 9
27299: PPUSH
27300: CALL_OW 266
27304: PUSH
27305: LD_INT 32
27307: PUSH
27308: LD_INT 31
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: IN
27315: OR
27316: IFFALSE 27130
27318: GO 27127
27320: POP
27321: POP
// end else
27322: GO 27704
// for j = 1 to x do
27324: LD_ADDR_VAR 0 9
27328: PUSH
27329: DOUBLE
27330: LD_INT 1
27332: DEC
27333: ST_TO_ADDR
27334: LD_VAR 0 13
27338: PUSH
27339: FOR_TO
27340: IFFALSE 27702
// begin InitHc ;
27342: CALL_OW 19
// if not f then
27346: LD_VAR 0 12
27350: NOT
27351: IFFALSE 27440
// begin PrepareHuman ( false , i , skill ) ;
27353: LD_INT 0
27355: PPUSH
27356: LD_VAR 0 8
27360: PPUSH
27361: LD_VAR 0 4
27365: PPUSH
27366: CALL_OW 380
// un := CreateHuman ;
27370: LD_ADDR_VAR 0 14
27374: PUSH
27375: CALL_OW 44
27379: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27380: LD_ADDR_VAR 0 7
27384: PUSH
27385: LD_VAR 0 7
27389: PPUSH
27390: LD_INT 1
27392: PPUSH
27393: LD_VAR 0 14
27397: PPUSH
27398: CALL_OW 2
27402: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27403: LD_VAR 0 14
27407: PPUSH
27408: LD_VAR 0 1
27412: PPUSH
27413: CALL_OW 250
27417: PPUSH
27418: LD_VAR 0 1
27422: PPUSH
27423: CALL_OW 251
27427: PPUSH
27428: LD_INT 10
27430: PPUSH
27431: LD_INT 0
27433: PPUSH
27434: CALL_OW 50
// continue ;
27438: GO 27339
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27440: LD_VAR 0 12
27444: PUSH
27445: LD_INT 1
27447: ARRAY
27448: PPUSH
27449: CALL_OW 313
27453: PUSH
27454: LD_VAR 0 12
27458: PUSH
27459: LD_INT 1
27461: ARRAY
27462: PPUSH
27463: CALL_OW 266
27467: PUSH
27468: LD_INT 32
27470: PUSH
27471: LD_INT 31
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: IN
27478: AND
27479: PUSH
27480: LD_VAR 0 12
27484: PUSH
27485: LD_INT 1
27487: ARRAY
27488: PPUSH
27489: CALL_OW 313
27493: PUSH
27494: LD_INT 6
27496: EQUAL
27497: OR
27498: IFFALSE 27518
// f := Delete ( f , 1 ) ;
27500: LD_ADDR_VAR 0 12
27504: PUSH
27505: LD_VAR 0 12
27509: PPUSH
27510: LD_INT 1
27512: PPUSH
27513: CALL_OW 3
27517: ST_TO_ADDR
// if not f then
27518: LD_VAR 0 12
27522: NOT
27523: IFFALSE 27541
// begin x := x + 2 ;
27525: LD_ADDR_VAR 0 13
27529: PUSH
27530: LD_VAR 0 13
27534: PUSH
27535: LD_INT 2
27537: PLUS
27538: ST_TO_ADDR
// continue ;
27539: GO 27339
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27541: LD_VAR 0 12
27545: PUSH
27546: LD_INT 1
27548: ARRAY
27549: PPUSH
27550: CALL_OW 266
27554: PUSH
27555: LD_INT 5
27557: EQUAL
27558: IFFALSE 27632
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27560: LD_VAR 0 12
27564: PUSH
27565: LD_INT 1
27567: ARRAY
27568: PPUSH
27569: CALL_OW 313
27573: PUSH
27574: LD_INT 3
27576: LESS
27577: IFFALSE 27613
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27579: LD_INT 0
27581: PPUSH
27582: LD_INT 5
27584: PUSH
27585: LD_INT 8
27587: PUSH
27588: LD_INT 9
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: LIST
27595: PUSH
27596: LD_VAR 0 17
27600: ARRAY
27601: PPUSH
27602: LD_VAR 0 4
27606: PPUSH
27607: CALL_OW 380
27611: GO 27630
// PrepareHuman ( false , i , skill ) ;
27613: LD_INT 0
27615: PPUSH
27616: LD_VAR 0 8
27620: PPUSH
27621: LD_VAR 0 4
27625: PPUSH
27626: CALL_OW 380
// end else
27630: GO 27649
// PrepareHuman ( false , i , skill ) ;
27632: LD_INT 0
27634: PPUSH
27635: LD_VAR 0 8
27639: PPUSH
27640: LD_VAR 0 4
27644: PPUSH
27645: CALL_OW 380
// un := CreateHuman ;
27649: LD_ADDR_VAR 0 14
27653: PUSH
27654: CALL_OW 44
27658: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27659: LD_ADDR_VAR 0 7
27663: PUSH
27664: LD_VAR 0 7
27668: PPUSH
27669: LD_INT 1
27671: PPUSH
27672: LD_VAR 0 14
27676: PPUSH
27677: CALL_OW 2
27681: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27682: LD_VAR 0 14
27686: PPUSH
27687: LD_VAR 0 12
27691: PUSH
27692: LD_INT 1
27694: ARRAY
27695: PPUSH
27696: CALL_OW 52
// end ;
27700: GO 27339
27702: POP
27703: POP
// end ;
27704: GO 26641
27706: POP
27707: POP
// result := result ^ buildings ;
27708: LD_ADDR_VAR 0 7
27712: PUSH
27713: LD_VAR 0 7
27717: PUSH
27718: LD_VAR 0 18
27722: ADD
27723: ST_TO_ADDR
// end else
27724: GO 27867
// begin for i = 1 to personel do
27726: LD_ADDR_VAR 0 8
27730: PUSH
27731: DOUBLE
27732: LD_INT 1
27734: DEC
27735: ST_TO_ADDR
27736: LD_VAR 0 6
27740: PUSH
27741: FOR_TO
27742: IFFALSE 27865
// begin if i > 4 then
27744: LD_VAR 0 8
27748: PUSH
27749: LD_INT 4
27751: GREATER
27752: IFFALSE 27756
// break ;
27754: GO 27865
// x := personel [ i ] ;
27756: LD_ADDR_VAR 0 13
27760: PUSH
27761: LD_VAR 0 6
27765: PUSH
27766: LD_VAR 0 8
27770: ARRAY
27771: ST_TO_ADDR
// if x = - 1 then
27772: LD_VAR 0 13
27776: PUSH
27777: LD_INT 1
27779: NEG
27780: EQUAL
27781: IFFALSE 27785
// continue ;
27783: GO 27741
// PrepareHuman ( false , i , skill ) ;
27785: LD_INT 0
27787: PPUSH
27788: LD_VAR 0 8
27792: PPUSH
27793: LD_VAR 0 4
27797: PPUSH
27798: CALL_OW 380
// un := CreateHuman ;
27802: LD_ADDR_VAR 0 14
27806: PUSH
27807: CALL_OW 44
27811: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27812: LD_VAR 0 14
27816: PPUSH
27817: LD_VAR 0 1
27821: PPUSH
27822: CALL_OW 250
27826: PPUSH
27827: LD_VAR 0 1
27831: PPUSH
27832: CALL_OW 251
27836: PPUSH
27837: LD_INT 10
27839: PPUSH
27840: LD_INT 0
27842: PPUSH
27843: CALL_OW 50
// result := result ^ un ;
27847: LD_ADDR_VAR 0 7
27851: PUSH
27852: LD_VAR 0 7
27856: PUSH
27857: LD_VAR 0 14
27861: ADD
27862: ST_TO_ADDR
// end ;
27863: GO 27741
27865: POP
27866: POP
// end ; end ;
27867: LD_VAR 0 7
27871: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27872: LD_INT 0
27874: PPUSH
27875: PPUSH
27876: PPUSH
27877: PPUSH
27878: PPUSH
27879: PPUSH
27880: PPUSH
27881: PPUSH
27882: PPUSH
27883: PPUSH
27884: PPUSH
27885: PPUSH
27886: PPUSH
27887: PPUSH
27888: PPUSH
27889: PPUSH
// result := false ;
27890: LD_ADDR_VAR 0 3
27894: PUSH
27895: LD_INT 0
27897: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27898: LD_VAR 0 1
27902: NOT
27903: PUSH
27904: LD_VAR 0 1
27908: PPUSH
27909: CALL_OW 266
27913: PUSH
27914: LD_INT 32
27916: PUSH
27917: LD_INT 33
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: IN
27924: NOT
27925: OR
27926: IFFALSE 27930
// exit ;
27928: GO 29066
// nat := GetNation ( tower ) ;
27930: LD_ADDR_VAR 0 12
27934: PUSH
27935: LD_VAR 0 1
27939: PPUSH
27940: CALL_OW 248
27944: ST_TO_ADDR
// side := GetSide ( tower ) ;
27945: LD_ADDR_VAR 0 16
27949: PUSH
27950: LD_VAR 0 1
27954: PPUSH
27955: CALL_OW 255
27959: ST_TO_ADDR
// x := GetX ( tower ) ;
27960: LD_ADDR_VAR 0 10
27964: PUSH
27965: LD_VAR 0 1
27969: PPUSH
27970: CALL_OW 250
27974: ST_TO_ADDR
// y := GetY ( tower ) ;
27975: LD_ADDR_VAR 0 11
27979: PUSH
27980: LD_VAR 0 1
27984: PPUSH
27985: CALL_OW 251
27989: ST_TO_ADDR
// if not x or not y then
27990: LD_VAR 0 10
27994: NOT
27995: PUSH
27996: LD_VAR 0 11
28000: NOT
28001: OR
28002: IFFALSE 28006
// exit ;
28004: GO 29066
// weapon := 0 ;
28006: LD_ADDR_VAR 0 18
28010: PUSH
28011: LD_INT 0
28013: ST_TO_ADDR
// fac_list := [ ] ;
28014: LD_ADDR_VAR 0 17
28018: PUSH
28019: EMPTY
28020: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
28021: LD_ADDR_VAR 0 6
28025: PUSH
28026: LD_VAR 0 1
28030: PPUSH
28031: CALL_OW 274
28035: PPUSH
28036: LD_VAR 0 2
28040: PPUSH
28041: CALL 25644 0 2
28045: PPUSH
28046: LD_INT 30
28048: PUSH
28049: LD_INT 3
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PPUSH
28056: CALL_OW 72
28060: ST_TO_ADDR
// if not factories then
28061: LD_VAR 0 6
28065: NOT
28066: IFFALSE 28070
// exit ;
28068: GO 29066
// for i in factories do
28070: LD_ADDR_VAR 0 8
28074: PUSH
28075: LD_VAR 0 6
28079: PUSH
28080: FOR_IN
28081: IFFALSE 28106
// fac_list := fac_list union AvailableWeaponList ( i ) ;
28083: LD_ADDR_VAR 0 17
28087: PUSH
28088: LD_VAR 0 17
28092: PUSH
28093: LD_VAR 0 8
28097: PPUSH
28098: CALL_OW 478
28102: UNION
28103: ST_TO_ADDR
28104: GO 28080
28106: POP
28107: POP
// if not fac_list then
28108: LD_VAR 0 17
28112: NOT
28113: IFFALSE 28117
// exit ;
28115: GO 29066
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
28117: LD_ADDR_VAR 0 5
28121: PUSH
28122: LD_INT 4
28124: PUSH
28125: LD_INT 5
28127: PUSH
28128: LD_INT 9
28130: PUSH
28131: LD_INT 10
28133: PUSH
28134: LD_INT 6
28136: PUSH
28137: LD_INT 7
28139: PUSH
28140: LD_INT 11
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 27
28154: PUSH
28155: LD_INT 28
28157: PUSH
28158: LD_INT 26
28160: PUSH
28161: LD_INT 30
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 43
28172: PUSH
28173: LD_INT 44
28175: PUSH
28176: LD_INT 46
28178: PUSH
28179: LD_INT 45
28181: PUSH
28182: LD_INT 47
28184: PUSH
28185: LD_INT 49
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: LIST
28200: PUSH
28201: LD_VAR 0 12
28205: ARRAY
28206: ST_TO_ADDR
// for i in list do
28207: LD_ADDR_VAR 0 8
28211: PUSH
28212: LD_VAR 0 5
28216: PUSH
28217: FOR_IN
28218: IFFALSE 28251
// if not i in fac_list then
28220: LD_VAR 0 8
28224: PUSH
28225: LD_VAR 0 17
28229: IN
28230: NOT
28231: IFFALSE 28249
// list := list diff i ;
28233: LD_ADDR_VAR 0 5
28237: PUSH
28238: LD_VAR 0 5
28242: PUSH
28243: LD_VAR 0 8
28247: DIFF
28248: ST_TO_ADDR
28249: GO 28217
28251: POP
28252: POP
// if not list then
28253: LD_VAR 0 5
28257: NOT
28258: IFFALSE 28262
// exit ;
28260: GO 29066
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
28262: LD_VAR 0 12
28266: PUSH
28267: LD_INT 3
28269: EQUAL
28270: PUSH
28271: LD_INT 49
28273: PUSH
28274: LD_VAR 0 5
28278: IN
28279: AND
28280: PUSH
28281: LD_INT 31
28283: PPUSH
28284: LD_VAR 0 16
28288: PPUSH
28289: CALL_OW 321
28293: PUSH
28294: LD_INT 2
28296: EQUAL
28297: AND
28298: IFFALSE 28358
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28300: LD_INT 22
28302: PUSH
28303: LD_VAR 0 16
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 35
28314: PUSH
28315: LD_INT 49
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 91
28324: PUSH
28325: LD_VAR 0 1
28329: PUSH
28330: LD_INT 10
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: LIST
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: LIST
28342: PPUSH
28343: CALL_OW 69
28347: NOT
28348: IFFALSE 28358
// weapon := ru_time_lapser ;
28350: LD_ADDR_VAR 0 18
28354: PUSH
28355: LD_INT 49
28357: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28358: LD_VAR 0 12
28362: PUSH
28363: LD_INT 1
28365: PUSH
28366: LD_INT 2
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: IN
28373: PUSH
28374: LD_INT 11
28376: PUSH
28377: LD_VAR 0 5
28381: IN
28382: PUSH
28383: LD_INT 30
28385: PUSH
28386: LD_VAR 0 5
28390: IN
28391: OR
28392: AND
28393: PUSH
28394: LD_INT 6
28396: PPUSH
28397: LD_VAR 0 16
28401: PPUSH
28402: CALL_OW 321
28406: PUSH
28407: LD_INT 2
28409: EQUAL
28410: AND
28411: IFFALSE 28576
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28413: LD_INT 22
28415: PUSH
28416: LD_VAR 0 16
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 2
28427: PUSH
28428: LD_INT 35
28430: PUSH
28431: LD_INT 11
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 35
28440: PUSH
28441: LD_INT 30
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 91
28455: PUSH
28456: LD_VAR 0 1
28460: PUSH
28461: LD_INT 18
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: LIST
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: LIST
28473: PPUSH
28474: CALL_OW 69
28478: NOT
28479: PUSH
28480: LD_INT 22
28482: PUSH
28483: LD_VAR 0 16
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: PUSH
28495: LD_INT 30
28497: PUSH
28498: LD_INT 32
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 30
28507: PUSH
28508: LD_INT 33
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 91
28522: PUSH
28523: LD_VAR 0 1
28527: PUSH
28528: LD_INT 12
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: PPUSH
28544: CALL_OW 69
28548: PUSH
28549: LD_INT 2
28551: GREATER
28552: AND
28553: IFFALSE 28576
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28555: LD_ADDR_VAR 0 18
28559: PUSH
28560: LD_INT 11
28562: PUSH
28563: LD_INT 30
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_VAR 0 12
28574: ARRAY
28575: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28576: LD_VAR 0 18
28580: NOT
28581: PUSH
28582: LD_INT 40
28584: PPUSH
28585: LD_VAR 0 16
28589: PPUSH
28590: CALL_OW 321
28594: PUSH
28595: LD_INT 2
28597: EQUAL
28598: AND
28599: PUSH
28600: LD_INT 7
28602: PUSH
28603: LD_VAR 0 5
28607: IN
28608: PUSH
28609: LD_INT 28
28611: PUSH
28612: LD_VAR 0 5
28616: IN
28617: OR
28618: PUSH
28619: LD_INT 45
28621: PUSH
28622: LD_VAR 0 5
28626: IN
28627: OR
28628: AND
28629: IFFALSE 28883
// begin hex := GetHexInfo ( x , y ) ;
28631: LD_ADDR_VAR 0 4
28635: PUSH
28636: LD_VAR 0 10
28640: PPUSH
28641: LD_VAR 0 11
28645: PPUSH
28646: CALL_OW 546
28650: ST_TO_ADDR
// if hex [ 1 ] then
28651: LD_VAR 0 4
28655: PUSH
28656: LD_INT 1
28658: ARRAY
28659: IFFALSE 28663
// exit ;
28661: GO 29066
// height := hex [ 2 ] ;
28663: LD_ADDR_VAR 0 15
28667: PUSH
28668: LD_VAR 0 4
28672: PUSH
28673: LD_INT 2
28675: ARRAY
28676: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28677: LD_ADDR_VAR 0 14
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: LD_INT 3
28690: PUSH
28691: LD_INT 5
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: ST_TO_ADDR
// for i in tmp do
28700: LD_ADDR_VAR 0 8
28704: PUSH
28705: LD_VAR 0 14
28709: PUSH
28710: FOR_IN
28711: IFFALSE 28881
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28713: LD_ADDR_VAR 0 9
28717: PUSH
28718: LD_VAR 0 10
28722: PPUSH
28723: LD_VAR 0 8
28727: PPUSH
28728: LD_INT 5
28730: PPUSH
28731: CALL_OW 272
28735: PUSH
28736: LD_VAR 0 11
28740: PPUSH
28741: LD_VAR 0 8
28745: PPUSH
28746: LD_INT 5
28748: PPUSH
28749: CALL_OW 273
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28758: LD_VAR 0 9
28762: PUSH
28763: LD_INT 1
28765: ARRAY
28766: PPUSH
28767: LD_VAR 0 9
28771: PUSH
28772: LD_INT 2
28774: ARRAY
28775: PPUSH
28776: CALL_OW 488
28780: IFFALSE 28879
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28782: LD_ADDR_VAR 0 4
28786: PUSH
28787: LD_VAR 0 9
28791: PUSH
28792: LD_INT 1
28794: ARRAY
28795: PPUSH
28796: LD_VAR 0 9
28800: PUSH
28801: LD_INT 2
28803: ARRAY
28804: PPUSH
28805: CALL_OW 546
28809: ST_TO_ADDR
// if hex [ 1 ] then
28810: LD_VAR 0 4
28814: PUSH
28815: LD_INT 1
28817: ARRAY
28818: IFFALSE 28822
// continue ;
28820: GO 28710
// h := hex [ 2 ] ;
28822: LD_ADDR_VAR 0 13
28826: PUSH
28827: LD_VAR 0 4
28831: PUSH
28832: LD_INT 2
28834: ARRAY
28835: ST_TO_ADDR
// if h + 7 < height then
28836: LD_VAR 0 13
28840: PUSH
28841: LD_INT 7
28843: PLUS
28844: PUSH
28845: LD_VAR 0 15
28849: LESS
28850: IFFALSE 28879
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28852: LD_ADDR_VAR 0 18
28856: PUSH
28857: LD_INT 7
28859: PUSH
28860: LD_INT 28
28862: PUSH
28863: LD_INT 45
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: LIST
28870: PUSH
28871: LD_VAR 0 12
28875: ARRAY
28876: ST_TO_ADDR
// break ;
28877: GO 28881
// end ; end ; end ;
28879: GO 28710
28881: POP
28882: POP
// end ; if not weapon then
28883: LD_VAR 0 18
28887: NOT
28888: IFFALSE 28948
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28890: LD_ADDR_VAR 0 5
28894: PUSH
28895: LD_VAR 0 5
28899: PUSH
28900: LD_INT 11
28902: PUSH
28903: LD_INT 30
28905: PUSH
28906: LD_INT 49
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: LIST
28913: DIFF
28914: ST_TO_ADDR
// if not list then
28915: LD_VAR 0 5
28919: NOT
28920: IFFALSE 28924
// exit ;
28922: GO 29066
// weapon := list [ rand ( 1 , list ) ] ;
28924: LD_ADDR_VAR 0 18
28928: PUSH
28929: LD_VAR 0 5
28933: PUSH
28934: LD_INT 1
28936: PPUSH
28937: LD_VAR 0 5
28941: PPUSH
28942: CALL_OW 12
28946: ARRAY
28947: ST_TO_ADDR
// end ; if weapon then
28948: LD_VAR 0 18
28952: IFFALSE 29066
// begin tmp := CostOfWeapon ( weapon ) ;
28954: LD_ADDR_VAR 0 14
28958: PUSH
28959: LD_VAR 0 18
28963: PPUSH
28964: CALL_OW 451
28968: ST_TO_ADDR
// j := GetBase ( tower ) ;
28969: LD_ADDR_VAR 0 9
28973: PUSH
28974: LD_VAR 0 1
28978: PPUSH
28979: CALL_OW 274
28983: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28984: LD_VAR 0 9
28988: PPUSH
28989: LD_INT 1
28991: PPUSH
28992: CALL_OW 275
28996: PUSH
28997: LD_VAR 0 14
29001: PUSH
29002: LD_INT 1
29004: ARRAY
29005: GREATEREQUAL
29006: PUSH
29007: LD_VAR 0 9
29011: PPUSH
29012: LD_INT 2
29014: PPUSH
29015: CALL_OW 275
29019: PUSH
29020: LD_VAR 0 14
29024: PUSH
29025: LD_INT 2
29027: ARRAY
29028: GREATEREQUAL
29029: AND
29030: PUSH
29031: LD_VAR 0 9
29035: PPUSH
29036: LD_INT 3
29038: PPUSH
29039: CALL_OW 275
29043: PUSH
29044: LD_VAR 0 14
29048: PUSH
29049: LD_INT 3
29051: ARRAY
29052: GREATEREQUAL
29053: AND
29054: IFFALSE 29066
// result := weapon ;
29056: LD_ADDR_VAR 0 3
29060: PUSH
29061: LD_VAR 0 18
29065: ST_TO_ADDR
// end ; end ;
29066: LD_VAR 0 3
29070: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
29071: LD_INT 0
29073: PPUSH
29074: PPUSH
// result := true ;
29075: LD_ADDR_VAR 0 3
29079: PUSH
29080: LD_INT 1
29082: ST_TO_ADDR
// if array1 = array2 then
29083: LD_VAR 0 1
29087: PUSH
29088: LD_VAR 0 2
29092: EQUAL
29093: IFFALSE 29153
// begin for i = 1 to array1 do
29095: LD_ADDR_VAR 0 4
29099: PUSH
29100: DOUBLE
29101: LD_INT 1
29103: DEC
29104: ST_TO_ADDR
29105: LD_VAR 0 1
29109: PUSH
29110: FOR_TO
29111: IFFALSE 29149
// if array1 [ i ] <> array2 [ i ] then
29113: LD_VAR 0 1
29117: PUSH
29118: LD_VAR 0 4
29122: ARRAY
29123: PUSH
29124: LD_VAR 0 2
29128: PUSH
29129: LD_VAR 0 4
29133: ARRAY
29134: NONEQUAL
29135: IFFALSE 29147
// begin result := false ;
29137: LD_ADDR_VAR 0 3
29141: PUSH
29142: LD_INT 0
29144: ST_TO_ADDR
// break ;
29145: GO 29149
// end ;
29147: GO 29110
29149: POP
29150: POP
// end else
29151: GO 29161
// result := false ;
29153: LD_ADDR_VAR 0 3
29157: PUSH
29158: LD_INT 0
29160: ST_TO_ADDR
// end ;
29161: LD_VAR 0 3
29165: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29166: LD_INT 0
29168: PPUSH
29169: PPUSH
29170: PPUSH
// pom := GetBase ( fac ) ;
29171: LD_ADDR_VAR 0 5
29175: PUSH
29176: LD_VAR 0 1
29180: PPUSH
29181: CALL_OW 274
29185: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29186: LD_ADDR_VAR 0 4
29190: PUSH
29191: LD_VAR 0 2
29195: PUSH
29196: LD_INT 1
29198: ARRAY
29199: PPUSH
29200: LD_VAR 0 2
29204: PUSH
29205: LD_INT 2
29207: ARRAY
29208: PPUSH
29209: LD_VAR 0 2
29213: PUSH
29214: LD_INT 3
29216: ARRAY
29217: PPUSH
29218: LD_VAR 0 2
29222: PUSH
29223: LD_INT 4
29225: ARRAY
29226: PPUSH
29227: CALL_OW 449
29231: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29232: LD_ADDR_VAR 0 3
29236: PUSH
29237: LD_VAR 0 5
29241: PPUSH
29242: LD_INT 1
29244: PPUSH
29245: CALL_OW 275
29249: PUSH
29250: LD_VAR 0 4
29254: PUSH
29255: LD_INT 1
29257: ARRAY
29258: GREATEREQUAL
29259: PUSH
29260: LD_VAR 0 5
29264: PPUSH
29265: LD_INT 2
29267: PPUSH
29268: CALL_OW 275
29272: PUSH
29273: LD_VAR 0 4
29277: PUSH
29278: LD_INT 2
29280: ARRAY
29281: GREATEREQUAL
29282: AND
29283: PUSH
29284: LD_VAR 0 5
29288: PPUSH
29289: LD_INT 3
29291: PPUSH
29292: CALL_OW 275
29296: PUSH
29297: LD_VAR 0 4
29301: PUSH
29302: LD_INT 3
29304: ARRAY
29305: GREATEREQUAL
29306: AND
29307: ST_TO_ADDR
// end ;
29308: LD_VAR 0 3
29312: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29313: LD_INT 0
29315: PPUSH
29316: PPUSH
29317: PPUSH
29318: PPUSH
// pom := GetBase ( building ) ;
29319: LD_ADDR_VAR 0 3
29323: PUSH
29324: LD_VAR 0 1
29328: PPUSH
29329: CALL_OW 274
29333: ST_TO_ADDR
// if not pom then
29334: LD_VAR 0 3
29338: NOT
29339: IFFALSE 29343
// exit ;
29341: GO 29513
// btype := GetBType ( building ) ;
29343: LD_ADDR_VAR 0 5
29347: PUSH
29348: LD_VAR 0 1
29352: PPUSH
29353: CALL_OW 266
29357: ST_TO_ADDR
// if btype = b_armoury then
29358: LD_VAR 0 5
29362: PUSH
29363: LD_INT 4
29365: EQUAL
29366: IFFALSE 29376
// btype := b_barracks ;
29368: LD_ADDR_VAR 0 5
29372: PUSH
29373: LD_INT 5
29375: ST_TO_ADDR
// if btype = b_depot then
29376: LD_VAR 0 5
29380: PUSH
29381: LD_INT 0
29383: EQUAL
29384: IFFALSE 29394
// btype := b_warehouse ;
29386: LD_ADDR_VAR 0 5
29390: PUSH
29391: LD_INT 1
29393: ST_TO_ADDR
// if btype = b_workshop then
29394: LD_VAR 0 5
29398: PUSH
29399: LD_INT 2
29401: EQUAL
29402: IFFALSE 29412
// btype := b_factory ;
29404: LD_ADDR_VAR 0 5
29408: PUSH
29409: LD_INT 3
29411: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29412: LD_ADDR_VAR 0 4
29416: PUSH
29417: LD_VAR 0 5
29421: PPUSH
29422: LD_VAR 0 1
29426: PPUSH
29427: CALL_OW 248
29431: PPUSH
29432: CALL_OW 450
29436: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29437: LD_ADDR_VAR 0 2
29441: PUSH
29442: LD_VAR 0 3
29446: PPUSH
29447: LD_INT 1
29449: PPUSH
29450: CALL_OW 275
29454: PUSH
29455: LD_VAR 0 4
29459: PUSH
29460: LD_INT 1
29462: ARRAY
29463: GREATEREQUAL
29464: PUSH
29465: LD_VAR 0 3
29469: PPUSH
29470: LD_INT 2
29472: PPUSH
29473: CALL_OW 275
29477: PUSH
29478: LD_VAR 0 4
29482: PUSH
29483: LD_INT 2
29485: ARRAY
29486: GREATEREQUAL
29487: AND
29488: PUSH
29489: LD_VAR 0 3
29493: PPUSH
29494: LD_INT 3
29496: PPUSH
29497: CALL_OW 275
29501: PUSH
29502: LD_VAR 0 4
29506: PUSH
29507: LD_INT 3
29509: ARRAY
29510: GREATEREQUAL
29511: AND
29512: ST_TO_ADDR
// end ;
29513: LD_VAR 0 2
29517: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29518: LD_INT 0
29520: PPUSH
29521: PPUSH
29522: PPUSH
// pom := GetBase ( building ) ;
29523: LD_ADDR_VAR 0 4
29527: PUSH
29528: LD_VAR 0 1
29532: PPUSH
29533: CALL_OW 274
29537: ST_TO_ADDR
// if not pom then
29538: LD_VAR 0 4
29542: NOT
29543: IFFALSE 29547
// exit ;
29545: GO 29648
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29547: LD_ADDR_VAR 0 5
29551: PUSH
29552: LD_VAR 0 2
29556: PPUSH
29557: LD_VAR 0 1
29561: PPUSH
29562: CALL_OW 248
29566: PPUSH
29567: CALL_OW 450
29571: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29572: LD_ADDR_VAR 0 3
29576: PUSH
29577: LD_VAR 0 4
29581: PPUSH
29582: LD_INT 1
29584: PPUSH
29585: CALL_OW 275
29589: PUSH
29590: LD_VAR 0 5
29594: PUSH
29595: LD_INT 1
29597: ARRAY
29598: GREATEREQUAL
29599: PUSH
29600: LD_VAR 0 4
29604: PPUSH
29605: LD_INT 2
29607: PPUSH
29608: CALL_OW 275
29612: PUSH
29613: LD_VAR 0 5
29617: PUSH
29618: LD_INT 2
29620: ARRAY
29621: GREATEREQUAL
29622: AND
29623: PUSH
29624: LD_VAR 0 4
29628: PPUSH
29629: LD_INT 3
29631: PPUSH
29632: CALL_OW 275
29636: PUSH
29637: LD_VAR 0 5
29641: PUSH
29642: LD_INT 3
29644: ARRAY
29645: GREATEREQUAL
29646: AND
29647: ST_TO_ADDR
// end ;
29648: LD_VAR 0 3
29652: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
29653: LD_INT 0
29655: PPUSH
29656: PPUSH
29657: PPUSH
29658: PPUSH
29659: PPUSH
29660: PPUSH
29661: PPUSH
29662: PPUSH
29663: PPUSH
29664: PPUSH
// result := false ;
29665: LD_ADDR_VAR 0 6
29669: PUSH
29670: LD_INT 0
29672: ST_TO_ADDR
// if not base or not btype or not x or not y then
29673: LD_VAR 0 1
29677: NOT
29678: PUSH
29679: LD_VAR 0 2
29683: NOT
29684: OR
29685: PUSH
29686: LD_VAR 0 3
29690: NOT
29691: OR
29692: PUSH
29693: LD_VAR 0 4
29697: NOT
29698: OR
29699: IFFALSE 29703
// exit ;
29701: GO 30312
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
29703: LD_ADDR_VAR 0 12
29707: PUSH
29708: LD_VAR 0 2
29712: PPUSH
29713: LD_VAR 0 3
29717: PPUSH
29718: LD_VAR 0 4
29722: PPUSH
29723: LD_VAR 0 5
29727: PPUSH
29728: LD_VAR 0 1
29732: PUSH
29733: LD_INT 1
29735: ARRAY
29736: PPUSH
29737: CALL_OW 248
29741: PPUSH
29742: LD_INT 0
29744: PPUSH
29745: CALL 31149 0 6
29749: ST_TO_ADDR
// if not hexes then
29750: LD_VAR 0 12
29754: NOT
29755: IFFALSE 29759
// exit ;
29757: GO 30312
// for i = 1 to hexes do
29759: LD_ADDR_VAR 0 7
29763: PUSH
29764: DOUBLE
29765: LD_INT 1
29767: DEC
29768: ST_TO_ADDR
29769: LD_VAR 0 12
29773: PUSH
29774: FOR_TO
29775: IFFALSE 30310
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29777: LD_ADDR_VAR 0 11
29781: PUSH
29782: LD_VAR 0 12
29786: PUSH
29787: LD_VAR 0 7
29791: ARRAY
29792: PUSH
29793: LD_INT 1
29795: ARRAY
29796: PPUSH
29797: LD_VAR 0 12
29801: PUSH
29802: LD_VAR 0 7
29806: ARRAY
29807: PUSH
29808: LD_INT 2
29810: ARRAY
29811: PPUSH
29812: CALL_OW 428
29816: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29817: LD_VAR 0 12
29821: PUSH
29822: LD_VAR 0 7
29826: ARRAY
29827: PUSH
29828: LD_INT 1
29830: ARRAY
29831: PPUSH
29832: LD_VAR 0 12
29836: PUSH
29837: LD_VAR 0 7
29841: ARRAY
29842: PUSH
29843: LD_INT 2
29845: ARRAY
29846: PPUSH
29847: CALL_OW 351
29851: PUSH
29852: LD_VAR 0 12
29856: PUSH
29857: LD_VAR 0 7
29861: ARRAY
29862: PUSH
29863: LD_INT 1
29865: ARRAY
29866: PPUSH
29867: LD_VAR 0 12
29871: PUSH
29872: LD_VAR 0 7
29876: ARRAY
29877: PUSH
29878: LD_INT 2
29880: ARRAY
29881: PPUSH
29882: CALL_OW 488
29886: NOT
29887: OR
29888: PUSH
29889: LD_VAR 0 11
29893: PPUSH
29894: CALL_OW 247
29898: PUSH
29899: LD_INT 3
29901: EQUAL
29902: OR
29903: IFFALSE 29909
// exit ;
29905: POP
29906: POP
29907: GO 30312
// if not tmp or not tmp in base then
29909: LD_VAR 0 11
29913: NOT
29914: PUSH
29915: LD_VAR 0 11
29919: PUSH
29920: LD_VAR 0 1
29924: IN
29925: NOT
29926: OR
29927: IFFALSE 29931
// continue ;
29929: GO 29774
// result := true ;
29931: LD_ADDR_VAR 0 6
29935: PUSH
29936: LD_INT 1
29938: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29939: LD_ADDR_VAR 0 15
29943: PUSH
29944: LD_VAR 0 1
29948: PPUSH
29949: LD_INT 22
29951: PUSH
29952: LD_VAR 0 11
29956: PPUSH
29957: CALL_OW 255
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 2
29968: PUSH
29969: LD_INT 30
29971: PUSH
29972: LD_INT 0
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 30
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: LIST
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PPUSH
29998: CALL_OW 72
30002: ST_TO_ADDR
// if dep then
30003: LD_VAR 0 15
30007: IFFALSE 30143
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30009: LD_ADDR_VAR 0 14
30013: PUSH
30014: LD_VAR 0 15
30018: PUSH
30019: LD_INT 1
30021: ARRAY
30022: PPUSH
30023: CALL_OW 250
30027: PPUSH
30028: LD_VAR 0 15
30032: PUSH
30033: LD_INT 1
30035: ARRAY
30036: PPUSH
30037: CALL_OW 254
30041: PPUSH
30042: LD_INT 5
30044: PPUSH
30045: CALL_OW 272
30049: PUSH
30050: LD_VAR 0 15
30054: PUSH
30055: LD_INT 1
30057: ARRAY
30058: PPUSH
30059: CALL_OW 251
30063: PPUSH
30064: LD_VAR 0 15
30068: PUSH
30069: LD_INT 1
30071: ARRAY
30072: PPUSH
30073: CALL_OW 254
30077: PPUSH
30078: LD_INT 5
30080: PPUSH
30081: CALL_OW 273
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30090: LD_VAR 0 14
30094: PUSH
30095: LD_INT 1
30097: ARRAY
30098: PPUSH
30099: LD_VAR 0 14
30103: PUSH
30104: LD_INT 2
30106: ARRAY
30107: PPUSH
30108: CALL_OW 488
30112: IFFALSE 30143
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30114: LD_VAR 0 11
30118: PPUSH
30119: LD_VAR 0 14
30123: PUSH
30124: LD_INT 1
30126: ARRAY
30127: PPUSH
30128: LD_VAR 0 14
30132: PUSH
30133: LD_INT 2
30135: ARRAY
30136: PPUSH
30137: CALL_OW 111
// continue ;
30141: GO 29774
// end ; end ; r := GetDir ( tmp ) ;
30143: LD_ADDR_VAR 0 13
30147: PUSH
30148: LD_VAR 0 11
30152: PPUSH
30153: CALL_OW 254
30157: ST_TO_ADDR
// if r = 5 then
30158: LD_VAR 0 13
30162: PUSH
30163: LD_INT 5
30165: EQUAL
30166: IFFALSE 30176
// r := 0 ;
30168: LD_ADDR_VAR 0 13
30172: PUSH
30173: LD_INT 0
30175: ST_TO_ADDR
// for j = r to 5 do
30176: LD_ADDR_VAR 0 8
30180: PUSH
30181: DOUBLE
30182: LD_VAR 0 13
30186: DEC
30187: ST_TO_ADDR
30188: LD_INT 5
30190: PUSH
30191: FOR_TO
30192: IFFALSE 30306
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30194: LD_ADDR_VAR 0 9
30198: PUSH
30199: LD_VAR 0 11
30203: PPUSH
30204: CALL_OW 250
30208: PPUSH
30209: LD_VAR 0 8
30213: PPUSH
30214: LD_INT 2
30216: PPUSH
30217: CALL_OW 272
30221: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30222: LD_ADDR_VAR 0 10
30226: PUSH
30227: LD_VAR 0 11
30231: PPUSH
30232: CALL_OW 251
30236: PPUSH
30237: LD_VAR 0 8
30241: PPUSH
30242: LD_INT 2
30244: PPUSH
30245: CALL_OW 273
30249: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30250: LD_VAR 0 9
30254: PPUSH
30255: LD_VAR 0 10
30259: PPUSH
30260: CALL_OW 488
30264: PUSH
30265: LD_VAR 0 9
30269: PPUSH
30270: LD_VAR 0 10
30274: PPUSH
30275: CALL_OW 428
30279: NOT
30280: AND
30281: IFFALSE 30304
// begin ComMoveXY ( tmp , _x , _y ) ;
30283: LD_VAR 0 11
30287: PPUSH
30288: LD_VAR 0 9
30292: PPUSH
30293: LD_VAR 0 10
30297: PPUSH
30298: CALL_OW 111
// break ;
30302: GO 30306
// end ; end ;
30304: GO 30191
30306: POP
30307: POP
// end ;
30308: GO 29774
30310: POP
30311: POP
// end ;
30312: LD_VAR 0 6
30316: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
30317: LD_INT 0
30319: PPUSH
30320: PPUSH
30321: PPUSH
30322: PPUSH
30323: PPUSH
30324: PPUSH
30325: PPUSH
30326: PPUSH
30327: PPUSH
30328: PPUSH
// result := false ;
30329: LD_ADDR_VAR 0 6
30333: PUSH
30334: LD_INT 0
30336: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30337: LD_VAR 0 1
30341: NOT
30342: PUSH
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL_OW 266
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: LD_INT 1
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: IN
30363: NOT
30364: OR
30365: PUSH
30366: LD_VAR 0 2
30370: NOT
30371: OR
30372: PUSH
30373: LD_VAR 0 5
30377: PUSH
30378: LD_INT 0
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: LD_INT 2
30386: PUSH
30387: LD_INT 3
30389: PUSH
30390: LD_INT 4
30392: PUSH
30393: LD_INT 5
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: IN
30404: NOT
30405: OR
30406: PUSH
30407: LD_VAR 0 3
30411: PPUSH
30412: LD_VAR 0 4
30416: PPUSH
30417: CALL_OW 488
30421: NOT
30422: OR
30423: IFFALSE 30427
// exit ;
30425: GO 31144
// pom := GetBase ( depot ) ;
30427: LD_ADDR_VAR 0 10
30431: PUSH
30432: LD_VAR 0 1
30436: PPUSH
30437: CALL_OW 274
30441: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30442: LD_ADDR_VAR 0 11
30446: PUSH
30447: LD_VAR 0 2
30451: PPUSH
30452: LD_VAR 0 1
30456: PPUSH
30457: CALL_OW 248
30461: PPUSH
30462: CALL_OW 450
30466: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30467: LD_VAR 0 10
30471: PPUSH
30472: LD_INT 1
30474: PPUSH
30475: CALL_OW 275
30479: PUSH
30480: LD_VAR 0 11
30484: PUSH
30485: LD_INT 1
30487: ARRAY
30488: GREATEREQUAL
30489: PUSH
30490: LD_VAR 0 10
30494: PPUSH
30495: LD_INT 2
30497: PPUSH
30498: CALL_OW 275
30502: PUSH
30503: LD_VAR 0 11
30507: PUSH
30508: LD_INT 2
30510: ARRAY
30511: GREATEREQUAL
30512: AND
30513: PUSH
30514: LD_VAR 0 10
30518: PPUSH
30519: LD_INT 3
30521: PPUSH
30522: CALL_OW 275
30526: PUSH
30527: LD_VAR 0 11
30531: PUSH
30532: LD_INT 3
30534: ARRAY
30535: GREATEREQUAL
30536: AND
30537: NOT
30538: IFFALSE 30542
// exit ;
30540: GO 31144
// if GetBType ( depot ) = b_depot then
30542: LD_VAR 0 1
30546: PPUSH
30547: CALL_OW 266
30551: PUSH
30552: LD_INT 0
30554: EQUAL
30555: IFFALSE 30567
// dist := 28 else
30557: LD_ADDR_VAR 0 14
30561: PUSH
30562: LD_INT 28
30564: ST_TO_ADDR
30565: GO 30575
// dist := 36 ;
30567: LD_ADDR_VAR 0 14
30571: PUSH
30572: LD_INT 36
30574: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30575: LD_VAR 0 1
30579: PPUSH
30580: LD_VAR 0 3
30584: PPUSH
30585: LD_VAR 0 4
30589: PPUSH
30590: CALL_OW 297
30594: PUSH
30595: LD_VAR 0 14
30599: GREATER
30600: IFFALSE 30604
// exit ;
30602: GO 31144
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30604: LD_ADDR_VAR 0 12
30608: PUSH
30609: LD_VAR 0 2
30613: PPUSH
30614: LD_VAR 0 3
30618: PPUSH
30619: LD_VAR 0 4
30623: PPUSH
30624: LD_VAR 0 5
30628: PPUSH
30629: LD_VAR 0 1
30633: PPUSH
30634: CALL_OW 248
30638: PPUSH
30639: LD_INT 0
30641: PPUSH
30642: CALL 31149 0 6
30646: ST_TO_ADDR
// if not hexes then
30647: LD_VAR 0 12
30651: NOT
30652: IFFALSE 30656
// exit ;
30654: GO 31144
// hex := GetHexInfo ( x , y ) ;
30656: LD_ADDR_VAR 0 15
30660: PUSH
30661: LD_VAR 0 3
30665: PPUSH
30666: LD_VAR 0 4
30670: PPUSH
30671: CALL_OW 546
30675: ST_TO_ADDR
// if hex [ 1 ] then
30676: LD_VAR 0 15
30680: PUSH
30681: LD_INT 1
30683: ARRAY
30684: IFFALSE 30688
// exit ;
30686: GO 31144
// height := hex [ 2 ] ;
30688: LD_ADDR_VAR 0 13
30692: PUSH
30693: LD_VAR 0 15
30697: PUSH
30698: LD_INT 2
30700: ARRAY
30701: ST_TO_ADDR
// for i = 1 to hexes do
30702: LD_ADDR_VAR 0 7
30706: PUSH
30707: DOUBLE
30708: LD_INT 1
30710: DEC
30711: ST_TO_ADDR
30712: LD_VAR 0 12
30716: PUSH
30717: FOR_TO
30718: IFFALSE 31048
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30720: LD_VAR 0 12
30724: PUSH
30725: LD_VAR 0 7
30729: ARRAY
30730: PUSH
30731: LD_INT 1
30733: ARRAY
30734: PPUSH
30735: LD_VAR 0 12
30739: PUSH
30740: LD_VAR 0 7
30744: ARRAY
30745: PUSH
30746: LD_INT 2
30748: ARRAY
30749: PPUSH
30750: CALL_OW 488
30754: NOT
30755: PUSH
30756: LD_VAR 0 12
30760: PUSH
30761: LD_VAR 0 7
30765: ARRAY
30766: PUSH
30767: LD_INT 1
30769: ARRAY
30770: PPUSH
30771: LD_VAR 0 12
30775: PUSH
30776: LD_VAR 0 7
30780: ARRAY
30781: PUSH
30782: LD_INT 2
30784: ARRAY
30785: PPUSH
30786: CALL_OW 428
30790: PUSH
30791: LD_INT 0
30793: GREATER
30794: OR
30795: PUSH
30796: LD_VAR 0 12
30800: PUSH
30801: LD_VAR 0 7
30805: ARRAY
30806: PUSH
30807: LD_INT 1
30809: ARRAY
30810: PPUSH
30811: LD_VAR 0 12
30815: PUSH
30816: LD_VAR 0 7
30820: ARRAY
30821: PUSH
30822: LD_INT 2
30824: ARRAY
30825: PPUSH
30826: CALL_OW 351
30830: OR
30831: IFFALSE 30837
// exit ;
30833: POP
30834: POP
30835: GO 31144
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30837: LD_ADDR_VAR 0 8
30841: PUSH
30842: LD_VAR 0 12
30846: PUSH
30847: LD_VAR 0 7
30851: ARRAY
30852: PUSH
30853: LD_INT 1
30855: ARRAY
30856: PPUSH
30857: LD_VAR 0 12
30861: PUSH
30862: LD_VAR 0 7
30866: ARRAY
30867: PUSH
30868: LD_INT 2
30870: ARRAY
30871: PPUSH
30872: CALL_OW 546
30876: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30877: LD_VAR 0 8
30881: PUSH
30882: LD_INT 1
30884: ARRAY
30885: PUSH
30886: LD_VAR 0 8
30890: PUSH
30891: LD_INT 2
30893: ARRAY
30894: PUSH
30895: LD_VAR 0 13
30899: PUSH
30900: LD_INT 2
30902: PLUS
30903: GREATER
30904: OR
30905: PUSH
30906: LD_VAR 0 8
30910: PUSH
30911: LD_INT 2
30913: ARRAY
30914: PUSH
30915: LD_VAR 0 13
30919: PUSH
30920: LD_INT 2
30922: MINUS
30923: LESS
30924: OR
30925: PUSH
30926: LD_VAR 0 8
30930: PUSH
30931: LD_INT 3
30933: ARRAY
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: LD_INT 8
30940: PUSH
30941: LD_INT 9
30943: PUSH
30944: LD_INT 10
30946: PUSH
30947: LD_INT 11
30949: PUSH
30950: LD_INT 12
30952: PUSH
30953: LD_INT 13
30955: PUSH
30956: LD_INT 16
30958: PUSH
30959: LD_INT 17
30961: PUSH
30962: LD_INT 18
30964: PUSH
30965: LD_INT 19
30967: PUSH
30968: LD_INT 20
30970: PUSH
30971: LD_INT 21
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: IN
30989: NOT
30990: OR
30991: PUSH
30992: LD_VAR 0 8
30996: PUSH
30997: LD_INT 5
30999: ARRAY
31000: NOT
31001: OR
31002: PUSH
31003: LD_VAR 0 8
31007: PUSH
31008: LD_INT 6
31010: ARRAY
31011: PUSH
31012: LD_INT 1
31014: PUSH
31015: LD_INT 2
31017: PUSH
31018: LD_INT 7
31020: PUSH
31021: LD_INT 9
31023: PUSH
31024: LD_INT 10
31026: PUSH
31027: LD_INT 11
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: IN
31038: NOT
31039: OR
31040: IFFALSE 31046
// exit ;
31042: POP
31043: POP
31044: GO 31144
// end ;
31046: GO 30717
31048: POP
31049: POP
// side := GetSide ( depot ) ;
31050: LD_ADDR_VAR 0 9
31054: PUSH
31055: LD_VAR 0 1
31059: PPUSH
31060: CALL_OW 255
31064: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31065: LD_VAR 0 9
31069: PPUSH
31070: LD_VAR 0 3
31074: PPUSH
31075: LD_VAR 0 4
31079: PPUSH
31080: LD_INT 20
31082: PPUSH
31083: CALL 23798 0 4
31087: PUSH
31088: LD_INT 4
31090: ARRAY
31091: IFFALSE 31095
// exit ;
31093: GO 31144
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31095: LD_VAR 0 2
31099: PUSH
31100: LD_INT 29
31102: PUSH
31103: LD_INT 30
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: IN
31110: PUSH
31111: LD_VAR 0 3
31115: PPUSH
31116: LD_VAR 0 4
31120: PPUSH
31121: LD_VAR 0 9
31125: PPUSH
31126: CALL_OW 440
31130: NOT
31131: AND
31132: IFFALSE 31136
// exit ;
31134: GO 31144
// result := true ;
31136: LD_ADDR_VAR 0 6
31140: PUSH
31141: LD_INT 1
31143: ST_TO_ADDR
// end ;
31144: LD_VAR 0 6
31148: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
31149: LD_INT 0
31151: PPUSH
31152: PPUSH
31153: PPUSH
31154: PPUSH
31155: PPUSH
31156: PPUSH
31157: PPUSH
31158: PPUSH
31159: PPUSH
31160: PPUSH
31161: PPUSH
31162: PPUSH
31163: PPUSH
31164: PPUSH
31165: PPUSH
31166: PPUSH
31167: PPUSH
31168: PPUSH
31169: PPUSH
31170: PPUSH
31171: PPUSH
31172: PPUSH
31173: PPUSH
31174: PPUSH
31175: PPUSH
31176: PPUSH
31177: PPUSH
31178: PPUSH
31179: PPUSH
31180: PPUSH
31181: PPUSH
31182: PPUSH
31183: PPUSH
31184: PPUSH
31185: PPUSH
31186: PPUSH
31187: PPUSH
31188: PPUSH
31189: PPUSH
31190: PPUSH
31191: PPUSH
31192: PPUSH
31193: PPUSH
31194: PPUSH
31195: PPUSH
31196: PPUSH
31197: PPUSH
31198: PPUSH
31199: PPUSH
31200: PPUSH
31201: PPUSH
31202: PPUSH
31203: PPUSH
31204: PPUSH
31205: PPUSH
31206: PPUSH
31207: PPUSH
31208: PPUSH
// result = [ ] ;
31209: LD_ADDR_VAR 0 7
31213: PUSH
31214: EMPTY
31215: ST_TO_ADDR
// temp_list = [ ] ;
31216: LD_ADDR_VAR 0 9
31220: PUSH
31221: EMPTY
31222: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31223: LD_VAR 0 4
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: LD_INT 3
31239: PUSH
31240: LD_INT 4
31242: PUSH
31243: LD_INT 5
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: IN
31254: NOT
31255: PUSH
31256: LD_VAR 0 1
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: IN
31271: PUSH
31272: LD_VAR 0 5
31276: PUSH
31277: LD_INT 1
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: LD_INT 3
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: LIST
31290: IN
31291: NOT
31292: AND
31293: OR
31294: IFFALSE 31298
// exit ;
31296: GO 49689
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31298: LD_VAR 0 1
31302: PUSH
31303: LD_INT 6
31305: PUSH
31306: LD_INT 7
31308: PUSH
31309: LD_INT 8
31311: PUSH
31312: LD_INT 13
31314: PUSH
31315: LD_INT 12
31317: PUSH
31318: LD_INT 15
31320: PUSH
31321: LD_INT 11
31323: PUSH
31324: LD_INT 14
31326: PUSH
31327: LD_INT 10
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: IN
31341: IFFALSE 31351
// btype = b_lab ;
31343: LD_ADDR_VAR 0 1
31347: PUSH
31348: LD_INT 6
31350: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31351: LD_VAR 0 6
31355: PUSH
31356: LD_INT 0
31358: PUSH
31359: LD_INT 1
31361: PUSH
31362: LD_INT 2
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: LIST
31369: IN
31370: NOT
31371: PUSH
31372: LD_VAR 0 1
31376: PUSH
31377: LD_INT 0
31379: PUSH
31380: LD_INT 1
31382: PUSH
31383: LD_INT 2
31385: PUSH
31386: LD_INT 3
31388: PUSH
31389: LD_INT 6
31391: PUSH
31392: LD_INT 36
31394: PUSH
31395: LD_INT 4
31397: PUSH
31398: LD_INT 5
31400: PUSH
31401: LD_INT 31
31403: PUSH
31404: LD_INT 32
31406: PUSH
31407: LD_INT 33
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: IN
31423: NOT
31424: PUSH
31425: LD_VAR 0 6
31429: PUSH
31430: LD_INT 1
31432: EQUAL
31433: AND
31434: OR
31435: PUSH
31436: LD_VAR 0 1
31440: PUSH
31441: LD_INT 2
31443: PUSH
31444: LD_INT 3
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: IN
31451: NOT
31452: PUSH
31453: LD_VAR 0 6
31457: PUSH
31458: LD_INT 2
31460: EQUAL
31461: AND
31462: OR
31463: IFFALSE 31473
// mode = 0 ;
31465: LD_ADDR_VAR 0 6
31469: PUSH
31470: LD_INT 0
31472: ST_TO_ADDR
// case mode of 0 :
31473: LD_VAR 0 6
31477: PUSH
31478: LD_INT 0
31480: DOUBLE
31481: EQUAL
31482: IFTRUE 31486
31484: GO 42939
31486: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31487: LD_ADDR_VAR 0 11
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: LD_INT 1
31507: NEG
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 0
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 1
31545: NEG
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 1
31556: NEG
31557: PUSH
31558: LD_INT 1
31560: NEG
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 1
31568: NEG
31569: PUSH
31570: LD_INT 2
31572: NEG
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: LD_INT 2
31583: NEG
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 1
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 1
31602: PUSH
31603: LD_INT 2
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: LD_INT 2
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 1
31622: NEG
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: LD_INT 3
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: LD_INT 3
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: LD_INT 2
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31680: LD_ADDR_VAR 0 12
31684: PUSH
31685: LD_INT 0
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 0
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 1
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 1
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 0
31728: PUSH
31729: LD_INT 1
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 1
31738: NEG
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 2
31772: PUSH
31773: LD_INT 0
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 2
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: LD_INT 1
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 2
31814: NEG
31815: PUSH
31816: LD_INT 1
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 2
31826: NEG
31827: PUSH
31828: LD_INT 1
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 3
31837: NEG
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 3
31848: NEG
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31876: LD_ADDR_VAR 0 13
31880: PUSH
31881: LD_INT 0
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 0
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: LD_INT 0
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: LD_INT 1
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 1
31934: NEG
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 1
31945: NEG
31946: PUSH
31947: LD_INT 1
31949: NEG
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 1
31957: NEG
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: LD_INT 1
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 2
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 2
31999: NEG
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 2
32011: NEG
32012: PUSH
32013: LD_INT 2
32015: NEG
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 2
32023: NEG
32024: PUSH
32025: LD_INT 3
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 3
32035: NEG
32036: PUSH
32037: LD_INT 2
32039: NEG
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 3
32047: NEG
32048: PUSH
32049: LD_INT 3
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32075: LD_ADDR_VAR 0 14
32079: PUSH
32080: LD_INT 0
32082: PUSH
32083: LD_INT 0
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: LD_INT 1
32095: NEG
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: LD_INT 0
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: NEG
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 1
32144: NEG
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: LD_INT 2
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: LD_INT 2
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: PUSH
32180: LD_INT 1
32182: NEG
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 1
32190: PUSH
32191: LD_INT 2
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: LD_INT 2
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: NEG
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 1
32221: NEG
32222: PUSH
32223: LD_INT 3
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 0
32233: PUSH
32234: LD_INT 3
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 1
32244: PUSH
32245: LD_INT 2
32247: NEG
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32271: LD_ADDR_VAR 0 15
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: LD_INT 0
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 1
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: LD_INT 1
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 1
32329: NEG
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: LD_INT 1
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: LD_INT 0
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 2
32373: PUSH
32374: LD_INT 1
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 2
32394: NEG
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 2
32405: NEG
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 2
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 3
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 3
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32464: LD_ADDR_VAR 0 16
32468: PUSH
32469: LD_INT 0
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: LD_INT 1
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: LD_INT 0
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 1
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 0
32512: PUSH
32513: LD_INT 1
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 1
32522: NEG
32523: PUSH
32524: LD_INT 0
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 1
32545: NEG
32546: PUSH
32547: LD_INT 2
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: PUSH
32568: LD_INT 2
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: LD_INT 2
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 2
32587: NEG
32588: PUSH
32589: LD_INT 1
32591: NEG
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 2
32599: NEG
32600: PUSH
32601: LD_INT 2
32603: NEG
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 3
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 3
32621: PUSH
32622: LD_INT 3
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 2
32631: PUSH
32632: LD_INT 3
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32657: LD_ADDR_VAR 0 17
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: LD_INT 1
32677: NEG
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 1
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: NEG
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 1
32726: NEG
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 1
32738: NEG
32739: PUSH
32740: LD_INT 2
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: LD_INT 2
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: LD_INT 1
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 2
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 2
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 2
32792: PUSH
32793: LD_INT 2
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 1
32802: PUSH
32803: LD_INT 2
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 0
32812: PUSH
32813: LD_INT 2
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 1
32822: NEG
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 2
32833: NEG
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 2
32844: NEG
32845: PUSH
32846: LD_INT 1
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 2
32856: NEG
32857: PUSH
32858: LD_INT 2
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32887: LD_ADDR_VAR 0 18
32891: PUSH
32892: LD_INT 0
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: LD_INT 1
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 1
32968: NEG
32969: PUSH
32970: LD_INT 2
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: LD_INT 2
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 2
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 2
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 2
33022: PUSH
33023: LD_INT 2
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: LD_INT 2
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 0
33042: PUSH
33043: LD_INT 2
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 1
33052: NEG
33053: PUSH
33054: LD_INT 1
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 2
33063: NEG
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 2
33074: NEG
33075: PUSH
33076: LD_INT 1
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 2
33086: NEG
33087: PUSH
33088: LD_INT 2
33090: NEG
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33117: LD_ADDR_VAR 0 19
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 1
33145: PUSH
33146: LD_INT 0
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 1
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: LD_INT 1
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 1
33175: NEG
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: LD_INT 1
33190: NEG
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 1
33198: NEG
33199: PUSH
33200: LD_INT 2
33202: NEG
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: LD_INT 2
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: LD_INT 1
33224: NEG
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 2
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 2
33252: PUSH
33253: LD_INT 2
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: LD_INT 2
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 0
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 1
33282: NEG
33283: PUSH
33284: LD_INT 1
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 2
33293: NEG
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 2
33304: NEG
33305: PUSH
33306: LD_INT 1
33308: NEG
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 2
33316: NEG
33317: PUSH
33318: LD_INT 2
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33347: LD_ADDR_VAR 0 20
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: LD_INT 0
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 1
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 1
33416: NEG
33417: PUSH
33418: LD_INT 1
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 1
33428: NEG
33429: PUSH
33430: LD_INT 2
33432: NEG
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 0
33440: PUSH
33441: LD_INT 2
33443: NEG
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 1
33451: PUSH
33452: LD_INT 1
33454: NEG
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 2
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 2
33482: PUSH
33483: LD_INT 2
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 1
33492: PUSH
33493: LD_INT 2
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 0
33502: PUSH
33503: LD_INT 2
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: NEG
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 2
33523: NEG
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 2
33534: NEG
33535: PUSH
33536: LD_INT 1
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 2
33546: NEG
33547: PUSH
33548: LD_INT 2
33550: NEG
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33577: LD_ADDR_VAR 0 21
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: LD_INT 1
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: LD_INT 1
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: NEG
33647: PUSH
33648: LD_INT 1
33650: NEG
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 1
33658: NEG
33659: PUSH
33660: LD_INT 2
33662: NEG
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: LD_INT 2
33673: NEG
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: LD_INT 1
33684: NEG
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 2
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 2
33702: PUSH
33703: LD_INT 1
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 2
33712: PUSH
33713: LD_INT 2
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: LD_INT 2
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 0
33732: PUSH
33733: LD_INT 2
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 1
33742: NEG
33743: PUSH
33744: LD_INT 1
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 2
33753: NEG
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 2
33764: NEG
33765: PUSH
33766: LD_INT 1
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 2
33776: NEG
33777: PUSH
33778: LD_INT 2
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33807: LD_ADDR_VAR 0 22
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: LD_INT 0
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: LD_INT 1
33827: NEG
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 1
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 1
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 0
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: NEG
33866: PUSH
33867: LD_INT 0
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 1
33876: NEG
33877: PUSH
33878: LD_INT 1
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: NEG
33889: PUSH
33890: LD_INT 2
33892: NEG
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 0
33900: PUSH
33901: LD_INT 2
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: LD_INT 1
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 2
33932: PUSH
33933: LD_INT 1
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 2
33942: PUSH
33943: LD_INT 2
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: LD_INT 2
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 0
33962: PUSH
33963: LD_INT 2
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 1
33972: NEG
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: LD_INT 0
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 2
33994: NEG
33995: PUSH
33996: LD_INT 1
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 2
34006: NEG
34007: PUSH
34008: LD_INT 2
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34037: LD_ADDR_VAR 0 23
34041: PUSH
34042: LD_INT 0
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 1
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: LD_INT 1
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 1
34095: NEG
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: LD_INT 2
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: LD_INT 2
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 1
34141: PUSH
34142: LD_INT 1
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 2
34152: PUSH
34153: LD_INT 0
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 2
34172: PUSH
34173: LD_INT 2
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: LD_INT 2
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 1
34202: NEG
34203: PUSH
34204: LD_INT 1
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 2
34213: NEG
34214: PUSH
34215: LD_INT 0
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: LD_INT 1
34228: NEG
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 2
34236: NEG
34237: PUSH
34238: LD_INT 2
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 2
34248: NEG
34249: PUSH
34250: LD_INT 3
34252: NEG
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 1
34260: NEG
34261: PUSH
34262: LD_INT 3
34264: NEG
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: LD_INT 2
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 2
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34317: LD_ADDR_VAR 0 24
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: LD_INT 1
34337: NEG
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 1
34345: PUSH
34346: LD_INT 0
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: PUSH
34356: LD_INT 1
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: LD_INT 1
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 1
34375: NEG
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: LD_INT 1
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: NEG
34399: PUSH
34400: LD_INT 2
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 0
34410: PUSH
34411: LD_INT 2
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 2
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 2
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 2
34452: PUSH
34453: LD_INT 2
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 1
34462: PUSH
34463: LD_INT 2
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: LD_INT 2
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 1
34482: NEG
34483: PUSH
34484: LD_INT 1
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 2
34493: NEG
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 2
34504: NEG
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 2
34516: NEG
34517: PUSH
34518: LD_INT 2
34520: NEG
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 1
34528: PUSH
34529: LD_INT 2
34531: NEG
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 2
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 3
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 3
34560: PUSH
34561: LD_INT 2
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34593: LD_ADDR_VAR 0 25
34597: PUSH
34598: LD_INT 0
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 1
34631: PUSH
34632: LD_INT 1
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 1
34662: NEG
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 2
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: LD_INT 1
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 0
34748: PUSH
34749: LD_INT 2
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 1
34758: NEG
34759: PUSH
34760: LD_INT 1
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: LD_INT 0
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 2
34780: NEG
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 2
34792: NEG
34793: PUSH
34794: LD_INT 2
34796: NEG
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 3
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 3
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 2
34824: PUSH
34825: LD_INT 3
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: LD_INT 3
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34867: LD_ADDR_VAR 0 26
34871: PUSH
34872: LD_INT 0
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: NEG
34926: PUSH
34927: LD_INT 0
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 1
34948: NEG
34949: PUSH
34950: LD_INT 2
34952: NEG
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: LD_INT 2
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 2
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: PUSH
35013: LD_INT 2
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: LD_INT 2
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 1
35032: NEG
35033: PUSH
35034: LD_INT 1
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 2
35043: NEG
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 2
35054: NEG
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 2
35066: NEG
35067: PUSH
35068: LD_INT 2
35070: NEG
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 2
35078: PUSH
35079: LD_INT 3
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: LD_INT 3
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: LD_INT 2
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 2
35109: NEG
35110: PUSH
35111: LD_INT 1
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35143: LD_ADDR_VAR 0 27
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 1
35181: PUSH
35182: LD_INT 1
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 0
35191: PUSH
35192: LD_INT 1
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 1
35201: NEG
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: LD_INT 2
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 0
35236: PUSH
35237: LD_INT 2
35239: NEG
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: LD_INT 1
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 2
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 2
35268: PUSH
35269: LD_INT 1
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 2
35278: PUSH
35279: LD_INT 2
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: LD_INT 2
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 2
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: LD_INT 1
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 2
35319: NEG
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 2
35342: NEG
35343: PUSH
35344: LD_INT 2
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: LD_INT 2
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: NEG
35366: PUSH
35367: LD_INT 1
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 3
35376: NEG
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 3
35388: NEG
35389: PUSH
35390: LD_INT 2
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35423: LD_ADDR_VAR 0 28
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: LD_INT 1
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: LD_INT 0
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 1
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 0
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: LD_INT 1
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: LD_INT 2
35508: NEG
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 0
35516: PUSH
35517: LD_INT 2
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: LD_INT 1
35530: NEG
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 2
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: LD_INT 2
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: LD_INT 2
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 0
35578: PUSH
35579: LD_INT 2
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 1
35588: NEG
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 2
35599: NEG
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 2
35610: NEG
35611: PUSH
35612: LD_INT 1
35614: NEG
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 2
35622: NEG
35623: PUSH
35624: LD_INT 2
35626: NEG
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 2
35634: NEG
35635: PUSH
35636: LD_INT 3
35638: NEG
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: LD_INT 3
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 3
35658: NEG
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 3
35670: NEG
35671: PUSH
35672: LD_INT 2
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35705: LD_ADDR_VAR 0 29
35709: PUSH
35710: LD_INT 0
35712: PUSH
35713: LD_INT 0
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: LD_INT 1
35725: NEG
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 1
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: LD_INT 1
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 1
35763: NEG
35764: PUSH
35765: LD_INT 0
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: NEG
35787: PUSH
35788: LD_INT 2
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: LD_INT 2
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 2
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: LD_INT 2
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: LD_INT 2
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 1
35860: NEG
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 2
35871: NEG
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 2
35883: NEG
35884: PUSH
35885: LD_INT 2
35887: NEG
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 2
35895: NEG
35896: PUSH
35897: LD_INT 3
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 2
35907: PUSH
35908: LD_INT 1
35910: NEG
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 3
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: LD_INT 3
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: LD_INT 2
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 3
35949: NEG
35950: PUSH
35951: LD_INT 2
35953: NEG
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35984: LD_ADDR_VAR 0 30
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 0
36001: PUSH
36002: LD_INT 1
36004: NEG
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: LD_INT 1
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: LD_INT 1
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 1
36042: NEG
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: NEG
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: LD_INT 2
36069: NEG
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: LD_INT 2
36080: NEG
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 1
36088: PUSH
36089: LD_INT 1
36091: NEG
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 2
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 2
36119: PUSH
36120: LD_INT 2
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: LD_INT 2
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 2
36150: NEG
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 2
36161: NEG
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 1
36173: NEG
36174: PUSH
36175: LD_INT 3
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 3
36196: PUSH
36197: LD_INT 2
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 2
36206: PUSH
36207: LD_INT 3
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 2
36216: NEG
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 3
36227: NEG
36228: PUSH
36229: LD_INT 1
36231: NEG
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36262: LD_ADDR_VAR 0 31
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: LD_INT 2
36347: NEG
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 1
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 2
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 2
36386: PUSH
36387: LD_INT 2
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: LD_INT 2
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: LD_INT 2
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: LD_INT 1
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 2
36427: NEG
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 2
36439: NEG
36440: PUSH
36441: LD_INT 2
36443: NEG
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 2
36451: NEG
36452: PUSH
36453: LD_INT 3
36455: NEG
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 2
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 3
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: LD_INT 3
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 3
36505: NEG
36506: PUSH
36507: LD_INT 2
36509: NEG
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36540: LD_ADDR_VAR 0 32
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: LD_INT 1
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 1
36621: NEG
36622: PUSH
36623: LD_INT 2
36625: NEG
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: LD_INT 2
36636: NEG
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: LD_INT 1
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 2
36655: PUSH
36656: LD_INT 1
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 2
36665: PUSH
36666: LD_INT 2
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 2
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 2
36706: NEG
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: NEG
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 1
36729: NEG
36730: PUSH
36731: LD_INT 3
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: LD_INT 2
36744: NEG
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 3
36752: PUSH
36753: LD_INT 2
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 2
36762: PUSH
36763: LD_INT 3
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 2
36772: NEG
36773: PUSH
36774: LD_INT 1
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 3
36783: NEG
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36818: LD_ADDR_VAR 0 33
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: LD_INT 0
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 1
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: LD_INT 1
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 1
36899: NEG
36900: PUSH
36901: LD_INT 2
36903: NEG
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 1
36911: PUSH
36912: LD_INT 1
36914: NEG
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 2
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 2
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: LD_INT 2
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: LD_INT 2
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 2
36973: NEG
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 2
36984: NEG
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 2
36996: NEG
36997: PUSH
36998: LD_INT 2
37000: NEG
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 2
37008: NEG
37009: PUSH
37010: LD_INT 3
37012: NEG
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 2
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 3
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 1
37041: PUSH
37042: LD_INT 3
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: LD_INT 2
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 3
37062: NEG
37063: PUSH
37064: LD_INT 2
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37097: LD_ADDR_VAR 0 34
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: LD_INT 1
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: NEG
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: LD_INT 2
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 1
37232: PUSH
37233: LD_INT 2
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 2
37253: NEG
37254: PUSH
37255: LD_INT 0
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 2
37264: NEG
37265: PUSH
37266: LD_INT 1
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 2
37276: NEG
37277: PUSH
37278: LD_INT 2
37280: NEG
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: LD_INT 3
37292: NEG
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: LD_INT 2
37303: NEG
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 3
37311: PUSH
37312: LD_INT 2
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 2
37321: PUSH
37322: LD_INT 3
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 2
37331: NEG
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 3
37342: NEG
37343: PUSH
37344: LD_INT 1
37346: NEG
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37377: LD_ADDR_VAR 0 35
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 1
37446: NEG
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 2
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 2
37468: NEG
37469: PUSH
37470: LD_INT 1
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37489: LD_ADDR_VAR 0 36
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: LD_INT 1
37509: NEG
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 1
37558: NEG
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: NEG
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: LD_INT 2
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37601: LD_ADDR_VAR 0 37
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 0
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: LD_INT 1
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 1
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37713: LD_ADDR_VAR 0 38
37717: PUSH
37718: LD_INT 0
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: LD_INT 1
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 1
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: NEG
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 2
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37825: LD_ADDR_VAR 0 39
37829: PUSH
37830: LD_INT 0
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: LD_INT 1
37845: NEG
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 1
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: PUSH
37885: LD_INT 0
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: LD_INT 1
37898: NEG
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 1
37906: NEG
37907: PUSH
37908: LD_INT 2
37910: NEG
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: LD_INT 2
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37937: LD_ADDR_VAR 0 40
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: LD_INT 1
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 0
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: NEG
38007: PUSH
38008: LD_INT 1
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38049: LD_ADDR_VAR 0 41
38053: PUSH
38054: LD_INT 0
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 1
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: LD_INT 1
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: LD_INT 2
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 2
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 2
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: NEG
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 2
38204: NEG
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 2
38215: NEG
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 2
38227: NEG
38228: PUSH
38229: LD_INT 2
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: LD_INT 3
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 2
38251: PUSH
38252: LD_INT 1
38254: NEG
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 3
38262: PUSH
38263: LD_INT 0
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 3
38272: PUSH
38273: LD_INT 1
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 3
38282: PUSH
38283: LD_INT 2
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 3
38292: PUSH
38293: LD_INT 3
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 2
38302: PUSH
38303: LD_INT 3
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 2
38312: NEG
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 3
38323: NEG
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 3
38334: NEG
38335: PUSH
38336: LD_INT 1
38338: NEG
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 3
38346: NEG
38347: PUSH
38348: LD_INT 2
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 3
38358: NEG
38359: PUSH
38360: LD_INT 3
38362: NEG
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38399: LD_ADDR_VAR 0 42
38403: PUSH
38404: LD_INT 0
38406: PUSH
38407: LD_INT 0
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 1
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: LD_INT 1
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: LD_INT 1
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 1
38468: NEG
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 1
38480: NEG
38481: PUSH
38482: LD_INT 2
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: LD_INT 2
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: LD_INT 1
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: LD_INT 1
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: LD_INT 2
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 2
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 2
38565: NEG
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 2
38577: NEG
38578: PUSH
38579: LD_INT 2
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: LD_INT 3
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 1
38601: NEG
38602: PUSH
38603: LD_INT 3
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: LD_INT 3
38616: NEG
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: LD_INT 2
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 3
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 3
38645: PUSH
38646: LD_INT 3
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 2
38655: PUSH
38656: LD_INT 3
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 3
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: LD_INT 3
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: LD_INT 2
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 3
38696: NEG
38697: PUSH
38698: LD_INT 2
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 3
38708: NEG
38709: PUSH
38710: LD_INT 3
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38749: LD_ADDR_VAR 0 43
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: LD_INT 1
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: LD_INT 0
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: LD_INT 1
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 1
38830: NEG
38831: PUSH
38832: LD_INT 2
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: LD_INT 2
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 2
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: LD_INT 2
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 2
38915: NEG
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 2
38926: NEG
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: LD_INT 3
38942: NEG
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: LD_INT 3
38953: NEG
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: LD_INT 2
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 2
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 3
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 3
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 1
39003: PUSH
39004: LD_INT 3
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: LD_INT 3
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 1
39023: NEG
39024: PUSH
39025: LD_INT 2
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 2
39034: NEG
39035: PUSH
39036: LD_INT 1
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 3
39045: NEG
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 3
39056: NEG
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39097: LD_ADDR_VAR 0 44
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 1
39155: NEG
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 1
39166: NEG
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: LD_INT 2
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: LD_INT 0
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 2
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 2
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: LD_INT 2
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 1
39241: NEG
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 2
39252: NEG
39253: PUSH
39254: LD_INT 0
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 2
39263: NEG
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 2
39275: NEG
39276: PUSH
39277: LD_INT 2
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 2
39287: NEG
39288: PUSH
39289: LD_INT 3
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 2
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 3
39310: PUSH
39311: LD_INT 0
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 3
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 3
39330: PUSH
39331: LD_INT 2
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 3
39340: PUSH
39341: LD_INT 3
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 2
39350: PUSH
39351: LD_INT 3
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 2
39360: NEG
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 3
39371: NEG
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 3
39382: NEG
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 3
39394: NEG
39395: PUSH
39396: LD_INT 2
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 3
39406: NEG
39407: PUSH
39408: LD_INT 3
39410: NEG
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39447: LD_ADDR_VAR 0 45
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: LD_INT 0
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: LD_INT 1
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: NEG
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: NEG
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: LD_INT 2
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: LD_INT 2
39543: NEG
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: LD_INT 2
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 2
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 1
39602: NEG
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 2
39613: NEG
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 2
39625: NEG
39626: PUSH
39627: LD_INT 2
39629: NEG
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 2
39637: NEG
39638: PUSH
39639: LD_INT 3
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: LD_INT 3
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: LD_INT 3
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: LD_INT 2
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 3
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 3
39693: PUSH
39694: LD_INT 3
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: PUSH
39704: LD_INT 3
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: LD_INT 3
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 3
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 3
39744: NEG
39745: PUSH
39746: LD_INT 2
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 3
39756: NEG
39757: PUSH
39758: LD_INT 3
39760: NEG
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39797: LD_ADDR_VAR 0 46
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: LD_INT 0
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 1
39855: NEG
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: LD_INT 2
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: LD_INT 2
39893: NEG
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: PUSH
39933: LD_INT 2
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 2
39963: NEG
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 2
39974: NEG
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: LD_INT 3
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: LD_INT 3
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: LD_INT 2
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 3
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 3
40041: PUSH
40042: LD_INT 1
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: LD_INT 3
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 0
40061: PUSH
40062: LD_INT 3
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: LD_INT 2
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 2
40082: NEG
40083: PUSH
40084: LD_INT 1
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 3
40093: NEG
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: LD_INT 1
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40145: LD_ADDR_VAR 0 47
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: LD_INT 1
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: LD_INT 0
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: LD_INT 2
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: LD_INT 2
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 2
40260: NEG
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 2
40272: NEG
40273: PUSH
40274: LD_INT 2
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40296: LD_ADDR_VAR 0 48
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: LD_INT 0
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: LD_INT 2
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40443: LD_ADDR_VAR 0 49
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 2
40545: PUSH
40546: LD_INT 1
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: LD_INT 2
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40587: LD_ADDR_VAR 0 50
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: NEG
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 2
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 1
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: NEG
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40731: LD_ADDR_VAR 0 51
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 1
40789: NEG
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: LD_INT 2
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: LD_INT 2
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: LD_INT 1
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40878: LD_ADDR_VAR 0 52
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: LD_INT 2
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 2
40982: NEG
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 2
40993: NEG
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: LD_INT 2
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41029: LD_ADDR_VAR 0 53
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 2
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 2
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 2
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 2
41164: PUSH
41165: LD_INT 2
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: LD_INT 2
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: LD_INT 2
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 2
41205: NEG
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41259: LD_ADDR_VAR 0 54
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: PUSH
41395: LD_INT 2
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: LD_INT 2
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: LD_INT 2
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 2
41435: NEG
41436: PUSH
41437: LD_INT 0
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 2
41446: NEG
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 2
41458: NEG
41459: PUSH
41460: LD_INT 2
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41489: LD_ADDR_VAR 0 55
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: LD_INT 1
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 2
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 2
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 2
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 2
41676: NEG
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: LD_INT 2
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41719: LD_ADDR_VAR 0 56
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 1
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 1
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: LD_INT 2
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: LD_INT 2
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: LD_INT 2
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 2
41895: NEG
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: NEG
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 2
41918: NEG
41919: PUSH
41920: LD_INT 2
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41949: LD_ADDR_VAR 0 57
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 2
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 2
42084: PUSH
42085: LD_INT 2
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: LD_INT 2
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 2
42125: NEG
42126: PUSH
42127: LD_INT 0
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 2
42148: NEG
42149: PUSH
42150: LD_INT 2
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42179: LD_ADDR_VAR 0 58
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: NEG
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: LD_INT 2
42264: NEG
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: LD_INT 2
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: LD_INT 0
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 2
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 2
42314: PUSH
42315: LD_INT 2
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 2
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: LD_INT 2
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: LD_INT 1
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 2
42355: NEG
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 2
42366: NEG
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 2
42378: NEG
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42409: LD_ADDR_VAR 0 59
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 1
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 0
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42497: LD_ADDR_VAR 0 60
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: NEG
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42585: LD_ADDR_VAR 0 61
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: NEG
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42673: LD_ADDR_VAR 0 62
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: LD_INT 1
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42761: LD_ADDR_VAR 0 63
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: LD_INT 1
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42849: LD_ADDR_VAR 0 64
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 0
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: NEG
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: ST_TO_ADDR
// end ; 1 :
42937: GO 48834
42939: LD_INT 1
42941: DOUBLE
42942: EQUAL
42943: IFTRUE 42947
42945: GO 45570
42947: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42948: LD_ADDR_VAR 0 11
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: LD_INT 3
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 3
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 2
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42992: LD_ADDR_VAR 0 12
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 3
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 3
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43033: LD_ADDR_VAR 0 13
43037: PUSH
43038: LD_INT 3
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 3
43050: PUSH
43051: LD_INT 3
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 3
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: LIST
43072: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43073: LD_ADDR_VAR 0 14
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 3
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 3
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: LIST
43113: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43114: LD_ADDR_VAR 0 15
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 3
43132: NEG
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 3
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: LIST
43157: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43158: LD_ADDR_VAR 0 16
43162: PUSH
43163: LD_INT 2
43165: NEG
43166: PUSH
43167: LD_INT 3
43169: NEG
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 3
43177: NEG
43178: PUSH
43179: LD_INT 2
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 3
43189: NEG
43190: PUSH
43191: LD_INT 3
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: LIST
43203: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43204: LD_ADDR_VAR 0 17
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 3
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 3
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: LD_INT 2
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: LIST
43247: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43248: LD_ADDR_VAR 0 18
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 3
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 3
43276: PUSH
43277: LD_INT 1
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: LIST
43288: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43289: LD_ADDR_VAR 0 19
43293: PUSH
43294: LD_INT 3
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 3
43306: PUSH
43307: LD_INT 3
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 3
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: LIST
43328: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43329: LD_ADDR_VAR 0 20
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 3
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: LD_INT 3
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 2
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: LIST
43369: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43370: LD_ADDR_VAR 0 21
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 3
43388: NEG
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 3
43399: NEG
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: LIST
43413: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43414: LD_ADDR_VAR 0 22
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: LD_INT 3
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 3
43433: NEG
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 3
43445: NEG
43446: PUSH
43447: LD_INT 3
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: LIST
43459: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43460: LD_ADDR_VAR 0 23
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: LD_INT 3
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 4
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 3
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: LIST
43503: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43504: LD_ADDR_VAR 0 24
43508: PUSH
43509: LD_INT 3
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 3
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 4
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: LIST
43544: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43545: LD_ADDR_VAR 0 25
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: LD_INT 3
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 4
43562: PUSH
43563: LD_INT 3
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 3
43572: PUSH
43573: LD_INT 4
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43585: LD_ADDR_VAR 0 26
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: LD_INT 3
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: LD_INT 4
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: LD_INT 3
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: LIST
43625: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43626: LD_ADDR_VAR 0 27
43630: PUSH
43631: LD_INT 3
43633: NEG
43634: PUSH
43635: LD_INT 0
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 3
43644: NEG
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 4
43655: NEG
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: LIST
43669: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43670: LD_ADDR_VAR 0 28
43674: PUSH
43675: LD_INT 3
43677: NEG
43678: PUSH
43679: LD_INT 3
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 3
43689: NEG
43690: PUSH
43691: LD_INT 4
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 4
43701: NEG
43702: PUSH
43703: LD_INT 3
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: LIST
43715: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43716: LD_ADDR_VAR 0 29
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 3
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: LD_INT 3
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: LD_INT 2
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 4
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: LD_INT 4
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: LD_INT 3
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 5
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: LD_INT 5
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: LD_INT 4
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: LD_INT 6
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 6
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: LD_INT 5
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43871: LD_ADDR_VAR 0 30
43875: PUSH
43876: LD_INT 2
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 3
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 3
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 3
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 4
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 4
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 4
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 5
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 5
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 5
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 6
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 6
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44014: LD_ADDR_VAR 0 31
44018: PUSH
44019: LD_INT 3
44021: PUSH
44022: LD_INT 2
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 3
44031: PUSH
44032: LD_INT 3
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: LD_INT 3
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 4
44051: PUSH
44052: LD_INT 3
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 4
44061: PUSH
44062: LD_INT 4
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 3
44071: PUSH
44072: LD_INT 4
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 5
44081: PUSH
44082: LD_INT 4
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 5
44091: PUSH
44092: LD_INT 5
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 4
44101: PUSH
44102: LD_INT 5
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 6
44111: PUSH
44112: LD_INT 5
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 6
44121: PUSH
44122: LD_INT 6
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 5
44131: PUSH
44132: LD_INT 6
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44153: LD_ADDR_VAR 0 32
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: LD_INT 3
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 3
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 4
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 4
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: LD_INT 3
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 5
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: LD_INT 5
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: LD_INT 4
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: LD_INT 6
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: LD_INT 6
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: LD_INT 5
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44296: LD_ADDR_VAR 0 33
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 3
44314: NEG
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 3
44325: NEG
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 3
44337: NEG
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 4
44348: NEG
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 4
44359: NEG
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 4
44371: NEG
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 5
44382: NEG
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 5
44393: NEG
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 5
44405: NEG
44406: PUSH
44407: LD_INT 1
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 6
44416: NEG
44417: PUSH
44418: LD_INT 0
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 6
44427: NEG
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44451: LD_ADDR_VAR 0 34
44455: PUSH
44456: LD_INT 2
44458: NEG
44459: PUSH
44460: LD_INT 3
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 3
44470: NEG
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 3
44482: NEG
44483: PUSH
44484: LD_INT 3
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 3
44494: NEG
44495: PUSH
44496: LD_INT 4
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 4
44506: NEG
44507: PUSH
44508: LD_INT 3
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 4
44518: NEG
44519: PUSH
44520: LD_INT 4
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 4
44530: NEG
44531: PUSH
44532: LD_INT 5
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 5
44542: NEG
44543: PUSH
44544: LD_INT 4
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 5
44554: NEG
44555: PUSH
44556: LD_INT 5
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 5
44566: NEG
44567: PUSH
44568: LD_INT 6
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 6
44578: NEG
44579: PUSH
44580: LD_INT 5
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 6
44590: NEG
44591: PUSH
44592: LD_INT 6
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44614: LD_ADDR_VAR 0 41
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: LD_INT 3
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44658: LD_ADDR_VAR 0 42
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: LD_INT 1
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 3
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: LIST
44698: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44699: LD_ADDR_VAR 0 43
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 3
44716: PUSH
44717: LD_INT 2
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: LD_INT 3
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: LIST
44738: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44739: LD_ADDR_VAR 0 44
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: LD_INT 2
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: LD_INT 3
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44780: LD_ADDR_VAR 0 45
44784: PUSH
44785: LD_INT 2
44787: NEG
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 3
44809: NEG
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44824: LD_ADDR_VAR 0 46
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: LD_INT 3
44847: NEG
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 3
44855: NEG
44856: PUSH
44857: LD_INT 2
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: LIST
44869: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44870: LD_ADDR_VAR 0 47
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: LD_INT 3
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44903: LD_ADDR_VAR 0 48
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44934: LD_ADDR_VAR 0 49
44938: PUSH
44939: LD_INT 3
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 3
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44963: LD_ADDR_VAR 0 50
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: LD_INT 3
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 3
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44992: LD_ADDR_VAR 0 51
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45023: LD_ADDR_VAR 0 52
45027: PUSH
45028: LD_INT 3
45030: NEG
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 3
45042: NEG
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45056: LD_ADDR_VAR 0 53
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: LD_INT 3
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 3
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 2
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: LIST
45099: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45100: LD_ADDR_VAR 0 54
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 3
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 3
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: LIST
45140: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45141: LD_ADDR_VAR 0 55
45145: PUSH
45146: LD_INT 3
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 3
45158: PUSH
45159: LD_INT 3
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 3
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45181: LD_ADDR_VAR 0 56
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 3
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 3
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: LIST
45221: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45222: LD_ADDR_VAR 0 57
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 3
45240: NEG
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 3
45251: NEG
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: LIST
45265: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45266: LD_ADDR_VAR 0 58
45270: PUSH
45271: LD_INT 2
45273: NEG
45274: PUSH
45275: LD_INT 3
45277: NEG
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 3
45285: NEG
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 3
45297: NEG
45298: PUSH
45299: LD_INT 3
45301: NEG
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: LIST
45311: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45312: LD_ADDR_VAR 0 59
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 2
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: LIST
45355: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45356: LD_ADDR_VAR 0 60
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: LIST
45396: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45397: LD_ADDR_VAR 0 61
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 2
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: LIST
45436: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45437: LD_ADDR_VAR 0 62
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45478: LD_ADDR_VAR 0 63
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: LIST
45521: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45522: LD_ADDR_VAR 0 64
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 2
45553: NEG
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: LIST
45567: ST_TO_ADDR
// end ; 2 :
45568: GO 48834
45570: LD_INT 2
45572: DOUBLE
45573: EQUAL
45574: IFTRUE 45578
45576: GO 48833
45578: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45579: LD_ADDR_VAR 0 29
45583: PUSH
45584: LD_INT 4
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 4
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 5
45607: PUSH
45608: LD_INT 0
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 5
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 4
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 3
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 3
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 3
45658: PUSH
45659: LD_INT 2
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 5
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 3
45679: PUSH
45680: LD_INT 3
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 3
45689: PUSH
45690: LD_INT 2
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 4
45699: PUSH
45700: LD_INT 3
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 4
45709: PUSH
45710: LD_INT 4
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 3
45719: PUSH
45720: LD_INT 4
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 3
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 4
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: LD_INT 4
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 4
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 3
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 4
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: LD_INT 5
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 5
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: LD_INT 4
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 3
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: LD_INT 5
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: NEG
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 3
45873: NEG
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: NEG
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 3
45907: NEG
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 4
45918: NEG
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 4
45929: NEG
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 4
45941: NEG
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 4
45964: NEG
45965: PUSH
45966: LD_INT 4
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 4
45976: NEG
45977: PUSH
45978: LD_INT 5
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 3
45988: NEG
45989: PUSH
45990: LD_INT 4
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 3
46000: NEG
46001: PUSH
46002: LD_INT 3
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 4
46012: NEG
46013: PUSH
46014: LD_INT 3
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 5
46024: NEG
46025: PUSH
46026: LD_INT 4
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 5
46036: NEG
46037: PUSH
46038: LD_INT 5
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 3
46048: NEG
46049: PUSH
46050: LD_INT 5
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 5
46060: NEG
46061: PUSH
46062: LD_INT 3
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46117: LD_ADDR_VAR 0 30
46121: PUSH
46122: LD_INT 4
46124: PUSH
46125: LD_INT 4
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 4
46134: PUSH
46135: LD_INT 3
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 5
46144: PUSH
46145: LD_INT 4
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 5
46154: PUSH
46155: LD_INT 5
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 4
46164: PUSH
46165: LD_INT 5
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 3
46174: PUSH
46175: LD_INT 4
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 3
46184: PUSH
46185: LD_INT 3
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 5
46194: PUSH
46195: LD_INT 3
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 3
46204: PUSH
46205: LD_INT 5
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 3
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: LD_INT 3
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: LD_INT 4
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 4
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 4
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 4
46307: NEG
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 4
46318: NEG
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 3
46330: NEG
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 3
46341: NEG
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 4
46352: NEG
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 5
46363: NEG
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 5
46374: NEG
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 5
46386: NEG
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 3
46398: NEG
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 3
46409: NEG
46410: PUSH
46411: LD_INT 3
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 3
46421: NEG
46422: PUSH
46423: LD_INT 4
46425: NEG
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: LD_INT 3
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 3
46457: NEG
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 4
46469: NEG
46470: PUSH
46471: LD_INT 3
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 4
46481: NEG
46482: PUSH
46483: LD_INT 4
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: LD_INT 4
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 4
46505: NEG
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 4
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: LD_INT 5
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: LD_INT 4
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 3
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: LD_INT 3
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 4
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 5
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: LD_INT 3
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: LD_INT 5
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46664: LD_ADDR_VAR 0 31
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 4
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: LD_INT 3
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 4
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 5
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: LD_INT 5
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 4
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: LD_INT 3
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: LD_INT 5
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: LD_INT 3
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 3
46764: NEG
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 3
46775: NEG
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 2
46787: NEG
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: NEG
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 3
46809: NEG
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 4
46820: NEG
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 4
46831: NEG
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 4
46843: NEG
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 4
46866: NEG
46867: PUSH
46868: LD_INT 4
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 4
46878: NEG
46879: PUSH
46880: LD_INT 5
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 3
46890: NEG
46891: PUSH
46892: LD_INT 4
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 3
46902: NEG
46903: PUSH
46904: LD_INT 3
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 4
46914: NEG
46915: PUSH
46916: LD_INT 3
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 5
46926: NEG
46927: PUSH
46928: LD_INT 4
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 5
46938: NEG
46939: PUSH
46940: LD_INT 5
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 3
46950: NEG
46951: PUSH
46952: LD_INT 5
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 5
46962: NEG
46963: PUSH
46964: LD_INT 3
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: LD_INT 3
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 4
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 3
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: LD_INT 3
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: LD_INT 4
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: LD_INT 2
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: LD_INT 4
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 4
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 4
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 5
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 5
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 4
47117: PUSH
47118: LD_INT 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 3
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 3
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 3
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 5
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47214: LD_ADDR_VAR 0 32
47218: PUSH
47219: LD_INT 4
47221: NEG
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 4
47232: NEG
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 3
47244: NEG
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 3
47255: NEG
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 4
47266: NEG
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 5
47277: NEG
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 5
47288: NEG
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 5
47300: NEG
47301: PUSH
47302: LD_INT 2
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 3
47312: NEG
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 3
47323: NEG
47324: PUSH
47325: LD_INT 3
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 3
47335: NEG
47336: PUSH
47337: LD_INT 4
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 2
47347: NEG
47348: PUSH
47349: LD_INT 3
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 3
47371: NEG
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 4
47383: NEG
47384: PUSH
47385: LD_INT 3
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 4
47395: NEG
47396: PUSH
47397: LD_INT 4
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 4
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 4
47419: NEG
47420: PUSH
47421: LD_INT 2
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: LD_INT 4
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 5
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: LD_INT 4
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 3
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: LD_INT 3
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 4
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 5
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: LD_INT 3
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: LD_INT 5
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 3
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 3
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 4
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 4
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 3
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 4
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 4
47626: PUSH
47627: LD_INT 4
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 4
47636: PUSH
47637: LD_INT 3
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 5
47646: PUSH
47647: LD_INT 4
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 5
47656: PUSH
47657: LD_INT 5
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 4
47666: PUSH
47667: LD_INT 5
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 3
47676: PUSH
47677: LD_INT 4
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 3
47686: PUSH
47687: LD_INT 3
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 5
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 3
47706: PUSH
47707: LD_INT 5
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47761: LD_ADDR_VAR 0 33
47765: PUSH
47766: LD_INT 4
47768: NEG
47769: PUSH
47770: LD_INT 4
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 4
47780: NEG
47781: PUSH
47782: LD_INT 5
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 3
47792: NEG
47793: PUSH
47794: LD_INT 4
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 3
47804: NEG
47805: PUSH
47806: LD_INT 3
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 4
47816: NEG
47817: PUSH
47818: LD_INT 3
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 5
47828: NEG
47829: PUSH
47830: LD_INT 4
47832: NEG
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 5
47840: NEG
47841: PUSH
47842: LD_INT 5
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 3
47852: NEG
47853: PUSH
47854: LD_INT 5
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 5
47864: NEG
47865: PUSH
47866: LD_INT 3
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: LD_INT 3
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 4
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: LD_INT 3
47901: NEG
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 2
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 3
47935: NEG
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: LD_INT 4
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: NEG
47967: PUSH
47968: LD_INT 4
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 4
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 4
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 5
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 5
48009: PUSH
48010: LD_INT 1
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 4
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 3
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 3
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 3
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 5
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 3
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 3
48081: PUSH
48082: LD_INT 2
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 4
48091: PUSH
48092: LD_INT 3
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 4
48101: PUSH
48102: LD_INT 4
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 3
48111: PUSH
48112: LD_INT 4
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 3
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 2
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 4
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: LD_INT 4
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 4
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: LD_INT 3
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: LD_INT 4
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 5
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 5
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 4
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: LD_INT 3
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 5
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: LD_INT 3
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48299: LD_ADDR_VAR 0 34
48303: PUSH
48304: LD_INT 0
48306: PUSH
48307: LD_INT 4
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: LD_INT 5
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: LD_INT 4
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 3
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 3
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: LD_INT 4
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 5
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: LD_INT 3
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 5
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 3
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 3
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 4
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 4
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 3
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 4
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 4
48501: PUSH
48502: LD_INT 4
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 4
48511: PUSH
48512: LD_INT 3
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 5
48521: PUSH
48522: LD_INT 4
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 5
48531: PUSH
48532: LD_INT 5
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 4
48541: PUSH
48542: LD_INT 5
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 3
48551: PUSH
48552: LD_INT 4
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 3
48561: PUSH
48562: LD_INT 3
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 5
48571: PUSH
48572: LD_INT 3
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 3
48581: PUSH
48582: LD_INT 5
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: LD_INT 3
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 3
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: LD_INT 4
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 4
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: LD_INT 3
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: PUSH
48664: LD_INT 4
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: NEG
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 4
48684: NEG
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 4
48695: NEG
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 3
48707: NEG
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 3
48718: NEG
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 4
48729: NEG
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 5
48740: NEG
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 5
48751: NEG
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 5
48763: NEG
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 3
48775: NEG
48776: PUSH
48777: LD_INT 2
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: ST_TO_ADDR
// end ; end ;
48831: GO 48834
48833: POP
// case btype of b_depot , b_warehouse :
48834: LD_VAR 0 1
48838: PUSH
48839: LD_INT 0
48841: DOUBLE
48842: EQUAL
48843: IFTRUE 48853
48845: LD_INT 1
48847: DOUBLE
48848: EQUAL
48849: IFTRUE 48853
48851: GO 49054
48853: POP
// case nation of nation_american :
48854: LD_VAR 0 5
48858: PUSH
48859: LD_INT 1
48861: DOUBLE
48862: EQUAL
48863: IFTRUE 48867
48865: GO 48923
48867: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
48868: LD_ADDR_VAR 0 9
48872: PUSH
48873: LD_VAR 0 11
48877: PUSH
48878: LD_VAR 0 12
48882: PUSH
48883: LD_VAR 0 13
48887: PUSH
48888: LD_VAR 0 14
48892: PUSH
48893: LD_VAR 0 15
48897: PUSH
48898: LD_VAR 0 16
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: PUSH
48911: LD_VAR 0 4
48915: PUSH
48916: LD_INT 1
48918: PLUS
48919: ARRAY
48920: ST_TO_ADDR
48921: GO 49052
48923: LD_INT 2
48925: DOUBLE
48926: EQUAL
48927: IFTRUE 48931
48929: GO 48987
48931: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
48932: LD_ADDR_VAR 0 9
48936: PUSH
48937: LD_VAR 0 17
48941: PUSH
48942: LD_VAR 0 18
48946: PUSH
48947: LD_VAR 0 19
48951: PUSH
48952: LD_VAR 0 20
48956: PUSH
48957: LD_VAR 0 21
48961: PUSH
48962: LD_VAR 0 22
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: PUSH
48975: LD_VAR 0 4
48979: PUSH
48980: LD_INT 1
48982: PLUS
48983: ARRAY
48984: ST_TO_ADDR
48985: GO 49052
48987: LD_INT 3
48989: DOUBLE
48990: EQUAL
48991: IFTRUE 48995
48993: GO 49051
48995: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48996: LD_ADDR_VAR 0 9
49000: PUSH
49001: LD_VAR 0 23
49005: PUSH
49006: LD_VAR 0 24
49010: PUSH
49011: LD_VAR 0 25
49015: PUSH
49016: LD_VAR 0 26
49020: PUSH
49021: LD_VAR 0 27
49025: PUSH
49026: LD_VAR 0 28
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: PUSH
49039: LD_VAR 0 4
49043: PUSH
49044: LD_INT 1
49046: PLUS
49047: ARRAY
49048: ST_TO_ADDR
49049: GO 49052
49051: POP
49052: GO 49607
49054: LD_INT 2
49056: DOUBLE
49057: EQUAL
49058: IFTRUE 49068
49060: LD_INT 3
49062: DOUBLE
49063: EQUAL
49064: IFTRUE 49068
49066: GO 49124
49068: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49069: LD_ADDR_VAR 0 9
49073: PUSH
49074: LD_VAR 0 29
49078: PUSH
49079: LD_VAR 0 30
49083: PUSH
49084: LD_VAR 0 31
49088: PUSH
49089: LD_VAR 0 32
49093: PUSH
49094: LD_VAR 0 33
49098: PUSH
49099: LD_VAR 0 34
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: PUSH
49112: LD_VAR 0 4
49116: PUSH
49117: LD_INT 1
49119: PLUS
49120: ARRAY
49121: ST_TO_ADDR
49122: GO 49607
49124: LD_INT 16
49126: DOUBLE
49127: EQUAL
49128: IFTRUE 49186
49130: LD_INT 17
49132: DOUBLE
49133: EQUAL
49134: IFTRUE 49186
49136: LD_INT 18
49138: DOUBLE
49139: EQUAL
49140: IFTRUE 49186
49142: LD_INT 19
49144: DOUBLE
49145: EQUAL
49146: IFTRUE 49186
49148: LD_INT 22
49150: DOUBLE
49151: EQUAL
49152: IFTRUE 49186
49154: LD_INT 20
49156: DOUBLE
49157: EQUAL
49158: IFTRUE 49186
49160: LD_INT 21
49162: DOUBLE
49163: EQUAL
49164: IFTRUE 49186
49166: LD_INT 23
49168: DOUBLE
49169: EQUAL
49170: IFTRUE 49186
49172: LD_INT 24
49174: DOUBLE
49175: EQUAL
49176: IFTRUE 49186
49178: LD_INT 25
49180: DOUBLE
49181: EQUAL
49182: IFTRUE 49186
49184: GO 49242
49186: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49187: LD_ADDR_VAR 0 9
49191: PUSH
49192: LD_VAR 0 35
49196: PUSH
49197: LD_VAR 0 36
49201: PUSH
49202: LD_VAR 0 37
49206: PUSH
49207: LD_VAR 0 38
49211: PUSH
49212: LD_VAR 0 39
49216: PUSH
49217: LD_VAR 0 40
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: PUSH
49230: LD_VAR 0 4
49234: PUSH
49235: LD_INT 1
49237: PLUS
49238: ARRAY
49239: ST_TO_ADDR
49240: GO 49607
49242: LD_INT 6
49244: DOUBLE
49245: EQUAL
49246: IFTRUE 49298
49248: LD_INT 7
49250: DOUBLE
49251: EQUAL
49252: IFTRUE 49298
49254: LD_INT 8
49256: DOUBLE
49257: EQUAL
49258: IFTRUE 49298
49260: LD_INT 13
49262: DOUBLE
49263: EQUAL
49264: IFTRUE 49298
49266: LD_INT 12
49268: DOUBLE
49269: EQUAL
49270: IFTRUE 49298
49272: LD_INT 15
49274: DOUBLE
49275: EQUAL
49276: IFTRUE 49298
49278: LD_INT 11
49280: DOUBLE
49281: EQUAL
49282: IFTRUE 49298
49284: LD_INT 14
49286: DOUBLE
49287: EQUAL
49288: IFTRUE 49298
49290: LD_INT 10
49292: DOUBLE
49293: EQUAL
49294: IFTRUE 49298
49296: GO 49354
49298: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
49299: LD_ADDR_VAR 0 9
49303: PUSH
49304: LD_VAR 0 41
49308: PUSH
49309: LD_VAR 0 42
49313: PUSH
49314: LD_VAR 0 43
49318: PUSH
49319: LD_VAR 0 44
49323: PUSH
49324: LD_VAR 0 45
49328: PUSH
49329: LD_VAR 0 46
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: PUSH
49342: LD_VAR 0 4
49346: PUSH
49347: LD_INT 1
49349: PLUS
49350: ARRAY
49351: ST_TO_ADDR
49352: GO 49607
49354: LD_INT 36
49356: DOUBLE
49357: EQUAL
49358: IFTRUE 49362
49360: GO 49418
49362: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49363: LD_ADDR_VAR 0 9
49367: PUSH
49368: LD_VAR 0 47
49372: PUSH
49373: LD_VAR 0 48
49377: PUSH
49378: LD_VAR 0 49
49382: PUSH
49383: LD_VAR 0 50
49387: PUSH
49388: LD_VAR 0 51
49392: PUSH
49393: LD_VAR 0 52
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: PUSH
49406: LD_VAR 0 4
49410: PUSH
49411: LD_INT 1
49413: PLUS
49414: ARRAY
49415: ST_TO_ADDR
49416: GO 49607
49418: LD_INT 4
49420: DOUBLE
49421: EQUAL
49422: IFTRUE 49444
49424: LD_INT 5
49426: DOUBLE
49427: EQUAL
49428: IFTRUE 49444
49430: LD_INT 34
49432: DOUBLE
49433: EQUAL
49434: IFTRUE 49444
49436: LD_INT 37
49438: DOUBLE
49439: EQUAL
49440: IFTRUE 49444
49442: GO 49500
49444: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49445: LD_ADDR_VAR 0 9
49449: PUSH
49450: LD_VAR 0 53
49454: PUSH
49455: LD_VAR 0 54
49459: PUSH
49460: LD_VAR 0 55
49464: PUSH
49465: LD_VAR 0 56
49469: PUSH
49470: LD_VAR 0 57
49474: PUSH
49475: LD_VAR 0 58
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: PUSH
49488: LD_VAR 0 4
49492: PUSH
49493: LD_INT 1
49495: PLUS
49496: ARRAY
49497: ST_TO_ADDR
49498: GO 49607
49500: LD_INT 31
49502: DOUBLE
49503: EQUAL
49504: IFTRUE 49550
49506: LD_INT 32
49508: DOUBLE
49509: EQUAL
49510: IFTRUE 49550
49512: LD_INT 33
49514: DOUBLE
49515: EQUAL
49516: IFTRUE 49550
49518: LD_INT 27
49520: DOUBLE
49521: EQUAL
49522: IFTRUE 49550
49524: LD_INT 26
49526: DOUBLE
49527: EQUAL
49528: IFTRUE 49550
49530: LD_INT 28
49532: DOUBLE
49533: EQUAL
49534: IFTRUE 49550
49536: LD_INT 29
49538: DOUBLE
49539: EQUAL
49540: IFTRUE 49550
49542: LD_INT 30
49544: DOUBLE
49545: EQUAL
49546: IFTRUE 49550
49548: GO 49606
49550: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
49551: LD_ADDR_VAR 0 9
49555: PUSH
49556: LD_VAR 0 59
49560: PUSH
49561: LD_VAR 0 60
49565: PUSH
49566: LD_VAR 0 61
49570: PUSH
49571: LD_VAR 0 62
49575: PUSH
49576: LD_VAR 0 63
49580: PUSH
49581: LD_VAR 0 64
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: PUSH
49594: LD_VAR 0 4
49598: PUSH
49599: LD_INT 1
49601: PLUS
49602: ARRAY
49603: ST_TO_ADDR
49604: GO 49607
49606: POP
// temp_list2 = [ ] ;
49607: LD_ADDR_VAR 0 10
49611: PUSH
49612: EMPTY
49613: ST_TO_ADDR
// for i in temp_list do
49614: LD_ADDR_VAR 0 8
49618: PUSH
49619: LD_VAR 0 9
49623: PUSH
49624: FOR_IN
49625: IFFALSE 49677
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49627: LD_ADDR_VAR 0 10
49631: PUSH
49632: LD_VAR 0 10
49636: PUSH
49637: LD_VAR 0 8
49641: PUSH
49642: LD_INT 1
49644: ARRAY
49645: PUSH
49646: LD_VAR 0 2
49650: PLUS
49651: PUSH
49652: LD_VAR 0 8
49656: PUSH
49657: LD_INT 2
49659: ARRAY
49660: PUSH
49661: LD_VAR 0 3
49665: PLUS
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: EMPTY
49672: LIST
49673: ADD
49674: ST_TO_ADDR
49675: GO 49624
49677: POP
49678: POP
// result = temp_list2 ;
49679: LD_ADDR_VAR 0 7
49683: PUSH
49684: LD_VAR 0 10
49688: ST_TO_ADDR
// end ;
49689: LD_VAR 0 7
49693: RET
// export function EnemyInRange ( unit , dist ) ; begin
49694: LD_INT 0
49696: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49697: LD_ADDR_VAR 0 3
49701: PUSH
49702: LD_VAR 0 1
49706: PPUSH
49707: CALL_OW 255
49711: PPUSH
49712: LD_VAR 0 1
49716: PPUSH
49717: CALL_OW 250
49721: PPUSH
49722: LD_VAR 0 1
49726: PPUSH
49727: CALL_OW 251
49731: PPUSH
49732: LD_VAR 0 2
49736: PPUSH
49737: CALL 23798 0 4
49741: PUSH
49742: LD_INT 4
49744: ARRAY
49745: ST_TO_ADDR
// end ;
49746: LD_VAR 0 3
49750: RET
// export function PlayerSeeMe ( unit ) ; begin
49751: LD_INT 0
49753: PPUSH
// result := See ( your_side , unit ) ;
49754: LD_ADDR_VAR 0 2
49758: PUSH
49759: LD_OWVAR 2
49763: PPUSH
49764: LD_VAR 0 1
49768: PPUSH
49769: CALL_OW 292
49773: ST_TO_ADDR
// end ;
49774: LD_VAR 0 2
49778: RET
// export function ReverseDir ( unit ) ; begin
49779: LD_INT 0
49781: PPUSH
// if not unit then
49782: LD_VAR 0 1
49786: NOT
49787: IFFALSE 49791
// exit ;
49789: GO 49814
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49791: LD_ADDR_VAR 0 2
49795: PUSH
49796: LD_VAR 0 1
49800: PPUSH
49801: CALL_OW 254
49805: PUSH
49806: LD_INT 3
49808: PLUS
49809: PUSH
49810: LD_INT 6
49812: MOD
49813: ST_TO_ADDR
// end ;
49814: LD_VAR 0 2
49818: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
49819: LD_INT 0
49821: PPUSH
49822: PPUSH
49823: PPUSH
49824: PPUSH
49825: PPUSH
// if not hexes then
49826: LD_VAR 0 2
49830: NOT
49831: IFFALSE 49835
// exit ;
49833: GO 49983
// dist := 9999 ;
49835: LD_ADDR_VAR 0 5
49839: PUSH
49840: LD_INT 9999
49842: ST_TO_ADDR
// for i = 1 to hexes do
49843: LD_ADDR_VAR 0 4
49847: PUSH
49848: DOUBLE
49849: LD_INT 1
49851: DEC
49852: ST_TO_ADDR
49853: LD_VAR 0 2
49857: PUSH
49858: FOR_TO
49859: IFFALSE 49971
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
49861: LD_VAR 0 1
49865: PPUSH
49866: LD_VAR 0 2
49870: PUSH
49871: LD_VAR 0 4
49875: ARRAY
49876: PUSH
49877: LD_INT 1
49879: ARRAY
49880: PPUSH
49881: LD_VAR 0 2
49885: PUSH
49886: LD_VAR 0 4
49890: ARRAY
49891: PUSH
49892: LD_INT 2
49894: ARRAY
49895: PPUSH
49896: CALL_OW 297
49900: PUSH
49901: LD_VAR 0 5
49905: LESS
49906: IFFALSE 49969
// begin hex := hexes [ i ] ;
49908: LD_ADDR_VAR 0 7
49912: PUSH
49913: LD_VAR 0 2
49917: PUSH
49918: LD_VAR 0 4
49922: ARRAY
49923: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49924: LD_ADDR_VAR 0 5
49928: PUSH
49929: LD_VAR 0 1
49933: PPUSH
49934: LD_VAR 0 2
49938: PUSH
49939: LD_VAR 0 4
49943: ARRAY
49944: PUSH
49945: LD_INT 1
49947: ARRAY
49948: PPUSH
49949: LD_VAR 0 2
49953: PUSH
49954: LD_VAR 0 4
49958: ARRAY
49959: PUSH
49960: LD_INT 2
49962: ARRAY
49963: PPUSH
49964: CALL_OW 297
49968: ST_TO_ADDR
// end ; end ;
49969: GO 49858
49971: POP
49972: POP
// result := hex ;
49973: LD_ADDR_VAR 0 3
49977: PUSH
49978: LD_VAR 0 7
49982: ST_TO_ADDR
// end ;
49983: LD_VAR 0 3
49987: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49988: LD_INT 0
49990: PPUSH
49991: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49992: LD_VAR 0 1
49996: NOT
49997: PUSH
49998: LD_VAR 0 1
50002: PUSH
50003: LD_INT 21
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 23
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PPUSH
50027: CALL_OW 69
50031: IN
50032: NOT
50033: OR
50034: IFFALSE 50038
// exit ;
50036: GO 50085
// for i = 1 to 3 do
50038: LD_ADDR_VAR 0 3
50042: PUSH
50043: DOUBLE
50044: LD_INT 1
50046: DEC
50047: ST_TO_ADDR
50048: LD_INT 3
50050: PUSH
50051: FOR_TO
50052: IFFALSE 50083
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50054: LD_VAR 0 1
50058: PPUSH
50059: CALL_OW 250
50063: PPUSH
50064: LD_VAR 0 1
50068: PPUSH
50069: CALL_OW 251
50073: PPUSH
50074: LD_INT 1
50076: PPUSH
50077: CALL_OW 453
50081: GO 50051
50083: POP
50084: POP
// end ;
50085: LD_VAR 0 2
50089: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50090: LD_INT 0
50092: PPUSH
50093: PPUSH
50094: PPUSH
50095: PPUSH
50096: PPUSH
50097: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
50098: LD_VAR 0 1
50102: NOT
50103: PUSH
50104: LD_VAR 0 2
50108: NOT
50109: OR
50110: PUSH
50111: LD_VAR 0 1
50115: PPUSH
50116: CALL_OW 314
50120: OR
50121: IFFALSE 50125
// exit ;
50123: GO 50566
// x := GetX ( enemy_unit ) ;
50125: LD_ADDR_VAR 0 7
50129: PUSH
50130: LD_VAR 0 2
50134: PPUSH
50135: CALL_OW 250
50139: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50140: LD_ADDR_VAR 0 8
50144: PUSH
50145: LD_VAR 0 2
50149: PPUSH
50150: CALL_OW 251
50154: ST_TO_ADDR
// if not x or not y then
50155: LD_VAR 0 7
50159: NOT
50160: PUSH
50161: LD_VAR 0 8
50165: NOT
50166: OR
50167: IFFALSE 50171
// exit ;
50169: GO 50566
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50171: LD_ADDR_VAR 0 6
50175: PUSH
50176: LD_VAR 0 7
50180: PPUSH
50181: LD_INT 0
50183: PPUSH
50184: LD_INT 4
50186: PPUSH
50187: CALL_OW 272
50191: PUSH
50192: LD_VAR 0 8
50196: PPUSH
50197: LD_INT 0
50199: PPUSH
50200: LD_INT 4
50202: PPUSH
50203: CALL_OW 273
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_VAR 0 7
50216: PPUSH
50217: LD_INT 1
50219: PPUSH
50220: LD_INT 4
50222: PPUSH
50223: CALL_OW 272
50227: PUSH
50228: LD_VAR 0 8
50232: PPUSH
50233: LD_INT 1
50235: PPUSH
50236: LD_INT 4
50238: PPUSH
50239: CALL_OW 273
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_VAR 0 7
50252: PPUSH
50253: LD_INT 2
50255: PPUSH
50256: LD_INT 4
50258: PPUSH
50259: CALL_OW 272
50263: PUSH
50264: LD_VAR 0 8
50268: PPUSH
50269: LD_INT 2
50271: PPUSH
50272: LD_INT 4
50274: PPUSH
50275: CALL_OW 273
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_VAR 0 7
50288: PPUSH
50289: LD_INT 3
50291: PPUSH
50292: LD_INT 4
50294: PPUSH
50295: CALL_OW 272
50299: PUSH
50300: LD_VAR 0 8
50304: PPUSH
50305: LD_INT 3
50307: PPUSH
50308: LD_INT 4
50310: PPUSH
50311: CALL_OW 273
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_VAR 0 7
50324: PPUSH
50325: LD_INT 4
50327: PPUSH
50328: LD_INT 4
50330: PPUSH
50331: CALL_OW 272
50335: PUSH
50336: LD_VAR 0 8
50340: PPUSH
50341: LD_INT 4
50343: PPUSH
50344: LD_INT 4
50346: PPUSH
50347: CALL_OW 273
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_VAR 0 7
50360: PPUSH
50361: LD_INT 5
50363: PPUSH
50364: LD_INT 4
50366: PPUSH
50367: CALL_OW 272
50371: PUSH
50372: LD_VAR 0 8
50376: PPUSH
50377: LD_INT 5
50379: PPUSH
50380: LD_INT 4
50382: PPUSH
50383: CALL_OW 273
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: ST_TO_ADDR
// for i = tmp downto 1 do
50400: LD_ADDR_VAR 0 4
50404: PUSH
50405: DOUBLE
50406: LD_VAR 0 6
50410: INC
50411: ST_TO_ADDR
50412: LD_INT 1
50414: PUSH
50415: FOR_DOWNTO
50416: IFFALSE 50517
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50418: LD_VAR 0 6
50422: PUSH
50423: LD_VAR 0 4
50427: ARRAY
50428: PUSH
50429: LD_INT 1
50431: ARRAY
50432: PPUSH
50433: LD_VAR 0 6
50437: PUSH
50438: LD_VAR 0 4
50442: ARRAY
50443: PUSH
50444: LD_INT 2
50446: ARRAY
50447: PPUSH
50448: CALL_OW 488
50452: NOT
50453: PUSH
50454: LD_VAR 0 6
50458: PUSH
50459: LD_VAR 0 4
50463: ARRAY
50464: PUSH
50465: LD_INT 1
50467: ARRAY
50468: PPUSH
50469: LD_VAR 0 6
50473: PUSH
50474: LD_VAR 0 4
50478: ARRAY
50479: PUSH
50480: LD_INT 2
50482: ARRAY
50483: PPUSH
50484: CALL_OW 428
50488: PUSH
50489: LD_INT 0
50491: NONEQUAL
50492: OR
50493: IFFALSE 50515
// tmp := Delete ( tmp , i ) ;
50495: LD_ADDR_VAR 0 6
50499: PUSH
50500: LD_VAR 0 6
50504: PPUSH
50505: LD_VAR 0 4
50509: PPUSH
50510: CALL_OW 3
50514: ST_TO_ADDR
50515: GO 50415
50517: POP
50518: POP
// j := GetClosestHex ( unit , tmp ) ;
50519: LD_ADDR_VAR 0 5
50523: PUSH
50524: LD_VAR 0 1
50528: PPUSH
50529: LD_VAR 0 6
50533: PPUSH
50534: CALL 49819 0 2
50538: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50539: LD_VAR 0 1
50543: PPUSH
50544: LD_VAR 0 5
50548: PUSH
50549: LD_INT 1
50551: ARRAY
50552: PPUSH
50553: LD_VAR 0 5
50557: PUSH
50558: LD_INT 2
50560: ARRAY
50561: PPUSH
50562: CALL_OW 111
// end ;
50566: LD_VAR 0 3
50570: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50571: LD_INT 0
50573: PPUSH
50574: PPUSH
50575: PPUSH
// uc_side = 0 ;
50576: LD_ADDR_OWVAR 20
50580: PUSH
50581: LD_INT 0
50583: ST_TO_ADDR
// uc_nation = 0 ;
50584: LD_ADDR_OWVAR 21
50588: PUSH
50589: LD_INT 0
50591: ST_TO_ADDR
// InitHc ;
50592: CALL_OW 19
// InitVc ;
50596: CALL_OW 20
// if mastodonts then
50600: LD_VAR 0 6
50604: IFFALSE 50671
// for i = 1 to mastodonts do
50606: LD_ADDR_VAR 0 11
50610: PUSH
50611: DOUBLE
50612: LD_INT 1
50614: DEC
50615: ST_TO_ADDR
50616: LD_VAR 0 6
50620: PUSH
50621: FOR_TO
50622: IFFALSE 50669
// begin vc_chassis := 31 ;
50624: LD_ADDR_OWVAR 37
50628: PUSH
50629: LD_INT 31
50631: ST_TO_ADDR
// vc_control := control_rider ;
50632: LD_ADDR_OWVAR 38
50636: PUSH
50637: LD_INT 4
50639: ST_TO_ADDR
// animal := CreateVehicle ;
50640: LD_ADDR_VAR 0 12
50644: PUSH
50645: CALL_OW 45
50649: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50650: LD_VAR 0 12
50654: PPUSH
50655: LD_VAR 0 8
50659: PPUSH
50660: LD_INT 0
50662: PPUSH
50663: CALL 52740 0 3
// end ;
50667: GO 50621
50669: POP
50670: POP
// if horses then
50671: LD_VAR 0 5
50675: IFFALSE 50742
// for i = 1 to horses do
50677: LD_ADDR_VAR 0 11
50681: PUSH
50682: DOUBLE
50683: LD_INT 1
50685: DEC
50686: ST_TO_ADDR
50687: LD_VAR 0 5
50691: PUSH
50692: FOR_TO
50693: IFFALSE 50740
// begin hc_class := 21 ;
50695: LD_ADDR_OWVAR 28
50699: PUSH
50700: LD_INT 21
50702: ST_TO_ADDR
// hc_gallery :=  ;
50703: LD_ADDR_OWVAR 33
50707: PUSH
50708: LD_STRING 
50710: ST_TO_ADDR
// animal := CreateHuman ;
50711: LD_ADDR_VAR 0 12
50715: PUSH
50716: CALL_OW 44
50720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50721: LD_VAR 0 12
50725: PPUSH
50726: LD_VAR 0 8
50730: PPUSH
50731: LD_INT 0
50733: PPUSH
50734: CALL 52740 0 3
// end ;
50738: GO 50692
50740: POP
50741: POP
// if birds then
50742: LD_VAR 0 1
50746: IFFALSE 50813
// for i = 1 to birds do
50748: LD_ADDR_VAR 0 11
50752: PUSH
50753: DOUBLE
50754: LD_INT 1
50756: DEC
50757: ST_TO_ADDR
50758: LD_VAR 0 1
50762: PUSH
50763: FOR_TO
50764: IFFALSE 50811
// begin hc_class = 18 ;
50766: LD_ADDR_OWVAR 28
50770: PUSH
50771: LD_INT 18
50773: ST_TO_ADDR
// hc_gallery =  ;
50774: LD_ADDR_OWVAR 33
50778: PUSH
50779: LD_STRING 
50781: ST_TO_ADDR
// animal := CreateHuman ;
50782: LD_ADDR_VAR 0 12
50786: PUSH
50787: CALL_OW 44
50791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50792: LD_VAR 0 12
50796: PPUSH
50797: LD_VAR 0 8
50801: PPUSH
50802: LD_INT 0
50804: PPUSH
50805: CALL 52740 0 3
// end ;
50809: GO 50763
50811: POP
50812: POP
// if tigers then
50813: LD_VAR 0 2
50817: IFFALSE 50901
// for i = 1 to tigers do
50819: LD_ADDR_VAR 0 11
50823: PUSH
50824: DOUBLE
50825: LD_INT 1
50827: DEC
50828: ST_TO_ADDR
50829: LD_VAR 0 2
50833: PUSH
50834: FOR_TO
50835: IFFALSE 50899
// begin hc_class = class_tiger ;
50837: LD_ADDR_OWVAR 28
50841: PUSH
50842: LD_INT 14
50844: ST_TO_ADDR
// hc_gallery =  ;
50845: LD_ADDR_OWVAR 33
50849: PUSH
50850: LD_STRING 
50852: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50853: LD_ADDR_OWVAR 35
50857: PUSH
50858: LD_INT 7
50860: NEG
50861: PPUSH
50862: LD_INT 7
50864: PPUSH
50865: CALL_OW 12
50869: ST_TO_ADDR
// animal := CreateHuman ;
50870: LD_ADDR_VAR 0 12
50874: PUSH
50875: CALL_OW 44
50879: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50880: LD_VAR 0 12
50884: PPUSH
50885: LD_VAR 0 8
50889: PPUSH
50890: LD_INT 0
50892: PPUSH
50893: CALL 52740 0 3
// end ;
50897: GO 50834
50899: POP
50900: POP
// if apemans then
50901: LD_VAR 0 3
50905: IFFALSE 51028
// for i = 1 to apemans do
50907: LD_ADDR_VAR 0 11
50911: PUSH
50912: DOUBLE
50913: LD_INT 1
50915: DEC
50916: ST_TO_ADDR
50917: LD_VAR 0 3
50921: PUSH
50922: FOR_TO
50923: IFFALSE 51026
// begin hc_class = class_apeman ;
50925: LD_ADDR_OWVAR 28
50929: PUSH
50930: LD_INT 12
50932: ST_TO_ADDR
// hc_gallery =  ;
50933: LD_ADDR_OWVAR 33
50937: PUSH
50938: LD_STRING 
50940: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
50941: LD_ADDR_OWVAR 35
50945: PUSH
50946: LD_INT 5
50948: NEG
50949: PPUSH
50950: LD_INT 5
50952: PPUSH
50953: CALL_OW 12
50957: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50958: LD_ADDR_OWVAR 31
50962: PUSH
50963: LD_INT 1
50965: PPUSH
50966: LD_INT 3
50968: PPUSH
50969: CALL_OW 12
50973: PUSH
50974: LD_INT 1
50976: PPUSH
50977: LD_INT 3
50979: PPUSH
50980: CALL_OW 12
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: ST_TO_ADDR
// animal := CreateHuman ;
50997: LD_ADDR_VAR 0 12
51001: PUSH
51002: CALL_OW 44
51006: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51007: LD_VAR 0 12
51011: PPUSH
51012: LD_VAR 0 8
51016: PPUSH
51017: LD_INT 0
51019: PPUSH
51020: CALL 52740 0 3
// end ;
51024: GO 50922
51026: POP
51027: POP
// if enchidnas then
51028: LD_VAR 0 4
51032: IFFALSE 51099
// for i = 1 to enchidnas do
51034: LD_ADDR_VAR 0 11
51038: PUSH
51039: DOUBLE
51040: LD_INT 1
51042: DEC
51043: ST_TO_ADDR
51044: LD_VAR 0 4
51048: PUSH
51049: FOR_TO
51050: IFFALSE 51097
// begin hc_class = 13 ;
51052: LD_ADDR_OWVAR 28
51056: PUSH
51057: LD_INT 13
51059: ST_TO_ADDR
// hc_gallery =  ;
51060: LD_ADDR_OWVAR 33
51064: PUSH
51065: LD_STRING 
51067: ST_TO_ADDR
// animal := CreateHuman ;
51068: LD_ADDR_VAR 0 12
51072: PUSH
51073: CALL_OW 44
51077: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51078: LD_VAR 0 12
51082: PPUSH
51083: LD_VAR 0 8
51087: PPUSH
51088: LD_INT 0
51090: PPUSH
51091: CALL 52740 0 3
// end ;
51095: GO 51049
51097: POP
51098: POP
// if fishes then
51099: LD_VAR 0 7
51103: IFFALSE 51170
// for i = 1 to fishes do
51105: LD_ADDR_VAR 0 11
51109: PUSH
51110: DOUBLE
51111: LD_INT 1
51113: DEC
51114: ST_TO_ADDR
51115: LD_VAR 0 7
51119: PUSH
51120: FOR_TO
51121: IFFALSE 51168
// begin hc_class = 20 ;
51123: LD_ADDR_OWVAR 28
51127: PUSH
51128: LD_INT 20
51130: ST_TO_ADDR
// hc_gallery =  ;
51131: LD_ADDR_OWVAR 33
51135: PUSH
51136: LD_STRING 
51138: ST_TO_ADDR
// animal := CreateHuman ;
51139: LD_ADDR_VAR 0 12
51143: PUSH
51144: CALL_OW 44
51148: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51149: LD_VAR 0 12
51153: PPUSH
51154: LD_VAR 0 9
51158: PPUSH
51159: LD_INT 0
51161: PPUSH
51162: CALL 52740 0 3
// end ;
51166: GO 51120
51168: POP
51169: POP
// end ;
51170: LD_VAR 0 10
51174: RET
// export function WantHeal ( sci , unit ) ; begin
51175: LD_INT 0
51177: PPUSH
// if GetTaskList ( sci ) > 0 then
51178: LD_VAR 0 1
51182: PPUSH
51183: CALL_OW 437
51187: PUSH
51188: LD_INT 0
51190: GREATER
51191: IFFALSE 51261
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51193: LD_VAR 0 1
51197: PPUSH
51198: CALL_OW 437
51202: PUSH
51203: LD_INT 1
51205: ARRAY
51206: PUSH
51207: LD_INT 1
51209: ARRAY
51210: PUSH
51211: LD_STRING l
51213: EQUAL
51214: PUSH
51215: LD_VAR 0 1
51219: PPUSH
51220: CALL_OW 437
51224: PUSH
51225: LD_INT 1
51227: ARRAY
51228: PUSH
51229: LD_INT 4
51231: ARRAY
51232: PUSH
51233: LD_VAR 0 2
51237: EQUAL
51238: AND
51239: IFFALSE 51251
// result := true else
51241: LD_ADDR_VAR 0 3
51245: PUSH
51246: LD_INT 1
51248: ST_TO_ADDR
51249: GO 51259
// result := false ;
51251: LD_ADDR_VAR 0 3
51255: PUSH
51256: LD_INT 0
51258: ST_TO_ADDR
// end else
51259: GO 51269
// result := false ;
51261: LD_ADDR_VAR 0 3
51265: PUSH
51266: LD_INT 0
51268: ST_TO_ADDR
// end ;
51269: LD_VAR 0 3
51273: RET
// export function HealTarget ( sci ) ; begin
51274: LD_INT 0
51276: PPUSH
// if not sci then
51277: LD_VAR 0 1
51281: NOT
51282: IFFALSE 51286
// exit ;
51284: GO 51351
// result := 0 ;
51286: LD_ADDR_VAR 0 2
51290: PUSH
51291: LD_INT 0
51293: ST_TO_ADDR
// if GetTaskList ( sci ) then
51294: LD_VAR 0 1
51298: PPUSH
51299: CALL_OW 437
51303: IFFALSE 51351
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51305: LD_VAR 0 1
51309: PPUSH
51310: CALL_OW 437
51314: PUSH
51315: LD_INT 1
51317: ARRAY
51318: PUSH
51319: LD_INT 1
51321: ARRAY
51322: PUSH
51323: LD_STRING l
51325: EQUAL
51326: IFFALSE 51351
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51328: LD_ADDR_VAR 0 2
51332: PUSH
51333: LD_VAR 0 1
51337: PPUSH
51338: CALL_OW 437
51342: PUSH
51343: LD_INT 1
51345: ARRAY
51346: PUSH
51347: LD_INT 4
51349: ARRAY
51350: ST_TO_ADDR
// end ;
51351: LD_VAR 0 2
51355: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51356: LD_INT 0
51358: PPUSH
51359: PPUSH
51360: PPUSH
51361: PPUSH
// if not base_units then
51362: LD_VAR 0 1
51366: NOT
51367: IFFALSE 51371
// exit ;
51369: GO 51458
// result := false ;
51371: LD_ADDR_VAR 0 2
51375: PUSH
51376: LD_INT 0
51378: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51379: LD_ADDR_VAR 0 5
51383: PUSH
51384: LD_VAR 0 1
51388: PPUSH
51389: LD_INT 21
51391: PUSH
51392: LD_INT 3
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PPUSH
51399: CALL_OW 72
51403: ST_TO_ADDR
// if not tmp then
51404: LD_VAR 0 5
51408: NOT
51409: IFFALSE 51413
// exit ;
51411: GO 51458
// for i in tmp do
51413: LD_ADDR_VAR 0 3
51417: PUSH
51418: LD_VAR 0 5
51422: PUSH
51423: FOR_IN
51424: IFFALSE 51456
// begin result := EnemyInRange ( i , 22 ) ;
51426: LD_ADDR_VAR 0 2
51430: PUSH
51431: LD_VAR 0 3
51435: PPUSH
51436: LD_INT 22
51438: PPUSH
51439: CALL 49694 0 2
51443: ST_TO_ADDR
// if result then
51444: LD_VAR 0 2
51448: IFFALSE 51454
// exit ;
51450: POP
51451: POP
51452: GO 51458
// end ;
51454: GO 51423
51456: POP
51457: POP
// end ;
51458: LD_VAR 0 2
51462: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
51463: LD_INT 0
51465: PPUSH
51466: PPUSH
// if not units then
51467: LD_VAR 0 1
51471: NOT
51472: IFFALSE 51476
// exit ;
51474: GO 51546
// result := [ ] ;
51476: LD_ADDR_VAR 0 3
51480: PUSH
51481: EMPTY
51482: ST_TO_ADDR
// for i in units do
51483: LD_ADDR_VAR 0 4
51487: PUSH
51488: LD_VAR 0 1
51492: PUSH
51493: FOR_IN
51494: IFFALSE 51544
// if GetTag ( i ) = tag then
51496: LD_VAR 0 4
51500: PPUSH
51501: CALL_OW 110
51505: PUSH
51506: LD_VAR 0 2
51510: EQUAL
51511: IFFALSE 51542
// result := Insert ( result , result + 1 , i ) ;
51513: LD_ADDR_VAR 0 3
51517: PUSH
51518: LD_VAR 0 3
51522: PPUSH
51523: LD_VAR 0 3
51527: PUSH
51528: LD_INT 1
51530: PLUS
51531: PPUSH
51532: LD_VAR 0 4
51536: PPUSH
51537: CALL_OW 2
51541: ST_TO_ADDR
51542: GO 51493
51544: POP
51545: POP
// end ;
51546: LD_VAR 0 3
51550: RET
// export function IsDriver ( un ) ; begin
51551: LD_INT 0
51553: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51554: LD_ADDR_VAR 0 2
51558: PUSH
51559: LD_VAR 0 1
51563: PUSH
51564: LD_INT 55
51566: PUSH
51567: EMPTY
51568: LIST
51569: PPUSH
51570: CALL_OW 69
51574: IN
51575: ST_TO_ADDR
// end ;
51576: LD_VAR 0 2
51580: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51581: LD_INT 0
51583: PPUSH
51584: PPUSH
// list := [ ] ;
51585: LD_ADDR_VAR 0 5
51589: PUSH
51590: EMPTY
51591: ST_TO_ADDR
// case d of 0 :
51592: LD_VAR 0 3
51596: PUSH
51597: LD_INT 0
51599: DOUBLE
51600: EQUAL
51601: IFTRUE 51605
51603: GO 51738
51605: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51606: LD_ADDR_VAR 0 5
51610: PUSH
51611: LD_VAR 0 1
51615: PUSH
51616: LD_INT 4
51618: MINUS
51619: PUSH
51620: LD_VAR 0 2
51624: PUSH
51625: LD_INT 4
51627: MINUS
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: LIST
51636: PUSH
51637: LD_VAR 0 1
51641: PUSH
51642: LD_INT 3
51644: MINUS
51645: PUSH
51646: LD_VAR 0 2
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: LIST
51658: PUSH
51659: LD_VAR 0 1
51663: PUSH
51664: LD_INT 4
51666: PLUS
51667: PUSH
51668: LD_VAR 0 2
51672: PUSH
51673: LD_INT 4
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: LIST
51680: PUSH
51681: LD_VAR 0 1
51685: PUSH
51686: LD_INT 3
51688: PLUS
51689: PUSH
51690: LD_VAR 0 2
51694: PUSH
51695: LD_INT 3
51697: PLUS
51698: PUSH
51699: LD_INT 5
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: PUSH
51707: LD_VAR 0 1
51711: PUSH
51712: LD_VAR 0 2
51716: PUSH
51717: LD_INT 4
51719: PLUS
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: LIST
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: ST_TO_ADDR
// end ; 1 :
51736: GO 52436
51738: LD_INT 1
51740: DOUBLE
51741: EQUAL
51742: IFTRUE 51746
51744: GO 51879
51746: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51747: LD_ADDR_VAR 0 5
51751: PUSH
51752: LD_VAR 0 1
51756: PUSH
51757: LD_VAR 0 2
51761: PUSH
51762: LD_INT 4
51764: MINUS
51765: PUSH
51766: LD_INT 3
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: LIST
51773: PUSH
51774: LD_VAR 0 1
51778: PUSH
51779: LD_INT 3
51781: MINUS
51782: PUSH
51783: LD_VAR 0 2
51787: PUSH
51788: LD_INT 3
51790: MINUS
51791: PUSH
51792: LD_INT 2
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: LIST
51799: PUSH
51800: LD_VAR 0 1
51804: PUSH
51805: LD_INT 4
51807: MINUS
51808: PUSH
51809: LD_VAR 0 2
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: LIST
51821: PUSH
51822: LD_VAR 0 1
51826: PUSH
51827: LD_VAR 0 2
51831: PUSH
51832: LD_INT 3
51834: PLUS
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: LIST
51843: PUSH
51844: LD_VAR 0 1
51848: PUSH
51849: LD_INT 4
51851: PLUS
51852: PUSH
51853: LD_VAR 0 2
51857: PUSH
51858: LD_INT 4
51860: PLUS
51861: PUSH
51862: LD_INT 5
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// end ; 2 :
51877: GO 52436
51879: LD_INT 2
51881: DOUBLE
51882: EQUAL
51883: IFTRUE 51887
51885: GO 52016
51887: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51888: LD_ADDR_VAR 0 5
51892: PUSH
51893: LD_VAR 0 1
51897: PUSH
51898: LD_VAR 0 2
51902: PUSH
51903: LD_INT 3
51905: MINUS
51906: PUSH
51907: LD_INT 3
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: LIST
51914: PUSH
51915: LD_VAR 0 1
51919: PUSH
51920: LD_INT 4
51922: PLUS
51923: PUSH
51924: LD_VAR 0 2
51928: PUSH
51929: LD_INT 4
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: LIST
51936: PUSH
51937: LD_VAR 0 1
51941: PUSH
51942: LD_VAR 0 2
51946: PUSH
51947: LD_INT 4
51949: PLUS
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: LIST
51958: PUSH
51959: LD_VAR 0 1
51963: PUSH
51964: LD_INT 3
51966: MINUS
51967: PUSH
51968: LD_VAR 0 2
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: LIST
51980: PUSH
51981: LD_VAR 0 1
51985: PUSH
51986: LD_INT 4
51988: MINUS
51989: PUSH
51990: LD_VAR 0 2
51994: PUSH
51995: LD_INT 4
51997: MINUS
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: LIST
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: ST_TO_ADDR
// end ; 3 :
52014: GO 52436
52016: LD_INT 3
52018: DOUBLE
52019: EQUAL
52020: IFTRUE 52024
52022: GO 52157
52024: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52025: LD_ADDR_VAR 0 5
52029: PUSH
52030: LD_VAR 0 1
52034: PUSH
52035: LD_INT 3
52037: PLUS
52038: PUSH
52039: LD_VAR 0 2
52043: PUSH
52044: LD_INT 4
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: LIST
52051: PUSH
52052: LD_VAR 0 1
52056: PUSH
52057: LD_INT 4
52059: PLUS
52060: PUSH
52061: LD_VAR 0 2
52065: PUSH
52066: LD_INT 4
52068: PLUS
52069: PUSH
52070: LD_INT 5
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: LIST
52077: PUSH
52078: LD_VAR 0 1
52082: PUSH
52083: LD_INT 4
52085: MINUS
52086: PUSH
52087: LD_VAR 0 2
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: LIST
52099: PUSH
52100: LD_VAR 0 1
52104: PUSH
52105: LD_VAR 0 2
52109: PUSH
52110: LD_INT 4
52112: MINUS
52113: PUSH
52114: LD_INT 3
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: LIST
52121: PUSH
52122: LD_VAR 0 1
52126: PUSH
52127: LD_INT 3
52129: MINUS
52130: PUSH
52131: LD_VAR 0 2
52135: PUSH
52136: LD_INT 3
52138: MINUS
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: LIST
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: ST_TO_ADDR
// end ; 4 :
52155: GO 52436
52157: LD_INT 4
52159: DOUBLE
52160: EQUAL
52161: IFTRUE 52165
52163: GO 52298
52165: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52166: LD_ADDR_VAR 0 5
52170: PUSH
52171: LD_VAR 0 1
52175: PUSH
52176: LD_VAR 0 2
52180: PUSH
52181: LD_INT 4
52183: PLUS
52184: PUSH
52185: LD_INT 0
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: LIST
52192: PUSH
52193: LD_VAR 0 1
52197: PUSH
52198: LD_INT 3
52200: PLUS
52201: PUSH
52202: LD_VAR 0 2
52206: PUSH
52207: LD_INT 3
52209: PLUS
52210: PUSH
52211: LD_INT 5
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: LIST
52218: PUSH
52219: LD_VAR 0 1
52223: PUSH
52224: LD_INT 4
52226: PLUS
52227: PUSH
52228: LD_VAR 0 2
52232: PUSH
52233: LD_INT 4
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: LIST
52240: PUSH
52241: LD_VAR 0 1
52245: PUSH
52246: LD_VAR 0 2
52250: PUSH
52251: LD_INT 3
52253: MINUS
52254: PUSH
52255: LD_INT 3
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: LIST
52262: PUSH
52263: LD_VAR 0 1
52267: PUSH
52268: LD_INT 4
52270: MINUS
52271: PUSH
52272: LD_VAR 0 2
52276: PUSH
52277: LD_INT 4
52279: MINUS
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: ST_TO_ADDR
// end ; 5 :
52296: GO 52436
52298: LD_INT 5
52300: DOUBLE
52301: EQUAL
52302: IFTRUE 52306
52304: GO 52435
52306: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52307: LD_ADDR_VAR 0 5
52311: PUSH
52312: LD_VAR 0 1
52316: PUSH
52317: LD_INT 4
52319: MINUS
52320: PUSH
52321: LD_VAR 0 2
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: PUSH
52334: LD_VAR 0 1
52338: PUSH
52339: LD_VAR 0 2
52343: PUSH
52344: LD_INT 4
52346: MINUS
52347: PUSH
52348: LD_INT 3
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: LIST
52355: PUSH
52356: LD_VAR 0 1
52360: PUSH
52361: LD_INT 4
52363: PLUS
52364: PUSH
52365: LD_VAR 0 2
52369: PUSH
52370: LD_INT 4
52372: PLUS
52373: PUSH
52374: LD_INT 5
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: LIST
52381: PUSH
52382: LD_VAR 0 1
52386: PUSH
52387: LD_INT 3
52389: PLUS
52390: PUSH
52391: LD_VAR 0 2
52395: PUSH
52396: LD_INT 4
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: PUSH
52404: LD_VAR 0 1
52408: PUSH
52409: LD_VAR 0 2
52413: PUSH
52414: LD_INT 3
52416: PLUS
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: ST_TO_ADDR
// end ; end ;
52433: GO 52436
52435: POP
// result := list ;
52436: LD_ADDR_VAR 0 4
52440: PUSH
52441: LD_VAR 0 5
52445: ST_TO_ADDR
// end ;
52446: LD_VAR 0 4
52450: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52451: LD_INT 0
52453: PPUSH
52454: PPUSH
52455: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52456: LD_VAR 0 1
52460: NOT
52461: PUSH
52462: LD_VAR 0 2
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 2
52472: PUSH
52473: LD_INT 3
52475: PUSH
52476: LD_INT 4
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: IN
52485: NOT
52486: OR
52487: IFFALSE 52491
// exit ;
52489: GO 52583
// tmp := [ ] ;
52491: LD_ADDR_VAR 0 5
52495: PUSH
52496: EMPTY
52497: ST_TO_ADDR
// for i in units do
52498: LD_ADDR_VAR 0 4
52502: PUSH
52503: LD_VAR 0 1
52507: PUSH
52508: FOR_IN
52509: IFFALSE 52552
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52511: LD_ADDR_VAR 0 5
52515: PUSH
52516: LD_VAR 0 5
52520: PPUSH
52521: LD_VAR 0 5
52525: PUSH
52526: LD_INT 1
52528: PLUS
52529: PPUSH
52530: LD_VAR 0 4
52534: PPUSH
52535: LD_VAR 0 2
52539: PPUSH
52540: CALL_OW 259
52544: PPUSH
52545: CALL_OW 2
52549: ST_TO_ADDR
52550: GO 52508
52552: POP
52553: POP
// if not tmp then
52554: LD_VAR 0 5
52558: NOT
52559: IFFALSE 52563
// exit ;
52561: GO 52583
// result := SortListByListDesc ( units , tmp ) ;
52563: LD_ADDR_VAR 0 3
52567: PUSH
52568: LD_VAR 0 1
52572: PPUSH
52573: LD_VAR 0 5
52577: PPUSH
52578: CALL_OW 77
52582: ST_TO_ADDR
// end ;
52583: LD_VAR 0 3
52587: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52588: LD_INT 0
52590: PPUSH
52591: PPUSH
52592: PPUSH
// x := GetX ( building ) ;
52593: LD_ADDR_VAR 0 4
52597: PUSH
52598: LD_VAR 0 2
52602: PPUSH
52603: CALL_OW 250
52607: ST_TO_ADDR
// y := GetY ( building ) ;
52608: LD_ADDR_VAR 0 5
52612: PUSH
52613: LD_VAR 0 2
52617: PPUSH
52618: CALL_OW 251
52622: ST_TO_ADDR
// if GetTaskList ( unit ) then
52623: LD_VAR 0 1
52627: PPUSH
52628: CALL_OW 437
52632: IFFALSE 52727
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52634: LD_STRING e
52636: PUSH
52637: LD_VAR 0 1
52641: PPUSH
52642: CALL_OW 437
52646: PUSH
52647: LD_INT 1
52649: ARRAY
52650: PUSH
52651: LD_INT 1
52653: ARRAY
52654: EQUAL
52655: PUSH
52656: LD_VAR 0 4
52660: PUSH
52661: LD_VAR 0 1
52665: PPUSH
52666: CALL_OW 437
52670: PUSH
52671: LD_INT 1
52673: ARRAY
52674: PUSH
52675: LD_INT 2
52677: ARRAY
52678: EQUAL
52679: AND
52680: PUSH
52681: LD_VAR 0 5
52685: PUSH
52686: LD_VAR 0 1
52690: PPUSH
52691: CALL_OW 437
52695: PUSH
52696: LD_INT 1
52698: ARRAY
52699: PUSH
52700: LD_INT 3
52702: ARRAY
52703: EQUAL
52704: AND
52705: IFFALSE 52717
// result := true else
52707: LD_ADDR_VAR 0 3
52711: PUSH
52712: LD_INT 1
52714: ST_TO_ADDR
52715: GO 52725
// result := false ;
52717: LD_ADDR_VAR 0 3
52721: PUSH
52722: LD_INT 0
52724: ST_TO_ADDR
// end else
52725: GO 52735
// result := false ;
52727: LD_ADDR_VAR 0 3
52731: PUSH
52732: LD_INT 0
52734: ST_TO_ADDR
// end ;
52735: LD_VAR 0 3
52739: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52740: LD_INT 0
52742: PPUSH
52743: PPUSH
52744: PPUSH
52745: PPUSH
// if not unit or not area then
52746: LD_VAR 0 1
52750: NOT
52751: PUSH
52752: LD_VAR 0 2
52756: NOT
52757: OR
52758: IFFALSE 52762
// exit ;
52760: GO 52926
// tmp := AreaToList ( area , i ) ;
52762: LD_ADDR_VAR 0 6
52766: PUSH
52767: LD_VAR 0 2
52771: PPUSH
52772: LD_VAR 0 5
52776: PPUSH
52777: CALL_OW 517
52781: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52782: LD_ADDR_VAR 0 5
52786: PUSH
52787: DOUBLE
52788: LD_INT 1
52790: DEC
52791: ST_TO_ADDR
52792: LD_VAR 0 6
52796: PUSH
52797: LD_INT 1
52799: ARRAY
52800: PUSH
52801: FOR_TO
52802: IFFALSE 52924
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52804: LD_ADDR_VAR 0 7
52808: PUSH
52809: LD_VAR 0 6
52813: PUSH
52814: LD_INT 1
52816: ARRAY
52817: PUSH
52818: LD_VAR 0 5
52822: ARRAY
52823: PUSH
52824: LD_VAR 0 6
52828: PUSH
52829: LD_INT 2
52831: ARRAY
52832: PUSH
52833: LD_VAR 0 5
52837: ARRAY
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52843: LD_VAR 0 7
52847: PUSH
52848: LD_INT 1
52850: ARRAY
52851: PPUSH
52852: LD_VAR 0 7
52856: PUSH
52857: LD_INT 2
52859: ARRAY
52860: PPUSH
52861: CALL_OW 428
52865: PUSH
52866: LD_INT 0
52868: EQUAL
52869: IFFALSE 52922
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52871: LD_VAR 0 1
52875: PPUSH
52876: LD_VAR 0 7
52880: PUSH
52881: LD_INT 1
52883: ARRAY
52884: PPUSH
52885: LD_VAR 0 7
52889: PUSH
52890: LD_INT 2
52892: ARRAY
52893: PPUSH
52894: LD_VAR 0 3
52898: PPUSH
52899: CALL_OW 48
// result := IsPlaced ( unit ) ;
52903: LD_ADDR_VAR 0 4
52907: PUSH
52908: LD_VAR 0 1
52912: PPUSH
52913: CALL_OW 305
52917: ST_TO_ADDR
// exit ;
52918: POP
52919: POP
52920: GO 52926
// end ; end ;
52922: GO 52801
52924: POP
52925: POP
// end ;
52926: LD_VAR 0 4
52930: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52931: LD_INT 0
52933: PPUSH
52934: PPUSH
52935: PPUSH
// if not side or side > 8 then
52936: LD_VAR 0 1
52940: NOT
52941: PUSH
52942: LD_VAR 0 1
52946: PUSH
52947: LD_INT 8
52949: GREATER
52950: OR
52951: IFFALSE 52955
// exit ;
52953: GO 53142
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52955: LD_ADDR_VAR 0 4
52959: PUSH
52960: LD_INT 22
52962: PUSH
52963: LD_VAR 0 1
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 21
52974: PUSH
52975: LD_INT 3
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PPUSH
52986: CALL_OW 69
52990: ST_TO_ADDR
// if not tmp then
52991: LD_VAR 0 4
52995: NOT
52996: IFFALSE 53000
// exit ;
52998: GO 53142
// enable_addtolog := true ;
53000: LD_ADDR_OWVAR 81
53004: PUSH
53005: LD_INT 1
53007: ST_TO_ADDR
// AddToLog ( [ ) ;
53008: LD_STRING [
53010: PPUSH
53011: CALL_OW 561
// for i in tmp do
53015: LD_ADDR_VAR 0 3
53019: PUSH
53020: LD_VAR 0 4
53024: PUSH
53025: FOR_IN
53026: IFFALSE 53133
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53028: LD_STRING [
53030: PUSH
53031: LD_VAR 0 3
53035: PPUSH
53036: CALL_OW 266
53040: STR
53041: PUSH
53042: LD_STRING , 
53044: STR
53045: PUSH
53046: LD_VAR 0 3
53050: PPUSH
53051: CALL_OW 250
53055: STR
53056: PUSH
53057: LD_STRING , 
53059: STR
53060: PUSH
53061: LD_VAR 0 3
53065: PPUSH
53066: CALL_OW 251
53070: STR
53071: PUSH
53072: LD_STRING , 
53074: STR
53075: PUSH
53076: LD_VAR 0 3
53080: PPUSH
53081: CALL_OW 254
53085: STR
53086: PUSH
53087: LD_STRING , 
53089: STR
53090: PUSH
53091: LD_VAR 0 3
53095: PPUSH
53096: LD_INT 1
53098: PPUSH
53099: CALL_OW 268
53103: STR
53104: PUSH
53105: LD_STRING , 
53107: STR
53108: PUSH
53109: LD_VAR 0 3
53113: PPUSH
53114: LD_INT 2
53116: PPUSH
53117: CALL_OW 268
53121: STR
53122: PUSH
53123: LD_STRING ],
53125: STR
53126: PPUSH
53127: CALL_OW 561
// end ;
53131: GO 53025
53133: POP
53134: POP
// AddToLog ( ]; ) ;
53135: LD_STRING ];
53137: PPUSH
53138: CALL_OW 561
// end ;
53142: LD_VAR 0 2
53146: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53147: LD_INT 0
53149: PPUSH
53150: PPUSH
53151: PPUSH
53152: PPUSH
53153: PPUSH
// if not area or not rate or not max then
53154: LD_VAR 0 1
53158: NOT
53159: PUSH
53160: LD_VAR 0 2
53164: NOT
53165: OR
53166: PUSH
53167: LD_VAR 0 4
53171: NOT
53172: OR
53173: IFFALSE 53177
// exit ;
53175: GO 53369
// while 1 do
53177: LD_INT 1
53179: IFFALSE 53369
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53181: LD_ADDR_VAR 0 9
53185: PUSH
53186: LD_VAR 0 1
53190: PPUSH
53191: LD_INT 1
53193: PPUSH
53194: CALL_OW 287
53198: PUSH
53199: LD_INT 10
53201: MUL
53202: ST_TO_ADDR
// r := rate / 10 ;
53203: LD_ADDR_VAR 0 7
53207: PUSH
53208: LD_VAR 0 2
53212: PUSH
53213: LD_INT 10
53215: DIVREAL
53216: ST_TO_ADDR
// time := 1 1$00 ;
53217: LD_ADDR_VAR 0 8
53221: PUSH
53222: LD_INT 2100
53224: ST_TO_ADDR
// if amount < min then
53225: LD_VAR 0 9
53229: PUSH
53230: LD_VAR 0 3
53234: LESS
53235: IFFALSE 53253
// r := r * 2 else
53237: LD_ADDR_VAR 0 7
53241: PUSH
53242: LD_VAR 0 7
53246: PUSH
53247: LD_INT 2
53249: MUL
53250: ST_TO_ADDR
53251: GO 53279
// if amount > max then
53253: LD_VAR 0 9
53257: PUSH
53258: LD_VAR 0 4
53262: GREATER
53263: IFFALSE 53279
// r := r / 2 ;
53265: LD_ADDR_VAR 0 7
53269: PUSH
53270: LD_VAR 0 7
53274: PUSH
53275: LD_INT 2
53277: DIVREAL
53278: ST_TO_ADDR
// time := time / r ;
53279: LD_ADDR_VAR 0 8
53283: PUSH
53284: LD_VAR 0 8
53288: PUSH
53289: LD_VAR 0 7
53293: DIVREAL
53294: ST_TO_ADDR
// if time < 0 then
53295: LD_VAR 0 8
53299: PUSH
53300: LD_INT 0
53302: LESS
53303: IFFALSE 53320
// time := time * - 1 ;
53305: LD_ADDR_VAR 0 8
53309: PUSH
53310: LD_VAR 0 8
53314: PUSH
53315: LD_INT 1
53317: NEG
53318: MUL
53319: ST_TO_ADDR
// wait ( time ) ;
53320: LD_VAR 0 8
53324: PPUSH
53325: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
53329: LD_INT 35
53331: PPUSH
53332: LD_INT 875
53334: PPUSH
53335: CALL_OW 12
53339: PPUSH
53340: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53344: LD_INT 1
53346: PPUSH
53347: LD_INT 5
53349: PPUSH
53350: CALL_OW 12
53354: PPUSH
53355: LD_VAR 0 1
53359: PPUSH
53360: LD_INT 1
53362: PPUSH
53363: CALL_OW 55
// end ;
53367: GO 53177
// end ;
53369: LD_VAR 0 5
53373: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53374: LD_INT 0
53376: PPUSH
53377: PPUSH
53378: PPUSH
53379: PPUSH
53380: PPUSH
53381: PPUSH
53382: PPUSH
53383: PPUSH
// if not turrets or not factories then
53384: LD_VAR 0 1
53388: NOT
53389: PUSH
53390: LD_VAR 0 2
53394: NOT
53395: OR
53396: IFFALSE 53400
// exit ;
53398: GO 53707
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53400: LD_ADDR_VAR 0 10
53404: PUSH
53405: LD_INT 5
53407: PUSH
53408: LD_INT 6
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: LD_INT 4
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: LD_INT 5
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 24
53442: PUSH
53443: LD_INT 25
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 23
53452: PUSH
53453: LD_INT 27
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 42
53466: PUSH
53467: LD_INT 43
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 44
53476: PUSH
53477: LD_INT 46
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 45
53486: PUSH
53487: LD_INT 47
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: LIST
53503: ST_TO_ADDR
// result := [ ] ;
53504: LD_ADDR_VAR 0 3
53508: PUSH
53509: EMPTY
53510: ST_TO_ADDR
// for i in turrets do
53511: LD_ADDR_VAR 0 4
53515: PUSH
53516: LD_VAR 0 1
53520: PUSH
53521: FOR_IN
53522: IFFALSE 53705
// begin nat := GetNation ( i ) ;
53524: LD_ADDR_VAR 0 7
53528: PUSH
53529: LD_VAR 0 4
53533: PPUSH
53534: CALL_OW 248
53538: ST_TO_ADDR
// weapon := 0 ;
53539: LD_ADDR_VAR 0 8
53543: PUSH
53544: LD_INT 0
53546: ST_TO_ADDR
// if not nat then
53547: LD_VAR 0 7
53551: NOT
53552: IFFALSE 53556
// continue ;
53554: GO 53521
// for j in list [ nat ] do
53556: LD_ADDR_VAR 0 5
53560: PUSH
53561: LD_VAR 0 10
53565: PUSH
53566: LD_VAR 0 7
53570: ARRAY
53571: PUSH
53572: FOR_IN
53573: IFFALSE 53614
// if GetBWeapon ( i ) = j [ 1 ] then
53575: LD_VAR 0 4
53579: PPUSH
53580: CALL_OW 269
53584: PUSH
53585: LD_VAR 0 5
53589: PUSH
53590: LD_INT 1
53592: ARRAY
53593: EQUAL
53594: IFFALSE 53612
// begin weapon := j [ 2 ] ;
53596: LD_ADDR_VAR 0 8
53600: PUSH
53601: LD_VAR 0 5
53605: PUSH
53606: LD_INT 2
53608: ARRAY
53609: ST_TO_ADDR
// break ;
53610: GO 53614
// end ;
53612: GO 53572
53614: POP
53615: POP
// if not weapon then
53616: LD_VAR 0 8
53620: NOT
53621: IFFALSE 53625
// continue ;
53623: GO 53521
// for k in factories do
53625: LD_ADDR_VAR 0 6
53629: PUSH
53630: LD_VAR 0 2
53634: PUSH
53635: FOR_IN
53636: IFFALSE 53701
// begin weapons := AvailableWeaponList ( k ) ;
53638: LD_ADDR_VAR 0 9
53642: PUSH
53643: LD_VAR 0 6
53647: PPUSH
53648: CALL_OW 478
53652: ST_TO_ADDR
// if not weapons then
53653: LD_VAR 0 9
53657: NOT
53658: IFFALSE 53662
// continue ;
53660: GO 53635
// if weapon in weapons then
53662: LD_VAR 0 8
53666: PUSH
53667: LD_VAR 0 9
53671: IN
53672: IFFALSE 53699
// begin result := [ i , weapon ] ;
53674: LD_ADDR_VAR 0 3
53678: PUSH
53679: LD_VAR 0 4
53683: PUSH
53684: LD_VAR 0 8
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: ST_TO_ADDR
// exit ;
53693: POP
53694: POP
53695: POP
53696: POP
53697: GO 53707
// end ; end ;
53699: GO 53635
53701: POP
53702: POP
// end ;
53703: GO 53521
53705: POP
53706: POP
// end ;
53707: LD_VAR 0 3
53711: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53712: LD_INT 0
53714: PPUSH
// if not side or side > 8 then
53715: LD_VAR 0 3
53719: NOT
53720: PUSH
53721: LD_VAR 0 3
53725: PUSH
53726: LD_INT 8
53728: GREATER
53729: OR
53730: IFFALSE 53734
// exit ;
53732: GO 53793
// if not range then
53734: LD_VAR 0 4
53738: NOT
53739: IFFALSE 53750
// range := - 12 ;
53741: LD_ADDR_VAR 0 4
53745: PUSH
53746: LD_INT 12
53748: NEG
53749: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53750: LD_VAR 0 1
53754: PPUSH
53755: LD_VAR 0 2
53759: PPUSH
53760: LD_VAR 0 3
53764: PPUSH
53765: LD_VAR 0 4
53769: PPUSH
53770: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53774: LD_VAR 0 1
53778: PPUSH
53779: LD_VAR 0 2
53783: PPUSH
53784: LD_VAR 0 3
53788: PPUSH
53789: CALL_OW 331
// end ;
53793: LD_VAR 0 5
53797: RET
// export function Video ( mode ) ; begin
53798: LD_INT 0
53800: PPUSH
// ingame_video = mode ;
53801: LD_ADDR_OWVAR 52
53805: PUSH
53806: LD_VAR 0 1
53810: ST_TO_ADDR
// interface_hidden = mode ;
53811: LD_ADDR_OWVAR 54
53815: PUSH
53816: LD_VAR 0 1
53820: ST_TO_ADDR
// end ;
53821: LD_VAR 0 2
53825: RET
// export function Join ( array , element ) ; begin
53826: LD_INT 0
53828: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53829: LD_ADDR_VAR 0 3
53833: PUSH
53834: LD_VAR 0 1
53838: PPUSH
53839: LD_VAR 0 1
53843: PUSH
53844: LD_INT 1
53846: PLUS
53847: PPUSH
53848: LD_VAR 0 2
53852: PPUSH
53853: CALL_OW 1
53857: ST_TO_ADDR
// end ;
53858: LD_VAR 0 3
53862: RET
// export function JoinUnion ( array , element ) ; begin
53863: LD_INT 0
53865: PPUSH
// result := array union element ;
53866: LD_ADDR_VAR 0 3
53870: PUSH
53871: LD_VAR 0 1
53875: PUSH
53876: LD_VAR 0 2
53880: UNION
53881: ST_TO_ADDR
// end ;
53882: LD_VAR 0 3
53886: RET
// export function GetBehemoths ( side ) ; begin
53887: LD_INT 0
53889: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53890: LD_ADDR_VAR 0 2
53894: PUSH
53895: LD_INT 22
53897: PUSH
53898: LD_VAR 0 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 31
53909: PUSH
53910: LD_INT 25
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PPUSH
53921: CALL_OW 69
53925: ST_TO_ADDR
// end ;
53926: LD_VAR 0 2
53930: RET
// export function Shuffle ( array ) ; var i , index ; begin
53931: LD_INT 0
53933: PPUSH
53934: PPUSH
53935: PPUSH
// result := [ ] ;
53936: LD_ADDR_VAR 0 2
53940: PUSH
53941: EMPTY
53942: ST_TO_ADDR
// if not array then
53943: LD_VAR 0 1
53947: NOT
53948: IFFALSE 53952
// exit ;
53950: GO 54051
// Randomize ;
53952: CALL_OW 10
// for i = array downto 1 do
53956: LD_ADDR_VAR 0 3
53960: PUSH
53961: DOUBLE
53962: LD_VAR 0 1
53966: INC
53967: ST_TO_ADDR
53968: LD_INT 1
53970: PUSH
53971: FOR_DOWNTO
53972: IFFALSE 54049
// begin index := rand ( 1 , array ) ;
53974: LD_ADDR_VAR 0 4
53978: PUSH
53979: LD_INT 1
53981: PPUSH
53982: LD_VAR 0 1
53986: PPUSH
53987: CALL_OW 12
53991: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53992: LD_ADDR_VAR 0 2
53996: PUSH
53997: LD_VAR 0 2
54001: PPUSH
54002: LD_VAR 0 2
54006: PUSH
54007: LD_INT 1
54009: PLUS
54010: PPUSH
54011: LD_VAR 0 1
54015: PUSH
54016: LD_VAR 0 4
54020: ARRAY
54021: PPUSH
54022: CALL_OW 2
54026: ST_TO_ADDR
// array := Delete ( array , index ) ;
54027: LD_ADDR_VAR 0 1
54031: PUSH
54032: LD_VAR 0 1
54036: PPUSH
54037: LD_VAR 0 4
54041: PPUSH
54042: CALL_OW 3
54046: ST_TO_ADDR
// end ;
54047: GO 53971
54049: POP
54050: POP
// end ;
54051: LD_VAR 0 2
54055: RET
// export function GetBaseMaterials ( base ) ; begin
54056: LD_INT 0
54058: PPUSH
// result := [ 0 , 0 , 0 ] ;
54059: LD_ADDR_VAR 0 2
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: LIST
54077: ST_TO_ADDR
// if not base then
54078: LD_VAR 0 1
54082: NOT
54083: IFFALSE 54087
// exit ;
54085: GO 54136
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54087: LD_ADDR_VAR 0 2
54091: PUSH
54092: LD_VAR 0 1
54096: PPUSH
54097: LD_INT 1
54099: PPUSH
54100: CALL_OW 275
54104: PUSH
54105: LD_VAR 0 1
54109: PPUSH
54110: LD_INT 2
54112: PPUSH
54113: CALL_OW 275
54117: PUSH
54118: LD_VAR 0 1
54122: PPUSH
54123: LD_INT 3
54125: PPUSH
54126: CALL_OW 275
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: LIST
54135: ST_TO_ADDR
// end ;
54136: LD_VAR 0 2
54140: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54141: LD_INT 0
54143: PPUSH
54144: PPUSH
// result := array ;
54145: LD_ADDR_VAR 0 3
54149: PUSH
54150: LD_VAR 0 1
54154: ST_TO_ADDR
// if size > 0 then
54155: LD_VAR 0 2
54159: PUSH
54160: LD_INT 0
54162: GREATER
54163: IFFALSE 54209
// for i := array downto size do
54165: LD_ADDR_VAR 0 4
54169: PUSH
54170: DOUBLE
54171: LD_VAR 0 1
54175: INC
54176: ST_TO_ADDR
54177: LD_VAR 0 2
54181: PUSH
54182: FOR_DOWNTO
54183: IFFALSE 54207
// result := Delete ( result , result ) ;
54185: LD_ADDR_VAR 0 3
54189: PUSH
54190: LD_VAR 0 3
54194: PPUSH
54195: LD_VAR 0 3
54199: PPUSH
54200: CALL_OW 3
54204: ST_TO_ADDR
54205: GO 54182
54207: POP
54208: POP
// end ;
54209: LD_VAR 0 3
54213: RET
// export function ComExit ( unit ) ; var tmp ; begin
54214: LD_INT 0
54216: PPUSH
54217: PPUSH
// if not IsInUnit ( unit ) then
54218: LD_VAR 0 1
54222: PPUSH
54223: CALL_OW 310
54227: NOT
54228: IFFALSE 54232
// exit ;
54230: GO 54292
// tmp := IsInUnit ( unit ) ;
54232: LD_ADDR_VAR 0 3
54236: PUSH
54237: LD_VAR 0 1
54241: PPUSH
54242: CALL_OW 310
54246: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54247: LD_VAR 0 3
54251: PPUSH
54252: CALL_OW 247
54256: PUSH
54257: LD_INT 2
54259: EQUAL
54260: IFFALSE 54273
// ComExitVehicle ( unit ) else
54262: LD_VAR 0 1
54266: PPUSH
54267: CALL_OW 121
54271: GO 54282
// ComExitBuilding ( unit ) ;
54273: LD_VAR 0 1
54277: PPUSH
54278: CALL_OW 122
// result := tmp ;
54282: LD_ADDR_VAR 0 2
54286: PUSH
54287: LD_VAR 0 3
54291: ST_TO_ADDR
// end ;
54292: LD_VAR 0 2
54296: RET
// export function ResetHc ; begin
54297: LD_INT 0
54299: PPUSH
// InitHc ;
54300: CALL_OW 19
// hc_importance := 0 ;
54304: LD_ADDR_OWVAR 32
54308: PUSH
54309: LD_INT 0
54311: ST_TO_ADDR
// end ;
54312: LD_VAR 0 1
54316: RET
