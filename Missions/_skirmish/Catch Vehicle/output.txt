// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 947
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: IFFALSE 744
 738: PUSH
 739: LD_VAR 0 4
 743: AND
 744: IFFALSE 883
// for i = 1 to filter do
 746: LD_ADDR_VAR 0 1
 750: PUSH
 751: DOUBLE
 752: LD_INT 1
 754: DEC
 755: ST_TO_ADDR
 756: LD_VAR 0 2
 760: PUSH
 761: FOR_TO
 762: IFFALSE 881
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 764: LD_VAR 0 2
 768: PUSH
 769: LD_VAR 0 1
 773: ARRAY
 774: PPUSH
 775: CALL_OW 314
 779: NOT
 780: IFFALSE 799
 782: PUSH
 783: LD_VAR 0 2
 787: PUSH
 788: LD_VAR 0 1
 792: ARRAY
 793: PPUSH
 794: CALL_OW 302
 798: AND
 799: IFFALSE 879
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 801: LD_VAR 0 2
 805: PUSH
 806: LD_VAR 0 1
 810: ARRAY
 811: PPUSH
 812: LD_VAR 0 4
 816: PPUSH
 817: LD_VAR 0 2
 821: PUSH
 822: LD_VAR 0 1
 826: ARRAY
 827: PPUSH
 828: CALL_OW 74
 832: PPUSH
 833: CALL_OW 296
 837: PUSH
 838: LD_INT 45
 840: LESS
 841: IFFALSE 879
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 843: LD_VAR 0 2
 847: PUSH
 848: LD_VAR 0 1
 852: ARRAY
 853: PPUSH
 854: LD_VAR 0 4
 858: PPUSH
 859: LD_VAR 0 2
 863: PUSH
 864: LD_VAR 0 1
 868: ARRAY
 869: PPUSH
 870: CALL_OW 74
 874: PPUSH
 875: CALL_OW 120
 879: GO 761
 881: POP
 882: POP
// if filter2 then
 883: LD_VAR 0 3
 887: IFFALSE 947
// for i = 1 to filter2 do
 889: LD_ADDR_VAR 0 1
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_VAR 0 3
 903: PUSH
 904: FOR_TO
 905: IFFALSE 945
// if not HasTask ( filter2 [ i ] ) then
 907: LD_VAR 0 3
 911: PUSH
 912: LD_VAR 0 1
 916: ARRAY
 917: PPUSH
 918: CALL_OW 314
 922: NOT
 923: IFFALSE 943
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 925: LD_VAR 0 3
 929: PUSH
 930: LD_VAR 0 1
 934: ARRAY
 935: PPUSH
 936: LD_INT 4
 938: PPUSH
 939: CALL_OW 113
 943: GO 904
 945: POP
 946: POP
// end ; end_of_file
 947: PPOPN 4
 949: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 950: LD_INT 0
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
 961: PPUSH
 962: PPUSH
 963: PPUSH
 964: PPUSH
// uc_side := 0 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 3
 983: PPUSH
 984: CALL_OW 12
 988: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 989: LD_ADDR_VAR 0 7
 993: PUSH
 994: LD_INT 11
 996: PUSH
 997: LD_INT 12
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 14
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1012: LD_ADDR_VAR 0 8
1016: PUSH
1017: LD_INT 21
1019: PUSH
1020: LD_INT 22
1022: PUSH
1023: LD_INT 23
1025: PUSH
1026: LD_INT 24
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1035: LD_ADDR_VAR 0 9
1039: PUSH
1040: LD_INT 1
1042: PUSH
1043: LD_INT 2
1045: PUSH
1046: LD_INT 3
1048: PUSH
1049: LD_INT 4
1051: PUSH
1052: LD_INT 5
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: ST_TO_ADDR
// if chas > 0 then
1062: LD_VAR 0 1
1066: PUSH
1067: LD_INT 0
1069: GREATER
1070: IFFALSE 1084
// vc_chassis := chas else
1072: LD_ADDR_OWVAR 37
1076: PUSH
1077: LD_VAR 0 1
1081: ST_TO_ADDR
1082: GO 1177
// begin case uc_nation of 1 :
1084: LD_OWVAR 21
1088: PUSH
1089: LD_INT 1
1091: DOUBLE
1092: EQUAL
1093: IFTRUE 1097
1095: GO 1110
1097: POP
// chassis := us_chassis ; 2 :
1098: LD_ADDR_VAR 0 13
1102: PUSH
1103: LD_VAR 0 9
1107: ST_TO_ADDR
1108: GO 1153
1110: LD_INT 2
1112: DOUBLE
1113: EQUAL
1114: IFTRUE 1118
1116: GO 1131
1118: POP
// chassis := ar_chassis ; 3 :
1119: LD_ADDR_VAR 0 13
1123: PUSH
1124: LD_VAR 0 7
1128: ST_TO_ADDR
1129: GO 1153
1131: LD_INT 3
1133: DOUBLE
1134: EQUAL
1135: IFTRUE 1139
1137: GO 1152
1139: POP
// chassis := ru_chassis ; end ;
1140: LD_ADDR_VAR 0 13
1144: PUSH
1145: LD_VAR 0 8
1149: ST_TO_ADDR
1150: GO 1153
1152: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1153: LD_ADDR_OWVAR 37
1157: PUSH
1158: LD_VAR 0 13
1162: PUSH
1163: LD_INT 1
1165: PPUSH
1166: LD_VAR 0 13
1170: PPUSH
1171: CALL_OW 12
1175: ARRAY
1176: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1177: LD_OWVAR 37
1181: PUSH
1182: LD_INT 11
1184: PUSH
1185: LD_INT 12
1187: PUSH
1188: LD_INT 1
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: IN
1196: IFFALSE 1216
// engine := Rand ( 1 , 2 ) else
1198: LD_ADDR_VAR 0 14
1202: PUSH
1203: LD_INT 1
1205: PPUSH
1206: LD_INT 2
1208: PPUSH
1209: CALL_OW 12
1213: ST_TO_ADDR
1214: GO 1328
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1216: LD_OWVAR 37
1220: PUSH
1221: LD_INT 21
1223: PUSH
1224: LD_INT 22
1226: PUSH
1227: LD_INT 23
1229: PUSH
1230: LD_INT 24
1232: PUSH
1233: LD_INT 4
1235: PUSH
1236: LD_INT 5
1238: PUSH
1239: EMPTY
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: IN
1247: NOT
1248: IFFALSE 1268
// engine := Rand ( 1 , 3 ) else
1250: LD_ADDR_VAR 0 14
1254: PUSH
1255: LD_INT 1
1257: PPUSH
1258: LD_INT 3
1260: PPUSH
1261: CALL_OW 12
1265: ST_TO_ADDR
1266: GO 1284
// e := Rand ( 1 , 2 ) ;
1268: LD_ADDR_VAR 0 5
1272: PUSH
1273: LD_INT 1
1275: PPUSH
1276: LD_INT 2
1278: PPUSH
1279: CALL_OW 12
1283: ST_TO_ADDR
// case e of 1 :
1284: LD_VAR 0 5
1288: PUSH
1289: LD_INT 1
1291: DOUBLE
1292: EQUAL
1293: IFTRUE 1297
1295: GO 1308
1297: POP
// engine := engine_combustion ; 2 :
1298: LD_ADDR_VAR 0 14
1302: PUSH
1303: LD_INT 1
1305: ST_TO_ADDR
1306: GO 1328
1308: LD_INT 2
1310: DOUBLE
1311: EQUAL
1312: IFTRUE 1316
1314: GO 1327
1316: POP
// engine := engine_siberite ; end ;
1317: LD_ADDR_VAR 0 14
1321: PUSH
1322: LD_INT 3
1324: ST_TO_ADDR
1325: GO 1328
1327: POP
// end ; vc_engine := engine ;
1328: LD_ADDR_OWVAR 39
1332: PUSH
1333: LD_VAR 0 14
1337: ST_TO_ADDR
// vc_control := control_manual ;
1338: LD_ADDR_OWVAR 38
1342: PUSH
1343: LD_INT 1
1345: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1346: LD_ADDR_VAR 0 10
1350: PUSH
1351: LD_INT 22
1353: PUSH
1354: LD_INT 24
1356: PUSH
1357: LD_INT 23
1359: PUSH
1360: LD_INT 30
1362: PUSH
1363: LD_INT 25
1365: PUSH
1366: LD_INT 27
1368: PUSH
1369: LD_INT 28
1371: PUSH
1372: LD_INT 29
1374: PUSH
1375: LD_INT 26
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1389: LD_ADDR_VAR 0 11
1393: PUSH
1394: LD_INT 42
1396: PUSH
1397: LD_INT 43
1399: PUSH
1400: LD_INT 44
1402: PUSH
1403: LD_INT 98
1405: PUSH
1406: LD_INT 45
1408: PUSH
1409: LD_INT 46
1411: PUSH
1412: LD_INT 47
1414: PUSH
1415: LD_INT 53
1417: PUSH
1418: LD_INT 49
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1432: LD_ADDR_VAR 0 12
1436: PUSH
1437: LD_INT 2
1439: PUSH
1440: LD_INT 3
1442: PUSH
1443: LD_INT 11
1445: PUSH
1446: LD_INT 4
1448: PUSH
1449: LD_INT 5
1451: PUSH
1452: LD_INT 7
1454: PUSH
1455: LD_INT 9
1457: PUSH
1458: LD_INT 6
1460: PUSH
1461: LD_INT 14
1463: PUSH
1464: LD_INT 10
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: ST_TO_ADDR
// if uc_nation = nation_arabian then
1479: LD_OWVAR 21
1483: PUSH
1484: LD_INT 2
1486: EQUAL
1487: IFFALSE 1554
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1489: LD_OWVAR 37
1493: PUSH
1494: LD_INT 11
1496: PUSH
1497: LD_INT 12
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: IN
1504: IFFALSE 1530
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1506: LD_ADDR_VAR 0 15
1510: PUSH
1511: LD_VAR 0 10
1515: PUSH
1516: LD_INT 1
1518: PPUSH
1519: LD_INT 3
1521: PPUSH
1522: CALL_OW 12
1526: ARRAY
1527: ST_TO_ADDR
1528: GO 1554
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1530: LD_ADDR_VAR 0 15
1534: PUSH
1535: LD_VAR 0 10
1539: PUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_VAR 0 10
1547: PPUSH
1548: CALL_OW 12
1552: ARRAY
1553: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1554: LD_OWVAR 21
1558: PUSH
1559: LD_INT 3
1561: EQUAL
1562: IFFALSE 1629
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1564: LD_OWVAR 37
1568: PUSH
1569: LD_INT 21
1571: PUSH
1572: LD_INT 22
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: IN
1579: IFFALSE 1605
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1581: LD_ADDR_VAR 0 15
1585: PUSH
1586: LD_VAR 0 11
1590: PUSH
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 5
1596: PPUSH
1597: CALL_OW 12
1601: ARRAY
1602: ST_TO_ADDR
1603: GO 1629
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1605: LD_ADDR_VAR 0 15
1609: PUSH
1610: LD_VAR 0 11
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_VAR 0 11
1622: PPUSH
1623: CALL_OW 12
1627: ARRAY
1628: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1629: LD_OWVAR 21
1633: PUSH
1634: LD_INT 1
1636: EQUAL
1637: IFFALSE 1746
// begin if vc_chassis = us_light_wheeled then
1639: LD_OWVAR 37
1643: PUSH
1644: LD_INT 1
1646: EQUAL
1647: IFFALSE 1671
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1649: LD_ADDR_VAR 0 15
1653: PUSH
1654: LD_VAR 0 12
1658: PUSH
1659: LD_INT 1
1661: PPUSH
1662: LD_INT 3
1664: PPUSH
1665: CALL_OW 12
1669: ARRAY
1670: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1671: LD_OWVAR 37
1675: PUSH
1676: LD_INT 3
1678: PUSH
1679: LD_INT 2
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: IN
1686: IFFALSE 1712
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1688: LD_ADDR_VAR 0 15
1692: PUSH
1693: LD_VAR 0 12
1697: PUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_INT 7
1703: PPUSH
1704: CALL_OW 12
1708: ARRAY
1709: ST_TO_ADDR
1710: GO 1746
// if vc_chassis <> us_light_wheeled then
1712: LD_OWVAR 37
1716: PUSH
1717: LD_INT 1
1719: NONEQUAL
1720: IFFALSE 1746
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1722: LD_ADDR_VAR 0 15
1726: PUSH
1727: LD_VAR 0 12
1731: PUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_VAR 0 12
1739: PPUSH
1740: CALL_OW 12
1744: ARRAY
1745: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1746: LD_ADDR_OWVAR 40
1750: PUSH
1751: LD_VAR 0 15
1755: ST_TO_ADDR
// veh := CreateVehicle ;
1756: LD_ADDR_VAR 0 6
1760: PUSH
1761: CALL_OW 45
1765: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1766: LD_VAR 0 6
1770: PPUSH
1771: LD_VAR 0 2
1775: PPUSH
1776: LD_INT 1
1778: PPUSH
1779: CALL_OW 49
// end ;
1783: LD_VAR 0 3
1787: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1788: LD_INT 0
1790: PPUSH
1791: PPUSH
1792: PPUSH
// uc_side := 0 ;
1793: LD_ADDR_OWVAR 20
1797: PUSH
1798: LD_INT 0
1800: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: LD_INT 1
1808: PPUSH
1809: LD_INT 2
1811: PPUSH
1812: CALL_OW 12
1816: ST_TO_ADDR
// case p of 1 :
1817: LD_VAR 0 4
1821: PUSH
1822: LD_INT 1
1824: DOUBLE
1825: EQUAL
1826: IFTRUE 1830
1828: GO 1873
1830: POP
// begin uc_nation := nation_american ;
1831: LD_ADDR_OWVAR 21
1835: PUSH
1836: LD_INT 1
1838: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1839: LD_ADDR_OWVAR 37
1843: PUSH
1844: LD_INT 4
1846: ST_TO_ADDR
// vc_engine := engine_siberite ;
1847: LD_ADDR_OWVAR 39
1851: PUSH
1852: LD_INT 3
1854: ST_TO_ADDR
// vc_control := control_manual ;
1855: LD_ADDR_OWVAR 38
1859: PUSH
1860: LD_INT 1
1862: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1863: LD_ADDR_OWVAR 40
1867: PUSH
1868: LD_INT 8
1870: ST_TO_ADDR
// end ; 2 :
1871: GO 1925
1873: LD_INT 2
1875: DOUBLE
1876: EQUAL
1877: IFTRUE 1881
1879: GO 1924
1881: POP
// begin uc_nation := nation_russian ;
1882: LD_ADDR_OWVAR 21
1886: PUSH
1887: LD_INT 3
1889: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1890: LD_ADDR_OWVAR 37
1894: PUSH
1895: LD_INT 24
1897: ST_TO_ADDR
// vc_engine := engine_siberite ;
1898: LD_ADDR_OWVAR 39
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_manual ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 1
1913: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1914: LD_ADDR_OWVAR 40
1918: PUSH
1919: LD_INT 48
1921: ST_TO_ADDR
// end ; end ;
1922: GO 1925
1924: POP
// veh := CreateVehicle ;
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: CALL_OW 45
1934: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1935: LD_VAR 0 3
1939: PPUSH
1940: LD_VAR 0 1
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: CALL_OW 49
// end ;
1952: LD_VAR 0 2
1956: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1957: LD_INT 0
1959: PPUSH
1960: PPUSH
// points := 0 ;
1961: LD_ADDR_VAR 0 3
1965: PUSH
1966: LD_INT 0
1968: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 265
1978: PUSH
1979: LD_INT 12
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: IN
1989: IFFALSE 2005
// points := points + 10 ;
1991: LD_ADDR_VAR 0 3
1995: PUSH
1996: LD_VAR 0 3
2000: PUSH
2001: LD_INT 10
2003: PLUS
2004: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2005: LD_VAR 0 1
2009: PPUSH
2010: CALL_OW 265
2014: PUSH
2015: LD_INT 13
2017: PUSH
2018: LD_INT 21
2020: PUSH
2021: LD_INT 2
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: IN
2029: IFFALSE 2045
// points := points + 15 ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: LD_VAR 0 3
2040: PUSH
2041: LD_INT 15
2043: PLUS
2044: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2045: LD_VAR 0 1
2049: PPUSH
2050: CALL_OW 265
2054: PUSH
2055: LD_INT 14
2057: PUSH
2058: LD_INT 22
2060: PUSH
2061: LD_INT 3
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: IN
2069: IFFALSE 2085
// points := points + 20 ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: LD_VAR 0 3
2080: PUSH
2081: LD_INT 20
2083: PLUS
2084: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2085: LD_VAR 0 1
2089: PPUSH
2090: CALL_OW 265
2094: PUSH
2095: LD_INT 23
2097: PUSH
2098: LD_INT 24
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: IN
2109: IFFALSE 2125
// points := points + 25 ;
2111: LD_ADDR_VAR 0 3
2115: PUSH
2116: LD_VAR 0 3
2120: PUSH
2121: LD_INT 25
2123: PLUS
2124: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2125: LD_VAR 0 1
2129: PPUSH
2130: CALL_OW 265
2134: PUSH
2135: LD_INT 11
2137: PUSH
2138: LD_INT 5
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: IN
2145: IFFALSE 2161
// points := points + 30 ;
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: LD_VAR 0 3
2156: PUSH
2157: LD_INT 30
2159: PLUS
2160: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2161: LD_VAR 0 1
2165: PPUSH
2166: CALL_OW 262
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: EMPTY
2175: LIST
2176: EQUAL
2177: IFFALSE 2193
// points := points + 5 ;
2179: LD_ADDR_VAR 0 3
2183: PUSH
2184: LD_VAR 0 3
2188: PUSH
2189: LD_INT 5
2191: PLUS
2192: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2193: LD_VAR 0 1
2197: PPUSH
2198: CALL_OW 262
2202: PUSH
2203: LD_INT 2
2205: PUSH
2206: EMPTY
2207: LIST
2208: EQUAL
2209: IFFALSE 2225
// points := points + 15 ;
2211: LD_ADDR_VAR 0 3
2215: PUSH
2216: LD_VAR 0 3
2220: PUSH
2221: LD_INT 15
2223: PLUS
2224: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2225: LD_VAR 0 1
2229: PPUSH
2230: CALL_OW 262
2234: PUSH
2235: LD_INT 3
2237: PUSH
2238: EMPTY
2239: LIST
2240: EQUAL
2241: IFFALSE 2257
// points := points + 25 ;
2243: LD_ADDR_VAR 0 3
2247: PUSH
2248: LD_VAR 0 3
2252: PUSH
2253: LD_INT 25
2255: PLUS
2256: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 264
2266: PUSH
2267: LD_INT 22
2269: PUSH
2270: LD_INT 24
2272: PUSH
2273: LD_INT 23
2275: PUSH
2276: LD_INT 42
2278: PUSH
2279: LD_INT 2
2281: PUSH
2282: LD_INT 3
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: IN
2293: IFFALSE 2309
// points := points + 5 ;
2295: LD_ADDR_VAR 0 3
2299: PUSH
2300: LD_VAR 0 3
2304: PUSH
2305: LD_INT 5
2307: PLUS
2308: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2309: LD_VAR 0 1
2313: PPUSH
2314: CALL_OW 264
2318: PUSH
2319: LD_INT 25
2321: PUSH
2322: LD_INT 27
2324: PUSH
2325: LD_INT 43
2327: PUSH
2328: LD_INT 44
2330: PUSH
2331: LD_INT 4
2333: PUSH
2334: LD_INT 5
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: IN
2345: IFFALSE 2361
// points := points + 10 ;
2347: LD_ADDR_VAR 0 3
2351: PUSH
2352: LD_VAR 0 3
2356: PUSH
2357: LD_INT 10
2359: PLUS
2360: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2361: LD_VAR 0 1
2365: PPUSH
2366: CALL_OW 264
2370: PUSH
2371: LD_INT 28
2373: PUSH
2374: LD_INT 45
2376: PUSH
2377: LD_INT 7
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: LIST
2384: IN
2385: IFFALSE 2401
// points := points + 20 ;
2387: LD_ADDR_VAR 0 3
2391: PUSH
2392: LD_VAR 0 3
2396: PUSH
2397: LD_INT 20
2399: PLUS
2400: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2401: LD_VAR 0 1
2405: PPUSH
2406: CALL_OW 264
2410: PUSH
2411: LD_INT 46
2413: PUSH
2414: LD_INT 6
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: IN
2421: IFFALSE 2437
// points := points + 25 ;
2423: LD_ADDR_VAR 0 3
2427: PUSH
2428: LD_VAR 0 3
2432: PUSH
2433: LD_INT 25
2435: PLUS
2436: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2437: LD_VAR 0 1
2441: PPUSH
2442: CALL_OW 264
2446: PUSH
2447: LD_INT 9
2449: PUSH
2450: LD_INT 11
2452: PUSH
2453: LD_INT 30
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: IN
2461: IFFALSE 2477
// points := points + 30 ;
2463: LD_ADDR_VAR 0 3
2467: PUSH
2468: LD_VAR 0 3
2472: PUSH
2473: LD_INT 30
2475: PLUS
2476: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2477: LD_VAR 0 1
2481: PPUSH
2482: CALL_OW 264
2486: PUSH
2487: LD_INT 29
2489: PUSH
2490: LD_INT 49
2492: PUSH
2493: LD_INT 47
2495: PUSH
2496: LD_INT 10
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: IN
2505: IFFALSE 2521
// points := points + 50 ;
2507: LD_ADDR_VAR 0 3
2511: PUSH
2512: LD_VAR 0 3
2516: PUSH
2517: LD_INT 50
2519: PLUS
2520: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2521: LD_VAR 0 1
2525: PPUSH
2526: CALL_OW 264
2530: PUSH
2531: LD_INT 48
2533: PUSH
2534: LD_INT 8
2536: PUSH
2537: EMPTY
2538: LIST
2539: LIST
2540: IN
2541: IFFALSE 2557
// points := points + 100 ;
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 100
2555: PLUS
2556: ST_TO_ADDR
// result := points ;
2557: LD_ADDR_VAR 0 2
2561: PUSH
2562: LD_VAR 0 3
2566: ST_TO_ADDR
// end ; end_of_file
2567: LD_VAR 0 2
2571: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2572: LD_EXP 5
2576: IFFALSE 3227
2578: GO 2580
2580: DISABLE
2581: LD_INT 0
2583: PPUSH
2584: PPUSH
2585: PPUSH
2586: PPUSH
2587: PPUSH
// begin enable ;
2588: ENABLE
// if tick < 36 then
2589: LD_OWVAR 1
2593: PUSH
2594: LD_INT 36
2596: LESS
2597: IFFALSE 2609
// SetAreaMapShow ( exit_area , 1 ) ;
2599: LD_INT 4
2601: PPUSH
2602: LD_INT 1
2604: PPUSH
2605: CALL_OW 424
// time := time - 0 0$01 ;
2609: LD_ADDR_EXP 5
2613: PUSH
2614: LD_EXP 5
2618: PUSH
2619: LD_INT 35
2621: MINUS
2622: ST_TO_ADDR
// if time = 0 0$00 then
2623: LD_EXP 5
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: IFFALSE 2700
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2633: LD_EXP 7
2637: PUSH
2638: LD_EXP 8
2642: GREATER
2643: IFFALSE 2657
2645: PUSH
2646: LD_EXP 7
2650: PUSH
2651: LD_EXP 9
2655: GREATER
2656: AND
2657: IFFALSE 2671
2659: PUSH
2660: LD_EXP 7
2664: PUSH
2665: LD_EXP 10
2669: GREATER
2670: AND
2671: IFFALSE 2685
2673: PUSH
2674: LD_EXP 7
2678: PUSH
2679: LD_EXP 11
2683: GREATER
2684: AND
2685: IFFALSE 2693
// YouWin else
2687: CALL_OW 103
2691: GO 2700
// YouLost (  ) ;
2693: LD_STRING 
2695: PPUSH
2696: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2700: LD_ADDR_VAR 0 1
2704: PUSH
2705: LD_INT 4
2707: PPUSH
2708: LD_INT 21
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PPUSH
2718: CALL_OW 70
2722: ST_TO_ADDR
// if filter then
2723: LD_VAR 0 1
2727: IFFALSE 3017
// for i = 1 to filter do
2729: LD_ADDR_VAR 0 2
2733: PUSH
2734: DOUBLE
2735: LD_INT 1
2737: DEC
2738: ST_TO_ADDR
2739: LD_VAR 0 1
2743: PUSH
2744: FOR_TO
2745: IFFALSE 3015
// begin side := GetSide ( filter [ i ] ) ;
2747: LD_ADDR_VAR 0 3
2751: PUSH
2752: LD_VAR 0 1
2756: PUSH
2757: LD_VAR 0 2
2761: ARRAY
2762: PPUSH
2763: CALL_OW 255
2767: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2768: LD_ADDR_VAR 0 4
2772: PUSH
2773: LD_VAR 0 1
2777: PUSH
2778: LD_VAR 0 2
2782: ARRAY
2783: PPUSH
2784: CALL_OW 311
2788: ST_TO_ADDR
// un := filter [ i ] ;
2789: LD_ADDR_VAR 0 5
2793: PUSH
2794: LD_VAR 0 1
2798: PUSH
2799: LD_VAR 0 2
2803: ARRAY
2804: ST_TO_ADDR
// if IsInUnit ( driver ) then
2805: LD_VAR 0 4
2809: PPUSH
2810: CALL_OW 310
2814: IFFALSE 2825
// ComExitVehicle ( driver ) ;
2816: LD_VAR 0 4
2820: PPUSH
2821: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2825: LD_INT 10
2827: PPUSH
2828: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2832: LD_VAR 0 1
2836: PUSH
2837: LD_VAR 0 2
2841: ARRAY
2842: PPUSH
2843: CALL_OW 64
// case side of 1 :
2847: LD_VAR 0 3
2851: PUSH
2852: LD_INT 1
2854: DOUBLE
2855: EQUAL
2856: IFTRUE 2860
2858: GO 2884
2860: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2861: LD_ADDR_EXP 7
2865: PUSH
2866: LD_EXP 7
2870: PUSH
2871: LD_VAR 0 5
2875: PPUSH
2876: CALL 1957 0 1
2880: PLUS
2881: ST_TO_ADDR
2882: GO 3013
2884: LD_INT 2
2886: DOUBLE
2887: EQUAL
2888: IFTRUE 2892
2890: GO 2916
2892: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2893: LD_ADDR_EXP 8
2897: PUSH
2898: LD_EXP 8
2902: PUSH
2903: LD_VAR 0 5
2907: PPUSH
2908: CALL 1957 0 1
2912: PLUS
2913: ST_TO_ADDR
2914: GO 3013
2916: LD_INT 3
2918: DOUBLE
2919: EQUAL
2920: IFTRUE 2924
2922: GO 2948
2924: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2925: LD_ADDR_EXP 9
2929: PUSH
2930: LD_EXP 9
2934: PUSH
2935: LD_VAR 0 5
2939: PPUSH
2940: CALL 1957 0 1
2944: PLUS
2945: ST_TO_ADDR
2946: GO 3013
2948: LD_INT 4
2950: DOUBLE
2951: EQUAL
2952: IFTRUE 2956
2954: GO 2980
2956: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2957: LD_ADDR_EXP 10
2961: PUSH
2962: LD_EXP 10
2966: PUSH
2967: LD_VAR 0 5
2971: PPUSH
2972: CALL 1957 0 1
2976: PLUS
2977: ST_TO_ADDR
2978: GO 3013
2980: LD_INT 5
2982: DOUBLE
2983: EQUAL
2984: IFTRUE 2988
2986: GO 3012
2988: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2989: LD_ADDR_EXP 11
2993: PUSH
2994: LD_EXP 11
2998: PUSH
2999: LD_VAR 0 5
3003: PPUSH
3004: CALL 1957 0 1
3008: PLUS
3009: ST_TO_ADDR
3010: GO 3013
3012: POP
// end ;
3013: GO 2744
3015: POP
3016: POP
// case players of 3 :
3017: LD_EXP 3
3021: PUSH
3022: LD_INT 3
3024: DOUBLE
3025: EQUAL
3026: IFTRUE 3030
3028: GO 3080
3030: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3031: LD_ADDR_OWVAR 47
3035: PUSH
3036: LD_STRING #tick
3038: PUSH
3039: LD_EXP 5
3043: PUSH
3044: LD_STRING #player1
3046: PUSH
3047: LD_EXP 7
3051: PUSH
3052: LD_STRING #player2
3054: PUSH
3055: LD_EXP 8
3059: PUSH
3060: LD_STRING #player3
3062: PUSH
3063: LD_EXP 9
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: ST_TO_ADDR
// end ; 4 :
3078: GO 3227
3080: LD_INT 4
3082: DOUBLE
3083: EQUAL
3084: IFTRUE 3088
3086: GO 3148
3088: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3089: LD_ADDR_OWVAR 47
3093: PUSH
3094: LD_STRING #tick
3096: PUSH
3097: LD_EXP 5
3101: PUSH
3102: LD_STRING #player1
3104: PUSH
3105: LD_EXP 7
3109: PUSH
3110: LD_STRING #player2
3112: PUSH
3113: LD_EXP 8
3117: PUSH
3118: LD_STRING #player3
3120: PUSH
3121: LD_EXP 9
3125: PUSH
3126: LD_STRING #player4
3128: PUSH
3129: LD_EXP 10
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: ST_TO_ADDR
// end ; 5 :
3146: GO 3227
3148: LD_INT 5
3150: DOUBLE
3151: EQUAL
3152: IFTRUE 3156
3154: GO 3226
3156: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3157: LD_ADDR_OWVAR 47
3161: PUSH
3162: LD_STRING #tick
3164: PUSH
3165: LD_EXP 5
3169: PUSH
3170: LD_STRING #player1
3172: PUSH
3173: LD_EXP 7
3177: PUSH
3178: LD_STRING #player2
3180: PUSH
3181: LD_EXP 8
3185: PUSH
3186: LD_STRING #player3
3188: PUSH
3189: LD_EXP 9
3193: PUSH
3194: LD_STRING #player4
3196: PUSH
3197: LD_EXP 10
3201: PUSH
3202: LD_STRING #player5
3204: PUSH
3205: LD_EXP 11
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: ST_TO_ADDR
// end ; end ;
3224: GO 3227
3226: POP
// end ;
3227: PPOPN 5
3229: END
// every 0 0$05 trigger time do var chance , p ;
3230: LD_EXP 5
3234: IFFALSE 3383
3236: GO 3238
3238: DISABLE
3239: LD_INT 0
3241: PPUSH
3242: PPUSH
// begin enable ;
3243: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3244: LD_INT 35
3246: PPUSH
3247: LD_INT 210
3249: PPUSH
3250: CALL_OW 12
3254: PPUSH
3255: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3259: LD_INT 21
3261: PUSH
3262: LD_INT 2
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: PUSH
3274: LD_EXP 6
3278: LESS
3279: IFFALSE 3383
// begin SpawnCar ( false , veh_spawn ) ;
3281: LD_INT 0
3283: PPUSH
3284: LD_INT 5
3286: PPUSH
3287: CALL 950 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3291: LD_EXP 4
3295: IFFALSE 3338
3297: PUSH
3298: LD_INT 2
3300: PUSH
3301: LD_INT 34
3303: PUSH
3304: LD_INT 8
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PUSH
3311: LD_INT 34
3313: PUSH
3314: LD_INT 48
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 69
3333: PUSH
3334: LD_INT 0
3336: EQUAL
3337: AND
3338: IFFALSE 3383
// begin chance := 23 ;
3340: LD_ADDR_VAR 0 1
3344: PUSH
3345: LD_INT 23
3347: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3348: LD_ADDR_VAR 0 2
3352: PUSH
3353: LD_INT 0
3355: PPUSH
3356: LD_INT 100
3358: PPUSH
3359: CALL_OW 12
3363: ST_TO_ADDR
// if p < chance then
3364: LD_VAR 0 2
3368: PUSH
3369: LD_VAR 0 1
3373: LESS
3374: IFFALSE 3383
// SpawnSibRocket ( veh_spawn ) ;
3376: LD_INT 5
3378: PPUSH
3379: CALL 1788 0 1
// end ; end ; end ; end_of_file
3383: PPOPN 2
3385: END
// export function SOS_UnitDestroyed ( un ) ; begin
3386: LD_INT 0
3388: PPUSH
// ComRadiation ( un ) ;
3389: LD_VAR 0 1
3393: PPUSH
3394: CALL 4475 0 1
// end ;
3398: LD_VAR 0 2
3402: RET
// export function SOS_UnitKamikazed ( un ) ; begin
3403: LD_INT 0
3405: PPUSH
// ComRadiation ( un ) ;
3406: LD_VAR 0 1
3410: PPUSH
3411: CALL 4475 0 1
// end ;
3415: LD_VAR 0 2
3419: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3420: LD_INT 0
3422: PPUSH
// end ;
3423: LD_VAR 0 4
3427: RET
// export function SOS_Command ( cmd ) ; begin
3428: LD_INT 0
3430: PPUSH
// end ;
3431: LD_VAR 0 2
3435: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3436: LD_INT 0
3438: PPUSH
// end ;
3439: LD_VAR 0 6
3443: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
3444: LD_INT 0
3446: PPUSH
3447: PPUSH
3448: PPUSH
3449: PPUSH
// if not vehicle or not factory then
3450: LD_VAR 0 1
3454: NOT
3455: IFTRUE 3464
3457: PUSH
3458: LD_VAR 0 2
3462: NOT
3463: OR
3464: IFFALSE 3468
// exit ;
3466: GO 4050
// if not factoryWaypoints then
3468: LD_EXP 81
3472: NOT
3473: IFFALSE 3477
// exit ;
3475: GO 4050
// for i := 1 to Count ( factoryWaypoints ) do
3477: LD_ADDR_VAR 0 4
3481: PUSH
3482: DOUBLE
3483: LD_INT 1
3485: DEC
3486: ST_TO_ADDR
3487: LD_EXP 81
3491: PPUSH
3492: CALL 27892 0 1
3496: PUSH
3497: FOR_TO
3498: IFFALSE 4048
// if factoryWaypoints [ i ] [ 2 ] = factory then
3500: LD_EXP 81
3504: PUSH
3505: LD_VAR 0 4
3509: ARRAY
3510: PUSH
3511: LD_INT 2
3513: ARRAY
3514: PUSH
3515: LD_VAR 0 2
3519: EQUAL
3520: IFFALSE 4046
// begin if GetControl ( vehicle ) = control_manual then
3522: LD_VAR 0 1
3526: PPUSH
3527: CALL_OW 263
3531: PUSH
3532: LD_INT 1
3534: EQUAL
3535: IFFALSE 3899
// begin driver := IsDrivenBy ( vehicle ) ;
3537: LD_ADDR_VAR 0 5
3541: PUSH
3542: LD_VAR 0 1
3546: PPUSH
3547: CALL_OW 311
3551: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
3552: LD_VAR 0 5
3556: PUSH
3557: LD_EXP 82
3561: IN
3562: IFTRUE 3576
3564: PUSH
3565: LD_VAR 0 1
3569: PUSH
3570: LD_EXP 82
3574: IN
3575: OR
3576: IFFALSE 3582
// exit ;
3578: POP
3579: POP
3580: GO 4050
// if not HasTask ( driver ) then
3582: LD_VAR 0 5
3586: PPUSH
3587: CALL_OW 314
3591: NOT
3592: IFFALSE 3897
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
3594: LD_ADDR_EXP 82
3598: PUSH
3599: LD_EXP 82
3603: PPUSH
3604: LD_VAR 0 5
3608: PPUSH
3609: CALL 63824 0 2
3613: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
3614: LD_ADDR_EXP 82
3618: PUSH
3619: LD_EXP 82
3623: PPUSH
3624: LD_VAR 0 1
3628: PPUSH
3629: CALL 63824 0 2
3633: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
3634: LD_ADDR_VAR 0 6
3638: PUSH
3639: LD_EXP 81
3643: PUSH
3644: LD_VAR 0 4
3648: ARRAY
3649: PUSH
3650: LD_INT 3
3652: ARRAY
3653: PPUSH
3654: LD_EXP 81
3658: PUSH
3659: LD_VAR 0 4
3663: ARRAY
3664: PUSH
3665: LD_INT 4
3667: ARRAY
3668: PPUSH
3669: CALL_OW 428
3673: ST_TO_ADDR
// if hex then
3674: LD_VAR 0 6
3678: IFFALSE 3696
// ComMoveUnit ( driver , hex ) else
3680: LD_VAR 0 5
3684: PPUSH
3685: LD_VAR 0 6
3689: PPUSH
3690: CALL_OW 112
3694: GO 3780
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
3696: LD_VAR 0 1
3700: PPUSH
3701: LD_EXP 81
3705: PUSH
3706: LD_VAR 0 4
3710: ARRAY
3711: PUSH
3712: LD_INT 3
3714: ARRAY
3715: PPUSH
3716: LD_EXP 81
3720: PUSH
3721: LD_VAR 0 4
3725: ARRAY
3726: PUSH
3727: LD_INT 4
3729: ARRAY
3730: PPUSH
3731: CALL_OW 297
3735: PUSH
3736: LD_INT 0
3738: GREATER
3739: IFFALSE 3780
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
3741: LD_VAR 0 5
3745: PPUSH
3746: LD_EXP 81
3750: PUSH
3751: LD_VAR 0 4
3755: ARRAY
3756: PUSH
3757: LD_INT 3
3759: ARRAY
3760: PPUSH
3761: LD_EXP 81
3765: PUSH
3766: LD_VAR 0 4
3770: ARRAY
3771: PUSH
3772: LD_INT 4
3774: ARRAY
3775: PPUSH
3776: CALL_OW 111
// AddComExitVehicle ( driver ) ;
3780: LD_VAR 0 5
3784: PPUSH
3785: CALL_OW 181
// if Multiplayer then
3789: LD_OWVAR 4
3793: IFFALSE 3842
// begin repeat wait ( 10 ) ;
3795: LD_INT 10
3797: PPUSH
3798: CALL_OW 67
// until not IsInUnit ( driver ) ;
3802: LD_VAR 0 5
3806: PPUSH
3807: CALL_OW 310
3811: NOT
3812: IFFALSE 3795
// if not HasTask ( driver ) then
3814: LD_VAR 0 5
3818: PPUSH
3819: CALL_OW 314
3823: NOT
3824: IFFALSE 3840
// ComEnterUnit ( driver , factory ) ;
3826: LD_VAR 0 5
3830: PPUSH
3831: LD_VAR 0 2
3835: PPUSH
3836: CALL_OW 120
// end else
3840: GO 3856
// AddComEnterUnit ( driver , factory ) ;
3842: LD_VAR 0 5
3846: PPUSH
3847: LD_VAR 0 2
3851: PPUSH
3852: CALL_OW 180
// wait ( 0 0$1 ) ;
3856: LD_INT 35
3858: PPUSH
3859: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
3863: LD_ADDR_EXP 82
3867: PUSH
3868: LD_EXP 82
3872: PUSH
3873: LD_VAR 0 5
3877: DIFF
3878: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
3879: LD_ADDR_EXP 82
3883: PUSH
3884: LD_EXP 82
3888: PUSH
3889: LD_VAR 0 1
3893: DIFF
3894: ST_TO_ADDR
// break ;
3895: GO 4048
// end ; end else
3897: GO 4046
// if GetControl ( vehicle ) = control_remote then
3899: LD_VAR 0 1
3903: PPUSH
3904: CALL_OW 263
3908: PUSH
3909: LD_INT 2
3911: EQUAL
3912: IFFALSE 3998
// begin wait ( 0 0$2 ) ;
3914: LD_INT 70
3916: PPUSH
3917: CALL_OW 67
// repeat wait ( 10 ) ;
3921: LD_INT 10
3923: PPUSH
3924: CALL_OW 67
// Connect ( vehicle ) ;
3928: LD_VAR 0 1
3932: PPUSH
3933: CALL 34136 0 1
// until IsControledBy ( vehicle ) ;
3937: LD_VAR 0 1
3941: PPUSH
3942: CALL_OW 312
3946: IFFALSE 3921
// wait ( 10 ) ;
3948: LD_INT 10
3950: PPUSH
3951: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
3955: LD_VAR 0 1
3959: PPUSH
3960: LD_EXP 81
3964: PUSH
3965: LD_VAR 0 4
3969: ARRAY
3970: PUSH
3971: LD_INT 3
3973: ARRAY
3974: PPUSH
3975: LD_EXP 81
3979: PUSH
3980: LD_VAR 0 4
3984: ARRAY
3985: PUSH
3986: LD_INT 4
3988: ARRAY
3989: PPUSH
3990: CALL_OW 111
// break ;
3994: GO 4048
// end else
3996: GO 4046
// begin wait ( 0 0$3 ) ;
3998: LD_INT 105
4000: PPUSH
4001: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
4005: LD_VAR 0 1
4009: PPUSH
4010: LD_EXP 81
4014: PUSH
4015: LD_VAR 0 4
4019: ARRAY
4020: PUSH
4021: LD_INT 3
4023: ARRAY
4024: PPUSH
4025: LD_EXP 81
4029: PUSH
4030: LD_VAR 0 4
4034: ARRAY
4035: PUSH
4036: LD_INT 4
4038: ARRAY
4039: PPUSH
4040: CALL_OW 111
// break ;
4044: GO 4048
// end ; end ;
4046: GO 3497
4048: POP
4049: POP
// end ;
4050: LD_VAR 0 3
4054: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
4055: LD_INT 0
4057: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
4058: LD_VAR 0 1
4062: PUSH
4063: LD_INT 250
4065: EQUAL
4066: IFFALSE 4083
4068: PUSH
4069: LD_VAR 0 2
4073: PPUSH
4074: CALL_OW 264
4078: PUSH
4079: LD_INT 81
4081: EQUAL
4082: AND
4083: IFFALSE 4104
// MinerPlaceMine ( unit , x , y ) ;
4085: LD_VAR 0 2
4089: PPUSH
4090: LD_VAR 0 4
4094: PPUSH
4095: LD_VAR 0 5
4099: PPUSH
4100: CALL 7236 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
4104: LD_VAR 0 1
4108: PUSH
4109: LD_INT 251
4111: EQUAL
4112: IFFALSE 4129
4114: PUSH
4115: LD_VAR 0 2
4119: PPUSH
4120: CALL_OW 264
4124: PUSH
4125: LD_INT 81
4127: EQUAL
4128: AND
4129: IFFALSE 4150
// MinerDetonateMine ( unit , x , y ) ;
4131: LD_VAR 0 2
4135: PPUSH
4136: LD_VAR 0 4
4140: PPUSH
4141: LD_VAR 0 5
4145: PPUSH
4146: CALL 7515 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
4150: LD_VAR 0 1
4154: PUSH
4155: LD_INT 252
4157: EQUAL
4158: IFFALSE 4175
4160: PUSH
4161: LD_VAR 0 2
4165: PPUSH
4166: CALL_OW 264
4170: PUSH
4171: LD_INT 81
4173: EQUAL
4174: AND
4175: IFFALSE 4196
// MinerCreateMinefield ( unit , x , y ) ;
4177: LD_VAR 0 2
4181: PPUSH
4182: LD_VAR 0 4
4186: PPUSH
4187: LD_VAR 0 5
4191: PPUSH
4192: CALL 7934 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
4196: LD_VAR 0 1
4200: PUSH
4201: LD_INT 253
4203: EQUAL
4204: IFFALSE 4221
4206: PUSH
4207: LD_VAR 0 2
4211: PPUSH
4212: CALL_OW 257
4216: PUSH
4217: LD_INT 5
4219: EQUAL
4220: AND
4221: IFFALSE 4242
// ComBinocular ( unit , x , y ) ;
4223: LD_VAR 0 2
4227: PPUSH
4228: LD_VAR 0 4
4232: PPUSH
4233: LD_VAR 0 5
4237: PPUSH
4238: CALL 8309 0 3
// if selectedUnit then
4242: LD_VAR 0 3
4246: IFFALSE 4306
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
4248: LD_VAR 0 1
4252: PUSH
4253: LD_INT 254
4255: EQUAL
4256: IFFALSE 4273
4258: PUSH
4259: LD_VAR 0 2
4263: PPUSH
4264: CALL_OW 264
4268: PUSH
4269: LD_INT 99
4271: EQUAL
4272: AND
4273: IFFALSE 4290
4275: PUSH
4276: LD_VAR 0 3
4280: PPUSH
4281: CALL_OW 263
4285: PUSH
4286: LD_INT 3
4288: EQUAL
4289: AND
4290: IFFALSE 4306
// HackDestroyVehicle ( unit , selectedUnit ) ;
4292: LD_VAR 0 2
4296: PPUSH
4297: LD_VAR 0 3
4301: PPUSH
4302: CALL 6596 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
4306: LD_VAR 0 1
4310: PUSH
4311: LD_INT 255
4313: EQUAL
4314: IFFALSE 4338
4316: PUSH
4317: LD_VAR 0 2
4321: PPUSH
4322: CALL_OW 264
4326: PUSH
4327: LD_INT 14
4329: PUSH
4330: LD_INT 53
4332: PUSH
4333: EMPTY
4334: LIST
4335: LIST
4336: IN
4337: AND
4338: IFFALSE 4356
4340: PUSH
4341: LD_VAR 0 4
4345: PPUSH
4346: LD_VAR 0 5
4350: PPUSH
4351: CALL_OW 488
4355: AND
4356: IFFALSE 4380
// CutTreeXYR ( unit , x , y , 12 ) ;
4358: LD_VAR 0 2
4362: PPUSH
4363: LD_VAR 0 4
4367: PPUSH
4368: LD_VAR 0 5
4372: PPUSH
4373: LD_INT 12
4375: PPUSH
4376: CALL 4571 0 4
// if cmd = 256 then
4380: LD_VAR 0 1
4384: PUSH
4385: LD_INT 256
4387: EQUAL
4388: IFFALSE 4409
// SetFactoryWaypoint ( unit , x , y ) ;
4390: LD_VAR 0 2
4394: PPUSH
4395: LD_VAR 0 4
4399: PPUSH
4400: LD_VAR 0 5
4404: PPUSH
4405: CALL 24213 0 3
// if cmd = 257 then
4409: LD_VAR 0 1
4413: PUSH
4414: LD_INT 257
4416: EQUAL
4417: IFFALSE 4438
// SetWarehouseGatheringPoint ( unit , x , y ) ;
4419: LD_VAR 0 2
4423: PPUSH
4424: LD_VAR 0 4
4428: PPUSH
4429: LD_VAR 0 5
4433: PPUSH
4434: CALL 24709 0 3
// if cmd = 258 then
4438: LD_VAR 0 1
4442: PUSH
4443: LD_INT 258
4445: EQUAL
4446: IFFALSE 4470
// BurnTreeXYR ( unit , x , y , 8 ) ;
4448: LD_VAR 0 2
4452: PPUSH
4453: LD_VAR 0 4
4457: PPUSH
4458: LD_VAR 0 5
4462: PPUSH
4463: LD_INT 8
4465: PPUSH
4466: CALL 4971 0 4
// end ;
4470: LD_VAR 0 6
4474: RET
// export function ComRadiation ( un ) ; var eff ; begin
4475: LD_INT 0
4477: PPUSH
4478: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
4479: LD_VAR 0 1
4483: PPUSH
4484: CALL_OW 264
4488: PUSH
4489: LD_INT 91
4491: NONEQUAL
4492: IFFALSE 4496
// exit ;
4494: GO 4566
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
4496: LD_INT 68
4498: PPUSH
4499: LD_VAR 0 1
4503: PPUSH
4504: CALL_OW 255
4508: PPUSH
4509: CALL_OW 321
4513: PUSH
4514: LD_INT 2
4516: EQUAL
4517: IFFALSE 4529
// eff := 50 else
4519: LD_ADDR_VAR 0 3
4523: PUSH
4524: LD_INT 50
4526: ST_TO_ADDR
4527: GO 4537
// eff := 25 ;
4529: LD_ADDR_VAR 0 3
4533: PUSH
4534: LD_INT 25
4536: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
4537: LD_VAR 0 1
4541: PPUSH
4542: CALL_OW 250
4546: PPUSH
4547: LD_VAR 0 1
4551: PPUSH
4552: CALL_OW 251
4556: PPUSH
4557: LD_VAR 0 3
4561: PPUSH
4562: CALL_OW 495
// end ;
4566: LD_VAR 0 2
4570: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
4571: LD_INT 0
4573: PPUSH
4574: PPUSH
4575: PPUSH
4576: PPUSH
4577: PPUSH
4578: PPUSH
4579: PPUSH
4580: PPUSH
4581: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
4582: LD_VAR 0 1
4586: PPUSH
4587: CALL_OW 302
4591: NOT
4592: IFTRUE 4611
4594: PUSH
4595: LD_VAR 0 2
4599: PPUSH
4600: LD_VAR 0 3
4604: PPUSH
4605: CALL_OW 488
4609: NOT
4610: OR
4611: IFTRUE 4620
4613: PUSH
4614: LD_VAR 0 4
4618: NOT
4619: OR
4620: IFFALSE 4624
// exit ;
4622: GO 4966
// list := [ ] ;
4624: LD_ADDR_VAR 0 13
4628: PUSH
4629: EMPTY
4630: ST_TO_ADDR
// if x - r < 0 then
4631: LD_VAR 0 2
4635: PUSH
4636: LD_VAR 0 4
4640: MINUS
4641: PUSH
4642: LD_INT 0
4644: LESS
4645: IFFALSE 4657
// min_x := 0 else
4647: LD_ADDR_VAR 0 7
4651: PUSH
4652: LD_INT 0
4654: ST_TO_ADDR
4655: GO 4673
// min_x := x - r ;
4657: LD_ADDR_VAR 0 7
4661: PUSH
4662: LD_VAR 0 2
4666: PUSH
4667: LD_VAR 0 4
4671: MINUS
4672: ST_TO_ADDR
// if y - r < 0 then
4673: LD_VAR 0 3
4677: PUSH
4678: LD_VAR 0 4
4682: MINUS
4683: PUSH
4684: LD_INT 0
4686: LESS
4687: IFFALSE 4699
// min_y := 0 else
4689: LD_ADDR_VAR 0 8
4693: PUSH
4694: LD_INT 0
4696: ST_TO_ADDR
4697: GO 4715
// min_y := y - r ;
4699: LD_ADDR_VAR 0 8
4703: PUSH
4704: LD_VAR 0 3
4708: PUSH
4709: LD_VAR 0 4
4713: MINUS
4714: ST_TO_ADDR
// max_x := x + r ;
4715: LD_ADDR_VAR 0 9
4719: PUSH
4720: LD_VAR 0 2
4724: PUSH
4725: LD_VAR 0 4
4729: PLUS
4730: ST_TO_ADDR
// max_y := y + r ;
4731: LD_ADDR_VAR 0 10
4735: PUSH
4736: LD_VAR 0 3
4740: PUSH
4741: LD_VAR 0 4
4745: PLUS
4746: ST_TO_ADDR
// for _x = min_x to max_x do
4747: LD_ADDR_VAR 0 11
4751: PUSH
4752: DOUBLE
4753: LD_VAR 0 7
4757: DEC
4758: ST_TO_ADDR
4759: LD_VAR 0 9
4763: PUSH
4764: FOR_TO
4765: IFFALSE 4884
// for _y = min_y to max_y do
4767: LD_ADDR_VAR 0 12
4771: PUSH
4772: DOUBLE
4773: LD_VAR 0 8
4777: DEC
4778: ST_TO_ADDR
4779: LD_VAR 0 10
4783: PUSH
4784: FOR_TO
4785: IFFALSE 4880
// begin if not ValidHex ( _x , _y ) then
4787: LD_VAR 0 11
4791: PPUSH
4792: LD_VAR 0 12
4796: PPUSH
4797: CALL_OW 488
4801: NOT
4802: IFFALSE 4806
// continue ;
4804: GO 4784
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4806: LD_VAR 0 11
4810: PPUSH
4811: LD_VAR 0 12
4815: PPUSH
4816: CALL_OW 351
4820: IFFALSE 4838
4822: PUSH
4823: LD_VAR 0 11
4827: PPUSH
4828: LD_VAR 0 12
4832: PPUSH
4833: CALL_OW 554
4837: AND
4838: IFFALSE 4878
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4840: LD_ADDR_VAR 0 13
4844: PUSH
4845: LD_VAR 0 13
4849: PPUSH
4850: LD_VAR 0 13
4854: PUSH
4855: LD_INT 1
4857: PLUS
4858: PPUSH
4859: LD_VAR 0 11
4863: PUSH
4864: LD_VAR 0 12
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 2
4877: ST_TO_ADDR
// end ;
4878: GO 4784
4880: POP
4881: POP
4882: GO 4764
4884: POP
4885: POP
// if not list then
4886: LD_VAR 0 13
4890: NOT
4891: IFFALSE 4895
// exit ;
4893: GO 4966
// for i in list do
4895: LD_ADDR_VAR 0 6
4899: PUSH
4900: LD_VAR 0 13
4904: PUSH
4905: FOR_IN
4906: IFFALSE 4964
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4908: LD_VAR 0 1
4912: PPUSH
4913: LD_STRING M
4915: PUSH
4916: LD_VAR 0 6
4920: PUSH
4921: LD_INT 1
4923: ARRAY
4924: PUSH
4925: LD_VAR 0 6
4929: PUSH
4930: LD_INT 2
4932: ARRAY
4933: PUSH
4934: LD_INT 0
4936: PUSH
4937: LD_INT 0
4939: PUSH
4940: LD_INT 0
4942: PUSH
4943: LD_INT 0
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: PUSH
4955: EMPTY
4956: LIST
4957: PPUSH
4958: CALL_OW 447
4962: GO 4905
4964: POP
4965: POP
// end ;
4966: LD_VAR 0 5
4970: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
4971: LD_INT 0
4973: PPUSH
4974: PPUSH
4975: PPUSH
4976: PPUSH
4977: PPUSH
4978: PPUSH
4979: PPUSH
4980: PPUSH
4981: PPUSH
4982: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
4983: LD_VAR 0 1
4987: PPUSH
4988: CALL_OW 302
4992: NOT
4993: IFTRUE 5012
4995: PUSH
4996: LD_VAR 0 2
5000: PPUSH
5001: LD_VAR 0 3
5005: PPUSH
5006: CALL_OW 488
5010: NOT
5011: OR
5012: IFTRUE 5021
5014: PUSH
5015: LD_VAR 0 4
5019: NOT
5020: OR
5021: IFFALSE 5025
// exit ;
5023: GO 5542
// list := [ ] ;
5025: LD_ADDR_VAR 0 13
5029: PUSH
5030: EMPTY
5031: ST_TO_ADDR
// if x - r < 0 then
5032: LD_VAR 0 2
5036: PUSH
5037: LD_VAR 0 4
5041: MINUS
5042: PUSH
5043: LD_INT 0
5045: LESS
5046: IFFALSE 5058
// min_x := 0 else
5048: LD_ADDR_VAR 0 7
5052: PUSH
5053: LD_INT 0
5055: ST_TO_ADDR
5056: GO 5074
// min_x := x - r ;
5058: LD_ADDR_VAR 0 7
5062: PUSH
5063: LD_VAR 0 2
5067: PUSH
5068: LD_VAR 0 4
5072: MINUS
5073: ST_TO_ADDR
// if y - r < 0 then
5074: LD_VAR 0 3
5078: PUSH
5079: LD_VAR 0 4
5083: MINUS
5084: PUSH
5085: LD_INT 0
5087: LESS
5088: IFFALSE 5100
// min_y := 0 else
5090: LD_ADDR_VAR 0 8
5094: PUSH
5095: LD_INT 0
5097: ST_TO_ADDR
5098: GO 5116
// min_y := y - r ;
5100: LD_ADDR_VAR 0 8
5104: PUSH
5105: LD_VAR 0 3
5109: PUSH
5110: LD_VAR 0 4
5114: MINUS
5115: ST_TO_ADDR
// max_x := x + r ;
5116: LD_ADDR_VAR 0 9
5120: PUSH
5121: LD_VAR 0 2
5125: PUSH
5126: LD_VAR 0 4
5130: PLUS
5131: ST_TO_ADDR
// max_y := y + r ;
5132: LD_ADDR_VAR 0 10
5136: PUSH
5137: LD_VAR 0 3
5141: PUSH
5142: LD_VAR 0 4
5146: PLUS
5147: ST_TO_ADDR
// for _x = min_x to max_x do
5148: LD_ADDR_VAR 0 11
5152: PUSH
5153: DOUBLE
5154: LD_VAR 0 7
5158: DEC
5159: ST_TO_ADDR
5160: LD_VAR 0 9
5164: PUSH
5165: FOR_TO
5166: IFFALSE 5285
// for _y = min_y to max_y do
5168: LD_ADDR_VAR 0 12
5172: PUSH
5173: DOUBLE
5174: LD_VAR 0 8
5178: DEC
5179: ST_TO_ADDR
5180: LD_VAR 0 10
5184: PUSH
5185: FOR_TO
5186: IFFALSE 5281
// begin if not ValidHex ( _x , _y ) then
5188: LD_VAR 0 11
5192: PPUSH
5193: LD_VAR 0 12
5197: PPUSH
5198: CALL_OW 488
5202: NOT
5203: IFFALSE 5207
// continue ;
5205: GO 5185
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
5207: LD_VAR 0 11
5211: PPUSH
5212: LD_VAR 0 12
5216: PPUSH
5217: CALL_OW 351
5221: IFFALSE 5239
5223: PUSH
5224: LD_VAR 0 11
5228: PPUSH
5229: LD_VAR 0 12
5233: PPUSH
5234: CALL_OW 554
5238: AND
5239: IFFALSE 5279
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
5241: LD_ADDR_VAR 0 13
5245: PUSH
5246: LD_VAR 0 13
5250: PPUSH
5251: LD_VAR 0 13
5255: PUSH
5256: LD_INT 1
5258: PLUS
5259: PPUSH
5260: LD_VAR 0 11
5264: PUSH
5265: LD_VAR 0 12
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PPUSH
5274: CALL_OW 2
5278: ST_TO_ADDR
// end ;
5279: GO 5185
5281: POP
5282: POP
5283: GO 5165
5285: POP
5286: POP
// if not list then
5287: LD_VAR 0 13
5291: NOT
5292: IFFALSE 5296
// exit ;
5294: GO 5542
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
5296: LD_ADDR_VAR 0 13
5300: PUSH
5301: LD_VAR 0 1
5305: PPUSH
5306: LD_VAR 0 13
5310: PPUSH
5311: LD_INT 1
5313: PPUSH
5314: LD_INT 1
5316: PPUSH
5317: CALL 31264 0 4
5321: ST_TO_ADDR
// ComStop ( flame ) ;
5322: LD_VAR 0 1
5326: PPUSH
5327: CALL_OW 141
// for i in list do
5331: LD_ADDR_VAR 0 6
5335: PUSH
5336: LD_VAR 0 13
5340: PUSH
5341: FOR_IN
5342: IFFALSE 5373
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
5344: LD_VAR 0 1
5348: PPUSH
5349: LD_VAR 0 6
5353: PUSH
5354: LD_INT 1
5356: ARRAY
5357: PPUSH
5358: LD_VAR 0 6
5362: PUSH
5363: LD_INT 2
5365: ARRAY
5366: PPUSH
5367: CALL_OW 176
5371: GO 5341
5373: POP
5374: POP
// repeat wait ( 0 0$1 ) ;
5375: LD_INT 35
5377: PPUSH
5378: CALL_OW 67
// task := GetTaskList ( flame ) ;
5382: LD_ADDR_VAR 0 14
5386: PUSH
5387: LD_VAR 0 1
5391: PPUSH
5392: CALL_OW 437
5396: ST_TO_ADDR
// if not task then
5397: LD_VAR 0 14
5401: NOT
5402: IFFALSE 5406
// exit ;
5404: GO 5542
// if task [ 1 ] [ 1 ] <> | then
5406: LD_VAR 0 14
5410: PUSH
5411: LD_INT 1
5413: ARRAY
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PUSH
5419: LD_STRING |
5421: NONEQUAL
5422: IFFALSE 5426
// exit ;
5424: GO 5542
// _x := task [ 1 ] [ 2 ] ;
5426: LD_ADDR_VAR 0 11
5430: PUSH
5431: LD_VAR 0 14
5435: PUSH
5436: LD_INT 1
5438: ARRAY
5439: PUSH
5440: LD_INT 2
5442: ARRAY
5443: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
5444: LD_ADDR_VAR 0 12
5448: PUSH
5449: LD_VAR 0 14
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PUSH
5458: LD_INT 3
5460: ARRAY
5461: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
5462: LD_VAR 0 11
5466: PPUSH
5467: LD_VAR 0 12
5471: PPUSH
5472: CALL_OW 351
5476: NOT
5477: IFTRUE 5496
5479: PUSH
5480: LD_VAR 0 11
5484: PPUSH
5485: LD_VAR 0 12
5489: PPUSH
5490: CALL_OW 554
5494: NOT
5495: OR
5496: IFFALSE 5530
// begin task := Delete ( task , 1 ) ;
5498: LD_ADDR_VAR 0 14
5502: PUSH
5503: LD_VAR 0 14
5507: PPUSH
5508: LD_INT 1
5510: PPUSH
5511: CALL_OW 3
5515: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
5516: LD_VAR 0 1
5520: PPUSH
5521: LD_VAR 0 14
5525: PPUSH
5526: CALL_OW 446
// end ; until not HasTask ( flame ) ;
5530: LD_VAR 0 1
5534: PPUSH
5535: CALL_OW 314
5539: NOT
5540: IFFALSE 5375
// end ;
5542: LD_VAR 0 5
5546: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
5547: LD_EXP 12
5551: NOT
5552: IFFALSE 5602
5554: GO 5556
5556: DISABLE
// begin initHack := true ;
5557: LD_ADDR_EXP 12
5561: PUSH
5562: LD_INT 1
5564: ST_TO_ADDR
// hackTanks := [ ] ;
5565: LD_ADDR_EXP 13
5569: PUSH
5570: EMPTY
5571: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
5572: LD_ADDR_EXP 14
5576: PUSH
5577: EMPTY
5578: ST_TO_ADDR
// hackLimit := 3 ;
5579: LD_ADDR_EXP 15
5583: PUSH
5584: LD_INT 3
5586: ST_TO_ADDR
// hackDist := 12 ;
5587: LD_ADDR_EXP 16
5591: PUSH
5592: LD_INT 12
5594: ST_TO_ADDR
// hackCounter := [ ] ;
5595: LD_ADDR_EXP 17
5599: PUSH
5600: EMPTY
5601: ST_TO_ADDR
// end ;
5602: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
5603: LD_EXP 12
5607: IFFALSE 5625
5609: PUSH
5610: LD_INT 34
5612: PUSH
5613: LD_INT 99
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PPUSH
5620: CALL_OW 69
5624: AND
5625: IFFALSE 5878
5627: GO 5629
5629: DISABLE
5630: LD_INT 0
5632: PPUSH
5633: PPUSH
// begin enable ;
5634: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
5635: LD_ADDR_VAR 0 1
5639: PUSH
5640: LD_INT 34
5642: PUSH
5643: LD_INT 99
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PPUSH
5650: CALL_OW 69
5654: PUSH
5655: FOR_IN
5656: IFFALSE 5876
// begin if not i in hackTanks then
5658: LD_VAR 0 1
5662: PUSH
5663: LD_EXP 13
5667: IN
5668: NOT
5669: IFFALSE 5752
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
5671: LD_ADDR_EXP 13
5675: PUSH
5676: LD_EXP 13
5680: PPUSH
5681: LD_EXP 13
5685: PUSH
5686: LD_INT 1
5688: PLUS
5689: PPUSH
5690: LD_VAR 0 1
5694: PPUSH
5695: CALL_OW 1
5699: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
5700: LD_ADDR_EXP 14
5704: PUSH
5705: LD_EXP 14
5709: PPUSH
5710: LD_EXP 14
5714: PUSH
5715: LD_INT 1
5717: PLUS
5718: PPUSH
5719: EMPTY
5720: PPUSH
5721: CALL_OW 1
5725: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
5726: LD_ADDR_EXP 17
5730: PUSH
5731: LD_EXP 17
5735: PPUSH
5736: LD_EXP 17
5740: PUSH
5741: LD_INT 1
5743: PLUS
5744: PPUSH
5745: EMPTY
5746: PPUSH
5747: CALL_OW 1
5751: ST_TO_ADDR
// end ; if not IsOk ( i ) then
5752: LD_VAR 0 1
5756: PPUSH
5757: CALL_OW 302
5761: NOT
5762: IFFALSE 5775
// begin HackUnlinkAll ( i ) ;
5764: LD_VAR 0 1
5768: PPUSH
5769: CALL 5881 0 1
// continue ;
5773: GO 5655
// end ; HackCheckCapturedStatus ( i ) ;
5775: LD_VAR 0 1
5779: PPUSH
5780: CALL 6326 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
5784: LD_ADDR_VAR 0 2
5788: PUSH
5789: LD_INT 81
5791: PUSH
5792: LD_VAR 0 1
5796: PPUSH
5797: CALL_OW 255
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 33
5808: PUSH
5809: LD_INT 3
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: LD_INT 91
5818: PUSH
5819: LD_VAR 0 1
5823: PUSH
5824: LD_EXP 16
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: LIST
5833: PUSH
5834: LD_INT 50
5836: PUSH
5837: EMPTY
5838: LIST
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: PPUSH
5846: CALL_OW 69
5850: ST_TO_ADDR
// if not tmp then
5851: LD_VAR 0 2
5855: NOT
5856: IFFALSE 5860
// continue ;
5858: GO 5655
// HackLink ( i , tmp ) ;
5860: LD_VAR 0 1
5864: PPUSH
5865: LD_VAR 0 2
5869: PPUSH
5870: CALL 6017 0 2
// end ;
5874: GO 5655
5876: POP
5877: POP
// end ;
5878: PPOPN 2
5880: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
5881: LD_INT 0
5883: PPUSH
5884: PPUSH
5885: PPUSH
// if not hack in hackTanks then
5886: LD_VAR 0 1
5890: PUSH
5891: LD_EXP 13
5895: IN
5896: NOT
5897: IFFALSE 5901
// exit ;
5899: GO 6012
// index := GetElementIndex ( hackTanks , hack ) ;
5901: LD_ADDR_VAR 0 4
5905: PUSH
5906: LD_EXP 13
5910: PPUSH
5911: LD_VAR 0 1
5915: PPUSH
5916: CALL 30559 0 2
5920: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
5921: LD_EXP 14
5925: PUSH
5926: LD_VAR 0 4
5930: ARRAY
5931: IFFALSE 6012
// begin for i in hackTanksCaptured [ index ] do
5933: LD_ADDR_VAR 0 3
5937: PUSH
5938: LD_EXP 14
5942: PUSH
5943: LD_VAR 0 4
5947: ARRAY
5948: PUSH
5949: FOR_IN
5950: IFFALSE 5976
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
5952: LD_VAR 0 3
5956: PUSH
5957: LD_INT 1
5959: ARRAY
5960: PPUSH
5961: LD_VAR 0 3
5965: PUSH
5966: LD_INT 2
5968: ARRAY
5969: PPUSH
5970: CALL_OW 235
5974: GO 5949
5976: POP
5977: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
5978: LD_ADDR_EXP 14
5982: PUSH
5983: LD_EXP 14
5987: PPUSH
5988: LD_VAR 0 4
5992: PPUSH
5993: EMPTY
5994: PPUSH
5995: CALL_OW 1
5999: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
6000: LD_VAR 0 1
6004: PPUSH
6005: LD_INT 0
6007: PPUSH
6008: CALL_OW 505
// end ; end ;
6012: LD_VAR 0 2
6016: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
6017: LD_INT 0
6019: PPUSH
6020: PPUSH
6021: PPUSH
// if not hack in hackTanks or not vehicles then
6022: LD_VAR 0 1
6026: PUSH
6027: LD_EXP 13
6031: IN
6032: NOT
6033: IFTRUE 6042
6035: PUSH
6036: LD_VAR 0 2
6040: NOT
6041: OR
6042: IFFALSE 6046
// exit ;
6044: GO 6321
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
6046: LD_ADDR_VAR 0 2
6050: PUSH
6051: LD_VAR 0 1
6055: PPUSH
6056: LD_VAR 0 2
6060: PPUSH
6061: LD_INT 1
6063: PPUSH
6064: LD_INT 1
6066: PPUSH
6067: CALL 31211 0 4
6071: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
6072: LD_ADDR_VAR 0 5
6076: PUSH
6077: LD_EXP 13
6081: PPUSH
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL 30559 0 2
6091: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
6092: LD_EXP 14
6096: PUSH
6097: LD_VAR 0 5
6101: ARRAY
6102: PUSH
6103: LD_EXP 15
6107: LESS
6108: IFFALSE 6297
// begin for i := 1 to vehicles do
6110: LD_ADDR_VAR 0 4
6114: PUSH
6115: DOUBLE
6116: LD_INT 1
6118: DEC
6119: ST_TO_ADDR
6120: LD_VAR 0 2
6124: PUSH
6125: FOR_TO
6126: IFFALSE 6295
// begin if hackTanksCaptured [ index ] = hackLimit then
6128: LD_EXP 14
6132: PUSH
6133: LD_VAR 0 5
6137: ARRAY
6138: PUSH
6139: LD_EXP 15
6143: EQUAL
6144: IFFALSE 6148
// break ;
6146: GO 6295
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
6148: LD_ADDR_EXP 17
6152: PUSH
6153: LD_EXP 17
6157: PPUSH
6158: LD_VAR 0 5
6162: PPUSH
6163: LD_EXP 17
6167: PUSH
6168: LD_VAR 0 5
6172: ARRAY
6173: PUSH
6174: LD_INT 1
6176: PLUS
6177: PPUSH
6178: CALL_OW 1
6182: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
6183: LD_ADDR_EXP 14
6187: PUSH
6188: LD_EXP 14
6192: PPUSH
6193: LD_VAR 0 5
6197: PUSH
6198: LD_EXP 14
6202: PUSH
6203: LD_VAR 0 5
6207: ARRAY
6208: PUSH
6209: LD_INT 1
6211: PLUS
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: PPUSH
6217: LD_VAR 0 2
6221: PUSH
6222: LD_VAR 0 4
6226: ARRAY
6227: PUSH
6228: LD_VAR 0 2
6232: PUSH
6233: LD_VAR 0 4
6237: ARRAY
6238: PPUSH
6239: CALL_OW 255
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL 30776 0 3
6252: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
6253: LD_VAR 0 2
6257: PUSH
6258: LD_VAR 0 4
6262: ARRAY
6263: PPUSH
6264: LD_VAR 0 1
6268: PPUSH
6269: CALL_OW 255
6273: PPUSH
6274: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
6278: LD_VAR 0 2
6282: PUSH
6283: LD_VAR 0 4
6287: ARRAY
6288: PPUSH
6289: CALL_OW 141
// end ;
6293: GO 6125
6295: POP
6296: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
6297: LD_VAR 0 1
6301: PPUSH
6302: LD_EXP 14
6306: PUSH
6307: LD_VAR 0 5
6311: ARRAY
6312: PUSH
6313: LD_INT 0
6315: PLUS
6316: PPUSH
6317: CALL_OW 505
// end ;
6321: LD_VAR 0 3
6325: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
6326: LD_INT 0
6328: PPUSH
6329: PPUSH
6330: PPUSH
6331: PPUSH
// if not hack in hackTanks then
6332: LD_VAR 0 1
6336: PUSH
6337: LD_EXP 13
6341: IN
6342: NOT
6343: IFFALSE 6347
// exit ;
6345: GO 6591
// index := GetElementIndex ( hackTanks , hack ) ;
6347: LD_ADDR_VAR 0 4
6351: PUSH
6352: LD_EXP 13
6356: PPUSH
6357: LD_VAR 0 1
6361: PPUSH
6362: CALL 30559 0 2
6366: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
6367: LD_ADDR_VAR 0 3
6371: PUSH
6372: DOUBLE
6373: LD_EXP 14
6377: PUSH
6378: LD_VAR 0 4
6382: ARRAY
6383: INC
6384: ST_TO_ADDR
6385: LD_INT 1
6387: PUSH
6388: FOR_DOWNTO
6389: IFFALSE 6565
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
6391: LD_ADDR_VAR 0 5
6395: PUSH
6396: LD_EXP 14
6400: PUSH
6401: LD_VAR 0 4
6405: ARRAY
6406: PUSH
6407: LD_VAR 0 3
6411: ARRAY
6412: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
6413: LD_VAR 0 5
6417: PUSH
6418: LD_INT 1
6420: ARRAY
6421: PPUSH
6422: CALL_OW 302
6426: NOT
6427: IFTRUE 6455
6429: PUSH
6430: LD_VAR 0 5
6434: PUSH
6435: LD_INT 1
6437: ARRAY
6438: PPUSH
6439: CALL_OW 255
6443: PUSH
6444: LD_VAR 0 1
6448: PPUSH
6449: CALL_OW 255
6453: NONEQUAL
6454: OR
6455: IFFALSE 6563
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
6457: LD_VAR 0 5
6461: PUSH
6462: LD_INT 1
6464: ARRAY
6465: PPUSH
6466: CALL_OW 305
6470: IFFALSE 6498
6472: PUSH
6473: LD_VAR 0 5
6477: PUSH
6478: LD_INT 1
6480: ARRAY
6481: PPUSH
6482: CALL_OW 255
6486: PUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL_OW 255
6496: EQUAL
6497: AND
6498: IFFALSE 6522
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
6500: LD_VAR 0 5
6504: PUSH
6505: LD_INT 1
6507: ARRAY
6508: PPUSH
6509: LD_VAR 0 5
6513: PUSH
6514: LD_INT 2
6516: ARRAY
6517: PPUSH
6518: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
6522: LD_ADDR_EXP 14
6526: PUSH
6527: LD_EXP 14
6531: PPUSH
6532: LD_VAR 0 4
6536: PPUSH
6537: LD_EXP 14
6541: PUSH
6542: LD_VAR 0 4
6546: ARRAY
6547: PPUSH
6548: LD_VAR 0 3
6552: PPUSH
6553: CALL_OW 3
6557: PPUSH
6558: CALL_OW 1
6562: ST_TO_ADDR
// end ; end ;
6563: GO 6388
6565: POP
6566: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
6567: LD_VAR 0 1
6571: PPUSH
6572: LD_EXP 14
6576: PUSH
6577: LD_VAR 0 4
6581: ARRAY
6582: PUSH
6583: LD_INT 0
6585: PLUS
6586: PPUSH
6587: CALL_OW 505
// end ;
6591: LD_VAR 0 2
6595: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
6596: LD_INT 0
6598: PPUSH
6599: PPUSH
6600: PPUSH
6601: PPUSH
// if not hack in hackTanks then
6602: LD_VAR 0 1
6606: PUSH
6607: LD_EXP 13
6611: IN
6612: NOT
6613: IFFALSE 6617
// exit ;
6615: GO 6702
// index := GetElementIndex ( hackTanks , hack ) ;
6617: LD_ADDR_VAR 0 5
6621: PUSH
6622: LD_EXP 13
6626: PPUSH
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL 30559 0 2
6636: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
6637: LD_ADDR_VAR 0 4
6641: PUSH
6642: DOUBLE
6643: LD_INT 1
6645: DEC
6646: ST_TO_ADDR
6647: LD_EXP 14
6651: PUSH
6652: LD_VAR 0 5
6656: ARRAY
6657: PUSH
6658: FOR_TO
6659: IFFALSE 6700
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
6661: LD_EXP 14
6665: PUSH
6666: LD_VAR 0 5
6670: ARRAY
6671: PUSH
6672: LD_VAR 0 4
6676: ARRAY
6677: PUSH
6678: LD_INT 1
6680: ARRAY
6681: PUSH
6682: LD_VAR 0 2
6686: EQUAL
6687: IFFALSE 6698
// KillUnit ( vehicle ) ;
6689: LD_VAR 0 2
6693: PPUSH
6694: CALL_OW 66
6698: GO 6658
6700: POP
6701: POP
// end ;
6702: LD_VAR 0 3
6706: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
6707: LD_EXP 18
6711: NOT
6712: IFFALSE 6747
6714: GO 6716
6716: DISABLE
// begin initMiner := true ;
6717: LD_ADDR_EXP 18
6721: PUSH
6722: LD_INT 1
6724: ST_TO_ADDR
// minersList := [ ] ;
6725: LD_ADDR_EXP 19
6729: PUSH
6730: EMPTY
6731: ST_TO_ADDR
// minerMinesList := [ ] ;
6732: LD_ADDR_EXP 20
6736: PUSH
6737: EMPTY
6738: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
6739: LD_ADDR_EXP 21
6743: PUSH
6744: LD_INT 5
6746: ST_TO_ADDR
// end ;
6747: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
6748: LD_EXP 18
6752: IFFALSE 6770
6754: PUSH
6755: LD_INT 34
6757: PUSH
6758: LD_INT 81
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PPUSH
6765: CALL_OW 69
6769: AND
6770: IFFALSE 7233
6772: GO 6774
6774: DISABLE
6775: LD_INT 0
6777: PPUSH
6778: PPUSH
6779: PPUSH
6780: PPUSH
// begin enable ;
6781: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
6782: LD_ADDR_VAR 0 1
6786: PUSH
6787: LD_INT 34
6789: PUSH
6790: LD_INT 81
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: PUSH
6802: FOR_IN
6803: IFFALSE 6875
// begin if not i in minersList then
6805: LD_VAR 0 1
6809: PUSH
6810: LD_EXP 19
6814: IN
6815: NOT
6816: IFFALSE 6873
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
6818: LD_ADDR_EXP 19
6822: PUSH
6823: LD_EXP 19
6827: PPUSH
6828: LD_EXP 19
6832: PUSH
6833: LD_INT 1
6835: PLUS
6836: PPUSH
6837: LD_VAR 0 1
6841: PPUSH
6842: CALL_OW 1
6846: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
6847: LD_ADDR_EXP 20
6851: PUSH
6852: LD_EXP 20
6856: PPUSH
6857: LD_EXP 20
6861: PUSH
6862: LD_INT 1
6864: PLUS
6865: PPUSH
6866: EMPTY
6867: PPUSH
6868: CALL_OW 1
6872: ST_TO_ADDR
// end end ;
6873: GO 6802
6875: POP
6876: POP
// for i := minerMinesList downto 1 do
6877: LD_ADDR_VAR 0 1
6881: PUSH
6882: DOUBLE
6883: LD_EXP 20
6887: INC
6888: ST_TO_ADDR
6889: LD_INT 1
6891: PUSH
6892: FOR_DOWNTO
6893: IFFALSE 7231
// begin if IsLive ( minersList [ i ] ) then
6895: LD_EXP 19
6899: PUSH
6900: LD_VAR 0 1
6904: ARRAY
6905: PPUSH
6906: CALL_OW 300
6910: IFFALSE 6938
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
6912: LD_EXP 19
6916: PUSH
6917: LD_VAR 0 1
6921: ARRAY
6922: PPUSH
6923: LD_EXP 20
6927: PUSH
6928: LD_VAR 0 1
6932: ARRAY
6933: PPUSH
6934: CALL_OW 505
// if not minerMinesList [ i ] then
6938: LD_EXP 20
6942: PUSH
6943: LD_VAR 0 1
6947: ARRAY
6948: NOT
6949: IFFALSE 6953
// continue ;
6951: GO 6892
// for j := minerMinesList [ i ] downto 1 do
6953: LD_ADDR_VAR 0 2
6957: PUSH
6958: DOUBLE
6959: LD_EXP 20
6963: PUSH
6964: LD_VAR 0 1
6968: ARRAY
6969: INC
6970: ST_TO_ADDR
6971: LD_INT 1
6973: PUSH
6974: FOR_DOWNTO
6975: IFFALSE 7227
// begin side := GetSide ( minersList [ i ] ) ;
6977: LD_ADDR_VAR 0 3
6981: PUSH
6982: LD_EXP 19
6986: PUSH
6987: LD_VAR 0 1
6991: ARRAY
6992: PPUSH
6993: CALL_OW 255
6997: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
6998: LD_ADDR_VAR 0 4
7002: PUSH
7003: LD_EXP 20
7007: PUSH
7008: LD_VAR 0 1
7012: ARRAY
7013: PUSH
7014: LD_VAR 0 2
7018: ARRAY
7019: PUSH
7020: LD_INT 1
7022: ARRAY
7023: PPUSH
7024: LD_EXP 20
7028: PUSH
7029: LD_VAR 0 1
7033: ARRAY
7034: PUSH
7035: LD_VAR 0 2
7039: ARRAY
7040: PUSH
7041: LD_INT 2
7043: ARRAY
7044: PPUSH
7045: CALL_OW 428
7049: ST_TO_ADDR
// if not tmp then
7050: LD_VAR 0 4
7054: NOT
7055: IFFALSE 7059
// continue ;
7057: GO 6974
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
7059: LD_VAR 0 4
7063: PUSH
7064: LD_INT 81
7066: PUSH
7067: LD_VAR 0 3
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PPUSH
7076: CALL_OW 69
7080: IN
7081: IFFALSE 7131
7083: PUSH
7084: LD_EXP 20
7088: PUSH
7089: LD_VAR 0 1
7093: ARRAY
7094: PUSH
7095: LD_VAR 0 2
7099: ARRAY
7100: PUSH
7101: LD_INT 1
7103: ARRAY
7104: PPUSH
7105: LD_EXP 20
7109: PUSH
7110: LD_VAR 0 1
7114: ARRAY
7115: PUSH
7116: LD_VAR 0 2
7120: ARRAY
7121: PUSH
7122: LD_INT 2
7124: ARRAY
7125: PPUSH
7126: CALL_OW 458
7130: AND
7131: IFFALSE 7225
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
7133: LD_EXP 20
7137: PUSH
7138: LD_VAR 0 1
7142: ARRAY
7143: PUSH
7144: LD_VAR 0 2
7148: ARRAY
7149: PUSH
7150: LD_INT 1
7152: ARRAY
7153: PPUSH
7154: LD_EXP 20
7158: PUSH
7159: LD_VAR 0 1
7163: ARRAY
7164: PUSH
7165: LD_VAR 0 2
7169: ARRAY
7170: PUSH
7171: LD_INT 2
7173: ARRAY
7174: PPUSH
7175: LD_VAR 0 3
7179: PPUSH
7180: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
7184: LD_ADDR_EXP 20
7188: PUSH
7189: LD_EXP 20
7193: PPUSH
7194: LD_VAR 0 1
7198: PPUSH
7199: LD_EXP 20
7203: PUSH
7204: LD_VAR 0 1
7208: ARRAY
7209: PPUSH
7210: LD_VAR 0 2
7214: PPUSH
7215: CALL_OW 3
7219: PPUSH
7220: CALL_OW 1
7224: ST_TO_ADDR
// end ; end ;
7225: GO 6974
7227: POP
7228: POP
// end ;
7229: GO 6892
7231: POP
7232: POP
// end ;
7233: PPOPN 4
7235: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
7236: LD_INT 0
7238: PPUSH
7239: PPUSH
// result := false ;
7240: LD_ADDR_VAR 0 4
7244: PUSH
7245: LD_INT 0
7247: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
7248: LD_VAR 0 1
7252: PPUSH
7253: CALL_OW 264
7257: PUSH
7258: LD_INT 81
7260: EQUAL
7261: NOT
7262: IFFALSE 7266
// exit ;
7264: GO 7510
// index := GetElementIndex ( minersList , unit ) ;
7266: LD_ADDR_VAR 0 5
7270: PUSH
7271: LD_EXP 19
7275: PPUSH
7276: LD_VAR 0 1
7280: PPUSH
7281: CALL 30559 0 2
7285: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
7286: LD_EXP 20
7290: PUSH
7291: LD_VAR 0 5
7295: ARRAY
7296: PUSH
7297: LD_EXP 21
7301: GREATEREQUAL
7302: IFFALSE 7306
// exit ;
7304: GO 7510
// ComMoveXY ( unit , x , y ) ;
7306: LD_VAR 0 1
7310: PPUSH
7311: LD_VAR 0 2
7315: PPUSH
7316: LD_VAR 0 3
7320: PPUSH
7321: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7325: LD_INT 35
7327: PPUSH
7328: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
7332: LD_VAR 0 1
7336: PPUSH
7337: LD_VAR 0 2
7341: PPUSH
7342: LD_VAR 0 3
7346: PPUSH
7347: CALL 62605 0 3
7351: NOT
7352: IFFALSE 7365
7354: PUSH
7355: LD_VAR 0 1
7359: PPUSH
7360: CALL_OW 314
7364: AND
7365: IFFALSE 7369
// exit ;
7367: GO 7510
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
7369: LD_VAR 0 2
7373: PPUSH
7374: LD_VAR 0 3
7378: PPUSH
7379: CALL_OW 428
7383: PUSH
7384: LD_VAR 0 1
7388: EQUAL
7389: IFFALSE 7403
7391: PUSH
7392: LD_VAR 0 1
7396: PPUSH
7397: CALL_OW 314
7401: NOT
7402: AND
7403: IFFALSE 7325
// PlaySoundXY ( x , y , PlantMine ) ;
7405: LD_VAR 0 2
7409: PPUSH
7410: LD_VAR 0 3
7414: PPUSH
7415: LD_STRING PlantMine
7417: PPUSH
7418: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
7422: LD_VAR 0 2
7426: PPUSH
7427: LD_VAR 0 3
7431: PPUSH
7432: LD_VAR 0 1
7436: PPUSH
7437: CALL_OW 255
7441: PPUSH
7442: LD_INT 0
7444: PPUSH
7445: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
7449: LD_ADDR_EXP 20
7453: PUSH
7454: LD_EXP 20
7458: PPUSH
7459: LD_VAR 0 5
7463: PUSH
7464: LD_EXP 20
7468: PUSH
7469: LD_VAR 0 5
7473: ARRAY
7474: PUSH
7475: LD_INT 1
7477: PLUS
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PPUSH
7483: LD_VAR 0 2
7487: PUSH
7488: LD_VAR 0 3
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PPUSH
7497: CALL 30776 0 3
7501: ST_TO_ADDR
// result := true ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_INT 1
7509: ST_TO_ADDR
// end ;
7510: LD_VAR 0 4
7514: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
7515: LD_INT 0
7517: PPUSH
7518: PPUSH
7519: PPUSH
// if not unit in minersList then
7520: LD_VAR 0 1
7524: PUSH
7525: LD_EXP 19
7529: IN
7530: NOT
7531: IFFALSE 7535
// exit ;
7533: GO 7929
// index := GetElementIndex ( minersList , unit ) ;
7535: LD_ADDR_VAR 0 6
7539: PUSH
7540: LD_EXP 19
7544: PPUSH
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL 30559 0 2
7554: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
7555: LD_ADDR_VAR 0 5
7559: PUSH
7560: DOUBLE
7561: LD_EXP 20
7565: PUSH
7566: LD_VAR 0 6
7570: ARRAY
7571: INC
7572: ST_TO_ADDR
7573: LD_INT 1
7575: PUSH
7576: FOR_DOWNTO
7577: IFFALSE 7740
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
7579: LD_EXP 20
7583: PUSH
7584: LD_VAR 0 6
7588: ARRAY
7589: PUSH
7590: LD_VAR 0 5
7594: ARRAY
7595: PUSH
7596: LD_INT 1
7598: ARRAY
7599: PUSH
7600: LD_VAR 0 2
7604: EQUAL
7605: IFFALSE 7635
7607: PUSH
7608: LD_EXP 20
7612: PUSH
7613: LD_VAR 0 6
7617: ARRAY
7618: PUSH
7619: LD_VAR 0 5
7623: ARRAY
7624: PUSH
7625: LD_INT 2
7627: ARRAY
7628: PUSH
7629: LD_VAR 0 3
7633: EQUAL
7634: AND
7635: IFFALSE 7738
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
7637: LD_EXP 20
7641: PUSH
7642: LD_VAR 0 6
7646: ARRAY
7647: PUSH
7648: LD_VAR 0 5
7652: ARRAY
7653: PUSH
7654: LD_INT 1
7656: ARRAY
7657: PPUSH
7658: LD_EXP 20
7662: PUSH
7663: LD_VAR 0 6
7667: ARRAY
7668: PUSH
7669: LD_VAR 0 5
7673: ARRAY
7674: PUSH
7675: LD_INT 2
7677: ARRAY
7678: PPUSH
7679: LD_VAR 0 1
7683: PPUSH
7684: CALL_OW 255
7688: PPUSH
7689: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
7693: LD_ADDR_EXP 20
7697: PUSH
7698: LD_EXP 20
7702: PPUSH
7703: LD_VAR 0 6
7707: PPUSH
7708: LD_EXP 20
7712: PUSH
7713: LD_VAR 0 6
7717: ARRAY
7718: PPUSH
7719: LD_VAR 0 5
7723: PPUSH
7724: CALL_OW 3
7728: PPUSH
7729: CALL_OW 1
7733: ST_TO_ADDR
// exit ;
7734: POP
7735: POP
7736: GO 7929
// end ; end ;
7738: GO 7576
7740: POP
7741: POP
// for i := minerMinesList [ index ] downto 1 do
7742: LD_ADDR_VAR 0 5
7746: PUSH
7747: DOUBLE
7748: LD_EXP 20
7752: PUSH
7753: LD_VAR 0 6
7757: ARRAY
7758: INC
7759: ST_TO_ADDR
7760: LD_INT 1
7762: PUSH
7763: FOR_DOWNTO
7764: IFFALSE 7927
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
7766: LD_EXP 20
7770: PUSH
7771: LD_VAR 0 6
7775: ARRAY
7776: PUSH
7777: LD_VAR 0 5
7781: ARRAY
7782: PUSH
7783: LD_INT 1
7785: ARRAY
7786: PPUSH
7787: LD_EXP 20
7791: PUSH
7792: LD_VAR 0 6
7796: ARRAY
7797: PUSH
7798: LD_VAR 0 5
7802: ARRAY
7803: PUSH
7804: LD_INT 2
7806: ARRAY
7807: PPUSH
7808: LD_VAR 0 2
7812: PPUSH
7813: LD_VAR 0 3
7817: PPUSH
7818: CALL_OW 298
7822: PUSH
7823: LD_INT 6
7825: LESS
7826: IFFALSE 7925
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
7828: LD_EXP 20
7832: PUSH
7833: LD_VAR 0 6
7837: ARRAY
7838: PUSH
7839: LD_VAR 0 5
7843: ARRAY
7844: PUSH
7845: LD_INT 1
7847: ARRAY
7848: PPUSH
7849: LD_EXP 20
7853: PUSH
7854: LD_VAR 0 6
7858: ARRAY
7859: PUSH
7860: LD_VAR 0 5
7864: ARRAY
7865: PUSH
7866: LD_INT 2
7868: ARRAY
7869: PPUSH
7870: LD_VAR 0 1
7874: PPUSH
7875: CALL_OW 255
7879: PPUSH
7880: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
7884: LD_ADDR_EXP 20
7888: PUSH
7889: LD_EXP 20
7893: PPUSH
7894: LD_VAR 0 6
7898: PPUSH
7899: LD_EXP 20
7903: PUSH
7904: LD_VAR 0 6
7908: ARRAY
7909: PPUSH
7910: LD_VAR 0 5
7914: PPUSH
7915: CALL_OW 3
7919: PPUSH
7920: CALL_OW 1
7924: ST_TO_ADDR
// end ; end ;
7925: GO 7763
7927: POP
7928: POP
// end ;
7929: LD_VAR 0 4
7933: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
7934: LD_INT 0
7936: PPUSH
7937: PPUSH
7938: PPUSH
7939: PPUSH
7940: PPUSH
7941: PPUSH
7942: PPUSH
7943: PPUSH
7944: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
7945: LD_VAR 0 1
7949: PPUSH
7950: CALL_OW 264
7954: PUSH
7955: LD_INT 81
7957: EQUAL
7958: NOT
7959: IFTRUE 7974
7961: PUSH
7962: LD_VAR 0 1
7966: PUSH
7967: LD_EXP 19
7971: IN
7972: NOT
7973: OR
7974: IFFALSE 7978
// exit ;
7976: GO 8304
// index := GetElementIndex ( minersList , unit ) ;
7978: LD_ADDR_VAR 0 6
7982: PUSH
7983: LD_EXP 19
7987: PPUSH
7988: LD_VAR 0 1
7992: PPUSH
7993: CALL 30559 0 2
7997: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
7998: LD_ADDR_VAR 0 8
8002: PUSH
8003: LD_EXP 21
8007: PUSH
8008: LD_EXP 20
8012: PUSH
8013: LD_VAR 0 6
8017: ARRAY
8018: MINUS
8019: ST_TO_ADDR
// if not minesFreeAmount then
8020: LD_VAR 0 8
8024: NOT
8025: IFFALSE 8029
// exit ;
8027: GO 8304
// tmp := [ ] ;
8029: LD_ADDR_VAR 0 7
8033: PUSH
8034: EMPTY
8035: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
8036: LD_ADDR_VAR 0 5
8040: PUSH
8041: DOUBLE
8042: LD_INT 1
8044: DEC
8045: ST_TO_ADDR
8046: LD_VAR 0 8
8050: PUSH
8051: FOR_TO
8052: IFFALSE 8251
// begin _d := rand ( 0 , 5 ) ;
8054: LD_ADDR_VAR 0 11
8058: PUSH
8059: LD_INT 0
8061: PPUSH
8062: LD_INT 5
8064: PPUSH
8065: CALL_OW 12
8069: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
8070: LD_ADDR_VAR 0 12
8074: PUSH
8075: LD_INT 2
8077: PPUSH
8078: LD_INT 6
8080: PPUSH
8081: CALL_OW 12
8085: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
8086: LD_ADDR_VAR 0 9
8090: PUSH
8091: LD_VAR 0 2
8095: PPUSH
8096: LD_VAR 0 11
8100: PPUSH
8101: LD_VAR 0 12
8105: PPUSH
8106: CALL_OW 272
8110: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
8111: LD_ADDR_VAR 0 10
8115: PUSH
8116: LD_VAR 0 3
8120: PPUSH
8121: LD_VAR 0 11
8125: PPUSH
8126: LD_VAR 0 12
8130: PPUSH
8131: CALL_OW 273
8135: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
8136: LD_VAR 0 9
8140: PPUSH
8141: LD_VAR 0 10
8145: PPUSH
8146: CALL_OW 488
8150: IFFALSE 8174
8152: PUSH
8153: LD_VAR 0 9
8157: PUSH
8158: LD_VAR 0 10
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PUSH
8167: LD_VAR 0 7
8171: IN
8172: NOT
8173: AND
8174: IFFALSE 8193
8176: PUSH
8177: LD_VAR 0 9
8181: PPUSH
8182: LD_VAR 0 10
8186: PPUSH
8187: CALL_OW 458
8191: NOT
8192: AND
8193: IFFALSE 8235
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
8195: LD_ADDR_VAR 0 7
8199: PUSH
8200: LD_VAR 0 7
8204: PPUSH
8205: LD_VAR 0 7
8209: PUSH
8210: LD_INT 1
8212: PLUS
8213: PPUSH
8214: LD_VAR 0 9
8218: PUSH
8219: LD_VAR 0 10
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PPUSH
8228: CALL_OW 1
8232: ST_TO_ADDR
8233: GO 8249
// i := i - 1 ;
8235: LD_ADDR_VAR 0 5
8239: PUSH
8240: LD_VAR 0 5
8244: PUSH
8245: LD_INT 1
8247: MINUS
8248: ST_TO_ADDR
// end ;
8249: GO 8051
8251: POP
8252: POP
// for i in tmp do
8253: LD_ADDR_VAR 0 5
8257: PUSH
8258: LD_VAR 0 7
8262: PUSH
8263: FOR_IN
8264: IFFALSE 8302
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
8266: LD_VAR 0 1
8270: PPUSH
8271: LD_VAR 0 5
8275: PUSH
8276: LD_INT 1
8278: ARRAY
8279: PPUSH
8280: LD_VAR 0 5
8284: PUSH
8285: LD_INT 2
8287: ARRAY
8288: PPUSH
8289: CALL 7236 0 3
8293: NOT
8294: IFFALSE 8300
// exit ;
8296: POP
8297: POP
8298: GO 8304
8300: GO 8263
8302: POP
8303: POP
// end ;
8304: LD_VAR 0 4
8308: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
8309: LD_INT 0
8311: PPUSH
8312: PPUSH
8313: PPUSH
8314: PPUSH
8315: PPUSH
8316: PPUSH
8317: PPUSH
8318: PPUSH
8319: PPUSH
// if GetClass ( unit ) <> class_sniper then
8320: LD_VAR 0 1
8324: PPUSH
8325: CALL_OW 257
8329: PUSH
8330: LD_INT 5
8332: NONEQUAL
8333: IFFALSE 8337
// exit ;
8335: GO 8807
// dist := 8 ;
8337: LD_ADDR_VAR 0 5
8341: PUSH
8342: LD_INT 8
8344: ST_TO_ADDR
// viewRange := 12 ;
8345: LD_ADDR_VAR 0 8
8349: PUSH
8350: LD_INT 12
8352: ST_TO_ADDR
// side := GetSide ( unit ) ;
8353: LD_ADDR_VAR 0 6
8357: PUSH
8358: LD_VAR 0 1
8362: PPUSH
8363: CALL_OW 255
8367: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
8368: LD_INT 61
8370: PPUSH
8371: LD_VAR 0 6
8375: PPUSH
8376: CALL_OW 321
8380: PUSH
8381: LD_INT 2
8383: EQUAL
8384: IFFALSE 8394
// viewRange := 16 ;
8386: LD_ADDR_VAR 0 8
8390: PUSH
8391: LD_INT 16
8393: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
8394: LD_VAR 0 1
8398: PPUSH
8399: LD_VAR 0 2
8403: PPUSH
8404: LD_VAR 0 3
8408: PPUSH
8409: CALL_OW 297
8413: PUSH
8414: LD_VAR 0 5
8418: GREATER
8419: IFFALSE 8498
// begin ComMoveXY ( unit , x , y ) ;
8421: LD_VAR 0 1
8425: PPUSH
8426: LD_VAR 0 2
8430: PPUSH
8431: LD_VAR 0 3
8435: PPUSH
8436: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8440: LD_INT 35
8442: PPUSH
8443: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
8447: LD_VAR 0 1
8451: PPUSH
8452: LD_VAR 0 2
8456: PPUSH
8457: LD_VAR 0 3
8461: PPUSH
8462: CALL 62605 0 3
8466: NOT
8467: IFFALSE 8471
// exit ;
8469: GO 8807
// until GetDistUnitXY ( unit , x , y ) < dist ;
8471: LD_VAR 0 1
8475: PPUSH
8476: LD_VAR 0 2
8480: PPUSH
8481: LD_VAR 0 3
8485: PPUSH
8486: CALL_OW 297
8490: PUSH
8491: LD_VAR 0 5
8495: LESS
8496: IFFALSE 8440
// end ; ComTurnXY ( unit , x , y ) ;
8498: LD_VAR 0 1
8502: PPUSH
8503: LD_VAR 0 2
8507: PPUSH
8508: LD_VAR 0 3
8512: PPUSH
8513: CALL_OW 118
// repeat if Multiplayer then
8517: LD_OWVAR 4
8521: IFFALSE 8532
// wait ( 35 ) else
8523: LD_INT 35
8525: PPUSH
8526: CALL_OW 67
8530: GO 8539
// wait ( 5 ) ;
8532: LD_INT 5
8534: PPUSH
8535: CALL_OW 67
// _d := GetDir ( unit ) ;
8539: LD_ADDR_VAR 0 11
8543: PUSH
8544: LD_VAR 0 1
8548: PPUSH
8549: CALL_OW 254
8553: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
8554: LD_ADDR_VAR 0 7
8558: PUSH
8559: LD_VAR 0 1
8563: PPUSH
8564: CALL_OW 250
8568: PPUSH
8569: LD_VAR 0 1
8573: PPUSH
8574: CALL_OW 251
8578: PPUSH
8579: LD_VAR 0 2
8583: PPUSH
8584: LD_VAR 0 3
8588: PPUSH
8589: CALL 65241 0 4
8593: ST_TO_ADDR
// until dir = _d ;
8594: LD_VAR 0 7
8598: PUSH
8599: LD_VAR 0 11
8603: EQUAL
8604: IFFALSE 8517
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
8606: LD_ADDR_VAR 0 9
8610: PUSH
8611: LD_VAR 0 1
8615: PPUSH
8616: CALL_OW 250
8620: PPUSH
8621: LD_VAR 0 7
8625: PPUSH
8626: LD_VAR 0 5
8630: PPUSH
8631: CALL_OW 272
8635: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
8636: LD_ADDR_VAR 0 10
8640: PUSH
8641: LD_VAR 0 1
8645: PPUSH
8646: CALL_OW 251
8650: PPUSH
8651: LD_VAR 0 7
8655: PPUSH
8656: LD_VAR 0 5
8660: PPUSH
8661: CALL_OW 273
8665: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8666: LD_VAR 0 9
8670: PPUSH
8671: LD_VAR 0 10
8675: PPUSH
8676: CALL_OW 488
8680: NOT
8681: IFFALSE 8685
// exit ;
8683: GO 8807
// ComAnimCustom ( unit , 1 ) ;
8685: LD_VAR 0 1
8689: PPUSH
8690: LD_INT 1
8692: PPUSH
8693: CALL_OW 592
// p := 0 ;
8697: LD_ADDR_VAR 0 12
8701: PUSH
8702: LD_INT 0
8704: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
8705: LD_VAR 0 9
8709: PPUSH
8710: LD_VAR 0 10
8714: PPUSH
8715: LD_VAR 0 6
8719: PPUSH
8720: LD_VAR 0 8
8724: PPUSH
8725: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
8729: LD_INT 35
8731: PPUSH
8732: CALL_OW 67
// p := Inc ( p ) ;
8736: LD_ADDR_VAR 0 12
8740: PUSH
8741: LD_VAR 0 12
8745: PPUSH
8746: CALL 65197 0 1
8750: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
8751: LD_VAR 0 12
8755: PUSH
8756: LD_INT 3
8758: EQUAL
8759: IFTRUE 8773
8761: PUSH
8762: LD_VAR 0 1
8766: PPUSH
8767: CALL_OW 302
8771: NOT
8772: OR
8773: IFTRUE 8786
8775: PUSH
8776: LD_VAR 0 1
8780: PPUSH
8781: CALL_OW 301
8785: OR
8786: IFFALSE 8729
// RemoveSeeing ( _x , _y , side ) ;
8788: LD_VAR 0 9
8792: PPUSH
8793: LD_VAR 0 10
8797: PPUSH
8798: LD_VAR 0 6
8802: PPUSH
8803: CALL_OW 331
// end ;
8807: LD_VAR 0 4
8811: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
8812: LD_INT 0
8814: PPUSH
8815: PPUSH
8816: PPUSH
8817: PPUSH
8818: PPUSH
8819: PPUSH
8820: PPUSH
8821: PPUSH
8822: PPUSH
8823: PPUSH
8824: PPUSH
// if not unit then
8825: LD_VAR 0 1
8829: NOT
8830: IFFALSE 8834
// exit ;
8832: GO 9105
// side := GetSide ( unit ) ;
8834: LD_ADDR_VAR 0 3
8838: PUSH
8839: LD_VAR 0 1
8843: PPUSH
8844: CALL_OW 255
8848: ST_TO_ADDR
// x := GetX ( unit ) ;
8849: LD_ADDR_VAR 0 5
8853: PUSH
8854: LD_VAR 0 1
8858: PPUSH
8859: CALL_OW 250
8863: ST_TO_ADDR
// y := GetY ( unit ) ;
8864: LD_ADDR_VAR 0 6
8868: PUSH
8869: LD_VAR 0 1
8873: PPUSH
8874: CALL_OW 251
8878: ST_TO_ADDR
// r := 8 ;
8879: LD_ADDR_VAR 0 4
8883: PUSH
8884: LD_INT 8
8886: ST_TO_ADDR
// if x - r < 0 then
8887: LD_VAR 0 5
8891: PUSH
8892: LD_VAR 0 4
8896: MINUS
8897: PUSH
8898: LD_INT 0
8900: LESS
8901: IFFALSE 8913
// min_x := 0 else
8903: LD_ADDR_VAR 0 7
8907: PUSH
8908: LD_INT 0
8910: ST_TO_ADDR
8911: GO 8929
// min_x := x - r ;
8913: LD_ADDR_VAR 0 7
8917: PUSH
8918: LD_VAR 0 5
8922: PUSH
8923: LD_VAR 0 4
8927: MINUS
8928: ST_TO_ADDR
// if y - r < 0 then
8929: LD_VAR 0 6
8933: PUSH
8934: LD_VAR 0 4
8938: MINUS
8939: PUSH
8940: LD_INT 0
8942: LESS
8943: IFFALSE 8955
// min_y := 0 else
8945: LD_ADDR_VAR 0 8
8949: PUSH
8950: LD_INT 0
8952: ST_TO_ADDR
8953: GO 8971
// min_y := y - r ;
8955: LD_ADDR_VAR 0 8
8959: PUSH
8960: LD_VAR 0 6
8964: PUSH
8965: LD_VAR 0 4
8969: MINUS
8970: ST_TO_ADDR
// max_x := x + r ;
8971: LD_ADDR_VAR 0 9
8975: PUSH
8976: LD_VAR 0 5
8980: PUSH
8981: LD_VAR 0 4
8985: PLUS
8986: ST_TO_ADDR
// max_y := y + r ;
8987: LD_ADDR_VAR 0 10
8991: PUSH
8992: LD_VAR 0 6
8996: PUSH
8997: LD_VAR 0 4
9001: PLUS
9002: ST_TO_ADDR
// for _x = min_x to max_x do
9003: LD_ADDR_VAR 0 11
9007: PUSH
9008: DOUBLE
9009: LD_VAR 0 7
9013: DEC
9014: ST_TO_ADDR
9015: LD_VAR 0 9
9019: PUSH
9020: FOR_TO
9021: IFFALSE 9103
// for _y = min_y to max_y do
9023: LD_ADDR_VAR 0 12
9027: PUSH
9028: DOUBLE
9029: LD_VAR 0 8
9033: DEC
9034: ST_TO_ADDR
9035: LD_VAR 0 10
9039: PUSH
9040: FOR_TO
9041: IFFALSE 9099
// begin if not ValidHex ( _x , _y ) then
9043: LD_VAR 0 11
9047: PPUSH
9048: LD_VAR 0 12
9052: PPUSH
9053: CALL_OW 488
9057: NOT
9058: IFFALSE 9062
// continue ;
9060: GO 9040
// if MineAtPos ( _x , _y ) then
9062: LD_VAR 0 11
9066: PPUSH
9067: LD_VAR 0 12
9071: PPUSH
9072: CALL_OW 458
9076: IFFALSE 9097
// ViewMineAtPos ( _x , _y , side ) ;
9078: LD_VAR 0 11
9082: PPUSH
9083: LD_VAR 0 12
9087: PPUSH
9088: LD_VAR 0 3
9092: PPUSH
9093: CALL_OW 457
// end ;
9097: GO 9040
9099: POP
9100: POP
9101: GO 9020
9103: POP
9104: POP
// end ;
9105: LD_VAR 0 2
9109: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
9110: LD_INT 0
9112: PPUSH
9113: PPUSH
9114: PPUSH
9115: PPUSH
9116: PPUSH
9117: PPUSH
// if not units then
9118: LD_VAR 0 1
9122: NOT
9123: IFFALSE 9127
// exit ;
9125: GO 9557
// scaners := [ ] ;
9127: LD_ADDR_VAR 0 6
9131: PUSH
9132: EMPTY
9133: ST_TO_ADDR
// for i in units do
9134: LD_ADDR_VAR 0 3
9138: PUSH
9139: LD_VAR 0 1
9143: PUSH
9144: FOR_IN
9145: IFFALSE 9302
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
9147: LD_VAR 0 3
9151: PPUSH
9152: CALL_OW 264
9156: PUSH
9157: LD_INT 11
9159: NONEQUAL
9160: IFTRUE 9174
9162: PUSH
9163: LD_VAR 0 3
9167: PPUSH
9168: CALL_OW 302
9172: NOT
9173: OR
9174: IFTRUE 9191
9176: PUSH
9177: LD_VAR 0 3
9181: PPUSH
9182: CALL_OW 110
9186: PUSH
9187: LD_INT 502
9189: EQUAL
9190: OR
9191: IFFALSE 9195
// continue ;
9193: GO 9144
// ComStop ( i ) ;
9195: LD_VAR 0 3
9199: PPUSH
9200: CALL_OW 141
// x := GetX ( i ) ;
9204: LD_ADDR_VAR 0 4
9208: PUSH
9209: LD_VAR 0 3
9213: PPUSH
9214: CALL_OW 250
9218: ST_TO_ADDR
// y := GetY ( i ) ;
9219: LD_ADDR_VAR 0 5
9223: PUSH
9224: LD_VAR 0 3
9228: PPUSH
9229: CALL_OW 251
9233: ST_TO_ADDR
// if GetSide ( i ) = your_side then
9234: LD_VAR 0 3
9238: PPUSH
9239: CALL_OW 255
9243: PUSH
9244: LD_OWVAR 2
9248: EQUAL
9249: IFFALSE 9268
// PlaySoundXY ( x , y , mineDetector ) ;
9251: LD_VAR 0 4
9255: PPUSH
9256: LD_VAR 0 5
9260: PPUSH
9261: LD_STRING mineDetector
9263: PPUSH
9264: CALL_OW 366
// scaners := Join ( scaners , i ) ;
9268: LD_ADDR_VAR 0 6
9272: PUSH
9273: LD_VAR 0 6
9277: PPUSH
9278: LD_VAR 0 3
9282: PPUSH
9283: CALL 63824 0 2
9287: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
9288: LD_VAR 0 3
9292: PPUSH
9293: LD_INT 502
9295: PPUSH
9296: CALL_OW 109
// end ;
9300: GO 9144
9302: POP
9303: POP
// if not scaners then
9304: LD_VAR 0 6
9308: NOT
9309: IFFALSE 9313
// exit ;
9311: GO 9557
// wait ( 3 ) ;
9313: LD_INT 3
9315: PPUSH
9316: CALL_OW 67
// timer := 6 ;
9320: LD_ADDR_VAR 0 7
9324: PUSH
9325: LD_INT 6
9327: ST_TO_ADDR
// repeat for i in scaners do
9328: LD_ADDR_VAR 0 3
9332: PUSH
9333: LD_VAR 0 6
9337: PUSH
9338: FOR_IN
9339: IFFALSE 9455
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
9341: LD_VAR 0 3
9345: PPUSH
9346: CALL_OW 302
9350: NOT
9351: IFTRUE 9364
9353: PUSH
9354: LD_VAR 0 3
9358: PPUSH
9359: CALL_OW 314
9363: OR
9364: IFTRUE 9395
9366: PUSH
9367: LD_VAR 0 3
9371: PPUSH
9372: CALL_OW 263
9376: PUSH
9377: LD_INT 1
9379: EQUAL
9380: IFFALSE 9394
9382: PUSH
9383: LD_VAR 0 3
9387: PPUSH
9388: CALL_OW 311
9392: NOT
9393: AND
9394: OR
9395: IFFALSE 9439
// begin SetUnitDisplayNumber ( i , 0 ) ;
9397: LD_VAR 0 3
9401: PPUSH
9402: LD_INT 0
9404: PPUSH
9405: CALL_OW 505
// SetTag ( i , 0 ) ;
9409: LD_VAR 0 3
9413: PPUSH
9414: LD_INT 0
9416: PPUSH
9417: CALL_OW 109
// scaners := scaners diff i ;
9421: LD_ADDR_VAR 0 6
9425: PUSH
9426: LD_VAR 0 6
9430: PUSH
9431: LD_VAR 0 3
9435: DIFF
9436: ST_TO_ADDR
// continue ;
9437: GO 9338
// end ; SetUnitDisplayNumber ( i , timer ) ;
9439: LD_VAR 0 3
9443: PPUSH
9444: LD_VAR 0 7
9448: PPUSH
9449: CALL_OW 505
// end ;
9453: GO 9338
9455: POP
9456: POP
// if not scaners then
9457: LD_VAR 0 6
9461: NOT
9462: IFFALSE 9466
// exit ;
9464: GO 9557
// timer := Dec ( timer ) ;
9466: LD_ADDR_VAR 0 7
9470: PUSH
9471: LD_VAR 0 7
9475: PPUSH
9476: CALL 65219 0 1
9480: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9481: LD_INT 35
9483: PPUSH
9484: CALL_OW 67
// until timer = 0 ;
9488: LD_VAR 0 7
9492: PUSH
9493: LD_INT 0
9495: EQUAL
9496: IFFALSE 9328
// if not scaners then
9498: LD_VAR 0 6
9502: NOT
9503: IFFALSE 9507
// exit ;
9505: GO 9557
// for i in scaners do
9507: LD_ADDR_VAR 0 3
9511: PUSH
9512: LD_VAR 0 6
9516: PUSH
9517: FOR_IN
9518: IFFALSE 9555
// begin SetUnitDisplayNumber ( i , 0 ) ;
9520: LD_VAR 0 3
9524: PPUSH
9525: LD_INT 0
9527: PPUSH
9528: CALL_OW 505
// SetTag ( i , 0 ) ;
9532: LD_VAR 0 3
9536: PPUSH
9537: LD_INT 0
9539: PPUSH
9540: CALL_OW 109
// RevealDetectorMine ( i ) ;
9544: LD_VAR 0 3
9548: PPUSH
9549: CALL 8812 0 1
// end ;
9553: GO 9517
9555: POP
9556: POP
// end ;
9557: LD_VAR 0 2
9561: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
9562: LD_INT 0
9564: PPUSH
// if p1 = mine_detector_mode then
9565: LD_VAR 0 2
9569: PUSH
9570: LD_INT 103
9572: EQUAL
9573: IFFALSE 9584
// DetectMine ( units ) ;
9575: LD_VAR 0 1
9579: PPUSH
9580: CALL 9110 0 1
// end ; end_of_file
9584: LD_VAR 0 7
9588: RET
// export globalGameSaveCounter ; every 0 0$1 do
9589: GO 9591
9591: DISABLE
// begin enable ;
9592: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9593: LD_STRING updateTimer(
9595: PUSH
9596: LD_OWVAR 1
9600: STR
9601: PUSH
9602: LD_STRING );
9604: STR
9605: PPUSH
9606: CALL_OW 559
// end ;
9610: END
// every 0 0$1 do
9611: GO 9613
9613: DISABLE
// begin globalGameSaveCounter := 0 ;
9614: LD_ADDR_EXP 22
9618: PUSH
9619: LD_INT 0
9621: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
9622: LD_STRING setGameSaveCounter(0)
9624: PPUSH
9625: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
9629: LD_STRING initStreamRollete();
9631: PPUSH
9632: CALL_OW 559
// InitStreamMode ;
9636: CALL 10981 0 0
// DefineStreamItems ( false ) ;
9640: LD_INT 0
9642: PPUSH
9643: CALL 11445 0 1
// end ;
9647: END
// export function SOS_MapStart ( ) ; begin
9648: LD_INT 0
9650: PPUSH
// if streamModeActive then
9651: LD_EXP 23
9655: IFFALSE 9664
// DefineStreamItems ( true ) ;
9657: LD_INT 1
9659: PPUSH
9660: CALL 11445 0 1
// UpdateLuaVariables ( ) ;
9664: CALL 9681 0 0
// UpdateFactoryWaypoints ( ) ;
9668: CALL 24567 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9672: CALL 24819 0 0
// end ;
9676: LD_VAR 0 1
9680: RET
// function UpdateLuaVariables ( ) ; begin
9681: LD_INT 0
9683: PPUSH
// if globalGameSaveCounter then
9684: LD_EXP 22
9688: IFFALSE 9722
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
9690: LD_ADDR_EXP 22
9694: PUSH
9695: LD_EXP 22
9699: PPUSH
9700: CALL 65197 0 1
9704: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9705: LD_STRING setGameSaveCounter(
9707: PUSH
9708: LD_EXP 22
9712: STR
9713: PUSH
9714: LD_STRING )
9716: STR
9717: PPUSH
9718: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9722: LD_STRING setGameDifficulty(
9724: PUSH
9725: LD_OWVAR 67
9729: STR
9730: PUSH
9731: LD_STRING )
9733: STR
9734: PPUSH
9735: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
9739: LD_STRING displayDifficulty(
9741: PUSH
9742: LD_OWVAR 67
9746: STR
9747: PUSH
9748: LD_STRING )
9750: STR
9751: PPUSH
9752: CALL_OW 559
// end ;
9756: LD_VAR 0 1
9760: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9761: LD_INT 0
9763: PPUSH
// if p2 = stream_mode then
9764: LD_VAR 0 2
9768: PUSH
9769: LD_INT 100
9771: EQUAL
9772: IFFALSE 10775
// begin if not StreamModeActive then
9774: LD_EXP 23
9778: NOT
9779: IFFALSE 9789
// StreamModeActive := true ;
9781: LD_ADDR_EXP 23
9785: PUSH
9786: LD_INT 1
9788: ST_TO_ADDR
// if p3 = 0 then
9789: LD_VAR 0 3
9793: PUSH
9794: LD_INT 0
9796: EQUAL
9797: IFFALSE 9803
// InitStreamMode ;
9799: CALL 10981 0 0
// if p3 = 1 then
9803: LD_VAR 0 3
9807: PUSH
9808: LD_INT 1
9810: EQUAL
9811: IFFALSE 9821
// sRocket := true ;
9813: LD_ADDR_EXP 28
9817: PUSH
9818: LD_INT 1
9820: ST_TO_ADDR
// if p3 = 2 then
9821: LD_VAR 0 3
9825: PUSH
9826: LD_INT 2
9828: EQUAL
9829: IFFALSE 9839
// sSpeed := true ;
9831: LD_ADDR_EXP 27
9835: PUSH
9836: LD_INT 1
9838: ST_TO_ADDR
// if p3 = 3 then
9839: LD_VAR 0 3
9843: PUSH
9844: LD_INT 3
9846: EQUAL
9847: IFFALSE 9857
// sEngine := true ;
9849: LD_ADDR_EXP 29
9853: PUSH
9854: LD_INT 1
9856: ST_TO_ADDR
// if p3 = 4 then
9857: LD_VAR 0 3
9861: PUSH
9862: LD_INT 4
9864: EQUAL
9865: IFFALSE 9875
// sSpec := true ;
9867: LD_ADDR_EXP 26
9871: PUSH
9872: LD_INT 1
9874: ST_TO_ADDR
// if p3 = 5 then
9875: LD_VAR 0 3
9879: PUSH
9880: LD_INT 5
9882: EQUAL
9883: IFFALSE 9893
// sLevel := true ;
9885: LD_ADDR_EXP 30
9889: PUSH
9890: LD_INT 1
9892: ST_TO_ADDR
// if p3 = 6 then
9893: LD_VAR 0 3
9897: PUSH
9898: LD_INT 6
9900: EQUAL
9901: IFFALSE 9911
// sArmoury := true ;
9903: LD_ADDR_EXP 31
9907: PUSH
9908: LD_INT 1
9910: ST_TO_ADDR
// if p3 = 7 then
9911: LD_VAR 0 3
9915: PUSH
9916: LD_INT 7
9918: EQUAL
9919: IFFALSE 9929
// sRadar := true ;
9921: LD_ADDR_EXP 32
9925: PUSH
9926: LD_INT 1
9928: ST_TO_ADDR
// if p3 = 8 then
9929: LD_VAR 0 3
9933: PUSH
9934: LD_INT 8
9936: EQUAL
9937: IFFALSE 9947
// sBunker := true ;
9939: LD_ADDR_EXP 33
9943: PUSH
9944: LD_INT 1
9946: ST_TO_ADDR
// if p3 = 9 then
9947: LD_VAR 0 3
9951: PUSH
9952: LD_INT 9
9954: EQUAL
9955: IFFALSE 9965
// sHack := true ;
9957: LD_ADDR_EXP 34
9961: PUSH
9962: LD_INT 1
9964: ST_TO_ADDR
// if p3 = 10 then
9965: LD_VAR 0 3
9969: PUSH
9970: LD_INT 10
9972: EQUAL
9973: IFFALSE 9983
// sFire := true ;
9975: LD_ADDR_EXP 35
9979: PUSH
9980: LD_INT 1
9982: ST_TO_ADDR
// if p3 = 11 then
9983: LD_VAR 0 3
9987: PUSH
9988: LD_INT 11
9990: EQUAL
9991: IFFALSE 10001
// sRefresh := true ;
9993: LD_ADDR_EXP 36
9997: PUSH
9998: LD_INT 1
10000: ST_TO_ADDR
// if p3 = 12 then
10001: LD_VAR 0 3
10005: PUSH
10006: LD_INT 12
10008: EQUAL
10009: IFFALSE 10019
// sExp := true ;
10011: LD_ADDR_EXP 37
10015: PUSH
10016: LD_INT 1
10018: ST_TO_ADDR
// if p3 = 13 then
10019: LD_VAR 0 3
10023: PUSH
10024: LD_INT 13
10026: EQUAL
10027: IFFALSE 10037
// sDepot := true ;
10029: LD_ADDR_EXP 38
10033: PUSH
10034: LD_INT 1
10036: ST_TO_ADDR
// if p3 = 14 then
10037: LD_VAR 0 3
10041: PUSH
10042: LD_INT 14
10044: EQUAL
10045: IFFALSE 10055
// sFlag := true ;
10047: LD_ADDR_EXP 39
10051: PUSH
10052: LD_INT 1
10054: ST_TO_ADDR
// if p3 = 15 then
10055: LD_VAR 0 3
10059: PUSH
10060: LD_INT 15
10062: EQUAL
10063: IFFALSE 10073
// sKamikadze := true ;
10065: LD_ADDR_EXP 47
10069: PUSH
10070: LD_INT 1
10072: ST_TO_ADDR
// if p3 = 16 then
10073: LD_VAR 0 3
10077: PUSH
10078: LD_INT 16
10080: EQUAL
10081: IFFALSE 10091
// sTroll := true ;
10083: LD_ADDR_EXP 48
10087: PUSH
10088: LD_INT 1
10090: ST_TO_ADDR
// if p3 = 17 then
10091: LD_VAR 0 3
10095: PUSH
10096: LD_INT 17
10098: EQUAL
10099: IFFALSE 10109
// sSlow := true ;
10101: LD_ADDR_EXP 49
10105: PUSH
10106: LD_INT 1
10108: ST_TO_ADDR
// if p3 = 18 then
10109: LD_VAR 0 3
10113: PUSH
10114: LD_INT 18
10116: EQUAL
10117: IFFALSE 10127
// sLack := true ;
10119: LD_ADDR_EXP 50
10123: PUSH
10124: LD_INT 1
10126: ST_TO_ADDR
// if p3 = 19 then
10127: LD_VAR 0 3
10131: PUSH
10132: LD_INT 19
10134: EQUAL
10135: IFFALSE 10145
// sTank := true ;
10137: LD_ADDR_EXP 52
10141: PUSH
10142: LD_INT 1
10144: ST_TO_ADDR
// if p3 = 20 then
10145: LD_VAR 0 3
10149: PUSH
10150: LD_INT 20
10152: EQUAL
10153: IFFALSE 10163
// sRemote := true ;
10155: LD_ADDR_EXP 53
10159: PUSH
10160: LD_INT 1
10162: ST_TO_ADDR
// if p3 = 21 then
10163: LD_VAR 0 3
10167: PUSH
10168: LD_INT 21
10170: EQUAL
10171: IFFALSE 10181
// sPowell := true ;
10173: LD_ADDR_EXP 54
10177: PUSH
10178: LD_INT 1
10180: ST_TO_ADDR
// if p3 = 22 then
10181: LD_VAR 0 3
10185: PUSH
10186: LD_INT 22
10188: EQUAL
10189: IFFALSE 10199
// sTeleport := true ;
10191: LD_ADDR_EXP 57
10195: PUSH
10196: LD_INT 1
10198: ST_TO_ADDR
// if p3 = 23 then
10199: LD_VAR 0 3
10203: PUSH
10204: LD_INT 23
10206: EQUAL
10207: IFFALSE 10217
// sOilTower := true ;
10209: LD_ADDR_EXP 59
10213: PUSH
10214: LD_INT 1
10216: ST_TO_ADDR
// if p3 = 24 then
10217: LD_VAR 0 3
10221: PUSH
10222: LD_INT 24
10224: EQUAL
10225: IFFALSE 10235
// sShovel := true ;
10227: LD_ADDR_EXP 60
10231: PUSH
10232: LD_INT 1
10234: ST_TO_ADDR
// if p3 = 25 then
10235: LD_VAR 0 3
10239: PUSH
10240: LD_INT 25
10242: EQUAL
10243: IFFALSE 10253
// sSheik := true ;
10245: LD_ADDR_EXP 61
10249: PUSH
10250: LD_INT 1
10252: ST_TO_ADDR
// if p3 = 26 then
10253: LD_VAR 0 3
10257: PUSH
10258: LD_INT 26
10260: EQUAL
10261: IFFALSE 10271
// sEarthquake := true ;
10263: LD_ADDR_EXP 63
10267: PUSH
10268: LD_INT 1
10270: ST_TO_ADDR
// if p3 = 27 then
10271: LD_VAR 0 3
10275: PUSH
10276: LD_INT 27
10278: EQUAL
10279: IFFALSE 10289
// sAI := true ;
10281: LD_ADDR_EXP 64
10285: PUSH
10286: LD_INT 1
10288: ST_TO_ADDR
// if p3 = 28 then
10289: LD_VAR 0 3
10293: PUSH
10294: LD_INT 28
10296: EQUAL
10297: IFFALSE 10307
// sCargo := true ;
10299: LD_ADDR_EXP 67
10303: PUSH
10304: LD_INT 1
10306: ST_TO_ADDR
// if p3 = 29 then
10307: LD_VAR 0 3
10311: PUSH
10312: LD_INT 29
10314: EQUAL
10315: IFFALSE 10325
// sDLaser := true ;
10317: LD_ADDR_EXP 68
10321: PUSH
10322: LD_INT 1
10324: ST_TO_ADDR
// if p3 = 30 then
10325: LD_VAR 0 3
10329: PUSH
10330: LD_INT 30
10332: EQUAL
10333: IFFALSE 10343
// sExchange := true ;
10335: LD_ADDR_EXP 69
10339: PUSH
10340: LD_INT 1
10342: ST_TO_ADDR
// if p3 = 31 then
10343: LD_VAR 0 3
10347: PUSH
10348: LD_INT 31
10350: EQUAL
10351: IFFALSE 10361
// sFac := true ;
10353: LD_ADDR_EXP 70
10357: PUSH
10358: LD_INT 1
10360: ST_TO_ADDR
// if p3 = 32 then
10361: LD_VAR 0 3
10365: PUSH
10366: LD_INT 32
10368: EQUAL
10369: IFFALSE 10379
// sPower := true ;
10371: LD_ADDR_EXP 71
10375: PUSH
10376: LD_INT 1
10378: ST_TO_ADDR
// if p3 = 33 then
10379: LD_VAR 0 3
10383: PUSH
10384: LD_INT 33
10386: EQUAL
10387: IFFALSE 10397
// sRandom := true ;
10389: LD_ADDR_EXP 72
10393: PUSH
10394: LD_INT 1
10396: ST_TO_ADDR
// if p3 = 34 then
10397: LD_VAR 0 3
10401: PUSH
10402: LD_INT 34
10404: EQUAL
10405: IFFALSE 10415
// sShield := true ;
10407: LD_ADDR_EXP 73
10411: PUSH
10412: LD_INT 1
10414: ST_TO_ADDR
// if p3 = 35 then
10415: LD_VAR 0 3
10419: PUSH
10420: LD_INT 35
10422: EQUAL
10423: IFFALSE 10433
// sTime := true ;
10425: LD_ADDR_EXP 74
10429: PUSH
10430: LD_INT 1
10432: ST_TO_ADDR
// if p3 = 36 then
10433: LD_VAR 0 3
10437: PUSH
10438: LD_INT 36
10440: EQUAL
10441: IFFALSE 10451
// sTools := true ;
10443: LD_ADDR_EXP 75
10447: PUSH
10448: LD_INT 1
10450: ST_TO_ADDR
// if p3 = 101 then
10451: LD_VAR 0 3
10455: PUSH
10456: LD_INT 101
10458: EQUAL
10459: IFFALSE 10469
// sSold := true ;
10461: LD_ADDR_EXP 40
10465: PUSH
10466: LD_INT 1
10468: ST_TO_ADDR
// if p3 = 102 then
10469: LD_VAR 0 3
10473: PUSH
10474: LD_INT 102
10476: EQUAL
10477: IFFALSE 10487
// sDiff := true ;
10479: LD_ADDR_EXP 41
10483: PUSH
10484: LD_INT 1
10486: ST_TO_ADDR
// if p3 = 103 then
10487: LD_VAR 0 3
10491: PUSH
10492: LD_INT 103
10494: EQUAL
10495: IFFALSE 10505
// sFog := true ;
10497: LD_ADDR_EXP 44
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// if p3 = 104 then
10505: LD_VAR 0 3
10509: PUSH
10510: LD_INT 104
10512: EQUAL
10513: IFFALSE 10523
// sReset := true ;
10515: LD_ADDR_EXP 45
10519: PUSH
10520: LD_INT 1
10522: ST_TO_ADDR
// if p3 = 105 then
10523: LD_VAR 0 3
10527: PUSH
10528: LD_INT 105
10530: EQUAL
10531: IFFALSE 10541
// sSun := true ;
10533: LD_ADDR_EXP 46
10537: PUSH
10538: LD_INT 1
10540: ST_TO_ADDR
// if p3 = 106 then
10541: LD_VAR 0 3
10545: PUSH
10546: LD_INT 106
10548: EQUAL
10549: IFFALSE 10559
// sTiger := true ;
10551: LD_ADDR_EXP 42
10555: PUSH
10556: LD_INT 1
10558: ST_TO_ADDR
// if p3 = 107 then
10559: LD_VAR 0 3
10563: PUSH
10564: LD_INT 107
10566: EQUAL
10567: IFFALSE 10577
// sBomb := true ;
10569: LD_ADDR_EXP 43
10573: PUSH
10574: LD_INT 1
10576: ST_TO_ADDR
// if p3 = 108 then
10577: LD_VAR 0 3
10581: PUSH
10582: LD_INT 108
10584: EQUAL
10585: IFFALSE 10595
// sWound := true ;
10587: LD_ADDR_EXP 51
10591: PUSH
10592: LD_INT 1
10594: ST_TO_ADDR
// if p3 = 109 then
10595: LD_VAR 0 3
10599: PUSH
10600: LD_INT 109
10602: EQUAL
10603: IFFALSE 10613
// sBetray := true ;
10605: LD_ADDR_EXP 55
10609: PUSH
10610: LD_INT 1
10612: ST_TO_ADDR
// if p3 = 110 then
10613: LD_VAR 0 3
10617: PUSH
10618: LD_INT 110
10620: EQUAL
10621: IFFALSE 10631
// sContamin := true ;
10623: LD_ADDR_EXP 56
10627: PUSH
10628: LD_INT 1
10630: ST_TO_ADDR
// if p3 = 111 then
10631: LD_VAR 0 3
10635: PUSH
10636: LD_INT 111
10638: EQUAL
10639: IFFALSE 10649
// sOil := true ;
10641: LD_ADDR_EXP 58
10645: PUSH
10646: LD_INT 1
10648: ST_TO_ADDR
// if p3 = 112 then
10649: LD_VAR 0 3
10653: PUSH
10654: LD_INT 112
10656: EQUAL
10657: IFFALSE 10667
// sStu := true ;
10659: LD_ADDR_EXP 62
10663: PUSH
10664: LD_INT 1
10666: ST_TO_ADDR
// if p3 = 113 then
10667: LD_VAR 0 3
10671: PUSH
10672: LD_INT 113
10674: EQUAL
10675: IFFALSE 10685
// sBazooka := true ;
10677: LD_ADDR_EXP 65
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// if p3 = 114 then
10685: LD_VAR 0 3
10689: PUSH
10690: LD_INT 114
10692: EQUAL
10693: IFFALSE 10703
// sMortar := true ;
10695: LD_ADDR_EXP 66
10699: PUSH
10700: LD_INT 1
10702: ST_TO_ADDR
// if p3 = 115 then
10703: LD_VAR 0 3
10707: PUSH
10708: LD_INT 115
10710: EQUAL
10711: IFFALSE 10721
// sRanger := true ;
10713: LD_ADDR_EXP 76
10717: PUSH
10718: LD_INT 1
10720: ST_TO_ADDR
// if p3 = 116 then
10721: LD_VAR 0 3
10725: PUSH
10726: LD_INT 116
10728: EQUAL
10729: IFFALSE 10739
// sComputer := true ;
10731: LD_ADDR_EXP 77
10735: PUSH
10736: LD_INT 1
10738: ST_TO_ADDR
// if p3 = 117 then
10739: LD_VAR 0 3
10743: PUSH
10744: LD_INT 117
10746: EQUAL
10747: IFFALSE 10757
// s30 := true ;
10749: LD_ADDR_EXP 78
10753: PUSH
10754: LD_INT 1
10756: ST_TO_ADDR
// if p3 = 118 then
10757: LD_VAR 0 3
10761: PUSH
10762: LD_INT 118
10764: EQUAL
10765: IFFALSE 10775
// s60 := true ;
10767: LD_ADDR_EXP 79
10771: PUSH
10772: LD_INT 1
10774: ST_TO_ADDR
// end ; if p2 = hack_mode then
10775: LD_VAR 0 2
10779: PUSH
10780: LD_INT 101
10782: EQUAL
10783: IFFALSE 10911
// begin case p3 of 1 :
10785: LD_VAR 0 3
10789: PUSH
10790: LD_INT 1
10792: DOUBLE
10793: EQUAL
10794: IFTRUE 10798
10796: GO 10805
10798: POP
// hHackUnlimitedResources ; 2 :
10799: CALL 23174 0 0
10803: GO 10911
10805: LD_INT 2
10807: DOUBLE
10808: EQUAL
10809: IFTRUE 10813
10811: GO 10820
10813: POP
// hHackSetLevel10 ; 3 :
10814: CALL 23307 0 0
10818: GO 10911
10820: LD_INT 3
10822: DOUBLE
10823: EQUAL
10824: IFTRUE 10828
10826: GO 10835
10828: POP
// hHackSetLevel10YourUnits ; 4 :
10829: CALL 23392 0 0
10833: GO 10911
10835: LD_INT 4
10837: DOUBLE
10838: EQUAL
10839: IFTRUE 10843
10841: GO 10850
10843: POP
// hHackInvincible ; 5 :
10844: CALL 23840 0 0
10848: GO 10911
10850: LD_INT 5
10852: DOUBLE
10853: EQUAL
10854: IFTRUE 10858
10856: GO 10865
10858: POP
// hHackInvisible ; 6 :
10859: CALL 23951 0 0
10863: GO 10911
10865: LD_INT 6
10867: DOUBLE
10868: EQUAL
10869: IFTRUE 10873
10871: GO 10880
10873: POP
// hHackChangeYourSide ; 7 :
10874: CALL 24008 0 0
10878: GO 10911
10880: LD_INT 7
10882: DOUBLE
10883: EQUAL
10884: IFTRUE 10888
10886: GO 10895
10888: POP
// hHackChangeUnitSide ; 8 :
10889: CALL 24050 0 0
10893: GO 10911
10895: LD_INT 8
10897: DOUBLE
10898: EQUAL
10899: IFTRUE 10903
10901: GO 10910
10903: POP
// hHackFog ; end ;
10904: CALL 24151 0 0
10908: GO 10911
10910: POP
// end ; if p2 = game_save_mode then
10911: LD_VAR 0 2
10915: PUSH
10916: LD_INT 102
10918: EQUAL
10919: IFFALSE 10976
// begin if p3 = 1 then
10921: LD_VAR 0 3
10925: PUSH
10926: LD_INT 1
10928: EQUAL
10929: IFFALSE 10941
// globalGameSaveCounter := p4 ;
10931: LD_ADDR_EXP 22
10935: PUSH
10936: LD_VAR 0 4
10940: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10941: LD_VAR 0 3
10945: PUSH
10946: LD_INT 2
10948: EQUAL
10949: IFFALSE 10957
10951: PUSH
10952: LD_EXP 22
10956: AND
10957: IFFALSE 10976
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10959: LD_STRING setGameSaveCounter(
10961: PUSH
10962: LD_EXP 22
10966: STR
10967: PUSH
10968: LD_STRING )
10970: STR
10971: PPUSH
10972: CALL_OW 559
// end ; end ;
10976: LD_VAR 0 7
10980: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10981: LD_INT 0
10983: PPUSH
// streamModeActive := false ;
10984: LD_ADDR_EXP 23
10988: PUSH
10989: LD_INT 0
10991: ST_TO_ADDR
// normalCounter := 36 ;
10992: LD_ADDR_EXP 24
10996: PUSH
10997: LD_INT 36
10999: ST_TO_ADDR
// hardcoreCounter := 18 ;
11000: LD_ADDR_EXP 25
11004: PUSH
11005: LD_INT 18
11007: ST_TO_ADDR
// sRocket := false ;
11008: LD_ADDR_EXP 28
11012: PUSH
11013: LD_INT 0
11015: ST_TO_ADDR
// sSpeed := false ;
11016: LD_ADDR_EXP 27
11020: PUSH
11021: LD_INT 0
11023: ST_TO_ADDR
// sEngine := false ;
11024: LD_ADDR_EXP 29
11028: PUSH
11029: LD_INT 0
11031: ST_TO_ADDR
// sSpec := false ;
11032: LD_ADDR_EXP 26
11036: PUSH
11037: LD_INT 0
11039: ST_TO_ADDR
// sLevel := false ;
11040: LD_ADDR_EXP 30
11044: PUSH
11045: LD_INT 0
11047: ST_TO_ADDR
// sArmoury := false ;
11048: LD_ADDR_EXP 31
11052: PUSH
11053: LD_INT 0
11055: ST_TO_ADDR
// sRadar := false ;
11056: LD_ADDR_EXP 32
11060: PUSH
11061: LD_INT 0
11063: ST_TO_ADDR
// sBunker := false ;
11064: LD_ADDR_EXP 33
11068: PUSH
11069: LD_INT 0
11071: ST_TO_ADDR
// sHack := false ;
11072: LD_ADDR_EXP 34
11076: PUSH
11077: LD_INT 0
11079: ST_TO_ADDR
// sFire := false ;
11080: LD_ADDR_EXP 35
11084: PUSH
11085: LD_INT 0
11087: ST_TO_ADDR
// sRefresh := false ;
11088: LD_ADDR_EXP 36
11092: PUSH
11093: LD_INT 0
11095: ST_TO_ADDR
// sExp := false ;
11096: LD_ADDR_EXP 37
11100: PUSH
11101: LD_INT 0
11103: ST_TO_ADDR
// sDepot := false ;
11104: LD_ADDR_EXP 38
11108: PUSH
11109: LD_INT 0
11111: ST_TO_ADDR
// sFlag := false ;
11112: LD_ADDR_EXP 39
11116: PUSH
11117: LD_INT 0
11119: ST_TO_ADDR
// sKamikadze := false ;
11120: LD_ADDR_EXP 47
11124: PUSH
11125: LD_INT 0
11127: ST_TO_ADDR
// sTroll := false ;
11128: LD_ADDR_EXP 48
11132: PUSH
11133: LD_INT 0
11135: ST_TO_ADDR
// sSlow := false ;
11136: LD_ADDR_EXP 49
11140: PUSH
11141: LD_INT 0
11143: ST_TO_ADDR
// sLack := false ;
11144: LD_ADDR_EXP 50
11148: PUSH
11149: LD_INT 0
11151: ST_TO_ADDR
// sTank := false ;
11152: LD_ADDR_EXP 52
11156: PUSH
11157: LD_INT 0
11159: ST_TO_ADDR
// sRemote := false ;
11160: LD_ADDR_EXP 53
11164: PUSH
11165: LD_INT 0
11167: ST_TO_ADDR
// sPowell := false ;
11168: LD_ADDR_EXP 54
11172: PUSH
11173: LD_INT 0
11175: ST_TO_ADDR
// sTeleport := false ;
11176: LD_ADDR_EXP 57
11180: PUSH
11181: LD_INT 0
11183: ST_TO_ADDR
// sOilTower := false ;
11184: LD_ADDR_EXP 59
11188: PUSH
11189: LD_INT 0
11191: ST_TO_ADDR
// sShovel := false ;
11192: LD_ADDR_EXP 60
11196: PUSH
11197: LD_INT 0
11199: ST_TO_ADDR
// sSheik := false ;
11200: LD_ADDR_EXP 61
11204: PUSH
11205: LD_INT 0
11207: ST_TO_ADDR
// sEarthquake := false ;
11208: LD_ADDR_EXP 63
11212: PUSH
11213: LD_INT 0
11215: ST_TO_ADDR
// sAI := false ;
11216: LD_ADDR_EXP 64
11220: PUSH
11221: LD_INT 0
11223: ST_TO_ADDR
// sCargo := false ;
11224: LD_ADDR_EXP 67
11228: PUSH
11229: LD_INT 0
11231: ST_TO_ADDR
// sDLaser := false ;
11232: LD_ADDR_EXP 68
11236: PUSH
11237: LD_INT 0
11239: ST_TO_ADDR
// sExchange := false ;
11240: LD_ADDR_EXP 69
11244: PUSH
11245: LD_INT 0
11247: ST_TO_ADDR
// sFac := false ;
11248: LD_ADDR_EXP 70
11252: PUSH
11253: LD_INT 0
11255: ST_TO_ADDR
// sPower := false ;
11256: LD_ADDR_EXP 71
11260: PUSH
11261: LD_INT 0
11263: ST_TO_ADDR
// sRandom := false ;
11264: LD_ADDR_EXP 72
11268: PUSH
11269: LD_INT 0
11271: ST_TO_ADDR
// sShield := false ;
11272: LD_ADDR_EXP 73
11276: PUSH
11277: LD_INT 0
11279: ST_TO_ADDR
// sTime := false ;
11280: LD_ADDR_EXP 74
11284: PUSH
11285: LD_INT 0
11287: ST_TO_ADDR
// sTools := false ;
11288: LD_ADDR_EXP 75
11292: PUSH
11293: LD_INT 0
11295: ST_TO_ADDR
// sSold := false ;
11296: LD_ADDR_EXP 40
11300: PUSH
11301: LD_INT 0
11303: ST_TO_ADDR
// sDiff := false ;
11304: LD_ADDR_EXP 41
11308: PUSH
11309: LD_INT 0
11311: ST_TO_ADDR
// sFog := false ;
11312: LD_ADDR_EXP 44
11316: PUSH
11317: LD_INT 0
11319: ST_TO_ADDR
// sReset := false ;
11320: LD_ADDR_EXP 45
11324: PUSH
11325: LD_INT 0
11327: ST_TO_ADDR
// sSun := false ;
11328: LD_ADDR_EXP 46
11332: PUSH
11333: LD_INT 0
11335: ST_TO_ADDR
// sTiger := false ;
11336: LD_ADDR_EXP 42
11340: PUSH
11341: LD_INT 0
11343: ST_TO_ADDR
// sBomb := false ;
11344: LD_ADDR_EXP 43
11348: PUSH
11349: LD_INT 0
11351: ST_TO_ADDR
// sWound := false ;
11352: LD_ADDR_EXP 51
11356: PUSH
11357: LD_INT 0
11359: ST_TO_ADDR
// sBetray := false ;
11360: LD_ADDR_EXP 55
11364: PUSH
11365: LD_INT 0
11367: ST_TO_ADDR
// sContamin := false ;
11368: LD_ADDR_EXP 56
11372: PUSH
11373: LD_INT 0
11375: ST_TO_ADDR
// sOil := false ;
11376: LD_ADDR_EXP 58
11380: PUSH
11381: LD_INT 0
11383: ST_TO_ADDR
// sStu := false ;
11384: LD_ADDR_EXP 62
11388: PUSH
11389: LD_INT 0
11391: ST_TO_ADDR
// sBazooka := false ;
11392: LD_ADDR_EXP 65
11396: PUSH
11397: LD_INT 0
11399: ST_TO_ADDR
// sMortar := false ;
11400: LD_ADDR_EXP 66
11404: PUSH
11405: LD_INT 0
11407: ST_TO_ADDR
// sRanger := false ;
11408: LD_ADDR_EXP 76
11412: PUSH
11413: LD_INT 0
11415: ST_TO_ADDR
// sComputer := false ;
11416: LD_ADDR_EXP 77
11420: PUSH
11421: LD_INT 0
11423: ST_TO_ADDR
// s30 := false ;
11424: LD_ADDR_EXP 78
11428: PUSH
11429: LD_INT 0
11431: ST_TO_ADDR
// s60 := false ;
11432: LD_ADDR_EXP 79
11436: PUSH
11437: LD_INT 0
11439: ST_TO_ADDR
// end ;
11440: LD_VAR 0 1
11444: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11445: LD_INT 0
11447: PPUSH
11448: PPUSH
11449: PPUSH
11450: PPUSH
11451: PPUSH
11452: PPUSH
11453: PPUSH
// result := [ ] ;
11454: LD_ADDR_VAR 0 2
11458: PUSH
11459: EMPTY
11460: ST_TO_ADDR
// if campaign_id = 1 then
11461: LD_OWVAR 69
11465: PUSH
11466: LD_INT 1
11468: EQUAL
11469: IFFALSE 14635
// begin case mission_number of 1 :
11471: LD_OWVAR 70
11475: PUSH
11476: LD_INT 1
11478: DOUBLE
11479: EQUAL
11480: IFTRUE 11484
11482: GO 11560
11484: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11485: LD_ADDR_VAR 0 2
11489: PUSH
11490: LD_INT 2
11492: PUSH
11493: LD_INT 4
11495: PUSH
11496: LD_INT 11
11498: PUSH
11499: LD_INT 12
11501: PUSH
11502: LD_INT 15
11504: PUSH
11505: LD_INT 16
11507: PUSH
11508: LD_INT 22
11510: PUSH
11511: LD_INT 23
11513: PUSH
11514: LD_INT 26
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 101
11530: PUSH
11531: LD_INT 102
11533: PUSH
11534: LD_INT 106
11536: PUSH
11537: LD_INT 116
11539: PUSH
11540: LD_INT 117
11542: PUSH
11543: LD_INT 118
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: ST_TO_ADDR
11558: GO 14633
11560: LD_INT 2
11562: DOUBLE
11563: EQUAL
11564: IFTRUE 11568
11566: GO 11652
11568: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11569: LD_ADDR_VAR 0 2
11573: PUSH
11574: LD_INT 2
11576: PUSH
11577: LD_INT 4
11579: PUSH
11580: LD_INT 11
11582: PUSH
11583: LD_INT 12
11585: PUSH
11586: LD_INT 15
11588: PUSH
11589: LD_INT 16
11591: PUSH
11592: LD_INT 22
11594: PUSH
11595: LD_INT 23
11597: PUSH
11598: LD_INT 26
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 101
11614: PUSH
11615: LD_INT 102
11617: PUSH
11618: LD_INT 105
11620: PUSH
11621: LD_INT 106
11623: PUSH
11624: LD_INT 108
11626: PUSH
11627: LD_INT 116
11629: PUSH
11630: LD_INT 117
11632: PUSH
11633: LD_INT 118
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: ST_TO_ADDR
11650: GO 14633
11652: LD_INT 3
11654: DOUBLE
11655: EQUAL
11656: IFTRUE 11660
11658: GO 11748
11660: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11661: LD_ADDR_VAR 0 2
11665: PUSH
11666: LD_INT 2
11668: PUSH
11669: LD_INT 4
11671: PUSH
11672: LD_INT 5
11674: PUSH
11675: LD_INT 11
11677: PUSH
11678: LD_INT 12
11680: PUSH
11681: LD_INT 15
11683: PUSH
11684: LD_INT 16
11686: PUSH
11687: LD_INT 22
11689: PUSH
11690: LD_INT 26
11692: PUSH
11693: LD_INT 36
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 101
11710: PUSH
11711: LD_INT 102
11713: PUSH
11714: LD_INT 105
11716: PUSH
11717: LD_INT 106
11719: PUSH
11720: LD_INT 108
11722: PUSH
11723: LD_INT 116
11725: PUSH
11726: LD_INT 117
11728: PUSH
11729: LD_INT 118
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: ST_TO_ADDR
11746: GO 14633
11748: LD_INT 4
11750: DOUBLE
11751: EQUAL
11752: IFTRUE 11756
11754: GO 11852
11756: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11757: LD_ADDR_VAR 0 2
11761: PUSH
11762: LD_INT 2
11764: PUSH
11765: LD_INT 4
11767: PUSH
11768: LD_INT 5
11770: PUSH
11771: LD_INT 8
11773: PUSH
11774: LD_INT 11
11776: PUSH
11777: LD_INT 12
11779: PUSH
11780: LD_INT 15
11782: PUSH
11783: LD_INT 16
11785: PUSH
11786: LD_INT 22
11788: PUSH
11789: LD_INT 23
11791: PUSH
11792: LD_INT 26
11794: PUSH
11795: LD_INT 36
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: PUSH
11812: LD_INT 101
11814: PUSH
11815: LD_INT 102
11817: PUSH
11818: LD_INT 105
11820: PUSH
11821: LD_INT 106
11823: PUSH
11824: LD_INT 108
11826: PUSH
11827: LD_INT 116
11829: PUSH
11830: LD_INT 117
11832: PUSH
11833: LD_INT 118
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: ST_TO_ADDR
11850: GO 14633
11852: LD_INT 5
11854: DOUBLE
11855: EQUAL
11856: IFTRUE 11860
11858: GO 11972
11860: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11861: LD_ADDR_VAR 0 2
11865: PUSH
11866: LD_INT 2
11868: PUSH
11869: LD_INT 4
11871: PUSH
11872: LD_INT 5
11874: PUSH
11875: LD_INT 6
11877: PUSH
11878: LD_INT 8
11880: PUSH
11881: LD_INT 11
11883: PUSH
11884: LD_INT 12
11886: PUSH
11887: LD_INT 15
11889: PUSH
11890: LD_INT 16
11892: PUSH
11893: LD_INT 22
11895: PUSH
11896: LD_INT 23
11898: PUSH
11899: LD_INT 25
11901: PUSH
11902: LD_INT 26
11904: PUSH
11905: LD_INT 36
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: PUSH
11924: LD_INT 101
11926: PUSH
11927: LD_INT 102
11929: PUSH
11930: LD_INT 105
11932: PUSH
11933: LD_INT 106
11935: PUSH
11936: LD_INT 108
11938: PUSH
11939: LD_INT 109
11941: PUSH
11942: LD_INT 112
11944: PUSH
11945: LD_INT 116
11947: PUSH
11948: LD_INT 117
11950: PUSH
11951: LD_INT 118
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: ST_TO_ADDR
11970: GO 14633
11972: LD_INT 6
11974: DOUBLE
11975: EQUAL
11976: IFTRUE 11980
11978: GO 12112
11980: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11981: LD_ADDR_VAR 0 2
11985: PUSH
11986: LD_INT 2
11988: PUSH
11989: LD_INT 4
11991: PUSH
11992: LD_INT 5
11994: PUSH
11995: LD_INT 6
11997: PUSH
11998: LD_INT 8
12000: PUSH
12001: LD_INT 11
12003: PUSH
12004: LD_INT 12
12006: PUSH
12007: LD_INT 15
12009: PUSH
12010: LD_INT 16
12012: PUSH
12013: LD_INT 20
12015: PUSH
12016: LD_INT 21
12018: PUSH
12019: LD_INT 22
12021: PUSH
12022: LD_INT 23
12024: PUSH
12025: LD_INT 25
12027: PUSH
12028: LD_INT 26
12030: PUSH
12031: LD_INT 30
12033: PUSH
12034: LD_INT 31
12036: PUSH
12037: LD_INT 32
12039: PUSH
12040: LD_INT 36
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 101
12066: PUSH
12067: LD_INT 102
12069: PUSH
12070: LD_INT 105
12072: PUSH
12073: LD_INT 106
12075: PUSH
12076: LD_INT 108
12078: PUSH
12079: LD_INT 109
12081: PUSH
12082: LD_INT 112
12084: PUSH
12085: LD_INT 116
12087: PUSH
12088: LD_INT 117
12090: PUSH
12091: LD_INT 118
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: ST_TO_ADDR
12110: GO 14633
12112: LD_INT 7
12114: DOUBLE
12115: EQUAL
12116: IFTRUE 12120
12118: GO 12232
12120: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12121: LD_ADDR_VAR 0 2
12125: PUSH
12126: LD_INT 2
12128: PUSH
12129: LD_INT 4
12131: PUSH
12132: LD_INT 5
12134: PUSH
12135: LD_INT 7
12137: PUSH
12138: LD_INT 11
12140: PUSH
12141: LD_INT 12
12143: PUSH
12144: LD_INT 15
12146: PUSH
12147: LD_INT 16
12149: PUSH
12150: LD_INT 20
12152: PUSH
12153: LD_INT 21
12155: PUSH
12156: LD_INT 22
12158: PUSH
12159: LD_INT 23
12161: PUSH
12162: LD_INT 25
12164: PUSH
12165: LD_INT 26
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: PUSH
12184: LD_INT 101
12186: PUSH
12187: LD_INT 102
12189: PUSH
12190: LD_INT 103
12192: PUSH
12193: LD_INT 105
12195: PUSH
12196: LD_INT 106
12198: PUSH
12199: LD_INT 108
12201: PUSH
12202: LD_INT 112
12204: PUSH
12205: LD_INT 116
12207: PUSH
12208: LD_INT 117
12210: PUSH
12211: LD_INT 118
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: ST_TO_ADDR
12230: GO 14633
12232: LD_INT 8
12234: DOUBLE
12235: EQUAL
12236: IFTRUE 12240
12238: GO 12380
12240: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12241: LD_ADDR_VAR 0 2
12245: PUSH
12246: LD_INT 2
12248: PUSH
12249: LD_INT 4
12251: PUSH
12252: LD_INT 5
12254: PUSH
12255: LD_INT 6
12257: PUSH
12258: LD_INT 7
12260: PUSH
12261: LD_INT 8
12263: PUSH
12264: LD_INT 11
12266: PUSH
12267: LD_INT 12
12269: PUSH
12270: LD_INT 15
12272: PUSH
12273: LD_INT 16
12275: PUSH
12276: LD_INT 20
12278: PUSH
12279: LD_INT 21
12281: PUSH
12282: LD_INT 22
12284: PUSH
12285: LD_INT 23
12287: PUSH
12288: LD_INT 25
12290: PUSH
12291: LD_INT 26
12293: PUSH
12294: LD_INT 30
12296: PUSH
12297: LD_INT 31
12299: PUSH
12300: LD_INT 32
12302: PUSH
12303: LD_INT 36
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 101
12330: PUSH
12331: LD_INT 102
12333: PUSH
12334: LD_INT 103
12336: PUSH
12337: LD_INT 105
12339: PUSH
12340: LD_INT 106
12342: PUSH
12343: LD_INT 108
12345: PUSH
12346: LD_INT 109
12348: PUSH
12349: LD_INT 112
12351: PUSH
12352: LD_INT 116
12354: PUSH
12355: LD_INT 117
12357: PUSH
12358: LD_INT 118
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: ST_TO_ADDR
12378: GO 14633
12380: LD_INT 9
12382: DOUBLE
12383: EQUAL
12384: IFTRUE 12388
12386: GO 12536
12388: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12389: LD_ADDR_VAR 0 2
12393: PUSH
12394: LD_INT 2
12396: PUSH
12397: LD_INT 4
12399: PUSH
12400: LD_INT 5
12402: PUSH
12403: LD_INT 6
12405: PUSH
12406: LD_INT 7
12408: PUSH
12409: LD_INT 8
12411: PUSH
12412: LD_INT 11
12414: PUSH
12415: LD_INT 12
12417: PUSH
12418: LD_INT 15
12420: PUSH
12421: LD_INT 16
12423: PUSH
12424: LD_INT 20
12426: PUSH
12427: LD_INT 21
12429: PUSH
12430: LD_INT 22
12432: PUSH
12433: LD_INT 23
12435: PUSH
12436: LD_INT 25
12438: PUSH
12439: LD_INT 26
12441: PUSH
12442: LD_INT 28
12444: PUSH
12445: LD_INT 30
12447: PUSH
12448: LD_INT 31
12450: PUSH
12451: LD_INT 32
12453: PUSH
12454: LD_INT 36
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 101
12482: PUSH
12483: LD_INT 102
12485: PUSH
12486: LD_INT 103
12488: PUSH
12489: LD_INT 105
12491: PUSH
12492: LD_INT 106
12494: PUSH
12495: LD_INT 108
12497: PUSH
12498: LD_INT 109
12500: PUSH
12501: LD_INT 112
12503: PUSH
12504: LD_INT 114
12506: PUSH
12507: LD_INT 116
12509: PUSH
12510: LD_INT 117
12512: PUSH
12513: LD_INT 118
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: ST_TO_ADDR
12534: GO 14633
12536: LD_INT 10
12538: DOUBLE
12539: EQUAL
12540: IFTRUE 12544
12542: GO 12740
12544: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12545: LD_ADDR_VAR 0 2
12549: PUSH
12550: LD_INT 2
12552: PUSH
12553: LD_INT 4
12555: PUSH
12556: LD_INT 5
12558: PUSH
12559: LD_INT 6
12561: PUSH
12562: LD_INT 7
12564: PUSH
12565: LD_INT 8
12567: PUSH
12568: LD_INT 9
12570: PUSH
12571: LD_INT 10
12573: PUSH
12574: LD_INT 11
12576: PUSH
12577: LD_INT 12
12579: PUSH
12580: LD_INT 13
12582: PUSH
12583: LD_INT 14
12585: PUSH
12586: LD_INT 15
12588: PUSH
12589: LD_INT 16
12591: PUSH
12592: LD_INT 17
12594: PUSH
12595: LD_INT 18
12597: PUSH
12598: LD_INT 19
12600: PUSH
12601: LD_INT 20
12603: PUSH
12604: LD_INT 21
12606: PUSH
12607: LD_INT 22
12609: PUSH
12610: LD_INT 23
12612: PUSH
12613: LD_INT 24
12615: PUSH
12616: LD_INT 25
12618: PUSH
12619: LD_INT 26
12621: PUSH
12622: LD_INT 28
12624: PUSH
12625: LD_INT 30
12627: PUSH
12628: LD_INT 31
12630: PUSH
12631: LD_INT 32
12633: PUSH
12634: LD_INT 36
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 101
12670: PUSH
12671: LD_INT 102
12673: PUSH
12674: LD_INT 103
12676: PUSH
12677: LD_INT 104
12679: PUSH
12680: LD_INT 105
12682: PUSH
12683: LD_INT 106
12685: PUSH
12686: LD_INT 107
12688: PUSH
12689: LD_INT 108
12691: PUSH
12692: LD_INT 109
12694: PUSH
12695: LD_INT 110
12697: PUSH
12698: LD_INT 111
12700: PUSH
12701: LD_INT 112
12703: PUSH
12704: LD_INT 114
12706: PUSH
12707: LD_INT 116
12709: PUSH
12710: LD_INT 117
12712: PUSH
12713: LD_INT 118
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: ST_TO_ADDR
12738: GO 14633
12740: LD_INT 11
12742: DOUBLE
12743: EQUAL
12744: IFTRUE 12748
12746: GO 12952
12748: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12749: LD_ADDR_VAR 0 2
12753: PUSH
12754: LD_INT 2
12756: PUSH
12757: LD_INT 3
12759: PUSH
12760: LD_INT 4
12762: PUSH
12763: LD_INT 5
12765: PUSH
12766: LD_INT 6
12768: PUSH
12769: LD_INT 7
12771: PUSH
12772: LD_INT 8
12774: PUSH
12775: LD_INT 9
12777: PUSH
12778: LD_INT 10
12780: PUSH
12781: LD_INT 11
12783: PUSH
12784: LD_INT 12
12786: PUSH
12787: LD_INT 13
12789: PUSH
12790: LD_INT 14
12792: PUSH
12793: LD_INT 15
12795: PUSH
12796: LD_INT 16
12798: PUSH
12799: LD_INT 17
12801: PUSH
12802: LD_INT 18
12804: PUSH
12805: LD_INT 19
12807: PUSH
12808: LD_INT 20
12810: PUSH
12811: LD_INT 21
12813: PUSH
12814: LD_INT 22
12816: PUSH
12817: LD_INT 23
12819: PUSH
12820: LD_INT 24
12822: PUSH
12823: LD_INT 25
12825: PUSH
12826: LD_INT 26
12828: PUSH
12829: LD_INT 28
12831: PUSH
12832: LD_INT 30
12834: PUSH
12835: LD_INT 31
12837: PUSH
12838: LD_INT 32
12840: PUSH
12841: LD_INT 34
12843: PUSH
12844: LD_INT 36
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: PUSH
12880: LD_INT 101
12882: PUSH
12883: LD_INT 102
12885: PUSH
12886: LD_INT 103
12888: PUSH
12889: LD_INT 104
12891: PUSH
12892: LD_INT 105
12894: PUSH
12895: LD_INT 106
12897: PUSH
12898: LD_INT 107
12900: PUSH
12901: LD_INT 108
12903: PUSH
12904: LD_INT 109
12906: PUSH
12907: LD_INT 110
12909: PUSH
12910: LD_INT 111
12912: PUSH
12913: LD_INT 112
12915: PUSH
12916: LD_INT 114
12918: PUSH
12919: LD_INT 116
12921: PUSH
12922: LD_INT 117
12924: PUSH
12925: LD_INT 118
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: ST_TO_ADDR
12950: GO 14633
12952: LD_INT 12
12954: DOUBLE
12955: EQUAL
12956: IFTRUE 12960
12958: GO 13180
12960: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12961: LD_ADDR_VAR 0 2
12965: PUSH
12966: LD_INT 1
12968: PUSH
12969: LD_INT 2
12971: PUSH
12972: LD_INT 3
12974: PUSH
12975: LD_INT 4
12977: PUSH
12978: LD_INT 5
12980: PUSH
12981: LD_INT 6
12983: PUSH
12984: LD_INT 7
12986: PUSH
12987: LD_INT 8
12989: PUSH
12990: LD_INT 9
12992: PUSH
12993: LD_INT 10
12995: PUSH
12996: LD_INT 11
12998: PUSH
12999: LD_INT 12
13001: PUSH
13002: LD_INT 13
13004: PUSH
13005: LD_INT 14
13007: PUSH
13008: LD_INT 15
13010: PUSH
13011: LD_INT 16
13013: PUSH
13014: LD_INT 17
13016: PUSH
13017: LD_INT 18
13019: PUSH
13020: LD_INT 19
13022: PUSH
13023: LD_INT 20
13025: PUSH
13026: LD_INT 21
13028: PUSH
13029: LD_INT 22
13031: PUSH
13032: LD_INT 23
13034: PUSH
13035: LD_INT 24
13037: PUSH
13038: LD_INT 25
13040: PUSH
13041: LD_INT 26
13043: PUSH
13044: LD_INT 27
13046: PUSH
13047: LD_INT 28
13049: PUSH
13050: LD_INT 30
13052: PUSH
13053: LD_INT 31
13055: PUSH
13056: LD_INT 32
13058: PUSH
13059: LD_INT 33
13061: PUSH
13062: LD_INT 34
13064: PUSH
13065: LD_INT 36
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 101
13106: PUSH
13107: LD_INT 102
13109: PUSH
13110: LD_INT 103
13112: PUSH
13113: LD_INT 104
13115: PUSH
13116: LD_INT 105
13118: PUSH
13119: LD_INT 106
13121: PUSH
13122: LD_INT 107
13124: PUSH
13125: LD_INT 108
13127: PUSH
13128: LD_INT 109
13130: PUSH
13131: LD_INT 110
13133: PUSH
13134: LD_INT 111
13136: PUSH
13137: LD_INT 112
13139: PUSH
13140: LD_INT 113
13142: PUSH
13143: LD_INT 114
13145: PUSH
13146: LD_INT 116
13148: PUSH
13149: LD_INT 117
13151: PUSH
13152: LD_INT 118
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: ST_TO_ADDR
13178: GO 14633
13180: LD_INT 13
13182: DOUBLE
13183: EQUAL
13184: IFTRUE 13188
13186: GO 13396
13188: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13189: LD_ADDR_VAR 0 2
13193: PUSH
13194: LD_INT 1
13196: PUSH
13197: LD_INT 2
13199: PUSH
13200: LD_INT 3
13202: PUSH
13203: LD_INT 4
13205: PUSH
13206: LD_INT 5
13208: PUSH
13209: LD_INT 8
13211: PUSH
13212: LD_INT 9
13214: PUSH
13215: LD_INT 10
13217: PUSH
13218: LD_INT 11
13220: PUSH
13221: LD_INT 12
13223: PUSH
13224: LD_INT 14
13226: PUSH
13227: LD_INT 15
13229: PUSH
13230: LD_INT 16
13232: PUSH
13233: LD_INT 17
13235: PUSH
13236: LD_INT 18
13238: PUSH
13239: LD_INT 19
13241: PUSH
13242: LD_INT 20
13244: PUSH
13245: LD_INT 21
13247: PUSH
13248: LD_INT 22
13250: PUSH
13251: LD_INT 23
13253: PUSH
13254: LD_INT 24
13256: PUSH
13257: LD_INT 25
13259: PUSH
13260: LD_INT 26
13262: PUSH
13263: LD_INT 27
13265: PUSH
13266: LD_INT 28
13268: PUSH
13269: LD_INT 30
13271: PUSH
13272: LD_INT 31
13274: PUSH
13275: LD_INT 32
13277: PUSH
13278: LD_INT 33
13280: PUSH
13281: LD_INT 34
13283: PUSH
13284: LD_INT 36
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 101
13322: PUSH
13323: LD_INT 102
13325: PUSH
13326: LD_INT 103
13328: PUSH
13329: LD_INT 104
13331: PUSH
13332: LD_INT 105
13334: PUSH
13335: LD_INT 106
13337: PUSH
13338: LD_INT 107
13340: PUSH
13341: LD_INT 108
13343: PUSH
13344: LD_INT 109
13346: PUSH
13347: LD_INT 110
13349: PUSH
13350: LD_INT 111
13352: PUSH
13353: LD_INT 112
13355: PUSH
13356: LD_INT 113
13358: PUSH
13359: LD_INT 114
13361: PUSH
13362: LD_INT 116
13364: PUSH
13365: LD_INT 117
13367: PUSH
13368: LD_INT 118
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: ST_TO_ADDR
13394: GO 14633
13396: LD_INT 14
13398: DOUBLE
13399: EQUAL
13400: IFTRUE 13404
13402: GO 13628
13404: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13405: LD_ADDR_VAR 0 2
13409: PUSH
13410: LD_INT 1
13412: PUSH
13413: LD_INT 2
13415: PUSH
13416: LD_INT 3
13418: PUSH
13419: LD_INT 4
13421: PUSH
13422: LD_INT 5
13424: PUSH
13425: LD_INT 6
13427: PUSH
13428: LD_INT 7
13430: PUSH
13431: LD_INT 8
13433: PUSH
13434: LD_INT 9
13436: PUSH
13437: LD_INT 10
13439: PUSH
13440: LD_INT 11
13442: PUSH
13443: LD_INT 12
13445: PUSH
13446: LD_INT 13
13448: PUSH
13449: LD_INT 14
13451: PUSH
13452: LD_INT 15
13454: PUSH
13455: LD_INT 16
13457: PUSH
13458: LD_INT 17
13460: PUSH
13461: LD_INT 18
13463: PUSH
13464: LD_INT 19
13466: PUSH
13467: LD_INT 20
13469: PUSH
13470: LD_INT 21
13472: PUSH
13473: LD_INT 22
13475: PUSH
13476: LD_INT 23
13478: PUSH
13479: LD_INT 24
13481: PUSH
13482: LD_INT 25
13484: PUSH
13485: LD_INT 26
13487: PUSH
13488: LD_INT 27
13490: PUSH
13491: LD_INT 28
13493: PUSH
13494: LD_INT 29
13496: PUSH
13497: LD_INT 30
13499: PUSH
13500: LD_INT 31
13502: PUSH
13503: LD_INT 32
13505: PUSH
13506: LD_INT 33
13508: PUSH
13509: LD_INT 34
13511: PUSH
13512: LD_INT 36
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 101
13554: PUSH
13555: LD_INT 102
13557: PUSH
13558: LD_INT 103
13560: PUSH
13561: LD_INT 104
13563: PUSH
13564: LD_INT 105
13566: PUSH
13567: LD_INT 106
13569: PUSH
13570: LD_INT 107
13572: PUSH
13573: LD_INT 108
13575: PUSH
13576: LD_INT 109
13578: PUSH
13579: LD_INT 110
13581: PUSH
13582: LD_INT 111
13584: PUSH
13585: LD_INT 112
13587: PUSH
13588: LD_INT 113
13590: PUSH
13591: LD_INT 114
13593: PUSH
13594: LD_INT 116
13596: PUSH
13597: LD_INT 117
13599: PUSH
13600: LD_INT 118
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: LIST
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: ST_TO_ADDR
13626: GO 14633
13628: LD_INT 15
13630: DOUBLE
13631: EQUAL
13632: IFTRUE 13636
13634: GO 13860
13636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13637: LD_ADDR_VAR 0 2
13641: PUSH
13642: LD_INT 1
13644: PUSH
13645: LD_INT 2
13647: PUSH
13648: LD_INT 3
13650: PUSH
13651: LD_INT 4
13653: PUSH
13654: LD_INT 5
13656: PUSH
13657: LD_INT 6
13659: PUSH
13660: LD_INT 7
13662: PUSH
13663: LD_INT 8
13665: PUSH
13666: LD_INT 9
13668: PUSH
13669: LD_INT 10
13671: PUSH
13672: LD_INT 11
13674: PUSH
13675: LD_INT 12
13677: PUSH
13678: LD_INT 13
13680: PUSH
13681: LD_INT 14
13683: PUSH
13684: LD_INT 15
13686: PUSH
13687: LD_INT 16
13689: PUSH
13690: LD_INT 17
13692: PUSH
13693: LD_INT 18
13695: PUSH
13696: LD_INT 19
13698: PUSH
13699: LD_INT 20
13701: PUSH
13702: LD_INT 21
13704: PUSH
13705: LD_INT 22
13707: PUSH
13708: LD_INT 23
13710: PUSH
13711: LD_INT 24
13713: PUSH
13714: LD_INT 25
13716: PUSH
13717: LD_INT 26
13719: PUSH
13720: LD_INT 27
13722: PUSH
13723: LD_INT 28
13725: PUSH
13726: LD_INT 29
13728: PUSH
13729: LD_INT 30
13731: PUSH
13732: LD_INT 31
13734: PUSH
13735: LD_INT 32
13737: PUSH
13738: LD_INT 33
13740: PUSH
13741: LD_INT 34
13743: PUSH
13744: LD_INT 36
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 101
13786: PUSH
13787: LD_INT 102
13789: PUSH
13790: LD_INT 103
13792: PUSH
13793: LD_INT 104
13795: PUSH
13796: LD_INT 105
13798: PUSH
13799: LD_INT 106
13801: PUSH
13802: LD_INT 107
13804: PUSH
13805: LD_INT 108
13807: PUSH
13808: LD_INT 109
13810: PUSH
13811: LD_INT 110
13813: PUSH
13814: LD_INT 111
13816: PUSH
13817: LD_INT 112
13819: PUSH
13820: LD_INT 113
13822: PUSH
13823: LD_INT 114
13825: PUSH
13826: LD_INT 116
13828: PUSH
13829: LD_INT 117
13831: PUSH
13832: LD_INT 118
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: LIST
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: ST_TO_ADDR
13858: GO 14633
13860: LD_INT 16
13862: DOUBLE
13863: EQUAL
13864: IFTRUE 13868
13866: GO 14004
13868: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13869: LD_ADDR_VAR 0 2
13873: PUSH
13874: LD_INT 2
13876: PUSH
13877: LD_INT 4
13879: PUSH
13880: LD_INT 5
13882: PUSH
13883: LD_INT 7
13885: PUSH
13886: LD_INT 11
13888: PUSH
13889: LD_INT 12
13891: PUSH
13892: LD_INT 15
13894: PUSH
13895: LD_INT 16
13897: PUSH
13898: LD_INT 20
13900: PUSH
13901: LD_INT 21
13903: PUSH
13904: LD_INT 22
13906: PUSH
13907: LD_INT 23
13909: PUSH
13910: LD_INT 25
13912: PUSH
13913: LD_INT 26
13915: PUSH
13916: LD_INT 30
13918: PUSH
13919: LD_INT 31
13921: PUSH
13922: LD_INT 32
13924: PUSH
13925: LD_INT 33
13927: PUSH
13928: LD_INT 34
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: PUSH
13952: LD_INT 101
13954: PUSH
13955: LD_INT 102
13957: PUSH
13958: LD_INT 103
13960: PUSH
13961: LD_INT 106
13963: PUSH
13964: LD_INT 108
13966: PUSH
13967: LD_INT 112
13969: PUSH
13970: LD_INT 113
13972: PUSH
13973: LD_INT 114
13975: PUSH
13976: LD_INT 116
13978: PUSH
13979: LD_INT 117
13981: PUSH
13982: LD_INT 118
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: ST_TO_ADDR
14002: GO 14633
14004: LD_INT 17
14006: DOUBLE
14007: EQUAL
14008: IFTRUE 14012
14010: GO 14236
14012: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14013: LD_ADDR_VAR 0 2
14017: PUSH
14018: LD_INT 1
14020: PUSH
14021: LD_INT 2
14023: PUSH
14024: LD_INT 3
14026: PUSH
14027: LD_INT 4
14029: PUSH
14030: LD_INT 5
14032: PUSH
14033: LD_INT 6
14035: PUSH
14036: LD_INT 7
14038: PUSH
14039: LD_INT 8
14041: PUSH
14042: LD_INT 9
14044: PUSH
14045: LD_INT 10
14047: PUSH
14048: LD_INT 11
14050: PUSH
14051: LD_INT 12
14053: PUSH
14054: LD_INT 13
14056: PUSH
14057: LD_INT 14
14059: PUSH
14060: LD_INT 15
14062: PUSH
14063: LD_INT 16
14065: PUSH
14066: LD_INT 17
14068: PUSH
14069: LD_INT 18
14071: PUSH
14072: LD_INT 19
14074: PUSH
14075: LD_INT 20
14077: PUSH
14078: LD_INT 21
14080: PUSH
14081: LD_INT 22
14083: PUSH
14084: LD_INT 23
14086: PUSH
14087: LD_INT 24
14089: PUSH
14090: LD_INT 25
14092: PUSH
14093: LD_INT 26
14095: PUSH
14096: LD_INT 27
14098: PUSH
14099: LD_INT 28
14101: PUSH
14102: LD_INT 29
14104: PUSH
14105: LD_INT 30
14107: PUSH
14108: LD_INT 31
14110: PUSH
14111: LD_INT 32
14113: PUSH
14114: LD_INT 33
14116: PUSH
14117: LD_INT 34
14119: PUSH
14120: LD_INT 36
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 101
14162: PUSH
14163: LD_INT 102
14165: PUSH
14166: LD_INT 103
14168: PUSH
14169: LD_INT 104
14171: PUSH
14172: LD_INT 105
14174: PUSH
14175: LD_INT 106
14177: PUSH
14178: LD_INT 107
14180: PUSH
14181: LD_INT 108
14183: PUSH
14184: LD_INT 109
14186: PUSH
14187: LD_INT 110
14189: PUSH
14190: LD_INT 111
14192: PUSH
14193: LD_INT 112
14195: PUSH
14196: LD_INT 113
14198: PUSH
14199: LD_INT 114
14201: PUSH
14202: LD_INT 116
14204: PUSH
14205: LD_INT 117
14207: PUSH
14208: LD_INT 118
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: ST_TO_ADDR
14234: GO 14633
14236: LD_INT 18
14238: DOUBLE
14239: EQUAL
14240: IFTRUE 14244
14242: GO 14392
14244: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14245: LD_ADDR_VAR 0 2
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: LD_INT 4
14255: PUSH
14256: LD_INT 5
14258: PUSH
14259: LD_INT 7
14261: PUSH
14262: LD_INT 11
14264: PUSH
14265: LD_INT 12
14267: PUSH
14268: LD_INT 15
14270: PUSH
14271: LD_INT 16
14273: PUSH
14274: LD_INT 20
14276: PUSH
14277: LD_INT 21
14279: PUSH
14280: LD_INT 22
14282: PUSH
14283: LD_INT 23
14285: PUSH
14286: LD_INT 25
14288: PUSH
14289: LD_INT 26
14291: PUSH
14292: LD_INT 30
14294: PUSH
14295: LD_INT 31
14297: PUSH
14298: LD_INT 32
14300: PUSH
14301: LD_INT 33
14303: PUSH
14304: LD_INT 34
14306: PUSH
14307: LD_INT 35
14309: PUSH
14310: LD_INT 36
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 101
14338: PUSH
14339: LD_INT 102
14341: PUSH
14342: LD_INT 103
14344: PUSH
14345: LD_INT 106
14347: PUSH
14348: LD_INT 108
14350: PUSH
14351: LD_INT 112
14353: PUSH
14354: LD_INT 113
14356: PUSH
14357: LD_INT 114
14359: PUSH
14360: LD_INT 115
14362: PUSH
14363: LD_INT 116
14365: PUSH
14366: LD_INT 117
14368: PUSH
14369: LD_INT 118
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: ST_TO_ADDR
14390: GO 14633
14392: LD_INT 19
14394: DOUBLE
14395: EQUAL
14396: IFTRUE 14400
14398: GO 14632
14400: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14401: LD_ADDR_VAR 0 2
14405: PUSH
14406: LD_INT 1
14408: PUSH
14409: LD_INT 2
14411: PUSH
14412: LD_INT 3
14414: PUSH
14415: LD_INT 4
14417: PUSH
14418: LD_INT 5
14420: PUSH
14421: LD_INT 6
14423: PUSH
14424: LD_INT 7
14426: PUSH
14427: LD_INT 8
14429: PUSH
14430: LD_INT 9
14432: PUSH
14433: LD_INT 10
14435: PUSH
14436: LD_INT 11
14438: PUSH
14439: LD_INT 12
14441: PUSH
14442: LD_INT 13
14444: PUSH
14445: LD_INT 14
14447: PUSH
14448: LD_INT 15
14450: PUSH
14451: LD_INT 16
14453: PUSH
14454: LD_INT 17
14456: PUSH
14457: LD_INT 18
14459: PUSH
14460: LD_INT 19
14462: PUSH
14463: LD_INT 20
14465: PUSH
14466: LD_INT 21
14468: PUSH
14469: LD_INT 22
14471: PUSH
14472: LD_INT 23
14474: PUSH
14475: LD_INT 24
14477: PUSH
14478: LD_INT 25
14480: PUSH
14481: LD_INT 26
14483: PUSH
14484: LD_INT 27
14486: PUSH
14487: LD_INT 28
14489: PUSH
14490: LD_INT 29
14492: PUSH
14493: LD_INT 30
14495: PUSH
14496: LD_INT 31
14498: PUSH
14499: LD_INT 32
14501: PUSH
14502: LD_INT 33
14504: PUSH
14505: LD_INT 34
14507: PUSH
14508: LD_INT 35
14510: PUSH
14511: LD_INT 36
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: PUSH
14552: LD_INT 101
14554: PUSH
14555: LD_INT 102
14557: PUSH
14558: LD_INT 103
14560: PUSH
14561: LD_INT 104
14563: PUSH
14564: LD_INT 105
14566: PUSH
14567: LD_INT 106
14569: PUSH
14570: LD_INT 107
14572: PUSH
14573: LD_INT 108
14575: PUSH
14576: LD_INT 109
14578: PUSH
14579: LD_INT 110
14581: PUSH
14582: LD_INT 111
14584: PUSH
14585: LD_INT 112
14587: PUSH
14588: LD_INT 113
14590: PUSH
14591: LD_INT 114
14593: PUSH
14594: LD_INT 115
14596: PUSH
14597: LD_INT 116
14599: PUSH
14600: LD_INT 117
14602: PUSH
14603: LD_INT 118
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: ST_TO_ADDR
14630: GO 14633
14632: POP
// end else
14633: GO 14864
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14635: LD_ADDR_VAR 0 2
14639: PUSH
14640: LD_INT 1
14642: PUSH
14643: LD_INT 2
14645: PUSH
14646: LD_INT 3
14648: PUSH
14649: LD_INT 4
14651: PUSH
14652: LD_INT 5
14654: PUSH
14655: LD_INT 6
14657: PUSH
14658: LD_INT 7
14660: PUSH
14661: LD_INT 8
14663: PUSH
14664: LD_INT 9
14666: PUSH
14667: LD_INT 10
14669: PUSH
14670: LD_INT 11
14672: PUSH
14673: LD_INT 12
14675: PUSH
14676: LD_INT 13
14678: PUSH
14679: LD_INT 14
14681: PUSH
14682: LD_INT 15
14684: PUSH
14685: LD_INT 16
14687: PUSH
14688: LD_INT 17
14690: PUSH
14691: LD_INT 18
14693: PUSH
14694: LD_INT 19
14696: PUSH
14697: LD_INT 20
14699: PUSH
14700: LD_INT 21
14702: PUSH
14703: LD_INT 22
14705: PUSH
14706: LD_INT 23
14708: PUSH
14709: LD_INT 24
14711: PUSH
14712: LD_INT 25
14714: PUSH
14715: LD_INT 26
14717: PUSH
14718: LD_INT 27
14720: PUSH
14721: LD_INT 28
14723: PUSH
14724: LD_INT 29
14726: PUSH
14727: LD_INT 30
14729: PUSH
14730: LD_INT 31
14732: PUSH
14733: LD_INT 32
14735: PUSH
14736: LD_INT 33
14738: PUSH
14739: LD_INT 34
14741: PUSH
14742: LD_INT 35
14744: PUSH
14745: LD_INT 36
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 101
14788: PUSH
14789: LD_INT 102
14791: PUSH
14792: LD_INT 103
14794: PUSH
14795: LD_INT 104
14797: PUSH
14798: LD_INT 105
14800: PUSH
14801: LD_INT 106
14803: PUSH
14804: LD_INT 107
14806: PUSH
14807: LD_INT 108
14809: PUSH
14810: LD_INT 109
14812: PUSH
14813: LD_INT 110
14815: PUSH
14816: LD_INT 111
14818: PUSH
14819: LD_INT 112
14821: PUSH
14822: LD_INT 113
14824: PUSH
14825: LD_INT 114
14827: PUSH
14828: LD_INT 115
14830: PUSH
14831: LD_INT 116
14833: PUSH
14834: LD_INT 117
14836: PUSH
14837: LD_INT 118
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: ST_TO_ADDR
// if result then
14864: LD_VAR 0 2
14868: IFFALSE 15654
// begin normal :=  ;
14870: LD_ADDR_VAR 0 5
14874: PUSH
14875: LD_STRING 
14877: ST_TO_ADDR
// hardcore :=  ;
14878: LD_ADDR_VAR 0 6
14882: PUSH
14883: LD_STRING 
14885: ST_TO_ADDR
// active :=  ;
14886: LD_ADDR_VAR 0 7
14890: PUSH
14891: LD_STRING 
14893: ST_TO_ADDR
// for i = 1 to normalCounter do
14894: LD_ADDR_VAR 0 8
14898: PUSH
14899: DOUBLE
14900: LD_INT 1
14902: DEC
14903: ST_TO_ADDR
14904: LD_EXP 24
14908: PUSH
14909: FOR_TO
14910: IFFALSE 15011
// begin tmp := 0 ;
14912: LD_ADDR_VAR 0 3
14916: PUSH
14917: LD_STRING 0
14919: ST_TO_ADDR
// if result [ 1 ] then
14920: LD_VAR 0 2
14924: PUSH
14925: LD_INT 1
14927: ARRAY
14928: IFFALSE 14993
// if result [ 1 ] [ 1 ] = i then
14930: LD_VAR 0 2
14934: PUSH
14935: LD_INT 1
14937: ARRAY
14938: PUSH
14939: LD_INT 1
14941: ARRAY
14942: PUSH
14943: LD_VAR 0 8
14947: EQUAL
14948: IFFALSE 14993
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14950: LD_ADDR_VAR 0 2
14954: PUSH
14955: LD_VAR 0 2
14959: PPUSH
14960: LD_INT 1
14962: PPUSH
14963: LD_VAR 0 2
14967: PUSH
14968: LD_INT 1
14970: ARRAY
14971: PPUSH
14972: LD_INT 1
14974: PPUSH
14975: CALL_OW 3
14979: PPUSH
14980: CALL_OW 1
14984: ST_TO_ADDR
// tmp := 1 ;
14985: LD_ADDR_VAR 0 3
14989: PUSH
14990: LD_STRING 1
14992: ST_TO_ADDR
// end ; normal := normal & tmp ;
14993: LD_ADDR_VAR 0 5
14997: PUSH
14998: LD_VAR 0 5
15002: PUSH
15003: LD_VAR 0 3
15007: STR
15008: ST_TO_ADDR
// end ;
15009: GO 14909
15011: POP
15012: POP
// for i = 1 to hardcoreCounter do
15013: LD_ADDR_VAR 0 8
15017: PUSH
15018: DOUBLE
15019: LD_INT 1
15021: DEC
15022: ST_TO_ADDR
15023: LD_EXP 25
15027: PUSH
15028: FOR_TO
15029: IFFALSE 15134
// begin tmp := 0 ;
15031: LD_ADDR_VAR 0 3
15035: PUSH
15036: LD_STRING 0
15038: ST_TO_ADDR
// if result [ 2 ] then
15039: LD_VAR 0 2
15043: PUSH
15044: LD_INT 2
15046: ARRAY
15047: IFFALSE 15116
// if result [ 2 ] [ 1 ] = 100 + i then
15049: LD_VAR 0 2
15053: PUSH
15054: LD_INT 2
15056: ARRAY
15057: PUSH
15058: LD_INT 1
15060: ARRAY
15061: PUSH
15062: LD_INT 100
15064: PUSH
15065: LD_VAR 0 8
15069: PLUS
15070: EQUAL
15071: IFFALSE 15116
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15073: LD_ADDR_VAR 0 2
15077: PUSH
15078: LD_VAR 0 2
15082: PPUSH
15083: LD_INT 2
15085: PPUSH
15086: LD_VAR 0 2
15090: PUSH
15091: LD_INT 2
15093: ARRAY
15094: PPUSH
15095: LD_INT 1
15097: PPUSH
15098: CALL_OW 3
15102: PPUSH
15103: CALL_OW 1
15107: ST_TO_ADDR
// tmp := 1 ;
15108: LD_ADDR_VAR 0 3
15112: PUSH
15113: LD_STRING 1
15115: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15116: LD_ADDR_VAR 0 6
15120: PUSH
15121: LD_VAR 0 6
15125: PUSH
15126: LD_VAR 0 3
15130: STR
15131: ST_TO_ADDR
// end ;
15132: GO 15028
15134: POP
15135: POP
// if isGameLoad then
15136: LD_VAR 0 1
15140: IFFALSE 15615
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15142: LD_ADDR_VAR 0 4
15146: PUSH
15147: LD_EXP 28
15151: PUSH
15152: LD_EXP 27
15156: PUSH
15157: LD_EXP 29
15161: PUSH
15162: LD_EXP 26
15166: PUSH
15167: LD_EXP 30
15171: PUSH
15172: LD_EXP 31
15176: PUSH
15177: LD_EXP 32
15181: PUSH
15182: LD_EXP 33
15186: PUSH
15187: LD_EXP 34
15191: PUSH
15192: LD_EXP 35
15196: PUSH
15197: LD_EXP 36
15201: PUSH
15202: LD_EXP 37
15206: PUSH
15207: LD_EXP 38
15211: PUSH
15212: LD_EXP 39
15216: PUSH
15217: LD_EXP 47
15221: PUSH
15222: LD_EXP 48
15226: PUSH
15227: LD_EXP 49
15231: PUSH
15232: LD_EXP 50
15236: PUSH
15237: LD_EXP 52
15241: PUSH
15242: LD_EXP 53
15246: PUSH
15247: LD_EXP 54
15251: PUSH
15252: LD_EXP 57
15256: PUSH
15257: LD_EXP 59
15261: PUSH
15262: LD_EXP 60
15266: PUSH
15267: LD_EXP 61
15271: PUSH
15272: LD_EXP 63
15276: PUSH
15277: LD_EXP 64
15281: PUSH
15282: LD_EXP 67
15286: PUSH
15287: LD_EXP 68
15291: PUSH
15292: LD_EXP 69
15296: PUSH
15297: LD_EXP 70
15301: PUSH
15302: LD_EXP 71
15306: PUSH
15307: LD_EXP 72
15311: PUSH
15312: LD_EXP 73
15316: PUSH
15317: LD_EXP 74
15321: PUSH
15322: LD_EXP 75
15326: PUSH
15327: LD_EXP 40
15331: PUSH
15332: LD_EXP 41
15336: PUSH
15337: LD_EXP 44
15341: PUSH
15342: LD_EXP 45
15346: PUSH
15347: LD_EXP 46
15351: PUSH
15352: LD_EXP 42
15356: PUSH
15357: LD_EXP 43
15361: PUSH
15362: LD_EXP 51
15366: PUSH
15367: LD_EXP 55
15371: PUSH
15372: LD_EXP 56
15376: PUSH
15377: LD_EXP 58
15381: PUSH
15382: LD_EXP 62
15386: PUSH
15387: LD_EXP 65
15391: PUSH
15392: LD_EXP 66
15396: PUSH
15397: LD_EXP 76
15401: PUSH
15402: LD_EXP 77
15406: PUSH
15407: LD_EXP 78
15411: PUSH
15412: LD_EXP 79
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: ST_TO_ADDR
// tmp :=  ;
15473: LD_ADDR_VAR 0 3
15477: PUSH
15478: LD_STRING 
15480: ST_TO_ADDR
// for i = 1 to normalCounter do
15481: LD_ADDR_VAR 0 8
15485: PUSH
15486: DOUBLE
15487: LD_INT 1
15489: DEC
15490: ST_TO_ADDR
15491: LD_EXP 24
15495: PUSH
15496: FOR_TO
15497: IFFALSE 15533
// begin if flags [ i ] then
15499: LD_VAR 0 4
15503: PUSH
15504: LD_VAR 0 8
15508: ARRAY
15509: IFFALSE 15531
// tmp := tmp & i & ; ;
15511: LD_ADDR_VAR 0 3
15515: PUSH
15516: LD_VAR 0 3
15520: PUSH
15521: LD_VAR 0 8
15525: STR
15526: PUSH
15527: LD_STRING ;
15529: STR
15530: ST_TO_ADDR
// end ;
15531: GO 15496
15533: POP
15534: POP
// for i = 1 to hardcoreCounter do
15535: LD_ADDR_VAR 0 8
15539: PUSH
15540: DOUBLE
15541: LD_INT 1
15543: DEC
15544: ST_TO_ADDR
15545: LD_EXP 25
15549: PUSH
15550: FOR_TO
15551: IFFALSE 15597
// begin if flags [ normalCounter + i ] then
15553: LD_VAR 0 4
15557: PUSH
15558: LD_EXP 24
15562: PUSH
15563: LD_VAR 0 8
15567: PLUS
15568: ARRAY
15569: IFFALSE 15595
// tmp := tmp & ( 100 + i ) & ; ;
15571: LD_ADDR_VAR 0 3
15575: PUSH
15576: LD_VAR 0 3
15580: PUSH
15581: LD_INT 100
15583: PUSH
15584: LD_VAR 0 8
15588: PLUS
15589: STR
15590: PUSH
15591: LD_STRING ;
15593: STR
15594: ST_TO_ADDR
// end ;
15595: GO 15550
15597: POP
15598: POP
// if tmp then
15599: LD_VAR 0 3
15603: IFFALSE 15615
// active := tmp ;
15605: LD_ADDR_VAR 0 7
15609: PUSH
15610: LD_VAR 0 3
15614: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15615: LD_STRING getStreamItemsFromMission("
15617: PUSH
15618: LD_VAR 0 5
15622: STR
15623: PUSH
15624: LD_STRING ","
15626: STR
15627: PUSH
15628: LD_VAR 0 6
15632: STR
15633: PUSH
15634: LD_STRING ","
15636: STR
15637: PUSH
15638: LD_VAR 0 7
15642: STR
15643: PUSH
15644: LD_STRING ")
15646: STR
15647: PPUSH
15648: CALL_OW 559
// end else
15652: GO 15661
// ToLua ( getStreamItemsFromMission("","","") ) ;
15654: LD_STRING getStreamItemsFromMission("","","")
15656: PPUSH
15657: CALL_OW 559
// end ;
15661: LD_VAR 0 2
15665: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15666: LD_EXP 23
15670: IFFALSE 15678
15672: PUSH
15673: LD_EXP 28
15677: AND
15678: IFFALSE 15802
15680: GO 15682
15682: DISABLE
15683: LD_INT 0
15685: PPUSH
15686: PPUSH
// begin enable ;
15687: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15688: LD_ADDR_VAR 0 2
15692: PUSH
15693: LD_INT 22
15695: PUSH
15696: LD_OWVAR 2
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 2
15707: PUSH
15708: LD_INT 34
15710: PUSH
15711: LD_INT 7
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 34
15720: PUSH
15721: LD_INT 45
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 34
15730: PUSH
15731: LD_INT 28
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 34
15740: PUSH
15741: LD_INT 47
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PPUSH
15759: CALL_OW 69
15763: ST_TO_ADDR
// if not tmp then
15764: LD_VAR 0 2
15768: NOT
15769: IFFALSE 15773
// exit ;
15771: GO 15802
// for i in tmp do
15773: LD_ADDR_VAR 0 1
15777: PUSH
15778: LD_VAR 0 2
15782: PUSH
15783: FOR_IN
15784: IFFALSE 15800
// begin SetLives ( i , 0 ) ;
15786: LD_VAR 0 1
15790: PPUSH
15791: LD_INT 0
15793: PPUSH
15794: CALL_OW 234
// end ;
15798: GO 15783
15800: POP
15801: POP
// end ;
15802: PPOPN 2
15804: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15805: LD_EXP 23
15809: IFFALSE 15817
15811: PUSH
15812: LD_EXP 29
15816: AND
15817: IFFALSE 15901
15819: GO 15821
15821: DISABLE
15822: LD_INT 0
15824: PPUSH
15825: PPUSH
// begin enable ;
15826: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15827: LD_ADDR_VAR 0 2
15831: PUSH
15832: LD_INT 22
15834: PUSH
15835: LD_OWVAR 2
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 32
15846: PUSH
15847: LD_INT 3
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PPUSH
15858: CALL_OW 69
15862: ST_TO_ADDR
// if not tmp then
15863: LD_VAR 0 2
15867: NOT
15868: IFFALSE 15872
// exit ;
15870: GO 15901
// for i in tmp do
15872: LD_ADDR_VAR 0 1
15876: PUSH
15877: LD_VAR 0 2
15881: PUSH
15882: FOR_IN
15883: IFFALSE 15899
// begin SetLives ( i , 0 ) ;
15885: LD_VAR 0 1
15889: PPUSH
15890: LD_INT 0
15892: PPUSH
15893: CALL_OW 234
// end ;
15897: GO 15882
15899: POP
15900: POP
// end ;
15901: PPOPN 2
15903: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15904: LD_EXP 23
15908: IFFALSE 15916
15910: PUSH
15911: LD_EXP 26
15915: AND
15916: IFFALSE 16009
15918: GO 15920
15920: DISABLE
15921: LD_INT 0
15923: PPUSH
// begin enable ;
15924: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15925: LD_ADDR_VAR 0 1
15929: PUSH
15930: LD_INT 22
15932: PUSH
15933: LD_OWVAR 2
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 2
15944: PUSH
15945: LD_INT 25
15947: PUSH
15948: LD_INT 5
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 25
15957: PUSH
15958: LD_INT 9
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 25
15967: PUSH
15968: LD_INT 8
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PPUSH
15985: CALL_OW 69
15989: PUSH
15990: FOR_IN
15991: IFFALSE 16007
// begin SetClass ( i , 1 ) ;
15993: LD_VAR 0 1
15997: PPUSH
15998: LD_INT 1
16000: PPUSH
16001: CALL_OW 336
// end ;
16005: GO 15990
16007: POP
16008: POP
// end ;
16009: PPOPN 1
16011: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16012: LD_EXP 23
16016: IFFALSE 16024
16018: PUSH
16019: LD_EXP 27
16023: AND
16024: IFFALSE 16036
16026: PUSH
16027: LD_OWVAR 65
16031: PUSH
16032: LD_INT 7
16034: LESS
16035: AND
16036: IFFALSE 16050
16038: GO 16040
16040: DISABLE
// begin enable ;
16041: ENABLE
// game_speed := 7 ;
16042: LD_ADDR_OWVAR 65
16046: PUSH
16047: LD_INT 7
16049: ST_TO_ADDR
// end ;
16050: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16051: LD_EXP 23
16055: IFFALSE 16063
16057: PUSH
16058: LD_EXP 30
16062: AND
16063: IFFALSE 16265
16065: GO 16067
16067: DISABLE
16068: LD_INT 0
16070: PPUSH
16071: PPUSH
16072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16073: LD_ADDR_VAR 0 3
16077: PUSH
16078: LD_INT 81
16080: PUSH
16081: LD_OWVAR 2
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 21
16092: PUSH
16093: LD_INT 1
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PPUSH
16104: CALL_OW 69
16108: ST_TO_ADDR
// if not tmp then
16109: LD_VAR 0 3
16113: NOT
16114: IFFALSE 16118
// exit ;
16116: GO 16265
// if tmp > 5 then
16118: LD_VAR 0 3
16122: PUSH
16123: LD_INT 5
16125: GREATER
16126: IFFALSE 16138
// k := 5 else
16128: LD_ADDR_VAR 0 2
16132: PUSH
16133: LD_INT 5
16135: ST_TO_ADDR
16136: GO 16148
// k := tmp ;
16138: LD_ADDR_VAR 0 2
16142: PUSH
16143: LD_VAR 0 3
16147: ST_TO_ADDR
// for i := 1 to k do
16148: LD_ADDR_VAR 0 1
16152: PUSH
16153: DOUBLE
16154: LD_INT 1
16156: DEC
16157: ST_TO_ADDR
16158: LD_VAR 0 2
16162: PUSH
16163: FOR_TO
16164: IFFALSE 16263
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16166: LD_VAR 0 3
16170: PUSH
16171: LD_VAR 0 1
16175: ARRAY
16176: PPUSH
16177: LD_VAR 0 1
16181: PUSH
16182: LD_INT 4
16184: MOD
16185: PUSH
16186: LD_INT 1
16188: PLUS
16189: PPUSH
16190: CALL_OW 259
16194: PUSH
16195: LD_INT 10
16197: LESS
16198: IFFALSE 16261
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16200: LD_VAR 0 3
16204: PUSH
16205: LD_VAR 0 1
16209: ARRAY
16210: PPUSH
16211: LD_VAR 0 1
16215: PUSH
16216: LD_INT 4
16218: MOD
16219: PUSH
16220: LD_INT 1
16222: PLUS
16223: PPUSH
16224: LD_VAR 0 3
16228: PUSH
16229: LD_VAR 0 1
16233: ARRAY
16234: PPUSH
16235: LD_VAR 0 1
16239: PUSH
16240: LD_INT 4
16242: MOD
16243: PUSH
16244: LD_INT 1
16246: PLUS
16247: PPUSH
16248: CALL_OW 259
16252: PUSH
16253: LD_INT 1
16255: PLUS
16256: PPUSH
16257: CALL_OW 237
16261: GO 16163
16263: POP
16264: POP
// end ;
16265: PPOPN 3
16267: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16268: LD_EXP 23
16272: IFFALSE 16280
16274: PUSH
16275: LD_EXP 31
16279: AND
16280: IFFALSE 16300
16282: GO 16284
16284: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16285: LD_INT 4
16287: PPUSH
16288: LD_OWVAR 2
16292: PPUSH
16293: LD_INT 0
16295: PPUSH
16296: CALL_OW 324
16300: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16301: LD_EXP 23
16305: IFFALSE 16313
16307: PUSH
16308: LD_EXP 60
16312: AND
16313: IFFALSE 16333
16315: GO 16317
16317: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16318: LD_INT 19
16320: PPUSH
16321: LD_OWVAR 2
16325: PPUSH
16326: LD_INT 0
16328: PPUSH
16329: CALL_OW 324
16333: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16334: LD_EXP 23
16338: IFFALSE 16346
16340: PUSH
16341: LD_EXP 32
16345: AND
16346: IFFALSE 16448
16348: GO 16350
16350: DISABLE
16351: LD_INT 0
16353: PPUSH
16354: PPUSH
// begin enable ;
16355: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16356: LD_ADDR_VAR 0 2
16360: PUSH
16361: LD_INT 22
16363: PUSH
16364: LD_OWVAR 2
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 2
16375: PUSH
16376: LD_INT 34
16378: PUSH
16379: LD_INT 11
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 34
16388: PUSH
16389: LD_INT 30
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: LIST
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PPUSH
16405: CALL_OW 69
16409: ST_TO_ADDR
// if not tmp then
16410: LD_VAR 0 2
16414: NOT
16415: IFFALSE 16419
// exit ;
16417: GO 16448
// for i in tmp do
16419: LD_ADDR_VAR 0 1
16423: PUSH
16424: LD_VAR 0 2
16428: PUSH
16429: FOR_IN
16430: IFFALSE 16446
// begin SetLives ( i , 0 ) ;
16432: LD_VAR 0 1
16436: PPUSH
16437: LD_INT 0
16439: PPUSH
16440: CALL_OW 234
// end ;
16444: GO 16429
16446: POP
16447: POP
// end ;
16448: PPOPN 2
16450: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16451: LD_EXP 23
16455: IFFALSE 16463
16457: PUSH
16458: LD_EXP 33
16462: AND
16463: IFFALSE 16483
16465: GO 16467
16467: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16468: LD_INT 32
16470: PPUSH
16471: LD_OWVAR 2
16475: PPUSH
16476: LD_INT 0
16478: PPUSH
16479: CALL_OW 324
16483: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16484: LD_EXP 23
16488: IFFALSE 16496
16490: PUSH
16491: LD_EXP 34
16495: AND
16496: IFFALSE 16679
16498: GO 16500
16500: DISABLE
16501: LD_INT 0
16503: PPUSH
16504: PPUSH
16505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16506: LD_ADDR_VAR 0 2
16510: PUSH
16511: LD_INT 22
16513: PUSH
16514: LD_OWVAR 2
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 33
16525: PUSH
16526: LD_INT 3
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PPUSH
16537: CALL_OW 69
16541: ST_TO_ADDR
// if not tmp then
16542: LD_VAR 0 2
16546: NOT
16547: IFFALSE 16551
// exit ;
16549: GO 16679
// side := 0 ;
16551: LD_ADDR_VAR 0 3
16555: PUSH
16556: LD_INT 0
16558: ST_TO_ADDR
// for i := 1 to 8 do
16559: LD_ADDR_VAR 0 1
16563: PUSH
16564: DOUBLE
16565: LD_INT 1
16567: DEC
16568: ST_TO_ADDR
16569: LD_INT 8
16571: PUSH
16572: FOR_TO
16573: IFFALSE 16623
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16575: LD_OWVAR 2
16579: PUSH
16580: LD_VAR 0 1
16584: NONEQUAL
16585: IFFALSE 16607
16587: PUSH
16588: LD_OWVAR 2
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 81
16602: PUSH
16603: LD_INT 2
16605: EQUAL
16606: AND
16607: IFFALSE 16621
// begin side := i ;
16609: LD_ADDR_VAR 0 3
16613: PUSH
16614: LD_VAR 0 1
16618: ST_TO_ADDR
// break ;
16619: GO 16623
// end ;
16621: GO 16572
16623: POP
16624: POP
// if not side then
16625: LD_VAR 0 3
16629: NOT
16630: IFFALSE 16634
// exit ;
16632: GO 16679
// for i := 1 to tmp do
16634: LD_ADDR_VAR 0 1
16638: PUSH
16639: DOUBLE
16640: LD_INT 1
16642: DEC
16643: ST_TO_ADDR
16644: LD_VAR 0 2
16648: PUSH
16649: FOR_TO
16650: IFFALSE 16677
// if Prob ( 60 ) then
16652: LD_INT 60
16654: PPUSH
16655: CALL_OW 13
16659: IFFALSE 16675
// SetSide ( i , side ) ;
16661: LD_VAR 0 1
16665: PPUSH
16666: LD_VAR 0 3
16670: PPUSH
16671: CALL_OW 235
16675: GO 16649
16677: POP
16678: POP
// end ;
16679: PPOPN 3
16681: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16682: LD_EXP 23
16686: IFFALSE 16694
16688: PUSH
16689: LD_EXP 36
16693: AND
16694: IFFALSE 16813
16696: GO 16698
16698: DISABLE
16699: LD_INT 0
16701: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16702: LD_ADDR_VAR 0 1
16706: PUSH
16707: LD_INT 22
16709: PUSH
16710: LD_OWVAR 2
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 21
16721: PUSH
16722: LD_INT 1
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 3
16731: PUSH
16732: LD_INT 23
16734: PUSH
16735: LD_INT 0
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: LIST
16750: PPUSH
16751: CALL_OW 69
16755: PUSH
16756: FOR_IN
16757: IFFALSE 16811
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16759: LD_VAR 0 1
16763: PPUSH
16764: CALL_OW 257
16768: PUSH
16769: LD_INT 1
16771: PUSH
16772: LD_INT 2
16774: PUSH
16775: LD_INT 3
16777: PUSH
16778: LD_INT 4
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: IN
16787: IFFALSE 16809
// SetClass ( un , rand ( 1 , 4 ) ) ;
16789: LD_VAR 0 1
16793: PPUSH
16794: LD_INT 1
16796: PPUSH
16797: LD_INT 4
16799: PPUSH
16800: CALL_OW 12
16804: PPUSH
16805: CALL_OW 336
16809: GO 16756
16811: POP
16812: POP
// end ;
16813: PPOPN 1
16815: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16816: LD_EXP 23
16820: IFFALSE 16828
16822: PUSH
16823: LD_EXP 35
16827: AND
16828: IFFALSE 16907
16830: GO 16832
16832: DISABLE
16833: LD_INT 0
16835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16836: LD_ADDR_VAR 0 1
16840: PUSH
16841: LD_INT 22
16843: PUSH
16844: LD_OWVAR 2
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: PUSH
16853: LD_INT 21
16855: PUSH
16856: LD_INT 3
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PPUSH
16867: CALL_OW 69
16871: ST_TO_ADDR
// if not tmp then
16872: LD_VAR 0 1
16876: NOT
16877: IFFALSE 16881
// exit ;
16879: GO 16907
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16881: LD_VAR 0 1
16885: PUSH
16886: LD_INT 1
16888: PPUSH
16889: LD_VAR 0 1
16893: PPUSH
16894: CALL_OW 12
16898: ARRAY
16899: PPUSH
16900: LD_INT 100
16902: PPUSH
16903: CALL_OW 234
// end ;
16907: PPOPN 1
16909: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16910: LD_EXP 23
16914: IFFALSE 16922
16916: PUSH
16917: LD_EXP 37
16921: AND
16922: IFFALSE 17020
16924: GO 16926
16926: DISABLE
16927: LD_INT 0
16929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16930: LD_ADDR_VAR 0 1
16934: PUSH
16935: LD_INT 22
16937: PUSH
16938: LD_OWVAR 2
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 21
16949: PUSH
16950: LD_INT 1
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PPUSH
16961: CALL_OW 69
16965: ST_TO_ADDR
// if not tmp then
16966: LD_VAR 0 1
16970: NOT
16971: IFFALSE 16975
// exit ;
16973: GO 17020
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16975: LD_VAR 0 1
16979: PUSH
16980: LD_INT 1
16982: PPUSH
16983: LD_VAR 0 1
16987: PPUSH
16988: CALL_OW 12
16992: ARRAY
16993: PPUSH
16994: LD_INT 1
16996: PPUSH
16997: LD_INT 4
16999: PPUSH
17000: CALL_OW 12
17004: PPUSH
17005: LD_INT 3000
17007: PPUSH
17008: LD_INT 9000
17010: PPUSH
17011: CALL_OW 12
17015: PPUSH
17016: CALL_OW 492
// end ;
17020: PPOPN 1
17022: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17023: LD_EXP 23
17027: IFFALSE 17035
17029: PUSH
17030: LD_EXP 38
17034: AND
17035: IFFALSE 17055
17037: GO 17039
17039: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17040: LD_INT 1
17042: PPUSH
17043: LD_OWVAR 2
17047: PPUSH
17048: LD_INT 0
17050: PPUSH
17051: CALL_OW 324
17055: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17056: LD_EXP 23
17060: IFFALSE 17068
17062: PUSH
17063: LD_EXP 39
17067: AND
17068: IFFALSE 17151
17070: GO 17072
17072: DISABLE
17073: LD_INT 0
17075: PPUSH
17076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17077: LD_ADDR_VAR 0 2
17081: PUSH
17082: LD_INT 22
17084: PUSH
17085: LD_OWVAR 2
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 21
17096: PUSH
17097: LD_INT 3
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PPUSH
17108: CALL_OW 69
17112: ST_TO_ADDR
// if not tmp then
17113: LD_VAR 0 2
17117: NOT
17118: IFFALSE 17122
// exit ;
17120: GO 17151
// for i in tmp do
17122: LD_ADDR_VAR 0 1
17126: PUSH
17127: LD_VAR 0 2
17131: PUSH
17132: FOR_IN
17133: IFFALSE 17149
// SetBLevel ( i , 10 ) ;
17135: LD_VAR 0 1
17139: PPUSH
17140: LD_INT 10
17142: PPUSH
17143: CALL_OW 241
17147: GO 17132
17149: POP
17150: POP
// end ;
17151: PPOPN 2
17153: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17154: LD_EXP 23
17158: IFFALSE 17166
17160: PUSH
17161: LD_EXP 40
17165: AND
17166: IFFALSE 17277
17168: GO 17170
17170: DISABLE
17171: LD_INT 0
17173: PPUSH
17174: PPUSH
17175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17176: LD_ADDR_VAR 0 3
17180: PUSH
17181: LD_INT 22
17183: PUSH
17184: LD_OWVAR 2
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 25
17195: PUSH
17196: LD_INT 1
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PPUSH
17207: CALL_OW 69
17211: ST_TO_ADDR
// if not tmp then
17212: LD_VAR 0 3
17216: NOT
17217: IFFALSE 17221
// exit ;
17219: GO 17277
// un := tmp [ rand ( 1 , tmp ) ] ;
17221: LD_ADDR_VAR 0 2
17225: PUSH
17226: LD_VAR 0 3
17230: PUSH
17231: LD_INT 1
17233: PPUSH
17234: LD_VAR 0 3
17238: PPUSH
17239: CALL_OW 12
17243: ARRAY
17244: ST_TO_ADDR
// if Crawls ( un ) then
17245: LD_VAR 0 2
17249: PPUSH
17250: CALL_OW 318
17254: IFFALSE 17265
// ComWalk ( un ) ;
17256: LD_VAR 0 2
17260: PPUSH
17261: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17265: LD_VAR 0 2
17269: PPUSH
17270: LD_INT 5
17272: PPUSH
17273: CALL_OW 336
// end ;
17277: PPOPN 3
17279: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17280: LD_EXP 23
17284: IFFALSE 17292
17286: PUSH
17287: LD_EXP 41
17291: AND
17292: IFFALSE 17304
17294: PUSH
17295: LD_OWVAR 67
17299: PUSH
17300: LD_INT 4
17302: LESS
17303: AND
17304: IFFALSE 17323
17306: GO 17308
17308: DISABLE
// begin Difficulty := Difficulty + 1 ;
17309: LD_ADDR_OWVAR 67
17313: PUSH
17314: LD_OWVAR 67
17318: PUSH
17319: LD_INT 1
17321: PLUS
17322: ST_TO_ADDR
// end ;
17323: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17324: LD_EXP 23
17328: IFFALSE 17336
17330: PUSH
17331: LD_EXP 42
17335: AND
17336: IFFALSE 17439
17338: GO 17340
17340: DISABLE
17341: LD_INT 0
17343: PPUSH
// begin for i := 1 to 5 do
17344: LD_ADDR_VAR 0 1
17348: PUSH
17349: DOUBLE
17350: LD_INT 1
17352: DEC
17353: ST_TO_ADDR
17354: LD_INT 5
17356: PUSH
17357: FOR_TO
17358: IFFALSE 17437
// begin uc_nation := nation_nature ;
17360: LD_ADDR_OWVAR 21
17364: PUSH
17365: LD_INT 0
17367: ST_TO_ADDR
// uc_side := 0 ;
17368: LD_ADDR_OWVAR 20
17372: PUSH
17373: LD_INT 0
17375: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17376: LD_ADDR_OWVAR 29
17380: PUSH
17381: LD_INT 12
17383: PUSH
17384: LD_INT 12
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: ST_TO_ADDR
// hc_agressivity := 20 ;
17391: LD_ADDR_OWVAR 35
17395: PUSH
17396: LD_INT 20
17398: ST_TO_ADDR
// hc_class := class_tiger ;
17399: LD_ADDR_OWVAR 28
17403: PUSH
17404: LD_INT 14
17406: ST_TO_ADDR
// hc_gallery :=  ;
17407: LD_ADDR_OWVAR 33
17411: PUSH
17412: LD_STRING 
17414: ST_TO_ADDR
// hc_name :=  ;
17415: LD_ADDR_OWVAR 26
17419: PUSH
17420: LD_STRING 
17422: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17423: CALL_OW 44
17427: PPUSH
17428: LD_INT 0
17430: PPUSH
17431: CALL_OW 51
// end ;
17435: GO 17357
17437: POP
17438: POP
// end ;
17439: PPOPN 1
17441: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17442: LD_EXP 23
17446: IFFALSE 17454
17448: PUSH
17449: LD_EXP 43
17453: AND
17454: IFFALSE 17463
17456: GO 17458
17458: DISABLE
// StreamSibBomb ;
17459: CALL 17464 0 0
17463: END
// export function StreamSibBomb ; var i , x , y ; begin
17464: LD_INT 0
17466: PPUSH
17467: PPUSH
17468: PPUSH
17469: PPUSH
// result := false ;
17470: LD_ADDR_VAR 0 1
17474: PUSH
17475: LD_INT 0
17477: ST_TO_ADDR
// for i := 1 to 16 do
17478: LD_ADDR_VAR 0 2
17482: PUSH
17483: DOUBLE
17484: LD_INT 1
17486: DEC
17487: ST_TO_ADDR
17488: LD_INT 16
17490: PUSH
17491: FOR_TO
17492: IFFALSE 17691
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17494: LD_ADDR_VAR 0 3
17498: PUSH
17499: LD_INT 10
17501: PUSH
17502: LD_INT 20
17504: PUSH
17505: LD_INT 30
17507: PUSH
17508: LD_INT 40
17510: PUSH
17511: LD_INT 50
17513: PUSH
17514: LD_INT 60
17516: PUSH
17517: LD_INT 70
17519: PUSH
17520: LD_INT 80
17522: PUSH
17523: LD_INT 90
17525: PUSH
17526: LD_INT 100
17528: PUSH
17529: LD_INT 110
17531: PUSH
17532: LD_INT 120
17534: PUSH
17535: LD_INT 130
17537: PUSH
17538: LD_INT 140
17540: PUSH
17541: LD_INT 150
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 1
17563: PPUSH
17564: LD_INT 15
17566: PPUSH
17567: CALL_OW 12
17571: ARRAY
17572: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17573: LD_ADDR_VAR 0 4
17577: PUSH
17578: LD_INT 10
17580: PUSH
17581: LD_INT 20
17583: PUSH
17584: LD_INT 30
17586: PUSH
17587: LD_INT 40
17589: PUSH
17590: LD_INT 50
17592: PUSH
17593: LD_INT 60
17595: PUSH
17596: LD_INT 70
17598: PUSH
17599: LD_INT 80
17601: PUSH
17602: LD_INT 90
17604: PUSH
17605: LD_INT 100
17607: PUSH
17608: LD_INT 110
17610: PUSH
17611: LD_INT 120
17613: PUSH
17614: LD_INT 130
17616: PUSH
17617: LD_INT 140
17619: PUSH
17620: LD_INT 150
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 1
17642: PPUSH
17643: LD_INT 15
17645: PPUSH
17646: CALL_OW 12
17650: ARRAY
17651: ST_TO_ADDR
// if ValidHex ( x , y ) then
17652: LD_VAR 0 3
17656: PPUSH
17657: LD_VAR 0 4
17661: PPUSH
17662: CALL_OW 488
17666: IFFALSE 17689
// begin result := [ x , y ] ;
17668: LD_ADDR_VAR 0 1
17672: PUSH
17673: LD_VAR 0 3
17677: PUSH
17678: LD_VAR 0 4
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: ST_TO_ADDR
// break ;
17687: GO 17691
// end ; end ;
17689: GO 17491
17691: POP
17692: POP
// if result then
17693: LD_VAR 0 1
17697: IFFALSE 17757
// begin ToLua ( playSibBomb() ) ;
17699: LD_STRING playSibBomb()
17701: PPUSH
17702: CALL_OW 559
// wait ( 0 0$14 ) ;
17706: LD_INT 490
17708: PPUSH
17709: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17713: LD_VAR 0 1
17717: PUSH
17718: LD_INT 1
17720: ARRAY
17721: PPUSH
17722: LD_VAR 0 1
17726: PUSH
17727: LD_INT 2
17729: ARRAY
17730: PPUSH
17731: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
17735: LD_VAR 0 1
17739: PUSH
17740: LD_INT 1
17742: ARRAY
17743: PPUSH
17744: LD_VAR 0 1
17748: PUSH
17749: LD_INT 2
17751: ARRAY
17752: PPUSH
17753: CALL_OW 429
// end ; end ;
17757: LD_VAR 0 1
17761: RET
// every 0 0$1 trigger StreamModeActive and sReset do
17762: LD_EXP 23
17766: IFFALSE 17774
17768: PUSH
17769: LD_EXP 45
17773: AND
17774: IFFALSE 17786
17776: GO 17778
17778: DISABLE
// YouLost (  ) ;
17779: LD_STRING 
17781: PPUSH
17782: CALL_OW 104
17786: END
// every 0 0$1 trigger StreamModeActive and sFog do
17787: LD_EXP 23
17791: IFFALSE 17799
17793: PUSH
17794: LD_EXP 44
17798: AND
17799: IFFALSE 17813
17801: GO 17803
17803: DISABLE
// FogOff ( your_side ) ;
17804: LD_OWVAR 2
17808: PPUSH
17809: CALL_OW 344
17813: END
// every 0 0$1 trigger StreamModeActive and sSun do
17814: LD_EXP 23
17818: IFFALSE 17826
17820: PUSH
17821: LD_EXP 46
17825: AND
17826: IFFALSE 17854
17828: GO 17830
17830: DISABLE
// begin solar_recharge_percent := 0 ;
17831: LD_ADDR_OWVAR 79
17835: PUSH
17836: LD_INT 0
17838: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17839: LD_INT 10500
17841: PPUSH
17842: CALL_OW 67
// solar_recharge_percent := 100 ;
17846: LD_ADDR_OWVAR 79
17850: PUSH
17851: LD_INT 100
17853: ST_TO_ADDR
// end ;
17854: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17855: LD_EXP 23
17859: IFFALSE 17867
17861: PUSH
17862: LD_EXP 47
17866: AND
17867: IFFALSE 18106
17869: GO 17871
17871: DISABLE
17872: LD_INT 0
17874: PPUSH
17875: PPUSH
17876: PPUSH
// begin tmp := [ ] ;
17877: LD_ADDR_VAR 0 3
17881: PUSH
17882: EMPTY
17883: ST_TO_ADDR
// for i := 1 to 6 do
17884: LD_ADDR_VAR 0 1
17888: PUSH
17889: DOUBLE
17890: LD_INT 1
17892: DEC
17893: ST_TO_ADDR
17894: LD_INT 6
17896: PUSH
17897: FOR_TO
17898: IFFALSE 18003
// begin uc_nation := nation_nature ;
17900: LD_ADDR_OWVAR 21
17904: PUSH
17905: LD_INT 0
17907: ST_TO_ADDR
// uc_side := 0 ;
17908: LD_ADDR_OWVAR 20
17912: PUSH
17913: LD_INT 0
17915: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17916: LD_ADDR_OWVAR 29
17920: PUSH
17921: LD_INT 12
17923: PUSH
17924: LD_INT 12
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: ST_TO_ADDR
// hc_agressivity := 20 ;
17931: LD_ADDR_OWVAR 35
17935: PUSH
17936: LD_INT 20
17938: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17939: LD_ADDR_OWVAR 28
17943: PUSH
17944: LD_INT 17
17946: ST_TO_ADDR
// hc_gallery :=  ;
17947: LD_ADDR_OWVAR 33
17951: PUSH
17952: LD_STRING 
17954: ST_TO_ADDR
// hc_name :=  ;
17955: LD_ADDR_OWVAR 26
17959: PUSH
17960: LD_STRING 
17962: ST_TO_ADDR
// un := CreateHuman ;
17963: LD_ADDR_VAR 0 2
17967: PUSH
17968: CALL_OW 44
17972: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17973: LD_VAR 0 2
17977: PPUSH
17978: LD_INT 1
17980: PPUSH
17981: CALL_OW 51
// tmp := tmp ^ un ;
17985: LD_ADDR_VAR 0 3
17989: PUSH
17990: LD_VAR 0 3
17994: PUSH
17995: LD_VAR 0 2
17999: ADD
18000: ST_TO_ADDR
// end ;
18001: GO 17897
18003: POP
18004: POP
// repeat wait ( 0 0$1 ) ;
18005: LD_INT 35
18007: PPUSH
18008: CALL_OW 67
// for un in tmp do
18012: LD_ADDR_VAR 0 2
18016: PUSH
18017: LD_VAR 0 3
18021: PUSH
18022: FOR_IN
18023: IFFALSE 18097
// begin if IsDead ( un ) then
18025: LD_VAR 0 2
18029: PPUSH
18030: CALL_OW 301
18034: IFFALSE 18054
// begin tmp := tmp diff un ;
18036: LD_ADDR_VAR 0 3
18040: PUSH
18041: LD_VAR 0 3
18045: PUSH
18046: LD_VAR 0 2
18050: DIFF
18051: ST_TO_ADDR
// continue ;
18052: GO 18022
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18054: LD_VAR 0 2
18058: PPUSH
18059: LD_INT 3
18061: PUSH
18062: LD_INT 22
18064: PUSH
18065: LD_INT 0
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PPUSH
18076: CALL_OW 69
18080: PPUSH
18081: LD_VAR 0 2
18085: PPUSH
18086: CALL_OW 74
18090: PPUSH
18091: CALL_OW 115
// end ;
18095: GO 18022
18097: POP
18098: POP
// until not tmp ;
18099: LD_VAR 0 3
18103: NOT
18104: IFFALSE 18005
// end ;
18106: PPOPN 3
18108: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18109: LD_EXP 23
18113: IFFALSE 18121
18115: PUSH
18116: LD_EXP 48
18120: AND
18121: IFFALSE 18175
18123: GO 18125
18125: DISABLE
// begin ToLua ( displayTroll(); ) ;
18126: LD_STRING displayTroll();
18128: PPUSH
18129: CALL_OW 559
// wait ( 3 3$00 ) ;
18133: LD_INT 6300
18135: PPUSH
18136: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18140: LD_STRING hideTroll();
18142: PPUSH
18143: CALL_OW 559
// wait ( 1 1$00 ) ;
18147: LD_INT 2100
18149: PPUSH
18150: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18154: LD_STRING displayTroll();
18156: PPUSH
18157: CALL_OW 559
// wait ( 1 1$00 ) ;
18161: LD_INT 2100
18163: PPUSH
18164: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18168: LD_STRING hideTroll();
18170: PPUSH
18171: CALL_OW 559
// end ;
18175: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18176: LD_EXP 23
18180: IFFALSE 18188
18182: PUSH
18183: LD_EXP 49
18187: AND
18188: IFFALSE 18251
18190: GO 18192
18192: DISABLE
18193: LD_INT 0
18195: PPUSH
// begin p := 0 ;
18196: LD_ADDR_VAR 0 1
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// repeat game_speed := 1 ;
18204: LD_ADDR_OWVAR 65
18208: PUSH
18209: LD_INT 1
18211: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18212: LD_INT 35
18214: PPUSH
18215: CALL_OW 67
// p := p + 1 ;
18219: LD_ADDR_VAR 0 1
18223: PUSH
18224: LD_VAR 0 1
18228: PUSH
18229: LD_INT 1
18231: PLUS
18232: ST_TO_ADDR
// until p >= 60 ;
18233: LD_VAR 0 1
18237: PUSH
18238: LD_INT 60
18240: GREATEREQUAL
18241: IFFALSE 18204
// game_speed := 4 ;
18243: LD_ADDR_OWVAR 65
18247: PUSH
18248: LD_INT 4
18250: ST_TO_ADDR
// end ;
18251: PPOPN 1
18253: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18254: LD_EXP 23
18258: IFFALSE 18266
18260: PUSH
18261: LD_EXP 50
18265: AND
18266: IFFALSE 18412
18268: GO 18270
18270: DISABLE
18271: LD_INT 0
18273: PPUSH
18274: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18275: LD_ADDR_VAR 0 1
18279: PUSH
18280: LD_INT 22
18282: PUSH
18283: LD_OWVAR 2
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 2
18294: PUSH
18295: LD_INT 30
18297: PUSH
18298: LD_INT 0
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 30
18307: PUSH
18308: LD_INT 1
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: PPUSH
18324: CALL_OW 69
18328: ST_TO_ADDR
// if not depot then
18329: LD_VAR 0 1
18333: NOT
18334: IFFALSE 18338
// exit ;
18336: GO 18412
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18338: LD_ADDR_VAR 0 2
18342: PUSH
18343: LD_VAR 0 1
18347: PUSH
18348: LD_INT 1
18350: PPUSH
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL_OW 12
18360: ARRAY
18361: PPUSH
18362: CALL_OW 274
18366: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18367: LD_VAR 0 2
18371: PPUSH
18372: LD_INT 1
18374: PPUSH
18375: LD_INT 0
18377: PPUSH
18378: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18382: LD_VAR 0 2
18386: PPUSH
18387: LD_INT 2
18389: PPUSH
18390: LD_INT 0
18392: PPUSH
18393: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18397: LD_VAR 0 2
18401: PPUSH
18402: LD_INT 3
18404: PPUSH
18405: LD_INT 0
18407: PPUSH
18408: CALL_OW 277
// end ;
18412: PPOPN 2
18414: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18415: LD_EXP 23
18419: IFFALSE 18427
18421: PUSH
18422: LD_EXP 51
18426: AND
18427: IFFALSE 18524
18429: GO 18431
18431: DISABLE
18432: LD_INT 0
18434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18435: LD_ADDR_VAR 0 1
18439: PUSH
18440: LD_INT 22
18442: PUSH
18443: LD_OWVAR 2
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 21
18454: PUSH
18455: LD_INT 1
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 3
18464: PUSH
18465: LD_INT 23
18467: PUSH
18468: LD_INT 0
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: LIST
18483: PPUSH
18484: CALL_OW 69
18488: ST_TO_ADDR
// if not tmp then
18489: LD_VAR 0 1
18493: NOT
18494: IFFALSE 18498
// exit ;
18496: GO 18524
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18498: LD_VAR 0 1
18502: PUSH
18503: LD_INT 1
18505: PPUSH
18506: LD_VAR 0 1
18510: PPUSH
18511: CALL_OW 12
18515: ARRAY
18516: PPUSH
18517: LD_INT 200
18519: PPUSH
18520: CALL_OW 234
// end ;
18524: PPOPN 1
18526: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18527: LD_EXP 23
18531: IFFALSE 18539
18533: PUSH
18534: LD_EXP 52
18538: AND
18539: IFFALSE 18618
18541: GO 18543
18543: DISABLE
18544: LD_INT 0
18546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18547: LD_ADDR_VAR 0 1
18551: PUSH
18552: LD_INT 22
18554: PUSH
18555: LD_OWVAR 2
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 21
18566: PUSH
18567: LD_INT 2
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PPUSH
18578: CALL_OW 69
18582: ST_TO_ADDR
// if not tmp then
18583: LD_VAR 0 1
18587: NOT
18588: IFFALSE 18592
// exit ;
18590: GO 18618
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18592: LD_VAR 0 1
18596: PUSH
18597: LD_INT 1
18599: PPUSH
18600: LD_VAR 0 1
18604: PPUSH
18605: CALL_OW 12
18609: ARRAY
18610: PPUSH
18611: LD_INT 60
18613: PPUSH
18614: CALL_OW 234
// end ;
18618: PPOPN 1
18620: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18621: LD_EXP 23
18625: IFFALSE 18633
18627: PUSH
18628: LD_EXP 53
18632: AND
18633: IFFALSE 18732
18635: GO 18637
18637: DISABLE
18638: LD_INT 0
18640: PPUSH
18641: PPUSH
// begin enable ;
18642: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18643: LD_ADDR_VAR 0 1
18647: PUSH
18648: LD_INT 22
18650: PUSH
18651: LD_OWVAR 2
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 61
18662: PUSH
18663: EMPTY
18664: LIST
18665: PUSH
18666: LD_INT 33
18668: PUSH
18669: LD_INT 2
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: LIST
18680: PPUSH
18681: CALL_OW 69
18685: ST_TO_ADDR
// if not tmp then
18686: LD_VAR 0 1
18690: NOT
18691: IFFALSE 18695
// exit ;
18693: GO 18732
// for i in tmp do
18695: LD_ADDR_VAR 0 2
18699: PUSH
18700: LD_VAR 0 1
18704: PUSH
18705: FOR_IN
18706: IFFALSE 18730
// if IsControledBy ( i ) then
18708: LD_VAR 0 2
18712: PPUSH
18713: CALL_OW 312
18717: IFFALSE 18728
// ComUnlink ( i ) ;
18719: LD_VAR 0 2
18723: PPUSH
18724: CALL_OW 136
18728: GO 18705
18730: POP
18731: POP
// end ;
18732: PPOPN 2
18734: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
18735: LD_EXP 23
18739: IFFALSE 18747
18741: PUSH
18742: LD_EXP 54
18746: AND
18747: IFFALSE 18887
18749: GO 18751
18751: DISABLE
18752: LD_INT 0
18754: PPUSH
18755: PPUSH
// begin ToLua ( displayPowell(); ) ;
18756: LD_STRING displayPowell();
18758: PPUSH
18759: CALL_OW 559
// uc_side := 0 ;
18763: LD_ADDR_OWVAR 20
18767: PUSH
18768: LD_INT 0
18770: ST_TO_ADDR
// uc_nation := 2 ;
18771: LD_ADDR_OWVAR 21
18775: PUSH
18776: LD_INT 2
18778: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
18779: LD_ADDR_OWVAR 37
18783: PUSH
18784: LD_INT 14
18786: ST_TO_ADDR
// vc_engine := engine_siberite ;
18787: LD_ADDR_OWVAR 39
18791: PUSH
18792: LD_INT 3
18794: ST_TO_ADDR
// vc_control := control_apeman ;
18795: LD_ADDR_OWVAR 38
18799: PUSH
18800: LD_INT 5
18802: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18803: LD_ADDR_OWVAR 40
18807: PUSH
18808: LD_INT 29
18810: ST_TO_ADDR
// un := CreateVehicle ;
18811: LD_ADDR_VAR 0 2
18815: PUSH
18816: CALL_OW 45
18820: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18821: LD_VAR 0 2
18825: PPUSH
18826: LD_INT 1
18828: PPUSH
18829: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18833: LD_INT 35
18835: PPUSH
18836: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18840: LD_VAR 0 2
18844: PPUSH
18845: LD_INT 22
18847: PUSH
18848: LD_OWVAR 2
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PPUSH
18857: CALL_OW 69
18861: PPUSH
18862: LD_VAR 0 2
18866: PPUSH
18867: CALL_OW 74
18871: PPUSH
18872: CALL_OW 115
// until IsDead ( un ) ;
18876: LD_VAR 0 2
18880: PPUSH
18881: CALL_OW 301
18885: IFFALSE 18833
// end ;
18887: PPOPN 2
18889: END
// every 0 0$1 trigger StreamModeActive and sStu do
18890: LD_EXP 23
18894: IFFALSE 18902
18896: PUSH
18897: LD_EXP 62
18901: AND
18902: IFFALSE 18918
18904: GO 18906
18906: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18907: LD_STRING displayStucuk();
18909: PPUSH
18910: CALL_OW 559
// ResetFog ;
18914: CALL_OW 335
// end ;
18918: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18919: LD_EXP 23
18923: IFFALSE 18931
18925: PUSH
18926: LD_EXP 55
18930: AND
18931: IFFALSE 19072
18933: GO 18935
18935: DISABLE
18936: LD_INT 0
18938: PPUSH
18939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18940: LD_ADDR_VAR 0 2
18944: PUSH
18945: LD_INT 22
18947: PUSH
18948: LD_OWVAR 2
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 21
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PPUSH
18971: CALL_OW 69
18975: ST_TO_ADDR
// if not tmp then
18976: LD_VAR 0 2
18980: NOT
18981: IFFALSE 18985
// exit ;
18983: GO 19072
// un := tmp [ rand ( 1 , tmp ) ] ;
18985: LD_ADDR_VAR 0 1
18989: PUSH
18990: LD_VAR 0 2
18994: PUSH
18995: LD_INT 1
18997: PPUSH
18998: LD_VAR 0 2
19002: PPUSH
19003: CALL_OW 12
19007: ARRAY
19008: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19009: LD_VAR 0 1
19013: PPUSH
19014: LD_INT 0
19016: PPUSH
19017: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19021: LD_VAR 0 1
19025: PPUSH
19026: LD_OWVAR 3
19030: PUSH
19031: LD_VAR 0 1
19035: DIFF
19036: PPUSH
19037: LD_VAR 0 1
19041: PPUSH
19042: CALL_OW 74
19046: PPUSH
19047: CALL_OW 115
// wait ( 0 0$20 ) ;
19051: LD_INT 700
19053: PPUSH
19054: CALL_OW 67
// SetSide ( un , your_side ) ;
19058: LD_VAR 0 1
19062: PPUSH
19063: LD_OWVAR 2
19067: PPUSH
19068: CALL_OW 235
// end ;
19072: PPOPN 2
19074: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19075: LD_EXP 23
19079: IFFALSE 19087
19081: PUSH
19082: LD_EXP 56
19086: AND
19087: IFFALSE 19193
19089: GO 19091
19091: DISABLE
19092: LD_INT 0
19094: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19095: LD_ADDR_VAR 0 1
19099: PUSH
19100: LD_INT 22
19102: PUSH
19103: LD_OWVAR 2
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 2
19114: PUSH
19115: LD_INT 30
19117: PUSH
19118: LD_INT 0
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 30
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: LIST
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PPUSH
19144: CALL_OW 69
19148: ST_TO_ADDR
// if not depot then
19149: LD_VAR 0 1
19153: NOT
19154: IFFALSE 19158
// exit ;
19156: GO 19193
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19158: LD_VAR 0 1
19162: PUSH
19163: LD_INT 1
19165: ARRAY
19166: PPUSH
19167: CALL_OW 250
19171: PPUSH
19172: LD_VAR 0 1
19176: PUSH
19177: LD_INT 1
19179: ARRAY
19180: PPUSH
19181: CALL_OW 251
19185: PPUSH
19186: LD_INT 70
19188: PPUSH
19189: CALL_OW 495
// end ;
19193: PPOPN 1
19195: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19196: LD_EXP 23
19200: IFFALSE 19208
19202: PUSH
19203: LD_EXP 57
19207: AND
19208: IFFALSE 19419
19210: GO 19212
19212: DISABLE
19213: LD_INT 0
19215: PPUSH
19216: PPUSH
19217: PPUSH
19218: PPUSH
19219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19220: LD_ADDR_VAR 0 5
19224: PUSH
19225: LD_INT 22
19227: PUSH
19228: LD_OWVAR 2
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 21
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PPUSH
19251: CALL_OW 69
19255: ST_TO_ADDR
// if not tmp then
19256: LD_VAR 0 5
19260: NOT
19261: IFFALSE 19265
// exit ;
19263: GO 19419
// for i in tmp do
19265: LD_ADDR_VAR 0 1
19269: PUSH
19270: LD_VAR 0 5
19274: PUSH
19275: FOR_IN
19276: IFFALSE 19417
// begin d := rand ( 0 , 5 ) ;
19278: LD_ADDR_VAR 0 4
19282: PUSH
19283: LD_INT 0
19285: PPUSH
19286: LD_INT 5
19288: PPUSH
19289: CALL_OW 12
19293: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19294: LD_ADDR_VAR 0 2
19298: PUSH
19299: LD_VAR 0 1
19303: PPUSH
19304: CALL_OW 250
19308: PPUSH
19309: LD_VAR 0 4
19313: PPUSH
19314: LD_INT 3
19316: PPUSH
19317: LD_INT 12
19319: PPUSH
19320: CALL_OW 12
19324: PPUSH
19325: CALL_OW 272
19329: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19330: LD_ADDR_VAR 0 3
19334: PUSH
19335: LD_VAR 0 1
19339: PPUSH
19340: CALL_OW 251
19344: PPUSH
19345: LD_VAR 0 4
19349: PPUSH
19350: LD_INT 3
19352: PPUSH
19353: LD_INT 12
19355: PPUSH
19356: CALL_OW 12
19360: PPUSH
19361: CALL_OW 273
19365: ST_TO_ADDR
// if ValidHex ( x , y ) then
19366: LD_VAR 0 2
19370: PPUSH
19371: LD_VAR 0 3
19375: PPUSH
19376: CALL_OW 488
19380: IFFALSE 19415
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19382: LD_VAR 0 1
19386: PPUSH
19387: LD_VAR 0 2
19391: PPUSH
19392: LD_VAR 0 3
19396: PPUSH
19397: LD_INT 3
19399: PPUSH
19400: LD_INT 6
19402: PPUSH
19403: CALL_OW 12
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: CALL_OW 483
// end ;
19415: GO 19275
19417: POP
19418: POP
// end ;
19419: PPOPN 5
19421: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19422: LD_EXP 23
19426: IFFALSE 19434
19428: PUSH
19429: LD_EXP 58
19433: AND
19434: IFFALSE 19528
19436: GO 19438
19438: DISABLE
19439: LD_INT 0
19441: PPUSH
19442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19443: LD_ADDR_VAR 0 2
19447: PUSH
19448: LD_INT 22
19450: PUSH
19451: LD_OWVAR 2
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 32
19462: PUSH
19463: LD_INT 1
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 21
19472: PUSH
19473: LD_INT 2
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: LIST
19484: PPUSH
19485: CALL_OW 69
19489: ST_TO_ADDR
// if not tmp then
19490: LD_VAR 0 2
19494: NOT
19495: IFFALSE 19499
// exit ;
19497: GO 19528
// for i in tmp do
19499: LD_ADDR_VAR 0 1
19503: PUSH
19504: LD_VAR 0 2
19508: PUSH
19509: FOR_IN
19510: IFFALSE 19526
// SetFuel ( i , 0 ) ;
19512: LD_VAR 0 1
19516: PPUSH
19517: LD_INT 0
19519: PPUSH
19520: CALL_OW 240
19524: GO 19509
19526: POP
19527: POP
// end ;
19528: PPOPN 2
19530: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19531: LD_EXP 23
19535: IFFALSE 19543
19537: PUSH
19538: LD_EXP 59
19542: AND
19543: IFFALSE 19609
19545: GO 19547
19547: DISABLE
19548: LD_INT 0
19550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19551: LD_ADDR_VAR 0 1
19555: PUSH
19556: LD_INT 22
19558: PUSH
19559: LD_OWVAR 2
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 30
19570: PUSH
19571: LD_INT 29
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PPUSH
19582: CALL_OW 69
19586: ST_TO_ADDR
// if not tmp then
19587: LD_VAR 0 1
19591: NOT
19592: IFFALSE 19596
// exit ;
19594: GO 19609
// DestroyUnit ( tmp [ 1 ] ) ;
19596: LD_VAR 0 1
19600: PUSH
19601: LD_INT 1
19603: ARRAY
19604: PPUSH
19605: CALL_OW 65
// end ;
19609: PPOPN 1
19611: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19612: LD_EXP 23
19616: IFFALSE 19624
19618: PUSH
19619: LD_EXP 61
19623: AND
19624: IFFALSE 19753
19626: GO 19628
19628: DISABLE
19629: LD_INT 0
19631: PPUSH
// begin uc_side := 0 ;
19632: LD_ADDR_OWVAR 20
19636: PUSH
19637: LD_INT 0
19639: ST_TO_ADDR
// uc_nation := nation_arabian ;
19640: LD_ADDR_OWVAR 21
19644: PUSH
19645: LD_INT 2
19647: ST_TO_ADDR
// hc_gallery :=  ;
19648: LD_ADDR_OWVAR 33
19652: PUSH
19653: LD_STRING 
19655: ST_TO_ADDR
// hc_name :=  ;
19656: LD_ADDR_OWVAR 26
19660: PUSH
19661: LD_STRING 
19663: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19664: LD_INT 1
19666: PPUSH
19667: LD_INT 11
19669: PPUSH
19670: LD_INT 10
19672: PPUSH
19673: CALL_OW 380
// un := CreateHuman ;
19677: LD_ADDR_VAR 0 1
19681: PUSH
19682: CALL_OW 44
19686: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19687: LD_VAR 0 1
19691: PPUSH
19692: LD_INT 1
19694: PPUSH
19695: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19699: LD_INT 35
19701: PPUSH
19702: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19706: LD_VAR 0 1
19710: PPUSH
19711: LD_INT 22
19713: PUSH
19714: LD_OWVAR 2
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PPUSH
19723: CALL_OW 69
19727: PPUSH
19728: LD_VAR 0 1
19732: PPUSH
19733: CALL_OW 74
19737: PPUSH
19738: CALL_OW 115
// until IsDead ( un ) ;
19742: LD_VAR 0 1
19746: PPUSH
19747: CALL_OW 301
19751: IFFALSE 19699
// end ;
19753: PPOPN 1
19755: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
19756: LD_EXP 23
19760: IFFALSE 19768
19762: PUSH
19763: LD_EXP 63
19767: AND
19768: IFFALSE 19780
19770: GO 19772
19772: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
19773: LD_STRING earthquake(getX(game), 0, 32)
19775: PPUSH
19776: CALL_OW 559
19780: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
19781: LD_EXP 23
19785: IFFALSE 19793
19787: PUSH
19788: LD_EXP 64
19792: AND
19793: IFFALSE 19884
19795: GO 19797
19797: DISABLE
19798: LD_INT 0
19800: PPUSH
// begin enable ;
19801: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
19802: LD_ADDR_VAR 0 1
19806: PUSH
19807: LD_INT 22
19809: PUSH
19810: LD_OWVAR 2
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 21
19821: PUSH
19822: LD_INT 2
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: PUSH
19829: LD_INT 33
19831: PUSH
19832: LD_INT 3
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: LIST
19843: PPUSH
19844: CALL_OW 69
19848: ST_TO_ADDR
// if not tmp then
19849: LD_VAR 0 1
19853: NOT
19854: IFFALSE 19858
// exit ;
19856: GO 19884
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19858: LD_VAR 0 1
19862: PUSH
19863: LD_INT 1
19865: PPUSH
19866: LD_VAR 0 1
19870: PPUSH
19871: CALL_OW 12
19875: ARRAY
19876: PPUSH
19877: LD_INT 1
19879: PPUSH
19880: CALL_OW 234
// end ;
19884: PPOPN 1
19886: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19887: LD_EXP 23
19891: IFFALSE 19899
19893: PUSH
19894: LD_EXP 65
19898: AND
19899: IFFALSE 20040
19901: GO 19903
19903: DISABLE
19904: LD_INT 0
19906: PPUSH
19907: PPUSH
19908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19909: LD_ADDR_VAR 0 3
19913: PUSH
19914: LD_INT 22
19916: PUSH
19917: LD_OWVAR 2
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 25
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PPUSH
19940: CALL_OW 69
19944: ST_TO_ADDR
// if not tmp then
19945: LD_VAR 0 3
19949: NOT
19950: IFFALSE 19954
// exit ;
19952: GO 20040
// un := tmp [ rand ( 1 , tmp ) ] ;
19954: LD_ADDR_VAR 0 2
19958: PUSH
19959: LD_VAR 0 3
19963: PUSH
19964: LD_INT 1
19966: PPUSH
19967: LD_VAR 0 3
19971: PPUSH
19972: CALL_OW 12
19976: ARRAY
19977: ST_TO_ADDR
// if Crawls ( un ) then
19978: LD_VAR 0 2
19982: PPUSH
19983: CALL_OW 318
19987: IFFALSE 19998
// ComWalk ( un ) ;
19989: LD_VAR 0 2
19993: PPUSH
19994: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19998: LD_VAR 0 2
20002: PPUSH
20003: LD_INT 9
20005: PPUSH
20006: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20010: LD_INT 28
20012: PPUSH
20013: LD_OWVAR 2
20017: PPUSH
20018: LD_INT 2
20020: PPUSH
20021: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20025: LD_INT 29
20027: PPUSH
20028: LD_OWVAR 2
20032: PPUSH
20033: LD_INT 2
20035: PPUSH
20036: CALL_OW 322
// end ;
20040: PPOPN 3
20042: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20043: LD_EXP 23
20047: IFFALSE 20055
20049: PUSH
20050: LD_EXP 66
20054: AND
20055: IFFALSE 20166
20057: GO 20059
20059: DISABLE
20060: LD_INT 0
20062: PPUSH
20063: PPUSH
20064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20065: LD_ADDR_VAR 0 3
20069: PUSH
20070: LD_INT 22
20072: PUSH
20073: LD_OWVAR 2
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 25
20084: PUSH
20085: LD_INT 1
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PPUSH
20096: CALL_OW 69
20100: ST_TO_ADDR
// if not tmp then
20101: LD_VAR 0 3
20105: NOT
20106: IFFALSE 20110
// exit ;
20108: GO 20166
// un := tmp [ rand ( 1 , tmp ) ] ;
20110: LD_ADDR_VAR 0 2
20114: PUSH
20115: LD_VAR 0 3
20119: PUSH
20120: LD_INT 1
20122: PPUSH
20123: LD_VAR 0 3
20127: PPUSH
20128: CALL_OW 12
20132: ARRAY
20133: ST_TO_ADDR
// if Crawls ( un ) then
20134: LD_VAR 0 2
20138: PPUSH
20139: CALL_OW 318
20143: IFFALSE 20154
// ComWalk ( un ) ;
20145: LD_VAR 0 2
20149: PPUSH
20150: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20154: LD_VAR 0 2
20158: PPUSH
20159: LD_INT 8
20161: PPUSH
20162: CALL_OW 336
// end ;
20166: PPOPN 3
20168: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20169: LD_EXP 23
20173: IFFALSE 20181
20175: PUSH
20176: LD_EXP 67
20180: AND
20181: IFFALSE 20325
20183: GO 20185
20185: DISABLE
20186: LD_INT 0
20188: PPUSH
20189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20190: LD_ADDR_VAR 0 2
20194: PUSH
20195: LD_INT 22
20197: PUSH
20198: LD_OWVAR 2
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: PUSH
20207: LD_INT 21
20209: PUSH
20210: LD_INT 2
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 2
20219: PUSH
20220: LD_INT 34
20222: PUSH
20223: LD_INT 12
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 34
20232: PUSH
20233: LD_INT 51
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 34
20242: PUSH
20243: LD_INT 32
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: PPUSH
20261: CALL_OW 69
20265: ST_TO_ADDR
// if not tmp then
20266: LD_VAR 0 2
20270: NOT
20271: IFFALSE 20275
// exit ;
20273: GO 20325
// for i in tmp do
20275: LD_ADDR_VAR 0 1
20279: PUSH
20280: LD_VAR 0 2
20284: PUSH
20285: FOR_IN
20286: IFFALSE 20323
// if GetCargo ( i , mat_artifact ) = 0 then
20288: LD_VAR 0 1
20292: PPUSH
20293: LD_INT 4
20295: PPUSH
20296: CALL_OW 289
20300: PUSH
20301: LD_INT 0
20303: EQUAL
20304: IFFALSE 20321
// SetCargo ( i , mat_siberit , 100 ) ;
20306: LD_VAR 0 1
20310: PPUSH
20311: LD_INT 3
20313: PPUSH
20314: LD_INT 100
20316: PPUSH
20317: CALL_OW 290
20321: GO 20285
20323: POP
20324: POP
// end ;
20325: PPOPN 2
20327: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20328: LD_EXP 23
20332: IFFALSE 20340
20334: PUSH
20335: LD_EXP 68
20339: AND
20340: IFFALSE 20523
20342: GO 20344
20344: DISABLE
20345: LD_INT 0
20347: PPUSH
20348: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20349: LD_ADDR_VAR 0 2
20353: PUSH
20354: LD_INT 22
20356: PUSH
20357: LD_OWVAR 2
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PPUSH
20366: CALL_OW 69
20370: ST_TO_ADDR
// if not tmp then
20371: LD_VAR 0 2
20375: NOT
20376: IFFALSE 20380
// exit ;
20378: GO 20523
// for i := 1 to 2 do
20380: LD_ADDR_VAR 0 1
20384: PUSH
20385: DOUBLE
20386: LD_INT 1
20388: DEC
20389: ST_TO_ADDR
20390: LD_INT 2
20392: PUSH
20393: FOR_TO
20394: IFFALSE 20521
// begin uc_side := your_side ;
20396: LD_ADDR_OWVAR 20
20400: PUSH
20401: LD_OWVAR 2
20405: ST_TO_ADDR
// uc_nation := nation_american ;
20406: LD_ADDR_OWVAR 21
20410: PUSH
20411: LD_INT 1
20413: ST_TO_ADDR
// vc_chassis := us_morphling ;
20414: LD_ADDR_OWVAR 37
20418: PUSH
20419: LD_INT 5
20421: ST_TO_ADDR
// vc_engine := engine_siberite ;
20422: LD_ADDR_OWVAR 39
20426: PUSH
20427: LD_INT 3
20429: ST_TO_ADDR
// vc_control := control_computer ;
20430: LD_ADDR_OWVAR 38
20434: PUSH
20435: LD_INT 3
20437: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20438: LD_ADDR_OWVAR 40
20442: PUSH
20443: LD_INT 10
20445: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20446: LD_VAR 0 2
20450: PUSH
20451: LD_INT 1
20453: ARRAY
20454: PPUSH
20455: CALL_OW 310
20459: NOT
20460: IFFALSE 20507
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20462: CALL_OW 45
20466: PPUSH
20467: LD_VAR 0 2
20471: PUSH
20472: LD_INT 1
20474: ARRAY
20475: PPUSH
20476: CALL_OW 250
20480: PPUSH
20481: LD_VAR 0 2
20485: PUSH
20486: LD_INT 1
20488: ARRAY
20489: PPUSH
20490: CALL_OW 251
20494: PPUSH
20495: LD_INT 12
20497: PPUSH
20498: LD_INT 1
20500: PPUSH
20501: CALL_OW 50
20505: GO 20519
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20507: CALL_OW 45
20511: PPUSH
20512: LD_INT 1
20514: PPUSH
20515: CALL_OW 51
// end ;
20519: GO 20393
20521: POP
20522: POP
// end ;
20523: PPOPN 2
20525: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20526: LD_EXP 23
20530: IFFALSE 20538
20532: PUSH
20533: LD_EXP 69
20537: AND
20538: IFFALSE 20760
20540: GO 20542
20542: DISABLE
20543: LD_INT 0
20545: PPUSH
20546: PPUSH
20547: PPUSH
20548: PPUSH
20549: PPUSH
20550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20551: LD_ADDR_VAR 0 6
20555: PUSH
20556: LD_INT 22
20558: PUSH
20559: LD_OWVAR 2
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 21
20570: PUSH
20571: LD_INT 1
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 3
20580: PUSH
20581: LD_INT 23
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: LIST
20599: PPUSH
20600: CALL_OW 69
20604: ST_TO_ADDR
// if not tmp then
20605: LD_VAR 0 6
20609: NOT
20610: IFFALSE 20614
// exit ;
20612: GO 20760
// s1 := rand ( 1 , 4 ) ;
20614: LD_ADDR_VAR 0 2
20618: PUSH
20619: LD_INT 1
20621: PPUSH
20622: LD_INT 4
20624: PPUSH
20625: CALL_OW 12
20629: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20630: LD_ADDR_VAR 0 4
20634: PUSH
20635: LD_VAR 0 6
20639: PUSH
20640: LD_INT 1
20642: ARRAY
20643: PPUSH
20644: LD_VAR 0 2
20648: PPUSH
20649: CALL_OW 259
20653: ST_TO_ADDR
// if s1 = 1 then
20654: LD_VAR 0 2
20658: PUSH
20659: LD_INT 1
20661: EQUAL
20662: IFFALSE 20682
// s2 := rand ( 2 , 4 ) else
20664: LD_ADDR_VAR 0 3
20668: PUSH
20669: LD_INT 2
20671: PPUSH
20672: LD_INT 4
20674: PPUSH
20675: CALL_OW 12
20679: ST_TO_ADDR
20680: GO 20690
// s2 := 1 ;
20682: LD_ADDR_VAR 0 3
20686: PUSH
20687: LD_INT 1
20689: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20690: LD_ADDR_VAR 0 5
20694: PUSH
20695: LD_VAR 0 6
20699: PUSH
20700: LD_INT 1
20702: ARRAY
20703: PPUSH
20704: LD_VAR 0 3
20708: PPUSH
20709: CALL_OW 259
20713: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20714: LD_VAR 0 6
20718: PUSH
20719: LD_INT 1
20721: ARRAY
20722: PPUSH
20723: LD_VAR 0 2
20727: PPUSH
20728: LD_VAR 0 5
20732: PPUSH
20733: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
20737: LD_VAR 0 6
20741: PUSH
20742: LD_INT 1
20744: ARRAY
20745: PPUSH
20746: LD_VAR 0 3
20750: PPUSH
20751: LD_VAR 0 4
20755: PPUSH
20756: CALL_OW 237
// end ;
20760: PPOPN 6
20762: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
20763: LD_EXP 23
20767: IFFALSE 20775
20769: PUSH
20770: LD_EXP 70
20774: AND
20775: IFFALSE 20854
20777: GO 20779
20779: DISABLE
20780: LD_INT 0
20782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
20783: LD_ADDR_VAR 0 1
20787: PUSH
20788: LD_INT 22
20790: PUSH
20791: LD_OWVAR 2
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 30
20802: PUSH
20803: LD_INT 3
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PPUSH
20814: CALL_OW 69
20818: ST_TO_ADDR
// if not tmp then
20819: LD_VAR 0 1
20823: NOT
20824: IFFALSE 20828
// exit ;
20826: GO 20854
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20828: LD_VAR 0 1
20832: PUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_VAR 0 1
20840: PPUSH
20841: CALL_OW 12
20845: ARRAY
20846: PPUSH
20847: LD_INT 1
20849: PPUSH
20850: CALL_OW 234
// end ;
20854: PPOPN 1
20856: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20857: LD_EXP 23
20861: IFFALSE 20869
20863: PUSH
20864: LD_EXP 71
20868: AND
20869: IFFALSE 20981
20871: GO 20873
20873: DISABLE
20874: LD_INT 0
20876: PPUSH
20877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20878: LD_ADDR_VAR 0 2
20882: PUSH
20883: LD_INT 22
20885: PUSH
20886: LD_OWVAR 2
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 2
20897: PUSH
20898: LD_INT 30
20900: PUSH
20901: LD_INT 27
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 30
20910: PUSH
20911: LD_INT 26
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 30
20920: PUSH
20921: LD_INT 28
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PPUSH
20938: CALL_OW 69
20942: ST_TO_ADDR
// if not tmp then
20943: LD_VAR 0 2
20947: NOT
20948: IFFALSE 20952
// exit ;
20950: GO 20981
// for i in tmp do
20952: LD_ADDR_VAR 0 1
20956: PUSH
20957: LD_VAR 0 2
20961: PUSH
20962: FOR_IN
20963: IFFALSE 20979
// SetLives ( i , 1 ) ;
20965: LD_VAR 0 1
20969: PPUSH
20970: LD_INT 1
20972: PPUSH
20973: CALL_OW 234
20977: GO 20962
20979: POP
20980: POP
// end ;
20981: PPOPN 2
20983: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20984: LD_EXP 23
20988: IFFALSE 20996
20990: PUSH
20991: LD_EXP 72
20995: AND
20996: IFFALSE 21283
20998: GO 21000
21000: DISABLE
21001: LD_INT 0
21003: PPUSH
21004: PPUSH
21005: PPUSH
// begin i := rand ( 1 , 7 ) ;
21006: LD_ADDR_VAR 0 1
21010: PUSH
21011: LD_INT 1
21013: PPUSH
21014: LD_INT 7
21016: PPUSH
21017: CALL_OW 12
21021: ST_TO_ADDR
// case i of 1 :
21022: LD_VAR 0 1
21026: PUSH
21027: LD_INT 1
21029: DOUBLE
21030: EQUAL
21031: IFTRUE 21035
21033: GO 21045
21035: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21036: LD_STRING earthquake(getX(game), 0, 32)
21038: PPUSH
21039: CALL_OW 559
21043: GO 21283
21045: LD_INT 2
21047: DOUBLE
21048: EQUAL
21049: IFTRUE 21053
21051: GO 21067
21053: POP
// begin ToLua ( displayStucuk(); ) ;
21054: LD_STRING displayStucuk();
21056: PPUSH
21057: CALL_OW 559
// ResetFog ;
21061: CALL_OW 335
// end ; 3 :
21065: GO 21283
21067: LD_INT 3
21069: DOUBLE
21070: EQUAL
21071: IFTRUE 21075
21073: GO 21179
21075: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21076: LD_ADDR_VAR 0 2
21080: PUSH
21081: LD_INT 22
21083: PUSH
21084: LD_OWVAR 2
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 25
21095: PUSH
21096: LD_INT 1
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PPUSH
21107: CALL_OW 69
21111: ST_TO_ADDR
// if not tmp then
21112: LD_VAR 0 2
21116: NOT
21117: IFFALSE 21121
// exit ;
21119: GO 21283
// un := tmp [ rand ( 1 , tmp ) ] ;
21121: LD_ADDR_VAR 0 3
21125: PUSH
21126: LD_VAR 0 2
21130: PUSH
21131: LD_INT 1
21133: PPUSH
21134: LD_VAR 0 2
21138: PPUSH
21139: CALL_OW 12
21143: ARRAY
21144: ST_TO_ADDR
// if Crawls ( un ) then
21145: LD_VAR 0 3
21149: PPUSH
21150: CALL_OW 318
21154: IFFALSE 21165
// ComWalk ( un ) ;
21156: LD_VAR 0 3
21160: PPUSH
21161: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21165: LD_VAR 0 3
21169: PPUSH
21170: LD_INT 8
21172: PPUSH
21173: CALL_OW 336
// end ; 4 :
21177: GO 21283
21179: LD_INT 4
21181: DOUBLE
21182: EQUAL
21183: IFTRUE 21187
21185: GO 21261
21187: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21188: LD_ADDR_VAR 0 2
21192: PUSH
21193: LD_INT 22
21195: PUSH
21196: LD_OWVAR 2
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 30
21207: PUSH
21208: LD_INT 29
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PPUSH
21219: CALL_OW 69
21223: ST_TO_ADDR
// if not tmp then
21224: LD_VAR 0 2
21228: NOT
21229: IFFALSE 21233
// exit ;
21231: GO 21283
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21233: LD_VAR 0 2
21237: PUSH
21238: LD_INT 1
21240: ARRAY
21241: PPUSH
21242: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21246: LD_VAR 0 2
21250: PUSH
21251: LD_INT 1
21253: ARRAY
21254: PPUSH
21255: CALL_OW 65
// end ; 5 .. 7 :
21259: GO 21283
21261: LD_INT 5
21263: DOUBLE
21264: GREATEREQUAL
21265: IFFALSE 21273
21267: LD_INT 7
21269: DOUBLE
21270: LESSEQUAL
21271: IFTRUE 21275
21273: GO 21282
21275: POP
// StreamSibBomb ; end ;
21276: CALL 17464 0 0
21280: GO 21283
21282: POP
// end ;
21283: PPOPN 3
21285: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21286: LD_EXP 23
21290: IFFALSE 21298
21292: PUSH
21293: LD_EXP 73
21297: AND
21298: IFFALSE 21454
21300: GO 21302
21302: DISABLE
21303: LD_INT 0
21305: PPUSH
21306: PPUSH
21307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21308: LD_ADDR_VAR 0 2
21312: PUSH
21313: LD_INT 81
21315: PUSH
21316: LD_OWVAR 2
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 21
21330: PUSH
21331: LD_INT 1
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 21
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: LIST
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PPUSH
21357: CALL_OW 69
21361: ST_TO_ADDR
// if not tmp then
21362: LD_VAR 0 2
21366: NOT
21367: IFFALSE 21371
// exit ;
21369: GO 21454
// p := 0 ;
21371: LD_ADDR_VAR 0 3
21375: PUSH
21376: LD_INT 0
21378: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21379: LD_INT 35
21381: PPUSH
21382: CALL_OW 67
// p := p + 1 ;
21386: LD_ADDR_VAR 0 3
21390: PUSH
21391: LD_VAR 0 3
21395: PUSH
21396: LD_INT 1
21398: PLUS
21399: ST_TO_ADDR
// for i in tmp do
21400: LD_ADDR_VAR 0 1
21404: PUSH
21405: LD_VAR 0 2
21409: PUSH
21410: FOR_IN
21411: IFFALSE 21442
// if GetLives ( i ) < 1000 then
21413: LD_VAR 0 1
21417: PPUSH
21418: CALL_OW 256
21422: PUSH
21423: LD_INT 1000
21425: LESS
21426: IFFALSE 21440
// SetLives ( i , 1000 ) ;
21428: LD_VAR 0 1
21432: PPUSH
21433: LD_INT 1000
21435: PPUSH
21436: CALL_OW 234
21440: GO 21410
21442: POP
21443: POP
// until p > 20 ;
21444: LD_VAR 0 3
21448: PUSH
21449: LD_INT 20
21451: GREATER
21452: IFFALSE 21379
// end ;
21454: PPOPN 3
21456: END
// every 0 0$1 trigger StreamModeActive and sTime do
21457: LD_EXP 23
21461: IFFALSE 21469
21463: PUSH
21464: LD_EXP 74
21468: AND
21469: IFFALSE 21504
21471: GO 21473
21473: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21474: LD_INT 28
21476: PPUSH
21477: LD_OWVAR 2
21481: PPUSH
21482: LD_INT 2
21484: PPUSH
21485: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21489: LD_INT 30
21491: PPUSH
21492: LD_OWVAR 2
21496: PPUSH
21497: LD_INT 2
21499: PPUSH
21500: CALL_OW 322
// end ;
21504: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21505: LD_EXP 23
21509: IFFALSE 21517
21511: PUSH
21512: LD_EXP 75
21516: AND
21517: IFFALSE 21638
21519: GO 21521
21521: DISABLE
21522: LD_INT 0
21524: PPUSH
21525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21526: LD_ADDR_VAR 0 2
21530: PUSH
21531: LD_INT 22
21533: PUSH
21534: LD_OWVAR 2
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 21
21545: PUSH
21546: LD_INT 1
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 3
21555: PUSH
21556: LD_INT 23
21558: PUSH
21559: LD_INT 0
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: LIST
21574: PPUSH
21575: CALL_OW 69
21579: ST_TO_ADDR
// if not tmp then
21580: LD_VAR 0 2
21584: NOT
21585: IFFALSE 21589
// exit ;
21587: GO 21638
// for i in tmp do
21589: LD_ADDR_VAR 0 1
21593: PUSH
21594: LD_VAR 0 2
21598: PUSH
21599: FOR_IN
21600: IFFALSE 21636
// begin if Crawls ( i ) then
21602: LD_VAR 0 1
21606: PPUSH
21607: CALL_OW 318
21611: IFFALSE 21622
// ComWalk ( i ) ;
21613: LD_VAR 0 1
21617: PPUSH
21618: CALL_OW 138
// SetClass ( i , 2 ) ;
21622: LD_VAR 0 1
21626: PPUSH
21627: LD_INT 2
21629: PPUSH
21630: CALL_OW 336
// end ;
21634: GO 21599
21636: POP
21637: POP
// end ;
21638: PPOPN 2
21640: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21641: LD_EXP 23
21645: IFFALSE 21653
21647: PUSH
21648: LD_EXP 76
21652: AND
21653: IFFALSE 21943
21655: GO 21657
21657: DISABLE
21658: LD_INT 0
21660: PPUSH
21661: PPUSH
21662: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21663: LD_OWVAR 2
21667: PPUSH
21668: LD_INT 9
21670: PPUSH
21671: LD_INT 1
21673: PPUSH
21674: LD_INT 1
21676: PPUSH
21677: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21681: LD_INT 9
21683: PPUSH
21684: LD_OWVAR 2
21688: PPUSH
21689: CALL_OW 343
// uc_side := 9 ;
21693: LD_ADDR_OWVAR 20
21697: PUSH
21698: LD_INT 9
21700: ST_TO_ADDR
// uc_nation := 2 ;
21701: LD_ADDR_OWVAR 21
21705: PUSH
21706: LD_INT 2
21708: ST_TO_ADDR
// hc_name := Dark Warrior ;
21709: LD_ADDR_OWVAR 26
21713: PUSH
21714: LD_STRING Dark Warrior
21716: ST_TO_ADDR
// hc_gallery :=  ;
21717: LD_ADDR_OWVAR 33
21721: PUSH
21722: LD_STRING 
21724: ST_TO_ADDR
// hc_noskilllimit := true ;
21725: LD_ADDR_OWVAR 76
21729: PUSH
21730: LD_INT 1
21732: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
21733: LD_ADDR_OWVAR 31
21737: PUSH
21738: LD_INT 30
21740: PUSH
21741: LD_INT 30
21743: PUSH
21744: LD_INT 30
21746: PUSH
21747: LD_INT 30
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: ST_TO_ADDR
// un := CreateHuman ;
21756: LD_ADDR_VAR 0 3
21760: PUSH
21761: CALL_OW 44
21765: ST_TO_ADDR
// hc_noskilllimit := false ;
21766: LD_ADDR_OWVAR 76
21770: PUSH
21771: LD_INT 0
21773: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21774: LD_VAR 0 3
21778: PPUSH
21779: LD_INT 1
21781: PPUSH
21782: CALL_OW 51
// ToLua ( playRanger() ) ;
21786: LD_STRING playRanger()
21788: PPUSH
21789: CALL_OW 559
// p := 0 ;
21793: LD_ADDR_VAR 0 2
21797: PUSH
21798: LD_INT 0
21800: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21801: LD_INT 35
21803: PPUSH
21804: CALL_OW 67
// p := p + 1 ;
21808: LD_ADDR_VAR 0 2
21812: PUSH
21813: LD_VAR 0 2
21817: PUSH
21818: LD_INT 1
21820: PLUS
21821: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
21822: LD_VAR 0 3
21826: PPUSH
21827: CALL_OW 256
21831: PUSH
21832: LD_INT 1000
21834: LESS
21835: IFFALSE 21849
// SetLives ( un , 1000 ) ;
21837: LD_VAR 0 3
21841: PPUSH
21842: LD_INT 1000
21844: PPUSH
21845: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21849: LD_VAR 0 3
21853: PPUSH
21854: LD_INT 81
21856: PUSH
21857: LD_OWVAR 2
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 91
21868: PUSH
21869: LD_VAR 0 3
21873: PUSH
21874: LD_INT 30
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: LIST
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PPUSH
21886: CALL_OW 69
21890: PPUSH
21891: LD_VAR 0 3
21895: PPUSH
21896: CALL_OW 74
21900: PPUSH
21901: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21905: LD_VAR 0 2
21909: PUSH
21910: LD_INT 80
21912: GREATER
21913: IFTRUE 21926
21915: PUSH
21916: LD_VAR 0 3
21920: PPUSH
21921: CALL_OW 301
21925: OR
21926: IFFALSE 21801
// if un then
21928: LD_VAR 0 3
21932: IFFALSE 21943
// RemoveUnit ( un ) ;
21934: LD_VAR 0 3
21938: PPUSH
21939: CALL_OW 64
// end ;
21943: PPOPN 3
21945: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21946: LD_EXP 77
21950: IFFALSE 22066
21952: GO 21954
21954: DISABLE
21955: LD_INT 0
21957: PPUSH
21958: PPUSH
21959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21960: LD_ADDR_VAR 0 2
21964: PUSH
21965: LD_INT 81
21967: PUSH
21968: LD_OWVAR 2
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 21
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PPUSH
21991: CALL_OW 69
21995: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21996: LD_STRING playComputer()
21998: PPUSH
21999: CALL_OW 559
// if not tmp then
22003: LD_VAR 0 2
22007: NOT
22008: IFFALSE 22012
// exit ;
22010: GO 22066
// for i in tmp do
22012: LD_ADDR_VAR 0 1
22016: PUSH
22017: LD_VAR 0 2
22021: PUSH
22022: FOR_IN
22023: IFFALSE 22064
// for j := 1 to 4 do
22025: LD_ADDR_VAR 0 3
22029: PUSH
22030: DOUBLE
22031: LD_INT 1
22033: DEC
22034: ST_TO_ADDR
22035: LD_INT 4
22037: PUSH
22038: FOR_TO
22039: IFFALSE 22060
// SetSkill ( i , j , 10 ) ;
22041: LD_VAR 0 1
22045: PPUSH
22046: LD_VAR 0 3
22050: PPUSH
22051: LD_INT 10
22053: PPUSH
22054: CALL_OW 237
22058: GO 22038
22060: POP
22061: POP
22062: GO 22022
22064: POP
22065: POP
// end ;
22066: PPOPN 3
22068: END
// every 0 0$1 trigger s30 do var i , tmp ;
22069: LD_EXP 78
22073: IFFALSE 22142
22075: GO 22077
22077: DISABLE
22078: LD_INT 0
22080: PPUSH
22081: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22082: LD_ADDR_VAR 0 2
22086: PUSH
22087: LD_INT 22
22089: PUSH
22090: LD_OWVAR 2
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PPUSH
22099: CALL_OW 69
22103: ST_TO_ADDR
// if not tmp then
22104: LD_VAR 0 2
22108: NOT
22109: IFFALSE 22113
// exit ;
22111: GO 22142
// for i in tmp do
22113: LD_ADDR_VAR 0 1
22117: PUSH
22118: LD_VAR 0 2
22122: PUSH
22123: FOR_IN
22124: IFFALSE 22140
// SetLives ( i , 300 ) ;
22126: LD_VAR 0 1
22130: PPUSH
22131: LD_INT 300
22133: PPUSH
22134: CALL_OW 234
22138: GO 22123
22140: POP
22141: POP
// end ;
22142: PPOPN 2
22144: END
// every 0 0$1 trigger s60 do var i , tmp ;
22145: LD_EXP 79
22149: IFFALSE 22218
22151: GO 22153
22153: DISABLE
22154: LD_INT 0
22156: PPUSH
22157: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22158: LD_ADDR_VAR 0 2
22162: PUSH
22163: LD_INT 22
22165: PUSH
22166: LD_OWVAR 2
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PPUSH
22175: CALL_OW 69
22179: ST_TO_ADDR
// if not tmp then
22180: LD_VAR 0 2
22184: NOT
22185: IFFALSE 22189
// exit ;
22187: GO 22218
// for i in tmp do
22189: LD_ADDR_VAR 0 1
22193: PUSH
22194: LD_VAR 0 2
22198: PUSH
22199: FOR_IN
22200: IFFALSE 22216
// SetLives ( i , 600 ) ;
22202: LD_VAR 0 1
22206: PPUSH
22207: LD_INT 600
22209: PPUSH
22210: CALL_OW 234
22214: GO 22199
22216: POP
22217: POP
// end ;
22218: PPOPN 2
22220: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22221: LD_INT 0
22223: PPUSH
// case cmd of 301 :
22224: LD_VAR 0 1
22228: PUSH
22229: LD_INT 301
22231: DOUBLE
22232: EQUAL
22233: IFTRUE 22237
22235: GO 22269
22237: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22238: LD_VAR 0 6
22242: PPUSH
22243: LD_VAR 0 7
22247: PPUSH
22248: LD_VAR 0 8
22252: PPUSH
22253: LD_VAR 0 4
22257: PPUSH
22258: LD_VAR 0 5
22262: PPUSH
22263: CALL 23482 0 5
22267: GO 22390
22269: LD_INT 302
22271: DOUBLE
22272: EQUAL
22273: IFTRUE 22277
22275: GO 22314
22277: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22278: LD_VAR 0 6
22282: PPUSH
22283: LD_VAR 0 7
22287: PPUSH
22288: LD_VAR 0 8
22292: PPUSH
22293: LD_VAR 0 9
22297: PPUSH
22298: LD_VAR 0 4
22302: PPUSH
22303: LD_VAR 0 5
22307: PPUSH
22308: CALL 23573 0 6
22312: GO 22390
22314: LD_INT 303
22316: DOUBLE
22317: EQUAL
22318: IFTRUE 22322
22320: GO 22359
22322: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22323: LD_VAR 0 6
22327: PPUSH
22328: LD_VAR 0 7
22332: PPUSH
22333: LD_VAR 0 8
22337: PPUSH
22338: LD_VAR 0 9
22342: PPUSH
22343: LD_VAR 0 4
22347: PPUSH
22348: LD_VAR 0 5
22352: PPUSH
22353: CALL 22395 0 6
22357: GO 22390
22359: LD_INT 304
22361: DOUBLE
22362: EQUAL
22363: IFTRUE 22367
22365: GO 22389
22367: POP
// hHackTeleport ( unit , x , y ) ; end ;
22368: LD_VAR 0 2
22372: PPUSH
22373: LD_VAR 0 4
22377: PPUSH
22378: LD_VAR 0 5
22382: PPUSH
22383: CALL 24166 0 3
22387: GO 22390
22389: POP
// end ;
22390: LD_VAR 0 12
22394: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22395: LD_INT 0
22397: PPUSH
22398: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22399: LD_VAR 0 1
22403: PUSH
22404: LD_INT 1
22406: LESS
22407: IFTRUE 22419
22409: PUSH
22410: LD_VAR 0 1
22414: PUSH
22415: LD_INT 3
22417: GREATER
22418: OR
22419: IFTRUE 22437
22421: PUSH
22422: LD_VAR 0 5
22426: PPUSH
22427: LD_VAR 0 6
22431: PPUSH
22432: CALL_OW 428
22436: OR
22437: IFFALSE 22441
// exit ;
22439: GO 23169
// uc_side := your_side ;
22441: LD_ADDR_OWVAR 20
22445: PUSH
22446: LD_OWVAR 2
22450: ST_TO_ADDR
// uc_nation := nation ;
22451: LD_ADDR_OWVAR 21
22455: PUSH
22456: LD_VAR 0 1
22460: ST_TO_ADDR
// bc_level = 1 ;
22461: LD_ADDR_OWVAR 43
22465: PUSH
22466: LD_INT 1
22468: ST_TO_ADDR
// case btype of 1 :
22469: LD_VAR 0 2
22473: PUSH
22474: LD_INT 1
22476: DOUBLE
22477: EQUAL
22478: IFTRUE 22482
22480: GO 22493
22482: POP
// bc_type := b_depot ; 2 :
22483: LD_ADDR_OWVAR 42
22487: PUSH
22488: LD_INT 0
22490: ST_TO_ADDR
22491: GO 23113
22493: LD_INT 2
22495: DOUBLE
22496: EQUAL
22497: IFTRUE 22501
22499: GO 22512
22501: POP
// bc_type := b_warehouse ; 3 :
22502: LD_ADDR_OWVAR 42
22506: PUSH
22507: LD_INT 1
22509: ST_TO_ADDR
22510: GO 23113
22512: LD_INT 3
22514: DOUBLE
22515: EQUAL
22516: IFTRUE 22520
22518: GO 22531
22520: POP
// bc_type := b_lab ; 4 .. 9 :
22521: LD_ADDR_OWVAR 42
22525: PUSH
22526: LD_INT 6
22528: ST_TO_ADDR
22529: GO 23113
22531: LD_INT 4
22533: DOUBLE
22534: GREATEREQUAL
22535: IFFALSE 22543
22537: LD_INT 9
22539: DOUBLE
22540: LESSEQUAL
22541: IFTRUE 22545
22543: GO 22605
22545: POP
// begin bc_type := b_lab_half ;
22546: LD_ADDR_OWVAR 42
22550: PUSH
22551: LD_INT 7
22553: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22554: LD_ADDR_OWVAR 44
22558: PUSH
22559: LD_INT 10
22561: PUSH
22562: LD_INT 11
22564: PUSH
22565: LD_INT 12
22567: PUSH
22568: LD_INT 15
22570: PUSH
22571: LD_INT 14
22573: PUSH
22574: LD_INT 13
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: PUSH
22585: LD_VAR 0 2
22589: PUSH
22590: LD_INT 3
22592: MINUS
22593: ARRAY
22594: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22595: LD_ADDR_OWVAR 45
22599: PUSH
22600: LD_INT 9
22602: ST_TO_ADDR
// end ; 10 .. 13 :
22603: GO 23113
22605: LD_INT 10
22607: DOUBLE
22608: GREATEREQUAL
22609: IFFALSE 22617
22611: LD_INT 13
22613: DOUBLE
22614: LESSEQUAL
22615: IFTRUE 22619
22617: GO 22696
22619: POP
// begin bc_type := b_lab_full ;
22620: LD_ADDR_OWVAR 42
22624: PUSH
22625: LD_INT 8
22627: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22628: LD_ADDR_OWVAR 44
22632: PUSH
22633: LD_INT 10
22635: PUSH
22636: LD_INT 12
22638: PUSH
22639: LD_INT 14
22641: PUSH
22642: LD_INT 13
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: PUSH
22651: LD_VAR 0 2
22655: PUSH
22656: LD_INT 9
22658: MINUS
22659: ARRAY
22660: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22661: LD_ADDR_OWVAR 45
22665: PUSH
22666: LD_INT 11
22668: PUSH
22669: LD_INT 15
22671: PUSH
22672: LD_INT 12
22674: PUSH
22675: LD_INT 15
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: PUSH
22684: LD_VAR 0 2
22688: PUSH
22689: LD_INT 9
22691: MINUS
22692: ARRAY
22693: ST_TO_ADDR
// end ; 14 :
22694: GO 23113
22696: LD_INT 14
22698: DOUBLE
22699: EQUAL
22700: IFTRUE 22704
22702: GO 22715
22704: POP
// bc_type := b_workshop ; 15 :
22705: LD_ADDR_OWVAR 42
22709: PUSH
22710: LD_INT 2
22712: ST_TO_ADDR
22713: GO 23113
22715: LD_INT 15
22717: DOUBLE
22718: EQUAL
22719: IFTRUE 22723
22721: GO 22734
22723: POP
// bc_type := b_factory ; 16 :
22724: LD_ADDR_OWVAR 42
22728: PUSH
22729: LD_INT 3
22731: ST_TO_ADDR
22732: GO 23113
22734: LD_INT 16
22736: DOUBLE
22737: EQUAL
22738: IFTRUE 22742
22740: GO 22753
22742: POP
// bc_type := b_ext_gun ; 17 :
22743: LD_ADDR_OWVAR 42
22747: PUSH
22748: LD_INT 17
22750: ST_TO_ADDR
22751: GO 23113
22753: LD_INT 17
22755: DOUBLE
22756: EQUAL
22757: IFTRUE 22761
22759: GO 22789
22761: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
22762: LD_ADDR_OWVAR 42
22766: PUSH
22767: LD_INT 19
22769: PUSH
22770: LD_INT 23
22772: PUSH
22773: LD_INT 19
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: LIST
22780: PUSH
22781: LD_VAR 0 1
22785: ARRAY
22786: ST_TO_ADDR
22787: GO 23113
22789: LD_INT 18
22791: DOUBLE
22792: EQUAL
22793: IFTRUE 22797
22795: GO 22808
22797: POP
// bc_type := b_ext_radar ; 19 :
22798: LD_ADDR_OWVAR 42
22802: PUSH
22803: LD_INT 20
22805: ST_TO_ADDR
22806: GO 23113
22808: LD_INT 19
22810: DOUBLE
22811: EQUAL
22812: IFTRUE 22816
22814: GO 22827
22816: POP
// bc_type := b_ext_radio ; 20 :
22817: LD_ADDR_OWVAR 42
22821: PUSH
22822: LD_INT 22
22824: ST_TO_ADDR
22825: GO 23113
22827: LD_INT 20
22829: DOUBLE
22830: EQUAL
22831: IFTRUE 22835
22833: GO 22846
22835: POP
// bc_type := b_ext_siberium ; 21 :
22836: LD_ADDR_OWVAR 42
22840: PUSH
22841: LD_INT 21
22843: ST_TO_ADDR
22844: GO 23113
22846: LD_INT 21
22848: DOUBLE
22849: EQUAL
22850: IFTRUE 22854
22852: GO 22865
22854: POP
// bc_type := b_ext_computer ; 22 :
22855: LD_ADDR_OWVAR 42
22859: PUSH
22860: LD_INT 24
22862: ST_TO_ADDR
22863: GO 23113
22865: LD_INT 22
22867: DOUBLE
22868: EQUAL
22869: IFTRUE 22873
22871: GO 22884
22873: POP
// bc_type := b_ext_track ; 23 :
22874: LD_ADDR_OWVAR 42
22878: PUSH
22879: LD_INT 16
22881: ST_TO_ADDR
22882: GO 23113
22884: LD_INT 23
22886: DOUBLE
22887: EQUAL
22888: IFTRUE 22892
22890: GO 22903
22892: POP
// bc_type := b_ext_laser ; 24 :
22893: LD_ADDR_OWVAR 42
22897: PUSH
22898: LD_INT 25
22900: ST_TO_ADDR
22901: GO 23113
22903: LD_INT 24
22905: DOUBLE
22906: EQUAL
22907: IFTRUE 22911
22909: GO 22922
22911: POP
// bc_type := b_control_tower ; 25 :
22912: LD_ADDR_OWVAR 42
22916: PUSH
22917: LD_INT 36
22919: ST_TO_ADDR
22920: GO 23113
22922: LD_INT 25
22924: DOUBLE
22925: EQUAL
22926: IFTRUE 22930
22928: GO 22941
22930: POP
// bc_type := b_breastwork ; 26 :
22931: LD_ADDR_OWVAR 42
22935: PUSH
22936: LD_INT 31
22938: ST_TO_ADDR
22939: GO 23113
22941: LD_INT 26
22943: DOUBLE
22944: EQUAL
22945: IFTRUE 22949
22947: GO 22960
22949: POP
// bc_type := b_bunker ; 27 :
22950: LD_ADDR_OWVAR 42
22954: PUSH
22955: LD_INT 32
22957: ST_TO_ADDR
22958: GO 23113
22960: LD_INT 27
22962: DOUBLE
22963: EQUAL
22964: IFTRUE 22968
22966: GO 22979
22968: POP
// bc_type := b_turret ; 28 :
22969: LD_ADDR_OWVAR 42
22973: PUSH
22974: LD_INT 33
22976: ST_TO_ADDR
22977: GO 23113
22979: LD_INT 28
22981: DOUBLE
22982: EQUAL
22983: IFTRUE 22987
22985: GO 22998
22987: POP
// bc_type := b_armoury ; 29 :
22988: LD_ADDR_OWVAR 42
22992: PUSH
22993: LD_INT 4
22995: ST_TO_ADDR
22996: GO 23113
22998: LD_INT 29
23000: DOUBLE
23001: EQUAL
23002: IFTRUE 23006
23004: GO 23017
23006: POP
// bc_type := b_barracks ; 30 :
23007: LD_ADDR_OWVAR 42
23011: PUSH
23012: LD_INT 5
23014: ST_TO_ADDR
23015: GO 23113
23017: LD_INT 30
23019: DOUBLE
23020: EQUAL
23021: IFTRUE 23025
23023: GO 23036
23025: POP
// bc_type := b_solar_power ; 31 :
23026: LD_ADDR_OWVAR 42
23030: PUSH
23031: LD_INT 27
23033: ST_TO_ADDR
23034: GO 23113
23036: LD_INT 31
23038: DOUBLE
23039: EQUAL
23040: IFTRUE 23044
23042: GO 23055
23044: POP
// bc_type := b_oil_power ; 32 :
23045: LD_ADDR_OWVAR 42
23049: PUSH
23050: LD_INT 26
23052: ST_TO_ADDR
23053: GO 23113
23055: LD_INT 32
23057: DOUBLE
23058: EQUAL
23059: IFTRUE 23063
23061: GO 23074
23063: POP
// bc_type := b_siberite_power ; 33 :
23064: LD_ADDR_OWVAR 42
23068: PUSH
23069: LD_INT 28
23071: ST_TO_ADDR
23072: GO 23113
23074: LD_INT 33
23076: DOUBLE
23077: EQUAL
23078: IFTRUE 23082
23080: GO 23093
23082: POP
// bc_type := b_oil_mine ; 34 :
23083: LD_ADDR_OWVAR 42
23087: PUSH
23088: LD_INT 29
23090: ST_TO_ADDR
23091: GO 23113
23093: LD_INT 34
23095: DOUBLE
23096: EQUAL
23097: IFTRUE 23101
23099: GO 23112
23101: POP
// bc_type := b_siberite_mine ; end ;
23102: LD_ADDR_OWVAR 42
23106: PUSH
23107: LD_INT 30
23109: ST_TO_ADDR
23110: GO 23113
23112: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23113: LD_ADDR_VAR 0 8
23117: PUSH
23118: LD_VAR 0 5
23122: PPUSH
23123: LD_VAR 0 6
23127: PPUSH
23128: LD_VAR 0 3
23132: PPUSH
23133: CALL_OW 47
23137: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23138: LD_OWVAR 42
23142: PUSH
23143: LD_INT 32
23145: PUSH
23146: LD_INT 33
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: IN
23153: IFFALSE 23169
// PlaceWeaponTurret ( b , weapon ) ;
23155: LD_VAR 0 8
23159: PPUSH
23160: LD_VAR 0 4
23164: PPUSH
23165: CALL_OW 431
// end ;
23169: LD_VAR 0 7
23173: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23174: LD_INT 0
23176: PPUSH
23177: PPUSH
23178: PPUSH
23179: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23180: LD_ADDR_VAR 0 4
23184: PUSH
23185: LD_INT 22
23187: PUSH
23188: LD_OWVAR 2
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 2
23199: PUSH
23200: LD_INT 30
23202: PUSH
23203: LD_INT 0
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 30
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PPUSH
23229: CALL_OW 69
23233: ST_TO_ADDR
// if not tmp then
23234: LD_VAR 0 4
23238: NOT
23239: IFFALSE 23243
// exit ;
23241: GO 23302
// for i in tmp do
23243: LD_ADDR_VAR 0 2
23247: PUSH
23248: LD_VAR 0 4
23252: PUSH
23253: FOR_IN
23254: IFFALSE 23300
// for j = 1 to 3 do
23256: LD_ADDR_VAR 0 3
23260: PUSH
23261: DOUBLE
23262: LD_INT 1
23264: DEC
23265: ST_TO_ADDR
23266: LD_INT 3
23268: PUSH
23269: FOR_TO
23270: IFFALSE 23296
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23272: LD_VAR 0 2
23276: PPUSH
23277: CALL_OW 274
23281: PPUSH
23282: LD_VAR 0 3
23286: PPUSH
23287: LD_INT 99999
23289: PPUSH
23290: CALL_OW 277
23294: GO 23269
23296: POP
23297: POP
23298: GO 23253
23300: POP
23301: POP
// end ;
23302: LD_VAR 0 1
23306: RET
// export function hHackSetLevel10 ; var i , j ; begin
23307: LD_INT 0
23309: PPUSH
23310: PPUSH
23311: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23312: LD_ADDR_VAR 0 2
23316: PUSH
23317: LD_INT 21
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PPUSH
23327: CALL_OW 69
23331: PUSH
23332: FOR_IN
23333: IFFALSE 23385
// if IsSelected ( i ) then
23335: LD_VAR 0 2
23339: PPUSH
23340: CALL_OW 306
23344: IFFALSE 23383
// begin for j := 1 to 4 do
23346: LD_ADDR_VAR 0 3
23350: PUSH
23351: DOUBLE
23352: LD_INT 1
23354: DEC
23355: ST_TO_ADDR
23356: LD_INT 4
23358: PUSH
23359: FOR_TO
23360: IFFALSE 23381
// SetSkill ( i , j , 10 ) ;
23362: LD_VAR 0 2
23366: PPUSH
23367: LD_VAR 0 3
23371: PPUSH
23372: LD_INT 10
23374: PPUSH
23375: CALL_OW 237
23379: GO 23359
23381: POP
23382: POP
// end ;
23383: GO 23332
23385: POP
23386: POP
// end ;
23387: LD_VAR 0 1
23391: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23392: LD_INT 0
23394: PPUSH
23395: PPUSH
23396: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23397: LD_ADDR_VAR 0 2
23401: PUSH
23402: LD_INT 22
23404: PUSH
23405: LD_OWVAR 2
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 21
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PPUSH
23428: CALL_OW 69
23432: PUSH
23433: FOR_IN
23434: IFFALSE 23475
// begin for j := 1 to 4 do
23436: LD_ADDR_VAR 0 3
23440: PUSH
23441: DOUBLE
23442: LD_INT 1
23444: DEC
23445: ST_TO_ADDR
23446: LD_INT 4
23448: PUSH
23449: FOR_TO
23450: IFFALSE 23471
// SetSkill ( i , j , 10 ) ;
23452: LD_VAR 0 2
23456: PPUSH
23457: LD_VAR 0 3
23461: PPUSH
23462: LD_INT 10
23464: PPUSH
23465: CALL_OW 237
23469: GO 23449
23471: POP
23472: POP
// end ;
23473: GO 23433
23475: POP
23476: POP
// end ;
23477: LD_VAR 0 1
23481: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23482: LD_INT 0
23484: PPUSH
// uc_side := your_side ;
23485: LD_ADDR_OWVAR 20
23489: PUSH
23490: LD_OWVAR 2
23494: ST_TO_ADDR
// uc_nation := nation ;
23495: LD_ADDR_OWVAR 21
23499: PUSH
23500: LD_VAR 0 1
23504: ST_TO_ADDR
// InitHc ;
23505: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23509: LD_INT 0
23511: PPUSH
23512: LD_VAR 0 2
23516: PPUSH
23517: LD_VAR 0 3
23521: PPUSH
23522: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23526: LD_VAR 0 4
23530: PPUSH
23531: LD_VAR 0 5
23535: PPUSH
23536: CALL_OW 428
23540: PUSH
23541: LD_INT 0
23543: EQUAL
23544: IFFALSE 23568
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23546: CALL_OW 44
23550: PPUSH
23551: LD_VAR 0 4
23555: PPUSH
23556: LD_VAR 0 5
23560: PPUSH
23561: LD_INT 1
23563: PPUSH
23564: CALL_OW 48
// end ;
23568: LD_VAR 0 6
23572: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23573: LD_INT 0
23575: PPUSH
23576: PPUSH
// uc_side := your_side ;
23577: LD_ADDR_OWVAR 20
23581: PUSH
23582: LD_OWVAR 2
23586: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23587: LD_VAR 0 1
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: LD_INT 2
23597: PUSH
23598: LD_INT 3
23600: PUSH
23601: LD_INT 4
23603: PUSH
23604: LD_INT 5
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: IN
23614: IFFALSE 23626
// uc_nation := nation_american else
23616: LD_ADDR_OWVAR 21
23620: PUSH
23621: LD_INT 1
23623: ST_TO_ADDR
23624: GO 23669
// if chassis in [ 11 , 12 , 13 , 14 ] then
23626: LD_VAR 0 1
23630: PUSH
23631: LD_INT 11
23633: PUSH
23634: LD_INT 12
23636: PUSH
23637: LD_INT 13
23639: PUSH
23640: LD_INT 14
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: IN
23649: IFFALSE 23661
// uc_nation := nation_arabian else
23651: LD_ADDR_OWVAR 21
23655: PUSH
23656: LD_INT 2
23658: ST_TO_ADDR
23659: GO 23669
// uc_nation := nation_russian ;
23661: LD_ADDR_OWVAR 21
23665: PUSH
23666: LD_INT 3
23668: ST_TO_ADDR
// vc_chassis := chassis ;
23669: LD_ADDR_OWVAR 37
23673: PUSH
23674: LD_VAR 0 1
23678: ST_TO_ADDR
// vc_engine := engine ;
23679: LD_ADDR_OWVAR 39
23683: PUSH
23684: LD_VAR 0 2
23688: ST_TO_ADDR
// vc_control := control ;
23689: LD_ADDR_OWVAR 38
23693: PUSH
23694: LD_VAR 0 3
23698: ST_TO_ADDR
// vc_weapon := weapon ;
23699: LD_ADDR_OWVAR 40
23703: PUSH
23704: LD_VAR 0 4
23708: ST_TO_ADDR
// un := CreateVehicle ;
23709: LD_ADDR_VAR 0 8
23713: PUSH
23714: CALL_OW 45
23718: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23719: LD_VAR 0 8
23723: PPUSH
23724: LD_INT 0
23726: PPUSH
23727: LD_INT 5
23729: PPUSH
23730: CALL_OW 12
23734: PPUSH
23735: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
23739: LD_VAR 0 8
23743: PPUSH
23744: LD_VAR 0 5
23748: PPUSH
23749: LD_VAR 0 6
23753: PPUSH
23754: LD_INT 1
23756: PPUSH
23757: CALL_OW 48
// end ;
23761: LD_VAR 0 7
23765: RET
// export hInvincible ; every 1 do
23766: GO 23768
23768: DISABLE
// hInvincible := [ ] ;
23769: LD_ADDR_EXP 80
23773: PUSH
23774: EMPTY
23775: ST_TO_ADDR
23776: END
// every 10 do var i ;
23777: GO 23779
23779: DISABLE
23780: LD_INT 0
23782: PPUSH
// begin enable ;
23783: ENABLE
// if not hInvincible then
23784: LD_EXP 80
23788: NOT
23789: IFFALSE 23793
// exit ;
23791: GO 23837
// for i in hInvincible do
23793: LD_ADDR_VAR 0 1
23797: PUSH
23798: LD_EXP 80
23802: PUSH
23803: FOR_IN
23804: IFFALSE 23835
// if GetLives ( i ) < 1000 then
23806: LD_VAR 0 1
23810: PPUSH
23811: CALL_OW 256
23815: PUSH
23816: LD_INT 1000
23818: LESS
23819: IFFALSE 23833
// SetLives ( i , 1000 ) ;
23821: LD_VAR 0 1
23825: PPUSH
23826: LD_INT 1000
23828: PPUSH
23829: CALL_OW 234
23833: GO 23803
23835: POP
23836: POP
// end ;
23837: PPOPN 1
23839: END
// export function hHackInvincible ; var i ; begin
23840: LD_INT 0
23842: PPUSH
23843: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23844: LD_ADDR_VAR 0 2
23848: PUSH
23849: LD_INT 2
23851: PUSH
23852: LD_INT 21
23854: PUSH
23855: LD_INT 1
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 21
23864: PUSH
23865: LD_INT 2
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: LIST
23876: PPUSH
23877: CALL_OW 69
23881: PUSH
23882: FOR_IN
23883: IFFALSE 23944
// if IsSelected ( i ) then
23885: LD_VAR 0 2
23889: PPUSH
23890: CALL_OW 306
23894: IFFALSE 23942
// begin if i in hInvincible then
23896: LD_VAR 0 2
23900: PUSH
23901: LD_EXP 80
23905: IN
23906: IFFALSE 23926
// hInvincible := hInvincible diff i else
23908: LD_ADDR_EXP 80
23912: PUSH
23913: LD_EXP 80
23917: PUSH
23918: LD_VAR 0 2
23922: DIFF
23923: ST_TO_ADDR
23924: GO 23942
// hInvincible := hInvincible union i ;
23926: LD_ADDR_EXP 80
23930: PUSH
23931: LD_EXP 80
23935: PUSH
23936: LD_VAR 0 2
23940: UNION
23941: ST_TO_ADDR
// end ;
23942: GO 23882
23944: POP
23945: POP
// end ;
23946: LD_VAR 0 1
23950: RET
// export function hHackInvisible ; var i , j ; begin
23951: LD_INT 0
23953: PPUSH
23954: PPUSH
23955: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23956: LD_ADDR_VAR 0 2
23960: PUSH
23961: LD_INT 21
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PPUSH
23971: CALL_OW 69
23975: PUSH
23976: FOR_IN
23977: IFFALSE 24001
// if IsSelected ( i ) then
23979: LD_VAR 0 2
23983: PPUSH
23984: CALL_OW 306
23988: IFFALSE 23999
// ComForceInvisible ( i ) ;
23990: LD_VAR 0 2
23994: PPUSH
23995: CALL_OW 496
23999: GO 23976
24001: POP
24002: POP
// end ;
24003: LD_VAR 0 1
24007: RET
// export function hHackChangeYourSide ; begin
24008: LD_INT 0
24010: PPUSH
// if your_side = 8 then
24011: LD_OWVAR 2
24015: PUSH
24016: LD_INT 8
24018: EQUAL
24019: IFFALSE 24031
// your_side := 0 else
24021: LD_ADDR_OWVAR 2
24025: PUSH
24026: LD_INT 0
24028: ST_TO_ADDR
24029: GO 24045
// your_side := your_side + 1 ;
24031: LD_ADDR_OWVAR 2
24035: PUSH
24036: LD_OWVAR 2
24040: PUSH
24041: LD_INT 1
24043: PLUS
24044: ST_TO_ADDR
// end ;
24045: LD_VAR 0 1
24049: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24050: LD_INT 0
24052: PPUSH
24053: PPUSH
24054: PPUSH
// for i in all_units do
24055: LD_ADDR_VAR 0 2
24059: PUSH
24060: LD_OWVAR 3
24064: PUSH
24065: FOR_IN
24066: IFFALSE 24144
// if IsSelected ( i ) then
24068: LD_VAR 0 2
24072: PPUSH
24073: CALL_OW 306
24077: IFFALSE 24142
// begin j := GetSide ( i ) ;
24079: LD_ADDR_VAR 0 3
24083: PUSH
24084: LD_VAR 0 2
24088: PPUSH
24089: CALL_OW 255
24093: ST_TO_ADDR
// if j = 8 then
24094: LD_VAR 0 3
24098: PUSH
24099: LD_INT 8
24101: EQUAL
24102: IFFALSE 24114
// j := 0 else
24104: LD_ADDR_VAR 0 3
24108: PUSH
24109: LD_INT 0
24111: ST_TO_ADDR
24112: GO 24128
// j := j + 1 ;
24114: LD_ADDR_VAR 0 3
24118: PUSH
24119: LD_VAR 0 3
24123: PUSH
24124: LD_INT 1
24126: PLUS
24127: ST_TO_ADDR
// SetSide ( i , j ) ;
24128: LD_VAR 0 2
24132: PPUSH
24133: LD_VAR 0 3
24137: PPUSH
24138: CALL_OW 235
// end ;
24142: GO 24065
24144: POP
24145: POP
// end ;
24146: LD_VAR 0 1
24150: RET
// export function hHackFog ; begin
24151: LD_INT 0
24153: PPUSH
// FogOff ( true ) ;
24154: LD_INT 1
24156: PPUSH
24157: CALL_OW 344
// end ;
24161: LD_VAR 0 1
24165: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24166: LD_INT 0
24168: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24169: LD_VAR 0 1
24173: PPUSH
24174: LD_VAR 0 2
24178: PPUSH
24179: LD_VAR 0 3
24183: PPUSH
24184: LD_INT 1
24186: PPUSH
24187: LD_INT 1
24189: PPUSH
24190: CALL_OW 483
// CenterOnXY ( x , y ) ;
24194: LD_VAR 0 2
24198: PPUSH
24199: LD_VAR 0 3
24203: PPUSH
24204: CALL_OW 84
// end ;
24208: LD_VAR 0 4
24212: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24213: LD_INT 0
24215: PPUSH
24216: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24217: LD_VAR 0 1
24221: NOT
24222: IFTRUE 24241
24224: PUSH
24225: LD_VAR 0 2
24229: PPUSH
24230: LD_VAR 0 3
24234: PPUSH
24235: CALL_OW 488
24239: NOT
24240: OR
24241: IFTRUE 24276
24243: PUSH
24244: LD_VAR 0 1
24248: PPUSH
24249: CALL_OW 266
24253: PUSH
24254: LD_INT 3
24256: NONEQUAL
24257: IFFALSE 24275
24259: PUSH
24260: LD_VAR 0 1
24264: PPUSH
24265: CALL_OW 247
24269: PUSH
24270: LD_INT 1
24272: EQUAL
24273: NOT
24274: AND
24275: OR
24276: IFFALSE 24280
// exit ;
24278: GO 24562
// if GetType ( factory ) = unit_human then
24280: LD_VAR 0 1
24284: PPUSH
24285: CALL_OW 247
24289: PUSH
24290: LD_INT 1
24292: EQUAL
24293: IFFALSE 24310
// factory := IsInUnit ( factory ) ;
24295: LD_ADDR_VAR 0 1
24299: PUSH
24300: LD_VAR 0 1
24304: PPUSH
24305: CALL_OW 310
24309: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24310: LD_VAR 0 1
24314: PPUSH
24315: CALL_OW 266
24319: PUSH
24320: LD_INT 3
24322: NONEQUAL
24323: IFFALSE 24327
// exit ;
24325: GO 24562
// for i := 1 to Count ( factoryWaypoints ) do
24327: LD_ADDR_VAR 0 5
24331: PUSH
24332: DOUBLE
24333: LD_INT 1
24335: DEC
24336: ST_TO_ADDR
24337: LD_EXP 81
24341: PPUSH
24342: CALL 27892 0 1
24346: PUSH
24347: FOR_TO
24348: IFFALSE 24510
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
24350: LD_VAR 0 2
24354: PPUSH
24355: LD_VAR 0 3
24359: PPUSH
24360: CALL_OW 428
24364: PUSH
24365: LD_EXP 81
24369: PUSH
24370: LD_VAR 0 5
24374: ARRAY
24375: PUSH
24376: LD_INT 2
24378: ARRAY
24379: EQUAL
24380: IFFALSE 24412
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
24382: LD_ADDR_EXP 81
24386: PUSH
24387: LD_EXP 81
24391: PPUSH
24392: LD_VAR 0 5
24396: PPUSH
24397: CALL_OW 3
24401: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24402: CALL 24567 0 0
// exit ;
24406: POP
24407: POP
24408: GO 24562
// end else
24410: GO 24508
// if factory = factoryWaypoints [ i ] [ 2 ] then
24412: LD_VAR 0 1
24416: PUSH
24417: LD_EXP 81
24421: PUSH
24422: LD_VAR 0 5
24426: ARRAY
24427: PUSH
24428: LD_INT 2
24430: ARRAY
24431: EQUAL
24432: IFFALSE 24508
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
24434: LD_ADDR_EXP 81
24438: PUSH
24439: LD_EXP 81
24443: PPUSH
24444: LD_VAR 0 5
24448: PPUSH
24449: CALL_OW 3
24453: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
24454: LD_ADDR_EXP 81
24458: PUSH
24459: LD_EXP 81
24463: PPUSH
24464: LD_VAR 0 1
24468: PPUSH
24469: CALL_OW 255
24473: PUSH
24474: LD_VAR 0 1
24478: PUSH
24479: LD_VAR 0 2
24483: PUSH
24484: LD_VAR 0 3
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: PPUSH
24495: CALL 63824 0 2
24499: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24500: CALL 24567 0 0
// exit ;
24504: POP
24505: POP
24506: GO 24562
// end ; end ;
24508: GO 24347
24510: POP
24511: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
24512: LD_ADDR_EXP 81
24516: PUSH
24517: LD_EXP 81
24521: PPUSH
24522: LD_VAR 0 1
24526: PPUSH
24527: CALL_OW 255
24531: PUSH
24532: LD_VAR 0 1
24536: PUSH
24537: LD_VAR 0 2
24541: PUSH
24542: LD_VAR 0 3
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: PPUSH
24553: CALL 63824 0 2
24557: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24558: CALL 24567 0 0
// end ;
24562: LD_VAR 0 4
24566: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24567: LD_INT 0
24569: PPUSH
24570: PPUSH
24571: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24572: LD_STRING resetFactoryWaypoint();
24574: PPUSH
24575: CALL_OW 559
// if factoryWaypoints then
24579: LD_EXP 81
24583: IFFALSE 24704
// begin list := factoryWaypoints ;
24585: LD_ADDR_VAR 0 3
24589: PUSH
24590: LD_EXP 81
24594: ST_TO_ADDR
// for i := 1 to list do
24595: LD_ADDR_VAR 0 2
24599: PUSH
24600: DOUBLE
24601: LD_INT 1
24603: DEC
24604: ST_TO_ADDR
24605: LD_VAR 0 3
24609: PUSH
24610: FOR_TO
24611: IFFALSE 24702
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24613: LD_STRING setFactoryWaypointXY(
24615: PUSH
24616: LD_VAR 0 3
24620: PUSH
24621: LD_VAR 0 2
24625: ARRAY
24626: PUSH
24627: LD_INT 1
24629: ARRAY
24630: STR
24631: PUSH
24632: LD_STRING ,
24634: STR
24635: PUSH
24636: LD_VAR 0 3
24640: PUSH
24641: LD_VAR 0 2
24645: ARRAY
24646: PUSH
24647: LD_INT 2
24649: ARRAY
24650: STR
24651: PUSH
24652: LD_STRING ,
24654: STR
24655: PUSH
24656: LD_VAR 0 3
24660: PUSH
24661: LD_VAR 0 2
24665: ARRAY
24666: PUSH
24667: LD_INT 3
24669: ARRAY
24670: STR
24671: PUSH
24672: LD_STRING ,
24674: STR
24675: PUSH
24676: LD_VAR 0 3
24680: PUSH
24681: LD_VAR 0 2
24685: ARRAY
24686: PUSH
24687: LD_INT 4
24689: ARRAY
24690: STR
24691: PUSH
24692: LD_STRING )
24694: STR
24695: PPUSH
24696: CALL_OW 559
24700: GO 24610
24702: POP
24703: POP
// end ; end ;
24704: LD_VAR 0 1
24708: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24709: LD_INT 0
24711: PPUSH
// if HexInfo ( x , y ) = warehouse then
24712: LD_VAR 0 2
24716: PPUSH
24717: LD_VAR 0 3
24721: PPUSH
24722: CALL_OW 428
24726: PUSH
24727: LD_VAR 0 1
24731: EQUAL
24732: IFFALSE 24759
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
24734: LD_ADDR_EXP 83
24738: PUSH
24739: LD_EXP 83
24743: PPUSH
24744: LD_VAR 0 1
24748: PPUSH
24749: LD_INT 0
24751: PPUSH
24752: CALL_OW 1
24756: ST_TO_ADDR
24757: GO 24810
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
24759: LD_ADDR_EXP 83
24763: PUSH
24764: LD_EXP 83
24768: PPUSH
24769: LD_VAR 0 1
24773: PPUSH
24774: LD_VAR 0 1
24778: PPUSH
24779: CALL_OW 255
24783: PUSH
24784: LD_VAR 0 1
24788: PUSH
24789: LD_VAR 0 2
24793: PUSH
24794: LD_VAR 0 3
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: PPUSH
24805: CALL_OW 1
24809: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
24810: CALL 24819 0 0
// end ;
24814: LD_VAR 0 4
24818: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
24819: LD_INT 0
24821: PPUSH
24822: PPUSH
24823: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
24824: LD_STRING resetWarehouseGatheringPoints();
24826: PPUSH
24827: CALL_OW 559
// if warehouseGatheringPoints then
24831: LD_EXP 83
24835: IFFALSE 24961
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
24837: LD_ADDR_VAR 0 3
24841: PUSH
24842: LD_EXP 83
24846: PPUSH
24847: CALL 67758 0 1
24851: ST_TO_ADDR
// for i := 1 to list do
24852: LD_ADDR_VAR 0 2
24856: PUSH
24857: DOUBLE
24858: LD_INT 1
24860: DEC
24861: ST_TO_ADDR
24862: LD_VAR 0 3
24866: PUSH
24867: FOR_TO
24868: IFFALSE 24959
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24870: LD_STRING setWarehouseGatheringPointXY(
24872: PUSH
24873: LD_VAR 0 3
24877: PUSH
24878: LD_VAR 0 2
24882: ARRAY
24883: PUSH
24884: LD_INT 1
24886: ARRAY
24887: STR
24888: PUSH
24889: LD_STRING ,
24891: STR
24892: PUSH
24893: LD_VAR 0 3
24897: PUSH
24898: LD_VAR 0 2
24902: ARRAY
24903: PUSH
24904: LD_INT 2
24906: ARRAY
24907: STR
24908: PUSH
24909: LD_STRING ,
24911: STR
24912: PUSH
24913: LD_VAR 0 3
24917: PUSH
24918: LD_VAR 0 2
24922: ARRAY
24923: PUSH
24924: LD_INT 3
24926: ARRAY
24927: STR
24928: PUSH
24929: LD_STRING ,
24931: STR
24932: PUSH
24933: LD_VAR 0 3
24937: PUSH
24938: LD_VAR 0 2
24942: ARRAY
24943: PUSH
24944: LD_INT 4
24946: ARRAY
24947: STR
24948: PUSH
24949: LD_STRING )
24951: STR
24952: PPUSH
24953: CALL_OW 559
24957: GO 24867
24959: POP
24960: POP
// end ; end ;
24961: LD_VAR 0 1
24965: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24966: LD_EXP 83
24970: IFFALSE 25665
24972: GO 24974
24974: DISABLE
24975: LD_INT 0
24977: PPUSH
24978: PPUSH
24979: PPUSH
24980: PPUSH
24981: PPUSH
24982: PPUSH
24983: PPUSH
24984: PPUSH
24985: PPUSH
// begin enable ;
24986: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24987: LD_ADDR_VAR 0 3
24991: PUSH
24992: LD_EXP 83
24996: PPUSH
24997: CALL 67758 0 1
25001: ST_TO_ADDR
// if not list then
25002: LD_VAR 0 3
25006: NOT
25007: IFFALSE 25011
// exit ;
25009: GO 25665
// for i := 1 to list do
25011: LD_ADDR_VAR 0 1
25015: PUSH
25016: DOUBLE
25017: LD_INT 1
25019: DEC
25020: ST_TO_ADDR
25021: LD_VAR 0 3
25025: PUSH
25026: FOR_TO
25027: IFFALSE 25663
// begin depot := list [ i ] [ 2 ] ;
25029: LD_ADDR_VAR 0 8
25033: PUSH
25034: LD_VAR 0 3
25038: PUSH
25039: LD_VAR 0 1
25043: ARRAY
25044: PUSH
25045: LD_INT 2
25047: ARRAY
25048: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25049: LD_ADDR_VAR 0 5
25053: PUSH
25054: LD_VAR 0 3
25058: PUSH
25059: LD_VAR 0 1
25063: ARRAY
25064: PUSH
25065: LD_INT 1
25067: ARRAY
25068: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25069: LD_VAR 0 8
25073: PPUSH
25074: CALL_OW 301
25078: IFTRUE 25097
25080: PUSH
25081: LD_VAR 0 5
25085: PUSH
25086: LD_VAR 0 8
25090: PPUSH
25091: CALL_OW 255
25095: NONEQUAL
25096: OR
25097: IFFALSE 25126
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25099: LD_ADDR_EXP 83
25103: PUSH
25104: LD_EXP 83
25108: PPUSH
25109: LD_VAR 0 8
25113: PPUSH
25114: LD_INT 0
25116: PPUSH
25117: CALL_OW 1
25121: ST_TO_ADDR
// exit ;
25122: POP
25123: POP
25124: GO 25665
// end ; x := list [ i ] [ 3 ] ;
25126: LD_ADDR_VAR 0 6
25130: PUSH
25131: LD_VAR 0 3
25135: PUSH
25136: LD_VAR 0 1
25140: ARRAY
25141: PUSH
25142: LD_INT 3
25144: ARRAY
25145: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25146: LD_ADDR_VAR 0 7
25150: PUSH
25151: LD_VAR 0 3
25155: PUSH
25156: LD_VAR 0 1
25160: ARRAY
25161: PUSH
25162: LD_INT 4
25164: ARRAY
25165: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25166: LD_ADDR_VAR 0 9
25170: PUSH
25171: LD_VAR 0 6
25175: PPUSH
25176: LD_VAR 0 7
25180: PPUSH
25181: LD_INT 16
25183: PPUSH
25184: CALL 66332 0 3
25188: ST_TO_ADDR
// if not cratesNearbyPoint then
25189: LD_VAR 0 9
25193: NOT
25194: IFFALSE 25200
// exit ;
25196: POP
25197: POP
25198: GO 25665
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25200: LD_ADDR_VAR 0 4
25204: PUSH
25205: LD_INT 22
25207: PUSH
25208: LD_VAR 0 5
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 3
25219: PUSH
25220: LD_INT 60
25222: PUSH
25223: EMPTY
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 91
25232: PUSH
25233: LD_VAR 0 8
25237: PUSH
25238: LD_INT 6
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 2
25248: PUSH
25249: LD_INT 25
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 25
25261: PUSH
25262: LD_INT 16
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: LIST
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: PPUSH
25280: CALL_OW 69
25284: PUSH
25285: LD_VAR 0 8
25289: PPUSH
25290: CALL_OW 313
25294: PPUSH
25295: LD_INT 3
25297: PUSH
25298: LD_INT 60
25300: PUSH
25301: EMPTY
25302: LIST
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 2
25310: PUSH
25311: LD_INT 25
25313: PUSH
25314: LD_INT 2
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 25
25323: PUSH
25324: LD_INT 16
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: LIST
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PPUSH
25340: CALL_OW 72
25344: UNION
25345: ST_TO_ADDR
// if tmp then
25346: LD_VAR 0 4
25350: IFFALSE 25430
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25352: LD_ADDR_VAR 0 4
25356: PUSH
25357: LD_VAR 0 4
25361: PPUSH
25362: LD_INT 3
25364: PPUSH
25365: CALL 64139 0 2
25369: ST_TO_ADDR
// for j in tmp do
25370: LD_ADDR_VAR 0 2
25374: PUSH
25375: LD_VAR 0 4
25379: PUSH
25380: FOR_IN
25381: IFFALSE 25424
// begin if IsInUnit ( j ) then
25383: LD_VAR 0 2
25387: PPUSH
25388: CALL_OW 310
25392: IFFALSE 25403
// ComExit ( j ) ;
25394: LD_VAR 0 2
25398: PPUSH
25399: CALL 64222 0 1
// AddComCollect ( j , x , y ) ;
25403: LD_VAR 0 2
25407: PPUSH
25408: LD_VAR 0 6
25412: PPUSH
25413: LD_VAR 0 7
25417: PPUSH
25418: CALL_OW 177
// end ;
25422: GO 25380
25424: POP
25425: POP
// exit ;
25426: POP
25427: POP
25428: GO 25665
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25430: LD_ADDR_VAR 0 4
25434: PUSH
25435: LD_INT 22
25437: PUSH
25438: LD_VAR 0 5
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 91
25449: PUSH
25450: LD_VAR 0 8
25454: PUSH
25455: LD_INT 8
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 2
25465: PUSH
25466: LD_INT 34
25468: PUSH
25469: LD_INT 12
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 34
25478: PUSH
25479: LD_INT 51
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 34
25488: PUSH
25489: LD_INT 32
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 34
25498: PUSH
25499: LD_INT 89
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: LIST
25517: PPUSH
25518: CALL_OW 69
25522: ST_TO_ADDR
// if tmp then
25523: LD_VAR 0 4
25527: IFFALSE 25661
// begin for j in tmp do
25529: LD_ADDR_VAR 0 2
25533: PUSH
25534: LD_VAR 0 4
25538: PUSH
25539: FOR_IN
25540: IFFALSE 25659
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25542: LD_VAR 0 2
25546: PPUSH
25547: CALL_OW 262
25551: PUSH
25552: LD_INT 3
25554: EQUAL
25555: IFTRUE 25572
25557: PUSH
25558: LD_VAR 0 2
25562: PPUSH
25563: CALL_OW 261
25567: PUSH
25568: LD_INT 20
25570: GREATER
25571: OR
25572: IFFALSE 25586
25574: PUSH
25575: LD_VAR 0 2
25579: PPUSH
25580: CALL_OW 314
25584: NOT
25585: AND
25586: IFFALSE 25616
25588: PUSH
25589: LD_VAR 0 2
25593: PPUSH
25594: CALL_OW 263
25598: PUSH
25599: LD_INT 1
25601: NONEQUAL
25602: IFTRUE 25615
25604: PUSH
25605: LD_VAR 0 2
25609: PPUSH
25610: CALL_OW 311
25614: OR
25615: AND
25616: IFFALSE 25657
// begin ComCollect ( j , x , y ) ;
25618: LD_VAR 0 2
25622: PPUSH
25623: LD_VAR 0 6
25627: PPUSH
25628: LD_VAR 0 7
25632: PPUSH
25633: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25637: LD_VAR 0 2
25641: PPUSH
25642: LD_VAR 0 8
25646: PPUSH
25647: CALL_OW 172
// exit ;
25651: POP
25652: POP
25653: POP
25654: POP
25655: GO 25665
// end ;
25657: GO 25539
25659: POP
25660: POP
// end ; end ;
25661: GO 25026
25663: POP
25664: POP
// end ; end_of_file end_of_file
25665: PPOPN 9
25667: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25668: LD_INT 0
25670: PPUSH
25671: PPUSH
// if exist_mode then
25672: LD_VAR 0 2
25676: IFFALSE 25722
// begin unit := CreateCharacter ( prefix & ident ) ;
25678: LD_ADDR_VAR 0 5
25682: PUSH
25683: LD_VAR 0 3
25687: PUSH
25688: LD_VAR 0 1
25692: STR
25693: PPUSH
25694: CALL_OW 34
25698: ST_TO_ADDR
// if unit then
25699: LD_VAR 0 5
25703: IFFALSE 25720
// DeleteCharacters ( prefix & ident ) ;
25705: LD_VAR 0 3
25709: PUSH
25710: LD_VAR 0 1
25714: STR
25715: PPUSH
25716: CALL_OW 40
// end else
25720: GO 25737
// unit := NewCharacter ( ident ) ;
25722: LD_ADDR_VAR 0 5
25726: PUSH
25727: LD_VAR 0 1
25731: PPUSH
25732: CALL_OW 25
25736: ST_TO_ADDR
// result := unit ;
25737: LD_ADDR_VAR 0 4
25741: PUSH
25742: LD_VAR 0 5
25746: ST_TO_ADDR
// end ;
25747: LD_VAR 0 4
25751: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
25752: LD_INT 0
25754: PPUSH
25755: PPUSH
// if exist_mode then
25756: LD_VAR 0 2
25760: IFFALSE 25785
// unit := CreateCharacter ( prefix & ident ) else
25762: LD_ADDR_VAR 0 5
25766: PUSH
25767: LD_VAR 0 3
25771: PUSH
25772: LD_VAR 0 1
25776: STR
25777: PPUSH
25778: CALL_OW 34
25782: ST_TO_ADDR
25783: GO 25800
// unit := NewCharacter ( ident ) ;
25785: LD_ADDR_VAR 0 5
25789: PUSH
25790: LD_VAR 0 1
25794: PPUSH
25795: CALL_OW 25
25799: ST_TO_ADDR
// result := unit ;
25800: LD_ADDR_VAR 0 4
25804: PUSH
25805: LD_VAR 0 5
25809: ST_TO_ADDR
// end ;
25810: LD_VAR 0 4
25814: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25815: LD_INT 0
25817: PPUSH
25818: PPUSH
// if not side or not nation then
25819: LD_VAR 0 1
25823: NOT
25824: IFTRUE 25833
25826: PUSH
25827: LD_VAR 0 2
25831: NOT
25832: OR
25833: IFFALSE 25837
// exit ;
25835: GO 26631
// case nation of nation_american :
25837: LD_VAR 0 2
25841: PUSH
25842: LD_INT 1
25844: DOUBLE
25845: EQUAL
25846: IFTRUE 25850
25848: GO 26072
25850: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
25851: LD_ADDR_VAR 0 4
25855: PUSH
25856: LD_INT 35
25858: PUSH
25859: LD_INT 45
25861: PUSH
25862: LD_INT 46
25864: PUSH
25865: LD_INT 47
25867: PUSH
25868: LD_INT 82
25870: PUSH
25871: LD_INT 83
25873: PUSH
25874: LD_INT 84
25876: PUSH
25877: LD_INT 85
25879: PUSH
25880: LD_INT 86
25882: PUSH
25883: LD_INT 1
25885: PUSH
25886: LD_INT 2
25888: PUSH
25889: LD_INT 6
25891: PUSH
25892: LD_INT 15
25894: PUSH
25895: LD_INT 16
25897: PUSH
25898: LD_INT 7
25900: PUSH
25901: LD_INT 12
25903: PUSH
25904: LD_INT 13
25906: PUSH
25907: LD_INT 10
25909: PUSH
25910: LD_INT 14
25912: PUSH
25913: LD_INT 20
25915: PUSH
25916: LD_INT 21
25918: PUSH
25919: LD_INT 22
25921: PUSH
25922: LD_INT 25
25924: PUSH
25925: LD_INT 32
25927: PUSH
25928: LD_INT 27
25930: PUSH
25931: LD_INT 36
25933: PUSH
25934: LD_INT 69
25936: PUSH
25937: LD_INT 39
25939: PUSH
25940: LD_INT 34
25942: PUSH
25943: LD_INT 40
25945: PUSH
25946: LD_INT 48
25948: PUSH
25949: LD_INT 49
25951: PUSH
25952: LD_INT 50
25954: PUSH
25955: LD_INT 51
25957: PUSH
25958: LD_INT 52
25960: PUSH
25961: LD_INT 53
25963: PUSH
25964: LD_INT 54
25966: PUSH
25967: LD_INT 55
25969: PUSH
25970: LD_INT 56
25972: PUSH
25973: LD_INT 57
25975: PUSH
25976: LD_INT 58
25978: PUSH
25979: LD_INT 59
25981: PUSH
25982: LD_INT 60
25984: PUSH
25985: LD_INT 61
25987: PUSH
25988: LD_INT 62
25990: PUSH
25991: LD_INT 80
25993: PUSH
25994: LD_INT 82
25996: PUSH
25997: LD_INT 83
25999: PUSH
26000: LD_INT 84
26002: PUSH
26003: LD_INT 85
26005: PUSH
26006: LD_INT 86
26008: PUSH
26009: LD_INT 90
26011: PUSH
26012: LD_INT 93
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: ST_TO_ADDR
26070: GO 26553
26072: LD_INT 2
26074: DOUBLE
26075: EQUAL
26076: IFTRUE 26080
26078: GO 26314
26080: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
26081: LD_ADDR_VAR 0 4
26085: PUSH
26086: LD_INT 35
26088: PUSH
26089: LD_INT 45
26091: PUSH
26092: LD_INT 46
26094: PUSH
26095: LD_INT 47
26097: PUSH
26098: LD_INT 82
26100: PUSH
26101: LD_INT 83
26103: PUSH
26104: LD_INT 84
26106: PUSH
26107: LD_INT 85
26109: PUSH
26110: LD_INT 87
26112: PUSH
26113: LD_INT 70
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: LD_INT 11
26121: PUSH
26122: LD_INT 3
26124: PUSH
26125: LD_INT 4
26127: PUSH
26128: LD_INT 5
26130: PUSH
26131: LD_INT 6
26133: PUSH
26134: LD_INT 15
26136: PUSH
26137: LD_INT 18
26139: PUSH
26140: LD_INT 7
26142: PUSH
26143: LD_INT 17
26145: PUSH
26146: LD_INT 8
26148: PUSH
26149: LD_INT 20
26151: PUSH
26152: LD_INT 21
26154: PUSH
26155: LD_INT 22
26157: PUSH
26158: LD_INT 72
26160: PUSH
26161: LD_INT 26
26163: PUSH
26164: LD_INT 69
26166: PUSH
26167: LD_INT 39
26169: PUSH
26170: LD_INT 40
26172: PUSH
26173: LD_INT 41
26175: PUSH
26176: LD_INT 42
26178: PUSH
26179: LD_INT 43
26181: PUSH
26182: LD_INT 48
26184: PUSH
26185: LD_INT 49
26187: PUSH
26188: LD_INT 50
26190: PUSH
26191: LD_INT 51
26193: PUSH
26194: LD_INT 52
26196: PUSH
26197: LD_INT 53
26199: PUSH
26200: LD_INT 54
26202: PUSH
26203: LD_INT 55
26205: PUSH
26206: LD_INT 56
26208: PUSH
26209: LD_INT 60
26211: PUSH
26212: LD_INT 61
26214: PUSH
26215: LD_INT 62
26217: PUSH
26218: LD_INT 66
26220: PUSH
26221: LD_INT 67
26223: PUSH
26224: LD_INT 68
26226: PUSH
26227: LD_INT 81
26229: PUSH
26230: LD_INT 82
26232: PUSH
26233: LD_INT 83
26235: PUSH
26236: LD_INT 84
26238: PUSH
26239: LD_INT 85
26241: PUSH
26242: LD_INT 87
26244: PUSH
26245: LD_INT 88
26247: PUSH
26248: LD_INT 92
26250: PUSH
26251: LD_INT 94
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: ST_TO_ADDR
26312: GO 26553
26314: LD_INT 3
26316: DOUBLE
26317: EQUAL
26318: IFTRUE 26322
26320: GO 26552
26322: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
26323: LD_ADDR_VAR 0 4
26327: PUSH
26328: LD_INT 46
26330: PUSH
26331: LD_INT 47
26333: PUSH
26334: LD_INT 1
26336: PUSH
26337: LD_INT 2
26339: PUSH
26340: LD_INT 82
26342: PUSH
26343: LD_INT 83
26345: PUSH
26346: LD_INT 84
26348: PUSH
26349: LD_INT 85
26351: PUSH
26352: LD_INT 86
26354: PUSH
26355: LD_INT 11
26357: PUSH
26358: LD_INT 9
26360: PUSH
26361: LD_INT 20
26363: PUSH
26364: LD_INT 19
26366: PUSH
26367: LD_INT 21
26369: PUSH
26370: LD_INT 24
26372: PUSH
26373: LD_INT 22
26375: PUSH
26376: LD_INT 25
26378: PUSH
26379: LD_INT 28
26381: PUSH
26382: LD_INT 29
26384: PUSH
26385: LD_INT 30
26387: PUSH
26388: LD_INT 31
26390: PUSH
26391: LD_INT 37
26393: PUSH
26394: LD_INT 38
26396: PUSH
26397: LD_INT 32
26399: PUSH
26400: LD_INT 27
26402: PUSH
26403: LD_INT 33
26405: PUSH
26406: LD_INT 69
26408: PUSH
26409: LD_INT 39
26411: PUSH
26412: LD_INT 34
26414: PUSH
26415: LD_INT 40
26417: PUSH
26418: LD_INT 71
26420: PUSH
26421: LD_INT 23
26423: PUSH
26424: LD_INT 44
26426: PUSH
26427: LD_INT 48
26429: PUSH
26430: LD_INT 49
26432: PUSH
26433: LD_INT 50
26435: PUSH
26436: LD_INT 51
26438: PUSH
26439: LD_INT 52
26441: PUSH
26442: LD_INT 53
26444: PUSH
26445: LD_INT 54
26447: PUSH
26448: LD_INT 55
26450: PUSH
26451: LD_INT 56
26453: PUSH
26454: LD_INT 57
26456: PUSH
26457: LD_INT 58
26459: PUSH
26460: LD_INT 59
26462: PUSH
26463: LD_INT 63
26465: PUSH
26466: LD_INT 64
26468: PUSH
26469: LD_INT 65
26471: PUSH
26472: LD_INT 82
26474: PUSH
26475: LD_INT 83
26477: PUSH
26478: LD_INT 84
26480: PUSH
26481: LD_INT 85
26483: PUSH
26484: LD_INT 86
26486: PUSH
26487: LD_INT 89
26489: PUSH
26490: LD_INT 91
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: ST_TO_ADDR
26550: GO 26553
26552: POP
// if state > - 1 and state < 3 then
26553: LD_VAR 0 3
26557: PUSH
26558: LD_INT 1
26560: NEG
26561: GREATER
26562: IFFALSE 26574
26564: PUSH
26565: LD_VAR 0 3
26569: PUSH
26570: LD_INT 3
26572: LESS
26573: AND
26574: IFFALSE 26631
// for i in result do
26576: LD_ADDR_VAR 0 5
26580: PUSH
26581: LD_VAR 0 4
26585: PUSH
26586: FOR_IN
26587: IFFALSE 26629
// if GetTech ( i , side ) <> state then
26589: LD_VAR 0 5
26593: PPUSH
26594: LD_VAR 0 1
26598: PPUSH
26599: CALL_OW 321
26603: PUSH
26604: LD_VAR 0 3
26608: NONEQUAL
26609: IFFALSE 26627
// result := result diff i ;
26611: LD_ADDR_VAR 0 4
26615: PUSH
26616: LD_VAR 0 4
26620: PUSH
26621: LD_VAR 0 5
26625: DIFF
26626: ST_TO_ADDR
26627: GO 26586
26629: POP
26630: POP
// end ;
26631: LD_VAR 0 4
26635: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26636: LD_INT 0
26638: PPUSH
26639: PPUSH
26640: PPUSH
// result := true ;
26641: LD_ADDR_VAR 0 3
26645: PUSH
26646: LD_INT 1
26648: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26649: LD_ADDR_VAR 0 5
26653: PUSH
26654: LD_VAR 0 2
26658: PPUSH
26659: CALL_OW 480
26663: ST_TO_ADDR
// if not tmp then
26664: LD_VAR 0 5
26668: NOT
26669: IFFALSE 26673
// exit ;
26671: GO 26722
// for i in tmp do
26673: LD_ADDR_VAR 0 4
26677: PUSH
26678: LD_VAR 0 5
26682: PUSH
26683: FOR_IN
26684: IFFALSE 26720
// if GetTech ( i , side ) <> state_researched then
26686: LD_VAR 0 4
26690: PPUSH
26691: LD_VAR 0 1
26695: PPUSH
26696: CALL_OW 321
26700: PUSH
26701: LD_INT 2
26703: NONEQUAL
26704: IFFALSE 26718
// begin result := false ;
26706: LD_ADDR_VAR 0 3
26710: PUSH
26711: LD_INT 0
26713: ST_TO_ADDR
// exit ;
26714: POP
26715: POP
26716: GO 26722
// end ;
26718: GO 26683
26720: POP
26721: POP
// end ;
26722: LD_VAR 0 3
26726: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26727: LD_INT 0
26729: PPUSH
26730: PPUSH
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
26735: PPUSH
26736: PPUSH
26737: PPUSH
26738: PPUSH
26739: PPUSH
26740: PPUSH
26741: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26742: LD_VAR 0 1
26746: NOT
26747: IFTRUE 26764
26749: PUSH
26750: LD_VAR 0 1
26754: PPUSH
26755: CALL_OW 257
26759: PUSH
26760: LD_INT 9
26762: NONEQUAL
26763: OR
26764: IFFALSE 26768
// exit ;
26766: GO 27347
// side := GetSide ( unit ) ;
26768: LD_ADDR_VAR 0 9
26772: PUSH
26773: LD_VAR 0 1
26777: PPUSH
26778: CALL_OW 255
26782: ST_TO_ADDR
// tech_space := tech_spacanom ;
26783: LD_ADDR_VAR 0 12
26787: PUSH
26788: LD_INT 29
26790: ST_TO_ADDR
// tech_time := tech_taurad ;
26791: LD_ADDR_VAR 0 13
26795: PUSH
26796: LD_INT 28
26798: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26799: LD_ADDR_VAR 0 11
26803: PUSH
26804: LD_VAR 0 1
26808: PPUSH
26809: CALL_OW 310
26813: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26814: LD_VAR 0 11
26818: PPUSH
26819: CALL_OW 247
26823: PUSH
26824: LD_INT 2
26826: EQUAL
26827: IFFALSE 26831
// exit ;
26829: GO 27347
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26831: LD_ADDR_VAR 0 8
26835: PUSH
26836: LD_INT 81
26838: PUSH
26839: LD_VAR 0 9
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 3
26850: PUSH
26851: LD_INT 21
26853: PUSH
26854: LD_INT 3
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PPUSH
26869: CALL_OW 69
26873: ST_TO_ADDR
// if not tmp then
26874: LD_VAR 0 8
26878: NOT
26879: IFFALSE 26883
// exit ;
26881: GO 27347
// if in_unit then
26883: LD_VAR 0 11
26887: IFFALSE 26911
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26889: LD_ADDR_VAR 0 10
26893: PUSH
26894: LD_VAR 0 8
26898: PPUSH
26899: LD_VAR 0 11
26903: PPUSH
26904: CALL_OW 74
26908: ST_TO_ADDR
26909: GO 26931
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26911: LD_ADDR_VAR 0 10
26915: PUSH
26916: LD_VAR 0 8
26920: PPUSH
26921: LD_VAR 0 1
26925: PPUSH
26926: CALL_OW 74
26930: ST_TO_ADDR
// if not enemy then
26931: LD_VAR 0 10
26935: NOT
26936: IFFALSE 26940
// exit ;
26938: GO 27347
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26940: LD_VAR 0 11
26944: IFFALSE 26966
26946: PUSH
26947: LD_VAR 0 11
26951: PPUSH
26952: LD_VAR 0 10
26956: PPUSH
26957: CALL_OW 296
26961: PUSH
26962: LD_INT 13
26964: GREATER
26965: AND
26966: IFTRUE 26988
26968: PUSH
26969: LD_VAR 0 1
26973: PPUSH
26974: LD_VAR 0 10
26978: PPUSH
26979: CALL_OW 296
26983: PUSH
26984: LD_INT 12
26986: GREATER
26987: OR
26988: IFFALSE 26992
// exit ;
26990: GO 27347
// missile := [ 1 ] ;
26992: LD_ADDR_VAR 0 14
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: EMPTY
27001: LIST
27002: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27003: LD_VAR 0 9
27007: PPUSH
27008: LD_VAR 0 12
27012: PPUSH
27013: CALL_OW 325
27017: IFFALSE 27046
// missile := Replace ( missile , missile + 1 , 2 ) ;
27019: LD_ADDR_VAR 0 14
27023: PUSH
27024: LD_VAR 0 14
27028: PPUSH
27029: LD_VAR 0 14
27033: PUSH
27034: LD_INT 1
27036: PLUS
27037: PPUSH
27038: LD_INT 2
27040: PPUSH
27041: CALL_OW 1
27045: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27046: LD_VAR 0 9
27050: PPUSH
27051: LD_VAR 0 13
27055: PPUSH
27056: CALL_OW 325
27060: IFFALSE 27084
27062: PUSH
27063: LD_VAR 0 10
27067: PPUSH
27068: CALL_OW 255
27072: PPUSH
27073: LD_VAR 0 13
27077: PPUSH
27078: CALL_OW 325
27082: NOT
27083: AND
27084: IFFALSE 27113
// missile := Replace ( missile , missile + 1 , 3 ) ;
27086: LD_ADDR_VAR 0 14
27090: PUSH
27091: LD_VAR 0 14
27095: PPUSH
27096: LD_VAR 0 14
27100: PUSH
27101: LD_INT 1
27103: PLUS
27104: PPUSH
27105: LD_INT 3
27107: PPUSH
27108: CALL_OW 1
27112: ST_TO_ADDR
// if missile < 2 then
27113: LD_VAR 0 14
27117: PUSH
27118: LD_INT 2
27120: LESS
27121: IFFALSE 27125
// exit ;
27123: GO 27347
// x := GetX ( enemy ) ;
27125: LD_ADDR_VAR 0 4
27129: PUSH
27130: LD_VAR 0 10
27134: PPUSH
27135: CALL_OW 250
27139: ST_TO_ADDR
// y := GetY ( enemy ) ;
27140: LD_ADDR_VAR 0 5
27144: PUSH
27145: LD_VAR 0 10
27149: PPUSH
27150: CALL_OW 251
27154: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27155: LD_ADDR_VAR 0 6
27159: PUSH
27160: LD_VAR 0 4
27164: PUSH
27165: LD_INT 1
27167: NEG
27168: PPUSH
27169: LD_INT 1
27171: PPUSH
27172: CALL_OW 12
27176: PLUS
27177: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27178: LD_ADDR_VAR 0 7
27182: PUSH
27183: LD_VAR 0 5
27187: PUSH
27188: LD_INT 1
27190: NEG
27191: PPUSH
27192: LD_INT 1
27194: PPUSH
27195: CALL_OW 12
27199: PLUS
27200: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27201: LD_VAR 0 6
27205: PPUSH
27206: LD_VAR 0 7
27210: PPUSH
27211: CALL_OW 488
27215: NOT
27216: IFFALSE 27238
// begin _x := x ;
27218: LD_ADDR_VAR 0 6
27222: PUSH
27223: LD_VAR 0 4
27227: ST_TO_ADDR
// _y := y ;
27228: LD_ADDR_VAR 0 7
27232: PUSH
27233: LD_VAR 0 5
27237: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27238: LD_ADDR_VAR 0 3
27242: PUSH
27243: LD_INT 1
27245: PPUSH
27246: LD_VAR 0 14
27250: PPUSH
27251: CALL_OW 12
27255: ST_TO_ADDR
// case i of 1 :
27256: LD_VAR 0 3
27260: PUSH
27261: LD_INT 1
27263: DOUBLE
27264: EQUAL
27265: IFTRUE 27269
27267: GO 27286
27269: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27270: LD_VAR 0 1
27274: PPUSH
27275: LD_VAR 0 10
27279: PPUSH
27280: CALL_OW 115
27284: GO 27347
27286: LD_INT 2
27288: DOUBLE
27289: EQUAL
27290: IFTRUE 27294
27292: GO 27316
27294: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27295: LD_VAR 0 1
27299: PPUSH
27300: LD_VAR 0 6
27304: PPUSH
27305: LD_VAR 0 7
27309: PPUSH
27310: CALL_OW 153
27314: GO 27347
27316: LD_INT 3
27318: DOUBLE
27319: EQUAL
27320: IFTRUE 27324
27322: GO 27346
27324: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27325: LD_VAR 0 1
27329: PPUSH
27330: LD_VAR 0 6
27334: PPUSH
27335: LD_VAR 0 7
27339: PPUSH
27340: CALL_OW 154
27344: GO 27347
27346: POP
// end ;
27347: LD_VAR 0 2
27351: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27352: LD_INT 0
27354: PPUSH
27355: PPUSH
27356: PPUSH
27357: PPUSH
27358: PPUSH
27359: PPUSH
// if not unit or not building then
27360: LD_VAR 0 1
27364: NOT
27365: IFTRUE 27374
27367: PUSH
27368: LD_VAR 0 2
27372: NOT
27373: OR
27374: IFFALSE 27378
// exit ;
27376: GO 27536
// x := GetX ( building ) ;
27378: LD_ADDR_VAR 0 5
27382: PUSH
27383: LD_VAR 0 2
27387: PPUSH
27388: CALL_OW 250
27392: ST_TO_ADDR
// y := GetY ( building ) ;
27393: LD_ADDR_VAR 0 6
27397: PUSH
27398: LD_VAR 0 2
27402: PPUSH
27403: CALL_OW 251
27407: ST_TO_ADDR
// for i := 0 to 5 do
27408: LD_ADDR_VAR 0 4
27412: PUSH
27413: DOUBLE
27414: LD_INT 0
27416: DEC
27417: ST_TO_ADDR
27418: LD_INT 5
27420: PUSH
27421: FOR_TO
27422: IFFALSE 27534
// begin _x := ShiftX ( x , i , 3 ) ;
27424: LD_ADDR_VAR 0 7
27428: PUSH
27429: LD_VAR 0 5
27433: PPUSH
27434: LD_VAR 0 4
27438: PPUSH
27439: LD_INT 3
27441: PPUSH
27442: CALL_OW 272
27446: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27447: LD_ADDR_VAR 0 8
27451: PUSH
27452: LD_VAR 0 6
27456: PPUSH
27457: LD_VAR 0 4
27461: PPUSH
27462: LD_INT 3
27464: PPUSH
27465: CALL_OW 273
27469: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27470: LD_VAR 0 7
27474: PPUSH
27475: LD_VAR 0 8
27479: PPUSH
27480: CALL_OW 488
27484: NOT
27485: IFFALSE 27489
// continue ;
27487: GO 27421
// if HexInfo ( _x , _y ) = 0 then
27489: LD_VAR 0 7
27493: PPUSH
27494: LD_VAR 0 8
27498: PPUSH
27499: CALL_OW 428
27503: PUSH
27504: LD_INT 0
27506: EQUAL
27507: IFFALSE 27532
// begin ComMoveXY ( unit , _x , _y ) ;
27509: LD_VAR 0 1
27513: PPUSH
27514: LD_VAR 0 7
27518: PPUSH
27519: LD_VAR 0 8
27523: PPUSH
27524: CALL_OW 111
// exit ;
27528: POP
27529: POP
27530: GO 27536
// end ; end ;
27532: GO 27421
27534: POP
27535: POP
// end ;
27536: LD_VAR 0 3
27540: RET
// export function ScanBase ( side , base_area ) ; begin
27541: LD_INT 0
27543: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27544: LD_ADDR_VAR 0 3
27548: PUSH
27549: LD_VAR 0 2
27553: PPUSH
27554: LD_INT 81
27556: PUSH
27557: LD_VAR 0 1
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PPUSH
27566: CALL_OW 70
27570: ST_TO_ADDR
// end ;
27571: LD_VAR 0 3
27575: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27576: LD_INT 0
27578: PPUSH
27579: PPUSH
27580: PPUSH
27581: PPUSH
// result := false ;
27582: LD_ADDR_VAR 0 2
27586: PUSH
27587: LD_INT 0
27589: ST_TO_ADDR
// side := GetSide ( unit ) ;
27590: LD_ADDR_VAR 0 3
27594: PUSH
27595: LD_VAR 0 1
27599: PPUSH
27600: CALL_OW 255
27604: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27605: LD_ADDR_VAR 0 4
27609: PUSH
27610: LD_VAR 0 1
27614: PPUSH
27615: CALL_OW 248
27619: ST_TO_ADDR
// case nat of 1 :
27620: LD_VAR 0 4
27624: PUSH
27625: LD_INT 1
27627: DOUBLE
27628: EQUAL
27629: IFTRUE 27633
27631: GO 27644
27633: POP
// tech := tech_lassight ; 2 :
27634: LD_ADDR_VAR 0 5
27638: PUSH
27639: LD_INT 12
27641: ST_TO_ADDR
27642: GO 27683
27644: LD_INT 2
27646: DOUBLE
27647: EQUAL
27648: IFTRUE 27652
27650: GO 27663
27652: POP
// tech := tech_mortar ; 3 :
27653: LD_ADDR_VAR 0 5
27657: PUSH
27658: LD_INT 41
27660: ST_TO_ADDR
27661: GO 27683
27663: LD_INT 3
27665: DOUBLE
27666: EQUAL
27667: IFTRUE 27671
27669: GO 27682
27671: POP
// tech := tech_bazooka ; end ;
27672: LD_ADDR_VAR 0 5
27676: PUSH
27677: LD_INT 44
27679: ST_TO_ADDR
27680: GO 27683
27682: POP
// if Researched ( side , tech ) then
27683: LD_VAR 0 3
27687: PPUSH
27688: LD_VAR 0 5
27692: PPUSH
27693: CALL_OW 325
27697: IFFALSE 27724
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27699: LD_ADDR_VAR 0 2
27703: PUSH
27704: LD_INT 5
27706: PUSH
27707: LD_INT 8
27709: PUSH
27710: LD_INT 9
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: LIST
27717: PUSH
27718: LD_VAR 0 4
27722: ARRAY
27723: ST_TO_ADDR
// end ;
27724: LD_VAR 0 2
27728: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27729: LD_INT 0
27731: PPUSH
27732: PPUSH
27733: PPUSH
// if not mines then
27734: LD_VAR 0 2
27738: NOT
27739: IFFALSE 27743
// exit ;
27741: GO 27887
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27743: LD_ADDR_VAR 0 5
27747: PUSH
27748: LD_INT 81
27750: PUSH
27751: LD_VAR 0 1
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 3
27762: PUSH
27763: LD_INT 21
27765: PUSH
27766: LD_INT 3
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PPUSH
27781: CALL_OW 69
27785: ST_TO_ADDR
// for i in mines do
27786: LD_ADDR_VAR 0 4
27790: PUSH
27791: LD_VAR 0 2
27795: PUSH
27796: FOR_IN
27797: IFFALSE 27885
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27799: LD_VAR 0 4
27803: PUSH
27804: LD_INT 1
27806: ARRAY
27807: PPUSH
27808: LD_VAR 0 4
27812: PUSH
27813: LD_INT 2
27815: ARRAY
27816: PPUSH
27817: CALL_OW 458
27821: NOT
27822: IFFALSE 27826
// continue ;
27824: GO 27796
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27826: LD_VAR 0 4
27830: PUSH
27831: LD_INT 1
27833: ARRAY
27834: PPUSH
27835: LD_VAR 0 4
27839: PUSH
27840: LD_INT 2
27842: ARRAY
27843: PPUSH
27844: CALL_OW 428
27848: PUSH
27849: LD_VAR 0 5
27853: IN
27854: IFFALSE 27883
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27856: LD_VAR 0 4
27860: PUSH
27861: LD_INT 1
27863: ARRAY
27864: PPUSH
27865: LD_VAR 0 4
27869: PUSH
27870: LD_INT 2
27872: ARRAY
27873: PPUSH
27874: LD_VAR 0 1
27878: PPUSH
27879: CALL_OW 456
// end ;
27883: GO 27796
27885: POP
27886: POP
// end ;
27887: LD_VAR 0 3
27891: RET
// export function Count ( array ) ; begin
27892: LD_INT 0
27894: PPUSH
// result := array + 0 ;
27895: LD_ADDR_VAR 0 2
27899: PUSH
27900: LD_VAR 0 1
27904: PUSH
27905: LD_INT 0
27907: PLUS
27908: ST_TO_ADDR
// end ;
27909: LD_VAR 0 2
27913: RET
// export function IsEmpty ( building ) ; begin
27914: LD_INT 0
27916: PPUSH
// if not building then
27917: LD_VAR 0 1
27921: NOT
27922: IFFALSE 27926
// exit ;
27924: GO 27969
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27926: LD_ADDR_VAR 0 2
27930: PUSH
27931: LD_VAR 0 1
27935: PUSH
27936: LD_INT 22
27938: PUSH
27939: LD_VAR 0 1
27943: PPUSH
27944: CALL_OW 255
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 58
27955: PUSH
27956: EMPTY
27957: LIST
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PPUSH
27963: CALL_OW 69
27967: IN
27968: ST_TO_ADDR
// end ;
27969: LD_VAR 0 2
27973: RET
// export function IsNotFull ( building ) ; var places ; begin
27974: LD_INT 0
27976: PPUSH
27977: PPUSH
// if not building then
27978: LD_VAR 0 1
27982: NOT
27983: IFFALSE 27987
// exit ;
27985: GO 28015
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
27987: LD_ADDR_VAR 0 2
27991: PUSH
27992: LD_VAR 0 1
27996: PPUSH
27997: LD_INT 3
27999: PUSH
28000: LD_INT 62
28002: PUSH
28003: EMPTY
28004: LIST
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PPUSH
28010: CALL_OW 72
28014: ST_TO_ADDR
// end ;
28015: LD_VAR 0 2
28019: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28020: LD_INT 0
28022: PPUSH
28023: PPUSH
28024: PPUSH
28025: PPUSH
// tmp := [ ] ;
28026: LD_ADDR_VAR 0 3
28030: PUSH
28031: EMPTY
28032: ST_TO_ADDR
// list := [ ] ;
28033: LD_ADDR_VAR 0 5
28037: PUSH
28038: EMPTY
28039: ST_TO_ADDR
// for i = 16 to 25 do
28040: LD_ADDR_VAR 0 4
28044: PUSH
28045: DOUBLE
28046: LD_INT 16
28048: DEC
28049: ST_TO_ADDR
28050: LD_INT 25
28052: PUSH
28053: FOR_TO
28054: IFFALSE 28127
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28056: LD_ADDR_VAR 0 3
28060: PUSH
28061: LD_VAR 0 3
28065: PUSH
28066: LD_INT 22
28068: PUSH
28069: LD_VAR 0 1
28073: PPUSH
28074: CALL_OW 255
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 91
28085: PUSH
28086: LD_VAR 0 1
28090: PUSH
28091: LD_INT 6
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 30
28101: PUSH
28102: LD_VAR 0 4
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: LIST
28115: PUSH
28116: EMPTY
28117: LIST
28118: PPUSH
28119: CALL_OW 69
28123: ADD
28124: ST_TO_ADDR
28125: GO 28053
28127: POP
28128: POP
// for i = 1 to tmp do
28129: LD_ADDR_VAR 0 4
28133: PUSH
28134: DOUBLE
28135: LD_INT 1
28137: DEC
28138: ST_TO_ADDR
28139: LD_VAR 0 3
28143: PUSH
28144: FOR_TO
28145: IFFALSE 28233
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28147: LD_ADDR_VAR 0 5
28151: PUSH
28152: LD_VAR 0 5
28156: PUSH
28157: LD_VAR 0 3
28161: PUSH
28162: LD_VAR 0 4
28166: ARRAY
28167: PPUSH
28168: CALL_OW 266
28172: PUSH
28173: LD_VAR 0 3
28177: PUSH
28178: LD_VAR 0 4
28182: ARRAY
28183: PPUSH
28184: CALL_OW 250
28188: PUSH
28189: LD_VAR 0 3
28193: PUSH
28194: LD_VAR 0 4
28198: ARRAY
28199: PPUSH
28200: CALL_OW 251
28204: PUSH
28205: LD_VAR 0 3
28209: PUSH
28210: LD_VAR 0 4
28214: ARRAY
28215: PPUSH
28216: CALL_OW 254
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: PUSH
28227: EMPTY
28228: LIST
28229: ADD
28230: ST_TO_ADDR
28231: GO 28144
28233: POP
28234: POP
// result := list ;
28235: LD_ADDR_VAR 0 2
28239: PUSH
28240: LD_VAR 0 5
28244: ST_TO_ADDR
// end ;
28245: LD_VAR 0 2
28249: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28250: LD_INT 0
28252: PPUSH
28253: PPUSH
28254: PPUSH
28255: PPUSH
28256: PPUSH
28257: PPUSH
28258: PPUSH
// if not factory then
28259: LD_VAR 0 1
28263: NOT
28264: IFFALSE 28268
// exit ;
28266: GO 28871
// if control = control_apeman then
28268: LD_VAR 0 4
28272: PUSH
28273: LD_INT 5
28275: EQUAL
28276: IFFALSE 28385
// begin tmp := UnitsInside ( factory ) ;
28278: LD_ADDR_VAR 0 8
28282: PUSH
28283: LD_VAR 0 1
28287: PPUSH
28288: CALL_OW 313
28292: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28293: LD_VAR 0 8
28297: PPUSH
28298: LD_INT 25
28300: PUSH
28301: LD_INT 12
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PPUSH
28308: CALL_OW 72
28312: NOT
28313: IFFALSE 28323
// control := control_manual ;
28315: LD_ADDR_VAR 0 4
28319: PUSH
28320: LD_INT 1
28322: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28323: LD_ADDR_VAR 0 8
28327: PUSH
28328: LD_VAR 0 1
28332: PPUSH
28333: CALL 28020 0 1
28337: ST_TO_ADDR
// if tmp then
28338: LD_VAR 0 8
28342: IFFALSE 28385
// begin for i in tmp do
28344: LD_ADDR_VAR 0 7
28348: PUSH
28349: LD_VAR 0 8
28353: PUSH
28354: FOR_IN
28355: IFFALSE 28383
// if i [ 1 ] = b_ext_radio then
28357: LD_VAR 0 7
28361: PUSH
28362: LD_INT 1
28364: ARRAY
28365: PUSH
28366: LD_INT 22
28368: EQUAL
28369: IFFALSE 28381
// begin control := control_remote ;
28371: LD_ADDR_VAR 0 4
28375: PUSH
28376: LD_INT 2
28378: ST_TO_ADDR
// break ;
28379: GO 28383
// end ;
28381: GO 28354
28383: POP
28384: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28385: LD_VAR 0 1
28389: PPUSH
28390: LD_VAR 0 2
28394: PPUSH
28395: LD_VAR 0 3
28399: PPUSH
28400: LD_VAR 0 4
28404: PPUSH
28405: LD_VAR 0 5
28409: PPUSH
28410: CALL_OW 448
28414: IFFALSE 28449
// begin result := [ chassis , engine , control , weapon ] ;
28416: LD_ADDR_VAR 0 6
28420: PUSH
28421: LD_VAR 0 2
28425: PUSH
28426: LD_VAR 0 3
28430: PUSH
28431: LD_VAR 0 4
28435: PUSH
28436: LD_VAR 0 5
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: ST_TO_ADDR
// exit ;
28447: GO 28871
// end ; _chassis := AvailableChassisList ( factory ) ;
28449: LD_ADDR_VAR 0 9
28453: PUSH
28454: LD_VAR 0 1
28458: PPUSH
28459: CALL_OW 475
28463: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28464: LD_ADDR_VAR 0 11
28468: PUSH
28469: LD_VAR 0 1
28473: PPUSH
28474: CALL_OW 476
28478: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28479: LD_ADDR_VAR 0 12
28483: PUSH
28484: LD_VAR 0 1
28488: PPUSH
28489: CALL_OW 477
28493: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28494: LD_ADDR_VAR 0 10
28498: PUSH
28499: LD_VAR 0 1
28503: PPUSH
28504: CALL_OW 478
28508: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28509: LD_VAR 0 9
28513: NOT
28514: IFTRUE 28523
28516: PUSH
28517: LD_VAR 0 11
28521: NOT
28522: OR
28523: IFTRUE 28532
28525: PUSH
28526: LD_VAR 0 12
28530: NOT
28531: OR
28532: IFTRUE 28541
28534: PUSH
28535: LD_VAR 0 10
28539: NOT
28540: OR
28541: IFFALSE 28576
// begin result := [ chassis , engine , control , weapon ] ;
28543: LD_ADDR_VAR 0 6
28547: PUSH
28548: LD_VAR 0 2
28552: PUSH
28553: LD_VAR 0 3
28557: PUSH
28558: LD_VAR 0 4
28562: PUSH
28563: LD_VAR 0 5
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: ST_TO_ADDR
// exit ;
28574: GO 28871
// end ; if not chassis in _chassis then
28576: LD_VAR 0 2
28580: PUSH
28581: LD_VAR 0 9
28585: IN
28586: NOT
28587: IFFALSE 28613
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28589: LD_ADDR_VAR 0 2
28593: PUSH
28594: LD_VAR 0 9
28598: PUSH
28599: LD_INT 1
28601: PPUSH
28602: LD_VAR 0 9
28606: PPUSH
28607: CALL_OW 12
28611: ARRAY
28612: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28613: LD_VAR 0 2
28617: PPUSH
28618: LD_VAR 0 3
28622: PPUSH
28623: CALL 28876 0 2
28627: NOT
28628: IFFALSE 28689
// repeat engine := _engine [ 1 ] ;
28630: LD_ADDR_VAR 0 3
28634: PUSH
28635: LD_VAR 0 11
28639: PUSH
28640: LD_INT 1
28642: ARRAY
28643: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28644: LD_ADDR_VAR 0 11
28648: PUSH
28649: LD_VAR 0 11
28653: PPUSH
28654: LD_INT 1
28656: PPUSH
28657: CALL_OW 3
28661: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28662: LD_VAR 0 2
28666: PPUSH
28667: LD_VAR 0 3
28671: PPUSH
28672: CALL 28876 0 2
28676: IFTRUE 28687
28678: PUSH
28679: LD_VAR 0 11
28683: PUSH
28684: EMPTY
28685: EQUAL
28686: OR
28687: IFFALSE 28630
// if not control in _control then
28689: LD_VAR 0 4
28693: PUSH
28694: LD_VAR 0 12
28698: IN
28699: NOT
28700: IFFALSE 28726
// control := _control [ rand ( 1 , _control ) ] ;
28702: LD_ADDR_VAR 0 4
28706: PUSH
28707: LD_VAR 0 12
28711: PUSH
28712: LD_INT 1
28714: PPUSH
28715: LD_VAR 0 12
28719: PPUSH
28720: CALL_OW 12
28724: ARRAY
28725: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28726: LD_VAR 0 2
28730: PPUSH
28731: LD_VAR 0 5
28735: PPUSH
28736: CALL 29098 0 2
28740: NOT
28741: IFFALSE 28802
// repeat weapon := _weapon [ 1 ] ;
28743: LD_ADDR_VAR 0 5
28747: PUSH
28748: LD_VAR 0 10
28752: PUSH
28753: LD_INT 1
28755: ARRAY
28756: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28757: LD_ADDR_VAR 0 10
28761: PUSH
28762: LD_VAR 0 10
28766: PPUSH
28767: LD_INT 1
28769: PPUSH
28770: CALL_OW 3
28774: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28775: LD_VAR 0 2
28779: PPUSH
28780: LD_VAR 0 5
28784: PPUSH
28785: CALL 29098 0 2
28789: IFTRUE 28800
28791: PUSH
28792: LD_VAR 0 10
28796: PUSH
28797: EMPTY
28798: EQUAL
28799: OR
28800: IFFALSE 28743
// result := [ ] ;
28802: LD_ADDR_VAR 0 6
28806: PUSH
28807: EMPTY
28808: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28809: LD_VAR 0 1
28813: PPUSH
28814: LD_VAR 0 2
28818: PPUSH
28819: LD_VAR 0 3
28823: PPUSH
28824: LD_VAR 0 4
28828: PPUSH
28829: LD_VAR 0 5
28833: PPUSH
28834: CALL_OW 448
28838: IFFALSE 28871
// result := [ chassis , engine , control , weapon ] ;
28840: LD_ADDR_VAR 0 6
28844: PUSH
28845: LD_VAR 0 2
28849: PUSH
28850: LD_VAR 0 3
28854: PUSH
28855: LD_VAR 0 4
28859: PUSH
28860: LD_VAR 0 5
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: ST_TO_ADDR
// end ;
28871: LD_VAR 0 6
28875: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28876: LD_INT 0
28878: PPUSH
// if not chassis or not engine then
28879: LD_VAR 0 1
28883: NOT
28884: IFTRUE 28893
28886: PUSH
28887: LD_VAR 0 2
28891: NOT
28892: OR
28893: IFFALSE 28897
// exit ;
28895: GO 29093
// case engine of engine_solar :
28897: LD_VAR 0 2
28901: PUSH
28902: LD_INT 2
28904: DOUBLE
28905: EQUAL
28906: IFTRUE 28910
28908: GO 28948
28910: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28911: LD_ADDR_VAR 0 3
28915: PUSH
28916: LD_INT 11
28918: PUSH
28919: LD_INT 12
28921: PUSH
28922: LD_INT 13
28924: PUSH
28925: LD_INT 14
28927: PUSH
28928: LD_INT 1
28930: PUSH
28931: LD_INT 2
28933: PUSH
28934: LD_INT 3
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: ST_TO_ADDR
28946: GO 29077
28948: LD_INT 1
28950: DOUBLE
28951: EQUAL
28952: IFTRUE 28956
28954: GO 29018
28956: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28957: LD_ADDR_VAR 0 3
28961: PUSH
28962: LD_INT 11
28964: PUSH
28965: LD_INT 12
28967: PUSH
28968: LD_INT 13
28970: PUSH
28971: LD_INT 14
28973: PUSH
28974: LD_INT 1
28976: PUSH
28977: LD_INT 2
28979: PUSH
28980: LD_INT 3
28982: PUSH
28983: LD_INT 4
28985: PUSH
28986: LD_INT 5
28988: PUSH
28989: LD_INT 21
28991: PUSH
28992: LD_INT 23
28994: PUSH
28995: LD_INT 22
28997: PUSH
28998: LD_INT 24
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: ST_TO_ADDR
29016: GO 29077
29018: LD_INT 3
29020: DOUBLE
29021: EQUAL
29022: IFTRUE 29026
29024: GO 29076
29026: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29027: LD_ADDR_VAR 0 3
29031: PUSH
29032: LD_INT 13
29034: PUSH
29035: LD_INT 14
29037: PUSH
29038: LD_INT 2
29040: PUSH
29041: LD_INT 3
29043: PUSH
29044: LD_INT 4
29046: PUSH
29047: LD_INT 5
29049: PUSH
29050: LD_INT 21
29052: PUSH
29053: LD_INT 22
29055: PUSH
29056: LD_INT 23
29058: PUSH
29059: LD_INT 24
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: ST_TO_ADDR
29074: GO 29077
29076: POP
// result := ( chassis in result ) ;
29077: LD_ADDR_VAR 0 3
29081: PUSH
29082: LD_VAR 0 1
29086: PUSH
29087: LD_VAR 0 3
29091: IN
29092: ST_TO_ADDR
// end ;
29093: LD_VAR 0 3
29097: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29098: LD_INT 0
29100: PPUSH
// if not chassis or not weapon then
29101: LD_VAR 0 1
29105: NOT
29106: IFTRUE 29115
29108: PUSH
29109: LD_VAR 0 2
29113: NOT
29114: OR
29115: IFFALSE 29119
// exit ;
29117: GO 30179
// case weapon of us_machine_gun :
29119: LD_VAR 0 2
29123: PUSH
29124: LD_INT 2
29126: DOUBLE
29127: EQUAL
29128: IFTRUE 29132
29130: GO 29162
29132: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29133: LD_ADDR_VAR 0 3
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: LD_INT 2
29143: PUSH
29144: LD_INT 3
29146: PUSH
29147: LD_INT 4
29149: PUSH
29150: LD_INT 5
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: ST_TO_ADDR
29160: GO 30163
29162: LD_INT 3
29164: DOUBLE
29165: EQUAL
29166: IFTRUE 29170
29168: GO 29200
29170: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29171: LD_ADDR_VAR 0 3
29175: PUSH
29176: LD_INT 1
29178: PUSH
29179: LD_INT 2
29181: PUSH
29182: LD_INT 3
29184: PUSH
29185: LD_INT 4
29187: PUSH
29188: LD_INT 5
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: ST_TO_ADDR
29198: GO 30163
29200: LD_INT 11
29202: DOUBLE
29203: EQUAL
29204: IFTRUE 29208
29206: GO 29238
29208: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29209: LD_ADDR_VAR 0 3
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: LD_INT 2
29219: PUSH
29220: LD_INT 3
29222: PUSH
29223: LD_INT 4
29225: PUSH
29226: LD_INT 5
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: ST_TO_ADDR
29236: GO 30163
29238: LD_INT 4
29240: DOUBLE
29241: EQUAL
29242: IFTRUE 29246
29244: GO 29272
29246: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29247: LD_ADDR_VAR 0 3
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: LD_INT 3
29257: PUSH
29258: LD_INT 4
29260: PUSH
29261: LD_INT 5
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: ST_TO_ADDR
29270: GO 30163
29272: LD_INT 5
29274: DOUBLE
29275: EQUAL
29276: IFTRUE 29280
29278: GO 29306
29280: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29281: LD_ADDR_VAR 0 3
29285: PUSH
29286: LD_INT 2
29288: PUSH
29289: LD_INT 3
29291: PUSH
29292: LD_INT 4
29294: PUSH
29295: LD_INT 5
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: ST_TO_ADDR
29304: GO 30163
29306: LD_INT 9
29308: DOUBLE
29309: EQUAL
29310: IFTRUE 29314
29312: GO 29340
29314: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29315: LD_ADDR_VAR 0 3
29319: PUSH
29320: LD_INT 2
29322: PUSH
29323: LD_INT 3
29325: PUSH
29326: LD_INT 4
29328: PUSH
29329: LD_INT 5
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: ST_TO_ADDR
29338: GO 30163
29340: LD_INT 7
29342: DOUBLE
29343: EQUAL
29344: IFTRUE 29348
29346: GO 29374
29348: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29349: LD_ADDR_VAR 0 3
29353: PUSH
29354: LD_INT 2
29356: PUSH
29357: LD_INT 3
29359: PUSH
29360: LD_INT 4
29362: PUSH
29363: LD_INT 5
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: ST_TO_ADDR
29372: GO 30163
29374: LD_INT 12
29376: DOUBLE
29377: EQUAL
29378: IFTRUE 29382
29380: GO 29408
29382: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29383: LD_ADDR_VAR 0 3
29387: PUSH
29388: LD_INT 2
29390: PUSH
29391: LD_INT 3
29393: PUSH
29394: LD_INT 4
29396: PUSH
29397: LD_INT 5
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: ST_TO_ADDR
29406: GO 30163
29408: LD_INT 13
29410: DOUBLE
29411: EQUAL
29412: IFTRUE 29416
29414: GO 29442
29416: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29417: LD_ADDR_VAR 0 3
29421: PUSH
29422: LD_INT 2
29424: PUSH
29425: LD_INT 3
29427: PUSH
29428: LD_INT 4
29430: PUSH
29431: LD_INT 5
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: ST_TO_ADDR
29440: GO 30163
29442: LD_INT 14
29444: DOUBLE
29445: EQUAL
29446: IFTRUE 29450
29448: GO 29468
29450: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29451: LD_ADDR_VAR 0 3
29455: PUSH
29456: LD_INT 4
29458: PUSH
29459: LD_INT 5
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: ST_TO_ADDR
29466: GO 30163
29468: LD_INT 6
29470: DOUBLE
29471: EQUAL
29472: IFTRUE 29476
29474: GO 29494
29476: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29477: LD_ADDR_VAR 0 3
29481: PUSH
29482: LD_INT 4
29484: PUSH
29485: LD_INT 5
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: ST_TO_ADDR
29492: GO 30163
29494: LD_INT 10
29496: DOUBLE
29497: EQUAL
29498: IFTRUE 29502
29500: GO 29520
29502: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29503: LD_ADDR_VAR 0 3
29507: PUSH
29508: LD_INT 4
29510: PUSH
29511: LD_INT 5
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: ST_TO_ADDR
29518: GO 30163
29520: LD_INT 22
29522: DOUBLE
29523: EQUAL
29524: IFTRUE 29528
29526: GO 29554
29528: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29529: LD_ADDR_VAR 0 3
29533: PUSH
29534: LD_INT 11
29536: PUSH
29537: LD_INT 12
29539: PUSH
29540: LD_INT 13
29542: PUSH
29543: LD_INT 14
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: ST_TO_ADDR
29552: GO 30163
29554: LD_INT 23
29556: DOUBLE
29557: EQUAL
29558: IFTRUE 29562
29560: GO 29588
29562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29563: LD_ADDR_VAR 0 3
29567: PUSH
29568: LD_INT 11
29570: PUSH
29571: LD_INT 12
29573: PUSH
29574: LD_INT 13
29576: PUSH
29577: LD_INT 14
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: ST_TO_ADDR
29586: GO 30163
29588: LD_INT 24
29590: DOUBLE
29591: EQUAL
29592: IFTRUE 29596
29594: GO 29622
29596: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29597: LD_ADDR_VAR 0 3
29601: PUSH
29602: LD_INT 11
29604: PUSH
29605: LD_INT 12
29607: PUSH
29608: LD_INT 13
29610: PUSH
29611: LD_INT 14
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: ST_TO_ADDR
29620: GO 30163
29622: LD_INT 30
29624: DOUBLE
29625: EQUAL
29626: IFTRUE 29630
29628: GO 29656
29630: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29631: LD_ADDR_VAR 0 3
29635: PUSH
29636: LD_INT 11
29638: PUSH
29639: LD_INT 12
29641: PUSH
29642: LD_INT 13
29644: PUSH
29645: LD_INT 14
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: ST_TO_ADDR
29654: GO 30163
29656: LD_INT 25
29658: DOUBLE
29659: EQUAL
29660: IFTRUE 29664
29662: GO 29682
29664: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29665: LD_ADDR_VAR 0 3
29669: PUSH
29670: LD_INT 13
29672: PUSH
29673: LD_INT 14
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: ST_TO_ADDR
29680: GO 30163
29682: LD_INT 27
29684: DOUBLE
29685: EQUAL
29686: IFTRUE 29690
29688: GO 29708
29690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29691: LD_ADDR_VAR 0 3
29695: PUSH
29696: LD_INT 13
29698: PUSH
29699: LD_INT 14
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: ST_TO_ADDR
29706: GO 30163
29708: LD_INT 92
29710: DOUBLE
29711: EQUAL
29712: IFTRUE 29716
29714: GO 29742
29716: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29717: LD_ADDR_VAR 0 3
29721: PUSH
29722: LD_INT 11
29724: PUSH
29725: LD_INT 12
29727: PUSH
29728: LD_INT 13
29730: PUSH
29731: LD_INT 14
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: ST_TO_ADDR
29740: GO 30163
29742: LD_INT 28
29744: DOUBLE
29745: EQUAL
29746: IFTRUE 29750
29748: GO 29768
29750: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29751: LD_ADDR_VAR 0 3
29755: PUSH
29756: LD_INT 13
29758: PUSH
29759: LD_INT 14
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: ST_TO_ADDR
29766: GO 30163
29768: LD_INT 29
29770: DOUBLE
29771: EQUAL
29772: IFTRUE 29776
29774: GO 29794
29776: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29777: LD_ADDR_VAR 0 3
29781: PUSH
29782: LD_INT 13
29784: PUSH
29785: LD_INT 14
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: ST_TO_ADDR
29792: GO 30163
29794: LD_INT 31
29796: DOUBLE
29797: EQUAL
29798: IFTRUE 29802
29800: GO 29820
29802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29803: LD_ADDR_VAR 0 3
29807: PUSH
29808: LD_INT 13
29810: PUSH
29811: LD_INT 14
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: ST_TO_ADDR
29818: GO 30163
29820: LD_INT 26
29822: DOUBLE
29823: EQUAL
29824: IFTRUE 29828
29826: GO 29846
29828: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29829: LD_ADDR_VAR 0 3
29833: PUSH
29834: LD_INT 13
29836: PUSH
29837: LD_INT 14
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: ST_TO_ADDR
29844: GO 30163
29846: LD_INT 42
29848: DOUBLE
29849: EQUAL
29850: IFTRUE 29854
29852: GO 29880
29854: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29855: LD_ADDR_VAR 0 3
29859: PUSH
29860: LD_INT 21
29862: PUSH
29863: LD_INT 22
29865: PUSH
29866: LD_INT 23
29868: PUSH
29869: LD_INT 24
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: ST_TO_ADDR
29878: GO 30163
29880: LD_INT 43
29882: DOUBLE
29883: EQUAL
29884: IFTRUE 29888
29886: GO 29914
29888: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29889: LD_ADDR_VAR 0 3
29893: PUSH
29894: LD_INT 21
29896: PUSH
29897: LD_INT 22
29899: PUSH
29900: LD_INT 23
29902: PUSH
29903: LD_INT 24
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: ST_TO_ADDR
29912: GO 30163
29914: LD_INT 44
29916: DOUBLE
29917: EQUAL
29918: IFTRUE 29922
29920: GO 29948
29922: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29923: LD_ADDR_VAR 0 3
29927: PUSH
29928: LD_INT 21
29930: PUSH
29931: LD_INT 22
29933: PUSH
29934: LD_INT 23
29936: PUSH
29937: LD_INT 24
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: ST_TO_ADDR
29946: GO 30163
29948: LD_INT 45
29950: DOUBLE
29951: EQUAL
29952: IFTRUE 29956
29954: GO 29982
29956: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29957: LD_ADDR_VAR 0 3
29961: PUSH
29962: LD_INT 21
29964: PUSH
29965: LD_INT 22
29967: PUSH
29968: LD_INT 23
29970: PUSH
29971: LD_INT 24
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: ST_TO_ADDR
29980: GO 30163
29982: LD_INT 49
29984: DOUBLE
29985: EQUAL
29986: IFTRUE 29990
29988: GO 30016
29990: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29991: LD_ADDR_VAR 0 3
29995: PUSH
29996: LD_INT 21
29998: PUSH
29999: LD_INT 22
30001: PUSH
30002: LD_INT 23
30004: PUSH
30005: LD_INT 24
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: ST_TO_ADDR
30014: GO 30163
30016: LD_INT 51
30018: DOUBLE
30019: EQUAL
30020: IFTRUE 30024
30022: GO 30050
30024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30025: LD_ADDR_VAR 0 3
30029: PUSH
30030: LD_INT 21
30032: PUSH
30033: LD_INT 22
30035: PUSH
30036: LD_INT 23
30038: PUSH
30039: LD_INT 24
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: ST_TO_ADDR
30048: GO 30163
30050: LD_INT 52
30052: DOUBLE
30053: EQUAL
30054: IFTRUE 30058
30056: GO 30084
30058: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30059: LD_ADDR_VAR 0 3
30063: PUSH
30064: LD_INT 21
30066: PUSH
30067: LD_INT 22
30069: PUSH
30070: LD_INT 23
30072: PUSH
30073: LD_INT 24
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: ST_TO_ADDR
30082: GO 30163
30084: LD_INT 53
30086: DOUBLE
30087: EQUAL
30088: IFTRUE 30092
30090: GO 30110
30092: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30093: LD_ADDR_VAR 0 3
30097: PUSH
30098: LD_INT 23
30100: PUSH
30101: LD_INT 24
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: ST_TO_ADDR
30108: GO 30163
30110: LD_INT 46
30112: DOUBLE
30113: EQUAL
30114: IFTRUE 30118
30116: GO 30136
30118: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30119: LD_ADDR_VAR 0 3
30123: PUSH
30124: LD_INT 23
30126: PUSH
30127: LD_INT 24
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: ST_TO_ADDR
30134: GO 30163
30136: LD_INT 47
30138: DOUBLE
30139: EQUAL
30140: IFTRUE 30144
30142: GO 30162
30144: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30145: LD_ADDR_VAR 0 3
30149: PUSH
30150: LD_INT 23
30152: PUSH
30153: LD_INT 24
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: ST_TO_ADDR
30160: GO 30163
30162: POP
// result := ( chassis in result ) ;
30163: LD_ADDR_VAR 0 3
30167: PUSH
30168: LD_VAR 0 1
30172: PUSH
30173: LD_VAR 0 3
30177: IN
30178: ST_TO_ADDR
// end ;
30179: LD_VAR 0 3
30183: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30184: LD_INT 0
30186: PPUSH
30187: PPUSH
30188: PPUSH
30189: PPUSH
30190: PPUSH
30191: PPUSH
30192: PPUSH
// result := array ;
30193: LD_ADDR_VAR 0 5
30197: PUSH
30198: LD_VAR 0 1
30202: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30203: LD_VAR 0 1
30207: NOT
30208: IFTRUE 30217
30210: PUSH
30211: LD_VAR 0 2
30215: NOT
30216: OR
30217: IFTRUE 30226
30219: PUSH
30220: LD_VAR 0 3
30224: NOT
30225: OR
30226: IFTRUE 30240
30228: PUSH
30229: LD_VAR 0 2
30233: PUSH
30234: LD_VAR 0 1
30238: GREATER
30239: OR
30240: IFTRUE 30254
30242: PUSH
30243: LD_VAR 0 3
30247: PUSH
30248: LD_VAR 0 1
30252: GREATER
30253: OR
30254: IFFALSE 30258
// exit ;
30256: GO 30554
// if direction then
30258: LD_VAR 0 4
30262: IFFALSE 30326
// begin d := 1 ;
30264: LD_ADDR_VAR 0 9
30268: PUSH
30269: LD_INT 1
30271: ST_TO_ADDR
// if i_from > i_to then
30272: LD_VAR 0 2
30276: PUSH
30277: LD_VAR 0 3
30281: GREATER
30282: IFFALSE 30308
// length := ( array - i_from ) + i_to else
30284: LD_ADDR_VAR 0 11
30288: PUSH
30289: LD_VAR 0 1
30293: PUSH
30294: LD_VAR 0 2
30298: MINUS
30299: PUSH
30300: LD_VAR 0 3
30304: PLUS
30305: ST_TO_ADDR
30306: GO 30324
// length := i_to - i_from ;
30308: LD_ADDR_VAR 0 11
30312: PUSH
30313: LD_VAR 0 3
30317: PUSH
30318: LD_VAR 0 2
30322: MINUS
30323: ST_TO_ADDR
// end else
30324: GO 30387
// begin d := - 1 ;
30326: LD_ADDR_VAR 0 9
30330: PUSH
30331: LD_INT 1
30333: NEG
30334: ST_TO_ADDR
// if i_from > i_to then
30335: LD_VAR 0 2
30339: PUSH
30340: LD_VAR 0 3
30344: GREATER
30345: IFFALSE 30365
// length := i_from - i_to else
30347: LD_ADDR_VAR 0 11
30351: PUSH
30352: LD_VAR 0 2
30356: PUSH
30357: LD_VAR 0 3
30361: MINUS
30362: ST_TO_ADDR
30363: GO 30387
// length := ( array - i_to ) + i_from ;
30365: LD_ADDR_VAR 0 11
30369: PUSH
30370: LD_VAR 0 1
30374: PUSH
30375: LD_VAR 0 3
30379: MINUS
30380: PUSH
30381: LD_VAR 0 2
30385: PLUS
30386: ST_TO_ADDR
// end ; if not length then
30387: LD_VAR 0 11
30391: NOT
30392: IFFALSE 30396
// exit ;
30394: GO 30554
// tmp := array ;
30396: LD_ADDR_VAR 0 10
30400: PUSH
30401: LD_VAR 0 1
30405: ST_TO_ADDR
// for i = 1 to length do
30406: LD_ADDR_VAR 0 6
30410: PUSH
30411: DOUBLE
30412: LD_INT 1
30414: DEC
30415: ST_TO_ADDR
30416: LD_VAR 0 11
30420: PUSH
30421: FOR_TO
30422: IFFALSE 30542
// begin for j = 1 to array do
30424: LD_ADDR_VAR 0 7
30428: PUSH
30429: DOUBLE
30430: LD_INT 1
30432: DEC
30433: ST_TO_ADDR
30434: LD_VAR 0 1
30438: PUSH
30439: FOR_TO
30440: IFFALSE 30528
// begin k := j + d ;
30442: LD_ADDR_VAR 0 8
30446: PUSH
30447: LD_VAR 0 7
30451: PUSH
30452: LD_VAR 0 9
30456: PLUS
30457: ST_TO_ADDR
// if k > array then
30458: LD_VAR 0 8
30462: PUSH
30463: LD_VAR 0 1
30467: GREATER
30468: IFFALSE 30478
// k := 1 ;
30470: LD_ADDR_VAR 0 8
30474: PUSH
30475: LD_INT 1
30477: ST_TO_ADDR
// if not k then
30478: LD_VAR 0 8
30482: NOT
30483: IFFALSE 30495
// k := array ;
30485: LD_ADDR_VAR 0 8
30489: PUSH
30490: LD_VAR 0 1
30494: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30495: LD_ADDR_VAR 0 10
30499: PUSH
30500: LD_VAR 0 10
30504: PPUSH
30505: LD_VAR 0 8
30509: PPUSH
30510: LD_VAR 0 1
30514: PUSH
30515: LD_VAR 0 7
30519: ARRAY
30520: PPUSH
30521: CALL_OW 1
30525: ST_TO_ADDR
// end ;
30526: GO 30439
30528: POP
30529: POP
// array := tmp ;
30530: LD_ADDR_VAR 0 1
30534: PUSH
30535: LD_VAR 0 10
30539: ST_TO_ADDR
// end ;
30540: GO 30421
30542: POP
30543: POP
// result := array ;
30544: LD_ADDR_VAR 0 5
30548: PUSH
30549: LD_VAR 0 1
30553: ST_TO_ADDR
// end ;
30554: LD_VAR 0 5
30558: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30559: LD_INT 0
30561: PPUSH
30562: PPUSH
// result := 0 ;
30563: LD_ADDR_VAR 0 3
30567: PUSH
30568: LD_INT 0
30570: ST_TO_ADDR
// if not array or not value in array then
30571: LD_VAR 0 1
30575: NOT
30576: IFTRUE 30591
30578: PUSH
30579: LD_VAR 0 2
30583: PUSH
30584: LD_VAR 0 1
30588: IN
30589: NOT
30590: OR
30591: IFFALSE 30595
// exit ;
30593: GO 30649
// for i = 1 to array do
30595: LD_ADDR_VAR 0 4
30599: PUSH
30600: DOUBLE
30601: LD_INT 1
30603: DEC
30604: ST_TO_ADDR
30605: LD_VAR 0 1
30609: PUSH
30610: FOR_TO
30611: IFFALSE 30647
// if value = array [ i ] then
30613: LD_VAR 0 2
30617: PUSH
30618: LD_VAR 0 1
30622: PUSH
30623: LD_VAR 0 4
30627: ARRAY
30628: EQUAL
30629: IFFALSE 30645
// begin result := i ;
30631: LD_ADDR_VAR 0 3
30635: PUSH
30636: LD_VAR 0 4
30640: ST_TO_ADDR
// exit ;
30641: POP
30642: POP
30643: GO 30649
// end ;
30645: GO 30610
30647: POP
30648: POP
// end ;
30649: LD_VAR 0 3
30653: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30654: LD_INT 0
30656: PPUSH
// vc_chassis := chassis ;
30657: LD_ADDR_OWVAR 37
30661: PUSH
30662: LD_VAR 0 1
30666: ST_TO_ADDR
// vc_engine := engine ;
30667: LD_ADDR_OWVAR 39
30671: PUSH
30672: LD_VAR 0 2
30676: ST_TO_ADDR
// vc_control := control ;
30677: LD_ADDR_OWVAR 38
30681: PUSH
30682: LD_VAR 0 3
30686: ST_TO_ADDR
// vc_weapon := weapon ;
30687: LD_ADDR_OWVAR 40
30691: PUSH
30692: LD_VAR 0 4
30696: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30697: LD_ADDR_OWVAR 41
30701: PUSH
30702: LD_VAR 0 5
30706: ST_TO_ADDR
// end ;
30707: LD_VAR 0 6
30711: RET
// export function WantPlant ( unit ) ; var task ; begin
30712: LD_INT 0
30714: PPUSH
30715: PPUSH
// result := false ;
30716: LD_ADDR_VAR 0 2
30720: PUSH
30721: LD_INT 0
30723: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30724: LD_ADDR_VAR 0 3
30728: PUSH
30729: LD_VAR 0 1
30733: PPUSH
30734: CALL_OW 437
30738: ST_TO_ADDR
// if task then
30739: LD_VAR 0 3
30743: IFFALSE 30771
// if task [ 1 ] [ 1 ] = p then
30745: LD_VAR 0 3
30749: PUSH
30750: LD_INT 1
30752: ARRAY
30753: PUSH
30754: LD_INT 1
30756: ARRAY
30757: PUSH
30758: LD_STRING p
30760: EQUAL
30761: IFFALSE 30771
// result := true ;
30763: LD_ADDR_VAR 0 2
30767: PUSH
30768: LD_INT 1
30770: ST_TO_ADDR
// end ;
30771: LD_VAR 0 2
30775: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30776: LD_INT 0
30778: PPUSH
30779: PPUSH
30780: PPUSH
30781: PPUSH
// if pos < 1 then
30782: LD_VAR 0 2
30786: PUSH
30787: LD_INT 1
30789: LESS
30790: IFFALSE 30794
// exit ;
30792: GO 31097
// if pos = 1 then
30794: LD_VAR 0 2
30798: PUSH
30799: LD_INT 1
30801: EQUAL
30802: IFFALSE 30835
// result := Replace ( arr , pos [ 1 ] , value ) else
30804: LD_ADDR_VAR 0 4
30808: PUSH
30809: LD_VAR 0 1
30813: PPUSH
30814: LD_VAR 0 2
30818: PUSH
30819: LD_INT 1
30821: ARRAY
30822: PPUSH
30823: LD_VAR 0 3
30827: PPUSH
30828: CALL_OW 1
30832: ST_TO_ADDR
30833: GO 31097
// begin tmp := arr ;
30835: LD_ADDR_VAR 0 6
30839: PUSH
30840: LD_VAR 0 1
30844: ST_TO_ADDR
// s_arr := [ tmp ] ;
30845: LD_ADDR_VAR 0 7
30849: PUSH
30850: LD_VAR 0 6
30854: PUSH
30855: EMPTY
30856: LIST
30857: ST_TO_ADDR
// for i = 1 to pos - 1 do
30858: LD_ADDR_VAR 0 5
30862: PUSH
30863: DOUBLE
30864: LD_INT 1
30866: DEC
30867: ST_TO_ADDR
30868: LD_VAR 0 2
30872: PUSH
30873: LD_INT 1
30875: MINUS
30876: PUSH
30877: FOR_TO
30878: IFFALSE 30923
// begin tmp := tmp [ pos [ i ] ] ;
30880: LD_ADDR_VAR 0 6
30884: PUSH
30885: LD_VAR 0 6
30889: PUSH
30890: LD_VAR 0 2
30894: PUSH
30895: LD_VAR 0 5
30899: ARRAY
30900: ARRAY
30901: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30902: LD_ADDR_VAR 0 7
30906: PUSH
30907: LD_VAR 0 7
30911: PUSH
30912: LD_VAR 0 6
30916: PUSH
30917: EMPTY
30918: LIST
30919: ADD
30920: ST_TO_ADDR
// end ;
30921: GO 30877
30923: POP
30924: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30925: LD_ADDR_VAR 0 6
30929: PUSH
30930: LD_VAR 0 6
30934: PPUSH
30935: LD_VAR 0 2
30939: PUSH
30940: LD_VAR 0 2
30944: ARRAY
30945: PPUSH
30946: LD_VAR 0 3
30950: PPUSH
30951: CALL_OW 1
30955: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30956: LD_ADDR_VAR 0 7
30960: PUSH
30961: LD_VAR 0 7
30965: PPUSH
30966: LD_VAR 0 7
30970: PPUSH
30971: LD_VAR 0 6
30975: PPUSH
30976: CALL_OW 1
30980: ST_TO_ADDR
// for i = s_arr downto 2 do
30981: LD_ADDR_VAR 0 5
30985: PUSH
30986: DOUBLE
30987: LD_VAR 0 7
30991: INC
30992: ST_TO_ADDR
30993: LD_INT 2
30995: PUSH
30996: FOR_DOWNTO
30997: IFFALSE 31081
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30999: LD_ADDR_VAR 0 6
31003: PUSH
31004: LD_VAR 0 7
31008: PUSH
31009: LD_VAR 0 5
31013: PUSH
31014: LD_INT 1
31016: MINUS
31017: ARRAY
31018: PPUSH
31019: LD_VAR 0 2
31023: PUSH
31024: LD_VAR 0 5
31028: PUSH
31029: LD_INT 1
31031: MINUS
31032: ARRAY
31033: PPUSH
31034: LD_VAR 0 7
31038: PUSH
31039: LD_VAR 0 5
31043: ARRAY
31044: PPUSH
31045: CALL_OW 1
31049: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31050: LD_ADDR_VAR 0 7
31054: PUSH
31055: LD_VAR 0 7
31059: PPUSH
31060: LD_VAR 0 5
31064: PUSH
31065: LD_INT 1
31067: MINUS
31068: PPUSH
31069: LD_VAR 0 6
31073: PPUSH
31074: CALL_OW 1
31078: ST_TO_ADDR
// end ;
31079: GO 30996
31081: POP
31082: POP
// result := s_arr [ 1 ] ;
31083: LD_ADDR_VAR 0 4
31087: PUSH
31088: LD_VAR 0 7
31092: PUSH
31093: LD_INT 1
31095: ARRAY
31096: ST_TO_ADDR
// end ; end ;
31097: LD_VAR 0 4
31101: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31102: LD_INT 0
31104: PPUSH
31105: PPUSH
// if not list then
31106: LD_VAR 0 1
31110: NOT
31111: IFFALSE 31115
// exit ;
31113: GO 31206
// i := list [ pos1 ] ;
31115: LD_ADDR_VAR 0 5
31119: PUSH
31120: LD_VAR 0 1
31124: PUSH
31125: LD_VAR 0 2
31129: ARRAY
31130: ST_TO_ADDR
// if not i then
31131: LD_VAR 0 5
31135: NOT
31136: IFFALSE 31140
// exit ;
31138: GO 31206
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31140: LD_ADDR_VAR 0 1
31144: PUSH
31145: LD_VAR 0 1
31149: PPUSH
31150: LD_VAR 0 2
31154: PPUSH
31155: LD_VAR 0 1
31159: PUSH
31160: LD_VAR 0 3
31164: ARRAY
31165: PPUSH
31166: CALL_OW 1
31170: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31171: LD_ADDR_VAR 0 1
31175: PUSH
31176: LD_VAR 0 1
31180: PPUSH
31181: LD_VAR 0 3
31185: PPUSH
31186: LD_VAR 0 5
31190: PPUSH
31191: CALL_OW 1
31195: ST_TO_ADDR
// result := list ;
31196: LD_ADDR_VAR 0 4
31200: PUSH
31201: LD_VAR 0 1
31205: ST_TO_ADDR
// end ;
31206: LD_VAR 0 4
31210: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31211: LD_INT 0
31213: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31214: LD_ADDR_VAR 0 5
31218: PUSH
31219: LD_VAR 0 1
31223: PPUSH
31224: CALL_OW 250
31228: PPUSH
31229: LD_VAR 0 1
31233: PPUSH
31234: CALL_OW 251
31238: PPUSH
31239: LD_VAR 0 2
31243: PPUSH
31244: LD_VAR 0 3
31248: PPUSH
31249: LD_VAR 0 4
31253: PPUSH
31254: CALL 31636 0 5
31258: ST_TO_ADDR
// end ;
31259: LD_VAR 0 5
31263: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
31264: LD_INT 0
31266: PPUSH
31267: PPUSH
31268: PPUSH
31269: PPUSH
// if not list or not unit then
31270: LD_VAR 0 2
31274: NOT
31275: IFTRUE 31284
31277: PUSH
31278: LD_VAR 0 1
31282: NOT
31283: OR
31284: IFFALSE 31288
// exit ;
31286: GO 31631
// result := [ ] ;
31288: LD_ADDR_VAR 0 5
31292: PUSH
31293: EMPTY
31294: ST_TO_ADDR
// for i in list do
31295: LD_ADDR_VAR 0 6
31299: PUSH
31300: LD_VAR 0 2
31304: PUSH
31305: FOR_IN
31306: IFFALSE 31524
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
31308: LD_ADDR_VAR 0 8
31312: PUSH
31313: LD_VAR 0 1
31317: PPUSH
31318: LD_VAR 0 6
31322: PUSH
31323: LD_INT 1
31325: ARRAY
31326: PPUSH
31327: LD_VAR 0 6
31331: PUSH
31332: LD_INT 2
31334: ARRAY
31335: PPUSH
31336: CALL_OW 297
31340: ST_TO_ADDR
// if not Count ( result ) then
31341: LD_VAR 0 5
31345: PPUSH
31346: CALL 27892 0 1
31350: NOT
31351: IFFALSE 31384
// begin result := Join ( result , [ i , tmp ] ) ;
31353: LD_ADDR_VAR 0 5
31357: PUSH
31358: LD_VAR 0 5
31362: PPUSH
31363: LD_VAR 0 6
31367: PUSH
31368: LD_VAR 0 8
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PPUSH
31377: CALL 63824 0 2
31381: ST_TO_ADDR
// continue ;
31382: GO 31305
// end ; if result [ result ] [ 2 ] <= tmp then
31384: LD_VAR 0 5
31388: PUSH
31389: LD_VAR 0 5
31393: ARRAY
31394: PUSH
31395: LD_INT 2
31397: ARRAY
31398: PUSH
31399: LD_VAR 0 8
31403: LESSEQUAL
31404: IFFALSE 31437
// result := Join ( result , [ i , tmp ] ) else
31406: LD_ADDR_VAR 0 5
31410: PUSH
31411: LD_VAR 0 5
31415: PPUSH
31416: LD_VAR 0 6
31420: PUSH
31421: LD_VAR 0 8
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PPUSH
31430: CALL 63824 0 2
31434: ST_TO_ADDR
31435: GO 31522
// begin for j := 1 to Count ( result ) do
31437: LD_ADDR_VAR 0 7
31441: PUSH
31442: DOUBLE
31443: LD_INT 1
31445: DEC
31446: ST_TO_ADDR
31447: LD_VAR 0 5
31451: PPUSH
31452: CALL 27892 0 1
31456: PUSH
31457: FOR_TO
31458: IFFALSE 31520
// begin if tmp < result [ j ] [ 2 ] then
31460: LD_VAR 0 8
31464: PUSH
31465: LD_VAR 0 5
31469: PUSH
31470: LD_VAR 0 7
31474: ARRAY
31475: PUSH
31476: LD_INT 2
31478: ARRAY
31479: LESS
31480: IFFALSE 31518
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31482: LD_ADDR_VAR 0 5
31486: PUSH
31487: LD_VAR 0 5
31491: PPUSH
31492: LD_VAR 0 7
31496: PPUSH
31497: LD_VAR 0 6
31501: PUSH
31502: LD_VAR 0 8
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PPUSH
31511: CALL_OW 2
31515: ST_TO_ADDR
// break ;
31516: GO 31520
// end ; end ;
31518: GO 31457
31520: POP
31521: POP
// end ; end ;
31522: GO 31305
31524: POP
31525: POP
// if result and not asc then
31526: LD_VAR 0 5
31530: IFFALSE 31539
31532: PUSH
31533: LD_VAR 0 3
31537: NOT
31538: AND
31539: IFFALSE 31556
// result := ReverseArray ( result ) ;
31541: LD_ADDR_VAR 0 5
31545: PUSH
31546: LD_VAR 0 5
31550: PPUSH
31551: CALL 58914 0 1
31555: ST_TO_ADDR
// tmp := [ ] ;
31556: LD_ADDR_VAR 0 8
31560: PUSH
31561: EMPTY
31562: ST_TO_ADDR
// if mode then
31563: LD_VAR 0 4
31567: IFFALSE 31631
// begin for i := 1 to result do
31569: LD_ADDR_VAR 0 6
31573: PUSH
31574: DOUBLE
31575: LD_INT 1
31577: DEC
31578: ST_TO_ADDR
31579: LD_VAR 0 5
31583: PUSH
31584: FOR_TO
31585: IFFALSE 31619
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
31587: LD_ADDR_VAR 0 8
31591: PUSH
31592: LD_VAR 0 8
31596: PPUSH
31597: LD_VAR 0 5
31601: PUSH
31602: LD_VAR 0 6
31606: ARRAY
31607: PUSH
31608: LD_INT 1
31610: ARRAY
31611: PPUSH
31612: CALL 63824 0 2
31616: ST_TO_ADDR
31617: GO 31584
31619: POP
31620: POP
// result := tmp ;
31621: LD_ADDR_VAR 0 5
31625: PUSH
31626: LD_VAR 0 8
31630: ST_TO_ADDR
// end ; end ;
31631: LD_VAR 0 5
31635: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31636: LD_INT 0
31638: PPUSH
31639: PPUSH
31640: PPUSH
31641: PPUSH
// if not list then
31642: LD_VAR 0 3
31646: NOT
31647: IFFALSE 31651
// exit ;
31649: GO 32041
// result := [ ] ;
31651: LD_ADDR_VAR 0 6
31655: PUSH
31656: EMPTY
31657: ST_TO_ADDR
// for i in list do
31658: LD_ADDR_VAR 0 7
31662: PUSH
31663: LD_VAR 0 3
31667: PUSH
31668: FOR_IN
31669: IFFALSE 31871
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31671: LD_ADDR_VAR 0 9
31675: PUSH
31676: LD_VAR 0 7
31680: PPUSH
31681: LD_VAR 0 1
31685: PPUSH
31686: LD_VAR 0 2
31690: PPUSH
31691: CALL_OW 297
31695: ST_TO_ADDR
// if not result then
31696: LD_VAR 0 6
31700: NOT
31701: IFFALSE 31727
// result := [ [ i , tmp ] ] else
31703: LD_ADDR_VAR 0 6
31707: PUSH
31708: LD_VAR 0 7
31712: PUSH
31713: LD_VAR 0 9
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: EMPTY
31723: LIST
31724: ST_TO_ADDR
31725: GO 31869
// begin if result [ result ] [ 2 ] <= tmp then
31727: LD_VAR 0 6
31731: PUSH
31732: LD_VAR 0 6
31736: ARRAY
31737: PUSH
31738: LD_INT 2
31740: ARRAY
31741: PUSH
31742: LD_VAR 0 9
31746: LESSEQUAL
31747: IFFALSE 31789
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31749: LD_ADDR_VAR 0 6
31753: PUSH
31754: LD_VAR 0 6
31758: PPUSH
31759: LD_VAR 0 6
31763: PUSH
31764: LD_INT 1
31766: PLUS
31767: PPUSH
31768: LD_VAR 0 7
31772: PUSH
31773: LD_VAR 0 9
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PPUSH
31782: CALL_OW 2
31786: ST_TO_ADDR
31787: GO 31869
// for j := 1 to result do
31789: LD_ADDR_VAR 0 8
31793: PUSH
31794: DOUBLE
31795: LD_INT 1
31797: DEC
31798: ST_TO_ADDR
31799: LD_VAR 0 6
31803: PUSH
31804: FOR_TO
31805: IFFALSE 31867
// begin if tmp < result [ j ] [ 2 ] then
31807: LD_VAR 0 9
31811: PUSH
31812: LD_VAR 0 6
31816: PUSH
31817: LD_VAR 0 8
31821: ARRAY
31822: PUSH
31823: LD_INT 2
31825: ARRAY
31826: LESS
31827: IFFALSE 31865
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31829: LD_ADDR_VAR 0 6
31833: PUSH
31834: LD_VAR 0 6
31838: PPUSH
31839: LD_VAR 0 8
31843: PPUSH
31844: LD_VAR 0 7
31848: PUSH
31849: LD_VAR 0 9
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PPUSH
31858: CALL_OW 2
31862: ST_TO_ADDR
// break ;
31863: GO 31867
// end ; end ;
31865: GO 31804
31867: POP
31868: POP
// end ; end ;
31869: GO 31668
31871: POP
31872: POP
// if result and not asc then
31873: LD_VAR 0 6
31877: IFFALSE 31886
31879: PUSH
31880: LD_VAR 0 4
31884: NOT
31885: AND
31886: IFFALSE 31961
// begin tmp := result ;
31888: LD_ADDR_VAR 0 9
31892: PUSH
31893: LD_VAR 0 6
31897: ST_TO_ADDR
// for i = tmp downto 1 do
31898: LD_ADDR_VAR 0 7
31902: PUSH
31903: DOUBLE
31904: LD_VAR 0 9
31908: INC
31909: ST_TO_ADDR
31910: LD_INT 1
31912: PUSH
31913: FOR_DOWNTO
31914: IFFALSE 31959
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31916: LD_ADDR_VAR 0 6
31920: PUSH
31921: LD_VAR 0 6
31925: PPUSH
31926: LD_VAR 0 9
31930: PUSH
31931: LD_VAR 0 7
31935: MINUS
31936: PUSH
31937: LD_INT 1
31939: PLUS
31940: PPUSH
31941: LD_VAR 0 9
31945: PUSH
31946: LD_VAR 0 7
31950: ARRAY
31951: PPUSH
31952: CALL_OW 1
31956: ST_TO_ADDR
31957: GO 31913
31959: POP
31960: POP
// end ; tmp := [ ] ;
31961: LD_ADDR_VAR 0 9
31965: PUSH
31966: EMPTY
31967: ST_TO_ADDR
// if mode then
31968: LD_VAR 0 5
31972: IFFALSE 32041
// begin for i = 1 to result do
31974: LD_ADDR_VAR 0 7
31978: PUSH
31979: DOUBLE
31980: LD_INT 1
31982: DEC
31983: ST_TO_ADDR
31984: LD_VAR 0 6
31988: PUSH
31989: FOR_TO
31990: IFFALSE 32029
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31992: LD_ADDR_VAR 0 9
31996: PUSH
31997: LD_VAR 0 9
32001: PPUSH
32002: LD_VAR 0 7
32006: PPUSH
32007: LD_VAR 0 6
32011: PUSH
32012: LD_VAR 0 7
32016: ARRAY
32017: PUSH
32018: LD_INT 1
32020: ARRAY
32021: PPUSH
32022: CALL_OW 1
32026: ST_TO_ADDR
32027: GO 31989
32029: POP
32030: POP
// result := tmp ;
32031: LD_ADDR_VAR 0 6
32035: PUSH
32036: LD_VAR 0 9
32040: ST_TO_ADDR
// end ; end ;
32041: LD_VAR 0 6
32045: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32046: LD_INT 0
32048: PPUSH
32049: PPUSH
32050: PPUSH
32051: PPUSH
32052: PPUSH
32053: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32054: LD_ADDR_VAR 0 5
32058: PUSH
32059: LD_INT 0
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: EMPTY
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: ST_TO_ADDR
// if not x or not y then
32076: LD_VAR 0 2
32080: NOT
32081: IFTRUE 32090
32083: PUSH
32084: LD_VAR 0 3
32088: NOT
32089: OR
32090: IFFALSE 32094
// exit ;
32092: GO 33750
// if not range then
32094: LD_VAR 0 4
32098: NOT
32099: IFFALSE 32109
// range := 10 ;
32101: LD_ADDR_VAR 0 4
32105: PUSH
32106: LD_INT 10
32108: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32109: LD_ADDR_VAR 0 8
32113: PUSH
32114: LD_INT 81
32116: PUSH
32117: LD_VAR 0 1
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 92
32128: PUSH
32129: LD_VAR 0 2
32133: PUSH
32134: LD_VAR 0 3
32138: PUSH
32139: LD_VAR 0 4
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 3
32152: PUSH
32153: LD_INT 21
32155: PUSH
32156: LD_INT 3
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: LIST
32171: PPUSH
32172: CALL_OW 69
32176: ST_TO_ADDR
// if not tmp then
32177: LD_VAR 0 8
32181: NOT
32182: IFFALSE 32186
// exit ;
32184: GO 33750
// for i in tmp do
32186: LD_ADDR_VAR 0 6
32190: PUSH
32191: LD_VAR 0 8
32195: PUSH
32196: FOR_IN
32197: IFFALSE 33725
// begin points := [ 0 , 0 , 0 ] ;
32199: LD_ADDR_VAR 0 9
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: LIST
32217: ST_TO_ADDR
// bpoints := 1 ;
32218: LD_ADDR_VAR 0 10
32222: PUSH
32223: LD_INT 1
32225: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32226: LD_VAR 0 6
32230: PPUSH
32231: CALL_OW 247
32235: PUSH
32236: LD_INT 1
32238: DOUBLE
32239: EQUAL
32240: IFTRUE 32244
32242: GO 32826
32244: POP
// begin if GetClass ( i ) = 1 then
32245: LD_VAR 0 6
32249: PPUSH
32250: CALL_OW 257
32254: PUSH
32255: LD_INT 1
32257: EQUAL
32258: IFFALSE 32279
// points := [ 10 , 5 , 3 ] ;
32260: LD_ADDR_VAR 0 9
32264: PUSH
32265: LD_INT 10
32267: PUSH
32268: LD_INT 5
32270: PUSH
32271: LD_INT 3
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: LIST
32278: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32279: LD_VAR 0 6
32283: PPUSH
32284: CALL_OW 257
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: LD_INT 3
32294: PUSH
32295: LD_INT 4
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: LIST
32302: IN
32303: IFFALSE 32324
// points := [ 3 , 2 , 1 ] ;
32305: LD_ADDR_VAR 0 9
32309: PUSH
32310: LD_INT 3
32312: PUSH
32313: LD_INT 2
32315: PUSH
32316: LD_INT 1
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32324: LD_VAR 0 6
32328: PPUSH
32329: CALL_OW 257
32333: PUSH
32334: LD_INT 5
32336: EQUAL
32337: IFFALSE 32358
// points := [ 130 , 5 , 2 ] ;
32339: LD_ADDR_VAR 0 9
32343: PUSH
32344: LD_INT 130
32346: PUSH
32347: LD_INT 5
32349: PUSH
32350: LD_INT 2
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: LIST
32357: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32358: LD_VAR 0 6
32362: PPUSH
32363: CALL_OW 257
32367: PUSH
32368: LD_INT 8
32370: EQUAL
32371: IFFALSE 32392
// points := [ 35 , 35 , 30 ] ;
32373: LD_ADDR_VAR 0 9
32377: PUSH
32378: LD_INT 35
32380: PUSH
32381: LD_INT 35
32383: PUSH
32384: LD_INT 30
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32392: LD_VAR 0 6
32396: PPUSH
32397: CALL_OW 257
32401: PUSH
32402: LD_INT 9
32404: EQUAL
32405: IFFALSE 32426
// points := [ 20 , 55 , 40 ] ;
32407: LD_ADDR_VAR 0 9
32411: PUSH
32412: LD_INT 20
32414: PUSH
32415: LD_INT 55
32417: PUSH
32418: LD_INT 40
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: LIST
32425: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32426: LD_VAR 0 6
32430: PPUSH
32431: CALL_OW 257
32435: PUSH
32436: LD_INT 12
32438: PUSH
32439: LD_INT 16
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: IN
32446: IFFALSE 32467
// points := [ 5 , 3 , 2 ] ;
32448: LD_ADDR_VAR 0 9
32452: PUSH
32453: LD_INT 5
32455: PUSH
32456: LD_INT 3
32458: PUSH
32459: LD_INT 2
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: LIST
32466: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32467: LD_VAR 0 6
32471: PPUSH
32472: CALL_OW 257
32476: PUSH
32477: LD_INT 17
32479: EQUAL
32480: IFFALSE 32501
// points := [ 100 , 50 , 75 ] ;
32482: LD_ADDR_VAR 0 9
32486: PUSH
32487: LD_INT 100
32489: PUSH
32490: LD_INT 50
32492: PUSH
32493: LD_INT 75
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: LIST
32500: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32501: LD_VAR 0 6
32505: PPUSH
32506: CALL_OW 257
32510: PUSH
32511: LD_INT 15
32513: EQUAL
32514: IFFALSE 32535
// points := [ 10 , 5 , 3 ] ;
32516: LD_ADDR_VAR 0 9
32520: PUSH
32521: LD_INT 10
32523: PUSH
32524: LD_INT 5
32526: PUSH
32527: LD_INT 3
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: LIST
32534: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32535: LD_VAR 0 6
32539: PPUSH
32540: CALL_OW 257
32544: PUSH
32545: LD_INT 14
32547: EQUAL
32548: IFFALSE 32569
// points := [ 10 , 0 , 0 ] ;
32550: LD_ADDR_VAR 0 9
32554: PUSH
32555: LD_INT 10
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: LD_INT 0
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: LIST
32568: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32569: LD_VAR 0 6
32573: PPUSH
32574: CALL_OW 257
32578: PUSH
32579: LD_INT 11
32581: EQUAL
32582: IFFALSE 32603
// points := [ 30 , 10 , 5 ] ;
32584: LD_ADDR_VAR 0 9
32588: PUSH
32589: LD_INT 30
32591: PUSH
32592: LD_INT 10
32594: PUSH
32595: LD_INT 5
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: LIST
32602: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32603: LD_VAR 0 1
32607: PPUSH
32608: LD_INT 5
32610: PPUSH
32611: CALL_OW 321
32615: PUSH
32616: LD_INT 2
32618: EQUAL
32619: IFFALSE 32636
// bpoints := bpoints * 1.8 ;
32621: LD_ADDR_VAR 0 10
32625: PUSH
32626: LD_VAR 0 10
32630: PUSH
32631: LD_REAL  1.80000000000000E+0000
32634: MUL
32635: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32636: LD_VAR 0 6
32640: PPUSH
32641: CALL_OW 257
32645: PUSH
32646: LD_INT 1
32648: PUSH
32649: LD_INT 2
32651: PUSH
32652: LD_INT 3
32654: PUSH
32655: LD_INT 4
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: IN
32664: IFFALSE 32684
32666: PUSH
32667: LD_VAR 0 1
32671: PPUSH
32672: LD_INT 51
32674: PPUSH
32675: CALL_OW 321
32679: PUSH
32680: LD_INT 2
32682: EQUAL
32683: AND
32684: IFFALSE 32701
// bpoints := bpoints * 1.2 ;
32686: LD_ADDR_VAR 0 10
32690: PUSH
32691: LD_VAR 0 10
32695: PUSH
32696: LD_REAL  1.20000000000000E+0000
32699: MUL
32700: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32701: LD_VAR 0 6
32705: PPUSH
32706: CALL_OW 257
32710: PUSH
32711: LD_INT 5
32713: PUSH
32714: LD_INT 7
32716: PUSH
32717: LD_INT 9
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: LIST
32724: IN
32725: IFFALSE 32745
32727: PUSH
32728: LD_VAR 0 1
32732: PPUSH
32733: LD_INT 52
32735: PPUSH
32736: CALL_OW 321
32740: PUSH
32741: LD_INT 2
32743: EQUAL
32744: AND
32745: IFFALSE 32762
// bpoints := bpoints * 1.5 ;
32747: LD_ADDR_VAR 0 10
32751: PUSH
32752: LD_VAR 0 10
32756: PUSH
32757: LD_REAL  1.50000000000000E+0000
32760: MUL
32761: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32762: LD_VAR 0 1
32766: PPUSH
32767: LD_INT 66
32769: PPUSH
32770: CALL_OW 321
32774: PUSH
32775: LD_INT 2
32777: EQUAL
32778: IFFALSE 32795
// bpoints := bpoints * 1.1 ;
32780: LD_ADDR_VAR 0 10
32784: PUSH
32785: LD_VAR 0 10
32789: PUSH
32790: LD_REAL  1.10000000000000E+0000
32793: MUL
32794: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32795: LD_ADDR_VAR 0 10
32799: PUSH
32800: LD_VAR 0 10
32804: PUSH
32805: LD_VAR 0 6
32809: PPUSH
32810: LD_INT 1
32812: PPUSH
32813: CALL_OW 259
32817: PUSH
32818: LD_REAL  1.15000000000000E+0000
32821: MUL
32822: MUL
32823: ST_TO_ADDR
// end ; unit_vehicle :
32824: GO 33654
32826: LD_INT 2
32828: DOUBLE
32829: EQUAL
32830: IFTRUE 32834
32832: GO 33642
32834: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32835: LD_VAR 0 6
32839: PPUSH
32840: CALL_OW 264
32844: PUSH
32845: LD_INT 2
32847: PUSH
32848: LD_INT 42
32850: PUSH
32851: LD_INT 24
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: LIST
32858: IN
32859: IFFALSE 32880
// points := [ 25 , 5 , 3 ] ;
32861: LD_ADDR_VAR 0 9
32865: PUSH
32866: LD_INT 25
32868: PUSH
32869: LD_INT 5
32871: PUSH
32872: LD_INT 3
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: LIST
32879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32880: LD_VAR 0 6
32884: PPUSH
32885: CALL_OW 264
32889: PUSH
32890: LD_INT 4
32892: PUSH
32893: LD_INT 43
32895: PUSH
32896: LD_INT 25
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: LIST
32903: IN
32904: IFFALSE 32925
// points := [ 40 , 15 , 5 ] ;
32906: LD_ADDR_VAR 0 9
32910: PUSH
32911: LD_INT 40
32913: PUSH
32914: LD_INT 15
32916: PUSH
32917: LD_INT 5
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: LIST
32924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32925: LD_VAR 0 6
32929: PPUSH
32930: CALL_OW 264
32934: PUSH
32935: LD_INT 3
32937: PUSH
32938: LD_INT 23
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: IN
32945: IFFALSE 32966
// points := [ 7 , 25 , 8 ] ;
32947: LD_ADDR_VAR 0 9
32951: PUSH
32952: LD_INT 7
32954: PUSH
32955: LD_INT 25
32957: PUSH
32958: LD_INT 8
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32966: LD_VAR 0 6
32970: PPUSH
32971: CALL_OW 264
32975: PUSH
32976: LD_INT 5
32978: PUSH
32979: LD_INT 27
32981: PUSH
32982: LD_INT 44
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: LIST
32989: IN
32990: IFFALSE 33011
// points := [ 14 , 50 , 16 ] ;
32992: LD_ADDR_VAR 0 9
32996: PUSH
32997: LD_INT 14
32999: PUSH
33000: LD_INT 50
33002: PUSH
33003: LD_INT 16
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: LIST
33010: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33011: LD_VAR 0 6
33015: PPUSH
33016: CALL_OW 264
33020: PUSH
33021: LD_INT 6
33023: PUSH
33024: LD_INT 46
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: IN
33031: IFFALSE 33052
// points := [ 32 , 120 , 70 ] ;
33033: LD_ADDR_VAR 0 9
33037: PUSH
33038: LD_INT 32
33040: PUSH
33041: LD_INT 120
33043: PUSH
33044: LD_INT 70
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33052: LD_VAR 0 6
33056: PPUSH
33057: CALL_OW 264
33061: PUSH
33062: LD_INT 7
33064: PUSH
33065: LD_INT 28
33067: PUSH
33068: LD_INT 45
33070: PUSH
33071: LD_INT 92
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: IN
33080: IFFALSE 33101
// points := [ 35 , 20 , 45 ] ;
33082: LD_ADDR_VAR 0 9
33086: PUSH
33087: LD_INT 35
33089: PUSH
33090: LD_INT 20
33092: PUSH
33093: LD_INT 45
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: LIST
33100: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33101: LD_VAR 0 6
33105: PPUSH
33106: CALL_OW 264
33110: PUSH
33111: LD_INT 47
33113: PUSH
33114: EMPTY
33115: LIST
33116: IN
33117: IFFALSE 33138
// points := [ 67 , 45 , 75 ] ;
33119: LD_ADDR_VAR 0 9
33123: PUSH
33124: LD_INT 67
33126: PUSH
33127: LD_INT 45
33129: PUSH
33130: LD_INT 75
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: LIST
33137: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33138: LD_VAR 0 6
33142: PPUSH
33143: CALL_OW 264
33147: PUSH
33148: LD_INT 26
33150: PUSH
33151: EMPTY
33152: LIST
33153: IN
33154: IFFALSE 33175
// points := [ 120 , 30 , 80 ] ;
33156: LD_ADDR_VAR 0 9
33160: PUSH
33161: LD_INT 120
33163: PUSH
33164: LD_INT 30
33166: PUSH
33167: LD_INT 80
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: LIST
33174: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33175: LD_VAR 0 6
33179: PPUSH
33180: CALL_OW 264
33184: PUSH
33185: LD_INT 22
33187: PUSH
33188: EMPTY
33189: LIST
33190: IN
33191: IFFALSE 33212
// points := [ 40 , 1 , 1 ] ;
33193: LD_ADDR_VAR 0 9
33197: PUSH
33198: LD_INT 40
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: LD_INT 1
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: LIST
33211: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33212: LD_VAR 0 6
33216: PPUSH
33217: CALL_OW 264
33221: PUSH
33222: LD_INT 29
33224: PUSH
33225: EMPTY
33226: LIST
33227: IN
33228: IFFALSE 33249
// points := [ 70 , 200 , 400 ] ;
33230: LD_ADDR_VAR 0 9
33234: PUSH
33235: LD_INT 70
33237: PUSH
33238: LD_INT 200
33240: PUSH
33241: LD_INT 400
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: LIST
33248: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33249: LD_VAR 0 6
33253: PPUSH
33254: CALL_OW 264
33258: PUSH
33259: LD_INT 14
33261: PUSH
33262: LD_INT 53
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: IN
33269: IFFALSE 33290
// points := [ 40 , 10 , 20 ] ;
33271: LD_ADDR_VAR 0 9
33275: PUSH
33276: LD_INT 40
33278: PUSH
33279: LD_INT 10
33281: PUSH
33282: LD_INT 20
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33290: LD_VAR 0 6
33294: PPUSH
33295: CALL_OW 264
33299: PUSH
33300: LD_INT 9
33302: PUSH
33303: EMPTY
33304: LIST
33305: IN
33306: IFFALSE 33327
// points := [ 5 , 70 , 20 ] ;
33308: LD_ADDR_VAR 0 9
33312: PUSH
33313: LD_INT 5
33315: PUSH
33316: LD_INT 70
33318: PUSH
33319: LD_INT 20
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: LIST
33326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33327: LD_VAR 0 6
33331: PPUSH
33332: CALL_OW 264
33336: PUSH
33337: LD_INT 10
33339: PUSH
33340: EMPTY
33341: LIST
33342: IN
33343: IFFALSE 33364
// points := [ 35 , 110 , 70 ] ;
33345: LD_ADDR_VAR 0 9
33349: PUSH
33350: LD_INT 35
33352: PUSH
33353: LD_INT 110
33355: PUSH
33356: LD_INT 70
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: LIST
33363: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33364: LD_VAR 0 6
33368: PPUSH
33369: CALL_OW 265
33373: PUSH
33374: LD_INT 25
33376: EQUAL
33377: IFFALSE 33398
// points := [ 80 , 65 , 100 ] ;
33379: LD_ADDR_VAR 0 9
33383: PUSH
33384: LD_INT 80
33386: PUSH
33387: LD_INT 65
33389: PUSH
33390: LD_INT 100
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: LIST
33397: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33398: LD_VAR 0 6
33402: PPUSH
33403: CALL_OW 263
33407: PUSH
33408: LD_INT 1
33410: EQUAL
33411: IFFALSE 33446
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33413: LD_ADDR_VAR 0 10
33417: PUSH
33418: LD_VAR 0 10
33422: PUSH
33423: LD_VAR 0 6
33427: PPUSH
33428: CALL_OW 311
33432: PPUSH
33433: LD_INT 3
33435: PPUSH
33436: CALL_OW 259
33440: PUSH
33441: LD_INT 4
33443: MUL
33444: MUL
33445: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33446: LD_VAR 0 6
33450: PPUSH
33451: CALL_OW 263
33455: PUSH
33456: LD_INT 2
33458: EQUAL
33459: IFFALSE 33510
// begin j := IsControledBy ( i ) ;
33461: LD_ADDR_VAR 0 7
33465: PUSH
33466: LD_VAR 0 6
33470: PPUSH
33471: CALL_OW 312
33475: ST_TO_ADDR
// if j then
33476: LD_VAR 0 7
33480: IFFALSE 33510
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33482: LD_ADDR_VAR 0 10
33486: PUSH
33487: LD_VAR 0 10
33491: PUSH
33492: LD_VAR 0 7
33496: PPUSH
33497: LD_INT 3
33499: PPUSH
33500: CALL_OW 259
33504: PUSH
33505: LD_INT 3
33507: MUL
33508: MUL
33509: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33510: LD_VAR 0 6
33514: PPUSH
33515: CALL_OW 264
33519: PUSH
33520: LD_INT 5
33522: PUSH
33523: LD_INT 6
33525: PUSH
33526: LD_INT 46
33528: PUSH
33529: LD_INT 44
33531: PUSH
33532: LD_INT 47
33534: PUSH
33535: LD_INT 45
33537: PUSH
33538: LD_INT 28
33540: PUSH
33541: LD_INT 7
33543: PUSH
33544: LD_INT 27
33546: PUSH
33547: LD_INT 29
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: IN
33562: IFFALSE 33582
33564: PUSH
33565: LD_VAR 0 1
33569: PPUSH
33570: LD_INT 52
33572: PPUSH
33573: CALL_OW 321
33577: PUSH
33578: LD_INT 2
33580: EQUAL
33581: AND
33582: IFFALSE 33599
// bpoints := bpoints * 1.2 ;
33584: LD_ADDR_VAR 0 10
33588: PUSH
33589: LD_VAR 0 10
33593: PUSH
33594: LD_REAL  1.20000000000000E+0000
33597: MUL
33598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33599: LD_VAR 0 6
33603: PPUSH
33604: CALL_OW 264
33608: PUSH
33609: LD_INT 6
33611: PUSH
33612: LD_INT 46
33614: PUSH
33615: LD_INT 47
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: LIST
33622: IN
33623: IFFALSE 33640
// bpoints := bpoints * 1.2 ;
33625: LD_ADDR_VAR 0 10
33629: PUSH
33630: LD_VAR 0 10
33634: PUSH
33635: LD_REAL  1.20000000000000E+0000
33638: MUL
33639: ST_TO_ADDR
// end ; unit_building :
33640: GO 33654
33642: LD_INT 3
33644: DOUBLE
33645: EQUAL
33646: IFTRUE 33650
33648: GO 33653
33650: POP
// ; end ;
33651: GO 33654
33653: POP
// for j = 1 to 3 do
33654: LD_ADDR_VAR 0 7
33658: PUSH
33659: DOUBLE
33660: LD_INT 1
33662: DEC
33663: ST_TO_ADDR
33664: LD_INT 3
33666: PUSH
33667: FOR_TO
33668: IFFALSE 33721
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33670: LD_ADDR_VAR 0 5
33674: PUSH
33675: LD_VAR 0 5
33679: PPUSH
33680: LD_VAR 0 7
33684: PPUSH
33685: LD_VAR 0 5
33689: PUSH
33690: LD_VAR 0 7
33694: ARRAY
33695: PUSH
33696: LD_VAR 0 9
33700: PUSH
33701: LD_VAR 0 7
33705: ARRAY
33706: PUSH
33707: LD_VAR 0 10
33711: MUL
33712: PLUS
33713: PPUSH
33714: CALL_OW 1
33718: ST_TO_ADDR
33719: GO 33667
33721: POP
33722: POP
// end ;
33723: GO 32196
33725: POP
33726: POP
// result := Replace ( result , 4 , tmp ) ;
33727: LD_ADDR_VAR 0 5
33731: PUSH
33732: LD_VAR 0 5
33736: PPUSH
33737: LD_INT 4
33739: PPUSH
33740: LD_VAR 0 8
33744: PPUSH
33745: CALL_OW 1
33749: ST_TO_ADDR
// end ;
33750: LD_VAR 0 5
33754: RET
// export function DangerAtRange ( unit , range ) ; begin
33755: LD_INT 0
33757: PPUSH
// if not unit then
33758: LD_VAR 0 1
33762: NOT
33763: IFFALSE 33767
// exit ;
33765: GO 33812
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33767: LD_ADDR_VAR 0 3
33771: PUSH
33772: LD_VAR 0 1
33776: PPUSH
33777: CALL_OW 255
33781: PPUSH
33782: LD_VAR 0 1
33786: PPUSH
33787: CALL_OW 250
33791: PPUSH
33792: LD_VAR 0 1
33796: PPUSH
33797: CALL_OW 251
33801: PPUSH
33802: LD_VAR 0 2
33806: PPUSH
33807: CALL 32046 0 4
33811: ST_TO_ADDR
// end ;
33812: LD_VAR 0 3
33816: RET
// export function DangerInArea ( side , area ) ; begin
33817: LD_INT 0
33819: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33820: LD_ADDR_VAR 0 3
33824: PUSH
33825: LD_VAR 0 2
33829: PPUSH
33830: LD_INT 81
33832: PUSH
33833: LD_VAR 0 1
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PPUSH
33842: CALL_OW 70
33846: ST_TO_ADDR
// end ;
33847: LD_VAR 0 3
33851: RET
// export function IsExtension ( b ) ; begin
33852: LD_INT 0
33854: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33855: LD_ADDR_VAR 0 2
33859: PUSH
33860: LD_VAR 0 1
33864: PUSH
33865: LD_INT 23
33867: PUSH
33868: LD_INT 20
33870: PUSH
33871: LD_INT 22
33873: PUSH
33874: LD_INT 17
33876: PUSH
33877: LD_INT 24
33879: PUSH
33880: LD_INT 21
33882: PUSH
33883: LD_INT 19
33885: PUSH
33886: LD_INT 16
33888: PUSH
33889: LD_INT 25
33891: PUSH
33892: LD_INT 18
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: IN
33907: ST_TO_ADDR
// end ;
33908: LD_VAR 0 2
33912: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33913: LD_INT 0
33915: PPUSH
33916: PPUSH
33917: PPUSH
// result := [ ] ;
33918: LD_ADDR_VAR 0 4
33922: PUSH
33923: EMPTY
33924: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33925: LD_ADDR_VAR 0 5
33929: PUSH
33930: LD_VAR 0 2
33934: PPUSH
33935: LD_INT 21
33937: PUSH
33938: LD_INT 3
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PPUSH
33945: CALL_OW 70
33949: ST_TO_ADDR
// if not tmp then
33950: LD_VAR 0 5
33954: NOT
33955: IFFALSE 33959
// exit ;
33957: GO 34023
// if checkLink then
33959: LD_VAR 0 3
33963: IFFALSE 34013
// begin for i in tmp do
33965: LD_ADDR_VAR 0 6
33969: PUSH
33970: LD_VAR 0 5
33974: PUSH
33975: FOR_IN
33976: IFFALSE 34011
// if GetBase ( i ) <> base then
33978: LD_VAR 0 6
33982: PPUSH
33983: CALL_OW 274
33987: PUSH
33988: LD_VAR 0 1
33992: NONEQUAL
33993: IFFALSE 34009
// ComLinkToBase ( base , i ) ;
33995: LD_VAR 0 1
33999: PPUSH
34000: LD_VAR 0 6
34004: PPUSH
34005: CALL_OW 169
34009: GO 33975
34011: POP
34012: POP
// end ; result := tmp ;
34013: LD_ADDR_VAR 0 4
34017: PUSH
34018: LD_VAR 0 5
34022: ST_TO_ADDR
// end ;
34023: LD_VAR 0 4
34027: RET
// export function ComComplete ( units , b ) ; var i ; begin
34028: LD_INT 0
34030: PPUSH
34031: PPUSH
// if not units then
34032: LD_VAR 0 1
34036: NOT
34037: IFFALSE 34041
// exit ;
34039: GO 34131
// for i in units do
34041: LD_ADDR_VAR 0 4
34045: PUSH
34046: LD_VAR 0 1
34050: PUSH
34051: FOR_IN
34052: IFFALSE 34129
// if BuildingStatus ( b ) = bs_build then
34054: LD_VAR 0 2
34058: PPUSH
34059: CALL_OW 461
34063: PUSH
34064: LD_INT 1
34066: EQUAL
34067: IFFALSE 34127
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34069: LD_VAR 0 4
34073: PPUSH
34074: LD_STRING h
34076: PUSH
34077: LD_VAR 0 2
34081: PPUSH
34082: CALL_OW 250
34086: PUSH
34087: LD_VAR 0 2
34091: PPUSH
34092: CALL_OW 251
34096: PUSH
34097: LD_VAR 0 2
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: LD_INT 0
34107: PUSH
34108: LD_INT 0
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: PUSH
34120: EMPTY
34121: LIST
34122: PPUSH
34123: CALL_OW 446
34127: GO 34051
34129: POP
34130: POP
// end ;
34131: LD_VAR 0 3
34135: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34136: LD_INT 0
34138: PPUSH
34139: PPUSH
34140: PPUSH
34141: PPUSH
34142: PPUSH
34143: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34144: LD_VAR 0 1
34148: NOT
34149: IFTRUE 34166
34151: PUSH
34152: LD_VAR 0 1
34156: PPUSH
34157: CALL_OW 263
34161: PUSH
34162: LD_INT 2
34164: NONEQUAL
34165: OR
34166: IFFALSE 34170
// exit ;
34168: GO 34486
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34170: LD_ADDR_VAR 0 6
34174: PUSH
34175: LD_INT 22
34177: PUSH
34178: LD_VAR 0 1
34182: PPUSH
34183: CALL_OW 255
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 2
34194: PUSH
34195: LD_INT 30
34197: PUSH
34198: LD_INT 36
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 34
34207: PUSH
34208: LD_INT 31
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PPUSH
34224: CALL_OW 69
34228: ST_TO_ADDR
// if not tmp then
34229: LD_VAR 0 6
34233: NOT
34234: IFFALSE 34238
// exit ;
34236: GO 34486
// result := [ ] ;
34238: LD_ADDR_VAR 0 2
34242: PUSH
34243: EMPTY
34244: ST_TO_ADDR
// for i in tmp do
34245: LD_ADDR_VAR 0 3
34249: PUSH
34250: LD_VAR 0 6
34254: PUSH
34255: FOR_IN
34256: IFFALSE 34327
// begin t := UnitsInside ( i ) ;
34258: LD_ADDR_VAR 0 4
34262: PUSH
34263: LD_VAR 0 3
34267: PPUSH
34268: CALL_OW 313
34272: ST_TO_ADDR
// if t then
34273: LD_VAR 0 4
34277: IFFALSE 34325
// for j in t do
34279: LD_ADDR_VAR 0 7
34283: PUSH
34284: LD_VAR 0 4
34288: PUSH
34289: FOR_IN
34290: IFFALSE 34323
// result := Replace ( result , result + 1 , j ) ;
34292: LD_ADDR_VAR 0 2
34296: PUSH
34297: LD_VAR 0 2
34301: PPUSH
34302: LD_VAR 0 2
34306: PUSH
34307: LD_INT 1
34309: PLUS
34310: PPUSH
34311: LD_VAR 0 7
34315: PPUSH
34316: CALL_OW 1
34320: ST_TO_ADDR
34321: GO 34289
34323: POP
34324: POP
// end ;
34325: GO 34255
34327: POP
34328: POP
// if not result then
34329: LD_VAR 0 2
34333: NOT
34334: IFFALSE 34338
// exit ;
34336: GO 34486
// mech := result [ 1 ] ;
34338: LD_ADDR_VAR 0 5
34342: PUSH
34343: LD_VAR 0 2
34347: PUSH
34348: LD_INT 1
34350: ARRAY
34351: ST_TO_ADDR
// if result > 1 then
34352: LD_VAR 0 2
34356: PUSH
34357: LD_INT 1
34359: GREATER
34360: IFFALSE 34472
// begin for i = 2 to result do
34362: LD_ADDR_VAR 0 3
34366: PUSH
34367: DOUBLE
34368: LD_INT 2
34370: DEC
34371: ST_TO_ADDR
34372: LD_VAR 0 2
34376: PUSH
34377: FOR_TO
34378: IFFALSE 34470
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34380: LD_ADDR_VAR 0 4
34384: PUSH
34385: LD_VAR 0 2
34389: PUSH
34390: LD_VAR 0 3
34394: ARRAY
34395: PPUSH
34396: LD_INT 3
34398: PPUSH
34399: CALL_OW 259
34403: PUSH
34404: LD_VAR 0 2
34408: PUSH
34409: LD_VAR 0 3
34413: ARRAY
34414: PPUSH
34415: CALL_OW 432
34419: MINUS
34420: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34421: LD_VAR 0 4
34425: PUSH
34426: LD_VAR 0 5
34430: PPUSH
34431: LD_INT 3
34433: PPUSH
34434: CALL_OW 259
34438: PUSH
34439: LD_VAR 0 5
34443: PPUSH
34444: CALL_OW 432
34448: MINUS
34449: GREATEREQUAL
34450: IFFALSE 34468
// mech := result [ i ] ;
34452: LD_ADDR_VAR 0 5
34456: PUSH
34457: LD_VAR 0 2
34461: PUSH
34462: LD_VAR 0 3
34466: ARRAY
34467: ST_TO_ADDR
// end ;
34468: GO 34377
34470: POP
34471: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34472: LD_VAR 0 1
34476: PPUSH
34477: LD_VAR 0 5
34481: PPUSH
34482: CALL_OW 135
// end ;
34486: LD_VAR 0 2
34490: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34491: LD_INT 0
34493: PPUSH
34494: PPUSH
34495: PPUSH
34496: PPUSH
34497: PPUSH
34498: PPUSH
34499: PPUSH
34500: PPUSH
34501: PPUSH
34502: PPUSH
34503: PPUSH
34504: PPUSH
34505: PPUSH
// result := [ ] ;
34506: LD_ADDR_VAR 0 7
34510: PUSH
34511: EMPTY
34512: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34513: LD_VAR 0 1
34517: PPUSH
34518: CALL_OW 266
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: LD_INT 1
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: IN
34533: NOT
34534: IFFALSE 34538
// exit ;
34536: GO 36178
// if name then
34538: LD_VAR 0 3
34542: IFFALSE 34558
// SetBName ( base_dep , name ) ;
34544: LD_VAR 0 1
34548: PPUSH
34549: LD_VAR 0 3
34553: PPUSH
34554: CALL_OW 500
// base := GetBase ( base_dep ) ;
34558: LD_ADDR_VAR 0 15
34562: PUSH
34563: LD_VAR 0 1
34567: PPUSH
34568: CALL_OW 274
34572: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34573: LD_ADDR_VAR 0 16
34577: PUSH
34578: LD_VAR 0 1
34582: PPUSH
34583: CALL_OW 255
34587: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34588: LD_ADDR_VAR 0 17
34592: PUSH
34593: LD_VAR 0 1
34597: PPUSH
34598: CALL_OW 248
34602: ST_TO_ADDR
// if sources then
34603: LD_VAR 0 5
34607: IFFALSE 34654
// for i = 1 to 3 do
34609: LD_ADDR_VAR 0 8
34613: PUSH
34614: DOUBLE
34615: LD_INT 1
34617: DEC
34618: ST_TO_ADDR
34619: LD_INT 3
34621: PUSH
34622: FOR_TO
34623: IFFALSE 34652
// AddResourceType ( base , i , sources [ i ] ) ;
34625: LD_VAR 0 15
34629: PPUSH
34630: LD_VAR 0 8
34634: PPUSH
34635: LD_VAR 0 5
34639: PUSH
34640: LD_VAR 0 8
34644: ARRAY
34645: PPUSH
34646: CALL_OW 276
34650: GO 34622
34652: POP
34653: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34654: LD_ADDR_VAR 0 18
34658: PUSH
34659: LD_VAR 0 15
34663: PPUSH
34664: LD_VAR 0 2
34668: PPUSH
34669: LD_INT 1
34671: PPUSH
34672: CALL 33913 0 3
34676: ST_TO_ADDR
// InitHc ;
34677: CALL_OW 19
// InitUc ;
34681: CALL_OW 18
// uc_side := side ;
34685: LD_ADDR_OWVAR 20
34689: PUSH
34690: LD_VAR 0 16
34694: ST_TO_ADDR
// uc_nation := nation ;
34695: LD_ADDR_OWVAR 21
34699: PUSH
34700: LD_VAR 0 17
34704: ST_TO_ADDR
// if buildings then
34705: LD_VAR 0 18
34709: IFFALSE 36037
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34711: LD_ADDR_VAR 0 19
34715: PUSH
34716: LD_VAR 0 18
34720: PPUSH
34721: LD_INT 2
34723: PUSH
34724: LD_INT 30
34726: PUSH
34727: LD_INT 29
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 30
34736: PUSH
34737: LD_INT 30
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: LIST
34748: PPUSH
34749: CALL_OW 72
34753: ST_TO_ADDR
// if tmp then
34754: LD_VAR 0 19
34758: IFFALSE 34806
// for i in tmp do
34760: LD_ADDR_VAR 0 8
34764: PUSH
34765: LD_VAR 0 19
34769: PUSH
34770: FOR_IN
34771: IFFALSE 34804
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34773: LD_VAR 0 8
34777: PPUSH
34778: CALL_OW 250
34782: PPUSH
34783: LD_VAR 0 8
34787: PPUSH
34788: CALL_OW 251
34792: PPUSH
34793: LD_VAR 0 16
34797: PPUSH
34798: CALL_OW 441
34802: GO 34770
34804: POP
34805: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34806: LD_VAR 0 18
34810: PPUSH
34811: LD_INT 2
34813: PUSH
34814: LD_INT 30
34816: PUSH
34817: LD_INT 32
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 30
34826: PUSH
34827: LD_INT 33
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: LIST
34838: PPUSH
34839: CALL_OW 72
34843: IFFALSE 34931
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34845: LD_ADDR_VAR 0 8
34849: PUSH
34850: LD_VAR 0 18
34854: PPUSH
34855: LD_INT 2
34857: PUSH
34858: LD_INT 30
34860: PUSH
34861: LD_INT 32
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 30
34870: PUSH
34871: LD_INT 33
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: LIST
34882: PPUSH
34883: CALL_OW 72
34887: PUSH
34888: FOR_IN
34889: IFFALSE 34929
// begin if not GetBWeapon ( i ) then
34891: LD_VAR 0 8
34895: PPUSH
34896: CALL_OW 269
34900: NOT
34901: IFFALSE 34927
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34903: LD_VAR 0 8
34907: PPUSH
34908: LD_VAR 0 8
34912: PPUSH
34913: LD_VAR 0 2
34917: PPUSH
34918: CALL 36183 0 2
34922: PPUSH
34923: CALL_OW 431
// end ;
34927: GO 34888
34929: POP
34930: POP
// end ; for i = 1 to personel do
34931: LD_ADDR_VAR 0 8
34935: PUSH
34936: DOUBLE
34937: LD_INT 1
34939: DEC
34940: ST_TO_ADDR
34941: LD_VAR 0 6
34945: PUSH
34946: FOR_TO
34947: IFFALSE 36017
// begin if i > 4 then
34949: LD_VAR 0 8
34953: PUSH
34954: LD_INT 4
34956: GREATER
34957: IFFALSE 34961
// break ;
34959: GO 36017
// case i of 1 :
34961: LD_VAR 0 8
34965: PUSH
34966: LD_INT 1
34968: DOUBLE
34969: EQUAL
34970: IFTRUE 34974
34972: GO 35054
34974: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34975: LD_ADDR_VAR 0 12
34979: PUSH
34980: LD_VAR 0 18
34984: PPUSH
34985: LD_INT 22
34987: PUSH
34988: LD_VAR 0 16
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 58
34999: PUSH
35000: EMPTY
35001: LIST
35002: PUSH
35003: LD_INT 2
35005: PUSH
35006: LD_INT 30
35008: PUSH
35009: LD_INT 32
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 30
35018: PUSH
35019: LD_INT 4
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 30
35028: PUSH
35029: LD_INT 5
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: LIST
35046: PPUSH
35047: CALL_OW 72
35051: ST_TO_ADDR
35052: GO 35276
35054: LD_INT 2
35056: DOUBLE
35057: EQUAL
35058: IFTRUE 35062
35060: GO 35124
35062: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35063: LD_ADDR_VAR 0 12
35067: PUSH
35068: LD_VAR 0 18
35072: PPUSH
35073: LD_INT 22
35075: PUSH
35076: LD_VAR 0 16
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: LD_INT 30
35090: PUSH
35091: LD_INT 0
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 30
35100: PUSH
35101: LD_INT 1
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: LIST
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PPUSH
35117: CALL_OW 72
35121: ST_TO_ADDR
35122: GO 35276
35124: LD_INT 3
35126: DOUBLE
35127: EQUAL
35128: IFTRUE 35132
35130: GO 35194
35132: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35133: LD_ADDR_VAR 0 12
35137: PUSH
35138: LD_VAR 0 18
35142: PPUSH
35143: LD_INT 22
35145: PUSH
35146: LD_VAR 0 16
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 2
35157: PUSH
35158: LD_INT 30
35160: PUSH
35161: LD_INT 2
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 30
35170: PUSH
35171: LD_INT 3
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PPUSH
35187: CALL_OW 72
35191: ST_TO_ADDR
35192: GO 35276
35194: LD_INT 4
35196: DOUBLE
35197: EQUAL
35198: IFTRUE 35202
35200: GO 35275
35202: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35203: LD_ADDR_VAR 0 12
35207: PUSH
35208: LD_VAR 0 18
35212: PPUSH
35213: LD_INT 22
35215: PUSH
35216: LD_VAR 0 16
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 2
35227: PUSH
35228: LD_INT 30
35230: PUSH
35231: LD_INT 6
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 30
35240: PUSH
35241: LD_INT 7
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 30
35250: PUSH
35251: LD_INT 8
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PPUSH
35268: CALL_OW 72
35272: ST_TO_ADDR
35273: GO 35276
35275: POP
// if i = 1 then
35276: LD_VAR 0 8
35280: PUSH
35281: LD_INT 1
35283: EQUAL
35284: IFFALSE 35395
// begin tmp := [ ] ;
35286: LD_ADDR_VAR 0 19
35290: PUSH
35291: EMPTY
35292: ST_TO_ADDR
// for j in f do
35293: LD_ADDR_VAR 0 9
35297: PUSH
35298: LD_VAR 0 12
35302: PUSH
35303: FOR_IN
35304: IFFALSE 35377
// if GetBType ( j ) = b_bunker then
35306: LD_VAR 0 9
35310: PPUSH
35311: CALL_OW 266
35315: PUSH
35316: LD_INT 32
35318: EQUAL
35319: IFFALSE 35346
// tmp := Insert ( tmp , 1 , j ) else
35321: LD_ADDR_VAR 0 19
35325: PUSH
35326: LD_VAR 0 19
35330: PPUSH
35331: LD_INT 1
35333: PPUSH
35334: LD_VAR 0 9
35338: PPUSH
35339: CALL_OW 2
35343: ST_TO_ADDR
35344: GO 35375
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35346: LD_ADDR_VAR 0 19
35350: PUSH
35351: LD_VAR 0 19
35355: PPUSH
35356: LD_VAR 0 19
35360: PUSH
35361: LD_INT 1
35363: PLUS
35364: PPUSH
35365: LD_VAR 0 9
35369: PPUSH
35370: CALL_OW 2
35374: ST_TO_ADDR
35375: GO 35303
35377: POP
35378: POP
// if tmp then
35379: LD_VAR 0 19
35383: IFFALSE 35395
// f := tmp ;
35385: LD_ADDR_VAR 0 12
35389: PUSH
35390: LD_VAR 0 19
35394: ST_TO_ADDR
// end ; x := personel [ i ] ;
35395: LD_ADDR_VAR 0 13
35399: PUSH
35400: LD_VAR 0 6
35404: PUSH
35405: LD_VAR 0 8
35409: ARRAY
35410: ST_TO_ADDR
// if x = - 1 then
35411: LD_VAR 0 13
35415: PUSH
35416: LD_INT 1
35418: NEG
35419: EQUAL
35420: IFFALSE 35631
// begin for j in f do
35422: LD_ADDR_VAR 0 9
35426: PUSH
35427: LD_VAR 0 12
35431: PUSH
35432: FOR_IN
35433: IFFALSE 35627
// repeat InitHc ;
35435: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35439: LD_VAR 0 9
35443: PPUSH
35444: CALL_OW 266
35448: PUSH
35449: LD_INT 5
35451: EQUAL
35452: IFFALSE 35522
// begin if UnitsInside ( j ) < 3 then
35454: LD_VAR 0 9
35458: PPUSH
35459: CALL_OW 313
35463: PUSH
35464: LD_INT 3
35466: LESS
35467: IFFALSE 35503
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35469: LD_INT 0
35471: PPUSH
35472: LD_INT 5
35474: PUSH
35475: LD_INT 8
35477: PUSH
35478: LD_INT 9
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: PUSH
35486: LD_VAR 0 17
35490: ARRAY
35491: PPUSH
35492: LD_VAR 0 4
35496: PPUSH
35497: CALL_OW 380
35501: GO 35520
// PrepareHuman ( false , i , skill ) ;
35503: LD_INT 0
35505: PPUSH
35506: LD_VAR 0 8
35510: PPUSH
35511: LD_VAR 0 4
35515: PPUSH
35516: CALL_OW 380
// end else
35520: GO 35539
// PrepareHuman ( false , i , skill ) ;
35522: LD_INT 0
35524: PPUSH
35525: LD_VAR 0 8
35529: PPUSH
35530: LD_VAR 0 4
35534: PPUSH
35535: CALL_OW 380
// un := CreateHuman ;
35539: LD_ADDR_VAR 0 14
35543: PUSH
35544: CALL_OW 44
35548: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35549: LD_ADDR_VAR 0 7
35553: PUSH
35554: LD_VAR 0 7
35558: PPUSH
35559: LD_INT 1
35561: PPUSH
35562: LD_VAR 0 14
35566: PPUSH
35567: CALL_OW 2
35571: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35572: LD_VAR 0 14
35576: PPUSH
35577: LD_VAR 0 9
35581: PPUSH
35582: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35586: LD_VAR 0 9
35590: PPUSH
35591: CALL_OW 313
35595: PUSH
35596: LD_INT 6
35598: EQUAL
35599: IFTRUE 35623
35601: PUSH
35602: LD_VAR 0 9
35606: PPUSH
35607: CALL_OW 266
35611: PUSH
35612: LD_INT 32
35614: PUSH
35615: LD_INT 31
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: IN
35622: OR
35623: IFFALSE 35435
35625: GO 35432
35627: POP
35628: POP
// end else
35629: GO 36015
// for j = 1 to x do
35631: LD_ADDR_VAR 0 9
35635: PUSH
35636: DOUBLE
35637: LD_INT 1
35639: DEC
35640: ST_TO_ADDR
35641: LD_VAR 0 13
35645: PUSH
35646: FOR_TO
35647: IFFALSE 36013
// begin InitHc ;
35649: CALL_OW 19
// if not f then
35653: LD_VAR 0 12
35657: NOT
35658: IFFALSE 35747
// begin PrepareHuman ( false , i , skill ) ;
35660: LD_INT 0
35662: PPUSH
35663: LD_VAR 0 8
35667: PPUSH
35668: LD_VAR 0 4
35672: PPUSH
35673: CALL_OW 380
// un := CreateHuman ;
35677: LD_ADDR_VAR 0 14
35681: PUSH
35682: CALL_OW 44
35686: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35687: LD_ADDR_VAR 0 7
35691: PUSH
35692: LD_VAR 0 7
35696: PPUSH
35697: LD_INT 1
35699: PPUSH
35700: LD_VAR 0 14
35704: PPUSH
35705: CALL_OW 2
35709: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35710: LD_VAR 0 14
35714: PPUSH
35715: LD_VAR 0 1
35719: PPUSH
35720: CALL_OW 250
35724: PPUSH
35725: LD_VAR 0 1
35729: PPUSH
35730: CALL_OW 251
35734: PPUSH
35735: LD_INT 10
35737: PPUSH
35738: LD_INT 0
35740: PPUSH
35741: CALL_OW 50
// continue ;
35745: GO 35646
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35747: LD_VAR 0 12
35751: PUSH
35752: LD_INT 1
35754: ARRAY
35755: PPUSH
35756: CALL_OW 313
35760: IFFALSE 35788
35762: PUSH
35763: LD_VAR 0 12
35767: PUSH
35768: LD_INT 1
35770: ARRAY
35771: PPUSH
35772: CALL_OW 266
35776: PUSH
35777: LD_INT 32
35779: PUSH
35780: LD_INT 31
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: IN
35787: AND
35788: IFTRUE 35809
35790: PUSH
35791: LD_VAR 0 12
35795: PUSH
35796: LD_INT 1
35798: ARRAY
35799: PPUSH
35800: CALL_OW 313
35804: PUSH
35805: LD_INT 6
35807: EQUAL
35808: OR
35809: IFFALSE 35829
// f := Delete ( f , 1 ) ;
35811: LD_ADDR_VAR 0 12
35815: PUSH
35816: LD_VAR 0 12
35820: PPUSH
35821: LD_INT 1
35823: PPUSH
35824: CALL_OW 3
35828: ST_TO_ADDR
// if not f then
35829: LD_VAR 0 12
35833: NOT
35834: IFFALSE 35852
// begin x := x + 2 ;
35836: LD_ADDR_VAR 0 13
35840: PUSH
35841: LD_VAR 0 13
35845: PUSH
35846: LD_INT 2
35848: PLUS
35849: ST_TO_ADDR
// continue ;
35850: GO 35646
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35852: LD_VAR 0 12
35856: PUSH
35857: LD_INT 1
35859: ARRAY
35860: PPUSH
35861: CALL_OW 266
35865: PUSH
35866: LD_INT 5
35868: EQUAL
35869: IFFALSE 35943
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35871: LD_VAR 0 12
35875: PUSH
35876: LD_INT 1
35878: ARRAY
35879: PPUSH
35880: CALL_OW 313
35884: PUSH
35885: LD_INT 3
35887: LESS
35888: IFFALSE 35924
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35890: LD_INT 0
35892: PPUSH
35893: LD_INT 5
35895: PUSH
35896: LD_INT 8
35898: PUSH
35899: LD_INT 9
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: LIST
35906: PUSH
35907: LD_VAR 0 17
35911: ARRAY
35912: PPUSH
35913: LD_VAR 0 4
35917: PPUSH
35918: CALL_OW 380
35922: GO 35941
// PrepareHuman ( false , i , skill ) ;
35924: LD_INT 0
35926: PPUSH
35927: LD_VAR 0 8
35931: PPUSH
35932: LD_VAR 0 4
35936: PPUSH
35937: CALL_OW 380
// end else
35941: GO 35960
// PrepareHuman ( false , i , skill ) ;
35943: LD_INT 0
35945: PPUSH
35946: LD_VAR 0 8
35950: PPUSH
35951: LD_VAR 0 4
35955: PPUSH
35956: CALL_OW 380
// un := CreateHuman ;
35960: LD_ADDR_VAR 0 14
35964: PUSH
35965: CALL_OW 44
35969: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35970: LD_ADDR_VAR 0 7
35974: PUSH
35975: LD_VAR 0 7
35979: PPUSH
35980: LD_INT 1
35982: PPUSH
35983: LD_VAR 0 14
35987: PPUSH
35988: CALL_OW 2
35992: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35993: LD_VAR 0 14
35997: PPUSH
35998: LD_VAR 0 12
36002: PUSH
36003: LD_INT 1
36005: ARRAY
36006: PPUSH
36007: CALL_OW 52
// end ;
36011: GO 35646
36013: POP
36014: POP
// end ;
36015: GO 34946
36017: POP
36018: POP
// result := result ^ buildings ;
36019: LD_ADDR_VAR 0 7
36023: PUSH
36024: LD_VAR 0 7
36028: PUSH
36029: LD_VAR 0 18
36033: ADD
36034: ST_TO_ADDR
// end else
36035: GO 36178
// begin for i = 1 to personel do
36037: LD_ADDR_VAR 0 8
36041: PUSH
36042: DOUBLE
36043: LD_INT 1
36045: DEC
36046: ST_TO_ADDR
36047: LD_VAR 0 6
36051: PUSH
36052: FOR_TO
36053: IFFALSE 36176
// begin if i > 4 then
36055: LD_VAR 0 8
36059: PUSH
36060: LD_INT 4
36062: GREATER
36063: IFFALSE 36067
// break ;
36065: GO 36176
// x := personel [ i ] ;
36067: LD_ADDR_VAR 0 13
36071: PUSH
36072: LD_VAR 0 6
36076: PUSH
36077: LD_VAR 0 8
36081: ARRAY
36082: ST_TO_ADDR
// if x = - 1 then
36083: LD_VAR 0 13
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: EQUAL
36092: IFFALSE 36096
// continue ;
36094: GO 36052
// PrepareHuman ( false , i , skill ) ;
36096: LD_INT 0
36098: PPUSH
36099: LD_VAR 0 8
36103: PPUSH
36104: LD_VAR 0 4
36108: PPUSH
36109: CALL_OW 380
// un := CreateHuman ;
36113: LD_ADDR_VAR 0 14
36117: PUSH
36118: CALL_OW 44
36122: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36123: LD_VAR 0 14
36127: PPUSH
36128: LD_VAR 0 1
36132: PPUSH
36133: CALL_OW 250
36137: PPUSH
36138: LD_VAR 0 1
36142: PPUSH
36143: CALL_OW 251
36147: PPUSH
36148: LD_INT 10
36150: PPUSH
36151: LD_INT 0
36153: PPUSH
36154: CALL_OW 50
// result := result ^ un ;
36158: LD_ADDR_VAR 0 7
36162: PUSH
36163: LD_VAR 0 7
36167: PUSH
36168: LD_VAR 0 14
36172: ADD
36173: ST_TO_ADDR
// end ;
36174: GO 36052
36176: POP
36177: POP
// end ; end ;
36178: LD_VAR 0 7
36182: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36183: LD_INT 0
36185: PPUSH
36186: PPUSH
36187: PPUSH
36188: PPUSH
36189: PPUSH
36190: PPUSH
36191: PPUSH
36192: PPUSH
36193: PPUSH
36194: PPUSH
36195: PPUSH
36196: PPUSH
36197: PPUSH
36198: PPUSH
36199: PPUSH
36200: PPUSH
// result := false ;
36201: LD_ADDR_VAR 0 3
36205: PUSH
36206: LD_INT 0
36208: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36209: LD_VAR 0 1
36213: NOT
36214: IFTRUE 36239
36216: PUSH
36217: LD_VAR 0 1
36221: PPUSH
36222: CALL_OW 266
36226: PUSH
36227: LD_INT 32
36229: PUSH
36230: LD_INT 33
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: IN
36237: NOT
36238: OR
36239: IFFALSE 36243
// exit ;
36241: GO 37378
// nat := GetNation ( tower ) ;
36243: LD_ADDR_VAR 0 12
36247: PUSH
36248: LD_VAR 0 1
36252: PPUSH
36253: CALL_OW 248
36257: ST_TO_ADDR
// side := GetSide ( tower ) ;
36258: LD_ADDR_VAR 0 16
36262: PUSH
36263: LD_VAR 0 1
36267: PPUSH
36268: CALL_OW 255
36272: ST_TO_ADDR
// x := GetX ( tower ) ;
36273: LD_ADDR_VAR 0 10
36277: PUSH
36278: LD_VAR 0 1
36282: PPUSH
36283: CALL_OW 250
36287: ST_TO_ADDR
// y := GetY ( tower ) ;
36288: LD_ADDR_VAR 0 11
36292: PUSH
36293: LD_VAR 0 1
36297: PPUSH
36298: CALL_OW 251
36302: ST_TO_ADDR
// if not x or not y then
36303: LD_VAR 0 10
36307: NOT
36308: IFTRUE 36317
36310: PUSH
36311: LD_VAR 0 11
36315: NOT
36316: OR
36317: IFFALSE 36321
// exit ;
36319: GO 37378
// weapon := 0 ;
36321: LD_ADDR_VAR 0 18
36325: PUSH
36326: LD_INT 0
36328: ST_TO_ADDR
// fac_list := [ ] ;
36329: LD_ADDR_VAR 0 17
36333: PUSH
36334: EMPTY
36335: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36336: LD_ADDR_VAR 0 6
36340: PUSH
36341: LD_VAR 0 1
36345: PPUSH
36346: CALL_OW 274
36350: PPUSH
36351: LD_VAR 0 2
36355: PPUSH
36356: LD_INT 0
36358: PPUSH
36359: CALL 33913 0 3
36363: PPUSH
36364: LD_INT 30
36366: PUSH
36367: LD_INT 3
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PPUSH
36374: CALL_OW 72
36378: ST_TO_ADDR
// if not factories then
36379: LD_VAR 0 6
36383: NOT
36384: IFFALSE 36388
// exit ;
36386: GO 37378
// for i in factories do
36388: LD_ADDR_VAR 0 8
36392: PUSH
36393: LD_VAR 0 6
36397: PUSH
36398: FOR_IN
36399: IFFALSE 36424
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36401: LD_ADDR_VAR 0 17
36405: PUSH
36406: LD_VAR 0 17
36410: PUSH
36411: LD_VAR 0 8
36415: PPUSH
36416: CALL_OW 478
36420: UNION
36421: ST_TO_ADDR
36422: GO 36398
36424: POP
36425: POP
// if not fac_list then
36426: LD_VAR 0 17
36430: NOT
36431: IFFALSE 36435
// exit ;
36433: GO 37378
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36435: LD_ADDR_VAR 0 5
36439: PUSH
36440: LD_INT 4
36442: PUSH
36443: LD_INT 5
36445: PUSH
36446: LD_INT 9
36448: PUSH
36449: LD_INT 10
36451: PUSH
36452: LD_INT 6
36454: PUSH
36455: LD_INT 7
36457: PUSH
36458: LD_INT 11
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 27
36472: PUSH
36473: LD_INT 28
36475: PUSH
36476: LD_INT 26
36478: PUSH
36479: LD_INT 30
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 43
36490: PUSH
36491: LD_INT 44
36493: PUSH
36494: LD_INT 46
36496: PUSH
36497: LD_INT 45
36499: PUSH
36500: LD_INT 47
36502: PUSH
36503: LD_INT 49
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: LIST
36518: PUSH
36519: LD_VAR 0 12
36523: ARRAY
36524: ST_TO_ADDR
// list := list isect fac_list ;
36525: LD_ADDR_VAR 0 5
36529: PUSH
36530: LD_VAR 0 5
36534: PUSH
36535: LD_VAR 0 17
36539: ISECT
36540: ST_TO_ADDR
// if not list then
36541: LD_VAR 0 5
36545: NOT
36546: IFFALSE 36550
// exit ;
36548: GO 37378
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36550: LD_VAR 0 12
36554: PUSH
36555: LD_INT 3
36557: EQUAL
36558: IFFALSE 36570
36560: PUSH
36561: LD_INT 49
36563: PUSH
36564: LD_VAR 0 5
36568: IN
36569: AND
36570: IFFALSE 36590
36572: PUSH
36573: LD_INT 31
36575: PPUSH
36576: LD_VAR 0 16
36580: PPUSH
36581: CALL_OW 321
36585: PUSH
36586: LD_INT 2
36588: EQUAL
36589: AND
36590: IFFALSE 36650
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36592: LD_INT 22
36594: PUSH
36595: LD_VAR 0 16
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 35
36606: PUSH
36607: LD_INT 49
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 91
36616: PUSH
36617: LD_VAR 0 1
36621: PUSH
36622: LD_INT 10
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: LIST
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: LIST
36634: PPUSH
36635: CALL_OW 69
36639: NOT
36640: IFFALSE 36650
// weapon := ru_time_lapser ;
36642: LD_ADDR_VAR 0 18
36646: PUSH
36647: LD_INT 49
36649: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36650: LD_VAR 0 12
36654: PUSH
36655: LD_INT 1
36657: PUSH
36658: LD_INT 2
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: IN
36665: IFFALSE 36689
36667: PUSH
36668: LD_INT 11
36670: PUSH
36671: LD_VAR 0 5
36675: IN
36676: IFTRUE 36688
36678: PUSH
36679: LD_INT 30
36681: PUSH
36682: LD_VAR 0 5
36686: IN
36687: OR
36688: AND
36689: IFFALSE 36709
36691: PUSH
36692: LD_INT 6
36694: PPUSH
36695: LD_VAR 0 16
36699: PPUSH
36700: CALL_OW 321
36704: PUSH
36705: LD_INT 2
36707: EQUAL
36708: AND
36709: IFFALSE 36876
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36711: LD_INT 22
36713: PUSH
36714: LD_VAR 0 16
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 2
36725: PUSH
36726: LD_INT 35
36728: PUSH
36729: LD_INT 11
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 35
36738: PUSH
36739: LD_INT 30
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 91
36753: PUSH
36754: LD_VAR 0 1
36758: PUSH
36759: LD_INT 18
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: LIST
36771: PPUSH
36772: CALL_OW 69
36776: NOT
36777: IFFALSE 36853
36779: PUSH
36780: LD_INT 22
36782: PUSH
36783: LD_VAR 0 16
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: LD_INT 30
36797: PUSH
36798: LD_INT 32
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 30
36807: PUSH
36808: LD_INT 33
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 91
36822: PUSH
36823: LD_VAR 0 1
36827: PUSH
36828: LD_INT 12
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: LIST
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: PUSH
36841: EMPTY
36842: LIST
36843: PPUSH
36844: CALL_OW 69
36848: PUSH
36849: LD_INT 2
36851: GREATER
36852: AND
36853: IFFALSE 36876
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36855: LD_ADDR_VAR 0 18
36859: PUSH
36860: LD_INT 11
36862: PUSH
36863: LD_INT 30
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_VAR 0 12
36874: ARRAY
36875: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36876: LD_VAR 0 18
36880: NOT
36881: IFFALSE 36901
36883: PUSH
36884: LD_INT 40
36886: PPUSH
36887: LD_VAR 0 16
36891: PPUSH
36892: CALL_OW 321
36896: PUSH
36897: LD_INT 2
36899: EQUAL
36900: AND
36901: IFFALSE 36937
36903: PUSH
36904: LD_INT 7
36906: PUSH
36907: LD_VAR 0 5
36911: IN
36912: IFTRUE 36924
36914: PUSH
36915: LD_INT 28
36917: PUSH
36918: LD_VAR 0 5
36922: IN
36923: OR
36924: IFTRUE 36936
36926: PUSH
36927: LD_INT 45
36929: PUSH
36930: LD_VAR 0 5
36934: IN
36935: OR
36936: AND
36937: IFFALSE 37191
// begin hex := GetHexInfo ( x , y ) ;
36939: LD_ADDR_VAR 0 4
36943: PUSH
36944: LD_VAR 0 10
36948: PPUSH
36949: LD_VAR 0 11
36953: PPUSH
36954: CALL_OW 546
36958: ST_TO_ADDR
// if hex [ 1 ] then
36959: LD_VAR 0 4
36963: PUSH
36964: LD_INT 1
36966: ARRAY
36967: IFFALSE 36971
// exit ;
36969: GO 37378
// height := hex [ 2 ] ;
36971: LD_ADDR_VAR 0 15
36975: PUSH
36976: LD_VAR 0 4
36980: PUSH
36981: LD_INT 2
36983: ARRAY
36984: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36985: LD_ADDR_VAR 0 14
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: LD_INT 2
36995: PUSH
36996: LD_INT 3
36998: PUSH
36999: LD_INT 5
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: ST_TO_ADDR
// for i in tmp do
37008: LD_ADDR_VAR 0 8
37012: PUSH
37013: LD_VAR 0 14
37017: PUSH
37018: FOR_IN
37019: IFFALSE 37189
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37021: LD_ADDR_VAR 0 9
37025: PUSH
37026: LD_VAR 0 10
37030: PPUSH
37031: LD_VAR 0 8
37035: PPUSH
37036: LD_INT 5
37038: PPUSH
37039: CALL_OW 272
37043: PUSH
37044: LD_VAR 0 11
37048: PPUSH
37049: LD_VAR 0 8
37053: PPUSH
37054: LD_INT 5
37056: PPUSH
37057: CALL_OW 273
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37066: LD_VAR 0 9
37070: PUSH
37071: LD_INT 1
37073: ARRAY
37074: PPUSH
37075: LD_VAR 0 9
37079: PUSH
37080: LD_INT 2
37082: ARRAY
37083: PPUSH
37084: CALL_OW 488
37088: IFFALSE 37187
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37090: LD_ADDR_VAR 0 4
37094: PUSH
37095: LD_VAR 0 9
37099: PUSH
37100: LD_INT 1
37102: ARRAY
37103: PPUSH
37104: LD_VAR 0 9
37108: PUSH
37109: LD_INT 2
37111: ARRAY
37112: PPUSH
37113: CALL_OW 546
37117: ST_TO_ADDR
// if hex [ 1 ] then
37118: LD_VAR 0 4
37122: PUSH
37123: LD_INT 1
37125: ARRAY
37126: IFFALSE 37130
// continue ;
37128: GO 37018
// h := hex [ 2 ] ;
37130: LD_ADDR_VAR 0 13
37134: PUSH
37135: LD_VAR 0 4
37139: PUSH
37140: LD_INT 2
37142: ARRAY
37143: ST_TO_ADDR
// if h + 7 < height then
37144: LD_VAR 0 13
37148: PUSH
37149: LD_INT 7
37151: PLUS
37152: PUSH
37153: LD_VAR 0 15
37157: LESS
37158: IFFALSE 37187
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37160: LD_ADDR_VAR 0 18
37164: PUSH
37165: LD_INT 7
37167: PUSH
37168: LD_INT 28
37170: PUSH
37171: LD_INT 45
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: PUSH
37179: LD_VAR 0 12
37183: ARRAY
37184: ST_TO_ADDR
// break ;
37185: GO 37189
// end ; end ; end ;
37187: GO 37018
37189: POP
37190: POP
// end ; if not weapon then
37191: LD_VAR 0 18
37195: NOT
37196: IFFALSE 37256
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37198: LD_ADDR_VAR 0 5
37202: PUSH
37203: LD_VAR 0 5
37207: PUSH
37208: LD_INT 11
37210: PUSH
37211: LD_INT 30
37213: PUSH
37214: LD_INT 49
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: LIST
37221: DIFF
37222: ST_TO_ADDR
// if not list then
37223: LD_VAR 0 5
37227: NOT
37228: IFFALSE 37232
// exit ;
37230: GO 37378
// weapon := list [ rand ( 1 , list ) ] ;
37232: LD_ADDR_VAR 0 18
37236: PUSH
37237: LD_VAR 0 5
37241: PUSH
37242: LD_INT 1
37244: PPUSH
37245: LD_VAR 0 5
37249: PPUSH
37250: CALL_OW 12
37254: ARRAY
37255: ST_TO_ADDR
// end ; if weapon then
37256: LD_VAR 0 18
37260: IFFALSE 37378
// begin tmp := CostOfWeapon ( weapon ) ;
37262: LD_ADDR_VAR 0 14
37266: PUSH
37267: LD_VAR 0 18
37271: PPUSH
37272: CALL_OW 451
37276: ST_TO_ADDR
// j := GetBase ( tower ) ;
37277: LD_ADDR_VAR 0 9
37281: PUSH
37282: LD_VAR 0 1
37286: PPUSH
37287: CALL_OW 274
37291: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37292: LD_VAR 0 9
37296: PPUSH
37297: LD_INT 1
37299: PPUSH
37300: CALL_OW 275
37304: PUSH
37305: LD_VAR 0 14
37309: PUSH
37310: LD_INT 1
37312: ARRAY
37313: GREATEREQUAL
37314: IFFALSE 37340
37316: PUSH
37317: LD_VAR 0 9
37321: PPUSH
37322: LD_INT 2
37324: PPUSH
37325: CALL_OW 275
37329: PUSH
37330: LD_VAR 0 14
37334: PUSH
37335: LD_INT 2
37337: ARRAY
37338: GREATEREQUAL
37339: AND
37340: IFFALSE 37366
37342: PUSH
37343: LD_VAR 0 9
37347: PPUSH
37348: LD_INT 3
37350: PPUSH
37351: CALL_OW 275
37355: PUSH
37356: LD_VAR 0 14
37360: PUSH
37361: LD_INT 3
37363: ARRAY
37364: GREATEREQUAL
37365: AND
37366: IFFALSE 37378
// result := weapon ;
37368: LD_ADDR_VAR 0 3
37372: PUSH
37373: LD_VAR 0 18
37377: ST_TO_ADDR
// end ; end ;
37378: LD_VAR 0 3
37382: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37383: LD_INT 0
37385: PPUSH
37386: PPUSH
// result := true ;
37387: LD_ADDR_VAR 0 3
37391: PUSH
37392: LD_INT 1
37394: ST_TO_ADDR
// if array1 = array2 then
37395: LD_VAR 0 1
37399: PUSH
37400: LD_VAR 0 2
37404: EQUAL
37405: IFFALSE 37465
// begin for i = 1 to array1 do
37407: LD_ADDR_VAR 0 4
37411: PUSH
37412: DOUBLE
37413: LD_INT 1
37415: DEC
37416: ST_TO_ADDR
37417: LD_VAR 0 1
37421: PUSH
37422: FOR_TO
37423: IFFALSE 37461
// if array1 [ i ] <> array2 [ i ] then
37425: LD_VAR 0 1
37429: PUSH
37430: LD_VAR 0 4
37434: ARRAY
37435: PUSH
37436: LD_VAR 0 2
37440: PUSH
37441: LD_VAR 0 4
37445: ARRAY
37446: NONEQUAL
37447: IFFALSE 37459
// begin result := false ;
37449: LD_ADDR_VAR 0 3
37453: PUSH
37454: LD_INT 0
37456: ST_TO_ADDR
// break ;
37457: GO 37461
// end ;
37459: GO 37422
37461: POP
37462: POP
// end else
37463: GO 37473
// result := false ;
37465: LD_ADDR_VAR 0 3
37469: PUSH
37470: LD_INT 0
37472: ST_TO_ADDR
// end ;
37473: LD_VAR 0 3
37477: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37478: LD_INT 0
37480: PPUSH
37481: PPUSH
// if not array1 or not array2 then
37482: LD_VAR 0 1
37486: NOT
37487: IFTRUE 37496
37489: PUSH
37490: LD_VAR 0 2
37494: NOT
37495: OR
37496: IFFALSE 37500
// exit ;
37498: GO 37564
// result := true ;
37500: LD_ADDR_VAR 0 3
37504: PUSH
37505: LD_INT 1
37507: ST_TO_ADDR
// for i = 1 to array1 do
37508: LD_ADDR_VAR 0 4
37512: PUSH
37513: DOUBLE
37514: LD_INT 1
37516: DEC
37517: ST_TO_ADDR
37518: LD_VAR 0 1
37522: PUSH
37523: FOR_TO
37524: IFFALSE 37562
// if array1 [ i ] <> array2 [ i ] then
37526: LD_VAR 0 1
37530: PUSH
37531: LD_VAR 0 4
37535: ARRAY
37536: PUSH
37537: LD_VAR 0 2
37541: PUSH
37542: LD_VAR 0 4
37546: ARRAY
37547: NONEQUAL
37548: IFFALSE 37560
// begin result := false ;
37550: LD_ADDR_VAR 0 3
37554: PUSH
37555: LD_INT 0
37557: ST_TO_ADDR
// break ;
37558: GO 37562
// end ;
37560: GO 37523
37562: POP
37563: POP
// end ;
37564: LD_VAR 0 3
37568: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37569: LD_INT 0
37571: PPUSH
37572: PPUSH
37573: PPUSH
// pom := GetBase ( fac ) ;
37574: LD_ADDR_VAR 0 5
37578: PUSH
37579: LD_VAR 0 1
37583: PPUSH
37584: CALL_OW 274
37588: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37589: LD_ADDR_VAR 0 4
37593: PUSH
37594: LD_VAR 0 2
37598: PUSH
37599: LD_INT 1
37601: ARRAY
37602: PPUSH
37603: LD_VAR 0 2
37607: PUSH
37608: LD_INT 2
37610: ARRAY
37611: PPUSH
37612: LD_VAR 0 2
37616: PUSH
37617: LD_INT 3
37619: ARRAY
37620: PPUSH
37621: LD_VAR 0 2
37625: PUSH
37626: LD_INT 4
37628: ARRAY
37629: PPUSH
37630: CALL_OW 449
37634: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37635: LD_ADDR_VAR 0 3
37639: PUSH
37640: LD_VAR 0 5
37644: PPUSH
37645: LD_INT 1
37647: PPUSH
37648: CALL_OW 275
37652: PUSH
37653: LD_VAR 0 4
37657: PUSH
37658: LD_INT 1
37660: ARRAY
37661: GREATEREQUAL
37662: IFFALSE 37688
37664: PUSH
37665: LD_VAR 0 5
37669: PPUSH
37670: LD_INT 2
37672: PPUSH
37673: CALL_OW 275
37677: PUSH
37678: LD_VAR 0 4
37682: PUSH
37683: LD_INT 2
37685: ARRAY
37686: GREATEREQUAL
37687: AND
37688: IFFALSE 37714
37690: PUSH
37691: LD_VAR 0 5
37695: PPUSH
37696: LD_INT 3
37698: PPUSH
37699: CALL_OW 275
37703: PUSH
37704: LD_VAR 0 4
37708: PUSH
37709: LD_INT 3
37711: ARRAY
37712: GREATEREQUAL
37713: AND
37714: ST_TO_ADDR
// end ;
37715: LD_VAR 0 3
37719: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37720: LD_INT 0
37722: PPUSH
37723: PPUSH
37724: PPUSH
37725: PPUSH
// pom := GetBase ( building ) ;
37726: LD_ADDR_VAR 0 3
37730: PUSH
37731: LD_VAR 0 1
37735: PPUSH
37736: CALL_OW 274
37740: ST_TO_ADDR
// if not pom then
37741: LD_VAR 0 3
37745: NOT
37746: IFFALSE 37750
// exit ;
37748: GO 37924
// btype := GetBType ( building ) ;
37750: LD_ADDR_VAR 0 5
37754: PUSH
37755: LD_VAR 0 1
37759: PPUSH
37760: CALL_OW 266
37764: ST_TO_ADDR
// if btype = b_armoury then
37765: LD_VAR 0 5
37769: PUSH
37770: LD_INT 4
37772: EQUAL
37773: IFFALSE 37783
// btype := b_barracks ;
37775: LD_ADDR_VAR 0 5
37779: PUSH
37780: LD_INT 5
37782: ST_TO_ADDR
// if btype = b_depot then
37783: LD_VAR 0 5
37787: PUSH
37788: LD_INT 0
37790: EQUAL
37791: IFFALSE 37801
// btype := b_warehouse ;
37793: LD_ADDR_VAR 0 5
37797: PUSH
37798: LD_INT 1
37800: ST_TO_ADDR
// if btype = b_workshop then
37801: LD_VAR 0 5
37805: PUSH
37806: LD_INT 2
37808: EQUAL
37809: IFFALSE 37819
// btype := b_factory ;
37811: LD_ADDR_VAR 0 5
37815: PUSH
37816: LD_INT 3
37818: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37819: LD_ADDR_VAR 0 4
37823: PUSH
37824: LD_VAR 0 5
37828: PPUSH
37829: LD_VAR 0 1
37833: PPUSH
37834: CALL_OW 248
37838: PPUSH
37839: CALL_OW 450
37843: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37844: LD_ADDR_VAR 0 2
37848: PUSH
37849: LD_VAR 0 3
37853: PPUSH
37854: LD_INT 1
37856: PPUSH
37857: CALL_OW 275
37861: PUSH
37862: LD_VAR 0 4
37866: PUSH
37867: LD_INT 1
37869: ARRAY
37870: GREATEREQUAL
37871: IFFALSE 37897
37873: PUSH
37874: LD_VAR 0 3
37878: PPUSH
37879: LD_INT 2
37881: PPUSH
37882: CALL_OW 275
37886: PUSH
37887: LD_VAR 0 4
37891: PUSH
37892: LD_INT 2
37894: ARRAY
37895: GREATEREQUAL
37896: AND
37897: IFFALSE 37923
37899: PUSH
37900: LD_VAR 0 3
37904: PPUSH
37905: LD_INT 3
37907: PPUSH
37908: CALL_OW 275
37912: PUSH
37913: LD_VAR 0 4
37917: PUSH
37918: LD_INT 3
37920: ARRAY
37921: GREATEREQUAL
37922: AND
37923: ST_TO_ADDR
// end ;
37924: LD_VAR 0 2
37928: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37929: LD_INT 0
37931: PPUSH
37932: PPUSH
37933: PPUSH
// pom := GetBase ( building ) ;
37934: LD_ADDR_VAR 0 4
37938: PUSH
37939: LD_VAR 0 1
37943: PPUSH
37944: CALL_OW 274
37948: ST_TO_ADDR
// if not pom then
37949: LD_VAR 0 4
37953: NOT
37954: IFFALSE 37958
// exit ;
37956: GO 38063
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37958: LD_ADDR_VAR 0 5
37962: PUSH
37963: LD_VAR 0 2
37967: PPUSH
37968: LD_VAR 0 1
37972: PPUSH
37973: CALL_OW 248
37977: PPUSH
37978: CALL_OW 450
37982: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37983: LD_ADDR_VAR 0 3
37987: PUSH
37988: LD_VAR 0 4
37992: PPUSH
37993: LD_INT 1
37995: PPUSH
37996: CALL_OW 275
38000: PUSH
38001: LD_VAR 0 5
38005: PUSH
38006: LD_INT 1
38008: ARRAY
38009: GREATEREQUAL
38010: IFFALSE 38036
38012: PUSH
38013: LD_VAR 0 4
38017: PPUSH
38018: LD_INT 2
38020: PPUSH
38021: CALL_OW 275
38025: PUSH
38026: LD_VAR 0 5
38030: PUSH
38031: LD_INT 2
38033: ARRAY
38034: GREATEREQUAL
38035: AND
38036: IFFALSE 38062
38038: PUSH
38039: LD_VAR 0 4
38043: PPUSH
38044: LD_INT 3
38046: PPUSH
38047: CALL_OW 275
38051: PUSH
38052: LD_VAR 0 5
38056: PUSH
38057: LD_INT 3
38059: ARRAY
38060: GREATEREQUAL
38061: AND
38062: ST_TO_ADDR
// end ;
38063: LD_VAR 0 3
38067: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38068: LD_INT 0
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
38074: PPUSH
38075: PPUSH
38076: PPUSH
38077: PPUSH
38078: PPUSH
38079: PPUSH
38080: PPUSH
// result := false ;
38081: LD_ADDR_VAR 0 8
38085: PUSH
38086: LD_INT 0
38088: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38089: LD_VAR 0 5
38093: NOT
38094: IFTRUE 38103
38096: PUSH
38097: LD_VAR 0 1
38101: NOT
38102: OR
38103: IFTRUE 38112
38105: PUSH
38106: LD_VAR 0 2
38110: NOT
38111: OR
38112: IFTRUE 38121
38114: PUSH
38115: LD_VAR 0 3
38119: NOT
38120: OR
38121: IFFALSE 38125
// exit ;
38123: GO 38951
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38125: LD_ADDR_VAR 0 14
38129: PUSH
38130: LD_VAR 0 1
38134: PPUSH
38135: LD_VAR 0 2
38139: PPUSH
38140: LD_VAR 0 3
38144: PPUSH
38145: LD_VAR 0 4
38149: PPUSH
38150: LD_VAR 0 5
38154: PUSH
38155: LD_INT 1
38157: ARRAY
38158: PPUSH
38159: CALL_OW 248
38163: PPUSH
38164: LD_INT 0
38166: PPUSH
38167: CALL 40232 0 6
38171: ST_TO_ADDR
// if not hexes then
38172: LD_VAR 0 14
38176: NOT
38177: IFFALSE 38181
// exit ;
38179: GO 38951
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38181: LD_ADDR_VAR 0 17
38185: PUSH
38186: LD_VAR 0 5
38190: PPUSH
38191: LD_INT 22
38193: PUSH
38194: LD_VAR 0 13
38198: PPUSH
38199: CALL_OW 255
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 2
38210: PUSH
38211: LD_INT 30
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 30
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PPUSH
38240: CALL_OW 72
38244: ST_TO_ADDR
// for i = 1 to hexes do
38245: LD_ADDR_VAR 0 9
38249: PUSH
38250: DOUBLE
38251: LD_INT 1
38253: DEC
38254: ST_TO_ADDR
38255: LD_VAR 0 14
38259: PUSH
38260: FOR_TO
38261: IFFALSE 38949
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38263: LD_ADDR_VAR 0 13
38267: PUSH
38268: LD_VAR 0 14
38272: PUSH
38273: LD_VAR 0 9
38277: ARRAY
38278: PUSH
38279: LD_INT 1
38281: ARRAY
38282: PPUSH
38283: LD_VAR 0 14
38287: PUSH
38288: LD_VAR 0 9
38292: ARRAY
38293: PUSH
38294: LD_INT 2
38296: ARRAY
38297: PPUSH
38298: CALL_OW 428
38302: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38303: LD_VAR 0 14
38307: PUSH
38308: LD_VAR 0 9
38312: ARRAY
38313: PUSH
38314: LD_INT 1
38316: ARRAY
38317: PPUSH
38318: LD_VAR 0 14
38322: PUSH
38323: LD_VAR 0 9
38327: ARRAY
38328: PUSH
38329: LD_INT 2
38331: ARRAY
38332: PPUSH
38333: CALL_OW 351
38337: IFTRUE 38376
38339: PUSH
38340: LD_VAR 0 14
38344: PUSH
38345: LD_VAR 0 9
38349: ARRAY
38350: PUSH
38351: LD_INT 1
38353: ARRAY
38354: PPUSH
38355: LD_VAR 0 14
38359: PUSH
38360: LD_VAR 0 9
38364: ARRAY
38365: PUSH
38366: LD_INT 2
38368: ARRAY
38369: PPUSH
38370: CALL_OW 488
38374: NOT
38375: OR
38376: IFTRUE 38393
38378: PUSH
38379: LD_VAR 0 13
38383: PPUSH
38384: CALL_OW 247
38388: PUSH
38389: LD_INT 3
38391: EQUAL
38392: OR
38393: IFFALSE 38399
// exit ;
38395: POP
38396: POP
38397: GO 38951
// if not tmp then
38399: LD_VAR 0 13
38403: NOT
38404: IFFALSE 38408
// continue ;
38406: GO 38260
// result := true ;
38408: LD_ADDR_VAR 0 8
38412: PUSH
38413: LD_INT 1
38415: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38416: LD_VAR 0 6
38420: IFFALSE 38437
38422: PUSH
38423: LD_VAR 0 13
38427: PPUSH
38428: CALL_OW 247
38432: PUSH
38433: LD_INT 2
38435: EQUAL
38436: AND
38437: IFFALSE 38454
38439: PUSH
38440: LD_VAR 0 13
38444: PPUSH
38445: CALL_OW 263
38449: PUSH
38450: LD_INT 1
38452: EQUAL
38453: AND
38454: IFFALSE 38618
// begin if IsDrivenBy ( tmp ) then
38456: LD_VAR 0 13
38460: PPUSH
38461: CALL_OW 311
38465: IFFALSE 38469
// continue ;
38467: GO 38260
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38469: LD_VAR 0 6
38473: PPUSH
38474: LD_INT 3
38476: PUSH
38477: LD_INT 60
38479: PUSH
38480: EMPTY
38481: LIST
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 3
38489: PUSH
38490: LD_INT 55
38492: PUSH
38493: EMPTY
38494: LIST
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PPUSH
38504: CALL_OW 72
38508: IFFALSE 38616
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38510: LD_ADDR_VAR 0 18
38514: PUSH
38515: LD_VAR 0 6
38519: PPUSH
38520: LD_INT 3
38522: PUSH
38523: LD_INT 60
38525: PUSH
38526: EMPTY
38527: LIST
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 3
38535: PUSH
38536: LD_INT 55
38538: PUSH
38539: EMPTY
38540: LIST
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PPUSH
38550: CALL_OW 72
38554: PUSH
38555: LD_INT 1
38557: ARRAY
38558: ST_TO_ADDR
// if IsInUnit ( driver ) then
38559: LD_VAR 0 18
38563: PPUSH
38564: CALL_OW 310
38568: IFFALSE 38579
// ComExit ( driver ) ;
38570: LD_VAR 0 18
38574: PPUSH
38575: CALL 64222 0 1
// AddComEnterUnit ( driver , tmp ) ;
38579: LD_VAR 0 18
38583: PPUSH
38584: LD_VAR 0 13
38588: PPUSH
38589: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38593: LD_VAR 0 18
38597: PPUSH
38598: LD_VAR 0 7
38602: PPUSH
38603: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38607: LD_VAR 0 18
38611: PPUSH
38612: CALL_OW 181
// end ; continue ;
38616: GO 38260
// end ; if not cleaners or not tmp in cleaners then
38618: LD_VAR 0 6
38622: NOT
38623: IFTRUE 38638
38625: PUSH
38626: LD_VAR 0 13
38630: PUSH
38631: LD_VAR 0 6
38635: IN
38636: NOT
38637: OR
38638: IFFALSE 38947
// begin if dep then
38640: LD_VAR 0 17
38644: IFFALSE 38780
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38646: LD_ADDR_VAR 0 16
38650: PUSH
38651: LD_VAR 0 17
38655: PUSH
38656: LD_INT 1
38658: ARRAY
38659: PPUSH
38660: CALL_OW 250
38664: PPUSH
38665: LD_VAR 0 17
38669: PUSH
38670: LD_INT 1
38672: ARRAY
38673: PPUSH
38674: CALL_OW 254
38678: PPUSH
38679: LD_INT 5
38681: PPUSH
38682: CALL_OW 272
38686: PUSH
38687: LD_VAR 0 17
38691: PUSH
38692: LD_INT 1
38694: ARRAY
38695: PPUSH
38696: CALL_OW 251
38700: PPUSH
38701: LD_VAR 0 17
38705: PUSH
38706: LD_INT 1
38708: ARRAY
38709: PPUSH
38710: CALL_OW 254
38714: PPUSH
38715: LD_INT 5
38717: PPUSH
38718: CALL_OW 273
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38727: LD_VAR 0 16
38731: PUSH
38732: LD_INT 1
38734: ARRAY
38735: PPUSH
38736: LD_VAR 0 16
38740: PUSH
38741: LD_INT 2
38743: ARRAY
38744: PPUSH
38745: CALL_OW 488
38749: IFFALSE 38780
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38751: LD_VAR 0 13
38755: PPUSH
38756: LD_VAR 0 16
38760: PUSH
38761: LD_INT 1
38763: ARRAY
38764: PPUSH
38765: LD_VAR 0 16
38769: PUSH
38770: LD_INT 2
38772: ARRAY
38773: PPUSH
38774: CALL_OW 111
// continue ;
38778: GO 38260
// end ; end ; r := GetDir ( tmp ) ;
38780: LD_ADDR_VAR 0 15
38784: PUSH
38785: LD_VAR 0 13
38789: PPUSH
38790: CALL_OW 254
38794: ST_TO_ADDR
// if r = 5 then
38795: LD_VAR 0 15
38799: PUSH
38800: LD_INT 5
38802: EQUAL
38803: IFFALSE 38813
// r := 0 ;
38805: LD_ADDR_VAR 0 15
38809: PUSH
38810: LD_INT 0
38812: ST_TO_ADDR
// for j = r to 5 do
38813: LD_ADDR_VAR 0 10
38817: PUSH
38818: DOUBLE
38819: LD_VAR 0 15
38823: DEC
38824: ST_TO_ADDR
38825: LD_INT 5
38827: PUSH
38828: FOR_TO
38829: IFFALSE 38945
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38831: LD_ADDR_VAR 0 11
38835: PUSH
38836: LD_VAR 0 13
38840: PPUSH
38841: CALL_OW 250
38845: PPUSH
38846: LD_VAR 0 10
38850: PPUSH
38851: LD_INT 2
38853: PPUSH
38854: CALL_OW 272
38858: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38859: LD_ADDR_VAR 0 12
38863: PUSH
38864: LD_VAR 0 13
38868: PPUSH
38869: CALL_OW 251
38873: PPUSH
38874: LD_VAR 0 10
38878: PPUSH
38879: LD_INT 2
38881: PPUSH
38882: CALL_OW 273
38886: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38887: LD_VAR 0 11
38891: PPUSH
38892: LD_VAR 0 12
38896: PPUSH
38897: CALL_OW 488
38901: IFFALSE 38920
38903: PUSH
38904: LD_VAR 0 11
38908: PPUSH
38909: LD_VAR 0 12
38913: PPUSH
38914: CALL_OW 428
38918: NOT
38919: AND
38920: IFFALSE 38943
// begin ComMoveXY ( tmp , _x , _y ) ;
38922: LD_VAR 0 13
38926: PPUSH
38927: LD_VAR 0 11
38931: PPUSH
38932: LD_VAR 0 12
38936: PPUSH
38937: CALL_OW 111
// break ;
38941: GO 38945
// end ; end ;
38943: GO 38828
38945: POP
38946: POP
// end ; end ;
38947: GO 38260
38949: POP
38950: POP
// end ;
38951: LD_VAR 0 8
38955: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38956: LD_INT 0
38958: PPUSH
// result := true ;
38959: LD_ADDR_VAR 0 3
38963: PUSH
38964: LD_INT 1
38966: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38967: LD_VAR 0 2
38971: PUSH
38972: LD_INT 24
38974: DOUBLE
38975: EQUAL
38976: IFTRUE 38986
38978: LD_INT 33
38980: DOUBLE
38981: EQUAL
38982: IFTRUE 38986
38984: GO 39011
38986: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38987: LD_ADDR_VAR 0 3
38991: PUSH
38992: LD_INT 32
38994: PPUSH
38995: LD_VAR 0 1
38999: PPUSH
39000: CALL_OW 321
39004: PUSH
39005: LD_INT 2
39007: EQUAL
39008: ST_TO_ADDR
39009: GO 39327
39011: LD_INT 20
39013: DOUBLE
39014: EQUAL
39015: IFTRUE 39019
39017: GO 39044
39019: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39020: LD_ADDR_VAR 0 3
39024: PUSH
39025: LD_INT 6
39027: PPUSH
39028: LD_VAR 0 1
39032: PPUSH
39033: CALL_OW 321
39037: PUSH
39038: LD_INT 2
39040: EQUAL
39041: ST_TO_ADDR
39042: GO 39327
39044: LD_INT 22
39046: DOUBLE
39047: EQUAL
39048: IFTRUE 39058
39050: LD_INT 36
39052: DOUBLE
39053: EQUAL
39054: IFTRUE 39058
39056: GO 39083
39058: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39059: LD_ADDR_VAR 0 3
39063: PUSH
39064: LD_INT 15
39066: PPUSH
39067: LD_VAR 0 1
39071: PPUSH
39072: CALL_OW 321
39076: PUSH
39077: LD_INT 2
39079: EQUAL
39080: ST_TO_ADDR
39081: GO 39327
39083: LD_INT 30
39085: DOUBLE
39086: EQUAL
39087: IFTRUE 39091
39089: GO 39116
39091: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39092: LD_ADDR_VAR 0 3
39096: PUSH
39097: LD_INT 20
39099: PPUSH
39100: LD_VAR 0 1
39104: PPUSH
39105: CALL_OW 321
39109: PUSH
39110: LD_INT 2
39112: EQUAL
39113: ST_TO_ADDR
39114: GO 39327
39116: LD_INT 28
39118: DOUBLE
39119: EQUAL
39120: IFTRUE 39130
39122: LD_INT 21
39124: DOUBLE
39125: EQUAL
39126: IFTRUE 39130
39128: GO 39155
39130: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39131: LD_ADDR_VAR 0 3
39135: PUSH
39136: LD_INT 21
39138: PPUSH
39139: LD_VAR 0 1
39143: PPUSH
39144: CALL_OW 321
39148: PUSH
39149: LD_INT 2
39151: EQUAL
39152: ST_TO_ADDR
39153: GO 39327
39155: LD_INT 16
39157: DOUBLE
39158: EQUAL
39159: IFTRUE 39163
39161: GO 39188
39163: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39164: LD_ADDR_VAR 0 3
39168: PUSH
39169: LD_INT 84
39171: PPUSH
39172: LD_VAR 0 1
39176: PPUSH
39177: CALL_OW 321
39181: PUSH
39182: LD_INT 2
39184: EQUAL
39185: ST_TO_ADDR
39186: GO 39327
39188: LD_INT 19
39190: DOUBLE
39191: EQUAL
39192: IFTRUE 39202
39194: LD_INT 23
39196: DOUBLE
39197: EQUAL
39198: IFTRUE 39202
39200: GO 39227
39202: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39203: LD_ADDR_VAR 0 3
39207: PUSH
39208: LD_INT 83
39210: PPUSH
39211: LD_VAR 0 1
39215: PPUSH
39216: CALL_OW 321
39220: PUSH
39221: LD_INT 2
39223: EQUAL
39224: ST_TO_ADDR
39225: GO 39327
39227: LD_INT 17
39229: DOUBLE
39230: EQUAL
39231: IFTRUE 39235
39233: GO 39260
39235: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39236: LD_ADDR_VAR 0 3
39240: PUSH
39241: LD_INT 39
39243: PPUSH
39244: LD_VAR 0 1
39248: PPUSH
39249: CALL_OW 321
39253: PUSH
39254: LD_INT 2
39256: EQUAL
39257: ST_TO_ADDR
39258: GO 39327
39260: LD_INT 18
39262: DOUBLE
39263: EQUAL
39264: IFTRUE 39268
39266: GO 39293
39268: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39269: LD_ADDR_VAR 0 3
39273: PUSH
39274: LD_INT 40
39276: PPUSH
39277: LD_VAR 0 1
39281: PPUSH
39282: CALL_OW 321
39286: PUSH
39287: LD_INT 2
39289: EQUAL
39290: ST_TO_ADDR
39291: GO 39327
39293: LD_INT 27
39295: DOUBLE
39296: EQUAL
39297: IFTRUE 39301
39299: GO 39326
39301: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39302: LD_ADDR_VAR 0 3
39306: PUSH
39307: LD_INT 35
39309: PPUSH
39310: LD_VAR 0 1
39314: PPUSH
39315: CALL_OW 321
39319: PUSH
39320: LD_INT 2
39322: EQUAL
39323: ST_TO_ADDR
39324: GO 39327
39326: POP
// end ;
39327: LD_VAR 0 3
39331: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39332: LD_INT 0
39334: PPUSH
39335: PPUSH
39336: PPUSH
39337: PPUSH
39338: PPUSH
39339: PPUSH
39340: PPUSH
39341: PPUSH
39342: PPUSH
39343: PPUSH
39344: PPUSH
// result := false ;
39345: LD_ADDR_VAR 0 6
39349: PUSH
39350: LD_INT 0
39352: ST_TO_ADDR
// if btype = b_depot then
39353: LD_VAR 0 2
39357: PUSH
39358: LD_INT 0
39360: EQUAL
39361: IFFALSE 39373
// begin result := true ;
39363: LD_ADDR_VAR 0 6
39367: PUSH
39368: LD_INT 1
39370: ST_TO_ADDR
// exit ;
39371: GO 40227
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39373: LD_VAR 0 1
39377: NOT
39378: IFTRUE 39403
39380: PUSH
39381: LD_VAR 0 1
39385: PPUSH
39386: CALL_OW 266
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: LD_INT 1
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: IN
39401: NOT
39402: OR
39403: IFTRUE 39412
39405: PUSH
39406: LD_VAR 0 2
39410: NOT
39411: OR
39412: IFTRUE 39448
39414: PUSH
39415: LD_VAR 0 5
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: LD_INT 3
39431: PUSH
39432: LD_INT 4
39434: PUSH
39435: LD_INT 5
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: IN
39446: NOT
39447: OR
39448: IFTRUE 39467
39450: PUSH
39451: LD_VAR 0 3
39455: PPUSH
39456: LD_VAR 0 4
39460: PPUSH
39461: CALL_OW 488
39465: NOT
39466: OR
39467: IFFALSE 39471
// exit ;
39469: GO 40227
// side := GetSide ( depot ) ;
39471: LD_ADDR_VAR 0 9
39475: PUSH
39476: LD_VAR 0 1
39480: PPUSH
39481: CALL_OW 255
39485: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39486: LD_VAR 0 9
39490: PPUSH
39491: LD_VAR 0 2
39495: PPUSH
39496: CALL 38956 0 2
39500: NOT
39501: IFFALSE 39505
// exit ;
39503: GO 40227
// pom := GetBase ( depot ) ;
39505: LD_ADDR_VAR 0 10
39509: PUSH
39510: LD_VAR 0 1
39514: PPUSH
39515: CALL_OW 274
39519: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39520: LD_ADDR_VAR 0 11
39524: PUSH
39525: LD_VAR 0 2
39529: PPUSH
39530: LD_VAR 0 1
39534: PPUSH
39535: CALL_OW 248
39539: PPUSH
39540: CALL_OW 450
39544: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39545: LD_VAR 0 10
39549: PPUSH
39550: LD_INT 1
39552: PPUSH
39553: CALL_OW 275
39557: PUSH
39558: LD_VAR 0 11
39562: PUSH
39563: LD_INT 1
39565: ARRAY
39566: GREATEREQUAL
39567: IFFALSE 39593
39569: PUSH
39570: LD_VAR 0 10
39574: PPUSH
39575: LD_INT 2
39577: PPUSH
39578: CALL_OW 275
39582: PUSH
39583: LD_VAR 0 11
39587: PUSH
39588: LD_INT 2
39590: ARRAY
39591: GREATEREQUAL
39592: AND
39593: IFFALSE 39619
39595: PUSH
39596: LD_VAR 0 10
39600: PPUSH
39601: LD_INT 3
39603: PPUSH
39604: CALL_OW 275
39608: PUSH
39609: LD_VAR 0 11
39613: PUSH
39614: LD_INT 3
39616: ARRAY
39617: GREATEREQUAL
39618: AND
39619: NOT
39620: IFFALSE 39624
// exit ;
39622: GO 40227
// if GetBType ( depot ) = b_depot then
39624: LD_VAR 0 1
39628: PPUSH
39629: CALL_OW 266
39633: PUSH
39634: LD_INT 0
39636: EQUAL
39637: IFFALSE 39649
// dist := 28 else
39639: LD_ADDR_VAR 0 14
39643: PUSH
39644: LD_INT 28
39646: ST_TO_ADDR
39647: GO 39657
// dist := 36 ;
39649: LD_ADDR_VAR 0 14
39653: PUSH
39654: LD_INT 36
39656: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39657: LD_VAR 0 1
39661: PPUSH
39662: LD_VAR 0 3
39666: PPUSH
39667: LD_VAR 0 4
39671: PPUSH
39672: CALL_OW 297
39676: PUSH
39677: LD_VAR 0 14
39681: GREATER
39682: IFFALSE 39686
// exit ;
39684: GO 40227
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39686: LD_ADDR_VAR 0 12
39690: PUSH
39691: LD_VAR 0 2
39695: PPUSH
39696: LD_VAR 0 3
39700: PPUSH
39701: LD_VAR 0 4
39705: PPUSH
39706: LD_VAR 0 5
39710: PPUSH
39711: LD_VAR 0 1
39715: PPUSH
39716: CALL_OW 248
39720: PPUSH
39721: LD_INT 0
39723: PPUSH
39724: CALL 40232 0 6
39728: ST_TO_ADDR
// if not hexes then
39729: LD_VAR 0 12
39733: NOT
39734: IFFALSE 39738
// exit ;
39736: GO 40227
// hex := GetHexInfo ( x , y ) ;
39738: LD_ADDR_VAR 0 15
39742: PUSH
39743: LD_VAR 0 3
39747: PPUSH
39748: LD_VAR 0 4
39752: PPUSH
39753: CALL_OW 546
39757: ST_TO_ADDR
// if hex [ 1 ] then
39758: LD_VAR 0 15
39762: PUSH
39763: LD_INT 1
39765: ARRAY
39766: IFFALSE 39770
// exit ;
39768: GO 40227
// height := hex [ 2 ] ;
39770: LD_ADDR_VAR 0 13
39774: PUSH
39775: LD_VAR 0 15
39779: PUSH
39780: LD_INT 2
39782: ARRAY
39783: ST_TO_ADDR
// for i = 1 to hexes do
39784: LD_ADDR_VAR 0 7
39788: PUSH
39789: DOUBLE
39790: LD_INT 1
39792: DEC
39793: ST_TO_ADDR
39794: LD_VAR 0 12
39798: PUSH
39799: FOR_TO
39800: IFFALSE 40144
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39802: LD_VAR 0 12
39806: PUSH
39807: LD_VAR 0 7
39811: ARRAY
39812: PUSH
39813: LD_INT 1
39815: ARRAY
39816: PPUSH
39817: LD_VAR 0 12
39821: PUSH
39822: LD_VAR 0 7
39826: ARRAY
39827: PUSH
39828: LD_INT 2
39830: ARRAY
39831: PPUSH
39832: CALL_OW 488
39836: NOT
39837: IFTRUE 39879
39839: PUSH
39840: LD_VAR 0 12
39844: PUSH
39845: LD_VAR 0 7
39849: ARRAY
39850: PUSH
39851: LD_INT 1
39853: ARRAY
39854: PPUSH
39855: LD_VAR 0 12
39859: PUSH
39860: LD_VAR 0 7
39864: ARRAY
39865: PUSH
39866: LD_INT 2
39868: ARRAY
39869: PPUSH
39870: CALL_OW 428
39874: PUSH
39875: LD_INT 0
39877: GREATER
39878: OR
39879: IFTRUE 39917
39881: PUSH
39882: LD_VAR 0 12
39886: PUSH
39887: LD_VAR 0 7
39891: ARRAY
39892: PUSH
39893: LD_INT 1
39895: ARRAY
39896: PPUSH
39897: LD_VAR 0 12
39901: PUSH
39902: LD_VAR 0 7
39906: ARRAY
39907: PUSH
39908: LD_INT 2
39910: ARRAY
39911: PPUSH
39912: CALL_OW 351
39916: OR
39917: IFFALSE 39923
// exit ;
39919: POP
39920: POP
39921: GO 40227
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39923: LD_ADDR_VAR 0 8
39927: PUSH
39928: LD_VAR 0 12
39932: PUSH
39933: LD_VAR 0 7
39937: ARRAY
39938: PUSH
39939: LD_INT 1
39941: ARRAY
39942: PPUSH
39943: LD_VAR 0 12
39947: PUSH
39948: LD_VAR 0 7
39952: ARRAY
39953: PUSH
39954: LD_INT 2
39956: ARRAY
39957: PPUSH
39958: CALL_OW 546
39962: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39963: LD_VAR 0 8
39967: PUSH
39968: LD_INT 1
39970: ARRAY
39971: IFTRUE 39993
39973: PUSH
39974: LD_VAR 0 8
39978: PUSH
39979: LD_INT 2
39981: ARRAY
39982: PUSH
39983: LD_VAR 0 13
39987: PUSH
39988: LD_INT 2
39990: PLUS
39991: GREATER
39992: OR
39993: IFTRUE 40015
39995: PUSH
39996: LD_VAR 0 8
40000: PUSH
40001: LD_INT 2
40003: ARRAY
40004: PUSH
40005: LD_VAR 0 13
40009: PUSH
40010: LD_INT 2
40012: MINUS
40013: LESS
40014: OR
40015: IFTRUE 40083
40017: PUSH
40018: LD_VAR 0 8
40022: PUSH
40023: LD_INT 3
40025: ARRAY
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 8
40032: PUSH
40033: LD_INT 9
40035: PUSH
40036: LD_INT 10
40038: PUSH
40039: LD_INT 11
40041: PUSH
40042: LD_INT 12
40044: PUSH
40045: LD_INT 13
40047: PUSH
40048: LD_INT 16
40050: PUSH
40051: LD_INT 17
40053: PUSH
40054: LD_INT 18
40056: PUSH
40057: LD_INT 19
40059: PUSH
40060: LD_INT 20
40062: PUSH
40063: LD_INT 21
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: IN
40081: NOT
40082: OR
40083: IFTRUE 40096
40085: PUSH
40086: LD_VAR 0 8
40090: PUSH
40091: LD_INT 5
40093: ARRAY
40094: NOT
40095: OR
40096: IFTRUE 40136
40098: PUSH
40099: LD_VAR 0 8
40103: PUSH
40104: LD_INT 6
40106: ARRAY
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: LD_INT 2
40113: PUSH
40114: LD_INT 7
40116: PUSH
40117: LD_INT 9
40119: PUSH
40120: LD_INT 10
40122: PUSH
40123: LD_INT 11
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: IN
40134: NOT
40135: OR
40136: IFFALSE 40142
// exit ;
40138: POP
40139: POP
40140: GO 40227
// end ;
40142: GO 39799
40144: POP
40145: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40146: LD_VAR 0 9
40150: PPUSH
40151: LD_VAR 0 3
40155: PPUSH
40156: LD_VAR 0 4
40160: PPUSH
40161: LD_INT 20
40163: PPUSH
40164: CALL 32046 0 4
40168: PUSH
40169: LD_INT 4
40171: ARRAY
40172: IFFALSE 40176
// exit ;
40174: GO 40227
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40176: LD_VAR 0 2
40180: PUSH
40181: LD_INT 29
40183: PUSH
40184: LD_INT 30
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: IN
40191: IFFALSE 40215
40193: PUSH
40194: LD_VAR 0 3
40198: PPUSH
40199: LD_VAR 0 4
40203: PPUSH
40204: LD_VAR 0 9
40208: PPUSH
40209: CALL_OW 440
40213: NOT
40214: AND
40215: IFFALSE 40219
// exit ;
40217: GO 40227
// result := true ;
40219: LD_ADDR_VAR 0 6
40223: PUSH
40224: LD_INT 1
40226: ST_TO_ADDR
// end ;
40227: LD_VAR 0 6
40231: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40232: LD_INT 0
40234: PPUSH
40235: PPUSH
40236: PPUSH
40237: PPUSH
40238: PPUSH
40239: PPUSH
40240: PPUSH
40241: PPUSH
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
40246: PPUSH
40247: PPUSH
40248: PPUSH
40249: PPUSH
40250: PPUSH
40251: PPUSH
40252: PPUSH
40253: PPUSH
40254: PPUSH
40255: PPUSH
40256: PPUSH
40257: PPUSH
40258: PPUSH
40259: PPUSH
40260: PPUSH
40261: PPUSH
40262: PPUSH
40263: PPUSH
40264: PPUSH
40265: PPUSH
40266: PPUSH
40267: PPUSH
40268: PPUSH
40269: PPUSH
40270: PPUSH
40271: PPUSH
40272: PPUSH
40273: PPUSH
40274: PPUSH
40275: PPUSH
40276: PPUSH
40277: PPUSH
40278: PPUSH
40279: PPUSH
40280: PPUSH
40281: PPUSH
40282: PPUSH
40283: PPUSH
40284: PPUSH
40285: PPUSH
40286: PPUSH
40287: PPUSH
40288: PPUSH
40289: PPUSH
40290: PPUSH
40291: PPUSH
// result = [ ] ;
40292: LD_ADDR_VAR 0 7
40296: PUSH
40297: EMPTY
40298: ST_TO_ADDR
// temp_list = [ ] ;
40299: LD_ADDR_VAR 0 9
40303: PUSH
40304: EMPTY
40305: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40306: LD_VAR 0 4
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: LD_INT 1
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: LD_INT 3
40322: PUSH
40323: LD_INT 4
40325: PUSH
40326: LD_INT 5
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: IN
40337: NOT
40338: IFTRUE 40381
40340: PUSH
40341: LD_VAR 0 1
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: IN
40356: IFFALSE 40380
40358: PUSH
40359: LD_VAR 0 5
40363: PUSH
40364: LD_INT 1
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: LD_INT 3
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: LIST
40377: IN
40378: NOT
40379: AND
40380: OR
40381: IFFALSE 40385
// exit ;
40383: GO 58784
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40385: LD_VAR 0 1
40389: PUSH
40390: LD_INT 6
40392: PUSH
40393: LD_INT 7
40395: PUSH
40396: LD_INT 8
40398: PUSH
40399: LD_INT 13
40401: PUSH
40402: LD_INT 12
40404: PUSH
40405: LD_INT 15
40407: PUSH
40408: LD_INT 11
40410: PUSH
40411: LD_INT 14
40413: PUSH
40414: LD_INT 10
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: IN
40428: IFFALSE 40438
// btype = b_lab ;
40430: LD_ADDR_VAR 0 1
40434: PUSH
40435: LD_INT 6
40437: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40438: LD_VAR 0 6
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: LIST
40456: IN
40457: NOT
40458: IFTRUE 40526
40460: PUSH
40461: LD_VAR 0 1
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: LD_INT 2
40474: PUSH
40475: LD_INT 3
40477: PUSH
40478: LD_INT 6
40480: PUSH
40481: LD_INT 36
40483: PUSH
40484: LD_INT 4
40486: PUSH
40487: LD_INT 5
40489: PUSH
40490: LD_INT 31
40492: PUSH
40493: LD_INT 32
40495: PUSH
40496: LD_INT 33
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: IN
40512: NOT
40513: IFFALSE 40525
40515: PUSH
40516: LD_VAR 0 6
40520: PUSH
40521: LD_INT 1
40523: EQUAL
40524: AND
40525: OR
40526: IFTRUE 40558
40528: PUSH
40529: LD_VAR 0 1
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 3
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: IN
40544: NOT
40545: IFFALSE 40557
40547: PUSH
40548: LD_VAR 0 6
40552: PUSH
40553: LD_INT 2
40555: EQUAL
40556: AND
40557: OR
40558: IFFALSE 40568
// mode = 0 ;
40560: LD_ADDR_VAR 0 6
40564: PUSH
40565: LD_INT 0
40567: ST_TO_ADDR
// case mode of 0 :
40568: LD_VAR 0 6
40572: PUSH
40573: LD_INT 0
40575: DOUBLE
40576: EQUAL
40577: IFTRUE 40581
40579: GO 52034
40581: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40582: LD_ADDR_VAR 0 11
40586: PUSH
40587: LD_INT 0
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: PUSH
40642: LD_INT 0
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: LD_INT 2
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 3
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 3
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40775: LD_ADDR_VAR 0 12
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 2
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 2
40898: NEG
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: NEG
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 2
40921: NEG
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 3
40932: NEG
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 3
40943: NEG
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40971: LD_ADDR_VAR 0 13
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: LD_INT 1
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: LD_INT 1
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: LD_INT 0
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: LD_INT 2
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 2
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 2
41094: NEG
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: LD_INT 3
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 3
41130: NEG
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 3
41142: NEG
41143: PUSH
41144: LD_INT 3
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41170: LD_ADDR_VAR 0 14
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 2
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 2
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: LD_INT 3
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: LD_INT 3
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41366: LD_ADDR_VAR 0 15
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: LD_INT 1
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: LD_INT 1
41439: NEG
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 2
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 2
41489: NEG
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 2
41500: NEG
41501: PUSH
41502: LD_INT 1
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 2
41512: PUSH
41513: LD_INT 1
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 3
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 3
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41559: LD_ADDR_VAR 0 16
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 1
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: PUSH
41653: LD_INT 1
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: LD_INT 2
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: LD_INT 2
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 2
41682: NEG
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 2
41694: NEG
41695: PUSH
41696: LD_INT 2
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 3
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 3
41716: PUSH
41717: LD_INT 3
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: LD_INT 3
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41752: LD_ADDR_VAR 0 17
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: LD_INT 2
41837: NEG
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 2
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: LD_INT 2
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 2
41928: NEG
41929: PUSH
41930: LD_INT 0
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 2
41939: NEG
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: NEG
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41982: LD_ADDR_VAR 0 18
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: NEG
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: LD_INT 2
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 2
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: LD_INT 2
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: NEG
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 2
42158: NEG
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 2
42169: NEG
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 2
42181: NEG
42182: PUSH
42183: LD_INT 2
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42212: LD_ADDR_VAR 0 19
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: LD_INT 0
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: LD_INT 2
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: LD_INT 2
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 2
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 2
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: LD_INT 2
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 2
42388: NEG
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: NEG
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42442: LD_ADDR_VAR 0 20
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 2
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: LD_INT 2
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 2
42618: NEG
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42672: LD_ADDR_VAR 0 21
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: LD_INT 2
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 2
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 2
42848: NEG
42849: PUSH
42850: LD_INT 0
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 2
42859: NEG
42860: PUSH
42861: LD_INT 1
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: LD_INT 2
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42902: LD_ADDR_VAR 0 22
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: NEG
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 1
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: LD_INT 2
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: LD_INT 2
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: LD_INT 2
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 2
43078: NEG
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 2
43089: NEG
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 2
43101: NEG
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43132: LD_ADDR_VAR 0 23
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: LD_INT 2
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: LD_INT 2
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 2
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 0
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: LD_INT 3
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 3
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43412: LD_ADDR_VAR 0 24
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: LD_INT 0
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: LD_INT 2
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: LD_INT 2
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 2
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: LD_INT 1
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: LD_INT 2
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: LD_INT 2
43626: NEG
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 3
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 3
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43688: LD_ADDR_VAR 0 25
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: LD_INT 2
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 2
43864: NEG
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 2
43887: NEG
43888: PUSH
43889: LD_INT 2
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 3
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 3
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 2
43919: PUSH
43920: LD_INT 3
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: LD_INT 3
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43962: LD_ADDR_VAR 0 26
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 2
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 2
44149: NEG
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: LD_INT 3
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 3
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: NEG
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44238: LD_ADDR_VAR 0 27
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 2
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 3
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: NEG
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44518: LD_ADDR_VAR 0 28
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: LD_INT 2
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: LD_INT 2
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 2
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: NEG
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 2
44694: NEG
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: NEG
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: LD_INT 3
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: LD_INT 3
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 3
44753: NEG
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 3
44765: NEG
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44800: LD_ADDR_VAR 0 29
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 1
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 2
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 2
44966: NEG
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: NEG
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: LD_INT 3
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 3
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 3
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: LD_INT 2
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 3
45044: NEG
45045: PUSH
45046: LD_INT 2
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45079: LD_ADDR_VAR 0 30
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: LD_INT 1
45152: NEG
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: LD_INT 3
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 2
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 3
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: LD_INT 3
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 3
45322: NEG
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45357: LD_ADDR_VAR 0 31
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: LD_INT 1
45377: NEG
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: LD_INT 0
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: LD_INT 2
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 2
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: LD_INT 1
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: NEG
45535: PUSH
45536: LD_INT 2
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: LD_INT 3
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 3
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: LD_INT 3
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: LD_INT 2
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 3
45600: NEG
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45635: LD_ADDR_VAR 0 32
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: LD_INT 2
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 0
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: NEG
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 3
45828: NEG
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 3
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: LD_INT 3
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 2
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 3
45878: NEG
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45913: LD_ADDR_VAR 0 33
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 2
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: LD_INT 3
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: LD_INT 1
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 3
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: LD_INT 3
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 3
46157: NEG
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46192: LD_ADDR_VAR 0 34
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 2
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: LD_INT 2
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: LD_INT 3
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 3
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: LD_INT 3
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 3
46437: NEG
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46472: LD_ADDR_VAR 0 35
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: LD_INT 0
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46584: LD_ADDR_VAR 0 36
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46696: LD_ADDR_VAR 0 37
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46808: LD_ADDR_VAR 0 38
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 2
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46920: LD_ADDR_VAR 0 39
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: LD_INT 2
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47032: LD_ADDR_VAR 0 40
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47144: LD_ADDR_VAR 0 41
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 0
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 2
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: LD_INT 1
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 2
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: NEG
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: LD_INT 3
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 3
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 3
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 3
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 3
47387: PUSH
47388: LD_INT 3
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: LD_INT 3
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 3
47418: NEG
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 3
47429: NEG
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 3
47441: NEG
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 3
47453: NEG
47454: PUSH
47455: LD_INT 3
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47494: LD_ADDR_VAR 0 42
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 2
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: LD_INT 3
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 3
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: LD_INT 3
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 2
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 3
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 3
47740: PUSH
47741: LD_INT 3
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: LD_INT 3
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: LD_INT 3
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 3
47791: NEG
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 3
47803: NEG
47804: PUSH
47805: LD_INT 3
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47844: LD_ADDR_VAR 0 43
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 2
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: NEG
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 2
48021: NEG
48022: PUSH
48023: LD_INT 1
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: LD_INT 3
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 3
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 3
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 3
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 3
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 3
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 3
48140: NEG
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 3
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48192: LD_ADDR_VAR 0 44
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 2
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: LD_INT 2
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: NEG
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 2
48370: NEG
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: LD_INT 3
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 2
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 3
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 3
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 3
48425: PUSH
48426: LD_INT 2
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 3
48435: PUSH
48436: LD_INT 3
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: NEG
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 3
48466: NEG
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 3
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 3
48489: NEG
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 3
48501: NEG
48502: PUSH
48503: LD_INT 3
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48542: LD_ADDR_VAR 0 45
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: LD_INT 2
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: NEG
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: LD_INT 3
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 3
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 3
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 3
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 3
48788: PUSH
48789: LD_INT 3
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: LD_INT 3
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 3
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: LD_INT 3
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: LD_INT 2
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 3
48839: NEG
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 3
48851: NEG
48852: PUSH
48853: LD_INT 3
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48892: LD_ADDR_VAR 0 46
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: LD_INT 2
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 2
49069: NEG
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 3
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 3
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 2
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 2
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 3
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 3
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 3
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 3
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 3
49188: NEG
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 3
49199: NEG
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49240: LD_ADDR_VAR 0 47
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 2
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49391: LD_ADDR_VAR 0 48
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 1
49472: NEG
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49538: LD_ADDR_VAR 0 49
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: LD_INT 2
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49682: LD_ADDR_VAR 0 50
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: LD_INT 2
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 1
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: NEG
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49826: LD_ADDR_VAR 0 51
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49973: LD_ADDR_VAR 0 52
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 2
50088: NEG
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: NEG
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50124: LD_ADDR_VAR 0 53
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 2
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: NEG
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50354: LD_ADDR_VAR 0 54
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: NEG
50436: PUSH
50437: LD_INT 2
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 2
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: LD_INT 2
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: LD_INT 2
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 2
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 2
50530: NEG
50531: PUSH
50532: LD_INT 0
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50584: LD_ADDR_VAR 0 55
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: LD_INT 2
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: LD_INT 2
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 2
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: NEG
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: LD_INT 2
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50814: LD_ADDR_VAR 0 56
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 2
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: NEG
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: LD_INT 2
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51044: LD_ADDR_VAR 0 57
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: LD_INT 2
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 2
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: LD_INT 2
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51274: LD_ADDR_VAR 0 58
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 1
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 2
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: LD_INT 2
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 2
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51504: LD_ADDR_VAR 0 59
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51592: LD_ADDR_VAR 0 60
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51680: LD_ADDR_VAR 0 61
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 0
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: LD_INT 1
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51768: LD_ADDR_VAR 0 62
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 1
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51856: LD_ADDR_VAR 0 63
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51944: LD_ADDR_VAR 0 64
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: ST_TO_ADDR
// end ; 1 :
52032: GO 57929
52034: LD_INT 1
52036: DOUBLE
52037: EQUAL
52038: IFTRUE 52042
52040: GO 54665
52042: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52043: LD_ADDR_VAR 0 11
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: LD_INT 3
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: LD_INT 3
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 2
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: LIST
52086: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52087: LD_ADDR_VAR 0 12
52091: PUSH
52092: LD_INT 2
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 3
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 3
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: LIST
52127: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52128: LD_ADDR_VAR 0 13
52132: PUSH
52133: LD_INT 3
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: LD_INT 3
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: LD_INT 3
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: LIST
52167: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52168: LD_ADDR_VAR 0 14
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 3
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: LIST
52208: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52209: LD_ADDR_VAR 0 15
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 3
52227: NEG
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: LIST
52252: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52253: LD_ADDR_VAR 0 16
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: LD_INT 3
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 3
52284: NEG
52285: PUSH
52286: LD_INT 3
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52299: LD_ADDR_VAR 0 17
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: LD_INT 3
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 3
52321: NEG
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: LIST
52342: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52343: LD_ADDR_VAR 0 18
52347: PUSH
52348: LD_INT 2
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 3
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 3
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: LIST
52383: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52384: LD_ADDR_VAR 0 19
52388: PUSH
52389: LD_INT 3
52391: PUSH
52392: LD_INT 2
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 3
52401: PUSH
52402: LD_INT 3
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: LD_INT 3
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: LIST
52423: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52424: LD_ADDR_VAR 0 20
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 3
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 3
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 2
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: LIST
52464: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52465: LD_ADDR_VAR 0 21
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 3
52483: NEG
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 3
52494: NEG
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: LIST
52508: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52509: LD_ADDR_VAR 0 22
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: NEG
52529: PUSH
52530: LD_INT 2
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 3
52540: NEG
52541: PUSH
52542: LD_INT 3
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: LIST
52554: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52555: LD_ADDR_VAR 0 23
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 3
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: LD_INT 4
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 3
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52599: LD_ADDR_VAR 0 24
52603: PUSH
52604: LD_INT 3
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 3
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 4
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: LIST
52639: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52640: LD_ADDR_VAR 0 25
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: LD_INT 3
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 4
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: LD_INT 4
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: LIST
52679: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52680: LD_ADDR_VAR 0 26
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 3
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: LD_INT 4
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: LD_INT 3
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: LIST
52720: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52721: LD_ADDR_VAR 0 27
52725: PUSH
52726: LD_INT 3
52728: NEG
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 3
52739: NEG
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 4
52750: NEG
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: LIST
52764: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52765: LD_ADDR_VAR 0 28
52769: PUSH
52770: LD_INT 3
52772: NEG
52773: PUSH
52774: LD_INT 3
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 3
52784: NEG
52785: PUSH
52786: LD_INT 4
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 4
52796: NEG
52797: PUSH
52798: LD_INT 3
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: LIST
52810: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52811: LD_ADDR_VAR 0 29
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 3
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: LD_INT 3
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 4
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 4
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 3
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: LD_INT 5
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 5
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 4
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: LD_INT 6
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: LD_INT 6
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: LD_INT 5
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52966: LD_ADDR_VAR 0 30
52970: PUSH
52971: LD_INT 2
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 3
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 3
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 4
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 4
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 4
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 5
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 5
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 5
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 6
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 6
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53109: LD_ADDR_VAR 0 31
53113: PUSH
53114: LD_INT 3
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: LD_INT 3
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 2
53136: PUSH
53137: LD_INT 3
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 4
53146: PUSH
53147: LD_INT 3
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 4
53156: PUSH
53157: LD_INT 4
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: LD_INT 4
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 5
53176: PUSH
53177: LD_INT 4
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 5
53186: PUSH
53187: LD_INT 5
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 4
53196: PUSH
53197: LD_INT 5
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 6
53206: PUSH
53207: LD_INT 5
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 6
53216: PUSH
53217: LD_INT 6
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 5
53226: PUSH
53227: LD_INT 6
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53248: LD_ADDR_VAR 0 32
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 3
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 3
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 4
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 4
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 3
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: LD_INT 5
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 5
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: LD_INT 4
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: LD_INT 6
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: LD_INT 6
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: LD_INT 5
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53391: LD_ADDR_VAR 0 33
53395: PUSH
53396: LD_INT 2
53398: NEG
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 3
53409: NEG
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 3
53420: NEG
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 3
53432: NEG
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 4
53443: NEG
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 4
53454: NEG
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 4
53466: NEG
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 5
53477: NEG
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 5
53488: NEG
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 5
53500: NEG
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 6
53511: NEG
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 6
53522: NEG
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53546: LD_ADDR_VAR 0 34
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: LD_INT 3
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 3
53565: NEG
53566: PUSH
53567: LD_INT 2
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 3
53577: NEG
53578: PUSH
53579: LD_INT 3
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 3
53589: NEG
53590: PUSH
53591: LD_INT 4
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 4
53601: NEG
53602: PUSH
53603: LD_INT 3
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 4
53613: NEG
53614: PUSH
53615: LD_INT 4
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 4
53625: NEG
53626: PUSH
53627: LD_INT 5
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 5
53637: NEG
53638: PUSH
53639: LD_INT 4
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 5
53649: NEG
53650: PUSH
53651: LD_INT 5
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 5
53661: NEG
53662: PUSH
53663: LD_INT 6
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 6
53673: NEG
53674: PUSH
53675: LD_INT 5
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 6
53685: NEG
53686: PUSH
53687: LD_INT 6
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53709: LD_ADDR_VAR 0 41
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: LD_INT 2
53719: NEG
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: LD_INT 3
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: LD_INT 2
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: LIST
53752: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53753: LD_ADDR_VAR 0 42
53757: PUSH
53758: LD_INT 2
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 3
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: LIST
53793: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53794: LD_ADDR_VAR 0 43
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 3
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 2
53821: PUSH
53822: LD_INT 3
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: LIST
53833: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53834: LD_ADDR_VAR 0 44
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 3
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: LIST
53874: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53875: LD_ADDR_VAR 0 45
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 3
53904: NEG
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53919: LD_ADDR_VAR 0 46
53923: PUSH
53924: LD_INT 2
53926: NEG
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: NEG
53939: PUSH
53940: LD_INT 3
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 3
53950: NEG
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: LIST
53964: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53965: LD_ADDR_VAR 0 47
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: LD_INT 3
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53998: LD_ADDR_VAR 0 48
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54029: LD_ADDR_VAR 0 49
54033: PUSH
54034: LD_INT 3
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54058: LD_ADDR_VAR 0 50
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: LD_INT 3
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: LD_INT 3
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54087: LD_ADDR_VAR 0 51
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: NEG
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54118: LD_ADDR_VAR 0 52
54122: PUSH
54123: LD_INT 3
54125: NEG
54126: PUSH
54127: LD_INT 1
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 3
54137: NEG
54138: PUSH
54139: LD_INT 2
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54151: LD_ADDR_VAR 0 53
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: LD_INT 3
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 3
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: LIST
54194: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54195: LD_ADDR_VAR 0 54
54199: PUSH
54200: LD_INT 2
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 3
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 3
54223: PUSH
54224: LD_INT 1
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: LIST
54235: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54236: LD_ADDR_VAR 0 55
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: LD_INT 2
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: LD_INT 3
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: LD_INT 3
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: LIST
54275: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54276: LD_ADDR_VAR 0 56
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: LD_INT 3
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: LD_INT 3
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: LIST
54316: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54317: LD_ADDR_VAR 0 57
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 3
54335: NEG
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 3
54346: NEG
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54361: LD_ADDR_VAR 0 58
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: LD_INT 3
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 3
54380: NEG
54381: PUSH
54382: LD_INT 2
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 3
54392: NEG
54393: PUSH
54394: LD_INT 3
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54407: LD_ADDR_VAR 0 59
54411: PUSH
54412: LD_INT 1
54414: NEG
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: LIST
54450: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54451: LD_ADDR_VAR 0 60
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 1
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54492: LD_ADDR_VAR 0 61
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: LIST
54531: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54532: LD_ADDR_VAR 0 62
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: LIST
54572: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54573: LD_ADDR_VAR 0 63
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 2
54602: NEG
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: LIST
54616: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54617: LD_ADDR_VAR 0 64
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 2
54648: NEG
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: LIST
54662: ST_TO_ADDR
// end ; 2 :
54663: GO 57929
54665: LD_INT 2
54667: DOUBLE
54668: EQUAL
54669: IFTRUE 54673
54671: GO 57928
54673: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54674: LD_ADDR_VAR 0 29
54678: PUSH
54679: LD_INT 4
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 4
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 5
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 5
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 4
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 3
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 3
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 3
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 5
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 3
54774: PUSH
54775: LD_INT 3
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 3
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 4
54794: PUSH
54795: LD_INT 3
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 4
54804: PUSH
54805: LD_INT 4
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 3
54814: PUSH
54815: LD_INT 4
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: LD_INT 3
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 4
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 2
54854: PUSH
54855: LD_INT 4
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 4
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: LD_INT 3
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: LD_INT 4
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 5
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 5
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 4
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: LD_INT 3
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: PUSH
54937: LD_INT 5
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: LD_INT 3
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: LD_INT 1
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 3
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 4
55013: NEG
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 4
55024: NEG
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 4
55036: NEG
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 4
55059: NEG
55060: PUSH
55061: LD_INT 4
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 4
55071: NEG
55072: PUSH
55073: LD_INT 5
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 3
55083: NEG
55084: PUSH
55085: LD_INT 4
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 3
55095: NEG
55096: PUSH
55097: LD_INT 3
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 4
55107: NEG
55108: PUSH
55109: LD_INT 3
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 5
55119: NEG
55120: PUSH
55121: LD_INT 4
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 5
55131: NEG
55132: PUSH
55133: LD_INT 5
55135: NEG
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 3
55143: NEG
55144: PUSH
55145: LD_INT 5
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 5
55155: NEG
55156: PUSH
55157: LD_INT 3
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55212: LD_ADDR_VAR 0 30
55216: PUSH
55217: LD_INT 4
55219: PUSH
55220: LD_INT 4
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 4
55229: PUSH
55230: LD_INT 3
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 5
55239: PUSH
55240: LD_INT 4
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 5
55249: PUSH
55250: LD_INT 5
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 4
55259: PUSH
55260: LD_INT 5
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: LD_INT 4
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: LD_INT 3
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 5
55289: PUSH
55290: LD_INT 3
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: LD_INT 5
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 3
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: LD_INT 3
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: LD_INT 4
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 4
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: LD_INT 3
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: LD_INT 4
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: LD_INT 2
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 4
55402: NEG
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 4
55413: NEG
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 3
55425: NEG
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 3
55436: NEG
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 4
55447: NEG
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 5
55458: NEG
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 5
55469: NEG
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 5
55481: NEG
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 3
55493: NEG
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 3
55504: NEG
55505: PUSH
55506: LD_INT 3
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 3
55516: NEG
55517: PUSH
55518: LD_INT 4
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: LD_INT 3
55532: NEG
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: LD_INT 2
55544: NEG
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 3
55552: NEG
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 4
55564: NEG
55565: PUSH
55566: LD_INT 3
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 4
55576: NEG
55577: PUSH
55578: LD_INT 4
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: LD_INT 4
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 4
55600: NEG
55601: PUSH
55602: LD_INT 2
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 4
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 5
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: LD_INT 4
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: LD_INT 3
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 3
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 4
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: LD_INT 5
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: LD_INT 3
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: NEG
55703: PUSH
55704: LD_INT 5
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55759: LD_ADDR_VAR 0 31
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: LD_INT 4
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 3
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: LD_INT 4
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: LD_INT 5
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 5
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 4
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: LD_INT 3
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: LD_INT 5
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 3
55859: NEG
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 3
55870: NEG
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 3
55904: NEG
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 4
55915: NEG
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 4
55926: NEG
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 4
55938: NEG
55939: PUSH
55940: LD_INT 2
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 2
55950: NEG
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 4
55961: NEG
55962: PUSH
55963: LD_INT 4
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 4
55973: NEG
55974: PUSH
55975: LD_INT 5
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: NEG
55986: PUSH
55987: LD_INT 4
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 3
55997: NEG
55998: PUSH
55999: LD_INT 3
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 4
56009: NEG
56010: PUSH
56011: LD_INT 3
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 5
56021: NEG
56022: PUSH
56023: LD_INT 4
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 5
56033: NEG
56034: PUSH
56035: LD_INT 5
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: LD_INT 5
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 5
56057: NEG
56058: PUSH
56059: LD_INT 3
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 4
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 3
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 0
56113: PUSH
56114: LD_INT 2
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 4
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: LD_INT 4
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 4
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 4
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 5
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 5
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 4
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 3
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 3
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 5
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56309: LD_ADDR_VAR 0 32
56313: PUSH
56314: LD_INT 4
56316: NEG
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 4
56327: NEG
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 3
56339: NEG
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 3
56350: NEG
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 4
56361: NEG
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 5
56372: NEG
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 5
56383: NEG
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 5
56395: NEG
56396: PUSH
56397: LD_INT 2
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 3
56407: NEG
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 3
56418: NEG
56419: PUSH
56420: LD_INT 3
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 3
56430: NEG
56431: PUSH
56432: LD_INT 4
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 2
56442: NEG
56443: PUSH
56444: LD_INT 3
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: LD_INT 2
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 3
56466: NEG
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 4
56478: NEG
56479: PUSH
56480: LD_INT 3
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 4
56490: NEG
56491: PUSH
56492: LD_INT 4
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: LD_INT 4
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 4
56514: NEG
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: LD_INT 4
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: LD_INT 5
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: LD_INT 4
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: LD_INT 3
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 3
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: NEG
56582: PUSH
56583: LD_INT 4
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: LD_INT 5
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: LD_INT 3
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: LD_INT 5
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 3
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 4
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 4
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 3
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: LD_INT 0
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: LD_INT 2
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 4
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 4
56721: PUSH
56722: LD_INT 4
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 4
56731: PUSH
56732: LD_INT 3
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 5
56741: PUSH
56742: LD_INT 4
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 5
56751: PUSH
56752: LD_INT 5
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 4
56761: PUSH
56762: LD_INT 5
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 3
56771: PUSH
56772: LD_INT 4
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 3
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 5
56791: PUSH
56792: LD_INT 3
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 3
56801: PUSH
56802: LD_INT 5
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56856: LD_ADDR_VAR 0 33
56860: PUSH
56861: LD_INT 4
56863: NEG
56864: PUSH
56865: LD_INT 4
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 4
56875: NEG
56876: PUSH
56877: LD_INT 5
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 3
56887: NEG
56888: PUSH
56889: LD_INT 4
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 3
56899: NEG
56900: PUSH
56901: LD_INT 3
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 4
56911: NEG
56912: PUSH
56913: LD_INT 3
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 5
56923: NEG
56924: PUSH
56925: LD_INT 4
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 5
56935: NEG
56936: PUSH
56937: LD_INT 5
56939: NEG
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 3
56947: NEG
56948: PUSH
56949: LD_INT 5
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 5
56959: NEG
56960: PUSH
56961: LD_INT 3
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: LD_INT 3
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: LD_INT 4
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: LD_INT 3
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: LD_INT 2
57018: NEG
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: LD_INT 3
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 4
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: LD_INT 2
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: LD_INT 4
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 4
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 4
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 5
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 5
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 4
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 5
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 3
57166: PUSH
57167: LD_INT 3
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 3
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 4
57186: PUSH
57187: LD_INT 3
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 4
57196: PUSH
57197: LD_INT 4
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 3
57206: PUSH
57207: LD_INT 4
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: LD_INT 3
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 2
57226: PUSH
57227: LD_INT 2
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 4
57236: PUSH
57237: LD_INT 2
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 2
57246: PUSH
57247: LD_INT 4
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: LD_INT 4
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: PUSH
57277: LD_INT 4
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 5
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 5
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: LD_INT 4
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: NEG
57318: PUSH
57319: LD_INT 3
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 2
57328: PUSH
57329: LD_INT 5
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 2
57338: NEG
57339: PUSH
57340: LD_INT 3
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57394: LD_ADDR_VAR 0 34
57398: PUSH
57399: LD_INT 0
57401: PUSH
57402: LD_INT 4
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: LD_INT 5
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 4
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: LD_INT 3
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: LD_INT 3
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: LD_INT 4
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 1
57468: NEG
57469: PUSH
57470: LD_INT 5
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 2
57480: PUSH
57481: LD_INT 3
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: LD_INT 5
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 3
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 3
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 4
57524: PUSH
57525: LD_INT 0
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 4
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 3
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 4
57586: PUSH
57587: LD_INT 2
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 4
57596: PUSH
57597: LD_INT 4
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 4
57606: PUSH
57607: LD_INT 3
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 5
57616: PUSH
57617: LD_INT 4
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 5
57626: PUSH
57627: LD_INT 5
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 4
57636: PUSH
57637: LD_INT 5
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 3
57646: PUSH
57647: LD_INT 4
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 3
57656: PUSH
57657: LD_INT 3
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 5
57666: PUSH
57667: LD_INT 3
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 3
57676: PUSH
57677: LD_INT 5
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: LD_INT 3
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: LD_INT 3
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 4
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: LD_INT 4
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: LD_INT 2
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 2
57758: PUSH
57759: LD_INT 4
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 2
57768: NEG
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 4
57779: NEG
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 4
57790: NEG
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 3
57802: NEG
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 3
57813: NEG
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 4
57824: NEG
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 5
57835: NEG
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 5
57846: NEG
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 5
57858: NEG
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 3
57870: NEG
57871: PUSH
57872: LD_INT 2
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: ST_TO_ADDR
// end ; end ;
57926: GO 57929
57928: POP
// case btype of b_depot , b_warehouse :
57929: LD_VAR 0 1
57933: PUSH
57934: LD_INT 0
57936: DOUBLE
57937: EQUAL
57938: IFTRUE 57948
57940: LD_INT 1
57942: DOUBLE
57943: EQUAL
57944: IFTRUE 57948
57946: GO 58149
57948: POP
// case nation of nation_american :
57949: LD_VAR 0 5
57953: PUSH
57954: LD_INT 1
57956: DOUBLE
57957: EQUAL
57958: IFTRUE 57962
57960: GO 58018
57962: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57963: LD_ADDR_VAR 0 9
57967: PUSH
57968: LD_VAR 0 11
57972: PUSH
57973: LD_VAR 0 12
57977: PUSH
57978: LD_VAR 0 13
57982: PUSH
57983: LD_VAR 0 14
57987: PUSH
57988: LD_VAR 0 15
57992: PUSH
57993: LD_VAR 0 16
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: PUSH
58006: LD_VAR 0 4
58010: PUSH
58011: LD_INT 1
58013: PLUS
58014: ARRAY
58015: ST_TO_ADDR
58016: GO 58147
58018: LD_INT 2
58020: DOUBLE
58021: EQUAL
58022: IFTRUE 58026
58024: GO 58082
58026: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58027: LD_ADDR_VAR 0 9
58031: PUSH
58032: LD_VAR 0 17
58036: PUSH
58037: LD_VAR 0 18
58041: PUSH
58042: LD_VAR 0 19
58046: PUSH
58047: LD_VAR 0 20
58051: PUSH
58052: LD_VAR 0 21
58056: PUSH
58057: LD_VAR 0 22
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: PUSH
58070: LD_VAR 0 4
58074: PUSH
58075: LD_INT 1
58077: PLUS
58078: ARRAY
58079: ST_TO_ADDR
58080: GO 58147
58082: LD_INT 3
58084: DOUBLE
58085: EQUAL
58086: IFTRUE 58090
58088: GO 58146
58090: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58091: LD_ADDR_VAR 0 9
58095: PUSH
58096: LD_VAR 0 23
58100: PUSH
58101: LD_VAR 0 24
58105: PUSH
58106: LD_VAR 0 25
58110: PUSH
58111: LD_VAR 0 26
58115: PUSH
58116: LD_VAR 0 27
58120: PUSH
58121: LD_VAR 0 28
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: PUSH
58134: LD_VAR 0 4
58138: PUSH
58139: LD_INT 1
58141: PLUS
58142: ARRAY
58143: ST_TO_ADDR
58144: GO 58147
58146: POP
58147: GO 58702
58149: LD_INT 2
58151: DOUBLE
58152: EQUAL
58153: IFTRUE 58163
58155: LD_INT 3
58157: DOUBLE
58158: EQUAL
58159: IFTRUE 58163
58161: GO 58219
58163: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58164: LD_ADDR_VAR 0 9
58168: PUSH
58169: LD_VAR 0 29
58173: PUSH
58174: LD_VAR 0 30
58178: PUSH
58179: LD_VAR 0 31
58183: PUSH
58184: LD_VAR 0 32
58188: PUSH
58189: LD_VAR 0 33
58193: PUSH
58194: LD_VAR 0 34
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: PUSH
58207: LD_VAR 0 4
58211: PUSH
58212: LD_INT 1
58214: PLUS
58215: ARRAY
58216: ST_TO_ADDR
58217: GO 58702
58219: LD_INT 16
58221: DOUBLE
58222: EQUAL
58223: IFTRUE 58281
58225: LD_INT 17
58227: DOUBLE
58228: EQUAL
58229: IFTRUE 58281
58231: LD_INT 18
58233: DOUBLE
58234: EQUAL
58235: IFTRUE 58281
58237: LD_INT 19
58239: DOUBLE
58240: EQUAL
58241: IFTRUE 58281
58243: LD_INT 22
58245: DOUBLE
58246: EQUAL
58247: IFTRUE 58281
58249: LD_INT 20
58251: DOUBLE
58252: EQUAL
58253: IFTRUE 58281
58255: LD_INT 21
58257: DOUBLE
58258: EQUAL
58259: IFTRUE 58281
58261: LD_INT 23
58263: DOUBLE
58264: EQUAL
58265: IFTRUE 58281
58267: LD_INT 24
58269: DOUBLE
58270: EQUAL
58271: IFTRUE 58281
58273: LD_INT 25
58275: DOUBLE
58276: EQUAL
58277: IFTRUE 58281
58279: GO 58337
58281: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58282: LD_ADDR_VAR 0 9
58286: PUSH
58287: LD_VAR 0 35
58291: PUSH
58292: LD_VAR 0 36
58296: PUSH
58297: LD_VAR 0 37
58301: PUSH
58302: LD_VAR 0 38
58306: PUSH
58307: LD_VAR 0 39
58311: PUSH
58312: LD_VAR 0 40
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: PUSH
58325: LD_VAR 0 4
58329: PUSH
58330: LD_INT 1
58332: PLUS
58333: ARRAY
58334: ST_TO_ADDR
58335: GO 58702
58337: LD_INT 6
58339: DOUBLE
58340: EQUAL
58341: IFTRUE 58393
58343: LD_INT 7
58345: DOUBLE
58346: EQUAL
58347: IFTRUE 58393
58349: LD_INT 8
58351: DOUBLE
58352: EQUAL
58353: IFTRUE 58393
58355: LD_INT 13
58357: DOUBLE
58358: EQUAL
58359: IFTRUE 58393
58361: LD_INT 12
58363: DOUBLE
58364: EQUAL
58365: IFTRUE 58393
58367: LD_INT 15
58369: DOUBLE
58370: EQUAL
58371: IFTRUE 58393
58373: LD_INT 11
58375: DOUBLE
58376: EQUAL
58377: IFTRUE 58393
58379: LD_INT 14
58381: DOUBLE
58382: EQUAL
58383: IFTRUE 58393
58385: LD_INT 10
58387: DOUBLE
58388: EQUAL
58389: IFTRUE 58393
58391: GO 58449
58393: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58394: LD_ADDR_VAR 0 9
58398: PUSH
58399: LD_VAR 0 41
58403: PUSH
58404: LD_VAR 0 42
58408: PUSH
58409: LD_VAR 0 43
58413: PUSH
58414: LD_VAR 0 44
58418: PUSH
58419: LD_VAR 0 45
58423: PUSH
58424: LD_VAR 0 46
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: PUSH
58437: LD_VAR 0 4
58441: PUSH
58442: LD_INT 1
58444: PLUS
58445: ARRAY
58446: ST_TO_ADDR
58447: GO 58702
58449: LD_INT 36
58451: DOUBLE
58452: EQUAL
58453: IFTRUE 58457
58455: GO 58513
58457: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58458: LD_ADDR_VAR 0 9
58462: PUSH
58463: LD_VAR 0 47
58467: PUSH
58468: LD_VAR 0 48
58472: PUSH
58473: LD_VAR 0 49
58477: PUSH
58478: LD_VAR 0 50
58482: PUSH
58483: LD_VAR 0 51
58487: PUSH
58488: LD_VAR 0 52
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: PUSH
58501: LD_VAR 0 4
58505: PUSH
58506: LD_INT 1
58508: PLUS
58509: ARRAY
58510: ST_TO_ADDR
58511: GO 58702
58513: LD_INT 4
58515: DOUBLE
58516: EQUAL
58517: IFTRUE 58539
58519: LD_INT 5
58521: DOUBLE
58522: EQUAL
58523: IFTRUE 58539
58525: LD_INT 34
58527: DOUBLE
58528: EQUAL
58529: IFTRUE 58539
58531: LD_INT 37
58533: DOUBLE
58534: EQUAL
58535: IFTRUE 58539
58537: GO 58595
58539: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58540: LD_ADDR_VAR 0 9
58544: PUSH
58545: LD_VAR 0 53
58549: PUSH
58550: LD_VAR 0 54
58554: PUSH
58555: LD_VAR 0 55
58559: PUSH
58560: LD_VAR 0 56
58564: PUSH
58565: LD_VAR 0 57
58569: PUSH
58570: LD_VAR 0 58
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: PUSH
58583: LD_VAR 0 4
58587: PUSH
58588: LD_INT 1
58590: PLUS
58591: ARRAY
58592: ST_TO_ADDR
58593: GO 58702
58595: LD_INT 31
58597: DOUBLE
58598: EQUAL
58599: IFTRUE 58645
58601: LD_INT 32
58603: DOUBLE
58604: EQUAL
58605: IFTRUE 58645
58607: LD_INT 33
58609: DOUBLE
58610: EQUAL
58611: IFTRUE 58645
58613: LD_INT 27
58615: DOUBLE
58616: EQUAL
58617: IFTRUE 58645
58619: LD_INT 26
58621: DOUBLE
58622: EQUAL
58623: IFTRUE 58645
58625: LD_INT 28
58627: DOUBLE
58628: EQUAL
58629: IFTRUE 58645
58631: LD_INT 29
58633: DOUBLE
58634: EQUAL
58635: IFTRUE 58645
58637: LD_INT 30
58639: DOUBLE
58640: EQUAL
58641: IFTRUE 58645
58643: GO 58701
58645: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58646: LD_ADDR_VAR 0 9
58650: PUSH
58651: LD_VAR 0 59
58655: PUSH
58656: LD_VAR 0 60
58660: PUSH
58661: LD_VAR 0 61
58665: PUSH
58666: LD_VAR 0 62
58670: PUSH
58671: LD_VAR 0 63
58675: PUSH
58676: LD_VAR 0 64
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: PUSH
58689: LD_VAR 0 4
58693: PUSH
58694: LD_INT 1
58696: PLUS
58697: ARRAY
58698: ST_TO_ADDR
58699: GO 58702
58701: POP
// temp_list2 = [ ] ;
58702: LD_ADDR_VAR 0 10
58706: PUSH
58707: EMPTY
58708: ST_TO_ADDR
// for i in temp_list do
58709: LD_ADDR_VAR 0 8
58713: PUSH
58714: LD_VAR 0 9
58718: PUSH
58719: FOR_IN
58720: IFFALSE 58772
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58722: LD_ADDR_VAR 0 10
58726: PUSH
58727: LD_VAR 0 10
58731: PUSH
58732: LD_VAR 0 8
58736: PUSH
58737: LD_INT 1
58739: ARRAY
58740: PUSH
58741: LD_VAR 0 2
58745: PLUS
58746: PUSH
58747: LD_VAR 0 8
58751: PUSH
58752: LD_INT 2
58754: ARRAY
58755: PUSH
58756: LD_VAR 0 3
58760: PLUS
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: EMPTY
58767: LIST
58768: ADD
58769: ST_TO_ADDR
58770: GO 58719
58772: POP
58773: POP
// result = temp_list2 ;
58774: LD_ADDR_VAR 0 7
58778: PUSH
58779: LD_VAR 0 10
58783: ST_TO_ADDR
// end ;
58784: LD_VAR 0 7
58788: RET
// export function EnemyInRange ( unit , dist ) ; begin
58789: LD_INT 0
58791: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58792: LD_ADDR_VAR 0 3
58796: PUSH
58797: LD_VAR 0 1
58801: PPUSH
58802: CALL_OW 255
58806: PPUSH
58807: LD_VAR 0 1
58811: PPUSH
58812: CALL_OW 250
58816: PPUSH
58817: LD_VAR 0 1
58821: PPUSH
58822: CALL_OW 251
58826: PPUSH
58827: LD_VAR 0 2
58831: PPUSH
58832: CALL 32046 0 4
58836: PUSH
58837: LD_INT 4
58839: ARRAY
58840: ST_TO_ADDR
// end ;
58841: LD_VAR 0 3
58845: RET
// export function PlayerSeeMe ( unit ) ; begin
58846: LD_INT 0
58848: PPUSH
// result := See ( your_side , unit ) ;
58849: LD_ADDR_VAR 0 2
58853: PUSH
58854: LD_OWVAR 2
58858: PPUSH
58859: LD_VAR 0 1
58863: PPUSH
58864: CALL_OW 292
58868: ST_TO_ADDR
// end ;
58869: LD_VAR 0 2
58873: RET
// export function ReverseDir ( unit ) ; begin
58874: LD_INT 0
58876: PPUSH
// if not unit then
58877: LD_VAR 0 1
58881: NOT
58882: IFFALSE 58886
// exit ;
58884: GO 58909
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58886: LD_ADDR_VAR 0 2
58890: PUSH
58891: LD_VAR 0 1
58895: PPUSH
58896: CALL_OW 254
58900: PUSH
58901: LD_INT 3
58903: PLUS
58904: PUSH
58905: LD_INT 6
58907: MOD
58908: ST_TO_ADDR
// end ;
58909: LD_VAR 0 2
58913: RET
// export function ReverseArray ( array ) ; var i ; begin
58914: LD_INT 0
58916: PPUSH
58917: PPUSH
// if not array then
58918: LD_VAR 0 1
58922: NOT
58923: IFFALSE 58927
// exit ;
58925: GO 58982
// result := [ ] ;
58927: LD_ADDR_VAR 0 2
58931: PUSH
58932: EMPTY
58933: ST_TO_ADDR
// for i := array downto 1 do
58934: LD_ADDR_VAR 0 3
58938: PUSH
58939: DOUBLE
58940: LD_VAR 0 1
58944: INC
58945: ST_TO_ADDR
58946: LD_INT 1
58948: PUSH
58949: FOR_DOWNTO
58950: IFFALSE 58980
// result := Join ( result , array [ i ] ) ;
58952: LD_ADDR_VAR 0 2
58956: PUSH
58957: LD_VAR 0 2
58961: PPUSH
58962: LD_VAR 0 1
58966: PUSH
58967: LD_VAR 0 3
58971: ARRAY
58972: PPUSH
58973: CALL 63824 0 2
58977: ST_TO_ADDR
58978: GO 58949
58980: POP
58981: POP
// end ;
58982: LD_VAR 0 2
58986: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58987: LD_INT 0
58989: PPUSH
58990: PPUSH
58991: PPUSH
58992: PPUSH
58993: PPUSH
58994: PPUSH
// if not unit or not hexes then
58995: LD_VAR 0 1
58999: NOT
59000: IFTRUE 59009
59002: PUSH
59003: LD_VAR 0 2
59007: NOT
59008: OR
59009: IFFALSE 59013
// exit ;
59011: GO 59136
// dist := 9999 ;
59013: LD_ADDR_VAR 0 5
59017: PUSH
59018: LD_INT 9999
59020: ST_TO_ADDR
// for i = 1 to hexes do
59021: LD_ADDR_VAR 0 4
59025: PUSH
59026: DOUBLE
59027: LD_INT 1
59029: DEC
59030: ST_TO_ADDR
59031: LD_VAR 0 2
59035: PUSH
59036: FOR_TO
59037: IFFALSE 59124
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59039: LD_ADDR_VAR 0 6
59043: PUSH
59044: LD_VAR 0 1
59048: PPUSH
59049: LD_VAR 0 2
59053: PUSH
59054: LD_VAR 0 4
59058: ARRAY
59059: PUSH
59060: LD_INT 1
59062: ARRAY
59063: PPUSH
59064: LD_VAR 0 2
59068: PUSH
59069: LD_VAR 0 4
59073: ARRAY
59074: PUSH
59075: LD_INT 2
59077: ARRAY
59078: PPUSH
59079: CALL_OW 297
59083: ST_TO_ADDR
// if tdist < dist then
59084: LD_VAR 0 6
59088: PUSH
59089: LD_VAR 0 5
59093: LESS
59094: IFFALSE 59122
// begin hex := hexes [ i ] ;
59096: LD_ADDR_VAR 0 8
59100: PUSH
59101: LD_VAR 0 2
59105: PUSH
59106: LD_VAR 0 4
59110: ARRAY
59111: ST_TO_ADDR
// dist := tdist ;
59112: LD_ADDR_VAR 0 5
59116: PUSH
59117: LD_VAR 0 6
59121: ST_TO_ADDR
// end ; end ;
59122: GO 59036
59124: POP
59125: POP
// result := hex ;
59126: LD_ADDR_VAR 0 3
59130: PUSH
59131: LD_VAR 0 8
59135: ST_TO_ADDR
// end ;
59136: LD_VAR 0 3
59140: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59141: LD_INT 0
59143: PPUSH
59144: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59145: LD_VAR 0 1
59149: NOT
59150: IFTRUE 59189
59152: PUSH
59153: LD_VAR 0 1
59157: PUSH
59158: LD_INT 21
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 23
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PPUSH
59182: CALL_OW 69
59186: IN
59187: NOT
59188: OR
59189: IFFALSE 59193
// exit ;
59191: GO 59240
// for i = 1 to 3 do
59193: LD_ADDR_VAR 0 3
59197: PUSH
59198: DOUBLE
59199: LD_INT 1
59201: DEC
59202: ST_TO_ADDR
59203: LD_INT 3
59205: PUSH
59206: FOR_TO
59207: IFFALSE 59238
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59209: LD_VAR 0 1
59213: PPUSH
59214: CALL_OW 250
59218: PPUSH
59219: LD_VAR 0 1
59223: PPUSH
59224: CALL_OW 251
59228: PPUSH
59229: LD_INT 1
59231: PPUSH
59232: CALL_OW 453
59236: GO 59206
59238: POP
59239: POP
// end ;
59240: LD_VAR 0 2
59244: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59245: LD_INT 0
59247: PPUSH
59248: PPUSH
59249: PPUSH
59250: PPUSH
59251: PPUSH
59252: PPUSH
// if not unit or not enemy_unit then
59253: LD_VAR 0 1
59257: NOT
59258: IFTRUE 59267
59260: PUSH
59261: LD_VAR 0 2
59265: NOT
59266: OR
59267: IFFALSE 59271
// exit ;
59269: GO 59742
// if GetLives ( i ) < 250 then
59271: LD_VAR 0 4
59275: PPUSH
59276: CALL_OW 256
59280: PUSH
59281: LD_INT 250
59283: LESS
59284: IFFALSE 59297
// begin ComAutodestruct ( i ) ;
59286: LD_VAR 0 4
59290: PPUSH
59291: CALL 59141 0 1
// exit ;
59295: GO 59742
// end ; x := GetX ( enemy_unit ) ;
59297: LD_ADDR_VAR 0 7
59301: PUSH
59302: LD_VAR 0 2
59306: PPUSH
59307: CALL_OW 250
59311: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59312: LD_ADDR_VAR 0 8
59316: PUSH
59317: LD_VAR 0 2
59321: PPUSH
59322: CALL_OW 251
59326: ST_TO_ADDR
// if not x or not y then
59327: LD_VAR 0 7
59331: NOT
59332: IFTRUE 59341
59334: PUSH
59335: LD_VAR 0 8
59339: NOT
59340: OR
59341: IFFALSE 59345
// exit ;
59343: GO 59742
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59345: LD_ADDR_VAR 0 6
59349: PUSH
59350: LD_VAR 0 7
59354: PPUSH
59355: LD_INT 0
59357: PPUSH
59358: LD_INT 4
59360: PPUSH
59361: CALL_OW 272
59365: PUSH
59366: LD_VAR 0 8
59370: PPUSH
59371: LD_INT 0
59373: PPUSH
59374: LD_INT 4
59376: PPUSH
59377: CALL_OW 273
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_VAR 0 7
59390: PPUSH
59391: LD_INT 1
59393: PPUSH
59394: LD_INT 4
59396: PPUSH
59397: CALL_OW 272
59401: PUSH
59402: LD_VAR 0 8
59406: PPUSH
59407: LD_INT 1
59409: PPUSH
59410: LD_INT 4
59412: PPUSH
59413: CALL_OW 273
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_VAR 0 7
59426: PPUSH
59427: LD_INT 2
59429: PPUSH
59430: LD_INT 4
59432: PPUSH
59433: CALL_OW 272
59437: PUSH
59438: LD_VAR 0 8
59442: PPUSH
59443: LD_INT 2
59445: PPUSH
59446: LD_INT 4
59448: PPUSH
59449: CALL_OW 273
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_VAR 0 7
59462: PPUSH
59463: LD_INT 3
59465: PPUSH
59466: LD_INT 4
59468: PPUSH
59469: CALL_OW 272
59473: PUSH
59474: LD_VAR 0 8
59478: PPUSH
59479: LD_INT 3
59481: PPUSH
59482: LD_INT 4
59484: PPUSH
59485: CALL_OW 273
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_VAR 0 7
59498: PPUSH
59499: LD_INT 4
59501: PPUSH
59502: LD_INT 4
59504: PPUSH
59505: CALL_OW 272
59509: PUSH
59510: LD_VAR 0 8
59514: PPUSH
59515: LD_INT 4
59517: PPUSH
59518: LD_INT 4
59520: PPUSH
59521: CALL_OW 273
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_VAR 0 7
59534: PPUSH
59535: LD_INT 5
59537: PPUSH
59538: LD_INT 4
59540: PPUSH
59541: CALL_OW 272
59545: PUSH
59546: LD_VAR 0 8
59550: PPUSH
59551: LD_INT 5
59553: PPUSH
59554: LD_INT 4
59556: PPUSH
59557: CALL_OW 273
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: ST_TO_ADDR
// for i = tmp downto 1 do
59574: LD_ADDR_VAR 0 4
59578: PUSH
59579: DOUBLE
59580: LD_VAR 0 6
59584: INC
59585: ST_TO_ADDR
59586: LD_INT 1
59588: PUSH
59589: FOR_DOWNTO
59590: IFFALSE 59693
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59592: LD_VAR 0 6
59596: PUSH
59597: LD_VAR 0 4
59601: ARRAY
59602: PUSH
59603: LD_INT 1
59605: ARRAY
59606: PPUSH
59607: LD_VAR 0 6
59611: PUSH
59612: LD_VAR 0 4
59616: ARRAY
59617: PUSH
59618: LD_INT 2
59620: ARRAY
59621: PPUSH
59622: CALL_OW 488
59626: NOT
59627: IFTRUE 59669
59629: PUSH
59630: LD_VAR 0 6
59634: PUSH
59635: LD_VAR 0 4
59639: ARRAY
59640: PUSH
59641: LD_INT 1
59643: ARRAY
59644: PPUSH
59645: LD_VAR 0 6
59649: PUSH
59650: LD_VAR 0 4
59654: ARRAY
59655: PUSH
59656: LD_INT 2
59658: ARRAY
59659: PPUSH
59660: CALL_OW 428
59664: PUSH
59665: LD_INT 0
59667: NONEQUAL
59668: OR
59669: IFFALSE 59691
// tmp := Delete ( tmp , i ) ;
59671: LD_ADDR_VAR 0 6
59675: PUSH
59676: LD_VAR 0 6
59680: PPUSH
59681: LD_VAR 0 4
59685: PPUSH
59686: CALL_OW 3
59690: ST_TO_ADDR
59691: GO 59589
59693: POP
59694: POP
// j := GetClosestHex ( unit , tmp ) ;
59695: LD_ADDR_VAR 0 5
59699: PUSH
59700: LD_VAR 0 1
59704: PPUSH
59705: LD_VAR 0 6
59709: PPUSH
59710: CALL 58987 0 2
59714: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59715: LD_VAR 0 1
59719: PPUSH
59720: LD_VAR 0 5
59724: PUSH
59725: LD_INT 1
59727: ARRAY
59728: PPUSH
59729: LD_VAR 0 5
59733: PUSH
59734: LD_INT 2
59736: ARRAY
59737: PPUSH
59738: CALL_OW 111
// end ;
59742: LD_VAR 0 3
59746: RET
// export function PrepareApemanSoldier ( ) ; begin
59747: LD_INT 0
59749: PPUSH
// uc_nation := 0 ;
59750: LD_ADDR_OWVAR 21
59754: PUSH
59755: LD_INT 0
59757: ST_TO_ADDR
// hc_sex := sex_male ;
59758: LD_ADDR_OWVAR 27
59762: PUSH
59763: LD_INT 1
59765: ST_TO_ADDR
// hc_name :=  ;
59766: LD_ADDR_OWVAR 26
59770: PUSH
59771: LD_STRING 
59773: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59774: LD_ADDR_OWVAR 28
59778: PUSH
59779: LD_INT 15
59781: ST_TO_ADDR
// hc_gallery :=  ;
59782: LD_ADDR_OWVAR 33
59786: PUSH
59787: LD_STRING 
59789: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59790: LD_ADDR_OWVAR 31
59794: PUSH
59795: LD_INT 0
59797: PPUSH
59798: LD_INT 3
59800: PPUSH
59801: CALL_OW 12
59805: PUSH
59806: LD_INT 0
59808: PPUSH
59809: LD_INT 3
59811: PPUSH
59812: CALL_OW 12
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59829: LD_ADDR_OWVAR 29
59833: PUSH
59834: LD_INT 12
59836: PUSH
59837: LD_INT 12
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: ST_TO_ADDR
// end ;
59844: LD_VAR 0 1
59848: RET
// export function PrepareApemanEngineer ( ) ; begin
59849: LD_INT 0
59851: PPUSH
// uc_nation := 0 ;
59852: LD_ADDR_OWVAR 21
59856: PUSH
59857: LD_INT 0
59859: ST_TO_ADDR
// hc_sex := sex_male ;
59860: LD_ADDR_OWVAR 27
59864: PUSH
59865: LD_INT 1
59867: ST_TO_ADDR
// hc_name :=  ;
59868: LD_ADDR_OWVAR 26
59872: PUSH
59873: LD_STRING 
59875: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59876: LD_ADDR_OWVAR 28
59880: PUSH
59881: LD_INT 16
59883: ST_TO_ADDR
// hc_gallery :=  ;
59884: LD_ADDR_OWVAR 33
59888: PUSH
59889: LD_STRING 
59891: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59892: LD_ADDR_OWVAR 31
59896: PUSH
59897: LD_INT 0
59899: PPUSH
59900: LD_INT 3
59902: PPUSH
59903: CALL_OW 12
59907: PUSH
59908: LD_INT 0
59910: PPUSH
59911: LD_INT 3
59913: PPUSH
59914: CALL_OW 12
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59931: LD_ADDR_OWVAR 29
59935: PUSH
59936: LD_INT 12
59938: PUSH
59939: LD_INT 12
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: ST_TO_ADDR
// end ;
59946: LD_VAR 0 1
59950: RET
// export function PrepareApeman ( agressivity ) ; begin
59951: LD_INT 0
59953: PPUSH
// uc_side := 0 ;
59954: LD_ADDR_OWVAR 20
59958: PUSH
59959: LD_INT 0
59961: ST_TO_ADDR
// uc_nation := 0 ;
59962: LD_ADDR_OWVAR 21
59966: PUSH
59967: LD_INT 0
59969: ST_TO_ADDR
// hc_sex := sex_male ;
59970: LD_ADDR_OWVAR 27
59974: PUSH
59975: LD_INT 1
59977: ST_TO_ADDR
// hc_class := class_apeman ;
59978: LD_ADDR_OWVAR 28
59982: PUSH
59983: LD_INT 12
59985: ST_TO_ADDR
// hc_gallery :=  ;
59986: LD_ADDR_OWVAR 33
59990: PUSH
59991: LD_STRING 
59993: ST_TO_ADDR
// hc_name :=  ;
59994: LD_ADDR_OWVAR 26
59998: PUSH
59999: LD_STRING 
60001: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60002: LD_ADDR_OWVAR 29
60006: PUSH
60007: LD_INT 12
60009: PUSH
60010: LD_INT 12
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: ST_TO_ADDR
// if agressivity = 0 then
60017: LD_VAR 0 1
60021: PUSH
60022: LD_INT 0
60024: EQUAL
60025: IFFALSE 60037
// hc_agressivity := 0 else
60027: LD_ADDR_OWVAR 35
60031: PUSH
60032: LD_INT 0
60034: ST_TO_ADDR
60035: GO 60058
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60037: LD_ADDR_OWVAR 35
60041: PUSH
60042: LD_VAR 0 1
60046: NEG
60047: PPUSH
60048: LD_VAR 0 1
60052: PPUSH
60053: CALL_OW 12
60057: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60058: LD_ADDR_OWVAR 31
60062: PUSH
60063: LD_INT 0
60065: PPUSH
60066: LD_INT 3
60068: PPUSH
60069: CALL_OW 12
60073: PUSH
60074: LD_INT 0
60076: PPUSH
60077: LD_INT 3
60079: PPUSH
60080: CALL_OW 12
60084: PUSH
60085: LD_INT 0
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: ST_TO_ADDR
// end ;
60097: LD_VAR 0 2
60101: RET
// export function PrepareTiger ( agressivity ) ; begin
60102: LD_INT 0
60104: PPUSH
// uc_side := 0 ;
60105: LD_ADDR_OWVAR 20
60109: PUSH
60110: LD_INT 0
60112: ST_TO_ADDR
// uc_nation := 0 ;
60113: LD_ADDR_OWVAR 21
60117: PUSH
60118: LD_INT 0
60120: ST_TO_ADDR
// InitHc ;
60121: CALL_OW 19
// hc_class := class_tiger ;
60125: LD_ADDR_OWVAR 28
60129: PUSH
60130: LD_INT 14
60132: ST_TO_ADDR
// hc_gallery :=  ;
60133: LD_ADDR_OWVAR 33
60137: PUSH
60138: LD_STRING 
60140: ST_TO_ADDR
// hc_name :=  ;
60141: LD_ADDR_OWVAR 26
60145: PUSH
60146: LD_STRING 
60148: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60149: LD_ADDR_OWVAR 35
60153: PUSH
60154: LD_VAR 0 1
60158: NEG
60159: PPUSH
60160: LD_VAR 0 1
60164: PPUSH
60165: CALL_OW 12
60169: ST_TO_ADDR
// end ;
60170: LD_VAR 0 2
60174: RET
// export function PrepareEnchidna ( ) ; begin
60175: LD_INT 0
60177: PPUSH
// uc_side := 0 ;
60178: LD_ADDR_OWVAR 20
60182: PUSH
60183: LD_INT 0
60185: ST_TO_ADDR
// uc_nation := 0 ;
60186: LD_ADDR_OWVAR 21
60190: PUSH
60191: LD_INT 0
60193: ST_TO_ADDR
// InitHc ;
60194: CALL_OW 19
// hc_class := class_baggie ;
60198: LD_ADDR_OWVAR 28
60202: PUSH
60203: LD_INT 13
60205: ST_TO_ADDR
// hc_gallery :=  ;
60206: LD_ADDR_OWVAR 33
60210: PUSH
60211: LD_STRING 
60213: ST_TO_ADDR
// hc_name :=  ;
60214: LD_ADDR_OWVAR 26
60218: PUSH
60219: LD_STRING 
60221: ST_TO_ADDR
// end ;
60222: LD_VAR 0 1
60226: RET
// export function PrepareFrog ( ) ; begin
60227: LD_INT 0
60229: PPUSH
// uc_side := 0 ;
60230: LD_ADDR_OWVAR 20
60234: PUSH
60235: LD_INT 0
60237: ST_TO_ADDR
// uc_nation := 0 ;
60238: LD_ADDR_OWVAR 21
60242: PUSH
60243: LD_INT 0
60245: ST_TO_ADDR
// InitHc ;
60246: CALL_OW 19
// hc_class := class_frog ;
60250: LD_ADDR_OWVAR 28
60254: PUSH
60255: LD_INT 19
60257: ST_TO_ADDR
// hc_gallery :=  ;
60258: LD_ADDR_OWVAR 33
60262: PUSH
60263: LD_STRING 
60265: ST_TO_ADDR
// hc_name :=  ;
60266: LD_ADDR_OWVAR 26
60270: PUSH
60271: LD_STRING 
60273: ST_TO_ADDR
// end ;
60274: LD_VAR 0 1
60278: RET
// export function PrepareFish ( ) ; begin
60279: LD_INT 0
60281: PPUSH
// uc_side := 0 ;
60282: LD_ADDR_OWVAR 20
60286: PUSH
60287: LD_INT 0
60289: ST_TO_ADDR
// uc_nation := 0 ;
60290: LD_ADDR_OWVAR 21
60294: PUSH
60295: LD_INT 0
60297: ST_TO_ADDR
// InitHc ;
60298: CALL_OW 19
// hc_class := class_fish ;
60302: LD_ADDR_OWVAR 28
60306: PUSH
60307: LD_INT 20
60309: ST_TO_ADDR
// hc_gallery :=  ;
60310: LD_ADDR_OWVAR 33
60314: PUSH
60315: LD_STRING 
60317: ST_TO_ADDR
// hc_name :=  ;
60318: LD_ADDR_OWVAR 26
60322: PUSH
60323: LD_STRING 
60325: ST_TO_ADDR
// end ;
60326: LD_VAR 0 1
60330: RET
// export function PrepareBird ( ) ; begin
60331: LD_INT 0
60333: PPUSH
// uc_side := 0 ;
60334: LD_ADDR_OWVAR 20
60338: PUSH
60339: LD_INT 0
60341: ST_TO_ADDR
// uc_nation := 0 ;
60342: LD_ADDR_OWVAR 21
60346: PUSH
60347: LD_INT 0
60349: ST_TO_ADDR
// InitHc ;
60350: CALL_OW 19
// hc_class := class_phororhacos ;
60354: LD_ADDR_OWVAR 28
60358: PUSH
60359: LD_INT 18
60361: ST_TO_ADDR
// hc_gallery :=  ;
60362: LD_ADDR_OWVAR 33
60366: PUSH
60367: LD_STRING 
60369: ST_TO_ADDR
// hc_name :=  ;
60370: LD_ADDR_OWVAR 26
60374: PUSH
60375: LD_STRING 
60377: ST_TO_ADDR
// end ;
60378: LD_VAR 0 1
60382: RET
// export function PrepareHorse ( ) ; begin
60383: LD_INT 0
60385: PPUSH
// uc_side := 0 ;
60386: LD_ADDR_OWVAR 20
60390: PUSH
60391: LD_INT 0
60393: ST_TO_ADDR
// uc_nation := 0 ;
60394: LD_ADDR_OWVAR 21
60398: PUSH
60399: LD_INT 0
60401: ST_TO_ADDR
// InitHc ;
60402: CALL_OW 19
// hc_class := class_horse ;
60406: LD_ADDR_OWVAR 28
60410: PUSH
60411: LD_INT 21
60413: ST_TO_ADDR
// hc_gallery :=  ;
60414: LD_ADDR_OWVAR 33
60418: PUSH
60419: LD_STRING 
60421: ST_TO_ADDR
// hc_name :=  ;
60422: LD_ADDR_OWVAR 26
60426: PUSH
60427: LD_STRING 
60429: ST_TO_ADDR
// end ;
60430: LD_VAR 0 1
60434: RET
// export function PrepareMastodont ( ) ; begin
60435: LD_INT 0
60437: PPUSH
// uc_side := 0 ;
60438: LD_ADDR_OWVAR 20
60442: PUSH
60443: LD_INT 0
60445: ST_TO_ADDR
// uc_nation := 0 ;
60446: LD_ADDR_OWVAR 21
60450: PUSH
60451: LD_INT 0
60453: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60454: LD_ADDR_OWVAR 37
60458: PUSH
60459: LD_INT 31
60461: ST_TO_ADDR
// vc_control := control_rider ;
60462: LD_ADDR_OWVAR 38
60466: PUSH
60467: LD_INT 4
60469: ST_TO_ADDR
// end ;
60470: LD_VAR 0 1
60474: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60475: LD_INT 0
60477: PPUSH
60478: PPUSH
60479: PPUSH
// uc_side = 0 ;
60480: LD_ADDR_OWVAR 20
60484: PUSH
60485: LD_INT 0
60487: ST_TO_ADDR
// uc_nation = 0 ;
60488: LD_ADDR_OWVAR 21
60492: PUSH
60493: LD_INT 0
60495: ST_TO_ADDR
// InitHc_All ( ) ;
60496: CALL_OW 584
// InitVc ;
60500: CALL_OW 20
// if mastodonts then
60504: LD_VAR 0 6
60508: IFFALSE 60575
// for i = 1 to mastodonts do
60510: LD_ADDR_VAR 0 11
60514: PUSH
60515: DOUBLE
60516: LD_INT 1
60518: DEC
60519: ST_TO_ADDR
60520: LD_VAR 0 6
60524: PUSH
60525: FOR_TO
60526: IFFALSE 60573
// begin vc_chassis := 31 ;
60528: LD_ADDR_OWVAR 37
60532: PUSH
60533: LD_INT 31
60535: ST_TO_ADDR
// vc_control := control_rider ;
60536: LD_ADDR_OWVAR 38
60540: PUSH
60541: LD_INT 4
60543: ST_TO_ADDR
// animal := CreateVehicle ;
60544: LD_ADDR_VAR 0 12
60548: PUSH
60549: CALL_OW 45
60553: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60554: LD_VAR 0 12
60558: PPUSH
60559: LD_VAR 0 8
60563: PPUSH
60564: LD_INT 0
60566: PPUSH
60567: CALL 62717 0 3
// end ;
60571: GO 60525
60573: POP
60574: POP
// if horses then
60575: LD_VAR 0 5
60579: IFFALSE 60646
// for i = 1 to horses do
60581: LD_ADDR_VAR 0 11
60585: PUSH
60586: DOUBLE
60587: LD_INT 1
60589: DEC
60590: ST_TO_ADDR
60591: LD_VAR 0 5
60595: PUSH
60596: FOR_TO
60597: IFFALSE 60644
// begin hc_class := 21 ;
60599: LD_ADDR_OWVAR 28
60603: PUSH
60604: LD_INT 21
60606: ST_TO_ADDR
// hc_gallery :=  ;
60607: LD_ADDR_OWVAR 33
60611: PUSH
60612: LD_STRING 
60614: ST_TO_ADDR
// animal := CreateHuman ;
60615: LD_ADDR_VAR 0 12
60619: PUSH
60620: CALL_OW 44
60624: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60625: LD_VAR 0 12
60629: PPUSH
60630: LD_VAR 0 8
60634: PPUSH
60635: LD_INT 0
60637: PPUSH
60638: CALL 62717 0 3
// end ;
60642: GO 60596
60644: POP
60645: POP
// if birds then
60646: LD_VAR 0 1
60650: IFFALSE 60717
// for i = 1 to birds do
60652: LD_ADDR_VAR 0 11
60656: PUSH
60657: DOUBLE
60658: LD_INT 1
60660: DEC
60661: ST_TO_ADDR
60662: LD_VAR 0 1
60666: PUSH
60667: FOR_TO
60668: IFFALSE 60715
// begin hc_class := 18 ;
60670: LD_ADDR_OWVAR 28
60674: PUSH
60675: LD_INT 18
60677: ST_TO_ADDR
// hc_gallery =  ;
60678: LD_ADDR_OWVAR 33
60682: PUSH
60683: LD_STRING 
60685: ST_TO_ADDR
// animal := CreateHuman ;
60686: LD_ADDR_VAR 0 12
60690: PUSH
60691: CALL_OW 44
60695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60696: LD_VAR 0 12
60700: PPUSH
60701: LD_VAR 0 8
60705: PPUSH
60706: LD_INT 0
60708: PPUSH
60709: CALL 62717 0 3
// end ;
60713: GO 60667
60715: POP
60716: POP
// if tigers then
60717: LD_VAR 0 2
60721: IFFALSE 60805
// for i = 1 to tigers do
60723: LD_ADDR_VAR 0 11
60727: PUSH
60728: DOUBLE
60729: LD_INT 1
60731: DEC
60732: ST_TO_ADDR
60733: LD_VAR 0 2
60737: PUSH
60738: FOR_TO
60739: IFFALSE 60803
// begin hc_class = class_tiger ;
60741: LD_ADDR_OWVAR 28
60745: PUSH
60746: LD_INT 14
60748: ST_TO_ADDR
// hc_gallery =  ;
60749: LD_ADDR_OWVAR 33
60753: PUSH
60754: LD_STRING 
60756: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60757: LD_ADDR_OWVAR 35
60761: PUSH
60762: LD_INT 7
60764: NEG
60765: PPUSH
60766: LD_INT 7
60768: PPUSH
60769: CALL_OW 12
60773: ST_TO_ADDR
// animal := CreateHuman ;
60774: LD_ADDR_VAR 0 12
60778: PUSH
60779: CALL_OW 44
60783: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60784: LD_VAR 0 12
60788: PPUSH
60789: LD_VAR 0 8
60793: PPUSH
60794: LD_INT 0
60796: PPUSH
60797: CALL 62717 0 3
// end ;
60801: GO 60738
60803: POP
60804: POP
// if apemans then
60805: LD_VAR 0 3
60809: IFFALSE 60932
// for i = 1 to apemans do
60811: LD_ADDR_VAR 0 11
60815: PUSH
60816: DOUBLE
60817: LD_INT 1
60819: DEC
60820: ST_TO_ADDR
60821: LD_VAR 0 3
60825: PUSH
60826: FOR_TO
60827: IFFALSE 60930
// begin hc_class = class_apeman ;
60829: LD_ADDR_OWVAR 28
60833: PUSH
60834: LD_INT 12
60836: ST_TO_ADDR
// hc_gallery =  ;
60837: LD_ADDR_OWVAR 33
60841: PUSH
60842: LD_STRING 
60844: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60845: LD_ADDR_OWVAR 35
60849: PUSH
60850: LD_INT 2
60852: NEG
60853: PPUSH
60854: LD_INT 2
60856: PPUSH
60857: CALL_OW 12
60861: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60862: LD_ADDR_OWVAR 31
60866: PUSH
60867: LD_INT 1
60869: PPUSH
60870: LD_INT 3
60872: PPUSH
60873: CALL_OW 12
60877: PUSH
60878: LD_INT 1
60880: PPUSH
60881: LD_INT 3
60883: PPUSH
60884: CALL_OW 12
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: ST_TO_ADDR
// animal := CreateHuman ;
60901: LD_ADDR_VAR 0 12
60905: PUSH
60906: CALL_OW 44
60910: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60911: LD_VAR 0 12
60915: PPUSH
60916: LD_VAR 0 8
60920: PPUSH
60921: LD_INT 0
60923: PPUSH
60924: CALL 62717 0 3
// end ;
60928: GO 60826
60930: POP
60931: POP
// if enchidnas then
60932: LD_VAR 0 4
60936: IFFALSE 61003
// for i = 1 to enchidnas do
60938: LD_ADDR_VAR 0 11
60942: PUSH
60943: DOUBLE
60944: LD_INT 1
60946: DEC
60947: ST_TO_ADDR
60948: LD_VAR 0 4
60952: PUSH
60953: FOR_TO
60954: IFFALSE 61001
// begin hc_class = 13 ;
60956: LD_ADDR_OWVAR 28
60960: PUSH
60961: LD_INT 13
60963: ST_TO_ADDR
// hc_gallery =  ;
60964: LD_ADDR_OWVAR 33
60968: PUSH
60969: LD_STRING 
60971: ST_TO_ADDR
// animal := CreateHuman ;
60972: LD_ADDR_VAR 0 12
60976: PUSH
60977: CALL_OW 44
60981: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60982: LD_VAR 0 12
60986: PPUSH
60987: LD_VAR 0 8
60991: PPUSH
60992: LD_INT 0
60994: PPUSH
60995: CALL 62717 0 3
// end ;
60999: GO 60953
61001: POP
61002: POP
// if fishes then
61003: LD_VAR 0 7
61007: IFFALSE 61074
// for i = 1 to fishes do
61009: LD_ADDR_VAR 0 11
61013: PUSH
61014: DOUBLE
61015: LD_INT 1
61017: DEC
61018: ST_TO_ADDR
61019: LD_VAR 0 7
61023: PUSH
61024: FOR_TO
61025: IFFALSE 61072
// begin hc_class = 20 ;
61027: LD_ADDR_OWVAR 28
61031: PUSH
61032: LD_INT 20
61034: ST_TO_ADDR
// hc_gallery =  ;
61035: LD_ADDR_OWVAR 33
61039: PUSH
61040: LD_STRING 
61042: ST_TO_ADDR
// animal := CreateHuman ;
61043: LD_ADDR_VAR 0 12
61047: PUSH
61048: CALL_OW 44
61052: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61053: LD_VAR 0 12
61057: PPUSH
61058: LD_VAR 0 9
61062: PPUSH
61063: LD_INT 0
61065: PPUSH
61066: CALL 62717 0 3
// end ;
61070: GO 61024
61072: POP
61073: POP
// end ;
61074: LD_VAR 0 10
61078: RET
// export function WantHeal ( sci , unit ) ; begin
61079: LD_INT 0
61081: PPUSH
// if GetTaskList ( sci ) > 0 then
61082: LD_VAR 0 1
61086: PPUSH
61087: CALL_OW 437
61091: PUSH
61092: LD_INT 0
61094: GREATER
61095: IFFALSE 61167
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61097: LD_VAR 0 1
61101: PPUSH
61102: CALL_OW 437
61106: PUSH
61107: LD_INT 1
61109: ARRAY
61110: PUSH
61111: LD_INT 1
61113: ARRAY
61114: PUSH
61115: LD_STRING l
61117: EQUAL
61118: IFFALSE 61145
61120: PUSH
61121: LD_VAR 0 1
61125: PPUSH
61126: CALL_OW 437
61130: PUSH
61131: LD_INT 1
61133: ARRAY
61134: PUSH
61135: LD_INT 4
61137: ARRAY
61138: PUSH
61139: LD_VAR 0 2
61143: EQUAL
61144: AND
61145: IFFALSE 61157
// result := true else
61147: LD_ADDR_VAR 0 3
61151: PUSH
61152: LD_INT 1
61154: ST_TO_ADDR
61155: GO 61165
// result := false ;
61157: LD_ADDR_VAR 0 3
61161: PUSH
61162: LD_INT 0
61164: ST_TO_ADDR
// end else
61165: GO 61175
// result := false ;
61167: LD_ADDR_VAR 0 3
61171: PUSH
61172: LD_INT 0
61174: ST_TO_ADDR
// end ;
61175: LD_VAR 0 3
61179: RET
// export function HealTarget ( sci ) ; begin
61180: LD_INT 0
61182: PPUSH
// if not sci then
61183: LD_VAR 0 1
61187: NOT
61188: IFFALSE 61192
// exit ;
61190: GO 61257
// result := 0 ;
61192: LD_ADDR_VAR 0 2
61196: PUSH
61197: LD_INT 0
61199: ST_TO_ADDR
// if GetTaskList ( sci ) then
61200: LD_VAR 0 1
61204: PPUSH
61205: CALL_OW 437
61209: IFFALSE 61257
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61211: LD_VAR 0 1
61215: PPUSH
61216: CALL_OW 437
61220: PUSH
61221: LD_INT 1
61223: ARRAY
61224: PUSH
61225: LD_INT 1
61227: ARRAY
61228: PUSH
61229: LD_STRING l
61231: EQUAL
61232: IFFALSE 61257
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61234: LD_ADDR_VAR 0 2
61238: PUSH
61239: LD_VAR 0 1
61243: PPUSH
61244: CALL_OW 437
61248: PUSH
61249: LD_INT 1
61251: ARRAY
61252: PUSH
61253: LD_INT 4
61255: ARRAY
61256: ST_TO_ADDR
// end ;
61257: LD_VAR 0 2
61261: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61262: LD_INT 0
61264: PPUSH
61265: PPUSH
61266: PPUSH
61267: PPUSH
// if not base_units then
61268: LD_VAR 0 1
61272: NOT
61273: IFFALSE 61277
// exit ;
61275: GO 61364
// result := false ;
61277: LD_ADDR_VAR 0 2
61281: PUSH
61282: LD_INT 0
61284: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61285: LD_ADDR_VAR 0 5
61289: PUSH
61290: LD_VAR 0 1
61294: PPUSH
61295: LD_INT 21
61297: PUSH
61298: LD_INT 3
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PPUSH
61305: CALL_OW 72
61309: ST_TO_ADDR
// if not tmp then
61310: LD_VAR 0 5
61314: NOT
61315: IFFALSE 61319
// exit ;
61317: GO 61364
// for i in tmp do
61319: LD_ADDR_VAR 0 3
61323: PUSH
61324: LD_VAR 0 5
61328: PUSH
61329: FOR_IN
61330: IFFALSE 61362
// begin result := EnemyInRange ( i , 22 ) ;
61332: LD_ADDR_VAR 0 2
61336: PUSH
61337: LD_VAR 0 3
61341: PPUSH
61342: LD_INT 22
61344: PPUSH
61345: CALL 58789 0 2
61349: ST_TO_ADDR
// if result then
61350: LD_VAR 0 2
61354: IFFALSE 61360
// exit ;
61356: POP
61357: POP
61358: GO 61364
// end ;
61360: GO 61329
61362: POP
61363: POP
// end ;
61364: LD_VAR 0 2
61368: RET
// export function FilterByTag ( units , tag ) ; begin
61369: LD_INT 0
61371: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61372: LD_ADDR_VAR 0 3
61376: PUSH
61377: LD_VAR 0 1
61381: PPUSH
61382: LD_INT 120
61384: PUSH
61385: LD_VAR 0 2
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PPUSH
61394: CALL_OW 72
61398: ST_TO_ADDR
// end ;
61399: LD_VAR 0 3
61403: RET
// export function IsDriver ( un ) ; begin
61404: LD_INT 0
61406: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61407: LD_ADDR_VAR 0 2
61411: PUSH
61412: LD_VAR 0 1
61416: PUSH
61417: LD_INT 55
61419: PUSH
61420: EMPTY
61421: LIST
61422: PPUSH
61423: CALL_OW 69
61427: IN
61428: ST_TO_ADDR
// end ;
61429: LD_VAR 0 2
61433: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61434: LD_INT 0
61436: PPUSH
61437: PPUSH
// list := [ ] ;
61438: LD_ADDR_VAR 0 5
61442: PUSH
61443: EMPTY
61444: ST_TO_ADDR
// case d of 0 :
61445: LD_VAR 0 3
61449: PUSH
61450: LD_INT 0
61452: DOUBLE
61453: EQUAL
61454: IFTRUE 61458
61456: GO 61591
61458: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61459: LD_ADDR_VAR 0 5
61463: PUSH
61464: LD_VAR 0 1
61468: PUSH
61469: LD_INT 4
61471: MINUS
61472: PUSH
61473: LD_VAR 0 2
61477: PUSH
61478: LD_INT 4
61480: MINUS
61481: PUSH
61482: LD_INT 2
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: LIST
61489: PUSH
61490: LD_VAR 0 1
61494: PUSH
61495: LD_INT 3
61497: MINUS
61498: PUSH
61499: LD_VAR 0 2
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: LIST
61511: PUSH
61512: LD_VAR 0 1
61516: PUSH
61517: LD_INT 4
61519: PLUS
61520: PUSH
61521: LD_VAR 0 2
61525: PUSH
61526: LD_INT 4
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: PUSH
61534: LD_VAR 0 1
61538: PUSH
61539: LD_INT 3
61541: PLUS
61542: PUSH
61543: LD_VAR 0 2
61547: PUSH
61548: LD_INT 3
61550: PLUS
61551: PUSH
61552: LD_INT 5
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: LIST
61559: PUSH
61560: LD_VAR 0 1
61564: PUSH
61565: LD_VAR 0 2
61569: PUSH
61570: LD_INT 4
61572: PLUS
61573: PUSH
61574: LD_INT 0
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: LIST
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: ST_TO_ADDR
// end ; 1 :
61589: GO 62289
61591: LD_INT 1
61593: DOUBLE
61594: EQUAL
61595: IFTRUE 61599
61597: GO 61732
61599: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61600: LD_ADDR_VAR 0 5
61604: PUSH
61605: LD_VAR 0 1
61609: PUSH
61610: LD_VAR 0 2
61614: PUSH
61615: LD_INT 4
61617: MINUS
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: LIST
61626: PUSH
61627: LD_VAR 0 1
61631: PUSH
61632: LD_INT 3
61634: MINUS
61635: PUSH
61636: LD_VAR 0 2
61640: PUSH
61641: LD_INT 3
61643: MINUS
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: LIST
61652: PUSH
61653: LD_VAR 0 1
61657: PUSH
61658: LD_INT 4
61660: MINUS
61661: PUSH
61662: LD_VAR 0 2
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: LIST
61674: PUSH
61675: LD_VAR 0 1
61679: PUSH
61680: LD_VAR 0 2
61684: PUSH
61685: LD_INT 3
61687: PLUS
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: LIST
61696: PUSH
61697: LD_VAR 0 1
61701: PUSH
61702: LD_INT 4
61704: PLUS
61705: PUSH
61706: LD_VAR 0 2
61710: PUSH
61711: LD_INT 4
61713: PLUS
61714: PUSH
61715: LD_INT 5
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: LIST
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: ST_TO_ADDR
// end ; 2 :
61730: GO 62289
61732: LD_INT 2
61734: DOUBLE
61735: EQUAL
61736: IFTRUE 61740
61738: GO 61869
61740: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61741: LD_ADDR_VAR 0 5
61745: PUSH
61746: LD_VAR 0 1
61750: PUSH
61751: LD_VAR 0 2
61755: PUSH
61756: LD_INT 3
61758: MINUS
61759: PUSH
61760: LD_INT 3
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: LIST
61767: PUSH
61768: LD_VAR 0 1
61772: PUSH
61773: LD_INT 4
61775: PLUS
61776: PUSH
61777: LD_VAR 0 2
61781: PUSH
61782: LD_INT 4
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: LIST
61789: PUSH
61790: LD_VAR 0 1
61794: PUSH
61795: LD_VAR 0 2
61799: PUSH
61800: LD_INT 4
61802: PLUS
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: LIST
61811: PUSH
61812: LD_VAR 0 1
61816: PUSH
61817: LD_INT 3
61819: MINUS
61820: PUSH
61821: LD_VAR 0 2
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: LIST
61833: PUSH
61834: LD_VAR 0 1
61838: PUSH
61839: LD_INT 4
61841: MINUS
61842: PUSH
61843: LD_VAR 0 2
61847: PUSH
61848: LD_INT 4
61850: MINUS
61851: PUSH
61852: LD_INT 2
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: LIST
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: ST_TO_ADDR
// end ; 3 :
61867: GO 62289
61869: LD_INT 3
61871: DOUBLE
61872: EQUAL
61873: IFTRUE 61877
61875: GO 62010
61877: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61878: LD_ADDR_VAR 0 5
61882: PUSH
61883: LD_VAR 0 1
61887: PUSH
61888: LD_INT 3
61890: PLUS
61891: PUSH
61892: LD_VAR 0 2
61896: PUSH
61897: LD_INT 4
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: LIST
61904: PUSH
61905: LD_VAR 0 1
61909: PUSH
61910: LD_INT 4
61912: PLUS
61913: PUSH
61914: LD_VAR 0 2
61918: PUSH
61919: LD_INT 4
61921: PLUS
61922: PUSH
61923: LD_INT 5
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: LIST
61930: PUSH
61931: LD_VAR 0 1
61935: PUSH
61936: LD_INT 4
61938: MINUS
61939: PUSH
61940: LD_VAR 0 2
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: LIST
61952: PUSH
61953: LD_VAR 0 1
61957: PUSH
61958: LD_VAR 0 2
61962: PUSH
61963: LD_INT 4
61965: MINUS
61966: PUSH
61967: LD_INT 3
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: LIST
61974: PUSH
61975: LD_VAR 0 1
61979: PUSH
61980: LD_INT 3
61982: MINUS
61983: PUSH
61984: LD_VAR 0 2
61988: PUSH
61989: LD_INT 3
61991: MINUS
61992: PUSH
61993: LD_INT 2
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: ST_TO_ADDR
// end ; 4 :
62008: GO 62289
62010: LD_INT 4
62012: DOUBLE
62013: EQUAL
62014: IFTRUE 62018
62016: GO 62151
62018: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62019: LD_ADDR_VAR 0 5
62023: PUSH
62024: LD_VAR 0 1
62028: PUSH
62029: LD_VAR 0 2
62033: PUSH
62034: LD_INT 4
62036: PLUS
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: LIST
62045: PUSH
62046: LD_VAR 0 1
62050: PUSH
62051: LD_INT 3
62053: PLUS
62054: PUSH
62055: LD_VAR 0 2
62059: PUSH
62060: LD_INT 3
62062: PLUS
62063: PUSH
62064: LD_INT 5
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: LIST
62071: PUSH
62072: LD_VAR 0 1
62076: PUSH
62077: LD_INT 4
62079: PLUS
62080: PUSH
62081: LD_VAR 0 2
62085: PUSH
62086: LD_INT 4
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: LIST
62093: PUSH
62094: LD_VAR 0 1
62098: PUSH
62099: LD_VAR 0 2
62103: PUSH
62104: LD_INT 3
62106: MINUS
62107: PUSH
62108: LD_INT 3
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: LIST
62115: PUSH
62116: LD_VAR 0 1
62120: PUSH
62121: LD_INT 4
62123: MINUS
62124: PUSH
62125: LD_VAR 0 2
62129: PUSH
62130: LD_INT 4
62132: MINUS
62133: PUSH
62134: LD_INT 2
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: LIST
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: ST_TO_ADDR
// end ; 5 :
62149: GO 62289
62151: LD_INT 5
62153: DOUBLE
62154: EQUAL
62155: IFTRUE 62159
62157: GO 62288
62159: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62160: LD_ADDR_VAR 0 5
62164: PUSH
62165: LD_VAR 0 1
62169: PUSH
62170: LD_INT 4
62172: MINUS
62173: PUSH
62174: LD_VAR 0 2
62178: PUSH
62179: LD_INT 1
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: LIST
62186: PUSH
62187: LD_VAR 0 1
62191: PUSH
62192: LD_VAR 0 2
62196: PUSH
62197: LD_INT 4
62199: MINUS
62200: PUSH
62201: LD_INT 3
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: LIST
62208: PUSH
62209: LD_VAR 0 1
62213: PUSH
62214: LD_INT 4
62216: PLUS
62217: PUSH
62218: LD_VAR 0 2
62222: PUSH
62223: LD_INT 4
62225: PLUS
62226: PUSH
62227: LD_INT 5
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: LIST
62234: PUSH
62235: LD_VAR 0 1
62239: PUSH
62240: LD_INT 3
62242: PLUS
62243: PUSH
62244: LD_VAR 0 2
62248: PUSH
62249: LD_INT 4
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: LIST
62256: PUSH
62257: LD_VAR 0 1
62261: PUSH
62262: LD_VAR 0 2
62266: PUSH
62267: LD_INT 3
62269: PLUS
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: LIST
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: ST_TO_ADDR
// end ; end ;
62286: GO 62289
62288: POP
// result := list ;
62289: LD_ADDR_VAR 0 4
62293: PUSH
62294: LD_VAR 0 5
62298: ST_TO_ADDR
// end ;
62299: LD_VAR 0 4
62303: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62304: LD_INT 0
62306: PPUSH
62307: PPUSH
62308: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62309: LD_VAR 0 1
62313: NOT
62314: IFTRUE 62342
62316: PUSH
62317: LD_VAR 0 2
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: LD_INT 2
62327: PUSH
62328: LD_INT 3
62330: PUSH
62331: LD_INT 4
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: IN
62340: NOT
62341: OR
62342: IFFALSE 62346
// exit ;
62344: GO 62429
// tmp := [ ] ;
62346: LD_ADDR_VAR 0 5
62350: PUSH
62351: EMPTY
62352: ST_TO_ADDR
// for i in units do
62353: LD_ADDR_VAR 0 4
62357: PUSH
62358: LD_VAR 0 1
62362: PUSH
62363: FOR_IN
62364: IFFALSE 62398
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62366: LD_ADDR_VAR 0 5
62370: PUSH
62371: LD_VAR 0 5
62375: PPUSH
62376: LD_VAR 0 4
62380: PPUSH
62381: LD_VAR 0 2
62385: PPUSH
62386: CALL_OW 259
62390: PPUSH
62391: CALL 63824 0 2
62395: ST_TO_ADDR
62396: GO 62363
62398: POP
62399: POP
// if not tmp then
62400: LD_VAR 0 5
62404: NOT
62405: IFFALSE 62409
// exit ;
62407: GO 62429
// result := SortListByListDesc ( units , tmp ) ;
62409: LD_ADDR_VAR 0 3
62413: PUSH
62414: LD_VAR 0 1
62418: PPUSH
62419: LD_VAR 0 5
62423: PPUSH
62424: CALL_OW 77
62428: ST_TO_ADDR
// end ;
62429: LD_VAR 0 3
62433: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62434: LD_INT 0
62436: PPUSH
62437: PPUSH
62438: PPUSH
// result := false ;
62439: LD_ADDR_VAR 0 3
62443: PUSH
62444: LD_INT 0
62446: ST_TO_ADDR
// if not building then
62447: LD_VAR 0 2
62451: NOT
62452: IFFALSE 62456
// exit ;
62454: GO 62600
// x := GetX ( building ) ;
62456: LD_ADDR_VAR 0 4
62460: PUSH
62461: LD_VAR 0 2
62465: PPUSH
62466: CALL_OW 250
62470: ST_TO_ADDR
// y := GetY ( building ) ;
62471: LD_ADDR_VAR 0 5
62475: PUSH
62476: LD_VAR 0 2
62480: PPUSH
62481: CALL_OW 251
62485: ST_TO_ADDR
// if not x or not y then
62486: LD_VAR 0 4
62490: NOT
62491: IFTRUE 62500
62493: PUSH
62494: LD_VAR 0 5
62498: NOT
62499: OR
62500: IFFALSE 62504
// exit ;
62502: GO 62600
// if GetTaskList ( unit ) then
62504: LD_VAR 0 1
62508: PPUSH
62509: CALL_OW 437
62513: IFFALSE 62600
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62515: LD_STRING e
62517: PUSH
62518: LD_VAR 0 1
62522: PPUSH
62523: CALL_OW 437
62527: PUSH
62528: LD_INT 1
62530: ARRAY
62531: PUSH
62532: LD_INT 1
62534: ARRAY
62535: EQUAL
62536: IFFALSE 62563
62538: PUSH
62539: LD_VAR 0 4
62543: PUSH
62544: LD_VAR 0 1
62548: PPUSH
62549: CALL_OW 437
62553: PUSH
62554: LD_INT 1
62556: ARRAY
62557: PUSH
62558: LD_INT 2
62560: ARRAY
62561: EQUAL
62562: AND
62563: IFFALSE 62590
62565: PUSH
62566: LD_VAR 0 5
62570: PUSH
62571: LD_VAR 0 1
62575: PPUSH
62576: CALL_OW 437
62580: PUSH
62581: LD_INT 1
62583: ARRAY
62584: PUSH
62585: LD_INT 3
62587: ARRAY
62588: EQUAL
62589: AND
62590: IFFALSE 62600
// result := true end ;
62592: LD_ADDR_VAR 0 3
62596: PUSH
62597: LD_INT 1
62599: ST_TO_ADDR
// end ;
62600: LD_VAR 0 3
62604: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62605: LD_INT 0
62607: PPUSH
// result := false ;
62608: LD_ADDR_VAR 0 4
62612: PUSH
62613: LD_INT 0
62615: ST_TO_ADDR
// if GetTaskList ( unit ) then
62616: LD_VAR 0 1
62620: PPUSH
62621: CALL_OW 437
62625: IFFALSE 62712
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62627: LD_STRING M
62629: PUSH
62630: LD_VAR 0 1
62634: PPUSH
62635: CALL_OW 437
62639: PUSH
62640: LD_INT 1
62642: ARRAY
62643: PUSH
62644: LD_INT 1
62646: ARRAY
62647: EQUAL
62648: IFFALSE 62675
62650: PUSH
62651: LD_VAR 0 2
62655: PUSH
62656: LD_VAR 0 1
62660: PPUSH
62661: CALL_OW 437
62665: PUSH
62666: LD_INT 1
62668: ARRAY
62669: PUSH
62670: LD_INT 2
62672: ARRAY
62673: EQUAL
62674: AND
62675: IFFALSE 62702
62677: PUSH
62678: LD_VAR 0 3
62682: PUSH
62683: LD_VAR 0 1
62687: PPUSH
62688: CALL_OW 437
62692: PUSH
62693: LD_INT 1
62695: ARRAY
62696: PUSH
62697: LD_INT 3
62699: ARRAY
62700: EQUAL
62701: AND
62702: IFFALSE 62712
// result := true ;
62704: LD_ADDR_VAR 0 4
62708: PUSH
62709: LD_INT 1
62711: ST_TO_ADDR
// end ; end ;
62712: LD_VAR 0 4
62716: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62717: LD_INT 0
62719: PPUSH
62720: PPUSH
62721: PPUSH
62722: PPUSH
// if not unit or not area then
62723: LD_VAR 0 1
62727: NOT
62728: IFTRUE 62737
62730: PUSH
62731: LD_VAR 0 2
62735: NOT
62736: OR
62737: IFFALSE 62741
// exit ;
62739: GO 62917
// tmp := AreaToList ( area , i ) ;
62741: LD_ADDR_VAR 0 6
62745: PUSH
62746: LD_VAR 0 2
62750: PPUSH
62751: LD_VAR 0 5
62755: PPUSH
62756: CALL_OW 517
62760: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62761: LD_ADDR_VAR 0 5
62765: PUSH
62766: DOUBLE
62767: LD_INT 1
62769: DEC
62770: ST_TO_ADDR
62771: LD_VAR 0 6
62775: PUSH
62776: LD_INT 1
62778: ARRAY
62779: PUSH
62780: FOR_TO
62781: IFFALSE 62915
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62783: LD_ADDR_VAR 0 7
62787: PUSH
62788: LD_VAR 0 6
62792: PUSH
62793: LD_INT 1
62795: ARRAY
62796: PUSH
62797: LD_VAR 0 5
62801: ARRAY
62802: PUSH
62803: LD_VAR 0 6
62807: PUSH
62808: LD_INT 2
62810: ARRAY
62811: PUSH
62812: LD_VAR 0 5
62816: ARRAY
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
62822: LD_INT 92
62824: PUSH
62825: LD_VAR 0 7
62829: PUSH
62830: LD_INT 1
62832: ARRAY
62833: PUSH
62834: LD_VAR 0 7
62838: PUSH
62839: LD_INT 2
62841: ARRAY
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: PPUSH
62852: CALL_OW 69
62856: PUSH
62857: LD_INT 0
62859: EQUAL
62860: IFFALSE 62913
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62862: LD_VAR 0 1
62866: PPUSH
62867: LD_VAR 0 7
62871: PUSH
62872: LD_INT 1
62874: ARRAY
62875: PPUSH
62876: LD_VAR 0 7
62880: PUSH
62881: LD_INT 2
62883: ARRAY
62884: PPUSH
62885: LD_VAR 0 3
62889: PPUSH
62890: CALL_OW 48
// result := IsPlaced ( unit ) ;
62894: LD_ADDR_VAR 0 4
62898: PUSH
62899: LD_VAR 0 1
62903: PPUSH
62904: CALL_OW 305
62908: ST_TO_ADDR
// exit ;
62909: POP
62910: POP
62911: GO 62917
// end ; end ;
62913: GO 62780
62915: POP
62916: POP
// end ;
62917: LD_VAR 0 4
62921: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62922: LD_INT 0
62924: PPUSH
62925: PPUSH
62926: PPUSH
// if not side or side > 8 then
62927: LD_VAR 0 1
62931: NOT
62932: IFTRUE 62944
62934: PUSH
62935: LD_VAR 0 1
62939: PUSH
62940: LD_INT 8
62942: GREATER
62943: OR
62944: IFFALSE 62948
// exit ;
62946: GO 63135
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62948: LD_ADDR_VAR 0 4
62952: PUSH
62953: LD_INT 22
62955: PUSH
62956: LD_VAR 0 1
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 21
62967: PUSH
62968: LD_INT 3
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PPUSH
62979: CALL_OW 69
62983: ST_TO_ADDR
// if not tmp then
62984: LD_VAR 0 4
62988: NOT
62989: IFFALSE 62993
// exit ;
62991: GO 63135
// enable_addtolog := true ;
62993: LD_ADDR_OWVAR 81
62997: PUSH
62998: LD_INT 1
63000: ST_TO_ADDR
// AddToLog ( [ ) ;
63001: LD_STRING [
63003: PPUSH
63004: CALL_OW 561
// for i in tmp do
63008: LD_ADDR_VAR 0 3
63012: PUSH
63013: LD_VAR 0 4
63017: PUSH
63018: FOR_IN
63019: IFFALSE 63126
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63021: LD_STRING [
63023: PUSH
63024: LD_VAR 0 3
63028: PPUSH
63029: CALL_OW 266
63033: STR
63034: PUSH
63035: LD_STRING , 
63037: STR
63038: PUSH
63039: LD_VAR 0 3
63043: PPUSH
63044: CALL_OW 250
63048: STR
63049: PUSH
63050: LD_STRING , 
63052: STR
63053: PUSH
63054: LD_VAR 0 3
63058: PPUSH
63059: CALL_OW 251
63063: STR
63064: PUSH
63065: LD_STRING , 
63067: STR
63068: PUSH
63069: LD_VAR 0 3
63073: PPUSH
63074: CALL_OW 254
63078: STR
63079: PUSH
63080: LD_STRING , 
63082: STR
63083: PUSH
63084: LD_VAR 0 3
63088: PPUSH
63089: LD_INT 1
63091: PPUSH
63092: CALL_OW 268
63096: STR
63097: PUSH
63098: LD_STRING , 
63100: STR
63101: PUSH
63102: LD_VAR 0 3
63106: PPUSH
63107: LD_INT 2
63109: PPUSH
63110: CALL_OW 268
63114: STR
63115: PUSH
63116: LD_STRING ],
63118: STR
63119: PPUSH
63120: CALL_OW 561
// end ;
63124: GO 63018
63126: POP
63127: POP
// AddToLog ( ]; ) ;
63128: LD_STRING ];
63130: PPUSH
63131: CALL_OW 561
// end ;
63135: LD_VAR 0 2
63139: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63140: LD_INT 0
63142: PPUSH
63143: PPUSH
63144: PPUSH
63145: PPUSH
63146: PPUSH
// if not area or not rate or not max then
63147: LD_VAR 0 1
63151: NOT
63152: IFTRUE 63161
63154: PUSH
63155: LD_VAR 0 2
63159: NOT
63160: OR
63161: IFTRUE 63170
63163: PUSH
63164: LD_VAR 0 4
63168: NOT
63169: OR
63170: IFFALSE 63174
// exit ;
63172: GO 63363
// while 1 do
63174: LD_INT 1
63176: IFFALSE 63363
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63178: LD_ADDR_VAR 0 9
63182: PUSH
63183: LD_VAR 0 1
63187: PPUSH
63188: LD_INT 1
63190: PPUSH
63191: CALL_OW 287
63195: PUSH
63196: LD_INT 10
63198: MUL
63199: ST_TO_ADDR
// r := rate / 10 ;
63200: LD_ADDR_VAR 0 7
63204: PUSH
63205: LD_VAR 0 2
63209: PUSH
63210: LD_INT 10
63212: DIVREAL
63213: ST_TO_ADDR
// time := 1 1$00 ;
63214: LD_ADDR_VAR 0 8
63218: PUSH
63219: LD_INT 2100
63221: ST_TO_ADDR
// if amount < min then
63222: LD_VAR 0 9
63226: PUSH
63227: LD_VAR 0 3
63231: LESS
63232: IFFALSE 63250
// r := r * 2 else
63234: LD_ADDR_VAR 0 7
63238: PUSH
63239: LD_VAR 0 7
63243: PUSH
63244: LD_INT 2
63246: MUL
63247: ST_TO_ADDR
63248: GO 63276
// if amount > max then
63250: LD_VAR 0 9
63254: PUSH
63255: LD_VAR 0 4
63259: GREATER
63260: IFFALSE 63276
// r := r / 2 ;
63262: LD_ADDR_VAR 0 7
63266: PUSH
63267: LD_VAR 0 7
63271: PUSH
63272: LD_INT 2
63274: DIVREAL
63275: ST_TO_ADDR
// time := time / r ;
63276: LD_ADDR_VAR 0 8
63280: PUSH
63281: LD_VAR 0 8
63285: PUSH
63286: LD_VAR 0 7
63290: DIVREAL
63291: ST_TO_ADDR
// if time < 0 then
63292: LD_VAR 0 8
63296: PUSH
63297: LD_INT 0
63299: LESS
63300: IFFALSE 63317
// time := time * - 1 ;
63302: LD_ADDR_VAR 0 8
63306: PUSH
63307: LD_VAR 0 8
63311: PUSH
63312: LD_INT 1
63314: NEG
63315: MUL
63316: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63317: LD_VAR 0 8
63321: PUSH
63322: LD_INT 35
63324: PPUSH
63325: LD_INT 875
63327: PPUSH
63328: CALL_OW 12
63332: PLUS
63333: PPUSH
63334: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63338: LD_INT 1
63340: PPUSH
63341: LD_INT 5
63343: PPUSH
63344: CALL_OW 12
63348: PPUSH
63349: LD_VAR 0 1
63353: PPUSH
63354: LD_INT 1
63356: PPUSH
63357: CALL_OW 55
// end ;
63361: GO 63174
// end ;
63363: LD_VAR 0 5
63367: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63368: LD_INT 0
63370: PPUSH
63371: PPUSH
63372: PPUSH
63373: PPUSH
63374: PPUSH
63375: PPUSH
63376: PPUSH
63377: PPUSH
// if not turrets or not factories then
63378: LD_VAR 0 1
63382: NOT
63383: IFTRUE 63392
63385: PUSH
63386: LD_VAR 0 2
63390: NOT
63391: OR
63392: IFFALSE 63396
// exit ;
63394: GO 63703
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63396: LD_ADDR_VAR 0 10
63400: PUSH
63401: LD_INT 5
63403: PUSH
63404: LD_INT 6
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: LD_INT 4
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 3
63423: PUSH
63424: LD_INT 5
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 24
63438: PUSH
63439: LD_INT 25
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 23
63448: PUSH
63449: LD_INT 27
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 42
63462: PUSH
63463: LD_INT 43
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 44
63472: PUSH
63473: LD_INT 46
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 45
63482: PUSH
63483: LD_INT 47
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: LIST
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: LIST
63499: ST_TO_ADDR
// result := [ ] ;
63500: LD_ADDR_VAR 0 3
63504: PUSH
63505: EMPTY
63506: ST_TO_ADDR
// for i in turrets do
63507: LD_ADDR_VAR 0 4
63511: PUSH
63512: LD_VAR 0 1
63516: PUSH
63517: FOR_IN
63518: IFFALSE 63701
// begin nat := GetNation ( i ) ;
63520: LD_ADDR_VAR 0 7
63524: PUSH
63525: LD_VAR 0 4
63529: PPUSH
63530: CALL_OW 248
63534: ST_TO_ADDR
// weapon := 0 ;
63535: LD_ADDR_VAR 0 8
63539: PUSH
63540: LD_INT 0
63542: ST_TO_ADDR
// if not nat then
63543: LD_VAR 0 7
63547: NOT
63548: IFFALSE 63552
// continue ;
63550: GO 63517
// for j in list [ nat ] do
63552: LD_ADDR_VAR 0 5
63556: PUSH
63557: LD_VAR 0 10
63561: PUSH
63562: LD_VAR 0 7
63566: ARRAY
63567: PUSH
63568: FOR_IN
63569: IFFALSE 63610
// if GetBWeapon ( i ) = j [ 1 ] then
63571: LD_VAR 0 4
63575: PPUSH
63576: CALL_OW 269
63580: PUSH
63581: LD_VAR 0 5
63585: PUSH
63586: LD_INT 1
63588: ARRAY
63589: EQUAL
63590: IFFALSE 63608
// begin weapon := j [ 2 ] ;
63592: LD_ADDR_VAR 0 8
63596: PUSH
63597: LD_VAR 0 5
63601: PUSH
63602: LD_INT 2
63604: ARRAY
63605: ST_TO_ADDR
// break ;
63606: GO 63610
// end ;
63608: GO 63568
63610: POP
63611: POP
// if not weapon then
63612: LD_VAR 0 8
63616: NOT
63617: IFFALSE 63621
// continue ;
63619: GO 63517
// for k in factories do
63621: LD_ADDR_VAR 0 6
63625: PUSH
63626: LD_VAR 0 2
63630: PUSH
63631: FOR_IN
63632: IFFALSE 63697
// begin weapons := AvailableWeaponList ( k ) ;
63634: LD_ADDR_VAR 0 9
63638: PUSH
63639: LD_VAR 0 6
63643: PPUSH
63644: CALL_OW 478
63648: ST_TO_ADDR
// if not weapons then
63649: LD_VAR 0 9
63653: NOT
63654: IFFALSE 63658
// continue ;
63656: GO 63631
// if weapon in weapons then
63658: LD_VAR 0 8
63662: PUSH
63663: LD_VAR 0 9
63667: IN
63668: IFFALSE 63695
// begin result := [ i , weapon ] ;
63670: LD_ADDR_VAR 0 3
63674: PUSH
63675: LD_VAR 0 4
63679: PUSH
63680: LD_VAR 0 8
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: ST_TO_ADDR
// exit ;
63689: POP
63690: POP
63691: POP
63692: POP
63693: GO 63703
// end ; end ;
63695: GO 63631
63697: POP
63698: POP
// end ;
63699: GO 63517
63701: POP
63702: POP
// end ;
63703: LD_VAR 0 3
63707: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63708: LD_INT 0
63710: PPUSH
// if not side or side > 8 then
63711: LD_VAR 0 3
63715: NOT
63716: IFTRUE 63728
63718: PUSH
63719: LD_VAR 0 3
63723: PUSH
63724: LD_INT 8
63726: GREATER
63727: OR
63728: IFFALSE 63732
// exit ;
63730: GO 63791
// if not range then
63732: LD_VAR 0 4
63736: NOT
63737: IFFALSE 63748
// range := - 12 ;
63739: LD_ADDR_VAR 0 4
63743: PUSH
63744: LD_INT 12
63746: NEG
63747: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63748: LD_VAR 0 1
63752: PPUSH
63753: LD_VAR 0 2
63757: PPUSH
63758: LD_VAR 0 3
63762: PPUSH
63763: LD_VAR 0 4
63767: PPUSH
63768: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63772: LD_VAR 0 1
63776: PPUSH
63777: LD_VAR 0 2
63781: PPUSH
63782: LD_VAR 0 3
63786: PPUSH
63787: CALL_OW 331
// end ;
63791: LD_VAR 0 5
63795: RET
// export function Video ( mode ) ; begin
63796: LD_INT 0
63798: PPUSH
// ingame_video = mode ;
63799: LD_ADDR_OWVAR 52
63803: PUSH
63804: LD_VAR 0 1
63808: ST_TO_ADDR
// interface_hidden = mode ;
63809: LD_ADDR_OWVAR 54
63813: PUSH
63814: LD_VAR 0 1
63818: ST_TO_ADDR
// end ;
63819: LD_VAR 0 2
63823: RET
// export function Join ( array , element ) ; begin
63824: LD_INT 0
63826: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63827: LD_ADDR_VAR 0 3
63831: PUSH
63832: LD_VAR 0 1
63836: PPUSH
63837: LD_VAR 0 1
63841: PUSH
63842: LD_INT 1
63844: PLUS
63845: PPUSH
63846: LD_VAR 0 2
63850: PPUSH
63851: CALL_OW 1
63855: ST_TO_ADDR
// end ;
63856: LD_VAR 0 3
63860: RET
// export function JoinUnion ( array , element ) ; begin
63861: LD_INT 0
63863: PPUSH
// result := array union element ;
63864: LD_ADDR_VAR 0 3
63868: PUSH
63869: LD_VAR 0 1
63873: PUSH
63874: LD_VAR 0 2
63878: UNION
63879: ST_TO_ADDR
// end ;
63880: LD_VAR 0 3
63884: RET
// export function GetBehemoths ( side ) ; begin
63885: LD_INT 0
63887: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63888: LD_ADDR_VAR 0 2
63892: PUSH
63893: LD_INT 22
63895: PUSH
63896: LD_VAR 0 1
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 31
63907: PUSH
63908: LD_INT 25
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PPUSH
63919: CALL_OW 69
63923: ST_TO_ADDR
// end ;
63924: LD_VAR 0 2
63928: RET
// export function Shuffle ( array ) ; var i , index ; begin
63929: LD_INT 0
63931: PPUSH
63932: PPUSH
63933: PPUSH
// result := [ ] ;
63934: LD_ADDR_VAR 0 2
63938: PUSH
63939: EMPTY
63940: ST_TO_ADDR
// if not array then
63941: LD_VAR 0 1
63945: NOT
63946: IFFALSE 63950
// exit ;
63948: GO 64049
// Randomize ;
63950: CALL_OW 10
// for i = array downto 1 do
63954: LD_ADDR_VAR 0 3
63958: PUSH
63959: DOUBLE
63960: LD_VAR 0 1
63964: INC
63965: ST_TO_ADDR
63966: LD_INT 1
63968: PUSH
63969: FOR_DOWNTO
63970: IFFALSE 64047
// begin index := rand ( 1 , array ) ;
63972: LD_ADDR_VAR 0 4
63976: PUSH
63977: LD_INT 1
63979: PPUSH
63980: LD_VAR 0 1
63984: PPUSH
63985: CALL_OW 12
63989: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63990: LD_ADDR_VAR 0 2
63994: PUSH
63995: LD_VAR 0 2
63999: PPUSH
64000: LD_VAR 0 2
64004: PUSH
64005: LD_INT 1
64007: PLUS
64008: PPUSH
64009: LD_VAR 0 1
64013: PUSH
64014: LD_VAR 0 4
64018: ARRAY
64019: PPUSH
64020: CALL_OW 2
64024: ST_TO_ADDR
// array := Delete ( array , index ) ;
64025: LD_ADDR_VAR 0 1
64029: PUSH
64030: LD_VAR 0 1
64034: PPUSH
64035: LD_VAR 0 4
64039: PPUSH
64040: CALL_OW 3
64044: ST_TO_ADDR
// end ;
64045: GO 63969
64047: POP
64048: POP
// end ;
64049: LD_VAR 0 2
64053: RET
// export function GetBaseMaterials ( base ) ; begin
64054: LD_INT 0
64056: PPUSH
// result := [ 0 , 0 , 0 ] ;
64057: LD_ADDR_VAR 0 2
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: LD_INT 0
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: LIST
64075: ST_TO_ADDR
// if not base then
64076: LD_VAR 0 1
64080: NOT
64081: IFFALSE 64085
// exit ;
64083: GO 64134
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64085: LD_ADDR_VAR 0 2
64089: PUSH
64090: LD_VAR 0 1
64094: PPUSH
64095: LD_INT 1
64097: PPUSH
64098: CALL_OW 275
64102: PUSH
64103: LD_VAR 0 1
64107: PPUSH
64108: LD_INT 2
64110: PPUSH
64111: CALL_OW 275
64115: PUSH
64116: LD_VAR 0 1
64120: PPUSH
64121: LD_INT 3
64123: PPUSH
64124: CALL_OW 275
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: LIST
64133: ST_TO_ADDR
// end ;
64134: LD_VAR 0 2
64138: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64139: LD_INT 0
64141: PPUSH
64142: PPUSH
// result := array ;
64143: LD_ADDR_VAR 0 3
64147: PUSH
64148: LD_VAR 0 1
64152: ST_TO_ADDR
// if size >= result then
64153: LD_VAR 0 2
64157: PUSH
64158: LD_VAR 0 3
64162: GREATEREQUAL
64163: IFFALSE 64167
// exit ;
64165: GO 64217
// if size then
64167: LD_VAR 0 2
64171: IFFALSE 64217
// for i := array downto size do
64173: LD_ADDR_VAR 0 4
64177: PUSH
64178: DOUBLE
64179: LD_VAR 0 1
64183: INC
64184: ST_TO_ADDR
64185: LD_VAR 0 2
64189: PUSH
64190: FOR_DOWNTO
64191: IFFALSE 64215
// result := Delete ( result , result ) ;
64193: LD_ADDR_VAR 0 3
64197: PUSH
64198: LD_VAR 0 3
64202: PPUSH
64203: LD_VAR 0 3
64207: PPUSH
64208: CALL_OW 3
64212: ST_TO_ADDR
64213: GO 64190
64215: POP
64216: POP
// end ;
64217: LD_VAR 0 3
64221: RET
// export function ComExit ( unit ) ; var tmp ; begin
64222: LD_INT 0
64224: PPUSH
64225: PPUSH
// if not IsInUnit ( unit ) then
64226: LD_VAR 0 1
64230: PPUSH
64231: CALL_OW 310
64235: NOT
64236: IFFALSE 64240
// exit ;
64238: GO 64300
// tmp := IsInUnit ( unit ) ;
64240: LD_ADDR_VAR 0 3
64244: PUSH
64245: LD_VAR 0 1
64249: PPUSH
64250: CALL_OW 310
64254: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64255: LD_VAR 0 3
64259: PPUSH
64260: CALL_OW 247
64264: PUSH
64265: LD_INT 2
64267: EQUAL
64268: IFFALSE 64281
// ComExitVehicle ( unit ) else
64270: LD_VAR 0 1
64274: PPUSH
64275: CALL_OW 121
64279: GO 64290
// ComExitBuilding ( unit ) ;
64281: LD_VAR 0 1
64285: PPUSH
64286: CALL_OW 122
// result := tmp ;
64290: LD_ADDR_VAR 0 2
64294: PUSH
64295: LD_VAR 0 3
64299: ST_TO_ADDR
// end ;
64300: LD_VAR 0 2
64304: RET
// export function ComExitAll ( units ) ; var i ; begin
64305: LD_INT 0
64307: PPUSH
64308: PPUSH
// if not units then
64309: LD_VAR 0 1
64313: NOT
64314: IFFALSE 64318
// exit ;
64316: GO 64344
// for i in units do
64318: LD_ADDR_VAR 0 3
64322: PUSH
64323: LD_VAR 0 1
64327: PUSH
64328: FOR_IN
64329: IFFALSE 64342
// ComExit ( i ) ;
64331: LD_VAR 0 3
64335: PPUSH
64336: CALL 64222 0 1
64340: GO 64328
64342: POP
64343: POP
// end ;
64344: LD_VAR 0 2
64348: RET
// export function ResetHc ; begin
64349: LD_INT 0
64351: PPUSH
// InitHc ;
64352: CALL_OW 19
// hc_importance := 0 ;
64356: LD_ADDR_OWVAR 32
64360: PUSH
64361: LD_INT 0
64363: ST_TO_ADDR
// end ;
64364: LD_VAR 0 1
64368: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64369: LD_INT 0
64371: PPUSH
64372: PPUSH
64373: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64374: LD_ADDR_VAR 0 6
64378: PUSH
64379: LD_VAR 0 1
64383: PUSH
64384: LD_VAR 0 3
64388: PLUS
64389: PUSH
64390: LD_INT 2
64392: DIV
64393: ST_TO_ADDR
// if _x < 0 then
64394: LD_VAR 0 6
64398: PUSH
64399: LD_INT 0
64401: LESS
64402: IFFALSE 64419
// _x := _x * - 1 ;
64404: LD_ADDR_VAR 0 6
64408: PUSH
64409: LD_VAR 0 6
64413: PUSH
64414: LD_INT 1
64416: NEG
64417: MUL
64418: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64419: LD_ADDR_VAR 0 7
64423: PUSH
64424: LD_VAR 0 2
64428: PUSH
64429: LD_VAR 0 4
64433: PLUS
64434: PUSH
64435: LD_INT 2
64437: DIV
64438: ST_TO_ADDR
// if _y < 0 then
64439: LD_VAR 0 7
64443: PUSH
64444: LD_INT 0
64446: LESS
64447: IFFALSE 64464
// _y := _y * - 1 ;
64449: LD_ADDR_VAR 0 7
64453: PUSH
64454: LD_VAR 0 7
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: MUL
64463: ST_TO_ADDR
// result := [ _x , _y ] ;
64464: LD_ADDR_VAR 0 5
64468: PUSH
64469: LD_VAR 0 6
64473: PUSH
64474: LD_VAR 0 7
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: ST_TO_ADDR
// end ;
64483: LD_VAR 0 5
64487: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64488: LD_INT 0
64490: PPUSH
64491: PPUSH
64492: PPUSH
64493: PPUSH
// task := GetTaskList ( unit ) ;
64494: LD_ADDR_VAR 0 7
64498: PUSH
64499: LD_VAR 0 1
64503: PPUSH
64504: CALL_OW 437
64508: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64509: LD_VAR 0 7
64513: NOT
64514: IFFALSE 64533
64516: PUSH
64517: LD_VAR 0 1
64521: PPUSH
64522: LD_VAR 0 2
64526: PPUSH
64527: CALL_OW 308
64531: NOT
64532: AND
64533: IFFALSE 64537
// exit ;
64535: GO 64655
// if IsInArea ( unit , area ) then
64537: LD_VAR 0 1
64541: PPUSH
64542: LD_VAR 0 2
64546: PPUSH
64547: CALL_OW 308
64551: IFFALSE 64569
// begin ComMoveToArea ( unit , goAway ) ;
64553: LD_VAR 0 1
64557: PPUSH
64558: LD_VAR 0 3
64562: PPUSH
64563: CALL_OW 113
// exit ;
64567: GO 64655
// end ; if task [ 1 ] [ 1 ] <> M then
64569: LD_VAR 0 7
64573: PUSH
64574: LD_INT 1
64576: ARRAY
64577: PUSH
64578: LD_INT 1
64580: ARRAY
64581: PUSH
64582: LD_STRING M
64584: NONEQUAL
64585: IFFALSE 64589
// exit ;
64587: GO 64655
// x := task [ 1 ] [ 2 ] ;
64589: LD_ADDR_VAR 0 5
64593: PUSH
64594: LD_VAR 0 7
64598: PUSH
64599: LD_INT 1
64601: ARRAY
64602: PUSH
64603: LD_INT 2
64605: ARRAY
64606: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64607: LD_ADDR_VAR 0 6
64611: PUSH
64612: LD_VAR 0 7
64616: PUSH
64617: LD_INT 1
64619: ARRAY
64620: PUSH
64621: LD_INT 3
64623: ARRAY
64624: ST_TO_ADDR
// if InArea ( x , y , area ) then
64625: LD_VAR 0 5
64629: PPUSH
64630: LD_VAR 0 6
64634: PPUSH
64635: LD_VAR 0 2
64639: PPUSH
64640: CALL_OW 309
64644: IFFALSE 64655
// ComStop ( unit ) ;
64646: LD_VAR 0 1
64650: PPUSH
64651: CALL_OW 141
// end ;
64655: LD_VAR 0 4
64659: RET
// export function Abs ( value ) ; begin
64660: LD_INT 0
64662: PPUSH
// result := value ;
64663: LD_ADDR_VAR 0 2
64667: PUSH
64668: LD_VAR 0 1
64672: ST_TO_ADDR
// if value < 0 then
64673: LD_VAR 0 1
64677: PUSH
64678: LD_INT 0
64680: LESS
64681: IFFALSE 64698
// result := value * - 1 ;
64683: LD_ADDR_VAR 0 2
64687: PUSH
64688: LD_VAR 0 1
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: MUL
64697: ST_TO_ADDR
// end ;
64698: LD_VAR 0 2
64702: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64703: LD_INT 0
64705: PPUSH
64706: PPUSH
64707: PPUSH
64708: PPUSH
64709: PPUSH
64710: PPUSH
64711: PPUSH
64712: PPUSH
// if not unit or not building then
64713: LD_VAR 0 1
64717: NOT
64718: IFTRUE 64727
64720: PUSH
64721: LD_VAR 0 2
64725: NOT
64726: OR
64727: IFFALSE 64731
// exit ;
64729: GO 64959
// x := GetX ( building ) ;
64731: LD_ADDR_VAR 0 4
64735: PUSH
64736: LD_VAR 0 2
64740: PPUSH
64741: CALL_OW 250
64745: ST_TO_ADDR
// y := GetY ( building ) ;
64746: LD_ADDR_VAR 0 6
64750: PUSH
64751: LD_VAR 0 2
64755: PPUSH
64756: CALL_OW 251
64760: ST_TO_ADDR
// d := GetDir ( building ) ;
64761: LD_ADDR_VAR 0 8
64765: PUSH
64766: LD_VAR 0 2
64770: PPUSH
64771: CALL_OW 254
64775: ST_TO_ADDR
// r := 4 ;
64776: LD_ADDR_VAR 0 9
64780: PUSH
64781: LD_INT 4
64783: ST_TO_ADDR
// for i := 1 to 5 do
64784: LD_ADDR_VAR 0 10
64788: PUSH
64789: DOUBLE
64790: LD_INT 1
64792: DEC
64793: ST_TO_ADDR
64794: LD_INT 5
64796: PUSH
64797: FOR_TO
64798: IFFALSE 64957
// begin _x := ShiftX ( x , d , r + i ) ;
64800: LD_ADDR_VAR 0 5
64804: PUSH
64805: LD_VAR 0 4
64809: PPUSH
64810: LD_VAR 0 8
64814: PPUSH
64815: LD_VAR 0 9
64819: PUSH
64820: LD_VAR 0 10
64824: PLUS
64825: PPUSH
64826: CALL_OW 272
64830: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64831: LD_ADDR_VAR 0 7
64835: PUSH
64836: LD_VAR 0 6
64840: PPUSH
64841: LD_VAR 0 8
64845: PPUSH
64846: LD_VAR 0 9
64850: PUSH
64851: LD_VAR 0 10
64855: PLUS
64856: PPUSH
64857: CALL_OW 273
64861: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64862: LD_VAR 0 5
64866: PPUSH
64867: LD_VAR 0 7
64871: PPUSH
64872: CALL_OW 488
64876: IFFALSE 64911
64878: PUSH
64879: LD_VAR 0 5
64883: PPUSH
64884: LD_VAR 0 7
64888: PPUSH
64889: CALL_OW 428
64893: PPUSH
64894: CALL_OW 247
64898: PUSH
64899: LD_INT 3
64901: PUSH
64902: LD_INT 2
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: IN
64909: NOT
64910: AND
64911: IFFALSE 64955
// begin ComMoveXY ( unit , _x , _y ) ;
64913: LD_VAR 0 1
64917: PPUSH
64918: LD_VAR 0 5
64922: PPUSH
64923: LD_VAR 0 7
64927: PPUSH
64928: CALL_OW 111
// result := [ _x , _y ] ;
64932: LD_ADDR_VAR 0 3
64936: PUSH
64937: LD_VAR 0 5
64941: PUSH
64942: LD_VAR 0 7
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: ST_TO_ADDR
// exit ;
64951: POP
64952: POP
64953: GO 64959
// end ; end ;
64955: GO 64797
64957: POP
64958: POP
// end ;
64959: LD_VAR 0 3
64963: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64964: LD_INT 0
64966: PPUSH
64967: PPUSH
64968: PPUSH
// result := 0 ;
64969: LD_ADDR_VAR 0 3
64973: PUSH
64974: LD_INT 0
64976: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64977: LD_VAR 0 1
64981: PUSH
64982: LD_INT 0
64984: LESS
64985: IFTRUE 64997
64987: PUSH
64988: LD_VAR 0 1
64992: PUSH
64993: LD_INT 8
64995: GREATER
64996: OR
64997: IFTRUE 65009
64999: PUSH
65000: LD_VAR 0 2
65004: PUSH
65005: LD_INT 0
65007: LESS
65008: OR
65009: IFTRUE 65021
65011: PUSH
65012: LD_VAR 0 2
65016: PUSH
65017: LD_INT 8
65019: GREATER
65020: OR
65021: IFFALSE 65025
// exit ;
65023: GO 65100
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65025: LD_ADDR_VAR 0 4
65029: PUSH
65030: LD_INT 22
65032: PUSH
65033: LD_VAR 0 2
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PPUSH
65042: CALL_OW 69
65046: PUSH
65047: FOR_IN
65048: IFFALSE 65098
// begin un := UnitShoot ( i ) ;
65050: LD_ADDR_VAR 0 5
65054: PUSH
65055: LD_VAR 0 4
65059: PPUSH
65060: CALL_OW 504
65064: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65065: LD_VAR 0 5
65069: PPUSH
65070: CALL_OW 255
65074: PUSH
65075: LD_VAR 0 1
65079: EQUAL
65080: IFFALSE 65096
// begin result := un ;
65082: LD_ADDR_VAR 0 3
65086: PUSH
65087: LD_VAR 0 5
65091: ST_TO_ADDR
// exit ;
65092: POP
65093: POP
65094: GO 65100
// end ; end ;
65096: GO 65047
65098: POP
65099: POP
// end ;
65100: LD_VAR 0 3
65104: RET
// export function GetCargoBay ( units ) ; begin
65105: LD_INT 0
65107: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65108: LD_ADDR_VAR 0 2
65112: PUSH
65113: LD_VAR 0 1
65117: PPUSH
65118: LD_INT 2
65120: PUSH
65121: LD_INT 34
65123: PUSH
65124: LD_INT 12
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 34
65133: PUSH
65134: LD_INT 51
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 34
65143: PUSH
65144: LD_INT 32
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 34
65153: PUSH
65154: LD_INT 89
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: PPUSH
65168: CALL_OW 72
65172: ST_TO_ADDR
// end ;
65173: LD_VAR 0 2
65177: RET
// export function Negate ( value ) ; begin
65178: LD_INT 0
65180: PPUSH
// result := not value ;
65181: LD_ADDR_VAR 0 2
65185: PUSH
65186: LD_VAR 0 1
65190: NOT
65191: ST_TO_ADDR
// end ;
65192: LD_VAR 0 2
65196: RET
// export function Inc ( value ) ; begin
65197: LD_INT 0
65199: PPUSH
// result := value + 1 ;
65200: LD_ADDR_VAR 0 2
65204: PUSH
65205: LD_VAR 0 1
65209: PUSH
65210: LD_INT 1
65212: PLUS
65213: ST_TO_ADDR
// end ;
65214: LD_VAR 0 2
65218: RET
// export function Dec ( value ) ; begin
65219: LD_INT 0
65221: PPUSH
// result := value - 1 ;
65222: LD_ADDR_VAR 0 2
65226: PUSH
65227: LD_VAR 0 1
65231: PUSH
65232: LD_INT 1
65234: MINUS
65235: ST_TO_ADDR
// end ;
65236: LD_VAR 0 2
65240: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65241: LD_INT 0
65243: PPUSH
65244: PPUSH
65245: PPUSH
65246: PPUSH
65247: PPUSH
65248: PPUSH
65249: PPUSH
65250: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65251: LD_VAR 0 1
65255: PPUSH
65256: LD_VAR 0 2
65260: PPUSH
65261: CALL_OW 488
65265: NOT
65266: IFTRUE 65285
65268: PUSH
65269: LD_VAR 0 3
65273: PPUSH
65274: LD_VAR 0 4
65278: PPUSH
65279: CALL_OW 488
65283: NOT
65284: OR
65285: IFFALSE 65298
// begin result := - 1 ;
65287: LD_ADDR_VAR 0 5
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: ST_TO_ADDR
// exit ;
65296: GO 65533
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65298: LD_ADDR_VAR 0 12
65302: PUSH
65303: LD_VAR 0 1
65307: PPUSH
65308: LD_VAR 0 2
65312: PPUSH
65313: LD_VAR 0 3
65317: PPUSH
65318: LD_VAR 0 4
65322: PPUSH
65323: CALL 64369 0 4
65327: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65328: LD_ADDR_VAR 0 11
65332: PUSH
65333: LD_VAR 0 1
65337: PPUSH
65338: LD_VAR 0 2
65342: PPUSH
65343: LD_VAR 0 12
65347: PUSH
65348: LD_INT 1
65350: ARRAY
65351: PPUSH
65352: LD_VAR 0 12
65356: PUSH
65357: LD_INT 2
65359: ARRAY
65360: PPUSH
65361: CALL_OW 298
65365: ST_TO_ADDR
// distance := 9999 ;
65366: LD_ADDR_VAR 0 10
65370: PUSH
65371: LD_INT 9999
65373: ST_TO_ADDR
// for i := 0 to 5 do
65374: LD_ADDR_VAR 0 6
65378: PUSH
65379: DOUBLE
65380: LD_INT 0
65382: DEC
65383: ST_TO_ADDR
65384: LD_INT 5
65386: PUSH
65387: FOR_TO
65388: IFFALSE 65531
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65390: LD_ADDR_VAR 0 7
65394: PUSH
65395: LD_VAR 0 1
65399: PPUSH
65400: LD_VAR 0 6
65404: PPUSH
65405: LD_VAR 0 11
65409: PPUSH
65410: CALL_OW 272
65414: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65415: LD_ADDR_VAR 0 8
65419: PUSH
65420: LD_VAR 0 2
65424: PPUSH
65425: LD_VAR 0 6
65429: PPUSH
65430: LD_VAR 0 11
65434: PPUSH
65435: CALL_OW 273
65439: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65440: LD_VAR 0 7
65444: PPUSH
65445: LD_VAR 0 8
65449: PPUSH
65450: CALL_OW 488
65454: NOT
65455: IFFALSE 65459
// continue ;
65457: GO 65387
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65459: LD_ADDR_VAR 0 9
65463: PUSH
65464: LD_VAR 0 12
65468: PUSH
65469: LD_INT 1
65471: ARRAY
65472: PPUSH
65473: LD_VAR 0 12
65477: PUSH
65478: LD_INT 2
65480: ARRAY
65481: PPUSH
65482: LD_VAR 0 7
65486: PPUSH
65487: LD_VAR 0 8
65491: PPUSH
65492: CALL_OW 298
65496: ST_TO_ADDR
// if tmp < distance then
65497: LD_VAR 0 9
65501: PUSH
65502: LD_VAR 0 10
65506: LESS
65507: IFFALSE 65529
// begin result := i ;
65509: LD_ADDR_VAR 0 5
65513: PUSH
65514: LD_VAR 0 6
65518: ST_TO_ADDR
// distance := tmp ;
65519: LD_ADDR_VAR 0 10
65523: PUSH
65524: LD_VAR 0 9
65528: ST_TO_ADDR
// end ; end ;
65529: GO 65387
65531: POP
65532: POP
// end ;
65533: LD_VAR 0 5
65537: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65538: LD_INT 0
65540: PPUSH
65541: PPUSH
// if not driver or not IsInUnit ( driver ) then
65542: LD_VAR 0 1
65546: NOT
65547: IFTRUE 65561
65549: PUSH
65550: LD_VAR 0 1
65554: PPUSH
65555: CALL_OW 310
65559: NOT
65560: OR
65561: IFFALSE 65565
// exit ;
65563: GO 65655
// vehicle := IsInUnit ( driver ) ;
65565: LD_ADDR_VAR 0 3
65569: PUSH
65570: LD_VAR 0 1
65574: PPUSH
65575: CALL_OW 310
65579: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65580: LD_VAR 0 1
65584: PPUSH
65585: LD_STRING \
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: LD_INT 0
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: LD_INT 0
65599: PUSH
65600: LD_INT 0
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: PUSH
65615: LD_STRING E
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: LD_VAR 0 3
65628: PUSH
65629: LD_INT 0
65631: PUSH
65632: LD_INT 0
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PPUSH
65651: CALL_OW 446
// end ;
65655: LD_VAR 0 2
65659: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65660: LD_INT 0
65662: PPUSH
65663: PPUSH
// if not driver or not IsInUnit ( driver ) then
65664: LD_VAR 0 1
65668: NOT
65669: IFTRUE 65683
65671: PUSH
65672: LD_VAR 0 1
65676: PPUSH
65677: CALL_OW 310
65681: NOT
65682: OR
65683: IFFALSE 65687
// exit ;
65685: GO 65777
// vehicle := IsInUnit ( driver ) ;
65687: LD_ADDR_VAR 0 3
65691: PUSH
65692: LD_VAR 0 1
65696: PPUSH
65697: CALL_OW 310
65701: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65702: LD_VAR 0 1
65706: PPUSH
65707: LD_STRING \
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: LD_INT 0
65715: PUSH
65716: LD_INT 0
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: LD_INT 0
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: PUSH
65737: LD_STRING E
65739: PUSH
65740: LD_INT 0
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: LD_VAR 0 3
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: LD_INT 0
65756: PUSH
65757: LD_INT 0
65759: PUSH
65760: EMPTY
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PPUSH
65773: CALL_OW 447
// end ;
65777: LD_VAR 0 2
65781: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65782: LD_INT 0
65784: PPUSH
65785: PPUSH
65786: PPUSH
// tmp := [ ] ;
65787: LD_ADDR_VAR 0 5
65791: PUSH
65792: EMPTY
65793: ST_TO_ADDR
// for i in units do
65794: LD_ADDR_VAR 0 4
65798: PUSH
65799: LD_VAR 0 1
65803: PUSH
65804: FOR_IN
65805: IFFALSE 65843
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65807: LD_ADDR_VAR 0 5
65811: PUSH
65812: LD_VAR 0 5
65816: PPUSH
65817: LD_VAR 0 5
65821: PUSH
65822: LD_INT 1
65824: PLUS
65825: PPUSH
65826: LD_VAR 0 4
65830: PPUSH
65831: CALL_OW 256
65835: PPUSH
65836: CALL_OW 2
65840: ST_TO_ADDR
65841: GO 65804
65843: POP
65844: POP
// if not tmp then
65845: LD_VAR 0 5
65849: NOT
65850: IFFALSE 65854
// exit ;
65852: GO 65902
// if asc then
65854: LD_VAR 0 2
65858: IFFALSE 65882
// result := SortListByListAsc ( units , tmp ) else
65860: LD_ADDR_VAR 0 3
65864: PUSH
65865: LD_VAR 0 1
65869: PPUSH
65870: LD_VAR 0 5
65874: PPUSH
65875: CALL_OW 76
65879: ST_TO_ADDR
65880: GO 65902
// result := SortListByListDesc ( units , tmp ) ;
65882: LD_ADDR_VAR 0 3
65886: PUSH
65887: LD_VAR 0 1
65891: PPUSH
65892: LD_VAR 0 5
65896: PPUSH
65897: CALL_OW 77
65901: ST_TO_ADDR
// end ;
65902: LD_VAR 0 3
65906: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65907: LD_INT 0
65909: PPUSH
65910: PPUSH
// task := GetTaskList ( mech ) ;
65911: LD_ADDR_VAR 0 4
65915: PUSH
65916: LD_VAR 0 1
65920: PPUSH
65921: CALL_OW 437
65925: ST_TO_ADDR
// if not task then
65926: LD_VAR 0 4
65930: NOT
65931: IFFALSE 65935
// exit ;
65933: GO 65979
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65935: LD_ADDR_VAR 0 3
65939: PUSH
65940: LD_VAR 0 4
65944: PUSH
65945: LD_INT 1
65947: ARRAY
65948: PUSH
65949: LD_INT 1
65951: ARRAY
65952: PUSH
65953: LD_STRING r
65955: EQUAL
65956: IFFALSE 65978
65958: PUSH
65959: LD_VAR 0 4
65963: PUSH
65964: LD_INT 1
65966: ARRAY
65967: PUSH
65968: LD_INT 4
65970: ARRAY
65971: PUSH
65972: LD_VAR 0 2
65976: EQUAL
65977: AND
65978: ST_TO_ADDR
// end ;
65979: LD_VAR 0 3
65983: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65984: LD_INT 0
65986: PPUSH
// SetDir ( unit , d ) ;
65987: LD_VAR 0 1
65991: PPUSH
65992: LD_VAR 0 4
65996: PPUSH
65997: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
66001: LD_ADDR_VAR 0 6
66005: PUSH
66006: LD_VAR 0 1
66010: PPUSH
66011: LD_VAR 0 2
66015: PPUSH
66016: LD_VAR 0 3
66020: PPUSH
66021: LD_VAR 0 5
66025: PPUSH
66026: CALL_OW 48
66030: ST_TO_ADDR
// end ;
66031: LD_VAR 0 6
66035: RET
// export function ToNaturalNumber ( number ) ; begin
66036: LD_INT 0
66038: PPUSH
// result := number div 1 ;
66039: LD_ADDR_VAR 0 2
66043: PUSH
66044: LD_VAR 0 1
66048: PUSH
66049: LD_INT 1
66051: DIV
66052: ST_TO_ADDR
// if number < 0 then
66053: LD_VAR 0 1
66057: PUSH
66058: LD_INT 0
66060: LESS
66061: IFFALSE 66071
// result := 0 ;
66063: LD_ADDR_VAR 0 2
66067: PUSH
66068: LD_INT 0
66070: ST_TO_ADDR
// end ;
66071: LD_VAR 0 2
66075: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
66076: LD_INT 0
66078: PPUSH
66079: PPUSH
66080: PPUSH
// if not buildings then
66081: LD_VAR 0 1
66085: NOT
66086: IFFALSE 66090
// exit ;
66088: GO 66205
// tmp := [ ] ;
66090: LD_ADDR_VAR 0 5
66094: PUSH
66095: EMPTY
66096: ST_TO_ADDR
// for b in buildings do
66097: LD_ADDR_VAR 0 4
66101: PUSH
66102: LD_VAR 0 1
66106: PUSH
66107: FOR_IN
66108: IFFALSE 66146
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
66110: LD_ADDR_VAR 0 5
66114: PUSH
66115: LD_VAR 0 5
66119: PPUSH
66120: LD_VAR 0 5
66124: PUSH
66125: LD_INT 1
66127: PLUS
66128: PPUSH
66129: LD_VAR 0 4
66133: PPUSH
66134: CALL_OW 266
66138: PPUSH
66139: CALL_OW 1
66143: ST_TO_ADDR
66144: GO 66107
66146: POP
66147: POP
// if not tmp then
66148: LD_VAR 0 5
66152: NOT
66153: IFFALSE 66157
// exit ;
66155: GO 66205
// if asc then
66157: LD_VAR 0 2
66161: IFFALSE 66185
// result := SortListByListAsc ( buildings , tmp ) else
66163: LD_ADDR_VAR 0 3
66167: PUSH
66168: LD_VAR 0 1
66172: PPUSH
66173: LD_VAR 0 5
66177: PPUSH
66178: CALL_OW 76
66182: ST_TO_ADDR
66183: GO 66205
// result := SortListByListDesc ( buildings , tmp ) ;
66185: LD_ADDR_VAR 0 3
66189: PUSH
66190: LD_VAR 0 1
66194: PPUSH
66195: LD_VAR 0 5
66199: PPUSH
66200: CALL_OW 77
66204: ST_TO_ADDR
// end ;
66205: LD_VAR 0 3
66209: RET
// export function SortByClass ( units , class ) ; var un ; begin
66210: LD_INT 0
66212: PPUSH
66213: PPUSH
// if not units or not class then
66214: LD_VAR 0 1
66218: NOT
66219: IFTRUE 66228
66221: PUSH
66222: LD_VAR 0 2
66226: NOT
66227: OR
66228: IFFALSE 66232
// exit ;
66230: GO 66327
// result := [ ] ;
66232: LD_ADDR_VAR 0 3
66236: PUSH
66237: EMPTY
66238: ST_TO_ADDR
// for un in units do
66239: LD_ADDR_VAR 0 4
66243: PUSH
66244: LD_VAR 0 1
66248: PUSH
66249: FOR_IN
66250: IFFALSE 66325
// if GetClass ( un ) = class then
66252: LD_VAR 0 4
66256: PPUSH
66257: CALL_OW 257
66261: PUSH
66262: LD_VAR 0 2
66266: EQUAL
66267: IFFALSE 66294
// result := Insert ( result , 1 , un ) else
66269: LD_ADDR_VAR 0 3
66273: PUSH
66274: LD_VAR 0 3
66278: PPUSH
66279: LD_INT 1
66281: PPUSH
66282: LD_VAR 0 4
66286: PPUSH
66287: CALL_OW 2
66291: ST_TO_ADDR
66292: GO 66323
// result := Replace ( result , result + 1 , un ) ;
66294: LD_ADDR_VAR 0 3
66298: PUSH
66299: LD_VAR 0 3
66303: PPUSH
66304: LD_VAR 0 3
66308: PUSH
66309: LD_INT 1
66311: PLUS
66312: PPUSH
66313: LD_VAR 0 4
66317: PPUSH
66318: CALL_OW 1
66322: ST_TO_ADDR
66323: GO 66249
66325: POP
66326: POP
// end ;
66327: LD_VAR 0 3
66331: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66332: LD_INT 0
66334: PPUSH
66335: PPUSH
66336: PPUSH
66337: PPUSH
66338: PPUSH
66339: PPUSH
66340: PPUSH
// result := [ ] ;
66341: LD_ADDR_VAR 0 4
66345: PUSH
66346: EMPTY
66347: ST_TO_ADDR
// if x - r < 0 then
66348: LD_VAR 0 1
66352: PUSH
66353: LD_VAR 0 3
66357: MINUS
66358: PUSH
66359: LD_INT 0
66361: LESS
66362: IFFALSE 66374
// min_x := 0 else
66364: LD_ADDR_VAR 0 8
66368: PUSH
66369: LD_INT 0
66371: ST_TO_ADDR
66372: GO 66390
// min_x := x - r ;
66374: LD_ADDR_VAR 0 8
66378: PUSH
66379: LD_VAR 0 1
66383: PUSH
66384: LD_VAR 0 3
66388: MINUS
66389: ST_TO_ADDR
// if y - r < 0 then
66390: LD_VAR 0 2
66394: PUSH
66395: LD_VAR 0 3
66399: MINUS
66400: PUSH
66401: LD_INT 0
66403: LESS
66404: IFFALSE 66416
// min_y := 0 else
66406: LD_ADDR_VAR 0 7
66410: PUSH
66411: LD_INT 0
66413: ST_TO_ADDR
66414: GO 66432
// min_y := y - r ;
66416: LD_ADDR_VAR 0 7
66420: PUSH
66421: LD_VAR 0 2
66425: PUSH
66426: LD_VAR 0 3
66430: MINUS
66431: ST_TO_ADDR
// max_x := x + r ;
66432: LD_ADDR_VAR 0 9
66436: PUSH
66437: LD_VAR 0 1
66441: PUSH
66442: LD_VAR 0 3
66446: PLUS
66447: ST_TO_ADDR
// max_y := y + r ;
66448: LD_ADDR_VAR 0 10
66452: PUSH
66453: LD_VAR 0 2
66457: PUSH
66458: LD_VAR 0 3
66462: PLUS
66463: ST_TO_ADDR
// for _x = min_x to max_x do
66464: LD_ADDR_VAR 0 5
66468: PUSH
66469: DOUBLE
66470: LD_VAR 0 8
66474: DEC
66475: ST_TO_ADDR
66476: LD_VAR 0 9
66480: PUSH
66481: FOR_TO
66482: IFFALSE 66583
// for _y = min_y to max_y do
66484: LD_ADDR_VAR 0 6
66488: PUSH
66489: DOUBLE
66490: LD_VAR 0 7
66494: DEC
66495: ST_TO_ADDR
66496: LD_VAR 0 10
66500: PUSH
66501: FOR_TO
66502: IFFALSE 66579
// begin if not ValidHex ( _x , _y ) then
66504: LD_VAR 0 5
66508: PPUSH
66509: LD_VAR 0 6
66513: PPUSH
66514: CALL_OW 488
66518: NOT
66519: IFFALSE 66523
// continue ;
66521: GO 66501
// if GetResourceTypeXY ( _x , _y ) then
66523: LD_VAR 0 5
66527: PPUSH
66528: LD_VAR 0 6
66532: PPUSH
66533: CALL_OW 283
66537: IFFALSE 66577
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66539: LD_ADDR_VAR 0 4
66543: PUSH
66544: LD_VAR 0 4
66548: PPUSH
66549: LD_VAR 0 4
66553: PUSH
66554: LD_INT 1
66556: PLUS
66557: PPUSH
66558: LD_VAR 0 5
66562: PUSH
66563: LD_VAR 0 6
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PPUSH
66572: CALL_OW 1
66576: ST_TO_ADDR
// end ;
66577: GO 66501
66579: POP
66580: POP
66581: GO 66481
66583: POP
66584: POP
// end ;
66585: LD_VAR 0 4
66589: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66590: LD_INT 0
66592: PPUSH
66593: PPUSH
66594: PPUSH
66595: PPUSH
66596: PPUSH
66597: PPUSH
66598: PPUSH
66599: PPUSH
// if not units then
66600: LD_VAR 0 1
66604: NOT
66605: IFFALSE 66609
// exit ;
66607: GO 67141
// result := UnitFilter ( units , [ f_ok ] ) ;
66609: LD_ADDR_VAR 0 3
66613: PUSH
66614: LD_VAR 0 1
66618: PPUSH
66619: LD_INT 50
66621: PUSH
66622: EMPTY
66623: LIST
66624: PPUSH
66625: CALL_OW 72
66629: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66630: LD_ADDR_VAR 0 8
66634: PUSH
66635: LD_VAR 0 1
66639: PUSH
66640: LD_INT 1
66642: ARRAY
66643: PPUSH
66644: CALL_OW 255
66648: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66649: LD_ADDR_VAR 0 10
66653: PUSH
66654: LD_INT 29
66656: PUSH
66657: LD_INT 91
66659: PUSH
66660: LD_INT 49
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: LIST
66667: ST_TO_ADDR
// if not result then
66668: LD_VAR 0 3
66672: NOT
66673: IFFALSE 66677
// exit ;
66675: GO 67141
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66677: LD_ADDR_VAR 0 5
66681: PUSH
66682: LD_INT 81
66684: PUSH
66685: LD_VAR 0 8
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PPUSH
66694: CALL_OW 69
66698: ST_TO_ADDR
// for i in result do
66699: LD_ADDR_VAR 0 4
66703: PUSH
66704: LD_VAR 0 3
66708: PUSH
66709: FOR_IN
66710: IFFALSE 67139
// begin tag := GetTag ( i ) + 1 ;
66712: LD_ADDR_VAR 0 9
66716: PUSH
66717: LD_VAR 0 4
66721: PPUSH
66722: CALL_OW 110
66726: PUSH
66727: LD_INT 1
66729: PLUS
66730: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
66731: LD_ADDR_VAR 0 7
66735: PUSH
66736: LD_VAR 0 4
66740: PPUSH
66741: CALL_OW 250
66745: PPUSH
66746: LD_VAR 0 4
66750: PPUSH
66751: CALL_OW 251
66755: PPUSH
66756: LD_INT 4
66758: PPUSH
66759: CALL 66332 0 3
66763: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
66764: LD_VAR 0 4
66768: PPUSH
66769: CALL_OW 247
66773: PUSH
66774: LD_INT 2
66776: EQUAL
66777: IFFALSE 66789
66779: PUSH
66780: LD_VAR 0 7
66784: PUSH
66785: LD_INT 2
66787: GREATER
66788: AND
66789: IFFALSE 66809
66791: PUSH
66792: LD_VAR 0 4
66796: PPUSH
66797: CALL_OW 264
66801: PUSH
66802: LD_VAR 0 10
66806: IN
66807: NOT
66808: AND
66809: IFFALSE 66848
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66811: LD_VAR 0 4
66815: PPUSH
66816: LD_VAR 0 7
66820: PUSH
66821: LD_INT 1
66823: ARRAY
66824: PUSH
66825: LD_INT 1
66827: ARRAY
66828: PPUSH
66829: LD_VAR 0 7
66833: PUSH
66834: LD_INT 1
66836: ARRAY
66837: PUSH
66838: LD_INT 2
66840: ARRAY
66841: PPUSH
66842: CALL_OW 116
66846: GO 67137
// if path > tag then
66848: LD_VAR 0 2
66852: PUSH
66853: LD_VAR 0 9
66857: GREATER
66858: IFFALSE 67066
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66860: LD_ADDR_VAR 0 6
66864: PUSH
66865: LD_VAR 0 5
66869: PPUSH
66870: LD_INT 91
66872: PUSH
66873: LD_VAR 0 4
66877: PUSH
66878: LD_INT 8
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: LIST
66885: PPUSH
66886: CALL_OW 72
66890: ST_TO_ADDR
// if nearEnemy then
66891: LD_VAR 0 6
66895: IFFALSE 66964
// begin if GetWeapon ( i ) = ru_time_lapser then
66897: LD_VAR 0 4
66901: PPUSH
66902: CALL_OW 264
66906: PUSH
66907: LD_INT 49
66909: EQUAL
66910: IFFALSE 66938
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66912: LD_VAR 0 4
66916: PPUSH
66917: LD_VAR 0 6
66921: PPUSH
66922: LD_VAR 0 4
66926: PPUSH
66927: CALL_OW 74
66931: PPUSH
66932: CALL_OW 112
66936: GO 66962
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66938: LD_VAR 0 4
66942: PPUSH
66943: LD_VAR 0 6
66947: PPUSH
66948: LD_VAR 0 4
66952: PPUSH
66953: CALL_OW 74
66957: PPUSH
66958: CALL 68222 0 2
// end else
66962: GO 67064
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66964: LD_VAR 0 4
66968: PPUSH
66969: LD_VAR 0 2
66973: PUSH
66974: LD_VAR 0 9
66978: ARRAY
66979: PUSH
66980: LD_INT 1
66982: ARRAY
66983: PPUSH
66984: LD_VAR 0 2
66988: PUSH
66989: LD_VAR 0 9
66993: ARRAY
66994: PUSH
66995: LD_INT 2
66997: ARRAY
66998: PPUSH
66999: CALL_OW 297
67003: PUSH
67004: LD_INT 6
67006: GREATER
67007: IFFALSE 67050
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67009: LD_VAR 0 4
67013: PPUSH
67014: LD_VAR 0 2
67018: PUSH
67019: LD_VAR 0 9
67023: ARRAY
67024: PUSH
67025: LD_INT 1
67027: ARRAY
67028: PPUSH
67029: LD_VAR 0 2
67033: PUSH
67034: LD_VAR 0 9
67038: ARRAY
67039: PUSH
67040: LD_INT 2
67042: ARRAY
67043: PPUSH
67044: CALL_OW 114
67048: GO 67064
// SetTag ( i , tag ) ;
67050: LD_VAR 0 4
67054: PPUSH
67055: LD_VAR 0 9
67059: PPUSH
67060: CALL_OW 109
// end else
67064: GO 67137
// if enemy then
67066: LD_VAR 0 5
67070: IFFALSE 67137
// begin if GetWeapon ( i ) = ru_time_lapser then
67072: LD_VAR 0 4
67076: PPUSH
67077: CALL_OW 264
67081: PUSH
67082: LD_INT 49
67084: EQUAL
67085: IFFALSE 67113
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67087: LD_VAR 0 4
67091: PPUSH
67092: LD_VAR 0 5
67096: PPUSH
67097: LD_VAR 0 4
67101: PPUSH
67102: CALL_OW 74
67106: PPUSH
67107: CALL_OW 112
67111: GO 67137
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67113: LD_VAR 0 4
67117: PPUSH
67118: LD_VAR 0 5
67122: PPUSH
67123: LD_VAR 0 4
67127: PPUSH
67128: CALL_OW 74
67132: PPUSH
67133: CALL 68222 0 2
// end ; end ;
67137: GO 66709
67139: POP
67140: POP
// end ;
67141: LD_VAR 0 3
67145: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67146: LD_INT 0
67148: PPUSH
67149: PPUSH
67150: PPUSH
// if not unit or IsInUnit ( unit ) then
67151: LD_VAR 0 1
67155: NOT
67156: IFTRUE 67169
67158: PUSH
67159: LD_VAR 0 1
67163: PPUSH
67164: CALL_OW 310
67168: OR
67169: IFFALSE 67173
// exit ;
67171: GO 67264
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67173: LD_ADDR_VAR 0 4
67177: PUSH
67178: LD_VAR 0 1
67182: PPUSH
67183: CALL_OW 250
67187: PPUSH
67188: LD_VAR 0 2
67192: PPUSH
67193: LD_INT 1
67195: PPUSH
67196: CALL_OW 272
67200: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67201: LD_ADDR_VAR 0 5
67205: PUSH
67206: LD_VAR 0 1
67210: PPUSH
67211: CALL_OW 251
67215: PPUSH
67216: LD_VAR 0 2
67220: PPUSH
67221: LD_INT 1
67223: PPUSH
67224: CALL_OW 273
67228: ST_TO_ADDR
// if ValidHex ( x , y ) then
67229: LD_VAR 0 4
67233: PPUSH
67234: LD_VAR 0 5
67238: PPUSH
67239: CALL_OW 488
67243: IFFALSE 67264
// ComTurnXY ( unit , x , y ) ;
67245: LD_VAR 0 1
67249: PPUSH
67250: LD_VAR 0 4
67254: PPUSH
67255: LD_VAR 0 5
67259: PPUSH
67260: CALL_OW 118
// end ;
67264: LD_VAR 0 3
67268: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67269: LD_INT 0
67271: PPUSH
67272: PPUSH
// result := false ;
67273: LD_ADDR_VAR 0 3
67277: PUSH
67278: LD_INT 0
67280: ST_TO_ADDR
// if not units then
67281: LD_VAR 0 2
67285: NOT
67286: IFFALSE 67290
// exit ;
67288: GO 67335
// for i in units do
67290: LD_ADDR_VAR 0 4
67294: PUSH
67295: LD_VAR 0 2
67299: PUSH
67300: FOR_IN
67301: IFFALSE 67333
// if See ( side , i ) then
67303: LD_VAR 0 1
67307: PPUSH
67308: LD_VAR 0 4
67312: PPUSH
67313: CALL_OW 292
67317: IFFALSE 67331
// begin result := true ;
67319: LD_ADDR_VAR 0 3
67323: PUSH
67324: LD_INT 1
67326: ST_TO_ADDR
// exit ;
67327: POP
67328: POP
67329: GO 67335
// end ;
67331: GO 67300
67333: POP
67334: POP
// end ;
67335: LD_VAR 0 3
67339: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67340: LD_INT 0
67342: PPUSH
67343: PPUSH
67344: PPUSH
67345: PPUSH
// if not unit or not points then
67346: LD_VAR 0 1
67350: NOT
67351: IFTRUE 67360
67353: PUSH
67354: LD_VAR 0 2
67358: NOT
67359: OR
67360: IFFALSE 67364
// exit ;
67362: GO 67454
// dist := 99999 ;
67364: LD_ADDR_VAR 0 5
67368: PUSH
67369: LD_INT 99999
67371: ST_TO_ADDR
// for i in points do
67372: LD_ADDR_VAR 0 4
67376: PUSH
67377: LD_VAR 0 2
67381: PUSH
67382: FOR_IN
67383: IFFALSE 67452
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67385: LD_ADDR_VAR 0 6
67389: PUSH
67390: LD_VAR 0 1
67394: PPUSH
67395: LD_VAR 0 4
67399: PUSH
67400: LD_INT 1
67402: ARRAY
67403: PPUSH
67404: LD_VAR 0 4
67408: PUSH
67409: LD_INT 2
67411: ARRAY
67412: PPUSH
67413: CALL_OW 297
67417: ST_TO_ADDR
// if tmpDist < dist then
67418: LD_VAR 0 6
67422: PUSH
67423: LD_VAR 0 5
67427: LESS
67428: IFFALSE 67450
// begin result := i ;
67430: LD_ADDR_VAR 0 3
67434: PUSH
67435: LD_VAR 0 4
67439: ST_TO_ADDR
// dist := tmpDist ;
67440: LD_ADDR_VAR 0 5
67444: PUSH
67445: LD_VAR 0 6
67449: ST_TO_ADDR
// end ; end ;
67450: GO 67382
67452: POP
67453: POP
// end ;
67454: LD_VAR 0 3
67458: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67459: LD_INT 0
67461: PPUSH
// uc_side := side ;
67462: LD_ADDR_OWVAR 20
67466: PUSH
67467: LD_VAR 0 1
67471: ST_TO_ADDR
// uc_nation := 3 ;
67472: LD_ADDR_OWVAR 21
67476: PUSH
67477: LD_INT 3
67479: ST_TO_ADDR
// vc_chassis := 25 ;
67480: LD_ADDR_OWVAR 37
67484: PUSH
67485: LD_INT 25
67487: ST_TO_ADDR
// vc_engine := engine_siberite ;
67488: LD_ADDR_OWVAR 39
67492: PUSH
67493: LD_INT 3
67495: ST_TO_ADDR
// vc_control := control_computer ;
67496: LD_ADDR_OWVAR 38
67500: PUSH
67501: LD_INT 3
67503: ST_TO_ADDR
// vc_weapon := 59 ;
67504: LD_ADDR_OWVAR 40
67508: PUSH
67509: LD_INT 59
67511: ST_TO_ADDR
// result := CreateVehicle ;
67512: LD_ADDR_VAR 0 5
67516: PUSH
67517: CALL_OW 45
67521: ST_TO_ADDR
// SetDir ( result , d ) ;
67522: LD_VAR 0 5
67526: PPUSH
67527: LD_VAR 0 4
67531: PPUSH
67532: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67536: LD_VAR 0 5
67540: PPUSH
67541: LD_VAR 0 2
67545: PPUSH
67546: LD_VAR 0 3
67550: PPUSH
67551: LD_INT 0
67553: PPUSH
67554: CALL_OW 48
// end ;
67558: LD_VAR 0 5
67562: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67563: LD_INT 0
67565: PPUSH
67566: PPUSH
67567: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67568: LD_ADDR_VAR 0 2
67572: PUSH
67573: LD_INT 0
67575: PUSH
67576: LD_INT 0
67578: PUSH
67579: LD_INT 0
67581: PUSH
67582: LD_INT 0
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67591: LD_VAR 0 1
67595: NOT
67596: IFTRUE 67629
67598: PUSH
67599: LD_VAR 0 1
67603: PPUSH
67604: CALL_OW 264
67608: PUSH
67609: LD_INT 12
67611: PUSH
67612: LD_INT 51
67614: PUSH
67615: LD_INT 32
67617: PUSH
67618: LD_INT 89
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: IN
67627: NOT
67628: OR
67629: IFFALSE 67633
// exit ;
67631: GO 67731
// for i := 1 to 3 do
67633: LD_ADDR_VAR 0 3
67637: PUSH
67638: DOUBLE
67639: LD_INT 1
67641: DEC
67642: ST_TO_ADDR
67643: LD_INT 3
67645: PUSH
67646: FOR_TO
67647: IFFALSE 67729
// begin tmp := GetCargo ( cargo , i ) ;
67649: LD_ADDR_VAR 0 4
67653: PUSH
67654: LD_VAR 0 1
67658: PPUSH
67659: LD_VAR 0 3
67663: PPUSH
67664: CALL_OW 289
67668: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67669: LD_ADDR_VAR 0 2
67673: PUSH
67674: LD_VAR 0 2
67678: PPUSH
67679: LD_VAR 0 3
67683: PPUSH
67684: LD_VAR 0 4
67688: PPUSH
67689: CALL_OW 1
67693: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67694: LD_ADDR_VAR 0 2
67698: PUSH
67699: LD_VAR 0 2
67703: PPUSH
67704: LD_INT 4
67706: PPUSH
67707: LD_VAR 0 2
67711: PUSH
67712: LD_INT 4
67714: ARRAY
67715: PUSH
67716: LD_VAR 0 4
67720: PLUS
67721: PPUSH
67722: CALL_OW 1
67726: ST_TO_ADDR
// end ;
67727: GO 67646
67729: POP
67730: POP
// end ;
67731: LD_VAR 0 2
67735: RET
// export function Length ( array ) ; begin
67736: LD_INT 0
67738: PPUSH
// result := array + 0 ;
67739: LD_ADDR_VAR 0 2
67743: PUSH
67744: LD_VAR 0 1
67748: PUSH
67749: LD_INT 0
67751: PLUS
67752: ST_TO_ADDR
// end ;
67753: LD_VAR 0 2
67757: RET
// export function PrepareArray ( array ) ; begin
67758: LD_INT 0
67760: PPUSH
// result := array diff 0 ;
67761: LD_ADDR_VAR 0 2
67765: PUSH
67766: LD_VAR 0 1
67770: PUSH
67771: LD_INT 0
67773: DIFF
67774: ST_TO_ADDR
// if not result [ 1 ] then
67775: LD_VAR 0 2
67779: PUSH
67780: LD_INT 1
67782: ARRAY
67783: NOT
67784: IFFALSE 67804
// result := Delete ( result , 1 ) ;
67786: LD_ADDR_VAR 0 2
67790: PUSH
67791: LD_VAR 0 2
67795: PPUSH
67796: LD_INT 1
67798: PPUSH
67799: CALL_OW 3
67803: ST_TO_ADDR
// end ;
67804: LD_VAR 0 2
67808: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67809: LD_INT 0
67811: PPUSH
67812: PPUSH
67813: PPUSH
67814: PPUSH
// sibRocketRange := 25 ;
67815: LD_ADDR_VAR 0 6
67819: PUSH
67820: LD_INT 25
67822: ST_TO_ADDR
// result := false ;
67823: LD_ADDR_VAR 0 4
67827: PUSH
67828: LD_INT 0
67830: ST_TO_ADDR
// for i := 0 to 5 do
67831: LD_ADDR_VAR 0 5
67835: PUSH
67836: DOUBLE
67837: LD_INT 0
67839: DEC
67840: ST_TO_ADDR
67841: LD_INT 5
67843: PUSH
67844: FOR_TO
67845: IFFALSE 67912
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67847: LD_VAR 0 1
67851: PPUSH
67852: LD_VAR 0 5
67856: PPUSH
67857: LD_VAR 0 6
67861: PPUSH
67862: CALL_OW 272
67866: PPUSH
67867: LD_VAR 0 2
67871: PPUSH
67872: LD_VAR 0 5
67876: PPUSH
67877: LD_VAR 0 6
67881: PPUSH
67882: CALL_OW 273
67886: PPUSH
67887: LD_VAR 0 3
67891: PPUSH
67892: CALL_OW 309
67896: IFFALSE 67910
// begin result := true ;
67898: LD_ADDR_VAR 0 4
67902: PUSH
67903: LD_INT 1
67905: ST_TO_ADDR
// exit ;
67906: POP
67907: POP
67908: GO 67914
// end ;
67910: GO 67844
67912: POP
67913: POP
// end ;
67914: LD_VAR 0 4
67918: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
67919: LD_INT 0
67921: PPUSH
67922: PPUSH
67923: PPUSH
// if btype = b_depot then
67924: LD_VAR 0 2
67928: PUSH
67929: LD_INT 0
67931: EQUAL
67932: IFFALSE 67944
// begin result := true ;
67934: LD_ADDR_VAR 0 3
67938: PUSH
67939: LD_INT 1
67941: ST_TO_ADDR
// exit ;
67942: GO 68064
// end ; pom := GetBase ( depot ) ;
67944: LD_ADDR_VAR 0 4
67948: PUSH
67949: LD_VAR 0 1
67953: PPUSH
67954: CALL_OW 274
67958: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
67959: LD_ADDR_VAR 0 5
67963: PUSH
67964: LD_VAR 0 2
67968: PPUSH
67969: LD_VAR 0 1
67973: PPUSH
67974: CALL_OW 248
67978: PPUSH
67979: CALL_OW 450
67983: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
67984: LD_ADDR_VAR 0 3
67988: PUSH
67989: LD_VAR 0 4
67993: PPUSH
67994: LD_INT 1
67996: PPUSH
67997: CALL_OW 275
68001: PUSH
68002: LD_VAR 0 5
68006: PUSH
68007: LD_INT 1
68009: ARRAY
68010: GREATEREQUAL
68011: IFFALSE 68037
68013: PUSH
68014: LD_VAR 0 4
68018: PPUSH
68019: LD_INT 2
68021: PPUSH
68022: CALL_OW 275
68026: PUSH
68027: LD_VAR 0 5
68031: PUSH
68032: LD_INT 2
68034: ARRAY
68035: GREATEREQUAL
68036: AND
68037: IFFALSE 68063
68039: PUSH
68040: LD_VAR 0 4
68044: PPUSH
68045: LD_INT 3
68047: PPUSH
68048: CALL_OW 275
68052: PUSH
68053: LD_VAR 0 5
68057: PUSH
68058: LD_INT 3
68060: ARRAY
68061: GREATEREQUAL
68062: AND
68063: ST_TO_ADDR
// end ;
68064: LD_VAR 0 3
68068: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68069: LD_INT 0
68071: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68072: LD_VAR 0 1
68076: PPUSH
68077: LD_VAR 0 2
68081: PPUSH
68082: LD_INT 0
68084: PPUSH
68085: LD_INT 0
68087: PPUSH
68088: LD_INT 1
68090: PPUSH
68091: LD_INT 0
68093: PPUSH
68094: CALL_OW 587
// end ;
68098: LD_VAR 0 3
68102: RET
// export function CenterOnNow ( unit ) ; begin
68103: LD_INT 0
68105: PPUSH
// result := IsInUnit ( unit ) ;
68106: LD_ADDR_VAR 0 2
68110: PUSH
68111: LD_VAR 0 1
68115: PPUSH
68116: CALL_OW 310
68120: ST_TO_ADDR
// if not result then
68121: LD_VAR 0 2
68125: NOT
68126: IFFALSE 68138
// result := unit ;
68128: LD_ADDR_VAR 0 2
68132: PUSH
68133: LD_VAR 0 1
68137: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68138: LD_VAR 0 1
68142: PPUSH
68143: CALL_OW 87
// end ;
68147: LD_VAR 0 2
68151: RET
// export function ComMoveHex ( unit , hex ) ; begin
68152: LD_INT 0
68154: PPUSH
// if not hex then
68155: LD_VAR 0 2
68159: NOT
68160: IFFALSE 68164
// exit ;
68162: GO 68217
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68164: LD_VAR 0 2
68168: PUSH
68169: LD_INT 1
68171: ARRAY
68172: PPUSH
68173: LD_VAR 0 2
68177: PUSH
68178: LD_INT 2
68180: ARRAY
68181: PPUSH
68182: CALL_OW 428
68186: IFFALSE 68190
// exit ;
68188: GO 68217
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68190: LD_VAR 0 1
68194: PPUSH
68195: LD_VAR 0 2
68199: PUSH
68200: LD_INT 1
68202: ARRAY
68203: PPUSH
68204: LD_VAR 0 2
68208: PUSH
68209: LD_INT 2
68211: ARRAY
68212: PPUSH
68213: CALL_OW 111
// end ;
68217: LD_VAR 0 3
68221: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68222: LD_INT 0
68224: PPUSH
68225: PPUSH
68226: PPUSH
// if not unit or not enemy then
68227: LD_VAR 0 1
68231: NOT
68232: IFTRUE 68241
68234: PUSH
68235: LD_VAR 0 2
68239: NOT
68240: OR
68241: IFFALSE 68245
// exit ;
68243: GO 68371
// x := GetX ( enemy ) ;
68245: LD_ADDR_VAR 0 4
68249: PUSH
68250: LD_VAR 0 2
68254: PPUSH
68255: CALL_OW 250
68259: ST_TO_ADDR
// y := GetY ( enemy ) ;
68260: LD_ADDR_VAR 0 5
68264: PUSH
68265: LD_VAR 0 2
68269: PPUSH
68270: CALL_OW 251
68274: ST_TO_ADDR
// if ValidHex ( x , y ) then
68275: LD_VAR 0 4
68279: PPUSH
68280: LD_VAR 0 5
68284: PPUSH
68285: CALL_OW 488
68289: IFFALSE 68371
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
68291: LD_VAR 0 2
68295: PPUSH
68296: CALL_OW 247
68300: PUSH
68301: LD_INT 3
68303: PUSH
68304: LD_INT 2
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: IN
68311: IFTRUE 68334
68313: PUSH
68314: LD_VAR 0 1
68318: PPUSH
68319: CALL_OW 255
68323: PPUSH
68324: LD_VAR 0 2
68328: PPUSH
68329: CALL_OW 292
68333: OR
68334: IFFALSE 68352
// ComAttackUnit ( unit , enemy ) else
68336: LD_VAR 0 1
68340: PPUSH
68341: LD_VAR 0 2
68345: PPUSH
68346: CALL_OW 115
68350: GO 68371
// ComAgressiveMove ( unit , x , y ) ;
68352: LD_VAR 0 1
68356: PPUSH
68357: LD_VAR 0 4
68361: PPUSH
68362: LD_VAR 0 5
68366: PPUSH
68367: CALL_OW 114
// end ;
68371: LD_VAR 0 3
68375: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
68376: LD_INT 0
68378: PPUSH
68379: PPUSH
68380: PPUSH
// list := AreaToList ( area , 0 ) ;
68381: LD_ADDR_VAR 0 5
68385: PUSH
68386: LD_VAR 0 1
68390: PPUSH
68391: LD_INT 0
68393: PPUSH
68394: CALL_OW 517
68398: ST_TO_ADDR
// if not list then
68399: LD_VAR 0 5
68403: NOT
68404: IFFALSE 68408
// exit ;
68406: GO 68538
// if all then
68408: LD_VAR 0 2
68412: IFFALSE 68500
// begin for i := 1 to list [ 1 ] do
68414: LD_ADDR_VAR 0 4
68418: PUSH
68419: DOUBLE
68420: LD_INT 1
68422: DEC
68423: ST_TO_ADDR
68424: LD_VAR 0 5
68428: PUSH
68429: LD_INT 1
68431: ARRAY
68432: PUSH
68433: FOR_TO
68434: IFFALSE 68496
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
68436: LD_ADDR_VAR 0 3
68440: PUSH
68441: LD_VAR 0 3
68445: PPUSH
68446: LD_VAR 0 3
68450: PUSH
68451: LD_INT 1
68453: PLUS
68454: PPUSH
68455: LD_VAR 0 5
68459: PUSH
68460: LD_INT 1
68462: ARRAY
68463: PUSH
68464: LD_VAR 0 4
68468: ARRAY
68469: PUSH
68470: LD_VAR 0 5
68474: PUSH
68475: LD_INT 2
68477: ARRAY
68478: PUSH
68479: LD_VAR 0 4
68483: ARRAY
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PPUSH
68489: CALL_OW 1
68493: ST_TO_ADDR
68494: GO 68433
68496: POP
68497: POP
// exit ;
68498: GO 68538
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
68500: LD_ADDR_VAR 0 3
68504: PUSH
68505: LD_VAR 0 5
68509: PUSH
68510: LD_INT 1
68512: ARRAY
68513: PUSH
68514: LD_INT 1
68516: ARRAY
68517: PUSH
68518: LD_VAR 0 5
68522: PUSH
68523: LD_INT 2
68525: ARRAY
68526: PUSH
68527: LD_INT 1
68529: ARRAY
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: EMPTY
68536: LIST
68537: ST_TO_ADDR
// end ;
68538: LD_VAR 0 3
68542: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
68543: LD_INT 0
68545: PPUSH
68546: PPUSH
// list := AreaToList ( area , 0 ) ;
68547: LD_ADDR_VAR 0 4
68551: PUSH
68552: LD_VAR 0 1
68556: PPUSH
68557: LD_INT 0
68559: PPUSH
68560: CALL_OW 517
68564: ST_TO_ADDR
// if not list then
68565: LD_VAR 0 4
68569: NOT
68570: IFFALSE 68574
// exit ;
68572: GO 68615
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
68574: LD_ADDR_VAR 0 3
68578: PUSH
68579: LD_VAR 0 4
68583: PUSH
68584: LD_INT 1
68586: ARRAY
68587: PUSH
68588: LD_INT 1
68590: ARRAY
68591: PUSH
68592: LD_VAR 0 4
68596: PUSH
68597: LD_INT 2
68599: ARRAY
68600: PUSH
68601: LD_INT 1
68603: ARRAY
68604: PUSH
68605: LD_VAR 0 2
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: LIST
68614: ST_TO_ADDR
// end ;
68615: LD_VAR 0 3
68619: RET
// export function First ( array ) ; begin
68620: LD_INT 0
68622: PPUSH
// if not array then
68623: LD_VAR 0 1
68627: NOT
68628: IFFALSE 68632
// exit ;
68630: GO 68646
// result := array [ 1 ] ;
68632: LD_ADDR_VAR 0 2
68636: PUSH
68637: LD_VAR 0 1
68641: PUSH
68642: LD_INT 1
68644: ARRAY
68645: ST_TO_ADDR
// end ;
68646: LD_VAR 0 2
68650: RET
// export function Last ( array ) ; begin
68651: LD_INT 0
68653: PPUSH
// if not array then
68654: LD_VAR 0 1
68658: NOT
68659: IFFALSE 68663
// exit ;
68661: GO 68679
// result := array [ array ] ;
68663: LD_ADDR_VAR 0 2
68667: PUSH
68668: LD_VAR 0 1
68672: PUSH
68673: LD_VAR 0 1
68677: ARRAY
68678: ST_TO_ADDR
// end ;
68679: LD_VAR 0 2
68683: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
68684: LD_INT 0
68686: PPUSH
68687: PPUSH
// result := [ ] ;
68688: LD_ADDR_VAR 0 5
68692: PUSH
68693: EMPTY
68694: ST_TO_ADDR
// if not array then
68695: LD_VAR 0 1
68699: NOT
68700: IFFALSE 68704
// exit ;
68702: GO 68816
// for i := 1 to array do
68704: LD_ADDR_VAR 0 6
68708: PUSH
68709: DOUBLE
68710: LD_INT 1
68712: DEC
68713: ST_TO_ADDR
68714: LD_VAR 0 1
68718: PUSH
68719: FOR_TO
68720: IFFALSE 68814
// if array [ i ] [ index ] = value then
68722: LD_VAR 0 1
68726: PUSH
68727: LD_VAR 0 6
68731: ARRAY
68732: PUSH
68733: LD_VAR 0 2
68737: ARRAY
68738: PUSH
68739: LD_VAR 0 3
68743: EQUAL
68744: IFFALSE 68812
// begin if indexColumn then
68746: LD_VAR 0 4
68750: IFFALSE 68786
// result := Join ( result , array [ i ] [ indexColumn ] ) else
68752: LD_ADDR_VAR 0 5
68756: PUSH
68757: LD_VAR 0 5
68761: PPUSH
68762: LD_VAR 0 1
68766: PUSH
68767: LD_VAR 0 6
68771: ARRAY
68772: PUSH
68773: LD_VAR 0 4
68777: ARRAY
68778: PPUSH
68779: CALL 63824 0 2
68783: ST_TO_ADDR
68784: GO 68812
// result := Join ( result , array [ i ] ) ;
68786: LD_ADDR_VAR 0 5
68790: PUSH
68791: LD_VAR 0 5
68795: PPUSH
68796: LD_VAR 0 1
68800: PUSH
68801: LD_VAR 0 6
68805: ARRAY
68806: PPUSH
68807: CALL 63824 0 2
68811: ST_TO_ADDR
// end ;
68812: GO 68719
68814: POP
68815: POP
// end ;
68816: LD_VAR 0 5
68820: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
68821: LD_INT 0
68823: PPUSH
// if not vehicles or not parkingPoint then
68824: LD_VAR 0 1
68828: NOT
68829: IFTRUE 68838
68831: PUSH
68832: LD_VAR 0 2
68836: NOT
68837: OR
68838: IFFALSE 68842
// exit ;
68840: GO 68940
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
68842: LD_ADDR_VAR 0 1
68846: PUSH
68847: LD_VAR 0 1
68851: PPUSH
68852: LD_INT 50
68854: PUSH
68855: EMPTY
68856: LIST
68857: PUSH
68858: LD_INT 3
68860: PUSH
68861: LD_INT 92
68863: PUSH
68864: LD_VAR 0 2
68868: PUSH
68869: LD_INT 1
68871: ARRAY
68872: PUSH
68873: LD_VAR 0 2
68877: PUSH
68878: LD_INT 2
68880: ARRAY
68881: PUSH
68882: LD_INT 8
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PPUSH
68899: CALL_OW 72
68903: ST_TO_ADDR
// if not vehicles then
68904: LD_VAR 0 1
68908: NOT
68909: IFFALSE 68913
// exit ;
68911: GO 68940
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
68913: LD_VAR 0 1
68917: PPUSH
68918: LD_VAR 0 2
68922: PUSH
68923: LD_INT 1
68925: ARRAY
68926: PPUSH
68927: LD_VAR 0 2
68931: PUSH
68932: LD_INT 2
68934: ARRAY
68935: PPUSH
68936: CALL_OW 111
// end ;
68940: LD_VAR 0 3
68944: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
68945: LD_INT 0
68947: PPUSH
68948: PPUSH
68949: PPUSH
// if not side or not area then
68950: LD_VAR 0 1
68954: NOT
68955: IFTRUE 68964
68957: PUSH
68958: LD_VAR 0 2
68962: NOT
68963: OR
68964: IFFALSE 68968
// exit ;
68966: GO 69087
// tmp := AreaToList ( area , 0 ) ;
68968: LD_ADDR_VAR 0 5
68972: PUSH
68973: LD_VAR 0 2
68977: PPUSH
68978: LD_INT 0
68980: PPUSH
68981: CALL_OW 517
68985: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
68986: LD_ADDR_VAR 0 4
68990: PUSH
68991: DOUBLE
68992: LD_INT 1
68994: DEC
68995: ST_TO_ADDR
68996: LD_VAR 0 5
69000: PUSH
69001: LD_INT 1
69003: ARRAY
69004: PUSH
69005: FOR_TO
69006: IFFALSE 69085
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69008: LD_VAR 0 5
69012: PUSH
69013: LD_INT 1
69015: ARRAY
69016: PUSH
69017: LD_VAR 0 4
69021: ARRAY
69022: PPUSH
69023: LD_VAR 0 5
69027: PUSH
69028: LD_INT 2
69030: ARRAY
69031: PUSH
69032: LD_VAR 0 4
69036: ARRAY
69037: PPUSH
69038: CALL_OW 351
69042: IFFALSE 69083
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
69044: LD_VAR 0 5
69048: PUSH
69049: LD_INT 1
69051: ARRAY
69052: PUSH
69053: LD_VAR 0 4
69057: ARRAY
69058: PPUSH
69059: LD_VAR 0 5
69063: PUSH
69064: LD_INT 2
69066: ARRAY
69067: PUSH
69068: LD_VAR 0 4
69072: ARRAY
69073: PPUSH
69074: LD_VAR 0 1
69078: PPUSH
69079: CALL_OW 244
// end ;
69083: GO 69005
69085: POP
69086: POP
// end ;
69087: LD_VAR 0 3
69091: RET
// export function UniqueArray ( array ) ; var i ; begin
69092: LD_INT 0
69094: PPUSH
69095: PPUSH
// result := [ ] ;
69096: LD_ADDR_VAR 0 2
69100: PUSH
69101: EMPTY
69102: ST_TO_ADDR
// if not array then
69103: LD_VAR 0 1
69107: NOT
69108: IFFALSE 69112
// exit ;
69110: GO 69173
// for i := 1 to array do
69112: LD_ADDR_VAR 0 3
69116: PUSH
69117: DOUBLE
69118: LD_INT 1
69120: DEC
69121: ST_TO_ADDR
69122: LD_VAR 0 1
69126: PUSH
69127: FOR_TO
69128: IFFALSE 69171
// if not array [ i ] in result then
69130: LD_VAR 0 1
69134: PUSH
69135: LD_VAR 0 3
69139: ARRAY
69140: PUSH
69141: LD_VAR 0 2
69145: IN
69146: NOT
69147: IFFALSE 69169
// result := Join ( result , i ) ;
69149: LD_ADDR_VAR 0 2
69153: PUSH
69154: LD_VAR 0 2
69158: PPUSH
69159: LD_VAR 0 3
69163: PPUSH
69164: CALL 63824 0 2
69168: ST_TO_ADDR
69169: GO 69127
69171: POP
69172: POP
// end ; end_of_file
69173: LD_VAR 0 2
69177: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69178: LD_VAR 0 1
69182: PUSH
69183: LD_INT 200
69185: DOUBLE
69186: GREATEREQUAL
69187: IFFALSE 69195
69189: LD_INT 299
69191: DOUBLE
69192: LESSEQUAL
69193: IFTRUE 69197
69195: GO 69229
69197: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69198: LD_VAR 0 1
69202: PPUSH
69203: LD_VAR 0 2
69207: PPUSH
69208: LD_VAR 0 3
69212: PPUSH
69213: LD_VAR 0 4
69217: PPUSH
69218: LD_VAR 0 5
69222: PPUSH
69223: CALL 4055 0 5
69227: GO 69306
69229: LD_INT 300
69231: DOUBLE
69232: GREATEREQUAL
69233: IFFALSE 69241
69235: LD_INT 399
69237: DOUBLE
69238: LESSEQUAL
69239: IFTRUE 69243
69241: GO 69305
69243: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69244: LD_VAR 0 1
69248: PPUSH
69249: LD_VAR 0 2
69253: PPUSH
69254: LD_VAR 0 3
69258: PPUSH
69259: LD_VAR 0 4
69263: PPUSH
69264: LD_VAR 0 5
69268: PPUSH
69269: LD_VAR 0 6
69273: PPUSH
69274: LD_VAR 0 7
69278: PPUSH
69279: LD_VAR 0 8
69283: PPUSH
69284: LD_VAR 0 9
69288: PPUSH
69289: LD_VAR 0 10
69293: PPUSH
69294: LD_VAR 0 11
69298: PPUSH
69299: CALL 22221 0 11
69303: GO 69306
69305: POP
// end ;
69306: PPOPN 11
69308: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69309: LD_VAR 0 1
69313: PPUSH
69314: LD_VAR 0 2
69318: PPUSH
69319: LD_VAR 0 3
69323: PPUSH
69324: LD_VAR 0 4
69328: PPUSH
69329: LD_VAR 0 5
69333: PPUSH
69334: CALL 3436 0 5
// end ; end_of_file
69338: PPOPN 5
69340: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69341: LD_VAR 0 1
69345: PPUSH
69346: LD_VAR 0 2
69350: PPUSH
69351: LD_VAR 0 3
69355: PPUSH
69356: LD_VAR 0 4
69360: PPUSH
69361: LD_VAR 0 5
69365: PPUSH
69366: LD_VAR 0 6
69370: PPUSH
69371: CALL 9761 0 6
// end ;
69375: PPOPN 6
69377: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69378: LD_INT 0
69380: PPUSH
// begin if not units then
69381: LD_VAR 0 1
69385: NOT
69386: IFFALSE 69390
// exit ;
69388: GO 69424
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
69390: LD_VAR 0 1
69394: PPUSH
69395: LD_VAR 0 2
69399: PPUSH
69400: LD_VAR 0 3
69404: PPUSH
69405: LD_VAR 0 4
69409: PPUSH
69410: LD_VAR 0 5
69414: PPUSH
69415: LD_VAR 0 6
69419: PPUSH
69420: CALL 9562 0 6
// end ;
69424: PPOPN 7
69426: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69427: CALL 9648 0 0
// end ;
69431: PPOPN 1
69433: END
