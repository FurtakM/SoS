// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_EXP 83
3394: EQUAL
3395: IFFALSE 3467
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3397: LD_INT 68
3399: PPUSH
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 255
3409: PPUSH
3410: CALL_OW 321
3414: PUSH
3415: LD_INT 2
3417: EQUAL
3418: IFFALSE 3430
// eff := 70 else
3420: LD_ADDR_VAR 0 4
3424: PUSH
3425: LD_INT 70
3427: ST_TO_ADDR
3428: GO 3438
// eff := 30 ;
3430: LD_ADDR_VAR 0 4
3434: PUSH
3435: LD_INT 30
3437: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_VAR 0 1
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: LD_VAR 0 4
3462: PPUSH
3463: CALL_OW 495
// end ; end ;
3467: LD_VAR 0 2
3471: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3472: LD_INT 0
3474: PPUSH
// end ;
3475: LD_VAR 0 4
3479: RET
// export function SOS_Command ( cmd ) ; begin
3480: LD_INT 0
3482: PPUSH
// end ;
3483: LD_VAR 0 2
3487: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3488: LD_INT 0
3490: PPUSH
// if cmd = 121 then
3491: LD_VAR 0 1
3495: PUSH
3496: LD_INT 121
3498: EQUAL
3499: IFFALSE 3501
// end ;
3501: LD_VAR 0 6
3505: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
3506: LD_INT 0
3508: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
3509: LD_VAR 0 1
3513: PUSH
3514: LD_INT 250
3516: EQUAL
3517: PUSH
3518: LD_VAR 0 2
3522: PPUSH
3523: CALL_OW 264
3527: PUSH
3528: LD_EXP 86
3532: EQUAL
3533: AND
3534: IFFALSE 3555
// MinerPlaceMine ( unit , x , y ) ;
3536: LD_VAR 0 2
3540: PPUSH
3541: LD_VAR 0 4
3545: PPUSH
3546: LD_VAR 0 5
3550: PPUSH
3551: CALL 5904 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
3555: LD_VAR 0 1
3559: PUSH
3560: LD_INT 251
3562: EQUAL
3563: PUSH
3564: LD_VAR 0 2
3568: PPUSH
3569: CALL_OW 264
3573: PUSH
3574: LD_EXP 86
3578: EQUAL
3579: AND
3580: IFFALSE 3601
// MinerDetonateMine ( unit , x , y ) ;
3582: LD_VAR 0 2
3586: PPUSH
3587: LD_VAR 0 4
3591: PPUSH
3592: LD_VAR 0 5
3596: PPUSH
3597: CALL 6181 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
3601: LD_VAR 0 1
3605: PUSH
3606: LD_INT 252
3608: EQUAL
3609: PUSH
3610: LD_VAR 0 2
3614: PPUSH
3615: CALL_OW 264
3619: PUSH
3620: LD_EXP 86
3624: EQUAL
3625: AND
3626: IFFALSE 3647
// MinerCreateMinefield ( unit , x , y ) ;
3628: LD_VAR 0 2
3632: PPUSH
3633: LD_VAR 0 4
3637: PPUSH
3638: LD_VAR 0 5
3642: PPUSH
3643: CALL 6598 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
3647: LD_VAR 0 1
3651: PUSH
3652: LD_INT 253
3654: EQUAL
3655: PUSH
3656: LD_VAR 0 2
3660: PPUSH
3661: CALL_OW 257
3665: PUSH
3666: LD_INT 5
3668: EQUAL
3669: AND
3670: IFFALSE 3691
// ComBinocular ( unit , x , y ) ;
3672: LD_VAR 0 2
3676: PPUSH
3677: LD_VAR 0 4
3681: PPUSH
3682: LD_VAR 0 5
3686: PPUSH
3687: CALL 6969 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3691: LD_VAR 0 1
3695: PUSH
3696: LD_INT 254
3698: EQUAL
3699: PUSH
3700: LD_VAR 0 2
3704: PPUSH
3705: CALL_OW 264
3709: PUSH
3710: LD_EXP 81
3714: EQUAL
3715: AND
3716: PUSH
3717: LD_VAR 0 3
3721: PPUSH
3722: CALL_OW 263
3726: PUSH
3727: LD_INT 3
3729: EQUAL
3730: AND
3731: IFFALSE 3747
// HackDestroyVehicle ( unit , selectedUnit ) ;
3733: LD_VAR 0 2
3737: PPUSH
3738: LD_VAR 0 3
3742: PPUSH
3743: CALL 5264 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3747: LD_VAR 0 1
3751: PUSH
3752: LD_INT 255
3754: EQUAL
3755: PUSH
3756: LD_VAR 0 2
3760: PPUSH
3761: CALL_OW 264
3765: PUSH
3766: LD_INT 14
3768: PUSH
3769: LD_INT 53
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: IN
3776: AND
3777: PUSH
3778: LD_VAR 0 4
3782: PPUSH
3783: LD_VAR 0 5
3787: PPUSH
3788: CALL_OW 488
3792: AND
3793: IFFALSE 3817
// CutTreeXYR ( unit , x , y , 12 ) ;
3795: LD_VAR 0 2
3799: PPUSH
3800: LD_VAR 0 4
3804: PPUSH
3805: LD_VAR 0 5
3809: PPUSH
3810: LD_INT 12
3812: PPUSH
3813: CALL 3830 0 4
// end ;
3817: LD_VAR 0 6
3821: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
3822: LD_INT 0
3824: PPUSH
// end ;
3825: LD_VAR 0 4
3829: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
3830: LD_INT 0
3832: PPUSH
3833: PPUSH
3834: PPUSH
3835: PPUSH
3836: PPUSH
3837: PPUSH
3838: PPUSH
3839: PPUSH
3840: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
3841: LD_VAR 0 1
3845: NOT
3846: PUSH
3847: LD_VAR 0 2
3851: PPUSH
3852: LD_VAR 0 3
3856: PPUSH
3857: CALL_OW 488
3861: NOT
3862: OR
3863: PUSH
3864: LD_VAR 0 4
3868: NOT
3869: OR
3870: IFFALSE 3874
// exit ;
3872: GO 4214
// list := [ ] ;
3874: LD_ADDR_VAR 0 13
3878: PUSH
3879: EMPTY
3880: ST_TO_ADDR
// if x - r < 0 then
3881: LD_VAR 0 2
3885: PUSH
3886: LD_VAR 0 4
3890: MINUS
3891: PUSH
3892: LD_INT 0
3894: LESS
3895: IFFALSE 3907
// min_x := 0 else
3897: LD_ADDR_VAR 0 7
3901: PUSH
3902: LD_INT 0
3904: ST_TO_ADDR
3905: GO 3923
// min_x := x - r ;
3907: LD_ADDR_VAR 0 7
3911: PUSH
3912: LD_VAR 0 2
3916: PUSH
3917: LD_VAR 0 4
3921: MINUS
3922: ST_TO_ADDR
// if y - r < 0 then
3923: LD_VAR 0 3
3927: PUSH
3928: LD_VAR 0 4
3932: MINUS
3933: PUSH
3934: LD_INT 0
3936: LESS
3937: IFFALSE 3949
// min_y := 0 else
3939: LD_ADDR_VAR 0 8
3943: PUSH
3944: LD_INT 0
3946: ST_TO_ADDR
3947: GO 3965
// min_y := y - r ;
3949: LD_ADDR_VAR 0 8
3953: PUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 4
3963: MINUS
3964: ST_TO_ADDR
// max_x := x + r ;
3965: LD_ADDR_VAR 0 9
3969: PUSH
3970: LD_VAR 0 2
3974: PUSH
3975: LD_VAR 0 4
3979: PLUS
3980: ST_TO_ADDR
// max_y := y + r ;
3981: LD_ADDR_VAR 0 10
3985: PUSH
3986: LD_VAR 0 3
3990: PUSH
3991: LD_VAR 0 4
3995: PLUS
3996: ST_TO_ADDR
// for _x = min_x to max_x do
3997: LD_ADDR_VAR 0 11
4001: PUSH
4002: DOUBLE
4003: LD_VAR 0 7
4007: DEC
4008: ST_TO_ADDR
4009: LD_VAR 0 9
4013: PUSH
4014: FOR_TO
4015: IFFALSE 4132
// for _y = min_y to max_y do
4017: LD_ADDR_VAR 0 12
4021: PUSH
4022: DOUBLE
4023: LD_VAR 0 8
4027: DEC
4028: ST_TO_ADDR
4029: LD_VAR 0 10
4033: PUSH
4034: FOR_TO
4035: IFFALSE 4128
// begin if not ValidHex ( _x , _y ) then
4037: LD_VAR 0 11
4041: PPUSH
4042: LD_VAR 0 12
4046: PPUSH
4047: CALL_OW 488
4051: NOT
4052: IFFALSE 4056
// continue ;
4054: GO 4034
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4056: LD_VAR 0 11
4060: PPUSH
4061: LD_VAR 0 12
4065: PPUSH
4066: CALL_OW 351
4070: PUSH
4071: LD_VAR 0 11
4075: PPUSH
4076: LD_VAR 0 12
4080: PPUSH
4081: CALL_OW 554
4085: AND
4086: IFFALSE 4126
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4088: LD_ADDR_VAR 0 13
4092: PUSH
4093: LD_VAR 0 13
4097: PPUSH
4098: LD_VAR 0 13
4102: PUSH
4103: LD_INT 1
4105: PLUS
4106: PPUSH
4107: LD_VAR 0 11
4111: PUSH
4112: LD_VAR 0 12
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PPUSH
4121: CALL_OW 2
4125: ST_TO_ADDR
// end ;
4126: GO 4034
4128: POP
4129: POP
4130: GO 4014
4132: POP
4133: POP
// if not list then
4134: LD_VAR 0 13
4138: NOT
4139: IFFALSE 4143
// exit ;
4141: GO 4214
// for i in list do
4143: LD_ADDR_VAR 0 6
4147: PUSH
4148: LD_VAR 0 13
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4212
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4156: LD_VAR 0 1
4160: PPUSH
4161: LD_STRING M
4163: PUSH
4164: LD_VAR 0 6
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PUSH
4173: LD_VAR 0 6
4177: PUSH
4178: LD_INT 2
4180: ARRAY
4181: PUSH
4182: LD_INT 0
4184: PUSH
4185: LD_INT 0
4187: PUSH
4188: LD_INT 0
4190: PUSH
4191: LD_INT 0
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: PUSH
4203: EMPTY
4204: LIST
4205: PPUSH
4206: CALL_OW 447
4210: GO 4153
4212: POP
4213: POP
// end ;
4214: LD_VAR 0 5
4218: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
4219: LD_EXP 14
4223: NOT
4224: IFFALSE 4274
4226: GO 4228
4228: DISABLE
// begin initHack := true ;
4229: LD_ADDR_EXP 14
4233: PUSH
4234: LD_INT 1
4236: ST_TO_ADDR
// hackTanks := [ ] ;
4237: LD_ADDR_EXP 15
4241: PUSH
4242: EMPTY
4243: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4244: LD_ADDR_EXP 16
4248: PUSH
4249: EMPTY
4250: ST_TO_ADDR
// hackLimit := 3 ;
4251: LD_ADDR_EXP 17
4255: PUSH
4256: LD_INT 3
4258: ST_TO_ADDR
// hackDist := 12 ;
4259: LD_ADDR_EXP 18
4263: PUSH
4264: LD_INT 12
4266: ST_TO_ADDR
// hackCounter := [ ] ;
4267: LD_ADDR_EXP 19
4271: PUSH
4272: EMPTY
4273: ST_TO_ADDR
// end ;
4274: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
4275: LD_EXP 14
4279: PUSH
4280: LD_INT 34
4282: PUSH
4283: LD_EXP 81
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PPUSH
4292: CALL_OW 69
4296: AND
4297: IFFALSE 4552
4299: GO 4301
4301: DISABLE
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
// begin enable ;
4306: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
4307: LD_ADDR_VAR 0 1
4311: PUSH
4312: LD_INT 34
4314: PUSH
4315: LD_EXP 81
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PPUSH
4324: CALL_OW 69
4328: PUSH
4329: FOR_IN
4330: IFFALSE 4550
// begin if not i in hackTanks then
4332: LD_VAR 0 1
4336: PUSH
4337: LD_EXP 15
4341: IN
4342: NOT
4343: IFFALSE 4426
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
4345: LD_ADDR_EXP 15
4349: PUSH
4350: LD_EXP 15
4354: PPUSH
4355: LD_EXP 15
4359: PUSH
4360: LD_INT 1
4362: PLUS
4363: PPUSH
4364: LD_VAR 0 1
4368: PPUSH
4369: CALL_OW 1
4373: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
4374: LD_ADDR_EXP 16
4378: PUSH
4379: LD_EXP 16
4383: PPUSH
4384: LD_EXP 16
4388: PUSH
4389: LD_INT 1
4391: PLUS
4392: PPUSH
4393: EMPTY
4394: PPUSH
4395: CALL_OW 1
4399: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
4400: LD_ADDR_EXP 19
4404: PUSH
4405: LD_EXP 19
4409: PPUSH
4410: LD_EXP 19
4414: PUSH
4415: LD_INT 1
4417: PLUS
4418: PPUSH
4419: EMPTY
4420: PPUSH
4421: CALL_OW 1
4425: ST_TO_ADDR
// end ; if not IsOk ( i ) then
4426: LD_VAR 0 1
4430: PPUSH
4431: CALL_OW 302
4435: NOT
4436: IFFALSE 4449
// begin HackUnlinkAll ( i ) ;
4438: LD_VAR 0 1
4442: PPUSH
4443: CALL 4555 0 1
// continue ;
4447: GO 4329
// end ; HackCheckCapturedStatus ( i ) ;
4449: LD_VAR 0 1
4453: PPUSH
4454: CALL 4998 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
4458: LD_ADDR_VAR 0 2
4462: PUSH
4463: LD_INT 81
4465: PUSH
4466: LD_VAR 0 1
4470: PPUSH
4471: CALL_OW 255
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PUSH
4480: LD_INT 33
4482: PUSH
4483: LD_INT 3
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: LD_INT 91
4492: PUSH
4493: LD_VAR 0 1
4497: PUSH
4498: LD_EXP 18
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 50
4510: PUSH
4511: EMPTY
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PPUSH
4520: CALL_OW 69
4524: ST_TO_ADDR
// if not tmp then
4525: LD_VAR 0 2
4529: NOT
4530: IFFALSE 4534
// continue ;
4532: GO 4329
// HackLink ( i , tmp ) ;
4534: LD_VAR 0 1
4538: PPUSH
4539: LD_VAR 0 2
4543: PPUSH
4544: CALL 4691 0 2
// end ;
4548: GO 4329
4550: POP
4551: POP
// end ;
4552: PPOPN 2
4554: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
4555: LD_INT 0
4557: PPUSH
4558: PPUSH
4559: PPUSH
// if not hack in hackTanks then
4560: LD_VAR 0 1
4564: PUSH
4565: LD_EXP 15
4569: IN
4570: NOT
4571: IFFALSE 4575
// exit ;
4573: GO 4686
// index := GetElementIndex ( hackTanks , hack ) ;
4575: LD_ADDR_VAR 0 4
4579: PUSH
4580: LD_EXP 15
4584: PPUSH
4585: LD_VAR 0 1
4589: PPUSH
4590: CALL 25452 0 2
4594: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
4595: LD_EXP 16
4599: PUSH
4600: LD_VAR 0 4
4604: ARRAY
4605: IFFALSE 4686
// begin for i in hackTanksCaptured [ index ] do
4607: LD_ADDR_VAR 0 3
4611: PUSH
4612: LD_EXP 16
4616: PUSH
4617: LD_VAR 0 4
4621: ARRAY
4622: PUSH
4623: FOR_IN
4624: IFFALSE 4650
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
4626: LD_VAR 0 3
4630: PUSH
4631: LD_INT 1
4633: ARRAY
4634: PPUSH
4635: LD_VAR 0 3
4639: PUSH
4640: LD_INT 2
4642: ARRAY
4643: PPUSH
4644: CALL_OW 235
4648: GO 4623
4650: POP
4651: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
4652: LD_ADDR_EXP 16
4656: PUSH
4657: LD_EXP 16
4661: PPUSH
4662: LD_VAR 0 4
4666: PPUSH
4667: EMPTY
4668: PPUSH
4669: CALL_OW 1
4673: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
4674: LD_VAR 0 1
4678: PPUSH
4679: LD_INT 0
4681: PPUSH
4682: CALL_OW 505
// end ; end ;
4686: LD_VAR 0 2
4690: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// if not hack in hackTanks or not vehicles then
4696: LD_VAR 0 1
4700: PUSH
4701: LD_EXP 15
4705: IN
4706: NOT
4707: PUSH
4708: LD_VAR 0 2
4712: NOT
4713: OR
4714: IFFALSE 4718
// exit ;
4716: GO 4993
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
4718: LD_ADDR_VAR 0 2
4722: PUSH
4723: LD_VAR 0 1
4727: PPUSH
4728: LD_VAR 0 2
4732: PPUSH
4733: LD_INT 1
4735: PPUSH
4736: LD_INT 1
4738: PPUSH
4739: CALL 26102 0 4
4743: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
4744: LD_ADDR_VAR 0 5
4748: PUSH
4749: LD_EXP 15
4753: PPUSH
4754: LD_VAR 0 1
4758: PPUSH
4759: CALL 25452 0 2
4763: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
4764: LD_EXP 16
4768: PUSH
4769: LD_VAR 0 5
4773: ARRAY
4774: PUSH
4775: LD_EXP 17
4779: LESS
4780: IFFALSE 4969
// begin for i := 1 to vehicles do
4782: LD_ADDR_VAR 0 4
4786: PUSH
4787: DOUBLE
4788: LD_INT 1
4790: DEC
4791: ST_TO_ADDR
4792: LD_VAR 0 2
4796: PUSH
4797: FOR_TO
4798: IFFALSE 4967
// begin if hackTanksCaptured [ index ] = hackLimit then
4800: LD_EXP 16
4804: PUSH
4805: LD_VAR 0 5
4809: ARRAY
4810: PUSH
4811: LD_EXP 17
4815: EQUAL
4816: IFFALSE 4820
// break ;
4818: GO 4967
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
4820: LD_ADDR_EXP 19
4824: PUSH
4825: LD_EXP 19
4829: PPUSH
4830: LD_VAR 0 5
4834: PPUSH
4835: LD_EXP 19
4839: PUSH
4840: LD_VAR 0 5
4844: ARRAY
4845: PUSH
4846: LD_INT 1
4848: PLUS
4849: PPUSH
4850: CALL_OW 1
4854: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
4855: LD_ADDR_EXP 16
4859: PUSH
4860: LD_EXP 16
4864: PPUSH
4865: LD_VAR 0 5
4869: PUSH
4870: LD_EXP 16
4874: PUSH
4875: LD_VAR 0 5
4879: ARRAY
4880: PUSH
4881: LD_INT 1
4883: PLUS
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PPUSH
4889: LD_VAR 0 2
4893: PUSH
4894: LD_VAR 0 4
4898: ARRAY
4899: PUSH
4900: LD_VAR 0 2
4904: PUSH
4905: LD_VAR 0 4
4909: ARRAY
4910: PPUSH
4911: CALL_OW 255
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PPUSH
4920: CALL 25667 0 3
4924: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
4925: LD_VAR 0 2
4929: PUSH
4930: LD_VAR 0 4
4934: ARRAY
4935: PPUSH
4936: LD_VAR 0 1
4940: PPUSH
4941: CALL_OW 255
4945: PPUSH
4946: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
4950: LD_VAR 0 2
4954: PUSH
4955: LD_VAR 0 4
4959: ARRAY
4960: PPUSH
4961: CALL_OW 141
// end ;
4965: GO 4797
4967: POP
4968: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
4969: LD_VAR 0 1
4973: PPUSH
4974: LD_EXP 16
4978: PUSH
4979: LD_VAR 0 5
4983: ARRAY
4984: PUSH
4985: LD_INT 0
4987: PLUS
4988: PPUSH
4989: CALL_OW 505
// end ;
4993: LD_VAR 0 3
4997: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
4998: LD_INT 0
5000: PPUSH
5001: PPUSH
5002: PPUSH
5003: PPUSH
// if not hack in hackTanks then
5004: LD_VAR 0 1
5008: PUSH
5009: LD_EXP 15
5013: IN
5014: NOT
5015: IFFALSE 5019
// exit ;
5017: GO 5259
// index := GetElementIndex ( hackTanks , hack ) ;
5019: LD_ADDR_VAR 0 4
5023: PUSH
5024: LD_EXP 15
5028: PPUSH
5029: LD_VAR 0 1
5033: PPUSH
5034: CALL 25452 0 2
5038: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
5039: LD_ADDR_VAR 0 3
5043: PUSH
5044: DOUBLE
5045: LD_EXP 16
5049: PUSH
5050: LD_VAR 0 4
5054: ARRAY
5055: INC
5056: ST_TO_ADDR
5057: LD_INT 1
5059: PUSH
5060: FOR_DOWNTO
5061: IFFALSE 5233
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
5063: LD_ADDR_VAR 0 5
5067: PUSH
5068: LD_EXP 16
5072: PUSH
5073: LD_VAR 0 4
5077: ARRAY
5078: PUSH
5079: LD_VAR 0 3
5083: ARRAY
5084: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
5085: LD_VAR 0 5
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: CALL_OW 302
5098: NOT
5099: PUSH
5100: LD_VAR 0 5
5104: PUSH
5105: LD_INT 1
5107: ARRAY
5108: PPUSH
5109: CALL_OW 255
5113: PUSH
5114: LD_VAR 0 1
5118: PPUSH
5119: CALL_OW 255
5123: NONEQUAL
5124: OR
5125: IFFALSE 5231
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
5127: LD_VAR 0 5
5131: PUSH
5132: LD_INT 1
5134: ARRAY
5135: PPUSH
5136: CALL_OW 305
5140: PUSH
5141: LD_VAR 0 5
5145: PUSH
5146: LD_INT 1
5148: ARRAY
5149: PPUSH
5150: CALL_OW 255
5154: PUSH
5155: LD_VAR 0 1
5159: PPUSH
5160: CALL_OW 255
5164: EQUAL
5165: AND
5166: IFFALSE 5190
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
5168: LD_VAR 0 5
5172: PUSH
5173: LD_INT 1
5175: ARRAY
5176: PPUSH
5177: LD_VAR 0 5
5181: PUSH
5182: LD_INT 2
5184: ARRAY
5185: PPUSH
5186: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
5190: LD_ADDR_EXP 16
5194: PUSH
5195: LD_EXP 16
5199: PPUSH
5200: LD_VAR 0 4
5204: PPUSH
5205: LD_EXP 16
5209: PUSH
5210: LD_VAR 0 4
5214: ARRAY
5215: PPUSH
5216: LD_VAR 0 3
5220: PPUSH
5221: CALL_OW 3
5225: PPUSH
5226: CALL_OW 1
5230: ST_TO_ADDR
// end ; end ;
5231: GO 5060
5233: POP
5234: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5235: LD_VAR 0 1
5239: PPUSH
5240: LD_EXP 16
5244: PUSH
5245: LD_VAR 0 4
5249: ARRAY
5250: PUSH
5251: LD_INT 0
5253: PLUS
5254: PPUSH
5255: CALL_OW 505
// end ;
5259: LD_VAR 0 2
5263: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
5264: LD_INT 0
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
// if not hack in hackTanks then
5270: LD_VAR 0 1
5274: PUSH
5275: LD_EXP 15
5279: IN
5280: NOT
5281: IFFALSE 5285
// exit ;
5283: GO 5370
// index := GetElementIndex ( hackTanks , hack ) ;
5285: LD_ADDR_VAR 0 5
5289: PUSH
5290: LD_EXP 15
5294: PPUSH
5295: LD_VAR 0 1
5299: PPUSH
5300: CALL 25452 0 2
5304: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
5305: LD_ADDR_VAR 0 4
5309: PUSH
5310: DOUBLE
5311: LD_INT 1
5313: DEC
5314: ST_TO_ADDR
5315: LD_EXP 16
5319: PUSH
5320: LD_VAR 0 5
5324: ARRAY
5325: PUSH
5326: FOR_TO
5327: IFFALSE 5368
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
5329: LD_EXP 16
5333: PUSH
5334: LD_VAR 0 5
5338: ARRAY
5339: PUSH
5340: LD_VAR 0 4
5344: ARRAY
5345: PUSH
5346: LD_INT 1
5348: ARRAY
5349: PUSH
5350: LD_VAR 0 2
5354: EQUAL
5355: IFFALSE 5366
// KillUnit ( vehicle ) ;
5357: LD_VAR 0 2
5361: PPUSH
5362: CALL_OW 66
5366: GO 5326
5368: POP
5369: POP
// end ;
5370: LD_VAR 0 3
5374: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
5375: LD_EXP 20
5379: NOT
5380: IFFALSE 5415
5382: GO 5384
5384: DISABLE
// begin initMiner := true ;
5385: LD_ADDR_EXP 20
5389: PUSH
5390: LD_INT 1
5392: ST_TO_ADDR
// minersList := [ ] ;
5393: LD_ADDR_EXP 21
5397: PUSH
5398: EMPTY
5399: ST_TO_ADDR
// minerMinesList := [ ] ;
5400: LD_ADDR_EXP 22
5404: PUSH
5405: EMPTY
5406: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
5407: LD_ADDR_EXP 23
5411: PUSH
5412: LD_INT 5
5414: ST_TO_ADDR
// end ;
5415: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
5416: LD_EXP 20
5420: PUSH
5421: LD_INT 34
5423: PUSH
5424: LD_EXP 86
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PPUSH
5433: CALL_OW 69
5437: AND
5438: IFFALSE 5901
5440: GO 5442
5442: DISABLE
5443: LD_INT 0
5445: PPUSH
5446: PPUSH
5447: PPUSH
5448: PPUSH
// begin enable ;
5449: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 34
5457: PUSH
5458: LD_EXP 86
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PPUSH
5467: CALL_OW 69
5471: PUSH
5472: FOR_IN
5473: IFFALSE 5545
// begin if not i in minersList then
5475: LD_VAR 0 1
5479: PUSH
5480: LD_EXP 21
5484: IN
5485: NOT
5486: IFFALSE 5543
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
5488: LD_ADDR_EXP 21
5492: PUSH
5493: LD_EXP 21
5497: PPUSH
5498: LD_EXP 21
5502: PUSH
5503: LD_INT 1
5505: PLUS
5506: PPUSH
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 1
5516: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
5517: LD_ADDR_EXP 22
5521: PUSH
5522: LD_EXP 22
5526: PPUSH
5527: LD_EXP 22
5531: PUSH
5532: LD_INT 1
5534: PLUS
5535: PPUSH
5536: EMPTY
5537: PPUSH
5538: CALL_OW 1
5542: ST_TO_ADDR
// end end ;
5543: GO 5472
5545: POP
5546: POP
// for i := minerMinesList downto 1 do
5547: LD_ADDR_VAR 0 1
5551: PUSH
5552: DOUBLE
5553: LD_EXP 22
5557: INC
5558: ST_TO_ADDR
5559: LD_INT 1
5561: PUSH
5562: FOR_DOWNTO
5563: IFFALSE 5899
// begin if IsLive ( minersList [ i ] ) then
5565: LD_EXP 21
5569: PUSH
5570: LD_VAR 0 1
5574: ARRAY
5575: PPUSH
5576: CALL_OW 300
5580: IFFALSE 5608
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
5582: LD_EXP 21
5586: PUSH
5587: LD_VAR 0 1
5591: ARRAY
5592: PPUSH
5593: LD_EXP 22
5597: PUSH
5598: LD_VAR 0 1
5602: ARRAY
5603: PPUSH
5604: CALL_OW 505
// if not minerMinesList [ i ] then
5608: LD_EXP 22
5612: PUSH
5613: LD_VAR 0 1
5617: ARRAY
5618: NOT
5619: IFFALSE 5623
// continue ;
5621: GO 5562
// for j := minerMinesList [ i ] downto 1 do
5623: LD_ADDR_VAR 0 2
5627: PUSH
5628: DOUBLE
5629: LD_EXP 22
5633: PUSH
5634: LD_VAR 0 1
5638: ARRAY
5639: INC
5640: ST_TO_ADDR
5641: LD_INT 1
5643: PUSH
5644: FOR_DOWNTO
5645: IFFALSE 5895
// begin side := GetSide ( minersList [ i ] ) ;
5647: LD_ADDR_VAR 0 3
5651: PUSH
5652: LD_EXP 21
5656: PUSH
5657: LD_VAR 0 1
5661: ARRAY
5662: PPUSH
5663: CALL_OW 255
5667: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
5668: LD_ADDR_VAR 0 4
5672: PUSH
5673: LD_EXP 22
5677: PUSH
5678: LD_VAR 0 1
5682: ARRAY
5683: PUSH
5684: LD_VAR 0 2
5688: ARRAY
5689: PUSH
5690: LD_INT 1
5692: ARRAY
5693: PPUSH
5694: LD_EXP 22
5698: PUSH
5699: LD_VAR 0 1
5703: ARRAY
5704: PUSH
5705: LD_VAR 0 2
5709: ARRAY
5710: PUSH
5711: LD_INT 2
5713: ARRAY
5714: PPUSH
5715: CALL_OW 428
5719: ST_TO_ADDR
// if not tmp then
5720: LD_VAR 0 4
5724: NOT
5725: IFFALSE 5729
// continue ;
5727: GO 5644
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
5729: LD_VAR 0 4
5733: PUSH
5734: LD_INT 81
5736: PUSH
5737: LD_VAR 0 3
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: PPUSH
5746: CALL_OW 69
5750: IN
5751: PUSH
5752: LD_EXP 22
5756: PUSH
5757: LD_VAR 0 1
5761: ARRAY
5762: PUSH
5763: LD_VAR 0 2
5767: ARRAY
5768: PUSH
5769: LD_INT 1
5771: ARRAY
5772: PPUSH
5773: LD_EXP 22
5777: PUSH
5778: LD_VAR 0 1
5782: ARRAY
5783: PUSH
5784: LD_VAR 0 2
5788: ARRAY
5789: PUSH
5790: LD_INT 2
5792: ARRAY
5793: PPUSH
5794: CALL_OW 458
5798: AND
5799: IFFALSE 5893
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
5801: LD_EXP 22
5805: PUSH
5806: LD_VAR 0 1
5810: ARRAY
5811: PUSH
5812: LD_VAR 0 2
5816: ARRAY
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: PPUSH
5822: LD_EXP 22
5826: PUSH
5827: LD_VAR 0 1
5831: ARRAY
5832: PUSH
5833: LD_VAR 0 2
5837: ARRAY
5838: PUSH
5839: LD_INT 2
5841: ARRAY
5842: PPUSH
5843: LD_VAR 0 3
5847: PPUSH
5848: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
5852: LD_ADDR_EXP 22
5856: PUSH
5857: LD_EXP 22
5861: PPUSH
5862: LD_VAR 0 1
5866: PPUSH
5867: LD_EXP 22
5871: PUSH
5872: LD_VAR 0 1
5876: ARRAY
5877: PPUSH
5878: LD_VAR 0 2
5882: PPUSH
5883: CALL_OW 3
5887: PPUSH
5888: CALL_OW 1
5892: ST_TO_ADDR
// end ; end ;
5893: GO 5644
5895: POP
5896: POP
// end ;
5897: GO 5562
5899: POP
5900: POP
// end ;
5901: PPOPN 4
5903: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
5904: LD_INT 0
5906: PPUSH
5907: PPUSH
// result := false ;
5908: LD_ADDR_VAR 0 4
5912: PUSH
5913: LD_INT 0
5915: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 264
5925: PUSH
5926: LD_EXP 86
5930: EQUAL
5931: NOT
5932: IFFALSE 5936
// exit ;
5934: GO 6176
// index := GetElementIndex ( minersList , unit ) ;
5936: LD_ADDR_VAR 0 5
5940: PUSH
5941: LD_EXP 21
5945: PPUSH
5946: LD_VAR 0 1
5950: PPUSH
5951: CALL 25452 0 2
5955: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
5956: LD_EXP 22
5960: PUSH
5961: LD_VAR 0 5
5965: ARRAY
5966: PUSH
5967: LD_EXP 23
5971: GREATEREQUAL
5972: IFFALSE 5976
// exit ;
5974: GO 6176
// ComMoveXY ( unit , x , y ) ;
5976: LD_VAR 0 1
5980: PPUSH
5981: LD_VAR 0 2
5985: PPUSH
5986: LD_VAR 0 3
5990: PPUSH
5991: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5995: LD_INT 35
5997: PPUSH
5998: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
6002: LD_VAR 0 1
6006: PPUSH
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 3
6016: PPUSH
6017: CALL 55849 0 3
6021: NOT
6022: PUSH
6023: LD_VAR 0 1
6027: PPUSH
6028: CALL_OW 314
6032: AND
6033: IFFALSE 6037
// exit ;
6035: GO 6176
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
6037: LD_VAR 0 2
6041: PPUSH
6042: LD_VAR 0 3
6046: PPUSH
6047: CALL_OW 428
6051: PUSH
6052: LD_VAR 0 1
6056: EQUAL
6057: PUSH
6058: LD_VAR 0 1
6062: PPUSH
6063: CALL_OW 314
6067: NOT
6068: AND
6069: IFFALSE 5995
// PlaySoundXY ( x , y , PlantMine ) ;
6071: LD_VAR 0 2
6075: PPUSH
6076: LD_VAR 0 3
6080: PPUSH
6081: LD_STRING PlantMine
6083: PPUSH
6084: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
6088: LD_VAR 0 2
6092: PPUSH
6093: LD_VAR 0 3
6097: PPUSH
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 255
6107: PPUSH
6108: LD_INT 0
6110: PPUSH
6111: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
6115: LD_ADDR_EXP 22
6119: PUSH
6120: LD_EXP 22
6124: PPUSH
6125: LD_VAR 0 5
6129: PUSH
6130: LD_EXP 22
6134: PUSH
6135: LD_VAR 0 5
6139: ARRAY
6140: PUSH
6141: LD_INT 1
6143: PLUS
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PPUSH
6149: LD_VAR 0 2
6153: PUSH
6154: LD_VAR 0 3
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PPUSH
6163: CALL 25667 0 3
6167: ST_TO_ADDR
// result := true ;
6168: LD_ADDR_VAR 0 4
6172: PUSH
6173: LD_INT 1
6175: ST_TO_ADDR
// end ;
6176: LD_VAR 0 4
6180: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
// if not unit in minersList then
6186: LD_VAR 0 1
6190: PUSH
6191: LD_EXP 21
6195: IN
6196: NOT
6197: IFFALSE 6201
// exit ;
6199: GO 6593
// index := GetElementIndex ( minersList , unit ) ;
6201: LD_ADDR_VAR 0 6
6205: PUSH
6206: LD_EXP 21
6210: PPUSH
6211: LD_VAR 0 1
6215: PPUSH
6216: CALL 25452 0 2
6220: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
6221: LD_ADDR_VAR 0 5
6225: PUSH
6226: DOUBLE
6227: LD_EXP 22
6231: PUSH
6232: LD_VAR 0 6
6236: ARRAY
6237: INC
6238: ST_TO_ADDR
6239: LD_INT 1
6241: PUSH
6242: FOR_DOWNTO
6243: IFFALSE 6404
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
6245: LD_EXP 22
6249: PUSH
6250: LD_VAR 0 6
6254: ARRAY
6255: PUSH
6256: LD_VAR 0 5
6260: ARRAY
6261: PUSH
6262: LD_INT 1
6264: ARRAY
6265: PUSH
6266: LD_VAR 0 2
6270: EQUAL
6271: PUSH
6272: LD_EXP 22
6276: PUSH
6277: LD_VAR 0 6
6281: ARRAY
6282: PUSH
6283: LD_VAR 0 5
6287: ARRAY
6288: PUSH
6289: LD_INT 2
6291: ARRAY
6292: PUSH
6293: LD_VAR 0 3
6297: EQUAL
6298: AND
6299: IFFALSE 6402
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6301: LD_EXP 22
6305: PUSH
6306: LD_VAR 0 6
6310: ARRAY
6311: PUSH
6312: LD_VAR 0 5
6316: ARRAY
6317: PUSH
6318: LD_INT 1
6320: ARRAY
6321: PPUSH
6322: LD_EXP 22
6326: PUSH
6327: LD_VAR 0 6
6331: ARRAY
6332: PUSH
6333: LD_VAR 0 5
6337: ARRAY
6338: PUSH
6339: LD_INT 2
6341: ARRAY
6342: PPUSH
6343: LD_VAR 0 1
6347: PPUSH
6348: CALL_OW 255
6352: PPUSH
6353: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6357: LD_ADDR_EXP 22
6361: PUSH
6362: LD_EXP 22
6366: PPUSH
6367: LD_VAR 0 6
6371: PPUSH
6372: LD_EXP 22
6376: PUSH
6377: LD_VAR 0 6
6381: ARRAY
6382: PPUSH
6383: LD_VAR 0 5
6387: PPUSH
6388: CALL_OW 3
6392: PPUSH
6393: CALL_OW 1
6397: ST_TO_ADDR
// exit ;
6398: POP
6399: POP
6400: GO 6593
// end ; end ;
6402: GO 6242
6404: POP
6405: POP
// for i := minerMinesList [ index ] downto 1 do
6406: LD_ADDR_VAR 0 5
6410: PUSH
6411: DOUBLE
6412: LD_EXP 22
6416: PUSH
6417: LD_VAR 0 6
6421: ARRAY
6422: INC
6423: ST_TO_ADDR
6424: LD_INT 1
6426: PUSH
6427: FOR_DOWNTO
6428: IFFALSE 6591
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
6430: LD_EXP 22
6434: PUSH
6435: LD_VAR 0 6
6439: ARRAY
6440: PUSH
6441: LD_VAR 0 5
6445: ARRAY
6446: PUSH
6447: LD_INT 1
6449: ARRAY
6450: PPUSH
6451: LD_EXP 22
6455: PUSH
6456: LD_VAR 0 6
6460: ARRAY
6461: PUSH
6462: LD_VAR 0 5
6466: ARRAY
6467: PUSH
6468: LD_INT 2
6470: ARRAY
6471: PPUSH
6472: LD_VAR 0 2
6476: PPUSH
6477: LD_VAR 0 3
6481: PPUSH
6482: CALL_OW 298
6486: PUSH
6487: LD_INT 6
6489: LESS
6490: IFFALSE 6589
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6492: LD_EXP 22
6496: PUSH
6497: LD_VAR 0 6
6501: ARRAY
6502: PUSH
6503: LD_VAR 0 5
6507: ARRAY
6508: PUSH
6509: LD_INT 1
6511: ARRAY
6512: PPUSH
6513: LD_EXP 22
6517: PUSH
6518: LD_VAR 0 6
6522: ARRAY
6523: PUSH
6524: LD_VAR 0 5
6528: ARRAY
6529: PUSH
6530: LD_INT 2
6532: ARRAY
6533: PPUSH
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 255
6543: PPUSH
6544: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6548: LD_ADDR_EXP 22
6552: PUSH
6553: LD_EXP 22
6557: PPUSH
6558: LD_VAR 0 6
6562: PPUSH
6563: LD_EXP 22
6567: PUSH
6568: LD_VAR 0 6
6572: ARRAY
6573: PPUSH
6574: LD_VAR 0 5
6578: PPUSH
6579: CALL_OW 3
6583: PPUSH
6584: CALL_OW 1
6588: ST_TO_ADDR
// end ; end ;
6589: GO 6427
6591: POP
6592: POP
// end ;
6593: LD_VAR 0 4
6597: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
6598: LD_INT 0
6600: PPUSH
6601: PPUSH
6602: PPUSH
6603: PPUSH
6604: PPUSH
6605: PPUSH
6606: PPUSH
6607: PPUSH
6608: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
6609: LD_VAR 0 1
6613: PPUSH
6614: CALL_OW 264
6618: PUSH
6619: LD_EXP 86
6623: EQUAL
6624: NOT
6625: PUSH
6626: LD_VAR 0 1
6630: PUSH
6631: LD_EXP 21
6635: IN
6636: NOT
6637: OR
6638: IFFALSE 6642
// exit ;
6640: GO 6964
// index := GetElementIndex ( minersList , unit ) ;
6642: LD_ADDR_VAR 0 6
6646: PUSH
6647: LD_EXP 21
6651: PPUSH
6652: LD_VAR 0 1
6656: PPUSH
6657: CALL 25452 0 2
6661: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
6662: LD_ADDR_VAR 0 8
6666: PUSH
6667: LD_EXP 23
6671: PUSH
6672: LD_EXP 22
6676: PUSH
6677: LD_VAR 0 6
6681: ARRAY
6682: MINUS
6683: ST_TO_ADDR
// if not minesFreeAmount then
6684: LD_VAR 0 8
6688: NOT
6689: IFFALSE 6693
// exit ;
6691: GO 6964
// tmp := [ ] ;
6693: LD_ADDR_VAR 0 7
6697: PUSH
6698: EMPTY
6699: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
6700: LD_ADDR_VAR 0 5
6704: PUSH
6705: DOUBLE
6706: LD_INT 1
6708: DEC
6709: ST_TO_ADDR
6710: LD_VAR 0 8
6714: PUSH
6715: FOR_TO
6716: IFFALSE 6911
// begin _d := rand ( 0 , 5 ) ;
6718: LD_ADDR_VAR 0 11
6722: PUSH
6723: LD_INT 0
6725: PPUSH
6726: LD_INT 5
6728: PPUSH
6729: CALL_OW 12
6733: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
6734: LD_ADDR_VAR 0 12
6738: PUSH
6739: LD_INT 2
6741: PPUSH
6742: LD_INT 6
6744: PPUSH
6745: CALL_OW 12
6749: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
6750: LD_ADDR_VAR 0 9
6754: PUSH
6755: LD_VAR 0 2
6759: PPUSH
6760: LD_VAR 0 11
6764: PPUSH
6765: LD_VAR 0 12
6769: PPUSH
6770: CALL_OW 272
6774: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
6775: LD_ADDR_VAR 0 10
6779: PUSH
6780: LD_VAR 0 3
6784: PPUSH
6785: LD_VAR 0 11
6789: PPUSH
6790: LD_VAR 0 12
6794: PPUSH
6795: CALL_OW 273
6799: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
6800: LD_VAR 0 9
6804: PPUSH
6805: LD_VAR 0 10
6809: PPUSH
6810: CALL_OW 488
6814: PUSH
6815: LD_VAR 0 9
6819: PUSH
6820: LD_VAR 0 10
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_VAR 0 7
6833: IN
6834: NOT
6835: AND
6836: PUSH
6837: LD_VAR 0 9
6841: PPUSH
6842: LD_VAR 0 10
6846: PPUSH
6847: CALL_OW 458
6851: NOT
6852: AND
6853: IFFALSE 6895
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
6855: LD_ADDR_VAR 0 7
6859: PUSH
6860: LD_VAR 0 7
6864: PPUSH
6865: LD_VAR 0 7
6869: PUSH
6870: LD_INT 1
6872: PLUS
6873: PPUSH
6874: LD_VAR 0 9
6878: PUSH
6879: LD_VAR 0 10
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PPUSH
6888: CALL_OW 1
6892: ST_TO_ADDR
6893: GO 6909
// i := i - 1 ;
6895: LD_ADDR_VAR 0 5
6899: PUSH
6900: LD_VAR 0 5
6904: PUSH
6905: LD_INT 1
6907: MINUS
6908: ST_TO_ADDR
// end ;
6909: GO 6715
6911: POP
6912: POP
// for i in tmp do
6913: LD_ADDR_VAR 0 5
6917: PUSH
6918: LD_VAR 0 7
6922: PUSH
6923: FOR_IN
6924: IFFALSE 6962
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
6926: LD_VAR 0 1
6930: PPUSH
6931: LD_VAR 0 5
6935: PUSH
6936: LD_INT 1
6938: ARRAY
6939: PPUSH
6940: LD_VAR 0 5
6944: PUSH
6945: LD_INT 2
6947: ARRAY
6948: PPUSH
6949: CALL 5904 0 3
6953: NOT
6954: IFFALSE 6960
// exit ;
6956: POP
6957: POP
6958: GO 6964
6960: GO 6923
6962: POP
6963: POP
// end ;
6964: LD_VAR 0 4
6968: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
6973: PPUSH
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
// if not GetClass ( unit ) = class_sniper then
6978: LD_VAR 0 1
6982: PPUSH
6983: CALL_OW 257
6987: PUSH
6988: LD_INT 5
6990: EQUAL
6991: NOT
6992: IFFALSE 6996
// exit ;
6994: GO 7384
// dist := 8 ;
6996: LD_ADDR_VAR 0 5
7000: PUSH
7001: LD_INT 8
7003: ST_TO_ADDR
// viewRange := 12 ;
7004: LD_ADDR_VAR 0 7
7008: PUSH
7009: LD_INT 12
7011: ST_TO_ADDR
// side := GetSide ( unit ) ;
7012: LD_ADDR_VAR 0 6
7016: PUSH
7017: LD_VAR 0 1
7021: PPUSH
7022: CALL_OW 255
7026: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
7027: LD_INT 61
7029: PPUSH
7030: LD_VAR 0 6
7034: PPUSH
7035: CALL_OW 321
7039: PUSH
7040: LD_INT 2
7042: EQUAL
7043: IFFALSE 7053
// viewRange := 16 ;
7045: LD_ADDR_VAR 0 7
7049: PUSH
7050: LD_INT 16
7052: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
7053: LD_VAR 0 1
7057: PPUSH
7058: LD_VAR 0 2
7062: PPUSH
7063: LD_VAR 0 3
7067: PPUSH
7068: CALL_OW 297
7072: PUSH
7073: LD_VAR 0 5
7077: GREATER
7078: IFFALSE 7157
// begin ComMoveXY ( unit , x , y ) ;
7080: LD_VAR 0 1
7084: PPUSH
7085: LD_VAR 0 2
7089: PPUSH
7090: LD_VAR 0 3
7094: PPUSH
7095: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7099: LD_INT 35
7101: PPUSH
7102: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
7106: LD_VAR 0 1
7110: PPUSH
7111: LD_VAR 0 2
7115: PPUSH
7116: LD_VAR 0 3
7120: PPUSH
7121: CALL 55849 0 3
7125: NOT
7126: IFFALSE 7130
// exit ;
7128: GO 7384
// until GetDistUnitXY ( unit , x , y ) < dist ;
7130: LD_VAR 0 1
7134: PPUSH
7135: LD_VAR 0 2
7139: PPUSH
7140: LD_VAR 0 3
7144: PPUSH
7145: CALL_OW 297
7149: PUSH
7150: LD_VAR 0 5
7154: LESS
7155: IFFALSE 7099
// end ; ComTurnXY ( unit , x , y ) ;
7157: LD_VAR 0 1
7161: PPUSH
7162: LD_VAR 0 2
7166: PPUSH
7167: LD_VAR 0 3
7171: PPUSH
7172: CALL_OW 118
// wait ( 5 ) ;
7176: LD_INT 5
7178: PPUSH
7179: CALL_OW 67
// _d := GetDir ( unit ) ;
7183: LD_ADDR_VAR 0 10
7187: PUSH
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL_OW 254
7197: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
7198: LD_ADDR_VAR 0 8
7202: PUSH
7203: LD_VAR 0 1
7207: PPUSH
7208: CALL_OW 250
7212: PPUSH
7213: LD_VAR 0 10
7217: PPUSH
7218: LD_VAR 0 5
7222: PPUSH
7223: CALL_OW 272
7227: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
7228: LD_ADDR_VAR 0 9
7232: PUSH
7233: LD_VAR 0 1
7237: PPUSH
7238: CALL_OW 251
7242: PPUSH
7243: LD_VAR 0 10
7247: PPUSH
7248: LD_VAR 0 5
7252: PPUSH
7253: CALL_OW 273
7257: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7258: LD_VAR 0 8
7262: PPUSH
7263: LD_VAR 0 9
7267: PPUSH
7268: CALL_OW 488
7272: NOT
7273: IFFALSE 7277
// exit ;
7275: GO 7384
// ComAnimCustom ( unit , 1 ) ;
7277: LD_VAR 0 1
7281: PPUSH
7282: LD_INT 1
7284: PPUSH
7285: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
7289: LD_VAR 0 8
7293: PPUSH
7294: LD_VAR 0 9
7298: PPUSH
7299: LD_VAR 0 6
7303: PPUSH
7304: LD_VAR 0 7
7308: PPUSH
7309: CALL_OW 330
// repeat wait ( 1 ) ;
7313: LD_INT 1
7315: PPUSH
7316: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
7320: LD_VAR 0 1
7324: PPUSH
7325: CALL_OW 316
7329: PUSH
7330: LD_VAR 0 1
7334: PPUSH
7335: CALL_OW 314
7339: OR
7340: PUSH
7341: LD_VAR 0 1
7345: PPUSH
7346: CALL_OW 302
7350: NOT
7351: OR
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 301
7362: OR
7363: IFFALSE 7313
// RemoveSeeing ( _x , _y , side ) ;
7365: LD_VAR 0 8
7369: PPUSH
7370: LD_VAR 0 9
7374: PPUSH
7375: LD_VAR 0 6
7379: PPUSH
7380: CALL_OW 331
// end ; end_of_file
7384: LD_VAR 0 4
7388: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7389: LD_INT 0
7391: PPUSH
// if p2 = 100 then
7392: LD_VAR 0 2
7396: PUSH
7397: LD_INT 100
7399: EQUAL
7400: IFFALSE 8349
// begin if not StreamModeActive then
7402: LD_EXP 24
7406: NOT
7407: IFFALSE 7417
// StreamModeActive := true ;
7409: LD_ADDR_EXP 24
7413: PUSH
7414: LD_INT 1
7416: ST_TO_ADDR
// if p3 = 0 then
7417: LD_VAR 0 3
7421: PUSH
7422: LD_INT 0
7424: EQUAL
7425: IFFALSE 7431
// InitStreamMode ;
7427: CALL 8509 0 0
// if p3 = 1 then
7431: LD_VAR 0 3
7435: PUSH
7436: LD_INT 1
7438: EQUAL
7439: IFFALSE 7449
// sRocket := true ;
7441: LD_ADDR_EXP 29
7445: PUSH
7446: LD_INT 1
7448: ST_TO_ADDR
// if p3 = 2 then
7449: LD_VAR 0 3
7453: PUSH
7454: LD_INT 2
7456: EQUAL
7457: IFFALSE 7467
// sSpeed := true ;
7459: LD_ADDR_EXP 28
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// if p3 = 3 then
7467: LD_VAR 0 3
7471: PUSH
7472: LD_INT 3
7474: EQUAL
7475: IFFALSE 7485
// sEngine := true ;
7477: LD_ADDR_EXP 30
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// if p3 = 4 then
7485: LD_VAR 0 3
7489: PUSH
7490: LD_INT 4
7492: EQUAL
7493: IFFALSE 7503
// sSpec := true ;
7495: LD_ADDR_EXP 27
7499: PUSH
7500: LD_INT 1
7502: ST_TO_ADDR
// if p3 = 5 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 5
7510: EQUAL
7511: IFFALSE 7521
// sLevel := true ;
7513: LD_ADDR_EXP 31
7517: PUSH
7518: LD_INT 1
7520: ST_TO_ADDR
// if p3 = 6 then
7521: LD_VAR 0 3
7525: PUSH
7526: LD_INT 6
7528: EQUAL
7529: IFFALSE 7539
// sArmoury := true ;
7531: LD_ADDR_EXP 32
7535: PUSH
7536: LD_INT 1
7538: ST_TO_ADDR
// if p3 = 7 then
7539: LD_VAR 0 3
7543: PUSH
7544: LD_INT 7
7546: EQUAL
7547: IFFALSE 7557
// sRadar := true ;
7549: LD_ADDR_EXP 33
7553: PUSH
7554: LD_INT 1
7556: ST_TO_ADDR
// if p3 = 8 then
7557: LD_VAR 0 3
7561: PUSH
7562: LD_INT 8
7564: EQUAL
7565: IFFALSE 7575
// sBunker := true ;
7567: LD_ADDR_EXP 34
7571: PUSH
7572: LD_INT 1
7574: ST_TO_ADDR
// if p3 = 9 then
7575: LD_VAR 0 3
7579: PUSH
7580: LD_INT 9
7582: EQUAL
7583: IFFALSE 7593
// sHack := true ;
7585: LD_ADDR_EXP 35
7589: PUSH
7590: LD_INT 1
7592: ST_TO_ADDR
// if p3 = 10 then
7593: LD_VAR 0 3
7597: PUSH
7598: LD_INT 10
7600: EQUAL
7601: IFFALSE 7611
// sFire := true ;
7603: LD_ADDR_EXP 36
7607: PUSH
7608: LD_INT 1
7610: ST_TO_ADDR
// if p3 = 11 then
7611: LD_VAR 0 3
7615: PUSH
7616: LD_INT 11
7618: EQUAL
7619: IFFALSE 7629
// sRefresh := true ;
7621: LD_ADDR_EXP 37
7625: PUSH
7626: LD_INT 1
7628: ST_TO_ADDR
// if p3 = 12 then
7629: LD_VAR 0 3
7633: PUSH
7634: LD_INT 12
7636: EQUAL
7637: IFFALSE 7647
// sExp := true ;
7639: LD_ADDR_EXP 38
7643: PUSH
7644: LD_INT 1
7646: ST_TO_ADDR
// if p3 = 13 then
7647: LD_VAR 0 3
7651: PUSH
7652: LD_INT 13
7654: EQUAL
7655: IFFALSE 7665
// sDepot := true ;
7657: LD_ADDR_EXP 39
7661: PUSH
7662: LD_INT 1
7664: ST_TO_ADDR
// if p3 = 14 then
7665: LD_VAR 0 3
7669: PUSH
7670: LD_INT 14
7672: EQUAL
7673: IFFALSE 7683
// sFlag := true ;
7675: LD_ADDR_EXP 40
7679: PUSH
7680: LD_INT 1
7682: ST_TO_ADDR
// if p3 = 15 then
7683: LD_VAR 0 3
7687: PUSH
7688: LD_INT 15
7690: EQUAL
7691: IFFALSE 7701
// sKamikadze := true ;
7693: LD_ADDR_EXP 48
7697: PUSH
7698: LD_INT 1
7700: ST_TO_ADDR
// if p3 = 16 then
7701: LD_VAR 0 3
7705: PUSH
7706: LD_INT 16
7708: EQUAL
7709: IFFALSE 7719
// sTroll := true ;
7711: LD_ADDR_EXP 49
7715: PUSH
7716: LD_INT 1
7718: ST_TO_ADDR
// if p3 = 17 then
7719: LD_VAR 0 3
7723: PUSH
7724: LD_INT 17
7726: EQUAL
7727: IFFALSE 7737
// sSlow := true ;
7729: LD_ADDR_EXP 50
7733: PUSH
7734: LD_INT 1
7736: ST_TO_ADDR
// if p3 = 18 then
7737: LD_VAR 0 3
7741: PUSH
7742: LD_INT 18
7744: EQUAL
7745: IFFALSE 7755
// sLack := true ;
7747: LD_ADDR_EXP 51
7751: PUSH
7752: LD_INT 1
7754: ST_TO_ADDR
// if p3 = 19 then
7755: LD_VAR 0 3
7759: PUSH
7760: LD_INT 19
7762: EQUAL
7763: IFFALSE 7773
// sTank := true ;
7765: LD_ADDR_EXP 53
7769: PUSH
7770: LD_INT 1
7772: ST_TO_ADDR
// if p3 = 20 then
7773: LD_VAR 0 3
7777: PUSH
7778: LD_INT 20
7780: EQUAL
7781: IFFALSE 7791
// sRemote := true ;
7783: LD_ADDR_EXP 54
7787: PUSH
7788: LD_INT 1
7790: ST_TO_ADDR
// if p3 = 21 then
7791: LD_VAR 0 3
7795: PUSH
7796: LD_INT 21
7798: EQUAL
7799: IFFALSE 7809
// sPowell := true ;
7801: LD_ADDR_EXP 55
7805: PUSH
7806: LD_INT 1
7808: ST_TO_ADDR
// if p3 = 22 then
7809: LD_VAR 0 3
7813: PUSH
7814: LD_INT 22
7816: EQUAL
7817: IFFALSE 7827
// sTeleport := true ;
7819: LD_ADDR_EXP 58
7823: PUSH
7824: LD_INT 1
7826: ST_TO_ADDR
// if p3 = 23 then
7827: LD_VAR 0 3
7831: PUSH
7832: LD_INT 23
7834: EQUAL
7835: IFFALSE 7845
// sOilTower := true ;
7837: LD_ADDR_EXP 60
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// if p3 = 24 then
7845: LD_VAR 0 3
7849: PUSH
7850: LD_INT 24
7852: EQUAL
7853: IFFALSE 7863
// sShovel := true ;
7855: LD_ADDR_EXP 61
7859: PUSH
7860: LD_INT 1
7862: ST_TO_ADDR
// if p3 = 25 then
7863: LD_VAR 0 3
7867: PUSH
7868: LD_INT 25
7870: EQUAL
7871: IFFALSE 7881
// sSheik := true ;
7873: LD_ADDR_EXP 62
7877: PUSH
7878: LD_INT 1
7880: ST_TO_ADDR
// if p3 = 26 then
7881: LD_VAR 0 3
7885: PUSH
7886: LD_INT 26
7888: EQUAL
7889: IFFALSE 7899
// sEarthquake := true ;
7891: LD_ADDR_EXP 64
7895: PUSH
7896: LD_INT 1
7898: ST_TO_ADDR
// if p3 = 27 then
7899: LD_VAR 0 3
7903: PUSH
7904: LD_INT 27
7906: EQUAL
7907: IFFALSE 7917
// sAI := true ;
7909: LD_ADDR_EXP 65
7913: PUSH
7914: LD_INT 1
7916: ST_TO_ADDR
// if p3 = 28 then
7917: LD_VAR 0 3
7921: PUSH
7922: LD_INT 28
7924: EQUAL
7925: IFFALSE 7935
// sCargo := true ;
7927: LD_ADDR_EXP 68
7931: PUSH
7932: LD_INT 1
7934: ST_TO_ADDR
// if p3 = 29 then
7935: LD_VAR 0 3
7939: PUSH
7940: LD_INT 29
7942: EQUAL
7943: IFFALSE 7953
// sDLaser := true ;
7945: LD_ADDR_EXP 69
7949: PUSH
7950: LD_INT 1
7952: ST_TO_ADDR
// if p3 = 30 then
7953: LD_VAR 0 3
7957: PUSH
7958: LD_INT 30
7960: EQUAL
7961: IFFALSE 7971
// sExchange := true ;
7963: LD_ADDR_EXP 70
7967: PUSH
7968: LD_INT 1
7970: ST_TO_ADDR
// if p3 = 31 then
7971: LD_VAR 0 3
7975: PUSH
7976: LD_INT 31
7978: EQUAL
7979: IFFALSE 7989
// sFac := true ;
7981: LD_ADDR_EXP 71
7985: PUSH
7986: LD_INT 1
7988: ST_TO_ADDR
// if p3 = 32 then
7989: LD_VAR 0 3
7993: PUSH
7994: LD_INT 32
7996: EQUAL
7997: IFFALSE 8007
// sPower := true ;
7999: LD_ADDR_EXP 72
8003: PUSH
8004: LD_INT 1
8006: ST_TO_ADDR
// if p3 = 33 then
8007: LD_VAR 0 3
8011: PUSH
8012: LD_INT 33
8014: EQUAL
8015: IFFALSE 8025
// sRandom := true ;
8017: LD_ADDR_EXP 73
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// if p3 = 34 then
8025: LD_VAR 0 3
8029: PUSH
8030: LD_INT 34
8032: EQUAL
8033: IFFALSE 8043
// sShield := true ;
8035: LD_ADDR_EXP 74
8039: PUSH
8040: LD_INT 1
8042: ST_TO_ADDR
// if p3 = 35 then
8043: LD_VAR 0 3
8047: PUSH
8048: LD_INT 35
8050: EQUAL
8051: IFFALSE 8061
// sTime := true ;
8053: LD_ADDR_EXP 75
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// if p3 = 36 then
8061: LD_VAR 0 3
8065: PUSH
8066: LD_INT 36
8068: EQUAL
8069: IFFALSE 8079
// sTools := true ;
8071: LD_ADDR_EXP 76
8075: PUSH
8076: LD_INT 1
8078: ST_TO_ADDR
// if p3 = 101 then
8079: LD_VAR 0 3
8083: PUSH
8084: LD_INT 101
8086: EQUAL
8087: IFFALSE 8097
// sSold := true ;
8089: LD_ADDR_EXP 41
8093: PUSH
8094: LD_INT 1
8096: ST_TO_ADDR
// if p3 = 102 then
8097: LD_VAR 0 3
8101: PUSH
8102: LD_INT 102
8104: EQUAL
8105: IFFALSE 8115
// sDiff := true ;
8107: LD_ADDR_EXP 42
8111: PUSH
8112: LD_INT 1
8114: ST_TO_ADDR
// if p3 = 103 then
8115: LD_VAR 0 3
8119: PUSH
8120: LD_INT 103
8122: EQUAL
8123: IFFALSE 8133
// sFog := true ;
8125: LD_ADDR_EXP 45
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// if p3 = 104 then
8133: LD_VAR 0 3
8137: PUSH
8138: LD_INT 104
8140: EQUAL
8141: IFFALSE 8151
// sReset := true ;
8143: LD_ADDR_EXP 46
8147: PUSH
8148: LD_INT 1
8150: ST_TO_ADDR
// if p3 = 105 then
8151: LD_VAR 0 3
8155: PUSH
8156: LD_INT 105
8158: EQUAL
8159: IFFALSE 8169
// sSun := true ;
8161: LD_ADDR_EXP 47
8165: PUSH
8166: LD_INT 1
8168: ST_TO_ADDR
// if p3 = 106 then
8169: LD_VAR 0 3
8173: PUSH
8174: LD_INT 106
8176: EQUAL
8177: IFFALSE 8187
// sTiger := true ;
8179: LD_ADDR_EXP 43
8183: PUSH
8184: LD_INT 1
8186: ST_TO_ADDR
// if p3 = 107 then
8187: LD_VAR 0 3
8191: PUSH
8192: LD_INT 107
8194: EQUAL
8195: IFFALSE 8205
// sBomb := true ;
8197: LD_ADDR_EXP 44
8201: PUSH
8202: LD_INT 1
8204: ST_TO_ADDR
// if p3 = 108 then
8205: LD_VAR 0 3
8209: PUSH
8210: LD_INT 108
8212: EQUAL
8213: IFFALSE 8223
// sWound := true ;
8215: LD_ADDR_EXP 52
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// if p3 = 109 then
8223: LD_VAR 0 3
8227: PUSH
8228: LD_INT 109
8230: EQUAL
8231: IFFALSE 8241
// sBetray := true ;
8233: LD_ADDR_EXP 56
8237: PUSH
8238: LD_INT 1
8240: ST_TO_ADDR
// if p3 = 110 then
8241: LD_VAR 0 3
8245: PUSH
8246: LD_INT 110
8248: EQUAL
8249: IFFALSE 8259
// sContamin := true ;
8251: LD_ADDR_EXP 57
8255: PUSH
8256: LD_INT 1
8258: ST_TO_ADDR
// if p3 = 111 then
8259: LD_VAR 0 3
8263: PUSH
8264: LD_INT 111
8266: EQUAL
8267: IFFALSE 8277
// sOil := true ;
8269: LD_ADDR_EXP 59
8273: PUSH
8274: LD_INT 1
8276: ST_TO_ADDR
// if p3 = 112 then
8277: LD_VAR 0 3
8281: PUSH
8282: LD_INT 112
8284: EQUAL
8285: IFFALSE 8295
// sStu := true ;
8287: LD_ADDR_EXP 63
8291: PUSH
8292: LD_INT 1
8294: ST_TO_ADDR
// if p3 = 113 then
8295: LD_VAR 0 3
8299: PUSH
8300: LD_INT 113
8302: EQUAL
8303: IFFALSE 8313
// sBazooka := true ;
8305: LD_ADDR_EXP 66
8309: PUSH
8310: LD_INT 1
8312: ST_TO_ADDR
// if p3 = 114 then
8313: LD_VAR 0 3
8317: PUSH
8318: LD_INT 114
8320: EQUAL
8321: IFFALSE 8331
// sMortar := true ;
8323: LD_ADDR_EXP 67
8327: PUSH
8328: LD_INT 1
8330: ST_TO_ADDR
// if p3 = 115 then
8331: LD_VAR 0 3
8335: PUSH
8336: LD_INT 115
8338: EQUAL
8339: IFFALSE 8349
// sRanger := true ;
8341: LD_ADDR_EXP 77
8345: PUSH
8346: LD_INT 1
8348: ST_TO_ADDR
// end ; if p2 = 101 then
8349: LD_VAR 0 2
8353: PUSH
8354: LD_INT 101
8356: EQUAL
8357: IFFALSE 8485
// begin case p3 of 1 :
8359: LD_VAR 0 3
8363: PUSH
8364: LD_INT 1
8366: DOUBLE
8367: EQUAL
8368: IFTRUE 8372
8370: GO 8379
8372: POP
// hHackUnlimitedResources ; 2 :
8373: CALL 19522 0 0
8377: GO 8485
8379: LD_INT 2
8381: DOUBLE
8382: EQUAL
8383: IFTRUE 8387
8385: GO 8394
8387: POP
// hHackSetLevel10 ; 3 :
8388: CALL 19655 0 0
8392: GO 8485
8394: LD_INT 3
8396: DOUBLE
8397: EQUAL
8398: IFTRUE 8402
8400: GO 8409
8402: POP
// hHackSetLevel10YourUnits ; 4 :
8403: CALL 19740 0 0
8407: GO 8485
8409: LD_INT 4
8411: DOUBLE
8412: EQUAL
8413: IFTRUE 8417
8415: GO 8424
8417: POP
// hHackInvincible ; 5 :
8418: CALL 20188 0 0
8422: GO 8485
8424: LD_INT 5
8426: DOUBLE
8427: EQUAL
8428: IFTRUE 8432
8430: GO 8439
8432: POP
// hHackInvisible ; 6 :
8433: CALL 20299 0 0
8437: GO 8485
8439: LD_INT 6
8441: DOUBLE
8442: EQUAL
8443: IFTRUE 8447
8445: GO 8454
8447: POP
// hHackChangeYourSide ; 7 :
8448: CALL 20356 0 0
8452: GO 8485
8454: LD_INT 7
8456: DOUBLE
8457: EQUAL
8458: IFTRUE 8462
8460: GO 8469
8462: POP
// hHackChangeUnitSide ; 8 :
8463: CALL 20398 0 0
8467: GO 8485
8469: LD_INT 8
8471: DOUBLE
8472: EQUAL
8473: IFTRUE 8477
8475: GO 8484
8477: POP
// hHackFog ; end ;
8478: CALL 20499 0 0
8482: GO 8485
8484: POP
// end ; end ;
8485: LD_VAR 0 7
8489: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8490: GO 8492
8492: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8493: LD_STRING initStreamRollete();
8495: PPUSH
8496: CALL_OW 559
// InitStreamMode ;
8500: CALL 8509 0 0
// DefineStreamItems ( ) ;
8504: CALL 8949 0 0
// end ;
8508: END
// function InitStreamMode ; begin
8509: LD_INT 0
8511: PPUSH
// streamModeActive := false ;
8512: LD_ADDR_EXP 24
8516: PUSH
8517: LD_INT 0
8519: ST_TO_ADDR
// normalCounter := 36 ;
8520: LD_ADDR_EXP 25
8524: PUSH
8525: LD_INT 36
8527: ST_TO_ADDR
// hardcoreCounter := 16 ;
8528: LD_ADDR_EXP 26
8532: PUSH
8533: LD_INT 16
8535: ST_TO_ADDR
// sRocket := false ;
8536: LD_ADDR_EXP 29
8540: PUSH
8541: LD_INT 0
8543: ST_TO_ADDR
// sSpeed := false ;
8544: LD_ADDR_EXP 28
8548: PUSH
8549: LD_INT 0
8551: ST_TO_ADDR
// sEngine := false ;
8552: LD_ADDR_EXP 30
8556: PUSH
8557: LD_INT 0
8559: ST_TO_ADDR
// sSpec := false ;
8560: LD_ADDR_EXP 27
8564: PUSH
8565: LD_INT 0
8567: ST_TO_ADDR
// sLevel := false ;
8568: LD_ADDR_EXP 31
8572: PUSH
8573: LD_INT 0
8575: ST_TO_ADDR
// sArmoury := false ;
8576: LD_ADDR_EXP 32
8580: PUSH
8581: LD_INT 0
8583: ST_TO_ADDR
// sRadar := false ;
8584: LD_ADDR_EXP 33
8588: PUSH
8589: LD_INT 0
8591: ST_TO_ADDR
// sBunker := false ;
8592: LD_ADDR_EXP 34
8596: PUSH
8597: LD_INT 0
8599: ST_TO_ADDR
// sHack := false ;
8600: LD_ADDR_EXP 35
8604: PUSH
8605: LD_INT 0
8607: ST_TO_ADDR
// sFire := false ;
8608: LD_ADDR_EXP 36
8612: PUSH
8613: LD_INT 0
8615: ST_TO_ADDR
// sRefresh := false ;
8616: LD_ADDR_EXP 37
8620: PUSH
8621: LD_INT 0
8623: ST_TO_ADDR
// sExp := false ;
8624: LD_ADDR_EXP 38
8628: PUSH
8629: LD_INT 0
8631: ST_TO_ADDR
// sDepot := false ;
8632: LD_ADDR_EXP 39
8636: PUSH
8637: LD_INT 0
8639: ST_TO_ADDR
// sFlag := false ;
8640: LD_ADDR_EXP 40
8644: PUSH
8645: LD_INT 0
8647: ST_TO_ADDR
// sKamikadze := false ;
8648: LD_ADDR_EXP 48
8652: PUSH
8653: LD_INT 0
8655: ST_TO_ADDR
// sTroll := false ;
8656: LD_ADDR_EXP 49
8660: PUSH
8661: LD_INT 0
8663: ST_TO_ADDR
// sSlow := false ;
8664: LD_ADDR_EXP 50
8668: PUSH
8669: LD_INT 0
8671: ST_TO_ADDR
// sLack := false ;
8672: LD_ADDR_EXP 51
8676: PUSH
8677: LD_INT 0
8679: ST_TO_ADDR
// sTank := false ;
8680: LD_ADDR_EXP 53
8684: PUSH
8685: LD_INT 0
8687: ST_TO_ADDR
// sRemote := false ;
8688: LD_ADDR_EXP 54
8692: PUSH
8693: LD_INT 0
8695: ST_TO_ADDR
// sPowell := false ;
8696: LD_ADDR_EXP 55
8700: PUSH
8701: LD_INT 0
8703: ST_TO_ADDR
// sTeleport := false ;
8704: LD_ADDR_EXP 58
8708: PUSH
8709: LD_INT 0
8711: ST_TO_ADDR
// sOilTower := false ;
8712: LD_ADDR_EXP 60
8716: PUSH
8717: LD_INT 0
8719: ST_TO_ADDR
// sShovel := false ;
8720: LD_ADDR_EXP 61
8724: PUSH
8725: LD_INT 0
8727: ST_TO_ADDR
// sSheik := false ;
8728: LD_ADDR_EXP 62
8732: PUSH
8733: LD_INT 0
8735: ST_TO_ADDR
// sEarthquake := false ;
8736: LD_ADDR_EXP 64
8740: PUSH
8741: LD_INT 0
8743: ST_TO_ADDR
// sAI := false ;
8744: LD_ADDR_EXP 65
8748: PUSH
8749: LD_INT 0
8751: ST_TO_ADDR
// sCargo := false ;
8752: LD_ADDR_EXP 68
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// sDLaser := false ;
8760: LD_ADDR_EXP 69
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// sExchange := false ;
8768: LD_ADDR_EXP 70
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// sFac := false ;
8776: LD_ADDR_EXP 71
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// sPower := false ;
8784: LD_ADDR_EXP 72
8788: PUSH
8789: LD_INT 0
8791: ST_TO_ADDR
// sRandom := false ;
8792: LD_ADDR_EXP 73
8796: PUSH
8797: LD_INT 0
8799: ST_TO_ADDR
// sShield := false ;
8800: LD_ADDR_EXP 74
8804: PUSH
8805: LD_INT 0
8807: ST_TO_ADDR
// sTime := false ;
8808: LD_ADDR_EXP 75
8812: PUSH
8813: LD_INT 0
8815: ST_TO_ADDR
// sTools := false ;
8816: LD_ADDR_EXP 76
8820: PUSH
8821: LD_INT 0
8823: ST_TO_ADDR
// sSold := false ;
8824: LD_ADDR_EXP 41
8828: PUSH
8829: LD_INT 0
8831: ST_TO_ADDR
// sDiff := false ;
8832: LD_ADDR_EXP 42
8836: PUSH
8837: LD_INT 0
8839: ST_TO_ADDR
// sFog := false ;
8840: LD_ADDR_EXP 45
8844: PUSH
8845: LD_INT 0
8847: ST_TO_ADDR
// sReset := false ;
8848: LD_ADDR_EXP 46
8852: PUSH
8853: LD_INT 0
8855: ST_TO_ADDR
// sSun := false ;
8856: LD_ADDR_EXP 47
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// sTiger := false ;
8864: LD_ADDR_EXP 43
8868: PUSH
8869: LD_INT 0
8871: ST_TO_ADDR
// sBomb := false ;
8872: LD_ADDR_EXP 44
8876: PUSH
8877: LD_INT 0
8879: ST_TO_ADDR
// sWound := false ;
8880: LD_ADDR_EXP 52
8884: PUSH
8885: LD_INT 0
8887: ST_TO_ADDR
// sBetray := false ;
8888: LD_ADDR_EXP 56
8892: PUSH
8893: LD_INT 0
8895: ST_TO_ADDR
// sContamin := false ;
8896: LD_ADDR_EXP 57
8900: PUSH
8901: LD_INT 0
8903: ST_TO_ADDR
// sOil := false ;
8904: LD_ADDR_EXP 59
8908: PUSH
8909: LD_INT 0
8911: ST_TO_ADDR
// sStu := false ;
8912: LD_ADDR_EXP 63
8916: PUSH
8917: LD_INT 0
8919: ST_TO_ADDR
// sBazooka := false ;
8920: LD_ADDR_EXP 66
8924: PUSH
8925: LD_INT 0
8927: ST_TO_ADDR
// sMortar := false ;
8928: LD_ADDR_EXP 67
8932: PUSH
8933: LD_INT 0
8935: ST_TO_ADDR
// sRanger := false ;
8936: LD_ADDR_EXP 77
8940: PUSH
8941: LD_INT 0
8943: ST_TO_ADDR
// end ;
8944: LD_VAR 0 1
8948: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8949: LD_INT 0
8951: PPUSH
8952: PPUSH
8953: PPUSH
8954: PPUSH
8955: PPUSH
// result := [ ] ;
8956: LD_ADDR_VAR 0 1
8960: PUSH
8961: EMPTY
8962: ST_TO_ADDR
// if campaign_id = 1 then
8963: LD_OWVAR 69
8967: PUSH
8968: LD_INT 1
8970: EQUAL
8971: IFFALSE 11909
// begin case mission_number of 1 :
8973: LD_OWVAR 70
8977: PUSH
8978: LD_INT 1
8980: DOUBLE
8981: EQUAL
8982: IFTRUE 8986
8984: GO 9050
8986: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8987: LD_ADDR_VAR 0 1
8991: PUSH
8992: LD_INT 2
8994: PUSH
8995: LD_INT 4
8997: PUSH
8998: LD_INT 11
9000: PUSH
9001: LD_INT 12
9003: PUSH
9004: LD_INT 15
9006: PUSH
9007: LD_INT 16
9009: PUSH
9010: LD_INT 22
9012: PUSH
9013: LD_INT 23
9015: PUSH
9016: LD_INT 26
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: PUSH
9030: LD_INT 101
9032: PUSH
9033: LD_INT 102
9035: PUSH
9036: LD_INT 106
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: ST_TO_ADDR
9048: GO 11907
9050: LD_INT 2
9052: DOUBLE
9053: EQUAL
9054: IFTRUE 9058
9056: GO 9130
9058: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9059: LD_ADDR_VAR 0 1
9063: PUSH
9064: LD_INT 2
9066: PUSH
9067: LD_INT 4
9069: PUSH
9070: LD_INT 11
9072: PUSH
9073: LD_INT 12
9075: PUSH
9076: LD_INT 15
9078: PUSH
9079: LD_INT 16
9081: PUSH
9082: LD_INT 22
9084: PUSH
9085: LD_INT 23
9087: PUSH
9088: LD_INT 26
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: PUSH
9102: LD_INT 101
9104: PUSH
9105: LD_INT 102
9107: PUSH
9108: LD_INT 105
9110: PUSH
9111: LD_INT 106
9113: PUSH
9114: LD_INT 108
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: ST_TO_ADDR
9128: GO 11907
9130: LD_INT 3
9132: DOUBLE
9133: EQUAL
9134: IFTRUE 9138
9136: GO 9214
9138: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9139: LD_ADDR_VAR 0 1
9143: PUSH
9144: LD_INT 2
9146: PUSH
9147: LD_INT 4
9149: PUSH
9150: LD_INT 5
9152: PUSH
9153: LD_INT 11
9155: PUSH
9156: LD_INT 12
9158: PUSH
9159: LD_INT 15
9161: PUSH
9162: LD_INT 16
9164: PUSH
9165: LD_INT 22
9167: PUSH
9168: LD_INT 26
9170: PUSH
9171: LD_INT 36
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: PUSH
9186: LD_INT 101
9188: PUSH
9189: LD_INT 102
9191: PUSH
9192: LD_INT 105
9194: PUSH
9195: LD_INT 106
9197: PUSH
9198: LD_INT 108
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: ST_TO_ADDR
9212: GO 11907
9214: LD_INT 4
9216: DOUBLE
9217: EQUAL
9218: IFTRUE 9222
9220: GO 9306
9222: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9223: LD_ADDR_VAR 0 1
9227: PUSH
9228: LD_INT 2
9230: PUSH
9231: LD_INT 4
9233: PUSH
9234: LD_INT 5
9236: PUSH
9237: LD_INT 8
9239: PUSH
9240: LD_INT 11
9242: PUSH
9243: LD_INT 12
9245: PUSH
9246: LD_INT 15
9248: PUSH
9249: LD_INT 16
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_INT 23
9257: PUSH
9258: LD_INT 26
9260: PUSH
9261: LD_INT 36
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: PUSH
9278: LD_INT 101
9280: PUSH
9281: LD_INT 102
9283: PUSH
9284: LD_INT 105
9286: PUSH
9287: LD_INT 106
9289: PUSH
9290: LD_INT 108
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: ST_TO_ADDR
9304: GO 11907
9306: LD_INT 5
9308: DOUBLE
9309: EQUAL
9310: IFTRUE 9314
9312: GO 9414
9314: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9315: LD_ADDR_VAR 0 1
9319: PUSH
9320: LD_INT 2
9322: PUSH
9323: LD_INT 4
9325: PUSH
9326: LD_INT 5
9328: PUSH
9329: LD_INT 6
9331: PUSH
9332: LD_INT 8
9334: PUSH
9335: LD_INT 11
9337: PUSH
9338: LD_INT 12
9340: PUSH
9341: LD_INT 15
9343: PUSH
9344: LD_INT 16
9346: PUSH
9347: LD_INT 22
9349: PUSH
9350: LD_INT 23
9352: PUSH
9353: LD_INT 25
9355: PUSH
9356: LD_INT 26
9358: PUSH
9359: LD_INT 36
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: PUSH
9378: LD_INT 101
9380: PUSH
9381: LD_INT 102
9383: PUSH
9384: LD_INT 105
9386: PUSH
9387: LD_INT 106
9389: PUSH
9390: LD_INT 108
9392: PUSH
9393: LD_INT 109
9395: PUSH
9396: LD_INT 112
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: ST_TO_ADDR
9412: GO 11907
9414: LD_INT 6
9416: DOUBLE
9417: EQUAL
9418: IFTRUE 9422
9420: GO 9542
9422: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9423: LD_ADDR_VAR 0 1
9427: PUSH
9428: LD_INT 2
9430: PUSH
9431: LD_INT 4
9433: PUSH
9434: LD_INT 5
9436: PUSH
9437: LD_INT 6
9439: PUSH
9440: LD_INT 8
9442: PUSH
9443: LD_INT 11
9445: PUSH
9446: LD_INT 12
9448: PUSH
9449: LD_INT 15
9451: PUSH
9452: LD_INT 16
9454: PUSH
9455: LD_INT 20
9457: PUSH
9458: LD_INT 21
9460: PUSH
9461: LD_INT 22
9463: PUSH
9464: LD_INT 23
9466: PUSH
9467: LD_INT 25
9469: PUSH
9470: LD_INT 26
9472: PUSH
9473: LD_INT 30
9475: PUSH
9476: LD_INT 31
9478: PUSH
9479: LD_INT 32
9481: PUSH
9482: LD_INT 36
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 101
9508: PUSH
9509: LD_INT 102
9511: PUSH
9512: LD_INT 105
9514: PUSH
9515: LD_INT 106
9517: PUSH
9518: LD_INT 108
9520: PUSH
9521: LD_INT 109
9523: PUSH
9524: LD_INT 112
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: ST_TO_ADDR
9540: GO 11907
9542: LD_INT 7
9544: DOUBLE
9545: EQUAL
9546: IFTRUE 9550
9548: GO 9650
9550: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9551: LD_ADDR_VAR 0 1
9555: PUSH
9556: LD_INT 2
9558: PUSH
9559: LD_INT 4
9561: PUSH
9562: LD_INT 5
9564: PUSH
9565: LD_INT 7
9567: PUSH
9568: LD_INT 11
9570: PUSH
9571: LD_INT 12
9573: PUSH
9574: LD_INT 15
9576: PUSH
9577: LD_INT 16
9579: PUSH
9580: LD_INT 20
9582: PUSH
9583: LD_INT 21
9585: PUSH
9586: LD_INT 22
9588: PUSH
9589: LD_INT 23
9591: PUSH
9592: LD_INT 25
9594: PUSH
9595: LD_INT 26
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 101
9616: PUSH
9617: LD_INT 102
9619: PUSH
9620: LD_INT 103
9622: PUSH
9623: LD_INT 105
9625: PUSH
9626: LD_INT 106
9628: PUSH
9629: LD_INT 108
9631: PUSH
9632: LD_INT 112
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: ST_TO_ADDR
9648: GO 11907
9650: LD_INT 8
9652: DOUBLE
9653: EQUAL
9654: IFTRUE 9658
9656: GO 9786
9658: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9659: LD_ADDR_VAR 0 1
9663: PUSH
9664: LD_INT 2
9666: PUSH
9667: LD_INT 4
9669: PUSH
9670: LD_INT 5
9672: PUSH
9673: LD_INT 6
9675: PUSH
9676: LD_INT 7
9678: PUSH
9679: LD_INT 8
9681: PUSH
9682: LD_INT 11
9684: PUSH
9685: LD_INT 12
9687: PUSH
9688: LD_INT 15
9690: PUSH
9691: LD_INT 16
9693: PUSH
9694: LD_INT 20
9696: PUSH
9697: LD_INT 21
9699: PUSH
9700: LD_INT 22
9702: PUSH
9703: LD_INT 23
9705: PUSH
9706: LD_INT 25
9708: PUSH
9709: LD_INT 26
9711: PUSH
9712: LD_INT 30
9714: PUSH
9715: LD_INT 31
9717: PUSH
9718: LD_INT 32
9720: PUSH
9721: LD_INT 36
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 101
9748: PUSH
9749: LD_INT 102
9751: PUSH
9752: LD_INT 103
9754: PUSH
9755: LD_INT 105
9757: PUSH
9758: LD_INT 106
9760: PUSH
9761: LD_INT 108
9763: PUSH
9764: LD_INT 109
9766: PUSH
9767: LD_INT 112
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: ST_TO_ADDR
9784: GO 11907
9786: LD_INT 9
9788: DOUBLE
9789: EQUAL
9790: IFTRUE 9794
9792: GO 9930
9794: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9795: LD_ADDR_VAR 0 1
9799: PUSH
9800: LD_INT 2
9802: PUSH
9803: LD_INT 4
9805: PUSH
9806: LD_INT 5
9808: PUSH
9809: LD_INT 6
9811: PUSH
9812: LD_INT 7
9814: PUSH
9815: LD_INT 8
9817: PUSH
9818: LD_INT 11
9820: PUSH
9821: LD_INT 12
9823: PUSH
9824: LD_INT 15
9826: PUSH
9827: LD_INT 16
9829: PUSH
9830: LD_INT 20
9832: PUSH
9833: LD_INT 21
9835: PUSH
9836: LD_INT 22
9838: PUSH
9839: LD_INT 23
9841: PUSH
9842: LD_INT 25
9844: PUSH
9845: LD_INT 26
9847: PUSH
9848: LD_INT 28
9850: PUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 31
9856: PUSH
9857: LD_INT 32
9859: PUSH
9860: LD_INT 36
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 101
9888: PUSH
9889: LD_INT 102
9891: PUSH
9892: LD_INT 103
9894: PUSH
9895: LD_INT 105
9897: PUSH
9898: LD_INT 106
9900: PUSH
9901: LD_INT 108
9903: PUSH
9904: LD_INT 109
9906: PUSH
9907: LD_INT 112
9909: PUSH
9910: LD_INT 114
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: ST_TO_ADDR
9928: GO 11907
9930: LD_INT 10
9932: DOUBLE
9933: EQUAL
9934: IFTRUE 9938
9936: GO 10122
9938: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9939: LD_ADDR_VAR 0 1
9943: PUSH
9944: LD_INT 2
9946: PUSH
9947: LD_INT 4
9949: PUSH
9950: LD_INT 5
9952: PUSH
9953: LD_INT 6
9955: PUSH
9956: LD_INT 7
9958: PUSH
9959: LD_INT 8
9961: PUSH
9962: LD_INT 9
9964: PUSH
9965: LD_INT 10
9967: PUSH
9968: LD_INT 11
9970: PUSH
9971: LD_INT 12
9973: PUSH
9974: LD_INT 13
9976: PUSH
9977: LD_INT 14
9979: PUSH
9980: LD_INT 15
9982: PUSH
9983: LD_INT 16
9985: PUSH
9986: LD_INT 17
9988: PUSH
9989: LD_INT 18
9991: PUSH
9992: LD_INT 19
9994: PUSH
9995: LD_INT 20
9997: PUSH
9998: LD_INT 21
10000: PUSH
10001: LD_INT 22
10003: PUSH
10004: LD_INT 23
10006: PUSH
10007: LD_INT 24
10009: PUSH
10010: LD_INT 25
10012: PUSH
10013: LD_INT 26
10015: PUSH
10016: LD_INT 28
10018: PUSH
10019: LD_INT 30
10021: PUSH
10022: LD_INT 31
10024: PUSH
10025: LD_INT 32
10027: PUSH
10028: LD_INT 36
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: PUSH
10062: LD_INT 101
10064: PUSH
10065: LD_INT 102
10067: PUSH
10068: LD_INT 103
10070: PUSH
10071: LD_INT 104
10073: PUSH
10074: LD_INT 105
10076: PUSH
10077: LD_INT 106
10079: PUSH
10080: LD_INT 107
10082: PUSH
10083: LD_INT 108
10085: PUSH
10086: LD_INT 109
10088: PUSH
10089: LD_INT 110
10091: PUSH
10092: LD_INT 111
10094: PUSH
10095: LD_INT 112
10097: PUSH
10098: LD_INT 114
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: ST_TO_ADDR
10120: GO 11907
10122: LD_INT 11
10124: DOUBLE
10125: EQUAL
10126: IFTRUE 10130
10128: GO 10322
10130: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10131: LD_ADDR_VAR 0 1
10135: PUSH
10136: LD_INT 2
10138: PUSH
10139: LD_INT 3
10141: PUSH
10142: LD_INT 4
10144: PUSH
10145: LD_INT 5
10147: PUSH
10148: LD_INT 6
10150: PUSH
10151: LD_INT 7
10153: PUSH
10154: LD_INT 8
10156: PUSH
10157: LD_INT 9
10159: PUSH
10160: LD_INT 10
10162: PUSH
10163: LD_INT 11
10165: PUSH
10166: LD_INT 12
10168: PUSH
10169: LD_INT 13
10171: PUSH
10172: LD_INT 14
10174: PUSH
10175: LD_INT 15
10177: PUSH
10178: LD_INT 16
10180: PUSH
10181: LD_INT 17
10183: PUSH
10184: LD_INT 18
10186: PUSH
10187: LD_INT 19
10189: PUSH
10190: LD_INT 20
10192: PUSH
10193: LD_INT 21
10195: PUSH
10196: LD_INT 22
10198: PUSH
10199: LD_INT 23
10201: PUSH
10202: LD_INT 24
10204: PUSH
10205: LD_INT 25
10207: PUSH
10208: LD_INT 26
10210: PUSH
10211: LD_INT 28
10213: PUSH
10214: LD_INT 30
10216: PUSH
10217: LD_INT 31
10219: PUSH
10220: LD_INT 32
10222: PUSH
10223: LD_INT 34
10225: PUSH
10226: LD_INT 36
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 101
10264: PUSH
10265: LD_INT 102
10267: PUSH
10268: LD_INT 103
10270: PUSH
10271: LD_INT 104
10273: PUSH
10274: LD_INT 105
10276: PUSH
10277: LD_INT 106
10279: PUSH
10280: LD_INT 107
10282: PUSH
10283: LD_INT 108
10285: PUSH
10286: LD_INT 109
10288: PUSH
10289: LD_INT 110
10291: PUSH
10292: LD_INT 111
10294: PUSH
10295: LD_INT 112
10297: PUSH
10298: LD_INT 114
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: ST_TO_ADDR
10320: GO 11907
10322: LD_INT 12
10324: DOUBLE
10325: EQUAL
10326: IFTRUE 10330
10328: GO 10538
10330: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10331: LD_ADDR_VAR 0 1
10335: PUSH
10336: LD_INT 1
10338: PUSH
10339: LD_INT 2
10341: PUSH
10342: LD_INT 3
10344: PUSH
10345: LD_INT 4
10347: PUSH
10348: LD_INT 5
10350: PUSH
10351: LD_INT 6
10353: PUSH
10354: LD_INT 7
10356: PUSH
10357: LD_INT 8
10359: PUSH
10360: LD_INT 9
10362: PUSH
10363: LD_INT 10
10365: PUSH
10366: LD_INT 11
10368: PUSH
10369: LD_INT 12
10371: PUSH
10372: LD_INT 13
10374: PUSH
10375: LD_INT 14
10377: PUSH
10378: LD_INT 15
10380: PUSH
10381: LD_INT 16
10383: PUSH
10384: LD_INT 17
10386: PUSH
10387: LD_INT 18
10389: PUSH
10390: LD_INT 19
10392: PUSH
10393: LD_INT 20
10395: PUSH
10396: LD_INT 21
10398: PUSH
10399: LD_INT 22
10401: PUSH
10402: LD_INT 23
10404: PUSH
10405: LD_INT 24
10407: PUSH
10408: LD_INT 25
10410: PUSH
10411: LD_INT 26
10413: PUSH
10414: LD_INT 27
10416: PUSH
10417: LD_INT 28
10419: PUSH
10420: LD_INT 30
10422: PUSH
10423: LD_INT 31
10425: PUSH
10426: LD_INT 32
10428: PUSH
10429: LD_INT 33
10431: PUSH
10432: LD_INT 34
10434: PUSH
10435: LD_INT 36
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 101
10476: PUSH
10477: LD_INT 102
10479: PUSH
10480: LD_INT 103
10482: PUSH
10483: LD_INT 104
10485: PUSH
10486: LD_INT 105
10488: PUSH
10489: LD_INT 106
10491: PUSH
10492: LD_INT 107
10494: PUSH
10495: LD_INT 108
10497: PUSH
10498: LD_INT 109
10500: PUSH
10501: LD_INT 110
10503: PUSH
10504: LD_INT 111
10506: PUSH
10507: LD_INT 112
10509: PUSH
10510: LD_INT 113
10512: PUSH
10513: LD_INT 114
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: ST_TO_ADDR
10536: GO 11907
10538: LD_INT 13
10540: DOUBLE
10541: EQUAL
10542: IFTRUE 10546
10544: GO 10742
10546: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10547: LD_ADDR_VAR 0 1
10551: PUSH
10552: LD_INT 1
10554: PUSH
10555: LD_INT 2
10557: PUSH
10558: LD_INT 3
10560: PUSH
10561: LD_INT 4
10563: PUSH
10564: LD_INT 5
10566: PUSH
10567: LD_INT 8
10569: PUSH
10570: LD_INT 9
10572: PUSH
10573: LD_INT 10
10575: PUSH
10576: LD_INT 11
10578: PUSH
10579: LD_INT 12
10581: PUSH
10582: LD_INT 14
10584: PUSH
10585: LD_INT 15
10587: PUSH
10588: LD_INT 16
10590: PUSH
10591: LD_INT 17
10593: PUSH
10594: LD_INT 18
10596: PUSH
10597: LD_INT 19
10599: PUSH
10600: LD_INT 20
10602: PUSH
10603: LD_INT 21
10605: PUSH
10606: LD_INT 22
10608: PUSH
10609: LD_INT 23
10611: PUSH
10612: LD_INT 24
10614: PUSH
10615: LD_INT 25
10617: PUSH
10618: LD_INT 26
10620: PUSH
10621: LD_INT 27
10623: PUSH
10624: LD_INT 28
10626: PUSH
10627: LD_INT 30
10629: PUSH
10630: LD_INT 31
10632: PUSH
10633: LD_INT 32
10635: PUSH
10636: LD_INT 33
10638: PUSH
10639: LD_INT 34
10641: PUSH
10642: LD_INT 36
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 101
10680: PUSH
10681: LD_INT 102
10683: PUSH
10684: LD_INT 103
10686: PUSH
10687: LD_INT 104
10689: PUSH
10690: LD_INT 105
10692: PUSH
10693: LD_INT 106
10695: PUSH
10696: LD_INT 107
10698: PUSH
10699: LD_INT 108
10701: PUSH
10702: LD_INT 109
10704: PUSH
10705: LD_INT 110
10707: PUSH
10708: LD_INT 111
10710: PUSH
10711: LD_INT 112
10713: PUSH
10714: LD_INT 113
10716: PUSH
10717: LD_INT 114
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: ST_TO_ADDR
10740: GO 11907
10742: LD_INT 14
10744: DOUBLE
10745: EQUAL
10746: IFTRUE 10750
10748: GO 10962
10750: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10751: LD_ADDR_VAR 0 1
10755: PUSH
10756: LD_INT 1
10758: PUSH
10759: LD_INT 2
10761: PUSH
10762: LD_INT 3
10764: PUSH
10765: LD_INT 4
10767: PUSH
10768: LD_INT 5
10770: PUSH
10771: LD_INT 6
10773: PUSH
10774: LD_INT 7
10776: PUSH
10777: LD_INT 8
10779: PUSH
10780: LD_INT 9
10782: PUSH
10783: LD_INT 10
10785: PUSH
10786: LD_INT 11
10788: PUSH
10789: LD_INT 12
10791: PUSH
10792: LD_INT 13
10794: PUSH
10795: LD_INT 14
10797: PUSH
10798: LD_INT 15
10800: PUSH
10801: LD_INT 16
10803: PUSH
10804: LD_INT 17
10806: PUSH
10807: LD_INT 18
10809: PUSH
10810: LD_INT 19
10812: PUSH
10813: LD_INT 20
10815: PUSH
10816: LD_INT 21
10818: PUSH
10819: LD_INT 22
10821: PUSH
10822: LD_INT 23
10824: PUSH
10825: LD_INT 24
10827: PUSH
10828: LD_INT 25
10830: PUSH
10831: LD_INT 26
10833: PUSH
10834: LD_INT 27
10836: PUSH
10837: LD_INT 28
10839: PUSH
10840: LD_INT 29
10842: PUSH
10843: LD_INT 30
10845: PUSH
10846: LD_INT 31
10848: PUSH
10849: LD_INT 32
10851: PUSH
10852: LD_INT 33
10854: PUSH
10855: LD_INT 34
10857: PUSH
10858: LD_INT 36
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 101
10900: PUSH
10901: LD_INT 102
10903: PUSH
10904: LD_INT 103
10906: PUSH
10907: LD_INT 104
10909: PUSH
10910: LD_INT 105
10912: PUSH
10913: LD_INT 106
10915: PUSH
10916: LD_INT 107
10918: PUSH
10919: LD_INT 108
10921: PUSH
10922: LD_INT 109
10924: PUSH
10925: LD_INT 110
10927: PUSH
10928: LD_INT 111
10930: PUSH
10931: LD_INT 112
10933: PUSH
10934: LD_INT 113
10936: PUSH
10937: LD_INT 114
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: ST_TO_ADDR
10960: GO 11907
10962: LD_INT 15
10964: DOUBLE
10965: EQUAL
10966: IFTRUE 10970
10968: GO 11182
10970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10971: LD_ADDR_VAR 0 1
10975: PUSH
10976: LD_INT 1
10978: PUSH
10979: LD_INT 2
10981: PUSH
10982: LD_INT 3
10984: PUSH
10985: LD_INT 4
10987: PUSH
10988: LD_INT 5
10990: PUSH
10991: LD_INT 6
10993: PUSH
10994: LD_INT 7
10996: PUSH
10997: LD_INT 8
10999: PUSH
11000: LD_INT 9
11002: PUSH
11003: LD_INT 10
11005: PUSH
11006: LD_INT 11
11008: PUSH
11009: LD_INT 12
11011: PUSH
11012: LD_INT 13
11014: PUSH
11015: LD_INT 14
11017: PUSH
11018: LD_INT 15
11020: PUSH
11021: LD_INT 16
11023: PUSH
11024: LD_INT 17
11026: PUSH
11027: LD_INT 18
11029: PUSH
11030: LD_INT 19
11032: PUSH
11033: LD_INT 20
11035: PUSH
11036: LD_INT 21
11038: PUSH
11039: LD_INT 22
11041: PUSH
11042: LD_INT 23
11044: PUSH
11045: LD_INT 24
11047: PUSH
11048: LD_INT 25
11050: PUSH
11051: LD_INT 26
11053: PUSH
11054: LD_INT 27
11056: PUSH
11057: LD_INT 28
11059: PUSH
11060: LD_INT 29
11062: PUSH
11063: LD_INT 30
11065: PUSH
11066: LD_INT 31
11068: PUSH
11069: LD_INT 32
11071: PUSH
11072: LD_INT 33
11074: PUSH
11075: LD_INT 34
11077: PUSH
11078: LD_INT 36
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: PUSH
11118: LD_INT 101
11120: PUSH
11121: LD_INT 102
11123: PUSH
11124: LD_INT 103
11126: PUSH
11127: LD_INT 104
11129: PUSH
11130: LD_INT 105
11132: PUSH
11133: LD_INT 106
11135: PUSH
11136: LD_INT 107
11138: PUSH
11139: LD_INT 108
11141: PUSH
11142: LD_INT 109
11144: PUSH
11145: LD_INT 110
11147: PUSH
11148: LD_INT 111
11150: PUSH
11151: LD_INT 112
11153: PUSH
11154: LD_INT 113
11156: PUSH
11157: LD_INT 114
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: ST_TO_ADDR
11180: GO 11907
11182: LD_INT 16
11184: DOUBLE
11185: EQUAL
11186: IFTRUE 11190
11188: GO 11314
11190: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11191: LD_ADDR_VAR 0 1
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: LD_INT 4
11201: PUSH
11202: LD_INT 5
11204: PUSH
11205: LD_INT 7
11207: PUSH
11208: LD_INT 11
11210: PUSH
11211: LD_INT 12
11213: PUSH
11214: LD_INT 15
11216: PUSH
11217: LD_INT 16
11219: PUSH
11220: LD_INT 20
11222: PUSH
11223: LD_INT 21
11225: PUSH
11226: LD_INT 22
11228: PUSH
11229: LD_INT 23
11231: PUSH
11232: LD_INT 25
11234: PUSH
11235: LD_INT 26
11237: PUSH
11238: LD_INT 30
11240: PUSH
11241: LD_INT 31
11243: PUSH
11244: LD_INT 32
11246: PUSH
11247: LD_INT 33
11249: PUSH
11250: LD_INT 34
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: PUSH
11274: LD_INT 101
11276: PUSH
11277: LD_INT 102
11279: PUSH
11280: LD_INT 103
11282: PUSH
11283: LD_INT 106
11285: PUSH
11286: LD_INT 108
11288: PUSH
11289: LD_INT 112
11291: PUSH
11292: LD_INT 113
11294: PUSH
11295: LD_INT 114
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: ST_TO_ADDR
11312: GO 11907
11314: LD_INT 17
11316: DOUBLE
11317: EQUAL
11318: IFTRUE 11322
11320: GO 11534
11322: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11323: LD_ADDR_VAR 0 1
11327: PUSH
11328: LD_INT 1
11330: PUSH
11331: LD_INT 2
11333: PUSH
11334: LD_INT 3
11336: PUSH
11337: LD_INT 4
11339: PUSH
11340: LD_INT 5
11342: PUSH
11343: LD_INT 6
11345: PUSH
11346: LD_INT 7
11348: PUSH
11349: LD_INT 8
11351: PUSH
11352: LD_INT 9
11354: PUSH
11355: LD_INT 10
11357: PUSH
11358: LD_INT 11
11360: PUSH
11361: LD_INT 12
11363: PUSH
11364: LD_INT 13
11366: PUSH
11367: LD_INT 14
11369: PUSH
11370: LD_INT 15
11372: PUSH
11373: LD_INT 16
11375: PUSH
11376: LD_INT 17
11378: PUSH
11379: LD_INT 18
11381: PUSH
11382: LD_INT 19
11384: PUSH
11385: LD_INT 20
11387: PUSH
11388: LD_INT 21
11390: PUSH
11391: LD_INT 22
11393: PUSH
11394: LD_INT 23
11396: PUSH
11397: LD_INT 24
11399: PUSH
11400: LD_INT 25
11402: PUSH
11403: LD_INT 26
11405: PUSH
11406: LD_INT 27
11408: PUSH
11409: LD_INT 28
11411: PUSH
11412: LD_INT 29
11414: PUSH
11415: LD_INT 30
11417: PUSH
11418: LD_INT 31
11420: PUSH
11421: LD_INT 32
11423: PUSH
11424: LD_INT 33
11426: PUSH
11427: LD_INT 34
11429: PUSH
11430: LD_INT 36
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: PUSH
11470: LD_INT 101
11472: PUSH
11473: LD_INT 102
11475: PUSH
11476: LD_INT 103
11478: PUSH
11479: LD_INT 104
11481: PUSH
11482: LD_INT 105
11484: PUSH
11485: LD_INT 106
11487: PUSH
11488: LD_INT 107
11490: PUSH
11491: LD_INT 108
11493: PUSH
11494: LD_INT 109
11496: PUSH
11497: LD_INT 110
11499: PUSH
11500: LD_INT 111
11502: PUSH
11503: LD_INT 112
11505: PUSH
11506: LD_INT 113
11508: PUSH
11509: LD_INT 114
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: ST_TO_ADDR
11532: GO 11907
11534: LD_INT 18
11536: DOUBLE
11537: EQUAL
11538: IFTRUE 11542
11540: GO 11678
11542: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11543: LD_ADDR_VAR 0 1
11547: PUSH
11548: LD_INT 2
11550: PUSH
11551: LD_INT 4
11553: PUSH
11554: LD_INT 5
11556: PUSH
11557: LD_INT 7
11559: PUSH
11560: LD_INT 11
11562: PUSH
11563: LD_INT 12
11565: PUSH
11566: LD_INT 15
11568: PUSH
11569: LD_INT 16
11571: PUSH
11572: LD_INT 20
11574: PUSH
11575: LD_INT 21
11577: PUSH
11578: LD_INT 22
11580: PUSH
11581: LD_INT 23
11583: PUSH
11584: LD_INT 25
11586: PUSH
11587: LD_INT 26
11589: PUSH
11590: LD_INT 30
11592: PUSH
11593: LD_INT 31
11595: PUSH
11596: LD_INT 32
11598: PUSH
11599: LD_INT 33
11601: PUSH
11602: LD_INT 34
11604: PUSH
11605: LD_INT 35
11607: PUSH
11608: LD_INT 36
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: PUSH
11634: LD_INT 101
11636: PUSH
11637: LD_INT 102
11639: PUSH
11640: LD_INT 103
11642: PUSH
11643: LD_INT 106
11645: PUSH
11646: LD_INT 108
11648: PUSH
11649: LD_INT 112
11651: PUSH
11652: LD_INT 113
11654: PUSH
11655: LD_INT 114
11657: PUSH
11658: LD_INT 115
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: ST_TO_ADDR
11676: GO 11907
11678: LD_INT 19
11680: DOUBLE
11681: EQUAL
11682: IFTRUE 11686
11684: GO 11906
11686: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11687: LD_ADDR_VAR 0 1
11691: PUSH
11692: LD_INT 1
11694: PUSH
11695: LD_INT 2
11697: PUSH
11698: LD_INT 3
11700: PUSH
11701: LD_INT 4
11703: PUSH
11704: LD_INT 5
11706: PUSH
11707: LD_INT 6
11709: PUSH
11710: LD_INT 7
11712: PUSH
11713: LD_INT 8
11715: PUSH
11716: LD_INT 9
11718: PUSH
11719: LD_INT 10
11721: PUSH
11722: LD_INT 11
11724: PUSH
11725: LD_INT 12
11727: PUSH
11728: LD_INT 13
11730: PUSH
11731: LD_INT 14
11733: PUSH
11734: LD_INT 15
11736: PUSH
11737: LD_INT 16
11739: PUSH
11740: LD_INT 17
11742: PUSH
11743: LD_INT 18
11745: PUSH
11746: LD_INT 19
11748: PUSH
11749: LD_INT 20
11751: PUSH
11752: LD_INT 21
11754: PUSH
11755: LD_INT 22
11757: PUSH
11758: LD_INT 23
11760: PUSH
11761: LD_INT 24
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 26
11769: PUSH
11770: LD_INT 27
11772: PUSH
11773: LD_INT 28
11775: PUSH
11776: LD_INT 29
11778: PUSH
11779: LD_INT 30
11781: PUSH
11782: LD_INT 31
11784: PUSH
11785: LD_INT 32
11787: PUSH
11788: LD_INT 33
11790: PUSH
11791: LD_INT 34
11793: PUSH
11794: LD_INT 35
11796: PUSH
11797: LD_INT 36
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 101
11840: PUSH
11841: LD_INT 102
11843: PUSH
11844: LD_INT 103
11846: PUSH
11847: LD_INT 104
11849: PUSH
11850: LD_INT 105
11852: PUSH
11853: LD_INT 106
11855: PUSH
11856: LD_INT 107
11858: PUSH
11859: LD_INT 108
11861: PUSH
11862: LD_INT 109
11864: PUSH
11865: LD_INT 110
11867: PUSH
11868: LD_INT 111
11870: PUSH
11871: LD_INT 112
11873: PUSH
11874: LD_INT 113
11876: PUSH
11877: LD_INT 114
11879: PUSH
11880: LD_INT 115
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: ST_TO_ADDR
11904: GO 11907
11906: POP
// end else
11907: GO 12126
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11909: LD_ADDR_VAR 0 1
11913: PUSH
11914: LD_INT 1
11916: PUSH
11917: LD_INT 2
11919: PUSH
11920: LD_INT 3
11922: PUSH
11923: LD_INT 4
11925: PUSH
11926: LD_INT 5
11928: PUSH
11929: LD_INT 6
11931: PUSH
11932: LD_INT 7
11934: PUSH
11935: LD_INT 8
11937: PUSH
11938: LD_INT 9
11940: PUSH
11941: LD_INT 10
11943: PUSH
11944: LD_INT 11
11946: PUSH
11947: LD_INT 12
11949: PUSH
11950: LD_INT 13
11952: PUSH
11953: LD_INT 14
11955: PUSH
11956: LD_INT 15
11958: PUSH
11959: LD_INT 16
11961: PUSH
11962: LD_INT 17
11964: PUSH
11965: LD_INT 18
11967: PUSH
11968: LD_INT 19
11970: PUSH
11971: LD_INT 20
11973: PUSH
11974: LD_INT 21
11976: PUSH
11977: LD_INT 22
11979: PUSH
11980: LD_INT 23
11982: PUSH
11983: LD_INT 24
11985: PUSH
11986: LD_INT 25
11988: PUSH
11989: LD_INT 26
11991: PUSH
11992: LD_INT 27
11994: PUSH
11995: LD_INT 28
11997: PUSH
11998: LD_INT 29
12000: PUSH
12001: LD_INT 30
12003: PUSH
12004: LD_INT 31
12006: PUSH
12007: LD_INT 32
12009: PUSH
12010: LD_INT 33
12012: PUSH
12013: LD_INT 34
12015: PUSH
12016: LD_INT 35
12018: PUSH
12019: LD_INT 36
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 101
12062: PUSH
12063: LD_INT 102
12065: PUSH
12066: LD_INT 103
12068: PUSH
12069: LD_INT 104
12071: PUSH
12072: LD_INT 105
12074: PUSH
12075: LD_INT 106
12077: PUSH
12078: LD_INT 107
12080: PUSH
12081: LD_INT 108
12083: PUSH
12084: LD_INT 109
12086: PUSH
12087: LD_INT 110
12089: PUSH
12090: LD_INT 111
12092: PUSH
12093: LD_INT 112
12095: PUSH
12096: LD_INT 113
12098: PUSH
12099: LD_INT 114
12101: PUSH
12102: LD_INT 115
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: ST_TO_ADDR
// if result then
12126: LD_VAR 0 1
12130: IFFALSE 12419
// begin normal :=  ;
12132: LD_ADDR_VAR 0 3
12136: PUSH
12137: LD_STRING 
12139: ST_TO_ADDR
// hardcore :=  ;
12140: LD_ADDR_VAR 0 4
12144: PUSH
12145: LD_STRING 
12147: ST_TO_ADDR
// for i = 1 to normalCounter do
12148: LD_ADDR_VAR 0 5
12152: PUSH
12153: DOUBLE
12154: LD_INT 1
12156: DEC
12157: ST_TO_ADDR
12158: LD_EXP 25
12162: PUSH
12163: FOR_TO
12164: IFFALSE 12265
// begin tmp := 0 ;
12166: LD_ADDR_VAR 0 2
12170: PUSH
12171: LD_STRING 0
12173: ST_TO_ADDR
// if result [ 1 ] then
12174: LD_VAR 0 1
12178: PUSH
12179: LD_INT 1
12181: ARRAY
12182: IFFALSE 12247
// if result [ 1 ] [ 1 ] = i then
12184: LD_VAR 0 1
12188: PUSH
12189: LD_INT 1
12191: ARRAY
12192: PUSH
12193: LD_INT 1
12195: ARRAY
12196: PUSH
12197: LD_VAR 0 5
12201: EQUAL
12202: IFFALSE 12247
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12204: LD_ADDR_VAR 0 1
12208: PUSH
12209: LD_VAR 0 1
12213: PPUSH
12214: LD_INT 1
12216: PPUSH
12217: LD_VAR 0 1
12221: PUSH
12222: LD_INT 1
12224: ARRAY
12225: PPUSH
12226: LD_INT 1
12228: PPUSH
12229: CALL_OW 3
12233: PPUSH
12234: CALL_OW 1
12238: ST_TO_ADDR
// tmp := 1 ;
12239: LD_ADDR_VAR 0 2
12243: PUSH
12244: LD_STRING 1
12246: ST_TO_ADDR
// end ; normal := normal & tmp ;
12247: LD_ADDR_VAR 0 3
12251: PUSH
12252: LD_VAR 0 3
12256: PUSH
12257: LD_VAR 0 2
12261: STR
12262: ST_TO_ADDR
// end ;
12263: GO 12163
12265: POP
12266: POP
// for i = 1 to hardcoreCounter do
12267: LD_ADDR_VAR 0 5
12271: PUSH
12272: DOUBLE
12273: LD_INT 1
12275: DEC
12276: ST_TO_ADDR
12277: LD_EXP 26
12281: PUSH
12282: FOR_TO
12283: IFFALSE 12388
// begin tmp := 0 ;
12285: LD_ADDR_VAR 0 2
12289: PUSH
12290: LD_STRING 0
12292: ST_TO_ADDR
// if result [ 2 ] then
12293: LD_VAR 0 1
12297: PUSH
12298: LD_INT 2
12300: ARRAY
12301: IFFALSE 12370
// if result [ 2 ] [ 1 ] = 100 + i then
12303: LD_VAR 0 1
12307: PUSH
12308: LD_INT 2
12310: ARRAY
12311: PUSH
12312: LD_INT 1
12314: ARRAY
12315: PUSH
12316: LD_INT 100
12318: PUSH
12319: LD_VAR 0 5
12323: PLUS
12324: EQUAL
12325: IFFALSE 12370
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12327: LD_ADDR_VAR 0 1
12331: PUSH
12332: LD_VAR 0 1
12336: PPUSH
12337: LD_INT 2
12339: PPUSH
12340: LD_VAR 0 1
12344: PUSH
12345: LD_INT 2
12347: ARRAY
12348: PPUSH
12349: LD_INT 1
12351: PPUSH
12352: CALL_OW 3
12356: PPUSH
12357: CALL_OW 1
12361: ST_TO_ADDR
// tmp := 1 ;
12362: LD_ADDR_VAR 0 2
12366: PUSH
12367: LD_STRING 1
12369: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12370: LD_ADDR_VAR 0 4
12374: PUSH
12375: LD_VAR 0 4
12379: PUSH
12380: LD_VAR 0 2
12384: STR
12385: ST_TO_ADDR
// end ;
12386: GO 12282
12388: POP
12389: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12390: LD_STRING getStreamItemsFromMission("
12392: PUSH
12393: LD_VAR 0 3
12397: STR
12398: PUSH
12399: LD_STRING ","
12401: STR
12402: PUSH
12403: LD_VAR 0 4
12407: STR
12408: PUSH
12409: LD_STRING ")
12411: STR
12412: PPUSH
12413: CALL_OW 559
// end else
12417: GO 12426
// ToLua ( getStreamItemsFromMission("","") ) ;
12419: LD_STRING getStreamItemsFromMission("","")
12421: PPUSH
12422: CALL_OW 559
// end ;
12426: LD_VAR 0 1
12430: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12431: LD_EXP 24
12435: PUSH
12436: LD_EXP 29
12440: AND
12441: IFFALSE 12565
12443: GO 12445
12445: DISABLE
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// begin enable ;
12450: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12451: LD_ADDR_VAR 0 2
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_OWVAR 2
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: LD_INT 2
12470: PUSH
12471: LD_INT 34
12473: PUSH
12474: LD_INT 7
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 34
12483: PUSH
12484: LD_INT 45
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 34
12493: PUSH
12494: LD_INT 28
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 34
12503: PUSH
12504: LD_INT 47
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PPUSH
12522: CALL_OW 69
12526: ST_TO_ADDR
// if not tmp then
12527: LD_VAR 0 2
12531: NOT
12532: IFFALSE 12536
// exit ;
12534: GO 12565
// for i in tmp do
12536: LD_ADDR_VAR 0 1
12540: PUSH
12541: LD_VAR 0 2
12545: PUSH
12546: FOR_IN
12547: IFFALSE 12563
// begin SetLives ( i , 0 ) ;
12549: LD_VAR 0 1
12553: PPUSH
12554: LD_INT 0
12556: PPUSH
12557: CALL_OW 234
// end ;
12561: GO 12546
12563: POP
12564: POP
// end ;
12565: PPOPN 2
12567: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12568: LD_EXP 24
12572: PUSH
12573: LD_EXP 30
12577: AND
12578: IFFALSE 12662
12580: GO 12582
12582: DISABLE
12583: LD_INT 0
12585: PPUSH
12586: PPUSH
// begin enable ;
12587: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12588: LD_ADDR_VAR 0 2
12592: PUSH
12593: LD_INT 22
12595: PUSH
12596: LD_OWVAR 2
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 32
12607: PUSH
12608: LD_INT 3
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PPUSH
12619: CALL_OW 69
12623: ST_TO_ADDR
// if not tmp then
12624: LD_VAR 0 2
12628: NOT
12629: IFFALSE 12633
// exit ;
12631: GO 12662
// for i in tmp do
12633: LD_ADDR_VAR 0 1
12637: PUSH
12638: LD_VAR 0 2
12642: PUSH
12643: FOR_IN
12644: IFFALSE 12660
// begin SetLives ( i , 0 ) ;
12646: LD_VAR 0 1
12650: PPUSH
12651: LD_INT 0
12653: PPUSH
12654: CALL_OW 234
// end ;
12658: GO 12643
12660: POP
12661: POP
// end ;
12662: PPOPN 2
12664: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12665: LD_EXP 24
12669: PUSH
12670: LD_EXP 27
12674: AND
12675: IFFALSE 12768
12677: GO 12679
12679: DISABLE
12680: LD_INT 0
12682: PPUSH
// begin enable ;
12683: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12684: LD_ADDR_VAR 0 1
12688: PUSH
12689: LD_INT 22
12691: PUSH
12692: LD_OWVAR 2
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: LD_INT 2
12703: PUSH
12704: LD_INT 25
12706: PUSH
12707: LD_INT 5
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 25
12716: PUSH
12717: LD_INT 9
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 25
12726: PUSH
12727: LD_INT 8
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PPUSH
12744: CALL_OW 69
12748: PUSH
12749: FOR_IN
12750: IFFALSE 12766
// begin SetClass ( i , 1 ) ;
12752: LD_VAR 0 1
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: CALL_OW 336
// end ;
12764: GO 12749
12766: POP
12767: POP
// end ;
12768: PPOPN 1
12770: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12771: LD_EXP 24
12775: PUSH
12776: LD_EXP 28
12780: AND
12781: PUSH
12782: LD_OWVAR 65
12786: PUSH
12787: LD_INT 7
12789: LESS
12790: AND
12791: IFFALSE 12805
12793: GO 12795
12795: DISABLE
// begin enable ;
12796: ENABLE
// game_speed := 7 ;
12797: LD_ADDR_OWVAR 65
12801: PUSH
12802: LD_INT 7
12804: ST_TO_ADDR
// end ;
12805: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12806: LD_EXP 24
12810: PUSH
12811: LD_EXP 31
12815: AND
12816: IFFALSE 13018
12818: GO 12820
12820: DISABLE
12821: LD_INT 0
12823: PPUSH
12824: PPUSH
12825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12826: LD_ADDR_VAR 0 3
12830: PUSH
12831: LD_INT 81
12833: PUSH
12834: LD_OWVAR 2
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: LD_INT 21
12845: PUSH
12846: LD_INT 1
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PPUSH
12857: CALL_OW 69
12861: ST_TO_ADDR
// if not tmp then
12862: LD_VAR 0 3
12866: NOT
12867: IFFALSE 12871
// exit ;
12869: GO 13018
// if tmp > 5 then
12871: LD_VAR 0 3
12875: PUSH
12876: LD_INT 5
12878: GREATER
12879: IFFALSE 12891
// k := 5 else
12881: LD_ADDR_VAR 0 2
12885: PUSH
12886: LD_INT 5
12888: ST_TO_ADDR
12889: GO 12901
// k := tmp ;
12891: LD_ADDR_VAR 0 2
12895: PUSH
12896: LD_VAR 0 3
12900: ST_TO_ADDR
// for i := 1 to k do
12901: LD_ADDR_VAR 0 1
12905: PUSH
12906: DOUBLE
12907: LD_INT 1
12909: DEC
12910: ST_TO_ADDR
12911: LD_VAR 0 2
12915: PUSH
12916: FOR_TO
12917: IFFALSE 13016
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12919: LD_VAR 0 3
12923: PUSH
12924: LD_VAR 0 1
12928: ARRAY
12929: PPUSH
12930: LD_VAR 0 1
12934: PUSH
12935: LD_INT 4
12937: MOD
12938: PUSH
12939: LD_INT 1
12941: PLUS
12942: PPUSH
12943: CALL_OW 259
12947: PUSH
12948: LD_INT 10
12950: LESS
12951: IFFALSE 13014
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12953: LD_VAR 0 3
12957: PUSH
12958: LD_VAR 0 1
12962: ARRAY
12963: PPUSH
12964: LD_VAR 0 1
12968: PUSH
12969: LD_INT 4
12971: MOD
12972: PUSH
12973: LD_INT 1
12975: PLUS
12976: PPUSH
12977: LD_VAR 0 3
12981: PUSH
12982: LD_VAR 0 1
12986: ARRAY
12987: PPUSH
12988: LD_VAR 0 1
12992: PUSH
12993: LD_INT 4
12995: MOD
12996: PUSH
12997: LD_INT 1
12999: PLUS
13000: PPUSH
13001: CALL_OW 259
13005: PUSH
13006: LD_INT 1
13008: PLUS
13009: PPUSH
13010: CALL_OW 237
13014: GO 12916
13016: POP
13017: POP
// end ;
13018: PPOPN 3
13020: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13021: LD_EXP 24
13025: PUSH
13026: LD_EXP 32
13030: AND
13031: IFFALSE 13051
13033: GO 13035
13035: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13036: LD_INT 4
13038: PPUSH
13039: LD_OWVAR 2
13043: PPUSH
13044: LD_INT 0
13046: PPUSH
13047: CALL_OW 324
13051: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13052: LD_EXP 24
13056: PUSH
13057: LD_EXP 61
13061: AND
13062: IFFALSE 13082
13064: GO 13066
13066: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13067: LD_INT 19
13069: PPUSH
13070: LD_OWVAR 2
13074: PPUSH
13075: LD_INT 0
13077: PPUSH
13078: CALL_OW 324
13082: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13083: LD_EXP 24
13087: PUSH
13088: LD_EXP 33
13092: AND
13093: IFFALSE 13195
13095: GO 13097
13097: DISABLE
13098: LD_INT 0
13100: PPUSH
13101: PPUSH
// begin enable ;
13102: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13103: LD_ADDR_VAR 0 2
13107: PUSH
13108: LD_INT 22
13110: PUSH
13111: LD_OWVAR 2
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 2
13122: PUSH
13123: LD_INT 34
13125: PUSH
13126: LD_INT 11
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 34
13135: PUSH
13136: LD_INT 30
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PPUSH
13152: CALL_OW 69
13156: ST_TO_ADDR
// if not tmp then
13157: LD_VAR 0 2
13161: NOT
13162: IFFALSE 13166
// exit ;
13164: GO 13195
// for i in tmp do
13166: LD_ADDR_VAR 0 1
13170: PUSH
13171: LD_VAR 0 2
13175: PUSH
13176: FOR_IN
13177: IFFALSE 13193
// begin SetLives ( i , 0 ) ;
13179: LD_VAR 0 1
13183: PPUSH
13184: LD_INT 0
13186: PPUSH
13187: CALL_OW 234
// end ;
13191: GO 13176
13193: POP
13194: POP
// end ;
13195: PPOPN 2
13197: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13198: LD_EXP 24
13202: PUSH
13203: LD_EXP 34
13207: AND
13208: IFFALSE 13228
13210: GO 13212
13212: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13213: LD_INT 32
13215: PPUSH
13216: LD_OWVAR 2
13220: PPUSH
13221: LD_INT 0
13223: PPUSH
13224: CALL_OW 324
13228: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13229: LD_EXP 24
13233: PUSH
13234: LD_EXP 35
13238: AND
13239: IFFALSE 13420
13241: GO 13243
13243: DISABLE
13244: LD_INT 0
13246: PPUSH
13247: PPUSH
13248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13249: LD_ADDR_VAR 0 2
13253: PUSH
13254: LD_INT 22
13256: PUSH
13257: LD_OWVAR 2
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 33
13268: PUSH
13269: LD_INT 3
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 69
13284: ST_TO_ADDR
// if not tmp then
13285: LD_VAR 0 2
13289: NOT
13290: IFFALSE 13294
// exit ;
13292: GO 13420
// side := 0 ;
13294: LD_ADDR_VAR 0 3
13298: PUSH
13299: LD_INT 0
13301: ST_TO_ADDR
// for i := 1 to 8 do
13302: LD_ADDR_VAR 0 1
13306: PUSH
13307: DOUBLE
13308: LD_INT 1
13310: DEC
13311: ST_TO_ADDR
13312: LD_INT 8
13314: PUSH
13315: FOR_TO
13316: IFFALSE 13364
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13318: LD_OWVAR 2
13322: PUSH
13323: LD_VAR 0 1
13327: NONEQUAL
13328: PUSH
13329: LD_OWVAR 2
13333: PPUSH
13334: LD_VAR 0 1
13338: PPUSH
13339: CALL_OW 81
13343: PUSH
13344: LD_INT 2
13346: EQUAL
13347: AND
13348: IFFALSE 13362
// begin side := i ;
13350: LD_ADDR_VAR 0 3
13354: PUSH
13355: LD_VAR 0 1
13359: ST_TO_ADDR
// break ;
13360: GO 13364
// end ;
13362: GO 13315
13364: POP
13365: POP
// if not side then
13366: LD_VAR 0 3
13370: NOT
13371: IFFALSE 13375
// exit ;
13373: GO 13420
// for i := 1 to tmp do
13375: LD_ADDR_VAR 0 1
13379: PUSH
13380: DOUBLE
13381: LD_INT 1
13383: DEC
13384: ST_TO_ADDR
13385: LD_VAR 0 2
13389: PUSH
13390: FOR_TO
13391: IFFALSE 13418
// if Prob ( 60 ) then
13393: LD_INT 60
13395: PPUSH
13396: CALL_OW 13
13400: IFFALSE 13416
// SetSide ( i , side ) ;
13402: LD_VAR 0 1
13406: PPUSH
13407: LD_VAR 0 3
13411: PPUSH
13412: CALL_OW 235
13416: GO 13390
13418: POP
13419: POP
// end ;
13420: PPOPN 3
13422: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13423: LD_EXP 24
13427: PUSH
13428: LD_EXP 37
13432: AND
13433: IFFALSE 13552
13435: GO 13437
13437: DISABLE
13438: LD_INT 0
13440: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13441: LD_ADDR_VAR 0 1
13445: PUSH
13446: LD_INT 22
13448: PUSH
13449: LD_OWVAR 2
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 21
13460: PUSH
13461: LD_INT 1
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 3
13470: PUSH
13471: LD_INT 23
13473: PUSH
13474: LD_INT 0
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: LIST
13489: PPUSH
13490: CALL_OW 69
13494: PUSH
13495: FOR_IN
13496: IFFALSE 13550
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13498: LD_VAR 0 1
13502: PPUSH
13503: CALL_OW 257
13507: PUSH
13508: LD_INT 1
13510: PUSH
13511: LD_INT 2
13513: PUSH
13514: LD_INT 3
13516: PUSH
13517: LD_INT 4
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: IN
13526: IFFALSE 13548
// SetClass ( un , rand ( 1 , 4 ) ) ;
13528: LD_VAR 0 1
13532: PPUSH
13533: LD_INT 1
13535: PPUSH
13536: LD_INT 4
13538: PPUSH
13539: CALL_OW 12
13543: PPUSH
13544: CALL_OW 336
13548: GO 13495
13550: POP
13551: POP
// end ;
13552: PPOPN 1
13554: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13555: LD_EXP 24
13559: PUSH
13560: LD_EXP 36
13564: AND
13565: IFFALSE 13644
13567: GO 13569
13569: DISABLE
13570: LD_INT 0
13572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13573: LD_ADDR_VAR 0 1
13577: PUSH
13578: LD_INT 22
13580: PUSH
13581: LD_OWVAR 2
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 21
13592: PUSH
13593: LD_INT 3
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PPUSH
13604: CALL_OW 69
13608: ST_TO_ADDR
// if not tmp then
13609: LD_VAR 0 1
13613: NOT
13614: IFFALSE 13618
// exit ;
13616: GO 13644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13618: LD_VAR 0 1
13622: PUSH
13623: LD_INT 1
13625: PPUSH
13626: LD_VAR 0 1
13630: PPUSH
13631: CALL_OW 12
13635: ARRAY
13636: PPUSH
13637: LD_INT 100
13639: PPUSH
13640: CALL_OW 234
// end ;
13644: PPOPN 1
13646: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13647: LD_EXP 24
13651: PUSH
13652: LD_EXP 38
13656: AND
13657: IFFALSE 13755
13659: GO 13661
13661: DISABLE
13662: LD_INT 0
13664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13665: LD_ADDR_VAR 0 1
13669: PUSH
13670: LD_INT 22
13672: PUSH
13673: LD_OWVAR 2
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 21
13684: PUSH
13685: LD_INT 1
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PPUSH
13696: CALL_OW 69
13700: ST_TO_ADDR
// if not tmp then
13701: LD_VAR 0 1
13705: NOT
13706: IFFALSE 13710
// exit ;
13708: GO 13755
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13710: LD_VAR 0 1
13714: PUSH
13715: LD_INT 1
13717: PPUSH
13718: LD_VAR 0 1
13722: PPUSH
13723: CALL_OW 12
13727: ARRAY
13728: PPUSH
13729: LD_INT 1
13731: PPUSH
13732: LD_INT 4
13734: PPUSH
13735: CALL_OW 12
13739: PPUSH
13740: LD_INT 3000
13742: PPUSH
13743: LD_INT 9000
13745: PPUSH
13746: CALL_OW 12
13750: PPUSH
13751: CALL_OW 492
// end ;
13755: PPOPN 1
13757: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13758: LD_EXP 24
13762: PUSH
13763: LD_EXP 39
13767: AND
13768: IFFALSE 13788
13770: GO 13772
13772: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13773: LD_INT 1
13775: PPUSH
13776: LD_OWVAR 2
13780: PPUSH
13781: LD_INT 0
13783: PPUSH
13784: CALL_OW 324
13788: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13789: LD_EXP 24
13793: PUSH
13794: LD_EXP 40
13798: AND
13799: IFFALSE 13882
13801: GO 13803
13803: DISABLE
13804: LD_INT 0
13806: PPUSH
13807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13808: LD_ADDR_VAR 0 2
13812: PUSH
13813: LD_INT 22
13815: PUSH
13816: LD_OWVAR 2
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 21
13827: PUSH
13828: LD_INT 3
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PPUSH
13839: CALL_OW 69
13843: ST_TO_ADDR
// if not tmp then
13844: LD_VAR 0 2
13848: NOT
13849: IFFALSE 13853
// exit ;
13851: GO 13882
// for i in tmp do
13853: LD_ADDR_VAR 0 1
13857: PUSH
13858: LD_VAR 0 2
13862: PUSH
13863: FOR_IN
13864: IFFALSE 13880
// SetBLevel ( i , 10 ) ;
13866: LD_VAR 0 1
13870: PPUSH
13871: LD_INT 10
13873: PPUSH
13874: CALL_OW 241
13878: GO 13863
13880: POP
13881: POP
// end ;
13882: PPOPN 2
13884: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13885: LD_EXP 24
13889: PUSH
13890: LD_EXP 41
13894: AND
13895: IFFALSE 14006
13897: GO 13899
13899: DISABLE
13900: LD_INT 0
13902: PPUSH
13903: PPUSH
13904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13905: LD_ADDR_VAR 0 3
13909: PUSH
13910: LD_INT 22
13912: PUSH
13913: LD_OWVAR 2
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: LD_INT 25
13924: PUSH
13925: LD_INT 1
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PPUSH
13936: CALL_OW 69
13940: ST_TO_ADDR
// if not tmp then
13941: LD_VAR 0 3
13945: NOT
13946: IFFALSE 13950
// exit ;
13948: GO 14006
// un := tmp [ rand ( 1 , tmp ) ] ;
13950: LD_ADDR_VAR 0 2
13954: PUSH
13955: LD_VAR 0 3
13959: PUSH
13960: LD_INT 1
13962: PPUSH
13963: LD_VAR 0 3
13967: PPUSH
13968: CALL_OW 12
13972: ARRAY
13973: ST_TO_ADDR
// if Crawls ( un ) then
13974: LD_VAR 0 2
13978: PPUSH
13979: CALL_OW 318
13983: IFFALSE 13994
// ComWalk ( un ) ;
13985: LD_VAR 0 2
13989: PPUSH
13990: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13994: LD_VAR 0 2
13998: PPUSH
13999: LD_INT 5
14001: PPUSH
14002: CALL_OW 336
// end ;
14006: PPOPN 3
14008: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14009: LD_EXP 24
14013: PUSH
14014: LD_EXP 42
14018: AND
14019: PUSH
14020: LD_OWVAR 67
14024: PUSH
14025: LD_INT 3
14027: LESS
14028: AND
14029: IFFALSE 14048
14031: GO 14033
14033: DISABLE
// Difficulty := Difficulty + 1 ;
14034: LD_ADDR_OWVAR 67
14038: PUSH
14039: LD_OWVAR 67
14043: PUSH
14044: LD_INT 1
14046: PLUS
14047: ST_TO_ADDR
14048: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14049: LD_EXP 24
14053: PUSH
14054: LD_EXP 43
14058: AND
14059: IFFALSE 14162
14061: GO 14063
14063: DISABLE
14064: LD_INT 0
14066: PPUSH
// begin for i := 1 to 5 do
14067: LD_ADDR_VAR 0 1
14071: PUSH
14072: DOUBLE
14073: LD_INT 1
14075: DEC
14076: ST_TO_ADDR
14077: LD_INT 5
14079: PUSH
14080: FOR_TO
14081: IFFALSE 14160
// begin uc_nation := nation_nature ;
14083: LD_ADDR_OWVAR 21
14087: PUSH
14088: LD_INT 0
14090: ST_TO_ADDR
// uc_side := 0 ;
14091: LD_ADDR_OWVAR 20
14095: PUSH
14096: LD_INT 0
14098: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14099: LD_ADDR_OWVAR 29
14103: PUSH
14104: LD_INT 12
14106: PUSH
14107: LD_INT 12
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: ST_TO_ADDR
// hc_agressivity := 20 ;
14114: LD_ADDR_OWVAR 35
14118: PUSH
14119: LD_INT 20
14121: ST_TO_ADDR
// hc_class := class_tiger ;
14122: LD_ADDR_OWVAR 28
14126: PUSH
14127: LD_INT 14
14129: ST_TO_ADDR
// hc_gallery :=  ;
14130: LD_ADDR_OWVAR 33
14134: PUSH
14135: LD_STRING 
14137: ST_TO_ADDR
// hc_name :=  ;
14138: LD_ADDR_OWVAR 26
14142: PUSH
14143: LD_STRING 
14145: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14146: CALL_OW 44
14150: PPUSH
14151: LD_INT 0
14153: PPUSH
14154: CALL_OW 51
// end ;
14158: GO 14080
14160: POP
14161: POP
// end ;
14162: PPOPN 1
14164: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14165: LD_EXP 24
14169: PUSH
14170: LD_EXP 44
14174: AND
14175: IFFALSE 14184
14177: GO 14179
14179: DISABLE
// StreamSibBomb ;
14180: CALL 14185 0 0
14184: END
// export function StreamSibBomb ; var i , x , y ; begin
14185: LD_INT 0
14187: PPUSH
14188: PPUSH
14189: PPUSH
14190: PPUSH
// result := false ;
14191: LD_ADDR_VAR 0 1
14195: PUSH
14196: LD_INT 0
14198: ST_TO_ADDR
// for i := 1 to 16 do
14199: LD_ADDR_VAR 0 2
14203: PUSH
14204: DOUBLE
14205: LD_INT 1
14207: DEC
14208: ST_TO_ADDR
14209: LD_INT 16
14211: PUSH
14212: FOR_TO
14213: IFFALSE 14412
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14215: LD_ADDR_VAR 0 3
14219: PUSH
14220: LD_INT 10
14222: PUSH
14223: LD_INT 20
14225: PUSH
14226: LD_INT 30
14228: PUSH
14229: LD_INT 40
14231: PUSH
14232: LD_INT 50
14234: PUSH
14235: LD_INT 60
14237: PUSH
14238: LD_INT 70
14240: PUSH
14241: LD_INT 80
14243: PUSH
14244: LD_INT 90
14246: PUSH
14247: LD_INT 100
14249: PUSH
14250: LD_INT 110
14252: PUSH
14253: LD_INT 120
14255: PUSH
14256: LD_INT 130
14258: PUSH
14259: LD_INT 140
14261: PUSH
14262: LD_INT 150
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 1
14284: PPUSH
14285: LD_INT 15
14287: PPUSH
14288: CALL_OW 12
14292: ARRAY
14293: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14294: LD_ADDR_VAR 0 4
14298: PUSH
14299: LD_INT 10
14301: PUSH
14302: LD_INT 20
14304: PUSH
14305: LD_INT 30
14307: PUSH
14308: LD_INT 40
14310: PUSH
14311: LD_INT 50
14313: PUSH
14314: LD_INT 60
14316: PUSH
14317: LD_INT 70
14319: PUSH
14320: LD_INT 80
14322: PUSH
14323: LD_INT 90
14325: PUSH
14326: LD_INT 100
14328: PUSH
14329: LD_INT 110
14331: PUSH
14332: LD_INT 120
14334: PUSH
14335: LD_INT 130
14337: PUSH
14338: LD_INT 140
14340: PUSH
14341: LD_INT 150
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 1
14363: PPUSH
14364: LD_INT 15
14366: PPUSH
14367: CALL_OW 12
14371: ARRAY
14372: ST_TO_ADDR
// if ValidHex ( x , y ) then
14373: LD_VAR 0 3
14377: PPUSH
14378: LD_VAR 0 4
14382: PPUSH
14383: CALL_OW 488
14387: IFFALSE 14410
// begin result := [ x , y ] ;
14389: LD_ADDR_VAR 0 1
14393: PUSH
14394: LD_VAR 0 3
14398: PUSH
14399: LD_VAR 0 4
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: ST_TO_ADDR
// break ;
14408: GO 14412
// end ; end ;
14410: GO 14212
14412: POP
14413: POP
// if result then
14414: LD_VAR 0 1
14418: IFFALSE 14478
// begin ToLua ( playSibBomb() ) ;
14420: LD_STRING playSibBomb()
14422: PPUSH
14423: CALL_OW 559
// wait ( 0 0$14 ) ;
14427: LD_INT 490
14429: PPUSH
14430: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14434: LD_VAR 0 1
14438: PUSH
14439: LD_INT 1
14441: ARRAY
14442: PPUSH
14443: LD_VAR 0 1
14447: PUSH
14448: LD_INT 2
14450: ARRAY
14451: PPUSH
14452: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14456: LD_VAR 0 1
14460: PUSH
14461: LD_INT 1
14463: ARRAY
14464: PPUSH
14465: LD_VAR 0 1
14469: PUSH
14470: LD_INT 2
14472: ARRAY
14473: PPUSH
14474: CALL_OW 429
// end ; end ;
14478: LD_VAR 0 1
14482: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14483: LD_EXP 24
14487: PUSH
14488: LD_EXP 46
14492: AND
14493: IFFALSE 14505
14495: GO 14497
14497: DISABLE
// YouLost (  ) ;
14498: LD_STRING 
14500: PPUSH
14501: CALL_OW 104
14505: END
// every 0 0$1 trigger StreamModeActive and sFog do
14506: LD_EXP 24
14510: PUSH
14511: LD_EXP 45
14515: AND
14516: IFFALSE 14530
14518: GO 14520
14520: DISABLE
// FogOff ( your_side ) ;
14521: LD_OWVAR 2
14525: PPUSH
14526: CALL_OW 344
14530: END
// every 0 0$1 trigger StreamModeActive and sSun do
14531: LD_EXP 24
14535: PUSH
14536: LD_EXP 47
14540: AND
14541: IFFALSE 14569
14543: GO 14545
14545: DISABLE
// begin solar_recharge_percent := 0 ;
14546: LD_ADDR_OWVAR 79
14550: PUSH
14551: LD_INT 0
14553: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14554: LD_INT 10500
14556: PPUSH
14557: CALL_OW 67
// solar_recharge_percent := 100 ;
14561: LD_ADDR_OWVAR 79
14565: PUSH
14566: LD_INT 100
14568: ST_TO_ADDR
// end ;
14569: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14570: LD_EXP 24
14574: PUSH
14575: LD_EXP 48
14579: AND
14580: IFFALSE 14819
14582: GO 14584
14584: DISABLE
14585: LD_INT 0
14587: PPUSH
14588: PPUSH
14589: PPUSH
// begin tmp := [ ] ;
14590: LD_ADDR_VAR 0 3
14594: PUSH
14595: EMPTY
14596: ST_TO_ADDR
// for i := 1 to 6 do
14597: LD_ADDR_VAR 0 1
14601: PUSH
14602: DOUBLE
14603: LD_INT 1
14605: DEC
14606: ST_TO_ADDR
14607: LD_INT 6
14609: PUSH
14610: FOR_TO
14611: IFFALSE 14716
// begin uc_nation := nation_nature ;
14613: LD_ADDR_OWVAR 21
14617: PUSH
14618: LD_INT 0
14620: ST_TO_ADDR
// uc_side := 0 ;
14621: LD_ADDR_OWVAR 20
14625: PUSH
14626: LD_INT 0
14628: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14629: LD_ADDR_OWVAR 29
14633: PUSH
14634: LD_INT 12
14636: PUSH
14637: LD_INT 12
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: ST_TO_ADDR
// hc_agressivity := 20 ;
14644: LD_ADDR_OWVAR 35
14648: PUSH
14649: LD_INT 20
14651: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14652: LD_ADDR_OWVAR 28
14656: PUSH
14657: LD_INT 17
14659: ST_TO_ADDR
// hc_gallery :=  ;
14660: LD_ADDR_OWVAR 33
14664: PUSH
14665: LD_STRING 
14667: ST_TO_ADDR
// hc_name :=  ;
14668: LD_ADDR_OWVAR 26
14672: PUSH
14673: LD_STRING 
14675: ST_TO_ADDR
// un := CreateHuman ;
14676: LD_ADDR_VAR 0 2
14680: PUSH
14681: CALL_OW 44
14685: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14686: LD_VAR 0 2
14690: PPUSH
14691: LD_INT 1
14693: PPUSH
14694: CALL_OW 51
// tmp := tmp ^ un ;
14698: LD_ADDR_VAR 0 3
14702: PUSH
14703: LD_VAR 0 3
14707: PUSH
14708: LD_VAR 0 2
14712: ADD
14713: ST_TO_ADDR
// end ;
14714: GO 14610
14716: POP
14717: POP
// repeat wait ( 0 0$1 ) ;
14718: LD_INT 35
14720: PPUSH
14721: CALL_OW 67
// for un in tmp do
14725: LD_ADDR_VAR 0 2
14729: PUSH
14730: LD_VAR 0 3
14734: PUSH
14735: FOR_IN
14736: IFFALSE 14810
// begin if IsDead ( un ) then
14738: LD_VAR 0 2
14742: PPUSH
14743: CALL_OW 301
14747: IFFALSE 14767
// begin tmp := tmp diff un ;
14749: LD_ADDR_VAR 0 3
14753: PUSH
14754: LD_VAR 0 3
14758: PUSH
14759: LD_VAR 0 2
14763: DIFF
14764: ST_TO_ADDR
// continue ;
14765: GO 14735
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14767: LD_VAR 0 2
14771: PPUSH
14772: LD_INT 3
14774: PUSH
14775: LD_INT 22
14777: PUSH
14778: LD_INT 0
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PPUSH
14789: CALL_OW 69
14793: PPUSH
14794: LD_VAR 0 2
14798: PPUSH
14799: CALL_OW 74
14803: PPUSH
14804: CALL_OW 115
// end ;
14808: GO 14735
14810: POP
14811: POP
// until not tmp ;
14812: LD_VAR 0 3
14816: NOT
14817: IFFALSE 14718
// end ;
14819: PPOPN 3
14821: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14822: LD_EXP 24
14826: PUSH
14827: LD_EXP 49
14831: AND
14832: IFFALSE 14886
14834: GO 14836
14836: DISABLE
// begin ToLua ( displayTroll(); ) ;
14837: LD_STRING displayTroll();
14839: PPUSH
14840: CALL_OW 559
// wait ( 3 3$00 ) ;
14844: LD_INT 6300
14846: PPUSH
14847: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14851: LD_STRING hideTroll();
14853: PPUSH
14854: CALL_OW 559
// wait ( 1 1$00 ) ;
14858: LD_INT 2100
14860: PPUSH
14861: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14865: LD_STRING displayTroll();
14867: PPUSH
14868: CALL_OW 559
// wait ( 1 1$00 ) ;
14872: LD_INT 2100
14874: PPUSH
14875: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14879: LD_STRING hideTroll();
14881: PPUSH
14882: CALL_OW 559
// end ;
14886: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14887: LD_EXP 24
14891: PUSH
14892: LD_EXP 50
14896: AND
14897: IFFALSE 14960
14899: GO 14901
14901: DISABLE
14902: LD_INT 0
14904: PPUSH
// begin p := 0 ;
14905: LD_ADDR_VAR 0 1
14909: PUSH
14910: LD_INT 0
14912: ST_TO_ADDR
// repeat game_speed := 1 ;
14913: LD_ADDR_OWVAR 65
14917: PUSH
14918: LD_INT 1
14920: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14921: LD_INT 35
14923: PPUSH
14924: CALL_OW 67
// p := p + 1 ;
14928: LD_ADDR_VAR 0 1
14932: PUSH
14933: LD_VAR 0 1
14937: PUSH
14938: LD_INT 1
14940: PLUS
14941: ST_TO_ADDR
// until p >= 60 ;
14942: LD_VAR 0 1
14946: PUSH
14947: LD_INT 60
14949: GREATEREQUAL
14950: IFFALSE 14913
// game_speed := 4 ;
14952: LD_ADDR_OWVAR 65
14956: PUSH
14957: LD_INT 4
14959: ST_TO_ADDR
// end ;
14960: PPOPN 1
14962: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14963: LD_EXP 24
14967: PUSH
14968: LD_EXP 51
14972: AND
14973: IFFALSE 15119
14975: GO 14977
14977: DISABLE
14978: LD_INT 0
14980: PPUSH
14981: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14982: LD_ADDR_VAR 0 1
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_OWVAR 2
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 2
15001: PUSH
15002: LD_INT 30
15004: PUSH
15005: LD_INT 0
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 30
15014: PUSH
15015: LD_INT 1
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PPUSH
15031: CALL_OW 69
15035: ST_TO_ADDR
// if not depot then
15036: LD_VAR 0 1
15040: NOT
15041: IFFALSE 15045
// exit ;
15043: GO 15119
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15045: LD_ADDR_VAR 0 2
15049: PUSH
15050: LD_VAR 0 1
15054: PUSH
15055: LD_INT 1
15057: PPUSH
15058: LD_VAR 0 1
15062: PPUSH
15063: CALL_OW 12
15067: ARRAY
15068: PPUSH
15069: CALL_OW 274
15073: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15074: LD_VAR 0 2
15078: PPUSH
15079: LD_INT 1
15081: PPUSH
15082: LD_INT 0
15084: PPUSH
15085: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15089: LD_VAR 0 2
15093: PPUSH
15094: LD_INT 2
15096: PPUSH
15097: LD_INT 0
15099: PPUSH
15100: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15104: LD_VAR 0 2
15108: PPUSH
15109: LD_INT 3
15111: PPUSH
15112: LD_INT 0
15114: PPUSH
15115: CALL_OW 277
// end ;
15119: PPOPN 2
15121: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15122: LD_EXP 24
15126: PUSH
15127: LD_EXP 52
15131: AND
15132: IFFALSE 15229
15134: GO 15136
15136: DISABLE
15137: LD_INT 0
15139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15140: LD_ADDR_VAR 0 1
15144: PUSH
15145: LD_INT 22
15147: PUSH
15148: LD_OWVAR 2
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PUSH
15157: LD_INT 21
15159: PUSH
15160: LD_INT 1
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 3
15169: PUSH
15170: LD_INT 23
15172: PUSH
15173: LD_INT 0
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: LIST
15188: PPUSH
15189: CALL_OW 69
15193: ST_TO_ADDR
// if not tmp then
15194: LD_VAR 0 1
15198: NOT
15199: IFFALSE 15203
// exit ;
15201: GO 15229
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15203: LD_VAR 0 1
15207: PUSH
15208: LD_INT 1
15210: PPUSH
15211: LD_VAR 0 1
15215: PPUSH
15216: CALL_OW 12
15220: ARRAY
15221: PPUSH
15222: LD_INT 200
15224: PPUSH
15225: CALL_OW 234
// end ;
15229: PPOPN 1
15231: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15232: LD_EXP 24
15236: PUSH
15237: LD_EXP 53
15241: AND
15242: IFFALSE 15321
15244: GO 15246
15246: DISABLE
15247: LD_INT 0
15249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15250: LD_ADDR_VAR 0 1
15254: PUSH
15255: LD_INT 22
15257: PUSH
15258: LD_OWVAR 2
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 21
15269: PUSH
15270: LD_INT 2
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PPUSH
15281: CALL_OW 69
15285: ST_TO_ADDR
// if not tmp then
15286: LD_VAR 0 1
15290: NOT
15291: IFFALSE 15295
// exit ;
15293: GO 15321
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15295: LD_VAR 0 1
15299: PUSH
15300: LD_INT 1
15302: PPUSH
15303: LD_VAR 0 1
15307: PPUSH
15308: CALL_OW 12
15312: ARRAY
15313: PPUSH
15314: LD_INT 60
15316: PPUSH
15317: CALL_OW 234
// end ;
15321: PPOPN 1
15323: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15324: LD_EXP 24
15328: PUSH
15329: LD_EXP 54
15333: AND
15334: IFFALSE 15433
15336: GO 15338
15338: DISABLE
15339: LD_INT 0
15341: PPUSH
15342: PPUSH
// begin enable ;
15343: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15344: LD_ADDR_VAR 0 1
15348: PUSH
15349: LD_INT 22
15351: PUSH
15352: LD_OWVAR 2
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 61
15363: PUSH
15364: EMPTY
15365: LIST
15366: PUSH
15367: LD_INT 33
15369: PUSH
15370: LD_INT 2
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: PPUSH
15382: CALL_OW 69
15386: ST_TO_ADDR
// if not tmp then
15387: LD_VAR 0 1
15391: NOT
15392: IFFALSE 15396
// exit ;
15394: GO 15433
// for i in tmp do
15396: LD_ADDR_VAR 0 2
15400: PUSH
15401: LD_VAR 0 1
15405: PUSH
15406: FOR_IN
15407: IFFALSE 15431
// if IsControledBy ( i ) then
15409: LD_VAR 0 2
15413: PPUSH
15414: CALL_OW 312
15418: IFFALSE 15429
// ComUnlink ( i ) ;
15420: LD_VAR 0 2
15424: PPUSH
15425: CALL_OW 136
15429: GO 15406
15431: POP
15432: POP
// end ;
15433: PPOPN 2
15435: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15436: LD_EXP 24
15440: PUSH
15441: LD_EXP 55
15445: AND
15446: IFFALSE 15586
15448: GO 15450
15450: DISABLE
15451: LD_INT 0
15453: PPUSH
15454: PPUSH
// begin ToLua ( displayPowell(); ) ;
15455: LD_STRING displayPowell();
15457: PPUSH
15458: CALL_OW 559
// uc_side := 0 ;
15462: LD_ADDR_OWVAR 20
15466: PUSH
15467: LD_INT 0
15469: ST_TO_ADDR
// uc_nation := 2 ;
15470: LD_ADDR_OWVAR 21
15474: PUSH
15475: LD_INT 2
15477: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15478: LD_ADDR_OWVAR 37
15482: PUSH
15483: LD_INT 14
15485: ST_TO_ADDR
// vc_engine := engine_siberite ;
15486: LD_ADDR_OWVAR 39
15490: PUSH
15491: LD_INT 3
15493: ST_TO_ADDR
// vc_control := control_apeman ;
15494: LD_ADDR_OWVAR 38
15498: PUSH
15499: LD_INT 5
15501: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15502: LD_ADDR_OWVAR 40
15506: PUSH
15507: LD_INT 29
15509: ST_TO_ADDR
// un := CreateVehicle ;
15510: LD_ADDR_VAR 0 2
15514: PUSH
15515: CALL_OW 45
15519: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15520: LD_VAR 0 2
15524: PPUSH
15525: LD_INT 1
15527: PPUSH
15528: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15532: LD_INT 35
15534: PPUSH
15535: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15539: LD_VAR 0 2
15543: PPUSH
15544: LD_INT 22
15546: PUSH
15547: LD_OWVAR 2
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PPUSH
15556: CALL_OW 69
15560: PPUSH
15561: LD_VAR 0 2
15565: PPUSH
15566: CALL_OW 74
15570: PPUSH
15571: CALL_OW 115
// until IsDead ( un ) ;
15575: LD_VAR 0 2
15579: PPUSH
15580: CALL_OW 301
15584: IFFALSE 15532
// end ;
15586: PPOPN 2
15588: END
// every 0 0$1 trigger StreamModeActive and sStu do
15589: LD_EXP 24
15593: PUSH
15594: LD_EXP 63
15598: AND
15599: IFFALSE 15615
15601: GO 15603
15603: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15604: LD_STRING displayStucuk();
15606: PPUSH
15607: CALL_OW 559
// ResetFog ;
15611: CALL_OW 335
// end ;
15615: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15616: LD_EXP 24
15620: PUSH
15621: LD_EXP 56
15625: AND
15626: IFFALSE 15767
15628: GO 15630
15630: DISABLE
15631: LD_INT 0
15633: PPUSH
15634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15635: LD_ADDR_VAR 0 2
15639: PUSH
15640: LD_INT 22
15642: PUSH
15643: LD_OWVAR 2
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 21
15654: PUSH
15655: LD_INT 1
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PPUSH
15666: CALL_OW 69
15670: ST_TO_ADDR
// if not tmp then
15671: LD_VAR 0 2
15675: NOT
15676: IFFALSE 15680
// exit ;
15678: GO 15767
// un := tmp [ rand ( 1 , tmp ) ] ;
15680: LD_ADDR_VAR 0 1
15684: PUSH
15685: LD_VAR 0 2
15689: PUSH
15690: LD_INT 1
15692: PPUSH
15693: LD_VAR 0 2
15697: PPUSH
15698: CALL_OW 12
15702: ARRAY
15703: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15704: LD_VAR 0 1
15708: PPUSH
15709: LD_INT 0
15711: PPUSH
15712: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15716: LD_VAR 0 1
15720: PPUSH
15721: LD_OWVAR 3
15725: PUSH
15726: LD_VAR 0 1
15730: DIFF
15731: PPUSH
15732: LD_VAR 0 1
15736: PPUSH
15737: CALL_OW 74
15741: PPUSH
15742: CALL_OW 115
// wait ( 0 0$20 ) ;
15746: LD_INT 700
15748: PPUSH
15749: CALL_OW 67
// SetSide ( un , your_side ) ;
15753: LD_VAR 0 1
15757: PPUSH
15758: LD_OWVAR 2
15762: PPUSH
15763: CALL_OW 235
// end ;
15767: PPOPN 2
15769: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15770: LD_EXP 24
15774: PUSH
15775: LD_EXP 57
15779: AND
15780: IFFALSE 15886
15782: GO 15784
15784: DISABLE
15785: LD_INT 0
15787: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15788: LD_ADDR_VAR 0 1
15792: PUSH
15793: LD_INT 22
15795: PUSH
15796: LD_OWVAR 2
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: LD_INT 2
15807: PUSH
15808: LD_INT 30
15810: PUSH
15811: LD_INT 0
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 30
15820: PUSH
15821: LD_INT 1
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: LIST
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: ST_TO_ADDR
// if not depot then
15842: LD_VAR 0 1
15846: NOT
15847: IFFALSE 15851
// exit ;
15849: GO 15886
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15851: LD_VAR 0 1
15855: PUSH
15856: LD_INT 1
15858: ARRAY
15859: PPUSH
15860: CALL_OW 250
15864: PPUSH
15865: LD_VAR 0 1
15869: PUSH
15870: LD_INT 1
15872: ARRAY
15873: PPUSH
15874: CALL_OW 251
15878: PPUSH
15879: LD_INT 70
15881: PPUSH
15882: CALL_OW 495
// end ;
15886: PPOPN 1
15888: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15889: LD_EXP 24
15893: PUSH
15894: LD_EXP 58
15898: AND
15899: IFFALSE 16110
15901: GO 15903
15903: DISABLE
15904: LD_INT 0
15906: PPUSH
15907: PPUSH
15908: PPUSH
15909: PPUSH
15910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15911: LD_ADDR_VAR 0 5
15915: PUSH
15916: LD_INT 22
15918: PUSH
15919: LD_OWVAR 2
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 21
15930: PUSH
15931: LD_INT 1
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 69
15946: ST_TO_ADDR
// if not tmp then
15947: LD_VAR 0 5
15951: NOT
15952: IFFALSE 15956
// exit ;
15954: GO 16110
// for i in tmp do
15956: LD_ADDR_VAR 0 1
15960: PUSH
15961: LD_VAR 0 5
15965: PUSH
15966: FOR_IN
15967: IFFALSE 16108
// begin d := rand ( 0 , 5 ) ;
15969: LD_ADDR_VAR 0 4
15973: PUSH
15974: LD_INT 0
15976: PPUSH
15977: LD_INT 5
15979: PPUSH
15980: CALL_OW 12
15984: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15985: LD_ADDR_VAR 0 2
15989: PUSH
15990: LD_VAR 0 1
15994: PPUSH
15995: CALL_OW 250
15999: PPUSH
16000: LD_VAR 0 4
16004: PPUSH
16005: LD_INT 3
16007: PPUSH
16008: LD_INT 12
16010: PPUSH
16011: CALL_OW 12
16015: PPUSH
16016: CALL_OW 272
16020: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16021: LD_ADDR_VAR 0 3
16025: PUSH
16026: LD_VAR 0 1
16030: PPUSH
16031: CALL_OW 251
16035: PPUSH
16036: LD_VAR 0 4
16040: PPUSH
16041: LD_INT 3
16043: PPUSH
16044: LD_INT 12
16046: PPUSH
16047: CALL_OW 12
16051: PPUSH
16052: CALL_OW 273
16056: ST_TO_ADDR
// if ValidHex ( x , y ) then
16057: LD_VAR 0 2
16061: PPUSH
16062: LD_VAR 0 3
16066: PPUSH
16067: CALL_OW 488
16071: IFFALSE 16106
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16073: LD_VAR 0 1
16077: PPUSH
16078: LD_VAR 0 2
16082: PPUSH
16083: LD_VAR 0 3
16087: PPUSH
16088: LD_INT 3
16090: PPUSH
16091: LD_INT 6
16093: PPUSH
16094: CALL_OW 12
16098: PPUSH
16099: LD_INT 1
16101: PPUSH
16102: CALL_OW 483
// end ;
16106: GO 15966
16108: POP
16109: POP
// end ;
16110: PPOPN 5
16112: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16113: LD_EXP 24
16117: PUSH
16118: LD_EXP 59
16122: AND
16123: IFFALSE 16217
16125: GO 16127
16127: DISABLE
16128: LD_INT 0
16130: PPUSH
16131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16132: LD_ADDR_VAR 0 2
16136: PUSH
16137: LD_INT 22
16139: PUSH
16140: LD_OWVAR 2
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: LD_INT 32
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 21
16161: PUSH
16162: LD_INT 2
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: LIST
16173: PPUSH
16174: CALL_OW 69
16178: ST_TO_ADDR
// if not tmp then
16179: LD_VAR 0 2
16183: NOT
16184: IFFALSE 16188
// exit ;
16186: GO 16217
// for i in tmp do
16188: LD_ADDR_VAR 0 1
16192: PUSH
16193: LD_VAR 0 2
16197: PUSH
16198: FOR_IN
16199: IFFALSE 16215
// SetFuel ( i , 0 ) ;
16201: LD_VAR 0 1
16205: PPUSH
16206: LD_INT 0
16208: PPUSH
16209: CALL_OW 240
16213: GO 16198
16215: POP
16216: POP
// end ;
16217: PPOPN 2
16219: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16220: LD_EXP 24
16224: PUSH
16225: LD_EXP 60
16229: AND
16230: IFFALSE 16296
16232: GO 16234
16234: DISABLE
16235: LD_INT 0
16237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16238: LD_ADDR_VAR 0 1
16242: PUSH
16243: LD_INT 22
16245: PUSH
16246: LD_OWVAR 2
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 30
16257: PUSH
16258: LD_INT 29
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PPUSH
16269: CALL_OW 69
16273: ST_TO_ADDR
// if not tmp then
16274: LD_VAR 0 1
16278: NOT
16279: IFFALSE 16283
// exit ;
16281: GO 16296
// DestroyUnit ( tmp [ 1 ] ) ;
16283: LD_VAR 0 1
16287: PUSH
16288: LD_INT 1
16290: ARRAY
16291: PPUSH
16292: CALL_OW 65
// end ;
16296: PPOPN 1
16298: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16299: LD_EXP 24
16303: PUSH
16304: LD_EXP 62
16308: AND
16309: IFFALSE 16438
16311: GO 16313
16313: DISABLE
16314: LD_INT 0
16316: PPUSH
// begin uc_side := 0 ;
16317: LD_ADDR_OWVAR 20
16321: PUSH
16322: LD_INT 0
16324: ST_TO_ADDR
// uc_nation := nation_arabian ;
16325: LD_ADDR_OWVAR 21
16329: PUSH
16330: LD_INT 2
16332: ST_TO_ADDR
// hc_gallery :=  ;
16333: LD_ADDR_OWVAR 33
16337: PUSH
16338: LD_STRING 
16340: ST_TO_ADDR
// hc_name :=  ;
16341: LD_ADDR_OWVAR 26
16345: PUSH
16346: LD_STRING 
16348: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16349: LD_INT 1
16351: PPUSH
16352: LD_INT 11
16354: PPUSH
16355: LD_INT 10
16357: PPUSH
16358: CALL_OW 380
// un := CreateHuman ;
16362: LD_ADDR_VAR 0 1
16366: PUSH
16367: CALL_OW 44
16371: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16372: LD_VAR 0 1
16376: PPUSH
16377: LD_INT 1
16379: PPUSH
16380: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16384: LD_INT 35
16386: PPUSH
16387: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16391: LD_VAR 0 1
16395: PPUSH
16396: LD_INT 22
16398: PUSH
16399: LD_OWVAR 2
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PPUSH
16408: CALL_OW 69
16412: PPUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: CALL_OW 74
16422: PPUSH
16423: CALL_OW 115
// until IsDead ( un ) ;
16427: LD_VAR 0 1
16431: PPUSH
16432: CALL_OW 301
16436: IFFALSE 16384
// end ;
16438: PPOPN 1
16440: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16441: LD_EXP 24
16445: PUSH
16446: LD_EXP 64
16450: AND
16451: IFFALSE 16463
16453: GO 16455
16455: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16456: LD_STRING earthquake(getX(game), 0, 32)
16458: PPUSH
16459: CALL_OW 559
16463: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16464: LD_EXP 24
16468: PUSH
16469: LD_EXP 65
16473: AND
16474: IFFALSE 16565
16476: GO 16478
16478: DISABLE
16479: LD_INT 0
16481: PPUSH
// begin enable ;
16482: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16483: LD_ADDR_VAR 0 1
16487: PUSH
16488: LD_INT 22
16490: PUSH
16491: LD_OWVAR 2
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 21
16502: PUSH
16503: LD_INT 2
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 33
16512: PUSH
16513: LD_INT 3
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: LIST
16524: PPUSH
16525: CALL_OW 69
16529: ST_TO_ADDR
// if not tmp then
16530: LD_VAR 0 1
16534: NOT
16535: IFFALSE 16539
// exit ;
16537: GO 16565
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16539: LD_VAR 0 1
16543: PUSH
16544: LD_INT 1
16546: PPUSH
16547: LD_VAR 0 1
16551: PPUSH
16552: CALL_OW 12
16556: ARRAY
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 234
// end ;
16565: PPOPN 1
16567: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16568: LD_EXP 24
16572: PUSH
16573: LD_EXP 66
16577: AND
16578: IFFALSE 16719
16580: GO 16582
16582: DISABLE
16583: LD_INT 0
16585: PPUSH
16586: PPUSH
16587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16588: LD_ADDR_VAR 0 3
16592: PUSH
16593: LD_INT 22
16595: PUSH
16596: LD_OWVAR 2
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 25
16607: PUSH
16608: LD_INT 1
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PPUSH
16619: CALL_OW 69
16623: ST_TO_ADDR
// if not tmp then
16624: LD_VAR 0 3
16628: NOT
16629: IFFALSE 16633
// exit ;
16631: GO 16719
// un := tmp [ rand ( 1 , tmp ) ] ;
16633: LD_ADDR_VAR 0 2
16637: PUSH
16638: LD_VAR 0 3
16642: PUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_VAR 0 3
16650: PPUSH
16651: CALL_OW 12
16655: ARRAY
16656: ST_TO_ADDR
// if Crawls ( un ) then
16657: LD_VAR 0 2
16661: PPUSH
16662: CALL_OW 318
16666: IFFALSE 16677
// ComWalk ( un ) ;
16668: LD_VAR 0 2
16672: PPUSH
16673: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16677: LD_VAR 0 2
16681: PPUSH
16682: LD_INT 9
16684: PPUSH
16685: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16689: LD_INT 28
16691: PPUSH
16692: LD_OWVAR 2
16696: PPUSH
16697: LD_INT 2
16699: PPUSH
16700: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16704: LD_INT 29
16706: PPUSH
16707: LD_OWVAR 2
16711: PPUSH
16712: LD_INT 2
16714: PPUSH
16715: CALL_OW 322
// end ;
16719: PPOPN 3
16721: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16722: LD_EXP 24
16726: PUSH
16727: LD_EXP 67
16731: AND
16732: IFFALSE 16843
16734: GO 16736
16736: DISABLE
16737: LD_INT 0
16739: PPUSH
16740: PPUSH
16741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16742: LD_ADDR_VAR 0 3
16746: PUSH
16747: LD_INT 22
16749: PUSH
16750: LD_OWVAR 2
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 25
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PPUSH
16773: CALL_OW 69
16777: ST_TO_ADDR
// if not tmp then
16778: LD_VAR 0 3
16782: NOT
16783: IFFALSE 16787
// exit ;
16785: GO 16843
// un := tmp [ rand ( 1 , tmp ) ] ;
16787: LD_ADDR_VAR 0 2
16791: PUSH
16792: LD_VAR 0 3
16796: PUSH
16797: LD_INT 1
16799: PPUSH
16800: LD_VAR 0 3
16804: PPUSH
16805: CALL_OW 12
16809: ARRAY
16810: ST_TO_ADDR
// if Crawls ( un ) then
16811: LD_VAR 0 2
16815: PPUSH
16816: CALL_OW 318
16820: IFFALSE 16831
// ComWalk ( un ) ;
16822: LD_VAR 0 2
16826: PPUSH
16827: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16831: LD_VAR 0 2
16835: PPUSH
16836: LD_INT 8
16838: PPUSH
16839: CALL_OW 336
// end ;
16843: PPOPN 3
16845: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16846: LD_EXP 24
16850: PUSH
16851: LD_EXP 68
16855: AND
16856: IFFALSE 17000
16858: GO 16860
16860: DISABLE
16861: LD_INT 0
16863: PPUSH
16864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: LD_INT 22
16872: PUSH
16873: LD_OWVAR 2
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 21
16884: PUSH
16885: LD_INT 2
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 2
16894: PUSH
16895: LD_INT 34
16897: PUSH
16898: LD_INT 12
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 34
16907: PUSH
16908: LD_INT 51
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 34
16917: PUSH
16918: LD_INT 32
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: LIST
16935: PPUSH
16936: CALL_OW 69
16940: ST_TO_ADDR
// if not tmp then
16941: LD_VAR 0 2
16945: NOT
16946: IFFALSE 16950
// exit ;
16948: GO 17000
// for i in tmp do
16950: LD_ADDR_VAR 0 1
16954: PUSH
16955: LD_VAR 0 2
16959: PUSH
16960: FOR_IN
16961: IFFALSE 16998
// if GetCargo ( i , mat_artifact ) = 0 then
16963: LD_VAR 0 1
16967: PPUSH
16968: LD_INT 4
16970: PPUSH
16971: CALL_OW 289
16975: PUSH
16976: LD_INT 0
16978: EQUAL
16979: IFFALSE 16996
// SetCargo ( i , mat_siberit , 100 ) ;
16981: LD_VAR 0 1
16985: PPUSH
16986: LD_INT 3
16988: PPUSH
16989: LD_INT 100
16991: PPUSH
16992: CALL_OW 290
16996: GO 16960
16998: POP
16999: POP
// end ;
17000: PPOPN 2
17002: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17003: LD_EXP 24
17007: PUSH
17008: LD_EXP 69
17012: AND
17013: IFFALSE 17196
17015: GO 17017
17017: DISABLE
17018: LD_INT 0
17020: PPUSH
17021: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17022: LD_ADDR_VAR 0 2
17026: PUSH
17027: LD_INT 22
17029: PUSH
17030: LD_OWVAR 2
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: ST_TO_ADDR
// if not tmp then
17044: LD_VAR 0 2
17048: NOT
17049: IFFALSE 17053
// exit ;
17051: GO 17196
// for i := 1 to 2 do
17053: LD_ADDR_VAR 0 1
17057: PUSH
17058: DOUBLE
17059: LD_INT 1
17061: DEC
17062: ST_TO_ADDR
17063: LD_INT 2
17065: PUSH
17066: FOR_TO
17067: IFFALSE 17194
// begin uc_side := your_side ;
17069: LD_ADDR_OWVAR 20
17073: PUSH
17074: LD_OWVAR 2
17078: ST_TO_ADDR
// uc_nation := nation_american ;
17079: LD_ADDR_OWVAR 21
17083: PUSH
17084: LD_INT 1
17086: ST_TO_ADDR
// vc_chassis := us_morphling ;
17087: LD_ADDR_OWVAR 37
17091: PUSH
17092: LD_INT 5
17094: ST_TO_ADDR
// vc_engine := engine_siberite ;
17095: LD_ADDR_OWVAR 39
17099: PUSH
17100: LD_INT 3
17102: ST_TO_ADDR
// vc_control := control_computer ;
17103: LD_ADDR_OWVAR 38
17107: PUSH
17108: LD_INT 3
17110: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17111: LD_ADDR_OWVAR 40
17115: PUSH
17116: LD_INT 10
17118: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17119: LD_VAR 0 2
17123: PUSH
17124: LD_INT 1
17126: ARRAY
17127: PPUSH
17128: CALL_OW 310
17132: NOT
17133: IFFALSE 17180
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17135: CALL_OW 45
17139: PPUSH
17140: LD_VAR 0 2
17144: PUSH
17145: LD_INT 1
17147: ARRAY
17148: PPUSH
17149: CALL_OW 250
17153: PPUSH
17154: LD_VAR 0 2
17158: PUSH
17159: LD_INT 1
17161: ARRAY
17162: PPUSH
17163: CALL_OW 251
17167: PPUSH
17168: LD_INT 12
17170: PPUSH
17171: LD_INT 1
17173: PPUSH
17174: CALL_OW 50
17178: GO 17192
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17180: CALL_OW 45
17184: PPUSH
17185: LD_INT 1
17187: PPUSH
17188: CALL_OW 51
// end ;
17192: GO 17066
17194: POP
17195: POP
// end ;
17196: PPOPN 2
17198: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17199: LD_EXP 24
17203: PUSH
17204: LD_EXP 70
17208: AND
17209: IFFALSE 17431
17211: GO 17213
17213: DISABLE
17214: LD_INT 0
17216: PPUSH
17217: PPUSH
17218: PPUSH
17219: PPUSH
17220: PPUSH
17221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17222: LD_ADDR_VAR 0 6
17226: PUSH
17227: LD_INT 22
17229: PUSH
17230: LD_OWVAR 2
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 21
17241: PUSH
17242: LD_INT 1
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 3
17251: PUSH
17252: LD_INT 23
17254: PUSH
17255: LD_INT 0
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: LIST
17270: PPUSH
17271: CALL_OW 69
17275: ST_TO_ADDR
// if not tmp then
17276: LD_VAR 0 6
17280: NOT
17281: IFFALSE 17285
// exit ;
17283: GO 17431
// s1 := rand ( 1 , 4 ) ;
17285: LD_ADDR_VAR 0 2
17289: PUSH
17290: LD_INT 1
17292: PPUSH
17293: LD_INT 4
17295: PPUSH
17296: CALL_OW 12
17300: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17301: LD_ADDR_VAR 0 4
17305: PUSH
17306: LD_VAR 0 6
17310: PUSH
17311: LD_INT 1
17313: ARRAY
17314: PPUSH
17315: LD_VAR 0 2
17319: PPUSH
17320: CALL_OW 259
17324: ST_TO_ADDR
// if s1 = 1 then
17325: LD_VAR 0 2
17329: PUSH
17330: LD_INT 1
17332: EQUAL
17333: IFFALSE 17353
// s2 := rand ( 2 , 4 ) else
17335: LD_ADDR_VAR 0 3
17339: PUSH
17340: LD_INT 2
17342: PPUSH
17343: LD_INT 4
17345: PPUSH
17346: CALL_OW 12
17350: ST_TO_ADDR
17351: GO 17361
// s2 := 1 ;
17353: LD_ADDR_VAR 0 3
17357: PUSH
17358: LD_INT 1
17360: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17361: LD_ADDR_VAR 0 5
17365: PUSH
17366: LD_VAR 0 6
17370: PUSH
17371: LD_INT 1
17373: ARRAY
17374: PPUSH
17375: LD_VAR 0 3
17379: PPUSH
17380: CALL_OW 259
17384: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17385: LD_VAR 0 6
17389: PUSH
17390: LD_INT 1
17392: ARRAY
17393: PPUSH
17394: LD_VAR 0 2
17398: PPUSH
17399: LD_VAR 0 5
17403: PPUSH
17404: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17408: LD_VAR 0 6
17412: PUSH
17413: LD_INT 1
17415: ARRAY
17416: PPUSH
17417: LD_VAR 0 3
17421: PPUSH
17422: LD_VAR 0 4
17426: PPUSH
17427: CALL_OW 237
// end ;
17431: PPOPN 6
17433: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17434: LD_EXP 24
17438: PUSH
17439: LD_EXP 71
17443: AND
17444: IFFALSE 17523
17446: GO 17448
17448: DISABLE
17449: LD_INT 0
17451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17452: LD_ADDR_VAR 0 1
17456: PUSH
17457: LD_INT 22
17459: PUSH
17460: LD_OWVAR 2
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 30
17471: PUSH
17472: LD_INT 3
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PPUSH
17483: CALL_OW 69
17487: ST_TO_ADDR
// if not tmp then
17488: LD_VAR 0 1
17492: NOT
17493: IFFALSE 17497
// exit ;
17495: GO 17523
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17497: LD_VAR 0 1
17501: PUSH
17502: LD_INT 1
17504: PPUSH
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 12
17514: ARRAY
17515: PPUSH
17516: LD_INT 1
17518: PPUSH
17519: CALL_OW 234
// end ;
17523: PPOPN 1
17525: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17526: LD_EXP 24
17530: PUSH
17531: LD_EXP 72
17535: AND
17536: IFFALSE 17648
17538: GO 17540
17540: DISABLE
17541: LD_INT 0
17543: PPUSH
17544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17545: LD_ADDR_VAR 0 2
17549: PUSH
17550: LD_INT 22
17552: PUSH
17553: LD_OWVAR 2
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 2
17564: PUSH
17565: LD_INT 30
17567: PUSH
17568: LD_INT 27
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 30
17577: PUSH
17578: LD_INT 26
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 30
17587: PUSH
17588: LD_INT 28
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PPUSH
17605: CALL_OW 69
17609: ST_TO_ADDR
// if not tmp then
17610: LD_VAR 0 2
17614: NOT
17615: IFFALSE 17619
// exit ;
17617: GO 17648
// for i in tmp do
17619: LD_ADDR_VAR 0 1
17623: PUSH
17624: LD_VAR 0 2
17628: PUSH
17629: FOR_IN
17630: IFFALSE 17646
// SetLives ( i , 1 ) ;
17632: LD_VAR 0 1
17636: PPUSH
17637: LD_INT 1
17639: PPUSH
17640: CALL_OW 234
17644: GO 17629
17646: POP
17647: POP
// end ;
17648: PPOPN 2
17650: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17651: LD_EXP 24
17655: PUSH
17656: LD_EXP 73
17660: AND
17661: IFFALSE 17935
17663: GO 17665
17665: DISABLE
17666: LD_INT 0
17668: PPUSH
17669: PPUSH
17670: PPUSH
// begin i := rand ( 1 , 7 ) ;
17671: LD_ADDR_VAR 0 1
17675: PUSH
17676: LD_INT 1
17678: PPUSH
17679: LD_INT 7
17681: PPUSH
17682: CALL_OW 12
17686: ST_TO_ADDR
// case i of 1 :
17687: LD_VAR 0 1
17691: PUSH
17692: LD_INT 1
17694: DOUBLE
17695: EQUAL
17696: IFTRUE 17700
17698: GO 17710
17700: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17701: LD_STRING earthquake(getX(game), 0, 32)
17703: PPUSH
17704: CALL_OW 559
17708: GO 17935
17710: LD_INT 2
17712: DOUBLE
17713: EQUAL
17714: IFTRUE 17718
17716: GO 17732
17718: POP
// begin ToLua ( displayStucuk(); ) ;
17719: LD_STRING displayStucuk();
17721: PPUSH
17722: CALL_OW 559
// ResetFog ;
17726: CALL_OW 335
// end ; 3 :
17730: GO 17935
17732: LD_INT 3
17734: DOUBLE
17735: EQUAL
17736: IFTRUE 17740
17738: GO 17844
17740: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17741: LD_ADDR_VAR 0 2
17745: PUSH
17746: LD_INT 22
17748: PUSH
17749: LD_OWVAR 2
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 25
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PPUSH
17772: CALL_OW 69
17776: ST_TO_ADDR
// if not tmp then
17777: LD_VAR 0 2
17781: NOT
17782: IFFALSE 17786
// exit ;
17784: GO 17935
// un := tmp [ rand ( 1 , tmp ) ] ;
17786: LD_ADDR_VAR 0 3
17790: PUSH
17791: LD_VAR 0 2
17795: PUSH
17796: LD_INT 1
17798: PPUSH
17799: LD_VAR 0 2
17803: PPUSH
17804: CALL_OW 12
17808: ARRAY
17809: ST_TO_ADDR
// if Crawls ( un ) then
17810: LD_VAR 0 3
17814: PPUSH
17815: CALL_OW 318
17819: IFFALSE 17830
// ComWalk ( un ) ;
17821: LD_VAR 0 3
17825: PPUSH
17826: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17830: LD_VAR 0 3
17834: PPUSH
17835: LD_INT 8
17837: PPUSH
17838: CALL_OW 336
// end ; 4 :
17842: GO 17935
17844: LD_INT 4
17846: DOUBLE
17847: EQUAL
17848: IFTRUE 17852
17850: GO 17913
17852: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17853: LD_ADDR_VAR 0 2
17857: PUSH
17858: LD_INT 22
17860: PUSH
17861: LD_OWVAR 2
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 30
17872: PUSH
17873: LD_INT 29
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PPUSH
17884: CALL_OW 69
17888: ST_TO_ADDR
// if not tmp then
17889: LD_VAR 0 2
17893: NOT
17894: IFFALSE 17898
// exit ;
17896: GO 17935
// DestroyUnit ( tmp [ 1 ] ) ;
17898: LD_VAR 0 2
17902: PUSH
17903: LD_INT 1
17905: ARRAY
17906: PPUSH
17907: CALL_OW 65
// end ; 5 .. 7 :
17911: GO 17935
17913: LD_INT 5
17915: DOUBLE
17916: GREATEREQUAL
17917: IFFALSE 17925
17919: LD_INT 7
17921: DOUBLE
17922: LESSEQUAL
17923: IFTRUE 17927
17925: GO 17934
17927: POP
// StreamSibBomb ; end ;
17928: CALL 14185 0 0
17932: GO 17935
17934: POP
// end ;
17935: PPOPN 3
17937: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17938: LD_EXP 24
17942: PUSH
17943: LD_EXP 74
17947: AND
17948: IFFALSE 18104
17950: GO 17952
17952: DISABLE
17953: LD_INT 0
17955: PPUSH
17956: PPUSH
17957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17958: LD_ADDR_VAR 0 2
17962: PUSH
17963: LD_INT 81
17965: PUSH
17966: LD_OWVAR 2
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 2
17977: PUSH
17978: LD_INT 21
17980: PUSH
17981: LD_INT 1
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 21
17990: PUSH
17991: LD_INT 2
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PPUSH
18007: CALL_OW 69
18011: ST_TO_ADDR
// if not tmp then
18012: LD_VAR 0 2
18016: NOT
18017: IFFALSE 18021
// exit ;
18019: GO 18104
// p := 0 ;
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: LD_INT 0
18028: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18029: LD_INT 35
18031: PPUSH
18032: CALL_OW 67
// p := p + 1 ;
18036: LD_ADDR_VAR 0 3
18040: PUSH
18041: LD_VAR 0 3
18045: PUSH
18046: LD_INT 1
18048: PLUS
18049: ST_TO_ADDR
// for i in tmp do
18050: LD_ADDR_VAR 0 1
18054: PUSH
18055: LD_VAR 0 2
18059: PUSH
18060: FOR_IN
18061: IFFALSE 18092
// if GetLives ( i ) < 1000 then
18063: LD_VAR 0 1
18067: PPUSH
18068: CALL_OW 256
18072: PUSH
18073: LD_INT 1000
18075: LESS
18076: IFFALSE 18090
// SetLives ( i , 1000 ) ;
18078: LD_VAR 0 1
18082: PPUSH
18083: LD_INT 1000
18085: PPUSH
18086: CALL_OW 234
18090: GO 18060
18092: POP
18093: POP
// until p > 20 ;
18094: LD_VAR 0 3
18098: PUSH
18099: LD_INT 20
18101: GREATER
18102: IFFALSE 18029
// end ;
18104: PPOPN 3
18106: END
// every 0 0$1 trigger StreamModeActive and sTime do
18107: LD_EXP 24
18111: PUSH
18112: LD_EXP 75
18116: AND
18117: IFFALSE 18152
18119: GO 18121
18121: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18122: LD_INT 28
18124: PPUSH
18125: LD_OWVAR 2
18129: PPUSH
18130: LD_INT 2
18132: PPUSH
18133: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18137: LD_INT 30
18139: PPUSH
18140: LD_OWVAR 2
18144: PPUSH
18145: LD_INT 2
18147: PPUSH
18148: CALL_OW 322
// end ;
18152: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18153: LD_EXP 24
18157: PUSH
18158: LD_EXP 76
18162: AND
18163: IFFALSE 18284
18165: GO 18167
18167: DISABLE
18168: LD_INT 0
18170: PPUSH
18171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18172: LD_ADDR_VAR 0 2
18176: PUSH
18177: LD_INT 22
18179: PUSH
18180: LD_OWVAR 2
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 21
18191: PUSH
18192: LD_INT 1
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 3
18201: PUSH
18202: LD_INT 23
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: LIST
18220: PPUSH
18221: CALL_OW 69
18225: ST_TO_ADDR
// if not tmp then
18226: LD_VAR 0 2
18230: NOT
18231: IFFALSE 18235
// exit ;
18233: GO 18284
// for i in tmp do
18235: LD_ADDR_VAR 0 1
18239: PUSH
18240: LD_VAR 0 2
18244: PUSH
18245: FOR_IN
18246: IFFALSE 18282
// begin if Crawls ( i ) then
18248: LD_VAR 0 1
18252: PPUSH
18253: CALL_OW 318
18257: IFFALSE 18268
// ComWalk ( i ) ;
18259: LD_VAR 0 1
18263: PPUSH
18264: CALL_OW 138
// SetClass ( i , 2 ) ;
18268: LD_VAR 0 1
18272: PPUSH
18273: LD_INT 2
18275: PPUSH
18276: CALL_OW 336
// end ;
18280: GO 18245
18282: POP
18283: POP
// end ;
18284: PPOPN 2
18286: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18287: LD_EXP 24
18291: PUSH
18292: LD_EXP 77
18296: AND
18297: IFFALSE 18578
18299: GO 18301
18301: DISABLE
18302: LD_INT 0
18304: PPUSH
18305: PPUSH
18306: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18307: LD_OWVAR 2
18311: PPUSH
18312: LD_INT 9
18314: PPUSH
18315: LD_INT 1
18317: PPUSH
18318: LD_INT 1
18320: PPUSH
18321: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18325: LD_INT 9
18327: PPUSH
18328: LD_OWVAR 2
18332: PPUSH
18333: CALL_OW 343
// uc_side := 9 ;
18337: LD_ADDR_OWVAR 20
18341: PUSH
18342: LD_INT 9
18344: ST_TO_ADDR
// uc_nation := 2 ;
18345: LD_ADDR_OWVAR 21
18349: PUSH
18350: LD_INT 2
18352: ST_TO_ADDR
// hc_name := Dark Warrior ;
18353: LD_ADDR_OWVAR 26
18357: PUSH
18358: LD_STRING Dark Warrior
18360: ST_TO_ADDR
// hc_gallery :=  ;
18361: LD_ADDR_OWVAR 33
18365: PUSH
18366: LD_STRING 
18368: ST_TO_ADDR
// hc_noskilllimit := true ;
18369: LD_ADDR_OWVAR 76
18373: PUSH
18374: LD_INT 1
18376: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18377: LD_ADDR_OWVAR 31
18381: PUSH
18382: LD_INT 30
18384: PUSH
18385: LD_INT 30
18387: PUSH
18388: LD_INT 30
18390: PUSH
18391: LD_INT 30
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: ST_TO_ADDR
// un := CreateHuman ;
18400: LD_ADDR_VAR 0 3
18404: PUSH
18405: CALL_OW 44
18409: ST_TO_ADDR
// hc_noskilllimit := false ;
18410: LD_ADDR_OWVAR 76
18414: PUSH
18415: LD_INT 0
18417: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18418: LD_VAR 0 3
18422: PPUSH
18423: LD_INT 1
18425: PPUSH
18426: CALL_OW 51
// p := 0 ;
18430: LD_ADDR_VAR 0 2
18434: PUSH
18435: LD_INT 0
18437: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18438: LD_INT 35
18440: PPUSH
18441: CALL_OW 67
// p := p + 1 ;
18445: LD_ADDR_VAR 0 2
18449: PUSH
18450: LD_VAR 0 2
18454: PUSH
18455: LD_INT 1
18457: PLUS
18458: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18459: LD_VAR 0 3
18463: PPUSH
18464: CALL_OW 256
18468: PUSH
18469: LD_INT 1000
18471: LESS
18472: IFFALSE 18486
// SetLives ( un , 1000 ) ;
18474: LD_VAR 0 3
18478: PPUSH
18479: LD_INT 1000
18481: PPUSH
18482: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18486: LD_VAR 0 3
18490: PPUSH
18491: LD_INT 81
18493: PUSH
18494: LD_OWVAR 2
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 91
18505: PUSH
18506: LD_VAR 0 3
18510: PUSH
18511: LD_INT 30
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: LIST
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PPUSH
18523: CALL_OW 69
18527: PPUSH
18528: LD_VAR 0 3
18532: PPUSH
18533: CALL_OW 74
18537: PPUSH
18538: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18542: LD_VAR 0 2
18546: PUSH
18547: LD_INT 60
18549: GREATER
18550: PUSH
18551: LD_VAR 0 3
18555: PPUSH
18556: CALL_OW 301
18560: OR
18561: IFFALSE 18438
// if un then
18563: LD_VAR 0 3
18567: IFFALSE 18578
// RemoveUnit ( un ) ;
18569: LD_VAR 0 3
18573: PPUSH
18574: CALL_OW 64
// end ;
18578: PPOPN 3
18580: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18581: LD_INT 0
18583: PPUSH
// case cmd of 301 :
18584: LD_VAR 0 1
18588: PUSH
18589: LD_INT 301
18591: DOUBLE
18592: EQUAL
18593: IFTRUE 18597
18595: GO 18629
18597: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18598: LD_VAR 0 6
18602: PPUSH
18603: LD_VAR 0 7
18607: PPUSH
18608: LD_VAR 0 8
18612: PPUSH
18613: LD_VAR 0 4
18617: PPUSH
18618: LD_VAR 0 5
18622: PPUSH
18623: CALL 19830 0 5
18627: GO 18750
18629: LD_INT 302
18631: DOUBLE
18632: EQUAL
18633: IFTRUE 18637
18635: GO 18674
18637: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18638: LD_VAR 0 6
18642: PPUSH
18643: LD_VAR 0 7
18647: PPUSH
18648: LD_VAR 0 8
18652: PPUSH
18653: LD_VAR 0 9
18657: PPUSH
18658: LD_VAR 0 4
18662: PPUSH
18663: LD_VAR 0 5
18667: PPUSH
18668: CALL 19921 0 6
18672: GO 18750
18674: LD_INT 303
18676: DOUBLE
18677: EQUAL
18678: IFTRUE 18682
18680: GO 18719
18682: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18683: LD_VAR 0 6
18687: PPUSH
18688: LD_VAR 0 7
18692: PPUSH
18693: LD_VAR 0 8
18697: PPUSH
18698: LD_VAR 0 9
18702: PPUSH
18703: LD_VAR 0 4
18707: PPUSH
18708: LD_VAR 0 5
18712: PPUSH
18713: CALL 18755 0 6
18717: GO 18750
18719: LD_INT 304
18721: DOUBLE
18722: EQUAL
18723: IFTRUE 18727
18725: GO 18749
18727: POP
// hHackTeleport ( unit , x , y ) ; end ;
18728: LD_VAR 0 2
18732: PPUSH
18733: LD_VAR 0 4
18737: PPUSH
18738: LD_VAR 0 5
18742: PPUSH
18743: CALL 20514 0 3
18747: GO 18750
18749: POP
// end ;
18750: LD_VAR 0 12
18754: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18755: LD_INT 0
18757: PPUSH
18758: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18759: LD_VAR 0 1
18763: PUSH
18764: LD_INT 1
18766: LESS
18767: PUSH
18768: LD_VAR 0 1
18772: PUSH
18773: LD_INT 3
18775: GREATER
18776: OR
18777: PUSH
18778: LD_VAR 0 5
18782: PPUSH
18783: LD_VAR 0 6
18787: PPUSH
18788: CALL_OW 428
18792: OR
18793: IFFALSE 18797
// exit ;
18795: GO 19517
// uc_side := your_side ;
18797: LD_ADDR_OWVAR 20
18801: PUSH
18802: LD_OWVAR 2
18806: ST_TO_ADDR
// uc_nation := nation ;
18807: LD_ADDR_OWVAR 21
18811: PUSH
18812: LD_VAR 0 1
18816: ST_TO_ADDR
// bc_level = 1 ;
18817: LD_ADDR_OWVAR 43
18821: PUSH
18822: LD_INT 1
18824: ST_TO_ADDR
// case btype of 1 :
18825: LD_VAR 0 2
18829: PUSH
18830: LD_INT 1
18832: DOUBLE
18833: EQUAL
18834: IFTRUE 18838
18836: GO 18849
18838: POP
// bc_type := b_depot ; 2 :
18839: LD_ADDR_OWVAR 42
18843: PUSH
18844: LD_INT 0
18846: ST_TO_ADDR
18847: GO 19461
18849: LD_INT 2
18851: DOUBLE
18852: EQUAL
18853: IFTRUE 18857
18855: GO 18868
18857: POP
// bc_type := b_warehouse ; 3 :
18858: LD_ADDR_OWVAR 42
18862: PUSH
18863: LD_INT 1
18865: ST_TO_ADDR
18866: GO 19461
18868: LD_INT 3
18870: DOUBLE
18871: EQUAL
18872: IFTRUE 18876
18874: GO 18887
18876: POP
// bc_type := b_lab ; 4 .. 9 :
18877: LD_ADDR_OWVAR 42
18881: PUSH
18882: LD_INT 6
18884: ST_TO_ADDR
18885: GO 19461
18887: LD_INT 4
18889: DOUBLE
18890: GREATEREQUAL
18891: IFFALSE 18899
18893: LD_INT 9
18895: DOUBLE
18896: LESSEQUAL
18897: IFTRUE 18901
18899: GO 18953
18901: POP
// begin bc_type := b_lab_half ;
18902: LD_ADDR_OWVAR 42
18906: PUSH
18907: LD_INT 7
18909: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18910: LD_ADDR_OWVAR 44
18914: PUSH
18915: LD_INT 10
18917: PUSH
18918: LD_INT 11
18920: PUSH
18921: LD_INT 12
18923: PUSH
18924: LD_INT 15
18926: PUSH
18927: LD_INT 14
18929: PUSH
18930: LD_INT 13
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: PUSH
18941: LD_VAR 0 2
18945: PUSH
18946: LD_INT 3
18948: MINUS
18949: ARRAY
18950: ST_TO_ADDR
// end ; 10 .. 13 :
18951: GO 19461
18953: LD_INT 10
18955: DOUBLE
18956: GREATEREQUAL
18957: IFFALSE 18965
18959: LD_INT 13
18961: DOUBLE
18962: LESSEQUAL
18963: IFTRUE 18967
18965: GO 19044
18967: POP
// begin bc_type := b_lab_full ;
18968: LD_ADDR_OWVAR 42
18972: PUSH
18973: LD_INT 8
18975: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18976: LD_ADDR_OWVAR 44
18980: PUSH
18981: LD_INT 10
18983: PUSH
18984: LD_INT 12
18986: PUSH
18987: LD_INT 14
18989: PUSH
18990: LD_INT 13
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: PUSH
18999: LD_VAR 0 2
19003: PUSH
19004: LD_INT 9
19006: MINUS
19007: ARRAY
19008: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19009: LD_ADDR_OWVAR 45
19013: PUSH
19014: LD_INT 11
19016: PUSH
19017: LD_INT 15
19019: PUSH
19020: LD_INT 12
19022: PUSH
19023: LD_INT 15
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: PUSH
19032: LD_VAR 0 2
19036: PUSH
19037: LD_INT 9
19039: MINUS
19040: ARRAY
19041: ST_TO_ADDR
// end ; 14 :
19042: GO 19461
19044: LD_INT 14
19046: DOUBLE
19047: EQUAL
19048: IFTRUE 19052
19050: GO 19063
19052: POP
// bc_type := b_workshop ; 15 :
19053: LD_ADDR_OWVAR 42
19057: PUSH
19058: LD_INT 2
19060: ST_TO_ADDR
19061: GO 19461
19063: LD_INT 15
19065: DOUBLE
19066: EQUAL
19067: IFTRUE 19071
19069: GO 19082
19071: POP
// bc_type := b_factory ; 16 :
19072: LD_ADDR_OWVAR 42
19076: PUSH
19077: LD_INT 3
19079: ST_TO_ADDR
19080: GO 19461
19082: LD_INT 16
19084: DOUBLE
19085: EQUAL
19086: IFTRUE 19090
19088: GO 19101
19090: POP
// bc_type := b_ext_gun ; 17 :
19091: LD_ADDR_OWVAR 42
19095: PUSH
19096: LD_INT 17
19098: ST_TO_ADDR
19099: GO 19461
19101: LD_INT 17
19103: DOUBLE
19104: EQUAL
19105: IFTRUE 19109
19107: GO 19137
19109: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19110: LD_ADDR_OWVAR 42
19114: PUSH
19115: LD_INT 19
19117: PUSH
19118: LD_INT 23
19120: PUSH
19121: LD_INT 19
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: LIST
19128: PUSH
19129: LD_VAR 0 1
19133: ARRAY
19134: ST_TO_ADDR
19135: GO 19461
19137: LD_INT 18
19139: DOUBLE
19140: EQUAL
19141: IFTRUE 19145
19143: GO 19156
19145: POP
// bc_type := b_ext_radar ; 19 :
19146: LD_ADDR_OWVAR 42
19150: PUSH
19151: LD_INT 20
19153: ST_TO_ADDR
19154: GO 19461
19156: LD_INT 19
19158: DOUBLE
19159: EQUAL
19160: IFTRUE 19164
19162: GO 19175
19164: POP
// bc_type := b_ext_radio ; 20 :
19165: LD_ADDR_OWVAR 42
19169: PUSH
19170: LD_INT 22
19172: ST_TO_ADDR
19173: GO 19461
19175: LD_INT 20
19177: DOUBLE
19178: EQUAL
19179: IFTRUE 19183
19181: GO 19194
19183: POP
// bc_type := b_ext_siberium ; 21 :
19184: LD_ADDR_OWVAR 42
19188: PUSH
19189: LD_INT 21
19191: ST_TO_ADDR
19192: GO 19461
19194: LD_INT 21
19196: DOUBLE
19197: EQUAL
19198: IFTRUE 19202
19200: GO 19213
19202: POP
// bc_type := b_ext_computer ; 22 :
19203: LD_ADDR_OWVAR 42
19207: PUSH
19208: LD_INT 24
19210: ST_TO_ADDR
19211: GO 19461
19213: LD_INT 22
19215: DOUBLE
19216: EQUAL
19217: IFTRUE 19221
19219: GO 19232
19221: POP
// bc_type := b_ext_track ; 23 :
19222: LD_ADDR_OWVAR 42
19226: PUSH
19227: LD_INT 16
19229: ST_TO_ADDR
19230: GO 19461
19232: LD_INT 23
19234: DOUBLE
19235: EQUAL
19236: IFTRUE 19240
19238: GO 19251
19240: POP
// bc_type := b_ext_laser ; 24 :
19241: LD_ADDR_OWVAR 42
19245: PUSH
19246: LD_INT 25
19248: ST_TO_ADDR
19249: GO 19461
19251: LD_INT 24
19253: DOUBLE
19254: EQUAL
19255: IFTRUE 19259
19257: GO 19270
19259: POP
// bc_type := b_control_tower ; 25 :
19260: LD_ADDR_OWVAR 42
19264: PUSH
19265: LD_INT 36
19267: ST_TO_ADDR
19268: GO 19461
19270: LD_INT 25
19272: DOUBLE
19273: EQUAL
19274: IFTRUE 19278
19276: GO 19289
19278: POP
// bc_type := b_breastwork ; 26 :
19279: LD_ADDR_OWVAR 42
19283: PUSH
19284: LD_INT 31
19286: ST_TO_ADDR
19287: GO 19461
19289: LD_INT 26
19291: DOUBLE
19292: EQUAL
19293: IFTRUE 19297
19295: GO 19308
19297: POP
// bc_type := b_bunker ; 27 :
19298: LD_ADDR_OWVAR 42
19302: PUSH
19303: LD_INT 32
19305: ST_TO_ADDR
19306: GO 19461
19308: LD_INT 27
19310: DOUBLE
19311: EQUAL
19312: IFTRUE 19316
19314: GO 19327
19316: POP
// bc_type := b_turret ; 28 :
19317: LD_ADDR_OWVAR 42
19321: PUSH
19322: LD_INT 33
19324: ST_TO_ADDR
19325: GO 19461
19327: LD_INT 28
19329: DOUBLE
19330: EQUAL
19331: IFTRUE 19335
19333: GO 19346
19335: POP
// bc_type := b_armoury ; 29 :
19336: LD_ADDR_OWVAR 42
19340: PUSH
19341: LD_INT 4
19343: ST_TO_ADDR
19344: GO 19461
19346: LD_INT 29
19348: DOUBLE
19349: EQUAL
19350: IFTRUE 19354
19352: GO 19365
19354: POP
// bc_type := b_barracks ; 30 :
19355: LD_ADDR_OWVAR 42
19359: PUSH
19360: LD_INT 5
19362: ST_TO_ADDR
19363: GO 19461
19365: LD_INT 30
19367: DOUBLE
19368: EQUAL
19369: IFTRUE 19373
19371: GO 19384
19373: POP
// bc_type := b_solar_power ; 31 :
19374: LD_ADDR_OWVAR 42
19378: PUSH
19379: LD_INT 27
19381: ST_TO_ADDR
19382: GO 19461
19384: LD_INT 31
19386: DOUBLE
19387: EQUAL
19388: IFTRUE 19392
19390: GO 19403
19392: POP
// bc_type := b_oil_power ; 32 :
19393: LD_ADDR_OWVAR 42
19397: PUSH
19398: LD_INT 26
19400: ST_TO_ADDR
19401: GO 19461
19403: LD_INT 32
19405: DOUBLE
19406: EQUAL
19407: IFTRUE 19411
19409: GO 19422
19411: POP
// bc_type := b_siberite_power ; 33 :
19412: LD_ADDR_OWVAR 42
19416: PUSH
19417: LD_INT 28
19419: ST_TO_ADDR
19420: GO 19461
19422: LD_INT 33
19424: DOUBLE
19425: EQUAL
19426: IFTRUE 19430
19428: GO 19441
19430: POP
// bc_type := b_oil_mine ; 34 :
19431: LD_ADDR_OWVAR 42
19435: PUSH
19436: LD_INT 29
19438: ST_TO_ADDR
19439: GO 19461
19441: LD_INT 34
19443: DOUBLE
19444: EQUAL
19445: IFTRUE 19449
19447: GO 19460
19449: POP
// bc_type := b_siberite_mine ; end ;
19450: LD_ADDR_OWVAR 42
19454: PUSH
19455: LD_INT 30
19457: ST_TO_ADDR
19458: GO 19461
19460: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19461: LD_ADDR_VAR 0 8
19465: PUSH
19466: LD_VAR 0 5
19470: PPUSH
19471: LD_VAR 0 6
19475: PPUSH
19476: LD_VAR 0 3
19480: PPUSH
19481: CALL_OW 47
19485: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19486: LD_OWVAR 42
19490: PUSH
19491: LD_INT 32
19493: PUSH
19494: LD_INT 33
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: IN
19501: IFFALSE 19517
// PlaceWeaponTurret ( b , weapon ) ;
19503: LD_VAR 0 8
19507: PPUSH
19508: LD_VAR 0 4
19512: PPUSH
19513: CALL_OW 431
// end ;
19517: LD_VAR 0 7
19521: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19522: LD_INT 0
19524: PPUSH
19525: PPUSH
19526: PPUSH
19527: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19528: LD_ADDR_VAR 0 4
19532: PUSH
19533: LD_INT 22
19535: PUSH
19536: LD_OWVAR 2
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: LD_INT 30
19550: PUSH
19551: LD_INT 0
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 30
19560: PUSH
19561: LD_INT 1
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: LIST
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 69
19581: ST_TO_ADDR
// if not tmp then
19582: LD_VAR 0 4
19586: NOT
19587: IFFALSE 19591
// exit ;
19589: GO 19650
// for i in tmp do
19591: LD_ADDR_VAR 0 2
19595: PUSH
19596: LD_VAR 0 4
19600: PUSH
19601: FOR_IN
19602: IFFALSE 19648
// for j = 1 to 3 do
19604: LD_ADDR_VAR 0 3
19608: PUSH
19609: DOUBLE
19610: LD_INT 1
19612: DEC
19613: ST_TO_ADDR
19614: LD_INT 3
19616: PUSH
19617: FOR_TO
19618: IFFALSE 19644
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19620: LD_VAR 0 2
19624: PPUSH
19625: CALL_OW 274
19629: PPUSH
19630: LD_VAR 0 3
19634: PPUSH
19635: LD_INT 99999
19637: PPUSH
19638: CALL_OW 277
19642: GO 19617
19644: POP
19645: POP
19646: GO 19601
19648: POP
19649: POP
// end ;
19650: LD_VAR 0 1
19654: RET
// export function hHackSetLevel10 ; var i , j ; begin
19655: LD_INT 0
19657: PPUSH
19658: PPUSH
19659: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19660: LD_ADDR_VAR 0 2
19664: PUSH
19665: LD_INT 21
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PPUSH
19675: CALL_OW 69
19679: PUSH
19680: FOR_IN
19681: IFFALSE 19733
// if IsSelected ( i ) then
19683: LD_VAR 0 2
19687: PPUSH
19688: CALL_OW 306
19692: IFFALSE 19731
// begin for j := 1 to 4 do
19694: LD_ADDR_VAR 0 3
19698: PUSH
19699: DOUBLE
19700: LD_INT 1
19702: DEC
19703: ST_TO_ADDR
19704: LD_INT 4
19706: PUSH
19707: FOR_TO
19708: IFFALSE 19729
// SetSkill ( i , j , 10 ) ;
19710: LD_VAR 0 2
19714: PPUSH
19715: LD_VAR 0 3
19719: PPUSH
19720: LD_INT 10
19722: PPUSH
19723: CALL_OW 237
19727: GO 19707
19729: POP
19730: POP
// end ;
19731: GO 19680
19733: POP
19734: POP
// end ;
19735: LD_VAR 0 1
19739: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19740: LD_INT 0
19742: PPUSH
19743: PPUSH
19744: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19745: LD_ADDR_VAR 0 2
19749: PUSH
19750: LD_INT 22
19752: PUSH
19753: LD_OWVAR 2
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 21
19764: PUSH
19765: LD_INT 1
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PPUSH
19776: CALL_OW 69
19780: PUSH
19781: FOR_IN
19782: IFFALSE 19823
// begin for j := 1 to 4 do
19784: LD_ADDR_VAR 0 3
19788: PUSH
19789: DOUBLE
19790: LD_INT 1
19792: DEC
19793: ST_TO_ADDR
19794: LD_INT 4
19796: PUSH
19797: FOR_TO
19798: IFFALSE 19819
// SetSkill ( i , j , 10 ) ;
19800: LD_VAR 0 2
19804: PPUSH
19805: LD_VAR 0 3
19809: PPUSH
19810: LD_INT 10
19812: PPUSH
19813: CALL_OW 237
19817: GO 19797
19819: POP
19820: POP
// end ;
19821: GO 19781
19823: POP
19824: POP
// end ;
19825: LD_VAR 0 1
19829: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19830: LD_INT 0
19832: PPUSH
// uc_side := your_side ;
19833: LD_ADDR_OWVAR 20
19837: PUSH
19838: LD_OWVAR 2
19842: ST_TO_ADDR
// uc_nation := nation ;
19843: LD_ADDR_OWVAR 21
19847: PUSH
19848: LD_VAR 0 1
19852: ST_TO_ADDR
// InitHc ;
19853: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19857: LD_INT 0
19859: PPUSH
19860: LD_VAR 0 2
19864: PPUSH
19865: LD_VAR 0 3
19869: PPUSH
19870: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19874: LD_VAR 0 4
19878: PPUSH
19879: LD_VAR 0 5
19883: PPUSH
19884: CALL_OW 428
19888: PUSH
19889: LD_INT 0
19891: EQUAL
19892: IFFALSE 19916
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19894: CALL_OW 44
19898: PPUSH
19899: LD_VAR 0 4
19903: PPUSH
19904: LD_VAR 0 5
19908: PPUSH
19909: LD_INT 1
19911: PPUSH
19912: CALL_OW 48
// end ;
19916: LD_VAR 0 6
19920: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19921: LD_INT 0
19923: PPUSH
19924: PPUSH
// uc_side := your_side ;
19925: LD_ADDR_OWVAR 20
19929: PUSH
19930: LD_OWVAR 2
19934: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19935: LD_VAR 0 1
19939: PUSH
19940: LD_INT 1
19942: PUSH
19943: LD_INT 2
19945: PUSH
19946: LD_INT 3
19948: PUSH
19949: LD_INT 4
19951: PUSH
19952: LD_INT 5
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: IN
19962: IFFALSE 19974
// uc_nation := nation_american else
19964: LD_ADDR_OWVAR 21
19968: PUSH
19969: LD_INT 1
19971: ST_TO_ADDR
19972: GO 20017
// if chassis in [ 11 , 12 , 13 , 14 ] then
19974: LD_VAR 0 1
19978: PUSH
19979: LD_INT 11
19981: PUSH
19982: LD_INT 12
19984: PUSH
19985: LD_INT 13
19987: PUSH
19988: LD_INT 14
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: IN
19997: IFFALSE 20009
// uc_nation := nation_arabian else
19999: LD_ADDR_OWVAR 21
20003: PUSH
20004: LD_INT 2
20006: ST_TO_ADDR
20007: GO 20017
// uc_nation := nation_russian ;
20009: LD_ADDR_OWVAR 21
20013: PUSH
20014: LD_INT 3
20016: ST_TO_ADDR
// vc_chassis := chassis ;
20017: LD_ADDR_OWVAR 37
20021: PUSH
20022: LD_VAR 0 1
20026: ST_TO_ADDR
// vc_engine := engine ;
20027: LD_ADDR_OWVAR 39
20031: PUSH
20032: LD_VAR 0 2
20036: ST_TO_ADDR
// vc_control := control ;
20037: LD_ADDR_OWVAR 38
20041: PUSH
20042: LD_VAR 0 3
20046: ST_TO_ADDR
// vc_weapon := weapon ;
20047: LD_ADDR_OWVAR 40
20051: PUSH
20052: LD_VAR 0 4
20056: ST_TO_ADDR
// un := CreateVehicle ;
20057: LD_ADDR_VAR 0 8
20061: PUSH
20062: CALL_OW 45
20066: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20067: LD_VAR 0 8
20071: PPUSH
20072: LD_INT 0
20074: PPUSH
20075: LD_INT 5
20077: PPUSH
20078: CALL_OW 12
20082: PPUSH
20083: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20087: LD_VAR 0 8
20091: PPUSH
20092: LD_VAR 0 5
20096: PPUSH
20097: LD_VAR 0 6
20101: PPUSH
20102: LD_INT 1
20104: PPUSH
20105: CALL_OW 48
// end ;
20109: LD_VAR 0 7
20113: RET
// export hInvincible ; every 1 do
20114: GO 20116
20116: DISABLE
// hInvincible := [ ] ;
20117: LD_ADDR_EXP 78
20121: PUSH
20122: EMPTY
20123: ST_TO_ADDR
20124: END
// every 10 do var i ;
20125: GO 20127
20127: DISABLE
20128: LD_INT 0
20130: PPUSH
// begin enable ;
20131: ENABLE
// if not hInvincible then
20132: LD_EXP 78
20136: NOT
20137: IFFALSE 20141
// exit ;
20139: GO 20185
// for i in hInvincible do
20141: LD_ADDR_VAR 0 1
20145: PUSH
20146: LD_EXP 78
20150: PUSH
20151: FOR_IN
20152: IFFALSE 20183
// if GetLives ( i ) < 1000 then
20154: LD_VAR 0 1
20158: PPUSH
20159: CALL_OW 256
20163: PUSH
20164: LD_INT 1000
20166: LESS
20167: IFFALSE 20181
// SetLives ( i , 1000 ) ;
20169: LD_VAR 0 1
20173: PPUSH
20174: LD_INT 1000
20176: PPUSH
20177: CALL_OW 234
20181: GO 20151
20183: POP
20184: POP
// end ;
20185: PPOPN 1
20187: END
// export function hHackInvincible ; var i ; begin
20188: LD_INT 0
20190: PPUSH
20191: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20192: LD_ADDR_VAR 0 2
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: LD_INT 21
20202: PUSH
20203: LD_INT 1
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 21
20212: PUSH
20213: LD_INT 2
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: LIST
20224: PPUSH
20225: CALL_OW 69
20229: PUSH
20230: FOR_IN
20231: IFFALSE 20292
// if IsSelected ( i ) then
20233: LD_VAR 0 2
20237: PPUSH
20238: CALL_OW 306
20242: IFFALSE 20290
// begin if i in hInvincible then
20244: LD_VAR 0 2
20248: PUSH
20249: LD_EXP 78
20253: IN
20254: IFFALSE 20274
// hInvincible := hInvincible diff i else
20256: LD_ADDR_EXP 78
20260: PUSH
20261: LD_EXP 78
20265: PUSH
20266: LD_VAR 0 2
20270: DIFF
20271: ST_TO_ADDR
20272: GO 20290
// hInvincible := hInvincible union i ;
20274: LD_ADDR_EXP 78
20278: PUSH
20279: LD_EXP 78
20283: PUSH
20284: LD_VAR 0 2
20288: UNION
20289: ST_TO_ADDR
// end ;
20290: GO 20230
20292: POP
20293: POP
// end ;
20294: LD_VAR 0 1
20298: RET
// export function hHackInvisible ; var i , j ; begin
20299: LD_INT 0
20301: PPUSH
20302: PPUSH
20303: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20304: LD_ADDR_VAR 0 2
20308: PUSH
20309: LD_INT 21
20311: PUSH
20312: LD_INT 1
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PPUSH
20319: CALL_OW 69
20323: PUSH
20324: FOR_IN
20325: IFFALSE 20349
// if IsSelected ( i ) then
20327: LD_VAR 0 2
20331: PPUSH
20332: CALL_OW 306
20336: IFFALSE 20347
// ComForceInvisible ( i ) ;
20338: LD_VAR 0 2
20342: PPUSH
20343: CALL_OW 496
20347: GO 20324
20349: POP
20350: POP
// end ;
20351: LD_VAR 0 1
20355: RET
// export function hHackChangeYourSide ; begin
20356: LD_INT 0
20358: PPUSH
// if your_side = 8 then
20359: LD_OWVAR 2
20363: PUSH
20364: LD_INT 8
20366: EQUAL
20367: IFFALSE 20379
// your_side := 0 else
20369: LD_ADDR_OWVAR 2
20373: PUSH
20374: LD_INT 0
20376: ST_TO_ADDR
20377: GO 20393
// your_side := your_side + 1 ;
20379: LD_ADDR_OWVAR 2
20383: PUSH
20384: LD_OWVAR 2
20388: PUSH
20389: LD_INT 1
20391: PLUS
20392: ST_TO_ADDR
// end ;
20393: LD_VAR 0 1
20397: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20398: LD_INT 0
20400: PPUSH
20401: PPUSH
20402: PPUSH
// for i in all_units do
20403: LD_ADDR_VAR 0 2
20407: PUSH
20408: LD_OWVAR 3
20412: PUSH
20413: FOR_IN
20414: IFFALSE 20492
// if IsSelected ( i ) then
20416: LD_VAR 0 2
20420: PPUSH
20421: CALL_OW 306
20425: IFFALSE 20490
// begin j := GetSide ( i ) ;
20427: LD_ADDR_VAR 0 3
20431: PUSH
20432: LD_VAR 0 2
20436: PPUSH
20437: CALL_OW 255
20441: ST_TO_ADDR
// if j = 8 then
20442: LD_VAR 0 3
20446: PUSH
20447: LD_INT 8
20449: EQUAL
20450: IFFALSE 20462
// j := 0 else
20452: LD_ADDR_VAR 0 3
20456: PUSH
20457: LD_INT 0
20459: ST_TO_ADDR
20460: GO 20476
// j := j + 1 ;
20462: LD_ADDR_VAR 0 3
20466: PUSH
20467: LD_VAR 0 3
20471: PUSH
20472: LD_INT 1
20474: PLUS
20475: ST_TO_ADDR
// SetSide ( i , j ) ;
20476: LD_VAR 0 2
20480: PPUSH
20481: LD_VAR 0 3
20485: PPUSH
20486: CALL_OW 235
// end ;
20490: GO 20413
20492: POP
20493: POP
// end ;
20494: LD_VAR 0 1
20498: RET
// export function hHackFog ; begin
20499: LD_INT 0
20501: PPUSH
// FogOff ( true ) ;
20502: LD_INT 1
20504: PPUSH
20505: CALL_OW 344
// end ;
20509: LD_VAR 0 1
20513: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20514: LD_INT 0
20516: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20517: LD_VAR 0 1
20521: PPUSH
20522: LD_VAR 0 2
20526: PPUSH
20527: LD_VAR 0 3
20531: PPUSH
20532: LD_INT 1
20534: PPUSH
20535: LD_INT 1
20537: PPUSH
20538: CALL_OW 483
// CenterOnXY ( x , y ) ;
20542: LD_VAR 0 2
20546: PPUSH
20547: LD_VAR 0 3
20551: PPUSH
20552: CALL_OW 84
// end ; end_of_file end_of_file
20556: LD_VAR 0 4
20560: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
20561: LD_INT 0
20563: PPUSH
// ar_miner := 81 ;
20564: LD_ADDR_EXP 86
20568: PUSH
20569: LD_INT 81
20571: ST_TO_ADDR
// ar_crane := 88 ;
20572: LD_ADDR_EXP 85
20576: PUSH
20577: LD_INT 88
20579: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20580: LD_ADDR_EXP 80
20584: PUSH
20585: LD_INT 89
20587: ST_TO_ADDR
// us_hack := 99 ;
20588: LD_ADDR_EXP 81
20592: PUSH
20593: LD_INT 99
20595: ST_TO_ADDR
// us_artillery := 97 ;
20596: LD_ADDR_EXP 82
20600: PUSH
20601: LD_INT 97
20603: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20604: LD_ADDR_EXP 83
20608: PUSH
20609: LD_INT 91
20611: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
20612: LD_ADDR_EXP 84
20616: PUSH
20617: LD_INT 92
20619: ST_TO_ADDR
// ru_radar := 98 ;
20620: LD_ADDR_EXP 79
20624: PUSH
20625: LD_INT 98
20627: ST_TO_ADDR
// tech_Artillery := 80 ;
20628: LD_ADDR_EXP 87
20632: PUSH
20633: LD_INT 80
20635: ST_TO_ADDR
// tech_RadMat := 81 ;
20636: LD_ADDR_EXP 88
20640: PUSH
20641: LD_INT 81
20643: ST_TO_ADDR
// tech_BasicTools := 82 ;
20644: LD_ADDR_EXP 89
20648: PUSH
20649: LD_INT 82
20651: ST_TO_ADDR
// tech_Cargo := 83 ;
20652: LD_ADDR_EXP 90
20656: PUSH
20657: LD_INT 83
20659: ST_TO_ADDR
// tech_Track := 84 ;
20660: LD_ADDR_EXP 91
20664: PUSH
20665: LD_INT 84
20667: ST_TO_ADDR
// tech_Crane := 85 ;
20668: LD_ADDR_EXP 92
20672: PUSH
20673: LD_INT 85
20675: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20676: LD_ADDR_EXP 93
20680: PUSH
20681: LD_INT 86
20683: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20684: LD_ADDR_EXP 94
20688: PUSH
20689: LD_INT 87
20691: ST_TO_ADDR
// class_mastodont := 31 ;
20692: LD_ADDR_EXP 95
20696: PUSH
20697: LD_INT 31
20699: ST_TO_ADDR
// class_horse := 21 ;
20700: LD_ADDR_EXP 96
20704: PUSH
20705: LD_INT 21
20707: ST_TO_ADDR
// end ;
20708: LD_VAR 0 1
20712: RET
// every 1 do
20713: GO 20715
20715: DISABLE
// InitGlobalVariables ; end_of_file
20716: CALL 20561 0 0
20720: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20721: LD_INT 0
20723: PPUSH
20724: PPUSH
// if exist_mode then
20725: LD_VAR 0 2
20729: IFFALSE 20754
// unit := CreateCharacter ( prefix & ident ) else
20731: LD_ADDR_VAR 0 5
20735: PUSH
20736: LD_VAR 0 3
20740: PUSH
20741: LD_VAR 0 1
20745: STR
20746: PPUSH
20747: CALL_OW 34
20751: ST_TO_ADDR
20752: GO 20769
// unit := NewCharacter ( ident ) ;
20754: LD_ADDR_VAR 0 5
20758: PUSH
20759: LD_VAR 0 1
20763: PPUSH
20764: CALL_OW 25
20768: ST_TO_ADDR
// result := unit ;
20769: LD_ADDR_VAR 0 4
20773: PUSH
20774: LD_VAR 0 5
20778: ST_TO_ADDR
// end ;
20779: LD_VAR 0 4
20783: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20784: LD_INT 0
20786: PPUSH
20787: PPUSH
// if not side or not nation then
20788: LD_VAR 0 1
20792: NOT
20793: PUSH
20794: LD_VAR 0 2
20798: NOT
20799: OR
20800: IFFALSE 20804
// exit ;
20802: GO 21568
// case nation of nation_american :
20804: LD_VAR 0 2
20808: PUSH
20809: LD_INT 1
20811: DOUBLE
20812: EQUAL
20813: IFTRUE 20817
20815: GO 21031
20817: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20818: LD_ADDR_VAR 0 4
20822: PUSH
20823: LD_INT 35
20825: PUSH
20826: LD_INT 45
20828: PUSH
20829: LD_INT 46
20831: PUSH
20832: LD_INT 47
20834: PUSH
20835: LD_INT 82
20837: PUSH
20838: LD_INT 83
20840: PUSH
20841: LD_INT 84
20843: PUSH
20844: LD_INT 85
20846: PUSH
20847: LD_INT 86
20849: PUSH
20850: LD_INT 1
20852: PUSH
20853: LD_INT 2
20855: PUSH
20856: LD_INT 6
20858: PUSH
20859: LD_INT 15
20861: PUSH
20862: LD_INT 16
20864: PUSH
20865: LD_INT 7
20867: PUSH
20868: LD_INT 12
20870: PUSH
20871: LD_INT 13
20873: PUSH
20874: LD_INT 10
20876: PUSH
20877: LD_INT 14
20879: PUSH
20880: LD_INT 20
20882: PUSH
20883: LD_INT 21
20885: PUSH
20886: LD_INT 22
20888: PUSH
20889: LD_INT 25
20891: PUSH
20892: LD_INT 32
20894: PUSH
20895: LD_INT 27
20897: PUSH
20898: LD_INT 36
20900: PUSH
20901: LD_INT 69
20903: PUSH
20904: LD_INT 39
20906: PUSH
20907: LD_INT 34
20909: PUSH
20910: LD_INT 40
20912: PUSH
20913: LD_INT 48
20915: PUSH
20916: LD_INT 49
20918: PUSH
20919: LD_INT 50
20921: PUSH
20922: LD_INT 51
20924: PUSH
20925: LD_INT 52
20927: PUSH
20928: LD_INT 53
20930: PUSH
20931: LD_INT 54
20933: PUSH
20934: LD_INT 55
20936: PUSH
20937: LD_INT 56
20939: PUSH
20940: LD_INT 57
20942: PUSH
20943: LD_INT 58
20945: PUSH
20946: LD_INT 59
20948: PUSH
20949: LD_INT 60
20951: PUSH
20952: LD_INT 61
20954: PUSH
20955: LD_INT 62
20957: PUSH
20958: LD_INT 80
20960: PUSH
20961: LD_INT 82
20963: PUSH
20964: LD_INT 83
20966: PUSH
20967: LD_INT 84
20969: PUSH
20970: LD_INT 85
20972: PUSH
20973: LD_INT 86
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: ST_TO_ADDR
21029: GO 21492
21031: LD_INT 2
21033: DOUBLE
21034: EQUAL
21035: IFTRUE 21039
21037: GO 21261
21039: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21040: LD_ADDR_VAR 0 4
21044: PUSH
21045: LD_INT 35
21047: PUSH
21048: LD_INT 45
21050: PUSH
21051: LD_INT 46
21053: PUSH
21054: LD_INT 47
21056: PUSH
21057: LD_INT 82
21059: PUSH
21060: LD_INT 83
21062: PUSH
21063: LD_INT 84
21065: PUSH
21066: LD_INT 85
21068: PUSH
21069: LD_INT 87
21071: PUSH
21072: LD_INT 70
21074: PUSH
21075: LD_INT 1
21077: PUSH
21078: LD_INT 11
21080: PUSH
21081: LD_INT 3
21083: PUSH
21084: LD_INT 4
21086: PUSH
21087: LD_INT 5
21089: PUSH
21090: LD_INT 6
21092: PUSH
21093: LD_INT 15
21095: PUSH
21096: LD_INT 18
21098: PUSH
21099: LD_INT 7
21101: PUSH
21102: LD_INT 17
21104: PUSH
21105: LD_INT 8
21107: PUSH
21108: LD_INT 20
21110: PUSH
21111: LD_INT 21
21113: PUSH
21114: LD_INT 22
21116: PUSH
21117: LD_INT 72
21119: PUSH
21120: LD_INT 26
21122: PUSH
21123: LD_INT 69
21125: PUSH
21126: LD_INT 39
21128: PUSH
21129: LD_INT 40
21131: PUSH
21132: LD_INT 41
21134: PUSH
21135: LD_INT 42
21137: PUSH
21138: LD_INT 43
21140: PUSH
21141: LD_INT 48
21143: PUSH
21144: LD_INT 49
21146: PUSH
21147: LD_INT 50
21149: PUSH
21150: LD_INT 51
21152: PUSH
21153: LD_INT 52
21155: PUSH
21156: LD_INT 53
21158: PUSH
21159: LD_INT 54
21161: PUSH
21162: LD_INT 55
21164: PUSH
21165: LD_INT 56
21167: PUSH
21168: LD_INT 60
21170: PUSH
21171: LD_INT 61
21173: PUSH
21174: LD_INT 62
21176: PUSH
21177: LD_INT 66
21179: PUSH
21180: LD_INT 67
21182: PUSH
21183: LD_INT 68
21185: PUSH
21186: LD_INT 81
21188: PUSH
21189: LD_INT 82
21191: PUSH
21192: LD_INT 83
21194: PUSH
21195: LD_INT 84
21197: PUSH
21198: LD_INT 85
21200: PUSH
21201: LD_INT 87
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: ST_TO_ADDR
21259: GO 21492
21261: LD_INT 3
21263: DOUBLE
21264: EQUAL
21265: IFTRUE 21269
21267: GO 21491
21269: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21270: LD_ADDR_VAR 0 4
21274: PUSH
21275: LD_INT 46
21277: PUSH
21278: LD_INT 47
21280: PUSH
21281: LD_INT 1
21283: PUSH
21284: LD_INT 2
21286: PUSH
21287: LD_INT 82
21289: PUSH
21290: LD_INT 83
21292: PUSH
21293: LD_INT 84
21295: PUSH
21296: LD_INT 85
21298: PUSH
21299: LD_INT 86
21301: PUSH
21302: LD_INT 11
21304: PUSH
21305: LD_INT 9
21307: PUSH
21308: LD_INT 20
21310: PUSH
21311: LD_INT 19
21313: PUSH
21314: LD_INT 21
21316: PUSH
21317: LD_INT 24
21319: PUSH
21320: LD_INT 22
21322: PUSH
21323: LD_INT 25
21325: PUSH
21326: LD_INT 28
21328: PUSH
21329: LD_INT 29
21331: PUSH
21332: LD_INT 30
21334: PUSH
21335: LD_INT 31
21337: PUSH
21338: LD_INT 37
21340: PUSH
21341: LD_INT 38
21343: PUSH
21344: LD_INT 32
21346: PUSH
21347: LD_INT 27
21349: PUSH
21350: LD_INT 33
21352: PUSH
21353: LD_INT 69
21355: PUSH
21356: LD_INT 39
21358: PUSH
21359: LD_INT 34
21361: PUSH
21362: LD_INT 40
21364: PUSH
21365: LD_INT 71
21367: PUSH
21368: LD_INT 23
21370: PUSH
21371: LD_INT 44
21373: PUSH
21374: LD_INT 48
21376: PUSH
21377: LD_INT 49
21379: PUSH
21380: LD_INT 50
21382: PUSH
21383: LD_INT 51
21385: PUSH
21386: LD_INT 52
21388: PUSH
21389: LD_INT 53
21391: PUSH
21392: LD_INT 54
21394: PUSH
21395: LD_INT 55
21397: PUSH
21398: LD_INT 56
21400: PUSH
21401: LD_INT 57
21403: PUSH
21404: LD_INT 58
21406: PUSH
21407: LD_INT 59
21409: PUSH
21410: LD_INT 63
21412: PUSH
21413: LD_INT 64
21415: PUSH
21416: LD_INT 65
21418: PUSH
21419: LD_INT 82
21421: PUSH
21422: LD_INT 83
21424: PUSH
21425: LD_INT 84
21427: PUSH
21428: LD_INT 85
21430: PUSH
21431: LD_INT 86
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: ST_TO_ADDR
21489: GO 21492
21491: POP
// if state > - 1 and state < 3 then
21492: LD_VAR 0 3
21496: PUSH
21497: LD_INT 1
21499: NEG
21500: GREATER
21501: PUSH
21502: LD_VAR 0 3
21506: PUSH
21507: LD_INT 3
21509: LESS
21510: AND
21511: IFFALSE 21568
// for i in result do
21513: LD_ADDR_VAR 0 5
21517: PUSH
21518: LD_VAR 0 4
21522: PUSH
21523: FOR_IN
21524: IFFALSE 21566
// if GetTech ( i , side ) <> state then
21526: LD_VAR 0 5
21530: PPUSH
21531: LD_VAR 0 1
21535: PPUSH
21536: CALL_OW 321
21540: PUSH
21541: LD_VAR 0 3
21545: NONEQUAL
21546: IFFALSE 21564
// result := result diff i ;
21548: LD_ADDR_VAR 0 4
21552: PUSH
21553: LD_VAR 0 4
21557: PUSH
21558: LD_VAR 0 5
21562: DIFF
21563: ST_TO_ADDR
21564: GO 21523
21566: POP
21567: POP
// end ;
21568: LD_VAR 0 4
21572: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21573: LD_INT 0
21575: PPUSH
21576: PPUSH
21577: PPUSH
// result := true ;
21578: LD_ADDR_VAR 0 3
21582: PUSH
21583: LD_INT 1
21585: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21586: LD_ADDR_VAR 0 5
21590: PUSH
21591: LD_VAR 0 2
21595: PPUSH
21596: CALL_OW 480
21600: ST_TO_ADDR
// if not tmp then
21601: LD_VAR 0 5
21605: NOT
21606: IFFALSE 21610
// exit ;
21608: GO 21659
// for i in tmp do
21610: LD_ADDR_VAR 0 4
21614: PUSH
21615: LD_VAR 0 5
21619: PUSH
21620: FOR_IN
21621: IFFALSE 21657
// if GetTech ( i , side ) <> state_researched then
21623: LD_VAR 0 4
21627: PPUSH
21628: LD_VAR 0 1
21632: PPUSH
21633: CALL_OW 321
21637: PUSH
21638: LD_INT 2
21640: NONEQUAL
21641: IFFALSE 21655
// begin result := false ;
21643: LD_ADDR_VAR 0 3
21647: PUSH
21648: LD_INT 0
21650: ST_TO_ADDR
// exit ;
21651: POP
21652: POP
21653: GO 21659
// end ;
21655: GO 21620
21657: POP
21658: POP
// end ;
21659: LD_VAR 0 3
21663: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21664: LD_INT 0
21666: PPUSH
21667: PPUSH
21668: PPUSH
21669: PPUSH
21670: PPUSH
21671: PPUSH
21672: PPUSH
21673: PPUSH
21674: PPUSH
21675: PPUSH
21676: PPUSH
21677: PPUSH
21678: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21679: LD_VAR 0 1
21683: NOT
21684: PUSH
21685: LD_VAR 0 1
21689: PPUSH
21690: CALL_OW 257
21694: PUSH
21695: LD_INT 9
21697: NONEQUAL
21698: OR
21699: IFFALSE 21703
// exit ;
21701: GO 22276
// side := GetSide ( unit ) ;
21703: LD_ADDR_VAR 0 9
21707: PUSH
21708: LD_VAR 0 1
21712: PPUSH
21713: CALL_OW 255
21717: ST_TO_ADDR
// tech_space := tech_spacanom ;
21718: LD_ADDR_VAR 0 12
21722: PUSH
21723: LD_INT 29
21725: ST_TO_ADDR
// tech_time := tech_taurad ;
21726: LD_ADDR_VAR 0 13
21730: PUSH
21731: LD_INT 28
21733: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21734: LD_ADDR_VAR 0 11
21738: PUSH
21739: LD_VAR 0 1
21743: PPUSH
21744: CALL_OW 310
21748: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21749: LD_VAR 0 11
21753: PPUSH
21754: CALL_OW 247
21758: PUSH
21759: LD_INT 2
21761: EQUAL
21762: IFFALSE 21766
// exit ;
21764: GO 22276
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21766: LD_ADDR_VAR 0 8
21770: PUSH
21771: LD_INT 81
21773: PUSH
21774: LD_VAR 0 9
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 3
21785: PUSH
21786: LD_INT 21
21788: PUSH
21789: LD_INT 3
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PPUSH
21804: CALL_OW 69
21808: ST_TO_ADDR
// if not tmp then
21809: LD_VAR 0 8
21813: NOT
21814: IFFALSE 21818
// exit ;
21816: GO 22276
// if in_unit then
21818: LD_VAR 0 11
21822: IFFALSE 21846
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21824: LD_ADDR_VAR 0 10
21828: PUSH
21829: LD_VAR 0 8
21833: PPUSH
21834: LD_VAR 0 11
21838: PPUSH
21839: CALL_OW 74
21843: ST_TO_ADDR
21844: GO 21866
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21846: LD_ADDR_VAR 0 10
21850: PUSH
21851: LD_VAR 0 8
21855: PPUSH
21856: LD_VAR 0 1
21860: PPUSH
21861: CALL_OW 74
21865: ST_TO_ADDR
// if not enemy then
21866: LD_VAR 0 10
21870: NOT
21871: IFFALSE 21875
// exit ;
21873: GO 22276
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21875: LD_VAR 0 11
21879: PUSH
21880: LD_VAR 0 11
21884: PPUSH
21885: LD_VAR 0 10
21889: PPUSH
21890: CALL_OW 296
21894: PUSH
21895: LD_INT 13
21897: GREATER
21898: AND
21899: PUSH
21900: LD_VAR 0 1
21904: PPUSH
21905: LD_VAR 0 10
21909: PPUSH
21910: CALL_OW 296
21914: PUSH
21915: LD_INT 12
21917: GREATER
21918: OR
21919: IFFALSE 21923
// exit ;
21921: GO 22276
// missile := [ 1 ] ;
21923: LD_ADDR_VAR 0 14
21927: PUSH
21928: LD_INT 1
21930: PUSH
21931: EMPTY
21932: LIST
21933: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21934: LD_VAR 0 9
21938: PPUSH
21939: LD_VAR 0 12
21943: PPUSH
21944: CALL_OW 325
21948: IFFALSE 21977
// missile := Insert ( missile , missile + 1 , 2 ) ;
21950: LD_ADDR_VAR 0 14
21954: PUSH
21955: LD_VAR 0 14
21959: PPUSH
21960: LD_VAR 0 14
21964: PUSH
21965: LD_INT 1
21967: PLUS
21968: PPUSH
21969: LD_INT 2
21971: PPUSH
21972: CALL_OW 2
21976: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21977: LD_VAR 0 9
21981: PPUSH
21982: LD_VAR 0 13
21986: PPUSH
21987: CALL_OW 325
21991: PUSH
21992: LD_VAR 0 10
21996: PPUSH
21997: CALL_OW 255
22001: PPUSH
22002: LD_VAR 0 13
22006: PPUSH
22007: CALL_OW 325
22011: NOT
22012: AND
22013: IFFALSE 22042
// missile := Insert ( missile , missile + 1 , 3 ) ;
22015: LD_ADDR_VAR 0 14
22019: PUSH
22020: LD_VAR 0 14
22024: PPUSH
22025: LD_VAR 0 14
22029: PUSH
22030: LD_INT 1
22032: PLUS
22033: PPUSH
22034: LD_INT 3
22036: PPUSH
22037: CALL_OW 2
22041: ST_TO_ADDR
// if missile < 2 then
22042: LD_VAR 0 14
22046: PUSH
22047: LD_INT 2
22049: LESS
22050: IFFALSE 22054
// exit ;
22052: GO 22276
// x := GetX ( enemy ) ;
22054: LD_ADDR_VAR 0 4
22058: PUSH
22059: LD_VAR 0 10
22063: PPUSH
22064: CALL_OW 250
22068: ST_TO_ADDR
// y := GetY ( enemy ) ;
22069: LD_ADDR_VAR 0 5
22073: PUSH
22074: LD_VAR 0 10
22078: PPUSH
22079: CALL_OW 251
22083: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22084: LD_ADDR_VAR 0 6
22088: PUSH
22089: LD_VAR 0 4
22093: PUSH
22094: LD_INT 1
22096: NEG
22097: PPUSH
22098: LD_INT 1
22100: PPUSH
22101: CALL_OW 12
22105: PLUS
22106: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22107: LD_ADDR_VAR 0 7
22111: PUSH
22112: LD_VAR 0 5
22116: PUSH
22117: LD_INT 1
22119: NEG
22120: PPUSH
22121: LD_INT 1
22123: PPUSH
22124: CALL_OW 12
22128: PLUS
22129: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22130: LD_VAR 0 6
22134: PPUSH
22135: LD_VAR 0 7
22139: PPUSH
22140: CALL_OW 488
22144: NOT
22145: IFFALSE 22167
// begin _x := x ;
22147: LD_ADDR_VAR 0 6
22151: PUSH
22152: LD_VAR 0 4
22156: ST_TO_ADDR
// _y := y ;
22157: LD_ADDR_VAR 0 7
22161: PUSH
22162: LD_VAR 0 5
22166: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22167: LD_ADDR_VAR 0 3
22171: PUSH
22172: LD_INT 1
22174: PPUSH
22175: LD_VAR 0 14
22179: PPUSH
22180: CALL_OW 12
22184: ST_TO_ADDR
// case i of 1 :
22185: LD_VAR 0 3
22189: PUSH
22190: LD_INT 1
22192: DOUBLE
22193: EQUAL
22194: IFTRUE 22198
22196: GO 22215
22198: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22199: LD_VAR 0 1
22203: PPUSH
22204: LD_VAR 0 10
22208: PPUSH
22209: CALL_OW 115
22213: GO 22276
22215: LD_INT 2
22217: DOUBLE
22218: EQUAL
22219: IFTRUE 22223
22221: GO 22245
22223: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22224: LD_VAR 0 1
22228: PPUSH
22229: LD_VAR 0 6
22233: PPUSH
22234: LD_VAR 0 7
22238: PPUSH
22239: CALL_OW 153
22243: GO 22276
22245: LD_INT 3
22247: DOUBLE
22248: EQUAL
22249: IFTRUE 22253
22251: GO 22275
22253: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22254: LD_VAR 0 1
22258: PPUSH
22259: LD_VAR 0 6
22263: PPUSH
22264: LD_VAR 0 7
22268: PPUSH
22269: CALL_OW 154
22273: GO 22276
22275: POP
// end ;
22276: LD_VAR 0 2
22280: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22281: LD_INT 0
22283: PPUSH
22284: PPUSH
22285: PPUSH
22286: PPUSH
22287: PPUSH
22288: PPUSH
// if not unit or not building then
22289: LD_VAR 0 1
22293: NOT
22294: PUSH
22295: LD_VAR 0 2
22299: NOT
22300: OR
22301: IFFALSE 22305
// exit ;
22303: GO 22463
// x := GetX ( building ) ;
22305: LD_ADDR_VAR 0 5
22309: PUSH
22310: LD_VAR 0 2
22314: PPUSH
22315: CALL_OW 250
22319: ST_TO_ADDR
// y := GetY ( building ) ;
22320: LD_ADDR_VAR 0 6
22324: PUSH
22325: LD_VAR 0 2
22329: PPUSH
22330: CALL_OW 251
22334: ST_TO_ADDR
// for i = 0 to 5 do
22335: LD_ADDR_VAR 0 4
22339: PUSH
22340: DOUBLE
22341: LD_INT 0
22343: DEC
22344: ST_TO_ADDR
22345: LD_INT 5
22347: PUSH
22348: FOR_TO
22349: IFFALSE 22461
// begin _x := ShiftX ( x , i , 3 ) ;
22351: LD_ADDR_VAR 0 7
22355: PUSH
22356: LD_VAR 0 5
22360: PPUSH
22361: LD_VAR 0 4
22365: PPUSH
22366: LD_INT 3
22368: PPUSH
22369: CALL_OW 272
22373: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22374: LD_ADDR_VAR 0 8
22378: PUSH
22379: LD_VAR 0 6
22383: PPUSH
22384: LD_VAR 0 4
22388: PPUSH
22389: LD_INT 3
22391: PPUSH
22392: CALL_OW 273
22396: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22397: LD_VAR 0 7
22401: PPUSH
22402: LD_VAR 0 8
22406: PPUSH
22407: CALL_OW 488
22411: NOT
22412: IFFALSE 22416
// continue ;
22414: GO 22348
// if HexInfo ( _x , _y ) = 0 then
22416: LD_VAR 0 7
22420: PPUSH
22421: LD_VAR 0 8
22425: PPUSH
22426: CALL_OW 428
22430: PUSH
22431: LD_INT 0
22433: EQUAL
22434: IFFALSE 22459
// begin ComMoveXY ( unit , _x , _y ) ;
22436: LD_VAR 0 1
22440: PPUSH
22441: LD_VAR 0 7
22445: PPUSH
22446: LD_VAR 0 8
22450: PPUSH
22451: CALL_OW 111
// exit ;
22455: POP
22456: POP
22457: GO 22463
// end ; end ;
22459: GO 22348
22461: POP
22462: POP
// end ;
22463: LD_VAR 0 3
22467: RET
// export function ScanBase ( side , base_area ) ; begin
22468: LD_INT 0
22470: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22471: LD_ADDR_VAR 0 3
22475: PUSH
22476: LD_VAR 0 2
22480: PPUSH
22481: LD_INT 81
22483: PUSH
22484: LD_VAR 0 1
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PPUSH
22493: CALL_OW 70
22497: ST_TO_ADDR
// end ;
22498: LD_VAR 0 3
22502: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22503: LD_INT 0
22505: PPUSH
22506: PPUSH
22507: PPUSH
22508: PPUSH
// result := false ;
22509: LD_ADDR_VAR 0 2
22513: PUSH
22514: LD_INT 0
22516: ST_TO_ADDR
// side := GetSide ( unit ) ;
22517: LD_ADDR_VAR 0 3
22521: PUSH
22522: LD_VAR 0 1
22526: PPUSH
22527: CALL_OW 255
22531: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22532: LD_ADDR_VAR 0 4
22536: PUSH
22537: LD_VAR 0 1
22541: PPUSH
22542: CALL_OW 248
22546: ST_TO_ADDR
// case nat of 1 :
22547: LD_VAR 0 4
22551: PUSH
22552: LD_INT 1
22554: DOUBLE
22555: EQUAL
22556: IFTRUE 22560
22558: GO 22571
22560: POP
// tech := tech_lassight ; 2 :
22561: LD_ADDR_VAR 0 5
22565: PUSH
22566: LD_INT 12
22568: ST_TO_ADDR
22569: GO 22610
22571: LD_INT 2
22573: DOUBLE
22574: EQUAL
22575: IFTRUE 22579
22577: GO 22590
22579: POP
// tech := tech_mortar ; 3 :
22580: LD_ADDR_VAR 0 5
22584: PUSH
22585: LD_INT 41
22587: ST_TO_ADDR
22588: GO 22610
22590: LD_INT 3
22592: DOUBLE
22593: EQUAL
22594: IFTRUE 22598
22596: GO 22609
22598: POP
// tech := tech_bazooka ; end ;
22599: LD_ADDR_VAR 0 5
22603: PUSH
22604: LD_INT 44
22606: ST_TO_ADDR
22607: GO 22610
22609: POP
// if Researched ( side , tech ) then
22610: LD_VAR 0 3
22614: PPUSH
22615: LD_VAR 0 5
22619: PPUSH
22620: CALL_OW 325
22624: IFFALSE 22651
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22626: LD_ADDR_VAR 0 2
22630: PUSH
22631: LD_INT 5
22633: PUSH
22634: LD_INT 8
22636: PUSH
22637: LD_INT 9
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: LIST
22644: PUSH
22645: LD_VAR 0 4
22649: ARRAY
22650: ST_TO_ADDR
// end ;
22651: LD_VAR 0 2
22655: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22656: LD_INT 0
22658: PPUSH
22659: PPUSH
22660: PPUSH
// if not mines then
22661: LD_VAR 0 2
22665: NOT
22666: IFFALSE 22670
// exit ;
22668: GO 22814
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22670: LD_ADDR_VAR 0 5
22674: PUSH
22675: LD_INT 81
22677: PUSH
22678: LD_VAR 0 1
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 3
22689: PUSH
22690: LD_INT 21
22692: PUSH
22693: LD_INT 3
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PPUSH
22708: CALL_OW 69
22712: ST_TO_ADDR
// for i in mines do
22713: LD_ADDR_VAR 0 4
22717: PUSH
22718: LD_VAR 0 2
22722: PUSH
22723: FOR_IN
22724: IFFALSE 22812
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22726: LD_VAR 0 4
22730: PUSH
22731: LD_INT 1
22733: ARRAY
22734: PPUSH
22735: LD_VAR 0 4
22739: PUSH
22740: LD_INT 2
22742: ARRAY
22743: PPUSH
22744: CALL_OW 458
22748: NOT
22749: IFFALSE 22753
// continue ;
22751: GO 22723
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22753: LD_VAR 0 4
22757: PUSH
22758: LD_INT 1
22760: ARRAY
22761: PPUSH
22762: LD_VAR 0 4
22766: PUSH
22767: LD_INT 2
22769: ARRAY
22770: PPUSH
22771: CALL_OW 428
22775: PUSH
22776: LD_VAR 0 5
22780: IN
22781: IFFALSE 22810
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22783: LD_VAR 0 4
22787: PUSH
22788: LD_INT 1
22790: ARRAY
22791: PPUSH
22792: LD_VAR 0 4
22796: PUSH
22797: LD_INT 2
22799: ARRAY
22800: PPUSH
22801: LD_VAR 0 1
22805: PPUSH
22806: CALL_OW 456
// end ;
22810: GO 22723
22812: POP
22813: POP
// end ;
22814: LD_VAR 0 3
22818: RET
// export function Count ( array ) ; var i ; begin
22819: LD_INT 0
22821: PPUSH
22822: PPUSH
// result := 0 ;
22823: LD_ADDR_VAR 0 2
22827: PUSH
22828: LD_INT 0
22830: ST_TO_ADDR
// for i in array do
22831: LD_ADDR_VAR 0 3
22835: PUSH
22836: LD_VAR 0 1
22840: PUSH
22841: FOR_IN
22842: IFFALSE 22866
// if i then
22844: LD_VAR 0 3
22848: IFFALSE 22864
// result := result + 1 ;
22850: LD_ADDR_VAR 0 2
22854: PUSH
22855: LD_VAR 0 2
22859: PUSH
22860: LD_INT 1
22862: PLUS
22863: ST_TO_ADDR
22864: GO 22841
22866: POP
22867: POP
// end ;
22868: LD_VAR 0 2
22872: RET
// export function IsEmpty ( building ) ; begin
22873: LD_INT 0
22875: PPUSH
// if not building then
22876: LD_VAR 0 1
22880: NOT
22881: IFFALSE 22885
// exit ;
22883: GO 22928
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22885: LD_ADDR_VAR 0 2
22889: PUSH
22890: LD_VAR 0 1
22894: PUSH
22895: LD_INT 22
22897: PUSH
22898: LD_VAR 0 1
22902: PPUSH
22903: CALL_OW 255
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 58
22914: PUSH
22915: EMPTY
22916: LIST
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PPUSH
22922: CALL_OW 69
22926: IN
22927: ST_TO_ADDR
// end ;
22928: LD_VAR 0 2
22932: RET
// export function IsNotFull ( building ) ; begin
22933: LD_INT 0
22935: PPUSH
// if not building then
22936: LD_VAR 0 1
22940: NOT
22941: IFFALSE 22945
// exit ;
22943: GO 22964
// result := UnitsInside ( building ) < 6 ;
22945: LD_ADDR_VAR 0 2
22949: PUSH
22950: LD_VAR 0 1
22954: PPUSH
22955: CALL_OW 313
22959: PUSH
22960: LD_INT 6
22962: LESS
22963: ST_TO_ADDR
// end ;
22964: LD_VAR 0 2
22968: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22969: LD_INT 0
22971: PPUSH
22972: PPUSH
22973: PPUSH
22974: PPUSH
// tmp := [ ] ;
22975: LD_ADDR_VAR 0 3
22979: PUSH
22980: EMPTY
22981: ST_TO_ADDR
// list := [ ] ;
22982: LD_ADDR_VAR 0 5
22986: PUSH
22987: EMPTY
22988: ST_TO_ADDR
// for i = 16 to 25 do
22989: LD_ADDR_VAR 0 4
22993: PUSH
22994: DOUBLE
22995: LD_INT 16
22997: DEC
22998: ST_TO_ADDR
22999: LD_INT 25
23001: PUSH
23002: FOR_TO
23003: IFFALSE 23076
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23005: LD_ADDR_VAR 0 3
23009: PUSH
23010: LD_VAR 0 3
23014: PUSH
23015: LD_INT 22
23017: PUSH
23018: LD_VAR 0 1
23022: PPUSH
23023: CALL_OW 255
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 91
23034: PUSH
23035: LD_VAR 0 1
23039: PUSH
23040: LD_INT 6
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 30
23050: PUSH
23051: LD_VAR 0 4
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: LIST
23064: PUSH
23065: EMPTY
23066: LIST
23067: PPUSH
23068: CALL_OW 69
23072: ADD
23073: ST_TO_ADDR
23074: GO 23002
23076: POP
23077: POP
// for i = 1 to tmp do
23078: LD_ADDR_VAR 0 4
23082: PUSH
23083: DOUBLE
23084: LD_INT 1
23086: DEC
23087: ST_TO_ADDR
23088: LD_VAR 0 3
23092: PUSH
23093: FOR_TO
23094: IFFALSE 23182
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23096: LD_ADDR_VAR 0 5
23100: PUSH
23101: LD_VAR 0 5
23105: PUSH
23106: LD_VAR 0 3
23110: PUSH
23111: LD_VAR 0 4
23115: ARRAY
23116: PPUSH
23117: CALL_OW 266
23121: PUSH
23122: LD_VAR 0 3
23126: PUSH
23127: LD_VAR 0 4
23131: ARRAY
23132: PPUSH
23133: CALL_OW 250
23137: PUSH
23138: LD_VAR 0 3
23142: PUSH
23143: LD_VAR 0 4
23147: ARRAY
23148: PPUSH
23149: CALL_OW 251
23153: PUSH
23154: LD_VAR 0 3
23158: PUSH
23159: LD_VAR 0 4
23163: ARRAY
23164: PPUSH
23165: CALL_OW 254
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: PUSH
23176: EMPTY
23177: LIST
23178: ADD
23179: ST_TO_ADDR
23180: GO 23093
23182: POP
23183: POP
// result := list ;
23184: LD_ADDR_VAR 0 2
23188: PUSH
23189: LD_VAR 0 5
23193: ST_TO_ADDR
// end ;
23194: LD_VAR 0 2
23198: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23199: LD_INT 0
23201: PPUSH
23202: PPUSH
23203: PPUSH
23204: PPUSH
23205: PPUSH
23206: PPUSH
23207: PPUSH
// if not factory then
23208: LD_VAR 0 1
23212: NOT
23213: IFFALSE 23217
// exit ;
23215: GO 23810
// if control = control_apeman then
23217: LD_VAR 0 4
23221: PUSH
23222: LD_INT 5
23224: EQUAL
23225: IFFALSE 23334
// begin tmp := UnitsInside ( factory ) ;
23227: LD_ADDR_VAR 0 8
23231: PUSH
23232: LD_VAR 0 1
23236: PPUSH
23237: CALL_OW 313
23241: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23242: LD_VAR 0 8
23246: PPUSH
23247: LD_INT 25
23249: PUSH
23250: LD_INT 12
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PPUSH
23257: CALL_OW 72
23261: NOT
23262: IFFALSE 23272
// control := control_manual ;
23264: LD_ADDR_VAR 0 4
23268: PUSH
23269: LD_INT 1
23271: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23272: LD_ADDR_VAR 0 8
23276: PUSH
23277: LD_VAR 0 1
23281: PPUSH
23282: CALL 22969 0 1
23286: ST_TO_ADDR
// if tmp then
23287: LD_VAR 0 8
23291: IFFALSE 23334
// begin for i in tmp do
23293: LD_ADDR_VAR 0 7
23297: PUSH
23298: LD_VAR 0 8
23302: PUSH
23303: FOR_IN
23304: IFFALSE 23332
// if i [ 1 ] = b_ext_radio then
23306: LD_VAR 0 7
23310: PUSH
23311: LD_INT 1
23313: ARRAY
23314: PUSH
23315: LD_INT 22
23317: EQUAL
23318: IFFALSE 23330
// begin control := control_remote ;
23320: LD_ADDR_VAR 0 4
23324: PUSH
23325: LD_INT 2
23327: ST_TO_ADDR
// break ;
23328: GO 23332
// end ;
23330: GO 23303
23332: POP
23333: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23334: LD_VAR 0 1
23338: PPUSH
23339: LD_VAR 0 2
23343: PPUSH
23344: LD_VAR 0 3
23348: PPUSH
23349: LD_VAR 0 4
23353: PPUSH
23354: LD_VAR 0 5
23358: PPUSH
23359: CALL_OW 448
23363: IFFALSE 23398
// begin result := [ chassis , engine , control , weapon ] ;
23365: LD_ADDR_VAR 0 6
23369: PUSH
23370: LD_VAR 0 2
23374: PUSH
23375: LD_VAR 0 3
23379: PUSH
23380: LD_VAR 0 4
23384: PUSH
23385: LD_VAR 0 5
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: ST_TO_ADDR
// exit ;
23396: GO 23810
// end ; _chassis := AvailableChassisList ( factory ) ;
23398: LD_ADDR_VAR 0 9
23402: PUSH
23403: LD_VAR 0 1
23407: PPUSH
23408: CALL_OW 475
23412: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23413: LD_ADDR_VAR 0 11
23417: PUSH
23418: LD_VAR 0 1
23422: PPUSH
23423: CALL_OW 476
23427: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23428: LD_ADDR_VAR 0 12
23432: PUSH
23433: LD_VAR 0 1
23437: PPUSH
23438: CALL_OW 477
23442: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23443: LD_ADDR_VAR 0 10
23447: PUSH
23448: LD_VAR 0 1
23452: PPUSH
23453: CALL_OW 478
23457: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23458: LD_VAR 0 9
23462: NOT
23463: PUSH
23464: LD_VAR 0 11
23468: NOT
23469: OR
23470: PUSH
23471: LD_VAR 0 12
23475: NOT
23476: OR
23477: PUSH
23478: LD_VAR 0 10
23482: NOT
23483: OR
23484: IFFALSE 23519
// begin result := [ chassis , engine , control , weapon ] ;
23486: LD_ADDR_VAR 0 6
23490: PUSH
23491: LD_VAR 0 2
23495: PUSH
23496: LD_VAR 0 3
23500: PUSH
23501: LD_VAR 0 4
23505: PUSH
23506: LD_VAR 0 5
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: ST_TO_ADDR
// exit ;
23517: GO 23810
// end ; if not chassis in _chassis then
23519: LD_VAR 0 2
23523: PUSH
23524: LD_VAR 0 9
23528: IN
23529: NOT
23530: IFFALSE 23556
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23532: LD_ADDR_VAR 0 2
23536: PUSH
23537: LD_VAR 0 9
23541: PUSH
23542: LD_INT 1
23544: PPUSH
23545: LD_VAR 0 9
23549: PPUSH
23550: CALL_OW 12
23554: ARRAY
23555: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23556: LD_VAR 0 2
23560: PPUSH
23561: LD_VAR 0 3
23565: PPUSH
23566: CALL 23815 0 2
23570: NOT
23571: IFFALSE 23630
// repeat engine := _engine [ 1 ] ;
23573: LD_ADDR_VAR 0 3
23577: PUSH
23578: LD_VAR 0 11
23582: PUSH
23583: LD_INT 1
23585: ARRAY
23586: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23587: LD_ADDR_VAR 0 11
23591: PUSH
23592: LD_VAR 0 11
23596: PPUSH
23597: LD_INT 1
23599: PPUSH
23600: CALL_OW 3
23604: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23605: LD_VAR 0 2
23609: PPUSH
23610: LD_VAR 0 3
23614: PPUSH
23615: CALL 23815 0 2
23619: PUSH
23620: LD_VAR 0 11
23624: PUSH
23625: EMPTY
23626: EQUAL
23627: OR
23628: IFFALSE 23573
// if not control in _control then
23630: LD_VAR 0 4
23634: PUSH
23635: LD_VAR 0 12
23639: IN
23640: NOT
23641: IFFALSE 23667
// control := _control [ rand ( 1 , _control ) ] ;
23643: LD_ADDR_VAR 0 4
23647: PUSH
23648: LD_VAR 0 12
23652: PUSH
23653: LD_INT 1
23655: PPUSH
23656: LD_VAR 0 12
23660: PPUSH
23661: CALL_OW 12
23665: ARRAY
23666: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23667: LD_VAR 0 2
23671: PPUSH
23672: LD_VAR 0 5
23676: PPUSH
23677: CALL 24035 0 2
23681: NOT
23682: IFFALSE 23741
// repeat weapon := _weapon [ 1 ] ;
23684: LD_ADDR_VAR 0 5
23688: PUSH
23689: LD_VAR 0 10
23693: PUSH
23694: LD_INT 1
23696: ARRAY
23697: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23698: LD_ADDR_VAR 0 10
23702: PUSH
23703: LD_VAR 0 10
23707: PPUSH
23708: LD_INT 1
23710: PPUSH
23711: CALL_OW 3
23715: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23716: LD_VAR 0 2
23720: PPUSH
23721: LD_VAR 0 5
23725: PPUSH
23726: CALL 24035 0 2
23730: PUSH
23731: LD_VAR 0 10
23735: PUSH
23736: EMPTY
23737: EQUAL
23738: OR
23739: IFFALSE 23684
// result := [ ] ;
23741: LD_ADDR_VAR 0 6
23745: PUSH
23746: EMPTY
23747: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23748: LD_VAR 0 1
23752: PPUSH
23753: LD_VAR 0 2
23757: PPUSH
23758: LD_VAR 0 3
23762: PPUSH
23763: LD_VAR 0 4
23767: PPUSH
23768: LD_VAR 0 5
23772: PPUSH
23773: CALL_OW 448
23777: IFFALSE 23810
// result := [ chassis , engine , control , weapon ] ;
23779: LD_ADDR_VAR 0 6
23783: PUSH
23784: LD_VAR 0 2
23788: PUSH
23789: LD_VAR 0 3
23793: PUSH
23794: LD_VAR 0 4
23798: PUSH
23799: LD_VAR 0 5
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: ST_TO_ADDR
// end ;
23810: LD_VAR 0 6
23814: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23815: LD_INT 0
23817: PPUSH
// if not chassis or not engine then
23818: LD_VAR 0 1
23822: NOT
23823: PUSH
23824: LD_VAR 0 2
23828: NOT
23829: OR
23830: IFFALSE 23834
// exit ;
23832: GO 24030
// case engine of engine_solar :
23834: LD_VAR 0 2
23838: PUSH
23839: LD_INT 2
23841: DOUBLE
23842: EQUAL
23843: IFTRUE 23847
23845: GO 23885
23847: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23848: LD_ADDR_VAR 0 3
23852: PUSH
23853: LD_INT 11
23855: PUSH
23856: LD_INT 12
23858: PUSH
23859: LD_INT 13
23861: PUSH
23862: LD_INT 14
23864: PUSH
23865: LD_INT 1
23867: PUSH
23868: LD_INT 2
23870: PUSH
23871: LD_INT 3
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: ST_TO_ADDR
23883: GO 24014
23885: LD_INT 1
23887: DOUBLE
23888: EQUAL
23889: IFTRUE 23893
23891: GO 23955
23893: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23894: LD_ADDR_VAR 0 3
23898: PUSH
23899: LD_INT 11
23901: PUSH
23902: LD_INT 12
23904: PUSH
23905: LD_INT 13
23907: PUSH
23908: LD_INT 14
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: LD_INT 3
23919: PUSH
23920: LD_INT 4
23922: PUSH
23923: LD_INT 5
23925: PUSH
23926: LD_INT 21
23928: PUSH
23929: LD_INT 23
23931: PUSH
23932: LD_INT 22
23934: PUSH
23935: LD_INT 24
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: ST_TO_ADDR
23953: GO 24014
23955: LD_INT 3
23957: DOUBLE
23958: EQUAL
23959: IFTRUE 23963
23961: GO 24013
23963: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23964: LD_ADDR_VAR 0 3
23968: PUSH
23969: LD_INT 13
23971: PUSH
23972: LD_INT 14
23974: PUSH
23975: LD_INT 2
23977: PUSH
23978: LD_INT 3
23980: PUSH
23981: LD_INT 4
23983: PUSH
23984: LD_INT 5
23986: PUSH
23987: LD_INT 21
23989: PUSH
23990: LD_INT 22
23992: PUSH
23993: LD_INT 23
23995: PUSH
23996: LD_INT 24
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: ST_TO_ADDR
24011: GO 24014
24013: POP
// result := ( chassis in result ) ;
24014: LD_ADDR_VAR 0 3
24018: PUSH
24019: LD_VAR 0 1
24023: PUSH
24024: LD_VAR 0 3
24028: IN
24029: ST_TO_ADDR
// end ;
24030: LD_VAR 0 3
24034: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24035: LD_INT 0
24037: PPUSH
// if not chassis or not weapon then
24038: LD_VAR 0 1
24042: NOT
24043: PUSH
24044: LD_VAR 0 2
24048: NOT
24049: OR
24050: IFFALSE 24054
// exit ;
24052: GO 25080
// case weapon of us_machine_gun :
24054: LD_VAR 0 2
24058: PUSH
24059: LD_INT 2
24061: DOUBLE
24062: EQUAL
24063: IFTRUE 24067
24065: GO 24097
24067: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24068: LD_ADDR_VAR 0 3
24072: PUSH
24073: LD_INT 1
24075: PUSH
24076: LD_INT 2
24078: PUSH
24079: LD_INT 3
24081: PUSH
24082: LD_INT 4
24084: PUSH
24085: LD_INT 5
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: ST_TO_ADDR
24095: GO 25064
24097: LD_INT 3
24099: DOUBLE
24100: EQUAL
24101: IFTRUE 24105
24103: GO 24135
24105: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24106: LD_ADDR_VAR 0 3
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: LD_INT 2
24116: PUSH
24117: LD_INT 3
24119: PUSH
24120: LD_INT 4
24122: PUSH
24123: LD_INT 5
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: ST_TO_ADDR
24133: GO 25064
24135: LD_INT 11
24137: DOUBLE
24138: EQUAL
24139: IFTRUE 24143
24141: GO 24173
24143: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24144: LD_ADDR_VAR 0 3
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: LD_INT 2
24154: PUSH
24155: LD_INT 3
24157: PUSH
24158: LD_INT 4
24160: PUSH
24161: LD_INT 5
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: ST_TO_ADDR
24171: GO 25064
24173: LD_INT 4
24175: DOUBLE
24176: EQUAL
24177: IFTRUE 24181
24179: GO 24207
24181: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24182: LD_ADDR_VAR 0 3
24186: PUSH
24187: LD_INT 2
24189: PUSH
24190: LD_INT 3
24192: PUSH
24193: LD_INT 4
24195: PUSH
24196: LD_INT 5
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: ST_TO_ADDR
24205: GO 25064
24207: LD_INT 5
24209: DOUBLE
24210: EQUAL
24211: IFTRUE 24215
24213: GO 24241
24215: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24216: LD_ADDR_VAR 0 3
24220: PUSH
24221: LD_INT 2
24223: PUSH
24224: LD_INT 3
24226: PUSH
24227: LD_INT 4
24229: PUSH
24230: LD_INT 5
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: ST_TO_ADDR
24239: GO 25064
24241: LD_INT 9
24243: DOUBLE
24244: EQUAL
24245: IFTRUE 24249
24247: GO 24275
24249: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24250: LD_ADDR_VAR 0 3
24254: PUSH
24255: LD_INT 2
24257: PUSH
24258: LD_INT 3
24260: PUSH
24261: LD_INT 4
24263: PUSH
24264: LD_INT 5
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: ST_TO_ADDR
24273: GO 25064
24275: LD_INT 7
24277: DOUBLE
24278: EQUAL
24279: IFTRUE 24283
24281: GO 24309
24283: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24284: LD_ADDR_VAR 0 3
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: LD_INT 3
24294: PUSH
24295: LD_INT 4
24297: PUSH
24298: LD_INT 5
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: ST_TO_ADDR
24307: GO 25064
24309: LD_INT 12
24311: DOUBLE
24312: EQUAL
24313: IFTRUE 24317
24315: GO 24343
24317: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24318: LD_ADDR_VAR 0 3
24322: PUSH
24323: LD_INT 2
24325: PUSH
24326: LD_INT 3
24328: PUSH
24329: LD_INT 4
24331: PUSH
24332: LD_INT 5
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: ST_TO_ADDR
24341: GO 25064
24343: LD_INT 13
24345: DOUBLE
24346: EQUAL
24347: IFTRUE 24351
24349: GO 24377
24351: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24352: LD_ADDR_VAR 0 3
24356: PUSH
24357: LD_INT 2
24359: PUSH
24360: LD_INT 3
24362: PUSH
24363: LD_INT 4
24365: PUSH
24366: LD_INT 5
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: ST_TO_ADDR
24375: GO 25064
24377: LD_INT 14
24379: DOUBLE
24380: EQUAL
24381: IFTRUE 24385
24383: GO 24403
24385: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24386: LD_ADDR_VAR 0 3
24390: PUSH
24391: LD_INT 4
24393: PUSH
24394: LD_INT 5
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: ST_TO_ADDR
24401: GO 25064
24403: LD_INT 6
24405: DOUBLE
24406: EQUAL
24407: IFTRUE 24411
24409: GO 24429
24411: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24412: LD_ADDR_VAR 0 3
24416: PUSH
24417: LD_INT 4
24419: PUSH
24420: LD_INT 5
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: ST_TO_ADDR
24427: GO 25064
24429: LD_INT 10
24431: DOUBLE
24432: EQUAL
24433: IFTRUE 24437
24435: GO 24455
24437: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24438: LD_ADDR_VAR 0 3
24442: PUSH
24443: LD_INT 4
24445: PUSH
24446: LD_INT 5
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: ST_TO_ADDR
24453: GO 25064
24455: LD_INT 22
24457: DOUBLE
24458: EQUAL
24459: IFTRUE 24463
24461: GO 24489
24463: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24464: LD_ADDR_VAR 0 3
24468: PUSH
24469: LD_INT 11
24471: PUSH
24472: LD_INT 12
24474: PUSH
24475: LD_INT 13
24477: PUSH
24478: LD_INT 14
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: ST_TO_ADDR
24487: GO 25064
24489: LD_INT 23
24491: DOUBLE
24492: EQUAL
24493: IFTRUE 24497
24495: GO 24523
24497: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24498: LD_ADDR_VAR 0 3
24502: PUSH
24503: LD_INT 11
24505: PUSH
24506: LD_INT 12
24508: PUSH
24509: LD_INT 13
24511: PUSH
24512: LD_INT 14
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: ST_TO_ADDR
24521: GO 25064
24523: LD_INT 24
24525: DOUBLE
24526: EQUAL
24527: IFTRUE 24531
24529: GO 24557
24531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24532: LD_ADDR_VAR 0 3
24536: PUSH
24537: LD_INT 11
24539: PUSH
24540: LD_INT 12
24542: PUSH
24543: LD_INT 13
24545: PUSH
24546: LD_INT 14
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: ST_TO_ADDR
24555: GO 25064
24557: LD_INT 30
24559: DOUBLE
24560: EQUAL
24561: IFTRUE 24565
24563: GO 24591
24565: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24566: LD_ADDR_VAR 0 3
24570: PUSH
24571: LD_INT 11
24573: PUSH
24574: LD_INT 12
24576: PUSH
24577: LD_INT 13
24579: PUSH
24580: LD_INT 14
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: ST_TO_ADDR
24589: GO 25064
24591: LD_INT 25
24593: DOUBLE
24594: EQUAL
24595: IFTRUE 24599
24597: GO 24617
24599: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24600: LD_ADDR_VAR 0 3
24604: PUSH
24605: LD_INT 13
24607: PUSH
24608: LD_INT 14
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: ST_TO_ADDR
24615: GO 25064
24617: LD_INT 27
24619: DOUBLE
24620: EQUAL
24621: IFTRUE 24625
24623: GO 24643
24625: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24626: LD_ADDR_VAR 0 3
24630: PUSH
24631: LD_INT 13
24633: PUSH
24634: LD_INT 14
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: ST_TO_ADDR
24641: GO 25064
24643: LD_INT 28
24645: DOUBLE
24646: EQUAL
24647: IFTRUE 24651
24649: GO 24669
24651: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24652: LD_ADDR_VAR 0 3
24656: PUSH
24657: LD_INT 13
24659: PUSH
24660: LD_INT 14
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: ST_TO_ADDR
24667: GO 25064
24669: LD_INT 29
24671: DOUBLE
24672: EQUAL
24673: IFTRUE 24677
24675: GO 24695
24677: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24678: LD_ADDR_VAR 0 3
24682: PUSH
24683: LD_INT 13
24685: PUSH
24686: LD_INT 14
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: ST_TO_ADDR
24693: GO 25064
24695: LD_INT 31
24697: DOUBLE
24698: EQUAL
24699: IFTRUE 24703
24701: GO 24721
24703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24704: LD_ADDR_VAR 0 3
24708: PUSH
24709: LD_INT 13
24711: PUSH
24712: LD_INT 14
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: ST_TO_ADDR
24719: GO 25064
24721: LD_INT 26
24723: DOUBLE
24724: EQUAL
24725: IFTRUE 24729
24727: GO 24747
24729: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24730: LD_ADDR_VAR 0 3
24734: PUSH
24735: LD_INT 13
24737: PUSH
24738: LD_INT 14
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: ST_TO_ADDR
24745: GO 25064
24747: LD_INT 42
24749: DOUBLE
24750: EQUAL
24751: IFTRUE 24755
24753: GO 24781
24755: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24756: LD_ADDR_VAR 0 3
24760: PUSH
24761: LD_INT 21
24763: PUSH
24764: LD_INT 22
24766: PUSH
24767: LD_INT 23
24769: PUSH
24770: LD_INT 24
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: ST_TO_ADDR
24779: GO 25064
24781: LD_INT 43
24783: DOUBLE
24784: EQUAL
24785: IFTRUE 24789
24787: GO 24815
24789: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24790: LD_ADDR_VAR 0 3
24794: PUSH
24795: LD_INT 21
24797: PUSH
24798: LD_INT 22
24800: PUSH
24801: LD_INT 23
24803: PUSH
24804: LD_INT 24
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: ST_TO_ADDR
24813: GO 25064
24815: LD_INT 44
24817: DOUBLE
24818: EQUAL
24819: IFTRUE 24823
24821: GO 24849
24823: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24824: LD_ADDR_VAR 0 3
24828: PUSH
24829: LD_INT 21
24831: PUSH
24832: LD_INT 22
24834: PUSH
24835: LD_INT 23
24837: PUSH
24838: LD_INT 24
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: ST_TO_ADDR
24847: GO 25064
24849: LD_INT 45
24851: DOUBLE
24852: EQUAL
24853: IFTRUE 24857
24855: GO 24883
24857: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24858: LD_ADDR_VAR 0 3
24862: PUSH
24863: LD_INT 21
24865: PUSH
24866: LD_INT 22
24868: PUSH
24869: LD_INT 23
24871: PUSH
24872: LD_INT 24
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: ST_TO_ADDR
24881: GO 25064
24883: LD_INT 49
24885: DOUBLE
24886: EQUAL
24887: IFTRUE 24891
24889: GO 24917
24891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24892: LD_ADDR_VAR 0 3
24896: PUSH
24897: LD_INT 21
24899: PUSH
24900: LD_INT 22
24902: PUSH
24903: LD_INT 23
24905: PUSH
24906: LD_INT 24
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: ST_TO_ADDR
24915: GO 25064
24917: LD_INT 51
24919: DOUBLE
24920: EQUAL
24921: IFTRUE 24925
24923: GO 24951
24925: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24926: LD_ADDR_VAR 0 3
24930: PUSH
24931: LD_INT 21
24933: PUSH
24934: LD_INT 22
24936: PUSH
24937: LD_INT 23
24939: PUSH
24940: LD_INT 24
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: ST_TO_ADDR
24949: GO 25064
24951: LD_INT 52
24953: DOUBLE
24954: EQUAL
24955: IFTRUE 24959
24957: GO 24985
24959: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24960: LD_ADDR_VAR 0 3
24964: PUSH
24965: LD_INT 21
24967: PUSH
24968: LD_INT 22
24970: PUSH
24971: LD_INT 23
24973: PUSH
24974: LD_INT 24
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: ST_TO_ADDR
24983: GO 25064
24985: LD_INT 53
24987: DOUBLE
24988: EQUAL
24989: IFTRUE 24993
24991: GO 25011
24993: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24994: LD_ADDR_VAR 0 3
24998: PUSH
24999: LD_INT 23
25001: PUSH
25002: LD_INT 24
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: ST_TO_ADDR
25009: GO 25064
25011: LD_INT 46
25013: DOUBLE
25014: EQUAL
25015: IFTRUE 25019
25017: GO 25037
25019: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25020: LD_ADDR_VAR 0 3
25024: PUSH
25025: LD_INT 23
25027: PUSH
25028: LD_INT 24
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: ST_TO_ADDR
25035: GO 25064
25037: LD_INT 47
25039: DOUBLE
25040: EQUAL
25041: IFTRUE 25045
25043: GO 25063
25045: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25046: LD_ADDR_VAR 0 3
25050: PUSH
25051: LD_INT 23
25053: PUSH
25054: LD_INT 24
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: ST_TO_ADDR
25061: GO 25064
25063: POP
// result := ( chassis in result ) ;
25064: LD_ADDR_VAR 0 3
25068: PUSH
25069: LD_VAR 0 1
25073: PUSH
25074: LD_VAR 0 3
25078: IN
25079: ST_TO_ADDR
// end ;
25080: LD_VAR 0 3
25084: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25085: LD_INT 0
25087: PPUSH
25088: PPUSH
25089: PPUSH
25090: PPUSH
25091: PPUSH
25092: PPUSH
25093: PPUSH
// result := array ;
25094: LD_ADDR_VAR 0 5
25098: PUSH
25099: LD_VAR 0 1
25103: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25104: LD_VAR 0 1
25108: NOT
25109: PUSH
25110: LD_VAR 0 2
25114: NOT
25115: OR
25116: PUSH
25117: LD_VAR 0 3
25121: NOT
25122: OR
25123: PUSH
25124: LD_VAR 0 2
25128: PUSH
25129: LD_VAR 0 1
25133: GREATER
25134: OR
25135: PUSH
25136: LD_VAR 0 3
25140: PUSH
25141: LD_VAR 0 1
25145: GREATER
25146: OR
25147: IFFALSE 25151
// exit ;
25149: GO 25447
// if direction then
25151: LD_VAR 0 4
25155: IFFALSE 25219
// begin d := 1 ;
25157: LD_ADDR_VAR 0 9
25161: PUSH
25162: LD_INT 1
25164: ST_TO_ADDR
// if i_from > i_to then
25165: LD_VAR 0 2
25169: PUSH
25170: LD_VAR 0 3
25174: GREATER
25175: IFFALSE 25201
// length := ( array - i_from ) + i_to else
25177: LD_ADDR_VAR 0 11
25181: PUSH
25182: LD_VAR 0 1
25186: PUSH
25187: LD_VAR 0 2
25191: MINUS
25192: PUSH
25193: LD_VAR 0 3
25197: PLUS
25198: ST_TO_ADDR
25199: GO 25217
// length := i_to - i_from ;
25201: LD_ADDR_VAR 0 11
25205: PUSH
25206: LD_VAR 0 3
25210: PUSH
25211: LD_VAR 0 2
25215: MINUS
25216: ST_TO_ADDR
// end else
25217: GO 25280
// begin d := - 1 ;
25219: LD_ADDR_VAR 0 9
25223: PUSH
25224: LD_INT 1
25226: NEG
25227: ST_TO_ADDR
// if i_from > i_to then
25228: LD_VAR 0 2
25232: PUSH
25233: LD_VAR 0 3
25237: GREATER
25238: IFFALSE 25258
// length := i_from - i_to else
25240: LD_ADDR_VAR 0 11
25244: PUSH
25245: LD_VAR 0 2
25249: PUSH
25250: LD_VAR 0 3
25254: MINUS
25255: ST_TO_ADDR
25256: GO 25280
// length := ( array - i_to ) + i_from ;
25258: LD_ADDR_VAR 0 11
25262: PUSH
25263: LD_VAR 0 1
25267: PUSH
25268: LD_VAR 0 3
25272: MINUS
25273: PUSH
25274: LD_VAR 0 2
25278: PLUS
25279: ST_TO_ADDR
// end ; if not length then
25280: LD_VAR 0 11
25284: NOT
25285: IFFALSE 25289
// exit ;
25287: GO 25447
// tmp := array ;
25289: LD_ADDR_VAR 0 10
25293: PUSH
25294: LD_VAR 0 1
25298: ST_TO_ADDR
// for i = 1 to length do
25299: LD_ADDR_VAR 0 6
25303: PUSH
25304: DOUBLE
25305: LD_INT 1
25307: DEC
25308: ST_TO_ADDR
25309: LD_VAR 0 11
25313: PUSH
25314: FOR_TO
25315: IFFALSE 25435
// begin for j = 1 to array do
25317: LD_ADDR_VAR 0 7
25321: PUSH
25322: DOUBLE
25323: LD_INT 1
25325: DEC
25326: ST_TO_ADDR
25327: LD_VAR 0 1
25331: PUSH
25332: FOR_TO
25333: IFFALSE 25421
// begin k := j + d ;
25335: LD_ADDR_VAR 0 8
25339: PUSH
25340: LD_VAR 0 7
25344: PUSH
25345: LD_VAR 0 9
25349: PLUS
25350: ST_TO_ADDR
// if k > array then
25351: LD_VAR 0 8
25355: PUSH
25356: LD_VAR 0 1
25360: GREATER
25361: IFFALSE 25371
// k := 1 ;
25363: LD_ADDR_VAR 0 8
25367: PUSH
25368: LD_INT 1
25370: ST_TO_ADDR
// if not k then
25371: LD_VAR 0 8
25375: NOT
25376: IFFALSE 25388
// k := array ;
25378: LD_ADDR_VAR 0 8
25382: PUSH
25383: LD_VAR 0 1
25387: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25388: LD_ADDR_VAR 0 10
25392: PUSH
25393: LD_VAR 0 10
25397: PPUSH
25398: LD_VAR 0 8
25402: PPUSH
25403: LD_VAR 0 1
25407: PUSH
25408: LD_VAR 0 7
25412: ARRAY
25413: PPUSH
25414: CALL_OW 1
25418: ST_TO_ADDR
// end ;
25419: GO 25332
25421: POP
25422: POP
// array := tmp ;
25423: LD_ADDR_VAR 0 1
25427: PUSH
25428: LD_VAR 0 10
25432: ST_TO_ADDR
// end ;
25433: GO 25314
25435: POP
25436: POP
// result := array ;
25437: LD_ADDR_VAR 0 5
25441: PUSH
25442: LD_VAR 0 1
25446: ST_TO_ADDR
// end ;
25447: LD_VAR 0 5
25451: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25452: LD_INT 0
25454: PPUSH
25455: PPUSH
// result := 0 ;
25456: LD_ADDR_VAR 0 3
25460: PUSH
25461: LD_INT 0
25463: ST_TO_ADDR
// if not array or not value in array then
25464: LD_VAR 0 1
25468: NOT
25469: PUSH
25470: LD_VAR 0 2
25474: PUSH
25475: LD_VAR 0 1
25479: IN
25480: NOT
25481: OR
25482: IFFALSE 25486
// exit ;
25484: GO 25540
// for i = 1 to array do
25486: LD_ADDR_VAR 0 4
25490: PUSH
25491: DOUBLE
25492: LD_INT 1
25494: DEC
25495: ST_TO_ADDR
25496: LD_VAR 0 1
25500: PUSH
25501: FOR_TO
25502: IFFALSE 25538
// if value = array [ i ] then
25504: LD_VAR 0 2
25508: PUSH
25509: LD_VAR 0 1
25513: PUSH
25514: LD_VAR 0 4
25518: ARRAY
25519: EQUAL
25520: IFFALSE 25536
// begin result := i ;
25522: LD_ADDR_VAR 0 3
25526: PUSH
25527: LD_VAR 0 4
25531: ST_TO_ADDR
// exit ;
25532: POP
25533: POP
25534: GO 25540
// end ;
25536: GO 25501
25538: POP
25539: POP
// end ;
25540: LD_VAR 0 3
25544: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25545: LD_INT 0
25547: PPUSH
// vc_chassis := chassis ;
25548: LD_ADDR_OWVAR 37
25552: PUSH
25553: LD_VAR 0 1
25557: ST_TO_ADDR
// vc_engine := engine ;
25558: LD_ADDR_OWVAR 39
25562: PUSH
25563: LD_VAR 0 2
25567: ST_TO_ADDR
// vc_control := control ;
25568: LD_ADDR_OWVAR 38
25572: PUSH
25573: LD_VAR 0 3
25577: ST_TO_ADDR
// vc_weapon := weapon ;
25578: LD_ADDR_OWVAR 40
25582: PUSH
25583: LD_VAR 0 4
25587: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25588: LD_ADDR_OWVAR 41
25592: PUSH
25593: LD_VAR 0 5
25597: ST_TO_ADDR
// end ;
25598: LD_VAR 0 6
25602: RET
// export function WantPlant ( unit ) ; var task ; begin
25603: LD_INT 0
25605: PPUSH
25606: PPUSH
// result := false ;
25607: LD_ADDR_VAR 0 2
25611: PUSH
25612: LD_INT 0
25614: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25615: LD_ADDR_VAR 0 3
25619: PUSH
25620: LD_VAR 0 1
25624: PPUSH
25625: CALL_OW 437
25629: ST_TO_ADDR
// if task then
25630: LD_VAR 0 3
25634: IFFALSE 25662
// if task [ 1 ] [ 1 ] = p then
25636: LD_VAR 0 3
25640: PUSH
25641: LD_INT 1
25643: ARRAY
25644: PUSH
25645: LD_INT 1
25647: ARRAY
25648: PUSH
25649: LD_STRING p
25651: EQUAL
25652: IFFALSE 25662
// result := true ;
25654: LD_ADDR_VAR 0 2
25658: PUSH
25659: LD_INT 1
25661: ST_TO_ADDR
// end ;
25662: LD_VAR 0 2
25666: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25667: LD_INT 0
25669: PPUSH
25670: PPUSH
25671: PPUSH
25672: PPUSH
// if pos < 1 then
25673: LD_VAR 0 2
25677: PUSH
25678: LD_INT 1
25680: LESS
25681: IFFALSE 25685
// exit ;
25683: GO 25988
// if pos = 1 then
25685: LD_VAR 0 2
25689: PUSH
25690: LD_INT 1
25692: EQUAL
25693: IFFALSE 25726
// result := Replace ( arr , pos [ 1 ] , value ) else
25695: LD_ADDR_VAR 0 4
25699: PUSH
25700: LD_VAR 0 1
25704: PPUSH
25705: LD_VAR 0 2
25709: PUSH
25710: LD_INT 1
25712: ARRAY
25713: PPUSH
25714: LD_VAR 0 3
25718: PPUSH
25719: CALL_OW 1
25723: ST_TO_ADDR
25724: GO 25988
// begin tmp := arr ;
25726: LD_ADDR_VAR 0 6
25730: PUSH
25731: LD_VAR 0 1
25735: ST_TO_ADDR
// s_arr := [ tmp ] ;
25736: LD_ADDR_VAR 0 7
25740: PUSH
25741: LD_VAR 0 6
25745: PUSH
25746: EMPTY
25747: LIST
25748: ST_TO_ADDR
// for i = 1 to pos - 1 do
25749: LD_ADDR_VAR 0 5
25753: PUSH
25754: DOUBLE
25755: LD_INT 1
25757: DEC
25758: ST_TO_ADDR
25759: LD_VAR 0 2
25763: PUSH
25764: LD_INT 1
25766: MINUS
25767: PUSH
25768: FOR_TO
25769: IFFALSE 25814
// begin tmp := tmp [ pos [ i ] ] ;
25771: LD_ADDR_VAR 0 6
25775: PUSH
25776: LD_VAR 0 6
25780: PUSH
25781: LD_VAR 0 2
25785: PUSH
25786: LD_VAR 0 5
25790: ARRAY
25791: ARRAY
25792: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25793: LD_ADDR_VAR 0 7
25797: PUSH
25798: LD_VAR 0 7
25802: PUSH
25803: LD_VAR 0 6
25807: PUSH
25808: EMPTY
25809: LIST
25810: ADD
25811: ST_TO_ADDR
// end ;
25812: GO 25768
25814: POP
25815: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25816: LD_ADDR_VAR 0 6
25820: PUSH
25821: LD_VAR 0 6
25825: PPUSH
25826: LD_VAR 0 2
25830: PUSH
25831: LD_VAR 0 2
25835: ARRAY
25836: PPUSH
25837: LD_VAR 0 3
25841: PPUSH
25842: CALL_OW 1
25846: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25847: LD_ADDR_VAR 0 7
25851: PUSH
25852: LD_VAR 0 7
25856: PPUSH
25857: LD_VAR 0 7
25861: PPUSH
25862: LD_VAR 0 6
25866: PPUSH
25867: CALL_OW 1
25871: ST_TO_ADDR
// for i = s_arr downto 2 do
25872: LD_ADDR_VAR 0 5
25876: PUSH
25877: DOUBLE
25878: LD_VAR 0 7
25882: INC
25883: ST_TO_ADDR
25884: LD_INT 2
25886: PUSH
25887: FOR_DOWNTO
25888: IFFALSE 25972
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25890: LD_ADDR_VAR 0 6
25894: PUSH
25895: LD_VAR 0 7
25899: PUSH
25900: LD_VAR 0 5
25904: PUSH
25905: LD_INT 1
25907: MINUS
25908: ARRAY
25909: PPUSH
25910: LD_VAR 0 2
25914: PUSH
25915: LD_VAR 0 5
25919: PUSH
25920: LD_INT 1
25922: MINUS
25923: ARRAY
25924: PPUSH
25925: LD_VAR 0 7
25929: PUSH
25930: LD_VAR 0 5
25934: ARRAY
25935: PPUSH
25936: CALL_OW 1
25940: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25941: LD_ADDR_VAR 0 7
25945: PUSH
25946: LD_VAR 0 7
25950: PPUSH
25951: LD_VAR 0 5
25955: PUSH
25956: LD_INT 1
25958: MINUS
25959: PPUSH
25960: LD_VAR 0 6
25964: PPUSH
25965: CALL_OW 1
25969: ST_TO_ADDR
// end ;
25970: GO 25887
25972: POP
25973: POP
// result := s_arr [ 1 ] ;
25974: LD_ADDR_VAR 0 4
25978: PUSH
25979: LD_VAR 0 7
25983: PUSH
25984: LD_INT 1
25986: ARRAY
25987: ST_TO_ADDR
// end ; end ;
25988: LD_VAR 0 4
25992: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25993: LD_INT 0
25995: PPUSH
25996: PPUSH
// if not list then
25997: LD_VAR 0 1
26001: NOT
26002: IFFALSE 26006
// exit ;
26004: GO 26097
// i := list [ pos1 ] ;
26006: LD_ADDR_VAR 0 5
26010: PUSH
26011: LD_VAR 0 1
26015: PUSH
26016: LD_VAR 0 2
26020: ARRAY
26021: ST_TO_ADDR
// if not i then
26022: LD_VAR 0 5
26026: NOT
26027: IFFALSE 26031
// exit ;
26029: GO 26097
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26031: LD_ADDR_VAR 0 1
26035: PUSH
26036: LD_VAR 0 1
26040: PPUSH
26041: LD_VAR 0 2
26045: PPUSH
26046: LD_VAR 0 1
26050: PUSH
26051: LD_VAR 0 3
26055: ARRAY
26056: PPUSH
26057: CALL_OW 1
26061: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26062: LD_ADDR_VAR 0 1
26066: PUSH
26067: LD_VAR 0 1
26071: PPUSH
26072: LD_VAR 0 3
26076: PPUSH
26077: LD_VAR 0 5
26081: PPUSH
26082: CALL_OW 1
26086: ST_TO_ADDR
// result := list ;
26087: LD_ADDR_VAR 0 4
26091: PUSH
26092: LD_VAR 0 1
26096: ST_TO_ADDR
// end ;
26097: LD_VAR 0 4
26101: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26102: LD_INT 0
26104: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26105: LD_ADDR_VAR 0 5
26109: PUSH
26110: LD_VAR 0 1
26114: PPUSH
26115: CALL_OW 250
26119: PPUSH
26120: LD_VAR 0 1
26124: PPUSH
26125: CALL_OW 251
26129: PPUSH
26130: LD_VAR 0 2
26134: PPUSH
26135: LD_VAR 0 3
26139: PPUSH
26140: LD_VAR 0 4
26144: PPUSH
26145: CALL 26155 0 5
26149: ST_TO_ADDR
// end ;
26150: LD_VAR 0 5
26154: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26155: LD_INT 0
26157: PPUSH
26158: PPUSH
26159: PPUSH
26160: PPUSH
// if not list then
26161: LD_VAR 0 3
26165: NOT
26166: IFFALSE 26170
// exit ;
26168: GO 26558
// result := [ ] ;
26170: LD_ADDR_VAR 0 6
26174: PUSH
26175: EMPTY
26176: ST_TO_ADDR
// for i in list do
26177: LD_ADDR_VAR 0 7
26181: PUSH
26182: LD_VAR 0 3
26186: PUSH
26187: FOR_IN
26188: IFFALSE 26390
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26190: LD_ADDR_VAR 0 9
26194: PUSH
26195: LD_VAR 0 7
26199: PPUSH
26200: LD_VAR 0 1
26204: PPUSH
26205: LD_VAR 0 2
26209: PPUSH
26210: CALL_OW 297
26214: ST_TO_ADDR
// if not result then
26215: LD_VAR 0 6
26219: NOT
26220: IFFALSE 26246
// result := [ [ i , tmp ] ] else
26222: LD_ADDR_VAR 0 6
26226: PUSH
26227: LD_VAR 0 7
26231: PUSH
26232: LD_VAR 0 9
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: EMPTY
26242: LIST
26243: ST_TO_ADDR
26244: GO 26388
// begin if result [ result ] [ 2 ] < tmp then
26246: LD_VAR 0 6
26250: PUSH
26251: LD_VAR 0 6
26255: ARRAY
26256: PUSH
26257: LD_INT 2
26259: ARRAY
26260: PUSH
26261: LD_VAR 0 9
26265: LESS
26266: IFFALSE 26308
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26268: LD_ADDR_VAR 0 6
26272: PUSH
26273: LD_VAR 0 6
26277: PPUSH
26278: LD_VAR 0 6
26282: PUSH
26283: LD_INT 1
26285: PLUS
26286: PPUSH
26287: LD_VAR 0 7
26291: PUSH
26292: LD_VAR 0 9
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PPUSH
26301: CALL_OW 2
26305: ST_TO_ADDR
26306: GO 26388
// for j = 1 to result do
26308: LD_ADDR_VAR 0 8
26312: PUSH
26313: DOUBLE
26314: LD_INT 1
26316: DEC
26317: ST_TO_ADDR
26318: LD_VAR 0 6
26322: PUSH
26323: FOR_TO
26324: IFFALSE 26386
// begin if tmp < result [ j ] [ 2 ] then
26326: LD_VAR 0 9
26330: PUSH
26331: LD_VAR 0 6
26335: PUSH
26336: LD_VAR 0 8
26340: ARRAY
26341: PUSH
26342: LD_INT 2
26344: ARRAY
26345: LESS
26346: IFFALSE 26384
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26348: LD_ADDR_VAR 0 6
26352: PUSH
26353: LD_VAR 0 6
26357: PPUSH
26358: LD_VAR 0 8
26362: PPUSH
26363: LD_VAR 0 7
26367: PUSH
26368: LD_VAR 0 9
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PPUSH
26377: CALL_OW 2
26381: ST_TO_ADDR
// break ;
26382: GO 26386
// end ; end ;
26384: GO 26323
26386: POP
26387: POP
// end ; end ;
26388: GO 26187
26390: POP
26391: POP
// if result and not asc then
26392: LD_VAR 0 6
26396: PUSH
26397: LD_VAR 0 4
26401: NOT
26402: AND
26403: IFFALSE 26478
// begin tmp := result ;
26405: LD_ADDR_VAR 0 9
26409: PUSH
26410: LD_VAR 0 6
26414: ST_TO_ADDR
// for i = tmp downto 1 do
26415: LD_ADDR_VAR 0 7
26419: PUSH
26420: DOUBLE
26421: LD_VAR 0 9
26425: INC
26426: ST_TO_ADDR
26427: LD_INT 1
26429: PUSH
26430: FOR_DOWNTO
26431: IFFALSE 26476
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26433: LD_ADDR_VAR 0 6
26437: PUSH
26438: LD_VAR 0 6
26442: PPUSH
26443: LD_VAR 0 9
26447: PUSH
26448: LD_VAR 0 7
26452: MINUS
26453: PUSH
26454: LD_INT 1
26456: PLUS
26457: PPUSH
26458: LD_VAR 0 9
26462: PUSH
26463: LD_VAR 0 7
26467: ARRAY
26468: PPUSH
26469: CALL_OW 1
26473: ST_TO_ADDR
26474: GO 26430
26476: POP
26477: POP
// end ; tmp := [ ] ;
26478: LD_ADDR_VAR 0 9
26482: PUSH
26483: EMPTY
26484: ST_TO_ADDR
// if mode then
26485: LD_VAR 0 5
26489: IFFALSE 26558
// begin for i = 1 to result do
26491: LD_ADDR_VAR 0 7
26495: PUSH
26496: DOUBLE
26497: LD_INT 1
26499: DEC
26500: ST_TO_ADDR
26501: LD_VAR 0 6
26505: PUSH
26506: FOR_TO
26507: IFFALSE 26546
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26509: LD_ADDR_VAR 0 9
26513: PUSH
26514: LD_VAR 0 9
26518: PPUSH
26519: LD_VAR 0 7
26523: PPUSH
26524: LD_VAR 0 6
26528: PUSH
26529: LD_VAR 0 7
26533: ARRAY
26534: PUSH
26535: LD_INT 1
26537: ARRAY
26538: PPUSH
26539: CALL_OW 1
26543: ST_TO_ADDR
26544: GO 26506
26546: POP
26547: POP
// result := tmp ;
26548: LD_ADDR_VAR 0 6
26552: PUSH
26553: LD_VAR 0 9
26557: ST_TO_ADDR
// end ; end ;
26558: LD_VAR 0 6
26562: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26563: LD_INT 0
26565: PPUSH
26566: PPUSH
26567: PPUSH
26568: PPUSH
26569: PPUSH
26570: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26571: LD_ADDR_VAR 0 5
26575: PUSH
26576: LD_INT 0
26578: PUSH
26579: LD_INT 0
26581: PUSH
26582: LD_INT 0
26584: PUSH
26585: EMPTY
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: ST_TO_ADDR
// if not x or not y then
26593: LD_VAR 0 2
26597: NOT
26598: PUSH
26599: LD_VAR 0 3
26603: NOT
26604: OR
26605: IFFALSE 26609
// exit ;
26607: GO 28255
// if not range then
26609: LD_VAR 0 4
26613: NOT
26614: IFFALSE 26624
// range := 10 ;
26616: LD_ADDR_VAR 0 4
26620: PUSH
26621: LD_INT 10
26623: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26624: LD_ADDR_VAR 0 8
26628: PUSH
26629: LD_INT 81
26631: PUSH
26632: LD_VAR 0 1
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 92
26643: PUSH
26644: LD_VAR 0 2
26648: PUSH
26649: LD_VAR 0 3
26653: PUSH
26654: LD_VAR 0 4
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 3
26667: PUSH
26668: LD_INT 21
26670: PUSH
26671: LD_INT 3
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: PPUSH
26687: CALL_OW 69
26691: ST_TO_ADDR
// if not tmp then
26692: LD_VAR 0 8
26696: NOT
26697: IFFALSE 26701
// exit ;
26699: GO 28255
// for i in tmp do
26701: LD_ADDR_VAR 0 6
26705: PUSH
26706: LD_VAR 0 8
26710: PUSH
26711: FOR_IN
26712: IFFALSE 28230
// begin points := [ 0 , 0 , 0 ] ;
26714: LD_ADDR_VAR 0 9
26718: PUSH
26719: LD_INT 0
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: LIST
26732: ST_TO_ADDR
// bpoints := 1 ;
26733: LD_ADDR_VAR 0 10
26737: PUSH
26738: LD_INT 1
26740: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26741: LD_VAR 0 6
26745: PPUSH
26746: CALL_OW 247
26750: PUSH
26751: LD_INT 1
26753: DOUBLE
26754: EQUAL
26755: IFTRUE 26759
26757: GO 27337
26759: POP
// begin if GetClass ( i ) = 1 then
26760: LD_VAR 0 6
26764: PPUSH
26765: CALL_OW 257
26769: PUSH
26770: LD_INT 1
26772: EQUAL
26773: IFFALSE 26794
// points := [ 10 , 5 , 3 ] ;
26775: LD_ADDR_VAR 0 9
26779: PUSH
26780: LD_INT 10
26782: PUSH
26783: LD_INT 5
26785: PUSH
26786: LD_INT 3
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: LIST
26793: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26794: LD_VAR 0 6
26798: PPUSH
26799: CALL_OW 257
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: LD_INT 3
26809: PUSH
26810: LD_INT 4
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: LIST
26817: IN
26818: IFFALSE 26839
// points := [ 3 , 2 , 1 ] ;
26820: LD_ADDR_VAR 0 9
26824: PUSH
26825: LD_INT 3
26827: PUSH
26828: LD_INT 2
26830: PUSH
26831: LD_INT 1
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: LIST
26838: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26839: LD_VAR 0 6
26843: PPUSH
26844: CALL_OW 257
26848: PUSH
26849: LD_INT 5
26851: EQUAL
26852: IFFALSE 26873
// points := [ 130 , 5 , 2 ] ;
26854: LD_ADDR_VAR 0 9
26858: PUSH
26859: LD_INT 130
26861: PUSH
26862: LD_INT 5
26864: PUSH
26865: LD_INT 2
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: LIST
26872: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26873: LD_VAR 0 6
26877: PPUSH
26878: CALL_OW 257
26882: PUSH
26883: LD_INT 8
26885: EQUAL
26886: IFFALSE 26907
// points := [ 35 , 35 , 30 ] ;
26888: LD_ADDR_VAR 0 9
26892: PUSH
26893: LD_INT 35
26895: PUSH
26896: LD_INT 35
26898: PUSH
26899: LD_INT 30
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: LIST
26906: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26907: LD_VAR 0 6
26911: PPUSH
26912: CALL_OW 257
26916: PUSH
26917: LD_INT 9
26919: EQUAL
26920: IFFALSE 26941
// points := [ 20 , 55 , 40 ] ;
26922: LD_ADDR_VAR 0 9
26926: PUSH
26927: LD_INT 20
26929: PUSH
26930: LD_INT 55
26932: PUSH
26933: LD_INT 40
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: LIST
26940: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26941: LD_VAR 0 6
26945: PPUSH
26946: CALL_OW 257
26950: PUSH
26951: LD_INT 12
26953: PUSH
26954: LD_INT 16
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: IN
26961: IFFALSE 26982
// points := [ 5 , 3 , 2 ] ;
26963: LD_ADDR_VAR 0 9
26967: PUSH
26968: LD_INT 5
26970: PUSH
26971: LD_INT 3
26973: PUSH
26974: LD_INT 2
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: LIST
26981: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26982: LD_VAR 0 6
26986: PPUSH
26987: CALL_OW 257
26991: PUSH
26992: LD_INT 17
26994: EQUAL
26995: IFFALSE 27016
// points := [ 100 , 50 , 75 ] ;
26997: LD_ADDR_VAR 0 9
27001: PUSH
27002: LD_INT 100
27004: PUSH
27005: LD_INT 50
27007: PUSH
27008: LD_INT 75
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: LIST
27015: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27016: LD_VAR 0 6
27020: PPUSH
27021: CALL_OW 257
27025: PUSH
27026: LD_INT 15
27028: EQUAL
27029: IFFALSE 27050
// points := [ 10 , 5 , 3 ] ;
27031: LD_ADDR_VAR 0 9
27035: PUSH
27036: LD_INT 10
27038: PUSH
27039: LD_INT 5
27041: PUSH
27042: LD_INT 3
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: LIST
27049: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27050: LD_VAR 0 6
27054: PPUSH
27055: CALL_OW 257
27059: PUSH
27060: LD_INT 14
27062: EQUAL
27063: IFFALSE 27084
// points := [ 10 , 0 , 0 ] ;
27065: LD_ADDR_VAR 0 9
27069: PUSH
27070: LD_INT 10
27072: PUSH
27073: LD_INT 0
27075: PUSH
27076: LD_INT 0
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: LIST
27083: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27084: LD_VAR 0 6
27088: PPUSH
27089: CALL_OW 257
27093: PUSH
27094: LD_INT 11
27096: EQUAL
27097: IFFALSE 27118
// points := [ 30 , 10 , 5 ] ;
27099: LD_ADDR_VAR 0 9
27103: PUSH
27104: LD_INT 30
27106: PUSH
27107: LD_INT 10
27109: PUSH
27110: LD_INT 5
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: LIST
27117: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27118: LD_VAR 0 1
27122: PPUSH
27123: LD_INT 5
27125: PPUSH
27126: CALL_OW 321
27130: PUSH
27131: LD_INT 2
27133: EQUAL
27134: IFFALSE 27151
// bpoints := bpoints * 1.8 ;
27136: LD_ADDR_VAR 0 10
27140: PUSH
27141: LD_VAR 0 10
27145: PUSH
27146: LD_REAL  1.80000000000000E+0000
27149: MUL
27150: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27151: LD_VAR 0 6
27155: PPUSH
27156: CALL_OW 257
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: LD_INT 2
27166: PUSH
27167: LD_INT 3
27169: PUSH
27170: LD_INT 4
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: IN
27179: PUSH
27180: LD_VAR 0 1
27184: PPUSH
27185: LD_INT 51
27187: PPUSH
27188: CALL_OW 321
27192: PUSH
27193: LD_INT 2
27195: EQUAL
27196: AND
27197: IFFALSE 27214
// bpoints := bpoints * 1.2 ;
27199: LD_ADDR_VAR 0 10
27203: PUSH
27204: LD_VAR 0 10
27208: PUSH
27209: LD_REAL  1.20000000000000E+0000
27212: MUL
27213: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27214: LD_VAR 0 6
27218: PPUSH
27219: CALL_OW 257
27223: PUSH
27224: LD_INT 5
27226: PUSH
27227: LD_INT 7
27229: PUSH
27230: LD_INT 9
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: LIST
27237: IN
27238: PUSH
27239: LD_VAR 0 1
27243: PPUSH
27244: LD_INT 52
27246: PPUSH
27247: CALL_OW 321
27251: PUSH
27252: LD_INT 2
27254: EQUAL
27255: AND
27256: IFFALSE 27273
// bpoints := bpoints * 1.5 ;
27258: LD_ADDR_VAR 0 10
27262: PUSH
27263: LD_VAR 0 10
27267: PUSH
27268: LD_REAL  1.50000000000000E+0000
27271: MUL
27272: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27273: LD_VAR 0 1
27277: PPUSH
27278: LD_INT 66
27280: PPUSH
27281: CALL_OW 321
27285: PUSH
27286: LD_INT 2
27288: EQUAL
27289: IFFALSE 27306
// bpoints := bpoints * 1.1 ;
27291: LD_ADDR_VAR 0 10
27295: PUSH
27296: LD_VAR 0 10
27300: PUSH
27301: LD_REAL  1.10000000000000E+0000
27304: MUL
27305: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27306: LD_ADDR_VAR 0 10
27310: PUSH
27311: LD_VAR 0 10
27315: PUSH
27316: LD_VAR 0 6
27320: PPUSH
27321: LD_INT 1
27323: PPUSH
27324: CALL_OW 259
27328: PUSH
27329: LD_REAL  1.15000000000000E+0000
27332: MUL
27333: MUL
27334: ST_TO_ADDR
// end ; unit_vehicle :
27335: GO 28159
27337: LD_INT 2
27339: DOUBLE
27340: EQUAL
27341: IFTRUE 27345
27343: GO 28147
27345: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27346: LD_VAR 0 6
27350: PPUSH
27351: CALL_OW 264
27355: PUSH
27356: LD_INT 2
27358: PUSH
27359: LD_INT 42
27361: PUSH
27362: LD_INT 24
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: LIST
27369: IN
27370: IFFALSE 27391
// points := [ 25 , 5 , 3 ] ;
27372: LD_ADDR_VAR 0 9
27376: PUSH
27377: LD_INT 25
27379: PUSH
27380: LD_INT 5
27382: PUSH
27383: LD_INT 3
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: LIST
27390: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27391: LD_VAR 0 6
27395: PPUSH
27396: CALL_OW 264
27400: PUSH
27401: LD_INT 4
27403: PUSH
27404: LD_INT 43
27406: PUSH
27407: LD_INT 25
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: LIST
27414: IN
27415: IFFALSE 27436
// points := [ 40 , 15 , 5 ] ;
27417: LD_ADDR_VAR 0 9
27421: PUSH
27422: LD_INT 40
27424: PUSH
27425: LD_INT 15
27427: PUSH
27428: LD_INT 5
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: LIST
27435: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27436: LD_VAR 0 6
27440: PPUSH
27441: CALL_OW 264
27445: PUSH
27446: LD_INT 3
27448: PUSH
27449: LD_INT 23
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: IN
27456: IFFALSE 27477
// points := [ 7 , 25 , 8 ] ;
27458: LD_ADDR_VAR 0 9
27462: PUSH
27463: LD_INT 7
27465: PUSH
27466: LD_INT 25
27468: PUSH
27469: LD_INT 8
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: LIST
27476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27477: LD_VAR 0 6
27481: PPUSH
27482: CALL_OW 264
27486: PUSH
27487: LD_INT 5
27489: PUSH
27490: LD_INT 27
27492: PUSH
27493: LD_INT 44
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: LIST
27500: IN
27501: IFFALSE 27522
// points := [ 14 , 50 , 16 ] ;
27503: LD_ADDR_VAR 0 9
27507: PUSH
27508: LD_INT 14
27510: PUSH
27511: LD_INT 50
27513: PUSH
27514: LD_INT 16
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: LIST
27521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27522: LD_VAR 0 6
27526: PPUSH
27527: CALL_OW 264
27531: PUSH
27532: LD_INT 6
27534: PUSH
27535: LD_INT 46
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: IN
27542: IFFALSE 27563
// points := [ 32 , 120 , 70 ] ;
27544: LD_ADDR_VAR 0 9
27548: PUSH
27549: LD_INT 32
27551: PUSH
27552: LD_INT 120
27554: PUSH
27555: LD_INT 70
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: LIST
27562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27563: LD_VAR 0 6
27567: PPUSH
27568: CALL_OW 264
27572: PUSH
27573: LD_INT 7
27575: PUSH
27576: LD_INT 28
27578: PUSH
27579: LD_INT 45
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: LIST
27586: IN
27587: IFFALSE 27608
// points := [ 35 , 20 , 45 ] ;
27589: LD_ADDR_VAR 0 9
27593: PUSH
27594: LD_INT 35
27596: PUSH
27597: LD_INT 20
27599: PUSH
27600: LD_INT 45
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: LIST
27607: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27608: LD_VAR 0 6
27612: PPUSH
27613: CALL_OW 264
27617: PUSH
27618: LD_INT 47
27620: PUSH
27621: EMPTY
27622: LIST
27623: IN
27624: IFFALSE 27645
// points := [ 67 , 45 , 75 ] ;
27626: LD_ADDR_VAR 0 9
27630: PUSH
27631: LD_INT 67
27633: PUSH
27634: LD_INT 45
27636: PUSH
27637: LD_INT 75
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: LIST
27644: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27645: LD_VAR 0 6
27649: PPUSH
27650: CALL_OW 264
27654: PUSH
27655: LD_INT 26
27657: PUSH
27658: EMPTY
27659: LIST
27660: IN
27661: IFFALSE 27682
// points := [ 120 , 30 , 80 ] ;
27663: LD_ADDR_VAR 0 9
27667: PUSH
27668: LD_INT 120
27670: PUSH
27671: LD_INT 30
27673: PUSH
27674: LD_INT 80
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: LIST
27681: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27682: LD_VAR 0 6
27686: PPUSH
27687: CALL_OW 264
27691: PUSH
27692: LD_INT 22
27694: PUSH
27695: EMPTY
27696: LIST
27697: IN
27698: IFFALSE 27719
// points := [ 40 , 1 , 1 ] ;
27700: LD_ADDR_VAR 0 9
27704: PUSH
27705: LD_INT 40
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: LD_INT 1
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: LIST
27718: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27719: LD_VAR 0 6
27723: PPUSH
27724: CALL_OW 264
27728: PUSH
27729: LD_INT 29
27731: PUSH
27732: EMPTY
27733: LIST
27734: IN
27735: IFFALSE 27756
// points := [ 70 , 200 , 400 ] ;
27737: LD_ADDR_VAR 0 9
27741: PUSH
27742: LD_INT 70
27744: PUSH
27745: LD_INT 200
27747: PUSH
27748: LD_INT 400
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: LIST
27755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27756: LD_VAR 0 6
27760: PPUSH
27761: CALL_OW 264
27765: PUSH
27766: LD_INT 14
27768: PUSH
27769: LD_INT 53
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: IN
27776: IFFALSE 27797
// points := [ 40 , 10 , 20 ] ;
27778: LD_ADDR_VAR 0 9
27782: PUSH
27783: LD_INT 40
27785: PUSH
27786: LD_INT 10
27788: PUSH
27789: LD_INT 20
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: LIST
27796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27797: LD_VAR 0 6
27801: PPUSH
27802: CALL_OW 264
27806: PUSH
27807: LD_INT 9
27809: PUSH
27810: EMPTY
27811: LIST
27812: IN
27813: IFFALSE 27834
// points := [ 5 , 70 , 20 ] ;
27815: LD_ADDR_VAR 0 9
27819: PUSH
27820: LD_INT 5
27822: PUSH
27823: LD_INT 70
27825: PUSH
27826: LD_INT 20
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: LIST
27833: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27834: LD_VAR 0 6
27838: PPUSH
27839: CALL_OW 264
27843: PUSH
27844: LD_INT 10
27846: PUSH
27847: EMPTY
27848: LIST
27849: IN
27850: IFFALSE 27871
// points := [ 35 , 110 , 70 ] ;
27852: LD_ADDR_VAR 0 9
27856: PUSH
27857: LD_INT 35
27859: PUSH
27860: LD_INT 110
27862: PUSH
27863: LD_INT 70
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: LIST
27870: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27871: LD_VAR 0 6
27875: PPUSH
27876: CALL_OW 265
27880: PUSH
27881: LD_INT 25
27883: EQUAL
27884: IFFALSE 27905
// points := [ 80 , 65 , 100 ] ;
27886: LD_ADDR_VAR 0 9
27890: PUSH
27891: LD_INT 80
27893: PUSH
27894: LD_INT 65
27896: PUSH
27897: LD_INT 100
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: LIST
27904: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27905: LD_VAR 0 6
27909: PPUSH
27910: CALL_OW 263
27914: PUSH
27915: LD_INT 1
27917: EQUAL
27918: IFFALSE 27953
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27920: LD_ADDR_VAR 0 10
27924: PUSH
27925: LD_VAR 0 10
27929: PUSH
27930: LD_VAR 0 6
27934: PPUSH
27935: CALL_OW 311
27939: PPUSH
27940: LD_INT 3
27942: PPUSH
27943: CALL_OW 259
27947: PUSH
27948: LD_INT 4
27950: MUL
27951: MUL
27952: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27953: LD_VAR 0 6
27957: PPUSH
27958: CALL_OW 263
27962: PUSH
27963: LD_INT 2
27965: EQUAL
27966: IFFALSE 28017
// begin j := IsControledBy ( i ) ;
27968: LD_ADDR_VAR 0 7
27972: PUSH
27973: LD_VAR 0 6
27977: PPUSH
27978: CALL_OW 312
27982: ST_TO_ADDR
// if j then
27983: LD_VAR 0 7
27987: IFFALSE 28017
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27989: LD_ADDR_VAR 0 10
27993: PUSH
27994: LD_VAR 0 10
27998: PUSH
27999: LD_VAR 0 7
28003: PPUSH
28004: LD_INT 3
28006: PPUSH
28007: CALL_OW 259
28011: PUSH
28012: LD_INT 3
28014: MUL
28015: MUL
28016: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28017: LD_VAR 0 6
28021: PPUSH
28022: CALL_OW 264
28026: PUSH
28027: LD_INT 5
28029: PUSH
28030: LD_INT 6
28032: PUSH
28033: LD_INT 46
28035: PUSH
28036: LD_INT 44
28038: PUSH
28039: LD_INT 47
28041: PUSH
28042: LD_INT 45
28044: PUSH
28045: LD_INT 28
28047: PUSH
28048: LD_INT 7
28050: PUSH
28051: LD_INT 27
28053: PUSH
28054: LD_INT 29
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: IN
28069: PUSH
28070: LD_VAR 0 1
28074: PPUSH
28075: LD_INT 52
28077: PPUSH
28078: CALL_OW 321
28082: PUSH
28083: LD_INT 2
28085: EQUAL
28086: AND
28087: IFFALSE 28104
// bpoints := bpoints * 1.2 ;
28089: LD_ADDR_VAR 0 10
28093: PUSH
28094: LD_VAR 0 10
28098: PUSH
28099: LD_REAL  1.20000000000000E+0000
28102: MUL
28103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28104: LD_VAR 0 6
28108: PPUSH
28109: CALL_OW 264
28113: PUSH
28114: LD_INT 6
28116: PUSH
28117: LD_INT 46
28119: PUSH
28120: LD_INT 47
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: IN
28128: IFFALSE 28145
// bpoints := bpoints * 1.2 ;
28130: LD_ADDR_VAR 0 10
28134: PUSH
28135: LD_VAR 0 10
28139: PUSH
28140: LD_REAL  1.20000000000000E+0000
28143: MUL
28144: ST_TO_ADDR
// end ; unit_building :
28145: GO 28159
28147: LD_INT 3
28149: DOUBLE
28150: EQUAL
28151: IFTRUE 28155
28153: GO 28158
28155: POP
// ; end ;
28156: GO 28159
28158: POP
// for j = 1 to 3 do
28159: LD_ADDR_VAR 0 7
28163: PUSH
28164: DOUBLE
28165: LD_INT 1
28167: DEC
28168: ST_TO_ADDR
28169: LD_INT 3
28171: PUSH
28172: FOR_TO
28173: IFFALSE 28226
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28175: LD_ADDR_VAR 0 5
28179: PUSH
28180: LD_VAR 0 5
28184: PPUSH
28185: LD_VAR 0 7
28189: PPUSH
28190: LD_VAR 0 5
28194: PUSH
28195: LD_VAR 0 7
28199: ARRAY
28200: PUSH
28201: LD_VAR 0 9
28205: PUSH
28206: LD_VAR 0 7
28210: ARRAY
28211: PUSH
28212: LD_VAR 0 10
28216: MUL
28217: PLUS
28218: PPUSH
28219: CALL_OW 1
28223: ST_TO_ADDR
28224: GO 28172
28226: POP
28227: POP
// end ;
28228: GO 26711
28230: POP
28231: POP
// result := Replace ( result , 4 , tmp ) ;
28232: LD_ADDR_VAR 0 5
28236: PUSH
28237: LD_VAR 0 5
28241: PPUSH
28242: LD_INT 4
28244: PPUSH
28245: LD_VAR 0 8
28249: PPUSH
28250: CALL_OW 1
28254: ST_TO_ADDR
// end ;
28255: LD_VAR 0 5
28259: RET
// export function DangerAtRange ( unit , range ) ; begin
28260: LD_INT 0
28262: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28263: LD_ADDR_VAR 0 3
28267: PUSH
28268: LD_VAR 0 1
28272: PPUSH
28273: CALL_OW 255
28277: PPUSH
28278: LD_VAR 0 1
28282: PPUSH
28283: CALL_OW 250
28287: PPUSH
28288: LD_VAR 0 1
28292: PPUSH
28293: CALL_OW 251
28297: PPUSH
28298: LD_VAR 0 2
28302: PPUSH
28303: CALL 26563 0 4
28307: ST_TO_ADDR
// end ;
28308: LD_VAR 0 3
28312: RET
// export function DangerInArea ( side , area ) ; begin
28313: LD_INT 0
28315: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28316: LD_ADDR_VAR 0 3
28320: PUSH
28321: LD_VAR 0 2
28325: PPUSH
28326: LD_INT 81
28328: PUSH
28329: LD_VAR 0 1
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PPUSH
28338: CALL_OW 70
28342: ST_TO_ADDR
// end ;
28343: LD_VAR 0 3
28347: RET
// export function IsExtension ( b ) ; begin
28348: LD_INT 0
28350: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28351: LD_ADDR_VAR 0 2
28355: PUSH
28356: LD_VAR 0 1
28360: PUSH
28361: LD_INT 23
28363: PUSH
28364: LD_INT 20
28366: PUSH
28367: LD_INT 22
28369: PUSH
28370: LD_INT 17
28372: PUSH
28373: LD_INT 24
28375: PUSH
28376: LD_INT 21
28378: PUSH
28379: LD_INT 19
28381: PUSH
28382: LD_INT 16
28384: PUSH
28385: LD_INT 25
28387: PUSH
28388: LD_INT 18
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: IN
28403: ST_TO_ADDR
// end ;
28404: LD_VAR 0 2
28408: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28409: LD_INT 0
28411: PPUSH
28412: PPUSH
28413: PPUSH
// result := [ ] ;
28414: LD_ADDR_VAR 0 4
28418: PUSH
28419: EMPTY
28420: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28421: LD_ADDR_VAR 0 5
28425: PUSH
28426: LD_VAR 0 2
28430: PPUSH
28431: LD_INT 21
28433: PUSH
28434: LD_INT 3
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PPUSH
28441: CALL_OW 70
28445: ST_TO_ADDR
// if not tmp then
28446: LD_VAR 0 5
28450: NOT
28451: IFFALSE 28455
// exit ;
28453: GO 28519
// if checkLink then
28455: LD_VAR 0 3
28459: IFFALSE 28509
// begin for i in tmp do
28461: LD_ADDR_VAR 0 6
28465: PUSH
28466: LD_VAR 0 5
28470: PUSH
28471: FOR_IN
28472: IFFALSE 28507
// if GetBase ( i ) <> base then
28474: LD_VAR 0 6
28478: PPUSH
28479: CALL_OW 274
28483: PUSH
28484: LD_VAR 0 1
28488: NONEQUAL
28489: IFFALSE 28505
// ComLinkToBase ( base , i ) ;
28491: LD_VAR 0 1
28495: PPUSH
28496: LD_VAR 0 6
28500: PPUSH
28501: CALL_OW 169
28505: GO 28471
28507: POP
28508: POP
// end ; result := tmp ;
28509: LD_ADDR_VAR 0 4
28513: PUSH
28514: LD_VAR 0 5
28518: ST_TO_ADDR
// end ;
28519: LD_VAR 0 4
28523: RET
// export function ComComplete ( units , b ) ; var i ; begin
28524: LD_INT 0
28526: PPUSH
28527: PPUSH
// if not units then
28528: LD_VAR 0 1
28532: NOT
28533: IFFALSE 28537
// exit ;
28535: GO 28627
// for i in units do
28537: LD_ADDR_VAR 0 4
28541: PUSH
28542: LD_VAR 0 1
28546: PUSH
28547: FOR_IN
28548: IFFALSE 28625
// if BuildingStatus ( b ) = bs_build then
28550: LD_VAR 0 2
28554: PPUSH
28555: CALL_OW 461
28559: PUSH
28560: LD_INT 1
28562: EQUAL
28563: IFFALSE 28623
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28565: LD_VAR 0 4
28569: PPUSH
28570: LD_STRING h
28572: PUSH
28573: LD_VAR 0 2
28577: PPUSH
28578: CALL_OW 250
28582: PUSH
28583: LD_VAR 0 2
28587: PPUSH
28588: CALL_OW 251
28592: PUSH
28593: LD_VAR 0 2
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: LD_INT 0
28603: PUSH
28604: LD_INT 0
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: PUSH
28616: EMPTY
28617: LIST
28618: PPUSH
28619: CALL_OW 446
28623: GO 28547
28625: POP
28626: POP
// end ;
28627: LD_VAR 0 3
28631: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28632: LD_INT 0
28634: PPUSH
28635: PPUSH
28636: PPUSH
28637: PPUSH
28638: PPUSH
28639: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28640: LD_VAR 0 1
28644: NOT
28645: PUSH
28646: LD_VAR 0 1
28650: PPUSH
28651: CALL_OW 263
28655: PUSH
28656: LD_INT 2
28658: EQUAL
28659: NOT
28660: OR
28661: IFFALSE 28665
// exit ;
28663: GO 28981
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28665: LD_ADDR_VAR 0 6
28669: PUSH
28670: LD_INT 22
28672: PUSH
28673: LD_VAR 0 1
28677: PPUSH
28678: CALL_OW 255
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: LD_INT 2
28689: PUSH
28690: LD_INT 30
28692: PUSH
28693: LD_INT 36
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 34
28702: PUSH
28703: LD_INT 31
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: LIST
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PPUSH
28719: CALL_OW 69
28723: ST_TO_ADDR
// if not tmp then
28724: LD_VAR 0 6
28728: NOT
28729: IFFALSE 28733
// exit ;
28731: GO 28981
// result := [ ] ;
28733: LD_ADDR_VAR 0 2
28737: PUSH
28738: EMPTY
28739: ST_TO_ADDR
// for i in tmp do
28740: LD_ADDR_VAR 0 3
28744: PUSH
28745: LD_VAR 0 6
28749: PUSH
28750: FOR_IN
28751: IFFALSE 28822
// begin t := UnitsInside ( i ) ;
28753: LD_ADDR_VAR 0 4
28757: PUSH
28758: LD_VAR 0 3
28762: PPUSH
28763: CALL_OW 313
28767: ST_TO_ADDR
// if t then
28768: LD_VAR 0 4
28772: IFFALSE 28820
// for j in t do
28774: LD_ADDR_VAR 0 7
28778: PUSH
28779: LD_VAR 0 4
28783: PUSH
28784: FOR_IN
28785: IFFALSE 28818
// result := Insert ( result , result + 1 , j ) ;
28787: LD_ADDR_VAR 0 2
28791: PUSH
28792: LD_VAR 0 2
28796: PPUSH
28797: LD_VAR 0 2
28801: PUSH
28802: LD_INT 1
28804: PLUS
28805: PPUSH
28806: LD_VAR 0 7
28810: PPUSH
28811: CALL_OW 2
28815: ST_TO_ADDR
28816: GO 28784
28818: POP
28819: POP
// end ;
28820: GO 28750
28822: POP
28823: POP
// if not result then
28824: LD_VAR 0 2
28828: NOT
28829: IFFALSE 28833
// exit ;
28831: GO 28981
// mech := result [ 1 ] ;
28833: LD_ADDR_VAR 0 5
28837: PUSH
28838: LD_VAR 0 2
28842: PUSH
28843: LD_INT 1
28845: ARRAY
28846: ST_TO_ADDR
// if result > 1 then
28847: LD_VAR 0 2
28851: PUSH
28852: LD_INT 1
28854: GREATER
28855: IFFALSE 28967
// for i = 2 to result do
28857: LD_ADDR_VAR 0 3
28861: PUSH
28862: DOUBLE
28863: LD_INT 2
28865: DEC
28866: ST_TO_ADDR
28867: LD_VAR 0 2
28871: PUSH
28872: FOR_TO
28873: IFFALSE 28965
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28875: LD_ADDR_VAR 0 4
28879: PUSH
28880: LD_VAR 0 2
28884: PUSH
28885: LD_VAR 0 3
28889: ARRAY
28890: PPUSH
28891: LD_INT 3
28893: PPUSH
28894: CALL_OW 259
28898: PUSH
28899: LD_VAR 0 2
28903: PUSH
28904: LD_VAR 0 3
28908: ARRAY
28909: PPUSH
28910: CALL_OW 432
28914: MINUS
28915: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28916: LD_VAR 0 4
28920: PUSH
28921: LD_VAR 0 5
28925: PPUSH
28926: LD_INT 3
28928: PPUSH
28929: CALL_OW 259
28933: PUSH
28934: LD_VAR 0 5
28938: PPUSH
28939: CALL_OW 432
28943: MINUS
28944: GREATEREQUAL
28945: IFFALSE 28963
// mech := result [ i ] ;
28947: LD_ADDR_VAR 0 5
28951: PUSH
28952: LD_VAR 0 2
28956: PUSH
28957: LD_VAR 0 3
28961: ARRAY
28962: ST_TO_ADDR
// end ;
28963: GO 28872
28965: POP
28966: POP
// ComLinkTo ( vehicle , mech ) ;
28967: LD_VAR 0 1
28971: PPUSH
28972: LD_VAR 0 5
28976: PPUSH
28977: CALL_OW 135
// end ;
28981: LD_VAR 0 2
28985: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28986: LD_INT 0
28988: PPUSH
28989: PPUSH
28990: PPUSH
28991: PPUSH
28992: PPUSH
28993: PPUSH
28994: PPUSH
28995: PPUSH
28996: PPUSH
28997: PPUSH
28998: PPUSH
28999: PPUSH
29000: PPUSH
// result := [ ] ;
29001: LD_ADDR_VAR 0 7
29005: PUSH
29006: EMPTY
29007: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29008: LD_VAR 0 1
29012: PPUSH
29013: CALL_OW 266
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: LD_INT 1
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: IN
29028: NOT
29029: IFFALSE 29033
// exit ;
29031: GO 30667
// if name then
29033: LD_VAR 0 3
29037: IFFALSE 29053
// SetBName ( base_dep , name ) ;
29039: LD_VAR 0 1
29043: PPUSH
29044: LD_VAR 0 3
29048: PPUSH
29049: CALL_OW 500
// base := GetBase ( base_dep ) ;
29053: LD_ADDR_VAR 0 15
29057: PUSH
29058: LD_VAR 0 1
29062: PPUSH
29063: CALL_OW 274
29067: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29068: LD_ADDR_VAR 0 16
29072: PUSH
29073: LD_VAR 0 1
29077: PPUSH
29078: CALL_OW 255
29082: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29083: LD_ADDR_VAR 0 17
29087: PUSH
29088: LD_VAR 0 1
29092: PPUSH
29093: CALL_OW 248
29097: ST_TO_ADDR
// if sources then
29098: LD_VAR 0 5
29102: IFFALSE 29149
// for i = 1 to 3 do
29104: LD_ADDR_VAR 0 8
29108: PUSH
29109: DOUBLE
29110: LD_INT 1
29112: DEC
29113: ST_TO_ADDR
29114: LD_INT 3
29116: PUSH
29117: FOR_TO
29118: IFFALSE 29147
// AddResourceType ( base , i , sources [ i ] ) ;
29120: LD_VAR 0 15
29124: PPUSH
29125: LD_VAR 0 8
29129: PPUSH
29130: LD_VAR 0 5
29134: PUSH
29135: LD_VAR 0 8
29139: ARRAY
29140: PPUSH
29141: CALL_OW 276
29145: GO 29117
29147: POP
29148: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29149: LD_ADDR_VAR 0 18
29153: PUSH
29154: LD_VAR 0 15
29158: PPUSH
29159: LD_VAR 0 2
29163: PPUSH
29164: LD_INT 1
29166: PPUSH
29167: CALL 28409 0 3
29171: ST_TO_ADDR
// InitHc ;
29172: CALL_OW 19
// InitUc ;
29176: CALL_OW 18
// uc_side := side ;
29180: LD_ADDR_OWVAR 20
29184: PUSH
29185: LD_VAR 0 16
29189: ST_TO_ADDR
// uc_nation := nation ;
29190: LD_ADDR_OWVAR 21
29194: PUSH
29195: LD_VAR 0 17
29199: ST_TO_ADDR
// if buildings then
29200: LD_VAR 0 18
29204: IFFALSE 30526
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29206: LD_ADDR_VAR 0 19
29210: PUSH
29211: LD_VAR 0 18
29215: PPUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 30
29221: PUSH
29222: LD_INT 29
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 30
29231: PUSH
29232: LD_INT 30
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: PPUSH
29244: CALL_OW 72
29248: ST_TO_ADDR
// if tmp then
29249: LD_VAR 0 19
29253: IFFALSE 29301
// for i in tmp do
29255: LD_ADDR_VAR 0 8
29259: PUSH
29260: LD_VAR 0 19
29264: PUSH
29265: FOR_IN
29266: IFFALSE 29299
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29268: LD_VAR 0 8
29272: PPUSH
29273: CALL_OW 250
29277: PPUSH
29278: LD_VAR 0 8
29282: PPUSH
29283: CALL_OW 251
29287: PPUSH
29288: LD_VAR 0 16
29292: PPUSH
29293: CALL_OW 441
29297: GO 29265
29299: POP
29300: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29301: LD_VAR 0 18
29305: PPUSH
29306: LD_INT 2
29308: PUSH
29309: LD_INT 30
29311: PUSH
29312: LD_INT 32
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 30
29321: PUSH
29322: LD_INT 33
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: LIST
29333: PPUSH
29334: CALL_OW 72
29338: IFFALSE 29426
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29340: LD_ADDR_VAR 0 8
29344: PUSH
29345: LD_VAR 0 18
29349: PPUSH
29350: LD_INT 2
29352: PUSH
29353: LD_INT 30
29355: PUSH
29356: LD_INT 32
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 30
29365: PUSH
29366: LD_INT 33
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: LIST
29377: PPUSH
29378: CALL_OW 72
29382: PUSH
29383: FOR_IN
29384: IFFALSE 29424
// begin if not GetBWeapon ( i ) then
29386: LD_VAR 0 8
29390: PPUSH
29391: CALL_OW 269
29395: NOT
29396: IFFALSE 29422
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29398: LD_VAR 0 8
29402: PPUSH
29403: LD_VAR 0 8
29407: PPUSH
29408: LD_VAR 0 2
29412: PPUSH
29413: CALL 30672 0 2
29417: PPUSH
29418: CALL_OW 431
// end ;
29422: GO 29383
29424: POP
29425: POP
// end ; for i = 1 to personel do
29426: LD_ADDR_VAR 0 8
29430: PUSH
29431: DOUBLE
29432: LD_INT 1
29434: DEC
29435: ST_TO_ADDR
29436: LD_VAR 0 6
29440: PUSH
29441: FOR_TO
29442: IFFALSE 30506
// begin if i > 4 then
29444: LD_VAR 0 8
29448: PUSH
29449: LD_INT 4
29451: GREATER
29452: IFFALSE 29456
// break ;
29454: GO 30506
// case i of 1 :
29456: LD_VAR 0 8
29460: PUSH
29461: LD_INT 1
29463: DOUBLE
29464: EQUAL
29465: IFTRUE 29469
29467: GO 29549
29469: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29470: LD_ADDR_VAR 0 12
29474: PUSH
29475: LD_VAR 0 18
29479: PPUSH
29480: LD_INT 22
29482: PUSH
29483: LD_VAR 0 16
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 58
29494: PUSH
29495: EMPTY
29496: LIST
29497: PUSH
29498: LD_INT 2
29500: PUSH
29501: LD_INT 30
29503: PUSH
29504: LD_INT 32
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 30
29513: PUSH
29514: LD_INT 4
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 30
29523: PUSH
29524: LD_INT 5
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: LIST
29541: PPUSH
29542: CALL_OW 72
29546: ST_TO_ADDR
29547: GO 29771
29549: LD_INT 2
29551: DOUBLE
29552: EQUAL
29553: IFTRUE 29557
29555: GO 29619
29557: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29558: LD_ADDR_VAR 0 12
29562: PUSH
29563: LD_VAR 0 18
29567: PPUSH
29568: LD_INT 22
29570: PUSH
29571: LD_VAR 0 16
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: LD_INT 30
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 30
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: LIST
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PPUSH
29612: CALL_OW 72
29616: ST_TO_ADDR
29617: GO 29771
29619: LD_INT 3
29621: DOUBLE
29622: EQUAL
29623: IFTRUE 29627
29625: GO 29689
29627: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29628: LD_ADDR_VAR 0 12
29632: PUSH
29633: LD_VAR 0 18
29637: PPUSH
29638: LD_INT 22
29640: PUSH
29641: LD_VAR 0 16
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: LD_INT 30
29655: PUSH
29656: LD_INT 2
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 30
29665: PUSH
29666: LD_INT 3
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: LIST
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PPUSH
29682: CALL_OW 72
29686: ST_TO_ADDR
29687: GO 29771
29689: LD_INT 4
29691: DOUBLE
29692: EQUAL
29693: IFTRUE 29697
29695: GO 29770
29697: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29698: LD_ADDR_VAR 0 12
29702: PUSH
29703: LD_VAR 0 18
29707: PPUSH
29708: LD_INT 22
29710: PUSH
29711: LD_VAR 0 16
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: LD_INT 30
29725: PUSH
29726: LD_INT 6
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 30
29735: PUSH
29736: LD_INT 7
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 30
29745: PUSH
29746: LD_INT 8
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PPUSH
29763: CALL_OW 72
29767: ST_TO_ADDR
29768: GO 29771
29770: POP
// if i = 1 then
29771: LD_VAR 0 8
29775: PUSH
29776: LD_INT 1
29778: EQUAL
29779: IFFALSE 29890
// begin tmp := [ ] ;
29781: LD_ADDR_VAR 0 19
29785: PUSH
29786: EMPTY
29787: ST_TO_ADDR
// for j in f do
29788: LD_ADDR_VAR 0 9
29792: PUSH
29793: LD_VAR 0 12
29797: PUSH
29798: FOR_IN
29799: IFFALSE 29872
// if GetBType ( j ) = b_bunker then
29801: LD_VAR 0 9
29805: PPUSH
29806: CALL_OW 266
29810: PUSH
29811: LD_INT 32
29813: EQUAL
29814: IFFALSE 29841
// tmp := Insert ( tmp , 1 , j ) else
29816: LD_ADDR_VAR 0 19
29820: PUSH
29821: LD_VAR 0 19
29825: PPUSH
29826: LD_INT 1
29828: PPUSH
29829: LD_VAR 0 9
29833: PPUSH
29834: CALL_OW 2
29838: ST_TO_ADDR
29839: GO 29870
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29841: LD_ADDR_VAR 0 19
29845: PUSH
29846: LD_VAR 0 19
29850: PPUSH
29851: LD_VAR 0 19
29855: PUSH
29856: LD_INT 1
29858: PLUS
29859: PPUSH
29860: LD_VAR 0 9
29864: PPUSH
29865: CALL_OW 2
29869: ST_TO_ADDR
29870: GO 29798
29872: POP
29873: POP
// if tmp then
29874: LD_VAR 0 19
29878: IFFALSE 29890
// f := tmp ;
29880: LD_ADDR_VAR 0 12
29884: PUSH
29885: LD_VAR 0 19
29889: ST_TO_ADDR
// end ; x := personel [ i ] ;
29890: LD_ADDR_VAR 0 13
29894: PUSH
29895: LD_VAR 0 6
29899: PUSH
29900: LD_VAR 0 8
29904: ARRAY
29905: ST_TO_ADDR
// if x = - 1 then
29906: LD_VAR 0 13
29910: PUSH
29911: LD_INT 1
29913: NEG
29914: EQUAL
29915: IFFALSE 30124
// begin for j in f do
29917: LD_ADDR_VAR 0 9
29921: PUSH
29922: LD_VAR 0 12
29926: PUSH
29927: FOR_IN
29928: IFFALSE 30120
// repeat InitHc ;
29930: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29934: LD_VAR 0 9
29938: PPUSH
29939: CALL_OW 266
29943: PUSH
29944: LD_INT 5
29946: EQUAL
29947: IFFALSE 30017
// begin if UnitsInside ( j ) < 3 then
29949: LD_VAR 0 9
29953: PPUSH
29954: CALL_OW 313
29958: PUSH
29959: LD_INT 3
29961: LESS
29962: IFFALSE 29998
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29964: LD_INT 0
29966: PPUSH
29967: LD_INT 5
29969: PUSH
29970: LD_INT 8
29972: PUSH
29973: LD_INT 9
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: LIST
29980: PUSH
29981: LD_VAR 0 17
29985: ARRAY
29986: PPUSH
29987: LD_VAR 0 4
29991: PPUSH
29992: CALL_OW 380
29996: GO 30015
// PrepareHuman ( false , i , skill ) ;
29998: LD_INT 0
30000: PPUSH
30001: LD_VAR 0 8
30005: PPUSH
30006: LD_VAR 0 4
30010: PPUSH
30011: CALL_OW 380
// end else
30015: GO 30034
// PrepareHuman ( false , i , skill ) ;
30017: LD_INT 0
30019: PPUSH
30020: LD_VAR 0 8
30024: PPUSH
30025: LD_VAR 0 4
30029: PPUSH
30030: CALL_OW 380
// un := CreateHuman ;
30034: LD_ADDR_VAR 0 14
30038: PUSH
30039: CALL_OW 44
30043: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30044: LD_ADDR_VAR 0 7
30048: PUSH
30049: LD_VAR 0 7
30053: PPUSH
30054: LD_INT 1
30056: PPUSH
30057: LD_VAR 0 14
30061: PPUSH
30062: CALL_OW 2
30066: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30067: LD_VAR 0 14
30071: PPUSH
30072: LD_VAR 0 9
30076: PPUSH
30077: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30081: LD_VAR 0 9
30085: PPUSH
30086: CALL_OW 313
30090: PUSH
30091: LD_INT 6
30093: EQUAL
30094: PUSH
30095: LD_VAR 0 9
30099: PPUSH
30100: CALL_OW 266
30104: PUSH
30105: LD_INT 32
30107: PUSH
30108: LD_INT 31
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: IN
30115: OR
30116: IFFALSE 29930
30118: GO 29927
30120: POP
30121: POP
// end else
30122: GO 30504
// for j = 1 to x do
30124: LD_ADDR_VAR 0 9
30128: PUSH
30129: DOUBLE
30130: LD_INT 1
30132: DEC
30133: ST_TO_ADDR
30134: LD_VAR 0 13
30138: PUSH
30139: FOR_TO
30140: IFFALSE 30502
// begin InitHc ;
30142: CALL_OW 19
// if not f then
30146: LD_VAR 0 12
30150: NOT
30151: IFFALSE 30240
// begin PrepareHuman ( false , i , skill ) ;
30153: LD_INT 0
30155: PPUSH
30156: LD_VAR 0 8
30160: PPUSH
30161: LD_VAR 0 4
30165: PPUSH
30166: CALL_OW 380
// un := CreateHuman ;
30170: LD_ADDR_VAR 0 14
30174: PUSH
30175: CALL_OW 44
30179: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30180: LD_ADDR_VAR 0 7
30184: PUSH
30185: LD_VAR 0 7
30189: PPUSH
30190: LD_INT 1
30192: PPUSH
30193: LD_VAR 0 14
30197: PPUSH
30198: CALL_OW 2
30202: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30203: LD_VAR 0 14
30207: PPUSH
30208: LD_VAR 0 1
30212: PPUSH
30213: CALL_OW 250
30217: PPUSH
30218: LD_VAR 0 1
30222: PPUSH
30223: CALL_OW 251
30227: PPUSH
30228: LD_INT 10
30230: PPUSH
30231: LD_INT 0
30233: PPUSH
30234: CALL_OW 50
// continue ;
30238: GO 30139
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30240: LD_VAR 0 12
30244: PUSH
30245: LD_INT 1
30247: ARRAY
30248: PPUSH
30249: CALL_OW 313
30253: PUSH
30254: LD_VAR 0 12
30258: PUSH
30259: LD_INT 1
30261: ARRAY
30262: PPUSH
30263: CALL_OW 266
30267: PUSH
30268: LD_INT 32
30270: PUSH
30271: LD_INT 31
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: IN
30278: AND
30279: PUSH
30280: LD_VAR 0 12
30284: PUSH
30285: LD_INT 1
30287: ARRAY
30288: PPUSH
30289: CALL_OW 313
30293: PUSH
30294: LD_INT 6
30296: EQUAL
30297: OR
30298: IFFALSE 30318
// f := Delete ( f , 1 ) ;
30300: LD_ADDR_VAR 0 12
30304: PUSH
30305: LD_VAR 0 12
30309: PPUSH
30310: LD_INT 1
30312: PPUSH
30313: CALL_OW 3
30317: ST_TO_ADDR
// if not f then
30318: LD_VAR 0 12
30322: NOT
30323: IFFALSE 30341
// begin x := x + 2 ;
30325: LD_ADDR_VAR 0 13
30329: PUSH
30330: LD_VAR 0 13
30334: PUSH
30335: LD_INT 2
30337: PLUS
30338: ST_TO_ADDR
// continue ;
30339: GO 30139
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30341: LD_VAR 0 12
30345: PUSH
30346: LD_INT 1
30348: ARRAY
30349: PPUSH
30350: CALL_OW 266
30354: PUSH
30355: LD_INT 5
30357: EQUAL
30358: IFFALSE 30432
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30360: LD_VAR 0 12
30364: PUSH
30365: LD_INT 1
30367: ARRAY
30368: PPUSH
30369: CALL_OW 313
30373: PUSH
30374: LD_INT 3
30376: LESS
30377: IFFALSE 30413
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30379: LD_INT 0
30381: PPUSH
30382: LD_INT 5
30384: PUSH
30385: LD_INT 8
30387: PUSH
30388: LD_INT 9
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: LIST
30395: PUSH
30396: LD_VAR 0 17
30400: ARRAY
30401: PPUSH
30402: LD_VAR 0 4
30406: PPUSH
30407: CALL_OW 380
30411: GO 30430
// PrepareHuman ( false , i , skill ) ;
30413: LD_INT 0
30415: PPUSH
30416: LD_VAR 0 8
30420: PPUSH
30421: LD_VAR 0 4
30425: PPUSH
30426: CALL_OW 380
// end else
30430: GO 30449
// PrepareHuman ( false , i , skill ) ;
30432: LD_INT 0
30434: PPUSH
30435: LD_VAR 0 8
30439: PPUSH
30440: LD_VAR 0 4
30444: PPUSH
30445: CALL_OW 380
// un := CreateHuman ;
30449: LD_ADDR_VAR 0 14
30453: PUSH
30454: CALL_OW 44
30458: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30459: LD_ADDR_VAR 0 7
30463: PUSH
30464: LD_VAR 0 7
30468: PPUSH
30469: LD_INT 1
30471: PPUSH
30472: LD_VAR 0 14
30476: PPUSH
30477: CALL_OW 2
30481: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30482: LD_VAR 0 14
30486: PPUSH
30487: LD_VAR 0 12
30491: PUSH
30492: LD_INT 1
30494: ARRAY
30495: PPUSH
30496: CALL_OW 52
// end ;
30500: GO 30139
30502: POP
30503: POP
// end ;
30504: GO 29441
30506: POP
30507: POP
// result := result ^ buildings ;
30508: LD_ADDR_VAR 0 7
30512: PUSH
30513: LD_VAR 0 7
30517: PUSH
30518: LD_VAR 0 18
30522: ADD
30523: ST_TO_ADDR
// end else
30524: GO 30667
// begin for i = 1 to personel do
30526: LD_ADDR_VAR 0 8
30530: PUSH
30531: DOUBLE
30532: LD_INT 1
30534: DEC
30535: ST_TO_ADDR
30536: LD_VAR 0 6
30540: PUSH
30541: FOR_TO
30542: IFFALSE 30665
// begin if i > 4 then
30544: LD_VAR 0 8
30548: PUSH
30549: LD_INT 4
30551: GREATER
30552: IFFALSE 30556
// break ;
30554: GO 30665
// x := personel [ i ] ;
30556: LD_ADDR_VAR 0 13
30560: PUSH
30561: LD_VAR 0 6
30565: PUSH
30566: LD_VAR 0 8
30570: ARRAY
30571: ST_TO_ADDR
// if x = - 1 then
30572: LD_VAR 0 13
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: EQUAL
30581: IFFALSE 30585
// continue ;
30583: GO 30541
// PrepareHuman ( false , i , skill ) ;
30585: LD_INT 0
30587: PPUSH
30588: LD_VAR 0 8
30592: PPUSH
30593: LD_VAR 0 4
30597: PPUSH
30598: CALL_OW 380
// un := CreateHuman ;
30602: LD_ADDR_VAR 0 14
30606: PUSH
30607: CALL_OW 44
30611: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30612: LD_VAR 0 14
30616: PPUSH
30617: LD_VAR 0 1
30621: PPUSH
30622: CALL_OW 250
30626: PPUSH
30627: LD_VAR 0 1
30631: PPUSH
30632: CALL_OW 251
30636: PPUSH
30637: LD_INT 10
30639: PPUSH
30640: LD_INT 0
30642: PPUSH
30643: CALL_OW 50
// result := result ^ un ;
30647: LD_ADDR_VAR 0 7
30651: PUSH
30652: LD_VAR 0 7
30656: PUSH
30657: LD_VAR 0 14
30661: ADD
30662: ST_TO_ADDR
// end ;
30663: GO 30541
30665: POP
30666: POP
// end ; end ;
30667: LD_VAR 0 7
30671: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30672: LD_INT 0
30674: PPUSH
30675: PPUSH
30676: PPUSH
30677: PPUSH
30678: PPUSH
30679: PPUSH
30680: PPUSH
30681: PPUSH
30682: PPUSH
30683: PPUSH
30684: PPUSH
30685: PPUSH
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
// result := false ;
30690: LD_ADDR_VAR 0 3
30694: PUSH
30695: LD_INT 0
30697: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30698: LD_VAR 0 1
30702: NOT
30703: PUSH
30704: LD_VAR 0 1
30708: PPUSH
30709: CALL_OW 266
30713: PUSH
30714: LD_INT 32
30716: PUSH
30717: LD_INT 33
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: IN
30724: NOT
30725: OR
30726: IFFALSE 30730
// exit ;
30728: GO 31869
// nat := GetNation ( tower ) ;
30730: LD_ADDR_VAR 0 12
30734: PUSH
30735: LD_VAR 0 1
30739: PPUSH
30740: CALL_OW 248
30744: ST_TO_ADDR
// side := GetSide ( tower ) ;
30745: LD_ADDR_VAR 0 16
30749: PUSH
30750: LD_VAR 0 1
30754: PPUSH
30755: CALL_OW 255
30759: ST_TO_ADDR
// x := GetX ( tower ) ;
30760: LD_ADDR_VAR 0 10
30764: PUSH
30765: LD_VAR 0 1
30769: PPUSH
30770: CALL_OW 250
30774: ST_TO_ADDR
// y := GetY ( tower ) ;
30775: LD_ADDR_VAR 0 11
30779: PUSH
30780: LD_VAR 0 1
30784: PPUSH
30785: CALL_OW 251
30789: ST_TO_ADDR
// if not x or not y then
30790: LD_VAR 0 10
30794: NOT
30795: PUSH
30796: LD_VAR 0 11
30800: NOT
30801: OR
30802: IFFALSE 30806
// exit ;
30804: GO 31869
// weapon := 0 ;
30806: LD_ADDR_VAR 0 18
30810: PUSH
30811: LD_INT 0
30813: ST_TO_ADDR
// fac_list := [ ] ;
30814: LD_ADDR_VAR 0 17
30818: PUSH
30819: EMPTY
30820: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30821: LD_ADDR_VAR 0 6
30825: PUSH
30826: LD_VAR 0 1
30830: PPUSH
30831: CALL_OW 274
30835: PPUSH
30836: LD_VAR 0 2
30840: PPUSH
30841: LD_INT 0
30843: PPUSH
30844: CALL 28409 0 3
30848: PPUSH
30849: LD_INT 30
30851: PUSH
30852: LD_INT 3
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PPUSH
30859: CALL_OW 72
30863: ST_TO_ADDR
// if not factories then
30864: LD_VAR 0 6
30868: NOT
30869: IFFALSE 30873
// exit ;
30871: GO 31869
// for i in factories do
30873: LD_ADDR_VAR 0 8
30877: PUSH
30878: LD_VAR 0 6
30882: PUSH
30883: FOR_IN
30884: IFFALSE 30909
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30886: LD_ADDR_VAR 0 17
30890: PUSH
30891: LD_VAR 0 17
30895: PUSH
30896: LD_VAR 0 8
30900: PPUSH
30901: CALL_OW 478
30905: UNION
30906: ST_TO_ADDR
30907: GO 30883
30909: POP
30910: POP
// if not fac_list then
30911: LD_VAR 0 17
30915: NOT
30916: IFFALSE 30920
// exit ;
30918: GO 31869
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30920: LD_ADDR_VAR 0 5
30924: PUSH
30925: LD_INT 4
30927: PUSH
30928: LD_INT 5
30930: PUSH
30931: LD_INT 9
30933: PUSH
30934: LD_INT 10
30936: PUSH
30937: LD_INT 6
30939: PUSH
30940: LD_INT 7
30942: PUSH
30943: LD_INT 11
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 27
30957: PUSH
30958: LD_INT 28
30960: PUSH
30961: LD_INT 26
30963: PUSH
30964: LD_INT 30
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 43
30975: PUSH
30976: LD_INT 44
30978: PUSH
30979: LD_INT 46
30981: PUSH
30982: LD_INT 45
30984: PUSH
30985: LD_INT 47
30987: PUSH
30988: LD_INT 49
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: LIST
31003: PUSH
31004: LD_VAR 0 12
31008: ARRAY
31009: ST_TO_ADDR
// for i in list do
31010: LD_ADDR_VAR 0 8
31014: PUSH
31015: LD_VAR 0 5
31019: PUSH
31020: FOR_IN
31021: IFFALSE 31054
// if not i in fac_list then
31023: LD_VAR 0 8
31027: PUSH
31028: LD_VAR 0 17
31032: IN
31033: NOT
31034: IFFALSE 31052
// list := list diff i ;
31036: LD_ADDR_VAR 0 5
31040: PUSH
31041: LD_VAR 0 5
31045: PUSH
31046: LD_VAR 0 8
31050: DIFF
31051: ST_TO_ADDR
31052: GO 31020
31054: POP
31055: POP
// if not list then
31056: LD_VAR 0 5
31060: NOT
31061: IFFALSE 31065
// exit ;
31063: GO 31869
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31065: LD_VAR 0 12
31069: PUSH
31070: LD_INT 3
31072: EQUAL
31073: PUSH
31074: LD_INT 49
31076: PUSH
31077: LD_VAR 0 5
31081: IN
31082: AND
31083: PUSH
31084: LD_INT 31
31086: PPUSH
31087: LD_VAR 0 16
31091: PPUSH
31092: CALL_OW 321
31096: PUSH
31097: LD_INT 2
31099: EQUAL
31100: AND
31101: IFFALSE 31161
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31103: LD_INT 22
31105: PUSH
31106: LD_VAR 0 16
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 35
31117: PUSH
31118: LD_INT 49
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 91
31127: PUSH
31128: LD_VAR 0 1
31132: PUSH
31133: LD_INT 10
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: LIST
31145: PPUSH
31146: CALL_OW 69
31150: NOT
31151: IFFALSE 31161
// weapon := ru_time_lapser ;
31153: LD_ADDR_VAR 0 18
31157: PUSH
31158: LD_INT 49
31160: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31161: LD_VAR 0 12
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: IN
31176: PUSH
31177: LD_INT 11
31179: PUSH
31180: LD_VAR 0 5
31184: IN
31185: PUSH
31186: LD_INT 30
31188: PUSH
31189: LD_VAR 0 5
31193: IN
31194: OR
31195: AND
31196: PUSH
31197: LD_INT 6
31199: PPUSH
31200: LD_VAR 0 16
31204: PPUSH
31205: CALL_OW 321
31209: PUSH
31210: LD_INT 2
31212: EQUAL
31213: AND
31214: IFFALSE 31379
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31216: LD_INT 22
31218: PUSH
31219: LD_VAR 0 16
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 2
31230: PUSH
31231: LD_INT 35
31233: PUSH
31234: LD_INT 11
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 35
31243: PUSH
31244: LD_INT 30
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 91
31258: PUSH
31259: LD_VAR 0 1
31263: PUSH
31264: LD_INT 18
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: LIST
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: LIST
31276: PPUSH
31277: CALL_OW 69
31281: NOT
31282: PUSH
31283: LD_INT 22
31285: PUSH
31286: LD_VAR 0 16
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 2
31297: PUSH
31298: LD_INT 30
31300: PUSH
31301: LD_INT 32
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 30
31310: PUSH
31311: LD_INT 33
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 91
31325: PUSH
31326: LD_VAR 0 1
31330: PUSH
31331: LD_INT 12
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: LIST
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: LIST
31343: PUSH
31344: EMPTY
31345: LIST
31346: PPUSH
31347: CALL_OW 69
31351: PUSH
31352: LD_INT 2
31354: GREATER
31355: AND
31356: IFFALSE 31379
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31358: LD_ADDR_VAR 0 18
31362: PUSH
31363: LD_INT 11
31365: PUSH
31366: LD_INT 30
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_VAR 0 12
31377: ARRAY
31378: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31379: LD_VAR 0 18
31383: NOT
31384: PUSH
31385: LD_INT 40
31387: PPUSH
31388: LD_VAR 0 16
31392: PPUSH
31393: CALL_OW 321
31397: PUSH
31398: LD_INT 2
31400: EQUAL
31401: AND
31402: PUSH
31403: LD_INT 7
31405: PUSH
31406: LD_VAR 0 5
31410: IN
31411: PUSH
31412: LD_INT 28
31414: PUSH
31415: LD_VAR 0 5
31419: IN
31420: OR
31421: PUSH
31422: LD_INT 45
31424: PUSH
31425: LD_VAR 0 5
31429: IN
31430: OR
31431: AND
31432: IFFALSE 31686
// begin hex := GetHexInfo ( x , y ) ;
31434: LD_ADDR_VAR 0 4
31438: PUSH
31439: LD_VAR 0 10
31443: PPUSH
31444: LD_VAR 0 11
31448: PPUSH
31449: CALL_OW 546
31453: ST_TO_ADDR
// if hex [ 1 ] then
31454: LD_VAR 0 4
31458: PUSH
31459: LD_INT 1
31461: ARRAY
31462: IFFALSE 31466
// exit ;
31464: GO 31869
// height := hex [ 2 ] ;
31466: LD_ADDR_VAR 0 15
31470: PUSH
31471: LD_VAR 0 4
31475: PUSH
31476: LD_INT 2
31478: ARRAY
31479: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31480: LD_ADDR_VAR 0 14
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: LD_INT 2
31490: PUSH
31491: LD_INT 3
31493: PUSH
31494: LD_INT 5
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: ST_TO_ADDR
// for i in tmp do
31503: LD_ADDR_VAR 0 8
31507: PUSH
31508: LD_VAR 0 14
31512: PUSH
31513: FOR_IN
31514: IFFALSE 31684
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31516: LD_ADDR_VAR 0 9
31520: PUSH
31521: LD_VAR 0 10
31525: PPUSH
31526: LD_VAR 0 8
31530: PPUSH
31531: LD_INT 5
31533: PPUSH
31534: CALL_OW 272
31538: PUSH
31539: LD_VAR 0 11
31543: PPUSH
31544: LD_VAR 0 8
31548: PPUSH
31549: LD_INT 5
31551: PPUSH
31552: CALL_OW 273
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31561: LD_VAR 0 9
31565: PUSH
31566: LD_INT 1
31568: ARRAY
31569: PPUSH
31570: LD_VAR 0 9
31574: PUSH
31575: LD_INT 2
31577: ARRAY
31578: PPUSH
31579: CALL_OW 488
31583: IFFALSE 31682
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31585: LD_ADDR_VAR 0 4
31589: PUSH
31590: LD_VAR 0 9
31594: PUSH
31595: LD_INT 1
31597: ARRAY
31598: PPUSH
31599: LD_VAR 0 9
31603: PUSH
31604: LD_INT 2
31606: ARRAY
31607: PPUSH
31608: CALL_OW 546
31612: ST_TO_ADDR
// if hex [ 1 ] then
31613: LD_VAR 0 4
31617: PUSH
31618: LD_INT 1
31620: ARRAY
31621: IFFALSE 31625
// continue ;
31623: GO 31513
// h := hex [ 2 ] ;
31625: LD_ADDR_VAR 0 13
31629: PUSH
31630: LD_VAR 0 4
31634: PUSH
31635: LD_INT 2
31637: ARRAY
31638: ST_TO_ADDR
// if h + 7 < height then
31639: LD_VAR 0 13
31643: PUSH
31644: LD_INT 7
31646: PLUS
31647: PUSH
31648: LD_VAR 0 15
31652: LESS
31653: IFFALSE 31682
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31655: LD_ADDR_VAR 0 18
31659: PUSH
31660: LD_INT 7
31662: PUSH
31663: LD_INT 28
31665: PUSH
31666: LD_INT 45
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: LIST
31673: PUSH
31674: LD_VAR 0 12
31678: ARRAY
31679: ST_TO_ADDR
// break ;
31680: GO 31684
// end ; end ; end ;
31682: GO 31513
31684: POP
31685: POP
// end ; if not weapon then
31686: LD_VAR 0 18
31690: NOT
31691: IFFALSE 31751
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31693: LD_ADDR_VAR 0 5
31697: PUSH
31698: LD_VAR 0 5
31702: PUSH
31703: LD_INT 11
31705: PUSH
31706: LD_INT 30
31708: PUSH
31709: LD_INT 49
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: DIFF
31717: ST_TO_ADDR
// if not list then
31718: LD_VAR 0 5
31722: NOT
31723: IFFALSE 31727
// exit ;
31725: GO 31869
// weapon := list [ rand ( 1 , list ) ] ;
31727: LD_ADDR_VAR 0 18
31731: PUSH
31732: LD_VAR 0 5
31736: PUSH
31737: LD_INT 1
31739: PPUSH
31740: LD_VAR 0 5
31744: PPUSH
31745: CALL_OW 12
31749: ARRAY
31750: ST_TO_ADDR
// end ; if weapon then
31751: LD_VAR 0 18
31755: IFFALSE 31869
// begin tmp := CostOfWeapon ( weapon ) ;
31757: LD_ADDR_VAR 0 14
31761: PUSH
31762: LD_VAR 0 18
31766: PPUSH
31767: CALL_OW 451
31771: ST_TO_ADDR
// j := GetBase ( tower ) ;
31772: LD_ADDR_VAR 0 9
31776: PUSH
31777: LD_VAR 0 1
31781: PPUSH
31782: CALL_OW 274
31786: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31787: LD_VAR 0 9
31791: PPUSH
31792: LD_INT 1
31794: PPUSH
31795: CALL_OW 275
31799: PUSH
31800: LD_VAR 0 14
31804: PUSH
31805: LD_INT 1
31807: ARRAY
31808: GREATEREQUAL
31809: PUSH
31810: LD_VAR 0 9
31814: PPUSH
31815: LD_INT 2
31817: PPUSH
31818: CALL_OW 275
31822: PUSH
31823: LD_VAR 0 14
31827: PUSH
31828: LD_INT 2
31830: ARRAY
31831: GREATEREQUAL
31832: AND
31833: PUSH
31834: LD_VAR 0 9
31838: PPUSH
31839: LD_INT 3
31841: PPUSH
31842: CALL_OW 275
31846: PUSH
31847: LD_VAR 0 14
31851: PUSH
31852: LD_INT 3
31854: ARRAY
31855: GREATEREQUAL
31856: AND
31857: IFFALSE 31869
// result := weapon ;
31859: LD_ADDR_VAR 0 3
31863: PUSH
31864: LD_VAR 0 18
31868: ST_TO_ADDR
// end ; end ;
31869: LD_VAR 0 3
31873: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31874: LD_INT 0
31876: PPUSH
31877: PPUSH
// result := true ;
31878: LD_ADDR_VAR 0 3
31882: PUSH
31883: LD_INT 1
31885: ST_TO_ADDR
// if array1 = array2 then
31886: LD_VAR 0 1
31890: PUSH
31891: LD_VAR 0 2
31895: EQUAL
31896: IFFALSE 31956
// begin for i = 1 to array1 do
31898: LD_ADDR_VAR 0 4
31902: PUSH
31903: DOUBLE
31904: LD_INT 1
31906: DEC
31907: ST_TO_ADDR
31908: LD_VAR 0 1
31912: PUSH
31913: FOR_TO
31914: IFFALSE 31952
// if array1 [ i ] <> array2 [ i ] then
31916: LD_VAR 0 1
31920: PUSH
31921: LD_VAR 0 4
31925: ARRAY
31926: PUSH
31927: LD_VAR 0 2
31931: PUSH
31932: LD_VAR 0 4
31936: ARRAY
31937: NONEQUAL
31938: IFFALSE 31950
// begin result := false ;
31940: LD_ADDR_VAR 0 3
31944: PUSH
31945: LD_INT 0
31947: ST_TO_ADDR
// break ;
31948: GO 31952
// end ;
31950: GO 31913
31952: POP
31953: POP
// end else
31954: GO 31964
// result := false ;
31956: LD_ADDR_VAR 0 3
31960: PUSH
31961: LD_INT 0
31963: ST_TO_ADDR
// end ;
31964: LD_VAR 0 3
31968: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31969: LD_INT 0
31971: PPUSH
31972: PPUSH
// if not array1 or not array2 then
31973: LD_VAR 0 1
31977: NOT
31978: PUSH
31979: LD_VAR 0 2
31983: NOT
31984: OR
31985: IFFALSE 31989
// exit ;
31987: GO 32053
// result := true ;
31989: LD_ADDR_VAR 0 3
31993: PUSH
31994: LD_INT 1
31996: ST_TO_ADDR
// for i = 1 to array1 do
31997: LD_ADDR_VAR 0 4
32001: PUSH
32002: DOUBLE
32003: LD_INT 1
32005: DEC
32006: ST_TO_ADDR
32007: LD_VAR 0 1
32011: PUSH
32012: FOR_TO
32013: IFFALSE 32051
// if array1 [ i ] <> array2 [ i ] then
32015: LD_VAR 0 1
32019: PUSH
32020: LD_VAR 0 4
32024: ARRAY
32025: PUSH
32026: LD_VAR 0 2
32030: PUSH
32031: LD_VAR 0 4
32035: ARRAY
32036: NONEQUAL
32037: IFFALSE 32049
// begin result := false ;
32039: LD_ADDR_VAR 0 3
32043: PUSH
32044: LD_INT 0
32046: ST_TO_ADDR
// break ;
32047: GO 32051
// end ;
32049: GO 32012
32051: POP
32052: POP
// end ;
32053: LD_VAR 0 3
32057: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32058: LD_INT 0
32060: PPUSH
32061: PPUSH
32062: PPUSH
// pom := GetBase ( fac ) ;
32063: LD_ADDR_VAR 0 5
32067: PUSH
32068: LD_VAR 0 1
32072: PPUSH
32073: CALL_OW 274
32077: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32078: LD_ADDR_VAR 0 4
32082: PUSH
32083: LD_VAR 0 2
32087: PUSH
32088: LD_INT 1
32090: ARRAY
32091: PPUSH
32092: LD_VAR 0 2
32096: PUSH
32097: LD_INT 2
32099: ARRAY
32100: PPUSH
32101: LD_VAR 0 2
32105: PUSH
32106: LD_INT 3
32108: ARRAY
32109: PPUSH
32110: LD_VAR 0 2
32114: PUSH
32115: LD_INT 4
32117: ARRAY
32118: PPUSH
32119: CALL_OW 449
32123: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32124: LD_ADDR_VAR 0 3
32128: PUSH
32129: LD_VAR 0 5
32133: PPUSH
32134: LD_INT 1
32136: PPUSH
32137: CALL_OW 275
32141: PUSH
32142: LD_VAR 0 4
32146: PUSH
32147: LD_INT 1
32149: ARRAY
32150: GREATEREQUAL
32151: PUSH
32152: LD_VAR 0 5
32156: PPUSH
32157: LD_INT 2
32159: PPUSH
32160: CALL_OW 275
32164: PUSH
32165: LD_VAR 0 4
32169: PUSH
32170: LD_INT 2
32172: ARRAY
32173: GREATEREQUAL
32174: AND
32175: PUSH
32176: LD_VAR 0 5
32180: PPUSH
32181: LD_INT 3
32183: PPUSH
32184: CALL_OW 275
32188: PUSH
32189: LD_VAR 0 4
32193: PUSH
32194: LD_INT 3
32196: ARRAY
32197: GREATEREQUAL
32198: AND
32199: ST_TO_ADDR
// end ;
32200: LD_VAR 0 3
32204: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32205: LD_INT 0
32207: PPUSH
32208: PPUSH
32209: PPUSH
32210: PPUSH
// pom := GetBase ( building ) ;
32211: LD_ADDR_VAR 0 3
32215: PUSH
32216: LD_VAR 0 1
32220: PPUSH
32221: CALL_OW 274
32225: ST_TO_ADDR
// if not pom then
32226: LD_VAR 0 3
32230: NOT
32231: IFFALSE 32235
// exit ;
32233: GO 32405
// btype := GetBType ( building ) ;
32235: LD_ADDR_VAR 0 5
32239: PUSH
32240: LD_VAR 0 1
32244: PPUSH
32245: CALL_OW 266
32249: ST_TO_ADDR
// if btype = b_armoury then
32250: LD_VAR 0 5
32254: PUSH
32255: LD_INT 4
32257: EQUAL
32258: IFFALSE 32268
// btype := b_barracks ;
32260: LD_ADDR_VAR 0 5
32264: PUSH
32265: LD_INT 5
32267: ST_TO_ADDR
// if btype = b_depot then
32268: LD_VAR 0 5
32272: PUSH
32273: LD_INT 0
32275: EQUAL
32276: IFFALSE 32286
// btype := b_warehouse ;
32278: LD_ADDR_VAR 0 5
32282: PUSH
32283: LD_INT 1
32285: ST_TO_ADDR
// if btype = b_workshop then
32286: LD_VAR 0 5
32290: PUSH
32291: LD_INT 2
32293: EQUAL
32294: IFFALSE 32304
// btype := b_factory ;
32296: LD_ADDR_VAR 0 5
32300: PUSH
32301: LD_INT 3
32303: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32304: LD_ADDR_VAR 0 4
32308: PUSH
32309: LD_VAR 0 5
32313: PPUSH
32314: LD_VAR 0 1
32318: PPUSH
32319: CALL_OW 248
32323: PPUSH
32324: CALL_OW 450
32328: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32329: LD_ADDR_VAR 0 2
32333: PUSH
32334: LD_VAR 0 3
32338: PPUSH
32339: LD_INT 1
32341: PPUSH
32342: CALL_OW 275
32346: PUSH
32347: LD_VAR 0 4
32351: PUSH
32352: LD_INT 1
32354: ARRAY
32355: GREATEREQUAL
32356: PUSH
32357: LD_VAR 0 3
32361: PPUSH
32362: LD_INT 2
32364: PPUSH
32365: CALL_OW 275
32369: PUSH
32370: LD_VAR 0 4
32374: PUSH
32375: LD_INT 2
32377: ARRAY
32378: GREATEREQUAL
32379: AND
32380: PUSH
32381: LD_VAR 0 3
32385: PPUSH
32386: LD_INT 3
32388: PPUSH
32389: CALL_OW 275
32393: PUSH
32394: LD_VAR 0 4
32398: PUSH
32399: LD_INT 3
32401: ARRAY
32402: GREATEREQUAL
32403: AND
32404: ST_TO_ADDR
// end ;
32405: LD_VAR 0 2
32409: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32410: LD_INT 0
32412: PPUSH
32413: PPUSH
32414: PPUSH
// pom := GetBase ( building ) ;
32415: LD_ADDR_VAR 0 4
32419: PUSH
32420: LD_VAR 0 1
32424: PPUSH
32425: CALL_OW 274
32429: ST_TO_ADDR
// if not pom then
32430: LD_VAR 0 4
32434: NOT
32435: IFFALSE 32439
// exit ;
32437: GO 32540
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32439: LD_ADDR_VAR 0 5
32443: PUSH
32444: LD_VAR 0 2
32448: PPUSH
32449: LD_VAR 0 1
32453: PPUSH
32454: CALL_OW 248
32458: PPUSH
32459: CALL_OW 450
32463: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32464: LD_ADDR_VAR 0 3
32468: PUSH
32469: LD_VAR 0 4
32473: PPUSH
32474: LD_INT 1
32476: PPUSH
32477: CALL_OW 275
32481: PUSH
32482: LD_VAR 0 5
32486: PUSH
32487: LD_INT 1
32489: ARRAY
32490: GREATEREQUAL
32491: PUSH
32492: LD_VAR 0 4
32496: PPUSH
32497: LD_INT 2
32499: PPUSH
32500: CALL_OW 275
32504: PUSH
32505: LD_VAR 0 5
32509: PUSH
32510: LD_INT 2
32512: ARRAY
32513: GREATEREQUAL
32514: AND
32515: PUSH
32516: LD_VAR 0 4
32520: PPUSH
32521: LD_INT 3
32523: PPUSH
32524: CALL_OW 275
32528: PUSH
32529: LD_VAR 0 5
32533: PUSH
32534: LD_INT 3
32536: ARRAY
32537: GREATEREQUAL
32538: AND
32539: ST_TO_ADDR
// end ;
32540: LD_VAR 0 3
32544: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32545: LD_INT 0
32547: PPUSH
32548: PPUSH
32549: PPUSH
32550: PPUSH
32551: PPUSH
32552: PPUSH
32553: PPUSH
32554: PPUSH
32555: PPUSH
32556: PPUSH
32557: PPUSH
// result := false ;
32558: LD_ADDR_VAR 0 8
32562: PUSH
32563: LD_INT 0
32565: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32566: LD_VAR 0 5
32570: NOT
32571: PUSH
32572: LD_VAR 0 1
32576: NOT
32577: OR
32578: PUSH
32579: LD_VAR 0 2
32583: NOT
32584: OR
32585: PUSH
32586: LD_VAR 0 3
32590: NOT
32591: OR
32592: IFFALSE 32596
// exit ;
32594: GO 33410
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32596: LD_ADDR_VAR 0 14
32600: PUSH
32601: LD_VAR 0 1
32605: PPUSH
32606: LD_VAR 0 2
32610: PPUSH
32611: LD_VAR 0 3
32615: PPUSH
32616: LD_VAR 0 4
32620: PPUSH
32621: LD_VAR 0 5
32625: PUSH
32626: LD_INT 1
32628: ARRAY
32629: PPUSH
32630: CALL_OW 248
32634: PPUSH
32635: LD_INT 0
32637: PPUSH
32638: CALL 34247 0 6
32642: ST_TO_ADDR
// if not hexes then
32643: LD_VAR 0 14
32647: NOT
32648: IFFALSE 32652
// exit ;
32650: GO 33410
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32652: LD_ADDR_VAR 0 17
32656: PUSH
32657: LD_VAR 0 5
32661: PPUSH
32662: LD_INT 22
32664: PUSH
32665: LD_VAR 0 13
32669: PPUSH
32670: CALL_OW 255
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: LD_INT 30
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 30
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: LIST
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PPUSH
32711: CALL_OW 72
32715: ST_TO_ADDR
// for i = 1 to hexes do
32716: LD_ADDR_VAR 0 9
32720: PUSH
32721: DOUBLE
32722: LD_INT 1
32724: DEC
32725: ST_TO_ADDR
32726: LD_VAR 0 14
32730: PUSH
32731: FOR_TO
32732: IFFALSE 33408
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32734: LD_ADDR_VAR 0 13
32738: PUSH
32739: LD_VAR 0 14
32743: PUSH
32744: LD_VAR 0 9
32748: ARRAY
32749: PUSH
32750: LD_INT 1
32752: ARRAY
32753: PPUSH
32754: LD_VAR 0 14
32758: PUSH
32759: LD_VAR 0 9
32763: ARRAY
32764: PUSH
32765: LD_INT 2
32767: ARRAY
32768: PPUSH
32769: CALL_OW 428
32773: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32774: LD_VAR 0 14
32778: PUSH
32779: LD_VAR 0 9
32783: ARRAY
32784: PUSH
32785: LD_INT 1
32787: ARRAY
32788: PPUSH
32789: LD_VAR 0 14
32793: PUSH
32794: LD_VAR 0 9
32798: ARRAY
32799: PUSH
32800: LD_INT 2
32802: ARRAY
32803: PPUSH
32804: CALL_OW 351
32808: PUSH
32809: LD_VAR 0 14
32813: PUSH
32814: LD_VAR 0 9
32818: ARRAY
32819: PUSH
32820: LD_INT 1
32822: ARRAY
32823: PPUSH
32824: LD_VAR 0 14
32828: PUSH
32829: LD_VAR 0 9
32833: ARRAY
32834: PUSH
32835: LD_INT 2
32837: ARRAY
32838: PPUSH
32839: CALL_OW 488
32843: NOT
32844: OR
32845: PUSH
32846: LD_VAR 0 13
32850: PPUSH
32851: CALL_OW 247
32855: PUSH
32856: LD_INT 3
32858: EQUAL
32859: OR
32860: IFFALSE 32866
// exit ;
32862: POP
32863: POP
32864: GO 33410
// if not tmp then
32866: LD_VAR 0 13
32870: NOT
32871: IFFALSE 32875
// continue ;
32873: GO 32731
// result := true ;
32875: LD_ADDR_VAR 0 8
32879: PUSH
32880: LD_INT 1
32882: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32883: LD_VAR 0 6
32887: PUSH
32888: LD_VAR 0 13
32892: PPUSH
32893: CALL_OW 247
32897: PUSH
32898: LD_INT 2
32900: EQUAL
32901: AND
32902: PUSH
32903: LD_VAR 0 13
32907: PPUSH
32908: CALL_OW 263
32912: PUSH
32913: LD_INT 1
32915: EQUAL
32916: AND
32917: IFFALSE 33081
// begin if IsDrivenBy ( tmp ) then
32919: LD_VAR 0 13
32923: PPUSH
32924: CALL_OW 311
32928: IFFALSE 32932
// continue ;
32930: GO 32731
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32932: LD_VAR 0 6
32936: PPUSH
32937: LD_INT 3
32939: PUSH
32940: LD_INT 60
32942: PUSH
32943: EMPTY
32944: LIST
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 3
32952: PUSH
32953: LD_INT 55
32955: PUSH
32956: EMPTY
32957: LIST
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PPUSH
32967: CALL_OW 72
32971: IFFALSE 33079
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32973: LD_ADDR_VAR 0 18
32977: PUSH
32978: LD_VAR 0 6
32982: PPUSH
32983: LD_INT 3
32985: PUSH
32986: LD_INT 60
32988: PUSH
32989: EMPTY
32990: LIST
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 3
32998: PUSH
32999: LD_INT 55
33001: PUSH
33002: EMPTY
33003: LIST
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PPUSH
33013: CALL_OW 72
33017: PUSH
33018: LD_INT 1
33020: ARRAY
33021: ST_TO_ADDR
// if IsInUnit ( driver ) then
33022: LD_VAR 0 18
33026: PPUSH
33027: CALL_OW 310
33031: IFFALSE 33042
// ComExit ( driver ) ;
33033: LD_VAR 0 18
33037: PPUSH
33038: CALL 57431 0 1
// AddComEnterUnit ( driver , tmp ) ;
33042: LD_VAR 0 18
33046: PPUSH
33047: LD_VAR 0 13
33051: PPUSH
33052: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33056: LD_VAR 0 18
33060: PPUSH
33061: LD_VAR 0 7
33065: PPUSH
33066: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33070: LD_VAR 0 18
33074: PPUSH
33075: CALL_OW 181
// end ; continue ;
33079: GO 32731
// end ; if not cleaners or not tmp in cleaners then
33081: LD_VAR 0 6
33085: NOT
33086: PUSH
33087: LD_VAR 0 13
33091: PUSH
33092: LD_VAR 0 6
33096: IN
33097: NOT
33098: OR
33099: IFFALSE 33406
// begin if dep then
33101: LD_VAR 0 17
33105: IFFALSE 33241
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33107: LD_ADDR_VAR 0 16
33111: PUSH
33112: LD_VAR 0 17
33116: PUSH
33117: LD_INT 1
33119: ARRAY
33120: PPUSH
33121: CALL_OW 250
33125: PPUSH
33126: LD_VAR 0 17
33130: PUSH
33131: LD_INT 1
33133: ARRAY
33134: PPUSH
33135: CALL_OW 254
33139: PPUSH
33140: LD_INT 5
33142: PPUSH
33143: CALL_OW 272
33147: PUSH
33148: LD_VAR 0 17
33152: PUSH
33153: LD_INT 1
33155: ARRAY
33156: PPUSH
33157: CALL_OW 251
33161: PPUSH
33162: LD_VAR 0 17
33166: PUSH
33167: LD_INT 1
33169: ARRAY
33170: PPUSH
33171: CALL_OW 254
33175: PPUSH
33176: LD_INT 5
33178: PPUSH
33179: CALL_OW 273
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33188: LD_VAR 0 16
33192: PUSH
33193: LD_INT 1
33195: ARRAY
33196: PPUSH
33197: LD_VAR 0 16
33201: PUSH
33202: LD_INT 2
33204: ARRAY
33205: PPUSH
33206: CALL_OW 488
33210: IFFALSE 33241
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33212: LD_VAR 0 13
33216: PPUSH
33217: LD_VAR 0 16
33221: PUSH
33222: LD_INT 1
33224: ARRAY
33225: PPUSH
33226: LD_VAR 0 16
33230: PUSH
33231: LD_INT 2
33233: ARRAY
33234: PPUSH
33235: CALL_OW 111
// continue ;
33239: GO 32731
// end ; end ; r := GetDir ( tmp ) ;
33241: LD_ADDR_VAR 0 15
33245: PUSH
33246: LD_VAR 0 13
33250: PPUSH
33251: CALL_OW 254
33255: ST_TO_ADDR
// if r = 5 then
33256: LD_VAR 0 15
33260: PUSH
33261: LD_INT 5
33263: EQUAL
33264: IFFALSE 33274
// r := 0 ;
33266: LD_ADDR_VAR 0 15
33270: PUSH
33271: LD_INT 0
33273: ST_TO_ADDR
// for j = r to 5 do
33274: LD_ADDR_VAR 0 10
33278: PUSH
33279: DOUBLE
33280: LD_VAR 0 15
33284: DEC
33285: ST_TO_ADDR
33286: LD_INT 5
33288: PUSH
33289: FOR_TO
33290: IFFALSE 33404
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33292: LD_ADDR_VAR 0 11
33296: PUSH
33297: LD_VAR 0 13
33301: PPUSH
33302: CALL_OW 250
33306: PPUSH
33307: LD_VAR 0 10
33311: PPUSH
33312: LD_INT 2
33314: PPUSH
33315: CALL_OW 272
33319: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33320: LD_ADDR_VAR 0 12
33324: PUSH
33325: LD_VAR 0 13
33329: PPUSH
33330: CALL_OW 251
33334: PPUSH
33335: LD_VAR 0 10
33339: PPUSH
33340: LD_INT 2
33342: PPUSH
33343: CALL_OW 273
33347: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33348: LD_VAR 0 11
33352: PPUSH
33353: LD_VAR 0 12
33357: PPUSH
33358: CALL_OW 488
33362: PUSH
33363: LD_VAR 0 11
33367: PPUSH
33368: LD_VAR 0 12
33372: PPUSH
33373: CALL_OW 428
33377: NOT
33378: AND
33379: IFFALSE 33402
// begin ComMoveXY ( tmp , _x , _y ) ;
33381: LD_VAR 0 13
33385: PPUSH
33386: LD_VAR 0 11
33390: PPUSH
33391: LD_VAR 0 12
33395: PPUSH
33396: CALL_OW 111
// break ;
33400: GO 33404
// end ; end ;
33402: GO 33289
33404: POP
33405: POP
// end ; end ;
33406: GO 32731
33408: POP
33409: POP
// end ;
33410: LD_VAR 0 8
33414: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33415: LD_INT 0
33417: PPUSH
33418: PPUSH
33419: PPUSH
33420: PPUSH
33421: PPUSH
33422: PPUSH
33423: PPUSH
33424: PPUSH
33425: PPUSH
33426: PPUSH
// result := false ;
33427: LD_ADDR_VAR 0 6
33431: PUSH
33432: LD_INT 0
33434: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33435: LD_VAR 0 1
33439: NOT
33440: PUSH
33441: LD_VAR 0 1
33445: PPUSH
33446: CALL_OW 266
33450: PUSH
33451: LD_INT 0
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: IN
33461: NOT
33462: OR
33463: PUSH
33464: LD_VAR 0 2
33468: NOT
33469: OR
33470: PUSH
33471: LD_VAR 0 5
33475: PUSH
33476: LD_INT 0
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: LD_INT 2
33484: PUSH
33485: LD_INT 3
33487: PUSH
33488: LD_INT 4
33490: PUSH
33491: LD_INT 5
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: IN
33502: NOT
33503: OR
33504: PUSH
33505: LD_VAR 0 3
33509: PPUSH
33510: LD_VAR 0 4
33514: PPUSH
33515: CALL_OW 488
33519: NOT
33520: OR
33521: IFFALSE 33525
// exit ;
33523: GO 34242
// pom := GetBase ( depot ) ;
33525: LD_ADDR_VAR 0 10
33529: PUSH
33530: LD_VAR 0 1
33534: PPUSH
33535: CALL_OW 274
33539: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33540: LD_ADDR_VAR 0 11
33544: PUSH
33545: LD_VAR 0 2
33549: PPUSH
33550: LD_VAR 0 1
33554: PPUSH
33555: CALL_OW 248
33559: PPUSH
33560: CALL_OW 450
33564: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33565: LD_VAR 0 10
33569: PPUSH
33570: LD_INT 1
33572: PPUSH
33573: CALL_OW 275
33577: PUSH
33578: LD_VAR 0 11
33582: PUSH
33583: LD_INT 1
33585: ARRAY
33586: GREATEREQUAL
33587: PUSH
33588: LD_VAR 0 10
33592: PPUSH
33593: LD_INT 2
33595: PPUSH
33596: CALL_OW 275
33600: PUSH
33601: LD_VAR 0 11
33605: PUSH
33606: LD_INT 2
33608: ARRAY
33609: GREATEREQUAL
33610: AND
33611: PUSH
33612: LD_VAR 0 10
33616: PPUSH
33617: LD_INT 3
33619: PPUSH
33620: CALL_OW 275
33624: PUSH
33625: LD_VAR 0 11
33629: PUSH
33630: LD_INT 3
33632: ARRAY
33633: GREATEREQUAL
33634: AND
33635: NOT
33636: IFFALSE 33640
// exit ;
33638: GO 34242
// if GetBType ( depot ) = b_depot then
33640: LD_VAR 0 1
33644: PPUSH
33645: CALL_OW 266
33649: PUSH
33650: LD_INT 0
33652: EQUAL
33653: IFFALSE 33665
// dist := 28 else
33655: LD_ADDR_VAR 0 14
33659: PUSH
33660: LD_INT 28
33662: ST_TO_ADDR
33663: GO 33673
// dist := 36 ;
33665: LD_ADDR_VAR 0 14
33669: PUSH
33670: LD_INT 36
33672: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33673: LD_VAR 0 1
33677: PPUSH
33678: LD_VAR 0 3
33682: PPUSH
33683: LD_VAR 0 4
33687: PPUSH
33688: CALL_OW 297
33692: PUSH
33693: LD_VAR 0 14
33697: GREATER
33698: IFFALSE 33702
// exit ;
33700: GO 34242
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33702: LD_ADDR_VAR 0 12
33706: PUSH
33707: LD_VAR 0 2
33711: PPUSH
33712: LD_VAR 0 3
33716: PPUSH
33717: LD_VAR 0 4
33721: PPUSH
33722: LD_VAR 0 5
33726: PPUSH
33727: LD_VAR 0 1
33731: PPUSH
33732: CALL_OW 248
33736: PPUSH
33737: LD_INT 0
33739: PPUSH
33740: CALL 34247 0 6
33744: ST_TO_ADDR
// if not hexes then
33745: LD_VAR 0 12
33749: NOT
33750: IFFALSE 33754
// exit ;
33752: GO 34242
// hex := GetHexInfo ( x , y ) ;
33754: LD_ADDR_VAR 0 15
33758: PUSH
33759: LD_VAR 0 3
33763: PPUSH
33764: LD_VAR 0 4
33768: PPUSH
33769: CALL_OW 546
33773: ST_TO_ADDR
// if hex [ 1 ] then
33774: LD_VAR 0 15
33778: PUSH
33779: LD_INT 1
33781: ARRAY
33782: IFFALSE 33786
// exit ;
33784: GO 34242
// height := hex [ 2 ] ;
33786: LD_ADDR_VAR 0 13
33790: PUSH
33791: LD_VAR 0 15
33795: PUSH
33796: LD_INT 2
33798: ARRAY
33799: ST_TO_ADDR
// for i = 1 to hexes do
33800: LD_ADDR_VAR 0 7
33804: PUSH
33805: DOUBLE
33806: LD_INT 1
33808: DEC
33809: ST_TO_ADDR
33810: LD_VAR 0 12
33814: PUSH
33815: FOR_TO
33816: IFFALSE 34146
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33818: LD_VAR 0 12
33822: PUSH
33823: LD_VAR 0 7
33827: ARRAY
33828: PUSH
33829: LD_INT 1
33831: ARRAY
33832: PPUSH
33833: LD_VAR 0 12
33837: PUSH
33838: LD_VAR 0 7
33842: ARRAY
33843: PUSH
33844: LD_INT 2
33846: ARRAY
33847: PPUSH
33848: CALL_OW 488
33852: NOT
33853: PUSH
33854: LD_VAR 0 12
33858: PUSH
33859: LD_VAR 0 7
33863: ARRAY
33864: PUSH
33865: LD_INT 1
33867: ARRAY
33868: PPUSH
33869: LD_VAR 0 12
33873: PUSH
33874: LD_VAR 0 7
33878: ARRAY
33879: PUSH
33880: LD_INT 2
33882: ARRAY
33883: PPUSH
33884: CALL_OW 428
33888: PUSH
33889: LD_INT 0
33891: GREATER
33892: OR
33893: PUSH
33894: LD_VAR 0 12
33898: PUSH
33899: LD_VAR 0 7
33903: ARRAY
33904: PUSH
33905: LD_INT 1
33907: ARRAY
33908: PPUSH
33909: LD_VAR 0 12
33913: PUSH
33914: LD_VAR 0 7
33918: ARRAY
33919: PUSH
33920: LD_INT 2
33922: ARRAY
33923: PPUSH
33924: CALL_OW 351
33928: OR
33929: IFFALSE 33935
// exit ;
33931: POP
33932: POP
33933: GO 34242
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33935: LD_ADDR_VAR 0 8
33939: PUSH
33940: LD_VAR 0 12
33944: PUSH
33945: LD_VAR 0 7
33949: ARRAY
33950: PUSH
33951: LD_INT 1
33953: ARRAY
33954: PPUSH
33955: LD_VAR 0 12
33959: PUSH
33960: LD_VAR 0 7
33964: ARRAY
33965: PUSH
33966: LD_INT 2
33968: ARRAY
33969: PPUSH
33970: CALL_OW 546
33974: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33975: LD_VAR 0 8
33979: PUSH
33980: LD_INT 1
33982: ARRAY
33983: PUSH
33984: LD_VAR 0 8
33988: PUSH
33989: LD_INT 2
33991: ARRAY
33992: PUSH
33993: LD_VAR 0 13
33997: PUSH
33998: LD_INT 2
34000: PLUS
34001: GREATER
34002: OR
34003: PUSH
34004: LD_VAR 0 8
34008: PUSH
34009: LD_INT 2
34011: ARRAY
34012: PUSH
34013: LD_VAR 0 13
34017: PUSH
34018: LD_INT 2
34020: MINUS
34021: LESS
34022: OR
34023: PUSH
34024: LD_VAR 0 8
34028: PUSH
34029: LD_INT 3
34031: ARRAY
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: LD_INT 8
34038: PUSH
34039: LD_INT 9
34041: PUSH
34042: LD_INT 10
34044: PUSH
34045: LD_INT 11
34047: PUSH
34048: LD_INT 12
34050: PUSH
34051: LD_INT 13
34053: PUSH
34054: LD_INT 16
34056: PUSH
34057: LD_INT 17
34059: PUSH
34060: LD_INT 18
34062: PUSH
34063: LD_INT 19
34065: PUSH
34066: LD_INT 20
34068: PUSH
34069: LD_INT 21
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: IN
34087: NOT
34088: OR
34089: PUSH
34090: LD_VAR 0 8
34094: PUSH
34095: LD_INT 5
34097: ARRAY
34098: NOT
34099: OR
34100: PUSH
34101: LD_VAR 0 8
34105: PUSH
34106: LD_INT 6
34108: ARRAY
34109: PUSH
34110: LD_INT 1
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: LD_INT 7
34118: PUSH
34119: LD_INT 9
34121: PUSH
34122: LD_INT 10
34124: PUSH
34125: LD_INT 11
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: IN
34136: NOT
34137: OR
34138: IFFALSE 34144
// exit ;
34140: POP
34141: POP
34142: GO 34242
// end ;
34144: GO 33815
34146: POP
34147: POP
// side := GetSide ( depot ) ;
34148: LD_ADDR_VAR 0 9
34152: PUSH
34153: LD_VAR 0 1
34157: PPUSH
34158: CALL_OW 255
34162: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34163: LD_VAR 0 9
34167: PPUSH
34168: LD_VAR 0 3
34172: PPUSH
34173: LD_VAR 0 4
34177: PPUSH
34178: LD_INT 20
34180: PPUSH
34181: CALL 26563 0 4
34185: PUSH
34186: LD_INT 4
34188: ARRAY
34189: IFFALSE 34193
// exit ;
34191: GO 34242
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34193: LD_VAR 0 2
34197: PUSH
34198: LD_INT 29
34200: PUSH
34201: LD_INT 30
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: IN
34208: PUSH
34209: LD_VAR 0 3
34213: PPUSH
34214: LD_VAR 0 4
34218: PPUSH
34219: LD_VAR 0 9
34223: PPUSH
34224: CALL_OW 440
34228: NOT
34229: AND
34230: IFFALSE 34234
// exit ;
34232: GO 34242
// result := true ;
34234: LD_ADDR_VAR 0 6
34238: PUSH
34239: LD_INT 1
34241: ST_TO_ADDR
// end ;
34242: LD_VAR 0 6
34246: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34247: LD_INT 0
34249: PPUSH
34250: PPUSH
34251: PPUSH
34252: PPUSH
34253: PPUSH
34254: PPUSH
34255: PPUSH
34256: PPUSH
34257: PPUSH
34258: PPUSH
34259: PPUSH
34260: PPUSH
34261: PPUSH
34262: PPUSH
34263: PPUSH
34264: PPUSH
34265: PPUSH
34266: PPUSH
34267: PPUSH
34268: PPUSH
34269: PPUSH
34270: PPUSH
34271: PPUSH
34272: PPUSH
34273: PPUSH
34274: PPUSH
34275: PPUSH
34276: PPUSH
34277: PPUSH
34278: PPUSH
34279: PPUSH
34280: PPUSH
34281: PPUSH
34282: PPUSH
34283: PPUSH
34284: PPUSH
34285: PPUSH
34286: PPUSH
34287: PPUSH
34288: PPUSH
34289: PPUSH
34290: PPUSH
34291: PPUSH
34292: PPUSH
34293: PPUSH
34294: PPUSH
34295: PPUSH
34296: PPUSH
34297: PPUSH
34298: PPUSH
34299: PPUSH
34300: PPUSH
34301: PPUSH
34302: PPUSH
34303: PPUSH
34304: PPUSH
34305: PPUSH
34306: PPUSH
// result = [ ] ;
34307: LD_ADDR_VAR 0 7
34311: PUSH
34312: EMPTY
34313: ST_TO_ADDR
// temp_list = [ ] ;
34314: LD_ADDR_VAR 0 9
34318: PUSH
34319: EMPTY
34320: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34321: LD_VAR 0 4
34325: PUSH
34326: LD_INT 0
34328: PUSH
34329: LD_INT 1
34331: PUSH
34332: LD_INT 2
34334: PUSH
34335: LD_INT 3
34337: PUSH
34338: LD_INT 4
34340: PUSH
34341: LD_INT 5
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: IN
34352: NOT
34353: PUSH
34354: LD_VAR 0 1
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: IN
34369: PUSH
34370: LD_VAR 0 5
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: LD_INT 3
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: LIST
34388: IN
34389: NOT
34390: AND
34391: OR
34392: IFFALSE 34396
// exit ;
34394: GO 52787
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34396: LD_VAR 0 1
34400: PUSH
34401: LD_INT 6
34403: PUSH
34404: LD_INT 7
34406: PUSH
34407: LD_INT 8
34409: PUSH
34410: LD_INT 13
34412: PUSH
34413: LD_INT 12
34415: PUSH
34416: LD_INT 15
34418: PUSH
34419: LD_INT 11
34421: PUSH
34422: LD_INT 14
34424: PUSH
34425: LD_INT 10
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: IN
34439: IFFALSE 34449
// btype = b_lab ;
34441: LD_ADDR_VAR 0 1
34445: PUSH
34446: LD_INT 6
34448: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34449: LD_VAR 0 6
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: LD_INT 1
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: LIST
34467: IN
34468: NOT
34469: PUSH
34470: LD_VAR 0 1
34474: PUSH
34475: LD_INT 0
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: LD_INT 3
34486: PUSH
34487: LD_INT 6
34489: PUSH
34490: LD_INT 36
34492: PUSH
34493: LD_INT 4
34495: PUSH
34496: LD_INT 5
34498: PUSH
34499: LD_INT 31
34501: PUSH
34502: LD_INT 32
34504: PUSH
34505: LD_INT 33
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: IN
34521: NOT
34522: PUSH
34523: LD_VAR 0 6
34527: PUSH
34528: LD_INT 1
34530: EQUAL
34531: AND
34532: OR
34533: PUSH
34534: LD_VAR 0 1
34538: PUSH
34539: LD_INT 2
34541: PUSH
34542: LD_INT 3
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: IN
34549: NOT
34550: PUSH
34551: LD_VAR 0 6
34555: PUSH
34556: LD_INT 2
34558: EQUAL
34559: AND
34560: OR
34561: IFFALSE 34571
// mode = 0 ;
34563: LD_ADDR_VAR 0 6
34567: PUSH
34568: LD_INT 0
34570: ST_TO_ADDR
// case mode of 0 :
34571: LD_VAR 0 6
34575: PUSH
34576: LD_INT 0
34578: DOUBLE
34579: EQUAL
34580: IFTRUE 34584
34582: GO 46037
34584: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34585: LD_ADDR_VAR 0 11
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: LD_INT 0
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: LD_INT 1
34605: NEG
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: LD_INT 0
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: LD_INT 1
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 1
34643: NEG
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: NEG
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: LD_INT 2
34670: NEG
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: LD_INT 2
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: LD_INT 1
34692: NEG
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 1
34700: PUSH
34701: LD_INT 2
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 0
34710: PUSH
34711: LD_INT 2
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 1
34720: NEG
34721: PUSH
34722: LD_INT 1
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: LD_INT 3
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: LD_INT 3
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: LD_INT 2
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34778: LD_ADDR_VAR 0 12
34782: PUSH
34783: LD_INT 0
34785: PUSH
34786: LD_INT 0
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: LD_INT 1
34798: NEG
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 1
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 1
34816: PUSH
34817: LD_INT 1
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 0
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 1
34836: NEG
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 1
34847: NEG
34848: PUSH
34849: LD_INT 1
34851: NEG
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 1
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: LD_INT 1
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 1
34890: NEG
34891: PUSH
34892: LD_INT 1
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 2
34901: NEG
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 2
34912: NEG
34913: PUSH
34914: LD_INT 1
34916: NEG
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 2
34924: NEG
34925: PUSH
34926: LD_INT 1
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 3
34935: NEG
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 3
34946: NEG
34947: PUSH
34948: LD_INT 1
34950: NEG
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34974: LD_ADDR_VAR 0 13
34978: PUSH
34979: LD_INT 0
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: LD_INT 1
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: PUSH
35013: LD_INT 1
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: LD_INT 1
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 1
35032: NEG
35033: PUSH
35034: LD_INT 0
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 1
35043: NEG
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: LD_INT 2
35059: NEG
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 2
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: PUSH
35088: LD_INT 2
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: NEG
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 2
35109: NEG
35110: PUSH
35111: LD_INT 2
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 2
35121: NEG
35122: PUSH
35123: LD_INT 3
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 3
35133: NEG
35134: PUSH
35135: LD_INT 2
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 3
35145: NEG
35146: PUSH
35147: LD_INT 3
35149: NEG
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35173: LD_ADDR_VAR 0 14
35177: PUSH
35178: LD_INT 0
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: LD_INT 1
35193: NEG
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 1
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 1
35211: PUSH
35212: LD_INT 1
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: LD_INT 1
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 1
35231: NEG
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: NEG
35243: PUSH
35244: LD_INT 1
35246: NEG
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 1
35254: NEG
35255: PUSH
35256: LD_INT 2
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: LD_INT 2
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: LD_INT 2
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 2
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: LD_INT 1
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: NEG
35320: PUSH
35321: LD_INT 3
35323: NEG
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: LD_INT 3
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: LD_INT 2
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35369: LD_ADDR_VAR 0 15
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: LD_INT 1
35389: NEG
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 1
35407: PUSH
35408: LD_INT 1
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 0
35417: PUSH
35418: LD_INT 1
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 1
35438: NEG
35439: PUSH
35440: LD_INT 1
35442: NEG
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 2
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: LD_INT 1
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 2
35492: NEG
35493: PUSH
35494: LD_INT 0
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 2
35503: NEG
35504: PUSH
35505: LD_INT 1
35507: NEG
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 3
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 3
35536: PUSH
35537: LD_INT 1
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35562: LD_ADDR_VAR 0 16
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: LD_INT 1
35582: NEG
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 1
35590: PUSH
35591: LD_INT 0
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 1
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 0
35610: PUSH
35611: LD_INT 1
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 1
35631: NEG
35632: PUSH
35633: LD_INT 1
35635: NEG
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: NEG
35644: PUSH
35645: LD_INT 2
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 2
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 2
35665: PUSH
35666: LD_INT 2
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 1
35675: PUSH
35676: LD_INT 2
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 2
35685: NEG
35686: PUSH
35687: LD_INT 1
35689: NEG
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 2
35697: NEG
35698: PUSH
35699: LD_INT 2
35701: NEG
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 3
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 3
35719: PUSH
35720: LD_INT 3
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: LD_INT 3
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35755: LD_ADDR_VAR 0 17
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 0
35772: PUSH
35773: LD_INT 1
35775: NEG
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: LD_INT 0
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: LD_INT 0
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 1
35824: NEG
35825: PUSH
35826: LD_INT 1
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: LD_INT 2
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: LD_INT 2
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 2
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 2
35890: PUSH
35891: LD_INT 2
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: LD_INT 2
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 0
35910: PUSH
35911: LD_INT 2
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: LD_INT 1
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: NEG
35932: PUSH
35933: LD_INT 0
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 2
35942: NEG
35943: PUSH
35944: LD_INT 1
35946: NEG
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 2
35954: NEG
35955: PUSH
35956: LD_INT 2
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35985: LD_ADDR_VAR 0 18
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: LD_INT 2
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: LD_INT 2
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 1
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 2
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 2
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: LD_INT 2
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 0
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 2
36161: NEG
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 2
36172: NEG
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 2
36184: NEG
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36215: LD_ADDR_VAR 0 19
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: LD_INT 1
36235: NEG
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 1
36243: PUSH
36244: LD_INT 0
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: LD_INT 1
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 0
36263: PUSH
36264: LD_INT 1
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: NEG
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 1
36296: NEG
36297: PUSH
36298: LD_INT 2
36300: NEG
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: LD_INT 2
36311: NEG
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 1
36319: PUSH
36320: LD_INT 1
36322: NEG
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 2
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 2
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: LD_INT 2
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: LD_INT 2
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 0
36370: PUSH
36371: LD_INT 2
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 1
36380: NEG
36381: PUSH
36382: LD_INT 1
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 2
36391: NEG
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 2
36402: NEG
36403: PUSH
36404: LD_INT 1
36406: NEG
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 2
36414: NEG
36415: PUSH
36416: LD_INT 2
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36445: LD_ADDR_VAR 0 20
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 1
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: PUSH
36484: LD_INT 1
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 0
36493: PUSH
36494: LD_INT 1
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: LD_INT 0
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 1
36514: NEG
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 1
36526: NEG
36527: PUSH
36528: LD_INT 2
36530: NEG
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: LD_INT 2
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: LD_INT 1
36552: NEG
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 2
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 2
36570: PUSH
36571: LD_INT 1
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 2
36580: PUSH
36581: LD_INT 2
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: LD_INT 2
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 0
36600: PUSH
36601: LD_INT 2
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: NEG
36622: PUSH
36623: LD_INT 0
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 2
36632: NEG
36633: PUSH
36634: LD_INT 1
36636: NEG
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 2
36644: NEG
36645: PUSH
36646: LD_INT 2
36648: NEG
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36675: LD_ADDR_VAR 0 21
36679: PUSH
36680: LD_INT 0
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 0
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 1
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: LD_INT 1
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 1
36733: NEG
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 1
36744: NEG
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: NEG
36757: PUSH
36758: LD_INT 2
36760: NEG
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: LD_INT 2
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 2
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 2
36800: PUSH
36801: LD_INT 1
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 2
36810: PUSH
36811: LD_INT 2
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 2
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: LD_INT 2
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 2
36851: NEG
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 2
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 2
36874: NEG
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36905: LD_ADDR_VAR 0 22
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 1
36986: NEG
36987: PUSH
36988: LD_INT 2
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 0
36998: PUSH
36999: LD_INT 2
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 2
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 2
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 2
37040: PUSH
37041: LD_INT 2
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: LD_INT 2
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: LD_INT 2
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 2
37081: NEG
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 2
37092: NEG
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 2
37104: NEG
37105: PUSH
37106: LD_INT 2
37108: NEG
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37135: LD_ADDR_VAR 0 23
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 0
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 1
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: LD_INT 1
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 1
37193: NEG
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: LD_INT 2
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 0
37228: PUSH
37229: LD_INT 2
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 2
37250: PUSH
37251: LD_INT 0
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 2
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 2
37270: PUSH
37271: LD_INT 2
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: LD_INT 2
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 0
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: NEG
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 2
37311: NEG
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 2
37322: NEG
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 2
37334: NEG
37335: PUSH
37336: LD_INT 2
37338: NEG
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 2
37346: NEG
37347: PUSH
37348: LD_INT 3
37350: NEG
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 1
37358: NEG
37359: PUSH
37360: LD_INT 3
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: LD_INT 2
37373: NEG
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 2
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37415: LD_ADDR_VAR 0 24
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 1
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: LD_INT 1
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: NEG
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: NEG
37497: PUSH
37498: LD_INT 2
37500: NEG
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: LD_INT 2
37511: NEG
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 1
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 2
37530: PUSH
37531: LD_INT 0
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 2
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 2
37550: PUSH
37551: LD_INT 2
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: LD_INT 2
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 0
37570: PUSH
37571: LD_INT 2
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 1
37580: NEG
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 2
37591: NEG
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 2
37602: NEG
37603: PUSH
37604: LD_INT 1
37606: NEG
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 2
37614: NEG
37615: PUSH
37616: LD_INT 2
37618: NEG
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: LD_INT 2
37629: NEG
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 2
37637: PUSH
37638: LD_INT 1
37640: NEG
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 3
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 3
37658: PUSH
37659: LD_INT 2
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37691: LD_ADDR_VAR 0 25
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 0
37739: PUSH
37740: LD_INT 1
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 1
37749: NEG
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 1
37760: NEG
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: LD_INT 2
37776: NEG
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: LD_INT 2
37787: NEG
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: LD_INT 1
37798: NEG
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 2
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 1
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 2
37867: NEG
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 2
37878: NEG
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 2
37890: NEG
37891: PUSH
37892: LD_INT 2
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 3
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 3
37912: PUSH
37913: LD_INT 2
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: LD_INT 3
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: LD_INT 3
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37965: LD_ADDR_VAR 0 26
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 0
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 1
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 1
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 1
38023: NEG
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 1
38046: NEG
38047: PUSH
38048: LD_INT 2
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: LD_INT 2
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 2
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 2
38090: PUSH
38091: LD_INT 1
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 2
38100: PUSH
38101: LD_INT 2
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: LD_INT 2
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: LD_INT 1
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 2
38141: NEG
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 2
38164: NEG
38165: PUSH
38166: LD_INT 2
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: LD_INT 3
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: LD_INT 3
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: LD_INT 2
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 2
38207: NEG
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38241: LD_ADDR_VAR 0 27
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 0
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 1
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: LD_INT 1
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: NEG
38311: PUSH
38312: LD_INT 1
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 1
38322: NEG
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: LD_INT 2
38337: NEG
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 1
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: LD_INT 0
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 2
38366: PUSH
38367: LD_INT 1
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 2
38376: PUSH
38377: LD_INT 2
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 1
38386: PUSH
38387: LD_INT 2
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 0
38396: PUSH
38397: LD_INT 2
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 2
38428: NEG
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: NEG
38441: PUSH
38442: LD_INT 2
38444: NEG
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: NEG
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 2
38463: NEG
38464: PUSH
38465: LD_INT 1
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 3
38474: NEG
38475: PUSH
38476: LD_INT 1
38478: NEG
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 3
38486: NEG
38487: PUSH
38488: LD_INT 2
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38521: LD_ADDR_VAR 0 28
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: LD_INT 1
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 1
38590: NEG
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 1
38602: NEG
38603: PUSH
38604: LD_INT 2
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 0
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: LD_INT 1
38628: NEG
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 2
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 2
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: PUSH
38657: LD_INT 2
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: LD_INT 2
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: LD_INT 2
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 2
38697: NEG
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 2
38708: NEG
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: NEG
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 2
38732: NEG
38733: PUSH
38734: LD_INT 3
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: LD_INT 3
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 3
38756: NEG
38757: PUSH
38758: LD_INT 1
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 3
38768: NEG
38769: PUSH
38770: LD_INT 2
38772: NEG
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38803: LD_ADDR_VAR 0 29
38807: PUSH
38808: LD_INT 0
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: PUSH
38832: LD_INT 0
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 0
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 1
38872: NEG
38873: PUSH
38874: LD_INT 1
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: LD_INT 2
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: LD_INT 2
38899: NEG
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: LD_INT 0
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: LD_INT 2
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: LD_INT 2
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 2
38969: NEG
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: LD_INT 2
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 2
38993: NEG
38994: PUSH
38995: LD_INT 3
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: LD_INT 1
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 3
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: LD_INT 3
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 3
39047: NEG
39048: PUSH
39049: LD_INT 2
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39082: LD_ADDR_VAR 0 30
39086: PUSH
39087: LD_INT 0
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: PUSH
39111: LD_INT 0
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 1
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 1
39140: NEG
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: LD_INT 1
39155: NEG
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: LD_INT 2
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: LD_INT 2
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 2
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 2
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 2
39217: PUSH
39218: LD_INT 2
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: LD_INT 2
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 2
39248: NEG
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 2
39259: NEG
39260: PUSH
39261: LD_INT 1
39263: NEG
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: NEG
39272: PUSH
39273: LD_INT 3
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 3
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: LD_INT 3
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 2
39314: NEG
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 3
39325: NEG
39326: PUSH
39327: LD_INT 1
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39360: LD_ADDR_VAR 0 31
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: LD_INT 1
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: LD_INT 1
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: NEG
39442: PUSH
39443: LD_INT 2
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 2
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 2
39484: PUSH
39485: LD_INT 2
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: LD_INT 2
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: LD_INT 2
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: NEG
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 2
39537: NEG
39538: PUSH
39539: LD_INT 2
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 2
39549: NEG
39550: PUSH
39551: LD_INT 3
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 2
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 3
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: LD_INT 3
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 3
39603: NEG
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39638: LD_ADDR_VAR 0 32
39642: PUSH
39643: LD_INT 0
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 2
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: LD_INT 2
39734: NEG
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: LD_INT 1
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 2
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: LD_INT 2
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: LD_INT 2
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 2
39804: NEG
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 2
39815: NEG
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: LD_INT 3
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 3
39850: PUSH
39851: LD_INT 2
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: LD_INT 3
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 2
39870: NEG
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 3
39881: NEG
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39916: LD_ADDR_VAR 0 33
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: LD_INT 2
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: LD_INT 2
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: LD_INT 2
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 2
40071: NEG
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 2
40082: NEG
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 2
40094: NEG
40095: PUSH
40096: LD_INT 2
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 2
40106: NEG
40107: PUSH
40108: LD_INT 3
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 2
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 3
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: LD_INT 3
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 3
40160: NEG
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40195: LD_ADDR_VAR 0 34
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 2
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: LD_INT 2
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: LD_INT 1
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 2
40320: PUSH
40321: LD_INT 2
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: LD_INT 2
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 2
40351: NEG
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: NEG
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 2
40374: NEG
40375: PUSH
40376: LD_INT 2
40378: NEG
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: LD_INT 3
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 1
40398: PUSH
40399: LD_INT 2
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 3
40409: PUSH
40410: LD_INT 2
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 2
40419: PUSH
40420: LD_INT 3
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 2
40429: NEG
40430: PUSH
40431: LD_INT 1
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 3
40440: NEG
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40475: LD_ADDR_VAR 0 35
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 1
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: NEG
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40587: LD_ADDR_VAR 0 36
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: NEG
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: LD_INT 2
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: LD_INT 2
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40699: LD_ADDR_VAR 0 37
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: LD_INT 0
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: LD_INT 1
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: LD_INT 1
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40811: LD_ADDR_VAR 0 38
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 2
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 2
40902: NEG
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40923: LD_ADDR_VAR 0 39
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: NEG
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41035: LD_ADDR_VAR 0 40
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 0
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41147: LD_ADDR_VAR 0 41
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: NEG
41217: PUSH
41218: LD_INT 1
41220: NEG
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 2
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: NEG
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 2
41313: NEG
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: NEG
41326: PUSH
41327: LD_INT 2
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 2
41337: NEG
41338: PUSH
41339: LD_INT 3
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 3
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 3
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 3
41380: PUSH
41381: LD_INT 2
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 3
41390: PUSH
41391: LD_INT 3
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: LD_INT 3
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 2
41410: NEG
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 3
41421: NEG
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 3
41432: NEG
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 3
41444: NEG
41445: PUSH
41446: LD_INT 2
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 3
41456: NEG
41457: PUSH
41458: LD_INT 3
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41497: LD_ADDR_VAR 0 42
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: LD_INT 2
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 2
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: LD_INT 2
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 2
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 1
41652: NEG
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 2
41675: NEG
41676: PUSH
41677: LD_INT 2
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 2
41687: NEG
41688: PUSH
41689: LD_INT 3
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: LD_INT 3
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: LD_INT 3
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 3
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 3
41743: PUSH
41744: LD_INT 3
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 2
41753: PUSH
41754: LD_INT 3
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: LD_INT 3
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 3
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 3
41794: NEG
41795: PUSH
41796: LD_INT 2
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 3
41806: NEG
41807: PUSH
41808: LD_INT 3
41810: NEG
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41847: LD_ADDR_VAR 0 43
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 2
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: LD_INT 2
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: LD_INT 2
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 2
42013: NEG
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 2
42024: NEG
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: LD_INT 3
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 3
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: LD_INT 2
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 3
42081: PUSH
42082: LD_INT 0
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 3
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: LD_INT 3
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: LD_INT 3
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: LD_INT 2
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: NEG
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 3
42143: NEG
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 3
42154: NEG
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42195: LD_ADDR_VAR 0 44
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 2
42319: PUSH
42320: LD_INT 2
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: LD_INT 2
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 2
42350: NEG
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 2
42361: NEG
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 2
42373: NEG
42374: PUSH
42375: LD_INT 2
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: LD_INT 3
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 2
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 3
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 3
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 3
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 3
42438: PUSH
42439: LD_INT 3
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: LD_INT 3
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 2
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 3
42469: NEG
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 3
42480: NEG
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 3
42492: NEG
42493: PUSH
42494: LD_INT 2
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 3
42504: NEG
42505: PUSH
42506: LD_INT 3
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42545: LD_ADDR_VAR 0 45
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: LD_INT 2
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: NEG
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 2
42735: NEG
42736: PUSH
42737: LD_INT 3
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: LD_INT 3
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: LD_INT 3
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 3
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 3
42791: PUSH
42792: LD_INT 3
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: LD_INT 3
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: LD_INT 3
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 3
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 3
42842: NEG
42843: PUSH
42844: LD_INT 2
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 3
42854: NEG
42855: PUSH
42856: LD_INT 3
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42895: LD_ADDR_VAR 0 46
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 2
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: LD_INT 3
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 3
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 2
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 3
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 3
43139: PUSH
43140: LD_INT 1
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 3
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 2
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 3
43191: NEG
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 3
43202: NEG
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43243: LD_ADDR_VAR 0 47
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 2
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: LD_INT 2
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 2
43358: NEG
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43394: LD_ADDR_VAR 0 48
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 1
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 1
43463: NEG
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: LD_INT 2
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: LD_INT 2
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 2
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43541: LD_ADDR_VAR 0 49
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 1
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 2
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43685: LD_ADDR_VAR 0 50
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: LD_INT 2
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43829: LD_ADDR_VAR 0 51
43833: PUSH
43834: LD_INT 0
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: NEG
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43976: LD_ADDR_VAR 0 52
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 1
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: LD_INT 1
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: LD_INT 2
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 1
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: NEG
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44127: LD_ADDR_VAR 0 53
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: LD_INT 1
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: LD_INT 2
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 0
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: LD_INT 1
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 2
44326: NEG
44327: PUSH
44328: LD_INT 2
44330: NEG
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44357: LD_ADDR_VAR 0 54
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 0
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: LD_INT 1
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 2
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 2
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: NEG
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44587: LD_ADDR_VAR 0 55
44591: PUSH
44592: LD_INT 0
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 2
44683: NEG
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 2
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 2
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 2
44774: NEG
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44817: LD_ADDR_VAR 0 56
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 2
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: LD_INT 2
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 1
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 2
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: LD_INT 2
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45047: LD_ADDR_VAR 0 57
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: LD_INT 2
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 2
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 2
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: NEG
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 2
45234: NEG
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: NEG
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45277: LD_ADDR_VAR 0 58
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 1
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 2
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 2
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 2
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45507: LD_ADDR_VAR 0 59
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45595: LD_ADDR_VAR 0 60
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: LD_INT 1
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45683: LD_ADDR_VAR 0 61
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45771: LD_ADDR_VAR 0 62
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45859: LD_ADDR_VAR 0 63
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45947: LD_ADDR_VAR 0 64
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: ST_TO_ADDR
// end ; 1 :
46035: GO 51932
46037: LD_INT 1
46039: DOUBLE
46040: EQUAL
46041: IFTRUE 46045
46043: GO 48668
46045: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46046: LD_ADDR_VAR 0 11
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 3
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: LD_INT 3
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 2
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: LIST
46089: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46090: LD_ADDR_VAR 0 12
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 3
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 3
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: LIST
46130: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46131: LD_ADDR_VAR 0 13
46135: PUSH
46136: LD_INT 3
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 3
46148: PUSH
46149: LD_INT 3
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: PUSH
46159: LD_INT 3
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: LIST
46170: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46171: LD_ADDR_VAR 0 14
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 3
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 3
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46212: LD_ADDR_VAR 0 15
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 3
46230: NEG
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 3
46241: NEG
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: LIST
46255: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46256: LD_ADDR_VAR 0 16
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: LD_INT 3
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 3
46275: NEG
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 3
46287: NEG
46288: PUSH
46289: LD_INT 3
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46302: LD_ADDR_VAR 0 17
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: LD_INT 3
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 3
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: LIST
46345: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46346: LD_ADDR_VAR 0 18
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 3
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 3
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: LIST
46386: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46387: LD_ADDR_VAR 0 19
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 3
46404: PUSH
46405: LD_INT 3
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: PUSH
46415: LD_INT 3
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46427: LD_ADDR_VAR 0 20
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: LD_INT 3
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 1
46454: NEG
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46468: LD_ADDR_VAR 0 21
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 3
46486: NEG
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 3
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: LIST
46511: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46512: LD_ADDR_VAR 0 22
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 3
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 3
46531: NEG
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 3
46543: NEG
46544: PUSH
46545: LD_INT 3
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: LIST
46557: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46558: LD_ADDR_VAR 0 23
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: LD_INT 3
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: LD_INT 4
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 3
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: LIST
46601: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46602: LD_ADDR_VAR 0 24
46606: PUSH
46607: LD_INT 3
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 3
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 4
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: LIST
46642: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46643: LD_ADDR_VAR 0 25
46647: PUSH
46648: LD_INT 3
46650: PUSH
46651: LD_INT 3
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 4
46660: PUSH
46661: LD_INT 3
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 3
46670: PUSH
46671: LD_INT 4
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46683: LD_ADDR_VAR 0 26
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 3
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: LD_INT 4
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: LD_INT 3
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46724: LD_ADDR_VAR 0 27
46728: PUSH
46729: LD_INT 3
46731: NEG
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 3
46742: NEG
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 4
46753: NEG
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: LIST
46767: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46768: LD_ADDR_VAR 0 28
46772: PUSH
46773: LD_INT 3
46775: NEG
46776: PUSH
46777: LD_INT 3
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 3
46787: NEG
46788: PUSH
46789: LD_INT 4
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 4
46799: NEG
46800: PUSH
46801: LD_INT 3
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: LIST
46813: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46814: LD_ADDR_VAR 0 29
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: LD_INT 3
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 3
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: LD_INT 4
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 4
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 3
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 5
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 5
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 4
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: LD_INT 6
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 6
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: LD_INT 5
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46969: LD_ADDR_VAR 0 30
46973: PUSH
46974: LD_INT 2
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 3
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 4
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 4
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 4
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 5
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 5
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 5
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 6
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 6
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47112: LD_ADDR_VAR 0 31
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: LD_INT 3
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: LD_INT 3
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 4
47149: PUSH
47150: LD_INT 3
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 4
47159: PUSH
47160: LD_INT 4
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 3
47169: PUSH
47170: LD_INT 4
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 5
47179: PUSH
47180: LD_INT 4
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 5
47189: PUSH
47190: LD_INT 5
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 4
47199: PUSH
47200: LD_INT 5
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 6
47209: PUSH
47210: LD_INT 5
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 6
47219: PUSH
47220: LD_INT 6
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 5
47229: PUSH
47230: LD_INT 6
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47251: LD_ADDR_VAR 0 32
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 3
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 3
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 4
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 4
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 3
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 5
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 5
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: LD_INT 4
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 6
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 6
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 5
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47394: LD_ADDR_VAR 0 33
47398: PUSH
47399: LD_INT 2
47401: NEG
47402: PUSH
47403: LD_INT 1
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 3
47412: NEG
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 3
47423: NEG
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 3
47435: NEG
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 4
47446: NEG
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 4
47457: NEG
47458: PUSH
47459: LD_INT 1
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 4
47469: NEG
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 5
47480: NEG
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 5
47491: NEG
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 5
47503: NEG
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 6
47514: NEG
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 6
47525: NEG
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47549: LD_ADDR_VAR 0 34
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: LD_INT 3
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 3
47568: NEG
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 3
47580: NEG
47581: PUSH
47582: LD_INT 3
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 3
47592: NEG
47593: PUSH
47594: LD_INT 4
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 4
47604: NEG
47605: PUSH
47606: LD_INT 3
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 4
47616: NEG
47617: PUSH
47618: LD_INT 4
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 4
47628: NEG
47629: PUSH
47630: LD_INT 5
47632: NEG
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 5
47640: NEG
47641: PUSH
47642: LD_INT 4
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 5
47652: NEG
47653: PUSH
47654: LD_INT 5
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 5
47664: NEG
47665: PUSH
47666: LD_INT 6
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 6
47676: NEG
47677: PUSH
47678: LD_INT 5
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 6
47688: NEG
47689: PUSH
47690: LD_INT 6
47692: NEG
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47712: LD_ADDR_VAR 0 41
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 2
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 3
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: LIST
47755: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47756: LD_ADDR_VAR 0 42
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 3
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: LIST
47796: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47797: LD_ADDR_VAR 0 43
47801: PUSH
47802: LD_INT 2
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 3
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 3
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: LIST
47836: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47837: LD_ADDR_VAR 0 44
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 3
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 2
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: LIST
47877: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47878: LD_ADDR_VAR 0 45
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: NEG
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 3
47907: NEG
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: LIST
47921: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47922: LD_ADDR_VAR 0 46
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: LD_INT 2
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: LD_INT 3
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 3
47953: NEG
47954: PUSH
47955: LD_INT 2
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: LIST
47967: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47968: LD_ADDR_VAR 0 47
47972: PUSH
47973: LD_INT 2
47975: NEG
47976: PUSH
47977: LD_INT 3
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: NEG
47988: PUSH
47989: LD_INT 3
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48001: LD_ADDR_VAR 0 48
48005: PUSH
48006: LD_INT 1
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 2
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48032: LD_ADDR_VAR 0 49
48036: PUSH
48037: LD_INT 3
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 3
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48061: LD_ADDR_VAR 0 50
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: LD_INT 3
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 3
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48090: LD_ADDR_VAR 0 51
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48121: LD_ADDR_VAR 0 52
48125: PUSH
48126: LD_INT 3
48128: NEG
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 3
48140: NEG
48141: PUSH
48142: LD_INT 2
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48154: LD_ADDR_VAR 0 53
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: LD_INT 3
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 3
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 2
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: LIST
48197: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48198: LD_ADDR_VAR 0 54
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 3
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 3
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: LIST
48238: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48239: LD_ADDR_VAR 0 55
48243: PUSH
48244: LD_INT 3
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 3
48256: PUSH
48257: LD_INT 3
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: LD_INT 3
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: LIST
48278: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48279: LD_ADDR_VAR 0 56
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: LD_INT 3
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: LD_INT 3
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: LIST
48319: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48320: LD_ADDR_VAR 0 57
48324: PUSH
48325: LD_INT 2
48327: NEG
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 3
48338: NEG
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 3
48349: NEG
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: LIST
48363: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48364: LD_ADDR_VAR 0 58
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: LD_INT 3
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 3
48383: NEG
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 3
48395: NEG
48396: PUSH
48397: LD_INT 3
48399: NEG
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: LIST
48409: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48410: LD_ADDR_VAR 0 59
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 2
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: LIST
48453: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48454: LD_ADDR_VAR 0 60
48458: PUSH
48459: LD_INT 1
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: LIST
48494: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48495: LD_ADDR_VAR 0 61
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: LIST
48534: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48535: LD_ADDR_VAR 0 62
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: LIST
48575: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48576: LD_ADDR_VAR 0 63
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: LIST
48619: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48620: LD_ADDR_VAR 0 64
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: LIST
48665: ST_TO_ADDR
// end ; 2 :
48666: GO 51932
48668: LD_INT 2
48670: DOUBLE
48671: EQUAL
48672: IFTRUE 48676
48674: GO 51931
48676: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48677: LD_ADDR_VAR 0 29
48681: PUSH
48682: LD_INT 4
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 4
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 5
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 5
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 4
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 3
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 3
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 3
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 5
48767: PUSH
48768: LD_INT 2
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 3
48777: PUSH
48778: LD_INT 3
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 3
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 4
48797: PUSH
48798: LD_INT 3
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 4
48807: PUSH
48808: LD_INT 4
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 3
48817: PUSH
48818: LD_INT 4
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 2
48827: PUSH
48828: LD_INT 3
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: LD_INT 2
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 4
48847: PUSH
48848: LD_INT 2
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: LD_INT 4
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 4
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 3
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 4
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 5
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 5
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: LD_INT 4
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 3
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: LD_INT 5
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: LD_INT 3
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 3
48960: NEG
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 3
48971: NEG
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 3
49005: NEG
49006: PUSH
49007: LD_INT 1
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 4
49016: NEG
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 4
49027: NEG
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 4
49039: NEG
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 4
49062: NEG
49063: PUSH
49064: LD_INT 4
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 4
49074: NEG
49075: PUSH
49076: LD_INT 5
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 3
49086: NEG
49087: PUSH
49088: LD_INT 4
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 3
49098: NEG
49099: PUSH
49100: LD_INT 3
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 4
49110: NEG
49111: PUSH
49112: LD_INT 3
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 5
49122: NEG
49123: PUSH
49124: LD_INT 4
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 5
49134: NEG
49135: PUSH
49136: LD_INT 5
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 3
49146: NEG
49147: PUSH
49148: LD_INT 5
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 5
49158: NEG
49159: PUSH
49160: LD_INT 3
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49215: LD_ADDR_VAR 0 30
49219: PUSH
49220: LD_INT 4
49222: PUSH
49223: LD_INT 4
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 4
49232: PUSH
49233: LD_INT 3
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 5
49242: PUSH
49243: LD_INT 4
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 5
49252: PUSH
49253: LD_INT 5
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 4
49262: PUSH
49263: LD_INT 5
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 3
49272: PUSH
49273: LD_INT 4
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 3
49282: PUSH
49283: LD_INT 3
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 5
49292: PUSH
49293: LD_INT 3
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 3
49302: PUSH
49303: LD_INT 5
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 3
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 2
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: LD_INT 3
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 4
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 4
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 3
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: LD_INT 4
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 2
49394: NEG
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 4
49405: NEG
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 4
49416: NEG
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: NEG
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 3
49439: NEG
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 4
49450: NEG
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 5
49461: NEG
49462: PUSH
49463: LD_INT 0
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 5
49472: NEG
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 5
49484: NEG
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 3
49496: NEG
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 3
49507: NEG
49508: PUSH
49509: LD_INT 3
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 3
49519: NEG
49520: PUSH
49521: LD_INT 4
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 2
49531: NEG
49532: PUSH
49533: LD_INT 3
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: NEG
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 3
49555: NEG
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 4
49567: NEG
49568: PUSH
49569: LD_INT 3
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 4
49579: NEG
49580: PUSH
49581: LD_INT 4
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: NEG
49592: PUSH
49593: LD_INT 4
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 4
49603: NEG
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 4
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: LD_INT 5
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: LD_INT 4
49640: NEG
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 3
49651: NEG
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 3
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 4
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: LD_INT 5
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: NEG
49706: PUSH
49707: LD_INT 5
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49762: LD_ADDR_VAR 0 31
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 4
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 3
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 4
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 5
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 5
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: LD_INT 4
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 3
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: LD_INT 5
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 3
49862: NEG
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 3
49873: NEG
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 3
49907: NEG
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 4
49918: NEG
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 4
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 4
49941: NEG
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 4
49964: NEG
49965: PUSH
49966: LD_INT 4
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 4
49976: NEG
49977: PUSH
49978: LD_INT 5
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 3
49988: NEG
49989: PUSH
49990: LD_INT 4
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 3
50000: NEG
50001: PUSH
50002: LD_INT 3
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 4
50012: NEG
50013: PUSH
50014: LD_INT 3
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 5
50024: NEG
50025: PUSH
50026: LD_INT 4
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 5
50036: NEG
50037: PUSH
50038: LD_INT 5
50040: NEG
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 3
50048: NEG
50049: PUSH
50050: LD_INT 5
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 5
50060: NEG
50061: PUSH
50062: LD_INT 3
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 3
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 4
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 3
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: LD_INT 2
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 2
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: LD_INT 3
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: NEG
50140: PUSH
50141: LD_INT 4
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 4
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 4
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 4
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 5
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 5
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 4
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 3
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 3
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 3
50246: PUSH
50247: LD_INT 2
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 5
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50312: LD_ADDR_VAR 0 32
50316: PUSH
50317: LD_INT 4
50319: NEG
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 4
50330: NEG
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 3
50342: NEG
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 3
50353: NEG
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 4
50364: NEG
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 5
50375: NEG
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 5
50386: NEG
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 5
50398: NEG
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 3
50410: NEG
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 3
50421: NEG
50422: PUSH
50423: LD_INT 3
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 3
50433: NEG
50434: PUSH
50435: LD_INT 4
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: LD_INT 3
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 2
50457: NEG
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 3
50469: NEG
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 4
50481: NEG
50482: PUSH
50483: LD_INT 3
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 4
50493: NEG
50494: PUSH
50495: LD_INT 4
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: LD_INT 4
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 4
50517: NEG
50518: PUSH
50519: LD_INT 2
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 4
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 5
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 4
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: LD_INT 3
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: LD_INT 3
50576: NEG
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: LD_INT 4
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: LD_INT 5
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: LD_INT 3
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 2
50619: NEG
50620: PUSH
50621: LD_INT 5
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 3
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 3
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 4
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 4
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 1
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 4
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 4
50724: PUSH
50725: LD_INT 4
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 4
50734: PUSH
50735: LD_INT 3
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 5
50744: PUSH
50745: LD_INT 4
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 5
50754: PUSH
50755: LD_INT 5
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 4
50764: PUSH
50765: LD_INT 5
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 3
50774: PUSH
50775: LD_INT 4
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 3
50784: PUSH
50785: LD_INT 3
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 5
50794: PUSH
50795: LD_INT 3
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: LD_INT 5
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50859: LD_ADDR_VAR 0 33
50863: PUSH
50864: LD_INT 4
50866: NEG
50867: PUSH
50868: LD_INT 4
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 4
50878: NEG
50879: PUSH
50880: LD_INT 5
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 3
50890: NEG
50891: PUSH
50892: LD_INT 4
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 3
50902: NEG
50903: PUSH
50904: LD_INT 3
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 4
50914: NEG
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 5
50926: NEG
50927: PUSH
50928: LD_INT 4
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 5
50938: NEG
50939: PUSH
50940: LD_INT 5
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 3
50950: NEG
50951: PUSH
50952: LD_INT 5
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 5
50962: NEG
50963: PUSH
50964: LD_INT 3
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: LD_INT 3
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 4
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: LD_INT 3
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: NEG
51030: PUSH
51031: LD_INT 3
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 4
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: NEG
51065: PUSH
51066: LD_INT 4
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 4
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 4
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 5
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 5
51107: PUSH
51108: LD_INT 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 4
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 3
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: LD_INT 2
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 5
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 3
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 3
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 4
51189: PUSH
51190: LD_INT 3
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 4
51199: PUSH
51200: LD_INT 4
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 3
51209: PUSH
51210: LD_INT 4
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 2
51219: PUSH
51220: LD_INT 3
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 4
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: PUSH
51250: LD_INT 4
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 4
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 3
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: LD_INT 4
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: LD_INT 5
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: LD_INT 5
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 4
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: LD_INT 3
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: PUSH
51332: LD_INT 5
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51397: LD_ADDR_VAR 0 34
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 4
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: LD_INT 5
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: LD_INT 4
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 3
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 3
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 4
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: LD_INT 5
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 2
51494: NEG
51495: PUSH
51496: LD_INT 5
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 3
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 3
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 4
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 4
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 3
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 2
51578: PUSH
51579: LD_INT 2
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 4
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 4
51599: PUSH
51600: LD_INT 4
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 4
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 5
51619: PUSH
51620: LD_INT 4
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 5
51629: PUSH
51630: LD_INT 5
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 4
51639: PUSH
51640: LD_INT 5
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 3
51649: PUSH
51650: LD_INT 4
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 3
51659: PUSH
51660: LD_INT 3
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 5
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: LD_INT 5
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 3
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: LD_INT 2
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 3
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 4
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: LD_INT 4
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: LD_INT 3
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: LD_INT 4
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: LD_INT 2
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 4
51782: NEG
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 4
51793: NEG
51794: PUSH
51795: LD_INT 1
51797: NEG
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 3
51805: NEG
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 3
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 4
51827: NEG
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 5
51838: NEG
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 5
51849: NEG
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 5
51861: NEG
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: ST_TO_ADDR
// end ; end ;
51929: GO 51932
51931: POP
// case btype of b_depot , b_warehouse :
51932: LD_VAR 0 1
51936: PUSH
51937: LD_INT 0
51939: DOUBLE
51940: EQUAL
51941: IFTRUE 51951
51943: LD_INT 1
51945: DOUBLE
51946: EQUAL
51947: IFTRUE 51951
51949: GO 52152
51951: POP
// case nation of nation_american :
51952: LD_VAR 0 5
51956: PUSH
51957: LD_INT 1
51959: DOUBLE
51960: EQUAL
51961: IFTRUE 51965
51963: GO 52021
51965: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51966: LD_ADDR_VAR 0 9
51970: PUSH
51971: LD_VAR 0 11
51975: PUSH
51976: LD_VAR 0 12
51980: PUSH
51981: LD_VAR 0 13
51985: PUSH
51986: LD_VAR 0 14
51990: PUSH
51991: LD_VAR 0 15
51995: PUSH
51996: LD_VAR 0 16
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: PUSH
52009: LD_VAR 0 4
52013: PUSH
52014: LD_INT 1
52016: PLUS
52017: ARRAY
52018: ST_TO_ADDR
52019: GO 52150
52021: LD_INT 2
52023: DOUBLE
52024: EQUAL
52025: IFTRUE 52029
52027: GO 52085
52029: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52030: LD_ADDR_VAR 0 9
52034: PUSH
52035: LD_VAR 0 17
52039: PUSH
52040: LD_VAR 0 18
52044: PUSH
52045: LD_VAR 0 19
52049: PUSH
52050: LD_VAR 0 20
52054: PUSH
52055: LD_VAR 0 21
52059: PUSH
52060: LD_VAR 0 22
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: PUSH
52073: LD_VAR 0 4
52077: PUSH
52078: LD_INT 1
52080: PLUS
52081: ARRAY
52082: ST_TO_ADDR
52083: GO 52150
52085: LD_INT 3
52087: DOUBLE
52088: EQUAL
52089: IFTRUE 52093
52091: GO 52149
52093: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52094: LD_ADDR_VAR 0 9
52098: PUSH
52099: LD_VAR 0 23
52103: PUSH
52104: LD_VAR 0 24
52108: PUSH
52109: LD_VAR 0 25
52113: PUSH
52114: LD_VAR 0 26
52118: PUSH
52119: LD_VAR 0 27
52123: PUSH
52124: LD_VAR 0 28
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: PUSH
52137: LD_VAR 0 4
52141: PUSH
52142: LD_INT 1
52144: PLUS
52145: ARRAY
52146: ST_TO_ADDR
52147: GO 52150
52149: POP
52150: GO 52705
52152: LD_INT 2
52154: DOUBLE
52155: EQUAL
52156: IFTRUE 52166
52158: LD_INT 3
52160: DOUBLE
52161: EQUAL
52162: IFTRUE 52166
52164: GO 52222
52166: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52167: LD_ADDR_VAR 0 9
52171: PUSH
52172: LD_VAR 0 29
52176: PUSH
52177: LD_VAR 0 30
52181: PUSH
52182: LD_VAR 0 31
52186: PUSH
52187: LD_VAR 0 32
52191: PUSH
52192: LD_VAR 0 33
52196: PUSH
52197: LD_VAR 0 34
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: PUSH
52210: LD_VAR 0 4
52214: PUSH
52215: LD_INT 1
52217: PLUS
52218: ARRAY
52219: ST_TO_ADDR
52220: GO 52705
52222: LD_INT 16
52224: DOUBLE
52225: EQUAL
52226: IFTRUE 52284
52228: LD_INT 17
52230: DOUBLE
52231: EQUAL
52232: IFTRUE 52284
52234: LD_INT 18
52236: DOUBLE
52237: EQUAL
52238: IFTRUE 52284
52240: LD_INT 19
52242: DOUBLE
52243: EQUAL
52244: IFTRUE 52284
52246: LD_INT 22
52248: DOUBLE
52249: EQUAL
52250: IFTRUE 52284
52252: LD_INT 20
52254: DOUBLE
52255: EQUAL
52256: IFTRUE 52284
52258: LD_INT 21
52260: DOUBLE
52261: EQUAL
52262: IFTRUE 52284
52264: LD_INT 23
52266: DOUBLE
52267: EQUAL
52268: IFTRUE 52284
52270: LD_INT 24
52272: DOUBLE
52273: EQUAL
52274: IFTRUE 52284
52276: LD_INT 25
52278: DOUBLE
52279: EQUAL
52280: IFTRUE 52284
52282: GO 52340
52284: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52285: LD_ADDR_VAR 0 9
52289: PUSH
52290: LD_VAR 0 35
52294: PUSH
52295: LD_VAR 0 36
52299: PUSH
52300: LD_VAR 0 37
52304: PUSH
52305: LD_VAR 0 38
52309: PUSH
52310: LD_VAR 0 39
52314: PUSH
52315: LD_VAR 0 40
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: PUSH
52328: LD_VAR 0 4
52332: PUSH
52333: LD_INT 1
52335: PLUS
52336: ARRAY
52337: ST_TO_ADDR
52338: GO 52705
52340: LD_INT 6
52342: DOUBLE
52343: EQUAL
52344: IFTRUE 52396
52346: LD_INT 7
52348: DOUBLE
52349: EQUAL
52350: IFTRUE 52396
52352: LD_INT 8
52354: DOUBLE
52355: EQUAL
52356: IFTRUE 52396
52358: LD_INT 13
52360: DOUBLE
52361: EQUAL
52362: IFTRUE 52396
52364: LD_INT 12
52366: DOUBLE
52367: EQUAL
52368: IFTRUE 52396
52370: LD_INT 15
52372: DOUBLE
52373: EQUAL
52374: IFTRUE 52396
52376: LD_INT 11
52378: DOUBLE
52379: EQUAL
52380: IFTRUE 52396
52382: LD_INT 14
52384: DOUBLE
52385: EQUAL
52386: IFTRUE 52396
52388: LD_INT 10
52390: DOUBLE
52391: EQUAL
52392: IFTRUE 52396
52394: GO 52452
52396: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52397: LD_ADDR_VAR 0 9
52401: PUSH
52402: LD_VAR 0 41
52406: PUSH
52407: LD_VAR 0 42
52411: PUSH
52412: LD_VAR 0 43
52416: PUSH
52417: LD_VAR 0 44
52421: PUSH
52422: LD_VAR 0 45
52426: PUSH
52427: LD_VAR 0 46
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: PUSH
52440: LD_VAR 0 4
52444: PUSH
52445: LD_INT 1
52447: PLUS
52448: ARRAY
52449: ST_TO_ADDR
52450: GO 52705
52452: LD_INT 36
52454: DOUBLE
52455: EQUAL
52456: IFTRUE 52460
52458: GO 52516
52460: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52461: LD_ADDR_VAR 0 9
52465: PUSH
52466: LD_VAR 0 47
52470: PUSH
52471: LD_VAR 0 48
52475: PUSH
52476: LD_VAR 0 49
52480: PUSH
52481: LD_VAR 0 50
52485: PUSH
52486: LD_VAR 0 51
52490: PUSH
52491: LD_VAR 0 52
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: PUSH
52504: LD_VAR 0 4
52508: PUSH
52509: LD_INT 1
52511: PLUS
52512: ARRAY
52513: ST_TO_ADDR
52514: GO 52705
52516: LD_INT 4
52518: DOUBLE
52519: EQUAL
52520: IFTRUE 52542
52522: LD_INT 5
52524: DOUBLE
52525: EQUAL
52526: IFTRUE 52542
52528: LD_INT 34
52530: DOUBLE
52531: EQUAL
52532: IFTRUE 52542
52534: LD_INT 37
52536: DOUBLE
52537: EQUAL
52538: IFTRUE 52542
52540: GO 52598
52542: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52543: LD_ADDR_VAR 0 9
52547: PUSH
52548: LD_VAR 0 53
52552: PUSH
52553: LD_VAR 0 54
52557: PUSH
52558: LD_VAR 0 55
52562: PUSH
52563: LD_VAR 0 56
52567: PUSH
52568: LD_VAR 0 57
52572: PUSH
52573: LD_VAR 0 58
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: PUSH
52586: LD_VAR 0 4
52590: PUSH
52591: LD_INT 1
52593: PLUS
52594: ARRAY
52595: ST_TO_ADDR
52596: GO 52705
52598: LD_INT 31
52600: DOUBLE
52601: EQUAL
52602: IFTRUE 52648
52604: LD_INT 32
52606: DOUBLE
52607: EQUAL
52608: IFTRUE 52648
52610: LD_INT 33
52612: DOUBLE
52613: EQUAL
52614: IFTRUE 52648
52616: LD_INT 27
52618: DOUBLE
52619: EQUAL
52620: IFTRUE 52648
52622: LD_INT 26
52624: DOUBLE
52625: EQUAL
52626: IFTRUE 52648
52628: LD_INT 28
52630: DOUBLE
52631: EQUAL
52632: IFTRUE 52648
52634: LD_INT 29
52636: DOUBLE
52637: EQUAL
52638: IFTRUE 52648
52640: LD_INT 30
52642: DOUBLE
52643: EQUAL
52644: IFTRUE 52648
52646: GO 52704
52648: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52649: LD_ADDR_VAR 0 9
52653: PUSH
52654: LD_VAR 0 59
52658: PUSH
52659: LD_VAR 0 60
52663: PUSH
52664: LD_VAR 0 61
52668: PUSH
52669: LD_VAR 0 62
52673: PUSH
52674: LD_VAR 0 63
52678: PUSH
52679: LD_VAR 0 64
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: PUSH
52692: LD_VAR 0 4
52696: PUSH
52697: LD_INT 1
52699: PLUS
52700: ARRAY
52701: ST_TO_ADDR
52702: GO 52705
52704: POP
// temp_list2 = [ ] ;
52705: LD_ADDR_VAR 0 10
52709: PUSH
52710: EMPTY
52711: ST_TO_ADDR
// for i in temp_list do
52712: LD_ADDR_VAR 0 8
52716: PUSH
52717: LD_VAR 0 9
52721: PUSH
52722: FOR_IN
52723: IFFALSE 52775
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52725: LD_ADDR_VAR 0 10
52729: PUSH
52730: LD_VAR 0 10
52734: PUSH
52735: LD_VAR 0 8
52739: PUSH
52740: LD_INT 1
52742: ARRAY
52743: PUSH
52744: LD_VAR 0 2
52748: PLUS
52749: PUSH
52750: LD_VAR 0 8
52754: PUSH
52755: LD_INT 2
52757: ARRAY
52758: PUSH
52759: LD_VAR 0 3
52763: PLUS
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: EMPTY
52770: LIST
52771: ADD
52772: ST_TO_ADDR
52773: GO 52722
52775: POP
52776: POP
// result = temp_list2 ;
52777: LD_ADDR_VAR 0 7
52781: PUSH
52782: LD_VAR 0 10
52786: ST_TO_ADDR
// end ;
52787: LD_VAR 0 7
52791: RET
// export function EnemyInRange ( unit , dist ) ; begin
52792: LD_INT 0
52794: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52795: LD_ADDR_VAR 0 3
52799: PUSH
52800: LD_VAR 0 1
52804: PPUSH
52805: CALL_OW 255
52809: PPUSH
52810: LD_VAR 0 1
52814: PPUSH
52815: CALL_OW 250
52819: PPUSH
52820: LD_VAR 0 1
52824: PPUSH
52825: CALL_OW 251
52829: PPUSH
52830: LD_VAR 0 2
52834: PPUSH
52835: CALL 26563 0 4
52839: PUSH
52840: LD_INT 4
52842: ARRAY
52843: ST_TO_ADDR
// end ;
52844: LD_VAR 0 3
52848: RET
// export function PlayerSeeMe ( unit ) ; begin
52849: LD_INT 0
52851: PPUSH
// result := See ( your_side , unit ) ;
52852: LD_ADDR_VAR 0 2
52856: PUSH
52857: LD_OWVAR 2
52861: PPUSH
52862: LD_VAR 0 1
52866: PPUSH
52867: CALL_OW 292
52871: ST_TO_ADDR
// end ;
52872: LD_VAR 0 2
52876: RET
// export function ReverseDir ( unit ) ; begin
52877: LD_INT 0
52879: PPUSH
// if not unit then
52880: LD_VAR 0 1
52884: NOT
52885: IFFALSE 52889
// exit ;
52887: GO 52912
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52889: LD_ADDR_VAR 0 2
52893: PUSH
52894: LD_VAR 0 1
52898: PPUSH
52899: CALL_OW 254
52903: PUSH
52904: LD_INT 3
52906: PLUS
52907: PUSH
52908: LD_INT 6
52910: MOD
52911: ST_TO_ADDR
// end ;
52912: LD_VAR 0 2
52916: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52917: LD_INT 0
52919: PPUSH
52920: PPUSH
52921: PPUSH
52922: PPUSH
52923: PPUSH
// if not hexes then
52924: LD_VAR 0 2
52928: NOT
52929: IFFALSE 52933
// exit ;
52931: GO 53081
// dist := 9999 ;
52933: LD_ADDR_VAR 0 5
52937: PUSH
52938: LD_INT 9999
52940: ST_TO_ADDR
// for i = 1 to hexes do
52941: LD_ADDR_VAR 0 4
52945: PUSH
52946: DOUBLE
52947: LD_INT 1
52949: DEC
52950: ST_TO_ADDR
52951: LD_VAR 0 2
52955: PUSH
52956: FOR_TO
52957: IFFALSE 53069
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52959: LD_VAR 0 1
52963: PPUSH
52964: LD_VAR 0 2
52968: PUSH
52969: LD_VAR 0 4
52973: ARRAY
52974: PUSH
52975: LD_INT 1
52977: ARRAY
52978: PPUSH
52979: LD_VAR 0 2
52983: PUSH
52984: LD_VAR 0 4
52988: ARRAY
52989: PUSH
52990: LD_INT 2
52992: ARRAY
52993: PPUSH
52994: CALL_OW 297
52998: PUSH
52999: LD_VAR 0 5
53003: LESS
53004: IFFALSE 53067
// begin hex := hexes [ i ] ;
53006: LD_ADDR_VAR 0 7
53010: PUSH
53011: LD_VAR 0 2
53015: PUSH
53016: LD_VAR 0 4
53020: ARRAY
53021: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53022: LD_ADDR_VAR 0 5
53026: PUSH
53027: LD_VAR 0 1
53031: PPUSH
53032: LD_VAR 0 2
53036: PUSH
53037: LD_VAR 0 4
53041: ARRAY
53042: PUSH
53043: LD_INT 1
53045: ARRAY
53046: PPUSH
53047: LD_VAR 0 2
53051: PUSH
53052: LD_VAR 0 4
53056: ARRAY
53057: PUSH
53058: LD_INT 2
53060: ARRAY
53061: PPUSH
53062: CALL_OW 297
53066: ST_TO_ADDR
// end ; end ;
53067: GO 52956
53069: POP
53070: POP
// result := hex ;
53071: LD_ADDR_VAR 0 3
53075: PUSH
53076: LD_VAR 0 7
53080: ST_TO_ADDR
// end ;
53081: LD_VAR 0 3
53085: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53086: LD_INT 0
53088: PPUSH
53089: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53090: LD_VAR 0 1
53094: NOT
53095: PUSH
53096: LD_VAR 0 1
53100: PUSH
53101: LD_INT 21
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 23
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PPUSH
53125: CALL_OW 69
53129: IN
53130: NOT
53131: OR
53132: IFFALSE 53136
// exit ;
53134: GO 53183
// for i = 1 to 3 do
53136: LD_ADDR_VAR 0 3
53140: PUSH
53141: DOUBLE
53142: LD_INT 1
53144: DEC
53145: ST_TO_ADDR
53146: LD_INT 3
53148: PUSH
53149: FOR_TO
53150: IFFALSE 53181
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53152: LD_VAR 0 1
53156: PPUSH
53157: CALL_OW 250
53161: PPUSH
53162: LD_VAR 0 1
53166: PPUSH
53167: CALL_OW 251
53171: PPUSH
53172: LD_INT 1
53174: PPUSH
53175: CALL_OW 453
53179: GO 53149
53181: POP
53182: POP
// end ;
53183: LD_VAR 0 2
53187: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53188: LD_INT 0
53190: PPUSH
53191: PPUSH
53192: PPUSH
53193: PPUSH
53194: PPUSH
53195: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53196: LD_VAR 0 1
53200: NOT
53201: PUSH
53202: LD_VAR 0 2
53206: NOT
53207: OR
53208: PUSH
53209: LD_VAR 0 1
53213: PPUSH
53214: CALL_OW 314
53218: OR
53219: IFFALSE 53223
// exit ;
53221: GO 53664
// x := GetX ( enemy_unit ) ;
53223: LD_ADDR_VAR 0 7
53227: PUSH
53228: LD_VAR 0 2
53232: PPUSH
53233: CALL_OW 250
53237: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53238: LD_ADDR_VAR 0 8
53242: PUSH
53243: LD_VAR 0 2
53247: PPUSH
53248: CALL_OW 251
53252: ST_TO_ADDR
// if not x or not y then
53253: LD_VAR 0 7
53257: NOT
53258: PUSH
53259: LD_VAR 0 8
53263: NOT
53264: OR
53265: IFFALSE 53269
// exit ;
53267: GO 53664
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53269: LD_ADDR_VAR 0 6
53273: PUSH
53274: LD_VAR 0 7
53278: PPUSH
53279: LD_INT 0
53281: PPUSH
53282: LD_INT 4
53284: PPUSH
53285: CALL_OW 272
53289: PUSH
53290: LD_VAR 0 8
53294: PPUSH
53295: LD_INT 0
53297: PPUSH
53298: LD_INT 4
53300: PPUSH
53301: CALL_OW 273
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_VAR 0 7
53314: PPUSH
53315: LD_INT 1
53317: PPUSH
53318: LD_INT 4
53320: PPUSH
53321: CALL_OW 272
53325: PUSH
53326: LD_VAR 0 8
53330: PPUSH
53331: LD_INT 1
53333: PPUSH
53334: LD_INT 4
53336: PPUSH
53337: CALL_OW 273
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_VAR 0 7
53350: PPUSH
53351: LD_INT 2
53353: PPUSH
53354: LD_INT 4
53356: PPUSH
53357: CALL_OW 272
53361: PUSH
53362: LD_VAR 0 8
53366: PPUSH
53367: LD_INT 2
53369: PPUSH
53370: LD_INT 4
53372: PPUSH
53373: CALL_OW 273
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_VAR 0 7
53386: PPUSH
53387: LD_INT 3
53389: PPUSH
53390: LD_INT 4
53392: PPUSH
53393: CALL_OW 272
53397: PUSH
53398: LD_VAR 0 8
53402: PPUSH
53403: LD_INT 3
53405: PPUSH
53406: LD_INT 4
53408: PPUSH
53409: CALL_OW 273
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_VAR 0 7
53422: PPUSH
53423: LD_INT 4
53425: PPUSH
53426: LD_INT 4
53428: PPUSH
53429: CALL_OW 272
53433: PUSH
53434: LD_VAR 0 8
53438: PPUSH
53439: LD_INT 4
53441: PPUSH
53442: LD_INT 4
53444: PPUSH
53445: CALL_OW 273
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_VAR 0 7
53458: PPUSH
53459: LD_INT 5
53461: PPUSH
53462: LD_INT 4
53464: PPUSH
53465: CALL_OW 272
53469: PUSH
53470: LD_VAR 0 8
53474: PPUSH
53475: LD_INT 5
53477: PPUSH
53478: LD_INT 4
53480: PPUSH
53481: CALL_OW 273
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: ST_TO_ADDR
// for i = tmp downto 1 do
53498: LD_ADDR_VAR 0 4
53502: PUSH
53503: DOUBLE
53504: LD_VAR 0 6
53508: INC
53509: ST_TO_ADDR
53510: LD_INT 1
53512: PUSH
53513: FOR_DOWNTO
53514: IFFALSE 53615
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53516: LD_VAR 0 6
53520: PUSH
53521: LD_VAR 0 4
53525: ARRAY
53526: PUSH
53527: LD_INT 1
53529: ARRAY
53530: PPUSH
53531: LD_VAR 0 6
53535: PUSH
53536: LD_VAR 0 4
53540: ARRAY
53541: PUSH
53542: LD_INT 2
53544: ARRAY
53545: PPUSH
53546: CALL_OW 488
53550: NOT
53551: PUSH
53552: LD_VAR 0 6
53556: PUSH
53557: LD_VAR 0 4
53561: ARRAY
53562: PUSH
53563: LD_INT 1
53565: ARRAY
53566: PPUSH
53567: LD_VAR 0 6
53571: PUSH
53572: LD_VAR 0 4
53576: ARRAY
53577: PUSH
53578: LD_INT 2
53580: ARRAY
53581: PPUSH
53582: CALL_OW 428
53586: PUSH
53587: LD_INT 0
53589: NONEQUAL
53590: OR
53591: IFFALSE 53613
// tmp := Delete ( tmp , i ) ;
53593: LD_ADDR_VAR 0 6
53597: PUSH
53598: LD_VAR 0 6
53602: PPUSH
53603: LD_VAR 0 4
53607: PPUSH
53608: CALL_OW 3
53612: ST_TO_ADDR
53613: GO 53513
53615: POP
53616: POP
// j := GetClosestHex ( unit , tmp ) ;
53617: LD_ADDR_VAR 0 5
53621: PUSH
53622: LD_VAR 0 1
53626: PPUSH
53627: LD_VAR 0 6
53631: PPUSH
53632: CALL 52917 0 2
53636: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53637: LD_VAR 0 1
53641: PPUSH
53642: LD_VAR 0 5
53646: PUSH
53647: LD_INT 1
53649: ARRAY
53650: PPUSH
53651: LD_VAR 0 5
53655: PUSH
53656: LD_INT 2
53658: ARRAY
53659: PPUSH
53660: CALL_OW 111
// end ;
53664: LD_VAR 0 3
53668: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53669: LD_INT 0
53671: PPUSH
53672: PPUSH
53673: PPUSH
// uc_side = 0 ;
53674: LD_ADDR_OWVAR 20
53678: PUSH
53679: LD_INT 0
53681: ST_TO_ADDR
// uc_nation = 0 ;
53682: LD_ADDR_OWVAR 21
53686: PUSH
53687: LD_INT 0
53689: ST_TO_ADDR
// InitHc_All ( ) ;
53690: CALL_OW 584
// InitVc ;
53694: CALL_OW 20
// if mastodonts then
53698: LD_VAR 0 6
53702: IFFALSE 53769
// for i = 1 to mastodonts do
53704: LD_ADDR_VAR 0 11
53708: PUSH
53709: DOUBLE
53710: LD_INT 1
53712: DEC
53713: ST_TO_ADDR
53714: LD_VAR 0 6
53718: PUSH
53719: FOR_TO
53720: IFFALSE 53767
// begin vc_chassis := 31 ;
53722: LD_ADDR_OWVAR 37
53726: PUSH
53727: LD_INT 31
53729: ST_TO_ADDR
// vc_control := control_rider ;
53730: LD_ADDR_OWVAR 38
53734: PUSH
53735: LD_INT 4
53737: ST_TO_ADDR
// animal := CreateVehicle ;
53738: LD_ADDR_VAR 0 12
53742: PUSH
53743: CALL_OW 45
53747: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53748: LD_VAR 0 12
53752: PPUSH
53753: LD_VAR 0 8
53757: PPUSH
53758: LD_INT 0
53760: PPUSH
53761: CALL 55957 0 3
// end ;
53765: GO 53719
53767: POP
53768: POP
// if horses then
53769: LD_VAR 0 5
53773: IFFALSE 53840
// for i = 1 to horses do
53775: LD_ADDR_VAR 0 11
53779: PUSH
53780: DOUBLE
53781: LD_INT 1
53783: DEC
53784: ST_TO_ADDR
53785: LD_VAR 0 5
53789: PUSH
53790: FOR_TO
53791: IFFALSE 53838
// begin hc_class := 21 ;
53793: LD_ADDR_OWVAR 28
53797: PUSH
53798: LD_INT 21
53800: ST_TO_ADDR
// hc_gallery :=  ;
53801: LD_ADDR_OWVAR 33
53805: PUSH
53806: LD_STRING 
53808: ST_TO_ADDR
// animal := CreateHuman ;
53809: LD_ADDR_VAR 0 12
53813: PUSH
53814: CALL_OW 44
53818: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53819: LD_VAR 0 12
53823: PPUSH
53824: LD_VAR 0 8
53828: PPUSH
53829: LD_INT 0
53831: PPUSH
53832: CALL 55957 0 3
// end ;
53836: GO 53790
53838: POP
53839: POP
// if birds then
53840: LD_VAR 0 1
53844: IFFALSE 53911
// for i = 1 to birds do
53846: LD_ADDR_VAR 0 11
53850: PUSH
53851: DOUBLE
53852: LD_INT 1
53854: DEC
53855: ST_TO_ADDR
53856: LD_VAR 0 1
53860: PUSH
53861: FOR_TO
53862: IFFALSE 53909
// begin hc_class = 18 ;
53864: LD_ADDR_OWVAR 28
53868: PUSH
53869: LD_INT 18
53871: ST_TO_ADDR
// hc_gallery =  ;
53872: LD_ADDR_OWVAR 33
53876: PUSH
53877: LD_STRING 
53879: ST_TO_ADDR
// animal := CreateHuman ;
53880: LD_ADDR_VAR 0 12
53884: PUSH
53885: CALL_OW 44
53889: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53890: LD_VAR 0 12
53894: PPUSH
53895: LD_VAR 0 8
53899: PPUSH
53900: LD_INT 0
53902: PPUSH
53903: CALL 55957 0 3
// end ;
53907: GO 53861
53909: POP
53910: POP
// if tigers then
53911: LD_VAR 0 2
53915: IFFALSE 53999
// for i = 1 to tigers do
53917: LD_ADDR_VAR 0 11
53921: PUSH
53922: DOUBLE
53923: LD_INT 1
53925: DEC
53926: ST_TO_ADDR
53927: LD_VAR 0 2
53931: PUSH
53932: FOR_TO
53933: IFFALSE 53997
// begin hc_class = class_tiger ;
53935: LD_ADDR_OWVAR 28
53939: PUSH
53940: LD_INT 14
53942: ST_TO_ADDR
// hc_gallery =  ;
53943: LD_ADDR_OWVAR 33
53947: PUSH
53948: LD_STRING 
53950: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53951: LD_ADDR_OWVAR 35
53955: PUSH
53956: LD_INT 7
53958: NEG
53959: PPUSH
53960: LD_INT 7
53962: PPUSH
53963: CALL_OW 12
53967: ST_TO_ADDR
// animal := CreateHuman ;
53968: LD_ADDR_VAR 0 12
53972: PUSH
53973: CALL_OW 44
53977: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53978: LD_VAR 0 12
53982: PPUSH
53983: LD_VAR 0 8
53987: PPUSH
53988: LD_INT 0
53990: PPUSH
53991: CALL 55957 0 3
// end ;
53995: GO 53932
53997: POP
53998: POP
// if apemans then
53999: LD_VAR 0 3
54003: IFFALSE 54126
// for i = 1 to apemans do
54005: LD_ADDR_VAR 0 11
54009: PUSH
54010: DOUBLE
54011: LD_INT 1
54013: DEC
54014: ST_TO_ADDR
54015: LD_VAR 0 3
54019: PUSH
54020: FOR_TO
54021: IFFALSE 54124
// begin hc_class = class_apeman ;
54023: LD_ADDR_OWVAR 28
54027: PUSH
54028: LD_INT 12
54030: ST_TO_ADDR
// hc_gallery =  ;
54031: LD_ADDR_OWVAR 33
54035: PUSH
54036: LD_STRING 
54038: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54039: LD_ADDR_OWVAR 35
54043: PUSH
54044: LD_INT 5
54046: NEG
54047: PPUSH
54048: LD_INT 5
54050: PPUSH
54051: CALL_OW 12
54055: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54056: LD_ADDR_OWVAR 31
54060: PUSH
54061: LD_INT 1
54063: PPUSH
54064: LD_INT 3
54066: PPUSH
54067: CALL_OW 12
54071: PUSH
54072: LD_INT 1
54074: PPUSH
54075: LD_INT 3
54077: PPUSH
54078: CALL_OW 12
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: ST_TO_ADDR
// animal := CreateHuman ;
54095: LD_ADDR_VAR 0 12
54099: PUSH
54100: CALL_OW 44
54104: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54105: LD_VAR 0 12
54109: PPUSH
54110: LD_VAR 0 8
54114: PPUSH
54115: LD_INT 0
54117: PPUSH
54118: CALL 55957 0 3
// end ;
54122: GO 54020
54124: POP
54125: POP
// if enchidnas then
54126: LD_VAR 0 4
54130: IFFALSE 54197
// for i = 1 to enchidnas do
54132: LD_ADDR_VAR 0 11
54136: PUSH
54137: DOUBLE
54138: LD_INT 1
54140: DEC
54141: ST_TO_ADDR
54142: LD_VAR 0 4
54146: PUSH
54147: FOR_TO
54148: IFFALSE 54195
// begin hc_class = 13 ;
54150: LD_ADDR_OWVAR 28
54154: PUSH
54155: LD_INT 13
54157: ST_TO_ADDR
// hc_gallery =  ;
54158: LD_ADDR_OWVAR 33
54162: PUSH
54163: LD_STRING 
54165: ST_TO_ADDR
// animal := CreateHuman ;
54166: LD_ADDR_VAR 0 12
54170: PUSH
54171: CALL_OW 44
54175: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54176: LD_VAR 0 12
54180: PPUSH
54181: LD_VAR 0 8
54185: PPUSH
54186: LD_INT 0
54188: PPUSH
54189: CALL 55957 0 3
// end ;
54193: GO 54147
54195: POP
54196: POP
// if fishes then
54197: LD_VAR 0 7
54201: IFFALSE 54268
// for i = 1 to fishes do
54203: LD_ADDR_VAR 0 11
54207: PUSH
54208: DOUBLE
54209: LD_INT 1
54211: DEC
54212: ST_TO_ADDR
54213: LD_VAR 0 7
54217: PUSH
54218: FOR_TO
54219: IFFALSE 54266
// begin hc_class = 20 ;
54221: LD_ADDR_OWVAR 28
54225: PUSH
54226: LD_INT 20
54228: ST_TO_ADDR
// hc_gallery =  ;
54229: LD_ADDR_OWVAR 33
54233: PUSH
54234: LD_STRING 
54236: ST_TO_ADDR
// animal := CreateHuman ;
54237: LD_ADDR_VAR 0 12
54241: PUSH
54242: CALL_OW 44
54246: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54247: LD_VAR 0 12
54251: PPUSH
54252: LD_VAR 0 9
54256: PPUSH
54257: LD_INT 0
54259: PPUSH
54260: CALL 55957 0 3
// end ;
54264: GO 54218
54266: POP
54267: POP
// end ;
54268: LD_VAR 0 10
54272: RET
// export function WantHeal ( sci , unit ) ; begin
54273: LD_INT 0
54275: PPUSH
// if GetTaskList ( sci ) > 0 then
54276: LD_VAR 0 1
54280: PPUSH
54281: CALL_OW 437
54285: PUSH
54286: LD_INT 0
54288: GREATER
54289: IFFALSE 54359
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54291: LD_VAR 0 1
54295: PPUSH
54296: CALL_OW 437
54300: PUSH
54301: LD_INT 1
54303: ARRAY
54304: PUSH
54305: LD_INT 1
54307: ARRAY
54308: PUSH
54309: LD_STRING l
54311: EQUAL
54312: PUSH
54313: LD_VAR 0 1
54317: PPUSH
54318: CALL_OW 437
54322: PUSH
54323: LD_INT 1
54325: ARRAY
54326: PUSH
54327: LD_INT 4
54329: ARRAY
54330: PUSH
54331: LD_VAR 0 2
54335: EQUAL
54336: AND
54337: IFFALSE 54349
// result := true else
54339: LD_ADDR_VAR 0 3
54343: PUSH
54344: LD_INT 1
54346: ST_TO_ADDR
54347: GO 54357
// result := false ;
54349: LD_ADDR_VAR 0 3
54353: PUSH
54354: LD_INT 0
54356: ST_TO_ADDR
// end else
54357: GO 54367
// result := false ;
54359: LD_ADDR_VAR 0 3
54363: PUSH
54364: LD_INT 0
54366: ST_TO_ADDR
// end ;
54367: LD_VAR 0 3
54371: RET
// export function HealTarget ( sci ) ; begin
54372: LD_INT 0
54374: PPUSH
// if not sci then
54375: LD_VAR 0 1
54379: NOT
54380: IFFALSE 54384
// exit ;
54382: GO 54449
// result := 0 ;
54384: LD_ADDR_VAR 0 2
54388: PUSH
54389: LD_INT 0
54391: ST_TO_ADDR
// if GetTaskList ( sci ) then
54392: LD_VAR 0 1
54396: PPUSH
54397: CALL_OW 437
54401: IFFALSE 54449
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54403: LD_VAR 0 1
54407: PPUSH
54408: CALL_OW 437
54412: PUSH
54413: LD_INT 1
54415: ARRAY
54416: PUSH
54417: LD_INT 1
54419: ARRAY
54420: PUSH
54421: LD_STRING l
54423: EQUAL
54424: IFFALSE 54449
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54426: LD_ADDR_VAR 0 2
54430: PUSH
54431: LD_VAR 0 1
54435: PPUSH
54436: CALL_OW 437
54440: PUSH
54441: LD_INT 1
54443: ARRAY
54444: PUSH
54445: LD_INT 4
54447: ARRAY
54448: ST_TO_ADDR
// end ;
54449: LD_VAR 0 2
54453: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54454: LD_INT 0
54456: PPUSH
54457: PPUSH
54458: PPUSH
54459: PPUSH
// if not base_units then
54460: LD_VAR 0 1
54464: NOT
54465: IFFALSE 54469
// exit ;
54467: GO 54556
// result := false ;
54469: LD_ADDR_VAR 0 2
54473: PUSH
54474: LD_INT 0
54476: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54477: LD_ADDR_VAR 0 5
54481: PUSH
54482: LD_VAR 0 1
54486: PPUSH
54487: LD_INT 21
54489: PUSH
54490: LD_INT 3
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PPUSH
54497: CALL_OW 72
54501: ST_TO_ADDR
// if not tmp then
54502: LD_VAR 0 5
54506: NOT
54507: IFFALSE 54511
// exit ;
54509: GO 54556
// for i in tmp do
54511: LD_ADDR_VAR 0 3
54515: PUSH
54516: LD_VAR 0 5
54520: PUSH
54521: FOR_IN
54522: IFFALSE 54554
// begin result := EnemyInRange ( i , 22 ) ;
54524: LD_ADDR_VAR 0 2
54528: PUSH
54529: LD_VAR 0 3
54533: PPUSH
54534: LD_INT 22
54536: PPUSH
54537: CALL 52792 0 2
54541: ST_TO_ADDR
// if result then
54542: LD_VAR 0 2
54546: IFFALSE 54552
// exit ;
54548: POP
54549: POP
54550: GO 54556
// end ;
54552: GO 54521
54554: POP
54555: POP
// end ;
54556: LD_VAR 0 2
54560: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54561: LD_INT 0
54563: PPUSH
54564: PPUSH
// if not units then
54565: LD_VAR 0 1
54569: NOT
54570: IFFALSE 54574
// exit ;
54572: GO 54644
// result := [ ] ;
54574: LD_ADDR_VAR 0 3
54578: PUSH
54579: EMPTY
54580: ST_TO_ADDR
// for i in units do
54581: LD_ADDR_VAR 0 4
54585: PUSH
54586: LD_VAR 0 1
54590: PUSH
54591: FOR_IN
54592: IFFALSE 54642
// if GetTag ( i ) = tag then
54594: LD_VAR 0 4
54598: PPUSH
54599: CALL_OW 110
54603: PUSH
54604: LD_VAR 0 2
54608: EQUAL
54609: IFFALSE 54640
// result := Insert ( result , result + 1 , i ) ;
54611: LD_ADDR_VAR 0 3
54615: PUSH
54616: LD_VAR 0 3
54620: PPUSH
54621: LD_VAR 0 3
54625: PUSH
54626: LD_INT 1
54628: PLUS
54629: PPUSH
54630: LD_VAR 0 4
54634: PPUSH
54635: CALL_OW 2
54639: ST_TO_ADDR
54640: GO 54591
54642: POP
54643: POP
// end ;
54644: LD_VAR 0 3
54648: RET
// export function IsDriver ( un ) ; begin
54649: LD_INT 0
54651: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54652: LD_ADDR_VAR 0 2
54656: PUSH
54657: LD_VAR 0 1
54661: PUSH
54662: LD_INT 55
54664: PUSH
54665: EMPTY
54666: LIST
54667: PPUSH
54668: CALL_OW 69
54672: IN
54673: ST_TO_ADDR
// end ;
54674: LD_VAR 0 2
54678: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54679: LD_INT 0
54681: PPUSH
54682: PPUSH
// list := [ ] ;
54683: LD_ADDR_VAR 0 5
54687: PUSH
54688: EMPTY
54689: ST_TO_ADDR
// case d of 0 :
54690: LD_VAR 0 3
54694: PUSH
54695: LD_INT 0
54697: DOUBLE
54698: EQUAL
54699: IFTRUE 54703
54701: GO 54836
54703: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54704: LD_ADDR_VAR 0 5
54708: PUSH
54709: LD_VAR 0 1
54713: PUSH
54714: LD_INT 4
54716: MINUS
54717: PUSH
54718: LD_VAR 0 2
54722: PUSH
54723: LD_INT 4
54725: MINUS
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: LIST
54734: PUSH
54735: LD_VAR 0 1
54739: PUSH
54740: LD_INT 3
54742: MINUS
54743: PUSH
54744: LD_VAR 0 2
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: LIST
54756: PUSH
54757: LD_VAR 0 1
54761: PUSH
54762: LD_INT 4
54764: PLUS
54765: PUSH
54766: LD_VAR 0 2
54770: PUSH
54771: LD_INT 4
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: PUSH
54779: LD_VAR 0 1
54783: PUSH
54784: LD_INT 3
54786: PLUS
54787: PUSH
54788: LD_VAR 0 2
54792: PUSH
54793: LD_INT 3
54795: PLUS
54796: PUSH
54797: LD_INT 5
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: LIST
54804: PUSH
54805: LD_VAR 0 1
54809: PUSH
54810: LD_VAR 0 2
54814: PUSH
54815: LD_INT 4
54817: PLUS
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: LIST
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: ST_TO_ADDR
// end ; 1 :
54834: GO 55534
54836: LD_INT 1
54838: DOUBLE
54839: EQUAL
54840: IFTRUE 54844
54842: GO 54977
54844: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54845: LD_ADDR_VAR 0 5
54849: PUSH
54850: LD_VAR 0 1
54854: PUSH
54855: LD_VAR 0 2
54859: PUSH
54860: LD_INT 4
54862: MINUS
54863: PUSH
54864: LD_INT 3
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: LIST
54871: PUSH
54872: LD_VAR 0 1
54876: PUSH
54877: LD_INT 3
54879: MINUS
54880: PUSH
54881: LD_VAR 0 2
54885: PUSH
54886: LD_INT 3
54888: MINUS
54889: PUSH
54890: LD_INT 2
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: LIST
54897: PUSH
54898: LD_VAR 0 1
54902: PUSH
54903: LD_INT 4
54905: MINUS
54906: PUSH
54907: LD_VAR 0 2
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: LIST
54919: PUSH
54920: LD_VAR 0 1
54924: PUSH
54925: LD_VAR 0 2
54929: PUSH
54930: LD_INT 3
54932: PLUS
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: LIST
54941: PUSH
54942: LD_VAR 0 1
54946: PUSH
54947: LD_INT 4
54949: PLUS
54950: PUSH
54951: LD_VAR 0 2
54955: PUSH
54956: LD_INT 4
54958: PLUS
54959: PUSH
54960: LD_INT 5
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: LIST
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: ST_TO_ADDR
// end ; 2 :
54975: GO 55534
54977: LD_INT 2
54979: DOUBLE
54980: EQUAL
54981: IFTRUE 54985
54983: GO 55114
54985: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54986: LD_ADDR_VAR 0 5
54990: PUSH
54991: LD_VAR 0 1
54995: PUSH
54996: LD_VAR 0 2
55000: PUSH
55001: LD_INT 3
55003: MINUS
55004: PUSH
55005: LD_INT 3
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: LIST
55012: PUSH
55013: LD_VAR 0 1
55017: PUSH
55018: LD_INT 4
55020: PLUS
55021: PUSH
55022: LD_VAR 0 2
55026: PUSH
55027: LD_INT 4
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: PUSH
55035: LD_VAR 0 1
55039: PUSH
55040: LD_VAR 0 2
55044: PUSH
55045: LD_INT 4
55047: PLUS
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: LIST
55056: PUSH
55057: LD_VAR 0 1
55061: PUSH
55062: LD_INT 3
55064: MINUS
55065: PUSH
55066: LD_VAR 0 2
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: LIST
55078: PUSH
55079: LD_VAR 0 1
55083: PUSH
55084: LD_INT 4
55086: MINUS
55087: PUSH
55088: LD_VAR 0 2
55092: PUSH
55093: LD_INT 4
55095: MINUS
55096: PUSH
55097: LD_INT 2
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: LIST
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: ST_TO_ADDR
// end ; 3 :
55112: GO 55534
55114: LD_INT 3
55116: DOUBLE
55117: EQUAL
55118: IFTRUE 55122
55120: GO 55255
55122: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55123: LD_ADDR_VAR 0 5
55127: PUSH
55128: LD_VAR 0 1
55132: PUSH
55133: LD_INT 3
55135: PLUS
55136: PUSH
55137: LD_VAR 0 2
55141: PUSH
55142: LD_INT 4
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: LIST
55149: PUSH
55150: LD_VAR 0 1
55154: PUSH
55155: LD_INT 4
55157: PLUS
55158: PUSH
55159: LD_VAR 0 2
55163: PUSH
55164: LD_INT 4
55166: PLUS
55167: PUSH
55168: LD_INT 5
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: LIST
55175: PUSH
55176: LD_VAR 0 1
55180: PUSH
55181: LD_INT 4
55183: MINUS
55184: PUSH
55185: LD_VAR 0 2
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: LIST
55197: PUSH
55198: LD_VAR 0 1
55202: PUSH
55203: LD_VAR 0 2
55207: PUSH
55208: LD_INT 4
55210: MINUS
55211: PUSH
55212: LD_INT 3
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: LIST
55219: PUSH
55220: LD_VAR 0 1
55224: PUSH
55225: LD_INT 3
55227: MINUS
55228: PUSH
55229: LD_VAR 0 2
55233: PUSH
55234: LD_INT 3
55236: MINUS
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: ST_TO_ADDR
// end ; 4 :
55253: GO 55534
55255: LD_INT 4
55257: DOUBLE
55258: EQUAL
55259: IFTRUE 55263
55261: GO 55396
55263: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55264: LD_ADDR_VAR 0 5
55268: PUSH
55269: LD_VAR 0 1
55273: PUSH
55274: LD_VAR 0 2
55278: PUSH
55279: LD_INT 4
55281: PLUS
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: LIST
55290: PUSH
55291: LD_VAR 0 1
55295: PUSH
55296: LD_INT 3
55298: PLUS
55299: PUSH
55300: LD_VAR 0 2
55304: PUSH
55305: LD_INT 3
55307: PLUS
55308: PUSH
55309: LD_INT 5
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: LIST
55316: PUSH
55317: LD_VAR 0 1
55321: PUSH
55322: LD_INT 4
55324: PLUS
55325: PUSH
55326: LD_VAR 0 2
55330: PUSH
55331: LD_INT 4
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: LIST
55338: PUSH
55339: LD_VAR 0 1
55343: PUSH
55344: LD_VAR 0 2
55348: PUSH
55349: LD_INT 3
55351: MINUS
55352: PUSH
55353: LD_INT 3
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: LIST
55360: PUSH
55361: LD_VAR 0 1
55365: PUSH
55366: LD_INT 4
55368: MINUS
55369: PUSH
55370: LD_VAR 0 2
55374: PUSH
55375: LD_INT 4
55377: MINUS
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: LIST
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: ST_TO_ADDR
// end ; 5 :
55394: GO 55534
55396: LD_INT 5
55398: DOUBLE
55399: EQUAL
55400: IFTRUE 55404
55402: GO 55533
55404: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55405: LD_ADDR_VAR 0 5
55409: PUSH
55410: LD_VAR 0 1
55414: PUSH
55415: LD_INT 4
55417: MINUS
55418: PUSH
55419: LD_VAR 0 2
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: LIST
55431: PUSH
55432: LD_VAR 0 1
55436: PUSH
55437: LD_VAR 0 2
55441: PUSH
55442: LD_INT 4
55444: MINUS
55445: PUSH
55446: LD_INT 3
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: LIST
55453: PUSH
55454: LD_VAR 0 1
55458: PUSH
55459: LD_INT 4
55461: PLUS
55462: PUSH
55463: LD_VAR 0 2
55467: PUSH
55468: LD_INT 4
55470: PLUS
55471: PUSH
55472: LD_INT 5
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: PUSH
55480: LD_VAR 0 1
55484: PUSH
55485: LD_INT 3
55487: PLUS
55488: PUSH
55489: LD_VAR 0 2
55493: PUSH
55494: LD_INT 4
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: PUSH
55502: LD_VAR 0 1
55506: PUSH
55507: LD_VAR 0 2
55511: PUSH
55512: LD_INT 3
55514: PLUS
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: LIST
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: ST_TO_ADDR
// end ; end ;
55531: GO 55534
55533: POP
// result := list ;
55534: LD_ADDR_VAR 0 4
55538: PUSH
55539: LD_VAR 0 5
55543: ST_TO_ADDR
// end ;
55544: LD_VAR 0 4
55548: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55549: LD_INT 0
55551: PPUSH
55552: PPUSH
55553: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55554: LD_VAR 0 1
55558: NOT
55559: PUSH
55560: LD_VAR 0 2
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: LD_INT 3
55573: PUSH
55574: LD_INT 4
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: IN
55583: NOT
55584: OR
55585: IFFALSE 55589
// exit ;
55587: GO 55681
// tmp := [ ] ;
55589: LD_ADDR_VAR 0 5
55593: PUSH
55594: EMPTY
55595: ST_TO_ADDR
// for i in units do
55596: LD_ADDR_VAR 0 4
55600: PUSH
55601: LD_VAR 0 1
55605: PUSH
55606: FOR_IN
55607: IFFALSE 55650
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55609: LD_ADDR_VAR 0 5
55613: PUSH
55614: LD_VAR 0 5
55618: PPUSH
55619: LD_VAR 0 5
55623: PUSH
55624: LD_INT 1
55626: PLUS
55627: PPUSH
55628: LD_VAR 0 4
55632: PPUSH
55633: LD_VAR 0 2
55637: PPUSH
55638: CALL_OW 259
55642: PPUSH
55643: CALL_OW 2
55647: ST_TO_ADDR
55648: GO 55606
55650: POP
55651: POP
// if not tmp then
55652: LD_VAR 0 5
55656: NOT
55657: IFFALSE 55661
// exit ;
55659: GO 55681
// result := SortListByListDesc ( units , tmp ) ;
55661: LD_ADDR_VAR 0 3
55665: PUSH
55666: LD_VAR 0 1
55670: PPUSH
55671: LD_VAR 0 5
55675: PPUSH
55676: CALL_OW 77
55680: ST_TO_ADDR
// end ;
55681: LD_VAR 0 3
55685: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55686: LD_INT 0
55688: PPUSH
55689: PPUSH
55690: PPUSH
// result := false ;
55691: LD_ADDR_VAR 0 3
55695: PUSH
55696: LD_INT 0
55698: ST_TO_ADDR
// x := GetX ( building ) ;
55699: LD_ADDR_VAR 0 4
55703: PUSH
55704: LD_VAR 0 2
55708: PPUSH
55709: CALL_OW 250
55713: ST_TO_ADDR
// y := GetY ( building ) ;
55714: LD_ADDR_VAR 0 5
55718: PUSH
55719: LD_VAR 0 2
55723: PPUSH
55724: CALL_OW 251
55728: ST_TO_ADDR
// if not building or not x or not y then
55729: LD_VAR 0 2
55733: NOT
55734: PUSH
55735: LD_VAR 0 4
55739: NOT
55740: OR
55741: PUSH
55742: LD_VAR 0 5
55746: NOT
55747: OR
55748: IFFALSE 55752
// exit ;
55750: GO 55844
// if GetTaskList ( unit ) then
55752: LD_VAR 0 1
55756: PPUSH
55757: CALL_OW 437
55761: IFFALSE 55844
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55763: LD_STRING e
55765: PUSH
55766: LD_VAR 0 1
55770: PPUSH
55771: CALL_OW 437
55775: PUSH
55776: LD_INT 1
55778: ARRAY
55779: PUSH
55780: LD_INT 1
55782: ARRAY
55783: EQUAL
55784: PUSH
55785: LD_VAR 0 4
55789: PUSH
55790: LD_VAR 0 1
55794: PPUSH
55795: CALL_OW 437
55799: PUSH
55800: LD_INT 1
55802: ARRAY
55803: PUSH
55804: LD_INT 2
55806: ARRAY
55807: EQUAL
55808: AND
55809: PUSH
55810: LD_VAR 0 5
55814: PUSH
55815: LD_VAR 0 1
55819: PPUSH
55820: CALL_OW 437
55824: PUSH
55825: LD_INT 1
55827: ARRAY
55828: PUSH
55829: LD_INT 3
55831: ARRAY
55832: EQUAL
55833: AND
55834: IFFALSE 55844
// result := true end ;
55836: LD_ADDR_VAR 0 3
55840: PUSH
55841: LD_INT 1
55843: ST_TO_ADDR
// end ;
55844: LD_VAR 0 3
55848: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55849: LD_INT 0
55851: PPUSH
// result := false ;
55852: LD_ADDR_VAR 0 4
55856: PUSH
55857: LD_INT 0
55859: ST_TO_ADDR
// if GetTaskList ( unit ) then
55860: LD_VAR 0 1
55864: PPUSH
55865: CALL_OW 437
55869: IFFALSE 55952
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55871: LD_STRING M
55873: PUSH
55874: LD_VAR 0 1
55878: PPUSH
55879: CALL_OW 437
55883: PUSH
55884: LD_INT 1
55886: ARRAY
55887: PUSH
55888: LD_INT 1
55890: ARRAY
55891: EQUAL
55892: PUSH
55893: LD_VAR 0 2
55897: PUSH
55898: LD_VAR 0 1
55902: PPUSH
55903: CALL_OW 437
55907: PUSH
55908: LD_INT 1
55910: ARRAY
55911: PUSH
55912: LD_INT 2
55914: ARRAY
55915: EQUAL
55916: AND
55917: PUSH
55918: LD_VAR 0 3
55922: PUSH
55923: LD_VAR 0 1
55927: PPUSH
55928: CALL_OW 437
55932: PUSH
55933: LD_INT 1
55935: ARRAY
55936: PUSH
55937: LD_INT 3
55939: ARRAY
55940: EQUAL
55941: AND
55942: IFFALSE 55952
// result := true ;
55944: LD_ADDR_VAR 0 4
55948: PUSH
55949: LD_INT 1
55951: ST_TO_ADDR
// end ; end ;
55952: LD_VAR 0 4
55956: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55957: LD_INT 0
55959: PPUSH
55960: PPUSH
55961: PPUSH
55962: PPUSH
// if not unit or not area then
55963: LD_VAR 0 1
55967: NOT
55968: PUSH
55969: LD_VAR 0 2
55973: NOT
55974: OR
55975: IFFALSE 55979
// exit ;
55977: GO 56143
// tmp := AreaToList ( area , i ) ;
55979: LD_ADDR_VAR 0 6
55983: PUSH
55984: LD_VAR 0 2
55988: PPUSH
55989: LD_VAR 0 5
55993: PPUSH
55994: CALL_OW 517
55998: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55999: LD_ADDR_VAR 0 5
56003: PUSH
56004: DOUBLE
56005: LD_INT 1
56007: DEC
56008: ST_TO_ADDR
56009: LD_VAR 0 6
56013: PUSH
56014: LD_INT 1
56016: ARRAY
56017: PUSH
56018: FOR_TO
56019: IFFALSE 56141
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56021: LD_ADDR_VAR 0 7
56025: PUSH
56026: LD_VAR 0 6
56030: PUSH
56031: LD_INT 1
56033: ARRAY
56034: PUSH
56035: LD_VAR 0 5
56039: ARRAY
56040: PUSH
56041: LD_VAR 0 6
56045: PUSH
56046: LD_INT 2
56048: ARRAY
56049: PUSH
56050: LD_VAR 0 5
56054: ARRAY
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56060: LD_VAR 0 7
56064: PUSH
56065: LD_INT 1
56067: ARRAY
56068: PPUSH
56069: LD_VAR 0 7
56073: PUSH
56074: LD_INT 2
56076: ARRAY
56077: PPUSH
56078: CALL_OW 428
56082: PUSH
56083: LD_INT 0
56085: EQUAL
56086: IFFALSE 56139
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56088: LD_VAR 0 1
56092: PPUSH
56093: LD_VAR 0 7
56097: PUSH
56098: LD_INT 1
56100: ARRAY
56101: PPUSH
56102: LD_VAR 0 7
56106: PUSH
56107: LD_INT 2
56109: ARRAY
56110: PPUSH
56111: LD_VAR 0 3
56115: PPUSH
56116: CALL_OW 48
// result := IsPlaced ( unit ) ;
56120: LD_ADDR_VAR 0 4
56124: PUSH
56125: LD_VAR 0 1
56129: PPUSH
56130: CALL_OW 305
56134: ST_TO_ADDR
// exit ;
56135: POP
56136: POP
56137: GO 56143
// end ; end ;
56139: GO 56018
56141: POP
56142: POP
// end ;
56143: LD_VAR 0 4
56147: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56148: LD_INT 0
56150: PPUSH
56151: PPUSH
56152: PPUSH
// if not side or side > 8 then
56153: LD_VAR 0 1
56157: NOT
56158: PUSH
56159: LD_VAR 0 1
56163: PUSH
56164: LD_INT 8
56166: GREATER
56167: OR
56168: IFFALSE 56172
// exit ;
56170: GO 56359
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56172: LD_ADDR_VAR 0 4
56176: PUSH
56177: LD_INT 22
56179: PUSH
56180: LD_VAR 0 1
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 21
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PPUSH
56203: CALL_OW 69
56207: ST_TO_ADDR
// if not tmp then
56208: LD_VAR 0 4
56212: NOT
56213: IFFALSE 56217
// exit ;
56215: GO 56359
// enable_addtolog := true ;
56217: LD_ADDR_OWVAR 81
56221: PUSH
56222: LD_INT 1
56224: ST_TO_ADDR
// AddToLog ( [ ) ;
56225: LD_STRING [
56227: PPUSH
56228: CALL_OW 561
// for i in tmp do
56232: LD_ADDR_VAR 0 3
56236: PUSH
56237: LD_VAR 0 4
56241: PUSH
56242: FOR_IN
56243: IFFALSE 56350
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56245: LD_STRING [
56247: PUSH
56248: LD_VAR 0 3
56252: PPUSH
56253: CALL_OW 266
56257: STR
56258: PUSH
56259: LD_STRING , 
56261: STR
56262: PUSH
56263: LD_VAR 0 3
56267: PPUSH
56268: CALL_OW 250
56272: STR
56273: PUSH
56274: LD_STRING , 
56276: STR
56277: PUSH
56278: LD_VAR 0 3
56282: PPUSH
56283: CALL_OW 251
56287: STR
56288: PUSH
56289: LD_STRING , 
56291: STR
56292: PUSH
56293: LD_VAR 0 3
56297: PPUSH
56298: CALL_OW 254
56302: STR
56303: PUSH
56304: LD_STRING , 
56306: STR
56307: PUSH
56308: LD_VAR 0 3
56312: PPUSH
56313: LD_INT 1
56315: PPUSH
56316: CALL_OW 268
56320: STR
56321: PUSH
56322: LD_STRING , 
56324: STR
56325: PUSH
56326: LD_VAR 0 3
56330: PPUSH
56331: LD_INT 2
56333: PPUSH
56334: CALL_OW 268
56338: STR
56339: PUSH
56340: LD_STRING ],
56342: STR
56343: PPUSH
56344: CALL_OW 561
// end ;
56348: GO 56242
56350: POP
56351: POP
// AddToLog ( ]; ) ;
56352: LD_STRING ];
56354: PPUSH
56355: CALL_OW 561
// end ;
56359: LD_VAR 0 2
56363: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56364: LD_INT 0
56366: PPUSH
56367: PPUSH
56368: PPUSH
56369: PPUSH
56370: PPUSH
// if not area or not rate or not max then
56371: LD_VAR 0 1
56375: NOT
56376: PUSH
56377: LD_VAR 0 2
56381: NOT
56382: OR
56383: PUSH
56384: LD_VAR 0 4
56388: NOT
56389: OR
56390: IFFALSE 56394
// exit ;
56392: GO 56586
// while 1 do
56394: LD_INT 1
56396: IFFALSE 56586
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56398: LD_ADDR_VAR 0 9
56402: PUSH
56403: LD_VAR 0 1
56407: PPUSH
56408: LD_INT 1
56410: PPUSH
56411: CALL_OW 287
56415: PUSH
56416: LD_INT 10
56418: MUL
56419: ST_TO_ADDR
// r := rate / 10 ;
56420: LD_ADDR_VAR 0 7
56424: PUSH
56425: LD_VAR 0 2
56429: PUSH
56430: LD_INT 10
56432: DIVREAL
56433: ST_TO_ADDR
// time := 1 1$00 ;
56434: LD_ADDR_VAR 0 8
56438: PUSH
56439: LD_INT 2100
56441: ST_TO_ADDR
// if amount < min then
56442: LD_VAR 0 9
56446: PUSH
56447: LD_VAR 0 3
56451: LESS
56452: IFFALSE 56470
// r := r * 2 else
56454: LD_ADDR_VAR 0 7
56458: PUSH
56459: LD_VAR 0 7
56463: PUSH
56464: LD_INT 2
56466: MUL
56467: ST_TO_ADDR
56468: GO 56496
// if amount > max then
56470: LD_VAR 0 9
56474: PUSH
56475: LD_VAR 0 4
56479: GREATER
56480: IFFALSE 56496
// r := r / 2 ;
56482: LD_ADDR_VAR 0 7
56486: PUSH
56487: LD_VAR 0 7
56491: PUSH
56492: LD_INT 2
56494: DIVREAL
56495: ST_TO_ADDR
// time := time / r ;
56496: LD_ADDR_VAR 0 8
56500: PUSH
56501: LD_VAR 0 8
56505: PUSH
56506: LD_VAR 0 7
56510: DIVREAL
56511: ST_TO_ADDR
// if time < 0 then
56512: LD_VAR 0 8
56516: PUSH
56517: LD_INT 0
56519: LESS
56520: IFFALSE 56537
// time := time * - 1 ;
56522: LD_ADDR_VAR 0 8
56526: PUSH
56527: LD_VAR 0 8
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: MUL
56536: ST_TO_ADDR
// wait ( time ) ;
56537: LD_VAR 0 8
56541: PPUSH
56542: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56546: LD_INT 35
56548: PPUSH
56549: LD_INT 875
56551: PPUSH
56552: CALL_OW 12
56556: PPUSH
56557: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56561: LD_INT 1
56563: PPUSH
56564: LD_INT 5
56566: PPUSH
56567: CALL_OW 12
56571: PPUSH
56572: LD_VAR 0 1
56576: PPUSH
56577: LD_INT 1
56579: PPUSH
56580: CALL_OW 55
// end ;
56584: GO 56394
// end ;
56586: LD_VAR 0 5
56590: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56591: LD_INT 0
56593: PPUSH
56594: PPUSH
56595: PPUSH
56596: PPUSH
56597: PPUSH
56598: PPUSH
56599: PPUSH
56600: PPUSH
// if not turrets or not factories then
56601: LD_VAR 0 1
56605: NOT
56606: PUSH
56607: LD_VAR 0 2
56611: NOT
56612: OR
56613: IFFALSE 56617
// exit ;
56615: GO 56924
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56617: LD_ADDR_VAR 0 10
56621: PUSH
56622: LD_INT 5
56624: PUSH
56625: LD_INT 6
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: LD_INT 4
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 3
56644: PUSH
56645: LD_INT 5
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 24
56659: PUSH
56660: LD_INT 25
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 23
56669: PUSH
56670: LD_INT 27
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 42
56683: PUSH
56684: LD_INT 43
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 44
56693: PUSH
56694: LD_INT 46
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 45
56703: PUSH
56704: LD_INT 47
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: LIST
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: LIST
56720: ST_TO_ADDR
// result := [ ] ;
56721: LD_ADDR_VAR 0 3
56725: PUSH
56726: EMPTY
56727: ST_TO_ADDR
// for i in turrets do
56728: LD_ADDR_VAR 0 4
56732: PUSH
56733: LD_VAR 0 1
56737: PUSH
56738: FOR_IN
56739: IFFALSE 56922
// begin nat := GetNation ( i ) ;
56741: LD_ADDR_VAR 0 7
56745: PUSH
56746: LD_VAR 0 4
56750: PPUSH
56751: CALL_OW 248
56755: ST_TO_ADDR
// weapon := 0 ;
56756: LD_ADDR_VAR 0 8
56760: PUSH
56761: LD_INT 0
56763: ST_TO_ADDR
// if not nat then
56764: LD_VAR 0 7
56768: NOT
56769: IFFALSE 56773
// continue ;
56771: GO 56738
// for j in list [ nat ] do
56773: LD_ADDR_VAR 0 5
56777: PUSH
56778: LD_VAR 0 10
56782: PUSH
56783: LD_VAR 0 7
56787: ARRAY
56788: PUSH
56789: FOR_IN
56790: IFFALSE 56831
// if GetBWeapon ( i ) = j [ 1 ] then
56792: LD_VAR 0 4
56796: PPUSH
56797: CALL_OW 269
56801: PUSH
56802: LD_VAR 0 5
56806: PUSH
56807: LD_INT 1
56809: ARRAY
56810: EQUAL
56811: IFFALSE 56829
// begin weapon := j [ 2 ] ;
56813: LD_ADDR_VAR 0 8
56817: PUSH
56818: LD_VAR 0 5
56822: PUSH
56823: LD_INT 2
56825: ARRAY
56826: ST_TO_ADDR
// break ;
56827: GO 56831
// end ;
56829: GO 56789
56831: POP
56832: POP
// if not weapon then
56833: LD_VAR 0 8
56837: NOT
56838: IFFALSE 56842
// continue ;
56840: GO 56738
// for k in factories do
56842: LD_ADDR_VAR 0 6
56846: PUSH
56847: LD_VAR 0 2
56851: PUSH
56852: FOR_IN
56853: IFFALSE 56918
// begin weapons := AvailableWeaponList ( k ) ;
56855: LD_ADDR_VAR 0 9
56859: PUSH
56860: LD_VAR 0 6
56864: PPUSH
56865: CALL_OW 478
56869: ST_TO_ADDR
// if not weapons then
56870: LD_VAR 0 9
56874: NOT
56875: IFFALSE 56879
// continue ;
56877: GO 56852
// if weapon in weapons then
56879: LD_VAR 0 8
56883: PUSH
56884: LD_VAR 0 9
56888: IN
56889: IFFALSE 56916
// begin result := [ i , weapon ] ;
56891: LD_ADDR_VAR 0 3
56895: PUSH
56896: LD_VAR 0 4
56900: PUSH
56901: LD_VAR 0 8
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: ST_TO_ADDR
// exit ;
56910: POP
56911: POP
56912: POP
56913: POP
56914: GO 56924
// end ; end ;
56916: GO 56852
56918: POP
56919: POP
// end ;
56920: GO 56738
56922: POP
56923: POP
// end ;
56924: LD_VAR 0 3
56928: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56929: LD_INT 0
56931: PPUSH
// if not side or side > 8 then
56932: LD_VAR 0 3
56936: NOT
56937: PUSH
56938: LD_VAR 0 3
56942: PUSH
56943: LD_INT 8
56945: GREATER
56946: OR
56947: IFFALSE 56951
// exit ;
56949: GO 57010
// if not range then
56951: LD_VAR 0 4
56955: NOT
56956: IFFALSE 56967
// range := - 12 ;
56958: LD_ADDR_VAR 0 4
56962: PUSH
56963: LD_INT 12
56965: NEG
56966: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56967: LD_VAR 0 1
56971: PPUSH
56972: LD_VAR 0 2
56976: PPUSH
56977: LD_VAR 0 3
56981: PPUSH
56982: LD_VAR 0 4
56986: PPUSH
56987: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56991: LD_VAR 0 1
56995: PPUSH
56996: LD_VAR 0 2
57000: PPUSH
57001: LD_VAR 0 3
57005: PPUSH
57006: CALL_OW 331
// end ;
57010: LD_VAR 0 5
57014: RET
// export function Video ( mode ) ; begin
57015: LD_INT 0
57017: PPUSH
// ingame_video = mode ;
57018: LD_ADDR_OWVAR 52
57022: PUSH
57023: LD_VAR 0 1
57027: ST_TO_ADDR
// interface_hidden = mode ;
57028: LD_ADDR_OWVAR 54
57032: PUSH
57033: LD_VAR 0 1
57037: ST_TO_ADDR
// end ;
57038: LD_VAR 0 2
57042: RET
// export function Join ( array , element ) ; begin
57043: LD_INT 0
57045: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57046: LD_ADDR_VAR 0 3
57050: PUSH
57051: LD_VAR 0 1
57055: PPUSH
57056: LD_VAR 0 1
57060: PUSH
57061: LD_INT 1
57063: PLUS
57064: PPUSH
57065: LD_VAR 0 2
57069: PPUSH
57070: CALL_OW 1
57074: ST_TO_ADDR
// end ;
57075: LD_VAR 0 3
57079: RET
// export function JoinUnion ( array , element ) ; begin
57080: LD_INT 0
57082: PPUSH
// result := array union element ;
57083: LD_ADDR_VAR 0 3
57087: PUSH
57088: LD_VAR 0 1
57092: PUSH
57093: LD_VAR 0 2
57097: UNION
57098: ST_TO_ADDR
// end ;
57099: LD_VAR 0 3
57103: RET
// export function GetBehemoths ( side ) ; begin
57104: LD_INT 0
57106: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57107: LD_ADDR_VAR 0 2
57111: PUSH
57112: LD_INT 22
57114: PUSH
57115: LD_VAR 0 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 31
57126: PUSH
57127: LD_INT 25
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PPUSH
57138: CALL_OW 69
57142: ST_TO_ADDR
// end ;
57143: LD_VAR 0 2
57147: RET
// export function Shuffle ( array ) ; var i , index ; begin
57148: LD_INT 0
57150: PPUSH
57151: PPUSH
57152: PPUSH
// result := [ ] ;
57153: LD_ADDR_VAR 0 2
57157: PUSH
57158: EMPTY
57159: ST_TO_ADDR
// if not array then
57160: LD_VAR 0 1
57164: NOT
57165: IFFALSE 57169
// exit ;
57167: GO 57268
// Randomize ;
57169: CALL_OW 10
// for i = array downto 1 do
57173: LD_ADDR_VAR 0 3
57177: PUSH
57178: DOUBLE
57179: LD_VAR 0 1
57183: INC
57184: ST_TO_ADDR
57185: LD_INT 1
57187: PUSH
57188: FOR_DOWNTO
57189: IFFALSE 57266
// begin index := rand ( 1 , array ) ;
57191: LD_ADDR_VAR 0 4
57195: PUSH
57196: LD_INT 1
57198: PPUSH
57199: LD_VAR 0 1
57203: PPUSH
57204: CALL_OW 12
57208: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57209: LD_ADDR_VAR 0 2
57213: PUSH
57214: LD_VAR 0 2
57218: PPUSH
57219: LD_VAR 0 2
57223: PUSH
57224: LD_INT 1
57226: PLUS
57227: PPUSH
57228: LD_VAR 0 1
57232: PUSH
57233: LD_VAR 0 4
57237: ARRAY
57238: PPUSH
57239: CALL_OW 2
57243: ST_TO_ADDR
// array := Delete ( array , index ) ;
57244: LD_ADDR_VAR 0 1
57248: PUSH
57249: LD_VAR 0 1
57253: PPUSH
57254: LD_VAR 0 4
57258: PPUSH
57259: CALL_OW 3
57263: ST_TO_ADDR
// end ;
57264: GO 57188
57266: POP
57267: POP
// end ;
57268: LD_VAR 0 2
57272: RET
// export function GetBaseMaterials ( base ) ; begin
57273: LD_INT 0
57275: PPUSH
// result := [ 0 , 0 , 0 ] ;
57276: LD_ADDR_VAR 0 2
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: LIST
57294: ST_TO_ADDR
// if not base then
57295: LD_VAR 0 1
57299: NOT
57300: IFFALSE 57304
// exit ;
57302: GO 57353
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57304: LD_ADDR_VAR 0 2
57308: PUSH
57309: LD_VAR 0 1
57313: PPUSH
57314: LD_INT 1
57316: PPUSH
57317: CALL_OW 275
57321: PUSH
57322: LD_VAR 0 1
57326: PPUSH
57327: LD_INT 2
57329: PPUSH
57330: CALL_OW 275
57334: PUSH
57335: LD_VAR 0 1
57339: PPUSH
57340: LD_INT 3
57342: PPUSH
57343: CALL_OW 275
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: LIST
57352: ST_TO_ADDR
// end ;
57353: LD_VAR 0 2
57357: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57358: LD_INT 0
57360: PPUSH
57361: PPUSH
// result := array ;
57362: LD_ADDR_VAR 0 3
57366: PUSH
57367: LD_VAR 0 1
57371: ST_TO_ADDR
// if size > 0 then
57372: LD_VAR 0 2
57376: PUSH
57377: LD_INT 0
57379: GREATER
57380: IFFALSE 57426
// for i := array downto size do
57382: LD_ADDR_VAR 0 4
57386: PUSH
57387: DOUBLE
57388: LD_VAR 0 1
57392: INC
57393: ST_TO_ADDR
57394: LD_VAR 0 2
57398: PUSH
57399: FOR_DOWNTO
57400: IFFALSE 57424
// result := Delete ( result , result ) ;
57402: LD_ADDR_VAR 0 3
57406: PUSH
57407: LD_VAR 0 3
57411: PPUSH
57412: LD_VAR 0 3
57416: PPUSH
57417: CALL_OW 3
57421: ST_TO_ADDR
57422: GO 57399
57424: POP
57425: POP
// end ;
57426: LD_VAR 0 3
57430: RET
// export function ComExit ( unit ) ; var tmp ; begin
57431: LD_INT 0
57433: PPUSH
57434: PPUSH
// if not IsInUnit ( unit ) then
57435: LD_VAR 0 1
57439: PPUSH
57440: CALL_OW 310
57444: NOT
57445: IFFALSE 57449
// exit ;
57447: GO 57509
// tmp := IsInUnit ( unit ) ;
57449: LD_ADDR_VAR 0 3
57453: PUSH
57454: LD_VAR 0 1
57458: PPUSH
57459: CALL_OW 310
57463: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57464: LD_VAR 0 3
57468: PPUSH
57469: CALL_OW 247
57473: PUSH
57474: LD_INT 2
57476: EQUAL
57477: IFFALSE 57490
// ComExitVehicle ( unit ) else
57479: LD_VAR 0 1
57483: PPUSH
57484: CALL_OW 121
57488: GO 57499
// ComExitBuilding ( unit ) ;
57490: LD_VAR 0 1
57494: PPUSH
57495: CALL_OW 122
// result := tmp ;
57499: LD_ADDR_VAR 0 2
57503: PUSH
57504: LD_VAR 0 3
57508: ST_TO_ADDR
// end ;
57509: LD_VAR 0 2
57513: RET
// export function ComExitAll ( units ) ; var i ; begin
57514: LD_INT 0
57516: PPUSH
57517: PPUSH
// if not units then
57518: LD_VAR 0 1
57522: NOT
57523: IFFALSE 57527
// exit ;
57525: GO 57553
// for i in units do
57527: LD_ADDR_VAR 0 3
57531: PUSH
57532: LD_VAR 0 1
57536: PUSH
57537: FOR_IN
57538: IFFALSE 57551
// ComExit ( i ) ;
57540: LD_VAR 0 3
57544: PPUSH
57545: CALL 57431 0 1
57549: GO 57537
57551: POP
57552: POP
// end ;
57553: LD_VAR 0 2
57557: RET
// export function ResetHc ; begin
57558: LD_INT 0
57560: PPUSH
// InitHc ;
57561: CALL_OW 19
// hc_importance := 0 ;
57565: LD_ADDR_OWVAR 32
57569: PUSH
57570: LD_INT 0
57572: ST_TO_ADDR
// end ;
57573: LD_VAR 0 1
57577: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57578: LD_INT 0
57580: PPUSH
57581: PPUSH
57582: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57583: LD_ADDR_VAR 0 6
57587: PUSH
57588: LD_VAR 0 1
57592: PUSH
57593: LD_VAR 0 3
57597: PLUS
57598: PUSH
57599: LD_INT 2
57601: DIV
57602: ST_TO_ADDR
// if _x < 0 then
57603: LD_VAR 0 6
57607: PUSH
57608: LD_INT 0
57610: LESS
57611: IFFALSE 57628
// _x := _x * - 1 ;
57613: LD_ADDR_VAR 0 6
57617: PUSH
57618: LD_VAR 0 6
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: MUL
57627: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57628: LD_ADDR_VAR 0 7
57632: PUSH
57633: LD_VAR 0 2
57637: PUSH
57638: LD_VAR 0 4
57642: PLUS
57643: PUSH
57644: LD_INT 2
57646: DIV
57647: ST_TO_ADDR
// if _y < 0 then
57648: LD_VAR 0 7
57652: PUSH
57653: LD_INT 0
57655: LESS
57656: IFFALSE 57673
// _y := _y * - 1 ;
57658: LD_ADDR_VAR 0 7
57662: PUSH
57663: LD_VAR 0 7
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: MUL
57672: ST_TO_ADDR
// result := [ _x , _y ] ;
57673: LD_ADDR_VAR 0 5
57677: PUSH
57678: LD_VAR 0 6
57682: PUSH
57683: LD_VAR 0 7
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: ST_TO_ADDR
// end ;
57692: LD_VAR 0 5
57696: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57697: LD_INT 0
57699: PPUSH
57700: PPUSH
57701: PPUSH
57702: PPUSH
// task := GetTaskList ( unit ) ;
57703: LD_ADDR_VAR 0 7
57707: PUSH
57708: LD_VAR 0 1
57712: PPUSH
57713: CALL_OW 437
57717: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57718: LD_VAR 0 7
57722: NOT
57723: PUSH
57724: LD_VAR 0 1
57728: PPUSH
57729: LD_VAR 0 2
57733: PPUSH
57734: CALL_OW 308
57738: NOT
57739: AND
57740: IFFALSE 57744
// exit ;
57742: GO 57862
// if IsInArea ( unit , area ) then
57744: LD_VAR 0 1
57748: PPUSH
57749: LD_VAR 0 2
57753: PPUSH
57754: CALL_OW 308
57758: IFFALSE 57776
// begin ComMoveToArea ( unit , goAway ) ;
57760: LD_VAR 0 1
57764: PPUSH
57765: LD_VAR 0 3
57769: PPUSH
57770: CALL_OW 113
// exit ;
57774: GO 57862
// end ; if task [ 1 ] [ 1 ] <> M then
57776: LD_VAR 0 7
57780: PUSH
57781: LD_INT 1
57783: ARRAY
57784: PUSH
57785: LD_INT 1
57787: ARRAY
57788: PUSH
57789: LD_STRING M
57791: NONEQUAL
57792: IFFALSE 57796
// exit ;
57794: GO 57862
// x := task [ 1 ] [ 2 ] ;
57796: LD_ADDR_VAR 0 5
57800: PUSH
57801: LD_VAR 0 7
57805: PUSH
57806: LD_INT 1
57808: ARRAY
57809: PUSH
57810: LD_INT 2
57812: ARRAY
57813: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57814: LD_ADDR_VAR 0 6
57818: PUSH
57819: LD_VAR 0 7
57823: PUSH
57824: LD_INT 1
57826: ARRAY
57827: PUSH
57828: LD_INT 3
57830: ARRAY
57831: ST_TO_ADDR
// if InArea ( x , y , area ) then
57832: LD_VAR 0 5
57836: PPUSH
57837: LD_VAR 0 6
57841: PPUSH
57842: LD_VAR 0 2
57846: PPUSH
57847: CALL_OW 309
57851: IFFALSE 57862
// ComStop ( unit ) ;
57853: LD_VAR 0 1
57857: PPUSH
57858: CALL_OW 141
// end ;
57862: LD_VAR 0 4
57866: RET
// export function Abs ( value ) ; begin
57867: LD_INT 0
57869: PPUSH
// result := value ;
57870: LD_ADDR_VAR 0 2
57874: PUSH
57875: LD_VAR 0 1
57879: ST_TO_ADDR
// if value < 0 then
57880: LD_VAR 0 1
57884: PUSH
57885: LD_INT 0
57887: LESS
57888: IFFALSE 57905
// result := value * - 1 ;
57890: LD_ADDR_VAR 0 2
57894: PUSH
57895: LD_VAR 0 1
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: MUL
57904: ST_TO_ADDR
// end ;
57905: LD_VAR 0 2
57909: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57910: LD_INT 0
57912: PPUSH
57913: PPUSH
57914: PPUSH
57915: PPUSH
57916: PPUSH
57917: PPUSH
57918: PPUSH
57919: PPUSH
// if not unit or not building then
57920: LD_VAR 0 1
57924: NOT
57925: PUSH
57926: LD_VAR 0 2
57930: NOT
57931: OR
57932: IFFALSE 57936
// exit ;
57934: GO 58162
// x := GetX ( building ) ;
57936: LD_ADDR_VAR 0 4
57940: PUSH
57941: LD_VAR 0 2
57945: PPUSH
57946: CALL_OW 250
57950: ST_TO_ADDR
// y := GetY ( building ) ;
57951: LD_ADDR_VAR 0 6
57955: PUSH
57956: LD_VAR 0 2
57960: PPUSH
57961: CALL_OW 251
57965: ST_TO_ADDR
// d := GetDir ( building ) ;
57966: LD_ADDR_VAR 0 8
57970: PUSH
57971: LD_VAR 0 2
57975: PPUSH
57976: CALL_OW 254
57980: ST_TO_ADDR
// r := 4 ;
57981: LD_ADDR_VAR 0 9
57985: PUSH
57986: LD_INT 4
57988: ST_TO_ADDR
// for i := 1 to 5 do
57989: LD_ADDR_VAR 0 10
57993: PUSH
57994: DOUBLE
57995: LD_INT 1
57997: DEC
57998: ST_TO_ADDR
57999: LD_INT 5
58001: PUSH
58002: FOR_TO
58003: IFFALSE 58160
// begin _x := ShiftX ( x , d , r + i ) ;
58005: LD_ADDR_VAR 0 5
58009: PUSH
58010: LD_VAR 0 4
58014: PPUSH
58015: LD_VAR 0 8
58019: PPUSH
58020: LD_VAR 0 9
58024: PUSH
58025: LD_VAR 0 10
58029: PLUS
58030: PPUSH
58031: CALL_OW 272
58035: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58036: LD_ADDR_VAR 0 7
58040: PUSH
58041: LD_VAR 0 6
58045: PPUSH
58046: LD_VAR 0 8
58050: PPUSH
58051: LD_VAR 0 9
58055: PUSH
58056: LD_VAR 0 10
58060: PLUS
58061: PPUSH
58062: CALL_OW 273
58066: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58067: LD_VAR 0 5
58071: PPUSH
58072: LD_VAR 0 7
58076: PPUSH
58077: CALL_OW 488
58081: PUSH
58082: LD_VAR 0 5
58086: PPUSH
58087: LD_VAR 0 7
58091: PPUSH
58092: CALL_OW 428
58096: PPUSH
58097: CALL_OW 247
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: LD_INT 2
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: IN
58112: NOT
58113: AND
58114: IFFALSE 58158
// begin ComMoveXY ( unit , _x , _y ) ;
58116: LD_VAR 0 1
58120: PPUSH
58121: LD_VAR 0 5
58125: PPUSH
58126: LD_VAR 0 7
58130: PPUSH
58131: CALL_OW 111
// result := [ _x , _y ] ;
58135: LD_ADDR_VAR 0 3
58139: PUSH
58140: LD_VAR 0 5
58144: PUSH
58145: LD_VAR 0 7
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: ST_TO_ADDR
// exit ;
58154: POP
58155: POP
58156: GO 58162
// end ; end ;
58158: GO 58002
58160: POP
58161: POP
// end ;
58162: LD_VAR 0 3
58166: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58167: LD_INT 0
58169: PPUSH
58170: PPUSH
58171: PPUSH
// result := 0 ;
58172: LD_ADDR_VAR 0 3
58176: PUSH
58177: LD_INT 0
58179: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58180: LD_VAR 0 1
58184: PUSH
58185: LD_INT 0
58187: LESS
58188: PUSH
58189: LD_VAR 0 1
58193: PUSH
58194: LD_INT 8
58196: GREATER
58197: OR
58198: PUSH
58199: LD_VAR 0 2
58203: PUSH
58204: LD_INT 0
58206: LESS
58207: OR
58208: PUSH
58209: LD_VAR 0 2
58213: PUSH
58214: LD_INT 8
58216: GREATER
58217: OR
58218: IFFALSE 58222
// exit ;
58220: GO 58297
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58222: LD_ADDR_VAR 0 4
58226: PUSH
58227: LD_INT 22
58229: PUSH
58230: LD_VAR 0 2
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PPUSH
58239: CALL_OW 69
58243: PUSH
58244: FOR_IN
58245: IFFALSE 58295
// begin un := UnitShoot ( i ) ;
58247: LD_ADDR_VAR 0 5
58251: PUSH
58252: LD_VAR 0 4
58256: PPUSH
58257: CALL_OW 504
58261: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58262: LD_VAR 0 5
58266: PPUSH
58267: CALL_OW 255
58271: PUSH
58272: LD_VAR 0 1
58276: EQUAL
58277: IFFALSE 58293
// begin result := un ;
58279: LD_ADDR_VAR 0 3
58283: PUSH
58284: LD_VAR 0 5
58288: ST_TO_ADDR
// exit ;
58289: POP
58290: POP
58291: GO 58297
// end ; end ;
58293: GO 58244
58295: POP
58296: POP
// end ;
58297: LD_VAR 0 3
58301: RET
// export function GetCargoBay ( units ) ; begin
58302: LD_INT 0
58304: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58305: LD_ADDR_VAR 0 2
58309: PUSH
58310: LD_VAR 0 1
58314: PPUSH
58315: LD_INT 2
58317: PUSH
58318: LD_INT 34
58320: PUSH
58321: LD_INT 12
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 34
58330: PUSH
58331: LD_INT 51
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 34
58340: PUSH
58341: LD_INT 32
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 34
58350: PUSH
58351: LD_EXP 80
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: PPUSH
58367: CALL_OW 72
58371: ST_TO_ADDR
// end ; end_of_file
58372: LD_VAR 0 2
58376: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
58377: LD_VAR 0 1
58381: PUSH
58382: LD_INT 200
58384: DOUBLE
58385: GREATEREQUAL
58386: IFFALSE 58394
58388: LD_INT 299
58390: DOUBLE
58391: LESSEQUAL
58392: IFTRUE 58396
58394: GO 58428
58396: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
58397: LD_VAR 0 1
58401: PPUSH
58402: LD_VAR 0 2
58406: PPUSH
58407: LD_VAR 0 3
58411: PPUSH
58412: LD_VAR 0 4
58416: PPUSH
58417: LD_VAR 0 5
58421: PPUSH
58422: CALL 3506 0 5
58426: GO 58505
58428: LD_INT 300
58430: DOUBLE
58431: GREATEREQUAL
58432: IFFALSE 58440
58434: LD_INT 399
58436: DOUBLE
58437: LESSEQUAL
58438: IFTRUE 58442
58440: GO 58504
58442: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
58443: LD_VAR 0 1
58447: PPUSH
58448: LD_VAR 0 2
58452: PPUSH
58453: LD_VAR 0 3
58457: PPUSH
58458: LD_VAR 0 4
58462: PPUSH
58463: LD_VAR 0 5
58467: PPUSH
58468: LD_VAR 0 6
58472: PPUSH
58473: LD_VAR 0 7
58477: PPUSH
58478: LD_VAR 0 8
58482: PPUSH
58483: LD_VAR 0 9
58487: PPUSH
58488: LD_VAR 0 10
58492: PPUSH
58493: LD_VAR 0 11
58497: PPUSH
58498: CALL 18581 0 11
58502: GO 58505
58504: POP
// end ;
58505: PPOPN 11
58507: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
58508: LD_VAR 0 1
58512: PPUSH
58513: LD_VAR 0 2
58517: PPUSH
58518: LD_VAR 0 3
58522: PPUSH
58523: LD_VAR 0 4
58527: PPUSH
58528: LD_VAR 0 5
58532: PPUSH
58533: CALL 3488 0 5
// end ; end_of_file
58537: PPOPN 5
58539: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
58540: LD_VAR 0 1
58544: PPUSH
58545: LD_VAR 0 2
58549: PPUSH
58550: LD_VAR 0 3
58554: PPUSH
58555: LD_VAR 0 4
58559: PPUSH
58560: LD_VAR 0 5
58564: PPUSH
58565: LD_VAR 0 6
58569: PPUSH
58570: CALL 7389 0 6
// end ;
58574: PPOPN 6
58576: END
