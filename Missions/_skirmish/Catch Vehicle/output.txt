// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_EXP 81
3394: EQUAL
3395: IFFALSE 3467
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3397: LD_INT 68
3399: PPUSH
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 255
3409: PPUSH
3410: CALL_OW 321
3414: PUSH
3415: LD_INT 2
3417: EQUAL
3418: IFFALSE 3430
// eff := 70 else
3420: LD_ADDR_VAR 0 4
3424: PUSH
3425: LD_INT 70
3427: ST_TO_ADDR
3428: GO 3438
// eff := 30 ;
3430: LD_ADDR_VAR 0 4
3434: PUSH
3435: LD_INT 30
3437: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_VAR 0 1
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: LD_VAR 0 4
3462: PPUSH
3463: CALL_OW 495
// end ; end ;
3467: LD_VAR 0 2
3471: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3472: LD_INT 0
3474: PPUSH
// end ;
3475: LD_VAR 0 4
3479: RET
// export function SOS_Command ( cmd ) ; begin
3480: LD_INT 0
3482: PPUSH
// end ;
3483: LD_VAR 0 2
3487: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
3488: LD_INT 0
3490: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
3491: LD_VAR 0 1
3495: PUSH
3496: LD_INT 250
3498: EQUAL
3499: PUSH
3500: LD_VAR 0 2
3504: PPUSH
3505: CALL_OW 264
3509: PUSH
3510: LD_EXP 84
3514: EQUAL
3515: AND
3516: IFFALSE 3537
// MinerPlaceMine ( unit , x , y ) ;
3518: LD_VAR 0 2
3522: PPUSH
3523: LD_VAR 0 4
3527: PPUSH
3528: LD_VAR 0 5
3532: PPUSH
3533: CALL 5878 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
3537: LD_VAR 0 1
3541: PUSH
3542: LD_INT 251
3544: EQUAL
3545: PUSH
3546: LD_VAR 0 2
3550: PPUSH
3551: CALL_OW 264
3555: PUSH
3556: LD_EXP 84
3560: EQUAL
3561: AND
3562: IFFALSE 3583
// MinerDetonateMine ( unit , x , y ) ;
3564: LD_VAR 0 2
3568: PPUSH
3569: LD_VAR 0 4
3573: PPUSH
3574: LD_VAR 0 5
3578: PPUSH
3579: CALL 6155 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
3583: LD_VAR 0 1
3587: PUSH
3588: LD_INT 252
3590: EQUAL
3591: PUSH
3592: LD_VAR 0 2
3596: PPUSH
3597: CALL_OW 264
3601: PUSH
3602: LD_EXP 84
3606: EQUAL
3607: AND
3608: IFFALSE 3629
// MinerCreateMinefield ( unit , x , y ) ;
3610: LD_VAR 0 2
3614: PPUSH
3615: LD_VAR 0 4
3619: PPUSH
3620: LD_VAR 0 5
3624: PPUSH
3625: CALL 6572 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
3629: LD_VAR 0 1
3633: PUSH
3634: LD_INT 253
3636: EQUAL
3637: PUSH
3638: LD_VAR 0 2
3642: PPUSH
3643: CALL_OW 257
3647: PUSH
3648: LD_INT 5
3650: EQUAL
3651: AND
3652: IFFALSE 3673
// ComBinocular ( unit , x , y ) ;
3654: LD_VAR 0 2
3658: PPUSH
3659: LD_VAR 0 4
3663: PPUSH
3664: LD_VAR 0 5
3668: PPUSH
3669: CALL 6943 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3673: LD_VAR 0 1
3677: PUSH
3678: LD_INT 254
3680: EQUAL
3681: PUSH
3682: LD_VAR 0 2
3686: PPUSH
3687: CALL_OW 264
3691: PUSH
3692: LD_EXP 79
3696: EQUAL
3697: AND
3698: PUSH
3699: LD_VAR 0 3
3703: PPUSH
3704: CALL_OW 263
3708: PUSH
3709: LD_INT 3
3711: EQUAL
3712: AND
3713: IFFALSE 3729
// HackDestroyVehicle ( unit , selectedUnit ) ;
3715: LD_VAR 0 2
3719: PPUSH
3720: LD_VAR 0 3
3724: PPUSH
3725: CALL 5238 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3729: LD_VAR 0 1
3733: PUSH
3734: LD_INT 255
3736: EQUAL
3737: PUSH
3738: LD_VAR 0 2
3742: PPUSH
3743: CALL_OW 264
3747: PUSH
3748: LD_INT 14
3750: PUSH
3751: LD_INT 53
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: IN
3758: AND
3759: PUSH
3760: LD_VAR 0 4
3764: PPUSH
3765: LD_VAR 0 5
3769: PPUSH
3770: CALL_OW 488
3774: AND
3775: IFFALSE 3799
// CutTreeXYR ( unit , x , y , 12 ) ;
3777: LD_VAR 0 2
3781: PPUSH
3782: LD_VAR 0 4
3786: PPUSH
3787: LD_VAR 0 5
3791: PPUSH
3792: LD_INT 12
3794: PPUSH
3795: CALL 3804 0 4
// end ;
3799: LD_VAR 0 6
3803: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
3804: LD_INT 0
3806: PPUSH
3807: PPUSH
3808: PPUSH
3809: PPUSH
3810: PPUSH
3811: PPUSH
3812: PPUSH
3813: PPUSH
3814: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
3815: LD_VAR 0 1
3819: NOT
3820: PUSH
3821: LD_VAR 0 2
3825: PPUSH
3826: LD_VAR 0 3
3830: PPUSH
3831: CALL_OW 488
3835: NOT
3836: OR
3837: PUSH
3838: LD_VAR 0 4
3842: NOT
3843: OR
3844: IFFALSE 3848
// exit ;
3846: GO 4188
// list := [ ] ;
3848: LD_ADDR_VAR 0 13
3852: PUSH
3853: EMPTY
3854: ST_TO_ADDR
// if x - r < 0 then
3855: LD_VAR 0 2
3859: PUSH
3860: LD_VAR 0 4
3864: MINUS
3865: PUSH
3866: LD_INT 0
3868: LESS
3869: IFFALSE 3881
// min_x := 0 else
3871: LD_ADDR_VAR 0 7
3875: PUSH
3876: LD_INT 0
3878: ST_TO_ADDR
3879: GO 3897
// min_x := x - r ;
3881: LD_ADDR_VAR 0 7
3885: PUSH
3886: LD_VAR 0 2
3890: PUSH
3891: LD_VAR 0 4
3895: MINUS
3896: ST_TO_ADDR
// if y - r < 0 then
3897: LD_VAR 0 3
3901: PUSH
3902: LD_VAR 0 4
3906: MINUS
3907: PUSH
3908: LD_INT 0
3910: LESS
3911: IFFALSE 3923
// min_y := 0 else
3913: LD_ADDR_VAR 0 8
3917: PUSH
3918: LD_INT 0
3920: ST_TO_ADDR
3921: GO 3939
// min_y := y - r ;
3923: LD_ADDR_VAR 0 8
3927: PUSH
3928: LD_VAR 0 3
3932: PUSH
3933: LD_VAR 0 4
3937: MINUS
3938: ST_TO_ADDR
// max_x := x + r ;
3939: LD_ADDR_VAR 0 9
3943: PUSH
3944: LD_VAR 0 2
3948: PUSH
3949: LD_VAR 0 4
3953: PLUS
3954: ST_TO_ADDR
// max_y := y + r ;
3955: LD_ADDR_VAR 0 10
3959: PUSH
3960: LD_VAR 0 3
3964: PUSH
3965: LD_VAR 0 4
3969: PLUS
3970: ST_TO_ADDR
// for _x = min_x to max_x do
3971: LD_ADDR_VAR 0 11
3975: PUSH
3976: DOUBLE
3977: LD_VAR 0 7
3981: DEC
3982: ST_TO_ADDR
3983: LD_VAR 0 9
3987: PUSH
3988: FOR_TO
3989: IFFALSE 4106
// for _y = min_y to max_y do
3991: LD_ADDR_VAR 0 12
3995: PUSH
3996: DOUBLE
3997: LD_VAR 0 8
4001: DEC
4002: ST_TO_ADDR
4003: LD_VAR 0 10
4007: PUSH
4008: FOR_TO
4009: IFFALSE 4102
// begin if not ValidHex ( _x , _y ) then
4011: LD_VAR 0 11
4015: PPUSH
4016: LD_VAR 0 12
4020: PPUSH
4021: CALL_OW 488
4025: NOT
4026: IFFALSE 4030
// continue ;
4028: GO 4008
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4030: LD_VAR 0 11
4034: PPUSH
4035: LD_VAR 0 12
4039: PPUSH
4040: CALL_OW 351
4044: PUSH
4045: LD_VAR 0 11
4049: PPUSH
4050: LD_VAR 0 12
4054: PPUSH
4055: CALL_OW 554
4059: AND
4060: IFFALSE 4100
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4062: LD_ADDR_VAR 0 13
4066: PUSH
4067: LD_VAR 0 13
4071: PPUSH
4072: LD_VAR 0 13
4076: PUSH
4077: LD_INT 1
4079: PLUS
4080: PPUSH
4081: LD_VAR 0 11
4085: PUSH
4086: LD_VAR 0 12
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PPUSH
4095: CALL_OW 2
4099: ST_TO_ADDR
// end ;
4100: GO 4008
4102: POP
4103: POP
4104: GO 3988
4106: POP
4107: POP
// if not list then
4108: LD_VAR 0 13
4112: NOT
4113: IFFALSE 4117
// exit ;
4115: GO 4188
// for i in list do
4117: LD_ADDR_VAR 0 6
4121: PUSH
4122: LD_VAR 0 13
4126: PUSH
4127: FOR_IN
4128: IFFALSE 4186
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4130: LD_VAR 0 1
4134: PPUSH
4135: LD_STRING M
4137: PUSH
4138: LD_VAR 0 6
4142: PUSH
4143: LD_INT 1
4145: ARRAY
4146: PUSH
4147: LD_VAR 0 6
4151: PUSH
4152: LD_INT 2
4154: ARRAY
4155: PUSH
4156: LD_INT 0
4158: PUSH
4159: LD_INT 0
4161: PUSH
4162: LD_INT 0
4164: PUSH
4165: LD_INT 0
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: PUSH
4177: EMPTY
4178: LIST
4179: PPUSH
4180: CALL_OW 447
4184: GO 4127
4186: POP
4187: POP
// end ;
4188: LD_VAR 0 5
4192: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
4193: LD_EXP 12
4197: NOT
4198: IFFALSE 4248
4200: GO 4202
4202: DISABLE
// begin initHack := true ;
4203: LD_ADDR_EXP 12
4207: PUSH
4208: LD_INT 1
4210: ST_TO_ADDR
// hackTanks := [ ] ;
4211: LD_ADDR_EXP 13
4215: PUSH
4216: EMPTY
4217: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4218: LD_ADDR_EXP 14
4222: PUSH
4223: EMPTY
4224: ST_TO_ADDR
// hackLimit := 3 ;
4225: LD_ADDR_EXP 15
4229: PUSH
4230: LD_INT 3
4232: ST_TO_ADDR
// hackDist := 12 ;
4233: LD_ADDR_EXP 16
4237: PUSH
4238: LD_INT 12
4240: ST_TO_ADDR
// hackCounter := [ ] ;
4241: LD_ADDR_EXP 17
4245: PUSH
4246: EMPTY
4247: ST_TO_ADDR
// end ;
4248: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
4249: LD_EXP 12
4253: PUSH
4254: LD_INT 34
4256: PUSH
4257: LD_EXP 79
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: PPUSH
4266: CALL_OW 69
4270: AND
4271: IFFALSE 4526
4273: GO 4275
4275: DISABLE
4276: LD_INT 0
4278: PPUSH
4279: PPUSH
// begin enable ;
4280: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
4281: LD_ADDR_VAR 0 1
4285: PUSH
4286: LD_INT 34
4288: PUSH
4289: LD_EXP 79
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PPUSH
4298: CALL_OW 69
4302: PUSH
4303: FOR_IN
4304: IFFALSE 4524
// begin if not i in hackTanks then
4306: LD_VAR 0 1
4310: PUSH
4311: LD_EXP 13
4315: IN
4316: NOT
4317: IFFALSE 4400
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
4319: LD_ADDR_EXP 13
4323: PUSH
4324: LD_EXP 13
4328: PPUSH
4329: LD_EXP 13
4333: PUSH
4334: LD_INT 1
4336: PLUS
4337: PPUSH
4338: LD_VAR 0 1
4342: PPUSH
4343: CALL_OW 1
4347: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
4348: LD_ADDR_EXP 14
4352: PUSH
4353: LD_EXP 14
4357: PPUSH
4358: LD_EXP 14
4362: PUSH
4363: LD_INT 1
4365: PLUS
4366: PPUSH
4367: EMPTY
4368: PPUSH
4369: CALL_OW 1
4373: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
4374: LD_ADDR_EXP 17
4378: PUSH
4379: LD_EXP 17
4383: PPUSH
4384: LD_EXP 17
4388: PUSH
4389: LD_INT 1
4391: PLUS
4392: PPUSH
4393: EMPTY
4394: PPUSH
4395: CALL_OW 1
4399: ST_TO_ADDR
// end ; if not IsOk ( i ) then
4400: LD_VAR 0 1
4404: PPUSH
4405: CALL_OW 302
4409: NOT
4410: IFFALSE 4423
// begin HackUnlinkAll ( i ) ;
4412: LD_VAR 0 1
4416: PPUSH
4417: CALL 4529 0 1
// continue ;
4421: GO 4303
// end ; HackCheckCapturedStatus ( i ) ;
4423: LD_VAR 0 1
4427: PPUSH
4428: CALL 4972 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
4432: LD_ADDR_VAR 0 2
4436: PUSH
4437: LD_INT 81
4439: PUSH
4440: LD_VAR 0 1
4444: PPUSH
4445: CALL_OW 255
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PUSH
4454: LD_INT 33
4456: PUSH
4457: LD_INT 3
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: PUSH
4464: LD_INT 91
4466: PUSH
4467: LD_VAR 0 1
4471: PUSH
4472: LD_EXP 16
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 50
4484: PUSH
4485: EMPTY
4486: LIST
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 69
4498: ST_TO_ADDR
// if not tmp then
4499: LD_VAR 0 2
4503: NOT
4504: IFFALSE 4508
// continue ;
4506: GO 4303
// HackLink ( i , tmp ) ;
4508: LD_VAR 0 1
4512: PPUSH
4513: LD_VAR 0 2
4517: PPUSH
4518: CALL 4665 0 2
// end ;
4522: GO 4303
4524: POP
4525: POP
// end ;
4526: PPOPN 2
4528: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
4529: LD_INT 0
4531: PPUSH
4532: PPUSH
4533: PPUSH
// if not hack in hackTanks then
4534: LD_VAR 0 1
4538: PUSH
4539: LD_EXP 13
4543: IN
4544: NOT
4545: IFFALSE 4549
// exit ;
4547: GO 4660
// index := GetElementIndex ( hackTanks , hack ) ;
4549: LD_ADDR_VAR 0 4
4553: PUSH
4554: LD_EXP 13
4558: PPUSH
4559: LD_VAR 0 1
4563: PPUSH
4564: CALL 25405 0 2
4568: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
4569: LD_EXP 14
4573: PUSH
4574: LD_VAR 0 4
4578: ARRAY
4579: IFFALSE 4660
// begin for i in hackTanksCaptured [ index ] do
4581: LD_ADDR_VAR 0 3
4585: PUSH
4586: LD_EXP 14
4590: PUSH
4591: LD_VAR 0 4
4595: ARRAY
4596: PUSH
4597: FOR_IN
4598: IFFALSE 4624
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
4600: LD_VAR 0 3
4604: PUSH
4605: LD_INT 1
4607: ARRAY
4608: PPUSH
4609: LD_VAR 0 3
4613: PUSH
4614: LD_INT 2
4616: ARRAY
4617: PPUSH
4618: CALL_OW 235
4622: GO 4597
4624: POP
4625: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
4626: LD_ADDR_EXP 14
4630: PUSH
4631: LD_EXP 14
4635: PPUSH
4636: LD_VAR 0 4
4640: PPUSH
4641: EMPTY
4642: PPUSH
4643: CALL_OW 1
4647: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
4648: LD_VAR 0 1
4652: PPUSH
4653: LD_INT 0
4655: PPUSH
4656: CALL_OW 505
// end ; end ;
4660: LD_VAR 0 2
4664: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
4665: LD_INT 0
4667: PPUSH
4668: PPUSH
4669: PPUSH
// if not hack in hackTanks or not vehicles then
4670: LD_VAR 0 1
4674: PUSH
4675: LD_EXP 13
4679: IN
4680: NOT
4681: PUSH
4682: LD_VAR 0 2
4686: NOT
4687: OR
4688: IFFALSE 4692
// exit ;
4690: GO 4967
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
4692: LD_ADDR_VAR 0 2
4696: PUSH
4697: LD_VAR 0 1
4701: PPUSH
4702: LD_VAR 0 2
4706: PPUSH
4707: LD_INT 1
4709: PPUSH
4710: LD_INT 1
4712: PPUSH
4713: CALL 26055 0 4
4717: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
4718: LD_ADDR_VAR 0 5
4722: PUSH
4723: LD_EXP 13
4727: PPUSH
4728: LD_VAR 0 1
4732: PPUSH
4733: CALL 25405 0 2
4737: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
4738: LD_EXP 14
4742: PUSH
4743: LD_VAR 0 5
4747: ARRAY
4748: PUSH
4749: LD_EXP 15
4753: LESS
4754: IFFALSE 4943
// begin for i := 1 to vehicles do
4756: LD_ADDR_VAR 0 4
4760: PUSH
4761: DOUBLE
4762: LD_INT 1
4764: DEC
4765: ST_TO_ADDR
4766: LD_VAR 0 2
4770: PUSH
4771: FOR_TO
4772: IFFALSE 4941
// begin if hackTanksCaptured [ index ] = hackLimit then
4774: LD_EXP 14
4778: PUSH
4779: LD_VAR 0 5
4783: ARRAY
4784: PUSH
4785: LD_EXP 15
4789: EQUAL
4790: IFFALSE 4794
// break ;
4792: GO 4941
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
4794: LD_ADDR_EXP 17
4798: PUSH
4799: LD_EXP 17
4803: PPUSH
4804: LD_VAR 0 5
4808: PPUSH
4809: LD_EXP 17
4813: PUSH
4814: LD_VAR 0 5
4818: ARRAY
4819: PUSH
4820: LD_INT 1
4822: PLUS
4823: PPUSH
4824: CALL_OW 1
4828: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
4829: LD_ADDR_EXP 14
4833: PUSH
4834: LD_EXP 14
4838: PPUSH
4839: LD_VAR 0 5
4843: PUSH
4844: LD_EXP 14
4848: PUSH
4849: LD_VAR 0 5
4853: ARRAY
4854: PUSH
4855: LD_INT 1
4857: PLUS
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PPUSH
4863: LD_VAR 0 2
4867: PUSH
4868: LD_VAR 0 4
4872: ARRAY
4873: PUSH
4874: LD_VAR 0 2
4878: PUSH
4879: LD_VAR 0 4
4883: ARRAY
4884: PPUSH
4885: CALL_OW 255
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PPUSH
4894: CALL 25620 0 3
4898: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
4899: LD_VAR 0 2
4903: PUSH
4904: LD_VAR 0 4
4908: ARRAY
4909: PPUSH
4910: LD_VAR 0 1
4914: PPUSH
4915: CALL_OW 255
4919: PPUSH
4920: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
4924: LD_VAR 0 2
4928: PUSH
4929: LD_VAR 0 4
4933: ARRAY
4934: PPUSH
4935: CALL_OW 141
// end ;
4939: GO 4771
4941: POP
4942: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
4943: LD_VAR 0 1
4947: PPUSH
4948: LD_EXP 14
4952: PUSH
4953: LD_VAR 0 5
4957: ARRAY
4958: PUSH
4959: LD_INT 0
4961: PLUS
4962: PPUSH
4963: CALL_OW 505
// end ;
4967: LD_VAR 0 3
4971: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
4972: LD_INT 0
4974: PPUSH
4975: PPUSH
4976: PPUSH
4977: PPUSH
// if not hack in hackTanks then
4978: LD_VAR 0 1
4982: PUSH
4983: LD_EXP 13
4987: IN
4988: NOT
4989: IFFALSE 4993
// exit ;
4991: GO 5233
// index := GetElementIndex ( hackTanks , hack ) ;
4993: LD_ADDR_VAR 0 4
4997: PUSH
4998: LD_EXP 13
5002: PPUSH
5003: LD_VAR 0 1
5007: PPUSH
5008: CALL 25405 0 2
5012: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
5013: LD_ADDR_VAR 0 3
5017: PUSH
5018: DOUBLE
5019: LD_EXP 14
5023: PUSH
5024: LD_VAR 0 4
5028: ARRAY
5029: INC
5030: ST_TO_ADDR
5031: LD_INT 1
5033: PUSH
5034: FOR_DOWNTO
5035: IFFALSE 5207
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
5037: LD_ADDR_VAR 0 5
5041: PUSH
5042: LD_EXP 14
5046: PUSH
5047: LD_VAR 0 4
5051: ARRAY
5052: PUSH
5053: LD_VAR 0 3
5057: ARRAY
5058: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
5059: LD_VAR 0 5
5063: PUSH
5064: LD_INT 1
5066: ARRAY
5067: PPUSH
5068: CALL_OW 302
5072: NOT
5073: PUSH
5074: LD_VAR 0 5
5078: PUSH
5079: LD_INT 1
5081: ARRAY
5082: PPUSH
5083: CALL_OW 255
5087: PUSH
5088: LD_VAR 0 1
5092: PPUSH
5093: CALL_OW 255
5097: NONEQUAL
5098: OR
5099: IFFALSE 5205
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
5101: LD_VAR 0 5
5105: PUSH
5106: LD_INT 1
5108: ARRAY
5109: PPUSH
5110: CALL_OW 305
5114: PUSH
5115: LD_VAR 0 5
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: CALL_OW 255
5128: PUSH
5129: LD_VAR 0 1
5133: PPUSH
5134: CALL_OW 255
5138: EQUAL
5139: AND
5140: IFFALSE 5164
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
5142: LD_VAR 0 5
5146: PUSH
5147: LD_INT 1
5149: ARRAY
5150: PPUSH
5151: LD_VAR 0 5
5155: PUSH
5156: LD_INT 2
5158: ARRAY
5159: PPUSH
5160: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
5164: LD_ADDR_EXP 14
5168: PUSH
5169: LD_EXP 14
5173: PPUSH
5174: LD_VAR 0 4
5178: PPUSH
5179: LD_EXP 14
5183: PUSH
5184: LD_VAR 0 4
5188: ARRAY
5189: PPUSH
5190: LD_VAR 0 3
5194: PPUSH
5195: CALL_OW 3
5199: PPUSH
5200: CALL_OW 1
5204: ST_TO_ADDR
// end ; end ;
5205: GO 5034
5207: POP
5208: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5209: LD_VAR 0 1
5213: PPUSH
5214: LD_EXP 14
5218: PUSH
5219: LD_VAR 0 4
5223: ARRAY
5224: PUSH
5225: LD_INT 0
5227: PLUS
5228: PPUSH
5229: CALL_OW 505
// end ;
5233: LD_VAR 0 2
5237: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
5238: LD_INT 0
5240: PPUSH
5241: PPUSH
5242: PPUSH
5243: PPUSH
// if not hack in hackTanks then
5244: LD_VAR 0 1
5248: PUSH
5249: LD_EXP 13
5253: IN
5254: NOT
5255: IFFALSE 5259
// exit ;
5257: GO 5344
// index := GetElementIndex ( hackTanks , hack ) ;
5259: LD_ADDR_VAR 0 5
5263: PUSH
5264: LD_EXP 13
5268: PPUSH
5269: LD_VAR 0 1
5273: PPUSH
5274: CALL 25405 0 2
5278: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
5279: LD_ADDR_VAR 0 4
5283: PUSH
5284: DOUBLE
5285: LD_INT 1
5287: DEC
5288: ST_TO_ADDR
5289: LD_EXP 14
5293: PUSH
5294: LD_VAR 0 5
5298: ARRAY
5299: PUSH
5300: FOR_TO
5301: IFFALSE 5342
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
5303: LD_EXP 14
5307: PUSH
5308: LD_VAR 0 5
5312: ARRAY
5313: PUSH
5314: LD_VAR 0 4
5318: ARRAY
5319: PUSH
5320: LD_INT 1
5322: ARRAY
5323: PUSH
5324: LD_VAR 0 2
5328: EQUAL
5329: IFFALSE 5340
// KillUnit ( vehicle ) ;
5331: LD_VAR 0 2
5335: PPUSH
5336: CALL_OW 66
5340: GO 5300
5342: POP
5343: POP
// end ;
5344: LD_VAR 0 3
5348: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
5349: LD_EXP 18
5353: NOT
5354: IFFALSE 5389
5356: GO 5358
5358: DISABLE
// begin initMiner := true ;
5359: LD_ADDR_EXP 18
5363: PUSH
5364: LD_INT 1
5366: ST_TO_ADDR
// minersList := [ ] ;
5367: LD_ADDR_EXP 19
5371: PUSH
5372: EMPTY
5373: ST_TO_ADDR
// minerMinesList := [ ] ;
5374: LD_ADDR_EXP 20
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
5381: LD_ADDR_EXP 21
5385: PUSH
5386: LD_INT 5
5388: ST_TO_ADDR
// end ;
5389: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
5390: LD_EXP 18
5394: PUSH
5395: LD_INT 34
5397: PUSH
5398: LD_EXP 84
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PPUSH
5407: CALL_OW 69
5411: AND
5412: IFFALSE 5875
5414: GO 5416
5416: DISABLE
5417: LD_INT 0
5419: PPUSH
5420: PPUSH
5421: PPUSH
5422: PPUSH
// begin enable ;
5423: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
5424: LD_ADDR_VAR 0 1
5428: PUSH
5429: LD_INT 34
5431: PUSH
5432: LD_EXP 84
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 69
5445: PUSH
5446: FOR_IN
5447: IFFALSE 5519
// begin if not i in minersList then
5449: LD_VAR 0 1
5453: PUSH
5454: LD_EXP 19
5458: IN
5459: NOT
5460: IFFALSE 5517
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
5462: LD_ADDR_EXP 19
5466: PUSH
5467: LD_EXP 19
5471: PPUSH
5472: LD_EXP 19
5476: PUSH
5477: LD_INT 1
5479: PLUS
5480: PPUSH
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 1
5490: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
5491: LD_ADDR_EXP 20
5495: PUSH
5496: LD_EXP 20
5500: PPUSH
5501: LD_EXP 20
5505: PUSH
5506: LD_INT 1
5508: PLUS
5509: PPUSH
5510: EMPTY
5511: PPUSH
5512: CALL_OW 1
5516: ST_TO_ADDR
// end end ;
5517: GO 5446
5519: POP
5520: POP
// for i := minerMinesList downto 1 do
5521: LD_ADDR_VAR 0 1
5525: PUSH
5526: DOUBLE
5527: LD_EXP 20
5531: INC
5532: ST_TO_ADDR
5533: LD_INT 1
5535: PUSH
5536: FOR_DOWNTO
5537: IFFALSE 5873
// begin if IsLive ( minersList [ i ] ) then
5539: LD_EXP 19
5543: PUSH
5544: LD_VAR 0 1
5548: ARRAY
5549: PPUSH
5550: CALL_OW 300
5554: IFFALSE 5582
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
5556: LD_EXP 19
5560: PUSH
5561: LD_VAR 0 1
5565: ARRAY
5566: PPUSH
5567: LD_EXP 20
5571: PUSH
5572: LD_VAR 0 1
5576: ARRAY
5577: PPUSH
5578: CALL_OW 505
// if not minerMinesList [ i ] then
5582: LD_EXP 20
5586: PUSH
5587: LD_VAR 0 1
5591: ARRAY
5592: NOT
5593: IFFALSE 5597
// continue ;
5595: GO 5536
// for j := minerMinesList [ i ] downto 1 do
5597: LD_ADDR_VAR 0 2
5601: PUSH
5602: DOUBLE
5603: LD_EXP 20
5607: PUSH
5608: LD_VAR 0 1
5612: ARRAY
5613: INC
5614: ST_TO_ADDR
5615: LD_INT 1
5617: PUSH
5618: FOR_DOWNTO
5619: IFFALSE 5869
// begin side := GetSide ( minersList [ i ] ) ;
5621: LD_ADDR_VAR 0 3
5625: PUSH
5626: LD_EXP 19
5630: PUSH
5631: LD_VAR 0 1
5635: ARRAY
5636: PPUSH
5637: CALL_OW 255
5641: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
5642: LD_ADDR_VAR 0 4
5646: PUSH
5647: LD_EXP 20
5651: PUSH
5652: LD_VAR 0 1
5656: ARRAY
5657: PUSH
5658: LD_VAR 0 2
5662: ARRAY
5663: PUSH
5664: LD_INT 1
5666: ARRAY
5667: PPUSH
5668: LD_EXP 20
5672: PUSH
5673: LD_VAR 0 1
5677: ARRAY
5678: PUSH
5679: LD_VAR 0 2
5683: ARRAY
5684: PUSH
5685: LD_INT 2
5687: ARRAY
5688: PPUSH
5689: CALL_OW 428
5693: ST_TO_ADDR
// if not tmp then
5694: LD_VAR 0 4
5698: NOT
5699: IFFALSE 5703
// continue ;
5701: GO 5618
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
5703: LD_VAR 0 4
5707: PUSH
5708: LD_INT 81
5710: PUSH
5711: LD_VAR 0 3
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PPUSH
5720: CALL_OW 69
5724: IN
5725: PUSH
5726: LD_EXP 20
5730: PUSH
5731: LD_VAR 0 1
5735: ARRAY
5736: PUSH
5737: LD_VAR 0 2
5741: ARRAY
5742: PUSH
5743: LD_INT 1
5745: ARRAY
5746: PPUSH
5747: LD_EXP 20
5751: PUSH
5752: LD_VAR 0 1
5756: ARRAY
5757: PUSH
5758: LD_VAR 0 2
5762: ARRAY
5763: PUSH
5764: LD_INT 2
5766: ARRAY
5767: PPUSH
5768: CALL_OW 458
5772: AND
5773: IFFALSE 5867
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
5775: LD_EXP 20
5779: PUSH
5780: LD_VAR 0 1
5784: ARRAY
5785: PUSH
5786: LD_VAR 0 2
5790: ARRAY
5791: PUSH
5792: LD_INT 1
5794: ARRAY
5795: PPUSH
5796: LD_EXP 20
5800: PUSH
5801: LD_VAR 0 1
5805: ARRAY
5806: PUSH
5807: LD_VAR 0 2
5811: ARRAY
5812: PUSH
5813: LD_INT 2
5815: ARRAY
5816: PPUSH
5817: LD_VAR 0 3
5821: PPUSH
5822: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
5826: LD_ADDR_EXP 20
5830: PUSH
5831: LD_EXP 20
5835: PPUSH
5836: LD_VAR 0 1
5840: PPUSH
5841: LD_EXP 20
5845: PUSH
5846: LD_VAR 0 1
5850: ARRAY
5851: PPUSH
5852: LD_VAR 0 2
5856: PPUSH
5857: CALL_OW 3
5861: PPUSH
5862: CALL_OW 1
5866: ST_TO_ADDR
// end ; end ;
5867: GO 5618
5869: POP
5870: POP
// end ;
5871: GO 5536
5873: POP
5874: POP
// end ;
5875: PPOPN 4
5877: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
5878: LD_INT 0
5880: PPUSH
5881: PPUSH
// result := false ;
5882: LD_ADDR_VAR 0 4
5886: PUSH
5887: LD_INT 0
5889: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
5890: LD_VAR 0 1
5894: PPUSH
5895: CALL_OW 264
5899: PUSH
5900: LD_EXP 84
5904: EQUAL
5905: NOT
5906: IFFALSE 5910
// exit ;
5908: GO 6150
// index := GetElementIndex ( minersList , unit ) ;
5910: LD_ADDR_VAR 0 5
5914: PUSH
5915: LD_EXP 19
5919: PPUSH
5920: LD_VAR 0 1
5924: PPUSH
5925: CALL 25405 0 2
5929: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
5930: LD_EXP 20
5934: PUSH
5935: LD_VAR 0 5
5939: ARRAY
5940: PUSH
5941: LD_EXP 21
5945: GREATEREQUAL
5946: IFFALSE 5950
// exit ;
5948: GO 6150
// ComMoveXY ( unit , x , y ) ;
5950: LD_VAR 0 1
5954: PPUSH
5955: LD_VAR 0 2
5959: PPUSH
5960: LD_VAR 0 3
5964: PPUSH
5965: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5969: LD_INT 35
5971: PPUSH
5972: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
5976: LD_VAR 0 1
5980: PPUSH
5981: LD_VAR 0 2
5985: PPUSH
5986: LD_VAR 0 3
5990: PPUSH
5991: CALL 55469 0 3
5995: NOT
5996: PUSH
5997: LD_VAR 0 1
6001: PPUSH
6002: CALL_OW 314
6006: AND
6007: IFFALSE 6011
// exit ;
6009: GO 6150
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
6011: LD_VAR 0 2
6015: PPUSH
6016: LD_VAR 0 3
6020: PPUSH
6021: CALL_OW 428
6025: PUSH
6026: LD_VAR 0 1
6030: EQUAL
6031: PUSH
6032: LD_VAR 0 1
6036: PPUSH
6037: CALL_OW 314
6041: NOT
6042: AND
6043: IFFALSE 5969
// PlaySoundXY ( x , y , PlantMine ) ;
6045: LD_VAR 0 2
6049: PPUSH
6050: LD_VAR 0 3
6054: PPUSH
6055: LD_STRING PlantMine
6057: PPUSH
6058: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
6062: LD_VAR 0 2
6066: PPUSH
6067: LD_VAR 0 3
6071: PPUSH
6072: LD_VAR 0 1
6076: PPUSH
6077: CALL_OW 255
6081: PPUSH
6082: LD_INT 0
6084: PPUSH
6085: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
6089: LD_ADDR_EXP 20
6093: PUSH
6094: LD_EXP 20
6098: PPUSH
6099: LD_VAR 0 5
6103: PUSH
6104: LD_EXP 20
6108: PUSH
6109: LD_VAR 0 5
6113: ARRAY
6114: PUSH
6115: LD_INT 1
6117: PLUS
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PPUSH
6123: LD_VAR 0 2
6127: PUSH
6128: LD_VAR 0 3
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PPUSH
6137: CALL 25620 0 3
6141: ST_TO_ADDR
// result := true ;
6142: LD_ADDR_VAR 0 4
6146: PUSH
6147: LD_INT 1
6149: ST_TO_ADDR
// end ;
6150: LD_VAR 0 4
6154: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
6155: LD_INT 0
6157: PPUSH
6158: PPUSH
6159: PPUSH
// if not unit in minersList then
6160: LD_VAR 0 1
6164: PUSH
6165: LD_EXP 19
6169: IN
6170: NOT
6171: IFFALSE 6175
// exit ;
6173: GO 6567
// index := GetElementIndex ( minersList , unit ) ;
6175: LD_ADDR_VAR 0 6
6179: PUSH
6180: LD_EXP 19
6184: PPUSH
6185: LD_VAR 0 1
6189: PPUSH
6190: CALL 25405 0 2
6194: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
6195: LD_ADDR_VAR 0 5
6199: PUSH
6200: DOUBLE
6201: LD_EXP 20
6205: PUSH
6206: LD_VAR 0 6
6210: ARRAY
6211: INC
6212: ST_TO_ADDR
6213: LD_INT 1
6215: PUSH
6216: FOR_DOWNTO
6217: IFFALSE 6378
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
6219: LD_EXP 20
6223: PUSH
6224: LD_VAR 0 6
6228: ARRAY
6229: PUSH
6230: LD_VAR 0 5
6234: ARRAY
6235: PUSH
6236: LD_INT 1
6238: ARRAY
6239: PUSH
6240: LD_VAR 0 2
6244: EQUAL
6245: PUSH
6246: LD_EXP 20
6250: PUSH
6251: LD_VAR 0 6
6255: ARRAY
6256: PUSH
6257: LD_VAR 0 5
6261: ARRAY
6262: PUSH
6263: LD_INT 2
6265: ARRAY
6266: PUSH
6267: LD_VAR 0 3
6271: EQUAL
6272: AND
6273: IFFALSE 6376
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6275: LD_EXP 20
6279: PUSH
6280: LD_VAR 0 6
6284: ARRAY
6285: PUSH
6286: LD_VAR 0 5
6290: ARRAY
6291: PUSH
6292: LD_INT 1
6294: ARRAY
6295: PPUSH
6296: LD_EXP 20
6300: PUSH
6301: LD_VAR 0 6
6305: ARRAY
6306: PUSH
6307: LD_VAR 0 5
6311: ARRAY
6312: PUSH
6313: LD_INT 2
6315: ARRAY
6316: PPUSH
6317: LD_VAR 0 1
6321: PPUSH
6322: CALL_OW 255
6326: PPUSH
6327: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6331: LD_ADDR_EXP 20
6335: PUSH
6336: LD_EXP 20
6340: PPUSH
6341: LD_VAR 0 6
6345: PPUSH
6346: LD_EXP 20
6350: PUSH
6351: LD_VAR 0 6
6355: ARRAY
6356: PPUSH
6357: LD_VAR 0 5
6361: PPUSH
6362: CALL_OW 3
6366: PPUSH
6367: CALL_OW 1
6371: ST_TO_ADDR
// exit ;
6372: POP
6373: POP
6374: GO 6567
// end ; end ;
6376: GO 6216
6378: POP
6379: POP
// for i := minerMinesList [ index ] downto 1 do
6380: LD_ADDR_VAR 0 5
6384: PUSH
6385: DOUBLE
6386: LD_EXP 20
6390: PUSH
6391: LD_VAR 0 6
6395: ARRAY
6396: INC
6397: ST_TO_ADDR
6398: LD_INT 1
6400: PUSH
6401: FOR_DOWNTO
6402: IFFALSE 6565
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
6404: LD_EXP 20
6408: PUSH
6409: LD_VAR 0 6
6413: ARRAY
6414: PUSH
6415: LD_VAR 0 5
6419: ARRAY
6420: PUSH
6421: LD_INT 1
6423: ARRAY
6424: PPUSH
6425: LD_EXP 20
6429: PUSH
6430: LD_VAR 0 6
6434: ARRAY
6435: PUSH
6436: LD_VAR 0 5
6440: ARRAY
6441: PUSH
6442: LD_INT 2
6444: ARRAY
6445: PPUSH
6446: LD_VAR 0 2
6450: PPUSH
6451: LD_VAR 0 3
6455: PPUSH
6456: CALL_OW 298
6460: PUSH
6461: LD_INT 6
6463: LESS
6464: IFFALSE 6563
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6466: LD_EXP 20
6470: PUSH
6471: LD_VAR 0 6
6475: ARRAY
6476: PUSH
6477: LD_VAR 0 5
6481: ARRAY
6482: PUSH
6483: LD_INT 1
6485: ARRAY
6486: PPUSH
6487: LD_EXP 20
6491: PUSH
6492: LD_VAR 0 6
6496: ARRAY
6497: PUSH
6498: LD_VAR 0 5
6502: ARRAY
6503: PUSH
6504: LD_INT 2
6506: ARRAY
6507: PPUSH
6508: LD_VAR 0 1
6512: PPUSH
6513: CALL_OW 255
6517: PPUSH
6518: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6522: LD_ADDR_EXP 20
6526: PUSH
6527: LD_EXP 20
6531: PPUSH
6532: LD_VAR 0 6
6536: PPUSH
6537: LD_EXP 20
6541: PUSH
6542: LD_VAR 0 6
6546: ARRAY
6547: PPUSH
6548: LD_VAR 0 5
6552: PPUSH
6553: CALL_OW 3
6557: PPUSH
6558: CALL_OW 1
6562: ST_TO_ADDR
// end ; end ;
6563: GO 6401
6565: POP
6566: POP
// end ;
6567: LD_VAR 0 4
6571: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
6572: LD_INT 0
6574: PPUSH
6575: PPUSH
6576: PPUSH
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
6583: LD_VAR 0 1
6587: PPUSH
6588: CALL_OW 264
6592: PUSH
6593: LD_EXP 84
6597: EQUAL
6598: NOT
6599: PUSH
6600: LD_VAR 0 1
6604: PUSH
6605: LD_EXP 19
6609: IN
6610: NOT
6611: OR
6612: IFFALSE 6616
// exit ;
6614: GO 6938
// index := GetElementIndex ( minersList , unit ) ;
6616: LD_ADDR_VAR 0 6
6620: PUSH
6621: LD_EXP 19
6625: PPUSH
6626: LD_VAR 0 1
6630: PPUSH
6631: CALL 25405 0 2
6635: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
6636: LD_ADDR_VAR 0 8
6640: PUSH
6641: LD_EXP 21
6645: PUSH
6646: LD_EXP 20
6650: PUSH
6651: LD_VAR 0 6
6655: ARRAY
6656: MINUS
6657: ST_TO_ADDR
// if not minesFreeAmount then
6658: LD_VAR 0 8
6662: NOT
6663: IFFALSE 6667
// exit ;
6665: GO 6938
// tmp := [ ] ;
6667: LD_ADDR_VAR 0 7
6671: PUSH
6672: EMPTY
6673: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
6674: LD_ADDR_VAR 0 5
6678: PUSH
6679: DOUBLE
6680: LD_INT 1
6682: DEC
6683: ST_TO_ADDR
6684: LD_VAR 0 8
6688: PUSH
6689: FOR_TO
6690: IFFALSE 6885
// begin _d := rand ( 0 , 5 ) ;
6692: LD_ADDR_VAR 0 11
6696: PUSH
6697: LD_INT 0
6699: PPUSH
6700: LD_INT 5
6702: PPUSH
6703: CALL_OW 12
6707: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
6708: LD_ADDR_VAR 0 12
6712: PUSH
6713: LD_INT 2
6715: PPUSH
6716: LD_INT 6
6718: PPUSH
6719: CALL_OW 12
6723: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
6724: LD_ADDR_VAR 0 9
6728: PUSH
6729: LD_VAR 0 2
6733: PPUSH
6734: LD_VAR 0 11
6738: PPUSH
6739: LD_VAR 0 12
6743: PPUSH
6744: CALL_OW 272
6748: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
6749: LD_ADDR_VAR 0 10
6753: PUSH
6754: LD_VAR 0 3
6758: PPUSH
6759: LD_VAR 0 11
6763: PPUSH
6764: LD_VAR 0 12
6768: PPUSH
6769: CALL_OW 273
6773: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
6774: LD_VAR 0 9
6778: PPUSH
6779: LD_VAR 0 10
6783: PPUSH
6784: CALL_OW 488
6788: PUSH
6789: LD_VAR 0 9
6793: PUSH
6794: LD_VAR 0 10
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: LD_VAR 0 7
6807: IN
6808: NOT
6809: AND
6810: PUSH
6811: LD_VAR 0 9
6815: PPUSH
6816: LD_VAR 0 10
6820: PPUSH
6821: CALL_OW 458
6825: NOT
6826: AND
6827: IFFALSE 6869
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
6829: LD_ADDR_VAR 0 7
6833: PUSH
6834: LD_VAR 0 7
6838: PPUSH
6839: LD_VAR 0 7
6843: PUSH
6844: LD_INT 1
6846: PLUS
6847: PPUSH
6848: LD_VAR 0 9
6852: PUSH
6853: LD_VAR 0 10
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 1
6866: ST_TO_ADDR
6867: GO 6883
// i := i - 1 ;
6869: LD_ADDR_VAR 0 5
6873: PUSH
6874: LD_VAR 0 5
6878: PUSH
6879: LD_INT 1
6881: MINUS
6882: ST_TO_ADDR
// end ;
6883: GO 6689
6885: POP
6886: POP
// for i in tmp do
6887: LD_ADDR_VAR 0 5
6891: PUSH
6892: LD_VAR 0 7
6896: PUSH
6897: FOR_IN
6898: IFFALSE 6936
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
6900: LD_VAR 0 1
6904: PPUSH
6905: LD_VAR 0 5
6909: PUSH
6910: LD_INT 1
6912: ARRAY
6913: PPUSH
6914: LD_VAR 0 5
6918: PUSH
6919: LD_INT 2
6921: ARRAY
6922: PPUSH
6923: CALL 5878 0 3
6927: NOT
6928: IFFALSE 6934
// exit ;
6930: POP
6931: POP
6932: GO 6938
6934: GO 6897
6936: POP
6937: POP
// end ;
6938: LD_VAR 0 4
6942: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
6943: LD_INT 0
6945: PPUSH
6946: PPUSH
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
6951: PPUSH
// if not GetClass ( unit ) = class_sniper then
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL_OW 257
6961: PUSH
6962: LD_INT 5
6964: EQUAL
6965: NOT
6966: IFFALSE 6970
// exit ;
6968: GO 7358
// dist := 8 ;
6970: LD_ADDR_VAR 0 5
6974: PUSH
6975: LD_INT 8
6977: ST_TO_ADDR
// viewRange := 12 ;
6978: LD_ADDR_VAR 0 7
6982: PUSH
6983: LD_INT 12
6985: ST_TO_ADDR
// side := GetSide ( unit ) ;
6986: LD_ADDR_VAR 0 6
6990: PUSH
6991: LD_VAR 0 1
6995: PPUSH
6996: CALL_OW 255
7000: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
7001: LD_INT 61
7003: PPUSH
7004: LD_VAR 0 6
7008: PPUSH
7009: CALL_OW 321
7013: PUSH
7014: LD_INT 2
7016: EQUAL
7017: IFFALSE 7027
// viewRange := 16 ;
7019: LD_ADDR_VAR 0 7
7023: PUSH
7024: LD_INT 16
7026: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
7027: LD_VAR 0 1
7031: PPUSH
7032: LD_VAR 0 2
7036: PPUSH
7037: LD_VAR 0 3
7041: PPUSH
7042: CALL_OW 297
7046: PUSH
7047: LD_VAR 0 5
7051: GREATER
7052: IFFALSE 7131
// begin ComMoveXY ( unit , x , y ) ;
7054: LD_VAR 0 1
7058: PPUSH
7059: LD_VAR 0 2
7063: PPUSH
7064: LD_VAR 0 3
7068: PPUSH
7069: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7073: LD_INT 35
7075: PPUSH
7076: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
7080: LD_VAR 0 1
7084: PPUSH
7085: LD_VAR 0 2
7089: PPUSH
7090: LD_VAR 0 3
7094: PPUSH
7095: CALL 55469 0 3
7099: NOT
7100: IFFALSE 7104
// exit ;
7102: GO 7358
// until GetDistUnitXY ( unit , x , y ) < dist ;
7104: LD_VAR 0 1
7108: PPUSH
7109: LD_VAR 0 2
7113: PPUSH
7114: LD_VAR 0 3
7118: PPUSH
7119: CALL_OW 297
7123: PUSH
7124: LD_VAR 0 5
7128: LESS
7129: IFFALSE 7073
// end ; ComTurnXY ( unit , x , y ) ;
7131: LD_VAR 0 1
7135: PPUSH
7136: LD_VAR 0 2
7140: PPUSH
7141: LD_VAR 0 3
7145: PPUSH
7146: CALL_OW 118
// wait ( 5 ) ;
7150: LD_INT 5
7152: PPUSH
7153: CALL_OW 67
// _d := GetDir ( unit ) ;
7157: LD_ADDR_VAR 0 10
7161: PUSH
7162: LD_VAR 0 1
7166: PPUSH
7167: CALL_OW 254
7171: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
7172: LD_ADDR_VAR 0 8
7176: PUSH
7177: LD_VAR 0 1
7181: PPUSH
7182: CALL_OW 250
7186: PPUSH
7187: LD_VAR 0 10
7191: PPUSH
7192: LD_VAR 0 5
7196: PPUSH
7197: CALL_OW 272
7201: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
7202: LD_ADDR_VAR 0 9
7206: PUSH
7207: LD_VAR 0 1
7211: PPUSH
7212: CALL_OW 251
7216: PPUSH
7217: LD_VAR 0 10
7221: PPUSH
7222: LD_VAR 0 5
7226: PPUSH
7227: CALL_OW 273
7231: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7232: LD_VAR 0 8
7236: PPUSH
7237: LD_VAR 0 9
7241: PPUSH
7242: CALL_OW 488
7246: NOT
7247: IFFALSE 7251
// exit ;
7249: GO 7358
// ComAnimCustom ( unit , 1 ) ;
7251: LD_VAR 0 1
7255: PPUSH
7256: LD_INT 1
7258: PPUSH
7259: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
7263: LD_VAR 0 8
7267: PPUSH
7268: LD_VAR 0 9
7272: PPUSH
7273: LD_VAR 0 6
7277: PPUSH
7278: LD_VAR 0 7
7282: PPUSH
7283: CALL_OW 330
// repeat wait ( 1 ) ;
7287: LD_INT 1
7289: PPUSH
7290: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
7294: LD_VAR 0 1
7298: PPUSH
7299: CALL_OW 316
7303: PUSH
7304: LD_VAR 0 1
7308: PPUSH
7309: CALL_OW 314
7313: OR
7314: PUSH
7315: LD_VAR 0 1
7319: PPUSH
7320: CALL_OW 302
7324: NOT
7325: OR
7326: PUSH
7327: LD_VAR 0 1
7331: PPUSH
7332: CALL_OW 301
7336: OR
7337: IFFALSE 7287
// RemoveSeeing ( _x , _y , side ) ;
7339: LD_VAR 0 8
7343: PPUSH
7344: LD_VAR 0 9
7348: PPUSH
7349: LD_VAR 0 6
7353: PPUSH
7354: CALL_OW 331
// end ; end_of_file
7358: LD_VAR 0 4
7362: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7363: LD_VAR 0 2
7367: PUSH
7368: LD_INT 100
7370: EQUAL
7371: IFFALSE 8320
// begin if not StreamModeActive then
7373: LD_EXP 22
7377: NOT
7378: IFFALSE 7388
// StreamModeActive := true ;
7380: LD_ADDR_EXP 22
7384: PUSH
7385: LD_INT 1
7387: ST_TO_ADDR
// if p3 = 0 then
7388: LD_VAR 0 3
7392: PUSH
7393: LD_INT 0
7395: EQUAL
7396: IFFALSE 7402
// InitStreamMode ;
7398: CALL 8478 0 0
// if p3 = 1 then
7402: LD_VAR 0 3
7406: PUSH
7407: LD_INT 1
7409: EQUAL
7410: IFFALSE 7420
// sRocket := true ;
7412: LD_ADDR_EXP 27
7416: PUSH
7417: LD_INT 1
7419: ST_TO_ADDR
// if p3 = 2 then
7420: LD_VAR 0 3
7424: PUSH
7425: LD_INT 2
7427: EQUAL
7428: IFFALSE 7438
// sSpeed := true ;
7430: LD_ADDR_EXP 26
7434: PUSH
7435: LD_INT 1
7437: ST_TO_ADDR
// if p3 = 3 then
7438: LD_VAR 0 3
7442: PUSH
7443: LD_INT 3
7445: EQUAL
7446: IFFALSE 7456
// sEngine := true ;
7448: LD_ADDR_EXP 28
7452: PUSH
7453: LD_INT 1
7455: ST_TO_ADDR
// if p3 = 4 then
7456: LD_VAR 0 3
7460: PUSH
7461: LD_INT 4
7463: EQUAL
7464: IFFALSE 7474
// sSpec := true ;
7466: LD_ADDR_EXP 25
7470: PUSH
7471: LD_INT 1
7473: ST_TO_ADDR
// if p3 = 5 then
7474: LD_VAR 0 3
7478: PUSH
7479: LD_INT 5
7481: EQUAL
7482: IFFALSE 7492
// sLevel := true ;
7484: LD_ADDR_EXP 29
7488: PUSH
7489: LD_INT 1
7491: ST_TO_ADDR
// if p3 = 6 then
7492: LD_VAR 0 3
7496: PUSH
7497: LD_INT 6
7499: EQUAL
7500: IFFALSE 7510
// sArmoury := true ;
7502: LD_ADDR_EXP 30
7506: PUSH
7507: LD_INT 1
7509: ST_TO_ADDR
// if p3 = 7 then
7510: LD_VAR 0 3
7514: PUSH
7515: LD_INT 7
7517: EQUAL
7518: IFFALSE 7528
// sRadar := true ;
7520: LD_ADDR_EXP 31
7524: PUSH
7525: LD_INT 1
7527: ST_TO_ADDR
// if p3 = 8 then
7528: LD_VAR 0 3
7532: PUSH
7533: LD_INT 8
7535: EQUAL
7536: IFFALSE 7546
// sBunker := true ;
7538: LD_ADDR_EXP 32
7542: PUSH
7543: LD_INT 1
7545: ST_TO_ADDR
// if p3 = 9 then
7546: LD_VAR 0 3
7550: PUSH
7551: LD_INT 9
7553: EQUAL
7554: IFFALSE 7564
// sHack := true ;
7556: LD_ADDR_EXP 33
7560: PUSH
7561: LD_INT 1
7563: ST_TO_ADDR
// if p3 = 10 then
7564: LD_VAR 0 3
7568: PUSH
7569: LD_INT 10
7571: EQUAL
7572: IFFALSE 7582
// sFire := true ;
7574: LD_ADDR_EXP 34
7578: PUSH
7579: LD_INT 1
7581: ST_TO_ADDR
// if p3 = 11 then
7582: LD_VAR 0 3
7586: PUSH
7587: LD_INT 11
7589: EQUAL
7590: IFFALSE 7600
// sRefresh := true ;
7592: LD_ADDR_EXP 35
7596: PUSH
7597: LD_INT 1
7599: ST_TO_ADDR
// if p3 = 12 then
7600: LD_VAR 0 3
7604: PUSH
7605: LD_INT 12
7607: EQUAL
7608: IFFALSE 7618
// sExp := true ;
7610: LD_ADDR_EXP 36
7614: PUSH
7615: LD_INT 1
7617: ST_TO_ADDR
// if p3 = 13 then
7618: LD_VAR 0 3
7622: PUSH
7623: LD_INT 13
7625: EQUAL
7626: IFFALSE 7636
// sDepot := true ;
7628: LD_ADDR_EXP 37
7632: PUSH
7633: LD_INT 1
7635: ST_TO_ADDR
// if p3 = 14 then
7636: LD_VAR 0 3
7640: PUSH
7641: LD_INT 14
7643: EQUAL
7644: IFFALSE 7654
// sFlag := true ;
7646: LD_ADDR_EXP 38
7650: PUSH
7651: LD_INT 1
7653: ST_TO_ADDR
// if p3 = 15 then
7654: LD_VAR 0 3
7658: PUSH
7659: LD_INT 15
7661: EQUAL
7662: IFFALSE 7672
// sKamikadze := true ;
7664: LD_ADDR_EXP 46
7668: PUSH
7669: LD_INT 1
7671: ST_TO_ADDR
// if p3 = 16 then
7672: LD_VAR 0 3
7676: PUSH
7677: LD_INT 16
7679: EQUAL
7680: IFFALSE 7690
// sTroll := true ;
7682: LD_ADDR_EXP 47
7686: PUSH
7687: LD_INT 1
7689: ST_TO_ADDR
// if p3 = 17 then
7690: LD_VAR 0 3
7694: PUSH
7695: LD_INT 17
7697: EQUAL
7698: IFFALSE 7708
// sSlow := true ;
7700: LD_ADDR_EXP 48
7704: PUSH
7705: LD_INT 1
7707: ST_TO_ADDR
// if p3 = 18 then
7708: LD_VAR 0 3
7712: PUSH
7713: LD_INT 18
7715: EQUAL
7716: IFFALSE 7726
// sLack := true ;
7718: LD_ADDR_EXP 49
7722: PUSH
7723: LD_INT 1
7725: ST_TO_ADDR
// if p3 = 19 then
7726: LD_VAR 0 3
7730: PUSH
7731: LD_INT 19
7733: EQUAL
7734: IFFALSE 7744
// sTank := true ;
7736: LD_ADDR_EXP 51
7740: PUSH
7741: LD_INT 1
7743: ST_TO_ADDR
// if p3 = 20 then
7744: LD_VAR 0 3
7748: PUSH
7749: LD_INT 20
7751: EQUAL
7752: IFFALSE 7762
// sRemote := true ;
7754: LD_ADDR_EXP 52
7758: PUSH
7759: LD_INT 1
7761: ST_TO_ADDR
// if p3 = 21 then
7762: LD_VAR 0 3
7766: PUSH
7767: LD_INT 21
7769: EQUAL
7770: IFFALSE 7780
// sPowell := true ;
7772: LD_ADDR_EXP 53
7776: PUSH
7777: LD_INT 1
7779: ST_TO_ADDR
// if p3 = 22 then
7780: LD_VAR 0 3
7784: PUSH
7785: LD_INT 22
7787: EQUAL
7788: IFFALSE 7798
// sTeleport := true ;
7790: LD_ADDR_EXP 56
7794: PUSH
7795: LD_INT 1
7797: ST_TO_ADDR
// if p3 = 23 then
7798: LD_VAR 0 3
7802: PUSH
7803: LD_INT 23
7805: EQUAL
7806: IFFALSE 7816
// sOilTower := true ;
7808: LD_ADDR_EXP 58
7812: PUSH
7813: LD_INT 1
7815: ST_TO_ADDR
// if p3 = 24 then
7816: LD_VAR 0 3
7820: PUSH
7821: LD_INT 24
7823: EQUAL
7824: IFFALSE 7834
// sShovel := true ;
7826: LD_ADDR_EXP 59
7830: PUSH
7831: LD_INT 1
7833: ST_TO_ADDR
// if p3 = 25 then
7834: LD_VAR 0 3
7838: PUSH
7839: LD_INT 25
7841: EQUAL
7842: IFFALSE 7852
// sSheik := true ;
7844: LD_ADDR_EXP 60
7848: PUSH
7849: LD_INT 1
7851: ST_TO_ADDR
// if p3 = 26 then
7852: LD_VAR 0 3
7856: PUSH
7857: LD_INT 26
7859: EQUAL
7860: IFFALSE 7870
// sEarthquake := true ;
7862: LD_ADDR_EXP 62
7866: PUSH
7867: LD_INT 1
7869: ST_TO_ADDR
// if p3 = 27 then
7870: LD_VAR 0 3
7874: PUSH
7875: LD_INT 27
7877: EQUAL
7878: IFFALSE 7888
// sAI := true ;
7880: LD_ADDR_EXP 63
7884: PUSH
7885: LD_INT 1
7887: ST_TO_ADDR
// if p3 = 28 then
7888: LD_VAR 0 3
7892: PUSH
7893: LD_INT 28
7895: EQUAL
7896: IFFALSE 7906
// sCargo := true ;
7898: LD_ADDR_EXP 66
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// if p3 = 29 then
7906: LD_VAR 0 3
7910: PUSH
7911: LD_INT 29
7913: EQUAL
7914: IFFALSE 7924
// sDLaser := true ;
7916: LD_ADDR_EXP 67
7920: PUSH
7921: LD_INT 1
7923: ST_TO_ADDR
// if p3 = 30 then
7924: LD_VAR 0 3
7928: PUSH
7929: LD_INT 30
7931: EQUAL
7932: IFFALSE 7942
// sExchange := true ;
7934: LD_ADDR_EXP 68
7938: PUSH
7939: LD_INT 1
7941: ST_TO_ADDR
// if p3 = 31 then
7942: LD_VAR 0 3
7946: PUSH
7947: LD_INT 31
7949: EQUAL
7950: IFFALSE 7960
// sFac := true ;
7952: LD_ADDR_EXP 69
7956: PUSH
7957: LD_INT 1
7959: ST_TO_ADDR
// if p3 = 32 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 32
7967: EQUAL
7968: IFFALSE 7978
// sPower := true ;
7970: LD_ADDR_EXP 70
7974: PUSH
7975: LD_INT 1
7977: ST_TO_ADDR
// if p3 = 33 then
7978: LD_VAR 0 3
7982: PUSH
7983: LD_INT 33
7985: EQUAL
7986: IFFALSE 7996
// sRandom := true ;
7988: LD_ADDR_EXP 71
7992: PUSH
7993: LD_INT 1
7995: ST_TO_ADDR
// if p3 = 34 then
7996: LD_VAR 0 3
8000: PUSH
8001: LD_INT 34
8003: EQUAL
8004: IFFALSE 8014
// sShield := true ;
8006: LD_ADDR_EXP 72
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// if p3 = 35 then
8014: LD_VAR 0 3
8018: PUSH
8019: LD_INT 35
8021: EQUAL
8022: IFFALSE 8032
// sTime := true ;
8024: LD_ADDR_EXP 73
8028: PUSH
8029: LD_INT 1
8031: ST_TO_ADDR
// if p3 = 36 then
8032: LD_VAR 0 3
8036: PUSH
8037: LD_INT 36
8039: EQUAL
8040: IFFALSE 8050
// sTools := true ;
8042: LD_ADDR_EXP 74
8046: PUSH
8047: LD_INT 1
8049: ST_TO_ADDR
// if p3 = 101 then
8050: LD_VAR 0 3
8054: PUSH
8055: LD_INT 101
8057: EQUAL
8058: IFFALSE 8068
// sSold := true ;
8060: LD_ADDR_EXP 39
8064: PUSH
8065: LD_INT 1
8067: ST_TO_ADDR
// if p3 = 102 then
8068: LD_VAR 0 3
8072: PUSH
8073: LD_INT 102
8075: EQUAL
8076: IFFALSE 8086
// sDiff := true ;
8078: LD_ADDR_EXP 40
8082: PUSH
8083: LD_INT 1
8085: ST_TO_ADDR
// if p3 = 103 then
8086: LD_VAR 0 3
8090: PUSH
8091: LD_INT 103
8093: EQUAL
8094: IFFALSE 8104
// sFog := true ;
8096: LD_ADDR_EXP 43
8100: PUSH
8101: LD_INT 1
8103: ST_TO_ADDR
// if p3 = 104 then
8104: LD_VAR 0 3
8108: PUSH
8109: LD_INT 104
8111: EQUAL
8112: IFFALSE 8122
// sReset := true ;
8114: LD_ADDR_EXP 44
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// if p3 = 105 then
8122: LD_VAR 0 3
8126: PUSH
8127: LD_INT 105
8129: EQUAL
8130: IFFALSE 8140
// sSun := true ;
8132: LD_ADDR_EXP 45
8136: PUSH
8137: LD_INT 1
8139: ST_TO_ADDR
// if p3 = 106 then
8140: LD_VAR 0 3
8144: PUSH
8145: LD_INT 106
8147: EQUAL
8148: IFFALSE 8158
// sTiger := true ;
8150: LD_ADDR_EXP 41
8154: PUSH
8155: LD_INT 1
8157: ST_TO_ADDR
// if p3 = 107 then
8158: LD_VAR 0 3
8162: PUSH
8163: LD_INT 107
8165: EQUAL
8166: IFFALSE 8176
// sBomb := true ;
8168: LD_ADDR_EXP 42
8172: PUSH
8173: LD_INT 1
8175: ST_TO_ADDR
// if p3 = 108 then
8176: LD_VAR 0 3
8180: PUSH
8181: LD_INT 108
8183: EQUAL
8184: IFFALSE 8194
// sWound := true ;
8186: LD_ADDR_EXP 50
8190: PUSH
8191: LD_INT 1
8193: ST_TO_ADDR
// if p3 = 109 then
8194: LD_VAR 0 3
8198: PUSH
8199: LD_INT 109
8201: EQUAL
8202: IFFALSE 8212
// sBetray := true ;
8204: LD_ADDR_EXP 54
8208: PUSH
8209: LD_INT 1
8211: ST_TO_ADDR
// if p3 = 110 then
8212: LD_VAR 0 3
8216: PUSH
8217: LD_INT 110
8219: EQUAL
8220: IFFALSE 8230
// sContamin := true ;
8222: LD_ADDR_EXP 55
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// if p3 = 111 then
8230: LD_VAR 0 3
8234: PUSH
8235: LD_INT 111
8237: EQUAL
8238: IFFALSE 8248
// sOil := true ;
8240: LD_ADDR_EXP 57
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// if p3 = 112 then
8248: LD_VAR 0 3
8252: PUSH
8253: LD_INT 112
8255: EQUAL
8256: IFFALSE 8266
// sStu := true ;
8258: LD_ADDR_EXP 61
8262: PUSH
8263: LD_INT 1
8265: ST_TO_ADDR
// if p3 = 113 then
8266: LD_VAR 0 3
8270: PUSH
8271: LD_INT 113
8273: EQUAL
8274: IFFALSE 8284
// sBazooka := true ;
8276: LD_ADDR_EXP 64
8280: PUSH
8281: LD_INT 1
8283: ST_TO_ADDR
// if p3 = 114 then
8284: LD_VAR 0 3
8288: PUSH
8289: LD_INT 114
8291: EQUAL
8292: IFFALSE 8302
// sMortar := true ;
8294: LD_ADDR_EXP 65
8298: PUSH
8299: LD_INT 1
8301: ST_TO_ADDR
// if p3 = 115 then
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 115
8309: EQUAL
8310: IFFALSE 8320
// sRanger := true ;
8312: LD_ADDR_EXP 75
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// end ; if p2 = 101 then
8320: LD_VAR 0 2
8324: PUSH
8325: LD_INT 101
8327: EQUAL
8328: IFFALSE 8456
// begin case p3 of 1 :
8330: LD_VAR 0 3
8334: PUSH
8335: LD_INT 1
8337: DOUBLE
8338: EQUAL
8339: IFTRUE 8343
8341: GO 8350
8343: POP
// hHackUnlimitedResources ; 2 :
8344: CALL 19491 0 0
8348: GO 8456
8350: LD_INT 2
8352: DOUBLE
8353: EQUAL
8354: IFTRUE 8358
8356: GO 8365
8358: POP
// hHackSetLevel10 ; 3 :
8359: CALL 19624 0 0
8363: GO 8456
8365: LD_INT 3
8367: DOUBLE
8368: EQUAL
8369: IFTRUE 8373
8371: GO 8380
8373: POP
// hHackSetLevel10YourUnits ; 4 :
8374: CALL 19709 0 0
8378: GO 8456
8380: LD_INT 4
8382: DOUBLE
8383: EQUAL
8384: IFTRUE 8388
8386: GO 8395
8388: POP
// hHackInvincible ; 5 :
8389: CALL 20157 0 0
8393: GO 8456
8395: LD_INT 5
8397: DOUBLE
8398: EQUAL
8399: IFTRUE 8403
8401: GO 8410
8403: POP
// hHackInvisible ; 6 :
8404: CALL 20268 0 0
8408: GO 8456
8410: LD_INT 6
8412: DOUBLE
8413: EQUAL
8414: IFTRUE 8418
8416: GO 8425
8418: POP
// hHackChangeYourSide ; 7 :
8419: CALL 20325 0 0
8423: GO 8456
8425: LD_INT 7
8427: DOUBLE
8428: EQUAL
8429: IFTRUE 8433
8431: GO 8440
8433: POP
// hHackChangeUnitSide ; 8 :
8434: CALL 20367 0 0
8438: GO 8456
8440: LD_INT 8
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8455
8448: POP
// hHackFog ; end ;
8449: CALL 20468 0 0
8453: GO 8456
8455: POP
// end ; end ;
8456: PPOPN 6
8458: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8459: GO 8461
8461: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8462: LD_STRING initStreamRollete();
8464: PPUSH
8465: CALL_OW 559
// InitStreamMode ;
8469: CALL 8478 0 0
// DefineStreamItems ( ) ;
8473: CALL 8918 0 0
// end ;
8477: END
// function InitStreamMode ; begin
8478: LD_INT 0
8480: PPUSH
// streamModeActive := false ;
8481: LD_ADDR_EXP 22
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// normalCounter := 36 ;
8489: LD_ADDR_EXP 23
8493: PUSH
8494: LD_INT 36
8496: ST_TO_ADDR
// hardcoreCounter := 16 ;
8497: LD_ADDR_EXP 24
8501: PUSH
8502: LD_INT 16
8504: ST_TO_ADDR
// sRocket := false ;
8505: LD_ADDR_EXP 27
8509: PUSH
8510: LD_INT 0
8512: ST_TO_ADDR
// sSpeed := false ;
8513: LD_ADDR_EXP 26
8517: PUSH
8518: LD_INT 0
8520: ST_TO_ADDR
// sEngine := false ;
8521: LD_ADDR_EXP 28
8525: PUSH
8526: LD_INT 0
8528: ST_TO_ADDR
// sSpec := false ;
8529: LD_ADDR_EXP 25
8533: PUSH
8534: LD_INT 0
8536: ST_TO_ADDR
// sLevel := false ;
8537: LD_ADDR_EXP 29
8541: PUSH
8542: LD_INT 0
8544: ST_TO_ADDR
// sArmoury := false ;
8545: LD_ADDR_EXP 30
8549: PUSH
8550: LD_INT 0
8552: ST_TO_ADDR
// sRadar := false ;
8553: LD_ADDR_EXP 31
8557: PUSH
8558: LD_INT 0
8560: ST_TO_ADDR
// sBunker := false ;
8561: LD_ADDR_EXP 32
8565: PUSH
8566: LD_INT 0
8568: ST_TO_ADDR
// sHack := false ;
8569: LD_ADDR_EXP 33
8573: PUSH
8574: LD_INT 0
8576: ST_TO_ADDR
// sFire := false ;
8577: LD_ADDR_EXP 34
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
// sRefresh := false ;
8585: LD_ADDR_EXP 35
8589: PUSH
8590: LD_INT 0
8592: ST_TO_ADDR
// sExp := false ;
8593: LD_ADDR_EXP 36
8597: PUSH
8598: LD_INT 0
8600: ST_TO_ADDR
// sDepot := false ;
8601: LD_ADDR_EXP 37
8605: PUSH
8606: LD_INT 0
8608: ST_TO_ADDR
// sFlag := false ;
8609: LD_ADDR_EXP 38
8613: PUSH
8614: LD_INT 0
8616: ST_TO_ADDR
// sKamikadze := false ;
8617: LD_ADDR_EXP 46
8621: PUSH
8622: LD_INT 0
8624: ST_TO_ADDR
// sTroll := false ;
8625: LD_ADDR_EXP 47
8629: PUSH
8630: LD_INT 0
8632: ST_TO_ADDR
// sSlow := false ;
8633: LD_ADDR_EXP 48
8637: PUSH
8638: LD_INT 0
8640: ST_TO_ADDR
// sLack := false ;
8641: LD_ADDR_EXP 49
8645: PUSH
8646: LD_INT 0
8648: ST_TO_ADDR
// sTank := false ;
8649: LD_ADDR_EXP 51
8653: PUSH
8654: LD_INT 0
8656: ST_TO_ADDR
// sRemote := false ;
8657: LD_ADDR_EXP 52
8661: PUSH
8662: LD_INT 0
8664: ST_TO_ADDR
// sPowell := false ;
8665: LD_ADDR_EXP 53
8669: PUSH
8670: LD_INT 0
8672: ST_TO_ADDR
// sTeleport := false ;
8673: LD_ADDR_EXP 56
8677: PUSH
8678: LD_INT 0
8680: ST_TO_ADDR
// sOilTower := false ;
8681: LD_ADDR_EXP 58
8685: PUSH
8686: LD_INT 0
8688: ST_TO_ADDR
// sShovel := false ;
8689: LD_ADDR_EXP 59
8693: PUSH
8694: LD_INT 0
8696: ST_TO_ADDR
// sSheik := false ;
8697: LD_ADDR_EXP 60
8701: PUSH
8702: LD_INT 0
8704: ST_TO_ADDR
// sEarthquake := false ;
8705: LD_ADDR_EXP 62
8709: PUSH
8710: LD_INT 0
8712: ST_TO_ADDR
// sAI := false ;
8713: LD_ADDR_EXP 63
8717: PUSH
8718: LD_INT 0
8720: ST_TO_ADDR
// sCargo := false ;
8721: LD_ADDR_EXP 66
8725: PUSH
8726: LD_INT 0
8728: ST_TO_ADDR
// sDLaser := false ;
8729: LD_ADDR_EXP 67
8733: PUSH
8734: LD_INT 0
8736: ST_TO_ADDR
// sExchange := false ;
8737: LD_ADDR_EXP 68
8741: PUSH
8742: LD_INT 0
8744: ST_TO_ADDR
// sFac := false ;
8745: LD_ADDR_EXP 69
8749: PUSH
8750: LD_INT 0
8752: ST_TO_ADDR
// sPower := false ;
8753: LD_ADDR_EXP 70
8757: PUSH
8758: LD_INT 0
8760: ST_TO_ADDR
// sRandom := false ;
8761: LD_ADDR_EXP 71
8765: PUSH
8766: LD_INT 0
8768: ST_TO_ADDR
// sShield := false ;
8769: LD_ADDR_EXP 72
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// sTime := false ;
8777: LD_ADDR_EXP 73
8781: PUSH
8782: LD_INT 0
8784: ST_TO_ADDR
// sTools := false ;
8785: LD_ADDR_EXP 74
8789: PUSH
8790: LD_INT 0
8792: ST_TO_ADDR
// sSold := false ;
8793: LD_ADDR_EXP 39
8797: PUSH
8798: LD_INT 0
8800: ST_TO_ADDR
// sDiff := false ;
8801: LD_ADDR_EXP 40
8805: PUSH
8806: LD_INT 0
8808: ST_TO_ADDR
// sFog := false ;
8809: LD_ADDR_EXP 43
8813: PUSH
8814: LD_INT 0
8816: ST_TO_ADDR
// sReset := false ;
8817: LD_ADDR_EXP 44
8821: PUSH
8822: LD_INT 0
8824: ST_TO_ADDR
// sSun := false ;
8825: LD_ADDR_EXP 45
8829: PUSH
8830: LD_INT 0
8832: ST_TO_ADDR
// sTiger := false ;
8833: LD_ADDR_EXP 41
8837: PUSH
8838: LD_INT 0
8840: ST_TO_ADDR
// sBomb := false ;
8841: LD_ADDR_EXP 42
8845: PUSH
8846: LD_INT 0
8848: ST_TO_ADDR
// sWound := false ;
8849: LD_ADDR_EXP 50
8853: PUSH
8854: LD_INT 0
8856: ST_TO_ADDR
// sBetray := false ;
8857: LD_ADDR_EXP 54
8861: PUSH
8862: LD_INT 0
8864: ST_TO_ADDR
// sContamin := false ;
8865: LD_ADDR_EXP 55
8869: PUSH
8870: LD_INT 0
8872: ST_TO_ADDR
// sOil := false ;
8873: LD_ADDR_EXP 57
8877: PUSH
8878: LD_INT 0
8880: ST_TO_ADDR
// sStu := false ;
8881: LD_ADDR_EXP 61
8885: PUSH
8886: LD_INT 0
8888: ST_TO_ADDR
// sBazooka := false ;
8889: LD_ADDR_EXP 64
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// sMortar := false ;
8897: LD_ADDR_EXP 65
8901: PUSH
8902: LD_INT 0
8904: ST_TO_ADDR
// sRanger := false ;
8905: LD_ADDR_EXP 75
8909: PUSH
8910: LD_INT 0
8912: ST_TO_ADDR
// end ;
8913: LD_VAR 0 1
8917: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8918: LD_INT 0
8920: PPUSH
8921: PPUSH
8922: PPUSH
8923: PPUSH
8924: PPUSH
// result := [ ] ;
8925: LD_ADDR_VAR 0 1
8929: PUSH
8930: EMPTY
8931: ST_TO_ADDR
// if campaign_id = 1 then
8932: LD_OWVAR 69
8936: PUSH
8937: LD_INT 1
8939: EQUAL
8940: IFFALSE 11878
// begin case mission_number of 1 :
8942: LD_OWVAR 70
8946: PUSH
8947: LD_INT 1
8949: DOUBLE
8950: EQUAL
8951: IFTRUE 8955
8953: GO 9019
8955: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8956: LD_ADDR_VAR 0 1
8960: PUSH
8961: LD_INT 2
8963: PUSH
8964: LD_INT 4
8966: PUSH
8967: LD_INT 11
8969: PUSH
8970: LD_INT 12
8972: PUSH
8973: LD_INT 15
8975: PUSH
8976: LD_INT 16
8978: PUSH
8979: LD_INT 22
8981: PUSH
8982: LD_INT 23
8984: PUSH
8985: LD_INT 26
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: PUSH
8999: LD_INT 101
9001: PUSH
9002: LD_INT 102
9004: PUSH
9005: LD_INT 106
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: ST_TO_ADDR
9017: GO 11876
9019: LD_INT 2
9021: DOUBLE
9022: EQUAL
9023: IFTRUE 9027
9025: GO 9099
9027: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9028: LD_ADDR_VAR 0 1
9032: PUSH
9033: LD_INT 2
9035: PUSH
9036: LD_INT 4
9038: PUSH
9039: LD_INT 11
9041: PUSH
9042: LD_INT 12
9044: PUSH
9045: LD_INT 15
9047: PUSH
9048: LD_INT 16
9050: PUSH
9051: LD_INT 22
9053: PUSH
9054: LD_INT 23
9056: PUSH
9057: LD_INT 26
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: PUSH
9071: LD_INT 101
9073: PUSH
9074: LD_INT 102
9076: PUSH
9077: LD_INT 105
9079: PUSH
9080: LD_INT 106
9082: PUSH
9083: LD_INT 108
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: ST_TO_ADDR
9097: GO 11876
9099: LD_INT 3
9101: DOUBLE
9102: EQUAL
9103: IFTRUE 9107
9105: GO 9183
9107: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9108: LD_ADDR_VAR 0 1
9112: PUSH
9113: LD_INT 2
9115: PUSH
9116: LD_INT 4
9118: PUSH
9119: LD_INT 5
9121: PUSH
9122: LD_INT 11
9124: PUSH
9125: LD_INT 12
9127: PUSH
9128: LD_INT 15
9130: PUSH
9131: LD_INT 16
9133: PUSH
9134: LD_INT 22
9136: PUSH
9137: LD_INT 26
9139: PUSH
9140: LD_INT 36
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 101
9157: PUSH
9158: LD_INT 102
9160: PUSH
9161: LD_INT 105
9163: PUSH
9164: LD_INT 106
9166: PUSH
9167: LD_INT 108
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: ST_TO_ADDR
9181: GO 11876
9183: LD_INT 4
9185: DOUBLE
9186: EQUAL
9187: IFTRUE 9191
9189: GO 9275
9191: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9192: LD_ADDR_VAR 0 1
9196: PUSH
9197: LD_INT 2
9199: PUSH
9200: LD_INT 4
9202: PUSH
9203: LD_INT 5
9205: PUSH
9206: LD_INT 8
9208: PUSH
9209: LD_INT 11
9211: PUSH
9212: LD_INT 12
9214: PUSH
9215: LD_INT 15
9217: PUSH
9218: LD_INT 16
9220: PUSH
9221: LD_INT 22
9223: PUSH
9224: LD_INT 23
9226: PUSH
9227: LD_INT 26
9229: PUSH
9230: LD_INT 36
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 101
9249: PUSH
9250: LD_INT 102
9252: PUSH
9253: LD_INT 105
9255: PUSH
9256: LD_INT 106
9258: PUSH
9259: LD_INT 108
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: ST_TO_ADDR
9273: GO 11876
9275: LD_INT 5
9277: DOUBLE
9278: EQUAL
9279: IFTRUE 9283
9281: GO 9383
9283: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9284: LD_ADDR_VAR 0 1
9288: PUSH
9289: LD_INT 2
9291: PUSH
9292: LD_INT 4
9294: PUSH
9295: LD_INT 5
9297: PUSH
9298: LD_INT 6
9300: PUSH
9301: LD_INT 8
9303: PUSH
9304: LD_INT 11
9306: PUSH
9307: LD_INT 12
9309: PUSH
9310: LD_INT 15
9312: PUSH
9313: LD_INT 16
9315: PUSH
9316: LD_INT 22
9318: PUSH
9319: LD_INT 23
9321: PUSH
9322: LD_INT 25
9324: PUSH
9325: LD_INT 26
9327: PUSH
9328: LD_INT 36
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: PUSH
9347: LD_INT 101
9349: PUSH
9350: LD_INT 102
9352: PUSH
9353: LD_INT 105
9355: PUSH
9356: LD_INT 106
9358: PUSH
9359: LD_INT 108
9361: PUSH
9362: LD_INT 109
9364: PUSH
9365: LD_INT 112
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: ST_TO_ADDR
9381: GO 11876
9383: LD_INT 6
9385: DOUBLE
9386: EQUAL
9387: IFTRUE 9391
9389: GO 9511
9391: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9392: LD_ADDR_VAR 0 1
9396: PUSH
9397: LD_INT 2
9399: PUSH
9400: LD_INT 4
9402: PUSH
9403: LD_INT 5
9405: PUSH
9406: LD_INT 6
9408: PUSH
9409: LD_INT 8
9411: PUSH
9412: LD_INT 11
9414: PUSH
9415: LD_INT 12
9417: PUSH
9418: LD_INT 15
9420: PUSH
9421: LD_INT 16
9423: PUSH
9424: LD_INT 20
9426: PUSH
9427: LD_INT 21
9429: PUSH
9430: LD_INT 22
9432: PUSH
9433: LD_INT 23
9435: PUSH
9436: LD_INT 25
9438: PUSH
9439: LD_INT 26
9441: PUSH
9442: LD_INT 30
9444: PUSH
9445: LD_INT 31
9447: PUSH
9448: LD_INT 32
9450: PUSH
9451: LD_INT 36
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: PUSH
9475: LD_INT 101
9477: PUSH
9478: LD_INT 102
9480: PUSH
9481: LD_INT 105
9483: PUSH
9484: LD_INT 106
9486: PUSH
9487: LD_INT 108
9489: PUSH
9490: LD_INT 109
9492: PUSH
9493: LD_INT 112
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: ST_TO_ADDR
9509: GO 11876
9511: LD_INT 7
9513: DOUBLE
9514: EQUAL
9515: IFTRUE 9519
9517: GO 9619
9519: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9520: LD_ADDR_VAR 0 1
9524: PUSH
9525: LD_INT 2
9527: PUSH
9528: LD_INT 4
9530: PUSH
9531: LD_INT 5
9533: PUSH
9534: LD_INT 7
9536: PUSH
9537: LD_INT 11
9539: PUSH
9540: LD_INT 12
9542: PUSH
9543: LD_INT 15
9545: PUSH
9546: LD_INT 16
9548: PUSH
9549: LD_INT 20
9551: PUSH
9552: LD_INT 21
9554: PUSH
9555: LD_INT 22
9557: PUSH
9558: LD_INT 23
9560: PUSH
9561: LD_INT 25
9563: PUSH
9564: LD_INT 26
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 101
9585: PUSH
9586: LD_INT 102
9588: PUSH
9589: LD_INT 103
9591: PUSH
9592: LD_INT 105
9594: PUSH
9595: LD_INT 106
9597: PUSH
9598: LD_INT 108
9600: PUSH
9601: LD_INT 112
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: ST_TO_ADDR
9617: GO 11876
9619: LD_INT 8
9621: DOUBLE
9622: EQUAL
9623: IFTRUE 9627
9625: GO 9755
9627: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9628: LD_ADDR_VAR 0 1
9632: PUSH
9633: LD_INT 2
9635: PUSH
9636: LD_INT 4
9638: PUSH
9639: LD_INT 5
9641: PUSH
9642: LD_INT 6
9644: PUSH
9645: LD_INT 7
9647: PUSH
9648: LD_INT 8
9650: PUSH
9651: LD_INT 11
9653: PUSH
9654: LD_INT 12
9656: PUSH
9657: LD_INT 15
9659: PUSH
9660: LD_INT 16
9662: PUSH
9663: LD_INT 20
9665: PUSH
9666: LD_INT 21
9668: PUSH
9669: LD_INT 22
9671: PUSH
9672: LD_INT 23
9674: PUSH
9675: LD_INT 25
9677: PUSH
9678: LD_INT 26
9680: PUSH
9681: LD_INT 30
9683: PUSH
9684: LD_INT 31
9686: PUSH
9687: LD_INT 32
9689: PUSH
9690: LD_INT 36
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: PUSH
9715: LD_INT 101
9717: PUSH
9718: LD_INT 102
9720: PUSH
9721: LD_INT 103
9723: PUSH
9724: LD_INT 105
9726: PUSH
9727: LD_INT 106
9729: PUSH
9730: LD_INT 108
9732: PUSH
9733: LD_INT 109
9735: PUSH
9736: LD_INT 112
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: ST_TO_ADDR
9753: GO 11876
9755: LD_INT 9
9757: DOUBLE
9758: EQUAL
9759: IFTRUE 9763
9761: GO 9899
9763: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9764: LD_ADDR_VAR 0 1
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: LD_INT 4
9774: PUSH
9775: LD_INT 5
9777: PUSH
9778: LD_INT 6
9780: PUSH
9781: LD_INT 7
9783: PUSH
9784: LD_INT 8
9786: PUSH
9787: LD_INT 11
9789: PUSH
9790: LD_INT 12
9792: PUSH
9793: LD_INT 15
9795: PUSH
9796: LD_INT 16
9798: PUSH
9799: LD_INT 20
9801: PUSH
9802: LD_INT 21
9804: PUSH
9805: LD_INT 22
9807: PUSH
9808: LD_INT 23
9810: PUSH
9811: LD_INT 25
9813: PUSH
9814: LD_INT 26
9816: PUSH
9817: LD_INT 28
9819: PUSH
9820: LD_INT 30
9822: PUSH
9823: LD_INT 31
9825: PUSH
9826: LD_INT 32
9828: PUSH
9829: LD_INT 36
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: PUSH
9855: LD_INT 101
9857: PUSH
9858: LD_INT 102
9860: PUSH
9861: LD_INT 103
9863: PUSH
9864: LD_INT 105
9866: PUSH
9867: LD_INT 106
9869: PUSH
9870: LD_INT 108
9872: PUSH
9873: LD_INT 109
9875: PUSH
9876: LD_INT 112
9878: PUSH
9879: LD_INT 114
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: ST_TO_ADDR
9897: GO 11876
9899: LD_INT 10
9901: DOUBLE
9902: EQUAL
9903: IFTRUE 9907
9905: GO 10091
9907: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9908: LD_ADDR_VAR 0 1
9912: PUSH
9913: LD_INT 2
9915: PUSH
9916: LD_INT 4
9918: PUSH
9919: LD_INT 5
9921: PUSH
9922: LD_INT 6
9924: PUSH
9925: LD_INT 7
9927: PUSH
9928: LD_INT 8
9930: PUSH
9931: LD_INT 9
9933: PUSH
9934: LD_INT 10
9936: PUSH
9937: LD_INT 11
9939: PUSH
9940: LD_INT 12
9942: PUSH
9943: LD_INT 13
9945: PUSH
9946: LD_INT 14
9948: PUSH
9949: LD_INT 15
9951: PUSH
9952: LD_INT 16
9954: PUSH
9955: LD_INT 17
9957: PUSH
9958: LD_INT 18
9960: PUSH
9961: LD_INT 19
9963: PUSH
9964: LD_INT 20
9966: PUSH
9967: LD_INT 21
9969: PUSH
9970: LD_INT 22
9972: PUSH
9973: LD_INT 23
9975: PUSH
9976: LD_INT 24
9978: PUSH
9979: LD_INT 25
9981: PUSH
9982: LD_INT 26
9984: PUSH
9985: LD_INT 28
9987: PUSH
9988: LD_INT 30
9990: PUSH
9991: LD_INT 31
9993: PUSH
9994: LD_INT 32
9996: PUSH
9997: LD_INT 36
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 101
10033: PUSH
10034: LD_INT 102
10036: PUSH
10037: LD_INT 103
10039: PUSH
10040: LD_INT 104
10042: PUSH
10043: LD_INT 105
10045: PUSH
10046: LD_INT 106
10048: PUSH
10049: LD_INT 107
10051: PUSH
10052: LD_INT 108
10054: PUSH
10055: LD_INT 109
10057: PUSH
10058: LD_INT 110
10060: PUSH
10061: LD_INT 111
10063: PUSH
10064: LD_INT 112
10066: PUSH
10067: LD_INT 114
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: ST_TO_ADDR
10089: GO 11876
10091: LD_INT 11
10093: DOUBLE
10094: EQUAL
10095: IFTRUE 10099
10097: GO 10291
10099: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10100: LD_ADDR_VAR 0 1
10104: PUSH
10105: LD_INT 2
10107: PUSH
10108: LD_INT 3
10110: PUSH
10111: LD_INT 4
10113: PUSH
10114: LD_INT 5
10116: PUSH
10117: LD_INT 6
10119: PUSH
10120: LD_INT 7
10122: PUSH
10123: LD_INT 8
10125: PUSH
10126: LD_INT 9
10128: PUSH
10129: LD_INT 10
10131: PUSH
10132: LD_INT 11
10134: PUSH
10135: LD_INT 12
10137: PUSH
10138: LD_INT 13
10140: PUSH
10141: LD_INT 14
10143: PUSH
10144: LD_INT 15
10146: PUSH
10147: LD_INT 16
10149: PUSH
10150: LD_INT 17
10152: PUSH
10153: LD_INT 18
10155: PUSH
10156: LD_INT 19
10158: PUSH
10159: LD_INT 20
10161: PUSH
10162: LD_INT 21
10164: PUSH
10165: LD_INT 22
10167: PUSH
10168: LD_INT 23
10170: PUSH
10171: LD_INT 24
10173: PUSH
10174: LD_INT 25
10176: PUSH
10177: LD_INT 26
10179: PUSH
10180: LD_INT 28
10182: PUSH
10183: LD_INT 30
10185: PUSH
10186: LD_INT 31
10188: PUSH
10189: LD_INT 32
10191: PUSH
10192: LD_INT 34
10194: PUSH
10195: LD_INT 36
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: PUSH
10231: LD_INT 101
10233: PUSH
10234: LD_INT 102
10236: PUSH
10237: LD_INT 103
10239: PUSH
10240: LD_INT 104
10242: PUSH
10243: LD_INT 105
10245: PUSH
10246: LD_INT 106
10248: PUSH
10249: LD_INT 107
10251: PUSH
10252: LD_INT 108
10254: PUSH
10255: LD_INT 109
10257: PUSH
10258: LD_INT 110
10260: PUSH
10261: LD_INT 111
10263: PUSH
10264: LD_INT 112
10266: PUSH
10267: LD_INT 114
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: ST_TO_ADDR
10289: GO 11876
10291: LD_INT 12
10293: DOUBLE
10294: EQUAL
10295: IFTRUE 10299
10297: GO 10507
10299: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10300: LD_ADDR_VAR 0 1
10304: PUSH
10305: LD_INT 1
10307: PUSH
10308: LD_INT 2
10310: PUSH
10311: LD_INT 3
10313: PUSH
10314: LD_INT 4
10316: PUSH
10317: LD_INT 5
10319: PUSH
10320: LD_INT 6
10322: PUSH
10323: LD_INT 7
10325: PUSH
10326: LD_INT 8
10328: PUSH
10329: LD_INT 9
10331: PUSH
10332: LD_INT 10
10334: PUSH
10335: LD_INT 11
10337: PUSH
10338: LD_INT 12
10340: PUSH
10341: LD_INT 13
10343: PUSH
10344: LD_INT 14
10346: PUSH
10347: LD_INT 15
10349: PUSH
10350: LD_INT 16
10352: PUSH
10353: LD_INT 17
10355: PUSH
10356: LD_INT 18
10358: PUSH
10359: LD_INT 19
10361: PUSH
10362: LD_INT 20
10364: PUSH
10365: LD_INT 21
10367: PUSH
10368: LD_INT 22
10370: PUSH
10371: LD_INT 23
10373: PUSH
10374: LD_INT 24
10376: PUSH
10377: LD_INT 25
10379: PUSH
10380: LD_INT 26
10382: PUSH
10383: LD_INT 27
10385: PUSH
10386: LD_INT 28
10388: PUSH
10389: LD_INT 30
10391: PUSH
10392: LD_INT 31
10394: PUSH
10395: LD_INT 32
10397: PUSH
10398: LD_INT 33
10400: PUSH
10401: LD_INT 34
10403: PUSH
10404: LD_INT 36
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: PUSH
10443: LD_INT 101
10445: PUSH
10446: LD_INT 102
10448: PUSH
10449: LD_INT 103
10451: PUSH
10452: LD_INT 104
10454: PUSH
10455: LD_INT 105
10457: PUSH
10458: LD_INT 106
10460: PUSH
10461: LD_INT 107
10463: PUSH
10464: LD_INT 108
10466: PUSH
10467: LD_INT 109
10469: PUSH
10470: LD_INT 110
10472: PUSH
10473: LD_INT 111
10475: PUSH
10476: LD_INT 112
10478: PUSH
10479: LD_INT 113
10481: PUSH
10482: LD_INT 114
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: ST_TO_ADDR
10505: GO 11876
10507: LD_INT 13
10509: DOUBLE
10510: EQUAL
10511: IFTRUE 10515
10513: GO 10711
10515: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10516: LD_ADDR_VAR 0 1
10520: PUSH
10521: LD_INT 1
10523: PUSH
10524: LD_INT 2
10526: PUSH
10527: LD_INT 3
10529: PUSH
10530: LD_INT 4
10532: PUSH
10533: LD_INT 5
10535: PUSH
10536: LD_INT 8
10538: PUSH
10539: LD_INT 9
10541: PUSH
10542: LD_INT 10
10544: PUSH
10545: LD_INT 11
10547: PUSH
10548: LD_INT 12
10550: PUSH
10551: LD_INT 14
10553: PUSH
10554: LD_INT 15
10556: PUSH
10557: LD_INT 16
10559: PUSH
10560: LD_INT 17
10562: PUSH
10563: LD_INT 18
10565: PUSH
10566: LD_INT 19
10568: PUSH
10569: LD_INT 20
10571: PUSH
10572: LD_INT 21
10574: PUSH
10575: LD_INT 22
10577: PUSH
10578: LD_INT 23
10580: PUSH
10581: LD_INT 24
10583: PUSH
10584: LD_INT 25
10586: PUSH
10587: LD_INT 26
10589: PUSH
10590: LD_INT 27
10592: PUSH
10593: LD_INT 28
10595: PUSH
10596: LD_INT 30
10598: PUSH
10599: LD_INT 31
10601: PUSH
10602: LD_INT 32
10604: PUSH
10605: LD_INT 33
10607: PUSH
10608: LD_INT 34
10610: PUSH
10611: LD_INT 36
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: PUSH
10647: LD_INT 101
10649: PUSH
10650: LD_INT 102
10652: PUSH
10653: LD_INT 103
10655: PUSH
10656: LD_INT 104
10658: PUSH
10659: LD_INT 105
10661: PUSH
10662: LD_INT 106
10664: PUSH
10665: LD_INT 107
10667: PUSH
10668: LD_INT 108
10670: PUSH
10671: LD_INT 109
10673: PUSH
10674: LD_INT 110
10676: PUSH
10677: LD_INT 111
10679: PUSH
10680: LD_INT 112
10682: PUSH
10683: LD_INT 113
10685: PUSH
10686: LD_INT 114
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: ST_TO_ADDR
10709: GO 11876
10711: LD_INT 14
10713: DOUBLE
10714: EQUAL
10715: IFTRUE 10719
10717: GO 10931
10719: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10720: LD_ADDR_VAR 0 1
10724: PUSH
10725: LD_INT 1
10727: PUSH
10728: LD_INT 2
10730: PUSH
10731: LD_INT 3
10733: PUSH
10734: LD_INT 4
10736: PUSH
10737: LD_INT 5
10739: PUSH
10740: LD_INT 6
10742: PUSH
10743: LD_INT 7
10745: PUSH
10746: LD_INT 8
10748: PUSH
10749: LD_INT 9
10751: PUSH
10752: LD_INT 10
10754: PUSH
10755: LD_INT 11
10757: PUSH
10758: LD_INT 12
10760: PUSH
10761: LD_INT 13
10763: PUSH
10764: LD_INT 14
10766: PUSH
10767: LD_INT 15
10769: PUSH
10770: LD_INT 16
10772: PUSH
10773: LD_INT 17
10775: PUSH
10776: LD_INT 18
10778: PUSH
10779: LD_INT 19
10781: PUSH
10782: LD_INT 20
10784: PUSH
10785: LD_INT 21
10787: PUSH
10788: LD_INT 22
10790: PUSH
10791: LD_INT 23
10793: PUSH
10794: LD_INT 24
10796: PUSH
10797: LD_INT 25
10799: PUSH
10800: LD_INT 26
10802: PUSH
10803: LD_INT 27
10805: PUSH
10806: LD_INT 28
10808: PUSH
10809: LD_INT 29
10811: PUSH
10812: LD_INT 30
10814: PUSH
10815: LD_INT 31
10817: PUSH
10818: LD_INT 32
10820: PUSH
10821: LD_INT 33
10823: PUSH
10824: LD_INT 34
10826: PUSH
10827: LD_INT 36
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: PUSH
10867: LD_INT 101
10869: PUSH
10870: LD_INT 102
10872: PUSH
10873: LD_INT 103
10875: PUSH
10876: LD_INT 104
10878: PUSH
10879: LD_INT 105
10881: PUSH
10882: LD_INT 106
10884: PUSH
10885: LD_INT 107
10887: PUSH
10888: LD_INT 108
10890: PUSH
10891: LD_INT 109
10893: PUSH
10894: LD_INT 110
10896: PUSH
10897: LD_INT 111
10899: PUSH
10900: LD_INT 112
10902: PUSH
10903: LD_INT 113
10905: PUSH
10906: LD_INT 114
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: ST_TO_ADDR
10929: GO 11876
10931: LD_INT 15
10933: DOUBLE
10934: EQUAL
10935: IFTRUE 10939
10937: GO 11151
10939: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10940: LD_ADDR_VAR 0 1
10944: PUSH
10945: LD_INT 1
10947: PUSH
10948: LD_INT 2
10950: PUSH
10951: LD_INT 3
10953: PUSH
10954: LD_INT 4
10956: PUSH
10957: LD_INT 5
10959: PUSH
10960: LD_INT 6
10962: PUSH
10963: LD_INT 7
10965: PUSH
10966: LD_INT 8
10968: PUSH
10969: LD_INT 9
10971: PUSH
10972: LD_INT 10
10974: PUSH
10975: LD_INT 11
10977: PUSH
10978: LD_INT 12
10980: PUSH
10981: LD_INT 13
10983: PUSH
10984: LD_INT 14
10986: PUSH
10987: LD_INT 15
10989: PUSH
10990: LD_INT 16
10992: PUSH
10993: LD_INT 17
10995: PUSH
10996: LD_INT 18
10998: PUSH
10999: LD_INT 19
11001: PUSH
11002: LD_INT 20
11004: PUSH
11005: LD_INT 21
11007: PUSH
11008: LD_INT 22
11010: PUSH
11011: LD_INT 23
11013: PUSH
11014: LD_INT 24
11016: PUSH
11017: LD_INT 25
11019: PUSH
11020: LD_INT 26
11022: PUSH
11023: LD_INT 27
11025: PUSH
11026: LD_INT 28
11028: PUSH
11029: LD_INT 29
11031: PUSH
11032: LD_INT 30
11034: PUSH
11035: LD_INT 31
11037: PUSH
11038: LD_INT 32
11040: PUSH
11041: LD_INT 33
11043: PUSH
11044: LD_INT 34
11046: PUSH
11047: LD_INT 36
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 101
11089: PUSH
11090: LD_INT 102
11092: PUSH
11093: LD_INT 103
11095: PUSH
11096: LD_INT 104
11098: PUSH
11099: LD_INT 105
11101: PUSH
11102: LD_INT 106
11104: PUSH
11105: LD_INT 107
11107: PUSH
11108: LD_INT 108
11110: PUSH
11111: LD_INT 109
11113: PUSH
11114: LD_INT 110
11116: PUSH
11117: LD_INT 111
11119: PUSH
11120: LD_INT 112
11122: PUSH
11123: LD_INT 113
11125: PUSH
11126: LD_INT 114
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: ST_TO_ADDR
11149: GO 11876
11151: LD_INT 16
11153: DOUBLE
11154: EQUAL
11155: IFTRUE 11159
11157: GO 11283
11159: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11160: LD_ADDR_VAR 0 1
11164: PUSH
11165: LD_INT 2
11167: PUSH
11168: LD_INT 4
11170: PUSH
11171: LD_INT 5
11173: PUSH
11174: LD_INT 7
11176: PUSH
11177: LD_INT 11
11179: PUSH
11180: LD_INT 12
11182: PUSH
11183: LD_INT 15
11185: PUSH
11186: LD_INT 16
11188: PUSH
11189: LD_INT 20
11191: PUSH
11192: LD_INT 21
11194: PUSH
11195: LD_INT 22
11197: PUSH
11198: LD_INT 23
11200: PUSH
11201: LD_INT 25
11203: PUSH
11204: LD_INT 26
11206: PUSH
11207: LD_INT 30
11209: PUSH
11210: LD_INT 31
11212: PUSH
11213: LD_INT 32
11215: PUSH
11216: LD_INT 33
11218: PUSH
11219: LD_INT 34
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: PUSH
11243: LD_INT 101
11245: PUSH
11246: LD_INT 102
11248: PUSH
11249: LD_INT 103
11251: PUSH
11252: LD_INT 106
11254: PUSH
11255: LD_INT 108
11257: PUSH
11258: LD_INT 112
11260: PUSH
11261: LD_INT 113
11263: PUSH
11264: LD_INT 114
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: ST_TO_ADDR
11281: GO 11876
11283: LD_INT 17
11285: DOUBLE
11286: EQUAL
11287: IFTRUE 11291
11289: GO 11503
11291: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11292: LD_ADDR_VAR 0 1
11296: PUSH
11297: LD_INT 1
11299: PUSH
11300: LD_INT 2
11302: PUSH
11303: LD_INT 3
11305: PUSH
11306: LD_INT 4
11308: PUSH
11309: LD_INT 5
11311: PUSH
11312: LD_INT 6
11314: PUSH
11315: LD_INT 7
11317: PUSH
11318: LD_INT 8
11320: PUSH
11321: LD_INT 9
11323: PUSH
11324: LD_INT 10
11326: PUSH
11327: LD_INT 11
11329: PUSH
11330: LD_INT 12
11332: PUSH
11333: LD_INT 13
11335: PUSH
11336: LD_INT 14
11338: PUSH
11339: LD_INT 15
11341: PUSH
11342: LD_INT 16
11344: PUSH
11345: LD_INT 17
11347: PUSH
11348: LD_INT 18
11350: PUSH
11351: LD_INT 19
11353: PUSH
11354: LD_INT 20
11356: PUSH
11357: LD_INT 21
11359: PUSH
11360: LD_INT 22
11362: PUSH
11363: LD_INT 23
11365: PUSH
11366: LD_INT 24
11368: PUSH
11369: LD_INT 25
11371: PUSH
11372: LD_INT 26
11374: PUSH
11375: LD_INT 27
11377: PUSH
11378: LD_INT 28
11380: PUSH
11381: LD_INT 29
11383: PUSH
11384: LD_INT 30
11386: PUSH
11387: LD_INT 31
11389: PUSH
11390: LD_INT 32
11392: PUSH
11393: LD_INT 33
11395: PUSH
11396: LD_INT 34
11398: PUSH
11399: LD_INT 36
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: PUSH
11439: LD_INT 101
11441: PUSH
11442: LD_INT 102
11444: PUSH
11445: LD_INT 103
11447: PUSH
11448: LD_INT 104
11450: PUSH
11451: LD_INT 105
11453: PUSH
11454: LD_INT 106
11456: PUSH
11457: LD_INT 107
11459: PUSH
11460: LD_INT 108
11462: PUSH
11463: LD_INT 109
11465: PUSH
11466: LD_INT 110
11468: PUSH
11469: LD_INT 111
11471: PUSH
11472: LD_INT 112
11474: PUSH
11475: LD_INT 113
11477: PUSH
11478: LD_INT 114
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: ST_TO_ADDR
11501: GO 11876
11503: LD_INT 18
11505: DOUBLE
11506: EQUAL
11507: IFTRUE 11511
11509: GO 11647
11511: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11512: LD_ADDR_VAR 0 1
11516: PUSH
11517: LD_INT 2
11519: PUSH
11520: LD_INT 4
11522: PUSH
11523: LD_INT 5
11525: PUSH
11526: LD_INT 7
11528: PUSH
11529: LD_INT 11
11531: PUSH
11532: LD_INT 12
11534: PUSH
11535: LD_INT 15
11537: PUSH
11538: LD_INT 16
11540: PUSH
11541: LD_INT 20
11543: PUSH
11544: LD_INT 21
11546: PUSH
11547: LD_INT 22
11549: PUSH
11550: LD_INT 23
11552: PUSH
11553: LD_INT 25
11555: PUSH
11556: LD_INT 26
11558: PUSH
11559: LD_INT 30
11561: PUSH
11562: LD_INT 31
11564: PUSH
11565: LD_INT 32
11567: PUSH
11568: LD_INT 33
11570: PUSH
11571: LD_INT 34
11573: PUSH
11574: LD_INT 35
11576: PUSH
11577: LD_INT 36
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 101
11605: PUSH
11606: LD_INT 102
11608: PUSH
11609: LD_INT 103
11611: PUSH
11612: LD_INT 106
11614: PUSH
11615: LD_INT 108
11617: PUSH
11618: LD_INT 112
11620: PUSH
11621: LD_INT 113
11623: PUSH
11624: LD_INT 114
11626: PUSH
11627: LD_INT 115
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: ST_TO_ADDR
11645: GO 11876
11647: LD_INT 19
11649: DOUBLE
11650: EQUAL
11651: IFTRUE 11655
11653: GO 11875
11655: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11656: LD_ADDR_VAR 0 1
11660: PUSH
11661: LD_INT 1
11663: PUSH
11664: LD_INT 2
11666: PUSH
11667: LD_INT 3
11669: PUSH
11670: LD_INT 4
11672: PUSH
11673: LD_INT 5
11675: PUSH
11676: LD_INT 6
11678: PUSH
11679: LD_INT 7
11681: PUSH
11682: LD_INT 8
11684: PUSH
11685: LD_INT 9
11687: PUSH
11688: LD_INT 10
11690: PUSH
11691: LD_INT 11
11693: PUSH
11694: LD_INT 12
11696: PUSH
11697: LD_INT 13
11699: PUSH
11700: LD_INT 14
11702: PUSH
11703: LD_INT 15
11705: PUSH
11706: LD_INT 16
11708: PUSH
11709: LD_INT 17
11711: PUSH
11712: LD_INT 18
11714: PUSH
11715: LD_INT 19
11717: PUSH
11718: LD_INT 20
11720: PUSH
11721: LD_INT 21
11723: PUSH
11724: LD_INT 22
11726: PUSH
11727: LD_INT 23
11729: PUSH
11730: LD_INT 24
11732: PUSH
11733: LD_INT 25
11735: PUSH
11736: LD_INT 26
11738: PUSH
11739: LD_INT 27
11741: PUSH
11742: LD_INT 28
11744: PUSH
11745: LD_INT 29
11747: PUSH
11748: LD_INT 30
11750: PUSH
11751: LD_INT 31
11753: PUSH
11754: LD_INT 32
11756: PUSH
11757: LD_INT 33
11759: PUSH
11760: LD_INT 34
11762: PUSH
11763: LD_INT 35
11765: PUSH
11766: LD_INT 36
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 101
11809: PUSH
11810: LD_INT 102
11812: PUSH
11813: LD_INT 103
11815: PUSH
11816: LD_INT 104
11818: PUSH
11819: LD_INT 105
11821: PUSH
11822: LD_INT 106
11824: PUSH
11825: LD_INT 107
11827: PUSH
11828: LD_INT 108
11830: PUSH
11831: LD_INT 109
11833: PUSH
11834: LD_INT 110
11836: PUSH
11837: LD_INT 111
11839: PUSH
11840: LD_INT 112
11842: PUSH
11843: LD_INT 113
11845: PUSH
11846: LD_INT 114
11848: PUSH
11849: LD_INT 115
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: ST_TO_ADDR
11873: GO 11876
11875: POP
// end else
11876: GO 12095
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11878: LD_ADDR_VAR 0 1
11882: PUSH
11883: LD_INT 1
11885: PUSH
11886: LD_INT 2
11888: PUSH
11889: LD_INT 3
11891: PUSH
11892: LD_INT 4
11894: PUSH
11895: LD_INT 5
11897: PUSH
11898: LD_INT 6
11900: PUSH
11901: LD_INT 7
11903: PUSH
11904: LD_INT 8
11906: PUSH
11907: LD_INT 9
11909: PUSH
11910: LD_INT 10
11912: PUSH
11913: LD_INT 11
11915: PUSH
11916: LD_INT 12
11918: PUSH
11919: LD_INT 13
11921: PUSH
11922: LD_INT 14
11924: PUSH
11925: LD_INT 15
11927: PUSH
11928: LD_INT 16
11930: PUSH
11931: LD_INT 17
11933: PUSH
11934: LD_INT 18
11936: PUSH
11937: LD_INT 19
11939: PUSH
11940: LD_INT 20
11942: PUSH
11943: LD_INT 21
11945: PUSH
11946: LD_INT 22
11948: PUSH
11949: LD_INT 23
11951: PUSH
11952: LD_INT 24
11954: PUSH
11955: LD_INT 25
11957: PUSH
11958: LD_INT 26
11960: PUSH
11961: LD_INT 27
11963: PUSH
11964: LD_INT 28
11966: PUSH
11967: LD_INT 29
11969: PUSH
11970: LD_INT 30
11972: PUSH
11973: LD_INT 31
11975: PUSH
11976: LD_INT 32
11978: PUSH
11979: LD_INT 33
11981: PUSH
11982: LD_INT 34
11984: PUSH
11985: LD_INT 35
11987: PUSH
11988: LD_INT 36
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 101
12031: PUSH
12032: LD_INT 102
12034: PUSH
12035: LD_INT 103
12037: PUSH
12038: LD_INT 104
12040: PUSH
12041: LD_INT 105
12043: PUSH
12044: LD_INT 106
12046: PUSH
12047: LD_INT 107
12049: PUSH
12050: LD_INT 108
12052: PUSH
12053: LD_INT 109
12055: PUSH
12056: LD_INT 110
12058: PUSH
12059: LD_INT 111
12061: PUSH
12062: LD_INT 112
12064: PUSH
12065: LD_INT 113
12067: PUSH
12068: LD_INT 114
12070: PUSH
12071: LD_INT 115
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: ST_TO_ADDR
// if result then
12095: LD_VAR 0 1
12099: IFFALSE 12388
// begin normal :=  ;
12101: LD_ADDR_VAR 0 3
12105: PUSH
12106: LD_STRING 
12108: ST_TO_ADDR
// hardcore :=  ;
12109: LD_ADDR_VAR 0 4
12113: PUSH
12114: LD_STRING 
12116: ST_TO_ADDR
// for i = 1 to normalCounter do
12117: LD_ADDR_VAR 0 5
12121: PUSH
12122: DOUBLE
12123: LD_INT 1
12125: DEC
12126: ST_TO_ADDR
12127: LD_EXP 23
12131: PUSH
12132: FOR_TO
12133: IFFALSE 12234
// begin tmp := 0 ;
12135: LD_ADDR_VAR 0 2
12139: PUSH
12140: LD_STRING 0
12142: ST_TO_ADDR
// if result [ 1 ] then
12143: LD_VAR 0 1
12147: PUSH
12148: LD_INT 1
12150: ARRAY
12151: IFFALSE 12216
// if result [ 1 ] [ 1 ] = i then
12153: LD_VAR 0 1
12157: PUSH
12158: LD_INT 1
12160: ARRAY
12161: PUSH
12162: LD_INT 1
12164: ARRAY
12165: PUSH
12166: LD_VAR 0 5
12170: EQUAL
12171: IFFALSE 12216
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12173: LD_ADDR_VAR 0 1
12177: PUSH
12178: LD_VAR 0 1
12182: PPUSH
12183: LD_INT 1
12185: PPUSH
12186: LD_VAR 0 1
12190: PUSH
12191: LD_INT 1
12193: ARRAY
12194: PPUSH
12195: LD_INT 1
12197: PPUSH
12198: CALL_OW 3
12202: PPUSH
12203: CALL_OW 1
12207: ST_TO_ADDR
// tmp := 1 ;
12208: LD_ADDR_VAR 0 2
12212: PUSH
12213: LD_STRING 1
12215: ST_TO_ADDR
// end ; normal := normal & tmp ;
12216: LD_ADDR_VAR 0 3
12220: PUSH
12221: LD_VAR 0 3
12225: PUSH
12226: LD_VAR 0 2
12230: STR
12231: ST_TO_ADDR
// end ;
12232: GO 12132
12234: POP
12235: POP
// for i = 1 to hardcoreCounter do
12236: LD_ADDR_VAR 0 5
12240: PUSH
12241: DOUBLE
12242: LD_INT 1
12244: DEC
12245: ST_TO_ADDR
12246: LD_EXP 24
12250: PUSH
12251: FOR_TO
12252: IFFALSE 12357
// begin tmp := 0 ;
12254: LD_ADDR_VAR 0 2
12258: PUSH
12259: LD_STRING 0
12261: ST_TO_ADDR
// if result [ 2 ] then
12262: LD_VAR 0 1
12266: PUSH
12267: LD_INT 2
12269: ARRAY
12270: IFFALSE 12339
// if result [ 2 ] [ 1 ] = 100 + i then
12272: LD_VAR 0 1
12276: PUSH
12277: LD_INT 2
12279: ARRAY
12280: PUSH
12281: LD_INT 1
12283: ARRAY
12284: PUSH
12285: LD_INT 100
12287: PUSH
12288: LD_VAR 0 5
12292: PLUS
12293: EQUAL
12294: IFFALSE 12339
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12296: LD_ADDR_VAR 0 1
12300: PUSH
12301: LD_VAR 0 1
12305: PPUSH
12306: LD_INT 2
12308: PPUSH
12309: LD_VAR 0 1
12313: PUSH
12314: LD_INT 2
12316: ARRAY
12317: PPUSH
12318: LD_INT 1
12320: PPUSH
12321: CALL_OW 3
12325: PPUSH
12326: CALL_OW 1
12330: ST_TO_ADDR
// tmp := 1 ;
12331: LD_ADDR_VAR 0 2
12335: PUSH
12336: LD_STRING 1
12338: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12339: LD_ADDR_VAR 0 4
12343: PUSH
12344: LD_VAR 0 4
12348: PUSH
12349: LD_VAR 0 2
12353: STR
12354: ST_TO_ADDR
// end ;
12355: GO 12251
12357: POP
12358: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12359: LD_STRING getStreamItemsFromMission("
12361: PUSH
12362: LD_VAR 0 3
12366: STR
12367: PUSH
12368: LD_STRING ","
12370: STR
12371: PUSH
12372: LD_VAR 0 4
12376: STR
12377: PUSH
12378: LD_STRING ")
12380: STR
12381: PPUSH
12382: CALL_OW 559
// end else
12386: GO 12395
// ToLua ( getStreamItemsFromMission("","") ) ;
12388: LD_STRING getStreamItemsFromMission("","")
12390: PPUSH
12391: CALL_OW 559
// end ;
12395: LD_VAR 0 1
12399: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12400: LD_EXP 22
12404: PUSH
12405: LD_EXP 27
12409: AND
12410: IFFALSE 12534
12412: GO 12414
12414: DISABLE
12415: LD_INT 0
12417: PPUSH
12418: PPUSH
// begin enable ;
12419: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12420: LD_ADDR_VAR 0 2
12424: PUSH
12425: LD_INT 22
12427: PUSH
12428: LD_OWVAR 2
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 2
12439: PUSH
12440: LD_INT 34
12442: PUSH
12443: LD_INT 7
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 34
12452: PUSH
12453: LD_INT 45
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 34
12462: PUSH
12463: LD_INT 28
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 34
12472: PUSH
12473: LD_INT 47
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PPUSH
12491: CALL_OW 69
12495: ST_TO_ADDR
// if not tmp then
12496: LD_VAR 0 2
12500: NOT
12501: IFFALSE 12505
// exit ;
12503: GO 12534
// for i in tmp do
12505: LD_ADDR_VAR 0 1
12509: PUSH
12510: LD_VAR 0 2
12514: PUSH
12515: FOR_IN
12516: IFFALSE 12532
// begin SetLives ( i , 0 ) ;
12518: LD_VAR 0 1
12522: PPUSH
12523: LD_INT 0
12525: PPUSH
12526: CALL_OW 234
// end ;
12530: GO 12515
12532: POP
12533: POP
// end ;
12534: PPOPN 2
12536: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12537: LD_EXP 22
12541: PUSH
12542: LD_EXP 28
12546: AND
12547: IFFALSE 12631
12549: GO 12551
12551: DISABLE
12552: LD_INT 0
12554: PPUSH
12555: PPUSH
// begin enable ;
12556: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12557: LD_ADDR_VAR 0 2
12561: PUSH
12562: LD_INT 22
12564: PUSH
12565: LD_OWVAR 2
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PUSH
12574: LD_INT 32
12576: PUSH
12577: LD_INT 3
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PPUSH
12588: CALL_OW 69
12592: ST_TO_ADDR
// if not tmp then
12593: LD_VAR 0 2
12597: NOT
12598: IFFALSE 12602
// exit ;
12600: GO 12631
// for i in tmp do
12602: LD_ADDR_VAR 0 1
12606: PUSH
12607: LD_VAR 0 2
12611: PUSH
12612: FOR_IN
12613: IFFALSE 12629
// begin SetLives ( i , 0 ) ;
12615: LD_VAR 0 1
12619: PPUSH
12620: LD_INT 0
12622: PPUSH
12623: CALL_OW 234
// end ;
12627: GO 12612
12629: POP
12630: POP
// end ;
12631: PPOPN 2
12633: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12634: LD_EXP 22
12638: PUSH
12639: LD_EXP 25
12643: AND
12644: IFFALSE 12737
12646: GO 12648
12648: DISABLE
12649: LD_INT 0
12651: PPUSH
// begin enable ;
12652: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12653: LD_ADDR_VAR 0 1
12657: PUSH
12658: LD_INT 22
12660: PUSH
12661: LD_OWVAR 2
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 2
12672: PUSH
12673: LD_INT 25
12675: PUSH
12676: LD_INT 5
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 25
12685: PUSH
12686: LD_INT 9
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: LD_INT 25
12695: PUSH
12696: LD_INT 8
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PPUSH
12713: CALL_OW 69
12717: PUSH
12718: FOR_IN
12719: IFFALSE 12735
// begin SetClass ( i , 1 ) ;
12721: LD_VAR 0 1
12725: PPUSH
12726: LD_INT 1
12728: PPUSH
12729: CALL_OW 336
// end ;
12733: GO 12718
12735: POP
12736: POP
// end ;
12737: PPOPN 1
12739: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12740: LD_EXP 22
12744: PUSH
12745: LD_EXP 26
12749: AND
12750: PUSH
12751: LD_OWVAR 65
12755: PUSH
12756: LD_INT 7
12758: LESS
12759: AND
12760: IFFALSE 12774
12762: GO 12764
12764: DISABLE
// begin enable ;
12765: ENABLE
// game_speed := 7 ;
12766: LD_ADDR_OWVAR 65
12770: PUSH
12771: LD_INT 7
12773: ST_TO_ADDR
// end ;
12774: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12775: LD_EXP 22
12779: PUSH
12780: LD_EXP 29
12784: AND
12785: IFFALSE 12987
12787: GO 12789
12789: DISABLE
12790: LD_INT 0
12792: PPUSH
12793: PPUSH
12794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12795: LD_ADDR_VAR 0 3
12799: PUSH
12800: LD_INT 81
12802: PUSH
12803: LD_OWVAR 2
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 21
12814: PUSH
12815: LD_INT 1
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PPUSH
12826: CALL_OW 69
12830: ST_TO_ADDR
// if not tmp then
12831: LD_VAR 0 3
12835: NOT
12836: IFFALSE 12840
// exit ;
12838: GO 12987
// if tmp > 5 then
12840: LD_VAR 0 3
12844: PUSH
12845: LD_INT 5
12847: GREATER
12848: IFFALSE 12860
// k := 5 else
12850: LD_ADDR_VAR 0 2
12854: PUSH
12855: LD_INT 5
12857: ST_TO_ADDR
12858: GO 12870
// k := tmp ;
12860: LD_ADDR_VAR 0 2
12864: PUSH
12865: LD_VAR 0 3
12869: ST_TO_ADDR
// for i := 1 to k do
12870: LD_ADDR_VAR 0 1
12874: PUSH
12875: DOUBLE
12876: LD_INT 1
12878: DEC
12879: ST_TO_ADDR
12880: LD_VAR 0 2
12884: PUSH
12885: FOR_TO
12886: IFFALSE 12985
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12888: LD_VAR 0 3
12892: PUSH
12893: LD_VAR 0 1
12897: ARRAY
12898: PPUSH
12899: LD_VAR 0 1
12903: PUSH
12904: LD_INT 4
12906: MOD
12907: PUSH
12908: LD_INT 1
12910: PLUS
12911: PPUSH
12912: CALL_OW 259
12916: PUSH
12917: LD_INT 10
12919: LESS
12920: IFFALSE 12983
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12922: LD_VAR 0 3
12926: PUSH
12927: LD_VAR 0 1
12931: ARRAY
12932: PPUSH
12933: LD_VAR 0 1
12937: PUSH
12938: LD_INT 4
12940: MOD
12941: PUSH
12942: LD_INT 1
12944: PLUS
12945: PPUSH
12946: LD_VAR 0 3
12950: PUSH
12951: LD_VAR 0 1
12955: ARRAY
12956: PPUSH
12957: LD_VAR 0 1
12961: PUSH
12962: LD_INT 4
12964: MOD
12965: PUSH
12966: LD_INT 1
12968: PLUS
12969: PPUSH
12970: CALL_OW 259
12974: PUSH
12975: LD_INT 1
12977: PLUS
12978: PPUSH
12979: CALL_OW 237
12983: GO 12885
12985: POP
12986: POP
// end ;
12987: PPOPN 3
12989: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12990: LD_EXP 22
12994: PUSH
12995: LD_EXP 30
12999: AND
13000: IFFALSE 13020
13002: GO 13004
13004: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13005: LD_INT 4
13007: PPUSH
13008: LD_OWVAR 2
13012: PPUSH
13013: LD_INT 0
13015: PPUSH
13016: CALL_OW 324
13020: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13021: LD_EXP 22
13025: PUSH
13026: LD_EXP 59
13030: AND
13031: IFFALSE 13051
13033: GO 13035
13035: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13036: LD_INT 19
13038: PPUSH
13039: LD_OWVAR 2
13043: PPUSH
13044: LD_INT 0
13046: PPUSH
13047: CALL_OW 324
13051: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13052: LD_EXP 22
13056: PUSH
13057: LD_EXP 31
13061: AND
13062: IFFALSE 13164
13064: GO 13066
13066: DISABLE
13067: LD_INT 0
13069: PPUSH
13070: PPUSH
// begin enable ;
13071: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13072: LD_ADDR_VAR 0 2
13076: PUSH
13077: LD_INT 22
13079: PUSH
13080: LD_OWVAR 2
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 2
13091: PUSH
13092: LD_INT 34
13094: PUSH
13095: LD_INT 11
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 34
13104: PUSH
13105: LD_INT 30
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: LIST
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PPUSH
13121: CALL_OW 69
13125: ST_TO_ADDR
// if not tmp then
13126: LD_VAR 0 2
13130: NOT
13131: IFFALSE 13135
// exit ;
13133: GO 13164
// for i in tmp do
13135: LD_ADDR_VAR 0 1
13139: PUSH
13140: LD_VAR 0 2
13144: PUSH
13145: FOR_IN
13146: IFFALSE 13162
// begin SetLives ( i , 0 ) ;
13148: LD_VAR 0 1
13152: PPUSH
13153: LD_INT 0
13155: PPUSH
13156: CALL_OW 234
// end ;
13160: GO 13145
13162: POP
13163: POP
// end ;
13164: PPOPN 2
13166: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13167: LD_EXP 22
13171: PUSH
13172: LD_EXP 32
13176: AND
13177: IFFALSE 13197
13179: GO 13181
13181: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13182: LD_INT 32
13184: PPUSH
13185: LD_OWVAR 2
13189: PPUSH
13190: LD_INT 0
13192: PPUSH
13193: CALL_OW 324
13197: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13198: LD_EXP 22
13202: PUSH
13203: LD_EXP 33
13207: AND
13208: IFFALSE 13389
13210: GO 13212
13212: DISABLE
13213: LD_INT 0
13215: PPUSH
13216: PPUSH
13217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13218: LD_ADDR_VAR 0 2
13222: PUSH
13223: LD_INT 22
13225: PUSH
13226: LD_OWVAR 2
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PUSH
13235: LD_INT 33
13237: PUSH
13238: LD_INT 3
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PPUSH
13249: CALL_OW 69
13253: ST_TO_ADDR
// if not tmp then
13254: LD_VAR 0 2
13258: NOT
13259: IFFALSE 13263
// exit ;
13261: GO 13389
// side := 0 ;
13263: LD_ADDR_VAR 0 3
13267: PUSH
13268: LD_INT 0
13270: ST_TO_ADDR
// for i := 1 to 8 do
13271: LD_ADDR_VAR 0 1
13275: PUSH
13276: DOUBLE
13277: LD_INT 1
13279: DEC
13280: ST_TO_ADDR
13281: LD_INT 8
13283: PUSH
13284: FOR_TO
13285: IFFALSE 13333
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13287: LD_OWVAR 2
13291: PUSH
13292: LD_VAR 0 1
13296: NONEQUAL
13297: PUSH
13298: LD_OWVAR 2
13302: PPUSH
13303: LD_VAR 0 1
13307: PPUSH
13308: CALL_OW 81
13312: PUSH
13313: LD_INT 2
13315: EQUAL
13316: AND
13317: IFFALSE 13331
// begin side := i ;
13319: LD_ADDR_VAR 0 3
13323: PUSH
13324: LD_VAR 0 1
13328: ST_TO_ADDR
// break ;
13329: GO 13333
// end ;
13331: GO 13284
13333: POP
13334: POP
// if not side then
13335: LD_VAR 0 3
13339: NOT
13340: IFFALSE 13344
// exit ;
13342: GO 13389
// for i := 1 to tmp do
13344: LD_ADDR_VAR 0 1
13348: PUSH
13349: DOUBLE
13350: LD_INT 1
13352: DEC
13353: ST_TO_ADDR
13354: LD_VAR 0 2
13358: PUSH
13359: FOR_TO
13360: IFFALSE 13387
// if Prob ( 60 ) then
13362: LD_INT 60
13364: PPUSH
13365: CALL_OW 13
13369: IFFALSE 13385
// SetSide ( i , side ) ;
13371: LD_VAR 0 1
13375: PPUSH
13376: LD_VAR 0 3
13380: PPUSH
13381: CALL_OW 235
13385: GO 13359
13387: POP
13388: POP
// end ;
13389: PPOPN 3
13391: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13392: LD_EXP 22
13396: PUSH
13397: LD_EXP 35
13401: AND
13402: IFFALSE 13521
13404: GO 13406
13406: DISABLE
13407: LD_INT 0
13409: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13410: LD_ADDR_VAR 0 1
13414: PUSH
13415: LD_INT 22
13417: PUSH
13418: LD_OWVAR 2
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 21
13429: PUSH
13430: LD_INT 1
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 3
13439: PUSH
13440: LD_INT 23
13442: PUSH
13443: LD_INT 0
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: LIST
13458: PPUSH
13459: CALL_OW 69
13463: PUSH
13464: FOR_IN
13465: IFFALSE 13519
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13467: LD_VAR 0 1
13471: PPUSH
13472: CALL_OW 257
13476: PUSH
13477: LD_INT 1
13479: PUSH
13480: LD_INT 2
13482: PUSH
13483: LD_INT 3
13485: PUSH
13486: LD_INT 4
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: IN
13495: IFFALSE 13517
// SetClass ( un , rand ( 1 , 4 ) ) ;
13497: LD_VAR 0 1
13501: PPUSH
13502: LD_INT 1
13504: PPUSH
13505: LD_INT 4
13507: PPUSH
13508: CALL_OW 12
13512: PPUSH
13513: CALL_OW 336
13517: GO 13464
13519: POP
13520: POP
// end ;
13521: PPOPN 1
13523: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13524: LD_EXP 22
13528: PUSH
13529: LD_EXP 34
13533: AND
13534: IFFALSE 13613
13536: GO 13538
13538: DISABLE
13539: LD_INT 0
13541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13542: LD_ADDR_VAR 0 1
13546: PUSH
13547: LD_INT 22
13549: PUSH
13550: LD_OWVAR 2
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: LD_INT 21
13561: PUSH
13562: LD_INT 3
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PPUSH
13573: CALL_OW 69
13577: ST_TO_ADDR
// if not tmp then
13578: LD_VAR 0 1
13582: NOT
13583: IFFALSE 13587
// exit ;
13585: GO 13613
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13587: LD_VAR 0 1
13591: PUSH
13592: LD_INT 1
13594: PPUSH
13595: LD_VAR 0 1
13599: PPUSH
13600: CALL_OW 12
13604: ARRAY
13605: PPUSH
13606: LD_INT 100
13608: PPUSH
13609: CALL_OW 234
// end ;
13613: PPOPN 1
13615: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13616: LD_EXP 22
13620: PUSH
13621: LD_EXP 36
13625: AND
13626: IFFALSE 13724
13628: GO 13630
13630: DISABLE
13631: LD_INT 0
13633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13634: LD_ADDR_VAR 0 1
13638: PUSH
13639: LD_INT 22
13641: PUSH
13642: LD_OWVAR 2
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PUSH
13651: LD_INT 21
13653: PUSH
13654: LD_INT 1
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PPUSH
13665: CALL_OW 69
13669: ST_TO_ADDR
// if not tmp then
13670: LD_VAR 0 1
13674: NOT
13675: IFFALSE 13679
// exit ;
13677: GO 13724
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13679: LD_VAR 0 1
13683: PUSH
13684: LD_INT 1
13686: PPUSH
13687: LD_VAR 0 1
13691: PPUSH
13692: CALL_OW 12
13696: ARRAY
13697: PPUSH
13698: LD_INT 1
13700: PPUSH
13701: LD_INT 4
13703: PPUSH
13704: CALL_OW 12
13708: PPUSH
13709: LD_INT 3000
13711: PPUSH
13712: LD_INT 9000
13714: PPUSH
13715: CALL_OW 12
13719: PPUSH
13720: CALL_OW 492
// end ;
13724: PPOPN 1
13726: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13727: LD_EXP 22
13731: PUSH
13732: LD_EXP 37
13736: AND
13737: IFFALSE 13757
13739: GO 13741
13741: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13742: LD_INT 1
13744: PPUSH
13745: LD_OWVAR 2
13749: PPUSH
13750: LD_INT 0
13752: PPUSH
13753: CALL_OW 324
13757: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13758: LD_EXP 22
13762: PUSH
13763: LD_EXP 38
13767: AND
13768: IFFALSE 13851
13770: GO 13772
13772: DISABLE
13773: LD_INT 0
13775: PPUSH
13776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13777: LD_ADDR_VAR 0 2
13781: PUSH
13782: LD_INT 22
13784: PUSH
13785: LD_OWVAR 2
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: LD_INT 21
13796: PUSH
13797: LD_INT 3
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PPUSH
13808: CALL_OW 69
13812: ST_TO_ADDR
// if not tmp then
13813: LD_VAR 0 2
13817: NOT
13818: IFFALSE 13822
// exit ;
13820: GO 13851
// for i in tmp do
13822: LD_ADDR_VAR 0 1
13826: PUSH
13827: LD_VAR 0 2
13831: PUSH
13832: FOR_IN
13833: IFFALSE 13849
// SetBLevel ( i , 10 ) ;
13835: LD_VAR 0 1
13839: PPUSH
13840: LD_INT 10
13842: PPUSH
13843: CALL_OW 241
13847: GO 13832
13849: POP
13850: POP
// end ;
13851: PPOPN 2
13853: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13854: LD_EXP 22
13858: PUSH
13859: LD_EXP 39
13863: AND
13864: IFFALSE 13975
13866: GO 13868
13868: DISABLE
13869: LD_INT 0
13871: PPUSH
13872: PPUSH
13873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13874: LD_ADDR_VAR 0 3
13878: PUSH
13879: LD_INT 22
13881: PUSH
13882: LD_OWVAR 2
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 25
13893: PUSH
13894: LD_INT 1
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PPUSH
13905: CALL_OW 69
13909: ST_TO_ADDR
// if not tmp then
13910: LD_VAR 0 3
13914: NOT
13915: IFFALSE 13919
// exit ;
13917: GO 13975
// un := tmp [ rand ( 1 , tmp ) ] ;
13919: LD_ADDR_VAR 0 2
13923: PUSH
13924: LD_VAR 0 3
13928: PUSH
13929: LD_INT 1
13931: PPUSH
13932: LD_VAR 0 3
13936: PPUSH
13937: CALL_OW 12
13941: ARRAY
13942: ST_TO_ADDR
// if Crawls ( un ) then
13943: LD_VAR 0 2
13947: PPUSH
13948: CALL_OW 318
13952: IFFALSE 13963
// ComWalk ( un ) ;
13954: LD_VAR 0 2
13958: PPUSH
13959: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13963: LD_VAR 0 2
13967: PPUSH
13968: LD_INT 5
13970: PPUSH
13971: CALL_OW 336
// end ;
13975: PPOPN 3
13977: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13978: LD_EXP 22
13982: PUSH
13983: LD_EXP 40
13987: AND
13988: PUSH
13989: LD_OWVAR 67
13993: PUSH
13994: LD_INT 3
13996: LESS
13997: AND
13998: IFFALSE 14017
14000: GO 14002
14002: DISABLE
// Difficulty := Difficulty + 1 ;
14003: LD_ADDR_OWVAR 67
14007: PUSH
14008: LD_OWVAR 67
14012: PUSH
14013: LD_INT 1
14015: PLUS
14016: ST_TO_ADDR
14017: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14018: LD_EXP 22
14022: PUSH
14023: LD_EXP 41
14027: AND
14028: IFFALSE 14131
14030: GO 14032
14032: DISABLE
14033: LD_INT 0
14035: PPUSH
// begin for i := 1 to 5 do
14036: LD_ADDR_VAR 0 1
14040: PUSH
14041: DOUBLE
14042: LD_INT 1
14044: DEC
14045: ST_TO_ADDR
14046: LD_INT 5
14048: PUSH
14049: FOR_TO
14050: IFFALSE 14129
// begin uc_nation := nation_nature ;
14052: LD_ADDR_OWVAR 21
14056: PUSH
14057: LD_INT 0
14059: ST_TO_ADDR
// uc_side := 0 ;
14060: LD_ADDR_OWVAR 20
14064: PUSH
14065: LD_INT 0
14067: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14068: LD_ADDR_OWVAR 29
14072: PUSH
14073: LD_INT 12
14075: PUSH
14076: LD_INT 12
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: ST_TO_ADDR
// hc_agressivity := 20 ;
14083: LD_ADDR_OWVAR 35
14087: PUSH
14088: LD_INT 20
14090: ST_TO_ADDR
// hc_class := class_tiger ;
14091: LD_ADDR_OWVAR 28
14095: PUSH
14096: LD_INT 14
14098: ST_TO_ADDR
// hc_gallery :=  ;
14099: LD_ADDR_OWVAR 33
14103: PUSH
14104: LD_STRING 
14106: ST_TO_ADDR
// hc_name :=  ;
14107: LD_ADDR_OWVAR 26
14111: PUSH
14112: LD_STRING 
14114: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14115: CALL_OW 44
14119: PPUSH
14120: LD_INT 0
14122: PPUSH
14123: CALL_OW 51
// end ;
14127: GO 14049
14129: POP
14130: POP
// end ;
14131: PPOPN 1
14133: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14134: LD_EXP 22
14138: PUSH
14139: LD_EXP 42
14143: AND
14144: IFFALSE 14153
14146: GO 14148
14148: DISABLE
// StreamSibBomb ;
14149: CALL 14154 0 0
14153: END
// export function StreamSibBomb ; var i , x , y ; begin
14154: LD_INT 0
14156: PPUSH
14157: PPUSH
14158: PPUSH
14159: PPUSH
// result := false ;
14160: LD_ADDR_VAR 0 1
14164: PUSH
14165: LD_INT 0
14167: ST_TO_ADDR
// for i := 1 to 16 do
14168: LD_ADDR_VAR 0 2
14172: PUSH
14173: DOUBLE
14174: LD_INT 1
14176: DEC
14177: ST_TO_ADDR
14178: LD_INT 16
14180: PUSH
14181: FOR_TO
14182: IFFALSE 14381
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14184: LD_ADDR_VAR 0 3
14188: PUSH
14189: LD_INT 10
14191: PUSH
14192: LD_INT 20
14194: PUSH
14195: LD_INT 30
14197: PUSH
14198: LD_INT 40
14200: PUSH
14201: LD_INT 50
14203: PUSH
14204: LD_INT 60
14206: PUSH
14207: LD_INT 70
14209: PUSH
14210: LD_INT 80
14212: PUSH
14213: LD_INT 90
14215: PUSH
14216: LD_INT 100
14218: PUSH
14219: LD_INT 110
14221: PUSH
14222: LD_INT 120
14224: PUSH
14225: LD_INT 130
14227: PUSH
14228: LD_INT 140
14230: PUSH
14231: LD_INT 150
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 1
14253: PPUSH
14254: LD_INT 15
14256: PPUSH
14257: CALL_OW 12
14261: ARRAY
14262: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14263: LD_ADDR_VAR 0 4
14267: PUSH
14268: LD_INT 10
14270: PUSH
14271: LD_INT 20
14273: PUSH
14274: LD_INT 30
14276: PUSH
14277: LD_INT 40
14279: PUSH
14280: LD_INT 50
14282: PUSH
14283: LD_INT 60
14285: PUSH
14286: LD_INT 70
14288: PUSH
14289: LD_INT 80
14291: PUSH
14292: LD_INT 90
14294: PUSH
14295: LD_INT 100
14297: PUSH
14298: LD_INT 110
14300: PUSH
14301: LD_INT 120
14303: PUSH
14304: LD_INT 130
14306: PUSH
14307: LD_INT 140
14309: PUSH
14310: LD_INT 150
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 15
14335: PPUSH
14336: CALL_OW 12
14340: ARRAY
14341: ST_TO_ADDR
// if ValidHex ( x , y ) then
14342: LD_VAR 0 3
14346: PPUSH
14347: LD_VAR 0 4
14351: PPUSH
14352: CALL_OW 488
14356: IFFALSE 14379
// begin result := [ x , y ] ;
14358: LD_ADDR_VAR 0 1
14362: PUSH
14363: LD_VAR 0 3
14367: PUSH
14368: LD_VAR 0 4
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: ST_TO_ADDR
// break ;
14377: GO 14381
// end ; end ;
14379: GO 14181
14381: POP
14382: POP
// if result then
14383: LD_VAR 0 1
14387: IFFALSE 14447
// begin ToLua ( playSibBomb() ) ;
14389: LD_STRING playSibBomb()
14391: PPUSH
14392: CALL_OW 559
// wait ( 0 0$14 ) ;
14396: LD_INT 490
14398: PPUSH
14399: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14403: LD_VAR 0 1
14407: PUSH
14408: LD_INT 1
14410: ARRAY
14411: PPUSH
14412: LD_VAR 0 1
14416: PUSH
14417: LD_INT 2
14419: ARRAY
14420: PPUSH
14421: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14425: LD_VAR 0 1
14429: PUSH
14430: LD_INT 1
14432: ARRAY
14433: PPUSH
14434: LD_VAR 0 1
14438: PUSH
14439: LD_INT 2
14441: ARRAY
14442: PPUSH
14443: CALL_OW 429
// end ; end ;
14447: LD_VAR 0 1
14451: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14452: LD_EXP 22
14456: PUSH
14457: LD_EXP 44
14461: AND
14462: IFFALSE 14474
14464: GO 14466
14466: DISABLE
// YouLost (  ) ;
14467: LD_STRING 
14469: PPUSH
14470: CALL_OW 104
14474: END
// every 0 0$1 trigger StreamModeActive and sFog do
14475: LD_EXP 22
14479: PUSH
14480: LD_EXP 43
14484: AND
14485: IFFALSE 14499
14487: GO 14489
14489: DISABLE
// FogOff ( your_side ) ;
14490: LD_OWVAR 2
14494: PPUSH
14495: CALL_OW 344
14499: END
// every 0 0$1 trigger StreamModeActive and sSun do
14500: LD_EXP 22
14504: PUSH
14505: LD_EXP 45
14509: AND
14510: IFFALSE 14538
14512: GO 14514
14514: DISABLE
// begin solar_recharge_percent := 0 ;
14515: LD_ADDR_OWVAR 79
14519: PUSH
14520: LD_INT 0
14522: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14523: LD_INT 10500
14525: PPUSH
14526: CALL_OW 67
// solar_recharge_percent := 100 ;
14530: LD_ADDR_OWVAR 79
14534: PUSH
14535: LD_INT 100
14537: ST_TO_ADDR
// end ;
14538: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14539: LD_EXP 22
14543: PUSH
14544: LD_EXP 46
14548: AND
14549: IFFALSE 14788
14551: GO 14553
14553: DISABLE
14554: LD_INT 0
14556: PPUSH
14557: PPUSH
14558: PPUSH
// begin tmp := [ ] ;
14559: LD_ADDR_VAR 0 3
14563: PUSH
14564: EMPTY
14565: ST_TO_ADDR
// for i := 1 to 6 do
14566: LD_ADDR_VAR 0 1
14570: PUSH
14571: DOUBLE
14572: LD_INT 1
14574: DEC
14575: ST_TO_ADDR
14576: LD_INT 6
14578: PUSH
14579: FOR_TO
14580: IFFALSE 14685
// begin uc_nation := nation_nature ;
14582: LD_ADDR_OWVAR 21
14586: PUSH
14587: LD_INT 0
14589: ST_TO_ADDR
// uc_side := 0 ;
14590: LD_ADDR_OWVAR 20
14594: PUSH
14595: LD_INT 0
14597: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14598: LD_ADDR_OWVAR 29
14602: PUSH
14603: LD_INT 12
14605: PUSH
14606: LD_INT 12
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: ST_TO_ADDR
// hc_agressivity := 20 ;
14613: LD_ADDR_OWVAR 35
14617: PUSH
14618: LD_INT 20
14620: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14621: LD_ADDR_OWVAR 28
14625: PUSH
14626: LD_INT 17
14628: ST_TO_ADDR
// hc_gallery :=  ;
14629: LD_ADDR_OWVAR 33
14633: PUSH
14634: LD_STRING 
14636: ST_TO_ADDR
// hc_name :=  ;
14637: LD_ADDR_OWVAR 26
14641: PUSH
14642: LD_STRING 
14644: ST_TO_ADDR
// un := CreateHuman ;
14645: LD_ADDR_VAR 0 2
14649: PUSH
14650: CALL_OW 44
14654: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14655: LD_VAR 0 2
14659: PPUSH
14660: LD_INT 1
14662: PPUSH
14663: CALL_OW 51
// tmp := tmp ^ un ;
14667: LD_ADDR_VAR 0 3
14671: PUSH
14672: LD_VAR 0 3
14676: PUSH
14677: LD_VAR 0 2
14681: ADD
14682: ST_TO_ADDR
// end ;
14683: GO 14579
14685: POP
14686: POP
// repeat wait ( 0 0$1 ) ;
14687: LD_INT 35
14689: PPUSH
14690: CALL_OW 67
// for un in tmp do
14694: LD_ADDR_VAR 0 2
14698: PUSH
14699: LD_VAR 0 3
14703: PUSH
14704: FOR_IN
14705: IFFALSE 14779
// begin if IsDead ( un ) then
14707: LD_VAR 0 2
14711: PPUSH
14712: CALL_OW 301
14716: IFFALSE 14736
// begin tmp := tmp diff un ;
14718: LD_ADDR_VAR 0 3
14722: PUSH
14723: LD_VAR 0 3
14727: PUSH
14728: LD_VAR 0 2
14732: DIFF
14733: ST_TO_ADDR
// continue ;
14734: GO 14704
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14736: LD_VAR 0 2
14740: PPUSH
14741: LD_INT 3
14743: PUSH
14744: LD_INT 22
14746: PUSH
14747: LD_INT 0
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PPUSH
14758: CALL_OW 69
14762: PPUSH
14763: LD_VAR 0 2
14767: PPUSH
14768: CALL_OW 74
14772: PPUSH
14773: CALL_OW 115
// end ;
14777: GO 14704
14779: POP
14780: POP
// until not tmp ;
14781: LD_VAR 0 3
14785: NOT
14786: IFFALSE 14687
// end ;
14788: PPOPN 3
14790: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14791: LD_EXP 22
14795: PUSH
14796: LD_EXP 47
14800: AND
14801: IFFALSE 14855
14803: GO 14805
14805: DISABLE
// begin ToLua ( displayTroll(); ) ;
14806: LD_STRING displayTroll();
14808: PPUSH
14809: CALL_OW 559
// wait ( 3 3$00 ) ;
14813: LD_INT 6300
14815: PPUSH
14816: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14820: LD_STRING hideTroll();
14822: PPUSH
14823: CALL_OW 559
// wait ( 1 1$00 ) ;
14827: LD_INT 2100
14829: PPUSH
14830: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14834: LD_STRING displayTroll();
14836: PPUSH
14837: CALL_OW 559
// wait ( 1 1$00 ) ;
14841: LD_INT 2100
14843: PPUSH
14844: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14848: LD_STRING hideTroll();
14850: PPUSH
14851: CALL_OW 559
// end ;
14855: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14856: LD_EXP 22
14860: PUSH
14861: LD_EXP 48
14865: AND
14866: IFFALSE 14929
14868: GO 14870
14870: DISABLE
14871: LD_INT 0
14873: PPUSH
// begin p := 0 ;
14874: LD_ADDR_VAR 0 1
14878: PUSH
14879: LD_INT 0
14881: ST_TO_ADDR
// repeat game_speed := 1 ;
14882: LD_ADDR_OWVAR 65
14886: PUSH
14887: LD_INT 1
14889: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14890: LD_INT 35
14892: PPUSH
14893: CALL_OW 67
// p := p + 1 ;
14897: LD_ADDR_VAR 0 1
14901: PUSH
14902: LD_VAR 0 1
14906: PUSH
14907: LD_INT 1
14909: PLUS
14910: ST_TO_ADDR
// until p >= 60 ;
14911: LD_VAR 0 1
14915: PUSH
14916: LD_INT 60
14918: GREATEREQUAL
14919: IFFALSE 14882
// game_speed := 4 ;
14921: LD_ADDR_OWVAR 65
14925: PUSH
14926: LD_INT 4
14928: ST_TO_ADDR
// end ;
14929: PPOPN 1
14931: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14932: LD_EXP 22
14936: PUSH
14937: LD_EXP 49
14941: AND
14942: IFFALSE 15088
14944: GO 14946
14946: DISABLE
14947: LD_INT 0
14949: PPUSH
14950: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14951: LD_ADDR_VAR 0 1
14955: PUSH
14956: LD_INT 22
14958: PUSH
14959: LD_OWVAR 2
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 2
14970: PUSH
14971: LD_INT 30
14973: PUSH
14974: LD_INT 0
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: LD_INT 30
14983: PUSH
14984: LD_INT 1
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PPUSH
15000: CALL_OW 69
15004: ST_TO_ADDR
// if not depot then
15005: LD_VAR 0 1
15009: NOT
15010: IFFALSE 15014
// exit ;
15012: GO 15088
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15014: LD_ADDR_VAR 0 2
15018: PUSH
15019: LD_VAR 0 1
15023: PUSH
15024: LD_INT 1
15026: PPUSH
15027: LD_VAR 0 1
15031: PPUSH
15032: CALL_OW 12
15036: ARRAY
15037: PPUSH
15038: CALL_OW 274
15042: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15043: LD_VAR 0 2
15047: PPUSH
15048: LD_INT 1
15050: PPUSH
15051: LD_INT 0
15053: PPUSH
15054: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15058: LD_VAR 0 2
15062: PPUSH
15063: LD_INT 2
15065: PPUSH
15066: LD_INT 0
15068: PPUSH
15069: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15073: LD_VAR 0 2
15077: PPUSH
15078: LD_INT 3
15080: PPUSH
15081: LD_INT 0
15083: PPUSH
15084: CALL_OW 277
// end ;
15088: PPOPN 2
15090: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15091: LD_EXP 22
15095: PUSH
15096: LD_EXP 50
15100: AND
15101: IFFALSE 15198
15103: GO 15105
15105: DISABLE
15106: LD_INT 0
15108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15109: LD_ADDR_VAR 0 1
15113: PUSH
15114: LD_INT 22
15116: PUSH
15117: LD_OWVAR 2
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 21
15128: PUSH
15129: LD_INT 1
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PUSH
15136: LD_INT 3
15138: PUSH
15139: LD_INT 23
15141: PUSH
15142: LD_INT 0
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: LIST
15157: PPUSH
15158: CALL_OW 69
15162: ST_TO_ADDR
// if not tmp then
15163: LD_VAR 0 1
15167: NOT
15168: IFFALSE 15172
// exit ;
15170: GO 15198
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15172: LD_VAR 0 1
15176: PUSH
15177: LD_INT 1
15179: PPUSH
15180: LD_VAR 0 1
15184: PPUSH
15185: CALL_OW 12
15189: ARRAY
15190: PPUSH
15191: LD_INT 200
15193: PPUSH
15194: CALL_OW 234
// end ;
15198: PPOPN 1
15200: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15201: LD_EXP 22
15205: PUSH
15206: LD_EXP 51
15210: AND
15211: IFFALSE 15290
15213: GO 15215
15215: DISABLE
15216: LD_INT 0
15218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15219: LD_ADDR_VAR 0 1
15223: PUSH
15224: LD_INT 22
15226: PUSH
15227: LD_OWVAR 2
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: LD_INT 21
15238: PUSH
15239: LD_INT 2
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PPUSH
15250: CALL_OW 69
15254: ST_TO_ADDR
// if not tmp then
15255: LD_VAR 0 1
15259: NOT
15260: IFFALSE 15264
// exit ;
15262: GO 15290
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15264: LD_VAR 0 1
15268: PUSH
15269: LD_INT 1
15271: PPUSH
15272: LD_VAR 0 1
15276: PPUSH
15277: CALL_OW 12
15281: ARRAY
15282: PPUSH
15283: LD_INT 60
15285: PPUSH
15286: CALL_OW 234
// end ;
15290: PPOPN 1
15292: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15293: LD_EXP 22
15297: PUSH
15298: LD_EXP 52
15302: AND
15303: IFFALSE 15402
15305: GO 15307
15307: DISABLE
15308: LD_INT 0
15310: PPUSH
15311: PPUSH
// begin enable ;
15312: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15313: LD_ADDR_VAR 0 1
15317: PUSH
15318: LD_INT 22
15320: PUSH
15321: LD_OWVAR 2
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 61
15332: PUSH
15333: EMPTY
15334: LIST
15335: PUSH
15336: LD_INT 33
15338: PUSH
15339: LD_INT 2
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: LIST
15350: PPUSH
15351: CALL_OW 69
15355: ST_TO_ADDR
// if not tmp then
15356: LD_VAR 0 1
15360: NOT
15361: IFFALSE 15365
// exit ;
15363: GO 15402
// for i in tmp do
15365: LD_ADDR_VAR 0 2
15369: PUSH
15370: LD_VAR 0 1
15374: PUSH
15375: FOR_IN
15376: IFFALSE 15400
// if IsControledBy ( i ) then
15378: LD_VAR 0 2
15382: PPUSH
15383: CALL_OW 312
15387: IFFALSE 15398
// ComUnlink ( i ) ;
15389: LD_VAR 0 2
15393: PPUSH
15394: CALL_OW 136
15398: GO 15375
15400: POP
15401: POP
// end ;
15402: PPOPN 2
15404: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15405: LD_EXP 22
15409: PUSH
15410: LD_EXP 53
15414: AND
15415: IFFALSE 15555
15417: GO 15419
15419: DISABLE
15420: LD_INT 0
15422: PPUSH
15423: PPUSH
// begin ToLua ( displayPowell(); ) ;
15424: LD_STRING displayPowell();
15426: PPUSH
15427: CALL_OW 559
// uc_side := 0 ;
15431: LD_ADDR_OWVAR 20
15435: PUSH
15436: LD_INT 0
15438: ST_TO_ADDR
// uc_nation := 2 ;
15439: LD_ADDR_OWVAR 21
15443: PUSH
15444: LD_INT 2
15446: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15447: LD_ADDR_OWVAR 37
15451: PUSH
15452: LD_INT 14
15454: ST_TO_ADDR
// vc_engine := engine_siberite ;
15455: LD_ADDR_OWVAR 39
15459: PUSH
15460: LD_INT 3
15462: ST_TO_ADDR
// vc_control := control_apeman ;
15463: LD_ADDR_OWVAR 38
15467: PUSH
15468: LD_INT 5
15470: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15471: LD_ADDR_OWVAR 40
15475: PUSH
15476: LD_INT 29
15478: ST_TO_ADDR
// un := CreateVehicle ;
15479: LD_ADDR_VAR 0 2
15483: PUSH
15484: CALL_OW 45
15488: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15489: LD_VAR 0 2
15493: PPUSH
15494: LD_INT 1
15496: PPUSH
15497: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15501: LD_INT 35
15503: PPUSH
15504: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15508: LD_VAR 0 2
15512: PPUSH
15513: LD_INT 22
15515: PUSH
15516: LD_OWVAR 2
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: PPUSH
15525: CALL_OW 69
15529: PPUSH
15530: LD_VAR 0 2
15534: PPUSH
15535: CALL_OW 74
15539: PPUSH
15540: CALL_OW 115
// until IsDead ( un ) ;
15544: LD_VAR 0 2
15548: PPUSH
15549: CALL_OW 301
15553: IFFALSE 15501
// end ;
15555: PPOPN 2
15557: END
// every 0 0$1 trigger StreamModeActive and sStu do
15558: LD_EXP 22
15562: PUSH
15563: LD_EXP 61
15567: AND
15568: IFFALSE 15584
15570: GO 15572
15572: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15573: LD_STRING displayStucuk();
15575: PPUSH
15576: CALL_OW 559
// ResetFog ;
15580: CALL_OW 335
// end ;
15584: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15585: LD_EXP 22
15589: PUSH
15590: LD_EXP 54
15594: AND
15595: IFFALSE 15736
15597: GO 15599
15599: DISABLE
15600: LD_INT 0
15602: PPUSH
15603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15604: LD_ADDR_VAR 0 2
15608: PUSH
15609: LD_INT 22
15611: PUSH
15612: LD_OWVAR 2
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 21
15623: PUSH
15624: LD_INT 1
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PPUSH
15635: CALL_OW 69
15639: ST_TO_ADDR
// if not tmp then
15640: LD_VAR 0 2
15644: NOT
15645: IFFALSE 15649
// exit ;
15647: GO 15736
// un := tmp [ rand ( 1 , tmp ) ] ;
15649: LD_ADDR_VAR 0 1
15653: PUSH
15654: LD_VAR 0 2
15658: PUSH
15659: LD_INT 1
15661: PPUSH
15662: LD_VAR 0 2
15666: PPUSH
15667: CALL_OW 12
15671: ARRAY
15672: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15673: LD_VAR 0 1
15677: PPUSH
15678: LD_INT 0
15680: PPUSH
15681: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15685: LD_VAR 0 1
15689: PPUSH
15690: LD_OWVAR 3
15694: PUSH
15695: LD_VAR 0 1
15699: DIFF
15700: PPUSH
15701: LD_VAR 0 1
15705: PPUSH
15706: CALL_OW 74
15710: PPUSH
15711: CALL_OW 115
// wait ( 0 0$20 ) ;
15715: LD_INT 700
15717: PPUSH
15718: CALL_OW 67
// SetSide ( un , your_side ) ;
15722: LD_VAR 0 1
15726: PPUSH
15727: LD_OWVAR 2
15731: PPUSH
15732: CALL_OW 235
// end ;
15736: PPOPN 2
15738: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15739: LD_EXP 22
15743: PUSH
15744: LD_EXP 55
15748: AND
15749: IFFALSE 15855
15751: GO 15753
15753: DISABLE
15754: LD_INT 0
15756: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15757: LD_ADDR_VAR 0 1
15761: PUSH
15762: LD_INT 22
15764: PUSH
15765: LD_OWVAR 2
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 2
15776: PUSH
15777: LD_INT 30
15779: PUSH
15780: LD_INT 0
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 30
15789: PUSH
15790: LD_INT 1
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: LIST
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PPUSH
15806: CALL_OW 69
15810: ST_TO_ADDR
// if not depot then
15811: LD_VAR 0 1
15815: NOT
15816: IFFALSE 15820
// exit ;
15818: GO 15855
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15820: LD_VAR 0 1
15824: PUSH
15825: LD_INT 1
15827: ARRAY
15828: PPUSH
15829: CALL_OW 250
15833: PPUSH
15834: LD_VAR 0 1
15838: PUSH
15839: LD_INT 1
15841: ARRAY
15842: PPUSH
15843: CALL_OW 251
15847: PPUSH
15848: LD_INT 70
15850: PPUSH
15851: CALL_OW 495
// end ;
15855: PPOPN 1
15857: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15858: LD_EXP 22
15862: PUSH
15863: LD_EXP 56
15867: AND
15868: IFFALSE 16079
15870: GO 15872
15872: DISABLE
15873: LD_INT 0
15875: PPUSH
15876: PPUSH
15877: PPUSH
15878: PPUSH
15879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15880: LD_ADDR_VAR 0 5
15884: PUSH
15885: LD_INT 22
15887: PUSH
15888: LD_OWVAR 2
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 21
15899: PUSH
15900: LD_INT 1
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: PPUSH
15911: CALL_OW 69
15915: ST_TO_ADDR
// if not tmp then
15916: LD_VAR 0 5
15920: NOT
15921: IFFALSE 15925
// exit ;
15923: GO 16079
// for i in tmp do
15925: LD_ADDR_VAR 0 1
15929: PUSH
15930: LD_VAR 0 5
15934: PUSH
15935: FOR_IN
15936: IFFALSE 16077
// begin d := rand ( 0 , 5 ) ;
15938: LD_ADDR_VAR 0 4
15942: PUSH
15943: LD_INT 0
15945: PPUSH
15946: LD_INT 5
15948: PPUSH
15949: CALL_OW 12
15953: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15954: LD_ADDR_VAR 0 2
15958: PUSH
15959: LD_VAR 0 1
15963: PPUSH
15964: CALL_OW 250
15968: PPUSH
15969: LD_VAR 0 4
15973: PPUSH
15974: LD_INT 3
15976: PPUSH
15977: LD_INT 12
15979: PPUSH
15980: CALL_OW 12
15984: PPUSH
15985: CALL_OW 272
15989: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15990: LD_ADDR_VAR 0 3
15994: PUSH
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL_OW 251
16004: PPUSH
16005: LD_VAR 0 4
16009: PPUSH
16010: LD_INT 3
16012: PPUSH
16013: LD_INT 12
16015: PPUSH
16016: CALL_OW 12
16020: PPUSH
16021: CALL_OW 273
16025: ST_TO_ADDR
// if ValidHex ( x , y ) then
16026: LD_VAR 0 2
16030: PPUSH
16031: LD_VAR 0 3
16035: PPUSH
16036: CALL_OW 488
16040: IFFALSE 16075
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16042: LD_VAR 0 1
16046: PPUSH
16047: LD_VAR 0 2
16051: PPUSH
16052: LD_VAR 0 3
16056: PPUSH
16057: LD_INT 3
16059: PPUSH
16060: LD_INT 6
16062: PPUSH
16063: CALL_OW 12
16067: PPUSH
16068: LD_INT 1
16070: PPUSH
16071: CALL_OW 483
// end ;
16075: GO 15935
16077: POP
16078: POP
// end ;
16079: PPOPN 5
16081: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16082: LD_EXP 22
16086: PUSH
16087: LD_EXP 57
16091: AND
16092: IFFALSE 16186
16094: GO 16096
16096: DISABLE
16097: LD_INT 0
16099: PPUSH
16100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16101: LD_ADDR_VAR 0 2
16105: PUSH
16106: LD_INT 22
16108: PUSH
16109: LD_OWVAR 2
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 32
16120: PUSH
16121: LD_INT 1
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 21
16130: PUSH
16131: LD_INT 2
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: LIST
16142: PPUSH
16143: CALL_OW 69
16147: ST_TO_ADDR
// if not tmp then
16148: LD_VAR 0 2
16152: NOT
16153: IFFALSE 16157
// exit ;
16155: GO 16186
// for i in tmp do
16157: LD_ADDR_VAR 0 1
16161: PUSH
16162: LD_VAR 0 2
16166: PUSH
16167: FOR_IN
16168: IFFALSE 16184
// SetFuel ( i , 0 ) ;
16170: LD_VAR 0 1
16174: PPUSH
16175: LD_INT 0
16177: PPUSH
16178: CALL_OW 240
16182: GO 16167
16184: POP
16185: POP
// end ;
16186: PPOPN 2
16188: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16189: LD_EXP 22
16193: PUSH
16194: LD_EXP 58
16198: AND
16199: IFFALSE 16265
16201: GO 16203
16203: DISABLE
16204: LD_INT 0
16206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16207: LD_ADDR_VAR 0 1
16211: PUSH
16212: LD_INT 22
16214: PUSH
16215: LD_OWVAR 2
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: LD_INT 30
16226: PUSH
16227: LD_INT 29
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PPUSH
16238: CALL_OW 69
16242: ST_TO_ADDR
// if not tmp then
16243: LD_VAR 0 1
16247: NOT
16248: IFFALSE 16252
// exit ;
16250: GO 16265
// DestroyUnit ( tmp [ 1 ] ) ;
16252: LD_VAR 0 1
16256: PUSH
16257: LD_INT 1
16259: ARRAY
16260: PPUSH
16261: CALL_OW 65
// end ;
16265: PPOPN 1
16267: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16268: LD_EXP 22
16272: PUSH
16273: LD_EXP 60
16277: AND
16278: IFFALSE 16407
16280: GO 16282
16282: DISABLE
16283: LD_INT 0
16285: PPUSH
// begin uc_side := 0 ;
16286: LD_ADDR_OWVAR 20
16290: PUSH
16291: LD_INT 0
16293: ST_TO_ADDR
// uc_nation := nation_arabian ;
16294: LD_ADDR_OWVAR 21
16298: PUSH
16299: LD_INT 2
16301: ST_TO_ADDR
// hc_gallery :=  ;
16302: LD_ADDR_OWVAR 33
16306: PUSH
16307: LD_STRING 
16309: ST_TO_ADDR
// hc_name :=  ;
16310: LD_ADDR_OWVAR 26
16314: PUSH
16315: LD_STRING 
16317: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16318: LD_INT 1
16320: PPUSH
16321: LD_INT 11
16323: PPUSH
16324: LD_INT 10
16326: PPUSH
16327: CALL_OW 380
// un := CreateHuman ;
16331: LD_ADDR_VAR 0 1
16335: PUSH
16336: CALL_OW 44
16340: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16341: LD_VAR 0 1
16345: PPUSH
16346: LD_INT 1
16348: PPUSH
16349: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16353: LD_INT 35
16355: PPUSH
16356: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16360: LD_VAR 0 1
16364: PPUSH
16365: LD_INT 22
16367: PUSH
16368: LD_OWVAR 2
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PPUSH
16377: CALL_OW 69
16381: PPUSH
16382: LD_VAR 0 1
16386: PPUSH
16387: CALL_OW 74
16391: PPUSH
16392: CALL_OW 115
// until IsDead ( un ) ;
16396: LD_VAR 0 1
16400: PPUSH
16401: CALL_OW 301
16405: IFFALSE 16353
// end ;
16407: PPOPN 1
16409: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16410: LD_EXP 22
16414: PUSH
16415: LD_EXP 62
16419: AND
16420: IFFALSE 16432
16422: GO 16424
16424: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16425: LD_STRING earthquake(getX(game), 0, 32)
16427: PPUSH
16428: CALL_OW 559
16432: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16433: LD_EXP 22
16437: PUSH
16438: LD_EXP 63
16442: AND
16443: IFFALSE 16534
16445: GO 16447
16447: DISABLE
16448: LD_INT 0
16450: PPUSH
// begin enable ;
16451: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16452: LD_ADDR_VAR 0 1
16456: PUSH
16457: LD_INT 22
16459: PUSH
16460: LD_OWVAR 2
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 21
16471: PUSH
16472: LD_INT 2
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 33
16481: PUSH
16482: LD_INT 3
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: PPUSH
16494: CALL_OW 69
16498: ST_TO_ADDR
// if not tmp then
16499: LD_VAR 0 1
16503: NOT
16504: IFFALSE 16508
// exit ;
16506: GO 16534
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16508: LD_VAR 0 1
16512: PUSH
16513: LD_INT 1
16515: PPUSH
16516: LD_VAR 0 1
16520: PPUSH
16521: CALL_OW 12
16525: ARRAY
16526: PPUSH
16527: LD_INT 1
16529: PPUSH
16530: CALL_OW 234
// end ;
16534: PPOPN 1
16536: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16537: LD_EXP 22
16541: PUSH
16542: LD_EXP 64
16546: AND
16547: IFFALSE 16688
16549: GO 16551
16551: DISABLE
16552: LD_INT 0
16554: PPUSH
16555: PPUSH
16556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16557: LD_ADDR_VAR 0 3
16561: PUSH
16562: LD_INT 22
16564: PUSH
16565: LD_OWVAR 2
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: PUSH
16574: LD_INT 25
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PPUSH
16588: CALL_OW 69
16592: ST_TO_ADDR
// if not tmp then
16593: LD_VAR 0 3
16597: NOT
16598: IFFALSE 16602
// exit ;
16600: GO 16688
// un := tmp [ rand ( 1 , tmp ) ] ;
16602: LD_ADDR_VAR 0 2
16606: PUSH
16607: LD_VAR 0 3
16611: PUSH
16612: LD_INT 1
16614: PPUSH
16615: LD_VAR 0 3
16619: PPUSH
16620: CALL_OW 12
16624: ARRAY
16625: ST_TO_ADDR
// if Crawls ( un ) then
16626: LD_VAR 0 2
16630: PPUSH
16631: CALL_OW 318
16635: IFFALSE 16646
// ComWalk ( un ) ;
16637: LD_VAR 0 2
16641: PPUSH
16642: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16646: LD_VAR 0 2
16650: PPUSH
16651: LD_INT 9
16653: PPUSH
16654: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16658: LD_INT 28
16660: PPUSH
16661: LD_OWVAR 2
16665: PPUSH
16666: LD_INT 2
16668: PPUSH
16669: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16673: LD_INT 29
16675: PPUSH
16676: LD_OWVAR 2
16680: PPUSH
16681: LD_INT 2
16683: PPUSH
16684: CALL_OW 322
// end ;
16688: PPOPN 3
16690: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16691: LD_EXP 22
16695: PUSH
16696: LD_EXP 65
16700: AND
16701: IFFALSE 16812
16703: GO 16705
16705: DISABLE
16706: LD_INT 0
16708: PPUSH
16709: PPUSH
16710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16711: LD_ADDR_VAR 0 3
16715: PUSH
16716: LD_INT 22
16718: PUSH
16719: LD_OWVAR 2
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 25
16730: PUSH
16731: LD_INT 1
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PPUSH
16742: CALL_OW 69
16746: ST_TO_ADDR
// if not tmp then
16747: LD_VAR 0 3
16751: NOT
16752: IFFALSE 16756
// exit ;
16754: GO 16812
// un := tmp [ rand ( 1 , tmp ) ] ;
16756: LD_ADDR_VAR 0 2
16760: PUSH
16761: LD_VAR 0 3
16765: PUSH
16766: LD_INT 1
16768: PPUSH
16769: LD_VAR 0 3
16773: PPUSH
16774: CALL_OW 12
16778: ARRAY
16779: ST_TO_ADDR
// if Crawls ( un ) then
16780: LD_VAR 0 2
16784: PPUSH
16785: CALL_OW 318
16789: IFFALSE 16800
// ComWalk ( un ) ;
16791: LD_VAR 0 2
16795: PPUSH
16796: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16800: LD_VAR 0 2
16804: PPUSH
16805: LD_INT 8
16807: PPUSH
16808: CALL_OW 336
// end ;
16812: PPOPN 3
16814: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16815: LD_EXP 22
16819: PUSH
16820: LD_EXP 66
16824: AND
16825: IFFALSE 16969
16827: GO 16829
16829: DISABLE
16830: LD_INT 0
16832: PPUSH
16833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16834: LD_ADDR_VAR 0 2
16838: PUSH
16839: LD_INT 22
16841: PUSH
16842: LD_OWVAR 2
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: LD_INT 21
16853: PUSH
16854: LD_INT 2
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 2
16863: PUSH
16864: LD_INT 34
16866: PUSH
16867: LD_INT 12
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 34
16876: PUSH
16877: LD_INT 51
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 34
16886: PUSH
16887: LD_INT 32
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: LIST
16904: PPUSH
16905: CALL_OW 69
16909: ST_TO_ADDR
// if not tmp then
16910: LD_VAR 0 2
16914: NOT
16915: IFFALSE 16919
// exit ;
16917: GO 16969
// for i in tmp do
16919: LD_ADDR_VAR 0 1
16923: PUSH
16924: LD_VAR 0 2
16928: PUSH
16929: FOR_IN
16930: IFFALSE 16967
// if GetCargo ( i , mat_artifact ) = 0 then
16932: LD_VAR 0 1
16936: PPUSH
16937: LD_INT 4
16939: PPUSH
16940: CALL_OW 289
16944: PUSH
16945: LD_INT 0
16947: EQUAL
16948: IFFALSE 16965
// SetCargo ( i , mat_siberit , 100 ) ;
16950: LD_VAR 0 1
16954: PPUSH
16955: LD_INT 3
16957: PPUSH
16958: LD_INT 100
16960: PPUSH
16961: CALL_OW 290
16965: GO 16929
16967: POP
16968: POP
// end ;
16969: PPOPN 2
16971: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16972: LD_EXP 22
16976: PUSH
16977: LD_EXP 67
16981: AND
16982: IFFALSE 17165
16984: GO 16986
16986: DISABLE
16987: LD_INT 0
16989: PPUSH
16990: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16991: LD_ADDR_VAR 0 2
16995: PUSH
16996: LD_INT 22
16998: PUSH
16999: LD_OWVAR 2
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PPUSH
17008: CALL_OW 69
17012: ST_TO_ADDR
// if not tmp then
17013: LD_VAR 0 2
17017: NOT
17018: IFFALSE 17022
// exit ;
17020: GO 17165
// for i := 1 to 2 do
17022: LD_ADDR_VAR 0 1
17026: PUSH
17027: DOUBLE
17028: LD_INT 1
17030: DEC
17031: ST_TO_ADDR
17032: LD_INT 2
17034: PUSH
17035: FOR_TO
17036: IFFALSE 17163
// begin uc_side := your_side ;
17038: LD_ADDR_OWVAR 20
17042: PUSH
17043: LD_OWVAR 2
17047: ST_TO_ADDR
// uc_nation := nation_american ;
17048: LD_ADDR_OWVAR 21
17052: PUSH
17053: LD_INT 1
17055: ST_TO_ADDR
// vc_chassis := us_morphling ;
17056: LD_ADDR_OWVAR 37
17060: PUSH
17061: LD_INT 5
17063: ST_TO_ADDR
// vc_engine := engine_siberite ;
17064: LD_ADDR_OWVAR 39
17068: PUSH
17069: LD_INT 3
17071: ST_TO_ADDR
// vc_control := control_computer ;
17072: LD_ADDR_OWVAR 38
17076: PUSH
17077: LD_INT 3
17079: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17080: LD_ADDR_OWVAR 40
17084: PUSH
17085: LD_INT 10
17087: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17088: LD_VAR 0 2
17092: PUSH
17093: LD_INT 1
17095: ARRAY
17096: PPUSH
17097: CALL_OW 310
17101: NOT
17102: IFFALSE 17149
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17104: CALL_OW 45
17108: PPUSH
17109: LD_VAR 0 2
17113: PUSH
17114: LD_INT 1
17116: ARRAY
17117: PPUSH
17118: CALL_OW 250
17122: PPUSH
17123: LD_VAR 0 2
17127: PUSH
17128: LD_INT 1
17130: ARRAY
17131: PPUSH
17132: CALL_OW 251
17136: PPUSH
17137: LD_INT 12
17139: PPUSH
17140: LD_INT 1
17142: PPUSH
17143: CALL_OW 50
17147: GO 17161
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17149: CALL_OW 45
17153: PPUSH
17154: LD_INT 1
17156: PPUSH
17157: CALL_OW 51
// end ;
17161: GO 17035
17163: POP
17164: POP
// end ;
17165: PPOPN 2
17167: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17168: LD_EXP 22
17172: PUSH
17173: LD_EXP 68
17177: AND
17178: IFFALSE 17400
17180: GO 17182
17182: DISABLE
17183: LD_INT 0
17185: PPUSH
17186: PPUSH
17187: PPUSH
17188: PPUSH
17189: PPUSH
17190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17191: LD_ADDR_VAR 0 6
17195: PUSH
17196: LD_INT 22
17198: PUSH
17199: LD_OWVAR 2
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 21
17210: PUSH
17211: LD_INT 1
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 3
17220: PUSH
17221: LD_INT 23
17223: PUSH
17224: LD_INT 0
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: ST_TO_ADDR
// if not tmp then
17245: LD_VAR 0 6
17249: NOT
17250: IFFALSE 17254
// exit ;
17252: GO 17400
// s1 := rand ( 1 , 4 ) ;
17254: LD_ADDR_VAR 0 2
17258: PUSH
17259: LD_INT 1
17261: PPUSH
17262: LD_INT 4
17264: PPUSH
17265: CALL_OW 12
17269: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17270: LD_ADDR_VAR 0 4
17274: PUSH
17275: LD_VAR 0 6
17279: PUSH
17280: LD_INT 1
17282: ARRAY
17283: PPUSH
17284: LD_VAR 0 2
17288: PPUSH
17289: CALL_OW 259
17293: ST_TO_ADDR
// if s1 = 1 then
17294: LD_VAR 0 2
17298: PUSH
17299: LD_INT 1
17301: EQUAL
17302: IFFALSE 17322
// s2 := rand ( 2 , 4 ) else
17304: LD_ADDR_VAR 0 3
17308: PUSH
17309: LD_INT 2
17311: PPUSH
17312: LD_INT 4
17314: PPUSH
17315: CALL_OW 12
17319: ST_TO_ADDR
17320: GO 17330
// s2 := 1 ;
17322: LD_ADDR_VAR 0 3
17326: PUSH
17327: LD_INT 1
17329: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17330: LD_ADDR_VAR 0 5
17334: PUSH
17335: LD_VAR 0 6
17339: PUSH
17340: LD_INT 1
17342: ARRAY
17343: PPUSH
17344: LD_VAR 0 3
17348: PPUSH
17349: CALL_OW 259
17353: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17354: LD_VAR 0 6
17358: PUSH
17359: LD_INT 1
17361: ARRAY
17362: PPUSH
17363: LD_VAR 0 2
17367: PPUSH
17368: LD_VAR 0 5
17372: PPUSH
17373: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17377: LD_VAR 0 6
17381: PUSH
17382: LD_INT 1
17384: ARRAY
17385: PPUSH
17386: LD_VAR 0 3
17390: PPUSH
17391: LD_VAR 0 4
17395: PPUSH
17396: CALL_OW 237
// end ;
17400: PPOPN 6
17402: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17403: LD_EXP 22
17407: PUSH
17408: LD_EXP 69
17412: AND
17413: IFFALSE 17492
17415: GO 17417
17417: DISABLE
17418: LD_INT 0
17420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17421: LD_ADDR_VAR 0 1
17425: PUSH
17426: LD_INT 22
17428: PUSH
17429: LD_OWVAR 2
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: PUSH
17438: LD_INT 30
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PPUSH
17452: CALL_OW 69
17456: ST_TO_ADDR
// if not tmp then
17457: LD_VAR 0 1
17461: NOT
17462: IFFALSE 17466
// exit ;
17464: GO 17492
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17466: LD_VAR 0 1
17470: PUSH
17471: LD_INT 1
17473: PPUSH
17474: LD_VAR 0 1
17478: PPUSH
17479: CALL_OW 12
17483: ARRAY
17484: PPUSH
17485: LD_INT 1
17487: PPUSH
17488: CALL_OW 234
// end ;
17492: PPOPN 1
17494: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17495: LD_EXP 22
17499: PUSH
17500: LD_EXP 70
17504: AND
17505: IFFALSE 17617
17507: GO 17509
17509: DISABLE
17510: LD_INT 0
17512: PPUSH
17513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17514: LD_ADDR_VAR 0 2
17518: PUSH
17519: LD_INT 22
17521: PUSH
17522: LD_OWVAR 2
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 2
17533: PUSH
17534: LD_INT 30
17536: PUSH
17537: LD_INT 27
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 30
17546: PUSH
17547: LD_INT 26
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: LD_INT 30
17556: PUSH
17557: LD_INT 28
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PPUSH
17574: CALL_OW 69
17578: ST_TO_ADDR
// if not tmp then
17579: LD_VAR 0 2
17583: NOT
17584: IFFALSE 17588
// exit ;
17586: GO 17617
// for i in tmp do
17588: LD_ADDR_VAR 0 1
17592: PUSH
17593: LD_VAR 0 2
17597: PUSH
17598: FOR_IN
17599: IFFALSE 17615
// SetLives ( i , 1 ) ;
17601: LD_VAR 0 1
17605: PPUSH
17606: LD_INT 1
17608: PPUSH
17609: CALL_OW 234
17613: GO 17598
17615: POP
17616: POP
// end ;
17617: PPOPN 2
17619: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17620: LD_EXP 22
17624: PUSH
17625: LD_EXP 71
17629: AND
17630: IFFALSE 17904
17632: GO 17634
17634: DISABLE
17635: LD_INT 0
17637: PPUSH
17638: PPUSH
17639: PPUSH
// begin i := rand ( 1 , 7 ) ;
17640: LD_ADDR_VAR 0 1
17644: PUSH
17645: LD_INT 1
17647: PPUSH
17648: LD_INT 7
17650: PPUSH
17651: CALL_OW 12
17655: ST_TO_ADDR
// case i of 1 :
17656: LD_VAR 0 1
17660: PUSH
17661: LD_INT 1
17663: DOUBLE
17664: EQUAL
17665: IFTRUE 17669
17667: GO 17679
17669: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17670: LD_STRING earthquake(getX(game), 0, 32)
17672: PPUSH
17673: CALL_OW 559
17677: GO 17904
17679: LD_INT 2
17681: DOUBLE
17682: EQUAL
17683: IFTRUE 17687
17685: GO 17701
17687: POP
// begin ToLua ( displayStucuk(); ) ;
17688: LD_STRING displayStucuk();
17690: PPUSH
17691: CALL_OW 559
// ResetFog ;
17695: CALL_OW 335
// end ; 3 :
17699: GO 17904
17701: LD_INT 3
17703: DOUBLE
17704: EQUAL
17705: IFTRUE 17709
17707: GO 17813
17709: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17710: LD_ADDR_VAR 0 2
17714: PUSH
17715: LD_INT 22
17717: PUSH
17718: LD_OWVAR 2
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 25
17729: PUSH
17730: LD_INT 1
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PPUSH
17741: CALL_OW 69
17745: ST_TO_ADDR
// if not tmp then
17746: LD_VAR 0 2
17750: NOT
17751: IFFALSE 17755
// exit ;
17753: GO 17904
// un := tmp [ rand ( 1 , tmp ) ] ;
17755: LD_ADDR_VAR 0 3
17759: PUSH
17760: LD_VAR 0 2
17764: PUSH
17765: LD_INT 1
17767: PPUSH
17768: LD_VAR 0 2
17772: PPUSH
17773: CALL_OW 12
17777: ARRAY
17778: ST_TO_ADDR
// if Crawls ( un ) then
17779: LD_VAR 0 3
17783: PPUSH
17784: CALL_OW 318
17788: IFFALSE 17799
// ComWalk ( un ) ;
17790: LD_VAR 0 3
17794: PPUSH
17795: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17799: LD_VAR 0 3
17803: PPUSH
17804: LD_INT 8
17806: PPUSH
17807: CALL_OW 336
// end ; 4 :
17811: GO 17904
17813: LD_INT 4
17815: DOUBLE
17816: EQUAL
17817: IFTRUE 17821
17819: GO 17882
17821: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17822: LD_ADDR_VAR 0 2
17826: PUSH
17827: LD_INT 22
17829: PUSH
17830: LD_OWVAR 2
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PUSH
17839: LD_INT 30
17841: PUSH
17842: LD_INT 29
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PPUSH
17853: CALL_OW 69
17857: ST_TO_ADDR
// if not tmp then
17858: LD_VAR 0 2
17862: NOT
17863: IFFALSE 17867
// exit ;
17865: GO 17904
// DestroyUnit ( tmp [ 1 ] ) ;
17867: LD_VAR 0 2
17871: PUSH
17872: LD_INT 1
17874: ARRAY
17875: PPUSH
17876: CALL_OW 65
// end ; 5 .. 7 :
17880: GO 17904
17882: LD_INT 5
17884: DOUBLE
17885: GREATEREQUAL
17886: IFFALSE 17894
17888: LD_INT 7
17890: DOUBLE
17891: LESSEQUAL
17892: IFTRUE 17896
17894: GO 17903
17896: POP
// StreamSibBomb ; end ;
17897: CALL 14154 0 0
17901: GO 17904
17903: POP
// end ;
17904: PPOPN 3
17906: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17907: LD_EXP 22
17911: PUSH
17912: LD_EXP 72
17916: AND
17917: IFFALSE 18073
17919: GO 17921
17921: DISABLE
17922: LD_INT 0
17924: PPUSH
17925: PPUSH
17926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17927: LD_ADDR_VAR 0 2
17931: PUSH
17932: LD_INT 81
17934: PUSH
17935: LD_OWVAR 2
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 2
17946: PUSH
17947: LD_INT 21
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 21
17959: PUSH
17960: LD_INT 2
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: LIST
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PPUSH
17976: CALL_OW 69
17980: ST_TO_ADDR
// if not tmp then
17981: LD_VAR 0 2
17985: NOT
17986: IFFALSE 17990
// exit ;
17988: GO 18073
// p := 0 ;
17990: LD_ADDR_VAR 0 3
17994: PUSH
17995: LD_INT 0
17997: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17998: LD_INT 35
18000: PPUSH
18001: CALL_OW 67
// p := p + 1 ;
18005: LD_ADDR_VAR 0 3
18009: PUSH
18010: LD_VAR 0 3
18014: PUSH
18015: LD_INT 1
18017: PLUS
18018: ST_TO_ADDR
// for i in tmp do
18019: LD_ADDR_VAR 0 1
18023: PUSH
18024: LD_VAR 0 2
18028: PUSH
18029: FOR_IN
18030: IFFALSE 18061
// if GetLives ( i ) < 1000 then
18032: LD_VAR 0 1
18036: PPUSH
18037: CALL_OW 256
18041: PUSH
18042: LD_INT 1000
18044: LESS
18045: IFFALSE 18059
// SetLives ( i , 1000 ) ;
18047: LD_VAR 0 1
18051: PPUSH
18052: LD_INT 1000
18054: PPUSH
18055: CALL_OW 234
18059: GO 18029
18061: POP
18062: POP
// until p > 20 ;
18063: LD_VAR 0 3
18067: PUSH
18068: LD_INT 20
18070: GREATER
18071: IFFALSE 17998
// end ;
18073: PPOPN 3
18075: END
// every 0 0$1 trigger StreamModeActive and sTime do
18076: LD_EXP 22
18080: PUSH
18081: LD_EXP 73
18085: AND
18086: IFFALSE 18121
18088: GO 18090
18090: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18091: LD_INT 28
18093: PPUSH
18094: LD_OWVAR 2
18098: PPUSH
18099: LD_INT 2
18101: PPUSH
18102: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18106: LD_INT 30
18108: PPUSH
18109: LD_OWVAR 2
18113: PPUSH
18114: LD_INT 2
18116: PPUSH
18117: CALL_OW 322
// end ;
18121: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18122: LD_EXP 22
18126: PUSH
18127: LD_EXP 74
18131: AND
18132: IFFALSE 18253
18134: GO 18136
18136: DISABLE
18137: LD_INT 0
18139: PPUSH
18140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18141: LD_ADDR_VAR 0 2
18145: PUSH
18146: LD_INT 22
18148: PUSH
18149: LD_OWVAR 2
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 21
18160: PUSH
18161: LD_INT 1
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 3
18170: PUSH
18171: LD_INT 23
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: LIST
18189: PPUSH
18190: CALL_OW 69
18194: ST_TO_ADDR
// if not tmp then
18195: LD_VAR 0 2
18199: NOT
18200: IFFALSE 18204
// exit ;
18202: GO 18253
// for i in tmp do
18204: LD_ADDR_VAR 0 1
18208: PUSH
18209: LD_VAR 0 2
18213: PUSH
18214: FOR_IN
18215: IFFALSE 18251
// begin if Crawls ( i ) then
18217: LD_VAR 0 1
18221: PPUSH
18222: CALL_OW 318
18226: IFFALSE 18237
// ComWalk ( i ) ;
18228: LD_VAR 0 1
18232: PPUSH
18233: CALL_OW 138
// SetClass ( i , 2 ) ;
18237: LD_VAR 0 1
18241: PPUSH
18242: LD_INT 2
18244: PPUSH
18245: CALL_OW 336
// end ;
18249: GO 18214
18251: POP
18252: POP
// end ;
18253: PPOPN 2
18255: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18256: LD_EXP 22
18260: PUSH
18261: LD_EXP 75
18265: AND
18266: IFFALSE 18547
18268: GO 18270
18270: DISABLE
18271: LD_INT 0
18273: PPUSH
18274: PPUSH
18275: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18276: LD_OWVAR 2
18280: PPUSH
18281: LD_INT 9
18283: PPUSH
18284: LD_INT 1
18286: PPUSH
18287: LD_INT 1
18289: PPUSH
18290: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18294: LD_INT 9
18296: PPUSH
18297: LD_OWVAR 2
18301: PPUSH
18302: CALL_OW 343
// uc_side := 9 ;
18306: LD_ADDR_OWVAR 20
18310: PUSH
18311: LD_INT 9
18313: ST_TO_ADDR
// uc_nation := 2 ;
18314: LD_ADDR_OWVAR 21
18318: PUSH
18319: LD_INT 2
18321: ST_TO_ADDR
// hc_name := Dark Warrior ;
18322: LD_ADDR_OWVAR 26
18326: PUSH
18327: LD_STRING Dark Warrior
18329: ST_TO_ADDR
// hc_gallery :=  ;
18330: LD_ADDR_OWVAR 33
18334: PUSH
18335: LD_STRING 
18337: ST_TO_ADDR
// hc_noskilllimit := true ;
18338: LD_ADDR_OWVAR 76
18342: PUSH
18343: LD_INT 1
18345: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18346: LD_ADDR_OWVAR 31
18350: PUSH
18351: LD_INT 30
18353: PUSH
18354: LD_INT 30
18356: PUSH
18357: LD_INT 30
18359: PUSH
18360: LD_INT 30
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: ST_TO_ADDR
// un := CreateHuman ;
18369: LD_ADDR_VAR 0 3
18373: PUSH
18374: CALL_OW 44
18378: ST_TO_ADDR
// hc_noskilllimit := false ;
18379: LD_ADDR_OWVAR 76
18383: PUSH
18384: LD_INT 0
18386: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18387: LD_VAR 0 3
18391: PPUSH
18392: LD_INT 1
18394: PPUSH
18395: CALL_OW 51
// p := 0 ;
18399: LD_ADDR_VAR 0 2
18403: PUSH
18404: LD_INT 0
18406: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18407: LD_INT 35
18409: PPUSH
18410: CALL_OW 67
// p := p + 1 ;
18414: LD_ADDR_VAR 0 2
18418: PUSH
18419: LD_VAR 0 2
18423: PUSH
18424: LD_INT 1
18426: PLUS
18427: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18428: LD_VAR 0 3
18432: PPUSH
18433: CALL_OW 256
18437: PUSH
18438: LD_INT 1000
18440: LESS
18441: IFFALSE 18455
// SetLives ( un , 1000 ) ;
18443: LD_VAR 0 3
18447: PPUSH
18448: LD_INT 1000
18450: PPUSH
18451: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18455: LD_VAR 0 3
18459: PPUSH
18460: LD_INT 81
18462: PUSH
18463: LD_OWVAR 2
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 91
18474: PUSH
18475: LD_VAR 0 3
18479: PUSH
18480: LD_INT 30
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PPUSH
18492: CALL_OW 69
18496: PPUSH
18497: LD_VAR 0 3
18501: PPUSH
18502: CALL_OW 74
18506: PPUSH
18507: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18511: LD_VAR 0 2
18515: PUSH
18516: LD_INT 60
18518: GREATER
18519: PUSH
18520: LD_VAR 0 3
18524: PPUSH
18525: CALL_OW 301
18529: OR
18530: IFFALSE 18407
// if un then
18532: LD_VAR 0 3
18536: IFFALSE 18547
// RemoveUnit ( un ) ;
18538: LD_VAR 0 3
18542: PPUSH
18543: CALL_OW 64
// end ;
18547: PPOPN 3
18549: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18550: LD_INT 0
18552: PPUSH
// case cmd of 301 :
18553: LD_VAR 0 1
18557: PUSH
18558: LD_INT 301
18560: DOUBLE
18561: EQUAL
18562: IFTRUE 18566
18564: GO 18598
18566: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18567: LD_VAR 0 6
18571: PPUSH
18572: LD_VAR 0 7
18576: PPUSH
18577: LD_VAR 0 8
18581: PPUSH
18582: LD_VAR 0 4
18586: PPUSH
18587: LD_VAR 0 5
18591: PPUSH
18592: CALL 19799 0 5
18596: GO 18719
18598: LD_INT 302
18600: DOUBLE
18601: EQUAL
18602: IFTRUE 18606
18604: GO 18643
18606: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18607: LD_VAR 0 6
18611: PPUSH
18612: LD_VAR 0 7
18616: PPUSH
18617: LD_VAR 0 8
18621: PPUSH
18622: LD_VAR 0 9
18626: PPUSH
18627: LD_VAR 0 4
18631: PPUSH
18632: LD_VAR 0 5
18636: PPUSH
18637: CALL 19890 0 6
18641: GO 18719
18643: LD_INT 303
18645: DOUBLE
18646: EQUAL
18647: IFTRUE 18651
18649: GO 18688
18651: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18652: LD_VAR 0 6
18656: PPUSH
18657: LD_VAR 0 7
18661: PPUSH
18662: LD_VAR 0 8
18666: PPUSH
18667: LD_VAR 0 9
18671: PPUSH
18672: LD_VAR 0 4
18676: PPUSH
18677: LD_VAR 0 5
18681: PPUSH
18682: CALL 18724 0 6
18686: GO 18719
18688: LD_INT 304
18690: DOUBLE
18691: EQUAL
18692: IFTRUE 18696
18694: GO 18718
18696: POP
// hHackTeleport ( unit , x , y ) ; end ;
18697: LD_VAR 0 2
18701: PPUSH
18702: LD_VAR 0 4
18706: PPUSH
18707: LD_VAR 0 5
18711: PPUSH
18712: CALL 20483 0 3
18716: GO 18719
18718: POP
// end ;
18719: LD_VAR 0 12
18723: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18724: LD_INT 0
18726: PPUSH
18727: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18728: LD_VAR 0 1
18732: PUSH
18733: LD_INT 1
18735: LESS
18736: PUSH
18737: LD_VAR 0 1
18741: PUSH
18742: LD_INT 3
18744: GREATER
18745: OR
18746: PUSH
18747: LD_VAR 0 5
18751: PPUSH
18752: LD_VAR 0 6
18756: PPUSH
18757: CALL_OW 428
18761: OR
18762: IFFALSE 18766
// exit ;
18764: GO 19486
// uc_side := your_side ;
18766: LD_ADDR_OWVAR 20
18770: PUSH
18771: LD_OWVAR 2
18775: ST_TO_ADDR
// uc_nation := nation ;
18776: LD_ADDR_OWVAR 21
18780: PUSH
18781: LD_VAR 0 1
18785: ST_TO_ADDR
// bc_level = 1 ;
18786: LD_ADDR_OWVAR 43
18790: PUSH
18791: LD_INT 1
18793: ST_TO_ADDR
// case btype of 1 :
18794: LD_VAR 0 2
18798: PUSH
18799: LD_INT 1
18801: DOUBLE
18802: EQUAL
18803: IFTRUE 18807
18805: GO 18818
18807: POP
// bc_type := b_depot ; 2 :
18808: LD_ADDR_OWVAR 42
18812: PUSH
18813: LD_INT 0
18815: ST_TO_ADDR
18816: GO 19430
18818: LD_INT 2
18820: DOUBLE
18821: EQUAL
18822: IFTRUE 18826
18824: GO 18837
18826: POP
// bc_type := b_warehouse ; 3 :
18827: LD_ADDR_OWVAR 42
18831: PUSH
18832: LD_INT 1
18834: ST_TO_ADDR
18835: GO 19430
18837: LD_INT 3
18839: DOUBLE
18840: EQUAL
18841: IFTRUE 18845
18843: GO 18856
18845: POP
// bc_type := b_lab ; 4 .. 9 :
18846: LD_ADDR_OWVAR 42
18850: PUSH
18851: LD_INT 6
18853: ST_TO_ADDR
18854: GO 19430
18856: LD_INT 4
18858: DOUBLE
18859: GREATEREQUAL
18860: IFFALSE 18868
18862: LD_INT 9
18864: DOUBLE
18865: LESSEQUAL
18866: IFTRUE 18870
18868: GO 18922
18870: POP
// begin bc_type := b_lab_half ;
18871: LD_ADDR_OWVAR 42
18875: PUSH
18876: LD_INT 7
18878: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18879: LD_ADDR_OWVAR 44
18883: PUSH
18884: LD_INT 10
18886: PUSH
18887: LD_INT 11
18889: PUSH
18890: LD_INT 12
18892: PUSH
18893: LD_INT 15
18895: PUSH
18896: LD_INT 14
18898: PUSH
18899: LD_INT 13
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: PUSH
18910: LD_VAR 0 2
18914: PUSH
18915: LD_INT 3
18917: MINUS
18918: ARRAY
18919: ST_TO_ADDR
// end ; 10 .. 13 :
18920: GO 19430
18922: LD_INT 10
18924: DOUBLE
18925: GREATEREQUAL
18926: IFFALSE 18934
18928: LD_INT 13
18930: DOUBLE
18931: LESSEQUAL
18932: IFTRUE 18936
18934: GO 19013
18936: POP
// begin bc_type := b_lab_full ;
18937: LD_ADDR_OWVAR 42
18941: PUSH
18942: LD_INT 8
18944: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18945: LD_ADDR_OWVAR 44
18949: PUSH
18950: LD_INT 10
18952: PUSH
18953: LD_INT 12
18955: PUSH
18956: LD_INT 14
18958: PUSH
18959: LD_INT 13
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: PUSH
18968: LD_VAR 0 2
18972: PUSH
18973: LD_INT 9
18975: MINUS
18976: ARRAY
18977: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18978: LD_ADDR_OWVAR 45
18982: PUSH
18983: LD_INT 11
18985: PUSH
18986: LD_INT 15
18988: PUSH
18989: LD_INT 12
18991: PUSH
18992: LD_INT 15
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: PUSH
19001: LD_VAR 0 2
19005: PUSH
19006: LD_INT 9
19008: MINUS
19009: ARRAY
19010: ST_TO_ADDR
// end ; 14 :
19011: GO 19430
19013: LD_INT 14
19015: DOUBLE
19016: EQUAL
19017: IFTRUE 19021
19019: GO 19032
19021: POP
// bc_type := b_workshop ; 15 :
19022: LD_ADDR_OWVAR 42
19026: PUSH
19027: LD_INT 2
19029: ST_TO_ADDR
19030: GO 19430
19032: LD_INT 15
19034: DOUBLE
19035: EQUAL
19036: IFTRUE 19040
19038: GO 19051
19040: POP
// bc_type := b_factory ; 16 :
19041: LD_ADDR_OWVAR 42
19045: PUSH
19046: LD_INT 3
19048: ST_TO_ADDR
19049: GO 19430
19051: LD_INT 16
19053: DOUBLE
19054: EQUAL
19055: IFTRUE 19059
19057: GO 19070
19059: POP
// bc_type := b_ext_gun ; 17 :
19060: LD_ADDR_OWVAR 42
19064: PUSH
19065: LD_INT 17
19067: ST_TO_ADDR
19068: GO 19430
19070: LD_INT 17
19072: DOUBLE
19073: EQUAL
19074: IFTRUE 19078
19076: GO 19106
19078: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19079: LD_ADDR_OWVAR 42
19083: PUSH
19084: LD_INT 19
19086: PUSH
19087: LD_INT 23
19089: PUSH
19090: LD_INT 19
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: LIST
19097: PUSH
19098: LD_VAR 0 1
19102: ARRAY
19103: ST_TO_ADDR
19104: GO 19430
19106: LD_INT 18
19108: DOUBLE
19109: EQUAL
19110: IFTRUE 19114
19112: GO 19125
19114: POP
// bc_type := b_ext_radar ; 19 :
19115: LD_ADDR_OWVAR 42
19119: PUSH
19120: LD_INT 20
19122: ST_TO_ADDR
19123: GO 19430
19125: LD_INT 19
19127: DOUBLE
19128: EQUAL
19129: IFTRUE 19133
19131: GO 19144
19133: POP
// bc_type := b_ext_radio ; 20 :
19134: LD_ADDR_OWVAR 42
19138: PUSH
19139: LD_INT 22
19141: ST_TO_ADDR
19142: GO 19430
19144: LD_INT 20
19146: DOUBLE
19147: EQUAL
19148: IFTRUE 19152
19150: GO 19163
19152: POP
// bc_type := b_ext_siberium ; 21 :
19153: LD_ADDR_OWVAR 42
19157: PUSH
19158: LD_INT 21
19160: ST_TO_ADDR
19161: GO 19430
19163: LD_INT 21
19165: DOUBLE
19166: EQUAL
19167: IFTRUE 19171
19169: GO 19182
19171: POP
// bc_type := b_ext_computer ; 22 :
19172: LD_ADDR_OWVAR 42
19176: PUSH
19177: LD_INT 24
19179: ST_TO_ADDR
19180: GO 19430
19182: LD_INT 22
19184: DOUBLE
19185: EQUAL
19186: IFTRUE 19190
19188: GO 19201
19190: POP
// bc_type := b_ext_track ; 23 :
19191: LD_ADDR_OWVAR 42
19195: PUSH
19196: LD_INT 16
19198: ST_TO_ADDR
19199: GO 19430
19201: LD_INT 23
19203: DOUBLE
19204: EQUAL
19205: IFTRUE 19209
19207: GO 19220
19209: POP
// bc_type := b_ext_laser ; 24 :
19210: LD_ADDR_OWVAR 42
19214: PUSH
19215: LD_INT 25
19217: ST_TO_ADDR
19218: GO 19430
19220: LD_INT 24
19222: DOUBLE
19223: EQUAL
19224: IFTRUE 19228
19226: GO 19239
19228: POP
// bc_type := b_control_tower ; 25 :
19229: LD_ADDR_OWVAR 42
19233: PUSH
19234: LD_INT 36
19236: ST_TO_ADDR
19237: GO 19430
19239: LD_INT 25
19241: DOUBLE
19242: EQUAL
19243: IFTRUE 19247
19245: GO 19258
19247: POP
// bc_type := b_breastwork ; 26 :
19248: LD_ADDR_OWVAR 42
19252: PUSH
19253: LD_INT 31
19255: ST_TO_ADDR
19256: GO 19430
19258: LD_INT 26
19260: DOUBLE
19261: EQUAL
19262: IFTRUE 19266
19264: GO 19277
19266: POP
// bc_type := b_bunker ; 27 :
19267: LD_ADDR_OWVAR 42
19271: PUSH
19272: LD_INT 32
19274: ST_TO_ADDR
19275: GO 19430
19277: LD_INT 27
19279: DOUBLE
19280: EQUAL
19281: IFTRUE 19285
19283: GO 19296
19285: POP
// bc_type := b_turret ; 28 :
19286: LD_ADDR_OWVAR 42
19290: PUSH
19291: LD_INT 33
19293: ST_TO_ADDR
19294: GO 19430
19296: LD_INT 28
19298: DOUBLE
19299: EQUAL
19300: IFTRUE 19304
19302: GO 19315
19304: POP
// bc_type := b_armoury ; 29 :
19305: LD_ADDR_OWVAR 42
19309: PUSH
19310: LD_INT 4
19312: ST_TO_ADDR
19313: GO 19430
19315: LD_INT 29
19317: DOUBLE
19318: EQUAL
19319: IFTRUE 19323
19321: GO 19334
19323: POP
// bc_type := b_barracks ; 30 :
19324: LD_ADDR_OWVAR 42
19328: PUSH
19329: LD_INT 5
19331: ST_TO_ADDR
19332: GO 19430
19334: LD_INT 30
19336: DOUBLE
19337: EQUAL
19338: IFTRUE 19342
19340: GO 19353
19342: POP
// bc_type := b_solar_power ; 31 :
19343: LD_ADDR_OWVAR 42
19347: PUSH
19348: LD_INT 27
19350: ST_TO_ADDR
19351: GO 19430
19353: LD_INT 31
19355: DOUBLE
19356: EQUAL
19357: IFTRUE 19361
19359: GO 19372
19361: POP
// bc_type := b_oil_power ; 32 :
19362: LD_ADDR_OWVAR 42
19366: PUSH
19367: LD_INT 26
19369: ST_TO_ADDR
19370: GO 19430
19372: LD_INT 32
19374: DOUBLE
19375: EQUAL
19376: IFTRUE 19380
19378: GO 19391
19380: POP
// bc_type := b_siberite_power ; 33 :
19381: LD_ADDR_OWVAR 42
19385: PUSH
19386: LD_INT 28
19388: ST_TO_ADDR
19389: GO 19430
19391: LD_INT 33
19393: DOUBLE
19394: EQUAL
19395: IFTRUE 19399
19397: GO 19410
19399: POP
// bc_type := b_oil_mine ; 34 :
19400: LD_ADDR_OWVAR 42
19404: PUSH
19405: LD_INT 29
19407: ST_TO_ADDR
19408: GO 19430
19410: LD_INT 34
19412: DOUBLE
19413: EQUAL
19414: IFTRUE 19418
19416: GO 19429
19418: POP
// bc_type := b_siberite_mine ; end ;
19419: LD_ADDR_OWVAR 42
19423: PUSH
19424: LD_INT 30
19426: ST_TO_ADDR
19427: GO 19430
19429: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19430: LD_ADDR_VAR 0 8
19434: PUSH
19435: LD_VAR 0 5
19439: PPUSH
19440: LD_VAR 0 6
19444: PPUSH
19445: LD_VAR 0 3
19449: PPUSH
19450: CALL_OW 47
19454: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19455: LD_OWVAR 42
19459: PUSH
19460: LD_INT 32
19462: PUSH
19463: LD_INT 33
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: IN
19470: IFFALSE 19486
// PlaceWeaponTurret ( b , weapon ) ;
19472: LD_VAR 0 8
19476: PPUSH
19477: LD_VAR 0 4
19481: PPUSH
19482: CALL_OW 431
// end ;
19486: LD_VAR 0 7
19490: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19491: LD_INT 0
19493: PPUSH
19494: PPUSH
19495: PPUSH
19496: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19497: LD_ADDR_VAR 0 4
19501: PUSH
19502: LD_INT 22
19504: PUSH
19505: LD_OWVAR 2
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: LD_INT 30
19519: PUSH
19520: LD_INT 0
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 30
19529: PUSH
19530: LD_INT 1
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: LIST
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PPUSH
19546: CALL_OW 69
19550: ST_TO_ADDR
// if not tmp then
19551: LD_VAR 0 4
19555: NOT
19556: IFFALSE 19560
// exit ;
19558: GO 19619
// for i in tmp do
19560: LD_ADDR_VAR 0 2
19564: PUSH
19565: LD_VAR 0 4
19569: PUSH
19570: FOR_IN
19571: IFFALSE 19617
// for j = 1 to 3 do
19573: LD_ADDR_VAR 0 3
19577: PUSH
19578: DOUBLE
19579: LD_INT 1
19581: DEC
19582: ST_TO_ADDR
19583: LD_INT 3
19585: PUSH
19586: FOR_TO
19587: IFFALSE 19613
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19589: LD_VAR 0 2
19593: PPUSH
19594: CALL_OW 274
19598: PPUSH
19599: LD_VAR 0 3
19603: PPUSH
19604: LD_INT 99999
19606: PPUSH
19607: CALL_OW 277
19611: GO 19586
19613: POP
19614: POP
19615: GO 19570
19617: POP
19618: POP
// end ;
19619: LD_VAR 0 1
19623: RET
// export function hHackSetLevel10 ; var i , j ; begin
19624: LD_INT 0
19626: PPUSH
19627: PPUSH
19628: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19629: LD_ADDR_VAR 0 2
19633: PUSH
19634: LD_INT 21
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PPUSH
19644: CALL_OW 69
19648: PUSH
19649: FOR_IN
19650: IFFALSE 19702
// if IsSelected ( i ) then
19652: LD_VAR 0 2
19656: PPUSH
19657: CALL_OW 306
19661: IFFALSE 19700
// begin for j := 1 to 4 do
19663: LD_ADDR_VAR 0 3
19667: PUSH
19668: DOUBLE
19669: LD_INT 1
19671: DEC
19672: ST_TO_ADDR
19673: LD_INT 4
19675: PUSH
19676: FOR_TO
19677: IFFALSE 19698
// SetSkill ( i , j , 10 ) ;
19679: LD_VAR 0 2
19683: PPUSH
19684: LD_VAR 0 3
19688: PPUSH
19689: LD_INT 10
19691: PPUSH
19692: CALL_OW 237
19696: GO 19676
19698: POP
19699: POP
// end ;
19700: GO 19649
19702: POP
19703: POP
// end ;
19704: LD_VAR 0 1
19708: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19709: LD_INT 0
19711: PPUSH
19712: PPUSH
19713: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19714: LD_ADDR_VAR 0 2
19718: PUSH
19719: LD_INT 22
19721: PUSH
19722: LD_OWVAR 2
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 21
19733: PUSH
19734: LD_INT 1
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PPUSH
19745: CALL_OW 69
19749: PUSH
19750: FOR_IN
19751: IFFALSE 19792
// begin for j := 1 to 4 do
19753: LD_ADDR_VAR 0 3
19757: PUSH
19758: DOUBLE
19759: LD_INT 1
19761: DEC
19762: ST_TO_ADDR
19763: LD_INT 4
19765: PUSH
19766: FOR_TO
19767: IFFALSE 19788
// SetSkill ( i , j , 10 ) ;
19769: LD_VAR 0 2
19773: PPUSH
19774: LD_VAR 0 3
19778: PPUSH
19779: LD_INT 10
19781: PPUSH
19782: CALL_OW 237
19786: GO 19766
19788: POP
19789: POP
// end ;
19790: GO 19750
19792: POP
19793: POP
// end ;
19794: LD_VAR 0 1
19798: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19799: LD_INT 0
19801: PPUSH
// uc_side := your_side ;
19802: LD_ADDR_OWVAR 20
19806: PUSH
19807: LD_OWVAR 2
19811: ST_TO_ADDR
// uc_nation := nation ;
19812: LD_ADDR_OWVAR 21
19816: PUSH
19817: LD_VAR 0 1
19821: ST_TO_ADDR
// InitHc ;
19822: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19826: LD_INT 0
19828: PPUSH
19829: LD_VAR 0 2
19833: PPUSH
19834: LD_VAR 0 3
19838: PPUSH
19839: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19843: LD_VAR 0 4
19847: PPUSH
19848: LD_VAR 0 5
19852: PPUSH
19853: CALL_OW 428
19857: PUSH
19858: LD_INT 0
19860: EQUAL
19861: IFFALSE 19885
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19863: CALL_OW 44
19867: PPUSH
19868: LD_VAR 0 4
19872: PPUSH
19873: LD_VAR 0 5
19877: PPUSH
19878: LD_INT 1
19880: PPUSH
19881: CALL_OW 48
// end ;
19885: LD_VAR 0 6
19889: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19890: LD_INT 0
19892: PPUSH
19893: PPUSH
// uc_side := your_side ;
19894: LD_ADDR_OWVAR 20
19898: PUSH
19899: LD_OWVAR 2
19903: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19904: LD_VAR 0 1
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: LD_INT 2
19914: PUSH
19915: LD_INT 3
19917: PUSH
19918: LD_INT 4
19920: PUSH
19921: LD_INT 5
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: IN
19931: IFFALSE 19943
// uc_nation := nation_american else
19933: LD_ADDR_OWVAR 21
19937: PUSH
19938: LD_INT 1
19940: ST_TO_ADDR
19941: GO 19986
// if chassis in [ 11 , 12 , 13 , 14 ] then
19943: LD_VAR 0 1
19947: PUSH
19948: LD_INT 11
19950: PUSH
19951: LD_INT 12
19953: PUSH
19954: LD_INT 13
19956: PUSH
19957: LD_INT 14
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: IN
19966: IFFALSE 19978
// uc_nation := nation_arabian else
19968: LD_ADDR_OWVAR 21
19972: PUSH
19973: LD_INT 2
19975: ST_TO_ADDR
19976: GO 19986
// uc_nation := nation_russian ;
19978: LD_ADDR_OWVAR 21
19982: PUSH
19983: LD_INT 3
19985: ST_TO_ADDR
// vc_chassis := chassis ;
19986: LD_ADDR_OWVAR 37
19990: PUSH
19991: LD_VAR 0 1
19995: ST_TO_ADDR
// vc_engine := engine ;
19996: LD_ADDR_OWVAR 39
20000: PUSH
20001: LD_VAR 0 2
20005: ST_TO_ADDR
// vc_control := control ;
20006: LD_ADDR_OWVAR 38
20010: PUSH
20011: LD_VAR 0 3
20015: ST_TO_ADDR
// vc_weapon := weapon ;
20016: LD_ADDR_OWVAR 40
20020: PUSH
20021: LD_VAR 0 4
20025: ST_TO_ADDR
// un := CreateVehicle ;
20026: LD_ADDR_VAR 0 8
20030: PUSH
20031: CALL_OW 45
20035: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20036: LD_VAR 0 8
20040: PPUSH
20041: LD_INT 0
20043: PPUSH
20044: LD_INT 5
20046: PPUSH
20047: CALL_OW 12
20051: PPUSH
20052: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20056: LD_VAR 0 8
20060: PPUSH
20061: LD_VAR 0 5
20065: PPUSH
20066: LD_VAR 0 6
20070: PPUSH
20071: LD_INT 1
20073: PPUSH
20074: CALL_OW 48
// end ;
20078: LD_VAR 0 7
20082: RET
// export hInvincible ; every 1 do
20083: GO 20085
20085: DISABLE
// hInvincible := [ ] ;
20086: LD_ADDR_EXP 76
20090: PUSH
20091: EMPTY
20092: ST_TO_ADDR
20093: END
// every 10 do var i ;
20094: GO 20096
20096: DISABLE
20097: LD_INT 0
20099: PPUSH
// begin enable ;
20100: ENABLE
// if not hInvincible then
20101: LD_EXP 76
20105: NOT
20106: IFFALSE 20110
// exit ;
20108: GO 20154
// for i in hInvincible do
20110: LD_ADDR_VAR 0 1
20114: PUSH
20115: LD_EXP 76
20119: PUSH
20120: FOR_IN
20121: IFFALSE 20152
// if GetLives ( i ) < 1000 then
20123: LD_VAR 0 1
20127: PPUSH
20128: CALL_OW 256
20132: PUSH
20133: LD_INT 1000
20135: LESS
20136: IFFALSE 20150
// SetLives ( i , 1000 ) ;
20138: LD_VAR 0 1
20142: PPUSH
20143: LD_INT 1000
20145: PPUSH
20146: CALL_OW 234
20150: GO 20120
20152: POP
20153: POP
// end ;
20154: PPOPN 1
20156: END
// export function hHackInvincible ; var i ; begin
20157: LD_INT 0
20159: PPUSH
20160: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20161: LD_ADDR_VAR 0 2
20165: PUSH
20166: LD_INT 2
20168: PUSH
20169: LD_INT 21
20171: PUSH
20172: LD_INT 1
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 21
20181: PUSH
20182: LD_INT 2
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: LIST
20193: PPUSH
20194: CALL_OW 69
20198: PUSH
20199: FOR_IN
20200: IFFALSE 20261
// if IsSelected ( i ) then
20202: LD_VAR 0 2
20206: PPUSH
20207: CALL_OW 306
20211: IFFALSE 20259
// begin if i in hInvincible then
20213: LD_VAR 0 2
20217: PUSH
20218: LD_EXP 76
20222: IN
20223: IFFALSE 20243
// hInvincible := hInvincible diff i else
20225: LD_ADDR_EXP 76
20229: PUSH
20230: LD_EXP 76
20234: PUSH
20235: LD_VAR 0 2
20239: DIFF
20240: ST_TO_ADDR
20241: GO 20259
// hInvincible := hInvincible union i ;
20243: LD_ADDR_EXP 76
20247: PUSH
20248: LD_EXP 76
20252: PUSH
20253: LD_VAR 0 2
20257: UNION
20258: ST_TO_ADDR
// end ;
20259: GO 20199
20261: POP
20262: POP
// end ;
20263: LD_VAR 0 1
20267: RET
// export function hHackInvisible ; var i , j ; begin
20268: LD_INT 0
20270: PPUSH
20271: PPUSH
20272: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20273: LD_ADDR_VAR 0 2
20277: PUSH
20278: LD_INT 21
20280: PUSH
20281: LD_INT 1
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PPUSH
20288: CALL_OW 69
20292: PUSH
20293: FOR_IN
20294: IFFALSE 20318
// if IsSelected ( i ) then
20296: LD_VAR 0 2
20300: PPUSH
20301: CALL_OW 306
20305: IFFALSE 20316
// ComForceInvisible ( i ) ;
20307: LD_VAR 0 2
20311: PPUSH
20312: CALL_OW 496
20316: GO 20293
20318: POP
20319: POP
// end ;
20320: LD_VAR 0 1
20324: RET
// export function hHackChangeYourSide ; begin
20325: LD_INT 0
20327: PPUSH
// if your_side = 8 then
20328: LD_OWVAR 2
20332: PUSH
20333: LD_INT 8
20335: EQUAL
20336: IFFALSE 20348
// your_side := 0 else
20338: LD_ADDR_OWVAR 2
20342: PUSH
20343: LD_INT 0
20345: ST_TO_ADDR
20346: GO 20362
// your_side := your_side + 1 ;
20348: LD_ADDR_OWVAR 2
20352: PUSH
20353: LD_OWVAR 2
20357: PUSH
20358: LD_INT 1
20360: PLUS
20361: ST_TO_ADDR
// end ;
20362: LD_VAR 0 1
20366: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20367: LD_INT 0
20369: PPUSH
20370: PPUSH
20371: PPUSH
// for i in all_units do
20372: LD_ADDR_VAR 0 2
20376: PUSH
20377: LD_OWVAR 3
20381: PUSH
20382: FOR_IN
20383: IFFALSE 20461
// if IsSelected ( i ) then
20385: LD_VAR 0 2
20389: PPUSH
20390: CALL_OW 306
20394: IFFALSE 20459
// begin j := GetSide ( i ) ;
20396: LD_ADDR_VAR 0 3
20400: PUSH
20401: LD_VAR 0 2
20405: PPUSH
20406: CALL_OW 255
20410: ST_TO_ADDR
// if j = 8 then
20411: LD_VAR 0 3
20415: PUSH
20416: LD_INT 8
20418: EQUAL
20419: IFFALSE 20431
// j := 0 else
20421: LD_ADDR_VAR 0 3
20425: PUSH
20426: LD_INT 0
20428: ST_TO_ADDR
20429: GO 20445
// j := j + 1 ;
20431: LD_ADDR_VAR 0 3
20435: PUSH
20436: LD_VAR 0 3
20440: PUSH
20441: LD_INT 1
20443: PLUS
20444: ST_TO_ADDR
// SetSide ( i , j ) ;
20445: LD_VAR 0 2
20449: PPUSH
20450: LD_VAR 0 3
20454: PPUSH
20455: CALL_OW 235
// end ;
20459: GO 20382
20461: POP
20462: POP
// end ;
20463: LD_VAR 0 1
20467: RET
// export function hHackFog ; begin
20468: LD_INT 0
20470: PPUSH
// FogOff ( true ) ;
20471: LD_INT 1
20473: PPUSH
20474: CALL_OW 344
// end ;
20478: LD_VAR 0 1
20482: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20483: LD_INT 0
20485: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20486: LD_VAR 0 1
20490: PPUSH
20491: LD_VAR 0 2
20495: PPUSH
20496: LD_VAR 0 3
20500: PPUSH
20501: LD_INT 1
20503: PPUSH
20504: LD_INT 1
20506: PPUSH
20507: CALL_OW 483
// CenterOnXY ( x , y ) ;
20511: LD_VAR 0 2
20515: PPUSH
20516: LD_VAR 0 3
20520: PPUSH
20521: CALL_OW 84
// end ; end_of_file end_of_file
20525: LD_VAR 0 4
20529: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
20530: LD_INT 0
20532: PPUSH
// ar_miner := 81 ;
20533: LD_ADDR_EXP 84
20537: PUSH
20538: LD_INT 81
20540: ST_TO_ADDR
// ar_crane := 88 ;
20541: LD_ADDR_EXP 83
20545: PUSH
20546: LD_INT 88
20548: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20549: LD_ADDR_EXP 78
20553: PUSH
20554: LD_INT 89
20556: ST_TO_ADDR
// us_hack := 99 ;
20557: LD_ADDR_EXP 79
20561: PUSH
20562: LD_INT 99
20564: ST_TO_ADDR
// us_artillery := 97 ;
20565: LD_ADDR_EXP 80
20569: PUSH
20570: LD_INT 97
20572: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20573: LD_ADDR_EXP 81
20577: PUSH
20578: LD_INT 91
20580: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
20581: LD_ADDR_EXP 82
20585: PUSH
20586: LD_INT 92
20588: ST_TO_ADDR
// ru_radar := 98 ;
20589: LD_ADDR_EXP 77
20593: PUSH
20594: LD_INT 98
20596: ST_TO_ADDR
// tech_Artillery := 80 ;
20597: LD_ADDR_EXP 85
20601: PUSH
20602: LD_INT 80
20604: ST_TO_ADDR
// tech_RadMat := 81 ;
20605: LD_ADDR_EXP 86
20609: PUSH
20610: LD_INT 81
20612: ST_TO_ADDR
// tech_BasicTools := 82 ;
20613: LD_ADDR_EXP 87
20617: PUSH
20618: LD_INT 82
20620: ST_TO_ADDR
// tech_Cargo := 83 ;
20621: LD_ADDR_EXP 88
20625: PUSH
20626: LD_INT 83
20628: ST_TO_ADDR
// tech_Track := 84 ;
20629: LD_ADDR_EXP 89
20633: PUSH
20634: LD_INT 84
20636: ST_TO_ADDR
// tech_Crane := 85 ;
20637: LD_ADDR_EXP 90
20641: PUSH
20642: LD_INT 85
20644: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20645: LD_ADDR_EXP 91
20649: PUSH
20650: LD_INT 86
20652: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20653: LD_ADDR_EXP 92
20657: PUSH
20658: LD_INT 87
20660: ST_TO_ADDR
// end ;
20661: LD_VAR 0 1
20665: RET
// every 1 do
20666: GO 20668
20668: DISABLE
// InitGlobalVariables ; end_of_file
20669: CALL 20530 0 0
20673: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20674: LD_INT 0
20676: PPUSH
20677: PPUSH
// if exist_mode then
20678: LD_VAR 0 2
20682: IFFALSE 20707
// unit := CreateCharacter ( prefix & ident ) else
20684: LD_ADDR_VAR 0 5
20688: PUSH
20689: LD_VAR 0 3
20693: PUSH
20694: LD_VAR 0 1
20698: STR
20699: PPUSH
20700: CALL_OW 34
20704: ST_TO_ADDR
20705: GO 20722
// unit := NewCharacter ( ident ) ;
20707: LD_ADDR_VAR 0 5
20711: PUSH
20712: LD_VAR 0 1
20716: PPUSH
20717: CALL_OW 25
20721: ST_TO_ADDR
// result := unit ;
20722: LD_ADDR_VAR 0 4
20726: PUSH
20727: LD_VAR 0 5
20731: ST_TO_ADDR
// end ;
20732: LD_VAR 0 4
20736: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20737: LD_INT 0
20739: PPUSH
20740: PPUSH
// if not side or not nation then
20741: LD_VAR 0 1
20745: NOT
20746: PUSH
20747: LD_VAR 0 2
20751: NOT
20752: OR
20753: IFFALSE 20757
// exit ;
20755: GO 21521
// case nation of nation_american :
20757: LD_VAR 0 2
20761: PUSH
20762: LD_INT 1
20764: DOUBLE
20765: EQUAL
20766: IFTRUE 20770
20768: GO 20984
20770: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20771: LD_ADDR_VAR 0 4
20775: PUSH
20776: LD_INT 35
20778: PUSH
20779: LD_INT 45
20781: PUSH
20782: LD_INT 46
20784: PUSH
20785: LD_INT 47
20787: PUSH
20788: LD_INT 82
20790: PUSH
20791: LD_INT 83
20793: PUSH
20794: LD_INT 84
20796: PUSH
20797: LD_INT 85
20799: PUSH
20800: LD_INT 86
20802: PUSH
20803: LD_INT 1
20805: PUSH
20806: LD_INT 2
20808: PUSH
20809: LD_INT 6
20811: PUSH
20812: LD_INT 15
20814: PUSH
20815: LD_INT 16
20817: PUSH
20818: LD_INT 7
20820: PUSH
20821: LD_INT 12
20823: PUSH
20824: LD_INT 13
20826: PUSH
20827: LD_INT 10
20829: PUSH
20830: LD_INT 14
20832: PUSH
20833: LD_INT 20
20835: PUSH
20836: LD_INT 21
20838: PUSH
20839: LD_INT 22
20841: PUSH
20842: LD_INT 25
20844: PUSH
20845: LD_INT 32
20847: PUSH
20848: LD_INT 27
20850: PUSH
20851: LD_INT 36
20853: PUSH
20854: LD_INT 69
20856: PUSH
20857: LD_INT 39
20859: PUSH
20860: LD_INT 34
20862: PUSH
20863: LD_INT 40
20865: PUSH
20866: LD_INT 48
20868: PUSH
20869: LD_INT 49
20871: PUSH
20872: LD_INT 50
20874: PUSH
20875: LD_INT 51
20877: PUSH
20878: LD_INT 52
20880: PUSH
20881: LD_INT 53
20883: PUSH
20884: LD_INT 54
20886: PUSH
20887: LD_INT 55
20889: PUSH
20890: LD_INT 56
20892: PUSH
20893: LD_INT 57
20895: PUSH
20896: LD_INT 58
20898: PUSH
20899: LD_INT 59
20901: PUSH
20902: LD_INT 60
20904: PUSH
20905: LD_INT 61
20907: PUSH
20908: LD_INT 62
20910: PUSH
20911: LD_INT 80
20913: PUSH
20914: LD_INT 82
20916: PUSH
20917: LD_INT 83
20919: PUSH
20920: LD_INT 84
20922: PUSH
20923: LD_INT 85
20925: PUSH
20926: LD_INT 86
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: ST_TO_ADDR
20982: GO 21445
20984: LD_INT 2
20986: DOUBLE
20987: EQUAL
20988: IFTRUE 20992
20990: GO 21214
20992: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
20993: LD_ADDR_VAR 0 4
20997: PUSH
20998: LD_INT 35
21000: PUSH
21001: LD_INT 45
21003: PUSH
21004: LD_INT 46
21006: PUSH
21007: LD_INT 47
21009: PUSH
21010: LD_INT 82
21012: PUSH
21013: LD_INT 83
21015: PUSH
21016: LD_INT 84
21018: PUSH
21019: LD_INT 85
21021: PUSH
21022: LD_INT 87
21024: PUSH
21025: LD_INT 70
21027: PUSH
21028: LD_INT 1
21030: PUSH
21031: LD_INT 11
21033: PUSH
21034: LD_INT 3
21036: PUSH
21037: LD_INT 4
21039: PUSH
21040: LD_INT 5
21042: PUSH
21043: LD_INT 6
21045: PUSH
21046: LD_INT 15
21048: PUSH
21049: LD_INT 18
21051: PUSH
21052: LD_INT 7
21054: PUSH
21055: LD_INT 17
21057: PUSH
21058: LD_INT 8
21060: PUSH
21061: LD_INT 20
21063: PUSH
21064: LD_INT 21
21066: PUSH
21067: LD_INT 22
21069: PUSH
21070: LD_INT 72
21072: PUSH
21073: LD_INT 26
21075: PUSH
21076: LD_INT 69
21078: PUSH
21079: LD_INT 39
21081: PUSH
21082: LD_INT 40
21084: PUSH
21085: LD_INT 41
21087: PUSH
21088: LD_INT 42
21090: PUSH
21091: LD_INT 43
21093: PUSH
21094: LD_INT 48
21096: PUSH
21097: LD_INT 49
21099: PUSH
21100: LD_INT 50
21102: PUSH
21103: LD_INT 51
21105: PUSH
21106: LD_INT 52
21108: PUSH
21109: LD_INT 53
21111: PUSH
21112: LD_INT 54
21114: PUSH
21115: LD_INT 55
21117: PUSH
21118: LD_INT 56
21120: PUSH
21121: LD_INT 60
21123: PUSH
21124: LD_INT 61
21126: PUSH
21127: LD_INT 62
21129: PUSH
21130: LD_INT 66
21132: PUSH
21133: LD_INT 67
21135: PUSH
21136: LD_INT 68
21138: PUSH
21139: LD_INT 81
21141: PUSH
21142: LD_INT 82
21144: PUSH
21145: LD_INT 83
21147: PUSH
21148: LD_INT 84
21150: PUSH
21151: LD_INT 85
21153: PUSH
21154: LD_INT 87
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: ST_TO_ADDR
21212: GO 21445
21214: LD_INT 3
21216: DOUBLE
21217: EQUAL
21218: IFTRUE 21222
21220: GO 21444
21222: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21223: LD_ADDR_VAR 0 4
21227: PUSH
21228: LD_INT 46
21230: PUSH
21231: LD_INT 47
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: LD_INT 2
21239: PUSH
21240: LD_INT 82
21242: PUSH
21243: LD_INT 83
21245: PUSH
21246: LD_INT 84
21248: PUSH
21249: LD_INT 85
21251: PUSH
21252: LD_INT 86
21254: PUSH
21255: LD_INT 11
21257: PUSH
21258: LD_INT 9
21260: PUSH
21261: LD_INT 20
21263: PUSH
21264: LD_INT 19
21266: PUSH
21267: LD_INT 21
21269: PUSH
21270: LD_INT 24
21272: PUSH
21273: LD_INT 22
21275: PUSH
21276: LD_INT 25
21278: PUSH
21279: LD_INT 28
21281: PUSH
21282: LD_INT 29
21284: PUSH
21285: LD_INT 30
21287: PUSH
21288: LD_INT 31
21290: PUSH
21291: LD_INT 37
21293: PUSH
21294: LD_INT 38
21296: PUSH
21297: LD_INT 32
21299: PUSH
21300: LD_INT 27
21302: PUSH
21303: LD_INT 33
21305: PUSH
21306: LD_INT 69
21308: PUSH
21309: LD_INT 39
21311: PUSH
21312: LD_INT 34
21314: PUSH
21315: LD_INT 40
21317: PUSH
21318: LD_INT 71
21320: PUSH
21321: LD_INT 23
21323: PUSH
21324: LD_INT 44
21326: PUSH
21327: LD_INT 48
21329: PUSH
21330: LD_INT 49
21332: PUSH
21333: LD_INT 50
21335: PUSH
21336: LD_INT 51
21338: PUSH
21339: LD_INT 52
21341: PUSH
21342: LD_INT 53
21344: PUSH
21345: LD_INT 54
21347: PUSH
21348: LD_INT 55
21350: PUSH
21351: LD_INT 56
21353: PUSH
21354: LD_INT 57
21356: PUSH
21357: LD_INT 58
21359: PUSH
21360: LD_INT 59
21362: PUSH
21363: LD_INT 63
21365: PUSH
21366: LD_INT 64
21368: PUSH
21369: LD_INT 65
21371: PUSH
21372: LD_INT 82
21374: PUSH
21375: LD_INT 83
21377: PUSH
21378: LD_INT 84
21380: PUSH
21381: LD_INT 85
21383: PUSH
21384: LD_INT 86
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: ST_TO_ADDR
21442: GO 21445
21444: POP
// if state > - 1 and state < 3 then
21445: LD_VAR 0 3
21449: PUSH
21450: LD_INT 1
21452: NEG
21453: GREATER
21454: PUSH
21455: LD_VAR 0 3
21459: PUSH
21460: LD_INT 3
21462: LESS
21463: AND
21464: IFFALSE 21521
// for i in result do
21466: LD_ADDR_VAR 0 5
21470: PUSH
21471: LD_VAR 0 4
21475: PUSH
21476: FOR_IN
21477: IFFALSE 21519
// if GetTech ( i , side ) <> state then
21479: LD_VAR 0 5
21483: PPUSH
21484: LD_VAR 0 1
21488: PPUSH
21489: CALL_OW 321
21493: PUSH
21494: LD_VAR 0 3
21498: NONEQUAL
21499: IFFALSE 21517
// result := result diff i ;
21501: LD_ADDR_VAR 0 4
21505: PUSH
21506: LD_VAR 0 4
21510: PUSH
21511: LD_VAR 0 5
21515: DIFF
21516: ST_TO_ADDR
21517: GO 21476
21519: POP
21520: POP
// end ;
21521: LD_VAR 0 4
21525: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21526: LD_INT 0
21528: PPUSH
21529: PPUSH
21530: PPUSH
// result := true ;
21531: LD_ADDR_VAR 0 3
21535: PUSH
21536: LD_INT 1
21538: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21539: LD_ADDR_VAR 0 5
21543: PUSH
21544: LD_VAR 0 2
21548: PPUSH
21549: CALL_OW 480
21553: ST_TO_ADDR
// if not tmp then
21554: LD_VAR 0 5
21558: NOT
21559: IFFALSE 21563
// exit ;
21561: GO 21612
// for i in tmp do
21563: LD_ADDR_VAR 0 4
21567: PUSH
21568: LD_VAR 0 5
21572: PUSH
21573: FOR_IN
21574: IFFALSE 21610
// if GetTech ( i , side ) <> state_researched then
21576: LD_VAR 0 4
21580: PPUSH
21581: LD_VAR 0 1
21585: PPUSH
21586: CALL_OW 321
21590: PUSH
21591: LD_INT 2
21593: NONEQUAL
21594: IFFALSE 21608
// begin result := false ;
21596: LD_ADDR_VAR 0 3
21600: PUSH
21601: LD_INT 0
21603: ST_TO_ADDR
// exit ;
21604: POP
21605: POP
21606: GO 21612
// end ;
21608: GO 21573
21610: POP
21611: POP
// end ;
21612: LD_VAR 0 3
21616: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21617: LD_INT 0
21619: PPUSH
21620: PPUSH
21621: PPUSH
21622: PPUSH
21623: PPUSH
21624: PPUSH
21625: PPUSH
21626: PPUSH
21627: PPUSH
21628: PPUSH
21629: PPUSH
21630: PPUSH
21631: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21632: LD_VAR 0 1
21636: NOT
21637: PUSH
21638: LD_VAR 0 1
21642: PPUSH
21643: CALL_OW 257
21647: PUSH
21648: LD_INT 9
21650: NONEQUAL
21651: OR
21652: IFFALSE 21656
// exit ;
21654: GO 22229
// side := GetSide ( unit ) ;
21656: LD_ADDR_VAR 0 9
21660: PUSH
21661: LD_VAR 0 1
21665: PPUSH
21666: CALL_OW 255
21670: ST_TO_ADDR
// tech_space := tech_spacanom ;
21671: LD_ADDR_VAR 0 12
21675: PUSH
21676: LD_INT 29
21678: ST_TO_ADDR
// tech_time := tech_taurad ;
21679: LD_ADDR_VAR 0 13
21683: PUSH
21684: LD_INT 28
21686: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21687: LD_ADDR_VAR 0 11
21691: PUSH
21692: LD_VAR 0 1
21696: PPUSH
21697: CALL_OW 310
21701: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21702: LD_VAR 0 11
21706: PPUSH
21707: CALL_OW 247
21711: PUSH
21712: LD_INT 2
21714: EQUAL
21715: IFFALSE 21719
// exit ;
21717: GO 22229
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21719: LD_ADDR_VAR 0 8
21723: PUSH
21724: LD_INT 81
21726: PUSH
21727: LD_VAR 0 9
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 3
21738: PUSH
21739: LD_INT 21
21741: PUSH
21742: LD_INT 3
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PPUSH
21757: CALL_OW 69
21761: ST_TO_ADDR
// if not tmp then
21762: LD_VAR 0 8
21766: NOT
21767: IFFALSE 21771
// exit ;
21769: GO 22229
// if in_unit then
21771: LD_VAR 0 11
21775: IFFALSE 21799
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21777: LD_ADDR_VAR 0 10
21781: PUSH
21782: LD_VAR 0 8
21786: PPUSH
21787: LD_VAR 0 11
21791: PPUSH
21792: CALL_OW 74
21796: ST_TO_ADDR
21797: GO 21819
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21799: LD_ADDR_VAR 0 10
21803: PUSH
21804: LD_VAR 0 8
21808: PPUSH
21809: LD_VAR 0 1
21813: PPUSH
21814: CALL_OW 74
21818: ST_TO_ADDR
// if not enemy then
21819: LD_VAR 0 10
21823: NOT
21824: IFFALSE 21828
// exit ;
21826: GO 22229
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21828: LD_VAR 0 11
21832: PUSH
21833: LD_VAR 0 11
21837: PPUSH
21838: LD_VAR 0 10
21842: PPUSH
21843: CALL_OW 296
21847: PUSH
21848: LD_INT 13
21850: GREATER
21851: AND
21852: PUSH
21853: LD_VAR 0 1
21857: PPUSH
21858: LD_VAR 0 10
21862: PPUSH
21863: CALL_OW 296
21867: PUSH
21868: LD_INT 12
21870: GREATER
21871: OR
21872: IFFALSE 21876
// exit ;
21874: GO 22229
// missile := [ 1 ] ;
21876: LD_ADDR_VAR 0 14
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: EMPTY
21885: LIST
21886: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21887: LD_VAR 0 9
21891: PPUSH
21892: LD_VAR 0 12
21896: PPUSH
21897: CALL_OW 325
21901: IFFALSE 21930
// missile := Insert ( missile , missile + 1 , 2 ) ;
21903: LD_ADDR_VAR 0 14
21907: PUSH
21908: LD_VAR 0 14
21912: PPUSH
21913: LD_VAR 0 14
21917: PUSH
21918: LD_INT 1
21920: PLUS
21921: PPUSH
21922: LD_INT 2
21924: PPUSH
21925: CALL_OW 2
21929: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21930: LD_VAR 0 9
21934: PPUSH
21935: LD_VAR 0 13
21939: PPUSH
21940: CALL_OW 325
21944: PUSH
21945: LD_VAR 0 10
21949: PPUSH
21950: CALL_OW 255
21954: PPUSH
21955: LD_VAR 0 13
21959: PPUSH
21960: CALL_OW 325
21964: NOT
21965: AND
21966: IFFALSE 21995
// missile := Insert ( missile , missile + 1 , 3 ) ;
21968: LD_ADDR_VAR 0 14
21972: PUSH
21973: LD_VAR 0 14
21977: PPUSH
21978: LD_VAR 0 14
21982: PUSH
21983: LD_INT 1
21985: PLUS
21986: PPUSH
21987: LD_INT 3
21989: PPUSH
21990: CALL_OW 2
21994: ST_TO_ADDR
// if missile < 2 then
21995: LD_VAR 0 14
21999: PUSH
22000: LD_INT 2
22002: LESS
22003: IFFALSE 22007
// exit ;
22005: GO 22229
// x := GetX ( enemy ) ;
22007: LD_ADDR_VAR 0 4
22011: PUSH
22012: LD_VAR 0 10
22016: PPUSH
22017: CALL_OW 250
22021: ST_TO_ADDR
// y := GetY ( enemy ) ;
22022: LD_ADDR_VAR 0 5
22026: PUSH
22027: LD_VAR 0 10
22031: PPUSH
22032: CALL_OW 251
22036: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22037: LD_ADDR_VAR 0 6
22041: PUSH
22042: LD_VAR 0 4
22046: PUSH
22047: LD_INT 1
22049: NEG
22050: PPUSH
22051: LD_INT 1
22053: PPUSH
22054: CALL_OW 12
22058: PLUS
22059: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22060: LD_ADDR_VAR 0 7
22064: PUSH
22065: LD_VAR 0 5
22069: PUSH
22070: LD_INT 1
22072: NEG
22073: PPUSH
22074: LD_INT 1
22076: PPUSH
22077: CALL_OW 12
22081: PLUS
22082: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22083: LD_VAR 0 6
22087: PPUSH
22088: LD_VAR 0 7
22092: PPUSH
22093: CALL_OW 488
22097: NOT
22098: IFFALSE 22120
// begin _x := x ;
22100: LD_ADDR_VAR 0 6
22104: PUSH
22105: LD_VAR 0 4
22109: ST_TO_ADDR
// _y := y ;
22110: LD_ADDR_VAR 0 7
22114: PUSH
22115: LD_VAR 0 5
22119: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22120: LD_ADDR_VAR 0 3
22124: PUSH
22125: LD_INT 1
22127: PPUSH
22128: LD_VAR 0 14
22132: PPUSH
22133: CALL_OW 12
22137: ST_TO_ADDR
// case i of 1 :
22138: LD_VAR 0 3
22142: PUSH
22143: LD_INT 1
22145: DOUBLE
22146: EQUAL
22147: IFTRUE 22151
22149: GO 22168
22151: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22152: LD_VAR 0 1
22156: PPUSH
22157: LD_VAR 0 10
22161: PPUSH
22162: CALL_OW 115
22166: GO 22229
22168: LD_INT 2
22170: DOUBLE
22171: EQUAL
22172: IFTRUE 22176
22174: GO 22198
22176: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22177: LD_VAR 0 1
22181: PPUSH
22182: LD_VAR 0 6
22186: PPUSH
22187: LD_VAR 0 7
22191: PPUSH
22192: CALL_OW 153
22196: GO 22229
22198: LD_INT 3
22200: DOUBLE
22201: EQUAL
22202: IFTRUE 22206
22204: GO 22228
22206: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22207: LD_VAR 0 1
22211: PPUSH
22212: LD_VAR 0 6
22216: PPUSH
22217: LD_VAR 0 7
22221: PPUSH
22222: CALL_OW 154
22226: GO 22229
22228: POP
// end ;
22229: LD_VAR 0 2
22233: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22234: LD_INT 0
22236: PPUSH
22237: PPUSH
22238: PPUSH
22239: PPUSH
22240: PPUSH
22241: PPUSH
// if not unit or not building then
22242: LD_VAR 0 1
22246: NOT
22247: PUSH
22248: LD_VAR 0 2
22252: NOT
22253: OR
22254: IFFALSE 22258
// exit ;
22256: GO 22416
// x := GetX ( building ) ;
22258: LD_ADDR_VAR 0 5
22262: PUSH
22263: LD_VAR 0 2
22267: PPUSH
22268: CALL_OW 250
22272: ST_TO_ADDR
// y := GetY ( building ) ;
22273: LD_ADDR_VAR 0 6
22277: PUSH
22278: LD_VAR 0 2
22282: PPUSH
22283: CALL_OW 251
22287: ST_TO_ADDR
// for i = 0 to 5 do
22288: LD_ADDR_VAR 0 4
22292: PUSH
22293: DOUBLE
22294: LD_INT 0
22296: DEC
22297: ST_TO_ADDR
22298: LD_INT 5
22300: PUSH
22301: FOR_TO
22302: IFFALSE 22414
// begin _x := ShiftX ( x , i , 3 ) ;
22304: LD_ADDR_VAR 0 7
22308: PUSH
22309: LD_VAR 0 5
22313: PPUSH
22314: LD_VAR 0 4
22318: PPUSH
22319: LD_INT 3
22321: PPUSH
22322: CALL_OW 272
22326: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22327: LD_ADDR_VAR 0 8
22331: PUSH
22332: LD_VAR 0 6
22336: PPUSH
22337: LD_VAR 0 4
22341: PPUSH
22342: LD_INT 3
22344: PPUSH
22345: CALL_OW 273
22349: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22350: LD_VAR 0 7
22354: PPUSH
22355: LD_VAR 0 8
22359: PPUSH
22360: CALL_OW 488
22364: NOT
22365: IFFALSE 22369
// continue ;
22367: GO 22301
// if HexInfo ( _x , _y ) = 0 then
22369: LD_VAR 0 7
22373: PPUSH
22374: LD_VAR 0 8
22378: PPUSH
22379: CALL_OW 428
22383: PUSH
22384: LD_INT 0
22386: EQUAL
22387: IFFALSE 22412
// begin ComMoveXY ( unit , _x , _y ) ;
22389: LD_VAR 0 1
22393: PPUSH
22394: LD_VAR 0 7
22398: PPUSH
22399: LD_VAR 0 8
22403: PPUSH
22404: CALL_OW 111
// exit ;
22408: POP
22409: POP
22410: GO 22416
// end ; end ;
22412: GO 22301
22414: POP
22415: POP
// end ;
22416: LD_VAR 0 3
22420: RET
// export function ScanBase ( side , base_area ) ; begin
22421: LD_INT 0
22423: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22424: LD_ADDR_VAR 0 3
22428: PUSH
22429: LD_VAR 0 2
22433: PPUSH
22434: LD_INT 81
22436: PUSH
22437: LD_VAR 0 1
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PPUSH
22446: CALL_OW 70
22450: ST_TO_ADDR
// end ;
22451: LD_VAR 0 3
22455: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22456: LD_INT 0
22458: PPUSH
22459: PPUSH
22460: PPUSH
22461: PPUSH
// result := false ;
22462: LD_ADDR_VAR 0 2
22466: PUSH
22467: LD_INT 0
22469: ST_TO_ADDR
// side := GetSide ( unit ) ;
22470: LD_ADDR_VAR 0 3
22474: PUSH
22475: LD_VAR 0 1
22479: PPUSH
22480: CALL_OW 255
22484: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22485: LD_ADDR_VAR 0 4
22489: PUSH
22490: LD_VAR 0 1
22494: PPUSH
22495: CALL_OW 248
22499: ST_TO_ADDR
// case nat of 1 :
22500: LD_VAR 0 4
22504: PUSH
22505: LD_INT 1
22507: DOUBLE
22508: EQUAL
22509: IFTRUE 22513
22511: GO 22524
22513: POP
// tech := tech_lassight ; 2 :
22514: LD_ADDR_VAR 0 5
22518: PUSH
22519: LD_INT 12
22521: ST_TO_ADDR
22522: GO 22563
22524: LD_INT 2
22526: DOUBLE
22527: EQUAL
22528: IFTRUE 22532
22530: GO 22543
22532: POP
// tech := tech_mortar ; 3 :
22533: LD_ADDR_VAR 0 5
22537: PUSH
22538: LD_INT 41
22540: ST_TO_ADDR
22541: GO 22563
22543: LD_INT 3
22545: DOUBLE
22546: EQUAL
22547: IFTRUE 22551
22549: GO 22562
22551: POP
// tech := tech_bazooka ; end ;
22552: LD_ADDR_VAR 0 5
22556: PUSH
22557: LD_INT 44
22559: ST_TO_ADDR
22560: GO 22563
22562: POP
// if Researched ( side , tech ) then
22563: LD_VAR 0 3
22567: PPUSH
22568: LD_VAR 0 5
22572: PPUSH
22573: CALL_OW 325
22577: IFFALSE 22604
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22579: LD_ADDR_VAR 0 2
22583: PUSH
22584: LD_INT 5
22586: PUSH
22587: LD_INT 8
22589: PUSH
22590: LD_INT 9
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: LIST
22597: PUSH
22598: LD_VAR 0 4
22602: ARRAY
22603: ST_TO_ADDR
// end ;
22604: LD_VAR 0 2
22608: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22609: LD_INT 0
22611: PPUSH
22612: PPUSH
22613: PPUSH
// if not mines then
22614: LD_VAR 0 2
22618: NOT
22619: IFFALSE 22623
// exit ;
22621: GO 22767
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22623: LD_ADDR_VAR 0 5
22627: PUSH
22628: LD_INT 81
22630: PUSH
22631: LD_VAR 0 1
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 3
22642: PUSH
22643: LD_INT 21
22645: PUSH
22646: LD_INT 3
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PPUSH
22661: CALL_OW 69
22665: ST_TO_ADDR
// for i in mines do
22666: LD_ADDR_VAR 0 4
22670: PUSH
22671: LD_VAR 0 2
22675: PUSH
22676: FOR_IN
22677: IFFALSE 22765
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22679: LD_VAR 0 4
22683: PUSH
22684: LD_INT 1
22686: ARRAY
22687: PPUSH
22688: LD_VAR 0 4
22692: PUSH
22693: LD_INT 2
22695: ARRAY
22696: PPUSH
22697: CALL_OW 458
22701: NOT
22702: IFFALSE 22706
// continue ;
22704: GO 22676
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22706: LD_VAR 0 4
22710: PUSH
22711: LD_INT 1
22713: ARRAY
22714: PPUSH
22715: LD_VAR 0 4
22719: PUSH
22720: LD_INT 2
22722: ARRAY
22723: PPUSH
22724: CALL_OW 428
22728: PUSH
22729: LD_VAR 0 5
22733: IN
22734: IFFALSE 22763
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22736: LD_VAR 0 4
22740: PUSH
22741: LD_INT 1
22743: ARRAY
22744: PPUSH
22745: LD_VAR 0 4
22749: PUSH
22750: LD_INT 2
22752: ARRAY
22753: PPUSH
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL_OW 456
// end ;
22763: GO 22676
22765: POP
22766: POP
// end ;
22767: LD_VAR 0 3
22771: RET
// export function Count ( array ) ; var i ; begin
22772: LD_INT 0
22774: PPUSH
22775: PPUSH
// result := 0 ;
22776: LD_ADDR_VAR 0 2
22780: PUSH
22781: LD_INT 0
22783: ST_TO_ADDR
// for i in array do
22784: LD_ADDR_VAR 0 3
22788: PUSH
22789: LD_VAR 0 1
22793: PUSH
22794: FOR_IN
22795: IFFALSE 22819
// if i then
22797: LD_VAR 0 3
22801: IFFALSE 22817
// result := result + 1 ;
22803: LD_ADDR_VAR 0 2
22807: PUSH
22808: LD_VAR 0 2
22812: PUSH
22813: LD_INT 1
22815: PLUS
22816: ST_TO_ADDR
22817: GO 22794
22819: POP
22820: POP
// end ;
22821: LD_VAR 0 2
22825: RET
// export function IsEmpty ( building ) ; begin
22826: LD_INT 0
22828: PPUSH
// if not building then
22829: LD_VAR 0 1
22833: NOT
22834: IFFALSE 22838
// exit ;
22836: GO 22881
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22838: LD_ADDR_VAR 0 2
22842: PUSH
22843: LD_VAR 0 1
22847: PUSH
22848: LD_INT 22
22850: PUSH
22851: LD_VAR 0 1
22855: PPUSH
22856: CALL_OW 255
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 58
22867: PUSH
22868: EMPTY
22869: LIST
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PPUSH
22875: CALL_OW 69
22879: IN
22880: ST_TO_ADDR
// end ;
22881: LD_VAR 0 2
22885: RET
// export function IsNotFull ( building ) ; begin
22886: LD_INT 0
22888: PPUSH
// if not building then
22889: LD_VAR 0 1
22893: NOT
22894: IFFALSE 22898
// exit ;
22896: GO 22917
// result := UnitsInside ( building ) < 6 ;
22898: LD_ADDR_VAR 0 2
22902: PUSH
22903: LD_VAR 0 1
22907: PPUSH
22908: CALL_OW 313
22912: PUSH
22913: LD_INT 6
22915: LESS
22916: ST_TO_ADDR
// end ;
22917: LD_VAR 0 2
22921: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22922: LD_INT 0
22924: PPUSH
22925: PPUSH
22926: PPUSH
22927: PPUSH
// tmp := [ ] ;
22928: LD_ADDR_VAR 0 3
22932: PUSH
22933: EMPTY
22934: ST_TO_ADDR
// list := [ ] ;
22935: LD_ADDR_VAR 0 5
22939: PUSH
22940: EMPTY
22941: ST_TO_ADDR
// for i = 16 to 25 do
22942: LD_ADDR_VAR 0 4
22946: PUSH
22947: DOUBLE
22948: LD_INT 16
22950: DEC
22951: ST_TO_ADDR
22952: LD_INT 25
22954: PUSH
22955: FOR_TO
22956: IFFALSE 23029
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22958: LD_ADDR_VAR 0 3
22962: PUSH
22963: LD_VAR 0 3
22967: PUSH
22968: LD_INT 22
22970: PUSH
22971: LD_VAR 0 1
22975: PPUSH
22976: CALL_OW 255
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 91
22987: PUSH
22988: LD_VAR 0 1
22992: PUSH
22993: LD_INT 6
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 30
23003: PUSH
23004: LD_VAR 0 4
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: LIST
23017: PUSH
23018: EMPTY
23019: LIST
23020: PPUSH
23021: CALL_OW 69
23025: ADD
23026: ST_TO_ADDR
23027: GO 22955
23029: POP
23030: POP
// for i = 1 to tmp do
23031: LD_ADDR_VAR 0 4
23035: PUSH
23036: DOUBLE
23037: LD_INT 1
23039: DEC
23040: ST_TO_ADDR
23041: LD_VAR 0 3
23045: PUSH
23046: FOR_TO
23047: IFFALSE 23135
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23049: LD_ADDR_VAR 0 5
23053: PUSH
23054: LD_VAR 0 5
23058: PUSH
23059: LD_VAR 0 3
23063: PUSH
23064: LD_VAR 0 4
23068: ARRAY
23069: PPUSH
23070: CALL_OW 266
23074: PUSH
23075: LD_VAR 0 3
23079: PUSH
23080: LD_VAR 0 4
23084: ARRAY
23085: PPUSH
23086: CALL_OW 250
23090: PUSH
23091: LD_VAR 0 3
23095: PUSH
23096: LD_VAR 0 4
23100: ARRAY
23101: PPUSH
23102: CALL_OW 251
23106: PUSH
23107: LD_VAR 0 3
23111: PUSH
23112: LD_VAR 0 4
23116: ARRAY
23117: PPUSH
23118: CALL_OW 254
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: PUSH
23129: EMPTY
23130: LIST
23131: ADD
23132: ST_TO_ADDR
23133: GO 23046
23135: POP
23136: POP
// result := list ;
23137: LD_ADDR_VAR 0 2
23141: PUSH
23142: LD_VAR 0 5
23146: ST_TO_ADDR
// end ;
23147: LD_VAR 0 2
23151: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23152: LD_INT 0
23154: PPUSH
23155: PPUSH
23156: PPUSH
23157: PPUSH
23158: PPUSH
23159: PPUSH
23160: PPUSH
// if not factory then
23161: LD_VAR 0 1
23165: NOT
23166: IFFALSE 23170
// exit ;
23168: GO 23763
// if control = control_apeman then
23170: LD_VAR 0 4
23174: PUSH
23175: LD_INT 5
23177: EQUAL
23178: IFFALSE 23287
// begin tmp := UnitsInside ( factory ) ;
23180: LD_ADDR_VAR 0 8
23184: PUSH
23185: LD_VAR 0 1
23189: PPUSH
23190: CALL_OW 313
23194: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23195: LD_VAR 0 8
23199: PPUSH
23200: LD_INT 25
23202: PUSH
23203: LD_INT 12
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PPUSH
23210: CALL_OW 72
23214: NOT
23215: IFFALSE 23225
// control := control_manual ;
23217: LD_ADDR_VAR 0 4
23221: PUSH
23222: LD_INT 1
23224: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23225: LD_ADDR_VAR 0 8
23229: PUSH
23230: LD_VAR 0 1
23234: PPUSH
23235: CALL 22922 0 1
23239: ST_TO_ADDR
// if tmp then
23240: LD_VAR 0 8
23244: IFFALSE 23287
// begin for i in tmp do
23246: LD_ADDR_VAR 0 7
23250: PUSH
23251: LD_VAR 0 8
23255: PUSH
23256: FOR_IN
23257: IFFALSE 23285
// if i [ 1 ] = b_ext_radio then
23259: LD_VAR 0 7
23263: PUSH
23264: LD_INT 1
23266: ARRAY
23267: PUSH
23268: LD_INT 22
23270: EQUAL
23271: IFFALSE 23283
// begin control := control_remote ;
23273: LD_ADDR_VAR 0 4
23277: PUSH
23278: LD_INT 2
23280: ST_TO_ADDR
// break ;
23281: GO 23285
// end ;
23283: GO 23256
23285: POP
23286: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23287: LD_VAR 0 1
23291: PPUSH
23292: LD_VAR 0 2
23296: PPUSH
23297: LD_VAR 0 3
23301: PPUSH
23302: LD_VAR 0 4
23306: PPUSH
23307: LD_VAR 0 5
23311: PPUSH
23312: CALL_OW 448
23316: IFFALSE 23351
// begin result := [ chassis , engine , control , weapon ] ;
23318: LD_ADDR_VAR 0 6
23322: PUSH
23323: LD_VAR 0 2
23327: PUSH
23328: LD_VAR 0 3
23332: PUSH
23333: LD_VAR 0 4
23337: PUSH
23338: LD_VAR 0 5
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: ST_TO_ADDR
// exit ;
23349: GO 23763
// end ; _chassis := AvailableChassisList ( factory ) ;
23351: LD_ADDR_VAR 0 9
23355: PUSH
23356: LD_VAR 0 1
23360: PPUSH
23361: CALL_OW 475
23365: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23366: LD_ADDR_VAR 0 11
23370: PUSH
23371: LD_VAR 0 1
23375: PPUSH
23376: CALL_OW 476
23380: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23381: LD_ADDR_VAR 0 12
23385: PUSH
23386: LD_VAR 0 1
23390: PPUSH
23391: CALL_OW 477
23395: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23396: LD_ADDR_VAR 0 10
23400: PUSH
23401: LD_VAR 0 1
23405: PPUSH
23406: CALL_OW 478
23410: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23411: LD_VAR 0 9
23415: NOT
23416: PUSH
23417: LD_VAR 0 11
23421: NOT
23422: OR
23423: PUSH
23424: LD_VAR 0 12
23428: NOT
23429: OR
23430: PUSH
23431: LD_VAR 0 10
23435: NOT
23436: OR
23437: IFFALSE 23472
// begin result := [ chassis , engine , control , weapon ] ;
23439: LD_ADDR_VAR 0 6
23443: PUSH
23444: LD_VAR 0 2
23448: PUSH
23449: LD_VAR 0 3
23453: PUSH
23454: LD_VAR 0 4
23458: PUSH
23459: LD_VAR 0 5
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: ST_TO_ADDR
// exit ;
23470: GO 23763
// end ; if not chassis in _chassis then
23472: LD_VAR 0 2
23476: PUSH
23477: LD_VAR 0 9
23481: IN
23482: NOT
23483: IFFALSE 23509
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23485: LD_ADDR_VAR 0 2
23489: PUSH
23490: LD_VAR 0 9
23494: PUSH
23495: LD_INT 1
23497: PPUSH
23498: LD_VAR 0 9
23502: PPUSH
23503: CALL_OW 12
23507: ARRAY
23508: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23509: LD_VAR 0 2
23513: PPUSH
23514: LD_VAR 0 3
23518: PPUSH
23519: CALL 23768 0 2
23523: NOT
23524: IFFALSE 23583
// repeat engine := _engine [ 1 ] ;
23526: LD_ADDR_VAR 0 3
23530: PUSH
23531: LD_VAR 0 11
23535: PUSH
23536: LD_INT 1
23538: ARRAY
23539: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23540: LD_ADDR_VAR 0 11
23544: PUSH
23545: LD_VAR 0 11
23549: PPUSH
23550: LD_INT 1
23552: PPUSH
23553: CALL_OW 3
23557: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23558: LD_VAR 0 2
23562: PPUSH
23563: LD_VAR 0 3
23567: PPUSH
23568: CALL 23768 0 2
23572: PUSH
23573: LD_VAR 0 11
23577: PUSH
23578: EMPTY
23579: EQUAL
23580: OR
23581: IFFALSE 23526
// if not control in _control then
23583: LD_VAR 0 4
23587: PUSH
23588: LD_VAR 0 12
23592: IN
23593: NOT
23594: IFFALSE 23620
// control := _control [ rand ( 1 , _control ) ] ;
23596: LD_ADDR_VAR 0 4
23600: PUSH
23601: LD_VAR 0 12
23605: PUSH
23606: LD_INT 1
23608: PPUSH
23609: LD_VAR 0 12
23613: PPUSH
23614: CALL_OW 12
23618: ARRAY
23619: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23620: LD_VAR 0 2
23624: PPUSH
23625: LD_VAR 0 5
23629: PPUSH
23630: CALL 23988 0 2
23634: NOT
23635: IFFALSE 23694
// repeat weapon := _weapon [ 1 ] ;
23637: LD_ADDR_VAR 0 5
23641: PUSH
23642: LD_VAR 0 10
23646: PUSH
23647: LD_INT 1
23649: ARRAY
23650: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23651: LD_ADDR_VAR 0 10
23655: PUSH
23656: LD_VAR 0 10
23660: PPUSH
23661: LD_INT 1
23663: PPUSH
23664: CALL_OW 3
23668: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23669: LD_VAR 0 2
23673: PPUSH
23674: LD_VAR 0 5
23678: PPUSH
23679: CALL 23988 0 2
23683: PUSH
23684: LD_VAR 0 10
23688: PUSH
23689: EMPTY
23690: EQUAL
23691: OR
23692: IFFALSE 23637
// result := [ ] ;
23694: LD_ADDR_VAR 0 6
23698: PUSH
23699: EMPTY
23700: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23701: LD_VAR 0 1
23705: PPUSH
23706: LD_VAR 0 2
23710: PPUSH
23711: LD_VAR 0 3
23715: PPUSH
23716: LD_VAR 0 4
23720: PPUSH
23721: LD_VAR 0 5
23725: PPUSH
23726: CALL_OW 448
23730: IFFALSE 23763
// result := [ chassis , engine , control , weapon ] ;
23732: LD_ADDR_VAR 0 6
23736: PUSH
23737: LD_VAR 0 2
23741: PUSH
23742: LD_VAR 0 3
23746: PUSH
23747: LD_VAR 0 4
23751: PUSH
23752: LD_VAR 0 5
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: ST_TO_ADDR
// end ;
23763: LD_VAR 0 6
23767: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23768: LD_INT 0
23770: PPUSH
// if not chassis or not engine then
23771: LD_VAR 0 1
23775: NOT
23776: PUSH
23777: LD_VAR 0 2
23781: NOT
23782: OR
23783: IFFALSE 23787
// exit ;
23785: GO 23983
// case engine of engine_solar :
23787: LD_VAR 0 2
23791: PUSH
23792: LD_INT 2
23794: DOUBLE
23795: EQUAL
23796: IFTRUE 23800
23798: GO 23838
23800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23801: LD_ADDR_VAR 0 3
23805: PUSH
23806: LD_INT 11
23808: PUSH
23809: LD_INT 12
23811: PUSH
23812: LD_INT 13
23814: PUSH
23815: LD_INT 14
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: LD_INT 2
23823: PUSH
23824: LD_INT 3
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: ST_TO_ADDR
23836: GO 23967
23838: LD_INT 1
23840: DOUBLE
23841: EQUAL
23842: IFTRUE 23846
23844: GO 23908
23846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23847: LD_ADDR_VAR 0 3
23851: PUSH
23852: LD_INT 11
23854: PUSH
23855: LD_INT 12
23857: PUSH
23858: LD_INT 13
23860: PUSH
23861: LD_INT 14
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: LD_INT 2
23869: PUSH
23870: LD_INT 3
23872: PUSH
23873: LD_INT 4
23875: PUSH
23876: LD_INT 5
23878: PUSH
23879: LD_INT 21
23881: PUSH
23882: LD_INT 23
23884: PUSH
23885: LD_INT 22
23887: PUSH
23888: LD_INT 24
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: ST_TO_ADDR
23906: GO 23967
23908: LD_INT 3
23910: DOUBLE
23911: EQUAL
23912: IFTRUE 23916
23914: GO 23966
23916: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23917: LD_ADDR_VAR 0 3
23921: PUSH
23922: LD_INT 13
23924: PUSH
23925: LD_INT 14
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: LD_INT 3
23933: PUSH
23934: LD_INT 4
23936: PUSH
23937: LD_INT 5
23939: PUSH
23940: LD_INT 21
23942: PUSH
23943: LD_INT 22
23945: PUSH
23946: LD_INT 23
23948: PUSH
23949: LD_INT 24
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: ST_TO_ADDR
23964: GO 23967
23966: POP
// result := ( chassis in result ) ;
23967: LD_ADDR_VAR 0 3
23971: PUSH
23972: LD_VAR 0 1
23976: PUSH
23977: LD_VAR 0 3
23981: IN
23982: ST_TO_ADDR
// end ;
23983: LD_VAR 0 3
23987: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23988: LD_INT 0
23990: PPUSH
// if not chassis or not weapon then
23991: LD_VAR 0 1
23995: NOT
23996: PUSH
23997: LD_VAR 0 2
24001: NOT
24002: OR
24003: IFFALSE 24007
// exit ;
24005: GO 25033
// case weapon of us_machine_gun :
24007: LD_VAR 0 2
24011: PUSH
24012: LD_INT 2
24014: DOUBLE
24015: EQUAL
24016: IFTRUE 24020
24018: GO 24050
24020: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24021: LD_ADDR_VAR 0 3
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: LD_INT 2
24031: PUSH
24032: LD_INT 3
24034: PUSH
24035: LD_INT 4
24037: PUSH
24038: LD_INT 5
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: ST_TO_ADDR
24048: GO 25017
24050: LD_INT 3
24052: DOUBLE
24053: EQUAL
24054: IFTRUE 24058
24056: GO 24088
24058: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24059: LD_ADDR_VAR 0 3
24063: PUSH
24064: LD_INT 1
24066: PUSH
24067: LD_INT 2
24069: PUSH
24070: LD_INT 3
24072: PUSH
24073: LD_INT 4
24075: PUSH
24076: LD_INT 5
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: ST_TO_ADDR
24086: GO 25017
24088: LD_INT 11
24090: DOUBLE
24091: EQUAL
24092: IFTRUE 24096
24094: GO 24126
24096: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24097: LD_ADDR_VAR 0 3
24101: PUSH
24102: LD_INT 1
24104: PUSH
24105: LD_INT 2
24107: PUSH
24108: LD_INT 3
24110: PUSH
24111: LD_INT 4
24113: PUSH
24114: LD_INT 5
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: ST_TO_ADDR
24124: GO 25017
24126: LD_INT 4
24128: DOUBLE
24129: EQUAL
24130: IFTRUE 24134
24132: GO 24160
24134: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24135: LD_ADDR_VAR 0 3
24139: PUSH
24140: LD_INT 2
24142: PUSH
24143: LD_INT 3
24145: PUSH
24146: LD_INT 4
24148: PUSH
24149: LD_INT 5
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: ST_TO_ADDR
24158: GO 25017
24160: LD_INT 5
24162: DOUBLE
24163: EQUAL
24164: IFTRUE 24168
24166: GO 24194
24168: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24169: LD_ADDR_VAR 0 3
24173: PUSH
24174: LD_INT 2
24176: PUSH
24177: LD_INT 3
24179: PUSH
24180: LD_INT 4
24182: PUSH
24183: LD_INT 5
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: ST_TO_ADDR
24192: GO 25017
24194: LD_INT 9
24196: DOUBLE
24197: EQUAL
24198: IFTRUE 24202
24200: GO 24228
24202: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24203: LD_ADDR_VAR 0 3
24207: PUSH
24208: LD_INT 2
24210: PUSH
24211: LD_INT 3
24213: PUSH
24214: LD_INT 4
24216: PUSH
24217: LD_INT 5
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: ST_TO_ADDR
24226: GO 25017
24228: LD_INT 7
24230: DOUBLE
24231: EQUAL
24232: IFTRUE 24236
24234: GO 24262
24236: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24237: LD_ADDR_VAR 0 3
24241: PUSH
24242: LD_INT 2
24244: PUSH
24245: LD_INT 3
24247: PUSH
24248: LD_INT 4
24250: PUSH
24251: LD_INT 5
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: ST_TO_ADDR
24260: GO 25017
24262: LD_INT 12
24264: DOUBLE
24265: EQUAL
24266: IFTRUE 24270
24268: GO 24296
24270: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24271: LD_ADDR_VAR 0 3
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: LD_INT 3
24281: PUSH
24282: LD_INT 4
24284: PUSH
24285: LD_INT 5
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: ST_TO_ADDR
24294: GO 25017
24296: LD_INT 13
24298: DOUBLE
24299: EQUAL
24300: IFTRUE 24304
24302: GO 24330
24304: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24305: LD_ADDR_VAR 0 3
24309: PUSH
24310: LD_INT 2
24312: PUSH
24313: LD_INT 3
24315: PUSH
24316: LD_INT 4
24318: PUSH
24319: LD_INT 5
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: ST_TO_ADDR
24328: GO 25017
24330: LD_INT 14
24332: DOUBLE
24333: EQUAL
24334: IFTRUE 24338
24336: GO 24356
24338: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24339: LD_ADDR_VAR 0 3
24343: PUSH
24344: LD_INT 4
24346: PUSH
24347: LD_INT 5
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: ST_TO_ADDR
24354: GO 25017
24356: LD_INT 6
24358: DOUBLE
24359: EQUAL
24360: IFTRUE 24364
24362: GO 24382
24364: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24365: LD_ADDR_VAR 0 3
24369: PUSH
24370: LD_INT 4
24372: PUSH
24373: LD_INT 5
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: ST_TO_ADDR
24380: GO 25017
24382: LD_INT 10
24384: DOUBLE
24385: EQUAL
24386: IFTRUE 24390
24388: GO 24408
24390: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24391: LD_ADDR_VAR 0 3
24395: PUSH
24396: LD_INT 4
24398: PUSH
24399: LD_INT 5
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: ST_TO_ADDR
24406: GO 25017
24408: LD_INT 22
24410: DOUBLE
24411: EQUAL
24412: IFTRUE 24416
24414: GO 24442
24416: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24417: LD_ADDR_VAR 0 3
24421: PUSH
24422: LD_INT 11
24424: PUSH
24425: LD_INT 12
24427: PUSH
24428: LD_INT 13
24430: PUSH
24431: LD_INT 14
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: ST_TO_ADDR
24440: GO 25017
24442: LD_INT 23
24444: DOUBLE
24445: EQUAL
24446: IFTRUE 24450
24448: GO 24476
24450: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24451: LD_ADDR_VAR 0 3
24455: PUSH
24456: LD_INT 11
24458: PUSH
24459: LD_INT 12
24461: PUSH
24462: LD_INT 13
24464: PUSH
24465: LD_INT 14
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: ST_TO_ADDR
24474: GO 25017
24476: LD_INT 24
24478: DOUBLE
24479: EQUAL
24480: IFTRUE 24484
24482: GO 24510
24484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24485: LD_ADDR_VAR 0 3
24489: PUSH
24490: LD_INT 11
24492: PUSH
24493: LD_INT 12
24495: PUSH
24496: LD_INT 13
24498: PUSH
24499: LD_INT 14
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: ST_TO_ADDR
24508: GO 25017
24510: LD_INT 30
24512: DOUBLE
24513: EQUAL
24514: IFTRUE 24518
24516: GO 24544
24518: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24519: LD_ADDR_VAR 0 3
24523: PUSH
24524: LD_INT 11
24526: PUSH
24527: LD_INT 12
24529: PUSH
24530: LD_INT 13
24532: PUSH
24533: LD_INT 14
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: ST_TO_ADDR
24542: GO 25017
24544: LD_INT 25
24546: DOUBLE
24547: EQUAL
24548: IFTRUE 24552
24550: GO 24570
24552: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24553: LD_ADDR_VAR 0 3
24557: PUSH
24558: LD_INT 13
24560: PUSH
24561: LD_INT 14
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: ST_TO_ADDR
24568: GO 25017
24570: LD_INT 27
24572: DOUBLE
24573: EQUAL
24574: IFTRUE 24578
24576: GO 24596
24578: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24579: LD_ADDR_VAR 0 3
24583: PUSH
24584: LD_INT 13
24586: PUSH
24587: LD_INT 14
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: ST_TO_ADDR
24594: GO 25017
24596: LD_INT 28
24598: DOUBLE
24599: EQUAL
24600: IFTRUE 24604
24602: GO 24622
24604: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24605: LD_ADDR_VAR 0 3
24609: PUSH
24610: LD_INT 13
24612: PUSH
24613: LD_INT 14
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: ST_TO_ADDR
24620: GO 25017
24622: LD_INT 29
24624: DOUBLE
24625: EQUAL
24626: IFTRUE 24630
24628: GO 24648
24630: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24631: LD_ADDR_VAR 0 3
24635: PUSH
24636: LD_INT 13
24638: PUSH
24639: LD_INT 14
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: ST_TO_ADDR
24646: GO 25017
24648: LD_INT 31
24650: DOUBLE
24651: EQUAL
24652: IFTRUE 24656
24654: GO 24674
24656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24657: LD_ADDR_VAR 0 3
24661: PUSH
24662: LD_INT 13
24664: PUSH
24665: LD_INT 14
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: ST_TO_ADDR
24672: GO 25017
24674: LD_INT 26
24676: DOUBLE
24677: EQUAL
24678: IFTRUE 24682
24680: GO 24700
24682: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: LD_INT 13
24690: PUSH
24691: LD_INT 14
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: ST_TO_ADDR
24698: GO 25017
24700: LD_INT 42
24702: DOUBLE
24703: EQUAL
24704: IFTRUE 24708
24706: GO 24734
24708: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24709: LD_ADDR_VAR 0 3
24713: PUSH
24714: LD_INT 21
24716: PUSH
24717: LD_INT 22
24719: PUSH
24720: LD_INT 23
24722: PUSH
24723: LD_INT 24
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: ST_TO_ADDR
24732: GO 25017
24734: LD_INT 43
24736: DOUBLE
24737: EQUAL
24738: IFTRUE 24742
24740: GO 24768
24742: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24743: LD_ADDR_VAR 0 3
24747: PUSH
24748: LD_INT 21
24750: PUSH
24751: LD_INT 22
24753: PUSH
24754: LD_INT 23
24756: PUSH
24757: LD_INT 24
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: ST_TO_ADDR
24766: GO 25017
24768: LD_INT 44
24770: DOUBLE
24771: EQUAL
24772: IFTRUE 24776
24774: GO 24802
24776: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24777: LD_ADDR_VAR 0 3
24781: PUSH
24782: LD_INT 21
24784: PUSH
24785: LD_INT 22
24787: PUSH
24788: LD_INT 23
24790: PUSH
24791: LD_INT 24
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: ST_TO_ADDR
24800: GO 25017
24802: LD_INT 45
24804: DOUBLE
24805: EQUAL
24806: IFTRUE 24810
24808: GO 24836
24810: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24811: LD_ADDR_VAR 0 3
24815: PUSH
24816: LD_INT 21
24818: PUSH
24819: LD_INT 22
24821: PUSH
24822: LD_INT 23
24824: PUSH
24825: LD_INT 24
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: ST_TO_ADDR
24834: GO 25017
24836: LD_INT 49
24838: DOUBLE
24839: EQUAL
24840: IFTRUE 24844
24842: GO 24870
24844: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24845: LD_ADDR_VAR 0 3
24849: PUSH
24850: LD_INT 21
24852: PUSH
24853: LD_INT 22
24855: PUSH
24856: LD_INT 23
24858: PUSH
24859: LD_INT 24
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: ST_TO_ADDR
24868: GO 25017
24870: LD_INT 51
24872: DOUBLE
24873: EQUAL
24874: IFTRUE 24878
24876: GO 24904
24878: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24879: LD_ADDR_VAR 0 3
24883: PUSH
24884: LD_INT 21
24886: PUSH
24887: LD_INT 22
24889: PUSH
24890: LD_INT 23
24892: PUSH
24893: LD_INT 24
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: ST_TO_ADDR
24902: GO 25017
24904: LD_INT 52
24906: DOUBLE
24907: EQUAL
24908: IFTRUE 24912
24910: GO 24938
24912: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24913: LD_ADDR_VAR 0 3
24917: PUSH
24918: LD_INT 21
24920: PUSH
24921: LD_INT 22
24923: PUSH
24924: LD_INT 23
24926: PUSH
24927: LD_INT 24
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: ST_TO_ADDR
24936: GO 25017
24938: LD_INT 53
24940: DOUBLE
24941: EQUAL
24942: IFTRUE 24946
24944: GO 24964
24946: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24947: LD_ADDR_VAR 0 3
24951: PUSH
24952: LD_INT 23
24954: PUSH
24955: LD_INT 24
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: ST_TO_ADDR
24962: GO 25017
24964: LD_INT 46
24966: DOUBLE
24967: EQUAL
24968: IFTRUE 24972
24970: GO 24990
24972: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24973: LD_ADDR_VAR 0 3
24977: PUSH
24978: LD_INT 23
24980: PUSH
24981: LD_INT 24
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: ST_TO_ADDR
24988: GO 25017
24990: LD_INT 47
24992: DOUBLE
24993: EQUAL
24994: IFTRUE 24998
24996: GO 25016
24998: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24999: LD_ADDR_VAR 0 3
25003: PUSH
25004: LD_INT 23
25006: PUSH
25007: LD_INT 24
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: ST_TO_ADDR
25014: GO 25017
25016: POP
// result := ( chassis in result ) ;
25017: LD_ADDR_VAR 0 3
25021: PUSH
25022: LD_VAR 0 1
25026: PUSH
25027: LD_VAR 0 3
25031: IN
25032: ST_TO_ADDR
// end ;
25033: LD_VAR 0 3
25037: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25038: LD_INT 0
25040: PPUSH
25041: PPUSH
25042: PPUSH
25043: PPUSH
25044: PPUSH
25045: PPUSH
25046: PPUSH
// result := array ;
25047: LD_ADDR_VAR 0 5
25051: PUSH
25052: LD_VAR 0 1
25056: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25057: LD_VAR 0 1
25061: NOT
25062: PUSH
25063: LD_VAR 0 2
25067: NOT
25068: OR
25069: PUSH
25070: LD_VAR 0 3
25074: NOT
25075: OR
25076: PUSH
25077: LD_VAR 0 2
25081: PUSH
25082: LD_VAR 0 1
25086: GREATER
25087: OR
25088: PUSH
25089: LD_VAR 0 3
25093: PUSH
25094: LD_VAR 0 1
25098: GREATER
25099: OR
25100: IFFALSE 25104
// exit ;
25102: GO 25400
// if direction then
25104: LD_VAR 0 4
25108: IFFALSE 25172
// begin d := 1 ;
25110: LD_ADDR_VAR 0 9
25114: PUSH
25115: LD_INT 1
25117: ST_TO_ADDR
// if i_from > i_to then
25118: LD_VAR 0 2
25122: PUSH
25123: LD_VAR 0 3
25127: GREATER
25128: IFFALSE 25154
// length := ( array - i_from ) + i_to else
25130: LD_ADDR_VAR 0 11
25134: PUSH
25135: LD_VAR 0 1
25139: PUSH
25140: LD_VAR 0 2
25144: MINUS
25145: PUSH
25146: LD_VAR 0 3
25150: PLUS
25151: ST_TO_ADDR
25152: GO 25170
// length := i_to - i_from ;
25154: LD_ADDR_VAR 0 11
25158: PUSH
25159: LD_VAR 0 3
25163: PUSH
25164: LD_VAR 0 2
25168: MINUS
25169: ST_TO_ADDR
// end else
25170: GO 25233
// begin d := - 1 ;
25172: LD_ADDR_VAR 0 9
25176: PUSH
25177: LD_INT 1
25179: NEG
25180: ST_TO_ADDR
// if i_from > i_to then
25181: LD_VAR 0 2
25185: PUSH
25186: LD_VAR 0 3
25190: GREATER
25191: IFFALSE 25211
// length := i_from - i_to else
25193: LD_ADDR_VAR 0 11
25197: PUSH
25198: LD_VAR 0 2
25202: PUSH
25203: LD_VAR 0 3
25207: MINUS
25208: ST_TO_ADDR
25209: GO 25233
// length := ( array - i_to ) + i_from ;
25211: LD_ADDR_VAR 0 11
25215: PUSH
25216: LD_VAR 0 1
25220: PUSH
25221: LD_VAR 0 3
25225: MINUS
25226: PUSH
25227: LD_VAR 0 2
25231: PLUS
25232: ST_TO_ADDR
// end ; if not length then
25233: LD_VAR 0 11
25237: NOT
25238: IFFALSE 25242
// exit ;
25240: GO 25400
// tmp := array ;
25242: LD_ADDR_VAR 0 10
25246: PUSH
25247: LD_VAR 0 1
25251: ST_TO_ADDR
// for i = 1 to length do
25252: LD_ADDR_VAR 0 6
25256: PUSH
25257: DOUBLE
25258: LD_INT 1
25260: DEC
25261: ST_TO_ADDR
25262: LD_VAR 0 11
25266: PUSH
25267: FOR_TO
25268: IFFALSE 25388
// begin for j = 1 to array do
25270: LD_ADDR_VAR 0 7
25274: PUSH
25275: DOUBLE
25276: LD_INT 1
25278: DEC
25279: ST_TO_ADDR
25280: LD_VAR 0 1
25284: PUSH
25285: FOR_TO
25286: IFFALSE 25374
// begin k := j + d ;
25288: LD_ADDR_VAR 0 8
25292: PUSH
25293: LD_VAR 0 7
25297: PUSH
25298: LD_VAR 0 9
25302: PLUS
25303: ST_TO_ADDR
// if k > array then
25304: LD_VAR 0 8
25308: PUSH
25309: LD_VAR 0 1
25313: GREATER
25314: IFFALSE 25324
// k := 1 ;
25316: LD_ADDR_VAR 0 8
25320: PUSH
25321: LD_INT 1
25323: ST_TO_ADDR
// if not k then
25324: LD_VAR 0 8
25328: NOT
25329: IFFALSE 25341
// k := array ;
25331: LD_ADDR_VAR 0 8
25335: PUSH
25336: LD_VAR 0 1
25340: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25341: LD_ADDR_VAR 0 10
25345: PUSH
25346: LD_VAR 0 10
25350: PPUSH
25351: LD_VAR 0 8
25355: PPUSH
25356: LD_VAR 0 1
25360: PUSH
25361: LD_VAR 0 7
25365: ARRAY
25366: PPUSH
25367: CALL_OW 1
25371: ST_TO_ADDR
// end ;
25372: GO 25285
25374: POP
25375: POP
// array := tmp ;
25376: LD_ADDR_VAR 0 1
25380: PUSH
25381: LD_VAR 0 10
25385: ST_TO_ADDR
// end ;
25386: GO 25267
25388: POP
25389: POP
// result := array ;
25390: LD_ADDR_VAR 0 5
25394: PUSH
25395: LD_VAR 0 1
25399: ST_TO_ADDR
// end ;
25400: LD_VAR 0 5
25404: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25405: LD_INT 0
25407: PPUSH
25408: PPUSH
// result := 0 ;
25409: LD_ADDR_VAR 0 3
25413: PUSH
25414: LD_INT 0
25416: ST_TO_ADDR
// if not array or not value in array then
25417: LD_VAR 0 1
25421: NOT
25422: PUSH
25423: LD_VAR 0 2
25427: PUSH
25428: LD_VAR 0 1
25432: IN
25433: NOT
25434: OR
25435: IFFALSE 25439
// exit ;
25437: GO 25493
// for i = 1 to array do
25439: LD_ADDR_VAR 0 4
25443: PUSH
25444: DOUBLE
25445: LD_INT 1
25447: DEC
25448: ST_TO_ADDR
25449: LD_VAR 0 1
25453: PUSH
25454: FOR_TO
25455: IFFALSE 25491
// if value = array [ i ] then
25457: LD_VAR 0 2
25461: PUSH
25462: LD_VAR 0 1
25466: PUSH
25467: LD_VAR 0 4
25471: ARRAY
25472: EQUAL
25473: IFFALSE 25489
// begin result := i ;
25475: LD_ADDR_VAR 0 3
25479: PUSH
25480: LD_VAR 0 4
25484: ST_TO_ADDR
// exit ;
25485: POP
25486: POP
25487: GO 25493
// end ;
25489: GO 25454
25491: POP
25492: POP
// end ;
25493: LD_VAR 0 3
25497: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25498: LD_INT 0
25500: PPUSH
// vc_chassis := chassis ;
25501: LD_ADDR_OWVAR 37
25505: PUSH
25506: LD_VAR 0 1
25510: ST_TO_ADDR
// vc_engine := engine ;
25511: LD_ADDR_OWVAR 39
25515: PUSH
25516: LD_VAR 0 2
25520: ST_TO_ADDR
// vc_control := control ;
25521: LD_ADDR_OWVAR 38
25525: PUSH
25526: LD_VAR 0 3
25530: ST_TO_ADDR
// vc_weapon := weapon ;
25531: LD_ADDR_OWVAR 40
25535: PUSH
25536: LD_VAR 0 4
25540: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25541: LD_ADDR_OWVAR 41
25545: PUSH
25546: LD_VAR 0 5
25550: ST_TO_ADDR
// end ;
25551: LD_VAR 0 6
25555: RET
// export function WantPlant ( unit ) ; var task ; begin
25556: LD_INT 0
25558: PPUSH
25559: PPUSH
// result := false ;
25560: LD_ADDR_VAR 0 2
25564: PUSH
25565: LD_INT 0
25567: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25568: LD_ADDR_VAR 0 3
25572: PUSH
25573: LD_VAR 0 1
25577: PPUSH
25578: CALL_OW 437
25582: ST_TO_ADDR
// if task then
25583: LD_VAR 0 3
25587: IFFALSE 25615
// if task [ 1 ] [ 1 ] = p then
25589: LD_VAR 0 3
25593: PUSH
25594: LD_INT 1
25596: ARRAY
25597: PUSH
25598: LD_INT 1
25600: ARRAY
25601: PUSH
25602: LD_STRING p
25604: EQUAL
25605: IFFALSE 25615
// result := true ;
25607: LD_ADDR_VAR 0 2
25611: PUSH
25612: LD_INT 1
25614: ST_TO_ADDR
// end ;
25615: LD_VAR 0 2
25619: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25620: LD_INT 0
25622: PPUSH
25623: PPUSH
25624: PPUSH
25625: PPUSH
// if pos < 1 then
25626: LD_VAR 0 2
25630: PUSH
25631: LD_INT 1
25633: LESS
25634: IFFALSE 25638
// exit ;
25636: GO 25941
// if pos = 1 then
25638: LD_VAR 0 2
25642: PUSH
25643: LD_INT 1
25645: EQUAL
25646: IFFALSE 25679
// result := Replace ( arr , pos [ 1 ] , value ) else
25648: LD_ADDR_VAR 0 4
25652: PUSH
25653: LD_VAR 0 1
25657: PPUSH
25658: LD_VAR 0 2
25662: PUSH
25663: LD_INT 1
25665: ARRAY
25666: PPUSH
25667: LD_VAR 0 3
25671: PPUSH
25672: CALL_OW 1
25676: ST_TO_ADDR
25677: GO 25941
// begin tmp := arr ;
25679: LD_ADDR_VAR 0 6
25683: PUSH
25684: LD_VAR 0 1
25688: ST_TO_ADDR
// s_arr := [ tmp ] ;
25689: LD_ADDR_VAR 0 7
25693: PUSH
25694: LD_VAR 0 6
25698: PUSH
25699: EMPTY
25700: LIST
25701: ST_TO_ADDR
// for i = 1 to pos - 1 do
25702: LD_ADDR_VAR 0 5
25706: PUSH
25707: DOUBLE
25708: LD_INT 1
25710: DEC
25711: ST_TO_ADDR
25712: LD_VAR 0 2
25716: PUSH
25717: LD_INT 1
25719: MINUS
25720: PUSH
25721: FOR_TO
25722: IFFALSE 25767
// begin tmp := tmp [ pos [ i ] ] ;
25724: LD_ADDR_VAR 0 6
25728: PUSH
25729: LD_VAR 0 6
25733: PUSH
25734: LD_VAR 0 2
25738: PUSH
25739: LD_VAR 0 5
25743: ARRAY
25744: ARRAY
25745: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25746: LD_ADDR_VAR 0 7
25750: PUSH
25751: LD_VAR 0 7
25755: PUSH
25756: LD_VAR 0 6
25760: PUSH
25761: EMPTY
25762: LIST
25763: ADD
25764: ST_TO_ADDR
// end ;
25765: GO 25721
25767: POP
25768: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25769: LD_ADDR_VAR 0 6
25773: PUSH
25774: LD_VAR 0 6
25778: PPUSH
25779: LD_VAR 0 2
25783: PUSH
25784: LD_VAR 0 2
25788: ARRAY
25789: PPUSH
25790: LD_VAR 0 3
25794: PPUSH
25795: CALL_OW 1
25799: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25800: LD_ADDR_VAR 0 7
25804: PUSH
25805: LD_VAR 0 7
25809: PPUSH
25810: LD_VAR 0 7
25814: PPUSH
25815: LD_VAR 0 6
25819: PPUSH
25820: CALL_OW 1
25824: ST_TO_ADDR
// for i = s_arr downto 2 do
25825: LD_ADDR_VAR 0 5
25829: PUSH
25830: DOUBLE
25831: LD_VAR 0 7
25835: INC
25836: ST_TO_ADDR
25837: LD_INT 2
25839: PUSH
25840: FOR_DOWNTO
25841: IFFALSE 25925
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25843: LD_ADDR_VAR 0 6
25847: PUSH
25848: LD_VAR 0 7
25852: PUSH
25853: LD_VAR 0 5
25857: PUSH
25858: LD_INT 1
25860: MINUS
25861: ARRAY
25862: PPUSH
25863: LD_VAR 0 2
25867: PUSH
25868: LD_VAR 0 5
25872: PUSH
25873: LD_INT 1
25875: MINUS
25876: ARRAY
25877: PPUSH
25878: LD_VAR 0 7
25882: PUSH
25883: LD_VAR 0 5
25887: ARRAY
25888: PPUSH
25889: CALL_OW 1
25893: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25894: LD_ADDR_VAR 0 7
25898: PUSH
25899: LD_VAR 0 7
25903: PPUSH
25904: LD_VAR 0 5
25908: PUSH
25909: LD_INT 1
25911: MINUS
25912: PPUSH
25913: LD_VAR 0 6
25917: PPUSH
25918: CALL_OW 1
25922: ST_TO_ADDR
// end ;
25923: GO 25840
25925: POP
25926: POP
// result := s_arr [ 1 ] ;
25927: LD_ADDR_VAR 0 4
25931: PUSH
25932: LD_VAR 0 7
25936: PUSH
25937: LD_INT 1
25939: ARRAY
25940: ST_TO_ADDR
// end ; end ;
25941: LD_VAR 0 4
25945: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25946: LD_INT 0
25948: PPUSH
25949: PPUSH
// if not list then
25950: LD_VAR 0 1
25954: NOT
25955: IFFALSE 25959
// exit ;
25957: GO 26050
// i := list [ pos1 ] ;
25959: LD_ADDR_VAR 0 5
25963: PUSH
25964: LD_VAR 0 1
25968: PUSH
25969: LD_VAR 0 2
25973: ARRAY
25974: ST_TO_ADDR
// if not i then
25975: LD_VAR 0 5
25979: NOT
25980: IFFALSE 25984
// exit ;
25982: GO 26050
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25984: LD_ADDR_VAR 0 1
25988: PUSH
25989: LD_VAR 0 1
25993: PPUSH
25994: LD_VAR 0 2
25998: PPUSH
25999: LD_VAR 0 1
26003: PUSH
26004: LD_VAR 0 3
26008: ARRAY
26009: PPUSH
26010: CALL_OW 1
26014: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26015: LD_ADDR_VAR 0 1
26019: PUSH
26020: LD_VAR 0 1
26024: PPUSH
26025: LD_VAR 0 3
26029: PPUSH
26030: LD_VAR 0 5
26034: PPUSH
26035: CALL_OW 1
26039: ST_TO_ADDR
// result := list ;
26040: LD_ADDR_VAR 0 4
26044: PUSH
26045: LD_VAR 0 1
26049: ST_TO_ADDR
// end ;
26050: LD_VAR 0 4
26054: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26055: LD_INT 0
26057: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26058: LD_ADDR_VAR 0 5
26062: PUSH
26063: LD_VAR 0 1
26067: PPUSH
26068: CALL_OW 250
26072: PPUSH
26073: LD_VAR 0 1
26077: PPUSH
26078: CALL_OW 251
26082: PPUSH
26083: LD_VAR 0 2
26087: PPUSH
26088: LD_VAR 0 3
26092: PPUSH
26093: LD_VAR 0 4
26097: PPUSH
26098: CALL 26108 0 5
26102: ST_TO_ADDR
// end ;
26103: LD_VAR 0 5
26107: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26108: LD_INT 0
26110: PPUSH
26111: PPUSH
26112: PPUSH
26113: PPUSH
// if not list then
26114: LD_VAR 0 3
26118: NOT
26119: IFFALSE 26123
// exit ;
26121: GO 26511
// result := [ ] ;
26123: LD_ADDR_VAR 0 6
26127: PUSH
26128: EMPTY
26129: ST_TO_ADDR
// for i in list do
26130: LD_ADDR_VAR 0 7
26134: PUSH
26135: LD_VAR 0 3
26139: PUSH
26140: FOR_IN
26141: IFFALSE 26343
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26143: LD_ADDR_VAR 0 9
26147: PUSH
26148: LD_VAR 0 7
26152: PPUSH
26153: LD_VAR 0 1
26157: PPUSH
26158: LD_VAR 0 2
26162: PPUSH
26163: CALL_OW 297
26167: ST_TO_ADDR
// if not result then
26168: LD_VAR 0 6
26172: NOT
26173: IFFALSE 26199
// result := [ [ i , tmp ] ] else
26175: LD_ADDR_VAR 0 6
26179: PUSH
26180: LD_VAR 0 7
26184: PUSH
26185: LD_VAR 0 9
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: EMPTY
26195: LIST
26196: ST_TO_ADDR
26197: GO 26341
// begin if result [ result ] [ 2 ] < tmp then
26199: LD_VAR 0 6
26203: PUSH
26204: LD_VAR 0 6
26208: ARRAY
26209: PUSH
26210: LD_INT 2
26212: ARRAY
26213: PUSH
26214: LD_VAR 0 9
26218: LESS
26219: IFFALSE 26261
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26221: LD_ADDR_VAR 0 6
26225: PUSH
26226: LD_VAR 0 6
26230: PPUSH
26231: LD_VAR 0 6
26235: PUSH
26236: LD_INT 1
26238: PLUS
26239: PPUSH
26240: LD_VAR 0 7
26244: PUSH
26245: LD_VAR 0 9
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PPUSH
26254: CALL_OW 2
26258: ST_TO_ADDR
26259: GO 26341
// for j = 1 to result do
26261: LD_ADDR_VAR 0 8
26265: PUSH
26266: DOUBLE
26267: LD_INT 1
26269: DEC
26270: ST_TO_ADDR
26271: LD_VAR 0 6
26275: PUSH
26276: FOR_TO
26277: IFFALSE 26339
// begin if tmp < result [ j ] [ 2 ] then
26279: LD_VAR 0 9
26283: PUSH
26284: LD_VAR 0 6
26288: PUSH
26289: LD_VAR 0 8
26293: ARRAY
26294: PUSH
26295: LD_INT 2
26297: ARRAY
26298: LESS
26299: IFFALSE 26337
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26301: LD_ADDR_VAR 0 6
26305: PUSH
26306: LD_VAR 0 6
26310: PPUSH
26311: LD_VAR 0 8
26315: PPUSH
26316: LD_VAR 0 7
26320: PUSH
26321: LD_VAR 0 9
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PPUSH
26330: CALL_OW 2
26334: ST_TO_ADDR
// break ;
26335: GO 26339
// end ; end ;
26337: GO 26276
26339: POP
26340: POP
// end ; end ;
26341: GO 26140
26343: POP
26344: POP
// if result and not asc then
26345: LD_VAR 0 6
26349: PUSH
26350: LD_VAR 0 4
26354: NOT
26355: AND
26356: IFFALSE 26431
// begin tmp := result ;
26358: LD_ADDR_VAR 0 9
26362: PUSH
26363: LD_VAR 0 6
26367: ST_TO_ADDR
// for i = tmp downto 1 do
26368: LD_ADDR_VAR 0 7
26372: PUSH
26373: DOUBLE
26374: LD_VAR 0 9
26378: INC
26379: ST_TO_ADDR
26380: LD_INT 1
26382: PUSH
26383: FOR_DOWNTO
26384: IFFALSE 26429
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26386: LD_ADDR_VAR 0 6
26390: PUSH
26391: LD_VAR 0 6
26395: PPUSH
26396: LD_VAR 0 9
26400: PUSH
26401: LD_VAR 0 7
26405: MINUS
26406: PUSH
26407: LD_INT 1
26409: PLUS
26410: PPUSH
26411: LD_VAR 0 9
26415: PUSH
26416: LD_VAR 0 7
26420: ARRAY
26421: PPUSH
26422: CALL_OW 1
26426: ST_TO_ADDR
26427: GO 26383
26429: POP
26430: POP
// end ; tmp := [ ] ;
26431: LD_ADDR_VAR 0 9
26435: PUSH
26436: EMPTY
26437: ST_TO_ADDR
// if mode then
26438: LD_VAR 0 5
26442: IFFALSE 26511
// begin for i = 1 to result do
26444: LD_ADDR_VAR 0 7
26448: PUSH
26449: DOUBLE
26450: LD_INT 1
26452: DEC
26453: ST_TO_ADDR
26454: LD_VAR 0 6
26458: PUSH
26459: FOR_TO
26460: IFFALSE 26499
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26462: LD_ADDR_VAR 0 9
26466: PUSH
26467: LD_VAR 0 9
26471: PPUSH
26472: LD_VAR 0 7
26476: PPUSH
26477: LD_VAR 0 6
26481: PUSH
26482: LD_VAR 0 7
26486: ARRAY
26487: PUSH
26488: LD_INT 1
26490: ARRAY
26491: PPUSH
26492: CALL_OW 1
26496: ST_TO_ADDR
26497: GO 26459
26499: POP
26500: POP
// result := tmp ;
26501: LD_ADDR_VAR 0 6
26505: PUSH
26506: LD_VAR 0 9
26510: ST_TO_ADDR
// end ; end ;
26511: LD_VAR 0 6
26515: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26516: LD_INT 0
26518: PPUSH
26519: PPUSH
26520: PPUSH
26521: PPUSH
26522: PPUSH
26523: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26524: LD_ADDR_VAR 0 5
26528: PUSH
26529: LD_INT 0
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: LD_INT 0
26537: PUSH
26538: EMPTY
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: ST_TO_ADDR
// if not x or not y then
26546: LD_VAR 0 2
26550: NOT
26551: PUSH
26552: LD_VAR 0 3
26556: NOT
26557: OR
26558: IFFALSE 26562
// exit ;
26560: GO 28208
// if not range then
26562: LD_VAR 0 4
26566: NOT
26567: IFFALSE 26577
// range := 10 ;
26569: LD_ADDR_VAR 0 4
26573: PUSH
26574: LD_INT 10
26576: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26577: LD_ADDR_VAR 0 8
26581: PUSH
26582: LD_INT 81
26584: PUSH
26585: LD_VAR 0 1
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 92
26596: PUSH
26597: LD_VAR 0 2
26601: PUSH
26602: LD_VAR 0 3
26606: PUSH
26607: LD_VAR 0 4
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 3
26620: PUSH
26621: LD_INT 21
26623: PUSH
26624: LD_INT 3
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: LIST
26639: PPUSH
26640: CALL_OW 69
26644: ST_TO_ADDR
// if not tmp then
26645: LD_VAR 0 8
26649: NOT
26650: IFFALSE 26654
// exit ;
26652: GO 28208
// for i in tmp do
26654: LD_ADDR_VAR 0 6
26658: PUSH
26659: LD_VAR 0 8
26663: PUSH
26664: FOR_IN
26665: IFFALSE 28183
// begin points := [ 0 , 0 , 0 ] ;
26667: LD_ADDR_VAR 0 9
26671: PUSH
26672: LD_INT 0
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: LIST
26685: ST_TO_ADDR
// bpoints := 1 ;
26686: LD_ADDR_VAR 0 10
26690: PUSH
26691: LD_INT 1
26693: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26694: LD_VAR 0 6
26698: PPUSH
26699: CALL_OW 247
26703: PUSH
26704: LD_INT 1
26706: DOUBLE
26707: EQUAL
26708: IFTRUE 26712
26710: GO 27290
26712: POP
// begin if GetClass ( i ) = 1 then
26713: LD_VAR 0 6
26717: PPUSH
26718: CALL_OW 257
26722: PUSH
26723: LD_INT 1
26725: EQUAL
26726: IFFALSE 26747
// points := [ 10 , 5 , 3 ] ;
26728: LD_ADDR_VAR 0 9
26732: PUSH
26733: LD_INT 10
26735: PUSH
26736: LD_INT 5
26738: PUSH
26739: LD_INT 3
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: LIST
26746: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26747: LD_VAR 0 6
26751: PPUSH
26752: CALL_OW 257
26756: PUSH
26757: LD_INT 2
26759: PUSH
26760: LD_INT 3
26762: PUSH
26763: LD_INT 4
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: LIST
26770: IN
26771: IFFALSE 26792
// points := [ 3 , 2 , 1 ] ;
26773: LD_ADDR_VAR 0 9
26777: PUSH
26778: LD_INT 3
26780: PUSH
26781: LD_INT 2
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: LIST
26791: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26792: LD_VAR 0 6
26796: PPUSH
26797: CALL_OW 257
26801: PUSH
26802: LD_INT 5
26804: EQUAL
26805: IFFALSE 26826
// points := [ 130 , 5 , 2 ] ;
26807: LD_ADDR_VAR 0 9
26811: PUSH
26812: LD_INT 130
26814: PUSH
26815: LD_INT 5
26817: PUSH
26818: LD_INT 2
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: LIST
26825: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26826: LD_VAR 0 6
26830: PPUSH
26831: CALL_OW 257
26835: PUSH
26836: LD_INT 8
26838: EQUAL
26839: IFFALSE 26860
// points := [ 35 , 35 , 30 ] ;
26841: LD_ADDR_VAR 0 9
26845: PUSH
26846: LD_INT 35
26848: PUSH
26849: LD_INT 35
26851: PUSH
26852: LD_INT 30
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: LIST
26859: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26860: LD_VAR 0 6
26864: PPUSH
26865: CALL_OW 257
26869: PUSH
26870: LD_INT 9
26872: EQUAL
26873: IFFALSE 26894
// points := [ 20 , 55 , 40 ] ;
26875: LD_ADDR_VAR 0 9
26879: PUSH
26880: LD_INT 20
26882: PUSH
26883: LD_INT 55
26885: PUSH
26886: LD_INT 40
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: LIST
26893: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26894: LD_VAR 0 6
26898: PPUSH
26899: CALL_OW 257
26903: PUSH
26904: LD_INT 12
26906: PUSH
26907: LD_INT 16
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: IN
26914: IFFALSE 26935
// points := [ 5 , 3 , 2 ] ;
26916: LD_ADDR_VAR 0 9
26920: PUSH
26921: LD_INT 5
26923: PUSH
26924: LD_INT 3
26926: PUSH
26927: LD_INT 2
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: LIST
26934: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26935: LD_VAR 0 6
26939: PPUSH
26940: CALL_OW 257
26944: PUSH
26945: LD_INT 17
26947: EQUAL
26948: IFFALSE 26969
// points := [ 100 , 50 , 75 ] ;
26950: LD_ADDR_VAR 0 9
26954: PUSH
26955: LD_INT 100
26957: PUSH
26958: LD_INT 50
26960: PUSH
26961: LD_INT 75
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: LIST
26968: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26969: LD_VAR 0 6
26973: PPUSH
26974: CALL_OW 257
26978: PUSH
26979: LD_INT 15
26981: EQUAL
26982: IFFALSE 27003
// points := [ 10 , 5 , 3 ] ;
26984: LD_ADDR_VAR 0 9
26988: PUSH
26989: LD_INT 10
26991: PUSH
26992: LD_INT 5
26994: PUSH
26995: LD_INT 3
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: LIST
27002: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27003: LD_VAR 0 6
27007: PPUSH
27008: CALL_OW 257
27012: PUSH
27013: LD_INT 14
27015: EQUAL
27016: IFFALSE 27037
// points := [ 10 , 0 , 0 ] ;
27018: LD_ADDR_VAR 0 9
27022: PUSH
27023: LD_INT 10
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: LIST
27036: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27037: LD_VAR 0 6
27041: PPUSH
27042: CALL_OW 257
27046: PUSH
27047: LD_INT 11
27049: EQUAL
27050: IFFALSE 27071
// points := [ 30 , 10 , 5 ] ;
27052: LD_ADDR_VAR 0 9
27056: PUSH
27057: LD_INT 30
27059: PUSH
27060: LD_INT 10
27062: PUSH
27063: LD_INT 5
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: LIST
27070: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27071: LD_VAR 0 1
27075: PPUSH
27076: LD_INT 5
27078: PPUSH
27079: CALL_OW 321
27083: PUSH
27084: LD_INT 2
27086: EQUAL
27087: IFFALSE 27104
// bpoints := bpoints * 1.8 ;
27089: LD_ADDR_VAR 0 10
27093: PUSH
27094: LD_VAR 0 10
27098: PUSH
27099: LD_REAL  1.80000000000000E+0000
27102: MUL
27103: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27104: LD_VAR 0 6
27108: PPUSH
27109: CALL_OW 257
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: LD_INT 2
27119: PUSH
27120: LD_INT 3
27122: PUSH
27123: LD_INT 4
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: IN
27132: PUSH
27133: LD_VAR 0 1
27137: PPUSH
27138: LD_INT 51
27140: PPUSH
27141: CALL_OW 321
27145: PUSH
27146: LD_INT 2
27148: EQUAL
27149: AND
27150: IFFALSE 27167
// bpoints := bpoints * 1.2 ;
27152: LD_ADDR_VAR 0 10
27156: PUSH
27157: LD_VAR 0 10
27161: PUSH
27162: LD_REAL  1.20000000000000E+0000
27165: MUL
27166: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27167: LD_VAR 0 6
27171: PPUSH
27172: CALL_OW 257
27176: PUSH
27177: LD_INT 5
27179: PUSH
27180: LD_INT 7
27182: PUSH
27183: LD_INT 9
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: LIST
27190: IN
27191: PUSH
27192: LD_VAR 0 1
27196: PPUSH
27197: LD_INT 52
27199: PPUSH
27200: CALL_OW 321
27204: PUSH
27205: LD_INT 2
27207: EQUAL
27208: AND
27209: IFFALSE 27226
// bpoints := bpoints * 1.5 ;
27211: LD_ADDR_VAR 0 10
27215: PUSH
27216: LD_VAR 0 10
27220: PUSH
27221: LD_REAL  1.50000000000000E+0000
27224: MUL
27225: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27226: LD_VAR 0 1
27230: PPUSH
27231: LD_INT 66
27233: PPUSH
27234: CALL_OW 321
27238: PUSH
27239: LD_INT 2
27241: EQUAL
27242: IFFALSE 27259
// bpoints := bpoints * 1.1 ;
27244: LD_ADDR_VAR 0 10
27248: PUSH
27249: LD_VAR 0 10
27253: PUSH
27254: LD_REAL  1.10000000000000E+0000
27257: MUL
27258: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27259: LD_ADDR_VAR 0 10
27263: PUSH
27264: LD_VAR 0 10
27268: PUSH
27269: LD_VAR 0 6
27273: PPUSH
27274: LD_INT 1
27276: PPUSH
27277: CALL_OW 259
27281: PUSH
27282: LD_REAL  1.15000000000000E+0000
27285: MUL
27286: MUL
27287: ST_TO_ADDR
// end ; unit_vehicle :
27288: GO 28112
27290: LD_INT 2
27292: DOUBLE
27293: EQUAL
27294: IFTRUE 27298
27296: GO 28100
27298: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27299: LD_VAR 0 6
27303: PPUSH
27304: CALL_OW 264
27308: PUSH
27309: LD_INT 2
27311: PUSH
27312: LD_INT 42
27314: PUSH
27315: LD_INT 24
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: LIST
27322: IN
27323: IFFALSE 27344
// points := [ 25 , 5 , 3 ] ;
27325: LD_ADDR_VAR 0 9
27329: PUSH
27330: LD_INT 25
27332: PUSH
27333: LD_INT 5
27335: PUSH
27336: LD_INT 3
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: LIST
27343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27344: LD_VAR 0 6
27348: PPUSH
27349: CALL_OW 264
27353: PUSH
27354: LD_INT 4
27356: PUSH
27357: LD_INT 43
27359: PUSH
27360: LD_INT 25
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: IN
27368: IFFALSE 27389
// points := [ 40 , 15 , 5 ] ;
27370: LD_ADDR_VAR 0 9
27374: PUSH
27375: LD_INT 40
27377: PUSH
27378: LD_INT 15
27380: PUSH
27381: LD_INT 5
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27389: LD_VAR 0 6
27393: PPUSH
27394: CALL_OW 264
27398: PUSH
27399: LD_INT 3
27401: PUSH
27402: LD_INT 23
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: IN
27409: IFFALSE 27430
// points := [ 7 , 25 , 8 ] ;
27411: LD_ADDR_VAR 0 9
27415: PUSH
27416: LD_INT 7
27418: PUSH
27419: LD_INT 25
27421: PUSH
27422: LD_INT 8
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: LIST
27429: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27430: LD_VAR 0 6
27434: PPUSH
27435: CALL_OW 264
27439: PUSH
27440: LD_INT 5
27442: PUSH
27443: LD_INT 27
27445: PUSH
27446: LD_INT 44
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: LIST
27453: IN
27454: IFFALSE 27475
// points := [ 14 , 50 , 16 ] ;
27456: LD_ADDR_VAR 0 9
27460: PUSH
27461: LD_INT 14
27463: PUSH
27464: LD_INT 50
27466: PUSH
27467: LD_INT 16
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: LIST
27474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27475: LD_VAR 0 6
27479: PPUSH
27480: CALL_OW 264
27484: PUSH
27485: LD_INT 6
27487: PUSH
27488: LD_INT 46
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: IN
27495: IFFALSE 27516
// points := [ 32 , 120 , 70 ] ;
27497: LD_ADDR_VAR 0 9
27501: PUSH
27502: LD_INT 32
27504: PUSH
27505: LD_INT 120
27507: PUSH
27508: LD_INT 70
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: LIST
27515: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27516: LD_VAR 0 6
27520: PPUSH
27521: CALL_OW 264
27525: PUSH
27526: LD_INT 7
27528: PUSH
27529: LD_INT 28
27531: PUSH
27532: LD_INT 45
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: LIST
27539: IN
27540: IFFALSE 27561
// points := [ 35 , 20 , 45 ] ;
27542: LD_ADDR_VAR 0 9
27546: PUSH
27547: LD_INT 35
27549: PUSH
27550: LD_INT 20
27552: PUSH
27553: LD_INT 45
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27561: LD_VAR 0 6
27565: PPUSH
27566: CALL_OW 264
27570: PUSH
27571: LD_INT 47
27573: PUSH
27574: EMPTY
27575: LIST
27576: IN
27577: IFFALSE 27598
// points := [ 67 , 45 , 75 ] ;
27579: LD_ADDR_VAR 0 9
27583: PUSH
27584: LD_INT 67
27586: PUSH
27587: LD_INT 45
27589: PUSH
27590: LD_INT 75
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: LIST
27597: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27598: LD_VAR 0 6
27602: PPUSH
27603: CALL_OW 264
27607: PUSH
27608: LD_INT 26
27610: PUSH
27611: EMPTY
27612: LIST
27613: IN
27614: IFFALSE 27635
// points := [ 120 , 30 , 80 ] ;
27616: LD_ADDR_VAR 0 9
27620: PUSH
27621: LD_INT 120
27623: PUSH
27624: LD_INT 30
27626: PUSH
27627: LD_INT 80
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: LIST
27634: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27635: LD_VAR 0 6
27639: PPUSH
27640: CALL_OW 264
27644: PUSH
27645: LD_INT 22
27647: PUSH
27648: EMPTY
27649: LIST
27650: IN
27651: IFFALSE 27672
// points := [ 40 , 1 , 1 ] ;
27653: LD_ADDR_VAR 0 9
27657: PUSH
27658: LD_INT 40
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: EMPTY
27668: LIST
27669: LIST
27670: LIST
27671: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27672: LD_VAR 0 6
27676: PPUSH
27677: CALL_OW 264
27681: PUSH
27682: LD_INT 29
27684: PUSH
27685: EMPTY
27686: LIST
27687: IN
27688: IFFALSE 27709
// points := [ 70 , 200 , 400 ] ;
27690: LD_ADDR_VAR 0 9
27694: PUSH
27695: LD_INT 70
27697: PUSH
27698: LD_INT 200
27700: PUSH
27701: LD_INT 400
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: LIST
27708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27709: LD_VAR 0 6
27713: PPUSH
27714: CALL_OW 264
27718: PUSH
27719: LD_INT 14
27721: PUSH
27722: LD_INT 53
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: IN
27729: IFFALSE 27750
// points := [ 40 , 10 , 20 ] ;
27731: LD_ADDR_VAR 0 9
27735: PUSH
27736: LD_INT 40
27738: PUSH
27739: LD_INT 10
27741: PUSH
27742: LD_INT 20
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: LIST
27749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27750: LD_VAR 0 6
27754: PPUSH
27755: CALL_OW 264
27759: PUSH
27760: LD_INT 9
27762: PUSH
27763: EMPTY
27764: LIST
27765: IN
27766: IFFALSE 27787
// points := [ 5 , 70 , 20 ] ;
27768: LD_ADDR_VAR 0 9
27772: PUSH
27773: LD_INT 5
27775: PUSH
27776: LD_INT 70
27778: PUSH
27779: LD_INT 20
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27787: LD_VAR 0 6
27791: PPUSH
27792: CALL_OW 264
27796: PUSH
27797: LD_INT 10
27799: PUSH
27800: EMPTY
27801: LIST
27802: IN
27803: IFFALSE 27824
// points := [ 35 , 110 , 70 ] ;
27805: LD_ADDR_VAR 0 9
27809: PUSH
27810: LD_INT 35
27812: PUSH
27813: LD_INT 110
27815: PUSH
27816: LD_INT 70
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: LIST
27823: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27824: LD_VAR 0 6
27828: PPUSH
27829: CALL_OW 265
27833: PUSH
27834: LD_INT 25
27836: EQUAL
27837: IFFALSE 27858
// points := [ 80 , 65 , 100 ] ;
27839: LD_ADDR_VAR 0 9
27843: PUSH
27844: LD_INT 80
27846: PUSH
27847: LD_INT 65
27849: PUSH
27850: LD_INT 100
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: LIST
27857: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27858: LD_VAR 0 6
27862: PPUSH
27863: CALL_OW 263
27867: PUSH
27868: LD_INT 1
27870: EQUAL
27871: IFFALSE 27906
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27873: LD_ADDR_VAR 0 10
27877: PUSH
27878: LD_VAR 0 10
27882: PUSH
27883: LD_VAR 0 6
27887: PPUSH
27888: CALL_OW 311
27892: PPUSH
27893: LD_INT 3
27895: PPUSH
27896: CALL_OW 259
27900: PUSH
27901: LD_INT 4
27903: MUL
27904: MUL
27905: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27906: LD_VAR 0 6
27910: PPUSH
27911: CALL_OW 263
27915: PUSH
27916: LD_INT 2
27918: EQUAL
27919: IFFALSE 27970
// begin j := IsControledBy ( i ) ;
27921: LD_ADDR_VAR 0 7
27925: PUSH
27926: LD_VAR 0 6
27930: PPUSH
27931: CALL_OW 312
27935: ST_TO_ADDR
// if j then
27936: LD_VAR 0 7
27940: IFFALSE 27970
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27942: LD_ADDR_VAR 0 10
27946: PUSH
27947: LD_VAR 0 10
27951: PUSH
27952: LD_VAR 0 7
27956: PPUSH
27957: LD_INT 3
27959: PPUSH
27960: CALL_OW 259
27964: PUSH
27965: LD_INT 3
27967: MUL
27968: MUL
27969: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27970: LD_VAR 0 6
27974: PPUSH
27975: CALL_OW 264
27979: PUSH
27980: LD_INT 5
27982: PUSH
27983: LD_INT 6
27985: PUSH
27986: LD_INT 46
27988: PUSH
27989: LD_INT 44
27991: PUSH
27992: LD_INT 47
27994: PUSH
27995: LD_INT 45
27997: PUSH
27998: LD_INT 28
28000: PUSH
28001: LD_INT 7
28003: PUSH
28004: LD_INT 27
28006: PUSH
28007: LD_INT 29
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: IN
28022: PUSH
28023: LD_VAR 0 1
28027: PPUSH
28028: LD_INT 52
28030: PPUSH
28031: CALL_OW 321
28035: PUSH
28036: LD_INT 2
28038: EQUAL
28039: AND
28040: IFFALSE 28057
// bpoints := bpoints * 1.2 ;
28042: LD_ADDR_VAR 0 10
28046: PUSH
28047: LD_VAR 0 10
28051: PUSH
28052: LD_REAL  1.20000000000000E+0000
28055: MUL
28056: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28057: LD_VAR 0 6
28061: PPUSH
28062: CALL_OW 264
28066: PUSH
28067: LD_INT 6
28069: PUSH
28070: LD_INT 46
28072: PUSH
28073: LD_INT 47
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: LIST
28080: IN
28081: IFFALSE 28098
// bpoints := bpoints * 1.2 ;
28083: LD_ADDR_VAR 0 10
28087: PUSH
28088: LD_VAR 0 10
28092: PUSH
28093: LD_REAL  1.20000000000000E+0000
28096: MUL
28097: ST_TO_ADDR
// end ; unit_building :
28098: GO 28112
28100: LD_INT 3
28102: DOUBLE
28103: EQUAL
28104: IFTRUE 28108
28106: GO 28111
28108: POP
// ; end ;
28109: GO 28112
28111: POP
// for j = 1 to 3 do
28112: LD_ADDR_VAR 0 7
28116: PUSH
28117: DOUBLE
28118: LD_INT 1
28120: DEC
28121: ST_TO_ADDR
28122: LD_INT 3
28124: PUSH
28125: FOR_TO
28126: IFFALSE 28179
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28128: LD_ADDR_VAR 0 5
28132: PUSH
28133: LD_VAR 0 5
28137: PPUSH
28138: LD_VAR 0 7
28142: PPUSH
28143: LD_VAR 0 5
28147: PUSH
28148: LD_VAR 0 7
28152: ARRAY
28153: PUSH
28154: LD_VAR 0 9
28158: PUSH
28159: LD_VAR 0 7
28163: ARRAY
28164: PUSH
28165: LD_VAR 0 10
28169: MUL
28170: PLUS
28171: PPUSH
28172: CALL_OW 1
28176: ST_TO_ADDR
28177: GO 28125
28179: POP
28180: POP
// end ;
28181: GO 26664
28183: POP
28184: POP
// result := Replace ( result , 4 , tmp ) ;
28185: LD_ADDR_VAR 0 5
28189: PUSH
28190: LD_VAR 0 5
28194: PPUSH
28195: LD_INT 4
28197: PPUSH
28198: LD_VAR 0 8
28202: PPUSH
28203: CALL_OW 1
28207: ST_TO_ADDR
// end ;
28208: LD_VAR 0 5
28212: RET
// export function DangerAtRange ( unit , range ) ; begin
28213: LD_INT 0
28215: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28216: LD_ADDR_VAR 0 3
28220: PUSH
28221: LD_VAR 0 1
28225: PPUSH
28226: CALL_OW 255
28230: PPUSH
28231: LD_VAR 0 1
28235: PPUSH
28236: CALL_OW 250
28240: PPUSH
28241: LD_VAR 0 1
28245: PPUSH
28246: CALL_OW 251
28250: PPUSH
28251: LD_VAR 0 2
28255: PPUSH
28256: CALL 26516 0 4
28260: ST_TO_ADDR
// end ;
28261: LD_VAR 0 3
28265: RET
// export function DangerInArea ( side , area ) ; begin
28266: LD_INT 0
28268: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28269: LD_ADDR_VAR 0 3
28273: PUSH
28274: LD_VAR 0 2
28278: PPUSH
28279: LD_INT 81
28281: PUSH
28282: LD_VAR 0 1
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PPUSH
28291: CALL_OW 70
28295: ST_TO_ADDR
// end ;
28296: LD_VAR 0 3
28300: RET
// export function IsExtension ( b ) ; begin
28301: LD_INT 0
28303: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28304: LD_ADDR_VAR 0 2
28308: PUSH
28309: LD_VAR 0 1
28313: PUSH
28314: LD_INT 23
28316: PUSH
28317: LD_INT 20
28319: PUSH
28320: LD_INT 22
28322: PUSH
28323: LD_INT 17
28325: PUSH
28326: LD_INT 24
28328: PUSH
28329: LD_INT 21
28331: PUSH
28332: LD_INT 19
28334: PUSH
28335: LD_INT 16
28337: PUSH
28338: LD_INT 25
28340: PUSH
28341: LD_INT 18
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: IN
28356: ST_TO_ADDR
// end ;
28357: LD_VAR 0 2
28361: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28362: LD_INT 0
28364: PPUSH
28365: PPUSH
28366: PPUSH
// result := [ ] ;
28367: LD_ADDR_VAR 0 3
28371: PUSH
28372: EMPTY
28373: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28374: LD_ADDR_VAR 0 4
28378: PUSH
28379: LD_VAR 0 2
28383: PPUSH
28384: LD_INT 21
28386: PUSH
28387: LD_INT 3
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PPUSH
28394: CALL_OW 70
28398: ST_TO_ADDR
// if not tmp then
28399: LD_VAR 0 4
28403: NOT
28404: IFFALSE 28408
// exit ;
28406: GO 28466
// for i in tmp do
28408: LD_ADDR_VAR 0 5
28412: PUSH
28413: LD_VAR 0 4
28417: PUSH
28418: FOR_IN
28419: IFFALSE 28454
// if GetBase ( i ) <> base then
28421: LD_VAR 0 5
28425: PPUSH
28426: CALL_OW 274
28430: PUSH
28431: LD_VAR 0 1
28435: NONEQUAL
28436: IFFALSE 28452
// ComLinkToBase ( base , i ) ;
28438: LD_VAR 0 1
28442: PPUSH
28443: LD_VAR 0 5
28447: PPUSH
28448: CALL_OW 169
28452: GO 28418
28454: POP
28455: POP
// result := tmp ;
28456: LD_ADDR_VAR 0 3
28460: PUSH
28461: LD_VAR 0 4
28465: ST_TO_ADDR
// end ;
28466: LD_VAR 0 3
28470: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28471: LD_INT 0
28473: PPUSH
28474: PPUSH
// if BuildingStatus ( b ) = bs_build then
28475: LD_VAR 0 2
28479: PPUSH
28480: CALL_OW 461
28484: PUSH
28485: LD_INT 1
28487: EQUAL
28488: IFFALSE 28548
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28490: LD_VAR 0 1
28494: PPUSH
28495: LD_STRING h
28497: PUSH
28498: LD_VAR 0 2
28502: PPUSH
28503: CALL_OW 250
28507: PUSH
28508: LD_VAR 0 2
28512: PPUSH
28513: CALL_OW 251
28517: PUSH
28518: LD_VAR 0 2
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: LD_INT 0
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: PUSH
28541: EMPTY
28542: LIST
28543: PPUSH
28544: CALL_OW 446
// end ;
28548: LD_VAR 0 3
28552: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28553: LD_INT 0
28555: PPUSH
28556: PPUSH
28557: PPUSH
28558: PPUSH
28559: PPUSH
28560: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28561: LD_VAR 0 1
28565: NOT
28566: PUSH
28567: LD_VAR 0 1
28571: PPUSH
28572: CALL_OW 263
28576: PUSH
28577: LD_INT 2
28579: EQUAL
28580: NOT
28581: OR
28582: IFFALSE 28586
// exit ;
28584: GO 28902
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28586: LD_ADDR_VAR 0 6
28590: PUSH
28591: LD_INT 22
28593: PUSH
28594: LD_VAR 0 1
28598: PPUSH
28599: CALL_OW 255
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: LD_INT 30
28613: PUSH
28614: LD_INT 36
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 34
28623: PUSH
28624: LD_INT 31
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: LIST
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PPUSH
28640: CALL_OW 69
28644: ST_TO_ADDR
// if not tmp then
28645: LD_VAR 0 6
28649: NOT
28650: IFFALSE 28654
// exit ;
28652: GO 28902
// result := [ ] ;
28654: LD_ADDR_VAR 0 2
28658: PUSH
28659: EMPTY
28660: ST_TO_ADDR
// for i in tmp do
28661: LD_ADDR_VAR 0 3
28665: PUSH
28666: LD_VAR 0 6
28670: PUSH
28671: FOR_IN
28672: IFFALSE 28743
// begin t := UnitsInside ( i ) ;
28674: LD_ADDR_VAR 0 4
28678: PUSH
28679: LD_VAR 0 3
28683: PPUSH
28684: CALL_OW 313
28688: ST_TO_ADDR
// if t then
28689: LD_VAR 0 4
28693: IFFALSE 28741
// for j in t do
28695: LD_ADDR_VAR 0 7
28699: PUSH
28700: LD_VAR 0 4
28704: PUSH
28705: FOR_IN
28706: IFFALSE 28739
// result := Insert ( result , result + 1 , j ) ;
28708: LD_ADDR_VAR 0 2
28712: PUSH
28713: LD_VAR 0 2
28717: PPUSH
28718: LD_VAR 0 2
28722: PUSH
28723: LD_INT 1
28725: PLUS
28726: PPUSH
28727: LD_VAR 0 7
28731: PPUSH
28732: CALL_OW 2
28736: ST_TO_ADDR
28737: GO 28705
28739: POP
28740: POP
// end ;
28741: GO 28671
28743: POP
28744: POP
// if not result then
28745: LD_VAR 0 2
28749: NOT
28750: IFFALSE 28754
// exit ;
28752: GO 28902
// mech := result [ 1 ] ;
28754: LD_ADDR_VAR 0 5
28758: PUSH
28759: LD_VAR 0 2
28763: PUSH
28764: LD_INT 1
28766: ARRAY
28767: ST_TO_ADDR
// if result > 1 then
28768: LD_VAR 0 2
28772: PUSH
28773: LD_INT 1
28775: GREATER
28776: IFFALSE 28888
// for i = 2 to result do
28778: LD_ADDR_VAR 0 3
28782: PUSH
28783: DOUBLE
28784: LD_INT 2
28786: DEC
28787: ST_TO_ADDR
28788: LD_VAR 0 2
28792: PUSH
28793: FOR_TO
28794: IFFALSE 28886
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28796: LD_ADDR_VAR 0 4
28800: PUSH
28801: LD_VAR 0 2
28805: PUSH
28806: LD_VAR 0 3
28810: ARRAY
28811: PPUSH
28812: LD_INT 3
28814: PPUSH
28815: CALL_OW 259
28819: PUSH
28820: LD_VAR 0 2
28824: PUSH
28825: LD_VAR 0 3
28829: ARRAY
28830: PPUSH
28831: CALL_OW 432
28835: MINUS
28836: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28837: LD_VAR 0 4
28841: PUSH
28842: LD_VAR 0 5
28846: PPUSH
28847: LD_INT 3
28849: PPUSH
28850: CALL_OW 259
28854: PUSH
28855: LD_VAR 0 5
28859: PPUSH
28860: CALL_OW 432
28864: MINUS
28865: GREATEREQUAL
28866: IFFALSE 28884
// mech := result [ i ] ;
28868: LD_ADDR_VAR 0 5
28872: PUSH
28873: LD_VAR 0 2
28877: PUSH
28878: LD_VAR 0 3
28882: ARRAY
28883: ST_TO_ADDR
// end ;
28884: GO 28793
28886: POP
28887: POP
// ComLinkTo ( vehicle , mech ) ;
28888: LD_VAR 0 1
28892: PPUSH
28893: LD_VAR 0 5
28897: PPUSH
28898: CALL_OW 135
// end ;
28902: LD_VAR 0 2
28906: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28907: LD_INT 0
28909: PPUSH
28910: PPUSH
28911: PPUSH
28912: PPUSH
28913: PPUSH
28914: PPUSH
28915: PPUSH
28916: PPUSH
28917: PPUSH
28918: PPUSH
28919: PPUSH
28920: PPUSH
28921: PPUSH
// result := [ ] ;
28922: LD_ADDR_VAR 0 7
28926: PUSH
28927: EMPTY
28928: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28929: LD_VAR 0 1
28933: PPUSH
28934: CALL_OW 266
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: LD_INT 1
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: IN
28949: NOT
28950: IFFALSE 28954
// exit ;
28952: GO 30585
// if name then
28954: LD_VAR 0 3
28958: IFFALSE 28974
// SetBName ( base_dep , name ) ;
28960: LD_VAR 0 1
28964: PPUSH
28965: LD_VAR 0 3
28969: PPUSH
28970: CALL_OW 500
// base := GetBase ( base_dep ) ;
28974: LD_ADDR_VAR 0 15
28978: PUSH
28979: LD_VAR 0 1
28983: PPUSH
28984: CALL_OW 274
28988: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28989: LD_ADDR_VAR 0 16
28993: PUSH
28994: LD_VAR 0 1
28998: PPUSH
28999: CALL_OW 255
29003: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29004: LD_ADDR_VAR 0 17
29008: PUSH
29009: LD_VAR 0 1
29013: PPUSH
29014: CALL_OW 248
29018: ST_TO_ADDR
// if sources then
29019: LD_VAR 0 5
29023: IFFALSE 29070
// for i = 1 to 3 do
29025: LD_ADDR_VAR 0 8
29029: PUSH
29030: DOUBLE
29031: LD_INT 1
29033: DEC
29034: ST_TO_ADDR
29035: LD_INT 3
29037: PUSH
29038: FOR_TO
29039: IFFALSE 29068
// AddResourceType ( base , i , sources [ i ] ) ;
29041: LD_VAR 0 15
29045: PPUSH
29046: LD_VAR 0 8
29050: PPUSH
29051: LD_VAR 0 5
29055: PUSH
29056: LD_VAR 0 8
29060: ARRAY
29061: PPUSH
29062: CALL_OW 276
29066: GO 29038
29068: POP
29069: POP
// buildings := GetBaseBuildings ( base , area ) ;
29070: LD_ADDR_VAR 0 18
29074: PUSH
29075: LD_VAR 0 15
29079: PPUSH
29080: LD_VAR 0 2
29084: PPUSH
29085: CALL 28362 0 2
29089: ST_TO_ADDR
// InitHc ;
29090: CALL_OW 19
// InitUc ;
29094: CALL_OW 18
// uc_side := side ;
29098: LD_ADDR_OWVAR 20
29102: PUSH
29103: LD_VAR 0 16
29107: ST_TO_ADDR
// uc_nation := nation ;
29108: LD_ADDR_OWVAR 21
29112: PUSH
29113: LD_VAR 0 17
29117: ST_TO_ADDR
// if buildings then
29118: LD_VAR 0 18
29122: IFFALSE 30444
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29124: LD_ADDR_VAR 0 19
29128: PUSH
29129: LD_VAR 0 18
29133: PPUSH
29134: LD_INT 2
29136: PUSH
29137: LD_INT 30
29139: PUSH
29140: LD_INT 29
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 30
29149: PUSH
29150: LD_INT 30
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: LIST
29161: PPUSH
29162: CALL_OW 72
29166: ST_TO_ADDR
// if tmp then
29167: LD_VAR 0 19
29171: IFFALSE 29219
// for i in tmp do
29173: LD_ADDR_VAR 0 8
29177: PUSH
29178: LD_VAR 0 19
29182: PUSH
29183: FOR_IN
29184: IFFALSE 29217
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29186: LD_VAR 0 8
29190: PPUSH
29191: CALL_OW 250
29195: PPUSH
29196: LD_VAR 0 8
29200: PPUSH
29201: CALL_OW 251
29205: PPUSH
29206: LD_VAR 0 16
29210: PPUSH
29211: CALL_OW 441
29215: GO 29183
29217: POP
29218: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29219: LD_VAR 0 18
29223: PPUSH
29224: LD_INT 2
29226: PUSH
29227: LD_INT 30
29229: PUSH
29230: LD_INT 32
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 30
29239: PUSH
29240: LD_INT 33
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: LIST
29251: PPUSH
29252: CALL_OW 72
29256: IFFALSE 29344
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29258: LD_ADDR_VAR 0 8
29262: PUSH
29263: LD_VAR 0 18
29267: PPUSH
29268: LD_INT 2
29270: PUSH
29271: LD_INT 30
29273: PUSH
29274: LD_INT 32
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 30
29283: PUSH
29284: LD_INT 33
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: LIST
29295: PPUSH
29296: CALL_OW 72
29300: PUSH
29301: FOR_IN
29302: IFFALSE 29342
// begin if not GetBWeapon ( i ) then
29304: LD_VAR 0 8
29308: PPUSH
29309: CALL_OW 269
29313: NOT
29314: IFFALSE 29340
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29316: LD_VAR 0 8
29320: PPUSH
29321: LD_VAR 0 8
29325: PPUSH
29326: LD_VAR 0 2
29330: PPUSH
29331: CALL 30590 0 2
29335: PPUSH
29336: CALL_OW 431
// end ;
29340: GO 29301
29342: POP
29343: POP
// end ; for i = 1 to personel do
29344: LD_ADDR_VAR 0 8
29348: PUSH
29349: DOUBLE
29350: LD_INT 1
29352: DEC
29353: ST_TO_ADDR
29354: LD_VAR 0 6
29358: PUSH
29359: FOR_TO
29360: IFFALSE 30424
// begin if i > 4 then
29362: LD_VAR 0 8
29366: PUSH
29367: LD_INT 4
29369: GREATER
29370: IFFALSE 29374
// break ;
29372: GO 30424
// case i of 1 :
29374: LD_VAR 0 8
29378: PUSH
29379: LD_INT 1
29381: DOUBLE
29382: EQUAL
29383: IFTRUE 29387
29385: GO 29467
29387: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29388: LD_ADDR_VAR 0 12
29392: PUSH
29393: LD_VAR 0 18
29397: PPUSH
29398: LD_INT 22
29400: PUSH
29401: LD_VAR 0 16
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 58
29412: PUSH
29413: EMPTY
29414: LIST
29415: PUSH
29416: LD_INT 2
29418: PUSH
29419: LD_INT 30
29421: PUSH
29422: LD_INT 32
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 30
29431: PUSH
29432: LD_INT 4
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 30
29441: PUSH
29442: LD_INT 5
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: LIST
29459: PPUSH
29460: CALL_OW 72
29464: ST_TO_ADDR
29465: GO 29689
29467: LD_INT 2
29469: DOUBLE
29470: EQUAL
29471: IFTRUE 29475
29473: GO 29537
29475: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29476: LD_ADDR_VAR 0 12
29480: PUSH
29481: LD_VAR 0 18
29485: PPUSH
29486: LD_INT 22
29488: PUSH
29489: LD_VAR 0 16
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 2
29500: PUSH
29501: LD_INT 30
29503: PUSH
29504: LD_INT 0
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 30
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PPUSH
29530: CALL_OW 72
29534: ST_TO_ADDR
29535: GO 29689
29537: LD_INT 3
29539: DOUBLE
29540: EQUAL
29541: IFTRUE 29545
29543: GO 29607
29545: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29546: LD_ADDR_VAR 0 12
29550: PUSH
29551: LD_VAR 0 18
29555: PPUSH
29556: LD_INT 22
29558: PUSH
29559: LD_VAR 0 16
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 2
29570: PUSH
29571: LD_INT 30
29573: PUSH
29574: LD_INT 2
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 30
29583: PUSH
29584: LD_INT 3
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: LIST
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PPUSH
29600: CALL_OW 72
29604: ST_TO_ADDR
29605: GO 29689
29607: LD_INT 4
29609: DOUBLE
29610: EQUAL
29611: IFTRUE 29615
29613: GO 29688
29615: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29616: LD_ADDR_VAR 0 12
29620: PUSH
29621: LD_VAR 0 18
29625: PPUSH
29626: LD_INT 22
29628: PUSH
29629: LD_VAR 0 16
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 2
29640: PUSH
29641: LD_INT 30
29643: PUSH
29644: LD_INT 6
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 30
29653: PUSH
29654: LD_INT 7
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 30
29663: PUSH
29664: LD_INT 8
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PPUSH
29681: CALL_OW 72
29685: ST_TO_ADDR
29686: GO 29689
29688: POP
// if i = 1 then
29689: LD_VAR 0 8
29693: PUSH
29694: LD_INT 1
29696: EQUAL
29697: IFFALSE 29808
// begin tmp := [ ] ;
29699: LD_ADDR_VAR 0 19
29703: PUSH
29704: EMPTY
29705: ST_TO_ADDR
// for j in f do
29706: LD_ADDR_VAR 0 9
29710: PUSH
29711: LD_VAR 0 12
29715: PUSH
29716: FOR_IN
29717: IFFALSE 29790
// if GetBType ( j ) = b_bunker then
29719: LD_VAR 0 9
29723: PPUSH
29724: CALL_OW 266
29728: PUSH
29729: LD_INT 32
29731: EQUAL
29732: IFFALSE 29759
// tmp := Insert ( tmp , 1 , j ) else
29734: LD_ADDR_VAR 0 19
29738: PUSH
29739: LD_VAR 0 19
29743: PPUSH
29744: LD_INT 1
29746: PPUSH
29747: LD_VAR 0 9
29751: PPUSH
29752: CALL_OW 2
29756: ST_TO_ADDR
29757: GO 29788
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29759: LD_ADDR_VAR 0 19
29763: PUSH
29764: LD_VAR 0 19
29768: PPUSH
29769: LD_VAR 0 19
29773: PUSH
29774: LD_INT 1
29776: PLUS
29777: PPUSH
29778: LD_VAR 0 9
29782: PPUSH
29783: CALL_OW 2
29787: ST_TO_ADDR
29788: GO 29716
29790: POP
29791: POP
// if tmp then
29792: LD_VAR 0 19
29796: IFFALSE 29808
// f := tmp ;
29798: LD_ADDR_VAR 0 12
29802: PUSH
29803: LD_VAR 0 19
29807: ST_TO_ADDR
// end ; x := personel [ i ] ;
29808: LD_ADDR_VAR 0 13
29812: PUSH
29813: LD_VAR 0 6
29817: PUSH
29818: LD_VAR 0 8
29822: ARRAY
29823: ST_TO_ADDR
// if x = - 1 then
29824: LD_VAR 0 13
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: EQUAL
29833: IFFALSE 30042
// begin for j in f do
29835: LD_ADDR_VAR 0 9
29839: PUSH
29840: LD_VAR 0 12
29844: PUSH
29845: FOR_IN
29846: IFFALSE 30038
// repeat InitHc ;
29848: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29852: LD_VAR 0 9
29856: PPUSH
29857: CALL_OW 266
29861: PUSH
29862: LD_INT 5
29864: EQUAL
29865: IFFALSE 29935
// begin if UnitsInside ( j ) < 3 then
29867: LD_VAR 0 9
29871: PPUSH
29872: CALL_OW 313
29876: PUSH
29877: LD_INT 3
29879: LESS
29880: IFFALSE 29916
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29882: LD_INT 0
29884: PPUSH
29885: LD_INT 5
29887: PUSH
29888: LD_INT 8
29890: PUSH
29891: LD_INT 9
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: LIST
29898: PUSH
29899: LD_VAR 0 17
29903: ARRAY
29904: PPUSH
29905: LD_VAR 0 4
29909: PPUSH
29910: CALL_OW 380
29914: GO 29933
// PrepareHuman ( false , i , skill ) ;
29916: LD_INT 0
29918: PPUSH
29919: LD_VAR 0 8
29923: PPUSH
29924: LD_VAR 0 4
29928: PPUSH
29929: CALL_OW 380
// end else
29933: GO 29952
// PrepareHuman ( false , i , skill ) ;
29935: LD_INT 0
29937: PPUSH
29938: LD_VAR 0 8
29942: PPUSH
29943: LD_VAR 0 4
29947: PPUSH
29948: CALL_OW 380
// un := CreateHuman ;
29952: LD_ADDR_VAR 0 14
29956: PUSH
29957: CALL_OW 44
29961: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29962: LD_ADDR_VAR 0 7
29966: PUSH
29967: LD_VAR 0 7
29971: PPUSH
29972: LD_INT 1
29974: PPUSH
29975: LD_VAR 0 14
29979: PPUSH
29980: CALL_OW 2
29984: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29985: LD_VAR 0 14
29989: PPUSH
29990: LD_VAR 0 9
29994: PPUSH
29995: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29999: LD_VAR 0 9
30003: PPUSH
30004: CALL_OW 313
30008: PUSH
30009: LD_INT 6
30011: EQUAL
30012: PUSH
30013: LD_VAR 0 9
30017: PPUSH
30018: CALL_OW 266
30022: PUSH
30023: LD_INT 32
30025: PUSH
30026: LD_INT 31
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: IN
30033: OR
30034: IFFALSE 29848
30036: GO 29845
30038: POP
30039: POP
// end else
30040: GO 30422
// for j = 1 to x do
30042: LD_ADDR_VAR 0 9
30046: PUSH
30047: DOUBLE
30048: LD_INT 1
30050: DEC
30051: ST_TO_ADDR
30052: LD_VAR 0 13
30056: PUSH
30057: FOR_TO
30058: IFFALSE 30420
// begin InitHc ;
30060: CALL_OW 19
// if not f then
30064: LD_VAR 0 12
30068: NOT
30069: IFFALSE 30158
// begin PrepareHuman ( false , i , skill ) ;
30071: LD_INT 0
30073: PPUSH
30074: LD_VAR 0 8
30078: PPUSH
30079: LD_VAR 0 4
30083: PPUSH
30084: CALL_OW 380
// un := CreateHuman ;
30088: LD_ADDR_VAR 0 14
30092: PUSH
30093: CALL_OW 44
30097: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30098: LD_ADDR_VAR 0 7
30102: PUSH
30103: LD_VAR 0 7
30107: PPUSH
30108: LD_INT 1
30110: PPUSH
30111: LD_VAR 0 14
30115: PPUSH
30116: CALL_OW 2
30120: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30121: LD_VAR 0 14
30125: PPUSH
30126: LD_VAR 0 1
30130: PPUSH
30131: CALL_OW 250
30135: PPUSH
30136: LD_VAR 0 1
30140: PPUSH
30141: CALL_OW 251
30145: PPUSH
30146: LD_INT 10
30148: PPUSH
30149: LD_INT 0
30151: PPUSH
30152: CALL_OW 50
// continue ;
30156: GO 30057
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30158: LD_VAR 0 12
30162: PUSH
30163: LD_INT 1
30165: ARRAY
30166: PPUSH
30167: CALL_OW 313
30171: PUSH
30172: LD_VAR 0 12
30176: PUSH
30177: LD_INT 1
30179: ARRAY
30180: PPUSH
30181: CALL_OW 266
30185: PUSH
30186: LD_INT 32
30188: PUSH
30189: LD_INT 31
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: IN
30196: AND
30197: PUSH
30198: LD_VAR 0 12
30202: PUSH
30203: LD_INT 1
30205: ARRAY
30206: PPUSH
30207: CALL_OW 313
30211: PUSH
30212: LD_INT 6
30214: EQUAL
30215: OR
30216: IFFALSE 30236
// f := Delete ( f , 1 ) ;
30218: LD_ADDR_VAR 0 12
30222: PUSH
30223: LD_VAR 0 12
30227: PPUSH
30228: LD_INT 1
30230: PPUSH
30231: CALL_OW 3
30235: ST_TO_ADDR
// if not f then
30236: LD_VAR 0 12
30240: NOT
30241: IFFALSE 30259
// begin x := x + 2 ;
30243: LD_ADDR_VAR 0 13
30247: PUSH
30248: LD_VAR 0 13
30252: PUSH
30253: LD_INT 2
30255: PLUS
30256: ST_TO_ADDR
// continue ;
30257: GO 30057
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30259: LD_VAR 0 12
30263: PUSH
30264: LD_INT 1
30266: ARRAY
30267: PPUSH
30268: CALL_OW 266
30272: PUSH
30273: LD_INT 5
30275: EQUAL
30276: IFFALSE 30350
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30278: LD_VAR 0 12
30282: PUSH
30283: LD_INT 1
30285: ARRAY
30286: PPUSH
30287: CALL_OW 313
30291: PUSH
30292: LD_INT 3
30294: LESS
30295: IFFALSE 30331
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30297: LD_INT 0
30299: PPUSH
30300: LD_INT 5
30302: PUSH
30303: LD_INT 8
30305: PUSH
30306: LD_INT 9
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: PUSH
30314: LD_VAR 0 17
30318: ARRAY
30319: PPUSH
30320: LD_VAR 0 4
30324: PPUSH
30325: CALL_OW 380
30329: GO 30348
// PrepareHuman ( false , i , skill ) ;
30331: LD_INT 0
30333: PPUSH
30334: LD_VAR 0 8
30338: PPUSH
30339: LD_VAR 0 4
30343: PPUSH
30344: CALL_OW 380
// end else
30348: GO 30367
// PrepareHuman ( false , i , skill ) ;
30350: LD_INT 0
30352: PPUSH
30353: LD_VAR 0 8
30357: PPUSH
30358: LD_VAR 0 4
30362: PPUSH
30363: CALL_OW 380
// un := CreateHuman ;
30367: LD_ADDR_VAR 0 14
30371: PUSH
30372: CALL_OW 44
30376: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30377: LD_ADDR_VAR 0 7
30381: PUSH
30382: LD_VAR 0 7
30386: PPUSH
30387: LD_INT 1
30389: PPUSH
30390: LD_VAR 0 14
30394: PPUSH
30395: CALL_OW 2
30399: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30400: LD_VAR 0 14
30404: PPUSH
30405: LD_VAR 0 12
30409: PUSH
30410: LD_INT 1
30412: ARRAY
30413: PPUSH
30414: CALL_OW 52
// end ;
30418: GO 30057
30420: POP
30421: POP
// end ;
30422: GO 29359
30424: POP
30425: POP
// result := result ^ buildings ;
30426: LD_ADDR_VAR 0 7
30430: PUSH
30431: LD_VAR 0 7
30435: PUSH
30436: LD_VAR 0 18
30440: ADD
30441: ST_TO_ADDR
// end else
30442: GO 30585
// begin for i = 1 to personel do
30444: LD_ADDR_VAR 0 8
30448: PUSH
30449: DOUBLE
30450: LD_INT 1
30452: DEC
30453: ST_TO_ADDR
30454: LD_VAR 0 6
30458: PUSH
30459: FOR_TO
30460: IFFALSE 30583
// begin if i > 4 then
30462: LD_VAR 0 8
30466: PUSH
30467: LD_INT 4
30469: GREATER
30470: IFFALSE 30474
// break ;
30472: GO 30583
// x := personel [ i ] ;
30474: LD_ADDR_VAR 0 13
30478: PUSH
30479: LD_VAR 0 6
30483: PUSH
30484: LD_VAR 0 8
30488: ARRAY
30489: ST_TO_ADDR
// if x = - 1 then
30490: LD_VAR 0 13
30494: PUSH
30495: LD_INT 1
30497: NEG
30498: EQUAL
30499: IFFALSE 30503
// continue ;
30501: GO 30459
// PrepareHuman ( false , i , skill ) ;
30503: LD_INT 0
30505: PPUSH
30506: LD_VAR 0 8
30510: PPUSH
30511: LD_VAR 0 4
30515: PPUSH
30516: CALL_OW 380
// un := CreateHuman ;
30520: LD_ADDR_VAR 0 14
30524: PUSH
30525: CALL_OW 44
30529: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30530: LD_VAR 0 14
30534: PPUSH
30535: LD_VAR 0 1
30539: PPUSH
30540: CALL_OW 250
30544: PPUSH
30545: LD_VAR 0 1
30549: PPUSH
30550: CALL_OW 251
30554: PPUSH
30555: LD_INT 10
30557: PPUSH
30558: LD_INT 0
30560: PPUSH
30561: CALL_OW 50
// result := result ^ un ;
30565: LD_ADDR_VAR 0 7
30569: PUSH
30570: LD_VAR 0 7
30574: PUSH
30575: LD_VAR 0 14
30579: ADD
30580: ST_TO_ADDR
// end ;
30581: GO 30459
30583: POP
30584: POP
// end ; end ;
30585: LD_VAR 0 7
30589: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30590: LD_INT 0
30592: PPUSH
30593: PPUSH
30594: PPUSH
30595: PPUSH
30596: PPUSH
30597: PPUSH
30598: PPUSH
30599: PPUSH
30600: PPUSH
30601: PPUSH
30602: PPUSH
30603: PPUSH
30604: PPUSH
30605: PPUSH
30606: PPUSH
30607: PPUSH
// result := false ;
30608: LD_ADDR_VAR 0 3
30612: PUSH
30613: LD_INT 0
30615: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30616: LD_VAR 0 1
30620: NOT
30621: PUSH
30622: LD_VAR 0 1
30626: PPUSH
30627: CALL_OW 266
30631: PUSH
30632: LD_INT 32
30634: PUSH
30635: LD_INT 33
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: IN
30642: NOT
30643: OR
30644: IFFALSE 30648
// exit ;
30646: GO 31784
// nat := GetNation ( tower ) ;
30648: LD_ADDR_VAR 0 12
30652: PUSH
30653: LD_VAR 0 1
30657: PPUSH
30658: CALL_OW 248
30662: ST_TO_ADDR
// side := GetSide ( tower ) ;
30663: LD_ADDR_VAR 0 16
30667: PUSH
30668: LD_VAR 0 1
30672: PPUSH
30673: CALL_OW 255
30677: ST_TO_ADDR
// x := GetX ( tower ) ;
30678: LD_ADDR_VAR 0 10
30682: PUSH
30683: LD_VAR 0 1
30687: PPUSH
30688: CALL_OW 250
30692: ST_TO_ADDR
// y := GetY ( tower ) ;
30693: LD_ADDR_VAR 0 11
30697: PUSH
30698: LD_VAR 0 1
30702: PPUSH
30703: CALL_OW 251
30707: ST_TO_ADDR
// if not x or not y then
30708: LD_VAR 0 10
30712: NOT
30713: PUSH
30714: LD_VAR 0 11
30718: NOT
30719: OR
30720: IFFALSE 30724
// exit ;
30722: GO 31784
// weapon := 0 ;
30724: LD_ADDR_VAR 0 18
30728: PUSH
30729: LD_INT 0
30731: ST_TO_ADDR
// fac_list := [ ] ;
30732: LD_ADDR_VAR 0 17
30736: PUSH
30737: EMPTY
30738: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
30739: LD_ADDR_VAR 0 6
30743: PUSH
30744: LD_VAR 0 1
30748: PPUSH
30749: CALL_OW 274
30753: PPUSH
30754: LD_VAR 0 2
30758: PPUSH
30759: CALL 28362 0 2
30763: PPUSH
30764: LD_INT 30
30766: PUSH
30767: LD_INT 3
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PPUSH
30774: CALL_OW 72
30778: ST_TO_ADDR
// if not factories then
30779: LD_VAR 0 6
30783: NOT
30784: IFFALSE 30788
// exit ;
30786: GO 31784
// for i in factories do
30788: LD_ADDR_VAR 0 8
30792: PUSH
30793: LD_VAR 0 6
30797: PUSH
30798: FOR_IN
30799: IFFALSE 30824
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30801: LD_ADDR_VAR 0 17
30805: PUSH
30806: LD_VAR 0 17
30810: PUSH
30811: LD_VAR 0 8
30815: PPUSH
30816: CALL_OW 478
30820: UNION
30821: ST_TO_ADDR
30822: GO 30798
30824: POP
30825: POP
// if not fac_list then
30826: LD_VAR 0 17
30830: NOT
30831: IFFALSE 30835
// exit ;
30833: GO 31784
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30835: LD_ADDR_VAR 0 5
30839: PUSH
30840: LD_INT 4
30842: PUSH
30843: LD_INT 5
30845: PUSH
30846: LD_INT 9
30848: PUSH
30849: LD_INT 10
30851: PUSH
30852: LD_INT 6
30854: PUSH
30855: LD_INT 7
30857: PUSH
30858: LD_INT 11
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 27
30872: PUSH
30873: LD_INT 28
30875: PUSH
30876: LD_INT 26
30878: PUSH
30879: LD_INT 30
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 43
30890: PUSH
30891: LD_INT 44
30893: PUSH
30894: LD_INT 46
30896: PUSH
30897: LD_INT 45
30899: PUSH
30900: LD_INT 47
30902: PUSH
30903: LD_INT 49
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: LIST
30918: PUSH
30919: LD_VAR 0 12
30923: ARRAY
30924: ST_TO_ADDR
// for i in list do
30925: LD_ADDR_VAR 0 8
30929: PUSH
30930: LD_VAR 0 5
30934: PUSH
30935: FOR_IN
30936: IFFALSE 30969
// if not i in fac_list then
30938: LD_VAR 0 8
30942: PUSH
30943: LD_VAR 0 17
30947: IN
30948: NOT
30949: IFFALSE 30967
// list := list diff i ;
30951: LD_ADDR_VAR 0 5
30955: PUSH
30956: LD_VAR 0 5
30960: PUSH
30961: LD_VAR 0 8
30965: DIFF
30966: ST_TO_ADDR
30967: GO 30935
30969: POP
30970: POP
// if not list then
30971: LD_VAR 0 5
30975: NOT
30976: IFFALSE 30980
// exit ;
30978: GO 31784
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30980: LD_VAR 0 12
30984: PUSH
30985: LD_INT 3
30987: EQUAL
30988: PUSH
30989: LD_INT 49
30991: PUSH
30992: LD_VAR 0 5
30996: IN
30997: AND
30998: PUSH
30999: LD_INT 31
31001: PPUSH
31002: LD_VAR 0 16
31006: PPUSH
31007: CALL_OW 321
31011: PUSH
31012: LD_INT 2
31014: EQUAL
31015: AND
31016: IFFALSE 31076
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31018: LD_INT 22
31020: PUSH
31021: LD_VAR 0 16
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 35
31032: PUSH
31033: LD_INT 49
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 91
31042: PUSH
31043: LD_VAR 0 1
31047: PUSH
31048: LD_INT 10
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: LIST
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: LIST
31060: PPUSH
31061: CALL_OW 69
31065: NOT
31066: IFFALSE 31076
// weapon := ru_time_lapser ;
31068: LD_ADDR_VAR 0 18
31072: PUSH
31073: LD_INT 49
31075: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31076: LD_VAR 0 12
31080: PUSH
31081: LD_INT 1
31083: PUSH
31084: LD_INT 2
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: IN
31091: PUSH
31092: LD_INT 11
31094: PUSH
31095: LD_VAR 0 5
31099: IN
31100: PUSH
31101: LD_INT 30
31103: PUSH
31104: LD_VAR 0 5
31108: IN
31109: OR
31110: AND
31111: PUSH
31112: LD_INT 6
31114: PPUSH
31115: LD_VAR 0 16
31119: PPUSH
31120: CALL_OW 321
31124: PUSH
31125: LD_INT 2
31127: EQUAL
31128: AND
31129: IFFALSE 31294
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31131: LD_INT 22
31133: PUSH
31134: LD_VAR 0 16
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: LD_INT 35
31148: PUSH
31149: LD_INT 11
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 35
31158: PUSH
31159: LD_INT 30
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 91
31173: PUSH
31174: LD_VAR 0 1
31178: PUSH
31179: LD_INT 18
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: LIST
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: LIST
31191: PPUSH
31192: CALL_OW 69
31196: NOT
31197: PUSH
31198: LD_INT 22
31200: PUSH
31201: LD_VAR 0 16
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 2
31212: PUSH
31213: LD_INT 30
31215: PUSH
31216: LD_INT 32
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 30
31225: PUSH
31226: LD_INT 33
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 91
31240: PUSH
31241: LD_VAR 0 1
31245: PUSH
31246: LD_INT 12
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: LIST
31258: PUSH
31259: EMPTY
31260: LIST
31261: PPUSH
31262: CALL_OW 69
31266: PUSH
31267: LD_INT 2
31269: GREATER
31270: AND
31271: IFFALSE 31294
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31273: LD_ADDR_VAR 0 18
31277: PUSH
31278: LD_INT 11
31280: PUSH
31281: LD_INT 30
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_VAR 0 12
31292: ARRAY
31293: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31294: LD_VAR 0 18
31298: NOT
31299: PUSH
31300: LD_INT 40
31302: PPUSH
31303: LD_VAR 0 16
31307: PPUSH
31308: CALL_OW 321
31312: PUSH
31313: LD_INT 2
31315: EQUAL
31316: AND
31317: PUSH
31318: LD_INT 7
31320: PUSH
31321: LD_VAR 0 5
31325: IN
31326: PUSH
31327: LD_INT 28
31329: PUSH
31330: LD_VAR 0 5
31334: IN
31335: OR
31336: PUSH
31337: LD_INT 45
31339: PUSH
31340: LD_VAR 0 5
31344: IN
31345: OR
31346: AND
31347: IFFALSE 31601
// begin hex := GetHexInfo ( x , y ) ;
31349: LD_ADDR_VAR 0 4
31353: PUSH
31354: LD_VAR 0 10
31358: PPUSH
31359: LD_VAR 0 11
31363: PPUSH
31364: CALL_OW 546
31368: ST_TO_ADDR
// if hex [ 1 ] then
31369: LD_VAR 0 4
31373: PUSH
31374: LD_INT 1
31376: ARRAY
31377: IFFALSE 31381
// exit ;
31379: GO 31784
// height := hex [ 2 ] ;
31381: LD_ADDR_VAR 0 15
31385: PUSH
31386: LD_VAR 0 4
31390: PUSH
31391: LD_INT 2
31393: ARRAY
31394: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31395: LD_ADDR_VAR 0 14
31399: PUSH
31400: LD_INT 0
31402: PUSH
31403: LD_INT 2
31405: PUSH
31406: LD_INT 3
31408: PUSH
31409: LD_INT 5
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: ST_TO_ADDR
// for i in tmp do
31418: LD_ADDR_VAR 0 8
31422: PUSH
31423: LD_VAR 0 14
31427: PUSH
31428: FOR_IN
31429: IFFALSE 31599
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31431: LD_ADDR_VAR 0 9
31435: PUSH
31436: LD_VAR 0 10
31440: PPUSH
31441: LD_VAR 0 8
31445: PPUSH
31446: LD_INT 5
31448: PPUSH
31449: CALL_OW 272
31453: PUSH
31454: LD_VAR 0 11
31458: PPUSH
31459: LD_VAR 0 8
31463: PPUSH
31464: LD_INT 5
31466: PPUSH
31467: CALL_OW 273
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31476: LD_VAR 0 9
31480: PUSH
31481: LD_INT 1
31483: ARRAY
31484: PPUSH
31485: LD_VAR 0 9
31489: PUSH
31490: LD_INT 2
31492: ARRAY
31493: PPUSH
31494: CALL_OW 488
31498: IFFALSE 31597
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31500: LD_ADDR_VAR 0 4
31504: PUSH
31505: LD_VAR 0 9
31509: PUSH
31510: LD_INT 1
31512: ARRAY
31513: PPUSH
31514: LD_VAR 0 9
31518: PUSH
31519: LD_INT 2
31521: ARRAY
31522: PPUSH
31523: CALL_OW 546
31527: ST_TO_ADDR
// if hex [ 1 ] then
31528: LD_VAR 0 4
31532: PUSH
31533: LD_INT 1
31535: ARRAY
31536: IFFALSE 31540
// continue ;
31538: GO 31428
// h := hex [ 2 ] ;
31540: LD_ADDR_VAR 0 13
31544: PUSH
31545: LD_VAR 0 4
31549: PUSH
31550: LD_INT 2
31552: ARRAY
31553: ST_TO_ADDR
// if h + 7 < height then
31554: LD_VAR 0 13
31558: PUSH
31559: LD_INT 7
31561: PLUS
31562: PUSH
31563: LD_VAR 0 15
31567: LESS
31568: IFFALSE 31597
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31570: LD_ADDR_VAR 0 18
31574: PUSH
31575: LD_INT 7
31577: PUSH
31578: LD_INT 28
31580: PUSH
31581: LD_INT 45
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: LIST
31588: PUSH
31589: LD_VAR 0 12
31593: ARRAY
31594: ST_TO_ADDR
// break ;
31595: GO 31599
// end ; end ; end ;
31597: GO 31428
31599: POP
31600: POP
// end ; if not weapon then
31601: LD_VAR 0 18
31605: NOT
31606: IFFALSE 31666
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31608: LD_ADDR_VAR 0 5
31612: PUSH
31613: LD_VAR 0 5
31617: PUSH
31618: LD_INT 11
31620: PUSH
31621: LD_INT 30
31623: PUSH
31624: LD_INT 49
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: DIFF
31632: ST_TO_ADDR
// if not list then
31633: LD_VAR 0 5
31637: NOT
31638: IFFALSE 31642
// exit ;
31640: GO 31784
// weapon := list [ rand ( 1 , list ) ] ;
31642: LD_ADDR_VAR 0 18
31646: PUSH
31647: LD_VAR 0 5
31651: PUSH
31652: LD_INT 1
31654: PPUSH
31655: LD_VAR 0 5
31659: PPUSH
31660: CALL_OW 12
31664: ARRAY
31665: ST_TO_ADDR
// end ; if weapon then
31666: LD_VAR 0 18
31670: IFFALSE 31784
// begin tmp := CostOfWeapon ( weapon ) ;
31672: LD_ADDR_VAR 0 14
31676: PUSH
31677: LD_VAR 0 18
31681: PPUSH
31682: CALL_OW 451
31686: ST_TO_ADDR
// j := GetBase ( tower ) ;
31687: LD_ADDR_VAR 0 9
31691: PUSH
31692: LD_VAR 0 1
31696: PPUSH
31697: CALL_OW 274
31701: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31702: LD_VAR 0 9
31706: PPUSH
31707: LD_INT 1
31709: PPUSH
31710: CALL_OW 275
31714: PUSH
31715: LD_VAR 0 14
31719: PUSH
31720: LD_INT 1
31722: ARRAY
31723: GREATEREQUAL
31724: PUSH
31725: LD_VAR 0 9
31729: PPUSH
31730: LD_INT 2
31732: PPUSH
31733: CALL_OW 275
31737: PUSH
31738: LD_VAR 0 14
31742: PUSH
31743: LD_INT 2
31745: ARRAY
31746: GREATEREQUAL
31747: AND
31748: PUSH
31749: LD_VAR 0 9
31753: PPUSH
31754: LD_INT 3
31756: PPUSH
31757: CALL_OW 275
31761: PUSH
31762: LD_VAR 0 14
31766: PUSH
31767: LD_INT 3
31769: ARRAY
31770: GREATEREQUAL
31771: AND
31772: IFFALSE 31784
// result := weapon ;
31774: LD_ADDR_VAR 0 3
31778: PUSH
31779: LD_VAR 0 18
31783: ST_TO_ADDR
// end ; end ;
31784: LD_VAR 0 3
31788: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31789: LD_INT 0
31791: PPUSH
31792: PPUSH
// result := true ;
31793: LD_ADDR_VAR 0 3
31797: PUSH
31798: LD_INT 1
31800: ST_TO_ADDR
// if array1 = array2 then
31801: LD_VAR 0 1
31805: PUSH
31806: LD_VAR 0 2
31810: EQUAL
31811: IFFALSE 31871
// begin for i = 1 to array1 do
31813: LD_ADDR_VAR 0 4
31817: PUSH
31818: DOUBLE
31819: LD_INT 1
31821: DEC
31822: ST_TO_ADDR
31823: LD_VAR 0 1
31827: PUSH
31828: FOR_TO
31829: IFFALSE 31867
// if array1 [ i ] <> array2 [ i ] then
31831: LD_VAR 0 1
31835: PUSH
31836: LD_VAR 0 4
31840: ARRAY
31841: PUSH
31842: LD_VAR 0 2
31846: PUSH
31847: LD_VAR 0 4
31851: ARRAY
31852: NONEQUAL
31853: IFFALSE 31865
// begin result := false ;
31855: LD_ADDR_VAR 0 3
31859: PUSH
31860: LD_INT 0
31862: ST_TO_ADDR
// break ;
31863: GO 31867
// end ;
31865: GO 31828
31867: POP
31868: POP
// end else
31869: GO 31879
// result := false ;
31871: LD_ADDR_VAR 0 3
31875: PUSH
31876: LD_INT 0
31878: ST_TO_ADDR
// end ;
31879: LD_VAR 0 3
31883: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31884: LD_INT 0
31886: PPUSH
31887: PPUSH
31888: PPUSH
// pom := GetBase ( fac ) ;
31889: LD_ADDR_VAR 0 5
31893: PUSH
31894: LD_VAR 0 1
31898: PPUSH
31899: CALL_OW 274
31903: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31904: LD_ADDR_VAR 0 4
31908: PUSH
31909: LD_VAR 0 2
31913: PUSH
31914: LD_INT 1
31916: ARRAY
31917: PPUSH
31918: LD_VAR 0 2
31922: PUSH
31923: LD_INT 2
31925: ARRAY
31926: PPUSH
31927: LD_VAR 0 2
31931: PUSH
31932: LD_INT 3
31934: ARRAY
31935: PPUSH
31936: LD_VAR 0 2
31940: PUSH
31941: LD_INT 4
31943: ARRAY
31944: PPUSH
31945: CALL_OW 449
31949: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31950: LD_ADDR_VAR 0 3
31954: PUSH
31955: LD_VAR 0 5
31959: PPUSH
31960: LD_INT 1
31962: PPUSH
31963: CALL_OW 275
31967: PUSH
31968: LD_VAR 0 4
31972: PUSH
31973: LD_INT 1
31975: ARRAY
31976: GREATEREQUAL
31977: PUSH
31978: LD_VAR 0 5
31982: PPUSH
31983: LD_INT 2
31985: PPUSH
31986: CALL_OW 275
31990: PUSH
31991: LD_VAR 0 4
31995: PUSH
31996: LD_INT 2
31998: ARRAY
31999: GREATEREQUAL
32000: AND
32001: PUSH
32002: LD_VAR 0 5
32006: PPUSH
32007: LD_INT 3
32009: PPUSH
32010: CALL_OW 275
32014: PUSH
32015: LD_VAR 0 4
32019: PUSH
32020: LD_INT 3
32022: ARRAY
32023: GREATEREQUAL
32024: AND
32025: ST_TO_ADDR
// end ;
32026: LD_VAR 0 3
32030: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32031: LD_INT 0
32033: PPUSH
32034: PPUSH
32035: PPUSH
32036: PPUSH
// pom := GetBase ( building ) ;
32037: LD_ADDR_VAR 0 3
32041: PUSH
32042: LD_VAR 0 1
32046: PPUSH
32047: CALL_OW 274
32051: ST_TO_ADDR
// if not pom then
32052: LD_VAR 0 3
32056: NOT
32057: IFFALSE 32061
// exit ;
32059: GO 32231
// btype := GetBType ( building ) ;
32061: LD_ADDR_VAR 0 5
32065: PUSH
32066: LD_VAR 0 1
32070: PPUSH
32071: CALL_OW 266
32075: ST_TO_ADDR
// if btype = b_armoury then
32076: LD_VAR 0 5
32080: PUSH
32081: LD_INT 4
32083: EQUAL
32084: IFFALSE 32094
// btype := b_barracks ;
32086: LD_ADDR_VAR 0 5
32090: PUSH
32091: LD_INT 5
32093: ST_TO_ADDR
// if btype = b_depot then
32094: LD_VAR 0 5
32098: PUSH
32099: LD_INT 0
32101: EQUAL
32102: IFFALSE 32112
// btype := b_warehouse ;
32104: LD_ADDR_VAR 0 5
32108: PUSH
32109: LD_INT 1
32111: ST_TO_ADDR
// if btype = b_workshop then
32112: LD_VAR 0 5
32116: PUSH
32117: LD_INT 2
32119: EQUAL
32120: IFFALSE 32130
// btype := b_factory ;
32122: LD_ADDR_VAR 0 5
32126: PUSH
32127: LD_INT 3
32129: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32130: LD_ADDR_VAR 0 4
32134: PUSH
32135: LD_VAR 0 5
32139: PPUSH
32140: LD_VAR 0 1
32144: PPUSH
32145: CALL_OW 248
32149: PPUSH
32150: CALL_OW 450
32154: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32155: LD_ADDR_VAR 0 2
32159: PUSH
32160: LD_VAR 0 3
32164: PPUSH
32165: LD_INT 1
32167: PPUSH
32168: CALL_OW 275
32172: PUSH
32173: LD_VAR 0 4
32177: PUSH
32178: LD_INT 1
32180: ARRAY
32181: GREATEREQUAL
32182: PUSH
32183: LD_VAR 0 3
32187: PPUSH
32188: LD_INT 2
32190: PPUSH
32191: CALL_OW 275
32195: PUSH
32196: LD_VAR 0 4
32200: PUSH
32201: LD_INT 2
32203: ARRAY
32204: GREATEREQUAL
32205: AND
32206: PUSH
32207: LD_VAR 0 3
32211: PPUSH
32212: LD_INT 3
32214: PPUSH
32215: CALL_OW 275
32219: PUSH
32220: LD_VAR 0 4
32224: PUSH
32225: LD_INT 3
32227: ARRAY
32228: GREATEREQUAL
32229: AND
32230: ST_TO_ADDR
// end ;
32231: LD_VAR 0 2
32235: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32236: LD_INT 0
32238: PPUSH
32239: PPUSH
32240: PPUSH
// pom := GetBase ( building ) ;
32241: LD_ADDR_VAR 0 4
32245: PUSH
32246: LD_VAR 0 1
32250: PPUSH
32251: CALL_OW 274
32255: ST_TO_ADDR
// if not pom then
32256: LD_VAR 0 4
32260: NOT
32261: IFFALSE 32265
// exit ;
32263: GO 32366
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32265: LD_ADDR_VAR 0 5
32269: PUSH
32270: LD_VAR 0 2
32274: PPUSH
32275: LD_VAR 0 1
32279: PPUSH
32280: CALL_OW 248
32284: PPUSH
32285: CALL_OW 450
32289: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32290: LD_ADDR_VAR 0 3
32294: PUSH
32295: LD_VAR 0 4
32299: PPUSH
32300: LD_INT 1
32302: PPUSH
32303: CALL_OW 275
32307: PUSH
32308: LD_VAR 0 5
32312: PUSH
32313: LD_INT 1
32315: ARRAY
32316: GREATEREQUAL
32317: PUSH
32318: LD_VAR 0 4
32322: PPUSH
32323: LD_INT 2
32325: PPUSH
32326: CALL_OW 275
32330: PUSH
32331: LD_VAR 0 5
32335: PUSH
32336: LD_INT 2
32338: ARRAY
32339: GREATEREQUAL
32340: AND
32341: PUSH
32342: LD_VAR 0 4
32346: PPUSH
32347: LD_INT 3
32349: PPUSH
32350: CALL_OW 275
32354: PUSH
32355: LD_VAR 0 5
32359: PUSH
32360: LD_INT 3
32362: ARRAY
32363: GREATEREQUAL
32364: AND
32365: ST_TO_ADDR
// end ;
32366: LD_VAR 0 3
32370: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32371: LD_INT 0
32373: PPUSH
32374: PPUSH
32375: PPUSH
32376: PPUSH
32377: PPUSH
32378: PPUSH
32379: PPUSH
32380: PPUSH
32381: PPUSH
32382: PPUSH
// result := false ;
32383: LD_ADDR_VAR 0 6
32387: PUSH
32388: LD_INT 0
32390: ST_TO_ADDR
// if not base or not btype or not x or not y then
32391: LD_VAR 0 1
32395: NOT
32396: PUSH
32397: LD_VAR 0 2
32401: NOT
32402: OR
32403: PUSH
32404: LD_VAR 0 3
32408: NOT
32409: OR
32410: PUSH
32411: LD_VAR 0 4
32415: NOT
32416: OR
32417: IFFALSE 32421
// exit ;
32419: GO 33030
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32421: LD_ADDR_VAR 0 12
32425: PUSH
32426: LD_VAR 0 2
32430: PPUSH
32431: LD_VAR 0 3
32435: PPUSH
32436: LD_VAR 0 4
32440: PPUSH
32441: LD_VAR 0 5
32445: PPUSH
32446: LD_VAR 0 1
32450: PUSH
32451: LD_INT 1
32453: ARRAY
32454: PPUSH
32455: CALL_OW 248
32459: PPUSH
32460: LD_INT 0
32462: PPUSH
32463: CALL 33867 0 6
32467: ST_TO_ADDR
// if not hexes then
32468: LD_VAR 0 12
32472: NOT
32473: IFFALSE 32477
// exit ;
32475: GO 33030
// for i = 1 to hexes do
32477: LD_ADDR_VAR 0 7
32481: PUSH
32482: DOUBLE
32483: LD_INT 1
32485: DEC
32486: ST_TO_ADDR
32487: LD_VAR 0 12
32491: PUSH
32492: FOR_TO
32493: IFFALSE 33028
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32495: LD_ADDR_VAR 0 11
32499: PUSH
32500: LD_VAR 0 12
32504: PUSH
32505: LD_VAR 0 7
32509: ARRAY
32510: PUSH
32511: LD_INT 1
32513: ARRAY
32514: PPUSH
32515: LD_VAR 0 12
32519: PUSH
32520: LD_VAR 0 7
32524: ARRAY
32525: PUSH
32526: LD_INT 2
32528: ARRAY
32529: PPUSH
32530: CALL_OW 428
32534: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32535: LD_VAR 0 12
32539: PUSH
32540: LD_VAR 0 7
32544: ARRAY
32545: PUSH
32546: LD_INT 1
32548: ARRAY
32549: PPUSH
32550: LD_VAR 0 12
32554: PUSH
32555: LD_VAR 0 7
32559: ARRAY
32560: PUSH
32561: LD_INT 2
32563: ARRAY
32564: PPUSH
32565: CALL_OW 351
32569: PUSH
32570: LD_VAR 0 12
32574: PUSH
32575: LD_VAR 0 7
32579: ARRAY
32580: PUSH
32581: LD_INT 1
32583: ARRAY
32584: PPUSH
32585: LD_VAR 0 12
32589: PUSH
32590: LD_VAR 0 7
32594: ARRAY
32595: PUSH
32596: LD_INT 2
32598: ARRAY
32599: PPUSH
32600: CALL_OW 488
32604: NOT
32605: OR
32606: PUSH
32607: LD_VAR 0 11
32611: PPUSH
32612: CALL_OW 247
32616: PUSH
32617: LD_INT 3
32619: EQUAL
32620: OR
32621: IFFALSE 32627
// exit ;
32623: POP
32624: POP
32625: GO 33030
// if not tmp or not tmp in base then
32627: LD_VAR 0 11
32631: NOT
32632: PUSH
32633: LD_VAR 0 11
32637: PUSH
32638: LD_VAR 0 1
32642: IN
32643: NOT
32644: OR
32645: IFFALSE 32649
// continue ;
32647: GO 32492
// result := true ;
32649: LD_ADDR_VAR 0 6
32653: PUSH
32654: LD_INT 1
32656: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32657: LD_ADDR_VAR 0 15
32661: PUSH
32662: LD_VAR 0 1
32666: PPUSH
32667: LD_INT 22
32669: PUSH
32670: LD_VAR 0 11
32674: PPUSH
32675: CALL_OW 255
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: LD_INT 30
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 30
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PPUSH
32716: CALL_OW 72
32720: ST_TO_ADDR
// if dep then
32721: LD_VAR 0 15
32725: IFFALSE 32861
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32727: LD_ADDR_VAR 0 14
32731: PUSH
32732: LD_VAR 0 15
32736: PUSH
32737: LD_INT 1
32739: ARRAY
32740: PPUSH
32741: CALL_OW 250
32745: PPUSH
32746: LD_VAR 0 15
32750: PUSH
32751: LD_INT 1
32753: ARRAY
32754: PPUSH
32755: CALL_OW 254
32759: PPUSH
32760: LD_INT 5
32762: PPUSH
32763: CALL_OW 272
32767: PUSH
32768: LD_VAR 0 15
32772: PUSH
32773: LD_INT 1
32775: ARRAY
32776: PPUSH
32777: CALL_OW 251
32781: PPUSH
32782: LD_VAR 0 15
32786: PUSH
32787: LD_INT 1
32789: ARRAY
32790: PPUSH
32791: CALL_OW 254
32795: PPUSH
32796: LD_INT 5
32798: PPUSH
32799: CALL_OW 273
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32808: LD_VAR 0 14
32812: PUSH
32813: LD_INT 1
32815: ARRAY
32816: PPUSH
32817: LD_VAR 0 14
32821: PUSH
32822: LD_INT 2
32824: ARRAY
32825: PPUSH
32826: CALL_OW 488
32830: IFFALSE 32861
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32832: LD_VAR 0 11
32836: PPUSH
32837: LD_VAR 0 14
32841: PUSH
32842: LD_INT 1
32844: ARRAY
32845: PPUSH
32846: LD_VAR 0 14
32850: PUSH
32851: LD_INT 2
32853: ARRAY
32854: PPUSH
32855: CALL_OW 111
// continue ;
32859: GO 32492
// end ; end ; r := GetDir ( tmp ) ;
32861: LD_ADDR_VAR 0 13
32865: PUSH
32866: LD_VAR 0 11
32870: PPUSH
32871: CALL_OW 254
32875: ST_TO_ADDR
// if r = 5 then
32876: LD_VAR 0 13
32880: PUSH
32881: LD_INT 5
32883: EQUAL
32884: IFFALSE 32894
// r := 0 ;
32886: LD_ADDR_VAR 0 13
32890: PUSH
32891: LD_INT 0
32893: ST_TO_ADDR
// for j = r to 5 do
32894: LD_ADDR_VAR 0 8
32898: PUSH
32899: DOUBLE
32900: LD_VAR 0 13
32904: DEC
32905: ST_TO_ADDR
32906: LD_INT 5
32908: PUSH
32909: FOR_TO
32910: IFFALSE 33024
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32912: LD_ADDR_VAR 0 9
32916: PUSH
32917: LD_VAR 0 11
32921: PPUSH
32922: CALL_OW 250
32926: PPUSH
32927: LD_VAR 0 8
32931: PPUSH
32932: LD_INT 2
32934: PPUSH
32935: CALL_OW 272
32939: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32940: LD_ADDR_VAR 0 10
32944: PUSH
32945: LD_VAR 0 11
32949: PPUSH
32950: CALL_OW 251
32954: PPUSH
32955: LD_VAR 0 8
32959: PPUSH
32960: LD_INT 2
32962: PPUSH
32963: CALL_OW 273
32967: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32968: LD_VAR 0 9
32972: PPUSH
32973: LD_VAR 0 10
32977: PPUSH
32978: CALL_OW 488
32982: PUSH
32983: LD_VAR 0 9
32987: PPUSH
32988: LD_VAR 0 10
32992: PPUSH
32993: CALL_OW 428
32997: NOT
32998: AND
32999: IFFALSE 33022
// begin ComMoveXY ( tmp , _x , _y ) ;
33001: LD_VAR 0 11
33005: PPUSH
33006: LD_VAR 0 9
33010: PPUSH
33011: LD_VAR 0 10
33015: PPUSH
33016: CALL_OW 111
// break ;
33020: GO 33024
// end ; end ;
33022: GO 32909
33024: POP
33025: POP
// end ;
33026: GO 32492
33028: POP
33029: POP
// end ;
33030: LD_VAR 0 6
33034: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33035: LD_INT 0
33037: PPUSH
33038: PPUSH
33039: PPUSH
33040: PPUSH
33041: PPUSH
33042: PPUSH
33043: PPUSH
33044: PPUSH
33045: PPUSH
33046: PPUSH
// result := false ;
33047: LD_ADDR_VAR 0 6
33051: PUSH
33052: LD_INT 0
33054: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33055: LD_VAR 0 1
33059: NOT
33060: PUSH
33061: LD_VAR 0 1
33065: PPUSH
33066: CALL_OW 266
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: IN
33081: NOT
33082: OR
33083: PUSH
33084: LD_VAR 0 2
33088: NOT
33089: OR
33090: PUSH
33091: LD_VAR 0 5
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: LD_INT 1
33101: PUSH
33102: LD_INT 2
33104: PUSH
33105: LD_INT 3
33107: PUSH
33108: LD_INT 4
33110: PUSH
33111: LD_INT 5
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: IN
33122: NOT
33123: OR
33124: PUSH
33125: LD_VAR 0 3
33129: PPUSH
33130: LD_VAR 0 4
33134: PPUSH
33135: CALL_OW 488
33139: NOT
33140: OR
33141: IFFALSE 33145
// exit ;
33143: GO 33862
// pom := GetBase ( depot ) ;
33145: LD_ADDR_VAR 0 10
33149: PUSH
33150: LD_VAR 0 1
33154: PPUSH
33155: CALL_OW 274
33159: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33160: LD_ADDR_VAR 0 11
33164: PUSH
33165: LD_VAR 0 2
33169: PPUSH
33170: LD_VAR 0 1
33174: PPUSH
33175: CALL_OW 248
33179: PPUSH
33180: CALL_OW 450
33184: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33185: LD_VAR 0 10
33189: PPUSH
33190: LD_INT 1
33192: PPUSH
33193: CALL_OW 275
33197: PUSH
33198: LD_VAR 0 11
33202: PUSH
33203: LD_INT 1
33205: ARRAY
33206: GREATEREQUAL
33207: PUSH
33208: LD_VAR 0 10
33212: PPUSH
33213: LD_INT 2
33215: PPUSH
33216: CALL_OW 275
33220: PUSH
33221: LD_VAR 0 11
33225: PUSH
33226: LD_INT 2
33228: ARRAY
33229: GREATEREQUAL
33230: AND
33231: PUSH
33232: LD_VAR 0 10
33236: PPUSH
33237: LD_INT 3
33239: PPUSH
33240: CALL_OW 275
33244: PUSH
33245: LD_VAR 0 11
33249: PUSH
33250: LD_INT 3
33252: ARRAY
33253: GREATEREQUAL
33254: AND
33255: NOT
33256: IFFALSE 33260
// exit ;
33258: GO 33862
// if GetBType ( depot ) = b_depot then
33260: LD_VAR 0 1
33264: PPUSH
33265: CALL_OW 266
33269: PUSH
33270: LD_INT 0
33272: EQUAL
33273: IFFALSE 33285
// dist := 28 else
33275: LD_ADDR_VAR 0 14
33279: PUSH
33280: LD_INT 28
33282: ST_TO_ADDR
33283: GO 33293
// dist := 36 ;
33285: LD_ADDR_VAR 0 14
33289: PUSH
33290: LD_INT 36
33292: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33293: LD_VAR 0 1
33297: PPUSH
33298: LD_VAR 0 3
33302: PPUSH
33303: LD_VAR 0 4
33307: PPUSH
33308: CALL_OW 297
33312: PUSH
33313: LD_VAR 0 14
33317: GREATER
33318: IFFALSE 33322
// exit ;
33320: GO 33862
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33322: LD_ADDR_VAR 0 12
33326: PUSH
33327: LD_VAR 0 2
33331: PPUSH
33332: LD_VAR 0 3
33336: PPUSH
33337: LD_VAR 0 4
33341: PPUSH
33342: LD_VAR 0 5
33346: PPUSH
33347: LD_VAR 0 1
33351: PPUSH
33352: CALL_OW 248
33356: PPUSH
33357: LD_INT 0
33359: PPUSH
33360: CALL 33867 0 6
33364: ST_TO_ADDR
// if not hexes then
33365: LD_VAR 0 12
33369: NOT
33370: IFFALSE 33374
// exit ;
33372: GO 33862
// hex := GetHexInfo ( x , y ) ;
33374: LD_ADDR_VAR 0 15
33378: PUSH
33379: LD_VAR 0 3
33383: PPUSH
33384: LD_VAR 0 4
33388: PPUSH
33389: CALL_OW 546
33393: ST_TO_ADDR
// if hex [ 1 ] then
33394: LD_VAR 0 15
33398: PUSH
33399: LD_INT 1
33401: ARRAY
33402: IFFALSE 33406
// exit ;
33404: GO 33862
// height := hex [ 2 ] ;
33406: LD_ADDR_VAR 0 13
33410: PUSH
33411: LD_VAR 0 15
33415: PUSH
33416: LD_INT 2
33418: ARRAY
33419: ST_TO_ADDR
// for i = 1 to hexes do
33420: LD_ADDR_VAR 0 7
33424: PUSH
33425: DOUBLE
33426: LD_INT 1
33428: DEC
33429: ST_TO_ADDR
33430: LD_VAR 0 12
33434: PUSH
33435: FOR_TO
33436: IFFALSE 33766
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33438: LD_VAR 0 12
33442: PUSH
33443: LD_VAR 0 7
33447: ARRAY
33448: PUSH
33449: LD_INT 1
33451: ARRAY
33452: PPUSH
33453: LD_VAR 0 12
33457: PUSH
33458: LD_VAR 0 7
33462: ARRAY
33463: PUSH
33464: LD_INT 2
33466: ARRAY
33467: PPUSH
33468: CALL_OW 488
33472: NOT
33473: PUSH
33474: LD_VAR 0 12
33478: PUSH
33479: LD_VAR 0 7
33483: ARRAY
33484: PUSH
33485: LD_INT 1
33487: ARRAY
33488: PPUSH
33489: LD_VAR 0 12
33493: PUSH
33494: LD_VAR 0 7
33498: ARRAY
33499: PUSH
33500: LD_INT 2
33502: ARRAY
33503: PPUSH
33504: CALL_OW 428
33508: PUSH
33509: LD_INT 0
33511: GREATER
33512: OR
33513: PUSH
33514: LD_VAR 0 12
33518: PUSH
33519: LD_VAR 0 7
33523: ARRAY
33524: PUSH
33525: LD_INT 1
33527: ARRAY
33528: PPUSH
33529: LD_VAR 0 12
33533: PUSH
33534: LD_VAR 0 7
33538: ARRAY
33539: PUSH
33540: LD_INT 2
33542: ARRAY
33543: PPUSH
33544: CALL_OW 351
33548: OR
33549: IFFALSE 33555
// exit ;
33551: POP
33552: POP
33553: GO 33862
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33555: LD_ADDR_VAR 0 8
33559: PUSH
33560: LD_VAR 0 12
33564: PUSH
33565: LD_VAR 0 7
33569: ARRAY
33570: PUSH
33571: LD_INT 1
33573: ARRAY
33574: PPUSH
33575: LD_VAR 0 12
33579: PUSH
33580: LD_VAR 0 7
33584: ARRAY
33585: PUSH
33586: LD_INT 2
33588: ARRAY
33589: PPUSH
33590: CALL_OW 546
33594: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33595: LD_VAR 0 8
33599: PUSH
33600: LD_INT 1
33602: ARRAY
33603: PUSH
33604: LD_VAR 0 8
33608: PUSH
33609: LD_INT 2
33611: ARRAY
33612: PUSH
33613: LD_VAR 0 13
33617: PUSH
33618: LD_INT 2
33620: PLUS
33621: GREATER
33622: OR
33623: PUSH
33624: LD_VAR 0 8
33628: PUSH
33629: LD_INT 2
33631: ARRAY
33632: PUSH
33633: LD_VAR 0 13
33637: PUSH
33638: LD_INT 2
33640: MINUS
33641: LESS
33642: OR
33643: PUSH
33644: LD_VAR 0 8
33648: PUSH
33649: LD_INT 3
33651: ARRAY
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: LD_INT 8
33658: PUSH
33659: LD_INT 9
33661: PUSH
33662: LD_INT 10
33664: PUSH
33665: LD_INT 11
33667: PUSH
33668: LD_INT 12
33670: PUSH
33671: LD_INT 13
33673: PUSH
33674: LD_INT 16
33676: PUSH
33677: LD_INT 17
33679: PUSH
33680: LD_INT 18
33682: PUSH
33683: LD_INT 19
33685: PUSH
33686: LD_INT 20
33688: PUSH
33689: LD_INT 21
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: IN
33707: NOT
33708: OR
33709: PUSH
33710: LD_VAR 0 8
33714: PUSH
33715: LD_INT 5
33717: ARRAY
33718: NOT
33719: OR
33720: PUSH
33721: LD_VAR 0 8
33725: PUSH
33726: LD_INT 6
33728: ARRAY
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: LD_INT 2
33735: PUSH
33736: LD_INT 7
33738: PUSH
33739: LD_INT 9
33741: PUSH
33742: LD_INT 10
33744: PUSH
33745: LD_INT 11
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: IN
33756: NOT
33757: OR
33758: IFFALSE 33764
// exit ;
33760: POP
33761: POP
33762: GO 33862
// end ;
33764: GO 33435
33766: POP
33767: POP
// side := GetSide ( depot ) ;
33768: LD_ADDR_VAR 0 9
33772: PUSH
33773: LD_VAR 0 1
33777: PPUSH
33778: CALL_OW 255
33782: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33783: LD_VAR 0 9
33787: PPUSH
33788: LD_VAR 0 3
33792: PPUSH
33793: LD_VAR 0 4
33797: PPUSH
33798: LD_INT 20
33800: PPUSH
33801: CALL 26516 0 4
33805: PUSH
33806: LD_INT 4
33808: ARRAY
33809: IFFALSE 33813
// exit ;
33811: GO 33862
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33813: LD_VAR 0 2
33817: PUSH
33818: LD_INT 29
33820: PUSH
33821: LD_INT 30
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: IN
33828: PUSH
33829: LD_VAR 0 3
33833: PPUSH
33834: LD_VAR 0 4
33838: PPUSH
33839: LD_VAR 0 9
33843: PPUSH
33844: CALL_OW 440
33848: NOT
33849: AND
33850: IFFALSE 33854
// exit ;
33852: GO 33862
// result := true ;
33854: LD_ADDR_VAR 0 6
33858: PUSH
33859: LD_INT 1
33861: ST_TO_ADDR
// end ;
33862: LD_VAR 0 6
33866: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33867: LD_INT 0
33869: PPUSH
33870: PPUSH
33871: PPUSH
33872: PPUSH
33873: PPUSH
33874: PPUSH
33875: PPUSH
33876: PPUSH
33877: PPUSH
33878: PPUSH
33879: PPUSH
33880: PPUSH
33881: PPUSH
33882: PPUSH
33883: PPUSH
33884: PPUSH
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
33889: PPUSH
33890: PPUSH
33891: PPUSH
33892: PPUSH
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
33901: PPUSH
33902: PPUSH
33903: PPUSH
33904: PPUSH
33905: PPUSH
33906: PPUSH
33907: PPUSH
33908: PPUSH
33909: PPUSH
33910: PPUSH
33911: PPUSH
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
33916: PPUSH
33917: PPUSH
33918: PPUSH
33919: PPUSH
33920: PPUSH
33921: PPUSH
33922: PPUSH
33923: PPUSH
33924: PPUSH
33925: PPUSH
33926: PPUSH
// result = [ ] ;
33927: LD_ADDR_VAR 0 7
33931: PUSH
33932: EMPTY
33933: ST_TO_ADDR
// temp_list = [ ] ;
33934: LD_ADDR_VAR 0 9
33938: PUSH
33939: EMPTY
33940: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33941: LD_VAR 0 4
33945: PUSH
33946: LD_INT 0
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: LD_INT 2
33954: PUSH
33955: LD_INT 3
33957: PUSH
33958: LD_INT 4
33960: PUSH
33961: LD_INT 5
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: IN
33972: NOT
33973: PUSH
33974: LD_VAR 0 1
33978: PUSH
33979: LD_INT 0
33981: PUSH
33982: LD_INT 1
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: IN
33989: PUSH
33990: LD_VAR 0 5
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: LD_INT 2
34000: PUSH
34001: LD_INT 3
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: LIST
34008: IN
34009: NOT
34010: AND
34011: OR
34012: IFFALSE 34016
// exit ;
34014: GO 52407
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34016: LD_VAR 0 1
34020: PUSH
34021: LD_INT 6
34023: PUSH
34024: LD_INT 7
34026: PUSH
34027: LD_INT 8
34029: PUSH
34030: LD_INT 13
34032: PUSH
34033: LD_INT 12
34035: PUSH
34036: LD_INT 15
34038: PUSH
34039: LD_INT 11
34041: PUSH
34042: LD_INT 14
34044: PUSH
34045: LD_INT 10
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: IN
34059: IFFALSE 34069
// btype = b_lab ;
34061: LD_ADDR_VAR 0 1
34065: PUSH
34066: LD_INT 6
34068: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34069: LD_VAR 0 6
34073: PUSH
34074: LD_INT 0
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: LD_INT 2
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: LIST
34087: IN
34088: NOT
34089: PUSH
34090: LD_VAR 0 1
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: LD_INT 3
34106: PUSH
34107: LD_INT 6
34109: PUSH
34110: LD_INT 36
34112: PUSH
34113: LD_INT 4
34115: PUSH
34116: LD_INT 5
34118: PUSH
34119: LD_INT 31
34121: PUSH
34122: LD_INT 32
34124: PUSH
34125: LD_INT 33
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: IN
34141: NOT
34142: PUSH
34143: LD_VAR 0 6
34147: PUSH
34148: LD_INT 1
34150: EQUAL
34151: AND
34152: OR
34153: PUSH
34154: LD_VAR 0 1
34158: PUSH
34159: LD_INT 2
34161: PUSH
34162: LD_INT 3
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: IN
34169: NOT
34170: PUSH
34171: LD_VAR 0 6
34175: PUSH
34176: LD_INT 2
34178: EQUAL
34179: AND
34180: OR
34181: IFFALSE 34191
// mode = 0 ;
34183: LD_ADDR_VAR 0 6
34187: PUSH
34188: LD_INT 0
34190: ST_TO_ADDR
// case mode of 0 :
34191: LD_VAR 0 6
34195: PUSH
34196: LD_INT 0
34198: DOUBLE
34199: EQUAL
34200: IFTRUE 34204
34202: GO 45657
34204: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34205: LD_ADDR_VAR 0 11
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: LD_INT 1
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: LD_INT 1
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: LD_INT 2
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: LD_INT 2
34301: NEG
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: PUSH
34321: LD_INT 2
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: LD_INT 2
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: LD_INT 3
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: LD_INT 3
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 1
34371: NEG
34372: PUSH
34373: LD_INT 2
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34398: LD_ADDR_VAR 0 12
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 0
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 0
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: NEG
34468: PUSH
34469: LD_INT 1
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: LD_INT 1
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 2
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 2
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: NEG
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: NEG
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 2
34532: NEG
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: NEG
34545: PUSH
34546: LD_INT 1
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 3
34555: NEG
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 3
34566: NEG
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34594: LD_ADDR_VAR 0 13
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: LD_INT 0
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: LD_INT 1
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: NEG
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: NEG
34676: PUSH
34677: LD_INT 2
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 2
34687: PUSH
34688: LD_INT 1
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: LD_INT 2
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: LD_INT 2
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 2
34717: NEG
34718: PUSH
34719: LD_INT 1
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 2
34729: NEG
34730: PUSH
34731: LD_INT 2
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: LD_INT 3
34745: NEG
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 3
34753: NEG
34754: PUSH
34755: LD_INT 2
34757: NEG
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 3
34765: NEG
34766: PUSH
34767: LD_INT 3
34769: NEG
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34793: LD_ADDR_VAR 0 14
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: LD_INT 1
34813: NEG
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 0
34841: PUSH
34842: LD_INT 1
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 1
34851: NEG
34852: PUSH
34853: LD_INT 0
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: NEG
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: LD_INT 2
34878: NEG
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: LD_INT 2
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 1
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: LD_INT 2
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: LD_INT 2
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 1
34928: NEG
34929: PUSH
34930: LD_INT 1
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: NEG
34940: PUSH
34941: LD_INT 3
34943: NEG
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 0
34951: PUSH
34952: LD_INT 3
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: LD_INT 2
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34989: LD_ADDR_VAR 0 15
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: LD_INT 0
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: LD_INT 1
35009: NEG
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: LD_INT 1
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: LD_INT 0
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: LD_INT 1
35062: NEG
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 2
35112: NEG
35113: PUSH
35114: LD_INT 0
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 2
35123: NEG
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: PUSH
35136: LD_INT 1
35138: NEG
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 3
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 3
35156: PUSH
35157: LD_INT 1
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35182: LD_ADDR_VAR 0 16
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: NEG
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: LD_INT 2
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 2
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 2
35285: PUSH
35286: LD_INT 2
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: LD_INT 2
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 2
35305: NEG
35306: PUSH
35307: LD_INT 1
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 2
35317: NEG
35318: PUSH
35319: LD_INT 2
35321: NEG
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 3
35329: PUSH
35330: LD_INT 2
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 3
35339: PUSH
35340: LD_INT 3
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 2
35349: PUSH
35350: LD_INT 3
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35375: LD_ADDR_VAR 0 17
35379: PUSH
35380: LD_INT 0
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 0
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 0
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 1
35433: NEG
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 1
35444: NEG
35445: PUSH
35446: LD_INT 1
35448: NEG
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: LD_INT 2
35460: NEG
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: LD_INT 2
35471: NEG
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 2
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 2
35510: PUSH
35511: LD_INT 2
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: LD_INT 2
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: LD_INT 2
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: NEG
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 2
35551: NEG
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 2
35562: NEG
35563: PUSH
35564: LD_INT 1
35566: NEG
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 2
35574: NEG
35575: PUSH
35576: LD_INT 2
35578: NEG
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35605: LD_ADDR_VAR 0 18
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 1
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: LD_INT 1
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: NEG
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: LD_INT 2
35690: NEG
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 0
35698: PUSH
35699: LD_INT 2
35701: NEG
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: LD_INT 1
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 2
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 2
35730: PUSH
35731: LD_INT 1
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: LD_INT 2
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: LD_INT 2
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 0
35760: PUSH
35761: LD_INT 2
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 2
35781: NEG
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 2
35792: NEG
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 2
35804: NEG
35805: PUSH
35806: LD_INT 2
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35835: LD_ADDR_VAR 0 19
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: LD_INT 1
35855: NEG
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: LD_INT 1
35908: NEG
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 1
35916: NEG
35917: PUSH
35918: LD_INT 2
35920: NEG
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: LD_INT 2
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 2
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 2
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 2
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 1
35980: PUSH
35981: LD_INT 2
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: LD_INT 2
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 1
36000: NEG
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 2
36011: NEG
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 2
36022: NEG
36023: PUSH
36024: LD_INT 1
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 2
36034: NEG
36035: PUSH
36036: LD_INT 2
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36065: LD_ADDR_VAR 0 20
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: LD_INT 0
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: LD_INT 1
36085: NEG
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: LD_INT 1
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 0
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: NEG
36124: PUSH
36125: LD_INT 0
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: LD_INT 2
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: LD_INT 2
36161: NEG
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: LD_INT 1
36172: NEG
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: LD_INT 0
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 2
36190: PUSH
36191: LD_INT 1
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 2
36200: PUSH
36201: LD_INT 2
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 1
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 2
36241: NEG
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 2
36264: NEG
36265: PUSH
36266: LD_INT 2
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36295: LD_ADDR_VAR 0 21
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 1
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: NEG
36377: PUSH
36378: LD_INT 2
36380: NEG
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 0
36388: PUSH
36389: LD_INT 2
36391: NEG
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 2
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 2
36430: PUSH
36431: LD_INT 2
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 0
36450: PUSH
36451: LD_INT 2
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 1
36460: NEG
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 2
36471: NEG
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 2
36482: NEG
36483: PUSH
36484: LD_INT 1
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 2
36494: NEG
36495: PUSH
36496: LD_INT 2
36498: NEG
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36525: LD_ADDR_VAR 0 22
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: LD_INT 2
36621: NEG
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 2
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 2
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: PUSH
36671: LD_INT 2
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 2
36701: NEG
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 2
36712: NEG
36713: PUSH
36714: LD_INT 1
36716: NEG
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 2
36724: NEG
36725: PUSH
36726: LD_INT 2
36728: NEG
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36755: LD_ADDR_VAR 0 23
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 1
36824: NEG
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: LD_INT 2
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 2
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: LD_INT 1
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 2
36890: PUSH
36891: LD_INT 2
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 1
36900: PUSH
36901: LD_INT 2
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 0
36910: PUSH
36911: LD_INT 2
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 1
36920: NEG
36921: PUSH
36922: LD_INT 1
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 2
36931: NEG
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 2
36942: NEG
36943: PUSH
36944: LD_INT 1
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 2
36954: NEG
36955: PUSH
36956: LD_INT 2
36958: NEG
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 2
36966: NEG
36967: PUSH
36968: LD_INT 3
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: LD_INT 3
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 1
36990: PUSH
36991: LD_INT 2
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 2
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37035: LD_ADDR_VAR 0 24
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 0
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 1
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: LD_INT 1
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: NEG
37105: PUSH
37106: LD_INT 1
37108: NEG
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: LD_INT 2
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: LD_INT 2
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 1
37139: PUSH
37140: LD_INT 1
37142: NEG
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 2
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 2
37160: PUSH
37161: LD_INT 1
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 2
37170: PUSH
37171: LD_INT 2
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 1
37180: PUSH
37181: LD_INT 2
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: LD_INT 2
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 1
37200: NEG
37201: PUSH
37202: LD_INT 1
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 2
37211: NEG
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 2
37222: NEG
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 2
37234: NEG
37235: PUSH
37236: LD_INT 2
37238: NEG
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: LD_INT 2
37249: NEG
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 2
37257: PUSH
37258: LD_INT 1
37260: NEG
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 3
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 3
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37311: LD_ADDR_VAR 0 25
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 0
37328: PUSH
37329: LD_INT 1
37331: NEG
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: LD_INT 1
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 1
37369: NEG
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 1
37380: NEG
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 1
37392: NEG
37393: PUSH
37394: LD_INT 2
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: LD_INT 2
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 2
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 2
37446: PUSH
37447: LD_INT 2
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: LD_INT 2
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: LD_INT 2
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: PUSH
37478: LD_INT 1
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 2
37487: NEG
37488: PUSH
37489: LD_INT 0
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: NEG
37499: PUSH
37500: LD_INT 1
37502: NEG
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: NEG
37511: PUSH
37512: LD_INT 2
37514: NEG
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 3
37522: PUSH
37523: LD_INT 1
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 3
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 2
37542: PUSH
37543: LD_INT 3
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: LD_INT 3
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37585: LD_ADDR_VAR 0 26
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 0
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 1
37643: NEG
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: NEG
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 1
37666: NEG
37667: PUSH
37668: LD_INT 2
37670: NEG
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: LD_INT 2
37681: NEG
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: LD_INT 1
37692: NEG
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: PUSH
37701: LD_INT 0
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 2
37710: PUSH
37711: LD_INT 1
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 2
37720: PUSH
37721: LD_INT 2
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: LD_INT 2
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 0
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 2
37761: NEG
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 2
37772: NEG
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 2
37784: NEG
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 2
37796: PUSH
37797: LD_INT 3
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: PUSH
37807: LD_INT 3
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 1
37816: NEG
37817: PUSH
37818: LD_INT 2
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 2
37827: NEG
37828: PUSH
37829: LD_INT 1
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37861: LD_ADDR_VAR 0 27
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: LD_INT 1
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 1
37930: NEG
37931: PUSH
37932: LD_INT 1
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: PUSH
37944: LD_INT 2
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: LD_INT 2
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: LD_INT 1
37968: NEG
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 2
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 2
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 0
38016: PUSH
38017: LD_INT 2
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 2
38037: NEG
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 2
38048: NEG
38049: PUSH
38050: LD_INT 1
38052: NEG
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 2
38060: NEG
38061: PUSH
38062: LD_INT 2
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 2
38083: NEG
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 3
38094: NEG
38095: PUSH
38096: LD_INT 1
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 3
38106: NEG
38107: PUSH
38108: LD_INT 2
38110: NEG
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38141: LD_ADDR_VAR 0 28
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: LD_INT 1
38161: NEG
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: LD_INT 1
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 1
38210: NEG
38211: PUSH
38212: LD_INT 1
38214: NEG
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: NEG
38223: PUSH
38224: LD_INT 2
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: LD_INT 1
38248: NEG
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: LD_INT 0
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 2
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 2
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: LD_INT 2
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 1
38306: NEG
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 2
38317: NEG
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 2
38328: NEG
38329: PUSH
38330: LD_INT 1
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 2
38340: NEG
38341: PUSH
38342: LD_INT 2
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 2
38352: NEG
38353: PUSH
38354: LD_INT 3
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: LD_INT 3
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 3
38376: NEG
38377: PUSH
38378: LD_INT 1
38380: NEG
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 3
38388: NEG
38389: PUSH
38390: LD_INT 2
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38423: LD_ADDR_VAR 0 29
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 0
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 1
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 0
38471: PUSH
38472: LD_INT 1
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 1
38504: NEG
38505: PUSH
38506: LD_INT 2
38508: NEG
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: LD_INT 2
38519: NEG
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: LD_INT 2
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 1
38578: NEG
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: LD_INT 1
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: LD_INT 2
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 2
38613: NEG
38614: PUSH
38615: LD_INT 3
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 1
38628: NEG
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 3
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 1
38646: PUSH
38647: LD_INT 3
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: LD_INT 2
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 3
38667: NEG
38668: PUSH
38669: LD_INT 2
38671: NEG
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38702: LD_ADDR_VAR 0 30
38706: PUSH
38707: LD_INT 0
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 1
38760: NEG
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: LD_INT 2
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: LD_INT 2
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: LD_INT 1
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: LD_INT 0
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 1
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: LD_INT 1
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 2
38868: NEG
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 2
38879: NEG
38880: PUSH
38881: LD_INT 1
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: LD_INT 3
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: PUSH
38904: LD_INT 2
38906: NEG
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 3
38914: PUSH
38915: LD_INT 2
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: LD_INT 3
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 2
38934: NEG
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 3
38945: NEG
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38980: LD_ADDR_VAR 0 31
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: LD_INT 1
39000: NEG
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: LD_INT 0
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: LD_INT 1
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: LD_INT 1
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: LD_INT 2
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: LD_INT 2
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: LD_INT 2
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 2
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 2
39157: NEG
39158: PUSH
39159: LD_INT 2
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 2
39169: NEG
39170: PUSH
39171: LD_INT 3
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 2
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 3
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: LD_INT 3
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: LD_INT 2
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 3
39223: NEG
39224: PUSH
39225: LD_INT 2
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39258: LD_ADDR_VAR 0 32
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 0
39275: PUSH
39276: LD_INT 1
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: LD_INT 0
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 1
39316: NEG
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: LD_INT 2
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 2
39373: PUSH
39374: LD_INT 1
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 2
39383: PUSH
39384: LD_INT 2
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 2
39435: NEG
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: LD_INT 3
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: LD_INT 2
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: LD_INT 3
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 2
39490: NEG
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 3
39501: NEG
39502: PUSH
39503: LD_INT 1
39505: NEG
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39536: LD_ADDR_VAR 0 33
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: LD_INT 1
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 1
39594: NEG
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: NEG
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: PUSH
39619: LD_INT 2
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 1
39660: PUSH
39661: LD_INT 2
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 2
39691: NEG
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 2
39702: NEG
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: LD_INT 2
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: LD_INT 3
39730: NEG
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 3
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 3
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: NEG
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 3
39780: NEG
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39815: LD_ADDR_VAR 0 34
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 0
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 1
39896: NEG
39897: PUSH
39898: LD_INT 2
39900: NEG
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 1
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: LD_INT 2
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 1
39960: NEG
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 2
39971: NEG
39972: PUSH
39973: LD_INT 0
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 2
39982: NEG
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: NEG
39995: PUSH
39996: LD_INT 2
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 1
40006: NEG
40007: PUSH
40008: LD_INT 3
40010: NEG
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: LD_INT 2
40021: NEG
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 3
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 2
40039: PUSH
40040: LD_INT 3
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 2
40049: NEG
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 3
40060: NEG
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40095: LD_ADDR_VAR 0 35
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: LD_INT 0
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40207: LD_ADDR_VAR 0 36
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 2
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: LD_INT 2
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40319: LD_ADDR_VAR 0 37
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: LD_INT 1
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40431: LD_ADDR_VAR 0 38
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: NEG
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40543: LD_ADDR_VAR 0 39
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: LD_INT 1
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: LD_INT 0
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: LD_INT 1
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: LD_INT 2
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40655: LD_ADDR_VAR 0 40
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40767: LD_ADDR_VAR 0 41
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: LD_INT 2
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: LD_INT 1
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 2
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: LD_INT 3
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 3
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 3
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 3
41000: PUSH
41001: LD_INT 2
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 3
41010: PUSH
41011: LD_INT 3
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 2
41020: PUSH
41021: LD_INT 3
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 2
41030: NEG
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 3
41041: NEG
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 3
41052: NEG
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 3
41064: NEG
41065: PUSH
41066: LD_INT 2
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 3
41076: NEG
41077: PUSH
41078: LD_INT 3
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41117: LD_ADDR_VAR 0 42
41121: PUSH
41122: LD_INT 0
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: NEG
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: LD_INT 2
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: LD_INT 2
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: LD_INT 2
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: LD_INT 1
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 2
41295: NEG
41296: PUSH
41297: LD_INT 2
41299: NEG
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 2
41307: NEG
41308: PUSH
41309: LD_INT 3
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: LD_INT 3
41323: NEG
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: LD_INT 3
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: LD_INT 2
41345: NEG
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 3
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 3
41363: PUSH
41364: LD_INT 3
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 2
41373: PUSH
41374: LD_INT 3
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: PUSH
41384: LD_INT 3
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: LD_INT 3
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: LD_INT 2
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 3
41414: NEG
41415: PUSH
41416: LD_INT 2
41418: NEG
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 3
41426: NEG
41427: PUSH
41428: LD_INT 3
41430: NEG
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41467: LD_ADDR_VAR 0 43
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: LD_INT 2
41552: NEG
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 2
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 2
41633: NEG
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: LD_INT 3
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 0
41668: PUSH
41669: LD_INT 3
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 1
41679: PUSH
41680: LD_INT 2
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 3
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 3
41711: PUSH
41712: LD_INT 1
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: LD_INT 3
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: LD_INT 3
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 2
41752: NEG
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 3
41763: NEG
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 3
41774: NEG
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41815: LD_ADDR_VAR 0 44
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: NEG
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: LD_INT 2
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 2
41939: PUSH
41940: LD_INT 2
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: LD_INT 2
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 2
41981: NEG
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 2
42005: NEG
42006: PUSH
42007: LD_INT 3
42009: NEG
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: PUSH
42015: LD_INT 2
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 3
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 3
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 3
42048: PUSH
42049: LD_INT 2
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 3
42058: PUSH
42059: LD_INT 3
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 2
42068: PUSH
42069: LD_INT 3
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 2
42078: NEG
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 3
42089: NEG
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 3
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 3
42112: NEG
42113: PUSH
42114: LD_INT 2
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 3
42124: NEG
42125: PUSH
42126: LD_INT 3
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42165: LD_ADDR_VAR 0 45
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 1
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: LD_INT 2
42261: NEG
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 2
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 2
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: PUSH
42301: LD_INT 2
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 2
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: NEG
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: NEG
42332: PUSH
42333: LD_INT 1
42335: NEG
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 2
42343: NEG
42344: PUSH
42345: LD_INT 2
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 2
42355: NEG
42356: PUSH
42357: LD_INT 3
42359: NEG
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: LD_INT 3
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_INT 3
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: LD_INT 2
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 3
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 3
42411: PUSH
42412: LD_INT 3
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: LD_INT 3
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: LD_INT 3
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 3
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 3
42462: NEG
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 3
42474: NEG
42475: PUSH
42476: LD_INT 3
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42515: LD_ADDR_VAR 0 46
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: NEG
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: LD_INT 2
42611: NEG
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 2
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: LD_INT 2
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: LD_INT 3
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: LD_INT 3
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: LD_INT 2
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 2
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 3
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 3
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: LD_INT 3
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: LD_INT 3
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 2
42800: NEG
42801: PUSH
42802: LD_INT 1
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 3
42811: NEG
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 3
42822: NEG
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42863: LD_ADDR_VAR 0 47
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: LD_INT 2
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 2
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 2
42978: NEG
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 2
42990: NEG
42991: PUSH
42992: LD_INT 2
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43014: LD_ADDR_VAR 0 48
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 0
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: LD_INT 2
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 0
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 2
43139: PUSH
43140: LD_INT 1
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43161: LD_ADDR_VAR 0 49
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43305: LD_ADDR_VAR 0 50
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43449: LD_ADDR_VAR 0 51
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43596: LD_ADDR_VAR 0 52
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 1
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: LD_INT 0
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: LD_INT 2
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 2
43700: NEG
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: NEG
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 2
43723: NEG
43724: PUSH
43725: LD_INT 2
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43747: LD_ADDR_VAR 0 53
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 2
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 1
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: LD_INT 1
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: LD_INT 2
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43977: LD_ADDR_VAR 0 54
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: LD_INT 1
43997: NEG
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 2
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: LD_INT 2
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 2
44153: NEG
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44207: LD_ADDR_VAR 0 55
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: LD_INT 1
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 2
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44437: LD_ADDR_VAR 0 56
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: NEG
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44667: LD_ADDR_VAR 0 57
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 2
44843: NEG
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 2
44854: NEG
44855: PUSH
44856: LD_INT 1
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: LD_INT 2
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44897: LD_ADDR_VAR 0 58
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: LD_INT 1
44917: NEG
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 0
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: NEG
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: LD_INT 2
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: LD_INT 2
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: NEG
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 2
45096: NEG
45097: PUSH
45098: LD_INT 2
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45127: LD_ADDR_VAR 0 59
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45215: LD_ADDR_VAR 0 60
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: LD_INT 1
45288: NEG
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45303: LD_ADDR_VAR 0 61
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45391: LD_ADDR_VAR 0 62
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45479: LD_ADDR_VAR 0 63
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 1
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45567: LD_ADDR_VAR 0 64
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: ST_TO_ADDR
// end ; 1 :
45655: GO 51552
45657: LD_INT 1
45659: DOUBLE
45660: EQUAL
45661: IFTRUE 45665
45663: GO 48288
45665: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45666: LD_ADDR_VAR 0 11
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 3
45677: NEG
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 3
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: LIST
45709: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45710: LD_ADDR_VAR 0 12
45714: PUSH
45715: LD_INT 2
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 3
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 3
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45751: LD_ADDR_VAR 0 13
45755: PUSH
45756: LD_INT 3
45758: PUSH
45759: LD_INT 2
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 3
45768: PUSH
45769: LD_INT 3
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: LD_INT 3
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45791: LD_ADDR_VAR 0 14
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 3
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: LD_INT 3
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: LIST
45831: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45832: LD_ADDR_VAR 0 15
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 3
45850: NEG
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 3
45861: NEG
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: LIST
45875: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45876: LD_ADDR_VAR 0 16
45880: PUSH
45881: LD_INT 2
45883: NEG
45884: PUSH
45885: LD_INT 3
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 3
45895: NEG
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 3
45907: NEG
45908: PUSH
45909: LD_INT 3
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: LIST
45921: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45922: LD_ADDR_VAR 0 17
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: LD_INT 3
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 3
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: LIST
45965: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45966: LD_ADDR_VAR 0 18
45970: PUSH
45971: LD_INT 2
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 3
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: LIST
46006: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46007: LD_ADDR_VAR 0 19
46011: PUSH
46012: LD_INT 3
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 3
46024: PUSH
46025: LD_INT 3
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: LD_INT 3
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: LIST
46046: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46047: LD_ADDR_VAR 0 20
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 3
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 3
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: LIST
46087: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46088: LD_ADDR_VAR 0 21
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 3
46106: NEG
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: LIST
46131: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46132: LD_ADDR_VAR 0 22
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: LD_INT 3
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 3
46151: NEG
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 3
46163: NEG
46164: PUSH
46165: LD_INT 3
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: LIST
46177: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46178: LD_ADDR_VAR 0 23
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 3
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: LD_INT 4
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 3
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: LIST
46221: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46222: LD_ADDR_VAR 0 24
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 3
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 4
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46263: LD_ADDR_VAR 0 25
46267: PUSH
46268: LD_INT 3
46270: PUSH
46271: LD_INT 3
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 4
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 3
46290: PUSH
46291: LD_INT 4
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: LIST
46302: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46303: LD_ADDR_VAR 0 26
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 3
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: LD_INT 4
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: LD_INT 3
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: LIST
46343: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46344: LD_ADDR_VAR 0 27
46348: PUSH
46349: LD_INT 3
46351: NEG
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 3
46362: NEG
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 4
46373: NEG
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: LIST
46387: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46388: LD_ADDR_VAR 0 28
46392: PUSH
46393: LD_INT 3
46395: NEG
46396: PUSH
46397: LD_INT 3
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 3
46407: NEG
46408: PUSH
46409: LD_INT 4
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 4
46419: NEG
46420: PUSH
46421: LD_INT 3
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: LIST
46433: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46434: LD_ADDR_VAR 0 29
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: LD_INT 3
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: LD_INT 3
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: LD_INT 4
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 4
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: LD_INT 3
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 1
46509: NEG
46510: PUSH
46511: LD_INT 5
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 5
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 4
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: LD_INT 6
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: LD_INT 6
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: LD_INT 5
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46589: LD_ADDR_VAR 0 30
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 3
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 3
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 3
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 4
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 4
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 4
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 5
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 5
46679: PUSH
46680: LD_INT 1
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 5
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 6
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 6
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46732: LD_ADDR_VAR 0 31
46736: PUSH
46737: LD_INT 3
46739: PUSH
46740: LD_INT 2
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 3
46749: PUSH
46750: LD_INT 3
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: LD_INT 3
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 4
46769: PUSH
46770: LD_INT 3
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 4
46779: PUSH
46780: LD_INT 4
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 3
46789: PUSH
46790: LD_INT 4
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 5
46799: PUSH
46800: LD_INT 4
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 5
46809: PUSH
46810: LD_INT 5
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 4
46819: PUSH
46820: LD_INT 5
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 6
46829: PUSH
46830: LD_INT 5
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 6
46839: PUSH
46840: LD_INT 6
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 5
46849: PUSH
46850: LD_INT 6
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46871: LD_ADDR_VAR 0 32
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 3
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 3
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: LD_INT 4
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 4
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: LD_INT 3
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 5
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 5
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: LD_INT 4
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 6
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 6
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 5
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47014: LD_ADDR_VAR 0 33
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 3
47032: NEG
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 3
47043: NEG
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 3
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 4
47066: NEG
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 4
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 4
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 5
47100: NEG
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 5
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 5
47123: NEG
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 6
47134: NEG
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 6
47145: NEG
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47169: LD_ADDR_VAR 0 34
47173: PUSH
47174: LD_INT 2
47176: NEG
47177: PUSH
47178: LD_INT 3
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 3
47188: NEG
47189: PUSH
47190: LD_INT 2
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 3
47200: NEG
47201: PUSH
47202: LD_INT 3
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 3
47212: NEG
47213: PUSH
47214: LD_INT 4
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 4
47224: NEG
47225: PUSH
47226: LD_INT 3
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 4
47236: NEG
47237: PUSH
47238: LD_INT 4
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 4
47248: NEG
47249: PUSH
47250: LD_INT 5
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 5
47260: NEG
47261: PUSH
47262: LD_INT 4
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 5
47272: NEG
47273: PUSH
47274: LD_INT 5
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 5
47284: NEG
47285: PUSH
47286: LD_INT 6
47288: NEG
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 6
47296: NEG
47297: PUSH
47298: LD_INT 5
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 6
47308: NEG
47309: PUSH
47310: LD_INT 6
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47332: LD_ADDR_VAR 0 41
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: LD_INT 2
47342: NEG
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 3
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 2
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: LIST
47375: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47376: LD_ADDR_VAR 0 42
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 3
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: LIST
47416: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47417: LD_ADDR_VAR 0 43
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: PUSH
47445: LD_INT 3
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: LIST
47456: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47457: LD_ADDR_VAR 0 44
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 2
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: LD_INT 3
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: LIST
47497: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47498: LD_ADDR_VAR 0 45
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 3
47527: NEG
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: LIST
47541: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47542: LD_ADDR_VAR 0 46
47546: PUSH
47547: LD_INT 2
47549: NEG
47550: PUSH
47551: LD_INT 2
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: LD_INT 3
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 3
47573: NEG
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: LIST
47587: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47588: LD_ADDR_VAR 0 47
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: LD_INT 3
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: LD_INT 3
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47621: LD_ADDR_VAR 0 48
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 2
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 2
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47652: LD_ADDR_VAR 0 49
47656: PUSH
47657: LD_INT 3
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 3
47669: PUSH
47670: LD_INT 2
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47681: LD_ADDR_VAR 0 50
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: LD_INT 3
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 3
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47710: LD_ADDR_VAR 0 51
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47741: LD_ADDR_VAR 0 52
47745: PUSH
47746: LD_INT 3
47748: NEG
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 3
47760: NEG
47761: PUSH
47762: LD_INT 2
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47774: LD_ADDR_VAR 0 53
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 3
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 3
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: LIST
47817: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47818: LD_ADDR_VAR 0 54
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 3
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 3
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: LIST
47858: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47859: LD_ADDR_VAR 0 55
47863: PUSH
47864: LD_INT 3
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 3
47876: PUSH
47877: LD_INT 3
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: LD_INT 3
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: LIST
47898: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47899: LD_ADDR_VAR 0 56
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 3
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 3
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: LIST
47939: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47940: LD_ADDR_VAR 0 57
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 3
47958: NEG
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 3
47969: NEG
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47984: LD_ADDR_VAR 0 58
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: LD_INT 3
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 3
48003: NEG
48004: PUSH
48005: LD_INT 2
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 3
48015: NEG
48016: PUSH
48017: LD_INT 3
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: LIST
48029: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48030: LD_ADDR_VAR 0 59
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: LIST
48073: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48074: LD_ADDR_VAR 0 60
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48115: LD_ADDR_VAR 0 61
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: LIST
48154: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48155: LD_ADDR_VAR 0 62
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: LIST
48195: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48196: LD_ADDR_VAR 0 63
48200: PUSH
48201: LD_INT 1
48203: NEG
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: LIST
48239: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48240: LD_ADDR_VAR 0 64
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 2
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: LIST
48285: ST_TO_ADDR
// end ; 2 :
48286: GO 51552
48288: LD_INT 2
48290: DOUBLE
48291: EQUAL
48292: IFTRUE 48296
48294: GO 51551
48296: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48297: LD_ADDR_VAR 0 29
48301: PUSH
48302: LD_INT 4
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 4
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 5
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 5
48335: PUSH
48336: LD_INT 1
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 4
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 3
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 3
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 3
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 5
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 3
48397: PUSH
48398: LD_INT 3
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 3
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 4
48417: PUSH
48418: LD_INT 3
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 4
48427: PUSH
48428: LD_INT 4
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 3
48437: PUSH
48438: LD_INT 4
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 3
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 4
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: LD_INT 4
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 4
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: LD_INT 3
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 4
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: LD_INT 5
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: LD_INT 5
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: LD_INT 4
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 3
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 2
48559: PUSH
48560: LD_INT 5
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 2
48569: NEG
48570: PUSH
48571: LD_INT 3
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 3
48580: NEG
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 3
48591: NEG
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 3
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 4
48636: NEG
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 4
48647: NEG
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 4
48659: NEG
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: LD_INT 2
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 4
48682: NEG
48683: PUSH
48684: LD_INT 4
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 4
48694: NEG
48695: PUSH
48696: LD_INT 5
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 3
48706: NEG
48707: PUSH
48708: LD_INT 4
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 3
48718: NEG
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 4
48730: NEG
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 5
48742: NEG
48743: PUSH
48744: LD_INT 4
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 5
48754: NEG
48755: PUSH
48756: LD_INT 5
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 3
48766: NEG
48767: PUSH
48768: LD_INT 5
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 5
48778: NEG
48779: PUSH
48780: LD_INT 3
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48835: LD_ADDR_VAR 0 30
48839: PUSH
48840: LD_INT 4
48842: PUSH
48843: LD_INT 4
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 4
48852: PUSH
48853: LD_INT 3
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 5
48862: PUSH
48863: LD_INT 4
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 5
48872: PUSH
48873: LD_INT 5
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 4
48882: PUSH
48883: LD_INT 5
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 3
48892: PUSH
48893: LD_INT 4
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 3
48902: PUSH
48903: LD_INT 3
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 5
48912: PUSH
48913: LD_INT 3
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 3
48922: PUSH
48923: LD_INT 5
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 3
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 2
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: LD_INT 3
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: LD_INT 4
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 4
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: LD_INT 3
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: LD_INT 4
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 4
49025: NEG
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 4
49036: NEG
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 3
49048: NEG
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 3
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 4
49070: NEG
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 5
49081: NEG
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 5
49092: NEG
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 5
49104: NEG
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 3
49116: NEG
49117: PUSH
49118: LD_INT 2
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 3
49127: NEG
49128: PUSH
49129: LD_INT 3
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 3
49139: NEG
49140: PUSH
49141: LD_INT 4
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: NEG
49152: PUSH
49153: LD_INT 3
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 3
49175: NEG
49176: PUSH
49177: LD_INT 2
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 4
49187: NEG
49188: PUSH
49189: LD_INT 3
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 4
49199: NEG
49200: PUSH
49201: LD_INT 4
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: LD_INT 4
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 4
49223: NEG
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: LD_INT 4
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: LD_INT 5
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: LD_INT 4
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: LD_INT 3
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 3
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: LD_INT 4
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: NEG
49303: PUSH
49304: LD_INT 5
49306: NEG
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: LD_INT 3
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: LD_INT 5
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49382: LD_ADDR_VAR 0 31
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 4
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: LD_INT 3
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 4
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 5
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: LD_INT 5
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: LD_INT 4
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: PUSH
49462: LD_INT 5
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: LD_INT 3
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 3
49493: NEG
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 3
49527: NEG
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 4
49538: NEG
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 4
49549: NEG
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 4
49561: NEG
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 4
49584: NEG
49585: PUSH
49586: LD_INT 4
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 4
49596: NEG
49597: PUSH
49598: LD_INT 5
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 3
49608: NEG
49609: PUSH
49610: LD_INT 4
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 3
49620: NEG
49621: PUSH
49622: LD_INT 3
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 4
49632: NEG
49633: PUSH
49634: LD_INT 3
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 5
49644: NEG
49645: PUSH
49646: LD_INT 4
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 5
49656: NEG
49657: PUSH
49658: LD_INT 5
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 3
49668: NEG
49669: PUSH
49670: LD_INT 5
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 5
49680: NEG
49681: PUSH
49682: LD_INT 3
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 0
49692: PUSH
49693: LD_INT 3
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 4
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 3
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 2
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: LD_INT 3
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: LD_INT 4
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: LD_INT 4
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 4
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 4
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 5
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 5
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 4
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 3
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 3
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 5
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49932: LD_ADDR_VAR 0 32
49936: PUSH
49937: LD_INT 4
49939: NEG
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 4
49950: NEG
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 3
49962: NEG
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 3
49973: NEG
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 4
49984: NEG
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 5
49995: NEG
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 5
50006: NEG
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 5
50018: NEG
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 3
50030: NEG
50031: PUSH
50032: LD_INT 2
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 3
50041: NEG
50042: PUSH
50043: LD_INT 3
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 3
50053: NEG
50054: PUSH
50055: LD_INT 4
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: LD_INT 3
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 3
50089: NEG
50090: PUSH
50091: LD_INT 2
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 4
50101: NEG
50102: PUSH
50103: LD_INT 3
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 4
50113: NEG
50114: PUSH
50115: LD_INT 4
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: LD_INT 4
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 4
50137: NEG
50138: PUSH
50139: LD_INT 2
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: LD_INT 4
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 5
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 4
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: LD_INT 3
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: LD_INT 3
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: LD_INT 4
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 5
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: LD_INT 3
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: NEG
50240: PUSH
50241: LD_INT 5
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 3
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 3
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 4
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 4
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 3
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 4
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 4
50344: PUSH
50345: LD_INT 4
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 4
50354: PUSH
50355: LD_INT 3
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 5
50364: PUSH
50365: LD_INT 4
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 5
50374: PUSH
50375: LD_INT 5
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 4
50384: PUSH
50385: LD_INT 5
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 3
50394: PUSH
50395: LD_INT 4
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 3
50404: PUSH
50405: LD_INT 3
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 5
50414: PUSH
50415: LD_INT 3
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 3
50424: PUSH
50425: LD_INT 5
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50479: LD_ADDR_VAR 0 33
50483: PUSH
50484: LD_INT 4
50486: NEG
50487: PUSH
50488: LD_INT 4
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 4
50498: NEG
50499: PUSH
50500: LD_INT 5
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 3
50510: NEG
50511: PUSH
50512: LD_INT 4
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 3
50522: NEG
50523: PUSH
50524: LD_INT 3
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 4
50534: NEG
50535: PUSH
50536: LD_INT 3
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 5
50546: NEG
50547: PUSH
50548: LD_INT 4
50550: NEG
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 5
50558: NEG
50559: PUSH
50560: LD_INT 5
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 3
50570: NEG
50571: PUSH
50572: LD_INT 5
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 5
50582: NEG
50583: PUSH
50584: LD_INT 3
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 3
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: LD_INT 4
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: LD_INT 3
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 4
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: LD_INT 2
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: LD_INT 4
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 4
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 4
50706: PUSH
50707: LD_INT 1
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 5
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 5
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 4
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 3
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 5
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 3
50789: PUSH
50790: LD_INT 3
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 3
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 4
50809: PUSH
50810: LD_INT 3
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 4
50819: PUSH
50820: LD_INT 4
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 3
50829: PUSH
50830: LD_INT 4
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: LD_INT 3
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 4
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: LD_INT 4
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: LD_INT 4
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: LD_INT 3
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: LD_INT 4
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: PUSH
50910: LD_INT 5
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: LD_INT 5
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 4
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: LD_INT 3
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: LD_INT 5
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: LD_INT 3
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51017: LD_ADDR_VAR 0 34
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 4
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 5
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 4
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: LD_INT 3
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: LD_INT 3
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: LD_INT 4
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: LD_INT 5
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: LD_INT 3
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: LD_INT 5
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 3
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 4
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 4
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 3
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: LD_INT 2
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 4
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 4
51219: PUSH
51220: LD_INT 4
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 4
51229: PUSH
51230: LD_INT 3
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 5
51239: PUSH
51240: LD_INT 4
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 5
51249: PUSH
51250: LD_INT 5
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 4
51259: PUSH
51260: LD_INT 5
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 3
51269: PUSH
51270: LD_INT 4
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 3
51279: PUSH
51280: LD_INT 3
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 5
51289: PUSH
51290: LD_INT 3
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 3
51299: PUSH
51300: LD_INT 5
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 3
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 4
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 4
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: LD_INT 3
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: LD_INT 4
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 4
51402: NEG
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 4
51413: NEG
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 3
51425: NEG
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 3
51436: NEG
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 4
51447: NEG
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 5
51458: NEG
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 5
51469: NEG
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 5
51481: NEG
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 3
51493: NEG
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: ST_TO_ADDR
// end ; end ;
51549: GO 51552
51551: POP
// case btype of b_depot , b_warehouse :
51552: LD_VAR 0 1
51556: PUSH
51557: LD_INT 0
51559: DOUBLE
51560: EQUAL
51561: IFTRUE 51571
51563: LD_INT 1
51565: DOUBLE
51566: EQUAL
51567: IFTRUE 51571
51569: GO 51772
51571: POP
// case nation of nation_american :
51572: LD_VAR 0 5
51576: PUSH
51577: LD_INT 1
51579: DOUBLE
51580: EQUAL
51581: IFTRUE 51585
51583: GO 51641
51585: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51586: LD_ADDR_VAR 0 9
51590: PUSH
51591: LD_VAR 0 11
51595: PUSH
51596: LD_VAR 0 12
51600: PUSH
51601: LD_VAR 0 13
51605: PUSH
51606: LD_VAR 0 14
51610: PUSH
51611: LD_VAR 0 15
51615: PUSH
51616: LD_VAR 0 16
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: PUSH
51629: LD_VAR 0 4
51633: PUSH
51634: LD_INT 1
51636: PLUS
51637: ARRAY
51638: ST_TO_ADDR
51639: GO 51770
51641: LD_INT 2
51643: DOUBLE
51644: EQUAL
51645: IFTRUE 51649
51647: GO 51705
51649: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51650: LD_ADDR_VAR 0 9
51654: PUSH
51655: LD_VAR 0 17
51659: PUSH
51660: LD_VAR 0 18
51664: PUSH
51665: LD_VAR 0 19
51669: PUSH
51670: LD_VAR 0 20
51674: PUSH
51675: LD_VAR 0 21
51679: PUSH
51680: LD_VAR 0 22
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: PUSH
51693: LD_VAR 0 4
51697: PUSH
51698: LD_INT 1
51700: PLUS
51701: ARRAY
51702: ST_TO_ADDR
51703: GO 51770
51705: LD_INT 3
51707: DOUBLE
51708: EQUAL
51709: IFTRUE 51713
51711: GO 51769
51713: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51714: LD_ADDR_VAR 0 9
51718: PUSH
51719: LD_VAR 0 23
51723: PUSH
51724: LD_VAR 0 24
51728: PUSH
51729: LD_VAR 0 25
51733: PUSH
51734: LD_VAR 0 26
51738: PUSH
51739: LD_VAR 0 27
51743: PUSH
51744: LD_VAR 0 28
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: PUSH
51757: LD_VAR 0 4
51761: PUSH
51762: LD_INT 1
51764: PLUS
51765: ARRAY
51766: ST_TO_ADDR
51767: GO 51770
51769: POP
51770: GO 52325
51772: LD_INT 2
51774: DOUBLE
51775: EQUAL
51776: IFTRUE 51786
51778: LD_INT 3
51780: DOUBLE
51781: EQUAL
51782: IFTRUE 51786
51784: GO 51842
51786: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51787: LD_ADDR_VAR 0 9
51791: PUSH
51792: LD_VAR 0 29
51796: PUSH
51797: LD_VAR 0 30
51801: PUSH
51802: LD_VAR 0 31
51806: PUSH
51807: LD_VAR 0 32
51811: PUSH
51812: LD_VAR 0 33
51816: PUSH
51817: LD_VAR 0 34
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: PUSH
51830: LD_VAR 0 4
51834: PUSH
51835: LD_INT 1
51837: PLUS
51838: ARRAY
51839: ST_TO_ADDR
51840: GO 52325
51842: LD_INT 16
51844: DOUBLE
51845: EQUAL
51846: IFTRUE 51904
51848: LD_INT 17
51850: DOUBLE
51851: EQUAL
51852: IFTRUE 51904
51854: LD_INT 18
51856: DOUBLE
51857: EQUAL
51858: IFTRUE 51904
51860: LD_INT 19
51862: DOUBLE
51863: EQUAL
51864: IFTRUE 51904
51866: LD_INT 22
51868: DOUBLE
51869: EQUAL
51870: IFTRUE 51904
51872: LD_INT 20
51874: DOUBLE
51875: EQUAL
51876: IFTRUE 51904
51878: LD_INT 21
51880: DOUBLE
51881: EQUAL
51882: IFTRUE 51904
51884: LD_INT 23
51886: DOUBLE
51887: EQUAL
51888: IFTRUE 51904
51890: LD_INT 24
51892: DOUBLE
51893: EQUAL
51894: IFTRUE 51904
51896: LD_INT 25
51898: DOUBLE
51899: EQUAL
51900: IFTRUE 51904
51902: GO 51960
51904: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51905: LD_ADDR_VAR 0 9
51909: PUSH
51910: LD_VAR 0 35
51914: PUSH
51915: LD_VAR 0 36
51919: PUSH
51920: LD_VAR 0 37
51924: PUSH
51925: LD_VAR 0 38
51929: PUSH
51930: LD_VAR 0 39
51934: PUSH
51935: LD_VAR 0 40
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: PUSH
51948: LD_VAR 0 4
51952: PUSH
51953: LD_INT 1
51955: PLUS
51956: ARRAY
51957: ST_TO_ADDR
51958: GO 52325
51960: LD_INT 6
51962: DOUBLE
51963: EQUAL
51964: IFTRUE 52016
51966: LD_INT 7
51968: DOUBLE
51969: EQUAL
51970: IFTRUE 52016
51972: LD_INT 8
51974: DOUBLE
51975: EQUAL
51976: IFTRUE 52016
51978: LD_INT 13
51980: DOUBLE
51981: EQUAL
51982: IFTRUE 52016
51984: LD_INT 12
51986: DOUBLE
51987: EQUAL
51988: IFTRUE 52016
51990: LD_INT 15
51992: DOUBLE
51993: EQUAL
51994: IFTRUE 52016
51996: LD_INT 11
51998: DOUBLE
51999: EQUAL
52000: IFTRUE 52016
52002: LD_INT 14
52004: DOUBLE
52005: EQUAL
52006: IFTRUE 52016
52008: LD_INT 10
52010: DOUBLE
52011: EQUAL
52012: IFTRUE 52016
52014: GO 52072
52016: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52017: LD_ADDR_VAR 0 9
52021: PUSH
52022: LD_VAR 0 41
52026: PUSH
52027: LD_VAR 0 42
52031: PUSH
52032: LD_VAR 0 43
52036: PUSH
52037: LD_VAR 0 44
52041: PUSH
52042: LD_VAR 0 45
52046: PUSH
52047: LD_VAR 0 46
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: PUSH
52060: LD_VAR 0 4
52064: PUSH
52065: LD_INT 1
52067: PLUS
52068: ARRAY
52069: ST_TO_ADDR
52070: GO 52325
52072: LD_INT 36
52074: DOUBLE
52075: EQUAL
52076: IFTRUE 52080
52078: GO 52136
52080: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52081: LD_ADDR_VAR 0 9
52085: PUSH
52086: LD_VAR 0 47
52090: PUSH
52091: LD_VAR 0 48
52095: PUSH
52096: LD_VAR 0 49
52100: PUSH
52101: LD_VAR 0 50
52105: PUSH
52106: LD_VAR 0 51
52110: PUSH
52111: LD_VAR 0 52
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: PUSH
52124: LD_VAR 0 4
52128: PUSH
52129: LD_INT 1
52131: PLUS
52132: ARRAY
52133: ST_TO_ADDR
52134: GO 52325
52136: LD_INT 4
52138: DOUBLE
52139: EQUAL
52140: IFTRUE 52162
52142: LD_INT 5
52144: DOUBLE
52145: EQUAL
52146: IFTRUE 52162
52148: LD_INT 34
52150: DOUBLE
52151: EQUAL
52152: IFTRUE 52162
52154: LD_INT 37
52156: DOUBLE
52157: EQUAL
52158: IFTRUE 52162
52160: GO 52218
52162: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52163: LD_ADDR_VAR 0 9
52167: PUSH
52168: LD_VAR 0 53
52172: PUSH
52173: LD_VAR 0 54
52177: PUSH
52178: LD_VAR 0 55
52182: PUSH
52183: LD_VAR 0 56
52187: PUSH
52188: LD_VAR 0 57
52192: PUSH
52193: LD_VAR 0 58
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: PUSH
52206: LD_VAR 0 4
52210: PUSH
52211: LD_INT 1
52213: PLUS
52214: ARRAY
52215: ST_TO_ADDR
52216: GO 52325
52218: LD_INT 31
52220: DOUBLE
52221: EQUAL
52222: IFTRUE 52268
52224: LD_INT 32
52226: DOUBLE
52227: EQUAL
52228: IFTRUE 52268
52230: LD_INT 33
52232: DOUBLE
52233: EQUAL
52234: IFTRUE 52268
52236: LD_INT 27
52238: DOUBLE
52239: EQUAL
52240: IFTRUE 52268
52242: LD_INT 26
52244: DOUBLE
52245: EQUAL
52246: IFTRUE 52268
52248: LD_INT 28
52250: DOUBLE
52251: EQUAL
52252: IFTRUE 52268
52254: LD_INT 29
52256: DOUBLE
52257: EQUAL
52258: IFTRUE 52268
52260: LD_INT 30
52262: DOUBLE
52263: EQUAL
52264: IFTRUE 52268
52266: GO 52324
52268: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52269: LD_ADDR_VAR 0 9
52273: PUSH
52274: LD_VAR 0 59
52278: PUSH
52279: LD_VAR 0 60
52283: PUSH
52284: LD_VAR 0 61
52288: PUSH
52289: LD_VAR 0 62
52293: PUSH
52294: LD_VAR 0 63
52298: PUSH
52299: LD_VAR 0 64
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: PUSH
52312: LD_VAR 0 4
52316: PUSH
52317: LD_INT 1
52319: PLUS
52320: ARRAY
52321: ST_TO_ADDR
52322: GO 52325
52324: POP
// temp_list2 = [ ] ;
52325: LD_ADDR_VAR 0 10
52329: PUSH
52330: EMPTY
52331: ST_TO_ADDR
// for i in temp_list do
52332: LD_ADDR_VAR 0 8
52336: PUSH
52337: LD_VAR 0 9
52341: PUSH
52342: FOR_IN
52343: IFFALSE 52395
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52345: LD_ADDR_VAR 0 10
52349: PUSH
52350: LD_VAR 0 10
52354: PUSH
52355: LD_VAR 0 8
52359: PUSH
52360: LD_INT 1
52362: ARRAY
52363: PUSH
52364: LD_VAR 0 2
52368: PLUS
52369: PUSH
52370: LD_VAR 0 8
52374: PUSH
52375: LD_INT 2
52377: ARRAY
52378: PUSH
52379: LD_VAR 0 3
52383: PLUS
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: EMPTY
52390: LIST
52391: ADD
52392: ST_TO_ADDR
52393: GO 52342
52395: POP
52396: POP
// result = temp_list2 ;
52397: LD_ADDR_VAR 0 7
52401: PUSH
52402: LD_VAR 0 10
52406: ST_TO_ADDR
// end ;
52407: LD_VAR 0 7
52411: RET
// export function EnemyInRange ( unit , dist ) ; begin
52412: LD_INT 0
52414: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52415: LD_ADDR_VAR 0 3
52419: PUSH
52420: LD_VAR 0 1
52424: PPUSH
52425: CALL_OW 255
52429: PPUSH
52430: LD_VAR 0 1
52434: PPUSH
52435: CALL_OW 250
52439: PPUSH
52440: LD_VAR 0 1
52444: PPUSH
52445: CALL_OW 251
52449: PPUSH
52450: LD_VAR 0 2
52454: PPUSH
52455: CALL 26516 0 4
52459: PUSH
52460: LD_INT 4
52462: ARRAY
52463: ST_TO_ADDR
// end ;
52464: LD_VAR 0 3
52468: RET
// export function PlayerSeeMe ( unit ) ; begin
52469: LD_INT 0
52471: PPUSH
// result := See ( your_side , unit ) ;
52472: LD_ADDR_VAR 0 2
52476: PUSH
52477: LD_OWVAR 2
52481: PPUSH
52482: LD_VAR 0 1
52486: PPUSH
52487: CALL_OW 292
52491: ST_TO_ADDR
// end ;
52492: LD_VAR 0 2
52496: RET
// export function ReverseDir ( unit ) ; begin
52497: LD_INT 0
52499: PPUSH
// if not unit then
52500: LD_VAR 0 1
52504: NOT
52505: IFFALSE 52509
// exit ;
52507: GO 52532
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52509: LD_ADDR_VAR 0 2
52513: PUSH
52514: LD_VAR 0 1
52518: PPUSH
52519: CALL_OW 254
52523: PUSH
52524: LD_INT 3
52526: PLUS
52527: PUSH
52528: LD_INT 6
52530: MOD
52531: ST_TO_ADDR
// end ;
52532: LD_VAR 0 2
52536: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52537: LD_INT 0
52539: PPUSH
52540: PPUSH
52541: PPUSH
52542: PPUSH
52543: PPUSH
// if not hexes then
52544: LD_VAR 0 2
52548: NOT
52549: IFFALSE 52553
// exit ;
52551: GO 52701
// dist := 9999 ;
52553: LD_ADDR_VAR 0 5
52557: PUSH
52558: LD_INT 9999
52560: ST_TO_ADDR
// for i = 1 to hexes do
52561: LD_ADDR_VAR 0 4
52565: PUSH
52566: DOUBLE
52567: LD_INT 1
52569: DEC
52570: ST_TO_ADDR
52571: LD_VAR 0 2
52575: PUSH
52576: FOR_TO
52577: IFFALSE 52689
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52579: LD_VAR 0 1
52583: PPUSH
52584: LD_VAR 0 2
52588: PUSH
52589: LD_VAR 0 4
52593: ARRAY
52594: PUSH
52595: LD_INT 1
52597: ARRAY
52598: PPUSH
52599: LD_VAR 0 2
52603: PUSH
52604: LD_VAR 0 4
52608: ARRAY
52609: PUSH
52610: LD_INT 2
52612: ARRAY
52613: PPUSH
52614: CALL_OW 297
52618: PUSH
52619: LD_VAR 0 5
52623: LESS
52624: IFFALSE 52687
// begin hex := hexes [ i ] ;
52626: LD_ADDR_VAR 0 7
52630: PUSH
52631: LD_VAR 0 2
52635: PUSH
52636: LD_VAR 0 4
52640: ARRAY
52641: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52642: LD_ADDR_VAR 0 5
52646: PUSH
52647: LD_VAR 0 1
52651: PPUSH
52652: LD_VAR 0 2
52656: PUSH
52657: LD_VAR 0 4
52661: ARRAY
52662: PUSH
52663: LD_INT 1
52665: ARRAY
52666: PPUSH
52667: LD_VAR 0 2
52671: PUSH
52672: LD_VAR 0 4
52676: ARRAY
52677: PUSH
52678: LD_INT 2
52680: ARRAY
52681: PPUSH
52682: CALL_OW 297
52686: ST_TO_ADDR
// end ; end ;
52687: GO 52576
52689: POP
52690: POP
// result := hex ;
52691: LD_ADDR_VAR 0 3
52695: PUSH
52696: LD_VAR 0 7
52700: ST_TO_ADDR
// end ;
52701: LD_VAR 0 3
52705: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52706: LD_INT 0
52708: PPUSH
52709: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52710: LD_VAR 0 1
52714: NOT
52715: PUSH
52716: LD_VAR 0 1
52720: PUSH
52721: LD_INT 21
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 23
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PPUSH
52745: CALL_OW 69
52749: IN
52750: NOT
52751: OR
52752: IFFALSE 52756
// exit ;
52754: GO 52803
// for i = 1 to 3 do
52756: LD_ADDR_VAR 0 3
52760: PUSH
52761: DOUBLE
52762: LD_INT 1
52764: DEC
52765: ST_TO_ADDR
52766: LD_INT 3
52768: PUSH
52769: FOR_TO
52770: IFFALSE 52801
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52772: LD_VAR 0 1
52776: PPUSH
52777: CALL_OW 250
52781: PPUSH
52782: LD_VAR 0 1
52786: PPUSH
52787: CALL_OW 251
52791: PPUSH
52792: LD_INT 1
52794: PPUSH
52795: CALL_OW 453
52799: GO 52769
52801: POP
52802: POP
// end ;
52803: LD_VAR 0 2
52807: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52808: LD_INT 0
52810: PPUSH
52811: PPUSH
52812: PPUSH
52813: PPUSH
52814: PPUSH
52815: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52816: LD_VAR 0 1
52820: NOT
52821: PUSH
52822: LD_VAR 0 2
52826: NOT
52827: OR
52828: PUSH
52829: LD_VAR 0 1
52833: PPUSH
52834: CALL_OW 314
52838: OR
52839: IFFALSE 52843
// exit ;
52841: GO 53284
// x := GetX ( enemy_unit ) ;
52843: LD_ADDR_VAR 0 7
52847: PUSH
52848: LD_VAR 0 2
52852: PPUSH
52853: CALL_OW 250
52857: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52858: LD_ADDR_VAR 0 8
52862: PUSH
52863: LD_VAR 0 2
52867: PPUSH
52868: CALL_OW 251
52872: ST_TO_ADDR
// if not x or not y then
52873: LD_VAR 0 7
52877: NOT
52878: PUSH
52879: LD_VAR 0 8
52883: NOT
52884: OR
52885: IFFALSE 52889
// exit ;
52887: GO 53284
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52889: LD_ADDR_VAR 0 6
52893: PUSH
52894: LD_VAR 0 7
52898: PPUSH
52899: LD_INT 0
52901: PPUSH
52902: LD_INT 4
52904: PPUSH
52905: CALL_OW 272
52909: PUSH
52910: LD_VAR 0 8
52914: PPUSH
52915: LD_INT 0
52917: PPUSH
52918: LD_INT 4
52920: PPUSH
52921: CALL_OW 273
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_VAR 0 7
52934: PPUSH
52935: LD_INT 1
52937: PPUSH
52938: LD_INT 4
52940: PPUSH
52941: CALL_OW 272
52945: PUSH
52946: LD_VAR 0 8
52950: PPUSH
52951: LD_INT 1
52953: PPUSH
52954: LD_INT 4
52956: PPUSH
52957: CALL_OW 273
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_VAR 0 7
52970: PPUSH
52971: LD_INT 2
52973: PPUSH
52974: LD_INT 4
52976: PPUSH
52977: CALL_OW 272
52981: PUSH
52982: LD_VAR 0 8
52986: PPUSH
52987: LD_INT 2
52989: PPUSH
52990: LD_INT 4
52992: PPUSH
52993: CALL_OW 273
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_VAR 0 7
53006: PPUSH
53007: LD_INT 3
53009: PPUSH
53010: LD_INT 4
53012: PPUSH
53013: CALL_OW 272
53017: PUSH
53018: LD_VAR 0 8
53022: PPUSH
53023: LD_INT 3
53025: PPUSH
53026: LD_INT 4
53028: PPUSH
53029: CALL_OW 273
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_VAR 0 7
53042: PPUSH
53043: LD_INT 4
53045: PPUSH
53046: LD_INT 4
53048: PPUSH
53049: CALL_OW 272
53053: PUSH
53054: LD_VAR 0 8
53058: PPUSH
53059: LD_INT 4
53061: PPUSH
53062: LD_INT 4
53064: PPUSH
53065: CALL_OW 273
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_VAR 0 7
53078: PPUSH
53079: LD_INT 5
53081: PPUSH
53082: LD_INT 4
53084: PPUSH
53085: CALL_OW 272
53089: PUSH
53090: LD_VAR 0 8
53094: PPUSH
53095: LD_INT 5
53097: PPUSH
53098: LD_INT 4
53100: PPUSH
53101: CALL_OW 273
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: ST_TO_ADDR
// for i = tmp downto 1 do
53118: LD_ADDR_VAR 0 4
53122: PUSH
53123: DOUBLE
53124: LD_VAR 0 6
53128: INC
53129: ST_TO_ADDR
53130: LD_INT 1
53132: PUSH
53133: FOR_DOWNTO
53134: IFFALSE 53235
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53136: LD_VAR 0 6
53140: PUSH
53141: LD_VAR 0 4
53145: ARRAY
53146: PUSH
53147: LD_INT 1
53149: ARRAY
53150: PPUSH
53151: LD_VAR 0 6
53155: PUSH
53156: LD_VAR 0 4
53160: ARRAY
53161: PUSH
53162: LD_INT 2
53164: ARRAY
53165: PPUSH
53166: CALL_OW 488
53170: NOT
53171: PUSH
53172: LD_VAR 0 6
53176: PUSH
53177: LD_VAR 0 4
53181: ARRAY
53182: PUSH
53183: LD_INT 1
53185: ARRAY
53186: PPUSH
53187: LD_VAR 0 6
53191: PUSH
53192: LD_VAR 0 4
53196: ARRAY
53197: PUSH
53198: LD_INT 2
53200: ARRAY
53201: PPUSH
53202: CALL_OW 428
53206: PUSH
53207: LD_INT 0
53209: NONEQUAL
53210: OR
53211: IFFALSE 53233
// tmp := Delete ( tmp , i ) ;
53213: LD_ADDR_VAR 0 6
53217: PUSH
53218: LD_VAR 0 6
53222: PPUSH
53223: LD_VAR 0 4
53227: PPUSH
53228: CALL_OW 3
53232: ST_TO_ADDR
53233: GO 53133
53235: POP
53236: POP
// j := GetClosestHex ( unit , tmp ) ;
53237: LD_ADDR_VAR 0 5
53241: PUSH
53242: LD_VAR 0 1
53246: PPUSH
53247: LD_VAR 0 6
53251: PPUSH
53252: CALL 52537 0 2
53256: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53257: LD_VAR 0 1
53261: PPUSH
53262: LD_VAR 0 5
53266: PUSH
53267: LD_INT 1
53269: ARRAY
53270: PPUSH
53271: LD_VAR 0 5
53275: PUSH
53276: LD_INT 2
53278: ARRAY
53279: PPUSH
53280: CALL_OW 111
// end ;
53284: LD_VAR 0 3
53288: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53289: LD_INT 0
53291: PPUSH
53292: PPUSH
53293: PPUSH
// uc_side = 0 ;
53294: LD_ADDR_OWVAR 20
53298: PUSH
53299: LD_INT 0
53301: ST_TO_ADDR
// uc_nation = 0 ;
53302: LD_ADDR_OWVAR 21
53306: PUSH
53307: LD_INT 0
53309: ST_TO_ADDR
// InitHc_All ( ) ;
53310: CALL_OW 584
// InitVc ;
53314: CALL_OW 20
// if mastodonts then
53318: LD_VAR 0 6
53322: IFFALSE 53389
// for i = 1 to mastodonts do
53324: LD_ADDR_VAR 0 11
53328: PUSH
53329: DOUBLE
53330: LD_INT 1
53332: DEC
53333: ST_TO_ADDR
53334: LD_VAR 0 6
53338: PUSH
53339: FOR_TO
53340: IFFALSE 53387
// begin vc_chassis := 31 ;
53342: LD_ADDR_OWVAR 37
53346: PUSH
53347: LD_INT 31
53349: ST_TO_ADDR
// vc_control := control_rider ;
53350: LD_ADDR_OWVAR 38
53354: PUSH
53355: LD_INT 4
53357: ST_TO_ADDR
// animal := CreateVehicle ;
53358: LD_ADDR_VAR 0 12
53362: PUSH
53363: CALL_OW 45
53367: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53368: LD_VAR 0 12
53372: PPUSH
53373: LD_VAR 0 8
53377: PPUSH
53378: LD_INT 0
53380: PPUSH
53381: CALL 55577 0 3
// end ;
53385: GO 53339
53387: POP
53388: POP
// if horses then
53389: LD_VAR 0 5
53393: IFFALSE 53460
// for i = 1 to horses do
53395: LD_ADDR_VAR 0 11
53399: PUSH
53400: DOUBLE
53401: LD_INT 1
53403: DEC
53404: ST_TO_ADDR
53405: LD_VAR 0 5
53409: PUSH
53410: FOR_TO
53411: IFFALSE 53458
// begin hc_class := 21 ;
53413: LD_ADDR_OWVAR 28
53417: PUSH
53418: LD_INT 21
53420: ST_TO_ADDR
// hc_gallery :=  ;
53421: LD_ADDR_OWVAR 33
53425: PUSH
53426: LD_STRING 
53428: ST_TO_ADDR
// animal := CreateHuman ;
53429: LD_ADDR_VAR 0 12
53433: PUSH
53434: CALL_OW 44
53438: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53439: LD_VAR 0 12
53443: PPUSH
53444: LD_VAR 0 8
53448: PPUSH
53449: LD_INT 0
53451: PPUSH
53452: CALL 55577 0 3
// end ;
53456: GO 53410
53458: POP
53459: POP
// if birds then
53460: LD_VAR 0 1
53464: IFFALSE 53531
// for i = 1 to birds do
53466: LD_ADDR_VAR 0 11
53470: PUSH
53471: DOUBLE
53472: LD_INT 1
53474: DEC
53475: ST_TO_ADDR
53476: LD_VAR 0 1
53480: PUSH
53481: FOR_TO
53482: IFFALSE 53529
// begin hc_class = 18 ;
53484: LD_ADDR_OWVAR 28
53488: PUSH
53489: LD_INT 18
53491: ST_TO_ADDR
// hc_gallery =  ;
53492: LD_ADDR_OWVAR 33
53496: PUSH
53497: LD_STRING 
53499: ST_TO_ADDR
// animal := CreateHuman ;
53500: LD_ADDR_VAR 0 12
53504: PUSH
53505: CALL_OW 44
53509: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53510: LD_VAR 0 12
53514: PPUSH
53515: LD_VAR 0 8
53519: PPUSH
53520: LD_INT 0
53522: PPUSH
53523: CALL 55577 0 3
// end ;
53527: GO 53481
53529: POP
53530: POP
// if tigers then
53531: LD_VAR 0 2
53535: IFFALSE 53619
// for i = 1 to tigers do
53537: LD_ADDR_VAR 0 11
53541: PUSH
53542: DOUBLE
53543: LD_INT 1
53545: DEC
53546: ST_TO_ADDR
53547: LD_VAR 0 2
53551: PUSH
53552: FOR_TO
53553: IFFALSE 53617
// begin hc_class = class_tiger ;
53555: LD_ADDR_OWVAR 28
53559: PUSH
53560: LD_INT 14
53562: ST_TO_ADDR
// hc_gallery =  ;
53563: LD_ADDR_OWVAR 33
53567: PUSH
53568: LD_STRING 
53570: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53571: LD_ADDR_OWVAR 35
53575: PUSH
53576: LD_INT 7
53578: NEG
53579: PPUSH
53580: LD_INT 7
53582: PPUSH
53583: CALL_OW 12
53587: ST_TO_ADDR
// animal := CreateHuman ;
53588: LD_ADDR_VAR 0 12
53592: PUSH
53593: CALL_OW 44
53597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53598: LD_VAR 0 12
53602: PPUSH
53603: LD_VAR 0 8
53607: PPUSH
53608: LD_INT 0
53610: PPUSH
53611: CALL 55577 0 3
// end ;
53615: GO 53552
53617: POP
53618: POP
// if apemans then
53619: LD_VAR 0 3
53623: IFFALSE 53746
// for i = 1 to apemans do
53625: LD_ADDR_VAR 0 11
53629: PUSH
53630: DOUBLE
53631: LD_INT 1
53633: DEC
53634: ST_TO_ADDR
53635: LD_VAR 0 3
53639: PUSH
53640: FOR_TO
53641: IFFALSE 53744
// begin hc_class = class_apeman ;
53643: LD_ADDR_OWVAR 28
53647: PUSH
53648: LD_INT 12
53650: ST_TO_ADDR
// hc_gallery =  ;
53651: LD_ADDR_OWVAR 33
53655: PUSH
53656: LD_STRING 
53658: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53659: LD_ADDR_OWVAR 35
53663: PUSH
53664: LD_INT 5
53666: NEG
53667: PPUSH
53668: LD_INT 5
53670: PPUSH
53671: CALL_OW 12
53675: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53676: LD_ADDR_OWVAR 31
53680: PUSH
53681: LD_INT 1
53683: PPUSH
53684: LD_INT 3
53686: PPUSH
53687: CALL_OW 12
53691: PUSH
53692: LD_INT 1
53694: PPUSH
53695: LD_INT 3
53697: PPUSH
53698: CALL_OW 12
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: ST_TO_ADDR
// animal := CreateHuman ;
53715: LD_ADDR_VAR 0 12
53719: PUSH
53720: CALL_OW 44
53724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53725: LD_VAR 0 12
53729: PPUSH
53730: LD_VAR 0 8
53734: PPUSH
53735: LD_INT 0
53737: PPUSH
53738: CALL 55577 0 3
// end ;
53742: GO 53640
53744: POP
53745: POP
// if enchidnas then
53746: LD_VAR 0 4
53750: IFFALSE 53817
// for i = 1 to enchidnas do
53752: LD_ADDR_VAR 0 11
53756: PUSH
53757: DOUBLE
53758: LD_INT 1
53760: DEC
53761: ST_TO_ADDR
53762: LD_VAR 0 4
53766: PUSH
53767: FOR_TO
53768: IFFALSE 53815
// begin hc_class = 13 ;
53770: LD_ADDR_OWVAR 28
53774: PUSH
53775: LD_INT 13
53777: ST_TO_ADDR
// hc_gallery =  ;
53778: LD_ADDR_OWVAR 33
53782: PUSH
53783: LD_STRING 
53785: ST_TO_ADDR
// animal := CreateHuman ;
53786: LD_ADDR_VAR 0 12
53790: PUSH
53791: CALL_OW 44
53795: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53796: LD_VAR 0 12
53800: PPUSH
53801: LD_VAR 0 8
53805: PPUSH
53806: LD_INT 0
53808: PPUSH
53809: CALL 55577 0 3
// end ;
53813: GO 53767
53815: POP
53816: POP
// if fishes then
53817: LD_VAR 0 7
53821: IFFALSE 53888
// for i = 1 to fishes do
53823: LD_ADDR_VAR 0 11
53827: PUSH
53828: DOUBLE
53829: LD_INT 1
53831: DEC
53832: ST_TO_ADDR
53833: LD_VAR 0 7
53837: PUSH
53838: FOR_TO
53839: IFFALSE 53886
// begin hc_class = 20 ;
53841: LD_ADDR_OWVAR 28
53845: PUSH
53846: LD_INT 20
53848: ST_TO_ADDR
// hc_gallery =  ;
53849: LD_ADDR_OWVAR 33
53853: PUSH
53854: LD_STRING 
53856: ST_TO_ADDR
// animal := CreateHuman ;
53857: LD_ADDR_VAR 0 12
53861: PUSH
53862: CALL_OW 44
53866: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53867: LD_VAR 0 12
53871: PPUSH
53872: LD_VAR 0 9
53876: PPUSH
53877: LD_INT 0
53879: PPUSH
53880: CALL 55577 0 3
// end ;
53884: GO 53838
53886: POP
53887: POP
// end ;
53888: LD_VAR 0 10
53892: RET
// export function WantHeal ( sci , unit ) ; begin
53893: LD_INT 0
53895: PPUSH
// if GetTaskList ( sci ) > 0 then
53896: LD_VAR 0 1
53900: PPUSH
53901: CALL_OW 437
53905: PUSH
53906: LD_INT 0
53908: GREATER
53909: IFFALSE 53979
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53911: LD_VAR 0 1
53915: PPUSH
53916: CALL_OW 437
53920: PUSH
53921: LD_INT 1
53923: ARRAY
53924: PUSH
53925: LD_INT 1
53927: ARRAY
53928: PUSH
53929: LD_STRING l
53931: EQUAL
53932: PUSH
53933: LD_VAR 0 1
53937: PPUSH
53938: CALL_OW 437
53942: PUSH
53943: LD_INT 1
53945: ARRAY
53946: PUSH
53947: LD_INT 4
53949: ARRAY
53950: PUSH
53951: LD_VAR 0 2
53955: EQUAL
53956: AND
53957: IFFALSE 53969
// result := true else
53959: LD_ADDR_VAR 0 3
53963: PUSH
53964: LD_INT 1
53966: ST_TO_ADDR
53967: GO 53977
// result := false ;
53969: LD_ADDR_VAR 0 3
53973: PUSH
53974: LD_INT 0
53976: ST_TO_ADDR
// end else
53977: GO 53987
// result := false ;
53979: LD_ADDR_VAR 0 3
53983: PUSH
53984: LD_INT 0
53986: ST_TO_ADDR
// end ;
53987: LD_VAR 0 3
53991: RET
// export function HealTarget ( sci ) ; begin
53992: LD_INT 0
53994: PPUSH
// if not sci then
53995: LD_VAR 0 1
53999: NOT
54000: IFFALSE 54004
// exit ;
54002: GO 54069
// result := 0 ;
54004: LD_ADDR_VAR 0 2
54008: PUSH
54009: LD_INT 0
54011: ST_TO_ADDR
// if GetTaskList ( sci ) then
54012: LD_VAR 0 1
54016: PPUSH
54017: CALL_OW 437
54021: IFFALSE 54069
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54023: LD_VAR 0 1
54027: PPUSH
54028: CALL_OW 437
54032: PUSH
54033: LD_INT 1
54035: ARRAY
54036: PUSH
54037: LD_INT 1
54039: ARRAY
54040: PUSH
54041: LD_STRING l
54043: EQUAL
54044: IFFALSE 54069
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54046: LD_ADDR_VAR 0 2
54050: PUSH
54051: LD_VAR 0 1
54055: PPUSH
54056: CALL_OW 437
54060: PUSH
54061: LD_INT 1
54063: ARRAY
54064: PUSH
54065: LD_INT 4
54067: ARRAY
54068: ST_TO_ADDR
// end ;
54069: LD_VAR 0 2
54073: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54074: LD_INT 0
54076: PPUSH
54077: PPUSH
54078: PPUSH
54079: PPUSH
// if not base_units then
54080: LD_VAR 0 1
54084: NOT
54085: IFFALSE 54089
// exit ;
54087: GO 54176
// result := false ;
54089: LD_ADDR_VAR 0 2
54093: PUSH
54094: LD_INT 0
54096: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54097: LD_ADDR_VAR 0 5
54101: PUSH
54102: LD_VAR 0 1
54106: PPUSH
54107: LD_INT 21
54109: PUSH
54110: LD_INT 3
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PPUSH
54117: CALL_OW 72
54121: ST_TO_ADDR
// if not tmp then
54122: LD_VAR 0 5
54126: NOT
54127: IFFALSE 54131
// exit ;
54129: GO 54176
// for i in tmp do
54131: LD_ADDR_VAR 0 3
54135: PUSH
54136: LD_VAR 0 5
54140: PUSH
54141: FOR_IN
54142: IFFALSE 54174
// begin result := EnemyInRange ( i , 22 ) ;
54144: LD_ADDR_VAR 0 2
54148: PUSH
54149: LD_VAR 0 3
54153: PPUSH
54154: LD_INT 22
54156: PPUSH
54157: CALL 52412 0 2
54161: ST_TO_ADDR
// if result then
54162: LD_VAR 0 2
54166: IFFALSE 54172
// exit ;
54168: POP
54169: POP
54170: GO 54176
// end ;
54172: GO 54141
54174: POP
54175: POP
// end ;
54176: LD_VAR 0 2
54180: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54181: LD_INT 0
54183: PPUSH
54184: PPUSH
// if not units then
54185: LD_VAR 0 1
54189: NOT
54190: IFFALSE 54194
// exit ;
54192: GO 54264
// result := [ ] ;
54194: LD_ADDR_VAR 0 3
54198: PUSH
54199: EMPTY
54200: ST_TO_ADDR
// for i in units do
54201: LD_ADDR_VAR 0 4
54205: PUSH
54206: LD_VAR 0 1
54210: PUSH
54211: FOR_IN
54212: IFFALSE 54262
// if GetTag ( i ) = tag then
54214: LD_VAR 0 4
54218: PPUSH
54219: CALL_OW 110
54223: PUSH
54224: LD_VAR 0 2
54228: EQUAL
54229: IFFALSE 54260
// result := Insert ( result , result + 1 , i ) ;
54231: LD_ADDR_VAR 0 3
54235: PUSH
54236: LD_VAR 0 3
54240: PPUSH
54241: LD_VAR 0 3
54245: PUSH
54246: LD_INT 1
54248: PLUS
54249: PPUSH
54250: LD_VAR 0 4
54254: PPUSH
54255: CALL_OW 2
54259: ST_TO_ADDR
54260: GO 54211
54262: POP
54263: POP
// end ;
54264: LD_VAR 0 3
54268: RET
// export function IsDriver ( un ) ; begin
54269: LD_INT 0
54271: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54272: LD_ADDR_VAR 0 2
54276: PUSH
54277: LD_VAR 0 1
54281: PUSH
54282: LD_INT 55
54284: PUSH
54285: EMPTY
54286: LIST
54287: PPUSH
54288: CALL_OW 69
54292: IN
54293: ST_TO_ADDR
// end ;
54294: LD_VAR 0 2
54298: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54299: LD_INT 0
54301: PPUSH
54302: PPUSH
// list := [ ] ;
54303: LD_ADDR_VAR 0 5
54307: PUSH
54308: EMPTY
54309: ST_TO_ADDR
// case d of 0 :
54310: LD_VAR 0 3
54314: PUSH
54315: LD_INT 0
54317: DOUBLE
54318: EQUAL
54319: IFTRUE 54323
54321: GO 54456
54323: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54324: LD_ADDR_VAR 0 5
54328: PUSH
54329: LD_VAR 0 1
54333: PUSH
54334: LD_INT 4
54336: MINUS
54337: PUSH
54338: LD_VAR 0 2
54342: PUSH
54343: LD_INT 4
54345: MINUS
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: LIST
54354: PUSH
54355: LD_VAR 0 1
54359: PUSH
54360: LD_INT 3
54362: MINUS
54363: PUSH
54364: LD_VAR 0 2
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: LIST
54376: PUSH
54377: LD_VAR 0 1
54381: PUSH
54382: LD_INT 4
54384: PLUS
54385: PUSH
54386: LD_VAR 0 2
54390: PUSH
54391: LD_INT 4
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: LIST
54398: PUSH
54399: LD_VAR 0 1
54403: PUSH
54404: LD_INT 3
54406: PLUS
54407: PUSH
54408: LD_VAR 0 2
54412: PUSH
54413: LD_INT 3
54415: PLUS
54416: PUSH
54417: LD_INT 5
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: LIST
54424: PUSH
54425: LD_VAR 0 1
54429: PUSH
54430: LD_VAR 0 2
54434: PUSH
54435: LD_INT 4
54437: PLUS
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: LIST
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: ST_TO_ADDR
// end ; 1 :
54454: GO 55154
54456: LD_INT 1
54458: DOUBLE
54459: EQUAL
54460: IFTRUE 54464
54462: GO 54597
54464: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54465: LD_ADDR_VAR 0 5
54469: PUSH
54470: LD_VAR 0 1
54474: PUSH
54475: LD_VAR 0 2
54479: PUSH
54480: LD_INT 4
54482: MINUS
54483: PUSH
54484: LD_INT 3
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: PUSH
54492: LD_VAR 0 1
54496: PUSH
54497: LD_INT 3
54499: MINUS
54500: PUSH
54501: LD_VAR 0 2
54505: PUSH
54506: LD_INT 3
54508: MINUS
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: LIST
54517: PUSH
54518: LD_VAR 0 1
54522: PUSH
54523: LD_INT 4
54525: MINUS
54526: PUSH
54527: LD_VAR 0 2
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: LIST
54539: PUSH
54540: LD_VAR 0 1
54544: PUSH
54545: LD_VAR 0 2
54549: PUSH
54550: LD_INT 3
54552: PLUS
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: LIST
54561: PUSH
54562: LD_VAR 0 1
54566: PUSH
54567: LD_INT 4
54569: PLUS
54570: PUSH
54571: LD_VAR 0 2
54575: PUSH
54576: LD_INT 4
54578: PLUS
54579: PUSH
54580: LD_INT 5
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: LIST
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: ST_TO_ADDR
// end ; 2 :
54595: GO 55154
54597: LD_INT 2
54599: DOUBLE
54600: EQUAL
54601: IFTRUE 54605
54603: GO 54734
54605: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54606: LD_ADDR_VAR 0 5
54610: PUSH
54611: LD_VAR 0 1
54615: PUSH
54616: LD_VAR 0 2
54620: PUSH
54621: LD_INT 3
54623: MINUS
54624: PUSH
54625: LD_INT 3
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: LIST
54632: PUSH
54633: LD_VAR 0 1
54637: PUSH
54638: LD_INT 4
54640: PLUS
54641: PUSH
54642: LD_VAR 0 2
54646: PUSH
54647: LD_INT 4
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: LIST
54654: PUSH
54655: LD_VAR 0 1
54659: PUSH
54660: LD_VAR 0 2
54664: PUSH
54665: LD_INT 4
54667: PLUS
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: LIST
54676: PUSH
54677: LD_VAR 0 1
54681: PUSH
54682: LD_INT 3
54684: MINUS
54685: PUSH
54686: LD_VAR 0 2
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: LIST
54698: PUSH
54699: LD_VAR 0 1
54703: PUSH
54704: LD_INT 4
54706: MINUS
54707: PUSH
54708: LD_VAR 0 2
54712: PUSH
54713: LD_INT 4
54715: MINUS
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: LIST
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: ST_TO_ADDR
// end ; 3 :
54732: GO 55154
54734: LD_INT 3
54736: DOUBLE
54737: EQUAL
54738: IFTRUE 54742
54740: GO 54875
54742: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54743: LD_ADDR_VAR 0 5
54747: PUSH
54748: LD_VAR 0 1
54752: PUSH
54753: LD_INT 3
54755: PLUS
54756: PUSH
54757: LD_VAR 0 2
54761: PUSH
54762: LD_INT 4
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: LIST
54769: PUSH
54770: LD_VAR 0 1
54774: PUSH
54775: LD_INT 4
54777: PLUS
54778: PUSH
54779: LD_VAR 0 2
54783: PUSH
54784: LD_INT 4
54786: PLUS
54787: PUSH
54788: LD_INT 5
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: LIST
54795: PUSH
54796: LD_VAR 0 1
54800: PUSH
54801: LD_INT 4
54803: MINUS
54804: PUSH
54805: LD_VAR 0 2
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: LIST
54817: PUSH
54818: LD_VAR 0 1
54822: PUSH
54823: LD_VAR 0 2
54827: PUSH
54828: LD_INT 4
54830: MINUS
54831: PUSH
54832: LD_INT 3
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: PUSH
54840: LD_VAR 0 1
54844: PUSH
54845: LD_INT 3
54847: MINUS
54848: PUSH
54849: LD_VAR 0 2
54853: PUSH
54854: LD_INT 3
54856: MINUS
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: LIST
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: ST_TO_ADDR
// end ; 4 :
54873: GO 55154
54875: LD_INT 4
54877: DOUBLE
54878: EQUAL
54879: IFTRUE 54883
54881: GO 55016
54883: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54884: LD_ADDR_VAR 0 5
54888: PUSH
54889: LD_VAR 0 1
54893: PUSH
54894: LD_VAR 0 2
54898: PUSH
54899: LD_INT 4
54901: PLUS
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: LIST
54910: PUSH
54911: LD_VAR 0 1
54915: PUSH
54916: LD_INT 3
54918: PLUS
54919: PUSH
54920: LD_VAR 0 2
54924: PUSH
54925: LD_INT 3
54927: PLUS
54928: PUSH
54929: LD_INT 5
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: LIST
54936: PUSH
54937: LD_VAR 0 1
54941: PUSH
54942: LD_INT 4
54944: PLUS
54945: PUSH
54946: LD_VAR 0 2
54950: PUSH
54951: LD_INT 4
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: PUSH
54959: LD_VAR 0 1
54963: PUSH
54964: LD_VAR 0 2
54968: PUSH
54969: LD_INT 3
54971: MINUS
54972: PUSH
54973: LD_INT 3
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: LIST
54980: PUSH
54981: LD_VAR 0 1
54985: PUSH
54986: LD_INT 4
54988: MINUS
54989: PUSH
54990: LD_VAR 0 2
54994: PUSH
54995: LD_INT 4
54997: MINUS
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: LIST
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: ST_TO_ADDR
// end ; 5 :
55014: GO 55154
55016: LD_INT 5
55018: DOUBLE
55019: EQUAL
55020: IFTRUE 55024
55022: GO 55153
55024: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55025: LD_ADDR_VAR 0 5
55029: PUSH
55030: LD_VAR 0 1
55034: PUSH
55035: LD_INT 4
55037: MINUS
55038: PUSH
55039: LD_VAR 0 2
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: LIST
55051: PUSH
55052: LD_VAR 0 1
55056: PUSH
55057: LD_VAR 0 2
55061: PUSH
55062: LD_INT 4
55064: MINUS
55065: PUSH
55066: LD_INT 3
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: LIST
55073: PUSH
55074: LD_VAR 0 1
55078: PUSH
55079: LD_INT 4
55081: PLUS
55082: PUSH
55083: LD_VAR 0 2
55087: PUSH
55088: LD_INT 4
55090: PLUS
55091: PUSH
55092: LD_INT 5
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: LIST
55099: PUSH
55100: LD_VAR 0 1
55104: PUSH
55105: LD_INT 3
55107: PLUS
55108: PUSH
55109: LD_VAR 0 2
55113: PUSH
55114: LD_INT 4
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: LIST
55121: PUSH
55122: LD_VAR 0 1
55126: PUSH
55127: LD_VAR 0 2
55131: PUSH
55132: LD_INT 3
55134: PLUS
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: LIST
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: ST_TO_ADDR
// end ; end ;
55151: GO 55154
55153: POP
// result := list ;
55154: LD_ADDR_VAR 0 4
55158: PUSH
55159: LD_VAR 0 5
55163: ST_TO_ADDR
// end ;
55164: LD_VAR 0 4
55168: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55169: LD_INT 0
55171: PPUSH
55172: PPUSH
55173: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55174: LD_VAR 0 1
55178: NOT
55179: PUSH
55180: LD_VAR 0 2
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 2
55190: PUSH
55191: LD_INT 3
55193: PUSH
55194: LD_INT 4
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: IN
55203: NOT
55204: OR
55205: IFFALSE 55209
// exit ;
55207: GO 55301
// tmp := [ ] ;
55209: LD_ADDR_VAR 0 5
55213: PUSH
55214: EMPTY
55215: ST_TO_ADDR
// for i in units do
55216: LD_ADDR_VAR 0 4
55220: PUSH
55221: LD_VAR 0 1
55225: PUSH
55226: FOR_IN
55227: IFFALSE 55270
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55229: LD_ADDR_VAR 0 5
55233: PUSH
55234: LD_VAR 0 5
55238: PPUSH
55239: LD_VAR 0 5
55243: PUSH
55244: LD_INT 1
55246: PLUS
55247: PPUSH
55248: LD_VAR 0 4
55252: PPUSH
55253: LD_VAR 0 2
55257: PPUSH
55258: CALL_OW 259
55262: PPUSH
55263: CALL_OW 2
55267: ST_TO_ADDR
55268: GO 55226
55270: POP
55271: POP
// if not tmp then
55272: LD_VAR 0 5
55276: NOT
55277: IFFALSE 55281
// exit ;
55279: GO 55301
// result := SortListByListDesc ( units , tmp ) ;
55281: LD_ADDR_VAR 0 3
55285: PUSH
55286: LD_VAR 0 1
55290: PPUSH
55291: LD_VAR 0 5
55295: PPUSH
55296: CALL_OW 77
55300: ST_TO_ADDR
// end ;
55301: LD_VAR 0 3
55305: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55306: LD_INT 0
55308: PPUSH
55309: PPUSH
55310: PPUSH
// result := false ;
55311: LD_ADDR_VAR 0 3
55315: PUSH
55316: LD_INT 0
55318: ST_TO_ADDR
// x := GetX ( building ) ;
55319: LD_ADDR_VAR 0 4
55323: PUSH
55324: LD_VAR 0 2
55328: PPUSH
55329: CALL_OW 250
55333: ST_TO_ADDR
// y := GetY ( building ) ;
55334: LD_ADDR_VAR 0 5
55338: PUSH
55339: LD_VAR 0 2
55343: PPUSH
55344: CALL_OW 251
55348: ST_TO_ADDR
// if not building or not x or not y then
55349: LD_VAR 0 2
55353: NOT
55354: PUSH
55355: LD_VAR 0 4
55359: NOT
55360: OR
55361: PUSH
55362: LD_VAR 0 5
55366: NOT
55367: OR
55368: IFFALSE 55372
// exit ;
55370: GO 55464
// if GetTaskList ( unit ) then
55372: LD_VAR 0 1
55376: PPUSH
55377: CALL_OW 437
55381: IFFALSE 55464
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55383: LD_STRING e
55385: PUSH
55386: LD_VAR 0 1
55390: PPUSH
55391: CALL_OW 437
55395: PUSH
55396: LD_INT 1
55398: ARRAY
55399: PUSH
55400: LD_INT 1
55402: ARRAY
55403: EQUAL
55404: PUSH
55405: LD_VAR 0 4
55409: PUSH
55410: LD_VAR 0 1
55414: PPUSH
55415: CALL_OW 437
55419: PUSH
55420: LD_INT 1
55422: ARRAY
55423: PUSH
55424: LD_INT 2
55426: ARRAY
55427: EQUAL
55428: AND
55429: PUSH
55430: LD_VAR 0 5
55434: PUSH
55435: LD_VAR 0 1
55439: PPUSH
55440: CALL_OW 437
55444: PUSH
55445: LD_INT 1
55447: ARRAY
55448: PUSH
55449: LD_INT 3
55451: ARRAY
55452: EQUAL
55453: AND
55454: IFFALSE 55464
// result := true end ;
55456: LD_ADDR_VAR 0 3
55460: PUSH
55461: LD_INT 1
55463: ST_TO_ADDR
// end ;
55464: LD_VAR 0 3
55468: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55469: LD_INT 0
55471: PPUSH
// result := false ;
55472: LD_ADDR_VAR 0 4
55476: PUSH
55477: LD_INT 0
55479: ST_TO_ADDR
// if GetTaskList ( unit ) then
55480: LD_VAR 0 1
55484: PPUSH
55485: CALL_OW 437
55489: IFFALSE 55572
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55491: LD_STRING M
55493: PUSH
55494: LD_VAR 0 1
55498: PPUSH
55499: CALL_OW 437
55503: PUSH
55504: LD_INT 1
55506: ARRAY
55507: PUSH
55508: LD_INT 1
55510: ARRAY
55511: EQUAL
55512: PUSH
55513: LD_VAR 0 2
55517: PUSH
55518: LD_VAR 0 1
55522: PPUSH
55523: CALL_OW 437
55527: PUSH
55528: LD_INT 1
55530: ARRAY
55531: PUSH
55532: LD_INT 2
55534: ARRAY
55535: EQUAL
55536: AND
55537: PUSH
55538: LD_VAR 0 3
55542: PUSH
55543: LD_VAR 0 1
55547: PPUSH
55548: CALL_OW 437
55552: PUSH
55553: LD_INT 1
55555: ARRAY
55556: PUSH
55557: LD_INT 3
55559: ARRAY
55560: EQUAL
55561: AND
55562: IFFALSE 55572
// result := true ;
55564: LD_ADDR_VAR 0 4
55568: PUSH
55569: LD_INT 1
55571: ST_TO_ADDR
// end ; end ;
55572: LD_VAR 0 4
55576: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55577: LD_INT 0
55579: PPUSH
55580: PPUSH
55581: PPUSH
55582: PPUSH
// if not unit or not area then
55583: LD_VAR 0 1
55587: NOT
55588: PUSH
55589: LD_VAR 0 2
55593: NOT
55594: OR
55595: IFFALSE 55599
// exit ;
55597: GO 55763
// tmp := AreaToList ( area , i ) ;
55599: LD_ADDR_VAR 0 6
55603: PUSH
55604: LD_VAR 0 2
55608: PPUSH
55609: LD_VAR 0 5
55613: PPUSH
55614: CALL_OW 517
55618: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55619: LD_ADDR_VAR 0 5
55623: PUSH
55624: DOUBLE
55625: LD_INT 1
55627: DEC
55628: ST_TO_ADDR
55629: LD_VAR 0 6
55633: PUSH
55634: LD_INT 1
55636: ARRAY
55637: PUSH
55638: FOR_TO
55639: IFFALSE 55761
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55641: LD_ADDR_VAR 0 7
55645: PUSH
55646: LD_VAR 0 6
55650: PUSH
55651: LD_INT 1
55653: ARRAY
55654: PUSH
55655: LD_VAR 0 5
55659: ARRAY
55660: PUSH
55661: LD_VAR 0 6
55665: PUSH
55666: LD_INT 2
55668: ARRAY
55669: PUSH
55670: LD_VAR 0 5
55674: ARRAY
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55680: LD_VAR 0 7
55684: PUSH
55685: LD_INT 1
55687: ARRAY
55688: PPUSH
55689: LD_VAR 0 7
55693: PUSH
55694: LD_INT 2
55696: ARRAY
55697: PPUSH
55698: CALL_OW 428
55702: PUSH
55703: LD_INT 0
55705: EQUAL
55706: IFFALSE 55759
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55708: LD_VAR 0 1
55712: PPUSH
55713: LD_VAR 0 7
55717: PUSH
55718: LD_INT 1
55720: ARRAY
55721: PPUSH
55722: LD_VAR 0 7
55726: PUSH
55727: LD_INT 2
55729: ARRAY
55730: PPUSH
55731: LD_VAR 0 3
55735: PPUSH
55736: CALL_OW 48
// result := IsPlaced ( unit ) ;
55740: LD_ADDR_VAR 0 4
55744: PUSH
55745: LD_VAR 0 1
55749: PPUSH
55750: CALL_OW 305
55754: ST_TO_ADDR
// exit ;
55755: POP
55756: POP
55757: GO 55763
// end ; end ;
55759: GO 55638
55761: POP
55762: POP
// end ;
55763: LD_VAR 0 4
55767: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55768: LD_INT 0
55770: PPUSH
55771: PPUSH
55772: PPUSH
// if not side or side > 8 then
55773: LD_VAR 0 1
55777: NOT
55778: PUSH
55779: LD_VAR 0 1
55783: PUSH
55784: LD_INT 8
55786: GREATER
55787: OR
55788: IFFALSE 55792
// exit ;
55790: GO 55979
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55792: LD_ADDR_VAR 0 4
55796: PUSH
55797: LD_INT 22
55799: PUSH
55800: LD_VAR 0 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 21
55811: PUSH
55812: LD_INT 3
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PPUSH
55823: CALL_OW 69
55827: ST_TO_ADDR
// if not tmp then
55828: LD_VAR 0 4
55832: NOT
55833: IFFALSE 55837
// exit ;
55835: GO 55979
// enable_addtolog := true ;
55837: LD_ADDR_OWVAR 81
55841: PUSH
55842: LD_INT 1
55844: ST_TO_ADDR
// AddToLog ( [ ) ;
55845: LD_STRING [
55847: PPUSH
55848: CALL_OW 561
// for i in tmp do
55852: LD_ADDR_VAR 0 3
55856: PUSH
55857: LD_VAR 0 4
55861: PUSH
55862: FOR_IN
55863: IFFALSE 55970
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55865: LD_STRING [
55867: PUSH
55868: LD_VAR 0 3
55872: PPUSH
55873: CALL_OW 266
55877: STR
55878: PUSH
55879: LD_STRING , 
55881: STR
55882: PUSH
55883: LD_VAR 0 3
55887: PPUSH
55888: CALL_OW 250
55892: STR
55893: PUSH
55894: LD_STRING , 
55896: STR
55897: PUSH
55898: LD_VAR 0 3
55902: PPUSH
55903: CALL_OW 251
55907: STR
55908: PUSH
55909: LD_STRING , 
55911: STR
55912: PUSH
55913: LD_VAR 0 3
55917: PPUSH
55918: CALL_OW 254
55922: STR
55923: PUSH
55924: LD_STRING , 
55926: STR
55927: PUSH
55928: LD_VAR 0 3
55932: PPUSH
55933: LD_INT 1
55935: PPUSH
55936: CALL_OW 268
55940: STR
55941: PUSH
55942: LD_STRING , 
55944: STR
55945: PUSH
55946: LD_VAR 0 3
55950: PPUSH
55951: LD_INT 2
55953: PPUSH
55954: CALL_OW 268
55958: STR
55959: PUSH
55960: LD_STRING ],
55962: STR
55963: PPUSH
55964: CALL_OW 561
// end ;
55968: GO 55862
55970: POP
55971: POP
// AddToLog ( ]; ) ;
55972: LD_STRING ];
55974: PPUSH
55975: CALL_OW 561
// end ;
55979: LD_VAR 0 2
55983: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55984: LD_INT 0
55986: PPUSH
55987: PPUSH
55988: PPUSH
55989: PPUSH
55990: PPUSH
// if not area or not rate or not max then
55991: LD_VAR 0 1
55995: NOT
55996: PUSH
55997: LD_VAR 0 2
56001: NOT
56002: OR
56003: PUSH
56004: LD_VAR 0 4
56008: NOT
56009: OR
56010: IFFALSE 56014
// exit ;
56012: GO 56206
// while 1 do
56014: LD_INT 1
56016: IFFALSE 56206
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56018: LD_ADDR_VAR 0 9
56022: PUSH
56023: LD_VAR 0 1
56027: PPUSH
56028: LD_INT 1
56030: PPUSH
56031: CALL_OW 287
56035: PUSH
56036: LD_INT 10
56038: MUL
56039: ST_TO_ADDR
// r := rate / 10 ;
56040: LD_ADDR_VAR 0 7
56044: PUSH
56045: LD_VAR 0 2
56049: PUSH
56050: LD_INT 10
56052: DIVREAL
56053: ST_TO_ADDR
// time := 1 1$00 ;
56054: LD_ADDR_VAR 0 8
56058: PUSH
56059: LD_INT 2100
56061: ST_TO_ADDR
// if amount < min then
56062: LD_VAR 0 9
56066: PUSH
56067: LD_VAR 0 3
56071: LESS
56072: IFFALSE 56090
// r := r * 2 else
56074: LD_ADDR_VAR 0 7
56078: PUSH
56079: LD_VAR 0 7
56083: PUSH
56084: LD_INT 2
56086: MUL
56087: ST_TO_ADDR
56088: GO 56116
// if amount > max then
56090: LD_VAR 0 9
56094: PUSH
56095: LD_VAR 0 4
56099: GREATER
56100: IFFALSE 56116
// r := r / 2 ;
56102: LD_ADDR_VAR 0 7
56106: PUSH
56107: LD_VAR 0 7
56111: PUSH
56112: LD_INT 2
56114: DIVREAL
56115: ST_TO_ADDR
// time := time / r ;
56116: LD_ADDR_VAR 0 8
56120: PUSH
56121: LD_VAR 0 8
56125: PUSH
56126: LD_VAR 0 7
56130: DIVREAL
56131: ST_TO_ADDR
// if time < 0 then
56132: LD_VAR 0 8
56136: PUSH
56137: LD_INT 0
56139: LESS
56140: IFFALSE 56157
// time := time * - 1 ;
56142: LD_ADDR_VAR 0 8
56146: PUSH
56147: LD_VAR 0 8
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: MUL
56156: ST_TO_ADDR
// wait ( time ) ;
56157: LD_VAR 0 8
56161: PPUSH
56162: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56166: LD_INT 35
56168: PPUSH
56169: LD_INT 875
56171: PPUSH
56172: CALL_OW 12
56176: PPUSH
56177: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56181: LD_INT 1
56183: PPUSH
56184: LD_INT 5
56186: PPUSH
56187: CALL_OW 12
56191: PPUSH
56192: LD_VAR 0 1
56196: PPUSH
56197: LD_INT 1
56199: PPUSH
56200: CALL_OW 55
// end ;
56204: GO 56014
// end ;
56206: LD_VAR 0 5
56210: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56211: LD_INT 0
56213: PPUSH
56214: PPUSH
56215: PPUSH
56216: PPUSH
56217: PPUSH
56218: PPUSH
56219: PPUSH
56220: PPUSH
// if not turrets or not factories then
56221: LD_VAR 0 1
56225: NOT
56226: PUSH
56227: LD_VAR 0 2
56231: NOT
56232: OR
56233: IFFALSE 56237
// exit ;
56235: GO 56544
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56237: LD_ADDR_VAR 0 10
56241: PUSH
56242: LD_INT 5
56244: PUSH
56245: LD_INT 6
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: PUSH
56255: LD_INT 4
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 3
56264: PUSH
56265: LD_INT 5
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 24
56279: PUSH
56280: LD_INT 25
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 23
56289: PUSH
56290: LD_INT 27
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 42
56303: PUSH
56304: LD_INT 43
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 44
56313: PUSH
56314: LD_INT 46
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 45
56323: PUSH
56324: LD_INT 47
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: LIST
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: LIST
56340: ST_TO_ADDR
// result := [ ] ;
56341: LD_ADDR_VAR 0 3
56345: PUSH
56346: EMPTY
56347: ST_TO_ADDR
// for i in turrets do
56348: LD_ADDR_VAR 0 4
56352: PUSH
56353: LD_VAR 0 1
56357: PUSH
56358: FOR_IN
56359: IFFALSE 56542
// begin nat := GetNation ( i ) ;
56361: LD_ADDR_VAR 0 7
56365: PUSH
56366: LD_VAR 0 4
56370: PPUSH
56371: CALL_OW 248
56375: ST_TO_ADDR
// weapon := 0 ;
56376: LD_ADDR_VAR 0 8
56380: PUSH
56381: LD_INT 0
56383: ST_TO_ADDR
// if not nat then
56384: LD_VAR 0 7
56388: NOT
56389: IFFALSE 56393
// continue ;
56391: GO 56358
// for j in list [ nat ] do
56393: LD_ADDR_VAR 0 5
56397: PUSH
56398: LD_VAR 0 10
56402: PUSH
56403: LD_VAR 0 7
56407: ARRAY
56408: PUSH
56409: FOR_IN
56410: IFFALSE 56451
// if GetBWeapon ( i ) = j [ 1 ] then
56412: LD_VAR 0 4
56416: PPUSH
56417: CALL_OW 269
56421: PUSH
56422: LD_VAR 0 5
56426: PUSH
56427: LD_INT 1
56429: ARRAY
56430: EQUAL
56431: IFFALSE 56449
// begin weapon := j [ 2 ] ;
56433: LD_ADDR_VAR 0 8
56437: PUSH
56438: LD_VAR 0 5
56442: PUSH
56443: LD_INT 2
56445: ARRAY
56446: ST_TO_ADDR
// break ;
56447: GO 56451
// end ;
56449: GO 56409
56451: POP
56452: POP
// if not weapon then
56453: LD_VAR 0 8
56457: NOT
56458: IFFALSE 56462
// continue ;
56460: GO 56358
// for k in factories do
56462: LD_ADDR_VAR 0 6
56466: PUSH
56467: LD_VAR 0 2
56471: PUSH
56472: FOR_IN
56473: IFFALSE 56538
// begin weapons := AvailableWeaponList ( k ) ;
56475: LD_ADDR_VAR 0 9
56479: PUSH
56480: LD_VAR 0 6
56484: PPUSH
56485: CALL_OW 478
56489: ST_TO_ADDR
// if not weapons then
56490: LD_VAR 0 9
56494: NOT
56495: IFFALSE 56499
// continue ;
56497: GO 56472
// if weapon in weapons then
56499: LD_VAR 0 8
56503: PUSH
56504: LD_VAR 0 9
56508: IN
56509: IFFALSE 56536
// begin result := [ i , weapon ] ;
56511: LD_ADDR_VAR 0 3
56515: PUSH
56516: LD_VAR 0 4
56520: PUSH
56521: LD_VAR 0 8
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: ST_TO_ADDR
// exit ;
56530: POP
56531: POP
56532: POP
56533: POP
56534: GO 56544
// end ; end ;
56536: GO 56472
56538: POP
56539: POP
// end ;
56540: GO 56358
56542: POP
56543: POP
// end ;
56544: LD_VAR 0 3
56548: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56549: LD_INT 0
56551: PPUSH
// if not side or side > 8 then
56552: LD_VAR 0 3
56556: NOT
56557: PUSH
56558: LD_VAR 0 3
56562: PUSH
56563: LD_INT 8
56565: GREATER
56566: OR
56567: IFFALSE 56571
// exit ;
56569: GO 56630
// if not range then
56571: LD_VAR 0 4
56575: NOT
56576: IFFALSE 56587
// range := - 12 ;
56578: LD_ADDR_VAR 0 4
56582: PUSH
56583: LD_INT 12
56585: NEG
56586: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56587: LD_VAR 0 1
56591: PPUSH
56592: LD_VAR 0 2
56596: PPUSH
56597: LD_VAR 0 3
56601: PPUSH
56602: LD_VAR 0 4
56606: PPUSH
56607: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56611: LD_VAR 0 1
56615: PPUSH
56616: LD_VAR 0 2
56620: PPUSH
56621: LD_VAR 0 3
56625: PPUSH
56626: CALL_OW 331
// end ;
56630: LD_VAR 0 5
56634: RET
// export function Video ( mode ) ; begin
56635: LD_INT 0
56637: PPUSH
// ingame_video = mode ;
56638: LD_ADDR_OWVAR 52
56642: PUSH
56643: LD_VAR 0 1
56647: ST_TO_ADDR
// interface_hidden = mode ;
56648: LD_ADDR_OWVAR 54
56652: PUSH
56653: LD_VAR 0 1
56657: ST_TO_ADDR
// end ;
56658: LD_VAR 0 2
56662: RET
// export function Join ( array , element ) ; begin
56663: LD_INT 0
56665: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56666: LD_ADDR_VAR 0 3
56670: PUSH
56671: LD_VAR 0 1
56675: PPUSH
56676: LD_VAR 0 1
56680: PUSH
56681: LD_INT 1
56683: PLUS
56684: PPUSH
56685: LD_VAR 0 2
56689: PPUSH
56690: CALL_OW 1
56694: ST_TO_ADDR
// end ;
56695: LD_VAR 0 3
56699: RET
// export function JoinUnion ( array , element ) ; begin
56700: LD_INT 0
56702: PPUSH
// result := array union element ;
56703: LD_ADDR_VAR 0 3
56707: PUSH
56708: LD_VAR 0 1
56712: PUSH
56713: LD_VAR 0 2
56717: UNION
56718: ST_TO_ADDR
// end ;
56719: LD_VAR 0 3
56723: RET
// export function GetBehemoths ( side ) ; begin
56724: LD_INT 0
56726: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56727: LD_ADDR_VAR 0 2
56731: PUSH
56732: LD_INT 22
56734: PUSH
56735: LD_VAR 0 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 31
56746: PUSH
56747: LD_INT 25
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PPUSH
56758: CALL_OW 69
56762: ST_TO_ADDR
// end ;
56763: LD_VAR 0 2
56767: RET
// export function Shuffle ( array ) ; var i , index ; begin
56768: LD_INT 0
56770: PPUSH
56771: PPUSH
56772: PPUSH
// result := [ ] ;
56773: LD_ADDR_VAR 0 2
56777: PUSH
56778: EMPTY
56779: ST_TO_ADDR
// if not array then
56780: LD_VAR 0 1
56784: NOT
56785: IFFALSE 56789
// exit ;
56787: GO 56888
// Randomize ;
56789: CALL_OW 10
// for i = array downto 1 do
56793: LD_ADDR_VAR 0 3
56797: PUSH
56798: DOUBLE
56799: LD_VAR 0 1
56803: INC
56804: ST_TO_ADDR
56805: LD_INT 1
56807: PUSH
56808: FOR_DOWNTO
56809: IFFALSE 56886
// begin index := rand ( 1 , array ) ;
56811: LD_ADDR_VAR 0 4
56815: PUSH
56816: LD_INT 1
56818: PPUSH
56819: LD_VAR 0 1
56823: PPUSH
56824: CALL_OW 12
56828: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56829: LD_ADDR_VAR 0 2
56833: PUSH
56834: LD_VAR 0 2
56838: PPUSH
56839: LD_VAR 0 2
56843: PUSH
56844: LD_INT 1
56846: PLUS
56847: PPUSH
56848: LD_VAR 0 1
56852: PUSH
56853: LD_VAR 0 4
56857: ARRAY
56858: PPUSH
56859: CALL_OW 2
56863: ST_TO_ADDR
// array := Delete ( array , index ) ;
56864: LD_ADDR_VAR 0 1
56868: PUSH
56869: LD_VAR 0 1
56873: PPUSH
56874: LD_VAR 0 4
56878: PPUSH
56879: CALL_OW 3
56883: ST_TO_ADDR
// end ;
56884: GO 56808
56886: POP
56887: POP
// end ;
56888: LD_VAR 0 2
56892: RET
// export function GetBaseMaterials ( base ) ; begin
56893: LD_INT 0
56895: PPUSH
// result := [ 0 , 0 , 0 ] ;
56896: LD_ADDR_VAR 0 2
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: LIST
56914: ST_TO_ADDR
// if not base then
56915: LD_VAR 0 1
56919: NOT
56920: IFFALSE 56924
// exit ;
56922: GO 56973
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56924: LD_ADDR_VAR 0 2
56928: PUSH
56929: LD_VAR 0 1
56933: PPUSH
56934: LD_INT 1
56936: PPUSH
56937: CALL_OW 275
56941: PUSH
56942: LD_VAR 0 1
56946: PPUSH
56947: LD_INT 2
56949: PPUSH
56950: CALL_OW 275
56954: PUSH
56955: LD_VAR 0 1
56959: PPUSH
56960: LD_INT 3
56962: PPUSH
56963: CALL_OW 275
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: LIST
56972: ST_TO_ADDR
// end ;
56973: LD_VAR 0 2
56977: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56978: LD_INT 0
56980: PPUSH
56981: PPUSH
// result := array ;
56982: LD_ADDR_VAR 0 3
56986: PUSH
56987: LD_VAR 0 1
56991: ST_TO_ADDR
// if size > 0 then
56992: LD_VAR 0 2
56996: PUSH
56997: LD_INT 0
56999: GREATER
57000: IFFALSE 57046
// for i := array downto size do
57002: LD_ADDR_VAR 0 4
57006: PUSH
57007: DOUBLE
57008: LD_VAR 0 1
57012: INC
57013: ST_TO_ADDR
57014: LD_VAR 0 2
57018: PUSH
57019: FOR_DOWNTO
57020: IFFALSE 57044
// result := Delete ( result , result ) ;
57022: LD_ADDR_VAR 0 3
57026: PUSH
57027: LD_VAR 0 3
57031: PPUSH
57032: LD_VAR 0 3
57036: PPUSH
57037: CALL_OW 3
57041: ST_TO_ADDR
57042: GO 57019
57044: POP
57045: POP
// end ;
57046: LD_VAR 0 3
57050: RET
// export function ComExit ( unit ) ; var tmp ; begin
57051: LD_INT 0
57053: PPUSH
57054: PPUSH
// if not IsInUnit ( unit ) then
57055: LD_VAR 0 1
57059: PPUSH
57060: CALL_OW 310
57064: NOT
57065: IFFALSE 57069
// exit ;
57067: GO 57129
// tmp := IsInUnit ( unit ) ;
57069: LD_ADDR_VAR 0 3
57073: PUSH
57074: LD_VAR 0 1
57078: PPUSH
57079: CALL_OW 310
57083: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57084: LD_VAR 0 3
57088: PPUSH
57089: CALL_OW 247
57093: PUSH
57094: LD_INT 2
57096: EQUAL
57097: IFFALSE 57110
// ComExitVehicle ( unit ) else
57099: LD_VAR 0 1
57103: PPUSH
57104: CALL_OW 121
57108: GO 57119
// ComExitBuilding ( unit ) ;
57110: LD_VAR 0 1
57114: PPUSH
57115: CALL_OW 122
// result := tmp ;
57119: LD_ADDR_VAR 0 2
57123: PUSH
57124: LD_VAR 0 3
57128: ST_TO_ADDR
// end ;
57129: LD_VAR 0 2
57133: RET
// export function ResetHc ; begin
57134: LD_INT 0
57136: PPUSH
// InitHc ;
57137: CALL_OW 19
// hc_importance := 0 ;
57141: LD_ADDR_OWVAR 32
57145: PUSH
57146: LD_INT 0
57148: ST_TO_ADDR
// end ;
57149: LD_VAR 0 1
57153: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57154: LD_INT 0
57156: PPUSH
57157: PPUSH
57158: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57159: LD_ADDR_VAR 0 6
57163: PUSH
57164: LD_VAR 0 1
57168: PUSH
57169: LD_VAR 0 3
57173: PLUS
57174: PUSH
57175: LD_INT 2
57177: DIV
57178: ST_TO_ADDR
// if _x < 0 then
57179: LD_VAR 0 6
57183: PUSH
57184: LD_INT 0
57186: LESS
57187: IFFALSE 57204
// _x := _x * - 1 ;
57189: LD_ADDR_VAR 0 6
57193: PUSH
57194: LD_VAR 0 6
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: MUL
57203: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57204: LD_ADDR_VAR 0 7
57208: PUSH
57209: LD_VAR 0 2
57213: PUSH
57214: LD_VAR 0 4
57218: PLUS
57219: PUSH
57220: LD_INT 2
57222: DIV
57223: ST_TO_ADDR
// if _y < 0 then
57224: LD_VAR 0 7
57228: PUSH
57229: LD_INT 0
57231: LESS
57232: IFFALSE 57249
// _y := _y * - 1 ;
57234: LD_ADDR_VAR 0 7
57238: PUSH
57239: LD_VAR 0 7
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: MUL
57248: ST_TO_ADDR
// result := [ _x , _y ] ;
57249: LD_ADDR_VAR 0 5
57253: PUSH
57254: LD_VAR 0 6
57258: PUSH
57259: LD_VAR 0 7
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: ST_TO_ADDR
// end ;
57268: LD_VAR 0 5
57272: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57273: LD_INT 0
57275: PPUSH
57276: PPUSH
57277: PPUSH
57278: PPUSH
// task := GetTaskList ( unit ) ;
57279: LD_ADDR_VAR 0 7
57283: PUSH
57284: LD_VAR 0 1
57288: PPUSH
57289: CALL_OW 437
57293: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57294: LD_VAR 0 7
57298: NOT
57299: PUSH
57300: LD_VAR 0 1
57304: PPUSH
57305: LD_VAR 0 2
57309: PPUSH
57310: CALL_OW 308
57314: NOT
57315: AND
57316: IFFALSE 57320
// exit ;
57318: GO 57438
// if IsInArea ( unit , area ) then
57320: LD_VAR 0 1
57324: PPUSH
57325: LD_VAR 0 2
57329: PPUSH
57330: CALL_OW 308
57334: IFFALSE 57352
// begin ComMoveToArea ( unit , goAway ) ;
57336: LD_VAR 0 1
57340: PPUSH
57341: LD_VAR 0 3
57345: PPUSH
57346: CALL_OW 113
// exit ;
57350: GO 57438
// end ; if task [ 1 ] [ 1 ] <> M then
57352: LD_VAR 0 7
57356: PUSH
57357: LD_INT 1
57359: ARRAY
57360: PUSH
57361: LD_INT 1
57363: ARRAY
57364: PUSH
57365: LD_STRING M
57367: NONEQUAL
57368: IFFALSE 57372
// exit ;
57370: GO 57438
// x := task [ 1 ] [ 2 ] ;
57372: LD_ADDR_VAR 0 5
57376: PUSH
57377: LD_VAR 0 7
57381: PUSH
57382: LD_INT 1
57384: ARRAY
57385: PUSH
57386: LD_INT 2
57388: ARRAY
57389: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57390: LD_ADDR_VAR 0 6
57394: PUSH
57395: LD_VAR 0 7
57399: PUSH
57400: LD_INT 1
57402: ARRAY
57403: PUSH
57404: LD_INT 3
57406: ARRAY
57407: ST_TO_ADDR
// if InArea ( x , y , area ) then
57408: LD_VAR 0 5
57412: PPUSH
57413: LD_VAR 0 6
57417: PPUSH
57418: LD_VAR 0 2
57422: PPUSH
57423: CALL_OW 309
57427: IFFALSE 57438
// ComStop ( unit ) ;
57429: LD_VAR 0 1
57433: PPUSH
57434: CALL_OW 141
// end ;
57438: LD_VAR 0 4
57442: RET
// export function Abs ( value ) ; begin
57443: LD_INT 0
57445: PPUSH
// result := value ;
57446: LD_ADDR_VAR 0 2
57450: PUSH
57451: LD_VAR 0 1
57455: ST_TO_ADDR
// if value < 0 then
57456: LD_VAR 0 1
57460: PUSH
57461: LD_INT 0
57463: LESS
57464: IFFALSE 57481
// result := value * - 1 ;
57466: LD_ADDR_VAR 0 2
57470: PUSH
57471: LD_VAR 0 1
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: MUL
57480: ST_TO_ADDR
// end ;
57481: LD_VAR 0 2
57485: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57486: LD_INT 0
57488: PPUSH
57489: PPUSH
57490: PPUSH
57491: PPUSH
57492: PPUSH
57493: PPUSH
57494: PPUSH
57495: PPUSH
// if not unit or not building then
57496: LD_VAR 0 1
57500: NOT
57501: PUSH
57502: LD_VAR 0 2
57506: NOT
57507: OR
57508: IFFALSE 57512
// exit ;
57510: GO 57738
// x := GetX ( building ) ;
57512: LD_ADDR_VAR 0 4
57516: PUSH
57517: LD_VAR 0 2
57521: PPUSH
57522: CALL_OW 250
57526: ST_TO_ADDR
// y := GetY ( building ) ;
57527: LD_ADDR_VAR 0 6
57531: PUSH
57532: LD_VAR 0 2
57536: PPUSH
57537: CALL_OW 251
57541: ST_TO_ADDR
// d := GetDir ( building ) ;
57542: LD_ADDR_VAR 0 8
57546: PUSH
57547: LD_VAR 0 2
57551: PPUSH
57552: CALL_OW 254
57556: ST_TO_ADDR
// r := 4 ;
57557: LD_ADDR_VAR 0 9
57561: PUSH
57562: LD_INT 4
57564: ST_TO_ADDR
// for i := 1 to 5 do
57565: LD_ADDR_VAR 0 10
57569: PUSH
57570: DOUBLE
57571: LD_INT 1
57573: DEC
57574: ST_TO_ADDR
57575: LD_INT 5
57577: PUSH
57578: FOR_TO
57579: IFFALSE 57736
// begin _x := ShiftX ( x , d , r + i ) ;
57581: LD_ADDR_VAR 0 5
57585: PUSH
57586: LD_VAR 0 4
57590: PPUSH
57591: LD_VAR 0 8
57595: PPUSH
57596: LD_VAR 0 9
57600: PUSH
57601: LD_VAR 0 10
57605: PLUS
57606: PPUSH
57607: CALL_OW 272
57611: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57612: LD_ADDR_VAR 0 7
57616: PUSH
57617: LD_VAR 0 6
57621: PPUSH
57622: LD_VAR 0 8
57626: PPUSH
57627: LD_VAR 0 9
57631: PUSH
57632: LD_VAR 0 10
57636: PLUS
57637: PPUSH
57638: CALL_OW 273
57642: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57643: LD_VAR 0 5
57647: PPUSH
57648: LD_VAR 0 7
57652: PPUSH
57653: CALL_OW 488
57657: PUSH
57658: LD_VAR 0 5
57662: PPUSH
57663: LD_VAR 0 7
57667: PPUSH
57668: CALL_OW 428
57672: PPUSH
57673: CALL_OW 247
57677: PUSH
57678: LD_INT 3
57680: PUSH
57681: LD_INT 2
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: IN
57688: NOT
57689: AND
57690: IFFALSE 57734
// begin ComMoveXY ( unit , _x , _y ) ;
57692: LD_VAR 0 1
57696: PPUSH
57697: LD_VAR 0 5
57701: PPUSH
57702: LD_VAR 0 7
57706: PPUSH
57707: CALL_OW 111
// result := [ _x , _y ] ;
57711: LD_ADDR_VAR 0 3
57715: PUSH
57716: LD_VAR 0 5
57720: PUSH
57721: LD_VAR 0 7
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: ST_TO_ADDR
// exit ;
57730: POP
57731: POP
57732: GO 57738
// end ; end ;
57734: GO 57578
57736: POP
57737: POP
// end ;
57738: LD_VAR 0 3
57742: RET
