// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_EXP 87
3394: EQUAL
3395: IFFALSE 3467
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3397: LD_INT 68
3399: PPUSH
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 255
3409: PPUSH
3410: CALL_OW 321
3414: PUSH
3415: LD_INT 2
3417: EQUAL
3418: IFFALSE 3430
// eff := 70 else
3420: LD_ADDR_VAR 0 4
3424: PUSH
3425: LD_INT 70
3427: ST_TO_ADDR
3428: GO 3438
// eff := 30 ;
3430: LD_ADDR_VAR 0 4
3434: PUSH
3435: LD_INT 30
3437: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_VAR 0 1
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: LD_VAR 0 4
3462: PPUSH
3463: CALL_OW 495
// end ; end ;
3467: LD_VAR 0 2
3471: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3472: LD_INT 0
3474: PPUSH
// end ;
3475: LD_VAR 0 4
3479: RET
// export function SOS_Command ( cmd ) ; begin
3480: LD_INT 0
3482: PPUSH
// end ;
3483: LD_VAR 0 2
3487: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3488: LD_INT 0
3490: PPUSH
// end ;
3491: LD_VAR 0 6
3495: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
3496: LD_INT 0
3498: PPUSH
3499: PPUSH
// if not vehicle or not factory then
3500: LD_VAR 0 1
3504: NOT
3505: PUSH
3506: LD_VAR 0 2
3510: NOT
3511: OR
3512: IFFALSE 3516
// exit ;
3514: GO 3747
// if factoryWaypoints >= factory then
3516: LD_EXP 80
3520: PUSH
3521: LD_VAR 0 2
3525: GREATEREQUAL
3526: IFFALSE 3747
// if factoryWaypoints [ factory ] then
3528: LD_EXP 80
3532: PUSH
3533: LD_VAR 0 2
3537: ARRAY
3538: IFFALSE 3747
// begin if GetControl ( vehicle ) = control_manual then
3540: LD_VAR 0 1
3544: PPUSH
3545: CALL_OW 263
3549: PUSH
3550: LD_INT 1
3552: EQUAL
3553: IFFALSE 3634
// begin driver := IsDrivenBy ( vehicle ) ;
3555: LD_ADDR_VAR 0 4
3559: PUSH
3560: LD_VAR 0 1
3564: PPUSH
3565: CALL_OW 311
3569: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3570: LD_VAR 0 4
3574: PPUSH
3575: LD_EXP 80
3579: PUSH
3580: LD_VAR 0 2
3584: ARRAY
3585: PUSH
3586: LD_INT 3
3588: ARRAY
3589: PPUSH
3590: LD_EXP 80
3594: PUSH
3595: LD_VAR 0 2
3599: ARRAY
3600: PUSH
3601: LD_INT 4
3603: ARRAY
3604: PPUSH
3605: CALL_OW 171
// AddComExitVehicle ( driver ) ;
3609: LD_VAR 0 4
3613: PPUSH
3614: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
3618: LD_VAR 0 4
3622: PPUSH
3623: LD_VAR 0 2
3627: PPUSH
3628: CALL_OW 180
// end else
3632: GO 3747
// if GetControl ( vehicle ) = control_remote then
3634: LD_VAR 0 1
3638: PPUSH
3639: CALL_OW 263
3643: PUSH
3644: LD_INT 2
3646: EQUAL
3647: IFFALSE 3708
// begin wait ( 0 0$2 ) ;
3649: LD_INT 70
3651: PPUSH
3652: CALL_OW 67
// if Connect ( vehicle ) then
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL 31606 0 1
3665: IFFALSE 3706
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3667: LD_VAR 0 1
3671: PPUSH
3672: LD_EXP 80
3676: PUSH
3677: LD_VAR 0 2
3681: ARRAY
3682: PUSH
3683: LD_INT 3
3685: ARRAY
3686: PPUSH
3687: LD_EXP 80
3691: PUSH
3692: LD_VAR 0 2
3696: ARRAY
3697: PUSH
3698: LD_INT 4
3700: ARRAY
3701: PPUSH
3702: CALL_OW 171
// end else
3706: GO 3747
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3708: LD_VAR 0 1
3712: PPUSH
3713: LD_EXP 80
3717: PUSH
3718: LD_VAR 0 2
3722: ARRAY
3723: PUSH
3724: LD_INT 3
3726: ARRAY
3727: PPUSH
3728: LD_EXP 80
3732: PUSH
3733: LD_VAR 0 2
3737: ARRAY
3738: PUSH
3739: LD_INT 4
3741: ARRAY
3742: PPUSH
3743: CALL_OW 171
// end ; end ;
3747: LD_VAR 0 3
3751: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
3752: LD_INT 0
3754: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
3755: LD_VAR 0 1
3759: PUSH
3760: LD_INT 250
3762: EQUAL
3763: PUSH
3764: LD_VAR 0 2
3768: PPUSH
3769: CALL_OW 264
3773: PUSH
3774: LD_EXP 90
3778: EQUAL
3779: AND
3780: IFFALSE 3801
// MinerPlaceMine ( unit , x , y ) ;
3782: LD_VAR 0 2
3786: PPUSH
3787: LD_VAR 0 4
3791: PPUSH
3792: LD_VAR 0 5
3796: PPUSH
3797: CALL 6200 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
3801: LD_VAR 0 1
3805: PUSH
3806: LD_INT 251
3808: EQUAL
3809: PUSH
3810: LD_VAR 0 2
3814: PPUSH
3815: CALL_OW 264
3819: PUSH
3820: LD_EXP 90
3824: EQUAL
3825: AND
3826: IFFALSE 3847
// MinerDetonateMine ( unit , x , y ) ;
3828: LD_VAR 0 2
3832: PPUSH
3833: LD_VAR 0 4
3837: PPUSH
3838: LD_VAR 0 5
3842: PPUSH
3843: CALL 6477 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
3847: LD_VAR 0 1
3851: PUSH
3852: LD_INT 252
3854: EQUAL
3855: PUSH
3856: LD_VAR 0 2
3860: PPUSH
3861: CALL_OW 264
3865: PUSH
3866: LD_EXP 90
3870: EQUAL
3871: AND
3872: IFFALSE 3893
// MinerCreateMinefield ( unit , x , y ) ;
3874: LD_VAR 0 2
3878: PPUSH
3879: LD_VAR 0 4
3883: PPUSH
3884: LD_VAR 0 5
3888: PPUSH
3889: CALL 6894 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
3893: LD_VAR 0 1
3897: PUSH
3898: LD_INT 253
3900: EQUAL
3901: PUSH
3902: LD_VAR 0 2
3906: PPUSH
3907: CALL_OW 257
3911: PUSH
3912: LD_INT 5
3914: EQUAL
3915: AND
3916: IFFALSE 3937
// ComBinocular ( unit , x , y ) ;
3918: LD_VAR 0 2
3922: PPUSH
3923: LD_VAR 0 4
3927: PPUSH
3928: LD_VAR 0 5
3932: PPUSH
3933: CALL 7265 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3937: LD_VAR 0 1
3941: PUSH
3942: LD_INT 254
3944: EQUAL
3945: PUSH
3946: LD_VAR 0 2
3950: PPUSH
3951: CALL_OW 264
3955: PUSH
3956: LD_EXP 85
3960: EQUAL
3961: AND
3962: PUSH
3963: LD_VAR 0 3
3967: PPUSH
3968: CALL_OW 263
3972: PUSH
3973: LD_INT 3
3975: EQUAL
3976: AND
3977: IFFALSE 3993
// HackDestroyVehicle ( unit , selectedUnit ) ;
3979: LD_VAR 0 2
3983: PPUSH
3984: LD_VAR 0 3
3988: PPUSH
3989: CALL 5560 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3993: LD_VAR 0 1
3997: PUSH
3998: LD_INT 255
4000: EQUAL
4001: PUSH
4002: LD_VAR 0 2
4006: PPUSH
4007: CALL_OW 264
4011: PUSH
4012: LD_INT 14
4014: PUSH
4015: LD_INT 53
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: IN
4022: AND
4023: PUSH
4024: LD_VAR 0 4
4028: PPUSH
4029: LD_VAR 0 5
4033: PPUSH
4034: CALL_OW 488
4038: AND
4039: IFFALSE 4063
// CutTreeXYR ( unit , x , y , 12 ) ;
4041: LD_VAR 0 2
4045: PPUSH
4046: LD_VAR 0 4
4050: PPUSH
4051: LD_VAR 0 5
4055: PPUSH
4056: LD_INT 12
4058: PPUSH
4059: CALL 4126 0 4
// if cmd = 256 then
4063: LD_VAR 0 1
4067: PUSH
4068: LD_INT 256
4070: EQUAL
4071: IFFALSE 4092
// SetFactoryWaypoint ( unit , x , y ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 4
4082: PPUSH
4083: LD_VAR 0 5
4087: PPUSH
4088: CALL 22023 0 3
// if cmd = 257 then
4092: LD_VAR 0 1
4096: PUSH
4097: LD_INT 257
4099: EQUAL
4100: IFFALSE 4121
// SetWarehouseGatheringPoint ( unit , x , y ) ;
4102: LD_VAR 0 2
4106: PPUSH
4107: LD_VAR 0 4
4111: PPUSH
4112: LD_VAR 0 5
4116: PPUSH
4117: CALL 22385 0 3
// end ;
4121: LD_VAR 0 6
4125: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
4130: PPUSH
4131: PPUSH
4132: PPUSH
4133: PPUSH
4134: PPUSH
4135: PPUSH
4136: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
4137: LD_VAR 0 1
4141: NOT
4142: PUSH
4143: LD_VAR 0 2
4147: PPUSH
4148: LD_VAR 0 3
4152: PPUSH
4153: CALL_OW 488
4157: NOT
4158: OR
4159: PUSH
4160: LD_VAR 0 4
4164: NOT
4165: OR
4166: IFFALSE 4170
// exit ;
4168: GO 4510
// list := [ ] ;
4170: LD_ADDR_VAR 0 13
4174: PUSH
4175: EMPTY
4176: ST_TO_ADDR
// if x - r < 0 then
4177: LD_VAR 0 2
4181: PUSH
4182: LD_VAR 0 4
4186: MINUS
4187: PUSH
4188: LD_INT 0
4190: LESS
4191: IFFALSE 4203
// min_x := 0 else
4193: LD_ADDR_VAR 0 7
4197: PUSH
4198: LD_INT 0
4200: ST_TO_ADDR
4201: GO 4219
// min_x := x - r ;
4203: LD_ADDR_VAR 0 7
4207: PUSH
4208: LD_VAR 0 2
4212: PUSH
4213: LD_VAR 0 4
4217: MINUS
4218: ST_TO_ADDR
// if y - r < 0 then
4219: LD_VAR 0 3
4223: PUSH
4224: LD_VAR 0 4
4228: MINUS
4229: PUSH
4230: LD_INT 0
4232: LESS
4233: IFFALSE 4245
// min_y := 0 else
4235: LD_ADDR_VAR 0 8
4239: PUSH
4240: LD_INT 0
4242: ST_TO_ADDR
4243: GO 4261
// min_y := y - r ;
4245: LD_ADDR_VAR 0 8
4249: PUSH
4250: LD_VAR 0 3
4254: PUSH
4255: LD_VAR 0 4
4259: MINUS
4260: ST_TO_ADDR
// max_x := x + r ;
4261: LD_ADDR_VAR 0 9
4265: PUSH
4266: LD_VAR 0 2
4270: PUSH
4271: LD_VAR 0 4
4275: PLUS
4276: ST_TO_ADDR
// max_y := y + r ;
4277: LD_ADDR_VAR 0 10
4281: PUSH
4282: LD_VAR 0 3
4286: PUSH
4287: LD_VAR 0 4
4291: PLUS
4292: ST_TO_ADDR
// for _x = min_x to max_x do
4293: LD_ADDR_VAR 0 11
4297: PUSH
4298: DOUBLE
4299: LD_VAR 0 7
4303: DEC
4304: ST_TO_ADDR
4305: LD_VAR 0 9
4309: PUSH
4310: FOR_TO
4311: IFFALSE 4428
// for _y = min_y to max_y do
4313: LD_ADDR_VAR 0 12
4317: PUSH
4318: DOUBLE
4319: LD_VAR 0 8
4323: DEC
4324: ST_TO_ADDR
4325: LD_VAR 0 10
4329: PUSH
4330: FOR_TO
4331: IFFALSE 4424
// begin if not ValidHex ( _x , _y ) then
4333: LD_VAR 0 11
4337: PPUSH
4338: LD_VAR 0 12
4342: PPUSH
4343: CALL_OW 488
4347: NOT
4348: IFFALSE 4352
// continue ;
4350: GO 4330
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4352: LD_VAR 0 11
4356: PPUSH
4357: LD_VAR 0 12
4361: PPUSH
4362: CALL_OW 351
4366: PUSH
4367: LD_VAR 0 11
4371: PPUSH
4372: LD_VAR 0 12
4376: PPUSH
4377: CALL_OW 554
4381: AND
4382: IFFALSE 4422
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4384: LD_ADDR_VAR 0 13
4388: PUSH
4389: LD_VAR 0 13
4393: PPUSH
4394: LD_VAR 0 13
4398: PUSH
4399: LD_INT 1
4401: PLUS
4402: PPUSH
4403: LD_VAR 0 11
4407: PUSH
4408: LD_VAR 0 12
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PPUSH
4417: CALL_OW 2
4421: ST_TO_ADDR
// end ;
4422: GO 4330
4424: POP
4425: POP
4426: GO 4310
4428: POP
4429: POP
// if not list then
4430: LD_VAR 0 13
4434: NOT
4435: IFFALSE 4439
// exit ;
4437: GO 4510
// for i in list do
4439: LD_ADDR_VAR 0 6
4443: PUSH
4444: LD_VAR 0 13
4448: PUSH
4449: FOR_IN
4450: IFFALSE 4508
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4452: LD_VAR 0 1
4456: PPUSH
4457: LD_STRING M
4459: PUSH
4460: LD_VAR 0 6
4464: PUSH
4465: LD_INT 1
4467: ARRAY
4468: PUSH
4469: LD_VAR 0 6
4473: PUSH
4474: LD_INT 2
4476: ARRAY
4477: PUSH
4478: LD_INT 0
4480: PUSH
4481: LD_INT 0
4483: PUSH
4484: LD_INT 0
4486: PUSH
4487: LD_INT 0
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: PUSH
4499: EMPTY
4500: LIST
4501: PPUSH
4502: CALL_OW 447
4506: GO 4449
4508: POP
4509: POP
// end ;
4510: LD_VAR 0 5
4514: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
4515: LD_EXP 12
4519: NOT
4520: IFFALSE 4570
4522: GO 4524
4524: DISABLE
// begin initHack := true ;
4525: LD_ADDR_EXP 12
4529: PUSH
4530: LD_INT 1
4532: ST_TO_ADDR
// hackTanks := [ ] ;
4533: LD_ADDR_EXP 13
4537: PUSH
4538: EMPTY
4539: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4540: LD_ADDR_EXP 14
4544: PUSH
4545: EMPTY
4546: ST_TO_ADDR
// hackLimit := 3 ;
4547: LD_ADDR_EXP 15
4551: PUSH
4552: LD_INT 3
4554: ST_TO_ADDR
// hackDist := 12 ;
4555: LD_ADDR_EXP 16
4559: PUSH
4560: LD_INT 12
4562: ST_TO_ADDR
// hackCounter := [ ] ;
4563: LD_ADDR_EXP 17
4567: PUSH
4568: EMPTY
4569: ST_TO_ADDR
// end ;
4570: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
4571: LD_EXP 12
4575: PUSH
4576: LD_INT 34
4578: PUSH
4579: LD_EXP 85
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PPUSH
4588: CALL_OW 69
4592: AND
4593: IFFALSE 4848
4595: GO 4597
4597: DISABLE
4598: LD_INT 0
4600: PPUSH
4601: PPUSH
// begin enable ;
4602: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
4603: LD_ADDR_VAR 0 1
4607: PUSH
4608: LD_INT 34
4610: PUSH
4611: LD_EXP 85
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PPUSH
4620: CALL_OW 69
4624: PUSH
4625: FOR_IN
4626: IFFALSE 4846
// begin if not i in hackTanks then
4628: LD_VAR 0 1
4632: PUSH
4633: LD_EXP 13
4637: IN
4638: NOT
4639: IFFALSE 4722
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
4641: LD_ADDR_EXP 13
4645: PUSH
4646: LD_EXP 13
4650: PPUSH
4651: LD_EXP 13
4655: PUSH
4656: LD_INT 1
4658: PLUS
4659: PPUSH
4660: LD_VAR 0 1
4664: PPUSH
4665: CALL_OW 1
4669: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
4670: LD_ADDR_EXP 14
4674: PUSH
4675: LD_EXP 14
4679: PPUSH
4680: LD_EXP 14
4684: PUSH
4685: LD_INT 1
4687: PLUS
4688: PPUSH
4689: EMPTY
4690: PPUSH
4691: CALL_OW 1
4695: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
4696: LD_ADDR_EXP 17
4700: PUSH
4701: LD_EXP 17
4705: PPUSH
4706: LD_EXP 17
4710: PUSH
4711: LD_INT 1
4713: PLUS
4714: PPUSH
4715: EMPTY
4716: PPUSH
4717: CALL_OW 1
4721: ST_TO_ADDR
// end ; if not IsOk ( i ) then
4722: LD_VAR 0 1
4726: PPUSH
4727: CALL_OW 302
4731: NOT
4732: IFFALSE 4745
// begin HackUnlinkAll ( i ) ;
4734: LD_VAR 0 1
4738: PPUSH
4739: CALL 4851 0 1
// continue ;
4743: GO 4625
// end ; HackCheckCapturedStatus ( i ) ;
4745: LD_VAR 0 1
4749: PPUSH
4750: CALL 5294 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
4754: LD_ADDR_VAR 0 2
4758: PUSH
4759: LD_INT 81
4761: PUSH
4762: LD_VAR 0 1
4766: PPUSH
4767: CALL_OW 255
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 33
4778: PUSH
4779: LD_INT 3
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 91
4788: PUSH
4789: LD_VAR 0 1
4793: PUSH
4794: LD_EXP 16
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: LIST
4803: PUSH
4804: LD_INT 50
4806: PUSH
4807: EMPTY
4808: LIST
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: PPUSH
4816: CALL_OW 69
4820: ST_TO_ADDR
// if not tmp then
4821: LD_VAR 0 2
4825: NOT
4826: IFFALSE 4830
// continue ;
4828: GO 4625
// HackLink ( i , tmp ) ;
4830: LD_VAR 0 1
4834: PPUSH
4835: LD_VAR 0 2
4839: PPUSH
4840: CALL 4987 0 2
// end ;
4844: GO 4625
4846: POP
4847: POP
// end ;
4848: PPOPN 2
4850: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
4851: LD_INT 0
4853: PPUSH
4854: PPUSH
4855: PPUSH
// if not hack in hackTanks then
4856: LD_VAR 0 1
4860: PUSH
4861: LD_EXP 13
4865: IN
4866: NOT
4867: IFFALSE 4871
// exit ;
4869: GO 4982
// index := GetElementIndex ( hackTanks , hack ) ;
4871: LD_ADDR_VAR 0 4
4875: PUSH
4876: LD_EXP 13
4880: PPUSH
4881: LD_VAR 0 1
4885: PPUSH
4886: CALL 28420 0 2
4890: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
4891: LD_EXP 14
4895: PUSH
4896: LD_VAR 0 4
4900: ARRAY
4901: IFFALSE 4982
// begin for i in hackTanksCaptured [ index ] do
4903: LD_ADDR_VAR 0 3
4907: PUSH
4908: LD_EXP 14
4912: PUSH
4913: LD_VAR 0 4
4917: ARRAY
4918: PUSH
4919: FOR_IN
4920: IFFALSE 4946
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
4922: LD_VAR 0 3
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_VAR 0 3
4935: PUSH
4936: LD_INT 2
4938: ARRAY
4939: PPUSH
4940: CALL_OW 235
4944: GO 4919
4946: POP
4947: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
4948: LD_ADDR_EXP 14
4952: PUSH
4953: LD_EXP 14
4957: PPUSH
4958: LD_VAR 0 4
4962: PPUSH
4963: EMPTY
4964: PPUSH
4965: CALL_OW 1
4969: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
4970: LD_VAR 0 1
4974: PPUSH
4975: LD_INT 0
4977: PPUSH
4978: CALL_OW 505
// end ; end ;
4982: LD_VAR 0 2
4986: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
4987: LD_INT 0
4989: PPUSH
4990: PPUSH
4991: PPUSH
// if not hack in hackTanks or not vehicles then
4992: LD_VAR 0 1
4996: PUSH
4997: LD_EXP 13
5001: IN
5002: NOT
5003: PUSH
5004: LD_VAR 0 2
5008: NOT
5009: OR
5010: IFFALSE 5014
// exit ;
5012: GO 5289
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
5014: LD_ADDR_VAR 0 2
5018: PUSH
5019: LD_VAR 0 1
5023: PPUSH
5024: LD_VAR 0 2
5028: PPUSH
5029: LD_INT 1
5031: PPUSH
5032: LD_INT 1
5034: PPUSH
5035: CALL 29070 0 4
5039: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
5040: LD_ADDR_VAR 0 5
5044: PUSH
5045: LD_EXP 13
5049: PPUSH
5050: LD_VAR 0 1
5054: PPUSH
5055: CALL 28420 0 2
5059: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
5060: LD_EXP 14
5064: PUSH
5065: LD_VAR 0 5
5069: ARRAY
5070: PUSH
5071: LD_EXP 15
5075: LESS
5076: IFFALSE 5265
// begin for i := 1 to vehicles do
5078: LD_ADDR_VAR 0 4
5082: PUSH
5083: DOUBLE
5084: LD_INT 1
5086: DEC
5087: ST_TO_ADDR
5088: LD_VAR 0 2
5092: PUSH
5093: FOR_TO
5094: IFFALSE 5263
// begin if hackTanksCaptured [ index ] = hackLimit then
5096: LD_EXP 14
5100: PUSH
5101: LD_VAR 0 5
5105: ARRAY
5106: PUSH
5107: LD_EXP 15
5111: EQUAL
5112: IFFALSE 5116
// break ;
5114: GO 5263
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
5116: LD_ADDR_EXP 17
5120: PUSH
5121: LD_EXP 17
5125: PPUSH
5126: LD_VAR 0 5
5130: PPUSH
5131: LD_EXP 17
5135: PUSH
5136: LD_VAR 0 5
5140: ARRAY
5141: PUSH
5142: LD_INT 1
5144: PLUS
5145: PPUSH
5146: CALL_OW 1
5150: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
5151: LD_ADDR_EXP 14
5155: PUSH
5156: LD_EXP 14
5160: PPUSH
5161: LD_VAR 0 5
5165: PUSH
5166: LD_EXP 14
5170: PUSH
5171: LD_VAR 0 5
5175: ARRAY
5176: PUSH
5177: LD_INT 1
5179: PLUS
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: PPUSH
5185: LD_VAR 0 2
5189: PUSH
5190: LD_VAR 0 4
5194: ARRAY
5195: PUSH
5196: LD_VAR 0 2
5200: PUSH
5201: LD_VAR 0 4
5205: ARRAY
5206: PPUSH
5207: CALL_OW 255
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PPUSH
5216: CALL 28635 0 3
5220: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
5221: LD_VAR 0 2
5225: PUSH
5226: LD_VAR 0 4
5230: ARRAY
5231: PPUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 255
5241: PPUSH
5242: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
5246: LD_VAR 0 2
5250: PUSH
5251: LD_VAR 0 4
5255: ARRAY
5256: PPUSH
5257: CALL_OW 141
// end ;
5261: GO 5093
5263: POP
5264: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5265: LD_VAR 0 1
5269: PPUSH
5270: LD_EXP 14
5274: PUSH
5275: LD_VAR 0 5
5279: ARRAY
5280: PUSH
5281: LD_INT 0
5283: PLUS
5284: PPUSH
5285: CALL_OW 505
// end ;
5289: LD_VAR 0 3
5293: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
5294: LD_INT 0
5296: PPUSH
5297: PPUSH
5298: PPUSH
5299: PPUSH
// if not hack in hackTanks then
5300: LD_VAR 0 1
5304: PUSH
5305: LD_EXP 13
5309: IN
5310: NOT
5311: IFFALSE 5315
// exit ;
5313: GO 5555
// index := GetElementIndex ( hackTanks , hack ) ;
5315: LD_ADDR_VAR 0 4
5319: PUSH
5320: LD_EXP 13
5324: PPUSH
5325: LD_VAR 0 1
5329: PPUSH
5330: CALL 28420 0 2
5334: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
5335: LD_ADDR_VAR 0 3
5339: PUSH
5340: DOUBLE
5341: LD_EXP 14
5345: PUSH
5346: LD_VAR 0 4
5350: ARRAY
5351: INC
5352: ST_TO_ADDR
5353: LD_INT 1
5355: PUSH
5356: FOR_DOWNTO
5357: IFFALSE 5529
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
5359: LD_ADDR_VAR 0 5
5363: PUSH
5364: LD_EXP 14
5368: PUSH
5369: LD_VAR 0 4
5373: ARRAY
5374: PUSH
5375: LD_VAR 0 3
5379: ARRAY
5380: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
5381: LD_VAR 0 5
5385: PUSH
5386: LD_INT 1
5388: ARRAY
5389: PPUSH
5390: CALL_OW 302
5394: NOT
5395: PUSH
5396: LD_VAR 0 5
5400: PUSH
5401: LD_INT 1
5403: ARRAY
5404: PPUSH
5405: CALL_OW 255
5409: PUSH
5410: LD_VAR 0 1
5414: PPUSH
5415: CALL_OW 255
5419: NONEQUAL
5420: OR
5421: IFFALSE 5527
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
5423: LD_VAR 0 5
5427: PUSH
5428: LD_INT 1
5430: ARRAY
5431: PPUSH
5432: CALL_OW 305
5436: PUSH
5437: LD_VAR 0 5
5441: PUSH
5442: LD_INT 1
5444: ARRAY
5445: PPUSH
5446: CALL_OW 255
5450: PUSH
5451: LD_VAR 0 1
5455: PPUSH
5456: CALL_OW 255
5460: EQUAL
5461: AND
5462: IFFALSE 5486
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
5464: LD_VAR 0 5
5468: PUSH
5469: LD_INT 1
5471: ARRAY
5472: PPUSH
5473: LD_VAR 0 5
5477: PUSH
5478: LD_INT 2
5480: ARRAY
5481: PPUSH
5482: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
5486: LD_ADDR_EXP 14
5490: PUSH
5491: LD_EXP 14
5495: PPUSH
5496: LD_VAR 0 4
5500: PPUSH
5501: LD_EXP 14
5505: PUSH
5506: LD_VAR 0 4
5510: ARRAY
5511: PPUSH
5512: LD_VAR 0 3
5516: PPUSH
5517: CALL_OW 3
5521: PPUSH
5522: CALL_OW 1
5526: ST_TO_ADDR
// end ; end ;
5527: GO 5356
5529: POP
5530: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5531: LD_VAR 0 1
5535: PPUSH
5536: LD_EXP 14
5540: PUSH
5541: LD_VAR 0 4
5545: ARRAY
5546: PUSH
5547: LD_INT 0
5549: PLUS
5550: PPUSH
5551: CALL_OW 505
// end ;
5555: LD_VAR 0 2
5559: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
5560: LD_INT 0
5562: PPUSH
5563: PPUSH
5564: PPUSH
5565: PPUSH
// if not hack in hackTanks then
5566: LD_VAR 0 1
5570: PUSH
5571: LD_EXP 13
5575: IN
5576: NOT
5577: IFFALSE 5581
// exit ;
5579: GO 5666
// index := GetElementIndex ( hackTanks , hack ) ;
5581: LD_ADDR_VAR 0 5
5585: PUSH
5586: LD_EXP 13
5590: PPUSH
5591: LD_VAR 0 1
5595: PPUSH
5596: CALL 28420 0 2
5600: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
5601: LD_ADDR_VAR 0 4
5605: PUSH
5606: DOUBLE
5607: LD_INT 1
5609: DEC
5610: ST_TO_ADDR
5611: LD_EXP 14
5615: PUSH
5616: LD_VAR 0 5
5620: ARRAY
5621: PUSH
5622: FOR_TO
5623: IFFALSE 5664
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
5625: LD_EXP 14
5629: PUSH
5630: LD_VAR 0 5
5634: ARRAY
5635: PUSH
5636: LD_VAR 0 4
5640: ARRAY
5641: PUSH
5642: LD_INT 1
5644: ARRAY
5645: PUSH
5646: LD_VAR 0 2
5650: EQUAL
5651: IFFALSE 5662
// KillUnit ( vehicle ) ;
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 66
5662: GO 5622
5664: POP
5665: POP
// end ;
5666: LD_VAR 0 3
5670: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
5671: LD_EXP 18
5675: NOT
5676: IFFALSE 5711
5678: GO 5680
5680: DISABLE
// begin initMiner := true ;
5681: LD_ADDR_EXP 18
5685: PUSH
5686: LD_INT 1
5688: ST_TO_ADDR
// minersList := [ ] ;
5689: LD_ADDR_EXP 19
5693: PUSH
5694: EMPTY
5695: ST_TO_ADDR
// minerMinesList := [ ] ;
5696: LD_ADDR_EXP 20
5700: PUSH
5701: EMPTY
5702: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
5703: LD_ADDR_EXP 21
5707: PUSH
5708: LD_INT 5
5710: ST_TO_ADDR
// end ;
5711: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
5712: LD_EXP 18
5716: PUSH
5717: LD_INT 34
5719: PUSH
5720: LD_EXP 90
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PPUSH
5729: CALL_OW 69
5733: AND
5734: IFFALSE 6197
5736: GO 5738
5738: DISABLE
5739: LD_INT 0
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
// begin enable ;
5745: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: LD_INT 34
5753: PUSH
5754: LD_EXP 90
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: PPUSH
5763: CALL_OW 69
5767: PUSH
5768: FOR_IN
5769: IFFALSE 5841
// begin if not i in minersList then
5771: LD_VAR 0 1
5775: PUSH
5776: LD_EXP 19
5780: IN
5781: NOT
5782: IFFALSE 5839
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
5784: LD_ADDR_EXP 19
5788: PUSH
5789: LD_EXP 19
5793: PPUSH
5794: LD_EXP 19
5798: PUSH
5799: LD_INT 1
5801: PLUS
5802: PPUSH
5803: LD_VAR 0 1
5807: PPUSH
5808: CALL_OW 1
5812: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
5813: LD_ADDR_EXP 20
5817: PUSH
5818: LD_EXP 20
5822: PPUSH
5823: LD_EXP 20
5827: PUSH
5828: LD_INT 1
5830: PLUS
5831: PPUSH
5832: EMPTY
5833: PPUSH
5834: CALL_OW 1
5838: ST_TO_ADDR
// end end ;
5839: GO 5768
5841: POP
5842: POP
// for i := minerMinesList downto 1 do
5843: LD_ADDR_VAR 0 1
5847: PUSH
5848: DOUBLE
5849: LD_EXP 20
5853: INC
5854: ST_TO_ADDR
5855: LD_INT 1
5857: PUSH
5858: FOR_DOWNTO
5859: IFFALSE 6195
// begin if IsLive ( minersList [ i ] ) then
5861: LD_EXP 19
5865: PUSH
5866: LD_VAR 0 1
5870: ARRAY
5871: PPUSH
5872: CALL_OW 300
5876: IFFALSE 5904
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
5878: LD_EXP 19
5882: PUSH
5883: LD_VAR 0 1
5887: ARRAY
5888: PPUSH
5889: LD_EXP 20
5893: PUSH
5894: LD_VAR 0 1
5898: ARRAY
5899: PPUSH
5900: CALL_OW 505
// if not minerMinesList [ i ] then
5904: LD_EXP 20
5908: PUSH
5909: LD_VAR 0 1
5913: ARRAY
5914: NOT
5915: IFFALSE 5919
// continue ;
5917: GO 5858
// for j := minerMinesList [ i ] downto 1 do
5919: LD_ADDR_VAR 0 2
5923: PUSH
5924: DOUBLE
5925: LD_EXP 20
5929: PUSH
5930: LD_VAR 0 1
5934: ARRAY
5935: INC
5936: ST_TO_ADDR
5937: LD_INT 1
5939: PUSH
5940: FOR_DOWNTO
5941: IFFALSE 6191
// begin side := GetSide ( minersList [ i ] ) ;
5943: LD_ADDR_VAR 0 3
5947: PUSH
5948: LD_EXP 19
5952: PUSH
5953: LD_VAR 0 1
5957: ARRAY
5958: PPUSH
5959: CALL_OW 255
5963: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
5964: LD_ADDR_VAR 0 4
5968: PUSH
5969: LD_EXP 20
5973: PUSH
5974: LD_VAR 0 1
5978: ARRAY
5979: PUSH
5980: LD_VAR 0 2
5984: ARRAY
5985: PUSH
5986: LD_INT 1
5988: ARRAY
5989: PPUSH
5990: LD_EXP 20
5994: PUSH
5995: LD_VAR 0 1
5999: ARRAY
6000: PUSH
6001: LD_VAR 0 2
6005: ARRAY
6006: PUSH
6007: LD_INT 2
6009: ARRAY
6010: PPUSH
6011: CALL_OW 428
6015: ST_TO_ADDR
// if not tmp then
6016: LD_VAR 0 4
6020: NOT
6021: IFFALSE 6025
// continue ;
6023: GO 5940
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
6025: LD_VAR 0 4
6029: PUSH
6030: LD_INT 81
6032: PUSH
6033: LD_VAR 0 3
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: PPUSH
6042: CALL_OW 69
6046: IN
6047: PUSH
6048: LD_EXP 20
6052: PUSH
6053: LD_VAR 0 1
6057: ARRAY
6058: PUSH
6059: LD_VAR 0 2
6063: ARRAY
6064: PUSH
6065: LD_INT 1
6067: ARRAY
6068: PPUSH
6069: LD_EXP 20
6073: PUSH
6074: LD_VAR 0 1
6078: ARRAY
6079: PUSH
6080: LD_VAR 0 2
6084: ARRAY
6085: PUSH
6086: LD_INT 2
6088: ARRAY
6089: PPUSH
6090: CALL_OW 458
6094: AND
6095: IFFALSE 6189
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
6097: LD_EXP 20
6101: PUSH
6102: LD_VAR 0 1
6106: ARRAY
6107: PUSH
6108: LD_VAR 0 2
6112: ARRAY
6113: PUSH
6114: LD_INT 1
6116: ARRAY
6117: PPUSH
6118: LD_EXP 20
6122: PUSH
6123: LD_VAR 0 1
6127: ARRAY
6128: PUSH
6129: LD_VAR 0 2
6133: ARRAY
6134: PUSH
6135: LD_INT 2
6137: ARRAY
6138: PPUSH
6139: LD_VAR 0 3
6143: PPUSH
6144: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
6148: LD_ADDR_EXP 20
6152: PUSH
6153: LD_EXP 20
6157: PPUSH
6158: LD_VAR 0 1
6162: PPUSH
6163: LD_EXP 20
6167: PUSH
6168: LD_VAR 0 1
6172: ARRAY
6173: PPUSH
6174: LD_VAR 0 2
6178: PPUSH
6179: CALL_OW 3
6183: PPUSH
6184: CALL_OW 1
6188: ST_TO_ADDR
// end ; end ;
6189: GO 5940
6191: POP
6192: POP
// end ;
6193: GO 5858
6195: POP
6196: POP
// end ;
6197: PPOPN 4
6199: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
6200: LD_INT 0
6202: PPUSH
6203: PPUSH
// result := false ;
6204: LD_ADDR_VAR 0 4
6208: PUSH
6209: LD_INT 0
6211: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
6212: LD_VAR 0 1
6216: PPUSH
6217: CALL_OW 264
6221: PUSH
6222: LD_EXP 90
6226: EQUAL
6227: NOT
6228: IFFALSE 6232
// exit ;
6230: GO 6472
// index := GetElementIndex ( minersList , unit ) ;
6232: LD_ADDR_VAR 0 5
6236: PUSH
6237: LD_EXP 19
6241: PPUSH
6242: LD_VAR 0 1
6246: PPUSH
6247: CALL 28420 0 2
6251: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
6252: LD_EXP 20
6256: PUSH
6257: LD_VAR 0 5
6261: ARRAY
6262: PUSH
6263: LD_EXP 21
6267: GREATEREQUAL
6268: IFFALSE 6272
// exit ;
6270: GO 6472
// ComMoveXY ( unit , x , y ) ;
6272: LD_VAR 0 1
6276: PPUSH
6277: LD_VAR 0 2
6281: PPUSH
6282: LD_VAR 0 3
6286: PPUSH
6287: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6291: LD_INT 35
6293: PPUSH
6294: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
6298: LD_VAR 0 1
6302: PPUSH
6303: LD_VAR 0 2
6307: PPUSH
6308: LD_VAR 0 3
6312: PPUSH
6313: CALL 59706 0 3
6317: NOT
6318: PUSH
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 314
6328: AND
6329: IFFALSE 6333
// exit ;
6331: GO 6472
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
6333: LD_VAR 0 2
6337: PPUSH
6338: LD_VAR 0 3
6342: PPUSH
6343: CALL_OW 428
6347: PUSH
6348: LD_VAR 0 1
6352: EQUAL
6353: PUSH
6354: LD_VAR 0 1
6358: PPUSH
6359: CALL_OW 314
6363: NOT
6364: AND
6365: IFFALSE 6291
// PlaySoundXY ( x , y , PlantMine ) ;
6367: LD_VAR 0 2
6371: PPUSH
6372: LD_VAR 0 3
6376: PPUSH
6377: LD_STRING PlantMine
6379: PPUSH
6380: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
6384: LD_VAR 0 2
6388: PPUSH
6389: LD_VAR 0 3
6393: PPUSH
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 255
6403: PPUSH
6404: LD_INT 0
6406: PPUSH
6407: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
6411: LD_ADDR_EXP 20
6415: PUSH
6416: LD_EXP 20
6420: PPUSH
6421: LD_VAR 0 5
6425: PUSH
6426: LD_EXP 20
6430: PUSH
6431: LD_VAR 0 5
6435: ARRAY
6436: PUSH
6437: LD_INT 1
6439: PLUS
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PPUSH
6445: LD_VAR 0 2
6449: PUSH
6450: LD_VAR 0 3
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PPUSH
6459: CALL 28635 0 3
6463: ST_TO_ADDR
// result := true ;
6464: LD_ADDR_VAR 0 4
6468: PUSH
6469: LD_INT 1
6471: ST_TO_ADDR
// end ;
6472: LD_VAR 0 4
6476: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
6477: LD_INT 0
6479: PPUSH
6480: PPUSH
6481: PPUSH
// if not unit in minersList then
6482: LD_VAR 0 1
6486: PUSH
6487: LD_EXP 19
6491: IN
6492: NOT
6493: IFFALSE 6497
// exit ;
6495: GO 6889
// index := GetElementIndex ( minersList , unit ) ;
6497: LD_ADDR_VAR 0 6
6501: PUSH
6502: LD_EXP 19
6506: PPUSH
6507: LD_VAR 0 1
6511: PPUSH
6512: CALL 28420 0 2
6516: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
6517: LD_ADDR_VAR 0 5
6521: PUSH
6522: DOUBLE
6523: LD_EXP 20
6527: PUSH
6528: LD_VAR 0 6
6532: ARRAY
6533: INC
6534: ST_TO_ADDR
6535: LD_INT 1
6537: PUSH
6538: FOR_DOWNTO
6539: IFFALSE 6700
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
6541: LD_EXP 20
6545: PUSH
6546: LD_VAR 0 6
6550: ARRAY
6551: PUSH
6552: LD_VAR 0 5
6556: ARRAY
6557: PUSH
6558: LD_INT 1
6560: ARRAY
6561: PUSH
6562: LD_VAR 0 2
6566: EQUAL
6567: PUSH
6568: LD_EXP 20
6572: PUSH
6573: LD_VAR 0 6
6577: ARRAY
6578: PUSH
6579: LD_VAR 0 5
6583: ARRAY
6584: PUSH
6585: LD_INT 2
6587: ARRAY
6588: PUSH
6589: LD_VAR 0 3
6593: EQUAL
6594: AND
6595: IFFALSE 6698
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6597: LD_EXP 20
6601: PUSH
6602: LD_VAR 0 6
6606: ARRAY
6607: PUSH
6608: LD_VAR 0 5
6612: ARRAY
6613: PUSH
6614: LD_INT 1
6616: ARRAY
6617: PPUSH
6618: LD_EXP 20
6622: PUSH
6623: LD_VAR 0 6
6627: ARRAY
6628: PUSH
6629: LD_VAR 0 5
6633: ARRAY
6634: PUSH
6635: LD_INT 2
6637: ARRAY
6638: PPUSH
6639: LD_VAR 0 1
6643: PPUSH
6644: CALL_OW 255
6648: PPUSH
6649: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6653: LD_ADDR_EXP 20
6657: PUSH
6658: LD_EXP 20
6662: PPUSH
6663: LD_VAR 0 6
6667: PPUSH
6668: LD_EXP 20
6672: PUSH
6673: LD_VAR 0 6
6677: ARRAY
6678: PPUSH
6679: LD_VAR 0 5
6683: PPUSH
6684: CALL_OW 3
6688: PPUSH
6689: CALL_OW 1
6693: ST_TO_ADDR
// exit ;
6694: POP
6695: POP
6696: GO 6889
// end ; end ;
6698: GO 6538
6700: POP
6701: POP
// for i := minerMinesList [ index ] downto 1 do
6702: LD_ADDR_VAR 0 5
6706: PUSH
6707: DOUBLE
6708: LD_EXP 20
6712: PUSH
6713: LD_VAR 0 6
6717: ARRAY
6718: INC
6719: ST_TO_ADDR
6720: LD_INT 1
6722: PUSH
6723: FOR_DOWNTO
6724: IFFALSE 6887
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
6726: LD_EXP 20
6730: PUSH
6731: LD_VAR 0 6
6735: ARRAY
6736: PUSH
6737: LD_VAR 0 5
6741: ARRAY
6742: PUSH
6743: LD_INT 1
6745: ARRAY
6746: PPUSH
6747: LD_EXP 20
6751: PUSH
6752: LD_VAR 0 6
6756: ARRAY
6757: PUSH
6758: LD_VAR 0 5
6762: ARRAY
6763: PUSH
6764: LD_INT 2
6766: ARRAY
6767: PPUSH
6768: LD_VAR 0 2
6772: PPUSH
6773: LD_VAR 0 3
6777: PPUSH
6778: CALL_OW 298
6782: PUSH
6783: LD_INT 6
6785: LESS
6786: IFFALSE 6885
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6788: LD_EXP 20
6792: PUSH
6793: LD_VAR 0 6
6797: ARRAY
6798: PUSH
6799: LD_VAR 0 5
6803: ARRAY
6804: PUSH
6805: LD_INT 1
6807: ARRAY
6808: PPUSH
6809: LD_EXP 20
6813: PUSH
6814: LD_VAR 0 6
6818: ARRAY
6819: PUSH
6820: LD_VAR 0 5
6824: ARRAY
6825: PUSH
6826: LD_INT 2
6828: ARRAY
6829: PPUSH
6830: LD_VAR 0 1
6834: PPUSH
6835: CALL_OW 255
6839: PPUSH
6840: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6844: LD_ADDR_EXP 20
6848: PUSH
6849: LD_EXP 20
6853: PPUSH
6854: LD_VAR 0 6
6858: PPUSH
6859: LD_EXP 20
6863: PUSH
6864: LD_VAR 0 6
6868: ARRAY
6869: PPUSH
6870: LD_VAR 0 5
6874: PPUSH
6875: CALL_OW 3
6879: PPUSH
6880: CALL_OW 1
6884: ST_TO_ADDR
// end ; end ;
6885: GO 6723
6887: POP
6888: POP
// end ;
6889: LD_VAR 0 4
6893: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
6894: LD_INT 0
6896: PPUSH
6897: PPUSH
6898: PPUSH
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
6905: LD_VAR 0 1
6909: PPUSH
6910: CALL_OW 264
6914: PUSH
6915: LD_EXP 90
6919: EQUAL
6920: NOT
6921: PUSH
6922: LD_VAR 0 1
6926: PUSH
6927: LD_EXP 19
6931: IN
6932: NOT
6933: OR
6934: IFFALSE 6938
// exit ;
6936: GO 7260
// index := GetElementIndex ( minersList , unit ) ;
6938: LD_ADDR_VAR 0 6
6942: PUSH
6943: LD_EXP 19
6947: PPUSH
6948: LD_VAR 0 1
6952: PPUSH
6953: CALL 28420 0 2
6957: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
6958: LD_ADDR_VAR 0 8
6962: PUSH
6963: LD_EXP 21
6967: PUSH
6968: LD_EXP 20
6972: PUSH
6973: LD_VAR 0 6
6977: ARRAY
6978: MINUS
6979: ST_TO_ADDR
// if not minesFreeAmount then
6980: LD_VAR 0 8
6984: NOT
6985: IFFALSE 6989
// exit ;
6987: GO 7260
// tmp := [ ] ;
6989: LD_ADDR_VAR 0 7
6993: PUSH
6994: EMPTY
6995: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
6996: LD_ADDR_VAR 0 5
7000: PUSH
7001: DOUBLE
7002: LD_INT 1
7004: DEC
7005: ST_TO_ADDR
7006: LD_VAR 0 8
7010: PUSH
7011: FOR_TO
7012: IFFALSE 7207
// begin _d := rand ( 0 , 5 ) ;
7014: LD_ADDR_VAR 0 11
7018: PUSH
7019: LD_INT 0
7021: PPUSH
7022: LD_INT 5
7024: PPUSH
7025: CALL_OW 12
7029: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
7030: LD_ADDR_VAR 0 12
7034: PUSH
7035: LD_INT 2
7037: PPUSH
7038: LD_INT 6
7040: PPUSH
7041: CALL_OW 12
7045: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
7046: LD_ADDR_VAR 0 9
7050: PUSH
7051: LD_VAR 0 2
7055: PPUSH
7056: LD_VAR 0 11
7060: PPUSH
7061: LD_VAR 0 12
7065: PPUSH
7066: CALL_OW 272
7070: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
7071: LD_ADDR_VAR 0 10
7075: PUSH
7076: LD_VAR 0 3
7080: PPUSH
7081: LD_VAR 0 11
7085: PPUSH
7086: LD_VAR 0 12
7090: PPUSH
7091: CALL_OW 273
7095: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
7096: LD_VAR 0 9
7100: PPUSH
7101: LD_VAR 0 10
7105: PPUSH
7106: CALL_OW 488
7110: PUSH
7111: LD_VAR 0 9
7115: PUSH
7116: LD_VAR 0 10
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_VAR 0 7
7129: IN
7130: NOT
7131: AND
7132: PUSH
7133: LD_VAR 0 9
7137: PPUSH
7138: LD_VAR 0 10
7142: PPUSH
7143: CALL_OW 458
7147: NOT
7148: AND
7149: IFFALSE 7191
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
7151: LD_ADDR_VAR 0 7
7155: PUSH
7156: LD_VAR 0 7
7160: PPUSH
7161: LD_VAR 0 7
7165: PUSH
7166: LD_INT 1
7168: PLUS
7169: PPUSH
7170: LD_VAR 0 9
7174: PUSH
7175: LD_VAR 0 10
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 1
7188: ST_TO_ADDR
7189: GO 7205
// i := i - 1 ;
7191: LD_ADDR_VAR 0 5
7195: PUSH
7196: LD_VAR 0 5
7200: PUSH
7201: LD_INT 1
7203: MINUS
7204: ST_TO_ADDR
// end ;
7205: GO 7011
7207: POP
7208: POP
// for i in tmp do
7209: LD_ADDR_VAR 0 5
7213: PUSH
7214: LD_VAR 0 7
7218: PUSH
7219: FOR_IN
7220: IFFALSE 7258
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
7222: LD_VAR 0 1
7226: PPUSH
7227: LD_VAR 0 5
7231: PUSH
7232: LD_INT 1
7234: ARRAY
7235: PPUSH
7236: LD_VAR 0 5
7240: PUSH
7241: LD_INT 2
7243: ARRAY
7244: PPUSH
7245: CALL 6200 0 3
7249: NOT
7250: IFFALSE 7256
// exit ;
7252: POP
7253: POP
7254: GO 7260
7256: GO 7219
7258: POP
7259: POP
// end ;
7260: LD_VAR 0 4
7264: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
7265: LD_INT 0
7267: PPUSH
7268: PPUSH
7269: PPUSH
7270: PPUSH
7271: PPUSH
7272: PPUSH
7273: PPUSH
// if not GetClass ( unit ) = class_sniper then
7274: LD_VAR 0 1
7278: PPUSH
7279: CALL_OW 257
7283: PUSH
7284: LD_INT 5
7286: EQUAL
7287: NOT
7288: IFFALSE 7292
// exit ;
7290: GO 7680
// dist := 8 ;
7292: LD_ADDR_VAR 0 5
7296: PUSH
7297: LD_INT 8
7299: ST_TO_ADDR
// viewRange := 12 ;
7300: LD_ADDR_VAR 0 7
7304: PUSH
7305: LD_INT 12
7307: ST_TO_ADDR
// side := GetSide ( unit ) ;
7308: LD_ADDR_VAR 0 6
7312: PUSH
7313: LD_VAR 0 1
7317: PPUSH
7318: CALL_OW 255
7322: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
7323: LD_INT 61
7325: PPUSH
7326: LD_VAR 0 6
7330: PPUSH
7331: CALL_OW 321
7335: PUSH
7336: LD_INT 2
7338: EQUAL
7339: IFFALSE 7349
// viewRange := 16 ;
7341: LD_ADDR_VAR 0 7
7345: PUSH
7346: LD_INT 16
7348: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
7349: LD_VAR 0 1
7353: PPUSH
7354: LD_VAR 0 2
7358: PPUSH
7359: LD_VAR 0 3
7363: PPUSH
7364: CALL_OW 297
7368: PUSH
7369: LD_VAR 0 5
7373: GREATER
7374: IFFALSE 7453
// begin ComMoveXY ( unit , x , y ) ;
7376: LD_VAR 0 1
7380: PPUSH
7381: LD_VAR 0 2
7385: PPUSH
7386: LD_VAR 0 3
7390: PPUSH
7391: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7395: LD_INT 35
7397: PPUSH
7398: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
7402: LD_VAR 0 1
7406: PPUSH
7407: LD_VAR 0 2
7411: PPUSH
7412: LD_VAR 0 3
7416: PPUSH
7417: CALL 59706 0 3
7421: NOT
7422: IFFALSE 7426
// exit ;
7424: GO 7680
// until GetDistUnitXY ( unit , x , y ) < dist ;
7426: LD_VAR 0 1
7430: PPUSH
7431: LD_VAR 0 2
7435: PPUSH
7436: LD_VAR 0 3
7440: PPUSH
7441: CALL_OW 297
7445: PUSH
7446: LD_VAR 0 5
7450: LESS
7451: IFFALSE 7395
// end ; ComTurnXY ( unit , x , y ) ;
7453: LD_VAR 0 1
7457: PPUSH
7458: LD_VAR 0 2
7462: PPUSH
7463: LD_VAR 0 3
7467: PPUSH
7468: CALL_OW 118
// wait ( 5 ) ;
7472: LD_INT 5
7474: PPUSH
7475: CALL_OW 67
// _d := GetDir ( unit ) ;
7479: LD_ADDR_VAR 0 10
7483: PUSH
7484: LD_VAR 0 1
7488: PPUSH
7489: CALL_OW 254
7493: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
7494: LD_ADDR_VAR 0 8
7498: PUSH
7499: LD_VAR 0 1
7503: PPUSH
7504: CALL_OW 250
7508: PPUSH
7509: LD_VAR 0 10
7513: PPUSH
7514: LD_VAR 0 5
7518: PPUSH
7519: CALL_OW 272
7523: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
7524: LD_ADDR_VAR 0 9
7528: PUSH
7529: LD_VAR 0 1
7533: PPUSH
7534: CALL_OW 251
7538: PPUSH
7539: LD_VAR 0 10
7543: PPUSH
7544: LD_VAR 0 5
7548: PPUSH
7549: CALL_OW 273
7553: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7554: LD_VAR 0 8
7558: PPUSH
7559: LD_VAR 0 9
7563: PPUSH
7564: CALL_OW 488
7568: NOT
7569: IFFALSE 7573
// exit ;
7571: GO 7680
// ComAnimCustom ( unit , 1 ) ;
7573: LD_VAR 0 1
7577: PPUSH
7578: LD_INT 1
7580: PPUSH
7581: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
7585: LD_VAR 0 8
7589: PPUSH
7590: LD_VAR 0 9
7594: PPUSH
7595: LD_VAR 0 6
7599: PPUSH
7600: LD_VAR 0 7
7604: PPUSH
7605: CALL_OW 330
// repeat wait ( 1 ) ;
7609: LD_INT 1
7611: PPUSH
7612: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
7616: LD_VAR 0 1
7620: PPUSH
7621: CALL_OW 316
7625: PUSH
7626: LD_VAR 0 1
7630: PPUSH
7631: CALL_OW 314
7635: OR
7636: PUSH
7637: LD_VAR 0 1
7641: PPUSH
7642: CALL_OW 302
7646: NOT
7647: OR
7648: PUSH
7649: LD_VAR 0 1
7653: PPUSH
7654: CALL_OW 301
7658: OR
7659: IFFALSE 7609
// RemoveSeeing ( _x , _y , side ) ;
7661: LD_VAR 0 8
7665: PPUSH
7666: LD_VAR 0 9
7670: PPUSH
7671: LD_VAR 0 6
7675: PPUSH
7676: CALL_OW 331
// end ; end_of_file
7680: LD_VAR 0 4
7684: RET
// every 0 0$1 do
7685: GO 7687
7687: DISABLE
// begin enable ;
7688: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7689: LD_STRING updateTimer(
7691: PUSH
7692: LD_OWVAR 1
7696: STR
7697: PUSH
7698: LD_STRING );
7700: STR
7701: PPUSH
7702: CALL_OW 559
// end ;
7706: END
// export function SOS_MapStart ( ) ; begin
7707: LD_INT 0
7709: PPUSH
// if streamModeActive then
7710: LD_EXP 22
7714: IFFALSE 7723
// DefineStreamItems ( true ) ;
7716: LD_INT 1
7718: PPUSH
7719: CALL 9377 0 1
// UpdateFactoryWaypoints ( ) ;
7723: CALL 22238 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7727: CALL 22495 0 0
// end ;
7731: LD_VAR 0 1
7735: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7736: LD_INT 0
7738: PPUSH
// if p2 = 100 then
7739: LD_VAR 0 2
7743: PUSH
7744: LD_INT 100
7746: EQUAL
7747: IFFALSE 8750
// begin if not StreamModeActive then
7749: LD_EXP 22
7753: NOT
7754: IFFALSE 7764
// StreamModeActive := true ;
7756: LD_ADDR_EXP 22
7760: PUSH
7761: LD_INT 1
7763: ST_TO_ADDR
// if p3 = 0 then
7764: LD_VAR 0 3
7768: PUSH
7769: LD_INT 0
7771: EQUAL
7772: IFFALSE 7778
// InitStreamMode ;
7774: CALL 8913 0 0
// if p3 = 1 then
7778: LD_VAR 0 3
7782: PUSH
7783: LD_INT 1
7785: EQUAL
7786: IFFALSE 7796
// sRocket := true ;
7788: LD_ADDR_EXP 27
7792: PUSH
7793: LD_INT 1
7795: ST_TO_ADDR
// if p3 = 2 then
7796: LD_VAR 0 3
7800: PUSH
7801: LD_INT 2
7803: EQUAL
7804: IFFALSE 7814
// sSpeed := true ;
7806: LD_ADDR_EXP 26
7810: PUSH
7811: LD_INT 1
7813: ST_TO_ADDR
// if p3 = 3 then
7814: LD_VAR 0 3
7818: PUSH
7819: LD_INT 3
7821: EQUAL
7822: IFFALSE 7832
// sEngine := true ;
7824: LD_ADDR_EXP 28
7828: PUSH
7829: LD_INT 1
7831: ST_TO_ADDR
// if p3 = 4 then
7832: LD_VAR 0 3
7836: PUSH
7837: LD_INT 4
7839: EQUAL
7840: IFFALSE 7850
// sSpec := true ;
7842: LD_ADDR_EXP 25
7846: PUSH
7847: LD_INT 1
7849: ST_TO_ADDR
// if p3 = 5 then
7850: LD_VAR 0 3
7854: PUSH
7855: LD_INT 5
7857: EQUAL
7858: IFFALSE 7868
// sLevel := true ;
7860: LD_ADDR_EXP 29
7864: PUSH
7865: LD_INT 1
7867: ST_TO_ADDR
// if p3 = 6 then
7868: LD_VAR 0 3
7872: PUSH
7873: LD_INT 6
7875: EQUAL
7876: IFFALSE 7886
// sArmoury := true ;
7878: LD_ADDR_EXP 30
7882: PUSH
7883: LD_INT 1
7885: ST_TO_ADDR
// if p3 = 7 then
7886: LD_VAR 0 3
7890: PUSH
7891: LD_INT 7
7893: EQUAL
7894: IFFALSE 7904
// sRadar := true ;
7896: LD_ADDR_EXP 31
7900: PUSH
7901: LD_INT 1
7903: ST_TO_ADDR
// if p3 = 8 then
7904: LD_VAR 0 3
7908: PUSH
7909: LD_INT 8
7911: EQUAL
7912: IFFALSE 7922
// sBunker := true ;
7914: LD_ADDR_EXP 32
7918: PUSH
7919: LD_INT 1
7921: ST_TO_ADDR
// if p3 = 9 then
7922: LD_VAR 0 3
7926: PUSH
7927: LD_INT 9
7929: EQUAL
7930: IFFALSE 7940
// sHack := true ;
7932: LD_ADDR_EXP 33
7936: PUSH
7937: LD_INT 1
7939: ST_TO_ADDR
// if p3 = 10 then
7940: LD_VAR 0 3
7944: PUSH
7945: LD_INT 10
7947: EQUAL
7948: IFFALSE 7958
// sFire := true ;
7950: LD_ADDR_EXP 34
7954: PUSH
7955: LD_INT 1
7957: ST_TO_ADDR
// if p3 = 11 then
7958: LD_VAR 0 3
7962: PUSH
7963: LD_INT 11
7965: EQUAL
7966: IFFALSE 7976
// sRefresh := true ;
7968: LD_ADDR_EXP 35
7972: PUSH
7973: LD_INT 1
7975: ST_TO_ADDR
// if p3 = 12 then
7976: LD_VAR 0 3
7980: PUSH
7981: LD_INT 12
7983: EQUAL
7984: IFFALSE 7994
// sExp := true ;
7986: LD_ADDR_EXP 36
7990: PUSH
7991: LD_INT 1
7993: ST_TO_ADDR
// if p3 = 13 then
7994: LD_VAR 0 3
7998: PUSH
7999: LD_INT 13
8001: EQUAL
8002: IFFALSE 8012
// sDepot := true ;
8004: LD_ADDR_EXP 37
8008: PUSH
8009: LD_INT 1
8011: ST_TO_ADDR
// if p3 = 14 then
8012: LD_VAR 0 3
8016: PUSH
8017: LD_INT 14
8019: EQUAL
8020: IFFALSE 8030
// sFlag := true ;
8022: LD_ADDR_EXP 38
8026: PUSH
8027: LD_INT 1
8029: ST_TO_ADDR
// if p3 = 15 then
8030: LD_VAR 0 3
8034: PUSH
8035: LD_INT 15
8037: EQUAL
8038: IFFALSE 8048
// sKamikadze := true ;
8040: LD_ADDR_EXP 46
8044: PUSH
8045: LD_INT 1
8047: ST_TO_ADDR
// if p3 = 16 then
8048: LD_VAR 0 3
8052: PUSH
8053: LD_INT 16
8055: EQUAL
8056: IFFALSE 8066
// sTroll := true ;
8058: LD_ADDR_EXP 47
8062: PUSH
8063: LD_INT 1
8065: ST_TO_ADDR
// if p3 = 17 then
8066: LD_VAR 0 3
8070: PUSH
8071: LD_INT 17
8073: EQUAL
8074: IFFALSE 8084
// sSlow := true ;
8076: LD_ADDR_EXP 48
8080: PUSH
8081: LD_INT 1
8083: ST_TO_ADDR
// if p3 = 18 then
8084: LD_VAR 0 3
8088: PUSH
8089: LD_INT 18
8091: EQUAL
8092: IFFALSE 8102
// sLack := true ;
8094: LD_ADDR_EXP 49
8098: PUSH
8099: LD_INT 1
8101: ST_TO_ADDR
// if p3 = 19 then
8102: LD_VAR 0 3
8106: PUSH
8107: LD_INT 19
8109: EQUAL
8110: IFFALSE 8120
// sTank := true ;
8112: LD_ADDR_EXP 51
8116: PUSH
8117: LD_INT 1
8119: ST_TO_ADDR
// if p3 = 20 then
8120: LD_VAR 0 3
8124: PUSH
8125: LD_INT 20
8127: EQUAL
8128: IFFALSE 8138
// sRemote := true ;
8130: LD_ADDR_EXP 52
8134: PUSH
8135: LD_INT 1
8137: ST_TO_ADDR
// if p3 = 21 then
8138: LD_VAR 0 3
8142: PUSH
8143: LD_INT 21
8145: EQUAL
8146: IFFALSE 8156
// sPowell := true ;
8148: LD_ADDR_EXP 53
8152: PUSH
8153: LD_INT 1
8155: ST_TO_ADDR
// if p3 = 22 then
8156: LD_VAR 0 3
8160: PUSH
8161: LD_INT 22
8163: EQUAL
8164: IFFALSE 8174
// sTeleport := true ;
8166: LD_ADDR_EXP 56
8170: PUSH
8171: LD_INT 1
8173: ST_TO_ADDR
// if p3 = 23 then
8174: LD_VAR 0 3
8178: PUSH
8179: LD_INT 23
8181: EQUAL
8182: IFFALSE 8192
// sOilTower := true ;
8184: LD_ADDR_EXP 58
8188: PUSH
8189: LD_INT 1
8191: ST_TO_ADDR
// if p3 = 24 then
8192: LD_VAR 0 3
8196: PUSH
8197: LD_INT 24
8199: EQUAL
8200: IFFALSE 8210
// sShovel := true ;
8202: LD_ADDR_EXP 59
8206: PUSH
8207: LD_INT 1
8209: ST_TO_ADDR
// if p3 = 25 then
8210: LD_VAR 0 3
8214: PUSH
8215: LD_INT 25
8217: EQUAL
8218: IFFALSE 8228
// sSheik := true ;
8220: LD_ADDR_EXP 60
8224: PUSH
8225: LD_INT 1
8227: ST_TO_ADDR
// if p3 = 26 then
8228: LD_VAR 0 3
8232: PUSH
8233: LD_INT 26
8235: EQUAL
8236: IFFALSE 8246
// sEarthquake := true ;
8238: LD_ADDR_EXP 62
8242: PUSH
8243: LD_INT 1
8245: ST_TO_ADDR
// if p3 = 27 then
8246: LD_VAR 0 3
8250: PUSH
8251: LD_INT 27
8253: EQUAL
8254: IFFALSE 8264
// sAI := true ;
8256: LD_ADDR_EXP 63
8260: PUSH
8261: LD_INT 1
8263: ST_TO_ADDR
// if p3 = 28 then
8264: LD_VAR 0 3
8268: PUSH
8269: LD_INT 28
8271: EQUAL
8272: IFFALSE 8282
// sCargo := true ;
8274: LD_ADDR_EXP 66
8278: PUSH
8279: LD_INT 1
8281: ST_TO_ADDR
// if p3 = 29 then
8282: LD_VAR 0 3
8286: PUSH
8287: LD_INT 29
8289: EQUAL
8290: IFFALSE 8300
// sDLaser := true ;
8292: LD_ADDR_EXP 67
8296: PUSH
8297: LD_INT 1
8299: ST_TO_ADDR
// if p3 = 30 then
8300: LD_VAR 0 3
8304: PUSH
8305: LD_INT 30
8307: EQUAL
8308: IFFALSE 8318
// sExchange := true ;
8310: LD_ADDR_EXP 68
8314: PUSH
8315: LD_INT 1
8317: ST_TO_ADDR
// if p3 = 31 then
8318: LD_VAR 0 3
8322: PUSH
8323: LD_INT 31
8325: EQUAL
8326: IFFALSE 8336
// sFac := true ;
8328: LD_ADDR_EXP 69
8332: PUSH
8333: LD_INT 1
8335: ST_TO_ADDR
// if p3 = 32 then
8336: LD_VAR 0 3
8340: PUSH
8341: LD_INT 32
8343: EQUAL
8344: IFFALSE 8354
// sPower := true ;
8346: LD_ADDR_EXP 70
8350: PUSH
8351: LD_INT 1
8353: ST_TO_ADDR
// if p3 = 33 then
8354: LD_VAR 0 3
8358: PUSH
8359: LD_INT 33
8361: EQUAL
8362: IFFALSE 8372
// sRandom := true ;
8364: LD_ADDR_EXP 71
8368: PUSH
8369: LD_INT 1
8371: ST_TO_ADDR
// if p3 = 34 then
8372: LD_VAR 0 3
8376: PUSH
8377: LD_INT 34
8379: EQUAL
8380: IFFALSE 8390
// sShield := true ;
8382: LD_ADDR_EXP 72
8386: PUSH
8387: LD_INT 1
8389: ST_TO_ADDR
// if p3 = 35 then
8390: LD_VAR 0 3
8394: PUSH
8395: LD_INT 35
8397: EQUAL
8398: IFFALSE 8408
// sTime := true ;
8400: LD_ADDR_EXP 73
8404: PUSH
8405: LD_INT 1
8407: ST_TO_ADDR
// if p3 = 36 then
8408: LD_VAR 0 3
8412: PUSH
8413: LD_INT 36
8415: EQUAL
8416: IFFALSE 8426
// sTools := true ;
8418: LD_ADDR_EXP 74
8422: PUSH
8423: LD_INT 1
8425: ST_TO_ADDR
// if p3 = 101 then
8426: LD_VAR 0 3
8430: PUSH
8431: LD_INT 101
8433: EQUAL
8434: IFFALSE 8444
// sSold := true ;
8436: LD_ADDR_EXP 39
8440: PUSH
8441: LD_INT 1
8443: ST_TO_ADDR
// if p3 = 102 then
8444: LD_VAR 0 3
8448: PUSH
8449: LD_INT 102
8451: EQUAL
8452: IFFALSE 8462
// sDiff := true ;
8454: LD_ADDR_EXP 40
8458: PUSH
8459: LD_INT 1
8461: ST_TO_ADDR
// if p3 = 103 then
8462: LD_VAR 0 3
8466: PUSH
8467: LD_INT 103
8469: EQUAL
8470: IFFALSE 8480
// sFog := true ;
8472: LD_ADDR_EXP 43
8476: PUSH
8477: LD_INT 1
8479: ST_TO_ADDR
// if p3 = 104 then
8480: LD_VAR 0 3
8484: PUSH
8485: LD_INT 104
8487: EQUAL
8488: IFFALSE 8498
// sReset := true ;
8490: LD_ADDR_EXP 44
8494: PUSH
8495: LD_INT 1
8497: ST_TO_ADDR
// if p3 = 105 then
8498: LD_VAR 0 3
8502: PUSH
8503: LD_INT 105
8505: EQUAL
8506: IFFALSE 8516
// sSun := true ;
8508: LD_ADDR_EXP 45
8512: PUSH
8513: LD_INT 1
8515: ST_TO_ADDR
// if p3 = 106 then
8516: LD_VAR 0 3
8520: PUSH
8521: LD_INT 106
8523: EQUAL
8524: IFFALSE 8534
// sTiger := true ;
8526: LD_ADDR_EXP 41
8530: PUSH
8531: LD_INT 1
8533: ST_TO_ADDR
// if p3 = 107 then
8534: LD_VAR 0 3
8538: PUSH
8539: LD_INT 107
8541: EQUAL
8542: IFFALSE 8552
// sBomb := true ;
8544: LD_ADDR_EXP 42
8548: PUSH
8549: LD_INT 1
8551: ST_TO_ADDR
// if p3 = 108 then
8552: LD_VAR 0 3
8556: PUSH
8557: LD_INT 108
8559: EQUAL
8560: IFFALSE 8570
// sWound := true ;
8562: LD_ADDR_EXP 50
8566: PUSH
8567: LD_INT 1
8569: ST_TO_ADDR
// if p3 = 109 then
8570: LD_VAR 0 3
8574: PUSH
8575: LD_INT 109
8577: EQUAL
8578: IFFALSE 8588
// sBetray := true ;
8580: LD_ADDR_EXP 54
8584: PUSH
8585: LD_INT 1
8587: ST_TO_ADDR
// if p3 = 110 then
8588: LD_VAR 0 3
8592: PUSH
8593: LD_INT 110
8595: EQUAL
8596: IFFALSE 8606
// sContamin := true ;
8598: LD_ADDR_EXP 55
8602: PUSH
8603: LD_INT 1
8605: ST_TO_ADDR
// if p3 = 111 then
8606: LD_VAR 0 3
8610: PUSH
8611: LD_INT 111
8613: EQUAL
8614: IFFALSE 8624
// sOil := true ;
8616: LD_ADDR_EXP 57
8620: PUSH
8621: LD_INT 1
8623: ST_TO_ADDR
// if p3 = 112 then
8624: LD_VAR 0 3
8628: PUSH
8629: LD_INT 112
8631: EQUAL
8632: IFFALSE 8642
// sStu := true ;
8634: LD_ADDR_EXP 61
8638: PUSH
8639: LD_INT 1
8641: ST_TO_ADDR
// if p3 = 113 then
8642: LD_VAR 0 3
8646: PUSH
8647: LD_INT 113
8649: EQUAL
8650: IFFALSE 8660
// sBazooka := true ;
8652: LD_ADDR_EXP 64
8656: PUSH
8657: LD_INT 1
8659: ST_TO_ADDR
// if p3 = 114 then
8660: LD_VAR 0 3
8664: PUSH
8665: LD_INT 114
8667: EQUAL
8668: IFFALSE 8678
// sMortar := true ;
8670: LD_ADDR_EXP 65
8674: PUSH
8675: LD_INT 1
8677: ST_TO_ADDR
// if p3 = 115 then
8678: LD_VAR 0 3
8682: PUSH
8683: LD_INT 115
8685: EQUAL
8686: IFFALSE 8696
// sRanger := true ;
8688: LD_ADDR_EXP 75
8692: PUSH
8693: LD_INT 1
8695: ST_TO_ADDR
// if p3 = 116 then
8696: LD_VAR 0 3
8700: PUSH
8701: LD_INT 116
8703: EQUAL
8704: IFFALSE 8714
// sComputer := true ;
8706: LD_ADDR_EXP 76
8710: PUSH
8711: LD_INT 1
8713: ST_TO_ADDR
// if p3 = 117 then
8714: LD_VAR 0 3
8718: PUSH
8719: LD_INT 117
8721: EQUAL
8722: IFFALSE 8732
// s30 := true ;
8724: LD_ADDR_EXP 77
8728: PUSH
8729: LD_INT 1
8731: ST_TO_ADDR
// if p3 = 118 then
8732: LD_VAR 0 3
8736: PUSH
8737: LD_INT 118
8739: EQUAL
8740: IFFALSE 8750
// s60 := true ;
8742: LD_ADDR_EXP 78
8746: PUSH
8747: LD_INT 1
8749: ST_TO_ADDR
// end ; if p2 = 101 then
8750: LD_VAR 0 2
8754: PUSH
8755: LD_INT 101
8757: EQUAL
8758: IFFALSE 8886
// begin case p3 of 1 :
8760: LD_VAR 0 3
8764: PUSH
8765: LD_INT 1
8767: DOUBLE
8768: EQUAL
8769: IFTRUE 8773
8771: GO 8780
8773: POP
// hHackUnlimitedResources ; 2 :
8774: CALL 20984 0 0
8778: GO 8886
8780: LD_INT 2
8782: DOUBLE
8783: EQUAL
8784: IFTRUE 8788
8786: GO 8795
8788: POP
// hHackSetLevel10 ; 3 :
8789: CALL 21117 0 0
8793: GO 8886
8795: LD_INT 3
8797: DOUBLE
8798: EQUAL
8799: IFTRUE 8803
8801: GO 8810
8803: POP
// hHackSetLevel10YourUnits ; 4 :
8804: CALL 21202 0 0
8808: GO 8886
8810: LD_INT 4
8812: DOUBLE
8813: EQUAL
8814: IFTRUE 8818
8816: GO 8825
8818: POP
// hHackInvincible ; 5 :
8819: CALL 21650 0 0
8823: GO 8886
8825: LD_INT 5
8827: DOUBLE
8828: EQUAL
8829: IFTRUE 8833
8831: GO 8840
8833: POP
// hHackInvisible ; 6 :
8834: CALL 21761 0 0
8838: GO 8886
8840: LD_INT 6
8842: DOUBLE
8843: EQUAL
8844: IFTRUE 8848
8846: GO 8855
8848: POP
// hHackChangeYourSide ; 7 :
8849: CALL 21818 0 0
8853: GO 8886
8855: LD_INT 7
8857: DOUBLE
8858: EQUAL
8859: IFTRUE 8863
8861: GO 8870
8863: POP
// hHackChangeUnitSide ; 8 :
8864: CALL 21860 0 0
8868: GO 8886
8870: LD_INT 8
8872: DOUBLE
8873: EQUAL
8874: IFTRUE 8878
8876: GO 8885
8878: POP
// hHackFog ; end ;
8879: CALL 21961 0 0
8883: GO 8886
8885: POP
// end ; end ;
8886: LD_VAR 0 7
8890: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8891: GO 8893
8893: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8894: LD_STRING initStreamRollete();
8896: PPUSH
8897: CALL_OW 559
// InitStreamMode ;
8901: CALL 8913 0 0
// DefineStreamItems ( false ) ;
8905: LD_INT 0
8907: PPUSH
8908: CALL 9377 0 1
// end ;
8912: END
// function InitStreamMode ; begin
8913: LD_INT 0
8915: PPUSH
// streamModeActive := false ;
8916: LD_ADDR_EXP 22
8920: PUSH
8921: LD_INT 0
8923: ST_TO_ADDR
// normalCounter := 36 ;
8924: LD_ADDR_EXP 23
8928: PUSH
8929: LD_INT 36
8931: ST_TO_ADDR
// hardcoreCounter := 18 ;
8932: LD_ADDR_EXP 24
8936: PUSH
8937: LD_INT 18
8939: ST_TO_ADDR
// sRocket := false ;
8940: LD_ADDR_EXP 27
8944: PUSH
8945: LD_INT 0
8947: ST_TO_ADDR
// sSpeed := false ;
8948: LD_ADDR_EXP 26
8952: PUSH
8953: LD_INT 0
8955: ST_TO_ADDR
// sEngine := false ;
8956: LD_ADDR_EXP 28
8960: PUSH
8961: LD_INT 0
8963: ST_TO_ADDR
// sSpec := false ;
8964: LD_ADDR_EXP 25
8968: PUSH
8969: LD_INT 0
8971: ST_TO_ADDR
// sLevel := false ;
8972: LD_ADDR_EXP 29
8976: PUSH
8977: LD_INT 0
8979: ST_TO_ADDR
// sArmoury := false ;
8980: LD_ADDR_EXP 30
8984: PUSH
8985: LD_INT 0
8987: ST_TO_ADDR
// sRadar := false ;
8988: LD_ADDR_EXP 31
8992: PUSH
8993: LD_INT 0
8995: ST_TO_ADDR
// sBunker := false ;
8996: LD_ADDR_EXP 32
9000: PUSH
9001: LD_INT 0
9003: ST_TO_ADDR
// sHack := false ;
9004: LD_ADDR_EXP 33
9008: PUSH
9009: LD_INT 0
9011: ST_TO_ADDR
// sFire := false ;
9012: LD_ADDR_EXP 34
9016: PUSH
9017: LD_INT 0
9019: ST_TO_ADDR
// sRefresh := false ;
9020: LD_ADDR_EXP 35
9024: PUSH
9025: LD_INT 0
9027: ST_TO_ADDR
// sExp := false ;
9028: LD_ADDR_EXP 36
9032: PUSH
9033: LD_INT 0
9035: ST_TO_ADDR
// sDepot := false ;
9036: LD_ADDR_EXP 37
9040: PUSH
9041: LD_INT 0
9043: ST_TO_ADDR
// sFlag := false ;
9044: LD_ADDR_EXP 38
9048: PUSH
9049: LD_INT 0
9051: ST_TO_ADDR
// sKamikadze := false ;
9052: LD_ADDR_EXP 46
9056: PUSH
9057: LD_INT 0
9059: ST_TO_ADDR
// sTroll := false ;
9060: LD_ADDR_EXP 47
9064: PUSH
9065: LD_INT 0
9067: ST_TO_ADDR
// sSlow := false ;
9068: LD_ADDR_EXP 48
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// sLack := false ;
9076: LD_ADDR_EXP 49
9080: PUSH
9081: LD_INT 0
9083: ST_TO_ADDR
// sTank := false ;
9084: LD_ADDR_EXP 51
9088: PUSH
9089: LD_INT 0
9091: ST_TO_ADDR
// sRemote := false ;
9092: LD_ADDR_EXP 52
9096: PUSH
9097: LD_INT 0
9099: ST_TO_ADDR
// sPowell := false ;
9100: LD_ADDR_EXP 53
9104: PUSH
9105: LD_INT 0
9107: ST_TO_ADDR
// sTeleport := false ;
9108: LD_ADDR_EXP 56
9112: PUSH
9113: LD_INT 0
9115: ST_TO_ADDR
// sOilTower := false ;
9116: LD_ADDR_EXP 58
9120: PUSH
9121: LD_INT 0
9123: ST_TO_ADDR
// sShovel := false ;
9124: LD_ADDR_EXP 59
9128: PUSH
9129: LD_INT 0
9131: ST_TO_ADDR
// sSheik := false ;
9132: LD_ADDR_EXP 60
9136: PUSH
9137: LD_INT 0
9139: ST_TO_ADDR
// sEarthquake := false ;
9140: LD_ADDR_EXP 62
9144: PUSH
9145: LD_INT 0
9147: ST_TO_ADDR
// sAI := false ;
9148: LD_ADDR_EXP 63
9152: PUSH
9153: LD_INT 0
9155: ST_TO_ADDR
// sCargo := false ;
9156: LD_ADDR_EXP 66
9160: PUSH
9161: LD_INT 0
9163: ST_TO_ADDR
// sDLaser := false ;
9164: LD_ADDR_EXP 67
9168: PUSH
9169: LD_INT 0
9171: ST_TO_ADDR
// sExchange := false ;
9172: LD_ADDR_EXP 68
9176: PUSH
9177: LD_INT 0
9179: ST_TO_ADDR
// sFac := false ;
9180: LD_ADDR_EXP 69
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// sPower := false ;
9188: LD_ADDR_EXP 70
9192: PUSH
9193: LD_INT 0
9195: ST_TO_ADDR
// sRandom := false ;
9196: LD_ADDR_EXP 71
9200: PUSH
9201: LD_INT 0
9203: ST_TO_ADDR
// sShield := false ;
9204: LD_ADDR_EXP 72
9208: PUSH
9209: LD_INT 0
9211: ST_TO_ADDR
// sTime := false ;
9212: LD_ADDR_EXP 73
9216: PUSH
9217: LD_INT 0
9219: ST_TO_ADDR
// sTools := false ;
9220: LD_ADDR_EXP 74
9224: PUSH
9225: LD_INT 0
9227: ST_TO_ADDR
// sSold := false ;
9228: LD_ADDR_EXP 39
9232: PUSH
9233: LD_INT 0
9235: ST_TO_ADDR
// sDiff := false ;
9236: LD_ADDR_EXP 40
9240: PUSH
9241: LD_INT 0
9243: ST_TO_ADDR
// sFog := false ;
9244: LD_ADDR_EXP 43
9248: PUSH
9249: LD_INT 0
9251: ST_TO_ADDR
// sReset := false ;
9252: LD_ADDR_EXP 44
9256: PUSH
9257: LD_INT 0
9259: ST_TO_ADDR
// sSun := false ;
9260: LD_ADDR_EXP 45
9264: PUSH
9265: LD_INT 0
9267: ST_TO_ADDR
// sTiger := false ;
9268: LD_ADDR_EXP 41
9272: PUSH
9273: LD_INT 0
9275: ST_TO_ADDR
// sBomb := false ;
9276: LD_ADDR_EXP 42
9280: PUSH
9281: LD_INT 0
9283: ST_TO_ADDR
// sWound := false ;
9284: LD_ADDR_EXP 50
9288: PUSH
9289: LD_INT 0
9291: ST_TO_ADDR
// sBetray := false ;
9292: LD_ADDR_EXP 54
9296: PUSH
9297: LD_INT 0
9299: ST_TO_ADDR
// sContamin := false ;
9300: LD_ADDR_EXP 55
9304: PUSH
9305: LD_INT 0
9307: ST_TO_ADDR
// sOil := false ;
9308: LD_ADDR_EXP 57
9312: PUSH
9313: LD_INT 0
9315: ST_TO_ADDR
// sStu := false ;
9316: LD_ADDR_EXP 61
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// sBazooka := false ;
9324: LD_ADDR_EXP 64
9328: PUSH
9329: LD_INT 0
9331: ST_TO_ADDR
// sMortar := false ;
9332: LD_ADDR_EXP 65
9336: PUSH
9337: LD_INT 0
9339: ST_TO_ADDR
// sRanger := false ;
9340: LD_ADDR_EXP 75
9344: PUSH
9345: LD_INT 0
9347: ST_TO_ADDR
// sComputer := false ;
9348: LD_ADDR_EXP 76
9352: PUSH
9353: LD_INT 0
9355: ST_TO_ADDR
// s30 := false ;
9356: LD_ADDR_EXP 77
9360: PUSH
9361: LD_INT 0
9363: ST_TO_ADDR
// s60 := false ;
9364: LD_ADDR_EXP 78
9368: PUSH
9369: LD_INT 0
9371: ST_TO_ADDR
// end ;
9372: LD_VAR 0 1
9376: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9377: LD_INT 0
9379: PPUSH
9380: PPUSH
9381: PPUSH
9382: PPUSH
9383: PPUSH
9384: PPUSH
9385: PPUSH
// result := [ ] ;
9386: LD_ADDR_VAR 0 2
9390: PUSH
9391: EMPTY
9392: ST_TO_ADDR
// if campaign_id = 1 then
9393: LD_OWVAR 69
9397: PUSH
9398: LD_INT 1
9400: EQUAL
9401: IFFALSE 12567
// begin case mission_number of 1 :
9403: LD_OWVAR 70
9407: PUSH
9408: LD_INT 1
9410: DOUBLE
9411: EQUAL
9412: IFTRUE 9416
9414: GO 9492
9416: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9417: LD_ADDR_VAR 0 2
9421: PUSH
9422: LD_INT 2
9424: PUSH
9425: LD_INT 4
9427: PUSH
9428: LD_INT 11
9430: PUSH
9431: LD_INT 12
9433: PUSH
9434: LD_INT 15
9436: PUSH
9437: LD_INT 16
9439: PUSH
9440: LD_INT 22
9442: PUSH
9443: LD_INT 23
9445: PUSH
9446: LD_INT 26
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: PUSH
9460: LD_INT 101
9462: PUSH
9463: LD_INT 102
9465: PUSH
9466: LD_INT 106
9468: PUSH
9469: LD_INT 116
9471: PUSH
9472: LD_INT 117
9474: PUSH
9475: LD_INT 118
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: ST_TO_ADDR
9490: GO 12565
9492: LD_INT 2
9494: DOUBLE
9495: EQUAL
9496: IFTRUE 9500
9498: GO 9584
9500: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9501: LD_ADDR_VAR 0 2
9505: PUSH
9506: LD_INT 2
9508: PUSH
9509: LD_INT 4
9511: PUSH
9512: LD_INT 11
9514: PUSH
9515: LD_INT 12
9517: PUSH
9518: LD_INT 15
9520: PUSH
9521: LD_INT 16
9523: PUSH
9524: LD_INT 22
9526: PUSH
9527: LD_INT 23
9529: PUSH
9530: LD_INT 26
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: PUSH
9544: LD_INT 101
9546: PUSH
9547: LD_INT 102
9549: PUSH
9550: LD_INT 105
9552: PUSH
9553: LD_INT 106
9555: PUSH
9556: LD_INT 108
9558: PUSH
9559: LD_INT 116
9561: PUSH
9562: LD_INT 117
9564: PUSH
9565: LD_INT 118
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: ST_TO_ADDR
9582: GO 12565
9584: LD_INT 3
9586: DOUBLE
9587: EQUAL
9588: IFTRUE 9592
9590: GO 9680
9592: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9593: LD_ADDR_VAR 0 2
9597: PUSH
9598: LD_INT 2
9600: PUSH
9601: LD_INT 4
9603: PUSH
9604: LD_INT 5
9606: PUSH
9607: LD_INT 11
9609: PUSH
9610: LD_INT 12
9612: PUSH
9613: LD_INT 15
9615: PUSH
9616: LD_INT 16
9618: PUSH
9619: LD_INT 22
9621: PUSH
9622: LD_INT 26
9624: PUSH
9625: LD_INT 36
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 101
9642: PUSH
9643: LD_INT 102
9645: PUSH
9646: LD_INT 105
9648: PUSH
9649: LD_INT 106
9651: PUSH
9652: LD_INT 108
9654: PUSH
9655: LD_INT 116
9657: PUSH
9658: LD_INT 117
9660: PUSH
9661: LD_INT 118
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: ST_TO_ADDR
9678: GO 12565
9680: LD_INT 4
9682: DOUBLE
9683: EQUAL
9684: IFTRUE 9688
9686: GO 9784
9688: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9689: LD_ADDR_VAR 0 2
9693: PUSH
9694: LD_INT 2
9696: PUSH
9697: LD_INT 4
9699: PUSH
9700: LD_INT 5
9702: PUSH
9703: LD_INT 8
9705: PUSH
9706: LD_INT 11
9708: PUSH
9709: LD_INT 12
9711: PUSH
9712: LD_INT 15
9714: PUSH
9715: LD_INT 16
9717: PUSH
9718: LD_INT 22
9720: PUSH
9721: LD_INT 23
9723: PUSH
9724: LD_INT 26
9726: PUSH
9727: LD_INT 36
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 101
9746: PUSH
9747: LD_INT 102
9749: PUSH
9750: LD_INT 105
9752: PUSH
9753: LD_INT 106
9755: PUSH
9756: LD_INT 108
9758: PUSH
9759: LD_INT 116
9761: PUSH
9762: LD_INT 117
9764: PUSH
9765: LD_INT 118
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: ST_TO_ADDR
9782: GO 12565
9784: LD_INT 5
9786: DOUBLE
9787: EQUAL
9788: IFTRUE 9792
9790: GO 9904
9792: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9793: LD_ADDR_VAR 0 2
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: LD_INT 4
9803: PUSH
9804: LD_INT 5
9806: PUSH
9807: LD_INT 6
9809: PUSH
9810: LD_INT 8
9812: PUSH
9813: LD_INT 11
9815: PUSH
9816: LD_INT 12
9818: PUSH
9819: LD_INT 15
9821: PUSH
9822: LD_INT 16
9824: PUSH
9825: LD_INT 22
9827: PUSH
9828: LD_INT 23
9830: PUSH
9831: LD_INT 25
9833: PUSH
9834: LD_INT 26
9836: PUSH
9837: LD_INT 36
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 101
9858: PUSH
9859: LD_INT 102
9861: PUSH
9862: LD_INT 105
9864: PUSH
9865: LD_INT 106
9867: PUSH
9868: LD_INT 108
9870: PUSH
9871: LD_INT 109
9873: PUSH
9874: LD_INT 112
9876: PUSH
9877: LD_INT 116
9879: PUSH
9880: LD_INT 117
9882: PUSH
9883: LD_INT 118
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: ST_TO_ADDR
9902: GO 12565
9904: LD_INT 6
9906: DOUBLE
9907: EQUAL
9908: IFTRUE 9912
9910: GO 10044
9912: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9913: LD_ADDR_VAR 0 2
9917: PUSH
9918: LD_INT 2
9920: PUSH
9921: LD_INT 4
9923: PUSH
9924: LD_INT 5
9926: PUSH
9927: LD_INT 6
9929: PUSH
9930: LD_INT 8
9932: PUSH
9933: LD_INT 11
9935: PUSH
9936: LD_INT 12
9938: PUSH
9939: LD_INT 15
9941: PUSH
9942: LD_INT 16
9944: PUSH
9945: LD_INT 20
9947: PUSH
9948: LD_INT 21
9950: PUSH
9951: LD_INT 22
9953: PUSH
9954: LD_INT 23
9956: PUSH
9957: LD_INT 25
9959: PUSH
9960: LD_INT 26
9962: PUSH
9963: LD_INT 30
9965: PUSH
9966: LD_INT 31
9968: PUSH
9969: LD_INT 32
9971: PUSH
9972: LD_INT 36
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 101
9998: PUSH
9999: LD_INT 102
10001: PUSH
10002: LD_INT 105
10004: PUSH
10005: LD_INT 106
10007: PUSH
10008: LD_INT 108
10010: PUSH
10011: LD_INT 109
10013: PUSH
10014: LD_INT 112
10016: PUSH
10017: LD_INT 116
10019: PUSH
10020: LD_INT 117
10022: PUSH
10023: LD_INT 118
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: ST_TO_ADDR
10042: GO 12565
10044: LD_INT 7
10046: DOUBLE
10047: EQUAL
10048: IFTRUE 10052
10050: GO 10164
10052: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10053: LD_ADDR_VAR 0 2
10057: PUSH
10058: LD_INT 2
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: LD_INT 5
10066: PUSH
10067: LD_INT 7
10069: PUSH
10070: LD_INT 11
10072: PUSH
10073: LD_INT 12
10075: PUSH
10076: LD_INT 15
10078: PUSH
10079: LD_INT 16
10081: PUSH
10082: LD_INT 20
10084: PUSH
10085: LD_INT 21
10087: PUSH
10088: LD_INT 22
10090: PUSH
10091: LD_INT 23
10093: PUSH
10094: LD_INT 25
10096: PUSH
10097: LD_INT 26
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: LD_INT 101
10118: PUSH
10119: LD_INT 102
10121: PUSH
10122: LD_INT 103
10124: PUSH
10125: LD_INT 105
10127: PUSH
10128: LD_INT 106
10130: PUSH
10131: LD_INT 108
10133: PUSH
10134: LD_INT 112
10136: PUSH
10137: LD_INT 116
10139: PUSH
10140: LD_INT 117
10142: PUSH
10143: LD_INT 118
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: ST_TO_ADDR
10162: GO 12565
10164: LD_INT 8
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10312
10172: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10173: LD_ADDR_VAR 0 2
10177: PUSH
10178: LD_INT 2
10180: PUSH
10181: LD_INT 4
10183: PUSH
10184: LD_INT 5
10186: PUSH
10187: LD_INT 6
10189: PUSH
10190: LD_INT 7
10192: PUSH
10193: LD_INT 8
10195: PUSH
10196: LD_INT 11
10198: PUSH
10199: LD_INT 12
10201: PUSH
10202: LD_INT 15
10204: PUSH
10205: LD_INT 16
10207: PUSH
10208: LD_INT 20
10210: PUSH
10211: LD_INT 21
10213: PUSH
10214: LD_INT 22
10216: PUSH
10217: LD_INT 23
10219: PUSH
10220: LD_INT 25
10222: PUSH
10223: LD_INT 26
10225: PUSH
10226: LD_INT 30
10228: PUSH
10229: LD_INT 31
10231: PUSH
10232: LD_INT 32
10234: PUSH
10235: LD_INT 36
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 101
10262: PUSH
10263: LD_INT 102
10265: PUSH
10266: LD_INT 103
10268: PUSH
10269: LD_INT 105
10271: PUSH
10272: LD_INT 106
10274: PUSH
10275: LD_INT 108
10277: PUSH
10278: LD_INT 109
10280: PUSH
10281: LD_INT 112
10283: PUSH
10284: LD_INT 116
10286: PUSH
10287: LD_INT 117
10289: PUSH
10290: LD_INT 118
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: ST_TO_ADDR
10310: GO 12565
10312: LD_INT 9
10314: DOUBLE
10315: EQUAL
10316: IFTRUE 10320
10318: GO 10468
10320: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10321: LD_ADDR_VAR 0 2
10325: PUSH
10326: LD_INT 2
10328: PUSH
10329: LD_INT 4
10331: PUSH
10332: LD_INT 5
10334: PUSH
10335: LD_INT 6
10337: PUSH
10338: LD_INT 7
10340: PUSH
10341: LD_INT 8
10343: PUSH
10344: LD_INT 11
10346: PUSH
10347: LD_INT 12
10349: PUSH
10350: LD_INT 15
10352: PUSH
10353: LD_INT 16
10355: PUSH
10356: LD_INT 20
10358: PUSH
10359: LD_INT 21
10361: PUSH
10362: LD_INT 22
10364: PUSH
10365: LD_INT 23
10367: PUSH
10368: LD_INT 25
10370: PUSH
10371: LD_INT 26
10373: PUSH
10374: LD_INT 28
10376: PUSH
10377: LD_INT 30
10379: PUSH
10380: LD_INT 31
10382: PUSH
10383: LD_INT 32
10385: PUSH
10386: LD_INT 36
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 101
10414: PUSH
10415: LD_INT 102
10417: PUSH
10418: LD_INT 103
10420: PUSH
10421: LD_INT 105
10423: PUSH
10424: LD_INT 106
10426: PUSH
10427: LD_INT 108
10429: PUSH
10430: LD_INT 109
10432: PUSH
10433: LD_INT 112
10435: PUSH
10436: LD_INT 114
10438: PUSH
10439: LD_INT 116
10441: PUSH
10442: LD_INT 117
10444: PUSH
10445: LD_INT 118
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: PUSH
10462: EMPTY
10463: LIST
10464: LIST
10465: ST_TO_ADDR
10466: GO 12565
10468: LD_INT 10
10470: DOUBLE
10471: EQUAL
10472: IFTRUE 10476
10474: GO 10672
10476: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10477: LD_ADDR_VAR 0 2
10481: PUSH
10482: LD_INT 2
10484: PUSH
10485: LD_INT 4
10487: PUSH
10488: LD_INT 5
10490: PUSH
10491: LD_INT 6
10493: PUSH
10494: LD_INT 7
10496: PUSH
10497: LD_INT 8
10499: PUSH
10500: LD_INT 9
10502: PUSH
10503: LD_INT 10
10505: PUSH
10506: LD_INT 11
10508: PUSH
10509: LD_INT 12
10511: PUSH
10512: LD_INT 13
10514: PUSH
10515: LD_INT 14
10517: PUSH
10518: LD_INT 15
10520: PUSH
10521: LD_INT 16
10523: PUSH
10524: LD_INT 17
10526: PUSH
10527: LD_INT 18
10529: PUSH
10530: LD_INT 19
10532: PUSH
10533: LD_INT 20
10535: PUSH
10536: LD_INT 21
10538: PUSH
10539: LD_INT 22
10541: PUSH
10542: LD_INT 23
10544: PUSH
10545: LD_INT 24
10547: PUSH
10548: LD_INT 25
10550: PUSH
10551: LD_INT 26
10553: PUSH
10554: LD_INT 28
10556: PUSH
10557: LD_INT 30
10559: PUSH
10560: LD_INT 31
10562: PUSH
10563: LD_INT 32
10565: PUSH
10566: LD_INT 36
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 101
10602: PUSH
10603: LD_INT 102
10605: PUSH
10606: LD_INT 103
10608: PUSH
10609: LD_INT 104
10611: PUSH
10612: LD_INT 105
10614: PUSH
10615: LD_INT 106
10617: PUSH
10618: LD_INT 107
10620: PUSH
10621: LD_INT 108
10623: PUSH
10624: LD_INT 109
10626: PUSH
10627: LD_INT 110
10629: PUSH
10630: LD_INT 111
10632: PUSH
10633: LD_INT 112
10635: PUSH
10636: LD_INT 114
10638: PUSH
10639: LD_INT 116
10641: PUSH
10642: LD_INT 117
10644: PUSH
10645: LD_INT 118
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: ST_TO_ADDR
10670: GO 12565
10672: LD_INT 11
10674: DOUBLE
10675: EQUAL
10676: IFTRUE 10680
10678: GO 10884
10680: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10681: LD_ADDR_VAR 0 2
10685: PUSH
10686: LD_INT 2
10688: PUSH
10689: LD_INT 3
10691: PUSH
10692: LD_INT 4
10694: PUSH
10695: LD_INT 5
10697: PUSH
10698: LD_INT 6
10700: PUSH
10701: LD_INT 7
10703: PUSH
10704: LD_INT 8
10706: PUSH
10707: LD_INT 9
10709: PUSH
10710: LD_INT 10
10712: PUSH
10713: LD_INT 11
10715: PUSH
10716: LD_INT 12
10718: PUSH
10719: LD_INT 13
10721: PUSH
10722: LD_INT 14
10724: PUSH
10725: LD_INT 15
10727: PUSH
10728: LD_INT 16
10730: PUSH
10731: LD_INT 17
10733: PUSH
10734: LD_INT 18
10736: PUSH
10737: LD_INT 19
10739: PUSH
10740: LD_INT 20
10742: PUSH
10743: LD_INT 21
10745: PUSH
10746: LD_INT 22
10748: PUSH
10749: LD_INT 23
10751: PUSH
10752: LD_INT 24
10754: PUSH
10755: LD_INT 25
10757: PUSH
10758: LD_INT 26
10760: PUSH
10761: LD_INT 28
10763: PUSH
10764: LD_INT 30
10766: PUSH
10767: LD_INT 31
10769: PUSH
10770: LD_INT 32
10772: PUSH
10773: LD_INT 34
10775: PUSH
10776: LD_INT 36
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 101
10814: PUSH
10815: LD_INT 102
10817: PUSH
10818: LD_INT 103
10820: PUSH
10821: LD_INT 104
10823: PUSH
10824: LD_INT 105
10826: PUSH
10827: LD_INT 106
10829: PUSH
10830: LD_INT 107
10832: PUSH
10833: LD_INT 108
10835: PUSH
10836: LD_INT 109
10838: PUSH
10839: LD_INT 110
10841: PUSH
10842: LD_INT 111
10844: PUSH
10845: LD_INT 112
10847: PUSH
10848: LD_INT 114
10850: PUSH
10851: LD_INT 116
10853: PUSH
10854: LD_INT 117
10856: PUSH
10857: LD_INT 118
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: ST_TO_ADDR
10882: GO 12565
10884: LD_INT 12
10886: DOUBLE
10887: EQUAL
10888: IFTRUE 10892
10890: GO 11112
10892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10893: LD_ADDR_VAR 0 2
10897: PUSH
10898: LD_INT 1
10900: PUSH
10901: LD_INT 2
10903: PUSH
10904: LD_INT 3
10906: PUSH
10907: LD_INT 4
10909: PUSH
10910: LD_INT 5
10912: PUSH
10913: LD_INT 6
10915: PUSH
10916: LD_INT 7
10918: PUSH
10919: LD_INT 8
10921: PUSH
10922: LD_INT 9
10924: PUSH
10925: LD_INT 10
10927: PUSH
10928: LD_INT 11
10930: PUSH
10931: LD_INT 12
10933: PUSH
10934: LD_INT 13
10936: PUSH
10937: LD_INT 14
10939: PUSH
10940: LD_INT 15
10942: PUSH
10943: LD_INT 16
10945: PUSH
10946: LD_INT 17
10948: PUSH
10949: LD_INT 18
10951: PUSH
10952: LD_INT 19
10954: PUSH
10955: LD_INT 20
10957: PUSH
10958: LD_INT 21
10960: PUSH
10961: LD_INT 22
10963: PUSH
10964: LD_INT 23
10966: PUSH
10967: LD_INT 24
10969: PUSH
10970: LD_INT 25
10972: PUSH
10973: LD_INT 26
10975: PUSH
10976: LD_INT 27
10978: PUSH
10979: LD_INT 28
10981: PUSH
10982: LD_INT 30
10984: PUSH
10985: LD_INT 31
10987: PUSH
10988: LD_INT 32
10990: PUSH
10991: LD_INT 33
10993: PUSH
10994: LD_INT 34
10996: PUSH
10997: LD_INT 36
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 101
11038: PUSH
11039: LD_INT 102
11041: PUSH
11042: LD_INT 103
11044: PUSH
11045: LD_INT 104
11047: PUSH
11048: LD_INT 105
11050: PUSH
11051: LD_INT 106
11053: PUSH
11054: LD_INT 107
11056: PUSH
11057: LD_INT 108
11059: PUSH
11060: LD_INT 109
11062: PUSH
11063: LD_INT 110
11065: PUSH
11066: LD_INT 111
11068: PUSH
11069: LD_INT 112
11071: PUSH
11072: LD_INT 113
11074: PUSH
11075: LD_INT 114
11077: PUSH
11078: LD_INT 116
11080: PUSH
11081: LD_INT 117
11083: PUSH
11084: LD_INT 118
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: ST_TO_ADDR
11110: GO 12565
11112: LD_INT 13
11114: DOUBLE
11115: EQUAL
11116: IFTRUE 11120
11118: GO 11328
11120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11121: LD_ADDR_VAR 0 2
11125: PUSH
11126: LD_INT 1
11128: PUSH
11129: LD_INT 2
11131: PUSH
11132: LD_INT 3
11134: PUSH
11135: LD_INT 4
11137: PUSH
11138: LD_INT 5
11140: PUSH
11141: LD_INT 8
11143: PUSH
11144: LD_INT 9
11146: PUSH
11147: LD_INT 10
11149: PUSH
11150: LD_INT 11
11152: PUSH
11153: LD_INT 12
11155: PUSH
11156: LD_INT 14
11158: PUSH
11159: LD_INT 15
11161: PUSH
11162: LD_INT 16
11164: PUSH
11165: LD_INT 17
11167: PUSH
11168: LD_INT 18
11170: PUSH
11171: LD_INT 19
11173: PUSH
11174: LD_INT 20
11176: PUSH
11177: LD_INT 21
11179: PUSH
11180: LD_INT 22
11182: PUSH
11183: LD_INT 23
11185: PUSH
11186: LD_INT 24
11188: PUSH
11189: LD_INT 25
11191: PUSH
11192: LD_INT 26
11194: PUSH
11195: LD_INT 27
11197: PUSH
11198: LD_INT 28
11200: PUSH
11201: LD_INT 30
11203: PUSH
11204: LD_INT 31
11206: PUSH
11207: LD_INT 32
11209: PUSH
11210: LD_INT 33
11212: PUSH
11213: LD_INT 34
11215: PUSH
11216: LD_INT 36
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: PUSH
11252: LD_INT 101
11254: PUSH
11255: LD_INT 102
11257: PUSH
11258: LD_INT 103
11260: PUSH
11261: LD_INT 104
11263: PUSH
11264: LD_INT 105
11266: PUSH
11267: LD_INT 106
11269: PUSH
11270: LD_INT 107
11272: PUSH
11273: LD_INT 108
11275: PUSH
11276: LD_INT 109
11278: PUSH
11279: LD_INT 110
11281: PUSH
11282: LD_INT 111
11284: PUSH
11285: LD_INT 112
11287: PUSH
11288: LD_INT 113
11290: PUSH
11291: LD_INT 114
11293: PUSH
11294: LD_INT 116
11296: PUSH
11297: LD_INT 117
11299: PUSH
11300: LD_INT 118
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: ST_TO_ADDR
11326: GO 12565
11328: LD_INT 14
11330: DOUBLE
11331: EQUAL
11332: IFTRUE 11336
11334: GO 11560
11336: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11337: LD_ADDR_VAR 0 2
11341: PUSH
11342: LD_INT 1
11344: PUSH
11345: LD_INT 2
11347: PUSH
11348: LD_INT 3
11350: PUSH
11351: LD_INT 4
11353: PUSH
11354: LD_INT 5
11356: PUSH
11357: LD_INT 6
11359: PUSH
11360: LD_INT 7
11362: PUSH
11363: LD_INT 8
11365: PUSH
11366: LD_INT 9
11368: PUSH
11369: LD_INT 10
11371: PUSH
11372: LD_INT 11
11374: PUSH
11375: LD_INT 12
11377: PUSH
11378: LD_INT 13
11380: PUSH
11381: LD_INT 14
11383: PUSH
11384: LD_INT 15
11386: PUSH
11387: LD_INT 16
11389: PUSH
11390: LD_INT 17
11392: PUSH
11393: LD_INT 18
11395: PUSH
11396: LD_INT 19
11398: PUSH
11399: LD_INT 20
11401: PUSH
11402: LD_INT 21
11404: PUSH
11405: LD_INT 22
11407: PUSH
11408: LD_INT 23
11410: PUSH
11411: LD_INT 24
11413: PUSH
11414: LD_INT 25
11416: PUSH
11417: LD_INT 26
11419: PUSH
11420: LD_INT 27
11422: PUSH
11423: LD_INT 28
11425: PUSH
11426: LD_INT 29
11428: PUSH
11429: LD_INT 30
11431: PUSH
11432: LD_INT 31
11434: PUSH
11435: LD_INT 32
11437: PUSH
11438: LD_INT 33
11440: PUSH
11441: LD_INT 34
11443: PUSH
11444: LD_INT 36
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 101
11486: PUSH
11487: LD_INT 102
11489: PUSH
11490: LD_INT 103
11492: PUSH
11493: LD_INT 104
11495: PUSH
11496: LD_INT 105
11498: PUSH
11499: LD_INT 106
11501: PUSH
11502: LD_INT 107
11504: PUSH
11505: LD_INT 108
11507: PUSH
11508: LD_INT 109
11510: PUSH
11511: LD_INT 110
11513: PUSH
11514: LD_INT 111
11516: PUSH
11517: LD_INT 112
11519: PUSH
11520: LD_INT 113
11522: PUSH
11523: LD_INT 114
11525: PUSH
11526: LD_INT 116
11528: PUSH
11529: LD_INT 117
11531: PUSH
11532: LD_INT 118
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: ST_TO_ADDR
11558: GO 12565
11560: LD_INT 15
11562: DOUBLE
11563: EQUAL
11564: IFTRUE 11568
11566: GO 11792
11568: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11569: LD_ADDR_VAR 0 2
11573: PUSH
11574: LD_INT 1
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: LD_INT 3
11582: PUSH
11583: LD_INT 4
11585: PUSH
11586: LD_INT 5
11588: PUSH
11589: LD_INT 6
11591: PUSH
11592: LD_INT 7
11594: PUSH
11595: LD_INT 8
11597: PUSH
11598: LD_INT 9
11600: PUSH
11601: LD_INT 10
11603: PUSH
11604: LD_INT 11
11606: PUSH
11607: LD_INT 12
11609: PUSH
11610: LD_INT 13
11612: PUSH
11613: LD_INT 14
11615: PUSH
11616: LD_INT 15
11618: PUSH
11619: LD_INT 16
11621: PUSH
11622: LD_INT 17
11624: PUSH
11625: LD_INT 18
11627: PUSH
11628: LD_INT 19
11630: PUSH
11631: LD_INT 20
11633: PUSH
11634: LD_INT 21
11636: PUSH
11637: LD_INT 22
11639: PUSH
11640: LD_INT 23
11642: PUSH
11643: LD_INT 24
11645: PUSH
11646: LD_INT 25
11648: PUSH
11649: LD_INT 26
11651: PUSH
11652: LD_INT 27
11654: PUSH
11655: LD_INT 28
11657: PUSH
11658: LD_INT 29
11660: PUSH
11661: LD_INT 30
11663: PUSH
11664: LD_INT 31
11666: PUSH
11667: LD_INT 32
11669: PUSH
11670: LD_INT 33
11672: PUSH
11673: LD_INT 34
11675: PUSH
11676: LD_INT 36
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: PUSH
11716: LD_INT 101
11718: PUSH
11719: LD_INT 102
11721: PUSH
11722: LD_INT 103
11724: PUSH
11725: LD_INT 104
11727: PUSH
11728: LD_INT 105
11730: PUSH
11731: LD_INT 106
11733: PUSH
11734: LD_INT 107
11736: PUSH
11737: LD_INT 108
11739: PUSH
11740: LD_INT 109
11742: PUSH
11743: LD_INT 110
11745: PUSH
11746: LD_INT 111
11748: PUSH
11749: LD_INT 112
11751: PUSH
11752: LD_INT 113
11754: PUSH
11755: LD_INT 114
11757: PUSH
11758: LD_INT 116
11760: PUSH
11761: LD_INT 117
11763: PUSH
11764: LD_INT 118
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: ST_TO_ADDR
11790: GO 12565
11792: LD_INT 16
11794: DOUBLE
11795: EQUAL
11796: IFTRUE 11800
11798: GO 11936
11800: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11801: LD_ADDR_VAR 0 2
11805: PUSH
11806: LD_INT 2
11808: PUSH
11809: LD_INT 4
11811: PUSH
11812: LD_INT 5
11814: PUSH
11815: LD_INT 7
11817: PUSH
11818: LD_INT 11
11820: PUSH
11821: LD_INT 12
11823: PUSH
11824: LD_INT 15
11826: PUSH
11827: LD_INT 16
11829: PUSH
11830: LD_INT 20
11832: PUSH
11833: LD_INT 21
11835: PUSH
11836: LD_INT 22
11838: PUSH
11839: LD_INT 23
11841: PUSH
11842: LD_INT 25
11844: PUSH
11845: LD_INT 26
11847: PUSH
11848: LD_INT 30
11850: PUSH
11851: LD_INT 31
11853: PUSH
11854: LD_INT 32
11856: PUSH
11857: LD_INT 33
11859: PUSH
11860: LD_INT 34
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: PUSH
11884: LD_INT 101
11886: PUSH
11887: LD_INT 102
11889: PUSH
11890: LD_INT 103
11892: PUSH
11893: LD_INT 106
11895: PUSH
11896: LD_INT 108
11898: PUSH
11899: LD_INT 112
11901: PUSH
11902: LD_INT 113
11904: PUSH
11905: LD_INT 114
11907: PUSH
11908: LD_INT 116
11910: PUSH
11911: LD_INT 117
11913: PUSH
11914: LD_INT 118
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: ST_TO_ADDR
11934: GO 12565
11936: LD_INT 17
11938: DOUBLE
11939: EQUAL
11940: IFTRUE 11944
11942: GO 12168
11944: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11945: LD_ADDR_VAR 0 2
11949: PUSH
11950: LD_INT 1
11952: PUSH
11953: LD_INT 2
11955: PUSH
11956: LD_INT 3
11958: PUSH
11959: LD_INT 4
11961: PUSH
11962: LD_INT 5
11964: PUSH
11965: LD_INT 6
11967: PUSH
11968: LD_INT 7
11970: PUSH
11971: LD_INT 8
11973: PUSH
11974: LD_INT 9
11976: PUSH
11977: LD_INT 10
11979: PUSH
11980: LD_INT 11
11982: PUSH
11983: LD_INT 12
11985: PUSH
11986: LD_INT 13
11988: PUSH
11989: LD_INT 14
11991: PUSH
11992: LD_INT 15
11994: PUSH
11995: LD_INT 16
11997: PUSH
11998: LD_INT 17
12000: PUSH
12001: LD_INT 18
12003: PUSH
12004: LD_INT 19
12006: PUSH
12007: LD_INT 20
12009: PUSH
12010: LD_INT 21
12012: PUSH
12013: LD_INT 22
12015: PUSH
12016: LD_INT 23
12018: PUSH
12019: LD_INT 24
12021: PUSH
12022: LD_INT 25
12024: PUSH
12025: LD_INT 26
12027: PUSH
12028: LD_INT 27
12030: PUSH
12031: LD_INT 28
12033: PUSH
12034: LD_INT 29
12036: PUSH
12037: LD_INT 30
12039: PUSH
12040: LD_INT 31
12042: PUSH
12043: LD_INT 32
12045: PUSH
12046: LD_INT 33
12048: PUSH
12049: LD_INT 34
12051: PUSH
12052: LD_INT 36
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 101
12094: PUSH
12095: LD_INT 102
12097: PUSH
12098: LD_INT 103
12100: PUSH
12101: LD_INT 104
12103: PUSH
12104: LD_INT 105
12106: PUSH
12107: LD_INT 106
12109: PUSH
12110: LD_INT 107
12112: PUSH
12113: LD_INT 108
12115: PUSH
12116: LD_INT 109
12118: PUSH
12119: LD_INT 110
12121: PUSH
12122: LD_INT 111
12124: PUSH
12125: LD_INT 112
12127: PUSH
12128: LD_INT 113
12130: PUSH
12131: LD_INT 114
12133: PUSH
12134: LD_INT 116
12136: PUSH
12137: LD_INT 117
12139: PUSH
12140: LD_INT 118
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: ST_TO_ADDR
12166: GO 12565
12168: LD_INT 18
12170: DOUBLE
12171: EQUAL
12172: IFTRUE 12176
12174: GO 12324
12176: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12177: LD_ADDR_VAR 0 2
12181: PUSH
12182: LD_INT 2
12184: PUSH
12185: LD_INT 4
12187: PUSH
12188: LD_INT 5
12190: PUSH
12191: LD_INT 7
12193: PUSH
12194: LD_INT 11
12196: PUSH
12197: LD_INT 12
12199: PUSH
12200: LD_INT 15
12202: PUSH
12203: LD_INT 16
12205: PUSH
12206: LD_INT 20
12208: PUSH
12209: LD_INT 21
12211: PUSH
12212: LD_INT 22
12214: PUSH
12215: LD_INT 23
12217: PUSH
12218: LD_INT 25
12220: PUSH
12221: LD_INT 26
12223: PUSH
12224: LD_INT 30
12226: PUSH
12227: LD_INT 31
12229: PUSH
12230: LD_INT 32
12232: PUSH
12233: LD_INT 33
12235: PUSH
12236: LD_INT 34
12238: PUSH
12239: LD_INT 35
12241: PUSH
12242: LD_INT 36
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 101
12270: PUSH
12271: LD_INT 102
12273: PUSH
12274: LD_INT 103
12276: PUSH
12277: LD_INT 106
12279: PUSH
12280: LD_INT 108
12282: PUSH
12283: LD_INT 112
12285: PUSH
12286: LD_INT 113
12288: PUSH
12289: LD_INT 114
12291: PUSH
12292: LD_INT 115
12294: PUSH
12295: LD_INT 116
12297: PUSH
12298: LD_INT 117
12300: PUSH
12301: LD_INT 118
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: ST_TO_ADDR
12322: GO 12565
12324: LD_INT 19
12326: DOUBLE
12327: EQUAL
12328: IFTRUE 12332
12330: GO 12564
12332: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12333: LD_ADDR_VAR 0 2
12337: PUSH
12338: LD_INT 1
12340: PUSH
12341: LD_INT 2
12343: PUSH
12344: LD_INT 3
12346: PUSH
12347: LD_INT 4
12349: PUSH
12350: LD_INT 5
12352: PUSH
12353: LD_INT 6
12355: PUSH
12356: LD_INT 7
12358: PUSH
12359: LD_INT 8
12361: PUSH
12362: LD_INT 9
12364: PUSH
12365: LD_INT 10
12367: PUSH
12368: LD_INT 11
12370: PUSH
12371: LD_INT 12
12373: PUSH
12374: LD_INT 13
12376: PUSH
12377: LD_INT 14
12379: PUSH
12380: LD_INT 15
12382: PUSH
12383: LD_INT 16
12385: PUSH
12386: LD_INT 17
12388: PUSH
12389: LD_INT 18
12391: PUSH
12392: LD_INT 19
12394: PUSH
12395: LD_INT 20
12397: PUSH
12398: LD_INT 21
12400: PUSH
12401: LD_INT 22
12403: PUSH
12404: LD_INT 23
12406: PUSH
12407: LD_INT 24
12409: PUSH
12410: LD_INT 25
12412: PUSH
12413: LD_INT 26
12415: PUSH
12416: LD_INT 27
12418: PUSH
12419: LD_INT 28
12421: PUSH
12422: LD_INT 29
12424: PUSH
12425: LD_INT 30
12427: PUSH
12428: LD_INT 31
12430: PUSH
12431: LD_INT 32
12433: PUSH
12434: LD_INT 33
12436: PUSH
12437: LD_INT 34
12439: PUSH
12440: LD_INT 35
12442: PUSH
12443: LD_INT 36
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 101
12486: PUSH
12487: LD_INT 102
12489: PUSH
12490: LD_INT 103
12492: PUSH
12493: LD_INT 104
12495: PUSH
12496: LD_INT 105
12498: PUSH
12499: LD_INT 106
12501: PUSH
12502: LD_INT 107
12504: PUSH
12505: LD_INT 108
12507: PUSH
12508: LD_INT 109
12510: PUSH
12511: LD_INT 110
12513: PUSH
12514: LD_INT 111
12516: PUSH
12517: LD_INT 112
12519: PUSH
12520: LD_INT 113
12522: PUSH
12523: LD_INT 114
12525: PUSH
12526: LD_INT 115
12528: PUSH
12529: LD_INT 116
12531: PUSH
12532: LD_INT 117
12534: PUSH
12535: LD_INT 118
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: ST_TO_ADDR
12562: GO 12565
12564: POP
// end else
12565: GO 12796
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12567: LD_ADDR_VAR 0 2
12571: PUSH
12572: LD_INT 1
12574: PUSH
12575: LD_INT 2
12577: PUSH
12578: LD_INT 3
12580: PUSH
12581: LD_INT 4
12583: PUSH
12584: LD_INT 5
12586: PUSH
12587: LD_INT 6
12589: PUSH
12590: LD_INT 7
12592: PUSH
12593: LD_INT 8
12595: PUSH
12596: LD_INT 9
12598: PUSH
12599: LD_INT 10
12601: PUSH
12602: LD_INT 11
12604: PUSH
12605: LD_INT 12
12607: PUSH
12608: LD_INT 13
12610: PUSH
12611: LD_INT 14
12613: PUSH
12614: LD_INT 15
12616: PUSH
12617: LD_INT 16
12619: PUSH
12620: LD_INT 17
12622: PUSH
12623: LD_INT 18
12625: PUSH
12626: LD_INT 19
12628: PUSH
12629: LD_INT 20
12631: PUSH
12632: LD_INT 21
12634: PUSH
12635: LD_INT 22
12637: PUSH
12638: LD_INT 23
12640: PUSH
12641: LD_INT 24
12643: PUSH
12644: LD_INT 25
12646: PUSH
12647: LD_INT 26
12649: PUSH
12650: LD_INT 27
12652: PUSH
12653: LD_INT 28
12655: PUSH
12656: LD_INT 29
12658: PUSH
12659: LD_INT 30
12661: PUSH
12662: LD_INT 31
12664: PUSH
12665: LD_INT 32
12667: PUSH
12668: LD_INT 33
12670: PUSH
12671: LD_INT 34
12673: PUSH
12674: LD_INT 35
12676: PUSH
12677: LD_INT 36
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 101
12720: PUSH
12721: LD_INT 102
12723: PUSH
12724: LD_INT 103
12726: PUSH
12727: LD_INT 104
12729: PUSH
12730: LD_INT 105
12732: PUSH
12733: LD_INT 106
12735: PUSH
12736: LD_INT 107
12738: PUSH
12739: LD_INT 108
12741: PUSH
12742: LD_INT 109
12744: PUSH
12745: LD_INT 110
12747: PUSH
12748: LD_INT 111
12750: PUSH
12751: LD_INT 112
12753: PUSH
12754: LD_INT 113
12756: PUSH
12757: LD_INT 114
12759: PUSH
12760: LD_INT 115
12762: PUSH
12763: LD_INT 116
12765: PUSH
12766: LD_INT 117
12768: PUSH
12769: LD_INT 118
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: ST_TO_ADDR
// if result then
12796: LD_VAR 0 2
12800: IFFALSE 13586
// begin normal :=  ;
12802: LD_ADDR_VAR 0 5
12806: PUSH
12807: LD_STRING 
12809: ST_TO_ADDR
// hardcore :=  ;
12810: LD_ADDR_VAR 0 6
12814: PUSH
12815: LD_STRING 
12817: ST_TO_ADDR
// active :=  ;
12818: LD_ADDR_VAR 0 7
12822: PUSH
12823: LD_STRING 
12825: ST_TO_ADDR
// for i = 1 to normalCounter do
12826: LD_ADDR_VAR 0 8
12830: PUSH
12831: DOUBLE
12832: LD_INT 1
12834: DEC
12835: ST_TO_ADDR
12836: LD_EXP 23
12840: PUSH
12841: FOR_TO
12842: IFFALSE 12943
// begin tmp := 0 ;
12844: LD_ADDR_VAR 0 3
12848: PUSH
12849: LD_STRING 0
12851: ST_TO_ADDR
// if result [ 1 ] then
12852: LD_VAR 0 2
12856: PUSH
12857: LD_INT 1
12859: ARRAY
12860: IFFALSE 12925
// if result [ 1 ] [ 1 ] = i then
12862: LD_VAR 0 2
12866: PUSH
12867: LD_INT 1
12869: ARRAY
12870: PUSH
12871: LD_INT 1
12873: ARRAY
12874: PUSH
12875: LD_VAR 0 8
12879: EQUAL
12880: IFFALSE 12925
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12882: LD_ADDR_VAR 0 2
12886: PUSH
12887: LD_VAR 0 2
12891: PPUSH
12892: LD_INT 1
12894: PPUSH
12895: LD_VAR 0 2
12899: PUSH
12900: LD_INT 1
12902: ARRAY
12903: PPUSH
12904: LD_INT 1
12906: PPUSH
12907: CALL_OW 3
12911: PPUSH
12912: CALL_OW 1
12916: ST_TO_ADDR
// tmp := 1 ;
12917: LD_ADDR_VAR 0 3
12921: PUSH
12922: LD_STRING 1
12924: ST_TO_ADDR
// end ; normal := normal & tmp ;
12925: LD_ADDR_VAR 0 5
12929: PUSH
12930: LD_VAR 0 5
12934: PUSH
12935: LD_VAR 0 3
12939: STR
12940: ST_TO_ADDR
// end ;
12941: GO 12841
12943: POP
12944: POP
// for i = 1 to hardcoreCounter do
12945: LD_ADDR_VAR 0 8
12949: PUSH
12950: DOUBLE
12951: LD_INT 1
12953: DEC
12954: ST_TO_ADDR
12955: LD_EXP 24
12959: PUSH
12960: FOR_TO
12961: IFFALSE 13066
// begin tmp := 0 ;
12963: LD_ADDR_VAR 0 3
12967: PUSH
12968: LD_STRING 0
12970: ST_TO_ADDR
// if result [ 2 ] then
12971: LD_VAR 0 2
12975: PUSH
12976: LD_INT 2
12978: ARRAY
12979: IFFALSE 13048
// if result [ 2 ] [ 1 ] = 100 + i then
12981: LD_VAR 0 2
12985: PUSH
12986: LD_INT 2
12988: ARRAY
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PUSH
12994: LD_INT 100
12996: PUSH
12997: LD_VAR 0 8
13001: PLUS
13002: EQUAL
13003: IFFALSE 13048
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13005: LD_ADDR_VAR 0 2
13009: PUSH
13010: LD_VAR 0 2
13014: PPUSH
13015: LD_INT 2
13017: PPUSH
13018: LD_VAR 0 2
13022: PUSH
13023: LD_INT 2
13025: ARRAY
13026: PPUSH
13027: LD_INT 1
13029: PPUSH
13030: CALL_OW 3
13034: PPUSH
13035: CALL_OW 1
13039: ST_TO_ADDR
// tmp := 1 ;
13040: LD_ADDR_VAR 0 3
13044: PUSH
13045: LD_STRING 1
13047: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13048: LD_ADDR_VAR 0 6
13052: PUSH
13053: LD_VAR 0 6
13057: PUSH
13058: LD_VAR 0 3
13062: STR
13063: ST_TO_ADDR
// end ;
13064: GO 12960
13066: POP
13067: POP
// if isGameLoad then
13068: LD_VAR 0 1
13072: IFFALSE 13547
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13074: LD_ADDR_VAR 0 4
13078: PUSH
13079: LD_EXP 27
13083: PUSH
13084: LD_EXP 26
13088: PUSH
13089: LD_EXP 28
13093: PUSH
13094: LD_EXP 25
13098: PUSH
13099: LD_EXP 29
13103: PUSH
13104: LD_EXP 30
13108: PUSH
13109: LD_EXP 31
13113: PUSH
13114: LD_EXP 32
13118: PUSH
13119: LD_EXP 33
13123: PUSH
13124: LD_EXP 34
13128: PUSH
13129: LD_EXP 35
13133: PUSH
13134: LD_EXP 36
13138: PUSH
13139: LD_EXP 37
13143: PUSH
13144: LD_EXP 38
13148: PUSH
13149: LD_EXP 46
13153: PUSH
13154: LD_EXP 47
13158: PUSH
13159: LD_EXP 48
13163: PUSH
13164: LD_EXP 49
13168: PUSH
13169: LD_EXP 51
13173: PUSH
13174: LD_EXP 52
13178: PUSH
13179: LD_EXP 53
13183: PUSH
13184: LD_EXP 56
13188: PUSH
13189: LD_EXP 58
13193: PUSH
13194: LD_EXP 59
13198: PUSH
13199: LD_EXP 60
13203: PUSH
13204: LD_EXP 62
13208: PUSH
13209: LD_EXP 63
13213: PUSH
13214: LD_EXP 66
13218: PUSH
13219: LD_EXP 67
13223: PUSH
13224: LD_EXP 68
13228: PUSH
13229: LD_EXP 69
13233: PUSH
13234: LD_EXP 70
13238: PUSH
13239: LD_EXP 71
13243: PUSH
13244: LD_EXP 72
13248: PUSH
13249: LD_EXP 73
13253: PUSH
13254: LD_EXP 74
13258: PUSH
13259: LD_EXP 39
13263: PUSH
13264: LD_EXP 40
13268: PUSH
13269: LD_EXP 43
13273: PUSH
13274: LD_EXP 44
13278: PUSH
13279: LD_EXP 45
13283: PUSH
13284: LD_EXP 41
13288: PUSH
13289: LD_EXP 42
13293: PUSH
13294: LD_EXP 50
13298: PUSH
13299: LD_EXP 54
13303: PUSH
13304: LD_EXP 55
13308: PUSH
13309: LD_EXP 57
13313: PUSH
13314: LD_EXP 61
13318: PUSH
13319: LD_EXP 64
13323: PUSH
13324: LD_EXP 65
13328: PUSH
13329: LD_EXP 75
13333: PUSH
13334: LD_EXP 76
13338: PUSH
13339: LD_EXP 77
13343: PUSH
13344: LD_EXP 78
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: ST_TO_ADDR
// tmp :=  ;
13405: LD_ADDR_VAR 0 3
13409: PUSH
13410: LD_STRING 
13412: ST_TO_ADDR
// for i = 1 to normalCounter do
13413: LD_ADDR_VAR 0 8
13417: PUSH
13418: DOUBLE
13419: LD_INT 1
13421: DEC
13422: ST_TO_ADDR
13423: LD_EXP 23
13427: PUSH
13428: FOR_TO
13429: IFFALSE 13465
// begin if flags [ i ] then
13431: LD_VAR 0 4
13435: PUSH
13436: LD_VAR 0 8
13440: ARRAY
13441: IFFALSE 13463
// tmp := tmp & i & ; ;
13443: LD_ADDR_VAR 0 3
13447: PUSH
13448: LD_VAR 0 3
13452: PUSH
13453: LD_VAR 0 8
13457: STR
13458: PUSH
13459: LD_STRING ;
13461: STR
13462: ST_TO_ADDR
// end ;
13463: GO 13428
13465: POP
13466: POP
// for i = 1 to hardcoreCounter do
13467: LD_ADDR_VAR 0 8
13471: PUSH
13472: DOUBLE
13473: LD_INT 1
13475: DEC
13476: ST_TO_ADDR
13477: LD_EXP 24
13481: PUSH
13482: FOR_TO
13483: IFFALSE 13529
// begin if flags [ normalCounter + i ] then
13485: LD_VAR 0 4
13489: PUSH
13490: LD_EXP 23
13494: PUSH
13495: LD_VAR 0 8
13499: PLUS
13500: ARRAY
13501: IFFALSE 13527
// tmp := tmp & ( 100 + i ) & ; ;
13503: LD_ADDR_VAR 0 3
13507: PUSH
13508: LD_VAR 0 3
13512: PUSH
13513: LD_INT 100
13515: PUSH
13516: LD_VAR 0 8
13520: PLUS
13521: STR
13522: PUSH
13523: LD_STRING ;
13525: STR
13526: ST_TO_ADDR
// end ;
13527: GO 13482
13529: POP
13530: POP
// if tmp then
13531: LD_VAR 0 3
13535: IFFALSE 13547
// active := tmp ;
13537: LD_ADDR_VAR 0 7
13541: PUSH
13542: LD_VAR 0 3
13546: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13547: LD_STRING getStreamItemsFromMission("
13549: PUSH
13550: LD_VAR 0 5
13554: STR
13555: PUSH
13556: LD_STRING ","
13558: STR
13559: PUSH
13560: LD_VAR 0 6
13564: STR
13565: PUSH
13566: LD_STRING ","
13568: STR
13569: PUSH
13570: LD_VAR 0 7
13574: STR
13575: PUSH
13576: LD_STRING ")
13578: STR
13579: PPUSH
13580: CALL_OW 559
// end else
13584: GO 13593
// ToLua ( getStreamItemsFromMission("","","") ) ;
13586: LD_STRING getStreamItemsFromMission("","","")
13588: PPUSH
13589: CALL_OW 559
// end ;
13593: LD_VAR 0 2
13597: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13598: LD_EXP 22
13602: PUSH
13603: LD_EXP 27
13607: AND
13608: IFFALSE 13732
13610: GO 13612
13612: DISABLE
13613: LD_INT 0
13615: PPUSH
13616: PPUSH
// begin enable ;
13617: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13618: LD_ADDR_VAR 0 2
13622: PUSH
13623: LD_INT 22
13625: PUSH
13626: LD_OWVAR 2
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: LD_INT 2
13637: PUSH
13638: LD_INT 34
13640: PUSH
13641: LD_INT 7
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: LD_INT 34
13650: PUSH
13651: LD_INT 45
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 34
13660: PUSH
13661: LD_INT 28
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PUSH
13668: LD_INT 34
13670: PUSH
13671: LD_INT 47
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PPUSH
13689: CALL_OW 69
13693: ST_TO_ADDR
// if not tmp then
13694: LD_VAR 0 2
13698: NOT
13699: IFFALSE 13703
// exit ;
13701: GO 13732
// for i in tmp do
13703: LD_ADDR_VAR 0 1
13707: PUSH
13708: LD_VAR 0 2
13712: PUSH
13713: FOR_IN
13714: IFFALSE 13730
// begin SetLives ( i , 0 ) ;
13716: LD_VAR 0 1
13720: PPUSH
13721: LD_INT 0
13723: PPUSH
13724: CALL_OW 234
// end ;
13728: GO 13713
13730: POP
13731: POP
// end ;
13732: PPOPN 2
13734: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13735: LD_EXP 22
13739: PUSH
13740: LD_EXP 28
13744: AND
13745: IFFALSE 13829
13747: GO 13749
13749: DISABLE
13750: LD_INT 0
13752: PPUSH
13753: PPUSH
// begin enable ;
13754: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_INT 22
13762: PUSH
13763: LD_OWVAR 2
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PUSH
13772: LD_INT 32
13774: PUSH
13775: LD_INT 3
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PPUSH
13786: CALL_OW 69
13790: ST_TO_ADDR
// if not tmp then
13791: LD_VAR 0 2
13795: NOT
13796: IFFALSE 13800
// exit ;
13798: GO 13829
// for i in tmp do
13800: LD_ADDR_VAR 0 1
13804: PUSH
13805: LD_VAR 0 2
13809: PUSH
13810: FOR_IN
13811: IFFALSE 13827
// begin SetLives ( i , 0 ) ;
13813: LD_VAR 0 1
13817: PPUSH
13818: LD_INT 0
13820: PPUSH
13821: CALL_OW 234
// end ;
13825: GO 13810
13827: POP
13828: POP
// end ;
13829: PPOPN 2
13831: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13832: LD_EXP 22
13836: PUSH
13837: LD_EXP 25
13841: AND
13842: IFFALSE 13935
13844: GO 13846
13846: DISABLE
13847: LD_INT 0
13849: PPUSH
// begin enable ;
13850: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13851: LD_ADDR_VAR 0 1
13855: PUSH
13856: LD_INT 22
13858: PUSH
13859: LD_OWVAR 2
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 2
13870: PUSH
13871: LD_INT 25
13873: PUSH
13874: LD_INT 5
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 25
13883: PUSH
13884: LD_INT 9
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 25
13893: PUSH
13894: LD_INT 8
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PPUSH
13911: CALL_OW 69
13915: PUSH
13916: FOR_IN
13917: IFFALSE 13933
// begin SetClass ( i , 1 ) ;
13919: LD_VAR 0 1
13923: PPUSH
13924: LD_INT 1
13926: PPUSH
13927: CALL_OW 336
// end ;
13931: GO 13916
13933: POP
13934: POP
// end ;
13935: PPOPN 1
13937: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13938: LD_EXP 22
13942: PUSH
13943: LD_EXP 26
13947: AND
13948: PUSH
13949: LD_OWVAR 65
13953: PUSH
13954: LD_INT 7
13956: LESS
13957: AND
13958: IFFALSE 13972
13960: GO 13962
13962: DISABLE
// begin enable ;
13963: ENABLE
// game_speed := 7 ;
13964: LD_ADDR_OWVAR 65
13968: PUSH
13969: LD_INT 7
13971: ST_TO_ADDR
// end ;
13972: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13973: LD_EXP 22
13977: PUSH
13978: LD_EXP 29
13982: AND
13983: IFFALSE 14185
13985: GO 13987
13987: DISABLE
13988: LD_INT 0
13990: PPUSH
13991: PPUSH
13992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13993: LD_ADDR_VAR 0 3
13997: PUSH
13998: LD_INT 81
14000: PUSH
14001: LD_OWVAR 2
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 21
14012: PUSH
14013: LD_INT 1
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PPUSH
14024: CALL_OW 69
14028: ST_TO_ADDR
// if not tmp then
14029: LD_VAR 0 3
14033: NOT
14034: IFFALSE 14038
// exit ;
14036: GO 14185
// if tmp > 5 then
14038: LD_VAR 0 3
14042: PUSH
14043: LD_INT 5
14045: GREATER
14046: IFFALSE 14058
// k := 5 else
14048: LD_ADDR_VAR 0 2
14052: PUSH
14053: LD_INT 5
14055: ST_TO_ADDR
14056: GO 14068
// k := tmp ;
14058: LD_ADDR_VAR 0 2
14062: PUSH
14063: LD_VAR 0 3
14067: ST_TO_ADDR
// for i := 1 to k do
14068: LD_ADDR_VAR 0 1
14072: PUSH
14073: DOUBLE
14074: LD_INT 1
14076: DEC
14077: ST_TO_ADDR
14078: LD_VAR 0 2
14082: PUSH
14083: FOR_TO
14084: IFFALSE 14183
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14086: LD_VAR 0 3
14090: PUSH
14091: LD_VAR 0 1
14095: ARRAY
14096: PPUSH
14097: LD_VAR 0 1
14101: PUSH
14102: LD_INT 4
14104: MOD
14105: PUSH
14106: LD_INT 1
14108: PLUS
14109: PPUSH
14110: CALL_OW 259
14114: PUSH
14115: LD_INT 10
14117: LESS
14118: IFFALSE 14181
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14120: LD_VAR 0 3
14124: PUSH
14125: LD_VAR 0 1
14129: ARRAY
14130: PPUSH
14131: LD_VAR 0 1
14135: PUSH
14136: LD_INT 4
14138: MOD
14139: PUSH
14140: LD_INT 1
14142: PLUS
14143: PPUSH
14144: LD_VAR 0 3
14148: PUSH
14149: LD_VAR 0 1
14153: ARRAY
14154: PPUSH
14155: LD_VAR 0 1
14159: PUSH
14160: LD_INT 4
14162: MOD
14163: PUSH
14164: LD_INT 1
14166: PLUS
14167: PPUSH
14168: CALL_OW 259
14172: PUSH
14173: LD_INT 1
14175: PLUS
14176: PPUSH
14177: CALL_OW 237
14181: GO 14083
14183: POP
14184: POP
// end ;
14185: PPOPN 3
14187: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14188: LD_EXP 22
14192: PUSH
14193: LD_EXP 30
14197: AND
14198: IFFALSE 14218
14200: GO 14202
14202: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14203: LD_INT 4
14205: PPUSH
14206: LD_OWVAR 2
14210: PPUSH
14211: LD_INT 0
14213: PPUSH
14214: CALL_OW 324
14218: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14219: LD_EXP 22
14223: PUSH
14224: LD_EXP 59
14228: AND
14229: IFFALSE 14249
14231: GO 14233
14233: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14234: LD_INT 19
14236: PPUSH
14237: LD_OWVAR 2
14241: PPUSH
14242: LD_INT 0
14244: PPUSH
14245: CALL_OW 324
14249: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14250: LD_EXP 22
14254: PUSH
14255: LD_EXP 31
14259: AND
14260: IFFALSE 14362
14262: GO 14264
14264: DISABLE
14265: LD_INT 0
14267: PPUSH
14268: PPUSH
// begin enable ;
14269: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14270: LD_ADDR_VAR 0 2
14274: PUSH
14275: LD_INT 22
14277: PUSH
14278: LD_OWVAR 2
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 2
14289: PUSH
14290: LD_INT 34
14292: PUSH
14293: LD_INT 11
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 34
14302: PUSH
14303: LD_INT 30
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: LIST
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PPUSH
14319: CALL_OW 69
14323: ST_TO_ADDR
// if not tmp then
14324: LD_VAR 0 2
14328: NOT
14329: IFFALSE 14333
// exit ;
14331: GO 14362
// for i in tmp do
14333: LD_ADDR_VAR 0 1
14337: PUSH
14338: LD_VAR 0 2
14342: PUSH
14343: FOR_IN
14344: IFFALSE 14360
// begin SetLives ( i , 0 ) ;
14346: LD_VAR 0 1
14350: PPUSH
14351: LD_INT 0
14353: PPUSH
14354: CALL_OW 234
// end ;
14358: GO 14343
14360: POP
14361: POP
// end ;
14362: PPOPN 2
14364: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14365: LD_EXP 22
14369: PUSH
14370: LD_EXP 32
14374: AND
14375: IFFALSE 14395
14377: GO 14379
14379: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14380: LD_INT 32
14382: PPUSH
14383: LD_OWVAR 2
14387: PPUSH
14388: LD_INT 0
14390: PPUSH
14391: CALL_OW 324
14395: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14396: LD_EXP 22
14400: PUSH
14401: LD_EXP 33
14405: AND
14406: IFFALSE 14587
14408: GO 14410
14410: DISABLE
14411: LD_INT 0
14413: PPUSH
14414: PPUSH
14415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14416: LD_ADDR_VAR 0 2
14420: PUSH
14421: LD_INT 22
14423: PUSH
14424: LD_OWVAR 2
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 33
14435: PUSH
14436: LD_INT 3
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PPUSH
14447: CALL_OW 69
14451: ST_TO_ADDR
// if not tmp then
14452: LD_VAR 0 2
14456: NOT
14457: IFFALSE 14461
// exit ;
14459: GO 14587
// side := 0 ;
14461: LD_ADDR_VAR 0 3
14465: PUSH
14466: LD_INT 0
14468: ST_TO_ADDR
// for i := 1 to 8 do
14469: LD_ADDR_VAR 0 1
14473: PUSH
14474: DOUBLE
14475: LD_INT 1
14477: DEC
14478: ST_TO_ADDR
14479: LD_INT 8
14481: PUSH
14482: FOR_TO
14483: IFFALSE 14531
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14485: LD_OWVAR 2
14489: PUSH
14490: LD_VAR 0 1
14494: NONEQUAL
14495: PUSH
14496: LD_OWVAR 2
14500: PPUSH
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL_OW 81
14510: PUSH
14511: LD_INT 2
14513: EQUAL
14514: AND
14515: IFFALSE 14529
// begin side := i ;
14517: LD_ADDR_VAR 0 3
14521: PUSH
14522: LD_VAR 0 1
14526: ST_TO_ADDR
// break ;
14527: GO 14531
// end ;
14529: GO 14482
14531: POP
14532: POP
// if not side then
14533: LD_VAR 0 3
14537: NOT
14538: IFFALSE 14542
// exit ;
14540: GO 14587
// for i := 1 to tmp do
14542: LD_ADDR_VAR 0 1
14546: PUSH
14547: DOUBLE
14548: LD_INT 1
14550: DEC
14551: ST_TO_ADDR
14552: LD_VAR 0 2
14556: PUSH
14557: FOR_TO
14558: IFFALSE 14585
// if Prob ( 60 ) then
14560: LD_INT 60
14562: PPUSH
14563: CALL_OW 13
14567: IFFALSE 14583
// SetSide ( i , side ) ;
14569: LD_VAR 0 1
14573: PPUSH
14574: LD_VAR 0 3
14578: PPUSH
14579: CALL_OW 235
14583: GO 14557
14585: POP
14586: POP
// end ;
14587: PPOPN 3
14589: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14590: LD_EXP 22
14594: PUSH
14595: LD_EXP 35
14599: AND
14600: IFFALSE 14719
14602: GO 14604
14604: DISABLE
14605: LD_INT 0
14607: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14608: LD_ADDR_VAR 0 1
14612: PUSH
14613: LD_INT 22
14615: PUSH
14616: LD_OWVAR 2
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: PUSH
14625: LD_INT 21
14627: PUSH
14628: LD_INT 1
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 3
14637: PUSH
14638: LD_INT 23
14640: PUSH
14641: LD_INT 0
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: LIST
14656: PPUSH
14657: CALL_OW 69
14661: PUSH
14662: FOR_IN
14663: IFFALSE 14717
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14665: LD_VAR 0 1
14669: PPUSH
14670: CALL_OW 257
14674: PUSH
14675: LD_INT 1
14677: PUSH
14678: LD_INT 2
14680: PUSH
14681: LD_INT 3
14683: PUSH
14684: LD_INT 4
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: IN
14693: IFFALSE 14715
// SetClass ( un , rand ( 1 , 4 ) ) ;
14695: LD_VAR 0 1
14699: PPUSH
14700: LD_INT 1
14702: PPUSH
14703: LD_INT 4
14705: PPUSH
14706: CALL_OW 12
14710: PPUSH
14711: CALL_OW 336
14715: GO 14662
14717: POP
14718: POP
// end ;
14719: PPOPN 1
14721: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14722: LD_EXP 22
14726: PUSH
14727: LD_EXP 34
14731: AND
14732: IFFALSE 14811
14734: GO 14736
14736: DISABLE
14737: LD_INT 0
14739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14740: LD_ADDR_VAR 0 1
14744: PUSH
14745: LD_INT 22
14747: PUSH
14748: LD_OWVAR 2
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 21
14759: PUSH
14760: LD_INT 3
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PPUSH
14771: CALL_OW 69
14775: ST_TO_ADDR
// if not tmp then
14776: LD_VAR 0 1
14780: NOT
14781: IFFALSE 14785
// exit ;
14783: GO 14811
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14785: LD_VAR 0 1
14789: PUSH
14790: LD_INT 1
14792: PPUSH
14793: LD_VAR 0 1
14797: PPUSH
14798: CALL_OW 12
14802: ARRAY
14803: PPUSH
14804: LD_INT 100
14806: PPUSH
14807: CALL_OW 234
// end ;
14811: PPOPN 1
14813: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14814: LD_EXP 22
14818: PUSH
14819: LD_EXP 36
14823: AND
14824: IFFALSE 14922
14826: GO 14828
14828: DISABLE
14829: LD_INT 0
14831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14832: LD_ADDR_VAR 0 1
14836: PUSH
14837: LD_INT 22
14839: PUSH
14840: LD_OWVAR 2
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 21
14851: PUSH
14852: LD_INT 1
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PPUSH
14863: CALL_OW 69
14867: ST_TO_ADDR
// if not tmp then
14868: LD_VAR 0 1
14872: NOT
14873: IFFALSE 14877
// exit ;
14875: GO 14922
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14877: LD_VAR 0 1
14881: PUSH
14882: LD_INT 1
14884: PPUSH
14885: LD_VAR 0 1
14889: PPUSH
14890: CALL_OW 12
14894: ARRAY
14895: PPUSH
14896: LD_INT 1
14898: PPUSH
14899: LD_INT 4
14901: PPUSH
14902: CALL_OW 12
14906: PPUSH
14907: LD_INT 3000
14909: PPUSH
14910: LD_INT 9000
14912: PPUSH
14913: CALL_OW 12
14917: PPUSH
14918: CALL_OW 492
// end ;
14922: PPOPN 1
14924: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14925: LD_EXP 22
14929: PUSH
14930: LD_EXP 37
14934: AND
14935: IFFALSE 14955
14937: GO 14939
14939: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14940: LD_INT 1
14942: PPUSH
14943: LD_OWVAR 2
14947: PPUSH
14948: LD_INT 0
14950: PPUSH
14951: CALL_OW 324
14955: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14956: LD_EXP 22
14960: PUSH
14961: LD_EXP 38
14965: AND
14966: IFFALSE 15049
14968: GO 14970
14970: DISABLE
14971: LD_INT 0
14973: PPUSH
14974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14975: LD_ADDR_VAR 0 2
14979: PUSH
14980: LD_INT 22
14982: PUSH
14983: LD_OWVAR 2
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 21
14994: PUSH
14995: LD_INT 3
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PPUSH
15006: CALL_OW 69
15010: ST_TO_ADDR
// if not tmp then
15011: LD_VAR 0 2
15015: NOT
15016: IFFALSE 15020
// exit ;
15018: GO 15049
// for i in tmp do
15020: LD_ADDR_VAR 0 1
15024: PUSH
15025: LD_VAR 0 2
15029: PUSH
15030: FOR_IN
15031: IFFALSE 15047
// SetBLevel ( i , 10 ) ;
15033: LD_VAR 0 1
15037: PPUSH
15038: LD_INT 10
15040: PPUSH
15041: CALL_OW 241
15045: GO 15030
15047: POP
15048: POP
// end ;
15049: PPOPN 2
15051: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15052: LD_EXP 22
15056: PUSH
15057: LD_EXP 39
15061: AND
15062: IFFALSE 15173
15064: GO 15066
15066: DISABLE
15067: LD_INT 0
15069: PPUSH
15070: PPUSH
15071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15072: LD_ADDR_VAR 0 3
15076: PUSH
15077: LD_INT 22
15079: PUSH
15080: LD_OWVAR 2
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: LD_INT 25
15091: PUSH
15092: LD_INT 1
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PPUSH
15103: CALL_OW 69
15107: ST_TO_ADDR
// if not tmp then
15108: LD_VAR 0 3
15112: NOT
15113: IFFALSE 15117
// exit ;
15115: GO 15173
// un := tmp [ rand ( 1 , tmp ) ] ;
15117: LD_ADDR_VAR 0 2
15121: PUSH
15122: LD_VAR 0 3
15126: PUSH
15127: LD_INT 1
15129: PPUSH
15130: LD_VAR 0 3
15134: PPUSH
15135: CALL_OW 12
15139: ARRAY
15140: ST_TO_ADDR
// if Crawls ( un ) then
15141: LD_VAR 0 2
15145: PPUSH
15146: CALL_OW 318
15150: IFFALSE 15161
// ComWalk ( un ) ;
15152: LD_VAR 0 2
15156: PPUSH
15157: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15161: LD_VAR 0 2
15165: PPUSH
15166: LD_INT 5
15168: PPUSH
15169: CALL_OW 336
// end ;
15173: PPOPN 3
15175: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15176: LD_EXP 22
15180: PUSH
15181: LD_EXP 40
15185: AND
15186: PUSH
15187: LD_OWVAR 67
15191: PUSH
15192: LD_INT 4
15194: LESS
15195: AND
15196: IFFALSE 15215
15198: GO 15200
15200: DISABLE
// begin Difficulty := Difficulty + 1 ;
15201: LD_ADDR_OWVAR 67
15205: PUSH
15206: LD_OWVAR 67
15210: PUSH
15211: LD_INT 1
15213: PLUS
15214: ST_TO_ADDR
// end ;
15215: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15216: LD_EXP 22
15220: PUSH
15221: LD_EXP 41
15225: AND
15226: IFFALSE 15329
15228: GO 15230
15230: DISABLE
15231: LD_INT 0
15233: PPUSH
// begin for i := 1 to 5 do
15234: LD_ADDR_VAR 0 1
15238: PUSH
15239: DOUBLE
15240: LD_INT 1
15242: DEC
15243: ST_TO_ADDR
15244: LD_INT 5
15246: PUSH
15247: FOR_TO
15248: IFFALSE 15327
// begin uc_nation := nation_nature ;
15250: LD_ADDR_OWVAR 21
15254: PUSH
15255: LD_INT 0
15257: ST_TO_ADDR
// uc_side := 0 ;
15258: LD_ADDR_OWVAR 20
15262: PUSH
15263: LD_INT 0
15265: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15266: LD_ADDR_OWVAR 29
15270: PUSH
15271: LD_INT 12
15273: PUSH
15274: LD_INT 12
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: ST_TO_ADDR
// hc_agressivity := 20 ;
15281: LD_ADDR_OWVAR 35
15285: PUSH
15286: LD_INT 20
15288: ST_TO_ADDR
// hc_class := class_tiger ;
15289: LD_ADDR_OWVAR 28
15293: PUSH
15294: LD_INT 14
15296: ST_TO_ADDR
// hc_gallery :=  ;
15297: LD_ADDR_OWVAR 33
15301: PUSH
15302: LD_STRING 
15304: ST_TO_ADDR
// hc_name :=  ;
15305: LD_ADDR_OWVAR 26
15309: PUSH
15310: LD_STRING 
15312: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15313: CALL_OW 44
15317: PPUSH
15318: LD_INT 0
15320: PPUSH
15321: CALL_OW 51
// end ;
15325: GO 15247
15327: POP
15328: POP
// end ;
15329: PPOPN 1
15331: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15332: LD_EXP 22
15336: PUSH
15337: LD_EXP 42
15341: AND
15342: IFFALSE 15351
15344: GO 15346
15346: DISABLE
// StreamSibBomb ;
15347: CALL 15352 0 0
15351: END
// export function StreamSibBomb ; var i , x , y ; begin
15352: LD_INT 0
15354: PPUSH
15355: PPUSH
15356: PPUSH
15357: PPUSH
// result := false ;
15358: LD_ADDR_VAR 0 1
15362: PUSH
15363: LD_INT 0
15365: ST_TO_ADDR
// for i := 1 to 16 do
15366: LD_ADDR_VAR 0 2
15370: PUSH
15371: DOUBLE
15372: LD_INT 1
15374: DEC
15375: ST_TO_ADDR
15376: LD_INT 16
15378: PUSH
15379: FOR_TO
15380: IFFALSE 15579
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15382: LD_ADDR_VAR 0 3
15386: PUSH
15387: LD_INT 10
15389: PUSH
15390: LD_INT 20
15392: PUSH
15393: LD_INT 30
15395: PUSH
15396: LD_INT 40
15398: PUSH
15399: LD_INT 50
15401: PUSH
15402: LD_INT 60
15404: PUSH
15405: LD_INT 70
15407: PUSH
15408: LD_INT 80
15410: PUSH
15411: LD_INT 90
15413: PUSH
15414: LD_INT 100
15416: PUSH
15417: LD_INT 110
15419: PUSH
15420: LD_INT 120
15422: PUSH
15423: LD_INT 130
15425: PUSH
15426: LD_INT 140
15428: PUSH
15429: LD_INT 150
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 1
15451: PPUSH
15452: LD_INT 15
15454: PPUSH
15455: CALL_OW 12
15459: ARRAY
15460: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15461: LD_ADDR_VAR 0 4
15465: PUSH
15466: LD_INT 10
15468: PUSH
15469: LD_INT 20
15471: PUSH
15472: LD_INT 30
15474: PUSH
15475: LD_INT 40
15477: PUSH
15478: LD_INT 50
15480: PUSH
15481: LD_INT 60
15483: PUSH
15484: LD_INT 70
15486: PUSH
15487: LD_INT 80
15489: PUSH
15490: LD_INT 90
15492: PUSH
15493: LD_INT 100
15495: PUSH
15496: LD_INT 110
15498: PUSH
15499: LD_INT 120
15501: PUSH
15502: LD_INT 130
15504: PUSH
15505: LD_INT 140
15507: PUSH
15508: LD_INT 150
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 1
15530: PPUSH
15531: LD_INT 15
15533: PPUSH
15534: CALL_OW 12
15538: ARRAY
15539: ST_TO_ADDR
// if ValidHex ( x , y ) then
15540: LD_VAR 0 3
15544: PPUSH
15545: LD_VAR 0 4
15549: PPUSH
15550: CALL_OW 488
15554: IFFALSE 15577
// begin result := [ x , y ] ;
15556: LD_ADDR_VAR 0 1
15560: PUSH
15561: LD_VAR 0 3
15565: PUSH
15566: LD_VAR 0 4
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: ST_TO_ADDR
// break ;
15575: GO 15579
// end ; end ;
15577: GO 15379
15579: POP
15580: POP
// if result then
15581: LD_VAR 0 1
15585: IFFALSE 15645
// begin ToLua ( playSibBomb() ) ;
15587: LD_STRING playSibBomb()
15589: PPUSH
15590: CALL_OW 559
// wait ( 0 0$14 ) ;
15594: LD_INT 490
15596: PPUSH
15597: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15601: LD_VAR 0 1
15605: PUSH
15606: LD_INT 1
15608: ARRAY
15609: PPUSH
15610: LD_VAR 0 1
15614: PUSH
15615: LD_INT 2
15617: ARRAY
15618: PPUSH
15619: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15623: LD_VAR 0 1
15627: PUSH
15628: LD_INT 1
15630: ARRAY
15631: PPUSH
15632: LD_VAR 0 1
15636: PUSH
15637: LD_INT 2
15639: ARRAY
15640: PPUSH
15641: CALL_OW 429
// end ; end ;
15645: LD_VAR 0 1
15649: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15650: LD_EXP 22
15654: PUSH
15655: LD_EXP 44
15659: AND
15660: IFFALSE 15672
15662: GO 15664
15664: DISABLE
// YouLost (  ) ;
15665: LD_STRING 
15667: PPUSH
15668: CALL_OW 104
15672: END
// every 0 0$1 trigger StreamModeActive and sFog do
15673: LD_EXP 22
15677: PUSH
15678: LD_EXP 43
15682: AND
15683: IFFALSE 15697
15685: GO 15687
15687: DISABLE
// FogOff ( your_side ) ;
15688: LD_OWVAR 2
15692: PPUSH
15693: CALL_OW 344
15697: END
// every 0 0$1 trigger StreamModeActive and sSun do
15698: LD_EXP 22
15702: PUSH
15703: LD_EXP 45
15707: AND
15708: IFFALSE 15736
15710: GO 15712
15712: DISABLE
// begin solar_recharge_percent := 0 ;
15713: LD_ADDR_OWVAR 79
15717: PUSH
15718: LD_INT 0
15720: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15721: LD_INT 10500
15723: PPUSH
15724: CALL_OW 67
// solar_recharge_percent := 100 ;
15728: LD_ADDR_OWVAR 79
15732: PUSH
15733: LD_INT 100
15735: ST_TO_ADDR
// end ;
15736: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15737: LD_EXP 22
15741: PUSH
15742: LD_EXP 46
15746: AND
15747: IFFALSE 15986
15749: GO 15751
15751: DISABLE
15752: LD_INT 0
15754: PPUSH
15755: PPUSH
15756: PPUSH
// begin tmp := [ ] ;
15757: LD_ADDR_VAR 0 3
15761: PUSH
15762: EMPTY
15763: ST_TO_ADDR
// for i := 1 to 6 do
15764: LD_ADDR_VAR 0 1
15768: PUSH
15769: DOUBLE
15770: LD_INT 1
15772: DEC
15773: ST_TO_ADDR
15774: LD_INT 6
15776: PUSH
15777: FOR_TO
15778: IFFALSE 15883
// begin uc_nation := nation_nature ;
15780: LD_ADDR_OWVAR 21
15784: PUSH
15785: LD_INT 0
15787: ST_TO_ADDR
// uc_side := 0 ;
15788: LD_ADDR_OWVAR 20
15792: PUSH
15793: LD_INT 0
15795: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15796: LD_ADDR_OWVAR 29
15800: PUSH
15801: LD_INT 12
15803: PUSH
15804: LD_INT 12
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: ST_TO_ADDR
// hc_agressivity := 20 ;
15811: LD_ADDR_OWVAR 35
15815: PUSH
15816: LD_INT 20
15818: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15819: LD_ADDR_OWVAR 28
15823: PUSH
15824: LD_INT 17
15826: ST_TO_ADDR
// hc_gallery :=  ;
15827: LD_ADDR_OWVAR 33
15831: PUSH
15832: LD_STRING 
15834: ST_TO_ADDR
// hc_name :=  ;
15835: LD_ADDR_OWVAR 26
15839: PUSH
15840: LD_STRING 
15842: ST_TO_ADDR
// un := CreateHuman ;
15843: LD_ADDR_VAR 0 2
15847: PUSH
15848: CALL_OW 44
15852: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15853: LD_VAR 0 2
15857: PPUSH
15858: LD_INT 1
15860: PPUSH
15861: CALL_OW 51
// tmp := tmp ^ un ;
15865: LD_ADDR_VAR 0 3
15869: PUSH
15870: LD_VAR 0 3
15874: PUSH
15875: LD_VAR 0 2
15879: ADD
15880: ST_TO_ADDR
// end ;
15881: GO 15777
15883: POP
15884: POP
// repeat wait ( 0 0$1 ) ;
15885: LD_INT 35
15887: PPUSH
15888: CALL_OW 67
// for un in tmp do
15892: LD_ADDR_VAR 0 2
15896: PUSH
15897: LD_VAR 0 3
15901: PUSH
15902: FOR_IN
15903: IFFALSE 15977
// begin if IsDead ( un ) then
15905: LD_VAR 0 2
15909: PPUSH
15910: CALL_OW 301
15914: IFFALSE 15934
// begin tmp := tmp diff un ;
15916: LD_ADDR_VAR 0 3
15920: PUSH
15921: LD_VAR 0 3
15925: PUSH
15926: LD_VAR 0 2
15930: DIFF
15931: ST_TO_ADDR
// continue ;
15932: GO 15902
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15934: LD_VAR 0 2
15938: PPUSH
15939: LD_INT 3
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_INT 0
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PPUSH
15956: CALL_OW 69
15960: PPUSH
15961: LD_VAR 0 2
15965: PPUSH
15966: CALL_OW 74
15970: PPUSH
15971: CALL_OW 115
// end ;
15975: GO 15902
15977: POP
15978: POP
// until not tmp ;
15979: LD_VAR 0 3
15983: NOT
15984: IFFALSE 15885
// end ;
15986: PPOPN 3
15988: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15989: LD_EXP 22
15993: PUSH
15994: LD_EXP 47
15998: AND
15999: IFFALSE 16053
16001: GO 16003
16003: DISABLE
// begin ToLua ( displayTroll(); ) ;
16004: LD_STRING displayTroll();
16006: PPUSH
16007: CALL_OW 559
// wait ( 3 3$00 ) ;
16011: LD_INT 6300
16013: PPUSH
16014: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16018: LD_STRING hideTroll();
16020: PPUSH
16021: CALL_OW 559
// wait ( 1 1$00 ) ;
16025: LD_INT 2100
16027: PPUSH
16028: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16032: LD_STRING displayTroll();
16034: PPUSH
16035: CALL_OW 559
// wait ( 1 1$00 ) ;
16039: LD_INT 2100
16041: PPUSH
16042: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16046: LD_STRING hideTroll();
16048: PPUSH
16049: CALL_OW 559
// end ;
16053: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16054: LD_EXP 22
16058: PUSH
16059: LD_EXP 48
16063: AND
16064: IFFALSE 16127
16066: GO 16068
16068: DISABLE
16069: LD_INT 0
16071: PPUSH
// begin p := 0 ;
16072: LD_ADDR_VAR 0 1
16076: PUSH
16077: LD_INT 0
16079: ST_TO_ADDR
// repeat game_speed := 1 ;
16080: LD_ADDR_OWVAR 65
16084: PUSH
16085: LD_INT 1
16087: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16088: LD_INT 35
16090: PPUSH
16091: CALL_OW 67
// p := p + 1 ;
16095: LD_ADDR_VAR 0 1
16099: PUSH
16100: LD_VAR 0 1
16104: PUSH
16105: LD_INT 1
16107: PLUS
16108: ST_TO_ADDR
// until p >= 60 ;
16109: LD_VAR 0 1
16113: PUSH
16114: LD_INT 60
16116: GREATEREQUAL
16117: IFFALSE 16080
// game_speed := 4 ;
16119: LD_ADDR_OWVAR 65
16123: PUSH
16124: LD_INT 4
16126: ST_TO_ADDR
// end ;
16127: PPOPN 1
16129: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16130: LD_EXP 22
16134: PUSH
16135: LD_EXP 49
16139: AND
16140: IFFALSE 16286
16142: GO 16144
16144: DISABLE
16145: LD_INT 0
16147: PPUSH
16148: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16149: LD_ADDR_VAR 0 1
16153: PUSH
16154: LD_INT 22
16156: PUSH
16157: LD_OWVAR 2
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: LD_INT 2
16168: PUSH
16169: LD_INT 30
16171: PUSH
16172: LD_INT 0
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 30
16181: PUSH
16182: LD_INT 1
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PPUSH
16198: CALL_OW 69
16202: ST_TO_ADDR
// if not depot then
16203: LD_VAR 0 1
16207: NOT
16208: IFFALSE 16212
// exit ;
16210: GO 16286
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16212: LD_ADDR_VAR 0 2
16216: PUSH
16217: LD_VAR 0 1
16221: PUSH
16222: LD_INT 1
16224: PPUSH
16225: LD_VAR 0 1
16229: PPUSH
16230: CALL_OW 12
16234: ARRAY
16235: PPUSH
16236: CALL_OW 274
16240: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16241: LD_VAR 0 2
16245: PPUSH
16246: LD_INT 1
16248: PPUSH
16249: LD_INT 0
16251: PPUSH
16252: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16256: LD_VAR 0 2
16260: PPUSH
16261: LD_INT 2
16263: PPUSH
16264: LD_INT 0
16266: PPUSH
16267: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16271: LD_VAR 0 2
16275: PPUSH
16276: LD_INT 3
16278: PPUSH
16279: LD_INT 0
16281: PPUSH
16282: CALL_OW 277
// end ;
16286: PPOPN 2
16288: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16289: LD_EXP 22
16293: PUSH
16294: LD_EXP 50
16298: AND
16299: IFFALSE 16396
16301: GO 16303
16303: DISABLE
16304: LD_INT 0
16306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16307: LD_ADDR_VAR 0 1
16311: PUSH
16312: LD_INT 22
16314: PUSH
16315: LD_OWVAR 2
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 21
16326: PUSH
16327: LD_INT 1
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 3
16336: PUSH
16337: LD_INT 23
16339: PUSH
16340: LD_INT 0
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: EMPTY
16352: LIST
16353: LIST
16354: LIST
16355: PPUSH
16356: CALL_OW 69
16360: ST_TO_ADDR
// if not tmp then
16361: LD_VAR 0 1
16365: NOT
16366: IFFALSE 16370
// exit ;
16368: GO 16396
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16370: LD_VAR 0 1
16374: PUSH
16375: LD_INT 1
16377: PPUSH
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 12
16387: ARRAY
16388: PPUSH
16389: LD_INT 200
16391: PPUSH
16392: CALL_OW 234
// end ;
16396: PPOPN 1
16398: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16399: LD_EXP 22
16403: PUSH
16404: LD_EXP 51
16408: AND
16409: IFFALSE 16488
16411: GO 16413
16413: DISABLE
16414: LD_INT 0
16416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16417: LD_ADDR_VAR 0 1
16421: PUSH
16422: LD_INT 22
16424: PUSH
16425: LD_OWVAR 2
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 21
16436: PUSH
16437: LD_INT 2
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PPUSH
16448: CALL_OW 69
16452: ST_TO_ADDR
// if not tmp then
16453: LD_VAR 0 1
16457: NOT
16458: IFFALSE 16462
// exit ;
16460: GO 16488
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16462: LD_VAR 0 1
16466: PUSH
16467: LD_INT 1
16469: PPUSH
16470: LD_VAR 0 1
16474: PPUSH
16475: CALL_OW 12
16479: ARRAY
16480: PPUSH
16481: LD_INT 60
16483: PPUSH
16484: CALL_OW 234
// end ;
16488: PPOPN 1
16490: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16491: LD_EXP 22
16495: PUSH
16496: LD_EXP 52
16500: AND
16501: IFFALSE 16600
16503: GO 16505
16505: DISABLE
16506: LD_INT 0
16508: PPUSH
16509: PPUSH
// begin enable ;
16510: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16511: LD_ADDR_VAR 0 1
16515: PUSH
16516: LD_INT 22
16518: PUSH
16519: LD_OWVAR 2
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: LD_INT 61
16530: PUSH
16531: EMPTY
16532: LIST
16533: PUSH
16534: LD_INT 33
16536: PUSH
16537: LD_INT 2
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 69
16553: ST_TO_ADDR
// if not tmp then
16554: LD_VAR 0 1
16558: NOT
16559: IFFALSE 16563
// exit ;
16561: GO 16600
// for i in tmp do
16563: LD_ADDR_VAR 0 2
16567: PUSH
16568: LD_VAR 0 1
16572: PUSH
16573: FOR_IN
16574: IFFALSE 16598
// if IsControledBy ( i ) then
16576: LD_VAR 0 2
16580: PPUSH
16581: CALL_OW 312
16585: IFFALSE 16596
// ComUnlink ( i ) ;
16587: LD_VAR 0 2
16591: PPUSH
16592: CALL_OW 136
16596: GO 16573
16598: POP
16599: POP
// end ;
16600: PPOPN 2
16602: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16603: LD_EXP 22
16607: PUSH
16608: LD_EXP 53
16612: AND
16613: IFFALSE 16753
16615: GO 16617
16617: DISABLE
16618: LD_INT 0
16620: PPUSH
16621: PPUSH
// begin ToLua ( displayPowell(); ) ;
16622: LD_STRING displayPowell();
16624: PPUSH
16625: CALL_OW 559
// uc_side := 0 ;
16629: LD_ADDR_OWVAR 20
16633: PUSH
16634: LD_INT 0
16636: ST_TO_ADDR
// uc_nation := 2 ;
16637: LD_ADDR_OWVAR 21
16641: PUSH
16642: LD_INT 2
16644: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16645: LD_ADDR_OWVAR 37
16649: PUSH
16650: LD_INT 14
16652: ST_TO_ADDR
// vc_engine := engine_siberite ;
16653: LD_ADDR_OWVAR 39
16657: PUSH
16658: LD_INT 3
16660: ST_TO_ADDR
// vc_control := control_apeman ;
16661: LD_ADDR_OWVAR 38
16665: PUSH
16666: LD_INT 5
16668: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16669: LD_ADDR_OWVAR 40
16673: PUSH
16674: LD_INT 29
16676: ST_TO_ADDR
// un := CreateVehicle ;
16677: LD_ADDR_VAR 0 2
16681: PUSH
16682: CALL_OW 45
16686: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16687: LD_VAR 0 2
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16699: LD_INT 35
16701: PPUSH
16702: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16706: LD_VAR 0 2
16710: PPUSH
16711: LD_INT 22
16713: PUSH
16714: LD_OWVAR 2
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PPUSH
16723: CALL_OW 69
16727: PPUSH
16728: LD_VAR 0 2
16732: PPUSH
16733: CALL_OW 74
16737: PPUSH
16738: CALL_OW 115
// until IsDead ( un ) ;
16742: LD_VAR 0 2
16746: PPUSH
16747: CALL_OW 301
16751: IFFALSE 16699
// end ;
16753: PPOPN 2
16755: END
// every 0 0$1 trigger StreamModeActive and sStu do
16756: LD_EXP 22
16760: PUSH
16761: LD_EXP 61
16765: AND
16766: IFFALSE 16782
16768: GO 16770
16770: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16771: LD_STRING displayStucuk();
16773: PPUSH
16774: CALL_OW 559
// ResetFog ;
16778: CALL_OW 335
// end ;
16782: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16783: LD_EXP 22
16787: PUSH
16788: LD_EXP 54
16792: AND
16793: IFFALSE 16934
16795: GO 16797
16797: DISABLE
16798: LD_INT 0
16800: PPUSH
16801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16802: LD_ADDR_VAR 0 2
16806: PUSH
16807: LD_INT 22
16809: PUSH
16810: LD_OWVAR 2
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 21
16821: PUSH
16822: LD_INT 1
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PPUSH
16833: CALL_OW 69
16837: ST_TO_ADDR
// if not tmp then
16838: LD_VAR 0 2
16842: NOT
16843: IFFALSE 16847
// exit ;
16845: GO 16934
// un := tmp [ rand ( 1 , tmp ) ] ;
16847: LD_ADDR_VAR 0 1
16851: PUSH
16852: LD_VAR 0 2
16856: PUSH
16857: LD_INT 1
16859: PPUSH
16860: LD_VAR 0 2
16864: PPUSH
16865: CALL_OW 12
16869: ARRAY
16870: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16871: LD_VAR 0 1
16875: PPUSH
16876: LD_INT 0
16878: PPUSH
16879: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16883: LD_VAR 0 1
16887: PPUSH
16888: LD_OWVAR 3
16892: PUSH
16893: LD_VAR 0 1
16897: DIFF
16898: PPUSH
16899: LD_VAR 0 1
16903: PPUSH
16904: CALL_OW 74
16908: PPUSH
16909: CALL_OW 115
// wait ( 0 0$20 ) ;
16913: LD_INT 700
16915: PPUSH
16916: CALL_OW 67
// SetSide ( un , your_side ) ;
16920: LD_VAR 0 1
16924: PPUSH
16925: LD_OWVAR 2
16929: PPUSH
16930: CALL_OW 235
// end ;
16934: PPOPN 2
16936: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16937: LD_EXP 22
16941: PUSH
16942: LD_EXP 55
16946: AND
16947: IFFALSE 17053
16949: GO 16951
16951: DISABLE
16952: LD_INT 0
16954: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16955: LD_ADDR_VAR 0 1
16959: PUSH
16960: LD_INT 22
16962: PUSH
16963: LD_OWVAR 2
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: LD_INT 30
16977: PUSH
16978: LD_INT 0
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 30
16987: PUSH
16988: LD_INT 1
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: LIST
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PPUSH
17004: CALL_OW 69
17008: ST_TO_ADDR
// if not depot then
17009: LD_VAR 0 1
17013: NOT
17014: IFFALSE 17018
// exit ;
17016: GO 17053
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17018: LD_VAR 0 1
17022: PUSH
17023: LD_INT 1
17025: ARRAY
17026: PPUSH
17027: CALL_OW 250
17031: PPUSH
17032: LD_VAR 0 1
17036: PUSH
17037: LD_INT 1
17039: ARRAY
17040: PPUSH
17041: CALL_OW 251
17045: PPUSH
17046: LD_INT 70
17048: PPUSH
17049: CALL_OW 495
// end ;
17053: PPOPN 1
17055: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17056: LD_EXP 22
17060: PUSH
17061: LD_EXP 56
17065: AND
17066: IFFALSE 17277
17068: GO 17070
17070: DISABLE
17071: LD_INT 0
17073: PPUSH
17074: PPUSH
17075: PPUSH
17076: PPUSH
17077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17078: LD_ADDR_VAR 0 5
17082: PUSH
17083: LD_INT 22
17085: PUSH
17086: LD_OWVAR 2
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 21
17097: PUSH
17098: LD_INT 1
17100: PUSH
17101: EMPTY
17102: LIST
17103: LIST
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PPUSH
17109: CALL_OW 69
17113: ST_TO_ADDR
// if not tmp then
17114: LD_VAR 0 5
17118: NOT
17119: IFFALSE 17123
// exit ;
17121: GO 17277
// for i in tmp do
17123: LD_ADDR_VAR 0 1
17127: PUSH
17128: LD_VAR 0 5
17132: PUSH
17133: FOR_IN
17134: IFFALSE 17275
// begin d := rand ( 0 , 5 ) ;
17136: LD_ADDR_VAR 0 4
17140: PUSH
17141: LD_INT 0
17143: PPUSH
17144: LD_INT 5
17146: PPUSH
17147: CALL_OW 12
17151: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17152: LD_ADDR_VAR 0 2
17156: PUSH
17157: LD_VAR 0 1
17161: PPUSH
17162: CALL_OW 250
17166: PPUSH
17167: LD_VAR 0 4
17171: PPUSH
17172: LD_INT 3
17174: PPUSH
17175: LD_INT 12
17177: PPUSH
17178: CALL_OW 12
17182: PPUSH
17183: CALL_OW 272
17187: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17188: LD_ADDR_VAR 0 3
17192: PUSH
17193: LD_VAR 0 1
17197: PPUSH
17198: CALL_OW 251
17202: PPUSH
17203: LD_VAR 0 4
17207: PPUSH
17208: LD_INT 3
17210: PPUSH
17211: LD_INT 12
17213: PPUSH
17214: CALL_OW 12
17218: PPUSH
17219: CALL_OW 273
17223: ST_TO_ADDR
// if ValidHex ( x , y ) then
17224: LD_VAR 0 2
17228: PPUSH
17229: LD_VAR 0 3
17233: PPUSH
17234: CALL_OW 488
17238: IFFALSE 17273
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17240: LD_VAR 0 1
17244: PPUSH
17245: LD_VAR 0 2
17249: PPUSH
17250: LD_VAR 0 3
17254: PPUSH
17255: LD_INT 3
17257: PPUSH
17258: LD_INT 6
17260: PPUSH
17261: CALL_OW 12
17265: PPUSH
17266: LD_INT 1
17268: PPUSH
17269: CALL_OW 483
// end ;
17273: GO 17133
17275: POP
17276: POP
// end ;
17277: PPOPN 5
17279: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17280: LD_EXP 22
17284: PUSH
17285: LD_EXP 57
17289: AND
17290: IFFALSE 17384
17292: GO 17294
17294: DISABLE
17295: LD_INT 0
17297: PPUSH
17298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17299: LD_ADDR_VAR 0 2
17303: PUSH
17304: LD_INT 22
17306: PUSH
17307: LD_OWVAR 2
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 32
17318: PUSH
17319: LD_INT 1
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 21
17328: PUSH
17329: LD_INT 2
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: PPUSH
17341: CALL_OW 69
17345: ST_TO_ADDR
// if not tmp then
17346: LD_VAR 0 2
17350: NOT
17351: IFFALSE 17355
// exit ;
17353: GO 17384
// for i in tmp do
17355: LD_ADDR_VAR 0 1
17359: PUSH
17360: LD_VAR 0 2
17364: PUSH
17365: FOR_IN
17366: IFFALSE 17382
// SetFuel ( i , 0 ) ;
17368: LD_VAR 0 1
17372: PPUSH
17373: LD_INT 0
17375: PPUSH
17376: CALL_OW 240
17380: GO 17365
17382: POP
17383: POP
// end ;
17384: PPOPN 2
17386: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17387: LD_EXP 22
17391: PUSH
17392: LD_EXP 58
17396: AND
17397: IFFALSE 17463
17399: GO 17401
17401: DISABLE
17402: LD_INT 0
17404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17405: LD_ADDR_VAR 0 1
17409: PUSH
17410: LD_INT 22
17412: PUSH
17413: LD_OWVAR 2
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 30
17424: PUSH
17425: LD_INT 29
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PPUSH
17436: CALL_OW 69
17440: ST_TO_ADDR
// if not tmp then
17441: LD_VAR 0 1
17445: NOT
17446: IFFALSE 17450
// exit ;
17448: GO 17463
// DestroyUnit ( tmp [ 1 ] ) ;
17450: LD_VAR 0 1
17454: PUSH
17455: LD_INT 1
17457: ARRAY
17458: PPUSH
17459: CALL_OW 65
// end ;
17463: PPOPN 1
17465: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17466: LD_EXP 22
17470: PUSH
17471: LD_EXP 60
17475: AND
17476: IFFALSE 17605
17478: GO 17480
17480: DISABLE
17481: LD_INT 0
17483: PPUSH
// begin uc_side := 0 ;
17484: LD_ADDR_OWVAR 20
17488: PUSH
17489: LD_INT 0
17491: ST_TO_ADDR
// uc_nation := nation_arabian ;
17492: LD_ADDR_OWVAR 21
17496: PUSH
17497: LD_INT 2
17499: ST_TO_ADDR
// hc_gallery :=  ;
17500: LD_ADDR_OWVAR 33
17504: PUSH
17505: LD_STRING 
17507: ST_TO_ADDR
// hc_name :=  ;
17508: LD_ADDR_OWVAR 26
17512: PUSH
17513: LD_STRING 
17515: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17516: LD_INT 1
17518: PPUSH
17519: LD_INT 11
17521: PPUSH
17522: LD_INT 10
17524: PPUSH
17525: CALL_OW 380
// un := CreateHuman ;
17529: LD_ADDR_VAR 0 1
17533: PUSH
17534: CALL_OW 44
17538: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17539: LD_VAR 0 1
17543: PPUSH
17544: LD_INT 1
17546: PPUSH
17547: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17551: LD_INT 35
17553: PPUSH
17554: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17558: LD_VAR 0 1
17562: PPUSH
17563: LD_INT 22
17565: PUSH
17566: LD_OWVAR 2
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PPUSH
17575: CALL_OW 69
17579: PPUSH
17580: LD_VAR 0 1
17584: PPUSH
17585: CALL_OW 74
17589: PPUSH
17590: CALL_OW 115
// until IsDead ( un ) ;
17594: LD_VAR 0 1
17598: PPUSH
17599: CALL_OW 301
17603: IFFALSE 17551
// end ;
17605: PPOPN 1
17607: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17608: LD_EXP 22
17612: PUSH
17613: LD_EXP 62
17617: AND
17618: IFFALSE 17630
17620: GO 17622
17622: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17623: LD_STRING earthquake(getX(game), 0, 32)
17625: PPUSH
17626: CALL_OW 559
17630: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17631: LD_EXP 22
17635: PUSH
17636: LD_EXP 63
17640: AND
17641: IFFALSE 17732
17643: GO 17645
17645: DISABLE
17646: LD_INT 0
17648: PPUSH
// begin enable ;
17649: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17650: LD_ADDR_VAR 0 1
17654: PUSH
17655: LD_INT 22
17657: PUSH
17658: LD_OWVAR 2
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 21
17669: PUSH
17670: LD_INT 2
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 33
17679: PUSH
17680: LD_INT 3
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: PPUSH
17692: CALL_OW 69
17696: ST_TO_ADDR
// if not tmp then
17697: LD_VAR 0 1
17701: NOT
17702: IFFALSE 17706
// exit ;
17704: GO 17732
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17706: LD_VAR 0 1
17710: PUSH
17711: LD_INT 1
17713: PPUSH
17714: LD_VAR 0 1
17718: PPUSH
17719: CALL_OW 12
17723: ARRAY
17724: PPUSH
17725: LD_INT 1
17727: PPUSH
17728: CALL_OW 234
// end ;
17732: PPOPN 1
17734: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17735: LD_EXP 22
17739: PUSH
17740: LD_EXP 64
17744: AND
17745: IFFALSE 17886
17747: GO 17749
17749: DISABLE
17750: LD_INT 0
17752: PPUSH
17753: PPUSH
17754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17755: LD_ADDR_VAR 0 3
17759: PUSH
17760: LD_INT 22
17762: PUSH
17763: LD_OWVAR 2
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 25
17774: PUSH
17775: LD_INT 1
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PPUSH
17786: CALL_OW 69
17790: ST_TO_ADDR
// if not tmp then
17791: LD_VAR 0 3
17795: NOT
17796: IFFALSE 17800
// exit ;
17798: GO 17886
// un := tmp [ rand ( 1 , tmp ) ] ;
17800: LD_ADDR_VAR 0 2
17804: PUSH
17805: LD_VAR 0 3
17809: PUSH
17810: LD_INT 1
17812: PPUSH
17813: LD_VAR 0 3
17817: PPUSH
17818: CALL_OW 12
17822: ARRAY
17823: ST_TO_ADDR
// if Crawls ( un ) then
17824: LD_VAR 0 2
17828: PPUSH
17829: CALL_OW 318
17833: IFFALSE 17844
// ComWalk ( un ) ;
17835: LD_VAR 0 2
17839: PPUSH
17840: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17844: LD_VAR 0 2
17848: PPUSH
17849: LD_INT 9
17851: PPUSH
17852: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17856: LD_INT 28
17858: PPUSH
17859: LD_OWVAR 2
17863: PPUSH
17864: LD_INT 2
17866: PPUSH
17867: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17871: LD_INT 29
17873: PPUSH
17874: LD_OWVAR 2
17878: PPUSH
17879: LD_INT 2
17881: PPUSH
17882: CALL_OW 322
// end ;
17886: PPOPN 3
17888: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17889: LD_EXP 22
17893: PUSH
17894: LD_EXP 65
17898: AND
17899: IFFALSE 18010
17901: GO 17903
17903: DISABLE
17904: LD_INT 0
17906: PPUSH
17907: PPUSH
17908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17909: LD_ADDR_VAR 0 3
17913: PUSH
17914: LD_INT 22
17916: PUSH
17917: LD_OWVAR 2
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 25
17928: PUSH
17929: LD_INT 1
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PPUSH
17940: CALL_OW 69
17944: ST_TO_ADDR
// if not tmp then
17945: LD_VAR 0 3
17949: NOT
17950: IFFALSE 17954
// exit ;
17952: GO 18010
// un := tmp [ rand ( 1 , tmp ) ] ;
17954: LD_ADDR_VAR 0 2
17958: PUSH
17959: LD_VAR 0 3
17963: PUSH
17964: LD_INT 1
17966: PPUSH
17967: LD_VAR 0 3
17971: PPUSH
17972: CALL_OW 12
17976: ARRAY
17977: ST_TO_ADDR
// if Crawls ( un ) then
17978: LD_VAR 0 2
17982: PPUSH
17983: CALL_OW 318
17987: IFFALSE 17998
// ComWalk ( un ) ;
17989: LD_VAR 0 2
17993: PPUSH
17994: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17998: LD_VAR 0 2
18002: PPUSH
18003: LD_INT 8
18005: PPUSH
18006: CALL_OW 336
// end ;
18010: PPOPN 3
18012: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18013: LD_EXP 22
18017: PUSH
18018: LD_EXP 66
18022: AND
18023: IFFALSE 18167
18025: GO 18027
18027: DISABLE
18028: LD_INT 0
18030: PPUSH
18031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18032: LD_ADDR_VAR 0 2
18036: PUSH
18037: LD_INT 22
18039: PUSH
18040: LD_OWVAR 2
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 21
18051: PUSH
18052: LD_INT 2
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 2
18061: PUSH
18062: LD_INT 34
18064: PUSH
18065: LD_INT 12
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 34
18074: PUSH
18075: LD_INT 51
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 34
18084: PUSH
18085: LD_INT 32
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: LIST
18102: PPUSH
18103: CALL_OW 69
18107: ST_TO_ADDR
// if not tmp then
18108: LD_VAR 0 2
18112: NOT
18113: IFFALSE 18117
// exit ;
18115: GO 18167
// for i in tmp do
18117: LD_ADDR_VAR 0 1
18121: PUSH
18122: LD_VAR 0 2
18126: PUSH
18127: FOR_IN
18128: IFFALSE 18165
// if GetCargo ( i , mat_artifact ) = 0 then
18130: LD_VAR 0 1
18134: PPUSH
18135: LD_INT 4
18137: PPUSH
18138: CALL_OW 289
18142: PUSH
18143: LD_INT 0
18145: EQUAL
18146: IFFALSE 18163
// SetCargo ( i , mat_siberit , 100 ) ;
18148: LD_VAR 0 1
18152: PPUSH
18153: LD_INT 3
18155: PPUSH
18156: LD_INT 100
18158: PPUSH
18159: CALL_OW 290
18163: GO 18127
18165: POP
18166: POP
// end ;
18167: PPOPN 2
18169: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18170: LD_EXP 22
18174: PUSH
18175: LD_EXP 67
18179: AND
18180: IFFALSE 18363
18182: GO 18184
18184: DISABLE
18185: LD_INT 0
18187: PPUSH
18188: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18189: LD_ADDR_VAR 0 2
18193: PUSH
18194: LD_INT 22
18196: PUSH
18197: LD_OWVAR 2
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PPUSH
18206: CALL_OW 69
18210: ST_TO_ADDR
// if not tmp then
18211: LD_VAR 0 2
18215: NOT
18216: IFFALSE 18220
// exit ;
18218: GO 18363
// for i := 1 to 2 do
18220: LD_ADDR_VAR 0 1
18224: PUSH
18225: DOUBLE
18226: LD_INT 1
18228: DEC
18229: ST_TO_ADDR
18230: LD_INT 2
18232: PUSH
18233: FOR_TO
18234: IFFALSE 18361
// begin uc_side := your_side ;
18236: LD_ADDR_OWVAR 20
18240: PUSH
18241: LD_OWVAR 2
18245: ST_TO_ADDR
// uc_nation := nation_american ;
18246: LD_ADDR_OWVAR 21
18250: PUSH
18251: LD_INT 1
18253: ST_TO_ADDR
// vc_chassis := us_morphling ;
18254: LD_ADDR_OWVAR 37
18258: PUSH
18259: LD_INT 5
18261: ST_TO_ADDR
// vc_engine := engine_siberite ;
18262: LD_ADDR_OWVAR 39
18266: PUSH
18267: LD_INT 3
18269: ST_TO_ADDR
// vc_control := control_computer ;
18270: LD_ADDR_OWVAR 38
18274: PUSH
18275: LD_INT 3
18277: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18278: LD_ADDR_OWVAR 40
18282: PUSH
18283: LD_INT 10
18285: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18286: LD_VAR 0 2
18290: PUSH
18291: LD_INT 1
18293: ARRAY
18294: PPUSH
18295: CALL_OW 310
18299: NOT
18300: IFFALSE 18347
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18302: CALL_OW 45
18306: PPUSH
18307: LD_VAR 0 2
18311: PUSH
18312: LD_INT 1
18314: ARRAY
18315: PPUSH
18316: CALL_OW 250
18320: PPUSH
18321: LD_VAR 0 2
18325: PUSH
18326: LD_INT 1
18328: ARRAY
18329: PPUSH
18330: CALL_OW 251
18334: PPUSH
18335: LD_INT 12
18337: PPUSH
18338: LD_INT 1
18340: PPUSH
18341: CALL_OW 50
18345: GO 18359
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18347: CALL_OW 45
18351: PPUSH
18352: LD_INT 1
18354: PPUSH
18355: CALL_OW 51
// end ;
18359: GO 18233
18361: POP
18362: POP
// end ;
18363: PPOPN 2
18365: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18366: LD_EXP 22
18370: PUSH
18371: LD_EXP 68
18375: AND
18376: IFFALSE 18598
18378: GO 18380
18380: DISABLE
18381: LD_INT 0
18383: PPUSH
18384: PPUSH
18385: PPUSH
18386: PPUSH
18387: PPUSH
18388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18389: LD_ADDR_VAR 0 6
18393: PUSH
18394: LD_INT 22
18396: PUSH
18397: LD_OWVAR 2
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 21
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 3
18418: PUSH
18419: LD_INT 23
18421: PUSH
18422: LD_INT 0
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: LIST
18437: PPUSH
18438: CALL_OW 69
18442: ST_TO_ADDR
// if not tmp then
18443: LD_VAR 0 6
18447: NOT
18448: IFFALSE 18452
// exit ;
18450: GO 18598
// s1 := rand ( 1 , 4 ) ;
18452: LD_ADDR_VAR 0 2
18456: PUSH
18457: LD_INT 1
18459: PPUSH
18460: LD_INT 4
18462: PPUSH
18463: CALL_OW 12
18467: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18468: LD_ADDR_VAR 0 4
18472: PUSH
18473: LD_VAR 0 6
18477: PUSH
18478: LD_INT 1
18480: ARRAY
18481: PPUSH
18482: LD_VAR 0 2
18486: PPUSH
18487: CALL_OW 259
18491: ST_TO_ADDR
// if s1 = 1 then
18492: LD_VAR 0 2
18496: PUSH
18497: LD_INT 1
18499: EQUAL
18500: IFFALSE 18520
// s2 := rand ( 2 , 4 ) else
18502: LD_ADDR_VAR 0 3
18506: PUSH
18507: LD_INT 2
18509: PPUSH
18510: LD_INT 4
18512: PPUSH
18513: CALL_OW 12
18517: ST_TO_ADDR
18518: GO 18528
// s2 := 1 ;
18520: LD_ADDR_VAR 0 3
18524: PUSH
18525: LD_INT 1
18527: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18528: LD_ADDR_VAR 0 5
18532: PUSH
18533: LD_VAR 0 6
18537: PUSH
18538: LD_INT 1
18540: ARRAY
18541: PPUSH
18542: LD_VAR 0 3
18546: PPUSH
18547: CALL_OW 259
18551: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18552: LD_VAR 0 6
18556: PUSH
18557: LD_INT 1
18559: ARRAY
18560: PPUSH
18561: LD_VAR 0 2
18565: PPUSH
18566: LD_VAR 0 5
18570: PPUSH
18571: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18575: LD_VAR 0 6
18579: PUSH
18580: LD_INT 1
18582: ARRAY
18583: PPUSH
18584: LD_VAR 0 3
18588: PPUSH
18589: LD_VAR 0 4
18593: PPUSH
18594: CALL_OW 237
// end ;
18598: PPOPN 6
18600: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18601: LD_EXP 22
18605: PUSH
18606: LD_EXP 69
18610: AND
18611: IFFALSE 18690
18613: GO 18615
18615: DISABLE
18616: LD_INT 0
18618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18619: LD_ADDR_VAR 0 1
18623: PUSH
18624: LD_INT 22
18626: PUSH
18627: LD_OWVAR 2
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 30
18638: PUSH
18639: LD_INT 3
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PPUSH
18650: CALL_OW 69
18654: ST_TO_ADDR
// if not tmp then
18655: LD_VAR 0 1
18659: NOT
18660: IFFALSE 18664
// exit ;
18662: GO 18690
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18664: LD_VAR 0 1
18668: PUSH
18669: LD_INT 1
18671: PPUSH
18672: LD_VAR 0 1
18676: PPUSH
18677: CALL_OW 12
18681: ARRAY
18682: PPUSH
18683: LD_INT 1
18685: PPUSH
18686: CALL_OW 234
// end ;
18690: PPOPN 1
18692: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18693: LD_EXP 22
18697: PUSH
18698: LD_EXP 70
18702: AND
18703: IFFALSE 18815
18705: GO 18707
18707: DISABLE
18708: LD_INT 0
18710: PPUSH
18711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18712: LD_ADDR_VAR 0 2
18716: PUSH
18717: LD_INT 22
18719: PUSH
18720: LD_OWVAR 2
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 2
18731: PUSH
18732: LD_INT 30
18734: PUSH
18735: LD_INT 27
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 30
18744: PUSH
18745: LD_INT 26
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 30
18754: PUSH
18755: LD_INT 28
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PPUSH
18772: CALL_OW 69
18776: ST_TO_ADDR
// if not tmp then
18777: LD_VAR 0 2
18781: NOT
18782: IFFALSE 18786
// exit ;
18784: GO 18815
// for i in tmp do
18786: LD_ADDR_VAR 0 1
18790: PUSH
18791: LD_VAR 0 2
18795: PUSH
18796: FOR_IN
18797: IFFALSE 18813
// SetLives ( i , 1 ) ;
18799: LD_VAR 0 1
18803: PPUSH
18804: LD_INT 1
18806: PPUSH
18807: CALL_OW 234
18811: GO 18796
18813: POP
18814: POP
// end ;
18815: PPOPN 2
18817: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18818: LD_EXP 22
18822: PUSH
18823: LD_EXP 71
18827: AND
18828: IFFALSE 19115
18830: GO 18832
18832: DISABLE
18833: LD_INT 0
18835: PPUSH
18836: PPUSH
18837: PPUSH
// begin i := rand ( 1 , 7 ) ;
18838: LD_ADDR_VAR 0 1
18842: PUSH
18843: LD_INT 1
18845: PPUSH
18846: LD_INT 7
18848: PPUSH
18849: CALL_OW 12
18853: ST_TO_ADDR
// case i of 1 :
18854: LD_VAR 0 1
18858: PUSH
18859: LD_INT 1
18861: DOUBLE
18862: EQUAL
18863: IFTRUE 18867
18865: GO 18877
18867: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18868: LD_STRING earthquake(getX(game), 0, 32)
18870: PPUSH
18871: CALL_OW 559
18875: GO 19115
18877: LD_INT 2
18879: DOUBLE
18880: EQUAL
18881: IFTRUE 18885
18883: GO 18899
18885: POP
// begin ToLua ( displayStucuk(); ) ;
18886: LD_STRING displayStucuk();
18888: PPUSH
18889: CALL_OW 559
// ResetFog ;
18893: CALL_OW 335
// end ; 3 :
18897: GO 19115
18899: LD_INT 3
18901: DOUBLE
18902: EQUAL
18903: IFTRUE 18907
18905: GO 19011
18907: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18908: LD_ADDR_VAR 0 2
18912: PUSH
18913: LD_INT 22
18915: PUSH
18916: LD_OWVAR 2
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: LD_INT 25
18927: PUSH
18928: LD_INT 1
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PPUSH
18939: CALL_OW 69
18943: ST_TO_ADDR
// if not tmp then
18944: LD_VAR 0 2
18948: NOT
18949: IFFALSE 18953
// exit ;
18951: GO 19115
// un := tmp [ rand ( 1 , tmp ) ] ;
18953: LD_ADDR_VAR 0 3
18957: PUSH
18958: LD_VAR 0 2
18962: PUSH
18963: LD_INT 1
18965: PPUSH
18966: LD_VAR 0 2
18970: PPUSH
18971: CALL_OW 12
18975: ARRAY
18976: ST_TO_ADDR
// if Crawls ( un ) then
18977: LD_VAR 0 3
18981: PPUSH
18982: CALL_OW 318
18986: IFFALSE 18997
// ComWalk ( un ) ;
18988: LD_VAR 0 3
18992: PPUSH
18993: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18997: LD_VAR 0 3
19001: PPUSH
19002: LD_INT 8
19004: PPUSH
19005: CALL_OW 336
// end ; 4 :
19009: GO 19115
19011: LD_INT 4
19013: DOUBLE
19014: EQUAL
19015: IFTRUE 19019
19017: GO 19093
19019: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19020: LD_ADDR_VAR 0 2
19024: PUSH
19025: LD_INT 22
19027: PUSH
19028: LD_OWVAR 2
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 30
19039: PUSH
19040: LD_INT 29
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PPUSH
19051: CALL_OW 69
19055: ST_TO_ADDR
// if not tmp then
19056: LD_VAR 0 2
19060: NOT
19061: IFFALSE 19065
// exit ;
19063: GO 19115
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19065: LD_VAR 0 2
19069: PUSH
19070: LD_INT 1
19072: ARRAY
19073: PPUSH
19074: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19078: LD_VAR 0 2
19082: PUSH
19083: LD_INT 1
19085: ARRAY
19086: PPUSH
19087: CALL_OW 65
// end ; 5 .. 7 :
19091: GO 19115
19093: LD_INT 5
19095: DOUBLE
19096: GREATEREQUAL
19097: IFFALSE 19105
19099: LD_INT 7
19101: DOUBLE
19102: LESSEQUAL
19103: IFTRUE 19107
19105: GO 19114
19107: POP
// StreamSibBomb ; end ;
19108: CALL 15352 0 0
19112: GO 19115
19114: POP
// end ;
19115: PPOPN 3
19117: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19118: LD_EXP 22
19122: PUSH
19123: LD_EXP 72
19127: AND
19128: IFFALSE 19284
19130: GO 19132
19132: DISABLE
19133: LD_INT 0
19135: PPUSH
19136: PPUSH
19137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19138: LD_ADDR_VAR 0 2
19142: PUSH
19143: LD_INT 81
19145: PUSH
19146: LD_OWVAR 2
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 2
19157: PUSH
19158: LD_INT 21
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 21
19170: PUSH
19171: LD_INT 2
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: LIST
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PPUSH
19187: CALL_OW 69
19191: ST_TO_ADDR
// if not tmp then
19192: LD_VAR 0 2
19196: NOT
19197: IFFALSE 19201
// exit ;
19199: GO 19284
// p := 0 ;
19201: LD_ADDR_VAR 0 3
19205: PUSH
19206: LD_INT 0
19208: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19209: LD_INT 35
19211: PPUSH
19212: CALL_OW 67
// p := p + 1 ;
19216: LD_ADDR_VAR 0 3
19220: PUSH
19221: LD_VAR 0 3
19225: PUSH
19226: LD_INT 1
19228: PLUS
19229: ST_TO_ADDR
// for i in tmp do
19230: LD_ADDR_VAR 0 1
19234: PUSH
19235: LD_VAR 0 2
19239: PUSH
19240: FOR_IN
19241: IFFALSE 19272
// if GetLives ( i ) < 1000 then
19243: LD_VAR 0 1
19247: PPUSH
19248: CALL_OW 256
19252: PUSH
19253: LD_INT 1000
19255: LESS
19256: IFFALSE 19270
// SetLives ( i , 1000 ) ;
19258: LD_VAR 0 1
19262: PPUSH
19263: LD_INT 1000
19265: PPUSH
19266: CALL_OW 234
19270: GO 19240
19272: POP
19273: POP
// until p > 20 ;
19274: LD_VAR 0 3
19278: PUSH
19279: LD_INT 20
19281: GREATER
19282: IFFALSE 19209
// end ;
19284: PPOPN 3
19286: END
// every 0 0$1 trigger StreamModeActive and sTime do
19287: LD_EXP 22
19291: PUSH
19292: LD_EXP 73
19296: AND
19297: IFFALSE 19332
19299: GO 19301
19301: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19302: LD_INT 28
19304: PPUSH
19305: LD_OWVAR 2
19309: PPUSH
19310: LD_INT 2
19312: PPUSH
19313: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19317: LD_INT 30
19319: PPUSH
19320: LD_OWVAR 2
19324: PPUSH
19325: LD_INT 2
19327: PPUSH
19328: CALL_OW 322
// end ;
19332: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19333: LD_EXP 22
19337: PUSH
19338: LD_EXP 74
19342: AND
19343: IFFALSE 19464
19345: GO 19347
19347: DISABLE
19348: LD_INT 0
19350: PPUSH
19351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19352: LD_ADDR_VAR 0 2
19356: PUSH
19357: LD_INT 22
19359: PUSH
19360: LD_OWVAR 2
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 21
19371: PUSH
19372: LD_INT 1
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 3
19381: PUSH
19382: LD_INT 23
19384: PUSH
19385: LD_INT 0
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: PPUSH
19401: CALL_OW 69
19405: ST_TO_ADDR
// if not tmp then
19406: LD_VAR 0 2
19410: NOT
19411: IFFALSE 19415
// exit ;
19413: GO 19464
// for i in tmp do
19415: LD_ADDR_VAR 0 1
19419: PUSH
19420: LD_VAR 0 2
19424: PUSH
19425: FOR_IN
19426: IFFALSE 19462
// begin if Crawls ( i ) then
19428: LD_VAR 0 1
19432: PPUSH
19433: CALL_OW 318
19437: IFFALSE 19448
// ComWalk ( i ) ;
19439: LD_VAR 0 1
19443: PPUSH
19444: CALL_OW 138
// SetClass ( i , 2 ) ;
19448: LD_VAR 0 1
19452: PPUSH
19453: LD_INT 2
19455: PPUSH
19456: CALL_OW 336
// end ;
19460: GO 19425
19462: POP
19463: POP
// end ;
19464: PPOPN 2
19466: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19467: LD_EXP 22
19471: PUSH
19472: LD_EXP 75
19476: AND
19477: IFFALSE 19765
19479: GO 19481
19481: DISABLE
19482: LD_INT 0
19484: PPUSH
19485: PPUSH
19486: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19487: LD_OWVAR 2
19491: PPUSH
19492: LD_INT 9
19494: PPUSH
19495: LD_INT 1
19497: PPUSH
19498: LD_INT 1
19500: PPUSH
19501: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19505: LD_INT 9
19507: PPUSH
19508: LD_OWVAR 2
19512: PPUSH
19513: CALL_OW 343
// uc_side := 9 ;
19517: LD_ADDR_OWVAR 20
19521: PUSH
19522: LD_INT 9
19524: ST_TO_ADDR
// uc_nation := 2 ;
19525: LD_ADDR_OWVAR 21
19529: PUSH
19530: LD_INT 2
19532: ST_TO_ADDR
// hc_name := Dark Warrior ;
19533: LD_ADDR_OWVAR 26
19537: PUSH
19538: LD_STRING Dark Warrior
19540: ST_TO_ADDR
// hc_gallery :=  ;
19541: LD_ADDR_OWVAR 33
19545: PUSH
19546: LD_STRING 
19548: ST_TO_ADDR
// hc_noskilllimit := true ;
19549: LD_ADDR_OWVAR 76
19553: PUSH
19554: LD_INT 1
19556: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19557: LD_ADDR_OWVAR 31
19561: PUSH
19562: LD_INT 30
19564: PUSH
19565: LD_INT 30
19567: PUSH
19568: LD_INT 30
19570: PUSH
19571: LD_INT 30
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: ST_TO_ADDR
// un := CreateHuman ;
19580: LD_ADDR_VAR 0 3
19584: PUSH
19585: CALL_OW 44
19589: ST_TO_ADDR
// hc_noskilllimit := false ;
19590: LD_ADDR_OWVAR 76
19594: PUSH
19595: LD_INT 0
19597: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19598: LD_VAR 0 3
19602: PPUSH
19603: LD_INT 1
19605: PPUSH
19606: CALL_OW 51
// ToLua ( playRanger() ) ;
19610: LD_STRING playRanger()
19612: PPUSH
19613: CALL_OW 559
// p := 0 ;
19617: LD_ADDR_VAR 0 2
19621: PUSH
19622: LD_INT 0
19624: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19625: LD_INT 35
19627: PPUSH
19628: CALL_OW 67
// p := p + 1 ;
19632: LD_ADDR_VAR 0 2
19636: PUSH
19637: LD_VAR 0 2
19641: PUSH
19642: LD_INT 1
19644: PLUS
19645: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19646: LD_VAR 0 3
19650: PPUSH
19651: CALL_OW 256
19655: PUSH
19656: LD_INT 1000
19658: LESS
19659: IFFALSE 19673
// SetLives ( un , 1000 ) ;
19661: LD_VAR 0 3
19665: PPUSH
19666: LD_INT 1000
19668: PPUSH
19669: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19673: LD_VAR 0 3
19677: PPUSH
19678: LD_INT 81
19680: PUSH
19681: LD_OWVAR 2
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 91
19692: PUSH
19693: LD_VAR 0 3
19697: PUSH
19698: LD_INT 30
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PPUSH
19710: CALL_OW 69
19714: PPUSH
19715: LD_VAR 0 3
19719: PPUSH
19720: CALL_OW 74
19724: PPUSH
19725: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19729: LD_VAR 0 2
19733: PUSH
19734: LD_INT 80
19736: GREATER
19737: PUSH
19738: LD_VAR 0 3
19742: PPUSH
19743: CALL_OW 301
19747: OR
19748: IFFALSE 19625
// if un then
19750: LD_VAR 0 3
19754: IFFALSE 19765
// RemoveUnit ( un ) ;
19756: LD_VAR 0 3
19760: PPUSH
19761: CALL_OW 64
// end ;
19765: PPOPN 3
19767: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19768: LD_EXP 76
19772: IFFALSE 19888
19774: GO 19776
19776: DISABLE
19777: LD_INT 0
19779: PPUSH
19780: PPUSH
19781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19782: LD_ADDR_VAR 0 2
19786: PUSH
19787: LD_INT 81
19789: PUSH
19790: LD_OWVAR 2
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 21
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PPUSH
19813: CALL_OW 69
19817: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19818: LD_STRING playComputer()
19820: PPUSH
19821: CALL_OW 559
// if not tmp then
19825: LD_VAR 0 2
19829: NOT
19830: IFFALSE 19834
// exit ;
19832: GO 19888
// for i in tmp do
19834: LD_ADDR_VAR 0 1
19838: PUSH
19839: LD_VAR 0 2
19843: PUSH
19844: FOR_IN
19845: IFFALSE 19886
// for j := 1 to 4 do
19847: LD_ADDR_VAR 0 3
19851: PUSH
19852: DOUBLE
19853: LD_INT 1
19855: DEC
19856: ST_TO_ADDR
19857: LD_INT 4
19859: PUSH
19860: FOR_TO
19861: IFFALSE 19882
// SetSkill ( i , j , 10 ) ;
19863: LD_VAR 0 1
19867: PPUSH
19868: LD_VAR 0 3
19872: PPUSH
19873: LD_INT 10
19875: PPUSH
19876: CALL_OW 237
19880: GO 19860
19882: POP
19883: POP
19884: GO 19844
19886: POP
19887: POP
// end ;
19888: PPOPN 3
19890: END
// every 0 0$1 trigger s30 do var i , tmp ;
19891: LD_EXP 77
19895: IFFALSE 19964
19897: GO 19899
19899: DISABLE
19900: LD_INT 0
19902: PPUSH
19903: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19904: LD_ADDR_VAR 0 2
19908: PUSH
19909: LD_INT 22
19911: PUSH
19912: LD_OWVAR 2
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PPUSH
19921: CALL_OW 69
19925: ST_TO_ADDR
// if not tmp then
19926: LD_VAR 0 2
19930: NOT
19931: IFFALSE 19935
// exit ;
19933: GO 19964
// for i in tmp do
19935: LD_ADDR_VAR 0 1
19939: PUSH
19940: LD_VAR 0 2
19944: PUSH
19945: FOR_IN
19946: IFFALSE 19962
// SetLives ( i , 300 ) ;
19948: LD_VAR 0 1
19952: PPUSH
19953: LD_INT 300
19955: PPUSH
19956: CALL_OW 234
19960: GO 19945
19962: POP
19963: POP
// end ;
19964: PPOPN 2
19966: END
// every 0 0$1 trigger s60 do var i , tmp ;
19967: LD_EXP 78
19971: IFFALSE 20040
19973: GO 19975
19975: DISABLE
19976: LD_INT 0
19978: PPUSH
19979: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19980: LD_ADDR_VAR 0 2
19984: PUSH
19985: LD_INT 22
19987: PUSH
19988: LD_OWVAR 2
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PPUSH
19997: CALL_OW 69
20001: ST_TO_ADDR
// if not tmp then
20002: LD_VAR 0 2
20006: NOT
20007: IFFALSE 20011
// exit ;
20009: GO 20040
// for i in tmp do
20011: LD_ADDR_VAR 0 1
20015: PUSH
20016: LD_VAR 0 2
20020: PUSH
20021: FOR_IN
20022: IFFALSE 20038
// SetLives ( i , 600 ) ;
20024: LD_VAR 0 1
20028: PPUSH
20029: LD_INT 600
20031: PPUSH
20032: CALL_OW 234
20036: GO 20021
20038: POP
20039: POP
// end ;
20040: PPOPN 2
20042: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20043: LD_INT 0
20045: PPUSH
// case cmd of 301 :
20046: LD_VAR 0 1
20050: PUSH
20051: LD_INT 301
20053: DOUBLE
20054: EQUAL
20055: IFTRUE 20059
20057: GO 20091
20059: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20060: LD_VAR 0 6
20064: PPUSH
20065: LD_VAR 0 7
20069: PPUSH
20070: LD_VAR 0 8
20074: PPUSH
20075: LD_VAR 0 4
20079: PPUSH
20080: LD_VAR 0 5
20084: PPUSH
20085: CALL 21292 0 5
20089: GO 20212
20091: LD_INT 302
20093: DOUBLE
20094: EQUAL
20095: IFTRUE 20099
20097: GO 20136
20099: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20100: LD_VAR 0 6
20104: PPUSH
20105: LD_VAR 0 7
20109: PPUSH
20110: LD_VAR 0 8
20114: PPUSH
20115: LD_VAR 0 9
20119: PPUSH
20120: LD_VAR 0 4
20124: PPUSH
20125: LD_VAR 0 5
20129: PPUSH
20130: CALL 21383 0 6
20134: GO 20212
20136: LD_INT 303
20138: DOUBLE
20139: EQUAL
20140: IFTRUE 20144
20142: GO 20181
20144: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20145: LD_VAR 0 6
20149: PPUSH
20150: LD_VAR 0 7
20154: PPUSH
20155: LD_VAR 0 8
20159: PPUSH
20160: LD_VAR 0 9
20164: PPUSH
20165: LD_VAR 0 4
20169: PPUSH
20170: LD_VAR 0 5
20174: PPUSH
20175: CALL 20217 0 6
20179: GO 20212
20181: LD_INT 304
20183: DOUBLE
20184: EQUAL
20185: IFTRUE 20189
20187: GO 20211
20189: POP
// hHackTeleport ( unit , x , y ) ; end ;
20190: LD_VAR 0 2
20194: PPUSH
20195: LD_VAR 0 4
20199: PPUSH
20200: LD_VAR 0 5
20204: PPUSH
20205: CALL 21976 0 3
20209: GO 20212
20211: POP
// end ;
20212: LD_VAR 0 12
20216: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20217: LD_INT 0
20219: PPUSH
20220: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20221: LD_VAR 0 1
20225: PUSH
20226: LD_INT 1
20228: LESS
20229: PUSH
20230: LD_VAR 0 1
20234: PUSH
20235: LD_INT 3
20237: GREATER
20238: OR
20239: PUSH
20240: LD_VAR 0 5
20244: PPUSH
20245: LD_VAR 0 6
20249: PPUSH
20250: CALL_OW 428
20254: OR
20255: IFFALSE 20259
// exit ;
20257: GO 20979
// uc_side := your_side ;
20259: LD_ADDR_OWVAR 20
20263: PUSH
20264: LD_OWVAR 2
20268: ST_TO_ADDR
// uc_nation := nation ;
20269: LD_ADDR_OWVAR 21
20273: PUSH
20274: LD_VAR 0 1
20278: ST_TO_ADDR
// bc_level = 1 ;
20279: LD_ADDR_OWVAR 43
20283: PUSH
20284: LD_INT 1
20286: ST_TO_ADDR
// case btype of 1 :
20287: LD_VAR 0 2
20291: PUSH
20292: LD_INT 1
20294: DOUBLE
20295: EQUAL
20296: IFTRUE 20300
20298: GO 20311
20300: POP
// bc_type := b_depot ; 2 :
20301: LD_ADDR_OWVAR 42
20305: PUSH
20306: LD_INT 0
20308: ST_TO_ADDR
20309: GO 20923
20311: LD_INT 2
20313: DOUBLE
20314: EQUAL
20315: IFTRUE 20319
20317: GO 20330
20319: POP
// bc_type := b_warehouse ; 3 :
20320: LD_ADDR_OWVAR 42
20324: PUSH
20325: LD_INT 1
20327: ST_TO_ADDR
20328: GO 20923
20330: LD_INT 3
20332: DOUBLE
20333: EQUAL
20334: IFTRUE 20338
20336: GO 20349
20338: POP
// bc_type := b_lab ; 4 .. 9 :
20339: LD_ADDR_OWVAR 42
20343: PUSH
20344: LD_INT 6
20346: ST_TO_ADDR
20347: GO 20923
20349: LD_INT 4
20351: DOUBLE
20352: GREATEREQUAL
20353: IFFALSE 20361
20355: LD_INT 9
20357: DOUBLE
20358: LESSEQUAL
20359: IFTRUE 20363
20361: GO 20415
20363: POP
// begin bc_type := b_lab_half ;
20364: LD_ADDR_OWVAR 42
20368: PUSH
20369: LD_INT 7
20371: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20372: LD_ADDR_OWVAR 44
20376: PUSH
20377: LD_INT 10
20379: PUSH
20380: LD_INT 11
20382: PUSH
20383: LD_INT 12
20385: PUSH
20386: LD_INT 15
20388: PUSH
20389: LD_INT 14
20391: PUSH
20392: LD_INT 13
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: PUSH
20403: LD_VAR 0 2
20407: PUSH
20408: LD_INT 3
20410: MINUS
20411: ARRAY
20412: ST_TO_ADDR
// end ; 10 .. 13 :
20413: GO 20923
20415: LD_INT 10
20417: DOUBLE
20418: GREATEREQUAL
20419: IFFALSE 20427
20421: LD_INT 13
20423: DOUBLE
20424: LESSEQUAL
20425: IFTRUE 20429
20427: GO 20506
20429: POP
// begin bc_type := b_lab_full ;
20430: LD_ADDR_OWVAR 42
20434: PUSH
20435: LD_INT 8
20437: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20438: LD_ADDR_OWVAR 44
20442: PUSH
20443: LD_INT 10
20445: PUSH
20446: LD_INT 12
20448: PUSH
20449: LD_INT 14
20451: PUSH
20452: LD_INT 13
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: PUSH
20461: LD_VAR 0 2
20465: PUSH
20466: LD_INT 9
20468: MINUS
20469: ARRAY
20470: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20471: LD_ADDR_OWVAR 45
20475: PUSH
20476: LD_INT 11
20478: PUSH
20479: LD_INT 15
20481: PUSH
20482: LD_INT 12
20484: PUSH
20485: LD_INT 15
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: PUSH
20494: LD_VAR 0 2
20498: PUSH
20499: LD_INT 9
20501: MINUS
20502: ARRAY
20503: ST_TO_ADDR
// end ; 14 :
20504: GO 20923
20506: LD_INT 14
20508: DOUBLE
20509: EQUAL
20510: IFTRUE 20514
20512: GO 20525
20514: POP
// bc_type := b_workshop ; 15 :
20515: LD_ADDR_OWVAR 42
20519: PUSH
20520: LD_INT 2
20522: ST_TO_ADDR
20523: GO 20923
20525: LD_INT 15
20527: DOUBLE
20528: EQUAL
20529: IFTRUE 20533
20531: GO 20544
20533: POP
// bc_type := b_factory ; 16 :
20534: LD_ADDR_OWVAR 42
20538: PUSH
20539: LD_INT 3
20541: ST_TO_ADDR
20542: GO 20923
20544: LD_INT 16
20546: DOUBLE
20547: EQUAL
20548: IFTRUE 20552
20550: GO 20563
20552: POP
// bc_type := b_ext_gun ; 17 :
20553: LD_ADDR_OWVAR 42
20557: PUSH
20558: LD_INT 17
20560: ST_TO_ADDR
20561: GO 20923
20563: LD_INT 17
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20599
20571: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20572: LD_ADDR_OWVAR 42
20576: PUSH
20577: LD_INT 19
20579: PUSH
20580: LD_INT 23
20582: PUSH
20583: LD_INT 19
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: LIST
20590: PUSH
20591: LD_VAR 0 1
20595: ARRAY
20596: ST_TO_ADDR
20597: GO 20923
20599: LD_INT 18
20601: DOUBLE
20602: EQUAL
20603: IFTRUE 20607
20605: GO 20618
20607: POP
// bc_type := b_ext_radar ; 19 :
20608: LD_ADDR_OWVAR 42
20612: PUSH
20613: LD_INT 20
20615: ST_TO_ADDR
20616: GO 20923
20618: LD_INT 19
20620: DOUBLE
20621: EQUAL
20622: IFTRUE 20626
20624: GO 20637
20626: POP
// bc_type := b_ext_radio ; 20 :
20627: LD_ADDR_OWVAR 42
20631: PUSH
20632: LD_INT 22
20634: ST_TO_ADDR
20635: GO 20923
20637: LD_INT 20
20639: DOUBLE
20640: EQUAL
20641: IFTRUE 20645
20643: GO 20656
20645: POP
// bc_type := b_ext_siberium ; 21 :
20646: LD_ADDR_OWVAR 42
20650: PUSH
20651: LD_INT 21
20653: ST_TO_ADDR
20654: GO 20923
20656: LD_INT 21
20658: DOUBLE
20659: EQUAL
20660: IFTRUE 20664
20662: GO 20675
20664: POP
// bc_type := b_ext_computer ; 22 :
20665: LD_ADDR_OWVAR 42
20669: PUSH
20670: LD_INT 24
20672: ST_TO_ADDR
20673: GO 20923
20675: LD_INT 22
20677: DOUBLE
20678: EQUAL
20679: IFTRUE 20683
20681: GO 20694
20683: POP
// bc_type := b_ext_track ; 23 :
20684: LD_ADDR_OWVAR 42
20688: PUSH
20689: LD_INT 16
20691: ST_TO_ADDR
20692: GO 20923
20694: LD_INT 23
20696: DOUBLE
20697: EQUAL
20698: IFTRUE 20702
20700: GO 20713
20702: POP
// bc_type := b_ext_laser ; 24 :
20703: LD_ADDR_OWVAR 42
20707: PUSH
20708: LD_INT 25
20710: ST_TO_ADDR
20711: GO 20923
20713: LD_INT 24
20715: DOUBLE
20716: EQUAL
20717: IFTRUE 20721
20719: GO 20732
20721: POP
// bc_type := b_control_tower ; 25 :
20722: LD_ADDR_OWVAR 42
20726: PUSH
20727: LD_INT 36
20729: ST_TO_ADDR
20730: GO 20923
20732: LD_INT 25
20734: DOUBLE
20735: EQUAL
20736: IFTRUE 20740
20738: GO 20751
20740: POP
// bc_type := b_breastwork ; 26 :
20741: LD_ADDR_OWVAR 42
20745: PUSH
20746: LD_INT 31
20748: ST_TO_ADDR
20749: GO 20923
20751: LD_INT 26
20753: DOUBLE
20754: EQUAL
20755: IFTRUE 20759
20757: GO 20770
20759: POP
// bc_type := b_bunker ; 27 :
20760: LD_ADDR_OWVAR 42
20764: PUSH
20765: LD_INT 32
20767: ST_TO_ADDR
20768: GO 20923
20770: LD_INT 27
20772: DOUBLE
20773: EQUAL
20774: IFTRUE 20778
20776: GO 20789
20778: POP
// bc_type := b_turret ; 28 :
20779: LD_ADDR_OWVAR 42
20783: PUSH
20784: LD_INT 33
20786: ST_TO_ADDR
20787: GO 20923
20789: LD_INT 28
20791: DOUBLE
20792: EQUAL
20793: IFTRUE 20797
20795: GO 20808
20797: POP
// bc_type := b_armoury ; 29 :
20798: LD_ADDR_OWVAR 42
20802: PUSH
20803: LD_INT 4
20805: ST_TO_ADDR
20806: GO 20923
20808: LD_INT 29
20810: DOUBLE
20811: EQUAL
20812: IFTRUE 20816
20814: GO 20827
20816: POP
// bc_type := b_barracks ; 30 :
20817: LD_ADDR_OWVAR 42
20821: PUSH
20822: LD_INT 5
20824: ST_TO_ADDR
20825: GO 20923
20827: LD_INT 30
20829: DOUBLE
20830: EQUAL
20831: IFTRUE 20835
20833: GO 20846
20835: POP
// bc_type := b_solar_power ; 31 :
20836: LD_ADDR_OWVAR 42
20840: PUSH
20841: LD_INT 27
20843: ST_TO_ADDR
20844: GO 20923
20846: LD_INT 31
20848: DOUBLE
20849: EQUAL
20850: IFTRUE 20854
20852: GO 20865
20854: POP
// bc_type := b_oil_power ; 32 :
20855: LD_ADDR_OWVAR 42
20859: PUSH
20860: LD_INT 26
20862: ST_TO_ADDR
20863: GO 20923
20865: LD_INT 32
20867: DOUBLE
20868: EQUAL
20869: IFTRUE 20873
20871: GO 20884
20873: POP
// bc_type := b_siberite_power ; 33 :
20874: LD_ADDR_OWVAR 42
20878: PUSH
20879: LD_INT 28
20881: ST_TO_ADDR
20882: GO 20923
20884: LD_INT 33
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20903
20892: POP
// bc_type := b_oil_mine ; 34 :
20893: LD_ADDR_OWVAR 42
20897: PUSH
20898: LD_INT 29
20900: ST_TO_ADDR
20901: GO 20923
20903: LD_INT 34
20905: DOUBLE
20906: EQUAL
20907: IFTRUE 20911
20909: GO 20922
20911: POP
// bc_type := b_siberite_mine ; end ;
20912: LD_ADDR_OWVAR 42
20916: PUSH
20917: LD_INT 30
20919: ST_TO_ADDR
20920: GO 20923
20922: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20923: LD_ADDR_VAR 0 8
20927: PUSH
20928: LD_VAR 0 5
20932: PPUSH
20933: LD_VAR 0 6
20937: PPUSH
20938: LD_VAR 0 3
20942: PPUSH
20943: CALL_OW 47
20947: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20948: LD_OWVAR 42
20952: PUSH
20953: LD_INT 32
20955: PUSH
20956: LD_INT 33
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: IN
20963: IFFALSE 20979
// PlaceWeaponTurret ( b , weapon ) ;
20965: LD_VAR 0 8
20969: PPUSH
20970: LD_VAR 0 4
20974: PPUSH
20975: CALL_OW 431
// end ;
20979: LD_VAR 0 7
20983: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20984: LD_INT 0
20986: PPUSH
20987: PPUSH
20988: PPUSH
20989: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20990: LD_ADDR_VAR 0 4
20994: PUSH
20995: LD_INT 22
20997: PUSH
20998: LD_OWVAR 2
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: LD_INT 30
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 30
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: LIST
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PPUSH
21039: CALL_OW 69
21043: ST_TO_ADDR
// if not tmp then
21044: LD_VAR 0 4
21048: NOT
21049: IFFALSE 21053
// exit ;
21051: GO 21112
// for i in tmp do
21053: LD_ADDR_VAR 0 2
21057: PUSH
21058: LD_VAR 0 4
21062: PUSH
21063: FOR_IN
21064: IFFALSE 21110
// for j = 1 to 3 do
21066: LD_ADDR_VAR 0 3
21070: PUSH
21071: DOUBLE
21072: LD_INT 1
21074: DEC
21075: ST_TO_ADDR
21076: LD_INT 3
21078: PUSH
21079: FOR_TO
21080: IFFALSE 21106
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21082: LD_VAR 0 2
21086: PPUSH
21087: CALL_OW 274
21091: PPUSH
21092: LD_VAR 0 3
21096: PPUSH
21097: LD_INT 99999
21099: PPUSH
21100: CALL_OW 277
21104: GO 21079
21106: POP
21107: POP
21108: GO 21063
21110: POP
21111: POP
// end ;
21112: LD_VAR 0 1
21116: RET
// export function hHackSetLevel10 ; var i , j ; begin
21117: LD_INT 0
21119: PPUSH
21120: PPUSH
21121: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21122: LD_ADDR_VAR 0 2
21126: PUSH
21127: LD_INT 21
21129: PUSH
21130: LD_INT 1
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PPUSH
21137: CALL_OW 69
21141: PUSH
21142: FOR_IN
21143: IFFALSE 21195
// if IsSelected ( i ) then
21145: LD_VAR 0 2
21149: PPUSH
21150: CALL_OW 306
21154: IFFALSE 21193
// begin for j := 1 to 4 do
21156: LD_ADDR_VAR 0 3
21160: PUSH
21161: DOUBLE
21162: LD_INT 1
21164: DEC
21165: ST_TO_ADDR
21166: LD_INT 4
21168: PUSH
21169: FOR_TO
21170: IFFALSE 21191
// SetSkill ( i , j , 10 ) ;
21172: LD_VAR 0 2
21176: PPUSH
21177: LD_VAR 0 3
21181: PPUSH
21182: LD_INT 10
21184: PPUSH
21185: CALL_OW 237
21189: GO 21169
21191: POP
21192: POP
// end ;
21193: GO 21142
21195: POP
21196: POP
// end ;
21197: LD_VAR 0 1
21201: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21202: LD_INT 0
21204: PPUSH
21205: PPUSH
21206: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21207: LD_ADDR_VAR 0 2
21211: PUSH
21212: LD_INT 22
21214: PUSH
21215: LD_OWVAR 2
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 21
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PPUSH
21238: CALL_OW 69
21242: PUSH
21243: FOR_IN
21244: IFFALSE 21285
// begin for j := 1 to 4 do
21246: LD_ADDR_VAR 0 3
21250: PUSH
21251: DOUBLE
21252: LD_INT 1
21254: DEC
21255: ST_TO_ADDR
21256: LD_INT 4
21258: PUSH
21259: FOR_TO
21260: IFFALSE 21281
// SetSkill ( i , j , 10 ) ;
21262: LD_VAR 0 2
21266: PPUSH
21267: LD_VAR 0 3
21271: PPUSH
21272: LD_INT 10
21274: PPUSH
21275: CALL_OW 237
21279: GO 21259
21281: POP
21282: POP
// end ;
21283: GO 21243
21285: POP
21286: POP
// end ;
21287: LD_VAR 0 1
21291: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21292: LD_INT 0
21294: PPUSH
// uc_side := your_side ;
21295: LD_ADDR_OWVAR 20
21299: PUSH
21300: LD_OWVAR 2
21304: ST_TO_ADDR
// uc_nation := nation ;
21305: LD_ADDR_OWVAR 21
21309: PUSH
21310: LD_VAR 0 1
21314: ST_TO_ADDR
// InitHc ;
21315: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21319: LD_INT 0
21321: PPUSH
21322: LD_VAR 0 2
21326: PPUSH
21327: LD_VAR 0 3
21331: PPUSH
21332: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21336: LD_VAR 0 4
21340: PPUSH
21341: LD_VAR 0 5
21345: PPUSH
21346: CALL_OW 428
21350: PUSH
21351: LD_INT 0
21353: EQUAL
21354: IFFALSE 21378
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21356: CALL_OW 44
21360: PPUSH
21361: LD_VAR 0 4
21365: PPUSH
21366: LD_VAR 0 5
21370: PPUSH
21371: LD_INT 1
21373: PPUSH
21374: CALL_OW 48
// end ;
21378: LD_VAR 0 6
21382: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21383: LD_INT 0
21385: PPUSH
21386: PPUSH
// uc_side := your_side ;
21387: LD_ADDR_OWVAR 20
21391: PUSH
21392: LD_OWVAR 2
21396: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21397: LD_VAR 0 1
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: LD_INT 2
21407: PUSH
21408: LD_INT 3
21410: PUSH
21411: LD_INT 4
21413: PUSH
21414: LD_INT 5
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: IN
21424: IFFALSE 21436
// uc_nation := nation_american else
21426: LD_ADDR_OWVAR 21
21430: PUSH
21431: LD_INT 1
21433: ST_TO_ADDR
21434: GO 21479
// if chassis in [ 11 , 12 , 13 , 14 ] then
21436: LD_VAR 0 1
21440: PUSH
21441: LD_INT 11
21443: PUSH
21444: LD_INT 12
21446: PUSH
21447: LD_INT 13
21449: PUSH
21450: LD_INT 14
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: IN
21459: IFFALSE 21471
// uc_nation := nation_arabian else
21461: LD_ADDR_OWVAR 21
21465: PUSH
21466: LD_INT 2
21468: ST_TO_ADDR
21469: GO 21479
// uc_nation := nation_russian ;
21471: LD_ADDR_OWVAR 21
21475: PUSH
21476: LD_INT 3
21478: ST_TO_ADDR
// vc_chassis := chassis ;
21479: LD_ADDR_OWVAR 37
21483: PUSH
21484: LD_VAR 0 1
21488: ST_TO_ADDR
// vc_engine := engine ;
21489: LD_ADDR_OWVAR 39
21493: PUSH
21494: LD_VAR 0 2
21498: ST_TO_ADDR
// vc_control := control ;
21499: LD_ADDR_OWVAR 38
21503: PUSH
21504: LD_VAR 0 3
21508: ST_TO_ADDR
// vc_weapon := weapon ;
21509: LD_ADDR_OWVAR 40
21513: PUSH
21514: LD_VAR 0 4
21518: ST_TO_ADDR
// un := CreateVehicle ;
21519: LD_ADDR_VAR 0 8
21523: PUSH
21524: CALL_OW 45
21528: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21529: LD_VAR 0 8
21533: PPUSH
21534: LD_INT 0
21536: PPUSH
21537: LD_INT 5
21539: PPUSH
21540: CALL_OW 12
21544: PPUSH
21545: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21549: LD_VAR 0 8
21553: PPUSH
21554: LD_VAR 0 5
21558: PPUSH
21559: LD_VAR 0 6
21563: PPUSH
21564: LD_INT 1
21566: PPUSH
21567: CALL_OW 48
// end ;
21571: LD_VAR 0 7
21575: RET
// export hInvincible ; every 1 do
21576: GO 21578
21578: DISABLE
// hInvincible := [ ] ;
21579: LD_ADDR_EXP 79
21583: PUSH
21584: EMPTY
21585: ST_TO_ADDR
21586: END
// every 10 do var i ;
21587: GO 21589
21589: DISABLE
21590: LD_INT 0
21592: PPUSH
// begin enable ;
21593: ENABLE
// if not hInvincible then
21594: LD_EXP 79
21598: NOT
21599: IFFALSE 21603
// exit ;
21601: GO 21647
// for i in hInvincible do
21603: LD_ADDR_VAR 0 1
21607: PUSH
21608: LD_EXP 79
21612: PUSH
21613: FOR_IN
21614: IFFALSE 21645
// if GetLives ( i ) < 1000 then
21616: LD_VAR 0 1
21620: PPUSH
21621: CALL_OW 256
21625: PUSH
21626: LD_INT 1000
21628: LESS
21629: IFFALSE 21643
// SetLives ( i , 1000 ) ;
21631: LD_VAR 0 1
21635: PPUSH
21636: LD_INT 1000
21638: PPUSH
21639: CALL_OW 234
21643: GO 21613
21645: POP
21646: POP
// end ;
21647: PPOPN 1
21649: END
// export function hHackInvincible ; var i ; begin
21650: LD_INT 0
21652: PPUSH
21653: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21654: LD_ADDR_VAR 0 2
21658: PUSH
21659: LD_INT 2
21661: PUSH
21662: LD_INT 21
21664: PUSH
21665: LD_INT 1
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 21
21674: PUSH
21675: LD_INT 2
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: LIST
21686: PPUSH
21687: CALL_OW 69
21691: PUSH
21692: FOR_IN
21693: IFFALSE 21754
// if IsSelected ( i ) then
21695: LD_VAR 0 2
21699: PPUSH
21700: CALL_OW 306
21704: IFFALSE 21752
// begin if i in hInvincible then
21706: LD_VAR 0 2
21710: PUSH
21711: LD_EXP 79
21715: IN
21716: IFFALSE 21736
// hInvincible := hInvincible diff i else
21718: LD_ADDR_EXP 79
21722: PUSH
21723: LD_EXP 79
21727: PUSH
21728: LD_VAR 0 2
21732: DIFF
21733: ST_TO_ADDR
21734: GO 21752
// hInvincible := hInvincible union i ;
21736: LD_ADDR_EXP 79
21740: PUSH
21741: LD_EXP 79
21745: PUSH
21746: LD_VAR 0 2
21750: UNION
21751: ST_TO_ADDR
// end ;
21752: GO 21692
21754: POP
21755: POP
// end ;
21756: LD_VAR 0 1
21760: RET
// export function hHackInvisible ; var i , j ; begin
21761: LD_INT 0
21763: PPUSH
21764: PPUSH
21765: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21766: LD_ADDR_VAR 0 2
21770: PUSH
21771: LD_INT 21
21773: PUSH
21774: LD_INT 1
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PPUSH
21781: CALL_OW 69
21785: PUSH
21786: FOR_IN
21787: IFFALSE 21811
// if IsSelected ( i ) then
21789: LD_VAR 0 2
21793: PPUSH
21794: CALL_OW 306
21798: IFFALSE 21809
// ComForceInvisible ( i ) ;
21800: LD_VAR 0 2
21804: PPUSH
21805: CALL_OW 496
21809: GO 21786
21811: POP
21812: POP
// end ;
21813: LD_VAR 0 1
21817: RET
// export function hHackChangeYourSide ; begin
21818: LD_INT 0
21820: PPUSH
// if your_side = 8 then
21821: LD_OWVAR 2
21825: PUSH
21826: LD_INT 8
21828: EQUAL
21829: IFFALSE 21841
// your_side := 0 else
21831: LD_ADDR_OWVAR 2
21835: PUSH
21836: LD_INT 0
21838: ST_TO_ADDR
21839: GO 21855
// your_side := your_side + 1 ;
21841: LD_ADDR_OWVAR 2
21845: PUSH
21846: LD_OWVAR 2
21850: PUSH
21851: LD_INT 1
21853: PLUS
21854: ST_TO_ADDR
// end ;
21855: LD_VAR 0 1
21859: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21860: LD_INT 0
21862: PPUSH
21863: PPUSH
21864: PPUSH
// for i in all_units do
21865: LD_ADDR_VAR 0 2
21869: PUSH
21870: LD_OWVAR 3
21874: PUSH
21875: FOR_IN
21876: IFFALSE 21954
// if IsSelected ( i ) then
21878: LD_VAR 0 2
21882: PPUSH
21883: CALL_OW 306
21887: IFFALSE 21952
// begin j := GetSide ( i ) ;
21889: LD_ADDR_VAR 0 3
21893: PUSH
21894: LD_VAR 0 2
21898: PPUSH
21899: CALL_OW 255
21903: ST_TO_ADDR
// if j = 8 then
21904: LD_VAR 0 3
21908: PUSH
21909: LD_INT 8
21911: EQUAL
21912: IFFALSE 21924
// j := 0 else
21914: LD_ADDR_VAR 0 3
21918: PUSH
21919: LD_INT 0
21921: ST_TO_ADDR
21922: GO 21938
// j := j + 1 ;
21924: LD_ADDR_VAR 0 3
21928: PUSH
21929: LD_VAR 0 3
21933: PUSH
21934: LD_INT 1
21936: PLUS
21937: ST_TO_ADDR
// SetSide ( i , j ) ;
21938: LD_VAR 0 2
21942: PPUSH
21943: LD_VAR 0 3
21947: PPUSH
21948: CALL_OW 235
// end ;
21952: GO 21875
21954: POP
21955: POP
// end ;
21956: LD_VAR 0 1
21960: RET
// export function hHackFog ; begin
21961: LD_INT 0
21963: PPUSH
// FogOff ( true ) ;
21964: LD_INT 1
21966: PPUSH
21967: CALL_OW 344
// end ;
21971: LD_VAR 0 1
21975: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21976: LD_INT 0
21978: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21979: LD_VAR 0 1
21983: PPUSH
21984: LD_VAR 0 2
21988: PPUSH
21989: LD_VAR 0 3
21993: PPUSH
21994: LD_INT 1
21996: PPUSH
21997: LD_INT 1
21999: PPUSH
22000: CALL_OW 483
// CenterOnXY ( x , y ) ;
22004: LD_VAR 0 2
22008: PPUSH
22009: LD_VAR 0 3
22013: PPUSH
22014: CALL_OW 84
// end ;
22018: LD_VAR 0 4
22022: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22023: LD_INT 0
22025: PPUSH
22026: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22027: LD_VAR 0 1
22031: NOT
22032: PUSH
22033: LD_VAR 0 2
22037: PPUSH
22038: LD_VAR 0 3
22042: PPUSH
22043: CALL_OW 488
22047: NOT
22048: OR
22049: PUSH
22050: LD_VAR 0 1
22054: PPUSH
22055: CALL_OW 266
22059: PUSH
22060: LD_INT 3
22062: NONEQUAL
22063: PUSH
22064: LD_VAR 0 1
22068: PPUSH
22069: CALL_OW 247
22073: PUSH
22074: LD_INT 1
22076: EQUAL
22077: NOT
22078: AND
22079: OR
22080: IFFALSE 22084
// exit ;
22082: GO 22233
// if GetType ( factory ) = unit_human then
22084: LD_VAR 0 1
22088: PPUSH
22089: CALL_OW 247
22093: PUSH
22094: LD_INT 1
22096: EQUAL
22097: IFFALSE 22114
// factory := IsInUnit ( factory ) ;
22099: LD_ADDR_VAR 0 1
22103: PUSH
22104: LD_VAR 0 1
22108: PPUSH
22109: CALL_OW 310
22113: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22114: LD_VAR 0 1
22118: PPUSH
22119: CALL_OW 266
22123: PUSH
22124: LD_INT 3
22126: NONEQUAL
22127: IFFALSE 22131
// exit ;
22129: GO 22233
// if HexInfo ( x , y ) = factory then
22131: LD_VAR 0 2
22135: PPUSH
22136: LD_VAR 0 3
22140: PPUSH
22141: CALL_OW 428
22145: PUSH
22146: LD_VAR 0 1
22150: EQUAL
22151: IFFALSE 22178
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22153: LD_ADDR_EXP 80
22157: PUSH
22158: LD_EXP 80
22162: PPUSH
22163: LD_VAR 0 1
22167: PPUSH
22168: LD_INT 0
22170: PPUSH
22171: CALL_OW 1
22175: ST_TO_ADDR
22176: GO 22229
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22178: LD_ADDR_EXP 80
22182: PUSH
22183: LD_EXP 80
22187: PPUSH
22188: LD_VAR 0 1
22192: PPUSH
22193: LD_VAR 0 1
22197: PPUSH
22198: CALL_OW 255
22202: PUSH
22203: LD_VAR 0 1
22207: PUSH
22208: LD_VAR 0 2
22212: PUSH
22213: LD_VAR 0 3
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: PPUSH
22224: CALL_OW 1
22228: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22229: CALL 22238 0 0
// end ;
22233: LD_VAR 0 4
22237: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22238: LD_INT 0
22240: PPUSH
22241: PPUSH
22242: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22243: LD_STRING resetFactoryWaypoint();
22245: PPUSH
22246: CALL_OW 559
// if factoryWaypoints then
22250: LD_EXP 80
22254: IFFALSE 22380
// begin list := PrepareArray ( factoryWaypoints ) ;
22256: LD_ADDR_VAR 0 3
22260: PUSH
22261: LD_EXP 80
22265: PPUSH
22266: CALL 64661 0 1
22270: ST_TO_ADDR
// for i := 1 to list do
22271: LD_ADDR_VAR 0 2
22275: PUSH
22276: DOUBLE
22277: LD_INT 1
22279: DEC
22280: ST_TO_ADDR
22281: LD_VAR 0 3
22285: PUSH
22286: FOR_TO
22287: IFFALSE 22378
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22289: LD_STRING setFactoryWaypointXY(
22291: PUSH
22292: LD_VAR 0 3
22296: PUSH
22297: LD_VAR 0 2
22301: ARRAY
22302: PUSH
22303: LD_INT 1
22305: ARRAY
22306: STR
22307: PUSH
22308: LD_STRING ,
22310: STR
22311: PUSH
22312: LD_VAR 0 3
22316: PUSH
22317: LD_VAR 0 2
22321: ARRAY
22322: PUSH
22323: LD_INT 2
22325: ARRAY
22326: STR
22327: PUSH
22328: LD_STRING ,
22330: STR
22331: PUSH
22332: LD_VAR 0 3
22336: PUSH
22337: LD_VAR 0 2
22341: ARRAY
22342: PUSH
22343: LD_INT 3
22345: ARRAY
22346: STR
22347: PUSH
22348: LD_STRING ,
22350: STR
22351: PUSH
22352: LD_VAR 0 3
22356: PUSH
22357: LD_VAR 0 2
22361: ARRAY
22362: PUSH
22363: LD_INT 4
22365: ARRAY
22366: STR
22367: PUSH
22368: LD_STRING )
22370: STR
22371: PPUSH
22372: CALL_OW 559
22376: GO 22286
22378: POP
22379: POP
// end ; end ;
22380: LD_VAR 0 1
22384: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22385: LD_INT 0
22387: PPUSH
// if HexInfo ( x , y ) = warehouse then
22388: LD_VAR 0 2
22392: PPUSH
22393: LD_VAR 0 3
22397: PPUSH
22398: CALL_OW 428
22402: PUSH
22403: LD_VAR 0 1
22407: EQUAL
22408: IFFALSE 22435
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22410: LD_ADDR_EXP 81
22414: PUSH
22415: LD_EXP 81
22419: PPUSH
22420: LD_VAR 0 1
22424: PPUSH
22425: LD_INT 0
22427: PPUSH
22428: CALL_OW 1
22432: ST_TO_ADDR
22433: GO 22486
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22435: LD_ADDR_EXP 81
22439: PUSH
22440: LD_EXP 81
22444: PPUSH
22445: LD_VAR 0 1
22449: PPUSH
22450: LD_VAR 0 1
22454: PPUSH
22455: CALL_OW 255
22459: PUSH
22460: LD_VAR 0 1
22464: PUSH
22465: LD_VAR 0 2
22469: PUSH
22470: LD_VAR 0 3
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: PPUSH
22481: CALL_OW 1
22485: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22486: CALL 22495 0 0
// end ;
22490: LD_VAR 0 4
22494: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22495: LD_INT 0
22497: PPUSH
22498: PPUSH
22499: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22500: LD_STRING resetWarehouseGatheringPoints();
22502: PPUSH
22503: CALL_OW 559
// if warehouseGatheringPoints then
22507: LD_EXP 81
22511: IFFALSE 22637
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22513: LD_ADDR_VAR 0 3
22517: PUSH
22518: LD_EXP 81
22522: PPUSH
22523: CALL 64661 0 1
22527: ST_TO_ADDR
// for i := 1 to list do
22528: LD_ADDR_VAR 0 2
22532: PUSH
22533: DOUBLE
22534: LD_INT 1
22536: DEC
22537: ST_TO_ADDR
22538: LD_VAR 0 3
22542: PUSH
22543: FOR_TO
22544: IFFALSE 22635
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22546: LD_STRING setWarehouseGatheringPointXY(
22548: PUSH
22549: LD_VAR 0 3
22553: PUSH
22554: LD_VAR 0 2
22558: ARRAY
22559: PUSH
22560: LD_INT 1
22562: ARRAY
22563: STR
22564: PUSH
22565: LD_STRING ,
22567: STR
22568: PUSH
22569: LD_VAR 0 3
22573: PUSH
22574: LD_VAR 0 2
22578: ARRAY
22579: PUSH
22580: LD_INT 2
22582: ARRAY
22583: STR
22584: PUSH
22585: LD_STRING ,
22587: STR
22588: PUSH
22589: LD_VAR 0 3
22593: PUSH
22594: LD_VAR 0 2
22598: ARRAY
22599: PUSH
22600: LD_INT 3
22602: ARRAY
22603: STR
22604: PUSH
22605: LD_STRING ,
22607: STR
22608: PUSH
22609: LD_VAR 0 3
22613: PUSH
22614: LD_VAR 0 2
22618: ARRAY
22619: PUSH
22620: LD_INT 4
22622: ARRAY
22623: STR
22624: PUSH
22625: LD_STRING )
22627: STR
22628: PPUSH
22629: CALL_OW 559
22633: GO 22543
22635: POP
22636: POP
// end ; end ;
22637: LD_VAR 0 1
22641: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22642: LD_EXP 81
22646: IFFALSE 23333
22648: GO 22650
22650: DISABLE
22651: LD_INT 0
22653: PPUSH
22654: PPUSH
22655: PPUSH
22656: PPUSH
22657: PPUSH
22658: PPUSH
22659: PPUSH
22660: PPUSH
22661: PPUSH
// begin enable ;
22662: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22663: LD_ADDR_VAR 0 3
22667: PUSH
22668: LD_EXP 81
22672: PPUSH
22673: CALL 64661 0 1
22677: ST_TO_ADDR
// if not list then
22678: LD_VAR 0 3
22682: NOT
22683: IFFALSE 22687
// exit ;
22685: GO 23333
// for i := 1 to list do
22687: LD_ADDR_VAR 0 1
22691: PUSH
22692: DOUBLE
22693: LD_INT 1
22695: DEC
22696: ST_TO_ADDR
22697: LD_VAR 0 3
22701: PUSH
22702: FOR_TO
22703: IFFALSE 23331
// begin depot := list [ i ] [ 2 ] ;
22705: LD_ADDR_VAR 0 8
22709: PUSH
22710: LD_VAR 0 3
22714: PUSH
22715: LD_VAR 0 1
22719: ARRAY
22720: PUSH
22721: LD_INT 2
22723: ARRAY
22724: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22725: LD_ADDR_VAR 0 5
22729: PUSH
22730: LD_VAR 0 3
22734: PUSH
22735: LD_VAR 0 1
22739: ARRAY
22740: PUSH
22741: LD_INT 1
22743: ARRAY
22744: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22745: LD_VAR 0 8
22749: PPUSH
22750: CALL_OW 301
22754: PUSH
22755: LD_VAR 0 5
22759: PUSH
22760: LD_VAR 0 8
22764: PPUSH
22765: CALL_OW 255
22769: NONEQUAL
22770: OR
22771: IFFALSE 22800
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22773: LD_ADDR_EXP 81
22777: PUSH
22778: LD_EXP 81
22782: PPUSH
22783: LD_VAR 0 8
22787: PPUSH
22788: LD_INT 0
22790: PPUSH
22791: CALL_OW 1
22795: ST_TO_ADDR
// exit ;
22796: POP
22797: POP
22798: GO 23333
// end ; x := list [ i ] [ 3 ] ;
22800: LD_ADDR_VAR 0 6
22804: PUSH
22805: LD_VAR 0 3
22809: PUSH
22810: LD_VAR 0 1
22814: ARRAY
22815: PUSH
22816: LD_INT 3
22818: ARRAY
22819: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22820: LD_ADDR_VAR 0 7
22824: PUSH
22825: LD_VAR 0 3
22829: PUSH
22830: LD_VAR 0 1
22834: ARRAY
22835: PUSH
22836: LD_INT 4
22838: ARRAY
22839: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22840: LD_ADDR_VAR 0 9
22844: PUSH
22845: LD_VAR 0 6
22849: PPUSH
22850: LD_VAR 0 7
22854: PPUSH
22855: LD_INT 16
22857: PPUSH
22858: CALL 63245 0 3
22862: ST_TO_ADDR
// if not cratesNearbyPoint then
22863: LD_VAR 0 9
22867: NOT
22868: IFFALSE 22874
// exit ;
22870: POP
22871: POP
22872: GO 23333
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22874: LD_ADDR_VAR 0 4
22878: PUSH
22879: LD_INT 22
22881: PUSH
22882: LD_VAR 0 5
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 3
22893: PUSH
22894: LD_INT 60
22896: PUSH
22897: EMPTY
22898: LIST
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 91
22906: PUSH
22907: LD_VAR 0 8
22911: PUSH
22912: LD_INT 6
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 2
22922: PUSH
22923: LD_INT 25
22925: PUSH
22926: LD_INT 2
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 25
22935: PUSH
22936: LD_INT 16
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: LIST
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: PPUSH
22954: CALL_OW 69
22958: PUSH
22959: LD_VAR 0 8
22963: PPUSH
22964: CALL_OW 313
22968: PPUSH
22969: LD_INT 3
22971: PUSH
22972: LD_INT 60
22974: PUSH
22975: EMPTY
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: LD_INT 25
22987: PUSH
22988: LD_INT 2
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 25
22997: PUSH
22998: LD_INT 16
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: LIST
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PPUSH
23014: CALL_OW 72
23018: UNION
23019: ST_TO_ADDR
// if tmp then
23020: LD_VAR 0 4
23024: IFFALSE 23104
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23026: LD_ADDR_VAR 0 4
23030: PUSH
23031: LD_VAR 0 4
23035: PPUSH
23036: LD_INT 3
23038: PPUSH
23039: CALL 61212 0 2
23043: ST_TO_ADDR
// for j in tmp do
23044: LD_ADDR_VAR 0 2
23048: PUSH
23049: LD_VAR 0 4
23053: PUSH
23054: FOR_IN
23055: IFFALSE 23098
// begin if IsInUnit ( j ) then
23057: LD_VAR 0 2
23061: PPUSH
23062: CALL_OW 310
23066: IFFALSE 23077
// ComExit ( j ) ;
23068: LD_VAR 0 2
23072: PPUSH
23073: CALL 61295 0 1
// AddComCollect ( j , x , y ) ;
23077: LD_VAR 0 2
23081: PPUSH
23082: LD_VAR 0 6
23086: PPUSH
23087: LD_VAR 0 7
23091: PPUSH
23092: CALL_OW 177
// end ;
23096: GO 23054
23098: POP
23099: POP
// exit ;
23100: POP
23101: POP
23102: GO 23333
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23104: LD_ADDR_VAR 0 4
23108: PUSH
23109: LD_INT 22
23111: PUSH
23112: LD_VAR 0 5
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 91
23123: PUSH
23124: LD_VAR 0 8
23128: PUSH
23129: LD_INT 8
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 2
23139: PUSH
23140: LD_INT 34
23142: PUSH
23143: LD_INT 12
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 34
23152: PUSH
23153: LD_INT 51
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 34
23162: PUSH
23163: LD_INT 32
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 34
23172: PUSH
23173: LD_EXP 84
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: LIST
23193: PPUSH
23194: CALL_OW 69
23198: ST_TO_ADDR
// if tmp then
23199: LD_VAR 0 4
23203: IFFALSE 23329
// begin for j in tmp do
23205: LD_ADDR_VAR 0 2
23209: PUSH
23210: LD_VAR 0 4
23214: PUSH
23215: FOR_IN
23216: IFFALSE 23327
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23218: LD_VAR 0 2
23222: PPUSH
23223: CALL_OW 262
23227: PUSH
23228: LD_INT 3
23230: EQUAL
23231: PUSH
23232: LD_VAR 0 2
23236: PPUSH
23237: CALL_OW 261
23241: PUSH
23242: LD_INT 20
23244: GREATER
23245: OR
23246: PUSH
23247: LD_VAR 0 2
23251: PPUSH
23252: CALL_OW 314
23256: NOT
23257: AND
23258: PUSH
23259: LD_VAR 0 2
23263: PPUSH
23264: CALL_OW 263
23268: PUSH
23269: LD_INT 1
23271: NONEQUAL
23272: PUSH
23273: LD_VAR 0 2
23277: PPUSH
23278: CALL_OW 311
23282: OR
23283: AND
23284: IFFALSE 23325
// begin ComCollect ( j , x , y ) ;
23286: LD_VAR 0 2
23290: PPUSH
23291: LD_VAR 0 6
23295: PPUSH
23296: LD_VAR 0 7
23300: PPUSH
23301: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23305: LD_VAR 0 2
23309: PPUSH
23310: LD_VAR 0 8
23314: PPUSH
23315: CALL_OW 172
// exit ;
23319: POP
23320: POP
23321: POP
23322: POP
23323: GO 23333
// end ;
23325: GO 23215
23327: POP
23328: POP
// end ; end ;
23329: GO 22702
23331: POP
23332: POP
// end ; end_of_file end_of_file
23333: PPOPN 9
23335: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
23336: LD_INT 0
23338: PPUSH
// ar_miner := 81 ;
23339: LD_ADDR_EXP 90
23343: PUSH
23344: LD_INT 81
23346: ST_TO_ADDR
// ar_crane := 88 ;
23347: LD_ADDR_EXP 89
23351: PUSH
23352: LD_INT 88
23354: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
23355: LD_ADDR_EXP 84
23359: PUSH
23360: LD_INT 89
23362: ST_TO_ADDR
// us_hack := 99 ;
23363: LD_ADDR_EXP 85
23367: PUSH
23368: LD_INT 99
23370: ST_TO_ADDR
// us_artillery := 97 ;
23371: LD_ADDR_EXP 86
23375: PUSH
23376: LD_INT 97
23378: ST_TO_ADDR
// ar_bio_bomb := 91 ;
23379: LD_ADDR_EXP 87
23383: PUSH
23384: LD_INT 91
23386: ST_TO_ADDR
// ar_mortar := 92 ;
23387: LD_ADDR_EXP 88
23391: PUSH
23392: LD_INT 92
23394: ST_TO_ADDR
// ru_flamethrower := 93 ;
23395: LD_ADDR_EXP 91
23399: PUSH
23400: LD_INT 93
23402: ST_TO_ADDR
// ru_radar := 98 ;
23403: LD_ADDR_EXP 83
23407: PUSH
23408: LD_INT 98
23410: ST_TO_ADDR
// tech_Artillery := 80 ;
23411: LD_ADDR_EXP 92
23415: PUSH
23416: LD_INT 80
23418: ST_TO_ADDR
// tech_RadMat := 81 ;
23419: LD_ADDR_EXP 93
23423: PUSH
23424: LD_INT 81
23426: ST_TO_ADDR
// tech_BasicTools := 82 ;
23427: LD_ADDR_EXP 94
23431: PUSH
23432: LD_INT 82
23434: ST_TO_ADDR
// tech_Cargo := 83 ;
23435: LD_ADDR_EXP 95
23439: PUSH
23440: LD_INT 83
23442: ST_TO_ADDR
// tech_Track := 84 ;
23443: LD_ADDR_EXP 96
23447: PUSH
23448: LD_INT 84
23450: ST_TO_ADDR
// tech_Crane := 85 ;
23451: LD_ADDR_EXP 97
23455: PUSH
23456: LD_INT 85
23458: ST_TO_ADDR
// tech_Bulldozer := 86 ;
23459: LD_ADDR_EXP 98
23463: PUSH
23464: LD_INT 86
23466: ST_TO_ADDR
// tech_Hovercraft := 87 ;
23467: LD_ADDR_EXP 99
23471: PUSH
23472: LD_INT 87
23474: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
23475: LD_ADDR_EXP 100
23479: PUSH
23480: LD_INT 88
23482: ST_TO_ADDR
// end ;
23483: LD_VAR 0 1
23487: RET
// every 1 do
23488: GO 23490
23490: DISABLE
// InitGlobalVariables ; end_of_file
23491: CALL 23336 0 0
23495: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23496: LD_INT 0
23498: PPUSH
23499: PPUSH
// if exist_mode then
23500: LD_VAR 0 2
23504: IFFALSE 23529
// unit := CreateCharacter ( prefix & ident ) else
23506: LD_ADDR_VAR 0 5
23510: PUSH
23511: LD_VAR 0 3
23515: PUSH
23516: LD_VAR 0 1
23520: STR
23521: PPUSH
23522: CALL_OW 34
23526: ST_TO_ADDR
23527: GO 23544
// unit := NewCharacter ( ident ) ;
23529: LD_ADDR_VAR 0 5
23533: PUSH
23534: LD_VAR 0 1
23538: PPUSH
23539: CALL_OW 25
23543: ST_TO_ADDR
// result := unit ;
23544: LD_ADDR_VAR 0 4
23548: PUSH
23549: LD_VAR 0 5
23553: ST_TO_ADDR
// end ;
23554: LD_VAR 0 4
23558: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23559: LD_INT 0
23561: PPUSH
23562: PPUSH
// if not side or not nation then
23563: LD_VAR 0 1
23567: NOT
23568: PUSH
23569: LD_VAR 0 2
23573: NOT
23574: OR
23575: IFFALSE 23579
// exit ;
23577: GO 24347
// case nation of nation_american :
23579: LD_VAR 0 2
23583: PUSH
23584: LD_INT 1
23586: DOUBLE
23587: EQUAL
23588: IFTRUE 23592
23590: GO 23806
23592: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23593: LD_ADDR_VAR 0 4
23597: PUSH
23598: LD_INT 35
23600: PUSH
23601: LD_INT 45
23603: PUSH
23604: LD_INT 46
23606: PUSH
23607: LD_INT 47
23609: PUSH
23610: LD_INT 82
23612: PUSH
23613: LD_INT 83
23615: PUSH
23616: LD_INT 84
23618: PUSH
23619: LD_INT 85
23621: PUSH
23622: LD_INT 86
23624: PUSH
23625: LD_INT 1
23627: PUSH
23628: LD_INT 2
23630: PUSH
23631: LD_INT 6
23633: PUSH
23634: LD_INT 15
23636: PUSH
23637: LD_INT 16
23639: PUSH
23640: LD_INT 7
23642: PUSH
23643: LD_INT 12
23645: PUSH
23646: LD_INT 13
23648: PUSH
23649: LD_INT 10
23651: PUSH
23652: LD_INT 14
23654: PUSH
23655: LD_INT 20
23657: PUSH
23658: LD_INT 21
23660: PUSH
23661: LD_INT 22
23663: PUSH
23664: LD_INT 25
23666: PUSH
23667: LD_INT 32
23669: PUSH
23670: LD_INT 27
23672: PUSH
23673: LD_INT 36
23675: PUSH
23676: LD_INT 69
23678: PUSH
23679: LD_INT 39
23681: PUSH
23682: LD_INT 34
23684: PUSH
23685: LD_INT 40
23687: PUSH
23688: LD_INT 48
23690: PUSH
23691: LD_INT 49
23693: PUSH
23694: LD_INT 50
23696: PUSH
23697: LD_INT 51
23699: PUSH
23700: LD_INT 52
23702: PUSH
23703: LD_INT 53
23705: PUSH
23706: LD_INT 54
23708: PUSH
23709: LD_INT 55
23711: PUSH
23712: LD_INT 56
23714: PUSH
23715: LD_INT 57
23717: PUSH
23718: LD_INT 58
23720: PUSH
23721: LD_INT 59
23723: PUSH
23724: LD_INT 60
23726: PUSH
23727: LD_INT 61
23729: PUSH
23730: LD_INT 62
23732: PUSH
23733: LD_INT 80
23735: PUSH
23736: LD_INT 82
23738: PUSH
23739: LD_INT 83
23741: PUSH
23742: LD_INT 84
23744: PUSH
23745: LD_INT 85
23747: PUSH
23748: LD_INT 86
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: ST_TO_ADDR
23804: GO 24271
23806: LD_INT 2
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23814
23812: GO 24040
23814: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23815: LD_ADDR_VAR 0 4
23819: PUSH
23820: LD_INT 35
23822: PUSH
23823: LD_INT 45
23825: PUSH
23826: LD_INT 46
23828: PUSH
23829: LD_INT 47
23831: PUSH
23832: LD_INT 82
23834: PUSH
23835: LD_INT 83
23837: PUSH
23838: LD_INT 84
23840: PUSH
23841: LD_INT 85
23843: PUSH
23844: LD_INT 87
23846: PUSH
23847: LD_INT 70
23849: PUSH
23850: LD_INT 1
23852: PUSH
23853: LD_INT 11
23855: PUSH
23856: LD_INT 3
23858: PUSH
23859: LD_INT 4
23861: PUSH
23862: LD_INT 5
23864: PUSH
23865: LD_INT 6
23867: PUSH
23868: LD_INT 15
23870: PUSH
23871: LD_INT 18
23873: PUSH
23874: LD_INT 7
23876: PUSH
23877: LD_INT 17
23879: PUSH
23880: LD_INT 8
23882: PUSH
23883: LD_INT 20
23885: PUSH
23886: LD_INT 21
23888: PUSH
23889: LD_INT 22
23891: PUSH
23892: LD_INT 72
23894: PUSH
23895: LD_INT 26
23897: PUSH
23898: LD_INT 69
23900: PUSH
23901: LD_INT 39
23903: PUSH
23904: LD_INT 40
23906: PUSH
23907: LD_INT 41
23909: PUSH
23910: LD_INT 42
23912: PUSH
23913: LD_INT 43
23915: PUSH
23916: LD_INT 48
23918: PUSH
23919: LD_INT 49
23921: PUSH
23922: LD_INT 50
23924: PUSH
23925: LD_INT 51
23927: PUSH
23928: LD_INT 52
23930: PUSH
23931: LD_INT 53
23933: PUSH
23934: LD_INT 54
23936: PUSH
23937: LD_INT 55
23939: PUSH
23940: LD_INT 56
23942: PUSH
23943: LD_INT 60
23945: PUSH
23946: LD_INT 61
23948: PUSH
23949: LD_INT 62
23951: PUSH
23952: LD_INT 66
23954: PUSH
23955: LD_INT 67
23957: PUSH
23958: LD_INT 68
23960: PUSH
23961: LD_INT 81
23963: PUSH
23964: LD_INT 82
23966: PUSH
23967: LD_INT 83
23969: PUSH
23970: LD_INT 84
23972: PUSH
23973: LD_INT 85
23975: PUSH
23976: LD_INT 87
23978: PUSH
23979: LD_INT 88
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: ST_TO_ADDR
24038: GO 24271
24040: LD_INT 3
24042: DOUBLE
24043: EQUAL
24044: IFTRUE 24048
24046: GO 24270
24048: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24049: LD_ADDR_VAR 0 4
24053: PUSH
24054: LD_INT 46
24056: PUSH
24057: LD_INT 47
24059: PUSH
24060: LD_INT 1
24062: PUSH
24063: LD_INT 2
24065: PUSH
24066: LD_INT 82
24068: PUSH
24069: LD_INT 83
24071: PUSH
24072: LD_INT 84
24074: PUSH
24075: LD_INT 85
24077: PUSH
24078: LD_INT 86
24080: PUSH
24081: LD_INT 11
24083: PUSH
24084: LD_INT 9
24086: PUSH
24087: LD_INT 20
24089: PUSH
24090: LD_INT 19
24092: PUSH
24093: LD_INT 21
24095: PUSH
24096: LD_INT 24
24098: PUSH
24099: LD_INT 22
24101: PUSH
24102: LD_INT 25
24104: PUSH
24105: LD_INT 28
24107: PUSH
24108: LD_INT 29
24110: PUSH
24111: LD_INT 30
24113: PUSH
24114: LD_INT 31
24116: PUSH
24117: LD_INT 37
24119: PUSH
24120: LD_INT 38
24122: PUSH
24123: LD_INT 32
24125: PUSH
24126: LD_INT 27
24128: PUSH
24129: LD_INT 33
24131: PUSH
24132: LD_INT 69
24134: PUSH
24135: LD_INT 39
24137: PUSH
24138: LD_INT 34
24140: PUSH
24141: LD_INT 40
24143: PUSH
24144: LD_INT 71
24146: PUSH
24147: LD_INT 23
24149: PUSH
24150: LD_INT 44
24152: PUSH
24153: LD_INT 48
24155: PUSH
24156: LD_INT 49
24158: PUSH
24159: LD_INT 50
24161: PUSH
24162: LD_INT 51
24164: PUSH
24165: LD_INT 52
24167: PUSH
24168: LD_INT 53
24170: PUSH
24171: LD_INT 54
24173: PUSH
24174: LD_INT 55
24176: PUSH
24177: LD_INT 56
24179: PUSH
24180: LD_INT 57
24182: PUSH
24183: LD_INT 58
24185: PUSH
24186: LD_INT 59
24188: PUSH
24189: LD_INT 63
24191: PUSH
24192: LD_INT 64
24194: PUSH
24195: LD_INT 65
24197: PUSH
24198: LD_INT 82
24200: PUSH
24201: LD_INT 83
24203: PUSH
24204: LD_INT 84
24206: PUSH
24207: LD_INT 85
24209: PUSH
24210: LD_INT 86
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: ST_TO_ADDR
24268: GO 24271
24270: POP
// if state > - 1 and state < 3 then
24271: LD_VAR 0 3
24275: PUSH
24276: LD_INT 1
24278: NEG
24279: GREATER
24280: PUSH
24281: LD_VAR 0 3
24285: PUSH
24286: LD_INT 3
24288: LESS
24289: AND
24290: IFFALSE 24347
// for i in result do
24292: LD_ADDR_VAR 0 5
24296: PUSH
24297: LD_VAR 0 4
24301: PUSH
24302: FOR_IN
24303: IFFALSE 24345
// if GetTech ( i , side ) <> state then
24305: LD_VAR 0 5
24309: PPUSH
24310: LD_VAR 0 1
24314: PPUSH
24315: CALL_OW 321
24319: PUSH
24320: LD_VAR 0 3
24324: NONEQUAL
24325: IFFALSE 24343
// result := result diff i ;
24327: LD_ADDR_VAR 0 4
24331: PUSH
24332: LD_VAR 0 4
24336: PUSH
24337: LD_VAR 0 5
24341: DIFF
24342: ST_TO_ADDR
24343: GO 24302
24345: POP
24346: POP
// end ;
24347: LD_VAR 0 4
24351: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24352: LD_INT 0
24354: PPUSH
24355: PPUSH
24356: PPUSH
// result := true ;
24357: LD_ADDR_VAR 0 3
24361: PUSH
24362: LD_INT 1
24364: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24365: LD_ADDR_VAR 0 5
24369: PUSH
24370: LD_VAR 0 2
24374: PPUSH
24375: CALL_OW 480
24379: ST_TO_ADDR
// if not tmp then
24380: LD_VAR 0 5
24384: NOT
24385: IFFALSE 24389
// exit ;
24387: GO 24438
// for i in tmp do
24389: LD_ADDR_VAR 0 4
24393: PUSH
24394: LD_VAR 0 5
24398: PUSH
24399: FOR_IN
24400: IFFALSE 24436
// if GetTech ( i , side ) <> state_researched then
24402: LD_VAR 0 4
24406: PPUSH
24407: LD_VAR 0 1
24411: PPUSH
24412: CALL_OW 321
24416: PUSH
24417: LD_INT 2
24419: NONEQUAL
24420: IFFALSE 24434
// begin result := false ;
24422: LD_ADDR_VAR 0 3
24426: PUSH
24427: LD_INT 0
24429: ST_TO_ADDR
// exit ;
24430: POP
24431: POP
24432: GO 24438
// end ;
24434: GO 24399
24436: POP
24437: POP
// end ;
24438: LD_VAR 0 3
24442: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24443: LD_INT 0
24445: PPUSH
24446: PPUSH
24447: PPUSH
24448: PPUSH
24449: PPUSH
24450: PPUSH
24451: PPUSH
24452: PPUSH
24453: PPUSH
24454: PPUSH
24455: PPUSH
24456: PPUSH
24457: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24458: LD_VAR 0 1
24462: NOT
24463: PUSH
24464: LD_VAR 0 1
24468: PPUSH
24469: CALL_OW 257
24473: PUSH
24474: LD_INT 9
24476: NONEQUAL
24477: OR
24478: IFFALSE 24482
// exit ;
24480: GO 25055
// side := GetSide ( unit ) ;
24482: LD_ADDR_VAR 0 9
24486: PUSH
24487: LD_VAR 0 1
24491: PPUSH
24492: CALL_OW 255
24496: ST_TO_ADDR
// tech_space := tech_spacanom ;
24497: LD_ADDR_VAR 0 12
24501: PUSH
24502: LD_INT 29
24504: ST_TO_ADDR
// tech_time := tech_taurad ;
24505: LD_ADDR_VAR 0 13
24509: PUSH
24510: LD_INT 28
24512: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24513: LD_ADDR_VAR 0 11
24517: PUSH
24518: LD_VAR 0 1
24522: PPUSH
24523: CALL_OW 310
24527: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24528: LD_VAR 0 11
24532: PPUSH
24533: CALL_OW 247
24537: PUSH
24538: LD_INT 2
24540: EQUAL
24541: IFFALSE 24545
// exit ;
24543: GO 25055
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24545: LD_ADDR_VAR 0 8
24549: PUSH
24550: LD_INT 81
24552: PUSH
24553: LD_VAR 0 9
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 3
24564: PUSH
24565: LD_INT 21
24567: PUSH
24568: LD_INT 3
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PPUSH
24583: CALL_OW 69
24587: ST_TO_ADDR
// if not tmp then
24588: LD_VAR 0 8
24592: NOT
24593: IFFALSE 24597
// exit ;
24595: GO 25055
// if in_unit then
24597: LD_VAR 0 11
24601: IFFALSE 24625
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24603: LD_ADDR_VAR 0 10
24607: PUSH
24608: LD_VAR 0 8
24612: PPUSH
24613: LD_VAR 0 11
24617: PPUSH
24618: CALL_OW 74
24622: ST_TO_ADDR
24623: GO 24645
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24625: LD_ADDR_VAR 0 10
24629: PUSH
24630: LD_VAR 0 8
24634: PPUSH
24635: LD_VAR 0 1
24639: PPUSH
24640: CALL_OW 74
24644: ST_TO_ADDR
// if not enemy then
24645: LD_VAR 0 10
24649: NOT
24650: IFFALSE 24654
// exit ;
24652: GO 25055
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24654: LD_VAR 0 11
24658: PUSH
24659: LD_VAR 0 11
24663: PPUSH
24664: LD_VAR 0 10
24668: PPUSH
24669: CALL_OW 296
24673: PUSH
24674: LD_INT 13
24676: GREATER
24677: AND
24678: PUSH
24679: LD_VAR 0 1
24683: PPUSH
24684: LD_VAR 0 10
24688: PPUSH
24689: CALL_OW 296
24693: PUSH
24694: LD_INT 12
24696: GREATER
24697: OR
24698: IFFALSE 24702
// exit ;
24700: GO 25055
// missile := [ 1 ] ;
24702: LD_ADDR_VAR 0 14
24706: PUSH
24707: LD_INT 1
24709: PUSH
24710: EMPTY
24711: LIST
24712: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24713: LD_VAR 0 9
24717: PPUSH
24718: LD_VAR 0 12
24722: PPUSH
24723: CALL_OW 325
24727: IFFALSE 24756
// missile := Replace ( missile , missile + 1 , 2 ) ;
24729: LD_ADDR_VAR 0 14
24733: PUSH
24734: LD_VAR 0 14
24738: PPUSH
24739: LD_VAR 0 14
24743: PUSH
24744: LD_INT 1
24746: PLUS
24747: PPUSH
24748: LD_INT 2
24750: PPUSH
24751: CALL_OW 1
24755: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24756: LD_VAR 0 9
24760: PPUSH
24761: LD_VAR 0 13
24765: PPUSH
24766: CALL_OW 325
24770: PUSH
24771: LD_VAR 0 10
24775: PPUSH
24776: CALL_OW 255
24780: PPUSH
24781: LD_VAR 0 13
24785: PPUSH
24786: CALL_OW 325
24790: NOT
24791: AND
24792: IFFALSE 24821
// missile := Replace ( missile , missile + 1 , 3 ) ;
24794: LD_ADDR_VAR 0 14
24798: PUSH
24799: LD_VAR 0 14
24803: PPUSH
24804: LD_VAR 0 14
24808: PUSH
24809: LD_INT 1
24811: PLUS
24812: PPUSH
24813: LD_INT 3
24815: PPUSH
24816: CALL_OW 1
24820: ST_TO_ADDR
// if missile < 2 then
24821: LD_VAR 0 14
24825: PUSH
24826: LD_INT 2
24828: LESS
24829: IFFALSE 24833
// exit ;
24831: GO 25055
// x := GetX ( enemy ) ;
24833: LD_ADDR_VAR 0 4
24837: PUSH
24838: LD_VAR 0 10
24842: PPUSH
24843: CALL_OW 250
24847: ST_TO_ADDR
// y := GetY ( enemy ) ;
24848: LD_ADDR_VAR 0 5
24852: PUSH
24853: LD_VAR 0 10
24857: PPUSH
24858: CALL_OW 251
24862: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24863: LD_ADDR_VAR 0 6
24867: PUSH
24868: LD_VAR 0 4
24872: PUSH
24873: LD_INT 1
24875: NEG
24876: PPUSH
24877: LD_INT 1
24879: PPUSH
24880: CALL_OW 12
24884: PLUS
24885: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24886: LD_ADDR_VAR 0 7
24890: PUSH
24891: LD_VAR 0 5
24895: PUSH
24896: LD_INT 1
24898: NEG
24899: PPUSH
24900: LD_INT 1
24902: PPUSH
24903: CALL_OW 12
24907: PLUS
24908: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24909: LD_VAR 0 6
24913: PPUSH
24914: LD_VAR 0 7
24918: PPUSH
24919: CALL_OW 488
24923: NOT
24924: IFFALSE 24946
// begin _x := x ;
24926: LD_ADDR_VAR 0 6
24930: PUSH
24931: LD_VAR 0 4
24935: ST_TO_ADDR
// _y := y ;
24936: LD_ADDR_VAR 0 7
24940: PUSH
24941: LD_VAR 0 5
24945: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24946: LD_ADDR_VAR 0 3
24950: PUSH
24951: LD_INT 1
24953: PPUSH
24954: LD_VAR 0 14
24958: PPUSH
24959: CALL_OW 12
24963: ST_TO_ADDR
// case i of 1 :
24964: LD_VAR 0 3
24968: PUSH
24969: LD_INT 1
24971: DOUBLE
24972: EQUAL
24973: IFTRUE 24977
24975: GO 24994
24977: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24978: LD_VAR 0 1
24982: PPUSH
24983: LD_VAR 0 10
24987: PPUSH
24988: CALL_OW 115
24992: GO 25055
24994: LD_INT 2
24996: DOUBLE
24997: EQUAL
24998: IFTRUE 25002
25000: GO 25024
25002: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25003: LD_VAR 0 1
25007: PPUSH
25008: LD_VAR 0 6
25012: PPUSH
25013: LD_VAR 0 7
25017: PPUSH
25018: CALL_OW 153
25022: GO 25055
25024: LD_INT 3
25026: DOUBLE
25027: EQUAL
25028: IFTRUE 25032
25030: GO 25054
25032: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25033: LD_VAR 0 1
25037: PPUSH
25038: LD_VAR 0 6
25042: PPUSH
25043: LD_VAR 0 7
25047: PPUSH
25048: CALL_OW 154
25052: GO 25055
25054: POP
// end ;
25055: LD_VAR 0 2
25059: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25060: LD_INT 0
25062: PPUSH
25063: PPUSH
25064: PPUSH
25065: PPUSH
25066: PPUSH
25067: PPUSH
// if not unit or not building then
25068: LD_VAR 0 1
25072: NOT
25073: PUSH
25074: LD_VAR 0 2
25078: NOT
25079: OR
25080: IFFALSE 25084
// exit ;
25082: GO 25242
// x := GetX ( building ) ;
25084: LD_ADDR_VAR 0 5
25088: PUSH
25089: LD_VAR 0 2
25093: PPUSH
25094: CALL_OW 250
25098: ST_TO_ADDR
// y := GetY ( building ) ;
25099: LD_ADDR_VAR 0 6
25103: PUSH
25104: LD_VAR 0 2
25108: PPUSH
25109: CALL_OW 251
25113: ST_TO_ADDR
// for i = 0 to 5 do
25114: LD_ADDR_VAR 0 4
25118: PUSH
25119: DOUBLE
25120: LD_INT 0
25122: DEC
25123: ST_TO_ADDR
25124: LD_INT 5
25126: PUSH
25127: FOR_TO
25128: IFFALSE 25240
// begin _x := ShiftX ( x , i , 3 ) ;
25130: LD_ADDR_VAR 0 7
25134: PUSH
25135: LD_VAR 0 5
25139: PPUSH
25140: LD_VAR 0 4
25144: PPUSH
25145: LD_INT 3
25147: PPUSH
25148: CALL_OW 272
25152: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25153: LD_ADDR_VAR 0 8
25157: PUSH
25158: LD_VAR 0 6
25162: PPUSH
25163: LD_VAR 0 4
25167: PPUSH
25168: LD_INT 3
25170: PPUSH
25171: CALL_OW 273
25175: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25176: LD_VAR 0 7
25180: PPUSH
25181: LD_VAR 0 8
25185: PPUSH
25186: CALL_OW 488
25190: NOT
25191: IFFALSE 25195
// continue ;
25193: GO 25127
// if HexInfo ( _x , _y ) = 0 then
25195: LD_VAR 0 7
25199: PPUSH
25200: LD_VAR 0 8
25204: PPUSH
25205: CALL_OW 428
25209: PUSH
25210: LD_INT 0
25212: EQUAL
25213: IFFALSE 25238
// begin ComMoveXY ( unit , _x , _y ) ;
25215: LD_VAR 0 1
25219: PPUSH
25220: LD_VAR 0 7
25224: PPUSH
25225: LD_VAR 0 8
25229: PPUSH
25230: CALL_OW 111
// exit ;
25234: POP
25235: POP
25236: GO 25242
// end ; end ;
25238: GO 25127
25240: POP
25241: POP
// end ;
25242: LD_VAR 0 3
25246: RET
// export function ScanBase ( side , base_area ) ; begin
25247: LD_INT 0
25249: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25250: LD_ADDR_VAR 0 3
25254: PUSH
25255: LD_VAR 0 2
25259: PPUSH
25260: LD_INT 81
25262: PUSH
25263: LD_VAR 0 1
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PPUSH
25272: CALL_OW 70
25276: ST_TO_ADDR
// end ;
25277: LD_VAR 0 3
25281: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25282: LD_INT 0
25284: PPUSH
25285: PPUSH
25286: PPUSH
25287: PPUSH
// result := false ;
25288: LD_ADDR_VAR 0 2
25292: PUSH
25293: LD_INT 0
25295: ST_TO_ADDR
// side := GetSide ( unit ) ;
25296: LD_ADDR_VAR 0 3
25300: PUSH
25301: LD_VAR 0 1
25305: PPUSH
25306: CALL_OW 255
25310: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25311: LD_ADDR_VAR 0 4
25315: PUSH
25316: LD_VAR 0 1
25320: PPUSH
25321: CALL_OW 248
25325: ST_TO_ADDR
// case nat of 1 :
25326: LD_VAR 0 4
25330: PUSH
25331: LD_INT 1
25333: DOUBLE
25334: EQUAL
25335: IFTRUE 25339
25337: GO 25350
25339: POP
// tech := tech_lassight ; 2 :
25340: LD_ADDR_VAR 0 5
25344: PUSH
25345: LD_INT 12
25347: ST_TO_ADDR
25348: GO 25389
25350: LD_INT 2
25352: DOUBLE
25353: EQUAL
25354: IFTRUE 25358
25356: GO 25369
25358: POP
// tech := tech_mortar ; 3 :
25359: LD_ADDR_VAR 0 5
25363: PUSH
25364: LD_INT 41
25366: ST_TO_ADDR
25367: GO 25389
25369: LD_INT 3
25371: DOUBLE
25372: EQUAL
25373: IFTRUE 25377
25375: GO 25388
25377: POP
// tech := tech_bazooka ; end ;
25378: LD_ADDR_VAR 0 5
25382: PUSH
25383: LD_INT 44
25385: ST_TO_ADDR
25386: GO 25389
25388: POP
// if Researched ( side , tech ) then
25389: LD_VAR 0 3
25393: PPUSH
25394: LD_VAR 0 5
25398: PPUSH
25399: CALL_OW 325
25403: IFFALSE 25430
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25405: LD_ADDR_VAR 0 2
25409: PUSH
25410: LD_INT 5
25412: PUSH
25413: LD_INT 8
25415: PUSH
25416: LD_INT 9
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: LIST
25423: PUSH
25424: LD_VAR 0 4
25428: ARRAY
25429: ST_TO_ADDR
// end ;
25430: LD_VAR 0 2
25434: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25435: LD_INT 0
25437: PPUSH
25438: PPUSH
25439: PPUSH
// if not mines then
25440: LD_VAR 0 2
25444: NOT
25445: IFFALSE 25449
// exit ;
25447: GO 25593
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25449: LD_ADDR_VAR 0 5
25453: PUSH
25454: LD_INT 81
25456: PUSH
25457: LD_VAR 0 1
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 3
25468: PUSH
25469: LD_INT 21
25471: PUSH
25472: LD_INT 3
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PPUSH
25487: CALL_OW 69
25491: ST_TO_ADDR
// for i in mines do
25492: LD_ADDR_VAR 0 4
25496: PUSH
25497: LD_VAR 0 2
25501: PUSH
25502: FOR_IN
25503: IFFALSE 25591
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25505: LD_VAR 0 4
25509: PUSH
25510: LD_INT 1
25512: ARRAY
25513: PPUSH
25514: LD_VAR 0 4
25518: PUSH
25519: LD_INT 2
25521: ARRAY
25522: PPUSH
25523: CALL_OW 458
25527: NOT
25528: IFFALSE 25532
// continue ;
25530: GO 25502
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25532: LD_VAR 0 4
25536: PUSH
25537: LD_INT 1
25539: ARRAY
25540: PPUSH
25541: LD_VAR 0 4
25545: PUSH
25546: LD_INT 2
25548: ARRAY
25549: PPUSH
25550: CALL_OW 428
25554: PUSH
25555: LD_VAR 0 5
25559: IN
25560: IFFALSE 25589
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25562: LD_VAR 0 4
25566: PUSH
25567: LD_INT 1
25569: ARRAY
25570: PPUSH
25571: LD_VAR 0 4
25575: PUSH
25576: LD_INT 2
25578: ARRAY
25579: PPUSH
25580: LD_VAR 0 1
25584: PPUSH
25585: CALL_OW 456
// end ;
25589: GO 25502
25591: POP
25592: POP
// end ;
25593: LD_VAR 0 3
25597: RET
// export function Count ( array ) ; var i ; begin
25598: LD_INT 0
25600: PPUSH
25601: PPUSH
// result := 0 ;
25602: LD_ADDR_VAR 0 2
25606: PUSH
25607: LD_INT 0
25609: ST_TO_ADDR
// for i in array do
25610: LD_ADDR_VAR 0 3
25614: PUSH
25615: LD_VAR 0 1
25619: PUSH
25620: FOR_IN
25621: IFFALSE 25645
// if i then
25623: LD_VAR 0 3
25627: IFFALSE 25643
// result := result + 1 ;
25629: LD_ADDR_VAR 0 2
25633: PUSH
25634: LD_VAR 0 2
25638: PUSH
25639: LD_INT 1
25641: PLUS
25642: ST_TO_ADDR
25643: GO 25620
25645: POP
25646: POP
// end ;
25647: LD_VAR 0 2
25651: RET
// export function IsEmpty ( building ) ; begin
25652: LD_INT 0
25654: PPUSH
// if not building then
25655: LD_VAR 0 1
25659: NOT
25660: IFFALSE 25664
// exit ;
25662: GO 25707
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25664: LD_ADDR_VAR 0 2
25668: PUSH
25669: LD_VAR 0 1
25673: PUSH
25674: LD_INT 22
25676: PUSH
25677: LD_VAR 0 1
25681: PPUSH
25682: CALL_OW 255
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 58
25693: PUSH
25694: EMPTY
25695: LIST
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PPUSH
25701: CALL_OW 69
25705: IN
25706: ST_TO_ADDR
// end ;
25707: LD_VAR 0 2
25711: RET
// export function IsNotFull ( building ) ; var places ; begin
25712: LD_INT 0
25714: PPUSH
25715: PPUSH
// if not building then
25716: LD_VAR 0 1
25720: NOT
25721: IFFALSE 25725
// exit ;
25723: GO 25896
// result := false ;
25725: LD_ADDR_VAR 0 2
25729: PUSH
25730: LD_INT 0
25732: ST_TO_ADDR
// places := 0 ;
25733: LD_ADDR_VAR 0 3
25737: PUSH
25738: LD_INT 0
25740: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
25741: LD_VAR 0 1
25745: PPUSH
25746: CALL_OW 266
25750: PUSH
25751: LD_INT 0
25753: DOUBLE
25754: EQUAL
25755: IFTRUE 25813
25757: LD_INT 1
25759: DOUBLE
25760: EQUAL
25761: IFTRUE 25813
25763: LD_INT 6
25765: DOUBLE
25766: EQUAL
25767: IFTRUE 25813
25769: LD_INT 7
25771: DOUBLE
25772: EQUAL
25773: IFTRUE 25813
25775: LD_INT 8
25777: DOUBLE
25778: EQUAL
25779: IFTRUE 25813
25781: LD_INT 4
25783: DOUBLE
25784: EQUAL
25785: IFTRUE 25813
25787: LD_INT 5
25789: DOUBLE
25790: EQUAL
25791: IFTRUE 25813
25793: LD_INT 2
25795: DOUBLE
25796: EQUAL
25797: IFTRUE 25813
25799: LD_INT 3
25801: DOUBLE
25802: EQUAL
25803: IFTRUE 25813
25805: LD_INT 35
25807: DOUBLE
25808: EQUAL
25809: IFTRUE 25813
25811: GO 25824
25813: POP
// places := 6 ; b_bunker , b_breastwork :
25814: LD_ADDR_VAR 0 3
25818: PUSH
25819: LD_INT 6
25821: ST_TO_ADDR
25822: GO 25869
25824: LD_INT 32
25826: DOUBLE
25827: EQUAL
25828: IFTRUE 25838
25830: LD_INT 31
25832: DOUBLE
25833: EQUAL
25834: IFTRUE 25838
25836: GO 25849
25838: POP
// places := 1 ; b_control_tower :
25839: LD_ADDR_VAR 0 3
25843: PUSH
25844: LD_INT 1
25846: ST_TO_ADDR
25847: GO 25869
25849: LD_INT 36
25851: DOUBLE
25852: EQUAL
25853: IFTRUE 25857
25855: GO 25868
25857: POP
// places := 3 ; end ;
25858: LD_ADDR_VAR 0 3
25862: PUSH
25863: LD_INT 3
25865: ST_TO_ADDR
25866: GO 25869
25868: POP
// if places then
25869: LD_VAR 0 3
25873: IFFALSE 25896
// result := UnitsInside ( building ) < places ;
25875: LD_ADDR_VAR 0 2
25879: PUSH
25880: LD_VAR 0 1
25884: PPUSH
25885: CALL_OW 313
25889: PUSH
25890: LD_VAR 0 3
25894: LESS
25895: ST_TO_ADDR
// end ;
25896: LD_VAR 0 2
25900: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25901: LD_INT 0
25903: PPUSH
25904: PPUSH
25905: PPUSH
25906: PPUSH
// tmp := [ ] ;
25907: LD_ADDR_VAR 0 3
25911: PUSH
25912: EMPTY
25913: ST_TO_ADDR
// list := [ ] ;
25914: LD_ADDR_VAR 0 5
25918: PUSH
25919: EMPTY
25920: ST_TO_ADDR
// for i = 16 to 25 do
25921: LD_ADDR_VAR 0 4
25925: PUSH
25926: DOUBLE
25927: LD_INT 16
25929: DEC
25930: ST_TO_ADDR
25931: LD_INT 25
25933: PUSH
25934: FOR_TO
25935: IFFALSE 26008
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25937: LD_ADDR_VAR 0 3
25941: PUSH
25942: LD_VAR 0 3
25946: PUSH
25947: LD_INT 22
25949: PUSH
25950: LD_VAR 0 1
25954: PPUSH
25955: CALL_OW 255
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 91
25966: PUSH
25967: LD_VAR 0 1
25971: PUSH
25972: LD_INT 6
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 30
25982: PUSH
25983: LD_VAR 0 4
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: LIST
25996: PUSH
25997: EMPTY
25998: LIST
25999: PPUSH
26000: CALL_OW 69
26004: ADD
26005: ST_TO_ADDR
26006: GO 25934
26008: POP
26009: POP
// for i = 1 to tmp do
26010: LD_ADDR_VAR 0 4
26014: PUSH
26015: DOUBLE
26016: LD_INT 1
26018: DEC
26019: ST_TO_ADDR
26020: LD_VAR 0 3
26024: PUSH
26025: FOR_TO
26026: IFFALSE 26114
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26028: LD_ADDR_VAR 0 5
26032: PUSH
26033: LD_VAR 0 5
26037: PUSH
26038: LD_VAR 0 3
26042: PUSH
26043: LD_VAR 0 4
26047: ARRAY
26048: PPUSH
26049: CALL_OW 266
26053: PUSH
26054: LD_VAR 0 3
26058: PUSH
26059: LD_VAR 0 4
26063: ARRAY
26064: PPUSH
26065: CALL_OW 250
26069: PUSH
26070: LD_VAR 0 3
26074: PUSH
26075: LD_VAR 0 4
26079: ARRAY
26080: PPUSH
26081: CALL_OW 251
26085: PUSH
26086: LD_VAR 0 3
26090: PUSH
26091: LD_VAR 0 4
26095: ARRAY
26096: PPUSH
26097: CALL_OW 254
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: PUSH
26108: EMPTY
26109: LIST
26110: ADD
26111: ST_TO_ADDR
26112: GO 26025
26114: POP
26115: POP
// result := list ;
26116: LD_ADDR_VAR 0 2
26120: PUSH
26121: LD_VAR 0 5
26125: ST_TO_ADDR
// end ;
26126: LD_VAR 0 2
26130: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26131: LD_INT 0
26133: PPUSH
26134: PPUSH
26135: PPUSH
26136: PPUSH
26137: PPUSH
26138: PPUSH
26139: PPUSH
// if not factory then
26140: LD_VAR 0 1
26144: NOT
26145: IFFALSE 26149
// exit ;
26147: GO 26742
// if control = control_apeman then
26149: LD_VAR 0 4
26153: PUSH
26154: LD_INT 5
26156: EQUAL
26157: IFFALSE 26266
// begin tmp := UnitsInside ( factory ) ;
26159: LD_ADDR_VAR 0 8
26163: PUSH
26164: LD_VAR 0 1
26168: PPUSH
26169: CALL_OW 313
26173: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26174: LD_VAR 0 8
26178: PPUSH
26179: LD_INT 25
26181: PUSH
26182: LD_INT 12
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PPUSH
26189: CALL_OW 72
26193: NOT
26194: IFFALSE 26204
// control := control_manual ;
26196: LD_ADDR_VAR 0 4
26200: PUSH
26201: LD_INT 1
26203: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26204: LD_ADDR_VAR 0 8
26208: PUSH
26209: LD_VAR 0 1
26213: PPUSH
26214: CALL 25901 0 1
26218: ST_TO_ADDR
// if tmp then
26219: LD_VAR 0 8
26223: IFFALSE 26266
// begin for i in tmp do
26225: LD_ADDR_VAR 0 7
26229: PUSH
26230: LD_VAR 0 8
26234: PUSH
26235: FOR_IN
26236: IFFALSE 26264
// if i [ 1 ] = b_ext_radio then
26238: LD_VAR 0 7
26242: PUSH
26243: LD_INT 1
26245: ARRAY
26246: PUSH
26247: LD_INT 22
26249: EQUAL
26250: IFFALSE 26262
// begin control := control_remote ;
26252: LD_ADDR_VAR 0 4
26256: PUSH
26257: LD_INT 2
26259: ST_TO_ADDR
// break ;
26260: GO 26264
// end ;
26262: GO 26235
26264: POP
26265: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26266: LD_VAR 0 1
26270: PPUSH
26271: LD_VAR 0 2
26275: PPUSH
26276: LD_VAR 0 3
26280: PPUSH
26281: LD_VAR 0 4
26285: PPUSH
26286: LD_VAR 0 5
26290: PPUSH
26291: CALL_OW 448
26295: IFFALSE 26330
// begin result := [ chassis , engine , control , weapon ] ;
26297: LD_ADDR_VAR 0 6
26301: PUSH
26302: LD_VAR 0 2
26306: PUSH
26307: LD_VAR 0 3
26311: PUSH
26312: LD_VAR 0 4
26316: PUSH
26317: LD_VAR 0 5
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: ST_TO_ADDR
// exit ;
26328: GO 26742
// end ; _chassis := AvailableChassisList ( factory ) ;
26330: LD_ADDR_VAR 0 9
26334: PUSH
26335: LD_VAR 0 1
26339: PPUSH
26340: CALL_OW 475
26344: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26345: LD_ADDR_VAR 0 11
26349: PUSH
26350: LD_VAR 0 1
26354: PPUSH
26355: CALL_OW 476
26359: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26360: LD_ADDR_VAR 0 12
26364: PUSH
26365: LD_VAR 0 1
26369: PPUSH
26370: CALL_OW 477
26374: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26375: LD_ADDR_VAR 0 10
26379: PUSH
26380: LD_VAR 0 1
26384: PPUSH
26385: CALL_OW 478
26389: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26390: LD_VAR 0 9
26394: NOT
26395: PUSH
26396: LD_VAR 0 11
26400: NOT
26401: OR
26402: PUSH
26403: LD_VAR 0 12
26407: NOT
26408: OR
26409: PUSH
26410: LD_VAR 0 10
26414: NOT
26415: OR
26416: IFFALSE 26451
// begin result := [ chassis , engine , control , weapon ] ;
26418: LD_ADDR_VAR 0 6
26422: PUSH
26423: LD_VAR 0 2
26427: PUSH
26428: LD_VAR 0 3
26432: PUSH
26433: LD_VAR 0 4
26437: PUSH
26438: LD_VAR 0 5
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: ST_TO_ADDR
// exit ;
26449: GO 26742
// end ; if not chassis in _chassis then
26451: LD_VAR 0 2
26455: PUSH
26456: LD_VAR 0 9
26460: IN
26461: NOT
26462: IFFALSE 26488
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26464: LD_ADDR_VAR 0 2
26468: PUSH
26469: LD_VAR 0 9
26473: PUSH
26474: LD_INT 1
26476: PPUSH
26477: LD_VAR 0 9
26481: PPUSH
26482: CALL_OW 12
26486: ARRAY
26487: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26488: LD_VAR 0 2
26492: PPUSH
26493: LD_VAR 0 3
26497: PPUSH
26498: CALL 26747 0 2
26502: NOT
26503: IFFALSE 26562
// repeat engine := _engine [ 1 ] ;
26505: LD_ADDR_VAR 0 3
26509: PUSH
26510: LD_VAR 0 11
26514: PUSH
26515: LD_INT 1
26517: ARRAY
26518: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26519: LD_ADDR_VAR 0 11
26523: PUSH
26524: LD_VAR 0 11
26528: PPUSH
26529: LD_INT 1
26531: PPUSH
26532: CALL_OW 3
26536: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26537: LD_VAR 0 2
26541: PPUSH
26542: LD_VAR 0 3
26546: PPUSH
26547: CALL 26747 0 2
26551: PUSH
26552: LD_VAR 0 11
26556: PUSH
26557: EMPTY
26558: EQUAL
26559: OR
26560: IFFALSE 26505
// if not control in _control then
26562: LD_VAR 0 4
26566: PUSH
26567: LD_VAR 0 12
26571: IN
26572: NOT
26573: IFFALSE 26599
// control := _control [ rand ( 1 , _control ) ] ;
26575: LD_ADDR_VAR 0 4
26579: PUSH
26580: LD_VAR 0 12
26584: PUSH
26585: LD_INT 1
26587: PPUSH
26588: LD_VAR 0 12
26592: PPUSH
26593: CALL_OW 12
26597: ARRAY
26598: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26599: LD_VAR 0 2
26603: PPUSH
26604: LD_VAR 0 5
26608: PPUSH
26609: CALL 26967 0 2
26613: NOT
26614: IFFALSE 26673
// repeat weapon := _weapon [ 1 ] ;
26616: LD_ADDR_VAR 0 5
26620: PUSH
26621: LD_VAR 0 10
26625: PUSH
26626: LD_INT 1
26628: ARRAY
26629: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26630: LD_ADDR_VAR 0 10
26634: PUSH
26635: LD_VAR 0 10
26639: PPUSH
26640: LD_INT 1
26642: PPUSH
26643: CALL_OW 3
26647: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26648: LD_VAR 0 2
26652: PPUSH
26653: LD_VAR 0 5
26657: PPUSH
26658: CALL 26967 0 2
26662: PUSH
26663: LD_VAR 0 10
26667: PUSH
26668: EMPTY
26669: EQUAL
26670: OR
26671: IFFALSE 26616
// result := [ ] ;
26673: LD_ADDR_VAR 0 6
26677: PUSH
26678: EMPTY
26679: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26680: LD_VAR 0 1
26684: PPUSH
26685: LD_VAR 0 2
26689: PPUSH
26690: LD_VAR 0 3
26694: PPUSH
26695: LD_VAR 0 4
26699: PPUSH
26700: LD_VAR 0 5
26704: PPUSH
26705: CALL_OW 448
26709: IFFALSE 26742
// result := [ chassis , engine , control , weapon ] ;
26711: LD_ADDR_VAR 0 6
26715: PUSH
26716: LD_VAR 0 2
26720: PUSH
26721: LD_VAR 0 3
26725: PUSH
26726: LD_VAR 0 4
26730: PUSH
26731: LD_VAR 0 5
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: ST_TO_ADDR
// end ;
26742: LD_VAR 0 6
26746: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26747: LD_INT 0
26749: PPUSH
// if not chassis or not engine then
26750: LD_VAR 0 1
26754: NOT
26755: PUSH
26756: LD_VAR 0 2
26760: NOT
26761: OR
26762: IFFALSE 26766
// exit ;
26764: GO 26962
// case engine of engine_solar :
26766: LD_VAR 0 2
26770: PUSH
26771: LD_INT 2
26773: DOUBLE
26774: EQUAL
26775: IFTRUE 26779
26777: GO 26817
26779: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26780: LD_ADDR_VAR 0 3
26784: PUSH
26785: LD_INT 11
26787: PUSH
26788: LD_INT 12
26790: PUSH
26791: LD_INT 13
26793: PUSH
26794: LD_INT 14
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: LD_INT 2
26802: PUSH
26803: LD_INT 3
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: ST_TO_ADDR
26815: GO 26946
26817: LD_INT 1
26819: DOUBLE
26820: EQUAL
26821: IFTRUE 26825
26823: GO 26887
26825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26826: LD_ADDR_VAR 0 3
26830: PUSH
26831: LD_INT 11
26833: PUSH
26834: LD_INT 12
26836: PUSH
26837: LD_INT 13
26839: PUSH
26840: LD_INT 14
26842: PUSH
26843: LD_INT 1
26845: PUSH
26846: LD_INT 2
26848: PUSH
26849: LD_INT 3
26851: PUSH
26852: LD_INT 4
26854: PUSH
26855: LD_INT 5
26857: PUSH
26858: LD_INT 21
26860: PUSH
26861: LD_INT 23
26863: PUSH
26864: LD_INT 22
26866: PUSH
26867: LD_INT 24
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: ST_TO_ADDR
26885: GO 26946
26887: LD_INT 3
26889: DOUBLE
26890: EQUAL
26891: IFTRUE 26895
26893: GO 26945
26895: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26896: LD_ADDR_VAR 0 3
26900: PUSH
26901: LD_INT 13
26903: PUSH
26904: LD_INT 14
26906: PUSH
26907: LD_INT 2
26909: PUSH
26910: LD_INT 3
26912: PUSH
26913: LD_INT 4
26915: PUSH
26916: LD_INT 5
26918: PUSH
26919: LD_INT 21
26921: PUSH
26922: LD_INT 22
26924: PUSH
26925: LD_INT 23
26927: PUSH
26928: LD_INT 24
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: ST_TO_ADDR
26943: GO 26946
26945: POP
// result := ( chassis in result ) ;
26946: LD_ADDR_VAR 0 3
26950: PUSH
26951: LD_VAR 0 1
26955: PUSH
26956: LD_VAR 0 3
26960: IN
26961: ST_TO_ADDR
// end ;
26962: LD_VAR 0 3
26966: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26967: LD_INT 0
26969: PPUSH
// if not chassis or not weapon then
26970: LD_VAR 0 1
26974: NOT
26975: PUSH
26976: LD_VAR 0 2
26980: NOT
26981: OR
26982: IFFALSE 26986
// exit ;
26984: GO 28048
// case weapon of us_machine_gun :
26986: LD_VAR 0 2
26990: PUSH
26991: LD_INT 2
26993: DOUBLE
26994: EQUAL
26995: IFTRUE 26999
26997: GO 27029
26999: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27000: LD_ADDR_VAR 0 3
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: LD_INT 2
27010: PUSH
27011: LD_INT 3
27013: PUSH
27014: LD_INT 4
27016: PUSH
27017: LD_INT 5
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: ST_TO_ADDR
27027: GO 28032
27029: LD_INT 3
27031: DOUBLE
27032: EQUAL
27033: IFTRUE 27037
27035: GO 27067
27037: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27038: LD_ADDR_VAR 0 3
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: LD_INT 3
27051: PUSH
27052: LD_INT 4
27054: PUSH
27055: LD_INT 5
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: ST_TO_ADDR
27065: GO 28032
27067: LD_INT 11
27069: DOUBLE
27070: EQUAL
27071: IFTRUE 27075
27073: GO 27105
27075: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27076: LD_ADDR_VAR 0 3
27080: PUSH
27081: LD_INT 1
27083: PUSH
27084: LD_INT 2
27086: PUSH
27087: LD_INT 3
27089: PUSH
27090: LD_INT 4
27092: PUSH
27093: LD_INT 5
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: ST_TO_ADDR
27103: GO 28032
27105: LD_INT 4
27107: DOUBLE
27108: EQUAL
27109: IFTRUE 27113
27111: GO 27139
27113: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27114: LD_ADDR_VAR 0 3
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: LD_INT 3
27124: PUSH
27125: LD_INT 4
27127: PUSH
27128: LD_INT 5
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: ST_TO_ADDR
27137: GO 28032
27139: LD_INT 5
27141: DOUBLE
27142: EQUAL
27143: IFTRUE 27147
27145: GO 27173
27147: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27148: LD_ADDR_VAR 0 3
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: LD_INT 3
27158: PUSH
27159: LD_INT 4
27161: PUSH
27162: LD_INT 5
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: ST_TO_ADDR
27171: GO 28032
27173: LD_INT 9
27175: DOUBLE
27176: EQUAL
27177: IFTRUE 27181
27179: GO 27207
27181: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27182: LD_ADDR_VAR 0 3
27186: PUSH
27187: LD_INT 2
27189: PUSH
27190: LD_INT 3
27192: PUSH
27193: LD_INT 4
27195: PUSH
27196: LD_INT 5
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: ST_TO_ADDR
27205: GO 28032
27207: LD_INT 7
27209: DOUBLE
27210: EQUAL
27211: IFTRUE 27215
27213: GO 27241
27215: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27216: LD_ADDR_VAR 0 3
27220: PUSH
27221: LD_INT 2
27223: PUSH
27224: LD_INT 3
27226: PUSH
27227: LD_INT 4
27229: PUSH
27230: LD_INT 5
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: ST_TO_ADDR
27239: GO 28032
27241: LD_INT 12
27243: DOUBLE
27244: EQUAL
27245: IFTRUE 27249
27247: GO 27275
27249: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27250: LD_ADDR_VAR 0 3
27254: PUSH
27255: LD_INT 2
27257: PUSH
27258: LD_INT 3
27260: PUSH
27261: LD_INT 4
27263: PUSH
27264: LD_INT 5
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: ST_TO_ADDR
27273: GO 28032
27275: LD_INT 13
27277: DOUBLE
27278: EQUAL
27279: IFTRUE 27283
27281: GO 27309
27283: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27284: LD_ADDR_VAR 0 3
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: LD_INT 3
27294: PUSH
27295: LD_INT 4
27297: PUSH
27298: LD_INT 5
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: ST_TO_ADDR
27307: GO 28032
27309: LD_INT 14
27311: DOUBLE
27312: EQUAL
27313: IFTRUE 27317
27315: GO 27335
27317: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27318: LD_ADDR_VAR 0 3
27322: PUSH
27323: LD_INT 4
27325: PUSH
27326: LD_INT 5
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: ST_TO_ADDR
27333: GO 28032
27335: LD_INT 6
27337: DOUBLE
27338: EQUAL
27339: IFTRUE 27343
27341: GO 27361
27343: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27344: LD_ADDR_VAR 0 3
27348: PUSH
27349: LD_INT 4
27351: PUSH
27352: LD_INT 5
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: ST_TO_ADDR
27359: GO 28032
27361: LD_INT 10
27363: DOUBLE
27364: EQUAL
27365: IFTRUE 27369
27367: GO 27387
27369: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27370: LD_ADDR_VAR 0 3
27374: PUSH
27375: LD_INT 4
27377: PUSH
27378: LD_INT 5
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: ST_TO_ADDR
27385: GO 28032
27387: LD_INT 22
27389: DOUBLE
27390: EQUAL
27391: IFTRUE 27395
27393: GO 27421
27395: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27396: LD_ADDR_VAR 0 3
27400: PUSH
27401: LD_INT 11
27403: PUSH
27404: LD_INT 12
27406: PUSH
27407: LD_INT 13
27409: PUSH
27410: LD_INT 14
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: ST_TO_ADDR
27419: GO 28032
27421: LD_INT 23
27423: DOUBLE
27424: EQUAL
27425: IFTRUE 27429
27427: GO 27455
27429: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27430: LD_ADDR_VAR 0 3
27434: PUSH
27435: LD_INT 11
27437: PUSH
27438: LD_INT 12
27440: PUSH
27441: LD_INT 13
27443: PUSH
27444: LD_INT 14
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: ST_TO_ADDR
27453: GO 28032
27455: LD_INT 24
27457: DOUBLE
27458: EQUAL
27459: IFTRUE 27463
27461: GO 27489
27463: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27464: LD_ADDR_VAR 0 3
27468: PUSH
27469: LD_INT 11
27471: PUSH
27472: LD_INT 12
27474: PUSH
27475: LD_INT 13
27477: PUSH
27478: LD_INT 14
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: ST_TO_ADDR
27487: GO 28032
27489: LD_INT 30
27491: DOUBLE
27492: EQUAL
27493: IFTRUE 27497
27495: GO 27523
27497: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27498: LD_ADDR_VAR 0 3
27502: PUSH
27503: LD_INT 11
27505: PUSH
27506: LD_INT 12
27508: PUSH
27509: LD_INT 13
27511: PUSH
27512: LD_INT 14
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: ST_TO_ADDR
27521: GO 28032
27523: LD_INT 25
27525: DOUBLE
27526: EQUAL
27527: IFTRUE 27531
27529: GO 27549
27531: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27532: LD_ADDR_VAR 0 3
27536: PUSH
27537: LD_INT 13
27539: PUSH
27540: LD_INT 14
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: ST_TO_ADDR
27547: GO 28032
27549: LD_INT 27
27551: DOUBLE
27552: EQUAL
27553: IFTRUE 27557
27555: GO 27575
27557: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27558: LD_ADDR_VAR 0 3
27562: PUSH
27563: LD_INT 13
27565: PUSH
27566: LD_INT 14
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: ST_TO_ADDR
27573: GO 28032
27575: LD_EXP 88
27579: DOUBLE
27580: EQUAL
27581: IFTRUE 27585
27583: GO 27611
27585: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27586: LD_ADDR_VAR 0 3
27590: PUSH
27591: LD_INT 11
27593: PUSH
27594: LD_INT 12
27596: PUSH
27597: LD_INT 13
27599: PUSH
27600: LD_INT 14
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: ST_TO_ADDR
27609: GO 28032
27611: LD_INT 28
27613: DOUBLE
27614: EQUAL
27615: IFTRUE 27619
27617: GO 27637
27619: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27620: LD_ADDR_VAR 0 3
27624: PUSH
27625: LD_INT 13
27627: PUSH
27628: LD_INT 14
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: ST_TO_ADDR
27635: GO 28032
27637: LD_INT 29
27639: DOUBLE
27640: EQUAL
27641: IFTRUE 27645
27643: GO 27663
27645: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27646: LD_ADDR_VAR 0 3
27650: PUSH
27651: LD_INT 13
27653: PUSH
27654: LD_INT 14
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: ST_TO_ADDR
27661: GO 28032
27663: LD_INT 31
27665: DOUBLE
27666: EQUAL
27667: IFTRUE 27671
27669: GO 27689
27671: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27672: LD_ADDR_VAR 0 3
27676: PUSH
27677: LD_INT 13
27679: PUSH
27680: LD_INT 14
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: ST_TO_ADDR
27687: GO 28032
27689: LD_INT 26
27691: DOUBLE
27692: EQUAL
27693: IFTRUE 27697
27695: GO 27715
27697: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27698: LD_ADDR_VAR 0 3
27702: PUSH
27703: LD_INT 13
27705: PUSH
27706: LD_INT 14
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: ST_TO_ADDR
27713: GO 28032
27715: LD_INT 42
27717: DOUBLE
27718: EQUAL
27719: IFTRUE 27723
27721: GO 27749
27723: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27724: LD_ADDR_VAR 0 3
27728: PUSH
27729: LD_INT 21
27731: PUSH
27732: LD_INT 22
27734: PUSH
27735: LD_INT 23
27737: PUSH
27738: LD_INT 24
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: ST_TO_ADDR
27747: GO 28032
27749: LD_INT 43
27751: DOUBLE
27752: EQUAL
27753: IFTRUE 27757
27755: GO 27783
27757: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27758: LD_ADDR_VAR 0 3
27762: PUSH
27763: LD_INT 21
27765: PUSH
27766: LD_INT 22
27768: PUSH
27769: LD_INT 23
27771: PUSH
27772: LD_INT 24
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: ST_TO_ADDR
27781: GO 28032
27783: LD_INT 44
27785: DOUBLE
27786: EQUAL
27787: IFTRUE 27791
27789: GO 27817
27791: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27792: LD_ADDR_VAR 0 3
27796: PUSH
27797: LD_INT 21
27799: PUSH
27800: LD_INT 22
27802: PUSH
27803: LD_INT 23
27805: PUSH
27806: LD_INT 24
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: ST_TO_ADDR
27815: GO 28032
27817: LD_INT 45
27819: DOUBLE
27820: EQUAL
27821: IFTRUE 27825
27823: GO 27851
27825: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27826: LD_ADDR_VAR 0 3
27830: PUSH
27831: LD_INT 21
27833: PUSH
27834: LD_INT 22
27836: PUSH
27837: LD_INT 23
27839: PUSH
27840: LD_INT 24
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: ST_TO_ADDR
27849: GO 28032
27851: LD_INT 49
27853: DOUBLE
27854: EQUAL
27855: IFTRUE 27859
27857: GO 27885
27859: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27860: LD_ADDR_VAR 0 3
27864: PUSH
27865: LD_INT 21
27867: PUSH
27868: LD_INT 22
27870: PUSH
27871: LD_INT 23
27873: PUSH
27874: LD_INT 24
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: ST_TO_ADDR
27883: GO 28032
27885: LD_INT 51
27887: DOUBLE
27888: EQUAL
27889: IFTRUE 27893
27891: GO 27919
27893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27894: LD_ADDR_VAR 0 3
27898: PUSH
27899: LD_INT 21
27901: PUSH
27902: LD_INT 22
27904: PUSH
27905: LD_INT 23
27907: PUSH
27908: LD_INT 24
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: ST_TO_ADDR
27917: GO 28032
27919: LD_INT 52
27921: DOUBLE
27922: EQUAL
27923: IFTRUE 27927
27925: GO 27953
27927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27928: LD_ADDR_VAR 0 3
27932: PUSH
27933: LD_INT 21
27935: PUSH
27936: LD_INT 22
27938: PUSH
27939: LD_INT 23
27941: PUSH
27942: LD_INT 24
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: ST_TO_ADDR
27951: GO 28032
27953: LD_INT 53
27955: DOUBLE
27956: EQUAL
27957: IFTRUE 27961
27959: GO 27979
27961: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27962: LD_ADDR_VAR 0 3
27966: PUSH
27967: LD_INT 23
27969: PUSH
27970: LD_INT 24
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: ST_TO_ADDR
27977: GO 28032
27979: LD_INT 46
27981: DOUBLE
27982: EQUAL
27983: IFTRUE 27987
27985: GO 28005
27987: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27988: LD_ADDR_VAR 0 3
27992: PUSH
27993: LD_INT 23
27995: PUSH
27996: LD_INT 24
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: ST_TO_ADDR
28003: GO 28032
28005: LD_INT 47
28007: DOUBLE
28008: EQUAL
28009: IFTRUE 28013
28011: GO 28031
28013: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28014: LD_ADDR_VAR 0 3
28018: PUSH
28019: LD_INT 23
28021: PUSH
28022: LD_INT 24
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: ST_TO_ADDR
28029: GO 28032
28031: POP
// result := ( chassis in result ) ;
28032: LD_ADDR_VAR 0 3
28036: PUSH
28037: LD_VAR 0 1
28041: PUSH
28042: LD_VAR 0 3
28046: IN
28047: ST_TO_ADDR
// end ;
28048: LD_VAR 0 3
28052: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28053: LD_INT 0
28055: PPUSH
28056: PPUSH
28057: PPUSH
28058: PPUSH
28059: PPUSH
28060: PPUSH
28061: PPUSH
// result := array ;
28062: LD_ADDR_VAR 0 5
28066: PUSH
28067: LD_VAR 0 1
28071: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28072: LD_VAR 0 1
28076: NOT
28077: PUSH
28078: LD_VAR 0 2
28082: NOT
28083: OR
28084: PUSH
28085: LD_VAR 0 3
28089: NOT
28090: OR
28091: PUSH
28092: LD_VAR 0 2
28096: PUSH
28097: LD_VAR 0 1
28101: GREATER
28102: OR
28103: PUSH
28104: LD_VAR 0 3
28108: PUSH
28109: LD_VAR 0 1
28113: GREATER
28114: OR
28115: IFFALSE 28119
// exit ;
28117: GO 28415
// if direction then
28119: LD_VAR 0 4
28123: IFFALSE 28187
// begin d := 1 ;
28125: LD_ADDR_VAR 0 9
28129: PUSH
28130: LD_INT 1
28132: ST_TO_ADDR
// if i_from > i_to then
28133: LD_VAR 0 2
28137: PUSH
28138: LD_VAR 0 3
28142: GREATER
28143: IFFALSE 28169
// length := ( array - i_from ) + i_to else
28145: LD_ADDR_VAR 0 11
28149: PUSH
28150: LD_VAR 0 1
28154: PUSH
28155: LD_VAR 0 2
28159: MINUS
28160: PUSH
28161: LD_VAR 0 3
28165: PLUS
28166: ST_TO_ADDR
28167: GO 28185
// length := i_to - i_from ;
28169: LD_ADDR_VAR 0 11
28173: PUSH
28174: LD_VAR 0 3
28178: PUSH
28179: LD_VAR 0 2
28183: MINUS
28184: ST_TO_ADDR
// end else
28185: GO 28248
// begin d := - 1 ;
28187: LD_ADDR_VAR 0 9
28191: PUSH
28192: LD_INT 1
28194: NEG
28195: ST_TO_ADDR
// if i_from > i_to then
28196: LD_VAR 0 2
28200: PUSH
28201: LD_VAR 0 3
28205: GREATER
28206: IFFALSE 28226
// length := i_from - i_to else
28208: LD_ADDR_VAR 0 11
28212: PUSH
28213: LD_VAR 0 2
28217: PUSH
28218: LD_VAR 0 3
28222: MINUS
28223: ST_TO_ADDR
28224: GO 28248
// length := ( array - i_to ) + i_from ;
28226: LD_ADDR_VAR 0 11
28230: PUSH
28231: LD_VAR 0 1
28235: PUSH
28236: LD_VAR 0 3
28240: MINUS
28241: PUSH
28242: LD_VAR 0 2
28246: PLUS
28247: ST_TO_ADDR
// end ; if not length then
28248: LD_VAR 0 11
28252: NOT
28253: IFFALSE 28257
// exit ;
28255: GO 28415
// tmp := array ;
28257: LD_ADDR_VAR 0 10
28261: PUSH
28262: LD_VAR 0 1
28266: ST_TO_ADDR
// for i = 1 to length do
28267: LD_ADDR_VAR 0 6
28271: PUSH
28272: DOUBLE
28273: LD_INT 1
28275: DEC
28276: ST_TO_ADDR
28277: LD_VAR 0 11
28281: PUSH
28282: FOR_TO
28283: IFFALSE 28403
// begin for j = 1 to array do
28285: LD_ADDR_VAR 0 7
28289: PUSH
28290: DOUBLE
28291: LD_INT 1
28293: DEC
28294: ST_TO_ADDR
28295: LD_VAR 0 1
28299: PUSH
28300: FOR_TO
28301: IFFALSE 28389
// begin k := j + d ;
28303: LD_ADDR_VAR 0 8
28307: PUSH
28308: LD_VAR 0 7
28312: PUSH
28313: LD_VAR 0 9
28317: PLUS
28318: ST_TO_ADDR
// if k > array then
28319: LD_VAR 0 8
28323: PUSH
28324: LD_VAR 0 1
28328: GREATER
28329: IFFALSE 28339
// k := 1 ;
28331: LD_ADDR_VAR 0 8
28335: PUSH
28336: LD_INT 1
28338: ST_TO_ADDR
// if not k then
28339: LD_VAR 0 8
28343: NOT
28344: IFFALSE 28356
// k := array ;
28346: LD_ADDR_VAR 0 8
28350: PUSH
28351: LD_VAR 0 1
28355: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28356: LD_ADDR_VAR 0 10
28360: PUSH
28361: LD_VAR 0 10
28365: PPUSH
28366: LD_VAR 0 8
28370: PPUSH
28371: LD_VAR 0 1
28375: PUSH
28376: LD_VAR 0 7
28380: ARRAY
28381: PPUSH
28382: CALL_OW 1
28386: ST_TO_ADDR
// end ;
28387: GO 28300
28389: POP
28390: POP
// array := tmp ;
28391: LD_ADDR_VAR 0 1
28395: PUSH
28396: LD_VAR 0 10
28400: ST_TO_ADDR
// end ;
28401: GO 28282
28403: POP
28404: POP
// result := array ;
28405: LD_ADDR_VAR 0 5
28409: PUSH
28410: LD_VAR 0 1
28414: ST_TO_ADDR
// end ;
28415: LD_VAR 0 5
28419: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28420: LD_INT 0
28422: PPUSH
28423: PPUSH
// result := 0 ;
28424: LD_ADDR_VAR 0 3
28428: PUSH
28429: LD_INT 0
28431: ST_TO_ADDR
// if not array or not value in array then
28432: LD_VAR 0 1
28436: NOT
28437: PUSH
28438: LD_VAR 0 2
28442: PUSH
28443: LD_VAR 0 1
28447: IN
28448: NOT
28449: OR
28450: IFFALSE 28454
// exit ;
28452: GO 28508
// for i = 1 to array do
28454: LD_ADDR_VAR 0 4
28458: PUSH
28459: DOUBLE
28460: LD_INT 1
28462: DEC
28463: ST_TO_ADDR
28464: LD_VAR 0 1
28468: PUSH
28469: FOR_TO
28470: IFFALSE 28506
// if value = array [ i ] then
28472: LD_VAR 0 2
28476: PUSH
28477: LD_VAR 0 1
28481: PUSH
28482: LD_VAR 0 4
28486: ARRAY
28487: EQUAL
28488: IFFALSE 28504
// begin result := i ;
28490: LD_ADDR_VAR 0 3
28494: PUSH
28495: LD_VAR 0 4
28499: ST_TO_ADDR
// exit ;
28500: POP
28501: POP
28502: GO 28508
// end ;
28504: GO 28469
28506: POP
28507: POP
// end ;
28508: LD_VAR 0 3
28512: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28513: LD_INT 0
28515: PPUSH
// vc_chassis := chassis ;
28516: LD_ADDR_OWVAR 37
28520: PUSH
28521: LD_VAR 0 1
28525: ST_TO_ADDR
// vc_engine := engine ;
28526: LD_ADDR_OWVAR 39
28530: PUSH
28531: LD_VAR 0 2
28535: ST_TO_ADDR
// vc_control := control ;
28536: LD_ADDR_OWVAR 38
28540: PUSH
28541: LD_VAR 0 3
28545: ST_TO_ADDR
// vc_weapon := weapon ;
28546: LD_ADDR_OWVAR 40
28550: PUSH
28551: LD_VAR 0 4
28555: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28556: LD_ADDR_OWVAR 41
28560: PUSH
28561: LD_VAR 0 5
28565: ST_TO_ADDR
// end ;
28566: LD_VAR 0 6
28570: RET
// export function WantPlant ( unit ) ; var task ; begin
28571: LD_INT 0
28573: PPUSH
28574: PPUSH
// result := false ;
28575: LD_ADDR_VAR 0 2
28579: PUSH
28580: LD_INT 0
28582: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28583: LD_ADDR_VAR 0 3
28587: PUSH
28588: LD_VAR 0 1
28592: PPUSH
28593: CALL_OW 437
28597: ST_TO_ADDR
// if task then
28598: LD_VAR 0 3
28602: IFFALSE 28630
// if task [ 1 ] [ 1 ] = p then
28604: LD_VAR 0 3
28608: PUSH
28609: LD_INT 1
28611: ARRAY
28612: PUSH
28613: LD_INT 1
28615: ARRAY
28616: PUSH
28617: LD_STRING p
28619: EQUAL
28620: IFFALSE 28630
// result := true ;
28622: LD_ADDR_VAR 0 2
28626: PUSH
28627: LD_INT 1
28629: ST_TO_ADDR
// end ;
28630: LD_VAR 0 2
28634: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28635: LD_INT 0
28637: PPUSH
28638: PPUSH
28639: PPUSH
28640: PPUSH
// if pos < 1 then
28641: LD_VAR 0 2
28645: PUSH
28646: LD_INT 1
28648: LESS
28649: IFFALSE 28653
// exit ;
28651: GO 28956
// if pos = 1 then
28653: LD_VAR 0 2
28657: PUSH
28658: LD_INT 1
28660: EQUAL
28661: IFFALSE 28694
// result := Replace ( arr , pos [ 1 ] , value ) else
28663: LD_ADDR_VAR 0 4
28667: PUSH
28668: LD_VAR 0 1
28672: PPUSH
28673: LD_VAR 0 2
28677: PUSH
28678: LD_INT 1
28680: ARRAY
28681: PPUSH
28682: LD_VAR 0 3
28686: PPUSH
28687: CALL_OW 1
28691: ST_TO_ADDR
28692: GO 28956
// begin tmp := arr ;
28694: LD_ADDR_VAR 0 6
28698: PUSH
28699: LD_VAR 0 1
28703: ST_TO_ADDR
// s_arr := [ tmp ] ;
28704: LD_ADDR_VAR 0 7
28708: PUSH
28709: LD_VAR 0 6
28713: PUSH
28714: EMPTY
28715: LIST
28716: ST_TO_ADDR
// for i = 1 to pos - 1 do
28717: LD_ADDR_VAR 0 5
28721: PUSH
28722: DOUBLE
28723: LD_INT 1
28725: DEC
28726: ST_TO_ADDR
28727: LD_VAR 0 2
28731: PUSH
28732: LD_INT 1
28734: MINUS
28735: PUSH
28736: FOR_TO
28737: IFFALSE 28782
// begin tmp := tmp [ pos [ i ] ] ;
28739: LD_ADDR_VAR 0 6
28743: PUSH
28744: LD_VAR 0 6
28748: PUSH
28749: LD_VAR 0 2
28753: PUSH
28754: LD_VAR 0 5
28758: ARRAY
28759: ARRAY
28760: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28761: LD_ADDR_VAR 0 7
28765: PUSH
28766: LD_VAR 0 7
28770: PUSH
28771: LD_VAR 0 6
28775: PUSH
28776: EMPTY
28777: LIST
28778: ADD
28779: ST_TO_ADDR
// end ;
28780: GO 28736
28782: POP
28783: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28784: LD_ADDR_VAR 0 6
28788: PUSH
28789: LD_VAR 0 6
28793: PPUSH
28794: LD_VAR 0 2
28798: PUSH
28799: LD_VAR 0 2
28803: ARRAY
28804: PPUSH
28805: LD_VAR 0 3
28809: PPUSH
28810: CALL_OW 1
28814: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28815: LD_ADDR_VAR 0 7
28819: PUSH
28820: LD_VAR 0 7
28824: PPUSH
28825: LD_VAR 0 7
28829: PPUSH
28830: LD_VAR 0 6
28834: PPUSH
28835: CALL_OW 1
28839: ST_TO_ADDR
// for i = s_arr downto 2 do
28840: LD_ADDR_VAR 0 5
28844: PUSH
28845: DOUBLE
28846: LD_VAR 0 7
28850: INC
28851: ST_TO_ADDR
28852: LD_INT 2
28854: PUSH
28855: FOR_DOWNTO
28856: IFFALSE 28940
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28858: LD_ADDR_VAR 0 6
28862: PUSH
28863: LD_VAR 0 7
28867: PUSH
28868: LD_VAR 0 5
28872: PUSH
28873: LD_INT 1
28875: MINUS
28876: ARRAY
28877: PPUSH
28878: LD_VAR 0 2
28882: PUSH
28883: LD_VAR 0 5
28887: PUSH
28888: LD_INT 1
28890: MINUS
28891: ARRAY
28892: PPUSH
28893: LD_VAR 0 7
28897: PUSH
28898: LD_VAR 0 5
28902: ARRAY
28903: PPUSH
28904: CALL_OW 1
28908: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28909: LD_ADDR_VAR 0 7
28913: PUSH
28914: LD_VAR 0 7
28918: PPUSH
28919: LD_VAR 0 5
28923: PUSH
28924: LD_INT 1
28926: MINUS
28927: PPUSH
28928: LD_VAR 0 6
28932: PPUSH
28933: CALL_OW 1
28937: ST_TO_ADDR
// end ;
28938: GO 28855
28940: POP
28941: POP
// result := s_arr [ 1 ] ;
28942: LD_ADDR_VAR 0 4
28946: PUSH
28947: LD_VAR 0 7
28951: PUSH
28952: LD_INT 1
28954: ARRAY
28955: ST_TO_ADDR
// end ; end ;
28956: LD_VAR 0 4
28960: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28961: LD_INT 0
28963: PPUSH
28964: PPUSH
// if not list then
28965: LD_VAR 0 1
28969: NOT
28970: IFFALSE 28974
// exit ;
28972: GO 29065
// i := list [ pos1 ] ;
28974: LD_ADDR_VAR 0 5
28978: PUSH
28979: LD_VAR 0 1
28983: PUSH
28984: LD_VAR 0 2
28988: ARRAY
28989: ST_TO_ADDR
// if not i then
28990: LD_VAR 0 5
28994: NOT
28995: IFFALSE 28999
// exit ;
28997: GO 29065
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28999: LD_ADDR_VAR 0 1
29003: PUSH
29004: LD_VAR 0 1
29008: PPUSH
29009: LD_VAR 0 2
29013: PPUSH
29014: LD_VAR 0 1
29018: PUSH
29019: LD_VAR 0 3
29023: ARRAY
29024: PPUSH
29025: CALL_OW 1
29029: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29030: LD_ADDR_VAR 0 1
29034: PUSH
29035: LD_VAR 0 1
29039: PPUSH
29040: LD_VAR 0 3
29044: PPUSH
29045: LD_VAR 0 5
29049: PPUSH
29050: CALL_OW 1
29054: ST_TO_ADDR
// result := list ;
29055: LD_ADDR_VAR 0 4
29059: PUSH
29060: LD_VAR 0 1
29064: ST_TO_ADDR
// end ;
29065: LD_VAR 0 4
29069: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29070: LD_INT 0
29072: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29073: LD_ADDR_VAR 0 5
29077: PUSH
29078: LD_VAR 0 1
29082: PPUSH
29083: CALL_OW 250
29087: PPUSH
29088: LD_VAR 0 1
29092: PPUSH
29093: CALL_OW 251
29097: PPUSH
29098: LD_VAR 0 2
29102: PPUSH
29103: LD_VAR 0 3
29107: PPUSH
29108: LD_VAR 0 4
29112: PPUSH
29113: CALL 29123 0 5
29117: ST_TO_ADDR
// end ;
29118: LD_VAR 0 5
29122: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29123: LD_INT 0
29125: PPUSH
29126: PPUSH
29127: PPUSH
29128: PPUSH
// if not list then
29129: LD_VAR 0 3
29133: NOT
29134: IFFALSE 29138
// exit ;
29136: GO 29526
// result := [ ] ;
29138: LD_ADDR_VAR 0 6
29142: PUSH
29143: EMPTY
29144: ST_TO_ADDR
// for i in list do
29145: LD_ADDR_VAR 0 7
29149: PUSH
29150: LD_VAR 0 3
29154: PUSH
29155: FOR_IN
29156: IFFALSE 29358
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29158: LD_ADDR_VAR 0 9
29162: PUSH
29163: LD_VAR 0 7
29167: PPUSH
29168: LD_VAR 0 1
29172: PPUSH
29173: LD_VAR 0 2
29177: PPUSH
29178: CALL_OW 297
29182: ST_TO_ADDR
// if not result then
29183: LD_VAR 0 6
29187: NOT
29188: IFFALSE 29214
// result := [ [ i , tmp ] ] else
29190: LD_ADDR_VAR 0 6
29194: PUSH
29195: LD_VAR 0 7
29199: PUSH
29200: LD_VAR 0 9
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: EMPTY
29210: LIST
29211: ST_TO_ADDR
29212: GO 29356
// begin if result [ result ] [ 2 ] < tmp then
29214: LD_VAR 0 6
29218: PUSH
29219: LD_VAR 0 6
29223: ARRAY
29224: PUSH
29225: LD_INT 2
29227: ARRAY
29228: PUSH
29229: LD_VAR 0 9
29233: LESS
29234: IFFALSE 29276
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29236: LD_ADDR_VAR 0 6
29240: PUSH
29241: LD_VAR 0 6
29245: PPUSH
29246: LD_VAR 0 6
29250: PUSH
29251: LD_INT 1
29253: PLUS
29254: PPUSH
29255: LD_VAR 0 7
29259: PUSH
29260: LD_VAR 0 9
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PPUSH
29269: CALL_OW 2
29273: ST_TO_ADDR
29274: GO 29356
// for j = 1 to result do
29276: LD_ADDR_VAR 0 8
29280: PUSH
29281: DOUBLE
29282: LD_INT 1
29284: DEC
29285: ST_TO_ADDR
29286: LD_VAR 0 6
29290: PUSH
29291: FOR_TO
29292: IFFALSE 29354
// begin if tmp < result [ j ] [ 2 ] then
29294: LD_VAR 0 9
29298: PUSH
29299: LD_VAR 0 6
29303: PUSH
29304: LD_VAR 0 8
29308: ARRAY
29309: PUSH
29310: LD_INT 2
29312: ARRAY
29313: LESS
29314: IFFALSE 29352
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29316: LD_ADDR_VAR 0 6
29320: PUSH
29321: LD_VAR 0 6
29325: PPUSH
29326: LD_VAR 0 8
29330: PPUSH
29331: LD_VAR 0 7
29335: PUSH
29336: LD_VAR 0 9
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PPUSH
29345: CALL_OW 2
29349: ST_TO_ADDR
// break ;
29350: GO 29354
// end ; end ;
29352: GO 29291
29354: POP
29355: POP
// end ; end ;
29356: GO 29155
29358: POP
29359: POP
// if result and not asc then
29360: LD_VAR 0 6
29364: PUSH
29365: LD_VAR 0 4
29369: NOT
29370: AND
29371: IFFALSE 29446
// begin tmp := result ;
29373: LD_ADDR_VAR 0 9
29377: PUSH
29378: LD_VAR 0 6
29382: ST_TO_ADDR
// for i = tmp downto 1 do
29383: LD_ADDR_VAR 0 7
29387: PUSH
29388: DOUBLE
29389: LD_VAR 0 9
29393: INC
29394: ST_TO_ADDR
29395: LD_INT 1
29397: PUSH
29398: FOR_DOWNTO
29399: IFFALSE 29444
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29401: LD_ADDR_VAR 0 6
29405: PUSH
29406: LD_VAR 0 6
29410: PPUSH
29411: LD_VAR 0 9
29415: PUSH
29416: LD_VAR 0 7
29420: MINUS
29421: PUSH
29422: LD_INT 1
29424: PLUS
29425: PPUSH
29426: LD_VAR 0 9
29430: PUSH
29431: LD_VAR 0 7
29435: ARRAY
29436: PPUSH
29437: CALL_OW 1
29441: ST_TO_ADDR
29442: GO 29398
29444: POP
29445: POP
// end ; tmp := [ ] ;
29446: LD_ADDR_VAR 0 9
29450: PUSH
29451: EMPTY
29452: ST_TO_ADDR
// if mode then
29453: LD_VAR 0 5
29457: IFFALSE 29526
// begin for i = 1 to result do
29459: LD_ADDR_VAR 0 7
29463: PUSH
29464: DOUBLE
29465: LD_INT 1
29467: DEC
29468: ST_TO_ADDR
29469: LD_VAR 0 6
29473: PUSH
29474: FOR_TO
29475: IFFALSE 29514
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29477: LD_ADDR_VAR 0 9
29481: PUSH
29482: LD_VAR 0 9
29486: PPUSH
29487: LD_VAR 0 7
29491: PPUSH
29492: LD_VAR 0 6
29496: PUSH
29497: LD_VAR 0 7
29501: ARRAY
29502: PUSH
29503: LD_INT 1
29505: ARRAY
29506: PPUSH
29507: CALL_OW 1
29511: ST_TO_ADDR
29512: GO 29474
29514: POP
29515: POP
// result := tmp ;
29516: LD_ADDR_VAR 0 6
29520: PUSH
29521: LD_VAR 0 9
29525: ST_TO_ADDR
// end ; end ;
29526: LD_VAR 0 6
29530: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29531: LD_INT 0
29533: PPUSH
29534: PPUSH
29535: PPUSH
29536: PPUSH
29537: PPUSH
29538: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29539: LD_ADDR_VAR 0 5
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: LD_INT 0
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: EMPTY
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: ST_TO_ADDR
// if not x or not y then
29561: LD_VAR 0 2
29565: NOT
29566: PUSH
29567: LD_VAR 0 3
29571: NOT
29572: OR
29573: IFFALSE 29577
// exit ;
29575: GO 31229
// if not range then
29577: LD_VAR 0 4
29581: NOT
29582: IFFALSE 29592
// range := 10 ;
29584: LD_ADDR_VAR 0 4
29588: PUSH
29589: LD_INT 10
29591: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29592: LD_ADDR_VAR 0 8
29596: PUSH
29597: LD_INT 81
29599: PUSH
29600: LD_VAR 0 1
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 92
29611: PUSH
29612: LD_VAR 0 2
29616: PUSH
29617: LD_VAR 0 3
29621: PUSH
29622: LD_VAR 0 4
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 3
29635: PUSH
29636: LD_INT 21
29638: PUSH
29639: LD_INT 3
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: LIST
29654: PPUSH
29655: CALL_OW 69
29659: ST_TO_ADDR
// if not tmp then
29660: LD_VAR 0 8
29664: NOT
29665: IFFALSE 29669
// exit ;
29667: GO 31229
// for i in tmp do
29669: LD_ADDR_VAR 0 6
29673: PUSH
29674: LD_VAR 0 8
29678: PUSH
29679: FOR_IN
29680: IFFALSE 31204
// begin points := [ 0 , 0 , 0 ] ;
29682: LD_ADDR_VAR 0 9
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 0
29692: PUSH
29693: LD_INT 0
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: LIST
29700: ST_TO_ADDR
// bpoints := 1 ;
29701: LD_ADDR_VAR 0 10
29705: PUSH
29706: LD_INT 1
29708: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29709: LD_VAR 0 6
29713: PPUSH
29714: CALL_OW 247
29718: PUSH
29719: LD_INT 1
29721: DOUBLE
29722: EQUAL
29723: IFTRUE 29727
29725: GO 30305
29727: POP
// begin if GetClass ( i ) = 1 then
29728: LD_VAR 0 6
29732: PPUSH
29733: CALL_OW 257
29737: PUSH
29738: LD_INT 1
29740: EQUAL
29741: IFFALSE 29762
// points := [ 10 , 5 , 3 ] ;
29743: LD_ADDR_VAR 0 9
29747: PUSH
29748: LD_INT 10
29750: PUSH
29751: LD_INT 5
29753: PUSH
29754: LD_INT 3
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: LIST
29761: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29762: LD_VAR 0 6
29766: PPUSH
29767: CALL_OW 257
29771: PUSH
29772: LD_INT 2
29774: PUSH
29775: LD_INT 3
29777: PUSH
29778: LD_INT 4
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: LIST
29785: IN
29786: IFFALSE 29807
// points := [ 3 , 2 , 1 ] ;
29788: LD_ADDR_VAR 0 9
29792: PUSH
29793: LD_INT 3
29795: PUSH
29796: LD_INT 2
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: LIST
29806: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29807: LD_VAR 0 6
29811: PPUSH
29812: CALL_OW 257
29816: PUSH
29817: LD_INT 5
29819: EQUAL
29820: IFFALSE 29841
// points := [ 130 , 5 , 2 ] ;
29822: LD_ADDR_VAR 0 9
29826: PUSH
29827: LD_INT 130
29829: PUSH
29830: LD_INT 5
29832: PUSH
29833: LD_INT 2
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29841: LD_VAR 0 6
29845: PPUSH
29846: CALL_OW 257
29850: PUSH
29851: LD_INT 8
29853: EQUAL
29854: IFFALSE 29875
// points := [ 35 , 35 , 30 ] ;
29856: LD_ADDR_VAR 0 9
29860: PUSH
29861: LD_INT 35
29863: PUSH
29864: LD_INT 35
29866: PUSH
29867: LD_INT 30
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: LIST
29874: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29875: LD_VAR 0 6
29879: PPUSH
29880: CALL_OW 257
29884: PUSH
29885: LD_INT 9
29887: EQUAL
29888: IFFALSE 29909
// points := [ 20 , 55 , 40 ] ;
29890: LD_ADDR_VAR 0 9
29894: PUSH
29895: LD_INT 20
29897: PUSH
29898: LD_INT 55
29900: PUSH
29901: LD_INT 40
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29909: LD_VAR 0 6
29913: PPUSH
29914: CALL_OW 257
29918: PUSH
29919: LD_INT 12
29921: PUSH
29922: LD_INT 16
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: IN
29929: IFFALSE 29950
// points := [ 5 , 3 , 2 ] ;
29931: LD_ADDR_VAR 0 9
29935: PUSH
29936: LD_INT 5
29938: PUSH
29939: LD_INT 3
29941: PUSH
29942: LD_INT 2
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: LIST
29949: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29950: LD_VAR 0 6
29954: PPUSH
29955: CALL_OW 257
29959: PUSH
29960: LD_INT 17
29962: EQUAL
29963: IFFALSE 29984
// points := [ 100 , 50 , 75 ] ;
29965: LD_ADDR_VAR 0 9
29969: PUSH
29970: LD_INT 100
29972: PUSH
29973: LD_INT 50
29975: PUSH
29976: LD_INT 75
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: LIST
29983: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29984: LD_VAR 0 6
29988: PPUSH
29989: CALL_OW 257
29993: PUSH
29994: LD_INT 15
29996: EQUAL
29997: IFFALSE 30018
// points := [ 10 , 5 , 3 ] ;
29999: LD_ADDR_VAR 0 9
30003: PUSH
30004: LD_INT 10
30006: PUSH
30007: LD_INT 5
30009: PUSH
30010: LD_INT 3
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: LIST
30017: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30018: LD_VAR 0 6
30022: PPUSH
30023: CALL_OW 257
30027: PUSH
30028: LD_INT 14
30030: EQUAL
30031: IFFALSE 30052
// points := [ 10 , 0 , 0 ] ;
30033: LD_ADDR_VAR 0 9
30037: PUSH
30038: LD_INT 10
30040: PUSH
30041: LD_INT 0
30043: PUSH
30044: LD_INT 0
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: LIST
30051: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30052: LD_VAR 0 6
30056: PPUSH
30057: CALL_OW 257
30061: PUSH
30062: LD_INT 11
30064: EQUAL
30065: IFFALSE 30086
// points := [ 30 , 10 , 5 ] ;
30067: LD_ADDR_VAR 0 9
30071: PUSH
30072: LD_INT 30
30074: PUSH
30075: LD_INT 10
30077: PUSH
30078: LD_INT 5
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: LIST
30085: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30086: LD_VAR 0 1
30090: PPUSH
30091: LD_INT 5
30093: PPUSH
30094: CALL_OW 321
30098: PUSH
30099: LD_INT 2
30101: EQUAL
30102: IFFALSE 30119
// bpoints := bpoints * 1.8 ;
30104: LD_ADDR_VAR 0 10
30108: PUSH
30109: LD_VAR 0 10
30113: PUSH
30114: LD_REAL  1.80000000000000E+0000
30117: MUL
30118: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30119: LD_VAR 0 6
30123: PPUSH
30124: CALL_OW 257
30128: PUSH
30129: LD_INT 1
30131: PUSH
30132: LD_INT 2
30134: PUSH
30135: LD_INT 3
30137: PUSH
30138: LD_INT 4
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: IN
30147: PUSH
30148: LD_VAR 0 1
30152: PPUSH
30153: LD_INT 51
30155: PPUSH
30156: CALL_OW 321
30160: PUSH
30161: LD_INT 2
30163: EQUAL
30164: AND
30165: IFFALSE 30182
// bpoints := bpoints * 1.2 ;
30167: LD_ADDR_VAR 0 10
30171: PUSH
30172: LD_VAR 0 10
30176: PUSH
30177: LD_REAL  1.20000000000000E+0000
30180: MUL
30181: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30182: LD_VAR 0 6
30186: PPUSH
30187: CALL_OW 257
30191: PUSH
30192: LD_INT 5
30194: PUSH
30195: LD_INT 7
30197: PUSH
30198: LD_INT 9
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: LIST
30205: IN
30206: PUSH
30207: LD_VAR 0 1
30211: PPUSH
30212: LD_INT 52
30214: PPUSH
30215: CALL_OW 321
30219: PUSH
30220: LD_INT 2
30222: EQUAL
30223: AND
30224: IFFALSE 30241
// bpoints := bpoints * 1.5 ;
30226: LD_ADDR_VAR 0 10
30230: PUSH
30231: LD_VAR 0 10
30235: PUSH
30236: LD_REAL  1.50000000000000E+0000
30239: MUL
30240: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30241: LD_VAR 0 1
30245: PPUSH
30246: LD_INT 66
30248: PPUSH
30249: CALL_OW 321
30253: PUSH
30254: LD_INT 2
30256: EQUAL
30257: IFFALSE 30274
// bpoints := bpoints * 1.1 ;
30259: LD_ADDR_VAR 0 10
30263: PUSH
30264: LD_VAR 0 10
30268: PUSH
30269: LD_REAL  1.10000000000000E+0000
30272: MUL
30273: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30274: LD_ADDR_VAR 0 10
30278: PUSH
30279: LD_VAR 0 10
30283: PUSH
30284: LD_VAR 0 6
30288: PPUSH
30289: LD_INT 1
30291: PPUSH
30292: CALL_OW 259
30296: PUSH
30297: LD_REAL  1.15000000000000E+0000
30300: MUL
30301: MUL
30302: ST_TO_ADDR
// end ; unit_vehicle :
30303: GO 31133
30305: LD_INT 2
30307: DOUBLE
30308: EQUAL
30309: IFTRUE 30313
30311: GO 31121
30313: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30314: LD_VAR 0 6
30318: PPUSH
30319: CALL_OW 264
30323: PUSH
30324: LD_INT 2
30326: PUSH
30327: LD_INT 42
30329: PUSH
30330: LD_INT 24
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: LIST
30337: IN
30338: IFFALSE 30359
// points := [ 25 , 5 , 3 ] ;
30340: LD_ADDR_VAR 0 9
30344: PUSH
30345: LD_INT 25
30347: PUSH
30348: LD_INT 5
30350: PUSH
30351: LD_INT 3
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: LIST
30358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30359: LD_VAR 0 6
30363: PPUSH
30364: CALL_OW 264
30368: PUSH
30369: LD_INT 4
30371: PUSH
30372: LD_INT 43
30374: PUSH
30375: LD_INT 25
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: LIST
30382: IN
30383: IFFALSE 30404
// points := [ 40 , 15 , 5 ] ;
30385: LD_ADDR_VAR 0 9
30389: PUSH
30390: LD_INT 40
30392: PUSH
30393: LD_INT 15
30395: PUSH
30396: LD_INT 5
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: LIST
30403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30404: LD_VAR 0 6
30408: PPUSH
30409: CALL_OW 264
30413: PUSH
30414: LD_INT 3
30416: PUSH
30417: LD_INT 23
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: IN
30424: IFFALSE 30445
// points := [ 7 , 25 , 8 ] ;
30426: LD_ADDR_VAR 0 9
30430: PUSH
30431: LD_INT 7
30433: PUSH
30434: LD_INT 25
30436: PUSH
30437: LD_INT 8
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: LIST
30444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30445: LD_VAR 0 6
30449: PPUSH
30450: CALL_OW 264
30454: PUSH
30455: LD_INT 5
30457: PUSH
30458: LD_INT 27
30460: PUSH
30461: LD_INT 44
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: LIST
30468: IN
30469: IFFALSE 30490
// points := [ 14 , 50 , 16 ] ;
30471: LD_ADDR_VAR 0 9
30475: PUSH
30476: LD_INT 14
30478: PUSH
30479: LD_INT 50
30481: PUSH
30482: LD_INT 16
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: LIST
30489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30490: LD_VAR 0 6
30494: PPUSH
30495: CALL_OW 264
30499: PUSH
30500: LD_INT 6
30502: PUSH
30503: LD_INT 46
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: IN
30510: IFFALSE 30531
// points := [ 32 , 120 , 70 ] ;
30512: LD_ADDR_VAR 0 9
30516: PUSH
30517: LD_INT 32
30519: PUSH
30520: LD_INT 120
30522: PUSH
30523: LD_INT 70
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: LIST
30530: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30531: LD_VAR 0 6
30535: PPUSH
30536: CALL_OW 264
30540: PUSH
30541: LD_INT 7
30543: PUSH
30544: LD_INT 28
30546: PUSH
30547: LD_INT 45
30549: PUSH
30550: LD_EXP 88
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: IN
30561: IFFALSE 30582
// points := [ 35 , 20 , 45 ] ;
30563: LD_ADDR_VAR 0 9
30567: PUSH
30568: LD_INT 35
30570: PUSH
30571: LD_INT 20
30573: PUSH
30574: LD_INT 45
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: LIST
30581: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30582: LD_VAR 0 6
30586: PPUSH
30587: CALL_OW 264
30591: PUSH
30592: LD_INT 47
30594: PUSH
30595: EMPTY
30596: LIST
30597: IN
30598: IFFALSE 30619
// points := [ 67 , 45 , 75 ] ;
30600: LD_ADDR_VAR 0 9
30604: PUSH
30605: LD_INT 67
30607: PUSH
30608: LD_INT 45
30610: PUSH
30611: LD_INT 75
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: LIST
30618: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30619: LD_VAR 0 6
30623: PPUSH
30624: CALL_OW 264
30628: PUSH
30629: LD_INT 26
30631: PUSH
30632: EMPTY
30633: LIST
30634: IN
30635: IFFALSE 30656
// points := [ 120 , 30 , 80 ] ;
30637: LD_ADDR_VAR 0 9
30641: PUSH
30642: LD_INT 120
30644: PUSH
30645: LD_INT 30
30647: PUSH
30648: LD_INT 80
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: LIST
30655: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30656: LD_VAR 0 6
30660: PPUSH
30661: CALL_OW 264
30665: PUSH
30666: LD_INT 22
30668: PUSH
30669: EMPTY
30670: LIST
30671: IN
30672: IFFALSE 30693
// points := [ 40 , 1 , 1 ] ;
30674: LD_ADDR_VAR 0 9
30678: PUSH
30679: LD_INT 40
30681: PUSH
30682: LD_INT 1
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30693: LD_VAR 0 6
30697: PPUSH
30698: CALL_OW 264
30702: PUSH
30703: LD_INT 29
30705: PUSH
30706: EMPTY
30707: LIST
30708: IN
30709: IFFALSE 30730
// points := [ 70 , 200 , 400 ] ;
30711: LD_ADDR_VAR 0 9
30715: PUSH
30716: LD_INT 70
30718: PUSH
30719: LD_INT 200
30721: PUSH
30722: LD_INT 400
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: LIST
30729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30730: LD_VAR 0 6
30734: PPUSH
30735: CALL_OW 264
30739: PUSH
30740: LD_INT 14
30742: PUSH
30743: LD_INT 53
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: IN
30750: IFFALSE 30771
// points := [ 40 , 10 , 20 ] ;
30752: LD_ADDR_VAR 0 9
30756: PUSH
30757: LD_INT 40
30759: PUSH
30760: LD_INT 10
30762: PUSH
30763: LD_INT 20
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: LIST
30770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30771: LD_VAR 0 6
30775: PPUSH
30776: CALL_OW 264
30780: PUSH
30781: LD_INT 9
30783: PUSH
30784: EMPTY
30785: LIST
30786: IN
30787: IFFALSE 30808
// points := [ 5 , 70 , 20 ] ;
30789: LD_ADDR_VAR 0 9
30793: PUSH
30794: LD_INT 5
30796: PUSH
30797: LD_INT 70
30799: PUSH
30800: LD_INT 20
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30808: LD_VAR 0 6
30812: PPUSH
30813: CALL_OW 264
30817: PUSH
30818: LD_INT 10
30820: PUSH
30821: EMPTY
30822: LIST
30823: IN
30824: IFFALSE 30845
// points := [ 35 , 110 , 70 ] ;
30826: LD_ADDR_VAR 0 9
30830: PUSH
30831: LD_INT 35
30833: PUSH
30834: LD_INT 110
30836: PUSH
30837: LD_INT 70
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: LIST
30844: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30845: LD_VAR 0 6
30849: PPUSH
30850: CALL_OW 265
30854: PUSH
30855: LD_INT 25
30857: EQUAL
30858: IFFALSE 30879
// points := [ 80 , 65 , 100 ] ;
30860: LD_ADDR_VAR 0 9
30864: PUSH
30865: LD_INT 80
30867: PUSH
30868: LD_INT 65
30870: PUSH
30871: LD_INT 100
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: LIST
30878: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30879: LD_VAR 0 6
30883: PPUSH
30884: CALL_OW 263
30888: PUSH
30889: LD_INT 1
30891: EQUAL
30892: IFFALSE 30927
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30894: LD_ADDR_VAR 0 10
30898: PUSH
30899: LD_VAR 0 10
30903: PUSH
30904: LD_VAR 0 6
30908: PPUSH
30909: CALL_OW 311
30913: PPUSH
30914: LD_INT 3
30916: PPUSH
30917: CALL_OW 259
30921: PUSH
30922: LD_INT 4
30924: MUL
30925: MUL
30926: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30927: LD_VAR 0 6
30931: PPUSH
30932: CALL_OW 263
30936: PUSH
30937: LD_INT 2
30939: EQUAL
30940: IFFALSE 30991
// begin j := IsControledBy ( i ) ;
30942: LD_ADDR_VAR 0 7
30946: PUSH
30947: LD_VAR 0 6
30951: PPUSH
30952: CALL_OW 312
30956: ST_TO_ADDR
// if j then
30957: LD_VAR 0 7
30961: IFFALSE 30991
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30963: LD_ADDR_VAR 0 10
30967: PUSH
30968: LD_VAR 0 10
30972: PUSH
30973: LD_VAR 0 7
30977: PPUSH
30978: LD_INT 3
30980: PPUSH
30981: CALL_OW 259
30985: PUSH
30986: LD_INT 3
30988: MUL
30989: MUL
30990: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30991: LD_VAR 0 6
30995: PPUSH
30996: CALL_OW 264
31000: PUSH
31001: LD_INT 5
31003: PUSH
31004: LD_INT 6
31006: PUSH
31007: LD_INT 46
31009: PUSH
31010: LD_INT 44
31012: PUSH
31013: LD_INT 47
31015: PUSH
31016: LD_INT 45
31018: PUSH
31019: LD_INT 28
31021: PUSH
31022: LD_INT 7
31024: PUSH
31025: LD_INT 27
31027: PUSH
31028: LD_INT 29
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: IN
31043: PUSH
31044: LD_VAR 0 1
31048: PPUSH
31049: LD_INT 52
31051: PPUSH
31052: CALL_OW 321
31056: PUSH
31057: LD_INT 2
31059: EQUAL
31060: AND
31061: IFFALSE 31078
// bpoints := bpoints * 1.2 ;
31063: LD_ADDR_VAR 0 10
31067: PUSH
31068: LD_VAR 0 10
31072: PUSH
31073: LD_REAL  1.20000000000000E+0000
31076: MUL
31077: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31078: LD_VAR 0 6
31082: PPUSH
31083: CALL_OW 264
31087: PUSH
31088: LD_INT 6
31090: PUSH
31091: LD_INT 46
31093: PUSH
31094: LD_INT 47
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: LIST
31101: IN
31102: IFFALSE 31119
// bpoints := bpoints * 1.2 ;
31104: LD_ADDR_VAR 0 10
31108: PUSH
31109: LD_VAR 0 10
31113: PUSH
31114: LD_REAL  1.20000000000000E+0000
31117: MUL
31118: ST_TO_ADDR
// end ; unit_building :
31119: GO 31133
31121: LD_INT 3
31123: DOUBLE
31124: EQUAL
31125: IFTRUE 31129
31127: GO 31132
31129: POP
// ; end ;
31130: GO 31133
31132: POP
// for j = 1 to 3 do
31133: LD_ADDR_VAR 0 7
31137: PUSH
31138: DOUBLE
31139: LD_INT 1
31141: DEC
31142: ST_TO_ADDR
31143: LD_INT 3
31145: PUSH
31146: FOR_TO
31147: IFFALSE 31200
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31149: LD_ADDR_VAR 0 5
31153: PUSH
31154: LD_VAR 0 5
31158: PPUSH
31159: LD_VAR 0 7
31163: PPUSH
31164: LD_VAR 0 5
31168: PUSH
31169: LD_VAR 0 7
31173: ARRAY
31174: PUSH
31175: LD_VAR 0 9
31179: PUSH
31180: LD_VAR 0 7
31184: ARRAY
31185: PUSH
31186: LD_VAR 0 10
31190: MUL
31191: PLUS
31192: PPUSH
31193: CALL_OW 1
31197: ST_TO_ADDR
31198: GO 31146
31200: POP
31201: POP
// end ;
31202: GO 29679
31204: POP
31205: POP
// result := Replace ( result , 4 , tmp ) ;
31206: LD_ADDR_VAR 0 5
31210: PUSH
31211: LD_VAR 0 5
31215: PPUSH
31216: LD_INT 4
31218: PPUSH
31219: LD_VAR 0 8
31223: PPUSH
31224: CALL_OW 1
31228: ST_TO_ADDR
// end ;
31229: LD_VAR 0 5
31233: RET
// export function DangerAtRange ( unit , range ) ; begin
31234: LD_INT 0
31236: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31237: LD_ADDR_VAR 0 3
31241: PUSH
31242: LD_VAR 0 1
31246: PPUSH
31247: CALL_OW 255
31251: PPUSH
31252: LD_VAR 0 1
31256: PPUSH
31257: CALL_OW 250
31261: PPUSH
31262: LD_VAR 0 1
31266: PPUSH
31267: CALL_OW 251
31271: PPUSH
31272: LD_VAR 0 2
31276: PPUSH
31277: CALL 29531 0 4
31281: ST_TO_ADDR
// end ;
31282: LD_VAR 0 3
31286: RET
// export function DangerInArea ( side , area ) ; begin
31287: LD_INT 0
31289: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31290: LD_ADDR_VAR 0 3
31294: PUSH
31295: LD_VAR 0 2
31299: PPUSH
31300: LD_INT 81
31302: PUSH
31303: LD_VAR 0 1
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PPUSH
31312: CALL_OW 70
31316: ST_TO_ADDR
// end ;
31317: LD_VAR 0 3
31321: RET
// export function IsExtension ( b ) ; begin
31322: LD_INT 0
31324: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31325: LD_ADDR_VAR 0 2
31329: PUSH
31330: LD_VAR 0 1
31334: PUSH
31335: LD_INT 23
31337: PUSH
31338: LD_INT 20
31340: PUSH
31341: LD_INT 22
31343: PUSH
31344: LD_INT 17
31346: PUSH
31347: LD_INT 24
31349: PUSH
31350: LD_INT 21
31352: PUSH
31353: LD_INT 19
31355: PUSH
31356: LD_INT 16
31358: PUSH
31359: LD_INT 25
31361: PUSH
31362: LD_INT 18
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: IN
31377: ST_TO_ADDR
// end ;
31378: LD_VAR 0 2
31382: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31383: LD_INT 0
31385: PPUSH
31386: PPUSH
31387: PPUSH
// result := [ ] ;
31388: LD_ADDR_VAR 0 4
31392: PUSH
31393: EMPTY
31394: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31395: LD_ADDR_VAR 0 5
31399: PUSH
31400: LD_VAR 0 2
31404: PPUSH
31405: LD_INT 21
31407: PUSH
31408: LD_INT 3
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PPUSH
31415: CALL_OW 70
31419: ST_TO_ADDR
// if not tmp then
31420: LD_VAR 0 5
31424: NOT
31425: IFFALSE 31429
// exit ;
31427: GO 31493
// if checkLink then
31429: LD_VAR 0 3
31433: IFFALSE 31483
// begin for i in tmp do
31435: LD_ADDR_VAR 0 6
31439: PUSH
31440: LD_VAR 0 5
31444: PUSH
31445: FOR_IN
31446: IFFALSE 31481
// if GetBase ( i ) <> base then
31448: LD_VAR 0 6
31452: PPUSH
31453: CALL_OW 274
31457: PUSH
31458: LD_VAR 0 1
31462: NONEQUAL
31463: IFFALSE 31479
// ComLinkToBase ( base , i ) ;
31465: LD_VAR 0 1
31469: PPUSH
31470: LD_VAR 0 6
31474: PPUSH
31475: CALL_OW 169
31479: GO 31445
31481: POP
31482: POP
// end ; result := tmp ;
31483: LD_ADDR_VAR 0 4
31487: PUSH
31488: LD_VAR 0 5
31492: ST_TO_ADDR
// end ;
31493: LD_VAR 0 4
31497: RET
// export function ComComplete ( units , b ) ; var i ; begin
31498: LD_INT 0
31500: PPUSH
31501: PPUSH
// if not units then
31502: LD_VAR 0 1
31506: NOT
31507: IFFALSE 31511
// exit ;
31509: GO 31601
// for i in units do
31511: LD_ADDR_VAR 0 4
31515: PUSH
31516: LD_VAR 0 1
31520: PUSH
31521: FOR_IN
31522: IFFALSE 31599
// if BuildingStatus ( b ) = bs_build then
31524: LD_VAR 0 2
31528: PPUSH
31529: CALL_OW 461
31533: PUSH
31534: LD_INT 1
31536: EQUAL
31537: IFFALSE 31597
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31539: LD_VAR 0 4
31543: PPUSH
31544: LD_STRING h
31546: PUSH
31547: LD_VAR 0 2
31551: PPUSH
31552: CALL_OW 250
31556: PUSH
31557: LD_VAR 0 2
31561: PPUSH
31562: CALL_OW 251
31566: PUSH
31567: LD_VAR 0 2
31571: PUSH
31572: LD_INT 0
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: PUSH
31590: EMPTY
31591: LIST
31592: PPUSH
31593: CALL_OW 446
31597: GO 31521
31599: POP
31600: POP
// end ;
31601: LD_VAR 0 3
31605: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31606: LD_INT 0
31608: PPUSH
31609: PPUSH
31610: PPUSH
31611: PPUSH
31612: PPUSH
31613: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31614: LD_VAR 0 1
31618: NOT
31619: PUSH
31620: LD_VAR 0 1
31624: PPUSH
31625: CALL_OW 263
31629: PUSH
31630: LD_INT 2
31632: NONEQUAL
31633: OR
31634: IFFALSE 31638
// exit ;
31636: GO 31954
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31638: LD_ADDR_VAR 0 6
31642: PUSH
31643: LD_INT 22
31645: PUSH
31646: LD_VAR 0 1
31650: PPUSH
31651: CALL_OW 255
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: PUSH
31663: LD_INT 30
31665: PUSH
31666: LD_INT 36
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 34
31675: PUSH
31676: LD_INT 31
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: LIST
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PPUSH
31692: CALL_OW 69
31696: ST_TO_ADDR
// if not tmp then
31697: LD_VAR 0 6
31701: NOT
31702: IFFALSE 31706
// exit ;
31704: GO 31954
// result := [ ] ;
31706: LD_ADDR_VAR 0 2
31710: PUSH
31711: EMPTY
31712: ST_TO_ADDR
// for i in tmp do
31713: LD_ADDR_VAR 0 3
31717: PUSH
31718: LD_VAR 0 6
31722: PUSH
31723: FOR_IN
31724: IFFALSE 31795
// begin t := UnitsInside ( i ) ;
31726: LD_ADDR_VAR 0 4
31730: PUSH
31731: LD_VAR 0 3
31735: PPUSH
31736: CALL_OW 313
31740: ST_TO_ADDR
// if t then
31741: LD_VAR 0 4
31745: IFFALSE 31793
// for j in t do
31747: LD_ADDR_VAR 0 7
31751: PUSH
31752: LD_VAR 0 4
31756: PUSH
31757: FOR_IN
31758: IFFALSE 31791
// result := Replace ( result , result + 1 , j ) ;
31760: LD_ADDR_VAR 0 2
31764: PUSH
31765: LD_VAR 0 2
31769: PPUSH
31770: LD_VAR 0 2
31774: PUSH
31775: LD_INT 1
31777: PLUS
31778: PPUSH
31779: LD_VAR 0 7
31783: PPUSH
31784: CALL_OW 1
31788: ST_TO_ADDR
31789: GO 31757
31791: POP
31792: POP
// end ;
31793: GO 31723
31795: POP
31796: POP
// if not result then
31797: LD_VAR 0 2
31801: NOT
31802: IFFALSE 31806
// exit ;
31804: GO 31954
// mech := result [ 1 ] ;
31806: LD_ADDR_VAR 0 5
31810: PUSH
31811: LD_VAR 0 2
31815: PUSH
31816: LD_INT 1
31818: ARRAY
31819: ST_TO_ADDR
// if result > 1 then
31820: LD_VAR 0 2
31824: PUSH
31825: LD_INT 1
31827: GREATER
31828: IFFALSE 31940
// begin for i = 2 to result do
31830: LD_ADDR_VAR 0 3
31834: PUSH
31835: DOUBLE
31836: LD_INT 2
31838: DEC
31839: ST_TO_ADDR
31840: LD_VAR 0 2
31844: PUSH
31845: FOR_TO
31846: IFFALSE 31938
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31848: LD_ADDR_VAR 0 4
31852: PUSH
31853: LD_VAR 0 2
31857: PUSH
31858: LD_VAR 0 3
31862: ARRAY
31863: PPUSH
31864: LD_INT 3
31866: PPUSH
31867: CALL_OW 259
31871: PUSH
31872: LD_VAR 0 2
31876: PUSH
31877: LD_VAR 0 3
31881: ARRAY
31882: PPUSH
31883: CALL_OW 432
31887: MINUS
31888: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31889: LD_VAR 0 4
31893: PUSH
31894: LD_VAR 0 5
31898: PPUSH
31899: LD_INT 3
31901: PPUSH
31902: CALL_OW 259
31906: PUSH
31907: LD_VAR 0 5
31911: PPUSH
31912: CALL_OW 432
31916: MINUS
31917: GREATEREQUAL
31918: IFFALSE 31936
// mech := result [ i ] ;
31920: LD_ADDR_VAR 0 5
31924: PUSH
31925: LD_VAR 0 2
31929: PUSH
31930: LD_VAR 0 3
31934: ARRAY
31935: ST_TO_ADDR
// end ;
31936: GO 31845
31938: POP
31939: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31940: LD_VAR 0 1
31944: PPUSH
31945: LD_VAR 0 5
31949: PPUSH
31950: CALL_OW 135
// end ;
31954: LD_VAR 0 2
31958: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31959: LD_INT 0
31961: PPUSH
31962: PPUSH
31963: PPUSH
31964: PPUSH
31965: PPUSH
31966: PPUSH
31967: PPUSH
31968: PPUSH
31969: PPUSH
31970: PPUSH
31971: PPUSH
31972: PPUSH
31973: PPUSH
// result := [ ] ;
31974: LD_ADDR_VAR 0 7
31978: PUSH
31979: EMPTY
31980: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31981: LD_VAR 0 1
31985: PPUSH
31986: CALL_OW 266
31990: PUSH
31991: LD_INT 0
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: IN
32001: NOT
32002: IFFALSE 32006
// exit ;
32004: GO 33640
// if name then
32006: LD_VAR 0 3
32010: IFFALSE 32026
// SetBName ( base_dep , name ) ;
32012: LD_VAR 0 1
32016: PPUSH
32017: LD_VAR 0 3
32021: PPUSH
32022: CALL_OW 500
// base := GetBase ( base_dep ) ;
32026: LD_ADDR_VAR 0 15
32030: PUSH
32031: LD_VAR 0 1
32035: PPUSH
32036: CALL_OW 274
32040: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32041: LD_ADDR_VAR 0 16
32045: PUSH
32046: LD_VAR 0 1
32050: PPUSH
32051: CALL_OW 255
32055: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32056: LD_ADDR_VAR 0 17
32060: PUSH
32061: LD_VAR 0 1
32065: PPUSH
32066: CALL_OW 248
32070: ST_TO_ADDR
// if sources then
32071: LD_VAR 0 5
32075: IFFALSE 32122
// for i = 1 to 3 do
32077: LD_ADDR_VAR 0 8
32081: PUSH
32082: DOUBLE
32083: LD_INT 1
32085: DEC
32086: ST_TO_ADDR
32087: LD_INT 3
32089: PUSH
32090: FOR_TO
32091: IFFALSE 32120
// AddResourceType ( base , i , sources [ i ] ) ;
32093: LD_VAR 0 15
32097: PPUSH
32098: LD_VAR 0 8
32102: PPUSH
32103: LD_VAR 0 5
32107: PUSH
32108: LD_VAR 0 8
32112: ARRAY
32113: PPUSH
32114: CALL_OW 276
32118: GO 32090
32120: POP
32121: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32122: LD_ADDR_VAR 0 18
32126: PUSH
32127: LD_VAR 0 15
32131: PPUSH
32132: LD_VAR 0 2
32136: PPUSH
32137: LD_INT 1
32139: PPUSH
32140: CALL 31383 0 3
32144: ST_TO_ADDR
// InitHc ;
32145: CALL_OW 19
// InitUc ;
32149: CALL_OW 18
// uc_side := side ;
32153: LD_ADDR_OWVAR 20
32157: PUSH
32158: LD_VAR 0 16
32162: ST_TO_ADDR
// uc_nation := nation ;
32163: LD_ADDR_OWVAR 21
32167: PUSH
32168: LD_VAR 0 17
32172: ST_TO_ADDR
// if buildings then
32173: LD_VAR 0 18
32177: IFFALSE 33499
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32179: LD_ADDR_VAR 0 19
32183: PUSH
32184: LD_VAR 0 18
32188: PPUSH
32189: LD_INT 2
32191: PUSH
32192: LD_INT 30
32194: PUSH
32195: LD_INT 29
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 30
32204: PUSH
32205: LD_INT 30
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: LIST
32216: PPUSH
32217: CALL_OW 72
32221: ST_TO_ADDR
// if tmp then
32222: LD_VAR 0 19
32226: IFFALSE 32274
// for i in tmp do
32228: LD_ADDR_VAR 0 8
32232: PUSH
32233: LD_VAR 0 19
32237: PUSH
32238: FOR_IN
32239: IFFALSE 32272
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32241: LD_VAR 0 8
32245: PPUSH
32246: CALL_OW 250
32250: PPUSH
32251: LD_VAR 0 8
32255: PPUSH
32256: CALL_OW 251
32260: PPUSH
32261: LD_VAR 0 16
32265: PPUSH
32266: CALL_OW 441
32270: GO 32238
32272: POP
32273: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32274: LD_VAR 0 18
32278: PPUSH
32279: LD_INT 2
32281: PUSH
32282: LD_INT 30
32284: PUSH
32285: LD_INT 32
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 30
32294: PUSH
32295: LD_INT 33
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: LIST
32306: PPUSH
32307: CALL_OW 72
32311: IFFALSE 32399
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32313: LD_ADDR_VAR 0 8
32317: PUSH
32318: LD_VAR 0 18
32322: PPUSH
32323: LD_INT 2
32325: PUSH
32326: LD_INT 30
32328: PUSH
32329: LD_INT 32
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 30
32338: PUSH
32339: LD_INT 33
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: LIST
32350: PPUSH
32351: CALL_OW 72
32355: PUSH
32356: FOR_IN
32357: IFFALSE 32397
// begin if not GetBWeapon ( i ) then
32359: LD_VAR 0 8
32363: PPUSH
32364: CALL_OW 269
32368: NOT
32369: IFFALSE 32395
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32371: LD_VAR 0 8
32375: PPUSH
32376: LD_VAR 0 8
32380: PPUSH
32381: LD_VAR 0 2
32385: PPUSH
32386: CALL 33645 0 2
32390: PPUSH
32391: CALL_OW 431
// end ;
32395: GO 32356
32397: POP
32398: POP
// end ; for i = 1 to personel do
32399: LD_ADDR_VAR 0 8
32403: PUSH
32404: DOUBLE
32405: LD_INT 1
32407: DEC
32408: ST_TO_ADDR
32409: LD_VAR 0 6
32413: PUSH
32414: FOR_TO
32415: IFFALSE 33479
// begin if i > 4 then
32417: LD_VAR 0 8
32421: PUSH
32422: LD_INT 4
32424: GREATER
32425: IFFALSE 32429
// break ;
32427: GO 33479
// case i of 1 :
32429: LD_VAR 0 8
32433: PUSH
32434: LD_INT 1
32436: DOUBLE
32437: EQUAL
32438: IFTRUE 32442
32440: GO 32522
32442: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32443: LD_ADDR_VAR 0 12
32447: PUSH
32448: LD_VAR 0 18
32452: PPUSH
32453: LD_INT 22
32455: PUSH
32456: LD_VAR 0 16
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 58
32467: PUSH
32468: EMPTY
32469: LIST
32470: PUSH
32471: LD_INT 2
32473: PUSH
32474: LD_INT 30
32476: PUSH
32477: LD_INT 32
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 30
32486: PUSH
32487: LD_INT 4
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 30
32496: PUSH
32497: LD_INT 5
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: LIST
32514: PPUSH
32515: CALL_OW 72
32519: ST_TO_ADDR
32520: GO 32744
32522: LD_INT 2
32524: DOUBLE
32525: EQUAL
32526: IFTRUE 32530
32528: GO 32592
32530: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32531: LD_ADDR_VAR 0 12
32535: PUSH
32536: LD_VAR 0 18
32540: PPUSH
32541: LD_INT 22
32543: PUSH
32544: LD_VAR 0 16
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 2
32555: PUSH
32556: LD_INT 30
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 30
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: LIST
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PPUSH
32585: CALL_OW 72
32589: ST_TO_ADDR
32590: GO 32744
32592: LD_INT 3
32594: DOUBLE
32595: EQUAL
32596: IFTRUE 32600
32598: GO 32662
32600: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32601: LD_ADDR_VAR 0 12
32605: PUSH
32606: LD_VAR 0 18
32610: PPUSH
32611: LD_INT 22
32613: PUSH
32614: LD_VAR 0 16
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 2
32625: PUSH
32626: LD_INT 30
32628: PUSH
32629: LD_INT 2
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 30
32638: PUSH
32639: LD_INT 3
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: LIST
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PPUSH
32655: CALL_OW 72
32659: ST_TO_ADDR
32660: GO 32744
32662: LD_INT 4
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32743
32670: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32671: LD_ADDR_VAR 0 12
32675: PUSH
32676: LD_VAR 0 18
32680: PPUSH
32681: LD_INT 22
32683: PUSH
32684: LD_VAR 0 16
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 2
32695: PUSH
32696: LD_INT 30
32698: PUSH
32699: LD_INT 6
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 30
32708: PUSH
32709: LD_INT 7
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 30
32718: PUSH
32719: LD_INT 8
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PPUSH
32736: CALL_OW 72
32740: ST_TO_ADDR
32741: GO 32744
32743: POP
// if i = 1 then
32744: LD_VAR 0 8
32748: PUSH
32749: LD_INT 1
32751: EQUAL
32752: IFFALSE 32863
// begin tmp := [ ] ;
32754: LD_ADDR_VAR 0 19
32758: PUSH
32759: EMPTY
32760: ST_TO_ADDR
// for j in f do
32761: LD_ADDR_VAR 0 9
32765: PUSH
32766: LD_VAR 0 12
32770: PUSH
32771: FOR_IN
32772: IFFALSE 32845
// if GetBType ( j ) = b_bunker then
32774: LD_VAR 0 9
32778: PPUSH
32779: CALL_OW 266
32783: PUSH
32784: LD_INT 32
32786: EQUAL
32787: IFFALSE 32814
// tmp := Insert ( tmp , 1 , j ) else
32789: LD_ADDR_VAR 0 19
32793: PUSH
32794: LD_VAR 0 19
32798: PPUSH
32799: LD_INT 1
32801: PPUSH
32802: LD_VAR 0 9
32806: PPUSH
32807: CALL_OW 2
32811: ST_TO_ADDR
32812: GO 32843
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32814: LD_ADDR_VAR 0 19
32818: PUSH
32819: LD_VAR 0 19
32823: PPUSH
32824: LD_VAR 0 19
32828: PUSH
32829: LD_INT 1
32831: PLUS
32832: PPUSH
32833: LD_VAR 0 9
32837: PPUSH
32838: CALL_OW 2
32842: ST_TO_ADDR
32843: GO 32771
32845: POP
32846: POP
// if tmp then
32847: LD_VAR 0 19
32851: IFFALSE 32863
// f := tmp ;
32853: LD_ADDR_VAR 0 12
32857: PUSH
32858: LD_VAR 0 19
32862: ST_TO_ADDR
// end ; x := personel [ i ] ;
32863: LD_ADDR_VAR 0 13
32867: PUSH
32868: LD_VAR 0 6
32872: PUSH
32873: LD_VAR 0 8
32877: ARRAY
32878: ST_TO_ADDR
// if x = - 1 then
32879: LD_VAR 0 13
32883: PUSH
32884: LD_INT 1
32886: NEG
32887: EQUAL
32888: IFFALSE 33097
// begin for j in f do
32890: LD_ADDR_VAR 0 9
32894: PUSH
32895: LD_VAR 0 12
32899: PUSH
32900: FOR_IN
32901: IFFALSE 33093
// repeat InitHc ;
32903: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32907: LD_VAR 0 9
32911: PPUSH
32912: CALL_OW 266
32916: PUSH
32917: LD_INT 5
32919: EQUAL
32920: IFFALSE 32990
// begin if UnitsInside ( j ) < 3 then
32922: LD_VAR 0 9
32926: PPUSH
32927: CALL_OW 313
32931: PUSH
32932: LD_INT 3
32934: LESS
32935: IFFALSE 32971
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32937: LD_INT 0
32939: PPUSH
32940: LD_INT 5
32942: PUSH
32943: LD_INT 8
32945: PUSH
32946: LD_INT 9
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: LIST
32953: PUSH
32954: LD_VAR 0 17
32958: ARRAY
32959: PPUSH
32960: LD_VAR 0 4
32964: PPUSH
32965: CALL_OW 380
32969: GO 32988
// PrepareHuman ( false , i , skill ) ;
32971: LD_INT 0
32973: PPUSH
32974: LD_VAR 0 8
32978: PPUSH
32979: LD_VAR 0 4
32983: PPUSH
32984: CALL_OW 380
// end else
32988: GO 33007
// PrepareHuman ( false , i , skill ) ;
32990: LD_INT 0
32992: PPUSH
32993: LD_VAR 0 8
32997: PPUSH
32998: LD_VAR 0 4
33002: PPUSH
33003: CALL_OW 380
// un := CreateHuman ;
33007: LD_ADDR_VAR 0 14
33011: PUSH
33012: CALL_OW 44
33016: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33017: LD_ADDR_VAR 0 7
33021: PUSH
33022: LD_VAR 0 7
33026: PPUSH
33027: LD_INT 1
33029: PPUSH
33030: LD_VAR 0 14
33034: PPUSH
33035: CALL_OW 2
33039: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33040: LD_VAR 0 14
33044: PPUSH
33045: LD_VAR 0 9
33049: PPUSH
33050: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33054: LD_VAR 0 9
33058: PPUSH
33059: CALL_OW 313
33063: PUSH
33064: LD_INT 6
33066: EQUAL
33067: PUSH
33068: LD_VAR 0 9
33072: PPUSH
33073: CALL_OW 266
33077: PUSH
33078: LD_INT 32
33080: PUSH
33081: LD_INT 31
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: IN
33088: OR
33089: IFFALSE 32903
33091: GO 32900
33093: POP
33094: POP
// end else
33095: GO 33477
// for j = 1 to x do
33097: LD_ADDR_VAR 0 9
33101: PUSH
33102: DOUBLE
33103: LD_INT 1
33105: DEC
33106: ST_TO_ADDR
33107: LD_VAR 0 13
33111: PUSH
33112: FOR_TO
33113: IFFALSE 33475
// begin InitHc ;
33115: CALL_OW 19
// if not f then
33119: LD_VAR 0 12
33123: NOT
33124: IFFALSE 33213
// begin PrepareHuman ( false , i , skill ) ;
33126: LD_INT 0
33128: PPUSH
33129: LD_VAR 0 8
33133: PPUSH
33134: LD_VAR 0 4
33138: PPUSH
33139: CALL_OW 380
// un := CreateHuman ;
33143: LD_ADDR_VAR 0 14
33147: PUSH
33148: CALL_OW 44
33152: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33153: LD_ADDR_VAR 0 7
33157: PUSH
33158: LD_VAR 0 7
33162: PPUSH
33163: LD_INT 1
33165: PPUSH
33166: LD_VAR 0 14
33170: PPUSH
33171: CALL_OW 2
33175: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33176: LD_VAR 0 14
33180: PPUSH
33181: LD_VAR 0 1
33185: PPUSH
33186: CALL_OW 250
33190: PPUSH
33191: LD_VAR 0 1
33195: PPUSH
33196: CALL_OW 251
33200: PPUSH
33201: LD_INT 10
33203: PPUSH
33204: LD_INT 0
33206: PPUSH
33207: CALL_OW 50
// continue ;
33211: GO 33112
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33213: LD_VAR 0 12
33217: PUSH
33218: LD_INT 1
33220: ARRAY
33221: PPUSH
33222: CALL_OW 313
33226: PUSH
33227: LD_VAR 0 12
33231: PUSH
33232: LD_INT 1
33234: ARRAY
33235: PPUSH
33236: CALL_OW 266
33240: PUSH
33241: LD_INT 32
33243: PUSH
33244: LD_INT 31
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: IN
33251: AND
33252: PUSH
33253: LD_VAR 0 12
33257: PUSH
33258: LD_INT 1
33260: ARRAY
33261: PPUSH
33262: CALL_OW 313
33266: PUSH
33267: LD_INT 6
33269: EQUAL
33270: OR
33271: IFFALSE 33291
// f := Delete ( f , 1 ) ;
33273: LD_ADDR_VAR 0 12
33277: PUSH
33278: LD_VAR 0 12
33282: PPUSH
33283: LD_INT 1
33285: PPUSH
33286: CALL_OW 3
33290: ST_TO_ADDR
// if not f then
33291: LD_VAR 0 12
33295: NOT
33296: IFFALSE 33314
// begin x := x + 2 ;
33298: LD_ADDR_VAR 0 13
33302: PUSH
33303: LD_VAR 0 13
33307: PUSH
33308: LD_INT 2
33310: PLUS
33311: ST_TO_ADDR
// continue ;
33312: GO 33112
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33314: LD_VAR 0 12
33318: PUSH
33319: LD_INT 1
33321: ARRAY
33322: PPUSH
33323: CALL_OW 266
33327: PUSH
33328: LD_INT 5
33330: EQUAL
33331: IFFALSE 33405
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33333: LD_VAR 0 12
33337: PUSH
33338: LD_INT 1
33340: ARRAY
33341: PPUSH
33342: CALL_OW 313
33346: PUSH
33347: LD_INT 3
33349: LESS
33350: IFFALSE 33386
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33352: LD_INT 0
33354: PPUSH
33355: LD_INT 5
33357: PUSH
33358: LD_INT 8
33360: PUSH
33361: LD_INT 9
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: LIST
33368: PUSH
33369: LD_VAR 0 17
33373: ARRAY
33374: PPUSH
33375: LD_VAR 0 4
33379: PPUSH
33380: CALL_OW 380
33384: GO 33403
// PrepareHuman ( false , i , skill ) ;
33386: LD_INT 0
33388: PPUSH
33389: LD_VAR 0 8
33393: PPUSH
33394: LD_VAR 0 4
33398: PPUSH
33399: CALL_OW 380
// end else
33403: GO 33422
// PrepareHuman ( false , i , skill ) ;
33405: LD_INT 0
33407: PPUSH
33408: LD_VAR 0 8
33412: PPUSH
33413: LD_VAR 0 4
33417: PPUSH
33418: CALL_OW 380
// un := CreateHuman ;
33422: LD_ADDR_VAR 0 14
33426: PUSH
33427: CALL_OW 44
33431: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33432: LD_ADDR_VAR 0 7
33436: PUSH
33437: LD_VAR 0 7
33441: PPUSH
33442: LD_INT 1
33444: PPUSH
33445: LD_VAR 0 14
33449: PPUSH
33450: CALL_OW 2
33454: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33455: LD_VAR 0 14
33459: PPUSH
33460: LD_VAR 0 12
33464: PUSH
33465: LD_INT 1
33467: ARRAY
33468: PPUSH
33469: CALL_OW 52
// end ;
33473: GO 33112
33475: POP
33476: POP
// end ;
33477: GO 32414
33479: POP
33480: POP
// result := result ^ buildings ;
33481: LD_ADDR_VAR 0 7
33485: PUSH
33486: LD_VAR 0 7
33490: PUSH
33491: LD_VAR 0 18
33495: ADD
33496: ST_TO_ADDR
// end else
33497: GO 33640
// begin for i = 1 to personel do
33499: LD_ADDR_VAR 0 8
33503: PUSH
33504: DOUBLE
33505: LD_INT 1
33507: DEC
33508: ST_TO_ADDR
33509: LD_VAR 0 6
33513: PUSH
33514: FOR_TO
33515: IFFALSE 33638
// begin if i > 4 then
33517: LD_VAR 0 8
33521: PUSH
33522: LD_INT 4
33524: GREATER
33525: IFFALSE 33529
// break ;
33527: GO 33638
// x := personel [ i ] ;
33529: LD_ADDR_VAR 0 13
33533: PUSH
33534: LD_VAR 0 6
33538: PUSH
33539: LD_VAR 0 8
33543: ARRAY
33544: ST_TO_ADDR
// if x = - 1 then
33545: LD_VAR 0 13
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: EQUAL
33554: IFFALSE 33558
// continue ;
33556: GO 33514
// PrepareHuman ( false , i , skill ) ;
33558: LD_INT 0
33560: PPUSH
33561: LD_VAR 0 8
33565: PPUSH
33566: LD_VAR 0 4
33570: PPUSH
33571: CALL_OW 380
// un := CreateHuman ;
33575: LD_ADDR_VAR 0 14
33579: PUSH
33580: CALL_OW 44
33584: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33585: LD_VAR 0 14
33589: PPUSH
33590: LD_VAR 0 1
33594: PPUSH
33595: CALL_OW 250
33599: PPUSH
33600: LD_VAR 0 1
33604: PPUSH
33605: CALL_OW 251
33609: PPUSH
33610: LD_INT 10
33612: PPUSH
33613: LD_INT 0
33615: PPUSH
33616: CALL_OW 50
// result := result ^ un ;
33620: LD_ADDR_VAR 0 7
33624: PUSH
33625: LD_VAR 0 7
33629: PUSH
33630: LD_VAR 0 14
33634: ADD
33635: ST_TO_ADDR
// end ;
33636: GO 33514
33638: POP
33639: POP
// end ; end ;
33640: LD_VAR 0 7
33644: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33645: LD_INT 0
33647: PPUSH
33648: PPUSH
33649: PPUSH
33650: PPUSH
33651: PPUSH
33652: PPUSH
33653: PPUSH
33654: PPUSH
33655: PPUSH
33656: PPUSH
33657: PPUSH
33658: PPUSH
33659: PPUSH
33660: PPUSH
33661: PPUSH
33662: PPUSH
// result := false ;
33663: LD_ADDR_VAR 0 3
33667: PUSH
33668: LD_INT 0
33670: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33671: LD_VAR 0 1
33675: NOT
33676: PUSH
33677: LD_VAR 0 1
33681: PPUSH
33682: CALL_OW 266
33686: PUSH
33687: LD_INT 32
33689: PUSH
33690: LD_INT 33
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: IN
33697: NOT
33698: OR
33699: IFFALSE 33703
// exit ;
33701: GO 34812
// nat := GetNation ( tower ) ;
33703: LD_ADDR_VAR 0 12
33707: PUSH
33708: LD_VAR 0 1
33712: PPUSH
33713: CALL_OW 248
33717: ST_TO_ADDR
// side := GetSide ( tower ) ;
33718: LD_ADDR_VAR 0 16
33722: PUSH
33723: LD_VAR 0 1
33727: PPUSH
33728: CALL_OW 255
33732: ST_TO_ADDR
// x := GetX ( tower ) ;
33733: LD_ADDR_VAR 0 10
33737: PUSH
33738: LD_VAR 0 1
33742: PPUSH
33743: CALL_OW 250
33747: ST_TO_ADDR
// y := GetY ( tower ) ;
33748: LD_ADDR_VAR 0 11
33752: PUSH
33753: LD_VAR 0 1
33757: PPUSH
33758: CALL_OW 251
33762: ST_TO_ADDR
// if not x or not y then
33763: LD_VAR 0 10
33767: NOT
33768: PUSH
33769: LD_VAR 0 11
33773: NOT
33774: OR
33775: IFFALSE 33779
// exit ;
33777: GO 34812
// weapon := 0 ;
33779: LD_ADDR_VAR 0 18
33783: PUSH
33784: LD_INT 0
33786: ST_TO_ADDR
// fac_list := [ ] ;
33787: LD_ADDR_VAR 0 17
33791: PUSH
33792: EMPTY
33793: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33794: LD_ADDR_VAR 0 6
33798: PUSH
33799: LD_VAR 0 1
33803: PPUSH
33804: CALL_OW 274
33808: PPUSH
33809: LD_VAR 0 2
33813: PPUSH
33814: LD_INT 0
33816: PPUSH
33817: CALL 31383 0 3
33821: PPUSH
33822: LD_INT 30
33824: PUSH
33825: LD_INT 3
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PPUSH
33832: CALL_OW 72
33836: ST_TO_ADDR
// if not factories then
33837: LD_VAR 0 6
33841: NOT
33842: IFFALSE 33846
// exit ;
33844: GO 34812
// for i in factories do
33846: LD_ADDR_VAR 0 8
33850: PUSH
33851: LD_VAR 0 6
33855: PUSH
33856: FOR_IN
33857: IFFALSE 33882
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33859: LD_ADDR_VAR 0 17
33863: PUSH
33864: LD_VAR 0 17
33868: PUSH
33869: LD_VAR 0 8
33873: PPUSH
33874: CALL_OW 478
33878: UNION
33879: ST_TO_ADDR
33880: GO 33856
33882: POP
33883: POP
// if not fac_list then
33884: LD_VAR 0 17
33888: NOT
33889: IFFALSE 33893
// exit ;
33891: GO 34812
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33893: LD_ADDR_VAR 0 5
33897: PUSH
33898: LD_INT 4
33900: PUSH
33901: LD_INT 5
33903: PUSH
33904: LD_INT 9
33906: PUSH
33907: LD_INT 10
33909: PUSH
33910: LD_INT 6
33912: PUSH
33913: LD_INT 7
33915: PUSH
33916: LD_INT 11
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 27
33930: PUSH
33931: LD_INT 28
33933: PUSH
33934: LD_INT 26
33936: PUSH
33937: LD_INT 30
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 43
33948: PUSH
33949: LD_INT 44
33951: PUSH
33952: LD_INT 46
33954: PUSH
33955: LD_INT 45
33957: PUSH
33958: LD_INT 47
33960: PUSH
33961: LD_INT 49
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: PUSH
33977: LD_VAR 0 12
33981: ARRAY
33982: ST_TO_ADDR
// list := list isect fac_list ;
33983: LD_ADDR_VAR 0 5
33987: PUSH
33988: LD_VAR 0 5
33992: PUSH
33993: LD_VAR 0 17
33997: ISECT
33998: ST_TO_ADDR
// if not list then
33999: LD_VAR 0 5
34003: NOT
34004: IFFALSE 34008
// exit ;
34006: GO 34812
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34008: LD_VAR 0 12
34012: PUSH
34013: LD_INT 3
34015: EQUAL
34016: PUSH
34017: LD_INT 49
34019: PUSH
34020: LD_VAR 0 5
34024: IN
34025: AND
34026: PUSH
34027: LD_INT 31
34029: PPUSH
34030: LD_VAR 0 16
34034: PPUSH
34035: CALL_OW 321
34039: PUSH
34040: LD_INT 2
34042: EQUAL
34043: AND
34044: IFFALSE 34104
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34046: LD_INT 22
34048: PUSH
34049: LD_VAR 0 16
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 35
34060: PUSH
34061: LD_INT 49
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 91
34070: PUSH
34071: LD_VAR 0 1
34075: PUSH
34076: LD_INT 10
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: LIST
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: PPUSH
34089: CALL_OW 69
34093: NOT
34094: IFFALSE 34104
// weapon := ru_time_lapser ;
34096: LD_ADDR_VAR 0 18
34100: PUSH
34101: LD_INT 49
34103: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34104: LD_VAR 0 12
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: LD_INT 2
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: IN
34119: PUSH
34120: LD_INT 11
34122: PUSH
34123: LD_VAR 0 5
34127: IN
34128: PUSH
34129: LD_INT 30
34131: PUSH
34132: LD_VAR 0 5
34136: IN
34137: OR
34138: AND
34139: PUSH
34140: LD_INT 6
34142: PPUSH
34143: LD_VAR 0 16
34147: PPUSH
34148: CALL_OW 321
34152: PUSH
34153: LD_INT 2
34155: EQUAL
34156: AND
34157: IFFALSE 34322
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34159: LD_INT 22
34161: PUSH
34162: LD_VAR 0 16
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: LD_INT 35
34176: PUSH
34177: LD_INT 11
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 35
34186: PUSH
34187: LD_INT 30
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 91
34201: PUSH
34202: LD_VAR 0 1
34206: PUSH
34207: LD_INT 18
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: LIST
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: PPUSH
34220: CALL_OW 69
34224: NOT
34225: PUSH
34226: LD_INT 22
34228: PUSH
34229: LD_VAR 0 16
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 2
34240: PUSH
34241: LD_INT 30
34243: PUSH
34244: LD_INT 32
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 30
34253: PUSH
34254: LD_INT 33
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 91
34268: PUSH
34269: LD_VAR 0 1
34273: PUSH
34274: LD_INT 12
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: LIST
34286: PUSH
34287: EMPTY
34288: LIST
34289: PPUSH
34290: CALL_OW 69
34294: PUSH
34295: LD_INT 2
34297: GREATER
34298: AND
34299: IFFALSE 34322
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34301: LD_ADDR_VAR 0 18
34305: PUSH
34306: LD_INT 11
34308: PUSH
34309: LD_INT 30
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_VAR 0 12
34320: ARRAY
34321: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34322: LD_VAR 0 18
34326: NOT
34327: PUSH
34328: LD_INT 40
34330: PPUSH
34331: LD_VAR 0 16
34335: PPUSH
34336: CALL_OW 321
34340: PUSH
34341: LD_INT 2
34343: EQUAL
34344: AND
34345: PUSH
34346: LD_INT 7
34348: PUSH
34349: LD_VAR 0 5
34353: IN
34354: PUSH
34355: LD_INT 28
34357: PUSH
34358: LD_VAR 0 5
34362: IN
34363: OR
34364: PUSH
34365: LD_INT 45
34367: PUSH
34368: LD_VAR 0 5
34372: IN
34373: OR
34374: AND
34375: IFFALSE 34629
// begin hex := GetHexInfo ( x , y ) ;
34377: LD_ADDR_VAR 0 4
34381: PUSH
34382: LD_VAR 0 10
34386: PPUSH
34387: LD_VAR 0 11
34391: PPUSH
34392: CALL_OW 546
34396: ST_TO_ADDR
// if hex [ 1 ] then
34397: LD_VAR 0 4
34401: PUSH
34402: LD_INT 1
34404: ARRAY
34405: IFFALSE 34409
// exit ;
34407: GO 34812
// height := hex [ 2 ] ;
34409: LD_ADDR_VAR 0 15
34413: PUSH
34414: LD_VAR 0 4
34418: PUSH
34419: LD_INT 2
34421: ARRAY
34422: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34423: LD_ADDR_VAR 0 14
34427: PUSH
34428: LD_INT 0
34430: PUSH
34431: LD_INT 2
34433: PUSH
34434: LD_INT 3
34436: PUSH
34437: LD_INT 5
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: ST_TO_ADDR
// for i in tmp do
34446: LD_ADDR_VAR 0 8
34450: PUSH
34451: LD_VAR 0 14
34455: PUSH
34456: FOR_IN
34457: IFFALSE 34627
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34459: LD_ADDR_VAR 0 9
34463: PUSH
34464: LD_VAR 0 10
34468: PPUSH
34469: LD_VAR 0 8
34473: PPUSH
34474: LD_INT 5
34476: PPUSH
34477: CALL_OW 272
34481: PUSH
34482: LD_VAR 0 11
34486: PPUSH
34487: LD_VAR 0 8
34491: PPUSH
34492: LD_INT 5
34494: PPUSH
34495: CALL_OW 273
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34504: LD_VAR 0 9
34508: PUSH
34509: LD_INT 1
34511: ARRAY
34512: PPUSH
34513: LD_VAR 0 9
34517: PUSH
34518: LD_INT 2
34520: ARRAY
34521: PPUSH
34522: CALL_OW 488
34526: IFFALSE 34625
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34528: LD_ADDR_VAR 0 4
34532: PUSH
34533: LD_VAR 0 9
34537: PUSH
34538: LD_INT 1
34540: ARRAY
34541: PPUSH
34542: LD_VAR 0 9
34546: PUSH
34547: LD_INT 2
34549: ARRAY
34550: PPUSH
34551: CALL_OW 546
34555: ST_TO_ADDR
// if hex [ 1 ] then
34556: LD_VAR 0 4
34560: PUSH
34561: LD_INT 1
34563: ARRAY
34564: IFFALSE 34568
// continue ;
34566: GO 34456
// h := hex [ 2 ] ;
34568: LD_ADDR_VAR 0 13
34572: PUSH
34573: LD_VAR 0 4
34577: PUSH
34578: LD_INT 2
34580: ARRAY
34581: ST_TO_ADDR
// if h + 7 < height then
34582: LD_VAR 0 13
34586: PUSH
34587: LD_INT 7
34589: PLUS
34590: PUSH
34591: LD_VAR 0 15
34595: LESS
34596: IFFALSE 34625
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34598: LD_ADDR_VAR 0 18
34602: PUSH
34603: LD_INT 7
34605: PUSH
34606: LD_INT 28
34608: PUSH
34609: LD_INT 45
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: PUSH
34617: LD_VAR 0 12
34621: ARRAY
34622: ST_TO_ADDR
// break ;
34623: GO 34627
// end ; end ; end ;
34625: GO 34456
34627: POP
34628: POP
// end ; if not weapon then
34629: LD_VAR 0 18
34633: NOT
34634: IFFALSE 34694
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34636: LD_ADDR_VAR 0 5
34640: PUSH
34641: LD_VAR 0 5
34645: PUSH
34646: LD_INT 11
34648: PUSH
34649: LD_INT 30
34651: PUSH
34652: LD_INT 49
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: LIST
34659: DIFF
34660: ST_TO_ADDR
// if not list then
34661: LD_VAR 0 5
34665: NOT
34666: IFFALSE 34670
// exit ;
34668: GO 34812
// weapon := list [ rand ( 1 , list ) ] ;
34670: LD_ADDR_VAR 0 18
34674: PUSH
34675: LD_VAR 0 5
34679: PUSH
34680: LD_INT 1
34682: PPUSH
34683: LD_VAR 0 5
34687: PPUSH
34688: CALL_OW 12
34692: ARRAY
34693: ST_TO_ADDR
// end ; if weapon then
34694: LD_VAR 0 18
34698: IFFALSE 34812
// begin tmp := CostOfWeapon ( weapon ) ;
34700: LD_ADDR_VAR 0 14
34704: PUSH
34705: LD_VAR 0 18
34709: PPUSH
34710: CALL_OW 451
34714: ST_TO_ADDR
// j := GetBase ( tower ) ;
34715: LD_ADDR_VAR 0 9
34719: PUSH
34720: LD_VAR 0 1
34724: PPUSH
34725: CALL_OW 274
34729: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34730: LD_VAR 0 9
34734: PPUSH
34735: LD_INT 1
34737: PPUSH
34738: CALL_OW 275
34742: PUSH
34743: LD_VAR 0 14
34747: PUSH
34748: LD_INT 1
34750: ARRAY
34751: GREATEREQUAL
34752: PUSH
34753: LD_VAR 0 9
34757: PPUSH
34758: LD_INT 2
34760: PPUSH
34761: CALL_OW 275
34765: PUSH
34766: LD_VAR 0 14
34770: PUSH
34771: LD_INT 2
34773: ARRAY
34774: GREATEREQUAL
34775: AND
34776: PUSH
34777: LD_VAR 0 9
34781: PPUSH
34782: LD_INT 3
34784: PPUSH
34785: CALL_OW 275
34789: PUSH
34790: LD_VAR 0 14
34794: PUSH
34795: LD_INT 3
34797: ARRAY
34798: GREATEREQUAL
34799: AND
34800: IFFALSE 34812
// result := weapon ;
34802: LD_ADDR_VAR 0 3
34806: PUSH
34807: LD_VAR 0 18
34811: ST_TO_ADDR
// end ; end ;
34812: LD_VAR 0 3
34816: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34817: LD_INT 0
34819: PPUSH
34820: PPUSH
// result := true ;
34821: LD_ADDR_VAR 0 3
34825: PUSH
34826: LD_INT 1
34828: ST_TO_ADDR
// if array1 = array2 then
34829: LD_VAR 0 1
34833: PUSH
34834: LD_VAR 0 2
34838: EQUAL
34839: IFFALSE 34899
// begin for i = 1 to array1 do
34841: LD_ADDR_VAR 0 4
34845: PUSH
34846: DOUBLE
34847: LD_INT 1
34849: DEC
34850: ST_TO_ADDR
34851: LD_VAR 0 1
34855: PUSH
34856: FOR_TO
34857: IFFALSE 34895
// if array1 [ i ] <> array2 [ i ] then
34859: LD_VAR 0 1
34863: PUSH
34864: LD_VAR 0 4
34868: ARRAY
34869: PUSH
34870: LD_VAR 0 2
34874: PUSH
34875: LD_VAR 0 4
34879: ARRAY
34880: NONEQUAL
34881: IFFALSE 34893
// begin result := false ;
34883: LD_ADDR_VAR 0 3
34887: PUSH
34888: LD_INT 0
34890: ST_TO_ADDR
// break ;
34891: GO 34895
// end ;
34893: GO 34856
34895: POP
34896: POP
// end else
34897: GO 34907
// result := false ;
34899: LD_ADDR_VAR 0 3
34903: PUSH
34904: LD_INT 0
34906: ST_TO_ADDR
// end ;
34907: LD_VAR 0 3
34911: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34912: LD_INT 0
34914: PPUSH
34915: PPUSH
// if not array1 or not array2 then
34916: LD_VAR 0 1
34920: NOT
34921: PUSH
34922: LD_VAR 0 2
34926: NOT
34927: OR
34928: IFFALSE 34932
// exit ;
34930: GO 34996
// result := true ;
34932: LD_ADDR_VAR 0 3
34936: PUSH
34937: LD_INT 1
34939: ST_TO_ADDR
// for i = 1 to array1 do
34940: LD_ADDR_VAR 0 4
34944: PUSH
34945: DOUBLE
34946: LD_INT 1
34948: DEC
34949: ST_TO_ADDR
34950: LD_VAR 0 1
34954: PUSH
34955: FOR_TO
34956: IFFALSE 34994
// if array1 [ i ] <> array2 [ i ] then
34958: LD_VAR 0 1
34962: PUSH
34963: LD_VAR 0 4
34967: ARRAY
34968: PUSH
34969: LD_VAR 0 2
34973: PUSH
34974: LD_VAR 0 4
34978: ARRAY
34979: NONEQUAL
34980: IFFALSE 34992
// begin result := false ;
34982: LD_ADDR_VAR 0 3
34986: PUSH
34987: LD_INT 0
34989: ST_TO_ADDR
// break ;
34990: GO 34994
// end ;
34992: GO 34955
34994: POP
34995: POP
// end ;
34996: LD_VAR 0 3
35000: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35001: LD_INT 0
35003: PPUSH
35004: PPUSH
35005: PPUSH
// pom := GetBase ( fac ) ;
35006: LD_ADDR_VAR 0 5
35010: PUSH
35011: LD_VAR 0 1
35015: PPUSH
35016: CALL_OW 274
35020: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35021: LD_ADDR_VAR 0 4
35025: PUSH
35026: LD_VAR 0 2
35030: PUSH
35031: LD_INT 1
35033: ARRAY
35034: PPUSH
35035: LD_VAR 0 2
35039: PUSH
35040: LD_INT 2
35042: ARRAY
35043: PPUSH
35044: LD_VAR 0 2
35048: PUSH
35049: LD_INT 3
35051: ARRAY
35052: PPUSH
35053: LD_VAR 0 2
35057: PUSH
35058: LD_INT 4
35060: ARRAY
35061: PPUSH
35062: CALL_OW 449
35066: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35067: LD_ADDR_VAR 0 3
35071: PUSH
35072: LD_VAR 0 5
35076: PPUSH
35077: LD_INT 1
35079: PPUSH
35080: CALL_OW 275
35084: PUSH
35085: LD_VAR 0 4
35089: PUSH
35090: LD_INT 1
35092: ARRAY
35093: GREATEREQUAL
35094: PUSH
35095: LD_VAR 0 5
35099: PPUSH
35100: LD_INT 2
35102: PPUSH
35103: CALL_OW 275
35107: PUSH
35108: LD_VAR 0 4
35112: PUSH
35113: LD_INT 2
35115: ARRAY
35116: GREATEREQUAL
35117: AND
35118: PUSH
35119: LD_VAR 0 5
35123: PPUSH
35124: LD_INT 3
35126: PPUSH
35127: CALL_OW 275
35131: PUSH
35132: LD_VAR 0 4
35136: PUSH
35137: LD_INT 3
35139: ARRAY
35140: GREATEREQUAL
35141: AND
35142: ST_TO_ADDR
// end ;
35143: LD_VAR 0 3
35147: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35148: LD_INT 0
35150: PPUSH
35151: PPUSH
35152: PPUSH
35153: PPUSH
// pom := GetBase ( building ) ;
35154: LD_ADDR_VAR 0 3
35158: PUSH
35159: LD_VAR 0 1
35163: PPUSH
35164: CALL_OW 274
35168: ST_TO_ADDR
// if not pom then
35169: LD_VAR 0 3
35173: NOT
35174: IFFALSE 35178
// exit ;
35176: GO 35348
// btype := GetBType ( building ) ;
35178: LD_ADDR_VAR 0 5
35182: PUSH
35183: LD_VAR 0 1
35187: PPUSH
35188: CALL_OW 266
35192: ST_TO_ADDR
// if btype = b_armoury then
35193: LD_VAR 0 5
35197: PUSH
35198: LD_INT 4
35200: EQUAL
35201: IFFALSE 35211
// btype := b_barracks ;
35203: LD_ADDR_VAR 0 5
35207: PUSH
35208: LD_INT 5
35210: ST_TO_ADDR
// if btype = b_depot then
35211: LD_VAR 0 5
35215: PUSH
35216: LD_INT 0
35218: EQUAL
35219: IFFALSE 35229
// btype := b_warehouse ;
35221: LD_ADDR_VAR 0 5
35225: PUSH
35226: LD_INT 1
35228: ST_TO_ADDR
// if btype = b_workshop then
35229: LD_VAR 0 5
35233: PUSH
35234: LD_INT 2
35236: EQUAL
35237: IFFALSE 35247
// btype := b_factory ;
35239: LD_ADDR_VAR 0 5
35243: PUSH
35244: LD_INT 3
35246: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35247: LD_ADDR_VAR 0 4
35251: PUSH
35252: LD_VAR 0 5
35256: PPUSH
35257: LD_VAR 0 1
35261: PPUSH
35262: CALL_OW 248
35266: PPUSH
35267: CALL_OW 450
35271: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35272: LD_ADDR_VAR 0 2
35276: PUSH
35277: LD_VAR 0 3
35281: PPUSH
35282: LD_INT 1
35284: PPUSH
35285: CALL_OW 275
35289: PUSH
35290: LD_VAR 0 4
35294: PUSH
35295: LD_INT 1
35297: ARRAY
35298: GREATEREQUAL
35299: PUSH
35300: LD_VAR 0 3
35304: PPUSH
35305: LD_INT 2
35307: PPUSH
35308: CALL_OW 275
35312: PUSH
35313: LD_VAR 0 4
35317: PUSH
35318: LD_INT 2
35320: ARRAY
35321: GREATEREQUAL
35322: AND
35323: PUSH
35324: LD_VAR 0 3
35328: PPUSH
35329: LD_INT 3
35331: PPUSH
35332: CALL_OW 275
35336: PUSH
35337: LD_VAR 0 4
35341: PUSH
35342: LD_INT 3
35344: ARRAY
35345: GREATEREQUAL
35346: AND
35347: ST_TO_ADDR
// end ;
35348: LD_VAR 0 2
35352: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35353: LD_INT 0
35355: PPUSH
35356: PPUSH
35357: PPUSH
// pom := GetBase ( building ) ;
35358: LD_ADDR_VAR 0 4
35362: PUSH
35363: LD_VAR 0 1
35367: PPUSH
35368: CALL_OW 274
35372: ST_TO_ADDR
// if not pom then
35373: LD_VAR 0 4
35377: NOT
35378: IFFALSE 35382
// exit ;
35380: GO 35483
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35382: LD_ADDR_VAR 0 5
35386: PUSH
35387: LD_VAR 0 2
35391: PPUSH
35392: LD_VAR 0 1
35396: PPUSH
35397: CALL_OW 248
35401: PPUSH
35402: CALL_OW 450
35406: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35407: LD_ADDR_VAR 0 3
35411: PUSH
35412: LD_VAR 0 4
35416: PPUSH
35417: LD_INT 1
35419: PPUSH
35420: CALL_OW 275
35424: PUSH
35425: LD_VAR 0 5
35429: PUSH
35430: LD_INT 1
35432: ARRAY
35433: GREATEREQUAL
35434: PUSH
35435: LD_VAR 0 4
35439: PPUSH
35440: LD_INT 2
35442: PPUSH
35443: CALL_OW 275
35447: PUSH
35448: LD_VAR 0 5
35452: PUSH
35453: LD_INT 2
35455: ARRAY
35456: GREATEREQUAL
35457: AND
35458: PUSH
35459: LD_VAR 0 4
35463: PPUSH
35464: LD_INT 3
35466: PPUSH
35467: CALL_OW 275
35471: PUSH
35472: LD_VAR 0 5
35476: PUSH
35477: LD_INT 3
35479: ARRAY
35480: GREATEREQUAL
35481: AND
35482: ST_TO_ADDR
// end ;
35483: LD_VAR 0 3
35487: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35488: LD_INT 0
35490: PPUSH
35491: PPUSH
35492: PPUSH
35493: PPUSH
35494: PPUSH
35495: PPUSH
35496: PPUSH
35497: PPUSH
35498: PPUSH
35499: PPUSH
35500: PPUSH
// result := false ;
35501: LD_ADDR_VAR 0 8
35505: PUSH
35506: LD_INT 0
35508: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35509: LD_VAR 0 5
35513: NOT
35514: PUSH
35515: LD_VAR 0 1
35519: NOT
35520: OR
35521: PUSH
35522: LD_VAR 0 2
35526: NOT
35527: OR
35528: PUSH
35529: LD_VAR 0 3
35533: NOT
35534: OR
35535: IFFALSE 35539
// exit ;
35537: GO 36353
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35539: LD_ADDR_VAR 0 14
35543: PUSH
35544: LD_VAR 0 1
35548: PPUSH
35549: LD_VAR 0 2
35553: PPUSH
35554: LD_VAR 0 3
35558: PPUSH
35559: LD_VAR 0 4
35563: PPUSH
35564: LD_VAR 0 5
35568: PUSH
35569: LD_INT 1
35571: ARRAY
35572: PPUSH
35573: CALL_OW 248
35577: PPUSH
35578: LD_INT 0
35580: PPUSH
35581: CALL 37590 0 6
35585: ST_TO_ADDR
// if not hexes then
35586: LD_VAR 0 14
35590: NOT
35591: IFFALSE 35595
// exit ;
35593: GO 36353
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35595: LD_ADDR_VAR 0 17
35599: PUSH
35600: LD_VAR 0 5
35604: PPUSH
35605: LD_INT 22
35607: PUSH
35608: LD_VAR 0 13
35612: PPUSH
35613: CALL_OW 255
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 2
35624: PUSH
35625: LD_INT 30
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 30
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: LIST
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PPUSH
35654: CALL_OW 72
35658: ST_TO_ADDR
// for i = 1 to hexes do
35659: LD_ADDR_VAR 0 9
35663: PUSH
35664: DOUBLE
35665: LD_INT 1
35667: DEC
35668: ST_TO_ADDR
35669: LD_VAR 0 14
35673: PUSH
35674: FOR_TO
35675: IFFALSE 36351
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35677: LD_ADDR_VAR 0 13
35681: PUSH
35682: LD_VAR 0 14
35686: PUSH
35687: LD_VAR 0 9
35691: ARRAY
35692: PUSH
35693: LD_INT 1
35695: ARRAY
35696: PPUSH
35697: LD_VAR 0 14
35701: PUSH
35702: LD_VAR 0 9
35706: ARRAY
35707: PUSH
35708: LD_INT 2
35710: ARRAY
35711: PPUSH
35712: CALL_OW 428
35716: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35717: LD_VAR 0 14
35721: PUSH
35722: LD_VAR 0 9
35726: ARRAY
35727: PUSH
35728: LD_INT 1
35730: ARRAY
35731: PPUSH
35732: LD_VAR 0 14
35736: PUSH
35737: LD_VAR 0 9
35741: ARRAY
35742: PUSH
35743: LD_INT 2
35745: ARRAY
35746: PPUSH
35747: CALL_OW 351
35751: PUSH
35752: LD_VAR 0 14
35756: PUSH
35757: LD_VAR 0 9
35761: ARRAY
35762: PUSH
35763: LD_INT 1
35765: ARRAY
35766: PPUSH
35767: LD_VAR 0 14
35771: PUSH
35772: LD_VAR 0 9
35776: ARRAY
35777: PUSH
35778: LD_INT 2
35780: ARRAY
35781: PPUSH
35782: CALL_OW 488
35786: NOT
35787: OR
35788: PUSH
35789: LD_VAR 0 13
35793: PPUSH
35794: CALL_OW 247
35798: PUSH
35799: LD_INT 3
35801: EQUAL
35802: OR
35803: IFFALSE 35809
// exit ;
35805: POP
35806: POP
35807: GO 36353
// if not tmp then
35809: LD_VAR 0 13
35813: NOT
35814: IFFALSE 35818
// continue ;
35816: GO 35674
// result := true ;
35818: LD_ADDR_VAR 0 8
35822: PUSH
35823: LD_INT 1
35825: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35826: LD_VAR 0 6
35830: PUSH
35831: LD_VAR 0 13
35835: PPUSH
35836: CALL_OW 247
35840: PUSH
35841: LD_INT 2
35843: EQUAL
35844: AND
35845: PUSH
35846: LD_VAR 0 13
35850: PPUSH
35851: CALL_OW 263
35855: PUSH
35856: LD_INT 1
35858: EQUAL
35859: AND
35860: IFFALSE 36024
// begin if IsDrivenBy ( tmp ) then
35862: LD_VAR 0 13
35866: PPUSH
35867: CALL_OW 311
35871: IFFALSE 35875
// continue ;
35873: GO 35674
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35875: LD_VAR 0 6
35879: PPUSH
35880: LD_INT 3
35882: PUSH
35883: LD_INT 60
35885: PUSH
35886: EMPTY
35887: LIST
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 3
35895: PUSH
35896: LD_INT 55
35898: PUSH
35899: EMPTY
35900: LIST
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PPUSH
35910: CALL_OW 72
35914: IFFALSE 36022
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35916: LD_ADDR_VAR 0 18
35920: PUSH
35921: LD_VAR 0 6
35925: PPUSH
35926: LD_INT 3
35928: PUSH
35929: LD_INT 60
35931: PUSH
35932: EMPTY
35933: LIST
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 3
35941: PUSH
35942: LD_INT 55
35944: PUSH
35945: EMPTY
35946: LIST
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PPUSH
35956: CALL_OW 72
35960: PUSH
35961: LD_INT 1
35963: ARRAY
35964: ST_TO_ADDR
// if IsInUnit ( driver ) then
35965: LD_VAR 0 18
35969: PPUSH
35970: CALL_OW 310
35974: IFFALSE 35985
// ComExit ( driver ) ;
35976: LD_VAR 0 18
35980: PPUSH
35981: CALL 61295 0 1
// AddComEnterUnit ( driver , tmp ) ;
35985: LD_VAR 0 18
35989: PPUSH
35990: LD_VAR 0 13
35994: PPUSH
35995: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35999: LD_VAR 0 18
36003: PPUSH
36004: LD_VAR 0 7
36008: PPUSH
36009: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36013: LD_VAR 0 18
36017: PPUSH
36018: CALL_OW 181
// end ; continue ;
36022: GO 35674
// end ; if not cleaners or not tmp in cleaners then
36024: LD_VAR 0 6
36028: NOT
36029: PUSH
36030: LD_VAR 0 13
36034: PUSH
36035: LD_VAR 0 6
36039: IN
36040: NOT
36041: OR
36042: IFFALSE 36349
// begin if dep then
36044: LD_VAR 0 17
36048: IFFALSE 36184
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36050: LD_ADDR_VAR 0 16
36054: PUSH
36055: LD_VAR 0 17
36059: PUSH
36060: LD_INT 1
36062: ARRAY
36063: PPUSH
36064: CALL_OW 250
36068: PPUSH
36069: LD_VAR 0 17
36073: PUSH
36074: LD_INT 1
36076: ARRAY
36077: PPUSH
36078: CALL_OW 254
36082: PPUSH
36083: LD_INT 5
36085: PPUSH
36086: CALL_OW 272
36090: PUSH
36091: LD_VAR 0 17
36095: PUSH
36096: LD_INT 1
36098: ARRAY
36099: PPUSH
36100: CALL_OW 251
36104: PPUSH
36105: LD_VAR 0 17
36109: PUSH
36110: LD_INT 1
36112: ARRAY
36113: PPUSH
36114: CALL_OW 254
36118: PPUSH
36119: LD_INT 5
36121: PPUSH
36122: CALL_OW 273
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36131: LD_VAR 0 16
36135: PUSH
36136: LD_INT 1
36138: ARRAY
36139: PPUSH
36140: LD_VAR 0 16
36144: PUSH
36145: LD_INT 2
36147: ARRAY
36148: PPUSH
36149: CALL_OW 488
36153: IFFALSE 36184
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36155: LD_VAR 0 13
36159: PPUSH
36160: LD_VAR 0 16
36164: PUSH
36165: LD_INT 1
36167: ARRAY
36168: PPUSH
36169: LD_VAR 0 16
36173: PUSH
36174: LD_INT 2
36176: ARRAY
36177: PPUSH
36178: CALL_OW 111
// continue ;
36182: GO 35674
// end ; end ; r := GetDir ( tmp ) ;
36184: LD_ADDR_VAR 0 15
36188: PUSH
36189: LD_VAR 0 13
36193: PPUSH
36194: CALL_OW 254
36198: ST_TO_ADDR
// if r = 5 then
36199: LD_VAR 0 15
36203: PUSH
36204: LD_INT 5
36206: EQUAL
36207: IFFALSE 36217
// r := 0 ;
36209: LD_ADDR_VAR 0 15
36213: PUSH
36214: LD_INT 0
36216: ST_TO_ADDR
// for j = r to 5 do
36217: LD_ADDR_VAR 0 10
36221: PUSH
36222: DOUBLE
36223: LD_VAR 0 15
36227: DEC
36228: ST_TO_ADDR
36229: LD_INT 5
36231: PUSH
36232: FOR_TO
36233: IFFALSE 36347
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36235: LD_ADDR_VAR 0 11
36239: PUSH
36240: LD_VAR 0 13
36244: PPUSH
36245: CALL_OW 250
36249: PPUSH
36250: LD_VAR 0 10
36254: PPUSH
36255: LD_INT 2
36257: PPUSH
36258: CALL_OW 272
36262: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36263: LD_ADDR_VAR 0 12
36267: PUSH
36268: LD_VAR 0 13
36272: PPUSH
36273: CALL_OW 251
36277: PPUSH
36278: LD_VAR 0 10
36282: PPUSH
36283: LD_INT 2
36285: PPUSH
36286: CALL_OW 273
36290: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36291: LD_VAR 0 11
36295: PPUSH
36296: LD_VAR 0 12
36300: PPUSH
36301: CALL_OW 488
36305: PUSH
36306: LD_VAR 0 11
36310: PPUSH
36311: LD_VAR 0 12
36315: PPUSH
36316: CALL_OW 428
36320: NOT
36321: AND
36322: IFFALSE 36345
// begin ComMoveXY ( tmp , _x , _y ) ;
36324: LD_VAR 0 13
36328: PPUSH
36329: LD_VAR 0 11
36333: PPUSH
36334: LD_VAR 0 12
36338: PPUSH
36339: CALL_OW 111
// break ;
36343: GO 36347
// end ; end ;
36345: GO 36232
36347: POP
36348: POP
// end ; end ;
36349: GO 35674
36351: POP
36352: POP
// end ;
36353: LD_VAR 0 8
36357: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36358: LD_INT 0
36360: PPUSH
// result := true ;
36361: LD_ADDR_VAR 0 3
36365: PUSH
36366: LD_INT 1
36368: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36369: LD_VAR 0 2
36373: PUSH
36374: LD_INT 24
36376: DOUBLE
36377: EQUAL
36378: IFTRUE 36388
36380: LD_INT 33
36382: DOUBLE
36383: EQUAL
36384: IFTRUE 36388
36386: GO 36413
36388: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36389: LD_ADDR_VAR 0 3
36393: PUSH
36394: LD_INT 32
36396: PPUSH
36397: LD_VAR 0 1
36401: PPUSH
36402: CALL_OW 321
36406: PUSH
36407: LD_INT 2
36409: EQUAL
36410: ST_TO_ADDR
36411: GO 36733
36413: LD_INT 20
36415: DOUBLE
36416: EQUAL
36417: IFTRUE 36421
36419: GO 36446
36421: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36422: LD_ADDR_VAR 0 3
36426: PUSH
36427: LD_INT 6
36429: PPUSH
36430: LD_VAR 0 1
36434: PPUSH
36435: CALL_OW 321
36439: PUSH
36440: LD_INT 2
36442: EQUAL
36443: ST_TO_ADDR
36444: GO 36733
36446: LD_INT 22
36448: DOUBLE
36449: EQUAL
36450: IFTRUE 36460
36452: LD_INT 36
36454: DOUBLE
36455: EQUAL
36456: IFTRUE 36460
36458: GO 36485
36460: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36461: LD_ADDR_VAR 0 3
36465: PUSH
36466: LD_INT 15
36468: PPUSH
36469: LD_VAR 0 1
36473: PPUSH
36474: CALL_OW 321
36478: PUSH
36479: LD_INT 2
36481: EQUAL
36482: ST_TO_ADDR
36483: GO 36733
36485: LD_INT 30
36487: DOUBLE
36488: EQUAL
36489: IFTRUE 36493
36491: GO 36518
36493: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36494: LD_ADDR_VAR 0 3
36498: PUSH
36499: LD_INT 20
36501: PPUSH
36502: LD_VAR 0 1
36506: PPUSH
36507: CALL_OW 321
36511: PUSH
36512: LD_INT 2
36514: EQUAL
36515: ST_TO_ADDR
36516: GO 36733
36518: LD_INT 28
36520: DOUBLE
36521: EQUAL
36522: IFTRUE 36532
36524: LD_INT 21
36526: DOUBLE
36527: EQUAL
36528: IFTRUE 36532
36530: GO 36557
36532: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36533: LD_ADDR_VAR 0 3
36537: PUSH
36538: LD_INT 21
36540: PPUSH
36541: LD_VAR 0 1
36545: PPUSH
36546: CALL_OW 321
36550: PUSH
36551: LD_INT 2
36553: EQUAL
36554: ST_TO_ADDR
36555: GO 36733
36557: LD_INT 16
36559: DOUBLE
36560: EQUAL
36561: IFTRUE 36565
36563: GO 36592
36565: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36566: LD_ADDR_VAR 0 3
36570: PUSH
36571: LD_EXP 96
36575: PPUSH
36576: LD_VAR 0 1
36580: PPUSH
36581: CALL_OW 321
36585: PUSH
36586: LD_INT 2
36588: EQUAL
36589: ST_TO_ADDR
36590: GO 36733
36592: LD_INT 19
36594: DOUBLE
36595: EQUAL
36596: IFTRUE 36606
36598: LD_INT 23
36600: DOUBLE
36601: EQUAL
36602: IFTRUE 36606
36604: GO 36633
36606: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36607: LD_ADDR_VAR 0 3
36611: PUSH
36612: LD_EXP 95
36616: PPUSH
36617: LD_VAR 0 1
36621: PPUSH
36622: CALL_OW 321
36626: PUSH
36627: LD_INT 2
36629: EQUAL
36630: ST_TO_ADDR
36631: GO 36733
36633: LD_INT 17
36635: DOUBLE
36636: EQUAL
36637: IFTRUE 36641
36639: GO 36666
36641: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36642: LD_ADDR_VAR 0 3
36646: PUSH
36647: LD_INT 39
36649: PPUSH
36650: LD_VAR 0 1
36654: PPUSH
36655: CALL_OW 321
36659: PUSH
36660: LD_INT 2
36662: EQUAL
36663: ST_TO_ADDR
36664: GO 36733
36666: LD_INT 18
36668: DOUBLE
36669: EQUAL
36670: IFTRUE 36674
36672: GO 36699
36674: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36675: LD_ADDR_VAR 0 3
36679: PUSH
36680: LD_INT 40
36682: PPUSH
36683: LD_VAR 0 1
36687: PPUSH
36688: CALL_OW 321
36692: PUSH
36693: LD_INT 2
36695: EQUAL
36696: ST_TO_ADDR
36697: GO 36733
36699: LD_INT 27
36701: DOUBLE
36702: EQUAL
36703: IFTRUE 36707
36705: GO 36732
36707: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36708: LD_ADDR_VAR 0 3
36712: PUSH
36713: LD_INT 35
36715: PPUSH
36716: LD_VAR 0 1
36720: PPUSH
36721: CALL_OW 321
36725: PUSH
36726: LD_INT 2
36728: EQUAL
36729: ST_TO_ADDR
36730: GO 36733
36732: POP
// end ;
36733: LD_VAR 0 3
36737: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36738: LD_INT 0
36740: PPUSH
36741: PPUSH
36742: PPUSH
36743: PPUSH
36744: PPUSH
36745: PPUSH
36746: PPUSH
36747: PPUSH
36748: PPUSH
36749: PPUSH
36750: PPUSH
// result := false ;
36751: LD_ADDR_VAR 0 6
36755: PUSH
36756: LD_INT 0
36758: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36759: LD_VAR 0 1
36763: NOT
36764: PUSH
36765: LD_VAR 0 1
36769: PPUSH
36770: CALL_OW 266
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: LD_INT 1
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: IN
36785: NOT
36786: OR
36787: PUSH
36788: LD_VAR 0 2
36792: NOT
36793: OR
36794: PUSH
36795: LD_VAR 0 5
36799: PUSH
36800: LD_INT 0
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: LD_INT 3
36811: PUSH
36812: LD_INT 4
36814: PUSH
36815: LD_INT 5
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: IN
36826: NOT
36827: OR
36828: PUSH
36829: LD_VAR 0 3
36833: PPUSH
36834: LD_VAR 0 4
36838: PPUSH
36839: CALL_OW 488
36843: NOT
36844: OR
36845: IFFALSE 36849
// exit ;
36847: GO 37585
// side := GetSide ( depot ) ;
36849: LD_ADDR_VAR 0 9
36853: PUSH
36854: LD_VAR 0 1
36858: PPUSH
36859: CALL_OW 255
36863: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36864: LD_VAR 0 9
36868: PPUSH
36869: LD_VAR 0 2
36873: PPUSH
36874: CALL 36358 0 2
36878: NOT
36879: IFFALSE 36883
// exit ;
36881: GO 37585
// pom := GetBase ( depot ) ;
36883: LD_ADDR_VAR 0 10
36887: PUSH
36888: LD_VAR 0 1
36892: PPUSH
36893: CALL_OW 274
36897: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36898: LD_ADDR_VAR 0 11
36902: PUSH
36903: LD_VAR 0 2
36907: PPUSH
36908: LD_VAR 0 1
36912: PPUSH
36913: CALL_OW 248
36917: PPUSH
36918: CALL_OW 450
36922: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36923: LD_VAR 0 10
36927: PPUSH
36928: LD_INT 1
36930: PPUSH
36931: CALL_OW 275
36935: PUSH
36936: LD_VAR 0 11
36940: PUSH
36941: LD_INT 1
36943: ARRAY
36944: GREATEREQUAL
36945: PUSH
36946: LD_VAR 0 10
36950: PPUSH
36951: LD_INT 2
36953: PPUSH
36954: CALL_OW 275
36958: PUSH
36959: LD_VAR 0 11
36963: PUSH
36964: LD_INT 2
36966: ARRAY
36967: GREATEREQUAL
36968: AND
36969: PUSH
36970: LD_VAR 0 10
36974: PPUSH
36975: LD_INT 3
36977: PPUSH
36978: CALL_OW 275
36982: PUSH
36983: LD_VAR 0 11
36987: PUSH
36988: LD_INT 3
36990: ARRAY
36991: GREATEREQUAL
36992: AND
36993: NOT
36994: IFFALSE 36998
// exit ;
36996: GO 37585
// if GetBType ( depot ) = b_depot then
36998: LD_VAR 0 1
37002: PPUSH
37003: CALL_OW 266
37007: PUSH
37008: LD_INT 0
37010: EQUAL
37011: IFFALSE 37023
// dist := 28 else
37013: LD_ADDR_VAR 0 14
37017: PUSH
37018: LD_INT 28
37020: ST_TO_ADDR
37021: GO 37031
// dist := 36 ;
37023: LD_ADDR_VAR 0 14
37027: PUSH
37028: LD_INT 36
37030: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37031: LD_VAR 0 1
37035: PPUSH
37036: LD_VAR 0 3
37040: PPUSH
37041: LD_VAR 0 4
37045: PPUSH
37046: CALL_OW 297
37050: PUSH
37051: LD_VAR 0 14
37055: GREATER
37056: IFFALSE 37060
// exit ;
37058: GO 37585
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37060: LD_ADDR_VAR 0 12
37064: PUSH
37065: LD_VAR 0 2
37069: PPUSH
37070: LD_VAR 0 3
37074: PPUSH
37075: LD_VAR 0 4
37079: PPUSH
37080: LD_VAR 0 5
37084: PPUSH
37085: LD_VAR 0 1
37089: PPUSH
37090: CALL_OW 248
37094: PPUSH
37095: LD_INT 0
37097: PPUSH
37098: CALL 37590 0 6
37102: ST_TO_ADDR
// if not hexes then
37103: LD_VAR 0 12
37107: NOT
37108: IFFALSE 37112
// exit ;
37110: GO 37585
// hex := GetHexInfo ( x , y ) ;
37112: LD_ADDR_VAR 0 15
37116: PUSH
37117: LD_VAR 0 3
37121: PPUSH
37122: LD_VAR 0 4
37126: PPUSH
37127: CALL_OW 546
37131: ST_TO_ADDR
// if hex [ 1 ] then
37132: LD_VAR 0 15
37136: PUSH
37137: LD_INT 1
37139: ARRAY
37140: IFFALSE 37144
// exit ;
37142: GO 37585
// height := hex [ 2 ] ;
37144: LD_ADDR_VAR 0 13
37148: PUSH
37149: LD_VAR 0 15
37153: PUSH
37154: LD_INT 2
37156: ARRAY
37157: ST_TO_ADDR
// for i = 1 to hexes do
37158: LD_ADDR_VAR 0 7
37162: PUSH
37163: DOUBLE
37164: LD_INT 1
37166: DEC
37167: ST_TO_ADDR
37168: LD_VAR 0 12
37172: PUSH
37173: FOR_TO
37174: IFFALSE 37504
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37176: LD_VAR 0 12
37180: PUSH
37181: LD_VAR 0 7
37185: ARRAY
37186: PUSH
37187: LD_INT 1
37189: ARRAY
37190: PPUSH
37191: LD_VAR 0 12
37195: PUSH
37196: LD_VAR 0 7
37200: ARRAY
37201: PUSH
37202: LD_INT 2
37204: ARRAY
37205: PPUSH
37206: CALL_OW 488
37210: NOT
37211: PUSH
37212: LD_VAR 0 12
37216: PUSH
37217: LD_VAR 0 7
37221: ARRAY
37222: PUSH
37223: LD_INT 1
37225: ARRAY
37226: PPUSH
37227: LD_VAR 0 12
37231: PUSH
37232: LD_VAR 0 7
37236: ARRAY
37237: PUSH
37238: LD_INT 2
37240: ARRAY
37241: PPUSH
37242: CALL_OW 428
37246: PUSH
37247: LD_INT 0
37249: GREATER
37250: OR
37251: PUSH
37252: LD_VAR 0 12
37256: PUSH
37257: LD_VAR 0 7
37261: ARRAY
37262: PUSH
37263: LD_INT 1
37265: ARRAY
37266: PPUSH
37267: LD_VAR 0 12
37271: PUSH
37272: LD_VAR 0 7
37276: ARRAY
37277: PUSH
37278: LD_INT 2
37280: ARRAY
37281: PPUSH
37282: CALL_OW 351
37286: OR
37287: IFFALSE 37293
// exit ;
37289: POP
37290: POP
37291: GO 37585
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37293: LD_ADDR_VAR 0 8
37297: PUSH
37298: LD_VAR 0 12
37302: PUSH
37303: LD_VAR 0 7
37307: ARRAY
37308: PUSH
37309: LD_INT 1
37311: ARRAY
37312: PPUSH
37313: LD_VAR 0 12
37317: PUSH
37318: LD_VAR 0 7
37322: ARRAY
37323: PUSH
37324: LD_INT 2
37326: ARRAY
37327: PPUSH
37328: CALL_OW 546
37332: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37333: LD_VAR 0 8
37337: PUSH
37338: LD_INT 1
37340: ARRAY
37341: PUSH
37342: LD_VAR 0 8
37346: PUSH
37347: LD_INT 2
37349: ARRAY
37350: PUSH
37351: LD_VAR 0 13
37355: PUSH
37356: LD_INT 2
37358: PLUS
37359: GREATER
37360: OR
37361: PUSH
37362: LD_VAR 0 8
37366: PUSH
37367: LD_INT 2
37369: ARRAY
37370: PUSH
37371: LD_VAR 0 13
37375: PUSH
37376: LD_INT 2
37378: MINUS
37379: LESS
37380: OR
37381: PUSH
37382: LD_VAR 0 8
37386: PUSH
37387: LD_INT 3
37389: ARRAY
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: LD_INT 8
37396: PUSH
37397: LD_INT 9
37399: PUSH
37400: LD_INT 10
37402: PUSH
37403: LD_INT 11
37405: PUSH
37406: LD_INT 12
37408: PUSH
37409: LD_INT 13
37411: PUSH
37412: LD_INT 16
37414: PUSH
37415: LD_INT 17
37417: PUSH
37418: LD_INT 18
37420: PUSH
37421: LD_INT 19
37423: PUSH
37424: LD_INT 20
37426: PUSH
37427: LD_INT 21
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: IN
37445: NOT
37446: OR
37447: PUSH
37448: LD_VAR 0 8
37452: PUSH
37453: LD_INT 5
37455: ARRAY
37456: NOT
37457: OR
37458: PUSH
37459: LD_VAR 0 8
37463: PUSH
37464: LD_INT 6
37466: ARRAY
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: LD_INT 7
37476: PUSH
37477: LD_INT 9
37479: PUSH
37480: LD_INT 10
37482: PUSH
37483: LD_INT 11
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: IN
37494: NOT
37495: OR
37496: IFFALSE 37502
// exit ;
37498: POP
37499: POP
37500: GO 37585
// end ;
37502: GO 37173
37504: POP
37505: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37506: LD_VAR 0 9
37510: PPUSH
37511: LD_VAR 0 3
37515: PPUSH
37516: LD_VAR 0 4
37520: PPUSH
37521: LD_INT 20
37523: PPUSH
37524: CALL 29531 0 4
37528: PUSH
37529: LD_INT 4
37531: ARRAY
37532: IFFALSE 37536
// exit ;
37534: GO 37585
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37536: LD_VAR 0 2
37540: PUSH
37541: LD_INT 29
37543: PUSH
37544: LD_INT 30
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: IN
37551: PUSH
37552: LD_VAR 0 3
37556: PPUSH
37557: LD_VAR 0 4
37561: PPUSH
37562: LD_VAR 0 9
37566: PPUSH
37567: CALL_OW 440
37571: NOT
37572: AND
37573: IFFALSE 37577
// exit ;
37575: GO 37585
// result := true ;
37577: LD_ADDR_VAR 0 6
37581: PUSH
37582: LD_INT 1
37584: ST_TO_ADDR
// end ;
37585: LD_VAR 0 6
37589: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37590: LD_INT 0
37592: PPUSH
37593: PPUSH
37594: PPUSH
37595: PPUSH
37596: PPUSH
37597: PPUSH
37598: PPUSH
37599: PPUSH
37600: PPUSH
37601: PPUSH
37602: PPUSH
37603: PPUSH
37604: PPUSH
37605: PPUSH
37606: PPUSH
37607: PPUSH
37608: PPUSH
37609: PPUSH
37610: PPUSH
37611: PPUSH
37612: PPUSH
37613: PPUSH
37614: PPUSH
37615: PPUSH
37616: PPUSH
37617: PPUSH
37618: PPUSH
37619: PPUSH
37620: PPUSH
37621: PPUSH
37622: PPUSH
37623: PPUSH
37624: PPUSH
37625: PPUSH
37626: PPUSH
37627: PPUSH
37628: PPUSH
37629: PPUSH
37630: PPUSH
37631: PPUSH
37632: PPUSH
37633: PPUSH
37634: PPUSH
37635: PPUSH
37636: PPUSH
37637: PPUSH
37638: PPUSH
37639: PPUSH
37640: PPUSH
37641: PPUSH
37642: PPUSH
37643: PPUSH
37644: PPUSH
37645: PPUSH
37646: PPUSH
37647: PPUSH
37648: PPUSH
37649: PPUSH
// result = [ ] ;
37650: LD_ADDR_VAR 0 7
37654: PUSH
37655: EMPTY
37656: ST_TO_ADDR
// temp_list = [ ] ;
37657: LD_ADDR_VAR 0 9
37661: PUSH
37662: EMPTY
37663: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37664: LD_VAR 0 4
37668: PUSH
37669: LD_INT 0
37671: PUSH
37672: LD_INT 1
37674: PUSH
37675: LD_INT 2
37677: PUSH
37678: LD_INT 3
37680: PUSH
37681: LD_INT 4
37683: PUSH
37684: LD_INT 5
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: IN
37695: NOT
37696: PUSH
37697: LD_VAR 0 1
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: LD_INT 1
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: IN
37712: PUSH
37713: LD_VAR 0 5
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: LD_INT 2
37723: PUSH
37724: LD_INT 3
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: LIST
37731: IN
37732: NOT
37733: AND
37734: OR
37735: IFFALSE 37739
// exit ;
37737: GO 56130
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37739: LD_VAR 0 1
37743: PUSH
37744: LD_INT 6
37746: PUSH
37747: LD_INT 7
37749: PUSH
37750: LD_INT 8
37752: PUSH
37753: LD_INT 13
37755: PUSH
37756: LD_INT 12
37758: PUSH
37759: LD_INT 15
37761: PUSH
37762: LD_INT 11
37764: PUSH
37765: LD_INT 14
37767: PUSH
37768: LD_INT 10
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: IN
37782: IFFALSE 37792
// btype = b_lab ;
37784: LD_ADDR_VAR 0 1
37788: PUSH
37789: LD_INT 6
37791: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37792: LD_VAR 0 6
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: LD_INT 1
37802: PUSH
37803: LD_INT 2
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: LIST
37810: IN
37811: NOT
37812: PUSH
37813: LD_VAR 0 1
37817: PUSH
37818: LD_INT 0
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: LD_INT 2
37826: PUSH
37827: LD_INT 3
37829: PUSH
37830: LD_INT 6
37832: PUSH
37833: LD_INT 36
37835: PUSH
37836: LD_INT 4
37838: PUSH
37839: LD_INT 5
37841: PUSH
37842: LD_INT 31
37844: PUSH
37845: LD_INT 32
37847: PUSH
37848: LD_INT 33
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: IN
37864: NOT
37865: PUSH
37866: LD_VAR 0 6
37870: PUSH
37871: LD_INT 1
37873: EQUAL
37874: AND
37875: OR
37876: PUSH
37877: LD_VAR 0 1
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: LD_INT 3
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: IN
37892: NOT
37893: PUSH
37894: LD_VAR 0 6
37898: PUSH
37899: LD_INT 2
37901: EQUAL
37902: AND
37903: OR
37904: IFFALSE 37914
// mode = 0 ;
37906: LD_ADDR_VAR 0 6
37910: PUSH
37911: LD_INT 0
37913: ST_TO_ADDR
// case mode of 0 :
37914: LD_VAR 0 6
37918: PUSH
37919: LD_INT 0
37921: DOUBLE
37922: EQUAL
37923: IFTRUE 37927
37925: GO 49380
37927: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37928: LD_ADDR_VAR 0 11
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 0
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: LD_INT 0
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 1
37997: NEG
37998: PUSH
37999: LD_INT 1
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: LD_INT 2
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 0
38021: PUSH
38022: LD_INT 2
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: LD_INT 1
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: LD_INT 1
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: LD_INT 3
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 3
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: LD_INT 2
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38121: LD_ADDR_VAR 0 12
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 2
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 1
38233: NEG
38234: PUSH
38235: LD_INT 1
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: PUSH
38242: LD_INT 2
38244: NEG
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 2
38255: NEG
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 2
38267: NEG
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 3
38278: NEG
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 3
38289: NEG
38290: PUSH
38291: LD_INT 1
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38317: LD_ADDR_VAR 0 13
38321: PUSH
38322: LD_INT 0
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: LD_INT 1
38337: NEG
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 1
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: LD_INT 1
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 1
38375: NEG
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 1
38386: NEG
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: LD_INT 2
38402: NEG
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 2
38410: PUSH
38411: LD_INT 1
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 2
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: NEG
38441: PUSH
38442: LD_INT 1
38444: NEG
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: LD_INT 2
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 2
38464: NEG
38465: PUSH
38466: LD_INT 3
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 3
38476: NEG
38477: PUSH
38478: LD_INT 2
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 3
38488: NEG
38489: PUSH
38490: LD_INT 3
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38516: LD_ADDR_VAR 0 14
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 0
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: NEG
38586: PUSH
38587: LD_INT 1
38589: NEG
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: LD_INT 2
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 1
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 1
38651: NEG
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 1
38662: NEG
38663: PUSH
38664: LD_INT 3
38666: NEG
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: LD_INT 3
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38712: LD_ADDR_VAR 0 15
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 0
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 1
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 2
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 2
38835: NEG
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 2
38846: NEG
38847: PUSH
38848: LD_INT 1
38850: NEG
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 3
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 3
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38905: LD_ADDR_VAR 0 16
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: LD_INT 1
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: LD_INT 1
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 1
38963: NEG
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: NEG
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: LD_INT 2
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: LD_INT 2
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 2
39028: NEG
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: LD_INT 2
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 3
39052: PUSH
39053: LD_INT 2
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 3
39062: PUSH
39063: LD_INT 3
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 2
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39098: LD_ADDR_VAR 0 17
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 1
39167: NEG
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 1
39179: NEG
39180: PUSH
39181: LD_INT 2
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: LD_INT 2
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 2
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: NEG
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 2
39285: NEG
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: NEG
39298: PUSH
39299: LD_INT 2
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39328: LD_ADDR_VAR 0 18
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: LD_INT 2
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: NEG
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: NEG
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 2
39527: NEG
39528: PUSH
39529: LD_INT 2
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39558: LD_ADDR_VAR 0 19
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 0
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 2
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 1
39723: NEG
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 2
39734: NEG
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 2
39745: NEG
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 2
39757: NEG
39758: PUSH
39759: LD_INT 2
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39788: LD_ADDR_VAR 0 20
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: LD_INT 0
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 1
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 1
39857: NEG
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: LD_INT 2
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 1
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: LD_INT 0
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 2
39975: NEG
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: NEG
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40018: LD_ADDR_VAR 0 21
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: LD_INT 1
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: LD_INT 0
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: LD_INT 1
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: LD_INT 2
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 2
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 2
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: LD_INT 2
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: NEG
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 2
40205: NEG
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: NEG
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40248: LD_ADDR_VAR 0 22
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: LD_INT 1
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: LD_INT 2
40333: NEG
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: LD_INT 2
40344: NEG
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 2
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: LD_INT 1
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 1
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: NEG
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 2
40424: NEG
40425: PUSH
40426: LD_INT 0
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 2
40435: NEG
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 2
40447: NEG
40448: PUSH
40449: LD_INT 2
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40478: LD_ADDR_VAR 0 23
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: LD_INT 0
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 1
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 2
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: LD_INT 2
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 0
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: NEG
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: LD_INT 0
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: NEG
40666: PUSH
40667: LD_INT 1
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: LD_INT 2
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 2
40689: NEG
40690: PUSH
40691: LD_INT 3
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: LD_INT 3
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: LD_INT 2
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40758: LD_ADDR_VAR 0 24
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: PUSH
40970: LD_INT 2
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 3
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 3
41001: PUSH
41002: LD_INT 2
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41034: LD_ADDR_VAR 0 25
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: LD_INT 2
41119: NEG
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: LD_INT 2
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 2
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 2
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 0
41189: PUSH
41190: LD_INT 2
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 2
41210: NEG
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 2
41221: NEG
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 2
41233: NEG
41234: PUSH
41235: LD_INT 2
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 3
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 3
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 2
41265: PUSH
41266: LD_INT 3
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: LD_INT 3
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41308: LD_ADDR_VAR 0 26
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 2
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 2
41443: PUSH
41444: LD_INT 2
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 2
41484: NEG
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: LD_INT 3
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 3
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: LD_INT 2
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: NEG
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41584: LD_ADDR_VAR 0 27
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: LD_INT 1
41604: NEG
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 1
41665: NEG
41666: PUSH
41667: LD_INT 2
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 2
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 2
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 2
41783: NEG
41784: PUSH
41785: LD_INT 2
41787: NEG
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: LD_INT 2
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 3
41817: NEG
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 3
41829: NEG
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41864: LD_ADDR_VAR 0 28
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: LD_INT 2
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 2
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 2
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 2
42040: NEG
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 2
42063: NEG
42064: PUSH
42065: LD_INT 2
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: LD_INT 3
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: NEG
42088: PUSH
42089: LD_INT 3
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 3
42099: NEG
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 3
42111: NEG
42112: PUSH
42113: LD_INT 2
42115: NEG
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42146: LD_ADDR_VAR 0 29
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: NEG
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: LD_INT 2
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 2
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: LD_INT 2
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 2
42312: NEG
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: NEG
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 2
42336: NEG
42337: PUSH
42338: LD_INT 3
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 3
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: LD_INT 3
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 3
42390: NEG
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42425: LD_ADDR_VAR 0 30
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: LD_INT 0
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: LD_INT 2
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 2
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 2
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: LD_INT 2
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 2
42591: NEG
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 2
42602: NEG
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: LD_INT 3
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 3
42637: PUSH
42638: LD_INT 2
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 3
42668: NEG
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42703: LD_ADDR_VAR 0 31
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 1
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: NEG
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: NEG
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: LD_INT 3
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 3
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: LD_INT 3
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: LD_INT 2
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 3
42946: NEG
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42981: LD_ADDR_VAR 0 32
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: LD_INT 2
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 2
43147: NEG
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: LD_INT 1
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 3
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: LD_INT 2
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 3
43193: PUSH
43194: LD_INT 2
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: LD_INT 3
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 3
43224: NEG
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43259: LD_ADDR_VAR 0 33
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 1
43328: NEG
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 2
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 2
43363: PUSH
43364: LD_INT 0
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 2
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: NEG
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: LD_INT 2
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: LD_INT 3
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 3
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 3
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 3
43503: NEG
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43538: LD_ADDR_VAR 0 34
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: LD_INT 2
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 2
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: LD_INT 2
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 2
43694: NEG
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: LD_INT 2
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: LD_INT 3
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: LD_INT 2
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 3
43752: PUSH
43753: LD_INT 2
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 2
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 3
43783: NEG
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43818: LD_ADDR_VAR 0 35
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 1
43876: NEG
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 2
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 2
43909: NEG
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43930: LD_ADDR_VAR 0 36
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: LD_INT 1
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: LD_INT 2
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44042: LD_ADDR_VAR 0 37
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44154: LD_ADDR_VAR 0 38
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: NEG
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 1
44223: NEG
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: NEG
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44266: LD_ADDR_VAR 0 39
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 2
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44378: LD_ADDR_VAR 0 40
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44490: LD_ADDR_VAR 0 41
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: LD_INT 2
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: LD_INT 2
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 2
44656: NEG
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: LD_INT 3
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 3
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 3
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 3
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 3
44733: PUSH
44734: LD_INT 3
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: LD_INT 3
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 3
44764: NEG
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 3
44775: NEG
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 3
44787: NEG
44788: PUSH
44789: LD_INT 2
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 3
44799: NEG
44800: PUSH
44801: LD_INT 3
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44840: LD_ADDR_VAR 0 42
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: LD_INT 2
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: LD_INT 2
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 2
45018: NEG
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 2
45030: NEG
45031: PUSH
45032: LD_INT 3
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 3
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: LD_INT 3
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 3
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 3
45086: PUSH
45087: LD_INT 3
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: LD_INT 3
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: LD_INT 3
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 3
45137: NEG
45138: PUSH
45139: LD_INT 2
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 3
45149: NEG
45150: PUSH
45151: LD_INT 3
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45190: LD_ADDR_VAR 0 43
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 1
45297: NEG
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: NEG
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 2
45367: NEG
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 3
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 3
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 3
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 3
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 3
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 3
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 3
45486: NEG
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 3
45497: NEG
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45538: LD_ADDR_VAR 0 44
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: NEG
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: LD_INT 3
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 3
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 3
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 3
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 3
45781: PUSH
45782: LD_INT 3
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: LD_INT 3
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 3
45812: NEG
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 3
45823: NEG
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 3
45835: NEG
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 3
45847: NEG
45848: PUSH
45849: LD_INT 3
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45888: LD_ADDR_VAR 0 45
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: LD_INT 2
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 0
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: NEG
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 2
46078: NEG
46079: PUSH
46080: LD_INT 3
46082: NEG
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: LD_INT 3
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 3
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: LD_INT 2
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 3
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 3
46134: PUSH
46135: LD_INT 3
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 2
46144: PUSH
46145: LD_INT 3
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 3
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 3
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 3
46185: NEG
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 3
46197: NEG
46198: PUSH
46199: LD_INT 3
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46238: LD_ADDR_VAR 0 46
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 2
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 2
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 1
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 3
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: LD_INT 3
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: LD_INT 2
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 3
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 3
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 3
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: LD_INT 3
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: LD_INT 2
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 3
46534: NEG
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 3
46545: NEG
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46586: LD_ADDR_VAR 0 47
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: LD_INT 2
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: LD_INT 2
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: NEG
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46737: LD_ADDR_VAR 0 48
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: LD_INT 2
46822: NEG
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46884: LD_ADDR_VAR 0 49
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 2
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 2
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 2
46996: PUSH
46997: LD_INT 2
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: LD_INT 2
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47028: LD_ADDR_VAR 0 50
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47172: LD_ADDR_VAR 0 51
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: PUSH
47254: LD_INT 2
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47319: LD_ADDR_VAR 0 52
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 2
47423: NEG
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: NEG
47447: PUSH
47448: LD_INT 2
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47470: LD_ADDR_VAR 0 53
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 2
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: NEG
47658: PUSH
47659: LD_INT 1
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: LD_INT 2
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47700: LD_ADDR_VAR 0 54
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: NEG
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: NEG
47900: PUSH
47901: LD_INT 2
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47930: LD_ADDR_VAR 0 55
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 2
48129: NEG
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48160: LD_ADDR_VAR 0 56
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 1
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 2
48256: NEG
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: LD_INT 2
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: LD_INT 2
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48390: LD_ADDR_VAR 0 57
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 2
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: NEG
48567: PUSH
48568: LD_INT 0
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 2
48589: NEG
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48620: LD_ADDR_VAR 0 58
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: LD_INT 0
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: LD_INT 2
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: LD_INT 2
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: LD_INT 1
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: NEG
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: NEG
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: NEG
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: NEG
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48850: LD_ADDR_VAR 0 59
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: NEG
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48938: LD_ADDR_VAR 0 60
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49026: LD_ADDR_VAR 0 61
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: LD_INT 1
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49114: LD_ADDR_VAR 0 62
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: LD_INT 0
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49202: LD_ADDR_VAR 0 63
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49290: LD_ADDR_VAR 0 64
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: ST_TO_ADDR
// end ; 1 :
49378: GO 55275
49380: LD_INT 1
49382: DOUBLE
49383: EQUAL
49384: IFTRUE 49388
49386: GO 52011
49388: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49389: LD_ADDR_VAR 0 11
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 3
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 3
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49433: LD_ADDR_VAR 0 12
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 3
49451: PUSH
49452: LD_INT 0
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: LIST
49473: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49474: LD_ADDR_VAR 0 13
49478: PUSH
49479: LD_INT 3
49481: PUSH
49482: LD_INT 2
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 3
49491: PUSH
49492: LD_INT 3
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: LD_INT 3
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: LIST
49513: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49514: LD_ADDR_VAR 0 14
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 3
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: LIST
49554: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49555: LD_ADDR_VAR 0 15
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 3
49573: NEG
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 3
49584: NEG
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: LIST
49598: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49599: LD_ADDR_VAR 0 16
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: LD_INT 3
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 3
49618: NEG
49619: PUSH
49620: LD_INT 2
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 3
49630: NEG
49631: PUSH
49632: LD_INT 3
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49645: LD_ADDR_VAR 0 17
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: LD_INT 3
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: LD_INT 3
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: LIST
49688: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49689: LD_ADDR_VAR 0 18
49693: PUSH
49694: LD_INT 2
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 3
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 3
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: LIST
49729: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49730: LD_ADDR_VAR 0 19
49734: PUSH
49735: LD_INT 3
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 3
49747: PUSH
49748: LD_INT 3
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: LD_INT 3
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: LIST
49769: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49770: LD_ADDR_VAR 0 20
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 3
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 3
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: LIST
49810: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49811: LD_ADDR_VAR 0 21
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 3
49829: NEG
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 3
49840: NEG
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: LIST
49854: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49855: LD_ADDR_VAR 0 22
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: LD_INT 3
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 3
49874: NEG
49875: PUSH
49876: LD_INT 2
49878: NEG
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 3
49886: NEG
49887: PUSH
49888: LD_INT 3
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: LIST
49900: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49901: LD_ADDR_VAR 0 23
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: LD_INT 4
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: LD_INT 3
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: LIST
49944: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49945: LD_ADDR_VAR 0 24
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 3
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 4
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: LIST
49985: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49986: LD_ADDR_VAR 0 25
49990: PUSH
49991: LD_INT 3
49993: PUSH
49994: LD_INT 3
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 4
50003: PUSH
50004: LD_INT 3
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 3
50013: PUSH
50014: LD_INT 4
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: LIST
50025: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50026: LD_ADDR_VAR 0 26
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 3
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 4
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: LD_INT 3
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: LIST
50066: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50067: LD_ADDR_VAR 0 27
50071: PUSH
50072: LD_INT 3
50074: NEG
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 3
50085: NEG
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 4
50096: NEG
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: LIST
50110: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50111: LD_ADDR_VAR 0 28
50115: PUSH
50116: LD_INT 3
50118: NEG
50119: PUSH
50120: LD_INT 3
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 3
50130: NEG
50131: PUSH
50132: LD_INT 4
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 4
50142: NEG
50143: PUSH
50144: LD_INT 3
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: LIST
50156: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50157: LD_ADDR_VAR 0 29
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: LD_INT 3
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 3
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: LD_INT 4
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: LD_INT 4
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: LD_INT 3
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 5
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 5
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 4
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: LD_INT 6
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 6
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 5
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50312: LD_ADDR_VAR 0 30
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 3
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 3
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 4
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 4
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 4
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 5
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 5
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 5
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 6
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 6
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50455: LD_ADDR_VAR 0 31
50459: PUSH
50460: LD_INT 3
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 3
50472: PUSH
50473: LD_INT 3
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 2
50482: PUSH
50483: LD_INT 3
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 4
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 4
50502: PUSH
50503: LD_INT 4
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: PUSH
50513: LD_INT 4
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 5
50522: PUSH
50523: LD_INT 4
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 5
50532: PUSH
50533: LD_INT 5
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 4
50542: PUSH
50543: LD_INT 5
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 6
50552: PUSH
50553: LD_INT 5
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 6
50562: PUSH
50563: LD_INT 6
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 5
50572: PUSH
50573: LD_INT 6
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50594: LD_ADDR_VAR 0 32
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: LD_INT 3
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: LD_INT 3
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 1
50632: PUSH
50633: LD_INT 4
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: LD_INT 4
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 3
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 5
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 5
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: LD_INT 4
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 6
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 0
50704: PUSH
50705: LD_INT 6
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 5
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50737: LD_ADDR_VAR 0 33
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 3
50755: NEG
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 3
50766: NEG
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 3
50778: NEG
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 4
50789: NEG
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 4
50800: NEG
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 4
50812: NEG
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 5
50823: NEG
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 5
50834: NEG
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 5
50846: NEG
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 6
50857: NEG
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 6
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50892: LD_ADDR_VAR 0 34
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: LD_INT 3
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 3
50911: NEG
50912: PUSH
50913: LD_INT 2
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 3
50923: NEG
50924: PUSH
50925: LD_INT 3
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 3
50935: NEG
50936: PUSH
50937: LD_INT 4
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 4
50947: NEG
50948: PUSH
50949: LD_INT 3
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 4
50959: NEG
50960: PUSH
50961: LD_INT 4
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 4
50971: NEG
50972: PUSH
50973: LD_INT 5
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 5
50983: NEG
50984: PUSH
50985: LD_INT 4
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 5
50995: NEG
50996: PUSH
50997: LD_INT 5
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 5
51007: NEG
51008: PUSH
51009: LD_INT 6
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 6
51019: NEG
51020: PUSH
51021: LD_INT 5
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 6
51031: NEG
51032: PUSH
51033: LD_INT 6
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51055: LD_ADDR_VAR 0 41
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 2
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: LD_INT 3
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: LIST
51098: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51099: LD_ADDR_VAR 0 42
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 3
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: LIST
51139: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51140: LD_ADDR_VAR 0 43
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 3
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: LIST
51179: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51180: LD_ADDR_VAR 0 44
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: LD_INT 2
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: LIST
51220: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51221: LD_ADDR_VAR 0 45
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 3
51250: NEG
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: LIST
51264: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51265: LD_ADDR_VAR 0 46
51269: PUSH
51270: LD_INT 2
51272: NEG
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: NEG
51285: PUSH
51286: LD_INT 3
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 3
51296: NEG
51297: PUSH
51298: LD_INT 2
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: LIST
51310: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51311: LD_ADDR_VAR 0 47
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: LD_INT 3
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: LD_INT 3
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51344: LD_ADDR_VAR 0 48
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51375: LD_ADDR_VAR 0 49
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 3
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51404: LD_ADDR_VAR 0 50
51408: PUSH
51409: LD_INT 2
51411: PUSH
51412: LD_INT 3
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: LD_INT 3
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51433: LD_ADDR_VAR 0 51
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51464: LD_ADDR_VAR 0 52
51468: PUSH
51469: LD_INT 3
51471: NEG
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 3
51483: NEG
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51497: LD_ADDR_VAR 0 53
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: LD_INT 3
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 3
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: LD_INT 2
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: LIST
51540: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51541: LD_ADDR_VAR 0 54
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 3
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 3
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: LIST
51581: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51582: LD_ADDR_VAR 0 55
51586: PUSH
51587: LD_INT 3
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 3
51599: PUSH
51600: LD_INT 3
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: LIST
51621: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51622: LD_ADDR_VAR 0 56
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: LD_INT 3
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: LIST
51662: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51663: LD_ADDR_VAR 0 57
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 3
51692: NEG
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51707: LD_ADDR_VAR 0 58
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: LD_INT 3
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 3
51726: NEG
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 3
51738: NEG
51739: PUSH
51740: LD_INT 3
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51753: LD_ADDR_VAR 0 59
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: LD_INT 2
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: LIST
51796: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51797: LD_ADDR_VAR 0 60
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: LD_INT 1
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51838: LD_ADDR_VAR 0 61
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: LD_INT 2
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: LIST
51877: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51878: LD_ADDR_VAR 0 62
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: LIST
51918: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51919: LD_ADDR_VAR 0 63
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: LIST
51962: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51963: LD_ADDR_VAR 0 64
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: NEG
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: LIST
52008: ST_TO_ADDR
// end ; 2 :
52009: GO 55275
52011: LD_INT 2
52013: DOUBLE
52014: EQUAL
52015: IFTRUE 52019
52017: GO 55274
52019: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52020: LD_ADDR_VAR 0 29
52024: PUSH
52025: LD_INT 4
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 4
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 5
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 5
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 4
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 3
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 3
52088: PUSH
52089: LD_INT 1
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 3
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 5
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 3
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 3
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 4
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 4
52150: PUSH
52151: LD_INT 4
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 3
52160: PUSH
52161: LD_INT 4
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: LD_INT 3
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 2
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 4
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: LD_INT 4
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 4
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 3
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: LD_INT 4
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: LD_INT 5
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 5
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: LD_INT 4
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 3
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: LD_INT 5
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: LD_INT 3
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 3
52303: NEG
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 3
52314: NEG
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: NEG
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 3
52348: NEG
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 4
52359: NEG
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 4
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 4
52382: NEG
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 2
52394: NEG
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 4
52405: NEG
52406: PUSH
52407: LD_INT 4
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 4
52417: NEG
52418: PUSH
52419: LD_INT 5
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 3
52429: NEG
52430: PUSH
52431: LD_INT 4
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 3
52441: NEG
52442: PUSH
52443: LD_INT 3
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 4
52453: NEG
52454: PUSH
52455: LD_INT 3
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 5
52465: NEG
52466: PUSH
52467: LD_INT 4
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 5
52477: NEG
52478: PUSH
52479: LD_INT 5
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 3
52489: NEG
52490: PUSH
52491: LD_INT 5
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 5
52501: NEG
52502: PUSH
52503: LD_INT 3
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52558: LD_ADDR_VAR 0 30
52562: PUSH
52563: LD_INT 4
52565: PUSH
52566: LD_INT 4
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 4
52575: PUSH
52576: LD_INT 3
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 5
52585: PUSH
52586: LD_INT 4
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 5
52595: PUSH
52596: LD_INT 5
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 4
52605: PUSH
52606: LD_INT 5
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 3
52615: PUSH
52616: LD_INT 4
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 3
52625: PUSH
52626: LD_INT 3
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 5
52635: PUSH
52636: LD_INT 3
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: PUSH
52646: LD_INT 5
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: LD_INT 3
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 3
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: LD_INT 4
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 4
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 2
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: LD_INT 4
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 4
52748: NEG
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 4
52759: NEG
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 3
52771: NEG
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 3
52782: NEG
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 4
52793: NEG
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 5
52804: NEG
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 5
52815: NEG
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 5
52827: NEG
52828: PUSH
52829: LD_INT 2
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 3
52839: NEG
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 3
52850: NEG
52851: PUSH
52852: LD_INT 3
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 3
52862: NEG
52863: PUSH
52864: LD_INT 4
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: NEG
52875: PUSH
52876: LD_INT 3
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 3
52898: NEG
52899: PUSH
52900: LD_INT 2
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 4
52910: NEG
52911: PUSH
52912: LD_INT 3
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 4
52922: NEG
52923: PUSH
52924: LD_INT 4
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: LD_INT 4
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 4
52946: NEG
52947: PUSH
52948: LD_INT 2
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 4
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 5
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: LD_INT 4
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 3
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 3
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: LD_INT 4
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 5
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: LD_INT 3
53040: NEG
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: NEG
53049: PUSH
53050: LD_INT 5
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53105: LD_ADDR_VAR 0 31
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: LD_INT 4
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: LD_INT 4
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 5
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: LD_INT 5
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: LD_INT 4
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 3
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: LD_INT 5
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 2
53194: NEG
53195: PUSH
53196: LD_INT 3
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 3
53205: NEG
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: NEG
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 3
53250: NEG
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 4
53261: NEG
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 4
53272: NEG
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 4
53284: NEG
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 4
53307: NEG
53308: PUSH
53309: LD_INT 4
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 4
53319: NEG
53320: PUSH
53321: LD_INT 5
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 3
53331: NEG
53332: PUSH
53333: LD_INT 4
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 3
53343: NEG
53344: PUSH
53345: LD_INT 3
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 4
53355: NEG
53356: PUSH
53357: LD_INT 3
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 5
53367: NEG
53368: PUSH
53369: LD_INT 4
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 5
53379: NEG
53380: PUSH
53381: LD_INT 5
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: NEG
53392: PUSH
53393: LD_INT 5
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 5
53403: NEG
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: LD_INT 3
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 4
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 3
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 3
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: LD_INT 4
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 2
53505: NEG
53506: PUSH
53507: LD_INT 4
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 4
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 4
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 5
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 5
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 4
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 3
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 3
53589: PUSH
53590: LD_INT 2
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 5
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53655: LD_ADDR_VAR 0 32
53659: PUSH
53660: LD_INT 4
53662: NEG
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 4
53673: NEG
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 3
53685: NEG
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 3
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 4
53707: NEG
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 5
53718: NEG
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 5
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 5
53741: NEG
53742: PUSH
53743: LD_INT 2
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 3
53753: NEG
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 3
53764: NEG
53765: PUSH
53766: LD_INT 3
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 3
53776: NEG
53777: PUSH
53778: LD_INT 4
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: LD_INT 3
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 2
53800: NEG
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 3
53812: NEG
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 4
53824: NEG
53825: PUSH
53826: LD_INT 3
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 4
53836: NEG
53837: PUSH
53838: LD_INT 4
53840: NEG
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: LD_INT 4
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 4
53860: NEG
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 4
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 5
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: LD_INT 4
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 3
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 3
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: LD_INT 4
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 5
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: LD_INT 3
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 2
53962: NEG
53963: PUSH
53964: LD_INT 5
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 3
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 3
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 4
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 4
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 3
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 4
54057: PUSH
54058: LD_INT 2
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 4
54067: PUSH
54068: LD_INT 4
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 4
54077: PUSH
54078: LD_INT 3
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 5
54087: PUSH
54088: LD_INT 4
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 5
54097: PUSH
54098: LD_INT 5
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 4
54107: PUSH
54108: LD_INT 5
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 3
54117: PUSH
54118: LD_INT 4
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 3
54127: PUSH
54128: LD_INT 3
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 5
54137: PUSH
54138: LD_INT 3
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 3
54147: PUSH
54148: LD_INT 5
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54202: LD_ADDR_VAR 0 33
54206: PUSH
54207: LD_INT 4
54209: NEG
54210: PUSH
54211: LD_INT 4
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 4
54221: NEG
54222: PUSH
54223: LD_INT 5
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 3
54233: NEG
54234: PUSH
54235: LD_INT 4
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 3
54245: NEG
54246: PUSH
54247: LD_INT 3
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 4
54257: NEG
54258: PUSH
54259: LD_INT 3
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 5
54269: NEG
54270: PUSH
54271: LD_INT 4
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 5
54281: NEG
54282: PUSH
54283: LD_INT 5
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 3
54293: NEG
54294: PUSH
54295: LD_INT 5
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 5
54305: NEG
54306: PUSH
54307: LD_INT 3
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 3
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 4
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: LD_INT 3
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: LD_INT 2
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: LD_INT 3
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: LD_INT 4
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: LD_INT 4
54411: NEG
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 4
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 4
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 5
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 5
54450: PUSH
54451: LD_INT 1
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 4
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 3
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 3
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 3
54491: PUSH
54492: LD_INT 2
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 5
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 3
54512: PUSH
54513: LD_INT 3
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 3
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 4
54532: PUSH
54533: LD_INT 3
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 4
54542: PUSH
54543: LD_INT 4
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 3
54552: PUSH
54553: LD_INT 4
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: LD_INT 3
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 4
54582: PUSH
54583: LD_INT 2
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: LD_INT 4
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: LD_INT 4
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 3
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 4
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: LD_INT 5
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 5
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: LD_INT 4
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 3
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: LD_INT 5
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: LD_INT 3
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54740: LD_ADDR_VAR 0 34
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: LD_INT 4
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 5
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: LD_INT 4
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 3
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: LD_INT 3
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: LD_INT 4
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 5
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 2
54826: PUSH
54827: LD_INT 3
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: LD_INT 5
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 3
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 3
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 4
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 4
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 3
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 2
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 2
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 4
54932: PUSH
54933: LD_INT 2
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 4
54942: PUSH
54943: LD_INT 4
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 4
54952: PUSH
54953: LD_INT 3
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 5
54962: PUSH
54963: LD_INT 4
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 5
54972: PUSH
54973: LD_INT 5
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 4
54982: PUSH
54983: LD_INT 5
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 3
54992: PUSH
54993: LD_INT 4
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 3
55002: PUSH
55003: LD_INT 3
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 5
55012: PUSH
55013: LD_INT 3
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 3
55022: PUSH
55023: LD_INT 5
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 3
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: LD_INT 3
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: LD_INT 4
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 4
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: LD_INT 4
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 4
55125: NEG
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 4
55136: NEG
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 3
55159: NEG
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 4
55170: NEG
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 5
55181: NEG
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 5
55192: NEG
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 5
55204: NEG
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 3
55216: NEG
55217: PUSH
55218: LD_INT 2
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: ST_TO_ADDR
// end ; end ;
55272: GO 55275
55274: POP
// case btype of b_depot , b_warehouse :
55275: LD_VAR 0 1
55279: PUSH
55280: LD_INT 0
55282: DOUBLE
55283: EQUAL
55284: IFTRUE 55294
55286: LD_INT 1
55288: DOUBLE
55289: EQUAL
55290: IFTRUE 55294
55292: GO 55495
55294: POP
// case nation of nation_american :
55295: LD_VAR 0 5
55299: PUSH
55300: LD_INT 1
55302: DOUBLE
55303: EQUAL
55304: IFTRUE 55308
55306: GO 55364
55308: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55309: LD_ADDR_VAR 0 9
55313: PUSH
55314: LD_VAR 0 11
55318: PUSH
55319: LD_VAR 0 12
55323: PUSH
55324: LD_VAR 0 13
55328: PUSH
55329: LD_VAR 0 14
55333: PUSH
55334: LD_VAR 0 15
55338: PUSH
55339: LD_VAR 0 16
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: PUSH
55352: LD_VAR 0 4
55356: PUSH
55357: LD_INT 1
55359: PLUS
55360: ARRAY
55361: ST_TO_ADDR
55362: GO 55493
55364: LD_INT 2
55366: DOUBLE
55367: EQUAL
55368: IFTRUE 55372
55370: GO 55428
55372: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55373: LD_ADDR_VAR 0 9
55377: PUSH
55378: LD_VAR 0 17
55382: PUSH
55383: LD_VAR 0 18
55387: PUSH
55388: LD_VAR 0 19
55392: PUSH
55393: LD_VAR 0 20
55397: PUSH
55398: LD_VAR 0 21
55402: PUSH
55403: LD_VAR 0 22
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: PUSH
55416: LD_VAR 0 4
55420: PUSH
55421: LD_INT 1
55423: PLUS
55424: ARRAY
55425: ST_TO_ADDR
55426: GO 55493
55428: LD_INT 3
55430: DOUBLE
55431: EQUAL
55432: IFTRUE 55436
55434: GO 55492
55436: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55437: LD_ADDR_VAR 0 9
55441: PUSH
55442: LD_VAR 0 23
55446: PUSH
55447: LD_VAR 0 24
55451: PUSH
55452: LD_VAR 0 25
55456: PUSH
55457: LD_VAR 0 26
55461: PUSH
55462: LD_VAR 0 27
55466: PUSH
55467: LD_VAR 0 28
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: PUSH
55480: LD_VAR 0 4
55484: PUSH
55485: LD_INT 1
55487: PLUS
55488: ARRAY
55489: ST_TO_ADDR
55490: GO 55493
55492: POP
55493: GO 56048
55495: LD_INT 2
55497: DOUBLE
55498: EQUAL
55499: IFTRUE 55509
55501: LD_INT 3
55503: DOUBLE
55504: EQUAL
55505: IFTRUE 55509
55507: GO 55565
55509: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55510: LD_ADDR_VAR 0 9
55514: PUSH
55515: LD_VAR 0 29
55519: PUSH
55520: LD_VAR 0 30
55524: PUSH
55525: LD_VAR 0 31
55529: PUSH
55530: LD_VAR 0 32
55534: PUSH
55535: LD_VAR 0 33
55539: PUSH
55540: LD_VAR 0 34
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: PUSH
55553: LD_VAR 0 4
55557: PUSH
55558: LD_INT 1
55560: PLUS
55561: ARRAY
55562: ST_TO_ADDR
55563: GO 56048
55565: LD_INT 16
55567: DOUBLE
55568: EQUAL
55569: IFTRUE 55627
55571: LD_INT 17
55573: DOUBLE
55574: EQUAL
55575: IFTRUE 55627
55577: LD_INT 18
55579: DOUBLE
55580: EQUAL
55581: IFTRUE 55627
55583: LD_INT 19
55585: DOUBLE
55586: EQUAL
55587: IFTRUE 55627
55589: LD_INT 22
55591: DOUBLE
55592: EQUAL
55593: IFTRUE 55627
55595: LD_INT 20
55597: DOUBLE
55598: EQUAL
55599: IFTRUE 55627
55601: LD_INT 21
55603: DOUBLE
55604: EQUAL
55605: IFTRUE 55627
55607: LD_INT 23
55609: DOUBLE
55610: EQUAL
55611: IFTRUE 55627
55613: LD_INT 24
55615: DOUBLE
55616: EQUAL
55617: IFTRUE 55627
55619: LD_INT 25
55621: DOUBLE
55622: EQUAL
55623: IFTRUE 55627
55625: GO 55683
55627: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55628: LD_ADDR_VAR 0 9
55632: PUSH
55633: LD_VAR 0 35
55637: PUSH
55638: LD_VAR 0 36
55642: PUSH
55643: LD_VAR 0 37
55647: PUSH
55648: LD_VAR 0 38
55652: PUSH
55653: LD_VAR 0 39
55657: PUSH
55658: LD_VAR 0 40
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: PUSH
55671: LD_VAR 0 4
55675: PUSH
55676: LD_INT 1
55678: PLUS
55679: ARRAY
55680: ST_TO_ADDR
55681: GO 56048
55683: LD_INT 6
55685: DOUBLE
55686: EQUAL
55687: IFTRUE 55739
55689: LD_INT 7
55691: DOUBLE
55692: EQUAL
55693: IFTRUE 55739
55695: LD_INT 8
55697: DOUBLE
55698: EQUAL
55699: IFTRUE 55739
55701: LD_INT 13
55703: DOUBLE
55704: EQUAL
55705: IFTRUE 55739
55707: LD_INT 12
55709: DOUBLE
55710: EQUAL
55711: IFTRUE 55739
55713: LD_INT 15
55715: DOUBLE
55716: EQUAL
55717: IFTRUE 55739
55719: LD_INT 11
55721: DOUBLE
55722: EQUAL
55723: IFTRUE 55739
55725: LD_INT 14
55727: DOUBLE
55728: EQUAL
55729: IFTRUE 55739
55731: LD_INT 10
55733: DOUBLE
55734: EQUAL
55735: IFTRUE 55739
55737: GO 55795
55739: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55740: LD_ADDR_VAR 0 9
55744: PUSH
55745: LD_VAR 0 41
55749: PUSH
55750: LD_VAR 0 42
55754: PUSH
55755: LD_VAR 0 43
55759: PUSH
55760: LD_VAR 0 44
55764: PUSH
55765: LD_VAR 0 45
55769: PUSH
55770: LD_VAR 0 46
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: PUSH
55783: LD_VAR 0 4
55787: PUSH
55788: LD_INT 1
55790: PLUS
55791: ARRAY
55792: ST_TO_ADDR
55793: GO 56048
55795: LD_INT 36
55797: DOUBLE
55798: EQUAL
55799: IFTRUE 55803
55801: GO 55859
55803: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55804: LD_ADDR_VAR 0 9
55808: PUSH
55809: LD_VAR 0 47
55813: PUSH
55814: LD_VAR 0 48
55818: PUSH
55819: LD_VAR 0 49
55823: PUSH
55824: LD_VAR 0 50
55828: PUSH
55829: LD_VAR 0 51
55833: PUSH
55834: LD_VAR 0 52
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: PUSH
55847: LD_VAR 0 4
55851: PUSH
55852: LD_INT 1
55854: PLUS
55855: ARRAY
55856: ST_TO_ADDR
55857: GO 56048
55859: LD_INT 4
55861: DOUBLE
55862: EQUAL
55863: IFTRUE 55885
55865: LD_INT 5
55867: DOUBLE
55868: EQUAL
55869: IFTRUE 55885
55871: LD_INT 34
55873: DOUBLE
55874: EQUAL
55875: IFTRUE 55885
55877: LD_INT 37
55879: DOUBLE
55880: EQUAL
55881: IFTRUE 55885
55883: GO 55941
55885: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55886: LD_ADDR_VAR 0 9
55890: PUSH
55891: LD_VAR 0 53
55895: PUSH
55896: LD_VAR 0 54
55900: PUSH
55901: LD_VAR 0 55
55905: PUSH
55906: LD_VAR 0 56
55910: PUSH
55911: LD_VAR 0 57
55915: PUSH
55916: LD_VAR 0 58
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: PUSH
55929: LD_VAR 0 4
55933: PUSH
55934: LD_INT 1
55936: PLUS
55937: ARRAY
55938: ST_TO_ADDR
55939: GO 56048
55941: LD_INT 31
55943: DOUBLE
55944: EQUAL
55945: IFTRUE 55991
55947: LD_INT 32
55949: DOUBLE
55950: EQUAL
55951: IFTRUE 55991
55953: LD_INT 33
55955: DOUBLE
55956: EQUAL
55957: IFTRUE 55991
55959: LD_INT 27
55961: DOUBLE
55962: EQUAL
55963: IFTRUE 55991
55965: LD_INT 26
55967: DOUBLE
55968: EQUAL
55969: IFTRUE 55991
55971: LD_INT 28
55973: DOUBLE
55974: EQUAL
55975: IFTRUE 55991
55977: LD_INT 29
55979: DOUBLE
55980: EQUAL
55981: IFTRUE 55991
55983: LD_INT 30
55985: DOUBLE
55986: EQUAL
55987: IFTRUE 55991
55989: GO 56047
55991: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55992: LD_ADDR_VAR 0 9
55996: PUSH
55997: LD_VAR 0 59
56001: PUSH
56002: LD_VAR 0 60
56006: PUSH
56007: LD_VAR 0 61
56011: PUSH
56012: LD_VAR 0 62
56016: PUSH
56017: LD_VAR 0 63
56021: PUSH
56022: LD_VAR 0 64
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: PUSH
56035: LD_VAR 0 4
56039: PUSH
56040: LD_INT 1
56042: PLUS
56043: ARRAY
56044: ST_TO_ADDR
56045: GO 56048
56047: POP
// temp_list2 = [ ] ;
56048: LD_ADDR_VAR 0 10
56052: PUSH
56053: EMPTY
56054: ST_TO_ADDR
// for i in temp_list do
56055: LD_ADDR_VAR 0 8
56059: PUSH
56060: LD_VAR 0 9
56064: PUSH
56065: FOR_IN
56066: IFFALSE 56118
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56068: LD_ADDR_VAR 0 10
56072: PUSH
56073: LD_VAR 0 10
56077: PUSH
56078: LD_VAR 0 8
56082: PUSH
56083: LD_INT 1
56085: ARRAY
56086: PUSH
56087: LD_VAR 0 2
56091: PLUS
56092: PUSH
56093: LD_VAR 0 8
56097: PUSH
56098: LD_INT 2
56100: ARRAY
56101: PUSH
56102: LD_VAR 0 3
56106: PLUS
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: EMPTY
56113: LIST
56114: ADD
56115: ST_TO_ADDR
56116: GO 56065
56118: POP
56119: POP
// result = temp_list2 ;
56120: LD_ADDR_VAR 0 7
56124: PUSH
56125: LD_VAR 0 10
56129: ST_TO_ADDR
// end ;
56130: LD_VAR 0 7
56134: RET
// export function EnemyInRange ( unit , dist ) ; begin
56135: LD_INT 0
56137: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56138: LD_ADDR_VAR 0 3
56142: PUSH
56143: LD_VAR 0 1
56147: PPUSH
56148: CALL_OW 255
56152: PPUSH
56153: LD_VAR 0 1
56157: PPUSH
56158: CALL_OW 250
56162: PPUSH
56163: LD_VAR 0 1
56167: PPUSH
56168: CALL_OW 251
56172: PPUSH
56173: LD_VAR 0 2
56177: PPUSH
56178: CALL 29531 0 4
56182: PUSH
56183: LD_INT 4
56185: ARRAY
56186: ST_TO_ADDR
// end ;
56187: LD_VAR 0 3
56191: RET
// export function PlayerSeeMe ( unit ) ; begin
56192: LD_INT 0
56194: PPUSH
// result := See ( your_side , unit ) ;
56195: LD_ADDR_VAR 0 2
56199: PUSH
56200: LD_OWVAR 2
56204: PPUSH
56205: LD_VAR 0 1
56209: PPUSH
56210: CALL_OW 292
56214: ST_TO_ADDR
// end ;
56215: LD_VAR 0 2
56219: RET
// export function ReverseDir ( unit ) ; begin
56220: LD_INT 0
56222: PPUSH
// if not unit then
56223: LD_VAR 0 1
56227: NOT
56228: IFFALSE 56232
// exit ;
56230: GO 56255
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56232: LD_ADDR_VAR 0 2
56236: PUSH
56237: LD_VAR 0 1
56241: PPUSH
56242: CALL_OW 254
56246: PUSH
56247: LD_INT 3
56249: PLUS
56250: PUSH
56251: LD_INT 6
56253: MOD
56254: ST_TO_ADDR
// end ;
56255: LD_VAR 0 2
56259: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56260: LD_INT 0
56262: PPUSH
56263: PPUSH
56264: PPUSH
56265: PPUSH
56266: PPUSH
// if not hexes then
56267: LD_VAR 0 2
56271: NOT
56272: IFFALSE 56276
// exit ;
56274: GO 56424
// dist := 9999 ;
56276: LD_ADDR_VAR 0 5
56280: PUSH
56281: LD_INT 9999
56283: ST_TO_ADDR
// for i = 1 to hexes do
56284: LD_ADDR_VAR 0 4
56288: PUSH
56289: DOUBLE
56290: LD_INT 1
56292: DEC
56293: ST_TO_ADDR
56294: LD_VAR 0 2
56298: PUSH
56299: FOR_TO
56300: IFFALSE 56412
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56302: LD_VAR 0 1
56306: PPUSH
56307: LD_VAR 0 2
56311: PUSH
56312: LD_VAR 0 4
56316: ARRAY
56317: PUSH
56318: LD_INT 1
56320: ARRAY
56321: PPUSH
56322: LD_VAR 0 2
56326: PUSH
56327: LD_VAR 0 4
56331: ARRAY
56332: PUSH
56333: LD_INT 2
56335: ARRAY
56336: PPUSH
56337: CALL_OW 297
56341: PUSH
56342: LD_VAR 0 5
56346: LESS
56347: IFFALSE 56410
// begin hex := hexes [ i ] ;
56349: LD_ADDR_VAR 0 7
56353: PUSH
56354: LD_VAR 0 2
56358: PUSH
56359: LD_VAR 0 4
56363: ARRAY
56364: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56365: LD_ADDR_VAR 0 5
56369: PUSH
56370: LD_VAR 0 1
56374: PPUSH
56375: LD_VAR 0 2
56379: PUSH
56380: LD_VAR 0 4
56384: ARRAY
56385: PUSH
56386: LD_INT 1
56388: ARRAY
56389: PPUSH
56390: LD_VAR 0 2
56394: PUSH
56395: LD_VAR 0 4
56399: ARRAY
56400: PUSH
56401: LD_INT 2
56403: ARRAY
56404: PPUSH
56405: CALL_OW 297
56409: ST_TO_ADDR
// end ; end ;
56410: GO 56299
56412: POP
56413: POP
// result := hex ;
56414: LD_ADDR_VAR 0 3
56418: PUSH
56419: LD_VAR 0 7
56423: ST_TO_ADDR
// end ;
56424: LD_VAR 0 3
56428: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56429: LD_INT 0
56431: PPUSH
56432: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56433: LD_VAR 0 1
56437: NOT
56438: PUSH
56439: LD_VAR 0 1
56443: PUSH
56444: LD_INT 21
56446: PUSH
56447: LD_INT 2
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 23
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PPUSH
56468: CALL_OW 69
56472: IN
56473: NOT
56474: OR
56475: IFFALSE 56479
// exit ;
56477: GO 56526
// for i = 1 to 3 do
56479: LD_ADDR_VAR 0 3
56483: PUSH
56484: DOUBLE
56485: LD_INT 1
56487: DEC
56488: ST_TO_ADDR
56489: LD_INT 3
56491: PUSH
56492: FOR_TO
56493: IFFALSE 56524
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56495: LD_VAR 0 1
56499: PPUSH
56500: CALL_OW 250
56504: PPUSH
56505: LD_VAR 0 1
56509: PPUSH
56510: CALL_OW 251
56514: PPUSH
56515: LD_INT 1
56517: PPUSH
56518: CALL_OW 453
56522: GO 56492
56524: POP
56525: POP
// end ;
56526: LD_VAR 0 2
56530: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56531: LD_INT 0
56533: PPUSH
56534: PPUSH
56535: PPUSH
56536: PPUSH
56537: PPUSH
56538: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56539: LD_VAR 0 1
56543: NOT
56544: PUSH
56545: LD_VAR 0 2
56549: NOT
56550: OR
56551: PUSH
56552: LD_VAR 0 1
56556: PPUSH
56557: CALL_OW 314
56561: OR
56562: IFFALSE 56566
// exit ;
56564: GO 57007
// x := GetX ( enemy_unit ) ;
56566: LD_ADDR_VAR 0 7
56570: PUSH
56571: LD_VAR 0 2
56575: PPUSH
56576: CALL_OW 250
56580: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56581: LD_ADDR_VAR 0 8
56585: PUSH
56586: LD_VAR 0 2
56590: PPUSH
56591: CALL_OW 251
56595: ST_TO_ADDR
// if not x or not y then
56596: LD_VAR 0 7
56600: NOT
56601: PUSH
56602: LD_VAR 0 8
56606: NOT
56607: OR
56608: IFFALSE 56612
// exit ;
56610: GO 57007
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56612: LD_ADDR_VAR 0 6
56616: PUSH
56617: LD_VAR 0 7
56621: PPUSH
56622: LD_INT 0
56624: PPUSH
56625: LD_INT 4
56627: PPUSH
56628: CALL_OW 272
56632: PUSH
56633: LD_VAR 0 8
56637: PPUSH
56638: LD_INT 0
56640: PPUSH
56641: LD_INT 4
56643: PPUSH
56644: CALL_OW 273
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_VAR 0 7
56657: PPUSH
56658: LD_INT 1
56660: PPUSH
56661: LD_INT 4
56663: PPUSH
56664: CALL_OW 272
56668: PUSH
56669: LD_VAR 0 8
56673: PPUSH
56674: LD_INT 1
56676: PPUSH
56677: LD_INT 4
56679: PPUSH
56680: CALL_OW 273
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_VAR 0 7
56693: PPUSH
56694: LD_INT 2
56696: PPUSH
56697: LD_INT 4
56699: PPUSH
56700: CALL_OW 272
56704: PUSH
56705: LD_VAR 0 8
56709: PPUSH
56710: LD_INT 2
56712: PPUSH
56713: LD_INT 4
56715: PPUSH
56716: CALL_OW 273
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_VAR 0 7
56729: PPUSH
56730: LD_INT 3
56732: PPUSH
56733: LD_INT 4
56735: PPUSH
56736: CALL_OW 272
56740: PUSH
56741: LD_VAR 0 8
56745: PPUSH
56746: LD_INT 3
56748: PPUSH
56749: LD_INT 4
56751: PPUSH
56752: CALL_OW 273
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_VAR 0 7
56765: PPUSH
56766: LD_INT 4
56768: PPUSH
56769: LD_INT 4
56771: PPUSH
56772: CALL_OW 272
56776: PUSH
56777: LD_VAR 0 8
56781: PPUSH
56782: LD_INT 4
56784: PPUSH
56785: LD_INT 4
56787: PPUSH
56788: CALL_OW 273
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_VAR 0 7
56801: PPUSH
56802: LD_INT 5
56804: PPUSH
56805: LD_INT 4
56807: PPUSH
56808: CALL_OW 272
56812: PUSH
56813: LD_VAR 0 8
56817: PPUSH
56818: LD_INT 5
56820: PPUSH
56821: LD_INT 4
56823: PPUSH
56824: CALL_OW 273
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: ST_TO_ADDR
// for i = tmp downto 1 do
56841: LD_ADDR_VAR 0 4
56845: PUSH
56846: DOUBLE
56847: LD_VAR 0 6
56851: INC
56852: ST_TO_ADDR
56853: LD_INT 1
56855: PUSH
56856: FOR_DOWNTO
56857: IFFALSE 56958
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56859: LD_VAR 0 6
56863: PUSH
56864: LD_VAR 0 4
56868: ARRAY
56869: PUSH
56870: LD_INT 1
56872: ARRAY
56873: PPUSH
56874: LD_VAR 0 6
56878: PUSH
56879: LD_VAR 0 4
56883: ARRAY
56884: PUSH
56885: LD_INT 2
56887: ARRAY
56888: PPUSH
56889: CALL_OW 488
56893: NOT
56894: PUSH
56895: LD_VAR 0 6
56899: PUSH
56900: LD_VAR 0 4
56904: ARRAY
56905: PUSH
56906: LD_INT 1
56908: ARRAY
56909: PPUSH
56910: LD_VAR 0 6
56914: PUSH
56915: LD_VAR 0 4
56919: ARRAY
56920: PUSH
56921: LD_INT 2
56923: ARRAY
56924: PPUSH
56925: CALL_OW 428
56929: PUSH
56930: LD_INT 0
56932: NONEQUAL
56933: OR
56934: IFFALSE 56956
// tmp := Delete ( tmp , i ) ;
56936: LD_ADDR_VAR 0 6
56940: PUSH
56941: LD_VAR 0 6
56945: PPUSH
56946: LD_VAR 0 4
56950: PPUSH
56951: CALL_OW 3
56955: ST_TO_ADDR
56956: GO 56856
56958: POP
56959: POP
// j := GetClosestHex ( unit , tmp ) ;
56960: LD_ADDR_VAR 0 5
56964: PUSH
56965: LD_VAR 0 1
56969: PPUSH
56970: LD_VAR 0 6
56974: PPUSH
56975: CALL 56260 0 2
56979: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56980: LD_VAR 0 1
56984: PPUSH
56985: LD_VAR 0 5
56989: PUSH
56990: LD_INT 1
56992: ARRAY
56993: PPUSH
56994: LD_VAR 0 5
56998: PUSH
56999: LD_INT 2
57001: ARRAY
57002: PPUSH
57003: CALL_OW 111
// end ;
57007: LD_VAR 0 3
57011: RET
// export function PrepareApemanSoldier ( ) ; begin
57012: LD_INT 0
57014: PPUSH
// uc_nation := 0 ;
57015: LD_ADDR_OWVAR 21
57019: PUSH
57020: LD_INT 0
57022: ST_TO_ADDR
// hc_sex := sex_male ;
57023: LD_ADDR_OWVAR 27
57027: PUSH
57028: LD_INT 1
57030: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57031: LD_ADDR_OWVAR 28
57035: PUSH
57036: LD_INT 15
57038: ST_TO_ADDR
// hc_gallery :=  ;
57039: LD_ADDR_OWVAR 33
57043: PUSH
57044: LD_STRING 
57046: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57047: LD_ADDR_OWVAR 31
57051: PUSH
57052: LD_INT 0
57054: PPUSH
57055: LD_INT 3
57057: PPUSH
57058: CALL_OW 12
57062: PUSH
57063: LD_INT 0
57065: PPUSH
57066: LD_INT 3
57068: PPUSH
57069: CALL_OW 12
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: ST_TO_ADDR
// end ;
57086: LD_VAR 0 1
57090: RET
// export function PrepareApemanEngineer ( ) ; begin
57091: LD_INT 0
57093: PPUSH
// uc_nation := 0 ;
57094: LD_ADDR_OWVAR 21
57098: PUSH
57099: LD_INT 0
57101: ST_TO_ADDR
// hc_sex := sex_male ;
57102: LD_ADDR_OWVAR 27
57106: PUSH
57107: LD_INT 1
57109: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57110: LD_ADDR_OWVAR 28
57114: PUSH
57115: LD_INT 16
57117: ST_TO_ADDR
// hc_gallery :=  ;
57118: LD_ADDR_OWVAR 33
57122: PUSH
57123: LD_STRING 
57125: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57126: LD_ADDR_OWVAR 31
57130: PUSH
57131: LD_INT 0
57133: PPUSH
57134: LD_INT 3
57136: PPUSH
57137: CALL_OW 12
57141: PUSH
57142: LD_INT 0
57144: PPUSH
57145: LD_INT 3
57147: PPUSH
57148: CALL_OW 12
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: ST_TO_ADDR
// end ;
57165: LD_VAR 0 1
57169: RET
// export function PrepareApeman ( agressivity ) ; begin
57170: LD_INT 0
57172: PPUSH
// uc_side := 0 ;
57173: LD_ADDR_OWVAR 20
57177: PUSH
57178: LD_INT 0
57180: ST_TO_ADDR
// uc_nation := 0 ;
57181: LD_ADDR_OWVAR 21
57185: PUSH
57186: LD_INT 0
57188: ST_TO_ADDR
// hc_sex := sex_male ;
57189: LD_ADDR_OWVAR 27
57193: PUSH
57194: LD_INT 1
57196: ST_TO_ADDR
// hc_class := class_apeman ;
57197: LD_ADDR_OWVAR 28
57201: PUSH
57202: LD_INT 12
57204: ST_TO_ADDR
// hc_gallery :=  ;
57205: LD_ADDR_OWVAR 33
57209: PUSH
57210: LD_STRING 
57212: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57213: LD_ADDR_OWVAR 35
57217: PUSH
57218: LD_VAR 0 1
57222: NEG
57223: PPUSH
57224: LD_VAR 0 1
57228: PPUSH
57229: CALL_OW 12
57233: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57234: LD_ADDR_OWVAR 31
57238: PUSH
57239: LD_INT 0
57241: PPUSH
57242: LD_INT 3
57244: PPUSH
57245: CALL_OW 12
57249: PUSH
57250: LD_INT 0
57252: PPUSH
57253: LD_INT 3
57255: PPUSH
57256: CALL_OW 12
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: ST_TO_ADDR
// end ;
57273: LD_VAR 0 2
57277: RET
// export function PrepareTiger ( agressivity ) ; begin
57278: LD_INT 0
57280: PPUSH
// uc_side := 0 ;
57281: LD_ADDR_OWVAR 20
57285: PUSH
57286: LD_INT 0
57288: ST_TO_ADDR
// uc_nation := 0 ;
57289: LD_ADDR_OWVAR 21
57293: PUSH
57294: LD_INT 0
57296: ST_TO_ADDR
// hc_class := class_tiger ;
57297: LD_ADDR_OWVAR 28
57301: PUSH
57302: LD_INT 14
57304: ST_TO_ADDR
// hc_gallery :=  ;
57305: LD_ADDR_OWVAR 33
57309: PUSH
57310: LD_STRING 
57312: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57313: LD_ADDR_OWVAR 35
57317: PUSH
57318: LD_VAR 0 1
57322: NEG
57323: PPUSH
57324: LD_VAR 0 1
57328: PPUSH
57329: CALL_OW 12
57333: ST_TO_ADDR
// end ;
57334: LD_VAR 0 2
57338: RET
// export function PrepareEnchidna ( ) ; begin
57339: LD_INT 0
57341: PPUSH
// uc_side := 0 ;
57342: LD_ADDR_OWVAR 20
57346: PUSH
57347: LD_INT 0
57349: ST_TO_ADDR
// uc_nation := 0 ;
57350: LD_ADDR_OWVAR 21
57354: PUSH
57355: LD_INT 0
57357: ST_TO_ADDR
// hc_class := class_baggie ;
57358: LD_ADDR_OWVAR 28
57362: PUSH
57363: LD_INT 13
57365: ST_TO_ADDR
// hc_gallery :=  ;
57366: LD_ADDR_OWVAR 33
57370: PUSH
57371: LD_STRING 
57373: ST_TO_ADDR
// end ;
57374: LD_VAR 0 1
57378: RET
// export function PrepareFrog ( ) ; begin
57379: LD_INT 0
57381: PPUSH
// uc_side := 0 ;
57382: LD_ADDR_OWVAR 20
57386: PUSH
57387: LD_INT 0
57389: ST_TO_ADDR
// uc_nation := 0 ;
57390: LD_ADDR_OWVAR 21
57394: PUSH
57395: LD_INT 0
57397: ST_TO_ADDR
// hc_class := class_frog ;
57398: LD_ADDR_OWVAR 28
57402: PUSH
57403: LD_INT 19
57405: ST_TO_ADDR
// hc_gallery :=  ;
57406: LD_ADDR_OWVAR 33
57410: PUSH
57411: LD_STRING 
57413: ST_TO_ADDR
// end ;
57414: LD_VAR 0 1
57418: RET
// export function PrepareFish ( ) ; begin
57419: LD_INT 0
57421: PPUSH
// uc_side := 0 ;
57422: LD_ADDR_OWVAR 20
57426: PUSH
57427: LD_INT 0
57429: ST_TO_ADDR
// uc_nation := 0 ;
57430: LD_ADDR_OWVAR 21
57434: PUSH
57435: LD_INT 0
57437: ST_TO_ADDR
// hc_class := class_fish ;
57438: LD_ADDR_OWVAR 28
57442: PUSH
57443: LD_INT 20
57445: ST_TO_ADDR
// hc_gallery :=  ;
57446: LD_ADDR_OWVAR 33
57450: PUSH
57451: LD_STRING 
57453: ST_TO_ADDR
// end ;
57454: LD_VAR 0 1
57458: RET
// export function PrepareBird ( ) ; begin
57459: LD_INT 0
57461: PPUSH
// uc_side := 0 ;
57462: LD_ADDR_OWVAR 20
57466: PUSH
57467: LD_INT 0
57469: ST_TO_ADDR
// uc_nation := 0 ;
57470: LD_ADDR_OWVAR 21
57474: PUSH
57475: LD_INT 0
57477: ST_TO_ADDR
// hc_class := class_phororhacos ;
57478: LD_ADDR_OWVAR 28
57482: PUSH
57483: LD_INT 18
57485: ST_TO_ADDR
// hc_gallery :=  ;
57486: LD_ADDR_OWVAR 33
57490: PUSH
57491: LD_STRING 
57493: ST_TO_ADDR
// end ;
57494: LD_VAR 0 1
57498: RET
// export function PrepareHorse ( ) ; begin
57499: LD_INT 0
57501: PPUSH
// uc_side := 0 ;
57502: LD_ADDR_OWVAR 20
57506: PUSH
57507: LD_INT 0
57509: ST_TO_ADDR
// uc_nation := 0 ;
57510: LD_ADDR_OWVAR 21
57514: PUSH
57515: LD_INT 0
57517: ST_TO_ADDR
// hc_class := class_horse ;
57518: LD_ADDR_OWVAR 28
57522: PUSH
57523: LD_INT 21
57525: ST_TO_ADDR
// hc_gallery :=  ;
57526: LD_ADDR_OWVAR 33
57530: PUSH
57531: LD_STRING 
57533: ST_TO_ADDR
// end ;
57534: LD_VAR 0 1
57538: RET
// export function PrepareMastodont ( ) ; begin
57539: LD_INT 0
57541: PPUSH
// uc_side := 0 ;
57542: LD_ADDR_OWVAR 20
57546: PUSH
57547: LD_INT 0
57549: ST_TO_ADDR
// uc_nation := 0 ;
57550: LD_ADDR_OWVAR 21
57554: PUSH
57555: LD_INT 0
57557: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57558: LD_ADDR_OWVAR 37
57562: PUSH
57563: LD_INT 31
57565: ST_TO_ADDR
// vc_control := control_rider ;
57566: LD_ADDR_OWVAR 38
57570: PUSH
57571: LD_INT 4
57573: ST_TO_ADDR
// end ;
57574: LD_VAR 0 1
57578: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57579: LD_INT 0
57581: PPUSH
57582: PPUSH
57583: PPUSH
// uc_side = 0 ;
57584: LD_ADDR_OWVAR 20
57588: PUSH
57589: LD_INT 0
57591: ST_TO_ADDR
// uc_nation = 0 ;
57592: LD_ADDR_OWVAR 21
57596: PUSH
57597: LD_INT 0
57599: ST_TO_ADDR
// InitHc_All ( ) ;
57600: CALL_OW 584
// InitVc ;
57604: CALL_OW 20
// if mastodonts then
57608: LD_VAR 0 6
57612: IFFALSE 57679
// for i = 1 to mastodonts do
57614: LD_ADDR_VAR 0 11
57618: PUSH
57619: DOUBLE
57620: LD_INT 1
57622: DEC
57623: ST_TO_ADDR
57624: LD_VAR 0 6
57628: PUSH
57629: FOR_TO
57630: IFFALSE 57677
// begin vc_chassis := 31 ;
57632: LD_ADDR_OWVAR 37
57636: PUSH
57637: LD_INT 31
57639: ST_TO_ADDR
// vc_control := control_rider ;
57640: LD_ADDR_OWVAR 38
57644: PUSH
57645: LD_INT 4
57647: ST_TO_ADDR
// animal := CreateVehicle ;
57648: LD_ADDR_VAR 0 12
57652: PUSH
57653: CALL_OW 45
57657: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57658: LD_VAR 0 12
57662: PPUSH
57663: LD_VAR 0 8
57667: PPUSH
57668: LD_INT 0
57670: PPUSH
57671: CALL 59814 0 3
// end ;
57675: GO 57629
57677: POP
57678: POP
// if horses then
57679: LD_VAR 0 5
57683: IFFALSE 57750
// for i = 1 to horses do
57685: LD_ADDR_VAR 0 11
57689: PUSH
57690: DOUBLE
57691: LD_INT 1
57693: DEC
57694: ST_TO_ADDR
57695: LD_VAR 0 5
57699: PUSH
57700: FOR_TO
57701: IFFALSE 57748
// begin hc_class := 21 ;
57703: LD_ADDR_OWVAR 28
57707: PUSH
57708: LD_INT 21
57710: ST_TO_ADDR
// hc_gallery :=  ;
57711: LD_ADDR_OWVAR 33
57715: PUSH
57716: LD_STRING 
57718: ST_TO_ADDR
// animal := CreateHuman ;
57719: LD_ADDR_VAR 0 12
57723: PUSH
57724: CALL_OW 44
57728: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57729: LD_VAR 0 12
57733: PPUSH
57734: LD_VAR 0 8
57738: PPUSH
57739: LD_INT 0
57741: PPUSH
57742: CALL 59814 0 3
// end ;
57746: GO 57700
57748: POP
57749: POP
// if birds then
57750: LD_VAR 0 1
57754: IFFALSE 57821
// for i = 1 to birds do
57756: LD_ADDR_VAR 0 11
57760: PUSH
57761: DOUBLE
57762: LD_INT 1
57764: DEC
57765: ST_TO_ADDR
57766: LD_VAR 0 1
57770: PUSH
57771: FOR_TO
57772: IFFALSE 57819
// begin hc_class = 18 ;
57774: LD_ADDR_OWVAR 28
57778: PUSH
57779: LD_INT 18
57781: ST_TO_ADDR
// hc_gallery =  ;
57782: LD_ADDR_OWVAR 33
57786: PUSH
57787: LD_STRING 
57789: ST_TO_ADDR
// animal := CreateHuman ;
57790: LD_ADDR_VAR 0 12
57794: PUSH
57795: CALL_OW 44
57799: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57800: LD_VAR 0 12
57804: PPUSH
57805: LD_VAR 0 8
57809: PPUSH
57810: LD_INT 0
57812: PPUSH
57813: CALL 59814 0 3
// end ;
57817: GO 57771
57819: POP
57820: POP
// if tigers then
57821: LD_VAR 0 2
57825: IFFALSE 57909
// for i = 1 to tigers do
57827: LD_ADDR_VAR 0 11
57831: PUSH
57832: DOUBLE
57833: LD_INT 1
57835: DEC
57836: ST_TO_ADDR
57837: LD_VAR 0 2
57841: PUSH
57842: FOR_TO
57843: IFFALSE 57907
// begin hc_class = class_tiger ;
57845: LD_ADDR_OWVAR 28
57849: PUSH
57850: LD_INT 14
57852: ST_TO_ADDR
// hc_gallery =  ;
57853: LD_ADDR_OWVAR 33
57857: PUSH
57858: LD_STRING 
57860: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57861: LD_ADDR_OWVAR 35
57865: PUSH
57866: LD_INT 7
57868: NEG
57869: PPUSH
57870: LD_INT 7
57872: PPUSH
57873: CALL_OW 12
57877: ST_TO_ADDR
// animal := CreateHuman ;
57878: LD_ADDR_VAR 0 12
57882: PUSH
57883: CALL_OW 44
57887: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57888: LD_VAR 0 12
57892: PPUSH
57893: LD_VAR 0 8
57897: PPUSH
57898: LD_INT 0
57900: PPUSH
57901: CALL 59814 0 3
// end ;
57905: GO 57842
57907: POP
57908: POP
// if apemans then
57909: LD_VAR 0 3
57913: IFFALSE 58036
// for i = 1 to apemans do
57915: LD_ADDR_VAR 0 11
57919: PUSH
57920: DOUBLE
57921: LD_INT 1
57923: DEC
57924: ST_TO_ADDR
57925: LD_VAR 0 3
57929: PUSH
57930: FOR_TO
57931: IFFALSE 58034
// begin hc_class = class_apeman ;
57933: LD_ADDR_OWVAR 28
57937: PUSH
57938: LD_INT 12
57940: ST_TO_ADDR
// hc_gallery =  ;
57941: LD_ADDR_OWVAR 33
57945: PUSH
57946: LD_STRING 
57948: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57949: LD_ADDR_OWVAR 35
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PPUSH
57958: LD_INT 2
57960: PPUSH
57961: CALL_OW 12
57965: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57966: LD_ADDR_OWVAR 31
57970: PUSH
57971: LD_INT 1
57973: PPUSH
57974: LD_INT 3
57976: PPUSH
57977: CALL_OW 12
57981: PUSH
57982: LD_INT 1
57984: PPUSH
57985: LD_INT 3
57987: PPUSH
57988: CALL_OW 12
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: ST_TO_ADDR
// animal := CreateHuman ;
58005: LD_ADDR_VAR 0 12
58009: PUSH
58010: CALL_OW 44
58014: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58015: LD_VAR 0 12
58019: PPUSH
58020: LD_VAR 0 8
58024: PPUSH
58025: LD_INT 0
58027: PPUSH
58028: CALL 59814 0 3
// end ;
58032: GO 57930
58034: POP
58035: POP
// if enchidnas then
58036: LD_VAR 0 4
58040: IFFALSE 58107
// for i = 1 to enchidnas do
58042: LD_ADDR_VAR 0 11
58046: PUSH
58047: DOUBLE
58048: LD_INT 1
58050: DEC
58051: ST_TO_ADDR
58052: LD_VAR 0 4
58056: PUSH
58057: FOR_TO
58058: IFFALSE 58105
// begin hc_class = 13 ;
58060: LD_ADDR_OWVAR 28
58064: PUSH
58065: LD_INT 13
58067: ST_TO_ADDR
// hc_gallery =  ;
58068: LD_ADDR_OWVAR 33
58072: PUSH
58073: LD_STRING 
58075: ST_TO_ADDR
// animal := CreateHuman ;
58076: LD_ADDR_VAR 0 12
58080: PUSH
58081: CALL_OW 44
58085: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58086: LD_VAR 0 12
58090: PPUSH
58091: LD_VAR 0 8
58095: PPUSH
58096: LD_INT 0
58098: PPUSH
58099: CALL 59814 0 3
// end ;
58103: GO 58057
58105: POP
58106: POP
// if fishes then
58107: LD_VAR 0 7
58111: IFFALSE 58178
// for i = 1 to fishes do
58113: LD_ADDR_VAR 0 11
58117: PUSH
58118: DOUBLE
58119: LD_INT 1
58121: DEC
58122: ST_TO_ADDR
58123: LD_VAR 0 7
58127: PUSH
58128: FOR_TO
58129: IFFALSE 58176
// begin hc_class = 20 ;
58131: LD_ADDR_OWVAR 28
58135: PUSH
58136: LD_INT 20
58138: ST_TO_ADDR
// hc_gallery =  ;
58139: LD_ADDR_OWVAR 33
58143: PUSH
58144: LD_STRING 
58146: ST_TO_ADDR
// animal := CreateHuman ;
58147: LD_ADDR_VAR 0 12
58151: PUSH
58152: CALL_OW 44
58156: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58157: LD_VAR 0 12
58161: PPUSH
58162: LD_VAR 0 9
58166: PPUSH
58167: LD_INT 0
58169: PPUSH
58170: CALL 59814 0 3
// end ;
58174: GO 58128
58176: POP
58177: POP
// end ;
58178: LD_VAR 0 10
58182: RET
// export function WantHeal ( sci , unit ) ; begin
58183: LD_INT 0
58185: PPUSH
// if GetTaskList ( sci ) > 0 then
58186: LD_VAR 0 1
58190: PPUSH
58191: CALL_OW 437
58195: PUSH
58196: LD_INT 0
58198: GREATER
58199: IFFALSE 58269
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58201: LD_VAR 0 1
58205: PPUSH
58206: CALL_OW 437
58210: PUSH
58211: LD_INT 1
58213: ARRAY
58214: PUSH
58215: LD_INT 1
58217: ARRAY
58218: PUSH
58219: LD_STRING l
58221: EQUAL
58222: PUSH
58223: LD_VAR 0 1
58227: PPUSH
58228: CALL_OW 437
58232: PUSH
58233: LD_INT 1
58235: ARRAY
58236: PUSH
58237: LD_INT 4
58239: ARRAY
58240: PUSH
58241: LD_VAR 0 2
58245: EQUAL
58246: AND
58247: IFFALSE 58259
// result := true else
58249: LD_ADDR_VAR 0 3
58253: PUSH
58254: LD_INT 1
58256: ST_TO_ADDR
58257: GO 58267
// result := false ;
58259: LD_ADDR_VAR 0 3
58263: PUSH
58264: LD_INT 0
58266: ST_TO_ADDR
// end else
58267: GO 58277
// result := false ;
58269: LD_ADDR_VAR 0 3
58273: PUSH
58274: LD_INT 0
58276: ST_TO_ADDR
// end ;
58277: LD_VAR 0 3
58281: RET
// export function HealTarget ( sci ) ; begin
58282: LD_INT 0
58284: PPUSH
// if not sci then
58285: LD_VAR 0 1
58289: NOT
58290: IFFALSE 58294
// exit ;
58292: GO 58359
// result := 0 ;
58294: LD_ADDR_VAR 0 2
58298: PUSH
58299: LD_INT 0
58301: ST_TO_ADDR
// if GetTaskList ( sci ) then
58302: LD_VAR 0 1
58306: PPUSH
58307: CALL_OW 437
58311: IFFALSE 58359
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58313: LD_VAR 0 1
58317: PPUSH
58318: CALL_OW 437
58322: PUSH
58323: LD_INT 1
58325: ARRAY
58326: PUSH
58327: LD_INT 1
58329: ARRAY
58330: PUSH
58331: LD_STRING l
58333: EQUAL
58334: IFFALSE 58359
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58336: LD_ADDR_VAR 0 2
58340: PUSH
58341: LD_VAR 0 1
58345: PPUSH
58346: CALL_OW 437
58350: PUSH
58351: LD_INT 1
58353: ARRAY
58354: PUSH
58355: LD_INT 4
58357: ARRAY
58358: ST_TO_ADDR
// end ;
58359: LD_VAR 0 2
58363: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58364: LD_INT 0
58366: PPUSH
58367: PPUSH
58368: PPUSH
58369: PPUSH
// if not base_units then
58370: LD_VAR 0 1
58374: NOT
58375: IFFALSE 58379
// exit ;
58377: GO 58466
// result := false ;
58379: LD_ADDR_VAR 0 2
58383: PUSH
58384: LD_INT 0
58386: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58387: LD_ADDR_VAR 0 5
58391: PUSH
58392: LD_VAR 0 1
58396: PPUSH
58397: LD_INT 21
58399: PUSH
58400: LD_INT 3
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PPUSH
58407: CALL_OW 72
58411: ST_TO_ADDR
// if not tmp then
58412: LD_VAR 0 5
58416: NOT
58417: IFFALSE 58421
// exit ;
58419: GO 58466
// for i in tmp do
58421: LD_ADDR_VAR 0 3
58425: PUSH
58426: LD_VAR 0 5
58430: PUSH
58431: FOR_IN
58432: IFFALSE 58464
// begin result := EnemyInRange ( i , 22 ) ;
58434: LD_ADDR_VAR 0 2
58438: PUSH
58439: LD_VAR 0 3
58443: PPUSH
58444: LD_INT 22
58446: PPUSH
58447: CALL 56135 0 2
58451: ST_TO_ADDR
// if result then
58452: LD_VAR 0 2
58456: IFFALSE 58462
// exit ;
58458: POP
58459: POP
58460: GO 58466
// end ;
58462: GO 58431
58464: POP
58465: POP
// end ;
58466: LD_VAR 0 2
58470: RET
// export function FilterByTag ( units , tag ) ; begin
58471: LD_INT 0
58473: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58474: LD_ADDR_VAR 0 3
58478: PUSH
58479: LD_VAR 0 1
58483: PPUSH
58484: LD_INT 120
58486: PUSH
58487: LD_VAR 0 2
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PPUSH
58496: CALL_OW 72
58500: ST_TO_ADDR
// end ;
58501: LD_VAR 0 3
58505: RET
// export function IsDriver ( un ) ; begin
58506: LD_INT 0
58508: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58509: LD_ADDR_VAR 0 2
58513: PUSH
58514: LD_VAR 0 1
58518: PUSH
58519: LD_INT 55
58521: PUSH
58522: EMPTY
58523: LIST
58524: PPUSH
58525: CALL_OW 69
58529: IN
58530: ST_TO_ADDR
// end ;
58531: LD_VAR 0 2
58535: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58536: LD_INT 0
58538: PPUSH
58539: PPUSH
// list := [ ] ;
58540: LD_ADDR_VAR 0 5
58544: PUSH
58545: EMPTY
58546: ST_TO_ADDR
// case d of 0 :
58547: LD_VAR 0 3
58551: PUSH
58552: LD_INT 0
58554: DOUBLE
58555: EQUAL
58556: IFTRUE 58560
58558: GO 58693
58560: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58561: LD_ADDR_VAR 0 5
58565: PUSH
58566: LD_VAR 0 1
58570: PUSH
58571: LD_INT 4
58573: MINUS
58574: PUSH
58575: LD_VAR 0 2
58579: PUSH
58580: LD_INT 4
58582: MINUS
58583: PUSH
58584: LD_INT 2
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: LIST
58591: PUSH
58592: LD_VAR 0 1
58596: PUSH
58597: LD_INT 3
58599: MINUS
58600: PUSH
58601: LD_VAR 0 2
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: PUSH
58614: LD_VAR 0 1
58618: PUSH
58619: LD_INT 4
58621: PLUS
58622: PUSH
58623: LD_VAR 0 2
58627: PUSH
58628: LD_INT 4
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: LIST
58635: PUSH
58636: LD_VAR 0 1
58640: PUSH
58641: LD_INT 3
58643: PLUS
58644: PUSH
58645: LD_VAR 0 2
58649: PUSH
58650: LD_INT 3
58652: PLUS
58653: PUSH
58654: LD_INT 5
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: LIST
58661: PUSH
58662: LD_VAR 0 1
58666: PUSH
58667: LD_VAR 0 2
58671: PUSH
58672: LD_INT 4
58674: PLUS
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: LIST
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: ST_TO_ADDR
// end ; 1 :
58691: GO 59391
58693: LD_INT 1
58695: DOUBLE
58696: EQUAL
58697: IFTRUE 58701
58699: GO 58834
58701: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58702: LD_ADDR_VAR 0 5
58706: PUSH
58707: LD_VAR 0 1
58711: PUSH
58712: LD_VAR 0 2
58716: PUSH
58717: LD_INT 4
58719: MINUS
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: PUSH
58729: LD_VAR 0 1
58733: PUSH
58734: LD_INT 3
58736: MINUS
58737: PUSH
58738: LD_VAR 0 2
58742: PUSH
58743: LD_INT 3
58745: MINUS
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: LIST
58754: PUSH
58755: LD_VAR 0 1
58759: PUSH
58760: LD_INT 4
58762: MINUS
58763: PUSH
58764: LD_VAR 0 2
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: LIST
58776: PUSH
58777: LD_VAR 0 1
58781: PUSH
58782: LD_VAR 0 2
58786: PUSH
58787: LD_INT 3
58789: PLUS
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: LIST
58798: PUSH
58799: LD_VAR 0 1
58803: PUSH
58804: LD_INT 4
58806: PLUS
58807: PUSH
58808: LD_VAR 0 2
58812: PUSH
58813: LD_INT 4
58815: PLUS
58816: PUSH
58817: LD_INT 5
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: LIST
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: ST_TO_ADDR
// end ; 2 :
58832: GO 59391
58834: LD_INT 2
58836: DOUBLE
58837: EQUAL
58838: IFTRUE 58842
58840: GO 58971
58842: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58843: LD_ADDR_VAR 0 5
58847: PUSH
58848: LD_VAR 0 1
58852: PUSH
58853: LD_VAR 0 2
58857: PUSH
58858: LD_INT 3
58860: MINUS
58861: PUSH
58862: LD_INT 3
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: LIST
58869: PUSH
58870: LD_VAR 0 1
58874: PUSH
58875: LD_INT 4
58877: PLUS
58878: PUSH
58879: LD_VAR 0 2
58883: PUSH
58884: LD_INT 4
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: LIST
58891: PUSH
58892: LD_VAR 0 1
58896: PUSH
58897: LD_VAR 0 2
58901: PUSH
58902: LD_INT 4
58904: PLUS
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: LIST
58913: PUSH
58914: LD_VAR 0 1
58918: PUSH
58919: LD_INT 3
58921: MINUS
58922: PUSH
58923: LD_VAR 0 2
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: LIST
58935: PUSH
58936: LD_VAR 0 1
58940: PUSH
58941: LD_INT 4
58943: MINUS
58944: PUSH
58945: LD_VAR 0 2
58949: PUSH
58950: LD_INT 4
58952: MINUS
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: LIST
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: ST_TO_ADDR
// end ; 3 :
58969: GO 59391
58971: LD_INT 3
58973: DOUBLE
58974: EQUAL
58975: IFTRUE 58979
58977: GO 59112
58979: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58980: LD_ADDR_VAR 0 5
58984: PUSH
58985: LD_VAR 0 1
58989: PUSH
58990: LD_INT 3
58992: PLUS
58993: PUSH
58994: LD_VAR 0 2
58998: PUSH
58999: LD_INT 4
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: PUSH
59007: LD_VAR 0 1
59011: PUSH
59012: LD_INT 4
59014: PLUS
59015: PUSH
59016: LD_VAR 0 2
59020: PUSH
59021: LD_INT 4
59023: PLUS
59024: PUSH
59025: LD_INT 5
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: LIST
59032: PUSH
59033: LD_VAR 0 1
59037: PUSH
59038: LD_INT 4
59040: MINUS
59041: PUSH
59042: LD_VAR 0 2
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: LIST
59054: PUSH
59055: LD_VAR 0 1
59059: PUSH
59060: LD_VAR 0 2
59064: PUSH
59065: LD_INT 4
59067: MINUS
59068: PUSH
59069: LD_INT 3
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: LIST
59076: PUSH
59077: LD_VAR 0 1
59081: PUSH
59082: LD_INT 3
59084: MINUS
59085: PUSH
59086: LD_VAR 0 2
59090: PUSH
59091: LD_INT 3
59093: MINUS
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: LIST
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: ST_TO_ADDR
// end ; 4 :
59110: GO 59391
59112: LD_INT 4
59114: DOUBLE
59115: EQUAL
59116: IFTRUE 59120
59118: GO 59253
59120: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59121: LD_ADDR_VAR 0 5
59125: PUSH
59126: LD_VAR 0 1
59130: PUSH
59131: LD_VAR 0 2
59135: PUSH
59136: LD_INT 4
59138: PLUS
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: LIST
59147: PUSH
59148: LD_VAR 0 1
59152: PUSH
59153: LD_INT 3
59155: PLUS
59156: PUSH
59157: LD_VAR 0 2
59161: PUSH
59162: LD_INT 3
59164: PLUS
59165: PUSH
59166: LD_INT 5
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: LIST
59173: PUSH
59174: LD_VAR 0 1
59178: PUSH
59179: LD_INT 4
59181: PLUS
59182: PUSH
59183: LD_VAR 0 2
59187: PUSH
59188: LD_INT 4
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: LIST
59195: PUSH
59196: LD_VAR 0 1
59200: PUSH
59201: LD_VAR 0 2
59205: PUSH
59206: LD_INT 3
59208: MINUS
59209: PUSH
59210: LD_INT 3
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: PUSH
59218: LD_VAR 0 1
59222: PUSH
59223: LD_INT 4
59225: MINUS
59226: PUSH
59227: LD_VAR 0 2
59231: PUSH
59232: LD_INT 4
59234: MINUS
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: LIST
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: ST_TO_ADDR
// end ; 5 :
59251: GO 59391
59253: LD_INT 5
59255: DOUBLE
59256: EQUAL
59257: IFTRUE 59261
59259: GO 59390
59261: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59262: LD_ADDR_VAR 0 5
59266: PUSH
59267: LD_VAR 0 1
59271: PUSH
59272: LD_INT 4
59274: MINUS
59275: PUSH
59276: LD_VAR 0 2
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: LIST
59288: PUSH
59289: LD_VAR 0 1
59293: PUSH
59294: LD_VAR 0 2
59298: PUSH
59299: LD_INT 4
59301: MINUS
59302: PUSH
59303: LD_INT 3
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: LIST
59310: PUSH
59311: LD_VAR 0 1
59315: PUSH
59316: LD_INT 4
59318: PLUS
59319: PUSH
59320: LD_VAR 0 2
59324: PUSH
59325: LD_INT 4
59327: PLUS
59328: PUSH
59329: LD_INT 5
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: LIST
59336: PUSH
59337: LD_VAR 0 1
59341: PUSH
59342: LD_INT 3
59344: PLUS
59345: PUSH
59346: LD_VAR 0 2
59350: PUSH
59351: LD_INT 4
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: LIST
59358: PUSH
59359: LD_VAR 0 1
59363: PUSH
59364: LD_VAR 0 2
59368: PUSH
59369: LD_INT 3
59371: PLUS
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: ST_TO_ADDR
// end ; end ;
59388: GO 59391
59390: POP
// result := list ;
59391: LD_ADDR_VAR 0 4
59395: PUSH
59396: LD_VAR 0 5
59400: ST_TO_ADDR
// end ;
59401: LD_VAR 0 4
59405: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59406: LD_INT 0
59408: PPUSH
59409: PPUSH
59410: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59411: LD_VAR 0 1
59415: NOT
59416: PUSH
59417: LD_VAR 0 2
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: LD_INT 3
59430: PUSH
59431: LD_INT 4
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: IN
59440: NOT
59441: OR
59442: IFFALSE 59446
// exit ;
59444: GO 59538
// tmp := [ ] ;
59446: LD_ADDR_VAR 0 5
59450: PUSH
59451: EMPTY
59452: ST_TO_ADDR
// for i in units do
59453: LD_ADDR_VAR 0 4
59457: PUSH
59458: LD_VAR 0 1
59462: PUSH
59463: FOR_IN
59464: IFFALSE 59507
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59466: LD_ADDR_VAR 0 5
59470: PUSH
59471: LD_VAR 0 5
59475: PPUSH
59476: LD_VAR 0 5
59480: PUSH
59481: LD_INT 1
59483: PLUS
59484: PPUSH
59485: LD_VAR 0 4
59489: PPUSH
59490: LD_VAR 0 2
59494: PPUSH
59495: CALL_OW 259
59499: PPUSH
59500: CALL_OW 2
59504: ST_TO_ADDR
59505: GO 59463
59507: POP
59508: POP
// if not tmp then
59509: LD_VAR 0 5
59513: NOT
59514: IFFALSE 59518
// exit ;
59516: GO 59538
// result := SortListByListDesc ( units , tmp ) ;
59518: LD_ADDR_VAR 0 3
59522: PUSH
59523: LD_VAR 0 1
59527: PPUSH
59528: LD_VAR 0 5
59532: PPUSH
59533: CALL_OW 77
59537: ST_TO_ADDR
// end ;
59538: LD_VAR 0 3
59542: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59543: LD_INT 0
59545: PPUSH
59546: PPUSH
59547: PPUSH
// result := false ;
59548: LD_ADDR_VAR 0 3
59552: PUSH
59553: LD_INT 0
59555: ST_TO_ADDR
// x := GetX ( building ) ;
59556: LD_ADDR_VAR 0 4
59560: PUSH
59561: LD_VAR 0 2
59565: PPUSH
59566: CALL_OW 250
59570: ST_TO_ADDR
// y := GetY ( building ) ;
59571: LD_ADDR_VAR 0 5
59575: PUSH
59576: LD_VAR 0 2
59580: PPUSH
59581: CALL_OW 251
59585: ST_TO_ADDR
// if not building or not x or not y then
59586: LD_VAR 0 2
59590: NOT
59591: PUSH
59592: LD_VAR 0 4
59596: NOT
59597: OR
59598: PUSH
59599: LD_VAR 0 5
59603: NOT
59604: OR
59605: IFFALSE 59609
// exit ;
59607: GO 59701
// if GetTaskList ( unit ) then
59609: LD_VAR 0 1
59613: PPUSH
59614: CALL_OW 437
59618: IFFALSE 59701
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59620: LD_STRING e
59622: PUSH
59623: LD_VAR 0 1
59627: PPUSH
59628: CALL_OW 437
59632: PUSH
59633: LD_INT 1
59635: ARRAY
59636: PUSH
59637: LD_INT 1
59639: ARRAY
59640: EQUAL
59641: PUSH
59642: LD_VAR 0 4
59646: PUSH
59647: LD_VAR 0 1
59651: PPUSH
59652: CALL_OW 437
59656: PUSH
59657: LD_INT 1
59659: ARRAY
59660: PUSH
59661: LD_INT 2
59663: ARRAY
59664: EQUAL
59665: AND
59666: PUSH
59667: LD_VAR 0 5
59671: PUSH
59672: LD_VAR 0 1
59676: PPUSH
59677: CALL_OW 437
59681: PUSH
59682: LD_INT 1
59684: ARRAY
59685: PUSH
59686: LD_INT 3
59688: ARRAY
59689: EQUAL
59690: AND
59691: IFFALSE 59701
// result := true end ;
59693: LD_ADDR_VAR 0 3
59697: PUSH
59698: LD_INT 1
59700: ST_TO_ADDR
// end ;
59701: LD_VAR 0 3
59705: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59706: LD_INT 0
59708: PPUSH
// result := false ;
59709: LD_ADDR_VAR 0 4
59713: PUSH
59714: LD_INT 0
59716: ST_TO_ADDR
// if GetTaskList ( unit ) then
59717: LD_VAR 0 1
59721: PPUSH
59722: CALL_OW 437
59726: IFFALSE 59809
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59728: LD_STRING M
59730: PUSH
59731: LD_VAR 0 1
59735: PPUSH
59736: CALL_OW 437
59740: PUSH
59741: LD_INT 1
59743: ARRAY
59744: PUSH
59745: LD_INT 1
59747: ARRAY
59748: EQUAL
59749: PUSH
59750: LD_VAR 0 2
59754: PUSH
59755: LD_VAR 0 1
59759: PPUSH
59760: CALL_OW 437
59764: PUSH
59765: LD_INT 1
59767: ARRAY
59768: PUSH
59769: LD_INT 2
59771: ARRAY
59772: EQUAL
59773: AND
59774: PUSH
59775: LD_VAR 0 3
59779: PUSH
59780: LD_VAR 0 1
59784: PPUSH
59785: CALL_OW 437
59789: PUSH
59790: LD_INT 1
59792: ARRAY
59793: PUSH
59794: LD_INT 3
59796: ARRAY
59797: EQUAL
59798: AND
59799: IFFALSE 59809
// result := true ;
59801: LD_ADDR_VAR 0 4
59805: PUSH
59806: LD_INT 1
59808: ST_TO_ADDR
// end ; end ;
59809: LD_VAR 0 4
59813: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59814: LD_INT 0
59816: PPUSH
59817: PPUSH
59818: PPUSH
59819: PPUSH
// if not unit or not area then
59820: LD_VAR 0 1
59824: NOT
59825: PUSH
59826: LD_VAR 0 2
59830: NOT
59831: OR
59832: IFFALSE 59836
// exit ;
59834: GO 60000
// tmp := AreaToList ( area , i ) ;
59836: LD_ADDR_VAR 0 6
59840: PUSH
59841: LD_VAR 0 2
59845: PPUSH
59846: LD_VAR 0 5
59850: PPUSH
59851: CALL_OW 517
59855: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59856: LD_ADDR_VAR 0 5
59860: PUSH
59861: DOUBLE
59862: LD_INT 1
59864: DEC
59865: ST_TO_ADDR
59866: LD_VAR 0 6
59870: PUSH
59871: LD_INT 1
59873: ARRAY
59874: PUSH
59875: FOR_TO
59876: IFFALSE 59998
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59878: LD_ADDR_VAR 0 7
59882: PUSH
59883: LD_VAR 0 6
59887: PUSH
59888: LD_INT 1
59890: ARRAY
59891: PUSH
59892: LD_VAR 0 5
59896: ARRAY
59897: PUSH
59898: LD_VAR 0 6
59902: PUSH
59903: LD_INT 2
59905: ARRAY
59906: PUSH
59907: LD_VAR 0 5
59911: ARRAY
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59917: LD_VAR 0 7
59921: PUSH
59922: LD_INT 1
59924: ARRAY
59925: PPUSH
59926: LD_VAR 0 7
59930: PUSH
59931: LD_INT 2
59933: ARRAY
59934: PPUSH
59935: CALL_OW 428
59939: PUSH
59940: LD_INT 0
59942: EQUAL
59943: IFFALSE 59996
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59945: LD_VAR 0 1
59949: PPUSH
59950: LD_VAR 0 7
59954: PUSH
59955: LD_INT 1
59957: ARRAY
59958: PPUSH
59959: LD_VAR 0 7
59963: PUSH
59964: LD_INT 2
59966: ARRAY
59967: PPUSH
59968: LD_VAR 0 3
59972: PPUSH
59973: CALL_OW 48
// result := IsPlaced ( unit ) ;
59977: LD_ADDR_VAR 0 4
59981: PUSH
59982: LD_VAR 0 1
59986: PPUSH
59987: CALL_OW 305
59991: ST_TO_ADDR
// exit ;
59992: POP
59993: POP
59994: GO 60000
// end ; end ;
59996: GO 59875
59998: POP
59999: POP
// end ;
60000: LD_VAR 0 4
60004: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60005: LD_INT 0
60007: PPUSH
60008: PPUSH
60009: PPUSH
// if not side or side > 8 then
60010: LD_VAR 0 1
60014: NOT
60015: PUSH
60016: LD_VAR 0 1
60020: PUSH
60021: LD_INT 8
60023: GREATER
60024: OR
60025: IFFALSE 60029
// exit ;
60027: GO 60216
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60029: LD_ADDR_VAR 0 4
60033: PUSH
60034: LD_INT 22
60036: PUSH
60037: LD_VAR 0 1
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 21
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PPUSH
60060: CALL_OW 69
60064: ST_TO_ADDR
// if not tmp then
60065: LD_VAR 0 4
60069: NOT
60070: IFFALSE 60074
// exit ;
60072: GO 60216
// enable_addtolog := true ;
60074: LD_ADDR_OWVAR 81
60078: PUSH
60079: LD_INT 1
60081: ST_TO_ADDR
// AddToLog ( [ ) ;
60082: LD_STRING [
60084: PPUSH
60085: CALL_OW 561
// for i in tmp do
60089: LD_ADDR_VAR 0 3
60093: PUSH
60094: LD_VAR 0 4
60098: PUSH
60099: FOR_IN
60100: IFFALSE 60207
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60102: LD_STRING [
60104: PUSH
60105: LD_VAR 0 3
60109: PPUSH
60110: CALL_OW 266
60114: STR
60115: PUSH
60116: LD_STRING , 
60118: STR
60119: PUSH
60120: LD_VAR 0 3
60124: PPUSH
60125: CALL_OW 250
60129: STR
60130: PUSH
60131: LD_STRING , 
60133: STR
60134: PUSH
60135: LD_VAR 0 3
60139: PPUSH
60140: CALL_OW 251
60144: STR
60145: PUSH
60146: LD_STRING , 
60148: STR
60149: PUSH
60150: LD_VAR 0 3
60154: PPUSH
60155: CALL_OW 254
60159: STR
60160: PUSH
60161: LD_STRING , 
60163: STR
60164: PUSH
60165: LD_VAR 0 3
60169: PPUSH
60170: LD_INT 1
60172: PPUSH
60173: CALL_OW 268
60177: STR
60178: PUSH
60179: LD_STRING , 
60181: STR
60182: PUSH
60183: LD_VAR 0 3
60187: PPUSH
60188: LD_INT 2
60190: PPUSH
60191: CALL_OW 268
60195: STR
60196: PUSH
60197: LD_STRING ],
60199: STR
60200: PPUSH
60201: CALL_OW 561
// end ;
60205: GO 60099
60207: POP
60208: POP
// AddToLog ( ]; ) ;
60209: LD_STRING ];
60211: PPUSH
60212: CALL_OW 561
// end ;
60216: LD_VAR 0 2
60220: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60221: LD_INT 0
60223: PPUSH
60224: PPUSH
60225: PPUSH
60226: PPUSH
60227: PPUSH
// if not area or not rate or not max then
60228: LD_VAR 0 1
60232: NOT
60233: PUSH
60234: LD_VAR 0 2
60238: NOT
60239: OR
60240: PUSH
60241: LD_VAR 0 4
60245: NOT
60246: OR
60247: IFFALSE 60251
// exit ;
60249: GO 60440
// while 1 do
60251: LD_INT 1
60253: IFFALSE 60440
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60255: LD_ADDR_VAR 0 9
60259: PUSH
60260: LD_VAR 0 1
60264: PPUSH
60265: LD_INT 1
60267: PPUSH
60268: CALL_OW 287
60272: PUSH
60273: LD_INT 10
60275: MUL
60276: ST_TO_ADDR
// r := rate / 10 ;
60277: LD_ADDR_VAR 0 7
60281: PUSH
60282: LD_VAR 0 2
60286: PUSH
60287: LD_INT 10
60289: DIVREAL
60290: ST_TO_ADDR
// time := 1 1$00 ;
60291: LD_ADDR_VAR 0 8
60295: PUSH
60296: LD_INT 2100
60298: ST_TO_ADDR
// if amount < min then
60299: LD_VAR 0 9
60303: PUSH
60304: LD_VAR 0 3
60308: LESS
60309: IFFALSE 60327
// r := r * 2 else
60311: LD_ADDR_VAR 0 7
60315: PUSH
60316: LD_VAR 0 7
60320: PUSH
60321: LD_INT 2
60323: MUL
60324: ST_TO_ADDR
60325: GO 60353
// if amount > max then
60327: LD_VAR 0 9
60331: PUSH
60332: LD_VAR 0 4
60336: GREATER
60337: IFFALSE 60353
// r := r / 2 ;
60339: LD_ADDR_VAR 0 7
60343: PUSH
60344: LD_VAR 0 7
60348: PUSH
60349: LD_INT 2
60351: DIVREAL
60352: ST_TO_ADDR
// time := time / r ;
60353: LD_ADDR_VAR 0 8
60357: PUSH
60358: LD_VAR 0 8
60362: PUSH
60363: LD_VAR 0 7
60367: DIVREAL
60368: ST_TO_ADDR
// if time < 0 then
60369: LD_VAR 0 8
60373: PUSH
60374: LD_INT 0
60376: LESS
60377: IFFALSE 60394
// time := time * - 1 ;
60379: LD_ADDR_VAR 0 8
60383: PUSH
60384: LD_VAR 0 8
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: MUL
60393: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60394: LD_VAR 0 8
60398: PUSH
60399: LD_INT 35
60401: PPUSH
60402: LD_INT 875
60404: PPUSH
60405: CALL_OW 12
60409: PLUS
60410: PPUSH
60411: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60415: LD_INT 1
60417: PPUSH
60418: LD_INT 5
60420: PPUSH
60421: CALL_OW 12
60425: PPUSH
60426: LD_VAR 0 1
60430: PPUSH
60431: LD_INT 1
60433: PPUSH
60434: CALL_OW 55
// end ;
60438: GO 60251
// end ;
60440: LD_VAR 0 5
60444: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60445: LD_INT 0
60447: PPUSH
60448: PPUSH
60449: PPUSH
60450: PPUSH
60451: PPUSH
60452: PPUSH
60453: PPUSH
60454: PPUSH
// if not turrets or not factories then
60455: LD_VAR 0 1
60459: NOT
60460: PUSH
60461: LD_VAR 0 2
60465: NOT
60466: OR
60467: IFFALSE 60471
// exit ;
60469: GO 60778
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60471: LD_ADDR_VAR 0 10
60475: PUSH
60476: LD_INT 5
60478: PUSH
60479: LD_INT 6
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: PUSH
60489: LD_INT 4
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 3
60498: PUSH
60499: LD_INT 5
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 24
60513: PUSH
60514: LD_INT 25
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 23
60523: PUSH
60524: LD_INT 27
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 42
60537: PUSH
60538: LD_INT 43
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 44
60547: PUSH
60548: LD_INT 46
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 45
60557: PUSH
60558: LD_INT 47
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: LIST
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: LIST
60574: ST_TO_ADDR
// result := [ ] ;
60575: LD_ADDR_VAR 0 3
60579: PUSH
60580: EMPTY
60581: ST_TO_ADDR
// for i in turrets do
60582: LD_ADDR_VAR 0 4
60586: PUSH
60587: LD_VAR 0 1
60591: PUSH
60592: FOR_IN
60593: IFFALSE 60776
// begin nat := GetNation ( i ) ;
60595: LD_ADDR_VAR 0 7
60599: PUSH
60600: LD_VAR 0 4
60604: PPUSH
60605: CALL_OW 248
60609: ST_TO_ADDR
// weapon := 0 ;
60610: LD_ADDR_VAR 0 8
60614: PUSH
60615: LD_INT 0
60617: ST_TO_ADDR
// if not nat then
60618: LD_VAR 0 7
60622: NOT
60623: IFFALSE 60627
// continue ;
60625: GO 60592
// for j in list [ nat ] do
60627: LD_ADDR_VAR 0 5
60631: PUSH
60632: LD_VAR 0 10
60636: PUSH
60637: LD_VAR 0 7
60641: ARRAY
60642: PUSH
60643: FOR_IN
60644: IFFALSE 60685
// if GetBWeapon ( i ) = j [ 1 ] then
60646: LD_VAR 0 4
60650: PPUSH
60651: CALL_OW 269
60655: PUSH
60656: LD_VAR 0 5
60660: PUSH
60661: LD_INT 1
60663: ARRAY
60664: EQUAL
60665: IFFALSE 60683
// begin weapon := j [ 2 ] ;
60667: LD_ADDR_VAR 0 8
60671: PUSH
60672: LD_VAR 0 5
60676: PUSH
60677: LD_INT 2
60679: ARRAY
60680: ST_TO_ADDR
// break ;
60681: GO 60685
// end ;
60683: GO 60643
60685: POP
60686: POP
// if not weapon then
60687: LD_VAR 0 8
60691: NOT
60692: IFFALSE 60696
// continue ;
60694: GO 60592
// for k in factories do
60696: LD_ADDR_VAR 0 6
60700: PUSH
60701: LD_VAR 0 2
60705: PUSH
60706: FOR_IN
60707: IFFALSE 60772
// begin weapons := AvailableWeaponList ( k ) ;
60709: LD_ADDR_VAR 0 9
60713: PUSH
60714: LD_VAR 0 6
60718: PPUSH
60719: CALL_OW 478
60723: ST_TO_ADDR
// if not weapons then
60724: LD_VAR 0 9
60728: NOT
60729: IFFALSE 60733
// continue ;
60731: GO 60706
// if weapon in weapons then
60733: LD_VAR 0 8
60737: PUSH
60738: LD_VAR 0 9
60742: IN
60743: IFFALSE 60770
// begin result := [ i , weapon ] ;
60745: LD_ADDR_VAR 0 3
60749: PUSH
60750: LD_VAR 0 4
60754: PUSH
60755: LD_VAR 0 8
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: ST_TO_ADDR
// exit ;
60764: POP
60765: POP
60766: POP
60767: POP
60768: GO 60778
// end ; end ;
60770: GO 60706
60772: POP
60773: POP
// end ;
60774: GO 60592
60776: POP
60777: POP
// end ;
60778: LD_VAR 0 3
60782: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60783: LD_INT 0
60785: PPUSH
// if not side or side > 8 then
60786: LD_VAR 0 3
60790: NOT
60791: PUSH
60792: LD_VAR 0 3
60796: PUSH
60797: LD_INT 8
60799: GREATER
60800: OR
60801: IFFALSE 60805
// exit ;
60803: GO 60864
// if not range then
60805: LD_VAR 0 4
60809: NOT
60810: IFFALSE 60821
// range := - 12 ;
60812: LD_ADDR_VAR 0 4
60816: PUSH
60817: LD_INT 12
60819: NEG
60820: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60821: LD_VAR 0 1
60825: PPUSH
60826: LD_VAR 0 2
60830: PPUSH
60831: LD_VAR 0 3
60835: PPUSH
60836: LD_VAR 0 4
60840: PPUSH
60841: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60845: LD_VAR 0 1
60849: PPUSH
60850: LD_VAR 0 2
60854: PPUSH
60855: LD_VAR 0 3
60859: PPUSH
60860: CALL_OW 331
// end ;
60864: LD_VAR 0 5
60868: RET
// export function Video ( mode ) ; begin
60869: LD_INT 0
60871: PPUSH
// ingame_video = mode ;
60872: LD_ADDR_OWVAR 52
60876: PUSH
60877: LD_VAR 0 1
60881: ST_TO_ADDR
// interface_hidden = mode ;
60882: LD_ADDR_OWVAR 54
60886: PUSH
60887: LD_VAR 0 1
60891: ST_TO_ADDR
// end ;
60892: LD_VAR 0 2
60896: RET
// export function Join ( array , element ) ; begin
60897: LD_INT 0
60899: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60900: LD_ADDR_VAR 0 3
60904: PUSH
60905: LD_VAR 0 1
60909: PPUSH
60910: LD_VAR 0 1
60914: PUSH
60915: LD_INT 1
60917: PLUS
60918: PPUSH
60919: LD_VAR 0 2
60923: PPUSH
60924: CALL_OW 1
60928: ST_TO_ADDR
// end ;
60929: LD_VAR 0 3
60933: RET
// export function JoinUnion ( array , element ) ; begin
60934: LD_INT 0
60936: PPUSH
// result := array union element ;
60937: LD_ADDR_VAR 0 3
60941: PUSH
60942: LD_VAR 0 1
60946: PUSH
60947: LD_VAR 0 2
60951: UNION
60952: ST_TO_ADDR
// end ;
60953: LD_VAR 0 3
60957: RET
// export function GetBehemoths ( side ) ; begin
60958: LD_INT 0
60960: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60961: LD_ADDR_VAR 0 2
60965: PUSH
60966: LD_INT 22
60968: PUSH
60969: LD_VAR 0 1
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 31
60980: PUSH
60981: LD_INT 25
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PPUSH
60992: CALL_OW 69
60996: ST_TO_ADDR
// end ;
60997: LD_VAR 0 2
61001: RET
// export function Shuffle ( array ) ; var i , index ; begin
61002: LD_INT 0
61004: PPUSH
61005: PPUSH
61006: PPUSH
// result := [ ] ;
61007: LD_ADDR_VAR 0 2
61011: PUSH
61012: EMPTY
61013: ST_TO_ADDR
// if not array then
61014: LD_VAR 0 1
61018: NOT
61019: IFFALSE 61023
// exit ;
61021: GO 61122
// Randomize ;
61023: CALL_OW 10
// for i = array downto 1 do
61027: LD_ADDR_VAR 0 3
61031: PUSH
61032: DOUBLE
61033: LD_VAR 0 1
61037: INC
61038: ST_TO_ADDR
61039: LD_INT 1
61041: PUSH
61042: FOR_DOWNTO
61043: IFFALSE 61120
// begin index := rand ( 1 , array ) ;
61045: LD_ADDR_VAR 0 4
61049: PUSH
61050: LD_INT 1
61052: PPUSH
61053: LD_VAR 0 1
61057: PPUSH
61058: CALL_OW 12
61062: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61063: LD_ADDR_VAR 0 2
61067: PUSH
61068: LD_VAR 0 2
61072: PPUSH
61073: LD_VAR 0 2
61077: PUSH
61078: LD_INT 1
61080: PLUS
61081: PPUSH
61082: LD_VAR 0 1
61086: PUSH
61087: LD_VAR 0 4
61091: ARRAY
61092: PPUSH
61093: CALL_OW 2
61097: ST_TO_ADDR
// array := Delete ( array , index ) ;
61098: LD_ADDR_VAR 0 1
61102: PUSH
61103: LD_VAR 0 1
61107: PPUSH
61108: LD_VAR 0 4
61112: PPUSH
61113: CALL_OW 3
61117: ST_TO_ADDR
// end ;
61118: GO 61042
61120: POP
61121: POP
// end ;
61122: LD_VAR 0 2
61126: RET
// export function GetBaseMaterials ( base ) ; begin
61127: LD_INT 0
61129: PPUSH
// result := [ 0 , 0 , 0 ] ;
61130: LD_ADDR_VAR 0 2
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: LIST
61148: ST_TO_ADDR
// if not base then
61149: LD_VAR 0 1
61153: NOT
61154: IFFALSE 61158
// exit ;
61156: GO 61207
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61158: LD_ADDR_VAR 0 2
61162: PUSH
61163: LD_VAR 0 1
61167: PPUSH
61168: LD_INT 1
61170: PPUSH
61171: CALL_OW 275
61175: PUSH
61176: LD_VAR 0 1
61180: PPUSH
61181: LD_INT 2
61183: PPUSH
61184: CALL_OW 275
61188: PUSH
61189: LD_VAR 0 1
61193: PPUSH
61194: LD_INT 3
61196: PPUSH
61197: CALL_OW 275
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: LIST
61206: ST_TO_ADDR
// end ;
61207: LD_VAR 0 2
61211: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61212: LD_INT 0
61214: PPUSH
61215: PPUSH
// result := array ;
61216: LD_ADDR_VAR 0 3
61220: PUSH
61221: LD_VAR 0 1
61225: ST_TO_ADDR
// if size >= result then
61226: LD_VAR 0 2
61230: PUSH
61231: LD_VAR 0 3
61235: GREATEREQUAL
61236: IFFALSE 61240
// exit ;
61238: GO 61290
// if size then
61240: LD_VAR 0 2
61244: IFFALSE 61290
// for i := array downto size do
61246: LD_ADDR_VAR 0 4
61250: PUSH
61251: DOUBLE
61252: LD_VAR 0 1
61256: INC
61257: ST_TO_ADDR
61258: LD_VAR 0 2
61262: PUSH
61263: FOR_DOWNTO
61264: IFFALSE 61288
// result := Delete ( result , result ) ;
61266: LD_ADDR_VAR 0 3
61270: PUSH
61271: LD_VAR 0 3
61275: PPUSH
61276: LD_VAR 0 3
61280: PPUSH
61281: CALL_OW 3
61285: ST_TO_ADDR
61286: GO 61263
61288: POP
61289: POP
// end ;
61290: LD_VAR 0 3
61294: RET
// export function ComExit ( unit ) ; var tmp ; begin
61295: LD_INT 0
61297: PPUSH
61298: PPUSH
// if not IsInUnit ( unit ) then
61299: LD_VAR 0 1
61303: PPUSH
61304: CALL_OW 310
61308: NOT
61309: IFFALSE 61313
// exit ;
61311: GO 61373
// tmp := IsInUnit ( unit ) ;
61313: LD_ADDR_VAR 0 3
61317: PUSH
61318: LD_VAR 0 1
61322: PPUSH
61323: CALL_OW 310
61327: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61328: LD_VAR 0 3
61332: PPUSH
61333: CALL_OW 247
61337: PUSH
61338: LD_INT 2
61340: EQUAL
61341: IFFALSE 61354
// ComExitVehicle ( unit ) else
61343: LD_VAR 0 1
61347: PPUSH
61348: CALL_OW 121
61352: GO 61363
// ComExitBuilding ( unit ) ;
61354: LD_VAR 0 1
61358: PPUSH
61359: CALL_OW 122
// result := tmp ;
61363: LD_ADDR_VAR 0 2
61367: PUSH
61368: LD_VAR 0 3
61372: ST_TO_ADDR
// end ;
61373: LD_VAR 0 2
61377: RET
// export function ComExitAll ( units ) ; var i ; begin
61378: LD_INT 0
61380: PPUSH
61381: PPUSH
// if not units then
61382: LD_VAR 0 1
61386: NOT
61387: IFFALSE 61391
// exit ;
61389: GO 61417
// for i in units do
61391: LD_ADDR_VAR 0 3
61395: PUSH
61396: LD_VAR 0 1
61400: PUSH
61401: FOR_IN
61402: IFFALSE 61415
// ComExit ( i ) ;
61404: LD_VAR 0 3
61408: PPUSH
61409: CALL 61295 0 1
61413: GO 61401
61415: POP
61416: POP
// end ;
61417: LD_VAR 0 2
61421: RET
// export function ResetHc ; begin
61422: LD_INT 0
61424: PPUSH
// InitHc ;
61425: CALL_OW 19
// hc_importance := 0 ;
61429: LD_ADDR_OWVAR 32
61433: PUSH
61434: LD_INT 0
61436: ST_TO_ADDR
// end ;
61437: LD_VAR 0 1
61441: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61442: LD_INT 0
61444: PPUSH
61445: PPUSH
61446: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61447: LD_ADDR_VAR 0 6
61451: PUSH
61452: LD_VAR 0 1
61456: PUSH
61457: LD_VAR 0 3
61461: PLUS
61462: PUSH
61463: LD_INT 2
61465: DIV
61466: ST_TO_ADDR
// if _x < 0 then
61467: LD_VAR 0 6
61471: PUSH
61472: LD_INT 0
61474: LESS
61475: IFFALSE 61492
// _x := _x * - 1 ;
61477: LD_ADDR_VAR 0 6
61481: PUSH
61482: LD_VAR 0 6
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: MUL
61491: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61492: LD_ADDR_VAR 0 7
61496: PUSH
61497: LD_VAR 0 2
61501: PUSH
61502: LD_VAR 0 4
61506: PLUS
61507: PUSH
61508: LD_INT 2
61510: DIV
61511: ST_TO_ADDR
// if _y < 0 then
61512: LD_VAR 0 7
61516: PUSH
61517: LD_INT 0
61519: LESS
61520: IFFALSE 61537
// _y := _y * - 1 ;
61522: LD_ADDR_VAR 0 7
61526: PUSH
61527: LD_VAR 0 7
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: MUL
61536: ST_TO_ADDR
// result := [ _x , _y ] ;
61537: LD_ADDR_VAR 0 5
61541: PUSH
61542: LD_VAR 0 6
61546: PUSH
61547: LD_VAR 0 7
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: ST_TO_ADDR
// end ;
61556: LD_VAR 0 5
61560: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61561: LD_INT 0
61563: PPUSH
61564: PPUSH
61565: PPUSH
61566: PPUSH
// task := GetTaskList ( unit ) ;
61567: LD_ADDR_VAR 0 7
61571: PUSH
61572: LD_VAR 0 1
61576: PPUSH
61577: CALL_OW 437
61581: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61582: LD_VAR 0 7
61586: NOT
61587: PUSH
61588: LD_VAR 0 1
61592: PPUSH
61593: LD_VAR 0 2
61597: PPUSH
61598: CALL_OW 308
61602: NOT
61603: AND
61604: IFFALSE 61608
// exit ;
61606: GO 61726
// if IsInArea ( unit , area ) then
61608: LD_VAR 0 1
61612: PPUSH
61613: LD_VAR 0 2
61617: PPUSH
61618: CALL_OW 308
61622: IFFALSE 61640
// begin ComMoveToArea ( unit , goAway ) ;
61624: LD_VAR 0 1
61628: PPUSH
61629: LD_VAR 0 3
61633: PPUSH
61634: CALL_OW 113
// exit ;
61638: GO 61726
// end ; if task [ 1 ] [ 1 ] <> M then
61640: LD_VAR 0 7
61644: PUSH
61645: LD_INT 1
61647: ARRAY
61648: PUSH
61649: LD_INT 1
61651: ARRAY
61652: PUSH
61653: LD_STRING M
61655: NONEQUAL
61656: IFFALSE 61660
// exit ;
61658: GO 61726
// x := task [ 1 ] [ 2 ] ;
61660: LD_ADDR_VAR 0 5
61664: PUSH
61665: LD_VAR 0 7
61669: PUSH
61670: LD_INT 1
61672: ARRAY
61673: PUSH
61674: LD_INT 2
61676: ARRAY
61677: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61678: LD_ADDR_VAR 0 6
61682: PUSH
61683: LD_VAR 0 7
61687: PUSH
61688: LD_INT 1
61690: ARRAY
61691: PUSH
61692: LD_INT 3
61694: ARRAY
61695: ST_TO_ADDR
// if InArea ( x , y , area ) then
61696: LD_VAR 0 5
61700: PPUSH
61701: LD_VAR 0 6
61705: PPUSH
61706: LD_VAR 0 2
61710: PPUSH
61711: CALL_OW 309
61715: IFFALSE 61726
// ComStop ( unit ) ;
61717: LD_VAR 0 1
61721: PPUSH
61722: CALL_OW 141
// end ;
61726: LD_VAR 0 4
61730: RET
// export function Abs ( value ) ; begin
61731: LD_INT 0
61733: PPUSH
// result := value ;
61734: LD_ADDR_VAR 0 2
61738: PUSH
61739: LD_VAR 0 1
61743: ST_TO_ADDR
// if value < 0 then
61744: LD_VAR 0 1
61748: PUSH
61749: LD_INT 0
61751: LESS
61752: IFFALSE 61769
// result := value * - 1 ;
61754: LD_ADDR_VAR 0 2
61758: PUSH
61759: LD_VAR 0 1
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: MUL
61768: ST_TO_ADDR
// end ;
61769: LD_VAR 0 2
61773: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61774: LD_INT 0
61776: PPUSH
61777: PPUSH
61778: PPUSH
61779: PPUSH
61780: PPUSH
61781: PPUSH
61782: PPUSH
61783: PPUSH
// if not unit or not building then
61784: LD_VAR 0 1
61788: NOT
61789: PUSH
61790: LD_VAR 0 2
61794: NOT
61795: OR
61796: IFFALSE 61800
// exit ;
61798: GO 62026
// x := GetX ( building ) ;
61800: LD_ADDR_VAR 0 4
61804: PUSH
61805: LD_VAR 0 2
61809: PPUSH
61810: CALL_OW 250
61814: ST_TO_ADDR
// y := GetY ( building ) ;
61815: LD_ADDR_VAR 0 6
61819: PUSH
61820: LD_VAR 0 2
61824: PPUSH
61825: CALL_OW 251
61829: ST_TO_ADDR
// d := GetDir ( building ) ;
61830: LD_ADDR_VAR 0 8
61834: PUSH
61835: LD_VAR 0 2
61839: PPUSH
61840: CALL_OW 254
61844: ST_TO_ADDR
// r := 4 ;
61845: LD_ADDR_VAR 0 9
61849: PUSH
61850: LD_INT 4
61852: ST_TO_ADDR
// for i := 1 to 5 do
61853: LD_ADDR_VAR 0 10
61857: PUSH
61858: DOUBLE
61859: LD_INT 1
61861: DEC
61862: ST_TO_ADDR
61863: LD_INT 5
61865: PUSH
61866: FOR_TO
61867: IFFALSE 62024
// begin _x := ShiftX ( x , d , r + i ) ;
61869: LD_ADDR_VAR 0 5
61873: PUSH
61874: LD_VAR 0 4
61878: PPUSH
61879: LD_VAR 0 8
61883: PPUSH
61884: LD_VAR 0 9
61888: PUSH
61889: LD_VAR 0 10
61893: PLUS
61894: PPUSH
61895: CALL_OW 272
61899: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61900: LD_ADDR_VAR 0 7
61904: PUSH
61905: LD_VAR 0 6
61909: PPUSH
61910: LD_VAR 0 8
61914: PPUSH
61915: LD_VAR 0 9
61919: PUSH
61920: LD_VAR 0 10
61924: PLUS
61925: PPUSH
61926: CALL_OW 273
61930: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61931: LD_VAR 0 5
61935: PPUSH
61936: LD_VAR 0 7
61940: PPUSH
61941: CALL_OW 488
61945: PUSH
61946: LD_VAR 0 5
61950: PPUSH
61951: LD_VAR 0 7
61955: PPUSH
61956: CALL_OW 428
61960: PPUSH
61961: CALL_OW 247
61965: PUSH
61966: LD_INT 3
61968: PUSH
61969: LD_INT 2
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: IN
61976: NOT
61977: AND
61978: IFFALSE 62022
// begin ComMoveXY ( unit , _x , _y ) ;
61980: LD_VAR 0 1
61984: PPUSH
61985: LD_VAR 0 5
61989: PPUSH
61990: LD_VAR 0 7
61994: PPUSH
61995: CALL_OW 111
// result := [ _x , _y ] ;
61999: LD_ADDR_VAR 0 3
62003: PUSH
62004: LD_VAR 0 5
62008: PUSH
62009: LD_VAR 0 7
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: ST_TO_ADDR
// exit ;
62018: POP
62019: POP
62020: GO 62026
// end ; end ;
62022: GO 61866
62024: POP
62025: POP
// end ;
62026: LD_VAR 0 3
62030: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62031: LD_INT 0
62033: PPUSH
62034: PPUSH
62035: PPUSH
// result := 0 ;
62036: LD_ADDR_VAR 0 3
62040: PUSH
62041: LD_INT 0
62043: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62044: LD_VAR 0 1
62048: PUSH
62049: LD_INT 0
62051: LESS
62052: PUSH
62053: LD_VAR 0 1
62057: PUSH
62058: LD_INT 8
62060: GREATER
62061: OR
62062: PUSH
62063: LD_VAR 0 2
62067: PUSH
62068: LD_INT 0
62070: LESS
62071: OR
62072: PUSH
62073: LD_VAR 0 2
62077: PUSH
62078: LD_INT 8
62080: GREATER
62081: OR
62082: IFFALSE 62086
// exit ;
62084: GO 62161
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62086: LD_ADDR_VAR 0 4
62090: PUSH
62091: LD_INT 22
62093: PUSH
62094: LD_VAR 0 2
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PPUSH
62103: CALL_OW 69
62107: PUSH
62108: FOR_IN
62109: IFFALSE 62159
// begin un := UnitShoot ( i ) ;
62111: LD_ADDR_VAR 0 5
62115: PUSH
62116: LD_VAR 0 4
62120: PPUSH
62121: CALL_OW 504
62125: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62126: LD_VAR 0 5
62130: PPUSH
62131: CALL_OW 255
62135: PUSH
62136: LD_VAR 0 1
62140: EQUAL
62141: IFFALSE 62157
// begin result := un ;
62143: LD_ADDR_VAR 0 3
62147: PUSH
62148: LD_VAR 0 5
62152: ST_TO_ADDR
// exit ;
62153: POP
62154: POP
62155: GO 62161
// end ; end ;
62157: GO 62108
62159: POP
62160: POP
// end ;
62161: LD_VAR 0 3
62165: RET
// export function GetCargoBay ( units ) ; begin
62166: LD_INT 0
62168: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62169: LD_ADDR_VAR 0 2
62173: PUSH
62174: LD_VAR 0 1
62178: PPUSH
62179: LD_INT 2
62181: PUSH
62182: LD_INT 34
62184: PUSH
62185: LD_INT 12
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 34
62194: PUSH
62195: LD_INT 51
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 34
62204: PUSH
62205: LD_INT 32
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 34
62214: PUSH
62215: LD_EXP 84
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: PPUSH
62231: CALL_OW 72
62235: ST_TO_ADDR
// end ;
62236: LD_VAR 0 2
62240: RET
// export function Negate ( value ) ; begin
62241: LD_INT 0
62243: PPUSH
// result := not value ;
62244: LD_ADDR_VAR 0 2
62248: PUSH
62249: LD_VAR 0 1
62253: NOT
62254: ST_TO_ADDR
// end ;
62255: LD_VAR 0 2
62259: RET
// export function Inc ( value ) ; begin
62260: LD_INT 0
62262: PPUSH
// result := value + 1 ;
62263: LD_ADDR_VAR 0 2
62267: PUSH
62268: LD_VAR 0 1
62272: PUSH
62273: LD_INT 1
62275: PLUS
62276: ST_TO_ADDR
// end ;
62277: LD_VAR 0 2
62281: RET
// export function Dec ( value ) ; begin
62282: LD_INT 0
62284: PPUSH
// result := value - 1 ;
62285: LD_ADDR_VAR 0 2
62289: PUSH
62290: LD_VAR 0 1
62294: PUSH
62295: LD_INT 1
62297: MINUS
62298: ST_TO_ADDR
// end ;
62299: LD_VAR 0 2
62303: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62304: LD_INT 0
62306: PPUSH
62307: PPUSH
62308: PPUSH
62309: PPUSH
62310: PPUSH
62311: PPUSH
62312: PPUSH
62313: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62314: LD_VAR 0 1
62318: PPUSH
62319: LD_VAR 0 2
62323: PPUSH
62324: CALL_OW 488
62328: NOT
62329: PUSH
62330: LD_VAR 0 3
62334: PPUSH
62335: LD_VAR 0 4
62339: PPUSH
62340: CALL_OW 488
62344: NOT
62345: OR
62346: IFFALSE 62359
// begin result := - 1 ;
62348: LD_ADDR_VAR 0 5
62352: PUSH
62353: LD_INT 1
62355: NEG
62356: ST_TO_ADDR
// exit ;
62357: GO 62594
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62359: LD_ADDR_VAR 0 12
62363: PUSH
62364: LD_VAR 0 1
62368: PPUSH
62369: LD_VAR 0 2
62373: PPUSH
62374: LD_VAR 0 3
62378: PPUSH
62379: LD_VAR 0 4
62383: PPUSH
62384: CALL 61442 0 4
62388: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62389: LD_ADDR_VAR 0 11
62393: PUSH
62394: LD_VAR 0 1
62398: PPUSH
62399: LD_VAR 0 2
62403: PPUSH
62404: LD_VAR 0 12
62408: PUSH
62409: LD_INT 1
62411: ARRAY
62412: PPUSH
62413: LD_VAR 0 12
62417: PUSH
62418: LD_INT 2
62420: ARRAY
62421: PPUSH
62422: CALL_OW 298
62426: ST_TO_ADDR
// distance := 9999 ;
62427: LD_ADDR_VAR 0 10
62431: PUSH
62432: LD_INT 9999
62434: ST_TO_ADDR
// for i := 0 to 5 do
62435: LD_ADDR_VAR 0 6
62439: PUSH
62440: DOUBLE
62441: LD_INT 0
62443: DEC
62444: ST_TO_ADDR
62445: LD_INT 5
62447: PUSH
62448: FOR_TO
62449: IFFALSE 62592
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62451: LD_ADDR_VAR 0 7
62455: PUSH
62456: LD_VAR 0 1
62460: PPUSH
62461: LD_VAR 0 6
62465: PPUSH
62466: LD_VAR 0 11
62470: PPUSH
62471: CALL_OW 272
62475: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62476: LD_ADDR_VAR 0 8
62480: PUSH
62481: LD_VAR 0 2
62485: PPUSH
62486: LD_VAR 0 6
62490: PPUSH
62491: LD_VAR 0 11
62495: PPUSH
62496: CALL_OW 273
62500: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62501: LD_VAR 0 7
62505: PPUSH
62506: LD_VAR 0 8
62510: PPUSH
62511: CALL_OW 488
62515: NOT
62516: IFFALSE 62520
// continue ;
62518: GO 62448
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62520: LD_ADDR_VAR 0 9
62524: PUSH
62525: LD_VAR 0 12
62529: PUSH
62530: LD_INT 1
62532: ARRAY
62533: PPUSH
62534: LD_VAR 0 12
62538: PUSH
62539: LD_INT 2
62541: ARRAY
62542: PPUSH
62543: LD_VAR 0 7
62547: PPUSH
62548: LD_VAR 0 8
62552: PPUSH
62553: CALL_OW 298
62557: ST_TO_ADDR
// if tmp < distance then
62558: LD_VAR 0 9
62562: PUSH
62563: LD_VAR 0 10
62567: LESS
62568: IFFALSE 62590
// begin result := i ;
62570: LD_ADDR_VAR 0 5
62574: PUSH
62575: LD_VAR 0 6
62579: ST_TO_ADDR
// distance := tmp ;
62580: LD_ADDR_VAR 0 10
62584: PUSH
62585: LD_VAR 0 9
62589: ST_TO_ADDR
// end ; end ;
62590: GO 62448
62592: POP
62593: POP
// end ;
62594: LD_VAR 0 5
62598: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62599: LD_INT 0
62601: PPUSH
62602: PPUSH
// if not driver or not IsInUnit ( driver ) then
62603: LD_VAR 0 1
62607: NOT
62608: PUSH
62609: LD_VAR 0 1
62613: PPUSH
62614: CALL_OW 310
62618: NOT
62619: OR
62620: IFFALSE 62624
// exit ;
62622: GO 62714
// vehicle := IsInUnit ( driver ) ;
62624: LD_ADDR_VAR 0 3
62628: PUSH
62629: LD_VAR 0 1
62633: PPUSH
62634: CALL_OW 310
62638: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62639: LD_VAR 0 1
62643: PPUSH
62644: LD_STRING \
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: PUSH
62674: LD_STRING E
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: LD_VAR 0 3
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: LD_INT 0
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PPUSH
62710: CALL_OW 446
// end ;
62714: LD_VAR 0 2
62718: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62719: LD_INT 0
62721: PPUSH
62722: PPUSH
// if not driver or not IsInUnit ( driver ) then
62723: LD_VAR 0 1
62727: NOT
62728: PUSH
62729: LD_VAR 0 1
62733: PPUSH
62734: CALL_OW 310
62738: NOT
62739: OR
62740: IFFALSE 62744
// exit ;
62742: GO 62834
// vehicle := IsInUnit ( driver ) ;
62744: LD_ADDR_VAR 0 3
62748: PUSH
62749: LD_VAR 0 1
62753: PPUSH
62754: CALL_OW 310
62758: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62759: LD_VAR 0 1
62763: PPUSH
62764: LD_STRING \
62766: PUSH
62767: LD_INT 0
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: LD_INT 0
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: PUSH
62794: LD_STRING E
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: LD_VAR 0 3
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: LD_INT 0
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PPUSH
62830: CALL_OW 447
// end ;
62834: LD_VAR 0 2
62838: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62839: LD_INT 0
62841: PPUSH
62842: PPUSH
62843: PPUSH
// tmp := [ ] ;
62844: LD_ADDR_VAR 0 5
62848: PUSH
62849: EMPTY
62850: ST_TO_ADDR
// for i in units do
62851: LD_ADDR_VAR 0 4
62855: PUSH
62856: LD_VAR 0 1
62860: PUSH
62861: FOR_IN
62862: IFFALSE 62900
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62864: LD_ADDR_VAR 0 5
62868: PUSH
62869: LD_VAR 0 5
62873: PPUSH
62874: LD_VAR 0 5
62878: PUSH
62879: LD_INT 1
62881: PLUS
62882: PPUSH
62883: LD_VAR 0 4
62887: PPUSH
62888: CALL_OW 256
62892: PPUSH
62893: CALL_OW 2
62897: ST_TO_ADDR
62898: GO 62861
62900: POP
62901: POP
// if not tmp then
62902: LD_VAR 0 5
62906: NOT
62907: IFFALSE 62911
// exit ;
62909: GO 62959
// if asc then
62911: LD_VAR 0 2
62915: IFFALSE 62939
// result := SortListByListAsc ( units , tmp ) else
62917: LD_ADDR_VAR 0 3
62921: PUSH
62922: LD_VAR 0 1
62926: PPUSH
62927: LD_VAR 0 5
62931: PPUSH
62932: CALL_OW 76
62936: ST_TO_ADDR
62937: GO 62959
// result := SortListByListDesc ( units , tmp ) ;
62939: LD_ADDR_VAR 0 3
62943: PUSH
62944: LD_VAR 0 1
62948: PPUSH
62949: LD_VAR 0 5
62953: PPUSH
62954: CALL_OW 77
62958: ST_TO_ADDR
// end ;
62959: LD_VAR 0 3
62963: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62964: LD_INT 0
62966: PPUSH
62967: PPUSH
// task := GetTaskList ( mech ) ;
62968: LD_ADDR_VAR 0 4
62972: PUSH
62973: LD_VAR 0 1
62977: PPUSH
62978: CALL_OW 437
62982: ST_TO_ADDR
// if not task then
62983: LD_VAR 0 4
62987: NOT
62988: IFFALSE 62992
// exit ;
62990: GO 63034
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62992: LD_ADDR_VAR 0 3
62996: PUSH
62997: LD_VAR 0 4
63001: PUSH
63002: LD_INT 1
63004: ARRAY
63005: PUSH
63006: LD_INT 1
63008: ARRAY
63009: PUSH
63010: LD_STRING r
63012: EQUAL
63013: PUSH
63014: LD_VAR 0 4
63018: PUSH
63019: LD_INT 1
63021: ARRAY
63022: PUSH
63023: LD_INT 4
63025: ARRAY
63026: PUSH
63027: LD_VAR 0 2
63031: EQUAL
63032: AND
63033: ST_TO_ADDR
// end ;
63034: LD_VAR 0 3
63038: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63039: LD_INT 0
63041: PPUSH
// SetDir ( unit , d ) ;
63042: LD_VAR 0 1
63046: PPUSH
63047: LD_VAR 0 4
63051: PPUSH
63052: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63056: LD_VAR 0 1
63060: PPUSH
63061: LD_VAR 0 2
63065: PPUSH
63066: LD_VAR 0 3
63070: PPUSH
63071: LD_VAR 0 5
63075: PPUSH
63076: CALL_OW 48
// end ;
63080: LD_VAR 0 6
63084: RET
// export function ToNaturalNumber ( number ) ; begin
63085: LD_INT 0
63087: PPUSH
// result := number div 1 ;
63088: LD_ADDR_VAR 0 2
63092: PUSH
63093: LD_VAR 0 1
63097: PUSH
63098: LD_INT 1
63100: DIV
63101: ST_TO_ADDR
// if number < 0 then
63102: LD_VAR 0 1
63106: PUSH
63107: LD_INT 0
63109: LESS
63110: IFFALSE 63120
// result := 0 ;
63112: LD_ADDR_VAR 0 2
63116: PUSH
63117: LD_INT 0
63119: ST_TO_ADDR
// end ;
63120: LD_VAR 0 2
63124: RET
// export function SortByClass ( units , class ) ; var un ; begin
63125: LD_INT 0
63127: PPUSH
63128: PPUSH
// if not units or not class then
63129: LD_VAR 0 1
63133: NOT
63134: PUSH
63135: LD_VAR 0 2
63139: NOT
63140: OR
63141: IFFALSE 63145
// exit ;
63143: GO 63240
// result := [ ] ;
63145: LD_ADDR_VAR 0 3
63149: PUSH
63150: EMPTY
63151: ST_TO_ADDR
// for un in units do
63152: LD_ADDR_VAR 0 4
63156: PUSH
63157: LD_VAR 0 1
63161: PUSH
63162: FOR_IN
63163: IFFALSE 63238
// if GetClass ( un ) = class then
63165: LD_VAR 0 4
63169: PPUSH
63170: CALL_OW 257
63174: PUSH
63175: LD_VAR 0 2
63179: EQUAL
63180: IFFALSE 63207
// result := Insert ( result , 1 , un ) else
63182: LD_ADDR_VAR 0 3
63186: PUSH
63187: LD_VAR 0 3
63191: PPUSH
63192: LD_INT 1
63194: PPUSH
63195: LD_VAR 0 4
63199: PPUSH
63200: CALL_OW 2
63204: ST_TO_ADDR
63205: GO 63236
// result := Replace ( result , result + 1 , un ) ;
63207: LD_ADDR_VAR 0 3
63211: PUSH
63212: LD_VAR 0 3
63216: PPUSH
63217: LD_VAR 0 3
63221: PUSH
63222: LD_INT 1
63224: PLUS
63225: PPUSH
63226: LD_VAR 0 4
63230: PPUSH
63231: CALL_OW 1
63235: ST_TO_ADDR
63236: GO 63162
63238: POP
63239: POP
// end ;
63240: LD_VAR 0 3
63244: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63245: LD_INT 0
63247: PPUSH
63248: PPUSH
63249: PPUSH
63250: PPUSH
63251: PPUSH
63252: PPUSH
63253: PPUSH
// result := [ ] ;
63254: LD_ADDR_VAR 0 4
63258: PUSH
63259: EMPTY
63260: ST_TO_ADDR
// if x - r < 0 then
63261: LD_VAR 0 1
63265: PUSH
63266: LD_VAR 0 3
63270: MINUS
63271: PUSH
63272: LD_INT 0
63274: LESS
63275: IFFALSE 63287
// min_x := 0 else
63277: LD_ADDR_VAR 0 8
63281: PUSH
63282: LD_INT 0
63284: ST_TO_ADDR
63285: GO 63303
// min_x := x - r ;
63287: LD_ADDR_VAR 0 8
63291: PUSH
63292: LD_VAR 0 1
63296: PUSH
63297: LD_VAR 0 3
63301: MINUS
63302: ST_TO_ADDR
// if y - r < 0 then
63303: LD_VAR 0 2
63307: PUSH
63308: LD_VAR 0 3
63312: MINUS
63313: PUSH
63314: LD_INT 0
63316: LESS
63317: IFFALSE 63329
// min_y := 0 else
63319: LD_ADDR_VAR 0 7
63323: PUSH
63324: LD_INT 0
63326: ST_TO_ADDR
63327: GO 63345
// min_y := y - r ;
63329: LD_ADDR_VAR 0 7
63333: PUSH
63334: LD_VAR 0 2
63338: PUSH
63339: LD_VAR 0 3
63343: MINUS
63344: ST_TO_ADDR
// max_x := x + r ;
63345: LD_ADDR_VAR 0 9
63349: PUSH
63350: LD_VAR 0 1
63354: PUSH
63355: LD_VAR 0 3
63359: PLUS
63360: ST_TO_ADDR
// max_y := y + r ;
63361: LD_ADDR_VAR 0 10
63365: PUSH
63366: LD_VAR 0 2
63370: PUSH
63371: LD_VAR 0 3
63375: PLUS
63376: ST_TO_ADDR
// for _x = min_x to max_x do
63377: LD_ADDR_VAR 0 5
63381: PUSH
63382: DOUBLE
63383: LD_VAR 0 8
63387: DEC
63388: ST_TO_ADDR
63389: LD_VAR 0 9
63393: PUSH
63394: FOR_TO
63395: IFFALSE 63496
// for _y = min_y to max_y do
63397: LD_ADDR_VAR 0 6
63401: PUSH
63402: DOUBLE
63403: LD_VAR 0 7
63407: DEC
63408: ST_TO_ADDR
63409: LD_VAR 0 10
63413: PUSH
63414: FOR_TO
63415: IFFALSE 63492
// begin if not ValidHex ( _x , _y ) then
63417: LD_VAR 0 5
63421: PPUSH
63422: LD_VAR 0 6
63426: PPUSH
63427: CALL_OW 488
63431: NOT
63432: IFFALSE 63436
// continue ;
63434: GO 63414
// if GetResourceTypeXY ( _x , _y ) then
63436: LD_VAR 0 5
63440: PPUSH
63441: LD_VAR 0 6
63445: PPUSH
63446: CALL_OW 283
63450: IFFALSE 63490
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63452: LD_ADDR_VAR 0 4
63456: PUSH
63457: LD_VAR 0 4
63461: PPUSH
63462: LD_VAR 0 4
63466: PUSH
63467: LD_INT 1
63469: PLUS
63470: PPUSH
63471: LD_VAR 0 5
63475: PUSH
63476: LD_VAR 0 6
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PPUSH
63485: CALL_OW 1
63489: ST_TO_ADDR
// end ;
63490: GO 63414
63492: POP
63493: POP
63494: GO 63394
63496: POP
63497: POP
// end ;
63498: LD_VAR 0 4
63502: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63503: LD_INT 0
63505: PPUSH
63506: PPUSH
63507: PPUSH
63508: PPUSH
63509: PPUSH
63510: PPUSH
63511: PPUSH
63512: PPUSH
// if not units then
63513: LD_VAR 0 1
63517: NOT
63518: IFFALSE 63522
// exit ;
63520: GO 64048
// result := UnitFilter ( units , [ f_ok ] ) ;
63522: LD_ADDR_VAR 0 3
63526: PUSH
63527: LD_VAR 0 1
63531: PPUSH
63532: LD_INT 50
63534: PUSH
63535: EMPTY
63536: LIST
63537: PPUSH
63538: CALL_OW 72
63542: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63543: LD_ADDR_VAR 0 8
63547: PUSH
63548: LD_VAR 0 1
63552: PUSH
63553: LD_INT 1
63555: ARRAY
63556: PPUSH
63557: CALL_OW 255
63561: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63562: LD_ADDR_VAR 0 10
63566: PUSH
63567: LD_INT 29
63569: PUSH
63570: LD_EXP 87
63574: PUSH
63575: LD_INT 49
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: LIST
63582: ST_TO_ADDR
// if not result then
63583: LD_VAR 0 3
63587: NOT
63588: IFFALSE 63592
// exit ;
63590: GO 64048
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63592: LD_ADDR_VAR 0 5
63596: PUSH
63597: LD_INT 81
63599: PUSH
63600: LD_VAR 0 8
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PPUSH
63609: CALL_OW 69
63613: ST_TO_ADDR
// for i in result do
63614: LD_ADDR_VAR 0 4
63618: PUSH
63619: LD_VAR 0 3
63623: PUSH
63624: FOR_IN
63625: IFFALSE 64046
// begin tag := GetTag ( i ) + 1 ;
63627: LD_ADDR_VAR 0 9
63631: PUSH
63632: LD_VAR 0 4
63636: PPUSH
63637: CALL_OW 110
63641: PUSH
63642: LD_INT 1
63644: PLUS
63645: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63646: LD_ADDR_VAR 0 7
63650: PUSH
63651: LD_VAR 0 4
63655: PPUSH
63656: CALL_OW 250
63660: PPUSH
63661: LD_VAR 0 4
63665: PPUSH
63666: CALL_OW 251
63670: PPUSH
63671: LD_INT 6
63673: PPUSH
63674: CALL 63245 0 3
63678: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63679: LD_VAR 0 4
63683: PPUSH
63684: CALL_OW 247
63688: PUSH
63689: LD_INT 2
63691: EQUAL
63692: PUSH
63693: LD_VAR 0 7
63697: AND
63698: PUSH
63699: LD_VAR 0 4
63703: PPUSH
63704: CALL_OW 264
63708: PUSH
63709: LD_VAR 0 10
63713: IN
63714: NOT
63715: AND
63716: IFFALSE 63755
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63718: LD_VAR 0 4
63722: PPUSH
63723: LD_VAR 0 7
63727: PUSH
63728: LD_INT 1
63730: ARRAY
63731: PUSH
63732: LD_INT 1
63734: ARRAY
63735: PPUSH
63736: LD_VAR 0 7
63740: PUSH
63741: LD_INT 1
63743: ARRAY
63744: PUSH
63745: LD_INT 2
63747: ARRAY
63748: PPUSH
63749: CALL_OW 116
63753: GO 64044
// if path > tag then
63755: LD_VAR 0 2
63759: PUSH
63760: LD_VAR 0 9
63764: GREATER
63765: IFFALSE 63973
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63767: LD_ADDR_VAR 0 6
63771: PUSH
63772: LD_VAR 0 5
63776: PPUSH
63777: LD_INT 91
63779: PUSH
63780: LD_VAR 0 4
63784: PUSH
63785: LD_INT 8
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: LIST
63792: PPUSH
63793: CALL_OW 72
63797: ST_TO_ADDR
// if nearEnemy then
63798: LD_VAR 0 6
63802: IFFALSE 63871
// begin if GetWeapon ( i ) = ru_time_lapser then
63804: LD_VAR 0 4
63808: PPUSH
63809: CALL_OW 264
63813: PUSH
63814: LD_INT 49
63816: EQUAL
63817: IFFALSE 63845
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63819: LD_VAR 0 4
63823: PPUSH
63824: LD_VAR 0 6
63828: PPUSH
63829: LD_VAR 0 4
63833: PPUSH
63834: CALL_OW 74
63838: PPUSH
63839: CALL_OW 112
63843: GO 63869
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63845: LD_VAR 0 4
63849: PPUSH
63850: LD_VAR 0 6
63854: PPUSH
63855: LD_VAR 0 4
63859: PPUSH
63860: CALL_OW 74
63864: PPUSH
63865: CALL_OW 115
// end else
63869: GO 63971
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63871: LD_VAR 0 4
63875: PPUSH
63876: LD_VAR 0 2
63880: PUSH
63881: LD_VAR 0 9
63885: ARRAY
63886: PUSH
63887: LD_INT 1
63889: ARRAY
63890: PPUSH
63891: LD_VAR 0 2
63895: PUSH
63896: LD_VAR 0 9
63900: ARRAY
63901: PUSH
63902: LD_INT 2
63904: ARRAY
63905: PPUSH
63906: CALL_OW 297
63910: PUSH
63911: LD_INT 6
63913: GREATER
63914: IFFALSE 63957
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63916: LD_VAR 0 4
63920: PPUSH
63921: LD_VAR 0 2
63925: PUSH
63926: LD_VAR 0 9
63930: ARRAY
63931: PUSH
63932: LD_INT 1
63934: ARRAY
63935: PPUSH
63936: LD_VAR 0 2
63940: PUSH
63941: LD_VAR 0 9
63945: ARRAY
63946: PUSH
63947: LD_INT 2
63949: ARRAY
63950: PPUSH
63951: CALL_OW 114
63955: GO 63971
// SetTag ( i , tag ) ;
63957: LD_VAR 0 4
63961: PPUSH
63962: LD_VAR 0 9
63966: PPUSH
63967: CALL_OW 109
// end else
63971: GO 64044
// if enemy then
63973: LD_VAR 0 5
63977: IFFALSE 64044
// begin if GetWeapon ( i ) = ru_time_lapser then
63979: LD_VAR 0 4
63983: PPUSH
63984: CALL_OW 264
63988: PUSH
63989: LD_INT 49
63991: EQUAL
63992: IFFALSE 64020
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63994: LD_VAR 0 4
63998: PPUSH
63999: LD_VAR 0 5
64003: PPUSH
64004: LD_VAR 0 4
64008: PPUSH
64009: CALL_OW 74
64013: PPUSH
64014: CALL_OW 112
64018: GO 64044
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64020: LD_VAR 0 4
64024: PPUSH
64025: LD_VAR 0 5
64029: PPUSH
64030: LD_VAR 0 4
64034: PPUSH
64035: CALL_OW 74
64039: PPUSH
64040: CALL_OW 115
// end ; end ;
64044: GO 63624
64046: POP
64047: POP
// end ;
64048: LD_VAR 0 3
64052: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64053: LD_INT 0
64055: PPUSH
64056: PPUSH
64057: PPUSH
// if not unit or IsInUnit ( unit ) then
64058: LD_VAR 0 1
64062: NOT
64063: PUSH
64064: LD_VAR 0 1
64068: PPUSH
64069: CALL_OW 310
64073: OR
64074: IFFALSE 64078
// exit ;
64076: GO 64169
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64078: LD_ADDR_VAR 0 4
64082: PUSH
64083: LD_VAR 0 1
64087: PPUSH
64088: CALL_OW 250
64092: PPUSH
64093: LD_VAR 0 2
64097: PPUSH
64098: LD_INT 1
64100: PPUSH
64101: CALL_OW 272
64105: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64106: LD_ADDR_VAR 0 5
64110: PUSH
64111: LD_VAR 0 1
64115: PPUSH
64116: CALL_OW 251
64120: PPUSH
64121: LD_VAR 0 2
64125: PPUSH
64126: LD_INT 1
64128: PPUSH
64129: CALL_OW 273
64133: ST_TO_ADDR
// if ValidHex ( x , y ) then
64134: LD_VAR 0 4
64138: PPUSH
64139: LD_VAR 0 5
64143: PPUSH
64144: CALL_OW 488
64148: IFFALSE 64169
// ComTurnXY ( unit , x , y ) ;
64150: LD_VAR 0 1
64154: PPUSH
64155: LD_VAR 0 4
64159: PPUSH
64160: LD_VAR 0 5
64164: PPUSH
64165: CALL_OW 118
// end ;
64169: LD_VAR 0 3
64173: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64174: LD_INT 0
64176: PPUSH
64177: PPUSH
// result := false ;
64178: LD_ADDR_VAR 0 3
64182: PUSH
64183: LD_INT 0
64185: ST_TO_ADDR
// if not units then
64186: LD_VAR 0 2
64190: NOT
64191: IFFALSE 64195
// exit ;
64193: GO 64240
// for i in units do
64195: LD_ADDR_VAR 0 4
64199: PUSH
64200: LD_VAR 0 2
64204: PUSH
64205: FOR_IN
64206: IFFALSE 64238
// if See ( side , i ) then
64208: LD_VAR 0 1
64212: PPUSH
64213: LD_VAR 0 4
64217: PPUSH
64218: CALL_OW 292
64222: IFFALSE 64236
// begin result := true ;
64224: LD_ADDR_VAR 0 3
64228: PUSH
64229: LD_INT 1
64231: ST_TO_ADDR
// exit ;
64232: POP
64233: POP
64234: GO 64240
// end ;
64236: GO 64205
64238: POP
64239: POP
// end ;
64240: LD_VAR 0 3
64244: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64245: LD_INT 0
64247: PPUSH
64248: PPUSH
64249: PPUSH
64250: PPUSH
// if not unit or not points then
64251: LD_VAR 0 1
64255: NOT
64256: PUSH
64257: LD_VAR 0 2
64261: NOT
64262: OR
64263: IFFALSE 64267
// exit ;
64265: GO 64357
// dist := 99999 ;
64267: LD_ADDR_VAR 0 5
64271: PUSH
64272: LD_INT 99999
64274: ST_TO_ADDR
// for i in points do
64275: LD_ADDR_VAR 0 4
64279: PUSH
64280: LD_VAR 0 2
64284: PUSH
64285: FOR_IN
64286: IFFALSE 64355
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64288: LD_ADDR_VAR 0 6
64292: PUSH
64293: LD_VAR 0 1
64297: PPUSH
64298: LD_VAR 0 4
64302: PUSH
64303: LD_INT 1
64305: ARRAY
64306: PPUSH
64307: LD_VAR 0 4
64311: PUSH
64312: LD_INT 2
64314: ARRAY
64315: PPUSH
64316: CALL_OW 297
64320: ST_TO_ADDR
// if tmpDist < dist then
64321: LD_VAR 0 6
64325: PUSH
64326: LD_VAR 0 5
64330: LESS
64331: IFFALSE 64353
// begin result := i ;
64333: LD_ADDR_VAR 0 3
64337: PUSH
64338: LD_VAR 0 4
64342: ST_TO_ADDR
// dist := tmpDist ;
64343: LD_ADDR_VAR 0 5
64347: PUSH
64348: LD_VAR 0 6
64352: ST_TO_ADDR
// end ; end ;
64353: GO 64285
64355: POP
64356: POP
// end ;
64357: LD_VAR 0 3
64361: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64362: LD_INT 0
64364: PPUSH
// uc_side := side ;
64365: LD_ADDR_OWVAR 20
64369: PUSH
64370: LD_VAR 0 1
64374: ST_TO_ADDR
// uc_nation := 3 ;
64375: LD_ADDR_OWVAR 21
64379: PUSH
64380: LD_INT 3
64382: ST_TO_ADDR
// vc_chassis := 25 ;
64383: LD_ADDR_OWVAR 37
64387: PUSH
64388: LD_INT 25
64390: ST_TO_ADDR
// vc_engine := engine_siberite ;
64391: LD_ADDR_OWVAR 39
64395: PUSH
64396: LD_INT 3
64398: ST_TO_ADDR
// vc_control := control_computer ;
64399: LD_ADDR_OWVAR 38
64403: PUSH
64404: LD_INT 3
64406: ST_TO_ADDR
// vc_weapon := 59 ;
64407: LD_ADDR_OWVAR 40
64411: PUSH
64412: LD_INT 59
64414: ST_TO_ADDR
// result := CreateVehicle ;
64415: LD_ADDR_VAR 0 5
64419: PUSH
64420: CALL_OW 45
64424: ST_TO_ADDR
// SetDir ( result , d ) ;
64425: LD_VAR 0 5
64429: PPUSH
64430: LD_VAR 0 4
64434: PPUSH
64435: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64439: LD_VAR 0 5
64443: PPUSH
64444: LD_VAR 0 2
64448: PPUSH
64449: LD_VAR 0 3
64453: PPUSH
64454: LD_INT 0
64456: PPUSH
64457: CALL_OW 48
// end ;
64461: LD_VAR 0 5
64465: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64466: LD_INT 0
64468: PPUSH
64469: PPUSH
64470: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64471: LD_ADDR_VAR 0 2
64475: PUSH
64476: LD_INT 0
64478: PUSH
64479: LD_INT 0
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64494: LD_VAR 0 1
64498: NOT
64499: PUSH
64500: LD_VAR 0 1
64504: PPUSH
64505: CALL_OW 264
64509: PUSH
64510: LD_INT 12
64512: PUSH
64513: LD_INT 51
64515: PUSH
64516: LD_INT 32
64518: PUSH
64519: LD_EXP 84
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: IN
64530: NOT
64531: OR
64532: IFFALSE 64536
// exit ;
64534: GO 64634
// for i := 1 to 3 do
64536: LD_ADDR_VAR 0 3
64540: PUSH
64541: DOUBLE
64542: LD_INT 1
64544: DEC
64545: ST_TO_ADDR
64546: LD_INT 3
64548: PUSH
64549: FOR_TO
64550: IFFALSE 64632
// begin tmp := GetCargo ( cargo , i ) ;
64552: LD_ADDR_VAR 0 4
64556: PUSH
64557: LD_VAR 0 1
64561: PPUSH
64562: LD_VAR 0 3
64566: PPUSH
64567: CALL_OW 289
64571: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64572: LD_ADDR_VAR 0 2
64576: PUSH
64577: LD_VAR 0 2
64581: PPUSH
64582: LD_VAR 0 3
64586: PPUSH
64587: LD_VAR 0 4
64591: PPUSH
64592: CALL_OW 1
64596: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64597: LD_ADDR_VAR 0 2
64601: PUSH
64602: LD_VAR 0 2
64606: PPUSH
64607: LD_INT 4
64609: PPUSH
64610: LD_VAR 0 2
64614: PUSH
64615: LD_INT 4
64617: ARRAY
64618: PUSH
64619: LD_VAR 0 4
64623: PLUS
64624: PPUSH
64625: CALL_OW 1
64629: ST_TO_ADDR
// end ;
64630: GO 64549
64632: POP
64633: POP
// end ;
64634: LD_VAR 0 2
64638: RET
// export function Length ( array ) ; begin
64639: LD_INT 0
64641: PPUSH
// result := array + 0 ;
64642: LD_ADDR_VAR 0 2
64646: PUSH
64647: LD_VAR 0 1
64651: PUSH
64652: LD_INT 0
64654: PLUS
64655: ST_TO_ADDR
// end ;
64656: LD_VAR 0 2
64660: RET
// export function PrepareArray ( array ) ; begin
64661: LD_INT 0
64663: PPUSH
// result := array diff 0 ;
64664: LD_ADDR_VAR 0 2
64668: PUSH
64669: LD_VAR 0 1
64673: PUSH
64674: LD_INT 0
64676: DIFF
64677: ST_TO_ADDR
// if not result [ 1 ] then
64678: LD_VAR 0 2
64682: PUSH
64683: LD_INT 1
64685: ARRAY
64686: NOT
64687: IFFALSE 64707
// result := Delete ( result , 1 ) ;
64689: LD_ADDR_VAR 0 2
64693: PUSH
64694: LD_VAR 0 2
64698: PPUSH
64699: LD_INT 1
64701: PPUSH
64702: CALL_OW 3
64706: ST_TO_ADDR
// end ; end_of_file
64707: LD_VAR 0 2
64711: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64712: LD_VAR 0 1
64716: PUSH
64717: LD_INT 200
64719: DOUBLE
64720: GREATEREQUAL
64721: IFFALSE 64729
64723: LD_INT 299
64725: DOUBLE
64726: LESSEQUAL
64727: IFTRUE 64731
64729: GO 64763
64731: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64732: LD_VAR 0 1
64736: PPUSH
64737: LD_VAR 0 2
64741: PPUSH
64742: LD_VAR 0 3
64746: PPUSH
64747: LD_VAR 0 4
64751: PPUSH
64752: LD_VAR 0 5
64756: PPUSH
64757: CALL 3752 0 5
64761: GO 64840
64763: LD_INT 300
64765: DOUBLE
64766: GREATEREQUAL
64767: IFFALSE 64775
64769: LD_INT 399
64771: DOUBLE
64772: LESSEQUAL
64773: IFTRUE 64777
64775: GO 64839
64777: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64778: LD_VAR 0 1
64782: PPUSH
64783: LD_VAR 0 2
64787: PPUSH
64788: LD_VAR 0 3
64792: PPUSH
64793: LD_VAR 0 4
64797: PPUSH
64798: LD_VAR 0 5
64802: PPUSH
64803: LD_VAR 0 6
64807: PPUSH
64808: LD_VAR 0 7
64812: PPUSH
64813: LD_VAR 0 8
64817: PPUSH
64818: LD_VAR 0 9
64822: PPUSH
64823: LD_VAR 0 10
64827: PPUSH
64828: LD_VAR 0 11
64832: PPUSH
64833: CALL 20043 0 11
64837: GO 64840
64839: POP
// end ;
64840: PPOPN 11
64842: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64843: LD_VAR 0 1
64847: PPUSH
64848: LD_VAR 0 2
64852: PPUSH
64853: LD_VAR 0 3
64857: PPUSH
64858: LD_VAR 0 4
64862: PPUSH
64863: LD_VAR 0 5
64867: PPUSH
64868: CALL 3488 0 5
// end ; end_of_file
64872: PPOPN 5
64874: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64875: LD_VAR 0 1
64879: PPUSH
64880: LD_VAR 0 2
64884: PPUSH
64885: LD_VAR 0 3
64889: PPUSH
64890: LD_VAR 0 4
64894: PPUSH
64895: LD_VAR 0 5
64899: PPUSH
64900: LD_VAR 0 6
64904: PPUSH
64905: CALL 7736 0 6
// end ;
64909: PPOPN 6
64911: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
64912: LD_INT 0
64914: PPUSH
// begin if not units then
64915: LD_VAR 0 1
64919: NOT
64920: IFFALSE 64924
// exit ;
64922: GO 64924
// end ;
64924: PPOPN 7
64926: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
64927: CALL 7707 0 0
// end ;
64931: PPOPN 1
64933: END
