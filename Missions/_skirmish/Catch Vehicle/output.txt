// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 947
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: IFFALSE 744
 738: PUSH
 739: LD_VAR 0 4
 743: AND
 744: IFFALSE 883
// for i = 1 to filter do
 746: LD_ADDR_VAR 0 1
 750: PUSH
 751: DOUBLE
 752: LD_INT 1
 754: DEC
 755: ST_TO_ADDR
 756: LD_VAR 0 2
 760: PUSH
 761: FOR_TO
 762: IFFALSE 881
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 764: LD_VAR 0 2
 768: PUSH
 769: LD_VAR 0 1
 773: ARRAY
 774: PPUSH
 775: CALL_OW 314
 779: NOT
 780: IFFALSE 799
 782: PUSH
 783: LD_VAR 0 2
 787: PUSH
 788: LD_VAR 0 1
 792: ARRAY
 793: PPUSH
 794: CALL_OW 302
 798: AND
 799: IFFALSE 879
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 801: LD_VAR 0 2
 805: PUSH
 806: LD_VAR 0 1
 810: ARRAY
 811: PPUSH
 812: LD_VAR 0 4
 816: PPUSH
 817: LD_VAR 0 2
 821: PUSH
 822: LD_VAR 0 1
 826: ARRAY
 827: PPUSH
 828: CALL_OW 74
 832: PPUSH
 833: CALL_OW 296
 837: PUSH
 838: LD_INT 45
 840: LESS
 841: IFFALSE 879
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 843: LD_VAR 0 2
 847: PUSH
 848: LD_VAR 0 1
 852: ARRAY
 853: PPUSH
 854: LD_VAR 0 4
 858: PPUSH
 859: LD_VAR 0 2
 863: PUSH
 864: LD_VAR 0 1
 868: ARRAY
 869: PPUSH
 870: CALL_OW 74
 874: PPUSH
 875: CALL_OW 120
 879: GO 761
 881: POP
 882: POP
// if filter2 then
 883: LD_VAR 0 3
 887: IFFALSE 947
// for i = 1 to filter2 do
 889: LD_ADDR_VAR 0 1
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_VAR 0 3
 903: PUSH
 904: FOR_TO
 905: IFFALSE 945
// if not HasTask ( filter2 [ i ] ) then
 907: LD_VAR 0 3
 911: PUSH
 912: LD_VAR 0 1
 916: ARRAY
 917: PPUSH
 918: CALL_OW 314
 922: NOT
 923: IFFALSE 943
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 925: LD_VAR 0 3
 929: PUSH
 930: LD_VAR 0 1
 934: ARRAY
 935: PPUSH
 936: LD_INT 4
 938: PPUSH
 939: CALL_OW 113
 943: GO 904
 945: POP
 946: POP
// end ; end_of_file
 947: PPOPN 4
 949: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 950: LD_INT 0
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
 961: PPUSH
 962: PPUSH
 963: PPUSH
 964: PPUSH
// uc_side := 0 ;
 965: LD_ADDR_OWVAR 20
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 973: LD_ADDR_OWVAR 21
 977: PUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 3
 983: PPUSH
 984: CALL_OW 12
 988: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 989: LD_ADDR_VAR 0 7
 993: PUSH
 994: LD_INT 11
 996: PUSH
 997: LD_INT 12
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 14
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1012: LD_ADDR_VAR 0 8
1016: PUSH
1017: LD_INT 21
1019: PUSH
1020: LD_INT 22
1022: PUSH
1023: LD_INT 23
1025: PUSH
1026: LD_INT 24
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1035: LD_ADDR_VAR 0 9
1039: PUSH
1040: LD_INT 1
1042: PUSH
1043: LD_INT 2
1045: PUSH
1046: LD_INT 3
1048: PUSH
1049: LD_INT 4
1051: PUSH
1052: LD_INT 5
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: ST_TO_ADDR
// if chas > 0 then
1062: LD_VAR 0 1
1066: PUSH
1067: LD_INT 0
1069: GREATER
1070: IFFALSE 1084
// vc_chassis := chas else
1072: LD_ADDR_OWVAR 37
1076: PUSH
1077: LD_VAR 0 1
1081: ST_TO_ADDR
1082: GO 1177
// begin case uc_nation of 1 :
1084: LD_OWVAR 21
1088: PUSH
1089: LD_INT 1
1091: DOUBLE
1092: EQUAL
1093: IFTRUE 1097
1095: GO 1110
1097: POP
// chassis := us_chassis ; 2 :
1098: LD_ADDR_VAR 0 13
1102: PUSH
1103: LD_VAR 0 9
1107: ST_TO_ADDR
1108: GO 1153
1110: LD_INT 2
1112: DOUBLE
1113: EQUAL
1114: IFTRUE 1118
1116: GO 1131
1118: POP
// chassis := ar_chassis ; 3 :
1119: LD_ADDR_VAR 0 13
1123: PUSH
1124: LD_VAR 0 7
1128: ST_TO_ADDR
1129: GO 1153
1131: LD_INT 3
1133: DOUBLE
1134: EQUAL
1135: IFTRUE 1139
1137: GO 1152
1139: POP
// chassis := ru_chassis ; end ;
1140: LD_ADDR_VAR 0 13
1144: PUSH
1145: LD_VAR 0 8
1149: ST_TO_ADDR
1150: GO 1153
1152: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1153: LD_ADDR_OWVAR 37
1157: PUSH
1158: LD_VAR 0 13
1162: PUSH
1163: LD_INT 1
1165: PPUSH
1166: LD_VAR 0 13
1170: PPUSH
1171: CALL_OW 12
1175: ARRAY
1176: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1177: LD_OWVAR 37
1181: PUSH
1182: LD_INT 11
1184: PUSH
1185: LD_INT 12
1187: PUSH
1188: LD_INT 1
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: IN
1196: IFFALSE 1216
// engine := Rand ( 1 , 2 ) else
1198: LD_ADDR_VAR 0 14
1202: PUSH
1203: LD_INT 1
1205: PPUSH
1206: LD_INT 2
1208: PPUSH
1209: CALL_OW 12
1213: ST_TO_ADDR
1214: GO 1328
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1216: LD_OWVAR 37
1220: PUSH
1221: LD_INT 21
1223: PUSH
1224: LD_INT 22
1226: PUSH
1227: LD_INT 23
1229: PUSH
1230: LD_INT 24
1232: PUSH
1233: LD_INT 4
1235: PUSH
1236: LD_INT 5
1238: PUSH
1239: EMPTY
1240: LIST
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: IN
1247: NOT
1248: IFFALSE 1268
// engine := Rand ( 1 , 3 ) else
1250: LD_ADDR_VAR 0 14
1254: PUSH
1255: LD_INT 1
1257: PPUSH
1258: LD_INT 3
1260: PPUSH
1261: CALL_OW 12
1265: ST_TO_ADDR
1266: GO 1284
// e := Rand ( 1 , 2 ) ;
1268: LD_ADDR_VAR 0 5
1272: PUSH
1273: LD_INT 1
1275: PPUSH
1276: LD_INT 2
1278: PPUSH
1279: CALL_OW 12
1283: ST_TO_ADDR
// case e of 1 :
1284: LD_VAR 0 5
1288: PUSH
1289: LD_INT 1
1291: DOUBLE
1292: EQUAL
1293: IFTRUE 1297
1295: GO 1308
1297: POP
// engine := engine_combustion ; 2 :
1298: LD_ADDR_VAR 0 14
1302: PUSH
1303: LD_INT 1
1305: ST_TO_ADDR
1306: GO 1328
1308: LD_INT 2
1310: DOUBLE
1311: EQUAL
1312: IFTRUE 1316
1314: GO 1327
1316: POP
// engine := engine_siberite ; end ;
1317: LD_ADDR_VAR 0 14
1321: PUSH
1322: LD_INT 3
1324: ST_TO_ADDR
1325: GO 1328
1327: POP
// end ; vc_engine := engine ;
1328: LD_ADDR_OWVAR 39
1332: PUSH
1333: LD_VAR 0 14
1337: ST_TO_ADDR
// vc_control := control_manual ;
1338: LD_ADDR_OWVAR 38
1342: PUSH
1343: LD_INT 1
1345: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1346: LD_ADDR_VAR 0 10
1350: PUSH
1351: LD_INT 22
1353: PUSH
1354: LD_INT 24
1356: PUSH
1357: LD_INT 23
1359: PUSH
1360: LD_INT 30
1362: PUSH
1363: LD_INT 25
1365: PUSH
1366: LD_INT 27
1368: PUSH
1369: LD_INT 28
1371: PUSH
1372: LD_INT 29
1374: PUSH
1375: LD_INT 26
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1389: LD_ADDR_VAR 0 11
1393: PUSH
1394: LD_INT 42
1396: PUSH
1397: LD_INT 43
1399: PUSH
1400: LD_INT 44
1402: PUSH
1403: LD_INT 98
1405: PUSH
1406: LD_INT 45
1408: PUSH
1409: LD_INT 46
1411: PUSH
1412: LD_INT 47
1414: PUSH
1415: LD_INT 53
1417: PUSH
1418: LD_INT 49
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1432: LD_ADDR_VAR 0 12
1436: PUSH
1437: LD_INT 2
1439: PUSH
1440: LD_INT 3
1442: PUSH
1443: LD_INT 11
1445: PUSH
1446: LD_INT 4
1448: PUSH
1449: LD_INT 5
1451: PUSH
1452: LD_INT 7
1454: PUSH
1455: LD_INT 9
1457: PUSH
1458: LD_INT 6
1460: PUSH
1461: LD_INT 14
1463: PUSH
1464: LD_INT 10
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: ST_TO_ADDR
// if uc_nation = nation_arabian then
1479: LD_OWVAR 21
1483: PUSH
1484: LD_INT 2
1486: EQUAL
1487: IFFALSE 1554
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1489: LD_OWVAR 37
1493: PUSH
1494: LD_INT 11
1496: PUSH
1497: LD_INT 12
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: IN
1504: IFFALSE 1530
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1506: LD_ADDR_VAR 0 15
1510: PUSH
1511: LD_VAR 0 10
1515: PUSH
1516: LD_INT 1
1518: PPUSH
1519: LD_INT 3
1521: PPUSH
1522: CALL_OW 12
1526: ARRAY
1527: ST_TO_ADDR
1528: GO 1554
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1530: LD_ADDR_VAR 0 15
1534: PUSH
1535: LD_VAR 0 10
1539: PUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_VAR 0 10
1547: PPUSH
1548: CALL_OW 12
1552: ARRAY
1553: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1554: LD_OWVAR 21
1558: PUSH
1559: LD_INT 3
1561: EQUAL
1562: IFFALSE 1629
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1564: LD_OWVAR 37
1568: PUSH
1569: LD_INT 21
1571: PUSH
1572: LD_INT 22
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: IN
1579: IFFALSE 1605
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1581: LD_ADDR_VAR 0 15
1585: PUSH
1586: LD_VAR 0 11
1590: PUSH
1591: LD_INT 1
1593: PPUSH
1594: LD_INT 5
1596: PPUSH
1597: CALL_OW 12
1601: ARRAY
1602: ST_TO_ADDR
1603: GO 1629
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1605: LD_ADDR_VAR 0 15
1609: PUSH
1610: LD_VAR 0 11
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_VAR 0 11
1622: PPUSH
1623: CALL_OW 12
1627: ARRAY
1628: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1629: LD_OWVAR 21
1633: PUSH
1634: LD_INT 1
1636: EQUAL
1637: IFFALSE 1746
// begin if vc_chassis = us_light_wheeled then
1639: LD_OWVAR 37
1643: PUSH
1644: LD_INT 1
1646: EQUAL
1647: IFFALSE 1671
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1649: LD_ADDR_VAR 0 15
1653: PUSH
1654: LD_VAR 0 12
1658: PUSH
1659: LD_INT 1
1661: PPUSH
1662: LD_INT 3
1664: PPUSH
1665: CALL_OW 12
1669: ARRAY
1670: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1671: LD_OWVAR 37
1675: PUSH
1676: LD_INT 3
1678: PUSH
1679: LD_INT 2
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: IN
1686: IFFALSE 1712
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1688: LD_ADDR_VAR 0 15
1692: PUSH
1693: LD_VAR 0 12
1697: PUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_INT 7
1703: PPUSH
1704: CALL_OW 12
1708: ARRAY
1709: ST_TO_ADDR
1710: GO 1746
// if vc_chassis <> us_light_wheeled then
1712: LD_OWVAR 37
1716: PUSH
1717: LD_INT 1
1719: NONEQUAL
1720: IFFALSE 1746
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1722: LD_ADDR_VAR 0 15
1726: PUSH
1727: LD_VAR 0 12
1731: PUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_VAR 0 12
1739: PPUSH
1740: CALL_OW 12
1744: ARRAY
1745: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1746: LD_ADDR_OWVAR 40
1750: PUSH
1751: LD_VAR 0 15
1755: ST_TO_ADDR
// veh := CreateVehicle ;
1756: LD_ADDR_VAR 0 6
1760: PUSH
1761: CALL_OW 45
1765: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1766: LD_VAR 0 6
1770: PPUSH
1771: LD_VAR 0 2
1775: PPUSH
1776: LD_INT 1
1778: PPUSH
1779: CALL_OW 49
// end ;
1783: LD_VAR 0 3
1787: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1788: LD_INT 0
1790: PPUSH
1791: PPUSH
1792: PPUSH
// uc_side := 0 ;
1793: LD_ADDR_OWVAR 20
1797: PUSH
1798: LD_INT 0
1800: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1801: LD_ADDR_VAR 0 4
1805: PUSH
1806: LD_INT 1
1808: PPUSH
1809: LD_INT 2
1811: PPUSH
1812: CALL_OW 12
1816: ST_TO_ADDR
// case p of 1 :
1817: LD_VAR 0 4
1821: PUSH
1822: LD_INT 1
1824: DOUBLE
1825: EQUAL
1826: IFTRUE 1830
1828: GO 1873
1830: POP
// begin uc_nation := nation_american ;
1831: LD_ADDR_OWVAR 21
1835: PUSH
1836: LD_INT 1
1838: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1839: LD_ADDR_OWVAR 37
1843: PUSH
1844: LD_INT 4
1846: ST_TO_ADDR
// vc_engine := engine_siberite ;
1847: LD_ADDR_OWVAR 39
1851: PUSH
1852: LD_INT 3
1854: ST_TO_ADDR
// vc_control := control_manual ;
1855: LD_ADDR_OWVAR 38
1859: PUSH
1860: LD_INT 1
1862: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1863: LD_ADDR_OWVAR 40
1867: PUSH
1868: LD_INT 8
1870: ST_TO_ADDR
// end ; 2 :
1871: GO 1925
1873: LD_INT 2
1875: DOUBLE
1876: EQUAL
1877: IFTRUE 1881
1879: GO 1924
1881: POP
// begin uc_nation := nation_russian ;
1882: LD_ADDR_OWVAR 21
1886: PUSH
1887: LD_INT 3
1889: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1890: LD_ADDR_OWVAR 37
1894: PUSH
1895: LD_INT 24
1897: ST_TO_ADDR
// vc_engine := engine_siberite ;
1898: LD_ADDR_OWVAR 39
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_manual ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 1
1913: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1914: LD_ADDR_OWVAR 40
1918: PUSH
1919: LD_INT 48
1921: ST_TO_ADDR
// end ; end ;
1922: GO 1925
1924: POP
// veh := CreateVehicle ;
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: CALL_OW 45
1934: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1935: LD_VAR 0 3
1939: PPUSH
1940: LD_VAR 0 1
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: CALL_OW 49
// end ;
1952: LD_VAR 0 2
1956: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1957: LD_INT 0
1959: PPUSH
1960: PPUSH
// points := 0 ;
1961: LD_ADDR_VAR 0 3
1965: PUSH
1966: LD_INT 0
1968: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 265
1978: PUSH
1979: LD_INT 12
1981: PUSH
1982: LD_INT 1
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: IN
1989: IFFALSE 2005
// points := points + 10 ;
1991: LD_ADDR_VAR 0 3
1995: PUSH
1996: LD_VAR 0 3
2000: PUSH
2001: LD_INT 10
2003: PLUS
2004: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2005: LD_VAR 0 1
2009: PPUSH
2010: CALL_OW 265
2014: PUSH
2015: LD_INT 13
2017: PUSH
2018: LD_INT 21
2020: PUSH
2021: LD_INT 2
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: IN
2029: IFFALSE 2045
// points := points + 15 ;
2031: LD_ADDR_VAR 0 3
2035: PUSH
2036: LD_VAR 0 3
2040: PUSH
2041: LD_INT 15
2043: PLUS
2044: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2045: LD_VAR 0 1
2049: PPUSH
2050: CALL_OW 265
2054: PUSH
2055: LD_INT 14
2057: PUSH
2058: LD_INT 22
2060: PUSH
2061: LD_INT 3
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: IN
2069: IFFALSE 2085
// points := points + 20 ;
2071: LD_ADDR_VAR 0 3
2075: PUSH
2076: LD_VAR 0 3
2080: PUSH
2081: LD_INT 20
2083: PLUS
2084: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2085: LD_VAR 0 1
2089: PPUSH
2090: CALL_OW 265
2094: PUSH
2095: LD_INT 23
2097: PUSH
2098: LD_INT 24
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: LIST
2108: IN
2109: IFFALSE 2125
// points := points + 25 ;
2111: LD_ADDR_VAR 0 3
2115: PUSH
2116: LD_VAR 0 3
2120: PUSH
2121: LD_INT 25
2123: PLUS
2124: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2125: LD_VAR 0 1
2129: PPUSH
2130: CALL_OW 265
2134: PUSH
2135: LD_INT 11
2137: PUSH
2138: LD_INT 5
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: IN
2145: IFFALSE 2161
// points := points + 30 ;
2147: LD_ADDR_VAR 0 3
2151: PUSH
2152: LD_VAR 0 3
2156: PUSH
2157: LD_INT 30
2159: PLUS
2160: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2161: LD_VAR 0 1
2165: PPUSH
2166: CALL_OW 262
2170: PUSH
2171: LD_INT 1
2173: PUSH
2174: EMPTY
2175: LIST
2176: EQUAL
2177: IFFALSE 2193
// points := points + 5 ;
2179: LD_ADDR_VAR 0 3
2183: PUSH
2184: LD_VAR 0 3
2188: PUSH
2189: LD_INT 5
2191: PLUS
2192: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2193: LD_VAR 0 1
2197: PPUSH
2198: CALL_OW 262
2202: PUSH
2203: LD_INT 2
2205: PUSH
2206: EMPTY
2207: LIST
2208: EQUAL
2209: IFFALSE 2225
// points := points + 15 ;
2211: LD_ADDR_VAR 0 3
2215: PUSH
2216: LD_VAR 0 3
2220: PUSH
2221: LD_INT 15
2223: PLUS
2224: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2225: LD_VAR 0 1
2229: PPUSH
2230: CALL_OW 262
2234: PUSH
2235: LD_INT 3
2237: PUSH
2238: EMPTY
2239: LIST
2240: EQUAL
2241: IFFALSE 2257
// points := points + 25 ;
2243: LD_ADDR_VAR 0 3
2247: PUSH
2248: LD_VAR 0 3
2252: PUSH
2253: LD_INT 25
2255: PLUS
2256: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 264
2266: PUSH
2267: LD_INT 22
2269: PUSH
2270: LD_INT 24
2272: PUSH
2273: LD_INT 23
2275: PUSH
2276: LD_INT 42
2278: PUSH
2279: LD_INT 2
2281: PUSH
2282: LD_INT 3
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: LIST
2291: LIST
2292: IN
2293: IFFALSE 2309
// points := points + 5 ;
2295: LD_ADDR_VAR 0 3
2299: PUSH
2300: LD_VAR 0 3
2304: PUSH
2305: LD_INT 5
2307: PLUS
2308: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2309: LD_VAR 0 1
2313: PPUSH
2314: CALL_OW 264
2318: PUSH
2319: LD_INT 25
2321: PUSH
2322: LD_INT 27
2324: PUSH
2325: LD_INT 43
2327: PUSH
2328: LD_INT 44
2330: PUSH
2331: LD_INT 4
2333: PUSH
2334: LD_INT 5
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: IN
2345: IFFALSE 2361
// points := points + 10 ;
2347: LD_ADDR_VAR 0 3
2351: PUSH
2352: LD_VAR 0 3
2356: PUSH
2357: LD_INT 10
2359: PLUS
2360: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2361: LD_VAR 0 1
2365: PPUSH
2366: CALL_OW 264
2370: PUSH
2371: LD_INT 28
2373: PUSH
2374: LD_INT 45
2376: PUSH
2377: LD_INT 7
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: LIST
2384: IN
2385: IFFALSE 2401
// points := points + 20 ;
2387: LD_ADDR_VAR 0 3
2391: PUSH
2392: LD_VAR 0 3
2396: PUSH
2397: LD_INT 20
2399: PLUS
2400: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2401: LD_VAR 0 1
2405: PPUSH
2406: CALL_OW 264
2410: PUSH
2411: LD_INT 46
2413: PUSH
2414: LD_INT 6
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: IN
2421: IFFALSE 2437
// points := points + 25 ;
2423: LD_ADDR_VAR 0 3
2427: PUSH
2428: LD_VAR 0 3
2432: PUSH
2433: LD_INT 25
2435: PLUS
2436: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2437: LD_VAR 0 1
2441: PPUSH
2442: CALL_OW 264
2446: PUSH
2447: LD_INT 9
2449: PUSH
2450: LD_INT 11
2452: PUSH
2453: LD_INT 30
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: IN
2461: IFFALSE 2477
// points := points + 30 ;
2463: LD_ADDR_VAR 0 3
2467: PUSH
2468: LD_VAR 0 3
2472: PUSH
2473: LD_INT 30
2475: PLUS
2476: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2477: LD_VAR 0 1
2481: PPUSH
2482: CALL_OW 264
2486: PUSH
2487: LD_INT 29
2489: PUSH
2490: LD_INT 49
2492: PUSH
2493: LD_INT 47
2495: PUSH
2496: LD_INT 10
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: IN
2505: IFFALSE 2521
// points := points + 50 ;
2507: LD_ADDR_VAR 0 3
2511: PUSH
2512: LD_VAR 0 3
2516: PUSH
2517: LD_INT 50
2519: PLUS
2520: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2521: LD_VAR 0 1
2525: PPUSH
2526: CALL_OW 264
2530: PUSH
2531: LD_INT 48
2533: PUSH
2534: LD_INT 8
2536: PUSH
2537: EMPTY
2538: LIST
2539: LIST
2540: IN
2541: IFFALSE 2557
// points := points + 100 ;
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 100
2555: PLUS
2556: ST_TO_ADDR
// result := points ;
2557: LD_ADDR_VAR 0 2
2561: PUSH
2562: LD_VAR 0 3
2566: ST_TO_ADDR
// end ; end_of_file
2567: LD_VAR 0 2
2571: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2572: LD_EXP 5
2576: IFFALSE 3227
2578: GO 2580
2580: DISABLE
2581: LD_INT 0
2583: PPUSH
2584: PPUSH
2585: PPUSH
2586: PPUSH
2587: PPUSH
// begin enable ;
2588: ENABLE
// if tick < 36 then
2589: LD_OWVAR 1
2593: PUSH
2594: LD_INT 36
2596: LESS
2597: IFFALSE 2609
// SetAreaMapShow ( exit_area , 1 ) ;
2599: LD_INT 4
2601: PPUSH
2602: LD_INT 1
2604: PPUSH
2605: CALL_OW 424
// time := time - 0 0$01 ;
2609: LD_ADDR_EXP 5
2613: PUSH
2614: LD_EXP 5
2618: PUSH
2619: LD_INT 35
2621: MINUS
2622: ST_TO_ADDR
// if time = 0 0$00 then
2623: LD_EXP 5
2627: PUSH
2628: LD_INT 0
2630: EQUAL
2631: IFFALSE 2700
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2633: LD_EXP 7
2637: PUSH
2638: LD_EXP 8
2642: GREATER
2643: IFFALSE 2657
2645: PUSH
2646: LD_EXP 7
2650: PUSH
2651: LD_EXP 9
2655: GREATER
2656: AND
2657: IFFALSE 2671
2659: PUSH
2660: LD_EXP 7
2664: PUSH
2665: LD_EXP 10
2669: GREATER
2670: AND
2671: IFFALSE 2685
2673: PUSH
2674: LD_EXP 7
2678: PUSH
2679: LD_EXP 11
2683: GREATER
2684: AND
2685: IFFALSE 2693
// YouWin else
2687: CALL_OW 103
2691: GO 2700
// YouLost (  ) ;
2693: LD_STRING 
2695: PPUSH
2696: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2700: LD_ADDR_VAR 0 1
2704: PUSH
2705: LD_INT 4
2707: PPUSH
2708: LD_INT 21
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PPUSH
2718: CALL_OW 70
2722: ST_TO_ADDR
// if filter then
2723: LD_VAR 0 1
2727: IFFALSE 3017
// for i = 1 to filter do
2729: LD_ADDR_VAR 0 2
2733: PUSH
2734: DOUBLE
2735: LD_INT 1
2737: DEC
2738: ST_TO_ADDR
2739: LD_VAR 0 1
2743: PUSH
2744: FOR_TO
2745: IFFALSE 3015
// begin side := GetSide ( filter [ i ] ) ;
2747: LD_ADDR_VAR 0 3
2751: PUSH
2752: LD_VAR 0 1
2756: PUSH
2757: LD_VAR 0 2
2761: ARRAY
2762: PPUSH
2763: CALL_OW 255
2767: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2768: LD_ADDR_VAR 0 4
2772: PUSH
2773: LD_VAR 0 1
2777: PUSH
2778: LD_VAR 0 2
2782: ARRAY
2783: PPUSH
2784: CALL_OW 311
2788: ST_TO_ADDR
// un := filter [ i ] ;
2789: LD_ADDR_VAR 0 5
2793: PUSH
2794: LD_VAR 0 1
2798: PUSH
2799: LD_VAR 0 2
2803: ARRAY
2804: ST_TO_ADDR
// if IsInUnit ( driver ) then
2805: LD_VAR 0 4
2809: PPUSH
2810: CALL_OW 310
2814: IFFALSE 2825
// ComExitVehicle ( driver ) ;
2816: LD_VAR 0 4
2820: PPUSH
2821: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2825: LD_INT 10
2827: PPUSH
2828: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2832: LD_VAR 0 1
2836: PUSH
2837: LD_VAR 0 2
2841: ARRAY
2842: PPUSH
2843: CALL_OW 64
// case side of 1 :
2847: LD_VAR 0 3
2851: PUSH
2852: LD_INT 1
2854: DOUBLE
2855: EQUAL
2856: IFTRUE 2860
2858: GO 2884
2860: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2861: LD_ADDR_EXP 7
2865: PUSH
2866: LD_EXP 7
2870: PUSH
2871: LD_VAR 0 5
2875: PPUSH
2876: CALL 1957 0 1
2880: PLUS
2881: ST_TO_ADDR
2882: GO 3013
2884: LD_INT 2
2886: DOUBLE
2887: EQUAL
2888: IFTRUE 2892
2890: GO 2916
2892: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2893: LD_ADDR_EXP 8
2897: PUSH
2898: LD_EXP 8
2902: PUSH
2903: LD_VAR 0 5
2907: PPUSH
2908: CALL 1957 0 1
2912: PLUS
2913: ST_TO_ADDR
2914: GO 3013
2916: LD_INT 3
2918: DOUBLE
2919: EQUAL
2920: IFTRUE 2924
2922: GO 2948
2924: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2925: LD_ADDR_EXP 9
2929: PUSH
2930: LD_EXP 9
2934: PUSH
2935: LD_VAR 0 5
2939: PPUSH
2940: CALL 1957 0 1
2944: PLUS
2945: ST_TO_ADDR
2946: GO 3013
2948: LD_INT 4
2950: DOUBLE
2951: EQUAL
2952: IFTRUE 2956
2954: GO 2980
2956: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2957: LD_ADDR_EXP 10
2961: PUSH
2962: LD_EXP 10
2966: PUSH
2967: LD_VAR 0 5
2971: PPUSH
2972: CALL 1957 0 1
2976: PLUS
2977: ST_TO_ADDR
2978: GO 3013
2980: LD_INT 5
2982: DOUBLE
2983: EQUAL
2984: IFTRUE 2988
2986: GO 3012
2988: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2989: LD_ADDR_EXP 11
2993: PUSH
2994: LD_EXP 11
2998: PUSH
2999: LD_VAR 0 5
3003: PPUSH
3004: CALL 1957 0 1
3008: PLUS
3009: ST_TO_ADDR
3010: GO 3013
3012: POP
// end ;
3013: GO 2744
3015: POP
3016: POP
// case players of 3 :
3017: LD_EXP 3
3021: PUSH
3022: LD_INT 3
3024: DOUBLE
3025: EQUAL
3026: IFTRUE 3030
3028: GO 3080
3030: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3031: LD_ADDR_OWVAR 47
3035: PUSH
3036: LD_STRING #tick
3038: PUSH
3039: LD_EXP 5
3043: PUSH
3044: LD_STRING #player1
3046: PUSH
3047: LD_EXP 7
3051: PUSH
3052: LD_STRING #player2
3054: PUSH
3055: LD_EXP 8
3059: PUSH
3060: LD_STRING #player3
3062: PUSH
3063: LD_EXP 9
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: LIST
3076: LIST
3077: ST_TO_ADDR
// end ; 4 :
3078: GO 3227
3080: LD_INT 4
3082: DOUBLE
3083: EQUAL
3084: IFTRUE 3088
3086: GO 3148
3088: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3089: LD_ADDR_OWVAR 47
3093: PUSH
3094: LD_STRING #tick
3096: PUSH
3097: LD_EXP 5
3101: PUSH
3102: LD_STRING #player1
3104: PUSH
3105: LD_EXP 7
3109: PUSH
3110: LD_STRING #player2
3112: PUSH
3113: LD_EXP 8
3117: PUSH
3118: LD_STRING #player3
3120: PUSH
3121: LD_EXP 9
3125: PUSH
3126: LD_STRING #player4
3128: PUSH
3129: LD_EXP 10
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: ST_TO_ADDR
// end ; 5 :
3146: GO 3227
3148: LD_INT 5
3150: DOUBLE
3151: EQUAL
3152: IFTRUE 3156
3154: GO 3226
3156: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3157: LD_ADDR_OWVAR 47
3161: PUSH
3162: LD_STRING #tick
3164: PUSH
3165: LD_EXP 5
3169: PUSH
3170: LD_STRING #player1
3172: PUSH
3173: LD_EXP 7
3177: PUSH
3178: LD_STRING #player2
3180: PUSH
3181: LD_EXP 8
3185: PUSH
3186: LD_STRING #player3
3188: PUSH
3189: LD_EXP 9
3193: PUSH
3194: LD_STRING #player4
3196: PUSH
3197: LD_EXP 10
3201: PUSH
3202: LD_STRING #player5
3204: PUSH
3205: LD_EXP 11
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: ST_TO_ADDR
// end ; end ;
3224: GO 3227
3226: POP
// end ;
3227: PPOPN 5
3229: END
// every 0 0$05 trigger time do var chance , p ;
3230: LD_EXP 5
3234: IFFALSE 3383
3236: GO 3238
3238: DISABLE
3239: LD_INT 0
3241: PPUSH
3242: PPUSH
// begin enable ;
3243: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3244: LD_INT 35
3246: PPUSH
3247: LD_INT 210
3249: PPUSH
3250: CALL_OW 12
3254: PPUSH
3255: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3259: LD_INT 21
3261: PUSH
3262: LD_INT 2
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: PPUSH
3269: CALL_OW 69
3273: PUSH
3274: LD_EXP 6
3278: LESS
3279: IFFALSE 3383
// begin SpawnCar ( false , veh_spawn ) ;
3281: LD_INT 0
3283: PPUSH
3284: LD_INT 5
3286: PPUSH
3287: CALL 950 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3291: LD_EXP 4
3295: IFFALSE 3338
3297: PUSH
3298: LD_INT 2
3300: PUSH
3301: LD_INT 34
3303: PUSH
3304: LD_INT 8
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: PUSH
3311: LD_INT 34
3313: PUSH
3314: LD_INT 48
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PPUSH
3329: CALL_OW 69
3333: PUSH
3334: LD_INT 0
3336: EQUAL
3337: AND
3338: IFFALSE 3383
// begin chance := 23 ;
3340: LD_ADDR_VAR 0 1
3344: PUSH
3345: LD_INT 23
3347: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3348: LD_ADDR_VAR 0 2
3352: PUSH
3353: LD_INT 0
3355: PPUSH
3356: LD_INT 100
3358: PPUSH
3359: CALL_OW 12
3363: ST_TO_ADDR
// if p < chance then
3364: LD_VAR 0 2
3368: PUSH
3369: LD_VAR 0 1
3373: LESS
3374: IFFALSE 3383
// SpawnSibRocket ( veh_spawn ) ;
3376: LD_INT 5
3378: PPUSH
3379: CALL 1788 0 1
// end ; end ; end ; end_of_file
3383: PPOPN 2
3385: END
// export function SOS_UnitDestroyed ( un ) ; begin
3386: LD_INT 0
3388: PPUSH
// ComRadiation ( un ) ;
3389: LD_VAR 0 1
3393: PPUSH
3394: CALL 4556 0 1
// end ;
3398: LD_VAR 0 2
3402: RET
// export function SOS_UnitKamikazed ( un ) ; begin
3403: LD_INT 0
3405: PPUSH
// ComRadiation ( un ) ;
3406: LD_VAR 0 1
3410: PPUSH
3411: CALL 4556 0 1
// end ;
3415: LD_VAR 0 2
3419: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3420: LD_INT 0
3422: PPUSH
// end ;
3423: LD_VAR 0 4
3427: RET
// export function SOS_Command ( cmd ) ; begin
3428: LD_INT 0
3430: PPUSH
// end ;
3431: LD_VAR 0 2
3435: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3436: LD_INT 0
3438: PPUSH
// end ;
3439: LD_VAR 0 6
3443: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
3444: LD_INT 0
3446: PPUSH
3447: PPUSH
3448: PPUSH
3449: PPUSH
3450: PPUSH
// if not vehicle or not factory then
3451: LD_VAR 0 1
3455: NOT
3456: IFTRUE 3465
3458: PUSH
3459: LD_VAR 0 2
3463: NOT
3464: OR
3465: IFFALSE 3469
// exit ;
3467: GO 4131
// weapon := GetWeapon ( vehicle ) ;
3469: LD_ADDR_VAR 0 7
3473: PUSH
3474: LD_VAR 0 1
3478: PPUSH
3479: CALL_OW 264
3483: ST_TO_ADDR
// if weapon = ar_miner then
3484: LD_VAR 0 7
3488: PUSH
3489: LD_INT 81
3491: EQUAL
3492: IFFALSE 3549
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
3494: LD_ADDR_EXP 19
3498: PUSH
3499: LD_EXP 19
3503: PPUSH
3504: LD_EXP 19
3508: PUSH
3509: LD_INT 1
3511: PLUS
3512: PPUSH
3513: LD_VAR 0 1
3517: PPUSH
3518: CALL_OW 1
3522: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
3523: LD_ADDR_EXP 20
3527: PUSH
3528: LD_EXP 20
3532: PPUSH
3533: LD_EXP 20
3537: PUSH
3538: LD_INT 1
3540: PLUS
3541: PPUSH
3542: EMPTY
3543: PPUSH
3544: CALL_OW 1
3548: ST_TO_ADDR
// end ; if not factoryWaypoints then
3549: LD_EXP 81
3553: NOT
3554: IFFALSE 3558
// exit ;
3556: GO 4131
// for i := 1 to Count ( factoryWaypoints ) do
3558: LD_ADDR_VAR 0 4
3562: PUSH
3563: DOUBLE
3564: LD_INT 1
3566: DEC
3567: ST_TO_ADDR
3568: LD_EXP 81
3572: PPUSH
3573: CALL 28170 0 1
3577: PUSH
3578: FOR_TO
3579: IFFALSE 4129
// if factoryWaypoints [ i ] [ 2 ] = factory then
3581: LD_EXP 81
3585: PUSH
3586: LD_VAR 0 4
3590: ARRAY
3591: PUSH
3592: LD_INT 2
3594: ARRAY
3595: PUSH
3596: LD_VAR 0 2
3600: EQUAL
3601: IFFALSE 4127
// begin if GetControl ( vehicle ) = control_manual then
3603: LD_VAR 0 1
3607: PPUSH
3608: CALL_OW 263
3612: PUSH
3613: LD_INT 1
3615: EQUAL
3616: IFFALSE 3980
// begin driver := IsDrivenBy ( vehicle ) ;
3618: LD_ADDR_VAR 0 5
3622: PUSH
3623: LD_VAR 0 1
3627: PPUSH
3628: CALL_OW 311
3632: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
3633: LD_VAR 0 5
3637: PUSH
3638: LD_EXP 82
3642: IN
3643: IFTRUE 3657
3645: PUSH
3646: LD_VAR 0 1
3650: PUSH
3651: LD_EXP 82
3655: IN
3656: OR
3657: IFFALSE 3663
// exit ;
3659: POP
3660: POP
3661: GO 4131
// if not HasTask ( driver ) then
3663: LD_VAR 0 5
3667: PPUSH
3668: CALL_OW 314
3672: NOT
3673: IFFALSE 3978
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
3675: LD_ADDR_EXP 82
3679: PUSH
3680: LD_EXP 82
3684: PPUSH
3685: LD_VAR 0 5
3689: PPUSH
3690: CALL 64146 0 2
3694: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
3695: LD_ADDR_EXP 82
3699: PUSH
3700: LD_EXP 82
3704: PPUSH
3705: LD_VAR 0 1
3709: PPUSH
3710: CALL 64146 0 2
3714: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
3715: LD_ADDR_VAR 0 6
3719: PUSH
3720: LD_EXP 81
3724: PUSH
3725: LD_VAR 0 4
3729: ARRAY
3730: PUSH
3731: LD_INT 3
3733: ARRAY
3734: PPUSH
3735: LD_EXP 81
3739: PUSH
3740: LD_VAR 0 4
3744: ARRAY
3745: PUSH
3746: LD_INT 4
3748: ARRAY
3749: PPUSH
3750: CALL_OW 428
3754: ST_TO_ADDR
// if hex then
3755: LD_VAR 0 6
3759: IFFALSE 3777
// ComMoveUnit ( driver , hex ) else
3761: LD_VAR 0 5
3765: PPUSH
3766: LD_VAR 0 6
3770: PPUSH
3771: CALL_OW 112
3775: GO 3861
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
3777: LD_VAR 0 1
3781: PPUSH
3782: LD_EXP 81
3786: PUSH
3787: LD_VAR 0 4
3791: ARRAY
3792: PUSH
3793: LD_INT 3
3795: ARRAY
3796: PPUSH
3797: LD_EXP 81
3801: PUSH
3802: LD_VAR 0 4
3806: ARRAY
3807: PUSH
3808: LD_INT 4
3810: ARRAY
3811: PPUSH
3812: CALL_OW 297
3816: PUSH
3817: LD_INT 0
3819: GREATER
3820: IFFALSE 3861
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
3822: LD_VAR 0 5
3826: PPUSH
3827: LD_EXP 81
3831: PUSH
3832: LD_VAR 0 4
3836: ARRAY
3837: PUSH
3838: LD_INT 3
3840: ARRAY
3841: PPUSH
3842: LD_EXP 81
3846: PUSH
3847: LD_VAR 0 4
3851: ARRAY
3852: PUSH
3853: LD_INT 4
3855: ARRAY
3856: PPUSH
3857: CALL_OW 111
// AddComExitVehicle ( driver ) ;
3861: LD_VAR 0 5
3865: PPUSH
3866: CALL_OW 181
// if Multiplayer then
3870: LD_OWVAR 4
3874: IFFALSE 3923
// begin repeat wait ( 10 ) ;
3876: LD_INT 10
3878: PPUSH
3879: CALL_OW 67
// until not IsInUnit ( driver ) ;
3883: LD_VAR 0 5
3887: PPUSH
3888: CALL_OW 310
3892: NOT
3893: IFFALSE 3876
// if not HasTask ( driver ) then
3895: LD_VAR 0 5
3899: PPUSH
3900: CALL_OW 314
3904: NOT
3905: IFFALSE 3921
// ComEnterUnit ( driver , factory ) ;
3907: LD_VAR 0 5
3911: PPUSH
3912: LD_VAR 0 2
3916: PPUSH
3917: CALL_OW 120
// end else
3921: GO 3937
// AddComEnterUnit ( driver , factory ) ;
3923: LD_VAR 0 5
3927: PPUSH
3928: LD_VAR 0 2
3932: PPUSH
3933: CALL_OW 180
// wait ( 0 0$1 ) ;
3937: LD_INT 35
3939: PPUSH
3940: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
3944: LD_ADDR_EXP 82
3948: PUSH
3949: LD_EXP 82
3953: PUSH
3954: LD_VAR 0 5
3958: DIFF
3959: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
3960: LD_ADDR_EXP 82
3964: PUSH
3965: LD_EXP 82
3969: PUSH
3970: LD_VAR 0 1
3974: DIFF
3975: ST_TO_ADDR
// break ;
3976: GO 4129
// end ; end else
3978: GO 4127
// if GetControl ( vehicle ) = control_remote then
3980: LD_VAR 0 1
3984: PPUSH
3985: CALL_OW 263
3989: PUSH
3990: LD_INT 2
3992: EQUAL
3993: IFFALSE 4079
// begin wait ( 0 0$2 ) ;
3995: LD_INT 70
3997: PPUSH
3998: CALL_OW 67
// repeat wait ( 10 ) ;
4002: LD_INT 10
4004: PPUSH
4005: CALL_OW 67
// Connect ( vehicle ) ;
4009: LD_VAR 0 1
4013: PPUSH
4014: CALL 34448 0 1
// until IsControledBy ( vehicle ) ;
4018: LD_VAR 0 1
4022: PPUSH
4023: CALL_OW 312
4027: IFFALSE 4002
// wait ( 10 ) ;
4029: LD_INT 10
4031: PPUSH
4032: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
4036: LD_VAR 0 1
4040: PPUSH
4041: LD_EXP 81
4045: PUSH
4046: LD_VAR 0 4
4050: ARRAY
4051: PUSH
4052: LD_INT 3
4054: ARRAY
4055: PPUSH
4056: LD_EXP 81
4060: PUSH
4061: LD_VAR 0 4
4065: ARRAY
4066: PUSH
4067: LD_INT 4
4069: ARRAY
4070: PPUSH
4071: CALL_OW 111
// break ;
4075: GO 4129
// end else
4077: GO 4127
// begin wait ( 0 0$3 ) ;
4079: LD_INT 105
4081: PPUSH
4082: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
4086: LD_VAR 0 1
4090: PPUSH
4091: LD_EXP 81
4095: PUSH
4096: LD_VAR 0 4
4100: ARRAY
4101: PUSH
4102: LD_INT 3
4104: ARRAY
4105: PPUSH
4106: LD_EXP 81
4110: PUSH
4111: LD_VAR 0 4
4115: ARRAY
4116: PUSH
4117: LD_INT 4
4119: ARRAY
4120: PPUSH
4121: CALL_OW 111
// break ;
4125: GO 4129
// end ; end ;
4127: GO 3578
4129: POP
4130: POP
// end ;
4131: LD_VAR 0 3
4135: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
4136: LD_INT 0
4138: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
4139: LD_VAR 0 1
4143: PUSH
4144: LD_INT 250
4146: EQUAL
4147: IFFALSE 4164
4149: PUSH
4150: LD_VAR 0 2
4154: PPUSH
4155: CALL_OW 264
4159: PUSH
4160: LD_INT 81
4162: EQUAL
4163: AND
4164: IFFALSE 4185
// MinerPlaceMine ( unit , x , y ) ;
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_VAR 0 4
4175: PPUSH
4176: LD_VAR 0 5
4180: PPUSH
4181: CALL 7531 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
4185: LD_VAR 0 1
4189: PUSH
4190: LD_INT 251
4192: EQUAL
4193: IFFALSE 4210
4195: PUSH
4196: LD_VAR 0 2
4200: PPUSH
4201: CALL_OW 264
4205: PUSH
4206: LD_INT 81
4208: EQUAL
4209: AND
4210: IFFALSE 4231
// MinerDetonateMine ( unit , x , y ) ;
4212: LD_VAR 0 2
4216: PPUSH
4217: LD_VAR 0 4
4221: PPUSH
4222: LD_VAR 0 5
4226: PPUSH
4227: CALL 7938 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
4231: LD_VAR 0 1
4235: PUSH
4236: LD_INT 252
4238: EQUAL
4239: IFFALSE 4256
4241: PUSH
4242: LD_VAR 0 2
4246: PPUSH
4247: CALL_OW 264
4251: PUSH
4252: LD_INT 81
4254: EQUAL
4255: AND
4256: IFFALSE 4277
// MinerCreateMinefield ( unit , x , y ) ;
4258: LD_VAR 0 2
4262: PPUSH
4263: LD_VAR 0 4
4267: PPUSH
4268: LD_VAR 0 5
4272: PPUSH
4273: CALL 8170 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
4277: LD_VAR 0 1
4281: PUSH
4282: LD_INT 253
4284: EQUAL
4285: IFFALSE 4302
4287: PUSH
4288: LD_VAR 0 2
4292: PPUSH
4293: CALL_OW 257
4297: PUSH
4298: LD_INT 5
4300: EQUAL
4301: AND
4302: IFFALSE 4323
// ComBinocular ( unit , x , y ) ;
4304: LD_VAR 0 2
4308: PPUSH
4309: LD_VAR 0 4
4313: PPUSH
4314: LD_VAR 0 5
4318: PPUSH
4319: CALL 8545 0 3
// if selectedUnit then
4323: LD_VAR 0 3
4327: IFFALSE 4387
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
4329: LD_VAR 0 1
4333: PUSH
4334: LD_INT 254
4336: EQUAL
4337: IFFALSE 4354
4339: PUSH
4340: LD_VAR 0 2
4344: PPUSH
4345: CALL_OW 264
4349: PUSH
4350: LD_INT 99
4352: EQUAL
4353: AND
4354: IFFALSE 4371
4356: PUSH
4357: LD_VAR 0 3
4361: PPUSH
4362: CALL_OW 263
4366: PUSH
4367: LD_INT 3
4369: EQUAL
4370: AND
4371: IFFALSE 4387
// HackDestroyVehicle ( unit , selectedUnit ) ;
4373: LD_VAR 0 2
4377: PPUSH
4378: LD_VAR 0 3
4382: PPUSH
4383: CALL 6721 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
4387: LD_VAR 0 1
4391: PUSH
4392: LD_INT 255
4394: EQUAL
4395: IFFALSE 4419
4397: PUSH
4398: LD_VAR 0 2
4402: PPUSH
4403: CALL_OW 264
4407: PUSH
4408: LD_INT 14
4410: PUSH
4411: LD_INT 53
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: IN
4418: AND
4419: IFFALSE 4437
4421: PUSH
4422: LD_VAR 0 4
4426: PPUSH
4427: LD_VAR 0 5
4431: PPUSH
4432: CALL_OW 488
4436: AND
4437: IFFALSE 4461
// CutTreeXYR ( unit , x , y , 12 ) ;
4439: LD_VAR 0 2
4443: PPUSH
4444: LD_VAR 0 4
4448: PPUSH
4449: LD_VAR 0 5
4453: PPUSH
4454: LD_INT 12
4456: PPUSH
4457: CALL 4652 0 4
// if cmd = 256 then
4461: LD_VAR 0 1
4465: PUSH
4466: LD_INT 256
4468: EQUAL
4469: IFFALSE 4490
// SetFactoryWaypoint ( unit , x , y ) ;
4471: LD_VAR 0 2
4475: PPUSH
4476: LD_VAR 0 4
4480: PPUSH
4481: LD_VAR 0 5
4485: PPUSH
4486: CALL 24491 0 3
// if cmd = 257 then
4490: LD_VAR 0 1
4494: PUSH
4495: LD_INT 257
4497: EQUAL
4498: IFFALSE 4519
// SetWarehouseGatheringPoint ( unit , x , y ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_VAR 0 4
4509: PPUSH
4510: LD_VAR 0 5
4514: PPUSH
4515: CALL 24987 0 3
// if cmd = 258 then
4519: LD_VAR 0 1
4523: PUSH
4524: LD_INT 258
4526: EQUAL
4527: IFFALSE 4551
// BurnTreeXYR ( unit , x , y , 8 ) ;
4529: LD_VAR 0 2
4533: PPUSH
4534: LD_VAR 0 4
4538: PPUSH
4539: LD_VAR 0 5
4543: PPUSH
4544: LD_INT 8
4546: PPUSH
4547: CALL 5074 0 4
// end ;
4551: LD_VAR 0 6
4555: RET
// export function ComRadiation ( un ) ; var eff ; begin
4556: LD_INT 0
4558: PPUSH
4559: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 264
4569: PUSH
4570: LD_INT 91
4572: NONEQUAL
4573: IFFALSE 4577
// exit ;
4575: GO 4647
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
4577: LD_INT 68
4579: PPUSH
4580: LD_VAR 0 1
4584: PPUSH
4585: CALL_OW 255
4589: PPUSH
4590: CALL_OW 321
4594: PUSH
4595: LD_INT 2
4597: EQUAL
4598: IFFALSE 4610
// eff := 50 else
4600: LD_ADDR_VAR 0 3
4604: PUSH
4605: LD_INT 50
4607: ST_TO_ADDR
4608: GO 4618
// eff := 25 ;
4610: LD_ADDR_VAR 0 3
4614: PUSH
4615: LD_INT 25
4617: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
4618: LD_VAR 0 1
4622: PPUSH
4623: CALL_OW 250
4627: PPUSH
4628: LD_VAR 0 1
4632: PPUSH
4633: CALL_OW 251
4637: PPUSH
4638: LD_VAR 0 3
4642: PPUSH
4643: CALL_OW 495
// end ;
4647: LD_VAR 0 2
4651: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
4652: LD_INT 0
4654: PPUSH
4655: PPUSH
4656: PPUSH
4657: PPUSH
4658: PPUSH
4659: PPUSH
4660: PPUSH
4661: PPUSH
4662: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
4663: LD_VAR 0 1
4667: PPUSH
4668: CALL_OW 302
4672: NOT
4673: IFTRUE 4692
4675: PUSH
4676: LD_VAR 0 2
4680: PPUSH
4681: LD_VAR 0 3
4685: PPUSH
4686: CALL_OW 488
4690: NOT
4691: OR
4692: IFTRUE 4701
4694: PUSH
4695: LD_VAR 0 4
4699: NOT
4700: OR
4701: IFFALSE 4705
// exit ;
4703: GO 5069
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
4705: LD_VAR 0 1
4709: PPUSH
4710: CALL_OW 437
4714: PPUSH
4715: CALL 28170 0 1
4719: PUSH
4720: LD_INT 10
4722: GREATER
4723: IFFALSE 4727
// exit ;
4725: GO 5069
// list := [ ] ;
4727: LD_ADDR_VAR 0 13
4731: PUSH
4732: EMPTY
4733: ST_TO_ADDR
// if x - r < 0 then
4734: LD_VAR 0 2
4738: PUSH
4739: LD_VAR 0 4
4743: MINUS
4744: PUSH
4745: LD_INT 0
4747: LESS
4748: IFFALSE 4760
// min_x := 0 else
4750: LD_ADDR_VAR 0 7
4754: PUSH
4755: LD_INT 0
4757: ST_TO_ADDR
4758: GO 4776
// min_x := x - r ;
4760: LD_ADDR_VAR 0 7
4764: PUSH
4765: LD_VAR 0 2
4769: PUSH
4770: LD_VAR 0 4
4774: MINUS
4775: ST_TO_ADDR
// if y - r < 0 then
4776: LD_VAR 0 3
4780: PUSH
4781: LD_VAR 0 4
4785: MINUS
4786: PUSH
4787: LD_INT 0
4789: LESS
4790: IFFALSE 4802
// min_y := 0 else
4792: LD_ADDR_VAR 0 8
4796: PUSH
4797: LD_INT 0
4799: ST_TO_ADDR
4800: GO 4818
// min_y := y - r ;
4802: LD_ADDR_VAR 0 8
4806: PUSH
4807: LD_VAR 0 3
4811: PUSH
4812: LD_VAR 0 4
4816: MINUS
4817: ST_TO_ADDR
// max_x := x + r ;
4818: LD_ADDR_VAR 0 9
4822: PUSH
4823: LD_VAR 0 2
4827: PUSH
4828: LD_VAR 0 4
4832: PLUS
4833: ST_TO_ADDR
// max_y := y + r ;
4834: LD_ADDR_VAR 0 10
4838: PUSH
4839: LD_VAR 0 3
4843: PUSH
4844: LD_VAR 0 4
4848: PLUS
4849: ST_TO_ADDR
// for _x = min_x to max_x do
4850: LD_ADDR_VAR 0 11
4854: PUSH
4855: DOUBLE
4856: LD_VAR 0 7
4860: DEC
4861: ST_TO_ADDR
4862: LD_VAR 0 9
4866: PUSH
4867: FOR_TO
4868: IFFALSE 4987
// for _y = min_y to max_y do
4870: LD_ADDR_VAR 0 12
4874: PUSH
4875: DOUBLE
4876: LD_VAR 0 8
4880: DEC
4881: ST_TO_ADDR
4882: LD_VAR 0 10
4886: PUSH
4887: FOR_TO
4888: IFFALSE 4983
// begin if not ValidHex ( _x , _y ) then
4890: LD_VAR 0 11
4894: PPUSH
4895: LD_VAR 0 12
4899: PPUSH
4900: CALL_OW 488
4904: NOT
4905: IFFALSE 4909
// continue ;
4907: GO 4887
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4909: LD_VAR 0 11
4913: PPUSH
4914: LD_VAR 0 12
4918: PPUSH
4919: CALL_OW 351
4923: IFFALSE 4941
4925: PUSH
4926: LD_VAR 0 11
4930: PPUSH
4931: LD_VAR 0 12
4935: PPUSH
4936: CALL_OW 554
4940: AND
4941: IFFALSE 4981
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4943: LD_ADDR_VAR 0 13
4947: PUSH
4948: LD_VAR 0 13
4952: PPUSH
4953: LD_VAR 0 13
4957: PUSH
4958: LD_INT 1
4960: PLUS
4961: PPUSH
4962: LD_VAR 0 11
4966: PUSH
4967: LD_VAR 0 12
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PPUSH
4976: CALL_OW 2
4980: ST_TO_ADDR
// end ;
4981: GO 4887
4983: POP
4984: POP
4985: GO 4867
4987: POP
4988: POP
// if not list then
4989: LD_VAR 0 13
4993: NOT
4994: IFFALSE 4998
// exit ;
4996: GO 5069
// for i in list do
4998: LD_ADDR_VAR 0 6
5002: PUSH
5003: LD_VAR 0 13
5007: PUSH
5008: FOR_IN
5009: IFFALSE 5067
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
5011: LD_VAR 0 1
5015: PPUSH
5016: LD_STRING M
5018: PUSH
5019: LD_VAR 0 6
5023: PUSH
5024: LD_INT 1
5026: ARRAY
5027: PUSH
5028: LD_VAR 0 6
5032: PUSH
5033: LD_INT 2
5035: ARRAY
5036: PUSH
5037: LD_INT 0
5039: PUSH
5040: LD_INT 0
5042: PUSH
5043: LD_INT 0
5045: PUSH
5046: LD_INT 0
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: PUSH
5058: EMPTY
5059: LIST
5060: PPUSH
5061: CALL_OW 447
5065: GO 5008
5067: POP
5068: POP
// end ;
5069: LD_VAR 0 5
5073: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
5074: LD_INT 0
5076: PPUSH
5077: PPUSH
5078: PPUSH
5079: PPUSH
5080: PPUSH
5081: PPUSH
5082: PPUSH
5083: PPUSH
5084: PPUSH
5085: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
5086: LD_VAR 0 1
5090: PPUSH
5091: CALL_OW 302
5095: NOT
5096: IFTRUE 5115
5098: PUSH
5099: LD_VAR 0 2
5103: PPUSH
5104: LD_VAR 0 3
5108: PPUSH
5109: CALL_OW 488
5113: NOT
5114: OR
5115: IFTRUE 5124
5117: PUSH
5118: LD_VAR 0 4
5122: NOT
5123: OR
5124: IFFALSE 5128
// exit ;
5126: GO 5667
// if Count ( GetTaskList ( flame ) ) > 10 then
5128: LD_VAR 0 1
5132: PPUSH
5133: CALL_OW 437
5137: PPUSH
5138: CALL 28170 0 1
5142: PUSH
5143: LD_INT 10
5145: GREATER
5146: IFFALSE 5150
// exit ;
5148: GO 5667
// list := [ ] ;
5150: LD_ADDR_VAR 0 13
5154: PUSH
5155: EMPTY
5156: ST_TO_ADDR
// if x - r < 0 then
5157: LD_VAR 0 2
5161: PUSH
5162: LD_VAR 0 4
5166: MINUS
5167: PUSH
5168: LD_INT 0
5170: LESS
5171: IFFALSE 5183
// min_x := 0 else
5173: LD_ADDR_VAR 0 7
5177: PUSH
5178: LD_INT 0
5180: ST_TO_ADDR
5181: GO 5199
// min_x := x - r ;
5183: LD_ADDR_VAR 0 7
5187: PUSH
5188: LD_VAR 0 2
5192: PUSH
5193: LD_VAR 0 4
5197: MINUS
5198: ST_TO_ADDR
// if y - r < 0 then
5199: LD_VAR 0 3
5203: PUSH
5204: LD_VAR 0 4
5208: MINUS
5209: PUSH
5210: LD_INT 0
5212: LESS
5213: IFFALSE 5225
// min_y := 0 else
5215: LD_ADDR_VAR 0 8
5219: PUSH
5220: LD_INT 0
5222: ST_TO_ADDR
5223: GO 5241
// min_y := y - r ;
5225: LD_ADDR_VAR 0 8
5229: PUSH
5230: LD_VAR 0 3
5234: PUSH
5235: LD_VAR 0 4
5239: MINUS
5240: ST_TO_ADDR
// max_x := x + r ;
5241: LD_ADDR_VAR 0 9
5245: PUSH
5246: LD_VAR 0 2
5250: PUSH
5251: LD_VAR 0 4
5255: PLUS
5256: ST_TO_ADDR
// max_y := y + r ;
5257: LD_ADDR_VAR 0 10
5261: PUSH
5262: LD_VAR 0 3
5266: PUSH
5267: LD_VAR 0 4
5271: PLUS
5272: ST_TO_ADDR
// for _x = min_x to max_x do
5273: LD_ADDR_VAR 0 11
5277: PUSH
5278: DOUBLE
5279: LD_VAR 0 7
5283: DEC
5284: ST_TO_ADDR
5285: LD_VAR 0 9
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5410
// for _y = min_y to max_y do
5293: LD_ADDR_VAR 0 12
5297: PUSH
5298: DOUBLE
5299: LD_VAR 0 8
5303: DEC
5304: ST_TO_ADDR
5305: LD_VAR 0 10
5309: PUSH
5310: FOR_TO
5311: IFFALSE 5406
// begin if not ValidHex ( _x , _y ) then
5313: LD_VAR 0 11
5317: PPUSH
5318: LD_VAR 0 12
5322: PPUSH
5323: CALL_OW 488
5327: NOT
5328: IFFALSE 5332
// continue ;
5330: GO 5310
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
5332: LD_VAR 0 11
5336: PPUSH
5337: LD_VAR 0 12
5341: PPUSH
5342: CALL_OW 351
5346: IFFALSE 5364
5348: PUSH
5349: LD_VAR 0 11
5353: PPUSH
5354: LD_VAR 0 12
5358: PPUSH
5359: CALL_OW 554
5363: AND
5364: IFFALSE 5404
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
5366: LD_ADDR_VAR 0 13
5370: PUSH
5371: LD_VAR 0 13
5375: PPUSH
5376: LD_VAR 0 13
5380: PUSH
5381: LD_INT 1
5383: PLUS
5384: PPUSH
5385: LD_VAR 0 11
5389: PUSH
5390: LD_VAR 0 12
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 2
5403: ST_TO_ADDR
// end ;
5404: GO 5310
5406: POP
5407: POP
5408: GO 5290
5410: POP
5411: POP
// if not list then
5412: LD_VAR 0 13
5416: NOT
5417: IFFALSE 5421
// exit ;
5419: GO 5667
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
5421: LD_ADDR_VAR 0 13
5425: PUSH
5426: LD_VAR 0 1
5430: PPUSH
5431: LD_VAR 0 13
5435: PPUSH
5436: LD_INT 1
5438: PPUSH
5439: LD_INT 1
5441: PPUSH
5442: CALL 31576 0 4
5446: ST_TO_ADDR
// ComStop ( flame ) ;
5447: LD_VAR 0 1
5451: PPUSH
5452: CALL_OW 141
// for i in list do
5456: LD_ADDR_VAR 0 6
5460: PUSH
5461: LD_VAR 0 13
5465: PUSH
5466: FOR_IN
5467: IFFALSE 5498
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
5469: LD_VAR 0 1
5473: PPUSH
5474: LD_VAR 0 6
5478: PUSH
5479: LD_INT 1
5481: ARRAY
5482: PPUSH
5483: LD_VAR 0 6
5487: PUSH
5488: LD_INT 2
5490: ARRAY
5491: PPUSH
5492: CALL_OW 176
5496: GO 5466
5498: POP
5499: POP
// repeat wait ( 0 0$1 ) ;
5500: LD_INT 35
5502: PPUSH
5503: CALL_OW 67
// task := GetTaskList ( flame ) ;
5507: LD_ADDR_VAR 0 14
5511: PUSH
5512: LD_VAR 0 1
5516: PPUSH
5517: CALL_OW 437
5521: ST_TO_ADDR
// if not task then
5522: LD_VAR 0 14
5526: NOT
5527: IFFALSE 5531
// exit ;
5529: GO 5667
// if task [ 1 ] [ 1 ] <> | then
5531: LD_VAR 0 14
5535: PUSH
5536: LD_INT 1
5538: ARRAY
5539: PUSH
5540: LD_INT 1
5542: ARRAY
5543: PUSH
5544: LD_STRING |
5546: NONEQUAL
5547: IFFALSE 5551
// exit ;
5549: GO 5667
// _x := task [ 1 ] [ 2 ] ;
5551: LD_ADDR_VAR 0 11
5555: PUSH
5556: LD_VAR 0 14
5560: PUSH
5561: LD_INT 1
5563: ARRAY
5564: PUSH
5565: LD_INT 2
5567: ARRAY
5568: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
5569: LD_ADDR_VAR 0 12
5573: PUSH
5574: LD_VAR 0 14
5578: PUSH
5579: LD_INT 1
5581: ARRAY
5582: PUSH
5583: LD_INT 3
5585: ARRAY
5586: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
5587: LD_VAR 0 11
5591: PPUSH
5592: LD_VAR 0 12
5596: PPUSH
5597: CALL_OW 351
5601: NOT
5602: IFTRUE 5621
5604: PUSH
5605: LD_VAR 0 11
5609: PPUSH
5610: LD_VAR 0 12
5614: PPUSH
5615: CALL_OW 554
5619: NOT
5620: OR
5621: IFFALSE 5655
// begin task := Delete ( task , 1 ) ;
5623: LD_ADDR_VAR 0 14
5627: PUSH
5628: LD_VAR 0 14
5632: PPUSH
5633: LD_INT 1
5635: PPUSH
5636: CALL_OW 3
5640: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
5641: LD_VAR 0 1
5645: PPUSH
5646: LD_VAR 0 14
5650: PPUSH
5651: CALL_OW 446
// end ; until not HasTask ( flame ) ;
5655: LD_VAR 0 1
5659: PPUSH
5660: CALL_OW 314
5664: NOT
5665: IFFALSE 5500
// end ;
5667: LD_VAR 0 5
5671: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
5672: LD_EXP 12
5676: NOT
5677: IFFALSE 5727
5679: GO 5681
5681: DISABLE
// begin initHack := true ;
5682: LD_ADDR_EXP 12
5686: PUSH
5687: LD_INT 1
5689: ST_TO_ADDR
// hackTanks := [ ] ;
5690: LD_ADDR_EXP 13
5694: PUSH
5695: EMPTY
5696: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
5697: LD_ADDR_EXP 14
5701: PUSH
5702: EMPTY
5703: ST_TO_ADDR
// hackLimit := 3 ;
5704: LD_ADDR_EXP 15
5708: PUSH
5709: LD_INT 3
5711: ST_TO_ADDR
// hackDist := 12 ;
5712: LD_ADDR_EXP 16
5716: PUSH
5717: LD_INT 12
5719: ST_TO_ADDR
// hackCounter := [ ] ;
5720: LD_ADDR_EXP 17
5724: PUSH
5725: EMPTY
5726: ST_TO_ADDR
// end ;
5727: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
5728: LD_EXP 12
5732: IFFALSE 5750
5734: PUSH
5735: LD_INT 34
5737: PUSH
5738: LD_INT 99
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PPUSH
5745: CALL_OW 69
5749: AND
5750: IFFALSE 6003
5752: GO 5754
5754: DISABLE
5755: LD_INT 0
5757: PPUSH
5758: PPUSH
// begin enable ;
5759: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
5760: LD_ADDR_VAR 0 1
5764: PUSH
5765: LD_INT 34
5767: PUSH
5768: LD_INT 99
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: PPUSH
5775: CALL_OW 69
5779: PUSH
5780: FOR_IN
5781: IFFALSE 6001
// begin if not i in hackTanks then
5783: LD_VAR 0 1
5787: PUSH
5788: LD_EXP 13
5792: IN
5793: NOT
5794: IFFALSE 5877
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
5796: LD_ADDR_EXP 13
5800: PUSH
5801: LD_EXP 13
5805: PPUSH
5806: LD_EXP 13
5810: PUSH
5811: LD_INT 1
5813: PLUS
5814: PPUSH
5815: LD_VAR 0 1
5819: PPUSH
5820: CALL_OW 1
5824: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
5825: LD_ADDR_EXP 14
5829: PUSH
5830: LD_EXP 14
5834: PPUSH
5835: LD_EXP 14
5839: PUSH
5840: LD_INT 1
5842: PLUS
5843: PPUSH
5844: EMPTY
5845: PPUSH
5846: CALL_OW 1
5850: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
5851: LD_ADDR_EXP 17
5855: PUSH
5856: LD_EXP 17
5860: PPUSH
5861: LD_EXP 17
5865: PUSH
5866: LD_INT 1
5868: PLUS
5869: PPUSH
5870: EMPTY
5871: PPUSH
5872: CALL_OW 1
5876: ST_TO_ADDR
// end ; if not IsOk ( i ) then
5877: LD_VAR 0 1
5881: PPUSH
5882: CALL_OW 302
5886: NOT
5887: IFFALSE 5900
// begin HackUnlinkAll ( i ) ;
5889: LD_VAR 0 1
5893: PPUSH
5894: CALL 6006 0 1
// continue ;
5898: GO 5780
// end ; HackCheckCapturedStatus ( i ) ;
5900: LD_VAR 0 1
5904: PPUSH
5905: CALL 6451 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
5909: LD_ADDR_VAR 0 2
5913: PUSH
5914: LD_INT 81
5916: PUSH
5917: LD_VAR 0 1
5921: PPUSH
5922: CALL_OW 255
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: PUSH
5931: LD_INT 33
5933: PUSH
5934: LD_INT 3
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PUSH
5941: LD_INT 91
5943: PUSH
5944: LD_VAR 0 1
5948: PUSH
5949: LD_EXP 16
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: PUSH
5959: LD_INT 50
5961: PUSH
5962: EMPTY
5963: LIST
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: PPUSH
5971: CALL_OW 69
5975: ST_TO_ADDR
// if not tmp then
5976: LD_VAR 0 2
5980: NOT
5981: IFFALSE 5985
// continue ;
5983: GO 5780
// HackLink ( i , tmp ) ;
5985: LD_VAR 0 1
5989: PPUSH
5990: LD_VAR 0 2
5994: PPUSH
5995: CALL 6142 0 2
// end ;
5999: GO 5780
6001: POP
6002: POP
// end ;
6003: PPOPN 2
6005: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
6006: LD_INT 0
6008: PPUSH
6009: PPUSH
6010: PPUSH
// if not hack in hackTanks then
6011: LD_VAR 0 1
6015: PUSH
6016: LD_EXP 13
6020: IN
6021: NOT
6022: IFFALSE 6026
// exit ;
6024: GO 6137
// index := GetElementIndex ( hackTanks , hack ) ;
6026: LD_ADDR_VAR 0 4
6030: PUSH
6031: LD_EXP 13
6035: PPUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL 30871 0 2
6045: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
6046: LD_EXP 14
6050: PUSH
6051: LD_VAR 0 4
6055: ARRAY
6056: IFFALSE 6137
// begin for i in hackTanksCaptured [ index ] do
6058: LD_ADDR_VAR 0 3
6062: PUSH
6063: LD_EXP 14
6067: PUSH
6068: LD_VAR 0 4
6072: ARRAY
6073: PUSH
6074: FOR_IN
6075: IFFALSE 6101
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
6077: LD_VAR 0 3
6081: PUSH
6082: LD_INT 1
6084: ARRAY
6085: PPUSH
6086: LD_VAR 0 3
6090: PUSH
6091: LD_INT 2
6093: ARRAY
6094: PPUSH
6095: CALL_OW 235
6099: GO 6074
6101: POP
6102: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
6103: LD_ADDR_EXP 14
6107: PUSH
6108: LD_EXP 14
6112: PPUSH
6113: LD_VAR 0 4
6117: PPUSH
6118: EMPTY
6119: PPUSH
6120: CALL_OW 1
6124: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
6125: LD_VAR 0 1
6129: PPUSH
6130: LD_INT 0
6132: PPUSH
6133: CALL_OW 505
// end ; end ;
6137: LD_VAR 0 2
6141: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
6142: LD_INT 0
6144: PPUSH
6145: PPUSH
6146: PPUSH
// if not hack in hackTanks or not vehicles then
6147: LD_VAR 0 1
6151: PUSH
6152: LD_EXP 13
6156: IN
6157: NOT
6158: IFTRUE 6167
6160: PUSH
6161: LD_VAR 0 2
6165: NOT
6166: OR
6167: IFFALSE 6171
// exit ;
6169: GO 6446
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
6171: LD_ADDR_VAR 0 2
6175: PUSH
6176: LD_VAR 0 1
6180: PPUSH
6181: LD_VAR 0 2
6185: PPUSH
6186: LD_INT 1
6188: PPUSH
6189: LD_INT 1
6191: PPUSH
6192: CALL 31523 0 4
6196: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
6197: LD_ADDR_VAR 0 5
6201: PUSH
6202: LD_EXP 13
6206: PPUSH
6207: LD_VAR 0 1
6211: PPUSH
6212: CALL 30871 0 2
6216: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
6217: LD_EXP 14
6221: PUSH
6222: LD_VAR 0 5
6226: ARRAY
6227: PUSH
6228: LD_EXP 15
6232: LESS
6233: IFFALSE 6422
// begin for i := 1 to vehicles do
6235: LD_ADDR_VAR 0 4
6239: PUSH
6240: DOUBLE
6241: LD_INT 1
6243: DEC
6244: ST_TO_ADDR
6245: LD_VAR 0 2
6249: PUSH
6250: FOR_TO
6251: IFFALSE 6420
// begin if hackTanksCaptured [ index ] = hackLimit then
6253: LD_EXP 14
6257: PUSH
6258: LD_VAR 0 5
6262: ARRAY
6263: PUSH
6264: LD_EXP 15
6268: EQUAL
6269: IFFALSE 6273
// break ;
6271: GO 6420
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
6273: LD_ADDR_EXP 17
6277: PUSH
6278: LD_EXP 17
6282: PPUSH
6283: LD_VAR 0 5
6287: PPUSH
6288: LD_EXP 17
6292: PUSH
6293: LD_VAR 0 5
6297: ARRAY
6298: PUSH
6299: LD_INT 1
6301: PLUS
6302: PPUSH
6303: CALL_OW 1
6307: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
6308: LD_ADDR_EXP 14
6312: PUSH
6313: LD_EXP 14
6317: PPUSH
6318: LD_VAR 0 5
6322: PUSH
6323: LD_EXP 14
6327: PUSH
6328: LD_VAR 0 5
6332: ARRAY
6333: PUSH
6334: LD_INT 1
6336: PLUS
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PPUSH
6342: LD_VAR 0 2
6346: PUSH
6347: LD_VAR 0 4
6351: ARRAY
6352: PUSH
6353: LD_VAR 0 2
6357: PUSH
6358: LD_VAR 0 4
6362: ARRAY
6363: PPUSH
6364: CALL_OW 255
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: PPUSH
6373: CALL 31088 0 3
6377: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
6378: LD_VAR 0 2
6382: PUSH
6383: LD_VAR 0 4
6387: ARRAY
6388: PPUSH
6389: LD_VAR 0 1
6393: PPUSH
6394: CALL_OW 255
6398: PPUSH
6399: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
6403: LD_VAR 0 2
6407: PUSH
6408: LD_VAR 0 4
6412: ARRAY
6413: PPUSH
6414: CALL_OW 141
// end ;
6418: GO 6250
6420: POP
6421: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
6422: LD_VAR 0 1
6426: PPUSH
6427: LD_EXP 14
6431: PUSH
6432: LD_VAR 0 5
6436: ARRAY
6437: PUSH
6438: LD_INT 0
6440: PLUS
6441: PPUSH
6442: CALL_OW 505
// end ;
6446: LD_VAR 0 3
6450: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
6451: LD_INT 0
6453: PPUSH
6454: PPUSH
6455: PPUSH
6456: PPUSH
// if not hack in hackTanks then
6457: LD_VAR 0 1
6461: PUSH
6462: LD_EXP 13
6466: IN
6467: NOT
6468: IFFALSE 6472
// exit ;
6470: GO 6716
// index := GetElementIndex ( hackTanks , hack ) ;
6472: LD_ADDR_VAR 0 4
6476: PUSH
6477: LD_EXP 13
6481: PPUSH
6482: LD_VAR 0 1
6486: PPUSH
6487: CALL 30871 0 2
6491: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
6492: LD_ADDR_VAR 0 3
6496: PUSH
6497: DOUBLE
6498: LD_EXP 14
6502: PUSH
6503: LD_VAR 0 4
6507: ARRAY
6508: INC
6509: ST_TO_ADDR
6510: LD_INT 1
6512: PUSH
6513: FOR_DOWNTO
6514: IFFALSE 6690
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
6516: LD_ADDR_VAR 0 5
6520: PUSH
6521: LD_EXP 14
6525: PUSH
6526: LD_VAR 0 4
6530: ARRAY
6531: PUSH
6532: LD_VAR 0 3
6536: ARRAY
6537: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
6538: LD_VAR 0 5
6542: PUSH
6543: LD_INT 1
6545: ARRAY
6546: PPUSH
6547: CALL_OW 302
6551: NOT
6552: IFTRUE 6580
6554: PUSH
6555: LD_VAR 0 5
6559: PUSH
6560: LD_INT 1
6562: ARRAY
6563: PPUSH
6564: CALL_OW 255
6568: PUSH
6569: LD_VAR 0 1
6573: PPUSH
6574: CALL_OW 255
6578: NONEQUAL
6579: OR
6580: IFFALSE 6688
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
6582: LD_VAR 0 5
6586: PUSH
6587: LD_INT 1
6589: ARRAY
6590: PPUSH
6591: CALL_OW 305
6595: IFFALSE 6623
6597: PUSH
6598: LD_VAR 0 5
6602: PUSH
6603: LD_INT 1
6605: ARRAY
6606: PPUSH
6607: CALL_OW 255
6611: PUSH
6612: LD_VAR 0 1
6616: PPUSH
6617: CALL_OW 255
6621: EQUAL
6622: AND
6623: IFFALSE 6647
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
6625: LD_VAR 0 5
6629: PUSH
6630: LD_INT 1
6632: ARRAY
6633: PPUSH
6634: LD_VAR 0 5
6638: PUSH
6639: LD_INT 2
6641: ARRAY
6642: PPUSH
6643: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
6647: LD_ADDR_EXP 14
6651: PUSH
6652: LD_EXP 14
6656: PPUSH
6657: LD_VAR 0 4
6661: PPUSH
6662: LD_EXP 14
6666: PUSH
6667: LD_VAR 0 4
6671: ARRAY
6672: PPUSH
6673: LD_VAR 0 3
6677: PPUSH
6678: CALL_OW 3
6682: PPUSH
6683: CALL_OW 1
6687: ST_TO_ADDR
// end ; end ;
6688: GO 6513
6690: POP
6691: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
6692: LD_VAR 0 1
6696: PPUSH
6697: LD_EXP 14
6701: PUSH
6702: LD_VAR 0 4
6706: ARRAY
6707: PUSH
6708: LD_INT 0
6710: PLUS
6711: PPUSH
6712: CALL_OW 505
// end ;
6716: LD_VAR 0 2
6720: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
6721: LD_INT 0
6723: PPUSH
6724: PPUSH
6725: PPUSH
6726: PPUSH
// if not hack in hackTanks then
6727: LD_VAR 0 1
6731: PUSH
6732: LD_EXP 13
6736: IN
6737: NOT
6738: IFFALSE 6742
// exit ;
6740: GO 6827
// index := GetElementIndex ( hackTanks , hack ) ;
6742: LD_ADDR_VAR 0 5
6746: PUSH
6747: LD_EXP 13
6751: PPUSH
6752: LD_VAR 0 1
6756: PPUSH
6757: CALL 30871 0 2
6761: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
6762: LD_ADDR_VAR 0 4
6766: PUSH
6767: DOUBLE
6768: LD_INT 1
6770: DEC
6771: ST_TO_ADDR
6772: LD_EXP 14
6776: PUSH
6777: LD_VAR 0 5
6781: ARRAY
6782: PUSH
6783: FOR_TO
6784: IFFALSE 6825
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
6786: LD_EXP 14
6790: PUSH
6791: LD_VAR 0 5
6795: ARRAY
6796: PUSH
6797: LD_VAR 0 4
6801: ARRAY
6802: PUSH
6803: LD_INT 1
6805: ARRAY
6806: PUSH
6807: LD_VAR 0 2
6811: EQUAL
6812: IFFALSE 6823
// KillUnit ( vehicle ) ;
6814: LD_VAR 0 2
6818: PPUSH
6819: CALL_OW 66
6823: GO 6783
6825: POP
6826: POP
// end ;
6827: LD_VAR 0 3
6831: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
6832: LD_EXP 18
6836: NOT
6837: IFFALSE 6970
6839: GO 6841
6841: DISABLE
6842: LD_INT 0
6844: PPUSH
// begin initMiner := true ;
6845: LD_ADDR_EXP 18
6849: PUSH
6850: LD_INT 1
6852: ST_TO_ADDR
// minersList := [ ] ;
6853: LD_ADDR_EXP 19
6857: PUSH
6858: EMPTY
6859: ST_TO_ADDR
// minerMinesList := [ ] ;
6860: LD_ADDR_EXP 20
6864: PUSH
6865: EMPTY
6866: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
6867: LD_ADDR_EXP 21
6871: PUSH
6872: LD_INT 10
6874: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
6875: LD_ADDR_VAR 0 1
6879: PUSH
6880: LD_INT 34
6882: PUSH
6883: LD_INT 81
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PPUSH
6890: CALL_OW 69
6894: PUSH
6895: FOR_IN
6896: IFFALSE 6968
// begin if not i in minersList then
6898: LD_VAR 0 1
6902: PUSH
6903: LD_EXP 19
6907: IN
6908: NOT
6909: IFFALSE 6966
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
6911: LD_ADDR_EXP 19
6915: PUSH
6916: LD_EXP 19
6920: PPUSH
6921: LD_EXP 19
6925: PUSH
6926: LD_INT 1
6928: PLUS
6929: PPUSH
6930: LD_VAR 0 1
6934: PPUSH
6935: CALL_OW 1
6939: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
6940: LD_ADDR_EXP 20
6944: PUSH
6945: LD_EXP 20
6949: PPUSH
6950: LD_EXP 20
6954: PUSH
6955: LD_INT 1
6957: PLUS
6958: PPUSH
6959: EMPTY
6960: PPUSH
6961: CALL_OW 1
6965: ST_TO_ADDR
// end end ;
6966: GO 6895
6968: POP
6969: POP
// end ;
6970: PPOPN 1
6972: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
6973: LD_EXP 18
6977: IFFALSE 7008
6979: PUSH
6980: LD_EXP 20
6984: PPUSH
6985: CALL 28170 0 1
6989: IFTRUE 7007
6991: PUSH
6992: LD_INT 34
6994: PUSH
6995: LD_INT 81
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PPUSH
7002: CALL_OW 69
7006: OR
7007: AND
7008: IFFALSE 7528
7010: GO 7012
7012: DISABLE
7013: LD_INT 0
7015: PPUSH
7016: PPUSH
7017: PPUSH
7018: PPUSH
// begin enable ;
7019: ENABLE
// for i := minerMinesList downto 1 do
7020: LD_ADDR_VAR 0 1
7024: PUSH
7025: DOUBLE
7026: LD_EXP 20
7030: INC
7031: ST_TO_ADDR
7032: LD_INT 1
7034: PUSH
7035: FOR_DOWNTO
7036: IFFALSE 7526
// begin side := GetSide ( minersList [ i ] ) ;
7038: LD_ADDR_VAR 0 3
7042: PUSH
7043: LD_EXP 19
7047: PUSH
7048: LD_VAR 0 1
7052: ARRAY
7053: PPUSH
7054: CALL_OW 255
7058: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
7059: LD_EXP 19
7063: PUSH
7064: LD_VAR 0 1
7068: ARRAY
7069: PPUSH
7070: CALL_OW 300
7074: IFFALSE 7095
7076: PUSH
7077: LD_VAR 0 3
7081: PUSH
7082: LD_OWVAR 2
7086: PUSH
7087: LD_INT 9
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: IN
7094: AND
7095: IFFALSE 7128
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
7097: LD_EXP 19
7101: PUSH
7102: LD_VAR 0 1
7106: ARRAY
7107: PPUSH
7108: LD_EXP 20
7112: PUSH
7113: LD_VAR 0 1
7117: ARRAY
7118: PPUSH
7119: CALL 28170 0 1
7123: PPUSH
7124: CALL_OW 505
// if not minerMinesList [ i ] then
7128: LD_EXP 20
7132: PUSH
7133: LD_VAR 0 1
7137: ARRAY
7138: NOT
7139: IFFALSE 7143
// continue ;
7141: GO 7035
// for j := minerMinesList [ i ] downto 1 do
7143: LD_ADDR_VAR 0 2
7147: PUSH
7148: DOUBLE
7149: LD_EXP 20
7153: PUSH
7154: LD_VAR 0 1
7158: ARRAY
7159: INC
7160: ST_TO_ADDR
7161: LD_INT 1
7163: PUSH
7164: FOR_DOWNTO
7165: IFFALSE 7522
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
7167: LD_EXP 19
7171: PUSH
7172: LD_VAR 0 1
7176: ARRAY
7177: PPUSH
7178: CALL_OW 301
7182: IFTRUE 7202
7184: PUSH
7185: LD_EXP 19
7189: PUSH
7190: LD_VAR 0 1
7194: ARRAY
7195: PPUSH
7196: CALL_OW 305
7200: NOT
7201: OR
7202: IFFALSE 7293
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
7204: LD_EXP 20
7208: PUSH
7209: LD_VAR 0 1
7213: ARRAY
7214: PUSH
7215: LD_VAR 0 2
7219: ARRAY
7220: PUSH
7221: LD_INT 1
7223: ARRAY
7224: PPUSH
7225: LD_EXP 20
7229: PUSH
7230: LD_VAR 0 1
7234: ARRAY
7235: PUSH
7236: LD_VAR 0 2
7240: ARRAY
7241: PUSH
7242: LD_INT 2
7244: ARRAY
7245: PPUSH
7246: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
7250: LD_ADDR_EXP 20
7254: PUSH
7255: LD_EXP 20
7259: PPUSH
7260: LD_VAR 0 1
7264: PPUSH
7265: LD_EXP 20
7269: PUSH
7270: LD_VAR 0 1
7274: ARRAY
7275: PPUSH
7276: LD_VAR 0 2
7280: PPUSH
7281: CALL_OW 3
7285: PPUSH
7286: CALL_OW 1
7290: ST_TO_ADDR
// continue ;
7291: GO 7164
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
7293: LD_ADDR_VAR 0 4
7297: PUSH
7298: LD_EXP 20
7302: PUSH
7303: LD_VAR 0 1
7307: ARRAY
7308: PUSH
7309: LD_VAR 0 2
7313: ARRAY
7314: PUSH
7315: LD_INT 1
7317: ARRAY
7318: PPUSH
7319: LD_EXP 20
7323: PUSH
7324: LD_VAR 0 1
7328: ARRAY
7329: PUSH
7330: LD_VAR 0 2
7334: ARRAY
7335: PUSH
7336: LD_INT 2
7338: ARRAY
7339: PPUSH
7340: CALL_OW 428
7344: ST_TO_ADDR
// if not tmp then
7345: LD_VAR 0 4
7349: NOT
7350: IFFALSE 7354
// continue ;
7352: GO 7164
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
7354: LD_VAR 0 4
7358: PUSH
7359: LD_INT 81
7361: PUSH
7362: LD_VAR 0 3
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PPUSH
7371: CALL_OW 69
7375: IN
7376: IFFALSE 7426
7378: PUSH
7379: LD_EXP 20
7383: PUSH
7384: LD_VAR 0 1
7388: ARRAY
7389: PUSH
7390: LD_VAR 0 2
7394: ARRAY
7395: PUSH
7396: LD_INT 1
7398: ARRAY
7399: PPUSH
7400: LD_EXP 20
7404: PUSH
7405: LD_VAR 0 1
7409: ARRAY
7410: PUSH
7411: LD_VAR 0 2
7415: ARRAY
7416: PUSH
7417: LD_INT 2
7419: ARRAY
7420: PPUSH
7421: CALL_OW 458
7425: AND
7426: IFFALSE 7520
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
7428: LD_EXP 20
7432: PUSH
7433: LD_VAR 0 1
7437: ARRAY
7438: PUSH
7439: LD_VAR 0 2
7443: ARRAY
7444: PUSH
7445: LD_INT 1
7447: ARRAY
7448: PPUSH
7449: LD_EXP 20
7453: PUSH
7454: LD_VAR 0 1
7458: ARRAY
7459: PUSH
7460: LD_VAR 0 2
7464: ARRAY
7465: PUSH
7466: LD_INT 2
7468: ARRAY
7469: PPUSH
7470: LD_VAR 0 3
7474: PPUSH
7475: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
7479: LD_ADDR_EXP 20
7483: PUSH
7484: LD_EXP 20
7488: PPUSH
7489: LD_VAR 0 1
7493: PPUSH
7494: LD_EXP 20
7498: PUSH
7499: LD_VAR 0 1
7503: ARRAY
7504: PPUSH
7505: LD_VAR 0 2
7509: PPUSH
7510: CALL_OW 3
7514: PPUSH
7515: CALL_OW 1
7519: ST_TO_ADDR
// end ; end ;
7520: GO 7164
7522: POP
7523: POP
// end ;
7524: GO 7035
7526: POP
7527: POP
// end ;
7528: PPOPN 4
7530: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
7531: LD_INT 0
7533: PPUSH
7534: PPUSH
7535: PPUSH
7536: PPUSH
// result := false ;
7537: LD_ADDR_VAR 0 4
7541: PUSH
7542: LD_INT 0
7544: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 264
7554: PUSH
7555: LD_INT 81
7557: EQUAL
7558: NOT
7559: IFFALSE 7563
// exit ;
7561: GO 7933
// side := GetSide ( unit ) ;
7563: LD_ADDR_VAR 0 6
7567: PUSH
7568: LD_VAR 0 1
7572: PPUSH
7573: CALL_OW 255
7577: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
7578: LD_ADDR_VAR 0 5
7582: PUSH
7583: LD_EXP 19
7587: PPUSH
7588: LD_VAR 0 1
7592: PPUSH
7593: CALL 30871 0 2
7597: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
7598: LD_EXP 20
7602: PUSH
7603: LD_VAR 0 5
7607: ARRAY
7608: PUSH
7609: LD_EXP 21
7613: GREATEREQUAL
7614: IFFALSE 7618
// exit ;
7616: GO 7933
// ComMoveXY ( unit , x , y ) ;
7618: LD_VAR 0 1
7622: PPUSH
7623: LD_VAR 0 2
7627: PPUSH
7628: LD_VAR 0 3
7632: PPUSH
7633: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7637: LD_INT 35
7639: PPUSH
7640: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
7644: LD_VAR 0 1
7648: PPUSH
7649: LD_VAR 0 2
7653: PPUSH
7654: LD_VAR 0 3
7658: PPUSH
7659: CALL 62927 0 3
7663: NOT
7664: IFFALSE 7677
7666: PUSH
7667: LD_VAR 0 1
7671: PPUSH
7672: CALL_OW 314
7676: AND
7677: IFFALSE 7681
// exit ;
7679: GO 7933
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
7681: LD_VAR 0 2
7685: PPUSH
7686: LD_VAR 0 3
7690: PPUSH
7691: CALL_OW 428
7695: PUSH
7696: LD_VAR 0 1
7700: EQUAL
7701: IFFALSE 7715
7703: PUSH
7704: LD_VAR 0 1
7708: PPUSH
7709: CALL_OW 314
7713: NOT
7714: AND
7715: IFFALSE 7637
// if MineAtPos ( x , y ) then
7717: LD_VAR 0 2
7721: PPUSH
7722: LD_VAR 0 3
7726: PPUSH
7727: CALL_OW 458
7731: IFFALSE 7735
// exit ;
7733: GO 7933
// if your_side = side then
7735: LD_OWVAR 2
7739: PUSH
7740: LD_VAR 0 6
7744: EQUAL
7745: IFFALSE 7764
// PlaySoundXY ( x , y , PlantMine ) ;
7747: LD_VAR 0 2
7751: PPUSH
7752: LD_VAR 0 3
7756: PPUSH
7757: LD_STRING PlantMine
7759: PPUSH
7760: CALL_OW 366
// repeat wait ( 1 ) ;
7764: LD_INT 1
7766: PPUSH
7767: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
7771: LD_VAR 0 2
7775: PPUSH
7776: LD_VAR 0 3
7780: PPUSH
7781: LD_VAR 0 6
7785: PPUSH
7786: LD_INT 0
7788: PPUSH
7789: CALL_OW 454
7793: IFFALSE 7764
// if MineAtPos ( x , y ) then
7795: LD_VAR 0 2
7799: PPUSH
7800: LD_VAR 0 3
7804: PPUSH
7805: CALL_OW 458
7809: IFFALSE 7925
// begin for i in minerMinesList [ index ] do
7811: LD_ADDR_VAR 0 7
7815: PUSH
7816: LD_EXP 20
7820: PUSH
7821: LD_VAR 0 5
7825: ARRAY
7826: PUSH
7827: FOR_IN
7828: IFFALSE 7870
// if i [ 1 ] = x and i [ 2 ] = y then
7830: LD_VAR 0 7
7834: PUSH
7835: LD_INT 1
7837: ARRAY
7838: PUSH
7839: LD_VAR 0 2
7843: EQUAL
7844: IFFALSE 7862
7846: PUSH
7847: LD_VAR 0 7
7851: PUSH
7852: LD_INT 2
7854: ARRAY
7855: PUSH
7856: LD_VAR 0 3
7860: EQUAL
7861: AND
7862: IFFALSE 7868
// exit ;
7864: POP
7865: POP
7866: GO 7933
7868: GO 7827
7870: POP
7871: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
7872: LD_ADDR_EXP 20
7876: PUSH
7877: LD_EXP 20
7881: PPUSH
7882: LD_VAR 0 5
7886: PUSH
7887: LD_EXP 20
7891: PUSH
7892: LD_VAR 0 5
7896: ARRAY
7897: PUSH
7898: LD_INT 1
7900: PLUS
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: PPUSH
7906: LD_VAR 0 2
7910: PUSH
7911: LD_VAR 0 3
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PPUSH
7920: CALL 31088 0 3
7924: ST_TO_ADDR
// end ; result := true ;
7925: LD_ADDR_VAR 0 4
7929: PUSH
7930: LD_INT 1
7932: ST_TO_ADDR
// end ;
7933: LD_VAR 0 4
7937: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
7938: LD_INT 0
7940: PPUSH
7941: PPUSH
7942: PPUSH
// if not unit in minersList then
7943: LD_VAR 0 1
7947: PUSH
7948: LD_EXP 19
7952: IN
7953: NOT
7954: IFFALSE 7958
// exit ;
7956: GO 8165
// index := GetElementIndex ( minersList , unit ) ;
7958: LD_ADDR_VAR 0 6
7962: PUSH
7963: LD_EXP 19
7967: PPUSH
7968: LD_VAR 0 1
7972: PPUSH
7973: CALL 30871 0 2
7977: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
7978: LD_ADDR_VAR 0 5
7982: PUSH
7983: DOUBLE
7984: LD_EXP 20
7988: PUSH
7989: LD_VAR 0 6
7993: ARRAY
7994: INC
7995: ST_TO_ADDR
7996: LD_INT 1
7998: PUSH
7999: FOR_DOWNTO
8000: IFFALSE 8163
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
8002: LD_EXP 20
8006: PUSH
8007: LD_VAR 0 6
8011: ARRAY
8012: PUSH
8013: LD_VAR 0 5
8017: ARRAY
8018: PUSH
8019: LD_INT 1
8021: ARRAY
8022: PPUSH
8023: LD_EXP 20
8027: PUSH
8028: LD_VAR 0 6
8032: ARRAY
8033: PUSH
8034: LD_VAR 0 5
8038: ARRAY
8039: PUSH
8040: LD_INT 2
8042: ARRAY
8043: PPUSH
8044: LD_VAR 0 2
8048: PPUSH
8049: LD_VAR 0 3
8053: PPUSH
8054: CALL_OW 298
8058: PUSH
8059: LD_INT 6
8061: LESS
8062: IFFALSE 8161
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
8064: LD_EXP 20
8068: PUSH
8069: LD_VAR 0 6
8073: ARRAY
8074: PUSH
8075: LD_VAR 0 5
8079: ARRAY
8080: PUSH
8081: LD_INT 1
8083: ARRAY
8084: PPUSH
8085: LD_EXP 20
8089: PUSH
8090: LD_VAR 0 6
8094: ARRAY
8095: PUSH
8096: LD_VAR 0 5
8100: ARRAY
8101: PUSH
8102: LD_INT 2
8104: ARRAY
8105: PPUSH
8106: LD_VAR 0 1
8110: PPUSH
8111: CALL_OW 255
8115: PPUSH
8116: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
8120: LD_ADDR_EXP 20
8124: PUSH
8125: LD_EXP 20
8129: PPUSH
8130: LD_VAR 0 6
8134: PPUSH
8135: LD_EXP 20
8139: PUSH
8140: LD_VAR 0 6
8144: ARRAY
8145: PPUSH
8146: LD_VAR 0 5
8150: PPUSH
8151: CALL_OW 3
8155: PPUSH
8156: CALL_OW 1
8160: ST_TO_ADDR
// end ; end ;
8161: GO 7999
8163: POP
8164: POP
// end ;
8165: LD_VAR 0 4
8169: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
8170: LD_INT 0
8172: PPUSH
8173: PPUSH
8174: PPUSH
8175: PPUSH
8176: PPUSH
8177: PPUSH
8178: PPUSH
8179: PPUSH
8180: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
8181: LD_VAR 0 1
8185: PPUSH
8186: CALL_OW 264
8190: PUSH
8191: LD_INT 81
8193: EQUAL
8194: NOT
8195: IFTRUE 8210
8197: PUSH
8198: LD_VAR 0 1
8202: PUSH
8203: LD_EXP 19
8207: IN
8208: NOT
8209: OR
8210: IFFALSE 8214
// exit ;
8212: GO 8540
// index := GetElementIndex ( minersList , unit ) ;
8214: LD_ADDR_VAR 0 6
8218: PUSH
8219: LD_EXP 19
8223: PPUSH
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL 30871 0 2
8233: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
8234: LD_ADDR_VAR 0 8
8238: PUSH
8239: LD_EXP 21
8243: PUSH
8244: LD_EXP 20
8248: PUSH
8249: LD_VAR 0 6
8253: ARRAY
8254: MINUS
8255: ST_TO_ADDR
// if not minesFreeAmount then
8256: LD_VAR 0 8
8260: NOT
8261: IFFALSE 8265
// exit ;
8263: GO 8540
// tmp := [ ] ;
8265: LD_ADDR_VAR 0 7
8269: PUSH
8270: EMPTY
8271: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
8272: LD_ADDR_VAR 0 5
8276: PUSH
8277: DOUBLE
8278: LD_INT 1
8280: DEC
8281: ST_TO_ADDR
8282: LD_VAR 0 8
8286: PUSH
8287: FOR_TO
8288: IFFALSE 8487
// begin _d := rand ( 0 , 5 ) ;
8290: LD_ADDR_VAR 0 11
8294: PUSH
8295: LD_INT 0
8297: PPUSH
8298: LD_INT 5
8300: PPUSH
8301: CALL_OW 12
8305: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
8306: LD_ADDR_VAR 0 12
8310: PUSH
8311: LD_INT 2
8313: PPUSH
8314: LD_INT 6
8316: PPUSH
8317: CALL_OW 12
8321: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
8322: LD_ADDR_VAR 0 9
8326: PUSH
8327: LD_VAR 0 2
8331: PPUSH
8332: LD_VAR 0 11
8336: PPUSH
8337: LD_VAR 0 12
8341: PPUSH
8342: CALL_OW 272
8346: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
8347: LD_ADDR_VAR 0 10
8351: PUSH
8352: LD_VAR 0 3
8356: PPUSH
8357: LD_VAR 0 11
8361: PPUSH
8362: LD_VAR 0 12
8366: PPUSH
8367: CALL_OW 273
8371: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
8372: LD_VAR 0 9
8376: PPUSH
8377: LD_VAR 0 10
8381: PPUSH
8382: CALL_OW 488
8386: IFFALSE 8410
8388: PUSH
8389: LD_VAR 0 9
8393: PUSH
8394: LD_VAR 0 10
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PUSH
8403: LD_VAR 0 7
8407: IN
8408: NOT
8409: AND
8410: IFFALSE 8429
8412: PUSH
8413: LD_VAR 0 9
8417: PPUSH
8418: LD_VAR 0 10
8422: PPUSH
8423: CALL_OW 458
8427: NOT
8428: AND
8429: IFFALSE 8471
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
8431: LD_ADDR_VAR 0 7
8435: PUSH
8436: LD_VAR 0 7
8440: PPUSH
8441: LD_VAR 0 7
8445: PUSH
8446: LD_INT 1
8448: PLUS
8449: PPUSH
8450: LD_VAR 0 9
8454: PUSH
8455: LD_VAR 0 10
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PPUSH
8464: CALL_OW 1
8468: ST_TO_ADDR
8469: GO 8485
// i := i - 1 ;
8471: LD_ADDR_VAR 0 5
8475: PUSH
8476: LD_VAR 0 5
8480: PUSH
8481: LD_INT 1
8483: MINUS
8484: ST_TO_ADDR
// end ;
8485: GO 8287
8487: POP
8488: POP
// for i in tmp do
8489: LD_ADDR_VAR 0 5
8493: PUSH
8494: LD_VAR 0 7
8498: PUSH
8499: FOR_IN
8500: IFFALSE 8538
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
8502: LD_VAR 0 1
8506: PPUSH
8507: LD_VAR 0 5
8511: PUSH
8512: LD_INT 1
8514: ARRAY
8515: PPUSH
8516: LD_VAR 0 5
8520: PUSH
8521: LD_INT 2
8523: ARRAY
8524: PPUSH
8525: CALL 7531 0 3
8529: NOT
8530: IFFALSE 8536
// exit ;
8532: POP
8533: POP
8534: GO 8540
8536: GO 8499
8538: POP
8539: POP
// end ;
8540: LD_VAR 0 4
8544: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
8545: LD_INT 0
8547: PPUSH
8548: PPUSH
8549: PPUSH
8550: PPUSH
8551: PPUSH
8552: PPUSH
8553: PPUSH
8554: PPUSH
8555: PPUSH
// if GetClass ( unit ) <> class_sniper then
8556: LD_VAR 0 1
8560: PPUSH
8561: CALL_OW 257
8565: PUSH
8566: LD_INT 5
8568: NONEQUAL
8569: IFFALSE 8573
// exit ;
8571: GO 9043
// dist := 8 ;
8573: LD_ADDR_VAR 0 5
8577: PUSH
8578: LD_INT 8
8580: ST_TO_ADDR
// viewRange := 12 ;
8581: LD_ADDR_VAR 0 8
8585: PUSH
8586: LD_INT 12
8588: ST_TO_ADDR
// side := GetSide ( unit ) ;
8589: LD_ADDR_VAR 0 6
8593: PUSH
8594: LD_VAR 0 1
8598: PPUSH
8599: CALL_OW 255
8603: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
8604: LD_INT 61
8606: PPUSH
8607: LD_VAR 0 6
8611: PPUSH
8612: CALL_OW 321
8616: PUSH
8617: LD_INT 2
8619: EQUAL
8620: IFFALSE 8630
// viewRange := 16 ;
8622: LD_ADDR_VAR 0 8
8626: PUSH
8627: LD_INT 16
8629: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
8630: LD_VAR 0 1
8634: PPUSH
8635: LD_VAR 0 2
8639: PPUSH
8640: LD_VAR 0 3
8644: PPUSH
8645: CALL_OW 297
8649: PUSH
8650: LD_VAR 0 5
8654: GREATER
8655: IFFALSE 8734
// begin ComMoveXY ( unit , x , y ) ;
8657: LD_VAR 0 1
8661: PPUSH
8662: LD_VAR 0 2
8666: PPUSH
8667: LD_VAR 0 3
8671: PPUSH
8672: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8676: LD_INT 35
8678: PPUSH
8679: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
8683: LD_VAR 0 1
8687: PPUSH
8688: LD_VAR 0 2
8692: PPUSH
8693: LD_VAR 0 3
8697: PPUSH
8698: CALL 62927 0 3
8702: NOT
8703: IFFALSE 8707
// exit ;
8705: GO 9043
// until GetDistUnitXY ( unit , x , y ) < dist ;
8707: LD_VAR 0 1
8711: PPUSH
8712: LD_VAR 0 2
8716: PPUSH
8717: LD_VAR 0 3
8721: PPUSH
8722: CALL_OW 297
8726: PUSH
8727: LD_VAR 0 5
8731: LESS
8732: IFFALSE 8676
// end ; ComTurnXY ( unit , x , y ) ;
8734: LD_VAR 0 1
8738: PPUSH
8739: LD_VAR 0 2
8743: PPUSH
8744: LD_VAR 0 3
8748: PPUSH
8749: CALL_OW 118
// repeat if Multiplayer then
8753: LD_OWVAR 4
8757: IFFALSE 8768
// wait ( 35 ) else
8759: LD_INT 35
8761: PPUSH
8762: CALL_OW 67
8766: GO 8775
// wait ( 5 ) ;
8768: LD_INT 5
8770: PPUSH
8771: CALL_OW 67
// _d := GetDir ( unit ) ;
8775: LD_ADDR_VAR 0 11
8779: PUSH
8780: LD_VAR 0 1
8784: PPUSH
8785: CALL_OW 254
8789: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
8790: LD_ADDR_VAR 0 7
8794: PUSH
8795: LD_VAR 0 1
8799: PPUSH
8800: CALL_OW 250
8804: PPUSH
8805: LD_VAR 0 1
8809: PPUSH
8810: CALL_OW 251
8814: PPUSH
8815: LD_VAR 0 2
8819: PPUSH
8820: LD_VAR 0 3
8824: PPUSH
8825: CALL 65563 0 4
8829: ST_TO_ADDR
// until dir = _d ;
8830: LD_VAR 0 7
8834: PUSH
8835: LD_VAR 0 11
8839: EQUAL
8840: IFFALSE 8753
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
8842: LD_ADDR_VAR 0 9
8846: PUSH
8847: LD_VAR 0 1
8851: PPUSH
8852: CALL_OW 250
8856: PPUSH
8857: LD_VAR 0 7
8861: PPUSH
8862: LD_VAR 0 5
8866: PPUSH
8867: CALL_OW 272
8871: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
8872: LD_ADDR_VAR 0 10
8876: PUSH
8877: LD_VAR 0 1
8881: PPUSH
8882: CALL_OW 251
8886: PPUSH
8887: LD_VAR 0 7
8891: PPUSH
8892: LD_VAR 0 5
8896: PPUSH
8897: CALL_OW 273
8901: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8902: LD_VAR 0 9
8906: PPUSH
8907: LD_VAR 0 10
8911: PPUSH
8912: CALL_OW 488
8916: NOT
8917: IFFALSE 8921
// exit ;
8919: GO 9043
// ComAnimCustom ( unit , 1 ) ;
8921: LD_VAR 0 1
8925: PPUSH
8926: LD_INT 1
8928: PPUSH
8929: CALL_OW 592
// p := 0 ;
8933: LD_ADDR_VAR 0 12
8937: PUSH
8938: LD_INT 0
8940: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
8941: LD_VAR 0 9
8945: PPUSH
8946: LD_VAR 0 10
8950: PPUSH
8951: LD_VAR 0 6
8955: PPUSH
8956: LD_VAR 0 8
8960: PPUSH
8961: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
8965: LD_INT 35
8967: PPUSH
8968: CALL_OW 67
// p := Inc ( p ) ;
8972: LD_ADDR_VAR 0 12
8976: PUSH
8977: LD_VAR 0 12
8981: PPUSH
8982: CALL 65519 0 1
8986: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
8987: LD_VAR 0 12
8991: PUSH
8992: LD_INT 3
8994: EQUAL
8995: IFTRUE 9009
8997: PUSH
8998: LD_VAR 0 1
9002: PPUSH
9003: CALL_OW 302
9007: NOT
9008: OR
9009: IFTRUE 9022
9011: PUSH
9012: LD_VAR 0 1
9016: PPUSH
9017: CALL_OW 301
9021: OR
9022: IFFALSE 8965
// RemoveSeeing ( _x , _y , side ) ;
9024: LD_VAR 0 9
9028: PPUSH
9029: LD_VAR 0 10
9033: PPUSH
9034: LD_VAR 0 6
9038: PPUSH
9039: CALL_OW 331
// end ;
9043: LD_VAR 0 4
9047: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
9048: LD_INT 0
9050: PPUSH
9051: PPUSH
9052: PPUSH
9053: PPUSH
9054: PPUSH
9055: PPUSH
9056: PPUSH
9057: PPUSH
9058: PPUSH
9059: PPUSH
9060: PPUSH
// if not unit then
9061: LD_VAR 0 1
9065: NOT
9066: IFFALSE 9070
// exit ;
9068: GO 9341
// side := GetSide ( unit ) ;
9070: LD_ADDR_VAR 0 3
9074: PUSH
9075: LD_VAR 0 1
9079: PPUSH
9080: CALL_OW 255
9084: ST_TO_ADDR
// x := GetX ( unit ) ;
9085: LD_ADDR_VAR 0 5
9089: PUSH
9090: LD_VAR 0 1
9094: PPUSH
9095: CALL_OW 250
9099: ST_TO_ADDR
// y := GetY ( unit ) ;
9100: LD_ADDR_VAR 0 6
9104: PUSH
9105: LD_VAR 0 1
9109: PPUSH
9110: CALL_OW 251
9114: ST_TO_ADDR
// r := 8 ;
9115: LD_ADDR_VAR 0 4
9119: PUSH
9120: LD_INT 8
9122: ST_TO_ADDR
// if x - r < 0 then
9123: LD_VAR 0 5
9127: PUSH
9128: LD_VAR 0 4
9132: MINUS
9133: PUSH
9134: LD_INT 0
9136: LESS
9137: IFFALSE 9149
// min_x := 0 else
9139: LD_ADDR_VAR 0 7
9143: PUSH
9144: LD_INT 0
9146: ST_TO_ADDR
9147: GO 9165
// min_x := x - r ;
9149: LD_ADDR_VAR 0 7
9153: PUSH
9154: LD_VAR 0 5
9158: PUSH
9159: LD_VAR 0 4
9163: MINUS
9164: ST_TO_ADDR
// if y - r < 0 then
9165: LD_VAR 0 6
9169: PUSH
9170: LD_VAR 0 4
9174: MINUS
9175: PUSH
9176: LD_INT 0
9178: LESS
9179: IFFALSE 9191
// min_y := 0 else
9181: LD_ADDR_VAR 0 8
9185: PUSH
9186: LD_INT 0
9188: ST_TO_ADDR
9189: GO 9207
// min_y := y - r ;
9191: LD_ADDR_VAR 0 8
9195: PUSH
9196: LD_VAR 0 6
9200: PUSH
9201: LD_VAR 0 4
9205: MINUS
9206: ST_TO_ADDR
// max_x := x + r ;
9207: LD_ADDR_VAR 0 9
9211: PUSH
9212: LD_VAR 0 5
9216: PUSH
9217: LD_VAR 0 4
9221: PLUS
9222: ST_TO_ADDR
// max_y := y + r ;
9223: LD_ADDR_VAR 0 10
9227: PUSH
9228: LD_VAR 0 6
9232: PUSH
9233: LD_VAR 0 4
9237: PLUS
9238: ST_TO_ADDR
// for _x = min_x to max_x do
9239: LD_ADDR_VAR 0 11
9243: PUSH
9244: DOUBLE
9245: LD_VAR 0 7
9249: DEC
9250: ST_TO_ADDR
9251: LD_VAR 0 9
9255: PUSH
9256: FOR_TO
9257: IFFALSE 9339
// for _y = min_y to max_y do
9259: LD_ADDR_VAR 0 12
9263: PUSH
9264: DOUBLE
9265: LD_VAR 0 8
9269: DEC
9270: ST_TO_ADDR
9271: LD_VAR 0 10
9275: PUSH
9276: FOR_TO
9277: IFFALSE 9335
// begin if not ValidHex ( _x , _y ) then
9279: LD_VAR 0 11
9283: PPUSH
9284: LD_VAR 0 12
9288: PPUSH
9289: CALL_OW 488
9293: NOT
9294: IFFALSE 9298
// continue ;
9296: GO 9276
// if MineAtPos ( _x , _y ) then
9298: LD_VAR 0 11
9302: PPUSH
9303: LD_VAR 0 12
9307: PPUSH
9308: CALL_OW 458
9312: IFFALSE 9333
// ViewMineAtPos ( _x , _y , side ) ;
9314: LD_VAR 0 11
9318: PPUSH
9319: LD_VAR 0 12
9323: PPUSH
9324: LD_VAR 0 3
9328: PPUSH
9329: CALL_OW 457
// end ;
9333: GO 9276
9335: POP
9336: POP
9337: GO 9256
9339: POP
9340: POP
// end ;
9341: LD_VAR 0 2
9345: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
9346: LD_INT 0
9348: PPUSH
9349: PPUSH
9350: PPUSH
9351: PPUSH
9352: PPUSH
9353: PPUSH
9354: PPUSH
// if not units then
9355: LD_VAR 0 1
9359: NOT
9360: IFFALSE 9364
// exit ;
9362: GO 9828
// scaners := [ ] ;
9364: LD_ADDR_VAR 0 6
9368: PUSH
9369: EMPTY
9370: ST_TO_ADDR
// for i in units do
9371: LD_ADDR_VAR 0 3
9375: PUSH
9376: LD_VAR 0 1
9380: PUSH
9381: FOR_IN
9382: IFFALSE 9539
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
9384: LD_VAR 0 3
9388: PPUSH
9389: CALL_OW 264
9393: PUSH
9394: LD_INT 11
9396: NONEQUAL
9397: IFTRUE 9411
9399: PUSH
9400: LD_VAR 0 3
9404: PPUSH
9405: CALL_OW 302
9409: NOT
9410: OR
9411: IFTRUE 9428
9413: PUSH
9414: LD_VAR 0 3
9418: PPUSH
9419: CALL_OW 110
9423: PUSH
9424: LD_INT 502
9426: EQUAL
9427: OR
9428: IFFALSE 9432
// continue ;
9430: GO 9381
// ComStop ( i ) ;
9432: LD_VAR 0 3
9436: PPUSH
9437: CALL_OW 141
// x := GetX ( i ) ;
9441: LD_ADDR_VAR 0 4
9445: PUSH
9446: LD_VAR 0 3
9450: PPUSH
9451: CALL_OW 250
9455: ST_TO_ADDR
// y := GetY ( i ) ;
9456: LD_ADDR_VAR 0 5
9460: PUSH
9461: LD_VAR 0 3
9465: PPUSH
9466: CALL_OW 251
9470: ST_TO_ADDR
// if GetSide ( i ) = your_side then
9471: LD_VAR 0 3
9475: PPUSH
9476: CALL_OW 255
9480: PUSH
9481: LD_OWVAR 2
9485: EQUAL
9486: IFFALSE 9505
// PlaySoundXY ( x , y , mineDetector ) ;
9488: LD_VAR 0 4
9492: PPUSH
9493: LD_VAR 0 5
9497: PPUSH
9498: LD_STRING mineDetector
9500: PPUSH
9501: CALL_OW 366
// scaners := Join ( scaners , i ) ;
9505: LD_ADDR_VAR 0 6
9509: PUSH
9510: LD_VAR 0 6
9514: PPUSH
9515: LD_VAR 0 3
9519: PPUSH
9520: CALL 64146 0 2
9524: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
9525: LD_VAR 0 3
9529: PPUSH
9530: LD_INT 502
9532: PPUSH
9533: CALL_OW 109
// end ;
9537: GO 9381
9539: POP
9540: POP
// if not scaners then
9541: LD_VAR 0 6
9545: NOT
9546: IFFALSE 9550
// exit ;
9548: GO 9828
// wait ( 3 ) ;
9550: LD_INT 3
9552: PPUSH
9553: CALL_OW 67
// timer := 6 ;
9557: LD_ADDR_VAR 0 7
9561: PUSH
9562: LD_INT 6
9564: ST_TO_ADDR
// repeat for i in scaners do
9565: LD_ADDR_VAR 0 3
9569: PUSH
9570: LD_VAR 0 6
9574: PUSH
9575: FOR_IN
9576: IFFALSE 9726
// begin side := GetSide ( i ) ;
9578: LD_ADDR_VAR 0 8
9582: PUSH
9583: LD_VAR 0 3
9587: PPUSH
9588: CALL_OW 255
9592: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
9593: LD_VAR 0 3
9597: PPUSH
9598: CALL_OW 302
9602: NOT
9603: IFTRUE 9616
9605: PUSH
9606: LD_VAR 0 3
9610: PPUSH
9611: CALL_OW 314
9615: OR
9616: IFTRUE 9647
9618: PUSH
9619: LD_VAR 0 3
9623: PPUSH
9624: CALL_OW 263
9628: PUSH
9629: LD_INT 1
9631: EQUAL
9632: IFFALSE 9646
9634: PUSH
9635: LD_VAR 0 3
9639: PPUSH
9640: CALL_OW 311
9644: NOT
9645: AND
9646: OR
9647: IFFALSE 9691
// begin SetUnitDisplayNumber ( i , 0 ) ;
9649: LD_VAR 0 3
9653: PPUSH
9654: LD_INT 0
9656: PPUSH
9657: CALL_OW 505
// SetTag ( i , 0 ) ;
9661: LD_VAR 0 3
9665: PPUSH
9666: LD_INT 0
9668: PPUSH
9669: CALL_OW 109
// scaners := scaners diff i ;
9673: LD_ADDR_VAR 0 6
9677: PUSH
9678: LD_VAR 0 6
9682: PUSH
9683: LD_VAR 0 3
9687: DIFF
9688: ST_TO_ADDR
// continue ;
9689: GO 9575
// end ; if side in [ your_side , 9 ] then
9691: LD_VAR 0 8
9695: PUSH
9696: LD_OWVAR 2
9700: PUSH
9701: LD_INT 9
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: IN
9708: IFFALSE 9724
// SetUnitDisplayNumber ( i , timer ) ;
9710: LD_VAR 0 3
9714: PPUSH
9715: LD_VAR 0 7
9719: PPUSH
9720: CALL_OW 505
// end ;
9724: GO 9575
9726: POP
9727: POP
// if not scaners then
9728: LD_VAR 0 6
9732: NOT
9733: IFFALSE 9737
// exit ;
9735: GO 9828
// timer := Dec ( timer ) ;
9737: LD_ADDR_VAR 0 7
9741: PUSH
9742: LD_VAR 0 7
9746: PPUSH
9747: CALL 65541 0 1
9751: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9752: LD_INT 35
9754: PPUSH
9755: CALL_OW 67
// until timer = 0 ;
9759: LD_VAR 0 7
9763: PUSH
9764: LD_INT 0
9766: EQUAL
9767: IFFALSE 9565
// if not scaners then
9769: LD_VAR 0 6
9773: NOT
9774: IFFALSE 9778
// exit ;
9776: GO 9828
// for i in scaners do
9778: LD_ADDR_VAR 0 3
9782: PUSH
9783: LD_VAR 0 6
9787: PUSH
9788: FOR_IN
9789: IFFALSE 9826
// begin SetUnitDisplayNumber ( i , 0 ) ;
9791: LD_VAR 0 3
9795: PPUSH
9796: LD_INT 0
9798: PPUSH
9799: CALL_OW 505
// SetTag ( i , 0 ) ;
9803: LD_VAR 0 3
9807: PPUSH
9808: LD_INT 0
9810: PPUSH
9811: CALL_OW 109
// RevealDetectorMine ( i ) ;
9815: LD_VAR 0 3
9819: PPUSH
9820: CALL 9048 0 1
// end ;
9824: GO 9788
9826: POP
9827: POP
// end ;
9828: LD_VAR 0 2
9832: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
9833: LD_INT 0
9835: PPUSH
// if p1 = mine_detector_mode then
9836: LD_VAR 0 2
9840: PUSH
9841: LD_INT 103
9843: EQUAL
9844: IFFALSE 9855
// DetectMine ( units ) ;
9846: LD_VAR 0 1
9850: PPUSH
9851: CALL 9346 0 1
// end ; end_of_file
9855: LD_VAR 0 7
9859: RET
// export globalGameSaveCounter ; every 0 0$1 do
9860: GO 9862
9862: DISABLE
// begin enable ;
9863: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
9864: LD_STRING updateTimer(
9866: PUSH
9867: LD_OWVAR 1
9871: STR
9872: PUSH
9873: LD_STRING );
9875: STR
9876: PPUSH
9877: CALL_OW 559
// end ;
9881: END
// every 0 0$1 do
9882: GO 9884
9884: DISABLE
// begin globalGameSaveCounter := 0 ;
9885: LD_ADDR_EXP 22
9889: PUSH
9890: LD_INT 0
9892: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
9893: LD_STRING setGameSaveCounter(0)
9895: PPUSH
9896: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
9900: LD_STRING initStreamRollete();
9902: PPUSH
9903: CALL_OW 559
// InitStreamMode ;
9907: CALL 11259 0 0
// DefineStreamItems ( false ) ;
9911: LD_INT 0
9913: PPUSH
9914: CALL 11723 0 1
// end ;
9918: END
// export function SOS_MapStart ( ) ; begin
9919: LD_INT 0
9921: PPUSH
// if streamModeActive then
9922: LD_EXP 23
9926: IFFALSE 9935
// DefineStreamItems ( true ) ;
9928: LD_INT 1
9930: PPUSH
9931: CALL 11723 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
9935: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
9937: PPUSH
9938: CALL_OW 559
// UpdateLuaVariables ( ) ;
9942: CALL 9959 0 0
// UpdateFactoryWaypoints ( ) ;
9946: CALL 24845 0 0
// UpdateWarehouseGatheringPoints ( ) ;
9950: CALL 25097 0 0
// end ;
9954: LD_VAR 0 1
9958: RET
// function UpdateLuaVariables ( ) ; begin
9959: LD_INT 0
9961: PPUSH
// if globalGameSaveCounter then
9962: LD_EXP 22
9966: IFFALSE 10000
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
9968: LD_ADDR_EXP 22
9972: PUSH
9973: LD_EXP 22
9977: PPUSH
9978: CALL 65519 0 1
9982: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9983: LD_STRING setGameSaveCounter(
9985: PUSH
9986: LD_EXP 22
9990: STR
9991: PUSH
9992: LD_STRING )
9994: STR
9995: PPUSH
9996: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10000: LD_STRING setGameDifficulty(
10002: PUSH
10003: LD_OWVAR 67
10007: STR
10008: PUSH
10009: LD_STRING )
10011: STR
10012: PPUSH
10013: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
10017: LD_STRING displayDifficulty(
10019: PUSH
10020: LD_OWVAR 67
10024: STR
10025: PUSH
10026: LD_STRING )
10028: STR
10029: PPUSH
10030: CALL_OW 559
// end ;
10034: LD_VAR 0 1
10038: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10039: LD_INT 0
10041: PPUSH
// if p2 = stream_mode then
10042: LD_VAR 0 2
10046: PUSH
10047: LD_INT 100
10049: EQUAL
10050: IFFALSE 11053
// begin if not StreamModeActive then
10052: LD_EXP 23
10056: NOT
10057: IFFALSE 10067
// StreamModeActive := true ;
10059: LD_ADDR_EXP 23
10063: PUSH
10064: LD_INT 1
10066: ST_TO_ADDR
// if p3 = 0 then
10067: LD_VAR 0 3
10071: PUSH
10072: LD_INT 0
10074: EQUAL
10075: IFFALSE 10081
// InitStreamMode ;
10077: CALL 11259 0 0
// if p3 = 1 then
10081: LD_VAR 0 3
10085: PUSH
10086: LD_INT 1
10088: EQUAL
10089: IFFALSE 10099
// sRocket := true ;
10091: LD_ADDR_EXP 28
10095: PUSH
10096: LD_INT 1
10098: ST_TO_ADDR
// if p3 = 2 then
10099: LD_VAR 0 3
10103: PUSH
10104: LD_INT 2
10106: EQUAL
10107: IFFALSE 10117
// sSpeed := true ;
10109: LD_ADDR_EXP 27
10113: PUSH
10114: LD_INT 1
10116: ST_TO_ADDR
// if p3 = 3 then
10117: LD_VAR 0 3
10121: PUSH
10122: LD_INT 3
10124: EQUAL
10125: IFFALSE 10135
// sEngine := true ;
10127: LD_ADDR_EXP 29
10131: PUSH
10132: LD_INT 1
10134: ST_TO_ADDR
// if p3 = 4 then
10135: LD_VAR 0 3
10139: PUSH
10140: LD_INT 4
10142: EQUAL
10143: IFFALSE 10153
// sSpec := true ;
10145: LD_ADDR_EXP 26
10149: PUSH
10150: LD_INT 1
10152: ST_TO_ADDR
// if p3 = 5 then
10153: LD_VAR 0 3
10157: PUSH
10158: LD_INT 5
10160: EQUAL
10161: IFFALSE 10171
// sLevel := true ;
10163: LD_ADDR_EXP 30
10167: PUSH
10168: LD_INT 1
10170: ST_TO_ADDR
// if p3 = 6 then
10171: LD_VAR 0 3
10175: PUSH
10176: LD_INT 6
10178: EQUAL
10179: IFFALSE 10189
// sArmoury := true ;
10181: LD_ADDR_EXP 31
10185: PUSH
10186: LD_INT 1
10188: ST_TO_ADDR
// if p3 = 7 then
10189: LD_VAR 0 3
10193: PUSH
10194: LD_INT 7
10196: EQUAL
10197: IFFALSE 10207
// sRadar := true ;
10199: LD_ADDR_EXP 32
10203: PUSH
10204: LD_INT 1
10206: ST_TO_ADDR
// if p3 = 8 then
10207: LD_VAR 0 3
10211: PUSH
10212: LD_INT 8
10214: EQUAL
10215: IFFALSE 10225
// sBunker := true ;
10217: LD_ADDR_EXP 33
10221: PUSH
10222: LD_INT 1
10224: ST_TO_ADDR
// if p3 = 9 then
10225: LD_VAR 0 3
10229: PUSH
10230: LD_INT 9
10232: EQUAL
10233: IFFALSE 10243
// sHack := true ;
10235: LD_ADDR_EXP 34
10239: PUSH
10240: LD_INT 1
10242: ST_TO_ADDR
// if p3 = 10 then
10243: LD_VAR 0 3
10247: PUSH
10248: LD_INT 10
10250: EQUAL
10251: IFFALSE 10261
// sFire := true ;
10253: LD_ADDR_EXP 35
10257: PUSH
10258: LD_INT 1
10260: ST_TO_ADDR
// if p3 = 11 then
10261: LD_VAR 0 3
10265: PUSH
10266: LD_INT 11
10268: EQUAL
10269: IFFALSE 10279
// sRefresh := true ;
10271: LD_ADDR_EXP 36
10275: PUSH
10276: LD_INT 1
10278: ST_TO_ADDR
// if p3 = 12 then
10279: LD_VAR 0 3
10283: PUSH
10284: LD_INT 12
10286: EQUAL
10287: IFFALSE 10297
// sExp := true ;
10289: LD_ADDR_EXP 37
10293: PUSH
10294: LD_INT 1
10296: ST_TO_ADDR
// if p3 = 13 then
10297: LD_VAR 0 3
10301: PUSH
10302: LD_INT 13
10304: EQUAL
10305: IFFALSE 10315
// sDepot := true ;
10307: LD_ADDR_EXP 38
10311: PUSH
10312: LD_INT 1
10314: ST_TO_ADDR
// if p3 = 14 then
10315: LD_VAR 0 3
10319: PUSH
10320: LD_INT 14
10322: EQUAL
10323: IFFALSE 10333
// sFlag := true ;
10325: LD_ADDR_EXP 39
10329: PUSH
10330: LD_INT 1
10332: ST_TO_ADDR
// if p3 = 15 then
10333: LD_VAR 0 3
10337: PUSH
10338: LD_INT 15
10340: EQUAL
10341: IFFALSE 10351
// sKamikadze := true ;
10343: LD_ADDR_EXP 47
10347: PUSH
10348: LD_INT 1
10350: ST_TO_ADDR
// if p3 = 16 then
10351: LD_VAR 0 3
10355: PUSH
10356: LD_INT 16
10358: EQUAL
10359: IFFALSE 10369
// sTroll := true ;
10361: LD_ADDR_EXP 48
10365: PUSH
10366: LD_INT 1
10368: ST_TO_ADDR
// if p3 = 17 then
10369: LD_VAR 0 3
10373: PUSH
10374: LD_INT 17
10376: EQUAL
10377: IFFALSE 10387
// sSlow := true ;
10379: LD_ADDR_EXP 49
10383: PUSH
10384: LD_INT 1
10386: ST_TO_ADDR
// if p3 = 18 then
10387: LD_VAR 0 3
10391: PUSH
10392: LD_INT 18
10394: EQUAL
10395: IFFALSE 10405
// sLack := true ;
10397: LD_ADDR_EXP 50
10401: PUSH
10402: LD_INT 1
10404: ST_TO_ADDR
// if p3 = 19 then
10405: LD_VAR 0 3
10409: PUSH
10410: LD_INT 19
10412: EQUAL
10413: IFFALSE 10423
// sTank := true ;
10415: LD_ADDR_EXP 52
10419: PUSH
10420: LD_INT 1
10422: ST_TO_ADDR
// if p3 = 20 then
10423: LD_VAR 0 3
10427: PUSH
10428: LD_INT 20
10430: EQUAL
10431: IFFALSE 10441
// sRemote := true ;
10433: LD_ADDR_EXP 53
10437: PUSH
10438: LD_INT 1
10440: ST_TO_ADDR
// if p3 = 21 then
10441: LD_VAR 0 3
10445: PUSH
10446: LD_INT 21
10448: EQUAL
10449: IFFALSE 10459
// sPowell := true ;
10451: LD_ADDR_EXP 54
10455: PUSH
10456: LD_INT 1
10458: ST_TO_ADDR
// if p3 = 22 then
10459: LD_VAR 0 3
10463: PUSH
10464: LD_INT 22
10466: EQUAL
10467: IFFALSE 10477
// sTeleport := true ;
10469: LD_ADDR_EXP 57
10473: PUSH
10474: LD_INT 1
10476: ST_TO_ADDR
// if p3 = 23 then
10477: LD_VAR 0 3
10481: PUSH
10482: LD_INT 23
10484: EQUAL
10485: IFFALSE 10495
// sOilTower := true ;
10487: LD_ADDR_EXP 59
10491: PUSH
10492: LD_INT 1
10494: ST_TO_ADDR
// if p3 = 24 then
10495: LD_VAR 0 3
10499: PUSH
10500: LD_INT 24
10502: EQUAL
10503: IFFALSE 10513
// sShovel := true ;
10505: LD_ADDR_EXP 60
10509: PUSH
10510: LD_INT 1
10512: ST_TO_ADDR
// if p3 = 25 then
10513: LD_VAR 0 3
10517: PUSH
10518: LD_INT 25
10520: EQUAL
10521: IFFALSE 10531
// sSheik := true ;
10523: LD_ADDR_EXP 61
10527: PUSH
10528: LD_INT 1
10530: ST_TO_ADDR
// if p3 = 26 then
10531: LD_VAR 0 3
10535: PUSH
10536: LD_INT 26
10538: EQUAL
10539: IFFALSE 10549
// sEarthquake := true ;
10541: LD_ADDR_EXP 63
10545: PUSH
10546: LD_INT 1
10548: ST_TO_ADDR
// if p3 = 27 then
10549: LD_VAR 0 3
10553: PUSH
10554: LD_INT 27
10556: EQUAL
10557: IFFALSE 10567
// sAI := true ;
10559: LD_ADDR_EXP 64
10563: PUSH
10564: LD_INT 1
10566: ST_TO_ADDR
// if p3 = 28 then
10567: LD_VAR 0 3
10571: PUSH
10572: LD_INT 28
10574: EQUAL
10575: IFFALSE 10585
// sCargo := true ;
10577: LD_ADDR_EXP 67
10581: PUSH
10582: LD_INT 1
10584: ST_TO_ADDR
// if p3 = 29 then
10585: LD_VAR 0 3
10589: PUSH
10590: LD_INT 29
10592: EQUAL
10593: IFFALSE 10603
// sDLaser := true ;
10595: LD_ADDR_EXP 68
10599: PUSH
10600: LD_INT 1
10602: ST_TO_ADDR
// if p3 = 30 then
10603: LD_VAR 0 3
10607: PUSH
10608: LD_INT 30
10610: EQUAL
10611: IFFALSE 10621
// sExchange := true ;
10613: LD_ADDR_EXP 69
10617: PUSH
10618: LD_INT 1
10620: ST_TO_ADDR
// if p3 = 31 then
10621: LD_VAR 0 3
10625: PUSH
10626: LD_INT 31
10628: EQUAL
10629: IFFALSE 10639
// sFac := true ;
10631: LD_ADDR_EXP 70
10635: PUSH
10636: LD_INT 1
10638: ST_TO_ADDR
// if p3 = 32 then
10639: LD_VAR 0 3
10643: PUSH
10644: LD_INT 32
10646: EQUAL
10647: IFFALSE 10657
// sPower := true ;
10649: LD_ADDR_EXP 71
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
// if p3 = 33 then
10657: LD_VAR 0 3
10661: PUSH
10662: LD_INT 33
10664: EQUAL
10665: IFFALSE 10675
// sRandom := true ;
10667: LD_ADDR_EXP 72
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// if p3 = 34 then
10675: LD_VAR 0 3
10679: PUSH
10680: LD_INT 34
10682: EQUAL
10683: IFFALSE 10693
// sShield := true ;
10685: LD_ADDR_EXP 73
10689: PUSH
10690: LD_INT 1
10692: ST_TO_ADDR
// if p3 = 35 then
10693: LD_VAR 0 3
10697: PUSH
10698: LD_INT 35
10700: EQUAL
10701: IFFALSE 10711
// sTime := true ;
10703: LD_ADDR_EXP 74
10707: PUSH
10708: LD_INT 1
10710: ST_TO_ADDR
// if p3 = 36 then
10711: LD_VAR 0 3
10715: PUSH
10716: LD_INT 36
10718: EQUAL
10719: IFFALSE 10729
// sTools := true ;
10721: LD_ADDR_EXP 75
10725: PUSH
10726: LD_INT 1
10728: ST_TO_ADDR
// if p3 = 101 then
10729: LD_VAR 0 3
10733: PUSH
10734: LD_INT 101
10736: EQUAL
10737: IFFALSE 10747
// sSold := true ;
10739: LD_ADDR_EXP 40
10743: PUSH
10744: LD_INT 1
10746: ST_TO_ADDR
// if p3 = 102 then
10747: LD_VAR 0 3
10751: PUSH
10752: LD_INT 102
10754: EQUAL
10755: IFFALSE 10765
// sDiff := true ;
10757: LD_ADDR_EXP 41
10761: PUSH
10762: LD_INT 1
10764: ST_TO_ADDR
// if p3 = 103 then
10765: LD_VAR 0 3
10769: PUSH
10770: LD_INT 103
10772: EQUAL
10773: IFFALSE 10783
// sFog := true ;
10775: LD_ADDR_EXP 44
10779: PUSH
10780: LD_INT 1
10782: ST_TO_ADDR
// if p3 = 104 then
10783: LD_VAR 0 3
10787: PUSH
10788: LD_INT 104
10790: EQUAL
10791: IFFALSE 10801
// sReset := true ;
10793: LD_ADDR_EXP 45
10797: PUSH
10798: LD_INT 1
10800: ST_TO_ADDR
// if p3 = 105 then
10801: LD_VAR 0 3
10805: PUSH
10806: LD_INT 105
10808: EQUAL
10809: IFFALSE 10819
// sSun := true ;
10811: LD_ADDR_EXP 46
10815: PUSH
10816: LD_INT 1
10818: ST_TO_ADDR
// if p3 = 106 then
10819: LD_VAR 0 3
10823: PUSH
10824: LD_INT 106
10826: EQUAL
10827: IFFALSE 10837
// sTiger := true ;
10829: LD_ADDR_EXP 42
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// if p3 = 107 then
10837: LD_VAR 0 3
10841: PUSH
10842: LD_INT 107
10844: EQUAL
10845: IFFALSE 10855
// sBomb := true ;
10847: LD_ADDR_EXP 43
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// if p3 = 108 then
10855: LD_VAR 0 3
10859: PUSH
10860: LD_INT 108
10862: EQUAL
10863: IFFALSE 10873
// sWound := true ;
10865: LD_ADDR_EXP 51
10869: PUSH
10870: LD_INT 1
10872: ST_TO_ADDR
// if p3 = 109 then
10873: LD_VAR 0 3
10877: PUSH
10878: LD_INT 109
10880: EQUAL
10881: IFFALSE 10891
// sBetray := true ;
10883: LD_ADDR_EXP 55
10887: PUSH
10888: LD_INT 1
10890: ST_TO_ADDR
// if p3 = 110 then
10891: LD_VAR 0 3
10895: PUSH
10896: LD_INT 110
10898: EQUAL
10899: IFFALSE 10909
// sContamin := true ;
10901: LD_ADDR_EXP 56
10905: PUSH
10906: LD_INT 1
10908: ST_TO_ADDR
// if p3 = 111 then
10909: LD_VAR 0 3
10913: PUSH
10914: LD_INT 111
10916: EQUAL
10917: IFFALSE 10927
// sOil := true ;
10919: LD_ADDR_EXP 58
10923: PUSH
10924: LD_INT 1
10926: ST_TO_ADDR
// if p3 = 112 then
10927: LD_VAR 0 3
10931: PUSH
10932: LD_INT 112
10934: EQUAL
10935: IFFALSE 10945
// sStu := true ;
10937: LD_ADDR_EXP 62
10941: PUSH
10942: LD_INT 1
10944: ST_TO_ADDR
// if p3 = 113 then
10945: LD_VAR 0 3
10949: PUSH
10950: LD_INT 113
10952: EQUAL
10953: IFFALSE 10963
// sBazooka := true ;
10955: LD_ADDR_EXP 65
10959: PUSH
10960: LD_INT 1
10962: ST_TO_ADDR
// if p3 = 114 then
10963: LD_VAR 0 3
10967: PUSH
10968: LD_INT 114
10970: EQUAL
10971: IFFALSE 10981
// sMortar := true ;
10973: LD_ADDR_EXP 66
10977: PUSH
10978: LD_INT 1
10980: ST_TO_ADDR
// if p3 = 115 then
10981: LD_VAR 0 3
10985: PUSH
10986: LD_INT 115
10988: EQUAL
10989: IFFALSE 10999
// sRanger := true ;
10991: LD_ADDR_EXP 76
10995: PUSH
10996: LD_INT 1
10998: ST_TO_ADDR
// if p3 = 116 then
10999: LD_VAR 0 3
11003: PUSH
11004: LD_INT 116
11006: EQUAL
11007: IFFALSE 11017
// sComputer := true ;
11009: LD_ADDR_EXP 77
11013: PUSH
11014: LD_INT 1
11016: ST_TO_ADDR
// if p3 = 117 then
11017: LD_VAR 0 3
11021: PUSH
11022: LD_INT 117
11024: EQUAL
11025: IFFALSE 11035
// s30 := true ;
11027: LD_ADDR_EXP 78
11031: PUSH
11032: LD_INT 1
11034: ST_TO_ADDR
// if p3 = 118 then
11035: LD_VAR 0 3
11039: PUSH
11040: LD_INT 118
11042: EQUAL
11043: IFFALSE 11053
// s60 := true ;
11045: LD_ADDR_EXP 79
11049: PUSH
11050: LD_INT 1
11052: ST_TO_ADDR
// end ; if p2 = hack_mode then
11053: LD_VAR 0 2
11057: PUSH
11058: LD_INT 101
11060: EQUAL
11061: IFFALSE 11189
// begin case p3 of 1 :
11063: LD_VAR 0 3
11067: PUSH
11068: LD_INT 1
11070: DOUBLE
11071: EQUAL
11072: IFTRUE 11076
11074: GO 11083
11076: POP
// hHackUnlimitedResources ; 2 :
11077: CALL 23452 0 0
11081: GO 11189
11083: LD_INT 2
11085: DOUBLE
11086: EQUAL
11087: IFTRUE 11091
11089: GO 11098
11091: POP
// hHackSetLevel10 ; 3 :
11092: CALL 23585 0 0
11096: GO 11189
11098: LD_INT 3
11100: DOUBLE
11101: EQUAL
11102: IFTRUE 11106
11104: GO 11113
11106: POP
// hHackSetLevel10YourUnits ; 4 :
11107: CALL 23670 0 0
11111: GO 11189
11113: LD_INT 4
11115: DOUBLE
11116: EQUAL
11117: IFTRUE 11121
11119: GO 11128
11121: POP
// hHackInvincible ; 5 :
11122: CALL 24118 0 0
11126: GO 11189
11128: LD_INT 5
11130: DOUBLE
11131: EQUAL
11132: IFTRUE 11136
11134: GO 11143
11136: POP
// hHackInvisible ; 6 :
11137: CALL 24229 0 0
11141: GO 11189
11143: LD_INT 6
11145: DOUBLE
11146: EQUAL
11147: IFTRUE 11151
11149: GO 11158
11151: POP
// hHackChangeYourSide ; 7 :
11152: CALL 24286 0 0
11156: GO 11189
11158: LD_INT 7
11160: DOUBLE
11161: EQUAL
11162: IFTRUE 11166
11164: GO 11173
11166: POP
// hHackChangeUnitSide ; 8 :
11167: CALL 24328 0 0
11171: GO 11189
11173: LD_INT 8
11175: DOUBLE
11176: EQUAL
11177: IFTRUE 11181
11179: GO 11188
11181: POP
// hHackFog ; end ;
11182: CALL 24429 0 0
11186: GO 11189
11188: POP
// end ; if p2 = game_save_mode then
11189: LD_VAR 0 2
11193: PUSH
11194: LD_INT 102
11196: EQUAL
11197: IFFALSE 11254
// begin if p3 = 1 then
11199: LD_VAR 0 3
11203: PUSH
11204: LD_INT 1
11206: EQUAL
11207: IFFALSE 11219
// globalGameSaveCounter := p4 ;
11209: LD_ADDR_EXP 22
11213: PUSH
11214: LD_VAR 0 4
11218: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11219: LD_VAR 0 3
11223: PUSH
11224: LD_INT 2
11226: EQUAL
11227: IFFALSE 11235
11229: PUSH
11230: LD_EXP 22
11234: AND
11235: IFFALSE 11254
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11237: LD_STRING setGameSaveCounter(
11239: PUSH
11240: LD_EXP 22
11244: STR
11245: PUSH
11246: LD_STRING )
11248: STR
11249: PPUSH
11250: CALL_OW 559
// end ; end ;
11254: LD_VAR 0 7
11258: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11259: LD_INT 0
11261: PPUSH
// streamModeActive := false ;
11262: LD_ADDR_EXP 23
11266: PUSH
11267: LD_INT 0
11269: ST_TO_ADDR
// normalCounter := 36 ;
11270: LD_ADDR_EXP 24
11274: PUSH
11275: LD_INT 36
11277: ST_TO_ADDR
// hardcoreCounter := 18 ;
11278: LD_ADDR_EXP 25
11282: PUSH
11283: LD_INT 18
11285: ST_TO_ADDR
// sRocket := false ;
11286: LD_ADDR_EXP 28
11290: PUSH
11291: LD_INT 0
11293: ST_TO_ADDR
// sSpeed := false ;
11294: LD_ADDR_EXP 27
11298: PUSH
11299: LD_INT 0
11301: ST_TO_ADDR
// sEngine := false ;
11302: LD_ADDR_EXP 29
11306: PUSH
11307: LD_INT 0
11309: ST_TO_ADDR
// sSpec := false ;
11310: LD_ADDR_EXP 26
11314: PUSH
11315: LD_INT 0
11317: ST_TO_ADDR
// sLevel := false ;
11318: LD_ADDR_EXP 30
11322: PUSH
11323: LD_INT 0
11325: ST_TO_ADDR
// sArmoury := false ;
11326: LD_ADDR_EXP 31
11330: PUSH
11331: LD_INT 0
11333: ST_TO_ADDR
// sRadar := false ;
11334: LD_ADDR_EXP 32
11338: PUSH
11339: LD_INT 0
11341: ST_TO_ADDR
// sBunker := false ;
11342: LD_ADDR_EXP 33
11346: PUSH
11347: LD_INT 0
11349: ST_TO_ADDR
// sHack := false ;
11350: LD_ADDR_EXP 34
11354: PUSH
11355: LD_INT 0
11357: ST_TO_ADDR
// sFire := false ;
11358: LD_ADDR_EXP 35
11362: PUSH
11363: LD_INT 0
11365: ST_TO_ADDR
// sRefresh := false ;
11366: LD_ADDR_EXP 36
11370: PUSH
11371: LD_INT 0
11373: ST_TO_ADDR
// sExp := false ;
11374: LD_ADDR_EXP 37
11378: PUSH
11379: LD_INT 0
11381: ST_TO_ADDR
// sDepot := false ;
11382: LD_ADDR_EXP 38
11386: PUSH
11387: LD_INT 0
11389: ST_TO_ADDR
// sFlag := false ;
11390: LD_ADDR_EXP 39
11394: PUSH
11395: LD_INT 0
11397: ST_TO_ADDR
// sKamikadze := false ;
11398: LD_ADDR_EXP 47
11402: PUSH
11403: LD_INT 0
11405: ST_TO_ADDR
// sTroll := false ;
11406: LD_ADDR_EXP 48
11410: PUSH
11411: LD_INT 0
11413: ST_TO_ADDR
// sSlow := false ;
11414: LD_ADDR_EXP 49
11418: PUSH
11419: LD_INT 0
11421: ST_TO_ADDR
// sLack := false ;
11422: LD_ADDR_EXP 50
11426: PUSH
11427: LD_INT 0
11429: ST_TO_ADDR
// sTank := false ;
11430: LD_ADDR_EXP 52
11434: PUSH
11435: LD_INT 0
11437: ST_TO_ADDR
// sRemote := false ;
11438: LD_ADDR_EXP 53
11442: PUSH
11443: LD_INT 0
11445: ST_TO_ADDR
// sPowell := false ;
11446: LD_ADDR_EXP 54
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// sTeleport := false ;
11454: LD_ADDR_EXP 57
11458: PUSH
11459: LD_INT 0
11461: ST_TO_ADDR
// sOilTower := false ;
11462: LD_ADDR_EXP 59
11466: PUSH
11467: LD_INT 0
11469: ST_TO_ADDR
// sShovel := false ;
11470: LD_ADDR_EXP 60
11474: PUSH
11475: LD_INT 0
11477: ST_TO_ADDR
// sSheik := false ;
11478: LD_ADDR_EXP 61
11482: PUSH
11483: LD_INT 0
11485: ST_TO_ADDR
// sEarthquake := false ;
11486: LD_ADDR_EXP 63
11490: PUSH
11491: LD_INT 0
11493: ST_TO_ADDR
// sAI := false ;
11494: LD_ADDR_EXP 64
11498: PUSH
11499: LD_INT 0
11501: ST_TO_ADDR
// sCargo := false ;
11502: LD_ADDR_EXP 67
11506: PUSH
11507: LD_INT 0
11509: ST_TO_ADDR
// sDLaser := false ;
11510: LD_ADDR_EXP 68
11514: PUSH
11515: LD_INT 0
11517: ST_TO_ADDR
// sExchange := false ;
11518: LD_ADDR_EXP 69
11522: PUSH
11523: LD_INT 0
11525: ST_TO_ADDR
// sFac := false ;
11526: LD_ADDR_EXP 70
11530: PUSH
11531: LD_INT 0
11533: ST_TO_ADDR
// sPower := false ;
11534: LD_ADDR_EXP 71
11538: PUSH
11539: LD_INT 0
11541: ST_TO_ADDR
// sRandom := false ;
11542: LD_ADDR_EXP 72
11546: PUSH
11547: LD_INT 0
11549: ST_TO_ADDR
// sShield := false ;
11550: LD_ADDR_EXP 73
11554: PUSH
11555: LD_INT 0
11557: ST_TO_ADDR
// sTime := false ;
11558: LD_ADDR_EXP 74
11562: PUSH
11563: LD_INT 0
11565: ST_TO_ADDR
// sTools := false ;
11566: LD_ADDR_EXP 75
11570: PUSH
11571: LD_INT 0
11573: ST_TO_ADDR
// sSold := false ;
11574: LD_ADDR_EXP 40
11578: PUSH
11579: LD_INT 0
11581: ST_TO_ADDR
// sDiff := false ;
11582: LD_ADDR_EXP 41
11586: PUSH
11587: LD_INT 0
11589: ST_TO_ADDR
// sFog := false ;
11590: LD_ADDR_EXP 44
11594: PUSH
11595: LD_INT 0
11597: ST_TO_ADDR
// sReset := false ;
11598: LD_ADDR_EXP 45
11602: PUSH
11603: LD_INT 0
11605: ST_TO_ADDR
// sSun := false ;
11606: LD_ADDR_EXP 46
11610: PUSH
11611: LD_INT 0
11613: ST_TO_ADDR
// sTiger := false ;
11614: LD_ADDR_EXP 42
11618: PUSH
11619: LD_INT 0
11621: ST_TO_ADDR
// sBomb := false ;
11622: LD_ADDR_EXP 43
11626: PUSH
11627: LD_INT 0
11629: ST_TO_ADDR
// sWound := false ;
11630: LD_ADDR_EXP 51
11634: PUSH
11635: LD_INT 0
11637: ST_TO_ADDR
// sBetray := false ;
11638: LD_ADDR_EXP 55
11642: PUSH
11643: LD_INT 0
11645: ST_TO_ADDR
// sContamin := false ;
11646: LD_ADDR_EXP 56
11650: PUSH
11651: LD_INT 0
11653: ST_TO_ADDR
// sOil := false ;
11654: LD_ADDR_EXP 58
11658: PUSH
11659: LD_INT 0
11661: ST_TO_ADDR
// sStu := false ;
11662: LD_ADDR_EXP 62
11666: PUSH
11667: LD_INT 0
11669: ST_TO_ADDR
// sBazooka := false ;
11670: LD_ADDR_EXP 65
11674: PUSH
11675: LD_INT 0
11677: ST_TO_ADDR
// sMortar := false ;
11678: LD_ADDR_EXP 66
11682: PUSH
11683: LD_INT 0
11685: ST_TO_ADDR
// sRanger := false ;
11686: LD_ADDR_EXP 76
11690: PUSH
11691: LD_INT 0
11693: ST_TO_ADDR
// sComputer := false ;
11694: LD_ADDR_EXP 77
11698: PUSH
11699: LD_INT 0
11701: ST_TO_ADDR
// s30 := false ;
11702: LD_ADDR_EXP 78
11706: PUSH
11707: LD_INT 0
11709: ST_TO_ADDR
// s60 := false ;
11710: LD_ADDR_EXP 79
11714: PUSH
11715: LD_INT 0
11717: ST_TO_ADDR
// end ;
11718: LD_VAR 0 1
11722: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
11723: LD_INT 0
11725: PPUSH
11726: PPUSH
11727: PPUSH
11728: PPUSH
11729: PPUSH
11730: PPUSH
11731: PPUSH
// result := [ ] ;
11732: LD_ADDR_VAR 0 2
11736: PUSH
11737: EMPTY
11738: ST_TO_ADDR
// if campaign_id = 1 then
11739: LD_OWVAR 69
11743: PUSH
11744: LD_INT 1
11746: EQUAL
11747: IFFALSE 14913
// begin case mission_number of 1 :
11749: LD_OWVAR 70
11753: PUSH
11754: LD_INT 1
11756: DOUBLE
11757: EQUAL
11758: IFTRUE 11762
11760: GO 11838
11762: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
11763: LD_ADDR_VAR 0 2
11767: PUSH
11768: LD_INT 2
11770: PUSH
11771: LD_INT 4
11773: PUSH
11774: LD_INT 11
11776: PUSH
11777: LD_INT 12
11779: PUSH
11780: LD_INT 15
11782: PUSH
11783: LD_INT 16
11785: PUSH
11786: LD_INT 22
11788: PUSH
11789: LD_INT 23
11791: PUSH
11792: LD_INT 26
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: PUSH
11806: LD_INT 101
11808: PUSH
11809: LD_INT 102
11811: PUSH
11812: LD_INT 106
11814: PUSH
11815: LD_INT 116
11817: PUSH
11818: LD_INT 117
11820: PUSH
11821: LD_INT 118
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: ST_TO_ADDR
11836: GO 14911
11838: LD_INT 2
11840: DOUBLE
11841: EQUAL
11842: IFTRUE 11846
11844: GO 11930
11846: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
11847: LD_ADDR_VAR 0 2
11851: PUSH
11852: LD_INT 2
11854: PUSH
11855: LD_INT 4
11857: PUSH
11858: LD_INT 11
11860: PUSH
11861: LD_INT 12
11863: PUSH
11864: LD_INT 15
11866: PUSH
11867: LD_INT 16
11869: PUSH
11870: LD_INT 22
11872: PUSH
11873: LD_INT 23
11875: PUSH
11876: LD_INT 26
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 101
11892: PUSH
11893: LD_INT 102
11895: PUSH
11896: LD_INT 105
11898: PUSH
11899: LD_INT 106
11901: PUSH
11902: LD_INT 108
11904: PUSH
11905: LD_INT 116
11907: PUSH
11908: LD_INT 117
11910: PUSH
11911: LD_INT 118
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: ST_TO_ADDR
11928: GO 14911
11930: LD_INT 3
11932: DOUBLE
11933: EQUAL
11934: IFTRUE 11938
11936: GO 12026
11938: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
11939: LD_ADDR_VAR 0 2
11943: PUSH
11944: LD_INT 2
11946: PUSH
11947: LD_INT 4
11949: PUSH
11950: LD_INT 5
11952: PUSH
11953: LD_INT 11
11955: PUSH
11956: LD_INT 12
11958: PUSH
11959: LD_INT 15
11961: PUSH
11962: LD_INT 16
11964: PUSH
11965: LD_INT 22
11967: PUSH
11968: LD_INT 26
11970: PUSH
11971: LD_INT 36
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: PUSH
11986: LD_INT 101
11988: PUSH
11989: LD_INT 102
11991: PUSH
11992: LD_INT 105
11994: PUSH
11995: LD_INT 106
11997: PUSH
11998: LD_INT 108
12000: PUSH
12001: LD_INT 116
12003: PUSH
12004: LD_INT 117
12006: PUSH
12007: LD_INT 118
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: ST_TO_ADDR
12024: GO 14911
12026: LD_INT 4
12028: DOUBLE
12029: EQUAL
12030: IFTRUE 12034
12032: GO 12130
12034: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12035: LD_ADDR_VAR 0 2
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: LD_INT 4
12045: PUSH
12046: LD_INT 5
12048: PUSH
12049: LD_INT 8
12051: PUSH
12052: LD_INT 11
12054: PUSH
12055: LD_INT 12
12057: PUSH
12058: LD_INT 15
12060: PUSH
12061: LD_INT 16
12063: PUSH
12064: LD_INT 22
12066: PUSH
12067: LD_INT 23
12069: PUSH
12070: LD_INT 26
12072: PUSH
12073: LD_INT 36
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 101
12092: PUSH
12093: LD_INT 102
12095: PUSH
12096: LD_INT 105
12098: PUSH
12099: LD_INT 106
12101: PUSH
12102: LD_INT 108
12104: PUSH
12105: LD_INT 116
12107: PUSH
12108: LD_INT 117
12110: PUSH
12111: LD_INT 118
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: ST_TO_ADDR
12128: GO 14911
12130: LD_INT 5
12132: DOUBLE
12133: EQUAL
12134: IFTRUE 12138
12136: GO 12250
12138: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12139: LD_ADDR_VAR 0 2
12143: PUSH
12144: LD_INT 2
12146: PUSH
12147: LD_INT 4
12149: PUSH
12150: LD_INT 5
12152: PUSH
12153: LD_INT 6
12155: PUSH
12156: LD_INT 8
12158: PUSH
12159: LD_INT 11
12161: PUSH
12162: LD_INT 12
12164: PUSH
12165: LD_INT 15
12167: PUSH
12168: LD_INT 16
12170: PUSH
12171: LD_INT 22
12173: PUSH
12174: LD_INT 23
12176: PUSH
12177: LD_INT 25
12179: PUSH
12180: LD_INT 26
12182: PUSH
12183: LD_INT 36
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 101
12204: PUSH
12205: LD_INT 102
12207: PUSH
12208: LD_INT 105
12210: PUSH
12211: LD_INT 106
12213: PUSH
12214: LD_INT 108
12216: PUSH
12217: LD_INT 109
12219: PUSH
12220: LD_INT 112
12222: PUSH
12223: LD_INT 116
12225: PUSH
12226: LD_INT 117
12228: PUSH
12229: LD_INT 118
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: ST_TO_ADDR
12248: GO 14911
12250: LD_INT 6
12252: DOUBLE
12253: EQUAL
12254: IFTRUE 12258
12256: GO 12390
12258: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12259: LD_ADDR_VAR 0 2
12263: PUSH
12264: LD_INT 2
12266: PUSH
12267: LD_INT 4
12269: PUSH
12270: LD_INT 5
12272: PUSH
12273: LD_INT 6
12275: PUSH
12276: LD_INT 8
12278: PUSH
12279: LD_INT 11
12281: PUSH
12282: LD_INT 12
12284: PUSH
12285: LD_INT 15
12287: PUSH
12288: LD_INT 16
12290: PUSH
12291: LD_INT 20
12293: PUSH
12294: LD_INT 21
12296: PUSH
12297: LD_INT 22
12299: PUSH
12300: LD_INT 23
12302: PUSH
12303: LD_INT 25
12305: PUSH
12306: LD_INT 26
12308: PUSH
12309: LD_INT 30
12311: PUSH
12312: LD_INT 31
12314: PUSH
12315: LD_INT 32
12317: PUSH
12318: LD_INT 36
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 101
12344: PUSH
12345: LD_INT 102
12347: PUSH
12348: LD_INT 105
12350: PUSH
12351: LD_INT 106
12353: PUSH
12354: LD_INT 108
12356: PUSH
12357: LD_INT 109
12359: PUSH
12360: LD_INT 112
12362: PUSH
12363: LD_INT 116
12365: PUSH
12366: LD_INT 117
12368: PUSH
12369: LD_INT 118
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: ST_TO_ADDR
12388: GO 14911
12390: LD_INT 7
12392: DOUBLE
12393: EQUAL
12394: IFTRUE 12398
12396: GO 12510
12398: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12399: LD_ADDR_VAR 0 2
12403: PUSH
12404: LD_INT 2
12406: PUSH
12407: LD_INT 4
12409: PUSH
12410: LD_INT 5
12412: PUSH
12413: LD_INT 7
12415: PUSH
12416: LD_INT 11
12418: PUSH
12419: LD_INT 12
12421: PUSH
12422: LD_INT 15
12424: PUSH
12425: LD_INT 16
12427: PUSH
12428: LD_INT 20
12430: PUSH
12431: LD_INT 21
12433: PUSH
12434: LD_INT 22
12436: PUSH
12437: LD_INT 23
12439: PUSH
12440: LD_INT 25
12442: PUSH
12443: LD_INT 26
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 101
12464: PUSH
12465: LD_INT 102
12467: PUSH
12468: LD_INT 103
12470: PUSH
12471: LD_INT 105
12473: PUSH
12474: LD_INT 106
12476: PUSH
12477: LD_INT 108
12479: PUSH
12480: LD_INT 112
12482: PUSH
12483: LD_INT 116
12485: PUSH
12486: LD_INT 117
12488: PUSH
12489: LD_INT 118
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: ST_TO_ADDR
12508: GO 14911
12510: LD_INT 8
12512: DOUBLE
12513: EQUAL
12514: IFTRUE 12518
12516: GO 12658
12518: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
12519: LD_ADDR_VAR 0 2
12523: PUSH
12524: LD_INT 2
12526: PUSH
12527: LD_INT 4
12529: PUSH
12530: LD_INT 5
12532: PUSH
12533: LD_INT 6
12535: PUSH
12536: LD_INT 7
12538: PUSH
12539: LD_INT 8
12541: PUSH
12542: LD_INT 11
12544: PUSH
12545: LD_INT 12
12547: PUSH
12548: LD_INT 15
12550: PUSH
12551: LD_INT 16
12553: PUSH
12554: LD_INT 20
12556: PUSH
12557: LD_INT 21
12559: PUSH
12560: LD_INT 22
12562: PUSH
12563: LD_INT 23
12565: PUSH
12566: LD_INT 25
12568: PUSH
12569: LD_INT 26
12571: PUSH
12572: LD_INT 30
12574: PUSH
12575: LD_INT 31
12577: PUSH
12578: LD_INT 32
12580: PUSH
12581: LD_INT 36
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 101
12608: PUSH
12609: LD_INT 102
12611: PUSH
12612: LD_INT 103
12614: PUSH
12615: LD_INT 105
12617: PUSH
12618: LD_INT 106
12620: PUSH
12621: LD_INT 108
12623: PUSH
12624: LD_INT 109
12626: PUSH
12627: LD_INT 112
12629: PUSH
12630: LD_INT 116
12632: PUSH
12633: LD_INT 117
12635: PUSH
12636: LD_INT 118
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: ST_TO_ADDR
12656: GO 14911
12658: LD_INT 9
12660: DOUBLE
12661: EQUAL
12662: IFTRUE 12666
12664: GO 12814
12666: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
12667: LD_ADDR_VAR 0 2
12671: PUSH
12672: LD_INT 2
12674: PUSH
12675: LD_INT 4
12677: PUSH
12678: LD_INT 5
12680: PUSH
12681: LD_INT 6
12683: PUSH
12684: LD_INT 7
12686: PUSH
12687: LD_INT 8
12689: PUSH
12690: LD_INT 11
12692: PUSH
12693: LD_INT 12
12695: PUSH
12696: LD_INT 15
12698: PUSH
12699: LD_INT 16
12701: PUSH
12702: LD_INT 20
12704: PUSH
12705: LD_INT 21
12707: PUSH
12708: LD_INT 22
12710: PUSH
12711: LD_INT 23
12713: PUSH
12714: LD_INT 25
12716: PUSH
12717: LD_INT 26
12719: PUSH
12720: LD_INT 28
12722: PUSH
12723: LD_INT 30
12725: PUSH
12726: LD_INT 31
12728: PUSH
12729: LD_INT 32
12731: PUSH
12732: LD_INT 36
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: PUSH
12758: LD_INT 101
12760: PUSH
12761: LD_INT 102
12763: PUSH
12764: LD_INT 103
12766: PUSH
12767: LD_INT 105
12769: PUSH
12770: LD_INT 106
12772: PUSH
12773: LD_INT 108
12775: PUSH
12776: LD_INT 109
12778: PUSH
12779: LD_INT 112
12781: PUSH
12782: LD_INT 114
12784: PUSH
12785: LD_INT 116
12787: PUSH
12788: LD_INT 117
12790: PUSH
12791: LD_INT 118
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: ST_TO_ADDR
12812: GO 14911
12814: LD_INT 10
12816: DOUBLE
12817: EQUAL
12818: IFTRUE 12822
12820: GO 13018
12822: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
12823: LD_ADDR_VAR 0 2
12827: PUSH
12828: LD_INT 2
12830: PUSH
12831: LD_INT 4
12833: PUSH
12834: LD_INT 5
12836: PUSH
12837: LD_INT 6
12839: PUSH
12840: LD_INT 7
12842: PUSH
12843: LD_INT 8
12845: PUSH
12846: LD_INT 9
12848: PUSH
12849: LD_INT 10
12851: PUSH
12852: LD_INT 11
12854: PUSH
12855: LD_INT 12
12857: PUSH
12858: LD_INT 13
12860: PUSH
12861: LD_INT 14
12863: PUSH
12864: LD_INT 15
12866: PUSH
12867: LD_INT 16
12869: PUSH
12870: LD_INT 17
12872: PUSH
12873: LD_INT 18
12875: PUSH
12876: LD_INT 19
12878: PUSH
12879: LD_INT 20
12881: PUSH
12882: LD_INT 21
12884: PUSH
12885: LD_INT 22
12887: PUSH
12888: LD_INT 23
12890: PUSH
12891: LD_INT 24
12893: PUSH
12894: LD_INT 25
12896: PUSH
12897: LD_INT 26
12899: PUSH
12900: LD_INT 28
12902: PUSH
12903: LD_INT 30
12905: PUSH
12906: LD_INT 31
12908: PUSH
12909: LD_INT 32
12911: PUSH
12912: LD_INT 36
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 101
12948: PUSH
12949: LD_INT 102
12951: PUSH
12952: LD_INT 103
12954: PUSH
12955: LD_INT 104
12957: PUSH
12958: LD_INT 105
12960: PUSH
12961: LD_INT 106
12963: PUSH
12964: LD_INT 107
12966: PUSH
12967: LD_INT 108
12969: PUSH
12970: LD_INT 109
12972: PUSH
12973: LD_INT 110
12975: PUSH
12976: LD_INT 111
12978: PUSH
12979: LD_INT 112
12981: PUSH
12982: LD_INT 114
12984: PUSH
12985: LD_INT 116
12987: PUSH
12988: LD_INT 117
12990: PUSH
12991: LD_INT 118
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: ST_TO_ADDR
13016: GO 14911
13018: LD_INT 11
13020: DOUBLE
13021: EQUAL
13022: IFTRUE 13026
13024: GO 13230
13026: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13027: LD_ADDR_VAR 0 2
13031: PUSH
13032: LD_INT 2
13034: PUSH
13035: LD_INT 3
13037: PUSH
13038: LD_INT 4
13040: PUSH
13041: LD_INT 5
13043: PUSH
13044: LD_INT 6
13046: PUSH
13047: LD_INT 7
13049: PUSH
13050: LD_INT 8
13052: PUSH
13053: LD_INT 9
13055: PUSH
13056: LD_INT 10
13058: PUSH
13059: LD_INT 11
13061: PUSH
13062: LD_INT 12
13064: PUSH
13065: LD_INT 13
13067: PUSH
13068: LD_INT 14
13070: PUSH
13071: LD_INT 15
13073: PUSH
13074: LD_INT 16
13076: PUSH
13077: LD_INT 17
13079: PUSH
13080: LD_INT 18
13082: PUSH
13083: LD_INT 19
13085: PUSH
13086: LD_INT 20
13088: PUSH
13089: LD_INT 21
13091: PUSH
13092: LD_INT 22
13094: PUSH
13095: LD_INT 23
13097: PUSH
13098: LD_INT 24
13100: PUSH
13101: LD_INT 25
13103: PUSH
13104: LD_INT 26
13106: PUSH
13107: LD_INT 28
13109: PUSH
13110: LD_INT 30
13112: PUSH
13113: LD_INT 31
13115: PUSH
13116: LD_INT 32
13118: PUSH
13119: LD_INT 34
13121: PUSH
13122: LD_INT 36
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 101
13160: PUSH
13161: LD_INT 102
13163: PUSH
13164: LD_INT 103
13166: PUSH
13167: LD_INT 104
13169: PUSH
13170: LD_INT 105
13172: PUSH
13173: LD_INT 106
13175: PUSH
13176: LD_INT 107
13178: PUSH
13179: LD_INT 108
13181: PUSH
13182: LD_INT 109
13184: PUSH
13185: LD_INT 110
13187: PUSH
13188: LD_INT 111
13190: PUSH
13191: LD_INT 112
13193: PUSH
13194: LD_INT 114
13196: PUSH
13197: LD_INT 116
13199: PUSH
13200: LD_INT 117
13202: PUSH
13203: LD_INT 118
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: ST_TO_ADDR
13228: GO 14911
13230: LD_INT 12
13232: DOUBLE
13233: EQUAL
13234: IFTRUE 13238
13236: GO 13458
13238: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13239: LD_ADDR_VAR 0 2
13243: PUSH
13244: LD_INT 1
13246: PUSH
13247: LD_INT 2
13249: PUSH
13250: LD_INT 3
13252: PUSH
13253: LD_INT 4
13255: PUSH
13256: LD_INT 5
13258: PUSH
13259: LD_INT 6
13261: PUSH
13262: LD_INT 7
13264: PUSH
13265: LD_INT 8
13267: PUSH
13268: LD_INT 9
13270: PUSH
13271: LD_INT 10
13273: PUSH
13274: LD_INT 11
13276: PUSH
13277: LD_INT 12
13279: PUSH
13280: LD_INT 13
13282: PUSH
13283: LD_INT 14
13285: PUSH
13286: LD_INT 15
13288: PUSH
13289: LD_INT 16
13291: PUSH
13292: LD_INT 17
13294: PUSH
13295: LD_INT 18
13297: PUSH
13298: LD_INT 19
13300: PUSH
13301: LD_INT 20
13303: PUSH
13304: LD_INT 21
13306: PUSH
13307: LD_INT 22
13309: PUSH
13310: LD_INT 23
13312: PUSH
13313: LD_INT 24
13315: PUSH
13316: LD_INT 25
13318: PUSH
13319: LD_INT 26
13321: PUSH
13322: LD_INT 27
13324: PUSH
13325: LD_INT 28
13327: PUSH
13328: LD_INT 30
13330: PUSH
13331: LD_INT 31
13333: PUSH
13334: LD_INT 32
13336: PUSH
13337: LD_INT 33
13339: PUSH
13340: LD_INT 34
13342: PUSH
13343: LD_INT 36
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 101
13384: PUSH
13385: LD_INT 102
13387: PUSH
13388: LD_INT 103
13390: PUSH
13391: LD_INT 104
13393: PUSH
13394: LD_INT 105
13396: PUSH
13397: LD_INT 106
13399: PUSH
13400: LD_INT 107
13402: PUSH
13403: LD_INT 108
13405: PUSH
13406: LD_INT 109
13408: PUSH
13409: LD_INT 110
13411: PUSH
13412: LD_INT 111
13414: PUSH
13415: LD_INT 112
13417: PUSH
13418: LD_INT 113
13420: PUSH
13421: LD_INT 114
13423: PUSH
13424: LD_INT 116
13426: PUSH
13427: LD_INT 117
13429: PUSH
13430: LD_INT 118
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: ST_TO_ADDR
13456: GO 14911
13458: LD_INT 13
13460: DOUBLE
13461: EQUAL
13462: IFTRUE 13466
13464: GO 13674
13466: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
13467: LD_ADDR_VAR 0 2
13471: PUSH
13472: LD_INT 1
13474: PUSH
13475: LD_INT 2
13477: PUSH
13478: LD_INT 3
13480: PUSH
13481: LD_INT 4
13483: PUSH
13484: LD_INT 5
13486: PUSH
13487: LD_INT 8
13489: PUSH
13490: LD_INT 9
13492: PUSH
13493: LD_INT 10
13495: PUSH
13496: LD_INT 11
13498: PUSH
13499: LD_INT 12
13501: PUSH
13502: LD_INT 14
13504: PUSH
13505: LD_INT 15
13507: PUSH
13508: LD_INT 16
13510: PUSH
13511: LD_INT 17
13513: PUSH
13514: LD_INT 18
13516: PUSH
13517: LD_INT 19
13519: PUSH
13520: LD_INT 20
13522: PUSH
13523: LD_INT 21
13525: PUSH
13526: LD_INT 22
13528: PUSH
13529: LD_INT 23
13531: PUSH
13532: LD_INT 24
13534: PUSH
13535: LD_INT 25
13537: PUSH
13538: LD_INT 26
13540: PUSH
13541: LD_INT 27
13543: PUSH
13544: LD_INT 28
13546: PUSH
13547: LD_INT 30
13549: PUSH
13550: LD_INT 31
13552: PUSH
13553: LD_INT 32
13555: PUSH
13556: LD_INT 33
13558: PUSH
13559: LD_INT 34
13561: PUSH
13562: LD_INT 36
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 101
13600: PUSH
13601: LD_INT 102
13603: PUSH
13604: LD_INT 103
13606: PUSH
13607: LD_INT 104
13609: PUSH
13610: LD_INT 105
13612: PUSH
13613: LD_INT 106
13615: PUSH
13616: LD_INT 107
13618: PUSH
13619: LD_INT 108
13621: PUSH
13622: LD_INT 109
13624: PUSH
13625: LD_INT 110
13627: PUSH
13628: LD_INT 111
13630: PUSH
13631: LD_INT 112
13633: PUSH
13634: LD_INT 113
13636: PUSH
13637: LD_INT 114
13639: PUSH
13640: LD_INT 116
13642: PUSH
13643: LD_INT 117
13645: PUSH
13646: LD_INT 118
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: ST_TO_ADDR
13672: GO 14911
13674: LD_INT 14
13676: DOUBLE
13677: EQUAL
13678: IFTRUE 13682
13680: GO 13906
13682: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
13683: LD_ADDR_VAR 0 2
13687: PUSH
13688: LD_INT 1
13690: PUSH
13691: LD_INT 2
13693: PUSH
13694: LD_INT 3
13696: PUSH
13697: LD_INT 4
13699: PUSH
13700: LD_INT 5
13702: PUSH
13703: LD_INT 6
13705: PUSH
13706: LD_INT 7
13708: PUSH
13709: LD_INT 8
13711: PUSH
13712: LD_INT 9
13714: PUSH
13715: LD_INT 10
13717: PUSH
13718: LD_INT 11
13720: PUSH
13721: LD_INT 12
13723: PUSH
13724: LD_INT 13
13726: PUSH
13727: LD_INT 14
13729: PUSH
13730: LD_INT 15
13732: PUSH
13733: LD_INT 16
13735: PUSH
13736: LD_INT 17
13738: PUSH
13739: LD_INT 18
13741: PUSH
13742: LD_INT 19
13744: PUSH
13745: LD_INT 20
13747: PUSH
13748: LD_INT 21
13750: PUSH
13751: LD_INT 22
13753: PUSH
13754: LD_INT 23
13756: PUSH
13757: LD_INT 24
13759: PUSH
13760: LD_INT 25
13762: PUSH
13763: LD_INT 26
13765: PUSH
13766: LD_INT 27
13768: PUSH
13769: LD_INT 28
13771: PUSH
13772: LD_INT 29
13774: PUSH
13775: LD_INT 30
13777: PUSH
13778: LD_INT 31
13780: PUSH
13781: LD_INT 32
13783: PUSH
13784: LD_INT 33
13786: PUSH
13787: LD_INT 34
13789: PUSH
13790: LD_INT 36
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 101
13832: PUSH
13833: LD_INT 102
13835: PUSH
13836: LD_INT 103
13838: PUSH
13839: LD_INT 104
13841: PUSH
13842: LD_INT 105
13844: PUSH
13845: LD_INT 106
13847: PUSH
13848: LD_INT 107
13850: PUSH
13851: LD_INT 108
13853: PUSH
13854: LD_INT 109
13856: PUSH
13857: LD_INT 110
13859: PUSH
13860: LD_INT 111
13862: PUSH
13863: LD_INT 112
13865: PUSH
13866: LD_INT 113
13868: PUSH
13869: LD_INT 114
13871: PUSH
13872: LD_INT 116
13874: PUSH
13875: LD_INT 117
13877: PUSH
13878: LD_INT 118
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: ST_TO_ADDR
13904: GO 14911
13906: LD_INT 15
13908: DOUBLE
13909: EQUAL
13910: IFTRUE 13914
13912: GO 14138
13914: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
13915: LD_ADDR_VAR 0 2
13919: PUSH
13920: LD_INT 1
13922: PUSH
13923: LD_INT 2
13925: PUSH
13926: LD_INT 3
13928: PUSH
13929: LD_INT 4
13931: PUSH
13932: LD_INT 5
13934: PUSH
13935: LD_INT 6
13937: PUSH
13938: LD_INT 7
13940: PUSH
13941: LD_INT 8
13943: PUSH
13944: LD_INT 9
13946: PUSH
13947: LD_INT 10
13949: PUSH
13950: LD_INT 11
13952: PUSH
13953: LD_INT 12
13955: PUSH
13956: LD_INT 13
13958: PUSH
13959: LD_INT 14
13961: PUSH
13962: LD_INT 15
13964: PUSH
13965: LD_INT 16
13967: PUSH
13968: LD_INT 17
13970: PUSH
13971: LD_INT 18
13973: PUSH
13974: LD_INT 19
13976: PUSH
13977: LD_INT 20
13979: PUSH
13980: LD_INT 21
13982: PUSH
13983: LD_INT 22
13985: PUSH
13986: LD_INT 23
13988: PUSH
13989: LD_INT 24
13991: PUSH
13992: LD_INT 25
13994: PUSH
13995: LD_INT 26
13997: PUSH
13998: LD_INT 27
14000: PUSH
14001: LD_INT 28
14003: PUSH
14004: LD_INT 29
14006: PUSH
14007: LD_INT 30
14009: PUSH
14010: LD_INT 31
14012: PUSH
14013: LD_INT 32
14015: PUSH
14016: LD_INT 33
14018: PUSH
14019: LD_INT 34
14021: PUSH
14022: LD_INT 36
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: PUSH
14062: LD_INT 101
14064: PUSH
14065: LD_INT 102
14067: PUSH
14068: LD_INT 103
14070: PUSH
14071: LD_INT 104
14073: PUSH
14074: LD_INT 105
14076: PUSH
14077: LD_INT 106
14079: PUSH
14080: LD_INT 107
14082: PUSH
14083: LD_INT 108
14085: PUSH
14086: LD_INT 109
14088: PUSH
14089: LD_INT 110
14091: PUSH
14092: LD_INT 111
14094: PUSH
14095: LD_INT 112
14097: PUSH
14098: LD_INT 113
14100: PUSH
14101: LD_INT 114
14103: PUSH
14104: LD_INT 116
14106: PUSH
14107: LD_INT 117
14109: PUSH
14110: LD_INT 118
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: ST_TO_ADDR
14136: GO 14911
14138: LD_INT 16
14140: DOUBLE
14141: EQUAL
14142: IFTRUE 14146
14144: GO 14282
14146: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14147: LD_ADDR_VAR 0 2
14151: PUSH
14152: LD_INT 2
14154: PUSH
14155: LD_INT 4
14157: PUSH
14158: LD_INT 5
14160: PUSH
14161: LD_INT 7
14163: PUSH
14164: LD_INT 11
14166: PUSH
14167: LD_INT 12
14169: PUSH
14170: LD_INT 15
14172: PUSH
14173: LD_INT 16
14175: PUSH
14176: LD_INT 20
14178: PUSH
14179: LD_INT 21
14181: PUSH
14182: LD_INT 22
14184: PUSH
14185: LD_INT 23
14187: PUSH
14188: LD_INT 25
14190: PUSH
14191: LD_INT 26
14193: PUSH
14194: LD_INT 30
14196: PUSH
14197: LD_INT 31
14199: PUSH
14200: LD_INT 32
14202: PUSH
14203: LD_INT 33
14205: PUSH
14206: LD_INT 34
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: PUSH
14230: LD_INT 101
14232: PUSH
14233: LD_INT 102
14235: PUSH
14236: LD_INT 103
14238: PUSH
14239: LD_INT 106
14241: PUSH
14242: LD_INT 108
14244: PUSH
14245: LD_INT 112
14247: PUSH
14248: LD_INT 113
14250: PUSH
14251: LD_INT 114
14253: PUSH
14254: LD_INT 116
14256: PUSH
14257: LD_INT 117
14259: PUSH
14260: LD_INT 118
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: ST_TO_ADDR
14280: GO 14911
14282: LD_INT 17
14284: DOUBLE
14285: EQUAL
14286: IFTRUE 14290
14288: GO 14514
14290: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14291: LD_ADDR_VAR 0 2
14295: PUSH
14296: LD_INT 1
14298: PUSH
14299: LD_INT 2
14301: PUSH
14302: LD_INT 3
14304: PUSH
14305: LD_INT 4
14307: PUSH
14308: LD_INT 5
14310: PUSH
14311: LD_INT 6
14313: PUSH
14314: LD_INT 7
14316: PUSH
14317: LD_INT 8
14319: PUSH
14320: LD_INT 9
14322: PUSH
14323: LD_INT 10
14325: PUSH
14326: LD_INT 11
14328: PUSH
14329: LD_INT 12
14331: PUSH
14332: LD_INT 13
14334: PUSH
14335: LD_INT 14
14337: PUSH
14338: LD_INT 15
14340: PUSH
14341: LD_INT 16
14343: PUSH
14344: LD_INT 17
14346: PUSH
14347: LD_INT 18
14349: PUSH
14350: LD_INT 19
14352: PUSH
14353: LD_INT 20
14355: PUSH
14356: LD_INT 21
14358: PUSH
14359: LD_INT 22
14361: PUSH
14362: LD_INT 23
14364: PUSH
14365: LD_INT 24
14367: PUSH
14368: LD_INT 25
14370: PUSH
14371: LD_INT 26
14373: PUSH
14374: LD_INT 27
14376: PUSH
14377: LD_INT 28
14379: PUSH
14380: LD_INT 29
14382: PUSH
14383: LD_INT 30
14385: PUSH
14386: LD_INT 31
14388: PUSH
14389: LD_INT 32
14391: PUSH
14392: LD_INT 33
14394: PUSH
14395: LD_INT 34
14397: PUSH
14398: LD_INT 36
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 101
14440: PUSH
14441: LD_INT 102
14443: PUSH
14444: LD_INT 103
14446: PUSH
14447: LD_INT 104
14449: PUSH
14450: LD_INT 105
14452: PUSH
14453: LD_INT 106
14455: PUSH
14456: LD_INT 107
14458: PUSH
14459: LD_INT 108
14461: PUSH
14462: LD_INT 109
14464: PUSH
14465: LD_INT 110
14467: PUSH
14468: LD_INT 111
14470: PUSH
14471: LD_INT 112
14473: PUSH
14474: LD_INT 113
14476: PUSH
14477: LD_INT 114
14479: PUSH
14480: LD_INT 116
14482: PUSH
14483: LD_INT 117
14485: PUSH
14486: LD_INT 118
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: LIST
14505: LIST
14506: LIST
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: ST_TO_ADDR
14512: GO 14911
14514: LD_INT 18
14516: DOUBLE
14517: EQUAL
14518: IFTRUE 14522
14520: GO 14670
14522: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
14523: LD_ADDR_VAR 0 2
14527: PUSH
14528: LD_INT 2
14530: PUSH
14531: LD_INT 4
14533: PUSH
14534: LD_INT 5
14536: PUSH
14537: LD_INT 7
14539: PUSH
14540: LD_INT 11
14542: PUSH
14543: LD_INT 12
14545: PUSH
14546: LD_INT 15
14548: PUSH
14549: LD_INT 16
14551: PUSH
14552: LD_INT 20
14554: PUSH
14555: LD_INT 21
14557: PUSH
14558: LD_INT 22
14560: PUSH
14561: LD_INT 23
14563: PUSH
14564: LD_INT 25
14566: PUSH
14567: LD_INT 26
14569: PUSH
14570: LD_INT 30
14572: PUSH
14573: LD_INT 31
14575: PUSH
14576: LD_INT 32
14578: PUSH
14579: LD_INT 33
14581: PUSH
14582: LD_INT 34
14584: PUSH
14585: LD_INT 35
14587: PUSH
14588: LD_INT 36
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 101
14616: PUSH
14617: LD_INT 102
14619: PUSH
14620: LD_INT 103
14622: PUSH
14623: LD_INT 106
14625: PUSH
14626: LD_INT 108
14628: PUSH
14629: LD_INT 112
14631: PUSH
14632: LD_INT 113
14634: PUSH
14635: LD_INT 114
14637: PUSH
14638: LD_INT 115
14640: PUSH
14641: LD_INT 116
14643: PUSH
14644: LD_INT 117
14646: PUSH
14647: LD_INT 118
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: ST_TO_ADDR
14668: GO 14911
14670: LD_INT 19
14672: DOUBLE
14673: EQUAL
14674: IFTRUE 14678
14676: GO 14910
14678: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
14679: LD_ADDR_VAR 0 2
14683: PUSH
14684: LD_INT 1
14686: PUSH
14687: LD_INT 2
14689: PUSH
14690: LD_INT 3
14692: PUSH
14693: LD_INT 4
14695: PUSH
14696: LD_INT 5
14698: PUSH
14699: LD_INT 6
14701: PUSH
14702: LD_INT 7
14704: PUSH
14705: LD_INT 8
14707: PUSH
14708: LD_INT 9
14710: PUSH
14711: LD_INT 10
14713: PUSH
14714: LD_INT 11
14716: PUSH
14717: LD_INT 12
14719: PUSH
14720: LD_INT 13
14722: PUSH
14723: LD_INT 14
14725: PUSH
14726: LD_INT 15
14728: PUSH
14729: LD_INT 16
14731: PUSH
14732: LD_INT 17
14734: PUSH
14735: LD_INT 18
14737: PUSH
14738: LD_INT 19
14740: PUSH
14741: LD_INT 20
14743: PUSH
14744: LD_INT 21
14746: PUSH
14747: LD_INT 22
14749: PUSH
14750: LD_INT 23
14752: PUSH
14753: LD_INT 24
14755: PUSH
14756: LD_INT 25
14758: PUSH
14759: LD_INT 26
14761: PUSH
14762: LD_INT 27
14764: PUSH
14765: LD_INT 28
14767: PUSH
14768: LD_INT 29
14770: PUSH
14771: LD_INT 30
14773: PUSH
14774: LD_INT 31
14776: PUSH
14777: LD_INT 32
14779: PUSH
14780: LD_INT 33
14782: PUSH
14783: LD_INT 34
14785: PUSH
14786: LD_INT 35
14788: PUSH
14789: LD_INT 36
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: PUSH
14830: LD_INT 101
14832: PUSH
14833: LD_INT 102
14835: PUSH
14836: LD_INT 103
14838: PUSH
14839: LD_INT 104
14841: PUSH
14842: LD_INT 105
14844: PUSH
14845: LD_INT 106
14847: PUSH
14848: LD_INT 107
14850: PUSH
14851: LD_INT 108
14853: PUSH
14854: LD_INT 109
14856: PUSH
14857: LD_INT 110
14859: PUSH
14860: LD_INT 111
14862: PUSH
14863: LD_INT 112
14865: PUSH
14866: LD_INT 113
14868: PUSH
14869: LD_INT 114
14871: PUSH
14872: LD_INT 115
14874: PUSH
14875: LD_INT 116
14877: PUSH
14878: LD_INT 117
14880: PUSH
14881: LD_INT 118
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: ST_TO_ADDR
14908: GO 14911
14910: POP
// end else
14911: GO 15142
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
14913: LD_ADDR_VAR 0 2
14917: PUSH
14918: LD_INT 1
14920: PUSH
14921: LD_INT 2
14923: PUSH
14924: LD_INT 3
14926: PUSH
14927: LD_INT 4
14929: PUSH
14930: LD_INT 5
14932: PUSH
14933: LD_INT 6
14935: PUSH
14936: LD_INT 7
14938: PUSH
14939: LD_INT 8
14941: PUSH
14942: LD_INT 9
14944: PUSH
14945: LD_INT 10
14947: PUSH
14948: LD_INT 11
14950: PUSH
14951: LD_INT 12
14953: PUSH
14954: LD_INT 13
14956: PUSH
14957: LD_INT 14
14959: PUSH
14960: LD_INT 15
14962: PUSH
14963: LD_INT 16
14965: PUSH
14966: LD_INT 17
14968: PUSH
14969: LD_INT 18
14971: PUSH
14972: LD_INT 19
14974: PUSH
14975: LD_INT 20
14977: PUSH
14978: LD_INT 21
14980: PUSH
14981: LD_INT 22
14983: PUSH
14984: LD_INT 23
14986: PUSH
14987: LD_INT 24
14989: PUSH
14990: LD_INT 25
14992: PUSH
14993: LD_INT 26
14995: PUSH
14996: LD_INT 27
14998: PUSH
14999: LD_INT 28
15001: PUSH
15002: LD_INT 29
15004: PUSH
15005: LD_INT 30
15007: PUSH
15008: LD_INT 31
15010: PUSH
15011: LD_INT 32
15013: PUSH
15014: LD_INT 33
15016: PUSH
15017: LD_INT 34
15019: PUSH
15020: LD_INT 35
15022: PUSH
15023: LD_INT 36
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 101
15066: PUSH
15067: LD_INT 102
15069: PUSH
15070: LD_INT 103
15072: PUSH
15073: LD_INT 104
15075: PUSH
15076: LD_INT 105
15078: PUSH
15079: LD_INT 106
15081: PUSH
15082: LD_INT 107
15084: PUSH
15085: LD_INT 108
15087: PUSH
15088: LD_INT 109
15090: PUSH
15091: LD_INT 110
15093: PUSH
15094: LD_INT 111
15096: PUSH
15097: LD_INT 112
15099: PUSH
15100: LD_INT 113
15102: PUSH
15103: LD_INT 114
15105: PUSH
15106: LD_INT 115
15108: PUSH
15109: LD_INT 116
15111: PUSH
15112: LD_INT 117
15114: PUSH
15115: LD_INT 118
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: ST_TO_ADDR
// if result then
15142: LD_VAR 0 2
15146: IFFALSE 15932
// begin normal :=  ;
15148: LD_ADDR_VAR 0 5
15152: PUSH
15153: LD_STRING 
15155: ST_TO_ADDR
// hardcore :=  ;
15156: LD_ADDR_VAR 0 6
15160: PUSH
15161: LD_STRING 
15163: ST_TO_ADDR
// active :=  ;
15164: LD_ADDR_VAR 0 7
15168: PUSH
15169: LD_STRING 
15171: ST_TO_ADDR
// for i = 1 to normalCounter do
15172: LD_ADDR_VAR 0 8
15176: PUSH
15177: DOUBLE
15178: LD_INT 1
15180: DEC
15181: ST_TO_ADDR
15182: LD_EXP 24
15186: PUSH
15187: FOR_TO
15188: IFFALSE 15289
// begin tmp := 0 ;
15190: LD_ADDR_VAR 0 3
15194: PUSH
15195: LD_STRING 0
15197: ST_TO_ADDR
// if result [ 1 ] then
15198: LD_VAR 0 2
15202: PUSH
15203: LD_INT 1
15205: ARRAY
15206: IFFALSE 15271
// if result [ 1 ] [ 1 ] = i then
15208: LD_VAR 0 2
15212: PUSH
15213: LD_INT 1
15215: ARRAY
15216: PUSH
15217: LD_INT 1
15219: ARRAY
15220: PUSH
15221: LD_VAR 0 8
15225: EQUAL
15226: IFFALSE 15271
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15228: LD_ADDR_VAR 0 2
15232: PUSH
15233: LD_VAR 0 2
15237: PPUSH
15238: LD_INT 1
15240: PPUSH
15241: LD_VAR 0 2
15245: PUSH
15246: LD_INT 1
15248: ARRAY
15249: PPUSH
15250: LD_INT 1
15252: PPUSH
15253: CALL_OW 3
15257: PPUSH
15258: CALL_OW 1
15262: ST_TO_ADDR
// tmp := 1 ;
15263: LD_ADDR_VAR 0 3
15267: PUSH
15268: LD_STRING 1
15270: ST_TO_ADDR
// end ; normal := normal & tmp ;
15271: LD_ADDR_VAR 0 5
15275: PUSH
15276: LD_VAR 0 5
15280: PUSH
15281: LD_VAR 0 3
15285: STR
15286: ST_TO_ADDR
// end ;
15287: GO 15187
15289: POP
15290: POP
// for i = 1 to hardcoreCounter do
15291: LD_ADDR_VAR 0 8
15295: PUSH
15296: DOUBLE
15297: LD_INT 1
15299: DEC
15300: ST_TO_ADDR
15301: LD_EXP 25
15305: PUSH
15306: FOR_TO
15307: IFFALSE 15412
// begin tmp := 0 ;
15309: LD_ADDR_VAR 0 3
15313: PUSH
15314: LD_STRING 0
15316: ST_TO_ADDR
// if result [ 2 ] then
15317: LD_VAR 0 2
15321: PUSH
15322: LD_INT 2
15324: ARRAY
15325: IFFALSE 15394
// if result [ 2 ] [ 1 ] = 100 + i then
15327: LD_VAR 0 2
15331: PUSH
15332: LD_INT 2
15334: ARRAY
15335: PUSH
15336: LD_INT 1
15338: ARRAY
15339: PUSH
15340: LD_INT 100
15342: PUSH
15343: LD_VAR 0 8
15347: PLUS
15348: EQUAL
15349: IFFALSE 15394
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15351: LD_ADDR_VAR 0 2
15355: PUSH
15356: LD_VAR 0 2
15360: PPUSH
15361: LD_INT 2
15363: PPUSH
15364: LD_VAR 0 2
15368: PUSH
15369: LD_INT 2
15371: ARRAY
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 3
15380: PPUSH
15381: CALL_OW 1
15385: ST_TO_ADDR
// tmp := 1 ;
15386: LD_ADDR_VAR 0 3
15390: PUSH
15391: LD_STRING 1
15393: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15394: LD_ADDR_VAR 0 6
15398: PUSH
15399: LD_VAR 0 6
15403: PUSH
15404: LD_VAR 0 3
15408: STR
15409: ST_TO_ADDR
// end ;
15410: GO 15306
15412: POP
15413: POP
// if isGameLoad then
15414: LD_VAR 0 1
15418: IFFALSE 15893
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
15420: LD_ADDR_VAR 0 4
15424: PUSH
15425: LD_EXP 28
15429: PUSH
15430: LD_EXP 27
15434: PUSH
15435: LD_EXP 29
15439: PUSH
15440: LD_EXP 26
15444: PUSH
15445: LD_EXP 30
15449: PUSH
15450: LD_EXP 31
15454: PUSH
15455: LD_EXP 32
15459: PUSH
15460: LD_EXP 33
15464: PUSH
15465: LD_EXP 34
15469: PUSH
15470: LD_EXP 35
15474: PUSH
15475: LD_EXP 36
15479: PUSH
15480: LD_EXP 37
15484: PUSH
15485: LD_EXP 38
15489: PUSH
15490: LD_EXP 39
15494: PUSH
15495: LD_EXP 47
15499: PUSH
15500: LD_EXP 48
15504: PUSH
15505: LD_EXP 49
15509: PUSH
15510: LD_EXP 50
15514: PUSH
15515: LD_EXP 52
15519: PUSH
15520: LD_EXP 53
15524: PUSH
15525: LD_EXP 54
15529: PUSH
15530: LD_EXP 57
15534: PUSH
15535: LD_EXP 59
15539: PUSH
15540: LD_EXP 60
15544: PUSH
15545: LD_EXP 61
15549: PUSH
15550: LD_EXP 63
15554: PUSH
15555: LD_EXP 64
15559: PUSH
15560: LD_EXP 67
15564: PUSH
15565: LD_EXP 68
15569: PUSH
15570: LD_EXP 69
15574: PUSH
15575: LD_EXP 70
15579: PUSH
15580: LD_EXP 71
15584: PUSH
15585: LD_EXP 72
15589: PUSH
15590: LD_EXP 73
15594: PUSH
15595: LD_EXP 74
15599: PUSH
15600: LD_EXP 75
15604: PUSH
15605: LD_EXP 40
15609: PUSH
15610: LD_EXP 41
15614: PUSH
15615: LD_EXP 44
15619: PUSH
15620: LD_EXP 45
15624: PUSH
15625: LD_EXP 46
15629: PUSH
15630: LD_EXP 42
15634: PUSH
15635: LD_EXP 43
15639: PUSH
15640: LD_EXP 51
15644: PUSH
15645: LD_EXP 55
15649: PUSH
15650: LD_EXP 56
15654: PUSH
15655: LD_EXP 58
15659: PUSH
15660: LD_EXP 62
15664: PUSH
15665: LD_EXP 65
15669: PUSH
15670: LD_EXP 66
15674: PUSH
15675: LD_EXP 76
15679: PUSH
15680: LD_EXP 77
15684: PUSH
15685: LD_EXP 78
15689: PUSH
15690: LD_EXP 79
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: ST_TO_ADDR
// tmp :=  ;
15751: LD_ADDR_VAR 0 3
15755: PUSH
15756: LD_STRING 
15758: ST_TO_ADDR
// for i = 1 to normalCounter do
15759: LD_ADDR_VAR 0 8
15763: PUSH
15764: DOUBLE
15765: LD_INT 1
15767: DEC
15768: ST_TO_ADDR
15769: LD_EXP 24
15773: PUSH
15774: FOR_TO
15775: IFFALSE 15811
// begin if flags [ i ] then
15777: LD_VAR 0 4
15781: PUSH
15782: LD_VAR 0 8
15786: ARRAY
15787: IFFALSE 15809
// tmp := tmp & i & ; ;
15789: LD_ADDR_VAR 0 3
15793: PUSH
15794: LD_VAR 0 3
15798: PUSH
15799: LD_VAR 0 8
15803: STR
15804: PUSH
15805: LD_STRING ;
15807: STR
15808: ST_TO_ADDR
// end ;
15809: GO 15774
15811: POP
15812: POP
// for i = 1 to hardcoreCounter do
15813: LD_ADDR_VAR 0 8
15817: PUSH
15818: DOUBLE
15819: LD_INT 1
15821: DEC
15822: ST_TO_ADDR
15823: LD_EXP 25
15827: PUSH
15828: FOR_TO
15829: IFFALSE 15875
// begin if flags [ normalCounter + i ] then
15831: LD_VAR 0 4
15835: PUSH
15836: LD_EXP 24
15840: PUSH
15841: LD_VAR 0 8
15845: PLUS
15846: ARRAY
15847: IFFALSE 15873
// tmp := tmp & ( 100 + i ) & ; ;
15849: LD_ADDR_VAR 0 3
15853: PUSH
15854: LD_VAR 0 3
15858: PUSH
15859: LD_INT 100
15861: PUSH
15862: LD_VAR 0 8
15866: PLUS
15867: STR
15868: PUSH
15869: LD_STRING ;
15871: STR
15872: ST_TO_ADDR
// end ;
15873: GO 15828
15875: POP
15876: POP
// if tmp then
15877: LD_VAR 0 3
15881: IFFALSE 15893
// active := tmp ;
15883: LD_ADDR_VAR 0 7
15887: PUSH
15888: LD_VAR 0 3
15892: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
15893: LD_STRING getStreamItemsFromMission("
15895: PUSH
15896: LD_VAR 0 5
15900: STR
15901: PUSH
15902: LD_STRING ","
15904: STR
15905: PUSH
15906: LD_VAR 0 6
15910: STR
15911: PUSH
15912: LD_STRING ","
15914: STR
15915: PUSH
15916: LD_VAR 0 7
15920: STR
15921: PUSH
15922: LD_STRING ")
15924: STR
15925: PPUSH
15926: CALL_OW 559
// end else
15930: GO 15939
// ToLua ( getStreamItemsFromMission("","","") ) ;
15932: LD_STRING getStreamItemsFromMission("","","")
15934: PPUSH
15935: CALL_OW 559
// end ;
15939: LD_VAR 0 2
15943: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
15944: LD_EXP 23
15948: IFFALSE 15956
15950: PUSH
15951: LD_EXP 28
15955: AND
15956: IFFALSE 16080
15958: GO 15960
15960: DISABLE
15961: LD_INT 0
15963: PPUSH
15964: PPUSH
// begin enable ;
15965: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
15966: LD_ADDR_VAR 0 2
15970: PUSH
15971: LD_INT 22
15973: PUSH
15974: LD_OWVAR 2
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 2
15985: PUSH
15986: LD_INT 34
15988: PUSH
15989: LD_INT 7
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: LD_INT 34
15998: PUSH
15999: LD_INT 45
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 34
16008: PUSH
16009: LD_INT 28
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 34
16018: PUSH
16019: LD_INT 47
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PPUSH
16037: CALL_OW 69
16041: ST_TO_ADDR
// if not tmp then
16042: LD_VAR 0 2
16046: NOT
16047: IFFALSE 16051
// exit ;
16049: GO 16080
// for i in tmp do
16051: LD_ADDR_VAR 0 1
16055: PUSH
16056: LD_VAR 0 2
16060: PUSH
16061: FOR_IN
16062: IFFALSE 16078
// begin SetLives ( i , 0 ) ;
16064: LD_VAR 0 1
16068: PPUSH
16069: LD_INT 0
16071: PPUSH
16072: CALL_OW 234
// end ;
16076: GO 16061
16078: POP
16079: POP
// end ;
16080: PPOPN 2
16082: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16083: LD_EXP 23
16087: IFFALSE 16095
16089: PUSH
16090: LD_EXP 29
16094: AND
16095: IFFALSE 16179
16097: GO 16099
16099: DISABLE
16100: LD_INT 0
16102: PPUSH
16103: PPUSH
// begin enable ;
16104: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16105: LD_ADDR_VAR 0 2
16109: PUSH
16110: LD_INT 22
16112: PUSH
16113: LD_OWVAR 2
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 32
16124: PUSH
16125: LD_INT 3
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PPUSH
16136: CALL_OW 69
16140: ST_TO_ADDR
// if not tmp then
16141: LD_VAR 0 2
16145: NOT
16146: IFFALSE 16150
// exit ;
16148: GO 16179
// for i in tmp do
16150: LD_ADDR_VAR 0 1
16154: PUSH
16155: LD_VAR 0 2
16159: PUSH
16160: FOR_IN
16161: IFFALSE 16177
// begin SetLives ( i , 0 ) ;
16163: LD_VAR 0 1
16167: PPUSH
16168: LD_INT 0
16170: PPUSH
16171: CALL_OW 234
// end ;
16175: GO 16160
16177: POP
16178: POP
// end ;
16179: PPOPN 2
16181: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16182: LD_EXP 23
16186: IFFALSE 16194
16188: PUSH
16189: LD_EXP 26
16193: AND
16194: IFFALSE 16287
16196: GO 16198
16198: DISABLE
16199: LD_INT 0
16201: PPUSH
// begin enable ;
16202: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16203: LD_ADDR_VAR 0 1
16207: PUSH
16208: LD_INT 22
16210: PUSH
16211: LD_OWVAR 2
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 2
16222: PUSH
16223: LD_INT 25
16225: PUSH
16226: LD_INT 5
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 25
16235: PUSH
16236: LD_INT 9
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 25
16245: PUSH
16246: LD_INT 8
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PPUSH
16263: CALL_OW 69
16267: PUSH
16268: FOR_IN
16269: IFFALSE 16285
// begin SetClass ( i , 1 ) ;
16271: LD_VAR 0 1
16275: PPUSH
16276: LD_INT 1
16278: PPUSH
16279: CALL_OW 336
// end ;
16283: GO 16268
16285: POP
16286: POP
// end ;
16287: PPOPN 1
16289: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16290: LD_EXP 23
16294: IFFALSE 16302
16296: PUSH
16297: LD_EXP 27
16301: AND
16302: IFFALSE 16314
16304: PUSH
16305: LD_OWVAR 65
16309: PUSH
16310: LD_INT 7
16312: LESS
16313: AND
16314: IFFALSE 16328
16316: GO 16318
16318: DISABLE
// begin enable ;
16319: ENABLE
// game_speed := 7 ;
16320: LD_ADDR_OWVAR 65
16324: PUSH
16325: LD_INT 7
16327: ST_TO_ADDR
// end ;
16328: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16329: LD_EXP 23
16333: IFFALSE 16341
16335: PUSH
16336: LD_EXP 30
16340: AND
16341: IFFALSE 16543
16343: GO 16345
16345: DISABLE
16346: LD_INT 0
16348: PPUSH
16349: PPUSH
16350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16351: LD_ADDR_VAR 0 3
16355: PUSH
16356: LD_INT 81
16358: PUSH
16359: LD_OWVAR 2
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 21
16370: PUSH
16371: LD_INT 1
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PPUSH
16382: CALL_OW 69
16386: ST_TO_ADDR
// if not tmp then
16387: LD_VAR 0 3
16391: NOT
16392: IFFALSE 16396
// exit ;
16394: GO 16543
// if tmp > 5 then
16396: LD_VAR 0 3
16400: PUSH
16401: LD_INT 5
16403: GREATER
16404: IFFALSE 16416
// k := 5 else
16406: LD_ADDR_VAR 0 2
16410: PUSH
16411: LD_INT 5
16413: ST_TO_ADDR
16414: GO 16426
// k := tmp ;
16416: LD_ADDR_VAR 0 2
16420: PUSH
16421: LD_VAR 0 3
16425: ST_TO_ADDR
// for i := 1 to k do
16426: LD_ADDR_VAR 0 1
16430: PUSH
16431: DOUBLE
16432: LD_INT 1
16434: DEC
16435: ST_TO_ADDR
16436: LD_VAR 0 2
16440: PUSH
16441: FOR_TO
16442: IFFALSE 16541
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16444: LD_VAR 0 3
16448: PUSH
16449: LD_VAR 0 1
16453: ARRAY
16454: PPUSH
16455: LD_VAR 0 1
16459: PUSH
16460: LD_INT 4
16462: MOD
16463: PUSH
16464: LD_INT 1
16466: PLUS
16467: PPUSH
16468: CALL_OW 259
16472: PUSH
16473: LD_INT 10
16475: LESS
16476: IFFALSE 16539
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16478: LD_VAR 0 3
16482: PUSH
16483: LD_VAR 0 1
16487: ARRAY
16488: PPUSH
16489: LD_VAR 0 1
16493: PUSH
16494: LD_INT 4
16496: MOD
16497: PUSH
16498: LD_INT 1
16500: PLUS
16501: PPUSH
16502: LD_VAR 0 3
16506: PUSH
16507: LD_VAR 0 1
16511: ARRAY
16512: PPUSH
16513: LD_VAR 0 1
16517: PUSH
16518: LD_INT 4
16520: MOD
16521: PUSH
16522: LD_INT 1
16524: PLUS
16525: PPUSH
16526: CALL_OW 259
16530: PUSH
16531: LD_INT 1
16533: PLUS
16534: PPUSH
16535: CALL_OW 237
16539: GO 16441
16541: POP
16542: POP
// end ;
16543: PPOPN 3
16545: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16546: LD_EXP 23
16550: IFFALSE 16558
16552: PUSH
16553: LD_EXP 31
16557: AND
16558: IFFALSE 16578
16560: GO 16562
16562: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
16563: LD_INT 4
16565: PPUSH
16566: LD_OWVAR 2
16570: PPUSH
16571: LD_INT 0
16573: PPUSH
16574: CALL_OW 324
16578: END
// every 0 0$1 trigger StreamModeActive and sShovel do
16579: LD_EXP 23
16583: IFFALSE 16591
16585: PUSH
16586: LD_EXP 60
16590: AND
16591: IFFALSE 16611
16593: GO 16595
16595: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
16596: LD_INT 19
16598: PPUSH
16599: LD_OWVAR 2
16603: PPUSH
16604: LD_INT 0
16606: PPUSH
16607: CALL_OW 324
16611: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
16612: LD_EXP 23
16616: IFFALSE 16624
16618: PUSH
16619: LD_EXP 32
16623: AND
16624: IFFALSE 16726
16626: GO 16628
16628: DISABLE
16629: LD_INT 0
16631: PPUSH
16632: PPUSH
// begin enable ;
16633: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
16634: LD_ADDR_VAR 0 2
16638: PUSH
16639: LD_INT 22
16641: PUSH
16642: LD_OWVAR 2
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 2
16653: PUSH
16654: LD_INT 34
16656: PUSH
16657: LD_INT 11
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 34
16666: PUSH
16667: LD_INT 30
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: LIST
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PPUSH
16683: CALL_OW 69
16687: ST_TO_ADDR
// if not tmp then
16688: LD_VAR 0 2
16692: NOT
16693: IFFALSE 16697
// exit ;
16695: GO 16726
// for i in tmp do
16697: LD_ADDR_VAR 0 1
16701: PUSH
16702: LD_VAR 0 2
16706: PUSH
16707: FOR_IN
16708: IFFALSE 16724
// begin SetLives ( i , 0 ) ;
16710: LD_VAR 0 1
16714: PPUSH
16715: LD_INT 0
16717: PPUSH
16718: CALL_OW 234
// end ;
16722: GO 16707
16724: POP
16725: POP
// end ;
16726: PPOPN 2
16728: END
// every 0 0$1 trigger StreamModeActive and sBunker do
16729: LD_EXP 23
16733: IFFALSE 16741
16735: PUSH
16736: LD_EXP 33
16740: AND
16741: IFFALSE 16761
16743: GO 16745
16745: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
16746: LD_INT 32
16748: PPUSH
16749: LD_OWVAR 2
16753: PPUSH
16754: LD_INT 0
16756: PPUSH
16757: CALL_OW 324
16761: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
16762: LD_EXP 23
16766: IFFALSE 16774
16768: PUSH
16769: LD_EXP 34
16773: AND
16774: IFFALSE 16957
16776: GO 16778
16778: DISABLE
16779: LD_INT 0
16781: PPUSH
16782: PPUSH
16783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
16784: LD_ADDR_VAR 0 2
16788: PUSH
16789: LD_INT 22
16791: PUSH
16792: LD_OWVAR 2
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 33
16803: PUSH
16804: LD_INT 3
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PPUSH
16815: CALL_OW 69
16819: ST_TO_ADDR
// if not tmp then
16820: LD_VAR 0 2
16824: NOT
16825: IFFALSE 16829
// exit ;
16827: GO 16957
// side := 0 ;
16829: LD_ADDR_VAR 0 3
16833: PUSH
16834: LD_INT 0
16836: ST_TO_ADDR
// for i := 1 to 8 do
16837: LD_ADDR_VAR 0 1
16841: PUSH
16842: DOUBLE
16843: LD_INT 1
16845: DEC
16846: ST_TO_ADDR
16847: LD_INT 8
16849: PUSH
16850: FOR_TO
16851: IFFALSE 16901
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
16853: LD_OWVAR 2
16857: PUSH
16858: LD_VAR 0 1
16862: NONEQUAL
16863: IFFALSE 16885
16865: PUSH
16866: LD_OWVAR 2
16870: PPUSH
16871: LD_VAR 0 1
16875: PPUSH
16876: CALL_OW 81
16880: PUSH
16881: LD_INT 2
16883: EQUAL
16884: AND
16885: IFFALSE 16899
// begin side := i ;
16887: LD_ADDR_VAR 0 3
16891: PUSH
16892: LD_VAR 0 1
16896: ST_TO_ADDR
// break ;
16897: GO 16901
// end ;
16899: GO 16850
16901: POP
16902: POP
// if not side then
16903: LD_VAR 0 3
16907: NOT
16908: IFFALSE 16912
// exit ;
16910: GO 16957
// for i := 1 to tmp do
16912: LD_ADDR_VAR 0 1
16916: PUSH
16917: DOUBLE
16918: LD_INT 1
16920: DEC
16921: ST_TO_ADDR
16922: LD_VAR 0 2
16926: PUSH
16927: FOR_TO
16928: IFFALSE 16955
// if Prob ( 60 ) then
16930: LD_INT 60
16932: PPUSH
16933: CALL_OW 13
16937: IFFALSE 16953
// SetSide ( i , side ) ;
16939: LD_VAR 0 1
16943: PPUSH
16944: LD_VAR 0 3
16948: PPUSH
16949: CALL_OW 235
16953: GO 16927
16955: POP
16956: POP
// end ;
16957: PPOPN 3
16959: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
16960: LD_EXP 23
16964: IFFALSE 16972
16966: PUSH
16967: LD_EXP 36
16971: AND
16972: IFFALSE 17091
16974: GO 16976
16976: DISABLE
16977: LD_INT 0
16979: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
16980: LD_ADDR_VAR 0 1
16984: PUSH
16985: LD_INT 22
16987: PUSH
16988: LD_OWVAR 2
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 21
16999: PUSH
17000: LD_INT 1
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 3
17009: PUSH
17010: LD_INT 23
17012: PUSH
17013: LD_INT 0
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: PPUSH
17029: CALL_OW 69
17033: PUSH
17034: FOR_IN
17035: IFFALSE 17089
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17037: LD_VAR 0 1
17041: PPUSH
17042: CALL_OW 257
17046: PUSH
17047: LD_INT 1
17049: PUSH
17050: LD_INT 2
17052: PUSH
17053: LD_INT 3
17055: PUSH
17056: LD_INT 4
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: IN
17065: IFFALSE 17087
// SetClass ( un , rand ( 1 , 4 ) ) ;
17067: LD_VAR 0 1
17071: PPUSH
17072: LD_INT 1
17074: PPUSH
17075: LD_INT 4
17077: PPUSH
17078: CALL_OW 12
17082: PPUSH
17083: CALL_OW 336
17087: GO 17034
17089: POP
17090: POP
// end ;
17091: PPOPN 1
17093: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17094: LD_EXP 23
17098: IFFALSE 17106
17100: PUSH
17101: LD_EXP 35
17105: AND
17106: IFFALSE 17185
17108: GO 17110
17110: DISABLE
17111: LD_INT 0
17113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17114: LD_ADDR_VAR 0 1
17118: PUSH
17119: LD_INT 22
17121: PUSH
17122: LD_OWVAR 2
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 21
17133: PUSH
17134: LD_INT 3
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PPUSH
17145: CALL_OW 69
17149: ST_TO_ADDR
// if not tmp then
17150: LD_VAR 0 1
17154: NOT
17155: IFFALSE 17159
// exit ;
17157: GO 17185
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17159: LD_VAR 0 1
17163: PUSH
17164: LD_INT 1
17166: PPUSH
17167: LD_VAR 0 1
17171: PPUSH
17172: CALL_OW 12
17176: ARRAY
17177: PPUSH
17178: LD_INT 100
17180: PPUSH
17181: CALL_OW 234
// end ;
17185: PPOPN 1
17187: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17188: LD_EXP 23
17192: IFFALSE 17200
17194: PUSH
17195: LD_EXP 37
17199: AND
17200: IFFALSE 17298
17202: GO 17204
17204: DISABLE
17205: LD_INT 0
17207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17208: LD_ADDR_VAR 0 1
17212: PUSH
17213: LD_INT 22
17215: PUSH
17216: LD_OWVAR 2
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 21
17227: PUSH
17228: LD_INT 1
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PPUSH
17239: CALL_OW 69
17243: ST_TO_ADDR
// if not tmp then
17244: LD_VAR 0 1
17248: NOT
17249: IFFALSE 17253
// exit ;
17251: GO 17298
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17253: LD_VAR 0 1
17257: PUSH
17258: LD_INT 1
17260: PPUSH
17261: LD_VAR 0 1
17265: PPUSH
17266: CALL_OW 12
17270: ARRAY
17271: PPUSH
17272: LD_INT 1
17274: PPUSH
17275: LD_INT 4
17277: PPUSH
17278: CALL_OW 12
17282: PPUSH
17283: LD_INT 3000
17285: PPUSH
17286: LD_INT 9000
17288: PPUSH
17289: CALL_OW 12
17293: PPUSH
17294: CALL_OW 492
// end ;
17298: PPOPN 1
17300: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17301: LD_EXP 23
17305: IFFALSE 17313
17307: PUSH
17308: LD_EXP 38
17312: AND
17313: IFFALSE 17333
17315: GO 17317
17317: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17318: LD_INT 1
17320: PPUSH
17321: LD_OWVAR 2
17325: PPUSH
17326: LD_INT 0
17328: PPUSH
17329: CALL_OW 324
17333: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17334: LD_EXP 23
17338: IFFALSE 17346
17340: PUSH
17341: LD_EXP 39
17345: AND
17346: IFFALSE 17429
17348: GO 17350
17350: DISABLE
17351: LD_INT 0
17353: PPUSH
17354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17355: LD_ADDR_VAR 0 2
17359: PUSH
17360: LD_INT 22
17362: PUSH
17363: LD_OWVAR 2
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: LD_INT 21
17374: PUSH
17375: LD_INT 3
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PPUSH
17386: CALL_OW 69
17390: ST_TO_ADDR
// if not tmp then
17391: LD_VAR 0 2
17395: NOT
17396: IFFALSE 17400
// exit ;
17398: GO 17429
// for i in tmp do
17400: LD_ADDR_VAR 0 1
17404: PUSH
17405: LD_VAR 0 2
17409: PUSH
17410: FOR_IN
17411: IFFALSE 17427
// SetBLevel ( i , 10 ) ;
17413: LD_VAR 0 1
17417: PPUSH
17418: LD_INT 10
17420: PPUSH
17421: CALL_OW 241
17425: GO 17410
17427: POP
17428: POP
// end ;
17429: PPOPN 2
17431: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17432: LD_EXP 23
17436: IFFALSE 17444
17438: PUSH
17439: LD_EXP 40
17443: AND
17444: IFFALSE 17555
17446: GO 17448
17448: DISABLE
17449: LD_INT 0
17451: PPUSH
17452: PPUSH
17453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17454: LD_ADDR_VAR 0 3
17458: PUSH
17459: LD_INT 22
17461: PUSH
17462: LD_OWVAR 2
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 25
17473: PUSH
17474: LD_INT 1
17476: PUSH
17477: EMPTY
17478: LIST
17479: LIST
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PPUSH
17485: CALL_OW 69
17489: ST_TO_ADDR
// if not tmp then
17490: LD_VAR 0 3
17494: NOT
17495: IFFALSE 17499
// exit ;
17497: GO 17555
// un := tmp [ rand ( 1 , tmp ) ] ;
17499: LD_ADDR_VAR 0 2
17503: PUSH
17504: LD_VAR 0 3
17508: PUSH
17509: LD_INT 1
17511: PPUSH
17512: LD_VAR 0 3
17516: PPUSH
17517: CALL_OW 12
17521: ARRAY
17522: ST_TO_ADDR
// if Crawls ( un ) then
17523: LD_VAR 0 2
17527: PPUSH
17528: CALL_OW 318
17532: IFFALSE 17543
// ComWalk ( un ) ;
17534: LD_VAR 0 2
17538: PPUSH
17539: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17543: LD_VAR 0 2
17547: PPUSH
17548: LD_INT 5
17550: PPUSH
17551: CALL_OW 336
// end ;
17555: PPOPN 3
17557: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
17558: LD_EXP 23
17562: IFFALSE 17570
17564: PUSH
17565: LD_EXP 41
17569: AND
17570: IFFALSE 17582
17572: PUSH
17573: LD_OWVAR 67
17577: PUSH
17578: LD_INT 4
17580: LESS
17581: AND
17582: IFFALSE 17601
17584: GO 17586
17586: DISABLE
// begin Difficulty := Difficulty + 1 ;
17587: LD_ADDR_OWVAR 67
17591: PUSH
17592: LD_OWVAR 67
17596: PUSH
17597: LD_INT 1
17599: PLUS
17600: ST_TO_ADDR
// end ;
17601: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
17602: LD_EXP 23
17606: IFFALSE 17614
17608: PUSH
17609: LD_EXP 42
17613: AND
17614: IFFALSE 17717
17616: GO 17618
17618: DISABLE
17619: LD_INT 0
17621: PPUSH
// begin for i := 1 to 5 do
17622: LD_ADDR_VAR 0 1
17626: PUSH
17627: DOUBLE
17628: LD_INT 1
17630: DEC
17631: ST_TO_ADDR
17632: LD_INT 5
17634: PUSH
17635: FOR_TO
17636: IFFALSE 17715
// begin uc_nation := nation_nature ;
17638: LD_ADDR_OWVAR 21
17642: PUSH
17643: LD_INT 0
17645: ST_TO_ADDR
// uc_side := 0 ;
17646: LD_ADDR_OWVAR 20
17650: PUSH
17651: LD_INT 0
17653: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17654: LD_ADDR_OWVAR 29
17658: PUSH
17659: LD_INT 12
17661: PUSH
17662: LD_INT 12
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: ST_TO_ADDR
// hc_agressivity := 20 ;
17669: LD_ADDR_OWVAR 35
17673: PUSH
17674: LD_INT 20
17676: ST_TO_ADDR
// hc_class := class_tiger ;
17677: LD_ADDR_OWVAR 28
17681: PUSH
17682: LD_INT 14
17684: ST_TO_ADDR
// hc_gallery :=  ;
17685: LD_ADDR_OWVAR 33
17689: PUSH
17690: LD_STRING 
17692: ST_TO_ADDR
// hc_name :=  ;
17693: LD_ADDR_OWVAR 26
17697: PUSH
17698: LD_STRING 
17700: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
17701: CALL_OW 44
17705: PPUSH
17706: LD_INT 0
17708: PPUSH
17709: CALL_OW 51
// end ;
17713: GO 17635
17715: POP
17716: POP
// end ;
17717: PPOPN 1
17719: END
// every 0 0$1 trigger StreamModeActive and sBomb do
17720: LD_EXP 23
17724: IFFALSE 17732
17726: PUSH
17727: LD_EXP 43
17731: AND
17732: IFFALSE 17741
17734: GO 17736
17736: DISABLE
// StreamSibBomb ;
17737: CALL 17742 0 0
17741: END
// export function StreamSibBomb ; var i , x , y ; begin
17742: LD_INT 0
17744: PPUSH
17745: PPUSH
17746: PPUSH
17747: PPUSH
// result := false ;
17748: LD_ADDR_VAR 0 1
17752: PUSH
17753: LD_INT 0
17755: ST_TO_ADDR
// for i := 1 to 16 do
17756: LD_ADDR_VAR 0 2
17760: PUSH
17761: DOUBLE
17762: LD_INT 1
17764: DEC
17765: ST_TO_ADDR
17766: LD_INT 16
17768: PUSH
17769: FOR_TO
17770: IFFALSE 17969
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17772: LD_ADDR_VAR 0 3
17776: PUSH
17777: LD_INT 10
17779: PUSH
17780: LD_INT 20
17782: PUSH
17783: LD_INT 30
17785: PUSH
17786: LD_INT 40
17788: PUSH
17789: LD_INT 50
17791: PUSH
17792: LD_INT 60
17794: PUSH
17795: LD_INT 70
17797: PUSH
17798: LD_INT 80
17800: PUSH
17801: LD_INT 90
17803: PUSH
17804: LD_INT 100
17806: PUSH
17807: LD_INT 110
17809: PUSH
17810: LD_INT 120
17812: PUSH
17813: LD_INT 130
17815: PUSH
17816: LD_INT 140
17818: PUSH
17819: LD_INT 150
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: PUSH
17839: LD_INT 1
17841: PPUSH
17842: LD_INT 15
17844: PPUSH
17845: CALL_OW 12
17849: ARRAY
17850: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
17851: LD_ADDR_VAR 0 4
17855: PUSH
17856: LD_INT 10
17858: PUSH
17859: LD_INT 20
17861: PUSH
17862: LD_INT 30
17864: PUSH
17865: LD_INT 40
17867: PUSH
17868: LD_INT 50
17870: PUSH
17871: LD_INT 60
17873: PUSH
17874: LD_INT 70
17876: PUSH
17877: LD_INT 80
17879: PUSH
17880: LD_INT 90
17882: PUSH
17883: LD_INT 100
17885: PUSH
17886: LD_INT 110
17888: PUSH
17889: LD_INT 120
17891: PUSH
17892: LD_INT 130
17894: PUSH
17895: LD_INT 140
17897: PUSH
17898: LD_INT 150
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 1
17920: PPUSH
17921: LD_INT 15
17923: PPUSH
17924: CALL_OW 12
17928: ARRAY
17929: ST_TO_ADDR
// if ValidHex ( x , y ) then
17930: LD_VAR 0 3
17934: PPUSH
17935: LD_VAR 0 4
17939: PPUSH
17940: CALL_OW 488
17944: IFFALSE 17967
// begin result := [ x , y ] ;
17946: LD_ADDR_VAR 0 1
17950: PUSH
17951: LD_VAR 0 3
17955: PUSH
17956: LD_VAR 0 4
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: ST_TO_ADDR
// break ;
17965: GO 17969
// end ; end ;
17967: GO 17769
17969: POP
17970: POP
// if result then
17971: LD_VAR 0 1
17975: IFFALSE 18035
// begin ToLua ( playSibBomb() ) ;
17977: LD_STRING playSibBomb()
17979: PPUSH
17980: CALL_OW 559
// wait ( 0 0$14 ) ;
17984: LD_INT 490
17986: PPUSH
17987: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
17991: LD_VAR 0 1
17995: PUSH
17996: LD_INT 1
17998: ARRAY
17999: PPUSH
18000: LD_VAR 0 1
18004: PUSH
18005: LD_INT 2
18007: ARRAY
18008: PPUSH
18009: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18013: LD_VAR 0 1
18017: PUSH
18018: LD_INT 1
18020: ARRAY
18021: PPUSH
18022: LD_VAR 0 1
18026: PUSH
18027: LD_INT 2
18029: ARRAY
18030: PPUSH
18031: CALL_OW 429
// end ; end ;
18035: LD_VAR 0 1
18039: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18040: LD_EXP 23
18044: IFFALSE 18052
18046: PUSH
18047: LD_EXP 45
18051: AND
18052: IFFALSE 18064
18054: GO 18056
18056: DISABLE
// YouLost (  ) ;
18057: LD_STRING 
18059: PPUSH
18060: CALL_OW 104
18064: END
// every 0 0$1 trigger StreamModeActive and sFog do
18065: LD_EXP 23
18069: IFFALSE 18077
18071: PUSH
18072: LD_EXP 44
18076: AND
18077: IFFALSE 18091
18079: GO 18081
18081: DISABLE
// FogOff ( your_side ) ;
18082: LD_OWVAR 2
18086: PPUSH
18087: CALL_OW 344
18091: END
// every 0 0$1 trigger StreamModeActive and sSun do
18092: LD_EXP 23
18096: IFFALSE 18104
18098: PUSH
18099: LD_EXP 46
18103: AND
18104: IFFALSE 18132
18106: GO 18108
18108: DISABLE
// begin solar_recharge_percent := 0 ;
18109: LD_ADDR_OWVAR 79
18113: PUSH
18114: LD_INT 0
18116: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18117: LD_INT 10500
18119: PPUSH
18120: CALL_OW 67
// solar_recharge_percent := 100 ;
18124: LD_ADDR_OWVAR 79
18128: PUSH
18129: LD_INT 100
18131: ST_TO_ADDR
// end ;
18132: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18133: LD_EXP 23
18137: IFFALSE 18145
18139: PUSH
18140: LD_EXP 47
18144: AND
18145: IFFALSE 18384
18147: GO 18149
18149: DISABLE
18150: LD_INT 0
18152: PPUSH
18153: PPUSH
18154: PPUSH
// begin tmp := [ ] ;
18155: LD_ADDR_VAR 0 3
18159: PUSH
18160: EMPTY
18161: ST_TO_ADDR
// for i := 1 to 6 do
18162: LD_ADDR_VAR 0 1
18166: PUSH
18167: DOUBLE
18168: LD_INT 1
18170: DEC
18171: ST_TO_ADDR
18172: LD_INT 6
18174: PUSH
18175: FOR_TO
18176: IFFALSE 18281
// begin uc_nation := nation_nature ;
18178: LD_ADDR_OWVAR 21
18182: PUSH
18183: LD_INT 0
18185: ST_TO_ADDR
// uc_side := 0 ;
18186: LD_ADDR_OWVAR 20
18190: PUSH
18191: LD_INT 0
18193: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18194: LD_ADDR_OWVAR 29
18198: PUSH
18199: LD_INT 12
18201: PUSH
18202: LD_INT 12
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: ST_TO_ADDR
// hc_agressivity := 20 ;
18209: LD_ADDR_OWVAR 35
18213: PUSH
18214: LD_INT 20
18216: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18217: LD_ADDR_OWVAR 28
18221: PUSH
18222: LD_INT 17
18224: ST_TO_ADDR
// hc_gallery :=  ;
18225: LD_ADDR_OWVAR 33
18229: PUSH
18230: LD_STRING 
18232: ST_TO_ADDR
// hc_name :=  ;
18233: LD_ADDR_OWVAR 26
18237: PUSH
18238: LD_STRING 
18240: ST_TO_ADDR
// un := CreateHuman ;
18241: LD_ADDR_VAR 0 2
18245: PUSH
18246: CALL_OW 44
18250: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18251: LD_VAR 0 2
18255: PPUSH
18256: LD_INT 1
18258: PPUSH
18259: CALL_OW 51
// tmp := tmp ^ un ;
18263: LD_ADDR_VAR 0 3
18267: PUSH
18268: LD_VAR 0 3
18272: PUSH
18273: LD_VAR 0 2
18277: ADD
18278: ST_TO_ADDR
// end ;
18279: GO 18175
18281: POP
18282: POP
// repeat wait ( 0 0$1 ) ;
18283: LD_INT 35
18285: PPUSH
18286: CALL_OW 67
// for un in tmp do
18290: LD_ADDR_VAR 0 2
18294: PUSH
18295: LD_VAR 0 3
18299: PUSH
18300: FOR_IN
18301: IFFALSE 18375
// begin if IsDead ( un ) then
18303: LD_VAR 0 2
18307: PPUSH
18308: CALL_OW 301
18312: IFFALSE 18332
// begin tmp := tmp diff un ;
18314: LD_ADDR_VAR 0 3
18318: PUSH
18319: LD_VAR 0 3
18323: PUSH
18324: LD_VAR 0 2
18328: DIFF
18329: ST_TO_ADDR
// continue ;
18330: GO 18300
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18332: LD_VAR 0 2
18336: PPUSH
18337: LD_INT 3
18339: PUSH
18340: LD_INT 22
18342: PUSH
18343: LD_INT 0
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PPUSH
18354: CALL_OW 69
18358: PPUSH
18359: LD_VAR 0 2
18363: PPUSH
18364: CALL_OW 74
18368: PPUSH
18369: CALL_OW 115
// end ;
18373: GO 18300
18375: POP
18376: POP
// until not tmp ;
18377: LD_VAR 0 3
18381: NOT
18382: IFFALSE 18283
// end ;
18384: PPOPN 3
18386: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18387: LD_EXP 23
18391: IFFALSE 18399
18393: PUSH
18394: LD_EXP 48
18398: AND
18399: IFFALSE 18453
18401: GO 18403
18403: DISABLE
// begin ToLua ( displayTroll(); ) ;
18404: LD_STRING displayTroll();
18406: PPUSH
18407: CALL_OW 559
// wait ( 3 3$00 ) ;
18411: LD_INT 6300
18413: PPUSH
18414: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18418: LD_STRING hideTroll();
18420: PPUSH
18421: CALL_OW 559
// wait ( 1 1$00 ) ;
18425: LD_INT 2100
18427: PPUSH
18428: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18432: LD_STRING displayTroll();
18434: PPUSH
18435: CALL_OW 559
// wait ( 1 1$00 ) ;
18439: LD_INT 2100
18441: PPUSH
18442: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18446: LD_STRING hideTroll();
18448: PPUSH
18449: CALL_OW 559
// end ;
18453: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18454: LD_EXP 23
18458: IFFALSE 18466
18460: PUSH
18461: LD_EXP 49
18465: AND
18466: IFFALSE 18529
18468: GO 18470
18470: DISABLE
18471: LD_INT 0
18473: PPUSH
// begin p := 0 ;
18474: LD_ADDR_VAR 0 1
18478: PUSH
18479: LD_INT 0
18481: ST_TO_ADDR
// repeat game_speed := 1 ;
18482: LD_ADDR_OWVAR 65
18486: PUSH
18487: LD_INT 1
18489: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18490: LD_INT 35
18492: PPUSH
18493: CALL_OW 67
// p := p + 1 ;
18497: LD_ADDR_VAR 0 1
18501: PUSH
18502: LD_VAR 0 1
18506: PUSH
18507: LD_INT 1
18509: PLUS
18510: ST_TO_ADDR
// until p >= 60 ;
18511: LD_VAR 0 1
18515: PUSH
18516: LD_INT 60
18518: GREATEREQUAL
18519: IFFALSE 18482
// game_speed := 4 ;
18521: LD_ADDR_OWVAR 65
18525: PUSH
18526: LD_INT 4
18528: ST_TO_ADDR
// end ;
18529: PPOPN 1
18531: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18532: LD_EXP 23
18536: IFFALSE 18544
18538: PUSH
18539: LD_EXP 50
18543: AND
18544: IFFALSE 18690
18546: GO 18548
18548: DISABLE
18549: LD_INT 0
18551: PPUSH
18552: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18553: LD_ADDR_VAR 0 1
18557: PUSH
18558: LD_INT 22
18560: PUSH
18561: LD_OWVAR 2
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: LD_INT 30
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 30
18585: PUSH
18586: LD_INT 1
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: LIST
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PPUSH
18602: CALL_OW 69
18606: ST_TO_ADDR
// if not depot then
18607: LD_VAR 0 1
18611: NOT
18612: IFFALSE 18616
// exit ;
18614: GO 18690
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18616: LD_ADDR_VAR 0 2
18620: PUSH
18621: LD_VAR 0 1
18625: PUSH
18626: LD_INT 1
18628: PPUSH
18629: LD_VAR 0 1
18633: PPUSH
18634: CALL_OW 12
18638: ARRAY
18639: PPUSH
18640: CALL_OW 274
18644: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18645: LD_VAR 0 2
18649: PPUSH
18650: LD_INT 1
18652: PPUSH
18653: LD_INT 0
18655: PPUSH
18656: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18660: LD_VAR 0 2
18664: PPUSH
18665: LD_INT 2
18667: PPUSH
18668: LD_INT 0
18670: PPUSH
18671: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18675: LD_VAR 0 2
18679: PPUSH
18680: LD_INT 3
18682: PPUSH
18683: LD_INT 0
18685: PPUSH
18686: CALL_OW 277
// end ;
18690: PPOPN 2
18692: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18693: LD_EXP 23
18697: IFFALSE 18705
18699: PUSH
18700: LD_EXP 51
18704: AND
18705: IFFALSE 18802
18707: GO 18709
18709: DISABLE
18710: LD_INT 0
18712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18713: LD_ADDR_VAR 0 1
18717: PUSH
18718: LD_INT 22
18720: PUSH
18721: LD_OWVAR 2
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: LD_INT 21
18732: PUSH
18733: LD_INT 1
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 3
18742: PUSH
18743: LD_INT 23
18745: PUSH
18746: LD_INT 0
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: LIST
18761: PPUSH
18762: CALL_OW 69
18766: ST_TO_ADDR
// if not tmp then
18767: LD_VAR 0 1
18771: NOT
18772: IFFALSE 18776
// exit ;
18774: GO 18802
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
18776: LD_VAR 0 1
18780: PUSH
18781: LD_INT 1
18783: PPUSH
18784: LD_VAR 0 1
18788: PPUSH
18789: CALL_OW 12
18793: ARRAY
18794: PPUSH
18795: LD_INT 200
18797: PPUSH
18798: CALL_OW 234
// end ;
18802: PPOPN 1
18804: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
18805: LD_EXP 23
18809: IFFALSE 18817
18811: PUSH
18812: LD_EXP 52
18816: AND
18817: IFFALSE 18896
18819: GO 18821
18821: DISABLE
18822: LD_INT 0
18824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
18825: LD_ADDR_VAR 0 1
18829: PUSH
18830: LD_INT 22
18832: PUSH
18833: LD_OWVAR 2
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 21
18844: PUSH
18845: LD_INT 2
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PPUSH
18856: CALL_OW 69
18860: ST_TO_ADDR
// if not tmp then
18861: LD_VAR 0 1
18865: NOT
18866: IFFALSE 18870
// exit ;
18868: GO 18896
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
18870: LD_VAR 0 1
18874: PUSH
18875: LD_INT 1
18877: PPUSH
18878: LD_VAR 0 1
18882: PPUSH
18883: CALL_OW 12
18887: ARRAY
18888: PPUSH
18889: LD_INT 60
18891: PPUSH
18892: CALL_OW 234
// end ;
18896: PPOPN 1
18898: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
18899: LD_EXP 23
18903: IFFALSE 18911
18905: PUSH
18906: LD_EXP 53
18910: AND
18911: IFFALSE 19010
18913: GO 18915
18915: DISABLE
18916: LD_INT 0
18918: PPUSH
18919: PPUSH
// begin enable ;
18920: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
18921: LD_ADDR_VAR 0 1
18925: PUSH
18926: LD_INT 22
18928: PUSH
18929: LD_OWVAR 2
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 61
18940: PUSH
18941: EMPTY
18942: LIST
18943: PUSH
18944: LD_INT 33
18946: PUSH
18947: LD_INT 2
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: LIST
18958: PPUSH
18959: CALL_OW 69
18963: ST_TO_ADDR
// if not tmp then
18964: LD_VAR 0 1
18968: NOT
18969: IFFALSE 18973
// exit ;
18971: GO 19010
// for i in tmp do
18973: LD_ADDR_VAR 0 2
18977: PUSH
18978: LD_VAR 0 1
18982: PUSH
18983: FOR_IN
18984: IFFALSE 19008
// if IsControledBy ( i ) then
18986: LD_VAR 0 2
18990: PPUSH
18991: CALL_OW 312
18995: IFFALSE 19006
// ComUnlink ( i ) ;
18997: LD_VAR 0 2
19001: PPUSH
19002: CALL_OW 136
19006: GO 18983
19008: POP
19009: POP
// end ;
19010: PPOPN 2
19012: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19013: LD_EXP 23
19017: IFFALSE 19025
19019: PUSH
19020: LD_EXP 54
19024: AND
19025: IFFALSE 19165
19027: GO 19029
19029: DISABLE
19030: LD_INT 0
19032: PPUSH
19033: PPUSH
// begin ToLua ( displayPowell(); ) ;
19034: LD_STRING displayPowell();
19036: PPUSH
19037: CALL_OW 559
// uc_side := 0 ;
19041: LD_ADDR_OWVAR 20
19045: PUSH
19046: LD_INT 0
19048: ST_TO_ADDR
// uc_nation := 2 ;
19049: LD_ADDR_OWVAR 21
19053: PUSH
19054: LD_INT 2
19056: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19057: LD_ADDR_OWVAR 37
19061: PUSH
19062: LD_INT 14
19064: ST_TO_ADDR
// vc_engine := engine_siberite ;
19065: LD_ADDR_OWVAR 39
19069: PUSH
19070: LD_INT 3
19072: ST_TO_ADDR
// vc_control := control_apeman ;
19073: LD_ADDR_OWVAR 38
19077: PUSH
19078: LD_INT 5
19080: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19081: LD_ADDR_OWVAR 40
19085: PUSH
19086: LD_INT 29
19088: ST_TO_ADDR
// un := CreateVehicle ;
19089: LD_ADDR_VAR 0 2
19093: PUSH
19094: CALL_OW 45
19098: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19099: LD_VAR 0 2
19103: PPUSH
19104: LD_INT 1
19106: PPUSH
19107: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19111: LD_INT 35
19113: PPUSH
19114: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19118: LD_VAR 0 2
19122: PPUSH
19123: LD_INT 22
19125: PUSH
19126: LD_OWVAR 2
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PPUSH
19135: CALL_OW 69
19139: PPUSH
19140: LD_VAR 0 2
19144: PPUSH
19145: CALL_OW 74
19149: PPUSH
19150: CALL_OW 115
// until IsDead ( un ) ;
19154: LD_VAR 0 2
19158: PPUSH
19159: CALL_OW 301
19163: IFFALSE 19111
// end ;
19165: PPOPN 2
19167: END
// every 0 0$1 trigger StreamModeActive and sStu do
19168: LD_EXP 23
19172: IFFALSE 19180
19174: PUSH
19175: LD_EXP 62
19179: AND
19180: IFFALSE 19196
19182: GO 19184
19184: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19185: LD_STRING displayStucuk();
19187: PPUSH
19188: CALL_OW 559
// ResetFog ;
19192: CALL_OW 335
// end ;
19196: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19197: LD_EXP 23
19201: IFFALSE 19209
19203: PUSH
19204: LD_EXP 55
19208: AND
19209: IFFALSE 19350
19211: GO 19213
19213: DISABLE
19214: LD_INT 0
19216: PPUSH
19217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19218: LD_ADDR_VAR 0 2
19222: PUSH
19223: LD_INT 22
19225: PUSH
19226: LD_OWVAR 2
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 21
19237: PUSH
19238: LD_INT 1
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PPUSH
19249: CALL_OW 69
19253: ST_TO_ADDR
// if not tmp then
19254: LD_VAR 0 2
19258: NOT
19259: IFFALSE 19263
// exit ;
19261: GO 19350
// un := tmp [ rand ( 1 , tmp ) ] ;
19263: LD_ADDR_VAR 0 1
19267: PUSH
19268: LD_VAR 0 2
19272: PUSH
19273: LD_INT 1
19275: PPUSH
19276: LD_VAR 0 2
19280: PPUSH
19281: CALL_OW 12
19285: ARRAY
19286: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19287: LD_VAR 0 1
19291: PPUSH
19292: LD_INT 0
19294: PPUSH
19295: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19299: LD_VAR 0 1
19303: PPUSH
19304: LD_OWVAR 3
19308: PUSH
19309: LD_VAR 0 1
19313: DIFF
19314: PPUSH
19315: LD_VAR 0 1
19319: PPUSH
19320: CALL_OW 74
19324: PPUSH
19325: CALL_OW 115
// wait ( 0 0$20 ) ;
19329: LD_INT 700
19331: PPUSH
19332: CALL_OW 67
// SetSide ( un , your_side ) ;
19336: LD_VAR 0 1
19340: PPUSH
19341: LD_OWVAR 2
19345: PPUSH
19346: CALL_OW 235
// end ;
19350: PPOPN 2
19352: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19353: LD_EXP 23
19357: IFFALSE 19365
19359: PUSH
19360: LD_EXP 56
19364: AND
19365: IFFALSE 19471
19367: GO 19369
19369: DISABLE
19370: LD_INT 0
19372: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19373: LD_ADDR_VAR 0 1
19377: PUSH
19378: LD_INT 22
19380: PUSH
19381: LD_OWVAR 2
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 2
19392: PUSH
19393: LD_INT 30
19395: PUSH
19396: LD_INT 0
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 30
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PPUSH
19422: CALL_OW 69
19426: ST_TO_ADDR
// if not depot then
19427: LD_VAR 0 1
19431: NOT
19432: IFFALSE 19436
// exit ;
19434: GO 19471
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19436: LD_VAR 0 1
19440: PUSH
19441: LD_INT 1
19443: ARRAY
19444: PPUSH
19445: CALL_OW 250
19449: PPUSH
19450: LD_VAR 0 1
19454: PUSH
19455: LD_INT 1
19457: ARRAY
19458: PPUSH
19459: CALL_OW 251
19463: PPUSH
19464: LD_INT 70
19466: PPUSH
19467: CALL_OW 495
// end ;
19471: PPOPN 1
19473: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19474: LD_EXP 23
19478: IFFALSE 19486
19480: PUSH
19481: LD_EXP 57
19485: AND
19486: IFFALSE 19697
19488: GO 19490
19490: DISABLE
19491: LD_INT 0
19493: PPUSH
19494: PPUSH
19495: PPUSH
19496: PPUSH
19497: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19498: LD_ADDR_VAR 0 5
19502: PUSH
19503: LD_INT 22
19505: PUSH
19506: LD_OWVAR 2
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 21
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PPUSH
19529: CALL_OW 69
19533: ST_TO_ADDR
// if not tmp then
19534: LD_VAR 0 5
19538: NOT
19539: IFFALSE 19543
// exit ;
19541: GO 19697
// for i in tmp do
19543: LD_ADDR_VAR 0 1
19547: PUSH
19548: LD_VAR 0 5
19552: PUSH
19553: FOR_IN
19554: IFFALSE 19695
// begin d := rand ( 0 , 5 ) ;
19556: LD_ADDR_VAR 0 4
19560: PUSH
19561: LD_INT 0
19563: PPUSH
19564: LD_INT 5
19566: PPUSH
19567: CALL_OW 12
19571: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19572: LD_ADDR_VAR 0 2
19576: PUSH
19577: LD_VAR 0 1
19581: PPUSH
19582: CALL_OW 250
19586: PPUSH
19587: LD_VAR 0 4
19591: PPUSH
19592: LD_INT 3
19594: PPUSH
19595: LD_INT 12
19597: PPUSH
19598: CALL_OW 12
19602: PPUSH
19603: CALL_OW 272
19607: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19608: LD_ADDR_VAR 0 3
19612: PUSH
19613: LD_VAR 0 1
19617: PPUSH
19618: CALL_OW 251
19622: PPUSH
19623: LD_VAR 0 4
19627: PPUSH
19628: LD_INT 3
19630: PPUSH
19631: LD_INT 12
19633: PPUSH
19634: CALL_OW 12
19638: PPUSH
19639: CALL_OW 273
19643: ST_TO_ADDR
// if ValidHex ( x , y ) then
19644: LD_VAR 0 2
19648: PPUSH
19649: LD_VAR 0 3
19653: PPUSH
19654: CALL_OW 488
19658: IFFALSE 19693
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19660: LD_VAR 0 1
19664: PPUSH
19665: LD_VAR 0 2
19669: PPUSH
19670: LD_VAR 0 3
19674: PPUSH
19675: LD_INT 3
19677: PPUSH
19678: LD_INT 6
19680: PPUSH
19681: CALL_OW 12
19685: PPUSH
19686: LD_INT 1
19688: PPUSH
19689: CALL_OW 483
// end ;
19693: GO 19553
19695: POP
19696: POP
// end ;
19697: PPOPN 5
19699: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19700: LD_EXP 23
19704: IFFALSE 19712
19706: PUSH
19707: LD_EXP 58
19711: AND
19712: IFFALSE 19806
19714: GO 19716
19716: DISABLE
19717: LD_INT 0
19719: PPUSH
19720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19721: LD_ADDR_VAR 0 2
19725: PUSH
19726: LD_INT 22
19728: PUSH
19729: LD_OWVAR 2
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 32
19740: PUSH
19741: LD_INT 1
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 21
19750: PUSH
19751: LD_INT 2
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: LIST
19762: PPUSH
19763: CALL_OW 69
19767: ST_TO_ADDR
// if not tmp then
19768: LD_VAR 0 2
19772: NOT
19773: IFFALSE 19777
// exit ;
19775: GO 19806
// for i in tmp do
19777: LD_ADDR_VAR 0 1
19781: PUSH
19782: LD_VAR 0 2
19786: PUSH
19787: FOR_IN
19788: IFFALSE 19804
// SetFuel ( i , 0 ) ;
19790: LD_VAR 0 1
19794: PPUSH
19795: LD_INT 0
19797: PPUSH
19798: CALL_OW 240
19802: GO 19787
19804: POP
19805: POP
// end ;
19806: PPOPN 2
19808: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19809: LD_EXP 23
19813: IFFALSE 19821
19815: PUSH
19816: LD_EXP 59
19820: AND
19821: IFFALSE 19887
19823: GO 19825
19825: DISABLE
19826: LD_INT 0
19828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19829: LD_ADDR_VAR 0 1
19833: PUSH
19834: LD_INT 22
19836: PUSH
19837: LD_OWVAR 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 30
19848: PUSH
19849: LD_INT 29
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PPUSH
19860: CALL_OW 69
19864: ST_TO_ADDR
// if not tmp then
19865: LD_VAR 0 1
19869: NOT
19870: IFFALSE 19874
// exit ;
19872: GO 19887
// DestroyUnit ( tmp [ 1 ] ) ;
19874: LD_VAR 0 1
19878: PUSH
19879: LD_INT 1
19881: ARRAY
19882: PPUSH
19883: CALL_OW 65
// end ;
19887: PPOPN 1
19889: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
19890: LD_EXP 23
19894: IFFALSE 19902
19896: PUSH
19897: LD_EXP 61
19901: AND
19902: IFFALSE 20031
19904: GO 19906
19906: DISABLE
19907: LD_INT 0
19909: PPUSH
// begin uc_side := 0 ;
19910: LD_ADDR_OWVAR 20
19914: PUSH
19915: LD_INT 0
19917: ST_TO_ADDR
// uc_nation := nation_arabian ;
19918: LD_ADDR_OWVAR 21
19922: PUSH
19923: LD_INT 2
19925: ST_TO_ADDR
// hc_gallery :=  ;
19926: LD_ADDR_OWVAR 33
19930: PUSH
19931: LD_STRING 
19933: ST_TO_ADDR
// hc_name :=  ;
19934: LD_ADDR_OWVAR 26
19938: PUSH
19939: LD_STRING 
19941: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
19942: LD_INT 1
19944: PPUSH
19945: LD_INT 11
19947: PPUSH
19948: LD_INT 10
19950: PPUSH
19951: CALL_OW 380
// un := CreateHuman ;
19955: LD_ADDR_VAR 0 1
19959: PUSH
19960: CALL_OW 44
19964: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19965: LD_VAR 0 1
19969: PPUSH
19970: LD_INT 1
19972: PPUSH
19973: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19977: LD_INT 35
19979: PPUSH
19980: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19984: LD_VAR 0 1
19988: PPUSH
19989: LD_INT 22
19991: PUSH
19992: LD_OWVAR 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PPUSH
20001: CALL_OW 69
20005: PPUSH
20006: LD_VAR 0 1
20010: PPUSH
20011: CALL_OW 74
20015: PPUSH
20016: CALL_OW 115
// until IsDead ( un ) ;
20020: LD_VAR 0 1
20024: PPUSH
20025: CALL_OW 301
20029: IFFALSE 19977
// end ;
20031: PPOPN 1
20033: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20034: LD_EXP 23
20038: IFFALSE 20046
20040: PUSH
20041: LD_EXP 63
20045: AND
20046: IFFALSE 20058
20048: GO 20050
20050: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20051: LD_STRING earthquake(getX(game), 0, 32)
20053: PPUSH
20054: CALL_OW 559
20058: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20059: LD_EXP 23
20063: IFFALSE 20071
20065: PUSH
20066: LD_EXP 64
20070: AND
20071: IFFALSE 20162
20073: GO 20075
20075: DISABLE
20076: LD_INT 0
20078: PPUSH
// begin enable ;
20079: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20080: LD_ADDR_VAR 0 1
20084: PUSH
20085: LD_INT 22
20087: PUSH
20088: LD_OWVAR 2
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 21
20099: PUSH
20100: LD_INT 2
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 33
20109: PUSH
20110: LD_INT 3
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: LIST
20121: PPUSH
20122: CALL_OW 69
20126: ST_TO_ADDR
// if not tmp then
20127: LD_VAR 0 1
20131: NOT
20132: IFFALSE 20136
// exit ;
20134: GO 20162
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20136: LD_VAR 0 1
20140: PUSH
20141: LD_INT 1
20143: PPUSH
20144: LD_VAR 0 1
20148: PPUSH
20149: CALL_OW 12
20153: ARRAY
20154: PPUSH
20155: LD_INT 1
20157: PPUSH
20158: CALL_OW 234
// end ;
20162: PPOPN 1
20164: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20165: LD_EXP 23
20169: IFFALSE 20177
20171: PUSH
20172: LD_EXP 65
20176: AND
20177: IFFALSE 20318
20179: GO 20181
20181: DISABLE
20182: LD_INT 0
20184: PPUSH
20185: PPUSH
20186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20187: LD_ADDR_VAR 0 3
20191: PUSH
20192: LD_INT 22
20194: PUSH
20195: LD_OWVAR 2
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 25
20206: PUSH
20207: LD_INT 1
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PPUSH
20218: CALL_OW 69
20222: ST_TO_ADDR
// if not tmp then
20223: LD_VAR 0 3
20227: NOT
20228: IFFALSE 20232
// exit ;
20230: GO 20318
// un := tmp [ rand ( 1 , tmp ) ] ;
20232: LD_ADDR_VAR 0 2
20236: PUSH
20237: LD_VAR 0 3
20241: PUSH
20242: LD_INT 1
20244: PPUSH
20245: LD_VAR 0 3
20249: PPUSH
20250: CALL_OW 12
20254: ARRAY
20255: ST_TO_ADDR
// if Crawls ( un ) then
20256: LD_VAR 0 2
20260: PPUSH
20261: CALL_OW 318
20265: IFFALSE 20276
// ComWalk ( un ) ;
20267: LD_VAR 0 2
20271: PPUSH
20272: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20276: LD_VAR 0 2
20280: PPUSH
20281: LD_INT 9
20283: PPUSH
20284: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20288: LD_INT 28
20290: PPUSH
20291: LD_OWVAR 2
20295: PPUSH
20296: LD_INT 2
20298: PPUSH
20299: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20303: LD_INT 29
20305: PPUSH
20306: LD_OWVAR 2
20310: PPUSH
20311: LD_INT 2
20313: PPUSH
20314: CALL_OW 322
// end ;
20318: PPOPN 3
20320: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20321: LD_EXP 23
20325: IFFALSE 20333
20327: PUSH
20328: LD_EXP 66
20332: AND
20333: IFFALSE 20444
20335: GO 20337
20337: DISABLE
20338: LD_INT 0
20340: PPUSH
20341: PPUSH
20342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20343: LD_ADDR_VAR 0 3
20347: PUSH
20348: LD_INT 22
20350: PUSH
20351: LD_OWVAR 2
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 25
20362: PUSH
20363: LD_INT 1
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PPUSH
20374: CALL_OW 69
20378: ST_TO_ADDR
// if not tmp then
20379: LD_VAR 0 3
20383: NOT
20384: IFFALSE 20388
// exit ;
20386: GO 20444
// un := tmp [ rand ( 1 , tmp ) ] ;
20388: LD_ADDR_VAR 0 2
20392: PUSH
20393: LD_VAR 0 3
20397: PUSH
20398: LD_INT 1
20400: PPUSH
20401: LD_VAR 0 3
20405: PPUSH
20406: CALL_OW 12
20410: ARRAY
20411: ST_TO_ADDR
// if Crawls ( un ) then
20412: LD_VAR 0 2
20416: PPUSH
20417: CALL_OW 318
20421: IFFALSE 20432
// ComWalk ( un ) ;
20423: LD_VAR 0 2
20427: PPUSH
20428: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20432: LD_VAR 0 2
20436: PPUSH
20437: LD_INT 8
20439: PPUSH
20440: CALL_OW 336
// end ;
20444: PPOPN 3
20446: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20447: LD_EXP 23
20451: IFFALSE 20459
20453: PUSH
20454: LD_EXP 67
20458: AND
20459: IFFALSE 20603
20461: GO 20463
20463: DISABLE
20464: LD_INT 0
20466: PPUSH
20467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20468: LD_ADDR_VAR 0 2
20472: PUSH
20473: LD_INT 22
20475: PUSH
20476: LD_OWVAR 2
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 21
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 2
20497: PUSH
20498: LD_INT 34
20500: PUSH
20501: LD_INT 12
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 34
20510: PUSH
20511: LD_INT 51
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 34
20520: PUSH
20521: LD_INT 32
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: LIST
20538: PPUSH
20539: CALL_OW 69
20543: ST_TO_ADDR
// if not tmp then
20544: LD_VAR 0 2
20548: NOT
20549: IFFALSE 20553
// exit ;
20551: GO 20603
// for i in tmp do
20553: LD_ADDR_VAR 0 1
20557: PUSH
20558: LD_VAR 0 2
20562: PUSH
20563: FOR_IN
20564: IFFALSE 20601
// if GetCargo ( i , mat_artifact ) = 0 then
20566: LD_VAR 0 1
20570: PPUSH
20571: LD_INT 4
20573: PPUSH
20574: CALL_OW 289
20578: PUSH
20579: LD_INT 0
20581: EQUAL
20582: IFFALSE 20599
// SetCargo ( i , mat_siberit , 100 ) ;
20584: LD_VAR 0 1
20588: PPUSH
20589: LD_INT 3
20591: PPUSH
20592: LD_INT 100
20594: PPUSH
20595: CALL_OW 290
20599: GO 20563
20601: POP
20602: POP
// end ;
20603: PPOPN 2
20605: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
20606: LD_EXP 23
20610: IFFALSE 20618
20612: PUSH
20613: LD_EXP 68
20617: AND
20618: IFFALSE 20801
20620: GO 20622
20622: DISABLE
20623: LD_INT 0
20625: PPUSH
20626: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20627: LD_ADDR_VAR 0 2
20631: PUSH
20632: LD_INT 22
20634: PUSH
20635: LD_OWVAR 2
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PPUSH
20644: CALL_OW 69
20648: ST_TO_ADDR
// if not tmp then
20649: LD_VAR 0 2
20653: NOT
20654: IFFALSE 20658
// exit ;
20656: GO 20801
// for i := 1 to 2 do
20658: LD_ADDR_VAR 0 1
20662: PUSH
20663: DOUBLE
20664: LD_INT 1
20666: DEC
20667: ST_TO_ADDR
20668: LD_INT 2
20670: PUSH
20671: FOR_TO
20672: IFFALSE 20799
// begin uc_side := your_side ;
20674: LD_ADDR_OWVAR 20
20678: PUSH
20679: LD_OWVAR 2
20683: ST_TO_ADDR
// uc_nation := nation_american ;
20684: LD_ADDR_OWVAR 21
20688: PUSH
20689: LD_INT 1
20691: ST_TO_ADDR
// vc_chassis := us_morphling ;
20692: LD_ADDR_OWVAR 37
20696: PUSH
20697: LD_INT 5
20699: ST_TO_ADDR
// vc_engine := engine_siberite ;
20700: LD_ADDR_OWVAR 39
20704: PUSH
20705: LD_INT 3
20707: ST_TO_ADDR
// vc_control := control_computer ;
20708: LD_ADDR_OWVAR 38
20712: PUSH
20713: LD_INT 3
20715: ST_TO_ADDR
// vc_weapon := us_double_laser ;
20716: LD_ADDR_OWVAR 40
20720: PUSH
20721: LD_INT 10
20723: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
20724: LD_VAR 0 2
20728: PUSH
20729: LD_INT 1
20731: ARRAY
20732: PPUSH
20733: CALL_OW 310
20737: NOT
20738: IFFALSE 20785
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
20740: CALL_OW 45
20744: PPUSH
20745: LD_VAR 0 2
20749: PUSH
20750: LD_INT 1
20752: ARRAY
20753: PPUSH
20754: CALL_OW 250
20758: PPUSH
20759: LD_VAR 0 2
20763: PUSH
20764: LD_INT 1
20766: ARRAY
20767: PPUSH
20768: CALL_OW 251
20772: PPUSH
20773: LD_INT 12
20775: PPUSH
20776: LD_INT 1
20778: PPUSH
20779: CALL_OW 50
20783: GO 20797
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
20785: CALL_OW 45
20789: PPUSH
20790: LD_INT 1
20792: PPUSH
20793: CALL_OW 51
// end ;
20797: GO 20671
20799: POP
20800: POP
// end ;
20801: PPOPN 2
20803: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
20804: LD_EXP 23
20808: IFFALSE 20816
20810: PUSH
20811: LD_EXP 69
20815: AND
20816: IFFALSE 21038
20818: GO 20820
20820: DISABLE
20821: LD_INT 0
20823: PPUSH
20824: PPUSH
20825: PPUSH
20826: PPUSH
20827: PPUSH
20828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20829: LD_ADDR_VAR 0 6
20833: PUSH
20834: LD_INT 22
20836: PUSH
20837: LD_OWVAR 2
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 21
20848: PUSH
20849: LD_INT 1
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 3
20858: PUSH
20859: LD_INT 23
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: LIST
20877: PPUSH
20878: CALL_OW 69
20882: ST_TO_ADDR
// if not tmp then
20883: LD_VAR 0 6
20887: NOT
20888: IFFALSE 20892
// exit ;
20890: GO 21038
// s1 := rand ( 1 , 4 ) ;
20892: LD_ADDR_VAR 0 2
20896: PUSH
20897: LD_INT 1
20899: PPUSH
20900: LD_INT 4
20902: PPUSH
20903: CALL_OW 12
20907: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
20908: LD_ADDR_VAR 0 4
20912: PUSH
20913: LD_VAR 0 6
20917: PUSH
20918: LD_INT 1
20920: ARRAY
20921: PPUSH
20922: LD_VAR 0 2
20926: PPUSH
20927: CALL_OW 259
20931: ST_TO_ADDR
// if s1 = 1 then
20932: LD_VAR 0 2
20936: PUSH
20937: LD_INT 1
20939: EQUAL
20940: IFFALSE 20960
// s2 := rand ( 2 , 4 ) else
20942: LD_ADDR_VAR 0 3
20946: PUSH
20947: LD_INT 2
20949: PPUSH
20950: LD_INT 4
20952: PPUSH
20953: CALL_OW 12
20957: ST_TO_ADDR
20958: GO 20968
// s2 := 1 ;
20960: LD_ADDR_VAR 0 3
20964: PUSH
20965: LD_INT 1
20967: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
20968: LD_ADDR_VAR 0 5
20972: PUSH
20973: LD_VAR 0 6
20977: PUSH
20978: LD_INT 1
20980: ARRAY
20981: PPUSH
20982: LD_VAR 0 3
20986: PPUSH
20987: CALL_OW 259
20991: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
20992: LD_VAR 0 6
20996: PUSH
20997: LD_INT 1
20999: ARRAY
21000: PPUSH
21001: LD_VAR 0 2
21005: PPUSH
21006: LD_VAR 0 5
21010: PPUSH
21011: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21015: LD_VAR 0 6
21019: PUSH
21020: LD_INT 1
21022: ARRAY
21023: PPUSH
21024: LD_VAR 0 3
21028: PPUSH
21029: LD_VAR 0 4
21033: PPUSH
21034: CALL_OW 237
// end ;
21038: PPOPN 6
21040: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21041: LD_EXP 23
21045: IFFALSE 21053
21047: PUSH
21048: LD_EXP 70
21052: AND
21053: IFFALSE 21132
21055: GO 21057
21057: DISABLE
21058: LD_INT 0
21060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21061: LD_ADDR_VAR 0 1
21065: PUSH
21066: LD_INT 22
21068: PUSH
21069: LD_OWVAR 2
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 30
21080: PUSH
21081: LD_INT 3
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PPUSH
21092: CALL_OW 69
21096: ST_TO_ADDR
// if not tmp then
21097: LD_VAR 0 1
21101: NOT
21102: IFFALSE 21106
// exit ;
21104: GO 21132
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21106: LD_VAR 0 1
21110: PUSH
21111: LD_INT 1
21113: PPUSH
21114: LD_VAR 0 1
21118: PPUSH
21119: CALL_OW 12
21123: ARRAY
21124: PPUSH
21125: LD_INT 1
21127: PPUSH
21128: CALL_OW 234
// end ;
21132: PPOPN 1
21134: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21135: LD_EXP 23
21139: IFFALSE 21147
21141: PUSH
21142: LD_EXP 71
21146: AND
21147: IFFALSE 21259
21149: GO 21151
21151: DISABLE
21152: LD_INT 0
21154: PPUSH
21155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21156: LD_ADDR_VAR 0 2
21160: PUSH
21161: LD_INT 22
21163: PUSH
21164: LD_OWVAR 2
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 2
21175: PUSH
21176: LD_INT 30
21178: PUSH
21179: LD_INT 27
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 30
21188: PUSH
21189: LD_INT 26
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 30
21198: PUSH
21199: LD_INT 28
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PPUSH
21216: CALL_OW 69
21220: ST_TO_ADDR
// if not tmp then
21221: LD_VAR 0 2
21225: NOT
21226: IFFALSE 21230
// exit ;
21228: GO 21259
// for i in tmp do
21230: LD_ADDR_VAR 0 1
21234: PUSH
21235: LD_VAR 0 2
21239: PUSH
21240: FOR_IN
21241: IFFALSE 21257
// SetLives ( i , 1 ) ;
21243: LD_VAR 0 1
21247: PPUSH
21248: LD_INT 1
21250: PPUSH
21251: CALL_OW 234
21255: GO 21240
21257: POP
21258: POP
// end ;
21259: PPOPN 2
21261: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21262: LD_EXP 23
21266: IFFALSE 21274
21268: PUSH
21269: LD_EXP 72
21273: AND
21274: IFFALSE 21561
21276: GO 21278
21278: DISABLE
21279: LD_INT 0
21281: PPUSH
21282: PPUSH
21283: PPUSH
// begin i := rand ( 1 , 7 ) ;
21284: LD_ADDR_VAR 0 1
21288: PUSH
21289: LD_INT 1
21291: PPUSH
21292: LD_INT 7
21294: PPUSH
21295: CALL_OW 12
21299: ST_TO_ADDR
// case i of 1 :
21300: LD_VAR 0 1
21304: PUSH
21305: LD_INT 1
21307: DOUBLE
21308: EQUAL
21309: IFTRUE 21313
21311: GO 21323
21313: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21314: LD_STRING earthquake(getX(game), 0, 32)
21316: PPUSH
21317: CALL_OW 559
21321: GO 21561
21323: LD_INT 2
21325: DOUBLE
21326: EQUAL
21327: IFTRUE 21331
21329: GO 21345
21331: POP
// begin ToLua ( displayStucuk(); ) ;
21332: LD_STRING displayStucuk();
21334: PPUSH
21335: CALL_OW 559
// ResetFog ;
21339: CALL_OW 335
// end ; 3 :
21343: GO 21561
21345: LD_INT 3
21347: DOUBLE
21348: EQUAL
21349: IFTRUE 21353
21351: GO 21457
21353: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21354: LD_ADDR_VAR 0 2
21358: PUSH
21359: LD_INT 22
21361: PUSH
21362: LD_OWVAR 2
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: LD_INT 25
21373: PUSH
21374: LD_INT 1
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PPUSH
21385: CALL_OW 69
21389: ST_TO_ADDR
// if not tmp then
21390: LD_VAR 0 2
21394: NOT
21395: IFFALSE 21399
// exit ;
21397: GO 21561
// un := tmp [ rand ( 1 , tmp ) ] ;
21399: LD_ADDR_VAR 0 3
21403: PUSH
21404: LD_VAR 0 2
21408: PUSH
21409: LD_INT 1
21411: PPUSH
21412: LD_VAR 0 2
21416: PPUSH
21417: CALL_OW 12
21421: ARRAY
21422: ST_TO_ADDR
// if Crawls ( un ) then
21423: LD_VAR 0 3
21427: PPUSH
21428: CALL_OW 318
21432: IFFALSE 21443
// ComWalk ( un ) ;
21434: LD_VAR 0 3
21438: PPUSH
21439: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21443: LD_VAR 0 3
21447: PPUSH
21448: LD_INT 8
21450: PPUSH
21451: CALL_OW 336
// end ; 4 :
21455: GO 21561
21457: LD_INT 4
21459: DOUBLE
21460: EQUAL
21461: IFTRUE 21465
21463: GO 21539
21465: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21466: LD_ADDR_VAR 0 2
21470: PUSH
21471: LD_INT 22
21473: PUSH
21474: LD_OWVAR 2
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 30
21485: PUSH
21486: LD_INT 29
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PPUSH
21497: CALL_OW 69
21501: ST_TO_ADDR
// if not tmp then
21502: LD_VAR 0 2
21506: NOT
21507: IFFALSE 21511
// exit ;
21509: GO 21561
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21511: LD_VAR 0 2
21515: PUSH
21516: LD_INT 1
21518: ARRAY
21519: PPUSH
21520: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
21524: LD_VAR 0 2
21528: PUSH
21529: LD_INT 1
21531: ARRAY
21532: PPUSH
21533: CALL_OW 65
// end ; 5 .. 7 :
21537: GO 21561
21539: LD_INT 5
21541: DOUBLE
21542: GREATEREQUAL
21543: IFFALSE 21551
21545: LD_INT 7
21547: DOUBLE
21548: LESSEQUAL
21549: IFTRUE 21553
21551: GO 21560
21553: POP
// StreamSibBomb ; end ;
21554: CALL 17742 0 0
21558: GO 21561
21560: POP
// end ;
21561: PPOPN 3
21563: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
21564: LD_EXP 23
21568: IFFALSE 21576
21570: PUSH
21571: LD_EXP 73
21575: AND
21576: IFFALSE 21732
21578: GO 21580
21580: DISABLE
21581: LD_INT 0
21583: PPUSH
21584: PPUSH
21585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
21586: LD_ADDR_VAR 0 2
21590: PUSH
21591: LD_INT 81
21593: PUSH
21594: LD_OWVAR 2
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 2
21605: PUSH
21606: LD_INT 21
21608: PUSH
21609: LD_INT 1
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 21
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: LIST
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PPUSH
21635: CALL_OW 69
21639: ST_TO_ADDR
// if not tmp then
21640: LD_VAR 0 2
21644: NOT
21645: IFFALSE 21649
// exit ;
21647: GO 21732
// p := 0 ;
21649: LD_ADDR_VAR 0 3
21653: PUSH
21654: LD_INT 0
21656: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21657: LD_INT 35
21659: PPUSH
21660: CALL_OW 67
// p := p + 1 ;
21664: LD_ADDR_VAR 0 3
21668: PUSH
21669: LD_VAR 0 3
21673: PUSH
21674: LD_INT 1
21676: PLUS
21677: ST_TO_ADDR
// for i in tmp do
21678: LD_ADDR_VAR 0 1
21682: PUSH
21683: LD_VAR 0 2
21687: PUSH
21688: FOR_IN
21689: IFFALSE 21720
// if GetLives ( i ) < 1000 then
21691: LD_VAR 0 1
21695: PPUSH
21696: CALL_OW 256
21700: PUSH
21701: LD_INT 1000
21703: LESS
21704: IFFALSE 21718
// SetLives ( i , 1000 ) ;
21706: LD_VAR 0 1
21710: PPUSH
21711: LD_INT 1000
21713: PPUSH
21714: CALL_OW 234
21718: GO 21688
21720: POP
21721: POP
// until p > 20 ;
21722: LD_VAR 0 3
21726: PUSH
21727: LD_INT 20
21729: GREATER
21730: IFFALSE 21657
// end ;
21732: PPOPN 3
21734: END
// every 0 0$1 trigger StreamModeActive and sTime do
21735: LD_EXP 23
21739: IFFALSE 21747
21741: PUSH
21742: LD_EXP 74
21746: AND
21747: IFFALSE 21782
21749: GO 21751
21751: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
21752: LD_INT 28
21754: PPUSH
21755: LD_OWVAR 2
21759: PPUSH
21760: LD_INT 2
21762: PPUSH
21763: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
21767: LD_INT 30
21769: PPUSH
21770: LD_OWVAR 2
21774: PPUSH
21775: LD_INT 2
21777: PPUSH
21778: CALL_OW 322
// end ;
21782: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
21783: LD_EXP 23
21787: IFFALSE 21795
21789: PUSH
21790: LD_EXP 75
21794: AND
21795: IFFALSE 21916
21797: GO 21799
21799: DISABLE
21800: LD_INT 0
21802: PPUSH
21803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21804: LD_ADDR_VAR 0 2
21808: PUSH
21809: LD_INT 22
21811: PUSH
21812: LD_OWVAR 2
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 21
21823: PUSH
21824: LD_INT 1
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 3
21833: PUSH
21834: LD_INT 23
21836: PUSH
21837: LD_INT 0
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: LIST
21852: PPUSH
21853: CALL_OW 69
21857: ST_TO_ADDR
// if not tmp then
21858: LD_VAR 0 2
21862: NOT
21863: IFFALSE 21867
// exit ;
21865: GO 21916
// for i in tmp do
21867: LD_ADDR_VAR 0 1
21871: PUSH
21872: LD_VAR 0 2
21876: PUSH
21877: FOR_IN
21878: IFFALSE 21914
// begin if Crawls ( i ) then
21880: LD_VAR 0 1
21884: PPUSH
21885: CALL_OW 318
21889: IFFALSE 21900
// ComWalk ( i ) ;
21891: LD_VAR 0 1
21895: PPUSH
21896: CALL_OW 138
// SetClass ( i , 2 ) ;
21900: LD_VAR 0 1
21904: PPUSH
21905: LD_INT 2
21907: PPUSH
21908: CALL_OW 336
// end ;
21912: GO 21877
21914: POP
21915: POP
// end ;
21916: PPOPN 2
21918: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
21919: LD_EXP 23
21923: IFFALSE 21931
21925: PUSH
21926: LD_EXP 76
21930: AND
21931: IFFALSE 22221
21933: GO 21935
21935: DISABLE
21936: LD_INT 0
21938: PPUSH
21939: PPUSH
21940: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
21941: LD_OWVAR 2
21945: PPUSH
21946: LD_INT 9
21948: PPUSH
21949: LD_INT 1
21951: PPUSH
21952: LD_INT 1
21954: PPUSH
21955: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
21959: LD_INT 9
21961: PPUSH
21962: LD_OWVAR 2
21966: PPUSH
21967: CALL_OW 343
// uc_side := 9 ;
21971: LD_ADDR_OWVAR 20
21975: PUSH
21976: LD_INT 9
21978: ST_TO_ADDR
// uc_nation := 2 ;
21979: LD_ADDR_OWVAR 21
21983: PUSH
21984: LD_INT 2
21986: ST_TO_ADDR
// hc_name := Dark Warrior ;
21987: LD_ADDR_OWVAR 26
21991: PUSH
21992: LD_STRING Dark Warrior
21994: ST_TO_ADDR
// hc_gallery :=  ;
21995: LD_ADDR_OWVAR 33
21999: PUSH
22000: LD_STRING 
22002: ST_TO_ADDR
// hc_noskilllimit := true ;
22003: LD_ADDR_OWVAR 76
22007: PUSH
22008: LD_INT 1
22010: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22011: LD_ADDR_OWVAR 31
22015: PUSH
22016: LD_INT 30
22018: PUSH
22019: LD_INT 30
22021: PUSH
22022: LD_INT 30
22024: PUSH
22025: LD_INT 30
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: ST_TO_ADDR
// un := CreateHuman ;
22034: LD_ADDR_VAR 0 3
22038: PUSH
22039: CALL_OW 44
22043: ST_TO_ADDR
// hc_noskilllimit := false ;
22044: LD_ADDR_OWVAR 76
22048: PUSH
22049: LD_INT 0
22051: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22052: LD_VAR 0 3
22056: PPUSH
22057: LD_INT 1
22059: PPUSH
22060: CALL_OW 51
// ToLua ( playRanger() ) ;
22064: LD_STRING playRanger()
22066: PPUSH
22067: CALL_OW 559
// p := 0 ;
22071: LD_ADDR_VAR 0 2
22075: PUSH
22076: LD_INT 0
22078: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22079: LD_INT 35
22081: PPUSH
22082: CALL_OW 67
// p := p + 1 ;
22086: LD_ADDR_VAR 0 2
22090: PUSH
22091: LD_VAR 0 2
22095: PUSH
22096: LD_INT 1
22098: PLUS
22099: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22100: LD_VAR 0 3
22104: PPUSH
22105: CALL_OW 256
22109: PUSH
22110: LD_INT 1000
22112: LESS
22113: IFFALSE 22127
// SetLives ( un , 1000 ) ;
22115: LD_VAR 0 3
22119: PPUSH
22120: LD_INT 1000
22122: PPUSH
22123: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22127: LD_VAR 0 3
22131: PPUSH
22132: LD_INT 81
22134: PUSH
22135: LD_OWVAR 2
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 91
22146: PUSH
22147: LD_VAR 0 3
22151: PUSH
22152: LD_INT 30
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: LIST
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PPUSH
22164: CALL_OW 69
22168: PPUSH
22169: LD_VAR 0 3
22173: PPUSH
22174: CALL_OW 74
22178: PPUSH
22179: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22183: LD_VAR 0 2
22187: PUSH
22188: LD_INT 80
22190: GREATER
22191: IFTRUE 22204
22193: PUSH
22194: LD_VAR 0 3
22198: PPUSH
22199: CALL_OW 301
22203: OR
22204: IFFALSE 22079
// if un then
22206: LD_VAR 0 3
22210: IFFALSE 22221
// RemoveUnit ( un ) ;
22212: LD_VAR 0 3
22216: PPUSH
22217: CALL_OW 64
// end ;
22221: PPOPN 3
22223: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22224: LD_EXP 77
22228: IFFALSE 22344
22230: GO 22232
22232: DISABLE
22233: LD_INT 0
22235: PPUSH
22236: PPUSH
22237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22238: LD_ADDR_VAR 0 2
22242: PUSH
22243: LD_INT 81
22245: PUSH
22246: LD_OWVAR 2
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 21
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PPUSH
22269: CALL_OW 69
22273: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22274: LD_STRING playComputer()
22276: PPUSH
22277: CALL_OW 559
// if not tmp then
22281: LD_VAR 0 2
22285: NOT
22286: IFFALSE 22290
// exit ;
22288: GO 22344
// for i in tmp do
22290: LD_ADDR_VAR 0 1
22294: PUSH
22295: LD_VAR 0 2
22299: PUSH
22300: FOR_IN
22301: IFFALSE 22342
// for j := 1 to 4 do
22303: LD_ADDR_VAR 0 3
22307: PUSH
22308: DOUBLE
22309: LD_INT 1
22311: DEC
22312: ST_TO_ADDR
22313: LD_INT 4
22315: PUSH
22316: FOR_TO
22317: IFFALSE 22338
// SetSkill ( i , j , 10 ) ;
22319: LD_VAR 0 1
22323: PPUSH
22324: LD_VAR 0 3
22328: PPUSH
22329: LD_INT 10
22331: PPUSH
22332: CALL_OW 237
22336: GO 22316
22338: POP
22339: POP
22340: GO 22300
22342: POP
22343: POP
// end ;
22344: PPOPN 3
22346: END
// every 0 0$1 trigger s30 do var i , tmp ;
22347: LD_EXP 78
22351: IFFALSE 22420
22353: GO 22355
22355: DISABLE
22356: LD_INT 0
22358: PPUSH
22359: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22360: LD_ADDR_VAR 0 2
22364: PUSH
22365: LD_INT 22
22367: PUSH
22368: LD_OWVAR 2
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PPUSH
22377: CALL_OW 69
22381: ST_TO_ADDR
// if not tmp then
22382: LD_VAR 0 2
22386: NOT
22387: IFFALSE 22391
// exit ;
22389: GO 22420
// for i in tmp do
22391: LD_ADDR_VAR 0 1
22395: PUSH
22396: LD_VAR 0 2
22400: PUSH
22401: FOR_IN
22402: IFFALSE 22418
// SetLives ( i , 300 ) ;
22404: LD_VAR 0 1
22408: PPUSH
22409: LD_INT 300
22411: PPUSH
22412: CALL_OW 234
22416: GO 22401
22418: POP
22419: POP
// end ;
22420: PPOPN 2
22422: END
// every 0 0$1 trigger s60 do var i , tmp ;
22423: LD_EXP 79
22427: IFFALSE 22496
22429: GO 22431
22431: DISABLE
22432: LD_INT 0
22434: PPUSH
22435: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22436: LD_ADDR_VAR 0 2
22440: PUSH
22441: LD_INT 22
22443: PUSH
22444: LD_OWVAR 2
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PPUSH
22453: CALL_OW 69
22457: ST_TO_ADDR
// if not tmp then
22458: LD_VAR 0 2
22462: NOT
22463: IFFALSE 22467
// exit ;
22465: GO 22496
// for i in tmp do
22467: LD_ADDR_VAR 0 1
22471: PUSH
22472: LD_VAR 0 2
22476: PUSH
22477: FOR_IN
22478: IFFALSE 22494
// SetLives ( i , 600 ) ;
22480: LD_VAR 0 1
22484: PPUSH
22485: LD_INT 600
22487: PPUSH
22488: CALL_OW 234
22492: GO 22477
22494: POP
22495: POP
// end ;
22496: PPOPN 2
22498: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22499: LD_INT 0
22501: PPUSH
// case cmd of 301 :
22502: LD_VAR 0 1
22506: PUSH
22507: LD_INT 301
22509: DOUBLE
22510: EQUAL
22511: IFTRUE 22515
22513: GO 22547
22515: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22516: LD_VAR 0 6
22520: PPUSH
22521: LD_VAR 0 7
22525: PPUSH
22526: LD_VAR 0 8
22530: PPUSH
22531: LD_VAR 0 4
22535: PPUSH
22536: LD_VAR 0 5
22540: PPUSH
22541: CALL 23760 0 5
22545: GO 22668
22547: LD_INT 302
22549: DOUBLE
22550: EQUAL
22551: IFTRUE 22555
22553: GO 22592
22555: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
22556: LD_VAR 0 6
22560: PPUSH
22561: LD_VAR 0 7
22565: PPUSH
22566: LD_VAR 0 8
22570: PPUSH
22571: LD_VAR 0 9
22575: PPUSH
22576: LD_VAR 0 4
22580: PPUSH
22581: LD_VAR 0 5
22585: PPUSH
22586: CALL 23851 0 6
22590: GO 22668
22592: LD_INT 303
22594: DOUBLE
22595: EQUAL
22596: IFTRUE 22600
22598: GO 22637
22600: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
22601: LD_VAR 0 6
22605: PPUSH
22606: LD_VAR 0 7
22610: PPUSH
22611: LD_VAR 0 8
22615: PPUSH
22616: LD_VAR 0 9
22620: PPUSH
22621: LD_VAR 0 4
22625: PPUSH
22626: LD_VAR 0 5
22630: PPUSH
22631: CALL 22673 0 6
22635: GO 22668
22637: LD_INT 304
22639: DOUBLE
22640: EQUAL
22641: IFTRUE 22645
22643: GO 22667
22645: POP
// hHackTeleport ( unit , x , y ) ; end ;
22646: LD_VAR 0 2
22650: PPUSH
22651: LD_VAR 0 4
22655: PPUSH
22656: LD_VAR 0 5
22660: PPUSH
22661: CALL 24444 0 3
22665: GO 22668
22667: POP
// end ;
22668: LD_VAR 0 12
22672: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
22673: LD_INT 0
22675: PPUSH
22676: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
22677: LD_VAR 0 1
22681: PUSH
22682: LD_INT 1
22684: LESS
22685: IFTRUE 22697
22687: PUSH
22688: LD_VAR 0 1
22692: PUSH
22693: LD_INT 3
22695: GREATER
22696: OR
22697: IFTRUE 22715
22699: PUSH
22700: LD_VAR 0 5
22704: PPUSH
22705: LD_VAR 0 6
22709: PPUSH
22710: CALL_OW 428
22714: OR
22715: IFFALSE 22719
// exit ;
22717: GO 23447
// uc_side := your_side ;
22719: LD_ADDR_OWVAR 20
22723: PUSH
22724: LD_OWVAR 2
22728: ST_TO_ADDR
// uc_nation := nation ;
22729: LD_ADDR_OWVAR 21
22733: PUSH
22734: LD_VAR 0 1
22738: ST_TO_ADDR
// bc_level = 1 ;
22739: LD_ADDR_OWVAR 43
22743: PUSH
22744: LD_INT 1
22746: ST_TO_ADDR
// case btype of 1 :
22747: LD_VAR 0 2
22751: PUSH
22752: LD_INT 1
22754: DOUBLE
22755: EQUAL
22756: IFTRUE 22760
22758: GO 22771
22760: POP
// bc_type := b_depot ; 2 :
22761: LD_ADDR_OWVAR 42
22765: PUSH
22766: LD_INT 0
22768: ST_TO_ADDR
22769: GO 23391
22771: LD_INT 2
22773: DOUBLE
22774: EQUAL
22775: IFTRUE 22779
22777: GO 22790
22779: POP
// bc_type := b_warehouse ; 3 :
22780: LD_ADDR_OWVAR 42
22784: PUSH
22785: LD_INT 1
22787: ST_TO_ADDR
22788: GO 23391
22790: LD_INT 3
22792: DOUBLE
22793: EQUAL
22794: IFTRUE 22798
22796: GO 22809
22798: POP
// bc_type := b_lab ; 4 .. 9 :
22799: LD_ADDR_OWVAR 42
22803: PUSH
22804: LD_INT 6
22806: ST_TO_ADDR
22807: GO 23391
22809: LD_INT 4
22811: DOUBLE
22812: GREATEREQUAL
22813: IFFALSE 22821
22815: LD_INT 9
22817: DOUBLE
22818: LESSEQUAL
22819: IFTRUE 22823
22821: GO 22883
22823: POP
// begin bc_type := b_lab_half ;
22824: LD_ADDR_OWVAR 42
22828: PUSH
22829: LD_INT 7
22831: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
22832: LD_ADDR_OWVAR 44
22836: PUSH
22837: LD_INT 10
22839: PUSH
22840: LD_INT 11
22842: PUSH
22843: LD_INT 12
22845: PUSH
22846: LD_INT 15
22848: PUSH
22849: LD_INT 14
22851: PUSH
22852: LD_INT 13
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: PUSH
22863: LD_VAR 0 2
22867: PUSH
22868: LD_INT 3
22870: MINUS
22871: ARRAY
22872: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
22873: LD_ADDR_OWVAR 45
22877: PUSH
22878: LD_INT 9
22880: ST_TO_ADDR
// end ; 10 .. 13 :
22881: GO 23391
22883: LD_INT 10
22885: DOUBLE
22886: GREATEREQUAL
22887: IFFALSE 22895
22889: LD_INT 13
22891: DOUBLE
22892: LESSEQUAL
22893: IFTRUE 22897
22895: GO 22974
22897: POP
// begin bc_type := b_lab_full ;
22898: LD_ADDR_OWVAR 42
22902: PUSH
22903: LD_INT 8
22905: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
22906: LD_ADDR_OWVAR 44
22910: PUSH
22911: LD_INT 10
22913: PUSH
22914: LD_INT 12
22916: PUSH
22917: LD_INT 14
22919: PUSH
22920: LD_INT 13
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: PUSH
22929: LD_VAR 0 2
22933: PUSH
22934: LD_INT 9
22936: MINUS
22937: ARRAY
22938: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
22939: LD_ADDR_OWVAR 45
22943: PUSH
22944: LD_INT 11
22946: PUSH
22947: LD_INT 15
22949: PUSH
22950: LD_INT 12
22952: PUSH
22953: LD_INT 15
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: PUSH
22962: LD_VAR 0 2
22966: PUSH
22967: LD_INT 9
22969: MINUS
22970: ARRAY
22971: ST_TO_ADDR
// end ; 14 :
22972: GO 23391
22974: LD_INT 14
22976: DOUBLE
22977: EQUAL
22978: IFTRUE 22982
22980: GO 22993
22982: POP
// bc_type := b_workshop ; 15 :
22983: LD_ADDR_OWVAR 42
22987: PUSH
22988: LD_INT 2
22990: ST_TO_ADDR
22991: GO 23391
22993: LD_INT 15
22995: DOUBLE
22996: EQUAL
22997: IFTRUE 23001
22999: GO 23012
23001: POP
// bc_type := b_factory ; 16 :
23002: LD_ADDR_OWVAR 42
23006: PUSH
23007: LD_INT 3
23009: ST_TO_ADDR
23010: GO 23391
23012: LD_INT 16
23014: DOUBLE
23015: EQUAL
23016: IFTRUE 23020
23018: GO 23031
23020: POP
// bc_type := b_ext_gun ; 17 :
23021: LD_ADDR_OWVAR 42
23025: PUSH
23026: LD_INT 17
23028: ST_TO_ADDR
23029: GO 23391
23031: LD_INT 17
23033: DOUBLE
23034: EQUAL
23035: IFTRUE 23039
23037: GO 23067
23039: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23040: LD_ADDR_OWVAR 42
23044: PUSH
23045: LD_INT 19
23047: PUSH
23048: LD_INT 23
23050: PUSH
23051: LD_INT 19
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: LIST
23058: PUSH
23059: LD_VAR 0 1
23063: ARRAY
23064: ST_TO_ADDR
23065: GO 23391
23067: LD_INT 18
23069: DOUBLE
23070: EQUAL
23071: IFTRUE 23075
23073: GO 23086
23075: POP
// bc_type := b_ext_radar ; 19 :
23076: LD_ADDR_OWVAR 42
23080: PUSH
23081: LD_INT 20
23083: ST_TO_ADDR
23084: GO 23391
23086: LD_INT 19
23088: DOUBLE
23089: EQUAL
23090: IFTRUE 23094
23092: GO 23105
23094: POP
// bc_type := b_ext_radio ; 20 :
23095: LD_ADDR_OWVAR 42
23099: PUSH
23100: LD_INT 22
23102: ST_TO_ADDR
23103: GO 23391
23105: LD_INT 20
23107: DOUBLE
23108: EQUAL
23109: IFTRUE 23113
23111: GO 23124
23113: POP
// bc_type := b_ext_siberium ; 21 :
23114: LD_ADDR_OWVAR 42
23118: PUSH
23119: LD_INT 21
23121: ST_TO_ADDR
23122: GO 23391
23124: LD_INT 21
23126: DOUBLE
23127: EQUAL
23128: IFTRUE 23132
23130: GO 23143
23132: POP
// bc_type := b_ext_computer ; 22 :
23133: LD_ADDR_OWVAR 42
23137: PUSH
23138: LD_INT 24
23140: ST_TO_ADDR
23141: GO 23391
23143: LD_INT 22
23145: DOUBLE
23146: EQUAL
23147: IFTRUE 23151
23149: GO 23162
23151: POP
// bc_type := b_ext_track ; 23 :
23152: LD_ADDR_OWVAR 42
23156: PUSH
23157: LD_INT 16
23159: ST_TO_ADDR
23160: GO 23391
23162: LD_INT 23
23164: DOUBLE
23165: EQUAL
23166: IFTRUE 23170
23168: GO 23181
23170: POP
// bc_type := b_ext_laser ; 24 :
23171: LD_ADDR_OWVAR 42
23175: PUSH
23176: LD_INT 25
23178: ST_TO_ADDR
23179: GO 23391
23181: LD_INT 24
23183: DOUBLE
23184: EQUAL
23185: IFTRUE 23189
23187: GO 23200
23189: POP
// bc_type := b_control_tower ; 25 :
23190: LD_ADDR_OWVAR 42
23194: PUSH
23195: LD_INT 36
23197: ST_TO_ADDR
23198: GO 23391
23200: LD_INT 25
23202: DOUBLE
23203: EQUAL
23204: IFTRUE 23208
23206: GO 23219
23208: POP
// bc_type := b_breastwork ; 26 :
23209: LD_ADDR_OWVAR 42
23213: PUSH
23214: LD_INT 31
23216: ST_TO_ADDR
23217: GO 23391
23219: LD_INT 26
23221: DOUBLE
23222: EQUAL
23223: IFTRUE 23227
23225: GO 23238
23227: POP
// bc_type := b_bunker ; 27 :
23228: LD_ADDR_OWVAR 42
23232: PUSH
23233: LD_INT 32
23235: ST_TO_ADDR
23236: GO 23391
23238: LD_INT 27
23240: DOUBLE
23241: EQUAL
23242: IFTRUE 23246
23244: GO 23257
23246: POP
// bc_type := b_turret ; 28 :
23247: LD_ADDR_OWVAR 42
23251: PUSH
23252: LD_INT 33
23254: ST_TO_ADDR
23255: GO 23391
23257: LD_INT 28
23259: DOUBLE
23260: EQUAL
23261: IFTRUE 23265
23263: GO 23276
23265: POP
// bc_type := b_armoury ; 29 :
23266: LD_ADDR_OWVAR 42
23270: PUSH
23271: LD_INT 4
23273: ST_TO_ADDR
23274: GO 23391
23276: LD_INT 29
23278: DOUBLE
23279: EQUAL
23280: IFTRUE 23284
23282: GO 23295
23284: POP
// bc_type := b_barracks ; 30 :
23285: LD_ADDR_OWVAR 42
23289: PUSH
23290: LD_INT 5
23292: ST_TO_ADDR
23293: GO 23391
23295: LD_INT 30
23297: DOUBLE
23298: EQUAL
23299: IFTRUE 23303
23301: GO 23314
23303: POP
// bc_type := b_solar_power ; 31 :
23304: LD_ADDR_OWVAR 42
23308: PUSH
23309: LD_INT 27
23311: ST_TO_ADDR
23312: GO 23391
23314: LD_INT 31
23316: DOUBLE
23317: EQUAL
23318: IFTRUE 23322
23320: GO 23333
23322: POP
// bc_type := b_oil_power ; 32 :
23323: LD_ADDR_OWVAR 42
23327: PUSH
23328: LD_INT 26
23330: ST_TO_ADDR
23331: GO 23391
23333: LD_INT 32
23335: DOUBLE
23336: EQUAL
23337: IFTRUE 23341
23339: GO 23352
23341: POP
// bc_type := b_siberite_power ; 33 :
23342: LD_ADDR_OWVAR 42
23346: PUSH
23347: LD_INT 28
23349: ST_TO_ADDR
23350: GO 23391
23352: LD_INT 33
23354: DOUBLE
23355: EQUAL
23356: IFTRUE 23360
23358: GO 23371
23360: POP
// bc_type := b_oil_mine ; 34 :
23361: LD_ADDR_OWVAR 42
23365: PUSH
23366: LD_INT 29
23368: ST_TO_ADDR
23369: GO 23391
23371: LD_INT 34
23373: DOUBLE
23374: EQUAL
23375: IFTRUE 23379
23377: GO 23390
23379: POP
// bc_type := b_siberite_mine ; end ;
23380: LD_ADDR_OWVAR 42
23384: PUSH
23385: LD_INT 30
23387: ST_TO_ADDR
23388: GO 23391
23390: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23391: LD_ADDR_VAR 0 8
23395: PUSH
23396: LD_VAR 0 5
23400: PPUSH
23401: LD_VAR 0 6
23405: PPUSH
23406: LD_VAR 0 3
23410: PPUSH
23411: CALL_OW 47
23415: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23416: LD_OWVAR 42
23420: PUSH
23421: LD_INT 32
23423: PUSH
23424: LD_INT 33
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: IN
23431: IFFALSE 23447
// PlaceWeaponTurret ( b , weapon ) ;
23433: LD_VAR 0 8
23437: PPUSH
23438: LD_VAR 0 4
23442: PPUSH
23443: CALL_OW 431
// end ;
23447: LD_VAR 0 7
23451: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23452: LD_INT 0
23454: PPUSH
23455: PPUSH
23456: PPUSH
23457: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23458: LD_ADDR_VAR 0 4
23462: PUSH
23463: LD_INT 22
23465: PUSH
23466: LD_OWVAR 2
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: LD_INT 30
23480: PUSH
23481: LD_INT 0
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 30
23490: PUSH
23491: LD_INT 1
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: LIST
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PPUSH
23507: CALL_OW 69
23511: ST_TO_ADDR
// if not tmp then
23512: LD_VAR 0 4
23516: NOT
23517: IFFALSE 23521
// exit ;
23519: GO 23580
// for i in tmp do
23521: LD_ADDR_VAR 0 2
23525: PUSH
23526: LD_VAR 0 4
23530: PUSH
23531: FOR_IN
23532: IFFALSE 23578
// for j = 1 to 3 do
23534: LD_ADDR_VAR 0 3
23538: PUSH
23539: DOUBLE
23540: LD_INT 1
23542: DEC
23543: ST_TO_ADDR
23544: LD_INT 3
23546: PUSH
23547: FOR_TO
23548: IFFALSE 23574
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23550: LD_VAR 0 2
23554: PPUSH
23555: CALL_OW 274
23559: PPUSH
23560: LD_VAR 0 3
23564: PPUSH
23565: LD_INT 99999
23567: PPUSH
23568: CALL_OW 277
23572: GO 23547
23574: POP
23575: POP
23576: GO 23531
23578: POP
23579: POP
// end ;
23580: LD_VAR 0 1
23584: RET
// export function hHackSetLevel10 ; var i , j ; begin
23585: LD_INT 0
23587: PPUSH
23588: PPUSH
23589: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23590: LD_ADDR_VAR 0 2
23594: PUSH
23595: LD_INT 21
23597: PUSH
23598: LD_INT 1
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PPUSH
23605: CALL_OW 69
23609: PUSH
23610: FOR_IN
23611: IFFALSE 23663
// if IsSelected ( i ) then
23613: LD_VAR 0 2
23617: PPUSH
23618: CALL_OW 306
23622: IFFALSE 23661
// begin for j := 1 to 4 do
23624: LD_ADDR_VAR 0 3
23628: PUSH
23629: DOUBLE
23630: LD_INT 1
23632: DEC
23633: ST_TO_ADDR
23634: LD_INT 4
23636: PUSH
23637: FOR_TO
23638: IFFALSE 23659
// SetSkill ( i , j , 10 ) ;
23640: LD_VAR 0 2
23644: PPUSH
23645: LD_VAR 0 3
23649: PPUSH
23650: LD_INT 10
23652: PPUSH
23653: CALL_OW 237
23657: GO 23637
23659: POP
23660: POP
// end ;
23661: GO 23610
23663: POP
23664: POP
// end ;
23665: LD_VAR 0 1
23669: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23670: LD_INT 0
23672: PPUSH
23673: PPUSH
23674: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23675: LD_ADDR_VAR 0 2
23679: PUSH
23680: LD_INT 22
23682: PUSH
23683: LD_OWVAR 2
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 21
23694: PUSH
23695: LD_INT 1
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PPUSH
23706: CALL_OW 69
23710: PUSH
23711: FOR_IN
23712: IFFALSE 23753
// begin for j := 1 to 4 do
23714: LD_ADDR_VAR 0 3
23718: PUSH
23719: DOUBLE
23720: LD_INT 1
23722: DEC
23723: ST_TO_ADDR
23724: LD_INT 4
23726: PUSH
23727: FOR_TO
23728: IFFALSE 23749
// SetSkill ( i , j , 10 ) ;
23730: LD_VAR 0 2
23734: PPUSH
23735: LD_VAR 0 3
23739: PPUSH
23740: LD_INT 10
23742: PPUSH
23743: CALL_OW 237
23747: GO 23727
23749: POP
23750: POP
// end ;
23751: GO 23711
23753: POP
23754: POP
// end ;
23755: LD_VAR 0 1
23759: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
23760: LD_INT 0
23762: PPUSH
// uc_side := your_side ;
23763: LD_ADDR_OWVAR 20
23767: PUSH
23768: LD_OWVAR 2
23772: ST_TO_ADDR
// uc_nation := nation ;
23773: LD_ADDR_OWVAR 21
23777: PUSH
23778: LD_VAR 0 1
23782: ST_TO_ADDR
// InitHc ;
23783: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23787: LD_INT 0
23789: PPUSH
23790: LD_VAR 0 2
23794: PPUSH
23795: LD_VAR 0 3
23799: PPUSH
23800: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
23804: LD_VAR 0 4
23808: PPUSH
23809: LD_VAR 0 5
23813: PPUSH
23814: CALL_OW 428
23818: PUSH
23819: LD_INT 0
23821: EQUAL
23822: IFFALSE 23846
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
23824: CALL_OW 44
23828: PPUSH
23829: LD_VAR 0 4
23833: PPUSH
23834: LD_VAR 0 5
23838: PPUSH
23839: LD_INT 1
23841: PPUSH
23842: CALL_OW 48
// end ;
23846: LD_VAR 0 6
23850: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
23851: LD_INT 0
23853: PPUSH
23854: PPUSH
// uc_side := your_side ;
23855: LD_ADDR_OWVAR 20
23859: PUSH
23860: LD_OWVAR 2
23864: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
23865: LD_VAR 0 1
23869: PUSH
23870: LD_INT 1
23872: PUSH
23873: LD_INT 2
23875: PUSH
23876: LD_INT 3
23878: PUSH
23879: LD_INT 4
23881: PUSH
23882: LD_INT 5
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: IN
23892: IFFALSE 23904
// uc_nation := nation_american else
23894: LD_ADDR_OWVAR 21
23898: PUSH
23899: LD_INT 1
23901: ST_TO_ADDR
23902: GO 23947
// if chassis in [ 11 , 12 , 13 , 14 ] then
23904: LD_VAR 0 1
23908: PUSH
23909: LD_INT 11
23911: PUSH
23912: LD_INT 12
23914: PUSH
23915: LD_INT 13
23917: PUSH
23918: LD_INT 14
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: IN
23927: IFFALSE 23939
// uc_nation := nation_arabian else
23929: LD_ADDR_OWVAR 21
23933: PUSH
23934: LD_INT 2
23936: ST_TO_ADDR
23937: GO 23947
// uc_nation := nation_russian ;
23939: LD_ADDR_OWVAR 21
23943: PUSH
23944: LD_INT 3
23946: ST_TO_ADDR
// vc_chassis := chassis ;
23947: LD_ADDR_OWVAR 37
23951: PUSH
23952: LD_VAR 0 1
23956: ST_TO_ADDR
// vc_engine := engine ;
23957: LD_ADDR_OWVAR 39
23961: PUSH
23962: LD_VAR 0 2
23966: ST_TO_ADDR
// vc_control := control ;
23967: LD_ADDR_OWVAR 38
23971: PUSH
23972: LD_VAR 0 3
23976: ST_TO_ADDR
// vc_weapon := weapon ;
23977: LD_ADDR_OWVAR 40
23981: PUSH
23982: LD_VAR 0 4
23986: ST_TO_ADDR
// un := CreateVehicle ;
23987: LD_ADDR_VAR 0 8
23991: PUSH
23992: CALL_OW 45
23996: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
23997: LD_VAR 0 8
24001: PPUSH
24002: LD_INT 0
24004: PPUSH
24005: LD_INT 5
24007: PPUSH
24008: CALL_OW 12
24012: PPUSH
24013: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24017: LD_VAR 0 8
24021: PPUSH
24022: LD_VAR 0 5
24026: PPUSH
24027: LD_VAR 0 6
24031: PPUSH
24032: LD_INT 1
24034: PPUSH
24035: CALL_OW 48
// end ;
24039: LD_VAR 0 7
24043: RET
// export hInvincible ; every 1 do
24044: GO 24046
24046: DISABLE
// hInvincible := [ ] ;
24047: LD_ADDR_EXP 80
24051: PUSH
24052: EMPTY
24053: ST_TO_ADDR
24054: END
// every 10 do var i ;
24055: GO 24057
24057: DISABLE
24058: LD_INT 0
24060: PPUSH
// begin enable ;
24061: ENABLE
// if not hInvincible then
24062: LD_EXP 80
24066: NOT
24067: IFFALSE 24071
// exit ;
24069: GO 24115
// for i in hInvincible do
24071: LD_ADDR_VAR 0 1
24075: PUSH
24076: LD_EXP 80
24080: PUSH
24081: FOR_IN
24082: IFFALSE 24113
// if GetLives ( i ) < 1000 then
24084: LD_VAR 0 1
24088: PPUSH
24089: CALL_OW 256
24093: PUSH
24094: LD_INT 1000
24096: LESS
24097: IFFALSE 24111
// SetLives ( i , 1000 ) ;
24099: LD_VAR 0 1
24103: PPUSH
24104: LD_INT 1000
24106: PPUSH
24107: CALL_OW 234
24111: GO 24081
24113: POP
24114: POP
// end ;
24115: PPOPN 1
24117: END
// export function hHackInvincible ; var i ; begin
24118: LD_INT 0
24120: PPUSH
24121: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24122: LD_ADDR_VAR 0 2
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: LD_INT 21
24132: PUSH
24133: LD_INT 1
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 21
24142: PUSH
24143: LD_INT 2
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: LIST
24154: PPUSH
24155: CALL_OW 69
24159: PUSH
24160: FOR_IN
24161: IFFALSE 24222
// if IsSelected ( i ) then
24163: LD_VAR 0 2
24167: PPUSH
24168: CALL_OW 306
24172: IFFALSE 24220
// begin if i in hInvincible then
24174: LD_VAR 0 2
24178: PUSH
24179: LD_EXP 80
24183: IN
24184: IFFALSE 24204
// hInvincible := hInvincible diff i else
24186: LD_ADDR_EXP 80
24190: PUSH
24191: LD_EXP 80
24195: PUSH
24196: LD_VAR 0 2
24200: DIFF
24201: ST_TO_ADDR
24202: GO 24220
// hInvincible := hInvincible union i ;
24204: LD_ADDR_EXP 80
24208: PUSH
24209: LD_EXP 80
24213: PUSH
24214: LD_VAR 0 2
24218: UNION
24219: ST_TO_ADDR
// end ;
24220: GO 24160
24222: POP
24223: POP
// end ;
24224: LD_VAR 0 1
24228: RET
// export function hHackInvisible ; var i , j ; begin
24229: LD_INT 0
24231: PPUSH
24232: PPUSH
24233: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24234: LD_ADDR_VAR 0 2
24238: PUSH
24239: LD_INT 21
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PPUSH
24249: CALL_OW 69
24253: PUSH
24254: FOR_IN
24255: IFFALSE 24279
// if IsSelected ( i ) then
24257: LD_VAR 0 2
24261: PPUSH
24262: CALL_OW 306
24266: IFFALSE 24277
// ComForceInvisible ( i ) ;
24268: LD_VAR 0 2
24272: PPUSH
24273: CALL_OW 496
24277: GO 24254
24279: POP
24280: POP
// end ;
24281: LD_VAR 0 1
24285: RET
// export function hHackChangeYourSide ; begin
24286: LD_INT 0
24288: PPUSH
// if your_side = 8 then
24289: LD_OWVAR 2
24293: PUSH
24294: LD_INT 8
24296: EQUAL
24297: IFFALSE 24309
// your_side := 0 else
24299: LD_ADDR_OWVAR 2
24303: PUSH
24304: LD_INT 0
24306: ST_TO_ADDR
24307: GO 24323
// your_side := your_side + 1 ;
24309: LD_ADDR_OWVAR 2
24313: PUSH
24314: LD_OWVAR 2
24318: PUSH
24319: LD_INT 1
24321: PLUS
24322: ST_TO_ADDR
// end ;
24323: LD_VAR 0 1
24327: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24328: LD_INT 0
24330: PPUSH
24331: PPUSH
24332: PPUSH
// for i in all_units do
24333: LD_ADDR_VAR 0 2
24337: PUSH
24338: LD_OWVAR 3
24342: PUSH
24343: FOR_IN
24344: IFFALSE 24422
// if IsSelected ( i ) then
24346: LD_VAR 0 2
24350: PPUSH
24351: CALL_OW 306
24355: IFFALSE 24420
// begin j := GetSide ( i ) ;
24357: LD_ADDR_VAR 0 3
24361: PUSH
24362: LD_VAR 0 2
24366: PPUSH
24367: CALL_OW 255
24371: ST_TO_ADDR
// if j = 8 then
24372: LD_VAR 0 3
24376: PUSH
24377: LD_INT 8
24379: EQUAL
24380: IFFALSE 24392
// j := 0 else
24382: LD_ADDR_VAR 0 3
24386: PUSH
24387: LD_INT 0
24389: ST_TO_ADDR
24390: GO 24406
// j := j + 1 ;
24392: LD_ADDR_VAR 0 3
24396: PUSH
24397: LD_VAR 0 3
24401: PUSH
24402: LD_INT 1
24404: PLUS
24405: ST_TO_ADDR
// SetSide ( i , j ) ;
24406: LD_VAR 0 2
24410: PPUSH
24411: LD_VAR 0 3
24415: PPUSH
24416: CALL_OW 235
// end ;
24420: GO 24343
24422: POP
24423: POP
// end ;
24424: LD_VAR 0 1
24428: RET
// export function hHackFog ; begin
24429: LD_INT 0
24431: PPUSH
// FogOff ( true ) ;
24432: LD_INT 1
24434: PPUSH
24435: CALL_OW 344
// end ;
24439: LD_VAR 0 1
24443: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24444: LD_INT 0
24446: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24447: LD_VAR 0 1
24451: PPUSH
24452: LD_VAR 0 2
24456: PPUSH
24457: LD_VAR 0 3
24461: PPUSH
24462: LD_INT 1
24464: PPUSH
24465: LD_INT 1
24467: PPUSH
24468: CALL_OW 483
// CenterOnXY ( x , y ) ;
24472: LD_VAR 0 2
24476: PPUSH
24477: LD_VAR 0 3
24481: PPUSH
24482: CALL_OW 84
// end ;
24486: LD_VAR 0 4
24490: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24491: LD_INT 0
24493: PPUSH
24494: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24495: LD_VAR 0 1
24499: NOT
24500: IFTRUE 24519
24502: PUSH
24503: LD_VAR 0 2
24507: PPUSH
24508: LD_VAR 0 3
24512: PPUSH
24513: CALL_OW 488
24517: NOT
24518: OR
24519: IFTRUE 24554
24521: PUSH
24522: LD_VAR 0 1
24526: PPUSH
24527: CALL_OW 266
24531: PUSH
24532: LD_INT 3
24534: NONEQUAL
24535: IFFALSE 24553
24537: PUSH
24538: LD_VAR 0 1
24542: PPUSH
24543: CALL_OW 247
24547: PUSH
24548: LD_INT 1
24550: EQUAL
24551: NOT
24552: AND
24553: OR
24554: IFFALSE 24558
// exit ;
24556: GO 24840
// if GetType ( factory ) = unit_human then
24558: LD_VAR 0 1
24562: PPUSH
24563: CALL_OW 247
24567: PUSH
24568: LD_INT 1
24570: EQUAL
24571: IFFALSE 24588
// factory := IsInUnit ( factory ) ;
24573: LD_ADDR_VAR 0 1
24577: PUSH
24578: LD_VAR 0 1
24582: PPUSH
24583: CALL_OW 310
24587: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
24588: LD_VAR 0 1
24592: PPUSH
24593: CALL_OW 266
24597: PUSH
24598: LD_INT 3
24600: NONEQUAL
24601: IFFALSE 24605
// exit ;
24603: GO 24840
// for i := 1 to Count ( factoryWaypoints ) do
24605: LD_ADDR_VAR 0 5
24609: PUSH
24610: DOUBLE
24611: LD_INT 1
24613: DEC
24614: ST_TO_ADDR
24615: LD_EXP 81
24619: PPUSH
24620: CALL 28170 0 1
24624: PUSH
24625: FOR_TO
24626: IFFALSE 24788
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
24628: LD_VAR 0 2
24632: PPUSH
24633: LD_VAR 0 3
24637: PPUSH
24638: CALL_OW 428
24642: PUSH
24643: LD_EXP 81
24647: PUSH
24648: LD_VAR 0 5
24652: ARRAY
24653: PUSH
24654: LD_INT 2
24656: ARRAY
24657: EQUAL
24658: IFFALSE 24690
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
24660: LD_ADDR_EXP 81
24664: PUSH
24665: LD_EXP 81
24669: PPUSH
24670: LD_VAR 0 5
24674: PPUSH
24675: CALL_OW 3
24679: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24680: CALL 24845 0 0
// exit ;
24684: POP
24685: POP
24686: GO 24840
// end else
24688: GO 24786
// if factory = factoryWaypoints [ i ] [ 2 ] then
24690: LD_VAR 0 1
24694: PUSH
24695: LD_EXP 81
24699: PUSH
24700: LD_VAR 0 5
24704: ARRAY
24705: PUSH
24706: LD_INT 2
24708: ARRAY
24709: EQUAL
24710: IFFALSE 24786
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
24712: LD_ADDR_EXP 81
24716: PUSH
24717: LD_EXP 81
24721: PPUSH
24722: LD_VAR 0 5
24726: PPUSH
24727: CALL_OW 3
24731: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
24732: LD_ADDR_EXP 81
24736: PUSH
24737: LD_EXP 81
24741: PPUSH
24742: LD_VAR 0 1
24746: PPUSH
24747: CALL_OW 255
24751: PUSH
24752: LD_VAR 0 1
24756: PUSH
24757: LD_VAR 0 2
24761: PUSH
24762: LD_VAR 0 3
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: PPUSH
24773: CALL 64146 0 2
24777: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24778: CALL 24845 0 0
// exit ;
24782: POP
24783: POP
24784: GO 24840
// end ; end ;
24786: GO 24625
24788: POP
24789: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
24790: LD_ADDR_EXP 81
24794: PUSH
24795: LD_EXP 81
24799: PPUSH
24800: LD_VAR 0 1
24804: PPUSH
24805: CALL_OW 255
24809: PUSH
24810: LD_VAR 0 1
24814: PUSH
24815: LD_VAR 0 2
24819: PUSH
24820: LD_VAR 0 3
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: PPUSH
24831: CALL 64146 0 2
24835: ST_TO_ADDR
// UpdateFactoryWaypoints ;
24836: CALL 24845 0 0
// end ;
24840: LD_VAR 0 4
24844: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
24845: LD_INT 0
24847: PPUSH
24848: PPUSH
24849: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
24850: LD_STRING resetFactoryWaypoint();
24852: PPUSH
24853: CALL_OW 559
// if factoryWaypoints then
24857: LD_EXP 81
24861: IFFALSE 24982
// begin list := factoryWaypoints ;
24863: LD_ADDR_VAR 0 3
24867: PUSH
24868: LD_EXP 81
24872: ST_TO_ADDR
// for i := 1 to list do
24873: LD_ADDR_VAR 0 2
24877: PUSH
24878: DOUBLE
24879: LD_INT 1
24881: DEC
24882: ST_TO_ADDR
24883: LD_VAR 0 3
24887: PUSH
24888: FOR_TO
24889: IFFALSE 24980
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24891: LD_STRING setFactoryWaypointXY(
24893: PUSH
24894: LD_VAR 0 3
24898: PUSH
24899: LD_VAR 0 2
24903: ARRAY
24904: PUSH
24905: LD_INT 1
24907: ARRAY
24908: STR
24909: PUSH
24910: LD_STRING ,
24912: STR
24913: PUSH
24914: LD_VAR 0 3
24918: PUSH
24919: LD_VAR 0 2
24923: ARRAY
24924: PUSH
24925: LD_INT 2
24927: ARRAY
24928: STR
24929: PUSH
24930: LD_STRING ,
24932: STR
24933: PUSH
24934: LD_VAR 0 3
24938: PUSH
24939: LD_VAR 0 2
24943: ARRAY
24944: PUSH
24945: LD_INT 3
24947: ARRAY
24948: STR
24949: PUSH
24950: LD_STRING ,
24952: STR
24953: PUSH
24954: LD_VAR 0 3
24958: PUSH
24959: LD_VAR 0 2
24963: ARRAY
24964: PUSH
24965: LD_INT 4
24967: ARRAY
24968: STR
24969: PUSH
24970: LD_STRING )
24972: STR
24973: PPUSH
24974: CALL_OW 559
24978: GO 24888
24980: POP
24981: POP
// end ; end ;
24982: LD_VAR 0 1
24986: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
24987: LD_INT 0
24989: PPUSH
// if HexInfo ( x , y ) = warehouse then
24990: LD_VAR 0 2
24994: PPUSH
24995: LD_VAR 0 3
24999: PPUSH
25000: CALL_OW 428
25004: PUSH
25005: LD_VAR 0 1
25009: EQUAL
25010: IFFALSE 25037
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25012: LD_ADDR_EXP 83
25016: PUSH
25017: LD_EXP 83
25021: PPUSH
25022: LD_VAR 0 1
25026: PPUSH
25027: LD_INT 0
25029: PPUSH
25030: CALL_OW 1
25034: ST_TO_ADDR
25035: GO 25088
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25037: LD_ADDR_EXP 83
25041: PUSH
25042: LD_EXP 83
25046: PPUSH
25047: LD_VAR 0 1
25051: PPUSH
25052: LD_VAR 0 1
25056: PPUSH
25057: CALL_OW 255
25061: PUSH
25062: LD_VAR 0 1
25066: PUSH
25067: LD_VAR 0 2
25071: PUSH
25072: LD_VAR 0 3
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: PPUSH
25083: CALL_OW 1
25087: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25088: CALL 25097 0 0
// end ;
25092: LD_VAR 0 4
25096: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25097: LD_INT 0
25099: PPUSH
25100: PPUSH
25101: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25102: LD_STRING resetWarehouseGatheringPoints();
25104: PPUSH
25105: CALL_OW 559
// if warehouseGatheringPoints then
25109: LD_EXP 83
25113: IFFALSE 25239
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25115: LD_ADDR_VAR 0 3
25119: PUSH
25120: LD_EXP 83
25124: PPUSH
25125: CALL 68080 0 1
25129: ST_TO_ADDR
// for i := 1 to list do
25130: LD_ADDR_VAR 0 2
25134: PUSH
25135: DOUBLE
25136: LD_INT 1
25138: DEC
25139: ST_TO_ADDR
25140: LD_VAR 0 3
25144: PUSH
25145: FOR_TO
25146: IFFALSE 25237
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25148: LD_STRING setWarehouseGatheringPointXY(
25150: PUSH
25151: LD_VAR 0 3
25155: PUSH
25156: LD_VAR 0 2
25160: ARRAY
25161: PUSH
25162: LD_INT 1
25164: ARRAY
25165: STR
25166: PUSH
25167: LD_STRING ,
25169: STR
25170: PUSH
25171: LD_VAR 0 3
25175: PUSH
25176: LD_VAR 0 2
25180: ARRAY
25181: PUSH
25182: LD_INT 2
25184: ARRAY
25185: STR
25186: PUSH
25187: LD_STRING ,
25189: STR
25190: PUSH
25191: LD_VAR 0 3
25195: PUSH
25196: LD_VAR 0 2
25200: ARRAY
25201: PUSH
25202: LD_INT 3
25204: ARRAY
25205: STR
25206: PUSH
25207: LD_STRING ,
25209: STR
25210: PUSH
25211: LD_VAR 0 3
25215: PUSH
25216: LD_VAR 0 2
25220: ARRAY
25221: PUSH
25222: LD_INT 4
25224: ARRAY
25225: STR
25226: PUSH
25227: LD_STRING )
25229: STR
25230: PPUSH
25231: CALL_OW 559
25235: GO 25145
25237: POP
25238: POP
// end ; end ;
25239: LD_VAR 0 1
25243: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25244: LD_EXP 83
25248: IFFALSE 25943
25250: GO 25252
25252: DISABLE
25253: LD_INT 0
25255: PPUSH
25256: PPUSH
25257: PPUSH
25258: PPUSH
25259: PPUSH
25260: PPUSH
25261: PPUSH
25262: PPUSH
25263: PPUSH
// begin enable ;
25264: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25265: LD_ADDR_VAR 0 3
25269: PUSH
25270: LD_EXP 83
25274: PPUSH
25275: CALL 68080 0 1
25279: ST_TO_ADDR
// if not list then
25280: LD_VAR 0 3
25284: NOT
25285: IFFALSE 25289
// exit ;
25287: GO 25943
// for i := 1 to list do
25289: LD_ADDR_VAR 0 1
25293: PUSH
25294: DOUBLE
25295: LD_INT 1
25297: DEC
25298: ST_TO_ADDR
25299: LD_VAR 0 3
25303: PUSH
25304: FOR_TO
25305: IFFALSE 25941
// begin depot := list [ i ] [ 2 ] ;
25307: LD_ADDR_VAR 0 8
25311: PUSH
25312: LD_VAR 0 3
25316: PUSH
25317: LD_VAR 0 1
25321: ARRAY
25322: PUSH
25323: LD_INT 2
25325: ARRAY
25326: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25327: LD_ADDR_VAR 0 5
25331: PUSH
25332: LD_VAR 0 3
25336: PUSH
25337: LD_VAR 0 1
25341: ARRAY
25342: PUSH
25343: LD_INT 1
25345: ARRAY
25346: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25347: LD_VAR 0 8
25351: PPUSH
25352: CALL_OW 301
25356: IFTRUE 25375
25358: PUSH
25359: LD_VAR 0 5
25363: PUSH
25364: LD_VAR 0 8
25368: PPUSH
25369: CALL_OW 255
25373: NONEQUAL
25374: OR
25375: IFFALSE 25404
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25377: LD_ADDR_EXP 83
25381: PUSH
25382: LD_EXP 83
25386: PPUSH
25387: LD_VAR 0 8
25391: PPUSH
25392: LD_INT 0
25394: PPUSH
25395: CALL_OW 1
25399: ST_TO_ADDR
// exit ;
25400: POP
25401: POP
25402: GO 25943
// end ; x := list [ i ] [ 3 ] ;
25404: LD_ADDR_VAR 0 6
25408: PUSH
25409: LD_VAR 0 3
25413: PUSH
25414: LD_VAR 0 1
25418: ARRAY
25419: PUSH
25420: LD_INT 3
25422: ARRAY
25423: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25424: LD_ADDR_VAR 0 7
25428: PUSH
25429: LD_VAR 0 3
25433: PUSH
25434: LD_VAR 0 1
25438: ARRAY
25439: PUSH
25440: LD_INT 4
25442: ARRAY
25443: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25444: LD_ADDR_VAR 0 9
25448: PUSH
25449: LD_VAR 0 6
25453: PPUSH
25454: LD_VAR 0 7
25458: PPUSH
25459: LD_INT 16
25461: PPUSH
25462: CALL 66654 0 3
25466: ST_TO_ADDR
// if not cratesNearbyPoint then
25467: LD_VAR 0 9
25471: NOT
25472: IFFALSE 25478
// exit ;
25474: POP
25475: POP
25476: GO 25943
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25478: LD_ADDR_VAR 0 4
25482: PUSH
25483: LD_INT 22
25485: PUSH
25486: LD_VAR 0 5
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 3
25497: PUSH
25498: LD_INT 60
25500: PUSH
25501: EMPTY
25502: LIST
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 91
25510: PUSH
25511: LD_VAR 0 8
25515: PUSH
25516: LD_INT 6
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 2
25526: PUSH
25527: LD_INT 25
25529: PUSH
25530: LD_INT 2
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 25
25539: PUSH
25540: LD_INT 16
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: LIST
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: PPUSH
25558: CALL_OW 69
25562: PUSH
25563: LD_VAR 0 8
25567: PPUSH
25568: CALL_OW 313
25572: PPUSH
25573: LD_INT 3
25575: PUSH
25576: LD_INT 60
25578: PUSH
25579: EMPTY
25580: LIST
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 2
25588: PUSH
25589: LD_INT 25
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 25
25601: PUSH
25602: LD_INT 16
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: LIST
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PPUSH
25618: CALL_OW 72
25622: UNION
25623: ST_TO_ADDR
// if tmp then
25624: LD_VAR 0 4
25628: IFFALSE 25708
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25630: LD_ADDR_VAR 0 4
25634: PUSH
25635: LD_VAR 0 4
25639: PPUSH
25640: LD_INT 3
25642: PPUSH
25643: CALL 64461 0 2
25647: ST_TO_ADDR
// for j in tmp do
25648: LD_ADDR_VAR 0 2
25652: PUSH
25653: LD_VAR 0 4
25657: PUSH
25658: FOR_IN
25659: IFFALSE 25702
// begin if IsInUnit ( j ) then
25661: LD_VAR 0 2
25665: PPUSH
25666: CALL_OW 310
25670: IFFALSE 25681
// ComExit ( j ) ;
25672: LD_VAR 0 2
25676: PPUSH
25677: CALL 64544 0 1
// AddComCollect ( j , x , y ) ;
25681: LD_VAR 0 2
25685: PPUSH
25686: LD_VAR 0 6
25690: PPUSH
25691: LD_VAR 0 7
25695: PPUSH
25696: CALL_OW 177
// end ;
25700: GO 25658
25702: POP
25703: POP
// exit ;
25704: POP
25705: POP
25706: GO 25943
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
25708: LD_ADDR_VAR 0 4
25712: PUSH
25713: LD_INT 22
25715: PUSH
25716: LD_VAR 0 5
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 91
25727: PUSH
25728: LD_VAR 0 8
25732: PUSH
25733: LD_INT 8
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 2
25743: PUSH
25744: LD_INT 34
25746: PUSH
25747: LD_INT 12
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 34
25756: PUSH
25757: LD_INT 51
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 34
25766: PUSH
25767: LD_INT 32
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 34
25776: PUSH
25777: LD_INT 89
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: LIST
25795: PPUSH
25796: CALL_OW 69
25800: ST_TO_ADDR
// if tmp then
25801: LD_VAR 0 4
25805: IFFALSE 25939
// begin for j in tmp do
25807: LD_ADDR_VAR 0 2
25811: PUSH
25812: LD_VAR 0 4
25816: PUSH
25817: FOR_IN
25818: IFFALSE 25937
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
25820: LD_VAR 0 2
25824: PPUSH
25825: CALL_OW 262
25829: PUSH
25830: LD_INT 3
25832: EQUAL
25833: IFTRUE 25850
25835: PUSH
25836: LD_VAR 0 2
25840: PPUSH
25841: CALL_OW 261
25845: PUSH
25846: LD_INT 20
25848: GREATER
25849: OR
25850: IFFALSE 25864
25852: PUSH
25853: LD_VAR 0 2
25857: PPUSH
25858: CALL_OW 314
25862: NOT
25863: AND
25864: IFFALSE 25894
25866: PUSH
25867: LD_VAR 0 2
25871: PPUSH
25872: CALL_OW 263
25876: PUSH
25877: LD_INT 1
25879: NONEQUAL
25880: IFTRUE 25893
25882: PUSH
25883: LD_VAR 0 2
25887: PPUSH
25888: CALL_OW 311
25892: OR
25893: AND
25894: IFFALSE 25935
// begin ComCollect ( j , x , y ) ;
25896: LD_VAR 0 2
25900: PPUSH
25901: LD_VAR 0 6
25905: PPUSH
25906: LD_VAR 0 7
25910: PPUSH
25911: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
25915: LD_VAR 0 2
25919: PPUSH
25920: LD_VAR 0 8
25924: PPUSH
25925: CALL_OW 172
// exit ;
25929: POP
25930: POP
25931: POP
25932: POP
25933: GO 25943
// end ;
25935: GO 25817
25937: POP
25938: POP
// end ; end ;
25939: GO 25304
25941: POP
25942: POP
// end ; end_of_file end_of_file
25943: PPOPN 9
25945: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25946: LD_INT 0
25948: PPUSH
25949: PPUSH
// if exist_mode then
25950: LD_VAR 0 2
25954: IFFALSE 26000
// begin unit := CreateCharacter ( prefix & ident ) ;
25956: LD_ADDR_VAR 0 5
25960: PUSH
25961: LD_VAR 0 3
25965: PUSH
25966: LD_VAR 0 1
25970: STR
25971: PPUSH
25972: CALL_OW 34
25976: ST_TO_ADDR
// if unit then
25977: LD_VAR 0 5
25981: IFFALSE 25998
// DeleteCharacters ( prefix & ident ) ;
25983: LD_VAR 0 3
25987: PUSH
25988: LD_VAR 0 1
25992: STR
25993: PPUSH
25994: CALL_OW 40
// end else
25998: GO 26015
// unit := NewCharacter ( ident ) ;
26000: LD_ADDR_VAR 0 5
26004: PUSH
26005: LD_VAR 0 1
26009: PPUSH
26010: CALL_OW 25
26014: ST_TO_ADDR
// result := unit ;
26015: LD_ADDR_VAR 0 4
26019: PUSH
26020: LD_VAR 0 5
26024: ST_TO_ADDR
// end ;
26025: LD_VAR 0 4
26029: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
26030: LD_INT 0
26032: PPUSH
26033: PPUSH
// if exist_mode then
26034: LD_VAR 0 2
26038: IFFALSE 26063
// unit := CreateCharacter ( prefix & ident ) else
26040: LD_ADDR_VAR 0 5
26044: PUSH
26045: LD_VAR 0 3
26049: PUSH
26050: LD_VAR 0 1
26054: STR
26055: PPUSH
26056: CALL_OW 34
26060: ST_TO_ADDR
26061: GO 26078
// unit := NewCharacter ( ident ) ;
26063: LD_ADDR_VAR 0 5
26067: PUSH
26068: LD_VAR 0 1
26072: PPUSH
26073: CALL_OW 25
26077: ST_TO_ADDR
// result := unit ;
26078: LD_ADDR_VAR 0 4
26082: PUSH
26083: LD_VAR 0 5
26087: ST_TO_ADDR
// end ;
26088: LD_VAR 0 4
26092: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26093: LD_INT 0
26095: PPUSH
26096: PPUSH
// if not side or not nation then
26097: LD_VAR 0 1
26101: NOT
26102: IFTRUE 26111
26104: PUSH
26105: LD_VAR 0 2
26109: NOT
26110: OR
26111: IFFALSE 26115
// exit ;
26113: GO 26909
// case nation of nation_american :
26115: LD_VAR 0 2
26119: PUSH
26120: LD_INT 1
26122: DOUBLE
26123: EQUAL
26124: IFTRUE 26128
26126: GO 26350
26128: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
26129: LD_ADDR_VAR 0 4
26133: PUSH
26134: LD_INT 35
26136: PUSH
26137: LD_INT 45
26139: PUSH
26140: LD_INT 46
26142: PUSH
26143: LD_INT 47
26145: PUSH
26146: LD_INT 82
26148: PUSH
26149: LD_INT 83
26151: PUSH
26152: LD_INT 84
26154: PUSH
26155: LD_INT 85
26157: PUSH
26158: LD_INT 86
26160: PUSH
26161: LD_INT 1
26163: PUSH
26164: LD_INT 2
26166: PUSH
26167: LD_INT 6
26169: PUSH
26170: LD_INT 15
26172: PUSH
26173: LD_INT 16
26175: PUSH
26176: LD_INT 7
26178: PUSH
26179: LD_INT 12
26181: PUSH
26182: LD_INT 13
26184: PUSH
26185: LD_INT 10
26187: PUSH
26188: LD_INT 14
26190: PUSH
26191: LD_INT 20
26193: PUSH
26194: LD_INT 21
26196: PUSH
26197: LD_INT 22
26199: PUSH
26200: LD_INT 25
26202: PUSH
26203: LD_INT 32
26205: PUSH
26206: LD_INT 27
26208: PUSH
26209: LD_INT 36
26211: PUSH
26212: LD_INT 69
26214: PUSH
26215: LD_INT 39
26217: PUSH
26218: LD_INT 34
26220: PUSH
26221: LD_INT 40
26223: PUSH
26224: LD_INT 48
26226: PUSH
26227: LD_INT 49
26229: PUSH
26230: LD_INT 50
26232: PUSH
26233: LD_INT 51
26235: PUSH
26236: LD_INT 52
26238: PUSH
26239: LD_INT 53
26241: PUSH
26242: LD_INT 54
26244: PUSH
26245: LD_INT 55
26247: PUSH
26248: LD_INT 56
26250: PUSH
26251: LD_INT 57
26253: PUSH
26254: LD_INT 58
26256: PUSH
26257: LD_INT 59
26259: PUSH
26260: LD_INT 60
26262: PUSH
26263: LD_INT 61
26265: PUSH
26266: LD_INT 62
26268: PUSH
26269: LD_INT 80
26271: PUSH
26272: LD_INT 82
26274: PUSH
26275: LD_INT 83
26277: PUSH
26278: LD_INT 84
26280: PUSH
26281: LD_INT 85
26283: PUSH
26284: LD_INT 86
26286: PUSH
26287: LD_INT 90
26289: PUSH
26290: LD_INT 93
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: ST_TO_ADDR
26348: GO 26831
26350: LD_INT 2
26352: DOUBLE
26353: EQUAL
26354: IFTRUE 26358
26356: GO 26592
26358: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
26359: LD_ADDR_VAR 0 4
26363: PUSH
26364: LD_INT 35
26366: PUSH
26367: LD_INT 45
26369: PUSH
26370: LD_INT 46
26372: PUSH
26373: LD_INT 47
26375: PUSH
26376: LD_INT 82
26378: PUSH
26379: LD_INT 83
26381: PUSH
26382: LD_INT 84
26384: PUSH
26385: LD_INT 85
26387: PUSH
26388: LD_INT 87
26390: PUSH
26391: LD_INT 70
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: LD_INT 11
26399: PUSH
26400: LD_INT 3
26402: PUSH
26403: LD_INT 4
26405: PUSH
26406: LD_INT 5
26408: PUSH
26409: LD_INT 6
26411: PUSH
26412: LD_INT 15
26414: PUSH
26415: LD_INT 18
26417: PUSH
26418: LD_INT 7
26420: PUSH
26421: LD_INT 17
26423: PUSH
26424: LD_INT 8
26426: PUSH
26427: LD_INT 20
26429: PUSH
26430: LD_INT 21
26432: PUSH
26433: LD_INT 22
26435: PUSH
26436: LD_INT 72
26438: PUSH
26439: LD_INT 26
26441: PUSH
26442: LD_INT 69
26444: PUSH
26445: LD_INT 39
26447: PUSH
26448: LD_INT 40
26450: PUSH
26451: LD_INT 41
26453: PUSH
26454: LD_INT 42
26456: PUSH
26457: LD_INT 43
26459: PUSH
26460: LD_INT 48
26462: PUSH
26463: LD_INT 49
26465: PUSH
26466: LD_INT 50
26468: PUSH
26469: LD_INT 51
26471: PUSH
26472: LD_INT 52
26474: PUSH
26475: LD_INT 53
26477: PUSH
26478: LD_INT 54
26480: PUSH
26481: LD_INT 55
26483: PUSH
26484: LD_INT 56
26486: PUSH
26487: LD_INT 60
26489: PUSH
26490: LD_INT 61
26492: PUSH
26493: LD_INT 62
26495: PUSH
26496: LD_INT 66
26498: PUSH
26499: LD_INT 67
26501: PUSH
26502: LD_INT 68
26504: PUSH
26505: LD_INT 81
26507: PUSH
26508: LD_INT 82
26510: PUSH
26511: LD_INT 83
26513: PUSH
26514: LD_INT 84
26516: PUSH
26517: LD_INT 85
26519: PUSH
26520: LD_INT 87
26522: PUSH
26523: LD_INT 88
26525: PUSH
26526: LD_INT 92
26528: PUSH
26529: LD_INT 94
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: ST_TO_ADDR
26590: GO 26831
26592: LD_INT 3
26594: DOUBLE
26595: EQUAL
26596: IFTRUE 26600
26598: GO 26830
26600: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
26601: LD_ADDR_VAR 0 4
26605: PUSH
26606: LD_INT 46
26608: PUSH
26609: LD_INT 47
26611: PUSH
26612: LD_INT 1
26614: PUSH
26615: LD_INT 2
26617: PUSH
26618: LD_INT 82
26620: PUSH
26621: LD_INT 83
26623: PUSH
26624: LD_INT 84
26626: PUSH
26627: LD_INT 85
26629: PUSH
26630: LD_INT 86
26632: PUSH
26633: LD_INT 11
26635: PUSH
26636: LD_INT 9
26638: PUSH
26639: LD_INT 20
26641: PUSH
26642: LD_INT 19
26644: PUSH
26645: LD_INT 21
26647: PUSH
26648: LD_INT 24
26650: PUSH
26651: LD_INT 22
26653: PUSH
26654: LD_INT 25
26656: PUSH
26657: LD_INT 28
26659: PUSH
26660: LD_INT 29
26662: PUSH
26663: LD_INT 30
26665: PUSH
26666: LD_INT 31
26668: PUSH
26669: LD_INT 37
26671: PUSH
26672: LD_INT 38
26674: PUSH
26675: LD_INT 32
26677: PUSH
26678: LD_INT 27
26680: PUSH
26681: LD_INT 33
26683: PUSH
26684: LD_INT 69
26686: PUSH
26687: LD_INT 39
26689: PUSH
26690: LD_INT 34
26692: PUSH
26693: LD_INT 40
26695: PUSH
26696: LD_INT 71
26698: PUSH
26699: LD_INT 23
26701: PUSH
26702: LD_INT 44
26704: PUSH
26705: LD_INT 48
26707: PUSH
26708: LD_INT 49
26710: PUSH
26711: LD_INT 50
26713: PUSH
26714: LD_INT 51
26716: PUSH
26717: LD_INT 52
26719: PUSH
26720: LD_INT 53
26722: PUSH
26723: LD_INT 54
26725: PUSH
26726: LD_INT 55
26728: PUSH
26729: LD_INT 56
26731: PUSH
26732: LD_INT 57
26734: PUSH
26735: LD_INT 58
26737: PUSH
26738: LD_INT 59
26740: PUSH
26741: LD_INT 63
26743: PUSH
26744: LD_INT 64
26746: PUSH
26747: LD_INT 65
26749: PUSH
26750: LD_INT 82
26752: PUSH
26753: LD_INT 83
26755: PUSH
26756: LD_INT 84
26758: PUSH
26759: LD_INT 85
26761: PUSH
26762: LD_INT 86
26764: PUSH
26765: LD_INT 89
26767: PUSH
26768: LD_INT 91
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: ST_TO_ADDR
26828: GO 26831
26830: POP
// if state > - 1 and state < 3 then
26831: LD_VAR 0 3
26835: PUSH
26836: LD_INT 1
26838: NEG
26839: GREATER
26840: IFFALSE 26852
26842: PUSH
26843: LD_VAR 0 3
26847: PUSH
26848: LD_INT 3
26850: LESS
26851: AND
26852: IFFALSE 26909
// for i in result do
26854: LD_ADDR_VAR 0 5
26858: PUSH
26859: LD_VAR 0 4
26863: PUSH
26864: FOR_IN
26865: IFFALSE 26907
// if GetTech ( i , side ) <> state then
26867: LD_VAR 0 5
26871: PPUSH
26872: LD_VAR 0 1
26876: PPUSH
26877: CALL_OW 321
26881: PUSH
26882: LD_VAR 0 3
26886: NONEQUAL
26887: IFFALSE 26905
// result := result diff i ;
26889: LD_ADDR_VAR 0 4
26893: PUSH
26894: LD_VAR 0 4
26898: PUSH
26899: LD_VAR 0 5
26903: DIFF
26904: ST_TO_ADDR
26905: GO 26864
26907: POP
26908: POP
// end ;
26909: LD_VAR 0 4
26913: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26914: LD_INT 0
26916: PPUSH
26917: PPUSH
26918: PPUSH
// result := true ;
26919: LD_ADDR_VAR 0 3
26923: PUSH
26924: LD_INT 1
26926: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26927: LD_ADDR_VAR 0 5
26931: PUSH
26932: LD_VAR 0 2
26936: PPUSH
26937: CALL_OW 480
26941: ST_TO_ADDR
// if not tmp then
26942: LD_VAR 0 5
26946: NOT
26947: IFFALSE 26951
// exit ;
26949: GO 27000
// for i in tmp do
26951: LD_ADDR_VAR 0 4
26955: PUSH
26956: LD_VAR 0 5
26960: PUSH
26961: FOR_IN
26962: IFFALSE 26998
// if GetTech ( i , side ) <> state_researched then
26964: LD_VAR 0 4
26968: PPUSH
26969: LD_VAR 0 1
26973: PPUSH
26974: CALL_OW 321
26978: PUSH
26979: LD_INT 2
26981: NONEQUAL
26982: IFFALSE 26996
// begin result := false ;
26984: LD_ADDR_VAR 0 3
26988: PUSH
26989: LD_INT 0
26991: ST_TO_ADDR
// exit ;
26992: POP
26993: POP
26994: GO 27000
// end ;
26996: GO 26961
26998: POP
26999: POP
// end ;
27000: LD_VAR 0 3
27004: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27005: LD_INT 0
27007: PPUSH
27008: PPUSH
27009: PPUSH
27010: PPUSH
27011: PPUSH
27012: PPUSH
27013: PPUSH
27014: PPUSH
27015: PPUSH
27016: PPUSH
27017: PPUSH
27018: PPUSH
27019: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27020: LD_VAR 0 1
27024: NOT
27025: IFTRUE 27042
27027: PUSH
27028: LD_VAR 0 1
27032: PPUSH
27033: CALL_OW 257
27037: PUSH
27038: LD_INT 9
27040: NONEQUAL
27041: OR
27042: IFFALSE 27046
// exit ;
27044: GO 27625
// side := GetSide ( unit ) ;
27046: LD_ADDR_VAR 0 9
27050: PUSH
27051: LD_VAR 0 1
27055: PPUSH
27056: CALL_OW 255
27060: ST_TO_ADDR
// tech_space := tech_spacanom ;
27061: LD_ADDR_VAR 0 12
27065: PUSH
27066: LD_INT 29
27068: ST_TO_ADDR
// tech_time := tech_taurad ;
27069: LD_ADDR_VAR 0 13
27073: PUSH
27074: LD_INT 28
27076: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27077: LD_ADDR_VAR 0 11
27081: PUSH
27082: LD_VAR 0 1
27086: PPUSH
27087: CALL_OW 310
27091: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27092: LD_VAR 0 11
27096: PPUSH
27097: CALL_OW 247
27101: PUSH
27102: LD_INT 2
27104: EQUAL
27105: IFFALSE 27109
// exit ;
27107: GO 27625
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27109: LD_ADDR_VAR 0 8
27113: PUSH
27114: LD_INT 81
27116: PUSH
27117: LD_VAR 0 9
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 3
27128: PUSH
27129: LD_INT 21
27131: PUSH
27132: LD_INT 3
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PPUSH
27147: CALL_OW 69
27151: ST_TO_ADDR
// if not tmp then
27152: LD_VAR 0 8
27156: NOT
27157: IFFALSE 27161
// exit ;
27159: GO 27625
// if in_unit then
27161: LD_VAR 0 11
27165: IFFALSE 27189
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27167: LD_ADDR_VAR 0 10
27171: PUSH
27172: LD_VAR 0 8
27176: PPUSH
27177: LD_VAR 0 11
27181: PPUSH
27182: CALL_OW 74
27186: ST_TO_ADDR
27187: GO 27209
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27189: LD_ADDR_VAR 0 10
27193: PUSH
27194: LD_VAR 0 8
27198: PPUSH
27199: LD_VAR 0 1
27203: PPUSH
27204: CALL_OW 74
27208: ST_TO_ADDR
// if not enemy then
27209: LD_VAR 0 10
27213: NOT
27214: IFFALSE 27218
// exit ;
27216: GO 27625
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27218: LD_VAR 0 11
27222: IFFALSE 27244
27224: PUSH
27225: LD_VAR 0 11
27229: PPUSH
27230: LD_VAR 0 10
27234: PPUSH
27235: CALL_OW 296
27239: PUSH
27240: LD_INT 13
27242: GREATER
27243: AND
27244: IFTRUE 27266
27246: PUSH
27247: LD_VAR 0 1
27251: PPUSH
27252: LD_VAR 0 10
27256: PPUSH
27257: CALL_OW 296
27261: PUSH
27262: LD_INT 12
27264: GREATER
27265: OR
27266: IFFALSE 27270
// exit ;
27268: GO 27625
// missile := [ 1 ] ;
27270: LD_ADDR_VAR 0 14
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: EMPTY
27279: LIST
27280: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27281: LD_VAR 0 9
27285: PPUSH
27286: LD_VAR 0 12
27290: PPUSH
27291: CALL_OW 325
27295: IFFALSE 27324
// missile := Replace ( missile , missile + 1 , 2 ) ;
27297: LD_ADDR_VAR 0 14
27301: PUSH
27302: LD_VAR 0 14
27306: PPUSH
27307: LD_VAR 0 14
27311: PUSH
27312: LD_INT 1
27314: PLUS
27315: PPUSH
27316: LD_INT 2
27318: PPUSH
27319: CALL_OW 1
27323: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27324: LD_VAR 0 9
27328: PPUSH
27329: LD_VAR 0 13
27333: PPUSH
27334: CALL_OW 325
27338: IFFALSE 27362
27340: PUSH
27341: LD_VAR 0 10
27345: PPUSH
27346: CALL_OW 255
27350: PPUSH
27351: LD_VAR 0 13
27355: PPUSH
27356: CALL_OW 325
27360: NOT
27361: AND
27362: IFFALSE 27391
// missile := Replace ( missile , missile + 1 , 3 ) ;
27364: LD_ADDR_VAR 0 14
27368: PUSH
27369: LD_VAR 0 14
27373: PPUSH
27374: LD_VAR 0 14
27378: PUSH
27379: LD_INT 1
27381: PLUS
27382: PPUSH
27383: LD_INT 3
27385: PPUSH
27386: CALL_OW 1
27390: ST_TO_ADDR
// if missile < 2 then
27391: LD_VAR 0 14
27395: PUSH
27396: LD_INT 2
27398: LESS
27399: IFFALSE 27403
// exit ;
27401: GO 27625
// x := GetX ( enemy ) ;
27403: LD_ADDR_VAR 0 4
27407: PUSH
27408: LD_VAR 0 10
27412: PPUSH
27413: CALL_OW 250
27417: ST_TO_ADDR
// y := GetY ( enemy ) ;
27418: LD_ADDR_VAR 0 5
27422: PUSH
27423: LD_VAR 0 10
27427: PPUSH
27428: CALL_OW 251
27432: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27433: LD_ADDR_VAR 0 6
27437: PUSH
27438: LD_VAR 0 4
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PPUSH
27447: LD_INT 1
27449: PPUSH
27450: CALL_OW 12
27454: PLUS
27455: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27456: LD_ADDR_VAR 0 7
27460: PUSH
27461: LD_VAR 0 5
27465: PUSH
27466: LD_INT 1
27468: NEG
27469: PPUSH
27470: LD_INT 1
27472: PPUSH
27473: CALL_OW 12
27477: PLUS
27478: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27479: LD_VAR 0 6
27483: PPUSH
27484: LD_VAR 0 7
27488: PPUSH
27489: CALL_OW 488
27493: NOT
27494: IFFALSE 27516
// begin _x := x ;
27496: LD_ADDR_VAR 0 6
27500: PUSH
27501: LD_VAR 0 4
27505: ST_TO_ADDR
// _y := y ;
27506: LD_ADDR_VAR 0 7
27510: PUSH
27511: LD_VAR 0 5
27515: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27516: LD_ADDR_VAR 0 3
27520: PUSH
27521: LD_INT 1
27523: PPUSH
27524: LD_VAR 0 14
27528: PPUSH
27529: CALL_OW 12
27533: ST_TO_ADDR
// case i of 1 :
27534: LD_VAR 0 3
27538: PUSH
27539: LD_INT 1
27541: DOUBLE
27542: EQUAL
27543: IFTRUE 27547
27545: GO 27564
27547: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27548: LD_VAR 0 1
27552: PPUSH
27553: LD_VAR 0 10
27557: PPUSH
27558: CALL_OW 115
27562: GO 27625
27564: LD_INT 2
27566: DOUBLE
27567: EQUAL
27568: IFTRUE 27572
27570: GO 27594
27572: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27573: LD_VAR 0 1
27577: PPUSH
27578: LD_VAR 0 6
27582: PPUSH
27583: LD_VAR 0 7
27587: PPUSH
27588: CALL_OW 153
27592: GO 27625
27594: LD_INT 3
27596: DOUBLE
27597: EQUAL
27598: IFTRUE 27602
27600: GO 27624
27602: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27603: LD_VAR 0 1
27607: PPUSH
27608: LD_VAR 0 6
27612: PPUSH
27613: LD_VAR 0 7
27617: PPUSH
27618: CALL_OW 154
27622: GO 27625
27624: POP
// end ;
27625: LD_VAR 0 2
27629: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27630: LD_INT 0
27632: PPUSH
27633: PPUSH
27634: PPUSH
27635: PPUSH
27636: PPUSH
27637: PPUSH
// if not unit or not building then
27638: LD_VAR 0 1
27642: NOT
27643: IFTRUE 27652
27645: PUSH
27646: LD_VAR 0 2
27650: NOT
27651: OR
27652: IFFALSE 27656
// exit ;
27654: GO 27814
// x := GetX ( building ) ;
27656: LD_ADDR_VAR 0 5
27660: PUSH
27661: LD_VAR 0 2
27665: PPUSH
27666: CALL_OW 250
27670: ST_TO_ADDR
// y := GetY ( building ) ;
27671: LD_ADDR_VAR 0 6
27675: PUSH
27676: LD_VAR 0 2
27680: PPUSH
27681: CALL_OW 251
27685: ST_TO_ADDR
// for i := 0 to 5 do
27686: LD_ADDR_VAR 0 4
27690: PUSH
27691: DOUBLE
27692: LD_INT 0
27694: DEC
27695: ST_TO_ADDR
27696: LD_INT 5
27698: PUSH
27699: FOR_TO
27700: IFFALSE 27812
// begin _x := ShiftX ( x , i , 3 ) ;
27702: LD_ADDR_VAR 0 7
27706: PUSH
27707: LD_VAR 0 5
27711: PPUSH
27712: LD_VAR 0 4
27716: PPUSH
27717: LD_INT 3
27719: PPUSH
27720: CALL_OW 272
27724: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27725: LD_ADDR_VAR 0 8
27729: PUSH
27730: LD_VAR 0 6
27734: PPUSH
27735: LD_VAR 0 4
27739: PPUSH
27740: LD_INT 3
27742: PPUSH
27743: CALL_OW 273
27747: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27748: LD_VAR 0 7
27752: PPUSH
27753: LD_VAR 0 8
27757: PPUSH
27758: CALL_OW 488
27762: NOT
27763: IFFALSE 27767
// continue ;
27765: GO 27699
// if HexInfo ( _x , _y ) = 0 then
27767: LD_VAR 0 7
27771: PPUSH
27772: LD_VAR 0 8
27776: PPUSH
27777: CALL_OW 428
27781: PUSH
27782: LD_INT 0
27784: EQUAL
27785: IFFALSE 27810
// begin ComMoveXY ( unit , _x , _y ) ;
27787: LD_VAR 0 1
27791: PPUSH
27792: LD_VAR 0 7
27796: PPUSH
27797: LD_VAR 0 8
27801: PPUSH
27802: CALL_OW 111
// exit ;
27806: POP
27807: POP
27808: GO 27814
// end ; end ;
27810: GO 27699
27812: POP
27813: POP
// end ;
27814: LD_VAR 0 3
27818: RET
// export function ScanBase ( side , base_area ) ; begin
27819: LD_INT 0
27821: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27822: LD_ADDR_VAR 0 3
27826: PUSH
27827: LD_VAR 0 2
27831: PPUSH
27832: LD_INT 81
27834: PUSH
27835: LD_VAR 0 1
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PPUSH
27844: CALL_OW 70
27848: ST_TO_ADDR
// end ;
27849: LD_VAR 0 3
27853: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27854: LD_INT 0
27856: PPUSH
27857: PPUSH
27858: PPUSH
27859: PPUSH
// result := false ;
27860: LD_ADDR_VAR 0 2
27864: PUSH
27865: LD_INT 0
27867: ST_TO_ADDR
// side := GetSide ( unit ) ;
27868: LD_ADDR_VAR 0 3
27872: PUSH
27873: LD_VAR 0 1
27877: PPUSH
27878: CALL_OW 255
27882: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27883: LD_ADDR_VAR 0 4
27887: PUSH
27888: LD_VAR 0 1
27892: PPUSH
27893: CALL_OW 248
27897: ST_TO_ADDR
// case nat of 1 :
27898: LD_VAR 0 4
27902: PUSH
27903: LD_INT 1
27905: DOUBLE
27906: EQUAL
27907: IFTRUE 27911
27909: GO 27922
27911: POP
// tech := tech_lassight ; 2 :
27912: LD_ADDR_VAR 0 5
27916: PUSH
27917: LD_INT 12
27919: ST_TO_ADDR
27920: GO 27961
27922: LD_INT 2
27924: DOUBLE
27925: EQUAL
27926: IFTRUE 27930
27928: GO 27941
27930: POP
// tech := tech_mortar ; 3 :
27931: LD_ADDR_VAR 0 5
27935: PUSH
27936: LD_INT 41
27938: ST_TO_ADDR
27939: GO 27961
27941: LD_INT 3
27943: DOUBLE
27944: EQUAL
27945: IFTRUE 27949
27947: GO 27960
27949: POP
// tech := tech_bazooka ; end ;
27950: LD_ADDR_VAR 0 5
27954: PUSH
27955: LD_INT 44
27957: ST_TO_ADDR
27958: GO 27961
27960: POP
// if Researched ( side , tech ) then
27961: LD_VAR 0 3
27965: PPUSH
27966: LD_VAR 0 5
27970: PPUSH
27971: CALL_OW 325
27975: IFFALSE 28002
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27977: LD_ADDR_VAR 0 2
27981: PUSH
27982: LD_INT 5
27984: PUSH
27985: LD_INT 8
27987: PUSH
27988: LD_INT 9
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: LIST
27995: PUSH
27996: LD_VAR 0 4
28000: ARRAY
28001: ST_TO_ADDR
// end ;
28002: LD_VAR 0 2
28006: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28007: LD_INT 0
28009: PPUSH
28010: PPUSH
28011: PPUSH
// if not mines then
28012: LD_VAR 0 2
28016: NOT
28017: IFFALSE 28021
// exit ;
28019: GO 28165
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28021: LD_ADDR_VAR 0 5
28025: PUSH
28026: LD_INT 81
28028: PUSH
28029: LD_VAR 0 1
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 3
28040: PUSH
28041: LD_INT 21
28043: PUSH
28044: LD_INT 3
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PPUSH
28059: CALL_OW 69
28063: ST_TO_ADDR
// for i in mines do
28064: LD_ADDR_VAR 0 4
28068: PUSH
28069: LD_VAR 0 2
28073: PUSH
28074: FOR_IN
28075: IFFALSE 28163
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28077: LD_VAR 0 4
28081: PUSH
28082: LD_INT 1
28084: ARRAY
28085: PPUSH
28086: LD_VAR 0 4
28090: PUSH
28091: LD_INT 2
28093: ARRAY
28094: PPUSH
28095: CALL_OW 458
28099: NOT
28100: IFFALSE 28104
// continue ;
28102: GO 28074
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28104: LD_VAR 0 4
28108: PUSH
28109: LD_INT 1
28111: ARRAY
28112: PPUSH
28113: LD_VAR 0 4
28117: PUSH
28118: LD_INT 2
28120: ARRAY
28121: PPUSH
28122: CALL_OW 428
28126: PUSH
28127: LD_VAR 0 5
28131: IN
28132: IFFALSE 28161
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28134: LD_VAR 0 4
28138: PUSH
28139: LD_INT 1
28141: ARRAY
28142: PPUSH
28143: LD_VAR 0 4
28147: PUSH
28148: LD_INT 2
28150: ARRAY
28151: PPUSH
28152: LD_VAR 0 1
28156: PPUSH
28157: CALL_OW 456
// end ;
28161: GO 28074
28163: POP
28164: POP
// end ;
28165: LD_VAR 0 3
28169: RET
// export function Count ( array ) ; begin
28170: LD_INT 0
28172: PPUSH
// result := array + 0 ;
28173: LD_ADDR_VAR 0 2
28177: PUSH
28178: LD_VAR 0 1
28182: PUSH
28183: LD_INT 0
28185: PLUS
28186: ST_TO_ADDR
// end ;
28187: LD_VAR 0 2
28191: RET
// export function IsEmpty ( building ) ; begin
28192: LD_INT 0
28194: PPUSH
// if not building then
28195: LD_VAR 0 1
28199: NOT
28200: IFFALSE 28204
// exit ;
28202: GO 28247
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28204: LD_ADDR_VAR 0 2
28208: PUSH
28209: LD_VAR 0 1
28213: PUSH
28214: LD_INT 22
28216: PUSH
28217: LD_VAR 0 1
28221: PPUSH
28222: CALL_OW 255
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 58
28233: PUSH
28234: EMPTY
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PPUSH
28241: CALL_OW 69
28245: IN
28246: ST_TO_ADDR
// end ;
28247: LD_VAR 0 2
28251: RET
// export function IsNotFull ( building ) ; var places ; begin
28252: LD_INT 0
28254: PPUSH
28255: PPUSH
// if not building then
28256: LD_VAR 0 1
28260: NOT
28261: IFFALSE 28265
// exit ;
28263: GO 28293
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28265: LD_ADDR_VAR 0 2
28269: PUSH
28270: LD_VAR 0 1
28274: PPUSH
28275: LD_INT 3
28277: PUSH
28278: LD_INT 62
28280: PUSH
28281: EMPTY
28282: LIST
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PPUSH
28288: CALL_OW 72
28292: ST_TO_ADDR
// end ;
28293: LD_VAR 0 2
28297: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28298: LD_INT 0
28300: PPUSH
28301: PPUSH
28302: PPUSH
28303: PPUSH
// tmp := [ ] ;
28304: LD_ADDR_VAR 0 3
28308: PUSH
28309: EMPTY
28310: ST_TO_ADDR
// list := [ ] ;
28311: LD_ADDR_VAR 0 5
28315: PUSH
28316: EMPTY
28317: ST_TO_ADDR
// for i = 16 to 25 do
28318: LD_ADDR_VAR 0 4
28322: PUSH
28323: DOUBLE
28324: LD_INT 16
28326: DEC
28327: ST_TO_ADDR
28328: LD_INT 25
28330: PUSH
28331: FOR_TO
28332: IFFALSE 28405
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28334: LD_ADDR_VAR 0 3
28338: PUSH
28339: LD_VAR 0 3
28343: PUSH
28344: LD_INT 22
28346: PUSH
28347: LD_VAR 0 1
28351: PPUSH
28352: CALL_OW 255
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 91
28363: PUSH
28364: LD_VAR 0 1
28368: PUSH
28369: LD_INT 6
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 30
28379: PUSH
28380: LD_VAR 0 4
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: LIST
28393: PUSH
28394: EMPTY
28395: LIST
28396: PPUSH
28397: CALL_OW 69
28401: ADD
28402: ST_TO_ADDR
28403: GO 28331
28405: POP
28406: POP
// for i = 1 to tmp do
28407: LD_ADDR_VAR 0 4
28411: PUSH
28412: DOUBLE
28413: LD_INT 1
28415: DEC
28416: ST_TO_ADDR
28417: LD_VAR 0 3
28421: PUSH
28422: FOR_TO
28423: IFFALSE 28511
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28425: LD_ADDR_VAR 0 5
28429: PUSH
28430: LD_VAR 0 5
28434: PUSH
28435: LD_VAR 0 3
28439: PUSH
28440: LD_VAR 0 4
28444: ARRAY
28445: PPUSH
28446: CALL_OW 266
28450: PUSH
28451: LD_VAR 0 3
28455: PUSH
28456: LD_VAR 0 4
28460: ARRAY
28461: PPUSH
28462: CALL_OW 250
28466: PUSH
28467: LD_VAR 0 3
28471: PUSH
28472: LD_VAR 0 4
28476: ARRAY
28477: PPUSH
28478: CALL_OW 251
28482: PUSH
28483: LD_VAR 0 3
28487: PUSH
28488: LD_VAR 0 4
28492: ARRAY
28493: PPUSH
28494: CALL_OW 254
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: PUSH
28505: EMPTY
28506: LIST
28507: ADD
28508: ST_TO_ADDR
28509: GO 28422
28511: POP
28512: POP
// result := list ;
28513: LD_ADDR_VAR 0 2
28517: PUSH
28518: LD_VAR 0 5
28522: ST_TO_ADDR
// end ;
28523: LD_VAR 0 2
28527: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28528: LD_INT 0
28530: PPUSH
28531: PPUSH
28532: PPUSH
28533: PPUSH
28534: PPUSH
28535: PPUSH
28536: PPUSH
// if not factory then
28537: LD_VAR 0 1
28541: NOT
28542: IFFALSE 28546
// exit ;
28544: GO 29149
// if control = control_apeman then
28546: LD_VAR 0 4
28550: PUSH
28551: LD_INT 5
28553: EQUAL
28554: IFFALSE 28663
// begin tmp := UnitsInside ( factory ) ;
28556: LD_ADDR_VAR 0 8
28560: PUSH
28561: LD_VAR 0 1
28565: PPUSH
28566: CALL_OW 313
28570: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28571: LD_VAR 0 8
28575: PPUSH
28576: LD_INT 25
28578: PUSH
28579: LD_INT 12
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PPUSH
28586: CALL_OW 72
28590: NOT
28591: IFFALSE 28601
// control := control_manual ;
28593: LD_ADDR_VAR 0 4
28597: PUSH
28598: LD_INT 1
28600: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28601: LD_ADDR_VAR 0 8
28605: PUSH
28606: LD_VAR 0 1
28610: PPUSH
28611: CALL 28298 0 1
28615: ST_TO_ADDR
// if tmp then
28616: LD_VAR 0 8
28620: IFFALSE 28663
// begin for i in tmp do
28622: LD_ADDR_VAR 0 7
28626: PUSH
28627: LD_VAR 0 8
28631: PUSH
28632: FOR_IN
28633: IFFALSE 28661
// if i [ 1 ] = b_ext_radio then
28635: LD_VAR 0 7
28639: PUSH
28640: LD_INT 1
28642: ARRAY
28643: PUSH
28644: LD_INT 22
28646: EQUAL
28647: IFFALSE 28659
// begin control := control_remote ;
28649: LD_ADDR_VAR 0 4
28653: PUSH
28654: LD_INT 2
28656: ST_TO_ADDR
// break ;
28657: GO 28661
// end ;
28659: GO 28632
28661: POP
28662: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28663: LD_VAR 0 1
28667: PPUSH
28668: LD_VAR 0 2
28672: PPUSH
28673: LD_VAR 0 3
28677: PPUSH
28678: LD_VAR 0 4
28682: PPUSH
28683: LD_VAR 0 5
28687: PPUSH
28688: CALL_OW 448
28692: IFFALSE 28727
// begin result := [ chassis , engine , control , weapon ] ;
28694: LD_ADDR_VAR 0 6
28698: PUSH
28699: LD_VAR 0 2
28703: PUSH
28704: LD_VAR 0 3
28708: PUSH
28709: LD_VAR 0 4
28713: PUSH
28714: LD_VAR 0 5
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: ST_TO_ADDR
// exit ;
28725: GO 29149
// end ; _chassis := AvailableChassisList ( factory ) ;
28727: LD_ADDR_VAR 0 9
28731: PUSH
28732: LD_VAR 0 1
28736: PPUSH
28737: CALL_OW 475
28741: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28742: LD_ADDR_VAR 0 11
28746: PUSH
28747: LD_VAR 0 1
28751: PPUSH
28752: CALL_OW 476
28756: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28757: LD_ADDR_VAR 0 12
28761: PUSH
28762: LD_VAR 0 1
28766: PPUSH
28767: CALL_OW 477
28771: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28772: LD_ADDR_VAR 0 10
28776: PUSH
28777: LD_VAR 0 1
28781: PPUSH
28782: CALL_OW 478
28786: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28787: LD_VAR 0 9
28791: NOT
28792: IFTRUE 28801
28794: PUSH
28795: LD_VAR 0 11
28799: NOT
28800: OR
28801: IFTRUE 28810
28803: PUSH
28804: LD_VAR 0 12
28808: NOT
28809: OR
28810: IFTRUE 28819
28812: PUSH
28813: LD_VAR 0 10
28817: NOT
28818: OR
28819: IFFALSE 28854
// begin result := [ chassis , engine , control , weapon ] ;
28821: LD_ADDR_VAR 0 6
28825: PUSH
28826: LD_VAR 0 2
28830: PUSH
28831: LD_VAR 0 3
28835: PUSH
28836: LD_VAR 0 4
28840: PUSH
28841: LD_VAR 0 5
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: ST_TO_ADDR
// exit ;
28852: GO 29149
// end ; if not chassis in _chassis then
28854: LD_VAR 0 2
28858: PUSH
28859: LD_VAR 0 9
28863: IN
28864: NOT
28865: IFFALSE 28891
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28867: LD_ADDR_VAR 0 2
28871: PUSH
28872: LD_VAR 0 9
28876: PUSH
28877: LD_INT 1
28879: PPUSH
28880: LD_VAR 0 9
28884: PPUSH
28885: CALL_OW 12
28889: ARRAY
28890: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28891: LD_VAR 0 2
28895: PPUSH
28896: LD_VAR 0 3
28900: PPUSH
28901: CALL 29154 0 2
28905: NOT
28906: IFFALSE 28967
// repeat engine := _engine [ 1 ] ;
28908: LD_ADDR_VAR 0 3
28912: PUSH
28913: LD_VAR 0 11
28917: PUSH
28918: LD_INT 1
28920: ARRAY
28921: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28922: LD_ADDR_VAR 0 11
28926: PUSH
28927: LD_VAR 0 11
28931: PPUSH
28932: LD_INT 1
28934: PPUSH
28935: CALL_OW 3
28939: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28940: LD_VAR 0 2
28944: PPUSH
28945: LD_VAR 0 3
28949: PPUSH
28950: CALL 29154 0 2
28954: IFTRUE 28965
28956: PUSH
28957: LD_VAR 0 11
28961: PUSH
28962: EMPTY
28963: EQUAL
28964: OR
28965: IFFALSE 28908
// if not control in _control then
28967: LD_VAR 0 4
28971: PUSH
28972: LD_VAR 0 12
28976: IN
28977: NOT
28978: IFFALSE 29004
// control := _control [ rand ( 1 , _control ) ] ;
28980: LD_ADDR_VAR 0 4
28984: PUSH
28985: LD_VAR 0 12
28989: PUSH
28990: LD_INT 1
28992: PPUSH
28993: LD_VAR 0 12
28997: PPUSH
28998: CALL_OW 12
29002: ARRAY
29003: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29004: LD_VAR 0 2
29008: PPUSH
29009: LD_VAR 0 5
29013: PPUSH
29014: CALL 29376 0 2
29018: NOT
29019: IFFALSE 29080
// repeat weapon := _weapon [ 1 ] ;
29021: LD_ADDR_VAR 0 5
29025: PUSH
29026: LD_VAR 0 10
29030: PUSH
29031: LD_INT 1
29033: ARRAY
29034: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29035: LD_ADDR_VAR 0 10
29039: PUSH
29040: LD_VAR 0 10
29044: PPUSH
29045: LD_INT 1
29047: PPUSH
29048: CALL_OW 3
29052: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29053: LD_VAR 0 2
29057: PPUSH
29058: LD_VAR 0 5
29062: PPUSH
29063: CALL 29376 0 2
29067: IFTRUE 29078
29069: PUSH
29070: LD_VAR 0 10
29074: PUSH
29075: EMPTY
29076: EQUAL
29077: OR
29078: IFFALSE 29021
// result := [ ] ;
29080: LD_ADDR_VAR 0 6
29084: PUSH
29085: EMPTY
29086: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29087: LD_VAR 0 1
29091: PPUSH
29092: LD_VAR 0 2
29096: PPUSH
29097: LD_VAR 0 3
29101: PPUSH
29102: LD_VAR 0 4
29106: PPUSH
29107: LD_VAR 0 5
29111: PPUSH
29112: CALL_OW 448
29116: IFFALSE 29149
// result := [ chassis , engine , control , weapon ] ;
29118: LD_ADDR_VAR 0 6
29122: PUSH
29123: LD_VAR 0 2
29127: PUSH
29128: LD_VAR 0 3
29132: PUSH
29133: LD_VAR 0 4
29137: PUSH
29138: LD_VAR 0 5
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: ST_TO_ADDR
// end ;
29149: LD_VAR 0 6
29153: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29154: LD_INT 0
29156: PPUSH
// if not chassis or not engine then
29157: LD_VAR 0 1
29161: NOT
29162: IFTRUE 29171
29164: PUSH
29165: LD_VAR 0 2
29169: NOT
29170: OR
29171: IFFALSE 29175
// exit ;
29173: GO 29371
// case engine of engine_solar :
29175: LD_VAR 0 2
29179: PUSH
29180: LD_INT 2
29182: DOUBLE
29183: EQUAL
29184: IFTRUE 29188
29186: GO 29226
29188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29189: LD_ADDR_VAR 0 3
29193: PUSH
29194: LD_INT 11
29196: PUSH
29197: LD_INT 12
29199: PUSH
29200: LD_INT 13
29202: PUSH
29203: LD_INT 14
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: LD_INT 2
29211: PUSH
29212: LD_INT 3
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: ST_TO_ADDR
29224: GO 29355
29226: LD_INT 1
29228: DOUBLE
29229: EQUAL
29230: IFTRUE 29234
29232: GO 29296
29234: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29235: LD_ADDR_VAR 0 3
29239: PUSH
29240: LD_INT 11
29242: PUSH
29243: LD_INT 12
29245: PUSH
29246: LD_INT 13
29248: PUSH
29249: LD_INT 14
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: LD_INT 2
29257: PUSH
29258: LD_INT 3
29260: PUSH
29261: LD_INT 4
29263: PUSH
29264: LD_INT 5
29266: PUSH
29267: LD_INT 21
29269: PUSH
29270: LD_INT 23
29272: PUSH
29273: LD_INT 22
29275: PUSH
29276: LD_INT 24
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: ST_TO_ADDR
29294: GO 29355
29296: LD_INT 3
29298: DOUBLE
29299: EQUAL
29300: IFTRUE 29304
29302: GO 29354
29304: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29305: LD_ADDR_VAR 0 3
29309: PUSH
29310: LD_INT 13
29312: PUSH
29313: LD_INT 14
29315: PUSH
29316: LD_INT 2
29318: PUSH
29319: LD_INT 3
29321: PUSH
29322: LD_INT 4
29324: PUSH
29325: LD_INT 5
29327: PUSH
29328: LD_INT 21
29330: PUSH
29331: LD_INT 22
29333: PUSH
29334: LD_INT 23
29336: PUSH
29337: LD_INT 24
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: ST_TO_ADDR
29352: GO 29355
29354: POP
// result := ( chassis in result ) ;
29355: LD_ADDR_VAR 0 3
29359: PUSH
29360: LD_VAR 0 1
29364: PUSH
29365: LD_VAR 0 3
29369: IN
29370: ST_TO_ADDR
// end ;
29371: LD_VAR 0 3
29375: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29376: LD_INT 0
29378: PPUSH
// if not chassis or not weapon then
29379: LD_VAR 0 1
29383: NOT
29384: IFTRUE 29393
29386: PUSH
29387: LD_VAR 0 2
29391: NOT
29392: OR
29393: IFFALSE 29397
// exit ;
29395: GO 30491
// case weapon of us_machine_gun :
29397: LD_VAR 0 2
29401: PUSH
29402: LD_INT 2
29404: DOUBLE
29405: EQUAL
29406: IFTRUE 29410
29408: GO 29440
29410: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29411: LD_ADDR_VAR 0 3
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: LD_INT 2
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: LD_INT 4
29427: PUSH
29428: LD_INT 5
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: ST_TO_ADDR
29438: GO 30475
29440: LD_INT 3
29442: DOUBLE
29443: EQUAL
29444: IFTRUE 29448
29446: GO 29478
29448: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29449: LD_ADDR_VAR 0 3
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: LD_INT 2
29459: PUSH
29460: LD_INT 3
29462: PUSH
29463: LD_INT 4
29465: PUSH
29466: LD_INT 5
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: ST_TO_ADDR
29476: GO 30475
29478: LD_INT 11
29480: DOUBLE
29481: EQUAL
29482: IFTRUE 29486
29484: GO 29516
29486: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29487: LD_ADDR_VAR 0 3
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: LD_INT 2
29497: PUSH
29498: LD_INT 3
29500: PUSH
29501: LD_INT 4
29503: PUSH
29504: LD_INT 5
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: ST_TO_ADDR
29514: GO 30475
29516: LD_INT 4
29518: DOUBLE
29519: EQUAL
29520: IFTRUE 29524
29522: GO 29550
29524: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29525: LD_ADDR_VAR 0 3
29529: PUSH
29530: LD_INT 2
29532: PUSH
29533: LD_INT 3
29535: PUSH
29536: LD_INT 4
29538: PUSH
29539: LD_INT 5
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: ST_TO_ADDR
29548: GO 30475
29550: LD_INT 5
29552: DOUBLE
29553: EQUAL
29554: IFTRUE 29558
29556: GO 29584
29558: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29559: LD_ADDR_VAR 0 3
29563: PUSH
29564: LD_INT 2
29566: PUSH
29567: LD_INT 3
29569: PUSH
29570: LD_INT 4
29572: PUSH
29573: LD_INT 5
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: ST_TO_ADDR
29582: GO 30475
29584: LD_INT 9
29586: DOUBLE
29587: EQUAL
29588: IFTRUE 29592
29590: GO 29618
29592: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29593: LD_ADDR_VAR 0 3
29597: PUSH
29598: LD_INT 2
29600: PUSH
29601: LD_INT 3
29603: PUSH
29604: LD_INT 4
29606: PUSH
29607: LD_INT 5
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: ST_TO_ADDR
29616: GO 30475
29618: LD_INT 7
29620: DOUBLE
29621: EQUAL
29622: IFTRUE 29626
29624: GO 29652
29626: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29627: LD_ADDR_VAR 0 3
29631: PUSH
29632: LD_INT 2
29634: PUSH
29635: LD_INT 3
29637: PUSH
29638: LD_INT 4
29640: PUSH
29641: LD_INT 5
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: ST_TO_ADDR
29650: GO 30475
29652: LD_INT 12
29654: DOUBLE
29655: EQUAL
29656: IFTRUE 29660
29658: GO 29686
29660: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29661: LD_ADDR_VAR 0 3
29665: PUSH
29666: LD_INT 2
29668: PUSH
29669: LD_INT 3
29671: PUSH
29672: LD_INT 4
29674: PUSH
29675: LD_INT 5
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: ST_TO_ADDR
29684: GO 30475
29686: LD_INT 13
29688: DOUBLE
29689: EQUAL
29690: IFTRUE 29694
29692: GO 29720
29694: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29695: LD_ADDR_VAR 0 3
29699: PUSH
29700: LD_INT 2
29702: PUSH
29703: LD_INT 3
29705: PUSH
29706: LD_INT 4
29708: PUSH
29709: LD_INT 5
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: ST_TO_ADDR
29718: GO 30475
29720: LD_INT 14
29722: DOUBLE
29723: EQUAL
29724: IFTRUE 29728
29726: GO 29746
29728: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29729: LD_ADDR_VAR 0 3
29733: PUSH
29734: LD_INT 4
29736: PUSH
29737: LD_INT 5
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: ST_TO_ADDR
29744: GO 30475
29746: LD_INT 6
29748: DOUBLE
29749: EQUAL
29750: IFTRUE 29754
29752: GO 29772
29754: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29755: LD_ADDR_VAR 0 3
29759: PUSH
29760: LD_INT 4
29762: PUSH
29763: LD_INT 5
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: ST_TO_ADDR
29770: GO 30475
29772: LD_INT 10
29774: DOUBLE
29775: EQUAL
29776: IFTRUE 29780
29778: GO 29798
29780: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29781: LD_ADDR_VAR 0 3
29785: PUSH
29786: LD_INT 4
29788: PUSH
29789: LD_INT 5
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: ST_TO_ADDR
29796: GO 30475
29798: LD_INT 22
29800: DOUBLE
29801: EQUAL
29802: IFTRUE 29806
29804: GO 29832
29806: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29807: LD_ADDR_VAR 0 3
29811: PUSH
29812: LD_INT 11
29814: PUSH
29815: LD_INT 12
29817: PUSH
29818: LD_INT 13
29820: PUSH
29821: LD_INT 14
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: ST_TO_ADDR
29830: GO 30475
29832: LD_INT 23
29834: DOUBLE
29835: EQUAL
29836: IFTRUE 29840
29838: GO 29866
29840: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29841: LD_ADDR_VAR 0 3
29845: PUSH
29846: LD_INT 11
29848: PUSH
29849: LD_INT 12
29851: PUSH
29852: LD_INT 13
29854: PUSH
29855: LD_INT 14
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: ST_TO_ADDR
29864: GO 30475
29866: LD_INT 24
29868: DOUBLE
29869: EQUAL
29870: IFTRUE 29874
29872: GO 29900
29874: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29875: LD_ADDR_VAR 0 3
29879: PUSH
29880: LD_INT 11
29882: PUSH
29883: LD_INT 12
29885: PUSH
29886: LD_INT 13
29888: PUSH
29889: LD_INT 14
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: ST_TO_ADDR
29898: GO 30475
29900: LD_INT 30
29902: DOUBLE
29903: EQUAL
29904: IFTRUE 29908
29906: GO 29934
29908: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29909: LD_ADDR_VAR 0 3
29913: PUSH
29914: LD_INT 11
29916: PUSH
29917: LD_INT 12
29919: PUSH
29920: LD_INT 13
29922: PUSH
29923: LD_INT 14
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: ST_TO_ADDR
29932: GO 30475
29934: LD_INT 25
29936: DOUBLE
29937: EQUAL
29938: IFTRUE 29942
29940: GO 29960
29942: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29943: LD_ADDR_VAR 0 3
29947: PUSH
29948: LD_INT 13
29950: PUSH
29951: LD_INT 14
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: ST_TO_ADDR
29958: GO 30475
29960: LD_INT 27
29962: DOUBLE
29963: EQUAL
29964: IFTRUE 29968
29966: GO 29986
29968: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29969: LD_ADDR_VAR 0 3
29973: PUSH
29974: LD_INT 13
29976: PUSH
29977: LD_INT 14
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: ST_TO_ADDR
29984: GO 30475
29986: LD_INT 92
29988: DOUBLE
29989: EQUAL
29990: IFTRUE 29994
29992: GO 30020
29994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29995: LD_ADDR_VAR 0 3
29999: PUSH
30000: LD_INT 11
30002: PUSH
30003: LD_INT 12
30005: PUSH
30006: LD_INT 13
30008: PUSH
30009: LD_INT 14
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: ST_TO_ADDR
30018: GO 30475
30020: LD_INT 28
30022: DOUBLE
30023: EQUAL
30024: IFTRUE 30028
30026: GO 30046
30028: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30029: LD_ADDR_VAR 0 3
30033: PUSH
30034: LD_INT 13
30036: PUSH
30037: LD_INT 14
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: ST_TO_ADDR
30044: GO 30475
30046: LD_INT 29
30048: DOUBLE
30049: EQUAL
30050: IFTRUE 30054
30052: GO 30072
30054: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30055: LD_ADDR_VAR 0 3
30059: PUSH
30060: LD_INT 13
30062: PUSH
30063: LD_INT 14
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: ST_TO_ADDR
30070: GO 30475
30072: LD_INT 31
30074: DOUBLE
30075: EQUAL
30076: IFTRUE 30080
30078: GO 30098
30080: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30081: LD_ADDR_VAR 0 3
30085: PUSH
30086: LD_INT 13
30088: PUSH
30089: LD_INT 14
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: ST_TO_ADDR
30096: GO 30475
30098: LD_INT 26
30100: DOUBLE
30101: EQUAL
30102: IFTRUE 30106
30104: GO 30124
30106: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30107: LD_ADDR_VAR 0 3
30111: PUSH
30112: LD_INT 13
30114: PUSH
30115: LD_INT 14
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: ST_TO_ADDR
30122: GO 30475
30124: LD_INT 42
30126: DOUBLE
30127: EQUAL
30128: IFTRUE 30132
30130: GO 30158
30132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30133: LD_ADDR_VAR 0 3
30137: PUSH
30138: LD_INT 21
30140: PUSH
30141: LD_INT 22
30143: PUSH
30144: LD_INT 23
30146: PUSH
30147: LD_INT 24
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: ST_TO_ADDR
30156: GO 30475
30158: LD_INT 43
30160: DOUBLE
30161: EQUAL
30162: IFTRUE 30166
30164: GO 30192
30166: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30167: LD_ADDR_VAR 0 3
30171: PUSH
30172: LD_INT 21
30174: PUSH
30175: LD_INT 22
30177: PUSH
30178: LD_INT 23
30180: PUSH
30181: LD_INT 24
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: ST_TO_ADDR
30190: GO 30475
30192: LD_INT 44
30194: DOUBLE
30195: EQUAL
30196: IFTRUE 30200
30198: GO 30226
30200: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30201: LD_ADDR_VAR 0 3
30205: PUSH
30206: LD_INT 21
30208: PUSH
30209: LD_INT 22
30211: PUSH
30212: LD_INT 23
30214: PUSH
30215: LD_INT 24
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: ST_TO_ADDR
30224: GO 30475
30226: LD_INT 45
30228: DOUBLE
30229: EQUAL
30230: IFTRUE 30234
30232: GO 30260
30234: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30235: LD_ADDR_VAR 0 3
30239: PUSH
30240: LD_INT 21
30242: PUSH
30243: LD_INT 22
30245: PUSH
30246: LD_INT 23
30248: PUSH
30249: LD_INT 24
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: ST_TO_ADDR
30258: GO 30475
30260: LD_INT 49
30262: DOUBLE
30263: EQUAL
30264: IFTRUE 30268
30266: GO 30294
30268: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30269: LD_ADDR_VAR 0 3
30273: PUSH
30274: LD_INT 21
30276: PUSH
30277: LD_INT 22
30279: PUSH
30280: LD_INT 23
30282: PUSH
30283: LD_INT 24
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: ST_TO_ADDR
30292: GO 30475
30294: LD_INT 51
30296: DOUBLE
30297: EQUAL
30298: IFTRUE 30302
30300: GO 30328
30302: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30303: LD_ADDR_VAR 0 3
30307: PUSH
30308: LD_INT 21
30310: PUSH
30311: LD_INT 22
30313: PUSH
30314: LD_INT 23
30316: PUSH
30317: LD_INT 24
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: ST_TO_ADDR
30326: GO 30475
30328: LD_INT 52
30330: DOUBLE
30331: EQUAL
30332: IFTRUE 30336
30334: GO 30362
30336: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30337: LD_ADDR_VAR 0 3
30341: PUSH
30342: LD_INT 21
30344: PUSH
30345: LD_INT 22
30347: PUSH
30348: LD_INT 23
30350: PUSH
30351: LD_INT 24
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: ST_TO_ADDR
30360: GO 30475
30362: LD_INT 53
30364: DOUBLE
30365: EQUAL
30366: IFTRUE 30370
30368: GO 30388
30370: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30371: LD_ADDR_VAR 0 3
30375: PUSH
30376: LD_INT 23
30378: PUSH
30379: LD_INT 24
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: ST_TO_ADDR
30386: GO 30475
30388: LD_INT 46
30390: DOUBLE
30391: EQUAL
30392: IFTRUE 30396
30394: GO 30414
30396: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30397: LD_ADDR_VAR 0 3
30401: PUSH
30402: LD_INT 23
30404: PUSH
30405: LD_INT 24
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: ST_TO_ADDR
30412: GO 30475
30414: LD_INT 47
30416: DOUBLE
30417: EQUAL
30418: IFTRUE 30422
30420: GO 30440
30422: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
30423: LD_ADDR_VAR 0 3
30427: PUSH
30428: LD_INT 23
30430: PUSH
30431: LD_INT 24
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: ST_TO_ADDR
30438: GO 30475
30440: LD_INT 98
30442: DOUBLE
30443: EQUAL
30444: IFTRUE 30448
30446: GO 30474
30448: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30449: LD_ADDR_VAR 0 3
30453: PUSH
30454: LD_INT 21
30456: PUSH
30457: LD_INT 22
30459: PUSH
30460: LD_INT 23
30462: PUSH
30463: LD_INT 24
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: ST_TO_ADDR
30472: GO 30475
30474: POP
// result := ( chassis in result ) ;
30475: LD_ADDR_VAR 0 3
30479: PUSH
30480: LD_VAR 0 1
30484: PUSH
30485: LD_VAR 0 3
30489: IN
30490: ST_TO_ADDR
// end ;
30491: LD_VAR 0 3
30495: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30496: LD_INT 0
30498: PPUSH
30499: PPUSH
30500: PPUSH
30501: PPUSH
30502: PPUSH
30503: PPUSH
30504: PPUSH
// result := array ;
30505: LD_ADDR_VAR 0 5
30509: PUSH
30510: LD_VAR 0 1
30514: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30515: LD_VAR 0 1
30519: NOT
30520: IFTRUE 30529
30522: PUSH
30523: LD_VAR 0 2
30527: NOT
30528: OR
30529: IFTRUE 30538
30531: PUSH
30532: LD_VAR 0 3
30536: NOT
30537: OR
30538: IFTRUE 30552
30540: PUSH
30541: LD_VAR 0 2
30545: PUSH
30546: LD_VAR 0 1
30550: GREATER
30551: OR
30552: IFTRUE 30566
30554: PUSH
30555: LD_VAR 0 3
30559: PUSH
30560: LD_VAR 0 1
30564: GREATER
30565: OR
30566: IFFALSE 30570
// exit ;
30568: GO 30866
// if direction then
30570: LD_VAR 0 4
30574: IFFALSE 30638
// begin d := 1 ;
30576: LD_ADDR_VAR 0 9
30580: PUSH
30581: LD_INT 1
30583: ST_TO_ADDR
// if i_from > i_to then
30584: LD_VAR 0 2
30588: PUSH
30589: LD_VAR 0 3
30593: GREATER
30594: IFFALSE 30620
// length := ( array - i_from ) + i_to else
30596: LD_ADDR_VAR 0 11
30600: PUSH
30601: LD_VAR 0 1
30605: PUSH
30606: LD_VAR 0 2
30610: MINUS
30611: PUSH
30612: LD_VAR 0 3
30616: PLUS
30617: ST_TO_ADDR
30618: GO 30636
// length := i_to - i_from ;
30620: LD_ADDR_VAR 0 11
30624: PUSH
30625: LD_VAR 0 3
30629: PUSH
30630: LD_VAR 0 2
30634: MINUS
30635: ST_TO_ADDR
// end else
30636: GO 30699
// begin d := - 1 ;
30638: LD_ADDR_VAR 0 9
30642: PUSH
30643: LD_INT 1
30645: NEG
30646: ST_TO_ADDR
// if i_from > i_to then
30647: LD_VAR 0 2
30651: PUSH
30652: LD_VAR 0 3
30656: GREATER
30657: IFFALSE 30677
// length := i_from - i_to else
30659: LD_ADDR_VAR 0 11
30663: PUSH
30664: LD_VAR 0 2
30668: PUSH
30669: LD_VAR 0 3
30673: MINUS
30674: ST_TO_ADDR
30675: GO 30699
// length := ( array - i_to ) + i_from ;
30677: LD_ADDR_VAR 0 11
30681: PUSH
30682: LD_VAR 0 1
30686: PUSH
30687: LD_VAR 0 3
30691: MINUS
30692: PUSH
30693: LD_VAR 0 2
30697: PLUS
30698: ST_TO_ADDR
// end ; if not length then
30699: LD_VAR 0 11
30703: NOT
30704: IFFALSE 30708
// exit ;
30706: GO 30866
// tmp := array ;
30708: LD_ADDR_VAR 0 10
30712: PUSH
30713: LD_VAR 0 1
30717: ST_TO_ADDR
// for i = 1 to length do
30718: LD_ADDR_VAR 0 6
30722: PUSH
30723: DOUBLE
30724: LD_INT 1
30726: DEC
30727: ST_TO_ADDR
30728: LD_VAR 0 11
30732: PUSH
30733: FOR_TO
30734: IFFALSE 30854
// begin for j = 1 to array do
30736: LD_ADDR_VAR 0 7
30740: PUSH
30741: DOUBLE
30742: LD_INT 1
30744: DEC
30745: ST_TO_ADDR
30746: LD_VAR 0 1
30750: PUSH
30751: FOR_TO
30752: IFFALSE 30840
// begin k := j + d ;
30754: LD_ADDR_VAR 0 8
30758: PUSH
30759: LD_VAR 0 7
30763: PUSH
30764: LD_VAR 0 9
30768: PLUS
30769: ST_TO_ADDR
// if k > array then
30770: LD_VAR 0 8
30774: PUSH
30775: LD_VAR 0 1
30779: GREATER
30780: IFFALSE 30790
// k := 1 ;
30782: LD_ADDR_VAR 0 8
30786: PUSH
30787: LD_INT 1
30789: ST_TO_ADDR
// if not k then
30790: LD_VAR 0 8
30794: NOT
30795: IFFALSE 30807
// k := array ;
30797: LD_ADDR_VAR 0 8
30801: PUSH
30802: LD_VAR 0 1
30806: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30807: LD_ADDR_VAR 0 10
30811: PUSH
30812: LD_VAR 0 10
30816: PPUSH
30817: LD_VAR 0 8
30821: PPUSH
30822: LD_VAR 0 1
30826: PUSH
30827: LD_VAR 0 7
30831: ARRAY
30832: PPUSH
30833: CALL_OW 1
30837: ST_TO_ADDR
// end ;
30838: GO 30751
30840: POP
30841: POP
// array := tmp ;
30842: LD_ADDR_VAR 0 1
30846: PUSH
30847: LD_VAR 0 10
30851: ST_TO_ADDR
// end ;
30852: GO 30733
30854: POP
30855: POP
// result := array ;
30856: LD_ADDR_VAR 0 5
30860: PUSH
30861: LD_VAR 0 1
30865: ST_TO_ADDR
// end ;
30866: LD_VAR 0 5
30870: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30871: LD_INT 0
30873: PPUSH
30874: PPUSH
// result := 0 ;
30875: LD_ADDR_VAR 0 3
30879: PUSH
30880: LD_INT 0
30882: ST_TO_ADDR
// if not array or not value in array then
30883: LD_VAR 0 1
30887: NOT
30888: IFTRUE 30903
30890: PUSH
30891: LD_VAR 0 2
30895: PUSH
30896: LD_VAR 0 1
30900: IN
30901: NOT
30902: OR
30903: IFFALSE 30907
// exit ;
30905: GO 30961
// for i = 1 to array do
30907: LD_ADDR_VAR 0 4
30911: PUSH
30912: DOUBLE
30913: LD_INT 1
30915: DEC
30916: ST_TO_ADDR
30917: LD_VAR 0 1
30921: PUSH
30922: FOR_TO
30923: IFFALSE 30959
// if value = array [ i ] then
30925: LD_VAR 0 2
30929: PUSH
30930: LD_VAR 0 1
30934: PUSH
30935: LD_VAR 0 4
30939: ARRAY
30940: EQUAL
30941: IFFALSE 30957
// begin result := i ;
30943: LD_ADDR_VAR 0 3
30947: PUSH
30948: LD_VAR 0 4
30952: ST_TO_ADDR
// exit ;
30953: POP
30954: POP
30955: GO 30961
// end ;
30957: GO 30922
30959: POP
30960: POP
// end ;
30961: LD_VAR 0 3
30965: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30966: LD_INT 0
30968: PPUSH
// vc_chassis := chassis ;
30969: LD_ADDR_OWVAR 37
30973: PUSH
30974: LD_VAR 0 1
30978: ST_TO_ADDR
// vc_engine := engine ;
30979: LD_ADDR_OWVAR 39
30983: PUSH
30984: LD_VAR 0 2
30988: ST_TO_ADDR
// vc_control := control ;
30989: LD_ADDR_OWVAR 38
30993: PUSH
30994: LD_VAR 0 3
30998: ST_TO_ADDR
// vc_weapon := weapon ;
30999: LD_ADDR_OWVAR 40
31003: PUSH
31004: LD_VAR 0 4
31008: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31009: LD_ADDR_OWVAR 41
31013: PUSH
31014: LD_VAR 0 5
31018: ST_TO_ADDR
// end ;
31019: LD_VAR 0 6
31023: RET
// export function WantPlant ( unit ) ; var task ; begin
31024: LD_INT 0
31026: PPUSH
31027: PPUSH
// result := false ;
31028: LD_ADDR_VAR 0 2
31032: PUSH
31033: LD_INT 0
31035: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31036: LD_ADDR_VAR 0 3
31040: PUSH
31041: LD_VAR 0 1
31045: PPUSH
31046: CALL_OW 437
31050: ST_TO_ADDR
// if task then
31051: LD_VAR 0 3
31055: IFFALSE 31083
// if task [ 1 ] [ 1 ] = p then
31057: LD_VAR 0 3
31061: PUSH
31062: LD_INT 1
31064: ARRAY
31065: PUSH
31066: LD_INT 1
31068: ARRAY
31069: PUSH
31070: LD_STRING p
31072: EQUAL
31073: IFFALSE 31083
// result := true ;
31075: LD_ADDR_VAR 0 2
31079: PUSH
31080: LD_INT 1
31082: ST_TO_ADDR
// end ;
31083: LD_VAR 0 2
31087: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31088: LD_INT 0
31090: PPUSH
31091: PPUSH
31092: PPUSH
31093: PPUSH
// if pos < 1 then
31094: LD_VAR 0 2
31098: PUSH
31099: LD_INT 1
31101: LESS
31102: IFFALSE 31106
// exit ;
31104: GO 31409
// if pos = 1 then
31106: LD_VAR 0 2
31110: PUSH
31111: LD_INT 1
31113: EQUAL
31114: IFFALSE 31147
// result := Replace ( arr , pos [ 1 ] , value ) else
31116: LD_ADDR_VAR 0 4
31120: PUSH
31121: LD_VAR 0 1
31125: PPUSH
31126: LD_VAR 0 2
31130: PUSH
31131: LD_INT 1
31133: ARRAY
31134: PPUSH
31135: LD_VAR 0 3
31139: PPUSH
31140: CALL_OW 1
31144: ST_TO_ADDR
31145: GO 31409
// begin tmp := arr ;
31147: LD_ADDR_VAR 0 6
31151: PUSH
31152: LD_VAR 0 1
31156: ST_TO_ADDR
// s_arr := [ tmp ] ;
31157: LD_ADDR_VAR 0 7
31161: PUSH
31162: LD_VAR 0 6
31166: PUSH
31167: EMPTY
31168: LIST
31169: ST_TO_ADDR
// for i = 1 to pos - 1 do
31170: LD_ADDR_VAR 0 5
31174: PUSH
31175: DOUBLE
31176: LD_INT 1
31178: DEC
31179: ST_TO_ADDR
31180: LD_VAR 0 2
31184: PUSH
31185: LD_INT 1
31187: MINUS
31188: PUSH
31189: FOR_TO
31190: IFFALSE 31235
// begin tmp := tmp [ pos [ i ] ] ;
31192: LD_ADDR_VAR 0 6
31196: PUSH
31197: LD_VAR 0 6
31201: PUSH
31202: LD_VAR 0 2
31206: PUSH
31207: LD_VAR 0 5
31211: ARRAY
31212: ARRAY
31213: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31214: LD_ADDR_VAR 0 7
31218: PUSH
31219: LD_VAR 0 7
31223: PUSH
31224: LD_VAR 0 6
31228: PUSH
31229: EMPTY
31230: LIST
31231: ADD
31232: ST_TO_ADDR
// end ;
31233: GO 31189
31235: POP
31236: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31237: LD_ADDR_VAR 0 6
31241: PUSH
31242: LD_VAR 0 6
31246: PPUSH
31247: LD_VAR 0 2
31251: PUSH
31252: LD_VAR 0 2
31256: ARRAY
31257: PPUSH
31258: LD_VAR 0 3
31262: PPUSH
31263: CALL_OW 1
31267: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31268: LD_ADDR_VAR 0 7
31272: PUSH
31273: LD_VAR 0 7
31277: PPUSH
31278: LD_VAR 0 7
31282: PPUSH
31283: LD_VAR 0 6
31287: PPUSH
31288: CALL_OW 1
31292: ST_TO_ADDR
// for i = s_arr downto 2 do
31293: LD_ADDR_VAR 0 5
31297: PUSH
31298: DOUBLE
31299: LD_VAR 0 7
31303: INC
31304: ST_TO_ADDR
31305: LD_INT 2
31307: PUSH
31308: FOR_DOWNTO
31309: IFFALSE 31393
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31311: LD_ADDR_VAR 0 6
31315: PUSH
31316: LD_VAR 0 7
31320: PUSH
31321: LD_VAR 0 5
31325: PUSH
31326: LD_INT 1
31328: MINUS
31329: ARRAY
31330: PPUSH
31331: LD_VAR 0 2
31335: PUSH
31336: LD_VAR 0 5
31340: PUSH
31341: LD_INT 1
31343: MINUS
31344: ARRAY
31345: PPUSH
31346: LD_VAR 0 7
31350: PUSH
31351: LD_VAR 0 5
31355: ARRAY
31356: PPUSH
31357: CALL_OW 1
31361: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31362: LD_ADDR_VAR 0 7
31366: PUSH
31367: LD_VAR 0 7
31371: PPUSH
31372: LD_VAR 0 5
31376: PUSH
31377: LD_INT 1
31379: MINUS
31380: PPUSH
31381: LD_VAR 0 6
31385: PPUSH
31386: CALL_OW 1
31390: ST_TO_ADDR
// end ;
31391: GO 31308
31393: POP
31394: POP
// result := s_arr [ 1 ] ;
31395: LD_ADDR_VAR 0 4
31399: PUSH
31400: LD_VAR 0 7
31404: PUSH
31405: LD_INT 1
31407: ARRAY
31408: ST_TO_ADDR
// end ; end ;
31409: LD_VAR 0 4
31413: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31414: LD_INT 0
31416: PPUSH
31417: PPUSH
// if not list then
31418: LD_VAR 0 1
31422: NOT
31423: IFFALSE 31427
// exit ;
31425: GO 31518
// i := list [ pos1 ] ;
31427: LD_ADDR_VAR 0 5
31431: PUSH
31432: LD_VAR 0 1
31436: PUSH
31437: LD_VAR 0 2
31441: ARRAY
31442: ST_TO_ADDR
// if not i then
31443: LD_VAR 0 5
31447: NOT
31448: IFFALSE 31452
// exit ;
31450: GO 31518
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31452: LD_ADDR_VAR 0 1
31456: PUSH
31457: LD_VAR 0 1
31461: PPUSH
31462: LD_VAR 0 2
31466: PPUSH
31467: LD_VAR 0 1
31471: PUSH
31472: LD_VAR 0 3
31476: ARRAY
31477: PPUSH
31478: CALL_OW 1
31482: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31483: LD_ADDR_VAR 0 1
31487: PUSH
31488: LD_VAR 0 1
31492: PPUSH
31493: LD_VAR 0 3
31497: PPUSH
31498: LD_VAR 0 5
31502: PPUSH
31503: CALL_OW 1
31507: ST_TO_ADDR
// result := list ;
31508: LD_ADDR_VAR 0 4
31512: PUSH
31513: LD_VAR 0 1
31517: ST_TO_ADDR
// end ;
31518: LD_VAR 0 4
31522: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31523: LD_INT 0
31525: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31526: LD_ADDR_VAR 0 5
31530: PUSH
31531: LD_VAR 0 1
31535: PPUSH
31536: CALL_OW 250
31540: PPUSH
31541: LD_VAR 0 1
31545: PPUSH
31546: CALL_OW 251
31550: PPUSH
31551: LD_VAR 0 2
31555: PPUSH
31556: LD_VAR 0 3
31560: PPUSH
31561: LD_VAR 0 4
31565: PPUSH
31566: CALL 31948 0 5
31570: ST_TO_ADDR
// end ;
31571: LD_VAR 0 5
31575: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
31576: LD_INT 0
31578: PPUSH
31579: PPUSH
31580: PPUSH
31581: PPUSH
// if not list or not unit then
31582: LD_VAR 0 2
31586: NOT
31587: IFTRUE 31596
31589: PUSH
31590: LD_VAR 0 1
31594: NOT
31595: OR
31596: IFFALSE 31600
// exit ;
31598: GO 31943
// result := [ ] ;
31600: LD_ADDR_VAR 0 5
31604: PUSH
31605: EMPTY
31606: ST_TO_ADDR
// for i in list do
31607: LD_ADDR_VAR 0 6
31611: PUSH
31612: LD_VAR 0 2
31616: PUSH
31617: FOR_IN
31618: IFFALSE 31836
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
31620: LD_ADDR_VAR 0 8
31624: PUSH
31625: LD_VAR 0 1
31629: PPUSH
31630: LD_VAR 0 6
31634: PUSH
31635: LD_INT 1
31637: ARRAY
31638: PPUSH
31639: LD_VAR 0 6
31643: PUSH
31644: LD_INT 2
31646: ARRAY
31647: PPUSH
31648: CALL_OW 297
31652: ST_TO_ADDR
// if not Count ( result ) then
31653: LD_VAR 0 5
31657: PPUSH
31658: CALL 28170 0 1
31662: NOT
31663: IFFALSE 31696
// begin result := Join ( result , [ i , tmp ] ) ;
31665: LD_ADDR_VAR 0 5
31669: PUSH
31670: LD_VAR 0 5
31674: PPUSH
31675: LD_VAR 0 6
31679: PUSH
31680: LD_VAR 0 8
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PPUSH
31689: CALL 64146 0 2
31693: ST_TO_ADDR
// continue ;
31694: GO 31617
// end ; if result [ result ] [ 2 ] <= tmp then
31696: LD_VAR 0 5
31700: PUSH
31701: LD_VAR 0 5
31705: ARRAY
31706: PUSH
31707: LD_INT 2
31709: ARRAY
31710: PUSH
31711: LD_VAR 0 8
31715: LESSEQUAL
31716: IFFALSE 31749
// result := Join ( result , [ i , tmp ] ) else
31718: LD_ADDR_VAR 0 5
31722: PUSH
31723: LD_VAR 0 5
31727: PPUSH
31728: LD_VAR 0 6
31732: PUSH
31733: LD_VAR 0 8
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PPUSH
31742: CALL 64146 0 2
31746: ST_TO_ADDR
31747: GO 31834
// begin for j := 1 to Count ( result ) do
31749: LD_ADDR_VAR 0 7
31753: PUSH
31754: DOUBLE
31755: LD_INT 1
31757: DEC
31758: ST_TO_ADDR
31759: LD_VAR 0 5
31763: PPUSH
31764: CALL 28170 0 1
31768: PUSH
31769: FOR_TO
31770: IFFALSE 31832
// begin if tmp < result [ j ] [ 2 ] then
31772: LD_VAR 0 8
31776: PUSH
31777: LD_VAR 0 5
31781: PUSH
31782: LD_VAR 0 7
31786: ARRAY
31787: PUSH
31788: LD_INT 2
31790: ARRAY
31791: LESS
31792: IFFALSE 31830
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31794: LD_ADDR_VAR 0 5
31798: PUSH
31799: LD_VAR 0 5
31803: PPUSH
31804: LD_VAR 0 7
31808: PPUSH
31809: LD_VAR 0 6
31813: PUSH
31814: LD_VAR 0 8
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: PPUSH
31823: CALL_OW 2
31827: ST_TO_ADDR
// break ;
31828: GO 31832
// end ; end ;
31830: GO 31769
31832: POP
31833: POP
// end ; end ;
31834: GO 31617
31836: POP
31837: POP
// if result and not asc then
31838: LD_VAR 0 5
31842: IFFALSE 31851
31844: PUSH
31845: LD_VAR 0 3
31849: NOT
31850: AND
31851: IFFALSE 31868
// result := ReverseArray ( result ) ;
31853: LD_ADDR_VAR 0 5
31857: PUSH
31858: LD_VAR 0 5
31862: PPUSH
31863: CALL 59226 0 1
31867: ST_TO_ADDR
// tmp := [ ] ;
31868: LD_ADDR_VAR 0 8
31872: PUSH
31873: EMPTY
31874: ST_TO_ADDR
// if mode then
31875: LD_VAR 0 4
31879: IFFALSE 31943
// begin for i := 1 to result do
31881: LD_ADDR_VAR 0 6
31885: PUSH
31886: DOUBLE
31887: LD_INT 1
31889: DEC
31890: ST_TO_ADDR
31891: LD_VAR 0 5
31895: PUSH
31896: FOR_TO
31897: IFFALSE 31931
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
31899: LD_ADDR_VAR 0 8
31903: PUSH
31904: LD_VAR 0 8
31908: PPUSH
31909: LD_VAR 0 5
31913: PUSH
31914: LD_VAR 0 6
31918: ARRAY
31919: PUSH
31920: LD_INT 1
31922: ARRAY
31923: PPUSH
31924: CALL 64146 0 2
31928: ST_TO_ADDR
31929: GO 31896
31931: POP
31932: POP
// result := tmp ;
31933: LD_ADDR_VAR 0 5
31937: PUSH
31938: LD_VAR 0 8
31942: ST_TO_ADDR
// end ; end ;
31943: LD_VAR 0 5
31947: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31948: LD_INT 0
31950: PPUSH
31951: PPUSH
31952: PPUSH
31953: PPUSH
// if not list then
31954: LD_VAR 0 3
31958: NOT
31959: IFFALSE 31963
// exit ;
31961: GO 32353
// result := [ ] ;
31963: LD_ADDR_VAR 0 6
31967: PUSH
31968: EMPTY
31969: ST_TO_ADDR
// for i in list do
31970: LD_ADDR_VAR 0 7
31974: PUSH
31975: LD_VAR 0 3
31979: PUSH
31980: FOR_IN
31981: IFFALSE 32183
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31983: LD_ADDR_VAR 0 9
31987: PUSH
31988: LD_VAR 0 7
31992: PPUSH
31993: LD_VAR 0 1
31997: PPUSH
31998: LD_VAR 0 2
32002: PPUSH
32003: CALL_OW 297
32007: ST_TO_ADDR
// if not result then
32008: LD_VAR 0 6
32012: NOT
32013: IFFALSE 32039
// result := [ [ i , tmp ] ] else
32015: LD_ADDR_VAR 0 6
32019: PUSH
32020: LD_VAR 0 7
32024: PUSH
32025: LD_VAR 0 9
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: EMPTY
32035: LIST
32036: ST_TO_ADDR
32037: GO 32181
// begin if result [ result ] [ 2 ] <= tmp then
32039: LD_VAR 0 6
32043: PUSH
32044: LD_VAR 0 6
32048: ARRAY
32049: PUSH
32050: LD_INT 2
32052: ARRAY
32053: PUSH
32054: LD_VAR 0 9
32058: LESSEQUAL
32059: IFFALSE 32101
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32061: LD_ADDR_VAR 0 6
32065: PUSH
32066: LD_VAR 0 6
32070: PPUSH
32071: LD_VAR 0 6
32075: PUSH
32076: LD_INT 1
32078: PLUS
32079: PPUSH
32080: LD_VAR 0 7
32084: PUSH
32085: LD_VAR 0 9
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PPUSH
32094: CALL_OW 2
32098: ST_TO_ADDR
32099: GO 32181
// for j := 1 to result do
32101: LD_ADDR_VAR 0 8
32105: PUSH
32106: DOUBLE
32107: LD_INT 1
32109: DEC
32110: ST_TO_ADDR
32111: LD_VAR 0 6
32115: PUSH
32116: FOR_TO
32117: IFFALSE 32179
// begin if tmp < result [ j ] [ 2 ] then
32119: LD_VAR 0 9
32123: PUSH
32124: LD_VAR 0 6
32128: PUSH
32129: LD_VAR 0 8
32133: ARRAY
32134: PUSH
32135: LD_INT 2
32137: ARRAY
32138: LESS
32139: IFFALSE 32177
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32141: LD_ADDR_VAR 0 6
32145: PUSH
32146: LD_VAR 0 6
32150: PPUSH
32151: LD_VAR 0 8
32155: PPUSH
32156: LD_VAR 0 7
32160: PUSH
32161: LD_VAR 0 9
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PPUSH
32170: CALL_OW 2
32174: ST_TO_ADDR
// break ;
32175: GO 32179
// end ; end ;
32177: GO 32116
32179: POP
32180: POP
// end ; end ;
32181: GO 31980
32183: POP
32184: POP
// if result and not asc then
32185: LD_VAR 0 6
32189: IFFALSE 32198
32191: PUSH
32192: LD_VAR 0 4
32196: NOT
32197: AND
32198: IFFALSE 32273
// begin tmp := result ;
32200: LD_ADDR_VAR 0 9
32204: PUSH
32205: LD_VAR 0 6
32209: ST_TO_ADDR
// for i = tmp downto 1 do
32210: LD_ADDR_VAR 0 7
32214: PUSH
32215: DOUBLE
32216: LD_VAR 0 9
32220: INC
32221: ST_TO_ADDR
32222: LD_INT 1
32224: PUSH
32225: FOR_DOWNTO
32226: IFFALSE 32271
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32228: LD_ADDR_VAR 0 6
32232: PUSH
32233: LD_VAR 0 6
32237: PPUSH
32238: LD_VAR 0 9
32242: PUSH
32243: LD_VAR 0 7
32247: MINUS
32248: PUSH
32249: LD_INT 1
32251: PLUS
32252: PPUSH
32253: LD_VAR 0 9
32257: PUSH
32258: LD_VAR 0 7
32262: ARRAY
32263: PPUSH
32264: CALL_OW 1
32268: ST_TO_ADDR
32269: GO 32225
32271: POP
32272: POP
// end ; tmp := [ ] ;
32273: LD_ADDR_VAR 0 9
32277: PUSH
32278: EMPTY
32279: ST_TO_ADDR
// if mode then
32280: LD_VAR 0 5
32284: IFFALSE 32353
// begin for i = 1 to result do
32286: LD_ADDR_VAR 0 7
32290: PUSH
32291: DOUBLE
32292: LD_INT 1
32294: DEC
32295: ST_TO_ADDR
32296: LD_VAR 0 6
32300: PUSH
32301: FOR_TO
32302: IFFALSE 32341
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32304: LD_ADDR_VAR 0 9
32308: PUSH
32309: LD_VAR 0 9
32313: PPUSH
32314: LD_VAR 0 7
32318: PPUSH
32319: LD_VAR 0 6
32323: PUSH
32324: LD_VAR 0 7
32328: ARRAY
32329: PUSH
32330: LD_INT 1
32332: ARRAY
32333: PPUSH
32334: CALL_OW 1
32338: ST_TO_ADDR
32339: GO 32301
32341: POP
32342: POP
// result := tmp ;
32343: LD_ADDR_VAR 0 6
32347: PUSH
32348: LD_VAR 0 9
32352: ST_TO_ADDR
// end ; end ;
32353: LD_VAR 0 6
32357: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32358: LD_INT 0
32360: PPUSH
32361: PPUSH
32362: PPUSH
32363: PPUSH
32364: PPUSH
32365: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32366: LD_ADDR_VAR 0 5
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: LD_INT 0
32379: PUSH
32380: EMPTY
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: ST_TO_ADDR
// if not x or not y then
32388: LD_VAR 0 2
32392: NOT
32393: IFTRUE 32402
32395: PUSH
32396: LD_VAR 0 3
32400: NOT
32401: OR
32402: IFFALSE 32406
// exit ;
32404: GO 34062
// if not range then
32406: LD_VAR 0 4
32410: NOT
32411: IFFALSE 32421
// range := 10 ;
32413: LD_ADDR_VAR 0 4
32417: PUSH
32418: LD_INT 10
32420: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32421: LD_ADDR_VAR 0 8
32425: PUSH
32426: LD_INT 81
32428: PUSH
32429: LD_VAR 0 1
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 92
32440: PUSH
32441: LD_VAR 0 2
32445: PUSH
32446: LD_VAR 0 3
32450: PUSH
32451: LD_VAR 0 4
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 3
32464: PUSH
32465: LD_INT 21
32467: PUSH
32468: LD_INT 3
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: LIST
32483: PPUSH
32484: CALL_OW 69
32488: ST_TO_ADDR
// if not tmp then
32489: LD_VAR 0 8
32493: NOT
32494: IFFALSE 32498
// exit ;
32496: GO 34062
// for i in tmp do
32498: LD_ADDR_VAR 0 6
32502: PUSH
32503: LD_VAR 0 8
32507: PUSH
32508: FOR_IN
32509: IFFALSE 34037
// begin points := [ 0 , 0 , 0 ] ;
32511: LD_ADDR_VAR 0 9
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: LIST
32529: ST_TO_ADDR
// bpoints := 1 ;
32530: LD_ADDR_VAR 0 10
32534: PUSH
32535: LD_INT 1
32537: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32538: LD_VAR 0 6
32542: PPUSH
32543: CALL_OW 247
32547: PUSH
32548: LD_INT 1
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32556
32554: GO 33138
32556: POP
// begin if GetClass ( i ) = 1 then
32557: LD_VAR 0 6
32561: PPUSH
32562: CALL_OW 257
32566: PUSH
32567: LD_INT 1
32569: EQUAL
32570: IFFALSE 32591
// points := [ 10 , 5 , 3 ] ;
32572: LD_ADDR_VAR 0 9
32576: PUSH
32577: LD_INT 10
32579: PUSH
32580: LD_INT 5
32582: PUSH
32583: LD_INT 3
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: LIST
32590: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32591: LD_VAR 0 6
32595: PPUSH
32596: CALL_OW 257
32600: PUSH
32601: LD_INT 2
32603: PUSH
32604: LD_INT 3
32606: PUSH
32607: LD_INT 4
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: IN
32615: IFFALSE 32636
// points := [ 3 , 2 , 1 ] ;
32617: LD_ADDR_VAR 0 9
32621: PUSH
32622: LD_INT 3
32624: PUSH
32625: LD_INT 2
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: LIST
32635: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32636: LD_VAR 0 6
32640: PPUSH
32641: CALL_OW 257
32645: PUSH
32646: LD_INT 5
32648: EQUAL
32649: IFFALSE 32670
// points := [ 130 , 5 , 2 ] ;
32651: LD_ADDR_VAR 0 9
32655: PUSH
32656: LD_INT 130
32658: PUSH
32659: LD_INT 5
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: LIST
32669: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32670: LD_VAR 0 6
32674: PPUSH
32675: CALL_OW 257
32679: PUSH
32680: LD_INT 8
32682: EQUAL
32683: IFFALSE 32704
// points := [ 35 , 35 , 30 ] ;
32685: LD_ADDR_VAR 0 9
32689: PUSH
32690: LD_INT 35
32692: PUSH
32693: LD_INT 35
32695: PUSH
32696: LD_INT 30
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: LIST
32703: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32704: LD_VAR 0 6
32708: PPUSH
32709: CALL_OW 257
32713: PUSH
32714: LD_INT 9
32716: EQUAL
32717: IFFALSE 32738
// points := [ 20 , 55 , 40 ] ;
32719: LD_ADDR_VAR 0 9
32723: PUSH
32724: LD_INT 20
32726: PUSH
32727: LD_INT 55
32729: PUSH
32730: LD_INT 40
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: LIST
32737: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32738: LD_VAR 0 6
32742: PPUSH
32743: CALL_OW 257
32747: PUSH
32748: LD_INT 12
32750: PUSH
32751: LD_INT 16
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: IN
32758: IFFALSE 32779
// points := [ 5 , 3 , 2 ] ;
32760: LD_ADDR_VAR 0 9
32764: PUSH
32765: LD_INT 5
32767: PUSH
32768: LD_INT 3
32770: PUSH
32771: LD_INT 2
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: LIST
32778: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32779: LD_VAR 0 6
32783: PPUSH
32784: CALL_OW 257
32788: PUSH
32789: LD_INT 17
32791: EQUAL
32792: IFFALSE 32813
// points := [ 100 , 50 , 75 ] ;
32794: LD_ADDR_VAR 0 9
32798: PUSH
32799: LD_INT 100
32801: PUSH
32802: LD_INT 50
32804: PUSH
32805: LD_INT 75
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: LIST
32812: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32813: LD_VAR 0 6
32817: PPUSH
32818: CALL_OW 257
32822: PUSH
32823: LD_INT 15
32825: EQUAL
32826: IFFALSE 32847
// points := [ 10 , 5 , 3 ] ;
32828: LD_ADDR_VAR 0 9
32832: PUSH
32833: LD_INT 10
32835: PUSH
32836: LD_INT 5
32838: PUSH
32839: LD_INT 3
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: LIST
32846: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32847: LD_VAR 0 6
32851: PPUSH
32852: CALL_OW 257
32856: PUSH
32857: LD_INT 14
32859: EQUAL
32860: IFFALSE 32881
// points := [ 10 , 0 , 0 ] ;
32862: LD_ADDR_VAR 0 9
32866: PUSH
32867: LD_INT 10
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: LD_INT 0
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: LIST
32880: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32881: LD_VAR 0 6
32885: PPUSH
32886: CALL_OW 257
32890: PUSH
32891: LD_INT 11
32893: EQUAL
32894: IFFALSE 32915
// points := [ 30 , 10 , 5 ] ;
32896: LD_ADDR_VAR 0 9
32900: PUSH
32901: LD_INT 30
32903: PUSH
32904: LD_INT 10
32906: PUSH
32907: LD_INT 5
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: LIST
32914: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32915: LD_VAR 0 1
32919: PPUSH
32920: LD_INT 5
32922: PPUSH
32923: CALL_OW 321
32927: PUSH
32928: LD_INT 2
32930: EQUAL
32931: IFFALSE 32948
// bpoints := bpoints * 1.8 ;
32933: LD_ADDR_VAR 0 10
32937: PUSH
32938: LD_VAR 0 10
32942: PUSH
32943: LD_REAL  1.80000000000000E+0000
32946: MUL
32947: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32948: LD_VAR 0 6
32952: PPUSH
32953: CALL_OW 257
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: LD_INT 2
32963: PUSH
32964: LD_INT 3
32966: PUSH
32967: LD_INT 4
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: IN
32976: IFFALSE 32996
32978: PUSH
32979: LD_VAR 0 1
32983: PPUSH
32984: LD_INT 51
32986: PPUSH
32987: CALL_OW 321
32991: PUSH
32992: LD_INT 2
32994: EQUAL
32995: AND
32996: IFFALSE 33013
// bpoints := bpoints * 1.2 ;
32998: LD_ADDR_VAR 0 10
33002: PUSH
33003: LD_VAR 0 10
33007: PUSH
33008: LD_REAL  1.20000000000000E+0000
33011: MUL
33012: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33013: LD_VAR 0 6
33017: PPUSH
33018: CALL_OW 257
33022: PUSH
33023: LD_INT 5
33025: PUSH
33026: LD_INT 7
33028: PUSH
33029: LD_INT 9
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: LIST
33036: IN
33037: IFFALSE 33057
33039: PUSH
33040: LD_VAR 0 1
33044: PPUSH
33045: LD_INT 52
33047: PPUSH
33048: CALL_OW 321
33052: PUSH
33053: LD_INT 2
33055: EQUAL
33056: AND
33057: IFFALSE 33074
// bpoints := bpoints * 1.5 ;
33059: LD_ADDR_VAR 0 10
33063: PUSH
33064: LD_VAR 0 10
33068: PUSH
33069: LD_REAL  1.50000000000000E+0000
33072: MUL
33073: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33074: LD_VAR 0 1
33078: PPUSH
33079: LD_INT 66
33081: PPUSH
33082: CALL_OW 321
33086: PUSH
33087: LD_INT 2
33089: EQUAL
33090: IFFALSE 33107
// bpoints := bpoints * 1.1 ;
33092: LD_ADDR_VAR 0 10
33096: PUSH
33097: LD_VAR 0 10
33101: PUSH
33102: LD_REAL  1.10000000000000E+0000
33105: MUL
33106: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33107: LD_ADDR_VAR 0 10
33111: PUSH
33112: LD_VAR 0 10
33116: PUSH
33117: LD_VAR 0 6
33121: PPUSH
33122: LD_INT 1
33124: PPUSH
33125: CALL_OW 259
33129: PUSH
33130: LD_REAL  1.15000000000000E+0000
33133: MUL
33134: MUL
33135: ST_TO_ADDR
// end ; unit_vehicle :
33136: GO 33966
33138: LD_INT 2
33140: DOUBLE
33141: EQUAL
33142: IFTRUE 33146
33144: GO 33954
33146: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33147: LD_VAR 0 6
33151: PPUSH
33152: CALL_OW 264
33156: PUSH
33157: LD_INT 2
33159: PUSH
33160: LD_INT 42
33162: PUSH
33163: LD_INT 24
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: LIST
33170: IN
33171: IFFALSE 33192
// points := [ 25 , 5 , 3 ] ;
33173: LD_ADDR_VAR 0 9
33177: PUSH
33178: LD_INT 25
33180: PUSH
33181: LD_INT 5
33183: PUSH
33184: LD_INT 3
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: LIST
33191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33192: LD_VAR 0 6
33196: PPUSH
33197: CALL_OW 264
33201: PUSH
33202: LD_INT 4
33204: PUSH
33205: LD_INT 43
33207: PUSH
33208: LD_INT 25
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: LIST
33215: IN
33216: IFFALSE 33237
// points := [ 40 , 15 , 5 ] ;
33218: LD_ADDR_VAR 0 9
33222: PUSH
33223: LD_INT 40
33225: PUSH
33226: LD_INT 15
33228: PUSH
33229: LD_INT 5
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: LIST
33236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33237: LD_VAR 0 6
33241: PPUSH
33242: CALL_OW 264
33246: PUSH
33247: LD_INT 3
33249: PUSH
33250: LD_INT 23
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: IN
33257: IFFALSE 33278
// points := [ 7 , 25 , 8 ] ;
33259: LD_ADDR_VAR 0 9
33263: PUSH
33264: LD_INT 7
33266: PUSH
33267: LD_INT 25
33269: PUSH
33270: LD_INT 8
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: LIST
33277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33278: LD_VAR 0 6
33282: PPUSH
33283: CALL_OW 264
33287: PUSH
33288: LD_INT 5
33290: PUSH
33291: LD_INT 27
33293: PUSH
33294: LD_INT 44
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: LIST
33301: IN
33302: IFFALSE 33323
// points := [ 14 , 50 , 16 ] ;
33304: LD_ADDR_VAR 0 9
33308: PUSH
33309: LD_INT 14
33311: PUSH
33312: LD_INT 50
33314: PUSH
33315: LD_INT 16
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: LIST
33322: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33323: LD_VAR 0 6
33327: PPUSH
33328: CALL_OW 264
33332: PUSH
33333: LD_INT 6
33335: PUSH
33336: LD_INT 46
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: IN
33343: IFFALSE 33364
// points := [ 32 , 120 , 70 ] ;
33345: LD_ADDR_VAR 0 9
33349: PUSH
33350: LD_INT 32
33352: PUSH
33353: LD_INT 120
33355: PUSH
33356: LD_INT 70
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: LIST
33363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33364: LD_VAR 0 6
33368: PPUSH
33369: CALL_OW 264
33373: PUSH
33374: LD_INT 7
33376: PUSH
33377: LD_INT 28
33379: PUSH
33380: LD_INT 45
33382: PUSH
33383: LD_INT 92
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: IN
33392: IFFALSE 33413
// points := [ 35 , 20 , 45 ] ;
33394: LD_ADDR_VAR 0 9
33398: PUSH
33399: LD_INT 35
33401: PUSH
33402: LD_INT 20
33404: PUSH
33405: LD_INT 45
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: LIST
33412: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33413: LD_VAR 0 6
33417: PPUSH
33418: CALL_OW 264
33422: PUSH
33423: LD_INT 47
33425: PUSH
33426: EMPTY
33427: LIST
33428: IN
33429: IFFALSE 33450
// points := [ 67 , 45 , 75 ] ;
33431: LD_ADDR_VAR 0 9
33435: PUSH
33436: LD_INT 67
33438: PUSH
33439: LD_INT 45
33441: PUSH
33442: LD_INT 75
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: LIST
33449: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33450: LD_VAR 0 6
33454: PPUSH
33455: CALL_OW 264
33459: PUSH
33460: LD_INT 26
33462: PUSH
33463: EMPTY
33464: LIST
33465: IN
33466: IFFALSE 33487
// points := [ 120 , 30 , 80 ] ;
33468: LD_ADDR_VAR 0 9
33472: PUSH
33473: LD_INT 120
33475: PUSH
33476: LD_INT 30
33478: PUSH
33479: LD_INT 80
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: LIST
33486: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33487: LD_VAR 0 6
33491: PPUSH
33492: CALL_OW 264
33496: PUSH
33497: LD_INT 22
33499: PUSH
33500: EMPTY
33501: LIST
33502: IN
33503: IFFALSE 33524
// points := [ 40 , 1 , 1 ] ;
33505: LD_ADDR_VAR 0 9
33509: PUSH
33510: LD_INT 40
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: LD_INT 1
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: LIST
33523: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33524: LD_VAR 0 6
33528: PPUSH
33529: CALL_OW 264
33533: PUSH
33534: LD_INT 29
33536: PUSH
33537: EMPTY
33538: LIST
33539: IN
33540: IFFALSE 33561
// points := [ 70 , 200 , 400 ] ;
33542: LD_ADDR_VAR 0 9
33546: PUSH
33547: LD_INT 70
33549: PUSH
33550: LD_INT 200
33552: PUSH
33553: LD_INT 400
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: LIST
33560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33561: LD_VAR 0 6
33565: PPUSH
33566: CALL_OW 264
33570: PUSH
33571: LD_INT 14
33573: PUSH
33574: LD_INT 53
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: IN
33581: IFFALSE 33602
// points := [ 40 , 10 , 20 ] ;
33583: LD_ADDR_VAR 0 9
33587: PUSH
33588: LD_INT 40
33590: PUSH
33591: LD_INT 10
33593: PUSH
33594: LD_INT 20
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: LIST
33601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33602: LD_VAR 0 6
33606: PPUSH
33607: CALL_OW 264
33611: PUSH
33612: LD_INT 9
33614: PUSH
33615: EMPTY
33616: LIST
33617: IN
33618: IFFALSE 33639
// points := [ 5 , 70 , 20 ] ;
33620: LD_ADDR_VAR 0 9
33624: PUSH
33625: LD_INT 5
33627: PUSH
33628: LD_INT 70
33630: PUSH
33631: LD_INT 20
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33639: LD_VAR 0 6
33643: PPUSH
33644: CALL_OW 264
33648: PUSH
33649: LD_INT 10
33651: PUSH
33652: EMPTY
33653: LIST
33654: IN
33655: IFFALSE 33676
// points := [ 35 , 110 , 70 ] ;
33657: LD_ADDR_VAR 0 9
33661: PUSH
33662: LD_INT 35
33664: PUSH
33665: LD_INT 110
33667: PUSH
33668: LD_INT 70
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33676: LD_VAR 0 6
33680: PPUSH
33681: CALL_OW 265
33685: PUSH
33686: LD_INT 25
33688: EQUAL
33689: IFFALSE 33710
// points := [ 80 , 65 , 100 ] ;
33691: LD_ADDR_VAR 0 9
33695: PUSH
33696: LD_INT 80
33698: PUSH
33699: LD_INT 65
33701: PUSH
33702: LD_INT 100
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: LIST
33709: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33710: LD_VAR 0 6
33714: PPUSH
33715: CALL_OW 263
33719: PUSH
33720: LD_INT 1
33722: EQUAL
33723: IFFALSE 33758
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33725: LD_ADDR_VAR 0 10
33729: PUSH
33730: LD_VAR 0 10
33734: PUSH
33735: LD_VAR 0 6
33739: PPUSH
33740: CALL_OW 311
33744: PPUSH
33745: LD_INT 3
33747: PPUSH
33748: CALL_OW 259
33752: PUSH
33753: LD_INT 4
33755: MUL
33756: MUL
33757: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33758: LD_VAR 0 6
33762: PPUSH
33763: CALL_OW 263
33767: PUSH
33768: LD_INT 2
33770: EQUAL
33771: IFFALSE 33822
// begin j := IsControledBy ( i ) ;
33773: LD_ADDR_VAR 0 7
33777: PUSH
33778: LD_VAR 0 6
33782: PPUSH
33783: CALL_OW 312
33787: ST_TO_ADDR
// if j then
33788: LD_VAR 0 7
33792: IFFALSE 33822
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33794: LD_ADDR_VAR 0 10
33798: PUSH
33799: LD_VAR 0 10
33803: PUSH
33804: LD_VAR 0 7
33808: PPUSH
33809: LD_INT 3
33811: PPUSH
33812: CALL_OW 259
33816: PUSH
33817: LD_INT 3
33819: MUL
33820: MUL
33821: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33822: LD_VAR 0 6
33826: PPUSH
33827: CALL_OW 264
33831: PUSH
33832: LD_INT 5
33834: PUSH
33835: LD_INT 6
33837: PUSH
33838: LD_INT 46
33840: PUSH
33841: LD_INT 44
33843: PUSH
33844: LD_INT 47
33846: PUSH
33847: LD_INT 45
33849: PUSH
33850: LD_INT 28
33852: PUSH
33853: LD_INT 7
33855: PUSH
33856: LD_INT 27
33858: PUSH
33859: LD_INT 29
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: IN
33874: IFFALSE 33894
33876: PUSH
33877: LD_VAR 0 1
33881: PPUSH
33882: LD_INT 52
33884: PPUSH
33885: CALL_OW 321
33889: PUSH
33890: LD_INT 2
33892: EQUAL
33893: AND
33894: IFFALSE 33911
// bpoints := bpoints * 1.2 ;
33896: LD_ADDR_VAR 0 10
33900: PUSH
33901: LD_VAR 0 10
33905: PUSH
33906: LD_REAL  1.20000000000000E+0000
33909: MUL
33910: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33911: LD_VAR 0 6
33915: PPUSH
33916: CALL_OW 264
33920: PUSH
33921: LD_INT 6
33923: PUSH
33924: LD_INT 46
33926: PUSH
33927: LD_INT 47
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: IN
33935: IFFALSE 33952
// bpoints := bpoints * 1.2 ;
33937: LD_ADDR_VAR 0 10
33941: PUSH
33942: LD_VAR 0 10
33946: PUSH
33947: LD_REAL  1.20000000000000E+0000
33950: MUL
33951: ST_TO_ADDR
// end ; unit_building :
33952: GO 33966
33954: LD_INT 3
33956: DOUBLE
33957: EQUAL
33958: IFTRUE 33962
33960: GO 33965
33962: POP
// ; end ;
33963: GO 33966
33965: POP
// for j = 1 to 3 do
33966: LD_ADDR_VAR 0 7
33970: PUSH
33971: DOUBLE
33972: LD_INT 1
33974: DEC
33975: ST_TO_ADDR
33976: LD_INT 3
33978: PUSH
33979: FOR_TO
33980: IFFALSE 34033
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33982: LD_ADDR_VAR 0 5
33986: PUSH
33987: LD_VAR 0 5
33991: PPUSH
33992: LD_VAR 0 7
33996: PPUSH
33997: LD_VAR 0 5
34001: PUSH
34002: LD_VAR 0 7
34006: ARRAY
34007: PUSH
34008: LD_VAR 0 9
34012: PUSH
34013: LD_VAR 0 7
34017: ARRAY
34018: PUSH
34019: LD_VAR 0 10
34023: MUL
34024: PLUS
34025: PPUSH
34026: CALL_OW 1
34030: ST_TO_ADDR
34031: GO 33979
34033: POP
34034: POP
// end ;
34035: GO 32508
34037: POP
34038: POP
// result := Replace ( result , 4 , tmp ) ;
34039: LD_ADDR_VAR 0 5
34043: PUSH
34044: LD_VAR 0 5
34048: PPUSH
34049: LD_INT 4
34051: PPUSH
34052: LD_VAR 0 8
34056: PPUSH
34057: CALL_OW 1
34061: ST_TO_ADDR
// end ;
34062: LD_VAR 0 5
34066: RET
// export function DangerAtRange ( unit , range ) ; begin
34067: LD_INT 0
34069: PPUSH
// if not unit then
34070: LD_VAR 0 1
34074: NOT
34075: IFFALSE 34079
// exit ;
34077: GO 34124
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34079: LD_ADDR_VAR 0 3
34083: PUSH
34084: LD_VAR 0 1
34088: PPUSH
34089: CALL_OW 255
34093: PPUSH
34094: LD_VAR 0 1
34098: PPUSH
34099: CALL_OW 250
34103: PPUSH
34104: LD_VAR 0 1
34108: PPUSH
34109: CALL_OW 251
34113: PPUSH
34114: LD_VAR 0 2
34118: PPUSH
34119: CALL 32358 0 4
34123: ST_TO_ADDR
// end ;
34124: LD_VAR 0 3
34128: RET
// export function DangerInArea ( side , area ) ; begin
34129: LD_INT 0
34131: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34132: LD_ADDR_VAR 0 3
34136: PUSH
34137: LD_VAR 0 2
34141: PPUSH
34142: LD_INT 81
34144: PUSH
34145: LD_VAR 0 1
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PPUSH
34154: CALL_OW 70
34158: ST_TO_ADDR
// end ;
34159: LD_VAR 0 3
34163: RET
// export function IsExtension ( b ) ; begin
34164: LD_INT 0
34166: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34167: LD_ADDR_VAR 0 2
34171: PUSH
34172: LD_VAR 0 1
34176: PUSH
34177: LD_INT 23
34179: PUSH
34180: LD_INT 20
34182: PUSH
34183: LD_INT 22
34185: PUSH
34186: LD_INT 17
34188: PUSH
34189: LD_INT 24
34191: PUSH
34192: LD_INT 21
34194: PUSH
34195: LD_INT 19
34197: PUSH
34198: LD_INT 16
34200: PUSH
34201: LD_INT 25
34203: PUSH
34204: LD_INT 18
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: IN
34219: ST_TO_ADDR
// end ;
34220: LD_VAR 0 2
34224: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34225: LD_INT 0
34227: PPUSH
34228: PPUSH
34229: PPUSH
// result := [ ] ;
34230: LD_ADDR_VAR 0 4
34234: PUSH
34235: EMPTY
34236: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34237: LD_ADDR_VAR 0 5
34241: PUSH
34242: LD_VAR 0 2
34246: PPUSH
34247: LD_INT 21
34249: PUSH
34250: LD_INT 3
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PPUSH
34257: CALL_OW 70
34261: ST_TO_ADDR
// if not tmp then
34262: LD_VAR 0 5
34266: NOT
34267: IFFALSE 34271
// exit ;
34269: GO 34335
// if checkLink then
34271: LD_VAR 0 3
34275: IFFALSE 34325
// begin for i in tmp do
34277: LD_ADDR_VAR 0 6
34281: PUSH
34282: LD_VAR 0 5
34286: PUSH
34287: FOR_IN
34288: IFFALSE 34323
// if GetBase ( i ) <> base then
34290: LD_VAR 0 6
34294: PPUSH
34295: CALL_OW 274
34299: PUSH
34300: LD_VAR 0 1
34304: NONEQUAL
34305: IFFALSE 34321
// ComLinkToBase ( base , i ) ;
34307: LD_VAR 0 1
34311: PPUSH
34312: LD_VAR 0 6
34316: PPUSH
34317: CALL_OW 169
34321: GO 34287
34323: POP
34324: POP
// end ; result := tmp ;
34325: LD_ADDR_VAR 0 4
34329: PUSH
34330: LD_VAR 0 5
34334: ST_TO_ADDR
// end ;
34335: LD_VAR 0 4
34339: RET
// export function ComComplete ( units , b ) ; var i ; begin
34340: LD_INT 0
34342: PPUSH
34343: PPUSH
// if not units then
34344: LD_VAR 0 1
34348: NOT
34349: IFFALSE 34353
// exit ;
34351: GO 34443
// for i in units do
34353: LD_ADDR_VAR 0 4
34357: PUSH
34358: LD_VAR 0 1
34362: PUSH
34363: FOR_IN
34364: IFFALSE 34441
// if BuildingStatus ( b ) = bs_build then
34366: LD_VAR 0 2
34370: PPUSH
34371: CALL_OW 461
34375: PUSH
34376: LD_INT 1
34378: EQUAL
34379: IFFALSE 34439
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34381: LD_VAR 0 4
34385: PPUSH
34386: LD_STRING h
34388: PUSH
34389: LD_VAR 0 2
34393: PPUSH
34394: CALL_OW 250
34398: PUSH
34399: LD_VAR 0 2
34403: PPUSH
34404: CALL_OW 251
34408: PUSH
34409: LD_VAR 0 2
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: LD_INT 0
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: PUSH
34432: EMPTY
34433: LIST
34434: PPUSH
34435: CALL_OW 446
34439: GO 34363
34441: POP
34442: POP
// end ;
34443: LD_VAR 0 3
34447: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34448: LD_INT 0
34450: PPUSH
34451: PPUSH
34452: PPUSH
34453: PPUSH
34454: PPUSH
34455: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34456: LD_VAR 0 1
34460: NOT
34461: IFTRUE 34478
34463: PUSH
34464: LD_VAR 0 1
34468: PPUSH
34469: CALL_OW 263
34473: PUSH
34474: LD_INT 2
34476: NONEQUAL
34477: OR
34478: IFFALSE 34482
// exit ;
34480: GO 34798
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34482: LD_ADDR_VAR 0 6
34486: PUSH
34487: LD_INT 22
34489: PUSH
34490: LD_VAR 0 1
34494: PPUSH
34495: CALL_OW 255
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: LD_INT 2
34506: PUSH
34507: LD_INT 30
34509: PUSH
34510: LD_INT 36
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 34
34519: PUSH
34520: LD_INT 31
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: LIST
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PPUSH
34536: CALL_OW 69
34540: ST_TO_ADDR
// if not tmp then
34541: LD_VAR 0 6
34545: NOT
34546: IFFALSE 34550
// exit ;
34548: GO 34798
// result := [ ] ;
34550: LD_ADDR_VAR 0 2
34554: PUSH
34555: EMPTY
34556: ST_TO_ADDR
// for i in tmp do
34557: LD_ADDR_VAR 0 3
34561: PUSH
34562: LD_VAR 0 6
34566: PUSH
34567: FOR_IN
34568: IFFALSE 34639
// begin t := UnitsInside ( i ) ;
34570: LD_ADDR_VAR 0 4
34574: PUSH
34575: LD_VAR 0 3
34579: PPUSH
34580: CALL_OW 313
34584: ST_TO_ADDR
// if t then
34585: LD_VAR 0 4
34589: IFFALSE 34637
// for j in t do
34591: LD_ADDR_VAR 0 7
34595: PUSH
34596: LD_VAR 0 4
34600: PUSH
34601: FOR_IN
34602: IFFALSE 34635
// result := Replace ( result , result + 1 , j ) ;
34604: LD_ADDR_VAR 0 2
34608: PUSH
34609: LD_VAR 0 2
34613: PPUSH
34614: LD_VAR 0 2
34618: PUSH
34619: LD_INT 1
34621: PLUS
34622: PPUSH
34623: LD_VAR 0 7
34627: PPUSH
34628: CALL_OW 1
34632: ST_TO_ADDR
34633: GO 34601
34635: POP
34636: POP
// end ;
34637: GO 34567
34639: POP
34640: POP
// if not result then
34641: LD_VAR 0 2
34645: NOT
34646: IFFALSE 34650
// exit ;
34648: GO 34798
// mech := result [ 1 ] ;
34650: LD_ADDR_VAR 0 5
34654: PUSH
34655: LD_VAR 0 2
34659: PUSH
34660: LD_INT 1
34662: ARRAY
34663: ST_TO_ADDR
// if result > 1 then
34664: LD_VAR 0 2
34668: PUSH
34669: LD_INT 1
34671: GREATER
34672: IFFALSE 34784
// begin for i = 2 to result do
34674: LD_ADDR_VAR 0 3
34678: PUSH
34679: DOUBLE
34680: LD_INT 2
34682: DEC
34683: ST_TO_ADDR
34684: LD_VAR 0 2
34688: PUSH
34689: FOR_TO
34690: IFFALSE 34782
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34692: LD_ADDR_VAR 0 4
34696: PUSH
34697: LD_VAR 0 2
34701: PUSH
34702: LD_VAR 0 3
34706: ARRAY
34707: PPUSH
34708: LD_INT 3
34710: PPUSH
34711: CALL_OW 259
34715: PUSH
34716: LD_VAR 0 2
34720: PUSH
34721: LD_VAR 0 3
34725: ARRAY
34726: PPUSH
34727: CALL_OW 432
34731: MINUS
34732: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34733: LD_VAR 0 4
34737: PUSH
34738: LD_VAR 0 5
34742: PPUSH
34743: LD_INT 3
34745: PPUSH
34746: CALL_OW 259
34750: PUSH
34751: LD_VAR 0 5
34755: PPUSH
34756: CALL_OW 432
34760: MINUS
34761: GREATEREQUAL
34762: IFFALSE 34780
// mech := result [ i ] ;
34764: LD_ADDR_VAR 0 5
34768: PUSH
34769: LD_VAR 0 2
34773: PUSH
34774: LD_VAR 0 3
34778: ARRAY
34779: ST_TO_ADDR
// end ;
34780: GO 34689
34782: POP
34783: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34784: LD_VAR 0 1
34788: PPUSH
34789: LD_VAR 0 5
34793: PPUSH
34794: CALL_OW 135
// end ;
34798: LD_VAR 0 2
34802: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34803: LD_INT 0
34805: PPUSH
34806: PPUSH
34807: PPUSH
34808: PPUSH
34809: PPUSH
34810: PPUSH
34811: PPUSH
34812: PPUSH
34813: PPUSH
34814: PPUSH
34815: PPUSH
34816: PPUSH
34817: PPUSH
// result := [ ] ;
34818: LD_ADDR_VAR 0 7
34822: PUSH
34823: EMPTY
34824: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34825: LD_VAR 0 1
34829: PPUSH
34830: CALL_OW 266
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: IN
34845: NOT
34846: IFFALSE 34850
// exit ;
34848: GO 36490
// if name then
34850: LD_VAR 0 3
34854: IFFALSE 34870
// SetBName ( base_dep , name ) ;
34856: LD_VAR 0 1
34860: PPUSH
34861: LD_VAR 0 3
34865: PPUSH
34866: CALL_OW 500
// base := GetBase ( base_dep ) ;
34870: LD_ADDR_VAR 0 15
34874: PUSH
34875: LD_VAR 0 1
34879: PPUSH
34880: CALL_OW 274
34884: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34885: LD_ADDR_VAR 0 16
34889: PUSH
34890: LD_VAR 0 1
34894: PPUSH
34895: CALL_OW 255
34899: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34900: LD_ADDR_VAR 0 17
34904: PUSH
34905: LD_VAR 0 1
34909: PPUSH
34910: CALL_OW 248
34914: ST_TO_ADDR
// if sources then
34915: LD_VAR 0 5
34919: IFFALSE 34966
// for i = 1 to 3 do
34921: LD_ADDR_VAR 0 8
34925: PUSH
34926: DOUBLE
34927: LD_INT 1
34929: DEC
34930: ST_TO_ADDR
34931: LD_INT 3
34933: PUSH
34934: FOR_TO
34935: IFFALSE 34964
// AddResourceType ( base , i , sources [ i ] ) ;
34937: LD_VAR 0 15
34941: PPUSH
34942: LD_VAR 0 8
34946: PPUSH
34947: LD_VAR 0 5
34951: PUSH
34952: LD_VAR 0 8
34956: ARRAY
34957: PPUSH
34958: CALL_OW 276
34962: GO 34934
34964: POP
34965: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34966: LD_ADDR_VAR 0 18
34970: PUSH
34971: LD_VAR 0 15
34975: PPUSH
34976: LD_VAR 0 2
34980: PPUSH
34981: LD_INT 1
34983: PPUSH
34984: CALL 34225 0 3
34988: ST_TO_ADDR
// InitHc ;
34989: CALL_OW 19
// InitUc ;
34993: CALL_OW 18
// uc_side := side ;
34997: LD_ADDR_OWVAR 20
35001: PUSH
35002: LD_VAR 0 16
35006: ST_TO_ADDR
// uc_nation := nation ;
35007: LD_ADDR_OWVAR 21
35011: PUSH
35012: LD_VAR 0 17
35016: ST_TO_ADDR
// if buildings then
35017: LD_VAR 0 18
35021: IFFALSE 36349
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35023: LD_ADDR_VAR 0 19
35027: PUSH
35028: LD_VAR 0 18
35032: PPUSH
35033: LD_INT 2
35035: PUSH
35036: LD_INT 30
35038: PUSH
35039: LD_INT 29
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 30
35048: PUSH
35049: LD_INT 30
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: PPUSH
35061: CALL_OW 72
35065: ST_TO_ADDR
// if tmp then
35066: LD_VAR 0 19
35070: IFFALSE 35118
// for i in tmp do
35072: LD_ADDR_VAR 0 8
35076: PUSH
35077: LD_VAR 0 19
35081: PUSH
35082: FOR_IN
35083: IFFALSE 35116
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35085: LD_VAR 0 8
35089: PPUSH
35090: CALL_OW 250
35094: PPUSH
35095: LD_VAR 0 8
35099: PPUSH
35100: CALL_OW 251
35104: PPUSH
35105: LD_VAR 0 16
35109: PPUSH
35110: CALL_OW 441
35114: GO 35082
35116: POP
35117: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35118: LD_VAR 0 18
35122: PPUSH
35123: LD_INT 2
35125: PUSH
35126: LD_INT 30
35128: PUSH
35129: LD_INT 32
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 30
35138: PUSH
35139: LD_INT 33
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: PPUSH
35151: CALL_OW 72
35155: IFFALSE 35243
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35157: LD_ADDR_VAR 0 8
35161: PUSH
35162: LD_VAR 0 18
35166: PPUSH
35167: LD_INT 2
35169: PUSH
35170: LD_INT 30
35172: PUSH
35173: LD_INT 32
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 30
35182: PUSH
35183: LD_INT 33
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: LIST
35194: PPUSH
35195: CALL_OW 72
35199: PUSH
35200: FOR_IN
35201: IFFALSE 35241
// begin if not GetBWeapon ( i ) then
35203: LD_VAR 0 8
35207: PPUSH
35208: CALL_OW 269
35212: NOT
35213: IFFALSE 35239
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35215: LD_VAR 0 8
35219: PPUSH
35220: LD_VAR 0 8
35224: PPUSH
35225: LD_VAR 0 2
35229: PPUSH
35230: CALL 36495 0 2
35234: PPUSH
35235: CALL_OW 431
// end ;
35239: GO 35200
35241: POP
35242: POP
// end ; for i = 1 to personel do
35243: LD_ADDR_VAR 0 8
35247: PUSH
35248: DOUBLE
35249: LD_INT 1
35251: DEC
35252: ST_TO_ADDR
35253: LD_VAR 0 6
35257: PUSH
35258: FOR_TO
35259: IFFALSE 36329
// begin if i > 4 then
35261: LD_VAR 0 8
35265: PUSH
35266: LD_INT 4
35268: GREATER
35269: IFFALSE 35273
// break ;
35271: GO 36329
// case i of 1 :
35273: LD_VAR 0 8
35277: PUSH
35278: LD_INT 1
35280: DOUBLE
35281: EQUAL
35282: IFTRUE 35286
35284: GO 35366
35286: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35287: LD_ADDR_VAR 0 12
35291: PUSH
35292: LD_VAR 0 18
35296: PPUSH
35297: LD_INT 22
35299: PUSH
35300: LD_VAR 0 16
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 58
35311: PUSH
35312: EMPTY
35313: LIST
35314: PUSH
35315: LD_INT 2
35317: PUSH
35318: LD_INT 30
35320: PUSH
35321: LD_INT 32
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 30
35330: PUSH
35331: LD_INT 4
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 30
35340: PUSH
35341: LD_INT 5
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: PPUSH
35359: CALL_OW 72
35363: ST_TO_ADDR
35364: GO 35588
35366: LD_INT 2
35368: DOUBLE
35369: EQUAL
35370: IFTRUE 35374
35372: GO 35436
35374: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35375: LD_ADDR_VAR 0 12
35379: PUSH
35380: LD_VAR 0 18
35384: PPUSH
35385: LD_INT 22
35387: PUSH
35388: LD_VAR 0 16
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 2
35399: PUSH
35400: LD_INT 30
35402: PUSH
35403: LD_INT 0
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 30
35412: PUSH
35413: LD_INT 1
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PPUSH
35429: CALL_OW 72
35433: ST_TO_ADDR
35434: GO 35588
35436: LD_INT 3
35438: DOUBLE
35439: EQUAL
35440: IFTRUE 35444
35442: GO 35506
35444: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35445: LD_ADDR_VAR 0 12
35449: PUSH
35450: LD_VAR 0 18
35454: PPUSH
35455: LD_INT 22
35457: PUSH
35458: LD_VAR 0 16
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: LD_INT 30
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 30
35482: PUSH
35483: LD_INT 3
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PPUSH
35499: CALL_OW 72
35503: ST_TO_ADDR
35504: GO 35588
35506: LD_INT 4
35508: DOUBLE
35509: EQUAL
35510: IFTRUE 35514
35512: GO 35587
35514: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35515: LD_ADDR_VAR 0 12
35519: PUSH
35520: LD_VAR 0 18
35524: PPUSH
35525: LD_INT 22
35527: PUSH
35528: LD_VAR 0 16
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: LD_INT 30
35542: PUSH
35543: LD_INT 6
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 30
35552: PUSH
35553: LD_INT 7
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 30
35562: PUSH
35563: LD_INT 8
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PPUSH
35580: CALL_OW 72
35584: ST_TO_ADDR
35585: GO 35588
35587: POP
// if i = 1 then
35588: LD_VAR 0 8
35592: PUSH
35593: LD_INT 1
35595: EQUAL
35596: IFFALSE 35707
// begin tmp := [ ] ;
35598: LD_ADDR_VAR 0 19
35602: PUSH
35603: EMPTY
35604: ST_TO_ADDR
// for j in f do
35605: LD_ADDR_VAR 0 9
35609: PUSH
35610: LD_VAR 0 12
35614: PUSH
35615: FOR_IN
35616: IFFALSE 35689
// if GetBType ( j ) = b_bunker then
35618: LD_VAR 0 9
35622: PPUSH
35623: CALL_OW 266
35627: PUSH
35628: LD_INT 32
35630: EQUAL
35631: IFFALSE 35658
// tmp := Insert ( tmp , 1 , j ) else
35633: LD_ADDR_VAR 0 19
35637: PUSH
35638: LD_VAR 0 19
35642: PPUSH
35643: LD_INT 1
35645: PPUSH
35646: LD_VAR 0 9
35650: PPUSH
35651: CALL_OW 2
35655: ST_TO_ADDR
35656: GO 35687
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35658: LD_ADDR_VAR 0 19
35662: PUSH
35663: LD_VAR 0 19
35667: PPUSH
35668: LD_VAR 0 19
35672: PUSH
35673: LD_INT 1
35675: PLUS
35676: PPUSH
35677: LD_VAR 0 9
35681: PPUSH
35682: CALL_OW 2
35686: ST_TO_ADDR
35687: GO 35615
35689: POP
35690: POP
// if tmp then
35691: LD_VAR 0 19
35695: IFFALSE 35707
// f := tmp ;
35697: LD_ADDR_VAR 0 12
35701: PUSH
35702: LD_VAR 0 19
35706: ST_TO_ADDR
// end ; x := personel [ i ] ;
35707: LD_ADDR_VAR 0 13
35711: PUSH
35712: LD_VAR 0 6
35716: PUSH
35717: LD_VAR 0 8
35721: ARRAY
35722: ST_TO_ADDR
// if x = - 1 then
35723: LD_VAR 0 13
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: EQUAL
35732: IFFALSE 35943
// begin for j in f do
35734: LD_ADDR_VAR 0 9
35738: PUSH
35739: LD_VAR 0 12
35743: PUSH
35744: FOR_IN
35745: IFFALSE 35939
// repeat InitHc ;
35747: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35751: LD_VAR 0 9
35755: PPUSH
35756: CALL_OW 266
35760: PUSH
35761: LD_INT 5
35763: EQUAL
35764: IFFALSE 35834
// begin if UnitsInside ( j ) < 3 then
35766: LD_VAR 0 9
35770: PPUSH
35771: CALL_OW 313
35775: PUSH
35776: LD_INT 3
35778: LESS
35779: IFFALSE 35815
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35781: LD_INT 0
35783: PPUSH
35784: LD_INT 5
35786: PUSH
35787: LD_INT 8
35789: PUSH
35790: LD_INT 9
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: PUSH
35798: LD_VAR 0 17
35802: ARRAY
35803: PPUSH
35804: LD_VAR 0 4
35808: PPUSH
35809: CALL_OW 380
35813: GO 35832
// PrepareHuman ( false , i , skill ) ;
35815: LD_INT 0
35817: PPUSH
35818: LD_VAR 0 8
35822: PPUSH
35823: LD_VAR 0 4
35827: PPUSH
35828: CALL_OW 380
// end else
35832: GO 35851
// PrepareHuman ( false , i , skill ) ;
35834: LD_INT 0
35836: PPUSH
35837: LD_VAR 0 8
35841: PPUSH
35842: LD_VAR 0 4
35846: PPUSH
35847: CALL_OW 380
// un := CreateHuman ;
35851: LD_ADDR_VAR 0 14
35855: PUSH
35856: CALL_OW 44
35860: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35861: LD_ADDR_VAR 0 7
35865: PUSH
35866: LD_VAR 0 7
35870: PPUSH
35871: LD_INT 1
35873: PPUSH
35874: LD_VAR 0 14
35878: PPUSH
35879: CALL_OW 2
35883: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35884: LD_VAR 0 14
35888: PPUSH
35889: LD_VAR 0 9
35893: PPUSH
35894: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35898: LD_VAR 0 9
35902: PPUSH
35903: CALL_OW 313
35907: PUSH
35908: LD_INT 6
35910: EQUAL
35911: IFTRUE 35935
35913: PUSH
35914: LD_VAR 0 9
35918: PPUSH
35919: CALL_OW 266
35923: PUSH
35924: LD_INT 32
35926: PUSH
35927: LD_INT 31
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: IN
35934: OR
35935: IFFALSE 35747
35937: GO 35744
35939: POP
35940: POP
// end else
35941: GO 36327
// for j = 1 to x do
35943: LD_ADDR_VAR 0 9
35947: PUSH
35948: DOUBLE
35949: LD_INT 1
35951: DEC
35952: ST_TO_ADDR
35953: LD_VAR 0 13
35957: PUSH
35958: FOR_TO
35959: IFFALSE 36325
// begin InitHc ;
35961: CALL_OW 19
// if not f then
35965: LD_VAR 0 12
35969: NOT
35970: IFFALSE 36059
// begin PrepareHuman ( false , i , skill ) ;
35972: LD_INT 0
35974: PPUSH
35975: LD_VAR 0 8
35979: PPUSH
35980: LD_VAR 0 4
35984: PPUSH
35985: CALL_OW 380
// un := CreateHuman ;
35989: LD_ADDR_VAR 0 14
35993: PUSH
35994: CALL_OW 44
35998: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35999: LD_ADDR_VAR 0 7
36003: PUSH
36004: LD_VAR 0 7
36008: PPUSH
36009: LD_INT 1
36011: PPUSH
36012: LD_VAR 0 14
36016: PPUSH
36017: CALL_OW 2
36021: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36022: LD_VAR 0 14
36026: PPUSH
36027: LD_VAR 0 1
36031: PPUSH
36032: CALL_OW 250
36036: PPUSH
36037: LD_VAR 0 1
36041: PPUSH
36042: CALL_OW 251
36046: PPUSH
36047: LD_INT 10
36049: PPUSH
36050: LD_INT 0
36052: PPUSH
36053: CALL_OW 50
// continue ;
36057: GO 35958
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36059: LD_VAR 0 12
36063: PUSH
36064: LD_INT 1
36066: ARRAY
36067: PPUSH
36068: CALL_OW 313
36072: IFFALSE 36100
36074: PUSH
36075: LD_VAR 0 12
36079: PUSH
36080: LD_INT 1
36082: ARRAY
36083: PPUSH
36084: CALL_OW 266
36088: PUSH
36089: LD_INT 32
36091: PUSH
36092: LD_INT 31
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: IN
36099: AND
36100: IFTRUE 36121
36102: PUSH
36103: LD_VAR 0 12
36107: PUSH
36108: LD_INT 1
36110: ARRAY
36111: PPUSH
36112: CALL_OW 313
36116: PUSH
36117: LD_INT 6
36119: EQUAL
36120: OR
36121: IFFALSE 36141
// f := Delete ( f , 1 ) ;
36123: LD_ADDR_VAR 0 12
36127: PUSH
36128: LD_VAR 0 12
36132: PPUSH
36133: LD_INT 1
36135: PPUSH
36136: CALL_OW 3
36140: ST_TO_ADDR
// if not f then
36141: LD_VAR 0 12
36145: NOT
36146: IFFALSE 36164
// begin x := x + 2 ;
36148: LD_ADDR_VAR 0 13
36152: PUSH
36153: LD_VAR 0 13
36157: PUSH
36158: LD_INT 2
36160: PLUS
36161: ST_TO_ADDR
// continue ;
36162: GO 35958
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36164: LD_VAR 0 12
36168: PUSH
36169: LD_INT 1
36171: ARRAY
36172: PPUSH
36173: CALL_OW 266
36177: PUSH
36178: LD_INT 5
36180: EQUAL
36181: IFFALSE 36255
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36183: LD_VAR 0 12
36187: PUSH
36188: LD_INT 1
36190: ARRAY
36191: PPUSH
36192: CALL_OW 313
36196: PUSH
36197: LD_INT 3
36199: LESS
36200: IFFALSE 36236
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36202: LD_INT 0
36204: PPUSH
36205: LD_INT 5
36207: PUSH
36208: LD_INT 8
36210: PUSH
36211: LD_INT 9
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: LIST
36218: PUSH
36219: LD_VAR 0 17
36223: ARRAY
36224: PPUSH
36225: LD_VAR 0 4
36229: PPUSH
36230: CALL_OW 380
36234: GO 36253
// PrepareHuman ( false , i , skill ) ;
36236: LD_INT 0
36238: PPUSH
36239: LD_VAR 0 8
36243: PPUSH
36244: LD_VAR 0 4
36248: PPUSH
36249: CALL_OW 380
// end else
36253: GO 36272
// PrepareHuman ( false , i , skill ) ;
36255: LD_INT 0
36257: PPUSH
36258: LD_VAR 0 8
36262: PPUSH
36263: LD_VAR 0 4
36267: PPUSH
36268: CALL_OW 380
// un := CreateHuman ;
36272: LD_ADDR_VAR 0 14
36276: PUSH
36277: CALL_OW 44
36281: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36282: LD_ADDR_VAR 0 7
36286: PUSH
36287: LD_VAR 0 7
36291: PPUSH
36292: LD_INT 1
36294: PPUSH
36295: LD_VAR 0 14
36299: PPUSH
36300: CALL_OW 2
36304: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36305: LD_VAR 0 14
36309: PPUSH
36310: LD_VAR 0 12
36314: PUSH
36315: LD_INT 1
36317: ARRAY
36318: PPUSH
36319: CALL_OW 52
// end ;
36323: GO 35958
36325: POP
36326: POP
// end ;
36327: GO 35258
36329: POP
36330: POP
// result := result ^ buildings ;
36331: LD_ADDR_VAR 0 7
36335: PUSH
36336: LD_VAR 0 7
36340: PUSH
36341: LD_VAR 0 18
36345: ADD
36346: ST_TO_ADDR
// end else
36347: GO 36490
// begin for i = 1 to personel do
36349: LD_ADDR_VAR 0 8
36353: PUSH
36354: DOUBLE
36355: LD_INT 1
36357: DEC
36358: ST_TO_ADDR
36359: LD_VAR 0 6
36363: PUSH
36364: FOR_TO
36365: IFFALSE 36488
// begin if i > 4 then
36367: LD_VAR 0 8
36371: PUSH
36372: LD_INT 4
36374: GREATER
36375: IFFALSE 36379
// break ;
36377: GO 36488
// x := personel [ i ] ;
36379: LD_ADDR_VAR 0 13
36383: PUSH
36384: LD_VAR 0 6
36388: PUSH
36389: LD_VAR 0 8
36393: ARRAY
36394: ST_TO_ADDR
// if x = - 1 then
36395: LD_VAR 0 13
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: EQUAL
36404: IFFALSE 36408
// continue ;
36406: GO 36364
// PrepareHuman ( false , i , skill ) ;
36408: LD_INT 0
36410: PPUSH
36411: LD_VAR 0 8
36415: PPUSH
36416: LD_VAR 0 4
36420: PPUSH
36421: CALL_OW 380
// un := CreateHuman ;
36425: LD_ADDR_VAR 0 14
36429: PUSH
36430: CALL_OW 44
36434: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36435: LD_VAR 0 14
36439: PPUSH
36440: LD_VAR 0 1
36444: PPUSH
36445: CALL_OW 250
36449: PPUSH
36450: LD_VAR 0 1
36454: PPUSH
36455: CALL_OW 251
36459: PPUSH
36460: LD_INT 10
36462: PPUSH
36463: LD_INT 0
36465: PPUSH
36466: CALL_OW 50
// result := result ^ un ;
36470: LD_ADDR_VAR 0 7
36474: PUSH
36475: LD_VAR 0 7
36479: PUSH
36480: LD_VAR 0 14
36484: ADD
36485: ST_TO_ADDR
// end ;
36486: GO 36364
36488: POP
36489: POP
// end ; end ;
36490: LD_VAR 0 7
36494: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36495: LD_INT 0
36497: PPUSH
36498: PPUSH
36499: PPUSH
36500: PPUSH
36501: PPUSH
36502: PPUSH
36503: PPUSH
36504: PPUSH
36505: PPUSH
36506: PPUSH
36507: PPUSH
36508: PPUSH
36509: PPUSH
36510: PPUSH
36511: PPUSH
36512: PPUSH
// result := false ;
36513: LD_ADDR_VAR 0 3
36517: PUSH
36518: LD_INT 0
36520: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36521: LD_VAR 0 1
36525: NOT
36526: IFTRUE 36551
36528: PUSH
36529: LD_VAR 0 1
36533: PPUSH
36534: CALL_OW 266
36538: PUSH
36539: LD_INT 32
36541: PUSH
36542: LD_INT 33
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: IN
36549: NOT
36550: OR
36551: IFFALSE 36555
// exit ;
36553: GO 37690
// nat := GetNation ( tower ) ;
36555: LD_ADDR_VAR 0 12
36559: PUSH
36560: LD_VAR 0 1
36564: PPUSH
36565: CALL_OW 248
36569: ST_TO_ADDR
// side := GetSide ( tower ) ;
36570: LD_ADDR_VAR 0 16
36574: PUSH
36575: LD_VAR 0 1
36579: PPUSH
36580: CALL_OW 255
36584: ST_TO_ADDR
// x := GetX ( tower ) ;
36585: LD_ADDR_VAR 0 10
36589: PUSH
36590: LD_VAR 0 1
36594: PPUSH
36595: CALL_OW 250
36599: ST_TO_ADDR
// y := GetY ( tower ) ;
36600: LD_ADDR_VAR 0 11
36604: PUSH
36605: LD_VAR 0 1
36609: PPUSH
36610: CALL_OW 251
36614: ST_TO_ADDR
// if not x or not y then
36615: LD_VAR 0 10
36619: NOT
36620: IFTRUE 36629
36622: PUSH
36623: LD_VAR 0 11
36627: NOT
36628: OR
36629: IFFALSE 36633
// exit ;
36631: GO 37690
// weapon := 0 ;
36633: LD_ADDR_VAR 0 18
36637: PUSH
36638: LD_INT 0
36640: ST_TO_ADDR
// fac_list := [ ] ;
36641: LD_ADDR_VAR 0 17
36645: PUSH
36646: EMPTY
36647: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36648: LD_ADDR_VAR 0 6
36652: PUSH
36653: LD_VAR 0 1
36657: PPUSH
36658: CALL_OW 274
36662: PPUSH
36663: LD_VAR 0 2
36667: PPUSH
36668: LD_INT 0
36670: PPUSH
36671: CALL 34225 0 3
36675: PPUSH
36676: LD_INT 30
36678: PUSH
36679: LD_INT 3
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PPUSH
36686: CALL_OW 72
36690: ST_TO_ADDR
// if not factories then
36691: LD_VAR 0 6
36695: NOT
36696: IFFALSE 36700
// exit ;
36698: GO 37690
// for i in factories do
36700: LD_ADDR_VAR 0 8
36704: PUSH
36705: LD_VAR 0 6
36709: PUSH
36710: FOR_IN
36711: IFFALSE 36736
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36713: LD_ADDR_VAR 0 17
36717: PUSH
36718: LD_VAR 0 17
36722: PUSH
36723: LD_VAR 0 8
36727: PPUSH
36728: CALL_OW 478
36732: UNION
36733: ST_TO_ADDR
36734: GO 36710
36736: POP
36737: POP
// if not fac_list then
36738: LD_VAR 0 17
36742: NOT
36743: IFFALSE 36747
// exit ;
36745: GO 37690
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36747: LD_ADDR_VAR 0 5
36751: PUSH
36752: LD_INT 4
36754: PUSH
36755: LD_INT 5
36757: PUSH
36758: LD_INT 9
36760: PUSH
36761: LD_INT 10
36763: PUSH
36764: LD_INT 6
36766: PUSH
36767: LD_INT 7
36769: PUSH
36770: LD_INT 11
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 27
36784: PUSH
36785: LD_INT 28
36787: PUSH
36788: LD_INT 26
36790: PUSH
36791: LD_INT 30
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 43
36802: PUSH
36803: LD_INT 44
36805: PUSH
36806: LD_INT 46
36808: PUSH
36809: LD_INT 45
36811: PUSH
36812: LD_INT 47
36814: PUSH
36815: LD_INT 49
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: PUSH
36831: LD_VAR 0 12
36835: ARRAY
36836: ST_TO_ADDR
// list := list isect fac_list ;
36837: LD_ADDR_VAR 0 5
36841: PUSH
36842: LD_VAR 0 5
36846: PUSH
36847: LD_VAR 0 17
36851: ISECT
36852: ST_TO_ADDR
// if not list then
36853: LD_VAR 0 5
36857: NOT
36858: IFFALSE 36862
// exit ;
36860: GO 37690
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36862: LD_VAR 0 12
36866: PUSH
36867: LD_INT 3
36869: EQUAL
36870: IFFALSE 36882
36872: PUSH
36873: LD_INT 49
36875: PUSH
36876: LD_VAR 0 5
36880: IN
36881: AND
36882: IFFALSE 36902
36884: PUSH
36885: LD_INT 31
36887: PPUSH
36888: LD_VAR 0 16
36892: PPUSH
36893: CALL_OW 321
36897: PUSH
36898: LD_INT 2
36900: EQUAL
36901: AND
36902: IFFALSE 36962
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36904: LD_INT 22
36906: PUSH
36907: LD_VAR 0 16
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 35
36918: PUSH
36919: LD_INT 49
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 91
36928: PUSH
36929: LD_VAR 0 1
36933: PUSH
36934: LD_INT 10
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: LIST
36946: PPUSH
36947: CALL_OW 69
36951: NOT
36952: IFFALSE 36962
// weapon := ru_time_lapser ;
36954: LD_ADDR_VAR 0 18
36958: PUSH
36959: LD_INT 49
36961: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36962: LD_VAR 0 12
36966: PUSH
36967: LD_INT 1
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: IN
36977: IFFALSE 37001
36979: PUSH
36980: LD_INT 11
36982: PUSH
36983: LD_VAR 0 5
36987: IN
36988: IFTRUE 37000
36990: PUSH
36991: LD_INT 30
36993: PUSH
36994: LD_VAR 0 5
36998: IN
36999: OR
37000: AND
37001: IFFALSE 37021
37003: PUSH
37004: LD_INT 6
37006: PPUSH
37007: LD_VAR 0 16
37011: PPUSH
37012: CALL_OW 321
37016: PUSH
37017: LD_INT 2
37019: EQUAL
37020: AND
37021: IFFALSE 37188
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37023: LD_INT 22
37025: PUSH
37026: LD_VAR 0 16
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: LD_INT 35
37040: PUSH
37041: LD_INT 11
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 35
37050: PUSH
37051: LD_INT 30
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 91
37065: PUSH
37066: LD_VAR 0 1
37070: PUSH
37071: LD_INT 18
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: LIST
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: LIST
37083: PPUSH
37084: CALL_OW 69
37088: NOT
37089: IFFALSE 37165
37091: PUSH
37092: LD_INT 22
37094: PUSH
37095: LD_VAR 0 16
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 2
37106: PUSH
37107: LD_INT 30
37109: PUSH
37110: LD_INT 32
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 30
37119: PUSH
37120: LD_INT 33
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 91
37134: PUSH
37135: LD_VAR 0 1
37139: PUSH
37140: LD_INT 12
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: LIST
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: LIST
37152: PUSH
37153: EMPTY
37154: LIST
37155: PPUSH
37156: CALL_OW 69
37160: PUSH
37161: LD_INT 2
37163: GREATER
37164: AND
37165: IFFALSE 37188
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37167: LD_ADDR_VAR 0 18
37171: PUSH
37172: LD_INT 11
37174: PUSH
37175: LD_INT 30
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_VAR 0 12
37186: ARRAY
37187: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37188: LD_VAR 0 18
37192: NOT
37193: IFFALSE 37213
37195: PUSH
37196: LD_INT 40
37198: PPUSH
37199: LD_VAR 0 16
37203: PPUSH
37204: CALL_OW 321
37208: PUSH
37209: LD_INT 2
37211: EQUAL
37212: AND
37213: IFFALSE 37249
37215: PUSH
37216: LD_INT 7
37218: PUSH
37219: LD_VAR 0 5
37223: IN
37224: IFTRUE 37236
37226: PUSH
37227: LD_INT 28
37229: PUSH
37230: LD_VAR 0 5
37234: IN
37235: OR
37236: IFTRUE 37248
37238: PUSH
37239: LD_INT 45
37241: PUSH
37242: LD_VAR 0 5
37246: IN
37247: OR
37248: AND
37249: IFFALSE 37503
// begin hex := GetHexInfo ( x , y ) ;
37251: LD_ADDR_VAR 0 4
37255: PUSH
37256: LD_VAR 0 10
37260: PPUSH
37261: LD_VAR 0 11
37265: PPUSH
37266: CALL_OW 546
37270: ST_TO_ADDR
// if hex [ 1 ] then
37271: LD_VAR 0 4
37275: PUSH
37276: LD_INT 1
37278: ARRAY
37279: IFFALSE 37283
// exit ;
37281: GO 37690
// height := hex [ 2 ] ;
37283: LD_ADDR_VAR 0 15
37287: PUSH
37288: LD_VAR 0 4
37292: PUSH
37293: LD_INT 2
37295: ARRAY
37296: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37297: LD_ADDR_VAR 0 14
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: LD_INT 2
37307: PUSH
37308: LD_INT 3
37310: PUSH
37311: LD_INT 5
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: ST_TO_ADDR
// for i in tmp do
37320: LD_ADDR_VAR 0 8
37324: PUSH
37325: LD_VAR 0 14
37329: PUSH
37330: FOR_IN
37331: IFFALSE 37501
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37333: LD_ADDR_VAR 0 9
37337: PUSH
37338: LD_VAR 0 10
37342: PPUSH
37343: LD_VAR 0 8
37347: PPUSH
37348: LD_INT 5
37350: PPUSH
37351: CALL_OW 272
37355: PUSH
37356: LD_VAR 0 11
37360: PPUSH
37361: LD_VAR 0 8
37365: PPUSH
37366: LD_INT 5
37368: PPUSH
37369: CALL_OW 273
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37378: LD_VAR 0 9
37382: PUSH
37383: LD_INT 1
37385: ARRAY
37386: PPUSH
37387: LD_VAR 0 9
37391: PUSH
37392: LD_INT 2
37394: ARRAY
37395: PPUSH
37396: CALL_OW 488
37400: IFFALSE 37499
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37402: LD_ADDR_VAR 0 4
37406: PUSH
37407: LD_VAR 0 9
37411: PUSH
37412: LD_INT 1
37414: ARRAY
37415: PPUSH
37416: LD_VAR 0 9
37420: PUSH
37421: LD_INT 2
37423: ARRAY
37424: PPUSH
37425: CALL_OW 546
37429: ST_TO_ADDR
// if hex [ 1 ] then
37430: LD_VAR 0 4
37434: PUSH
37435: LD_INT 1
37437: ARRAY
37438: IFFALSE 37442
// continue ;
37440: GO 37330
// h := hex [ 2 ] ;
37442: LD_ADDR_VAR 0 13
37446: PUSH
37447: LD_VAR 0 4
37451: PUSH
37452: LD_INT 2
37454: ARRAY
37455: ST_TO_ADDR
// if h + 7 < height then
37456: LD_VAR 0 13
37460: PUSH
37461: LD_INT 7
37463: PLUS
37464: PUSH
37465: LD_VAR 0 15
37469: LESS
37470: IFFALSE 37499
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37472: LD_ADDR_VAR 0 18
37476: PUSH
37477: LD_INT 7
37479: PUSH
37480: LD_INT 28
37482: PUSH
37483: LD_INT 45
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: PUSH
37491: LD_VAR 0 12
37495: ARRAY
37496: ST_TO_ADDR
// break ;
37497: GO 37501
// end ; end ; end ;
37499: GO 37330
37501: POP
37502: POP
// end ; if not weapon then
37503: LD_VAR 0 18
37507: NOT
37508: IFFALSE 37568
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37510: LD_ADDR_VAR 0 5
37514: PUSH
37515: LD_VAR 0 5
37519: PUSH
37520: LD_INT 11
37522: PUSH
37523: LD_INT 30
37525: PUSH
37526: LD_INT 49
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: LIST
37533: DIFF
37534: ST_TO_ADDR
// if not list then
37535: LD_VAR 0 5
37539: NOT
37540: IFFALSE 37544
// exit ;
37542: GO 37690
// weapon := list [ rand ( 1 , list ) ] ;
37544: LD_ADDR_VAR 0 18
37548: PUSH
37549: LD_VAR 0 5
37553: PUSH
37554: LD_INT 1
37556: PPUSH
37557: LD_VAR 0 5
37561: PPUSH
37562: CALL_OW 12
37566: ARRAY
37567: ST_TO_ADDR
// end ; if weapon then
37568: LD_VAR 0 18
37572: IFFALSE 37690
// begin tmp := CostOfWeapon ( weapon ) ;
37574: LD_ADDR_VAR 0 14
37578: PUSH
37579: LD_VAR 0 18
37583: PPUSH
37584: CALL_OW 451
37588: ST_TO_ADDR
// j := GetBase ( tower ) ;
37589: LD_ADDR_VAR 0 9
37593: PUSH
37594: LD_VAR 0 1
37598: PPUSH
37599: CALL_OW 274
37603: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37604: LD_VAR 0 9
37608: PPUSH
37609: LD_INT 1
37611: PPUSH
37612: CALL_OW 275
37616: PUSH
37617: LD_VAR 0 14
37621: PUSH
37622: LD_INT 1
37624: ARRAY
37625: GREATEREQUAL
37626: IFFALSE 37652
37628: PUSH
37629: LD_VAR 0 9
37633: PPUSH
37634: LD_INT 2
37636: PPUSH
37637: CALL_OW 275
37641: PUSH
37642: LD_VAR 0 14
37646: PUSH
37647: LD_INT 2
37649: ARRAY
37650: GREATEREQUAL
37651: AND
37652: IFFALSE 37678
37654: PUSH
37655: LD_VAR 0 9
37659: PPUSH
37660: LD_INT 3
37662: PPUSH
37663: CALL_OW 275
37667: PUSH
37668: LD_VAR 0 14
37672: PUSH
37673: LD_INT 3
37675: ARRAY
37676: GREATEREQUAL
37677: AND
37678: IFFALSE 37690
// result := weapon ;
37680: LD_ADDR_VAR 0 3
37684: PUSH
37685: LD_VAR 0 18
37689: ST_TO_ADDR
// end ; end ;
37690: LD_VAR 0 3
37694: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37695: LD_INT 0
37697: PPUSH
37698: PPUSH
// result := true ;
37699: LD_ADDR_VAR 0 3
37703: PUSH
37704: LD_INT 1
37706: ST_TO_ADDR
// if array1 = array2 then
37707: LD_VAR 0 1
37711: PUSH
37712: LD_VAR 0 2
37716: EQUAL
37717: IFFALSE 37777
// begin for i = 1 to array1 do
37719: LD_ADDR_VAR 0 4
37723: PUSH
37724: DOUBLE
37725: LD_INT 1
37727: DEC
37728: ST_TO_ADDR
37729: LD_VAR 0 1
37733: PUSH
37734: FOR_TO
37735: IFFALSE 37773
// if array1 [ i ] <> array2 [ i ] then
37737: LD_VAR 0 1
37741: PUSH
37742: LD_VAR 0 4
37746: ARRAY
37747: PUSH
37748: LD_VAR 0 2
37752: PUSH
37753: LD_VAR 0 4
37757: ARRAY
37758: NONEQUAL
37759: IFFALSE 37771
// begin result := false ;
37761: LD_ADDR_VAR 0 3
37765: PUSH
37766: LD_INT 0
37768: ST_TO_ADDR
// break ;
37769: GO 37773
// end ;
37771: GO 37734
37773: POP
37774: POP
// end else
37775: GO 37785
// result := false ;
37777: LD_ADDR_VAR 0 3
37781: PUSH
37782: LD_INT 0
37784: ST_TO_ADDR
// end ;
37785: LD_VAR 0 3
37789: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37790: LD_INT 0
37792: PPUSH
37793: PPUSH
// if not array1 or not array2 then
37794: LD_VAR 0 1
37798: NOT
37799: IFTRUE 37808
37801: PUSH
37802: LD_VAR 0 2
37806: NOT
37807: OR
37808: IFFALSE 37812
// exit ;
37810: GO 37876
// result := true ;
37812: LD_ADDR_VAR 0 3
37816: PUSH
37817: LD_INT 1
37819: ST_TO_ADDR
// for i = 1 to array1 do
37820: LD_ADDR_VAR 0 4
37824: PUSH
37825: DOUBLE
37826: LD_INT 1
37828: DEC
37829: ST_TO_ADDR
37830: LD_VAR 0 1
37834: PUSH
37835: FOR_TO
37836: IFFALSE 37874
// if array1 [ i ] <> array2 [ i ] then
37838: LD_VAR 0 1
37842: PUSH
37843: LD_VAR 0 4
37847: ARRAY
37848: PUSH
37849: LD_VAR 0 2
37853: PUSH
37854: LD_VAR 0 4
37858: ARRAY
37859: NONEQUAL
37860: IFFALSE 37872
// begin result := false ;
37862: LD_ADDR_VAR 0 3
37866: PUSH
37867: LD_INT 0
37869: ST_TO_ADDR
// break ;
37870: GO 37874
// end ;
37872: GO 37835
37874: POP
37875: POP
// end ;
37876: LD_VAR 0 3
37880: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37881: LD_INT 0
37883: PPUSH
37884: PPUSH
37885: PPUSH
// pom := GetBase ( fac ) ;
37886: LD_ADDR_VAR 0 5
37890: PUSH
37891: LD_VAR 0 1
37895: PPUSH
37896: CALL_OW 274
37900: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37901: LD_ADDR_VAR 0 4
37905: PUSH
37906: LD_VAR 0 2
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: PPUSH
37915: LD_VAR 0 2
37919: PUSH
37920: LD_INT 2
37922: ARRAY
37923: PPUSH
37924: LD_VAR 0 2
37928: PUSH
37929: LD_INT 3
37931: ARRAY
37932: PPUSH
37933: LD_VAR 0 2
37937: PUSH
37938: LD_INT 4
37940: ARRAY
37941: PPUSH
37942: CALL_OW 449
37946: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37947: LD_ADDR_VAR 0 3
37951: PUSH
37952: LD_VAR 0 5
37956: PPUSH
37957: LD_INT 1
37959: PPUSH
37960: CALL_OW 275
37964: PUSH
37965: LD_VAR 0 4
37969: PUSH
37970: LD_INT 1
37972: ARRAY
37973: GREATEREQUAL
37974: IFFALSE 38000
37976: PUSH
37977: LD_VAR 0 5
37981: PPUSH
37982: LD_INT 2
37984: PPUSH
37985: CALL_OW 275
37989: PUSH
37990: LD_VAR 0 4
37994: PUSH
37995: LD_INT 2
37997: ARRAY
37998: GREATEREQUAL
37999: AND
38000: IFFALSE 38026
38002: PUSH
38003: LD_VAR 0 5
38007: PPUSH
38008: LD_INT 3
38010: PPUSH
38011: CALL_OW 275
38015: PUSH
38016: LD_VAR 0 4
38020: PUSH
38021: LD_INT 3
38023: ARRAY
38024: GREATEREQUAL
38025: AND
38026: ST_TO_ADDR
// end ;
38027: LD_VAR 0 3
38031: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38032: LD_INT 0
38034: PPUSH
38035: PPUSH
38036: PPUSH
38037: PPUSH
// pom := GetBase ( building ) ;
38038: LD_ADDR_VAR 0 3
38042: PUSH
38043: LD_VAR 0 1
38047: PPUSH
38048: CALL_OW 274
38052: ST_TO_ADDR
// if not pom then
38053: LD_VAR 0 3
38057: NOT
38058: IFFALSE 38062
// exit ;
38060: GO 38236
// btype := GetBType ( building ) ;
38062: LD_ADDR_VAR 0 5
38066: PUSH
38067: LD_VAR 0 1
38071: PPUSH
38072: CALL_OW 266
38076: ST_TO_ADDR
// if btype = b_armoury then
38077: LD_VAR 0 5
38081: PUSH
38082: LD_INT 4
38084: EQUAL
38085: IFFALSE 38095
// btype := b_barracks ;
38087: LD_ADDR_VAR 0 5
38091: PUSH
38092: LD_INT 5
38094: ST_TO_ADDR
// if btype = b_depot then
38095: LD_VAR 0 5
38099: PUSH
38100: LD_INT 0
38102: EQUAL
38103: IFFALSE 38113
// btype := b_warehouse ;
38105: LD_ADDR_VAR 0 5
38109: PUSH
38110: LD_INT 1
38112: ST_TO_ADDR
// if btype = b_workshop then
38113: LD_VAR 0 5
38117: PUSH
38118: LD_INT 2
38120: EQUAL
38121: IFFALSE 38131
// btype := b_factory ;
38123: LD_ADDR_VAR 0 5
38127: PUSH
38128: LD_INT 3
38130: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38131: LD_ADDR_VAR 0 4
38135: PUSH
38136: LD_VAR 0 5
38140: PPUSH
38141: LD_VAR 0 1
38145: PPUSH
38146: CALL_OW 248
38150: PPUSH
38151: CALL_OW 450
38155: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38156: LD_ADDR_VAR 0 2
38160: PUSH
38161: LD_VAR 0 3
38165: PPUSH
38166: LD_INT 1
38168: PPUSH
38169: CALL_OW 275
38173: PUSH
38174: LD_VAR 0 4
38178: PUSH
38179: LD_INT 1
38181: ARRAY
38182: GREATEREQUAL
38183: IFFALSE 38209
38185: PUSH
38186: LD_VAR 0 3
38190: PPUSH
38191: LD_INT 2
38193: PPUSH
38194: CALL_OW 275
38198: PUSH
38199: LD_VAR 0 4
38203: PUSH
38204: LD_INT 2
38206: ARRAY
38207: GREATEREQUAL
38208: AND
38209: IFFALSE 38235
38211: PUSH
38212: LD_VAR 0 3
38216: PPUSH
38217: LD_INT 3
38219: PPUSH
38220: CALL_OW 275
38224: PUSH
38225: LD_VAR 0 4
38229: PUSH
38230: LD_INT 3
38232: ARRAY
38233: GREATEREQUAL
38234: AND
38235: ST_TO_ADDR
// end ;
38236: LD_VAR 0 2
38240: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38241: LD_INT 0
38243: PPUSH
38244: PPUSH
38245: PPUSH
// pom := GetBase ( building ) ;
38246: LD_ADDR_VAR 0 4
38250: PUSH
38251: LD_VAR 0 1
38255: PPUSH
38256: CALL_OW 274
38260: ST_TO_ADDR
// if not pom then
38261: LD_VAR 0 4
38265: NOT
38266: IFFALSE 38270
// exit ;
38268: GO 38375
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38270: LD_ADDR_VAR 0 5
38274: PUSH
38275: LD_VAR 0 2
38279: PPUSH
38280: LD_VAR 0 1
38284: PPUSH
38285: CALL_OW 248
38289: PPUSH
38290: CALL_OW 450
38294: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38295: LD_ADDR_VAR 0 3
38299: PUSH
38300: LD_VAR 0 4
38304: PPUSH
38305: LD_INT 1
38307: PPUSH
38308: CALL_OW 275
38312: PUSH
38313: LD_VAR 0 5
38317: PUSH
38318: LD_INT 1
38320: ARRAY
38321: GREATEREQUAL
38322: IFFALSE 38348
38324: PUSH
38325: LD_VAR 0 4
38329: PPUSH
38330: LD_INT 2
38332: PPUSH
38333: CALL_OW 275
38337: PUSH
38338: LD_VAR 0 5
38342: PUSH
38343: LD_INT 2
38345: ARRAY
38346: GREATEREQUAL
38347: AND
38348: IFFALSE 38374
38350: PUSH
38351: LD_VAR 0 4
38355: PPUSH
38356: LD_INT 3
38358: PPUSH
38359: CALL_OW 275
38363: PUSH
38364: LD_VAR 0 5
38368: PUSH
38369: LD_INT 3
38371: ARRAY
38372: GREATEREQUAL
38373: AND
38374: ST_TO_ADDR
// end ;
38375: LD_VAR 0 3
38379: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38380: LD_INT 0
38382: PPUSH
38383: PPUSH
38384: PPUSH
38385: PPUSH
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
// result := false ;
38393: LD_ADDR_VAR 0 8
38397: PUSH
38398: LD_INT 0
38400: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38401: LD_VAR 0 5
38405: NOT
38406: IFTRUE 38415
38408: PUSH
38409: LD_VAR 0 1
38413: NOT
38414: OR
38415: IFTRUE 38424
38417: PUSH
38418: LD_VAR 0 2
38422: NOT
38423: OR
38424: IFTRUE 38433
38426: PUSH
38427: LD_VAR 0 3
38431: NOT
38432: OR
38433: IFFALSE 38437
// exit ;
38435: GO 39263
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38437: LD_ADDR_VAR 0 14
38441: PUSH
38442: LD_VAR 0 1
38446: PPUSH
38447: LD_VAR 0 2
38451: PPUSH
38452: LD_VAR 0 3
38456: PPUSH
38457: LD_VAR 0 4
38461: PPUSH
38462: LD_VAR 0 5
38466: PUSH
38467: LD_INT 1
38469: ARRAY
38470: PPUSH
38471: CALL_OW 248
38475: PPUSH
38476: LD_INT 0
38478: PPUSH
38479: CALL 40544 0 6
38483: ST_TO_ADDR
// if not hexes then
38484: LD_VAR 0 14
38488: NOT
38489: IFFALSE 38493
// exit ;
38491: GO 39263
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38493: LD_ADDR_VAR 0 17
38497: PUSH
38498: LD_VAR 0 5
38502: PPUSH
38503: LD_INT 22
38505: PUSH
38506: LD_VAR 0 13
38510: PPUSH
38511: CALL_OW 255
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: LD_INT 30
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 30
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: LIST
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PPUSH
38552: CALL_OW 72
38556: ST_TO_ADDR
// for i = 1 to hexes do
38557: LD_ADDR_VAR 0 9
38561: PUSH
38562: DOUBLE
38563: LD_INT 1
38565: DEC
38566: ST_TO_ADDR
38567: LD_VAR 0 14
38571: PUSH
38572: FOR_TO
38573: IFFALSE 39261
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38575: LD_ADDR_VAR 0 13
38579: PUSH
38580: LD_VAR 0 14
38584: PUSH
38585: LD_VAR 0 9
38589: ARRAY
38590: PUSH
38591: LD_INT 1
38593: ARRAY
38594: PPUSH
38595: LD_VAR 0 14
38599: PUSH
38600: LD_VAR 0 9
38604: ARRAY
38605: PUSH
38606: LD_INT 2
38608: ARRAY
38609: PPUSH
38610: CALL_OW 428
38614: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38615: LD_VAR 0 14
38619: PUSH
38620: LD_VAR 0 9
38624: ARRAY
38625: PUSH
38626: LD_INT 1
38628: ARRAY
38629: PPUSH
38630: LD_VAR 0 14
38634: PUSH
38635: LD_VAR 0 9
38639: ARRAY
38640: PUSH
38641: LD_INT 2
38643: ARRAY
38644: PPUSH
38645: CALL_OW 351
38649: IFTRUE 38688
38651: PUSH
38652: LD_VAR 0 14
38656: PUSH
38657: LD_VAR 0 9
38661: ARRAY
38662: PUSH
38663: LD_INT 1
38665: ARRAY
38666: PPUSH
38667: LD_VAR 0 14
38671: PUSH
38672: LD_VAR 0 9
38676: ARRAY
38677: PUSH
38678: LD_INT 2
38680: ARRAY
38681: PPUSH
38682: CALL_OW 488
38686: NOT
38687: OR
38688: IFTRUE 38705
38690: PUSH
38691: LD_VAR 0 13
38695: PPUSH
38696: CALL_OW 247
38700: PUSH
38701: LD_INT 3
38703: EQUAL
38704: OR
38705: IFFALSE 38711
// exit ;
38707: POP
38708: POP
38709: GO 39263
// if not tmp then
38711: LD_VAR 0 13
38715: NOT
38716: IFFALSE 38720
// continue ;
38718: GO 38572
// result := true ;
38720: LD_ADDR_VAR 0 8
38724: PUSH
38725: LD_INT 1
38727: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38728: LD_VAR 0 6
38732: IFFALSE 38749
38734: PUSH
38735: LD_VAR 0 13
38739: PPUSH
38740: CALL_OW 247
38744: PUSH
38745: LD_INT 2
38747: EQUAL
38748: AND
38749: IFFALSE 38766
38751: PUSH
38752: LD_VAR 0 13
38756: PPUSH
38757: CALL_OW 263
38761: PUSH
38762: LD_INT 1
38764: EQUAL
38765: AND
38766: IFFALSE 38930
// begin if IsDrivenBy ( tmp ) then
38768: LD_VAR 0 13
38772: PPUSH
38773: CALL_OW 311
38777: IFFALSE 38781
// continue ;
38779: GO 38572
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38781: LD_VAR 0 6
38785: PPUSH
38786: LD_INT 3
38788: PUSH
38789: LD_INT 60
38791: PUSH
38792: EMPTY
38793: LIST
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 3
38801: PUSH
38802: LD_INT 55
38804: PUSH
38805: EMPTY
38806: LIST
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PPUSH
38816: CALL_OW 72
38820: IFFALSE 38928
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38822: LD_ADDR_VAR 0 18
38826: PUSH
38827: LD_VAR 0 6
38831: PPUSH
38832: LD_INT 3
38834: PUSH
38835: LD_INT 60
38837: PUSH
38838: EMPTY
38839: LIST
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 3
38847: PUSH
38848: LD_INT 55
38850: PUSH
38851: EMPTY
38852: LIST
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PPUSH
38862: CALL_OW 72
38866: PUSH
38867: LD_INT 1
38869: ARRAY
38870: ST_TO_ADDR
// if IsInUnit ( driver ) then
38871: LD_VAR 0 18
38875: PPUSH
38876: CALL_OW 310
38880: IFFALSE 38891
// ComExit ( driver ) ;
38882: LD_VAR 0 18
38886: PPUSH
38887: CALL 64544 0 1
// AddComEnterUnit ( driver , tmp ) ;
38891: LD_VAR 0 18
38895: PPUSH
38896: LD_VAR 0 13
38900: PPUSH
38901: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38905: LD_VAR 0 18
38909: PPUSH
38910: LD_VAR 0 7
38914: PPUSH
38915: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38919: LD_VAR 0 18
38923: PPUSH
38924: CALL_OW 181
// end ; continue ;
38928: GO 38572
// end ; if not cleaners or not tmp in cleaners then
38930: LD_VAR 0 6
38934: NOT
38935: IFTRUE 38950
38937: PUSH
38938: LD_VAR 0 13
38942: PUSH
38943: LD_VAR 0 6
38947: IN
38948: NOT
38949: OR
38950: IFFALSE 39259
// begin if dep then
38952: LD_VAR 0 17
38956: IFFALSE 39092
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38958: LD_ADDR_VAR 0 16
38962: PUSH
38963: LD_VAR 0 17
38967: PUSH
38968: LD_INT 1
38970: ARRAY
38971: PPUSH
38972: CALL_OW 250
38976: PPUSH
38977: LD_VAR 0 17
38981: PUSH
38982: LD_INT 1
38984: ARRAY
38985: PPUSH
38986: CALL_OW 254
38990: PPUSH
38991: LD_INT 5
38993: PPUSH
38994: CALL_OW 272
38998: PUSH
38999: LD_VAR 0 17
39003: PUSH
39004: LD_INT 1
39006: ARRAY
39007: PPUSH
39008: CALL_OW 251
39012: PPUSH
39013: LD_VAR 0 17
39017: PUSH
39018: LD_INT 1
39020: ARRAY
39021: PPUSH
39022: CALL_OW 254
39026: PPUSH
39027: LD_INT 5
39029: PPUSH
39030: CALL_OW 273
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39039: LD_VAR 0 16
39043: PUSH
39044: LD_INT 1
39046: ARRAY
39047: PPUSH
39048: LD_VAR 0 16
39052: PUSH
39053: LD_INT 2
39055: ARRAY
39056: PPUSH
39057: CALL_OW 488
39061: IFFALSE 39092
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39063: LD_VAR 0 13
39067: PPUSH
39068: LD_VAR 0 16
39072: PUSH
39073: LD_INT 1
39075: ARRAY
39076: PPUSH
39077: LD_VAR 0 16
39081: PUSH
39082: LD_INT 2
39084: ARRAY
39085: PPUSH
39086: CALL_OW 111
// continue ;
39090: GO 38572
// end ; end ; r := GetDir ( tmp ) ;
39092: LD_ADDR_VAR 0 15
39096: PUSH
39097: LD_VAR 0 13
39101: PPUSH
39102: CALL_OW 254
39106: ST_TO_ADDR
// if r = 5 then
39107: LD_VAR 0 15
39111: PUSH
39112: LD_INT 5
39114: EQUAL
39115: IFFALSE 39125
// r := 0 ;
39117: LD_ADDR_VAR 0 15
39121: PUSH
39122: LD_INT 0
39124: ST_TO_ADDR
// for j = r to 5 do
39125: LD_ADDR_VAR 0 10
39129: PUSH
39130: DOUBLE
39131: LD_VAR 0 15
39135: DEC
39136: ST_TO_ADDR
39137: LD_INT 5
39139: PUSH
39140: FOR_TO
39141: IFFALSE 39257
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39143: LD_ADDR_VAR 0 11
39147: PUSH
39148: LD_VAR 0 13
39152: PPUSH
39153: CALL_OW 250
39157: PPUSH
39158: LD_VAR 0 10
39162: PPUSH
39163: LD_INT 2
39165: PPUSH
39166: CALL_OW 272
39170: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39171: LD_ADDR_VAR 0 12
39175: PUSH
39176: LD_VAR 0 13
39180: PPUSH
39181: CALL_OW 251
39185: PPUSH
39186: LD_VAR 0 10
39190: PPUSH
39191: LD_INT 2
39193: PPUSH
39194: CALL_OW 273
39198: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39199: LD_VAR 0 11
39203: PPUSH
39204: LD_VAR 0 12
39208: PPUSH
39209: CALL_OW 488
39213: IFFALSE 39232
39215: PUSH
39216: LD_VAR 0 11
39220: PPUSH
39221: LD_VAR 0 12
39225: PPUSH
39226: CALL_OW 428
39230: NOT
39231: AND
39232: IFFALSE 39255
// begin ComMoveXY ( tmp , _x , _y ) ;
39234: LD_VAR 0 13
39238: PPUSH
39239: LD_VAR 0 11
39243: PPUSH
39244: LD_VAR 0 12
39248: PPUSH
39249: CALL_OW 111
// break ;
39253: GO 39257
// end ; end ;
39255: GO 39140
39257: POP
39258: POP
// end ; end ;
39259: GO 38572
39261: POP
39262: POP
// end ;
39263: LD_VAR 0 8
39267: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39268: LD_INT 0
39270: PPUSH
// result := true ;
39271: LD_ADDR_VAR 0 3
39275: PUSH
39276: LD_INT 1
39278: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39279: LD_VAR 0 2
39283: PUSH
39284: LD_INT 24
39286: DOUBLE
39287: EQUAL
39288: IFTRUE 39298
39290: LD_INT 33
39292: DOUBLE
39293: EQUAL
39294: IFTRUE 39298
39296: GO 39323
39298: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39299: LD_ADDR_VAR 0 3
39303: PUSH
39304: LD_INT 32
39306: PPUSH
39307: LD_VAR 0 1
39311: PPUSH
39312: CALL_OW 321
39316: PUSH
39317: LD_INT 2
39319: EQUAL
39320: ST_TO_ADDR
39321: GO 39639
39323: LD_INT 20
39325: DOUBLE
39326: EQUAL
39327: IFTRUE 39331
39329: GO 39356
39331: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39332: LD_ADDR_VAR 0 3
39336: PUSH
39337: LD_INT 6
39339: PPUSH
39340: LD_VAR 0 1
39344: PPUSH
39345: CALL_OW 321
39349: PUSH
39350: LD_INT 2
39352: EQUAL
39353: ST_TO_ADDR
39354: GO 39639
39356: LD_INT 22
39358: DOUBLE
39359: EQUAL
39360: IFTRUE 39370
39362: LD_INT 36
39364: DOUBLE
39365: EQUAL
39366: IFTRUE 39370
39368: GO 39395
39370: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39371: LD_ADDR_VAR 0 3
39375: PUSH
39376: LD_INT 15
39378: PPUSH
39379: LD_VAR 0 1
39383: PPUSH
39384: CALL_OW 321
39388: PUSH
39389: LD_INT 2
39391: EQUAL
39392: ST_TO_ADDR
39393: GO 39639
39395: LD_INT 30
39397: DOUBLE
39398: EQUAL
39399: IFTRUE 39403
39401: GO 39428
39403: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39404: LD_ADDR_VAR 0 3
39408: PUSH
39409: LD_INT 20
39411: PPUSH
39412: LD_VAR 0 1
39416: PPUSH
39417: CALL_OW 321
39421: PUSH
39422: LD_INT 2
39424: EQUAL
39425: ST_TO_ADDR
39426: GO 39639
39428: LD_INT 28
39430: DOUBLE
39431: EQUAL
39432: IFTRUE 39442
39434: LD_INT 21
39436: DOUBLE
39437: EQUAL
39438: IFTRUE 39442
39440: GO 39467
39442: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39443: LD_ADDR_VAR 0 3
39447: PUSH
39448: LD_INT 21
39450: PPUSH
39451: LD_VAR 0 1
39455: PPUSH
39456: CALL_OW 321
39460: PUSH
39461: LD_INT 2
39463: EQUAL
39464: ST_TO_ADDR
39465: GO 39639
39467: LD_INT 16
39469: DOUBLE
39470: EQUAL
39471: IFTRUE 39475
39473: GO 39500
39475: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39476: LD_ADDR_VAR 0 3
39480: PUSH
39481: LD_INT 84
39483: PPUSH
39484: LD_VAR 0 1
39488: PPUSH
39489: CALL_OW 321
39493: PUSH
39494: LD_INT 2
39496: EQUAL
39497: ST_TO_ADDR
39498: GO 39639
39500: LD_INT 19
39502: DOUBLE
39503: EQUAL
39504: IFTRUE 39514
39506: LD_INT 23
39508: DOUBLE
39509: EQUAL
39510: IFTRUE 39514
39512: GO 39539
39514: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39515: LD_ADDR_VAR 0 3
39519: PUSH
39520: LD_INT 83
39522: PPUSH
39523: LD_VAR 0 1
39527: PPUSH
39528: CALL_OW 321
39532: PUSH
39533: LD_INT 2
39535: EQUAL
39536: ST_TO_ADDR
39537: GO 39639
39539: LD_INT 17
39541: DOUBLE
39542: EQUAL
39543: IFTRUE 39547
39545: GO 39572
39547: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39548: LD_ADDR_VAR 0 3
39552: PUSH
39553: LD_INT 39
39555: PPUSH
39556: LD_VAR 0 1
39560: PPUSH
39561: CALL_OW 321
39565: PUSH
39566: LD_INT 2
39568: EQUAL
39569: ST_TO_ADDR
39570: GO 39639
39572: LD_INT 18
39574: DOUBLE
39575: EQUAL
39576: IFTRUE 39580
39578: GO 39605
39580: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39581: LD_ADDR_VAR 0 3
39585: PUSH
39586: LD_INT 40
39588: PPUSH
39589: LD_VAR 0 1
39593: PPUSH
39594: CALL_OW 321
39598: PUSH
39599: LD_INT 2
39601: EQUAL
39602: ST_TO_ADDR
39603: GO 39639
39605: LD_INT 27
39607: DOUBLE
39608: EQUAL
39609: IFTRUE 39613
39611: GO 39638
39613: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39614: LD_ADDR_VAR 0 3
39618: PUSH
39619: LD_INT 35
39621: PPUSH
39622: LD_VAR 0 1
39626: PPUSH
39627: CALL_OW 321
39631: PUSH
39632: LD_INT 2
39634: EQUAL
39635: ST_TO_ADDR
39636: GO 39639
39638: POP
// end ;
39639: LD_VAR 0 3
39643: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39644: LD_INT 0
39646: PPUSH
39647: PPUSH
39648: PPUSH
39649: PPUSH
39650: PPUSH
39651: PPUSH
39652: PPUSH
39653: PPUSH
39654: PPUSH
39655: PPUSH
39656: PPUSH
// result := false ;
39657: LD_ADDR_VAR 0 6
39661: PUSH
39662: LD_INT 0
39664: ST_TO_ADDR
// if btype = b_depot then
39665: LD_VAR 0 2
39669: PUSH
39670: LD_INT 0
39672: EQUAL
39673: IFFALSE 39685
// begin result := true ;
39675: LD_ADDR_VAR 0 6
39679: PUSH
39680: LD_INT 1
39682: ST_TO_ADDR
// exit ;
39683: GO 40539
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39685: LD_VAR 0 1
39689: NOT
39690: IFTRUE 39715
39692: PUSH
39693: LD_VAR 0 1
39697: PPUSH
39698: CALL_OW 266
39702: PUSH
39703: LD_INT 0
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: IN
39713: NOT
39714: OR
39715: IFTRUE 39724
39717: PUSH
39718: LD_VAR 0 2
39722: NOT
39723: OR
39724: IFTRUE 39760
39726: PUSH
39727: LD_VAR 0 5
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: LD_INT 3
39743: PUSH
39744: LD_INT 4
39746: PUSH
39747: LD_INT 5
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: IN
39758: NOT
39759: OR
39760: IFTRUE 39779
39762: PUSH
39763: LD_VAR 0 3
39767: PPUSH
39768: LD_VAR 0 4
39772: PPUSH
39773: CALL_OW 488
39777: NOT
39778: OR
39779: IFFALSE 39783
// exit ;
39781: GO 40539
// side := GetSide ( depot ) ;
39783: LD_ADDR_VAR 0 9
39787: PUSH
39788: LD_VAR 0 1
39792: PPUSH
39793: CALL_OW 255
39797: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39798: LD_VAR 0 9
39802: PPUSH
39803: LD_VAR 0 2
39807: PPUSH
39808: CALL 39268 0 2
39812: NOT
39813: IFFALSE 39817
// exit ;
39815: GO 40539
// pom := GetBase ( depot ) ;
39817: LD_ADDR_VAR 0 10
39821: PUSH
39822: LD_VAR 0 1
39826: PPUSH
39827: CALL_OW 274
39831: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39832: LD_ADDR_VAR 0 11
39836: PUSH
39837: LD_VAR 0 2
39841: PPUSH
39842: LD_VAR 0 1
39846: PPUSH
39847: CALL_OW 248
39851: PPUSH
39852: CALL_OW 450
39856: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39857: LD_VAR 0 10
39861: PPUSH
39862: LD_INT 1
39864: PPUSH
39865: CALL_OW 275
39869: PUSH
39870: LD_VAR 0 11
39874: PUSH
39875: LD_INT 1
39877: ARRAY
39878: GREATEREQUAL
39879: IFFALSE 39905
39881: PUSH
39882: LD_VAR 0 10
39886: PPUSH
39887: LD_INT 2
39889: PPUSH
39890: CALL_OW 275
39894: PUSH
39895: LD_VAR 0 11
39899: PUSH
39900: LD_INT 2
39902: ARRAY
39903: GREATEREQUAL
39904: AND
39905: IFFALSE 39931
39907: PUSH
39908: LD_VAR 0 10
39912: PPUSH
39913: LD_INT 3
39915: PPUSH
39916: CALL_OW 275
39920: PUSH
39921: LD_VAR 0 11
39925: PUSH
39926: LD_INT 3
39928: ARRAY
39929: GREATEREQUAL
39930: AND
39931: NOT
39932: IFFALSE 39936
// exit ;
39934: GO 40539
// if GetBType ( depot ) = b_depot then
39936: LD_VAR 0 1
39940: PPUSH
39941: CALL_OW 266
39945: PUSH
39946: LD_INT 0
39948: EQUAL
39949: IFFALSE 39961
// dist := 28 else
39951: LD_ADDR_VAR 0 14
39955: PUSH
39956: LD_INT 28
39958: ST_TO_ADDR
39959: GO 39969
// dist := 36 ;
39961: LD_ADDR_VAR 0 14
39965: PUSH
39966: LD_INT 36
39968: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39969: LD_VAR 0 1
39973: PPUSH
39974: LD_VAR 0 3
39978: PPUSH
39979: LD_VAR 0 4
39983: PPUSH
39984: CALL_OW 297
39988: PUSH
39989: LD_VAR 0 14
39993: GREATER
39994: IFFALSE 39998
// exit ;
39996: GO 40539
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39998: LD_ADDR_VAR 0 12
40002: PUSH
40003: LD_VAR 0 2
40007: PPUSH
40008: LD_VAR 0 3
40012: PPUSH
40013: LD_VAR 0 4
40017: PPUSH
40018: LD_VAR 0 5
40022: PPUSH
40023: LD_VAR 0 1
40027: PPUSH
40028: CALL_OW 248
40032: PPUSH
40033: LD_INT 0
40035: PPUSH
40036: CALL 40544 0 6
40040: ST_TO_ADDR
// if not hexes then
40041: LD_VAR 0 12
40045: NOT
40046: IFFALSE 40050
// exit ;
40048: GO 40539
// hex := GetHexInfo ( x , y ) ;
40050: LD_ADDR_VAR 0 15
40054: PUSH
40055: LD_VAR 0 3
40059: PPUSH
40060: LD_VAR 0 4
40064: PPUSH
40065: CALL_OW 546
40069: ST_TO_ADDR
// if hex [ 1 ] then
40070: LD_VAR 0 15
40074: PUSH
40075: LD_INT 1
40077: ARRAY
40078: IFFALSE 40082
// exit ;
40080: GO 40539
// height := hex [ 2 ] ;
40082: LD_ADDR_VAR 0 13
40086: PUSH
40087: LD_VAR 0 15
40091: PUSH
40092: LD_INT 2
40094: ARRAY
40095: ST_TO_ADDR
// for i = 1 to hexes do
40096: LD_ADDR_VAR 0 7
40100: PUSH
40101: DOUBLE
40102: LD_INT 1
40104: DEC
40105: ST_TO_ADDR
40106: LD_VAR 0 12
40110: PUSH
40111: FOR_TO
40112: IFFALSE 40456
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40114: LD_VAR 0 12
40118: PUSH
40119: LD_VAR 0 7
40123: ARRAY
40124: PUSH
40125: LD_INT 1
40127: ARRAY
40128: PPUSH
40129: LD_VAR 0 12
40133: PUSH
40134: LD_VAR 0 7
40138: ARRAY
40139: PUSH
40140: LD_INT 2
40142: ARRAY
40143: PPUSH
40144: CALL_OW 488
40148: NOT
40149: IFTRUE 40191
40151: PUSH
40152: LD_VAR 0 12
40156: PUSH
40157: LD_VAR 0 7
40161: ARRAY
40162: PUSH
40163: LD_INT 1
40165: ARRAY
40166: PPUSH
40167: LD_VAR 0 12
40171: PUSH
40172: LD_VAR 0 7
40176: ARRAY
40177: PUSH
40178: LD_INT 2
40180: ARRAY
40181: PPUSH
40182: CALL_OW 428
40186: PUSH
40187: LD_INT 0
40189: GREATER
40190: OR
40191: IFTRUE 40229
40193: PUSH
40194: LD_VAR 0 12
40198: PUSH
40199: LD_VAR 0 7
40203: ARRAY
40204: PUSH
40205: LD_INT 1
40207: ARRAY
40208: PPUSH
40209: LD_VAR 0 12
40213: PUSH
40214: LD_VAR 0 7
40218: ARRAY
40219: PUSH
40220: LD_INT 2
40222: ARRAY
40223: PPUSH
40224: CALL_OW 351
40228: OR
40229: IFFALSE 40235
// exit ;
40231: POP
40232: POP
40233: GO 40539
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40235: LD_ADDR_VAR 0 8
40239: PUSH
40240: LD_VAR 0 12
40244: PUSH
40245: LD_VAR 0 7
40249: ARRAY
40250: PUSH
40251: LD_INT 1
40253: ARRAY
40254: PPUSH
40255: LD_VAR 0 12
40259: PUSH
40260: LD_VAR 0 7
40264: ARRAY
40265: PUSH
40266: LD_INT 2
40268: ARRAY
40269: PPUSH
40270: CALL_OW 546
40274: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40275: LD_VAR 0 8
40279: PUSH
40280: LD_INT 1
40282: ARRAY
40283: IFTRUE 40305
40285: PUSH
40286: LD_VAR 0 8
40290: PUSH
40291: LD_INT 2
40293: ARRAY
40294: PUSH
40295: LD_VAR 0 13
40299: PUSH
40300: LD_INT 2
40302: PLUS
40303: GREATER
40304: OR
40305: IFTRUE 40327
40307: PUSH
40308: LD_VAR 0 8
40312: PUSH
40313: LD_INT 2
40315: ARRAY
40316: PUSH
40317: LD_VAR 0 13
40321: PUSH
40322: LD_INT 2
40324: MINUS
40325: LESS
40326: OR
40327: IFTRUE 40395
40329: PUSH
40330: LD_VAR 0 8
40334: PUSH
40335: LD_INT 3
40337: ARRAY
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: LD_INT 8
40344: PUSH
40345: LD_INT 9
40347: PUSH
40348: LD_INT 10
40350: PUSH
40351: LD_INT 11
40353: PUSH
40354: LD_INT 12
40356: PUSH
40357: LD_INT 13
40359: PUSH
40360: LD_INT 16
40362: PUSH
40363: LD_INT 17
40365: PUSH
40366: LD_INT 18
40368: PUSH
40369: LD_INT 19
40371: PUSH
40372: LD_INT 20
40374: PUSH
40375: LD_INT 21
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: IN
40393: NOT
40394: OR
40395: IFTRUE 40408
40397: PUSH
40398: LD_VAR 0 8
40402: PUSH
40403: LD_INT 5
40405: ARRAY
40406: NOT
40407: OR
40408: IFTRUE 40448
40410: PUSH
40411: LD_VAR 0 8
40415: PUSH
40416: LD_INT 6
40418: ARRAY
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: LD_INT 2
40425: PUSH
40426: LD_INT 7
40428: PUSH
40429: LD_INT 9
40431: PUSH
40432: LD_INT 10
40434: PUSH
40435: LD_INT 11
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: IN
40446: NOT
40447: OR
40448: IFFALSE 40454
// exit ;
40450: POP
40451: POP
40452: GO 40539
// end ;
40454: GO 40111
40456: POP
40457: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40458: LD_VAR 0 9
40462: PPUSH
40463: LD_VAR 0 3
40467: PPUSH
40468: LD_VAR 0 4
40472: PPUSH
40473: LD_INT 20
40475: PPUSH
40476: CALL 32358 0 4
40480: PUSH
40481: LD_INT 4
40483: ARRAY
40484: IFFALSE 40488
// exit ;
40486: GO 40539
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40488: LD_VAR 0 2
40492: PUSH
40493: LD_INT 29
40495: PUSH
40496: LD_INT 30
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: IN
40503: IFFALSE 40527
40505: PUSH
40506: LD_VAR 0 3
40510: PPUSH
40511: LD_VAR 0 4
40515: PPUSH
40516: LD_VAR 0 9
40520: PPUSH
40521: CALL_OW 440
40525: NOT
40526: AND
40527: IFFALSE 40531
// exit ;
40529: GO 40539
// result := true ;
40531: LD_ADDR_VAR 0 6
40535: PUSH
40536: LD_INT 1
40538: ST_TO_ADDR
// end ;
40539: LD_VAR 0 6
40543: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40544: LD_INT 0
40546: PPUSH
40547: PPUSH
40548: PPUSH
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
40566: PPUSH
40567: PPUSH
40568: PPUSH
40569: PPUSH
40570: PPUSH
40571: PPUSH
40572: PPUSH
40573: PPUSH
40574: PPUSH
40575: PPUSH
40576: PPUSH
40577: PPUSH
40578: PPUSH
40579: PPUSH
40580: PPUSH
40581: PPUSH
40582: PPUSH
40583: PPUSH
40584: PPUSH
40585: PPUSH
40586: PPUSH
40587: PPUSH
40588: PPUSH
40589: PPUSH
40590: PPUSH
40591: PPUSH
40592: PPUSH
40593: PPUSH
40594: PPUSH
40595: PPUSH
40596: PPUSH
40597: PPUSH
40598: PPUSH
40599: PPUSH
40600: PPUSH
40601: PPUSH
40602: PPUSH
40603: PPUSH
// result = [ ] ;
40604: LD_ADDR_VAR 0 7
40608: PUSH
40609: EMPTY
40610: ST_TO_ADDR
// temp_list = [ ] ;
40611: LD_ADDR_VAR 0 9
40615: PUSH
40616: EMPTY
40617: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40618: LD_VAR 0 4
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: LD_INT 2
40631: PUSH
40632: LD_INT 3
40634: PUSH
40635: LD_INT 4
40637: PUSH
40638: LD_INT 5
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: IN
40649: NOT
40650: IFTRUE 40693
40652: PUSH
40653: LD_VAR 0 1
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: IN
40668: IFFALSE 40692
40670: PUSH
40671: LD_VAR 0 5
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: LD_INT 3
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: LIST
40689: IN
40690: NOT
40691: AND
40692: OR
40693: IFFALSE 40697
// exit ;
40695: GO 59096
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40697: LD_VAR 0 1
40701: PUSH
40702: LD_INT 6
40704: PUSH
40705: LD_INT 7
40707: PUSH
40708: LD_INT 8
40710: PUSH
40711: LD_INT 13
40713: PUSH
40714: LD_INT 12
40716: PUSH
40717: LD_INT 15
40719: PUSH
40720: LD_INT 11
40722: PUSH
40723: LD_INT 14
40725: PUSH
40726: LD_INT 10
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: IN
40740: IFFALSE 40750
// btype = b_lab ;
40742: LD_ADDR_VAR 0 1
40746: PUSH
40747: LD_INT 6
40749: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40750: LD_VAR 0 6
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: LD_INT 2
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: LIST
40768: IN
40769: NOT
40770: IFTRUE 40838
40772: PUSH
40773: LD_VAR 0 1
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: LD_INT 2
40786: PUSH
40787: LD_INT 3
40789: PUSH
40790: LD_INT 6
40792: PUSH
40793: LD_INT 36
40795: PUSH
40796: LD_INT 4
40798: PUSH
40799: LD_INT 5
40801: PUSH
40802: LD_INT 31
40804: PUSH
40805: LD_INT 32
40807: PUSH
40808: LD_INT 33
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: IN
40824: NOT
40825: IFFALSE 40837
40827: PUSH
40828: LD_VAR 0 6
40832: PUSH
40833: LD_INT 1
40835: EQUAL
40836: AND
40837: OR
40838: IFTRUE 40870
40840: PUSH
40841: LD_VAR 0 1
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: LD_INT 3
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: IN
40856: NOT
40857: IFFALSE 40869
40859: PUSH
40860: LD_VAR 0 6
40864: PUSH
40865: LD_INT 2
40867: EQUAL
40868: AND
40869: OR
40870: IFFALSE 40880
// mode = 0 ;
40872: LD_ADDR_VAR 0 6
40876: PUSH
40877: LD_INT 0
40879: ST_TO_ADDR
// case mode of 0 :
40880: LD_VAR 0 6
40884: PUSH
40885: LD_INT 0
40887: DOUBLE
40888: EQUAL
40889: IFTRUE 40893
40891: GO 52346
40893: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40894: LD_ADDR_VAR 0 11
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: LD_INT 2
40979: NEG
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: LD_INT 2
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: LD_INT 3
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: LD_INT 3
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: LD_INT 2
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41087: LD_ADDR_VAR 0 12
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: LD_INT 0
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: LD_INT 1
41171: NEG
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 2
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 2
41210: NEG
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 2
41221: NEG
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 2
41233: NEG
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 3
41244: NEG
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 3
41255: NEG
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41283: LD_ADDR_VAR 0 13
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 1
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: LD_INT 2
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 1
41396: PUSH
41397: LD_INT 2
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: NEG
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 2
41418: NEG
41419: PUSH
41420: LD_INT 2
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: NEG
41431: PUSH
41432: LD_INT 3
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 3
41442: NEG
41443: PUSH
41444: LD_INT 2
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 3
41454: NEG
41455: PUSH
41456: LD_INT 3
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41482: LD_ADDR_VAR 0 14
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 0
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: NEG
41564: PUSH
41565: LD_INT 2
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: LD_INT 2
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: NEG
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 3
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: LD_INT 3
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41678: LD_ADDR_VAR 0 15
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 2
41801: NEG
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 2
41812: NEG
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 3
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 3
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41871: LD_ADDR_VAR 0 16
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 2
42006: NEG
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 3
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 3
42028: PUSH
42029: LD_INT 3
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: PUSH
42039: LD_INT 3
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42064: LD_ADDR_VAR 0 17
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 0
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 1
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 0
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: LD_INT 2
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: LD_INT 1
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 2
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 2
42199: PUSH
42200: LD_INT 2
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 2
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 2
42240: NEG
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 2
42251: NEG
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 2
42263: NEG
42264: PUSH
42265: LD_INT 2
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42294: LD_ADDR_VAR 0 18
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: NEG
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 1
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: LD_INT 2
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 2
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 1
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: PUSH
42430: LD_INT 2
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 2
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: NEG
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: NEG
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 2
42493: NEG
42494: PUSH
42495: LD_INT 2
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42524: LD_ADDR_VAR 0 19
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: LD_INT 2
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 2
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 2
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: LD_INT 2
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: LD_INT 2
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: NEG
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42754: LD_ADDR_VAR 0 20
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 1
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 1
42835: NEG
42836: PUSH
42837: LD_INT 2
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 2
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 2
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 2
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 2
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 2
42930: NEG
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 2
42953: NEG
42954: PUSH
42955: LD_INT 2
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42984: LD_ADDR_VAR 0 21
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 1
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 1
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: LD_INT 2
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: PUSH
43120: LD_INT 2
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 1
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: NEG
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: NEG
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 2
43183: NEG
43184: PUSH
43185: LD_INT 2
43187: NEG
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43214: LD_ADDR_VAR 0 22
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 1
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 0
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: LD_INT 0
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: LD_INT 2
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 1
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: NEG
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43444: LD_ADDR_VAR 0 23
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: LD_INT 2
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: LD_INT 2
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 2
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 2
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: LD_INT 2
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 0
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: NEG
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 2
43620: NEG
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: NEG
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 2
43655: NEG
43656: PUSH
43657: LD_INT 3
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: LD_INT 3
43671: NEG
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: LD_INT 2
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43724: LD_ADDR_VAR 0 24
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: NEG
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: LD_INT 2
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: LD_INT 2
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 2
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 2
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 2
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: LD_INT 2
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: LD_INT 2
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: NEG
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 2
43911: NEG
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 2
43923: NEG
43924: PUSH
43925: LD_INT 2
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 1
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 3
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 3
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44000: LD_ADDR_VAR 0 25
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: LD_INT 2
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 2
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: LD_INT 2
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: LD_INT 2
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: NEG
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 3
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 3
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: LD_INT 3
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: LD_INT 3
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44274: LD_ADDR_VAR 0 26
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: LD_INT 2
44359: NEG
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: LD_INT 0
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: NEG
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: LD_INT 3
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 3
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44550: LD_ADDR_VAR 0 27
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: LD_INT 2
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 2
44737: NEG
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: LD_INT 2
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 2
44772: NEG
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 3
44783: NEG
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 3
44795: NEG
44796: PUSH
44797: LD_INT 2
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44830: LD_ADDR_VAR 0 28
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: NEG
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 2
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 2
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 0
44985: PUSH
44986: LD_INT 2
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: NEG
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: LD_INT 3
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: LD_INT 3
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 3
45065: NEG
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 3
45077: NEG
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45112: LD_ADDR_VAR 0 29
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 1
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 2
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: LD_INT 2
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: LD_INT 2
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 3
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 3
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: LD_INT 3
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 3
45356: NEG
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45391: LD_ADDR_VAR 0 30
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 2
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: LD_INT 2
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: NEG
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 3
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 3
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: LD_INT 3
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45669: LD_ADDR_VAR 0 31
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 2
45846: NEG
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: NEG
45859: PUSH
45860: LD_INT 3
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 2
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 1
45891: PUSH
45892: LD_INT 3
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 3
45912: NEG
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45947: LD_ADDR_VAR 0 32
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 2
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: LD_INT 3
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: LD_INT 2
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 3
46159: PUSH
46160: LD_INT 2
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: LD_INT 3
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: NEG
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 3
46190: NEG
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46225: LD_ADDR_VAR 0 33
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 2
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 2
46380: NEG
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: NEG
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: LD_INT 2
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: LD_INT 3
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 2
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 3
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: LD_INT 3
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 3
46469: NEG
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46504: LD_ADDR_VAR 0 34
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: NEG
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: NEG
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: NEG
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 2
46683: NEG
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: LD_INT 3
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 3
46749: NEG
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46784: LD_ADDR_VAR 0 35
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46896: LD_ADDR_VAR 0 36
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: LD_INT 1
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47008: LD_ADDR_VAR 0 37
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: NEG
47101: PUSH
47102: LD_INT 1
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47120: LD_ADDR_VAR 0 38
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 1
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: LD_INT 1
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: NEG
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: NEG
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47232: LD_ADDR_VAR 0 39
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 1
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: LD_INT 2
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47344: LD_ADDR_VAR 0 40
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 0
47361: PUSH
47362: LD_INT 1
47364: NEG
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47456: LD_ADDR_VAR 0 41
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 2
47634: NEG
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: LD_INT 3
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: LD_INT 1
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 3
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 3
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 3
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: LD_INT 3
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: LD_INT 3
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 3
47730: NEG
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 3
47741: NEG
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 3
47753: NEG
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 3
47765: NEG
47766: PUSH
47767: LD_INT 3
47769: NEG
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47806: LD_ADDR_VAR 0 42
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 1
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: LD_INT 2
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: LD_INT 2
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: LD_INT 3
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: LD_INT 3
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 3
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: LD_INT 2
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 3
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 3
48052: PUSH
48053: LD_INT 3
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: LD_INT 3
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 3
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 3
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 2
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 3
48103: NEG
48104: PUSH
48105: LD_INT 2
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 3
48115: NEG
48116: PUSH
48117: LD_INT 3
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48156: LD_ADDR_VAR 0 43
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: LD_INT 0
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: NEG
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 3
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 3
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 3
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 3
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 3
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 3
48452: NEG
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 3
48463: NEG
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48504: LD_ADDR_VAR 0 44
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 2
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 2
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 2
48670: NEG
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 2
48682: NEG
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: NEG
48695: PUSH
48696: LD_INT 3
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: LD_INT 1
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 3
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 3
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 3
48747: PUSH
48748: LD_INT 3
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: LD_INT 3
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 3
48778: NEG
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 3
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 3
48801: NEG
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 3
48813: NEG
48814: PUSH
48815: LD_INT 3
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48854: LD_ADDR_VAR 0 45
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: NEG
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: LD_INT 2
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 2
49032: NEG
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: LD_INT 3
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 3
49060: NEG
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: LD_INT 3
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 3
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 3
49100: PUSH
49101: LD_INT 3
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 2
49110: PUSH
49111: LD_INT 3
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 3
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 3
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 3
49151: NEG
49152: PUSH
49153: LD_INT 2
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 3
49163: NEG
49164: PUSH
49165: LD_INT 3
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49204: LD_ADDR_VAR 0 46
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: LD_INT 2
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 2
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: NEG
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 3
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: LD_INT 3
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 3
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 3
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 3
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 3
49500: NEG
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 3
49511: NEG
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49552: LD_ADDR_VAR 0 47
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 1
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 2
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: NEG
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49703: LD_ADDR_VAR 0 48
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 2
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49850: LD_ADDR_VAR 0 49
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: LD_INT 0
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 1
49919: NEG
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 2
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 2
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49994: LD_ADDR_VAR 0 50
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: LD_INT 1
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: LD_INT 2
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50138: LD_ADDR_VAR 0 51
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 2
50250: NEG
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 2
50261: NEG
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50285: LD_ADDR_VAR 0 52
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: LD_INT 2
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50436: LD_ADDR_VAR 0 53
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: LD_INT 2
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 2
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 2
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 2
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: LD_INT 2
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50666: LD_ADDR_VAR 0 54
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: LD_INT 2
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: PUSH
50802: LD_INT 2
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 2
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 2
50842: NEG
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: LD_INT 2
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50896: LD_ADDR_VAR 0 55
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 0
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: NEG
50978: PUSH
50979: LD_INT 2
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: LD_INT 2
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: LD_INT 1
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 2
51095: NEG
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51126: LD_ADDR_VAR 0 56
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: LD_INT 2
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: LD_INT 2
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51356: LD_ADDR_VAR 0 57
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: LD_INT 1
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 1
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: NEG
51438: PUSH
51439: LD_INT 2
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 2
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 2
51555: NEG
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51586: LD_ADDR_VAR 0 58
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: NEG
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51816: LD_ADDR_VAR 0 59
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 1
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51904: LD_ADDR_VAR 0 60
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: LD_INT 1
51977: NEG
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51992: LD_ADDR_VAR 0 61
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52080: LD_ADDR_VAR 0 62
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: LD_INT 1
52100: NEG
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: LD_INT 1
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52168: LD_ADDR_VAR 0 63
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: NEG
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52256: LD_ADDR_VAR 0 64
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: ST_TO_ADDR
// end ; 1 :
52344: GO 58241
52346: LD_INT 1
52348: DOUBLE
52349: EQUAL
52350: IFTRUE 52354
52352: GO 54977
52354: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52355: LD_ADDR_VAR 0 11
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 3
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: LIST
52398: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52399: LD_ADDR_VAR 0 12
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 3
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 3
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: LIST
52439: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52440: LD_ADDR_VAR 0 13
52444: PUSH
52445: LD_INT 3
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 3
52457: PUSH
52458: LD_INT 3
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: LD_INT 3
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: LIST
52479: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52480: LD_ADDR_VAR 0 14
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: LD_INT 3
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 3
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 2
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: LIST
52520: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52521: LD_ADDR_VAR 0 15
52525: PUSH
52526: LD_INT 2
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 3
52539: NEG
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 3
52550: NEG
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: LIST
52564: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52565: LD_ADDR_VAR 0 16
52569: PUSH
52570: LD_INT 2
52572: NEG
52573: PUSH
52574: LD_INT 3
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 3
52584: NEG
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 3
52596: NEG
52597: PUSH
52598: LD_INT 3
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: LIST
52610: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52611: LD_ADDR_VAR 0 17
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: LD_INT 3
52622: NEG
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: LD_INT 3
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: LIST
52654: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52655: LD_ADDR_VAR 0 18
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: LIST
52695: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52696: LD_ADDR_VAR 0 19
52700: PUSH
52701: LD_INT 3
52703: PUSH
52704: LD_INT 2
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 3
52713: PUSH
52714: LD_INT 3
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: LD_INT 3
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: LIST
52735: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52736: LD_ADDR_VAR 0 20
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 3
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: LD_INT 3
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: LIST
52776: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52777: LD_ADDR_VAR 0 21
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 3
52795: NEG
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: LIST
52820: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52821: LD_ADDR_VAR 0 22
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: LD_INT 3
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 3
52840: NEG
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 3
52852: NEG
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: LIST
52866: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52867: LD_ADDR_VAR 0 23
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: LD_INT 3
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: LD_INT 4
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 3
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: LIST
52910: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52911: LD_ADDR_VAR 0 24
52915: PUSH
52916: LD_INT 3
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 3
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 4
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: LIST
52951: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52952: LD_ADDR_VAR 0 25
52956: PUSH
52957: LD_INT 3
52959: PUSH
52960: LD_INT 3
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 4
52969: PUSH
52970: LD_INT 3
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 3
52979: PUSH
52980: LD_INT 4
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: LIST
52991: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52992: LD_ADDR_VAR 0 26
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: LD_INT 3
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 1
53009: PUSH
53010: LD_INT 4
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 3
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: LIST
53032: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53033: LD_ADDR_VAR 0 27
53037: PUSH
53038: LD_INT 3
53040: NEG
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 3
53051: NEG
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 4
53062: NEG
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: LIST
53076: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53077: LD_ADDR_VAR 0 28
53081: PUSH
53082: LD_INT 3
53084: NEG
53085: PUSH
53086: LD_INT 3
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 3
53096: NEG
53097: PUSH
53098: LD_INT 4
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 4
53108: NEG
53109: PUSH
53110: LD_INT 3
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: LIST
53122: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53123: LD_ADDR_VAR 0 29
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: LD_INT 3
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: LD_INT 3
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: LD_INT 2
53156: NEG
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: NEG
53165: PUSH
53166: LD_INT 4
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 4
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: LD_INT 3
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: LD_INT 5
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 5
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 4
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: LD_INT 6
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 6
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 5
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53278: LD_ADDR_VAR 0 30
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 3
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 3
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 3
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 4
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 4
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 4
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 5
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 5
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 5
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 6
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 6
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53421: LD_ADDR_VAR 0 31
53425: PUSH
53426: LD_INT 3
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 3
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: LD_INT 3
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 4
53458: PUSH
53459: LD_INT 3
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 4
53468: PUSH
53469: LD_INT 4
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: LD_INT 4
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 5
53488: PUSH
53489: LD_INT 4
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 5
53498: PUSH
53499: LD_INT 5
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 4
53508: PUSH
53509: LD_INT 5
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 6
53518: PUSH
53519: LD_INT 5
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 6
53528: PUSH
53529: LD_INT 6
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 5
53538: PUSH
53539: LD_INT 6
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53560: LD_ADDR_VAR 0 32
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 3
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 3
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: LD_INT 4
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 4
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: LD_INT 3
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: LD_INT 5
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: LD_INT 5
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: LD_INT 4
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: PUSH
53661: LD_INT 6
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: LD_INT 6
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: LD_INT 5
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53703: LD_ADDR_VAR 0 33
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 3
53721: NEG
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 3
53732: NEG
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 3
53744: NEG
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 4
53755: NEG
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 4
53766: NEG
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 4
53778: NEG
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 5
53789: NEG
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 5
53800: NEG
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 5
53812: NEG
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 6
53823: NEG
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 6
53834: NEG
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53858: LD_ADDR_VAR 0 34
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: LD_INT 3
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 3
53877: NEG
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 3
53889: NEG
53890: PUSH
53891: LD_INT 3
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 3
53901: NEG
53902: PUSH
53903: LD_INT 4
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 4
53913: NEG
53914: PUSH
53915: LD_INT 3
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 4
53925: NEG
53926: PUSH
53927: LD_INT 4
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 4
53937: NEG
53938: PUSH
53939: LD_INT 5
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 5
53949: NEG
53950: PUSH
53951: LD_INT 4
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 5
53961: NEG
53962: PUSH
53963: LD_INT 5
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 5
53973: NEG
53974: PUSH
53975: LD_INT 6
53977: NEG
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 6
53985: NEG
53986: PUSH
53987: LD_INT 5
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 6
53997: NEG
53998: PUSH
53999: LD_INT 6
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54021: LD_ADDR_VAR 0 41
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: LD_INT 3
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: LIST
54064: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54065: LD_ADDR_VAR 0 42
54069: PUSH
54070: LD_INT 2
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: LIST
54105: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54106: LD_ADDR_VAR 0 43
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 3
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: LD_INT 3
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: LIST
54145: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54146: LD_ADDR_VAR 0 44
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 3
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: LIST
54186: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54187: LD_ADDR_VAR 0 45
54191: PUSH
54192: LD_INT 2
54194: NEG
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: LIST
54230: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54231: LD_ADDR_VAR 0 46
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: LD_INT 2
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: LD_INT 3
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 3
54262: NEG
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54277: LD_ADDR_VAR 0 47
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: LD_INT 3
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: LD_INT 3
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54310: LD_ADDR_VAR 0 48
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: LD_INT 2
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 2
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54341: LD_ADDR_VAR 0 49
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54370: LD_ADDR_VAR 0 50
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54399: LD_ADDR_VAR 0 51
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: LD_INT 2
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54430: LD_ADDR_VAR 0 52
54434: PUSH
54435: LD_INT 3
54437: NEG
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 3
54449: NEG
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54463: LD_ADDR_VAR 0 53
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: LD_INT 3
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 3
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: LIST
54506: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54507: LD_ADDR_VAR 0 54
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 3
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 3
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: LIST
54547: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54548: LD_ADDR_VAR 0 55
54552: PUSH
54553: LD_INT 3
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 3
54565: PUSH
54566: LD_INT 3
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: LD_INT 3
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: LIST
54587: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54588: LD_ADDR_VAR 0 56
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: LD_INT 3
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: LD_INT 3
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: LIST
54628: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54629: LD_ADDR_VAR 0 57
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 3
54647: NEG
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 3
54658: NEG
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: LIST
54672: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54673: LD_ADDR_VAR 0 58
54677: PUSH
54678: LD_INT 2
54680: NEG
54681: PUSH
54682: LD_INT 3
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 3
54692: NEG
54693: PUSH
54694: LD_INT 2
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 3
54704: NEG
54705: PUSH
54706: LD_INT 3
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: LIST
54718: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54719: LD_ADDR_VAR 0 59
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 2
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: LIST
54762: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54763: LD_ADDR_VAR 0 60
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54804: LD_ADDR_VAR 0 61
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: LIST
54843: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54844: LD_ADDR_VAR 0 62
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: LD_INT 2
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: LD_INT 2
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: LIST
54884: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54885: LD_ADDR_VAR 0 63
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 2
54914: NEG
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54929: LD_ADDR_VAR 0 64
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: NEG
54961: PUSH
54962: LD_INT 2
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: LIST
54974: ST_TO_ADDR
// end ; 2 :
54975: GO 58241
54977: LD_INT 2
54979: DOUBLE
54980: EQUAL
54981: IFTRUE 54985
54983: GO 58240
54985: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54986: LD_ADDR_VAR 0 29
54990: PUSH
54991: LD_INT 4
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 4
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 5
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 5
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 4
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 3
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 3
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 3
55065: PUSH
55066: LD_INT 2
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 5
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: LD_INT 3
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 3
55096: PUSH
55097: LD_INT 2
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 4
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 4
55116: PUSH
55117: LD_INT 4
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: LD_INT 4
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 4
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: PUSH
55167: LD_INT 4
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: LD_INT 4
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 3
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 4
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: LD_INT 5
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 5
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: LD_INT 4
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: LD_INT 5
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: NEG
55259: PUSH
55260: LD_INT 3
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 3
55269: NEG
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 3
55280: NEG
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: NEG
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: NEG
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 3
55314: NEG
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 4
55325: NEG
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 4
55336: NEG
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 4
55348: NEG
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 2
55360: NEG
55361: PUSH
55362: LD_INT 2
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 4
55371: NEG
55372: PUSH
55373: LD_INT 4
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 4
55383: NEG
55384: PUSH
55385: LD_INT 5
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 3
55395: NEG
55396: PUSH
55397: LD_INT 4
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 3
55407: NEG
55408: PUSH
55409: LD_INT 3
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 4
55419: NEG
55420: PUSH
55421: LD_INT 3
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 5
55431: NEG
55432: PUSH
55433: LD_INT 4
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 5
55443: NEG
55444: PUSH
55445: LD_INT 5
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: NEG
55456: PUSH
55457: LD_INT 5
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 5
55467: NEG
55468: PUSH
55469: LD_INT 3
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55524: LD_ADDR_VAR 0 30
55528: PUSH
55529: LD_INT 4
55531: PUSH
55532: LD_INT 4
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 4
55541: PUSH
55542: LD_INT 3
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 5
55551: PUSH
55552: LD_INT 4
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 5
55561: PUSH
55562: LD_INT 5
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 4
55571: PUSH
55572: LD_INT 5
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 3
55581: PUSH
55582: LD_INT 4
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 3
55591: PUSH
55592: LD_INT 3
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 5
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 3
55611: PUSH
55612: LD_INT 5
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 3
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 3
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 4
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 4
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: LD_INT 3
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: LD_INT 4
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 4
55714: NEG
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 4
55725: NEG
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 3
55737: NEG
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 3
55748: NEG
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 4
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 5
55770: NEG
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 5
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 5
55793: NEG
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 3
55805: NEG
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: NEG
55817: PUSH
55818: LD_INT 3
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: LD_INT 4
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: LD_INT 3
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 3
55864: NEG
55865: PUSH
55866: LD_INT 2
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 4
55876: NEG
55877: PUSH
55878: LD_INT 3
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 4
55888: NEG
55889: PUSH
55890: LD_INT 4
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: NEG
55901: PUSH
55902: LD_INT 4
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 4
55912: NEG
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 4
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: LD_INT 5
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: LD_INT 4
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: LD_INT 3
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 3
55971: NEG
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 4
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 5
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: LD_INT 3
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 2
56014: NEG
56015: PUSH
56016: LD_INT 5
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56071: LD_ADDR_VAR 0 31
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 4
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 3
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: LD_INT 4
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: LD_INT 5
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 5
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 4
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: LD_INT 3
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: LD_INT 5
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 3
56171: NEG
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 3
56182: NEG
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 2
56205: NEG
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 3
56216: NEG
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 4
56227: NEG
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 4
56238: NEG
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 4
56250: NEG
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 4
56273: NEG
56274: PUSH
56275: LD_INT 4
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 4
56285: NEG
56286: PUSH
56287: LD_INT 5
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 3
56297: NEG
56298: PUSH
56299: LD_INT 4
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 3
56309: NEG
56310: PUSH
56311: LD_INT 3
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 4
56321: NEG
56322: PUSH
56323: LD_INT 3
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 5
56333: NEG
56334: PUSH
56335: LD_INT 4
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 5
56345: NEG
56346: PUSH
56347: LD_INT 5
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 3
56357: NEG
56358: PUSH
56359: LD_INT 5
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 5
56369: NEG
56370: PUSH
56371: LD_INT 3
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 3
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 4
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 3
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: LD_INT 2
56417: NEG
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 2
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: LD_INT 3
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 4
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: LD_INT 4
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 4
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 4
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 5
56504: PUSH
56505: LD_INT 0
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 5
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 4
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 3
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 3
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 3
56555: PUSH
56556: LD_INT 2
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 5
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56621: LD_ADDR_VAR 0 32
56625: PUSH
56626: LD_INT 4
56628: NEG
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 4
56639: NEG
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: NEG
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 3
56662: NEG
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 4
56673: NEG
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 5
56684: NEG
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 5
56695: NEG
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 5
56707: NEG
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 3
56719: NEG
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: NEG
56731: PUSH
56732: LD_INT 3
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: LD_INT 4
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: LD_INT 3
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 3
56778: NEG
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 4
56790: NEG
56791: PUSH
56792: LD_INT 3
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 4
56802: NEG
56803: PUSH
56804: LD_INT 4
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 2
56814: NEG
56815: PUSH
56816: LD_INT 4
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 4
56826: NEG
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 4
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 5
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 4
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 3
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 3
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 4
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: LD_INT 5
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: LD_INT 3
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 2
56928: NEG
56929: PUSH
56930: LD_INT 5
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 3
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 3
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 4
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 4
56971: PUSH
56972: LD_INT 1
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 2
57012: PUSH
57013: LD_INT 2
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 4
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 4
57033: PUSH
57034: LD_INT 4
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 4
57043: PUSH
57044: LD_INT 3
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 5
57053: PUSH
57054: LD_INT 4
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 5
57063: PUSH
57064: LD_INT 5
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 4
57073: PUSH
57074: LD_INT 5
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 3
57083: PUSH
57084: LD_INT 4
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 3
57093: PUSH
57094: LD_INT 3
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 5
57103: PUSH
57104: LD_INT 3
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 3
57113: PUSH
57114: LD_INT 5
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57168: LD_ADDR_VAR 0 33
57172: PUSH
57173: LD_INT 4
57175: NEG
57176: PUSH
57177: LD_INT 4
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 4
57187: NEG
57188: PUSH
57189: LD_INT 5
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 3
57199: NEG
57200: PUSH
57201: LD_INT 4
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 3
57211: NEG
57212: PUSH
57213: LD_INT 3
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 4
57223: NEG
57224: PUSH
57225: LD_INT 3
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 5
57235: NEG
57236: PUSH
57237: LD_INT 4
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 5
57247: NEG
57248: PUSH
57249: LD_INT 5
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 3
57259: NEG
57260: PUSH
57261: LD_INT 5
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 5
57271: NEG
57272: PUSH
57273: LD_INT 3
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 3
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: LD_INT 4
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: LD_INT 2
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 1
57338: NEG
57339: PUSH
57340: LD_INT 3
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 4
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 2
57373: NEG
57374: PUSH
57375: LD_INT 4
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 4
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 4
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 5
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 5
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 4
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 3
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 3
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 3
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 5
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: LD_INT 3
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 3
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 4
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 4
57508: PUSH
57509: LD_INT 4
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 3
57518: PUSH
57519: LD_INT 4
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 2
57528: PUSH
57529: LD_INT 3
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 2
57538: PUSH
57539: LD_INT 2
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 4
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: LD_INT 4
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: LD_INT 4
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: LD_INT 3
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: LD_INT 4
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 5
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: LD_INT 5
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: LD_INT 4
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: LD_INT 3
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: LD_INT 5
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57706: LD_ADDR_VAR 0 34
57710: PUSH
57711: LD_INT 0
57713: PUSH
57714: LD_INT 4
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: LD_INT 5
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: LD_INT 4
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 3
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: LD_INT 3
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: LD_INT 4
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: LD_INT 5
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: LD_INT 3
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: LD_INT 5
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 3
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 4
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 4
57846: PUSH
57847: LD_INT 1
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 3
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 2
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 2
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: LD_INT 2
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 4
57898: PUSH
57899: LD_INT 2
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 4
57908: PUSH
57909: LD_INT 4
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 4
57918: PUSH
57919: LD_INT 3
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 5
57928: PUSH
57929: LD_INT 4
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 5
57938: PUSH
57939: LD_INT 5
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 4
57948: PUSH
57949: LD_INT 5
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 3
57958: PUSH
57959: LD_INT 4
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 3
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 5
57978: PUSH
57979: LD_INT 3
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 3
57988: PUSH
57989: LD_INT 5
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: LD_INT 3
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: LD_INT 2
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: LD_INT 3
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: LD_INT 4
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: LD_INT 4
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 2
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: LD_INT 4
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 4
58091: NEG
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 4
58102: NEG
58103: PUSH
58104: LD_INT 1
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 3
58114: NEG
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: NEG
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 4
58136: NEG
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 5
58147: NEG
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 5
58158: NEG
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 5
58170: NEG
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 3
58182: NEG
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: ST_TO_ADDR
// end ; end ;
58238: GO 58241
58240: POP
// case btype of b_depot , b_warehouse :
58241: LD_VAR 0 1
58245: PUSH
58246: LD_INT 0
58248: DOUBLE
58249: EQUAL
58250: IFTRUE 58260
58252: LD_INT 1
58254: DOUBLE
58255: EQUAL
58256: IFTRUE 58260
58258: GO 58461
58260: POP
// case nation of nation_american :
58261: LD_VAR 0 5
58265: PUSH
58266: LD_INT 1
58268: DOUBLE
58269: EQUAL
58270: IFTRUE 58274
58272: GO 58330
58274: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58275: LD_ADDR_VAR 0 9
58279: PUSH
58280: LD_VAR 0 11
58284: PUSH
58285: LD_VAR 0 12
58289: PUSH
58290: LD_VAR 0 13
58294: PUSH
58295: LD_VAR 0 14
58299: PUSH
58300: LD_VAR 0 15
58304: PUSH
58305: LD_VAR 0 16
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: PUSH
58318: LD_VAR 0 4
58322: PUSH
58323: LD_INT 1
58325: PLUS
58326: ARRAY
58327: ST_TO_ADDR
58328: GO 58459
58330: LD_INT 2
58332: DOUBLE
58333: EQUAL
58334: IFTRUE 58338
58336: GO 58394
58338: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58339: LD_ADDR_VAR 0 9
58343: PUSH
58344: LD_VAR 0 17
58348: PUSH
58349: LD_VAR 0 18
58353: PUSH
58354: LD_VAR 0 19
58358: PUSH
58359: LD_VAR 0 20
58363: PUSH
58364: LD_VAR 0 21
58368: PUSH
58369: LD_VAR 0 22
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: PUSH
58382: LD_VAR 0 4
58386: PUSH
58387: LD_INT 1
58389: PLUS
58390: ARRAY
58391: ST_TO_ADDR
58392: GO 58459
58394: LD_INT 3
58396: DOUBLE
58397: EQUAL
58398: IFTRUE 58402
58400: GO 58458
58402: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58403: LD_ADDR_VAR 0 9
58407: PUSH
58408: LD_VAR 0 23
58412: PUSH
58413: LD_VAR 0 24
58417: PUSH
58418: LD_VAR 0 25
58422: PUSH
58423: LD_VAR 0 26
58427: PUSH
58428: LD_VAR 0 27
58432: PUSH
58433: LD_VAR 0 28
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: PUSH
58446: LD_VAR 0 4
58450: PUSH
58451: LD_INT 1
58453: PLUS
58454: ARRAY
58455: ST_TO_ADDR
58456: GO 58459
58458: POP
58459: GO 59014
58461: LD_INT 2
58463: DOUBLE
58464: EQUAL
58465: IFTRUE 58475
58467: LD_INT 3
58469: DOUBLE
58470: EQUAL
58471: IFTRUE 58475
58473: GO 58531
58475: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58476: LD_ADDR_VAR 0 9
58480: PUSH
58481: LD_VAR 0 29
58485: PUSH
58486: LD_VAR 0 30
58490: PUSH
58491: LD_VAR 0 31
58495: PUSH
58496: LD_VAR 0 32
58500: PUSH
58501: LD_VAR 0 33
58505: PUSH
58506: LD_VAR 0 34
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: PUSH
58519: LD_VAR 0 4
58523: PUSH
58524: LD_INT 1
58526: PLUS
58527: ARRAY
58528: ST_TO_ADDR
58529: GO 59014
58531: LD_INT 16
58533: DOUBLE
58534: EQUAL
58535: IFTRUE 58593
58537: LD_INT 17
58539: DOUBLE
58540: EQUAL
58541: IFTRUE 58593
58543: LD_INT 18
58545: DOUBLE
58546: EQUAL
58547: IFTRUE 58593
58549: LD_INT 19
58551: DOUBLE
58552: EQUAL
58553: IFTRUE 58593
58555: LD_INT 22
58557: DOUBLE
58558: EQUAL
58559: IFTRUE 58593
58561: LD_INT 20
58563: DOUBLE
58564: EQUAL
58565: IFTRUE 58593
58567: LD_INT 21
58569: DOUBLE
58570: EQUAL
58571: IFTRUE 58593
58573: LD_INT 23
58575: DOUBLE
58576: EQUAL
58577: IFTRUE 58593
58579: LD_INT 24
58581: DOUBLE
58582: EQUAL
58583: IFTRUE 58593
58585: LD_INT 25
58587: DOUBLE
58588: EQUAL
58589: IFTRUE 58593
58591: GO 58649
58593: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58594: LD_ADDR_VAR 0 9
58598: PUSH
58599: LD_VAR 0 35
58603: PUSH
58604: LD_VAR 0 36
58608: PUSH
58609: LD_VAR 0 37
58613: PUSH
58614: LD_VAR 0 38
58618: PUSH
58619: LD_VAR 0 39
58623: PUSH
58624: LD_VAR 0 40
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: PUSH
58637: LD_VAR 0 4
58641: PUSH
58642: LD_INT 1
58644: PLUS
58645: ARRAY
58646: ST_TO_ADDR
58647: GO 59014
58649: LD_INT 6
58651: DOUBLE
58652: EQUAL
58653: IFTRUE 58705
58655: LD_INT 7
58657: DOUBLE
58658: EQUAL
58659: IFTRUE 58705
58661: LD_INT 8
58663: DOUBLE
58664: EQUAL
58665: IFTRUE 58705
58667: LD_INT 13
58669: DOUBLE
58670: EQUAL
58671: IFTRUE 58705
58673: LD_INT 12
58675: DOUBLE
58676: EQUAL
58677: IFTRUE 58705
58679: LD_INT 15
58681: DOUBLE
58682: EQUAL
58683: IFTRUE 58705
58685: LD_INT 11
58687: DOUBLE
58688: EQUAL
58689: IFTRUE 58705
58691: LD_INT 14
58693: DOUBLE
58694: EQUAL
58695: IFTRUE 58705
58697: LD_INT 10
58699: DOUBLE
58700: EQUAL
58701: IFTRUE 58705
58703: GO 58761
58705: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58706: LD_ADDR_VAR 0 9
58710: PUSH
58711: LD_VAR 0 41
58715: PUSH
58716: LD_VAR 0 42
58720: PUSH
58721: LD_VAR 0 43
58725: PUSH
58726: LD_VAR 0 44
58730: PUSH
58731: LD_VAR 0 45
58735: PUSH
58736: LD_VAR 0 46
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: PUSH
58749: LD_VAR 0 4
58753: PUSH
58754: LD_INT 1
58756: PLUS
58757: ARRAY
58758: ST_TO_ADDR
58759: GO 59014
58761: LD_INT 36
58763: DOUBLE
58764: EQUAL
58765: IFTRUE 58769
58767: GO 58825
58769: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58770: LD_ADDR_VAR 0 9
58774: PUSH
58775: LD_VAR 0 47
58779: PUSH
58780: LD_VAR 0 48
58784: PUSH
58785: LD_VAR 0 49
58789: PUSH
58790: LD_VAR 0 50
58794: PUSH
58795: LD_VAR 0 51
58799: PUSH
58800: LD_VAR 0 52
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: PUSH
58813: LD_VAR 0 4
58817: PUSH
58818: LD_INT 1
58820: PLUS
58821: ARRAY
58822: ST_TO_ADDR
58823: GO 59014
58825: LD_INT 4
58827: DOUBLE
58828: EQUAL
58829: IFTRUE 58851
58831: LD_INT 5
58833: DOUBLE
58834: EQUAL
58835: IFTRUE 58851
58837: LD_INT 34
58839: DOUBLE
58840: EQUAL
58841: IFTRUE 58851
58843: LD_INT 37
58845: DOUBLE
58846: EQUAL
58847: IFTRUE 58851
58849: GO 58907
58851: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58852: LD_ADDR_VAR 0 9
58856: PUSH
58857: LD_VAR 0 53
58861: PUSH
58862: LD_VAR 0 54
58866: PUSH
58867: LD_VAR 0 55
58871: PUSH
58872: LD_VAR 0 56
58876: PUSH
58877: LD_VAR 0 57
58881: PUSH
58882: LD_VAR 0 58
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: PUSH
58895: LD_VAR 0 4
58899: PUSH
58900: LD_INT 1
58902: PLUS
58903: ARRAY
58904: ST_TO_ADDR
58905: GO 59014
58907: LD_INT 31
58909: DOUBLE
58910: EQUAL
58911: IFTRUE 58957
58913: LD_INT 32
58915: DOUBLE
58916: EQUAL
58917: IFTRUE 58957
58919: LD_INT 33
58921: DOUBLE
58922: EQUAL
58923: IFTRUE 58957
58925: LD_INT 27
58927: DOUBLE
58928: EQUAL
58929: IFTRUE 58957
58931: LD_INT 26
58933: DOUBLE
58934: EQUAL
58935: IFTRUE 58957
58937: LD_INT 28
58939: DOUBLE
58940: EQUAL
58941: IFTRUE 58957
58943: LD_INT 29
58945: DOUBLE
58946: EQUAL
58947: IFTRUE 58957
58949: LD_INT 30
58951: DOUBLE
58952: EQUAL
58953: IFTRUE 58957
58955: GO 59013
58957: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58958: LD_ADDR_VAR 0 9
58962: PUSH
58963: LD_VAR 0 59
58967: PUSH
58968: LD_VAR 0 60
58972: PUSH
58973: LD_VAR 0 61
58977: PUSH
58978: LD_VAR 0 62
58982: PUSH
58983: LD_VAR 0 63
58987: PUSH
58988: LD_VAR 0 64
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: PUSH
59001: LD_VAR 0 4
59005: PUSH
59006: LD_INT 1
59008: PLUS
59009: ARRAY
59010: ST_TO_ADDR
59011: GO 59014
59013: POP
// temp_list2 = [ ] ;
59014: LD_ADDR_VAR 0 10
59018: PUSH
59019: EMPTY
59020: ST_TO_ADDR
// for i in temp_list do
59021: LD_ADDR_VAR 0 8
59025: PUSH
59026: LD_VAR 0 9
59030: PUSH
59031: FOR_IN
59032: IFFALSE 59084
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59034: LD_ADDR_VAR 0 10
59038: PUSH
59039: LD_VAR 0 10
59043: PUSH
59044: LD_VAR 0 8
59048: PUSH
59049: LD_INT 1
59051: ARRAY
59052: PUSH
59053: LD_VAR 0 2
59057: PLUS
59058: PUSH
59059: LD_VAR 0 8
59063: PUSH
59064: LD_INT 2
59066: ARRAY
59067: PUSH
59068: LD_VAR 0 3
59072: PLUS
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: EMPTY
59079: LIST
59080: ADD
59081: ST_TO_ADDR
59082: GO 59031
59084: POP
59085: POP
// result = temp_list2 ;
59086: LD_ADDR_VAR 0 7
59090: PUSH
59091: LD_VAR 0 10
59095: ST_TO_ADDR
// end ;
59096: LD_VAR 0 7
59100: RET
// export function EnemyInRange ( unit , dist ) ; begin
59101: LD_INT 0
59103: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59104: LD_ADDR_VAR 0 3
59108: PUSH
59109: LD_VAR 0 1
59113: PPUSH
59114: CALL_OW 255
59118: PPUSH
59119: LD_VAR 0 1
59123: PPUSH
59124: CALL_OW 250
59128: PPUSH
59129: LD_VAR 0 1
59133: PPUSH
59134: CALL_OW 251
59138: PPUSH
59139: LD_VAR 0 2
59143: PPUSH
59144: CALL 32358 0 4
59148: PUSH
59149: LD_INT 4
59151: ARRAY
59152: ST_TO_ADDR
// end ;
59153: LD_VAR 0 3
59157: RET
// export function PlayerSeeMe ( unit ) ; begin
59158: LD_INT 0
59160: PPUSH
// result := See ( your_side , unit ) ;
59161: LD_ADDR_VAR 0 2
59165: PUSH
59166: LD_OWVAR 2
59170: PPUSH
59171: LD_VAR 0 1
59175: PPUSH
59176: CALL_OW 292
59180: ST_TO_ADDR
// end ;
59181: LD_VAR 0 2
59185: RET
// export function ReverseDir ( unit ) ; begin
59186: LD_INT 0
59188: PPUSH
// if not unit then
59189: LD_VAR 0 1
59193: NOT
59194: IFFALSE 59198
// exit ;
59196: GO 59221
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59198: LD_ADDR_VAR 0 2
59202: PUSH
59203: LD_VAR 0 1
59207: PPUSH
59208: CALL_OW 254
59212: PUSH
59213: LD_INT 3
59215: PLUS
59216: PUSH
59217: LD_INT 6
59219: MOD
59220: ST_TO_ADDR
// end ;
59221: LD_VAR 0 2
59225: RET
// export function ReverseArray ( array ) ; var i ; begin
59226: LD_INT 0
59228: PPUSH
59229: PPUSH
// if not array then
59230: LD_VAR 0 1
59234: NOT
59235: IFFALSE 59239
// exit ;
59237: GO 59294
// result := [ ] ;
59239: LD_ADDR_VAR 0 2
59243: PUSH
59244: EMPTY
59245: ST_TO_ADDR
// for i := array downto 1 do
59246: LD_ADDR_VAR 0 3
59250: PUSH
59251: DOUBLE
59252: LD_VAR 0 1
59256: INC
59257: ST_TO_ADDR
59258: LD_INT 1
59260: PUSH
59261: FOR_DOWNTO
59262: IFFALSE 59292
// result := Join ( result , array [ i ] ) ;
59264: LD_ADDR_VAR 0 2
59268: PUSH
59269: LD_VAR 0 2
59273: PPUSH
59274: LD_VAR 0 1
59278: PUSH
59279: LD_VAR 0 3
59283: ARRAY
59284: PPUSH
59285: CALL 64146 0 2
59289: ST_TO_ADDR
59290: GO 59261
59292: POP
59293: POP
// end ;
59294: LD_VAR 0 2
59298: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59299: LD_INT 0
59301: PPUSH
59302: PPUSH
59303: PPUSH
59304: PPUSH
59305: PPUSH
59306: PPUSH
// if not unit or not hexes then
59307: LD_VAR 0 1
59311: NOT
59312: IFTRUE 59321
59314: PUSH
59315: LD_VAR 0 2
59319: NOT
59320: OR
59321: IFFALSE 59325
// exit ;
59323: GO 59448
// dist := 9999 ;
59325: LD_ADDR_VAR 0 5
59329: PUSH
59330: LD_INT 9999
59332: ST_TO_ADDR
// for i = 1 to hexes do
59333: LD_ADDR_VAR 0 4
59337: PUSH
59338: DOUBLE
59339: LD_INT 1
59341: DEC
59342: ST_TO_ADDR
59343: LD_VAR 0 2
59347: PUSH
59348: FOR_TO
59349: IFFALSE 59436
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59351: LD_ADDR_VAR 0 6
59355: PUSH
59356: LD_VAR 0 1
59360: PPUSH
59361: LD_VAR 0 2
59365: PUSH
59366: LD_VAR 0 4
59370: ARRAY
59371: PUSH
59372: LD_INT 1
59374: ARRAY
59375: PPUSH
59376: LD_VAR 0 2
59380: PUSH
59381: LD_VAR 0 4
59385: ARRAY
59386: PUSH
59387: LD_INT 2
59389: ARRAY
59390: PPUSH
59391: CALL_OW 297
59395: ST_TO_ADDR
// if tdist < dist then
59396: LD_VAR 0 6
59400: PUSH
59401: LD_VAR 0 5
59405: LESS
59406: IFFALSE 59434
// begin hex := hexes [ i ] ;
59408: LD_ADDR_VAR 0 8
59412: PUSH
59413: LD_VAR 0 2
59417: PUSH
59418: LD_VAR 0 4
59422: ARRAY
59423: ST_TO_ADDR
// dist := tdist ;
59424: LD_ADDR_VAR 0 5
59428: PUSH
59429: LD_VAR 0 6
59433: ST_TO_ADDR
// end ; end ;
59434: GO 59348
59436: POP
59437: POP
// result := hex ;
59438: LD_ADDR_VAR 0 3
59442: PUSH
59443: LD_VAR 0 8
59447: ST_TO_ADDR
// end ;
59448: LD_VAR 0 3
59452: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59453: LD_INT 0
59455: PPUSH
59456: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59457: LD_VAR 0 1
59461: NOT
59462: IFTRUE 59501
59464: PUSH
59465: LD_VAR 0 1
59469: PUSH
59470: LD_INT 21
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 23
59482: PUSH
59483: LD_INT 2
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PPUSH
59494: CALL_OW 69
59498: IN
59499: NOT
59500: OR
59501: IFFALSE 59505
// exit ;
59503: GO 59552
// for i = 1 to 3 do
59505: LD_ADDR_VAR 0 3
59509: PUSH
59510: DOUBLE
59511: LD_INT 1
59513: DEC
59514: ST_TO_ADDR
59515: LD_INT 3
59517: PUSH
59518: FOR_TO
59519: IFFALSE 59550
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59521: LD_VAR 0 1
59525: PPUSH
59526: CALL_OW 250
59530: PPUSH
59531: LD_VAR 0 1
59535: PPUSH
59536: CALL_OW 251
59540: PPUSH
59541: LD_INT 1
59543: PPUSH
59544: CALL_OW 453
59548: GO 59518
59550: POP
59551: POP
// end ;
59552: LD_VAR 0 2
59556: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59557: LD_INT 0
59559: PPUSH
59560: PPUSH
59561: PPUSH
59562: PPUSH
59563: PPUSH
59564: PPUSH
// if not unit or not enemy_unit then
59565: LD_VAR 0 1
59569: NOT
59570: IFTRUE 59579
59572: PUSH
59573: LD_VAR 0 2
59577: NOT
59578: OR
59579: IFFALSE 59583
// exit ;
59581: GO 60064
// if GetLives ( i ) < 250 then
59583: LD_VAR 0 4
59587: PPUSH
59588: CALL_OW 256
59592: PUSH
59593: LD_INT 250
59595: LESS
59596: IFFALSE 59609
// begin ComAutodestruct ( i ) ;
59598: LD_VAR 0 4
59602: PPUSH
59603: CALL 59453 0 1
// exit ;
59607: GO 60064
// end ; x := GetX ( enemy_unit ) ;
59609: LD_ADDR_VAR 0 7
59613: PUSH
59614: LD_VAR 0 2
59618: PPUSH
59619: CALL_OW 250
59623: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59624: LD_ADDR_VAR 0 8
59628: PUSH
59629: LD_VAR 0 2
59633: PPUSH
59634: CALL_OW 251
59638: ST_TO_ADDR
// if not x or not y then
59639: LD_VAR 0 7
59643: NOT
59644: IFTRUE 59653
59646: PUSH
59647: LD_VAR 0 8
59651: NOT
59652: OR
59653: IFFALSE 59657
// exit ;
59655: GO 60064
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59657: LD_ADDR_VAR 0 6
59661: PUSH
59662: LD_VAR 0 7
59666: PPUSH
59667: LD_INT 0
59669: PPUSH
59670: LD_INT 4
59672: PPUSH
59673: CALL_OW 272
59677: PUSH
59678: LD_VAR 0 8
59682: PPUSH
59683: LD_INT 0
59685: PPUSH
59686: LD_INT 4
59688: PPUSH
59689: CALL_OW 273
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_VAR 0 7
59702: PPUSH
59703: LD_INT 1
59705: PPUSH
59706: LD_INT 4
59708: PPUSH
59709: CALL_OW 272
59713: PUSH
59714: LD_VAR 0 8
59718: PPUSH
59719: LD_INT 1
59721: PPUSH
59722: LD_INT 4
59724: PPUSH
59725: CALL_OW 273
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_VAR 0 7
59738: PPUSH
59739: LD_INT 2
59741: PPUSH
59742: LD_INT 4
59744: PPUSH
59745: CALL_OW 272
59749: PUSH
59750: LD_VAR 0 8
59754: PPUSH
59755: LD_INT 2
59757: PPUSH
59758: LD_INT 4
59760: PPUSH
59761: CALL_OW 273
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_VAR 0 7
59774: PPUSH
59775: LD_INT 3
59777: PPUSH
59778: LD_INT 4
59780: PPUSH
59781: CALL_OW 272
59785: PUSH
59786: LD_VAR 0 8
59790: PPUSH
59791: LD_INT 3
59793: PPUSH
59794: LD_INT 4
59796: PPUSH
59797: CALL_OW 273
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_VAR 0 7
59810: PPUSH
59811: LD_INT 4
59813: PPUSH
59814: LD_INT 4
59816: PPUSH
59817: CALL_OW 272
59821: PUSH
59822: LD_VAR 0 8
59826: PPUSH
59827: LD_INT 4
59829: PPUSH
59830: LD_INT 4
59832: PPUSH
59833: CALL_OW 273
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_VAR 0 7
59846: PPUSH
59847: LD_INT 5
59849: PPUSH
59850: LD_INT 4
59852: PPUSH
59853: CALL_OW 272
59857: PUSH
59858: LD_VAR 0 8
59862: PPUSH
59863: LD_INT 5
59865: PPUSH
59866: LD_INT 4
59868: PPUSH
59869: CALL_OW 273
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: ST_TO_ADDR
// for i = tmp downto 1 do
59886: LD_ADDR_VAR 0 4
59890: PUSH
59891: DOUBLE
59892: LD_VAR 0 6
59896: INC
59897: ST_TO_ADDR
59898: LD_INT 1
59900: PUSH
59901: FOR_DOWNTO
59902: IFFALSE 60005
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59904: LD_VAR 0 6
59908: PUSH
59909: LD_VAR 0 4
59913: ARRAY
59914: PUSH
59915: LD_INT 1
59917: ARRAY
59918: PPUSH
59919: LD_VAR 0 6
59923: PUSH
59924: LD_VAR 0 4
59928: ARRAY
59929: PUSH
59930: LD_INT 2
59932: ARRAY
59933: PPUSH
59934: CALL_OW 488
59938: NOT
59939: IFTRUE 59981
59941: PUSH
59942: LD_VAR 0 6
59946: PUSH
59947: LD_VAR 0 4
59951: ARRAY
59952: PUSH
59953: LD_INT 1
59955: ARRAY
59956: PPUSH
59957: LD_VAR 0 6
59961: PUSH
59962: LD_VAR 0 4
59966: ARRAY
59967: PUSH
59968: LD_INT 2
59970: ARRAY
59971: PPUSH
59972: CALL_OW 428
59976: PUSH
59977: LD_INT 0
59979: NONEQUAL
59980: OR
59981: IFFALSE 60003
// tmp := Delete ( tmp , i ) ;
59983: LD_ADDR_VAR 0 6
59987: PUSH
59988: LD_VAR 0 6
59992: PPUSH
59993: LD_VAR 0 4
59997: PPUSH
59998: CALL_OW 3
60002: ST_TO_ADDR
60003: GO 59901
60005: POP
60006: POP
// j := GetClosestHex ( unit , tmp ) ;
60007: LD_ADDR_VAR 0 5
60011: PUSH
60012: LD_VAR 0 1
60016: PPUSH
60017: LD_VAR 0 6
60021: PPUSH
60022: CALL 59299 0 2
60026: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60027: LD_VAR 0 1
60031: PPUSH
60032: LD_VAR 0 5
60036: PUSH
60037: LD_INT 1
60039: ARRAY
60040: PPUSH
60041: LD_VAR 0 5
60045: PUSH
60046: LD_INT 2
60048: ARRAY
60049: PPUSH
60050: CALL_OW 111
// result := j ;
60054: LD_ADDR_VAR 0 3
60058: PUSH
60059: LD_VAR 0 5
60063: ST_TO_ADDR
// end ;
60064: LD_VAR 0 3
60068: RET
// export function PrepareApemanSoldier ( ) ; begin
60069: LD_INT 0
60071: PPUSH
// uc_nation := 0 ;
60072: LD_ADDR_OWVAR 21
60076: PUSH
60077: LD_INT 0
60079: ST_TO_ADDR
// hc_sex := sex_male ;
60080: LD_ADDR_OWVAR 27
60084: PUSH
60085: LD_INT 1
60087: ST_TO_ADDR
// hc_name :=  ;
60088: LD_ADDR_OWVAR 26
60092: PUSH
60093: LD_STRING 
60095: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60096: LD_ADDR_OWVAR 28
60100: PUSH
60101: LD_INT 15
60103: ST_TO_ADDR
// hc_gallery :=  ;
60104: LD_ADDR_OWVAR 33
60108: PUSH
60109: LD_STRING 
60111: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60112: LD_ADDR_OWVAR 31
60116: PUSH
60117: LD_INT 0
60119: PPUSH
60120: LD_INT 3
60122: PPUSH
60123: CALL_OW 12
60127: PUSH
60128: LD_INT 0
60130: PPUSH
60131: LD_INT 3
60133: PPUSH
60134: CALL_OW 12
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
60151: LD_ADDR_OWVAR 29
60155: PUSH
60156: LD_INT 10
60158: PUSH
60159: LD_INT 12
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: ST_TO_ADDR
// end ;
60166: LD_VAR 0 1
60170: RET
// export function PrepareApemanEngineer ( ) ; begin
60171: LD_INT 0
60173: PPUSH
// uc_nation := 0 ;
60174: LD_ADDR_OWVAR 21
60178: PUSH
60179: LD_INT 0
60181: ST_TO_ADDR
// hc_sex := sex_male ;
60182: LD_ADDR_OWVAR 27
60186: PUSH
60187: LD_INT 1
60189: ST_TO_ADDR
// hc_name :=  ;
60190: LD_ADDR_OWVAR 26
60194: PUSH
60195: LD_STRING 
60197: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60198: LD_ADDR_OWVAR 28
60202: PUSH
60203: LD_INT 16
60205: ST_TO_ADDR
// hc_gallery :=  ;
60206: LD_ADDR_OWVAR 33
60210: PUSH
60211: LD_STRING 
60213: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60214: LD_ADDR_OWVAR 31
60218: PUSH
60219: LD_INT 0
60221: PPUSH
60222: LD_INT 3
60224: PPUSH
60225: CALL_OW 12
60229: PUSH
60230: LD_INT 0
60232: PPUSH
60233: LD_INT 3
60235: PPUSH
60236: CALL_OW 12
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
60253: LD_ADDR_OWVAR 29
60257: PUSH
60258: LD_INT 10
60260: PUSH
60261: LD_INT 12
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: ST_TO_ADDR
// end ;
60268: LD_VAR 0 1
60272: RET
// export function PrepareApeman ( agressivity ) ; begin
60273: LD_INT 0
60275: PPUSH
// uc_side := 0 ;
60276: LD_ADDR_OWVAR 20
60280: PUSH
60281: LD_INT 0
60283: ST_TO_ADDR
// uc_nation := 0 ;
60284: LD_ADDR_OWVAR 21
60288: PUSH
60289: LD_INT 0
60291: ST_TO_ADDR
// hc_sex := sex_male ;
60292: LD_ADDR_OWVAR 27
60296: PUSH
60297: LD_INT 1
60299: ST_TO_ADDR
// hc_class := class_apeman ;
60300: LD_ADDR_OWVAR 28
60304: PUSH
60305: LD_INT 12
60307: ST_TO_ADDR
// hc_gallery :=  ;
60308: LD_ADDR_OWVAR 33
60312: PUSH
60313: LD_STRING 
60315: ST_TO_ADDR
// hc_name :=  ;
60316: LD_ADDR_OWVAR 26
60320: PUSH
60321: LD_STRING 
60323: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
60324: LD_ADDR_OWVAR 29
60328: PUSH
60329: LD_INT 10
60331: PUSH
60332: LD_INT 12
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: ST_TO_ADDR
// if agressivity = 0 then
60339: LD_VAR 0 1
60343: PUSH
60344: LD_INT 0
60346: EQUAL
60347: IFFALSE 60359
// hc_agressivity := 0 else
60349: LD_ADDR_OWVAR 35
60353: PUSH
60354: LD_INT 0
60356: ST_TO_ADDR
60357: GO 60380
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60359: LD_ADDR_OWVAR 35
60363: PUSH
60364: LD_VAR 0 1
60368: NEG
60369: PPUSH
60370: LD_VAR 0 1
60374: PPUSH
60375: CALL_OW 12
60379: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60380: LD_ADDR_OWVAR 31
60384: PUSH
60385: LD_INT 0
60387: PPUSH
60388: LD_INT 3
60390: PPUSH
60391: CALL_OW 12
60395: PUSH
60396: LD_INT 0
60398: PPUSH
60399: LD_INT 3
60401: PPUSH
60402: CALL_OW 12
60406: PUSH
60407: LD_INT 0
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: ST_TO_ADDR
// end ;
60419: LD_VAR 0 2
60423: RET
// export function PrepareTiger ( agressivity ) ; begin
60424: LD_INT 0
60426: PPUSH
// uc_side := 0 ;
60427: LD_ADDR_OWVAR 20
60431: PUSH
60432: LD_INT 0
60434: ST_TO_ADDR
// uc_nation := 0 ;
60435: LD_ADDR_OWVAR 21
60439: PUSH
60440: LD_INT 0
60442: ST_TO_ADDR
// InitHc ;
60443: CALL_OW 19
// hc_class := class_tiger ;
60447: LD_ADDR_OWVAR 28
60451: PUSH
60452: LD_INT 14
60454: ST_TO_ADDR
// hc_gallery :=  ;
60455: LD_ADDR_OWVAR 33
60459: PUSH
60460: LD_STRING 
60462: ST_TO_ADDR
// hc_name :=  ;
60463: LD_ADDR_OWVAR 26
60467: PUSH
60468: LD_STRING 
60470: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60471: LD_ADDR_OWVAR 35
60475: PUSH
60476: LD_VAR 0 1
60480: NEG
60481: PPUSH
60482: LD_VAR 0 1
60486: PPUSH
60487: CALL_OW 12
60491: ST_TO_ADDR
// end ;
60492: LD_VAR 0 2
60496: RET
// export function PrepareEnchidna ( ) ; begin
60497: LD_INT 0
60499: PPUSH
// uc_side := 0 ;
60500: LD_ADDR_OWVAR 20
60504: PUSH
60505: LD_INT 0
60507: ST_TO_ADDR
// uc_nation := 0 ;
60508: LD_ADDR_OWVAR 21
60512: PUSH
60513: LD_INT 0
60515: ST_TO_ADDR
// InitHc ;
60516: CALL_OW 19
// hc_class := class_baggie ;
60520: LD_ADDR_OWVAR 28
60524: PUSH
60525: LD_INT 13
60527: ST_TO_ADDR
// hc_gallery :=  ;
60528: LD_ADDR_OWVAR 33
60532: PUSH
60533: LD_STRING 
60535: ST_TO_ADDR
// hc_name :=  ;
60536: LD_ADDR_OWVAR 26
60540: PUSH
60541: LD_STRING 
60543: ST_TO_ADDR
// end ;
60544: LD_VAR 0 1
60548: RET
// export function PrepareFrog ( ) ; begin
60549: LD_INT 0
60551: PPUSH
// uc_side := 0 ;
60552: LD_ADDR_OWVAR 20
60556: PUSH
60557: LD_INT 0
60559: ST_TO_ADDR
// uc_nation := 0 ;
60560: LD_ADDR_OWVAR 21
60564: PUSH
60565: LD_INT 0
60567: ST_TO_ADDR
// InitHc ;
60568: CALL_OW 19
// hc_class := class_frog ;
60572: LD_ADDR_OWVAR 28
60576: PUSH
60577: LD_INT 19
60579: ST_TO_ADDR
// hc_gallery :=  ;
60580: LD_ADDR_OWVAR 33
60584: PUSH
60585: LD_STRING 
60587: ST_TO_ADDR
// hc_name :=  ;
60588: LD_ADDR_OWVAR 26
60592: PUSH
60593: LD_STRING 
60595: ST_TO_ADDR
// end ;
60596: LD_VAR 0 1
60600: RET
// export function PrepareFish ( ) ; begin
60601: LD_INT 0
60603: PPUSH
// uc_side := 0 ;
60604: LD_ADDR_OWVAR 20
60608: PUSH
60609: LD_INT 0
60611: ST_TO_ADDR
// uc_nation := 0 ;
60612: LD_ADDR_OWVAR 21
60616: PUSH
60617: LD_INT 0
60619: ST_TO_ADDR
// InitHc ;
60620: CALL_OW 19
// hc_class := class_fish ;
60624: LD_ADDR_OWVAR 28
60628: PUSH
60629: LD_INT 20
60631: ST_TO_ADDR
// hc_gallery :=  ;
60632: LD_ADDR_OWVAR 33
60636: PUSH
60637: LD_STRING 
60639: ST_TO_ADDR
// hc_name :=  ;
60640: LD_ADDR_OWVAR 26
60644: PUSH
60645: LD_STRING 
60647: ST_TO_ADDR
// end ;
60648: LD_VAR 0 1
60652: RET
// export function PrepareBird ( ) ; begin
60653: LD_INT 0
60655: PPUSH
// uc_side := 0 ;
60656: LD_ADDR_OWVAR 20
60660: PUSH
60661: LD_INT 0
60663: ST_TO_ADDR
// uc_nation := 0 ;
60664: LD_ADDR_OWVAR 21
60668: PUSH
60669: LD_INT 0
60671: ST_TO_ADDR
// InitHc ;
60672: CALL_OW 19
// hc_class := class_phororhacos ;
60676: LD_ADDR_OWVAR 28
60680: PUSH
60681: LD_INT 18
60683: ST_TO_ADDR
// hc_gallery :=  ;
60684: LD_ADDR_OWVAR 33
60688: PUSH
60689: LD_STRING 
60691: ST_TO_ADDR
// hc_name :=  ;
60692: LD_ADDR_OWVAR 26
60696: PUSH
60697: LD_STRING 
60699: ST_TO_ADDR
// end ;
60700: LD_VAR 0 1
60704: RET
// export function PrepareHorse ( ) ; begin
60705: LD_INT 0
60707: PPUSH
// uc_side := 0 ;
60708: LD_ADDR_OWVAR 20
60712: PUSH
60713: LD_INT 0
60715: ST_TO_ADDR
// uc_nation := 0 ;
60716: LD_ADDR_OWVAR 21
60720: PUSH
60721: LD_INT 0
60723: ST_TO_ADDR
// InitHc ;
60724: CALL_OW 19
// hc_class := class_horse ;
60728: LD_ADDR_OWVAR 28
60732: PUSH
60733: LD_INT 21
60735: ST_TO_ADDR
// hc_gallery :=  ;
60736: LD_ADDR_OWVAR 33
60740: PUSH
60741: LD_STRING 
60743: ST_TO_ADDR
// hc_name :=  ;
60744: LD_ADDR_OWVAR 26
60748: PUSH
60749: LD_STRING 
60751: ST_TO_ADDR
// end ;
60752: LD_VAR 0 1
60756: RET
// export function PrepareMastodont ( ) ; begin
60757: LD_INT 0
60759: PPUSH
// uc_side := 0 ;
60760: LD_ADDR_OWVAR 20
60764: PUSH
60765: LD_INT 0
60767: ST_TO_ADDR
// uc_nation := 0 ;
60768: LD_ADDR_OWVAR 21
60772: PUSH
60773: LD_INT 0
60775: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60776: LD_ADDR_OWVAR 37
60780: PUSH
60781: LD_INT 31
60783: ST_TO_ADDR
// vc_control := control_rider ;
60784: LD_ADDR_OWVAR 38
60788: PUSH
60789: LD_INT 4
60791: ST_TO_ADDR
// end ;
60792: LD_VAR 0 1
60796: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60797: LD_INT 0
60799: PPUSH
60800: PPUSH
60801: PPUSH
// uc_side = 0 ;
60802: LD_ADDR_OWVAR 20
60806: PUSH
60807: LD_INT 0
60809: ST_TO_ADDR
// uc_nation = 0 ;
60810: LD_ADDR_OWVAR 21
60814: PUSH
60815: LD_INT 0
60817: ST_TO_ADDR
// InitHc_All ( ) ;
60818: CALL_OW 584
// InitVc ;
60822: CALL_OW 20
// if mastodonts then
60826: LD_VAR 0 6
60830: IFFALSE 60897
// for i = 1 to mastodonts do
60832: LD_ADDR_VAR 0 11
60836: PUSH
60837: DOUBLE
60838: LD_INT 1
60840: DEC
60841: ST_TO_ADDR
60842: LD_VAR 0 6
60846: PUSH
60847: FOR_TO
60848: IFFALSE 60895
// begin vc_chassis := 31 ;
60850: LD_ADDR_OWVAR 37
60854: PUSH
60855: LD_INT 31
60857: ST_TO_ADDR
// vc_control := control_rider ;
60858: LD_ADDR_OWVAR 38
60862: PUSH
60863: LD_INT 4
60865: ST_TO_ADDR
// animal := CreateVehicle ;
60866: LD_ADDR_VAR 0 12
60870: PUSH
60871: CALL_OW 45
60875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60876: LD_VAR 0 12
60880: PPUSH
60881: LD_VAR 0 8
60885: PPUSH
60886: LD_INT 0
60888: PPUSH
60889: CALL 63039 0 3
// end ;
60893: GO 60847
60895: POP
60896: POP
// if horses then
60897: LD_VAR 0 5
60901: IFFALSE 60968
// for i = 1 to horses do
60903: LD_ADDR_VAR 0 11
60907: PUSH
60908: DOUBLE
60909: LD_INT 1
60911: DEC
60912: ST_TO_ADDR
60913: LD_VAR 0 5
60917: PUSH
60918: FOR_TO
60919: IFFALSE 60966
// begin hc_class := 21 ;
60921: LD_ADDR_OWVAR 28
60925: PUSH
60926: LD_INT 21
60928: ST_TO_ADDR
// hc_gallery :=  ;
60929: LD_ADDR_OWVAR 33
60933: PUSH
60934: LD_STRING 
60936: ST_TO_ADDR
// animal := CreateHuman ;
60937: LD_ADDR_VAR 0 12
60941: PUSH
60942: CALL_OW 44
60946: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60947: LD_VAR 0 12
60951: PPUSH
60952: LD_VAR 0 8
60956: PPUSH
60957: LD_INT 0
60959: PPUSH
60960: CALL 63039 0 3
// end ;
60964: GO 60918
60966: POP
60967: POP
// if birds then
60968: LD_VAR 0 1
60972: IFFALSE 61039
// for i = 1 to birds do
60974: LD_ADDR_VAR 0 11
60978: PUSH
60979: DOUBLE
60980: LD_INT 1
60982: DEC
60983: ST_TO_ADDR
60984: LD_VAR 0 1
60988: PUSH
60989: FOR_TO
60990: IFFALSE 61037
// begin hc_class := 18 ;
60992: LD_ADDR_OWVAR 28
60996: PUSH
60997: LD_INT 18
60999: ST_TO_ADDR
// hc_gallery =  ;
61000: LD_ADDR_OWVAR 33
61004: PUSH
61005: LD_STRING 
61007: ST_TO_ADDR
// animal := CreateHuman ;
61008: LD_ADDR_VAR 0 12
61012: PUSH
61013: CALL_OW 44
61017: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61018: LD_VAR 0 12
61022: PPUSH
61023: LD_VAR 0 8
61027: PPUSH
61028: LD_INT 0
61030: PPUSH
61031: CALL 63039 0 3
// end ;
61035: GO 60989
61037: POP
61038: POP
// if tigers then
61039: LD_VAR 0 2
61043: IFFALSE 61127
// for i = 1 to tigers do
61045: LD_ADDR_VAR 0 11
61049: PUSH
61050: DOUBLE
61051: LD_INT 1
61053: DEC
61054: ST_TO_ADDR
61055: LD_VAR 0 2
61059: PUSH
61060: FOR_TO
61061: IFFALSE 61125
// begin hc_class = class_tiger ;
61063: LD_ADDR_OWVAR 28
61067: PUSH
61068: LD_INT 14
61070: ST_TO_ADDR
// hc_gallery =  ;
61071: LD_ADDR_OWVAR 33
61075: PUSH
61076: LD_STRING 
61078: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61079: LD_ADDR_OWVAR 35
61083: PUSH
61084: LD_INT 7
61086: NEG
61087: PPUSH
61088: LD_INT 7
61090: PPUSH
61091: CALL_OW 12
61095: ST_TO_ADDR
// animal := CreateHuman ;
61096: LD_ADDR_VAR 0 12
61100: PUSH
61101: CALL_OW 44
61105: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61106: LD_VAR 0 12
61110: PPUSH
61111: LD_VAR 0 8
61115: PPUSH
61116: LD_INT 0
61118: PPUSH
61119: CALL 63039 0 3
// end ;
61123: GO 61060
61125: POP
61126: POP
// if apemans then
61127: LD_VAR 0 3
61131: IFFALSE 61254
// for i = 1 to apemans do
61133: LD_ADDR_VAR 0 11
61137: PUSH
61138: DOUBLE
61139: LD_INT 1
61141: DEC
61142: ST_TO_ADDR
61143: LD_VAR 0 3
61147: PUSH
61148: FOR_TO
61149: IFFALSE 61252
// begin hc_class = class_apeman ;
61151: LD_ADDR_OWVAR 28
61155: PUSH
61156: LD_INT 12
61158: ST_TO_ADDR
// hc_gallery =  ;
61159: LD_ADDR_OWVAR 33
61163: PUSH
61164: LD_STRING 
61166: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61167: LD_ADDR_OWVAR 35
61171: PUSH
61172: LD_INT 2
61174: NEG
61175: PPUSH
61176: LD_INT 2
61178: PPUSH
61179: CALL_OW 12
61183: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61184: LD_ADDR_OWVAR 31
61188: PUSH
61189: LD_INT 1
61191: PPUSH
61192: LD_INT 3
61194: PPUSH
61195: CALL_OW 12
61199: PUSH
61200: LD_INT 1
61202: PPUSH
61203: LD_INT 3
61205: PPUSH
61206: CALL_OW 12
61210: PUSH
61211: LD_INT 0
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: ST_TO_ADDR
// animal := CreateHuman ;
61223: LD_ADDR_VAR 0 12
61227: PUSH
61228: CALL_OW 44
61232: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61233: LD_VAR 0 12
61237: PPUSH
61238: LD_VAR 0 8
61242: PPUSH
61243: LD_INT 0
61245: PPUSH
61246: CALL 63039 0 3
// end ;
61250: GO 61148
61252: POP
61253: POP
// if enchidnas then
61254: LD_VAR 0 4
61258: IFFALSE 61325
// for i = 1 to enchidnas do
61260: LD_ADDR_VAR 0 11
61264: PUSH
61265: DOUBLE
61266: LD_INT 1
61268: DEC
61269: ST_TO_ADDR
61270: LD_VAR 0 4
61274: PUSH
61275: FOR_TO
61276: IFFALSE 61323
// begin hc_class = 13 ;
61278: LD_ADDR_OWVAR 28
61282: PUSH
61283: LD_INT 13
61285: ST_TO_ADDR
// hc_gallery =  ;
61286: LD_ADDR_OWVAR 33
61290: PUSH
61291: LD_STRING 
61293: ST_TO_ADDR
// animal := CreateHuman ;
61294: LD_ADDR_VAR 0 12
61298: PUSH
61299: CALL_OW 44
61303: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61304: LD_VAR 0 12
61308: PPUSH
61309: LD_VAR 0 8
61313: PPUSH
61314: LD_INT 0
61316: PPUSH
61317: CALL 63039 0 3
// end ;
61321: GO 61275
61323: POP
61324: POP
// if fishes then
61325: LD_VAR 0 7
61329: IFFALSE 61396
// for i = 1 to fishes do
61331: LD_ADDR_VAR 0 11
61335: PUSH
61336: DOUBLE
61337: LD_INT 1
61339: DEC
61340: ST_TO_ADDR
61341: LD_VAR 0 7
61345: PUSH
61346: FOR_TO
61347: IFFALSE 61394
// begin hc_class = 20 ;
61349: LD_ADDR_OWVAR 28
61353: PUSH
61354: LD_INT 20
61356: ST_TO_ADDR
// hc_gallery =  ;
61357: LD_ADDR_OWVAR 33
61361: PUSH
61362: LD_STRING 
61364: ST_TO_ADDR
// animal := CreateHuman ;
61365: LD_ADDR_VAR 0 12
61369: PUSH
61370: CALL_OW 44
61374: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61375: LD_VAR 0 12
61379: PPUSH
61380: LD_VAR 0 9
61384: PPUSH
61385: LD_INT 0
61387: PPUSH
61388: CALL 63039 0 3
// end ;
61392: GO 61346
61394: POP
61395: POP
// end ;
61396: LD_VAR 0 10
61400: RET
// export function WantHeal ( sci , unit ) ; begin
61401: LD_INT 0
61403: PPUSH
// if GetTaskList ( sci ) > 0 then
61404: LD_VAR 0 1
61408: PPUSH
61409: CALL_OW 437
61413: PUSH
61414: LD_INT 0
61416: GREATER
61417: IFFALSE 61489
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61419: LD_VAR 0 1
61423: PPUSH
61424: CALL_OW 437
61428: PUSH
61429: LD_INT 1
61431: ARRAY
61432: PUSH
61433: LD_INT 1
61435: ARRAY
61436: PUSH
61437: LD_STRING l
61439: EQUAL
61440: IFFALSE 61467
61442: PUSH
61443: LD_VAR 0 1
61447: PPUSH
61448: CALL_OW 437
61452: PUSH
61453: LD_INT 1
61455: ARRAY
61456: PUSH
61457: LD_INT 4
61459: ARRAY
61460: PUSH
61461: LD_VAR 0 2
61465: EQUAL
61466: AND
61467: IFFALSE 61479
// result := true else
61469: LD_ADDR_VAR 0 3
61473: PUSH
61474: LD_INT 1
61476: ST_TO_ADDR
61477: GO 61487
// result := false ;
61479: LD_ADDR_VAR 0 3
61483: PUSH
61484: LD_INT 0
61486: ST_TO_ADDR
// end else
61487: GO 61497
// result := false ;
61489: LD_ADDR_VAR 0 3
61493: PUSH
61494: LD_INT 0
61496: ST_TO_ADDR
// end ;
61497: LD_VAR 0 3
61501: RET
// export function HealTarget ( sci ) ; begin
61502: LD_INT 0
61504: PPUSH
// if not sci then
61505: LD_VAR 0 1
61509: NOT
61510: IFFALSE 61514
// exit ;
61512: GO 61579
// result := 0 ;
61514: LD_ADDR_VAR 0 2
61518: PUSH
61519: LD_INT 0
61521: ST_TO_ADDR
// if GetTaskList ( sci ) then
61522: LD_VAR 0 1
61526: PPUSH
61527: CALL_OW 437
61531: IFFALSE 61579
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61533: LD_VAR 0 1
61537: PPUSH
61538: CALL_OW 437
61542: PUSH
61543: LD_INT 1
61545: ARRAY
61546: PUSH
61547: LD_INT 1
61549: ARRAY
61550: PUSH
61551: LD_STRING l
61553: EQUAL
61554: IFFALSE 61579
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61556: LD_ADDR_VAR 0 2
61560: PUSH
61561: LD_VAR 0 1
61565: PPUSH
61566: CALL_OW 437
61570: PUSH
61571: LD_INT 1
61573: ARRAY
61574: PUSH
61575: LD_INT 4
61577: ARRAY
61578: ST_TO_ADDR
// end ;
61579: LD_VAR 0 2
61583: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61584: LD_INT 0
61586: PPUSH
61587: PPUSH
61588: PPUSH
61589: PPUSH
// if not base_units then
61590: LD_VAR 0 1
61594: NOT
61595: IFFALSE 61599
// exit ;
61597: GO 61686
// result := false ;
61599: LD_ADDR_VAR 0 2
61603: PUSH
61604: LD_INT 0
61606: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61607: LD_ADDR_VAR 0 5
61611: PUSH
61612: LD_VAR 0 1
61616: PPUSH
61617: LD_INT 21
61619: PUSH
61620: LD_INT 3
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PPUSH
61627: CALL_OW 72
61631: ST_TO_ADDR
// if not tmp then
61632: LD_VAR 0 5
61636: NOT
61637: IFFALSE 61641
// exit ;
61639: GO 61686
// for i in tmp do
61641: LD_ADDR_VAR 0 3
61645: PUSH
61646: LD_VAR 0 5
61650: PUSH
61651: FOR_IN
61652: IFFALSE 61684
// begin result := EnemyInRange ( i , 22 ) ;
61654: LD_ADDR_VAR 0 2
61658: PUSH
61659: LD_VAR 0 3
61663: PPUSH
61664: LD_INT 22
61666: PPUSH
61667: CALL 59101 0 2
61671: ST_TO_ADDR
// if result then
61672: LD_VAR 0 2
61676: IFFALSE 61682
// exit ;
61678: POP
61679: POP
61680: GO 61686
// end ;
61682: GO 61651
61684: POP
61685: POP
// end ;
61686: LD_VAR 0 2
61690: RET
// export function FilterByTag ( units , tag ) ; begin
61691: LD_INT 0
61693: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61694: LD_ADDR_VAR 0 3
61698: PUSH
61699: LD_VAR 0 1
61703: PPUSH
61704: LD_INT 120
61706: PUSH
61707: LD_VAR 0 2
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PPUSH
61716: CALL_OW 72
61720: ST_TO_ADDR
// end ;
61721: LD_VAR 0 3
61725: RET
// export function IsDriver ( un ) ; begin
61726: LD_INT 0
61728: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61729: LD_ADDR_VAR 0 2
61733: PUSH
61734: LD_VAR 0 1
61738: PUSH
61739: LD_INT 55
61741: PUSH
61742: EMPTY
61743: LIST
61744: PPUSH
61745: CALL_OW 69
61749: IN
61750: ST_TO_ADDR
// end ;
61751: LD_VAR 0 2
61755: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61756: LD_INT 0
61758: PPUSH
61759: PPUSH
// list := [ ] ;
61760: LD_ADDR_VAR 0 5
61764: PUSH
61765: EMPTY
61766: ST_TO_ADDR
// case d of 0 :
61767: LD_VAR 0 3
61771: PUSH
61772: LD_INT 0
61774: DOUBLE
61775: EQUAL
61776: IFTRUE 61780
61778: GO 61913
61780: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61781: LD_ADDR_VAR 0 5
61785: PUSH
61786: LD_VAR 0 1
61790: PUSH
61791: LD_INT 4
61793: MINUS
61794: PUSH
61795: LD_VAR 0 2
61799: PUSH
61800: LD_INT 4
61802: MINUS
61803: PUSH
61804: LD_INT 2
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: LIST
61811: PUSH
61812: LD_VAR 0 1
61816: PUSH
61817: LD_INT 3
61819: MINUS
61820: PUSH
61821: LD_VAR 0 2
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: LIST
61833: PUSH
61834: LD_VAR 0 1
61838: PUSH
61839: LD_INT 4
61841: PLUS
61842: PUSH
61843: LD_VAR 0 2
61847: PUSH
61848: LD_INT 4
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: LIST
61855: PUSH
61856: LD_VAR 0 1
61860: PUSH
61861: LD_INT 3
61863: PLUS
61864: PUSH
61865: LD_VAR 0 2
61869: PUSH
61870: LD_INT 3
61872: PLUS
61873: PUSH
61874: LD_INT 5
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: LIST
61881: PUSH
61882: LD_VAR 0 1
61886: PUSH
61887: LD_VAR 0 2
61891: PUSH
61892: LD_INT 4
61894: PLUS
61895: PUSH
61896: LD_INT 0
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: LIST
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: ST_TO_ADDR
// end ; 1 :
61911: GO 62611
61913: LD_INT 1
61915: DOUBLE
61916: EQUAL
61917: IFTRUE 61921
61919: GO 62054
61921: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61922: LD_ADDR_VAR 0 5
61926: PUSH
61927: LD_VAR 0 1
61931: PUSH
61932: LD_VAR 0 2
61936: PUSH
61937: LD_INT 4
61939: MINUS
61940: PUSH
61941: LD_INT 3
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: LIST
61948: PUSH
61949: LD_VAR 0 1
61953: PUSH
61954: LD_INT 3
61956: MINUS
61957: PUSH
61958: LD_VAR 0 2
61962: PUSH
61963: LD_INT 3
61965: MINUS
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: LIST
61974: PUSH
61975: LD_VAR 0 1
61979: PUSH
61980: LD_INT 4
61982: MINUS
61983: PUSH
61984: LD_VAR 0 2
61988: PUSH
61989: LD_INT 1
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: LIST
61996: PUSH
61997: LD_VAR 0 1
62001: PUSH
62002: LD_VAR 0 2
62006: PUSH
62007: LD_INT 3
62009: PLUS
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: LIST
62018: PUSH
62019: LD_VAR 0 1
62023: PUSH
62024: LD_INT 4
62026: PLUS
62027: PUSH
62028: LD_VAR 0 2
62032: PUSH
62033: LD_INT 4
62035: PLUS
62036: PUSH
62037: LD_INT 5
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: LIST
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: ST_TO_ADDR
// end ; 2 :
62052: GO 62611
62054: LD_INT 2
62056: DOUBLE
62057: EQUAL
62058: IFTRUE 62062
62060: GO 62191
62062: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62063: LD_ADDR_VAR 0 5
62067: PUSH
62068: LD_VAR 0 1
62072: PUSH
62073: LD_VAR 0 2
62077: PUSH
62078: LD_INT 3
62080: MINUS
62081: PUSH
62082: LD_INT 3
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: LIST
62089: PUSH
62090: LD_VAR 0 1
62094: PUSH
62095: LD_INT 4
62097: PLUS
62098: PUSH
62099: LD_VAR 0 2
62103: PUSH
62104: LD_INT 4
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: LIST
62111: PUSH
62112: LD_VAR 0 1
62116: PUSH
62117: LD_VAR 0 2
62121: PUSH
62122: LD_INT 4
62124: PLUS
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: LIST
62133: PUSH
62134: LD_VAR 0 1
62138: PUSH
62139: LD_INT 3
62141: MINUS
62142: PUSH
62143: LD_VAR 0 2
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: LIST
62155: PUSH
62156: LD_VAR 0 1
62160: PUSH
62161: LD_INT 4
62163: MINUS
62164: PUSH
62165: LD_VAR 0 2
62169: PUSH
62170: LD_INT 4
62172: MINUS
62173: PUSH
62174: LD_INT 2
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: LIST
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: ST_TO_ADDR
// end ; 3 :
62189: GO 62611
62191: LD_INT 3
62193: DOUBLE
62194: EQUAL
62195: IFTRUE 62199
62197: GO 62332
62199: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62200: LD_ADDR_VAR 0 5
62204: PUSH
62205: LD_VAR 0 1
62209: PUSH
62210: LD_INT 3
62212: PLUS
62213: PUSH
62214: LD_VAR 0 2
62218: PUSH
62219: LD_INT 4
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: LIST
62226: PUSH
62227: LD_VAR 0 1
62231: PUSH
62232: LD_INT 4
62234: PLUS
62235: PUSH
62236: LD_VAR 0 2
62240: PUSH
62241: LD_INT 4
62243: PLUS
62244: PUSH
62245: LD_INT 5
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: LIST
62252: PUSH
62253: LD_VAR 0 1
62257: PUSH
62258: LD_INT 4
62260: MINUS
62261: PUSH
62262: LD_VAR 0 2
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: LIST
62274: PUSH
62275: LD_VAR 0 1
62279: PUSH
62280: LD_VAR 0 2
62284: PUSH
62285: LD_INT 4
62287: MINUS
62288: PUSH
62289: LD_INT 3
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: LIST
62296: PUSH
62297: LD_VAR 0 1
62301: PUSH
62302: LD_INT 3
62304: MINUS
62305: PUSH
62306: LD_VAR 0 2
62310: PUSH
62311: LD_INT 3
62313: MINUS
62314: PUSH
62315: LD_INT 2
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: LIST
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: ST_TO_ADDR
// end ; 4 :
62330: GO 62611
62332: LD_INT 4
62334: DOUBLE
62335: EQUAL
62336: IFTRUE 62340
62338: GO 62473
62340: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62341: LD_ADDR_VAR 0 5
62345: PUSH
62346: LD_VAR 0 1
62350: PUSH
62351: LD_VAR 0 2
62355: PUSH
62356: LD_INT 4
62358: PLUS
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: LIST
62367: PUSH
62368: LD_VAR 0 1
62372: PUSH
62373: LD_INT 3
62375: PLUS
62376: PUSH
62377: LD_VAR 0 2
62381: PUSH
62382: LD_INT 3
62384: PLUS
62385: PUSH
62386: LD_INT 5
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: LIST
62393: PUSH
62394: LD_VAR 0 1
62398: PUSH
62399: LD_INT 4
62401: PLUS
62402: PUSH
62403: LD_VAR 0 2
62407: PUSH
62408: LD_INT 4
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: LIST
62415: PUSH
62416: LD_VAR 0 1
62420: PUSH
62421: LD_VAR 0 2
62425: PUSH
62426: LD_INT 3
62428: MINUS
62429: PUSH
62430: LD_INT 3
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: LIST
62437: PUSH
62438: LD_VAR 0 1
62442: PUSH
62443: LD_INT 4
62445: MINUS
62446: PUSH
62447: LD_VAR 0 2
62451: PUSH
62452: LD_INT 4
62454: MINUS
62455: PUSH
62456: LD_INT 2
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: LIST
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: ST_TO_ADDR
// end ; 5 :
62471: GO 62611
62473: LD_INT 5
62475: DOUBLE
62476: EQUAL
62477: IFTRUE 62481
62479: GO 62610
62481: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62482: LD_ADDR_VAR 0 5
62486: PUSH
62487: LD_VAR 0 1
62491: PUSH
62492: LD_INT 4
62494: MINUS
62495: PUSH
62496: LD_VAR 0 2
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: LIST
62508: PUSH
62509: LD_VAR 0 1
62513: PUSH
62514: LD_VAR 0 2
62518: PUSH
62519: LD_INT 4
62521: MINUS
62522: PUSH
62523: LD_INT 3
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: LIST
62530: PUSH
62531: LD_VAR 0 1
62535: PUSH
62536: LD_INT 4
62538: PLUS
62539: PUSH
62540: LD_VAR 0 2
62544: PUSH
62545: LD_INT 4
62547: PLUS
62548: PUSH
62549: LD_INT 5
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: LIST
62556: PUSH
62557: LD_VAR 0 1
62561: PUSH
62562: LD_INT 3
62564: PLUS
62565: PUSH
62566: LD_VAR 0 2
62570: PUSH
62571: LD_INT 4
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: LIST
62578: PUSH
62579: LD_VAR 0 1
62583: PUSH
62584: LD_VAR 0 2
62588: PUSH
62589: LD_INT 3
62591: PLUS
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: LIST
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: ST_TO_ADDR
// end ; end ;
62608: GO 62611
62610: POP
// result := list ;
62611: LD_ADDR_VAR 0 4
62615: PUSH
62616: LD_VAR 0 5
62620: ST_TO_ADDR
// end ;
62621: LD_VAR 0 4
62625: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62626: LD_INT 0
62628: PPUSH
62629: PPUSH
62630: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62631: LD_VAR 0 1
62635: NOT
62636: IFTRUE 62664
62638: PUSH
62639: LD_VAR 0 2
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: LD_INT 2
62649: PUSH
62650: LD_INT 3
62652: PUSH
62653: LD_INT 4
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: IN
62662: NOT
62663: OR
62664: IFFALSE 62668
// exit ;
62666: GO 62751
// tmp := [ ] ;
62668: LD_ADDR_VAR 0 5
62672: PUSH
62673: EMPTY
62674: ST_TO_ADDR
// for i in units do
62675: LD_ADDR_VAR 0 4
62679: PUSH
62680: LD_VAR 0 1
62684: PUSH
62685: FOR_IN
62686: IFFALSE 62720
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62688: LD_ADDR_VAR 0 5
62692: PUSH
62693: LD_VAR 0 5
62697: PPUSH
62698: LD_VAR 0 4
62702: PPUSH
62703: LD_VAR 0 2
62707: PPUSH
62708: CALL_OW 259
62712: PPUSH
62713: CALL 64146 0 2
62717: ST_TO_ADDR
62718: GO 62685
62720: POP
62721: POP
// if not tmp then
62722: LD_VAR 0 5
62726: NOT
62727: IFFALSE 62731
// exit ;
62729: GO 62751
// result := SortListByListDesc ( units , tmp ) ;
62731: LD_ADDR_VAR 0 3
62735: PUSH
62736: LD_VAR 0 1
62740: PPUSH
62741: LD_VAR 0 5
62745: PPUSH
62746: CALL_OW 77
62750: ST_TO_ADDR
// end ;
62751: LD_VAR 0 3
62755: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62756: LD_INT 0
62758: PPUSH
62759: PPUSH
62760: PPUSH
// result := false ;
62761: LD_ADDR_VAR 0 3
62765: PUSH
62766: LD_INT 0
62768: ST_TO_ADDR
// if not building then
62769: LD_VAR 0 2
62773: NOT
62774: IFFALSE 62778
// exit ;
62776: GO 62922
// x := GetX ( building ) ;
62778: LD_ADDR_VAR 0 4
62782: PUSH
62783: LD_VAR 0 2
62787: PPUSH
62788: CALL_OW 250
62792: ST_TO_ADDR
// y := GetY ( building ) ;
62793: LD_ADDR_VAR 0 5
62797: PUSH
62798: LD_VAR 0 2
62802: PPUSH
62803: CALL_OW 251
62807: ST_TO_ADDR
// if not x or not y then
62808: LD_VAR 0 4
62812: NOT
62813: IFTRUE 62822
62815: PUSH
62816: LD_VAR 0 5
62820: NOT
62821: OR
62822: IFFALSE 62826
// exit ;
62824: GO 62922
// if GetTaskList ( unit ) then
62826: LD_VAR 0 1
62830: PPUSH
62831: CALL_OW 437
62835: IFFALSE 62922
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62837: LD_STRING e
62839: PUSH
62840: LD_VAR 0 1
62844: PPUSH
62845: CALL_OW 437
62849: PUSH
62850: LD_INT 1
62852: ARRAY
62853: PUSH
62854: LD_INT 1
62856: ARRAY
62857: EQUAL
62858: IFFALSE 62885
62860: PUSH
62861: LD_VAR 0 4
62865: PUSH
62866: LD_VAR 0 1
62870: PPUSH
62871: CALL_OW 437
62875: PUSH
62876: LD_INT 1
62878: ARRAY
62879: PUSH
62880: LD_INT 2
62882: ARRAY
62883: EQUAL
62884: AND
62885: IFFALSE 62912
62887: PUSH
62888: LD_VAR 0 5
62892: PUSH
62893: LD_VAR 0 1
62897: PPUSH
62898: CALL_OW 437
62902: PUSH
62903: LD_INT 1
62905: ARRAY
62906: PUSH
62907: LD_INT 3
62909: ARRAY
62910: EQUAL
62911: AND
62912: IFFALSE 62922
// result := true end ;
62914: LD_ADDR_VAR 0 3
62918: PUSH
62919: LD_INT 1
62921: ST_TO_ADDR
// end ;
62922: LD_VAR 0 3
62926: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62927: LD_INT 0
62929: PPUSH
// result := false ;
62930: LD_ADDR_VAR 0 4
62934: PUSH
62935: LD_INT 0
62937: ST_TO_ADDR
// if GetTaskList ( unit ) then
62938: LD_VAR 0 1
62942: PPUSH
62943: CALL_OW 437
62947: IFFALSE 63034
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62949: LD_STRING M
62951: PUSH
62952: LD_VAR 0 1
62956: PPUSH
62957: CALL_OW 437
62961: PUSH
62962: LD_INT 1
62964: ARRAY
62965: PUSH
62966: LD_INT 1
62968: ARRAY
62969: EQUAL
62970: IFFALSE 62997
62972: PUSH
62973: LD_VAR 0 2
62977: PUSH
62978: LD_VAR 0 1
62982: PPUSH
62983: CALL_OW 437
62987: PUSH
62988: LD_INT 1
62990: ARRAY
62991: PUSH
62992: LD_INT 2
62994: ARRAY
62995: EQUAL
62996: AND
62997: IFFALSE 63024
62999: PUSH
63000: LD_VAR 0 3
63004: PUSH
63005: LD_VAR 0 1
63009: PPUSH
63010: CALL_OW 437
63014: PUSH
63015: LD_INT 1
63017: ARRAY
63018: PUSH
63019: LD_INT 3
63021: ARRAY
63022: EQUAL
63023: AND
63024: IFFALSE 63034
// result := true ;
63026: LD_ADDR_VAR 0 4
63030: PUSH
63031: LD_INT 1
63033: ST_TO_ADDR
// end ; end ;
63034: LD_VAR 0 4
63038: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63039: LD_INT 0
63041: PPUSH
63042: PPUSH
63043: PPUSH
63044: PPUSH
// if not unit or not area then
63045: LD_VAR 0 1
63049: NOT
63050: IFTRUE 63059
63052: PUSH
63053: LD_VAR 0 2
63057: NOT
63058: OR
63059: IFFALSE 63063
// exit ;
63061: GO 63239
// tmp := AreaToList ( area , i ) ;
63063: LD_ADDR_VAR 0 6
63067: PUSH
63068: LD_VAR 0 2
63072: PPUSH
63073: LD_VAR 0 5
63077: PPUSH
63078: CALL_OW 517
63082: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63083: LD_ADDR_VAR 0 5
63087: PUSH
63088: DOUBLE
63089: LD_INT 1
63091: DEC
63092: ST_TO_ADDR
63093: LD_VAR 0 6
63097: PUSH
63098: LD_INT 1
63100: ARRAY
63101: PUSH
63102: FOR_TO
63103: IFFALSE 63237
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63105: LD_ADDR_VAR 0 7
63109: PUSH
63110: LD_VAR 0 6
63114: PUSH
63115: LD_INT 1
63117: ARRAY
63118: PUSH
63119: LD_VAR 0 5
63123: ARRAY
63124: PUSH
63125: LD_VAR 0 6
63129: PUSH
63130: LD_INT 2
63132: ARRAY
63133: PUSH
63134: LD_VAR 0 5
63138: ARRAY
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63144: LD_INT 92
63146: PUSH
63147: LD_VAR 0 7
63151: PUSH
63152: LD_INT 1
63154: ARRAY
63155: PUSH
63156: LD_VAR 0 7
63160: PUSH
63161: LD_INT 2
63163: ARRAY
63164: PUSH
63165: LD_INT 2
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: PPUSH
63174: CALL_OW 69
63178: PUSH
63179: LD_INT 0
63181: EQUAL
63182: IFFALSE 63235
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63184: LD_VAR 0 1
63188: PPUSH
63189: LD_VAR 0 7
63193: PUSH
63194: LD_INT 1
63196: ARRAY
63197: PPUSH
63198: LD_VAR 0 7
63202: PUSH
63203: LD_INT 2
63205: ARRAY
63206: PPUSH
63207: LD_VAR 0 3
63211: PPUSH
63212: CALL_OW 48
// result := IsPlaced ( unit ) ;
63216: LD_ADDR_VAR 0 4
63220: PUSH
63221: LD_VAR 0 1
63225: PPUSH
63226: CALL_OW 305
63230: ST_TO_ADDR
// exit ;
63231: POP
63232: POP
63233: GO 63239
// end ; end ;
63235: GO 63102
63237: POP
63238: POP
// end ;
63239: LD_VAR 0 4
63243: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63244: LD_INT 0
63246: PPUSH
63247: PPUSH
63248: PPUSH
// if not side or side > 8 then
63249: LD_VAR 0 1
63253: NOT
63254: IFTRUE 63266
63256: PUSH
63257: LD_VAR 0 1
63261: PUSH
63262: LD_INT 8
63264: GREATER
63265: OR
63266: IFFALSE 63270
// exit ;
63268: GO 63457
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63270: LD_ADDR_VAR 0 4
63274: PUSH
63275: LD_INT 22
63277: PUSH
63278: LD_VAR 0 1
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 21
63289: PUSH
63290: LD_INT 3
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PPUSH
63301: CALL_OW 69
63305: ST_TO_ADDR
// if not tmp then
63306: LD_VAR 0 4
63310: NOT
63311: IFFALSE 63315
// exit ;
63313: GO 63457
// enable_addtolog := true ;
63315: LD_ADDR_OWVAR 81
63319: PUSH
63320: LD_INT 1
63322: ST_TO_ADDR
// AddToLog ( [ ) ;
63323: LD_STRING [
63325: PPUSH
63326: CALL_OW 561
// for i in tmp do
63330: LD_ADDR_VAR 0 3
63334: PUSH
63335: LD_VAR 0 4
63339: PUSH
63340: FOR_IN
63341: IFFALSE 63448
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63343: LD_STRING [
63345: PUSH
63346: LD_VAR 0 3
63350: PPUSH
63351: CALL_OW 266
63355: STR
63356: PUSH
63357: LD_STRING , 
63359: STR
63360: PUSH
63361: LD_VAR 0 3
63365: PPUSH
63366: CALL_OW 250
63370: STR
63371: PUSH
63372: LD_STRING , 
63374: STR
63375: PUSH
63376: LD_VAR 0 3
63380: PPUSH
63381: CALL_OW 251
63385: STR
63386: PUSH
63387: LD_STRING , 
63389: STR
63390: PUSH
63391: LD_VAR 0 3
63395: PPUSH
63396: CALL_OW 254
63400: STR
63401: PUSH
63402: LD_STRING , 
63404: STR
63405: PUSH
63406: LD_VAR 0 3
63410: PPUSH
63411: LD_INT 1
63413: PPUSH
63414: CALL_OW 268
63418: STR
63419: PUSH
63420: LD_STRING , 
63422: STR
63423: PUSH
63424: LD_VAR 0 3
63428: PPUSH
63429: LD_INT 2
63431: PPUSH
63432: CALL_OW 268
63436: STR
63437: PUSH
63438: LD_STRING ],
63440: STR
63441: PPUSH
63442: CALL_OW 561
// end ;
63446: GO 63340
63448: POP
63449: POP
// AddToLog ( ]; ) ;
63450: LD_STRING ];
63452: PPUSH
63453: CALL_OW 561
// end ;
63457: LD_VAR 0 2
63461: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63462: LD_INT 0
63464: PPUSH
63465: PPUSH
63466: PPUSH
63467: PPUSH
63468: PPUSH
// if not area or not rate or not max then
63469: LD_VAR 0 1
63473: NOT
63474: IFTRUE 63483
63476: PUSH
63477: LD_VAR 0 2
63481: NOT
63482: OR
63483: IFTRUE 63492
63485: PUSH
63486: LD_VAR 0 4
63490: NOT
63491: OR
63492: IFFALSE 63496
// exit ;
63494: GO 63685
// while 1 do
63496: LD_INT 1
63498: IFFALSE 63685
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63500: LD_ADDR_VAR 0 9
63504: PUSH
63505: LD_VAR 0 1
63509: PPUSH
63510: LD_INT 1
63512: PPUSH
63513: CALL_OW 287
63517: PUSH
63518: LD_INT 10
63520: MUL
63521: ST_TO_ADDR
// r := rate / 10 ;
63522: LD_ADDR_VAR 0 7
63526: PUSH
63527: LD_VAR 0 2
63531: PUSH
63532: LD_INT 10
63534: DIVREAL
63535: ST_TO_ADDR
// time := 1 1$00 ;
63536: LD_ADDR_VAR 0 8
63540: PUSH
63541: LD_INT 2100
63543: ST_TO_ADDR
// if amount < min then
63544: LD_VAR 0 9
63548: PUSH
63549: LD_VAR 0 3
63553: LESS
63554: IFFALSE 63572
// r := r * 2 else
63556: LD_ADDR_VAR 0 7
63560: PUSH
63561: LD_VAR 0 7
63565: PUSH
63566: LD_INT 2
63568: MUL
63569: ST_TO_ADDR
63570: GO 63598
// if amount > max then
63572: LD_VAR 0 9
63576: PUSH
63577: LD_VAR 0 4
63581: GREATER
63582: IFFALSE 63598
// r := r / 2 ;
63584: LD_ADDR_VAR 0 7
63588: PUSH
63589: LD_VAR 0 7
63593: PUSH
63594: LD_INT 2
63596: DIVREAL
63597: ST_TO_ADDR
// time := time / r ;
63598: LD_ADDR_VAR 0 8
63602: PUSH
63603: LD_VAR 0 8
63607: PUSH
63608: LD_VAR 0 7
63612: DIVREAL
63613: ST_TO_ADDR
// if time < 0 then
63614: LD_VAR 0 8
63618: PUSH
63619: LD_INT 0
63621: LESS
63622: IFFALSE 63639
// time := time * - 1 ;
63624: LD_ADDR_VAR 0 8
63628: PUSH
63629: LD_VAR 0 8
63633: PUSH
63634: LD_INT 1
63636: NEG
63637: MUL
63638: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63639: LD_VAR 0 8
63643: PUSH
63644: LD_INT 35
63646: PPUSH
63647: LD_INT 875
63649: PPUSH
63650: CALL_OW 12
63654: PLUS
63655: PPUSH
63656: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63660: LD_INT 1
63662: PPUSH
63663: LD_INT 5
63665: PPUSH
63666: CALL_OW 12
63670: PPUSH
63671: LD_VAR 0 1
63675: PPUSH
63676: LD_INT 1
63678: PPUSH
63679: CALL_OW 55
// end ;
63683: GO 63496
// end ;
63685: LD_VAR 0 5
63689: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63690: LD_INT 0
63692: PPUSH
63693: PPUSH
63694: PPUSH
63695: PPUSH
63696: PPUSH
63697: PPUSH
63698: PPUSH
63699: PPUSH
// if not turrets or not factories then
63700: LD_VAR 0 1
63704: NOT
63705: IFTRUE 63714
63707: PUSH
63708: LD_VAR 0 2
63712: NOT
63713: OR
63714: IFFALSE 63718
// exit ;
63716: GO 64025
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63718: LD_ADDR_VAR 0 10
63722: PUSH
63723: LD_INT 5
63725: PUSH
63726: LD_INT 6
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: PUSH
63736: LD_INT 4
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 3
63745: PUSH
63746: LD_INT 5
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 24
63760: PUSH
63761: LD_INT 25
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 23
63770: PUSH
63771: LD_INT 27
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 42
63784: PUSH
63785: LD_INT 43
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 44
63794: PUSH
63795: LD_INT 46
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 45
63804: PUSH
63805: LD_INT 47
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: LIST
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: LIST
63821: ST_TO_ADDR
// result := [ ] ;
63822: LD_ADDR_VAR 0 3
63826: PUSH
63827: EMPTY
63828: ST_TO_ADDR
// for i in turrets do
63829: LD_ADDR_VAR 0 4
63833: PUSH
63834: LD_VAR 0 1
63838: PUSH
63839: FOR_IN
63840: IFFALSE 64023
// begin nat := GetNation ( i ) ;
63842: LD_ADDR_VAR 0 7
63846: PUSH
63847: LD_VAR 0 4
63851: PPUSH
63852: CALL_OW 248
63856: ST_TO_ADDR
// weapon := 0 ;
63857: LD_ADDR_VAR 0 8
63861: PUSH
63862: LD_INT 0
63864: ST_TO_ADDR
// if not nat then
63865: LD_VAR 0 7
63869: NOT
63870: IFFALSE 63874
// continue ;
63872: GO 63839
// for j in list [ nat ] do
63874: LD_ADDR_VAR 0 5
63878: PUSH
63879: LD_VAR 0 10
63883: PUSH
63884: LD_VAR 0 7
63888: ARRAY
63889: PUSH
63890: FOR_IN
63891: IFFALSE 63932
// if GetBWeapon ( i ) = j [ 1 ] then
63893: LD_VAR 0 4
63897: PPUSH
63898: CALL_OW 269
63902: PUSH
63903: LD_VAR 0 5
63907: PUSH
63908: LD_INT 1
63910: ARRAY
63911: EQUAL
63912: IFFALSE 63930
// begin weapon := j [ 2 ] ;
63914: LD_ADDR_VAR 0 8
63918: PUSH
63919: LD_VAR 0 5
63923: PUSH
63924: LD_INT 2
63926: ARRAY
63927: ST_TO_ADDR
// break ;
63928: GO 63932
// end ;
63930: GO 63890
63932: POP
63933: POP
// if not weapon then
63934: LD_VAR 0 8
63938: NOT
63939: IFFALSE 63943
// continue ;
63941: GO 63839
// for k in factories do
63943: LD_ADDR_VAR 0 6
63947: PUSH
63948: LD_VAR 0 2
63952: PUSH
63953: FOR_IN
63954: IFFALSE 64019
// begin weapons := AvailableWeaponList ( k ) ;
63956: LD_ADDR_VAR 0 9
63960: PUSH
63961: LD_VAR 0 6
63965: PPUSH
63966: CALL_OW 478
63970: ST_TO_ADDR
// if not weapons then
63971: LD_VAR 0 9
63975: NOT
63976: IFFALSE 63980
// continue ;
63978: GO 63953
// if weapon in weapons then
63980: LD_VAR 0 8
63984: PUSH
63985: LD_VAR 0 9
63989: IN
63990: IFFALSE 64017
// begin result := [ i , weapon ] ;
63992: LD_ADDR_VAR 0 3
63996: PUSH
63997: LD_VAR 0 4
64001: PUSH
64002: LD_VAR 0 8
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: ST_TO_ADDR
// exit ;
64011: POP
64012: POP
64013: POP
64014: POP
64015: GO 64025
// end ; end ;
64017: GO 63953
64019: POP
64020: POP
// end ;
64021: GO 63839
64023: POP
64024: POP
// end ;
64025: LD_VAR 0 3
64029: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64030: LD_INT 0
64032: PPUSH
// if not side or side > 8 then
64033: LD_VAR 0 3
64037: NOT
64038: IFTRUE 64050
64040: PUSH
64041: LD_VAR 0 3
64045: PUSH
64046: LD_INT 8
64048: GREATER
64049: OR
64050: IFFALSE 64054
// exit ;
64052: GO 64113
// if not range then
64054: LD_VAR 0 4
64058: NOT
64059: IFFALSE 64070
// range := - 12 ;
64061: LD_ADDR_VAR 0 4
64065: PUSH
64066: LD_INT 12
64068: NEG
64069: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64070: LD_VAR 0 1
64074: PPUSH
64075: LD_VAR 0 2
64079: PPUSH
64080: LD_VAR 0 3
64084: PPUSH
64085: LD_VAR 0 4
64089: PPUSH
64090: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64094: LD_VAR 0 1
64098: PPUSH
64099: LD_VAR 0 2
64103: PPUSH
64104: LD_VAR 0 3
64108: PPUSH
64109: CALL_OW 331
// end ;
64113: LD_VAR 0 5
64117: RET
// export function Video ( mode ) ; begin
64118: LD_INT 0
64120: PPUSH
// ingame_video = mode ;
64121: LD_ADDR_OWVAR 52
64125: PUSH
64126: LD_VAR 0 1
64130: ST_TO_ADDR
// interface_hidden = mode ;
64131: LD_ADDR_OWVAR 54
64135: PUSH
64136: LD_VAR 0 1
64140: ST_TO_ADDR
// end ;
64141: LD_VAR 0 2
64145: RET
// export function Join ( array , element ) ; begin
64146: LD_INT 0
64148: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64149: LD_ADDR_VAR 0 3
64153: PUSH
64154: LD_VAR 0 1
64158: PPUSH
64159: LD_VAR 0 1
64163: PUSH
64164: LD_INT 1
64166: PLUS
64167: PPUSH
64168: LD_VAR 0 2
64172: PPUSH
64173: CALL_OW 1
64177: ST_TO_ADDR
// end ;
64178: LD_VAR 0 3
64182: RET
// export function JoinUnion ( array , element ) ; begin
64183: LD_INT 0
64185: PPUSH
// result := array union element ;
64186: LD_ADDR_VAR 0 3
64190: PUSH
64191: LD_VAR 0 1
64195: PUSH
64196: LD_VAR 0 2
64200: UNION
64201: ST_TO_ADDR
// end ;
64202: LD_VAR 0 3
64206: RET
// export function GetBehemoths ( side ) ; begin
64207: LD_INT 0
64209: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64210: LD_ADDR_VAR 0 2
64214: PUSH
64215: LD_INT 22
64217: PUSH
64218: LD_VAR 0 1
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 31
64229: PUSH
64230: LD_INT 25
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PPUSH
64241: CALL_OW 69
64245: ST_TO_ADDR
// end ;
64246: LD_VAR 0 2
64250: RET
// export function Shuffle ( array ) ; var i , index ; begin
64251: LD_INT 0
64253: PPUSH
64254: PPUSH
64255: PPUSH
// result := [ ] ;
64256: LD_ADDR_VAR 0 2
64260: PUSH
64261: EMPTY
64262: ST_TO_ADDR
// if not array then
64263: LD_VAR 0 1
64267: NOT
64268: IFFALSE 64272
// exit ;
64270: GO 64371
// Randomize ;
64272: CALL_OW 10
// for i = array downto 1 do
64276: LD_ADDR_VAR 0 3
64280: PUSH
64281: DOUBLE
64282: LD_VAR 0 1
64286: INC
64287: ST_TO_ADDR
64288: LD_INT 1
64290: PUSH
64291: FOR_DOWNTO
64292: IFFALSE 64369
// begin index := rand ( 1 , array ) ;
64294: LD_ADDR_VAR 0 4
64298: PUSH
64299: LD_INT 1
64301: PPUSH
64302: LD_VAR 0 1
64306: PPUSH
64307: CALL_OW 12
64311: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64312: LD_ADDR_VAR 0 2
64316: PUSH
64317: LD_VAR 0 2
64321: PPUSH
64322: LD_VAR 0 2
64326: PUSH
64327: LD_INT 1
64329: PLUS
64330: PPUSH
64331: LD_VAR 0 1
64335: PUSH
64336: LD_VAR 0 4
64340: ARRAY
64341: PPUSH
64342: CALL_OW 2
64346: ST_TO_ADDR
// array := Delete ( array , index ) ;
64347: LD_ADDR_VAR 0 1
64351: PUSH
64352: LD_VAR 0 1
64356: PPUSH
64357: LD_VAR 0 4
64361: PPUSH
64362: CALL_OW 3
64366: ST_TO_ADDR
// end ;
64367: GO 64291
64369: POP
64370: POP
// end ;
64371: LD_VAR 0 2
64375: RET
// export function GetBaseMaterials ( base ) ; begin
64376: LD_INT 0
64378: PPUSH
// result := [ 0 , 0 , 0 ] ;
64379: LD_ADDR_VAR 0 2
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: LIST
64397: ST_TO_ADDR
// if not base then
64398: LD_VAR 0 1
64402: NOT
64403: IFFALSE 64407
// exit ;
64405: GO 64456
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64407: LD_ADDR_VAR 0 2
64411: PUSH
64412: LD_VAR 0 1
64416: PPUSH
64417: LD_INT 1
64419: PPUSH
64420: CALL_OW 275
64424: PUSH
64425: LD_VAR 0 1
64429: PPUSH
64430: LD_INT 2
64432: PPUSH
64433: CALL_OW 275
64437: PUSH
64438: LD_VAR 0 1
64442: PPUSH
64443: LD_INT 3
64445: PPUSH
64446: CALL_OW 275
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: LIST
64455: ST_TO_ADDR
// end ;
64456: LD_VAR 0 2
64460: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64461: LD_INT 0
64463: PPUSH
64464: PPUSH
// result := array ;
64465: LD_ADDR_VAR 0 3
64469: PUSH
64470: LD_VAR 0 1
64474: ST_TO_ADDR
// if size >= result then
64475: LD_VAR 0 2
64479: PUSH
64480: LD_VAR 0 3
64484: GREATEREQUAL
64485: IFFALSE 64489
// exit ;
64487: GO 64539
// if size then
64489: LD_VAR 0 2
64493: IFFALSE 64539
// for i := array downto size do
64495: LD_ADDR_VAR 0 4
64499: PUSH
64500: DOUBLE
64501: LD_VAR 0 1
64505: INC
64506: ST_TO_ADDR
64507: LD_VAR 0 2
64511: PUSH
64512: FOR_DOWNTO
64513: IFFALSE 64537
// result := Delete ( result , result ) ;
64515: LD_ADDR_VAR 0 3
64519: PUSH
64520: LD_VAR 0 3
64524: PPUSH
64525: LD_VAR 0 3
64529: PPUSH
64530: CALL_OW 3
64534: ST_TO_ADDR
64535: GO 64512
64537: POP
64538: POP
// end ;
64539: LD_VAR 0 3
64543: RET
// export function ComExit ( unit ) ; var tmp ; begin
64544: LD_INT 0
64546: PPUSH
64547: PPUSH
// if not IsInUnit ( unit ) then
64548: LD_VAR 0 1
64552: PPUSH
64553: CALL_OW 310
64557: NOT
64558: IFFALSE 64562
// exit ;
64560: GO 64622
// tmp := IsInUnit ( unit ) ;
64562: LD_ADDR_VAR 0 3
64566: PUSH
64567: LD_VAR 0 1
64571: PPUSH
64572: CALL_OW 310
64576: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64577: LD_VAR 0 3
64581: PPUSH
64582: CALL_OW 247
64586: PUSH
64587: LD_INT 2
64589: EQUAL
64590: IFFALSE 64603
// ComExitVehicle ( unit ) else
64592: LD_VAR 0 1
64596: PPUSH
64597: CALL_OW 121
64601: GO 64612
// ComExitBuilding ( unit ) ;
64603: LD_VAR 0 1
64607: PPUSH
64608: CALL_OW 122
// result := tmp ;
64612: LD_ADDR_VAR 0 2
64616: PUSH
64617: LD_VAR 0 3
64621: ST_TO_ADDR
// end ;
64622: LD_VAR 0 2
64626: RET
// export function ComExitAll ( units ) ; var i ; begin
64627: LD_INT 0
64629: PPUSH
64630: PPUSH
// if not units then
64631: LD_VAR 0 1
64635: NOT
64636: IFFALSE 64640
// exit ;
64638: GO 64666
// for i in units do
64640: LD_ADDR_VAR 0 3
64644: PUSH
64645: LD_VAR 0 1
64649: PUSH
64650: FOR_IN
64651: IFFALSE 64664
// ComExit ( i ) ;
64653: LD_VAR 0 3
64657: PPUSH
64658: CALL 64544 0 1
64662: GO 64650
64664: POP
64665: POP
// end ;
64666: LD_VAR 0 2
64670: RET
// export function ResetHc ; begin
64671: LD_INT 0
64673: PPUSH
// InitHc ;
64674: CALL_OW 19
// hc_importance := 0 ;
64678: LD_ADDR_OWVAR 32
64682: PUSH
64683: LD_INT 0
64685: ST_TO_ADDR
// end ;
64686: LD_VAR 0 1
64690: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64691: LD_INT 0
64693: PPUSH
64694: PPUSH
64695: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64696: LD_ADDR_VAR 0 6
64700: PUSH
64701: LD_VAR 0 1
64705: PUSH
64706: LD_VAR 0 3
64710: PLUS
64711: PUSH
64712: LD_INT 2
64714: DIV
64715: ST_TO_ADDR
// if _x < 0 then
64716: LD_VAR 0 6
64720: PUSH
64721: LD_INT 0
64723: LESS
64724: IFFALSE 64741
// _x := _x * - 1 ;
64726: LD_ADDR_VAR 0 6
64730: PUSH
64731: LD_VAR 0 6
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: MUL
64740: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64741: LD_ADDR_VAR 0 7
64745: PUSH
64746: LD_VAR 0 2
64750: PUSH
64751: LD_VAR 0 4
64755: PLUS
64756: PUSH
64757: LD_INT 2
64759: DIV
64760: ST_TO_ADDR
// if _y < 0 then
64761: LD_VAR 0 7
64765: PUSH
64766: LD_INT 0
64768: LESS
64769: IFFALSE 64786
// _y := _y * - 1 ;
64771: LD_ADDR_VAR 0 7
64775: PUSH
64776: LD_VAR 0 7
64780: PUSH
64781: LD_INT 1
64783: NEG
64784: MUL
64785: ST_TO_ADDR
// result := [ _x , _y ] ;
64786: LD_ADDR_VAR 0 5
64790: PUSH
64791: LD_VAR 0 6
64795: PUSH
64796: LD_VAR 0 7
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: ST_TO_ADDR
// end ;
64805: LD_VAR 0 5
64809: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64810: LD_INT 0
64812: PPUSH
64813: PPUSH
64814: PPUSH
64815: PPUSH
// task := GetTaskList ( unit ) ;
64816: LD_ADDR_VAR 0 7
64820: PUSH
64821: LD_VAR 0 1
64825: PPUSH
64826: CALL_OW 437
64830: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64831: LD_VAR 0 7
64835: NOT
64836: IFFALSE 64855
64838: PUSH
64839: LD_VAR 0 1
64843: PPUSH
64844: LD_VAR 0 2
64848: PPUSH
64849: CALL_OW 308
64853: NOT
64854: AND
64855: IFFALSE 64859
// exit ;
64857: GO 64977
// if IsInArea ( unit , area ) then
64859: LD_VAR 0 1
64863: PPUSH
64864: LD_VAR 0 2
64868: PPUSH
64869: CALL_OW 308
64873: IFFALSE 64891
// begin ComMoveToArea ( unit , goAway ) ;
64875: LD_VAR 0 1
64879: PPUSH
64880: LD_VAR 0 3
64884: PPUSH
64885: CALL_OW 113
// exit ;
64889: GO 64977
// end ; if task [ 1 ] [ 1 ] <> M then
64891: LD_VAR 0 7
64895: PUSH
64896: LD_INT 1
64898: ARRAY
64899: PUSH
64900: LD_INT 1
64902: ARRAY
64903: PUSH
64904: LD_STRING M
64906: NONEQUAL
64907: IFFALSE 64911
// exit ;
64909: GO 64977
// x := task [ 1 ] [ 2 ] ;
64911: LD_ADDR_VAR 0 5
64915: PUSH
64916: LD_VAR 0 7
64920: PUSH
64921: LD_INT 1
64923: ARRAY
64924: PUSH
64925: LD_INT 2
64927: ARRAY
64928: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64929: LD_ADDR_VAR 0 6
64933: PUSH
64934: LD_VAR 0 7
64938: PUSH
64939: LD_INT 1
64941: ARRAY
64942: PUSH
64943: LD_INT 3
64945: ARRAY
64946: ST_TO_ADDR
// if InArea ( x , y , area ) then
64947: LD_VAR 0 5
64951: PPUSH
64952: LD_VAR 0 6
64956: PPUSH
64957: LD_VAR 0 2
64961: PPUSH
64962: CALL_OW 309
64966: IFFALSE 64977
// ComStop ( unit ) ;
64968: LD_VAR 0 1
64972: PPUSH
64973: CALL_OW 141
// end ;
64977: LD_VAR 0 4
64981: RET
// export function Abs ( value ) ; begin
64982: LD_INT 0
64984: PPUSH
// result := value ;
64985: LD_ADDR_VAR 0 2
64989: PUSH
64990: LD_VAR 0 1
64994: ST_TO_ADDR
// if value < 0 then
64995: LD_VAR 0 1
64999: PUSH
65000: LD_INT 0
65002: LESS
65003: IFFALSE 65020
// result := value * - 1 ;
65005: LD_ADDR_VAR 0 2
65009: PUSH
65010: LD_VAR 0 1
65014: PUSH
65015: LD_INT 1
65017: NEG
65018: MUL
65019: ST_TO_ADDR
// end ;
65020: LD_VAR 0 2
65024: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65025: LD_INT 0
65027: PPUSH
65028: PPUSH
65029: PPUSH
65030: PPUSH
65031: PPUSH
65032: PPUSH
65033: PPUSH
65034: PPUSH
// if not unit or not building then
65035: LD_VAR 0 1
65039: NOT
65040: IFTRUE 65049
65042: PUSH
65043: LD_VAR 0 2
65047: NOT
65048: OR
65049: IFFALSE 65053
// exit ;
65051: GO 65281
// x := GetX ( building ) ;
65053: LD_ADDR_VAR 0 4
65057: PUSH
65058: LD_VAR 0 2
65062: PPUSH
65063: CALL_OW 250
65067: ST_TO_ADDR
// y := GetY ( building ) ;
65068: LD_ADDR_VAR 0 6
65072: PUSH
65073: LD_VAR 0 2
65077: PPUSH
65078: CALL_OW 251
65082: ST_TO_ADDR
// d := GetDir ( building ) ;
65083: LD_ADDR_VAR 0 8
65087: PUSH
65088: LD_VAR 0 2
65092: PPUSH
65093: CALL_OW 254
65097: ST_TO_ADDR
// r := 4 ;
65098: LD_ADDR_VAR 0 9
65102: PUSH
65103: LD_INT 4
65105: ST_TO_ADDR
// for i := 1 to 5 do
65106: LD_ADDR_VAR 0 10
65110: PUSH
65111: DOUBLE
65112: LD_INT 1
65114: DEC
65115: ST_TO_ADDR
65116: LD_INT 5
65118: PUSH
65119: FOR_TO
65120: IFFALSE 65279
// begin _x := ShiftX ( x , d , r + i ) ;
65122: LD_ADDR_VAR 0 5
65126: PUSH
65127: LD_VAR 0 4
65131: PPUSH
65132: LD_VAR 0 8
65136: PPUSH
65137: LD_VAR 0 9
65141: PUSH
65142: LD_VAR 0 10
65146: PLUS
65147: PPUSH
65148: CALL_OW 272
65152: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65153: LD_ADDR_VAR 0 7
65157: PUSH
65158: LD_VAR 0 6
65162: PPUSH
65163: LD_VAR 0 8
65167: PPUSH
65168: LD_VAR 0 9
65172: PUSH
65173: LD_VAR 0 10
65177: PLUS
65178: PPUSH
65179: CALL_OW 273
65183: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65184: LD_VAR 0 5
65188: PPUSH
65189: LD_VAR 0 7
65193: PPUSH
65194: CALL_OW 488
65198: IFFALSE 65233
65200: PUSH
65201: LD_VAR 0 5
65205: PPUSH
65206: LD_VAR 0 7
65210: PPUSH
65211: CALL_OW 428
65215: PPUSH
65216: CALL_OW 247
65220: PUSH
65221: LD_INT 3
65223: PUSH
65224: LD_INT 2
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: IN
65231: NOT
65232: AND
65233: IFFALSE 65277
// begin ComMoveXY ( unit , _x , _y ) ;
65235: LD_VAR 0 1
65239: PPUSH
65240: LD_VAR 0 5
65244: PPUSH
65245: LD_VAR 0 7
65249: PPUSH
65250: CALL_OW 111
// result := [ _x , _y ] ;
65254: LD_ADDR_VAR 0 3
65258: PUSH
65259: LD_VAR 0 5
65263: PUSH
65264: LD_VAR 0 7
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: ST_TO_ADDR
// exit ;
65273: POP
65274: POP
65275: GO 65281
// end ; end ;
65277: GO 65119
65279: POP
65280: POP
// end ;
65281: LD_VAR 0 3
65285: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65286: LD_INT 0
65288: PPUSH
65289: PPUSH
65290: PPUSH
// result := 0 ;
65291: LD_ADDR_VAR 0 3
65295: PUSH
65296: LD_INT 0
65298: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65299: LD_VAR 0 1
65303: PUSH
65304: LD_INT 0
65306: LESS
65307: IFTRUE 65319
65309: PUSH
65310: LD_VAR 0 1
65314: PUSH
65315: LD_INT 8
65317: GREATER
65318: OR
65319: IFTRUE 65331
65321: PUSH
65322: LD_VAR 0 2
65326: PUSH
65327: LD_INT 0
65329: LESS
65330: OR
65331: IFTRUE 65343
65333: PUSH
65334: LD_VAR 0 2
65338: PUSH
65339: LD_INT 8
65341: GREATER
65342: OR
65343: IFFALSE 65347
// exit ;
65345: GO 65422
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65347: LD_ADDR_VAR 0 4
65351: PUSH
65352: LD_INT 22
65354: PUSH
65355: LD_VAR 0 2
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PPUSH
65364: CALL_OW 69
65368: PUSH
65369: FOR_IN
65370: IFFALSE 65420
// begin un := UnitShoot ( i ) ;
65372: LD_ADDR_VAR 0 5
65376: PUSH
65377: LD_VAR 0 4
65381: PPUSH
65382: CALL_OW 504
65386: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65387: LD_VAR 0 5
65391: PPUSH
65392: CALL_OW 255
65396: PUSH
65397: LD_VAR 0 1
65401: EQUAL
65402: IFFALSE 65418
// begin result := un ;
65404: LD_ADDR_VAR 0 3
65408: PUSH
65409: LD_VAR 0 5
65413: ST_TO_ADDR
// exit ;
65414: POP
65415: POP
65416: GO 65422
// end ; end ;
65418: GO 65369
65420: POP
65421: POP
// end ;
65422: LD_VAR 0 3
65426: RET
// export function GetCargoBay ( units ) ; begin
65427: LD_INT 0
65429: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65430: LD_ADDR_VAR 0 2
65434: PUSH
65435: LD_VAR 0 1
65439: PPUSH
65440: LD_INT 2
65442: PUSH
65443: LD_INT 34
65445: PUSH
65446: LD_INT 12
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 34
65455: PUSH
65456: LD_INT 51
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 34
65465: PUSH
65466: LD_INT 32
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 34
65475: PUSH
65476: LD_INT 89
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: PPUSH
65490: CALL_OW 72
65494: ST_TO_ADDR
// end ;
65495: LD_VAR 0 2
65499: RET
// export function Negate ( value ) ; begin
65500: LD_INT 0
65502: PPUSH
// result := not value ;
65503: LD_ADDR_VAR 0 2
65507: PUSH
65508: LD_VAR 0 1
65512: NOT
65513: ST_TO_ADDR
// end ;
65514: LD_VAR 0 2
65518: RET
// export function Inc ( value ) ; begin
65519: LD_INT 0
65521: PPUSH
// result := value + 1 ;
65522: LD_ADDR_VAR 0 2
65526: PUSH
65527: LD_VAR 0 1
65531: PUSH
65532: LD_INT 1
65534: PLUS
65535: ST_TO_ADDR
// end ;
65536: LD_VAR 0 2
65540: RET
// export function Dec ( value ) ; begin
65541: LD_INT 0
65543: PPUSH
// result := value - 1 ;
65544: LD_ADDR_VAR 0 2
65548: PUSH
65549: LD_VAR 0 1
65553: PUSH
65554: LD_INT 1
65556: MINUS
65557: ST_TO_ADDR
// end ;
65558: LD_VAR 0 2
65562: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65563: LD_INT 0
65565: PPUSH
65566: PPUSH
65567: PPUSH
65568: PPUSH
65569: PPUSH
65570: PPUSH
65571: PPUSH
65572: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65573: LD_VAR 0 1
65577: PPUSH
65578: LD_VAR 0 2
65582: PPUSH
65583: CALL_OW 488
65587: NOT
65588: IFTRUE 65607
65590: PUSH
65591: LD_VAR 0 3
65595: PPUSH
65596: LD_VAR 0 4
65600: PPUSH
65601: CALL_OW 488
65605: NOT
65606: OR
65607: IFFALSE 65620
// begin result := - 1 ;
65609: LD_ADDR_VAR 0 5
65613: PUSH
65614: LD_INT 1
65616: NEG
65617: ST_TO_ADDR
// exit ;
65618: GO 65855
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65620: LD_ADDR_VAR 0 12
65624: PUSH
65625: LD_VAR 0 1
65629: PPUSH
65630: LD_VAR 0 2
65634: PPUSH
65635: LD_VAR 0 3
65639: PPUSH
65640: LD_VAR 0 4
65644: PPUSH
65645: CALL 64691 0 4
65649: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65650: LD_ADDR_VAR 0 11
65654: PUSH
65655: LD_VAR 0 1
65659: PPUSH
65660: LD_VAR 0 2
65664: PPUSH
65665: LD_VAR 0 12
65669: PUSH
65670: LD_INT 1
65672: ARRAY
65673: PPUSH
65674: LD_VAR 0 12
65678: PUSH
65679: LD_INT 2
65681: ARRAY
65682: PPUSH
65683: CALL_OW 298
65687: ST_TO_ADDR
// distance := 9999 ;
65688: LD_ADDR_VAR 0 10
65692: PUSH
65693: LD_INT 9999
65695: ST_TO_ADDR
// for i := 0 to 5 do
65696: LD_ADDR_VAR 0 6
65700: PUSH
65701: DOUBLE
65702: LD_INT 0
65704: DEC
65705: ST_TO_ADDR
65706: LD_INT 5
65708: PUSH
65709: FOR_TO
65710: IFFALSE 65853
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65712: LD_ADDR_VAR 0 7
65716: PUSH
65717: LD_VAR 0 1
65721: PPUSH
65722: LD_VAR 0 6
65726: PPUSH
65727: LD_VAR 0 11
65731: PPUSH
65732: CALL_OW 272
65736: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65737: LD_ADDR_VAR 0 8
65741: PUSH
65742: LD_VAR 0 2
65746: PPUSH
65747: LD_VAR 0 6
65751: PPUSH
65752: LD_VAR 0 11
65756: PPUSH
65757: CALL_OW 273
65761: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65762: LD_VAR 0 7
65766: PPUSH
65767: LD_VAR 0 8
65771: PPUSH
65772: CALL_OW 488
65776: NOT
65777: IFFALSE 65781
// continue ;
65779: GO 65709
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65781: LD_ADDR_VAR 0 9
65785: PUSH
65786: LD_VAR 0 12
65790: PUSH
65791: LD_INT 1
65793: ARRAY
65794: PPUSH
65795: LD_VAR 0 12
65799: PUSH
65800: LD_INT 2
65802: ARRAY
65803: PPUSH
65804: LD_VAR 0 7
65808: PPUSH
65809: LD_VAR 0 8
65813: PPUSH
65814: CALL_OW 298
65818: ST_TO_ADDR
// if tmp < distance then
65819: LD_VAR 0 9
65823: PUSH
65824: LD_VAR 0 10
65828: LESS
65829: IFFALSE 65851
// begin result := i ;
65831: LD_ADDR_VAR 0 5
65835: PUSH
65836: LD_VAR 0 6
65840: ST_TO_ADDR
// distance := tmp ;
65841: LD_ADDR_VAR 0 10
65845: PUSH
65846: LD_VAR 0 9
65850: ST_TO_ADDR
// end ; end ;
65851: GO 65709
65853: POP
65854: POP
// end ;
65855: LD_VAR 0 5
65859: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65860: LD_INT 0
65862: PPUSH
65863: PPUSH
// if not driver or not IsInUnit ( driver ) then
65864: LD_VAR 0 1
65868: NOT
65869: IFTRUE 65883
65871: PUSH
65872: LD_VAR 0 1
65876: PPUSH
65877: CALL_OW 310
65881: NOT
65882: OR
65883: IFFALSE 65887
// exit ;
65885: GO 65977
// vehicle := IsInUnit ( driver ) ;
65887: LD_ADDR_VAR 0 3
65891: PUSH
65892: LD_VAR 0 1
65896: PPUSH
65897: CALL_OW 310
65901: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65902: LD_VAR 0 1
65906: PPUSH
65907: LD_STRING \
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: LD_INT 0
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: LD_INT 0
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: PUSH
65937: LD_STRING E
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: LD_VAR 0 3
65950: PUSH
65951: LD_INT 0
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PPUSH
65973: CALL_OW 446
// end ;
65977: LD_VAR 0 2
65981: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65982: LD_INT 0
65984: PPUSH
65985: PPUSH
// if not driver or not IsInUnit ( driver ) then
65986: LD_VAR 0 1
65990: NOT
65991: IFTRUE 66005
65993: PUSH
65994: LD_VAR 0 1
65998: PPUSH
65999: CALL_OW 310
66003: NOT
66004: OR
66005: IFFALSE 66009
// exit ;
66007: GO 66099
// vehicle := IsInUnit ( driver ) ;
66009: LD_ADDR_VAR 0 3
66013: PUSH
66014: LD_VAR 0 1
66018: PPUSH
66019: CALL_OW 310
66023: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66024: LD_VAR 0 1
66028: PPUSH
66029: LD_STRING \
66031: PUSH
66032: LD_INT 0
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: LD_INT 0
66043: PUSH
66044: LD_INT 0
66046: PUSH
66047: LD_INT 0
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: PUSH
66059: LD_STRING E
66061: PUSH
66062: LD_INT 0
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: LD_VAR 0 3
66072: PUSH
66073: LD_INT 0
66075: PUSH
66076: LD_INT 0
66078: PUSH
66079: LD_INT 0
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PPUSH
66095: CALL_OW 447
// end ;
66099: LD_VAR 0 2
66103: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66104: LD_INT 0
66106: PPUSH
66107: PPUSH
66108: PPUSH
// tmp := [ ] ;
66109: LD_ADDR_VAR 0 5
66113: PUSH
66114: EMPTY
66115: ST_TO_ADDR
// for i in units do
66116: LD_ADDR_VAR 0 4
66120: PUSH
66121: LD_VAR 0 1
66125: PUSH
66126: FOR_IN
66127: IFFALSE 66165
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66129: LD_ADDR_VAR 0 5
66133: PUSH
66134: LD_VAR 0 5
66138: PPUSH
66139: LD_VAR 0 5
66143: PUSH
66144: LD_INT 1
66146: PLUS
66147: PPUSH
66148: LD_VAR 0 4
66152: PPUSH
66153: CALL_OW 256
66157: PPUSH
66158: CALL_OW 2
66162: ST_TO_ADDR
66163: GO 66126
66165: POP
66166: POP
// if not tmp then
66167: LD_VAR 0 5
66171: NOT
66172: IFFALSE 66176
// exit ;
66174: GO 66224
// if asc then
66176: LD_VAR 0 2
66180: IFFALSE 66204
// result := SortListByListAsc ( units , tmp ) else
66182: LD_ADDR_VAR 0 3
66186: PUSH
66187: LD_VAR 0 1
66191: PPUSH
66192: LD_VAR 0 5
66196: PPUSH
66197: CALL_OW 76
66201: ST_TO_ADDR
66202: GO 66224
// result := SortListByListDesc ( units , tmp ) ;
66204: LD_ADDR_VAR 0 3
66208: PUSH
66209: LD_VAR 0 1
66213: PPUSH
66214: LD_VAR 0 5
66218: PPUSH
66219: CALL_OW 77
66223: ST_TO_ADDR
// end ;
66224: LD_VAR 0 3
66228: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66229: LD_INT 0
66231: PPUSH
66232: PPUSH
// task := GetTaskList ( mech ) ;
66233: LD_ADDR_VAR 0 4
66237: PUSH
66238: LD_VAR 0 1
66242: PPUSH
66243: CALL_OW 437
66247: ST_TO_ADDR
// if not task then
66248: LD_VAR 0 4
66252: NOT
66253: IFFALSE 66257
// exit ;
66255: GO 66301
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66257: LD_ADDR_VAR 0 3
66261: PUSH
66262: LD_VAR 0 4
66266: PUSH
66267: LD_INT 1
66269: ARRAY
66270: PUSH
66271: LD_INT 1
66273: ARRAY
66274: PUSH
66275: LD_STRING r
66277: EQUAL
66278: IFFALSE 66300
66280: PUSH
66281: LD_VAR 0 4
66285: PUSH
66286: LD_INT 1
66288: ARRAY
66289: PUSH
66290: LD_INT 4
66292: ARRAY
66293: PUSH
66294: LD_VAR 0 2
66298: EQUAL
66299: AND
66300: ST_TO_ADDR
// end ;
66301: LD_VAR 0 3
66305: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66306: LD_INT 0
66308: PPUSH
// SetDir ( unit , d ) ;
66309: LD_VAR 0 1
66313: PPUSH
66314: LD_VAR 0 4
66318: PPUSH
66319: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
66323: LD_ADDR_VAR 0 6
66327: PUSH
66328: LD_VAR 0 1
66332: PPUSH
66333: LD_VAR 0 2
66337: PPUSH
66338: LD_VAR 0 3
66342: PPUSH
66343: LD_VAR 0 5
66347: PPUSH
66348: CALL_OW 48
66352: ST_TO_ADDR
// end ;
66353: LD_VAR 0 6
66357: RET
// export function ToNaturalNumber ( number ) ; begin
66358: LD_INT 0
66360: PPUSH
// result := number div 1 ;
66361: LD_ADDR_VAR 0 2
66365: PUSH
66366: LD_VAR 0 1
66370: PUSH
66371: LD_INT 1
66373: DIV
66374: ST_TO_ADDR
// if number < 0 then
66375: LD_VAR 0 1
66379: PUSH
66380: LD_INT 0
66382: LESS
66383: IFFALSE 66393
// result := 0 ;
66385: LD_ADDR_VAR 0 2
66389: PUSH
66390: LD_INT 0
66392: ST_TO_ADDR
// end ;
66393: LD_VAR 0 2
66397: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
66398: LD_INT 0
66400: PPUSH
66401: PPUSH
66402: PPUSH
// if not buildings then
66403: LD_VAR 0 1
66407: NOT
66408: IFFALSE 66412
// exit ;
66410: GO 66527
// tmp := [ ] ;
66412: LD_ADDR_VAR 0 5
66416: PUSH
66417: EMPTY
66418: ST_TO_ADDR
// for b in buildings do
66419: LD_ADDR_VAR 0 4
66423: PUSH
66424: LD_VAR 0 1
66428: PUSH
66429: FOR_IN
66430: IFFALSE 66468
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
66432: LD_ADDR_VAR 0 5
66436: PUSH
66437: LD_VAR 0 5
66441: PPUSH
66442: LD_VAR 0 5
66446: PUSH
66447: LD_INT 1
66449: PLUS
66450: PPUSH
66451: LD_VAR 0 4
66455: PPUSH
66456: CALL_OW 266
66460: PPUSH
66461: CALL_OW 1
66465: ST_TO_ADDR
66466: GO 66429
66468: POP
66469: POP
// if not tmp then
66470: LD_VAR 0 5
66474: NOT
66475: IFFALSE 66479
// exit ;
66477: GO 66527
// if asc then
66479: LD_VAR 0 2
66483: IFFALSE 66507
// result := SortListByListAsc ( buildings , tmp ) else
66485: LD_ADDR_VAR 0 3
66489: PUSH
66490: LD_VAR 0 1
66494: PPUSH
66495: LD_VAR 0 5
66499: PPUSH
66500: CALL_OW 76
66504: ST_TO_ADDR
66505: GO 66527
// result := SortListByListDesc ( buildings , tmp ) ;
66507: LD_ADDR_VAR 0 3
66511: PUSH
66512: LD_VAR 0 1
66516: PPUSH
66517: LD_VAR 0 5
66521: PPUSH
66522: CALL_OW 77
66526: ST_TO_ADDR
// end ;
66527: LD_VAR 0 3
66531: RET
// export function SortByClass ( units , class ) ; var un ; begin
66532: LD_INT 0
66534: PPUSH
66535: PPUSH
// if not units or not class then
66536: LD_VAR 0 1
66540: NOT
66541: IFTRUE 66550
66543: PUSH
66544: LD_VAR 0 2
66548: NOT
66549: OR
66550: IFFALSE 66554
// exit ;
66552: GO 66649
// result := [ ] ;
66554: LD_ADDR_VAR 0 3
66558: PUSH
66559: EMPTY
66560: ST_TO_ADDR
// for un in units do
66561: LD_ADDR_VAR 0 4
66565: PUSH
66566: LD_VAR 0 1
66570: PUSH
66571: FOR_IN
66572: IFFALSE 66647
// if GetClass ( un ) = class then
66574: LD_VAR 0 4
66578: PPUSH
66579: CALL_OW 257
66583: PUSH
66584: LD_VAR 0 2
66588: EQUAL
66589: IFFALSE 66616
// result := Insert ( result , 1 , un ) else
66591: LD_ADDR_VAR 0 3
66595: PUSH
66596: LD_VAR 0 3
66600: PPUSH
66601: LD_INT 1
66603: PPUSH
66604: LD_VAR 0 4
66608: PPUSH
66609: CALL_OW 2
66613: ST_TO_ADDR
66614: GO 66645
// result := Replace ( result , result + 1 , un ) ;
66616: LD_ADDR_VAR 0 3
66620: PUSH
66621: LD_VAR 0 3
66625: PPUSH
66626: LD_VAR 0 3
66630: PUSH
66631: LD_INT 1
66633: PLUS
66634: PPUSH
66635: LD_VAR 0 4
66639: PPUSH
66640: CALL_OW 1
66644: ST_TO_ADDR
66645: GO 66571
66647: POP
66648: POP
// end ;
66649: LD_VAR 0 3
66653: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66654: LD_INT 0
66656: PPUSH
66657: PPUSH
66658: PPUSH
66659: PPUSH
66660: PPUSH
66661: PPUSH
66662: PPUSH
// result := [ ] ;
66663: LD_ADDR_VAR 0 4
66667: PUSH
66668: EMPTY
66669: ST_TO_ADDR
// if x - r < 0 then
66670: LD_VAR 0 1
66674: PUSH
66675: LD_VAR 0 3
66679: MINUS
66680: PUSH
66681: LD_INT 0
66683: LESS
66684: IFFALSE 66696
// min_x := 0 else
66686: LD_ADDR_VAR 0 8
66690: PUSH
66691: LD_INT 0
66693: ST_TO_ADDR
66694: GO 66712
// min_x := x - r ;
66696: LD_ADDR_VAR 0 8
66700: PUSH
66701: LD_VAR 0 1
66705: PUSH
66706: LD_VAR 0 3
66710: MINUS
66711: ST_TO_ADDR
// if y - r < 0 then
66712: LD_VAR 0 2
66716: PUSH
66717: LD_VAR 0 3
66721: MINUS
66722: PUSH
66723: LD_INT 0
66725: LESS
66726: IFFALSE 66738
// min_y := 0 else
66728: LD_ADDR_VAR 0 7
66732: PUSH
66733: LD_INT 0
66735: ST_TO_ADDR
66736: GO 66754
// min_y := y - r ;
66738: LD_ADDR_VAR 0 7
66742: PUSH
66743: LD_VAR 0 2
66747: PUSH
66748: LD_VAR 0 3
66752: MINUS
66753: ST_TO_ADDR
// max_x := x + r ;
66754: LD_ADDR_VAR 0 9
66758: PUSH
66759: LD_VAR 0 1
66763: PUSH
66764: LD_VAR 0 3
66768: PLUS
66769: ST_TO_ADDR
// max_y := y + r ;
66770: LD_ADDR_VAR 0 10
66774: PUSH
66775: LD_VAR 0 2
66779: PUSH
66780: LD_VAR 0 3
66784: PLUS
66785: ST_TO_ADDR
// for _x = min_x to max_x do
66786: LD_ADDR_VAR 0 5
66790: PUSH
66791: DOUBLE
66792: LD_VAR 0 8
66796: DEC
66797: ST_TO_ADDR
66798: LD_VAR 0 9
66802: PUSH
66803: FOR_TO
66804: IFFALSE 66905
// for _y = min_y to max_y do
66806: LD_ADDR_VAR 0 6
66810: PUSH
66811: DOUBLE
66812: LD_VAR 0 7
66816: DEC
66817: ST_TO_ADDR
66818: LD_VAR 0 10
66822: PUSH
66823: FOR_TO
66824: IFFALSE 66901
// begin if not ValidHex ( _x , _y ) then
66826: LD_VAR 0 5
66830: PPUSH
66831: LD_VAR 0 6
66835: PPUSH
66836: CALL_OW 488
66840: NOT
66841: IFFALSE 66845
// continue ;
66843: GO 66823
// if GetResourceTypeXY ( _x , _y ) then
66845: LD_VAR 0 5
66849: PPUSH
66850: LD_VAR 0 6
66854: PPUSH
66855: CALL_OW 283
66859: IFFALSE 66899
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66861: LD_ADDR_VAR 0 4
66865: PUSH
66866: LD_VAR 0 4
66870: PPUSH
66871: LD_VAR 0 4
66875: PUSH
66876: LD_INT 1
66878: PLUS
66879: PPUSH
66880: LD_VAR 0 5
66884: PUSH
66885: LD_VAR 0 6
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PPUSH
66894: CALL_OW 1
66898: ST_TO_ADDR
// end ;
66899: GO 66823
66901: POP
66902: POP
66903: GO 66803
66905: POP
66906: POP
// end ;
66907: LD_VAR 0 4
66911: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66912: LD_INT 0
66914: PPUSH
66915: PPUSH
66916: PPUSH
66917: PPUSH
66918: PPUSH
66919: PPUSH
66920: PPUSH
66921: PPUSH
// if not units then
66922: LD_VAR 0 1
66926: NOT
66927: IFFALSE 66931
// exit ;
66929: GO 67463
// result := UnitFilter ( units , [ f_ok ] ) ;
66931: LD_ADDR_VAR 0 3
66935: PUSH
66936: LD_VAR 0 1
66940: PPUSH
66941: LD_INT 50
66943: PUSH
66944: EMPTY
66945: LIST
66946: PPUSH
66947: CALL_OW 72
66951: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66952: LD_ADDR_VAR 0 8
66956: PUSH
66957: LD_VAR 0 1
66961: PUSH
66962: LD_INT 1
66964: ARRAY
66965: PPUSH
66966: CALL_OW 255
66970: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66971: LD_ADDR_VAR 0 10
66975: PUSH
66976: LD_INT 29
66978: PUSH
66979: LD_INT 91
66981: PUSH
66982: LD_INT 49
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: LIST
66989: ST_TO_ADDR
// if not result then
66990: LD_VAR 0 3
66994: NOT
66995: IFFALSE 66999
// exit ;
66997: GO 67463
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66999: LD_ADDR_VAR 0 5
67003: PUSH
67004: LD_INT 81
67006: PUSH
67007: LD_VAR 0 8
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PPUSH
67016: CALL_OW 69
67020: ST_TO_ADDR
// for i in result do
67021: LD_ADDR_VAR 0 4
67025: PUSH
67026: LD_VAR 0 3
67030: PUSH
67031: FOR_IN
67032: IFFALSE 67461
// begin tag := GetTag ( i ) + 1 ;
67034: LD_ADDR_VAR 0 9
67038: PUSH
67039: LD_VAR 0 4
67043: PPUSH
67044: CALL_OW 110
67048: PUSH
67049: LD_INT 1
67051: PLUS
67052: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
67053: LD_ADDR_VAR 0 7
67057: PUSH
67058: LD_VAR 0 4
67062: PPUSH
67063: CALL_OW 250
67067: PPUSH
67068: LD_VAR 0 4
67072: PPUSH
67073: CALL_OW 251
67077: PPUSH
67078: LD_INT 4
67080: PPUSH
67081: CALL 66654 0 3
67085: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
67086: LD_VAR 0 4
67090: PPUSH
67091: CALL_OW 247
67095: PUSH
67096: LD_INT 2
67098: EQUAL
67099: IFFALSE 67111
67101: PUSH
67102: LD_VAR 0 7
67106: PUSH
67107: LD_INT 2
67109: GREATER
67110: AND
67111: IFFALSE 67131
67113: PUSH
67114: LD_VAR 0 4
67118: PPUSH
67119: CALL_OW 264
67123: PUSH
67124: LD_VAR 0 10
67128: IN
67129: NOT
67130: AND
67131: IFFALSE 67170
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67133: LD_VAR 0 4
67137: PPUSH
67138: LD_VAR 0 7
67142: PUSH
67143: LD_INT 1
67145: ARRAY
67146: PUSH
67147: LD_INT 1
67149: ARRAY
67150: PPUSH
67151: LD_VAR 0 7
67155: PUSH
67156: LD_INT 1
67158: ARRAY
67159: PUSH
67160: LD_INT 2
67162: ARRAY
67163: PPUSH
67164: CALL_OW 116
67168: GO 67459
// if path > tag then
67170: LD_VAR 0 2
67174: PUSH
67175: LD_VAR 0 9
67179: GREATER
67180: IFFALSE 67388
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67182: LD_ADDR_VAR 0 6
67186: PUSH
67187: LD_VAR 0 5
67191: PPUSH
67192: LD_INT 91
67194: PUSH
67195: LD_VAR 0 4
67199: PUSH
67200: LD_INT 8
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: LIST
67207: PPUSH
67208: CALL_OW 72
67212: ST_TO_ADDR
// if nearEnemy then
67213: LD_VAR 0 6
67217: IFFALSE 67286
// begin if GetWeapon ( i ) = ru_time_lapser then
67219: LD_VAR 0 4
67223: PPUSH
67224: CALL_OW 264
67228: PUSH
67229: LD_INT 49
67231: EQUAL
67232: IFFALSE 67260
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67234: LD_VAR 0 4
67238: PPUSH
67239: LD_VAR 0 6
67243: PPUSH
67244: LD_VAR 0 4
67248: PPUSH
67249: CALL_OW 74
67253: PPUSH
67254: CALL_OW 112
67258: GO 67284
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67260: LD_VAR 0 4
67264: PPUSH
67265: LD_VAR 0 6
67269: PPUSH
67270: LD_VAR 0 4
67274: PPUSH
67275: CALL_OW 74
67279: PPUSH
67280: CALL 68544 0 2
// end else
67284: GO 67386
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67286: LD_VAR 0 4
67290: PPUSH
67291: LD_VAR 0 2
67295: PUSH
67296: LD_VAR 0 9
67300: ARRAY
67301: PUSH
67302: LD_INT 1
67304: ARRAY
67305: PPUSH
67306: LD_VAR 0 2
67310: PUSH
67311: LD_VAR 0 9
67315: ARRAY
67316: PUSH
67317: LD_INT 2
67319: ARRAY
67320: PPUSH
67321: CALL_OW 297
67325: PUSH
67326: LD_INT 6
67328: GREATER
67329: IFFALSE 67372
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67331: LD_VAR 0 4
67335: PPUSH
67336: LD_VAR 0 2
67340: PUSH
67341: LD_VAR 0 9
67345: ARRAY
67346: PUSH
67347: LD_INT 1
67349: ARRAY
67350: PPUSH
67351: LD_VAR 0 2
67355: PUSH
67356: LD_VAR 0 9
67360: ARRAY
67361: PUSH
67362: LD_INT 2
67364: ARRAY
67365: PPUSH
67366: CALL_OW 114
67370: GO 67386
// SetTag ( i , tag ) ;
67372: LD_VAR 0 4
67376: PPUSH
67377: LD_VAR 0 9
67381: PPUSH
67382: CALL_OW 109
// end else
67386: GO 67459
// if enemy then
67388: LD_VAR 0 5
67392: IFFALSE 67459
// begin if GetWeapon ( i ) = ru_time_lapser then
67394: LD_VAR 0 4
67398: PPUSH
67399: CALL_OW 264
67403: PUSH
67404: LD_INT 49
67406: EQUAL
67407: IFFALSE 67435
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67409: LD_VAR 0 4
67413: PPUSH
67414: LD_VAR 0 5
67418: PPUSH
67419: LD_VAR 0 4
67423: PPUSH
67424: CALL_OW 74
67428: PPUSH
67429: CALL_OW 112
67433: GO 67459
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67435: LD_VAR 0 4
67439: PPUSH
67440: LD_VAR 0 5
67444: PPUSH
67445: LD_VAR 0 4
67449: PPUSH
67450: CALL_OW 74
67454: PPUSH
67455: CALL 68544 0 2
// end ; end ;
67459: GO 67031
67461: POP
67462: POP
// end ;
67463: LD_VAR 0 3
67467: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67468: LD_INT 0
67470: PPUSH
67471: PPUSH
67472: PPUSH
// if not unit or IsInUnit ( unit ) then
67473: LD_VAR 0 1
67477: NOT
67478: IFTRUE 67491
67480: PUSH
67481: LD_VAR 0 1
67485: PPUSH
67486: CALL_OW 310
67490: OR
67491: IFFALSE 67495
// exit ;
67493: GO 67586
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67495: LD_ADDR_VAR 0 4
67499: PUSH
67500: LD_VAR 0 1
67504: PPUSH
67505: CALL_OW 250
67509: PPUSH
67510: LD_VAR 0 2
67514: PPUSH
67515: LD_INT 1
67517: PPUSH
67518: CALL_OW 272
67522: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67523: LD_ADDR_VAR 0 5
67527: PUSH
67528: LD_VAR 0 1
67532: PPUSH
67533: CALL_OW 251
67537: PPUSH
67538: LD_VAR 0 2
67542: PPUSH
67543: LD_INT 1
67545: PPUSH
67546: CALL_OW 273
67550: ST_TO_ADDR
// if ValidHex ( x , y ) then
67551: LD_VAR 0 4
67555: PPUSH
67556: LD_VAR 0 5
67560: PPUSH
67561: CALL_OW 488
67565: IFFALSE 67586
// ComTurnXY ( unit , x , y ) ;
67567: LD_VAR 0 1
67571: PPUSH
67572: LD_VAR 0 4
67576: PPUSH
67577: LD_VAR 0 5
67581: PPUSH
67582: CALL_OW 118
// end ;
67586: LD_VAR 0 3
67590: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67591: LD_INT 0
67593: PPUSH
67594: PPUSH
// result := false ;
67595: LD_ADDR_VAR 0 3
67599: PUSH
67600: LD_INT 0
67602: ST_TO_ADDR
// if not units then
67603: LD_VAR 0 2
67607: NOT
67608: IFFALSE 67612
// exit ;
67610: GO 67657
// for i in units do
67612: LD_ADDR_VAR 0 4
67616: PUSH
67617: LD_VAR 0 2
67621: PUSH
67622: FOR_IN
67623: IFFALSE 67655
// if See ( side , i ) then
67625: LD_VAR 0 1
67629: PPUSH
67630: LD_VAR 0 4
67634: PPUSH
67635: CALL_OW 292
67639: IFFALSE 67653
// begin result := true ;
67641: LD_ADDR_VAR 0 3
67645: PUSH
67646: LD_INT 1
67648: ST_TO_ADDR
// exit ;
67649: POP
67650: POP
67651: GO 67657
// end ;
67653: GO 67622
67655: POP
67656: POP
// end ;
67657: LD_VAR 0 3
67661: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67662: LD_INT 0
67664: PPUSH
67665: PPUSH
67666: PPUSH
67667: PPUSH
// if not unit or not points then
67668: LD_VAR 0 1
67672: NOT
67673: IFTRUE 67682
67675: PUSH
67676: LD_VAR 0 2
67680: NOT
67681: OR
67682: IFFALSE 67686
// exit ;
67684: GO 67776
// dist := 99999 ;
67686: LD_ADDR_VAR 0 5
67690: PUSH
67691: LD_INT 99999
67693: ST_TO_ADDR
// for i in points do
67694: LD_ADDR_VAR 0 4
67698: PUSH
67699: LD_VAR 0 2
67703: PUSH
67704: FOR_IN
67705: IFFALSE 67774
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67707: LD_ADDR_VAR 0 6
67711: PUSH
67712: LD_VAR 0 1
67716: PPUSH
67717: LD_VAR 0 4
67721: PUSH
67722: LD_INT 1
67724: ARRAY
67725: PPUSH
67726: LD_VAR 0 4
67730: PUSH
67731: LD_INT 2
67733: ARRAY
67734: PPUSH
67735: CALL_OW 297
67739: ST_TO_ADDR
// if tmpDist < dist then
67740: LD_VAR 0 6
67744: PUSH
67745: LD_VAR 0 5
67749: LESS
67750: IFFALSE 67772
// begin result := i ;
67752: LD_ADDR_VAR 0 3
67756: PUSH
67757: LD_VAR 0 4
67761: ST_TO_ADDR
// dist := tmpDist ;
67762: LD_ADDR_VAR 0 5
67766: PUSH
67767: LD_VAR 0 6
67771: ST_TO_ADDR
// end ; end ;
67772: GO 67704
67774: POP
67775: POP
// end ;
67776: LD_VAR 0 3
67780: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67781: LD_INT 0
67783: PPUSH
// uc_side := side ;
67784: LD_ADDR_OWVAR 20
67788: PUSH
67789: LD_VAR 0 1
67793: ST_TO_ADDR
// uc_nation := 3 ;
67794: LD_ADDR_OWVAR 21
67798: PUSH
67799: LD_INT 3
67801: ST_TO_ADDR
// vc_chassis := 25 ;
67802: LD_ADDR_OWVAR 37
67806: PUSH
67807: LD_INT 25
67809: ST_TO_ADDR
// vc_engine := engine_siberite ;
67810: LD_ADDR_OWVAR 39
67814: PUSH
67815: LD_INT 3
67817: ST_TO_ADDR
// vc_control := control_computer ;
67818: LD_ADDR_OWVAR 38
67822: PUSH
67823: LD_INT 3
67825: ST_TO_ADDR
// vc_weapon := 59 ;
67826: LD_ADDR_OWVAR 40
67830: PUSH
67831: LD_INT 59
67833: ST_TO_ADDR
// result := CreateVehicle ;
67834: LD_ADDR_VAR 0 5
67838: PUSH
67839: CALL_OW 45
67843: ST_TO_ADDR
// SetDir ( result , d ) ;
67844: LD_VAR 0 5
67848: PPUSH
67849: LD_VAR 0 4
67853: PPUSH
67854: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67858: LD_VAR 0 5
67862: PPUSH
67863: LD_VAR 0 2
67867: PPUSH
67868: LD_VAR 0 3
67872: PPUSH
67873: LD_INT 0
67875: PPUSH
67876: CALL_OW 48
// end ;
67880: LD_VAR 0 5
67884: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67885: LD_INT 0
67887: PPUSH
67888: PPUSH
67889: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67890: LD_ADDR_VAR 0 2
67894: PUSH
67895: LD_INT 0
67897: PUSH
67898: LD_INT 0
67900: PUSH
67901: LD_INT 0
67903: PUSH
67904: LD_INT 0
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67913: LD_VAR 0 1
67917: NOT
67918: IFTRUE 67951
67920: PUSH
67921: LD_VAR 0 1
67925: PPUSH
67926: CALL_OW 264
67930: PUSH
67931: LD_INT 12
67933: PUSH
67934: LD_INT 51
67936: PUSH
67937: LD_INT 32
67939: PUSH
67940: LD_INT 89
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: LIST
67947: LIST
67948: IN
67949: NOT
67950: OR
67951: IFFALSE 67955
// exit ;
67953: GO 68053
// for i := 1 to 3 do
67955: LD_ADDR_VAR 0 3
67959: PUSH
67960: DOUBLE
67961: LD_INT 1
67963: DEC
67964: ST_TO_ADDR
67965: LD_INT 3
67967: PUSH
67968: FOR_TO
67969: IFFALSE 68051
// begin tmp := GetCargo ( cargo , i ) ;
67971: LD_ADDR_VAR 0 4
67975: PUSH
67976: LD_VAR 0 1
67980: PPUSH
67981: LD_VAR 0 3
67985: PPUSH
67986: CALL_OW 289
67990: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67991: LD_ADDR_VAR 0 2
67995: PUSH
67996: LD_VAR 0 2
68000: PPUSH
68001: LD_VAR 0 3
68005: PPUSH
68006: LD_VAR 0 4
68010: PPUSH
68011: CALL_OW 1
68015: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68016: LD_ADDR_VAR 0 2
68020: PUSH
68021: LD_VAR 0 2
68025: PPUSH
68026: LD_INT 4
68028: PPUSH
68029: LD_VAR 0 2
68033: PUSH
68034: LD_INT 4
68036: ARRAY
68037: PUSH
68038: LD_VAR 0 4
68042: PLUS
68043: PPUSH
68044: CALL_OW 1
68048: ST_TO_ADDR
// end ;
68049: GO 67968
68051: POP
68052: POP
// end ;
68053: LD_VAR 0 2
68057: RET
// export function Length ( array ) ; begin
68058: LD_INT 0
68060: PPUSH
// result := array + 0 ;
68061: LD_ADDR_VAR 0 2
68065: PUSH
68066: LD_VAR 0 1
68070: PUSH
68071: LD_INT 0
68073: PLUS
68074: ST_TO_ADDR
// end ;
68075: LD_VAR 0 2
68079: RET
// export function PrepareArray ( array ) ; begin
68080: LD_INT 0
68082: PPUSH
// result := array diff 0 ;
68083: LD_ADDR_VAR 0 2
68087: PUSH
68088: LD_VAR 0 1
68092: PUSH
68093: LD_INT 0
68095: DIFF
68096: ST_TO_ADDR
// if not result [ 1 ] then
68097: LD_VAR 0 2
68101: PUSH
68102: LD_INT 1
68104: ARRAY
68105: NOT
68106: IFFALSE 68126
// result := Delete ( result , 1 ) ;
68108: LD_ADDR_VAR 0 2
68112: PUSH
68113: LD_VAR 0 2
68117: PPUSH
68118: LD_INT 1
68120: PPUSH
68121: CALL_OW 3
68125: ST_TO_ADDR
// end ;
68126: LD_VAR 0 2
68130: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68131: LD_INT 0
68133: PPUSH
68134: PPUSH
68135: PPUSH
68136: PPUSH
// sibRocketRange := 25 ;
68137: LD_ADDR_VAR 0 6
68141: PUSH
68142: LD_INT 25
68144: ST_TO_ADDR
// result := false ;
68145: LD_ADDR_VAR 0 4
68149: PUSH
68150: LD_INT 0
68152: ST_TO_ADDR
// for i := 0 to 5 do
68153: LD_ADDR_VAR 0 5
68157: PUSH
68158: DOUBLE
68159: LD_INT 0
68161: DEC
68162: ST_TO_ADDR
68163: LD_INT 5
68165: PUSH
68166: FOR_TO
68167: IFFALSE 68234
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68169: LD_VAR 0 1
68173: PPUSH
68174: LD_VAR 0 5
68178: PPUSH
68179: LD_VAR 0 6
68183: PPUSH
68184: CALL_OW 272
68188: PPUSH
68189: LD_VAR 0 2
68193: PPUSH
68194: LD_VAR 0 5
68198: PPUSH
68199: LD_VAR 0 6
68203: PPUSH
68204: CALL_OW 273
68208: PPUSH
68209: LD_VAR 0 3
68213: PPUSH
68214: CALL_OW 309
68218: IFFALSE 68232
// begin result := true ;
68220: LD_ADDR_VAR 0 4
68224: PUSH
68225: LD_INT 1
68227: ST_TO_ADDR
// exit ;
68228: POP
68229: POP
68230: GO 68236
// end ;
68232: GO 68166
68234: POP
68235: POP
// end ;
68236: LD_VAR 0 4
68240: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68241: LD_INT 0
68243: PPUSH
68244: PPUSH
68245: PPUSH
// if btype = b_depot then
68246: LD_VAR 0 2
68250: PUSH
68251: LD_INT 0
68253: EQUAL
68254: IFFALSE 68266
// begin result := true ;
68256: LD_ADDR_VAR 0 3
68260: PUSH
68261: LD_INT 1
68263: ST_TO_ADDR
// exit ;
68264: GO 68386
// end ; pom := GetBase ( depot ) ;
68266: LD_ADDR_VAR 0 4
68270: PUSH
68271: LD_VAR 0 1
68275: PPUSH
68276: CALL_OW 274
68280: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68281: LD_ADDR_VAR 0 5
68285: PUSH
68286: LD_VAR 0 2
68290: PPUSH
68291: LD_VAR 0 1
68295: PPUSH
68296: CALL_OW 248
68300: PPUSH
68301: CALL_OW 450
68305: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68306: LD_ADDR_VAR 0 3
68310: PUSH
68311: LD_VAR 0 4
68315: PPUSH
68316: LD_INT 1
68318: PPUSH
68319: CALL_OW 275
68323: PUSH
68324: LD_VAR 0 5
68328: PUSH
68329: LD_INT 1
68331: ARRAY
68332: GREATEREQUAL
68333: IFFALSE 68359
68335: PUSH
68336: LD_VAR 0 4
68340: PPUSH
68341: LD_INT 2
68343: PPUSH
68344: CALL_OW 275
68348: PUSH
68349: LD_VAR 0 5
68353: PUSH
68354: LD_INT 2
68356: ARRAY
68357: GREATEREQUAL
68358: AND
68359: IFFALSE 68385
68361: PUSH
68362: LD_VAR 0 4
68366: PPUSH
68367: LD_INT 3
68369: PPUSH
68370: CALL_OW 275
68374: PUSH
68375: LD_VAR 0 5
68379: PUSH
68380: LD_INT 3
68382: ARRAY
68383: GREATEREQUAL
68384: AND
68385: ST_TO_ADDR
// end ;
68386: LD_VAR 0 3
68390: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68391: LD_INT 0
68393: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68394: LD_VAR 0 1
68398: PPUSH
68399: LD_VAR 0 2
68403: PPUSH
68404: LD_INT 0
68406: PPUSH
68407: LD_INT 0
68409: PPUSH
68410: LD_INT 1
68412: PPUSH
68413: LD_INT 0
68415: PPUSH
68416: CALL_OW 587
// end ;
68420: LD_VAR 0 3
68424: RET
// export function CenterOnNow ( unit ) ; begin
68425: LD_INT 0
68427: PPUSH
// result := IsInUnit ( unit ) ;
68428: LD_ADDR_VAR 0 2
68432: PUSH
68433: LD_VAR 0 1
68437: PPUSH
68438: CALL_OW 310
68442: ST_TO_ADDR
// if not result then
68443: LD_VAR 0 2
68447: NOT
68448: IFFALSE 68460
// result := unit ;
68450: LD_ADDR_VAR 0 2
68454: PUSH
68455: LD_VAR 0 1
68459: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68460: LD_VAR 0 1
68464: PPUSH
68465: CALL_OW 87
// end ;
68469: LD_VAR 0 2
68473: RET
// export function ComMoveHex ( unit , hex ) ; begin
68474: LD_INT 0
68476: PPUSH
// if not hex then
68477: LD_VAR 0 2
68481: NOT
68482: IFFALSE 68486
// exit ;
68484: GO 68539
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68486: LD_VAR 0 2
68490: PUSH
68491: LD_INT 1
68493: ARRAY
68494: PPUSH
68495: LD_VAR 0 2
68499: PUSH
68500: LD_INT 2
68502: ARRAY
68503: PPUSH
68504: CALL_OW 428
68508: IFFALSE 68512
// exit ;
68510: GO 68539
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68512: LD_VAR 0 1
68516: PPUSH
68517: LD_VAR 0 2
68521: PUSH
68522: LD_INT 1
68524: ARRAY
68525: PPUSH
68526: LD_VAR 0 2
68530: PUSH
68531: LD_INT 2
68533: ARRAY
68534: PPUSH
68535: CALL_OW 111
// end ;
68539: LD_VAR 0 3
68543: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
68544: LD_INT 0
68546: PPUSH
68547: PPUSH
68548: PPUSH
// if not unit or not enemy then
68549: LD_VAR 0 1
68553: NOT
68554: IFTRUE 68563
68556: PUSH
68557: LD_VAR 0 2
68561: NOT
68562: OR
68563: IFFALSE 68567
// exit ;
68565: GO 68693
// x := GetX ( enemy ) ;
68567: LD_ADDR_VAR 0 4
68571: PUSH
68572: LD_VAR 0 2
68576: PPUSH
68577: CALL_OW 250
68581: ST_TO_ADDR
// y := GetY ( enemy ) ;
68582: LD_ADDR_VAR 0 5
68586: PUSH
68587: LD_VAR 0 2
68591: PPUSH
68592: CALL_OW 251
68596: ST_TO_ADDR
// if ValidHex ( x , y ) then
68597: LD_VAR 0 4
68601: PPUSH
68602: LD_VAR 0 5
68606: PPUSH
68607: CALL_OW 488
68611: IFFALSE 68693
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
68613: LD_VAR 0 2
68617: PPUSH
68618: CALL_OW 247
68622: PUSH
68623: LD_INT 3
68625: PUSH
68626: LD_INT 2
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: IN
68633: IFTRUE 68656
68635: PUSH
68636: LD_VAR 0 1
68640: PPUSH
68641: CALL_OW 255
68645: PPUSH
68646: LD_VAR 0 2
68650: PPUSH
68651: CALL_OW 292
68655: OR
68656: IFFALSE 68674
// ComAttackUnit ( unit , enemy ) else
68658: LD_VAR 0 1
68662: PPUSH
68663: LD_VAR 0 2
68667: PPUSH
68668: CALL_OW 115
68672: GO 68693
// ComAgressiveMove ( unit , x , y ) ;
68674: LD_VAR 0 1
68678: PPUSH
68679: LD_VAR 0 4
68683: PPUSH
68684: LD_VAR 0 5
68688: PPUSH
68689: CALL_OW 114
// end ;
68693: LD_VAR 0 3
68697: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
68698: LD_INT 0
68700: PPUSH
68701: PPUSH
68702: PPUSH
// list := AreaToList ( area , 0 ) ;
68703: LD_ADDR_VAR 0 5
68707: PUSH
68708: LD_VAR 0 1
68712: PPUSH
68713: LD_INT 0
68715: PPUSH
68716: CALL_OW 517
68720: ST_TO_ADDR
// if not list then
68721: LD_VAR 0 5
68725: NOT
68726: IFFALSE 68730
// exit ;
68728: GO 68860
// if all then
68730: LD_VAR 0 2
68734: IFFALSE 68822
// begin for i := 1 to list [ 1 ] do
68736: LD_ADDR_VAR 0 4
68740: PUSH
68741: DOUBLE
68742: LD_INT 1
68744: DEC
68745: ST_TO_ADDR
68746: LD_VAR 0 5
68750: PUSH
68751: LD_INT 1
68753: ARRAY
68754: PUSH
68755: FOR_TO
68756: IFFALSE 68818
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
68758: LD_ADDR_VAR 0 3
68762: PUSH
68763: LD_VAR 0 3
68767: PPUSH
68768: LD_VAR 0 3
68772: PUSH
68773: LD_INT 1
68775: PLUS
68776: PPUSH
68777: LD_VAR 0 5
68781: PUSH
68782: LD_INT 1
68784: ARRAY
68785: PUSH
68786: LD_VAR 0 4
68790: ARRAY
68791: PUSH
68792: LD_VAR 0 5
68796: PUSH
68797: LD_INT 2
68799: ARRAY
68800: PUSH
68801: LD_VAR 0 4
68805: ARRAY
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PPUSH
68811: CALL_OW 1
68815: ST_TO_ADDR
68816: GO 68755
68818: POP
68819: POP
// exit ;
68820: GO 68860
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
68822: LD_ADDR_VAR 0 3
68826: PUSH
68827: LD_VAR 0 5
68831: PUSH
68832: LD_INT 1
68834: ARRAY
68835: PUSH
68836: LD_INT 1
68838: ARRAY
68839: PUSH
68840: LD_VAR 0 5
68844: PUSH
68845: LD_INT 2
68847: ARRAY
68848: PUSH
68849: LD_INT 1
68851: ARRAY
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: EMPTY
68858: LIST
68859: ST_TO_ADDR
// end ;
68860: LD_VAR 0 3
68864: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
68865: LD_INT 0
68867: PPUSH
68868: PPUSH
// list := AreaToList ( area , 0 ) ;
68869: LD_ADDR_VAR 0 4
68873: PUSH
68874: LD_VAR 0 1
68878: PPUSH
68879: LD_INT 0
68881: PPUSH
68882: CALL_OW 517
68886: ST_TO_ADDR
// if not list then
68887: LD_VAR 0 4
68891: NOT
68892: IFFALSE 68896
// exit ;
68894: GO 68937
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
68896: LD_ADDR_VAR 0 3
68900: PUSH
68901: LD_VAR 0 4
68905: PUSH
68906: LD_INT 1
68908: ARRAY
68909: PUSH
68910: LD_INT 1
68912: ARRAY
68913: PUSH
68914: LD_VAR 0 4
68918: PUSH
68919: LD_INT 2
68921: ARRAY
68922: PUSH
68923: LD_INT 1
68925: ARRAY
68926: PUSH
68927: LD_VAR 0 2
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: LIST
68936: ST_TO_ADDR
// end ;
68937: LD_VAR 0 3
68941: RET
// export function First ( array ) ; begin
68942: LD_INT 0
68944: PPUSH
// if not array then
68945: LD_VAR 0 1
68949: NOT
68950: IFFALSE 68954
// exit ;
68952: GO 68968
// result := array [ 1 ] ;
68954: LD_ADDR_VAR 0 2
68958: PUSH
68959: LD_VAR 0 1
68963: PUSH
68964: LD_INT 1
68966: ARRAY
68967: ST_TO_ADDR
// end ;
68968: LD_VAR 0 2
68972: RET
// export function Last ( array ) ; begin
68973: LD_INT 0
68975: PPUSH
// if not array then
68976: LD_VAR 0 1
68980: NOT
68981: IFFALSE 68985
// exit ;
68983: GO 69001
// result := array [ array ] ;
68985: LD_ADDR_VAR 0 2
68989: PUSH
68990: LD_VAR 0 1
68994: PUSH
68995: LD_VAR 0 1
68999: ARRAY
69000: ST_TO_ADDR
// end ;
69001: LD_VAR 0 2
69005: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
69006: LD_INT 0
69008: PPUSH
69009: PPUSH
// result := [ ] ;
69010: LD_ADDR_VAR 0 5
69014: PUSH
69015: EMPTY
69016: ST_TO_ADDR
// if not array then
69017: LD_VAR 0 1
69021: NOT
69022: IFFALSE 69026
// exit ;
69024: GO 69138
// for i := 1 to array do
69026: LD_ADDR_VAR 0 6
69030: PUSH
69031: DOUBLE
69032: LD_INT 1
69034: DEC
69035: ST_TO_ADDR
69036: LD_VAR 0 1
69040: PUSH
69041: FOR_TO
69042: IFFALSE 69136
// if array [ i ] [ index ] = value then
69044: LD_VAR 0 1
69048: PUSH
69049: LD_VAR 0 6
69053: ARRAY
69054: PUSH
69055: LD_VAR 0 2
69059: ARRAY
69060: PUSH
69061: LD_VAR 0 3
69065: EQUAL
69066: IFFALSE 69134
// begin if indexColumn then
69068: LD_VAR 0 4
69072: IFFALSE 69108
// result := Join ( result , array [ i ] [ indexColumn ] ) else
69074: LD_ADDR_VAR 0 5
69078: PUSH
69079: LD_VAR 0 5
69083: PPUSH
69084: LD_VAR 0 1
69088: PUSH
69089: LD_VAR 0 6
69093: ARRAY
69094: PUSH
69095: LD_VAR 0 4
69099: ARRAY
69100: PPUSH
69101: CALL 64146 0 2
69105: ST_TO_ADDR
69106: GO 69134
// result := Join ( result , array [ i ] ) ;
69108: LD_ADDR_VAR 0 5
69112: PUSH
69113: LD_VAR 0 5
69117: PPUSH
69118: LD_VAR 0 1
69122: PUSH
69123: LD_VAR 0 6
69127: ARRAY
69128: PPUSH
69129: CALL 64146 0 2
69133: ST_TO_ADDR
// end ;
69134: GO 69041
69136: POP
69137: POP
// end ;
69138: LD_VAR 0 5
69142: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
69143: LD_INT 0
69145: PPUSH
// if not vehicles or not parkingPoint then
69146: LD_VAR 0 1
69150: NOT
69151: IFTRUE 69160
69153: PUSH
69154: LD_VAR 0 2
69158: NOT
69159: OR
69160: IFFALSE 69164
// exit ;
69162: GO 69262
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
69164: LD_ADDR_VAR 0 1
69168: PUSH
69169: LD_VAR 0 1
69173: PPUSH
69174: LD_INT 50
69176: PUSH
69177: EMPTY
69178: LIST
69179: PUSH
69180: LD_INT 3
69182: PUSH
69183: LD_INT 92
69185: PUSH
69186: LD_VAR 0 2
69190: PUSH
69191: LD_INT 1
69193: ARRAY
69194: PUSH
69195: LD_VAR 0 2
69199: PUSH
69200: LD_INT 2
69202: ARRAY
69203: PUSH
69204: LD_INT 8
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PPUSH
69221: CALL_OW 72
69225: ST_TO_ADDR
// if not vehicles then
69226: LD_VAR 0 1
69230: NOT
69231: IFFALSE 69235
// exit ;
69233: GO 69262
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
69235: LD_VAR 0 1
69239: PPUSH
69240: LD_VAR 0 2
69244: PUSH
69245: LD_INT 1
69247: ARRAY
69248: PPUSH
69249: LD_VAR 0 2
69253: PUSH
69254: LD_INT 2
69256: ARRAY
69257: PPUSH
69258: CALL_OW 111
// end ;
69262: LD_VAR 0 3
69266: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
69267: LD_INT 0
69269: PPUSH
69270: PPUSH
69271: PPUSH
// if not side or not area then
69272: LD_VAR 0 1
69276: NOT
69277: IFTRUE 69286
69279: PUSH
69280: LD_VAR 0 2
69284: NOT
69285: OR
69286: IFFALSE 69290
// exit ;
69288: GO 69409
// tmp := AreaToList ( area , 0 ) ;
69290: LD_ADDR_VAR 0 5
69294: PUSH
69295: LD_VAR 0 2
69299: PPUSH
69300: LD_INT 0
69302: PPUSH
69303: CALL_OW 517
69307: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
69308: LD_ADDR_VAR 0 4
69312: PUSH
69313: DOUBLE
69314: LD_INT 1
69316: DEC
69317: ST_TO_ADDR
69318: LD_VAR 0 5
69322: PUSH
69323: LD_INT 1
69325: ARRAY
69326: PUSH
69327: FOR_TO
69328: IFFALSE 69407
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69330: LD_VAR 0 5
69334: PUSH
69335: LD_INT 1
69337: ARRAY
69338: PUSH
69339: LD_VAR 0 4
69343: ARRAY
69344: PPUSH
69345: LD_VAR 0 5
69349: PUSH
69350: LD_INT 2
69352: ARRAY
69353: PUSH
69354: LD_VAR 0 4
69358: ARRAY
69359: PPUSH
69360: CALL_OW 351
69364: IFFALSE 69405
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
69366: LD_VAR 0 5
69370: PUSH
69371: LD_INT 1
69373: ARRAY
69374: PUSH
69375: LD_VAR 0 4
69379: ARRAY
69380: PPUSH
69381: LD_VAR 0 5
69385: PUSH
69386: LD_INT 2
69388: ARRAY
69389: PUSH
69390: LD_VAR 0 4
69394: ARRAY
69395: PPUSH
69396: LD_VAR 0 1
69400: PPUSH
69401: CALL_OW 244
// end ;
69405: GO 69327
69407: POP
69408: POP
// end ;
69409: LD_VAR 0 3
69413: RET
// export function UniqueArray ( array ) ; var i ; begin
69414: LD_INT 0
69416: PPUSH
69417: PPUSH
// result := [ ] ;
69418: LD_ADDR_VAR 0 2
69422: PUSH
69423: EMPTY
69424: ST_TO_ADDR
// if not array then
69425: LD_VAR 0 1
69429: NOT
69430: IFFALSE 69434
// exit ;
69432: GO 69495
// for i := 1 to array do
69434: LD_ADDR_VAR 0 3
69438: PUSH
69439: DOUBLE
69440: LD_INT 1
69442: DEC
69443: ST_TO_ADDR
69444: LD_VAR 0 1
69448: PUSH
69449: FOR_TO
69450: IFFALSE 69493
// if not array [ i ] in result then
69452: LD_VAR 0 1
69456: PUSH
69457: LD_VAR 0 3
69461: ARRAY
69462: PUSH
69463: LD_VAR 0 2
69467: IN
69468: NOT
69469: IFFALSE 69491
// result := Join ( result , i ) ;
69471: LD_ADDR_VAR 0 2
69475: PUSH
69476: LD_VAR 0 2
69480: PPUSH
69481: LD_VAR 0 3
69485: PPUSH
69486: CALL 64146 0 2
69490: ST_TO_ADDR
69491: GO 69449
69493: POP
69494: POP
// end ; end_of_file
69495: LD_VAR 0 2
69499: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69500: LD_VAR 0 1
69504: PUSH
69505: LD_INT 200
69507: DOUBLE
69508: GREATEREQUAL
69509: IFFALSE 69517
69511: LD_INT 299
69513: DOUBLE
69514: LESSEQUAL
69515: IFTRUE 69519
69517: GO 69551
69519: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69520: LD_VAR 0 1
69524: PPUSH
69525: LD_VAR 0 2
69529: PPUSH
69530: LD_VAR 0 3
69534: PPUSH
69535: LD_VAR 0 4
69539: PPUSH
69540: LD_VAR 0 5
69544: PPUSH
69545: CALL 4136 0 5
69549: GO 69628
69551: LD_INT 300
69553: DOUBLE
69554: GREATEREQUAL
69555: IFFALSE 69563
69557: LD_INT 399
69559: DOUBLE
69560: LESSEQUAL
69561: IFTRUE 69565
69563: GO 69627
69565: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69566: LD_VAR 0 1
69570: PPUSH
69571: LD_VAR 0 2
69575: PPUSH
69576: LD_VAR 0 3
69580: PPUSH
69581: LD_VAR 0 4
69585: PPUSH
69586: LD_VAR 0 5
69590: PPUSH
69591: LD_VAR 0 6
69595: PPUSH
69596: LD_VAR 0 7
69600: PPUSH
69601: LD_VAR 0 8
69605: PPUSH
69606: LD_VAR 0 9
69610: PPUSH
69611: LD_VAR 0 10
69615: PPUSH
69616: LD_VAR 0 11
69620: PPUSH
69621: CALL 22499 0 11
69625: GO 69628
69627: POP
// end ;
69628: PPOPN 11
69630: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69631: LD_VAR 0 1
69635: PPUSH
69636: LD_VAR 0 2
69640: PPUSH
69641: LD_VAR 0 3
69645: PPUSH
69646: LD_VAR 0 4
69650: PPUSH
69651: LD_VAR 0 5
69655: PPUSH
69656: CALL 3436 0 5
// end ; end_of_file
69660: PPOPN 5
69662: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69663: LD_VAR 0 1
69667: PPUSH
69668: LD_VAR 0 2
69672: PPUSH
69673: LD_VAR 0 3
69677: PPUSH
69678: LD_VAR 0 4
69682: PPUSH
69683: LD_VAR 0 5
69687: PPUSH
69688: LD_VAR 0 6
69692: PPUSH
69693: CALL 10039 0 6
// end ;
69697: PPOPN 6
69699: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69700: LD_INT 0
69702: PPUSH
// begin if not units then
69703: LD_VAR 0 1
69707: NOT
69708: IFFALSE 69712
// exit ;
69710: GO 69746
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
69712: LD_VAR 0 1
69716: PPUSH
69717: LD_VAR 0 2
69721: PPUSH
69722: LD_VAR 0 3
69726: PPUSH
69727: LD_VAR 0 4
69731: PPUSH
69732: LD_VAR 0 5
69736: PPUSH
69737: LD_VAR 0 6
69741: PPUSH
69742: CALL 9833 0 6
// end ;
69746: PPOPN 7
69748: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69749: CALL 9919 0 0
// end ;
69753: PPOPN 1
69755: END
