// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 25 0 0
// InitGlobalVariables ;
   8: CALL 7044 0 0
// PrepareLegion ;
  12: CALL 234 0 0
// PrepareAllies ;
  16: CALL 2225 0 0
// Action ;
  20: CALL 4051 0 0
// end ;
  24: END
// function InitGame ; begin
  25: LD_INT 0
  27: PPUSH
// RandomizeAll ;
  28: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  32: LD_ADDR_OWVAR 67
  36: PUSH
  37: LD_INT 0
  39: PPUSH
  40: CALL_OW 426
  44: ST_TO_ADDR
// if not Difficulty then
  45: LD_OWVAR 67
  49: NOT
  50: IFFALSE 60
// Difficulty := 2 ;
  52: LD_ADDR_OWVAR 67
  56: PUSH
  57: LD_INT 2
  59: ST_TO_ADDR
// InitVariables ;
  60: CALL 73 0 0
// SetDiplomacy ;
  64: CALL 186 0 0
// end ; end_of_file
  68: LD_VAR 0 1
  72: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , player_res_art , time_res_art , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave , player_artifact_ready , artifact_progress ; export function InitVariables ; begin
  73: LD_INT 0
  75: PPUSH
// points := 0 ;
  76: LD_ADDR_EXP 10
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// alert := false ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// game_over := false ;
  92: LD_ADDR_EXP 7
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// wave_time := 0 0$00 ;
 100: LD_ADDR_EXP 11
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// bonus_active := false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// ignore_wave := false ;
 116: LD_ADDR_EXP 15
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// player_res_art := false ;
 124: LD_ADDR_EXP 8
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// player_artifact_ready := false ;
 132: LD_ADDR_EXP 16
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// time_res_art := [ 25 25$00 , 32 32$00 , 40 40$00 ] [ Difficulty ] ;
 140: LD_ADDR_EXP 9
 144: PUSH
 145: LD_INT 52500
 147: PUSH
 148: LD_INT 67200
 150: PUSH
 151: LD_INT 84000
 153: PUSH
 154: EMPTY
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// bonus_num := 0 ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// artifact_progress := 0 ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// export function SetDiplomacy ; begin
 186: LD_INT 0
 188: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 189: LD_INT 92
 191: PPUSH
 192: LD_INT 48
 194: PPUSH
 195: LD_INT 8
 197: PPUSH
 198: LD_INT 32796
 200: NEG
 201: PPUSH
 202: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 206: LD_INT 92
 208: PPUSH
 209: LD_INT 48
 211: PPUSH
 212: LD_INT 8
 214: PPUSH
 215: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 219: LD_INT 5
 221: PPUSH
 222: LD_INT 8
 224: PPUSH
 225: CALL_OW 343
// end ; end_of_file
 229: LD_VAR 0 1
 233: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 234: LD_INT 0
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
 247: PPUSH
 248: PPUSH
 249: PPUSH
 250: PPUSH
 251: PPUSH
 252: PPUSH
 253: PPUSH
// uc_side := 2 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 2
 261: ST_TO_ADDR
// uc_nation := nation_arabian ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 2
 269: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 270: LD_INT 1
 272: PPUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 6
 278: PPUSH
 279: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 283: LD_ADDR_OWVAR 26
 287: PUSH
 288: LD_STRING Nicolas Vervecken
 290: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 291: LD_ADDR_OWVAR 33
 295: PUSH
 296: LD_STRING SecondCharsGal
 298: ST_TO_ADDR
// hc_face_number := 3 ;
 299: LD_ADDR_OWVAR 34
 303: PUSH
 304: LD_INT 3
 306: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 307: LD_ADDR_OWVAR 29
 311: PUSH
 312: LD_INT 11
 314: PUSH
 315: LD_INT 10
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: ST_TO_ADDR
// Vervecken := CreateHuman ;
 322: LD_ADDR_EXP 12
 326: PUSH
 327: CALL_OW 44
 331: ST_TO_ADDR
// InitHc ;
 332: CALL_OW 19
// uc_side := 8 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 8
 343: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 344: LD_INT 23
 346: PPUSH
 347: CALL_OW 274
 351: PPUSH
 352: LD_INT 1
 354: PPUSH
 355: LD_INT 4000
 357: PUSH
 358: LD_INT 2500
 360: PUSH
 361: LD_INT 1250
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: PUSH
 369: LD_OWVAR 67
 373: ARRAY
 374: PPUSH
 375: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 379: LD_INT 23
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_INT 2
 389: PPUSH
 390: LD_INT 300
 392: PPUSH
 393: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 397: LD_INT 23
 399: PPUSH
 400: CALL_OW 274
 404: PPUSH
 405: LD_INT 3
 407: PPUSH
 408: LD_INT 100
 410: PUSH
 411: LD_INT 50
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: PPUSH
 428: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 432: LD_ADDR_VAR 0 14
 436: PUSH
 437: LD_INT 23
 439: PPUSH
 440: CALL_OW 250
 444: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 445: LD_ADDR_VAR 0 15
 449: PUSH
 450: LD_INT 23
 452: PPUSH
 453: CALL_OW 251
 457: ST_TO_ADDR
// team := [ ] ;
 458: LD_ADDR_VAR 0 7
 462: PUSH
 463: EMPTY
 464: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 465: LD_ADDR_VAR 0 8
 469: PUSH
 470: LD_INT 9
 472: PUSH
 473: LD_INT 8
 475: PUSH
 476: LD_INT 7
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 490: LD_ADDR_VAR 0 9
 494: PUSH
 495: LD_INT 11
 497: PUSH
 498: LD_INT 9
 500: PUSH
 501: LD_INT 8
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: PUSH
 509: LD_OWVAR 67
 513: ARRAY
 514: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 515: LD_ADDR_VAR 0 10
 519: PUSH
 520: LD_INT 3
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: LD_INT 2
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_OWVAR 67
 538: ARRAY
 539: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 540: LD_ADDR_VAR 0 11
 544: PUSH
 545: LD_INT 5
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: LD_INT 3
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_OWVAR 67
 563: ARRAY
 564: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 565: LD_ADDR_VAR 0 12
 569: PUSH
 570: LD_INT 3
 572: PUSH
 573: LD_INT 2
 575: PUSH
 576: LD_INT 2
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: PUSH
 584: LD_OWVAR 67
 588: ARRAY
 589: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 590: LD_ADDR_VAR 0 13
 594: PUSH
 595: LD_INT 6
 597: PUSH
 598: LD_INT 5
 600: PUSH
 601: LD_INT 4
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: LD_OWVAR 67
 613: ARRAY
 614: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 615: LD_ADDR_VAR 0 18
 619: PUSH
 620: LD_INT 13
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: LD_INT 26
 631: PUSH
 632: EMPTY
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 14
 640: PUSH
 641: LD_INT 3
 643: PUSH
 644: LD_INT 1
 646: PUSH
 647: LD_INT 25
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: PUSH
 656: LD_INT 14
 658: PUSH
 659: LD_INT 3
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 32
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 14
 676: PUSH
 677: LD_INT 3
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: LD_INT 31
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 14
 694: PUSH
 695: LD_INT 3
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 24
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: PUSH
 710: LD_INT 14
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 25
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 13
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 24
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 755: LD_ADDR_VAR 0 2
 759: PUSH
 760: DOUBLE
 761: LD_INT 1
 763: DEC
 764: ST_TO_ADDR
 765: LD_VAR 0 18
 769: PUSH
 770: LD_OWVAR 67
 774: MINUS
 775: PUSH
 776: LD_INT 1
 778: PLUS
 779: PUSH
 780: FOR_TO
 781: IFFALSE 910
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 783: LD_ADDR_OWVAR 37
 787: PUSH
 788: LD_VAR 0 18
 792: PUSH
 793: LD_VAR 0 2
 797: ARRAY
 798: PUSH
 799: LD_INT 1
 801: ARRAY
 802: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 803: LD_ADDR_OWVAR 39
 807: PUSH
 808: LD_VAR 0 18
 812: PUSH
 813: LD_VAR 0 2
 817: ARRAY
 818: PUSH
 819: LD_INT 2
 821: ARRAY
 822: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 823: LD_ADDR_OWVAR 38
 827: PUSH
 828: LD_VAR 0 18
 832: PUSH
 833: LD_VAR 0 2
 837: ARRAY
 838: PUSH
 839: LD_INT 3
 841: ARRAY
 842: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 843: LD_ADDR_OWVAR 40
 847: PUSH
 848: LD_VAR 0 18
 852: PUSH
 853: LD_VAR 0 2
 857: ARRAY
 858: PUSH
 859: LD_INT 4
 861: ARRAY
 862: ST_TO_ADDR
// un := CreateVehicle ;
 863: LD_ADDR_VAR 0 6
 867: PUSH
 868: CALL_OW 45
 872: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 873: LD_VAR 0 6
 877: PPUSH
 878: LD_INT 0
 880: PPUSH
 881: LD_INT 5
 883: PPUSH
 884: CALL_OW 12
 888: PPUSH
 889: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 893: LD_VAR 0 6
 897: PPUSH
 898: LD_INT 7
 900: PPUSH
 901: LD_INT 0
 903: PPUSH
 904: CALL_OW 49
// end ;
 908: GO 780
 910: POP
 911: POP
// for i = 1 to ape_num do
 912: LD_ADDR_VAR 0 2
 916: PUSH
 917: DOUBLE
 918: LD_INT 1
 920: DEC
 921: ST_TO_ADDR
 922: LD_VAR 0 13
 926: PUSH
 927: FOR_TO
 928: IFFALSE 995
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 930: LD_INT 0
 932: PPUSH
 933: LD_INT 16
 935: PUSH
 936: LD_INT 15
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PUSH
 943: LD_INT 1
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: CALL_OW 12
 953: ARRAY
 954: PPUSH
 955: LD_VAR 0 8
 959: PPUSH
 960: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 964: LD_ADDR_VAR 0 7
 968: PUSH
 969: LD_VAR 0 7
 973: PPUSH
 974: LD_VAR 0 7
 978: PUSH
 979: LD_INT 1
 981: PLUS
 982: PPUSH
 983: CALL_OW 44
 987: PPUSH
 988: CALL_OW 2
 992: ST_TO_ADDR
// end ;
 993: GO 927
 995: POP
 996: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 997: LD_INT 1
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_VAR 0 8
1007: PPUSH
1008: CALL_OW 380
// l1 := CreateHuman ;
1012: LD_ADDR_EXP 2
1016: PUSH
1017: CALL_OW 44
1021: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
1022: LD_EXP 2
1026: PPUSH
1027: LD_INT 23
1029: PPUSH
1030: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
1034: LD_INT 1
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_VAR 0 8
1044: PPUSH
1045: CALL_OW 380
// l2 := CreateHuman ;
1049: LD_ADDR_EXP 3
1053: PUSH
1054: CALL_OW 44
1058: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1059: LD_EXP 3
1063: PPUSH
1064: LD_INT 23
1066: PPUSH
1067: CALL_OW 52
// for class = 1 to 4 do
1071: LD_ADDR_VAR 0 4
1075: PUSH
1076: DOUBLE
1077: LD_INT 1
1079: DEC
1080: ST_TO_ADDR
1081: LD_INT 4
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1184
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1087: LD_ADDR_VAR 0 2
1091: PUSH
1092: DOUBLE
1093: LD_INT 1
1095: DEC
1096: ST_TO_ADDR
1097: LD_VAR 0 9
1101: PUSH
1102: LD_VAR 0 10
1106: PUSH
1107: LD_VAR 0 11
1111: PUSH
1112: LD_VAR 0 12
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: PUSH
1123: LD_VAR 0 4
1127: ARRAY
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1180
// begin PrepareHuman ( false , class , skill ) ;
1132: LD_INT 0
1134: PPUSH
1135: LD_VAR 0 4
1139: PPUSH
1140: LD_VAR 0 8
1144: PPUSH
1145: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1149: LD_ADDR_VAR 0 7
1153: PUSH
1154: LD_VAR 0 7
1158: PPUSH
1159: LD_VAR 0 7
1163: PUSH
1164: LD_INT 1
1166: PLUS
1167: PPUSH
1168: CALL_OW 44
1172: PPUSH
1173: CALL_OW 2
1177: ST_TO_ADDR
// end ;
1178: GO 1129
1180: POP
1181: POP
1182: GO 1084
1184: POP
1185: POP
// for i in team do
1186: LD_ADDR_VAR 0 2
1190: PUSH
1191: LD_VAR 0 7
1195: PUSH
1196: FOR_IN
1197: IFFALSE 1673
// begin b := 0 ;
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 0
1206: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1207: LD_VAR 0 2
1211: PPUSH
1212: CALL_OW 257
1216: PUSH
1217: LD_INT 1
1219: DOUBLE
1220: EQUAL
1221: IFTRUE 1225
1223: GO 1332
1225: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1226: LD_ADDR_VAR 0 5
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_OWVAR 20
1238: PUSH
1239: EMPTY
1240: LIST
1241: LIST
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 30
1248: PUSH
1249: LD_INT 32
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PUSH
1256: LD_INT 30
1258: PUSH
1259: LD_INT 31
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 58
1273: PUSH
1274: EMPTY
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// if not b then
1287: LD_VAR 0 5
1291: NOT
1292: IFFALSE 1330
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_INT 22
1301: PUSH
1302: LD_OWVAR 20
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 30
1313: PUSH
1314: LD_INT 5
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: PPUSH
1325: CALL_OW 69
1329: ST_TO_ADDR
// end ; class_engineer :
1330: GO 1571
1332: LD_INT 2
1334: DOUBLE
1335: EQUAL
1336: IFTRUE 1340
1338: GO 1379
1340: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1341: LD_ADDR_VAR 0 5
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_OWVAR 20
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 30
1360: PUSH
1361: LD_INT 1
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 69
1376: ST_TO_ADDR
1377: GO 1571
1379: LD_INT 3
1381: DOUBLE
1382: EQUAL
1383: IFTRUE 1387
1385: GO 1476
1387: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1388: LD_ADDR_VAR 0 5
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: LD_OWVAR 20
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 21
1407: PUSH
1408: LD_INT 2
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: PUSH
1415: LD_INT 58
1417: PUSH
1418: EMPTY
1419: LIST
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: PPUSH
1426: CALL_OW 69
1430: ST_TO_ADDR
// if not b then
1431: LD_VAR 0 5
1435: NOT
1436: IFFALSE 1474
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1438: LD_ADDR_VAR 0 5
1442: PUSH
1443: LD_INT 22
1445: PUSH
1446: LD_OWVAR 20
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 30
1457: PUSH
1458: LD_INT 3
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PPUSH
1469: CALL_OW 69
1473: ST_TO_ADDR
// end ; class_scientistic :
1474: GO 1571
1476: LD_INT 4
1478: DOUBLE
1479: EQUAL
1480: IFTRUE 1484
1482: GO 1523
1484: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1485: LD_ADDR_VAR 0 5
1489: PUSH
1490: LD_INT 22
1492: PUSH
1493: LD_OWVAR 20
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 30
1504: PUSH
1505: LD_INT 8
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PPUSH
1516: CALL_OW 69
1520: ST_TO_ADDR
// end ; class_apeman_soldier :
1521: GO 1571
1523: LD_INT 15
1525: DOUBLE
1526: EQUAL
1527: IFTRUE 1531
1529: GO 1570
1531: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1532: LD_ADDR_VAR 0 5
1536: PUSH
1537: LD_INT 22
1539: PUSH
1540: LD_OWVAR 20
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 30
1551: PUSH
1552: LD_INT 5
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PPUSH
1563: CALL_OW 69
1567: ST_TO_ADDR
1568: GO 1571
1570: POP
// if b then
1571: LD_VAR 0 5
1575: IFFALSE 1646
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1577: LD_VAR 0 5
1581: PUSH
1582: LD_INT 1
1584: ARRAY
1585: PPUSH
1586: CALL_OW 266
1590: PUSH
1591: LD_INT 31
1593: EQUAL
1594: IFFALSE 1616
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1596: LD_VAR 0 2
1600: PPUSH
1601: LD_VAR 0 5
1605: PUSH
1606: LD_INT 1
1608: ARRAY
1609: PPUSH
1610: CALL 4814 0 2
1614: GO 1644
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1616: LD_VAR 0 2
1620: PPUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_INT 1
1628: PPUSH
1629: LD_VAR 0 5
1633: PPUSH
1634: CALL_OW 12
1638: ARRAY
1639: PPUSH
1640: CALL_OW 52
1644: GO 1671
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1646: LD_VAR 0 2
1650: PPUSH
1651: LD_VAR 0 14
1655: PPUSH
1656: LD_VAR 0 15
1660: PPUSH
1661: LD_INT 15
1663: PPUSH
1664: LD_INT 0
1666: PPUSH
1667: CALL_OW 50
// end ;
1671: GO 1196
1673: POP
1674: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1675: LD_ADDR_VAR 0 16
1679: PUSH
1680: LD_INT 26
1682: PUSH
1683: LD_INT 3
1685: PUSH
1686: LD_INT 2
1688: PUSH
1689: LD_INT 1
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: PUSH
1697: LD_OWVAR 67
1701: ARRAY
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 5
1712: PUSH
1713: LD_INT 4
1715: PUSH
1716: LD_INT 3
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_OWVAR 67
1728: ARRAY
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 24
1736: PUSH
1737: LD_INT 5
1739: PUSH
1740: LD_INT 5
1742: PUSH
1743: LD_INT 4
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: LD_OWVAR 67
1755: ARRAY
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 30
1763: PUSH
1764: LD_INT 2
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: PUSH
1778: LD_OWVAR 67
1782: ARRAY
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1794: LD_ADDR_VAR 0 2
1798: PUSH
1799: LD_INT 22
1801: PUSH
1802: LD_OWVAR 20
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PUSH
1811: LD_INT 30
1813: PUSH
1814: LD_INT 32
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PPUSH
1825: CALL_OW 69
1829: PUSH
1830: FOR_IN
1831: IFFALSE 2004
// begin if weapons then
1833: LD_VAR 0 16
1837: IFFALSE 1961
// begin k := rand ( 1 , weapons ) ;
1839: LD_ADDR_VAR 0 3
1843: PUSH
1844: LD_INT 1
1846: PPUSH
1847: LD_VAR 0 16
1851: PPUSH
1852: CALL_OW 12
1856: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1857: LD_ADDR_VAR 0 17
1861: PUSH
1862: LD_VAR 0 16
1866: PUSH
1867: LD_VAR 0 3
1871: ARRAY
1872: PUSH
1873: LD_INT 1
1875: ARRAY
1876: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1877: LD_ADDR_VAR 0 16
1881: PUSH
1882: LD_VAR 0 16
1886: PPUSH
1887: LD_VAR 0 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: LD_VAR 0 16
1899: PUSH
1900: LD_VAR 0 3
1904: ARRAY
1905: PUSH
1906: LD_INT 2
1908: ARRAY
1909: PUSH
1910: LD_INT 1
1912: MINUS
1913: PPUSH
1914: CALL 4906 0 4
1918: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1919: LD_VAR 0 16
1923: PUSH
1924: LD_VAR 0 3
1928: ARRAY
1929: PUSH
1930: LD_INT 2
1932: ARRAY
1933: PUSH
1934: LD_INT 0
1936: EQUAL
1937: IFFALSE 1959
// weapons := Delete ( weapons , k ) ;
1939: LD_ADDR_VAR 0 16
1943: PUSH
1944: LD_VAR 0 16
1948: PPUSH
1949: LD_VAR 0 3
1953: PPUSH
1954: CALL_OW 3
1958: ST_TO_ADDR
// end else
1959: GO 1988
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1961: LD_ADDR_VAR 0 17
1965: PUSH
1966: LD_INT 27
1968: PUSH
1969: LD_INT 23
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: CALL_OW 12
1986: ARRAY
1987: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: LD_VAR 0 17
1997: PPUSH
1998: CALL_OW 431
// end ;
2002: GO 1830
2004: POP
2005: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_VAR 0 8
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: CALL_OW 380
// hc_gallery := potter ;
2025: LD_ADDR_OWVAR 33
2029: PUSH
2030: LD_STRING potter
2032: ST_TO_ADDR
// hc_face_number := 1 ;
2033: LD_ADDR_OWVAR 34
2037: PUSH
2038: LD_INT 1
2040: ST_TO_ADDR
// hc_importance := 100 ;
2041: LD_ADDR_OWVAR 32
2045: PUSH
2046: LD_INT 100
2048: ST_TO_ADDR
// hc_name := Mike Gerste ;
2049: LD_ADDR_OWVAR 26
2053: PUSH
2054: LD_STRING Mike Gerste
2056: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2057: LD_ADDR_OWVAR 29
2061: PUSH
2062: LD_INT 10
2064: PUSH
2065: LD_INT 11
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: ST_TO_ADDR
// legion_commander := CreateHuman ;
2072: LD_ADDR_EXP 1
2076: PUSH
2077: CALL_OW 44
2081: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2082: LD_EXP 1
2086: PPUSH
2087: LD_INT 23
2089: PPUSH
2090: CALL_OW 52
// uc_side := 5 ;
2094: LD_ADDR_OWVAR 20
2098: PUSH
2099: LD_INT 5
2101: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2102: LD_INT 1
2104: PPUSH
2105: LD_INT 4
2107: PPUSH
2108: LD_VAR 0 8
2112: PPUSH
2113: CALL_OW 380
// hc_gallery := potter ;
2117: LD_ADDR_OWVAR 33
2121: PUSH
2122: LD_STRING potter
2124: ST_TO_ADDR
// hc_face_number := 2 ;
2125: LD_ADDR_OWVAR 34
2129: PUSH
2130: LD_INT 2
2132: ST_TO_ADDR
// hc_importance := 0 ;
2133: LD_ADDR_OWVAR 32
2137: PUSH
2138: LD_INT 0
2140: ST_TO_ADDR
// hc_name := George Potter ;
2141: LD_ADDR_OWVAR 26
2145: PUSH
2146: LD_STRING George Potter
2148: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2149: LD_ADDR_OWVAR 29
2153: PUSH
2154: LD_INT 12
2156: PUSH
2157: LD_INT 9
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: ST_TO_ADDR
// potter := CreateHuman ;
2164: LD_ADDR_EXP 4
2168: PUSH
2169: CALL_OW 44
2173: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2174: LD_EXP 4
2178: PPUSH
2179: LD_INT 4
2181: PPUSH
2182: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2186: LD_EXP 4
2190: PPUSH
2191: LD_INT 103
2193: PPUSH
2194: LD_INT 45
2196: PPUSH
2197: LD_INT 0
2199: PPUSH
2200: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2204: LD_EXP 4
2208: PPUSH
2209: LD_INT 23
2211: PPUSH
2212: CALL_OW 119
// InitHc ( ) ;
2216: CALL_OW 19
// end ; end_of_file
2220: LD_VAR 0 1
2224: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
// uc_side := 5 ;
2232: LD_ADDR_OWVAR 20
2236: PUSH
2237: LD_INT 5
2239: ST_TO_ADDR
// uc_nation := nation_arabian ;
2240: LD_ADDR_OWVAR 21
2244: PUSH
2245: LD_INT 2
2247: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2248: LD_ADDR_VAR 0 4
2252: PUSH
2253: LD_INT 22
2255: PUSH
2256: LD_OWVAR 20
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 30
2267: PUSH
2268: LD_INT 5
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: PPUSH
2279: CALL_OW 69
2283: ST_TO_ADDR
// for i = 1 to 3 do
2284: LD_ADDR_VAR 0 2
2288: PUSH
2289: DOUBLE
2290: LD_INT 1
2292: DEC
2293: ST_TO_ADDR
2294: LD_INT 3
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2336
// begin PrepareHuman ( false , 2 , 6 ) ;
2300: LD_INT 0
2302: PPUSH
2303: LD_INT 2
2305: PPUSH
2306: LD_INT 6
2308: PPUSH
2309: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2313: CALL_OW 44
2317: PPUSH
2318: LD_INT 27
2320: PPUSH
2321: LD_INT 22
2323: PPUSH
2324: LD_INT 5
2326: PPUSH
2327: LD_INT 0
2329: PPUSH
2330: CALL_OW 50
// end ;
2334: GO 2297
2336: POP
2337: POP
// for i = 1 to 3 do
2338: LD_ADDR_VAR 0 2
2342: PUSH
2343: DOUBLE
2344: LD_INT 1
2346: DEC
2347: ST_TO_ADDR
2348: LD_INT 3
2350: PUSH
2351: FOR_TO
2352: IFFALSE 2387
// begin PrepareHuman ( false , 1 , 6 ) ;
2354: LD_INT 0
2356: PPUSH
2357: LD_INT 1
2359: PPUSH
2360: LD_INT 6
2362: PPUSH
2363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2367: CALL_OW 44
2371: PPUSH
2372: LD_VAR 0 4
2376: PUSH
2377: LD_INT 1
2379: ARRAY
2380: PPUSH
2381: CALL_OW 52
// end ;
2385: GO 2351
2387: POP
2388: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2389: LD_ADDR_VAR 0 2
2393: PUSH
2394: LD_INT 22
2396: PUSH
2397: LD_OWVAR 20
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 2
2408: PUSH
2409: LD_INT 30
2411: PUSH
2412: LD_INT 31
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 30
2421: PUSH
2422: LD_INT 32
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PPUSH
2438: CALL_OW 69
2442: PUSH
2443: FOR_IN
2444: IFFALSE 2531
// begin PrepareHuman ( false , 1 , 6 ) ;
2446: LD_INT 0
2448: PPUSH
2449: LD_INT 1
2451: PPUSH
2452: LD_INT 6
2454: PPUSH
2455: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2459: CALL_OW 44
2463: PPUSH
2464: LD_VAR 0 2
2468: PPUSH
2469: CALL 4814 0 2
// if GetBType ( i ) = b_bunker then
2473: LD_VAR 0 2
2477: PPUSH
2478: CALL_OW 266
2482: PUSH
2483: LD_INT 32
2485: EQUAL
2486: IFFALSE 2529
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2488: LD_VAR 0 2
2492: PPUSH
2493: LD_INT 27
2495: PUSH
2496: LD_INT 25
2498: PUSH
2499: LD_INT 24
2501: PUSH
2502: LD_INT 28
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: LD_VAR 0 2
2515: PUSH
2516: LD_INT 4
2518: MOD
2519: PUSH
2520: LD_INT 1
2522: PLUS
2523: ARRAY
2524: PPUSH
2525: CALL_OW 431
// end ;
2529: GO 2443
2531: POP
2532: POP
// for i = 1 to 3 do
2533: LD_ADDR_VAR 0 2
2537: PUSH
2538: DOUBLE
2539: LD_INT 1
2541: DEC
2542: ST_TO_ADDR
2543: LD_INT 3
2545: PUSH
2546: FOR_TO
2547: IFFALSE 2664
// begin vc_chassis := ar_half_tracked ;
2549: LD_ADDR_OWVAR 37
2553: PUSH
2554: LD_INT 14
2556: ST_TO_ADDR
// vc_engine := engine_solar ;
2557: LD_ADDR_OWVAR 39
2561: PUSH
2562: LD_INT 2
2564: ST_TO_ADDR
// vc_control := control_manual ;
2565: LD_ADDR_OWVAR 38
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2573: LD_ADDR_OWVAR 40
2577: PUSH
2578: LD_INT 25
2580: PUSH
2581: LD_INT 27
2583: PUSH
2584: LD_INT 26
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: PUSH
2592: LD_VAR 0 2
2596: ARRAY
2597: ST_TO_ADDR
// un := CreateVehicle ;
2598: LD_ADDR_VAR 0 3
2602: PUSH
2603: CALL_OW 45
2607: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2608: LD_VAR 0 3
2612: PPUSH
2613: LD_INT 5
2615: PPUSH
2616: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2620: LD_VAR 0 3
2624: PPUSH
2625: LD_INT 8
2627: PPUSH
2628: LD_INT 0
2630: PPUSH
2631: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2635: LD_INT 0
2637: PPUSH
2638: LD_INT 3
2640: PPUSH
2641: LD_INT 7
2643: PPUSH
2644: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2648: CALL_OW 44
2652: PPUSH
2653: LD_VAR 0 3
2657: PPUSH
2658: CALL_OW 52
// end ;
2662: GO 2546
2664: POP
2665: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2666: LD_INT 1
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 6
2674: PPUSH
2675: CALL_OW 380
// al_commander := CreateHuman ;
2679: LD_ADDR_EXP 5
2683: PUSH
2684: CALL_OW 44
2688: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2689: LD_EXP 5
2693: PPUSH
2694: LD_INT 22
2696: PUSH
2697: LD_OWVAR 20
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 30
2708: PUSH
2709: LD_INT 0
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PPUSH
2720: CALL_OW 69
2724: PUSH
2725: LD_INT 1
2727: ARRAY
2728: PPUSH
2729: CALL_OW 52
// InitHc ( ) ;
2733: CALL_OW 19
// end ;
2737: LD_VAR 0 1
2741: RET
// export function ChangeSide ( ) ; var i ; begin
2742: LD_INT 0
2744: PPUSH
2745: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2746: LD_ADDR_VAR 0 2
2750: PUSH
2751: LD_INT 22
2753: PUSH
2754: LD_INT 5
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PPUSH
2761: CALL_OW 69
2765: PUSH
2766: FOR_IN
2767: IFFALSE 2783
// SetSide ( i , 8 ) ;
2769: LD_VAR 0 2
2773: PPUSH
2774: LD_INT 8
2776: PPUSH
2777: CALL_OW 235
2781: GO 2766
2783: POP
2784: POP
// end ;
2785: LD_VAR 0 1
2789: RET
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2790: LD_INT 22
2792: PUSH
2793: LD_INT 5
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PPUSH
2800: CALL_OW 69
2804: IFFALSE 3318
2806: GO 2808
2808: DISABLE
2809: LD_INT 0
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
// begin enable ;
2817: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2818: LD_ADDR_VAR 0 2
2822: PUSH
2823: LD_INT 22
2825: PUSH
2826: LD_INT 5
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 2
2835: PUSH
2836: LD_INT 21
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 21
2848: PUSH
2849: LD_INT 2
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PPUSH
2865: CALL_OW 69
2869: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2870: LD_ADDR_VAR 0 5
2874: PUSH
2875: LD_INT 22
2877: PUSH
2878: LD_INT 5
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 32
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: LD_INT 3
2897: PUSH
2898: LD_INT 24
2900: PUSH
2901: LD_INT 1000
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: LIST
2916: PPUSH
2917: CALL_OW 69
2921: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2922: LD_ADDR_VAR 0 6
2926: PUSH
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 3
2934: PUSH
2935: LD_INT 54
2937: PUSH
2938: EMPTY
2939: LIST
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: PUSH
2945: LD_INT 25
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 72
2963: ST_TO_ADDR
// if not list then
2964: LD_VAR 0 2
2968: NOT
2969: IFFALSE 2973
// exit ;
2971: GO 3318
// for i in list do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: LD_VAR 0 2
2982: PUSH
2983: FOR_IN
2984: IFFALSE 3316
// begin if b then
2986: LD_VAR 0 5
2990: IFFALSE 3069
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2992: LD_ADDR_VAR 0 4
2996: PUSH
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_INT 25
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PPUSH
3012: CALL_OW 72
3016: PUSH
3017: FOR_IN
3018: IFFALSE 3067
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
3020: LD_VAR 0 4
3024: PPUSH
3025: CALL_OW 314
3029: NOT
3030: PUSH
3031: LD_VAR 0 1
3035: PPUSH
3036: CALL_OW 110
3040: PUSH
3041: LD_INT 7
3043: NONEQUAL
3044: AND
3045: IFFALSE 3065
// ComRepairBuilding ( j , b [ 1 ] ) ;
3047: LD_VAR 0 4
3051: PPUSH
3052: LD_VAR 0 5
3056: PUSH
3057: LD_INT 1
3059: ARRAY
3060: PPUSH
3061: CALL_OW 130
3065: GO 3017
3067: POP
3068: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3069: LD_VAR 0 1
3073: PPUSH
3074: CALL_OW 256
3078: PUSH
3079: LD_INT 500
3081: LESS
3082: PUSH
3083: LD_VAR 0 1
3087: PPUSH
3088: CALL_OW 110
3092: PUSH
3093: LD_INT 7
3095: EQUAL
3096: NOT
3097: AND
3098: IFFALSE 3148
// begin ComMoveToArea ( i , guard_hill ) ;
3100: LD_VAR 0 1
3104: PPUSH
3105: LD_INT 11
3107: PPUSH
3108: CALL_OW 113
// SetTag ( i , 7 ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 7
3119: PPUSH
3120: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 247
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: IFFALSE 3148
// begin AddComExitVehicle ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3148: LD_VAR 0 1
3152: PPUSH
3153: CALL_OW 256
3157: PUSH
3158: LD_INT 1000
3160: EQUAL
3161: PUSH
3162: LD_VAR 0 1
3166: PPUSH
3167: CALL_OW 110
3171: PUSH
3172: LD_INT 7
3174: EQUAL
3175: AND
3176: PUSH
3177: LD_VAR 0 1
3181: PPUSH
3182: CALL_OW 310
3186: NOT
3187: AND
3188: PUSH
3189: LD_VAR 0 6
3193: AND
3194: IFFALSE 3222
// begin SetTag ( i , 0 ) ;
3196: LD_VAR 0 1
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3208: LD_VAR 0 6
3212: PPUSH
3213: LD_VAR 0 1
3217: PPUSH
3218: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3222: LD_VAR 0 1
3226: PPUSH
3227: CALL_OW 247
3231: PUSH
3232: LD_INT 2
3234: EQUAL
3235: PUSH
3236: LD_VAR 0 1
3240: PPUSH
3241: CALL_OW 110
3245: PUSH
3246: LD_INT 7
3248: NONEQUAL
3249: AND
3250: PUSH
3251: LD_VAR 0 1
3255: PPUSH
3256: CALL_OW 314
3260: NOT
3261: AND
3262: IFFALSE 3314
// if FilterAllUnits ( [ f_side , 7 ] ) then
3264: LD_INT 22
3266: PUSH
3267: LD_INT 7
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PPUSH
3274: CALL_OW 69
3278: IFFALSE 3314
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3280: LD_VAR 0 1
3284: PPUSH
3285: LD_INT 22
3287: PUSH
3288: LD_INT 7
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PPUSH
3300: LD_VAR 0 1
3304: PPUSH
3305: CALL_OW 74
3309: PPUSH
3310: CALL_OW 115
// end ;
3314: GO 2983
3316: POP
3317: POP
// end ; end_of_file
3318: PPOPN 6
3320: END
// export function Game ; var i , val , areas , wave ; begin
3321: LD_INT 0
3323: PPUSH
3324: PPUSH
3325: PPUSH
3326: PPUSH
3327: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3328: LD_ADDR_VAR 0 4
3332: PUSH
3333: LD_INT 1
3335: PUSH
3336: LD_INT 2
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: LD_INT 4
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: LD_INT 6
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: ST_TO_ADDR
// val := [ 5 , 6 , 7 ] [ Difficulty ] ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_INT 5
3366: PUSH
3367: LD_INT 6
3369: PUSH
3370: LD_INT 7
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: LIST
3377: PUSH
3378: LD_OWVAR 67
3382: ARRAY
3383: ST_TO_ADDR
// wave := 1 ;
3384: LD_ADDR_VAR 0 5
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// while not game_over do
3392: LD_EXP 7
3396: NOT
3397: IFFALSE 3553
// begin repeat begin Wait ( 0 0$01 ) ;
3399: LD_INT 35
3401: PPUSH
3402: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3406: LD_ADDR_EXP 11
3410: PUSH
3411: LD_EXP 11
3415: PUSH
3416: LD_INT 35
3418: PLUS
3419: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3420: LD_INT 22
3422: PUSH
3423: LD_INT 7
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: PUSH
3435: LD_INT 10
3437: LESS
3438: PUSH
3439: LD_EXP 11
3443: PUSH
3444: LD_INT 21000
3446: GREATEREQUAL
3447: OR
3448: IFFALSE 3399
// wave_time := 0 0$00 ;
3450: LD_ADDR_EXP 11
3454: PUSH
3455: LD_INT 0
3457: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3458: LD_INT 5250
3460: PPUSH
3461: CALL_OW 67
// if not ignore_wave then
3465: LD_EXP 15
3469: NOT
3470: IFFALSE 3543
// begin for i = 1 to areas do
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_VAR 0 4
3486: PUSH
3487: FOR_TO
3488: IFFALSE 3525
// begin SpawnPotter ( wave + val , areas [ i ] ) ;
3490: LD_VAR 0 5
3494: PUSH
3495: LD_VAR 0 3
3499: PLUS
3500: PPUSH
3501: LD_VAR 0 4
3505: PUSH
3506: LD_VAR 0 2
3510: ARRAY
3511: PPUSH
3512: CALL 3558 0 2
// Wait ( 0 0$10 ) ;
3516: LD_INT 350
3518: PPUSH
3519: CALL_OW 67
// end ;
3523: GO 3487
3525: POP
3526: POP
// wave := wave + 1 ;
3527: LD_ADDR_VAR 0 5
3531: PUSH
3532: LD_VAR 0 5
3536: PUSH
3537: LD_INT 1
3539: PLUS
3540: ST_TO_ADDR
// end else
3541: GO 3551
// ignore_wave := false ;
3543: LD_ADDR_EXP 15
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// end ;
3551: GO 3392
// end ;
3553: LD_VAR 0 1
3557: RET
// export function SpawnPotter ( val , area ) ; var i , v , un , class ; begin
3558: LD_INT 0
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
3564: PPUSH
// uc_side := 7 ;
3565: LD_ADDR_OWVAR 20
3569: PUSH
3570: LD_INT 7
3572: ST_TO_ADDR
// uc_nation := 2 ;
3573: LD_ADDR_OWVAR 21
3577: PUSH
3578: LD_INT 2
3580: ST_TO_ADDR
// v := 10 + ( tick div 5 5$00 ) ;
3581: LD_ADDR_VAR 0 5
3585: PUSH
3586: LD_INT 10
3588: PUSH
3589: LD_OWVAR 1
3593: PUSH
3594: LD_INT 10500
3596: DIV
3597: PLUS
3598: ST_TO_ADDR
// if v > 25 then
3599: LD_VAR 0 5
3603: PUSH
3604: LD_INT 25
3606: GREATER
3607: IFFALSE 3617
// v := 25 ;
3609: LD_ADDR_VAR 0 5
3613: PUSH
3614: LD_INT 25
3616: ST_TO_ADDR
// InitHc ( ) ;
3617: CALL_OW 19
// hc_gallery :=  ;
3621: LD_ADDR_OWVAR 33
3625: PUSH
3626: LD_STRING 
3628: ST_TO_ADDR
// hc_importance := 0 ;
3629: LD_ADDR_OWVAR 32
3633: PUSH
3634: LD_INT 0
3636: ST_TO_ADDR
// hc_name :=  ;
3637: LD_ADDR_OWVAR 26
3641: PUSH
3642: LD_STRING 
3644: ST_TO_ADDR
// hc_attr := [ v , v ] ;
3645: LD_ADDR_OWVAR 29
3649: PUSH
3650: LD_VAR 0 5
3654: PUSH
3655: LD_VAR 0 5
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: ST_TO_ADDR
// if val > 35 then
3664: LD_VAR 0 1
3668: PUSH
3669: LD_INT 35
3671: GREATER
3672: IFFALSE 3682
// val := 35 ;
3674: LD_ADDR_VAR 0 1
3678: PUSH
3679: LD_INT 35
3681: ST_TO_ADDR
// for i = 1 to val do
3682: LD_ADDR_VAR 0 4
3686: PUSH
3687: DOUBLE
3688: LD_INT 1
3690: DEC
3691: ST_TO_ADDR
3692: LD_VAR 0 1
3696: PUSH
3697: FOR_TO
3698: IFFALSE 3911
// begin if i mod 9 = 0 then
3700: LD_VAR 0 4
3704: PUSH
3705: LD_INT 9
3707: MOD
3708: PUSH
3709: LD_INT 0
3711: EQUAL
3712: IFFALSE 3724
// class := class_apeman_kamikaze else
3714: LD_ADDR_VAR 0 7
3718: PUSH
3719: LD_INT 17
3721: ST_TO_ADDR
3722: GO 3756
// if i mod 4 = 0 then
3724: LD_VAR 0 4
3728: PUSH
3729: LD_INT 4
3731: MOD
3732: PUSH
3733: LD_INT 0
3735: EQUAL
3736: IFFALSE 3748
// class := class_apeman_soldier else
3738: LD_ADDR_VAR 0 7
3742: PUSH
3743: LD_INT 15
3745: ST_TO_ADDR
3746: GO 3756
// class := class_apeman ;
3748: LD_ADDR_VAR 0 7
3752: PUSH
3753: LD_INT 12
3755: ST_TO_ADDR
// if i mod 6 = 0 then
3756: LD_VAR 0 4
3760: PUSH
3761: LD_INT 6
3763: MOD
3764: PUSH
3765: LD_INT 0
3767: EQUAL
3768: IFFALSE 3843
// begin vc_chassis := ar_half_tracked ;
3770: LD_ADDR_OWVAR 37
3774: PUSH
3775: LD_INT 14
3777: ST_TO_ADDR
// vc_control := control_apeman ;
3778: LD_ADDR_OWVAR 38
3782: PUSH
3783: LD_INT 5
3785: ST_TO_ADDR
// vc_engine := engine_siberite ;
3786: LD_ADDR_OWVAR 39
3790: PUSH
3791: LD_INT 3
3793: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb , ar_bio_bomb ] [ rand ( 1 , 4 ) ] ;
3794: LD_ADDR_OWVAR 40
3798: PUSH
3799: LD_INT 28
3801: PUSH
3802: LD_INT 27
3804: PUSH
3805: LD_INT 29
3807: PUSH
3808: LD_EXP 22
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 1
3821: PPUSH
3822: LD_INT 4
3824: PPUSH
3825: CALL_OW 12
3829: ARRAY
3830: ST_TO_ADDR
// un := CreateVehicle ;
3831: LD_ADDR_VAR 0 6
3835: PUSH
3836: CALL_OW 45
3840: ST_TO_ADDR
// end else
3841: GO 3868
// begin PrepareHuman ( sex_male , class , 10 ) ;
3843: LD_INT 1
3845: PPUSH
3846: LD_VAR 0 7
3850: PPUSH
3851: LD_INT 10
3853: PPUSH
3854: CALL_OW 380
// un := CreateHuman ;
3858: LD_ADDR_VAR 0 6
3862: PUSH
3863: CALL_OW 44
3867: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3868: LD_VAR 0 6
3872: PPUSH
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 0
3880: PPUSH
3881: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3885: LD_VAR 0 6
3889: PPUSH
3890: CALL_OW 250
3894: PPUSH
3895: LD_VAR 0 6
3899: PPUSH
3900: CALL_OW 251
3904: PPUSH
3905: CALL_OW 494
// end ;
3909: GO 3697
3911: POP
3912: POP
// end ;
3913: LD_VAR 0 3
3917: RET
// every 0 0$3 trigger alert and not game_over do var i , list , enemy ;
3918: LD_EXP 6
3922: PUSH
3923: LD_EXP 7
3927: NOT
3928: AND
3929: IFFALSE 4048
3931: GO 3933
3933: DISABLE
3934: LD_INT 0
3936: PPUSH
3937: PPUSH
3938: PPUSH
// begin enable ;
3939: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3940: LD_ADDR_VAR 0 2
3944: PUSH
3945: LD_INT 22
3947: PUSH
3948: LD_INT 7
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: PPUSH
3955: CALL_OW 69
3959: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
3960: LD_ADDR_VAR 0 3
3964: PUSH
3965: LD_INT 81
3967: PUSH
3968: LD_INT 7
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 69
3979: ST_TO_ADDR
// if not list then
3980: LD_VAR 0 2
3984: NOT
3985: IFFALSE 3989
// exit ;
3987: GO 4048
// for i in list do
3989: LD_ADDR_VAR 0 1
3993: PUSH
3994: LD_VAR 0 2
3998: PUSH
3999: FOR_IN
4000: IFFALSE 4046
// begin if enemy then
4002: LD_VAR 0 3
4006: IFFALSE 4044
// if not HasTask ( i ) then
4008: LD_VAR 0 1
4012: PPUSH
4013: CALL_OW 314
4017: NOT
4018: IFFALSE 4044
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4020: LD_VAR 0 1
4024: PPUSH
4025: LD_VAR 0 3
4029: PPUSH
4030: LD_VAR 0 1
4034: PPUSH
4035: CALL_OW 74
4039: PPUSH
4040: CALL_OW 115
// end ;
4044: GO 3999
4046: POP
4047: POP
// end ; end_of_file
4048: PPOPN 3
4050: END
// export function Action ; begin
4051: LD_INT 0
4053: PPUSH
// InGameOn ;
4054: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4058: LD_INT 23
4060: PPUSH
4061: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4065: LD_EXP 1
4069: PPUSH
4070: LD_STRING DL-1
4072: PPUSH
4073: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4077: LD_EXP 2
4081: PPUSH
4082: LD_STRING DA-1
4084: PPUSH
4085: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4089: LD_EXP 3
4093: PPUSH
4094: LD_STRING DA-2
4096: PPUSH
4097: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4101: LD_EXP 1
4105: PPUSH
4106: LD_STRING DL-2
4108: PPUSH
4109: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4113: LD_EXP 3
4117: PPUSH
4118: LD_STRING DA-3
4120: PPUSH
4121: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4125: LD_EXP 1
4129: PPUSH
4130: LD_STRING DL-3
4132: PPUSH
4133: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4137: LD_EXP 2
4141: PPUSH
4142: LD_STRING DA-4
4144: PPUSH
4145: CALL_OW 88
// if not dialogue_skipped then
4149: LD_OWVAR 59
4153: NOT
4154: IFFALSE 4239
// begin Wait ( 0 0$01 ) ;
4156: LD_INT 35
4158: PPUSH
4159: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4163: LD_EXP 2
4167: PUSH
4168: LD_EXP 3
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4181: LD_EXP 2
4185: PPUSH
4186: LD_INT 107
4188: PPUSH
4189: LD_INT 53
4191: PPUSH
4192: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4196: LD_EXP 3
4200: PPUSH
4201: LD_INT 108
4203: PPUSH
4204: LD_INT 53
4206: PPUSH
4207: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4211: LD_EXP 2
4215: PPUSH
4216: LD_EXP 4
4220: PPUSH
4221: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4225: LD_EXP 3
4229: PPUSH
4230: LD_EXP 4
4234: PPUSH
4235: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4239: LD_INT 35
4241: PPUSH
4242: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4246: LD_EXP 2
4250: PPUSH
4251: LD_INT 107
4253: PPUSH
4254: LD_INT 53
4256: PPUSH
4257: CALL_OW 307
4261: PUSH
4262: LD_OWVAR 59
4266: OR
4267: IFFALSE 4239
// if not dialogue_skipped then
4269: LD_OWVAR 59
4273: NOT
4274: IFFALSE 4375
// begin ComTurnUnit ( potter , l1 ) ;
4276: LD_EXP 4
4280: PPUSH
4281: LD_EXP 2
4285: PPUSH
4286: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4290: LD_INT 10
4292: PPUSH
4293: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4297: LD_EXP 4
4301: PPUSH
4302: LD_INT 108
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 0
4310: PPUSH
4311: LD_INT 0
4313: PPUSH
4314: CALL_OW 483
// Wait ( 0 0$01 ) ;
4318: LD_INT 35
4320: PPUSH
4321: CALL_OW 67
// RemoveUnit ( potter ) ;
4325: LD_EXP 4
4329: PPUSH
4330: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DA-5
4341: PPUSH
4342: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4346: LD_EXP 3
4350: PPUSH
4351: LD_STRING DA-6
4353: PPUSH
4354: CALL_OW 88
// Wait ( 0 0$02 ) ;
4358: LD_INT 70
4360: PPUSH
4361: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4365: LD_INT 25
4367: PPUSH
4368: LD_INT 19
4370: PPUSH
4371: CALL_OW 84
// end ; SpawnPotter ( 20 , north_west_1 ) ;
4375: LD_INT 20
4377: PPUSH
4378: LD_INT 1
4380: PPUSH
4381: CALL 3558 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4385: LD_EXP 5
4389: PPUSH
4390: LD_STRING DLa-1
4392: PPUSH
4393: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4397: LD_EXP 1
4401: PPUSH
4402: LD_STRING DL-5
4404: PPUSH
4405: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4409: LD_INT 23
4411: PPUSH
4412: CALL_OW 87
// InGameOff ;
4416: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4420: LD_STRING C1
4422: PPUSH
4423: CALL_OW 337
// alert := true ;
4427: LD_ADDR_EXP 6
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4435: LD_EXP 5
4439: PPUSH
4440: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4444: LD_EXP 5
4448: PPUSH
4449: LD_INT 11
4451: PPUSH
4452: CALL_OW 173
// Wait ( 0 0$30 ) ;
4456: LD_INT 1050
4458: PPUSH
4459: CALL_OW 67
// SpawnPotter ( 10 , north_4 ) ;
4463: LD_INT 10
4465: PPUSH
4466: LD_INT 4
4468: PPUSH
4469: CALL 3558 0 2
// Wait ( 0 0$35 ) ;
4473: LD_INT 1225
4475: PPUSH
4476: CALL_OW 67
// SpawnPotter ( 10 , east_5 ) ;
4480: LD_INT 10
4482: PPUSH
4483: LD_INT 5
4485: PPUSH
4486: CALL 3558 0 2
// Wait ( 0 0$03 ) ;
4490: LD_INT 105
4492: PPUSH
4493: CALL_OW 67
// Game ;
4497: CALL 3321 0 0
// end ;
4501: LD_VAR 0 1
4505: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 1500 do var tmp , i ;
4506: LD_INT 22
4508: PUSH
4509: LD_INT 7
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PPUSH
4516: CALL_OW 69
4520: PUSH
4521: LD_INT 0
4523: EQUAL
4524: PUSH
4525: LD_EXP 10
4529: PUSH
4530: LD_INT 1500
4532: GREATEREQUAL
4533: AND
4534: IFFALSE 4762
4536: GO 4538
4538: DISABLE
4539: LD_INT 0
4541: PPUSH
4542: PPUSH
// begin DialogueOn ;
4543: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4547: LD_EXP 12
4551: PPUSH
4552: LD_STRING DVr-1
4554: PPUSH
4555: CALL_OW 94
// DialogueOff ;
4559: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4563: LD_STRING QBonusInfo
4565: PPUSH
4566: CALL_OW 97
4570: PUSH
4571: LD_INT 1
4573: DOUBLE
4574: EQUAL
4575: IFTRUE 4579
4577: GO 4590
4579: POP
// bonus_active := true ; end ;
4580: LD_ADDR_EXP 13
4584: PUSH
4585: LD_INT 1
4587: ST_TO_ADDR
4588: GO 4591
4590: POP
// bonus_num := 4 ;
4591: LD_ADDR_EXP 14
4595: PUSH
4596: LD_INT 4
4598: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_mid , art_instant , main_base ) ;
4599: LD_OWVAR 2
4603: PPUSH
4604: LD_INT 2
4606: PPUSH
4607: LD_INT 2
4609: PPUSH
4610: LD_INT 23
4612: PPUSH
4613: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4617: LD_ADDR_VAR 0 1
4621: PUSH
4622: LD_INT 500
4624: PUSH
4625: LD_INT 3500
4627: PUSH
4628: LD_INT 5750
4630: PUSH
4631: LD_INT 10000
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4640: LD_INT 10500
4642: PUSH
4643: LD_INT 12600
4645: PUSH
4646: LD_INT 14700
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_OWVAR 67
4658: ARRAY
4659: PPUSH
4660: CALL_OW 67
// for i = 1 to tmp do
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_VAR 0 1
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4712
// if points >= tmp [ i ] then
4682: LD_EXP 10
4686: PUSH
4687: LD_VAR 0 1
4691: PUSH
4692: LD_VAR 0 2
4696: ARRAY
4697: GREATEREQUAL
4698: IFFALSE 4710
// bonus_num := i ;
4700: LD_ADDR_EXP 14
4704: PUSH
4705: LD_VAR 0 2
4709: ST_TO_ADDR
4710: GO 4679
4712: POP
4713: POP
// case Query ( QBonusInfo ) of 1 :
4714: LD_STRING QBonusInfo
4716: PPUSH
4717: CALL_OW 97
4721: PUSH
4722: LD_INT 1
4724: DOUBLE
4725: EQUAL
4726: IFTRUE 4730
4728: GO 4751
4730: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4731: LD_OWVAR 2
4735: PPUSH
4736: LD_INT 12
4738: PPUSH
4739: LD_INT 2
4741: PPUSH
4742: LD_INT 23
4744: PPUSH
4745: CALL_OW 468
4749: GO 4752
4751: POP
// until points >= 15000 ;
4752: LD_EXP 10
4756: PUSH
4757: LD_INT 15000
4759: GREATEREQUAL
4760: IFFALSE 4640
// end ;
4762: PPOPN 2
4764: END
// export function Win ; begin
4765: LD_INT 0
4767: PPUSH
// AddMedal ( med , 1 ) ;
4768: LD_STRING med
4770: PPUSH
4771: LD_INT 1
4773: PPUSH
4774: CALL_OW 101
// AddMedal ( med , 1 ) ;
4778: LD_STRING med
4780: PPUSH
4781: LD_INT 1
4783: PPUSH
4784: CALL_OW 101
// AddMedal ( med , 1 ) ;
4788: LD_STRING med
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: CALL_OW 101
// GiveMedals ( MAIN ) ;
4798: LD_STRING MAIN
4800: PPUSH
4801: CALL_OW 102
// YouWin ;
4805: CALL_OW 103
// end ; end_of_file
4809: LD_VAR 0 1
4813: RET
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
4814: LD_INT 0
4816: PPUSH
4817: PPUSH
// dir := GetDir ( b ) ;
4818: LD_ADDR_VAR 0 4
4822: PUSH
4823: LD_VAR 0 2
4827: PPUSH
4828: CALL_OW 254
4832: ST_TO_ADDR
// if dir < 3 then
4833: LD_VAR 0 4
4837: PUSH
4838: LD_INT 3
4840: LESS
4841: IFFALSE 4859
// dir := dir + 3 else
4843: LD_ADDR_VAR 0 4
4847: PUSH
4848: LD_VAR 0 4
4852: PUSH
4853: LD_INT 3
4855: PLUS
4856: ST_TO_ADDR
4857: GO 4873
// dir := dir - 3 ;
4859: LD_ADDR_VAR 0 4
4863: PUSH
4864: LD_VAR 0 4
4868: PUSH
4869: LD_INT 3
4871: MINUS
4872: ST_TO_ADDR
// SetDir ( un , dir ) ;
4873: LD_VAR 0 1
4877: PPUSH
4878: LD_VAR 0 4
4882: PPUSH
4883: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4887: LD_VAR 0 1
4891: PPUSH
4892: LD_VAR 0 2
4896: PPUSH
4897: CALL_OW 52
// end ;
4901: LD_VAR 0 3
4905: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
4906: LD_INT 0
4908: PPUSH
4909: PPUSH
4910: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
4911: LD_ADDR_VAR 0 7
4915: PUSH
4916: LD_VAR 0 1
4920: PUSH
4921: LD_VAR 0 2
4925: ARRAY
4926: PPUSH
4927: LD_VAR 0 3
4931: PPUSH
4932: LD_VAR 0 4
4936: PPUSH
4937: CALL_OW 1
4941: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
4942: LD_ADDR_VAR 0 1
4946: PUSH
4947: LD_VAR 0 1
4951: PPUSH
4952: LD_VAR 0 2
4956: PPUSH
4957: LD_VAR 0 7
4961: PPUSH
4962: CALL_OW 1
4966: ST_TO_ADDR
// result := tab ;
4967: LD_ADDR_VAR 0 5
4971: PUSH
4972: LD_VAR 0 1
4976: ST_TO_ADDR
// end ;
4977: LD_VAR 0 5
4981: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
4982: LD_INT 0
4984: PPUSH
4985: PPUSH
4986: PPUSH
// if not GetControl ( veh ) = control_manual then
4987: LD_VAR 0 1
4991: PPUSH
4992: CALL_OW 263
4996: PUSH
4997: LD_INT 1
4999: EQUAL
5000: NOT
5001: IFFALSE 5013
// result := false else
5003: LD_ADDR_VAR 0 2
5007: PUSH
5008: LD_INT 0
5010: ST_TO_ADDR
5011: GO 5158
// if veh in FilterAllUnits ( [ f_empty ] ) then
5013: LD_VAR 0 1
5017: PUSH
5018: LD_INT 58
5020: PUSH
5021: EMPTY
5022: LIST
5023: PPUSH
5024: CALL_OW 69
5028: IN
5029: IFFALSE 5041
// result := false else
5031: LD_ADDR_VAR 0 2
5035: PUSH
5036: LD_INT 0
5038: ST_TO_ADDR
5039: GO 5158
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5041: LD_ADDR_VAR 0 4
5045: PUSH
5046: LD_INT 22
5048: PUSH
5049: LD_VAR 0 1
5053: PPUSH
5054: CALL_OW 255
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 55
5065: PUSH
5066: EMPTY
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 69
5077: ST_TO_ADDR
// if not filter then
5078: LD_VAR 0 4
5082: NOT
5083: IFFALSE 5095
// result := false else
5085: LD_ADDR_VAR 0 2
5089: PUSH
5090: LD_INT 0
5092: ST_TO_ADDR
5093: GO 5158
// for i = 1 to filter do
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: DOUBLE
5101: LD_INT 1
5103: DEC
5104: ST_TO_ADDR
5105: LD_VAR 0 4
5109: PUSH
5110: FOR_TO
5111: IFFALSE 5156
// if IsDriver ( filter [ i ] ) = veh then
5113: LD_VAR 0 4
5117: PUSH
5118: LD_VAR 0 3
5122: ARRAY
5123: PPUSH
5124: CALL 58743 0 1
5128: PUSH
5129: LD_VAR 0 1
5133: EQUAL
5134: IFFALSE 5154
// begin result := filter [ i ] ;
5136: LD_ADDR_VAR 0 2
5140: PUSH
5141: LD_VAR 0 4
5145: PUSH
5146: LD_VAR 0 3
5150: ARRAY
5151: ST_TO_ADDR
// break ;
5152: GO 5156
// end ;
5154: GO 5110
5156: POP
5157: POP
// end ; end ; end_of_file
5158: LD_VAR 0 2
5162: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL 20384 0 1
// if un = legion_commander then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_EXP 1
5181: EQUAL
5182: IFFALSE 5191
// YouLost ( commanderDied ) ;
5184: LD_STRING commanderDied
5186: PPUSH
5187: CALL_OW 104
// if un in [ legion_commander , main_base ] then
5191: LD_VAR 0 1
5195: PUSH
5196: LD_EXP 1
5200: PUSH
5201: LD_INT 23
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: IN
5208: IFFALSE 5218
// game_over := true ;
5210: LD_ADDR_EXP 7
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if un = al_commander then
5218: LD_VAR 0 1
5222: PUSH
5223: LD_EXP 5
5227: EQUAL
5228: IFFALSE 5234
// ChangeSide ( ) ;
5230: CALL 2742 0 0
// if GetSide ( un ) = 7 then
5234: LD_VAR 0 1
5238: PPUSH
5239: CALL_OW 255
5243: PUSH
5244: LD_INT 7
5246: EQUAL
5247: IFFALSE 5365
// begin if GetClass ( un ) = class_apeman then
5249: LD_VAR 0 1
5253: PPUSH
5254: CALL_OW 257
5258: PUSH
5259: LD_INT 12
5261: EQUAL
5262: IFFALSE 5278
// points := points + 6 ;
5264: LD_ADDR_EXP 10
5268: PUSH
5269: LD_EXP 10
5273: PUSH
5274: LD_INT 6
5276: PLUS
5277: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 257
5287: PUSH
5288: LD_INT 17
5290: EQUAL
5291: IFFALSE 5307
// points := points + 11 ;
5293: LD_ADDR_EXP 10
5297: PUSH
5298: LD_EXP 10
5302: PUSH
5303: LD_INT 11
5305: PLUS
5306: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 257
5316: PUSH
5317: LD_INT 15
5319: EQUAL
5320: IFFALSE 5336
// points := points + 14 ;
5322: LD_ADDR_EXP 10
5326: PUSH
5327: LD_EXP 10
5331: PUSH
5332: LD_INT 14
5334: PLUS
5335: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5336: LD_VAR 0 1
5340: PPUSH
5341: CALL_OW 247
5345: PUSH
5346: LD_INT 2
5348: EQUAL
5349: IFFALSE 5365
// points := points + 50 ;
5351: LD_ADDR_EXP 10
5355: PUSH
5356: LD_EXP 10
5360: PUSH
5361: LD_INT 50
5363: PLUS
5364: ST_TO_ADDR
// end ; end ;
5365: PPOPN 1
5367: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5368: LD_EXP 5
5372: PPUSH
5373: CALL_OW 256
5377: PUSH
5378: LD_INT 1000
5380: LESS
5381: IFFALSE 5413
5383: GO 5385
5385: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5386: LD_EXP 5
5390: PPUSH
5391: CALL_OW 504
5395: PPUSH
5396: CALL_OW 255
5400: PUSH
5401: LD_INT 8
5403: EQUAL
5404: IFFALSE 5413
// YouLost ( FriendlyFire ) ;
5406: LD_STRING FriendlyFire
5408: PPUSH
5409: CALL_OW 104
5413: END
// on DialogueSkipped ( value ) do var i ;
5414: LD_INT 0
5416: PPUSH
// begin RemoveUnit ( potter ) ;
5417: LD_EXP 4
5421: PPUSH
5422: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5426: LD_EXP 2
5430: PUSH
5431: LD_EXP 3
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PPUSH
5440: CALL_OW 122
// Wait ( 1 ) ;
5444: LD_INT 1
5446: PPUSH
5447: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5451: LD_EXP 2
5455: PPUSH
5456: LD_INT 107
5458: PPUSH
5459: LD_INT 53
5461: PPUSH
5462: LD_INT 0
5464: PPUSH
5465: LD_INT 0
5467: PPUSH
5468: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5472: LD_EXP 3
5476: PPUSH
5477: LD_INT 108
5479: PPUSH
5480: LD_INT 53
5482: PPUSH
5483: LD_INT 0
5485: PPUSH
5486: LD_INT 0
5488: PPUSH
5489: CALL_OW 483
// Wait ( 1 ) ;
5493: LD_INT 1
5495: PPUSH
5496: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5500: LD_EXP 2
5504: PUSH
5505: LD_EXP 3
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PPUSH
5514: LD_INT 108
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: CALL_OW 118
// end ;
5524: PPOPN 2
5526: END
// on ArtifactUsed ( side , icon , p3 , p4 ) do var bonus , off , units , crates , tmp , xy , i , lab ;
5527: LD_INT 0
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
5536: PPUSH
// begin xy := FindArtifact ( 2 ) ;
5537: LD_ADDR_VAR 0 10
5541: PUSH
5542: LD_INT 2
5544: PPUSH
5545: CALL_OW 469
5549: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
5550: LD_ADDR_VAR 0 12
5554: PUSH
5555: LD_INT 22
5557: PUSH
5558: LD_OWVAR 2
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: LD_INT 30
5572: PUSH
5573: LD_INT 8
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PUSH
5580: LD_INT 30
5582: PUSH
5583: LD_INT 11
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PPUSH
5599: CALL_OW 69
5603: PPUSH
5604: LD_VAR 0 10
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 10
5617: PUSH
5618: LD_INT 2
5620: ARRAY
5621: PPUSH
5622: CALL_OW 73
5626: ST_TO_ADDR
// if icon = art_exp_left then
5627: LD_VAR 0 2
5631: PUSH
5632: LD_INT 1
5634: EQUAL
5635: IFFALSE 5690
// begin SetSpecResearch ( lab , time_res_art , true ) ;
5637: LD_VAR 0 12
5641: PPUSH
5642: LD_EXP 9
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
5654: LD_VAR 0 12
5658: PPUSH
5659: LD_EXP 17
5663: PPUSH
5664: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
5668: LD_OWVAR 2
5672: PPUSH
5673: LD_INT 1
5675: PPUSH
5676: LD_INT 0
5678: PPUSH
5679: LD_VAR 0 12
5683: PPUSH
5684: CALL_OW 468
// end else
5688: GO 6471
// begin DialogueOn ;
5690: CALL_OW 6
// uc_side := 8 ;
5694: LD_ADDR_OWVAR 20
5698: PUSH
5699: LD_INT 8
5701: ST_TO_ADDR
// uc_nation := 2 ;
5702: LD_ADDR_OWVAR 21
5706: PUSH
5707: LD_INT 2
5709: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5710: LD_ADDR_VAR 0 5
5714: PUSH
5715: LD_STRING QBonus
5717: PUSH
5718: LD_EXP 14
5722: STR
5723: ST_TO_ADDR
// off := true ;
5724: LD_ADDR_VAR 0 6
5728: PUSH
5729: LD_INT 1
5731: ST_TO_ADDR
// units := [ ] ;
5732: LD_ADDR_VAR 0 7
5736: PUSH
5737: EMPTY
5738: ST_TO_ADDR
// crates := 0 ;
5739: LD_ADDR_VAR 0 8
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5747: LD_EXP 12
5751: PPUSH
5752: LD_STRING DVr-2
5754: PPUSH
5755: CALL_OW 94
// wait ( 0 0$1 ) ;
5759: LD_INT 35
5761: PPUSH
5762: CALL_OW 67
// case Query ( bonus ) of 1 :
5766: LD_VAR 0 5
5770: PPUSH
5771: CALL_OW 97
5775: PUSH
5776: LD_INT 1
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5869
5784: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5785: LD_ADDR_VAR 0 9
5789: PUSH
5790: LD_INT 1
5792: PUSH
5793: LD_INT 2
5795: PUSH
5796: LD_INT 5
5798: PUSH
5799: LD_INT 8
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: PUSH
5808: LD_EXP 14
5812: ARRAY
5813: ST_TO_ADDR
// for i = 1 to tmp do
5814: LD_ADDR_VAR 0 11
5818: PUSH
5819: DOUBLE
5820: LD_INT 1
5822: DEC
5823: ST_TO_ADDR
5824: LD_VAR 0 9
5828: PUSH
5829: FOR_TO
5830: IFFALSE 5865
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5832: LD_INT 0
5834: PPUSH
5835: LD_INT 15
5837: PPUSH
5838: LD_VAR 0 9
5842: PPUSH
5843: CALL_OW 380
// units := units ^ CreateHuman ;
5847: LD_ADDR_VAR 0 7
5851: PUSH
5852: LD_VAR 0 7
5856: PUSH
5857: CALL_OW 44
5861: ADD
5862: ST_TO_ADDR
// end ;
5863: GO 5829
5865: POP
5866: POP
// end ; 2 :
5867: GO 6277
5869: LD_INT 2
5871: DOUBLE
5872: EQUAL
5873: IFTRUE 5877
5875: GO 5909
5877: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5878: LD_ADDR_VAR 0 8
5882: PUSH
5883: LD_INT 100
5885: PUSH
5886: LD_INT 150
5888: PUSH
5889: LD_INT 350
5891: PUSH
5892: LD_INT 500
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: PUSH
5901: LD_EXP 14
5905: ARRAY
5906: ST_TO_ADDR
// end ; 3 :
5907: GO 6277
5909: LD_INT 3
5911: DOUBLE
5912: EQUAL
5913: IFTRUE 5917
5915: GO 6257
5917: POP
// begin if bonus_num = 1 then
5918: LD_EXP 14
5922: PUSH
5923: LD_INT 1
5925: EQUAL
5926: IFFALSE 5936
// ignore_wave := true ;
5928: LD_ADDR_EXP 15
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// if bonus_num = 2 then
5936: LD_EXP 14
5940: PUSH
5941: LD_INT 2
5943: EQUAL
5944: IFFALSE 6064
// begin for i = 1 to 2 do
5946: LD_ADDR_VAR 0 11
5950: PUSH
5951: DOUBLE
5952: LD_INT 1
5954: DEC
5955: ST_TO_ADDR
5956: LD_INT 2
5958: PUSH
5959: FOR_TO
5960: IFFALSE 6062
// begin uc_nation := nation_arabian ;
5962: LD_ADDR_OWVAR 21
5966: PUSH
5967: LD_INT 2
5969: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5970: LD_ADDR_OWVAR 37
5974: PUSH
5975: LD_INT 14
5977: ST_TO_ADDR
// vc_engine := engine_siberite ;
5978: LD_ADDR_OWVAR 39
5982: PUSH
5983: LD_INT 3
5985: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
5986: LD_ADDR_OWVAR 38
5990: PUSH
5991: LD_INT 2
5993: PUSH
5994: LD_INT 5
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 2
6006: PPUSH
6007: CALL_OW 12
6011: ARRAY
6012: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6013: LD_ADDR_OWVAR 40
6017: PUSH
6018: LD_INT 28
6020: PUSH
6021: LD_INT 27
6023: PUSH
6024: LD_INT 25
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: PUSH
6032: LD_INT 1
6034: PPUSH
6035: LD_INT 3
6037: PPUSH
6038: CALL_OW 12
6042: ARRAY
6043: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6044: LD_ADDR_VAR 0 7
6048: PUSH
6049: LD_VAR 0 7
6053: PUSH
6054: CALL_OW 45
6058: ADD
6059: ST_TO_ADDR
// end ;
6060: GO 5959
6062: POP
6063: POP
// end ; if bonus_num = 3 then
6064: LD_EXP 14
6068: PUSH
6069: LD_INT 3
6071: EQUAL
6072: IFFALSE 6196
// begin for i = 1 to 4 do
6074: LD_ADDR_VAR 0 11
6078: PUSH
6079: DOUBLE
6080: LD_INT 1
6082: DEC
6083: ST_TO_ADDR
6084: LD_INT 4
6086: PUSH
6087: FOR_TO
6088: IFFALSE 6194
// begin uc_nation := nation_arabian ;
6090: LD_ADDR_OWVAR 21
6094: PUSH
6095: LD_INT 2
6097: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6098: LD_ADDR_OWVAR 37
6102: PUSH
6103: LD_INT 14
6105: ST_TO_ADDR
// vc_engine := engine_siberite ;
6106: LD_ADDR_OWVAR 39
6110: PUSH
6111: LD_INT 3
6113: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6114: LD_ADDR_OWVAR 38
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: LD_INT 5
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 1
6131: PPUSH
6132: LD_INT 2
6134: PPUSH
6135: CALL_OW 12
6139: ARRAY
6140: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6141: LD_ADDR_OWVAR 40
6145: PUSH
6146: LD_INT 28
6148: PUSH
6149: LD_INT 27
6151: PUSH
6152: LD_INT 28
6154: PUSH
6155: LD_INT 25
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 1
6166: PPUSH
6167: LD_INT 4
6169: PPUSH
6170: CALL_OW 12
6174: ARRAY
6175: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6176: LD_ADDR_VAR 0 7
6180: PUSH
6181: LD_VAR 0 7
6185: PUSH
6186: CALL_OW 45
6190: ADD
6191: ST_TO_ADDR
// end ;
6192: GO 6087
6194: POP
6195: POP
// end ; if bonus_num = 4 then
6196: LD_EXP 14
6200: PUSH
6201: LD_INT 4
6203: EQUAL
6204: IFFALSE 6255
// for i = 1 to 3 do
6206: LD_ADDR_VAR 0 11
6210: PUSH
6211: DOUBLE
6212: LD_INT 1
6214: DEC
6215: ST_TO_ADDR
6216: LD_INT 3
6218: PUSH
6219: FOR_TO
6220: IFFALSE 6253
// begin PrepareHuman ( false , 3 , 8 ) ;
6222: LD_INT 0
6224: PPUSH
6225: LD_INT 3
6227: PPUSH
6228: LD_INT 8
6230: PPUSH
6231: CALL_OW 380
// units := units ^ CreateHuman ;
6235: LD_ADDR_VAR 0 7
6239: PUSH
6240: LD_VAR 0 7
6244: PUSH
6245: CALL_OW 44
6249: ADD
6250: ST_TO_ADDR
// end ;
6251: GO 6219
6253: POP
6254: POP
// end ; 4 :
6255: GO 6277
6257: LD_INT 4
6259: DOUBLE
6260: EQUAL
6261: IFTRUE 6265
6263: GO 6276
6265: POP
// off := false ; end ;
6266: LD_ADDR_VAR 0 6
6270: PUSH
6271: LD_INT 0
6273: ST_TO_ADDR
6274: GO 6277
6276: POP
// DialogueOff ;
6277: CALL_OW 7
// if not off then
6281: LD_VAR 0 6
6285: NOT
6286: IFFALSE 6292
// exit else
6288: GO 6471
6290: GO 6345
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6292: LD_OWVAR 2
6296: PPUSH
6297: LD_INT 12
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: LD_INT 23
6305: PPUSH
6306: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6310: LD_EXP 12
6314: PPUSH
6315: LD_STRING DVr-3
6317: PUSH
6318: LD_STRING DVr-3a
6320: PUSH
6321: LD_STRING DVr-3b
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 1
6331: PPUSH
6332: LD_INT 3
6334: PPUSH
6335: CALL_OW 12
6339: ARRAY
6340: PPUSH
6341: CALL_OW 94
// end ; if units then
6345: LD_VAR 0 7
6349: IFFALSE 6413
// for i in units do
6351: LD_ADDR_VAR 0 11
6355: PUSH
6356: LD_VAR 0 7
6360: PUSH
6361: FOR_IN
6362: IFFALSE 6411
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6364: LD_VAR 0 11
6368: PPUSH
6369: LD_INT 92
6371: PPUSH
6372: LD_INT 49
6374: PPUSH
6375: LD_INT 20
6377: PPUSH
6378: LD_INT 0
6380: PPUSH
6381: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6385: LD_VAR 0 11
6389: PPUSH
6390: CALL_OW 250
6394: PPUSH
6395: LD_VAR 0 11
6399: PPUSH
6400: CALL_OW 251
6404: PPUSH
6405: CALL_OW 494
// end ;
6409: GO 6361
6411: POP
6412: POP
// if crates then
6413: LD_VAR 0 8
6417: IFFALSE 6471
// for i = 1 to ( crates div 50 ) do
6419: LD_ADDR_VAR 0 11
6423: PUSH
6424: DOUBLE
6425: LD_INT 1
6427: DEC
6428: ST_TO_ADDR
6429: LD_VAR 0 8
6433: PUSH
6434: LD_INT 50
6436: DIV
6437: PUSH
6438: FOR_TO
6439: IFFALSE 6469
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6441: LD_INT 5
6443: PPUSH
6444: LD_INT 92
6446: PPUSH
6447: LD_INT 49
6449: PPUSH
6450: LD_INT 30
6452: PPUSH
6453: LD_INT 1
6455: PPUSH
6456: CALL_OW 56
// wait ( 0 0$02 ) ;
6460: LD_INT 70
6462: PPUSH
6463: CALL_OW 67
// end ;
6467: GO 6438
6469: POP
6470: POP
// end ; end ;
6471: PPOPN 12
6473: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: LD_VAR 0 2
6483: PPUSH
6484: LD_VAR 0 3
6488: PPUSH
6489: CALL 20482 0 3
// end ;
6493: PPOPN 3
6495: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6496: LD_VAR 0 1
6500: PPUSH
6501: CALL 20490 0 1
// end ;
6505: PPOPN 1
6507: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6508: LD_VAR 0 1
6512: PPUSH
6513: CALL_OW 255
6517: PUSH
6518: LD_OWVAR 2
6522: EQUAL
6523: IFFALSE 6533
// player_res_art := true ;
6525: LD_ADDR_EXP 8
6529: PUSH
6530: LD_INT 1
6532: ST_TO_ADDR
// end ;
6533: PPOPN 1
6535: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) do var xy , lab ;
6536: LD_INT 22
6538: PUSH
6539: LD_OWVAR 2
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 2
6550: PUSH
6551: LD_INT 30
6553: PUSH
6554: LD_INT 7
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 30
6563: PUSH
6564: LD_INT 8
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 30
6573: PUSH
6574: LD_INT 11
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PPUSH
6591: CALL_OW 69
6595: IFFALSE 6828
6597: GO 6599
6599: DISABLE
6600: LD_INT 0
6602: PPUSH
6603: PPUSH
// begin enable ;
6604: ENABLE
// xy := FindArtifact ( 2 ) ;
6605: LD_ADDR_VAR 0 1
6609: PUSH
6610: LD_INT 2
6612: PPUSH
6613: CALL_OW 469
6617: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
6618: LD_ADDR_VAR 0 2
6622: PUSH
6623: LD_INT 22
6625: PUSH
6626: LD_OWVAR 2
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: LD_INT 30
6640: PUSH
6641: LD_INT 8
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: LD_INT 30
6650: PUSH
6651: LD_INT 7
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 30
6660: PUSH
6661: LD_INT 11
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 69
6682: PPUSH
6683: LD_VAR 0 1
6687: PUSH
6688: LD_INT 1
6690: ARRAY
6691: PPUSH
6692: LD_VAR 0 1
6696: PUSH
6697: LD_INT 2
6699: ARRAY
6700: PPUSH
6701: CALL_OW 73
6705: ST_TO_ADDR
// if player_artifact_ready = false then
6706: LD_EXP 16
6710: PUSH
6711: LD_INT 0
6713: EQUAL
6714: IFFALSE 6828
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
6716: LD_VAR 0 2
6720: PPUSH
6721: LD_VAR 0 1
6725: PUSH
6726: LD_INT 1
6728: ARRAY
6729: PPUSH
6730: LD_VAR 0 1
6734: PUSH
6735: LD_INT 2
6737: ARRAY
6738: PPUSH
6739: CALL_OW 297
6743: PUSH
6744: LD_INT 6
6746: LESS
6747: IFFALSE 6808
// begin if BuildingStatus ( lab ) = bs_idle then
6749: LD_VAR 0 2
6753: PPUSH
6754: CALL_OW 461
6758: PUSH
6759: LD_INT 2
6761: EQUAL
6762: IFFALSE 6786
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
6764: LD_OWVAR 2
6768: PPUSH
6769: LD_INT 1
6771: PPUSH
6772: LD_INT 2
6774: PPUSH
6775: LD_VAR 0 2
6779: PPUSH
6780: CALL_OW 468
6784: GO 6806
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6786: LD_OWVAR 2
6790: PPUSH
6791: LD_INT 1
6793: PPUSH
6794: LD_INT 1
6796: PPUSH
6797: LD_VAR 0 2
6801: PPUSH
6802: CALL_OW 468
// end else
6806: GO 6828
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6808: LD_OWVAR 2
6812: PPUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 1
6818: PPUSH
6819: LD_VAR 0 2
6823: PPUSH
6824: CALL_OW 468
// end ;
6828: PPOPN 2
6830: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6831: LD_VAR 0 1
6835: PPUSH
6836: CALL_OW 255
6840: PUSH
6841: LD_OWVAR 2
6845: EQUAL
6846: IFFALSE 6872
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
6848: LD_OWVAR 2
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_INT 0
6858: PPUSH
6859: LD_VAR 0 1
6863: PPUSH
6864: CALL_OW 468
// Win ;
6868: CALL 4765 0 0
// end ; end ;
6872: PPOPN 1
6874: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
6875: LD_ADDR_EXP 17
6879: PUSH
6880: LD_VAR 0 2
6884: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
6885: LD_OWVAR 2
6889: PPUSH
6890: LD_INT 1
6892: PPUSH
6893: LD_INT 2
6895: PPUSH
6896: LD_VAR 0 1
6900: PPUSH
6901: CALL_OW 468
// end ; end_of_file
6905: PPOPN 2
6907: END
// every 0 0$01 trigger not game_over do
6908: LD_EXP 7
6912: NOT
6913: IFFALSE 6946
6915: GO 6917
6917: DISABLE
// begin enable ;
6918: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6919: LD_ADDR_OWVAR 47
6923: PUSH
6924: LD_STRING #tick
6926: PUSH
6927: LD_OWVAR 1
6931: PUSH
6932: LD_STRING #points
6934: PUSH
6935: LD_EXP 10
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
// end ;
6946: END
// every 0 0$01 trigger game_over do
6947: LD_EXP 7
6951: IFFALSE 7010
6953: GO 6955
6955: DISABLE
// begin Wait ( 0 0$02 ) ;
6956: LD_INT 70
6958: PPUSH
6959: CALL_OW 67
// DialogueOn ;
6963: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6967: LD_ADDR_OWVAR 47
6971: PUSH
6972: LD_STRING #game-points
6974: PUSH
6975: LD_OWVAR 78
6979: PUSH
6980: LD_EXP 10
6984: PUSH
6985: LD_STRING #game-time
6987: PUSH
6988: LD_OWVAR 1
6992: PUSH
6993: LD_STRING #game-difficulty
6995: PUSH
6996: LD_OWVAR 67
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: ST_TO_ADDR
// end ; end_of_file
7010: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
7011: LD_OWVAR 1
7015: PUSH
7016: LD_INT 52500
7018: LESS
7019: IFFALSE 7043
7021: GO 7023
7023: DISABLE
// begin enable ;
7024: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
7025: LD_INT 1
7027: PPUSH
7028: LD_INT 5
7030: PPUSH
7031: CALL_OW 12
7035: PPUSH
7036: LD_INT 1
7038: PPUSH
7039: CALL_OW 57
// end ; end_of_file
7043: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7044: LD_INT 0
7046: PPUSH
// ar_miner := 81 ;
7047: LD_ADDR_EXP 25
7051: PUSH
7052: LD_INT 81
7054: ST_TO_ADDR
// ar_crane := 88 ;
7055: LD_ADDR_EXP 24
7059: PUSH
7060: LD_INT 88
7062: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7063: LD_ADDR_EXP 19
7067: PUSH
7068: LD_INT 89
7070: ST_TO_ADDR
// us_hack := 99 ;
7071: LD_ADDR_EXP 20
7075: PUSH
7076: LD_INT 99
7078: ST_TO_ADDR
// us_artillery := 97 ;
7079: LD_ADDR_EXP 21
7083: PUSH
7084: LD_INT 97
7086: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7087: LD_ADDR_EXP 22
7091: PUSH
7092: LD_INT 91
7094: ST_TO_ADDR
// ar_mortar := 92 ;
7095: LD_ADDR_EXP 23
7099: PUSH
7100: LD_INT 92
7102: ST_TO_ADDR
// ru_radar := 98 ;
7103: LD_ADDR_EXP 18
7107: PUSH
7108: LD_INT 98
7110: ST_TO_ADDR
// tech_Artillery := 80 ;
7111: LD_ADDR_EXP 26
7115: PUSH
7116: LD_INT 80
7118: ST_TO_ADDR
// tech_RadMat := 81 ;
7119: LD_ADDR_EXP 27
7123: PUSH
7124: LD_INT 81
7126: ST_TO_ADDR
// tech_BasicTools := 82 ;
7127: LD_ADDR_EXP 28
7131: PUSH
7132: LD_INT 82
7134: ST_TO_ADDR
// tech_Cargo := 83 ;
7135: LD_ADDR_EXP 29
7139: PUSH
7140: LD_INT 83
7142: ST_TO_ADDR
// tech_Track := 84 ;
7143: LD_ADDR_EXP 30
7147: PUSH
7148: LD_INT 84
7150: ST_TO_ADDR
// tech_Crane := 85 ;
7151: LD_ADDR_EXP 31
7155: PUSH
7156: LD_INT 85
7158: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7159: LD_ADDR_EXP 32
7163: PUSH
7164: LD_INT 86
7166: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7167: LD_ADDR_EXP 33
7171: PUSH
7172: LD_INT 87
7174: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
7175: LD_ADDR_EXP 34
7179: PUSH
7180: LD_INT 88
7182: ST_TO_ADDR
// class_mastodont := 31 ;
7183: LD_ADDR_EXP 35
7187: PUSH
7188: LD_INT 31
7190: ST_TO_ADDR
// class_horse := 21 ;
7191: LD_ADDR_EXP 36
7195: PUSH
7196: LD_INT 21
7198: ST_TO_ADDR
// end ;
7199: LD_VAR 0 1
7203: RET
// every 1 do
7204: GO 7206
7206: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7207: CALL 7044 0 0
7211: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7212: LD_INT 0
7214: PPUSH
// if p2 = 100 then
7215: LD_VAR 0 2
7219: PUSH
7220: LD_INT 100
7222: EQUAL
7223: IFFALSE 8172
// begin if not StreamModeActive then
7225: LD_EXP 37
7229: NOT
7230: IFFALSE 7240
// StreamModeActive := true ;
7232: LD_ADDR_EXP 37
7236: PUSH
7237: LD_INT 1
7239: ST_TO_ADDR
// if p3 = 0 then
7240: LD_VAR 0 3
7244: PUSH
7245: LD_INT 0
7247: EQUAL
7248: IFFALSE 7254
// InitStreamMode ;
7250: CALL 8332 0 0
// if p3 = 1 then
7254: LD_VAR 0 3
7258: PUSH
7259: LD_INT 1
7261: EQUAL
7262: IFFALSE 7272
// sRocket := true ;
7264: LD_ADDR_EXP 42
7268: PUSH
7269: LD_INT 1
7271: ST_TO_ADDR
// if p3 = 2 then
7272: LD_VAR 0 3
7276: PUSH
7277: LD_INT 2
7279: EQUAL
7280: IFFALSE 7290
// sSpeed := true ;
7282: LD_ADDR_EXP 41
7286: PUSH
7287: LD_INT 1
7289: ST_TO_ADDR
// if p3 = 3 then
7290: LD_VAR 0 3
7294: PUSH
7295: LD_INT 3
7297: EQUAL
7298: IFFALSE 7308
// sEngine := true ;
7300: LD_ADDR_EXP 43
7304: PUSH
7305: LD_INT 1
7307: ST_TO_ADDR
// if p3 = 4 then
7308: LD_VAR 0 3
7312: PUSH
7313: LD_INT 4
7315: EQUAL
7316: IFFALSE 7326
// sSpec := true ;
7318: LD_ADDR_EXP 40
7322: PUSH
7323: LD_INT 1
7325: ST_TO_ADDR
// if p3 = 5 then
7326: LD_VAR 0 3
7330: PUSH
7331: LD_INT 5
7333: EQUAL
7334: IFFALSE 7344
// sLevel := true ;
7336: LD_ADDR_EXP 44
7340: PUSH
7341: LD_INT 1
7343: ST_TO_ADDR
// if p3 = 6 then
7344: LD_VAR 0 3
7348: PUSH
7349: LD_INT 6
7351: EQUAL
7352: IFFALSE 7362
// sArmoury := true ;
7354: LD_ADDR_EXP 45
7358: PUSH
7359: LD_INT 1
7361: ST_TO_ADDR
// if p3 = 7 then
7362: LD_VAR 0 3
7366: PUSH
7367: LD_INT 7
7369: EQUAL
7370: IFFALSE 7380
// sRadar := true ;
7372: LD_ADDR_EXP 46
7376: PUSH
7377: LD_INT 1
7379: ST_TO_ADDR
// if p3 = 8 then
7380: LD_VAR 0 3
7384: PUSH
7385: LD_INT 8
7387: EQUAL
7388: IFFALSE 7398
// sBunker := true ;
7390: LD_ADDR_EXP 47
7394: PUSH
7395: LD_INT 1
7397: ST_TO_ADDR
// if p3 = 9 then
7398: LD_VAR 0 3
7402: PUSH
7403: LD_INT 9
7405: EQUAL
7406: IFFALSE 7416
// sHack := true ;
7408: LD_ADDR_EXP 48
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
// if p3 = 10 then
7416: LD_VAR 0 3
7420: PUSH
7421: LD_INT 10
7423: EQUAL
7424: IFFALSE 7434
// sFire := true ;
7426: LD_ADDR_EXP 49
7430: PUSH
7431: LD_INT 1
7433: ST_TO_ADDR
// if p3 = 11 then
7434: LD_VAR 0 3
7438: PUSH
7439: LD_INT 11
7441: EQUAL
7442: IFFALSE 7452
// sRefresh := true ;
7444: LD_ADDR_EXP 50
7448: PUSH
7449: LD_INT 1
7451: ST_TO_ADDR
// if p3 = 12 then
7452: LD_VAR 0 3
7456: PUSH
7457: LD_INT 12
7459: EQUAL
7460: IFFALSE 7470
// sExp := true ;
7462: LD_ADDR_EXP 51
7466: PUSH
7467: LD_INT 1
7469: ST_TO_ADDR
// if p3 = 13 then
7470: LD_VAR 0 3
7474: PUSH
7475: LD_INT 13
7477: EQUAL
7478: IFFALSE 7488
// sDepot := true ;
7480: LD_ADDR_EXP 52
7484: PUSH
7485: LD_INT 1
7487: ST_TO_ADDR
// if p3 = 14 then
7488: LD_VAR 0 3
7492: PUSH
7493: LD_INT 14
7495: EQUAL
7496: IFFALSE 7506
// sFlag := true ;
7498: LD_ADDR_EXP 53
7502: PUSH
7503: LD_INT 1
7505: ST_TO_ADDR
// if p3 = 15 then
7506: LD_VAR 0 3
7510: PUSH
7511: LD_INT 15
7513: EQUAL
7514: IFFALSE 7524
// sKamikadze := true ;
7516: LD_ADDR_EXP 61
7520: PUSH
7521: LD_INT 1
7523: ST_TO_ADDR
// if p3 = 16 then
7524: LD_VAR 0 3
7528: PUSH
7529: LD_INT 16
7531: EQUAL
7532: IFFALSE 7542
// sTroll := true ;
7534: LD_ADDR_EXP 62
7538: PUSH
7539: LD_INT 1
7541: ST_TO_ADDR
// if p3 = 17 then
7542: LD_VAR 0 3
7546: PUSH
7547: LD_INT 17
7549: EQUAL
7550: IFFALSE 7560
// sSlow := true ;
7552: LD_ADDR_EXP 63
7556: PUSH
7557: LD_INT 1
7559: ST_TO_ADDR
// if p3 = 18 then
7560: LD_VAR 0 3
7564: PUSH
7565: LD_INT 18
7567: EQUAL
7568: IFFALSE 7578
// sLack := true ;
7570: LD_ADDR_EXP 64
7574: PUSH
7575: LD_INT 1
7577: ST_TO_ADDR
// if p3 = 19 then
7578: LD_VAR 0 3
7582: PUSH
7583: LD_INT 19
7585: EQUAL
7586: IFFALSE 7596
// sTank := true ;
7588: LD_ADDR_EXP 66
7592: PUSH
7593: LD_INT 1
7595: ST_TO_ADDR
// if p3 = 20 then
7596: LD_VAR 0 3
7600: PUSH
7601: LD_INT 20
7603: EQUAL
7604: IFFALSE 7614
// sRemote := true ;
7606: LD_ADDR_EXP 67
7610: PUSH
7611: LD_INT 1
7613: ST_TO_ADDR
// if p3 = 21 then
7614: LD_VAR 0 3
7618: PUSH
7619: LD_INT 21
7621: EQUAL
7622: IFFALSE 7632
// sPowell := true ;
7624: LD_ADDR_EXP 68
7628: PUSH
7629: LD_INT 1
7631: ST_TO_ADDR
// if p3 = 22 then
7632: LD_VAR 0 3
7636: PUSH
7637: LD_INT 22
7639: EQUAL
7640: IFFALSE 7650
// sTeleport := true ;
7642: LD_ADDR_EXP 71
7646: PUSH
7647: LD_INT 1
7649: ST_TO_ADDR
// if p3 = 23 then
7650: LD_VAR 0 3
7654: PUSH
7655: LD_INT 23
7657: EQUAL
7658: IFFALSE 7668
// sOilTower := true ;
7660: LD_ADDR_EXP 73
7664: PUSH
7665: LD_INT 1
7667: ST_TO_ADDR
// if p3 = 24 then
7668: LD_VAR 0 3
7672: PUSH
7673: LD_INT 24
7675: EQUAL
7676: IFFALSE 7686
// sShovel := true ;
7678: LD_ADDR_EXP 74
7682: PUSH
7683: LD_INT 1
7685: ST_TO_ADDR
// if p3 = 25 then
7686: LD_VAR 0 3
7690: PUSH
7691: LD_INT 25
7693: EQUAL
7694: IFFALSE 7704
// sSheik := true ;
7696: LD_ADDR_EXP 75
7700: PUSH
7701: LD_INT 1
7703: ST_TO_ADDR
// if p3 = 26 then
7704: LD_VAR 0 3
7708: PUSH
7709: LD_INT 26
7711: EQUAL
7712: IFFALSE 7722
// sEarthquake := true ;
7714: LD_ADDR_EXP 77
7718: PUSH
7719: LD_INT 1
7721: ST_TO_ADDR
// if p3 = 27 then
7722: LD_VAR 0 3
7726: PUSH
7727: LD_INT 27
7729: EQUAL
7730: IFFALSE 7740
// sAI := true ;
7732: LD_ADDR_EXP 78
7736: PUSH
7737: LD_INT 1
7739: ST_TO_ADDR
// if p3 = 28 then
7740: LD_VAR 0 3
7744: PUSH
7745: LD_INT 28
7747: EQUAL
7748: IFFALSE 7758
// sCargo := true ;
7750: LD_ADDR_EXP 81
7754: PUSH
7755: LD_INT 1
7757: ST_TO_ADDR
// if p3 = 29 then
7758: LD_VAR 0 3
7762: PUSH
7763: LD_INT 29
7765: EQUAL
7766: IFFALSE 7776
// sDLaser := true ;
7768: LD_ADDR_EXP 82
7772: PUSH
7773: LD_INT 1
7775: ST_TO_ADDR
// if p3 = 30 then
7776: LD_VAR 0 3
7780: PUSH
7781: LD_INT 30
7783: EQUAL
7784: IFFALSE 7794
// sExchange := true ;
7786: LD_ADDR_EXP 83
7790: PUSH
7791: LD_INT 1
7793: ST_TO_ADDR
// if p3 = 31 then
7794: LD_VAR 0 3
7798: PUSH
7799: LD_INT 31
7801: EQUAL
7802: IFFALSE 7812
// sFac := true ;
7804: LD_ADDR_EXP 84
7808: PUSH
7809: LD_INT 1
7811: ST_TO_ADDR
// if p3 = 32 then
7812: LD_VAR 0 3
7816: PUSH
7817: LD_INT 32
7819: EQUAL
7820: IFFALSE 7830
// sPower := true ;
7822: LD_ADDR_EXP 85
7826: PUSH
7827: LD_INT 1
7829: ST_TO_ADDR
// if p3 = 33 then
7830: LD_VAR 0 3
7834: PUSH
7835: LD_INT 33
7837: EQUAL
7838: IFFALSE 7848
// sRandom := true ;
7840: LD_ADDR_EXP 86
7844: PUSH
7845: LD_INT 1
7847: ST_TO_ADDR
// if p3 = 34 then
7848: LD_VAR 0 3
7852: PUSH
7853: LD_INT 34
7855: EQUAL
7856: IFFALSE 7866
// sShield := true ;
7858: LD_ADDR_EXP 87
7862: PUSH
7863: LD_INT 1
7865: ST_TO_ADDR
// if p3 = 35 then
7866: LD_VAR 0 3
7870: PUSH
7871: LD_INT 35
7873: EQUAL
7874: IFFALSE 7884
// sTime := true ;
7876: LD_ADDR_EXP 88
7880: PUSH
7881: LD_INT 1
7883: ST_TO_ADDR
// if p3 = 36 then
7884: LD_VAR 0 3
7888: PUSH
7889: LD_INT 36
7891: EQUAL
7892: IFFALSE 7902
// sTools := true ;
7894: LD_ADDR_EXP 89
7898: PUSH
7899: LD_INT 1
7901: ST_TO_ADDR
// if p3 = 101 then
7902: LD_VAR 0 3
7906: PUSH
7907: LD_INT 101
7909: EQUAL
7910: IFFALSE 7920
// sSold := true ;
7912: LD_ADDR_EXP 54
7916: PUSH
7917: LD_INT 1
7919: ST_TO_ADDR
// if p3 = 102 then
7920: LD_VAR 0 3
7924: PUSH
7925: LD_INT 102
7927: EQUAL
7928: IFFALSE 7938
// sDiff := true ;
7930: LD_ADDR_EXP 55
7934: PUSH
7935: LD_INT 1
7937: ST_TO_ADDR
// if p3 = 103 then
7938: LD_VAR 0 3
7942: PUSH
7943: LD_INT 103
7945: EQUAL
7946: IFFALSE 7956
// sFog := true ;
7948: LD_ADDR_EXP 58
7952: PUSH
7953: LD_INT 1
7955: ST_TO_ADDR
// if p3 = 104 then
7956: LD_VAR 0 3
7960: PUSH
7961: LD_INT 104
7963: EQUAL
7964: IFFALSE 7974
// sReset := true ;
7966: LD_ADDR_EXP 59
7970: PUSH
7971: LD_INT 1
7973: ST_TO_ADDR
// if p3 = 105 then
7974: LD_VAR 0 3
7978: PUSH
7979: LD_INT 105
7981: EQUAL
7982: IFFALSE 7992
// sSun := true ;
7984: LD_ADDR_EXP 60
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// if p3 = 106 then
7992: LD_VAR 0 3
7996: PUSH
7997: LD_INT 106
7999: EQUAL
8000: IFFALSE 8010
// sTiger := true ;
8002: LD_ADDR_EXP 56
8006: PUSH
8007: LD_INT 1
8009: ST_TO_ADDR
// if p3 = 107 then
8010: LD_VAR 0 3
8014: PUSH
8015: LD_INT 107
8017: EQUAL
8018: IFFALSE 8028
// sBomb := true ;
8020: LD_ADDR_EXP 57
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// if p3 = 108 then
8028: LD_VAR 0 3
8032: PUSH
8033: LD_INT 108
8035: EQUAL
8036: IFFALSE 8046
// sWound := true ;
8038: LD_ADDR_EXP 65
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// if p3 = 109 then
8046: LD_VAR 0 3
8050: PUSH
8051: LD_INT 109
8053: EQUAL
8054: IFFALSE 8064
// sBetray := true ;
8056: LD_ADDR_EXP 69
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// if p3 = 110 then
8064: LD_VAR 0 3
8068: PUSH
8069: LD_INT 110
8071: EQUAL
8072: IFFALSE 8082
// sContamin := true ;
8074: LD_ADDR_EXP 70
8078: PUSH
8079: LD_INT 1
8081: ST_TO_ADDR
// if p3 = 111 then
8082: LD_VAR 0 3
8086: PUSH
8087: LD_INT 111
8089: EQUAL
8090: IFFALSE 8100
// sOil := true ;
8092: LD_ADDR_EXP 72
8096: PUSH
8097: LD_INT 1
8099: ST_TO_ADDR
// if p3 = 112 then
8100: LD_VAR 0 3
8104: PUSH
8105: LD_INT 112
8107: EQUAL
8108: IFFALSE 8118
// sStu := true ;
8110: LD_ADDR_EXP 76
8114: PUSH
8115: LD_INT 1
8117: ST_TO_ADDR
// if p3 = 113 then
8118: LD_VAR 0 3
8122: PUSH
8123: LD_INT 113
8125: EQUAL
8126: IFFALSE 8136
// sBazooka := true ;
8128: LD_ADDR_EXP 79
8132: PUSH
8133: LD_INT 1
8135: ST_TO_ADDR
// if p3 = 114 then
8136: LD_VAR 0 3
8140: PUSH
8141: LD_INT 114
8143: EQUAL
8144: IFFALSE 8154
// sMortar := true ;
8146: LD_ADDR_EXP 80
8150: PUSH
8151: LD_INT 1
8153: ST_TO_ADDR
// if p3 = 115 then
8154: LD_VAR 0 3
8158: PUSH
8159: LD_INT 115
8161: EQUAL
8162: IFFALSE 8172
// sRanger := true ;
8164: LD_ADDR_EXP 90
8168: PUSH
8169: LD_INT 1
8171: ST_TO_ADDR
// end ; if p2 = 101 then
8172: LD_VAR 0 2
8176: PUSH
8177: LD_INT 101
8179: EQUAL
8180: IFFALSE 8308
// begin case p3 of 1 :
8182: LD_VAR 0 3
8186: PUSH
8187: LD_INT 1
8189: DOUBLE
8190: EQUAL
8191: IFTRUE 8195
8193: GO 8202
8195: POP
// hHackUnlimitedResources ; 2 :
8196: CALL 19345 0 0
8200: GO 8308
8202: LD_INT 2
8204: DOUBLE
8205: EQUAL
8206: IFTRUE 8210
8208: GO 8217
8210: POP
// hHackSetLevel10 ; 3 :
8211: CALL 19478 0 0
8215: GO 8308
8217: LD_INT 3
8219: DOUBLE
8220: EQUAL
8221: IFTRUE 8225
8223: GO 8232
8225: POP
// hHackSetLevel10YourUnits ; 4 :
8226: CALL 19563 0 0
8230: GO 8308
8232: LD_INT 4
8234: DOUBLE
8235: EQUAL
8236: IFTRUE 8240
8238: GO 8247
8240: POP
// hHackInvincible ; 5 :
8241: CALL 20011 0 0
8245: GO 8308
8247: LD_INT 5
8249: DOUBLE
8250: EQUAL
8251: IFTRUE 8255
8253: GO 8262
8255: POP
// hHackInvisible ; 6 :
8256: CALL 20122 0 0
8260: GO 8308
8262: LD_INT 6
8264: DOUBLE
8265: EQUAL
8266: IFTRUE 8270
8268: GO 8277
8270: POP
// hHackChangeYourSide ; 7 :
8271: CALL 20179 0 0
8275: GO 8308
8277: LD_INT 7
8279: DOUBLE
8280: EQUAL
8281: IFTRUE 8285
8283: GO 8292
8285: POP
// hHackChangeUnitSide ; 8 :
8286: CALL 20221 0 0
8290: GO 8308
8292: LD_INT 8
8294: DOUBLE
8295: EQUAL
8296: IFTRUE 8300
8298: GO 8307
8300: POP
// hHackFog ; end ;
8301: CALL 20322 0 0
8305: GO 8308
8307: POP
// end ; end ;
8308: LD_VAR 0 7
8312: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8313: GO 8315
8315: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8316: LD_STRING initStreamRollete();
8318: PPUSH
8319: CALL_OW 559
// InitStreamMode ;
8323: CALL 8332 0 0
// DefineStreamItems ( ) ;
8327: CALL 8772 0 0
// end ;
8331: END
// function InitStreamMode ; begin
8332: LD_INT 0
8334: PPUSH
// streamModeActive := false ;
8335: LD_ADDR_EXP 37
8339: PUSH
8340: LD_INT 0
8342: ST_TO_ADDR
// normalCounter := 36 ;
8343: LD_ADDR_EXP 38
8347: PUSH
8348: LD_INT 36
8350: ST_TO_ADDR
// hardcoreCounter := 16 ;
8351: LD_ADDR_EXP 39
8355: PUSH
8356: LD_INT 16
8358: ST_TO_ADDR
// sRocket := false ;
8359: LD_ADDR_EXP 42
8363: PUSH
8364: LD_INT 0
8366: ST_TO_ADDR
// sSpeed := false ;
8367: LD_ADDR_EXP 41
8371: PUSH
8372: LD_INT 0
8374: ST_TO_ADDR
// sEngine := false ;
8375: LD_ADDR_EXP 43
8379: PUSH
8380: LD_INT 0
8382: ST_TO_ADDR
// sSpec := false ;
8383: LD_ADDR_EXP 40
8387: PUSH
8388: LD_INT 0
8390: ST_TO_ADDR
// sLevel := false ;
8391: LD_ADDR_EXP 44
8395: PUSH
8396: LD_INT 0
8398: ST_TO_ADDR
// sArmoury := false ;
8399: LD_ADDR_EXP 45
8403: PUSH
8404: LD_INT 0
8406: ST_TO_ADDR
// sRadar := false ;
8407: LD_ADDR_EXP 46
8411: PUSH
8412: LD_INT 0
8414: ST_TO_ADDR
// sBunker := false ;
8415: LD_ADDR_EXP 47
8419: PUSH
8420: LD_INT 0
8422: ST_TO_ADDR
// sHack := false ;
8423: LD_ADDR_EXP 48
8427: PUSH
8428: LD_INT 0
8430: ST_TO_ADDR
// sFire := false ;
8431: LD_ADDR_EXP 49
8435: PUSH
8436: LD_INT 0
8438: ST_TO_ADDR
// sRefresh := false ;
8439: LD_ADDR_EXP 50
8443: PUSH
8444: LD_INT 0
8446: ST_TO_ADDR
// sExp := false ;
8447: LD_ADDR_EXP 51
8451: PUSH
8452: LD_INT 0
8454: ST_TO_ADDR
// sDepot := false ;
8455: LD_ADDR_EXP 52
8459: PUSH
8460: LD_INT 0
8462: ST_TO_ADDR
// sFlag := false ;
8463: LD_ADDR_EXP 53
8467: PUSH
8468: LD_INT 0
8470: ST_TO_ADDR
// sKamikadze := false ;
8471: LD_ADDR_EXP 61
8475: PUSH
8476: LD_INT 0
8478: ST_TO_ADDR
// sTroll := false ;
8479: LD_ADDR_EXP 62
8483: PUSH
8484: LD_INT 0
8486: ST_TO_ADDR
// sSlow := false ;
8487: LD_ADDR_EXP 63
8491: PUSH
8492: LD_INT 0
8494: ST_TO_ADDR
// sLack := false ;
8495: LD_ADDR_EXP 64
8499: PUSH
8500: LD_INT 0
8502: ST_TO_ADDR
// sTank := false ;
8503: LD_ADDR_EXP 66
8507: PUSH
8508: LD_INT 0
8510: ST_TO_ADDR
// sRemote := false ;
8511: LD_ADDR_EXP 67
8515: PUSH
8516: LD_INT 0
8518: ST_TO_ADDR
// sPowell := false ;
8519: LD_ADDR_EXP 68
8523: PUSH
8524: LD_INT 0
8526: ST_TO_ADDR
// sTeleport := false ;
8527: LD_ADDR_EXP 71
8531: PUSH
8532: LD_INT 0
8534: ST_TO_ADDR
// sOilTower := false ;
8535: LD_ADDR_EXP 73
8539: PUSH
8540: LD_INT 0
8542: ST_TO_ADDR
// sShovel := false ;
8543: LD_ADDR_EXP 74
8547: PUSH
8548: LD_INT 0
8550: ST_TO_ADDR
// sSheik := false ;
8551: LD_ADDR_EXP 75
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// sEarthquake := false ;
8559: LD_ADDR_EXP 77
8563: PUSH
8564: LD_INT 0
8566: ST_TO_ADDR
// sAI := false ;
8567: LD_ADDR_EXP 78
8571: PUSH
8572: LD_INT 0
8574: ST_TO_ADDR
// sCargo := false ;
8575: LD_ADDR_EXP 81
8579: PUSH
8580: LD_INT 0
8582: ST_TO_ADDR
// sDLaser := false ;
8583: LD_ADDR_EXP 82
8587: PUSH
8588: LD_INT 0
8590: ST_TO_ADDR
// sExchange := false ;
8591: LD_ADDR_EXP 83
8595: PUSH
8596: LD_INT 0
8598: ST_TO_ADDR
// sFac := false ;
8599: LD_ADDR_EXP 84
8603: PUSH
8604: LD_INT 0
8606: ST_TO_ADDR
// sPower := false ;
8607: LD_ADDR_EXP 85
8611: PUSH
8612: LD_INT 0
8614: ST_TO_ADDR
// sRandom := false ;
8615: LD_ADDR_EXP 86
8619: PUSH
8620: LD_INT 0
8622: ST_TO_ADDR
// sShield := false ;
8623: LD_ADDR_EXP 87
8627: PUSH
8628: LD_INT 0
8630: ST_TO_ADDR
// sTime := false ;
8631: LD_ADDR_EXP 88
8635: PUSH
8636: LD_INT 0
8638: ST_TO_ADDR
// sTools := false ;
8639: LD_ADDR_EXP 89
8643: PUSH
8644: LD_INT 0
8646: ST_TO_ADDR
// sSold := false ;
8647: LD_ADDR_EXP 54
8651: PUSH
8652: LD_INT 0
8654: ST_TO_ADDR
// sDiff := false ;
8655: LD_ADDR_EXP 55
8659: PUSH
8660: LD_INT 0
8662: ST_TO_ADDR
// sFog := false ;
8663: LD_ADDR_EXP 58
8667: PUSH
8668: LD_INT 0
8670: ST_TO_ADDR
// sReset := false ;
8671: LD_ADDR_EXP 59
8675: PUSH
8676: LD_INT 0
8678: ST_TO_ADDR
// sSun := false ;
8679: LD_ADDR_EXP 60
8683: PUSH
8684: LD_INT 0
8686: ST_TO_ADDR
// sTiger := false ;
8687: LD_ADDR_EXP 56
8691: PUSH
8692: LD_INT 0
8694: ST_TO_ADDR
// sBomb := false ;
8695: LD_ADDR_EXP 57
8699: PUSH
8700: LD_INT 0
8702: ST_TO_ADDR
// sWound := false ;
8703: LD_ADDR_EXP 65
8707: PUSH
8708: LD_INT 0
8710: ST_TO_ADDR
// sBetray := false ;
8711: LD_ADDR_EXP 69
8715: PUSH
8716: LD_INT 0
8718: ST_TO_ADDR
// sContamin := false ;
8719: LD_ADDR_EXP 70
8723: PUSH
8724: LD_INT 0
8726: ST_TO_ADDR
// sOil := false ;
8727: LD_ADDR_EXP 72
8731: PUSH
8732: LD_INT 0
8734: ST_TO_ADDR
// sStu := false ;
8735: LD_ADDR_EXP 76
8739: PUSH
8740: LD_INT 0
8742: ST_TO_ADDR
// sBazooka := false ;
8743: LD_ADDR_EXP 79
8747: PUSH
8748: LD_INT 0
8750: ST_TO_ADDR
// sMortar := false ;
8751: LD_ADDR_EXP 80
8755: PUSH
8756: LD_INT 0
8758: ST_TO_ADDR
// sRanger := false ;
8759: LD_ADDR_EXP 90
8763: PUSH
8764: LD_INT 0
8766: ST_TO_ADDR
// end ;
8767: LD_VAR 0 1
8771: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8772: LD_INT 0
8774: PPUSH
8775: PPUSH
8776: PPUSH
8777: PPUSH
8778: PPUSH
// result := [ ] ;
8779: LD_ADDR_VAR 0 1
8783: PUSH
8784: EMPTY
8785: ST_TO_ADDR
// if campaign_id = 1 then
8786: LD_OWVAR 69
8790: PUSH
8791: LD_INT 1
8793: EQUAL
8794: IFFALSE 11732
// begin case mission_number of 1 :
8796: LD_OWVAR 70
8800: PUSH
8801: LD_INT 1
8803: DOUBLE
8804: EQUAL
8805: IFTRUE 8809
8807: GO 8873
8809: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8810: LD_ADDR_VAR 0 1
8814: PUSH
8815: LD_INT 2
8817: PUSH
8818: LD_INT 4
8820: PUSH
8821: LD_INT 11
8823: PUSH
8824: LD_INT 12
8826: PUSH
8827: LD_INT 15
8829: PUSH
8830: LD_INT 16
8832: PUSH
8833: LD_INT 22
8835: PUSH
8836: LD_INT 23
8838: PUSH
8839: LD_INT 26
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 101
8855: PUSH
8856: LD_INT 102
8858: PUSH
8859: LD_INT 106
8861: PUSH
8862: EMPTY
8863: LIST
8864: LIST
8865: LIST
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: ST_TO_ADDR
8871: GO 11730
8873: LD_INT 2
8875: DOUBLE
8876: EQUAL
8877: IFTRUE 8881
8879: GO 8953
8881: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8882: LD_ADDR_VAR 0 1
8886: PUSH
8887: LD_INT 2
8889: PUSH
8890: LD_INT 4
8892: PUSH
8893: LD_INT 11
8895: PUSH
8896: LD_INT 12
8898: PUSH
8899: LD_INT 15
8901: PUSH
8902: LD_INT 16
8904: PUSH
8905: LD_INT 22
8907: PUSH
8908: LD_INT 23
8910: PUSH
8911: LD_INT 26
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: PUSH
8925: LD_INT 101
8927: PUSH
8928: LD_INT 102
8930: PUSH
8931: LD_INT 105
8933: PUSH
8934: LD_INT 106
8936: PUSH
8937: LD_INT 108
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: ST_TO_ADDR
8951: GO 11730
8953: LD_INT 3
8955: DOUBLE
8956: EQUAL
8957: IFTRUE 8961
8959: GO 9037
8961: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8962: LD_ADDR_VAR 0 1
8966: PUSH
8967: LD_INT 2
8969: PUSH
8970: LD_INT 4
8972: PUSH
8973: LD_INT 5
8975: PUSH
8976: LD_INT 11
8978: PUSH
8979: LD_INT 12
8981: PUSH
8982: LD_INT 15
8984: PUSH
8985: LD_INT 16
8987: PUSH
8988: LD_INT 22
8990: PUSH
8991: LD_INT 26
8993: PUSH
8994: LD_INT 36
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: PUSH
9009: LD_INT 101
9011: PUSH
9012: LD_INT 102
9014: PUSH
9015: LD_INT 105
9017: PUSH
9018: LD_INT 106
9020: PUSH
9021: LD_INT 108
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: ST_TO_ADDR
9035: GO 11730
9037: LD_INT 4
9039: DOUBLE
9040: EQUAL
9041: IFTRUE 9045
9043: GO 9129
9045: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9046: LD_ADDR_VAR 0 1
9050: PUSH
9051: LD_INT 2
9053: PUSH
9054: LD_INT 4
9056: PUSH
9057: LD_INT 5
9059: PUSH
9060: LD_INT 8
9062: PUSH
9063: LD_INT 11
9065: PUSH
9066: LD_INT 12
9068: PUSH
9069: LD_INT 15
9071: PUSH
9072: LD_INT 16
9074: PUSH
9075: LD_INT 22
9077: PUSH
9078: LD_INT 23
9080: PUSH
9081: LD_INT 26
9083: PUSH
9084: LD_INT 36
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: PUSH
9101: LD_INT 101
9103: PUSH
9104: LD_INT 102
9106: PUSH
9107: LD_INT 105
9109: PUSH
9110: LD_INT 106
9112: PUSH
9113: LD_INT 108
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: ST_TO_ADDR
9127: GO 11730
9129: LD_INT 5
9131: DOUBLE
9132: EQUAL
9133: IFTRUE 9137
9135: GO 9237
9137: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9138: LD_ADDR_VAR 0 1
9142: PUSH
9143: LD_INT 2
9145: PUSH
9146: LD_INT 4
9148: PUSH
9149: LD_INT 5
9151: PUSH
9152: LD_INT 6
9154: PUSH
9155: LD_INT 8
9157: PUSH
9158: LD_INT 11
9160: PUSH
9161: LD_INT 12
9163: PUSH
9164: LD_INT 15
9166: PUSH
9167: LD_INT 16
9169: PUSH
9170: LD_INT 22
9172: PUSH
9173: LD_INT 23
9175: PUSH
9176: LD_INT 25
9178: PUSH
9179: LD_INT 26
9181: PUSH
9182: LD_INT 36
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 101
9203: PUSH
9204: LD_INT 102
9206: PUSH
9207: LD_INT 105
9209: PUSH
9210: LD_INT 106
9212: PUSH
9213: LD_INT 108
9215: PUSH
9216: LD_INT 109
9218: PUSH
9219: LD_INT 112
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: ST_TO_ADDR
9235: GO 11730
9237: LD_INT 6
9239: DOUBLE
9240: EQUAL
9241: IFTRUE 9245
9243: GO 9365
9245: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9246: LD_ADDR_VAR 0 1
9250: PUSH
9251: LD_INT 2
9253: PUSH
9254: LD_INT 4
9256: PUSH
9257: LD_INT 5
9259: PUSH
9260: LD_INT 6
9262: PUSH
9263: LD_INT 8
9265: PUSH
9266: LD_INT 11
9268: PUSH
9269: LD_INT 12
9271: PUSH
9272: LD_INT 15
9274: PUSH
9275: LD_INT 16
9277: PUSH
9278: LD_INT 20
9280: PUSH
9281: LD_INT 21
9283: PUSH
9284: LD_INT 22
9286: PUSH
9287: LD_INT 23
9289: PUSH
9290: LD_INT 25
9292: PUSH
9293: LD_INT 26
9295: PUSH
9296: LD_INT 30
9298: PUSH
9299: LD_INT 31
9301: PUSH
9302: LD_INT 32
9304: PUSH
9305: LD_INT 36
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 101
9331: PUSH
9332: LD_INT 102
9334: PUSH
9335: LD_INT 105
9337: PUSH
9338: LD_INT 106
9340: PUSH
9341: LD_INT 108
9343: PUSH
9344: LD_INT 109
9346: PUSH
9347: LD_INT 112
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: ST_TO_ADDR
9363: GO 11730
9365: LD_INT 7
9367: DOUBLE
9368: EQUAL
9369: IFTRUE 9373
9371: GO 9473
9373: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9374: LD_ADDR_VAR 0 1
9378: PUSH
9379: LD_INT 2
9381: PUSH
9382: LD_INT 4
9384: PUSH
9385: LD_INT 5
9387: PUSH
9388: LD_INT 7
9390: PUSH
9391: LD_INT 11
9393: PUSH
9394: LD_INT 12
9396: PUSH
9397: LD_INT 15
9399: PUSH
9400: LD_INT 16
9402: PUSH
9403: LD_INT 20
9405: PUSH
9406: LD_INT 21
9408: PUSH
9409: LD_INT 22
9411: PUSH
9412: LD_INT 23
9414: PUSH
9415: LD_INT 25
9417: PUSH
9418: LD_INT 26
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: PUSH
9437: LD_INT 101
9439: PUSH
9440: LD_INT 102
9442: PUSH
9443: LD_INT 103
9445: PUSH
9446: LD_INT 105
9448: PUSH
9449: LD_INT 106
9451: PUSH
9452: LD_INT 108
9454: PUSH
9455: LD_INT 112
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: ST_TO_ADDR
9471: GO 11730
9473: LD_INT 8
9475: DOUBLE
9476: EQUAL
9477: IFTRUE 9481
9479: GO 9609
9481: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9482: LD_ADDR_VAR 0 1
9486: PUSH
9487: LD_INT 2
9489: PUSH
9490: LD_INT 4
9492: PUSH
9493: LD_INT 5
9495: PUSH
9496: LD_INT 6
9498: PUSH
9499: LD_INT 7
9501: PUSH
9502: LD_INT 8
9504: PUSH
9505: LD_INT 11
9507: PUSH
9508: LD_INT 12
9510: PUSH
9511: LD_INT 15
9513: PUSH
9514: LD_INT 16
9516: PUSH
9517: LD_INT 20
9519: PUSH
9520: LD_INT 21
9522: PUSH
9523: LD_INT 22
9525: PUSH
9526: LD_INT 23
9528: PUSH
9529: LD_INT 25
9531: PUSH
9532: LD_INT 26
9534: PUSH
9535: LD_INT 30
9537: PUSH
9538: LD_INT 31
9540: PUSH
9541: LD_INT 32
9543: PUSH
9544: LD_INT 36
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: PUSH
9569: LD_INT 101
9571: PUSH
9572: LD_INT 102
9574: PUSH
9575: LD_INT 103
9577: PUSH
9578: LD_INT 105
9580: PUSH
9581: LD_INT 106
9583: PUSH
9584: LD_INT 108
9586: PUSH
9587: LD_INT 109
9589: PUSH
9590: LD_INT 112
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: ST_TO_ADDR
9607: GO 11730
9609: LD_INT 9
9611: DOUBLE
9612: EQUAL
9613: IFTRUE 9617
9615: GO 9753
9617: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9618: LD_ADDR_VAR 0 1
9622: PUSH
9623: LD_INT 2
9625: PUSH
9626: LD_INT 4
9628: PUSH
9629: LD_INT 5
9631: PUSH
9632: LD_INT 6
9634: PUSH
9635: LD_INT 7
9637: PUSH
9638: LD_INT 8
9640: PUSH
9641: LD_INT 11
9643: PUSH
9644: LD_INT 12
9646: PUSH
9647: LD_INT 15
9649: PUSH
9650: LD_INT 16
9652: PUSH
9653: LD_INT 20
9655: PUSH
9656: LD_INT 21
9658: PUSH
9659: LD_INT 22
9661: PUSH
9662: LD_INT 23
9664: PUSH
9665: LD_INT 25
9667: PUSH
9668: LD_INT 26
9670: PUSH
9671: LD_INT 28
9673: PUSH
9674: LD_INT 30
9676: PUSH
9677: LD_INT 31
9679: PUSH
9680: LD_INT 32
9682: PUSH
9683: LD_INT 36
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: PUSH
9709: LD_INT 101
9711: PUSH
9712: LD_INT 102
9714: PUSH
9715: LD_INT 103
9717: PUSH
9718: LD_INT 105
9720: PUSH
9721: LD_INT 106
9723: PUSH
9724: LD_INT 108
9726: PUSH
9727: LD_INT 109
9729: PUSH
9730: LD_INT 112
9732: PUSH
9733: LD_INT 114
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: ST_TO_ADDR
9751: GO 11730
9753: LD_INT 10
9755: DOUBLE
9756: EQUAL
9757: IFTRUE 9761
9759: GO 9945
9761: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9762: LD_ADDR_VAR 0 1
9766: PUSH
9767: LD_INT 2
9769: PUSH
9770: LD_INT 4
9772: PUSH
9773: LD_INT 5
9775: PUSH
9776: LD_INT 6
9778: PUSH
9779: LD_INT 7
9781: PUSH
9782: LD_INT 8
9784: PUSH
9785: LD_INT 9
9787: PUSH
9788: LD_INT 10
9790: PUSH
9791: LD_INT 11
9793: PUSH
9794: LD_INT 12
9796: PUSH
9797: LD_INT 13
9799: PUSH
9800: LD_INT 14
9802: PUSH
9803: LD_INT 15
9805: PUSH
9806: LD_INT 16
9808: PUSH
9809: LD_INT 17
9811: PUSH
9812: LD_INT 18
9814: PUSH
9815: LD_INT 19
9817: PUSH
9818: LD_INT 20
9820: PUSH
9821: LD_INT 21
9823: PUSH
9824: LD_INT 22
9826: PUSH
9827: LD_INT 23
9829: PUSH
9830: LD_INT 24
9832: PUSH
9833: LD_INT 25
9835: PUSH
9836: LD_INT 26
9838: PUSH
9839: LD_INT 28
9841: PUSH
9842: LD_INT 30
9844: PUSH
9845: LD_INT 31
9847: PUSH
9848: LD_INT 32
9850: PUSH
9851: LD_INT 36
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: PUSH
9885: LD_INT 101
9887: PUSH
9888: LD_INT 102
9890: PUSH
9891: LD_INT 103
9893: PUSH
9894: LD_INT 104
9896: PUSH
9897: LD_INT 105
9899: PUSH
9900: LD_INT 106
9902: PUSH
9903: LD_INT 107
9905: PUSH
9906: LD_INT 108
9908: PUSH
9909: LD_INT 109
9911: PUSH
9912: LD_INT 110
9914: PUSH
9915: LD_INT 111
9917: PUSH
9918: LD_INT 112
9920: PUSH
9921: LD_INT 114
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: ST_TO_ADDR
9943: GO 11730
9945: LD_INT 11
9947: DOUBLE
9948: EQUAL
9949: IFTRUE 9953
9951: GO 10145
9953: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9954: LD_ADDR_VAR 0 1
9958: PUSH
9959: LD_INT 2
9961: PUSH
9962: LD_INT 3
9964: PUSH
9965: LD_INT 4
9967: PUSH
9968: LD_INT 5
9970: PUSH
9971: LD_INT 6
9973: PUSH
9974: LD_INT 7
9976: PUSH
9977: LD_INT 8
9979: PUSH
9980: LD_INT 9
9982: PUSH
9983: LD_INT 10
9985: PUSH
9986: LD_INT 11
9988: PUSH
9989: LD_INT 12
9991: PUSH
9992: LD_INT 13
9994: PUSH
9995: LD_INT 14
9997: PUSH
9998: LD_INT 15
10000: PUSH
10001: LD_INT 16
10003: PUSH
10004: LD_INT 17
10006: PUSH
10007: LD_INT 18
10009: PUSH
10010: LD_INT 19
10012: PUSH
10013: LD_INT 20
10015: PUSH
10016: LD_INT 21
10018: PUSH
10019: LD_INT 22
10021: PUSH
10022: LD_INT 23
10024: PUSH
10025: LD_INT 24
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 26
10033: PUSH
10034: LD_INT 28
10036: PUSH
10037: LD_INT 30
10039: PUSH
10040: LD_INT 31
10042: PUSH
10043: LD_INT 32
10045: PUSH
10046: LD_INT 34
10048: PUSH
10049: LD_INT 36
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 101
10087: PUSH
10088: LD_INT 102
10090: PUSH
10091: LD_INT 103
10093: PUSH
10094: LD_INT 104
10096: PUSH
10097: LD_INT 105
10099: PUSH
10100: LD_INT 106
10102: PUSH
10103: LD_INT 107
10105: PUSH
10106: LD_INT 108
10108: PUSH
10109: LD_INT 109
10111: PUSH
10112: LD_INT 110
10114: PUSH
10115: LD_INT 111
10117: PUSH
10118: LD_INT 112
10120: PUSH
10121: LD_INT 114
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: ST_TO_ADDR
10143: GO 11730
10145: LD_INT 12
10147: DOUBLE
10148: EQUAL
10149: IFTRUE 10153
10151: GO 10361
10153: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10154: LD_ADDR_VAR 0 1
10158: PUSH
10159: LD_INT 1
10161: PUSH
10162: LD_INT 2
10164: PUSH
10165: LD_INT 3
10167: PUSH
10168: LD_INT 4
10170: PUSH
10171: LD_INT 5
10173: PUSH
10174: LD_INT 6
10176: PUSH
10177: LD_INT 7
10179: PUSH
10180: LD_INT 8
10182: PUSH
10183: LD_INT 9
10185: PUSH
10186: LD_INT 10
10188: PUSH
10189: LD_INT 11
10191: PUSH
10192: LD_INT 12
10194: PUSH
10195: LD_INT 13
10197: PUSH
10198: LD_INT 14
10200: PUSH
10201: LD_INT 15
10203: PUSH
10204: LD_INT 16
10206: PUSH
10207: LD_INT 17
10209: PUSH
10210: LD_INT 18
10212: PUSH
10213: LD_INT 19
10215: PUSH
10216: LD_INT 20
10218: PUSH
10219: LD_INT 21
10221: PUSH
10222: LD_INT 22
10224: PUSH
10225: LD_INT 23
10227: PUSH
10228: LD_INT 24
10230: PUSH
10231: LD_INT 25
10233: PUSH
10234: LD_INT 26
10236: PUSH
10237: LD_INT 27
10239: PUSH
10240: LD_INT 28
10242: PUSH
10243: LD_INT 30
10245: PUSH
10246: LD_INT 31
10248: PUSH
10249: LD_INT 32
10251: PUSH
10252: LD_INT 33
10254: PUSH
10255: LD_INT 34
10257: PUSH
10258: LD_INT 36
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 101
10299: PUSH
10300: LD_INT 102
10302: PUSH
10303: LD_INT 103
10305: PUSH
10306: LD_INT 104
10308: PUSH
10309: LD_INT 105
10311: PUSH
10312: LD_INT 106
10314: PUSH
10315: LD_INT 107
10317: PUSH
10318: LD_INT 108
10320: PUSH
10321: LD_INT 109
10323: PUSH
10324: LD_INT 110
10326: PUSH
10327: LD_INT 111
10329: PUSH
10330: LD_INT 112
10332: PUSH
10333: LD_INT 113
10335: PUSH
10336: LD_INT 114
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: ST_TO_ADDR
10359: GO 11730
10361: LD_INT 13
10363: DOUBLE
10364: EQUAL
10365: IFTRUE 10369
10367: GO 10565
10369: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10370: LD_ADDR_VAR 0 1
10374: PUSH
10375: LD_INT 1
10377: PUSH
10378: LD_INT 2
10380: PUSH
10381: LD_INT 3
10383: PUSH
10384: LD_INT 4
10386: PUSH
10387: LD_INT 5
10389: PUSH
10390: LD_INT 8
10392: PUSH
10393: LD_INT 9
10395: PUSH
10396: LD_INT 10
10398: PUSH
10399: LD_INT 11
10401: PUSH
10402: LD_INT 12
10404: PUSH
10405: LD_INT 14
10407: PUSH
10408: LD_INT 15
10410: PUSH
10411: LD_INT 16
10413: PUSH
10414: LD_INT 17
10416: PUSH
10417: LD_INT 18
10419: PUSH
10420: LD_INT 19
10422: PUSH
10423: LD_INT 20
10425: PUSH
10426: LD_INT 21
10428: PUSH
10429: LD_INT 22
10431: PUSH
10432: LD_INT 23
10434: PUSH
10435: LD_INT 24
10437: PUSH
10438: LD_INT 25
10440: PUSH
10441: LD_INT 26
10443: PUSH
10444: LD_INT 27
10446: PUSH
10447: LD_INT 28
10449: PUSH
10450: LD_INT 30
10452: PUSH
10453: LD_INT 31
10455: PUSH
10456: LD_INT 32
10458: PUSH
10459: LD_INT 33
10461: PUSH
10462: LD_INT 34
10464: PUSH
10465: LD_INT 36
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 101
10503: PUSH
10504: LD_INT 102
10506: PUSH
10507: LD_INT 103
10509: PUSH
10510: LD_INT 104
10512: PUSH
10513: LD_INT 105
10515: PUSH
10516: LD_INT 106
10518: PUSH
10519: LD_INT 107
10521: PUSH
10522: LD_INT 108
10524: PUSH
10525: LD_INT 109
10527: PUSH
10528: LD_INT 110
10530: PUSH
10531: LD_INT 111
10533: PUSH
10534: LD_INT 112
10536: PUSH
10537: LD_INT 113
10539: PUSH
10540: LD_INT 114
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: ST_TO_ADDR
10563: GO 11730
10565: LD_INT 14
10567: DOUBLE
10568: EQUAL
10569: IFTRUE 10573
10571: GO 10785
10573: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10574: LD_ADDR_VAR 0 1
10578: PUSH
10579: LD_INT 1
10581: PUSH
10582: LD_INT 2
10584: PUSH
10585: LD_INT 3
10587: PUSH
10588: LD_INT 4
10590: PUSH
10591: LD_INT 5
10593: PUSH
10594: LD_INT 6
10596: PUSH
10597: LD_INT 7
10599: PUSH
10600: LD_INT 8
10602: PUSH
10603: LD_INT 9
10605: PUSH
10606: LD_INT 10
10608: PUSH
10609: LD_INT 11
10611: PUSH
10612: LD_INT 12
10614: PUSH
10615: LD_INT 13
10617: PUSH
10618: LD_INT 14
10620: PUSH
10621: LD_INT 15
10623: PUSH
10624: LD_INT 16
10626: PUSH
10627: LD_INT 17
10629: PUSH
10630: LD_INT 18
10632: PUSH
10633: LD_INT 19
10635: PUSH
10636: LD_INT 20
10638: PUSH
10639: LD_INT 21
10641: PUSH
10642: LD_INT 22
10644: PUSH
10645: LD_INT 23
10647: PUSH
10648: LD_INT 24
10650: PUSH
10651: LD_INT 25
10653: PUSH
10654: LD_INT 26
10656: PUSH
10657: LD_INT 27
10659: PUSH
10660: LD_INT 28
10662: PUSH
10663: LD_INT 29
10665: PUSH
10666: LD_INT 30
10668: PUSH
10669: LD_INT 31
10671: PUSH
10672: LD_INT 32
10674: PUSH
10675: LD_INT 33
10677: PUSH
10678: LD_INT 34
10680: PUSH
10681: LD_INT 36
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 101
10723: PUSH
10724: LD_INT 102
10726: PUSH
10727: LD_INT 103
10729: PUSH
10730: LD_INT 104
10732: PUSH
10733: LD_INT 105
10735: PUSH
10736: LD_INT 106
10738: PUSH
10739: LD_INT 107
10741: PUSH
10742: LD_INT 108
10744: PUSH
10745: LD_INT 109
10747: PUSH
10748: LD_INT 110
10750: PUSH
10751: LD_INT 111
10753: PUSH
10754: LD_INT 112
10756: PUSH
10757: LD_INT 113
10759: PUSH
10760: LD_INT 114
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: ST_TO_ADDR
10783: GO 11730
10785: LD_INT 15
10787: DOUBLE
10788: EQUAL
10789: IFTRUE 10793
10791: GO 11005
10793: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10794: LD_ADDR_VAR 0 1
10798: PUSH
10799: LD_INT 1
10801: PUSH
10802: LD_INT 2
10804: PUSH
10805: LD_INT 3
10807: PUSH
10808: LD_INT 4
10810: PUSH
10811: LD_INT 5
10813: PUSH
10814: LD_INT 6
10816: PUSH
10817: LD_INT 7
10819: PUSH
10820: LD_INT 8
10822: PUSH
10823: LD_INT 9
10825: PUSH
10826: LD_INT 10
10828: PUSH
10829: LD_INT 11
10831: PUSH
10832: LD_INT 12
10834: PUSH
10835: LD_INT 13
10837: PUSH
10838: LD_INT 14
10840: PUSH
10841: LD_INT 15
10843: PUSH
10844: LD_INT 16
10846: PUSH
10847: LD_INT 17
10849: PUSH
10850: LD_INT 18
10852: PUSH
10853: LD_INT 19
10855: PUSH
10856: LD_INT 20
10858: PUSH
10859: LD_INT 21
10861: PUSH
10862: LD_INT 22
10864: PUSH
10865: LD_INT 23
10867: PUSH
10868: LD_INT 24
10870: PUSH
10871: LD_INT 25
10873: PUSH
10874: LD_INT 26
10876: PUSH
10877: LD_INT 27
10879: PUSH
10880: LD_INT 28
10882: PUSH
10883: LD_INT 29
10885: PUSH
10886: LD_INT 30
10888: PUSH
10889: LD_INT 31
10891: PUSH
10892: LD_INT 32
10894: PUSH
10895: LD_INT 33
10897: PUSH
10898: LD_INT 34
10900: PUSH
10901: LD_INT 36
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: PUSH
10941: LD_INT 101
10943: PUSH
10944: LD_INT 102
10946: PUSH
10947: LD_INT 103
10949: PUSH
10950: LD_INT 104
10952: PUSH
10953: LD_INT 105
10955: PUSH
10956: LD_INT 106
10958: PUSH
10959: LD_INT 107
10961: PUSH
10962: LD_INT 108
10964: PUSH
10965: LD_INT 109
10967: PUSH
10968: LD_INT 110
10970: PUSH
10971: LD_INT 111
10973: PUSH
10974: LD_INT 112
10976: PUSH
10977: LD_INT 113
10979: PUSH
10980: LD_INT 114
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: ST_TO_ADDR
11003: GO 11730
11005: LD_INT 16
11007: DOUBLE
11008: EQUAL
11009: IFTRUE 11013
11011: GO 11137
11013: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11014: LD_ADDR_VAR 0 1
11018: PUSH
11019: LD_INT 2
11021: PUSH
11022: LD_INT 4
11024: PUSH
11025: LD_INT 5
11027: PUSH
11028: LD_INT 7
11030: PUSH
11031: LD_INT 11
11033: PUSH
11034: LD_INT 12
11036: PUSH
11037: LD_INT 15
11039: PUSH
11040: LD_INT 16
11042: PUSH
11043: LD_INT 20
11045: PUSH
11046: LD_INT 21
11048: PUSH
11049: LD_INT 22
11051: PUSH
11052: LD_INT 23
11054: PUSH
11055: LD_INT 25
11057: PUSH
11058: LD_INT 26
11060: PUSH
11061: LD_INT 30
11063: PUSH
11064: LD_INT 31
11066: PUSH
11067: LD_INT 32
11069: PUSH
11070: LD_INT 33
11072: PUSH
11073: LD_INT 34
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 101
11099: PUSH
11100: LD_INT 102
11102: PUSH
11103: LD_INT 103
11105: PUSH
11106: LD_INT 106
11108: PUSH
11109: LD_INT 108
11111: PUSH
11112: LD_INT 112
11114: PUSH
11115: LD_INT 113
11117: PUSH
11118: LD_INT 114
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: ST_TO_ADDR
11135: GO 11730
11137: LD_INT 17
11139: DOUBLE
11140: EQUAL
11141: IFTRUE 11145
11143: GO 11357
11145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11146: LD_ADDR_VAR 0 1
11150: PUSH
11151: LD_INT 1
11153: PUSH
11154: LD_INT 2
11156: PUSH
11157: LD_INT 3
11159: PUSH
11160: LD_INT 4
11162: PUSH
11163: LD_INT 5
11165: PUSH
11166: LD_INT 6
11168: PUSH
11169: LD_INT 7
11171: PUSH
11172: LD_INT 8
11174: PUSH
11175: LD_INT 9
11177: PUSH
11178: LD_INT 10
11180: PUSH
11181: LD_INT 11
11183: PUSH
11184: LD_INT 12
11186: PUSH
11187: LD_INT 13
11189: PUSH
11190: LD_INT 14
11192: PUSH
11193: LD_INT 15
11195: PUSH
11196: LD_INT 16
11198: PUSH
11199: LD_INT 17
11201: PUSH
11202: LD_INT 18
11204: PUSH
11205: LD_INT 19
11207: PUSH
11208: LD_INT 20
11210: PUSH
11211: LD_INT 21
11213: PUSH
11214: LD_INT 22
11216: PUSH
11217: LD_INT 23
11219: PUSH
11220: LD_INT 24
11222: PUSH
11223: LD_INT 25
11225: PUSH
11226: LD_INT 26
11228: PUSH
11229: LD_INT 27
11231: PUSH
11232: LD_INT 28
11234: PUSH
11235: LD_INT 29
11237: PUSH
11238: LD_INT 30
11240: PUSH
11241: LD_INT 31
11243: PUSH
11244: LD_INT 32
11246: PUSH
11247: LD_INT 33
11249: PUSH
11250: LD_INT 34
11252: PUSH
11253: LD_INT 36
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 101
11295: PUSH
11296: LD_INT 102
11298: PUSH
11299: LD_INT 103
11301: PUSH
11302: LD_INT 104
11304: PUSH
11305: LD_INT 105
11307: PUSH
11308: LD_INT 106
11310: PUSH
11311: LD_INT 107
11313: PUSH
11314: LD_INT 108
11316: PUSH
11317: LD_INT 109
11319: PUSH
11320: LD_INT 110
11322: PUSH
11323: LD_INT 111
11325: PUSH
11326: LD_INT 112
11328: PUSH
11329: LD_INT 113
11331: PUSH
11332: LD_INT 114
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: ST_TO_ADDR
11355: GO 11730
11357: LD_INT 18
11359: DOUBLE
11360: EQUAL
11361: IFTRUE 11365
11363: GO 11501
11365: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11366: LD_ADDR_VAR 0 1
11370: PUSH
11371: LD_INT 2
11373: PUSH
11374: LD_INT 4
11376: PUSH
11377: LD_INT 5
11379: PUSH
11380: LD_INT 7
11382: PUSH
11383: LD_INT 11
11385: PUSH
11386: LD_INT 12
11388: PUSH
11389: LD_INT 15
11391: PUSH
11392: LD_INT 16
11394: PUSH
11395: LD_INT 20
11397: PUSH
11398: LD_INT 21
11400: PUSH
11401: LD_INT 22
11403: PUSH
11404: LD_INT 23
11406: PUSH
11407: LD_INT 25
11409: PUSH
11410: LD_INT 26
11412: PUSH
11413: LD_INT 30
11415: PUSH
11416: LD_INT 31
11418: PUSH
11419: LD_INT 32
11421: PUSH
11422: LD_INT 33
11424: PUSH
11425: LD_INT 34
11427: PUSH
11428: LD_INT 35
11430: PUSH
11431: LD_INT 36
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 101
11459: PUSH
11460: LD_INT 102
11462: PUSH
11463: LD_INT 103
11465: PUSH
11466: LD_INT 106
11468: PUSH
11469: LD_INT 108
11471: PUSH
11472: LD_INT 112
11474: PUSH
11475: LD_INT 113
11477: PUSH
11478: LD_INT 114
11480: PUSH
11481: LD_INT 115
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: ST_TO_ADDR
11499: GO 11730
11501: LD_INT 19
11503: DOUBLE
11504: EQUAL
11505: IFTRUE 11509
11507: GO 11729
11509: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11510: LD_ADDR_VAR 0 1
11514: PUSH
11515: LD_INT 1
11517: PUSH
11518: LD_INT 2
11520: PUSH
11521: LD_INT 3
11523: PUSH
11524: LD_INT 4
11526: PUSH
11527: LD_INT 5
11529: PUSH
11530: LD_INT 6
11532: PUSH
11533: LD_INT 7
11535: PUSH
11536: LD_INT 8
11538: PUSH
11539: LD_INT 9
11541: PUSH
11542: LD_INT 10
11544: PUSH
11545: LD_INT 11
11547: PUSH
11548: LD_INT 12
11550: PUSH
11551: LD_INT 13
11553: PUSH
11554: LD_INT 14
11556: PUSH
11557: LD_INT 15
11559: PUSH
11560: LD_INT 16
11562: PUSH
11563: LD_INT 17
11565: PUSH
11566: LD_INT 18
11568: PUSH
11569: LD_INT 19
11571: PUSH
11572: LD_INT 20
11574: PUSH
11575: LD_INT 21
11577: PUSH
11578: LD_INT 22
11580: PUSH
11581: LD_INT 23
11583: PUSH
11584: LD_INT 24
11586: PUSH
11587: LD_INT 25
11589: PUSH
11590: LD_INT 26
11592: PUSH
11593: LD_INT 27
11595: PUSH
11596: LD_INT 28
11598: PUSH
11599: LD_INT 29
11601: PUSH
11602: LD_INT 30
11604: PUSH
11605: LD_INT 31
11607: PUSH
11608: LD_INT 32
11610: PUSH
11611: LD_INT 33
11613: PUSH
11614: LD_INT 34
11616: PUSH
11617: LD_INT 35
11619: PUSH
11620: LD_INT 36
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 101
11663: PUSH
11664: LD_INT 102
11666: PUSH
11667: LD_INT 103
11669: PUSH
11670: LD_INT 104
11672: PUSH
11673: LD_INT 105
11675: PUSH
11676: LD_INT 106
11678: PUSH
11679: LD_INT 107
11681: PUSH
11682: LD_INT 108
11684: PUSH
11685: LD_INT 109
11687: PUSH
11688: LD_INT 110
11690: PUSH
11691: LD_INT 111
11693: PUSH
11694: LD_INT 112
11696: PUSH
11697: LD_INT 113
11699: PUSH
11700: LD_INT 114
11702: PUSH
11703: LD_INT 115
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: ST_TO_ADDR
11727: GO 11730
11729: POP
// end else
11730: GO 11949
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11732: LD_ADDR_VAR 0 1
11736: PUSH
11737: LD_INT 1
11739: PUSH
11740: LD_INT 2
11742: PUSH
11743: LD_INT 3
11745: PUSH
11746: LD_INT 4
11748: PUSH
11749: LD_INT 5
11751: PUSH
11752: LD_INT 6
11754: PUSH
11755: LD_INT 7
11757: PUSH
11758: LD_INT 8
11760: PUSH
11761: LD_INT 9
11763: PUSH
11764: LD_INT 10
11766: PUSH
11767: LD_INT 11
11769: PUSH
11770: LD_INT 12
11772: PUSH
11773: LD_INT 13
11775: PUSH
11776: LD_INT 14
11778: PUSH
11779: LD_INT 15
11781: PUSH
11782: LD_INT 16
11784: PUSH
11785: LD_INT 17
11787: PUSH
11788: LD_INT 18
11790: PUSH
11791: LD_INT 19
11793: PUSH
11794: LD_INT 20
11796: PUSH
11797: LD_INT 21
11799: PUSH
11800: LD_INT 22
11802: PUSH
11803: LD_INT 23
11805: PUSH
11806: LD_INT 24
11808: PUSH
11809: LD_INT 25
11811: PUSH
11812: LD_INT 26
11814: PUSH
11815: LD_INT 27
11817: PUSH
11818: LD_INT 28
11820: PUSH
11821: LD_INT 29
11823: PUSH
11824: LD_INT 30
11826: PUSH
11827: LD_INT 31
11829: PUSH
11830: LD_INT 32
11832: PUSH
11833: LD_INT 33
11835: PUSH
11836: LD_INT 34
11838: PUSH
11839: LD_INT 35
11841: PUSH
11842: LD_INT 36
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 101
11885: PUSH
11886: LD_INT 102
11888: PUSH
11889: LD_INT 103
11891: PUSH
11892: LD_INT 104
11894: PUSH
11895: LD_INT 105
11897: PUSH
11898: LD_INT 106
11900: PUSH
11901: LD_INT 107
11903: PUSH
11904: LD_INT 108
11906: PUSH
11907: LD_INT 109
11909: PUSH
11910: LD_INT 110
11912: PUSH
11913: LD_INT 111
11915: PUSH
11916: LD_INT 112
11918: PUSH
11919: LD_INT 113
11921: PUSH
11922: LD_INT 114
11924: PUSH
11925: LD_INT 115
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: ST_TO_ADDR
// if result then
11949: LD_VAR 0 1
11953: IFFALSE 12242
// begin normal :=  ;
11955: LD_ADDR_VAR 0 3
11959: PUSH
11960: LD_STRING 
11962: ST_TO_ADDR
// hardcore :=  ;
11963: LD_ADDR_VAR 0 4
11967: PUSH
11968: LD_STRING 
11970: ST_TO_ADDR
// for i = 1 to normalCounter do
11971: LD_ADDR_VAR 0 5
11975: PUSH
11976: DOUBLE
11977: LD_INT 1
11979: DEC
11980: ST_TO_ADDR
11981: LD_EXP 38
11985: PUSH
11986: FOR_TO
11987: IFFALSE 12088
// begin tmp := 0 ;
11989: LD_ADDR_VAR 0 2
11993: PUSH
11994: LD_STRING 0
11996: ST_TO_ADDR
// if result [ 1 ] then
11997: LD_VAR 0 1
12001: PUSH
12002: LD_INT 1
12004: ARRAY
12005: IFFALSE 12070
// if result [ 1 ] [ 1 ] = i then
12007: LD_VAR 0 1
12011: PUSH
12012: LD_INT 1
12014: ARRAY
12015: PUSH
12016: LD_INT 1
12018: ARRAY
12019: PUSH
12020: LD_VAR 0 5
12024: EQUAL
12025: IFFALSE 12070
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12027: LD_ADDR_VAR 0 1
12031: PUSH
12032: LD_VAR 0 1
12036: PPUSH
12037: LD_INT 1
12039: PPUSH
12040: LD_VAR 0 1
12044: PUSH
12045: LD_INT 1
12047: ARRAY
12048: PPUSH
12049: LD_INT 1
12051: PPUSH
12052: CALL_OW 3
12056: PPUSH
12057: CALL_OW 1
12061: ST_TO_ADDR
// tmp := 1 ;
12062: LD_ADDR_VAR 0 2
12066: PUSH
12067: LD_STRING 1
12069: ST_TO_ADDR
// end ; normal := normal & tmp ;
12070: LD_ADDR_VAR 0 3
12074: PUSH
12075: LD_VAR 0 3
12079: PUSH
12080: LD_VAR 0 2
12084: STR
12085: ST_TO_ADDR
// end ;
12086: GO 11986
12088: POP
12089: POP
// for i = 1 to hardcoreCounter do
12090: LD_ADDR_VAR 0 5
12094: PUSH
12095: DOUBLE
12096: LD_INT 1
12098: DEC
12099: ST_TO_ADDR
12100: LD_EXP 39
12104: PUSH
12105: FOR_TO
12106: IFFALSE 12211
// begin tmp := 0 ;
12108: LD_ADDR_VAR 0 2
12112: PUSH
12113: LD_STRING 0
12115: ST_TO_ADDR
// if result [ 2 ] then
12116: LD_VAR 0 1
12120: PUSH
12121: LD_INT 2
12123: ARRAY
12124: IFFALSE 12193
// if result [ 2 ] [ 1 ] = 100 + i then
12126: LD_VAR 0 1
12130: PUSH
12131: LD_INT 2
12133: ARRAY
12134: PUSH
12135: LD_INT 1
12137: ARRAY
12138: PUSH
12139: LD_INT 100
12141: PUSH
12142: LD_VAR 0 5
12146: PLUS
12147: EQUAL
12148: IFFALSE 12193
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12150: LD_ADDR_VAR 0 1
12154: PUSH
12155: LD_VAR 0 1
12159: PPUSH
12160: LD_INT 2
12162: PPUSH
12163: LD_VAR 0 1
12167: PUSH
12168: LD_INT 2
12170: ARRAY
12171: PPUSH
12172: LD_INT 1
12174: PPUSH
12175: CALL_OW 3
12179: PPUSH
12180: CALL_OW 1
12184: ST_TO_ADDR
// tmp := 1 ;
12185: LD_ADDR_VAR 0 2
12189: PUSH
12190: LD_STRING 1
12192: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12193: LD_ADDR_VAR 0 4
12197: PUSH
12198: LD_VAR 0 4
12202: PUSH
12203: LD_VAR 0 2
12207: STR
12208: ST_TO_ADDR
// end ;
12209: GO 12105
12211: POP
12212: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12213: LD_STRING getStreamItemsFromMission("
12215: PUSH
12216: LD_VAR 0 3
12220: STR
12221: PUSH
12222: LD_STRING ","
12224: STR
12225: PUSH
12226: LD_VAR 0 4
12230: STR
12231: PUSH
12232: LD_STRING ")
12234: STR
12235: PPUSH
12236: CALL_OW 559
// end else
12240: GO 12249
// ToLua ( getStreamItemsFromMission("","") ) ;
12242: LD_STRING getStreamItemsFromMission("","")
12244: PPUSH
12245: CALL_OW 559
// end ;
12249: LD_VAR 0 1
12253: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12254: LD_EXP 37
12258: PUSH
12259: LD_EXP 42
12263: AND
12264: IFFALSE 12388
12266: GO 12268
12268: DISABLE
12269: LD_INT 0
12271: PPUSH
12272: PPUSH
// begin enable ;
12273: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12274: LD_ADDR_VAR 0 2
12278: PUSH
12279: LD_INT 22
12281: PUSH
12282: LD_OWVAR 2
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 2
12293: PUSH
12294: LD_INT 34
12296: PUSH
12297: LD_INT 7
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 34
12306: PUSH
12307: LD_INT 45
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 34
12316: PUSH
12317: LD_INT 28
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: LD_INT 34
12326: PUSH
12327: LD_INT 47
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PPUSH
12345: CALL_OW 69
12349: ST_TO_ADDR
// if not tmp then
12350: LD_VAR 0 2
12354: NOT
12355: IFFALSE 12359
// exit ;
12357: GO 12388
// for i in tmp do
12359: LD_ADDR_VAR 0 1
12363: PUSH
12364: LD_VAR 0 2
12368: PUSH
12369: FOR_IN
12370: IFFALSE 12386
// begin SetLives ( i , 0 ) ;
12372: LD_VAR 0 1
12376: PPUSH
12377: LD_INT 0
12379: PPUSH
12380: CALL_OW 234
// end ;
12384: GO 12369
12386: POP
12387: POP
// end ;
12388: PPOPN 2
12390: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12391: LD_EXP 37
12395: PUSH
12396: LD_EXP 43
12400: AND
12401: IFFALSE 12485
12403: GO 12405
12405: DISABLE
12406: LD_INT 0
12408: PPUSH
12409: PPUSH
// begin enable ;
12410: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12411: LD_ADDR_VAR 0 2
12415: PUSH
12416: LD_INT 22
12418: PUSH
12419: LD_OWVAR 2
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PUSH
12428: LD_INT 32
12430: PUSH
12431: LD_INT 3
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PPUSH
12442: CALL_OW 69
12446: ST_TO_ADDR
// if not tmp then
12447: LD_VAR 0 2
12451: NOT
12452: IFFALSE 12456
// exit ;
12454: GO 12485
// for i in tmp do
12456: LD_ADDR_VAR 0 1
12460: PUSH
12461: LD_VAR 0 2
12465: PUSH
12466: FOR_IN
12467: IFFALSE 12483
// begin SetLives ( i , 0 ) ;
12469: LD_VAR 0 1
12473: PPUSH
12474: LD_INT 0
12476: PPUSH
12477: CALL_OW 234
// end ;
12481: GO 12466
12483: POP
12484: POP
// end ;
12485: PPOPN 2
12487: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12488: LD_EXP 37
12492: PUSH
12493: LD_EXP 40
12497: AND
12498: IFFALSE 12591
12500: GO 12502
12502: DISABLE
12503: LD_INT 0
12505: PPUSH
// begin enable ;
12506: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12507: LD_ADDR_VAR 0 1
12511: PUSH
12512: LD_INT 22
12514: PUSH
12515: LD_OWVAR 2
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 2
12526: PUSH
12527: LD_INT 25
12529: PUSH
12530: LD_INT 5
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: LD_INT 25
12539: PUSH
12540: LD_INT 9
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: LD_INT 25
12549: PUSH
12550: LD_INT 8
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: CALL_OW 69
12571: PUSH
12572: FOR_IN
12573: IFFALSE 12589
// begin SetClass ( i , 1 ) ;
12575: LD_VAR 0 1
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: CALL_OW 336
// end ;
12587: GO 12572
12589: POP
12590: POP
// end ;
12591: PPOPN 1
12593: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12594: LD_EXP 37
12598: PUSH
12599: LD_EXP 41
12603: AND
12604: PUSH
12605: LD_OWVAR 65
12609: PUSH
12610: LD_INT 7
12612: LESS
12613: AND
12614: IFFALSE 12628
12616: GO 12618
12618: DISABLE
// begin enable ;
12619: ENABLE
// game_speed := 7 ;
12620: LD_ADDR_OWVAR 65
12624: PUSH
12625: LD_INT 7
12627: ST_TO_ADDR
// end ;
12628: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12629: LD_EXP 37
12633: PUSH
12634: LD_EXP 44
12638: AND
12639: IFFALSE 12841
12641: GO 12643
12643: DISABLE
12644: LD_INT 0
12646: PPUSH
12647: PPUSH
12648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12649: LD_ADDR_VAR 0 3
12653: PUSH
12654: LD_INT 81
12656: PUSH
12657: LD_OWVAR 2
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 21
12668: PUSH
12669: LD_INT 1
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PPUSH
12680: CALL_OW 69
12684: ST_TO_ADDR
// if not tmp then
12685: LD_VAR 0 3
12689: NOT
12690: IFFALSE 12694
// exit ;
12692: GO 12841
// if tmp > 5 then
12694: LD_VAR 0 3
12698: PUSH
12699: LD_INT 5
12701: GREATER
12702: IFFALSE 12714
// k := 5 else
12704: LD_ADDR_VAR 0 2
12708: PUSH
12709: LD_INT 5
12711: ST_TO_ADDR
12712: GO 12724
// k := tmp ;
12714: LD_ADDR_VAR 0 2
12718: PUSH
12719: LD_VAR 0 3
12723: ST_TO_ADDR
// for i := 1 to k do
12724: LD_ADDR_VAR 0 1
12728: PUSH
12729: DOUBLE
12730: LD_INT 1
12732: DEC
12733: ST_TO_ADDR
12734: LD_VAR 0 2
12738: PUSH
12739: FOR_TO
12740: IFFALSE 12839
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12742: LD_VAR 0 3
12746: PUSH
12747: LD_VAR 0 1
12751: ARRAY
12752: PPUSH
12753: LD_VAR 0 1
12757: PUSH
12758: LD_INT 4
12760: MOD
12761: PUSH
12762: LD_INT 1
12764: PLUS
12765: PPUSH
12766: CALL_OW 259
12770: PUSH
12771: LD_INT 10
12773: LESS
12774: IFFALSE 12837
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12776: LD_VAR 0 3
12780: PUSH
12781: LD_VAR 0 1
12785: ARRAY
12786: PPUSH
12787: LD_VAR 0 1
12791: PUSH
12792: LD_INT 4
12794: MOD
12795: PUSH
12796: LD_INT 1
12798: PLUS
12799: PPUSH
12800: LD_VAR 0 3
12804: PUSH
12805: LD_VAR 0 1
12809: ARRAY
12810: PPUSH
12811: LD_VAR 0 1
12815: PUSH
12816: LD_INT 4
12818: MOD
12819: PUSH
12820: LD_INT 1
12822: PLUS
12823: PPUSH
12824: CALL_OW 259
12828: PUSH
12829: LD_INT 1
12831: PLUS
12832: PPUSH
12833: CALL_OW 237
12837: GO 12739
12839: POP
12840: POP
// end ;
12841: PPOPN 3
12843: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12844: LD_EXP 37
12848: PUSH
12849: LD_EXP 45
12853: AND
12854: IFFALSE 12874
12856: GO 12858
12858: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12859: LD_INT 4
12861: PPUSH
12862: LD_OWVAR 2
12866: PPUSH
12867: LD_INT 0
12869: PPUSH
12870: CALL_OW 324
12874: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12875: LD_EXP 37
12879: PUSH
12880: LD_EXP 74
12884: AND
12885: IFFALSE 12905
12887: GO 12889
12889: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12890: LD_INT 19
12892: PPUSH
12893: LD_OWVAR 2
12897: PPUSH
12898: LD_INT 0
12900: PPUSH
12901: CALL_OW 324
12905: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12906: LD_EXP 37
12910: PUSH
12911: LD_EXP 46
12915: AND
12916: IFFALSE 13018
12918: GO 12920
12920: DISABLE
12921: LD_INT 0
12923: PPUSH
12924: PPUSH
// begin enable ;
12925: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12926: LD_ADDR_VAR 0 2
12930: PUSH
12931: LD_INT 22
12933: PUSH
12934: LD_OWVAR 2
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 2
12945: PUSH
12946: LD_INT 34
12948: PUSH
12949: LD_INT 11
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 34
12958: PUSH
12959: LD_INT 30
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PPUSH
12975: CALL_OW 69
12979: ST_TO_ADDR
// if not tmp then
12980: LD_VAR 0 2
12984: NOT
12985: IFFALSE 12989
// exit ;
12987: GO 13018
// for i in tmp do
12989: LD_ADDR_VAR 0 1
12993: PUSH
12994: LD_VAR 0 2
12998: PUSH
12999: FOR_IN
13000: IFFALSE 13016
// begin SetLives ( i , 0 ) ;
13002: LD_VAR 0 1
13006: PPUSH
13007: LD_INT 0
13009: PPUSH
13010: CALL_OW 234
// end ;
13014: GO 12999
13016: POP
13017: POP
// end ;
13018: PPOPN 2
13020: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13021: LD_EXP 37
13025: PUSH
13026: LD_EXP 47
13030: AND
13031: IFFALSE 13051
13033: GO 13035
13035: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13036: LD_INT 32
13038: PPUSH
13039: LD_OWVAR 2
13043: PPUSH
13044: LD_INT 0
13046: PPUSH
13047: CALL_OW 324
13051: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13052: LD_EXP 37
13056: PUSH
13057: LD_EXP 48
13061: AND
13062: IFFALSE 13243
13064: GO 13066
13066: DISABLE
13067: LD_INT 0
13069: PPUSH
13070: PPUSH
13071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13072: LD_ADDR_VAR 0 2
13076: PUSH
13077: LD_INT 22
13079: PUSH
13080: LD_OWVAR 2
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 33
13091: PUSH
13092: LD_INT 3
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PPUSH
13103: CALL_OW 69
13107: ST_TO_ADDR
// if not tmp then
13108: LD_VAR 0 2
13112: NOT
13113: IFFALSE 13117
// exit ;
13115: GO 13243
// side := 0 ;
13117: LD_ADDR_VAR 0 3
13121: PUSH
13122: LD_INT 0
13124: ST_TO_ADDR
// for i := 1 to 8 do
13125: LD_ADDR_VAR 0 1
13129: PUSH
13130: DOUBLE
13131: LD_INT 1
13133: DEC
13134: ST_TO_ADDR
13135: LD_INT 8
13137: PUSH
13138: FOR_TO
13139: IFFALSE 13187
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13141: LD_OWVAR 2
13145: PUSH
13146: LD_VAR 0 1
13150: NONEQUAL
13151: PUSH
13152: LD_OWVAR 2
13156: PPUSH
13157: LD_VAR 0 1
13161: PPUSH
13162: CALL_OW 81
13166: PUSH
13167: LD_INT 2
13169: EQUAL
13170: AND
13171: IFFALSE 13185
// begin side := i ;
13173: LD_ADDR_VAR 0 3
13177: PUSH
13178: LD_VAR 0 1
13182: ST_TO_ADDR
// break ;
13183: GO 13187
// end ;
13185: GO 13138
13187: POP
13188: POP
// if not side then
13189: LD_VAR 0 3
13193: NOT
13194: IFFALSE 13198
// exit ;
13196: GO 13243
// for i := 1 to tmp do
13198: LD_ADDR_VAR 0 1
13202: PUSH
13203: DOUBLE
13204: LD_INT 1
13206: DEC
13207: ST_TO_ADDR
13208: LD_VAR 0 2
13212: PUSH
13213: FOR_TO
13214: IFFALSE 13241
// if Prob ( 60 ) then
13216: LD_INT 60
13218: PPUSH
13219: CALL_OW 13
13223: IFFALSE 13239
// SetSide ( i , side ) ;
13225: LD_VAR 0 1
13229: PPUSH
13230: LD_VAR 0 3
13234: PPUSH
13235: CALL_OW 235
13239: GO 13213
13241: POP
13242: POP
// end ;
13243: PPOPN 3
13245: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13246: LD_EXP 37
13250: PUSH
13251: LD_EXP 50
13255: AND
13256: IFFALSE 13375
13258: GO 13260
13260: DISABLE
13261: LD_INT 0
13263: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13264: LD_ADDR_VAR 0 1
13268: PUSH
13269: LD_INT 22
13271: PUSH
13272: LD_OWVAR 2
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: LD_INT 21
13283: PUSH
13284: LD_INT 1
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: LD_INT 3
13293: PUSH
13294: LD_INT 23
13296: PUSH
13297: LD_INT 0
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: LIST
13312: PPUSH
13313: CALL_OW 69
13317: PUSH
13318: FOR_IN
13319: IFFALSE 13373
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13321: LD_VAR 0 1
13325: PPUSH
13326: CALL_OW 257
13330: PUSH
13331: LD_INT 1
13333: PUSH
13334: LD_INT 2
13336: PUSH
13337: LD_INT 3
13339: PUSH
13340: LD_INT 4
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: IN
13349: IFFALSE 13371
// SetClass ( un , rand ( 1 , 4 ) ) ;
13351: LD_VAR 0 1
13355: PPUSH
13356: LD_INT 1
13358: PPUSH
13359: LD_INT 4
13361: PPUSH
13362: CALL_OW 12
13366: PPUSH
13367: CALL_OW 336
13371: GO 13318
13373: POP
13374: POP
// end ;
13375: PPOPN 1
13377: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13378: LD_EXP 37
13382: PUSH
13383: LD_EXP 49
13387: AND
13388: IFFALSE 13467
13390: GO 13392
13392: DISABLE
13393: LD_INT 0
13395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13396: LD_ADDR_VAR 0 1
13400: PUSH
13401: LD_INT 22
13403: PUSH
13404: LD_OWVAR 2
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 21
13415: PUSH
13416: LD_INT 3
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PPUSH
13427: CALL_OW 69
13431: ST_TO_ADDR
// if not tmp then
13432: LD_VAR 0 1
13436: NOT
13437: IFFALSE 13441
// exit ;
13439: GO 13467
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13441: LD_VAR 0 1
13445: PUSH
13446: LD_INT 1
13448: PPUSH
13449: LD_VAR 0 1
13453: PPUSH
13454: CALL_OW 12
13458: ARRAY
13459: PPUSH
13460: LD_INT 100
13462: PPUSH
13463: CALL_OW 234
// end ;
13467: PPOPN 1
13469: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13470: LD_EXP 37
13474: PUSH
13475: LD_EXP 51
13479: AND
13480: IFFALSE 13578
13482: GO 13484
13484: DISABLE
13485: LD_INT 0
13487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13488: LD_ADDR_VAR 0 1
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_OWVAR 2
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 21
13507: PUSH
13508: LD_INT 1
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PPUSH
13519: CALL_OW 69
13523: ST_TO_ADDR
// if not tmp then
13524: LD_VAR 0 1
13528: NOT
13529: IFFALSE 13533
// exit ;
13531: GO 13578
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13533: LD_VAR 0 1
13537: PUSH
13538: LD_INT 1
13540: PPUSH
13541: LD_VAR 0 1
13545: PPUSH
13546: CALL_OW 12
13550: ARRAY
13551: PPUSH
13552: LD_INT 1
13554: PPUSH
13555: LD_INT 4
13557: PPUSH
13558: CALL_OW 12
13562: PPUSH
13563: LD_INT 3000
13565: PPUSH
13566: LD_INT 9000
13568: PPUSH
13569: CALL_OW 12
13573: PPUSH
13574: CALL_OW 492
// end ;
13578: PPOPN 1
13580: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13581: LD_EXP 37
13585: PUSH
13586: LD_EXP 52
13590: AND
13591: IFFALSE 13611
13593: GO 13595
13595: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13596: LD_INT 1
13598: PPUSH
13599: LD_OWVAR 2
13603: PPUSH
13604: LD_INT 0
13606: PPUSH
13607: CALL_OW 324
13611: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13612: LD_EXP 37
13616: PUSH
13617: LD_EXP 53
13621: AND
13622: IFFALSE 13705
13624: GO 13626
13626: DISABLE
13627: LD_INT 0
13629: PPUSH
13630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13631: LD_ADDR_VAR 0 2
13635: PUSH
13636: LD_INT 22
13638: PUSH
13639: LD_OWVAR 2
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: LD_INT 21
13650: PUSH
13651: LD_INT 3
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PPUSH
13662: CALL_OW 69
13666: ST_TO_ADDR
// if not tmp then
13667: LD_VAR 0 2
13671: NOT
13672: IFFALSE 13676
// exit ;
13674: GO 13705
// for i in tmp do
13676: LD_ADDR_VAR 0 1
13680: PUSH
13681: LD_VAR 0 2
13685: PUSH
13686: FOR_IN
13687: IFFALSE 13703
// SetBLevel ( i , 10 ) ;
13689: LD_VAR 0 1
13693: PPUSH
13694: LD_INT 10
13696: PPUSH
13697: CALL_OW 241
13701: GO 13686
13703: POP
13704: POP
// end ;
13705: PPOPN 2
13707: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13708: LD_EXP 37
13712: PUSH
13713: LD_EXP 54
13717: AND
13718: IFFALSE 13829
13720: GO 13722
13722: DISABLE
13723: LD_INT 0
13725: PPUSH
13726: PPUSH
13727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13728: LD_ADDR_VAR 0 3
13732: PUSH
13733: LD_INT 22
13735: PUSH
13736: LD_OWVAR 2
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: LD_INT 25
13747: PUSH
13748: LD_INT 1
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PPUSH
13759: CALL_OW 69
13763: ST_TO_ADDR
// if not tmp then
13764: LD_VAR 0 3
13768: NOT
13769: IFFALSE 13773
// exit ;
13771: GO 13829
// un := tmp [ rand ( 1 , tmp ) ] ;
13773: LD_ADDR_VAR 0 2
13777: PUSH
13778: LD_VAR 0 3
13782: PUSH
13783: LD_INT 1
13785: PPUSH
13786: LD_VAR 0 3
13790: PPUSH
13791: CALL_OW 12
13795: ARRAY
13796: ST_TO_ADDR
// if Crawls ( un ) then
13797: LD_VAR 0 2
13801: PPUSH
13802: CALL_OW 318
13806: IFFALSE 13817
// ComWalk ( un ) ;
13808: LD_VAR 0 2
13812: PPUSH
13813: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13817: LD_VAR 0 2
13821: PPUSH
13822: LD_INT 5
13824: PPUSH
13825: CALL_OW 336
// end ;
13829: PPOPN 3
13831: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13832: LD_EXP 37
13836: PUSH
13837: LD_EXP 55
13841: AND
13842: PUSH
13843: LD_OWVAR 67
13847: PUSH
13848: LD_INT 3
13850: LESS
13851: AND
13852: IFFALSE 13871
13854: GO 13856
13856: DISABLE
// Difficulty := Difficulty + 1 ;
13857: LD_ADDR_OWVAR 67
13861: PUSH
13862: LD_OWVAR 67
13866: PUSH
13867: LD_INT 1
13869: PLUS
13870: ST_TO_ADDR
13871: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13872: LD_EXP 37
13876: PUSH
13877: LD_EXP 56
13881: AND
13882: IFFALSE 13985
13884: GO 13886
13886: DISABLE
13887: LD_INT 0
13889: PPUSH
// begin for i := 1 to 5 do
13890: LD_ADDR_VAR 0 1
13894: PUSH
13895: DOUBLE
13896: LD_INT 1
13898: DEC
13899: ST_TO_ADDR
13900: LD_INT 5
13902: PUSH
13903: FOR_TO
13904: IFFALSE 13983
// begin uc_nation := nation_nature ;
13906: LD_ADDR_OWVAR 21
13910: PUSH
13911: LD_INT 0
13913: ST_TO_ADDR
// uc_side := 0 ;
13914: LD_ADDR_OWVAR 20
13918: PUSH
13919: LD_INT 0
13921: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13922: LD_ADDR_OWVAR 29
13926: PUSH
13927: LD_INT 12
13929: PUSH
13930: LD_INT 12
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: ST_TO_ADDR
// hc_agressivity := 20 ;
13937: LD_ADDR_OWVAR 35
13941: PUSH
13942: LD_INT 20
13944: ST_TO_ADDR
// hc_class := class_tiger ;
13945: LD_ADDR_OWVAR 28
13949: PUSH
13950: LD_INT 14
13952: ST_TO_ADDR
// hc_gallery :=  ;
13953: LD_ADDR_OWVAR 33
13957: PUSH
13958: LD_STRING 
13960: ST_TO_ADDR
// hc_name :=  ;
13961: LD_ADDR_OWVAR 26
13965: PUSH
13966: LD_STRING 
13968: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13969: CALL_OW 44
13973: PPUSH
13974: LD_INT 0
13976: PPUSH
13977: CALL_OW 51
// end ;
13981: GO 13903
13983: POP
13984: POP
// end ;
13985: PPOPN 1
13987: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13988: LD_EXP 37
13992: PUSH
13993: LD_EXP 57
13997: AND
13998: IFFALSE 14007
14000: GO 14002
14002: DISABLE
// StreamSibBomb ;
14003: CALL 14008 0 0
14007: END
// export function StreamSibBomb ; var i , x , y ; begin
14008: LD_INT 0
14010: PPUSH
14011: PPUSH
14012: PPUSH
14013: PPUSH
// result := false ;
14014: LD_ADDR_VAR 0 1
14018: PUSH
14019: LD_INT 0
14021: ST_TO_ADDR
// for i := 1 to 16 do
14022: LD_ADDR_VAR 0 2
14026: PUSH
14027: DOUBLE
14028: LD_INT 1
14030: DEC
14031: ST_TO_ADDR
14032: LD_INT 16
14034: PUSH
14035: FOR_TO
14036: IFFALSE 14235
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14038: LD_ADDR_VAR 0 3
14042: PUSH
14043: LD_INT 10
14045: PUSH
14046: LD_INT 20
14048: PUSH
14049: LD_INT 30
14051: PUSH
14052: LD_INT 40
14054: PUSH
14055: LD_INT 50
14057: PUSH
14058: LD_INT 60
14060: PUSH
14061: LD_INT 70
14063: PUSH
14064: LD_INT 80
14066: PUSH
14067: LD_INT 90
14069: PUSH
14070: LD_INT 100
14072: PUSH
14073: LD_INT 110
14075: PUSH
14076: LD_INT 120
14078: PUSH
14079: LD_INT 130
14081: PUSH
14082: LD_INT 140
14084: PUSH
14085: LD_INT 150
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: PUSH
14105: LD_INT 1
14107: PPUSH
14108: LD_INT 15
14110: PPUSH
14111: CALL_OW 12
14115: ARRAY
14116: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14117: LD_ADDR_VAR 0 4
14121: PUSH
14122: LD_INT 10
14124: PUSH
14125: LD_INT 20
14127: PUSH
14128: LD_INT 30
14130: PUSH
14131: LD_INT 40
14133: PUSH
14134: LD_INT 50
14136: PUSH
14137: LD_INT 60
14139: PUSH
14140: LD_INT 70
14142: PUSH
14143: LD_INT 80
14145: PUSH
14146: LD_INT 90
14148: PUSH
14149: LD_INT 100
14151: PUSH
14152: LD_INT 110
14154: PUSH
14155: LD_INT 120
14157: PUSH
14158: LD_INT 130
14160: PUSH
14161: LD_INT 140
14163: PUSH
14164: LD_INT 150
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: PUSH
14184: LD_INT 1
14186: PPUSH
14187: LD_INT 15
14189: PPUSH
14190: CALL_OW 12
14194: ARRAY
14195: ST_TO_ADDR
// if ValidHex ( x , y ) then
14196: LD_VAR 0 3
14200: PPUSH
14201: LD_VAR 0 4
14205: PPUSH
14206: CALL_OW 488
14210: IFFALSE 14233
// begin result := [ x , y ] ;
14212: LD_ADDR_VAR 0 1
14216: PUSH
14217: LD_VAR 0 3
14221: PUSH
14222: LD_VAR 0 4
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: ST_TO_ADDR
// break ;
14231: GO 14235
// end ; end ;
14233: GO 14035
14235: POP
14236: POP
// if result then
14237: LD_VAR 0 1
14241: IFFALSE 14301
// begin ToLua ( playSibBomb() ) ;
14243: LD_STRING playSibBomb()
14245: PPUSH
14246: CALL_OW 559
// wait ( 0 0$14 ) ;
14250: LD_INT 490
14252: PPUSH
14253: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14257: LD_VAR 0 1
14261: PUSH
14262: LD_INT 1
14264: ARRAY
14265: PPUSH
14266: LD_VAR 0 1
14270: PUSH
14271: LD_INT 2
14273: ARRAY
14274: PPUSH
14275: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14279: LD_VAR 0 1
14283: PUSH
14284: LD_INT 1
14286: ARRAY
14287: PPUSH
14288: LD_VAR 0 1
14292: PUSH
14293: LD_INT 2
14295: ARRAY
14296: PPUSH
14297: CALL_OW 429
// end ; end ;
14301: LD_VAR 0 1
14305: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14306: LD_EXP 37
14310: PUSH
14311: LD_EXP 59
14315: AND
14316: IFFALSE 14328
14318: GO 14320
14320: DISABLE
// YouLost (  ) ;
14321: LD_STRING 
14323: PPUSH
14324: CALL_OW 104
14328: END
// every 0 0$1 trigger StreamModeActive and sFog do
14329: LD_EXP 37
14333: PUSH
14334: LD_EXP 58
14338: AND
14339: IFFALSE 14353
14341: GO 14343
14343: DISABLE
// FogOff ( your_side ) ;
14344: LD_OWVAR 2
14348: PPUSH
14349: CALL_OW 344
14353: END
// every 0 0$1 trigger StreamModeActive and sSun do
14354: LD_EXP 37
14358: PUSH
14359: LD_EXP 60
14363: AND
14364: IFFALSE 14392
14366: GO 14368
14368: DISABLE
// begin solar_recharge_percent := 0 ;
14369: LD_ADDR_OWVAR 79
14373: PUSH
14374: LD_INT 0
14376: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14377: LD_INT 10500
14379: PPUSH
14380: CALL_OW 67
// solar_recharge_percent := 100 ;
14384: LD_ADDR_OWVAR 79
14388: PUSH
14389: LD_INT 100
14391: ST_TO_ADDR
// end ;
14392: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14393: LD_EXP 37
14397: PUSH
14398: LD_EXP 61
14402: AND
14403: IFFALSE 14642
14405: GO 14407
14407: DISABLE
14408: LD_INT 0
14410: PPUSH
14411: PPUSH
14412: PPUSH
// begin tmp := [ ] ;
14413: LD_ADDR_VAR 0 3
14417: PUSH
14418: EMPTY
14419: ST_TO_ADDR
// for i := 1 to 6 do
14420: LD_ADDR_VAR 0 1
14424: PUSH
14425: DOUBLE
14426: LD_INT 1
14428: DEC
14429: ST_TO_ADDR
14430: LD_INT 6
14432: PUSH
14433: FOR_TO
14434: IFFALSE 14539
// begin uc_nation := nation_nature ;
14436: LD_ADDR_OWVAR 21
14440: PUSH
14441: LD_INT 0
14443: ST_TO_ADDR
// uc_side := 0 ;
14444: LD_ADDR_OWVAR 20
14448: PUSH
14449: LD_INT 0
14451: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14452: LD_ADDR_OWVAR 29
14456: PUSH
14457: LD_INT 12
14459: PUSH
14460: LD_INT 12
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: ST_TO_ADDR
// hc_agressivity := 20 ;
14467: LD_ADDR_OWVAR 35
14471: PUSH
14472: LD_INT 20
14474: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14475: LD_ADDR_OWVAR 28
14479: PUSH
14480: LD_INT 17
14482: ST_TO_ADDR
// hc_gallery :=  ;
14483: LD_ADDR_OWVAR 33
14487: PUSH
14488: LD_STRING 
14490: ST_TO_ADDR
// hc_name :=  ;
14491: LD_ADDR_OWVAR 26
14495: PUSH
14496: LD_STRING 
14498: ST_TO_ADDR
// un := CreateHuman ;
14499: LD_ADDR_VAR 0 2
14503: PUSH
14504: CALL_OW 44
14508: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14509: LD_VAR 0 2
14513: PPUSH
14514: LD_INT 1
14516: PPUSH
14517: CALL_OW 51
// tmp := tmp ^ un ;
14521: LD_ADDR_VAR 0 3
14525: PUSH
14526: LD_VAR 0 3
14530: PUSH
14531: LD_VAR 0 2
14535: ADD
14536: ST_TO_ADDR
// end ;
14537: GO 14433
14539: POP
14540: POP
// repeat wait ( 0 0$1 ) ;
14541: LD_INT 35
14543: PPUSH
14544: CALL_OW 67
// for un in tmp do
14548: LD_ADDR_VAR 0 2
14552: PUSH
14553: LD_VAR 0 3
14557: PUSH
14558: FOR_IN
14559: IFFALSE 14633
// begin if IsDead ( un ) then
14561: LD_VAR 0 2
14565: PPUSH
14566: CALL_OW 301
14570: IFFALSE 14590
// begin tmp := tmp diff un ;
14572: LD_ADDR_VAR 0 3
14576: PUSH
14577: LD_VAR 0 3
14581: PUSH
14582: LD_VAR 0 2
14586: DIFF
14587: ST_TO_ADDR
// continue ;
14588: GO 14558
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14590: LD_VAR 0 2
14594: PPUSH
14595: LD_INT 3
14597: PUSH
14598: LD_INT 22
14600: PUSH
14601: LD_INT 0
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PPUSH
14612: CALL_OW 69
14616: PPUSH
14617: LD_VAR 0 2
14621: PPUSH
14622: CALL_OW 74
14626: PPUSH
14627: CALL_OW 115
// end ;
14631: GO 14558
14633: POP
14634: POP
// until not tmp ;
14635: LD_VAR 0 3
14639: NOT
14640: IFFALSE 14541
// end ;
14642: PPOPN 3
14644: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14645: LD_EXP 37
14649: PUSH
14650: LD_EXP 62
14654: AND
14655: IFFALSE 14709
14657: GO 14659
14659: DISABLE
// begin ToLua ( displayTroll(); ) ;
14660: LD_STRING displayTroll();
14662: PPUSH
14663: CALL_OW 559
// wait ( 3 3$00 ) ;
14667: LD_INT 6300
14669: PPUSH
14670: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14674: LD_STRING hideTroll();
14676: PPUSH
14677: CALL_OW 559
// wait ( 1 1$00 ) ;
14681: LD_INT 2100
14683: PPUSH
14684: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14688: LD_STRING displayTroll();
14690: PPUSH
14691: CALL_OW 559
// wait ( 1 1$00 ) ;
14695: LD_INT 2100
14697: PPUSH
14698: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14702: LD_STRING hideTroll();
14704: PPUSH
14705: CALL_OW 559
// end ;
14709: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14710: LD_EXP 37
14714: PUSH
14715: LD_EXP 63
14719: AND
14720: IFFALSE 14783
14722: GO 14724
14724: DISABLE
14725: LD_INT 0
14727: PPUSH
// begin p := 0 ;
14728: LD_ADDR_VAR 0 1
14732: PUSH
14733: LD_INT 0
14735: ST_TO_ADDR
// repeat game_speed := 1 ;
14736: LD_ADDR_OWVAR 65
14740: PUSH
14741: LD_INT 1
14743: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14744: LD_INT 35
14746: PPUSH
14747: CALL_OW 67
// p := p + 1 ;
14751: LD_ADDR_VAR 0 1
14755: PUSH
14756: LD_VAR 0 1
14760: PUSH
14761: LD_INT 1
14763: PLUS
14764: ST_TO_ADDR
// until p >= 60 ;
14765: LD_VAR 0 1
14769: PUSH
14770: LD_INT 60
14772: GREATEREQUAL
14773: IFFALSE 14736
// game_speed := 4 ;
14775: LD_ADDR_OWVAR 65
14779: PUSH
14780: LD_INT 4
14782: ST_TO_ADDR
// end ;
14783: PPOPN 1
14785: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14786: LD_EXP 37
14790: PUSH
14791: LD_EXP 64
14795: AND
14796: IFFALSE 14942
14798: GO 14800
14800: DISABLE
14801: LD_INT 0
14803: PPUSH
14804: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14805: LD_ADDR_VAR 0 1
14809: PUSH
14810: LD_INT 22
14812: PUSH
14813: LD_OWVAR 2
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 2
14824: PUSH
14825: LD_INT 30
14827: PUSH
14828: LD_INT 0
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 30
14837: PUSH
14838: LD_INT 1
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: LIST
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PPUSH
14854: CALL_OW 69
14858: ST_TO_ADDR
// if not depot then
14859: LD_VAR 0 1
14863: NOT
14864: IFFALSE 14868
// exit ;
14866: GO 14942
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14868: LD_ADDR_VAR 0 2
14872: PUSH
14873: LD_VAR 0 1
14877: PUSH
14878: LD_INT 1
14880: PPUSH
14881: LD_VAR 0 1
14885: PPUSH
14886: CALL_OW 12
14890: ARRAY
14891: PPUSH
14892: CALL_OW 274
14896: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14897: LD_VAR 0 2
14901: PPUSH
14902: LD_INT 1
14904: PPUSH
14905: LD_INT 0
14907: PPUSH
14908: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14912: LD_VAR 0 2
14916: PPUSH
14917: LD_INT 2
14919: PPUSH
14920: LD_INT 0
14922: PPUSH
14923: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14927: LD_VAR 0 2
14931: PPUSH
14932: LD_INT 3
14934: PPUSH
14935: LD_INT 0
14937: PPUSH
14938: CALL_OW 277
// end ;
14942: PPOPN 2
14944: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14945: LD_EXP 37
14949: PUSH
14950: LD_EXP 65
14954: AND
14955: IFFALSE 15052
14957: GO 14959
14959: DISABLE
14960: LD_INT 0
14962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14963: LD_ADDR_VAR 0 1
14967: PUSH
14968: LD_INT 22
14970: PUSH
14971: LD_OWVAR 2
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 21
14982: PUSH
14983: LD_INT 1
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 3
14992: PUSH
14993: LD_INT 23
14995: PUSH
14996: LD_INT 0
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: PPUSH
15012: CALL_OW 69
15016: ST_TO_ADDR
// if not tmp then
15017: LD_VAR 0 1
15021: NOT
15022: IFFALSE 15026
// exit ;
15024: GO 15052
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15026: LD_VAR 0 1
15030: PUSH
15031: LD_INT 1
15033: PPUSH
15034: LD_VAR 0 1
15038: PPUSH
15039: CALL_OW 12
15043: ARRAY
15044: PPUSH
15045: LD_INT 200
15047: PPUSH
15048: CALL_OW 234
// end ;
15052: PPOPN 1
15054: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15055: LD_EXP 37
15059: PUSH
15060: LD_EXP 66
15064: AND
15065: IFFALSE 15144
15067: GO 15069
15069: DISABLE
15070: LD_INT 0
15072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15073: LD_ADDR_VAR 0 1
15077: PUSH
15078: LD_INT 22
15080: PUSH
15081: LD_OWVAR 2
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 21
15092: PUSH
15093: LD_INT 2
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PPUSH
15104: CALL_OW 69
15108: ST_TO_ADDR
// if not tmp then
15109: LD_VAR 0 1
15113: NOT
15114: IFFALSE 15118
// exit ;
15116: GO 15144
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15118: LD_VAR 0 1
15122: PUSH
15123: LD_INT 1
15125: PPUSH
15126: LD_VAR 0 1
15130: PPUSH
15131: CALL_OW 12
15135: ARRAY
15136: PPUSH
15137: LD_INT 60
15139: PPUSH
15140: CALL_OW 234
// end ;
15144: PPOPN 1
15146: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15147: LD_EXP 37
15151: PUSH
15152: LD_EXP 67
15156: AND
15157: IFFALSE 15256
15159: GO 15161
15161: DISABLE
15162: LD_INT 0
15164: PPUSH
15165: PPUSH
// begin enable ;
15166: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15167: LD_ADDR_VAR 0 1
15171: PUSH
15172: LD_INT 22
15174: PUSH
15175: LD_OWVAR 2
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: LD_INT 61
15186: PUSH
15187: EMPTY
15188: LIST
15189: PUSH
15190: LD_INT 33
15192: PUSH
15193: LD_INT 2
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: LIST
15204: PPUSH
15205: CALL_OW 69
15209: ST_TO_ADDR
// if not tmp then
15210: LD_VAR 0 1
15214: NOT
15215: IFFALSE 15219
// exit ;
15217: GO 15256
// for i in tmp do
15219: LD_ADDR_VAR 0 2
15223: PUSH
15224: LD_VAR 0 1
15228: PUSH
15229: FOR_IN
15230: IFFALSE 15254
// if IsControledBy ( i ) then
15232: LD_VAR 0 2
15236: PPUSH
15237: CALL_OW 312
15241: IFFALSE 15252
// ComUnlink ( i ) ;
15243: LD_VAR 0 2
15247: PPUSH
15248: CALL_OW 136
15252: GO 15229
15254: POP
15255: POP
// end ;
15256: PPOPN 2
15258: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15259: LD_EXP 37
15263: PUSH
15264: LD_EXP 68
15268: AND
15269: IFFALSE 15409
15271: GO 15273
15273: DISABLE
15274: LD_INT 0
15276: PPUSH
15277: PPUSH
// begin ToLua ( displayPowell(); ) ;
15278: LD_STRING displayPowell();
15280: PPUSH
15281: CALL_OW 559
// uc_side := 0 ;
15285: LD_ADDR_OWVAR 20
15289: PUSH
15290: LD_INT 0
15292: ST_TO_ADDR
// uc_nation := 2 ;
15293: LD_ADDR_OWVAR 21
15297: PUSH
15298: LD_INT 2
15300: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15301: LD_ADDR_OWVAR 37
15305: PUSH
15306: LD_INT 14
15308: ST_TO_ADDR
// vc_engine := engine_siberite ;
15309: LD_ADDR_OWVAR 39
15313: PUSH
15314: LD_INT 3
15316: ST_TO_ADDR
// vc_control := control_apeman ;
15317: LD_ADDR_OWVAR 38
15321: PUSH
15322: LD_INT 5
15324: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15325: LD_ADDR_OWVAR 40
15329: PUSH
15330: LD_INT 29
15332: ST_TO_ADDR
// un := CreateVehicle ;
15333: LD_ADDR_VAR 0 2
15337: PUSH
15338: CALL_OW 45
15342: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15343: LD_VAR 0 2
15347: PPUSH
15348: LD_INT 1
15350: PPUSH
15351: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15355: LD_INT 35
15357: PPUSH
15358: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15362: LD_VAR 0 2
15366: PPUSH
15367: LD_INT 22
15369: PUSH
15370: LD_OWVAR 2
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PPUSH
15379: CALL_OW 69
15383: PPUSH
15384: LD_VAR 0 2
15388: PPUSH
15389: CALL_OW 74
15393: PPUSH
15394: CALL_OW 115
// until IsDead ( un ) ;
15398: LD_VAR 0 2
15402: PPUSH
15403: CALL_OW 301
15407: IFFALSE 15355
// end ;
15409: PPOPN 2
15411: END
// every 0 0$1 trigger StreamModeActive and sStu do
15412: LD_EXP 37
15416: PUSH
15417: LD_EXP 76
15421: AND
15422: IFFALSE 15438
15424: GO 15426
15426: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15427: LD_STRING displayStucuk();
15429: PPUSH
15430: CALL_OW 559
// ResetFog ;
15434: CALL_OW 335
// end ;
15438: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15439: LD_EXP 37
15443: PUSH
15444: LD_EXP 69
15448: AND
15449: IFFALSE 15590
15451: GO 15453
15453: DISABLE
15454: LD_INT 0
15456: PPUSH
15457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15458: LD_ADDR_VAR 0 2
15462: PUSH
15463: LD_INT 22
15465: PUSH
15466: LD_OWVAR 2
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 21
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PPUSH
15489: CALL_OW 69
15493: ST_TO_ADDR
// if not tmp then
15494: LD_VAR 0 2
15498: NOT
15499: IFFALSE 15503
// exit ;
15501: GO 15590
// un := tmp [ rand ( 1 , tmp ) ] ;
15503: LD_ADDR_VAR 0 1
15507: PUSH
15508: LD_VAR 0 2
15512: PUSH
15513: LD_INT 1
15515: PPUSH
15516: LD_VAR 0 2
15520: PPUSH
15521: CALL_OW 12
15525: ARRAY
15526: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15527: LD_VAR 0 1
15531: PPUSH
15532: LD_INT 0
15534: PPUSH
15535: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15539: LD_VAR 0 1
15543: PPUSH
15544: LD_OWVAR 3
15548: PUSH
15549: LD_VAR 0 1
15553: DIFF
15554: PPUSH
15555: LD_VAR 0 1
15559: PPUSH
15560: CALL_OW 74
15564: PPUSH
15565: CALL_OW 115
// wait ( 0 0$20 ) ;
15569: LD_INT 700
15571: PPUSH
15572: CALL_OW 67
// SetSide ( un , your_side ) ;
15576: LD_VAR 0 1
15580: PPUSH
15581: LD_OWVAR 2
15585: PPUSH
15586: CALL_OW 235
// end ;
15590: PPOPN 2
15592: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15593: LD_EXP 37
15597: PUSH
15598: LD_EXP 70
15602: AND
15603: IFFALSE 15709
15605: GO 15607
15607: DISABLE
15608: LD_INT 0
15610: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15611: LD_ADDR_VAR 0 1
15615: PUSH
15616: LD_INT 22
15618: PUSH
15619: LD_OWVAR 2
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: LD_INT 2
15630: PUSH
15631: LD_INT 30
15633: PUSH
15634: LD_INT 0
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 30
15643: PUSH
15644: LD_INT 1
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PPUSH
15660: CALL_OW 69
15664: ST_TO_ADDR
// if not depot then
15665: LD_VAR 0 1
15669: NOT
15670: IFFALSE 15674
// exit ;
15672: GO 15709
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15674: LD_VAR 0 1
15678: PUSH
15679: LD_INT 1
15681: ARRAY
15682: PPUSH
15683: CALL_OW 250
15687: PPUSH
15688: LD_VAR 0 1
15692: PUSH
15693: LD_INT 1
15695: ARRAY
15696: PPUSH
15697: CALL_OW 251
15701: PPUSH
15702: LD_INT 70
15704: PPUSH
15705: CALL_OW 495
// end ;
15709: PPOPN 1
15711: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15712: LD_EXP 37
15716: PUSH
15717: LD_EXP 71
15721: AND
15722: IFFALSE 15933
15724: GO 15726
15726: DISABLE
15727: LD_INT 0
15729: PPUSH
15730: PPUSH
15731: PPUSH
15732: PPUSH
15733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15734: LD_ADDR_VAR 0 5
15738: PUSH
15739: LD_INT 22
15741: PUSH
15742: LD_OWVAR 2
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 21
15753: PUSH
15754: LD_INT 1
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PPUSH
15765: CALL_OW 69
15769: ST_TO_ADDR
// if not tmp then
15770: LD_VAR 0 5
15774: NOT
15775: IFFALSE 15779
// exit ;
15777: GO 15933
// for i in tmp do
15779: LD_ADDR_VAR 0 1
15783: PUSH
15784: LD_VAR 0 5
15788: PUSH
15789: FOR_IN
15790: IFFALSE 15931
// begin d := rand ( 0 , 5 ) ;
15792: LD_ADDR_VAR 0 4
15796: PUSH
15797: LD_INT 0
15799: PPUSH
15800: LD_INT 5
15802: PPUSH
15803: CALL_OW 12
15807: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15808: LD_ADDR_VAR 0 2
15812: PUSH
15813: LD_VAR 0 1
15817: PPUSH
15818: CALL_OW 250
15822: PPUSH
15823: LD_VAR 0 4
15827: PPUSH
15828: LD_INT 3
15830: PPUSH
15831: LD_INT 12
15833: PPUSH
15834: CALL_OW 12
15838: PPUSH
15839: CALL_OW 272
15843: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15844: LD_ADDR_VAR 0 3
15848: PUSH
15849: LD_VAR 0 1
15853: PPUSH
15854: CALL_OW 251
15858: PPUSH
15859: LD_VAR 0 4
15863: PPUSH
15864: LD_INT 3
15866: PPUSH
15867: LD_INT 12
15869: PPUSH
15870: CALL_OW 12
15874: PPUSH
15875: CALL_OW 273
15879: ST_TO_ADDR
// if ValidHex ( x , y ) then
15880: LD_VAR 0 2
15884: PPUSH
15885: LD_VAR 0 3
15889: PPUSH
15890: CALL_OW 488
15894: IFFALSE 15929
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_VAR 0 2
15905: PPUSH
15906: LD_VAR 0 3
15910: PPUSH
15911: LD_INT 3
15913: PPUSH
15914: LD_INT 6
15916: PPUSH
15917: CALL_OW 12
15921: PPUSH
15922: LD_INT 1
15924: PPUSH
15925: CALL_OW 483
// end ;
15929: GO 15789
15931: POP
15932: POP
// end ;
15933: PPOPN 5
15935: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15936: LD_EXP 37
15940: PUSH
15941: LD_EXP 72
15945: AND
15946: IFFALSE 16040
15948: GO 15950
15950: DISABLE
15951: LD_INT 0
15953: PPUSH
15954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15955: LD_ADDR_VAR 0 2
15959: PUSH
15960: LD_INT 22
15962: PUSH
15963: LD_OWVAR 2
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 32
15974: PUSH
15975: LD_INT 1
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 21
15984: PUSH
15985: LD_INT 2
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: LIST
15996: PPUSH
15997: CALL_OW 69
16001: ST_TO_ADDR
// if not tmp then
16002: LD_VAR 0 2
16006: NOT
16007: IFFALSE 16011
// exit ;
16009: GO 16040
// for i in tmp do
16011: LD_ADDR_VAR 0 1
16015: PUSH
16016: LD_VAR 0 2
16020: PUSH
16021: FOR_IN
16022: IFFALSE 16038
// SetFuel ( i , 0 ) ;
16024: LD_VAR 0 1
16028: PPUSH
16029: LD_INT 0
16031: PPUSH
16032: CALL_OW 240
16036: GO 16021
16038: POP
16039: POP
// end ;
16040: PPOPN 2
16042: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16043: LD_EXP 37
16047: PUSH
16048: LD_EXP 73
16052: AND
16053: IFFALSE 16119
16055: GO 16057
16057: DISABLE
16058: LD_INT 0
16060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16061: LD_ADDR_VAR 0 1
16065: PUSH
16066: LD_INT 22
16068: PUSH
16069: LD_OWVAR 2
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 30
16080: PUSH
16081: LD_INT 29
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PPUSH
16092: CALL_OW 69
16096: ST_TO_ADDR
// if not tmp then
16097: LD_VAR 0 1
16101: NOT
16102: IFFALSE 16106
// exit ;
16104: GO 16119
// DestroyUnit ( tmp [ 1 ] ) ;
16106: LD_VAR 0 1
16110: PUSH
16111: LD_INT 1
16113: ARRAY
16114: PPUSH
16115: CALL_OW 65
// end ;
16119: PPOPN 1
16121: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16122: LD_EXP 37
16126: PUSH
16127: LD_EXP 75
16131: AND
16132: IFFALSE 16261
16134: GO 16136
16136: DISABLE
16137: LD_INT 0
16139: PPUSH
// begin uc_side := 0 ;
16140: LD_ADDR_OWVAR 20
16144: PUSH
16145: LD_INT 0
16147: ST_TO_ADDR
// uc_nation := nation_arabian ;
16148: LD_ADDR_OWVAR 21
16152: PUSH
16153: LD_INT 2
16155: ST_TO_ADDR
// hc_gallery :=  ;
16156: LD_ADDR_OWVAR 33
16160: PUSH
16161: LD_STRING 
16163: ST_TO_ADDR
// hc_name :=  ;
16164: LD_ADDR_OWVAR 26
16168: PUSH
16169: LD_STRING 
16171: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16172: LD_INT 1
16174: PPUSH
16175: LD_INT 11
16177: PPUSH
16178: LD_INT 10
16180: PPUSH
16181: CALL_OW 380
// un := CreateHuman ;
16185: LD_ADDR_VAR 0 1
16189: PUSH
16190: CALL_OW 44
16194: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16195: LD_VAR 0 1
16199: PPUSH
16200: LD_INT 1
16202: PPUSH
16203: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16207: LD_INT 35
16209: PPUSH
16210: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16214: LD_VAR 0 1
16218: PPUSH
16219: LD_INT 22
16221: PUSH
16222: LD_OWVAR 2
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PPUSH
16231: CALL_OW 69
16235: PPUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 74
16245: PPUSH
16246: CALL_OW 115
// until IsDead ( un ) ;
16250: LD_VAR 0 1
16254: PPUSH
16255: CALL_OW 301
16259: IFFALSE 16207
// end ;
16261: PPOPN 1
16263: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16264: LD_EXP 37
16268: PUSH
16269: LD_EXP 77
16273: AND
16274: IFFALSE 16286
16276: GO 16278
16278: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16279: LD_STRING earthquake(getX(game), 0, 32)
16281: PPUSH
16282: CALL_OW 559
16286: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16287: LD_EXP 37
16291: PUSH
16292: LD_EXP 78
16296: AND
16297: IFFALSE 16388
16299: GO 16301
16301: DISABLE
16302: LD_INT 0
16304: PPUSH
// begin enable ;
16305: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16306: LD_ADDR_VAR 0 1
16310: PUSH
16311: LD_INT 22
16313: PUSH
16314: LD_OWVAR 2
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: PUSH
16323: LD_INT 21
16325: PUSH
16326: LD_INT 2
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 33
16335: PUSH
16336: LD_INT 3
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: LIST
16347: PPUSH
16348: CALL_OW 69
16352: ST_TO_ADDR
// if not tmp then
16353: LD_VAR 0 1
16357: NOT
16358: IFFALSE 16362
// exit ;
16360: GO 16388
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16362: LD_VAR 0 1
16366: PUSH
16367: LD_INT 1
16369: PPUSH
16370: LD_VAR 0 1
16374: PPUSH
16375: CALL_OW 12
16379: ARRAY
16380: PPUSH
16381: LD_INT 1
16383: PPUSH
16384: CALL_OW 234
// end ;
16388: PPOPN 1
16390: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16391: LD_EXP 37
16395: PUSH
16396: LD_EXP 79
16400: AND
16401: IFFALSE 16542
16403: GO 16405
16405: DISABLE
16406: LD_INT 0
16408: PPUSH
16409: PPUSH
16410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16411: LD_ADDR_VAR 0 3
16415: PUSH
16416: LD_INT 22
16418: PUSH
16419: LD_OWVAR 2
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 25
16430: PUSH
16431: LD_INT 1
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PPUSH
16442: CALL_OW 69
16446: ST_TO_ADDR
// if not tmp then
16447: LD_VAR 0 3
16451: NOT
16452: IFFALSE 16456
// exit ;
16454: GO 16542
// un := tmp [ rand ( 1 , tmp ) ] ;
16456: LD_ADDR_VAR 0 2
16460: PUSH
16461: LD_VAR 0 3
16465: PUSH
16466: LD_INT 1
16468: PPUSH
16469: LD_VAR 0 3
16473: PPUSH
16474: CALL_OW 12
16478: ARRAY
16479: ST_TO_ADDR
// if Crawls ( un ) then
16480: LD_VAR 0 2
16484: PPUSH
16485: CALL_OW 318
16489: IFFALSE 16500
// ComWalk ( un ) ;
16491: LD_VAR 0 2
16495: PPUSH
16496: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16500: LD_VAR 0 2
16504: PPUSH
16505: LD_INT 9
16507: PPUSH
16508: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16512: LD_INT 28
16514: PPUSH
16515: LD_OWVAR 2
16519: PPUSH
16520: LD_INT 2
16522: PPUSH
16523: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16527: LD_INT 29
16529: PPUSH
16530: LD_OWVAR 2
16534: PPUSH
16535: LD_INT 2
16537: PPUSH
16538: CALL_OW 322
// end ;
16542: PPOPN 3
16544: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16545: LD_EXP 37
16549: PUSH
16550: LD_EXP 80
16554: AND
16555: IFFALSE 16666
16557: GO 16559
16559: DISABLE
16560: LD_INT 0
16562: PPUSH
16563: PPUSH
16564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16565: LD_ADDR_VAR 0 3
16569: PUSH
16570: LD_INT 22
16572: PUSH
16573: LD_OWVAR 2
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 25
16584: PUSH
16585: LD_INT 1
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PPUSH
16596: CALL_OW 69
16600: ST_TO_ADDR
// if not tmp then
16601: LD_VAR 0 3
16605: NOT
16606: IFFALSE 16610
// exit ;
16608: GO 16666
// un := tmp [ rand ( 1 , tmp ) ] ;
16610: LD_ADDR_VAR 0 2
16614: PUSH
16615: LD_VAR 0 3
16619: PUSH
16620: LD_INT 1
16622: PPUSH
16623: LD_VAR 0 3
16627: PPUSH
16628: CALL_OW 12
16632: ARRAY
16633: ST_TO_ADDR
// if Crawls ( un ) then
16634: LD_VAR 0 2
16638: PPUSH
16639: CALL_OW 318
16643: IFFALSE 16654
// ComWalk ( un ) ;
16645: LD_VAR 0 2
16649: PPUSH
16650: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16654: LD_VAR 0 2
16658: PPUSH
16659: LD_INT 8
16661: PPUSH
16662: CALL_OW 336
// end ;
16666: PPOPN 3
16668: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16669: LD_EXP 37
16673: PUSH
16674: LD_EXP 81
16678: AND
16679: IFFALSE 16823
16681: GO 16683
16683: DISABLE
16684: LD_INT 0
16686: PPUSH
16687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16688: LD_ADDR_VAR 0 2
16692: PUSH
16693: LD_INT 22
16695: PUSH
16696: LD_OWVAR 2
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 21
16707: PUSH
16708: LD_INT 2
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: LD_INT 34
16720: PUSH
16721: LD_INT 12
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 34
16730: PUSH
16731: LD_INT 51
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 34
16740: PUSH
16741: LD_INT 32
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: LIST
16758: PPUSH
16759: CALL_OW 69
16763: ST_TO_ADDR
// if not tmp then
16764: LD_VAR 0 2
16768: NOT
16769: IFFALSE 16773
// exit ;
16771: GO 16823
// for i in tmp do
16773: LD_ADDR_VAR 0 1
16777: PUSH
16778: LD_VAR 0 2
16782: PUSH
16783: FOR_IN
16784: IFFALSE 16821
// if GetCargo ( i , mat_artifact ) = 0 then
16786: LD_VAR 0 1
16790: PPUSH
16791: LD_INT 4
16793: PPUSH
16794: CALL_OW 289
16798: PUSH
16799: LD_INT 0
16801: EQUAL
16802: IFFALSE 16819
// SetCargo ( i , mat_siberit , 100 ) ;
16804: LD_VAR 0 1
16808: PPUSH
16809: LD_INT 3
16811: PPUSH
16812: LD_INT 100
16814: PPUSH
16815: CALL_OW 290
16819: GO 16783
16821: POP
16822: POP
// end ;
16823: PPOPN 2
16825: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16826: LD_EXP 37
16830: PUSH
16831: LD_EXP 82
16835: AND
16836: IFFALSE 17019
16838: GO 16840
16840: DISABLE
16841: LD_INT 0
16843: PPUSH
16844: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16845: LD_ADDR_VAR 0 2
16849: PUSH
16850: LD_INT 22
16852: PUSH
16853: LD_OWVAR 2
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PPUSH
16862: CALL_OW 69
16866: ST_TO_ADDR
// if not tmp then
16867: LD_VAR 0 2
16871: NOT
16872: IFFALSE 16876
// exit ;
16874: GO 17019
// for i := 1 to 2 do
16876: LD_ADDR_VAR 0 1
16880: PUSH
16881: DOUBLE
16882: LD_INT 1
16884: DEC
16885: ST_TO_ADDR
16886: LD_INT 2
16888: PUSH
16889: FOR_TO
16890: IFFALSE 17017
// begin uc_side := your_side ;
16892: LD_ADDR_OWVAR 20
16896: PUSH
16897: LD_OWVAR 2
16901: ST_TO_ADDR
// uc_nation := nation_american ;
16902: LD_ADDR_OWVAR 21
16906: PUSH
16907: LD_INT 1
16909: ST_TO_ADDR
// vc_chassis := us_morphling ;
16910: LD_ADDR_OWVAR 37
16914: PUSH
16915: LD_INT 5
16917: ST_TO_ADDR
// vc_engine := engine_siberite ;
16918: LD_ADDR_OWVAR 39
16922: PUSH
16923: LD_INT 3
16925: ST_TO_ADDR
// vc_control := control_computer ;
16926: LD_ADDR_OWVAR 38
16930: PUSH
16931: LD_INT 3
16933: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16934: LD_ADDR_OWVAR 40
16938: PUSH
16939: LD_INT 10
16941: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16942: LD_VAR 0 2
16946: PUSH
16947: LD_INT 1
16949: ARRAY
16950: PPUSH
16951: CALL_OW 310
16955: NOT
16956: IFFALSE 17003
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16958: CALL_OW 45
16962: PPUSH
16963: LD_VAR 0 2
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PPUSH
16972: CALL_OW 250
16976: PPUSH
16977: LD_VAR 0 2
16981: PUSH
16982: LD_INT 1
16984: ARRAY
16985: PPUSH
16986: CALL_OW 251
16990: PPUSH
16991: LD_INT 12
16993: PPUSH
16994: LD_INT 1
16996: PPUSH
16997: CALL_OW 50
17001: GO 17015
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17003: CALL_OW 45
17007: PPUSH
17008: LD_INT 1
17010: PPUSH
17011: CALL_OW 51
// end ;
17015: GO 16889
17017: POP
17018: POP
// end ;
17019: PPOPN 2
17021: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17022: LD_EXP 37
17026: PUSH
17027: LD_EXP 83
17031: AND
17032: IFFALSE 17254
17034: GO 17036
17036: DISABLE
17037: LD_INT 0
17039: PPUSH
17040: PPUSH
17041: PPUSH
17042: PPUSH
17043: PPUSH
17044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17045: LD_ADDR_VAR 0 6
17049: PUSH
17050: LD_INT 22
17052: PUSH
17053: LD_OWVAR 2
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 21
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 3
17074: PUSH
17075: LD_INT 23
17077: PUSH
17078: LD_INT 0
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: PPUSH
17094: CALL_OW 69
17098: ST_TO_ADDR
// if not tmp then
17099: LD_VAR 0 6
17103: NOT
17104: IFFALSE 17108
// exit ;
17106: GO 17254
// s1 := rand ( 1 , 4 ) ;
17108: LD_ADDR_VAR 0 2
17112: PUSH
17113: LD_INT 1
17115: PPUSH
17116: LD_INT 4
17118: PPUSH
17119: CALL_OW 12
17123: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17124: LD_ADDR_VAR 0 4
17128: PUSH
17129: LD_VAR 0 6
17133: PUSH
17134: LD_INT 1
17136: ARRAY
17137: PPUSH
17138: LD_VAR 0 2
17142: PPUSH
17143: CALL_OW 259
17147: ST_TO_ADDR
// if s1 = 1 then
17148: LD_VAR 0 2
17152: PUSH
17153: LD_INT 1
17155: EQUAL
17156: IFFALSE 17176
// s2 := rand ( 2 , 4 ) else
17158: LD_ADDR_VAR 0 3
17162: PUSH
17163: LD_INT 2
17165: PPUSH
17166: LD_INT 4
17168: PPUSH
17169: CALL_OW 12
17173: ST_TO_ADDR
17174: GO 17184
// s2 := 1 ;
17176: LD_ADDR_VAR 0 3
17180: PUSH
17181: LD_INT 1
17183: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17184: LD_ADDR_VAR 0 5
17188: PUSH
17189: LD_VAR 0 6
17193: PUSH
17194: LD_INT 1
17196: ARRAY
17197: PPUSH
17198: LD_VAR 0 3
17202: PPUSH
17203: CALL_OW 259
17207: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17208: LD_VAR 0 6
17212: PUSH
17213: LD_INT 1
17215: ARRAY
17216: PPUSH
17217: LD_VAR 0 2
17221: PPUSH
17222: LD_VAR 0 5
17226: PPUSH
17227: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17231: LD_VAR 0 6
17235: PUSH
17236: LD_INT 1
17238: ARRAY
17239: PPUSH
17240: LD_VAR 0 3
17244: PPUSH
17245: LD_VAR 0 4
17249: PPUSH
17250: CALL_OW 237
// end ;
17254: PPOPN 6
17256: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17257: LD_EXP 37
17261: PUSH
17262: LD_EXP 84
17266: AND
17267: IFFALSE 17346
17269: GO 17271
17271: DISABLE
17272: LD_INT 0
17274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17275: LD_ADDR_VAR 0 1
17279: PUSH
17280: LD_INT 22
17282: PUSH
17283: LD_OWVAR 2
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 30
17294: PUSH
17295: LD_INT 3
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PPUSH
17306: CALL_OW 69
17310: ST_TO_ADDR
// if not tmp then
17311: LD_VAR 0 1
17315: NOT
17316: IFFALSE 17320
// exit ;
17318: GO 17346
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17320: LD_VAR 0 1
17324: PUSH
17325: LD_INT 1
17327: PPUSH
17328: LD_VAR 0 1
17332: PPUSH
17333: CALL_OW 12
17337: ARRAY
17338: PPUSH
17339: LD_INT 1
17341: PPUSH
17342: CALL_OW 234
// end ;
17346: PPOPN 1
17348: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17349: LD_EXP 37
17353: PUSH
17354: LD_EXP 85
17358: AND
17359: IFFALSE 17471
17361: GO 17363
17363: DISABLE
17364: LD_INT 0
17366: PPUSH
17367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17368: LD_ADDR_VAR 0 2
17372: PUSH
17373: LD_INT 22
17375: PUSH
17376: LD_OWVAR 2
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 2
17387: PUSH
17388: LD_INT 30
17390: PUSH
17391: LD_INT 27
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PUSH
17398: LD_INT 30
17400: PUSH
17401: LD_INT 26
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 30
17410: PUSH
17411: LD_INT 28
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PPUSH
17428: CALL_OW 69
17432: ST_TO_ADDR
// if not tmp then
17433: LD_VAR 0 2
17437: NOT
17438: IFFALSE 17442
// exit ;
17440: GO 17471
// for i in tmp do
17442: LD_ADDR_VAR 0 1
17446: PUSH
17447: LD_VAR 0 2
17451: PUSH
17452: FOR_IN
17453: IFFALSE 17469
// SetLives ( i , 1 ) ;
17455: LD_VAR 0 1
17459: PPUSH
17460: LD_INT 1
17462: PPUSH
17463: CALL_OW 234
17467: GO 17452
17469: POP
17470: POP
// end ;
17471: PPOPN 2
17473: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17474: LD_EXP 37
17478: PUSH
17479: LD_EXP 86
17483: AND
17484: IFFALSE 17758
17486: GO 17488
17488: DISABLE
17489: LD_INT 0
17491: PPUSH
17492: PPUSH
17493: PPUSH
// begin i := rand ( 1 , 7 ) ;
17494: LD_ADDR_VAR 0 1
17498: PUSH
17499: LD_INT 1
17501: PPUSH
17502: LD_INT 7
17504: PPUSH
17505: CALL_OW 12
17509: ST_TO_ADDR
// case i of 1 :
17510: LD_VAR 0 1
17514: PUSH
17515: LD_INT 1
17517: DOUBLE
17518: EQUAL
17519: IFTRUE 17523
17521: GO 17533
17523: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17524: LD_STRING earthquake(getX(game), 0, 32)
17526: PPUSH
17527: CALL_OW 559
17531: GO 17758
17533: LD_INT 2
17535: DOUBLE
17536: EQUAL
17537: IFTRUE 17541
17539: GO 17555
17541: POP
// begin ToLua ( displayStucuk(); ) ;
17542: LD_STRING displayStucuk();
17544: PPUSH
17545: CALL_OW 559
// ResetFog ;
17549: CALL_OW 335
// end ; 3 :
17553: GO 17758
17555: LD_INT 3
17557: DOUBLE
17558: EQUAL
17559: IFTRUE 17563
17561: GO 17667
17563: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17564: LD_ADDR_VAR 0 2
17568: PUSH
17569: LD_INT 22
17571: PUSH
17572: LD_OWVAR 2
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 25
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PPUSH
17595: CALL_OW 69
17599: ST_TO_ADDR
// if not tmp then
17600: LD_VAR 0 2
17604: NOT
17605: IFFALSE 17609
// exit ;
17607: GO 17758
// un := tmp [ rand ( 1 , tmp ) ] ;
17609: LD_ADDR_VAR 0 3
17613: PUSH
17614: LD_VAR 0 2
17618: PUSH
17619: LD_INT 1
17621: PPUSH
17622: LD_VAR 0 2
17626: PPUSH
17627: CALL_OW 12
17631: ARRAY
17632: ST_TO_ADDR
// if Crawls ( un ) then
17633: LD_VAR 0 3
17637: PPUSH
17638: CALL_OW 318
17642: IFFALSE 17653
// ComWalk ( un ) ;
17644: LD_VAR 0 3
17648: PPUSH
17649: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17653: LD_VAR 0 3
17657: PPUSH
17658: LD_INT 8
17660: PPUSH
17661: CALL_OW 336
// end ; 4 :
17665: GO 17758
17667: LD_INT 4
17669: DOUBLE
17670: EQUAL
17671: IFTRUE 17675
17673: GO 17736
17675: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17676: LD_ADDR_VAR 0 2
17680: PUSH
17681: LD_INT 22
17683: PUSH
17684: LD_OWVAR 2
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 30
17695: PUSH
17696: LD_INT 29
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PPUSH
17707: CALL_OW 69
17711: ST_TO_ADDR
// if not tmp then
17712: LD_VAR 0 2
17716: NOT
17717: IFFALSE 17721
// exit ;
17719: GO 17758
// DestroyUnit ( tmp [ 1 ] ) ;
17721: LD_VAR 0 2
17725: PUSH
17726: LD_INT 1
17728: ARRAY
17729: PPUSH
17730: CALL_OW 65
// end ; 5 .. 7 :
17734: GO 17758
17736: LD_INT 5
17738: DOUBLE
17739: GREATEREQUAL
17740: IFFALSE 17748
17742: LD_INT 7
17744: DOUBLE
17745: LESSEQUAL
17746: IFTRUE 17750
17748: GO 17757
17750: POP
// StreamSibBomb ; end ;
17751: CALL 14008 0 0
17755: GO 17758
17757: POP
// end ;
17758: PPOPN 3
17760: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17761: LD_EXP 37
17765: PUSH
17766: LD_EXP 87
17770: AND
17771: IFFALSE 17927
17773: GO 17775
17775: DISABLE
17776: LD_INT 0
17778: PPUSH
17779: PPUSH
17780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17781: LD_ADDR_VAR 0 2
17785: PUSH
17786: LD_INT 81
17788: PUSH
17789: LD_OWVAR 2
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 2
17800: PUSH
17801: LD_INT 21
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 21
17813: PUSH
17814: LD_INT 2
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: LIST
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PPUSH
17830: CALL_OW 69
17834: ST_TO_ADDR
// if not tmp then
17835: LD_VAR 0 2
17839: NOT
17840: IFFALSE 17844
// exit ;
17842: GO 17927
// p := 0 ;
17844: LD_ADDR_VAR 0 3
17848: PUSH
17849: LD_INT 0
17851: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17852: LD_INT 35
17854: PPUSH
17855: CALL_OW 67
// p := p + 1 ;
17859: LD_ADDR_VAR 0 3
17863: PUSH
17864: LD_VAR 0 3
17868: PUSH
17869: LD_INT 1
17871: PLUS
17872: ST_TO_ADDR
// for i in tmp do
17873: LD_ADDR_VAR 0 1
17877: PUSH
17878: LD_VAR 0 2
17882: PUSH
17883: FOR_IN
17884: IFFALSE 17915
// if GetLives ( i ) < 1000 then
17886: LD_VAR 0 1
17890: PPUSH
17891: CALL_OW 256
17895: PUSH
17896: LD_INT 1000
17898: LESS
17899: IFFALSE 17913
// SetLives ( i , 1000 ) ;
17901: LD_VAR 0 1
17905: PPUSH
17906: LD_INT 1000
17908: PPUSH
17909: CALL_OW 234
17913: GO 17883
17915: POP
17916: POP
// until p > 20 ;
17917: LD_VAR 0 3
17921: PUSH
17922: LD_INT 20
17924: GREATER
17925: IFFALSE 17852
// end ;
17927: PPOPN 3
17929: END
// every 0 0$1 trigger StreamModeActive and sTime do
17930: LD_EXP 37
17934: PUSH
17935: LD_EXP 88
17939: AND
17940: IFFALSE 17975
17942: GO 17944
17944: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17945: LD_INT 28
17947: PPUSH
17948: LD_OWVAR 2
17952: PPUSH
17953: LD_INT 2
17955: PPUSH
17956: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17960: LD_INT 30
17962: PPUSH
17963: LD_OWVAR 2
17967: PPUSH
17968: LD_INT 2
17970: PPUSH
17971: CALL_OW 322
// end ;
17975: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17976: LD_EXP 37
17980: PUSH
17981: LD_EXP 89
17985: AND
17986: IFFALSE 18107
17988: GO 17990
17990: DISABLE
17991: LD_INT 0
17993: PPUSH
17994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17995: LD_ADDR_VAR 0 2
17999: PUSH
18000: LD_INT 22
18002: PUSH
18003: LD_OWVAR 2
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 21
18014: PUSH
18015: LD_INT 1
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 3
18024: PUSH
18025: LD_INT 23
18027: PUSH
18028: LD_INT 0
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: LIST
18043: PPUSH
18044: CALL_OW 69
18048: ST_TO_ADDR
// if not tmp then
18049: LD_VAR 0 2
18053: NOT
18054: IFFALSE 18058
// exit ;
18056: GO 18107
// for i in tmp do
18058: LD_ADDR_VAR 0 1
18062: PUSH
18063: LD_VAR 0 2
18067: PUSH
18068: FOR_IN
18069: IFFALSE 18105
// begin if Crawls ( i ) then
18071: LD_VAR 0 1
18075: PPUSH
18076: CALL_OW 318
18080: IFFALSE 18091
// ComWalk ( i ) ;
18082: LD_VAR 0 1
18086: PPUSH
18087: CALL_OW 138
// SetClass ( i , 2 ) ;
18091: LD_VAR 0 1
18095: PPUSH
18096: LD_INT 2
18098: PPUSH
18099: CALL_OW 336
// end ;
18103: GO 18068
18105: POP
18106: POP
// end ;
18107: PPOPN 2
18109: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18110: LD_EXP 37
18114: PUSH
18115: LD_EXP 90
18119: AND
18120: IFFALSE 18401
18122: GO 18124
18124: DISABLE
18125: LD_INT 0
18127: PPUSH
18128: PPUSH
18129: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18130: LD_OWVAR 2
18134: PPUSH
18135: LD_INT 9
18137: PPUSH
18138: LD_INT 1
18140: PPUSH
18141: LD_INT 1
18143: PPUSH
18144: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18148: LD_INT 9
18150: PPUSH
18151: LD_OWVAR 2
18155: PPUSH
18156: CALL_OW 343
// uc_side := 9 ;
18160: LD_ADDR_OWVAR 20
18164: PUSH
18165: LD_INT 9
18167: ST_TO_ADDR
// uc_nation := 2 ;
18168: LD_ADDR_OWVAR 21
18172: PUSH
18173: LD_INT 2
18175: ST_TO_ADDR
// hc_name := Dark Warrior ;
18176: LD_ADDR_OWVAR 26
18180: PUSH
18181: LD_STRING Dark Warrior
18183: ST_TO_ADDR
// hc_gallery :=  ;
18184: LD_ADDR_OWVAR 33
18188: PUSH
18189: LD_STRING 
18191: ST_TO_ADDR
// hc_noskilllimit := true ;
18192: LD_ADDR_OWVAR 76
18196: PUSH
18197: LD_INT 1
18199: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18200: LD_ADDR_OWVAR 31
18204: PUSH
18205: LD_INT 30
18207: PUSH
18208: LD_INT 30
18210: PUSH
18211: LD_INT 30
18213: PUSH
18214: LD_INT 30
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: ST_TO_ADDR
// un := CreateHuman ;
18223: LD_ADDR_VAR 0 3
18227: PUSH
18228: CALL_OW 44
18232: ST_TO_ADDR
// hc_noskilllimit := false ;
18233: LD_ADDR_OWVAR 76
18237: PUSH
18238: LD_INT 0
18240: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18241: LD_VAR 0 3
18245: PPUSH
18246: LD_INT 1
18248: PPUSH
18249: CALL_OW 51
// p := 0 ;
18253: LD_ADDR_VAR 0 2
18257: PUSH
18258: LD_INT 0
18260: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18261: LD_INT 35
18263: PPUSH
18264: CALL_OW 67
// p := p + 1 ;
18268: LD_ADDR_VAR 0 2
18272: PUSH
18273: LD_VAR 0 2
18277: PUSH
18278: LD_INT 1
18280: PLUS
18281: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18282: LD_VAR 0 3
18286: PPUSH
18287: CALL_OW 256
18291: PUSH
18292: LD_INT 1000
18294: LESS
18295: IFFALSE 18309
// SetLives ( un , 1000 ) ;
18297: LD_VAR 0 3
18301: PPUSH
18302: LD_INT 1000
18304: PPUSH
18305: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18309: LD_VAR 0 3
18313: PPUSH
18314: LD_INT 81
18316: PUSH
18317: LD_OWVAR 2
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 91
18328: PUSH
18329: LD_VAR 0 3
18333: PUSH
18334: LD_INT 30
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: LIST
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PPUSH
18346: CALL_OW 69
18350: PPUSH
18351: LD_VAR 0 3
18355: PPUSH
18356: CALL_OW 74
18360: PPUSH
18361: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18365: LD_VAR 0 2
18369: PUSH
18370: LD_INT 60
18372: GREATER
18373: PUSH
18374: LD_VAR 0 3
18378: PPUSH
18379: CALL_OW 301
18383: OR
18384: IFFALSE 18261
// if un then
18386: LD_VAR 0 3
18390: IFFALSE 18401
// RemoveUnit ( un ) ;
18392: LD_VAR 0 3
18396: PPUSH
18397: CALL_OW 64
// end ;
18401: PPOPN 3
18403: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18404: LD_INT 0
18406: PPUSH
// case cmd of 301 :
18407: LD_VAR 0 1
18411: PUSH
18412: LD_INT 301
18414: DOUBLE
18415: EQUAL
18416: IFTRUE 18420
18418: GO 18452
18420: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18421: LD_VAR 0 6
18425: PPUSH
18426: LD_VAR 0 7
18430: PPUSH
18431: LD_VAR 0 8
18435: PPUSH
18436: LD_VAR 0 4
18440: PPUSH
18441: LD_VAR 0 5
18445: PPUSH
18446: CALL 19653 0 5
18450: GO 18573
18452: LD_INT 302
18454: DOUBLE
18455: EQUAL
18456: IFTRUE 18460
18458: GO 18497
18460: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18461: LD_VAR 0 6
18465: PPUSH
18466: LD_VAR 0 7
18470: PPUSH
18471: LD_VAR 0 8
18475: PPUSH
18476: LD_VAR 0 9
18480: PPUSH
18481: LD_VAR 0 4
18485: PPUSH
18486: LD_VAR 0 5
18490: PPUSH
18491: CALL 19744 0 6
18495: GO 18573
18497: LD_INT 303
18499: DOUBLE
18500: EQUAL
18501: IFTRUE 18505
18503: GO 18542
18505: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18506: LD_VAR 0 6
18510: PPUSH
18511: LD_VAR 0 7
18515: PPUSH
18516: LD_VAR 0 8
18520: PPUSH
18521: LD_VAR 0 9
18525: PPUSH
18526: LD_VAR 0 4
18530: PPUSH
18531: LD_VAR 0 5
18535: PPUSH
18536: CALL 18578 0 6
18540: GO 18573
18542: LD_INT 304
18544: DOUBLE
18545: EQUAL
18546: IFTRUE 18550
18548: GO 18572
18550: POP
// hHackTeleport ( unit , x , y ) ; end ;
18551: LD_VAR 0 2
18555: PPUSH
18556: LD_VAR 0 4
18560: PPUSH
18561: LD_VAR 0 5
18565: PPUSH
18566: CALL 20337 0 3
18570: GO 18573
18572: POP
// end ;
18573: LD_VAR 0 12
18577: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18578: LD_INT 0
18580: PPUSH
18581: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18582: LD_VAR 0 1
18586: PUSH
18587: LD_INT 1
18589: LESS
18590: PUSH
18591: LD_VAR 0 1
18595: PUSH
18596: LD_INT 3
18598: GREATER
18599: OR
18600: PUSH
18601: LD_VAR 0 5
18605: PPUSH
18606: LD_VAR 0 6
18610: PPUSH
18611: CALL_OW 428
18615: OR
18616: IFFALSE 18620
// exit ;
18618: GO 19340
// uc_side := your_side ;
18620: LD_ADDR_OWVAR 20
18624: PUSH
18625: LD_OWVAR 2
18629: ST_TO_ADDR
// uc_nation := nation ;
18630: LD_ADDR_OWVAR 21
18634: PUSH
18635: LD_VAR 0 1
18639: ST_TO_ADDR
// bc_level = 1 ;
18640: LD_ADDR_OWVAR 43
18644: PUSH
18645: LD_INT 1
18647: ST_TO_ADDR
// case btype of 1 :
18648: LD_VAR 0 2
18652: PUSH
18653: LD_INT 1
18655: DOUBLE
18656: EQUAL
18657: IFTRUE 18661
18659: GO 18672
18661: POP
// bc_type := b_depot ; 2 :
18662: LD_ADDR_OWVAR 42
18666: PUSH
18667: LD_INT 0
18669: ST_TO_ADDR
18670: GO 19284
18672: LD_INT 2
18674: DOUBLE
18675: EQUAL
18676: IFTRUE 18680
18678: GO 18691
18680: POP
// bc_type := b_warehouse ; 3 :
18681: LD_ADDR_OWVAR 42
18685: PUSH
18686: LD_INT 1
18688: ST_TO_ADDR
18689: GO 19284
18691: LD_INT 3
18693: DOUBLE
18694: EQUAL
18695: IFTRUE 18699
18697: GO 18710
18699: POP
// bc_type := b_lab ; 4 .. 9 :
18700: LD_ADDR_OWVAR 42
18704: PUSH
18705: LD_INT 6
18707: ST_TO_ADDR
18708: GO 19284
18710: LD_INT 4
18712: DOUBLE
18713: GREATEREQUAL
18714: IFFALSE 18722
18716: LD_INT 9
18718: DOUBLE
18719: LESSEQUAL
18720: IFTRUE 18724
18722: GO 18776
18724: POP
// begin bc_type := b_lab_half ;
18725: LD_ADDR_OWVAR 42
18729: PUSH
18730: LD_INT 7
18732: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18733: LD_ADDR_OWVAR 44
18737: PUSH
18738: LD_INT 10
18740: PUSH
18741: LD_INT 11
18743: PUSH
18744: LD_INT 12
18746: PUSH
18747: LD_INT 15
18749: PUSH
18750: LD_INT 14
18752: PUSH
18753: LD_INT 13
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: PUSH
18764: LD_VAR 0 2
18768: PUSH
18769: LD_INT 3
18771: MINUS
18772: ARRAY
18773: ST_TO_ADDR
// end ; 10 .. 13 :
18774: GO 19284
18776: LD_INT 10
18778: DOUBLE
18779: GREATEREQUAL
18780: IFFALSE 18788
18782: LD_INT 13
18784: DOUBLE
18785: LESSEQUAL
18786: IFTRUE 18790
18788: GO 18867
18790: POP
// begin bc_type := b_lab_full ;
18791: LD_ADDR_OWVAR 42
18795: PUSH
18796: LD_INT 8
18798: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18799: LD_ADDR_OWVAR 44
18803: PUSH
18804: LD_INT 10
18806: PUSH
18807: LD_INT 12
18809: PUSH
18810: LD_INT 14
18812: PUSH
18813: LD_INT 13
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: PUSH
18822: LD_VAR 0 2
18826: PUSH
18827: LD_INT 9
18829: MINUS
18830: ARRAY
18831: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18832: LD_ADDR_OWVAR 45
18836: PUSH
18837: LD_INT 11
18839: PUSH
18840: LD_INT 15
18842: PUSH
18843: LD_INT 12
18845: PUSH
18846: LD_INT 15
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: PUSH
18855: LD_VAR 0 2
18859: PUSH
18860: LD_INT 9
18862: MINUS
18863: ARRAY
18864: ST_TO_ADDR
// end ; 14 :
18865: GO 19284
18867: LD_INT 14
18869: DOUBLE
18870: EQUAL
18871: IFTRUE 18875
18873: GO 18886
18875: POP
// bc_type := b_workshop ; 15 :
18876: LD_ADDR_OWVAR 42
18880: PUSH
18881: LD_INT 2
18883: ST_TO_ADDR
18884: GO 19284
18886: LD_INT 15
18888: DOUBLE
18889: EQUAL
18890: IFTRUE 18894
18892: GO 18905
18894: POP
// bc_type := b_factory ; 16 :
18895: LD_ADDR_OWVAR 42
18899: PUSH
18900: LD_INT 3
18902: ST_TO_ADDR
18903: GO 19284
18905: LD_INT 16
18907: DOUBLE
18908: EQUAL
18909: IFTRUE 18913
18911: GO 18924
18913: POP
// bc_type := b_ext_gun ; 17 :
18914: LD_ADDR_OWVAR 42
18918: PUSH
18919: LD_INT 17
18921: ST_TO_ADDR
18922: GO 19284
18924: LD_INT 17
18926: DOUBLE
18927: EQUAL
18928: IFTRUE 18932
18930: GO 18960
18932: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18933: LD_ADDR_OWVAR 42
18937: PUSH
18938: LD_INT 19
18940: PUSH
18941: LD_INT 23
18943: PUSH
18944: LD_INT 19
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: LIST
18951: PUSH
18952: LD_VAR 0 1
18956: ARRAY
18957: ST_TO_ADDR
18958: GO 19284
18960: LD_INT 18
18962: DOUBLE
18963: EQUAL
18964: IFTRUE 18968
18966: GO 18979
18968: POP
// bc_type := b_ext_radar ; 19 :
18969: LD_ADDR_OWVAR 42
18973: PUSH
18974: LD_INT 20
18976: ST_TO_ADDR
18977: GO 19284
18979: LD_INT 19
18981: DOUBLE
18982: EQUAL
18983: IFTRUE 18987
18985: GO 18998
18987: POP
// bc_type := b_ext_radio ; 20 :
18988: LD_ADDR_OWVAR 42
18992: PUSH
18993: LD_INT 22
18995: ST_TO_ADDR
18996: GO 19284
18998: LD_INT 20
19000: DOUBLE
19001: EQUAL
19002: IFTRUE 19006
19004: GO 19017
19006: POP
// bc_type := b_ext_siberium ; 21 :
19007: LD_ADDR_OWVAR 42
19011: PUSH
19012: LD_INT 21
19014: ST_TO_ADDR
19015: GO 19284
19017: LD_INT 21
19019: DOUBLE
19020: EQUAL
19021: IFTRUE 19025
19023: GO 19036
19025: POP
// bc_type := b_ext_computer ; 22 :
19026: LD_ADDR_OWVAR 42
19030: PUSH
19031: LD_INT 24
19033: ST_TO_ADDR
19034: GO 19284
19036: LD_INT 22
19038: DOUBLE
19039: EQUAL
19040: IFTRUE 19044
19042: GO 19055
19044: POP
// bc_type := b_ext_track ; 23 :
19045: LD_ADDR_OWVAR 42
19049: PUSH
19050: LD_INT 16
19052: ST_TO_ADDR
19053: GO 19284
19055: LD_INT 23
19057: DOUBLE
19058: EQUAL
19059: IFTRUE 19063
19061: GO 19074
19063: POP
// bc_type := b_ext_laser ; 24 :
19064: LD_ADDR_OWVAR 42
19068: PUSH
19069: LD_INT 25
19071: ST_TO_ADDR
19072: GO 19284
19074: LD_INT 24
19076: DOUBLE
19077: EQUAL
19078: IFTRUE 19082
19080: GO 19093
19082: POP
// bc_type := b_control_tower ; 25 :
19083: LD_ADDR_OWVAR 42
19087: PUSH
19088: LD_INT 36
19090: ST_TO_ADDR
19091: GO 19284
19093: LD_INT 25
19095: DOUBLE
19096: EQUAL
19097: IFTRUE 19101
19099: GO 19112
19101: POP
// bc_type := b_breastwork ; 26 :
19102: LD_ADDR_OWVAR 42
19106: PUSH
19107: LD_INT 31
19109: ST_TO_ADDR
19110: GO 19284
19112: LD_INT 26
19114: DOUBLE
19115: EQUAL
19116: IFTRUE 19120
19118: GO 19131
19120: POP
// bc_type := b_bunker ; 27 :
19121: LD_ADDR_OWVAR 42
19125: PUSH
19126: LD_INT 32
19128: ST_TO_ADDR
19129: GO 19284
19131: LD_INT 27
19133: DOUBLE
19134: EQUAL
19135: IFTRUE 19139
19137: GO 19150
19139: POP
// bc_type := b_turret ; 28 :
19140: LD_ADDR_OWVAR 42
19144: PUSH
19145: LD_INT 33
19147: ST_TO_ADDR
19148: GO 19284
19150: LD_INT 28
19152: DOUBLE
19153: EQUAL
19154: IFTRUE 19158
19156: GO 19169
19158: POP
// bc_type := b_armoury ; 29 :
19159: LD_ADDR_OWVAR 42
19163: PUSH
19164: LD_INT 4
19166: ST_TO_ADDR
19167: GO 19284
19169: LD_INT 29
19171: DOUBLE
19172: EQUAL
19173: IFTRUE 19177
19175: GO 19188
19177: POP
// bc_type := b_barracks ; 30 :
19178: LD_ADDR_OWVAR 42
19182: PUSH
19183: LD_INT 5
19185: ST_TO_ADDR
19186: GO 19284
19188: LD_INT 30
19190: DOUBLE
19191: EQUAL
19192: IFTRUE 19196
19194: GO 19207
19196: POP
// bc_type := b_solar_power ; 31 :
19197: LD_ADDR_OWVAR 42
19201: PUSH
19202: LD_INT 27
19204: ST_TO_ADDR
19205: GO 19284
19207: LD_INT 31
19209: DOUBLE
19210: EQUAL
19211: IFTRUE 19215
19213: GO 19226
19215: POP
// bc_type := b_oil_power ; 32 :
19216: LD_ADDR_OWVAR 42
19220: PUSH
19221: LD_INT 26
19223: ST_TO_ADDR
19224: GO 19284
19226: LD_INT 32
19228: DOUBLE
19229: EQUAL
19230: IFTRUE 19234
19232: GO 19245
19234: POP
// bc_type := b_siberite_power ; 33 :
19235: LD_ADDR_OWVAR 42
19239: PUSH
19240: LD_INT 28
19242: ST_TO_ADDR
19243: GO 19284
19245: LD_INT 33
19247: DOUBLE
19248: EQUAL
19249: IFTRUE 19253
19251: GO 19264
19253: POP
// bc_type := b_oil_mine ; 34 :
19254: LD_ADDR_OWVAR 42
19258: PUSH
19259: LD_INT 29
19261: ST_TO_ADDR
19262: GO 19284
19264: LD_INT 34
19266: DOUBLE
19267: EQUAL
19268: IFTRUE 19272
19270: GO 19283
19272: POP
// bc_type := b_siberite_mine ; end ;
19273: LD_ADDR_OWVAR 42
19277: PUSH
19278: LD_INT 30
19280: ST_TO_ADDR
19281: GO 19284
19283: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19284: LD_ADDR_VAR 0 8
19288: PUSH
19289: LD_VAR 0 5
19293: PPUSH
19294: LD_VAR 0 6
19298: PPUSH
19299: LD_VAR 0 3
19303: PPUSH
19304: CALL_OW 47
19308: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19309: LD_OWVAR 42
19313: PUSH
19314: LD_INT 32
19316: PUSH
19317: LD_INT 33
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: IN
19324: IFFALSE 19340
// PlaceWeaponTurret ( b , weapon ) ;
19326: LD_VAR 0 8
19330: PPUSH
19331: LD_VAR 0 4
19335: PPUSH
19336: CALL_OW 431
// end ;
19340: LD_VAR 0 7
19344: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19345: LD_INT 0
19347: PPUSH
19348: PPUSH
19349: PPUSH
19350: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19351: LD_ADDR_VAR 0 4
19355: PUSH
19356: LD_INT 22
19358: PUSH
19359: LD_OWVAR 2
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 2
19370: PUSH
19371: LD_INT 30
19373: PUSH
19374: LD_INT 0
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 30
19383: PUSH
19384: LD_INT 1
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PPUSH
19400: CALL_OW 69
19404: ST_TO_ADDR
// if not tmp then
19405: LD_VAR 0 4
19409: NOT
19410: IFFALSE 19414
// exit ;
19412: GO 19473
// for i in tmp do
19414: LD_ADDR_VAR 0 2
19418: PUSH
19419: LD_VAR 0 4
19423: PUSH
19424: FOR_IN
19425: IFFALSE 19471
// for j = 1 to 3 do
19427: LD_ADDR_VAR 0 3
19431: PUSH
19432: DOUBLE
19433: LD_INT 1
19435: DEC
19436: ST_TO_ADDR
19437: LD_INT 3
19439: PUSH
19440: FOR_TO
19441: IFFALSE 19467
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19443: LD_VAR 0 2
19447: PPUSH
19448: CALL_OW 274
19452: PPUSH
19453: LD_VAR 0 3
19457: PPUSH
19458: LD_INT 99999
19460: PPUSH
19461: CALL_OW 277
19465: GO 19440
19467: POP
19468: POP
19469: GO 19424
19471: POP
19472: POP
// end ;
19473: LD_VAR 0 1
19477: RET
// export function hHackSetLevel10 ; var i , j ; begin
19478: LD_INT 0
19480: PPUSH
19481: PPUSH
19482: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19483: LD_ADDR_VAR 0 2
19487: PUSH
19488: LD_INT 21
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PPUSH
19498: CALL_OW 69
19502: PUSH
19503: FOR_IN
19504: IFFALSE 19556
// if IsSelected ( i ) then
19506: LD_VAR 0 2
19510: PPUSH
19511: CALL_OW 306
19515: IFFALSE 19554
// begin for j := 1 to 4 do
19517: LD_ADDR_VAR 0 3
19521: PUSH
19522: DOUBLE
19523: LD_INT 1
19525: DEC
19526: ST_TO_ADDR
19527: LD_INT 4
19529: PUSH
19530: FOR_TO
19531: IFFALSE 19552
// SetSkill ( i , j , 10 ) ;
19533: LD_VAR 0 2
19537: PPUSH
19538: LD_VAR 0 3
19542: PPUSH
19543: LD_INT 10
19545: PPUSH
19546: CALL_OW 237
19550: GO 19530
19552: POP
19553: POP
// end ;
19554: GO 19503
19556: POP
19557: POP
// end ;
19558: LD_VAR 0 1
19562: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19563: LD_INT 0
19565: PPUSH
19566: PPUSH
19567: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19568: LD_ADDR_VAR 0 2
19572: PUSH
19573: LD_INT 22
19575: PUSH
19576: LD_OWVAR 2
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 21
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PPUSH
19599: CALL_OW 69
19603: PUSH
19604: FOR_IN
19605: IFFALSE 19646
// begin for j := 1 to 4 do
19607: LD_ADDR_VAR 0 3
19611: PUSH
19612: DOUBLE
19613: LD_INT 1
19615: DEC
19616: ST_TO_ADDR
19617: LD_INT 4
19619: PUSH
19620: FOR_TO
19621: IFFALSE 19642
// SetSkill ( i , j , 10 ) ;
19623: LD_VAR 0 2
19627: PPUSH
19628: LD_VAR 0 3
19632: PPUSH
19633: LD_INT 10
19635: PPUSH
19636: CALL_OW 237
19640: GO 19620
19642: POP
19643: POP
// end ;
19644: GO 19604
19646: POP
19647: POP
// end ;
19648: LD_VAR 0 1
19652: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19653: LD_INT 0
19655: PPUSH
// uc_side := your_side ;
19656: LD_ADDR_OWVAR 20
19660: PUSH
19661: LD_OWVAR 2
19665: ST_TO_ADDR
// uc_nation := nation ;
19666: LD_ADDR_OWVAR 21
19670: PUSH
19671: LD_VAR 0 1
19675: ST_TO_ADDR
// InitHc ;
19676: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19680: LD_INT 0
19682: PPUSH
19683: LD_VAR 0 2
19687: PPUSH
19688: LD_VAR 0 3
19692: PPUSH
19693: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19697: LD_VAR 0 4
19701: PPUSH
19702: LD_VAR 0 5
19706: PPUSH
19707: CALL_OW 428
19711: PUSH
19712: LD_INT 0
19714: EQUAL
19715: IFFALSE 19739
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19717: CALL_OW 44
19721: PPUSH
19722: LD_VAR 0 4
19726: PPUSH
19727: LD_VAR 0 5
19731: PPUSH
19732: LD_INT 1
19734: PPUSH
19735: CALL_OW 48
// end ;
19739: LD_VAR 0 6
19743: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19744: LD_INT 0
19746: PPUSH
19747: PPUSH
// uc_side := your_side ;
19748: LD_ADDR_OWVAR 20
19752: PUSH
19753: LD_OWVAR 2
19757: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19758: LD_VAR 0 1
19762: PUSH
19763: LD_INT 1
19765: PUSH
19766: LD_INT 2
19768: PUSH
19769: LD_INT 3
19771: PUSH
19772: LD_INT 4
19774: PUSH
19775: LD_INT 5
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: IN
19785: IFFALSE 19797
// uc_nation := nation_american else
19787: LD_ADDR_OWVAR 21
19791: PUSH
19792: LD_INT 1
19794: ST_TO_ADDR
19795: GO 19840
// if chassis in [ 11 , 12 , 13 , 14 ] then
19797: LD_VAR 0 1
19801: PUSH
19802: LD_INT 11
19804: PUSH
19805: LD_INT 12
19807: PUSH
19808: LD_INT 13
19810: PUSH
19811: LD_INT 14
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: IN
19820: IFFALSE 19832
// uc_nation := nation_arabian else
19822: LD_ADDR_OWVAR 21
19826: PUSH
19827: LD_INT 2
19829: ST_TO_ADDR
19830: GO 19840
// uc_nation := nation_russian ;
19832: LD_ADDR_OWVAR 21
19836: PUSH
19837: LD_INT 3
19839: ST_TO_ADDR
// vc_chassis := chassis ;
19840: LD_ADDR_OWVAR 37
19844: PUSH
19845: LD_VAR 0 1
19849: ST_TO_ADDR
// vc_engine := engine ;
19850: LD_ADDR_OWVAR 39
19854: PUSH
19855: LD_VAR 0 2
19859: ST_TO_ADDR
// vc_control := control ;
19860: LD_ADDR_OWVAR 38
19864: PUSH
19865: LD_VAR 0 3
19869: ST_TO_ADDR
// vc_weapon := weapon ;
19870: LD_ADDR_OWVAR 40
19874: PUSH
19875: LD_VAR 0 4
19879: ST_TO_ADDR
// un := CreateVehicle ;
19880: LD_ADDR_VAR 0 8
19884: PUSH
19885: CALL_OW 45
19889: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19890: LD_VAR 0 8
19894: PPUSH
19895: LD_INT 0
19897: PPUSH
19898: LD_INT 5
19900: PPUSH
19901: CALL_OW 12
19905: PPUSH
19906: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19910: LD_VAR 0 8
19914: PPUSH
19915: LD_VAR 0 5
19919: PPUSH
19920: LD_VAR 0 6
19924: PPUSH
19925: LD_INT 1
19927: PPUSH
19928: CALL_OW 48
// end ;
19932: LD_VAR 0 7
19936: RET
// export hInvincible ; every 1 do
19937: GO 19939
19939: DISABLE
// hInvincible := [ ] ;
19940: LD_ADDR_EXP 91
19944: PUSH
19945: EMPTY
19946: ST_TO_ADDR
19947: END
// every 10 do var i ;
19948: GO 19950
19950: DISABLE
19951: LD_INT 0
19953: PPUSH
// begin enable ;
19954: ENABLE
// if not hInvincible then
19955: LD_EXP 91
19959: NOT
19960: IFFALSE 19964
// exit ;
19962: GO 20008
// for i in hInvincible do
19964: LD_ADDR_VAR 0 1
19968: PUSH
19969: LD_EXP 91
19973: PUSH
19974: FOR_IN
19975: IFFALSE 20006
// if GetLives ( i ) < 1000 then
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 256
19986: PUSH
19987: LD_INT 1000
19989: LESS
19990: IFFALSE 20004
// SetLives ( i , 1000 ) ;
19992: LD_VAR 0 1
19996: PPUSH
19997: LD_INT 1000
19999: PPUSH
20000: CALL_OW 234
20004: GO 19974
20006: POP
20007: POP
// end ;
20008: PPOPN 1
20010: END
// export function hHackInvincible ; var i ; begin
20011: LD_INT 0
20013: PPUSH
20014: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20015: LD_ADDR_VAR 0 2
20019: PUSH
20020: LD_INT 2
20022: PUSH
20023: LD_INT 21
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 21
20035: PUSH
20036: LD_INT 2
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: LIST
20047: PPUSH
20048: CALL_OW 69
20052: PUSH
20053: FOR_IN
20054: IFFALSE 20115
// if IsSelected ( i ) then
20056: LD_VAR 0 2
20060: PPUSH
20061: CALL_OW 306
20065: IFFALSE 20113
// begin if i in hInvincible then
20067: LD_VAR 0 2
20071: PUSH
20072: LD_EXP 91
20076: IN
20077: IFFALSE 20097
// hInvincible := hInvincible diff i else
20079: LD_ADDR_EXP 91
20083: PUSH
20084: LD_EXP 91
20088: PUSH
20089: LD_VAR 0 2
20093: DIFF
20094: ST_TO_ADDR
20095: GO 20113
// hInvincible := hInvincible union i ;
20097: LD_ADDR_EXP 91
20101: PUSH
20102: LD_EXP 91
20106: PUSH
20107: LD_VAR 0 2
20111: UNION
20112: ST_TO_ADDR
// end ;
20113: GO 20053
20115: POP
20116: POP
// end ;
20117: LD_VAR 0 1
20121: RET
// export function hHackInvisible ; var i , j ; begin
20122: LD_INT 0
20124: PPUSH
20125: PPUSH
20126: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20127: LD_ADDR_VAR 0 2
20131: PUSH
20132: LD_INT 21
20134: PUSH
20135: LD_INT 1
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PPUSH
20142: CALL_OW 69
20146: PUSH
20147: FOR_IN
20148: IFFALSE 20172
// if IsSelected ( i ) then
20150: LD_VAR 0 2
20154: PPUSH
20155: CALL_OW 306
20159: IFFALSE 20170
// ComForceInvisible ( i ) ;
20161: LD_VAR 0 2
20165: PPUSH
20166: CALL_OW 496
20170: GO 20147
20172: POP
20173: POP
// end ;
20174: LD_VAR 0 1
20178: RET
// export function hHackChangeYourSide ; begin
20179: LD_INT 0
20181: PPUSH
// if your_side = 8 then
20182: LD_OWVAR 2
20186: PUSH
20187: LD_INT 8
20189: EQUAL
20190: IFFALSE 20202
// your_side := 0 else
20192: LD_ADDR_OWVAR 2
20196: PUSH
20197: LD_INT 0
20199: ST_TO_ADDR
20200: GO 20216
// your_side := your_side + 1 ;
20202: LD_ADDR_OWVAR 2
20206: PUSH
20207: LD_OWVAR 2
20211: PUSH
20212: LD_INT 1
20214: PLUS
20215: ST_TO_ADDR
// end ;
20216: LD_VAR 0 1
20220: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20221: LD_INT 0
20223: PPUSH
20224: PPUSH
20225: PPUSH
// for i in all_units do
20226: LD_ADDR_VAR 0 2
20230: PUSH
20231: LD_OWVAR 3
20235: PUSH
20236: FOR_IN
20237: IFFALSE 20315
// if IsSelected ( i ) then
20239: LD_VAR 0 2
20243: PPUSH
20244: CALL_OW 306
20248: IFFALSE 20313
// begin j := GetSide ( i ) ;
20250: LD_ADDR_VAR 0 3
20254: PUSH
20255: LD_VAR 0 2
20259: PPUSH
20260: CALL_OW 255
20264: ST_TO_ADDR
// if j = 8 then
20265: LD_VAR 0 3
20269: PUSH
20270: LD_INT 8
20272: EQUAL
20273: IFFALSE 20285
// j := 0 else
20275: LD_ADDR_VAR 0 3
20279: PUSH
20280: LD_INT 0
20282: ST_TO_ADDR
20283: GO 20299
// j := j + 1 ;
20285: LD_ADDR_VAR 0 3
20289: PUSH
20290: LD_VAR 0 3
20294: PUSH
20295: LD_INT 1
20297: PLUS
20298: ST_TO_ADDR
// SetSide ( i , j ) ;
20299: LD_VAR 0 2
20303: PPUSH
20304: LD_VAR 0 3
20308: PPUSH
20309: CALL_OW 235
// end ;
20313: GO 20236
20315: POP
20316: POP
// end ;
20317: LD_VAR 0 1
20321: RET
// export function hHackFog ; begin
20322: LD_INT 0
20324: PPUSH
// FogOff ( true ) ;
20325: LD_INT 1
20327: PPUSH
20328: CALL_OW 344
// end ;
20332: LD_VAR 0 1
20336: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20337: LD_INT 0
20339: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20340: LD_VAR 0 1
20344: PPUSH
20345: LD_VAR 0 2
20349: PPUSH
20350: LD_VAR 0 3
20354: PPUSH
20355: LD_INT 1
20357: PPUSH
20358: LD_INT 1
20360: PPUSH
20361: CALL_OW 483
// CenterOnXY ( x , y ) ;
20365: LD_VAR 0 2
20369: PPUSH
20370: LD_VAR 0 3
20374: PPUSH
20375: CALL_OW 84
// end ; end_of_file
20379: LD_VAR 0 4
20383: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20384: LD_INT 0
20386: PPUSH
20387: PPUSH
20388: PPUSH
20389: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20390: LD_VAR 0 1
20394: PPUSH
20395: CALL_OW 264
20399: PUSH
20400: LD_EXP 22
20404: EQUAL
20405: IFFALSE 20477
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20407: LD_INT 68
20409: PPUSH
20410: LD_VAR 0 1
20414: PPUSH
20415: CALL_OW 255
20419: PPUSH
20420: CALL_OW 321
20424: PUSH
20425: LD_INT 2
20427: EQUAL
20428: IFFALSE 20440
// eff := 70 else
20430: LD_ADDR_VAR 0 4
20434: PUSH
20435: LD_INT 70
20437: ST_TO_ADDR
20438: GO 20448
// eff := 30 ;
20440: LD_ADDR_VAR 0 4
20444: PUSH
20445: LD_INT 30
20447: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20448: LD_VAR 0 1
20452: PPUSH
20453: CALL_OW 250
20457: PPUSH
20458: LD_VAR 0 1
20462: PPUSH
20463: CALL_OW 251
20467: PPUSH
20468: LD_VAR 0 4
20472: PPUSH
20473: CALL_OW 495
// end ; end ;
20477: LD_VAR 0 2
20481: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20482: LD_INT 0
20484: PPUSH
// end ;
20485: LD_VAR 0 4
20489: RET
// export function SOS_Command ( cmd ) ; begin
20490: LD_INT 0
20492: PPUSH
// end ;
20493: LD_VAR 0 2
20497: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20498: LD_INT 0
20500: PPUSH
// if cmd = 121 then
20501: LD_VAR 0 1
20505: PUSH
20506: LD_INT 121
20508: EQUAL
20509: IFFALSE 20511
// end ;
20511: LD_VAR 0 6
20515: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20516: LD_INT 0
20518: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20519: LD_VAR 0 1
20523: PUSH
20524: LD_INT 250
20526: EQUAL
20527: PUSH
20528: LD_VAR 0 2
20532: PPUSH
20533: CALL_OW 264
20537: PUSH
20538: LD_EXP 25
20542: EQUAL
20543: AND
20544: IFFALSE 20565
// MinerPlaceMine ( unit , x , y ) ;
20546: LD_VAR 0 2
20550: PPUSH
20551: LD_VAR 0 4
20555: PPUSH
20556: LD_VAR 0 5
20560: PPUSH
20561: CALL 22914 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20565: LD_VAR 0 1
20569: PUSH
20570: LD_INT 251
20572: EQUAL
20573: PUSH
20574: LD_VAR 0 2
20578: PPUSH
20579: CALL_OW 264
20583: PUSH
20584: LD_EXP 25
20588: EQUAL
20589: AND
20590: IFFALSE 20611
// MinerDetonateMine ( unit , x , y ) ;
20592: LD_VAR 0 2
20596: PPUSH
20597: LD_VAR 0 4
20601: PPUSH
20602: LD_VAR 0 5
20606: PPUSH
20607: CALL 23191 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20611: LD_VAR 0 1
20615: PUSH
20616: LD_INT 252
20618: EQUAL
20619: PUSH
20620: LD_VAR 0 2
20624: PPUSH
20625: CALL_OW 264
20629: PUSH
20630: LD_EXP 25
20634: EQUAL
20635: AND
20636: IFFALSE 20657
// MinerCreateMinefield ( unit , x , y ) ;
20638: LD_VAR 0 2
20642: PPUSH
20643: LD_VAR 0 4
20647: PPUSH
20648: LD_VAR 0 5
20652: PPUSH
20653: CALL 23608 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20657: LD_VAR 0 1
20661: PUSH
20662: LD_INT 253
20664: EQUAL
20665: PUSH
20666: LD_VAR 0 2
20670: PPUSH
20671: CALL_OW 257
20675: PUSH
20676: LD_INT 5
20678: EQUAL
20679: AND
20680: IFFALSE 20701
// ComBinocular ( unit , x , y ) ;
20682: LD_VAR 0 2
20686: PPUSH
20687: LD_VAR 0 4
20691: PPUSH
20692: LD_VAR 0 5
20696: PPUSH
20697: CALL 23979 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20701: LD_VAR 0 1
20705: PUSH
20706: LD_INT 254
20708: EQUAL
20709: PUSH
20710: LD_VAR 0 2
20714: PPUSH
20715: CALL_OW 264
20719: PUSH
20720: LD_EXP 20
20724: EQUAL
20725: AND
20726: PUSH
20727: LD_VAR 0 3
20731: PPUSH
20732: CALL_OW 263
20736: PUSH
20737: LD_INT 3
20739: EQUAL
20740: AND
20741: IFFALSE 20757
// HackDestroyVehicle ( unit , selectedUnit ) ;
20743: LD_VAR 0 2
20747: PPUSH
20748: LD_VAR 0 3
20752: PPUSH
20753: CALL 22274 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20757: LD_VAR 0 1
20761: PUSH
20762: LD_INT 255
20764: EQUAL
20765: PUSH
20766: LD_VAR 0 2
20770: PPUSH
20771: CALL_OW 264
20775: PUSH
20776: LD_INT 14
20778: PUSH
20779: LD_INT 53
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: IN
20786: AND
20787: PUSH
20788: LD_VAR 0 4
20792: PPUSH
20793: LD_VAR 0 5
20797: PPUSH
20798: CALL_OW 488
20802: AND
20803: IFFALSE 20827
// CutTreeXYR ( unit , x , y , 12 ) ;
20805: LD_VAR 0 2
20809: PPUSH
20810: LD_VAR 0 4
20814: PPUSH
20815: LD_VAR 0 5
20819: PPUSH
20820: LD_INT 12
20822: PPUSH
20823: CALL 20840 0 4
// end ;
20827: LD_VAR 0 6
20831: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
20832: LD_INT 0
20834: PPUSH
// end ;
20835: LD_VAR 0 4
20839: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20840: LD_INT 0
20842: PPUSH
20843: PPUSH
20844: PPUSH
20845: PPUSH
20846: PPUSH
20847: PPUSH
20848: PPUSH
20849: PPUSH
20850: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20851: LD_VAR 0 1
20855: NOT
20856: PUSH
20857: LD_VAR 0 2
20861: PPUSH
20862: LD_VAR 0 3
20866: PPUSH
20867: CALL_OW 488
20871: NOT
20872: OR
20873: PUSH
20874: LD_VAR 0 4
20878: NOT
20879: OR
20880: IFFALSE 20884
// exit ;
20882: GO 21224
// list := [ ] ;
20884: LD_ADDR_VAR 0 13
20888: PUSH
20889: EMPTY
20890: ST_TO_ADDR
// if x - r < 0 then
20891: LD_VAR 0 2
20895: PUSH
20896: LD_VAR 0 4
20900: MINUS
20901: PUSH
20902: LD_INT 0
20904: LESS
20905: IFFALSE 20917
// min_x := 0 else
20907: LD_ADDR_VAR 0 7
20911: PUSH
20912: LD_INT 0
20914: ST_TO_ADDR
20915: GO 20933
// min_x := x - r ;
20917: LD_ADDR_VAR 0 7
20921: PUSH
20922: LD_VAR 0 2
20926: PUSH
20927: LD_VAR 0 4
20931: MINUS
20932: ST_TO_ADDR
// if y - r < 0 then
20933: LD_VAR 0 3
20937: PUSH
20938: LD_VAR 0 4
20942: MINUS
20943: PUSH
20944: LD_INT 0
20946: LESS
20947: IFFALSE 20959
// min_y := 0 else
20949: LD_ADDR_VAR 0 8
20953: PUSH
20954: LD_INT 0
20956: ST_TO_ADDR
20957: GO 20975
// min_y := y - r ;
20959: LD_ADDR_VAR 0 8
20963: PUSH
20964: LD_VAR 0 3
20968: PUSH
20969: LD_VAR 0 4
20973: MINUS
20974: ST_TO_ADDR
// max_x := x + r ;
20975: LD_ADDR_VAR 0 9
20979: PUSH
20980: LD_VAR 0 2
20984: PUSH
20985: LD_VAR 0 4
20989: PLUS
20990: ST_TO_ADDR
// max_y := y + r ;
20991: LD_ADDR_VAR 0 10
20995: PUSH
20996: LD_VAR 0 3
21000: PUSH
21001: LD_VAR 0 4
21005: PLUS
21006: ST_TO_ADDR
// for _x = min_x to max_x do
21007: LD_ADDR_VAR 0 11
21011: PUSH
21012: DOUBLE
21013: LD_VAR 0 7
21017: DEC
21018: ST_TO_ADDR
21019: LD_VAR 0 9
21023: PUSH
21024: FOR_TO
21025: IFFALSE 21142
// for _y = min_y to max_y do
21027: LD_ADDR_VAR 0 12
21031: PUSH
21032: DOUBLE
21033: LD_VAR 0 8
21037: DEC
21038: ST_TO_ADDR
21039: LD_VAR 0 10
21043: PUSH
21044: FOR_TO
21045: IFFALSE 21138
// begin if not ValidHex ( _x , _y ) then
21047: LD_VAR 0 11
21051: PPUSH
21052: LD_VAR 0 12
21056: PPUSH
21057: CALL_OW 488
21061: NOT
21062: IFFALSE 21066
// continue ;
21064: GO 21044
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21066: LD_VAR 0 11
21070: PPUSH
21071: LD_VAR 0 12
21075: PPUSH
21076: CALL_OW 351
21080: PUSH
21081: LD_VAR 0 11
21085: PPUSH
21086: LD_VAR 0 12
21090: PPUSH
21091: CALL_OW 554
21095: AND
21096: IFFALSE 21136
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21098: LD_ADDR_VAR 0 13
21102: PUSH
21103: LD_VAR 0 13
21107: PPUSH
21108: LD_VAR 0 13
21112: PUSH
21113: LD_INT 1
21115: PLUS
21116: PPUSH
21117: LD_VAR 0 11
21121: PUSH
21122: LD_VAR 0 12
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PPUSH
21131: CALL_OW 2
21135: ST_TO_ADDR
// end ;
21136: GO 21044
21138: POP
21139: POP
21140: GO 21024
21142: POP
21143: POP
// if not list then
21144: LD_VAR 0 13
21148: NOT
21149: IFFALSE 21153
// exit ;
21151: GO 21224
// for i in list do
21153: LD_ADDR_VAR 0 6
21157: PUSH
21158: LD_VAR 0 13
21162: PUSH
21163: FOR_IN
21164: IFFALSE 21222
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21166: LD_VAR 0 1
21170: PPUSH
21171: LD_STRING M
21173: PUSH
21174: LD_VAR 0 6
21178: PUSH
21179: LD_INT 1
21181: ARRAY
21182: PUSH
21183: LD_VAR 0 6
21187: PUSH
21188: LD_INT 2
21190: ARRAY
21191: PUSH
21192: LD_INT 0
21194: PUSH
21195: LD_INT 0
21197: PUSH
21198: LD_INT 0
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: PUSH
21213: EMPTY
21214: LIST
21215: PPUSH
21216: CALL_OW 447
21220: GO 21163
21222: POP
21223: POP
// end ;
21224: LD_VAR 0 5
21228: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21229: LD_EXP 94
21233: NOT
21234: IFFALSE 21284
21236: GO 21238
21238: DISABLE
// begin initHack := true ;
21239: LD_ADDR_EXP 94
21243: PUSH
21244: LD_INT 1
21246: ST_TO_ADDR
// hackTanks := [ ] ;
21247: LD_ADDR_EXP 95
21251: PUSH
21252: EMPTY
21253: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21254: LD_ADDR_EXP 96
21258: PUSH
21259: EMPTY
21260: ST_TO_ADDR
// hackLimit := 3 ;
21261: LD_ADDR_EXP 97
21265: PUSH
21266: LD_INT 3
21268: ST_TO_ADDR
// hackDist := 12 ;
21269: LD_ADDR_EXP 98
21273: PUSH
21274: LD_INT 12
21276: ST_TO_ADDR
// hackCounter := [ ] ;
21277: LD_ADDR_EXP 99
21281: PUSH
21282: EMPTY
21283: ST_TO_ADDR
// end ;
21284: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21285: LD_EXP 94
21289: PUSH
21290: LD_INT 34
21292: PUSH
21293: LD_EXP 20
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PPUSH
21302: CALL_OW 69
21306: AND
21307: IFFALSE 21562
21309: GO 21311
21311: DISABLE
21312: LD_INT 0
21314: PPUSH
21315: PPUSH
// begin enable ;
21316: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21317: LD_ADDR_VAR 0 1
21321: PUSH
21322: LD_INT 34
21324: PUSH
21325: LD_EXP 20
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PPUSH
21334: CALL_OW 69
21338: PUSH
21339: FOR_IN
21340: IFFALSE 21560
// begin if not i in hackTanks then
21342: LD_VAR 0 1
21346: PUSH
21347: LD_EXP 95
21351: IN
21352: NOT
21353: IFFALSE 21436
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21355: LD_ADDR_EXP 95
21359: PUSH
21360: LD_EXP 95
21364: PPUSH
21365: LD_EXP 95
21369: PUSH
21370: LD_INT 1
21372: PLUS
21373: PPUSH
21374: LD_VAR 0 1
21378: PPUSH
21379: CALL_OW 1
21383: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21384: LD_ADDR_EXP 96
21388: PUSH
21389: LD_EXP 96
21393: PPUSH
21394: LD_EXP 96
21398: PUSH
21399: LD_INT 1
21401: PLUS
21402: PPUSH
21403: EMPTY
21404: PPUSH
21405: CALL_OW 1
21409: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21410: LD_ADDR_EXP 99
21414: PUSH
21415: LD_EXP 99
21419: PPUSH
21420: LD_EXP 99
21424: PUSH
21425: LD_INT 1
21427: PLUS
21428: PPUSH
21429: EMPTY
21430: PPUSH
21431: CALL_OW 1
21435: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21436: LD_VAR 0 1
21440: PPUSH
21441: CALL_OW 302
21445: NOT
21446: IFFALSE 21459
// begin HackUnlinkAll ( i ) ;
21448: LD_VAR 0 1
21452: PPUSH
21453: CALL 21565 0 1
// continue ;
21457: GO 21339
// end ; HackCheckCapturedStatus ( i ) ;
21459: LD_VAR 0 1
21463: PPUSH
21464: CALL 22008 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21468: LD_ADDR_VAR 0 2
21472: PUSH
21473: LD_INT 81
21475: PUSH
21476: LD_VAR 0 1
21480: PPUSH
21481: CALL_OW 255
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 33
21492: PUSH
21493: LD_INT 3
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 91
21502: PUSH
21503: LD_VAR 0 1
21507: PUSH
21508: LD_EXP 98
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 50
21520: PUSH
21521: EMPTY
21522: LIST
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: PPUSH
21530: CALL_OW 69
21534: ST_TO_ADDR
// if not tmp then
21535: LD_VAR 0 2
21539: NOT
21540: IFFALSE 21544
// continue ;
21542: GO 21339
// HackLink ( i , tmp ) ;
21544: LD_VAR 0 1
21548: PPUSH
21549: LD_VAR 0 2
21553: PPUSH
21554: CALL 21701 0 2
// end ;
21558: GO 21339
21560: POP
21561: POP
// end ;
21562: PPOPN 2
21564: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21565: LD_INT 0
21567: PPUSH
21568: PPUSH
21569: PPUSH
// if not hack in hackTanks then
21570: LD_VAR 0 1
21574: PUSH
21575: LD_EXP 95
21579: IN
21580: NOT
21581: IFFALSE 21585
// exit ;
21583: GO 21696
// index := GetElementIndex ( hackTanks , hack ) ;
21585: LD_ADDR_VAR 0 4
21589: PUSH
21590: LD_EXP 95
21594: PPUSH
21595: LD_VAR 0 1
21599: PPUSH
21600: CALL 29170 0 2
21604: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21605: LD_EXP 96
21609: PUSH
21610: LD_VAR 0 4
21614: ARRAY
21615: IFFALSE 21696
// begin for i in hackTanksCaptured [ index ] do
21617: LD_ADDR_VAR 0 3
21621: PUSH
21622: LD_EXP 96
21626: PUSH
21627: LD_VAR 0 4
21631: ARRAY
21632: PUSH
21633: FOR_IN
21634: IFFALSE 21660
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21636: LD_VAR 0 3
21640: PUSH
21641: LD_INT 1
21643: ARRAY
21644: PPUSH
21645: LD_VAR 0 3
21649: PUSH
21650: LD_INT 2
21652: ARRAY
21653: PPUSH
21654: CALL_OW 235
21658: GO 21633
21660: POP
21661: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21662: LD_ADDR_EXP 96
21666: PUSH
21667: LD_EXP 96
21671: PPUSH
21672: LD_VAR 0 4
21676: PPUSH
21677: EMPTY
21678: PPUSH
21679: CALL_OW 1
21683: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21684: LD_VAR 0 1
21688: PPUSH
21689: LD_INT 0
21691: PPUSH
21692: CALL_OW 505
// end ; end ;
21696: LD_VAR 0 2
21700: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21701: LD_INT 0
21703: PPUSH
21704: PPUSH
21705: PPUSH
// if not hack in hackTanks or not vehicles then
21706: LD_VAR 0 1
21710: PUSH
21711: LD_EXP 95
21715: IN
21716: NOT
21717: PUSH
21718: LD_VAR 0 2
21722: NOT
21723: OR
21724: IFFALSE 21728
// exit ;
21726: GO 22003
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21728: LD_ADDR_VAR 0 2
21732: PUSH
21733: LD_VAR 0 1
21737: PPUSH
21738: LD_VAR 0 2
21742: PPUSH
21743: LD_INT 1
21745: PPUSH
21746: LD_INT 1
21748: PPUSH
21749: CALL 29820 0 4
21753: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21754: LD_ADDR_VAR 0 5
21758: PUSH
21759: LD_EXP 95
21763: PPUSH
21764: LD_VAR 0 1
21768: PPUSH
21769: CALL 29170 0 2
21773: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21774: LD_EXP 96
21778: PUSH
21779: LD_VAR 0 5
21783: ARRAY
21784: PUSH
21785: LD_EXP 97
21789: LESS
21790: IFFALSE 21979
// begin for i := 1 to vehicles do
21792: LD_ADDR_VAR 0 4
21796: PUSH
21797: DOUBLE
21798: LD_INT 1
21800: DEC
21801: ST_TO_ADDR
21802: LD_VAR 0 2
21806: PUSH
21807: FOR_TO
21808: IFFALSE 21977
// begin if hackTanksCaptured [ index ] = hackLimit then
21810: LD_EXP 96
21814: PUSH
21815: LD_VAR 0 5
21819: ARRAY
21820: PUSH
21821: LD_EXP 97
21825: EQUAL
21826: IFFALSE 21830
// break ;
21828: GO 21977
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21830: LD_ADDR_EXP 99
21834: PUSH
21835: LD_EXP 99
21839: PPUSH
21840: LD_VAR 0 5
21844: PPUSH
21845: LD_EXP 99
21849: PUSH
21850: LD_VAR 0 5
21854: ARRAY
21855: PUSH
21856: LD_INT 1
21858: PLUS
21859: PPUSH
21860: CALL_OW 1
21864: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21865: LD_ADDR_EXP 96
21869: PUSH
21870: LD_EXP 96
21874: PPUSH
21875: LD_VAR 0 5
21879: PUSH
21880: LD_EXP 96
21884: PUSH
21885: LD_VAR 0 5
21889: ARRAY
21890: PUSH
21891: LD_INT 1
21893: PLUS
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PPUSH
21899: LD_VAR 0 2
21903: PUSH
21904: LD_VAR 0 4
21908: ARRAY
21909: PUSH
21910: LD_VAR 0 2
21914: PUSH
21915: LD_VAR 0 4
21919: ARRAY
21920: PPUSH
21921: CALL_OW 255
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PPUSH
21930: CALL 29385 0 3
21934: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21935: LD_VAR 0 2
21939: PUSH
21940: LD_VAR 0 4
21944: ARRAY
21945: PPUSH
21946: LD_VAR 0 1
21950: PPUSH
21951: CALL_OW 255
21955: PPUSH
21956: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21960: LD_VAR 0 2
21964: PUSH
21965: LD_VAR 0 4
21969: ARRAY
21970: PPUSH
21971: CALL_OW 141
// end ;
21975: GO 21807
21977: POP
21978: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21979: LD_VAR 0 1
21983: PPUSH
21984: LD_EXP 96
21988: PUSH
21989: LD_VAR 0 5
21993: ARRAY
21994: PUSH
21995: LD_INT 0
21997: PLUS
21998: PPUSH
21999: CALL_OW 505
// end ;
22003: LD_VAR 0 3
22007: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22008: LD_INT 0
22010: PPUSH
22011: PPUSH
22012: PPUSH
22013: PPUSH
// if not hack in hackTanks then
22014: LD_VAR 0 1
22018: PUSH
22019: LD_EXP 95
22023: IN
22024: NOT
22025: IFFALSE 22029
// exit ;
22027: GO 22269
// index := GetElementIndex ( hackTanks , hack ) ;
22029: LD_ADDR_VAR 0 4
22033: PUSH
22034: LD_EXP 95
22038: PPUSH
22039: LD_VAR 0 1
22043: PPUSH
22044: CALL 29170 0 2
22048: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22049: LD_ADDR_VAR 0 3
22053: PUSH
22054: DOUBLE
22055: LD_EXP 96
22059: PUSH
22060: LD_VAR 0 4
22064: ARRAY
22065: INC
22066: ST_TO_ADDR
22067: LD_INT 1
22069: PUSH
22070: FOR_DOWNTO
22071: IFFALSE 22243
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22073: LD_ADDR_VAR 0 5
22077: PUSH
22078: LD_EXP 96
22082: PUSH
22083: LD_VAR 0 4
22087: ARRAY
22088: PUSH
22089: LD_VAR 0 3
22093: ARRAY
22094: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22095: LD_VAR 0 5
22099: PUSH
22100: LD_INT 1
22102: ARRAY
22103: PPUSH
22104: CALL_OW 302
22108: NOT
22109: PUSH
22110: LD_VAR 0 5
22114: PUSH
22115: LD_INT 1
22117: ARRAY
22118: PPUSH
22119: CALL_OW 255
22123: PUSH
22124: LD_VAR 0 1
22128: PPUSH
22129: CALL_OW 255
22133: NONEQUAL
22134: OR
22135: IFFALSE 22241
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22137: LD_VAR 0 5
22141: PUSH
22142: LD_INT 1
22144: ARRAY
22145: PPUSH
22146: CALL_OW 305
22150: PUSH
22151: LD_VAR 0 5
22155: PUSH
22156: LD_INT 1
22158: ARRAY
22159: PPUSH
22160: CALL_OW 255
22164: PUSH
22165: LD_VAR 0 1
22169: PPUSH
22170: CALL_OW 255
22174: EQUAL
22175: AND
22176: IFFALSE 22200
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22178: LD_VAR 0 5
22182: PUSH
22183: LD_INT 1
22185: ARRAY
22186: PPUSH
22187: LD_VAR 0 5
22191: PUSH
22192: LD_INT 2
22194: ARRAY
22195: PPUSH
22196: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22200: LD_ADDR_EXP 96
22204: PUSH
22205: LD_EXP 96
22209: PPUSH
22210: LD_VAR 0 4
22214: PPUSH
22215: LD_EXP 96
22219: PUSH
22220: LD_VAR 0 4
22224: ARRAY
22225: PPUSH
22226: LD_VAR 0 3
22230: PPUSH
22231: CALL_OW 3
22235: PPUSH
22236: CALL_OW 1
22240: ST_TO_ADDR
// end ; end ;
22241: GO 22070
22243: POP
22244: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22245: LD_VAR 0 1
22249: PPUSH
22250: LD_EXP 96
22254: PUSH
22255: LD_VAR 0 4
22259: ARRAY
22260: PUSH
22261: LD_INT 0
22263: PLUS
22264: PPUSH
22265: CALL_OW 505
// end ;
22269: LD_VAR 0 2
22273: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22274: LD_INT 0
22276: PPUSH
22277: PPUSH
22278: PPUSH
22279: PPUSH
// if not hack in hackTanks then
22280: LD_VAR 0 1
22284: PUSH
22285: LD_EXP 95
22289: IN
22290: NOT
22291: IFFALSE 22295
// exit ;
22293: GO 22380
// index := GetElementIndex ( hackTanks , hack ) ;
22295: LD_ADDR_VAR 0 5
22299: PUSH
22300: LD_EXP 95
22304: PPUSH
22305: LD_VAR 0 1
22309: PPUSH
22310: CALL 29170 0 2
22314: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22315: LD_ADDR_VAR 0 4
22319: PUSH
22320: DOUBLE
22321: LD_INT 1
22323: DEC
22324: ST_TO_ADDR
22325: LD_EXP 96
22329: PUSH
22330: LD_VAR 0 5
22334: ARRAY
22335: PUSH
22336: FOR_TO
22337: IFFALSE 22378
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22339: LD_EXP 96
22343: PUSH
22344: LD_VAR 0 5
22348: ARRAY
22349: PUSH
22350: LD_VAR 0 4
22354: ARRAY
22355: PUSH
22356: LD_INT 1
22358: ARRAY
22359: PUSH
22360: LD_VAR 0 2
22364: EQUAL
22365: IFFALSE 22376
// KillUnit ( vehicle ) ;
22367: LD_VAR 0 2
22371: PPUSH
22372: CALL_OW 66
22376: GO 22336
22378: POP
22379: POP
// end ;
22380: LD_VAR 0 3
22384: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22385: LD_EXP 100
22389: NOT
22390: IFFALSE 22425
22392: GO 22394
22394: DISABLE
// begin initMiner := true ;
22395: LD_ADDR_EXP 100
22399: PUSH
22400: LD_INT 1
22402: ST_TO_ADDR
// minersList := [ ] ;
22403: LD_ADDR_EXP 101
22407: PUSH
22408: EMPTY
22409: ST_TO_ADDR
// minerMinesList := [ ] ;
22410: LD_ADDR_EXP 102
22414: PUSH
22415: EMPTY
22416: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22417: LD_ADDR_EXP 103
22421: PUSH
22422: LD_INT 5
22424: ST_TO_ADDR
// end ;
22425: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22426: LD_EXP 100
22430: PUSH
22431: LD_INT 34
22433: PUSH
22434: LD_EXP 25
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PPUSH
22443: CALL_OW 69
22447: AND
22448: IFFALSE 22911
22450: GO 22452
22452: DISABLE
22453: LD_INT 0
22455: PPUSH
22456: PPUSH
22457: PPUSH
22458: PPUSH
// begin enable ;
22459: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22460: LD_ADDR_VAR 0 1
22464: PUSH
22465: LD_INT 34
22467: PUSH
22468: LD_EXP 25
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PPUSH
22477: CALL_OW 69
22481: PUSH
22482: FOR_IN
22483: IFFALSE 22555
// begin if not i in minersList then
22485: LD_VAR 0 1
22489: PUSH
22490: LD_EXP 101
22494: IN
22495: NOT
22496: IFFALSE 22553
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22498: LD_ADDR_EXP 101
22502: PUSH
22503: LD_EXP 101
22507: PPUSH
22508: LD_EXP 101
22512: PUSH
22513: LD_INT 1
22515: PLUS
22516: PPUSH
22517: LD_VAR 0 1
22521: PPUSH
22522: CALL_OW 1
22526: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22527: LD_ADDR_EXP 102
22531: PUSH
22532: LD_EXP 102
22536: PPUSH
22537: LD_EXP 102
22541: PUSH
22542: LD_INT 1
22544: PLUS
22545: PPUSH
22546: EMPTY
22547: PPUSH
22548: CALL_OW 1
22552: ST_TO_ADDR
// end end ;
22553: GO 22482
22555: POP
22556: POP
// for i := minerMinesList downto 1 do
22557: LD_ADDR_VAR 0 1
22561: PUSH
22562: DOUBLE
22563: LD_EXP 102
22567: INC
22568: ST_TO_ADDR
22569: LD_INT 1
22571: PUSH
22572: FOR_DOWNTO
22573: IFFALSE 22909
// begin if IsLive ( minersList [ i ] ) then
22575: LD_EXP 101
22579: PUSH
22580: LD_VAR 0 1
22584: ARRAY
22585: PPUSH
22586: CALL_OW 300
22590: IFFALSE 22618
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22592: LD_EXP 101
22596: PUSH
22597: LD_VAR 0 1
22601: ARRAY
22602: PPUSH
22603: LD_EXP 102
22607: PUSH
22608: LD_VAR 0 1
22612: ARRAY
22613: PPUSH
22614: CALL_OW 505
// if not minerMinesList [ i ] then
22618: LD_EXP 102
22622: PUSH
22623: LD_VAR 0 1
22627: ARRAY
22628: NOT
22629: IFFALSE 22633
// continue ;
22631: GO 22572
// for j := minerMinesList [ i ] downto 1 do
22633: LD_ADDR_VAR 0 2
22637: PUSH
22638: DOUBLE
22639: LD_EXP 102
22643: PUSH
22644: LD_VAR 0 1
22648: ARRAY
22649: INC
22650: ST_TO_ADDR
22651: LD_INT 1
22653: PUSH
22654: FOR_DOWNTO
22655: IFFALSE 22905
// begin side := GetSide ( minersList [ i ] ) ;
22657: LD_ADDR_VAR 0 3
22661: PUSH
22662: LD_EXP 101
22666: PUSH
22667: LD_VAR 0 1
22671: ARRAY
22672: PPUSH
22673: CALL_OW 255
22677: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22678: LD_ADDR_VAR 0 4
22682: PUSH
22683: LD_EXP 102
22687: PUSH
22688: LD_VAR 0 1
22692: ARRAY
22693: PUSH
22694: LD_VAR 0 2
22698: ARRAY
22699: PUSH
22700: LD_INT 1
22702: ARRAY
22703: PPUSH
22704: LD_EXP 102
22708: PUSH
22709: LD_VAR 0 1
22713: ARRAY
22714: PUSH
22715: LD_VAR 0 2
22719: ARRAY
22720: PUSH
22721: LD_INT 2
22723: ARRAY
22724: PPUSH
22725: CALL_OW 428
22729: ST_TO_ADDR
// if not tmp then
22730: LD_VAR 0 4
22734: NOT
22735: IFFALSE 22739
// continue ;
22737: GO 22654
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22739: LD_VAR 0 4
22743: PUSH
22744: LD_INT 81
22746: PUSH
22747: LD_VAR 0 3
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PPUSH
22756: CALL_OW 69
22760: IN
22761: PUSH
22762: LD_EXP 102
22766: PUSH
22767: LD_VAR 0 1
22771: ARRAY
22772: PUSH
22773: LD_VAR 0 2
22777: ARRAY
22778: PUSH
22779: LD_INT 1
22781: ARRAY
22782: PPUSH
22783: LD_EXP 102
22787: PUSH
22788: LD_VAR 0 1
22792: ARRAY
22793: PUSH
22794: LD_VAR 0 2
22798: ARRAY
22799: PUSH
22800: LD_INT 2
22802: ARRAY
22803: PPUSH
22804: CALL_OW 458
22808: AND
22809: IFFALSE 22903
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22811: LD_EXP 102
22815: PUSH
22816: LD_VAR 0 1
22820: ARRAY
22821: PUSH
22822: LD_VAR 0 2
22826: ARRAY
22827: PUSH
22828: LD_INT 1
22830: ARRAY
22831: PPUSH
22832: LD_EXP 102
22836: PUSH
22837: LD_VAR 0 1
22841: ARRAY
22842: PUSH
22843: LD_VAR 0 2
22847: ARRAY
22848: PUSH
22849: LD_INT 2
22851: ARRAY
22852: PPUSH
22853: LD_VAR 0 3
22857: PPUSH
22858: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22862: LD_ADDR_EXP 102
22866: PUSH
22867: LD_EXP 102
22871: PPUSH
22872: LD_VAR 0 1
22876: PPUSH
22877: LD_EXP 102
22881: PUSH
22882: LD_VAR 0 1
22886: ARRAY
22887: PPUSH
22888: LD_VAR 0 2
22892: PPUSH
22893: CALL_OW 3
22897: PPUSH
22898: CALL_OW 1
22902: ST_TO_ADDR
// end ; end ;
22903: GO 22654
22905: POP
22906: POP
// end ;
22907: GO 22572
22909: POP
22910: POP
// end ;
22911: PPOPN 4
22913: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22914: LD_INT 0
22916: PPUSH
22917: PPUSH
// result := false ;
22918: LD_ADDR_VAR 0 4
22922: PUSH
22923: LD_INT 0
22925: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22926: LD_VAR 0 1
22930: PPUSH
22931: CALL_OW 264
22935: PUSH
22936: LD_EXP 25
22940: EQUAL
22941: NOT
22942: IFFALSE 22946
// exit ;
22944: GO 23186
// index := GetElementIndex ( minersList , unit ) ;
22946: LD_ADDR_VAR 0 5
22950: PUSH
22951: LD_EXP 101
22955: PPUSH
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL 29170 0 2
22965: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22966: LD_EXP 102
22970: PUSH
22971: LD_VAR 0 5
22975: ARRAY
22976: PUSH
22977: LD_EXP 103
22981: GREATEREQUAL
22982: IFFALSE 22986
// exit ;
22984: GO 23186
// ComMoveXY ( unit , x , y ) ;
22986: LD_VAR 0 1
22990: PPUSH
22991: LD_VAR 0 2
22995: PPUSH
22996: LD_VAR 0 3
23000: PPUSH
23001: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23005: LD_INT 35
23007: PPUSH
23008: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23012: LD_VAR 0 1
23016: PPUSH
23017: LD_VAR 0 2
23021: PPUSH
23022: LD_VAR 0 3
23026: PPUSH
23027: CALL 59943 0 3
23031: NOT
23032: PUSH
23033: LD_VAR 0 1
23037: PPUSH
23038: CALL_OW 314
23042: AND
23043: IFFALSE 23047
// exit ;
23045: GO 23186
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23047: LD_VAR 0 2
23051: PPUSH
23052: LD_VAR 0 3
23056: PPUSH
23057: CALL_OW 428
23061: PUSH
23062: LD_VAR 0 1
23066: EQUAL
23067: PUSH
23068: LD_VAR 0 1
23072: PPUSH
23073: CALL_OW 314
23077: NOT
23078: AND
23079: IFFALSE 23005
// PlaySoundXY ( x , y , PlantMine ) ;
23081: LD_VAR 0 2
23085: PPUSH
23086: LD_VAR 0 3
23090: PPUSH
23091: LD_STRING PlantMine
23093: PPUSH
23094: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23098: LD_VAR 0 2
23102: PPUSH
23103: LD_VAR 0 3
23107: PPUSH
23108: LD_VAR 0 1
23112: PPUSH
23113: CALL_OW 255
23117: PPUSH
23118: LD_INT 0
23120: PPUSH
23121: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23125: LD_ADDR_EXP 102
23129: PUSH
23130: LD_EXP 102
23134: PPUSH
23135: LD_VAR 0 5
23139: PUSH
23140: LD_EXP 102
23144: PUSH
23145: LD_VAR 0 5
23149: ARRAY
23150: PUSH
23151: LD_INT 1
23153: PLUS
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PPUSH
23159: LD_VAR 0 2
23163: PUSH
23164: LD_VAR 0 3
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PPUSH
23173: CALL 29385 0 3
23177: ST_TO_ADDR
// result := true ;
23178: LD_ADDR_VAR 0 4
23182: PUSH
23183: LD_INT 1
23185: ST_TO_ADDR
// end ;
23186: LD_VAR 0 4
23190: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23191: LD_INT 0
23193: PPUSH
23194: PPUSH
23195: PPUSH
// if not unit in minersList then
23196: LD_VAR 0 1
23200: PUSH
23201: LD_EXP 101
23205: IN
23206: NOT
23207: IFFALSE 23211
// exit ;
23209: GO 23603
// index := GetElementIndex ( minersList , unit ) ;
23211: LD_ADDR_VAR 0 6
23215: PUSH
23216: LD_EXP 101
23220: PPUSH
23221: LD_VAR 0 1
23225: PPUSH
23226: CALL 29170 0 2
23230: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23231: LD_ADDR_VAR 0 5
23235: PUSH
23236: DOUBLE
23237: LD_EXP 102
23241: PUSH
23242: LD_VAR 0 6
23246: ARRAY
23247: INC
23248: ST_TO_ADDR
23249: LD_INT 1
23251: PUSH
23252: FOR_DOWNTO
23253: IFFALSE 23414
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23255: LD_EXP 102
23259: PUSH
23260: LD_VAR 0 6
23264: ARRAY
23265: PUSH
23266: LD_VAR 0 5
23270: ARRAY
23271: PUSH
23272: LD_INT 1
23274: ARRAY
23275: PUSH
23276: LD_VAR 0 2
23280: EQUAL
23281: PUSH
23282: LD_EXP 102
23286: PUSH
23287: LD_VAR 0 6
23291: ARRAY
23292: PUSH
23293: LD_VAR 0 5
23297: ARRAY
23298: PUSH
23299: LD_INT 2
23301: ARRAY
23302: PUSH
23303: LD_VAR 0 3
23307: EQUAL
23308: AND
23309: IFFALSE 23412
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23311: LD_EXP 102
23315: PUSH
23316: LD_VAR 0 6
23320: ARRAY
23321: PUSH
23322: LD_VAR 0 5
23326: ARRAY
23327: PUSH
23328: LD_INT 1
23330: ARRAY
23331: PPUSH
23332: LD_EXP 102
23336: PUSH
23337: LD_VAR 0 6
23341: ARRAY
23342: PUSH
23343: LD_VAR 0 5
23347: ARRAY
23348: PUSH
23349: LD_INT 2
23351: ARRAY
23352: PPUSH
23353: LD_VAR 0 1
23357: PPUSH
23358: CALL_OW 255
23362: PPUSH
23363: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23367: LD_ADDR_EXP 102
23371: PUSH
23372: LD_EXP 102
23376: PPUSH
23377: LD_VAR 0 6
23381: PPUSH
23382: LD_EXP 102
23386: PUSH
23387: LD_VAR 0 6
23391: ARRAY
23392: PPUSH
23393: LD_VAR 0 5
23397: PPUSH
23398: CALL_OW 3
23402: PPUSH
23403: CALL_OW 1
23407: ST_TO_ADDR
// exit ;
23408: POP
23409: POP
23410: GO 23603
// end ; end ;
23412: GO 23252
23414: POP
23415: POP
// for i := minerMinesList [ index ] downto 1 do
23416: LD_ADDR_VAR 0 5
23420: PUSH
23421: DOUBLE
23422: LD_EXP 102
23426: PUSH
23427: LD_VAR 0 6
23431: ARRAY
23432: INC
23433: ST_TO_ADDR
23434: LD_INT 1
23436: PUSH
23437: FOR_DOWNTO
23438: IFFALSE 23601
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23440: LD_EXP 102
23444: PUSH
23445: LD_VAR 0 6
23449: ARRAY
23450: PUSH
23451: LD_VAR 0 5
23455: ARRAY
23456: PUSH
23457: LD_INT 1
23459: ARRAY
23460: PPUSH
23461: LD_EXP 102
23465: PUSH
23466: LD_VAR 0 6
23470: ARRAY
23471: PUSH
23472: LD_VAR 0 5
23476: ARRAY
23477: PUSH
23478: LD_INT 2
23480: ARRAY
23481: PPUSH
23482: LD_VAR 0 2
23486: PPUSH
23487: LD_VAR 0 3
23491: PPUSH
23492: CALL_OW 298
23496: PUSH
23497: LD_INT 6
23499: LESS
23500: IFFALSE 23599
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23502: LD_EXP 102
23506: PUSH
23507: LD_VAR 0 6
23511: ARRAY
23512: PUSH
23513: LD_VAR 0 5
23517: ARRAY
23518: PUSH
23519: LD_INT 1
23521: ARRAY
23522: PPUSH
23523: LD_EXP 102
23527: PUSH
23528: LD_VAR 0 6
23532: ARRAY
23533: PUSH
23534: LD_VAR 0 5
23538: ARRAY
23539: PUSH
23540: LD_INT 2
23542: ARRAY
23543: PPUSH
23544: LD_VAR 0 1
23548: PPUSH
23549: CALL_OW 255
23553: PPUSH
23554: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23558: LD_ADDR_EXP 102
23562: PUSH
23563: LD_EXP 102
23567: PPUSH
23568: LD_VAR 0 6
23572: PPUSH
23573: LD_EXP 102
23577: PUSH
23578: LD_VAR 0 6
23582: ARRAY
23583: PPUSH
23584: LD_VAR 0 5
23588: PPUSH
23589: CALL_OW 3
23593: PPUSH
23594: CALL_OW 1
23598: ST_TO_ADDR
// end ; end ;
23599: GO 23437
23601: POP
23602: POP
// end ;
23603: LD_VAR 0 4
23607: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23608: LD_INT 0
23610: PPUSH
23611: PPUSH
23612: PPUSH
23613: PPUSH
23614: PPUSH
23615: PPUSH
23616: PPUSH
23617: PPUSH
23618: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23619: LD_VAR 0 1
23623: PPUSH
23624: CALL_OW 264
23628: PUSH
23629: LD_EXP 25
23633: EQUAL
23634: NOT
23635: PUSH
23636: LD_VAR 0 1
23640: PUSH
23641: LD_EXP 101
23645: IN
23646: NOT
23647: OR
23648: IFFALSE 23652
// exit ;
23650: GO 23974
// index := GetElementIndex ( minersList , unit ) ;
23652: LD_ADDR_VAR 0 6
23656: PUSH
23657: LD_EXP 101
23661: PPUSH
23662: LD_VAR 0 1
23666: PPUSH
23667: CALL 29170 0 2
23671: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23672: LD_ADDR_VAR 0 8
23676: PUSH
23677: LD_EXP 103
23681: PUSH
23682: LD_EXP 102
23686: PUSH
23687: LD_VAR 0 6
23691: ARRAY
23692: MINUS
23693: ST_TO_ADDR
// if not minesFreeAmount then
23694: LD_VAR 0 8
23698: NOT
23699: IFFALSE 23703
// exit ;
23701: GO 23974
// tmp := [ ] ;
23703: LD_ADDR_VAR 0 7
23707: PUSH
23708: EMPTY
23709: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23710: LD_ADDR_VAR 0 5
23714: PUSH
23715: DOUBLE
23716: LD_INT 1
23718: DEC
23719: ST_TO_ADDR
23720: LD_VAR 0 8
23724: PUSH
23725: FOR_TO
23726: IFFALSE 23921
// begin _d := rand ( 0 , 5 ) ;
23728: LD_ADDR_VAR 0 11
23732: PUSH
23733: LD_INT 0
23735: PPUSH
23736: LD_INT 5
23738: PPUSH
23739: CALL_OW 12
23743: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23744: LD_ADDR_VAR 0 12
23748: PUSH
23749: LD_INT 2
23751: PPUSH
23752: LD_INT 6
23754: PPUSH
23755: CALL_OW 12
23759: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23760: LD_ADDR_VAR 0 9
23764: PUSH
23765: LD_VAR 0 2
23769: PPUSH
23770: LD_VAR 0 11
23774: PPUSH
23775: LD_VAR 0 12
23779: PPUSH
23780: CALL_OW 272
23784: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23785: LD_ADDR_VAR 0 10
23789: PUSH
23790: LD_VAR 0 3
23794: PPUSH
23795: LD_VAR 0 11
23799: PPUSH
23800: LD_VAR 0 12
23804: PPUSH
23805: CALL_OW 273
23809: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23810: LD_VAR 0 9
23814: PPUSH
23815: LD_VAR 0 10
23819: PPUSH
23820: CALL_OW 488
23824: PUSH
23825: LD_VAR 0 9
23829: PUSH
23830: LD_VAR 0 10
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_VAR 0 7
23843: IN
23844: NOT
23845: AND
23846: PUSH
23847: LD_VAR 0 9
23851: PPUSH
23852: LD_VAR 0 10
23856: PPUSH
23857: CALL_OW 458
23861: NOT
23862: AND
23863: IFFALSE 23905
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23865: LD_ADDR_VAR 0 7
23869: PUSH
23870: LD_VAR 0 7
23874: PPUSH
23875: LD_VAR 0 7
23879: PUSH
23880: LD_INT 1
23882: PLUS
23883: PPUSH
23884: LD_VAR 0 9
23888: PUSH
23889: LD_VAR 0 10
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PPUSH
23898: CALL_OW 1
23902: ST_TO_ADDR
23903: GO 23919
// i := i - 1 ;
23905: LD_ADDR_VAR 0 5
23909: PUSH
23910: LD_VAR 0 5
23914: PUSH
23915: LD_INT 1
23917: MINUS
23918: ST_TO_ADDR
// end ;
23919: GO 23725
23921: POP
23922: POP
// for i in tmp do
23923: LD_ADDR_VAR 0 5
23927: PUSH
23928: LD_VAR 0 7
23932: PUSH
23933: FOR_IN
23934: IFFALSE 23972
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23936: LD_VAR 0 1
23940: PPUSH
23941: LD_VAR 0 5
23945: PUSH
23946: LD_INT 1
23948: ARRAY
23949: PPUSH
23950: LD_VAR 0 5
23954: PUSH
23955: LD_INT 2
23957: ARRAY
23958: PPUSH
23959: CALL 22914 0 3
23963: NOT
23964: IFFALSE 23970
// exit ;
23966: POP
23967: POP
23968: GO 23974
23970: GO 23933
23972: POP
23973: POP
// end ;
23974: LD_VAR 0 4
23978: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23979: LD_INT 0
23981: PPUSH
23982: PPUSH
23983: PPUSH
23984: PPUSH
23985: PPUSH
23986: PPUSH
23987: PPUSH
// if not GetClass ( unit ) = class_sniper then
23988: LD_VAR 0 1
23992: PPUSH
23993: CALL_OW 257
23997: PUSH
23998: LD_INT 5
24000: EQUAL
24001: NOT
24002: IFFALSE 24006
// exit ;
24004: GO 24394
// dist := 8 ;
24006: LD_ADDR_VAR 0 5
24010: PUSH
24011: LD_INT 8
24013: ST_TO_ADDR
// viewRange := 12 ;
24014: LD_ADDR_VAR 0 7
24018: PUSH
24019: LD_INT 12
24021: ST_TO_ADDR
// side := GetSide ( unit ) ;
24022: LD_ADDR_VAR 0 6
24026: PUSH
24027: LD_VAR 0 1
24031: PPUSH
24032: CALL_OW 255
24036: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24037: LD_INT 61
24039: PPUSH
24040: LD_VAR 0 6
24044: PPUSH
24045: CALL_OW 321
24049: PUSH
24050: LD_INT 2
24052: EQUAL
24053: IFFALSE 24063
// viewRange := 16 ;
24055: LD_ADDR_VAR 0 7
24059: PUSH
24060: LD_INT 16
24062: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24063: LD_VAR 0 1
24067: PPUSH
24068: LD_VAR 0 2
24072: PPUSH
24073: LD_VAR 0 3
24077: PPUSH
24078: CALL_OW 297
24082: PUSH
24083: LD_VAR 0 5
24087: GREATER
24088: IFFALSE 24167
// begin ComMoveXY ( unit , x , y ) ;
24090: LD_VAR 0 1
24094: PPUSH
24095: LD_VAR 0 2
24099: PPUSH
24100: LD_VAR 0 3
24104: PPUSH
24105: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24109: LD_INT 35
24111: PPUSH
24112: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24116: LD_VAR 0 1
24120: PPUSH
24121: LD_VAR 0 2
24125: PPUSH
24126: LD_VAR 0 3
24130: PPUSH
24131: CALL 59943 0 3
24135: NOT
24136: IFFALSE 24140
// exit ;
24138: GO 24394
// until GetDistUnitXY ( unit , x , y ) < dist ;
24140: LD_VAR 0 1
24144: PPUSH
24145: LD_VAR 0 2
24149: PPUSH
24150: LD_VAR 0 3
24154: PPUSH
24155: CALL_OW 297
24159: PUSH
24160: LD_VAR 0 5
24164: LESS
24165: IFFALSE 24109
// end ; ComTurnXY ( unit , x , y ) ;
24167: LD_VAR 0 1
24171: PPUSH
24172: LD_VAR 0 2
24176: PPUSH
24177: LD_VAR 0 3
24181: PPUSH
24182: CALL_OW 118
// wait ( 5 ) ;
24186: LD_INT 5
24188: PPUSH
24189: CALL_OW 67
// _d := GetDir ( unit ) ;
24193: LD_ADDR_VAR 0 10
24197: PUSH
24198: LD_VAR 0 1
24202: PPUSH
24203: CALL_OW 254
24207: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24208: LD_ADDR_VAR 0 8
24212: PUSH
24213: LD_VAR 0 1
24217: PPUSH
24218: CALL_OW 250
24222: PPUSH
24223: LD_VAR 0 10
24227: PPUSH
24228: LD_VAR 0 5
24232: PPUSH
24233: CALL_OW 272
24237: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24238: LD_ADDR_VAR 0 9
24242: PUSH
24243: LD_VAR 0 1
24247: PPUSH
24248: CALL_OW 251
24252: PPUSH
24253: LD_VAR 0 10
24257: PPUSH
24258: LD_VAR 0 5
24262: PPUSH
24263: CALL_OW 273
24267: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24268: LD_VAR 0 8
24272: PPUSH
24273: LD_VAR 0 9
24277: PPUSH
24278: CALL_OW 488
24282: NOT
24283: IFFALSE 24287
// exit ;
24285: GO 24394
// ComAnimCustom ( unit , 1 ) ;
24287: LD_VAR 0 1
24291: PPUSH
24292: LD_INT 1
24294: PPUSH
24295: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24299: LD_VAR 0 8
24303: PPUSH
24304: LD_VAR 0 9
24308: PPUSH
24309: LD_VAR 0 6
24313: PPUSH
24314: LD_VAR 0 7
24318: PPUSH
24319: CALL_OW 330
// repeat wait ( 1 ) ;
24323: LD_INT 1
24325: PPUSH
24326: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24330: LD_VAR 0 1
24334: PPUSH
24335: CALL_OW 316
24339: PUSH
24340: LD_VAR 0 1
24344: PPUSH
24345: CALL_OW 314
24349: OR
24350: PUSH
24351: LD_VAR 0 1
24355: PPUSH
24356: CALL_OW 302
24360: NOT
24361: OR
24362: PUSH
24363: LD_VAR 0 1
24367: PPUSH
24368: CALL_OW 301
24372: OR
24373: IFFALSE 24323
// RemoveSeeing ( _x , _y , side ) ;
24375: LD_VAR 0 8
24379: PPUSH
24380: LD_VAR 0 9
24384: PPUSH
24385: LD_VAR 0 6
24389: PPUSH
24390: CALL_OW 331
// end ; end_of_file
24394: LD_VAR 0 4
24398: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24399: LD_INT 0
24401: PPUSH
24402: PPUSH
// if exist_mode then
24403: LD_VAR 0 2
24407: IFFALSE 24432
// unit := CreateCharacter ( prefix & ident ) else
24409: LD_ADDR_VAR 0 5
24413: PUSH
24414: LD_VAR 0 3
24418: PUSH
24419: LD_VAR 0 1
24423: STR
24424: PPUSH
24425: CALL_OW 34
24429: ST_TO_ADDR
24430: GO 24447
// unit := NewCharacter ( ident ) ;
24432: LD_ADDR_VAR 0 5
24436: PUSH
24437: LD_VAR 0 1
24441: PPUSH
24442: CALL_OW 25
24446: ST_TO_ADDR
// result := unit ;
24447: LD_ADDR_VAR 0 4
24451: PUSH
24452: LD_VAR 0 5
24456: ST_TO_ADDR
// end ;
24457: LD_VAR 0 4
24461: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24462: LD_INT 0
24464: PPUSH
24465: PPUSH
// if not side or not nation then
24466: LD_VAR 0 1
24470: NOT
24471: PUSH
24472: LD_VAR 0 2
24476: NOT
24477: OR
24478: IFFALSE 24482
// exit ;
24480: GO 25250
// case nation of nation_american :
24482: LD_VAR 0 2
24486: PUSH
24487: LD_INT 1
24489: DOUBLE
24490: EQUAL
24491: IFTRUE 24495
24493: GO 24709
24495: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24496: LD_ADDR_VAR 0 4
24500: PUSH
24501: LD_INT 35
24503: PUSH
24504: LD_INT 45
24506: PUSH
24507: LD_INT 46
24509: PUSH
24510: LD_INT 47
24512: PUSH
24513: LD_INT 82
24515: PUSH
24516: LD_INT 83
24518: PUSH
24519: LD_INT 84
24521: PUSH
24522: LD_INT 85
24524: PUSH
24525: LD_INT 86
24527: PUSH
24528: LD_INT 1
24530: PUSH
24531: LD_INT 2
24533: PUSH
24534: LD_INT 6
24536: PUSH
24537: LD_INT 15
24539: PUSH
24540: LD_INT 16
24542: PUSH
24543: LD_INT 7
24545: PUSH
24546: LD_INT 12
24548: PUSH
24549: LD_INT 13
24551: PUSH
24552: LD_INT 10
24554: PUSH
24555: LD_INT 14
24557: PUSH
24558: LD_INT 20
24560: PUSH
24561: LD_INT 21
24563: PUSH
24564: LD_INT 22
24566: PUSH
24567: LD_INT 25
24569: PUSH
24570: LD_INT 32
24572: PUSH
24573: LD_INT 27
24575: PUSH
24576: LD_INT 36
24578: PUSH
24579: LD_INT 69
24581: PUSH
24582: LD_INT 39
24584: PUSH
24585: LD_INT 34
24587: PUSH
24588: LD_INT 40
24590: PUSH
24591: LD_INT 48
24593: PUSH
24594: LD_INT 49
24596: PUSH
24597: LD_INT 50
24599: PUSH
24600: LD_INT 51
24602: PUSH
24603: LD_INT 52
24605: PUSH
24606: LD_INT 53
24608: PUSH
24609: LD_INT 54
24611: PUSH
24612: LD_INT 55
24614: PUSH
24615: LD_INT 56
24617: PUSH
24618: LD_INT 57
24620: PUSH
24621: LD_INT 58
24623: PUSH
24624: LD_INT 59
24626: PUSH
24627: LD_INT 60
24629: PUSH
24630: LD_INT 61
24632: PUSH
24633: LD_INT 62
24635: PUSH
24636: LD_INT 80
24638: PUSH
24639: LD_INT 82
24641: PUSH
24642: LD_INT 83
24644: PUSH
24645: LD_INT 84
24647: PUSH
24648: LD_INT 85
24650: PUSH
24651: LD_INT 86
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: ST_TO_ADDR
24707: GO 25174
24709: LD_INT 2
24711: DOUBLE
24712: EQUAL
24713: IFTRUE 24717
24715: GO 24943
24717: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24718: LD_ADDR_VAR 0 4
24722: PUSH
24723: LD_INT 35
24725: PUSH
24726: LD_INT 45
24728: PUSH
24729: LD_INT 46
24731: PUSH
24732: LD_INT 47
24734: PUSH
24735: LD_INT 82
24737: PUSH
24738: LD_INT 83
24740: PUSH
24741: LD_INT 84
24743: PUSH
24744: LD_INT 85
24746: PUSH
24747: LD_INT 87
24749: PUSH
24750: LD_INT 70
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: LD_INT 11
24758: PUSH
24759: LD_INT 3
24761: PUSH
24762: LD_INT 4
24764: PUSH
24765: LD_INT 5
24767: PUSH
24768: LD_INT 6
24770: PUSH
24771: LD_INT 15
24773: PUSH
24774: LD_INT 18
24776: PUSH
24777: LD_INT 7
24779: PUSH
24780: LD_INT 17
24782: PUSH
24783: LD_INT 8
24785: PUSH
24786: LD_INT 20
24788: PUSH
24789: LD_INT 21
24791: PUSH
24792: LD_INT 22
24794: PUSH
24795: LD_INT 72
24797: PUSH
24798: LD_INT 26
24800: PUSH
24801: LD_INT 69
24803: PUSH
24804: LD_INT 39
24806: PUSH
24807: LD_INT 40
24809: PUSH
24810: LD_INT 41
24812: PUSH
24813: LD_INT 42
24815: PUSH
24816: LD_INT 43
24818: PUSH
24819: LD_INT 48
24821: PUSH
24822: LD_INT 49
24824: PUSH
24825: LD_INT 50
24827: PUSH
24828: LD_INT 51
24830: PUSH
24831: LD_INT 52
24833: PUSH
24834: LD_INT 53
24836: PUSH
24837: LD_INT 54
24839: PUSH
24840: LD_INT 55
24842: PUSH
24843: LD_INT 56
24845: PUSH
24846: LD_INT 60
24848: PUSH
24849: LD_INT 61
24851: PUSH
24852: LD_INT 62
24854: PUSH
24855: LD_INT 66
24857: PUSH
24858: LD_INT 67
24860: PUSH
24861: LD_INT 68
24863: PUSH
24864: LD_INT 81
24866: PUSH
24867: LD_INT 82
24869: PUSH
24870: LD_INT 83
24872: PUSH
24873: LD_INT 84
24875: PUSH
24876: LD_INT 85
24878: PUSH
24879: LD_INT 87
24881: PUSH
24882: LD_INT 88
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: ST_TO_ADDR
24941: GO 25174
24943: LD_INT 3
24945: DOUBLE
24946: EQUAL
24947: IFTRUE 24951
24949: GO 25173
24951: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24952: LD_ADDR_VAR 0 4
24956: PUSH
24957: LD_INT 46
24959: PUSH
24960: LD_INT 47
24962: PUSH
24963: LD_INT 1
24965: PUSH
24966: LD_INT 2
24968: PUSH
24969: LD_INT 82
24971: PUSH
24972: LD_INT 83
24974: PUSH
24975: LD_INT 84
24977: PUSH
24978: LD_INT 85
24980: PUSH
24981: LD_INT 86
24983: PUSH
24984: LD_INT 11
24986: PUSH
24987: LD_INT 9
24989: PUSH
24990: LD_INT 20
24992: PUSH
24993: LD_INT 19
24995: PUSH
24996: LD_INT 21
24998: PUSH
24999: LD_INT 24
25001: PUSH
25002: LD_INT 22
25004: PUSH
25005: LD_INT 25
25007: PUSH
25008: LD_INT 28
25010: PUSH
25011: LD_INT 29
25013: PUSH
25014: LD_INT 30
25016: PUSH
25017: LD_INT 31
25019: PUSH
25020: LD_INT 37
25022: PUSH
25023: LD_INT 38
25025: PUSH
25026: LD_INT 32
25028: PUSH
25029: LD_INT 27
25031: PUSH
25032: LD_INT 33
25034: PUSH
25035: LD_INT 69
25037: PUSH
25038: LD_INT 39
25040: PUSH
25041: LD_INT 34
25043: PUSH
25044: LD_INT 40
25046: PUSH
25047: LD_INT 71
25049: PUSH
25050: LD_INT 23
25052: PUSH
25053: LD_INT 44
25055: PUSH
25056: LD_INT 48
25058: PUSH
25059: LD_INT 49
25061: PUSH
25062: LD_INT 50
25064: PUSH
25065: LD_INT 51
25067: PUSH
25068: LD_INT 52
25070: PUSH
25071: LD_INT 53
25073: PUSH
25074: LD_INT 54
25076: PUSH
25077: LD_INT 55
25079: PUSH
25080: LD_INT 56
25082: PUSH
25083: LD_INT 57
25085: PUSH
25086: LD_INT 58
25088: PUSH
25089: LD_INT 59
25091: PUSH
25092: LD_INT 63
25094: PUSH
25095: LD_INT 64
25097: PUSH
25098: LD_INT 65
25100: PUSH
25101: LD_INT 82
25103: PUSH
25104: LD_INT 83
25106: PUSH
25107: LD_INT 84
25109: PUSH
25110: LD_INT 85
25112: PUSH
25113: LD_INT 86
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: ST_TO_ADDR
25171: GO 25174
25173: POP
// if state > - 1 and state < 3 then
25174: LD_VAR 0 3
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: GREATER
25183: PUSH
25184: LD_VAR 0 3
25188: PUSH
25189: LD_INT 3
25191: LESS
25192: AND
25193: IFFALSE 25250
// for i in result do
25195: LD_ADDR_VAR 0 5
25199: PUSH
25200: LD_VAR 0 4
25204: PUSH
25205: FOR_IN
25206: IFFALSE 25248
// if GetTech ( i , side ) <> state then
25208: LD_VAR 0 5
25212: PPUSH
25213: LD_VAR 0 1
25217: PPUSH
25218: CALL_OW 321
25222: PUSH
25223: LD_VAR 0 3
25227: NONEQUAL
25228: IFFALSE 25246
// result := result diff i ;
25230: LD_ADDR_VAR 0 4
25234: PUSH
25235: LD_VAR 0 4
25239: PUSH
25240: LD_VAR 0 5
25244: DIFF
25245: ST_TO_ADDR
25246: GO 25205
25248: POP
25249: POP
// end ;
25250: LD_VAR 0 4
25254: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25255: LD_INT 0
25257: PPUSH
25258: PPUSH
25259: PPUSH
// result := true ;
25260: LD_ADDR_VAR 0 3
25264: PUSH
25265: LD_INT 1
25267: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25268: LD_ADDR_VAR 0 5
25272: PUSH
25273: LD_VAR 0 2
25277: PPUSH
25278: CALL_OW 480
25282: ST_TO_ADDR
// if not tmp then
25283: LD_VAR 0 5
25287: NOT
25288: IFFALSE 25292
// exit ;
25290: GO 25341
// for i in tmp do
25292: LD_ADDR_VAR 0 4
25296: PUSH
25297: LD_VAR 0 5
25301: PUSH
25302: FOR_IN
25303: IFFALSE 25339
// if GetTech ( i , side ) <> state_researched then
25305: LD_VAR 0 4
25309: PPUSH
25310: LD_VAR 0 1
25314: PPUSH
25315: CALL_OW 321
25319: PUSH
25320: LD_INT 2
25322: NONEQUAL
25323: IFFALSE 25337
// begin result := false ;
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: LD_INT 0
25332: ST_TO_ADDR
// exit ;
25333: POP
25334: POP
25335: GO 25341
// end ;
25337: GO 25302
25339: POP
25340: POP
// end ;
25341: LD_VAR 0 3
25345: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25346: LD_INT 0
25348: PPUSH
25349: PPUSH
25350: PPUSH
25351: PPUSH
25352: PPUSH
25353: PPUSH
25354: PPUSH
25355: PPUSH
25356: PPUSH
25357: PPUSH
25358: PPUSH
25359: PPUSH
25360: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25361: LD_VAR 0 1
25365: NOT
25366: PUSH
25367: LD_VAR 0 1
25371: PPUSH
25372: CALL_OW 257
25376: PUSH
25377: LD_INT 9
25379: NONEQUAL
25380: OR
25381: IFFALSE 25385
// exit ;
25383: GO 25958
// side := GetSide ( unit ) ;
25385: LD_ADDR_VAR 0 9
25389: PUSH
25390: LD_VAR 0 1
25394: PPUSH
25395: CALL_OW 255
25399: ST_TO_ADDR
// tech_space := tech_spacanom ;
25400: LD_ADDR_VAR 0 12
25404: PUSH
25405: LD_INT 29
25407: ST_TO_ADDR
// tech_time := tech_taurad ;
25408: LD_ADDR_VAR 0 13
25412: PUSH
25413: LD_INT 28
25415: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25416: LD_ADDR_VAR 0 11
25420: PUSH
25421: LD_VAR 0 1
25425: PPUSH
25426: CALL_OW 310
25430: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25431: LD_VAR 0 11
25435: PPUSH
25436: CALL_OW 247
25440: PUSH
25441: LD_INT 2
25443: EQUAL
25444: IFFALSE 25448
// exit ;
25446: GO 25958
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25448: LD_ADDR_VAR 0 8
25452: PUSH
25453: LD_INT 81
25455: PUSH
25456: LD_VAR 0 9
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 3
25467: PUSH
25468: LD_INT 21
25470: PUSH
25471: LD_INT 3
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PPUSH
25486: CALL_OW 69
25490: ST_TO_ADDR
// if not tmp then
25491: LD_VAR 0 8
25495: NOT
25496: IFFALSE 25500
// exit ;
25498: GO 25958
// if in_unit then
25500: LD_VAR 0 11
25504: IFFALSE 25528
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25506: LD_ADDR_VAR 0 10
25510: PUSH
25511: LD_VAR 0 8
25515: PPUSH
25516: LD_VAR 0 11
25520: PPUSH
25521: CALL_OW 74
25525: ST_TO_ADDR
25526: GO 25548
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25528: LD_ADDR_VAR 0 10
25532: PUSH
25533: LD_VAR 0 8
25537: PPUSH
25538: LD_VAR 0 1
25542: PPUSH
25543: CALL_OW 74
25547: ST_TO_ADDR
// if not enemy then
25548: LD_VAR 0 10
25552: NOT
25553: IFFALSE 25557
// exit ;
25555: GO 25958
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25557: LD_VAR 0 11
25561: PUSH
25562: LD_VAR 0 11
25566: PPUSH
25567: LD_VAR 0 10
25571: PPUSH
25572: CALL_OW 296
25576: PUSH
25577: LD_INT 13
25579: GREATER
25580: AND
25581: PUSH
25582: LD_VAR 0 1
25586: PPUSH
25587: LD_VAR 0 10
25591: PPUSH
25592: CALL_OW 296
25596: PUSH
25597: LD_INT 12
25599: GREATER
25600: OR
25601: IFFALSE 25605
// exit ;
25603: GO 25958
// missile := [ 1 ] ;
25605: LD_ADDR_VAR 0 14
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: EMPTY
25614: LIST
25615: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25616: LD_VAR 0 9
25620: PPUSH
25621: LD_VAR 0 12
25625: PPUSH
25626: CALL_OW 325
25630: IFFALSE 25659
// missile := Insert ( missile , missile + 1 , 2 ) ;
25632: LD_ADDR_VAR 0 14
25636: PUSH
25637: LD_VAR 0 14
25641: PPUSH
25642: LD_VAR 0 14
25646: PUSH
25647: LD_INT 1
25649: PLUS
25650: PPUSH
25651: LD_INT 2
25653: PPUSH
25654: CALL_OW 2
25658: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25659: LD_VAR 0 9
25663: PPUSH
25664: LD_VAR 0 13
25668: PPUSH
25669: CALL_OW 325
25673: PUSH
25674: LD_VAR 0 10
25678: PPUSH
25679: CALL_OW 255
25683: PPUSH
25684: LD_VAR 0 13
25688: PPUSH
25689: CALL_OW 325
25693: NOT
25694: AND
25695: IFFALSE 25724
// missile := Insert ( missile , missile + 1 , 3 ) ;
25697: LD_ADDR_VAR 0 14
25701: PUSH
25702: LD_VAR 0 14
25706: PPUSH
25707: LD_VAR 0 14
25711: PUSH
25712: LD_INT 1
25714: PLUS
25715: PPUSH
25716: LD_INT 3
25718: PPUSH
25719: CALL_OW 2
25723: ST_TO_ADDR
// if missile < 2 then
25724: LD_VAR 0 14
25728: PUSH
25729: LD_INT 2
25731: LESS
25732: IFFALSE 25736
// exit ;
25734: GO 25958
// x := GetX ( enemy ) ;
25736: LD_ADDR_VAR 0 4
25740: PUSH
25741: LD_VAR 0 10
25745: PPUSH
25746: CALL_OW 250
25750: ST_TO_ADDR
// y := GetY ( enemy ) ;
25751: LD_ADDR_VAR 0 5
25755: PUSH
25756: LD_VAR 0 10
25760: PPUSH
25761: CALL_OW 251
25765: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25766: LD_ADDR_VAR 0 6
25770: PUSH
25771: LD_VAR 0 4
25775: PUSH
25776: LD_INT 1
25778: NEG
25779: PPUSH
25780: LD_INT 1
25782: PPUSH
25783: CALL_OW 12
25787: PLUS
25788: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25789: LD_ADDR_VAR 0 7
25793: PUSH
25794: LD_VAR 0 5
25798: PUSH
25799: LD_INT 1
25801: NEG
25802: PPUSH
25803: LD_INT 1
25805: PPUSH
25806: CALL_OW 12
25810: PLUS
25811: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25812: LD_VAR 0 6
25816: PPUSH
25817: LD_VAR 0 7
25821: PPUSH
25822: CALL_OW 488
25826: NOT
25827: IFFALSE 25849
// begin _x := x ;
25829: LD_ADDR_VAR 0 6
25833: PUSH
25834: LD_VAR 0 4
25838: ST_TO_ADDR
// _y := y ;
25839: LD_ADDR_VAR 0 7
25843: PUSH
25844: LD_VAR 0 5
25848: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25849: LD_ADDR_VAR 0 3
25853: PUSH
25854: LD_INT 1
25856: PPUSH
25857: LD_VAR 0 14
25861: PPUSH
25862: CALL_OW 12
25866: ST_TO_ADDR
// case i of 1 :
25867: LD_VAR 0 3
25871: PUSH
25872: LD_INT 1
25874: DOUBLE
25875: EQUAL
25876: IFTRUE 25880
25878: GO 25897
25880: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25881: LD_VAR 0 1
25885: PPUSH
25886: LD_VAR 0 10
25890: PPUSH
25891: CALL_OW 115
25895: GO 25958
25897: LD_INT 2
25899: DOUBLE
25900: EQUAL
25901: IFTRUE 25905
25903: GO 25927
25905: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25906: LD_VAR 0 1
25910: PPUSH
25911: LD_VAR 0 6
25915: PPUSH
25916: LD_VAR 0 7
25920: PPUSH
25921: CALL_OW 153
25925: GO 25958
25927: LD_INT 3
25929: DOUBLE
25930: EQUAL
25931: IFTRUE 25935
25933: GO 25957
25935: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25936: LD_VAR 0 1
25940: PPUSH
25941: LD_VAR 0 6
25945: PPUSH
25946: LD_VAR 0 7
25950: PPUSH
25951: CALL_OW 154
25955: GO 25958
25957: POP
// end ;
25958: LD_VAR 0 2
25962: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25963: LD_INT 0
25965: PPUSH
25966: PPUSH
25967: PPUSH
25968: PPUSH
25969: PPUSH
25970: PPUSH
// if not unit or not building then
25971: LD_VAR 0 1
25975: NOT
25976: PUSH
25977: LD_VAR 0 2
25981: NOT
25982: OR
25983: IFFALSE 25987
// exit ;
25985: GO 26145
// x := GetX ( building ) ;
25987: LD_ADDR_VAR 0 5
25991: PUSH
25992: LD_VAR 0 2
25996: PPUSH
25997: CALL_OW 250
26001: ST_TO_ADDR
// y := GetY ( building ) ;
26002: LD_ADDR_VAR 0 6
26006: PUSH
26007: LD_VAR 0 2
26011: PPUSH
26012: CALL_OW 251
26016: ST_TO_ADDR
// for i = 0 to 5 do
26017: LD_ADDR_VAR 0 4
26021: PUSH
26022: DOUBLE
26023: LD_INT 0
26025: DEC
26026: ST_TO_ADDR
26027: LD_INT 5
26029: PUSH
26030: FOR_TO
26031: IFFALSE 26143
// begin _x := ShiftX ( x , i , 3 ) ;
26033: LD_ADDR_VAR 0 7
26037: PUSH
26038: LD_VAR 0 5
26042: PPUSH
26043: LD_VAR 0 4
26047: PPUSH
26048: LD_INT 3
26050: PPUSH
26051: CALL_OW 272
26055: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26056: LD_ADDR_VAR 0 8
26060: PUSH
26061: LD_VAR 0 6
26065: PPUSH
26066: LD_VAR 0 4
26070: PPUSH
26071: LD_INT 3
26073: PPUSH
26074: CALL_OW 273
26078: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26079: LD_VAR 0 7
26083: PPUSH
26084: LD_VAR 0 8
26088: PPUSH
26089: CALL_OW 488
26093: NOT
26094: IFFALSE 26098
// continue ;
26096: GO 26030
// if HexInfo ( _x , _y ) = 0 then
26098: LD_VAR 0 7
26102: PPUSH
26103: LD_VAR 0 8
26107: PPUSH
26108: CALL_OW 428
26112: PUSH
26113: LD_INT 0
26115: EQUAL
26116: IFFALSE 26141
// begin ComMoveXY ( unit , _x , _y ) ;
26118: LD_VAR 0 1
26122: PPUSH
26123: LD_VAR 0 7
26127: PPUSH
26128: LD_VAR 0 8
26132: PPUSH
26133: CALL_OW 111
// exit ;
26137: POP
26138: POP
26139: GO 26145
// end ; end ;
26141: GO 26030
26143: POP
26144: POP
// end ;
26145: LD_VAR 0 3
26149: RET
// export function ScanBase ( side , base_area ) ; begin
26150: LD_INT 0
26152: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26153: LD_ADDR_VAR 0 3
26157: PUSH
26158: LD_VAR 0 2
26162: PPUSH
26163: LD_INT 81
26165: PUSH
26166: LD_VAR 0 1
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PPUSH
26175: CALL_OW 70
26179: ST_TO_ADDR
// end ;
26180: LD_VAR 0 3
26184: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26185: LD_INT 0
26187: PPUSH
26188: PPUSH
26189: PPUSH
26190: PPUSH
// result := false ;
26191: LD_ADDR_VAR 0 2
26195: PUSH
26196: LD_INT 0
26198: ST_TO_ADDR
// side := GetSide ( unit ) ;
26199: LD_ADDR_VAR 0 3
26203: PUSH
26204: LD_VAR 0 1
26208: PPUSH
26209: CALL_OW 255
26213: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26214: LD_ADDR_VAR 0 4
26218: PUSH
26219: LD_VAR 0 1
26223: PPUSH
26224: CALL_OW 248
26228: ST_TO_ADDR
// case nat of 1 :
26229: LD_VAR 0 4
26233: PUSH
26234: LD_INT 1
26236: DOUBLE
26237: EQUAL
26238: IFTRUE 26242
26240: GO 26253
26242: POP
// tech := tech_lassight ; 2 :
26243: LD_ADDR_VAR 0 5
26247: PUSH
26248: LD_INT 12
26250: ST_TO_ADDR
26251: GO 26292
26253: LD_INT 2
26255: DOUBLE
26256: EQUAL
26257: IFTRUE 26261
26259: GO 26272
26261: POP
// tech := tech_mortar ; 3 :
26262: LD_ADDR_VAR 0 5
26266: PUSH
26267: LD_INT 41
26269: ST_TO_ADDR
26270: GO 26292
26272: LD_INT 3
26274: DOUBLE
26275: EQUAL
26276: IFTRUE 26280
26278: GO 26291
26280: POP
// tech := tech_bazooka ; end ;
26281: LD_ADDR_VAR 0 5
26285: PUSH
26286: LD_INT 44
26288: ST_TO_ADDR
26289: GO 26292
26291: POP
// if Researched ( side , tech ) then
26292: LD_VAR 0 3
26296: PPUSH
26297: LD_VAR 0 5
26301: PPUSH
26302: CALL_OW 325
26306: IFFALSE 26333
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26308: LD_ADDR_VAR 0 2
26312: PUSH
26313: LD_INT 5
26315: PUSH
26316: LD_INT 8
26318: PUSH
26319: LD_INT 9
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: LIST
26326: PUSH
26327: LD_VAR 0 4
26331: ARRAY
26332: ST_TO_ADDR
// end ;
26333: LD_VAR 0 2
26337: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26338: LD_INT 0
26340: PPUSH
26341: PPUSH
26342: PPUSH
// if not mines then
26343: LD_VAR 0 2
26347: NOT
26348: IFFALSE 26352
// exit ;
26350: GO 26496
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26352: LD_ADDR_VAR 0 5
26356: PUSH
26357: LD_INT 81
26359: PUSH
26360: LD_VAR 0 1
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 3
26371: PUSH
26372: LD_INT 21
26374: PUSH
26375: LD_INT 3
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PPUSH
26390: CALL_OW 69
26394: ST_TO_ADDR
// for i in mines do
26395: LD_ADDR_VAR 0 4
26399: PUSH
26400: LD_VAR 0 2
26404: PUSH
26405: FOR_IN
26406: IFFALSE 26494
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26408: LD_VAR 0 4
26412: PUSH
26413: LD_INT 1
26415: ARRAY
26416: PPUSH
26417: LD_VAR 0 4
26421: PUSH
26422: LD_INT 2
26424: ARRAY
26425: PPUSH
26426: CALL_OW 458
26430: NOT
26431: IFFALSE 26435
// continue ;
26433: GO 26405
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26435: LD_VAR 0 4
26439: PUSH
26440: LD_INT 1
26442: ARRAY
26443: PPUSH
26444: LD_VAR 0 4
26448: PUSH
26449: LD_INT 2
26451: ARRAY
26452: PPUSH
26453: CALL_OW 428
26457: PUSH
26458: LD_VAR 0 5
26462: IN
26463: IFFALSE 26492
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26465: LD_VAR 0 4
26469: PUSH
26470: LD_INT 1
26472: ARRAY
26473: PPUSH
26474: LD_VAR 0 4
26478: PUSH
26479: LD_INT 2
26481: ARRAY
26482: PPUSH
26483: LD_VAR 0 1
26487: PPUSH
26488: CALL_OW 456
// end ;
26492: GO 26405
26494: POP
26495: POP
// end ;
26496: LD_VAR 0 3
26500: RET
// export function Count ( array ) ; var i ; begin
26501: LD_INT 0
26503: PPUSH
26504: PPUSH
// result := 0 ;
26505: LD_ADDR_VAR 0 2
26509: PUSH
26510: LD_INT 0
26512: ST_TO_ADDR
// for i in array do
26513: LD_ADDR_VAR 0 3
26517: PUSH
26518: LD_VAR 0 1
26522: PUSH
26523: FOR_IN
26524: IFFALSE 26548
// if i then
26526: LD_VAR 0 3
26530: IFFALSE 26546
// result := result + 1 ;
26532: LD_ADDR_VAR 0 2
26536: PUSH
26537: LD_VAR 0 2
26541: PUSH
26542: LD_INT 1
26544: PLUS
26545: ST_TO_ADDR
26546: GO 26523
26548: POP
26549: POP
// end ;
26550: LD_VAR 0 2
26554: RET
// export function IsEmpty ( building ) ; begin
26555: LD_INT 0
26557: PPUSH
// if not building then
26558: LD_VAR 0 1
26562: NOT
26563: IFFALSE 26567
// exit ;
26565: GO 26610
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26567: LD_ADDR_VAR 0 2
26571: PUSH
26572: LD_VAR 0 1
26576: PUSH
26577: LD_INT 22
26579: PUSH
26580: LD_VAR 0 1
26584: PPUSH
26585: CALL_OW 255
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 58
26596: PUSH
26597: EMPTY
26598: LIST
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PPUSH
26604: CALL_OW 69
26608: IN
26609: ST_TO_ADDR
// end ;
26610: LD_VAR 0 2
26614: RET
// export function IsNotFull ( building ) ; begin
26615: LD_INT 0
26617: PPUSH
// if not building then
26618: LD_VAR 0 1
26622: NOT
26623: IFFALSE 26627
// exit ;
26625: GO 26646
// result := UnitsInside ( building ) < 6 ;
26627: LD_ADDR_VAR 0 2
26631: PUSH
26632: LD_VAR 0 1
26636: PPUSH
26637: CALL_OW 313
26641: PUSH
26642: LD_INT 6
26644: LESS
26645: ST_TO_ADDR
// end ;
26646: LD_VAR 0 2
26650: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26651: LD_INT 0
26653: PPUSH
26654: PPUSH
26655: PPUSH
26656: PPUSH
// tmp := [ ] ;
26657: LD_ADDR_VAR 0 3
26661: PUSH
26662: EMPTY
26663: ST_TO_ADDR
// list := [ ] ;
26664: LD_ADDR_VAR 0 5
26668: PUSH
26669: EMPTY
26670: ST_TO_ADDR
// for i = 16 to 25 do
26671: LD_ADDR_VAR 0 4
26675: PUSH
26676: DOUBLE
26677: LD_INT 16
26679: DEC
26680: ST_TO_ADDR
26681: LD_INT 25
26683: PUSH
26684: FOR_TO
26685: IFFALSE 26758
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26687: LD_ADDR_VAR 0 3
26691: PUSH
26692: LD_VAR 0 3
26696: PUSH
26697: LD_INT 22
26699: PUSH
26700: LD_VAR 0 1
26704: PPUSH
26705: CALL_OW 255
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 91
26716: PUSH
26717: LD_VAR 0 1
26721: PUSH
26722: LD_INT 6
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 30
26732: PUSH
26733: LD_VAR 0 4
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: LIST
26746: PUSH
26747: EMPTY
26748: LIST
26749: PPUSH
26750: CALL_OW 69
26754: ADD
26755: ST_TO_ADDR
26756: GO 26684
26758: POP
26759: POP
// for i = 1 to tmp do
26760: LD_ADDR_VAR 0 4
26764: PUSH
26765: DOUBLE
26766: LD_INT 1
26768: DEC
26769: ST_TO_ADDR
26770: LD_VAR 0 3
26774: PUSH
26775: FOR_TO
26776: IFFALSE 26864
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26778: LD_ADDR_VAR 0 5
26782: PUSH
26783: LD_VAR 0 5
26787: PUSH
26788: LD_VAR 0 3
26792: PUSH
26793: LD_VAR 0 4
26797: ARRAY
26798: PPUSH
26799: CALL_OW 266
26803: PUSH
26804: LD_VAR 0 3
26808: PUSH
26809: LD_VAR 0 4
26813: ARRAY
26814: PPUSH
26815: CALL_OW 250
26819: PUSH
26820: LD_VAR 0 3
26824: PUSH
26825: LD_VAR 0 4
26829: ARRAY
26830: PPUSH
26831: CALL_OW 251
26835: PUSH
26836: LD_VAR 0 3
26840: PUSH
26841: LD_VAR 0 4
26845: ARRAY
26846: PPUSH
26847: CALL_OW 254
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: PUSH
26858: EMPTY
26859: LIST
26860: ADD
26861: ST_TO_ADDR
26862: GO 26775
26864: POP
26865: POP
// result := list ;
26866: LD_ADDR_VAR 0 2
26870: PUSH
26871: LD_VAR 0 5
26875: ST_TO_ADDR
// end ;
26876: LD_VAR 0 2
26880: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26881: LD_INT 0
26883: PPUSH
26884: PPUSH
26885: PPUSH
26886: PPUSH
26887: PPUSH
26888: PPUSH
26889: PPUSH
// if not factory then
26890: LD_VAR 0 1
26894: NOT
26895: IFFALSE 26899
// exit ;
26897: GO 27492
// if control = control_apeman then
26899: LD_VAR 0 4
26903: PUSH
26904: LD_INT 5
26906: EQUAL
26907: IFFALSE 27016
// begin tmp := UnitsInside ( factory ) ;
26909: LD_ADDR_VAR 0 8
26913: PUSH
26914: LD_VAR 0 1
26918: PPUSH
26919: CALL_OW 313
26923: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26924: LD_VAR 0 8
26928: PPUSH
26929: LD_INT 25
26931: PUSH
26932: LD_INT 12
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PPUSH
26939: CALL_OW 72
26943: NOT
26944: IFFALSE 26954
// control := control_manual ;
26946: LD_ADDR_VAR 0 4
26950: PUSH
26951: LD_INT 1
26953: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26954: LD_ADDR_VAR 0 8
26958: PUSH
26959: LD_VAR 0 1
26963: PPUSH
26964: CALL 26651 0 1
26968: ST_TO_ADDR
// if tmp then
26969: LD_VAR 0 8
26973: IFFALSE 27016
// begin for i in tmp do
26975: LD_ADDR_VAR 0 7
26979: PUSH
26980: LD_VAR 0 8
26984: PUSH
26985: FOR_IN
26986: IFFALSE 27014
// if i [ 1 ] = b_ext_radio then
26988: LD_VAR 0 7
26992: PUSH
26993: LD_INT 1
26995: ARRAY
26996: PUSH
26997: LD_INT 22
26999: EQUAL
27000: IFFALSE 27012
// begin control := control_remote ;
27002: LD_ADDR_VAR 0 4
27006: PUSH
27007: LD_INT 2
27009: ST_TO_ADDR
// break ;
27010: GO 27014
// end ;
27012: GO 26985
27014: POP
27015: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27016: LD_VAR 0 1
27020: PPUSH
27021: LD_VAR 0 2
27025: PPUSH
27026: LD_VAR 0 3
27030: PPUSH
27031: LD_VAR 0 4
27035: PPUSH
27036: LD_VAR 0 5
27040: PPUSH
27041: CALL_OW 448
27045: IFFALSE 27080
// begin result := [ chassis , engine , control , weapon ] ;
27047: LD_ADDR_VAR 0 6
27051: PUSH
27052: LD_VAR 0 2
27056: PUSH
27057: LD_VAR 0 3
27061: PUSH
27062: LD_VAR 0 4
27066: PUSH
27067: LD_VAR 0 5
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: ST_TO_ADDR
// exit ;
27078: GO 27492
// end ; _chassis := AvailableChassisList ( factory ) ;
27080: LD_ADDR_VAR 0 9
27084: PUSH
27085: LD_VAR 0 1
27089: PPUSH
27090: CALL_OW 475
27094: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27095: LD_ADDR_VAR 0 11
27099: PUSH
27100: LD_VAR 0 1
27104: PPUSH
27105: CALL_OW 476
27109: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27110: LD_ADDR_VAR 0 12
27114: PUSH
27115: LD_VAR 0 1
27119: PPUSH
27120: CALL_OW 477
27124: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27125: LD_ADDR_VAR 0 10
27129: PUSH
27130: LD_VAR 0 1
27134: PPUSH
27135: CALL_OW 478
27139: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27140: LD_VAR 0 9
27144: NOT
27145: PUSH
27146: LD_VAR 0 11
27150: NOT
27151: OR
27152: PUSH
27153: LD_VAR 0 12
27157: NOT
27158: OR
27159: PUSH
27160: LD_VAR 0 10
27164: NOT
27165: OR
27166: IFFALSE 27201
// begin result := [ chassis , engine , control , weapon ] ;
27168: LD_ADDR_VAR 0 6
27172: PUSH
27173: LD_VAR 0 2
27177: PUSH
27178: LD_VAR 0 3
27182: PUSH
27183: LD_VAR 0 4
27187: PUSH
27188: LD_VAR 0 5
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: ST_TO_ADDR
// exit ;
27199: GO 27492
// end ; if not chassis in _chassis then
27201: LD_VAR 0 2
27205: PUSH
27206: LD_VAR 0 9
27210: IN
27211: NOT
27212: IFFALSE 27238
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27214: LD_ADDR_VAR 0 2
27218: PUSH
27219: LD_VAR 0 9
27223: PUSH
27224: LD_INT 1
27226: PPUSH
27227: LD_VAR 0 9
27231: PPUSH
27232: CALL_OW 12
27236: ARRAY
27237: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27238: LD_VAR 0 2
27242: PPUSH
27243: LD_VAR 0 3
27247: PPUSH
27248: CALL 27497 0 2
27252: NOT
27253: IFFALSE 27312
// repeat engine := _engine [ 1 ] ;
27255: LD_ADDR_VAR 0 3
27259: PUSH
27260: LD_VAR 0 11
27264: PUSH
27265: LD_INT 1
27267: ARRAY
27268: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27269: LD_ADDR_VAR 0 11
27273: PUSH
27274: LD_VAR 0 11
27278: PPUSH
27279: LD_INT 1
27281: PPUSH
27282: CALL_OW 3
27286: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27287: LD_VAR 0 2
27291: PPUSH
27292: LD_VAR 0 3
27296: PPUSH
27297: CALL 27497 0 2
27301: PUSH
27302: LD_VAR 0 11
27306: PUSH
27307: EMPTY
27308: EQUAL
27309: OR
27310: IFFALSE 27255
// if not control in _control then
27312: LD_VAR 0 4
27316: PUSH
27317: LD_VAR 0 12
27321: IN
27322: NOT
27323: IFFALSE 27349
// control := _control [ rand ( 1 , _control ) ] ;
27325: LD_ADDR_VAR 0 4
27329: PUSH
27330: LD_VAR 0 12
27334: PUSH
27335: LD_INT 1
27337: PPUSH
27338: LD_VAR 0 12
27342: PPUSH
27343: CALL_OW 12
27347: ARRAY
27348: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27349: LD_VAR 0 2
27353: PPUSH
27354: LD_VAR 0 5
27358: PPUSH
27359: CALL 27717 0 2
27363: NOT
27364: IFFALSE 27423
// repeat weapon := _weapon [ 1 ] ;
27366: LD_ADDR_VAR 0 5
27370: PUSH
27371: LD_VAR 0 10
27375: PUSH
27376: LD_INT 1
27378: ARRAY
27379: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27380: LD_ADDR_VAR 0 10
27384: PUSH
27385: LD_VAR 0 10
27389: PPUSH
27390: LD_INT 1
27392: PPUSH
27393: CALL_OW 3
27397: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27398: LD_VAR 0 2
27402: PPUSH
27403: LD_VAR 0 5
27407: PPUSH
27408: CALL 27717 0 2
27412: PUSH
27413: LD_VAR 0 10
27417: PUSH
27418: EMPTY
27419: EQUAL
27420: OR
27421: IFFALSE 27366
// result := [ ] ;
27423: LD_ADDR_VAR 0 6
27427: PUSH
27428: EMPTY
27429: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27430: LD_VAR 0 1
27434: PPUSH
27435: LD_VAR 0 2
27439: PPUSH
27440: LD_VAR 0 3
27444: PPUSH
27445: LD_VAR 0 4
27449: PPUSH
27450: LD_VAR 0 5
27454: PPUSH
27455: CALL_OW 448
27459: IFFALSE 27492
// result := [ chassis , engine , control , weapon ] ;
27461: LD_ADDR_VAR 0 6
27465: PUSH
27466: LD_VAR 0 2
27470: PUSH
27471: LD_VAR 0 3
27475: PUSH
27476: LD_VAR 0 4
27480: PUSH
27481: LD_VAR 0 5
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: ST_TO_ADDR
// end ;
27492: LD_VAR 0 6
27496: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27497: LD_INT 0
27499: PPUSH
// if not chassis or not engine then
27500: LD_VAR 0 1
27504: NOT
27505: PUSH
27506: LD_VAR 0 2
27510: NOT
27511: OR
27512: IFFALSE 27516
// exit ;
27514: GO 27712
// case engine of engine_solar :
27516: LD_VAR 0 2
27520: PUSH
27521: LD_INT 2
27523: DOUBLE
27524: EQUAL
27525: IFTRUE 27529
27527: GO 27567
27529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27530: LD_ADDR_VAR 0 3
27534: PUSH
27535: LD_INT 11
27537: PUSH
27538: LD_INT 12
27540: PUSH
27541: LD_INT 13
27543: PUSH
27544: LD_INT 14
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: LD_INT 2
27552: PUSH
27553: LD_INT 3
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: ST_TO_ADDR
27565: GO 27696
27567: LD_INT 1
27569: DOUBLE
27570: EQUAL
27571: IFTRUE 27575
27573: GO 27637
27575: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27576: LD_ADDR_VAR 0 3
27580: PUSH
27581: LD_INT 11
27583: PUSH
27584: LD_INT 12
27586: PUSH
27587: LD_INT 13
27589: PUSH
27590: LD_INT 14
27592: PUSH
27593: LD_INT 1
27595: PUSH
27596: LD_INT 2
27598: PUSH
27599: LD_INT 3
27601: PUSH
27602: LD_INT 4
27604: PUSH
27605: LD_INT 5
27607: PUSH
27608: LD_INT 21
27610: PUSH
27611: LD_INT 23
27613: PUSH
27614: LD_INT 22
27616: PUSH
27617: LD_INT 24
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: ST_TO_ADDR
27635: GO 27696
27637: LD_INT 3
27639: DOUBLE
27640: EQUAL
27641: IFTRUE 27645
27643: GO 27695
27645: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27646: LD_ADDR_VAR 0 3
27650: PUSH
27651: LD_INT 13
27653: PUSH
27654: LD_INT 14
27656: PUSH
27657: LD_INT 2
27659: PUSH
27660: LD_INT 3
27662: PUSH
27663: LD_INT 4
27665: PUSH
27666: LD_INT 5
27668: PUSH
27669: LD_INT 21
27671: PUSH
27672: LD_INT 22
27674: PUSH
27675: LD_INT 23
27677: PUSH
27678: LD_INT 24
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: ST_TO_ADDR
27693: GO 27696
27695: POP
// result := ( chassis in result ) ;
27696: LD_ADDR_VAR 0 3
27700: PUSH
27701: LD_VAR 0 1
27705: PUSH
27706: LD_VAR 0 3
27710: IN
27711: ST_TO_ADDR
// end ;
27712: LD_VAR 0 3
27716: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27717: LD_INT 0
27719: PPUSH
// if not chassis or not weapon then
27720: LD_VAR 0 1
27724: NOT
27725: PUSH
27726: LD_VAR 0 2
27730: NOT
27731: OR
27732: IFFALSE 27736
// exit ;
27734: GO 28798
// case weapon of us_machine_gun :
27736: LD_VAR 0 2
27740: PUSH
27741: LD_INT 2
27743: DOUBLE
27744: EQUAL
27745: IFTRUE 27749
27747: GO 27779
27749: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27750: LD_ADDR_VAR 0 3
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: LD_INT 2
27760: PUSH
27761: LD_INT 3
27763: PUSH
27764: LD_INT 4
27766: PUSH
27767: LD_INT 5
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: ST_TO_ADDR
27777: GO 28782
27779: LD_INT 3
27781: DOUBLE
27782: EQUAL
27783: IFTRUE 27787
27785: GO 27817
27787: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27788: LD_ADDR_VAR 0 3
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: LD_INT 2
27798: PUSH
27799: LD_INT 3
27801: PUSH
27802: LD_INT 4
27804: PUSH
27805: LD_INT 5
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: ST_TO_ADDR
27815: GO 28782
27817: LD_INT 11
27819: DOUBLE
27820: EQUAL
27821: IFTRUE 27825
27823: GO 27855
27825: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27826: LD_ADDR_VAR 0 3
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: LD_INT 3
27839: PUSH
27840: LD_INT 4
27842: PUSH
27843: LD_INT 5
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: ST_TO_ADDR
27853: GO 28782
27855: LD_INT 4
27857: DOUBLE
27858: EQUAL
27859: IFTRUE 27863
27861: GO 27889
27863: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27864: LD_ADDR_VAR 0 3
27868: PUSH
27869: LD_INT 2
27871: PUSH
27872: LD_INT 3
27874: PUSH
27875: LD_INT 4
27877: PUSH
27878: LD_INT 5
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: ST_TO_ADDR
27887: GO 28782
27889: LD_INT 5
27891: DOUBLE
27892: EQUAL
27893: IFTRUE 27897
27895: GO 27923
27897: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27898: LD_ADDR_VAR 0 3
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: LD_INT 3
27908: PUSH
27909: LD_INT 4
27911: PUSH
27912: LD_INT 5
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: ST_TO_ADDR
27921: GO 28782
27923: LD_INT 9
27925: DOUBLE
27926: EQUAL
27927: IFTRUE 27931
27929: GO 27957
27931: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27932: LD_ADDR_VAR 0 3
27936: PUSH
27937: LD_INT 2
27939: PUSH
27940: LD_INT 3
27942: PUSH
27943: LD_INT 4
27945: PUSH
27946: LD_INT 5
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: ST_TO_ADDR
27955: GO 28782
27957: LD_INT 7
27959: DOUBLE
27960: EQUAL
27961: IFTRUE 27965
27963: GO 27991
27965: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27966: LD_ADDR_VAR 0 3
27970: PUSH
27971: LD_INT 2
27973: PUSH
27974: LD_INT 3
27976: PUSH
27977: LD_INT 4
27979: PUSH
27980: LD_INT 5
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: ST_TO_ADDR
27989: GO 28782
27991: LD_INT 12
27993: DOUBLE
27994: EQUAL
27995: IFTRUE 27999
27997: GO 28025
27999: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28000: LD_ADDR_VAR 0 3
28004: PUSH
28005: LD_INT 2
28007: PUSH
28008: LD_INT 3
28010: PUSH
28011: LD_INT 4
28013: PUSH
28014: LD_INT 5
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: ST_TO_ADDR
28023: GO 28782
28025: LD_INT 13
28027: DOUBLE
28028: EQUAL
28029: IFTRUE 28033
28031: GO 28059
28033: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28034: LD_ADDR_VAR 0 3
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: LD_INT 3
28044: PUSH
28045: LD_INT 4
28047: PUSH
28048: LD_INT 5
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: ST_TO_ADDR
28057: GO 28782
28059: LD_INT 14
28061: DOUBLE
28062: EQUAL
28063: IFTRUE 28067
28065: GO 28085
28067: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28068: LD_ADDR_VAR 0 3
28072: PUSH
28073: LD_INT 4
28075: PUSH
28076: LD_INT 5
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: ST_TO_ADDR
28083: GO 28782
28085: LD_INT 6
28087: DOUBLE
28088: EQUAL
28089: IFTRUE 28093
28091: GO 28111
28093: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28094: LD_ADDR_VAR 0 3
28098: PUSH
28099: LD_INT 4
28101: PUSH
28102: LD_INT 5
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: ST_TO_ADDR
28109: GO 28782
28111: LD_INT 10
28113: DOUBLE
28114: EQUAL
28115: IFTRUE 28119
28117: GO 28137
28119: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28120: LD_ADDR_VAR 0 3
28124: PUSH
28125: LD_INT 4
28127: PUSH
28128: LD_INT 5
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: ST_TO_ADDR
28135: GO 28782
28137: LD_INT 22
28139: DOUBLE
28140: EQUAL
28141: IFTRUE 28145
28143: GO 28171
28145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28146: LD_ADDR_VAR 0 3
28150: PUSH
28151: LD_INT 11
28153: PUSH
28154: LD_INT 12
28156: PUSH
28157: LD_INT 13
28159: PUSH
28160: LD_INT 14
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: ST_TO_ADDR
28169: GO 28782
28171: LD_INT 23
28173: DOUBLE
28174: EQUAL
28175: IFTRUE 28179
28177: GO 28205
28179: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28180: LD_ADDR_VAR 0 3
28184: PUSH
28185: LD_INT 11
28187: PUSH
28188: LD_INT 12
28190: PUSH
28191: LD_INT 13
28193: PUSH
28194: LD_INT 14
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: ST_TO_ADDR
28203: GO 28782
28205: LD_INT 24
28207: DOUBLE
28208: EQUAL
28209: IFTRUE 28213
28211: GO 28239
28213: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28214: LD_ADDR_VAR 0 3
28218: PUSH
28219: LD_INT 11
28221: PUSH
28222: LD_INT 12
28224: PUSH
28225: LD_INT 13
28227: PUSH
28228: LD_INT 14
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: ST_TO_ADDR
28237: GO 28782
28239: LD_INT 30
28241: DOUBLE
28242: EQUAL
28243: IFTRUE 28247
28245: GO 28273
28247: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28248: LD_ADDR_VAR 0 3
28252: PUSH
28253: LD_INT 11
28255: PUSH
28256: LD_INT 12
28258: PUSH
28259: LD_INT 13
28261: PUSH
28262: LD_INT 14
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: ST_TO_ADDR
28271: GO 28782
28273: LD_INT 25
28275: DOUBLE
28276: EQUAL
28277: IFTRUE 28281
28279: GO 28299
28281: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28282: LD_ADDR_VAR 0 3
28286: PUSH
28287: LD_INT 13
28289: PUSH
28290: LD_INT 14
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: ST_TO_ADDR
28297: GO 28782
28299: LD_INT 27
28301: DOUBLE
28302: EQUAL
28303: IFTRUE 28307
28305: GO 28325
28307: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28308: LD_ADDR_VAR 0 3
28312: PUSH
28313: LD_INT 13
28315: PUSH
28316: LD_INT 14
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: ST_TO_ADDR
28323: GO 28782
28325: LD_EXP 23
28329: DOUBLE
28330: EQUAL
28331: IFTRUE 28335
28333: GO 28361
28335: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28336: LD_ADDR_VAR 0 3
28340: PUSH
28341: LD_INT 11
28343: PUSH
28344: LD_INT 12
28346: PUSH
28347: LD_INT 13
28349: PUSH
28350: LD_INT 14
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: ST_TO_ADDR
28359: GO 28782
28361: LD_INT 28
28363: DOUBLE
28364: EQUAL
28365: IFTRUE 28369
28367: GO 28387
28369: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28370: LD_ADDR_VAR 0 3
28374: PUSH
28375: LD_INT 13
28377: PUSH
28378: LD_INT 14
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: ST_TO_ADDR
28385: GO 28782
28387: LD_INT 29
28389: DOUBLE
28390: EQUAL
28391: IFTRUE 28395
28393: GO 28413
28395: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28396: LD_ADDR_VAR 0 3
28400: PUSH
28401: LD_INT 13
28403: PUSH
28404: LD_INT 14
28406: PUSH
28407: EMPTY
28408: LIST
28409: LIST
28410: ST_TO_ADDR
28411: GO 28782
28413: LD_INT 31
28415: DOUBLE
28416: EQUAL
28417: IFTRUE 28421
28419: GO 28439
28421: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28422: LD_ADDR_VAR 0 3
28426: PUSH
28427: LD_INT 13
28429: PUSH
28430: LD_INT 14
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: ST_TO_ADDR
28437: GO 28782
28439: LD_INT 26
28441: DOUBLE
28442: EQUAL
28443: IFTRUE 28447
28445: GO 28465
28447: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28448: LD_ADDR_VAR 0 3
28452: PUSH
28453: LD_INT 13
28455: PUSH
28456: LD_INT 14
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: ST_TO_ADDR
28463: GO 28782
28465: LD_INT 42
28467: DOUBLE
28468: EQUAL
28469: IFTRUE 28473
28471: GO 28499
28473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28474: LD_ADDR_VAR 0 3
28478: PUSH
28479: LD_INT 21
28481: PUSH
28482: LD_INT 22
28484: PUSH
28485: LD_INT 23
28487: PUSH
28488: LD_INT 24
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: ST_TO_ADDR
28497: GO 28782
28499: LD_INT 43
28501: DOUBLE
28502: EQUAL
28503: IFTRUE 28507
28505: GO 28533
28507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28508: LD_ADDR_VAR 0 3
28512: PUSH
28513: LD_INT 21
28515: PUSH
28516: LD_INT 22
28518: PUSH
28519: LD_INT 23
28521: PUSH
28522: LD_INT 24
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: ST_TO_ADDR
28531: GO 28782
28533: LD_INT 44
28535: DOUBLE
28536: EQUAL
28537: IFTRUE 28541
28539: GO 28567
28541: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28542: LD_ADDR_VAR 0 3
28546: PUSH
28547: LD_INT 21
28549: PUSH
28550: LD_INT 22
28552: PUSH
28553: LD_INT 23
28555: PUSH
28556: LD_INT 24
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: ST_TO_ADDR
28565: GO 28782
28567: LD_INT 45
28569: DOUBLE
28570: EQUAL
28571: IFTRUE 28575
28573: GO 28601
28575: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28576: LD_ADDR_VAR 0 3
28580: PUSH
28581: LD_INT 21
28583: PUSH
28584: LD_INT 22
28586: PUSH
28587: LD_INT 23
28589: PUSH
28590: LD_INT 24
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: ST_TO_ADDR
28599: GO 28782
28601: LD_INT 49
28603: DOUBLE
28604: EQUAL
28605: IFTRUE 28609
28607: GO 28635
28609: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28610: LD_ADDR_VAR 0 3
28614: PUSH
28615: LD_INT 21
28617: PUSH
28618: LD_INT 22
28620: PUSH
28621: LD_INT 23
28623: PUSH
28624: LD_INT 24
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: ST_TO_ADDR
28633: GO 28782
28635: LD_INT 51
28637: DOUBLE
28638: EQUAL
28639: IFTRUE 28643
28641: GO 28669
28643: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28644: LD_ADDR_VAR 0 3
28648: PUSH
28649: LD_INT 21
28651: PUSH
28652: LD_INT 22
28654: PUSH
28655: LD_INT 23
28657: PUSH
28658: LD_INT 24
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: ST_TO_ADDR
28667: GO 28782
28669: LD_INT 52
28671: DOUBLE
28672: EQUAL
28673: IFTRUE 28677
28675: GO 28703
28677: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28678: LD_ADDR_VAR 0 3
28682: PUSH
28683: LD_INT 21
28685: PUSH
28686: LD_INT 22
28688: PUSH
28689: LD_INT 23
28691: PUSH
28692: LD_INT 24
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: ST_TO_ADDR
28701: GO 28782
28703: LD_INT 53
28705: DOUBLE
28706: EQUAL
28707: IFTRUE 28711
28709: GO 28729
28711: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28712: LD_ADDR_VAR 0 3
28716: PUSH
28717: LD_INT 23
28719: PUSH
28720: LD_INT 24
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: ST_TO_ADDR
28727: GO 28782
28729: LD_INT 46
28731: DOUBLE
28732: EQUAL
28733: IFTRUE 28737
28735: GO 28755
28737: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28738: LD_ADDR_VAR 0 3
28742: PUSH
28743: LD_INT 23
28745: PUSH
28746: LD_INT 24
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: ST_TO_ADDR
28753: GO 28782
28755: LD_INT 47
28757: DOUBLE
28758: EQUAL
28759: IFTRUE 28763
28761: GO 28781
28763: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28764: LD_ADDR_VAR 0 3
28768: PUSH
28769: LD_INT 23
28771: PUSH
28772: LD_INT 24
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: ST_TO_ADDR
28779: GO 28782
28781: POP
// result := ( chassis in result ) ;
28782: LD_ADDR_VAR 0 3
28786: PUSH
28787: LD_VAR 0 1
28791: PUSH
28792: LD_VAR 0 3
28796: IN
28797: ST_TO_ADDR
// end ;
28798: LD_VAR 0 3
28802: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28803: LD_INT 0
28805: PPUSH
28806: PPUSH
28807: PPUSH
28808: PPUSH
28809: PPUSH
28810: PPUSH
28811: PPUSH
// result := array ;
28812: LD_ADDR_VAR 0 5
28816: PUSH
28817: LD_VAR 0 1
28821: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28822: LD_VAR 0 1
28826: NOT
28827: PUSH
28828: LD_VAR 0 2
28832: NOT
28833: OR
28834: PUSH
28835: LD_VAR 0 3
28839: NOT
28840: OR
28841: PUSH
28842: LD_VAR 0 2
28846: PUSH
28847: LD_VAR 0 1
28851: GREATER
28852: OR
28853: PUSH
28854: LD_VAR 0 3
28858: PUSH
28859: LD_VAR 0 1
28863: GREATER
28864: OR
28865: IFFALSE 28869
// exit ;
28867: GO 29165
// if direction then
28869: LD_VAR 0 4
28873: IFFALSE 28937
// begin d := 1 ;
28875: LD_ADDR_VAR 0 9
28879: PUSH
28880: LD_INT 1
28882: ST_TO_ADDR
// if i_from > i_to then
28883: LD_VAR 0 2
28887: PUSH
28888: LD_VAR 0 3
28892: GREATER
28893: IFFALSE 28919
// length := ( array - i_from ) + i_to else
28895: LD_ADDR_VAR 0 11
28899: PUSH
28900: LD_VAR 0 1
28904: PUSH
28905: LD_VAR 0 2
28909: MINUS
28910: PUSH
28911: LD_VAR 0 3
28915: PLUS
28916: ST_TO_ADDR
28917: GO 28935
// length := i_to - i_from ;
28919: LD_ADDR_VAR 0 11
28923: PUSH
28924: LD_VAR 0 3
28928: PUSH
28929: LD_VAR 0 2
28933: MINUS
28934: ST_TO_ADDR
// end else
28935: GO 28998
// begin d := - 1 ;
28937: LD_ADDR_VAR 0 9
28941: PUSH
28942: LD_INT 1
28944: NEG
28945: ST_TO_ADDR
// if i_from > i_to then
28946: LD_VAR 0 2
28950: PUSH
28951: LD_VAR 0 3
28955: GREATER
28956: IFFALSE 28976
// length := i_from - i_to else
28958: LD_ADDR_VAR 0 11
28962: PUSH
28963: LD_VAR 0 2
28967: PUSH
28968: LD_VAR 0 3
28972: MINUS
28973: ST_TO_ADDR
28974: GO 28998
// length := ( array - i_to ) + i_from ;
28976: LD_ADDR_VAR 0 11
28980: PUSH
28981: LD_VAR 0 1
28985: PUSH
28986: LD_VAR 0 3
28990: MINUS
28991: PUSH
28992: LD_VAR 0 2
28996: PLUS
28997: ST_TO_ADDR
// end ; if not length then
28998: LD_VAR 0 11
29002: NOT
29003: IFFALSE 29007
// exit ;
29005: GO 29165
// tmp := array ;
29007: LD_ADDR_VAR 0 10
29011: PUSH
29012: LD_VAR 0 1
29016: ST_TO_ADDR
// for i = 1 to length do
29017: LD_ADDR_VAR 0 6
29021: PUSH
29022: DOUBLE
29023: LD_INT 1
29025: DEC
29026: ST_TO_ADDR
29027: LD_VAR 0 11
29031: PUSH
29032: FOR_TO
29033: IFFALSE 29153
// begin for j = 1 to array do
29035: LD_ADDR_VAR 0 7
29039: PUSH
29040: DOUBLE
29041: LD_INT 1
29043: DEC
29044: ST_TO_ADDR
29045: LD_VAR 0 1
29049: PUSH
29050: FOR_TO
29051: IFFALSE 29139
// begin k := j + d ;
29053: LD_ADDR_VAR 0 8
29057: PUSH
29058: LD_VAR 0 7
29062: PUSH
29063: LD_VAR 0 9
29067: PLUS
29068: ST_TO_ADDR
// if k > array then
29069: LD_VAR 0 8
29073: PUSH
29074: LD_VAR 0 1
29078: GREATER
29079: IFFALSE 29089
// k := 1 ;
29081: LD_ADDR_VAR 0 8
29085: PUSH
29086: LD_INT 1
29088: ST_TO_ADDR
// if not k then
29089: LD_VAR 0 8
29093: NOT
29094: IFFALSE 29106
// k := array ;
29096: LD_ADDR_VAR 0 8
29100: PUSH
29101: LD_VAR 0 1
29105: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29106: LD_ADDR_VAR 0 10
29110: PUSH
29111: LD_VAR 0 10
29115: PPUSH
29116: LD_VAR 0 8
29120: PPUSH
29121: LD_VAR 0 1
29125: PUSH
29126: LD_VAR 0 7
29130: ARRAY
29131: PPUSH
29132: CALL_OW 1
29136: ST_TO_ADDR
// end ;
29137: GO 29050
29139: POP
29140: POP
// array := tmp ;
29141: LD_ADDR_VAR 0 1
29145: PUSH
29146: LD_VAR 0 10
29150: ST_TO_ADDR
// end ;
29151: GO 29032
29153: POP
29154: POP
// result := array ;
29155: LD_ADDR_VAR 0 5
29159: PUSH
29160: LD_VAR 0 1
29164: ST_TO_ADDR
// end ;
29165: LD_VAR 0 5
29169: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29170: LD_INT 0
29172: PPUSH
29173: PPUSH
// result := 0 ;
29174: LD_ADDR_VAR 0 3
29178: PUSH
29179: LD_INT 0
29181: ST_TO_ADDR
// if not array or not value in array then
29182: LD_VAR 0 1
29186: NOT
29187: PUSH
29188: LD_VAR 0 2
29192: PUSH
29193: LD_VAR 0 1
29197: IN
29198: NOT
29199: OR
29200: IFFALSE 29204
// exit ;
29202: GO 29258
// for i = 1 to array do
29204: LD_ADDR_VAR 0 4
29208: PUSH
29209: DOUBLE
29210: LD_INT 1
29212: DEC
29213: ST_TO_ADDR
29214: LD_VAR 0 1
29218: PUSH
29219: FOR_TO
29220: IFFALSE 29256
// if value = array [ i ] then
29222: LD_VAR 0 2
29226: PUSH
29227: LD_VAR 0 1
29231: PUSH
29232: LD_VAR 0 4
29236: ARRAY
29237: EQUAL
29238: IFFALSE 29254
// begin result := i ;
29240: LD_ADDR_VAR 0 3
29244: PUSH
29245: LD_VAR 0 4
29249: ST_TO_ADDR
// exit ;
29250: POP
29251: POP
29252: GO 29258
// end ;
29254: GO 29219
29256: POP
29257: POP
// end ;
29258: LD_VAR 0 3
29262: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29263: LD_INT 0
29265: PPUSH
// vc_chassis := chassis ;
29266: LD_ADDR_OWVAR 37
29270: PUSH
29271: LD_VAR 0 1
29275: ST_TO_ADDR
// vc_engine := engine ;
29276: LD_ADDR_OWVAR 39
29280: PUSH
29281: LD_VAR 0 2
29285: ST_TO_ADDR
// vc_control := control ;
29286: LD_ADDR_OWVAR 38
29290: PUSH
29291: LD_VAR 0 3
29295: ST_TO_ADDR
// vc_weapon := weapon ;
29296: LD_ADDR_OWVAR 40
29300: PUSH
29301: LD_VAR 0 4
29305: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29306: LD_ADDR_OWVAR 41
29310: PUSH
29311: LD_VAR 0 5
29315: ST_TO_ADDR
// end ;
29316: LD_VAR 0 6
29320: RET
// export function WantPlant ( unit ) ; var task ; begin
29321: LD_INT 0
29323: PPUSH
29324: PPUSH
// result := false ;
29325: LD_ADDR_VAR 0 2
29329: PUSH
29330: LD_INT 0
29332: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29333: LD_ADDR_VAR 0 3
29337: PUSH
29338: LD_VAR 0 1
29342: PPUSH
29343: CALL_OW 437
29347: ST_TO_ADDR
// if task then
29348: LD_VAR 0 3
29352: IFFALSE 29380
// if task [ 1 ] [ 1 ] = p then
29354: LD_VAR 0 3
29358: PUSH
29359: LD_INT 1
29361: ARRAY
29362: PUSH
29363: LD_INT 1
29365: ARRAY
29366: PUSH
29367: LD_STRING p
29369: EQUAL
29370: IFFALSE 29380
// result := true ;
29372: LD_ADDR_VAR 0 2
29376: PUSH
29377: LD_INT 1
29379: ST_TO_ADDR
// end ;
29380: LD_VAR 0 2
29384: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29385: LD_INT 0
29387: PPUSH
29388: PPUSH
29389: PPUSH
29390: PPUSH
// if pos < 1 then
29391: LD_VAR 0 2
29395: PUSH
29396: LD_INT 1
29398: LESS
29399: IFFALSE 29403
// exit ;
29401: GO 29706
// if pos = 1 then
29403: LD_VAR 0 2
29407: PUSH
29408: LD_INT 1
29410: EQUAL
29411: IFFALSE 29444
// result := Replace ( arr , pos [ 1 ] , value ) else
29413: LD_ADDR_VAR 0 4
29417: PUSH
29418: LD_VAR 0 1
29422: PPUSH
29423: LD_VAR 0 2
29427: PUSH
29428: LD_INT 1
29430: ARRAY
29431: PPUSH
29432: LD_VAR 0 3
29436: PPUSH
29437: CALL_OW 1
29441: ST_TO_ADDR
29442: GO 29706
// begin tmp := arr ;
29444: LD_ADDR_VAR 0 6
29448: PUSH
29449: LD_VAR 0 1
29453: ST_TO_ADDR
// s_arr := [ tmp ] ;
29454: LD_ADDR_VAR 0 7
29458: PUSH
29459: LD_VAR 0 6
29463: PUSH
29464: EMPTY
29465: LIST
29466: ST_TO_ADDR
// for i = 1 to pos - 1 do
29467: LD_ADDR_VAR 0 5
29471: PUSH
29472: DOUBLE
29473: LD_INT 1
29475: DEC
29476: ST_TO_ADDR
29477: LD_VAR 0 2
29481: PUSH
29482: LD_INT 1
29484: MINUS
29485: PUSH
29486: FOR_TO
29487: IFFALSE 29532
// begin tmp := tmp [ pos [ i ] ] ;
29489: LD_ADDR_VAR 0 6
29493: PUSH
29494: LD_VAR 0 6
29498: PUSH
29499: LD_VAR 0 2
29503: PUSH
29504: LD_VAR 0 5
29508: ARRAY
29509: ARRAY
29510: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29511: LD_ADDR_VAR 0 7
29515: PUSH
29516: LD_VAR 0 7
29520: PUSH
29521: LD_VAR 0 6
29525: PUSH
29526: EMPTY
29527: LIST
29528: ADD
29529: ST_TO_ADDR
// end ;
29530: GO 29486
29532: POP
29533: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29534: LD_ADDR_VAR 0 6
29538: PUSH
29539: LD_VAR 0 6
29543: PPUSH
29544: LD_VAR 0 2
29548: PUSH
29549: LD_VAR 0 2
29553: ARRAY
29554: PPUSH
29555: LD_VAR 0 3
29559: PPUSH
29560: CALL_OW 1
29564: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29565: LD_ADDR_VAR 0 7
29569: PUSH
29570: LD_VAR 0 7
29574: PPUSH
29575: LD_VAR 0 7
29579: PPUSH
29580: LD_VAR 0 6
29584: PPUSH
29585: CALL_OW 1
29589: ST_TO_ADDR
// for i = s_arr downto 2 do
29590: LD_ADDR_VAR 0 5
29594: PUSH
29595: DOUBLE
29596: LD_VAR 0 7
29600: INC
29601: ST_TO_ADDR
29602: LD_INT 2
29604: PUSH
29605: FOR_DOWNTO
29606: IFFALSE 29690
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29608: LD_ADDR_VAR 0 6
29612: PUSH
29613: LD_VAR 0 7
29617: PUSH
29618: LD_VAR 0 5
29622: PUSH
29623: LD_INT 1
29625: MINUS
29626: ARRAY
29627: PPUSH
29628: LD_VAR 0 2
29632: PUSH
29633: LD_VAR 0 5
29637: PUSH
29638: LD_INT 1
29640: MINUS
29641: ARRAY
29642: PPUSH
29643: LD_VAR 0 7
29647: PUSH
29648: LD_VAR 0 5
29652: ARRAY
29653: PPUSH
29654: CALL_OW 1
29658: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29659: LD_ADDR_VAR 0 7
29663: PUSH
29664: LD_VAR 0 7
29668: PPUSH
29669: LD_VAR 0 5
29673: PUSH
29674: LD_INT 1
29676: MINUS
29677: PPUSH
29678: LD_VAR 0 6
29682: PPUSH
29683: CALL_OW 1
29687: ST_TO_ADDR
// end ;
29688: GO 29605
29690: POP
29691: POP
// result := s_arr [ 1 ] ;
29692: LD_ADDR_VAR 0 4
29696: PUSH
29697: LD_VAR 0 7
29701: PUSH
29702: LD_INT 1
29704: ARRAY
29705: ST_TO_ADDR
// end ; end ;
29706: LD_VAR 0 4
29710: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29711: LD_INT 0
29713: PPUSH
29714: PPUSH
// if not list then
29715: LD_VAR 0 1
29719: NOT
29720: IFFALSE 29724
// exit ;
29722: GO 29815
// i := list [ pos1 ] ;
29724: LD_ADDR_VAR 0 5
29728: PUSH
29729: LD_VAR 0 1
29733: PUSH
29734: LD_VAR 0 2
29738: ARRAY
29739: ST_TO_ADDR
// if not i then
29740: LD_VAR 0 5
29744: NOT
29745: IFFALSE 29749
// exit ;
29747: GO 29815
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29749: LD_ADDR_VAR 0 1
29753: PUSH
29754: LD_VAR 0 1
29758: PPUSH
29759: LD_VAR 0 2
29763: PPUSH
29764: LD_VAR 0 1
29768: PUSH
29769: LD_VAR 0 3
29773: ARRAY
29774: PPUSH
29775: CALL_OW 1
29779: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29780: LD_ADDR_VAR 0 1
29784: PUSH
29785: LD_VAR 0 1
29789: PPUSH
29790: LD_VAR 0 3
29794: PPUSH
29795: LD_VAR 0 5
29799: PPUSH
29800: CALL_OW 1
29804: ST_TO_ADDR
// result := list ;
29805: LD_ADDR_VAR 0 4
29809: PUSH
29810: LD_VAR 0 1
29814: ST_TO_ADDR
// end ;
29815: LD_VAR 0 4
29819: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29820: LD_INT 0
29822: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29823: LD_ADDR_VAR 0 5
29827: PUSH
29828: LD_VAR 0 1
29832: PPUSH
29833: CALL_OW 250
29837: PPUSH
29838: LD_VAR 0 1
29842: PPUSH
29843: CALL_OW 251
29847: PPUSH
29848: LD_VAR 0 2
29852: PPUSH
29853: LD_VAR 0 3
29857: PPUSH
29858: LD_VAR 0 4
29862: PPUSH
29863: CALL 29873 0 5
29867: ST_TO_ADDR
// end ;
29868: LD_VAR 0 5
29872: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29873: LD_INT 0
29875: PPUSH
29876: PPUSH
29877: PPUSH
29878: PPUSH
// if not list then
29879: LD_VAR 0 3
29883: NOT
29884: IFFALSE 29888
// exit ;
29886: GO 30276
// result := [ ] ;
29888: LD_ADDR_VAR 0 6
29892: PUSH
29893: EMPTY
29894: ST_TO_ADDR
// for i in list do
29895: LD_ADDR_VAR 0 7
29899: PUSH
29900: LD_VAR 0 3
29904: PUSH
29905: FOR_IN
29906: IFFALSE 30108
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29908: LD_ADDR_VAR 0 9
29912: PUSH
29913: LD_VAR 0 7
29917: PPUSH
29918: LD_VAR 0 1
29922: PPUSH
29923: LD_VAR 0 2
29927: PPUSH
29928: CALL_OW 297
29932: ST_TO_ADDR
// if not result then
29933: LD_VAR 0 6
29937: NOT
29938: IFFALSE 29964
// result := [ [ i , tmp ] ] else
29940: LD_ADDR_VAR 0 6
29944: PUSH
29945: LD_VAR 0 7
29949: PUSH
29950: LD_VAR 0 9
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: EMPTY
29960: LIST
29961: ST_TO_ADDR
29962: GO 30106
// begin if result [ result ] [ 2 ] < tmp then
29964: LD_VAR 0 6
29968: PUSH
29969: LD_VAR 0 6
29973: ARRAY
29974: PUSH
29975: LD_INT 2
29977: ARRAY
29978: PUSH
29979: LD_VAR 0 9
29983: LESS
29984: IFFALSE 30026
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29986: LD_ADDR_VAR 0 6
29990: PUSH
29991: LD_VAR 0 6
29995: PPUSH
29996: LD_VAR 0 6
30000: PUSH
30001: LD_INT 1
30003: PLUS
30004: PPUSH
30005: LD_VAR 0 7
30009: PUSH
30010: LD_VAR 0 9
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PPUSH
30019: CALL_OW 2
30023: ST_TO_ADDR
30024: GO 30106
// for j = 1 to result do
30026: LD_ADDR_VAR 0 8
30030: PUSH
30031: DOUBLE
30032: LD_INT 1
30034: DEC
30035: ST_TO_ADDR
30036: LD_VAR 0 6
30040: PUSH
30041: FOR_TO
30042: IFFALSE 30104
// begin if tmp < result [ j ] [ 2 ] then
30044: LD_VAR 0 9
30048: PUSH
30049: LD_VAR 0 6
30053: PUSH
30054: LD_VAR 0 8
30058: ARRAY
30059: PUSH
30060: LD_INT 2
30062: ARRAY
30063: LESS
30064: IFFALSE 30102
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30066: LD_ADDR_VAR 0 6
30070: PUSH
30071: LD_VAR 0 6
30075: PPUSH
30076: LD_VAR 0 8
30080: PPUSH
30081: LD_VAR 0 7
30085: PUSH
30086: LD_VAR 0 9
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PPUSH
30095: CALL_OW 2
30099: ST_TO_ADDR
// break ;
30100: GO 30104
// end ; end ;
30102: GO 30041
30104: POP
30105: POP
// end ; end ;
30106: GO 29905
30108: POP
30109: POP
// if result and not asc then
30110: LD_VAR 0 6
30114: PUSH
30115: LD_VAR 0 4
30119: NOT
30120: AND
30121: IFFALSE 30196
// begin tmp := result ;
30123: LD_ADDR_VAR 0 9
30127: PUSH
30128: LD_VAR 0 6
30132: ST_TO_ADDR
// for i = tmp downto 1 do
30133: LD_ADDR_VAR 0 7
30137: PUSH
30138: DOUBLE
30139: LD_VAR 0 9
30143: INC
30144: ST_TO_ADDR
30145: LD_INT 1
30147: PUSH
30148: FOR_DOWNTO
30149: IFFALSE 30194
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30151: LD_ADDR_VAR 0 6
30155: PUSH
30156: LD_VAR 0 6
30160: PPUSH
30161: LD_VAR 0 9
30165: PUSH
30166: LD_VAR 0 7
30170: MINUS
30171: PUSH
30172: LD_INT 1
30174: PLUS
30175: PPUSH
30176: LD_VAR 0 9
30180: PUSH
30181: LD_VAR 0 7
30185: ARRAY
30186: PPUSH
30187: CALL_OW 1
30191: ST_TO_ADDR
30192: GO 30148
30194: POP
30195: POP
// end ; tmp := [ ] ;
30196: LD_ADDR_VAR 0 9
30200: PUSH
30201: EMPTY
30202: ST_TO_ADDR
// if mode then
30203: LD_VAR 0 5
30207: IFFALSE 30276
// begin for i = 1 to result do
30209: LD_ADDR_VAR 0 7
30213: PUSH
30214: DOUBLE
30215: LD_INT 1
30217: DEC
30218: ST_TO_ADDR
30219: LD_VAR 0 6
30223: PUSH
30224: FOR_TO
30225: IFFALSE 30264
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30227: LD_ADDR_VAR 0 9
30231: PUSH
30232: LD_VAR 0 9
30236: PPUSH
30237: LD_VAR 0 7
30241: PPUSH
30242: LD_VAR 0 6
30246: PUSH
30247: LD_VAR 0 7
30251: ARRAY
30252: PUSH
30253: LD_INT 1
30255: ARRAY
30256: PPUSH
30257: CALL_OW 1
30261: ST_TO_ADDR
30262: GO 30224
30264: POP
30265: POP
// result := tmp ;
30266: LD_ADDR_VAR 0 6
30270: PUSH
30271: LD_VAR 0 9
30275: ST_TO_ADDR
// end ; end ;
30276: LD_VAR 0 6
30280: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30281: LD_INT 0
30283: PPUSH
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
30288: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30289: LD_ADDR_VAR 0 5
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: EMPTY
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: ST_TO_ADDR
// if not x or not y then
30311: LD_VAR 0 2
30315: NOT
30316: PUSH
30317: LD_VAR 0 3
30321: NOT
30322: OR
30323: IFFALSE 30327
// exit ;
30325: GO 31979
// if not range then
30327: LD_VAR 0 4
30331: NOT
30332: IFFALSE 30342
// range := 10 ;
30334: LD_ADDR_VAR 0 4
30338: PUSH
30339: LD_INT 10
30341: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30342: LD_ADDR_VAR 0 8
30346: PUSH
30347: LD_INT 81
30349: PUSH
30350: LD_VAR 0 1
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 92
30361: PUSH
30362: LD_VAR 0 2
30366: PUSH
30367: LD_VAR 0 3
30371: PUSH
30372: LD_VAR 0 4
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 3
30385: PUSH
30386: LD_INT 21
30388: PUSH
30389: LD_INT 3
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: LIST
30404: PPUSH
30405: CALL_OW 69
30409: ST_TO_ADDR
// if not tmp then
30410: LD_VAR 0 8
30414: NOT
30415: IFFALSE 30419
// exit ;
30417: GO 31979
// for i in tmp do
30419: LD_ADDR_VAR 0 6
30423: PUSH
30424: LD_VAR 0 8
30428: PUSH
30429: FOR_IN
30430: IFFALSE 31954
// begin points := [ 0 , 0 , 0 ] ;
30432: LD_ADDR_VAR 0 9
30436: PUSH
30437: LD_INT 0
30439: PUSH
30440: LD_INT 0
30442: PUSH
30443: LD_INT 0
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: LIST
30450: ST_TO_ADDR
// bpoints := 1 ;
30451: LD_ADDR_VAR 0 10
30455: PUSH
30456: LD_INT 1
30458: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30459: LD_VAR 0 6
30463: PPUSH
30464: CALL_OW 247
30468: PUSH
30469: LD_INT 1
30471: DOUBLE
30472: EQUAL
30473: IFTRUE 30477
30475: GO 31055
30477: POP
// begin if GetClass ( i ) = 1 then
30478: LD_VAR 0 6
30482: PPUSH
30483: CALL_OW 257
30487: PUSH
30488: LD_INT 1
30490: EQUAL
30491: IFFALSE 30512
// points := [ 10 , 5 , 3 ] ;
30493: LD_ADDR_VAR 0 9
30497: PUSH
30498: LD_INT 10
30500: PUSH
30501: LD_INT 5
30503: PUSH
30504: LD_INT 3
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: LIST
30511: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30512: LD_VAR 0 6
30516: PPUSH
30517: CALL_OW 257
30521: PUSH
30522: LD_INT 2
30524: PUSH
30525: LD_INT 3
30527: PUSH
30528: LD_INT 4
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: LIST
30535: IN
30536: IFFALSE 30557
// points := [ 3 , 2 , 1 ] ;
30538: LD_ADDR_VAR 0 9
30542: PUSH
30543: LD_INT 3
30545: PUSH
30546: LD_INT 2
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: LIST
30556: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30557: LD_VAR 0 6
30561: PPUSH
30562: CALL_OW 257
30566: PUSH
30567: LD_INT 5
30569: EQUAL
30570: IFFALSE 30591
// points := [ 130 , 5 , 2 ] ;
30572: LD_ADDR_VAR 0 9
30576: PUSH
30577: LD_INT 130
30579: PUSH
30580: LD_INT 5
30582: PUSH
30583: LD_INT 2
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: LIST
30590: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30591: LD_VAR 0 6
30595: PPUSH
30596: CALL_OW 257
30600: PUSH
30601: LD_INT 8
30603: EQUAL
30604: IFFALSE 30625
// points := [ 35 , 35 , 30 ] ;
30606: LD_ADDR_VAR 0 9
30610: PUSH
30611: LD_INT 35
30613: PUSH
30614: LD_INT 35
30616: PUSH
30617: LD_INT 30
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: LIST
30624: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30625: LD_VAR 0 6
30629: PPUSH
30630: CALL_OW 257
30634: PUSH
30635: LD_INT 9
30637: EQUAL
30638: IFFALSE 30659
// points := [ 20 , 55 , 40 ] ;
30640: LD_ADDR_VAR 0 9
30644: PUSH
30645: LD_INT 20
30647: PUSH
30648: LD_INT 55
30650: PUSH
30651: LD_INT 40
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: LIST
30658: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30659: LD_VAR 0 6
30663: PPUSH
30664: CALL_OW 257
30668: PUSH
30669: LD_INT 12
30671: PUSH
30672: LD_INT 16
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: IN
30679: IFFALSE 30700
// points := [ 5 , 3 , 2 ] ;
30681: LD_ADDR_VAR 0 9
30685: PUSH
30686: LD_INT 5
30688: PUSH
30689: LD_INT 3
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: LIST
30699: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30700: LD_VAR 0 6
30704: PPUSH
30705: CALL_OW 257
30709: PUSH
30710: LD_INT 17
30712: EQUAL
30713: IFFALSE 30734
// points := [ 100 , 50 , 75 ] ;
30715: LD_ADDR_VAR 0 9
30719: PUSH
30720: LD_INT 100
30722: PUSH
30723: LD_INT 50
30725: PUSH
30726: LD_INT 75
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: LIST
30733: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30734: LD_VAR 0 6
30738: PPUSH
30739: CALL_OW 257
30743: PUSH
30744: LD_INT 15
30746: EQUAL
30747: IFFALSE 30768
// points := [ 10 , 5 , 3 ] ;
30749: LD_ADDR_VAR 0 9
30753: PUSH
30754: LD_INT 10
30756: PUSH
30757: LD_INT 5
30759: PUSH
30760: LD_INT 3
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30768: LD_VAR 0 6
30772: PPUSH
30773: CALL_OW 257
30777: PUSH
30778: LD_INT 14
30780: EQUAL
30781: IFFALSE 30802
// points := [ 10 , 0 , 0 ] ;
30783: LD_ADDR_VAR 0 9
30787: PUSH
30788: LD_INT 10
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: LD_INT 0
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: LIST
30801: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30802: LD_VAR 0 6
30806: PPUSH
30807: CALL_OW 257
30811: PUSH
30812: LD_INT 11
30814: EQUAL
30815: IFFALSE 30836
// points := [ 30 , 10 , 5 ] ;
30817: LD_ADDR_VAR 0 9
30821: PUSH
30822: LD_INT 30
30824: PUSH
30825: LD_INT 10
30827: PUSH
30828: LD_INT 5
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30836: LD_VAR 0 1
30840: PPUSH
30841: LD_INT 5
30843: PPUSH
30844: CALL_OW 321
30848: PUSH
30849: LD_INT 2
30851: EQUAL
30852: IFFALSE 30869
// bpoints := bpoints * 1.8 ;
30854: LD_ADDR_VAR 0 10
30858: PUSH
30859: LD_VAR 0 10
30863: PUSH
30864: LD_REAL  1.80000000000000E+0000
30867: MUL
30868: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30869: LD_VAR 0 6
30873: PPUSH
30874: CALL_OW 257
30878: PUSH
30879: LD_INT 1
30881: PUSH
30882: LD_INT 2
30884: PUSH
30885: LD_INT 3
30887: PUSH
30888: LD_INT 4
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: IN
30897: PUSH
30898: LD_VAR 0 1
30902: PPUSH
30903: LD_INT 51
30905: PPUSH
30906: CALL_OW 321
30910: PUSH
30911: LD_INT 2
30913: EQUAL
30914: AND
30915: IFFALSE 30932
// bpoints := bpoints * 1.2 ;
30917: LD_ADDR_VAR 0 10
30921: PUSH
30922: LD_VAR 0 10
30926: PUSH
30927: LD_REAL  1.20000000000000E+0000
30930: MUL
30931: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30932: LD_VAR 0 6
30936: PPUSH
30937: CALL_OW 257
30941: PUSH
30942: LD_INT 5
30944: PUSH
30945: LD_INT 7
30947: PUSH
30948: LD_INT 9
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: LIST
30955: IN
30956: PUSH
30957: LD_VAR 0 1
30961: PPUSH
30962: LD_INT 52
30964: PPUSH
30965: CALL_OW 321
30969: PUSH
30970: LD_INT 2
30972: EQUAL
30973: AND
30974: IFFALSE 30991
// bpoints := bpoints * 1.5 ;
30976: LD_ADDR_VAR 0 10
30980: PUSH
30981: LD_VAR 0 10
30985: PUSH
30986: LD_REAL  1.50000000000000E+0000
30989: MUL
30990: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30991: LD_VAR 0 1
30995: PPUSH
30996: LD_INT 66
30998: PPUSH
30999: CALL_OW 321
31003: PUSH
31004: LD_INT 2
31006: EQUAL
31007: IFFALSE 31024
// bpoints := bpoints * 1.1 ;
31009: LD_ADDR_VAR 0 10
31013: PUSH
31014: LD_VAR 0 10
31018: PUSH
31019: LD_REAL  1.10000000000000E+0000
31022: MUL
31023: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31024: LD_ADDR_VAR 0 10
31028: PUSH
31029: LD_VAR 0 10
31033: PUSH
31034: LD_VAR 0 6
31038: PPUSH
31039: LD_INT 1
31041: PPUSH
31042: CALL_OW 259
31046: PUSH
31047: LD_REAL  1.15000000000000E+0000
31050: MUL
31051: MUL
31052: ST_TO_ADDR
// end ; unit_vehicle :
31053: GO 31883
31055: LD_INT 2
31057: DOUBLE
31058: EQUAL
31059: IFTRUE 31063
31061: GO 31871
31063: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31064: LD_VAR 0 6
31068: PPUSH
31069: CALL_OW 264
31073: PUSH
31074: LD_INT 2
31076: PUSH
31077: LD_INT 42
31079: PUSH
31080: LD_INT 24
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: LIST
31087: IN
31088: IFFALSE 31109
// points := [ 25 , 5 , 3 ] ;
31090: LD_ADDR_VAR 0 9
31094: PUSH
31095: LD_INT 25
31097: PUSH
31098: LD_INT 5
31100: PUSH
31101: LD_INT 3
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31109: LD_VAR 0 6
31113: PPUSH
31114: CALL_OW 264
31118: PUSH
31119: LD_INT 4
31121: PUSH
31122: LD_INT 43
31124: PUSH
31125: LD_INT 25
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: LIST
31132: IN
31133: IFFALSE 31154
// points := [ 40 , 15 , 5 ] ;
31135: LD_ADDR_VAR 0 9
31139: PUSH
31140: LD_INT 40
31142: PUSH
31143: LD_INT 15
31145: PUSH
31146: LD_INT 5
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: LIST
31153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31154: LD_VAR 0 6
31158: PPUSH
31159: CALL_OW 264
31163: PUSH
31164: LD_INT 3
31166: PUSH
31167: LD_INT 23
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: IN
31174: IFFALSE 31195
// points := [ 7 , 25 , 8 ] ;
31176: LD_ADDR_VAR 0 9
31180: PUSH
31181: LD_INT 7
31183: PUSH
31184: LD_INT 25
31186: PUSH
31187: LD_INT 8
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: LIST
31194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31195: LD_VAR 0 6
31199: PPUSH
31200: CALL_OW 264
31204: PUSH
31205: LD_INT 5
31207: PUSH
31208: LD_INT 27
31210: PUSH
31211: LD_INT 44
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: IN
31219: IFFALSE 31240
// points := [ 14 , 50 , 16 ] ;
31221: LD_ADDR_VAR 0 9
31225: PUSH
31226: LD_INT 14
31228: PUSH
31229: LD_INT 50
31231: PUSH
31232: LD_INT 16
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: LIST
31239: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31240: LD_VAR 0 6
31244: PPUSH
31245: CALL_OW 264
31249: PUSH
31250: LD_INT 6
31252: PUSH
31253: LD_INT 46
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: IN
31260: IFFALSE 31281
// points := [ 32 , 120 , 70 ] ;
31262: LD_ADDR_VAR 0 9
31266: PUSH
31267: LD_INT 32
31269: PUSH
31270: LD_INT 120
31272: PUSH
31273: LD_INT 70
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: LIST
31280: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31281: LD_VAR 0 6
31285: PPUSH
31286: CALL_OW 264
31290: PUSH
31291: LD_INT 7
31293: PUSH
31294: LD_INT 28
31296: PUSH
31297: LD_INT 45
31299: PUSH
31300: LD_EXP 23
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: IN
31311: IFFALSE 31332
// points := [ 35 , 20 , 45 ] ;
31313: LD_ADDR_VAR 0 9
31317: PUSH
31318: LD_INT 35
31320: PUSH
31321: LD_INT 20
31323: PUSH
31324: LD_INT 45
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31332: LD_VAR 0 6
31336: PPUSH
31337: CALL_OW 264
31341: PUSH
31342: LD_INT 47
31344: PUSH
31345: EMPTY
31346: LIST
31347: IN
31348: IFFALSE 31369
// points := [ 67 , 45 , 75 ] ;
31350: LD_ADDR_VAR 0 9
31354: PUSH
31355: LD_INT 67
31357: PUSH
31358: LD_INT 45
31360: PUSH
31361: LD_INT 75
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: LIST
31368: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31369: LD_VAR 0 6
31373: PPUSH
31374: CALL_OW 264
31378: PUSH
31379: LD_INT 26
31381: PUSH
31382: EMPTY
31383: LIST
31384: IN
31385: IFFALSE 31406
// points := [ 120 , 30 , 80 ] ;
31387: LD_ADDR_VAR 0 9
31391: PUSH
31392: LD_INT 120
31394: PUSH
31395: LD_INT 30
31397: PUSH
31398: LD_INT 80
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: LIST
31405: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31406: LD_VAR 0 6
31410: PPUSH
31411: CALL_OW 264
31415: PUSH
31416: LD_INT 22
31418: PUSH
31419: EMPTY
31420: LIST
31421: IN
31422: IFFALSE 31443
// points := [ 40 , 1 , 1 ] ;
31424: LD_ADDR_VAR 0 9
31428: PUSH
31429: LD_INT 40
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: LIST
31442: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31443: LD_VAR 0 6
31447: PPUSH
31448: CALL_OW 264
31452: PUSH
31453: LD_INT 29
31455: PUSH
31456: EMPTY
31457: LIST
31458: IN
31459: IFFALSE 31480
// points := [ 70 , 200 , 400 ] ;
31461: LD_ADDR_VAR 0 9
31465: PUSH
31466: LD_INT 70
31468: PUSH
31469: LD_INT 200
31471: PUSH
31472: LD_INT 400
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: LIST
31479: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31480: LD_VAR 0 6
31484: PPUSH
31485: CALL_OW 264
31489: PUSH
31490: LD_INT 14
31492: PUSH
31493: LD_INT 53
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: IN
31500: IFFALSE 31521
// points := [ 40 , 10 , 20 ] ;
31502: LD_ADDR_VAR 0 9
31506: PUSH
31507: LD_INT 40
31509: PUSH
31510: LD_INT 10
31512: PUSH
31513: LD_INT 20
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: LIST
31520: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31521: LD_VAR 0 6
31525: PPUSH
31526: CALL_OW 264
31530: PUSH
31531: LD_INT 9
31533: PUSH
31534: EMPTY
31535: LIST
31536: IN
31537: IFFALSE 31558
// points := [ 5 , 70 , 20 ] ;
31539: LD_ADDR_VAR 0 9
31543: PUSH
31544: LD_INT 5
31546: PUSH
31547: LD_INT 70
31549: PUSH
31550: LD_INT 20
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31558: LD_VAR 0 6
31562: PPUSH
31563: CALL_OW 264
31567: PUSH
31568: LD_INT 10
31570: PUSH
31571: EMPTY
31572: LIST
31573: IN
31574: IFFALSE 31595
// points := [ 35 , 110 , 70 ] ;
31576: LD_ADDR_VAR 0 9
31580: PUSH
31581: LD_INT 35
31583: PUSH
31584: LD_INT 110
31586: PUSH
31587: LD_INT 70
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: LIST
31594: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31595: LD_VAR 0 6
31599: PPUSH
31600: CALL_OW 265
31604: PUSH
31605: LD_INT 25
31607: EQUAL
31608: IFFALSE 31629
// points := [ 80 , 65 , 100 ] ;
31610: LD_ADDR_VAR 0 9
31614: PUSH
31615: LD_INT 80
31617: PUSH
31618: LD_INT 65
31620: PUSH
31621: LD_INT 100
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: LIST
31628: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31629: LD_VAR 0 6
31633: PPUSH
31634: CALL_OW 263
31638: PUSH
31639: LD_INT 1
31641: EQUAL
31642: IFFALSE 31677
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31644: LD_ADDR_VAR 0 10
31648: PUSH
31649: LD_VAR 0 10
31653: PUSH
31654: LD_VAR 0 6
31658: PPUSH
31659: CALL_OW 311
31663: PPUSH
31664: LD_INT 3
31666: PPUSH
31667: CALL_OW 259
31671: PUSH
31672: LD_INT 4
31674: MUL
31675: MUL
31676: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31677: LD_VAR 0 6
31681: PPUSH
31682: CALL_OW 263
31686: PUSH
31687: LD_INT 2
31689: EQUAL
31690: IFFALSE 31741
// begin j := IsControledBy ( i ) ;
31692: LD_ADDR_VAR 0 7
31696: PUSH
31697: LD_VAR 0 6
31701: PPUSH
31702: CALL_OW 312
31706: ST_TO_ADDR
// if j then
31707: LD_VAR 0 7
31711: IFFALSE 31741
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31713: LD_ADDR_VAR 0 10
31717: PUSH
31718: LD_VAR 0 10
31722: PUSH
31723: LD_VAR 0 7
31727: PPUSH
31728: LD_INT 3
31730: PPUSH
31731: CALL_OW 259
31735: PUSH
31736: LD_INT 3
31738: MUL
31739: MUL
31740: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31741: LD_VAR 0 6
31745: PPUSH
31746: CALL_OW 264
31750: PUSH
31751: LD_INT 5
31753: PUSH
31754: LD_INT 6
31756: PUSH
31757: LD_INT 46
31759: PUSH
31760: LD_INT 44
31762: PUSH
31763: LD_INT 47
31765: PUSH
31766: LD_INT 45
31768: PUSH
31769: LD_INT 28
31771: PUSH
31772: LD_INT 7
31774: PUSH
31775: LD_INT 27
31777: PUSH
31778: LD_INT 29
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: IN
31793: PUSH
31794: LD_VAR 0 1
31798: PPUSH
31799: LD_INT 52
31801: PPUSH
31802: CALL_OW 321
31806: PUSH
31807: LD_INT 2
31809: EQUAL
31810: AND
31811: IFFALSE 31828
// bpoints := bpoints * 1.2 ;
31813: LD_ADDR_VAR 0 10
31817: PUSH
31818: LD_VAR 0 10
31822: PUSH
31823: LD_REAL  1.20000000000000E+0000
31826: MUL
31827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31828: LD_VAR 0 6
31832: PPUSH
31833: CALL_OW 264
31837: PUSH
31838: LD_INT 6
31840: PUSH
31841: LD_INT 46
31843: PUSH
31844: LD_INT 47
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: LIST
31851: IN
31852: IFFALSE 31869
// bpoints := bpoints * 1.2 ;
31854: LD_ADDR_VAR 0 10
31858: PUSH
31859: LD_VAR 0 10
31863: PUSH
31864: LD_REAL  1.20000000000000E+0000
31867: MUL
31868: ST_TO_ADDR
// end ; unit_building :
31869: GO 31883
31871: LD_INT 3
31873: DOUBLE
31874: EQUAL
31875: IFTRUE 31879
31877: GO 31882
31879: POP
// ; end ;
31880: GO 31883
31882: POP
// for j = 1 to 3 do
31883: LD_ADDR_VAR 0 7
31887: PUSH
31888: DOUBLE
31889: LD_INT 1
31891: DEC
31892: ST_TO_ADDR
31893: LD_INT 3
31895: PUSH
31896: FOR_TO
31897: IFFALSE 31950
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31899: LD_ADDR_VAR 0 5
31903: PUSH
31904: LD_VAR 0 5
31908: PPUSH
31909: LD_VAR 0 7
31913: PPUSH
31914: LD_VAR 0 5
31918: PUSH
31919: LD_VAR 0 7
31923: ARRAY
31924: PUSH
31925: LD_VAR 0 9
31929: PUSH
31930: LD_VAR 0 7
31934: ARRAY
31935: PUSH
31936: LD_VAR 0 10
31940: MUL
31941: PLUS
31942: PPUSH
31943: CALL_OW 1
31947: ST_TO_ADDR
31948: GO 31896
31950: POP
31951: POP
// end ;
31952: GO 30429
31954: POP
31955: POP
// result := Replace ( result , 4 , tmp ) ;
31956: LD_ADDR_VAR 0 5
31960: PUSH
31961: LD_VAR 0 5
31965: PPUSH
31966: LD_INT 4
31968: PPUSH
31969: LD_VAR 0 8
31973: PPUSH
31974: CALL_OW 1
31978: ST_TO_ADDR
// end ;
31979: LD_VAR 0 5
31983: RET
// export function DangerAtRange ( unit , range ) ; begin
31984: LD_INT 0
31986: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31987: LD_ADDR_VAR 0 3
31991: PUSH
31992: LD_VAR 0 1
31996: PPUSH
31997: CALL_OW 255
32001: PPUSH
32002: LD_VAR 0 1
32006: PPUSH
32007: CALL_OW 250
32011: PPUSH
32012: LD_VAR 0 1
32016: PPUSH
32017: CALL_OW 251
32021: PPUSH
32022: LD_VAR 0 2
32026: PPUSH
32027: CALL 30281 0 4
32031: ST_TO_ADDR
// end ;
32032: LD_VAR 0 3
32036: RET
// export function DangerInArea ( side , area ) ; begin
32037: LD_INT 0
32039: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32040: LD_ADDR_VAR 0 3
32044: PUSH
32045: LD_VAR 0 2
32049: PPUSH
32050: LD_INT 81
32052: PUSH
32053: LD_VAR 0 1
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PPUSH
32062: CALL_OW 70
32066: ST_TO_ADDR
// end ;
32067: LD_VAR 0 3
32071: RET
// export function IsExtension ( b ) ; begin
32072: LD_INT 0
32074: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32075: LD_ADDR_VAR 0 2
32079: PUSH
32080: LD_VAR 0 1
32084: PUSH
32085: LD_INT 23
32087: PUSH
32088: LD_INT 20
32090: PUSH
32091: LD_INT 22
32093: PUSH
32094: LD_INT 17
32096: PUSH
32097: LD_INT 24
32099: PUSH
32100: LD_INT 21
32102: PUSH
32103: LD_INT 19
32105: PUSH
32106: LD_INT 16
32108: PUSH
32109: LD_INT 25
32111: PUSH
32112: LD_INT 18
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: IN
32127: ST_TO_ADDR
// end ;
32128: LD_VAR 0 2
32132: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32133: LD_INT 0
32135: PPUSH
32136: PPUSH
32137: PPUSH
// result := [ ] ;
32138: LD_ADDR_VAR 0 4
32142: PUSH
32143: EMPTY
32144: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32145: LD_ADDR_VAR 0 5
32149: PUSH
32150: LD_VAR 0 2
32154: PPUSH
32155: LD_INT 21
32157: PUSH
32158: LD_INT 3
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PPUSH
32165: CALL_OW 70
32169: ST_TO_ADDR
// if not tmp then
32170: LD_VAR 0 5
32174: NOT
32175: IFFALSE 32179
// exit ;
32177: GO 32243
// if checkLink then
32179: LD_VAR 0 3
32183: IFFALSE 32233
// begin for i in tmp do
32185: LD_ADDR_VAR 0 6
32189: PUSH
32190: LD_VAR 0 5
32194: PUSH
32195: FOR_IN
32196: IFFALSE 32231
// if GetBase ( i ) <> base then
32198: LD_VAR 0 6
32202: PPUSH
32203: CALL_OW 274
32207: PUSH
32208: LD_VAR 0 1
32212: NONEQUAL
32213: IFFALSE 32229
// ComLinkToBase ( base , i ) ;
32215: LD_VAR 0 1
32219: PPUSH
32220: LD_VAR 0 6
32224: PPUSH
32225: CALL_OW 169
32229: GO 32195
32231: POP
32232: POP
// end ; result := tmp ;
32233: LD_ADDR_VAR 0 4
32237: PUSH
32238: LD_VAR 0 5
32242: ST_TO_ADDR
// end ;
32243: LD_VAR 0 4
32247: RET
// export function ComComplete ( units , b ) ; var i ; begin
32248: LD_INT 0
32250: PPUSH
32251: PPUSH
// if not units then
32252: LD_VAR 0 1
32256: NOT
32257: IFFALSE 32261
// exit ;
32259: GO 32351
// for i in units do
32261: LD_ADDR_VAR 0 4
32265: PUSH
32266: LD_VAR 0 1
32270: PUSH
32271: FOR_IN
32272: IFFALSE 32349
// if BuildingStatus ( b ) = bs_build then
32274: LD_VAR 0 2
32278: PPUSH
32279: CALL_OW 461
32283: PUSH
32284: LD_INT 1
32286: EQUAL
32287: IFFALSE 32347
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32289: LD_VAR 0 4
32293: PPUSH
32294: LD_STRING h
32296: PUSH
32297: LD_VAR 0 2
32301: PPUSH
32302: CALL_OW 250
32306: PUSH
32307: LD_VAR 0 2
32311: PPUSH
32312: CALL_OW 251
32316: PUSH
32317: LD_VAR 0 2
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: LD_INT 0
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: PUSH
32340: EMPTY
32341: LIST
32342: PPUSH
32343: CALL_OW 446
32347: GO 32271
32349: POP
32350: POP
// end ;
32351: LD_VAR 0 3
32355: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32356: LD_INT 0
32358: PPUSH
32359: PPUSH
32360: PPUSH
32361: PPUSH
32362: PPUSH
32363: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
32364: LD_VAR 0 1
32368: NOT
32369: PUSH
32370: LD_VAR 0 1
32374: PPUSH
32375: CALL_OW 263
32379: PUSH
32380: LD_INT 2
32382: EQUAL
32383: NOT
32384: OR
32385: IFFALSE 32389
// exit ;
32387: GO 32705
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32389: LD_ADDR_VAR 0 6
32393: PUSH
32394: LD_INT 22
32396: PUSH
32397: LD_VAR 0 1
32401: PPUSH
32402: CALL_OW 255
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 2
32413: PUSH
32414: LD_INT 30
32416: PUSH
32417: LD_INT 36
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 34
32426: PUSH
32427: LD_INT 31
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: LIST
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PPUSH
32443: CALL_OW 69
32447: ST_TO_ADDR
// if not tmp then
32448: LD_VAR 0 6
32452: NOT
32453: IFFALSE 32457
// exit ;
32455: GO 32705
// result := [ ] ;
32457: LD_ADDR_VAR 0 2
32461: PUSH
32462: EMPTY
32463: ST_TO_ADDR
// for i in tmp do
32464: LD_ADDR_VAR 0 3
32468: PUSH
32469: LD_VAR 0 6
32473: PUSH
32474: FOR_IN
32475: IFFALSE 32546
// begin t := UnitsInside ( i ) ;
32477: LD_ADDR_VAR 0 4
32481: PUSH
32482: LD_VAR 0 3
32486: PPUSH
32487: CALL_OW 313
32491: ST_TO_ADDR
// if t then
32492: LD_VAR 0 4
32496: IFFALSE 32544
// for j in t do
32498: LD_ADDR_VAR 0 7
32502: PUSH
32503: LD_VAR 0 4
32507: PUSH
32508: FOR_IN
32509: IFFALSE 32542
// result := Insert ( result , result + 1 , j ) ;
32511: LD_ADDR_VAR 0 2
32515: PUSH
32516: LD_VAR 0 2
32520: PPUSH
32521: LD_VAR 0 2
32525: PUSH
32526: LD_INT 1
32528: PLUS
32529: PPUSH
32530: LD_VAR 0 7
32534: PPUSH
32535: CALL_OW 2
32539: ST_TO_ADDR
32540: GO 32508
32542: POP
32543: POP
// end ;
32544: GO 32474
32546: POP
32547: POP
// if not result then
32548: LD_VAR 0 2
32552: NOT
32553: IFFALSE 32557
// exit ;
32555: GO 32705
// mech := result [ 1 ] ;
32557: LD_ADDR_VAR 0 5
32561: PUSH
32562: LD_VAR 0 2
32566: PUSH
32567: LD_INT 1
32569: ARRAY
32570: ST_TO_ADDR
// if result > 1 then
32571: LD_VAR 0 2
32575: PUSH
32576: LD_INT 1
32578: GREATER
32579: IFFALSE 32691
// for i = 2 to result do
32581: LD_ADDR_VAR 0 3
32585: PUSH
32586: DOUBLE
32587: LD_INT 2
32589: DEC
32590: ST_TO_ADDR
32591: LD_VAR 0 2
32595: PUSH
32596: FOR_TO
32597: IFFALSE 32689
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32599: LD_ADDR_VAR 0 4
32603: PUSH
32604: LD_VAR 0 2
32608: PUSH
32609: LD_VAR 0 3
32613: ARRAY
32614: PPUSH
32615: LD_INT 3
32617: PPUSH
32618: CALL_OW 259
32622: PUSH
32623: LD_VAR 0 2
32627: PUSH
32628: LD_VAR 0 3
32632: ARRAY
32633: PPUSH
32634: CALL_OW 432
32638: MINUS
32639: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32640: LD_VAR 0 4
32644: PUSH
32645: LD_VAR 0 5
32649: PPUSH
32650: LD_INT 3
32652: PPUSH
32653: CALL_OW 259
32657: PUSH
32658: LD_VAR 0 5
32662: PPUSH
32663: CALL_OW 432
32667: MINUS
32668: GREATEREQUAL
32669: IFFALSE 32687
// mech := result [ i ] ;
32671: LD_ADDR_VAR 0 5
32675: PUSH
32676: LD_VAR 0 2
32680: PUSH
32681: LD_VAR 0 3
32685: ARRAY
32686: ST_TO_ADDR
// end ;
32687: GO 32596
32689: POP
32690: POP
// ComLinkTo ( vehicle , mech ) ;
32691: LD_VAR 0 1
32695: PPUSH
32696: LD_VAR 0 5
32700: PPUSH
32701: CALL_OW 135
// end ;
32705: LD_VAR 0 2
32709: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32710: LD_INT 0
32712: PPUSH
32713: PPUSH
32714: PPUSH
32715: PPUSH
32716: PPUSH
32717: PPUSH
32718: PPUSH
32719: PPUSH
32720: PPUSH
32721: PPUSH
32722: PPUSH
32723: PPUSH
32724: PPUSH
// result := [ ] ;
32725: LD_ADDR_VAR 0 7
32729: PUSH
32730: EMPTY
32731: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32732: LD_VAR 0 1
32736: PPUSH
32737: CALL_OW 266
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: LD_INT 1
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: IN
32752: NOT
32753: IFFALSE 32757
// exit ;
32755: GO 34391
// if name then
32757: LD_VAR 0 3
32761: IFFALSE 32777
// SetBName ( base_dep , name ) ;
32763: LD_VAR 0 1
32767: PPUSH
32768: LD_VAR 0 3
32772: PPUSH
32773: CALL_OW 500
// base := GetBase ( base_dep ) ;
32777: LD_ADDR_VAR 0 15
32781: PUSH
32782: LD_VAR 0 1
32786: PPUSH
32787: CALL_OW 274
32791: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32792: LD_ADDR_VAR 0 16
32796: PUSH
32797: LD_VAR 0 1
32801: PPUSH
32802: CALL_OW 255
32806: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32807: LD_ADDR_VAR 0 17
32811: PUSH
32812: LD_VAR 0 1
32816: PPUSH
32817: CALL_OW 248
32821: ST_TO_ADDR
// if sources then
32822: LD_VAR 0 5
32826: IFFALSE 32873
// for i = 1 to 3 do
32828: LD_ADDR_VAR 0 8
32832: PUSH
32833: DOUBLE
32834: LD_INT 1
32836: DEC
32837: ST_TO_ADDR
32838: LD_INT 3
32840: PUSH
32841: FOR_TO
32842: IFFALSE 32871
// AddResourceType ( base , i , sources [ i ] ) ;
32844: LD_VAR 0 15
32848: PPUSH
32849: LD_VAR 0 8
32853: PPUSH
32854: LD_VAR 0 5
32858: PUSH
32859: LD_VAR 0 8
32863: ARRAY
32864: PPUSH
32865: CALL_OW 276
32869: GO 32841
32871: POP
32872: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32873: LD_ADDR_VAR 0 18
32877: PUSH
32878: LD_VAR 0 15
32882: PPUSH
32883: LD_VAR 0 2
32887: PPUSH
32888: LD_INT 1
32890: PPUSH
32891: CALL 32133 0 3
32895: ST_TO_ADDR
// InitHc ;
32896: CALL_OW 19
// InitUc ;
32900: CALL_OW 18
// uc_side := side ;
32904: LD_ADDR_OWVAR 20
32908: PUSH
32909: LD_VAR 0 16
32913: ST_TO_ADDR
// uc_nation := nation ;
32914: LD_ADDR_OWVAR 21
32918: PUSH
32919: LD_VAR 0 17
32923: ST_TO_ADDR
// if buildings then
32924: LD_VAR 0 18
32928: IFFALSE 34250
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32930: LD_ADDR_VAR 0 19
32934: PUSH
32935: LD_VAR 0 18
32939: PPUSH
32940: LD_INT 2
32942: PUSH
32943: LD_INT 30
32945: PUSH
32946: LD_INT 29
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 30
32955: PUSH
32956: LD_INT 30
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: PPUSH
32968: CALL_OW 72
32972: ST_TO_ADDR
// if tmp then
32973: LD_VAR 0 19
32977: IFFALSE 33025
// for i in tmp do
32979: LD_ADDR_VAR 0 8
32983: PUSH
32984: LD_VAR 0 19
32988: PUSH
32989: FOR_IN
32990: IFFALSE 33023
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32992: LD_VAR 0 8
32996: PPUSH
32997: CALL_OW 250
33001: PPUSH
33002: LD_VAR 0 8
33006: PPUSH
33007: CALL_OW 251
33011: PPUSH
33012: LD_VAR 0 16
33016: PPUSH
33017: CALL_OW 441
33021: GO 32989
33023: POP
33024: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33025: LD_VAR 0 18
33029: PPUSH
33030: LD_INT 2
33032: PUSH
33033: LD_INT 30
33035: PUSH
33036: LD_INT 32
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 30
33045: PUSH
33046: LD_INT 33
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: LIST
33057: PPUSH
33058: CALL_OW 72
33062: IFFALSE 33150
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33064: LD_ADDR_VAR 0 8
33068: PUSH
33069: LD_VAR 0 18
33073: PPUSH
33074: LD_INT 2
33076: PUSH
33077: LD_INT 30
33079: PUSH
33080: LD_INT 32
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 30
33089: PUSH
33090: LD_INT 33
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: LIST
33101: PPUSH
33102: CALL_OW 72
33106: PUSH
33107: FOR_IN
33108: IFFALSE 33148
// begin if not GetBWeapon ( i ) then
33110: LD_VAR 0 8
33114: PPUSH
33115: CALL_OW 269
33119: NOT
33120: IFFALSE 33146
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33122: LD_VAR 0 8
33126: PPUSH
33127: LD_VAR 0 8
33131: PPUSH
33132: LD_VAR 0 2
33136: PPUSH
33137: CALL 34396 0 2
33141: PPUSH
33142: CALL_OW 431
// end ;
33146: GO 33107
33148: POP
33149: POP
// end ; for i = 1 to personel do
33150: LD_ADDR_VAR 0 8
33154: PUSH
33155: DOUBLE
33156: LD_INT 1
33158: DEC
33159: ST_TO_ADDR
33160: LD_VAR 0 6
33164: PUSH
33165: FOR_TO
33166: IFFALSE 34230
// begin if i > 4 then
33168: LD_VAR 0 8
33172: PUSH
33173: LD_INT 4
33175: GREATER
33176: IFFALSE 33180
// break ;
33178: GO 34230
// case i of 1 :
33180: LD_VAR 0 8
33184: PUSH
33185: LD_INT 1
33187: DOUBLE
33188: EQUAL
33189: IFTRUE 33193
33191: GO 33273
33193: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33194: LD_ADDR_VAR 0 12
33198: PUSH
33199: LD_VAR 0 18
33203: PPUSH
33204: LD_INT 22
33206: PUSH
33207: LD_VAR 0 16
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 58
33218: PUSH
33219: EMPTY
33220: LIST
33221: PUSH
33222: LD_INT 2
33224: PUSH
33225: LD_INT 30
33227: PUSH
33228: LD_INT 32
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 30
33237: PUSH
33238: LD_INT 4
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 30
33247: PUSH
33248: LD_INT 5
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: LIST
33265: PPUSH
33266: CALL_OW 72
33270: ST_TO_ADDR
33271: GO 33495
33273: LD_INT 2
33275: DOUBLE
33276: EQUAL
33277: IFTRUE 33281
33279: GO 33343
33281: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33282: LD_ADDR_VAR 0 12
33286: PUSH
33287: LD_VAR 0 18
33291: PPUSH
33292: LD_INT 22
33294: PUSH
33295: LD_VAR 0 16
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 2
33306: PUSH
33307: LD_INT 30
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 30
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: LIST
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PPUSH
33336: CALL_OW 72
33340: ST_TO_ADDR
33341: GO 33495
33343: LD_INT 3
33345: DOUBLE
33346: EQUAL
33347: IFTRUE 33351
33349: GO 33413
33351: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33352: LD_ADDR_VAR 0 12
33356: PUSH
33357: LD_VAR 0 18
33361: PPUSH
33362: LD_INT 22
33364: PUSH
33365: LD_VAR 0 16
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: LD_INT 30
33379: PUSH
33380: LD_INT 2
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 30
33389: PUSH
33390: LD_INT 3
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: LIST
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PPUSH
33406: CALL_OW 72
33410: ST_TO_ADDR
33411: GO 33495
33413: LD_INT 4
33415: DOUBLE
33416: EQUAL
33417: IFTRUE 33421
33419: GO 33494
33421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33422: LD_ADDR_VAR 0 12
33426: PUSH
33427: LD_VAR 0 18
33431: PPUSH
33432: LD_INT 22
33434: PUSH
33435: LD_VAR 0 16
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 2
33446: PUSH
33447: LD_INT 30
33449: PUSH
33450: LD_INT 6
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 30
33459: PUSH
33460: LD_INT 7
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 30
33469: PUSH
33470: LD_INT 8
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PPUSH
33487: CALL_OW 72
33491: ST_TO_ADDR
33492: GO 33495
33494: POP
// if i = 1 then
33495: LD_VAR 0 8
33499: PUSH
33500: LD_INT 1
33502: EQUAL
33503: IFFALSE 33614
// begin tmp := [ ] ;
33505: LD_ADDR_VAR 0 19
33509: PUSH
33510: EMPTY
33511: ST_TO_ADDR
// for j in f do
33512: LD_ADDR_VAR 0 9
33516: PUSH
33517: LD_VAR 0 12
33521: PUSH
33522: FOR_IN
33523: IFFALSE 33596
// if GetBType ( j ) = b_bunker then
33525: LD_VAR 0 9
33529: PPUSH
33530: CALL_OW 266
33534: PUSH
33535: LD_INT 32
33537: EQUAL
33538: IFFALSE 33565
// tmp := Insert ( tmp , 1 , j ) else
33540: LD_ADDR_VAR 0 19
33544: PUSH
33545: LD_VAR 0 19
33549: PPUSH
33550: LD_INT 1
33552: PPUSH
33553: LD_VAR 0 9
33557: PPUSH
33558: CALL_OW 2
33562: ST_TO_ADDR
33563: GO 33594
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33565: LD_ADDR_VAR 0 19
33569: PUSH
33570: LD_VAR 0 19
33574: PPUSH
33575: LD_VAR 0 19
33579: PUSH
33580: LD_INT 1
33582: PLUS
33583: PPUSH
33584: LD_VAR 0 9
33588: PPUSH
33589: CALL_OW 2
33593: ST_TO_ADDR
33594: GO 33522
33596: POP
33597: POP
// if tmp then
33598: LD_VAR 0 19
33602: IFFALSE 33614
// f := tmp ;
33604: LD_ADDR_VAR 0 12
33608: PUSH
33609: LD_VAR 0 19
33613: ST_TO_ADDR
// end ; x := personel [ i ] ;
33614: LD_ADDR_VAR 0 13
33618: PUSH
33619: LD_VAR 0 6
33623: PUSH
33624: LD_VAR 0 8
33628: ARRAY
33629: ST_TO_ADDR
// if x = - 1 then
33630: LD_VAR 0 13
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: EQUAL
33639: IFFALSE 33848
// begin for j in f do
33641: LD_ADDR_VAR 0 9
33645: PUSH
33646: LD_VAR 0 12
33650: PUSH
33651: FOR_IN
33652: IFFALSE 33844
// repeat InitHc ;
33654: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33658: LD_VAR 0 9
33662: PPUSH
33663: CALL_OW 266
33667: PUSH
33668: LD_INT 5
33670: EQUAL
33671: IFFALSE 33741
// begin if UnitsInside ( j ) < 3 then
33673: LD_VAR 0 9
33677: PPUSH
33678: CALL_OW 313
33682: PUSH
33683: LD_INT 3
33685: LESS
33686: IFFALSE 33722
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33688: LD_INT 0
33690: PPUSH
33691: LD_INT 5
33693: PUSH
33694: LD_INT 8
33696: PUSH
33697: LD_INT 9
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: PUSH
33705: LD_VAR 0 17
33709: ARRAY
33710: PPUSH
33711: LD_VAR 0 4
33715: PPUSH
33716: CALL_OW 380
33720: GO 33739
// PrepareHuman ( false , i , skill ) ;
33722: LD_INT 0
33724: PPUSH
33725: LD_VAR 0 8
33729: PPUSH
33730: LD_VAR 0 4
33734: PPUSH
33735: CALL_OW 380
// end else
33739: GO 33758
// PrepareHuman ( false , i , skill ) ;
33741: LD_INT 0
33743: PPUSH
33744: LD_VAR 0 8
33748: PPUSH
33749: LD_VAR 0 4
33753: PPUSH
33754: CALL_OW 380
// un := CreateHuman ;
33758: LD_ADDR_VAR 0 14
33762: PUSH
33763: CALL_OW 44
33767: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33768: LD_ADDR_VAR 0 7
33772: PUSH
33773: LD_VAR 0 7
33777: PPUSH
33778: LD_INT 1
33780: PPUSH
33781: LD_VAR 0 14
33785: PPUSH
33786: CALL_OW 2
33790: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33791: LD_VAR 0 14
33795: PPUSH
33796: LD_VAR 0 9
33800: PPUSH
33801: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33805: LD_VAR 0 9
33809: PPUSH
33810: CALL_OW 313
33814: PUSH
33815: LD_INT 6
33817: EQUAL
33818: PUSH
33819: LD_VAR 0 9
33823: PPUSH
33824: CALL_OW 266
33828: PUSH
33829: LD_INT 32
33831: PUSH
33832: LD_INT 31
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: IN
33839: OR
33840: IFFALSE 33654
33842: GO 33651
33844: POP
33845: POP
// end else
33846: GO 34228
// for j = 1 to x do
33848: LD_ADDR_VAR 0 9
33852: PUSH
33853: DOUBLE
33854: LD_INT 1
33856: DEC
33857: ST_TO_ADDR
33858: LD_VAR 0 13
33862: PUSH
33863: FOR_TO
33864: IFFALSE 34226
// begin InitHc ;
33866: CALL_OW 19
// if not f then
33870: LD_VAR 0 12
33874: NOT
33875: IFFALSE 33964
// begin PrepareHuman ( false , i , skill ) ;
33877: LD_INT 0
33879: PPUSH
33880: LD_VAR 0 8
33884: PPUSH
33885: LD_VAR 0 4
33889: PPUSH
33890: CALL_OW 380
// un := CreateHuman ;
33894: LD_ADDR_VAR 0 14
33898: PUSH
33899: CALL_OW 44
33903: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33904: LD_ADDR_VAR 0 7
33908: PUSH
33909: LD_VAR 0 7
33913: PPUSH
33914: LD_INT 1
33916: PPUSH
33917: LD_VAR 0 14
33921: PPUSH
33922: CALL_OW 2
33926: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33927: LD_VAR 0 14
33931: PPUSH
33932: LD_VAR 0 1
33936: PPUSH
33937: CALL_OW 250
33941: PPUSH
33942: LD_VAR 0 1
33946: PPUSH
33947: CALL_OW 251
33951: PPUSH
33952: LD_INT 10
33954: PPUSH
33955: LD_INT 0
33957: PPUSH
33958: CALL_OW 50
// continue ;
33962: GO 33863
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33964: LD_VAR 0 12
33968: PUSH
33969: LD_INT 1
33971: ARRAY
33972: PPUSH
33973: CALL_OW 313
33977: PUSH
33978: LD_VAR 0 12
33982: PUSH
33983: LD_INT 1
33985: ARRAY
33986: PPUSH
33987: CALL_OW 266
33991: PUSH
33992: LD_INT 32
33994: PUSH
33995: LD_INT 31
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: IN
34002: AND
34003: PUSH
34004: LD_VAR 0 12
34008: PUSH
34009: LD_INT 1
34011: ARRAY
34012: PPUSH
34013: CALL_OW 313
34017: PUSH
34018: LD_INT 6
34020: EQUAL
34021: OR
34022: IFFALSE 34042
// f := Delete ( f , 1 ) ;
34024: LD_ADDR_VAR 0 12
34028: PUSH
34029: LD_VAR 0 12
34033: PPUSH
34034: LD_INT 1
34036: PPUSH
34037: CALL_OW 3
34041: ST_TO_ADDR
// if not f then
34042: LD_VAR 0 12
34046: NOT
34047: IFFALSE 34065
// begin x := x + 2 ;
34049: LD_ADDR_VAR 0 13
34053: PUSH
34054: LD_VAR 0 13
34058: PUSH
34059: LD_INT 2
34061: PLUS
34062: ST_TO_ADDR
// continue ;
34063: GO 33863
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34065: LD_VAR 0 12
34069: PUSH
34070: LD_INT 1
34072: ARRAY
34073: PPUSH
34074: CALL_OW 266
34078: PUSH
34079: LD_INT 5
34081: EQUAL
34082: IFFALSE 34156
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34084: LD_VAR 0 12
34088: PUSH
34089: LD_INT 1
34091: ARRAY
34092: PPUSH
34093: CALL_OW 313
34097: PUSH
34098: LD_INT 3
34100: LESS
34101: IFFALSE 34137
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34103: LD_INT 0
34105: PPUSH
34106: LD_INT 5
34108: PUSH
34109: LD_INT 8
34111: PUSH
34112: LD_INT 9
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: LIST
34119: PUSH
34120: LD_VAR 0 17
34124: ARRAY
34125: PPUSH
34126: LD_VAR 0 4
34130: PPUSH
34131: CALL_OW 380
34135: GO 34154
// PrepareHuman ( false , i , skill ) ;
34137: LD_INT 0
34139: PPUSH
34140: LD_VAR 0 8
34144: PPUSH
34145: LD_VAR 0 4
34149: PPUSH
34150: CALL_OW 380
// end else
34154: GO 34173
// PrepareHuman ( false , i , skill ) ;
34156: LD_INT 0
34158: PPUSH
34159: LD_VAR 0 8
34163: PPUSH
34164: LD_VAR 0 4
34168: PPUSH
34169: CALL_OW 380
// un := CreateHuman ;
34173: LD_ADDR_VAR 0 14
34177: PUSH
34178: CALL_OW 44
34182: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34183: LD_ADDR_VAR 0 7
34187: PUSH
34188: LD_VAR 0 7
34192: PPUSH
34193: LD_INT 1
34195: PPUSH
34196: LD_VAR 0 14
34200: PPUSH
34201: CALL_OW 2
34205: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34206: LD_VAR 0 14
34210: PPUSH
34211: LD_VAR 0 12
34215: PUSH
34216: LD_INT 1
34218: ARRAY
34219: PPUSH
34220: CALL_OW 52
// end ;
34224: GO 33863
34226: POP
34227: POP
// end ;
34228: GO 33165
34230: POP
34231: POP
// result := result ^ buildings ;
34232: LD_ADDR_VAR 0 7
34236: PUSH
34237: LD_VAR 0 7
34241: PUSH
34242: LD_VAR 0 18
34246: ADD
34247: ST_TO_ADDR
// end else
34248: GO 34391
// begin for i = 1 to personel do
34250: LD_ADDR_VAR 0 8
34254: PUSH
34255: DOUBLE
34256: LD_INT 1
34258: DEC
34259: ST_TO_ADDR
34260: LD_VAR 0 6
34264: PUSH
34265: FOR_TO
34266: IFFALSE 34389
// begin if i > 4 then
34268: LD_VAR 0 8
34272: PUSH
34273: LD_INT 4
34275: GREATER
34276: IFFALSE 34280
// break ;
34278: GO 34389
// x := personel [ i ] ;
34280: LD_ADDR_VAR 0 13
34284: PUSH
34285: LD_VAR 0 6
34289: PUSH
34290: LD_VAR 0 8
34294: ARRAY
34295: ST_TO_ADDR
// if x = - 1 then
34296: LD_VAR 0 13
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: EQUAL
34305: IFFALSE 34309
// continue ;
34307: GO 34265
// PrepareHuman ( false , i , skill ) ;
34309: LD_INT 0
34311: PPUSH
34312: LD_VAR 0 8
34316: PPUSH
34317: LD_VAR 0 4
34321: PPUSH
34322: CALL_OW 380
// un := CreateHuman ;
34326: LD_ADDR_VAR 0 14
34330: PUSH
34331: CALL_OW 44
34335: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34336: LD_VAR 0 14
34340: PPUSH
34341: LD_VAR 0 1
34345: PPUSH
34346: CALL_OW 250
34350: PPUSH
34351: LD_VAR 0 1
34355: PPUSH
34356: CALL_OW 251
34360: PPUSH
34361: LD_INT 10
34363: PPUSH
34364: LD_INT 0
34366: PPUSH
34367: CALL_OW 50
// result := result ^ un ;
34371: LD_ADDR_VAR 0 7
34375: PUSH
34376: LD_VAR 0 7
34380: PUSH
34381: LD_VAR 0 14
34385: ADD
34386: ST_TO_ADDR
// end ;
34387: GO 34265
34389: POP
34390: POP
// end ; end ;
34391: LD_VAR 0 7
34395: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34396: LD_INT 0
34398: PPUSH
34399: PPUSH
34400: PPUSH
34401: PPUSH
34402: PPUSH
34403: PPUSH
34404: PPUSH
34405: PPUSH
34406: PPUSH
34407: PPUSH
34408: PPUSH
34409: PPUSH
34410: PPUSH
34411: PPUSH
34412: PPUSH
34413: PPUSH
// result := false ;
34414: LD_ADDR_VAR 0 3
34418: PUSH
34419: LD_INT 0
34421: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34422: LD_VAR 0 1
34426: NOT
34427: PUSH
34428: LD_VAR 0 1
34432: PPUSH
34433: CALL_OW 266
34437: PUSH
34438: LD_INT 32
34440: PUSH
34441: LD_INT 33
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: IN
34448: NOT
34449: OR
34450: IFFALSE 34454
// exit ;
34452: GO 35563
// nat := GetNation ( tower ) ;
34454: LD_ADDR_VAR 0 12
34458: PUSH
34459: LD_VAR 0 1
34463: PPUSH
34464: CALL_OW 248
34468: ST_TO_ADDR
// side := GetSide ( tower ) ;
34469: LD_ADDR_VAR 0 16
34473: PUSH
34474: LD_VAR 0 1
34478: PPUSH
34479: CALL_OW 255
34483: ST_TO_ADDR
// x := GetX ( tower ) ;
34484: LD_ADDR_VAR 0 10
34488: PUSH
34489: LD_VAR 0 1
34493: PPUSH
34494: CALL_OW 250
34498: ST_TO_ADDR
// y := GetY ( tower ) ;
34499: LD_ADDR_VAR 0 11
34503: PUSH
34504: LD_VAR 0 1
34508: PPUSH
34509: CALL_OW 251
34513: ST_TO_ADDR
// if not x or not y then
34514: LD_VAR 0 10
34518: NOT
34519: PUSH
34520: LD_VAR 0 11
34524: NOT
34525: OR
34526: IFFALSE 34530
// exit ;
34528: GO 35563
// weapon := 0 ;
34530: LD_ADDR_VAR 0 18
34534: PUSH
34535: LD_INT 0
34537: ST_TO_ADDR
// fac_list := [ ] ;
34538: LD_ADDR_VAR 0 17
34542: PUSH
34543: EMPTY
34544: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34545: LD_ADDR_VAR 0 6
34549: PUSH
34550: LD_VAR 0 1
34554: PPUSH
34555: CALL_OW 274
34559: PPUSH
34560: LD_VAR 0 2
34564: PPUSH
34565: LD_INT 0
34567: PPUSH
34568: CALL 32133 0 3
34572: PPUSH
34573: LD_INT 30
34575: PUSH
34576: LD_INT 3
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PPUSH
34583: CALL_OW 72
34587: ST_TO_ADDR
// if not factories then
34588: LD_VAR 0 6
34592: NOT
34593: IFFALSE 34597
// exit ;
34595: GO 35563
// for i in factories do
34597: LD_ADDR_VAR 0 8
34601: PUSH
34602: LD_VAR 0 6
34606: PUSH
34607: FOR_IN
34608: IFFALSE 34633
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34610: LD_ADDR_VAR 0 17
34614: PUSH
34615: LD_VAR 0 17
34619: PUSH
34620: LD_VAR 0 8
34624: PPUSH
34625: CALL_OW 478
34629: UNION
34630: ST_TO_ADDR
34631: GO 34607
34633: POP
34634: POP
// if not fac_list then
34635: LD_VAR 0 17
34639: NOT
34640: IFFALSE 34644
// exit ;
34642: GO 35563
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34644: LD_ADDR_VAR 0 5
34648: PUSH
34649: LD_INT 4
34651: PUSH
34652: LD_INT 5
34654: PUSH
34655: LD_INT 9
34657: PUSH
34658: LD_INT 10
34660: PUSH
34661: LD_INT 6
34663: PUSH
34664: LD_INT 7
34666: PUSH
34667: LD_INT 11
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 27
34681: PUSH
34682: LD_INT 28
34684: PUSH
34685: LD_INT 26
34687: PUSH
34688: LD_INT 30
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 43
34699: PUSH
34700: LD_INT 44
34702: PUSH
34703: LD_INT 46
34705: PUSH
34706: LD_INT 45
34708: PUSH
34709: LD_INT 47
34711: PUSH
34712: LD_INT 49
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: LIST
34727: PUSH
34728: LD_VAR 0 12
34732: ARRAY
34733: ST_TO_ADDR
// list := list isect fac_list ;
34734: LD_ADDR_VAR 0 5
34738: PUSH
34739: LD_VAR 0 5
34743: PUSH
34744: LD_VAR 0 17
34748: ISECT
34749: ST_TO_ADDR
// if not list then
34750: LD_VAR 0 5
34754: NOT
34755: IFFALSE 34759
// exit ;
34757: GO 35563
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34759: LD_VAR 0 12
34763: PUSH
34764: LD_INT 3
34766: EQUAL
34767: PUSH
34768: LD_INT 49
34770: PUSH
34771: LD_VAR 0 5
34775: IN
34776: AND
34777: PUSH
34778: LD_INT 31
34780: PPUSH
34781: LD_VAR 0 16
34785: PPUSH
34786: CALL_OW 321
34790: PUSH
34791: LD_INT 2
34793: EQUAL
34794: AND
34795: IFFALSE 34855
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34797: LD_INT 22
34799: PUSH
34800: LD_VAR 0 16
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 35
34811: PUSH
34812: LD_INT 49
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 91
34821: PUSH
34822: LD_VAR 0 1
34826: PUSH
34827: LD_INT 10
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: LIST
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: LIST
34839: PPUSH
34840: CALL_OW 69
34844: NOT
34845: IFFALSE 34855
// weapon := ru_time_lapser ;
34847: LD_ADDR_VAR 0 18
34851: PUSH
34852: LD_INT 49
34854: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34855: LD_VAR 0 12
34859: PUSH
34860: LD_INT 1
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: IN
34870: PUSH
34871: LD_INT 11
34873: PUSH
34874: LD_VAR 0 5
34878: IN
34879: PUSH
34880: LD_INT 30
34882: PUSH
34883: LD_VAR 0 5
34887: IN
34888: OR
34889: AND
34890: PUSH
34891: LD_INT 6
34893: PPUSH
34894: LD_VAR 0 16
34898: PPUSH
34899: CALL_OW 321
34903: PUSH
34904: LD_INT 2
34906: EQUAL
34907: AND
34908: IFFALSE 35073
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34910: LD_INT 22
34912: PUSH
34913: LD_VAR 0 16
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 2
34924: PUSH
34925: LD_INT 35
34927: PUSH
34928: LD_INT 11
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 35
34937: PUSH
34938: LD_INT 30
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 91
34952: PUSH
34953: LD_VAR 0 1
34957: PUSH
34958: LD_INT 18
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: LIST
34970: PPUSH
34971: CALL_OW 69
34975: NOT
34976: PUSH
34977: LD_INT 22
34979: PUSH
34980: LD_VAR 0 16
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 2
34991: PUSH
34992: LD_INT 30
34994: PUSH
34995: LD_INT 32
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 30
35004: PUSH
35005: LD_INT 33
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 91
35019: PUSH
35020: LD_VAR 0 1
35024: PUSH
35025: LD_INT 12
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: LIST
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: LIST
35037: PUSH
35038: EMPTY
35039: LIST
35040: PPUSH
35041: CALL_OW 69
35045: PUSH
35046: LD_INT 2
35048: GREATER
35049: AND
35050: IFFALSE 35073
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35052: LD_ADDR_VAR 0 18
35056: PUSH
35057: LD_INT 11
35059: PUSH
35060: LD_INT 30
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_VAR 0 12
35071: ARRAY
35072: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35073: LD_VAR 0 18
35077: NOT
35078: PUSH
35079: LD_INT 40
35081: PPUSH
35082: LD_VAR 0 16
35086: PPUSH
35087: CALL_OW 321
35091: PUSH
35092: LD_INT 2
35094: EQUAL
35095: AND
35096: PUSH
35097: LD_INT 7
35099: PUSH
35100: LD_VAR 0 5
35104: IN
35105: PUSH
35106: LD_INT 28
35108: PUSH
35109: LD_VAR 0 5
35113: IN
35114: OR
35115: PUSH
35116: LD_INT 45
35118: PUSH
35119: LD_VAR 0 5
35123: IN
35124: OR
35125: AND
35126: IFFALSE 35380
// begin hex := GetHexInfo ( x , y ) ;
35128: LD_ADDR_VAR 0 4
35132: PUSH
35133: LD_VAR 0 10
35137: PPUSH
35138: LD_VAR 0 11
35142: PPUSH
35143: CALL_OW 546
35147: ST_TO_ADDR
// if hex [ 1 ] then
35148: LD_VAR 0 4
35152: PUSH
35153: LD_INT 1
35155: ARRAY
35156: IFFALSE 35160
// exit ;
35158: GO 35563
// height := hex [ 2 ] ;
35160: LD_ADDR_VAR 0 15
35164: PUSH
35165: LD_VAR 0 4
35169: PUSH
35170: LD_INT 2
35172: ARRAY
35173: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35174: LD_ADDR_VAR 0 14
35178: PUSH
35179: LD_INT 0
35181: PUSH
35182: LD_INT 2
35184: PUSH
35185: LD_INT 3
35187: PUSH
35188: LD_INT 5
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: ST_TO_ADDR
// for i in tmp do
35197: LD_ADDR_VAR 0 8
35201: PUSH
35202: LD_VAR 0 14
35206: PUSH
35207: FOR_IN
35208: IFFALSE 35378
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35210: LD_ADDR_VAR 0 9
35214: PUSH
35215: LD_VAR 0 10
35219: PPUSH
35220: LD_VAR 0 8
35224: PPUSH
35225: LD_INT 5
35227: PPUSH
35228: CALL_OW 272
35232: PUSH
35233: LD_VAR 0 11
35237: PPUSH
35238: LD_VAR 0 8
35242: PPUSH
35243: LD_INT 5
35245: PPUSH
35246: CALL_OW 273
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35255: LD_VAR 0 9
35259: PUSH
35260: LD_INT 1
35262: ARRAY
35263: PPUSH
35264: LD_VAR 0 9
35268: PUSH
35269: LD_INT 2
35271: ARRAY
35272: PPUSH
35273: CALL_OW 488
35277: IFFALSE 35376
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35279: LD_ADDR_VAR 0 4
35283: PUSH
35284: LD_VAR 0 9
35288: PUSH
35289: LD_INT 1
35291: ARRAY
35292: PPUSH
35293: LD_VAR 0 9
35297: PUSH
35298: LD_INT 2
35300: ARRAY
35301: PPUSH
35302: CALL_OW 546
35306: ST_TO_ADDR
// if hex [ 1 ] then
35307: LD_VAR 0 4
35311: PUSH
35312: LD_INT 1
35314: ARRAY
35315: IFFALSE 35319
// continue ;
35317: GO 35207
// h := hex [ 2 ] ;
35319: LD_ADDR_VAR 0 13
35323: PUSH
35324: LD_VAR 0 4
35328: PUSH
35329: LD_INT 2
35331: ARRAY
35332: ST_TO_ADDR
// if h + 7 < height then
35333: LD_VAR 0 13
35337: PUSH
35338: LD_INT 7
35340: PLUS
35341: PUSH
35342: LD_VAR 0 15
35346: LESS
35347: IFFALSE 35376
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35349: LD_ADDR_VAR 0 18
35353: PUSH
35354: LD_INT 7
35356: PUSH
35357: LD_INT 28
35359: PUSH
35360: LD_INT 45
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: LIST
35367: PUSH
35368: LD_VAR 0 12
35372: ARRAY
35373: ST_TO_ADDR
// break ;
35374: GO 35378
// end ; end ; end ;
35376: GO 35207
35378: POP
35379: POP
// end ; if not weapon then
35380: LD_VAR 0 18
35384: NOT
35385: IFFALSE 35445
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35387: LD_ADDR_VAR 0 5
35391: PUSH
35392: LD_VAR 0 5
35396: PUSH
35397: LD_INT 11
35399: PUSH
35400: LD_INT 30
35402: PUSH
35403: LD_INT 49
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: LIST
35410: DIFF
35411: ST_TO_ADDR
// if not list then
35412: LD_VAR 0 5
35416: NOT
35417: IFFALSE 35421
// exit ;
35419: GO 35563
// weapon := list [ rand ( 1 , list ) ] ;
35421: LD_ADDR_VAR 0 18
35425: PUSH
35426: LD_VAR 0 5
35430: PUSH
35431: LD_INT 1
35433: PPUSH
35434: LD_VAR 0 5
35438: PPUSH
35439: CALL_OW 12
35443: ARRAY
35444: ST_TO_ADDR
// end ; if weapon then
35445: LD_VAR 0 18
35449: IFFALSE 35563
// begin tmp := CostOfWeapon ( weapon ) ;
35451: LD_ADDR_VAR 0 14
35455: PUSH
35456: LD_VAR 0 18
35460: PPUSH
35461: CALL_OW 451
35465: ST_TO_ADDR
// j := GetBase ( tower ) ;
35466: LD_ADDR_VAR 0 9
35470: PUSH
35471: LD_VAR 0 1
35475: PPUSH
35476: CALL_OW 274
35480: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35481: LD_VAR 0 9
35485: PPUSH
35486: LD_INT 1
35488: PPUSH
35489: CALL_OW 275
35493: PUSH
35494: LD_VAR 0 14
35498: PUSH
35499: LD_INT 1
35501: ARRAY
35502: GREATEREQUAL
35503: PUSH
35504: LD_VAR 0 9
35508: PPUSH
35509: LD_INT 2
35511: PPUSH
35512: CALL_OW 275
35516: PUSH
35517: LD_VAR 0 14
35521: PUSH
35522: LD_INT 2
35524: ARRAY
35525: GREATEREQUAL
35526: AND
35527: PUSH
35528: LD_VAR 0 9
35532: PPUSH
35533: LD_INT 3
35535: PPUSH
35536: CALL_OW 275
35540: PUSH
35541: LD_VAR 0 14
35545: PUSH
35546: LD_INT 3
35548: ARRAY
35549: GREATEREQUAL
35550: AND
35551: IFFALSE 35563
// result := weapon ;
35553: LD_ADDR_VAR 0 3
35557: PUSH
35558: LD_VAR 0 18
35562: ST_TO_ADDR
// end ; end ;
35563: LD_VAR 0 3
35567: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35568: LD_INT 0
35570: PPUSH
35571: PPUSH
// result := true ;
35572: LD_ADDR_VAR 0 3
35576: PUSH
35577: LD_INT 1
35579: ST_TO_ADDR
// if array1 = array2 then
35580: LD_VAR 0 1
35584: PUSH
35585: LD_VAR 0 2
35589: EQUAL
35590: IFFALSE 35650
// begin for i = 1 to array1 do
35592: LD_ADDR_VAR 0 4
35596: PUSH
35597: DOUBLE
35598: LD_INT 1
35600: DEC
35601: ST_TO_ADDR
35602: LD_VAR 0 1
35606: PUSH
35607: FOR_TO
35608: IFFALSE 35646
// if array1 [ i ] <> array2 [ i ] then
35610: LD_VAR 0 1
35614: PUSH
35615: LD_VAR 0 4
35619: ARRAY
35620: PUSH
35621: LD_VAR 0 2
35625: PUSH
35626: LD_VAR 0 4
35630: ARRAY
35631: NONEQUAL
35632: IFFALSE 35644
// begin result := false ;
35634: LD_ADDR_VAR 0 3
35638: PUSH
35639: LD_INT 0
35641: ST_TO_ADDR
// break ;
35642: GO 35646
// end ;
35644: GO 35607
35646: POP
35647: POP
// end else
35648: GO 35658
// result := false ;
35650: LD_ADDR_VAR 0 3
35654: PUSH
35655: LD_INT 0
35657: ST_TO_ADDR
// end ;
35658: LD_VAR 0 3
35662: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35663: LD_INT 0
35665: PPUSH
35666: PPUSH
// if not array1 or not array2 then
35667: LD_VAR 0 1
35671: NOT
35672: PUSH
35673: LD_VAR 0 2
35677: NOT
35678: OR
35679: IFFALSE 35683
// exit ;
35681: GO 35747
// result := true ;
35683: LD_ADDR_VAR 0 3
35687: PUSH
35688: LD_INT 1
35690: ST_TO_ADDR
// for i = 1 to array1 do
35691: LD_ADDR_VAR 0 4
35695: PUSH
35696: DOUBLE
35697: LD_INT 1
35699: DEC
35700: ST_TO_ADDR
35701: LD_VAR 0 1
35705: PUSH
35706: FOR_TO
35707: IFFALSE 35745
// if array1 [ i ] <> array2 [ i ] then
35709: LD_VAR 0 1
35713: PUSH
35714: LD_VAR 0 4
35718: ARRAY
35719: PUSH
35720: LD_VAR 0 2
35724: PUSH
35725: LD_VAR 0 4
35729: ARRAY
35730: NONEQUAL
35731: IFFALSE 35743
// begin result := false ;
35733: LD_ADDR_VAR 0 3
35737: PUSH
35738: LD_INT 0
35740: ST_TO_ADDR
// break ;
35741: GO 35745
// end ;
35743: GO 35706
35745: POP
35746: POP
// end ;
35747: LD_VAR 0 3
35751: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35752: LD_INT 0
35754: PPUSH
35755: PPUSH
35756: PPUSH
// pom := GetBase ( fac ) ;
35757: LD_ADDR_VAR 0 5
35761: PUSH
35762: LD_VAR 0 1
35766: PPUSH
35767: CALL_OW 274
35771: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35772: LD_ADDR_VAR 0 4
35776: PUSH
35777: LD_VAR 0 2
35781: PUSH
35782: LD_INT 1
35784: ARRAY
35785: PPUSH
35786: LD_VAR 0 2
35790: PUSH
35791: LD_INT 2
35793: ARRAY
35794: PPUSH
35795: LD_VAR 0 2
35799: PUSH
35800: LD_INT 3
35802: ARRAY
35803: PPUSH
35804: LD_VAR 0 2
35808: PUSH
35809: LD_INT 4
35811: ARRAY
35812: PPUSH
35813: CALL_OW 449
35817: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35818: LD_ADDR_VAR 0 3
35822: PUSH
35823: LD_VAR 0 5
35827: PPUSH
35828: LD_INT 1
35830: PPUSH
35831: CALL_OW 275
35835: PUSH
35836: LD_VAR 0 4
35840: PUSH
35841: LD_INT 1
35843: ARRAY
35844: GREATEREQUAL
35845: PUSH
35846: LD_VAR 0 5
35850: PPUSH
35851: LD_INT 2
35853: PPUSH
35854: CALL_OW 275
35858: PUSH
35859: LD_VAR 0 4
35863: PUSH
35864: LD_INT 2
35866: ARRAY
35867: GREATEREQUAL
35868: AND
35869: PUSH
35870: LD_VAR 0 5
35874: PPUSH
35875: LD_INT 3
35877: PPUSH
35878: CALL_OW 275
35882: PUSH
35883: LD_VAR 0 4
35887: PUSH
35888: LD_INT 3
35890: ARRAY
35891: GREATEREQUAL
35892: AND
35893: ST_TO_ADDR
// end ;
35894: LD_VAR 0 3
35898: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35899: LD_INT 0
35901: PPUSH
35902: PPUSH
35903: PPUSH
35904: PPUSH
// pom := GetBase ( building ) ;
35905: LD_ADDR_VAR 0 3
35909: PUSH
35910: LD_VAR 0 1
35914: PPUSH
35915: CALL_OW 274
35919: ST_TO_ADDR
// if not pom then
35920: LD_VAR 0 3
35924: NOT
35925: IFFALSE 35929
// exit ;
35927: GO 36099
// btype := GetBType ( building ) ;
35929: LD_ADDR_VAR 0 5
35933: PUSH
35934: LD_VAR 0 1
35938: PPUSH
35939: CALL_OW 266
35943: ST_TO_ADDR
// if btype = b_armoury then
35944: LD_VAR 0 5
35948: PUSH
35949: LD_INT 4
35951: EQUAL
35952: IFFALSE 35962
// btype := b_barracks ;
35954: LD_ADDR_VAR 0 5
35958: PUSH
35959: LD_INT 5
35961: ST_TO_ADDR
// if btype = b_depot then
35962: LD_VAR 0 5
35966: PUSH
35967: LD_INT 0
35969: EQUAL
35970: IFFALSE 35980
// btype := b_warehouse ;
35972: LD_ADDR_VAR 0 5
35976: PUSH
35977: LD_INT 1
35979: ST_TO_ADDR
// if btype = b_workshop then
35980: LD_VAR 0 5
35984: PUSH
35985: LD_INT 2
35987: EQUAL
35988: IFFALSE 35998
// btype := b_factory ;
35990: LD_ADDR_VAR 0 5
35994: PUSH
35995: LD_INT 3
35997: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35998: LD_ADDR_VAR 0 4
36002: PUSH
36003: LD_VAR 0 5
36007: PPUSH
36008: LD_VAR 0 1
36012: PPUSH
36013: CALL_OW 248
36017: PPUSH
36018: CALL_OW 450
36022: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36023: LD_ADDR_VAR 0 2
36027: PUSH
36028: LD_VAR 0 3
36032: PPUSH
36033: LD_INT 1
36035: PPUSH
36036: CALL_OW 275
36040: PUSH
36041: LD_VAR 0 4
36045: PUSH
36046: LD_INT 1
36048: ARRAY
36049: GREATEREQUAL
36050: PUSH
36051: LD_VAR 0 3
36055: PPUSH
36056: LD_INT 2
36058: PPUSH
36059: CALL_OW 275
36063: PUSH
36064: LD_VAR 0 4
36068: PUSH
36069: LD_INT 2
36071: ARRAY
36072: GREATEREQUAL
36073: AND
36074: PUSH
36075: LD_VAR 0 3
36079: PPUSH
36080: LD_INT 3
36082: PPUSH
36083: CALL_OW 275
36087: PUSH
36088: LD_VAR 0 4
36092: PUSH
36093: LD_INT 3
36095: ARRAY
36096: GREATEREQUAL
36097: AND
36098: ST_TO_ADDR
// end ;
36099: LD_VAR 0 2
36103: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36104: LD_INT 0
36106: PPUSH
36107: PPUSH
36108: PPUSH
// pom := GetBase ( building ) ;
36109: LD_ADDR_VAR 0 4
36113: PUSH
36114: LD_VAR 0 1
36118: PPUSH
36119: CALL_OW 274
36123: ST_TO_ADDR
// if not pom then
36124: LD_VAR 0 4
36128: NOT
36129: IFFALSE 36133
// exit ;
36131: GO 36234
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36133: LD_ADDR_VAR 0 5
36137: PUSH
36138: LD_VAR 0 2
36142: PPUSH
36143: LD_VAR 0 1
36147: PPUSH
36148: CALL_OW 248
36152: PPUSH
36153: CALL_OW 450
36157: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36158: LD_ADDR_VAR 0 3
36162: PUSH
36163: LD_VAR 0 4
36167: PPUSH
36168: LD_INT 1
36170: PPUSH
36171: CALL_OW 275
36175: PUSH
36176: LD_VAR 0 5
36180: PUSH
36181: LD_INT 1
36183: ARRAY
36184: GREATEREQUAL
36185: PUSH
36186: LD_VAR 0 4
36190: PPUSH
36191: LD_INT 2
36193: PPUSH
36194: CALL_OW 275
36198: PUSH
36199: LD_VAR 0 5
36203: PUSH
36204: LD_INT 2
36206: ARRAY
36207: GREATEREQUAL
36208: AND
36209: PUSH
36210: LD_VAR 0 4
36214: PPUSH
36215: LD_INT 3
36217: PPUSH
36218: CALL_OW 275
36222: PUSH
36223: LD_VAR 0 5
36227: PUSH
36228: LD_INT 3
36230: ARRAY
36231: GREATEREQUAL
36232: AND
36233: ST_TO_ADDR
// end ;
36234: LD_VAR 0 3
36238: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36239: LD_INT 0
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
36245: PPUSH
36246: PPUSH
36247: PPUSH
36248: PPUSH
36249: PPUSH
36250: PPUSH
36251: PPUSH
// result := false ;
36252: LD_ADDR_VAR 0 8
36256: PUSH
36257: LD_INT 0
36259: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36260: LD_VAR 0 5
36264: NOT
36265: PUSH
36266: LD_VAR 0 1
36270: NOT
36271: OR
36272: PUSH
36273: LD_VAR 0 2
36277: NOT
36278: OR
36279: PUSH
36280: LD_VAR 0 3
36284: NOT
36285: OR
36286: IFFALSE 36290
// exit ;
36288: GO 37104
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36290: LD_ADDR_VAR 0 14
36294: PUSH
36295: LD_VAR 0 1
36299: PPUSH
36300: LD_VAR 0 2
36304: PPUSH
36305: LD_VAR 0 3
36309: PPUSH
36310: LD_VAR 0 4
36314: PPUSH
36315: LD_VAR 0 5
36319: PUSH
36320: LD_INT 1
36322: ARRAY
36323: PPUSH
36324: CALL_OW 248
36328: PPUSH
36329: LD_INT 0
36331: PPUSH
36332: CALL 38341 0 6
36336: ST_TO_ADDR
// if not hexes then
36337: LD_VAR 0 14
36341: NOT
36342: IFFALSE 36346
// exit ;
36344: GO 37104
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36346: LD_ADDR_VAR 0 17
36350: PUSH
36351: LD_VAR 0 5
36355: PPUSH
36356: LD_INT 22
36358: PUSH
36359: LD_VAR 0 13
36363: PPUSH
36364: CALL_OW 255
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 2
36375: PUSH
36376: LD_INT 30
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 30
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: LIST
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PPUSH
36405: CALL_OW 72
36409: ST_TO_ADDR
// for i = 1 to hexes do
36410: LD_ADDR_VAR 0 9
36414: PUSH
36415: DOUBLE
36416: LD_INT 1
36418: DEC
36419: ST_TO_ADDR
36420: LD_VAR 0 14
36424: PUSH
36425: FOR_TO
36426: IFFALSE 37102
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36428: LD_ADDR_VAR 0 13
36432: PUSH
36433: LD_VAR 0 14
36437: PUSH
36438: LD_VAR 0 9
36442: ARRAY
36443: PUSH
36444: LD_INT 1
36446: ARRAY
36447: PPUSH
36448: LD_VAR 0 14
36452: PUSH
36453: LD_VAR 0 9
36457: ARRAY
36458: PUSH
36459: LD_INT 2
36461: ARRAY
36462: PPUSH
36463: CALL_OW 428
36467: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36468: LD_VAR 0 14
36472: PUSH
36473: LD_VAR 0 9
36477: ARRAY
36478: PUSH
36479: LD_INT 1
36481: ARRAY
36482: PPUSH
36483: LD_VAR 0 14
36487: PUSH
36488: LD_VAR 0 9
36492: ARRAY
36493: PUSH
36494: LD_INT 2
36496: ARRAY
36497: PPUSH
36498: CALL_OW 351
36502: PUSH
36503: LD_VAR 0 14
36507: PUSH
36508: LD_VAR 0 9
36512: ARRAY
36513: PUSH
36514: LD_INT 1
36516: ARRAY
36517: PPUSH
36518: LD_VAR 0 14
36522: PUSH
36523: LD_VAR 0 9
36527: ARRAY
36528: PUSH
36529: LD_INT 2
36531: ARRAY
36532: PPUSH
36533: CALL_OW 488
36537: NOT
36538: OR
36539: PUSH
36540: LD_VAR 0 13
36544: PPUSH
36545: CALL_OW 247
36549: PUSH
36550: LD_INT 3
36552: EQUAL
36553: OR
36554: IFFALSE 36560
// exit ;
36556: POP
36557: POP
36558: GO 37104
// if not tmp then
36560: LD_VAR 0 13
36564: NOT
36565: IFFALSE 36569
// continue ;
36567: GO 36425
// result := true ;
36569: LD_ADDR_VAR 0 8
36573: PUSH
36574: LD_INT 1
36576: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36577: LD_VAR 0 6
36581: PUSH
36582: LD_VAR 0 13
36586: PPUSH
36587: CALL_OW 247
36591: PUSH
36592: LD_INT 2
36594: EQUAL
36595: AND
36596: PUSH
36597: LD_VAR 0 13
36601: PPUSH
36602: CALL_OW 263
36606: PUSH
36607: LD_INT 1
36609: EQUAL
36610: AND
36611: IFFALSE 36775
// begin if IsDrivenBy ( tmp ) then
36613: LD_VAR 0 13
36617: PPUSH
36618: CALL_OW 311
36622: IFFALSE 36626
// continue ;
36624: GO 36425
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36626: LD_VAR 0 6
36630: PPUSH
36631: LD_INT 3
36633: PUSH
36634: LD_INT 60
36636: PUSH
36637: EMPTY
36638: LIST
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 3
36646: PUSH
36647: LD_INT 55
36649: PUSH
36650: EMPTY
36651: LIST
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PPUSH
36661: CALL_OW 72
36665: IFFALSE 36773
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36667: LD_ADDR_VAR 0 18
36671: PUSH
36672: LD_VAR 0 6
36676: PPUSH
36677: LD_INT 3
36679: PUSH
36680: LD_INT 60
36682: PUSH
36683: EMPTY
36684: LIST
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 3
36692: PUSH
36693: LD_INT 55
36695: PUSH
36696: EMPTY
36697: LIST
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PPUSH
36707: CALL_OW 72
36711: PUSH
36712: LD_INT 1
36714: ARRAY
36715: ST_TO_ADDR
// if IsInUnit ( driver ) then
36716: LD_VAR 0 18
36720: PPUSH
36721: CALL_OW 310
36725: IFFALSE 36736
// ComExit ( driver ) ;
36727: LD_VAR 0 18
36731: PPUSH
36732: CALL 61525 0 1
// AddComEnterUnit ( driver , tmp ) ;
36736: LD_VAR 0 18
36740: PPUSH
36741: LD_VAR 0 13
36745: PPUSH
36746: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36750: LD_VAR 0 18
36754: PPUSH
36755: LD_VAR 0 7
36759: PPUSH
36760: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36764: LD_VAR 0 18
36768: PPUSH
36769: CALL_OW 181
// end ; continue ;
36773: GO 36425
// end ; if not cleaners or not tmp in cleaners then
36775: LD_VAR 0 6
36779: NOT
36780: PUSH
36781: LD_VAR 0 13
36785: PUSH
36786: LD_VAR 0 6
36790: IN
36791: NOT
36792: OR
36793: IFFALSE 37100
// begin if dep then
36795: LD_VAR 0 17
36799: IFFALSE 36935
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36801: LD_ADDR_VAR 0 16
36805: PUSH
36806: LD_VAR 0 17
36810: PUSH
36811: LD_INT 1
36813: ARRAY
36814: PPUSH
36815: CALL_OW 250
36819: PPUSH
36820: LD_VAR 0 17
36824: PUSH
36825: LD_INT 1
36827: ARRAY
36828: PPUSH
36829: CALL_OW 254
36833: PPUSH
36834: LD_INT 5
36836: PPUSH
36837: CALL_OW 272
36841: PUSH
36842: LD_VAR 0 17
36846: PUSH
36847: LD_INT 1
36849: ARRAY
36850: PPUSH
36851: CALL_OW 251
36855: PPUSH
36856: LD_VAR 0 17
36860: PUSH
36861: LD_INT 1
36863: ARRAY
36864: PPUSH
36865: CALL_OW 254
36869: PPUSH
36870: LD_INT 5
36872: PPUSH
36873: CALL_OW 273
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36882: LD_VAR 0 16
36886: PUSH
36887: LD_INT 1
36889: ARRAY
36890: PPUSH
36891: LD_VAR 0 16
36895: PUSH
36896: LD_INT 2
36898: ARRAY
36899: PPUSH
36900: CALL_OW 488
36904: IFFALSE 36935
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36906: LD_VAR 0 13
36910: PPUSH
36911: LD_VAR 0 16
36915: PUSH
36916: LD_INT 1
36918: ARRAY
36919: PPUSH
36920: LD_VAR 0 16
36924: PUSH
36925: LD_INT 2
36927: ARRAY
36928: PPUSH
36929: CALL_OW 111
// continue ;
36933: GO 36425
// end ; end ; r := GetDir ( tmp ) ;
36935: LD_ADDR_VAR 0 15
36939: PUSH
36940: LD_VAR 0 13
36944: PPUSH
36945: CALL_OW 254
36949: ST_TO_ADDR
// if r = 5 then
36950: LD_VAR 0 15
36954: PUSH
36955: LD_INT 5
36957: EQUAL
36958: IFFALSE 36968
// r := 0 ;
36960: LD_ADDR_VAR 0 15
36964: PUSH
36965: LD_INT 0
36967: ST_TO_ADDR
// for j = r to 5 do
36968: LD_ADDR_VAR 0 10
36972: PUSH
36973: DOUBLE
36974: LD_VAR 0 15
36978: DEC
36979: ST_TO_ADDR
36980: LD_INT 5
36982: PUSH
36983: FOR_TO
36984: IFFALSE 37098
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36986: LD_ADDR_VAR 0 11
36990: PUSH
36991: LD_VAR 0 13
36995: PPUSH
36996: CALL_OW 250
37000: PPUSH
37001: LD_VAR 0 10
37005: PPUSH
37006: LD_INT 2
37008: PPUSH
37009: CALL_OW 272
37013: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37014: LD_ADDR_VAR 0 12
37018: PUSH
37019: LD_VAR 0 13
37023: PPUSH
37024: CALL_OW 251
37028: PPUSH
37029: LD_VAR 0 10
37033: PPUSH
37034: LD_INT 2
37036: PPUSH
37037: CALL_OW 273
37041: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37042: LD_VAR 0 11
37046: PPUSH
37047: LD_VAR 0 12
37051: PPUSH
37052: CALL_OW 488
37056: PUSH
37057: LD_VAR 0 11
37061: PPUSH
37062: LD_VAR 0 12
37066: PPUSH
37067: CALL_OW 428
37071: NOT
37072: AND
37073: IFFALSE 37096
// begin ComMoveXY ( tmp , _x , _y ) ;
37075: LD_VAR 0 13
37079: PPUSH
37080: LD_VAR 0 11
37084: PPUSH
37085: LD_VAR 0 12
37089: PPUSH
37090: CALL_OW 111
// break ;
37094: GO 37098
// end ; end ;
37096: GO 36983
37098: POP
37099: POP
// end ; end ;
37100: GO 36425
37102: POP
37103: POP
// end ;
37104: LD_VAR 0 8
37108: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37109: LD_INT 0
37111: PPUSH
// result := true ;
37112: LD_ADDR_VAR 0 3
37116: PUSH
37117: LD_INT 1
37119: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37120: LD_VAR 0 2
37124: PUSH
37125: LD_INT 24
37127: DOUBLE
37128: EQUAL
37129: IFTRUE 37139
37131: LD_INT 33
37133: DOUBLE
37134: EQUAL
37135: IFTRUE 37139
37137: GO 37164
37139: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37140: LD_ADDR_VAR 0 3
37144: PUSH
37145: LD_INT 32
37147: PPUSH
37148: LD_VAR 0 1
37152: PPUSH
37153: CALL_OW 321
37157: PUSH
37158: LD_INT 2
37160: EQUAL
37161: ST_TO_ADDR
37162: GO 37484
37164: LD_INT 20
37166: DOUBLE
37167: EQUAL
37168: IFTRUE 37172
37170: GO 37197
37172: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37173: LD_ADDR_VAR 0 3
37177: PUSH
37178: LD_INT 6
37180: PPUSH
37181: LD_VAR 0 1
37185: PPUSH
37186: CALL_OW 321
37190: PUSH
37191: LD_INT 2
37193: EQUAL
37194: ST_TO_ADDR
37195: GO 37484
37197: LD_INT 22
37199: DOUBLE
37200: EQUAL
37201: IFTRUE 37211
37203: LD_INT 36
37205: DOUBLE
37206: EQUAL
37207: IFTRUE 37211
37209: GO 37236
37211: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37212: LD_ADDR_VAR 0 3
37216: PUSH
37217: LD_INT 15
37219: PPUSH
37220: LD_VAR 0 1
37224: PPUSH
37225: CALL_OW 321
37229: PUSH
37230: LD_INT 2
37232: EQUAL
37233: ST_TO_ADDR
37234: GO 37484
37236: LD_INT 30
37238: DOUBLE
37239: EQUAL
37240: IFTRUE 37244
37242: GO 37269
37244: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37245: LD_ADDR_VAR 0 3
37249: PUSH
37250: LD_INT 20
37252: PPUSH
37253: LD_VAR 0 1
37257: PPUSH
37258: CALL_OW 321
37262: PUSH
37263: LD_INT 2
37265: EQUAL
37266: ST_TO_ADDR
37267: GO 37484
37269: LD_INT 28
37271: DOUBLE
37272: EQUAL
37273: IFTRUE 37283
37275: LD_INT 21
37277: DOUBLE
37278: EQUAL
37279: IFTRUE 37283
37281: GO 37308
37283: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37284: LD_ADDR_VAR 0 3
37288: PUSH
37289: LD_INT 21
37291: PPUSH
37292: LD_VAR 0 1
37296: PPUSH
37297: CALL_OW 321
37301: PUSH
37302: LD_INT 2
37304: EQUAL
37305: ST_TO_ADDR
37306: GO 37484
37308: LD_INT 16
37310: DOUBLE
37311: EQUAL
37312: IFTRUE 37316
37314: GO 37343
37316: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37317: LD_ADDR_VAR 0 3
37321: PUSH
37322: LD_EXP 30
37326: PPUSH
37327: LD_VAR 0 1
37331: PPUSH
37332: CALL_OW 321
37336: PUSH
37337: LD_INT 2
37339: EQUAL
37340: ST_TO_ADDR
37341: GO 37484
37343: LD_INT 19
37345: DOUBLE
37346: EQUAL
37347: IFTRUE 37357
37349: LD_INT 23
37351: DOUBLE
37352: EQUAL
37353: IFTRUE 37357
37355: GO 37384
37357: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37358: LD_ADDR_VAR 0 3
37362: PUSH
37363: LD_EXP 29
37367: PPUSH
37368: LD_VAR 0 1
37372: PPUSH
37373: CALL_OW 321
37377: PUSH
37378: LD_INT 2
37380: EQUAL
37381: ST_TO_ADDR
37382: GO 37484
37384: LD_INT 17
37386: DOUBLE
37387: EQUAL
37388: IFTRUE 37392
37390: GO 37417
37392: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37393: LD_ADDR_VAR 0 3
37397: PUSH
37398: LD_INT 39
37400: PPUSH
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL_OW 321
37410: PUSH
37411: LD_INT 2
37413: EQUAL
37414: ST_TO_ADDR
37415: GO 37484
37417: LD_INT 18
37419: DOUBLE
37420: EQUAL
37421: IFTRUE 37425
37423: GO 37450
37425: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37426: LD_ADDR_VAR 0 3
37430: PUSH
37431: LD_INT 40
37433: PPUSH
37434: LD_VAR 0 1
37438: PPUSH
37439: CALL_OW 321
37443: PUSH
37444: LD_INT 2
37446: EQUAL
37447: ST_TO_ADDR
37448: GO 37484
37450: LD_INT 27
37452: DOUBLE
37453: EQUAL
37454: IFTRUE 37458
37456: GO 37483
37458: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37459: LD_ADDR_VAR 0 3
37463: PUSH
37464: LD_INT 35
37466: PPUSH
37467: LD_VAR 0 1
37471: PPUSH
37472: CALL_OW 321
37476: PUSH
37477: LD_INT 2
37479: EQUAL
37480: ST_TO_ADDR
37481: GO 37484
37483: POP
// end ;
37484: LD_VAR 0 3
37488: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37489: LD_INT 0
37491: PPUSH
37492: PPUSH
37493: PPUSH
37494: PPUSH
37495: PPUSH
37496: PPUSH
37497: PPUSH
37498: PPUSH
37499: PPUSH
37500: PPUSH
37501: PPUSH
// result := false ;
37502: LD_ADDR_VAR 0 6
37506: PUSH
37507: LD_INT 0
37509: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37510: LD_VAR 0 1
37514: NOT
37515: PUSH
37516: LD_VAR 0 1
37520: PPUSH
37521: CALL_OW 266
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: IN
37536: NOT
37537: OR
37538: PUSH
37539: LD_VAR 0 2
37543: NOT
37544: OR
37545: PUSH
37546: LD_VAR 0 5
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: LD_INT 2
37559: PUSH
37560: LD_INT 3
37562: PUSH
37563: LD_INT 4
37565: PUSH
37566: LD_INT 5
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: IN
37577: NOT
37578: OR
37579: PUSH
37580: LD_VAR 0 3
37584: PPUSH
37585: LD_VAR 0 4
37589: PPUSH
37590: CALL_OW 488
37594: NOT
37595: OR
37596: IFFALSE 37600
// exit ;
37598: GO 38336
// side := GetSide ( depot ) ;
37600: LD_ADDR_VAR 0 9
37604: PUSH
37605: LD_VAR 0 1
37609: PPUSH
37610: CALL_OW 255
37614: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37615: LD_VAR 0 9
37619: PPUSH
37620: LD_VAR 0 2
37624: PPUSH
37625: CALL 37109 0 2
37629: NOT
37630: IFFALSE 37634
// exit ;
37632: GO 38336
// pom := GetBase ( depot ) ;
37634: LD_ADDR_VAR 0 10
37638: PUSH
37639: LD_VAR 0 1
37643: PPUSH
37644: CALL_OW 274
37648: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37649: LD_ADDR_VAR 0 11
37653: PUSH
37654: LD_VAR 0 2
37658: PPUSH
37659: LD_VAR 0 1
37663: PPUSH
37664: CALL_OW 248
37668: PPUSH
37669: CALL_OW 450
37673: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37674: LD_VAR 0 10
37678: PPUSH
37679: LD_INT 1
37681: PPUSH
37682: CALL_OW 275
37686: PUSH
37687: LD_VAR 0 11
37691: PUSH
37692: LD_INT 1
37694: ARRAY
37695: GREATEREQUAL
37696: PUSH
37697: LD_VAR 0 10
37701: PPUSH
37702: LD_INT 2
37704: PPUSH
37705: CALL_OW 275
37709: PUSH
37710: LD_VAR 0 11
37714: PUSH
37715: LD_INT 2
37717: ARRAY
37718: GREATEREQUAL
37719: AND
37720: PUSH
37721: LD_VAR 0 10
37725: PPUSH
37726: LD_INT 3
37728: PPUSH
37729: CALL_OW 275
37733: PUSH
37734: LD_VAR 0 11
37738: PUSH
37739: LD_INT 3
37741: ARRAY
37742: GREATEREQUAL
37743: AND
37744: NOT
37745: IFFALSE 37749
// exit ;
37747: GO 38336
// if GetBType ( depot ) = b_depot then
37749: LD_VAR 0 1
37753: PPUSH
37754: CALL_OW 266
37758: PUSH
37759: LD_INT 0
37761: EQUAL
37762: IFFALSE 37774
// dist := 28 else
37764: LD_ADDR_VAR 0 14
37768: PUSH
37769: LD_INT 28
37771: ST_TO_ADDR
37772: GO 37782
// dist := 36 ;
37774: LD_ADDR_VAR 0 14
37778: PUSH
37779: LD_INT 36
37781: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37782: LD_VAR 0 1
37786: PPUSH
37787: LD_VAR 0 3
37791: PPUSH
37792: LD_VAR 0 4
37796: PPUSH
37797: CALL_OW 297
37801: PUSH
37802: LD_VAR 0 14
37806: GREATER
37807: IFFALSE 37811
// exit ;
37809: GO 38336
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37811: LD_ADDR_VAR 0 12
37815: PUSH
37816: LD_VAR 0 2
37820: PPUSH
37821: LD_VAR 0 3
37825: PPUSH
37826: LD_VAR 0 4
37830: PPUSH
37831: LD_VAR 0 5
37835: PPUSH
37836: LD_VAR 0 1
37840: PPUSH
37841: CALL_OW 248
37845: PPUSH
37846: LD_INT 0
37848: PPUSH
37849: CALL 38341 0 6
37853: ST_TO_ADDR
// if not hexes then
37854: LD_VAR 0 12
37858: NOT
37859: IFFALSE 37863
// exit ;
37861: GO 38336
// hex := GetHexInfo ( x , y ) ;
37863: LD_ADDR_VAR 0 15
37867: PUSH
37868: LD_VAR 0 3
37872: PPUSH
37873: LD_VAR 0 4
37877: PPUSH
37878: CALL_OW 546
37882: ST_TO_ADDR
// if hex [ 1 ] then
37883: LD_VAR 0 15
37887: PUSH
37888: LD_INT 1
37890: ARRAY
37891: IFFALSE 37895
// exit ;
37893: GO 38336
// height := hex [ 2 ] ;
37895: LD_ADDR_VAR 0 13
37899: PUSH
37900: LD_VAR 0 15
37904: PUSH
37905: LD_INT 2
37907: ARRAY
37908: ST_TO_ADDR
// for i = 1 to hexes do
37909: LD_ADDR_VAR 0 7
37913: PUSH
37914: DOUBLE
37915: LD_INT 1
37917: DEC
37918: ST_TO_ADDR
37919: LD_VAR 0 12
37923: PUSH
37924: FOR_TO
37925: IFFALSE 38255
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37927: LD_VAR 0 12
37931: PUSH
37932: LD_VAR 0 7
37936: ARRAY
37937: PUSH
37938: LD_INT 1
37940: ARRAY
37941: PPUSH
37942: LD_VAR 0 12
37946: PUSH
37947: LD_VAR 0 7
37951: ARRAY
37952: PUSH
37953: LD_INT 2
37955: ARRAY
37956: PPUSH
37957: CALL_OW 488
37961: NOT
37962: PUSH
37963: LD_VAR 0 12
37967: PUSH
37968: LD_VAR 0 7
37972: ARRAY
37973: PUSH
37974: LD_INT 1
37976: ARRAY
37977: PPUSH
37978: LD_VAR 0 12
37982: PUSH
37983: LD_VAR 0 7
37987: ARRAY
37988: PUSH
37989: LD_INT 2
37991: ARRAY
37992: PPUSH
37993: CALL_OW 428
37997: PUSH
37998: LD_INT 0
38000: GREATER
38001: OR
38002: PUSH
38003: LD_VAR 0 12
38007: PUSH
38008: LD_VAR 0 7
38012: ARRAY
38013: PUSH
38014: LD_INT 1
38016: ARRAY
38017: PPUSH
38018: LD_VAR 0 12
38022: PUSH
38023: LD_VAR 0 7
38027: ARRAY
38028: PUSH
38029: LD_INT 2
38031: ARRAY
38032: PPUSH
38033: CALL_OW 351
38037: OR
38038: IFFALSE 38044
// exit ;
38040: POP
38041: POP
38042: GO 38336
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38044: LD_ADDR_VAR 0 8
38048: PUSH
38049: LD_VAR 0 12
38053: PUSH
38054: LD_VAR 0 7
38058: ARRAY
38059: PUSH
38060: LD_INT 1
38062: ARRAY
38063: PPUSH
38064: LD_VAR 0 12
38068: PUSH
38069: LD_VAR 0 7
38073: ARRAY
38074: PUSH
38075: LD_INT 2
38077: ARRAY
38078: PPUSH
38079: CALL_OW 546
38083: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38084: LD_VAR 0 8
38088: PUSH
38089: LD_INT 1
38091: ARRAY
38092: PUSH
38093: LD_VAR 0 8
38097: PUSH
38098: LD_INT 2
38100: ARRAY
38101: PUSH
38102: LD_VAR 0 13
38106: PUSH
38107: LD_INT 2
38109: PLUS
38110: GREATER
38111: OR
38112: PUSH
38113: LD_VAR 0 8
38117: PUSH
38118: LD_INT 2
38120: ARRAY
38121: PUSH
38122: LD_VAR 0 13
38126: PUSH
38127: LD_INT 2
38129: MINUS
38130: LESS
38131: OR
38132: PUSH
38133: LD_VAR 0 8
38137: PUSH
38138: LD_INT 3
38140: ARRAY
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: LD_INT 8
38147: PUSH
38148: LD_INT 9
38150: PUSH
38151: LD_INT 10
38153: PUSH
38154: LD_INT 11
38156: PUSH
38157: LD_INT 12
38159: PUSH
38160: LD_INT 13
38162: PUSH
38163: LD_INT 16
38165: PUSH
38166: LD_INT 17
38168: PUSH
38169: LD_INT 18
38171: PUSH
38172: LD_INT 19
38174: PUSH
38175: LD_INT 20
38177: PUSH
38178: LD_INT 21
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: IN
38196: NOT
38197: OR
38198: PUSH
38199: LD_VAR 0 8
38203: PUSH
38204: LD_INT 5
38206: ARRAY
38207: NOT
38208: OR
38209: PUSH
38210: LD_VAR 0 8
38214: PUSH
38215: LD_INT 6
38217: ARRAY
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: LD_INT 2
38224: PUSH
38225: LD_INT 7
38227: PUSH
38228: LD_INT 9
38230: PUSH
38231: LD_INT 10
38233: PUSH
38234: LD_INT 11
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: IN
38245: NOT
38246: OR
38247: IFFALSE 38253
// exit ;
38249: POP
38250: POP
38251: GO 38336
// end ;
38253: GO 37924
38255: POP
38256: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38257: LD_VAR 0 9
38261: PPUSH
38262: LD_VAR 0 3
38266: PPUSH
38267: LD_VAR 0 4
38271: PPUSH
38272: LD_INT 20
38274: PPUSH
38275: CALL 30281 0 4
38279: PUSH
38280: LD_INT 4
38282: ARRAY
38283: IFFALSE 38287
// exit ;
38285: GO 38336
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38287: LD_VAR 0 2
38291: PUSH
38292: LD_INT 29
38294: PUSH
38295: LD_INT 30
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: IN
38302: PUSH
38303: LD_VAR 0 3
38307: PPUSH
38308: LD_VAR 0 4
38312: PPUSH
38313: LD_VAR 0 9
38317: PPUSH
38318: CALL_OW 440
38322: NOT
38323: AND
38324: IFFALSE 38328
// exit ;
38326: GO 38336
// result := true ;
38328: LD_ADDR_VAR 0 6
38332: PUSH
38333: LD_INT 1
38335: ST_TO_ADDR
// end ;
38336: LD_VAR 0 6
38340: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38341: LD_INT 0
38343: PPUSH
38344: PPUSH
38345: PPUSH
38346: PPUSH
38347: PPUSH
38348: PPUSH
38349: PPUSH
38350: PPUSH
38351: PPUSH
38352: PPUSH
38353: PPUSH
38354: PPUSH
38355: PPUSH
38356: PPUSH
38357: PPUSH
38358: PPUSH
38359: PPUSH
38360: PPUSH
38361: PPUSH
38362: PPUSH
38363: PPUSH
38364: PPUSH
38365: PPUSH
38366: PPUSH
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
38371: PPUSH
38372: PPUSH
38373: PPUSH
38374: PPUSH
38375: PPUSH
38376: PPUSH
38377: PPUSH
38378: PPUSH
38379: PPUSH
38380: PPUSH
38381: PPUSH
38382: PPUSH
38383: PPUSH
38384: PPUSH
38385: PPUSH
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
38393: PPUSH
38394: PPUSH
38395: PPUSH
38396: PPUSH
38397: PPUSH
38398: PPUSH
38399: PPUSH
38400: PPUSH
// result = [ ] ;
38401: LD_ADDR_VAR 0 7
38405: PUSH
38406: EMPTY
38407: ST_TO_ADDR
// temp_list = [ ] ;
38408: LD_ADDR_VAR 0 9
38412: PUSH
38413: EMPTY
38414: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38415: LD_VAR 0 4
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: LD_INT 1
38425: PUSH
38426: LD_INT 2
38428: PUSH
38429: LD_INT 3
38431: PUSH
38432: LD_INT 4
38434: PUSH
38435: LD_INT 5
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: IN
38446: NOT
38447: PUSH
38448: LD_VAR 0 1
38452: PUSH
38453: LD_INT 0
38455: PUSH
38456: LD_INT 1
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: IN
38463: PUSH
38464: LD_VAR 0 5
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: LD_INT 2
38474: PUSH
38475: LD_INT 3
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: LIST
38482: IN
38483: NOT
38484: AND
38485: OR
38486: IFFALSE 38490
// exit ;
38488: GO 56881
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38490: LD_VAR 0 1
38494: PUSH
38495: LD_INT 6
38497: PUSH
38498: LD_INT 7
38500: PUSH
38501: LD_INT 8
38503: PUSH
38504: LD_INT 13
38506: PUSH
38507: LD_INT 12
38509: PUSH
38510: LD_INT 15
38512: PUSH
38513: LD_INT 11
38515: PUSH
38516: LD_INT 14
38518: PUSH
38519: LD_INT 10
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: IN
38533: IFFALSE 38543
// btype = b_lab ;
38535: LD_ADDR_VAR 0 1
38539: PUSH
38540: LD_INT 6
38542: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38543: LD_VAR 0 6
38547: PUSH
38548: LD_INT 0
38550: PUSH
38551: LD_INT 1
38553: PUSH
38554: LD_INT 2
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: LIST
38561: IN
38562: NOT
38563: PUSH
38564: LD_VAR 0 1
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: LD_INT 3
38580: PUSH
38581: LD_INT 6
38583: PUSH
38584: LD_INT 36
38586: PUSH
38587: LD_INT 4
38589: PUSH
38590: LD_INT 5
38592: PUSH
38593: LD_INT 31
38595: PUSH
38596: LD_INT 32
38598: PUSH
38599: LD_INT 33
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: IN
38615: NOT
38616: PUSH
38617: LD_VAR 0 6
38621: PUSH
38622: LD_INT 1
38624: EQUAL
38625: AND
38626: OR
38627: PUSH
38628: LD_VAR 0 1
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: LD_INT 3
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: IN
38643: NOT
38644: PUSH
38645: LD_VAR 0 6
38649: PUSH
38650: LD_INT 2
38652: EQUAL
38653: AND
38654: OR
38655: IFFALSE 38665
// mode = 0 ;
38657: LD_ADDR_VAR 0 6
38661: PUSH
38662: LD_INT 0
38664: ST_TO_ADDR
// case mode of 0 :
38665: LD_VAR 0 6
38669: PUSH
38670: LD_INT 0
38672: DOUBLE
38673: EQUAL
38674: IFTRUE 38678
38676: GO 50131
38678: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38679: LD_ADDR_VAR 0 11
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: LD_INT 1
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 1
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: LD_INT 1
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: NEG
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 1
38760: NEG
38761: PUSH
38762: LD_INT 2
38764: NEG
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: LD_INT 2
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: LD_INT 2
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: LD_INT 2
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: LD_INT 3
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: LD_INT 3
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38872: LD_ADDR_VAR 0 12
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: LD_INT 1
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 2
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 2
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: NEG
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: NEG
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 2
39018: NEG
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 3
39029: NEG
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 3
39040: NEG
39041: PUSH
39042: LD_INT 1
39044: NEG
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39068: LD_ADDR_VAR 0 13
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: LD_INT 0
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 2
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: LD_INT 2
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 2
39191: NEG
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PUSH
39205: LD_INT 2
39207: NEG
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 2
39215: NEG
39216: PUSH
39217: LD_INT 3
39219: NEG
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 3
39227: NEG
39228: PUSH
39229: LD_INT 2
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 3
39239: NEG
39240: PUSH
39241: LD_INT 3
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39267: LD_ADDR_VAR 0 14
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: LD_INT 2
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: LD_INT 2
39363: NEG
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: LD_INT 2
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: LD_INT 1
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: LD_INT 3
39417: NEG
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: LD_INT 3
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39463: LD_ADDR_VAR 0 15
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: NEG
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: LD_INT 1
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 2
39586: NEG
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 2
39597: NEG
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 2
39609: PUSH
39610: LD_INT 1
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 3
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 3
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39656: LD_ADDR_VAR 0 16
39660: PUSH
39661: LD_INT 0
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: LD_INT 2
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: LD_INT 2
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: LD_INT 2
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 2
39779: NEG
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 2
39791: NEG
39792: PUSH
39793: LD_INT 2
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 3
39803: PUSH
39804: LD_INT 2
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 3
39813: PUSH
39814: LD_INT 3
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 2
39823: PUSH
39824: LD_INT 3
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39849: LD_ADDR_VAR 0 17
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: LD_INT 2
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 0
39942: PUSH
39943: LD_INT 2
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: LD_INT 1
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 2
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: LD_INT 2
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: LD_INT 1
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: NEG
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 2
40036: NEG
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: NEG
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40079: LD_ADDR_VAR 0 18
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: NEG
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: LD_INT 2
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: NEG
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: NEG
40279: PUSH
40280: LD_INT 2
40282: NEG
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40309: LD_ADDR_VAR 0 19
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 1
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: LD_INT 2
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: LD_INT 1
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 2
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: NEG
40509: PUSH
40510: LD_INT 2
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40539: LD_ADDR_VAR 0 20
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: LD_INT 1
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 0
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 2
40726: NEG
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 2
40738: NEG
40739: PUSH
40740: LD_INT 2
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40769: LD_ADDR_VAR 0 21
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 0
40786: PUSH
40787: LD_INT 1
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: LD_INT 1
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 2
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: LD_INT 2
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 1
40914: PUSH
40915: LD_INT 2
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 2
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 2
40956: NEG
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 2
40968: NEG
40969: PUSH
40970: LD_INT 2
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40999: LD_ADDR_VAR 0 22
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: LD_INT 1
41019: NEG
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 1
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: LD_INT 2
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: LD_INT 1
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: PUSH
41135: LD_INT 2
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: LD_INT 2
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: NEG
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: NEG
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: NEG
41199: PUSH
41200: LD_INT 2
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41229: LD_ADDR_VAR 0 23
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: LD_INT 1
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 0
41277: PUSH
41278: LD_INT 1
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 1
41298: NEG
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 1
41310: NEG
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 2
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: LD_INT 1
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: PUSH
41355: LD_INT 1
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: LD_INT 2
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: LD_INT 2
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: NEG
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 2
41416: NEG
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 2
41428: NEG
41429: PUSH
41430: LD_INT 2
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 2
41440: NEG
41441: PUSH
41442: LD_INT 3
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: LD_INT 3
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: LD_INT 2
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41509: LD_ADDR_VAR 0 24
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 1
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: NEG
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 0
41602: PUSH
41603: LD_INT 2
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 2
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: PUSH
41635: LD_INT 1
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 2
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 2
41685: NEG
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 2
41696: NEG
41697: PUSH
41698: LD_INT 1
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: NEG
41709: PUSH
41710: LD_INT 2
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: LD_INT 2
41723: NEG
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 3
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 3
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41785: LD_ADDR_VAR 0 25
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: NEG
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 2
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 2
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 2
41961: NEG
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 2
41972: NEG
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: LD_INT 2
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 3
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 3
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 2
42016: PUSH
42017: LD_INT 3
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: LD_INT 3
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42059: LD_ADDR_VAR 0 26
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: PUSH
42271: LD_INT 3
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: LD_INT 3
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: NEG
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42335: LD_ADDR_VAR 0 27
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: LD_INT 1
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: LD_INT 2
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 2
42511: NEG
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: NEG
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: LD_INT 2
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: LD_INT 2
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 3
42568: NEG
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 3
42580: NEG
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42615: LD_ADDR_VAR 0 28
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 2
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 0
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 2
42791: NEG
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 2
42802: NEG
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: LD_INT 2
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: NEG
42827: PUSH
42828: LD_INT 3
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: LD_INT 3
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 3
42850: NEG
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 3
42862: NEG
42863: PUSH
42864: LD_INT 2
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42897: LD_ADDR_VAR 0 29
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 0
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: LD_INT 2
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: LD_INT 2
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 2
43063: NEG
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: NEG
43076: PUSH
43077: LD_INT 2
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: NEG
43088: PUSH
43089: LD_INT 3
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 3
43110: PUSH
43111: LD_INT 1
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 3
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 3
43141: NEG
43142: PUSH
43143: LD_INT 2
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43176: LD_ADDR_VAR 0 30
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: LD_INT 2
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: LD_INT 2
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 2
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: LD_INT 3
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 3
43388: PUSH
43389: LD_INT 2
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 2
43398: PUSH
43399: LD_INT 3
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 3
43419: NEG
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43454: LD_ADDR_VAR 0 31
43458: PUSH
43459: LD_INT 0
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 0
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: NEG
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: LD_INT 2
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 2
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 0
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: NEG
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: NEG
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: NEG
43644: PUSH
43645: LD_INT 3
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 3
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: LD_INT 3
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: LD_INT 2
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 3
43697: NEG
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43732: LD_ADDR_VAR 0 32
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 0
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: NEG
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: LD_INT 2
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 1
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 0
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: NEG
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 2
43898: NEG
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 2
43909: NEG
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: LD_INT 3
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 3
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 2
43954: PUSH
43955: LD_INT 3
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 3
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44010: LD_ADDR_VAR 0 33
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: LD_INT 2
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 2
44188: NEG
44189: PUSH
44190: LD_INT 2
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: LD_INT 3
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: LD_INT 3
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 3
44254: NEG
44255: PUSH
44256: LD_INT 2
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44289: LD_ADDR_VAR 0 34
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 0
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: NEG
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: LD_INT 2
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 2
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 2
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 1
44434: NEG
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: NEG
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: LD_INT 2
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 3
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 3
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: LD_INT 3
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 3
44534: NEG
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44569: LD_ADDR_VAR 0 35
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 1
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: LD_INT 1
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: NEG
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: NEG
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44681: LD_ADDR_VAR 0 36
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: NEG
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 1
44750: NEG
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44793: LD_ADDR_VAR 0 37
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44905: LD_ADDR_VAR 0 38
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45017: LD_ADDR_VAR 0 39
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 1
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 1
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45129: LD_ADDR_VAR 0 40
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 1
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45241: LD_ADDR_VAR 0 41
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: LD_INT 2
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: LD_INT 3
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: LD_INT 1
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 3
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 3
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 3
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 3
45484: PUSH
45485: LD_INT 3
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 2
45494: PUSH
45495: LD_INT 3
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 3
45515: NEG
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 3
45526: NEG
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 3
45538: NEG
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 3
45550: NEG
45551: PUSH
45552: LD_INT 3
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45591: LD_ADDR_VAR 0 42
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 2
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: NEG
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: LD_INT 2
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: LD_INT 3
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 3
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 3
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 3
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 3
45837: PUSH
45838: LD_INT 3
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: LD_INT 3
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: LD_INT 3
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: LD_INT 3
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 3
45888: NEG
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 3
45900: NEG
45901: PUSH
45902: LD_INT 3
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45941: LD_ADDR_VAR 0 43
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: LD_INT 1
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: LD_INT 2
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 0
46034: PUSH
46035: LD_INT 2
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: LD_INT 0
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: NEG
46131: PUSH
46132: LD_INT 3
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: LD_INT 3
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 3
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 3
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 3
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: LD_INT 3
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 3
46237: NEG
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 3
46248: NEG
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46289: LD_ADDR_VAR 0 44
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: LD_INT 2
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: NEG
46480: PUSH
46481: LD_INT 3
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 3
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 3
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 3
46522: PUSH
46523: LD_INT 2
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 3
46532: PUSH
46533: LD_INT 3
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 3
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 3
46563: NEG
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 3
46574: NEG
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 3
46586: NEG
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 3
46598: NEG
46599: PUSH
46600: LD_INT 3
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46639: LD_ADDR_VAR 0 45
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: NEG
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 0
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 2
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: NEG
46830: PUSH
46831: LD_INT 3
46833: NEG
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: LD_INT 3
46845: NEG
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 3
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 3
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 3
46885: PUSH
46886: LD_INT 3
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: LD_INT 3
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: PUSH
46906: LD_INT 3
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 3
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 3
46936: NEG
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 3
46948: NEG
46949: PUSH
46950: LD_INT 3
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46989: LD_ADDR_VAR 0 46
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 2
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: NEG
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: LD_INT 3
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: LD_INT 3
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 3
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 3
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 3
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: LD_INT 3
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 3
47285: NEG
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 3
47296: NEG
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47337: LD_ADDR_VAR 0 47
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 1
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 2
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 2
47464: NEG
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47488: LD_ADDR_VAR 0 48
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: NEG
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: LD_INT 1
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 2
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47635: LD_ADDR_VAR 0 49
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 0
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47779: LD_ADDR_VAR 0 50
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47923: LD_ADDR_VAR 0 51
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: LD_INT 2
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: NEG
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48070: LD_ADDR_VAR 0 52
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: LD_INT 1
48143: NEG
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: NEG
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: LD_INT 2
48201: NEG
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48221: LD_ADDR_VAR 0 53
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48451: LD_ADDR_VAR 0 54
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: LD_INT 2
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48681: LD_ADDR_VAR 0 55
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: LD_INT 2
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48911: LD_ADDR_VAR 0 56
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: LD_INT 2
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 2
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 2
49110: NEG
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49141: LD_ADDR_VAR 0 57
49145: PUSH
49146: LD_INT 0
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: LD_INT 1
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49371: LD_ADDR_VAR 0 58
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: LD_INT 1
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: LD_INT 2
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 2
49570: NEG
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49601: LD_ADDR_VAR 0 59
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49689: LD_ADDR_VAR 0 60
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49777: LD_ADDR_VAR 0 61
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49865: LD_ADDR_VAR 0 62
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49953: LD_ADDR_VAR 0 63
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50041: LD_ADDR_VAR 0 64
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: LD_INT 1
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: ST_TO_ADDR
// end ; 1 :
50129: GO 56026
50131: LD_INT 1
50133: DOUBLE
50134: EQUAL
50135: IFTRUE 50139
50137: GO 52762
50139: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50140: LD_ADDR_VAR 0 11
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 3
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 3
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: LIST
50183: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50184: LD_ADDR_VAR 0 12
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 3
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 3
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: LIST
50224: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50225: LD_ADDR_VAR 0 13
50229: PUSH
50230: LD_INT 3
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 3
50242: PUSH
50243: LD_INT 3
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: LD_INT 3
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: LIST
50264: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50265: LD_ADDR_VAR 0 14
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: LD_INT 3
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 3
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 2
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: LIST
50305: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50306: LD_ADDR_VAR 0 15
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 3
50324: NEG
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 3
50335: NEG
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: LIST
50349: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50350: LD_ADDR_VAR 0 16
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 3
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 3
50369: NEG
50370: PUSH
50371: LD_INT 2
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 3
50381: NEG
50382: PUSH
50383: LD_INT 3
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: LIST
50395: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50396: LD_ADDR_VAR 0 17
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 3
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 3
50418: NEG
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: LIST
50439: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50440: LD_ADDR_VAR 0 18
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 3
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 3
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: LIST
50480: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50481: LD_ADDR_VAR 0 19
50485: PUSH
50486: LD_INT 3
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 3
50498: PUSH
50499: LD_INT 3
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: LD_INT 3
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: LIST
50520: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50521: LD_ADDR_VAR 0 20
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: LD_INT 3
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 3
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: LIST
50561: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50562: LD_ADDR_VAR 0 21
50566: PUSH
50567: LD_INT 2
50569: NEG
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 3
50580: NEG
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 3
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: LIST
50605: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50606: LD_ADDR_VAR 0 22
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: LD_INT 3
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 3
50625: NEG
50626: PUSH
50627: LD_INT 2
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 3
50637: NEG
50638: PUSH
50639: LD_INT 3
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: LIST
50651: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50652: LD_ADDR_VAR 0 23
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 3
50662: NEG
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 4
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 3
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: LIST
50695: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50696: LD_ADDR_VAR 0 24
50700: PUSH
50701: LD_INT 3
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 3
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 4
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: LIST
50736: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50737: LD_ADDR_VAR 0 25
50741: PUSH
50742: LD_INT 3
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 4
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 3
50764: PUSH
50765: LD_INT 4
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: LIST
50776: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50777: LD_ADDR_VAR 0 26
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 3
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 4
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: LIST
50817: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50818: LD_ADDR_VAR 0 27
50822: PUSH
50823: LD_INT 3
50825: NEG
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 3
50836: NEG
50837: PUSH
50838: LD_INT 1
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 4
50847: NEG
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: LIST
50861: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50862: LD_ADDR_VAR 0 28
50866: PUSH
50867: LD_INT 3
50869: NEG
50870: PUSH
50871: LD_INT 3
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 3
50881: NEG
50882: PUSH
50883: LD_INT 4
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 4
50893: NEG
50894: PUSH
50895: LD_INT 3
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: LIST
50907: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50908: LD_ADDR_VAR 0 29
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: LD_INT 3
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: LD_INT 3
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: LD_INT 2
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: LD_INT 4
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 4
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: LD_INT 3
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: LD_INT 5
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: LD_INT 5
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: LD_INT 4
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: LD_INT 6
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: LD_INT 6
51032: NEG
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 1
51040: PUSH
51041: LD_INT 5
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51063: LD_ADDR_VAR 0 30
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 3
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 3
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 3
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 4
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 4
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 4
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 5
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 5
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 5
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 6
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 6
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51206: LD_ADDR_VAR 0 31
51210: PUSH
51211: LD_INT 3
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 3
51223: PUSH
51224: LD_INT 3
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 2
51233: PUSH
51234: LD_INT 3
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 4
51243: PUSH
51244: LD_INT 3
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 4
51253: PUSH
51254: LD_INT 4
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: LD_INT 4
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 5
51273: PUSH
51274: LD_INT 4
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 5
51283: PUSH
51284: LD_INT 5
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 4
51293: PUSH
51294: LD_INT 5
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 6
51303: PUSH
51304: LD_INT 5
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 6
51313: PUSH
51314: LD_INT 6
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 5
51323: PUSH
51324: LD_INT 6
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51345: LD_ADDR_VAR 0 32
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: LD_INT 3
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 3
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: LD_INT 2
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: LD_INT 4
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: LD_INT 4
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: LD_INT 3
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 5
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: LD_INT 5
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: LD_INT 4
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 1
51445: PUSH
51446: LD_INT 6
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 6
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: LD_INT 5
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51488: LD_ADDR_VAR 0 33
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 3
51506: NEG
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 3
51517: NEG
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 3
51529: NEG
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 4
51540: NEG
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 4
51551: NEG
51552: PUSH
51553: LD_INT 1
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 4
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 5
51574: NEG
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 5
51585: NEG
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 5
51597: NEG
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 6
51608: NEG
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 6
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51643: LD_ADDR_VAR 0 34
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: LD_INT 3
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: LD_INT 2
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 3
51674: NEG
51675: PUSH
51676: LD_INT 3
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 3
51686: NEG
51687: PUSH
51688: LD_INT 4
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 4
51698: NEG
51699: PUSH
51700: LD_INT 3
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 4
51710: NEG
51711: PUSH
51712: LD_INT 4
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 4
51722: NEG
51723: PUSH
51724: LD_INT 5
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 5
51734: NEG
51735: PUSH
51736: LD_INT 4
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 5
51746: NEG
51747: PUSH
51748: LD_INT 5
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 5
51758: NEG
51759: PUSH
51760: LD_INT 6
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 6
51770: NEG
51771: PUSH
51772: LD_INT 5
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 6
51782: NEG
51783: PUSH
51784: LD_INT 6
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51806: LD_ADDR_VAR 0 41
51810: PUSH
51811: LD_INT 0
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: LD_INT 3
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51850: LD_ADDR_VAR 0 42
51854: PUSH
51855: LD_INT 2
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 3
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51891: LD_ADDR_VAR 0 43
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 3
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 2
51918: PUSH
51919: LD_INT 3
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51931: LD_ADDR_VAR 0 44
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: LD_INT 3
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: LIST
51971: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51972: LD_ADDR_VAR 0 45
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 3
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52016: LD_ADDR_VAR 0 46
52020: PUSH
52021: LD_INT 2
52023: NEG
52024: PUSH
52025: LD_INT 2
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: LD_INT 3
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 3
52047: NEG
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: LIST
52061: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52062: LD_ADDR_VAR 0 47
52066: PUSH
52067: LD_INT 2
52069: NEG
52070: PUSH
52071: LD_INT 3
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: LD_INT 3
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52095: LD_ADDR_VAR 0 48
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52126: LD_ADDR_VAR 0 49
52130: PUSH
52131: LD_INT 3
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52155: LD_ADDR_VAR 0 50
52159: PUSH
52160: LD_INT 2
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: LD_INT 3
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52184: LD_ADDR_VAR 0 51
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52215: LD_ADDR_VAR 0 52
52219: PUSH
52220: LD_INT 3
52222: NEG
52223: PUSH
52224: LD_INT 1
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 3
52234: NEG
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52248: LD_ADDR_VAR 0 53
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 3
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52292: LD_ADDR_VAR 0 54
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 3
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 3
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: LIST
52332: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52333: LD_ADDR_VAR 0 55
52337: PUSH
52338: LD_INT 3
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 3
52350: PUSH
52351: LD_INT 3
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: LD_INT 3
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: LIST
52372: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52373: LD_ADDR_VAR 0 56
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 3
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 3
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 2
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: LIST
52413: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52414: LD_ADDR_VAR 0 57
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: LD_INT 1
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 3
52432: NEG
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 3
52443: NEG
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: LIST
52457: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52458: LD_ADDR_VAR 0 58
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: LD_INT 3
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 3
52477: NEG
52478: PUSH
52479: LD_INT 2
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 3
52489: NEG
52490: PUSH
52491: LD_INT 3
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: LIST
52503: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52504: LD_ADDR_VAR 0 59
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 2
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: LIST
52547: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52548: LD_ADDR_VAR 0 60
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: LIST
52588: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52589: LD_ADDR_VAR 0 61
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 1
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 2
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: LIST
52628: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52629: LD_ADDR_VAR 0 62
52633: PUSH
52634: LD_INT 1
52636: PUSH
52637: LD_INT 2
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: LIST
52669: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52670: LD_ADDR_VAR 0 63
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: LIST
52713: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52714: LD_ADDR_VAR 0 64
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: LD_INT 2
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: LD_INT 2
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: LIST
52759: ST_TO_ADDR
// end ; 2 :
52760: GO 56026
52762: LD_INT 2
52764: DOUBLE
52765: EQUAL
52766: IFTRUE 52770
52768: GO 56025
52770: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52771: LD_ADDR_VAR 0 29
52775: PUSH
52776: LD_INT 4
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 4
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 5
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 5
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 4
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 3
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 3
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 3
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 5
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 3
52871: PUSH
52872: LD_INT 3
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 3
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 4
52891: PUSH
52892: LD_INT 3
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 4
52901: PUSH
52902: LD_INT 4
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 3
52911: PUSH
52912: LD_INT 4
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: LD_INT 3
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 4
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 4
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: LD_INT 4
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 3
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: PUSH
52982: LD_INT 4
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 5
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: LD_INT 5
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: LD_INT 4
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: LD_INT 3
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: LD_INT 5
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: LD_INT 3
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 3
53054: NEG
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 3
53065: NEG
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 3
53099: NEG
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 4
53110: NEG
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 4
53121: NEG
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 4
53133: NEG
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: NEG
53146: PUSH
53147: LD_INT 2
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 4
53156: NEG
53157: PUSH
53158: LD_INT 4
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 4
53168: NEG
53169: PUSH
53170: LD_INT 5
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 3
53180: NEG
53181: PUSH
53182: LD_INT 4
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 3
53192: NEG
53193: PUSH
53194: LD_INT 3
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 4
53204: NEG
53205: PUSH
53206: LD_INT 3
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 5
53216: NEG
53217: PUSH
53218: LD_INT 4
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 5
53228: NEG
53229: PUSH
53230: LD_INT 5
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 3
53240: NEG
53241: PUSH
53242: LD_INT 5
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 5
53252: NEG
53253: PUSH
53254: LD_INT 3
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53309: LD_ADDR_VAR 0 30
53313: PUSH
53314: LD_INT 4
53316: PUSH
53317: LD_INT 4
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 4
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 5
53336: PUSH
53337: LD_INT 4
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 5
53346: PUSH
53347: LD_INT 5
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 4
53356: PUSH
53357: LD_INT 5
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 3
53366: PUSH
53367: LD_INT 4
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 3
53376: PUSH
53377: LD_INT 3
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 5
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 3
53396: PUSH
53397: LD_INT 5
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 3
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 2
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: PUSH
53437: LD_INT 4
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 4
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: LD_INT 3
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: LD_INT 4
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 4
53499: NEG
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 4
53510: NEG
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: LD_INT 0
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 3
53533: NEG
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 4
53544: NEG
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 5
53555: NEG
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 5
53566: NEG
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 5
53578: NEG
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 3
53590: NEG
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 3
53601: NEG
53602: PUSH
53603: LD_INT 3
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 3
53613: NEG
53614: PUSH
53615: LD_INT 4
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: NEG
53626: PUSH
53627: LD_INT 3
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 2
53637: NEG
53638: PUSH
53639: LD_INT 2
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 3
53649: NEG
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 4
53661: NEG
53662: PUSH
53663: LD_INT 3
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 4
53673: NEG
53674: PUSH
53675: LD_INT 4
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: LD_INT 4
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 4
53697: NEG
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: LD_INT 4
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 5
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 4
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 3
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: LD_INT 4
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: LD_INT 5
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: LD_INT 3
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 2
53799: NEG
53800: PUSH
53801: LD_INT 5
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53856: LD_ADDR_VAR 0 31
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 4
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 3
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: LD_INT 4
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 5
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 5
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: LD_INT 4
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 3
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: LD_INT 5
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: LD_INT 3
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 3
53956: NEG
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 3
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: NEG
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 3
54001: NEG
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 4
54012: NEG
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 4
54023: NEG
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 4
54035: NEG
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 4
54058: NEG
54059: PUSH
54060: LD_INT 4
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 4
54070: NEG
54071: PUSH
54072: LD_INT 5
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 3
54082: NEG
54083: PUSH
54084: LD_INT 4
54086: NEG
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 3
54094: NEG
54095: PUSH
54096: LD_INT 3
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 4
54106: NEG
54107: PUSH
54108: LD_INT 3
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 5
54118: NEG
54119: PUSH
54120: LD_INT 4
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 5
54130: NEG
54131: PUSH
54132: LD_INT 5
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 3
54142: NEG
54143: PUSH
54144: LD_INT 5
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 5
54154: NEG
54155: PUSH
54156: LD_INT 3
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 3
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: LD_INT 4
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: LD_INT 3
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: LD_INT 2
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 0
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: LD_INT 3
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: LD_INT 4
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: LD_INT 2
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 2
54256: NEG
54257: PUSH
54258: LD_INT 4
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 4
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 4
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 5
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 5
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 4
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 3
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 3
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 3
54340: PUSH
54341: LD_INT 2
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 5
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54406: LD_ADDR_VAR 0 32
54410: PUSH
54411: LD_INT 4
54413: NEG
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 4
54424: NEG
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 3
54436: NEG
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 3
54447: NEG
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 4
54458: NEG
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 5
54469: NEG
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 5
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 5
54492: NEG
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 3
54504: NEG
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 3
54515: NEG
54516: PUSH
54517: LD_INT 3
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 3
54527: NEG
54528: PUSH
54529: LD_INT 4
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: NEG
54540: PUSH
54541: LD_INT 3
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 3
54563: NEG
54564: PUSH
54565: LD_INT 2
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 4
54575: NEG
54576: PUSH
54577: LD_INT 3
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 4
54587: NEG
54588: PUSH
54589: LD_INT 4
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: LD_INT 4
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 4
54611: NEG
54612: PUSH
54613: LD_INT 2
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 4
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 5
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 1
54645: PUSH
54646: LD_INT 4
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 3
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 3
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 4
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 5
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: LD_INT 3
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: LD_INT 5
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 3
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 3
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 4
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 4
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 3
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 2
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 4
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 4
54818: PUSH
54819: LD_INT 4
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 4
54828: PUSH
54829: LD_INT 3
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 5
54838: PUSH
54839: LD_INT 4
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 5
54848: PUSH
54849: LD_INT 5
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 4
54858: PUSH
54859: LD_INT 5
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 3
54868: PUSH
54869: LD_INT 4
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 3
54878: PUSH
54879: LD_INT 3
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 5
54888: PUSH
54889: LD_INT 3
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 3
54898: PUSH
54899: LD_INT 5
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54953: LD_ADDR_VAR 0 33
54957: PUSH
54958: LD_INT 4
54960: NEG
54961: PUSH
54962: LD_INT 4
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 4
54972: NEG
54973: PUSH
54974: LD_INT 5
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 3
54984: NEG
54985: PUSH
54986: LD_INT 4
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 3
54996: NEG
54997: PUSH
54998: LD_INT 3
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 4
55008: NEG
55009: PUSH
55010: LD_INT 3
55012: NEG
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 5
55020: NEG
55021: PUSH
55022: LD_INT 4
55024: NEG
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 5
55032: NEG
55033: PUSH
55034: LD_INT 5
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 3
55044: NEG
55045: PUSH
55046: LD_INT 5
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 5
55056: NEG
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: LD_INT 3
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 4
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: LD_INT 2
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 3
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: NEG
55136: PUSH
55137: LD_INT 4
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: LD_INT 4
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 4
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 4
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 5
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 5
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 4
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 3
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 3
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 3
55242: PUSH
55243: LD_INT 2
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 5
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 3
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 4
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 4
55293: PUSH
55294: LD_INT 4
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 3
55303: PUSH
55304: LD_INT 4
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 2
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 4
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 4
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 4
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 3
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: LD_INT 4
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: LD_INT 5
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 5
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: LD_INT 4
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 3
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: LD_INT 5
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: LD_INT 3
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55491: LD_ADDR_VAR 0 34
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: LD_INT 4
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 5
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: LD_INT 4
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 3
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: LD_INT 3
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: LD_INT 4
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 5
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: LD_INT 3
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: LD_INT 5
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 3
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 3
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 4
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 4
55631: PUSH
55632: LD_INT 1
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 4
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 4
55693: PUSH
55694: LD_INT 4
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 4
55703: PUSH
55704: LD_INT 3
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 5
55713: PUSH
55714: LD_INT 4
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 5
55723: PUSH
55724: LD_INT 5
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 4
55733: PUSH
55734: LD_INT 5
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 3
55743: PUSH
55744: LD_INT 4
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 3
55753: PUSH
55754: LD_INT 3
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 5
55763: PUSH
55764: LD_INT 3
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: PUSH
55774: LD_INT 5
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: LD_INT 2
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 3
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: LD_INT 4
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: LD_INT 4
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 3
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: LD_INT 2
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: LD_INT 4
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 2
55865: NEG
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 4
55876: NEG
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 4
55887: NEG
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 3
55899: NEG
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 3
55910: NEG
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 4
55921: NEG
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 5
55932: NEG
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 5
55943: NEG
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 5
55955: NEG
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 3
55967: NEG
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: ST_TO_ADDR
// end ; end ;
56023: GO 56026
56025: POP
// case btype of b_depot , b_warehouse :
56026: LD_VAR 0 1
56030: PUSH
56031: LD_INT 0
56033: DOUBLE
56034: EQUAL
56035: IFTRUE 56045
56037: LD_INT 1
56039: DOUBLE
56040: EQUAL
56041: IFTRUE 56045
56043: GO 56246
56045: POP
// case nation of nation_american :
56046: LD_VAR 0 5
56050: PUSH
56051: LD_INT 1
56053: DOUBLE
56054: EQUAL
56055: IFTRUE 56059
56057: GO 56115
56059: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56060: LD_ADDR_VAR 0 9
56064: PUSH
56065: LD_VAR 0 11
56069: PUSH
56070: LD_VAR 0 12
56074: PUSH
56075: LD_VAR 0 13
56079: PUSH
56080: LD_VAR 0 14
56084: PUSH
56085: LD_VAR 0 15
56089: PUSH
56090: LD_VAR 0 16
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: PUSH
56103: LD_VAR 0 4
56107: PUSH
56108: LD_INT 1
56110: PLUS
56111: ARRAY
56112: ST_TO_ADDR
56113: GO 56244
56115: LD_INT 2
56117: DOUBLE
56118: EQUAL
56119: IFTRUE 56123
56121: GO 56179
56123: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56124: LD_ADDR_VAR 0 9
56128: PUSH
56129: LD_VAR 0 17
56133: PUSH
56134: LD_VAR 0 18
56138: PUSH
56139: LD_VAR 0 19
56143: PUSH
56144: LD_VAR 0 20
56148: PUSH
56149: LD_VAR 0 21
56153: PUSH
56154: LD_VAR 0 22
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: PUSH
56167: LD_VAR 0 4
56171: PUSH
56172: LD_INT 1
56174: PLUS
56175: ARRAY
56176: ST_TO_ADDR
56177: GO 56244
56179: LD_INT 3
56181: DOUBLE
56182: EQUAL
56183: IFTRUE 56187
56185: GO 56243
56187: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56188: LD_ADDR_VAR 0 9
56192: PUSH
56193: LD_VAR 0 23
56197: PUSH
56198: LD_VAR 0 24
56202: PUSH
56203: LD_VAR 0 25
56207: PUSH
56208: LD_VAR 0 26
56212: PUSH
56213: LD_VAR 0 27
56217: PUSH
56218: LD_VAR 0 28
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: PUSH
56231: LD_VAR 0 4
56235: PUSH
56236: LD_INT 1
56238: PLUS
56239: ARRAY
56240: ST_TO_ADDR
56241: GO 56244
56243: POP
56244: GO 56799
56246: LD_INT 2
56248: DOUBLE
56249: EQUAL
56250: IFTRUE 56260
56252: LD_INT 3
56254: DOUBLE
56255: EQUAL
56256: IFTRUE 56260
56258: GO 56316
56260: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56261: LD_ADDR_VAR 0 9
56265: PUSH
56266: LD_VAR 0 29
56270: PUSH
56271: LD_VAR 0 30
56275: PUSH
56276: LD_VAR 0 31
56280: PUSH
56281: LD_VAR 0 32
56285: PUSH
56286: LD_VAR 0 33
56290: PUSH
56291: LD_VAR 0 34
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: PUSH
56304: LD_VAR 0 4
56308: PUSH
56309: LD_INT 1
56311: PLUS
56312: ARRAY
56313: ST_TO_ADDR
56314: GO 56799
56316: LD_INT 16
56318: DOUBLE
56319: EQUAL
56320: IFTRUE 56378
56322: LD_INT 17
56324: DOUBLE
56325: EQUAL
56326: IFTRUE 56378
56328: LD_INT 18
56330: DOUBLE
56331: EQUAL
56332: IFTRUE 56378
56334: LD_INT 19
56336: DOUBLE
56337: EQUAL
56338: IFTRUE 56378
56340: LD_INT 22
56342: DOUBLE
56343: EQUAL
56344: IFTRUE 56378
56346: LD_INT 20
56348: DOUBLE
56349: EQUAL
56350: IFTRUE 56378
56352: LD_INT 21
56354: DOUBLE
56355: EQUAL
56356: IFTRUE 56378
56358: LD_INT 23
56360: DOUBLE
56361: EQUAL
56362: IFTRUE 56378
56364: LD_INT 24
56366: DOUBLE
56367: EQUAL
56368: IFTRUE 56378
56370: LD_INT 25
56372: DOUBLE
56373: EQUAL
56374: IFTRUE 56378
56376: GO 56434
56378: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56379: LD_ADDR_VAR 0 9
56383: PUSH
56384: LD_VAR 0 35
56388: PUSH
56389: LD_VAR 0 36
56393: PUSH
56394: LD_VAR 0 37
56398: PUSH
56399: LD_VAR 0 38
56403: PUSH
56404: LD_VAR 0 39
56408: PUSH
56409: LD_VAR 0 40
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: PUSH
56422: LD_VAR 0 4
56426: PUSH
56427: LD_INT 1
56429: PLUS
56430: ARRAY
56431: ST_TO_ADDR
56432: GO 56799
56434: LD_INT 6
56436: DOUBLE
56437: EQUAL
56438: IFTRUE 56490
56440: LD_INT 7
56442: DOUBLE
56443: EQUAL
56444: IFTRUE 56490
56446: LD_INT 8
56448: DOUBLE
56449: EQUAL
56450: IFTRUE 56490
56452: LD_INT 13
56454: DOUBLE
56455: EQUAL
56456: IFTRUE 56490
56458: LD_INT 12
56460: DOUBLE
56461: EQUAL
56462: IFTRUE 56490
56464: LD_INT 15
56466: DOUBLE
56467: EQUAL
56468: IFTRUE 56490
56470: LD_INT 11
56472: DOUBLE
56473: EQUAL
56474: IFTRUE 56490
56476: LD_INT 14
56478: DOUBLE
56479: EQUAL
56480: IFTRUE 56490
56482: LD_INT 10
56484: DOUBLE
56485: EQUAL
56486: IFTRUE 56490
56488: GO 56546
56490: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56491: LD_ADDR_VAR 0 9
56495: PUSH
56496: LD_VAR 0 41
56500: PUSH
56501: LD_VAR 0 42
56505: PUSH
56506: LD_VAR 0 43
56510: PUSH
56511: LD_VAR 0 44
56515: PUSH
56516: LD_VAR 0 45
56520: PUSH
56521: LD_VAR 0 46
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: PUSH
56534: LD_VAR 0 4
56538: PUSH
56539: LD_INT 1
56541: PLUS
56542: ARRAY
56543: ST_TO_ADDR
56544: GO 56799
56546: LD_INT 36
56548: DOUBLE
56549: EQUAL
56550: IFTRUE 56554
56552: GO 56610
56554: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56555: LD_ADDR_VAR 0 9
56559: PUSH
56560: LD_VAR 0 47
56564: PUSH
56565: LD_VAR 0 48
56569: PUSH
56570: LD_VAR 0 49
56574: PUSH
56575: LD_VAR 0 50
56579: PUSH
56580: LD_VAR 0 51
56584: PUSH
56585: LD_VAR 0 52
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: PUSH
56598: LD_VAR 0 4
56602: PUSH
56603: LD_INT 1
56605: PLUS
56606: ARRAY
56607: ST_TO_ADDR
56608: GO 56799
56610: LD_INT 4
56612: DOUBLE
56613: EQUAL
56614: IFTRUE 56636
56616: LD_INT 5
56618: DOUBLE
56619: EQUAL
56620: IFTRUE 56636
56622: LD_INT 34
56624: DOUBLE
56625: EQUAL
56626: IFTRUE 56636
56628: LD_INT 37
56630: DOUBLE
56631: EQUAL
56632: IFTRUE 56636
56634: GO 56692
56636: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56637: LD_ADDR_VAR 0 9
56641: PUSH
56642: LD_VAR 0 53
56646: PUSH
56647: LD_VAR 0 54
56651: PUSH
56652: LD_VAR 0 55
56656: PUSH
56657: LD_VAR 0 56
56661: PUSH
56662: LD_VAR 0 57
56666: PUSH
56667: LD_VAR 0 58
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: PUSH
56680: LD_VAR 0 4
56684: PUSH
56685: LD_INT 1
56687: PLUS
56688: ARRAY
56689: ST_TO_ADDR
56690: GO 56799
56692: LD_INT 31
56694: DOUBLE
56695: EQUAL
56696: IFTRUE 56742
56698: LD_INT 32
56700: DOUBLE
56701: EQUAL
56702: IFTRUE 56742
56704: LD_INT 33
56706: DOUBLE
56707: EQUAL
56708: IFTRUE 56742
56710: LD_INT 27
56712: DOUBLE
56713: EQUAL
56714: IFTRUE 56742
56716: LD_INT 26
56718: DOUBLE
56719: EQUAL
56720: IFTRUE 56742
56722: LD_INT 28
56724: DOUBLE
56725: EQUAL
56726: IFTRUE 56742
56728: LD_INT 29
56730: DOUBLE
56731: EQUAL
56732: IFTRUE 56742
56734: LD_INT 30
56736: DOUBLE
56737: EQUAL
56738: IFTRUE 56742
56740: GO 56798
56742: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56743: LD_ADDR_VAR 0 9
56747: PUSH
56748: LD_VAR 0 59
56752: PUSH
56753: LD_VAR 0 60
56757: PUSH
56758: LD_VAR 0 61
56762: PUSH
56763: LD_VAR 0 62
56767: PUSH
56768: LD_VAR 0 63
56772: PUSH
56773: LD_VAR 0 64
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: PUSH
56786: LD_VAR 0 4
56790: PUSH
56791: LD_INT 1
56793: PLUS
56794: ARRAY
56795: ST_TO_ADDR
56796: GO 56799
56798: POP
// temp_list2 = [ ] ;
56799: LD_ADDR_VAR 0 10
56803: PUSH
56804: EMPTY
56805: ST_TO_ADDR
// for i in temp_list do
56806: LD_ADDR_VAR 0 8
56810: PUSH
56811: LD_VAR 0 9
56815: PUSH
56816: FOR_IN
56817: IFFALSE 56869
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56819: LD_ADDR_VAR 0 10
56823: PUSH
56824: LD_VAR 0 10
56828: PUSH
56829: LD_VAR 0 8
56833: PUSH
56834: LD_INT 1
56836: ARRAY
56837: PUSH
56838: LD_VAR 0 2
56842: PLUS
56843: PUSH
56844: LD_VAR 0 8
56848: PUSH
56849: LD_INT 2
56851: ARRAY
56852: PUSH
56853: LD_VAR 0 3
56857: PLUS
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: EMPTY
56864: LIST
56865: ADD
56866: ST_TO_ADDR
56867: GO 56816
56869: POP
56870: POP
// result = temp_list2 ;
56871: LD_ADDR_VAR 0 7
56875: PUSH
56876: LD_VAR 0 10
56880: ST_TO_ADDR
// end ;
56881: LD_VAR 0 7
56885: RET
// export function EnemyInRange ( unit , dist ) ; begin
56886: LD_INT 0
56888: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56889: LD_ADDR_VAR 0 3
56893: PUSH
56894: LD_VAR 0 1
56898: PPUSH
56899: CALL_OW 255
56903: PPUSH
56904: LD_VAR 0 1
56908: PPUSH
56909: CALL_OW 250
56913: PPUSH
56914: LD_VAR 0 1
56918: PPUSH
56919: CALL_OW 251
56923: PPUSH
56924: LD_VAR 0 2
56928: PPUSH
56929: CALL 30281 0 4
56933: PUSH
56934: LD_INT 4
56936: ARRAY
56937: ST_TO_ADDR
// end ;
56938: LD_VAR 0 3
56942: RET
// export function PlayerSeeMe ( unit ) ; begin
56943: LD_INT 0
56945: PPUSH
// result := See ( your_side , unit ) ;
56946: LD_ADDR_VAR 0 2
56950: PUSH
56951: LD_OWVAR 2
56955: PPUSH
56956: LD_VAR 0 1
56960: PPUSH
56961: CALL_OW 292
56965: ST_TO_ADDR
// end ;
56966: LD_VAR 0 2
56970: RET
// export function ReverseDir ( unit ) ; begin
56971: LD_INT 0
56973: PPUSH
// if not unit then
56974: LD_VAR 0 1
56978: NOT
56979: IFFALSE 56983
// exit ;
56981: GO 57006
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56983: LD_ADDR_VAR 0 2
56987: PUSH
56988: LD_VAR 0 1
56992: PPUSH
56993: CALL_OW 254
56997: PUSH
56998: LD_INT 3
57000: PLUS
57001: PUSH
57002: LD_INT 6
57004: MOD
57005: ST_TO_ADDR
// end ;
57006: LD_VAR 0 2
57010: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57011: LD_INT 0
57013: PPUSH
57014: PPUSH
57015: PPUSH
57016: PPUSH
57017: PPUSH
// if not hexes then
57018: LD_VAR 0 2
57022: NOT
57023: IFFALSE 57027
// exit ;
57025: GO 57175
// dist := 9999 ;
57027: LD_ADDR_VAR 0 5
57031: PUSH
57032: LD_INT 9999
57034: ST_TO_ADDR
// for i = 1 to hexes do
57035: LD_ADDR_VAR 0 4
57039: PUSH
57040: DOUBLE
57041: LD_INT 1
57043: DEC
57044: ST_TO_ADDR
57045: LD_VAR 0 2
57049: PUSH
57050: FOR_TO
57051: IFFALSE 57163
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57053: LD_VAR 0 1
57057: PPUSH
57058: LD_VAR 0 2
57062: PUSH
57063: LD_VAR 0 4
57067: ARRAY
57068: PUSH
57069: LD_INT 1
57071: ARRAY
57072: PPUSH
57073: LD_VAR 0 2
57077: PUSH
57078: LD_VAR 0 4
57082: ARRAY
57083: PUSH
57084: LD_INT 2
57086: ARRAY
57087: PPUSH
57088: CALL_OW 297
57092: PUSH
57093: LD_VAR 0 5
57097: LESS
57098: IFFALSE 57161
// begin hex := hexes [ i ] ;
57100: LD_ADDR_VAR 0 7
57104: PUSH
57105: LD_VAR 0 2
57109: PUSH
57110: LD_VAR 0 4
57114: ARRAY
57115: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57116: LD_ADDR_VAR 0 5
57120: PUSH
57121: LD_VAR 0 1
57125: PPUSH
57126: LD_VAR 0 2
57130: PUSH
57131: LD_VAR 0 4
57135: ARRAY
57136: PUSH
57137: LD_INT 1
57139: ARRAY
57140: PPUSH
57141: LD_VAR 0 2
57145: PUSH
57146: LD_VAR 0 4
57150: ARRAY
57151: PUSH
57152: LD_INT 2
57154: ARRAY
57155: PPUSH
57156: CALL_OW 297
57160: ST_TO_ADDR
// end ; end ;
57161: GO 57050
57163: POP
57164: POP
// result := hex ;
57165: LD_ADDR_VAR 0 3
57169: PUSH
57170: LD_VAR 0 7
57174: ST_TO_ADDR
// end ;
57175: LD_VAR 0 3
57179: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57180: LD_INT 0
57182: PPUSH
57183: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57184: LD_VAR 0 1
57188: NOT
57189: PUSH
57190: LD_VAR 0 1
57194: PUSH
57195: LD_INT 21
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 23
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PPUSH
57219: CALL_OW 69
57223: IN
57224: NOT
57225: OR
57226: IFFALSE 57230
// exit ;
57228: GO 57277
// for i = 1 to 3 do
57230: LD_ADDR_VAR 0 3
57234: PUSH
57235: DOUBLE
57236: LD_INT 1
57238: DEC
57239: ST_TO_ADDR
57240: LD_INT 3
57242: PUSH
57243: FOR_TO
57244: IFFALSE 57275
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57246: LD_VAR 0 1
57250: PPUSH
57251: CALL_OW 250
57255: PPUSH
57256: LD_VAR 0 1
57260: PPUSH
57261: CALL_OW 251
57265: PPUSH
57266: LD_INT 1
57268: PPUSH
57269: CALL_OW 453
57273: GO 57243
57275: POP
57276: POP
// end ;
57277: LD_VAR 0 2
57281: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57282: LD_INT 0
57284: PPUSH
57285: PPUSH
57286: PPUSH
57287: PPUSH
57288: PPUSH
57289: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57290: LD_VAR 0 1
57294: NOT
57295: PUSH
57296: LD_VAR 0 2
57300: NOT
57301: OR
57302: PUSH
57303: LD_VAR 0 1
57307: PPUSH
57308: CALL_OW 314
57312: OR
57313: IFFALSE 57317
// exit ;
57315: GO 57758
// x := GetX ( enemy_unit ) ;
57317: LD_ADDR_VAR 0 7
57321: PUSH
57322: LD_VAR 0 2
57326: PPUSH
57327: CALL_OW 250
57331: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57332: LD_ADDR_VAR 0 8
57336: PUSH
57337: LD_VAR 0 2
57341: PPUSH
57342: CALL_OW 251
57346: ST_TO_ADDR
// if not x or not y then
57347: LD_VAR 0 7
57351: NOT
57352: PUSH
57353: LD_VAR 0 8
57357: NOT
57358: OR
57359: IFFALSE 57363
// exit ;
57361: GO 57758
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57363: LD_ADDR_VAR 0 6
57367: PUSH
57368: LD_VAR 0 7
57372: PPUSH
57373: LD_INT 0
57375: PPUSH
57376: LD_INT 4
57378: PPUSH
57379: CALL_OW 272
57383: PUSH
57384: LD_VAR 0 8
57388: PPUSH
57389: LD_INT 0
57391: PPUSH
57392: LD_INT 4
57394: PPUSH
57395: CALL_OW 273
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_VAR 0 7
57408: PPUSH
57409: LD_INT 1
57411: PPUSH
57412: LD_INT 4
57414: PPUSH
57415: CALL_OW 272
57419: PUSH
57420: LD_VAR 0 8
57424: PPUSH
57425: LD_INT 1
57427: PPUSH
57428: LD_INT 4
57430: PPUSH
57431: CALL_OW 273
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_VAR 0 7
57444: PPUSH
57445: LD_INT 2
57447: PPUSH
57448: LD_INT 4
57450: PPUSH
57451: CALL_OW 272
57455: PUSH
57456: LD_VAR 0 8
57460: PPUSH
57461: LD_INT 2
57463: PPUSH
57464: LD_INT 4
57466: PPUSH
57467: CALL_OW 273
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_VAR 0 7
57480: PPUSH
57481: LD_INT 3
57483: PPUSH
57484: LD_INT 4
57486: PPUSH
57487: CALL_OW 272
57491: PUSH
57492: LD_VAR 0 8
57496: PPUSH
57497: LD_INT 3
57499: PPUSH
57500: LD_INT 4
57502: PPUSH
57503: CALL_OW 273
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_VAR 0 7
57516: PPUSH
57517: LD_INT 4
57519: PPUSH
57520: LD_INT 4
57522: PPUSH
57523: CALL_OW 272
57527: PUSH
57528: LD_VAR 0 8
57532: PPUSH
57533: LD_INT 4
57535: PPUSH
57536: LD_INT 4
57538: PPUSH
57539: CALL_OW 273
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_VAR 0 7
57552: PPUSH
57553: LD_INT 5
57555: PPUSH
57556: LD_INT 4
57558: PPUSH
57559: CALL_OW 272
57563: PUSH
57564: LD_VAR 0 8
57568: PPUSH
57569: LD_INT 5
57571: PPUSH
57572: LD_INT 4
57574: PPUSH
57575: CALL_OW 273
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: ST_TO_ADDR
// for i = tmp downto 1 do
57592: LD_ADDR_VAR 0 4
57596: PUSH
57597: DOUBLE
57598: LD_VAR 0 6
57602: INC
57603: ST_TO_ADDR
57604: LD_INT 1
57606: PUSH
57607: FOR_DOWNTO
57608: IFFALSE 57709
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57610: LD_VAR 0 6
57614: PUSH
57615: LD_VAR 0 4
57619: ARRAY
57620: PUSH
57621: LD_INT 1
57623: ARRAY
57624: PPUSH
57625: LD_VAR 0 6
57629: PUSH
57630: LD_VAR 0 4
57634: ARRAY
57635: PUSH
57636: LD_INT 2
57638: ARRAY
57639: PPUSH
57640: CALL_OW 488
57644: NOT
57645: PUSH
57646: LD_VAR 0 6
57650: PUSH
57651: LD_VAR 0 4
57655: ARRAY
57656: PUSH
57657: LD_INT 1
57659: ARRAY
57660: PPUSH
57661: LD_VAR 0 6
57665: PUSH
57666: LD_VAR 0 4
57670: ARRAY
57671: PUSH
57672: LD_INT 2
57674: ARRAY
57675: PPUSH
57676: CALL_OW 428
57680: PUSH
57681: LD_INT 0
57683: NONEQUAL
57684: OR
57685: IFFALSE 57707
// tmp := Delete ( tmp , i ) ;
57687: LD_ADDR_VAR 0 6
57691: PUSH
57692: LD_VAR 0 6
57696: PPUSH
57697: LD_VAR 0 4
57701: PPUSH
57702: CALL_OW 3
57706: ST_TO_ADDR
57707: GO 57607
57709: POP
57710: POP
// j := GetClosestHex ( unit , tmp ) ;
57711: LD_ADDR_VAR 0 5
57715: PUSH
57716: LD_VAR 0 1
57720: PPUSH
57721: LD_VAR 0 6
57725: PPUSH
57726: CALL 57011 0 2
57730: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57731: LD_VAR 0 1
57735: PPUSH
57736: LD_VAR 0 5
57740: PUSH
57741: LD_INT 1
57743: ARRAY
57744: PPUSH
57745: LD_VAR 0 5
57749: PUSH
57750: LD_INT 2
57752: ARRAY
57753: PPUSH
57754: CALL_OW 111
// end ;
57758: LD_VAR 0 3
57762: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57763: LD_INT 0
57765: PPUSH
57766: PPUSH
57767: PPUSH
// uc_side = 0 ;
57768: LD_ADDR_OWVAR 20
57772: PUSH
57773: LD_INT 0
57775: ST_TO_ADDR
// uc_nation = 0 ;
57776: LD_ADDR_OWVAR 21
57780: PUSH
57781: LD_INT 0
57783: ST_TO_ADDR
// InitHc_All ( ) ;
57784: CALL_OW 584
// InitVc ;
57788: CALL_OW 20
// if mastodonts then
57792: LD_VAR 0 6
57796: IFFALSE 57863
// for i = 1 to mastodonts do
57798: LD_ADDR_VAR 0 11
57802: PUSH
57803: DOUBLE
57804: LD_INT 1
57806: DEC
57807: ST_TO_ADDR
57808: LD_VAR 0 6
57812: PUSH
57813: FOR_TO
57814: IFFALSE 57861
// begin vc_chassis := 31 ;
57816: LD_ADDR_OWVAR 37
57820: PUSH
57821: LD_INT 31
57823: ST_TO_ADDR
// vc_control := control_rider ;
57824: LD_ADDR_OWVAR 38
57828: PUSH
57829: LD_INT 4
57831: ST_TO_ADDR
// animal := CreateVehicle ;
57832: LD_ADDR_VAR 0 12
57836: PUSH
57837: CALL_OW 45
57841: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57842: LD_VAR 0 12
57846: PPUSH
57847: LD_VAR 0 8
57851: PPUSH
57852: LD_INT 0
57854: PPUSH
57855: CALL 60051 0 3
// end ;
57859: GO 57813
57861: POP
57862: POP
// if horses then
57863: LD_VAR 0 5
57867: IFFALSE 57934
// for i = 1 to horses do
57869: LD_ADDR_VAR 0 11
57873: PUSH
57874: DOUBLE
57875: LD_INT 1
57877: DEC
57878: ST_TO_ADDR
57879: LD_VAR 0 5
57883: PUSH
57884: FOR_TO
57885: IFFALSE 57932
// begin hc_class := 21 ;
57887: LD_ADDR_OWVAR 28
57891: PUSH
57892: LD_INT 21
57894: ST_TO_ADDR
// hc_gallery :=  ;
57895: LD_ADDR_OWVAR 33
57899: PUSH
57900: LD_STRING 
57902: ST_TO_ADDR
// animal := CreateHuman ;
57903: LD_ADDR_VAR 0 12
57907: PUSH
57908: CALL_OW 44
57912: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57913: LD_VAR 0 12
57917: PPUSH
57918: LD_VAR 0 8
57922: PPUSH
57923: LD_INT 0
57925: PPUSH
57926: CALL 60051 0 3
// end ;
57930: GO 57884
57932: POP
57933: POP
// if birds then
57934: LD_VAR 0 1
57938: IFFALSE 58005
// for i = 1 to birds do
57940: LD_ADDR_VAR 0 11
57944: PUSH
57945: DOUBLE
57946: LD_INT 1
57948: DEC
57949: ST_TO_ADDR
57950: LD_VAR 0 1
57954: PUSH
57955: FOR_TO
57956: IFFALSE 58003
// begin hc_class = 18 ;
57958: LD_ADDR_OWVAR 28
57962: PUSH
57963: LD_INT 18
57965: ST_TO_ADDR
// hc_gallery =  ;
57966: LD_ADDR_OWVAR 33
57970: PUSH
57971: LD_STRING 
57973: ST_TO_ADDR
// animal := CreateHuman ;
57974: LD_ADDR_VAR 0 12
57978: PUSH
57979: CALL_OW 44
57983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57984: LD_VAR 0 12
57988: PPUSH
57989: LD_VAR 0 8
57993: PPUSH
57994: LD_INT 0
57996: PPUSH
57997: CALL 60051 0 3
// end ;
58001: GO 57955
58003: POP
58004: POP
// if tigers then
58005: LD_VAR 0 2
58009: IFFALSE 58093
// for i = 1 to tigers do
58011: LD_ADDR_VAR 0 11
58015: PUSH
58016: DOUBLE
58017: LD_INT 1
58019: DEC
58020: ST_TO_ADDR
58021: LD_VAR 0 2
58025: PUSH
58026: FOR_TO
58027: IFFALSE 58091
// begin hc_class = class_tiger ;
58029: LD_ADDR_OWVAR 28
58033: PUSH
58034: LD_INT 14
58036: ST_TO_ADDR
// hc_gallery =  ;
58037: LD_ADDR_OWVAR 33
58041: PUSH
58042: LD_STRING 
58044: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58045: LD_ADDR_OWVAR 35
58049: PUSH
58050: LD_INT 7
58052: NEG
58053: PPUSH
58054: LD_INT 7
58056: PPUSH
58057: CALL_OW 12
58061: ST_TO_ADDR
// animal := CreateHuman ;
58062: LD_ADDR_VAR 0 12
58066: PUSH
58067: CALL_OW 44
58071: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58072: LD_VAR 0 12
58076: PPUSH
58077: LD_VAR 0 8
58081: PPUSH
58082: LD_INT 0
58084: PPUSH
58085: CALL 60051 0 3
// end ;
58089: GO 58026
58091: POP
58092: POP
// if apemans then
58093: LD_VAR 0 3
58097: IFFALSE 58220
// for i = 1 to apemans do
58099: LD_ADDR_VAR 0 11
58103: PUSH
58104: DOUBLE
58105: LD_INT 1
58107: DEC
58108: ST_TO_ADDR
58109: LD_VAR 0 3
58113: PUSH
58114: FOR_TO
58115: IFFALSE 58218
// begin hc_class = class_apeman ;
58117: LD_ADDR_OWVAR 28
58121: PUSH
58122: LD_INT 12
58124: ST_TO_ADDR
// hc_gallery =  ;
58125: LD_ADDR_OWVAR 33
58129: PUSH
58130: LD_STRING 
58132: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58133: LD_ADDR_OWVAR 35
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PPUSH
58142: LD_INT 2
58144: PPUSH
58145: CALL_OW 12
58149: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58150: LD_ADDR_OWVAR 31
58154: PUSH
58155: LD_INT 1
58157: PPUSH
58158: LD_INT 3
58160: PPUSH
58161: CALL_OW 12
58165: PUSH
58166: LD_INT 1
58168: PPUSH
58169: LD_INT 3
58171: PPUSH
58172: CALL_OW 12
58176: PUSH
58177: LD_INT 0
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: ST_TO_ADDR
// animal := CreateHuman ;
58189: LD_ADDR_VAR 0 12
58193: PUSH
58194: CALL_OW 44
58198: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58199: LD_VAR 0 12
58203: PPUSH
58204: LD_VAR 0 8
58208: PPUSH
58209: LD_INT 0
58211: PPUSH
58212: CALL 60051 0 3
// end ;
58216: GO 58114
58218: POP
58219: POP
// if enchidnas then
58220: LD_VAR 0 4
58224: IFFALSE 58291
// for i = 1 to enchidnas do
58226: LD_ADDR_VAR 0 11
58230: PUSH
58231: DOUBLE
58232: LD_INT 1
58234: DEC
58235: ST_TO_ADDR
58236: LD_VAR 0 4
58240: PUSH
58241: FOR_TO
58242: IFFALSE 58289
// begin hc_class = 13 ;
58244: LD_ADDR_OWVAR 28
58248: PUSH
58249: LD_INT 13
58251: ST_TO_ADDR
// hc_gallery =  ;
58252: LD_ADDR_OWVAR 33
58256: PUSH
58257: LD_STRING 
58259: ST_TO_ADDR
// animal := CreateHuman ;
58260: LD_ADDR_VAR 0 12
58264: PUSH
58265: CALL_OW 44
58269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58270: LD_VAR 0 12
58274: PPUSH
58275: LD_VAR 0 8
58279: PPUSH
58280: LD_INT 0
58282: PPUSH
58283: CALL 60051 0 3
// end ;
58287: GO 58241
58289: POP
58290: POP
// if fishes then
58291: LD_VAR 0 7
58295: IFFALSE 58362
// for i = 1 to fishes do
58297: LD_ADDR_VAR 0 11
58301: PUSH
58302: DOUBLE
58303: LD_INT 1
58305: DEC
58306: ST_TO_ADDR
58307: LD_VAR 0 7
58311: PUSH
58312: FOR_TO
58313: IFFALSE 58360
// begin hc_class = 20 ;
58315: LD_ADDR_OWVAR 28
58319: PUSH
58320: LD_INT 20
58322: ST_TO_ADDR
// hc_gallery =  ;
58323: LD_ADDR_OWVAR 33
58327: PUSH
58328: LD_STRING 
58330: ST_TO_ADDR
// animal := CreateHuman ;
58331: LD_ADDR_VAR 0 12
58335: PUSH
58336: CALL_OW 44
58340: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58341: LD_VAR 0 12
58345: PPUSH
58346: LD_VAR 0 9
58350: PPUSH
58351: LD_INT 0
58353: PPUSH
58354: CALL 60051 0 3
// end ;
58358: GO 58312
58360: POP
58361: POP
// end ;
58362: LD_VAR 0 10
58366: RET
// export function WantHeal ( sci , unit ) ; begin
58367: LD_INT 0
58369: PPUSH
// if GetTaskList ( sci ) > 0 then
58370: LD_VAR 0 1
58374: PPUSH
58375: CALL_OW 437
58379: PUSH
58380: LD_INT 0
58382: GREATER
58383: IFFALSE 58453
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58385: LD_VAR 0 1
58389: PPUSH
58390: CALL_OW 437
58394: PUSH
58395: LD_INT 1
58397: ARRAY
58398: PUSH
58399: LD_INT 1
58401: ARRAY
58402: PUSH
58403: LD_STRING l
58405: EQUAL
58406: PUSH
58407: LD_VAR 0 1
58411: PPUSH
58412: CALL_OW 437
58416: PUSH
58417: LD_INT 1
58419: ARRAY
58420: PUSH
58421: LD_INT 4
58423: ARRAY
58424: PUSH
58425: LD_VAR 0 2
58429: EQUAL
58430: AND
58431: IFFALSE 58443
// result := true else
58433: LD_ADDR_VAR 0 3
58437: PUSH
58438: LD_INT 1
58440: ST_TO_ADDR
58441: GO 58451
// result := false ;
58443: LD_ADDR_VAR 0 3
58447: PUSH
58448: LD_INT 0
58450: ST_TO_ADDR
// end else
58451: GO 58461
// result := false ;
58453: LD_ADDR_VAR 0 3
58457: PUSH
58458: LD_INT 0
58460: ST_TO_ADDR
// end ;
58461: LD_VAR 0 3
58465: RET
// export function HealTarget ( sci ) ; begin
58466: LD_INT 0
58468: PPUSH
// if not sci then
58469: LD_VAR 0 1
58473: NOT
58474: IFFALSE 58478
// exit ;
58476: GO 58543
// result := 0 ;
58478: LD_ADDR_VAR 0 2
58482: PUSH
58483: LD_INT 0
58485: ST_TO_ADDR
// if GetTaskList ( sci ) then
58486: LD_VAR 0 1
58490: PPUSH
58491: CALL_OW 437
58495: IFFALSE 58543
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58497: LD_VAR 0 1
58501: PPUSH
58502: CALL_OW 437
58506: PUSH
58507: LD_INT 1
58509: ARRAY
58510: PUSH
58511: LD_INT 1
58513: ARRAY
58514: PUSH
58515: LD_STRING l
58517: EQUAL
58518: IFFALSE 58543
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58520: LD_ADDR_VAR 0 2
58524: PUSH
58525: LD_VAR 0 1
58529: PPUSH
58530: CALL_OW 437
58534: PUSH
58535: LD_INT 1
58537: ARRAY
58538: PUSH
58539: LD_INT 4
58541: ARRAY
58542: ST_TO_ADDR
// end ;
58543: LD_VAR 0 2
58547: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58548: LD_INT 0
58550: PPUSH
58551: PPUSH
58552: PPUSH
58553: PPUSH
// if not base_units then
58554: LD_VAR 0 1
58558: NOT
58559: IFFALSE 58563
// exit ;
58561: GO 58650
// result := false ;
58563: LD_ADDR_VAR 0 2
58567: PUSH
58568: LD_INT 0
58570: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58571: LD_ADDR_VAR 0 5
58575: PUSH
58576: LD_VAR 0 1
58580: PPUSH
58581: LD_INT 21
58583: PUSH
58584: LD_INT 3
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PPUSH
58591: CALL_OW 72
58595: ST_TO_ADDR
// if not tmp then
58596: LD_VAR 0 5
58600: NOT
58601: IFFALSE 58605
// exit ;
58603: GO 58650
// for i in tmp do
58605: LD_ADDR_VAR 0 3
58609: PUSH
58610: LD_VAR 0 5
58614: PUSH
58615: FOR_IN
58616: IFFALSE 58648
// begin result := EnemyInRange ( i , 22 ) ;
58618: LD_ADDR_VAR 0 2
58622: PUSH
58623: LD_VAR 0 3
58627: PPUSH
58628: LD_INT 22
58630: PPUSH
58631: CALL 56886 0 2
58635: ST_TO_ADDR
// if result then
58636: LD_VAR 0 2
58640: IFFALSE 58646
// exit ;
58642: POP
58643: POP
58644: GO 58650
// end ;
58646: GO 58615
58648: POP
58649: POP
// end ;
58650: LD_VAR 0 2
58654: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58655: LD_INT 0
58657: PPUSH
58658: PPUSH
// if not units then
58659: LD_VAR 0 1
58663: NOT
58664: IFFALSE 58668
// exit ;
58666: GO 58738
// result := [ ] ;
58668: LD_ADDR_VAR 0 3
58672: PUSH
58673: EMPTY
58674: ST_TO_ADDR
// for i in units do
58675: LD_ADDR_VAR 0 4
58679: PUSH
58680: LD_VAR 0 1
58684: PUSH
58685: FOR_IN
58686: IFFALSE 58736
// if GetTag ( i ) = tag then
58688: LD_VAR 0 4
58692: PPUSH
58693: CALL_OW 110
58697: PUSH
58698: LD_VAR 0 2
58702: EQUAL
58703: IFFALSE 58734
// result := Insert ( result , result + 1 , i ) ;
58705: LD_ADDR_VAR 0 3
58709: PUSH
58710: LD_VAR 0 3
58714: PPUSH
58715: LD_VAR 0 3
58719: PUSH
58720: LD_INT 1
58722: PLUS
58723: PPUSH
58724: LD_VAR 0 4
58728: PPUSH
58729: CALL_OW 2
58733: ST_TO_ADDR
58734: GO 58685
58736: POP
58737: POP
// end ;
58738: LD_VAR 0 3
58742: RET
// export function IsDriver ( un ) ; begin
58743: LD_INT 0
58745: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58746: LD_ADDR_VAR 0 2
58750: PUSH
58751: LD_VAR 0 1
58755: PUSH
58756: LD_INT 55
58758: PUSH
58759: EMPTY
58760: LIST
58761: PPUSH
58762: CALL_OW 69
58766: IN
58767: ST_TO_ADDR
// end ;
58768: LD_VAR 0 2
58772: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58773: LD_INT 0
58775: PPUSH
58776: PPUSH
// list := [ ] ;
58777: LD_ADDR_VAR 0 5
58781: PUSH
58782: EMPTY
58783: ST_TO_ADDR
// case d of 0 :
58784: LD_VAR 0 3
58788: PUSH
58789: LD_INT 0
58791: DOUBLE
58792: EQUAL
58793: IFTRUE 58797
58795: GO 58930
58797: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58798: LD_ADDR_VAR 0 5
58802: PUSH
58803: LD_VAR 0 1
58807: PUSH
58808: LD_INT 4
58810: MINUS
58811: PUSH
58812: LD_VAR 0 2
58816: PUSH
58817: LD_INT 4
58819: MINUS
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: LIST
58828: PUSH
58829: LD_VAR 0 1
58833: PUSH
58834: LD_INT 3
58836: MINUS
58837: PUSH
58838: LD_VAR 0 2
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: LIST
58850: PUSH
58851: LD_VAR 0 1
58855: PUSH
58856: LD_INT 4
58858: PLUS
58859: PUSH
58860: LD_VAR 0 2
58864: PUSH
58865: LD_INT 4
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: LIST
58872: PUSH
58873: LD_VAR 0 1
58877: PUSH
58878: LD_INT 3
58880: PLUS
58881: PUSH
58882: LD_VAR 0 2
58886: PUSH
58887: LD_INT 3
58889: PLUS
58890: PUSH
58891: LD_INT 5
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: PUSH
58899: LD_VAR 0 1
58903: PUSH
58904: LD_VAR 0 2
58908: PUSH
58909: LD_INT 4
58911: PLUS
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: LIST
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: ST_TO_ADDR
// end ; 1 :
58928: GO 59628
58930: LD_INT 1
58932: DOUBLE
58933: EQUAL
58934: IFTRUE 58938
58936: GO 59071
58938: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58939: LD_ADDR_VAR 0 5
58943: PUSH
58944: LD_VAR 0 1
58948: PUSH
58949: LD_VAR 0 2
58953: PUSH
58954: LD_INT 4
58956: MINUS
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: LIST
58965: PUSH
58966: LD_VAR 0 1
58970: PUSH
58971: LD_INT 3
58973: MINUS
58974: PUSH
58975: LD_VAR 0 2
58979: PUSH
58980: LD_INT 3
58982: MINUS
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: PUSH
58992: LD_VAR 0 1
58996: PUSH
58997: LD_INT 4
58999: MINUS
59000: PUSH
59001: LD_VAR 0 2
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: LIST
59013: PUSH
59014: LD_VAR 0 1
59018: PUSH
59019: LD_VAR 0 2
59023: PUSH
59024: LD_INT 3
59026: PLUS
59027: PUSH
59028: LD_INT 0
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: LIST
59035: PUSH
59036: LD_VAR 0 1
59040: PUSH
59041: LD_INT 4
59043: PLUS
59044: PUSH
59045: LD_VAR 0 2
59049: PUSH
59050: LD_INT 4
59052: PLUS
59053: PUSH
59054: LD_INT 5
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: LIST
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: ST_TO_ADDR
// end ; 2 :
59069: GO 59628
59071: LD_INT 2
59073: DOUBLE
59074: EQUAL
59075: IFTRUE 59079
59077: GO 59208
59079: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59080: LD_ADDR_VAR 0 5
59084: PUSH
59085: LD_VAR 0 1
59089: PUSH
59090: LD_VAR 0 2
59094: PUSH
59095: LD_INT 3
59097: MINUS
59098: PUSH
59099: LD_INT 3
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: LIST
59106: PUSH
59107: LD_VAR 0 1
59111: PUSH
59112: LD_INT 4
59114: PLUS
59115: PUSH
59116: LD_VAR 0 2
59120: PUSH
59121: LD_INT 4
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: PUSH
59129: LD_VAR 0 1
59133: PUSH
59134: LD_VAR 0 2
59138: PUSH
59139: LD_INT 4
59141: PLUS
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: LIST
59150: PUSH
59151: LD_VAR 0 1
59155: PUSH
59156: LD_INT 3
59158: MINUS
59159: PUSH
59160: LD_VAR 0 2
59164: PUSH
59165: LD_INT 1
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: LIST
59172: PUSH
59173: LD_VAR 0 1
59177: PUSH
59178: LD_INT 4
59180: MINUS
59181: PUSH
59182: LD_VAR 0 2
59186: PUSH
59187: LD_INT 4
59189: MINUS
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: LIST
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: ST_TO_ADDR
// end ; 3 :
59206: GO 59628
59208: LD_INT 3
59210: DOUBLE
59211: EQUAL
59212: IFTRUE 59216
59214: GO 59349
59216: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59217: LD_ADDR_VAR 0 5
59221: PUSH
59222: LD_VAR 0 1
59226: PUSH
59227: LD_INT 3
59229: PLUS
59230: PUSH
59231: LD_VAR 0 2
59235: PUSH
59236: LD_INT 4
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: LIST
59243: PUSH
59244: LD_VAR 0 1
59248: PUSH
59249: LD_INT 4
59251: PLUS
59252: PUSH
59253: LD_VAR 0 2
59257: PUSH
59258: LD_INT 4
59260: PLUS
59261: PUSH
59262: LD_INT 5
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: LIST
59269: PUSH
59270: LD_VAR 0 1
59274: PUSH
59275: LD_INT 4
59277: MINUS
59278: PUSH
59279: LD_VAR 0 2
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: LIST
59291: PUSH
59292: LD_VAR 0 1
59296: PUSH
59297: LD_VAR 0 2
59301: PUSH
59302: LD_INT 4
59304: MINUS
59305: PUSH
59306: LD_INT 3
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: LIST
59313: PUSH
59314: LD_VAR 0 1
59318: PUSH
59319: LD_INT 3
59321: MINUS
59322: PUSH
59323: LD_VAR 0 2
59327: PUSH
59328: LD_INT 3
59330: MINUS
59331: PUSH
59332: LD_INT 2
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: LIST
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: ST_TO_ADDR
// end ; 4 :
59347: GO 59628
59349: LD_INT 4
59351: DOUBLE
59352: EQUAL
59353: IFTRUE 59357
59355: GO 59490
59357: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59358: LD_ADDR_VAR 0 5
59362: PUSH
59363: LD_VAR 0 1
59367: PUSH
59368: LD_VAR 0 2
59372: PUSH
59373: LD_INT 4
59375: PLUS
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: LIST
59384: PUSH
59385: LD_VAR 0 1
59389: PUSH
59390: LD_INT 3
59392: PLUS
59393: PUSH
59394: LD_VAR 0 2
59398: PUSH
59399: LD_INT 3
59401: PLUS
59402: PUSH
59403: LD_INT 5
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: PUSH
59411: LD_VAR 0 1
59415: PUSH
59416: LD_INT 4
59418: PLUS
59419: PUSH
59420: LD_VAR 0 2
59424: PUSH
59425: LD_INT 4
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: LIST
59432: PUSH
59433: LD_VAR 0 1
59437: PUSH
59438: LD_VAR 0 2
59442: PUSH
59443: LD_INT 3
59445: MINUS
59446: PUSH
59447: LD_INT 3
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: LIST
59454: PUSH
59455: LD_VAR 0 1
59459: PUSH
59460: LD_INT 4
59462: MINUS
59463: PUSH
59464: LD_VAR 0 2
59468: PUSH
59469: LD_INT 4
59471: MINUS
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: ST_TO_ADDR
// end ; 5 :
59488: GO 59628
59490: LD_INT 5
59492: DOUBLE
59493: EQUAL
59494: IFTRUE 59498
59496: GO 59627
59498: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59499: LD_ADDR_VAR 0 5
59503: PUSH
59504: LD_VAR 0 1
59508: PUSH
59509: LD_INT 4
59511: MINUS
59512: PUSH
59513: LD_VAR 0 2
59517: PUSH
59518: LD_INT 1
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: LIST
59525: PUSH
59526: LD_VAR 0 1
59530: PUSH
59531: LD_VAR 0 2
59535: PUSH
59536: LD_INT 4
59538: MINUS
59539: PUSH
59540: LD_INT 3
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: LIST
59547: PUSH
59548: LD_VAR 0 1
59552: PUSH
59553: LD_INT 4
59555: PLUS
59556: PUSH
59557: LD_VAR 0 2
59561: PUSH
59562: LD_INT 4
59564: PLUS
59565: PUSH
59566: LD_INT 5
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: PUSH
59574: LD_VAR 0 1
59578: PUSH
59579: LD_INT 3
59581: PLUS
59582: PUSH
59583: LD_VAR 0 2
59587: PUSH
59588: LD_INT 4
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: LIST
59595: PUSH
59596: LD_VAR 0 1
59600: PUSH
59601: LD_VAR 0 2
59605: PUSH
59606: LD_INT 3
59608: PLUS
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: LIST
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: ST_TO_ADDR
// end ; end ;
59625: GO 59628
59627: POP
// result := list ;
59628: LD_ADDR_VAR 0 4
59632: PUSH
59633: LD_VAR 0 5
59637: ST_TO_ADDR
// end ;
59638: LD_VAR 0 4
59642: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59643: LD_INT 0
59645: PPUSH
59646: PPUSH
59647: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59648: LD_VAR 0 1
59652: NOT
59653: PUSH
59654: LD_VAR 0 2
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: LD_INT 2
59664: PUSH
59665: LD_INT 3
59667: PUSH
59668: LD_INT 4
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: IN
59677: NOT
59678: OR
59679: IFFALSE 59683
// exit ;
59681: GO 59775
// tmp := [ ] ;
59683: LD_ADDR_VAR 0 5
59687: PUSH
59688: EMPTY
59689: ST_TO_ADDR
// for i in units do
59690: LD_ADDR_VAR 0 4
59694: PUSH
59695: LD_VAR 0 1
59699: PUSH
59700: FOR_IN
59701: IFFALSE 59744
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59703: LD_ADDR_VAR 0 5
59707: PUSH
59708: LD_VAR 0 5
59712: PPUSH
59713: LD_VAR 0 5
59717: PUSH
59718: LD_INT 1
59720: PLUS
59721: PPUSH
59722: LD_VAR 0 4
59726: PPUSH
59727: LD_VAR 0 2
59731: PPUSH
59732: CALL_OW 259
59736: PPUSH
59737: CALL_OW 2
59741: ST_TO_ADDR
59742: GO 59700
59744: POP
59745: POP
// if not tmp then
59746: LD_VAR 0 5
59750: NOT
59751: IFFALSE 59755
// exit ;
59753: GO 59775
// result := SortListByListDesc ( units , tmp ) ;
59755: LD_ADDR_VAR 0 3
59759: PUSH
59760: LD_VAR 0 1
59764: PPUSH
59765: LD_VAR 0 5
59769: PPUSH
59770: CALL_OW 77
59774: ST_TO_ADDR
// end ;
59775: LD_VAR 0 3
59779: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59780: LD_INT 0
59782: PPUSH
59783: PPUSH
59784: PPUSH
// result := false ;
59785: LD_ADDR_VAR 0 3
59789: PUSH
59790: LD_INT 0
59792: ST_TO_ADDR
// x := GetX ( building ) ;
59793: LD_ADDR_VAR 0 4
59797: PUSH
59798: LD_VAR 0 2
59802: PPUSH
59803: CALL_OW 250
59807: ST_TO_ADDR
// y := GetY ( building ) ;
59808: LD_ADDR_VAR 0 5
59812: PUSH
59813: LD_VAR 0 2
59817: PPUSH
59818: CALL_OW 251
59822: ST_TO_ADDR
// if not building or not x or not y then
59823: LD_VAR 0 2
59827: NOT
59828: PUSH
59829: LD_VAR 0 4
59833: NOT
59834: OR
59835: PUSH
59836: LD_VAR 0 5
59840: NOT
59841: OR
59842: IFFALSE 59846
// exit ;
59844: GO 59938
// if GetTaskList ( unit ) then
59846: LD_VAR 0 1
59850: PPUSH
59851: CALL_OW 437
59855: IFFALSE 59938
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59857: LD_STRING e
59859: PUSH
59860: LD_VAR 0 1
59864: PPUSH
59865: CALL_OW 437
59869: PUSH
59870: LD_INT 1
59872: ARRAY
59873: PUSH
59874: LD_INT 1
59876: ARRAY
59877: EQUAL
59878: PUSH
59879: LD_VAR 0 4
59883: PUSH
59884: LD_VAR 0 1
59888: PPUSH
59889: CALL_OW 437
59893: PUSH
59894: LD_INT 1
59896: ARRAY
59897: PUSH
59898: LD_INT 2
59900: ARRAY
59901: EQUAL
59902: AND
59903: PUSH
59904: LD_VAR 0 5
59908: PUSH
59909: LD_VAR 0 1
59913: PPUSH
59914: CALL_OW 437
59918: PUSH
59919: LD_INT 1
59921: ARRAY
59922: PUSH
59923: LD_INT 3
59925: ARRAY
59926: EQUAL
59927: AND
59928: IFFALSE 59938
// result := true end ;
59930: LD_ADDR_VAR 0 3
59934: PUSH
59935: LD_INT 1
59937: ST_TO_ADDR
// end ;
59938: LD_VAR 0 3
59942: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59943: LD_INT 0
59945: PPUSH
// result := false ;
59946: LD_ADDR_VAR 0 4
59950: PUSH
59951: LD_INT 0
59953: ST_TO_ADDR
// if GetTaskList ( unit ) then
59954: LD_VAR 0 1
59958: PPUSH
59959: CALL_OW 437
59963: IFFALSE 60046
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59965: LD_STRING M
59967: PUSH
59968: LD_VAR 0 1
59972: PPUSH
59973: CALL_OW 437
59977: PUSH
59978: LD_INT 1
59980: ARRAY
59981: PUSH
59982: LD_INT 1
59984: ARRAY
59985: EQUAL
59986: PUSH
59987: LD_VAR 0 2
59991: PUSH
59992: LD_VAR 0 1
59996: PPUSH
59997: CALL_OW 437
60001: PUSH
60002: LD_INT 1
60004: ARRAY
60005: PUSH
60006: LD_INT 2
60008: ARRAY
60009: EQUAL
60010: AND
60011: PUSH
60012: LD_VAR 0 3
60016: PUSH
60017: LD_VAR 0 1
60021: PPUSH
60022: CALL_OW 437
60026: PUSH
60027: LD_INT 1
60029: ARRAY
60030: PUSH
60031: LD_INT 3
60033: ARRAY
60034: EQUAL
60035: AND
60036: IFFALSE 60046
// result := true ;
60038: LD_ADDR_VAR 0 4
60042: PUSH
60043: LD_INT 1
60045: ST_TO_ADDR
// end ; end ;
60046: LD_VAR 0 4
60050: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60051: LD_INT 0
60053: PPUSH
60054: PPUSH
60055: PPUSH
60056: PPUSH
// if not unit or not area then
60057: LD_VAR 0 1
60061: NOT
60062: PUSH
60063: LD_VAR 0 2
60067: NOT
60068: OR
60069: IFFALSE 60073
// exit ;
60071: GO 60237
// tmp := AreaToList ( area , i ) ;
60073: LD_ADDR_VAR 0 6
60077: PUSH
60078: LD_VAR 0 2
60082: PPUSH
60083: LD_VAR 0 5
60087: PPUSH
60088: CALL_OW 517
60092: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60093: LD_ADDR_VAR 0 5
60097: PUSH
60098: DOUBLE
60099: LD_INT 1
60101: DEC
60102: ST_TO_ADDR
60103: LD_VAR 0 6
60107: PUSH
60108: LD_INT 1
60110: ARRAY
60111: PUSH
60112: FOR_TO
60113: IFFALSE 60235
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60115: LD_ADDR_VAR 0 7
60119: PUSH
60120: LD_VAR 0 6
60124: PUSH
60125: LD_INT 1
60127: ARRAY
60128: PUSH
60129: LD_VAR 0 5
60133: ARRAY
60134: PUSH
60135: LD_VAR 0 6
60139: PUSH
60140: LD_INT 2
60142: ARRAY
60143: PUSH
60144: LD_VAR 0 5
60148: ARRAY
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60154: LD_VAR 0 7
60158: PUSH
60159: LD_INT 1
60161: ARRAY
60162: PPUSH
60163: LD_VAR 0 7
60167: PUSH
60168: LD_INT 2
60170: ARRAY
60171: PPUSH
60172: CALL_OW 428
60176: PUSH
60177: LD_INT 0
60179: EQUAL
60180: IFFALSE 60233
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60182: LD_VAR 0 1
60186: PPUSH
60187: LD_VAR 0 7
60191: PUSH
60192: LD_INT 1
60194: ARRAY
60195: PPUSH
60196: LD_VAR 0 7
60200: PUSH
60201: LD_INT 2
60203: ARRAY
60204: PPUSH
60205: LD_VAR 0 3
60209: PPUSH
60210: CALL_OW 48
// result := IsPlaced ( unit ) ;
60214: LD_ADDR_VAR 0 4
60218: PUSH
60219: LD_VAR 0 1
60223: PPUSH
60224: CALL_OW 305
60228: ST_TO_ADDR
// exit ;
60229: POP
60230: POP
60231: GO 60237
// end ; end ;
60233: GO 60112
60235: POP
60236: POP
// end ;
60237: LD_VAR 0 4
60241: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60242: LD_INT 0
60244: PPUSH
60245: PPUSH
60246: PPUSH
// if not side or side > 8 then
60247: LD_VAR 0 1
60251: NOT
60252: PUSH
60253: LD_VAR 0 1
60257: PUSH
60258: LD_INT 8
60260: GREATER
60261: OR
60262: IFFALSE 60266
// exit ;
60264: GO 60453
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60266: LD_ADDR_VAR 0 4
60270: PUSH
60271: LD_INT 22
60273: PUSH
60274: LD_VAR 0 1
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 21
60285: PUSH
60286: LD_INT 3
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PPUSH
60297: CALL_OW 69
60301: ST_TO_ADDR
// if not tmp then
60302: LD_VAR 0 4
60306: NOT
60307: IFFALSE 60311
// exit ;
60309: GO 60453
// enable_addtolog := true ;
60311: LD_ADDR_OWVAR 81
60315: PUSH
60316: LD_INT 1
60318: ST_TO_ADDR
// AddToLog ( [ ) ;
60319: LD_STRING [
60321: PPUSH
60322: CALL_OW 561
// for i in tmp do
60326: LD_ADDR_VAR 0 3
60330: PUSH
60331: LD_VAR 0 4
60335: PUSH
60336: FOR_IN
60337: IFFALSE 60444
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60339: LD_STRING [
60341: PUSH
60342: LD_VAR 0 3
60346: PPUSH
60347: CALL_OW 266
60351: STR
60352: PUSH
60353: LD_STRING , 
60355: STR
60356: PUSH
60357: LD_VAR 0 3
60361: PPUSH
60362: CALL_OW 250
60366: STR
60367: PUSH
60368: LD_STRING , 
60370: STR
60371: PUSH
60372: LD_VAR 0 3
60376: PPUSH
60377: CALL_OW 251
60381: STR
60382: PUSH
60383: LD_STRING , 
60385: STR
60386: PUSH
60387: LD_VAR 0 3
60391: PPUSH
60392: CALL_OW 254
60396: STR
60397: PUSH
60398: LD_STRING , 
60400: STR
60401: PUSH
60402: LD_VAR 0 3
60406: PPUSH
60407: LD_INT 1
60409: PPUSH
60410: CALL_OW 268
60414: STR
60415: PUSH
60416: LD_STRING , 
60418: STR
60419: PUSH
60420: LD_VAR 0 3
60424: PPUSH
60425: LD_INT 2
60427: PPUSH
60428: CALL_OW 268
60432: STR
60433: PUSH
60434: LD_STRING ],
60436: STR
60437: PPUSH
60438: CALL_OW 561
// end ;
60442: GO 60336
60444: POP
60445: POP
// AddToLog ( ]; ) ;
60446: LD_STRING ];
60448: PPUSH
60449: CALL_OW 561
// end ;
60453: LD_VAR 0 2
60457: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60458: LD_INT 0
60460: PPUSH
60461: PPUSH
60462: PPUSH
60463: PPUSH
60464: PPUSH
// if not area or not rate or not max then
60465: LD_VAR 0 1
60469: NOT
60470: PUSH
60471: LD_VAR 0 2
60475: NOT
60476: OR
60477: PUSH
60478: LD_VAR 0 4
60482: NOT
60483: OR
60484: IFFALSE 60488
// exit ;
60486: GO 60680
// while 1 do
60488: LD_INT 1
60490: IFFALSE 60680
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60492: LD_ADDR_VAR 0 9
60496: PUSH
60497: LD_VAR 0 1
60501: PPUSH
60502: LD_INT 1
60504: PPUSH
60505: CALL_OW 287
60509: PUSH
60510: LD_INT 10
60512: MUL
60513: ST_TO_ADDR
// r := rate / 10 ;
60514: LD_ADDR_VAR 0 7
60518: PUSH
60519: LD_VAR 0 2
60523: PUSH
60524: LD_INT 10
60526: DIVREAL
60527: ST_TO_ADDR
// time := 1 1$00 ;
60528: LD_ADDR_VAR 0 8
60532: PUSH
60533: LD_INT 2100
60535: ST_TO_ADDR
// if amount < min then
60536: LD_VAR 0 9
60540: PUSH
60541: LD_VAR 0 3
60545: LESS
60546: IFFALSE 60564
// r := r * 2 else
60548: LD_ADDR_VAR 0 7
60552: PUSH
60553: LD_VAR 0 7
60557: PUSH
60558: LD_INT 2
60560: MUL
60561: ST_TO_ADDR
60562: GO 60590
// if amount > max then
60564: LD_VAR 0 9
60568: PUSH
60569: LD_VAR 0 4
60573: GREATER
60574: IFFALSE 60590
// r := r / 2 ;
60576: LD_ADDR_VAR 0 7
60580: PUSH
60581: LD_VAR 0 7
60585: PUSH
60586: LD_INT 2
60588: DIVREAL
60589: ST_TO_ADDR
// time := time / r ;
60590: LD_ADDR_VAR 0 8
60594: PUSH
60595: LD_VAR 0 8
60599: PUSH
60600: LD_VAR 0 7
60604: DIVREAL
60605: ST_TO_ADDR
// if time < 0 then
60606: LD_VAR 0 8
60610: PUSH
60611: LD_INT 0
60613: LESS
60614: IFFALSE 60631
// time := time * - 1 ;
60616: LD_ADDR_VAR 0 8
60620: PUSH
60621: LD_VAR 0 8
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: MUL
60630: ST_TO_ADDR
// wait ( time ) ;
60631: LD_VAR 0 8
60635: PPUSH
60636: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60640: LD_INT 35
60642: PPUSH
60643: LD_INT 875
60645: PPUSH
60646: CALL_OW 12
60650: PPUSH
60651: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60655: LD_INT 1
60657: PPUSH
60658: LD_INT 5
60660: PPUSH
60661: CALL_OW 12
60665: PPUSH
60666: LD_VAR 0 1
60670: PPUSH
60671: LD_INT 1
60673: PPUSH
60674: CALL_OW 55
// end ;
60678: GO 60488
// end ;
60680: LD_VAR 0 5
60684: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60685: LD_INT 0
60687: PPUSH
60688: PPUSH
60689: PPUSH
60690: PPUSH
60691: PPUSH
60692: PPUSH
60693: PPUSH
60694: PPUSH
// if not turrets or not factories then
60695: LD_VAR 0 1
60699: NOT
60700: PUSH
60701: LD_VAR 0 2
60705: NOT
60706: OR
60707: IFFALSE 60711
// exit ;
60709: GO 61018
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60711: LD_ADDR_VAR 0 10
60715: PUSH
60716: LD_INT 5
60718: PUSH
60719: LD_INT 6
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 2
60728: PUSH
60729: LD_INT 4
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 3
60738: PUSH
60739: LD_INT 5
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 24
60753: PUSH
60754: LD_INT 25
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 23
60763: PUSH
60764: LD_INT 27
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 42
60777: PUSH
60778: LD_INT 43
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 44
60787: PUSH
60788: LD_INT 46
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 45
60797: PUSH
60798: LD_INT 47
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: LIST
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: LIST
60814: ST_TO_ADDR
// result := [ ] ;
60815: LD_ADDR_VAR 0 3
60819: PUSH
60820: EMPTY
60821: ST_TO_ADDR
// for i in turrets do
60822: LD_ADDR_VAR 0 4
60826: PUSH
60827: LD_VAR 0 1
60831: PUSH
60832: FOR_IN
60833: IFFALSE 61016
// begin nat := GetNation ( i ) ;
60835: LD_ADDR_VAR 0 7
60839: PUSH
60840: LD_VAR 0 4
60844: PPUSH
60845: CALL_OW 248
60849: ST_TO_ADDR
// weapon := 0 ;
60850: LD_ADDR_VAR 0 8
60854: PUSH
60855: LD_INT 0
60857: ST_TO_ADDR
// if not nat then
60858: LD_VAR 0 7
60862: NOT
60863: IFFALSE 60867
// continue ;
60865: GO 60832
// for j in list [ nat ] do
60867: LD_ADDR_VAR 0 5
60871: PUSH
60872: LD_VAR 0 10
60876: PUSH
60877: LD_VAR 0 7
60881: ARRAY
60882: PUSH
60883: FOR_IN
60884: IFFALSE 60925
// if GetBWeapon ( i ) = j [ 1 ] then
60886: LD_VAR 0 4
60890: PPUSH
60891: CALL_OW 269
60895: PUSH
60896: LD_VAR 0 5
60900: PUSH
60901: LD_INT 1
60903: ARRAY
60904: EQUAL
60905: IFFALSE 60923
// begin weapon := j [ 2 ] ;
60907: LD_ADDR_VAR 0 8
60911: PUSH
60912: LD_VAR 0 5
60916: PUSH
60917: LD_INT 2
60919: ARRAY
60920: ST_TO_ADDR
// break ;
60921: GO 60925
// end ;
60923: GO 60883
60925: POP
60926: POP
// if not weapon then
60927: LD_VAR 0 8
60931: NOT
60932: IFFALSE 60936
// continue ;
60934: GO 60832
// for k in factories do
60936: LD_ADDR_VAR 0 6
60940: PUSH
60941: LD_VAR 0 2
60945: PUSH
60946: FOR_IN
60947: IFFALSE 61012
// begin weapons := AvailableWeaponList ( k ) ;
60949: LD_ADDR_VAR 0 9
60953: PUSH
60954: LD_VAR 0 6
60958: PPUSH
60959: CALL_OW 478
60963: ST_TO_ADDR
// if not weapons then
60964: LD_VAR 0 9
60968: NOT
60969: IFFALSE 60973
// continue ;
60971: GO 60946
// if weapon in weapons then
60973: LD_VAR 0 8
60977: PUSH
60978: LD_VAR 0 9
60982: IN
60983: IFFALSE 61010
// begin result := [ i , weapon ] ;
60985: LD_ADDR_VAR 0 3
60989: PUSH
60990: LD_VAR 0 4
60994: PUSH
60995: LD_VAR 0 8
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: ST_TO_ADDR
// exit ;
61004: POP
61005: POP
61006: POP
61007: POP
61008: GO 61018
// end ; end ;
61010: GO 60946
61012: POP
61013: POP
// end ;
61014: GO 60832
61016: POP
61017: POP
// end ;
61018: LD_VAR 0 3
61022: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61023: LD_INT 0
61025: PPUSH
// if not side or side > 8 then
61026: LD_VAR 0 3
61030: NOT
61031: PUSH
61032: LD_VAR 0 3
61036: PUSH
61037: LD_INT 8
61039: GREATER
61040: OR
61041: IFFALSE 61045
// exit ;
61043: GO 61104
// if not range then
61045: LD_VAR 0 4
61049: NOT
61050: IFFALSE 61061
// range := - 12 ;
61052: LD_ADDR_VAR 0 4
61056: PUSH
61057: LD_INT 12
61059: NEG
61060: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61061: LD_VAR 0 1
61065: PPUSH
61066: LD_VAR 0 2
61070: PPUSH
61071: LD_VAR 0 3
61075: PPUSH
61076: LD_VAR 0 4
61080: PPUSH
61081: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61085: LD_VAR 0 1
61089: PPUSH
61090: LD_VAR 0 2
61094: PPUSH
61095: LD_VAR 0 3
61099: PPUSH
61100: CALL_OW 331
// end ;
61104: LD_VAR 0 5
61108: RET
// export function Video ( mode ) ; begin
61109: LD_INT 0
61111: PPUSH
// ingame_video = mode ;
61112: LD_ADDR_OWVAR 52
61116: PUSH
61117: LD_VAR 0 1
61121: ST_TO_ADDR
// interface_hidden = mode ;
61122: LD_ADDR_OWVAR 54
61126: PUSH
61127: LD_VAR 0 1
61131: ST_TO_ADDR
// end ;
61132: LD_VAR 0 2
61136: RET
// export function Join ( array , element ) ; begin
61137: LD_INT 0
61139: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61140: LD_ADDR_VAR 0 3
61144: PUSH
61145: LD_VAR 0 1
61149: PPUSH
61150: LD_VAR 0 1
61154: PUSH
61155: LD_INT 1
61157: PLUS
61158: PPUSH
61159: LD_VAR 0 2
61163: PPUSH
61164: CALL_OW 1
61168: ST_TO_ADDR
// end ;
61169: LD_VAR 0 3
61173: RET
// export function JoinUnion ( array , element ) ; begin
61174: LD_INT 0
61176: PPUSH
// result := array union element ;
61177: LD_ADDR_VAR 0 3
61181: PUSH
61182: LD_VAR 0 1
61186: PUSH
61187: LD_VAR 0 2
61191: UNION
61192: ST_TO_ADDR
// end ;
61193: LD_VAR 0 3
61197: RET
// export function GetBehemoths ( side ) ; begin
61198: LD_INT 0
61200: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61201: LD_ADDR_VAR 0 2
61205: PUSH
61206: LD_INT 22
61208: PUSH
61209: LD_VAR 0 1
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 31
61220: PUSH
61221: LD_INT 25
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PPUSH
61232: CALL_OW 69
61236: ST_TO_ADDR
// end ;
61237: LD_VAR 0 2
61241: RET
// export function Shuffle ( array ) ; var i , index ; begin
61242: LD_INT 0
61244: PPUSH
61245: PPUSH
61246: PPUSH
// result := [ ] ;
61247: LD_ADDR_VAR 0 2
61251: PUSH
61252: EMPTY
61253: ST_TO_ADDR
// if not array then
61254: LD_VAR 0 1
61258: NOT
61259: IFFALSE 61263
// exit ;
61261: GO 61362
// Randomize ;
61263: CALL_OW 10
// for i = array downto 1 do
61267: LD_ADDR_VAR 0 3
61271: PUSH
61272: DOUBLE
61273: LD_VAR 0 1
61277: INC
61278: ST_TO_ADDR
61279: LD_INT 1
61281: PUSH
61282: FOR_DOWNTO
61283: IFFALSE 61360
// begin index := rand ( 1 , array ) ;
61285: LD_ADDR_VAR 0 4
61289: PUSH
61290: LD_INT 1
61292: PPUSH
61293: LD_VAR 0 1
61297: PPUSH
61298: CALL_OW 12
61302: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61303: LD_ADDR_VAR 0 2
61307: PUSH
61308: LD_VAR 0 2
61312: PPUSH
61313: LD_VAR 0 2
61317: PUSH
61318: LD_INT 1
61320: PLUS
61321: PPUSH
61322: LD_VAR 0 1
61326: PUSH
61327: LD_VAR 0 4
61331: ARRAY
61332: PPUSH
61333: CALL_OW 2
61337: ST_TO_ADDR
// array := Delete ( array , index ) ;
61338: LD_ADDR_VAR 0 1
61342: PUSH
61343: LD_VAR 0 1
61347: PPUSH
61348: LD_VAR 0 4
61352: PPUSH
61353: CALL_OW 3
61357: ST_TO_ADDR
// end ;
61358: GO 61282
61360: POP
61361: POP
// end ;
61362: LD_VAR 0 2
61366: RET
// export function GetBaseMaterials ( base ) ; begin
61367: LD_INT 0
61369: PPUSH
// result := [ 0 , 0 , 0 ] ;
61370: LD_ADDR_VAR 0 2
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 0
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: LIST
61388: ST_TO_ADDR
// if not base then
61389: LD_VAR 0 1
61393: NOT
61394: IFFALSE 61398
// exit ;
61396: GO 61447
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61398: LD_ADDR_VAR 0 2
61402: PUSH
61403: LD_VAR 0 1
61407: PPUSH
61408: LD_INT 1
61410: PPUSH
61411: CALL_OW 275
61415: PUSH
61416: LD_VAR 0 1
61420: PPUSH
61421: LD_INT 2
61423: PPUSH
61424: CALL_OW 275
61428: PUSH
61429: LD_VAR 0 1
61433: PPUSH
61434: LD_INT 3
61436: PPUSH
61437: CALL_OW 275
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: LIST
61446: ST_TO_ADDR
// end ;
61447: LD_VAR 0 2
61451: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61452: LD_INT 0
61454: PPUSH
61455: PPUSH
// result := array ;
61456: LD_ADDR_VAR 0 3
61460: PUSH
61461: LD_VAR 0 1
61465: ST_TO_ADDR
// if size > 0 then
61466: LD_VAR 0 2
61470: PUSH
61471: LD_INT 0
61473: GREATER
61474: IFFALSE 61520
// for i := array downto size do
61476: LD_ADDR_VAR 0 4
61480: PUSH
61481: DOUBLE
61482: LD_VAR 0 1
61486: INC
61487: ST_TO_ADDR
61488: LD_VAR 0 2
61492: PUSH
61493: FOR_DOWNTO
61494: IFFALSE 61518
// result := Delete ( result , result ) ;
61496: LD_ADDR_VAR 0 3
61500: PUSH
61501: LD_VAR 0 3
61505: PPUSH
61506: LD_VAR 0 3
61510: PPUSH
61511: CALL_OW 3
61515: ST_TO_ADDR
61516: GO 61493
61518: POP
61519: POP
// end ;
61520: LD_VAR 0 3
61524: RET
// export function ComExit ( unit ) ; var tmp ; begin
61525: LD_INT 0
61527: PPUSH
61528: PPUSH
// if not IsInUnit ( unit ) then
61529: LD_VAR 0 1
61533: PPUSH
61534: CALL_OW 310
61538: NOT
61539: IFFALSE 61543
// exit ;
61541: GO 61603
// tmp := IsInUnit ( unit ) ;
61543: LD_ADDR_VAR 0 3
61547: PUSH
61548: LD_VAR 0 1
61552: PPUSH
61553: CALL_OW 310
61557: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61558: LD_VAR 0 3
61562: PPUSH
61563: CALL_OW 247
61567: PUSH
61568: LD_INT 2
61570: EQUAL
61571: IFFALSE 61584
// ComExitVehicle ( unit ) else
61573: LD_VAR 0 1
61577: PPUSH
61578: CALL_OW 121
61582: GO 61593
// ComExitBuilding ( unit ) ;
61584: LD_VAR 0 1
61588: PPUSH
61589: CALL_OW 122
// result := tmp ;
61593: LD_ADDR_VAR 0 2
61597: PUSH
61598: LD_VAR 0 3
61602: ST_TO_ADDR
// end ;
61603: LD_VAR 0 2
61607: RET
// export function ComExitAll ( units ) ; var i ; begin
61608: LD_INT 0
61610: PPUSH
61611: PPUSH
// if not units then
61612: LD_VAR 0 1
61616: NOT
61617: IFFALSE 61621
// exit ;
61619: GO 61647
// for i in units do
61621: LD_ADDR_VAR 0 3
61625: PUSH
61626: LD_VAR 0 1
61630: PUSH
61631: FOR_IN
61632: IFFALSE 61645
// ComExit ( i ) ;
61634: LD_VAR 0 3
61638: PPUSH
61639: CALL 61525 0 1
61643: GO 61631
61645: POP
61646: POP
// end ;
61647: LD_VAR 0 2
61651: RET
// export function ResetHc ; begin
61652: LD_INT 0
61654: PPUSH
// InitHc ;
61655: CALL_OW 19
// hc_importance := 0 ;
61659: LD_ADDR_OWVAR 32
61663: PUSH
61664: LD_INT 0
61666: ST_TO_ADDR
// end ;
61667: LD_VAR 0 1
61671: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61672: LD_INT 0
61674: PPUSH
61675: PPUSH
61676: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61677: LD_ADDR_VAR 0 6
61681: PUSH
61682: LD_VAR 0 1
61686: PUSH
61687: LD_VAR 0 3
61691: PLUS
61692: PUSH
61693: LD_INT 2
61695: DIV
61696: ST_TO_ADDR
// if _x < 0 then
61697: LD_VAR 0 6
61701: PUSH
61702: LD_INT 0
61704: LESS
61705: IFFALSE 61722
// _x := _x * - 1 ;
61707: LD_ADDR_VAR 0 6
61711: PUSH
61712: LD_VAR 0 6
61716: PUSH
61717: LD_INT 1
61719: NEG
61720: MUL
61721: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61722: LD_ADDR_VAR 0 7
61726: PUSH
61727: LD_VAR 0 2
61731: PUSH
61732: LD_VAR 0 4
61736: PLUS
61737: PUSH
61738: LD_INT 2
61740: DIV
61741: ST_TO_ADDR
// if _y < 0 then
61742: LD_VAR 0 7
61746: PUSH
61747: LD_INT 0
61749: LESS
61750: IFFALSE 61767
// _y := _y * - 1 ;
61752: LD_ADDR_VAR 0 7
61756: PUSH
61757: LD_VAR 0 7
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: MUL
61766: ST_TO_ADDR
// result := [ _x , _y ] ;
61767: LD_ADDR_VAR 0 5
61771: PUSH
61772: LD_VAR 0 6
61776: PUSH
61777: LD_VAR 0 7
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: ST_TO_ADDR
// end ;
61786: LD_VAR 0 5
61790: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61791: LD_INT 0
61793: PPUSH
61794: PPUSH
61795: PPUSH
61796: PPUSH
// task := GetTaskList ( unit ) ;
61797: LD_ADDR_VAR 0 7
61801: PUSH
61802: LD_VAR 0 1
61806: PPUSH
61807: CALL_OW 437
61811: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61812: LD_VAR 0 7
61816: NOT
61817: PUSH
61818: LD_VAR 0 1
61822: PPUSH
61823: LD_VAR 0 2
61827: PPUSH
61828: CALL_OW 308
61832: NOT
61833: AND
61834: IFFALSE 61838
// exit ;
61836: GO 61956
// if IsInArea ( unit , area ) then
61838: LD_VAR 0 1
61842: PPUSH
61843: LD_VAR 0 2
61847: PPUSH
61848: CALL_OW 308
61852: IFFALSE 61870
// begin ComMoveToArea ( unit , goAway ) ;
61854: LD_VAR 0 1
61858: PPUSH
61859: LD_VAR 0 3
61863: PPUSH
61864: CALL_OW 113
// exit ;
61868: GO 61956
// end ; if task [ 1 ] [ 1 ] <> M then
61870: LD_VAR 0 7
61874: PUSH
61875: LD_INT 1
61877: ARRAY
61878: PUSH
61879: LD_INT 1
61881: ARRAY
61882: PUSH
61883: LD_STRING M
61885: NONEQUAL
61886: IFFALSE 61890
// exit ;
61888: GO 61956
// x := task [ 1 ] [ 2 ] ;
61890: LD_ADDR_VAR 0 5
61894: PUSH
61895: LD_VAR 0 7
61899: PUSH
61900: LD_INT 1
61902: ARRAY
61903: PUSH
61904: LD_INT 2
61906: ARRAY
61907: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61908: LD_ADDR_VAR 0 6
61912: PUSH
61913: LD_VAR 0 7
61917: PUSH
61918: LD_INT 1
61920: ARRAY
61921: PUSH
61922: LD_INT 3
61924: ARRAY
61925: ST_TO_ADDR
// if InArea ( x , y , area ) then
61926: LD_VAR 0 5
61930: PPUSH
61931: LD_VAR 0 6
61935: PPUSH
61936: LD_VAR 0 2
61940: PPUSH
61941: CALL_OW 309
61945: IFFALSE 61956
// ComStop ( unit ) ;
61947: LD_VAR 0 1
61951: PPUSH
61952: CALL_OW 141
// end ;
61956: LD_VAR 0 4
61960: RET
// export function Abs ( value ) ; begin
61961: LD_INT 0
61963: PPUSH
// result := value ;
61964: LD_ADDR_VAR 0 2
61968: PUSH
61969: LD_VAR 0 1
61973: ST_TO_ADDR
// if value < 0 then
61974: LD_VAR 0 1
61978: PUSH
61979: LD_INT 0
61981: LESS
61982: IFFALSE 61999
// result := value * - 1 ;
61984: LD_ADDR_VAR 0 2
61988: PUSH
61989: LD_VAR 0 1
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: MUL
61998: ST_TO_ADDR
// end ;
61999: LD_VAR 0 2
62003: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62004: LD_INT 0
62006: PPUSH
62007: PPUSH
62008: PPUSH
62009: PPUSH
62010: PPUSH
62011: PPUSH
62012: PPUSH
62013: PPUSH
// if not unit or not building then
62014: LD_VAR 0 1
62018: NOT
62019: PUSH
62020: LD_VAR 0 2
62024: NOT
62025: OR
62026: IFFALSE 62030
// exit ;
62028: GO 62256
// x := GetX ( building ) ;
62030: LD_ADDR_VAR 0 4
62034: PUSH
62035: LD_VAR 0 2
62039: PPUSH
62040: CALL_OW 250
62044: ST_TO_ADDR
// y := GetY ( building ) ;
62045: LD_ADDR_VAR 0 6
62049: PUSH
62050: LD_VAR 0 2
62054: PPUSH
62055: CALL_OW 251
62059: ST_TO_ADDR
// d := GetDir ( building ) ;
62060: LD_ADDR_VAR 0 8
62064: PUSH
62065: LD_VAR 0 2
62069: PPUSH
62070: CALL_OW 254
62074: ST_TO_ADDR
// r := 4 ;
62075: LD_ADDR_VAR 0 9
62079: PUSH
62080: LD_INT 4
62082: ST_TO_ADDR
// for i := 1 to 5 do
62083: LD_ADDR_VAR 0 10
62087: PUSH
62088: DOUBLE
62089: LD_INT 1
62091: DEC
62092: ST_TO_ADDR
62093: LD_INT 5
62095: PUSH
62096: FOR_TO
62097: IFFALSE 62254
// begin _x := ShiftX ( x , d , r + i ) ;
62099: LD_ADDR_VAR 0 5
62103: PUSH
62104: LD_VAR 0 4
62108: PPUSH
62109: LD_VAR 0 8
62113: PPUSH
62114: LD_VAR 0 9
62118: PUSH
62119: LD_VAR 0 10
62123: PLUS
62124: PPUSH
62125: CALL_OW 272
62129: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62130: LD_ADDR_VAR 0 7
62134: PUSH
62135: LD_VAR 0 6
62139: PPUSH
62140: LD_VAR 0 8
62144: PPUSH
62145: LD_VAR 0 9
62149: PUSH
62150: LD_VAR 0 10
62154: PLUS
62155: PPUSH
62156: CALL_OW 273
62160: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62161: LD_VAR 0 5
62165: PPUSH
62166: LD_VAR 0 7
62170: PPUSH
62171: CALL_OW 488
62175: PUSH
62176: LD_VAR 0 5
62180: PPUSH
62181: LD_VAR 0 7
62185: PPUSH
62186: CALL_OW 428
62190: PPUSH
62191: CALL_OW 247
62195: PUSH
62196: LD_INT 3
62198: PUSH
62199: LD_INT 2
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: IN
62206: NOT
62207: AND
62208: IFFALSE 62252
// begin ComMoveXY ( unit , _x , _y ) ;
62210: LD_VAR 0 1
62214: PPUSH
62215: LD_VAR 0 5
62219: PPUSH
62220: LD_VAR 0 7
62224: PPUSH
62225: CALL_OW 111
// result := [ _x , _y ] ;
62229: LD_ADDR_VAR 0 3
62233: PUSH
62234: LD_VAR 0 5
62238: PUSH
62239: LD_VAR 0 7
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: ST_TO_ADDR
// exit ;
62248: POP
62249: POP
62250: GO 62256
// end ; end ;
62252: GO 62096
62254: POP
62255: POP
// end ;
62256: LD_VAR 0 3
62260: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62261: LD_INT 0
62263: PPUSH
62264: PPUSH
62265: PPUSH
// result := 0 ;
62266: LD_ADDR_VAR 0 3
62270: PUSH
62271: LD_INT 0
62273: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62274: LD_VAR 0 1
62278: PUSH
62279: LD_INT 0
62281: LESS
62282: PUSH
62283: LD_VAR 0 1
62287: PUSH
62288: LD_INT 8
62290: GREATER
62291: OR
62292: PUSH
62293: LD_VAR 0 2
62297: PUSH
62298: LD_INT 0
62300: LESS
62301: OR
62302: PUSH
62303: LD_VAR 0 2
62307: PUSH
62308: LD_INT 8
62310: GREATER
62311: OR
62312: IFFALSE 62316
// exit ;
62314: GO 62391
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62316: LD_ADDR_VAR 0 4
62320: PUSH
62321: LD_INT 22
62323: PUSH
62324: LD_VAR 0 2
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PPUSH
62333: CALL_OW 69
62337: PUSH
62338: FOR_IN
62339: IFFALSE 62389
// begin un := UnitShoot ( i ) ;
62341: LD_ADDR_VAR 0 5
62345: PUSH
62346: LD_VAR 0 4
62350: PPUSH
62351: CALL_OW 504
62355: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62356: LD_VAR 0 5
62360: PPUSH
62361: CALL_OW 255
62365: PUSH
62366: LD_VAR 0 1
62370: EQUAL
62371: IFFALSE 62387
// begin result := un ;
62373: LD_ADDR_VAR 0 3
62377: PUSH
62378: LD_VAR 0 5
62382: ST_TO_ADDR
// exit ;
62383: POP
62384: POP
62385: GO 62391
// end ; end ;
62387: GO 62338
62389: POP
62390: POP
// end ;
62391: LD_VAR 0 3
62395: RET
// export function GetCargoBay ( units ) ; begin
62396: LD_INT 0
62398: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62399: LD_ADDR_VAR 0 2
62403: PUSH
62404: LD_VAR 0 1
62408: PPUSH
62409: LD_INT 2
62411: PUSH
62412: LD_INT 34
62414: PUSH
62415: LD_INT 12
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 34
62424: PUSH
62425: LD_INT 51
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 34
62434: PUSH
62435: LD_INT 32
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 34
62444: PUSH
62445: LD_EXP 19
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: PPUSH
62461: CALL_OW 72
62465: ST_TO_ADDR
// end ;
62466: LD_VAR 0 2
62470: RET
// export function Negate ( value ) ; begin
62471: LD_INT 0
62473: PPUSH
// result := not value ;
62474: LD_ADDR_VAR 0 2
62478: PUSH
62479: LD_VAR 0 1
62483: NOT
62484: ST_TO_ADDR
// end ;
62485: LD_VAR 0 2
62489: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
62490: LD_INT 0
62492: PPUSH
// if x1 = x2 then
62493: LD_VAR 0 1
62497: PUSH
62498: LD_VAR 0 3
62502: EQUAL
62503: IFFALSE 62537
// begin if y1 > y2 then
62505: LD_VAR 0 2
62509: PUSH
62510: LD_VAR 0 4
62514: GREATER
62515: IFFALSE 62527
// result := 0 else
62517: LD_ADDR_VAR 0 5
62521: PUSH
62522: LD_INT 0
62524: ST_TO_ADDR
62525: GO 62535
// result := 3 ;
62527: LD_ADDR_VAR 0 5
62531: PUSH
62532: LD_INT 3
62534: ST_TO_ADDR
// exit ;
62535: GO 62623
// end ; if y1 = y2 then
62537: LD_VAR 0 2
62541: PUSH
62542: LD_VAR 0 4
62546: EQUAL
62547: IFFALSE 62581
// begin if x1 > x2 then
62549: LD_VAR 0 1
62553: PUSH
62554: LD_VAR 0 3
62558: GREATER
62559: IFFALSE 62571
// result := 1 else
62561: LD_ADDR_VAR 0 5
62565: PUSH
62566: LD_INT 1
62568: ST_TO_ADDR
62569: GO 62579
// result := 4 ;
62571: LD_ADDR_VAR 0 5
62575: PUSH
62576: LD_INT 4
62578: ST_TO_ADDR
// exit ;
62579: GO 62623
// end ; if x1 > x2 and y1 > y2 then
62581: LD_VAR 0 1
62585: PUSH
62586: LD_VAR 0 3
62590: GREATER
62591: PUSH
62592: LD_VAR 0 2
62596: PUSH
62597: LD_VAR 0 4
62601: GREATER
62602: AND
62603: IFFALSE 62615
// result := 2 else
62605: LD_ADDR_VAR 0 5
62609: PUSH
62610: LD_INT 2
62612: ST_TO_ADDR
62613: GO 62623
// result := 5 ;
62615: LD_ADDR_VAR 0 5
62619: PUSH
62620: LD_INT 5
62622: ST_TO_ADDR
// end ;
62623: LD_VAR 0 5
62627: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62628: LD_INT 0
62630: PPUSH
62631: PPUSH
// if not driver or not IsInUnit ( driver ) then
62632: LD_VAR 0 1
62636: NOT
62637: PUSH
62638: LD_VAR 0 1
62642: PPUSH
62643: CALL_OW 310
62647: NOT
62648: OR
62649: IFFALSE 62653
// exit ;
62651: GO 62743
// vehicle := IsInUnit ( driver ) ;
62653: LD_ADDR_VAR 0 3
62657: PUSH
62658: LD_VAR 0 1
62662: PPUSH
62663: CALL_OW 310
62667: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62668: LD_VAR 0 1
62672: PPUSH
62673: LD_STRING \
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: PUSH
62703: LD_STRING E
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: LD_VAR 0 3
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PPUSH
62739: CALL_OW 446
// end ;
62743: LD_VAR 0 2
62747: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62748: LD_INT 0
62750: PPUSH
62751: PPUSH
// if not driver or not IsInUnit ( driver ) then
62752: LD_VAR 0 1
62756: NOT
62757: PUSH
62758: LD_VAR 0 1
62762: PPUSH
62763: CALL_OW 310
62767: NOT
62768: OR
62769: IFFALSE 62773
// exit ;
62771: GO 62863
// vehicle := IsInUnit ( driver ) ;
62773: LD_ADDR_VAR 0 3
62777: PUSH
62778: LD_VAR 0 1
62782: PPUSH
62783: CALL_OW 310
62787: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62788: LD_VAR 0 1
62792: PPUSH
62793: LD_STRING \
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: LD_INT 0
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: PUSH
62823: LD_STRING E
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: LD_INT 0
62831: PUSH
62832: LD_VAR 0 3
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PPUSH
62859: CALL_OW 447
// end ;
62863: LD_VAR 0 2
62867: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62868: LD_INT 0
62870: PPUSH
62871: PPUSH
62872: PPUSH
// tmp := [ ] ;
62873: LD_ADDR_VAR 0 5
62877: PUSH
62878: EMPTY
62879: ST_TO_ADDR
// for i in units do
62880: LD_ADDR_VAR 0 4
62884: PUSH
62885: LD_VAR 0 1
62889: PUSH
62890: FOR_IN
62891: IFFALSE 62929
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62893: LD_ADDR_VAR 0 5
62897: PUSH
62898: LD_VAR 0 5
62902: PPUSH
62903: LD_VAR 0 5
62907: PUSH
62908: LD_INT 1
62910: PLUS
62911: PPUSH
62912: LD_VAR 0 4
62916: PPUSH
62917: CALL_OW 256
62921: PPUSH
62922: CALL_OW 2
62926: ST_TO_ADDR
62927: GO 62890
62929: POP
62930: POP
// if not tmp then
62931: LD_VAR 0 5
62935: NOT
62936: IFFALSE 62940
// exit ;
62938: GO 62988
// if asc then
62940: LD_VAR 0 2
62944: IFFALSE 62968
// result := SortListByListAsc ( units , tmp ) else
62946: LD_ADDR_VAR 0 3
62950: PUSH
62951: LD_VAR 0 1
62955: PPUSH
62956: LD_VAR 0 5
62960: PPUSH
62961: CALL_OW 76
62965: ST_TO_ADDR
62966: GO 62988
// result := SortListByListDesc ( units , tmp ) ;
62968: LD_ADDR_VAR 0 3
62972: PUSH
62973: LD_VAR 0 1
62977: PPUSH
62978: LD_VAR 0 5
62982: PPUSH
62983: CALL_OW 77
62987: ST_TO_ADDR
// end ;
62988: LD_VAR 0 3
62992: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62993: LD_INT 0
62995: PPUSH
62996: PPUSH
// task := GetTaskList ( mech ) ;
62997: LD_ADDR_VAR 0 4
63001: PUSH
63002: LD_VAR 0 1
63006: PPUSH
63007: CALL_OW 437
63011: ST_TO_ADDR
// if not task then
63012: LD_VAR 0 4
63016: NOT
63017: IFFALSE 63021
// exit ;
63019: GO 63063
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63021: LD_ADDR_VAR 0 3
63025: PUSH
63026: LD_VAR 0 4
63030: PUSH
63031: LD_INT 1
63033: ARRAY
63034: PUSH
63035: LD_INT 1
63037: ARRAY
63038: PUSH
63039: LD_STRING r
63041: EQUAL
63042: PUSH
63043: LD_VAR 0 4
63047: PUSH
63048: LD_INT 1
63050: ARRAY
63051: PUSH
63052: LD_INT 4
63054: ARRAY
63055: PUSH
63056: LD_VAR 0 2
63060: EQUAL
63061: AND
63062: ST_TO_ADDR
// end ;
63063: LD_VAR 0 3
63067: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63068: LD_INT 0
63070: PPUSH
// SetDir ( unit , d ) ;
63071: LD_VAR 0 1
63075: PPUSH
63076: LD_VAR 0 4
63080: PPUSH
63081: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63085: LD_VAR 0 1
63089: PPUSH
63090: LD_VAR 0 2
63094: PPUSH
63095: LD_VAR 0 3
63099: PPUSH
63100: LD_VAR 0 5
63104: PPUSH
63105: CALL_OW 48
// end ;
63109: LD_VAR 0 6
63113: RET
// export function ToNaturalNumber ( number ) ; begin
63114: LD_INT 0
63116: PPUSH
// result := number div 1 ;
63117: LD_ADDR_VAR 0 2
63121: PUSH
63122: LD_VAR 0 1
63126: PUSH
63127: LD_INT 1
63129: DIV
63130: ST_TO_ADDR
// if number < 0 then
63131: LD_VAR 0 1
63135: PUSH
63136: LD_INT 0
63138: LESS
63139: IFFALSE 63149
// result := 0 ;
63141: LD_ADDR_VAR 0 2
63145: PUSH
63146: LD_INT 0
63148: ST_TO_ADDR
// end ; end_of_file
63149: LD_VAR 0 2
63153: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63154: LD_VAR 0 1
63158: PUSH
63159: LD_INT 200
63161: DOUBLE
63162: GREATEREQUAL
63163: IFFALSE 63171
63165: LD_INT 299
63167: DOUBLE
63168: LESSEQUAL
63169: IFTRUE 63173
63171: GO 63205
63173: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63174: LD_VAR 0 1
63178: PPUSH
63179: LD_VAR 0 2
63183: PPUSH
63184: LD_VAR 0 3
63188: PPUSH
63189: LD_VAR 0 4
63193: PPUSH
63194: LD_VAR 0 5
63198: PPUSH
63199: CALL 20516 0 5
63203: GO 63282
63205: LD_INT 300
63207: DOUBLE
63208: GREATEREQUAL
63209: IFFALSE 63217
63211: LD_INT 399
63213: DOUBLE
63214: LESSEQUAL
63215: IFTRUE 63219
63217: GO 63281
63219: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63220: LD_VAR 0 1
63224: PPUSH
63225: LD_VAR 0 2
63229: PPUSH
63230: LD_VAR 0 3
63234: PPUSH
63235: LD_VAR 0 4
63239: PPUSH
63240: LD_VAR 0 5
63244: PPUSH
63245: LD_VAR 0 6
63249: PPUSH
63250: LD_VAR 0 7
63254: PPUSH
63255: LD_VAR 0 8
63259: PPUSH
63260: LD_VAR 0 9
63264: PPUSH
63265: LD_VAR 0 10
63269: PPUSH
63270: LD_VAR 0 11
63274: PPUSH
63275: CALL 18404 0 11
63279: GO 63282
63281: POP
// end ;
63282: PPOPN 11
63284: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63285: LD_VAR 0 1
63289: PPUSH
63290: LD_VAR 0 2
63294: PPUSH
63295: LD_VAR 0 3
63299: PPUSH
63300: LD_VAR 0 4
63304: PPUSH
63305: LD_VAR 0 5
63309: PPUSH
63310: CALL 20498 0 5
// end ; end_of_file
63314: PPOPN 5
63316: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63317: LD_VAR 0 1
63321: PPUSH
63322: LD_VAR 0 2
63326: PPUSH
63327: LD_VAR 0 3
63331: PPUSH
63332: LD_VAR 0 4
63336: PPUSH
63337: LD_VAR 0 5
63341: PPUSH
63342: LD_VAR 0 6
63346: PPUSH
63347: CALL 7212 0 6
// end ;
63351: PPOPN 6
63353: END
