// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 21 0 0
// PrepareLegion ;
   8: CALL 230 0 0
// PrepareAllies ;
  12: CALL 2221 0 0
// Action ;
  16: CALL 4045 0 0
// end ;
  20: END
// function InitGame ; begin
  21: LD_INT 0
  23: PPUSH
// RandomizeAll ;
  24: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// if not Difficulty then
  41: LD_OWVAR 67
  45: NOT
  46: IFFALSE 56
// Difficulty := 2 ;
  48: LD_ADDR_OWVAR 67
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// InitVariables ;
  56: CALL 69 0 0
// SetDiplomacy ;
  60: CALL 182 0 0
// end ; end_of_file
  64: LD_VAR 0 1
  68: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , player_res_art , time_res_art , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave , player_artifact_ready , artifact_progress ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// points := 0 ;
  72: LD_ADDR_EXP 10
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// alert := false ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// game_over := false ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// wave_time := 0 0$00 ;
  96: LD_ADDR_EXP 11
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// bonus_active := false ;
 104: LD_ADDR_EXP 13
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ignore_wave := false ;
 112: LD_ADDR_EXP 15
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// player_res_art := false ;
 120: LD_ADDR_EXP 8
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// player_artifact_ready := false ;
 128: LD_ADDR_EXP 16
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// time_res_art := [ 25 25$00 , 32 32$00 , 40 40$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 9
 140: PUSH
 141: LD_INT 52500
 143: PUSH
 144: LD_INT 67200
 146: PUSH
 147: LD_INT 84000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// bonus_num := 0 ;
 161: LD_ADDR_EXP 14
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// artifact_progress := 0 ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// end ;
 177: LD_VAR 0 1
 181: RET
// export function SetDiplomacy ; begin
 182: LD_INT 0
 184: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 185: LD_INT 92
 187: PPUSH
 188: LD_INT 48
 190: PPUSH
 191: LD_INT 8
 193: PPUSH
 194: LD_INT 32796
 196: NEG
 197: PPUSH
 198: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 202: LD_INT 92
 204: PPUSH
 205: LD_INT 48
 207: PPUSH
 208: LD_INT 8
 210: PPUSH
 211: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 215: LD_INT 5
 217: PPUSH
 218: LD_INT 8
 220: PPUSH
 221: CALL_OW 343
// end ; end_of_file
 225: LD_VAR 0 1
 229: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
 247: PPUSH
 248: PPUSH
 249: PPUSH
// uc_side := 2 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 2
 257: ST_TO_ADDR
// uc_nation := nation_arabian ;
 258: LD_ADDR_OWVAR 21
 262: PUSH
 263: LD_INT 2
 265: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: LD_INT 6
 274: PPUSH
 275: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 279: LD_ADDR_OWVAR 26
 283: PUSH
 284: LD_STRING Nicolas Vervecken
 286: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 287: LD_ADDR_OWVAR 33
 291: PUSH
 292: LD_STRING SecondCharsGal
 294: ST_TO_ADDR
// hc_face_number := 3 ;
 295: LD_ADDR_OWVAR 34
 299: PUSH
 300: LD_INT 3
 302: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 303: LD_ADDR_OWVAR 29
 307: PUSH
 308: LD_INT 11
 310: PUSH
 311: LD_INT 10
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: ST_TO_ADDR
// Vervecken := CreateHuman ;
 318: LD_ADDR_EXP 12
 322: PUSH
 323: CALL_OW 44
 327: ST_TO_ADDR
// InitHc ;
 328: CALL_OW 19
// uc_side := 8 ;
 332: LD_ADDR_OWVAR 20
 336: PUSH
 337: LD_INT 8
 339: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 340: LD_INT 23
 342: PPUSH
 343: CALL_OW 274
 347: PPUSH
 348: LD_INT 1
 350: PPUSH
 351: LD_INT 4000
 353: PUSH
 354: LD_INT 2500
 356: PUSH
 357: LD_INT 1250
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_OWVAR 67
 369: ARRAY
 370: PPUSH
 371: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 375: LD_INT 23
 377: PPUSH
 378: CALL_OW 274
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: LD_INT 300
 388: PPUSH
 389: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 393: LD_INT 23
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 3
 403: PPUSH
 404: LD_INT 100
 406: PUSH
 407: LD_INT 50
 409: PUSH
 410: LD_INT 30
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: LIST
 417: PUSH
 418: LD_OWVAR 67
 422: ARRAY
 423: PPUSH
 424: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 428: LD_ADDR_VAR 0 14
 432: PUSH
 433: LD_INT 23
 435: PPUSH
 436: CALL_OW 250
 440: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 441: LD_ADDR_VAR 0 15
 445: PUSH
 446: LD_INT 23
 448: PPUSH
 449: CALL_OW 251
 453: ST_TO_ADDR
// team := [ ] ;
 454: LD_ADDR_VAR 0 7
 458: PUSH
 459: EMPTY
 460: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 461: LD_ADDR_VAR 0 8
 465: PUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: LIST
 479: PUSH
 480: LD_OWVAR 67
 484: ARRAY
 485: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 486: LD_ADDR_VAR 0 9
 490: PUSH
 491: LD_INT 11
 493: PUSH
 494: LD_INT 9
 496: PUSH
 497: LD_INT 8
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_OWVAR 67
 509: ARRAY
 510: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 511: LD_ADDR_VAR 0 10
 515: PUSH
 516: LD_INT 3
 518: PUSH
 519: LD_INT 2
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_OWVAR 67
 534: ARRAY
 535: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 536: LD_ADDR_VAR 0 11
 540: PUSH
 541: LD_INT 5
 543: PUSH
 544: LD_INT 4
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PUSH
 555: LD_OWVAR 67
 559: ARRAY
 560: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 561: LD_ADDR_VAR 0 12
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 13
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 4
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 611: LD_ADDR_VAR 0 18
 615: PUSH
 616: LD_INT 13
 618: PUSH
 619: LD_INT 1
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: LD_INT 26
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 14
 636: PUSH
 637: LD_INT 3
 639: PUSH
 640: LD_INT 1
 642: PUSH
 643: LD_INT 25
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: PUSH
 652: LD_INT 14
 654: PUSH
 655: LD_INT 3
 657: PUSH
 658: LD_INT 5
 660: PUSH
 661: LD_INT 32
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 14
 672: PUSH
 673: LD_INT 3
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: LD_INT 31
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: LD_INT 14
 690: PUSH
 691: LD_INT 3
 693: PUSH
 694: LD_INT 2
 696: PUSH
 697: LD_INT 24
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 14
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 2
 714: PUSH
 715: LD_INT 25
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: PUSH
 724: LD_INT 13
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 24
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_VAR 0 18
 765: PUSH
 766: LD_OWVAR 67
 770: MINUS
 771: PUSH
 772: LD_INT 1
 774: PLUS
 775: PUSH
 776: FOR_TO
 777: IFFALSE 906
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 779: LD_ADDR_OWVAR 37
 783: PUSH
 784: LD_VAR 0 18
 788: PUSH
 789: LD_VAR 0 2
 793: ARRAY
 794: PUSH
 795: LD_INT 1
 797: ARRAY
 798: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 799: LD_ADDR_OWVAR 39
 803: PUSH
 804: LD_VAR 0 18
 808: PUSH
 809: LD_VAR 0 2
 813: ARRAY
 814: PUSH
 815: LD_INT 2
 817: ARRAY
 818: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 819: LD_ADDR_OWVAR 38
 823: PUSH
 824: LD_VAR 0 18
 828: PUSH
 829: LD_VAR 0 2
 833: ARRAY
 834: PUSH
 835: LD_INT 3
 837: ARRAY
 838: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 839: LD_ADDR_OWVAR 40
 843: PUSH
 844: LD_VAR 0 18
 848: PUSH
 849: LD_VAR 0 2
 853: ARRAY
 854: PUSH
 855: LD_INT 4
 857: ARRAY
 858: ST_TO_ADDR
// un := CreateVehicle ;
 859: LD_ADDR_VAR 0 6
 863: PUSH
 864: CALL_OW 45
 868: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 869: LD_VAR 0 6
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: LD_INT 5
 879: PPUSH
 880: CALL_OW 12
 884: PPUSH
 885: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 889: LD_VAR 0 6
 893: PPUSH
 894: LD_INT 7
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 49
// end ;
 904: GO 776
 906: POP
 907: POP
// for i = 1 to ape_num do
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: DOUBLE
 914: LD_INT 1
 916: DEC
 917: ST_TO_ADDR
 918: LD_VAR 0 13
 922: PUSH
 923: FOR_TO
 924: IFFALSE 991
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 926: LD_INT 0
 928: PPUSH
 929: LD_INT 16
 931: PUSH
 932: LD_INT 15
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: CALL_OW 12
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 8
 955: PPUSH
 956: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 960: LD_ADDR_VAR 0 7
 964: PUSH
 965: LD_VAR 0 7
 969: PPUSH
 970: LD_VAR 0 7
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: PPUSH
 979: CALL_OW 44
 983: PPUSH
 984: CALL_OW 2
 988: ST_TO_ADDR
// end ;
 989: GO 923
 991: POP
 992: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 993: LD_INT 1
 995: PPUSH
 996: LD_INT 1
 998: PPUSH
 999: LD_VAR 0 8
1003: PPUSH
1004: CALL_OW 380
// l1 := CreateHuman ;
1008: LD_ADDR_EXP 2
1012: PUSH
1013: CALL_OW 44
1017: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_INT 23
1025: PPUSH
1026: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
1030: LD_INT 1
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_VAR 0 8
1040: PPUSH
1041: CALL_OW 380
// l2 := CreateHuman ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: CALL_OW 44
1054: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1055: LD_EXP 3
1059: PPUSH
1060: LD_INT 23
1062: PPUSH
1063: CALL_OW 52
// for class = 1 to 4 do
1067: LD_ADDR_VAR 0 4
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 4
1079: PUSH
1080: FOR_TO
1081: IFFALSE 1180
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1083: LD_ADDR_VAR 0 2
1087: PUSH
1088: DOUBLE
1089: LD_INT 1
1091: DEC
1092: ST_TO_ADDR
1093: LD_VAR 0 9
1097: PUSH
1098: LD_VAR 0 10
1102: PUSH
1103: LD_VAR 0 11
1107: PUSH
1108: LD_VAR 0 12
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1176
// begin PrepareHuman ( false , class , skill ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_VAR 0 4
1135: PPUSH
1136: LD_VAR 0 8
1140: PPUSH
1141: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1145: LD_ADDR_VAR 0 7
1149: PUSH
1150: LD_VAR 0 7
1154: PPUSH
1155: LD_VAR 0 7
1159: PUSH
1160: LD_INT 1
1162: PLUS
1163: PPUSH
1164: CALL_OW 44
1168: PPUSH
1169: CALL_OW 2
1173: ST_TO_ADDR
// end ;
1174: GO 1125
1176: POP
1177: POP
1178: GO 1080
1180: POP
1181: POP
// for i in team do
1182: LD_ADDR_VAR 0 2
1186: PUSH
1187: LD_VAR 0 7
1191: PUSH
1192: FOR_IN
1193: IFFALSE 1669
// begin b := 0 ;
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 0
1202: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1203: LD_VAR 0 2
1207: PPUSH
1208: CALL_OW 257
1212: PUSH
1213: LD_INT 1
1215: DOUBLE
1216: EQUAL
1217: IFTRUE 1221
1219: GO 1328
1221: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1222: LD_ADDR_VAR 0 5
1226: PUSH
1227: LD_INT 22
1229: PUSH
1230: LD_OWVAR 20
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 30
1254: PUSH
1255: LD_INT 31
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 58
1269: PUSH
1270: EMPTY
1271: LIST
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PPUSH
1278: CALL_OW 69
1282: ST_TO_ADDR
// if not b then
1283: LD_VAR 0 5
1287: NOT
1288: IFFALSE 1326
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1290: LD_ADDR_VAR 0 5
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_OWVAR 20
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 30
1309: PUSH
1310: LD_INT 5
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PPUSH
1321: CALL_OW 69
1325: ST_TO_ADDR
// end ; class_engineer :
1326: GO 1567
1328: LD_INT 2
1330: DOUBLE
1331: EQUAL
1332: IFTRUE 1336
1334: GO 1375
1336: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1337: LD_ADDR_VAR 0 5
1341: PUSH
1342: LD_INT 22
1344: PUSH
1345: LD_OWVAR 20
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: LD_INT 30
1356: PUSH
1357: LD_INT 1
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 69
1372: ST_TO_ADDR
1373: GO 1567
1375: LD_INT 3
1377: DOUBLE
1378: EQUAL
1379: IFTRUE 1383
1381: GO 1472
1383: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1384: LD_ADDR_VAR 0 5
1388: PUSH
1389: LD_INT 22
1391: PUSH
1392: LD_OWVAR 20
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 21
1403: PUSH
1404: LD_INT 2
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: LD_INT 58
1413: PUSH
1414: EMPTY
1415: LIST
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: PPUSH
1422: CALL_OW 69
1426: ST_TO_ADDR
// if not b then
1427: LD_VAR 0 5
1431: NOT
1432: IFFALSE 1470
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1434: LD_ADDR_VAR 0 5
1438: PUSH
1439: LD_INT 22
1441: PUSH
1442: LD_OWVAR 20
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PUSH
1451: LD_INT 30
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PPUSH
1465: CALL_OW 69
1469: ST_TO_ADDR
// end ; class_scientistic :
1470: GO 1567
1472: LD_INT 4
1474: DOUBLE
1475: EQUAL
1476: IFTRUE 1480
1478: GO 1519
1480: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1481: LD_ADDR_VAR 0 5
1485: PUSH
1486: LD_INT 22
1488: PUSH
1489: LD_OWVAR 20
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 30
1500: PUSH
1501: LD_INT 8
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: ST_TO_ADDR
// end ; class_apeman_soldier :
1517: GO 1567
1519: LD_INT 15
1521: DOUBLE
1522: EQUAL
1523: IFTRUE 1527
1525: GO 1566
1527: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1528: LD_ADDR_VAR 0 5
1532: PUSH
1533: LD_INT 22
1535: PUSH
1536: LD_OWVAR 20
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 30
1547: PUSH
1548: LD_INT 5
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PPUSH
1559: CALL_OW 69
1563: ST_TO_ADDR
1564: GO 1567
1566: POP
// if b then
1567: LD_VAR 0 5
1571: IFFALSE 1642
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1573: LD_VAR 0 5
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PPUSH
1582: CALL_OW 266
1586: PUSH
1587: LD_INT 31
1589: EQUAL
1590: IFFALSE 1612
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1592: LD_VAR 0 2
1596: PPUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: PPUSH
1606: CALL 4808 0 2
1610: GO 1640
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_INT 1
1624: PPUSH
1625: LD_VAR 0 5
1629: PPUSH
1630: CALL_OW 12
1634: ARRAY
1635: PPUSH
1636: CALL_OW 52
1640: GO 1667
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_VAR 0 14
1651: PPUSH
1652: LD_VAR 0 15
1656: PPUSH
1657: LD_INT 15
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 50
// end ;
1667: GO 1192
1669: POP
1670: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1671: LD_ADDR_VAR 0 16
1675: PUSH
1676: LD_INT 26
1678: PUSH
1679: LD_INT 3
1681: PUSH
1682: LD_INT 2
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_OWVAR 67
1697: ARRAY
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 25
1705: PUSH
1706: LD_INT 5
1708: PUSH
1709: LD_INT 4
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_OWVAR 67
1724: ARRAY
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 24
1732: PUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 5
1738: PUSH
1739: LD_INT 4
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_OWVAR 67
1751: ARRAY
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 30
1759: PUSH
1760: LD_INT 2
1762: PUSH
1763: LD_INT 1
1765: PUSH
1766: LD_INT 1
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_OWVAR 67
1778: ARRAY
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_INT 22
1797: PUSH
1798: LD_OWVAR 20
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 30
1809: PUSH
1810: LD_INT 32
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PPUSH
1821: CALL_OW 69
1825: PUSH
1826: FOR_IN
1827: IFFALSE 2000
// begin if weapons then
1829: LD_VAR 0 16
1833: IFFALSE 1957
// begin k := rand ( 1 , weapons ) ;
1835: LD_ADDR_VAR 0 3
1839: PUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_VAR 0 16
1847: PPUSH
1848: CALL_OW 12
1852: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1853: LD_ADDR_VAR 0 17
1857: PUSH
1858: LD_VAR 0 16
1862: PUSH
1863: LD_VAR 0 3
1867: ARRAY
1868: PUSH
1869: LD_INT 1
1871: ARRAY
1872: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1873: LD_ADDR_VAR 0 16
1877: PUSH
1878: LD_VAR 0 16
1882: PPUSH
1883: LD_VAR 0 3
1887: PPUSH
1888: LD_INT 2
1890: PPUSH
1891: LD_VAR 0 16
1895: PUSH
1896: LD_VAR 0 3
1900: ARRAY
1901: PUSH
1902: LD_INT 2
1904: ARRAY
1905: PUSH
1906: LD_INT 1
1908: MINUS
1909: PPUSH
1910: CALL 4900 0 4
1914: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1915: LD_VAR 0 16
1919: PUSH
1920: LD_VAR 0 3
1924: ARRAY
1925: PUSH
1926: LD_INT 2
1928: ARRAY
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: IFFALSE 1955
// weapons := Delete ( weapons , k ) ;
1935: LD_ADDR_VAR 0 16
1939: PUSH
1940: LD_VAR 0 16
1944: PPUSH
1945: LD_VAR 0 3
1949: PPUSH
1950: CALL_OW 3
1954: ST_TO_ADDR
// end else
1955: GO 1984
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1957: LD_ADDR_VAR 0 17
1961: PUSH
1962: LD_INT 27
1964: PUSH
1965: LD_INT 23
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 1
1974: PPUSH
1975: LD_INT 2
1977: PPUSH
1978: CALL_OW 12
1982: ARRAY
1983: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1984: LD_VAR 0 2
1988: PPUSH
1989: LD_VAR 0 17
1993: PPUSH
1994: CALL_OW 431
// end ;
1998: GO 1826
2000: POP
2001: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
2002: LD_INT 1
2004: PPUSH
2005: LD_INT 1
2007: PPUSH
2008: LD_VAR 0 8
2012: PUSH
2013: LD_INT 1
2015: PLUS
2016: PPUSH
2017: CALL_OW 380
// hc_gallery := potter ;
2021: LD_ADDR_OWVAR 33
2025: PUSH
2026: LD_STRING potter
2028: ST_TO_ADDR
// hc_face_number := 1 ;
2029: LD_ADDR_OWVAR 34
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// hc_importance := 100 ;
2037: LD_ADDR_OWVAR 32
2041: PUSH
2042: LD_INT 100
2044: ST_TO_ADDR
// hc_name := Mike Gerste ;
2045: LD_ADDR_OWVAR 26
2049: PUSH
2050: LD_STRING Mike Gerste
2052: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2053: LD_ADDR_OWVAR 29
2057: PUSH
2058: LD_INT 10
2060: PUSH
2061: LD_INT 11
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: ST_TO_ADDR
// legion_commander := CreateHuman ;
2068: LD_ADDR_EXP 1
2072: PUSH
2073: CALL_OW 44
2077: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2078: LD_EXP 1
2082: PPUSH
2083: LD_INT 23
2085: PPUSH
2086: CALL_OW 52
// uc_side := 5 ;
2090: LD_ADDR_OWVAR 20
2094: PUSH
2095: LD_INT 5
2097: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2098: LD_INT 1
2100: PPUSH
2101: LD_INT 4
2103: PPUSH
2104: LD_VAR 0 8
2108: PPUSH
2109: CALL_OW 380
// hc_gallery := potter ;
2113: LD_ADDR_OWVAR 33
2117: PUSH
2118: LD_STRING potter
2120: ST_TO_ADDR
// hc_face_number := 2 ;
2121: LD_ADDR_OWVAR 34
2125: PUSH
2126: LD_INT 2
2128: ST_TO_ADDR
// hc_importance := 0 ;
2129: LD_ADDR_OWVAR 32
2133: PUSH
2134: LD_INT 0
2136: ST_TO_ADDR
// hc_name := George Potter ;
2137: LD_ADDR_OWVAR 26
2141: PUSH
2142: LD_STRING George Potter
2144: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2145: LD_ADDR_OWVAR 29
2149: PUSH
2150: LD_INT 12
2152: PUSH
2153: LD_INT 9
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: ST_TO_ADDR
// potter := CreateHuman ;
2160: LD_ADDR_EXP 4
2164: PUSH
2165: CALL_OW 44
2169: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2170: LD_EXP 4
2174: PPUSH
2175: LD_INT 4
2177: PPUSH
2178: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2182: LD_EXP 4
2186: PPUSH
2187: LD_INT 103
2189: PPUSH
2190: LD_INT 45
2192: PPUSH
2193: LD_INT 0
2195: PPUSH
2196: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2200: LD_EXP 4
2204: PPUSH
2205: LD_INT 23
2207: PPUSH
2208: CALL_OW 119
// InitHc ( ) ;
2212: CALL_OW 19
// end ; end_of_file
2216: LD_VAR 0 1
2220: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2221: LD_INT 0
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
2227: PPUSH
// uc_side := 5 ;
2228: LD_ADDR_OWVAR 20
2232: PUSH
2233: LD_INT 5
2235: ST_TO_ADDR
// uc_nation := nation_arabian ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 2
2243: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_OWVAR 20
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 30
2263: PUSH
2264: LD_INT 5
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 69
2279: ST_TO_ADDR
// for i = 1 to 3 do
2280: LD_ADDR_VAR 0 2
2284: PUSH
2285: DOUBLE
2286: LD_INT 1
2288: DEC
2289: ST_TO_ADDR
2290: LD_INT 3
2292: PUSH
2293: FOR_TO
2294: IFFALSE 2332
// begin PrepareHuman ( false , 2 , 6 ) ;
2296: LD_INT 0
2298: PPUSH
2299: LD_INT 2
2301: PPUSH
2302: LD_INT 6
2304: PPUSH
2305: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2309: CALL_OW 44
2313: PPUSH
2314: LD_INT 27
2316: PPUSH
2317: LD_INT 22
2319: PPUSH
2320: LD_INT 5
2322: PPUSH
2323: LD_INT 0
2325: PPUSH
2326: CALL_OW 50
// end ;
2330: GO 2293
2332: POP
2333: POP
// for i = 1 to 3 do
2334: LD_ADDR_VAR 0 2
2338: PUSH
2339: DOUBLE
2340: LD_INT 1
2342: DEC
2343: ST_TO_ADDR
2344: LD_INT 3
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2383
// begin PrepareHuman ( false , 1 , 6 ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_INT 6
2358: PPUSH
2359: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2363: CALL_OW 44
2367: PPUSH
2368: LD_VAR 0 4
2372: PUSH
2373: LD_INT 1
2375: ARRAY
2376: PPUSH
2377: CALL_OW 52
// end ;
2381: GO 2347
2383: POP
2384: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: LD_INT 22
2392: PUSH
2393: LD_OWVAR 20
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PUSH
2402: LD_INT 2
2404: PUSH
2405: LD_INT 30
2407: PUSH
2408: LD_INT 31
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 30
2417: PUSH
2418: LD_INT 32
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2527
// begin PrepareHuman ( false , 1 , 6 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 1
2447: PPUSH
2448: LD_INT 6
2450: PPUSH
2451: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2455: CALL_OW 44
2459: PPUSH
2460: LD_VAR 0 2
2464: PPUSH
2465: CALL 4808 0 2
// if GetBType ( i ) = b_bunker then
2469: LD_VAR 0 2
2473: PPUSH
2474: CALL_OW 266
2478: PUSH
2479: LD_INT 32
2481: EQUAL
2482: IFFALSE 2525
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2484: LD_VAR 0 2
2488: PPUSH
2489: LD_INT 27
2491: PUSH
2492: LD_INT 25
2494: PUSH
2495: LD_INT 24
2497: PUSH
2498: LD_INT 28
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: PUSH
2507: LD_VAR 0 2
2511: PUSH
2512: LD_INT 4
2514: MOD
2515: PUSH
2516: LD_INT 1
2518: PLUS
2519: ARRAY
2520: PPUSH
2521: CALL_OW 431
// end ;
2525: GO 2439
2527: POP
2528: POP
// for i = 1 to 3 do
2529: LD_ADDR_VAR 0 2
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_INT 3
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2660
// begin vc_chassis := ar_half_tracked ;
2545: LD_ADDR_OWVAR 37
2549: PUSH
2550: LD_INT 14
2552: ST_TO_ADDR
// vc_engine := engine_solar ;
2553: LD_ADDR_OWVAR 39
2557: PUSH
2558: LD_INT 2
2560: ST_TO_ADDR
// vc_control := control_manual ;
2561: LD_ADDR_OWVAR 38
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2569: LD_ADDR_OWVAR 40
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 27
2579: PUSH
2580: LD_INT 26
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_VAR 0 2
2592: ARRAY
2593: ST_TO_ADDR
// un := CreateVehicle ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 45
2603: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2616: LD_VAR 0 3
2620: PPUSH
2621: LD_INT 8
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 3
2636: PPUSH
2637: LD_INT 7
2639: PPUSH
2640: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2644: CALL_OW 44
2648: PPUSH
2649: LD_VAR 0 3
2653: PPUSH
2654: CALL_OW 52
// end ;
2658: GO 2542
2660: POP
2661: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: LD_INT 6
2670: PPUSH
2671: CALL_OW 380
// al_commander := CreateHuman ;
2675: LD_ADDR_EXP 5
2679: PUSH
2680: CALL_OW 44
2684: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2685: LD_EXP 5
2689: PPUSH
2690: LD_INT 22
2692: PUSH
2693: LD_OWVAR 20
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 30
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: PUSH
2721: LD_INT 1
2723: ARRAY
2724: PPUSH
2725: CALL_OW 52
// InitHc ( ) ;
2729: CALL_OW 19
// end ;
2733: LD_VAR 0 1
2737: RET
// export function ChangeSide ( ) ; var i ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: LD_INT 22
2749: PUSH
2750: LD_INT 5
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 69
2761: PUSH
2762: FOR_IN
2763: IFFALSE 2779
// SetSide ( i , 8 ) ;
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_INT 8
2772: PPUSH
2773: CALL_OW 235
2777: GO 2762
2779: POP
2780: POP
// end ;
2781: LD_VAR 0 1
2785: RET
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2786: LD_INT 22
2788: PUSH
2789: LD_INT 5
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IFFALSE 3314
2802: GO 2804
2804: DISABLE
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
// begin enable ;
2813: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: LD_INT 22
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 2
2831: PUSH
2832: LD_INT 21
2834: PUSH
2835: LD_INT 1
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 21
2844: PUSH
2845: LD_INT 2
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PPUSH
2861: CALL_OW 69
2865: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2866: LD_ADDR_VAR 0 5
2870: PUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 5
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 30
2883: PUSH
2884: LD_INT 32
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: LD_INT 24
2896: PUSH
2897: LD_INT 1000
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 69
2917: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2918: LD_ADDR_VAR 0 6
2922: PUSH
2923: LD_VAR 0 2
2927: PPUSH
2928: LD_INT 3
2930: PUSH
2931: LD_INT 54
2933: PUSH
2934: EMPTY
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 25
2943: PUSH
2944: LD_INT 3
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PPUSH
2955: CALL_OW 72
2959: ST_TO_ADDR
// if not list then
2960: LD_VAR 0 2
2964: NOT
2965: IFFALSE 2969
// exit ;
2967: GO 3314
// for i in list do
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 2
2978: PUSH
2979: FOR_IN
2980: IFFALSE 3312
// begin if b then
2982: LD_VAR 0 5
2986: IFFALSE 3065
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2988: LD_ADDR_VAR 0 4
2992: PUSH
2993: LD_VAR 0 2
2997: PPUSH
2998: LD_INT 25
3000: PUSH
3001: LD_INT 2
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PPUSH
3008: CALL_OW 72
3012: PUSH
3013: FOR_IN
3014: IFFALSE 3063
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
3016: LD_VAR 0 4
3020: PPUSH
3021: CALL_OW 314
3025: NOT
3026: PUSH
3027: LD_VAR 0 1
3031: PPUSH
3032: CALL_OW 110
3036: PUSH
3037: LD_INT 7
3039: NONEQUAL
3040: AND
3041: IFFALSE 3061
// ComRepairBuilding ( j , b [ 1 ] ) ;
3043: LD_VAR 0 4
3047: PPUSH
3048: LD_VAR 0 5
3052: PUSH
3053: LD_INT 1
3055: ARRAY
3056: PPUSH
3057: CALL_OW 130
3061: GO 3013
3063: POP
3064: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 256
3074: PUSH
3075: LD_INT 500
3077: LESS
3078: PUSH
3079: LD_VAR 0 1
3083: PPUSH
3084: CALL_OW 110
3088: PUSH
3089: LD_INT 7
3091: EQUAL
3092: NOT
3093: AND
3094: IFFALSE 3144
// begin ComMoveToArea ( i , guard_hill ) ;
3096: LD_VAR 0 1
3100: PPUSH
3101: LD_INT 11
3103: PPUSH
3104: CALL_OW 113
// SetTag ( i , 7 ) ;
3108: LD_VAR 0 1
3112: PPUSH
3113: LD_INT 7
3115: PPUSH
3116: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3120: LD_VAR 0 1
3124: PPUSH
3125: CALL_OW 247
3129: PUSH
3130: LD_INT 2
3132: EQUAL
3133: IFFALSE 3144
// begin AddComExitVehicle ( i ) ;
3135: LD_VAR 0 1
3139: PPUSH
3140: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3144: LD_VAR 0 1
3148: PPUSH
3149: CALL_OW 256
3153: PUSH
3154: LD_INT 1000
3156: EQUAL
3157: PUSH
3158: LD_VAR 0 1
3162: PPUSH
3163: CALL_OW 110
3167: PUSH
3168: LD_INT 7
3170: EQUAL
3171: AND
3172: PUSH
3173: LD_VAR 0 1
3177: PPUSH
3178: CALL_OW 310
3182: NOT
3183: AND
3184: PUSH
3185: LD_VAR 0 6
3189: AND
3190: IFFALSE 3218
// begin SetTag ( i , 0 ) ;
3192: LD_VAR 0 1
3196: PPUSH
3197: LD_INT 0
3199: PPUSH
3200: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3204: LD_VAR 0 6
3208: PPUSH
3209: LD_VAR 0 1
3213: PPUSH
3214: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3218: LD_VAR 0 1
3222: PPUSH
3223: CALL_OW 247
3227: PUSH
3228: LD_INT 2
3230: EQUAL
3231: PUSH
3232: LD_VAR 0 1
3236: PPUSH
3237: CALL_OW 110
3241: PUSH
3242: LD_INT 7
3244: NONEQUAL
3245: AND
3246: PUSH
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 314
3256: NOT
3257: AND
3258: IFFALSE 3310
// if FilterAllUnits ( [ f_side , 7 ] ) then
3260: LD_INT 22
3262: PUSH
3263: LD_INT 7
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PPUSH
3270: CALL_OW 69
3274: IFFALSE 3310
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3276: LD_VAR 0 1
3280: PPUSH
3281: LD_INT 22
3283: PUSH
3284: LD_INT 7
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 69
3295: PPUSH
3296: LD_VAR 0 1
3300: PPUSH
3301: CALL_OW 74
3305: PPUSH
3306: CALL_OW 115
// end ;
3310: GO 2979
3312: POP
3313: POP
// end ; end_of_file
3314: PPOPN 6
3316: END
// export function Game ; var i , val , areas , wave ; begin
3317: LD_INT 0
3319: PPUSH
3320: PPUSH
3321: PPUSH
3322: PPUSH
3323: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3324: LD_ADDR_VAR 0 4
3328: PUSH
3329: LD_INT 1
3331: PUSH
3332: LD_INT 2
3334: PUSH
3335: LD_INT 3
3337: PUSH
3338: LD_INT 4
3340: PUSH
3341: LD_INT 5
3343: PUSH
3344: LD_INT 6
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: ST_TO_ADDR
// val := [ 5 , 6 , 7 ] [ Difficulty ] ;
3355: LD_ADDR_VAR 0 3
3359: PUSH
3360: LD_INT 5
3362: PUSH
3363: LD_INT 6
3365: PUSH
3366: LD_INT 7
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: LIST
3373: PUSH
3374: LD_OWVAR 67
3378: ARRAY
3379: ST_TO_ADDR
// wave := 1 ;
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: LD_INT 1
3387: ST_TO_ADDR
// while not game_over do
3388: LD_EXP 7
3392: NOT
3393: IFFALSE 3549
// begin repeat begin Wait ( 0 0$01 ) ;
3395: LD_INT 35
3397: PPUSH
3398: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3402: LD_ADDR_EXP 11
3406: PUSH
3407: LD_EXP 11
3411: PUSH
3412: LD_INT 35
3414: PLUS
3415: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3416: LD_INT 22
3418: PUSH
3419: LD_INT 7
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PPUSH
3426: CALL_OW 69
3430: PUSH
3431: LD_INT 10
3433: LESS
3434: PUSH
3435: LD_EXP 11
3439: PUSH
3440: LD_INT 21000
3442: GREATEREQUAL
3443: OR
3444: IFFALSE 3395
// wave_time := 0 0$00 ;
3446: LD_ADDR_EXP 11
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3454: LD_INT 5250
3456: PPUSH
3457: CALL_OW 67
// if not ignore_wave then
3461: LD_EXP 15
3465: NOT
3466: IFFALSE 3539
// begin for i = 1 to areas do
3468: LD_ADDR_VAR 0 2
3472: PUSH
3473: DOUBLE
3474: LD_INT 1
3476: DEC
3477: ST_TO_ADDR
3478: LD_VAR 0 4
3482: PUSH
3483: FOR_TO
3484: IFFALSE 3521
// begin SpawnPotter ( wave + val , areas [ i ] ) ;
3486: LD_VAR 0 5
3490: PUSH
3491: LD_VAR 0 3
3495: PLUS
3496: PPUSH
3497: LD_VAR 0 4
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PPUSH
3508: CALL 3554 0 2
// Wait ( 0 0$10 ) ;
3512: LD_INT 350
3514: PPUSH
3515: CALL_OW 67
// end ;
3519: GO 3483
3521: POP
3522: POP
// wave := wave + 1 ;
3523: LD_ADDR_VAR 0 5
3527: PUSH
3528: LD_VAR 0 5
3532: PUSH
3533: LD_INT 1
3535: PLUS
3536: ST_TO_ADDR
// end else
3537: GO 3547
// ignore_wave := false ;
3539: LD_ADDR_EXP 15
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// end ;
3547: GO 3388
// end ;
3549: LD_VAR 0 1
3553: RET
// export function SpawnPotter ( val , area ) ; var i , v , un , class ; begin
3554: LD_INT 0
3556: PPUSH
3557: PPUSH
3558: PPUSH
3559: PPUSH
3560: PPUSH
// uc_side := 7 ;
3561: LD_ADDR_OWVAR 20
3565: PUSH
3566: LD_INT 7
3568: ST_TO_ADDR
// uc_nation := 2 ;
3569: LD_ADDR_OWVAR 21
3573: PUSH
3574: LD_INT 2
3576: ST_TO_ADDR
// v := 10 + ( tick div 5 5$00 ) ;
3577: LD_ADDR_VAR 0 5
3581: PUSH
3582: LD_INT 10
3584: PUSH
3585: LD_OWVAR 1
3589: PUSH
3590: LD_INT 10500
3592: DIV
3593: PLUS
3594: ST_TO_ADDR
// if v > 25 then
3595: LD_VAR 0 5
3599: PUSH
3600: LD_INT 25
3602: GREATER
3603: IFFALSE 3613
// v := 25 ;
3605: LD_ADDR_VAR 0 5
3609: PUSH
3610: LD_INT 25
3612: ST_TO_ADDR
// InitHc ( ) ;
3613: CALL_OW 19
// hc_gallery :=  ;
3617: LD_ADDR_OWVAR 33
3621: PUSH
3622: LD_STRING 
3624: ST_TO_ADDR
// hc_importance := 0 ;
3625: LD_ADDR_OWVAR 32
3629: PUSH
3630: LD_INT 0
3632: ST_TO_ADDR
// hc_name :=  ;
3633: LD_ADDR_OWVAR 26
3637: PUSH
3638: LD_STRING 
3640: ST_TO_ADDR
// hc_attr := [ v , v ] ;
3641: LD_ADDR_OWVAR 29
3645: PUSH
3646: LD_VAR 0 5
3650: PUSH
3651: LD_VAR 0 5
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: ST_TO_ADDR
// if val > 35 then
3660: LD_VAR 0 1
3664: PUSH
3665: LD_INT 35
3667: GREATER
3668: IFFALSE 3678
// val := 35 ;
3670: LD_ADDR_VAR 0 1
3674: PUSH
3675: LD_INT 35
3677: ST_TO_ADDR
// for i = 1 to val do
3678: LD_ADDR_VAR 0 4
3682: PUSH
3683: DOUBLE
3684: LD_INT 1
3686: DEC
3687: ST_TO_ADDR
3688: LD_VAR 0 1
3692: PUSH
3693: FOR_TO
3694: IFFALSE 3905
// begin if i mod 9 = 0 then
3696: LD_VAR 0 4
3700: PUSH
3701: LD_INT 9
3703: MOD
3704: PUSH
3705: LD_INT 0
3707: EQUAL
3708: IFFALSE 3720
// class := class_apeman_kamikaze else
3710: LD_ADDR_VAR 0 7
3714: PUSH
3715: LD_INT 17
3717: ST_TO_ADDR
3718: GO 3752
// if i mod 4 = 0 then
3720: LD_VAR 0 4
3724: PUSH
3725: LD_INT 4
3727: MOD
3728: PUSH
3729: LD_INT 0
3731: EQUAL
3732: IFFALSE 3744
// class := class_apeman_soldier else
3734: LD_ADDR_VAR 0 7
3738: PUSH
3739: LD_INT 15
3741: ST_TO_ADDR
3742: GO 3752
// class := class_apeman ;
3744: LD_ADDR_VAR 0 7
3748: PUSH
3749: LD_INT 12
3751: ST_TO_ADDR
// if i mod 6 = 0 then
3752: LD_VAR 0 4
3756: PUSH
3757: LD_INT 6
3759: MOD
3760: PUSH
3761: LD_INT 0
3763: EQUAL
3764: IFFALSE 3837
// begin vc_chassis := ar_half_tracked ;
3766: LD_ADDR_OWVAR 37
3770: PUSH
3771: LD_INT 14
3773: ST_TO_ADDR
// vc_control := control_apeman ;
3774: LD_ADDR_OWVAR 38
3778: PUSH
3779: LD_INT 5
3781: ST_TO_ADDR
// vc_engine := engine_siberite ;
3782: LD_ADDR_OWVAR 39
3786: PUSH
3787: LD_INT 3
3789: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb , ar_bio_bomb ] [ rand ( 1 , 4 ) ] ;
3790: LD_ADDR_OWVAR 40
3794: PUSH
3795: LD_INT 28
3797: PUSH
3798: LD_INT 27
3800: PUSH
3801: LD_INT 29
3803: PUSH
3804: LD_INT 91
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 1
3815: PPUSH
3816: LD_INT 4
3818: PPUSH
3819: CALL_OW 12
3823: ARRAY
3824: ST_TO_ADDR
// un := CreateVehicle ;
3825: LD_ADDR_VAR 0 6
3829: PUSH
3830: CALL_OW 45
3834: ST_TO_ADDR
// end else
3835: GO 3862
// begin PrepareHuman ( sex_male , class , 10 ) ;
3837: LD_INT 1
3839: PPUSH
3840: LD_VAR 0 7
3844: PPUSH
3845: LD_INT 10
3847: PPUSH
3848: CALL_OW 380
// un := CreateHuman ;
3852: LD_ADDR_VAR 0 6
3856: PUSH
3857: CALL_OW 44
3861: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3862: LD_VAR 0 6
3866: PPUSH
3867: LD_VAR 0 2
3871: PPUSH
3872: LD_INT 0
3874: PPUSH
3875: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3879: LD_VAR 0 6
3883: PPUSH
3884: CALL_OW 250
3888: PPUSH
3889: LD_VAR 0 6
3893: PPUSH
3894: CALL_OW 251
3898: PPUSH
3899: CALL_OW 494
// end ;
3903: GO 3693
3905: POP
3906: POP
// end ;
3907: LD_VAR 0 3
3911: RET
// every 0 0$3 trigger alert and not game_over do var i , list , enemy ;
3912: LD_EXP 6
3916: PUSH
3917: LD_EXP 7
3921: NOT
3922: AND
3923: IFFALSE 4042
3925: GO 3927
3927: DISABLE
3928: LD_INT 0
3930: PPUSH
3931: PPUSH
3932: PPUSH
// begin enable ;
3933: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3934: LD_ADDR_VAR 0 2
3938: PUSH
3939: LD_INT 22
3941: PUSH
3942: LD_INT 7
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PPUSH
3949: CALL_OW 69
3953: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
3954: LD_ADDR_VAR 0 3
3958: PUSH
3959: LD_INT 81
3961: PUSH
3962: LD_INT 7
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PPUSH
3969: CALL_OW 69
3973: ST_TO_ADDR
// if not list then
3974: LD_VAR 0 2
3978: NOT
3979: IFFALSE 3983
// exit ;
3981: GO 4042
// for i in list do
3983: LD_ADDR_VAR 0 1
3987: PUSH
3988: LD_VAR 0 2
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4040
// begin if enemy then
3996: LD_VAR 0 3
4000: IFFALSE 4038
// if not HasTask ( i ) then
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 314
4011: NOT
4012: IFFALSE 4038
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4014: LD_VAR 0 1
4018: PPUSH
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: CALL_OW 74
4033: PPUSH
4034: CALL_OW 115
// end ;
4038: GO 3993
4040: POP
4041: POP
// end ; end_of_file
4042: PPOPN 3
4044: END
// export function Action ; begin
4045: LD_INT 0
4047: PPUSH
// InGameOn ;
4048: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4052: LD_INT 23
4054: PPUSH
4055: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4059: LD_EXP 1
4063: PPUSH
4064: LD_STRING DL-1
4066: PPUSH
4067: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4071: LD_EXP 2
4075: PPUSH
4076: LD_STRING DA-1
4078: PPUSH
4079: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4083: LD_EXP 3
4087: PPUSH
4088: LD_STRING DA-2
4090: PPUSH
4091: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4095: LD_EXP 1
4099: PPUSH
4100: LD_STRING DL-2
4102: PPUSH
4103: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4107: LD_EXP 3
4111: PPUSH
4112: LD_STRING DA-3
4114: PPUSH
4115: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4119: LD_EXP 1
4123: PPUSH
4124: LD_STRING DL-3
4126: PPUSH
4127: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4131: LD_EXP 2
4135: PPUSH
4136: LD_STRING DA-4
4138: PPUSH
4139: CALL_OW 88
// if not dialogue_skipped then
4143: LD_OWVAR 59
4147: NOT
4148: IFFALSE 4233
// begin Wait ( 0 0$01 ) ;
4150: LD_INT 35
4152: PPUSH
4153: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4157: LD_EXP 2
4161: PUSH
4162: LD_EXP 3
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: PPUSH
4171: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4175: LD_EXP 2
4179: PPUSH
4180: LD_INT 107
4182: PPUSH
4183: LD_INT 53
4185: PPUSH
4186: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4190: LD_EXP 3
4194: PPUSH
4195: LD_INT 108
4197: PPUSH
4198: LD_INT 53
4200: PPUSH
4201: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4205: LD_EXP 2
4209: PPUSH
4210: LD_EXP 4
4214: PPUSH
4215: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4219: LD_EXP 3
4223: PPUSH
4224: LD_EXP 4
4228: PPUSH
4229: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4233: LD_INT 35
4235: PPUSH
4236: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4240: LD_EXP 2
4244: PPUSH
4245: LD_INT 107
4247: PPUSH
4248: LD_INT 53
4250: PPUSH
4251: CALL_OW 307
4255: PUSH
4256: LD_OWVAR 59
4260: OR
4261: IFFALSE 4233
// if not dialogue_skipped then
4263: LD_OWVAR 59
4267: NOT
4268: IFFALSE 4369
// begin ComTurnUnit ( potter , l1 ) ;
4270: LD_EXP 4
4274: PPUSH
4275: LD_EXP 2
4279: PPUSH
4280: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4284: LD_INT 10
4286: PPUSH
4287: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4291: LD_EXP 4
4295: PPUSH
4296: LD_INT 108
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 0
4304: PPUSH
4305: LD_INT 0
4307: PPUSH
4308: CALL_OW 483
// Wait ( 0 0$01 ) ;
4312: LD_INT 35
4314: PPUSH
4315: CALL_OW 67
// RemoveUnit ( potter ) ;
4319: LD_EXP 4
4323: PPUSH
4324: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4328: LD_EXP 2
4332: PPUSH
4333: LD_STRING DA-5
4335: PPUSH
4336: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4340: LD_EXP 3
4344: PPUSH
4345: LD_STRING DA-6
4347: PPUSH
4348: CALL_OW 88
// Wait ( 0 0$02 ) ;
4352: LD_INT 70
4354: PPUSH
4355: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4359: LD_INT 25
4361: PPUSH
4362: LD_INT 19
4364: PPUSH
4365: CALL_OW 84
// end ; SpawnPotter ( 20 , north_west_1 ) ;
4369: LD_INT 20
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: CALL 3554 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4379: LD_EXP 5
4383: PPUSH
4384: LD_STRING DLa-1
4386: PPUSH
4387: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4391: LD_EXP 1
4395: PPUSH
4396: LD_STRING DL-5
4398: PPUSH
4399: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4403: LD_INT 23
4405: PPUSH
4406: CALL_OW 87
// InGameOff ;
4410: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4414: LD_STRING C1
4416: PPUSH
4417: CALL_OW 337
// alert := true ;
4421: LD_ADDR_EXP 6
4425: PUSH
4426: LD_INT 1
4428: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4429: LD_EXP 5
4433: PPUSH
4434: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4438: LD_EXP 5
4442: PPUSH
4443: LD_INT 11
4445: PPUSH
4446: CALL_OW 173
// Wait ( 0 0$30 ) ;
4450: LD_INT 1050
4452: PPUSH
4453: CALL_OW 67
// SpawnPotter ( 10 , north_4 ) ;
4457: LD_INT 10
4459: PPUSH
4460: LD_INT 4
4462: PPUSH
4463: CALL 3554 0 2
// Wait ( 0 0$35 ) ;
4467: LD_INT 1225
4469: PPUSH
4470: CALL_OW 67
// SpawnPotter ( 10 , east_5 ) ;
4474: LD_INT 10
4476: PPUSH
4477: LD_INT 5
4479: PPUSH
4480: CALL 3554 0 2
// Wait ( 0 0$03 ) ;
4484: LD_INT 105
4486: PPUSH
4487: CALL_OW 67
// Game ;
4491: CALL 3317 0 0
// end ;
4495: LD_VAR 0 1
4499: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 1500 do var tmp , i ;
4500: LD_INT 22
4502: PUSH
4503: LD_INT 7
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PUSH
4515: LD_INT 0
4517: EQUAL
4518: PUSH
4519: LD_EXP 10
4523: PUSH
4524: LD_INT 1500
4526: GREATEREQUAL
4527: AND
4528: IFFALSE 4756
4530: GO 4532
4532: DISABLE
4533: LD_INT 0
4535: PPUSH
4536: PPUSH
// begin DialogueOn ;
4537: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4541: LD_EXP 12
4545: PPUSH
4546: LD_STRING DVr-1
4548: PPUSH
4549: CALL_OW 94
// DialogueOff ;
4553: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4557: LD_STRING QBonusInfo
4559: PPUSH
4560: CALL_OW 97
4564: PUSH
4565: LD_INT 1
4567: DOUBLE
4568: EQUAL
4569: IFTRUE 4573
4571: GO 4584
4573: POP
// bonus_active := true ; end ;
4574: LD_ADDR_EXP 13
4578: PUSH
4579: LD_INT 1
4581: ST_TO_ADDR
4582: GO 4585
4584: POP
// bonus_num := 4 ;
4585: LD_ADDR_EXP 14
4589: PUSH
4590: LD_INT 4
4592: ST_TO_ADDR
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ;
4593: LD_OWVAR 2
4597: PPUSH
4598: LD_INT 12
4600: PPUSH
4601: LD_INT 2
4603: PPUSH
4604: LD_INT 23
4606: PPUSH
4607: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4611: LD_ADDR_VAR 0 1
4615: PUSH
4616: LD_INT 500
4618: PUSH
4619: LD_INT 3500
4621: PUSH
4622: LD_INT 5750
4624: PUSH
4625: LD_INT 10000
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4634: LD_INT 10500
4636: PUSH
4637: LD_INT 12600
4639: PUSH
4640: LD_INT 14700
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: PUSH
4648: LD_OWVAR 67
4652: ARRAY
4653: PPUSH
4654: CALL_OW 67
// for i = 1 to tmp do
4658: LD_ADDR_VAR 0 2
4662: PUSH
4663: DOUBLE
4664: LD_INT 1
4666: DEC
4667: ST_TO_ADDR
4668: LD_VAR 0 1
4672: PUSH
4673: FOR_TO
4674: IFFALSE 4706
// if points >= tmp [ i ] then
4676: LD_EXP 10
4680: PUSH
4681: LD_VAR 0 1
4685: PUSH
4686: LD_VAR 0 2
4690: ARRAY
4691: GREATEREQUAL
4692: IFFALSE 4704
// bonus_num := i ;
4694: LD_ADDR_EXP 14
4698: PUSH
4699: LD_VAR 0 2
4703: ST_TO_ADDR
4704: GO 4673
4706: POP
4707: POP
// case Query ( QBonusInfo ) of 1 :
4708: LD_STRING QBonusInfo
4710: PPUSH
4711: CALL_OW 97
4715: PUSH
4716: LD_INT 1
4718: DOUBLE
4719: EQUAL
4720: IFTRUE 4724
4722: GO 4745
4724: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4725: LD_OWVAR 2
4729: PPUSH
4730: LD_INT 12
4732: PPUSH
4733: LD_INT 2
4735: PPUSH
4736: LD_INT 23
4738: PPUSH
4739: CALL_OW 468
4743: GO 4746
4745: POP
// until points >= 15000 ;
4746: LD_EXP 10
4750: PUSH
4751: LD_INT 15000
4753: GREATEREQUAL
4754: IFFALSE 4634
// end ;
4756: PPOPN 2
4758: END
// export function Win ; begin
4759: LD_INT 0
4761: PPUSH
// AddMedal ( med , 1 ) ;
4762: LD_STRING med
4764: PPUSH
4765: LD_INT 1
4767: PPUSH
4768: CALL_OW 101
// AddMedal ( med , 1 ) ;
4772: LD_STRING med
4774: PPUSH
4775: LD_INT 1
4777: PPUSH
4778: CALL_OW 101
// AddMedal ( med , 1 ) ;
4782: LD_STRING med
4784: PPUSH
4785: LD_INT 1
4787: PPUSH
4788: CALL_OW 101
// GiveMedals ( MAIN ) ;
4792: LD_STRING MAIN
4794: PPUSH
4795: CALL_OW 102
// YouWin ;
4799: CALL_OW 103
// end ; end_of_file
4803: LD_VAR 0 1
4807: RET
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
4808: LD_INT 0
4810: PPUSH
4811: PPUSH
// dir := GetDir ( b ) ;
4812: LD_ADDR_VAR 0 4
4816: PUSH
4817: LD_VAR 0 2
4821: PPUSH
4822: CALL_OW 254
4826: ST_TO_ADDR
// if dir < 3 then
4827: LD_VAR 0 4
4831: PUSH
4832: LD_INT 3
4834: LESS
4835: IFFALSE 4853
// dir := dir + 3 else
4837: LD_ADDR_VAR 0 4
4841: PUSH
4842: LD_VAR 0 4
4846: PUSH
4847: LD_INT 3
4849: PLUS
4850: ST_TO_ADDR
4851: GO 4867
// dir := dir - 3 ;
4853: LD_ADDR_VAR 0 4
4857: PUSH
4858: LD_VAR 0 4
4862: PUSH
4863: LD_INT 3
4865: MINUS
4866: ST_TO_ADDR
// SetDir ( un , dir ) ;
4867: LD_VAR 0 1
4871: PPUSH
4872: LD_VAR 0 4
4876: PPUSH
4877: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4881: LD_VAR 0 1
4885: PPUSH
4886: LD_VAR 0 2
4890: PPUSH
4891: CALL_OW 52
// end ;
4895: LD_VAR 0 3
4899: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
4900: LD_INT 0
4902: PPUSH
4903: PPUSH
4904: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
4905: LD_ADDR_VAR 0 7
4909: PUSH
4910: LD_VAR 0 1
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_VAR 0 4
4930: PPUSH
4931: CALL_OW 1
4935: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
4936: LD_ADDR_VAR 0 1
4940: PUSH
4941: LD_VAR 0 1
4945: PPUSH
4946: LD_VAR 0 2
4950: PPUSH
4951: LD_VAR 0 7
4955: PPUSH
4956: CALL_OW 1
4960: ST_TO_ADDR
// result := tab ;
4961: LD_ADDR_VAR 0 5
4965: PUSH
4966: LD_VAR 0 1
4970: ST_TO_ADDR
// end ;
4971: LD_VAR 0 5
4975: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
4976: LD_INT 0
4978: PPUSH
4979: PPUSH
4980: PPUSH
// if not GetControl ( veh ) = control_manual then
4981: LD_VAR 0 1
4985: PPUSH
4986: CALL_OW 263
4990: PUSH
4991: LD_INT 1
4993: EQUAL
4994: NOT
4995: IFFALSE 5007
// result := false else
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: LD_INT 0
5004: ST_TO_ADDR
5005: GO 5152
// if veh in FilterAllUnits ( [ f_empty ] ) then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 58
5014: PUSH
5015: EMPTY
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: IN
5023: IFFALSE 5035
// result := false else
5025: LD_ADDR_VAR 0 2
5029: PUSH
5030: LD_INT 0
5032: ST_TO_ADDR
5033: GO 5152
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5035: LD_ADDR_VAR 0 4
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_VAR 0 1
5047: PPUSH
5048: CALL_OW 255
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 55
5059: PUSH
5060: EMPTY
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 69
5071: ST_TO_ADDR
// if not filter then
5072: LD_VAR 0 4
5076: NOT
5077: IFFALSE 5089
// result := false else
5079: LD_ADDR_VAR 0 2
5083: PUSH
5084: LD_INT 0
5086: ST_TO_ADDR
5087: GO 5152
// for i = 1 to filter do
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: DOUBLE
5095: LD_INT 1
5097: DEC
5098: ST_TO_ADDR
5099: LD_VAR 0 4
5103: PUSH
5104: FOR_TO
5105: IFFALSE 5150
// if IsDriver ( filter [ i ] ) = veh then
5107: LD_VAR 0 4
5111: PUSH
5112: LD_VAR 0 3
5116: ARRAY
5117: PPUSH
5118: CALL 62227 0 1
5122: PUSH
5123: LD_VAR 0 1
5127: EQUAL
5128: IFFALSE 5148
// begin result := filter [ i ] ;
5130: LD_ADDR_VAR 0 2
5134: PUSH
5135: LD_VAR 0 4
5139: PUSH
5140: LD_VAR 0 3
5144: ARRAY
5145: ST_TO_ADDR
// break ;
5146: GO 5150
// end ;
5148: GO 5104
5150: POP
5151: POP
// end ; end ; end_of_file
5152: LD_VAR 0 2
5156: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: CALL 22854 0 1
// if un = legion_commander then
5166: LD_VAR 0 1
5170: PUSH
5171: LD_EXP 1
5175: EQUAL
5176: IFFALSE 5185
// YouLost ( commanderDied ) ;
5178: LD_STRING commanderDied
5180: PPUSH
5181: CALL_OW 104
// if un in [ legion_commander , main_base ] then
5185: LD_VAR 0 1
5189: PUSH
5190: LD_EXP 1
5194: PUSH
5195: LD_INT 23
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: IN
5202: IFFALSE 5212
// game_over := true ;
5204: LD_ADDR_EXP 7
5208: PUSH
5209: LD_INT 1
5211: ST_TO_ADDR
// if un = al_commander then
5212: LD_VAR 0 1
5216: PUSH
5217: LD_EXP 5
5221: EQUAL
5222: IFFALSE 5228
// ChangeSide ( ) ;
5224: CALL 2738 0 0
// if GetSide ( un ) = 7 then
5228: LD_VAR 0 1
5232: PPUSH
5233: CALL_OW 255
5237: PUSH
5238: LD_INT 7
5240: EQUAL
5241: IFFALSE 5359
// begin if GetClass ( un ) = class_apeman then
5243: LD_VAR 0 1
5247: PPUSH
5248: CALL_OW 257
5252: PUSH
5253: LD_INT 12
5255: EQUAL
5256: IFFALSE 5272
// points := points + 6 ;
5258: LD_ADDR_EXP 10
5262: PUSH
5263: LD_EXP 10
5267: PUSH
5268: LD_INT 6
5270: PLUS
5271: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5272: LD_VAR 0 1
5276: PPUSH
5277: CALL_OW 257
5281: PUSH
5282: LD_INT 17
5284: EQUAL
5285: IFFALSE 5301
// points := points + 11 ;
5287: LD_ADDR_EXP 10
5291: PUSH
5292: LD_EXP 10
5296: PUSH
5297: LD_INT 11
5299: PLUS
5300: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5301: LD_VAR 0 1
5305: PPUSH
5306: CALL_OW 257
5310: PUSH
5311: LD_INT 15
5313: EQUAL
5314: IFFALSE 5330
// points := points + 14 ;
5316: LD_ADDR_EXP 10
5320: PUSH
5321: LD_EXP 10
5325: PUSH
5326: LD_INT 14
5328: PLUS
5329: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5330: LD_VAR 0 1
5334: PPUSH
5335: CALL_OW 247
5339: PUSH
5340: LD_INT 2
5342: EQUAL
5343: IFFALSE 5359
// points := points + 50 ;
5345: LD_ADDR_EXP 10
5349: PUSH
5350: LD_EXP 10
5354: PUSH
5355: LD_INT 50
5357: PLUS
5358: ST_TO_ADDR
// end ; end ;
5359: PPOPN 1
5361: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5362: LD_EXP 5
5366: PPUSH
5367: CALL_OW 256
5371: PUSH
5372: LD_INT 1000
5374: LESS
5375: IFFALSE 5407
5377: GO 5379
5379: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5380: LD_EXP 5
5384: PPUSH
5385: CALL_OW 504
5389: PPUSH
5390: CALL_OW 255
5394: PUSH
5395: LD_INT 8
5397: EQUAL
5398: IFFALSE 5407
// YouLost ( FriendlyFire ) ;
5400: LD_STRING FriendlyFire
5402: PPUSH
5403: CALL_OW 104
5407: END
// on DialogueSkipped ( value ) do var i ;
5408: LD_INT 0
5410: PPUSH
// begin RemoveUnit ( potter ) ;
5411: LD_EXP 4
5415: PPUSH
5416: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5420: LD_EXP 2
5424: PUSH
5425: LD_EXP 3
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PPUSH
5434: CALL_OW 122
// Wait ( 1 ) ;
5438: LD_INT 1
5440: PPUSH
5441: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5445: LD_EXP 2
5449: PPUSH
5450: LD_INT 107
5452: PPUSH
5453: LD_INT 53
5455: PPUSH
5456: LD_INT 0
5458: PPUSH
5459: LD_INT 0
5461: PPUSH
5462: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5466: LD_EXP 3
5470: PPUSH
5471: LD_INT 108
5473: PPUSH
5474: LD_INT 53
5476: PPUSH
5477: LD_INT 0
5479: PPUSH
5480: LD_INT 0
5482: PPUSH
5483: CALL_OW 483
// Wait ( 1 ) ;
5487: LD_INT 1
5489: PPUSH
5490: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5494: LD_EXP 2
5498: PUSH
5499: LD_EXP 3
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PPUSH
5508: LD_INT 108
5510: PPUSH
5511: LD_INT 1
5513: PPUSH
5514: CALL_OW 118
// end ;
5518: PPOPN 2
5520: END
// on ArtifactUsed ( side , icon , p3 , p4 ) do var bonus , off , units , crates , tmp , xy , i , lab ;
5521: LD_INT 0
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
5530: PPUSH
// begin xy := FindArtifact ( 2 ) ;
5531: LD_ADDR_VAR 0 10
5535: PUSH
5536: LD_INT 2
5538: PPUSH
5539: CALL_OW 469
5543: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
5544: LD_ADDR_VAR 0 12
5548: PUSH
5549: LD_INT 22
5551: PUSH
5552: LD_OWVAR 2
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 2
5563: PUSH
5564: LD_INT 30
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: LD_INT 30
5576: PUSH
5577: LD_INT 11
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PPUSH
5593: CALL_OW 69
5597: PPUSH
5598: LD_VAR 0 10
5602: PUSH
5603: LD_INT 1
5605: ARRAY
5606: PPUSH
5607: LD_VAR 0 10
5611: PUSH
5612: LD_INT 2
5614: ARRAY
5615: PPUSH
5616: CALL_OW 73
5620: ST_TO_ADDR
// if icon = art_exp_left then
5621: LD_VAR 0 2
5625: PUSH
5626: LD_INT 1
5628: EQUAL
5629: IFFALSE 5684
// begin SetSpecResearch ( lab , time_res_art , true ) ;
5631: LD_VAR 0 12
5635: PPUSH
5636: LD_EXP 9
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
5648: LD_VAR 0 12
5652: PPUSH
5653: LD_EXP 17
5657: PPUSH
5658: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
5662: LD_OWVAR 2
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 0
5672: PPUSH
5673: LD_VAR 0 12
5677: PPUSH
5678: CALL_OW 468
// end else
5682: GO 6465
// begin DialogueOn ;
5684: CALL_OW 6
// uc_side := 8 ;
5688: LD_ADDR_OWVAR 20
5692: PUSH
5693: LD_INT 8
5695: ST_TO_ADDR
// uc_nation := 2 ;
5696: LD_ADDR_OWVAR 21
5700: PUSH
5701: LD_INT 2
5703: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5704: LD_ADDR_VAR 0 5
5708: PUSH
5709: LD_STRING QBonus
5711: PUSH
5712: LD_EXP 14
5716: STR
5717: ST_TO_ADDR
// off := true ;
5718: LD_ADDR_VAR 0 6
5722: PUSH
5723: LD_INT 1
5725: ST_TO_ADDR
// units := [ ] ;
5726: LD_ADDR_VAR 0 7
5730: PUSH
5731: EMPTY
5732: ST_TO_ADDR
// crates := 0 ;
5733: LD_ADDR_VAR 0 8
5737: PUSH
5738: LD_INT 0
5740: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5741: LD_EXP 12
5745: PPUSH
5746: LD_STRING DVr-2
5748: PPUSH
5749: CALL_OW 94
// wait ( 0 0$1 ) ;
5753: LD_INT 35
5755: PPUSH
5756: CALL_OW 67
// case Query ( bonus ) of 1 :
5760: LD_VAR 0 5
5764: PPUSH
5765: CALL_OW 97
5769: PUSH
5770: LD_INT 1
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5863
5778: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5779: LD_ADDR_VAR 0 9
5783: PUSH
5784: LD_INT 1
5786: PUSH
5787: LD_INT 2
5789: PUSH
5790: LD_INT 5
5792: PUSH
5793: LD_INT 8
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: PUSH
5802: LD_EXP 14
5806: ARRAY
5807: ST_TO_ADDR
// for i = 1 to tmp do
5808: LD_ADDR_VAR 0 11
5812: PUSH
5813: DOUBLE
5814: LD_INT 1
5816: DEC
5817: ST_TO_ADDR
5818: LD_VAR 0 9
5822: PUSH
5823: FOR_TO
5824: IFFALSE 5859
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5826: LD_INT 0
5828: PPUSH
5829: LD_INT 15
5831: PPUSH
5832: LD_VAR 0 9
5836: PPUSH
5837: CALL_OW 380
// units := units ^ CreateHuman ;
5841: LD_ADDR_VAR 0 7
5845: PUSH
5846: LD_VAR 0 7
5850: PUSH
5851: CALL_OW 44
5855: ADD
5856: ST_TO_ADDR
// end ;
5857: GO 5823
5859: POP
5860: POP
// end ; 2 :
5861: GO 6271
5863: LD_INT 2
5865: DOUBLE
5866: EQUAL
5867: IFTRUE 5871
5869: GO 5903
5871: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5872: LD_ADDR_VAR 0 8
5876: PUSH
5877: LD_INT 100
5879: PUSH
5880: LD_INT 150
5882: PUSH
5883: LD_INT 350
5885: PUSH
5886: LD_INT 500
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PUSH
5895: LD_EXP 14
5899: ARRAY
5900: ST_TO_ADDR
// end ; 3 :
5901: GO 6271
5903: LD_INT 3
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 6251
5911: POP
// begin if bonus_num = 1 then
5912: LD_EXP 14
5916: PUSH
5917: LD_INT 1
5919: EQUAL
5920: IFFALSE 5930
// ignore_wave := true ;
5922: LD_ADDR_EXP 15
5926: PUSH
5927: LD_INT 1
5929: ST_TO_ADDR
// if bonus_num = 2 then
5930: LD_EXP 14
5934: PUSH
5935: LD_INT 2
5937: EQUAL
5938: IFFALSE 6058
// begin for i = 1 to 2 do
5940: LD_ADDR_VAR 0 11
5944: PUSH
5945: DOUBLE
5946: LD_INT 1
5948: DEC
5949: ST_TO_ADDR
5950: LD_INT 2
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6056
// begin uc_nation := nation_arabian ;
5956: LD_ADDR_OWVAR 21
5960: PUSH
5961: LD_INT 2
5963: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5964: LD_ADDR_OWVAR 37
5968: PUSH
5969: LD_INT 14
5971: ST_TO_ADDR
// vc_engine := engine_siberite ;
5972: LD_ADDR_OWVAR 39
5976: PUSH
5977: LD_INT 3
5979: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
5980: LD_ADDR_OWVAR 38
5984: PUSH
5985: LD_INT 2
5987: PUSH
5988: LD_INT 5
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: LD_INT 1
5997: PPUSH
5998: LD_INT 2
6000: PPUSH
6001: CALL_OW 12
6005: ARRAY
6006: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6007: LD_ADDR_OWVAR 40
6011: PUSH
6012: LD_INT 28
6014: PUSH
6015: LD_INT 27
6017: PUSH
6018: LD_INT 25
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 1
6028: PPUSH
6029: LD_INT 3
6031: PPUSH
6032: CALL_OW 12
6036: ARRAY
6037: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6038: LD_ADDR_VAR 0 7
6042: PUSH
6043: LD_VAR 0 7
6047: PUSH
6048: CALL_OW 45
6052: ADD
6053: ST_TO_ADDR
// end ;
6054: GO 5953
6056: POP
6057: POP
// end ; if bonus_num = 3 then
6058: LD_EXP 14
6062: PUSH
6063: LD_INT 3
6065: EQUAL
6066: IFFALSE 6190
// begin for i = 1 to 4 do
6068: LD_ADDR_VAR 0 11
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 4
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6188
// begin uc_nation := nation_arabian ;
6084: LD_ADDR_OWVAR 21
6088: PUSH
6089: LD_INT 2
6091: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6092: LD_ADDR_OWVAR 37
6096: PUSH
6097: LD_INT 14
6099: ST_TO_ADDR
// vc_engine := engine_siberite ;
6100: LD_ADDR_OWVAR 39
6104: PUSH
6105: LD_INT 3
6107: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6108: LD_ADDR_OWVAR 38
6112: PUSH
6113: LD_INT 2
6115: PUSH
6116: LD_INT 5
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 1
6125: PPUSH
6126: LD_INT 2
6128: PPUSH
6129: CALL_OW 12
6133: ARRAY
6134: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6135: LD_ADDR_OWVAR 40
6139: PUSH
6140: LD_INT 28
6142: PUSH
6143: LD_INT 27
6145: PUSH
6146: LD_INT 28
6148: PUSH
6149: LD_INT 25
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_INT 4
6163: PPUSH
6164: CALL_OW 12
6168: ARRAY
6169: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6170: LD_ADDR_VAR 0 7
6174: PUSH
6175: LD_VAR 0 7
6179: PUSH
6180: CALL_OW 45
6184: ADD
6185: ST_TO_ADDR
// end ;
6186: GO 6081
6188: POP
6189: POP
// end ; if bonus_num = 4 then
6190: LD_EXP 14
6194: PUSH
6195: LD_INT 4
6197: EQUAL
6198: IFFALSE 6249
// for i = 1 to 3 do
6200: LD_ADDR_VAR 0 11
6204: PUSH
6205: DOUBLE
6206: LD_INT 1
6208: DEC
6209: ST_TO_ADDR
6210: LD_INT 3
6212: PUSH
6213: FOR_TO
6214: IFFALSE 6247
// begin PrepareHuman ( false , 3 , 8 ) ;
6216: LD_INT 0
6218: PPUSH
6219: LD_INT 3
6221: PPUSH
6222: LD_INT 8
6224: PPUSH
6225: CALL_OW 380
// units := units ^ CreateHuman ;
6229: LD_ADDR_VAR 0 7
6233: PUSH
6234: LD_VAR 0 7
6238: PUSH
6239: CALL_OW 44
6243: ADD
6244: ST_TO_ADDR
// end ;
6245: GO 6213
6247: POP
6248: POP
// end ; 4 :
6249: GO 6271
6251: LD_INT 4
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6270
6259: POP
// off := false ; end ;
6260: LD_ADDR_VAR 0 6
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
6268: GO 6271
6270: POP
// DialogueOff ;
6271: CALL_OW 7
// if not off then
6275: LD_VAR 0 6
6279: NOT
6280: IFFALSE 6286
// exit else
6282: GO 6465
6284: GO 6339
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6286: LD_OWVAR 2
6290: PPUSH
6291: LD_INT 12
6293: PPUSH
6294: LD_INT 0
6296: PPUSH
6297: LD_INT 23
6299: PPUSH
6300: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6304: LD_EXP 12
6308: PPUSH
6309: LD_STRING DVr-3
6311: PUSH
6312: LD_STRING DVr-3a
6314: PUSH
6315: LD_STRING DVr-3b
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 1
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: CALL_OW 12
6333: ARRAY
6334: PPUSH
6335: CALL_OW 94
// end ; if units then
6339: LD_VAR 0 7
6343: IFFALSE 6407
// for i in units do
6345: LD_ADDR_VAR 0 11
6349: PUSH
6350: LD_VAR 0 7
6354: PUSH
6355: FOR_IN
6356: IFFALSE 6405
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6358: LD_VAR 0 11
6362: PPUSH
6363: LD_INT 92
6365: PPUSH
6366: LD_INT 49
6368: PPUSH
6369: LD_INT 20
6371: PPUSH
6372: LD_INT 0
6374: PPUSH
6375: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6379: LD_VAR 0 11
6383: PPUSH
6384: CALL_OW 250
6388: PPUSH
6389: LD_VAR 0 11
6393: PPUSH
6394: CALL_OW 251
6398: PPUSH
6399: CALL_OW 494
// end ;
6403: GO 6355
6405: POP
6406: POP
// if crates then
6407: LD_VAR 0 8
6411: IFFALSE 6465
// for i = 1 to ( crates div 50 ) do
6413: LD_ADDR_VAR 0 11
6417: PUSH
6418: DOUBLE
6419: LD_INT 1
6421: DEC
6422: ST_TO_ADDR
6423: LD_VAR 0 8
6427: PUSH
6428: LD_INT 50
6430: DIV
6431: PUSH
6432: FOR_TO
6433: IFFALSE 6463
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6435: LD_INT 5
6437: PPUSH
6438: LD_INT 92
6440: PPUSH
6441: LD_INT 49
6443: PPUSH
6444: LD_INT 30
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 56
// wait ( 0 0$02 ) ;
6454: LD_INT 70
6456: PPUSH
6457: CALL_OW 67
// end ;
6461: GO 6432
6463: POP
6464: POP
// end ; end ;
6465: PPOPN 12
6467: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6468: LD_VAR 0 1
6472: PPUSH
6473: LD_VAR 0 2
6477: PPUSH
6478: LD_VAR 0 3
6482: PPUSH
6483: CALL 22950 0 3
// end ;
6487: PPOPN 3
6489: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6490: LD_VAR 0 1
6494: PPUSH
6495: CALL 22958 0 1
// end ;
6499: PPOPN 1
6501: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL_OW 255
6511: PUSH
6512: LD_OWVAR 2
6516: EQUAL
6517: IFFALSE 6527
// player_res_art := true ;
6519: LD_ADDR_EXP 8
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// end ;
6527: PPOPN 1
6529: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) do var xy , lab ;
6530: LD_INT 22
6532: PUSH
6533: LD_OWVAR 2
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 2
6544: PUSH
6545: LD_INT 30
6547: PUSH
6548: LD_INT 7
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: LD_INT 30
6557: PUSH
6558: LD_INT 8
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 30
6567: PUSH
6568: LD_INT 11
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PPUSH
6585: CALL_OW 69
6589: IFFALSE 6822
6591: GO 6593
6593: DISABLE
6594: LD_INT 0
6596: PPUSH
6597: PPUSH
// begin enable ;
6598: ENABLE
// xy := FindArtifact ( 2 ) ;
6599: LD_ADDR_VAR 0 1
6603: PUSH
6604: LD_INT 2
6606: PPUSH
6607: CALL_OW 469
6611: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
6612: LD_ADDR_VAR 0 2
6616: PUSH
6617: LD_INT 22
6619: PUSH
6620: LD_OWVAR 2
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 2
6631: PUSH
6632: LD_INT 30
6634: PUSH
6635: LD_INT 8
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 30
6644: PUSH
6645: LD_INT 7
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 30
6654: PUSH
6655: LD_INT 11
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PPUSH
6672: CALL_OW 69
6676: PPUSH
6677: LD_VAR 0 1
6681: PUSH
6682: LD_INT 1
6684: ARRAY
6685: PPUSH
6686: LD_VAR 0 1
6690: PUSH
6691: LD_INT 2
6693: ARRAY
6694: PPUSH
6695: CALL_OW 73
6699: ST_TO_ADDR
// if player_artifact_ready = false then
6700: LD_EXP 16
6704: PUSH
6705: LD_INT 0
6707: EQUAL
6708: IFFALSE 6822
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
6710: LD_VAR 0 2
6714: PPUSH
6715: LD_VAR 0 1
6719: PUSH
6720: LD_INT 1
6722: ARRAY
6723: PPUSH
6724: LD_VAR 0 1
6728: PUSH
6729: LD_INT 2
6731: ARRAY
6732: PPUSH
6733: CALL_OW 297
6737: PUSH
6738: LD_INT 6
6740: LESS
6741: IFFALSE 6802
// begin if BuildingStatus ( lab ) = bs_idle then
6743: LD_VAR 0 2
6747: PPUSH
6748: CALL_OW 461
6752: PUSH
6753: LD_INT 2
6755: EQUAL
6756: IFFALSE 6780
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
6758: LD_OWVAR 2
6762: PPUSH
6763: LD_INT 1
6765: PPUSH
6766: LD_INT 2
6768: PPUSH
6769: LD_VAR 0 2
6773: PPUSH
6774: CALL_OW 468
6778: GO 6800
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6780: LD_OWVAR 2
6784: PPUSH
6785: LD_INT 1
6787: PPUSH
6788: LD_INT 1
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 468
// end else
6800: GO 6822
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6802: LD_OWVAR 2
6806: PPUSH
6807: LD_INT 1
6809: PPUSH
6810: LD_INT 1
6812: PPUSH
6813: LD_VAR 0 2
6817: PPUSH
6818: CALL_OW 468
// end ;
6822: PPOPN 2
6824: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6825: LD_VAR 0 1
6829: PPUSH
6830: CALL_OW 255
6834: PUSH
6835: LD_OWVAR 2
6839: EQUAL
6840: IFFALSE 6866
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
6842: LD_OWVAR 2
6846: PPUSH
6847: LD_INT 1
6849: PPUSH
6850: LD_INT 0
6852: PPUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 468
// Win ;
6862: CALL 4759 0 0
// end ; end ;
6866: PPOPN 1
6868: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
6869: LD_ADDR_EXP 17
6873: PUSH
6874: LD_VAR 0 2
6878: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
6879: LD_OWVAR 2
6883: PPUSH
6884: LD_INT 1
6886: PPUSH
6887: LD_INT 2
6889: PPUSH
6890: LD_VAR 0 1
6894: PPUSH
6895: CALL_OW 468
// end ;
6899: PPOPN 2
6901: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6902: LD_VAR 0 1
6906: PPUSH
6907: LD_VAR 0 2
6911: PPUSH
6912: CALL 22974 0 2
// end ; end_of_file
6916: PPOPN 2
6918: END
// every 0 0$01 trigger not game_over do
6919: LD_EXP 7
6923: NOT
6924: IFFALSE 6957
6926: GO 6928
6928: DISABLE
// begin enable ;
6929: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6930: LD_ADDR_OWVAR 47
6934: PUSH
6935: LD_STRING #tick
6937: PUSH
6938: LD_OWVAR 1
6942: PUSH
6943: LD_STRING #points
6945: PUSH
6946: LD_EXP 10
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: ST_TO_ADDR
// end ;
6957: END
// every 0 0$01 trigger game_over do
6958: LD_EXP 7
6962: IFFALSE 7021
6964: GO 6966
6966: DISABLE
// begin Wait ( 0 0$02 ) ;
6967: LD_INT 70
6969: PPUSH
6970: CALL_OW 67
// DialogueOn ;
6974: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6978: LD_ADDR_OWVAR 47
6982: PUSH
6983: LD_STRING #game-points
6985: PUSH
6986: LD_OWVAR 78
6990: PUSH
6991: LD_EXP 10
6995: PUSH
6996: LD_STRING #game-time
6998: PUSH
6999: LD_OWVAR 1
7003: PUSH
7004: LD_STRING #game-difficulty
7006: PUSH
7007: LD_OWVAR 67
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// end ; end_of_file
7021: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
7022: LD_OWVAR 1
7026: PUSH
7027: LD_INT 52500
7029: LESS
7030: IFFALSE 7054
7032: GO 7034
7034: DISABLE
// begin enable ;
7035: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
7036: LD_INT 1
7038: PPUSH
7039: LD_INT 5
7041: PPUSH
7042: CALL_OW 12
7046: PPUSH
7047: LD_INT 1
7049: PPUSH
7050: CALL_OW 57
// end ; end_of_file end_of_file
7054: END
// every 0 0$1 do
7055: GO 7057
7057: DISABLE
// begin enable ;
7058: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7059: LD_STRING updateTimer(
7061: PUSH
7062: LD_OWVAR 1
7066: STR
7067: PUSH
7068: LD_STRING );
7070: STR
7071: PPUSH
7072: CALL_OW 559
// end ;
7076: END
// export function SOS_MapStart ( ) ; begin
7077: LD_INT 0
7079: PPUSH
// if streamModeActive then
7080: LD_EXP 19
7084: IFFALSE 7093
// DefineStreamItems ( true ) ;
7086: LD_INT 1
7088: PPUSH
7089: CALL 8897 0 1
// UpdateLuaVariables ( ) ;
7093: CALL 7110 0 0
// UpdateFactoryWaypoints ( ) ;
7097: CALL 21758 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7101: CALL 22015 0 0
// end ;
7105: LD_VAR 0 1
7109: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
7110: LD_INT 0
7112: PPUSH
// if not globalGameSaveCounter then
7113: LD_EXP 18
7117: NOT
7118: IFFALSE 7129
// ToLua ( setGameSaveCounter(0) ) else
7120: LD_STRING setGameSaveCounter(0)
7122: PPUSH
7123: CALL_OW 559
7127: GO 7161
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7129: LD_ADDR_EXP 18
7133: PUSH
7134: LD_EXP 18
7138: PPUSH
7139: CALL 65972 0 1
7143: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7144: LD_STRING setGameSaveCounter(
7146: PUSH
7147: LD_EXP 18
7151: STR
7152: PUSH
7153: LD_STRING )
7155: STR
7156: PPUSH
7157: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7161: LD_STRING setGameDifficulty(
7163: PUSH
7164: LD_OWVAR 67
7168: STR
7169: PUSH
7170: LD_STRING )
7172: STR
7173: PPUSH
7174: CALL_OW 559
// end ;
7178: LD_VAR 0 1
7182: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7183: LD_INT 0
7185: PPUSH
// if p2 = stream_mode then
7186: LD_VAR 0 2
7190: PUSH
7191: LD_INT 100
7193: EQUAL
7194: IFFALSE 8197
// begin if not StreamModeActive then
7196: LD_EXP 19
7200: NOT
7201: IFFALSE 7211
// StreamModeActive := true ;
7203: LD_ADDR_EXP 19
7207: PUSH
7208: LD_INT 1
7210: ST_TO_ADDR
// if p3 = 0 then
7211: LD_VAR 0 3
7215: PUSH
7216: LD_INT 0
7218: EQUAL
7219: IFFALSE 7225
// InitStreamMode ;
7221: CALL 8433 0 0
// if p3 = 1 then
7225: LD_VAR 0 3
7229: PUSH
7230: LD_INT 1
7232: EQUAL
7233: IFFALSE 7243
// sRocket := true ;
7235: LD_ADDR_EXP 24
7239: PUSH
7240: LD_INT 1
7242: ST_TO_ADDR
// if p3 = 2 then
7243: LD_VAR 0 3
7247: PUSH
7248: LD_INT 2
7250: EQUAL
7251: IFFALSE 7261
// sSpeed := true ;
7253: LD_ADDR_EXP 23
7257: PUSH
7258: LD_INT 1
7260: ST_TO_ADDR
// if p3 = 3 then
7261: LD_VAR 0 3
7265: PUSH
7266: LD_INT 3
7268: EQUAL
7269: IFFALSE 7279
// sEngine := true ;
7271: LD_ADDR_EXP 25
7275: PUSH
7276: LD_INT 1
7278: ST_TO_ADDR
// if p3 = 4 then
7279: LD_VAR 0 3
7283: PUSH
7284: LD_INT 4
7286: EQUAL
7287: IFFALSE 7297
// sSpec := true ;
7289: LD_ADDR_EXP 22
7293: PUSH
7294: LD_INT 1
7296: ST_TO_ADDR
// if p3 = 5 then
7297: LD_VAR 0 3
7301: PUSH
7302: LD_INT 5
7304: EQUAL
7305: IFFALSE 7315
// sLevel := true ;
7307: LD_ADDR_EXP 26
7311: PUSH
7312: LD_INT 1
7314: ST_TO_ADDR
// if p3 = 6 then
7315: LD_VAR 0 3
7319: PUSH
7320: LD_INT 6
7322: EQUAL
7323: IFFALSE 7333
// sArmoury := true ;
7325: LD_ADDR_EXP 27
7329: PUSH
7330: LD_INT 1
7332: ST_TO_ADDR
// if p3 = 7 then
7333: LD_VAR 0 3
7337: PUSH
7338: LD_INT 7
7340: EQUAL
7341: IFFALSE 7351
// sRadar := true ;
7343: LD_ADDR_EXP 28
7347: PUSH
7348: LD_INT 1
7350: ST_TO_ADDR
// if p3 = 8 then
7351: LD_VAR 0 3
7355: PUSH
7356: LD_INT 8
7358: EQUAL
7359: IFFALSE 7369
// sBunker := true ;
7361: LD_ADDR_EXP 29
7365: PUSH
7366: LD_INT 1
7368: ST_TO_ADDR
// if p3 = 9 then
7369: LD_VAR 0 3
7373: PUSH
7374: LD_INT 9
7376: EQUAL
7377: IFFALSE 7387
// sHack := true ;
7379: LD_ADDR_EXP 30
7383: PUSH
7384: LD_INT 1
7386: ST_TO_ADDR
// if p3 = 10 then
7387: LD_VAR 0 3
7391: PUSH
7392: LD_INT 10
7394: EQUAL
7395: IFFALSE 7405
// sFire := true ;
7397: LD_ADDR_EXP 31
7401: PUSH
7402: LD_INT 1
7404: ST_TO_ADDR
// if p3 = 11 then
7405: LD_VAR 0 3
7409: PUSH
7410: LD_INT 11
7412: EQUAL
7413: IFFALSE 7423
// sRefresh := true ;
7415: LD_ADDR_EXP 32
7419: PUSH
7420: LD_INT 1
7422: ST_TO_ADDR
// if p3 = 12 then
7423: LD_VAR 0 3
7427: PUSH
7428: LD_INT 12
7430: EQUAL
7431: IFFALSE 7441
// sExp := true ;
7433: LD_ADDR_EXP 33
7437: PUSH
7438: LD_INT 1
7440: ST_TO_ADDR
// if p3 = 13 then
7441: LD_VAR 0 3
7445: PUSH
7446: LD_INT 13
7448: EQUAL
7449: IFFALSE 7459
// sDepot := true ;
7451: LD_ADDR_EXP 34
7455: PUSH
7456: LD_INT 1
7458: ST_TO_ADDR
// if p3 = 14 then
7459: LD_VAR 0 3
7463: PUSH
7464: LD_INT 14
7466: EQUAL
7467: IFFALSE 7477
// sFlag := true ;
7469: LD_ADDR_EXP 35
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// if p3 = 15 then
7477: LD_VAR 0 3
7481: PUSH
7482: LD_INT 15
7484: EQUAL
7485: IFFALSE 7495
// sKamikadze := true ;
7487: LD_ADDR_EXP 43
7491: PUSH
7492: LD_INT 1
7494: ST_TO_ADDR
// if p3 = 16 then
7495: LD_VAR 0 3
7499: PUSH
7500: LD_INT 16
7502: EQUAL
7503: IFFALSE 7513
// sTroll := true ;
7505: LD_ADDR_EXP 44
7509: PUSH
7510: LD_INT 1
7512: ST_TO_ADDR
// if p3 = 17 then
7513: LD_VAR 0 3
7517: PUSH
7518: LD_INT 17
7520: EQUAL
7521: IFFALSE 7531
// sSlow := true ;
7523: LD_ADDR_EXP 45
7527: PUSH
7528: LD_INT 1
7530: ST_TO_ADDR
// if p3 = 18 then
7531: LD_VAR 0 3
7535: PUSH
7536: LD_INT 18
7538: EQUAL
7539: IFFALSE 7549
// sLack := true ;
7541: LD_ADDR_EXP 46
7545: PUSH
7546: LD_INT 1
7548: ST_TO_ADDR
// if p3 = 19 then
7549: LD_VAR 0 3
7553: PUSH
7554: LD_INT 19
7556: EQUAL
7557: IFFALSE 7567
// sTank := true ;
7559: LD_ADDR_EXP 48
7563: PUSH
7564: LD_INT 1
7566: ST_TO_ADDR
// if p3 = 20 then
7567: LD_VAR 0 3
7571: PUSH
7572: LD_INT 20
7574: EQUAL
7575: IFFALSE 7585
// sRemote := true ;
7577: LD_ADDR_EXP 49
7581: PUSH
7582: LD_INT 1
7584: ST_TO_ADDR
// if p3 = 21 then
7585: LD_VAR 0 3
7589: PUSH
7590: LD_INT 21
7592: EQUAL
7593: IFFALSE 7603
// sPowell := true ;
7595: LD_ADDR_EXP 50
7599: PUSH
7600: LD_INT 1
7602: ST_TO_ADDR
// if p3 = 22 then
7603: LD_VAR 0 3
7607: PUSH
7608: LD_INT 22
7610: EQUAL
7611: IFFALSE 7621
// sTeleport := true ;
7613: LD_ADDR_EXP 53
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// if p3 = 23 then
7621: LD_VAR 0 3
7625: PUSH
7626: LD_INT 23
7628: EQUAL
7629: IFFALSE 7639
// sOilTower := true ;
7631: LD_ADDR_EXP 55
7635: PUSH
7636: LD_INT 1
7638: ST_TO_ADDR
// if p3 = 24 then
7639: LD_VAR 0 3
7643: PUSH
7644: LD_INT 24
7646: EQUAL
7647: IFFALSE 7657
// sShovel := true ;
7649: LD_ADDR_EXP 56
7653: PUSH
7654: LD_INT 1
7656: ST_TO_ADDR
// if p3 = 25 then
7657: LD_VAR 0 3
7661: PUSH
7662: LD_INT 25
7664: EQUAL
7665: IFFALSE 7675
// sSheik := true ;
7667: LD_ADDR_EXP 57
7671: PUSH
7672: LD_INT 1
7674: ST_TO_ADDR
// if p3 = 26 then
7675: LD_VAR 0 3
7679: PUSH
7680: LD_INT 26
7682: EQUAL
7683: IFFALSE 7693
// sEarthquake := true ;
7685: LD_ADDR_EXP 59
7689: PUSH
7690: LD_INT 1
7692: ST_TO_ADDR
// if p3 = 27 then
7693: LD_VAR 0 3
7697: PUSH
7698: LD_INT 27
7700: EQUAL
7701: IFFALSE 7711
// sAI := true ;
7703: LD_ADDR_EXP 60
7707: PUSH
7708: LD_INT 1
7710: ST_TO_ADDR
// if p3 = 28 then
7711: LD_VAR 0 3
7715: PUSH
7716: LD_INT 28
7718: EQUAL
7719: IFFALSE 7729
// sCargo := true ;
7721: LD_ADDR_EXP 63
7725: PUSH
7726: LD_INT 1
7728: ST_TO_ADDR
// if p3 = 29 then
7729: LD_VAR 0 3
7733: PUSH
7734: LD_INT 29
7736: EQUAL
7737: IFFALSE 7747
// sDLaser := true ;
7739: LD_ADDR_EXP 64
7743: PUSH
7744: LD_INT 1
7746: ST_TO_ADDR
// if p3 = 30 then
7747: LD_VAR 0 3
7751: PUSH
7752: LD_INT 30
7754: EQUAL
7755: IFFALSE 7765
// sExchange := true ;
7757: LD_ADDR_EXP 65
7761: PUSH
7762: LD_INT 1
7764: ST_TO_ADDR
// if p3 = 31 then
7765: LD_VAR 0 3
7769: PUSH
7770: LD_INT 31
7772: EQUAL
7773: IFFALSE 7783
// sFac := true ;
7775: LD_ADDR_EXP 66
7779: PUSH
7780: LD_INT 1
7782: ST_TO_ADDR
// if p3 = 32 then
7783: LD_VAR 0 3
7787: PUSH
7788: LD_INT 32
7790: EQUAL
7791: IFFALSE 7801
// sPower := true ;
7793: LD_ADDR_EXP 67
7797: PUSH
7798: LD_INT 1
7800: ST_TO_ADDR
// if p3 = 33 then
7801: LD_VAR 0 3
7805: PUSH
7806: LD_INT 33
7808: EQUAL
7809: IFFALSE 7819
// sRandom := true ;
7811: LD_ADDR_EXP 68
7815: PUSH
7816: LD_INT 1
7818: ST_TO_ADDR
// if p3 = 34 then
7819: LD_VAR 0 3
7823: PUSH
7824: LD_INT 34
7826: EQUAL
7827: IFFALSE 7837
// sShield := true ;
7829: LD_ADDR_EXP 69
7833: PUSH
7834: LD_INT 1
7836: ST_TO_ADDR
// if p3 = 35 then
7837: LD_VAR 0 3
7841: PUSH
7842: LD_INT 35
7844: EQUAL
7845: IFFALSE 7855
// sTime := true ;
7847: LD_ADDR_EXP 70
7851: PUSH
7852: LD_INT 1
7854: ST_TO_ADDR
// if p3 = 36 then
7855: LD_VAR 0 3
7859: PUSH
7860: LD_INT 36
7862: EQUAL
7863: IFFALSE 7873
// sTools := true ;
7865: LD_ADDR_EXP 71
7869: PUSH
7870: LD_INT 1
7872: ST_TO_ADDR
// if p3 = 101 then
7873: LD_VAR 0 3
7877: PUSH
7878: LD_INT 101
7880: EQUAL
7881: IFFALSE 7891
// sSold := true ;
7883: LD_ADDR_EXP 36
7887: PUSH
7888: LD_INT 1
7890: ST_TO_ADDR
// if p3 = 102 then
7891: LD_VAR 0 3
7895: PUSH
7896: LD_INT 102
7898: EQUAL
7899: IFFALSE 7909
// sDiff := true ;
7901: LD_ADDR_EXP 37
7905: PUSH
7906: LD_INT 1
7908: ST_TO_ADDR
// if p3 = 103 then
7909: LD_VAR 0 3
7913: PUSH
7914: LD_INT 103
7916: EQUAL
7917: IFFALSE 7927
// sFog := true ;
7919: LD_ADDR_EXP 40
7923: PUSH
7924: LD_INT 1
7926: ST_TO_ADDR
// if p3 = 104 then
7927: LD_VAR 0 3
7931: PUSH
7932: LD_INT 104
7934: EQUAL
7935: IFFALSE 7945
// sReset := true ;
7937: LD_ADDR_EXP 41
7941: PUSH
7942: LD_INT 1
7944: ST_TO_ADDR
// if p3 = 105 then
7945: LD_VAR 0 3
7949: PUSH
7950: LD_INT 105
7952: EQUAL
7953: IFFALSE 7963
// sSun := true ;
7955: LD_ADDR_EXP 42
7959: PUSH
7960: LD_INT 1
7962: ST_TO_ADDR
// if p3 = 106 then
7963: LD_VAR 0 3
7967: PUSH
7968: LD_INT 106
7970: EQUAL
7971: IFFALSE 7981
// sTiger := true ;
7973: LD_ADDR_EXP 38
7977: PUSH
7978: LD_INT 1
7980: ST_TO_ADDR
// if p3 = 107 then
7981: LD_VAR 0 3
7985: PUSH
7986: LD_INT 107
7988: EQUAL
7989: IFFALSE 7999
// sBomb := true ;
7991: LD_ADDR_EXP 39
7995: PUSH
7996: LD_INT 1
7998: ST_TO_ADDR
// if p3 = 108 then
7999: LD_VAR 0 3
8003: PUSH
8004: LD_INT 108
8006: EQUAL
8007: IFFALSE 8017
// sWound := true ;
8009: LD_ADDR_EXP 47
8013: PUSH
8014: LD_INT 1
8016: ST_TO_ADDR
// if p3 = 109 then
8017: LD_VAR 0 3
8021: PUSH
8022: LD_INT 109
8024: EQUAL
8025: IFFALSE 8035
// sBetray := true ;
8027: LD_ADDR_EXP 51
8031: PUSH
8032: LD_INT 1
8034: ST_TO_ADDR
// if p3 = 110 then
8035: LD_VAR 0 3
8039: PUSH
8040: LD_INT 110
8042: EQUAL
8043: IFFALSE 8053
// sContamin := true ;
8045: LD_ADDR_EXP 52
8049: PUSH
8050: LD_INT 1
8052: ST_TO_ADDR
// if p3 = 111 then
8053: LD_VAR 0 3
8057: PUSH
8058: LD_INT 111
8060: EQUAL
8061: IFFALSE 8071
// sOil := true ;
8063: LD_ADDR_EXP 54
8067: PUSH
8068: LD_INT 1
8070: ST_TO_ADDR
// if p3 = 112 then
8071: LD_VAR 0 3
8075: PUSH
8076: LD_INT 112
8078: EQUAL
8079: IFFALSE 8089
// sStu := true ;
8081: LD_ADDR_EXP 58
8085: PUSH
8086: LD_INT 1
8088: ST_TO_ADDR
// if p3 = 113 then
8089: LD_VAR 0 3
8093: PUSH
8094: LD_INT 113
8096: EQUAL
8097: IFFALSE 8107
// sBazooka := true ;
8099: LD_ADDR_EXP 61
8103: PUSH
8104: LD_INT 1
8106: ST_TO_ADDR
// if p3 = 114 then
8107: LD_VAR 0 3
8111: PUSH
8112: LD_INT 114
8114: EQUAL
8115: IFFALSE 8125
// sMortar := true ;
8117: LD_ADDR_EXP 62
8121: PUSH
8122: LD_INT 1
8124: ST_TO_ADDR
// if p3 = 115 then
8125: LD_VAR 0 3
8129: PUSH
8130: LD_INT 115
8132: EQUAL
8133: IFFALSE 8143
// sRanger := true ;
8135: LD_ADDR_EXP 72
8139: PUSH
8140: LD_INT 1
8142: ST_TO_ADDR
// if p3 = 116 then
8143: LD_VAR 0 3
8147: PUSH
8148: LD_INT 116
8150: EQUAL
8151: IFFALSE 8161
// sComputer := true ;
8153: LD_ADDR_EXP 73
8157: PUSH
8158: LD_INT 1
8160: ST_TO_ADDR
// if p3 = 117 then
8161: LD_VAR 0 3
8165: PUSH
8166: LD_INT 117
8168: EQUAL
8169: IFFALSE 8179
// s30 := true ;
8171: LD_ADDR_EXP 74
8175: PUSH
8176: LD_INT 1
8178: ST_TO_ADDR
// if p3 = 118 then
8179: LD_VAR 0 3
8183: PUSH
8184: LD_INT 118
8186: EQUAL
8187: IFFALSE 8197
// s60 := true ;
8189: LD_ADDR_EXP 75
8193: PUSH
8194: LD_INT 1
8196: ST_TO_ADDR
// end ; if p2 = hack_mode then
8197: LD_VAR 0 2
8201: PUSH
8202: LD_INT 101
8204: EQUAL
8205: IFFALSE 8333
// begin case p3 of 1 :
8207: LD_VAR 0 3
8211: PUSH
8212: LD_INT 1
8214: DOUBLE
8215: EQUAL
8216: IFTRUE 8220
8218: GO 8227
8220: POP
// hHackUnlimitedResources ; 2 :
8221: CALL 20504 0 0
8225: GO 8333
8227: LD_INT 2
8229: DOUBLE
8230: EQUAL
8231: IFTRUE 8235
8233: GO 8242
8235: POP
// hHackSetLevel10 ; 3 :
8236: CALL 20637 0 0
8240: GO 8333
8242: LD_INT 3
8244: DOUBLE
8245: EQUAL
8246: IFTRUE 8250
8248: GO 8257
8250: POP
// hHackSetLevel10YourUnits ; 4 :
8251: CALL 20722 0 0
8255: GO 8333
8257: LD_INT 4
8259: DOUBLE
8260: EQUAL
8261: IFTRUE 8265
8263: GO 8272
8265: POP
// hHackInvincible ; 5 :
8266: CALL 21170 0 0
8270: GO 8333
8272: LD_INT 5
8274: DOUBLE
8275: EQUAL
8276: IFTRUE 8280
8278: GO 8287
8280: POP
// hHackInvisible ; 6 :
8281: CALL 21281 0 0
8285: GO 8333
8287: LD_INT 6
8289: DOUBLE
8290: EQUAL
8291: IFTRUE 8295
8293: GO 8302
8295: POP
// hHackChangeYourSide ; 7 :
8296: CALL 21338 0 0
8300: GO 8333
8302: LD_INT 7
8304: DOUBLE
8305: EQUAL
8306: IFTRUE 8310
8308: GO 8317
8310: POP
// hHackChangeUnitSide ; 8 :
8311: CALL 21380 0 0
8315: GO 8333
8317: LD_INT 8
8319: DOUBLE
8320: EQUAL
8321: IFTRUE 8325
8323: GO 8332
8325: POP
// hHackFog ; end ;
8326: CALL 21481 0 0
8330: GO 8333
8332: POP
// end ; if p2 = game_save_mode then
8333: LD_VAR 0 2
8337: PUSH
8338: LD_INT 102
8340: EQUAL
8341: IFFALSE 8406
// begin if p3 = 1 then
8343: LD_VAR 0 3
8347: PUSH
8348: LD_INT 1
8350: EQUAL
8351: IFFALSE 8363
// globalGameSaveCounter := p4 ;
8353: LD_ADDR_EXP 18
8357: PUSH
8358: LD_VAR 0 4
8362: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8363: LD_VAR 0 3
8367: PUSH
8368: LD_INT 2
8370: EQUAL
8371: PUSH
8372: LD_EXP 18
8376: AND
8377: IFFALSE 8396
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8379: LD_STRING setGameSaveCounter(
8381: PUSH
8382: LD_EXP 18
8386: STR
8387: PUSH
8388: LD_STRING )
8390: STR
8391: PPUSH
8392: CALL_OW 559
// display_strings := globalGameSaveCounter ;
8396: LD_ADDR_OWVAR 47
8400: PUSH
8401: LD_EXP 18
8405: ST_TO_ADDR
// end ; end ;
8406: LD_VAR 0 7
8410: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8411: GO 8413
8413: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8414: LD_STRING initStreamRollete();
8416: PPUSH
8417: CALL_OW 559
// InitStreamMode ;
8421: CALL 8433 0 0
// DefineStreamItems ( false ) ;
8425: LD_INT 0
8427: PPUSH
8428: CALL 8897 0 1
// end ;
8432: END
// function InitStreamMode ; begin
8433: LD_INT 0
8435: PPUSH
// streamModeActive := false ;
8436: LD_ADDR_EXP 19
8440: PUSH
8441: LD_INT 0
8443: ST_TO_ADDR
// normalCounter := 36 ;
8444: LD_ADDR_EXP 20
8448: PUSH
8449: LD_INT 36
8451: ST_TO_ADDR
// hardcoreCounter := 18 ;
8452: LD_ADDR_EXP 21
8456: PUSH
8457: LD_INT 18
8459: ST_TO_ADDR
// sRocket := false ;
8460: LD_ADDR_EXP 24
8464: PUSH
8465: LD_INT 0
8467: ST_TO_ADDR
// sSpeed := false ;
8468: LD_ADDR_EXP 23
8472: PUSH
8473: LD_INT 0
8475: ST_TO_ADDR
// sEngine := false ;
8476: LD_ADDR_EXP 25
8480: PUSH
8481: LD_INT 0
8483: ST_TO_ADDR
// sSpec := false ;
8484: LD_ADDR_EXP 22
8488: PUSH
8489: LD_INT 0
8491: ST_TO_ADDR
// sLevel := false ;
8492: LD_ADDR_EXP 26
8496: PUSH
8497: LD_INT 0
8499: ST_TO_ADDR
// sArmoury := false ;
8500: LD_ADDR_EXP 27
8504: PUSH
8505: LD_INT 0
8507: ST_TO_ADDR
// sRadar := false ;
8508: LD_ADDR_EXP 28
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
// sBunker := false ;
8516: LD_ADDR_EXP 29
8520: PUSH
8521: LD_INT 0
8523: ST_TO_ADDR
// sHack := false ;
8524: LD_ADDR_EXP 30
8528: PUSH
8529: LD_INT 0
8531: ST_TO_ADDR
// sFire := false ;
8532: LD_ADDR_EXP 31
8536: PUSH
8537: LD_INT 0
8539: ST_TO_ADDR
// sRefresh := false ;
8540: LD_ADDR_EXP 32
8544: PUSH
8545: LD_INT 0
8547: ST_TO_ADDR
// sExp := false ;
8548: LD_ADDR_EXP 33
8552: PUSH
8553: LD_INT 0
8555: ST_TO_ADDR
// sDepot := false ;
8556: LD_ADDR_EXP 34
8560: PUSH
8561: LD_INT 0
8563: ST_TO_ADDR
// sFlag := false ;
8564: LD_ADDR_EXP 35
8568: PUSH
8569: LD_INT 0
8571: ST_TO_ADDR
// sKamikadze := false ;
8572: LD_ADDR_EXP 43
8576: PUSH
8577: LD_INT 0
8579: ST_TO_ADDR
// sTroll := false ;
8580: LD_ADDR_EXP 44
8584: PUSH
8585: LD_INT 0
8587: ST_TO_ADDR
// sSlow := false ;
8588: LD_ADDR_EXP 45
8592: PUSH
8593: LD_INT 0
8595: ST_TO_ADDR
// sLack := false ;
8596: LD_ADDR_EXP 46
8600: PUSH
8601: LD_INT 0
8603: ST_TO_ADDR
// sTank := false ;
8604: LD_ADDR_EXP 48
8608: PUSH
8609: LD_INT 0
8611: ST_TO_ADDR
// sRemote := false ;
8612: LD_ADDR_EXP 49
8616: PUSH
8617: LD_INT 0
8619: ST_TO_ADDR
// sPowell := false ;
8620: LD_ADDR_EXP 50
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sTeleport := false ;
8628: LD_ADDR_EXP 53
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// sOilTower := false ;
8636: LD_ADDR_EXP 55
8640: PUSH
8641: LD_INT 0
8643: ST_TO_ADDR
// sShovel := false ;
8644: LD_ADDR_EXP 56
8648: PUSH
8649: LD_INT 0
8651: ST_TO_ADDR
// sSheik := false ;
8652: LD_ADDR_EXP 57
8656: PUSH
8657: LD_INT 0
8659: ST_TO_ADDR
// sEarthquake := false ;
8660: LD_ADDR_EXP 59
8664: PUSH
8665: LD_INT 0
8667: ST_TO_ADDR
// sAI := false ;
8668: LD_ADDR_EXP 60
8672: PUSH
8673: LD_INT 0
8675: ST_TO_ADDR
// sCargo := false ;
8676: LD_ADDR_EXP 63
8680: PUSH
8681: LD_INT 0
8683: ST_TO_ADDR
// sDLaser := false ;
8684: LD_ADDR_EXP 64
8688: PUSH
8689: LD_INT 0
8691: ST_TO_ADDR
// sExchange := false ;
8692: LD_ADDR_EXP 65
8696: PUSH
8697: LD_INT 0
8699: ST_TO_ADDR
// sFac := false ;
8700: LD_ADDR_EXP 66
8704: PUSH
8705: LD_INT 0
8707: ST_TO_ADDR
// sPower := false ;
8708: LD_ADDR_EXP 67
8712: PUSH
8713: LD_INT 0
8715: ST_TO_ADDR
// sRandom := false ;
8716: LD_ADDR_EXP 68
8720: PUSH
8721: LD_INT 0
8723: ST_TO_ADDR
// sShield := false ;
8724: LD_ADDR_EXP 69
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// sTime := false ;
8732: LD_ADDR_EXP 70
8736: PUSH
8737: LD_INT 0
8739: ST_TO_ADDR
// sTools := false ;
8740: LD_ADDR_EXP 71
8744: PUSH
8745: LD_INT 0
8747: ST_TO_ADDR
// sSold := false ;
8748: LD_ADDR_EXP 36
8752: PUSH
8753: LD_INT 0
8755: ST_TO_ADDR
// sDiff := false ;
8756: LD_ADDR_EXP 37
8760: PUSH
8761: LD_INT 0
8763: ST_TO_ADDR
// sFog := false ;
8764: LD_ADDR_EXP 40
8768: PUSH
8769: LD_INT 0
8771: ST_TO_ADDR
// sReset := false ;
8772: LD_ADDR_EXP 41
8776: PUSH
8777: LD_INT 0
8779: ST_TO_ADDR
// sSun := false ;
8780: LD_ADDR_EXP 42
8784: PUSH
8785: LD_INT 0
8787: ST_TO_ADDR
// sTiger := false ;
8788: LD_ADDR_EXP 38
8792: PUSH
8793: LD_INT 0
8795: ST_TO_ADDR
// sBomb := false ;
8796: LD_ADDR_EXP 39
8800: PUSH
8801: LD_INT 0
8803: ST_TO_ADDR
// sWound := false ;
8804: LD_ADDR_EXP 47
8808: PUSH
8809: LD_INT 0
8811: ST_TO_ADDR
// sBetray := false ;
8812: LD_ADDR_EXP 51
8816: PUSH
8817: LD_INT 0
8819: ST_TO_ADDR
// sContamin := false ;
8820: LD_ADDR_EXP 52
8824: PUSH
8825: LD_INT 0
8827: ST_TO_ADDR
// sOil := false ;
8828: LD_ADDR_EXP 54
8832: PUSH
8833: LD_INT 0
8835: ST_TO_ADDR
// sStu := false ;
8836: LD_ADDR_EXP 58
8840: PUSH
8841: LD_INT 0
8843: ST_TO_ADDR
// sBazooka := false ;
8844: LD_ADDR_EXP 61
8848: PUSH
8849: LD_INT 0
8851: ST_TO_ADDR
// sMortar := false ;
8852: LD_ADDR_EXP 62
8856: PUSH
8857: LD_INT 0
8859: ST_TO_ADDR
// sRanger := false ;
8860: LD_ADDR_EXP 72
8864: PUSH
8865: LD_INT 0
8867: ST_TO_ADDR
// sComputer := false ;
8868: LD_ADDR_EXP 73
8872: PUSH
8873: LD_INT 0
8875: ST_TO_ADDR
// s30 := false ;
8876: LD_ADDR_EXP 74
8880: PUSH
8881: LD_INT 0
8883: ST_TO_ADDR
// s60 := false ;
8884: LD_ADDR_EXP 75
8888: PUSH
8889: LD_INT 0
8891: ST_TO_ADDR
// end ;
8892: LD_VAR 0 1
8896: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8897: LD_INT 0
8899: PPUSH
8900: PPUSH
8901: PPUSH
8902: PPUSH
8903: PPUSH
8904: PPUSH
8905: PPUSH
// result := [ ] ;
8906: LD_ADDR_VAR 0 2
8910: PUSH
8911: EMPTY
8912: ST_TO_ADDR
// if campaign_id = 1 then
8913: LD_OWVAR 69
8917: PUSH
8918: LD_INT 1
8920: EQUAL
8921: IFFALSE 12087
// begin case mission_number of 1 :
8923: LD_OWVAR 70
8927: PUSH
8928: LD_INT 1
8930: DOUBLE
8931: EQUAL
8932: IFTRUE 8936
8934: GO 9012
8936: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8937: LD_ADDR_VAR 0 2
8941: PUSH
8942: LD_INT 2
8944: PUSH
8945: LD_INT 4
8947: PUSH
8948: LD_INT 11
8950: PUSH
8951: LD_INT 12
8953: PUSH
8954: LD_INT 15
8956: PUSH
8957: LD_INT 16
8959: PUSH
8960: LD_INT 22
8962: PUSH
8963: LD_INT 23
8965: PUSH
8966: LD_INT 26
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: PUSH
8980: LD_INT 101
8982: PUSH
8983: LD_INT 102
8985: PUSH
8986: LD_INT 106
8988: PUSH
8989: LD_INT 116
8991: PUSH
8992: LD_INT 117
8994: PUSH
8995: LD_INT 118
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: ST_TO_ADDR
9010: GO 12085
9012: LD_INT 2
9014: DOUBLE
9015: EQUAL
9016: IFTRUE 9020
9018: GO 9104
9020: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9021: LD_ADDR_VAR 0 2
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: LD_INT 4
9031: PUSH
9032: LD_INT 11
9034: PUSH
9035: LD_INT 12
9037: PUSH
9038: LD_INT 15
9040: PUSH
9041: LD_INT 16
9043: PUSH
9044: LD_INT 22
9046: PUSH
9047: LD_INT 23
9049: PUSH
9050: LD_INT 26
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: PUSH
9064: LD_INT 101
9066: PUSH
9067: LD_INT 102
9069: PUSH
9070: LD_INT 105
9072: PUSH
9073: LD_INT 106
9075: PUSH
9076: LD_INT 108
9078: PUSH
9079: LD_INT 116
9081: PUSH
9082: LD_INT 117
9084: PUSH
9085: LD_INT 118
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: ST_TO_ADDR
9102: GO 12085
9104: LD_INT 3
9106: DOUBLE
9107: EQUAL
9108: IFTRUE 9112
9110: GO 9200
9112: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9113: LD_ADDR_VAR 0 2
9117: PUSH
9118: LD_INT 2
9120: PUSH
9121: LD_INT 4
9123: PUSH
9124: LD_INT 5
9126: PUSH
9127: LD_INT 11
9129: PUSH
9130: LD_INT 12
9132: PUSH
9133: LD_INT 15
9135: PUSH
9136: LD_INT 16
9138: PUSH
9139: LD_INT 22
9141: PUSH
9142: LD_INT 26
9144: PUSH
9145: LD_INT 36
9147: PUSH
9148: EMPTY
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: PUSH
9160: LD_INT 101
9162: PUSH
9163: LD_INT 102
9165: PUSH
9166: LD_INT 105
9168: PUSH
9169: LD_INT 106
9171: PUSH
9172: LD_INT 108
9174: PUSH
9175: LD_INT 116
9177: PUSH
9178: LD_INT 117
9180: PUSH
9181: LD_INT 118
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: ST_TO_ADDR
9198: GO 12085
9200: LD_INT 4
9202: DOUBLE
9203: EQUAL
9204: IFTRUE 9208
9206: GO 9304
9208: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9209: LD_ADDR_VAR 0 2
9213: PUSH
9214: LD_INT 2
9216: PUSH
9217: LD_INT 4
9219: PUSH
9220: LD_INT 5
9222: PUSH
9223: LD_INT 8
9225: PUSH
9226: LD_INT 11
9228: PUSH
9229: LD_INT 12
9231: PUSH
9232: LD_INT 15
9234: PUSH
9235: LD_INT 16
9237: PUSH
9238: LD_INT 22
9240: PUSH
9241: LD_INT 23
9243: PUSH
9244: LD_INT 26
9246: PUSH
9247: LD_INT 36
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 101
9266: PUSH
9267: LD_INT 102
9269: PUSH
9270: LD_INT 105
9272: PUSH
9273: LD_INT 106
9275: PUSH
9276: LD_INT 108
9278: PUSH
9279: LD_INT 116
9281: PUSH
9282: LD_INT 117
9284: PUSH
9285: LD_INT 118
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: ST_TO_ADDR
9302: GO 12085
9304: LD_INT 5
9306: DOUBLE
9307: EQUAL
9308: IFTRUE 9312
9310: GO 9424
9312: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9313: LD_ADDR_VAR 0 2
9317: PUSH
9318: LD_INT 2
9320: PUSH
9321: LD_INT 4
9323: PUSH
9324: LD_INT 5
9326: PUSH
9327: LD_INT 6
9329: PUSH
9330: LD_INT 8
9332: PUSH
9333: LD_INT 11
9335: PUSH
9336: LD_INT 12
9338: PUSH
9339: LD_INT 15
9341: PUSH
9342: LD_INT 16
9344: PUSH
9345: LD_INT 22
9347: PUSH
9348: LD_INT 23
9350: PUSH
9351: LD_INT 25
9353: PUSH
9354: LD_INT 26
9356: PUSH
9357: LD_INT 36
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 101
9378: PUSH
9379: LD_INT 102
9381: PUSH
9382: LD_INT 105
9384: PUSH
9385: LD_INT 106
9387: PUSH
9388: LD_INT 108
9390: PUSH
9391: LD_INT 109
9393: PUSH
9394: LD_INT 112
9396: PUSH
9397: LD_INT 116
9399: PUSH
9400: LD_INT 117
9402: PUSH
9403: LD_INT 118
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: ST_TO_ADDR
9422: GO 12085
9424: LD_INT 6
9426: DOUBLE
9427: EQUAL
9428: IFTRUE 9432
9430: GO 9564
9432: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9433: LD_ADDR_VAR 0 2
9437: PUSH
9438: LD_INT 2
9440: PUSH
9441: LD_INT 4
9443: PUSH
9444: LD_INT 5
9446: PUSH
9447: LD_INT 6
9449: PUSH
9450: LD_INT 8
9452: PUSH
9453: LD_INT 11
9455: PUSH
9456: LD_INT 12
9458: PUSH
9459: LD_INT 15
9461: PUSH
9462: LD_INT 16
9464: PUSH
9465: LD_INT 20
9467: PUSH
9468: LD_INT 21
9470: PUSH
9471: LD_INT 22
9473: PUSH
9474: LD_INT 23
9476: PUSH
9477: LD_INT 25
9479: PUSH
9480: LD_INT 26
9482: PUSH
9483: LD_INT 30
9485: PUSH
9486: LD_INT 31
9488: PUSH
9489: LD_INT 32
9491: PUSH
9492: LD_INT 36
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 101
9518: PUSH
9519: LD_INT 102
9521: PUSH
9522: LD_INT 105
9524: PUSH
9525: LD_INT 106
9527: PUSH
9528: LD_INT 108
9530: PUSH
9531: LD_INT 109
9533: PUSH
9534: LD_INT 112
9536: PUSH
9537: LD_INT 116
9539: PUSH
9540: LD_INT 117
9542: PUSH
9543: LD_INT 118
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: ST_TO_ADDR
9562: GO 12085
9564: LD_INT 7
9566: DOUBLE
9567: EQUAL
9568: IFTRUE 9572
9570: GO 9684
9572: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9573: LD_ADDR_VAR 0 2
9577: PUSH
9578: LD_INT 2
9580: PUSH
9581: LD_INT 4
9583: PUSH
9584: LD_INT 5
9586: PUSH
9587: LD_INT 7
9589: PUSH
9590: LD_INT 11
9592: PUSH
9593: LD_INT 12
9595: PUSH
9596: LD_INT 15
9598: PUSH
9599: LD_INT 16
9601: PUSH
9602: LD_INT 20
9604: PUSH
9605: LD_INT 21
9607: PUSH
9608: LD_INT 22
9610: PUSH
9611: LD_INT 23
9613: PUSH
9614: LD_INT 25
9616: PUSH
9617: LD_INT 26
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: PUSH
9636: LD_INT 101
9638: PUSH
9639: LD_INT 102
9641: PUSH
9642: LD_INT 103
9644: PUSH
9645: LD_INT 105
9647: PUSH
9648: LD_INT 106
9650: PUSH
9651: LD_INT 108
9653: PUSH
9654: LD_INT 112
9656: PUSH
9657: LD_INT 116
9659: PUSH
9660: LD_INT 117
9662: PUSH
9663: LD_INT 118
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: ST_TO_ADDR
9682: GO 12085
9684: LD_INT 8
9686: DOUBLE
9687: EQUAL
9688: IFTRUE 9692
9690: GO 9832
9692: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9693: LD_ADDR_VAR 0 2
9697: PUSH
9698: LD_INT 2
9700: PUSH
9701: LD_INT 4
9703: PUSH
9704: LD_INT 5
9706: PUSH
9707: LD_INT 6
9709: PUSH
9710: LD_INT 7
9712: PUSH
9713: LD_INT 8
9715: PUSH
9716: LD_INT 11
9718: PUSH
9719: LD_INT 12
9721: PUSH
9722: LD_INT 15
9724: PUSH
9725: LD_INT 16
9727: PUSH
9728: LD_INT 20
9730: PUSH
9731: LD_INT 21
9733: PUSH
9734: LD_INT 22
9736: PUSH
9737: LD_INT 23
9739: PUSH
9740: LD_INT 25
9742: PUSH
9743: LD_INT 26
9745: PUSH
9746: LD_INT 30
9748: PUSH
9749: LD_INT 31
9751: PUSH
9752: LD_INT 32
9754: PUSH
9755: LD_INT 36
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 101
9782: PUSH
9783: LD_INT 102
9785: PUSH
9786: LD_INT 103
9788: PUSH
9789: LD_INT 105
9791: PUSH
9792: LD_INT 106
9794: PUSH
9795: LD_INT 108
9797: PUSH
9798: LD_INT 109
9800: PUSH
9801: LD_INT 112
9803: PUSH
9804: LD_INT 116
9806: PUSH
9807: LD_INT 117
9809: PUSH
9810: LD_INT 118
9812: PUSH
9813: EMPTY
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: ST_TO_ADDR
9830: GO 12085
9832: LD_INT 9
9834: DOUBLE
9835: EQUAL
9836: IFTRUE 9840
9838: GO 9988
9840: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9841: LD_ADDR_VAR 0 2
9845: PUSH
9846: LD_INT 2
9848: PUSH
9849: LD_INT 4
9851: PUSH
9852: LD_INT 5
9854: PUSH
9855: LD_INT 6
9857: PUSH
9858: LD_INT 7
9860: PUSH
9861: LD_INT 8
9863: PUSH
9864: LD_INT 11
9866: PUSH
9867: LD_INT 12
9869: PUSH
9870: LD_INT 15
9872: PUSH
9873: LD_INT 16
9875: PUSH
9876: LD_INT 20
9878: PUSH
9879: LD_INT 21
9881: PUSH
9882: LD_INT 22
9884: PUSH
9885: LD_INT 23
9887: PUSH
9888: LD_INT 25
9890: PUSH
9891: LD_INT 26
9893: PUSH
9894: LD_INT 28
9896: PUSH
9897: LD_INT 30
9899: PUSH
9900: LD_INT 31
9902: PUSH
9903: LD_INT 32
9905: PUSH
9906: LD_INT 36
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 101
9934: PUSH
9935: LD_INT 102
9937: PUSH
9938: LD_INT 103
9940: PUSH
9941: LD_INT 105
9943: PUSH
9944: LD_INT 106
9946: PUSH
9947: LD_INT 108
9949: PUSH
9950: LD_INT 109
9952: PUSH
9953: LD_INT 112
9955: PUSH
9956: LD_INT 114
9958: PUSH
9959: LD_INT 116
9961: PUSH
9962: LD_INT 117
9964: PUSH
9965: LD_INT 118
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: ST_TO_ADDR
9986: GO 12085
9988: LD_INT 10
9990: DOUBLE
9991: EQUAL
9992: IFTRUE 9996
9994: GO 10192
9996: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9997: LD_ADDR_VAR 0 2
10001: PUSH
10002: LD_INT 2
10004: PUSH
10005: LD_INT 4
10007: PUSH
10008: LD_INT 5
10010: PUSH
10011: LD_INT 6
10013: PUSH
10014: LD_INT 7
10016: PUSH
10017: LD_INT 8
10019: PUSH
10020: LD_INT 9
10022: PUSH
10023: LD_INT 10
10025: PUSH
10026: LD_INT 11
10028: PUSH
10029: LD_INT 12
10031: PUSH
10032: LD_INT 13
10034: PUSH
10035: LD_INT 14
10037: PUSH
10038: LD_INT 15
10040: PUSH
10041: LD_INT 16
10043: PUSH
10044: LD_INT 17
10046: PUSH
10047: LD_INT 18
10049: PUSH
10050: LD_INT 19
10052: PUSH
10053: LD_INT 20
10055: PUSH
10056: LD_INT 21
10058: PUSH
10059: LD_INT 22
10061: PUSH
10062: LD_INT 23
10064: PUSH
10065: LD_INT 24
10067: PUSH
10068: LD_INT 25
10070: PUSH
10071: LD_INT 26
10073: PUSH
10074: LD_INT 28
10076: PUSH
10077: LD_INT 30
10079: PUSH
10080: LD_INT 31
10082: PUSH
10083: LD_INT 32
10085: PUSH
10086: LD_INT 36
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: PUSH
10120: LD_INT 101
10122: PUSH
10123: LD_INT 102
10125: PUSH
10126: LD_INT 103
10128: PUSH
10129: LD_INT 104
10131: PUSH
10132: LD_INT 105
10134: PUSH
10135: LD_INT 106
10137: PUSH
10138: LD_INT 107
10140: PUSH
10141: LD_INT 108
10143: PUSH
10144: LD_INT 109
10146: PUSH
10147: LD_INT 110
10149: PUSH
10150: LD_INT 111
10152: PUSH
10153: LD_INT 112
10155: PUSH
10156: LD_INT 114
10158: PUSH
10159: LD_INT 116
10161: PUSH
10162: LD_INT 117
10164: PUSH
10165: LD_INT 118
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: ST_TO_ADDR
10190: GO 12085
10192: LD_INT 11
10194: DOUBLE
10195: EQUAL
10196: IFTRUE 10200
10198: GO 10404
10200: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10201: LD_ADDR_VAR 0 2
10205: PUSH
10206: LD_INT 2
10208: PUSH
10209: LD_INT 3
10211: PUSH
10212: LD_INT 4
10214: PUSH
10215: LD_INT 5
10217: PUSH
10218: LD_INT 6
10220: PUSH
10221: LD_INT 7
10223: PUSH
10224: LD_INT 8
10226: PUSH
10227: LD_INT 9
10229: PUSH
10230: LD_INT 10
10232: PUSH
10233: LD_INT 11
10235: PUSH
10236: LD_INT 12
10238: PUSH
10239: LD_INT 13
10241: PUSH
10242: LD_INT 14
10244: PUSH
10245: LD_INT 15
10247: PUSH
10248: LD_INT 16
10250: PUSH
10251: LD_INT 17
10253: PUSH
10254: LD_INT 18
10256: PUSH
10257: LD_INT 19
10259: PUSH
10260: LD_INT 20
10262: PUSH
10263: LD_INT 21
10265: PUSH
10266: LD_INT 22
10268: PUSH
10269: LD_INT 23
10271: PUSH
10272: LD_INT 24
10274: PUSH
10275: LD_INT 25
10277: PUSH
10278: LD_INT 26
10280: PUSH
10281: LD_INT 28
10283: PUSH
10284: LD_INT 30
10286: PUSH
10287: LD_INT 31
10289: PUSH
10290: LD_INT 32
10292: PUSH
10293: LD_INT 34
10295: PUSH
10296: LD_INT 36
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: PUSH
10332: LD_INT 101
10334: PUSH
10335: LD_INT 102
10337: PUSH
10338: LD_INT 103
10340: PUSH
10341: LD_INT 104
10343: PUSH
10344: LD_INT 105
10346: PUSH
10347: LD_INT 106
10349: PUSH
10350: LD_INT 107
10352: PUSH
10353: LD_INT 108
10355: PUSH
10356: LD_INT 109
10358: PUSH
10359: LD_INT 110
10361: PUSH
10362: LD_INT 111
10364: PUSH
10365: LD_INT 112
10367: PUSH
10368: LD_INT 114
10370: PUSH
10371: LD_INT 116
10373: PUSH
10374: LD_INT 117
10376: PUSH
10377: LD_INT 118
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: ST_TO_ADDR
10402: GO 12085
10404: LD_INT 12
10406: DOUBLE
10407: EQUAL
10408: IFTRUE 10412
10410: GO 10632
10412: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10413: LD_ADDR_VAR 0 2
10417: PUSH
10418: LD_INT 1
10420: PUSH
10421: LD_INT 2
10423: PUSH
10424: LD_INT 3
10426: PUSH
10427: LD_INT 4
10429: PUSH
10430: LD_INT 5
10432: PUSH
10433: LD_INT 6
10435: PUSH
10436: LD_INT 7
10438: PUSH
10439: LD_INT 8
10441: PUSH
10442: LD_INT 9
10444: PUSH
10445: LD_INT 10
10447: PUSH
10448: LD_INT 11
10450: PUSH
10451: LD_INT 12
10453: PUSH
10454: LD_INT 13
10456: PUSH
10457: LD_INT 14
10459: PUSH
10460: LD_INT 15
10462: PUSH
10463: LD_INT 16
10465: PUSH
10466: LD_INT 17
10468: PUSH
10469: LD_INT 18
10471: PUSH
10472: LD_INT 19
10474: PUSH
10475: LD_INT 20
10477: PUSH
10478: LD_INT 21
10480: PUSH
10481: LD_INT 22
10483: PUSH
10484: LD_INT 23
10486: PUSH
10487: LD_INT 24
10489: PUSH
10490: LD_INT 25
10492: PUSH
10493: LD_INT 26
10495: PUSH
10496: LD_INT 27
10498: PUSH
10499: LD_INT 28
10501: PUSH
10502: LD_INT 30
10504: PUSH
10505: LD_INT 31
10507: PUSH
10508: LD_INT 32
10510: PUSH
10511: LD_INT 33
10513: PUSH
10514: LD_INT 34
10516: PUSH
10517: LD_INT 36
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 101
10558: PUSH
10559: LD_INT 102
10561: PUSH
10562: LD_INT 103
10564: PUSH
10565: LD_INT 104
10567: PUSH
10568: LD_INT 105
10570: PUSH
10571: LD_INT 106
10573: PUSH
10574: LD_INT 107
10576: PUSH
10577: LD_INT 108
10579: PUSH
10580: LD_INT 109
10582: PUSH
10583: LD_INT 110
10585: PUSH
10586: LD_INT 111
10588: PUSH
10589: LD_INT 112
10591: PUSH
10592: LD_INT 113
10594: PUSH
10595: LD_INT 114
10597: PUSH
10598: LD_INT 116
10600: PUSH
10601: LD_INT 117
10603: PUSH
10604: LD_INT 118
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: ST_TO_ADDR
10630: GO 12085
10632: LD_INT 13
10634: DOUBLE
10635: EQUAL
10636: IFTRUE 10640
10638: GO 10848
10640: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10641: LD_ADDR_VAR 0 2
10645: PUSH
10646: LD_INT 1
10648: PUSH
10649: LD_INT 2
10651: PUSH
10652: LD_INT 3
10654: PUSH
10655: LD_INT 4
10657: PUSH
10658: LD_INT 5
10660: PUSH
10661: LD_INT 8
10663: PUSH
10664: LD_INT 9
10666: PUSH
10667: LD_INT 10
10669: PUSH
10670: LD_INT 11
10672: PUSH
10673: LD_INT 12
10675: PUSH
10676: LD_INT 14
10678: PUSH
10679: LD_INT 15
10681: PUSH
10682: LD_INT 16
10684: PUSH
10685: LD_INT 17
10687: PUSH
10688: LD_INT 18
10690: PUSH
10691: LD_INT 19
10693: PUSH
10694: LD_INT 20
10696: PUSH
10697: LD_INT 21
10699: PUSH
10700: LD_INT 22
10702: PUSH
10703: LD_INT 23
10705: PUSH
10706: LD_INT 24
10708: PUSH
10709: LD_INT 25
10711: PUSH
10712: LD_INT 26
10714: PUSH
10715: LD_INT 27
10717: PUSH
10718: LD_INT 28
10720: PUSH
10721: LD_INT 30
10723: PUSH
10724: LD_INT 31
10726: PUSH
10727: LD_INT 32
10729: PUSH
10730: LD_INT 33
10732: PUSH
10733: LD_INT 34
10735: PUSH
10736: LD_INT 36
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 101
10774: PUSH
10775: LD_INT 102
10777: PUSH
10778: LD_INT 103
10780: PUSH
10781: LD_INT 104
10783: PUSH
10784: LD_INT 105
10786: PUSH
10787: LD_INT 106
10789: PUSH
10790: LD_INT 107
10792: PUSH
10793: LD_INT 108
10795: PUSH
10796: LD_INT 109
10798: PUSH
10799: LD_INT 110
10801: PUSH
10802: LD_INT 111
10804: PUSH
10805: LD_INT 112
10807: PUSH
10808: LD_INT 113
10810: PUSH
10811: LD_INT 114
10813: PUSH
10814: LD_INT 116
10816: PUSH
10817: LD_INT 117
10819: PUSH
10820: LD_INT 118
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: ST_TO_ADDR
10846: GO 12085
10848: LD_INT 14
10850: DOUBLE
10851: EQUAL
10852: IFTRUE 10856
10854: GO 11080
10856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10857: LD_ADDR_VAR 0 2
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: LD_INT 2
10867: PUSH
10868: LD_INT 3
10870: PUSH
10871: LD_INT 4
10873: PUSH
10874: LD_INT 5
10876: PUSH
10877: LD_INT 6
10879: PUSH
10880: LD_INT 7
10882: PUSH
10883: LD_INT 8
10885: PUSH
10886: LD_INT 9
10888: PUSH
10889: LD_INT 10
10891: PUSH
10892: LD_INT 11
10894: PUSH
10895: LD_INT 12
10897: PUSH
10898: LD_INT 13
10900: PUSH
10901: LD_INT 14
10903: PUSH
10904: LD_INT 15
10906: PUSH
10907: LD_INT 16
10909: PUSH
10910: LD_INT 17
10912: PUSH
10913: LD_INT 18
10915: PUSH
10916: LD_INT 19
10918: PUSH
10919: LD_INT 20
10921: PUSH
10922: LD_INT 21
10924: PUSH
10925: LD_INT 22
10927: PUSH
10928: LD_INT 23
10930: PUSH
10931: LD_INT 24
10933: PUSH
10934: LD_INT 25
10936: PUSH
10937: LD_INT 26
10939: PUSH
10940: LD_INT 27
10942: PUSH
10943: LD_INT 28
10945: PUSH
10946: LD_INT 29
10948: PUSH
10949: LD_INT 30
10951: PUSH
10952: LD_INT 31
10954: PUSH
10955: LD_INT 32
10957: PUSH
10958: LD_INT 33
10960: PUSH
10961: LD_INT 34
10963: PUSH
10964: LD_INT 36
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 101
11006: PUSH
11007: LD_INT 102
11009: PUSH
11010: LD_INT 103
11012: PUSH
11013: LD_INT 104
11015: PUSH
11016: LD_INT 105
11018: PUSH
11019: LD_INT 106
11021: PUSH
11022: LD_INT 107
11024: PUSH
11025: LD_INT 108
11027: PUSH
11028: LD_INT 109
11030: PUSH
11031: LD_INT 110
11033: PUSH
11034: LD_INT 111
11036: PUSH
11037: LD_INT 112
11039: PUSH
11040: LD_INT 113
11042: PUSH
11043: LD_INT 114
11045: PUSH
11046: LD_INT 116
11048: PUSH
11049: LD_INT 117
11051: PUSH
11052: LD_INT 118
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: ST_TO_ADDR
11078: GO 12085
11080: LD_INT 15
11082: DOUBLE
11083: EQUAL
11084: IFTRUE 11088
11086: GO 11312
11088: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11089: LD_ADDR_VAR 0 2
11093: PUSH
11094: LD_INT 1
11096: PUSH
11097: LD_INT 2
11099: PUSH
11100: LD_INT 3
11102: PUSH
11103: LD_INT 4
11105: PUSH
11106: LD_INT 5
11108: PUSH
11109: LD_INT 6
11111: PUSH
11112: LD_INT 7
11114: PUSH
11115: LD_INT 8
11117: PUSH
11118: LD_INT 9
11120: PUSH
11121: LD_INT 10
11123: PUSH
11124: LD_INT 11
11126: PUSH
11127: LD_INT 12
11129: PUSH
11130: LD_INT 13
11132: PUSH
11133: LD_INT 14
11135: PUSH
11136: LD_INT 15
11138: PUSH
11139: LD_INT 16
11141: PUSH
11142: LD_INT 17
11144: PUSH
11145: LD_INT 18
11147: PUSH
11148: LD_INT 19
11150: PUSH
11151: LD_INT 20
11153: PUSH
11154: LD_INT 21
11156: PUSH
11157: LD_INT 22
11159: PUSH
11160: LD_INT 23
11162: PUSH
11163: LD_INT 24
11165: PUSH
11166: LD_INT 25
11168: PUSH
11169: LD_INT 26
11171: PUSH
11172: LD_INT 27
11174: PUSH
11175: LD_INT 28
11177: PUSH
11178: LD_INT 29
11180: PUSH
11181: LD_INT 30
11183: PUSH
11184: LD_INT 31
11186: PUSH
11187: LD_INT 32
11189: PUSH
11190: LD_INT 33
11192: PUSH
11193: LD_INT 34
11195: PUSH
11196: LD_INT 36
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 101
11238: PUSH
11239: LD_INT 102
11241: PUSH
11242: LD_INT 103
11244: PUSH
11245: LD_INT 104
11247: PUSH
11248: LD_INT 105
11250: PUSH
11251: LD_INT 106
11253: PUSH
11254: LD_INT 107
11256: PUSH
11257: LD_INT 108
11259: PUSH
11260: LD_INT 109
11262: PUSH
11263: LD_INT 110
11265: PUSH
11266: LD_INT 111
11268: PUSH
11269: LD_INT 112
11271: PUSH
11272: LD_INT 113
11274: PUSH
11275: LD_INT 114
11277: PUSH
11278: LD_INT 116
11280: PUSH
11281: LD_INT 117
11283: PUSH
11284: LD_INT 118
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: ST_TO_ADDR
11310: GO 12085
11312: LD_INT 16
11314: DOUBLE
11315: EQUAL
11316: IFTRUE 11320
11318: GO 11456
11320: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11321: LD_ADDR_VAR 0 2
11325: PUSH
11326: LD_INT 2
11328: PUSH
11329: LD_INT 4
11331: PUSH
11332: LD_INT 5
11334: PUSH
11335: LD_INT 7
11337: PUSH
11338: LD_INT 11
11340: PUSH
11341: LD_INT 12
11343: PUSH
11344: LD_INT 15
11346: PUSH
11347: LD_INT 16
11349: PUSH
11350: LD_INT 20
11352: PUSH
11353: LD_INT 21
11355: PUSH
11356: LD_INT 22
11358: PUSH
11359: LD_INT 23
11361: PUSH
11362: LD_INT 25
11364: PUSH
11365: LD_INT 26
11367: PUSH
11368: LD_INT 30
11370: PUSH
11371: LD_INT 31
11373: PUSH
11374: LD_INT 32
11376: PUSH
11377: LD_INT 33
11379: PUSH
11380: LD_INT 34
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: PUSH
11404: LD_INT 101
11406: PUSH
11407: LD_INT 102
11409: PUSH
11410: LD_INT 103
11412: PUSH
11413: LD_INT 106
11415: PUSH
11416: LD_INT 108
11418: PUSH
11419: LD_INT 112
11421: PUSH
11422: LD_INT 113
11424: PUSH
11425: LD_INT 114
11427: PUSH
11428: LD_INT 116
11430: PUSH
11431: LD_INT 117
11433: PUSH
11434: LD_INT 118
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: ST_TO_ADDR
11454: GO 12085
11456: LD_INT 17
11458: DOUBLE
11459: EQUAL
11460: IFTRUE 11464
11462: GO 11688
11464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11465: LD_ADDR_VAR 0 2
11469: PUSH
11470: LD_INT 1
11472: PUSH
11473: LD_INT 2
11475: PUSH
11476: LD_INT 3
11478: PUSH
11479: LD_INT 4
11481: PUSH
11482: LD_INT 5
11484: PUSH
11485: LD_INT 6
11487: PUSH
11488: LD_INT 7
11490: PUSH
11491: LD_INT 8
11493: PUSH
11494: LD_INT 9
11496: PUSH
11497: LD_INT 10
11499: PUSH
11500: LD_INT 11
11502: PUSH
11503: LD_INT 12
11505: PUSH
11506: LD_INT 13
11508: PUSH
11509: LD_INT 14
11511: PUSH
11512: LD_INT 15
11514: PUSH
11515: LD_INT 16
11517: PUSH
11518: LD_INT 17
11520: PUSH
11521: LD_INT 18
11523: PUSH
11524: LD_INT 19
11526: PUSH
11527: LD_INT 20
11529: PUSH
11530: LD_INT 21
11532: PUSH
11533: LD_INT 22
11535: PUSH
11536: LD_INT 23
11538: PUSH
11539: LD_INT 24
11541: PUSH
11542: LD_INT 25
11544: PUSH
11545: LD_INT 26
11547: PUSH
11548: LD_INT 27
11550: PUSH
11551: LD_INT 28
11553: PUSH
11554: LD_INT 29
11556: PUSH
11557: LD_INT 30
11559: PUSH
11560: LD_INT 31
11562: PUSH
11563: LD_INT 32
11565: PUSH
11566: LD_INT 33
11568: PUSH
11569: LD_INT 34
11571: PUSH
11572: LD_INT 36
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 101
11614: PUSH
11615: LD_INT 102
11617: PUSH
11618: LD_INT 103
11620: PUSH
11621: LD_INT 104
11623: PUSH
11624: LD_INT 105
11626: PUSH
11627: LD_INT 106
11629: PUSH
11630: LD_INT 107
11632: PUSH
11633: LD_INT 108
11635: PUSH
11636: LD_INT 109
11638: PUSH
11639: LD_INT 110
11641: PUSH
11642: LD_INT 111
11644: PUSH
11645: LD_INT 112
11647: PUSH
11648: LD_INT 113
11650: PUSH
11651: LD_INT 114
11653: PUSH
11654: LD_INT 116
11656: PUSH
11657: LD_INT 117
11659: PUSH
11660: LD_INT 118
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: ST_TO_ADDR
11686: GO 12085
11688: LD_INT 18
11690: DOUBLE
11691: EQUAL
11692: IFTRUE 11696
11694: GO 11844
11696: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11697: LD_ADDR_VAR 0 2
11701: PUSH
11702: LD_INT 2
11704: PUSH
11705: LD_INT 4
11707: PUSH
11708: LD_INT 5
11710: PUSH
11711: LD_INT 7
11713: PUSH
11714: LD_INT 11
11716: PUSH
11717: LD_INT 12
11719: PUSH
11720: LD_INT 15
11722: PUSH
11723: LD_INT 16
11725: PUSH
11726: LD_INT 20
11728: PUSH
11729: LD_INT 21
11731: PUSH
11732: LD_INT 22
11734: PUSH
11735: LD_INT 23
11737: PUSH
11738: LD_INT 25
11740: PUSH
11741: LD_INT 26
11743: PUSH
11744: LD_INT 30
11746: PUSH
11747: LD_INT 31
11749: PUSH
11750: LD_INT 32
11752: PUSH
11753: LD_INT 33
11755: PUSH
11756: LD_INT 34
11758: PUSH
11759: LD_INT 35
11761: PUSH
11762: LD_INT 36
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: PUSH
11788: LD_INT 101
11790: PUSH
11791: LD_INT 102
11793: PUSH
11794: LD_INT 103
11796: PUSH
11797: LD_INT 106
11799: PUSH
11800: LD_INT 108
11802: PUSH
11803: LD_INT 112
11805: PUSH
11806: LD_INT 113
11808: PUSH
11809: LD_INT 114
11811: PUSH
11812: LD_INT 115
11814: PUSH
11815: LD_INT 116
11817: PUSH
11818: LD_INT 117
11820: PUSH
11821: LD_INT 118
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: ST_TO_ADDR
11842: GO 12085
11844: LD_INT 19
11846: DOUBLE
11847: EQUAL
11848: IFTRUE 11852
11850: GO 12084
11852: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11853: LD_ADDR_VAR 0 2
11857: PUSH
11858: LD_INT 1
11860: PUSH
11861: LD_INT 2
11863: PUSH
11864: LD_INT 3
11866: PUSH
11867: LD_INT 4
11869: PUSH
11870: LD_INT 5
11872: PUSH
11873: LD_INT 6
11875: PUSH
11876: LD_INT 7
11878: PUSH
11879: LD_INT 8
11881: PUSH
11882: LD_INT 9
11884: PUSH
11885: LD_INT 10
11887: PUSH
11888: LD_INT 11
11890: PUSH
11891: LD_INT 12
11893: PUSH
11894: LD_INT 13
11896: PUSH
11897: LD_INT 14
11899: PUSH
11900: LD_INT 15
11902: PUSH
11903: LD_INT 16
11905: PUSH
11906: LD_INT 17
11908: PUSH
11909: LD_INT 18
11911: PUSH
11912: LD_INT 19
11914: PUSH
11915: LD_INT 20
11917: PUSH
11918: LD_INT 21
11920: PUSH
11921: LD_INT 22
11923: PUSH
11924: LD_INT 23
11926: PUSH
11927: LD_INT 24
11929: PUSH
11930: LD_INT 25
11932: PUSH
11933: LD_INT 26
11935: PUSH
11936: LD_INT 27
11938: PUSH
11939: LD_INT 28
11941: PUSH
11942: LD_INT 29
11944: PUSH
11945: LD_INT 30
11947: PUSH
11948: LD_INT 31
11950: PUSH
11951: LD_INT 32
11953: PUSH
11954: LD_INT 33
11956: PUSH
11957: LD_INT 34
11959: PUSH
11960: LD_INT 35
11962: PUSH
11963: LD_INT 36
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 101
12006: PUSH
12007: LD_INT 102
12009: PUSH
12010: LD_INT 103
12012: PUSH
12013: LD_INT 104
12015: PUSH
12016: LD_INT 105
12018: PUSH
12019: LD_INT 106
12021: PUSH
12022: LD_INT 107
12024: PUSH
12025: LD_INT 108
12027: PUSH
12028: LD_INT 109
12030: PUSH
12031: LD_INT 110
12033: PUSH
12034: LD_INT 111
12036: PUSH
12037: LD_INT 112
12039: PUSH
12040: LD_INT 113
12042: PUSH
12043: LD_INT 114
12045: PUSH
12046: LD_INT 115
12048: PUSH
12049: LD_INT 116
12051: PUSH
12052: LD_INT 117
12054: PUSH
12055: LD_INT 118
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: ST_TO_ADDR
12082: GO 12085
12084: POP
// end else
12085: GO 12316
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12087: LD_ADDR_VAR 0 2
12091: PUSH
12092: LD_INT 1
12094: PUSH
12095: LD_INT 2
12097: PUSH
12098: LD_INT 3
12100: PUSH
12101: LD_INT 4
12103: PUSH
12104: LD_INT 5
12106: PUSH
12107: LD_INT 6
12109: PUSH
12110: LD_INT 7
12112: PUSH
12113: LD_INT 8
12115: PUSH
12116: LD_INT 9
12118: PUSH
12119: LD_INT 10
12121: PUSH
12122: LD_INT 11
12124: PUSH
12125: LD_INT 12
12127: PUSH
12128: LD_INT 13
12130: PUSH
12131: LD_INT 14
12133: PUSH
12134: LD_INT 15
12136: PUSH
12137: LD_INT 16
12139: PUSH
12140: LD_INT 17
12142: PUSH
12143: LD_INT 18
12145: PUSH
12146: LD_INT 19
12148: PUSH
12149: LD_INT 20
12151: PUSH
12152: LD_INT 21
12154: PUSH
12155: LD_INT 22
12157: PUSH
12158: LD_INT 23
12160: PUSH
12161: LD_INT 24
12163: PUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 26
12169: PUSH
12170: LD_INT 27
12172: PUSH
12173: LD_INT 28
12175: PUSH
12176: LD_INT 29
12178: PUSH
12179: LD_INT 30
12181: PUSH
12182: LD_INT 31
12184: PUSH
12185: LD_INT 32
12187: PUSH
12188: LD_INT 33
12190: PUSH
12191: LD_INT 34
12193: PUSH
12194: LD_INT 35
12196: PUSH
12197: LD_INT 36
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: PUSH
12238: LD_INT 101
12240: PUSH
12241: LD_INT 102
12243: PUSH
12244: LD_INT 103
12246: PUSH
12247: LD_INT 104
12249: PUSH
12250: LD_INT 105
12252: PUSH
12253: LD_INT 106
12255: PUSH
12256: LD_INT 107
12258: PUSH
12259: LD_INT 108
12261: PUSH
12262: LD_INT 109
12264: PUSH
12265: LD_INT 110
12267: PUSH
12268: LD_INT 111
12270: PUSH
12271: LD_INT 112
12273: PUSH
12274: LD_INT 113
12276: PUSH
12277: LD_INT 114
12279: PUSH
12280: LD_INT 115
12282: PUSH
12283: LD_INT 116
12285: PUSH
12286: LD_INT 117
12288: PUSH
12289: LD_INT 118
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: ST_TO_ADDR
// if result then
12316: LD_VAR 0 2
12320: IFFALSE 13106
// begin normal :=  ;
12322: LD_ADDR_VAR 0 5
12326: PUSH
12327: LD_STRING 
12329: ST_TO_ADDR
// hardcore :=  ;
12330: LD_ADDR_VAR 0 6
12334: PUSH
12335: LD_STRING 
12337: ST_TO_ADDR
// active :=  ;
12338: LD_ADDR_VAR 0 7
12342: PUSH
12343: LD_STRING 
12345: ST_TO_ADDR
// for i = 1 to normalCounter do
12346: LD_ADDR_VAR 0 8
12350: PUSH
12351: DOUBLE
12352: LD_INT 1
12354: DEC
12355: ST_TO_ADDR
12356: LD_EXP 20
12360: PUSH
12361: FOR_TO
12362: IFFALSE 12463
// begin tmp := 0 ;
12364: LD_ADDR_VAR 0 3
12368: PUSH
12369: LD_STRING 0
12371: ST_TO_ADDR
// if result [ 1 ] then
12372: LD_VAR 0 2
12376: PUSH
12377: LD_INT 1
12379: ARRAY
12380: IFFALSE 12445
// if result [ 1 ] [ 1 ] = i then
12382: LD_VAR 0 2
12386: PUSH
12387: LD_INT 1
12389: ARRAY
12390: PUSH
12391: LD_INT 1
12393: ARRAY
12394: PUSH
12395: LD_VAR 0 8
12399: EQUAL
12400: IFFALSE 12445
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12402: LD_ADDR_VAR 0 2
12406: PUSH
12407: LD_VAR 0 2
12411: PPUSH
12412: LD_INT 1
12414: PPUSH
12415: LD_VAR 0 2
12419: PUSH
12420: LD_INT 1
12422: ARRAY
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 3
12431: PPUSH
12432: CALL_OW 1
12436: ST_TO_ADDR
// tmp := 1 ;
12437: LD_ADDR_VAR 0 3
12441: PUSH
12442: LD_STRING 1
12444: ST_TO_ADDR
// end ; normal := normal & tmp ;
12445: LD_ADDR_VAR 0 5
12449: PUSH
12450: LD_VAR 0 5
12454: PUSH
12455: LD_VAR 0 3
12459: STR
12460: ST_TO_ADDR
// end ;
12461: GO 12361
12463: POP
12464: POP
// for i = 1 to hardcoreCounter do
12465: LD_ADDR_VAR 0 8
12469: PUSH
12470: DOUBLE
12471: LD_INT 1
12473: DEC
12474: ST_TO_ADDR
12475: LD_EXP 21
12479: PUSH
12480: FOR_TO
12481: IFFALSE 12586
// begin tmp := 0 ;
12483: LD_ADDR_VAR 0 3
12487: PUSH
12488: LD_STRING 0
12490: ST_TO_ADDR
// if result [ 2 ] then
12491: LD_VAR 0 2
12495: PUSH
12496: LD_INT 2
12498: ARRAY
12499: IFFALSE 12568
// if result [ 2 ] [ 1 ] = 100 + i then
12501: LD_VAR 0 2
12505: PUSH
12506: LD_INT 2
12508: ARRAY
12509: PUSH
12510: LD_INT 1
12512: ARRAY
12513: PUSH
12514: LD_INT 100
12516: PUSH
12517: LD_VAR 0 8
12521: PLUS
12522: EQUAL
12523: IFFALSE 12568
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12525: LD_ADDR_VAR 0 2
12529: PUSH
12530: LD_VAR 0 2
12534: PPUSH
12535: LD_INT 2
12537: PPUSH
12538: LD_VAR 0 2
12542: PUSH
12543: LD_INT 2
12545: ARRAY
12546: PPUSH
12547: LD_INT 1
12549: PPUSH
12550: CALL_OW 3
12554: PPUSH
12555: CALL_OW 1
12559: ST_TO_ADDR
// tmp := 1 ;
12560: LD_ADDR_VAR 0 3
12564: PUSH
12565: LD_STRING 1
12567: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12568: LD_ADDR_VAR 0 6
12572: PUSH
12573: LD_VAR 0 6
12577: PUSH
12578: LD_VAR 0 3
12582: STR
12583: ST_TO_ADDR
// end ;
12584: GO 12480
12586: POP
12587: POP
// if isGameLoad then
12588: LD_VAR 0 1
12592: IFFALSE 13067
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12594: LD_ADDR_VAR 0 4
12598: PUSH
12599: LD_EXP 24
12603: PUSH
12604: LD_EXP 23
12608: PUSH
12609: LD_EXP 25
12613: PUSH
12614: LD_EXP 22
12618: PUSH
12619: LD_EXP 26
12623: PUSH
12624: LD_EXP 27
12628: PUSH
12629: LD_EXP 28
12633: PUSH
12634: LD_EXP 29
12638: PUSH
12639: LD_EXP 30
12643: PUSH
12644: LD_EXP 31
12648: PUSH
12649: LD_EXP 32
12653: PUSH
12654: LD_EXP 33
12658: PUSH
12659: LD_EXP 34
12663: PUSH
12664: LD_EXP 35
12668: PUSH
12669: LD_EXP 43
12673: PUSH
12674: LD_EXP 44
12678: PUSH
12679: LD_EXP 45
12683: PUSH
12684: LD_EXP 46
12688: PUSH
12689: LD_EXP 48
12693: PUSH
12694: LD_EXP 49
12698: PUSH
12699: LD_EXP 50
12703: PUSH
12704: LD_EXP 53
12708: PUSH
12709: LD_EXP 55
12713: PUSH
12714: LD_EXP 56
12718: PUSH
12719: LD_EXP 57
12723: PUSH
12724: LD_EXP 59
12728: PUSH
12729: LD_EXP 60
12733: PUSH
12734: LD_EXP 63
12738: PUSH
12739: LD_EXP 64
12743: PUSH
12744: LD_EXP 65
12748: PUSH
12749: LD_EXP 66
12753: PUSH
12754: LD_EXP 67
12758: PUSH
12759: LD_EXP 68
12763: PUSH
12764: LD_EXP 69
12768: PUSH
12769: LD_EXP 70
12773: PUSH
12774: LD_EXP 71
12778: PUSH
12779: LD_EXP 36
12783: PUSH
12784: LD_EXP 37
12788: PUSH
12789: LD_EXP 40
12793: PUSH
12794: LD_EXP 41
12798: PUSH
12799: LD_EXP 42
12803: PUSH
12804: LD_EXP 38
12808: PUSH
12809: LD_EXP 39
12813: PUSH
12814: LD_EXP 47
12818: PUSH
12819: LD_EXP 51
12823: PUSH
12824: LD_EXP 52
12828: PUSH
12829: LD_EXP 54
12833: PUSH
12834: LD_EXP 58
12838: PUSH
12839: LD_EXP 61
12843: PUSH
12844: LD_EXP 62
12848: PUSH
12849: LD_EXP 72
12853: PUSH
12854: LD_EXP 73
12858: PUSH
12859: LD_EXP 74
12863: PUSH
12864: LD_EXP 75
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: ST_TO_ADDR
// tmp :=  ;
12925: LD_ADDR_VAR 0 3
12929: PUSH
12930: LD_STRING 
12932: ST_TO_ADDR
// for i = 1 to normalCounter do
12933: LD_ADDR_VAR 0 8
12937: PUSH
12938: DOUBLE
12939: LD_INT 1
12941: DEC
12942: ST_TO_ADDR
12943: LD_EXP 20
12947: PUSH
12948: FOR_TO
12949: IFFALSE 12985
// begin if flags [ i ] then
12951: LD_VAR 0 4
12955: PUSH
12956: LD_VAR 0 8
12960: ARRAY
12961: IFFALSE 12983
// tmp := tmp & i & ; ;
12963: LD_ADDR_VAR 0 3
12967: PUSH
12968: LD_VAR 0 3
12972: PUSH
12973: LD_VAR 0 8
12977: STR
12978: PUSH
12979: LD_STRING ;
12981: STR
12982: ST_TO_ADDR
// end ;
12983: GO 12948
12985: POP
12986: POP
// for i = 1 to hardcoreCounter do
12987: LD_ADDR_VAR 0 8
12991: PUSH
12992: DOUBLE
12993: LD_INT 1
12995: DEC
12996: ST_TO_ADDR
12997: LD_EXP 21
13001: PUSH
13002: FOR_TO
13003: IFFALSE 13049
// begin if flags [ normalCounter + i ] then
13005: LD_VAR 0 4
13009: PUSH
13010: LD_EXP 20
13014: PUSH
13015: LD_VAR 0 8
13019: PLUS
13020: ARRAY
13021: IFFALSE 13047
// tmp := tmp & ( 100 + i ) & ; ;
13023: LD_ADDR_VAR 0 3
13027: PUSH
13028: LD_VAR 0 3
13032: PUSH
13033: LD_INT 100
13035: PUSH
13036: LD_VAR 0 8
13040: PLUS
13041: STR
13042: PUSH
13043: LD_STRING ;
13045: STR
13046: ST_TO_ADDR
// end ;
13047: GO 13002
13049: POP
13050: POP
// if tmp then
13051: LD_VAR 0 3
13055: IFFALSE 13067
// active := tmp ;
13057: LD_ADDR_VAR 0 7
13061: PUSH
13062: LD_VAR 0 3
13066: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13067: LD_STRING getStreamItemsFromMission("
13069: PUSH
13070: LD_VAR 0 5
13074: STR
13075: PUSH
13076: LD_STRING ","
13078: STR
13079: PUSH
13080: LD_VAR 0 6
13084: STR
13085: PUSH
13086: LD_STRING ","
13088: STR
13089: PUSH
13090: LD_VAR 0 7
13094: STR
13095: PUSH
13096: LD_STRING ")
13098: STR
13099: PPUSH
13100: CALL_OW 559
// end else
13104: GO 13113
// ToLua ( getStreamItemsFromMission("","","") ) ;
13106: LD_STRING getStreamItemsFromMission("","","")
13108: PPUSH
13109: CALL_OW 559
// end ;
13113: LD_VAR 0 2
13117: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13118: LD_EXP 19
13122: PUSH
13123: LD_EXP 24
13127: AND
13128: IFFALSE 13252
13130: GO 13132
13132: DISABLE
13133: LD_INT 0
13135: PPUSH
13136: PPUSH
// begin enable ;
13137: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13138: LD_ADDR_VAR 0 2
13142: PUSH
13143: LD_INT 22
13145: PUSH
13146: LD_OWVAR 2
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 2
13157: PUSH
13158: LD_INT 34
13160: PUSH
13161: LD_INT 7
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 34
13170: PUSH
13171: LD_INT 45
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 34
13180: PUSH
13181: LD_INT 28
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 34
13190: PUSH
13191: LD_INT 47
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PPUSH
13209: CALL_OW 69
13213: ST_TO_ADDR
// if not tmp then
13214: LD_VAR 0 2
13218: NOT
13219: IFFALSE 13223
// exit ;
13221: GO 13252
// for i in tmp do
13223: LD_ADDR_VAR 0 1
13227: PUSH
13228: LD_VAR 0 2
13232: PUSH
13233: FOR_IN
13234: IFFALSE 13250
// begin SetLives ( i , 0 ) ;
13236: LD_VAR 0 1
13240: PPUSH
13241: LD_INT 0
13243: PPUSH
13244: CALL_OW 234
// end ;
13248: GO 13233
13250: POP
13251: POP
// end ;
13252: PPOPN 2
13254: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13255: LD_EXP 19
13259: PUSH
13260: LD_EXP 25
13264: AND
13265: IFFALSE 13349
13267: GO 13269
13269: DISABLE
13270: LD_INT 0
13272: PPUSH
13273: PPUSH
// begin enable ;
13274: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13275: LD_ADDR_VAR 0 2
13279: PUSH
13280: LD_INT 22
13282: PUSH
13283: LD_OWVAR 2
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 32
13294: PUSH
13295: LD_INT 3
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PPUSH
13306: CALL_OW 69
13310: ST_TO_ADDR
// if not tmp then
13311: LD_VAR 0 2
13315: NOT
13316: IFFALSE 13320
// exit ;
13318: GO 13349
// for i in tmp do
13320: LD_ADDR_VAR 0 1
13324: PUSH
13325: LD_VAR 0 2
13329: PUSH
13330: FOR_IN
13331: IFFALSE 13347
// begin SetLives ( i , 0 ) ;
13333: LD_VAR 0 1
13337: PPUSH
13338: LD_INT 0
13340: PPUSH
13341: CALL_OW 234
// end ;
13345: GO 13330
13347: POP
13348: POP
// end ;
13349: PPOPN 2
13351: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13352: LD_EXP 19
13356: PUSH
13357: LD_EXP 22
13361: AND
13362: IFFALSE 13455
13364: GO 13366
13366: DISABLE
13367: LD_INT 0
13369: PPUSH
// begin enable ;
13370: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13371: LD_ADDR_VAR 0 1
13375: PUSH
13376: LD_INT 22
13378: PUSH
13379: LD_OWVAR 2
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 2
13390: PUSH
13391: LD_INT 25
13393: PUSH
13394: LD_INT 5
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 25
13403: PUSH
13404: LD_INT 9
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 25
13413: PUSH
13414: LD_INT 8
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PPUSH
13431: CALL_OW 69
13435: PUSH
13436: FOR_IN
13437: IFFALSE 13453
// begin SetClass ( i , 1 ) ;
13439: LD_VAR 0 1
13443: PPUSH
13444: LD_INT 1
13446: PPUSH
13447: CALL_OW 336
// end ;
13451: GO 13436
13453: POP
13454: POP
// end ;
13455: PPOPN 1
13457: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13458: LD_EXP 19
13462: PUSH
13463: LD_EXP 23
13467: AND
13468: PUSH
13469: LD_OWVAR 65
13473: PUSH
13474: LD_INT 7
13476: LESS
13477: AND
13478: IFFALSE 13492
13480: GO 13482
13482: DISABLE
// begin enable ;
13483: ENABLE
// game_speed := 7 ;
13484: LD_ADDR_OWVAR 65
13488: PUSH
13489: LD_INT 7
13491: ST_TO_ADDR
// end ;
13492: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13493: LD_EXP 19
13497: PUSH
13498: LD_EXP 26
13502: AND
13503: IFFALSE 13705
13505: GO 13507
13507: DISABLE
13508: LD_INT 0
13510: PPUSH
13511: PPUSH
13512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13513: LD_ADDR_VAR 0 3
13517: PUSH
13518: LD_INT 81
13520: PUSH
13521: LD_OWVAR 2
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 21
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PPUSH
13544: CALL_OW 69
13548: ST_TO_ADDR
// if not tmp then
13549: LD_VAR 0 3
13553: NOT
13554: IFFALSE 13558
// exit ;
13556: GO 13705
// if tmp > 5 then
13558: LD_VAR 0 3
13562: PUSH
13563: LD_INT 5
13565: GREATER
13566: IFFALSE 13578
// k := 5 else
13568: LD_ADDR_VAR 0 2
13572: PUSH
13573: LD_INT 5
13575: ST_TO_ADDR
13576: GO 13588
// k := tmp ;
13578: LD_ADDR_VAR 0 2
13582: PUSH
13583: LD_VAR 0 3
13587: ST_TO_ADDR
// for i := 1 to k do
13588: LD_ADDR_VAR 0 1
13592: PUSH
13593: DOUBLE
13594: LD_INT 1
13596: DEC
13597: ST_TO_ADDR
13598: LD_VAR 0 2
13602: PUSH
13603: FOR_TO
13604: IFFALSE 13703
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13606: LD_VAR 0 3
13610: PUSH
13611: LD_VAR 0 1
13615: ARRAY
13616: PPUSH
13617: LD_VAR 0 1
13621: PUSH
13622: LD_INT 4
13624: MOD
13625: PUSH
13626: LD_INT 1
13628: PLUS
13629: PPUSH
13630: CALL_OW 259
13634: PUSH
13635: LD_INT 10
13637: LESS
13638: IFFALSE 13701
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13640: LD_VAR 0 3
13644: PUSH
13645: LD_VAR 0 1
13649: ARRAY
13650: PPUSH
13651: LD_VAR 0 1
13655: PUSH
13656: LD_INT 4
13658: MOD
13659: PUSH
13660: LD_INT 1
13662: PLUS
13663: PPUSH
13664: LD_VAR 0 3
13668: PUSH
13669: LD_VAR 0 1
13673: ARRAY
13674: PPUSH
13675: LD_VAR 0 1
13679: PUSH
13680: LD_INT 4
13682: MOD
13683: PUSH
13684: LD_INT 1
13686: PLUS
13687: PPUSH
13688: CALL_OW 259
13692: PUSH
13693: LD_INT 1
13695: PLUS
13696: PPUSH
13697: CALL_OW 237
13701: GO 13603
13703: POP
13704: POP
// end ;
13705: PPOPN 3
13707: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13708: LD_EXP 19
13712: PUSH
13713: LD_EXP 27
13717: AND
13718: IFFALSE 13738
13720: GO 13722
13722: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13723: LD_INT 4
13725: PPUSH
13726: LD_OWVAR 2
13730: PPUSH
13731: LD_INT 0
13733: PPUSH
13734: CALL_OW 324
13738: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13739: LD_EXP 19
13743: PUSH
13744: LD_EXP 56
13748: AND
13749: IFFALSE 13769
13751: GO 13753
13753: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13754: LD_INT 19
13756: PPUSH
13757: LD_OWVAR 2
13761: PPUSH
13762: LD_INT 0
13764: PPUSH
13765: CALL_OW 324
13769: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13770: LD_EXP 19
13774: PUSH
13775: LD_EXP 28
13779: AND
13780: IFFALSE 13882
13782: GO 13784
13784: DISABLE
13785: LD_INT 0
13787: PPUSH
13788: PPUSH
// begin enable ;
13789: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13790: LD_ADDR_VAR 0 2
13794: PUSH
13795: LD_INT 22
13797: PUSH
13798: LD_OWVAR 2
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 2
13809: PUSH
13810: LD_INT 34
13812: PUSH
13813: LD_INT 11
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 34
13822: PUSH
13823: LD_INT 30
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PPUSH
13839: CALL_OW 69
13843: ST_TO_ADDR
// if not tmp then
13844: LD_VAR 0 2
13848: NOT
13849: IFFALSE 13853
// exit ;
13851: GO 13882
// for i in tmp do
13853: LD_ADDR_VAR 0 1
13857: PUSH
13858: LD_VAR 0 2
13862: PUSH
13863: FOR_IN
13864: IFFALSE 13880
// begin SetLives ( i , 0 ) ;
13866: LD_VAR 0 1
13870: PPUSH
13871: LD_INT 0
13873: PPUSH
13874: CALL_OW 234
// end ;
13878: GO 13863
13880: POP
13881: POP
// end ;
13882: PPOPN 2
13884: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13885: LD_EXP 19
13889: PUSH
13890: LD_EXP 29
13894: AND
13895: IFFALSE 13915
13897: GO 13899
13899: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13900: LD_INT 32
13902: PPUSH
13903: LD_OWVAR 2
13907: PPUSH
13908: LD_INT 0
13910: PPUSH
13911: CALL_OW 324
13915: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13916: LD_EXP 19
13920: PUSH
13921: LD_EXP 30
13925: AND
13926: IFFALSE 14107
13928: GO 13930
13930: DISABLE
13931: LD_INT 0
13933: PPUSH
13934: PPUSH
13935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13936: LD_ADDR_VAR 0 2
13940: PUSH
13941: LD_INT 22
13943: PUSH
13944: LD_OWVAR 2
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 33
13955: PUSH
13956: LD_INT 3
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PPUSH
13967: CALL_OW 69
13971: ST_TO_ADDR
// if not tmp then
13972: LD_VAR 0 2
13976: NOT
13977: IFFALSE 13981
// exit ;
13979: GO 14107
// side := 0 ;
13981: LD_ADDR_VAR 0 3
13985: PUSH
13986: LD_INT 0
13988: ST_TO_ADDR
// for i := 1 to 8 do
13989: LD_ADDR_VAR 0 1
13993: PUSH
13994: DOUBLE
13995: LD_INT 1
13997: DEC
13998: ST_TO_ADDR
13999: LD_INT 8
14001: PUSH
14002: FOR_TO
14003: IFFALSE 14051
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14005: LD_OWVAR 2
14009: PUSH
14010: LD_VAR 0 1
14014: NONEQUAL
14015: PUSH
14016: LD_OWVAR 2
14020: PPUSH
14021: LD_VAR 0 1
14025: PPUSH
14026: CALL_OW 81
14030: PUSH
14031: LD_INT 2
14033: EQUAL
14034: AND
14035: IFFALSE 14049
// begin side := i ;
14037: LD_ADDR_VAR 0 3
14041: PUSH
14042: LD_VAR 0 1
14046: ST_TO_ADDR
// break ;
14047: GO 14051
// end ;
14049: GO 14002
14051: POP
14052: POP
// if not side then
14053: LD_VAR 0 3
14057: NOT
14058: IFFALSE 14062
// exit ;
14060: GO 14107
// for i := 1 to tmp do
14062: LD_ADDR_VAR 0 1
14066: PUSH
14067: DOUBLE
14068: LD_INT 1
14070: DEC
14071: ST_TO_ADDR
14072: LD_VAR 0 2
14076: PUSH
14077: FOR_TO
14078: IFFALSE 14105
// if Prob ( 60 ) then
14080: LD_INT 60
14082: PPUSH
14083: CALL_OW 13
14087: IFFALSE 14103
// SetSide ( i , side ) ;
14089: LD_VAR 0 1
14093: PPUSH
14094: LD_VAR 0 3
14098: PPUSH
14099: CALL_OW 235
14103: GO 14077
14105: POP
14106: POP
// end ;
14107: PPOPN 3
14109: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14110: LD_EXP 19
14114: PUSH
14115: LD_EXP 32
14119: AND
14120: IFFALSE 14239
14122: GO 14124
14124: DISABLE
14125: LD_INT 0
14127: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14128: LD_ADDR_VAR 0 1
14132: PUSH
14133: LD_INT 22
14135: PUSH
14136: LD_OWVAR 2
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PUSH
14145: LD_INT 21
14147: PUSH
14148: LD_INT 1
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 3
14157: PUSH
14158: LD_INT 23
14160: PUSH
14161: LD_INT 0
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: PPUSH
14177: CALL_OW 69
14181: PUSH
14182: FOR_IN
14183: IFFALSE 14237
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14185: LD_VAR 0 1
14189: PPUSH
14190: CALL_OW 257
14194: PUSH
14195: LD_INT 1
14197: PUSH
14198: LD_INT 2
14200: PUSH
14201: LD_INT 3
14203: PUSH
14204: LD_INT 4
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: IN
14213: IFFALSE 14235
// SetClass ( un , rand ( 1 , 4 ) ) ;
14215: LD_VAR 0 1
14219: PPUSH
14220: LD_INT 1
14222: PPUSH
14223: LD_INT 4
14225: PPUSH
14226: CALL_OW 12
14230: PPUSH
14231: CALL_OW 336
14235: GO 14182
14237: POP
14238: POP
// end ;
14239: PPOPN 1
14241: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14242: LD_EXP 19
14246: PUSH
14247: LD_EXP 31
14251: AND
14252: IFFALSE 14331
14254: GO 14256
14256: DISABLE
14257: LD_INT 0
14259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14260: LD_ADDR_VAR 0 1
14264: PUSH
14265: LD_INT 22
14267: PUSH
14268: LD_OWVAR 2
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 21
14279: PUSH
14280: LD_INT 3
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 69
14295: ST_TO_ADDR
// if not tmp then
14296: LD_VAR 0 1
14300: NOT
14301: IFFALSE 14305
// exit ;
14303: GO 14331
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14305: LD_VAR 0 1
14309: PUSH
14310: LD_INT 1
14312: PPUSH
14313: LD_VAR 0 1
14317: PPUSH
14318: CALL_OW 12
14322: ARRAY
14323: PPUSH
14324: LD_INT 100
14326: PPUSH
14327: CALL_OW 234
// end ;
14331: PPOPN 1
14333: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14334: LD_EXP 19
14338: PUSH
14339: LD_EXP 33
14343: AND
14344: IFFALSE 14442
14346: GO 14348
14348: DISABLE
14349: LD_INT 0
14351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14352: LD_ADDR_VAR 0 1
14356: PUSH
14357: LD_INT 22
14359: PUSH
14360: LD_OWVAR 2
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: LD_INT 21
14371: PUSH
14372: LD_INT 1
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PPUSH
14383: CALL_OW 69
14387: ST_TO_ADDR
// if not tmp then
14388: LD_VAR 0 1
14392: NOT
14393: IFFALSE 14397
// exit ;
14395: GO 14442
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14397: LD_VAR 0 1
14401: PUSH
14402: LD_INT 1
14404: PPUSH
14405: LD_VAR 0 1
14409: PPUSH
14410: CALL_OW 12
14414: ARRAY
14415: PPUSH
14416: LD_INT 1
14418: PPUSH
14419: LD_INT 4
14421: PPUSH
14422: CALL_OW 12
14426: PPUSH
14427: LD_INT 3000
14429: PPUSH
14430: LD_INT 9000
14432: PPUSH
14433: CALL_OW 12
14437: PPUSH
14438: CALL_OW 492
// end ;
14442: PPOPN 1
14444: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14445: LD_EXP 19
14449: PUSH
14450: LD_EXP 34
14454: AND
14455: IFFALSE 14475
14457: GO 14459
14459: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14460: LD_INT 1
14462: PPUSH
14463: LD_OWVAR 2
14467: PPUSH
14468: LD_INT 0
14470: PPUSH
14471: CALL_OW 324
14475: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14476: LD_EXP 19
14480: PUSH
14481: LD_EXP 35
14485: AND
14486: IFFALSE 14569
14488: GO 14490
14490: DISABLE
14491: LD_INT 0
14493: PPUSH
14494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14495: LD_ADDR_VAR 0 2
14499: PUSH
14500: LD_INT 22
14502: PUSH
14503: LD_OWVAR 2
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PUSH
14512: LD_INT 21
14514: PUSH
14515: LD_INT 3
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PPUSH
14526: CALL_OW 69
14530: ST_TO_ADDR
// if not tmp then
14531: LD_VAR 0 2
14535: NOT
14536: IFFALSE 14540
// exit ;
14538: GO 14569
// for i in tmp do
14540: LD_ADDR_VAR 0 1
14544: PUSH
14545: LD_VAR 0 2
14549: PUSH
14550: FOR_IN
14551: IFFALSE 14567
// SetBLevel ( i , 10 ) ;
14553: LD_VAR 0 1
14557: PPUSH
14558: LD_INT 10
14560: PPUSH
14561: CALL_OW 241
14565: GO 14550
14567: POP
14568: POP
// end ;
14569: PPOPN 2
14571: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14572: LD_EXP 19
14576: PUSH
14577: LD_EXP 36
14581: AND
14582: IFFALSE 14693
14584: GO 14586
14586: DISABLE
14587: LD_INT 0
14589: PPUSH
14590: PPUSH
14591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14592: LD_ADDR_VAR 0 3
14596: PUSH
14597: LD_INT 22
14599: PUSH
14600: LD_OWVAR 2
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: LD_INT 25
14611: PUSH
14612: LD_INT 1
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PPUSH
14623: CALL_OW 69
14627: ST_TO_ADDR
// if not tmp then
14628: LD_VAR 0 3
14632: NOT
14633: IFFALSE 14637
// exit ;
14635: GO 14693
// un := tmp [ rand ( 1 , tmp ) ] ;
14637: LD_ADDR_VAR 0 2
14641: PUSH
14642: LD_VAR 0 3
14646: PUSH
14647: LD_INT 1
14649: PPUSH
14650: LD_VAR 0 3
14654: PPUSH
14655: CALL_OW 12
14659: ARRAY
14660: ST_TO_ADDR
// if Crawls ( un ) then
14661: LD_VAR 0 2
14665: PPUSH
14666: CALL_OW 318
14670: IFFALSE 14681
// ComWalk ( un ) ;
14672: LD_VAR 0 2
14676: PPUSH
14677: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14681: LD_VAR 0 2
14685: PPUSH
14686: LD_INT 5
14688: PPUSH
14689: CALL_OW 336
// end ;
14693: PPOPN 3
14695: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14696: LD_EXP 19
14700: PUSH
14701: LD_EXP 37
14705: AND
14706: PUSH
14707: LD_OWVAR 67
14711: PUSH
14712: LD_INT 4
14714: LESS
14715: AND
14716: IFFALSE 14735
14718: GO 14720
14720: DISABLE
// begin Difficulty := Difficulty + 1 ;
14721: LD_ADDR_OWVAR 67
14725: PUSH
14726: LD_OWVAR 67
14730: PUSH
14731: LD_INT 1
14733: PLUS
14734: ST_TO_ADDR
// end ;
14735: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14736: LD_EXP 19
14740: PUSH
14741: LD_EXP 38
14745: AND
14746: IFFALSE 14849
14748: GO 14750
14750: DISABLE
14751: LD_INT 0
14753: PPUSH
// begin for i := 1 to 5 do
14754: LD_ADDR_VAR 0 1
14758: PUSH
14759: DOUBLE
14760: LD_INT 1
14762: DEC
14763: ST_TO_ADDR
14764: LD_INT 5
14766: PUSH
14767: FOR_TO
14768: IFFALSE 14847
// begin uc_nation := nation_nature ;
14770: LD_ADDR_OWVAR 21
14774: PUSH
14775: LD_INT 0
14777: ST_TO_ADDR
// uc_side := 0 ;
14778: LD_ADDR_OWVAR 20
14782: PUSH
14783: LD_INT 0
14785: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14786: LD_ADDR_OWVAR 29
14790: PUSH
14791: LD_INT 12
14793: PUSH
14794: LD_INT 12
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: ST_TO_ADDR
// hc_agressivity := 20 ;
14801: LD_ADDR_OWVAR 35
14805: PUSH
14806: LD_INT 20
14808: ST_TO_ADDR
// hc_class := class_tiger ;
14809: LD_ADDR_OWVAR 28
14813: PUSH
14814: LD_INT 14
14816: ST_TO_ADDR
// hc_gallery :=  ;
14817: LD_ADDR_OWVAR 33
14821: PUSH
14822: LD_STRING 
14824: ST_TO_ADDR
// hc_name :=  ;
14825: LD_ADDR_OWVAR 26
14829: PUSH
14830: LD_STRING 
14832: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14833: CALL_OW 44
14837: PPUSH
14838: LD_INT 0
14840: PPUSH
14841: CALL_OW 51
// end ;
14845: GO 14767
14847: POP
14848: POP
// end ;
14849: PPOPN 1
14851: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14852: LD_EXP 19
14856: PUSH
14857: LD_EXP 39
14861: AND
14862: IFFALSE 14871
14864: GO 14866
14866: DISABLE
// StreamSibBomb ;
14867: CALL 14872 0 0
14871: END
// export function StreamSibBomb ; var i , x , y ; begin
14872: LD_INT 0
14874: PPUSH
14875: PPUSH
14876: PPUSH
14877: PPUSH
// result := false ;
14878: LD_ADDR_VAR 0 1
14882: PUSH
14883: LD_INT 0
14885: ST_TO_ADDR
// for i := 1 to 16 do
14886: LD_ADDR_VAR 0 2
14890: PUSH
14891: DOUBLE
14892: LD_INT 1
14894: DEC
14895: ST_TO_ADDR
14896: LD_INT 16
14898: PUSH
14899: FOR_TO
14900: IFFALSE 15099
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14902: LD_ADDR_VAR 0 3
14906: PUSH
14907: LD_INT 10
14909: PUSH
14910: LD_INT 20
14912: PUSH
14913: LD_INT 30
14915: PUSH
14916: LD_INT 40
14918: PUSH
14919: LD_INT 50
14921: PUSH
14922: LD_INT 60
14924: PUSH
14925: LD_INT 70
14927: PUSH
14928: LD_INT 80
14930: PUSH
14931: LD_INT 90
14933: PUSH
14934: LD_INT 100
14936: PUSH
14937: LD_INT 110
14939: PUSH
14940: LD_INT 120
14942: PUSH
14943: LD_INT 130
14945: PUSH
14946: LD_INT 140
14948: PUSH
14949: LD_INT 150
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: PUSH
14969: LD_INT 1
14971: PPUSH
14972: LD_INT 15
14974: PPUSH
14975: CALL_OW 12
14979: ARRAY
14980: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14981: LD_ADDR_VAR 0 4
14985: PUSH
14986: LD_INT 10
14988: PUSH
14989: LD_INT 20
14991: PUSH
14992: LD_INT 30
14994: PUSH
14995: LD_INT 40
14997: PUSH
14998: LD_INT 50
15000: PUSH
15001: LD_INT 60
15003: PUSH
15004: LD_INT 70
15006: PUSH
15007: LD_INT 80
15009: PUSH
15010: LD_INT 90
15012: PUSH
15013: LD_INT 100
15015: PUSH
15016: LD_INT 110
15018: PUSH
15019: LD_INT 120
15021: PUSH
15022: LD_INT 130
15024: PUSH
15025: LD_INT 140
15027: PUSH
15028: LD_INT 150
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 1
15050: PPUSH
15051: LD_INT 15
15053: PPUSH
15054: CALL_OW 12
15058: ARRAY
15059: ST_TO_ADDR
// if ValidHex ( x , y ) then
15060: LD_VAR 0 3
15064: PPUSH
15065: LD_VAR 0 4
15069: PPUSH
15070: CALL_OW 488
15074: IFFALSE 15097
// begin result := [ x , y ] ;
15076: LD_ADDR_VAR 0 1
15080: PUSH
15081: LD_VAR 0 3
15085: PUSH
15086: LD_VAR 0 4
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: ST_TO_ADDR
// break ;
15095: GO 15099
// end ; end ;
15097: GO 14899
15099: POP
15100: POP
// if result then
15101: LD_VAR 0 1
15105: IFFALSE 15165
// begin ToLua ( playSibBomb() ) ;
15107: LD_STRING playSibBomb()
15109: PPUSH
15110: CALL_OW 559
// wait ( 0 0$14 ) ;
15114: LD_INT 490
15116: PPUSH
15117: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15121: LD_VAR 0 1
15125: PUSH
15126: LD_INT 1
15128: ARRAY
15129: PPUSH
15130: LD_VAR 0 1
15134: PUSH
15135: LD_INT 2
15137: ARRAY
15138: PPUSH
15139: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15143: LD_VAR 0 1
15147: PUSH
15148: LD_INT 1
15150: ARRAY
15151: PPUSH
15152: LD_VAR 0 1
15156: PUSH
15157: LD_INT 2
15159: ARRAY
15160: PPUSH
15161: CALL_OW 429
// end ; end ;
15165: LD_VAR 0 1
15169: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15170: LD_EXP 19
15174: PUSH
15175: LD_EXP 41
15179: AND
15180: IFFALSE 15192
15182: GO 15184
15184: DISABLE
// YouLost (  ) ;
15185: LD_STRING 
15187: PPUSH
15188: CALL_OW 104
15192: END
// every 0 0$1 trigger StreamModeActive and sFog do
15193: LD_EXP 19
15197: PUSH
15198: LD_EXP 40
15202: AND
15203: IFFALSE 15217
15205: GO 15207
15207: DISABLE
// FogOff ( your_side ) ;
15208: LD_OWVAR 2
15212: PPUSH
15213: CALL_OW 344
15217: END
// every 0 0$1 trigger StreamModeActive and sSun do
15218: LD_EXP 19
15222: PUSH
15223: LD_EXP 42
15227: AND
15228: IFFALSE 15256
15230: GO 15232
15232: DISABLE
// begin solar_recharge_percent := 0 ;
15233: LD_ADDR_OWVAR 79
15237: PUSH
15238: LD_INT 0
15240: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15241: LD_INT 10500
15243: PPUSH
15244: CALL_OW 67
// solar_recharge_percent := 100 ;
15248: LD_ADDR_OWVAR 79
15252: PUSH
15253: LD_INT 100
15255: ST_TO_ADDR
// end ;
15256: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15257: LD_EXP 19
15261: PUSH
15262: LD_EXP 43
15266: AND
15267: IFFALSE 15506
15269: GO 15271
15271: DISABLE
15272: LD_INT 0
15274: PPUSH
15275: PPUSH
15276: PPUSH
// begin tmp := [ ] ;
15277: LD_ADDR_VAR 0 3
15281: PUSH
15282: EMPTY
15283: ST_TO_ADDR
// for i := 1 to 6 do
15284: LD_ADDR_VAR 0 1
15288: PUSH
15289: DOUBLE
15290: LD_INT 1
15292: DEC
15293: ST_TO_ADDR
15294: LD_INT 6
15296: PUSH
15297: FOR_TO
15298: IFFALSE 15403
// begin uc_nation := nation_nature ;
15300: LD_ADDR_OWVAR 21
15304: PUSH
15305: LD_INT 0
15307: ST_TO_ADDR
// uc_side := 0 ;
15308: LD_ADDR_OWVAR 20
15312: PUSH
15313: LD_INT 0
15315: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15316: LD_ADDR_OWVAR 29
15320: PUSH
15321: LD_INT 12
15323: PUSH
15324: LD_INT 12
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: ST_TO_ADDR
// hc_agressivity := 20 ;
15331: LD_ADDR_OWVAR 35
15335: PUSH
15336: LD_INT 20
15338: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15339: LD_ADDR_OWVAR 28
15343: PUSH
15344: LD_INT 17
15346: ST_TO_ADDR
// hc_gallery :=  ;
15347: LD_ADDR_OWVAR 33
15351: PUSH
15352: LD_STRING 
15354: ST_TO_ADDR
// hc_name :=  ;
15355: LD_ADDR_OWVAR 26
15359: PUSH
15360: LD_STRING 
15362: ST_TO_ADDR
// un := CreateHuman ;
15363: LD_ADDR_VAR 0 2
15367: PUSH
15368: CALL_OW 44
15372: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15373: LD_VAR 0 2
15377: PPUSH
15378: LD_INT 1
15380: PPUSH
15381: CALL_OW 51
// tmp := tmp ^ un ;
15385: LD_ADDR_VAR 0 3
15389: PUSH
15390: LD_VAR 0 3
15394: PUSH
15395: LD_VAR 0 2
15399: ADD
15400: ST_TO_ADDR
// end ;
15401: GO 15297
15403: POP
15404: POP
// repeat wait ( 0 0$1 ) ;
15405: LD_INT 35
15407: PPUSH
15408: CALL_OW 67
// for un in tmp do
15412: LD_ADDR_VAR 0 2
15416: PUSH
15417: LD_VAR 0 3
15421: PUSH
15422: FOR_IN
15423: IFFALSE 15497
// begin if IsDead ( un ) then
15425: LD_VAR 0 2
15429: PPUSH
15430: CALL_OW 301
15434: IFFALSE 15454
// begin tmp := tmp diff un ;
15436: LD_ADDR_VAR 0 3
15440: PUSH
15441: LD_VAR 0 3
15445: PUSH
15446: LD_VAR 0 2
15450: DIFF
15451: ST_TO_ADDR
// continue ;
15452: GO 15422
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15454: LD_VAR 0 2
15458: PPUSH
15459: LD_INT 3
15461: PUSH
15462: LD_INT 22
15464: PUSH
15465: LD_INT 0
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PPUSH
15476: CALL_OW 69
15480: PPUSH
15481: LD_VAR 0 2
15485: PPUSH
15486: CALL_OW 74
15490: PPUSH
15491: CALL_OW 115
// end ;
15495: GO 15422
15497: POP
15498: POP
// until not tmp ;
15499: LD_VAR 0 3
15503: NOT
15504: IFFALSE 15405
// end ;
15506: PPOPN 3
15508: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15509: LD_EXP 19
15513: PUSH
15514: LD_EXP 44
15518: AND
15519: IFFALSE 15573
15521: GO 15523
15523: DISABLE
// begin ToLua ( displayTroll(); ) ;
15524: LD_STRING displayTroll();
15526: PPUSH
15527: CALL_OW 559
// wait ( 3 3$00 ) ;
15531: LD_INT 6300
15533: PPUSH
15534: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15538: LD_STRING hideTroll();
15540: PPUSH
15541: CALL_OW 559
// wait ( 1 1$00 ) ;
15545: LD_INT 2100
15547: PPUSH
15548: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15552: LD_STRING displayTroll();
15554: PPUSH
15555: CALL_OW 559
// wait ( 1 1$00 ) ;
15559: LD_INT 2100
15561: PPUSH
15562: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15566: LD_STRING hideTroll();
15568: PPUSH
15569: CALL_OW 559
// end ;
15573: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15574: LD_EXP 19
15578: PUSH
15579: LD_EXP 45
15583: AND
15584: IFFALSE 15647
15586: GO 15588
15588: DISABLE
15589: LD_INT 0
15591: PPUSH
// begin p := 0 ;
15592: LD_ADDR_VAR 0 1
15596: PUSH
15597: LD_INT 0
15599: ST_TO_ADDR
// repeat game_speed := 1 ;
15600: LD_ADDR_OWVAR 65
15604: PUSH
15605: LD_INT 1
15607: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15608: LD_INT 35
15610: PPUSH
15611: CALL_OW 67
// p := p + 1 ;
15615: LD_ADDR_VAR 0 1
15619: PUSH
15620: LD_VAR 0 1
15624: PUSH
15625: LD_INT 1
15627: PLUS
15628: ST_TO_ADDR
// until p >= 60 ;
15629: LD_VAR 0 1
15633: PUSH
15634: LD_INT 60
15636: GREATEREQUAL
15637: IFFALSE 15600
// game_speed := 4 ;
15639: LD_ADDR_OWVAR 65
15643: PUSH
15644: LD_INT 4
15646: ST_TO_ADDR
// end ;
15647: PPOPN 1
15649: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15650: LD_EXP 19
15654: PUSH
15655: LD_EXP 46
15659: AND
15660: IFFALSE 15806
15662: GO 15664
15664: DISABLE
15665: LD_INT 0
15667: PPUSH
15668: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15669: LD_ADDR_VAR 0 1
15673: PUSH
15674: LD_INT 22
15676: PUSH
15677: LD_OWVAR 2
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 2
15688: PUSH
15689: LD_INT 30
15691: PUSH
15692: LD_INT 0
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: LD_INT 30
15701: PUSH
15702: LD_INT 1
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: LIST
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PPUSH
15718: CALL_OW 69
15722: ST_TO_ADDR
// if not depot then
15723: LD_VAR 0 1
15727: NOT
15728: IFFALSE 15732
// exit ;
15730: GO 15806
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15732: LD_ADDR_VAR 0 2
15736: PUSH
15737: LD_VAR 0 1
15741: PUSH
15742: LD_INT 1
15744: PPUSH
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL_OW 12
15754: ARRAY
15755: PPUSH
15756: CALL_OW 274
15760: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15761: LD_VAR 0 2
15765: PPUSH
15766: LD_INT 1
15768: PPUSH
15769: LD_INT 0
15771: PPUSH
15772: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15776: LD_VAR 0 2
15780: PPUSH
15781: LD_INT 2
15783: PPUSH
15784: LD_INT 0
15786: PPUSH
15787: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15791: LD_VAR 0 2
15795: PPUSH
15796: LD_INT 3
15798: PPUSH
15799: LD_INT 0
15801: PPUSH
15802: CALL_OW 277
// end ;
15806: PPOPN 2
15808: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15809: LD_EXP 19
15813: PUSH
15814: LD_EXP 47
15818: AND
15819: IFFALSE 15916
15821: GO 15823
15823: DISABLE
15824: LD_INT 0
15826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15827: LD_ADDR_VAR 0 1
15831: PUSH
15832: LD_INT 22
15834: PUSH
15835: LD_OWVAR 2
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 21
15846: PUSH
15847: LD_INT 1
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 3
15856: PUSH
15857: LD_INT 23
15859: PUSH
15860: LD_INT 0
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: PPUSH
15876: CALL_OW 69
15880: ST_TO_ADDR
// if not tmp then
15881: LD_VAR 0 1
15885: NOT
15886: IFFALSE 15890
// exit ;
15888: GO 15916
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15890: LD_VAR 0 1
15894: PUSH
15895: LD_INT 1
15897: PPUSH
15898: LD_VAR 0 1
15902: PPUSH
15903: CALL_OW 12
15907: ARRAY
15908: PPUSH
15909: LD_INT 200
15911: PPUSH
15912: CALL_OW 234
// end ;
15916: PPOPN 1
15918: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15919: LD_EXP 19
15923: PUSH
15924: LD_EXP 48
15928: AND
15929: IFFALSE 16008
15931: GO 15933
15933: DISABLE
15934: LD_INT 0
15936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15937: LD_ADDR_VAR 0 1
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_OWVAR 2
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 21
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PPUSH
15968: CALL_OW 69
15972: ST_TO_ADDR
// if not tmp then
15973: LD_VAR 0 1
15977: NOT
15978: IFFALSE 15982
// exit ;
15980: GO 16008
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15982: LD_VAR 0 1
15986: PUSH
15987: LD_INT 1
15989: PPUSH
15990: LD_VAR 0 1
15994: PPUSH
15995: CALL_OW 12
15999: ARRAY
16000: PPUSH
16001: LD_INT 60
16003: PPUSH
16004: CALL_OW 234
// end ;
16008: PPOPN 1
16010: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16011: LD_EXP 19
16015: PUSH
16016: LD_EXP 49
16020: AND
16021: IFFALSE 16120
16023: GO 16025
16025: DISABLE
16026: LD_INT 0
16028: PPUSH
16029: PPUSH
// begin enable ;
16030: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16031: LD_ADDR_VAR 0 1
16035: PUSH
16036: LD_INT 22
16038: PUSH
16039: LD_OWVAR 2
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 61
16050: PUSH
16051: EMPTY
16052: LIST
16053: PUSH
16054: LD_INT 33
16056: PUSH
16057: LD_INT 2
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: LIST
16068: PPUSH
16069: CALL_OW 69
16073: ST_TO_ADDR
// if not tmp then
16074: LD_VAR 0 1
16078: NOT
16079: IFFALSE 16083
// exit ;
16081: GO 16120
// for i in tmp do
16083: LD_ADDR_VAR 0 2
16087: PUSH
16088: LD_VAR 0 1
16092: PUSH
16093: FOR_IN
16094: IFFALSE 16118
// if IsControledBy ( i ) then
16096: LD_VAR 0 2
16100: PPUSH
16101: CALL_OW 312
16105: IFFALSE 16116
// ComUnlink ( i ) ;
16107: LD_VAR 0 2
16111: PPUSH
16112: CALL_OW 136
16116: GO 16093
16118: POP
16119: POP
// end ;
16120: PPOPN 2
16122: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16123: LD_EXP 19
16127: PUSH
16128: LD_EXP 50
16132: AND
16133: IFFALSE 16273
16135: GO 16137
16137: DISABLE
16138: LD_INT 0
16140: PPUSH
16141: PPUSH
// begin ToLua ( displayPowell(); ) ;
16142: LD_STRING displayPowell();
16144: PPUSH
16145: CALL_OW 559
// uc_side := 0 ;
16149: LD_ADDR_OWVAR 20
16153: PUSH
16154: LD_INT 0
16156: ST_TO_ADDR
// uc_nation := 2 ;
16157: LD_ADDR_OWVAR 21
16161: PUSH
16162: LD_INT 2
16164: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16165: LD_ADDR_OWVAR 37
16169: PUSH
16170: LD_INT 14
16172: ST_TO_ADDR
// vc_engine := engine_siberite ;
16173: LD_ADDR_OWVAR 39
16177: PUSH
16178: LD_INT 3
16180: ST_TO_ADDR
// vc_control := control_apeman ;
16181: LD_ADDR_OWVAR 38
16185: PUSH
16186: LD_INT 5
16188: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16189: LD_ADDR_OWVAR 40
16193: PUSH
16194: LD_INT 29
16196: ST_TO_ADDR
// un := CreateVehicle ;
16197: LD_ADDR_VAR 0 2
16201: PUSH
16202: CALL_OW 45
16206: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16207: LD_VAR 0 2
16211: PPUSH
16212: LD_INT 1
16214: PPUSH
16215: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16219: LD_INT 35
16221: PPUSH
16222: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16226: LD_VAR 0 2
16230: PPUSH
16231: LD_INT 22
16233: PUSH
16234: LD_OWVAR 2
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL_OW 69
16247: PPUSH
16248: LD_VAR 0 2
16252: PPUSH
16253: CALL_OW 74
16257: PPUSH
16258: CALL_OW 115
// until IsDead ( un ) ;
16262: LD_VAR 0 2
16266: PPUSH
16267: CALL_OW 301
16271: IFFALSE 16219
// end ;
16273: PPOPN 2
16275: END
// every 0 0$1 trigger StreamModeActive and sStu do
16276: LD_EXP 19
16280: PUSH
16281: LD_EXP 58
16285: AND
16286: IFFALSE 16302
16288: GO 16290
16290: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16291: LD_STRING displayStucuk();
16293: PPUSH
16294: CALL_OW 559
// ResetFog ;
16298: CALL_OW 335
// end ;
16302: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16303: LD_EXP 19
16307: PUSH
16308: LD_EXP 51
16312: AND
16313: IFFALSE 16454
16315: GO 16317
16317: DISABLE
16318: LD_INT 0
16320: PPUSH
16321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16322: LD_ADDR_VAR 0 2
16326: PUSH
16327: LD_INT 22
16329: PUSH
16330: LD_OWVAR 2
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 21
16341: PUSH
16342: LD_INT 1
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PPUSH
16353: CALL_OW 69
16357: ST_TO_ADDR
// if not tmp then
16358: LD_VAR 0 2
16362: NOT
16363: IFFALSE 16367
// exit ;
16365: GO 16454
// un := tmp [ rand ( 1 , tmp ) ] ;
16367: LD_ADDR_VAR 0 1
16371: PUSH
16372: LD_VAR 0 2
16376: PUSH
16377: LD_INT 1
16379: PPUSH
16380: LD_VAR 0 2
16384: PPUSH
16385: CALL_OW 12
16389: ARRAY
16390: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16391: LD_VAR 0 1
16395: PPUSH
16396: LD_INT 0
16398: PPUSH
16399: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16403: LD_VAR 0 1
16407: PPUSH
16408: LD_OWVAR 3
16412: PUSH
16413: LD_VAR 0 1
16417: DIFF
16418: PPUSH
16419: LD_VAR 0 1
16423: PPUSH
16424: CALL_OW 74
16428: PPUSH
16429: CALL_OW 115
// wait ( 0 0$20 ) ;
16433: LD_INT 700
16435: PPUSH
16436: CALL_OW 67
// SetSide ( un , your_side ) ;
16440: LD_VAR 0 1
16444: PPUSH
16445: LD_OWVAR 2
16449: PPUSH
16450: CALL_OW 235
// end ;
16454: PPOPN 2
16456: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16457: LD_EXP 19
16461: PUSH
16462: LD_EXP 52
16466: AND
16467: IFFALSE 16573
16469: GO 16471
16471: DISABLE
16472: LD_INT 0
16474: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16475: LD_ADDR_VAR 0 1
16479: PUSH
16480: LD_INT 22
16482: PUSH
16483: LD_OWVAR 2
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 2
16494: PUSH
16495: LD_INT 30
16497: PUSH
16498: LD_INT 0
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 30
16507: PUSH
16508: LD_INT 1
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PPUSH
16524: CALL_OW 69
16528: ST_TO_ADDR
// if not depot then
16529: LD_VAR 0 1
16533: NOT
16534: IFFALSE 16538
// exit ;
16536: GO 16573
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16538: LD_VAR 0 1
16542: PUSH
16543: LD_INT 1
16545: ARRAY
16546: PPUSH
16547: CALL_OW 250
16551: PPUSH
16552: LD_VAR 0 1
16556: PUSH
16557: LD_INT 1
16559: ARRAY
16560: PPUSH
16561: CALL_OW 251
16565: PPUSH
16566: LD_INT 70
16568: PPUSH
16569: CALL_OW 495
// end ;
16573: PPOPN 1
16575: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16576: LD_EXP 19
16580: PUSH
16581: LD_EXP 53
16585: AND
16586: IFFALSE 16797
16588: GO 16590
16590: DISABLE
16591: LD_INT 0
16593: PPUSH
16594: PPUSH
16595: PPUSH
16596: PPUSH
16597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16598: LD_ADDR_VAR 0 5
16602: PUSH
16603: LD_INT 22
16605: PUSH
16606: LD_OWVAR 2
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 21
16617: PUSH
16618: LD_INT 1
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: EMPTY
16626: LIST
16627: LIST
16628: PPUSH
16629: CALL_OW 69
16633: ST_TO_ADDR
// if not tmp then
16634: LD_VAR 0 5
16638: NOT
16639: IFFALSE 16643
// exit ;
16641: GO 16797
// for i in tmp do
16643: LD_ADDR_VAR 0 1
16647: PUSH
16648: LD_VAR 0 5
16652: PUSH
16653: FOR_IN
16654: IFFALSE 16795
// begin d := rand ( 0 , 5 ) ;
16656: LD_ADDR_VAR 0 4
16660: PUSH
16661: LD_INT 0
16663: PPUSH
16664: LD_INT 5
16666: PPUSH
16667: CALL_OW 12
16671: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16672: LD_ADDR_VAR 0 2
16676: PUSH
16677: LD_VAR 0 1
16681: PPUSH
16682: CALL_OW 250
16686: PPUSH
16687: LD_VAR 0 4
16691: PPUSH
16692: LD_INT 3
16694: PPUSH
16695: LD_INT 12
16697: PPUSH
16698: CALL_OW 12
16702: PPUSH
16703: CALL_OW 272
16707: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16708: LD_ADDR_VAR 0 3
16712: PUSH
16713: LD_VAR 0 1
16717: PPUSH
16718: CALL_OW 251
16722: PPUSH
16723: LD_VAR 0 4
16727: PPUSH
16728: LD_INT 3
16730: PPUSH
16731: LD_INT 12
16733: PPUSH
16734: CALL_OW 12
16738: PPUSH
16739: CALL_OW 273
16743: ST_TO_ADDR
// if ValidHex ( x , y ) then
16744: LD_VAR 0 2
16748: PPUSH
16749: LD_VAR 0 3
16753: PPUSH
16754: CALL_OW 488
16758: IFFALSE 16793
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16760: LD_VAR 0 1
16764: PPUSH
16765: LD_VAR 0 2
16769: PPUSH
16770: LD_VAR 0 3
16774: PPUSH
16775: LD_INT 3
16777: PPUSH
16778: LD_INT 6
16780: PPUSH
16781: CALL_OW 12
16785: PPUSH
16786: LD_INT 1
16788: PPUSH
16789: CALL_OW 483
// end ;
16793: GO 16653
16795: POP
16796: POP
// end ;
16797: PPOPN 5
16799: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16800: LD_EXP 19
16804: PUSH
16805: LD_EXP 54
16809: AND
16810: IFFALSE 16904
16812: GO 16814
16814: DISABLE
16815: LD_INT 0
16817: PPUSH
16818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16819: LD_ADDR_VAR 0 2
16823: PUSH
16824: LD_INT 22
16826: PUSH
16827: LD_OWVAR 2
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 32
16838: PUSH
16839: LD_INT 1
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 21
16848: PUSH
16849: LD_INT 2
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: LIST
16860: PPUSH
16861: CALL_OW 69
16865: ST_TO_ADDR
// if not tmp then
16866: LD_VAR 0 2
16870: NOT
16871: IFFALSE 16875
// exit ;
16873: GO 16904
// for i in tmp do
16875: LD_ADDR_VAR 0 1
16879: PUSH
16880: LD_VAR 0 2
16884: PUSH
16885: FOR_IN
16886: IFFALSE 16902
// SetFuel ( i , 0 ) ;
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_INT 0
16895: PPUSH
16896: CALL_OW 240
16900: GO 16885
16902: POP
16903: POP
// end ;
16904: PPOPN 2
16906: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16907: LD_EXP 19
16911: PUSH
16912: LD_EXP 55
16916: AND
16917: IFFALSE 16983
16919: GO 16921
16921: DISABLE
16922: LD_INT 0
16924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16925: LD_ADDR_VAR 0 1
16929: PUSH
16930: LD_INT 22
16932: PUSH
16933: LD_OWVAR 2
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 30
16944: PUSH
16945: LD_INT 29
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PPUSH
16956: CALL_OW 69
16960: ST_TO_ADDR
// if not tmp then
16961: LD_VAR 0 1
16965: NOT
16966: IFFALSE 16970
// exit ;
16968: GO 16983
// DestroyUnit ( tmp [ 1 ] ) ;
16970: LD_VAR 0 1
16974: PUSH
16975: LD_INT 1
16977: ARRAY
16978: PPUSH
16979: CALL_OW 65
// end ;
16983: PPOPN 1
16985: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16986: LD_EXP 19
16990: PUSH
16991: LD_EXP 57
16995: AND
16996: IFFALSE 17125
16998: GO 17000
17000: DISABLE
17001: LD_INT 0
17003: PPUSH
// begin uc_side := 0 ;
17004: LD_ADDR_OWVAR 20
17008: PUSH
17009: LD_INT 0
17011: ST_TO_ADDR
// uc_nation := nation_arabian ;
17012: LD_ADDR_OWVAR 21
17016: PUSH
17017: LD_INT 2
17019: ST_TO_ADDR
// hc_gallery :=  ;
17020: LD_ADDR_OWVAR 33
17024: PUSH
17025: LD_STRING 
17027: ST_TO_ADDR
// hc_name :=  ;
17028: LD_ADDR_OWVAR 26
17032: PUSH
17033: LD_STRING 
17035: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17036: LD_INT 1
17038: PPUSH
17039: LD_INT 11
17041: PPUSH
17042: LD_INT 10
17044: PPUSH
17045: CALL_OW 380
// un := CreateHuman ;
17049: LD_ADDR_VAR 0 1
17053: PUSH
17054: CALL_OW 44
17058: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17059: LD_VAR 0 1
17063: PPUSH
17064: LD_INT 1
17066: PPUSH
17067: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17071: LD_INT 35
17073: PPUSH
17074: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17078: LD_VAR 0 1
17082: PPUSH
17083: LD_INT 22
17085: PUSH
17086: LD_OWVAR 2
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PPUSH
17095: CALL_OW 69
17099: PPUSH
17100: LD_VAR 0 1
17104: PPUSH
17105: CALL_OW 74
17109: PPUSH
17110: CALL_OW 115
// until IsDead ( un ) ;
17114: LD_VAR 0 1
17118: PPUSH
17119: CALL_OW 301
17123: IFFALSE 17071
// end ;
17125: PPOPN 1
17127: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17128: LD_EXP 19
17132: PUSH
17133: LD_EXP 59
17137: AND
17138: IFFALSE 17150
17140: GO 17142
17142: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17143: LD_STRING earthquake(getX(game), 0, 32)
17145: PPUSH
17146: CALL_OW 559
17150: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17151: LD_EXP 19
17155: PUSH
17156: LD_EXP 60
17160: AND
17161: IFFALSE 17252
17163: GO 17165
17165: DISABLE
17166: LD_INT 0
17168: PPUSH
// begin enable ;
17169: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17170: LD_ADDR_VAR 0 1
17174: PUSH
17175: LD_INT 22
17177: PUSH
17178: LD_OWVAR 2
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 21
17189: PUSH
17190: LD_INT 2
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 33
17199: PUSH
17200: LD_INT 3
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: LIST
17211: PPUSH
17212: CALL_OW 69
17216: ST_TO_ADDR
// if not tmp then
17217: LD_VAR 0 1
17221: NOT
17222: IFFALSE 17226
// exit ;
17224: GO 17252
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17226: LD_VAR 0 1
17230: PUSH
17231: LD_INT 1
17233: PPUSH
17234: LD_VAR 0 1
17238: PPUSH
17239: CALL_OW 12
17243: ARRAY
17244: PPUSH
17245: LD_INT 1
17247: PPUSH
17248: CALL_OW 234
// end ;
17252: PPOPN 1
17254: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17255: LD_EXP 19
17259: PUSH
17260: LD_EXP 61
17264: AND
17265: IFFALSE 17406
17267: GO 17269
17269: DISABLE
17270: LD_INT 0
17272: PPUSH
17273: PPUSH
17274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17275: LD_ADDR_VAR 0 3
17279: PUSH
17280: LD_INT 22
17282: PUSH
17283: LD_OWVAR 2
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 25
17294: PUSH
17295: LD_INT 1
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PPUSH
17306: CALL_OW 69
17310: ST_TO_ADDR
// if not tmp then
17311: LD_VAR 0 3
17315: NOT
17316: IFFALSE 17320
// exit ;
17318: GO 17406
// un := tmp [ rand ( 1 , tmp ) ] ;
17320: LD_ADDR_VAR 0 2
17324: PUSH
17325: LD_VAR 0 3
17329: PUSH
17330: LD_INT 1
17332: PPUSH
17333: LD_VAR 0 3
17337: PPUSH
17338: CALL_OW 12
17342: ARRAY
17343: ST_TO_ADDR
// if Crawls ( un ) then
17344: LD_VAR 0 2
17348: PPUSH
17349: CALL_OW 318
17353: IFFALSE 17364
// ComWalk ( un ) ;
17355: LD_VAR 0 2
17359: PPUSH
17360: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17364: LD_VAR 0 2
17368: PPUSH
17369: LD_INT 9
17371: PPUSH
17372: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17376: LD_INT 28
17378: PPUSH
17379: LD_OWVAR 2
17383: PPUSH
17384: LD_INT 2
17386: PPUSH
17387: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17391: LD_INT 29
17393: PPUSH
17394: LD_OWVAR 2
17398: PPUSH
17399: LD_INT 2
17401: PPUSH
17402: CALL_OW 322
// end ;
17406: PPOPN 3
17408: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17409: LD_EXP 19
17413: PUSH
17414: LD_EXP 62
17418: AND
17419: IFFALSE 17530
17421: GO 17423
17423: DISABLE
17424: LD_INT 0
17426: PPUSH
17427: PPUSH
17428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17429: LD_ADDR_VAR 0 3
17433: PUSH
17434: LD_INT 22
17436: PUSH
17437: LD_OWVAR 2
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: LD_INT 25
17448: PUSH
17449: LD_INT 1
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PPUSH
17460: CALL_OW 69
17464: ST_TO_ADDR
// if not tmp then
17465: LD_VAR 0 3
17469: NOT
17470: IFFALSE 17474
// exit ;
17472: GO 17530
// un := tmp [ rand ( 1 , tmp ) ] ;
17474: LD_ADDR_VAR 0 2
17478: PUSH
17479: LD_VAR 0 3
17483: PUSH
17484: LD_INT 1
17486: PPUSH
17487: LD_VAR 0 3
17491: PPUSH
17492: CALL_OW 12
17496: ARRAY
17497: ST_TO_ADDR
// if Crawls ( un ) then
17498: LD_VAR 0 2
17502: PPUSH
17503: CALL_OW 318
17507: IFFALSE 17518
// ComWalk ( un ) ;
17509: LD_VAR 0 2
17513: PPUSH
17514: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17518: LD_VAR 0 2
17522: PPUSH
17523: LD_INT 8
17525: PPUSH
17526: CALL_OW 336
// end ;
17530: PPOPN 3
17532: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17533: LD_EXP 19
17537: PUSH
17538: LD_EXP 63
17542: AND
17543: IFFALSE 17687
17545: GO 17547
17547: DISABLE
17548: LD_INT 0
17550: PPUSH
17551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17552: LD_ADDR_VAR 0 2
17556: PUSH
17557: LD_INT 22
17559: PUSH
17560: LD_OWVAR 2
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 21
17571: PUSH
17572: LD_INT 2
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 2
17581: PUSH
17582: LD_INT 34
17584: PUSH
17585: LD_INT 12
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 34
17594: PUSH
17595: LD_INT 51
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 34
17604: PUSH
17605: LD_INT 32
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: LIST
17622: PPUSH
17623: CALL_OW 69
17627: ST_TO_ADDR
// if not tmp then
17628: LD_VAR 0 2
17632: NOT
17633: IFFALSE 17637
// exit ;
17635: GO 17687
// for i in tmp do
17637: LD_ADDR_VAR 0 1
17641: PUSH
17642: LD_VAR 0 2
17646: PUSH
17647: FOR_IN
17648: IFFALSE 17685
// if GetCargo ( i , mat_artifact ) = 0 then
17650: LD_VAR 0 1
17654: PPUSH
17655: LD_INT 4
17657: PPUSH
17658: CALL_OW 289
17662: PUSH
17663: LD_INT 0
17665: EQUAL
17666: IFFALSE 17683
// SetCargo ( i , mat_siberit , 100 ) ;
17668: LD_VAR 0 1
17672: PPUSH
17673: LD_INT 3
17675: PPUSH
17676: LD_INT 100
17678: PPUSH
17679: CALL_OW 290
17683: GO 17647
17685: POP
17686: POP
// end ;
17687: PPOPN 2
17689: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17690: LD_EXP 19
17694: PUSH
17695: LD_EXP 64
17699: AND
17700: IFFALSE 17883
17702: GO 17704
17704: DISABLE
17705: LD_INT 0
17707: PPUSH
17708: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17709: LD_ADDR_VAR 0 2
17713: PUSH
17714: LD_INT 22
17716: PUSH
17717: LD_OWVAR 2
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PPUSH
17726: CALL_OW 69
17730: ST_TO_ADDR
// if not tmp then
17731: LD_VAR 0 2
17735: NOT
17736: IFFALSE 17740
// exit ;
17738: GO 17883
// for i := 1 to 2 do
17740: LD_ADDR_VAR 0 1
17744: PUSH
17745: DOUBLE
17746: LD_INT 1
17748: DEC
17749: ST_TO_ADDR
17750: LD_INT 2
17752: PUSH
17753: FOR_TO
17754: IFFALSE 17881
// begin uc_side := your_side ;
17756: LD_ADDR_OWVAR 20
17760: PUSH
17761: LD_OWVAR 2
17765: ST_TO_ADDR
// uc_nation := nation_american ;
17766: LD_ADDR_OWVAR 21
17770: PUSH
17771: LD_INT 1
17773: ST_TO_ADDR
// vc_chassis := us_morphling ;
17774: LD_ADDR_OWVAR 37
17778: PUSH
17779: LD_INT 5
17781: ST_TO_ADDR
// vc_engine := engine_siberite ;
17782: LD_ADDR_OWVAR 39
17786: PUSH
17787: LD_INT 3
17789: ST_TO_ADDR
// vc_control := control_computer ;
17790: LD_ADDR_OWVAR 38
17794: PUSH
17795: LD_INT 3
17797: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17798: LD_ADDR_OWVAR 40
17802: PUSH
17803: LD_INT 10
17805: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17806: LD_VAR 0 2
17810: PUSH
17811: LD_INT 1
17813: ARRAY
17814: PPUSH
17815: CALL_OW 310
17819: NOT
17820: IFFALSE 17867
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17822: CALL_OW 45
17826: PPUSH
17827: LD_VAR 0 2
17831: PUSH
17832: LD_INT 1
17834: ARRAY
17835: PPUSH
17836: CALL_OW 250
17840: PPUSH
17841: LD_VAR 0 2
17845: PUSH
17846: LD_INT 1
17848: ARRAY
17849: PPUSH
17850: CALL_OW 251
17854: PPUSH
17855: LD_INT 12
17857: PPUSH
17858: LD_INT 1
17860: PPUSH
17861: CALL_OW 50
17865: GO 17879
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17867: CALL_OW 45
17871: PPUSH
17872: LD_INT 1
17874: PPUSH
17875: CALL_OW 51
// end ;
17879: GO 17753
17881: POP
17882: POP
// end ;
17883: PPOPN 2
17885: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17886: LD_EXP 19
17890: PUSH
17891: LD_EXP 65
17895: AND
17896: IFFALSE 18118
17898: GO 17900
17900: DISABLE
17901: LD_INT 0
17903: PPUSH
17904: PPUSH
17905: PPUSH
17906: PPUSH
17907: PPUSH
17908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17909: LD_ADDR_VAR 0 6
17913: PUSH
17914: LD_INT 22
17916: PUSH
17917: LD_OWVAR 2
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 21
17928: PUSH
17929: LD_INT 1
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 3
17938: PUSH
17939: LD_INT 23
17941: PUSH
17942: LD_INT 0
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: LIST
17957: PPUSH
17958: CALL_OW 69
17962: ST_TO_ADDR
// if not tmp then
17963: LD_VAR 0 6
17967: NOT
17968: IFFALSE 17972
// exit ;
17970: GO 18118
// s1 := rand ( 1 , 4 ) ;
17972: LD_ADDR_VAR 0 2
17976: PUSH
17977: LD_INT 1
17979: PPUSH
17980: LD_INT 4
17982: PPUSH
17983: CALL_OW 12
17987: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17988: LD_ADDR_VAR 0 4
17992: PUSH
17993: LD_VAR 0 6
17997: PUSH
17998: LD_INT 1
18000: ARRAY
18001: PPUSH
18002: LD_VAR 0 2
18006: PPUSH
18007: CALL_OW 259
18011: ST_TO_ADDR
// if s1 = 1 then
18012: LD_VAR 0 2
18016: PUSH
18017: LD_INT 1
18019: EQUAL
18020: IFFALSE 18040
// s2 := rand ( 2 , 4 ) else
18022: LD_ADDR_VAR 0 3
18026: PUSH
18027: LD_INT 2
18029: PPUSH
18030: LD_INT 4
18032: PPUSH
18033: CALL_OW 12
18037: ST_TO_ADDR
18038: GO 18048
// s2 := 1 ;
18040: LD_ADDR_VAR 0 3
18044: PUSH
18045: LD_INT 1
18047: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18048: LD_ADDR_VAR 0 5
18052: PUSH
18053: LD_VAR 0 6
18057: PUSH
18058: LD_INT 1
18060: ARRAY
18061: PPUSH
18062: LD_VAR 0 3
18066: PPUSH
18067: CALL_OW 259
18071: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18072: LD_VAR 0 6
18076: PUSH
18077: LD_INT 1
18079: ARRAY
18080: PPUSH
18081: LD_VAR 0 2
18085: PPUSH
18086: LD_VAR 0 5
18090: PPUSH
18091: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18095: LD_VAR 0 6
18099: PUSH
18100: LD_INT 1
18102: ARRAY
18103: PPUSH
18104: LD_VAR 0 3
18108: PPUSH
18109: LD_VAR 0 4
18113: PPUSH
18114: CALL_OW 237
// end ;
18118: PPOPN 6
18120: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18121: LD_EXP 19
18125: PUSH
18126: LD_EXP 66
18130: AND
18131: IFFALSE 18210
18133: GO 18135
18135: DISABLE
18136: LD_INT 0
18138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18139: LD_ADDR_VAR 0 1
18143: PUSH
18144: LD_INT 22
18146: PUSH
18147: LD_OWVAR 2
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 30
18158: PUSH
18159: LD_INT 3
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PPUSH
18170: CALL_OW 69
18174: ST_TO_ADDR
// if not tmp then
18175: LD_VAR 0 1
18179: NOT
18180: IFFALSE 18184
// exit ;
18182: GO 18210
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18184: LD_VAR 0 1
18188: PUSH
18189: LD_INT 1
18191: PPUSH
18192: LD_VAR 0 1
18196: PPUSH
18197: CALL_OW 12
18201: ARRAY
18202: PPUSH
18203: LD_INT 1
18205: PPUSH
18206: CALL_OW 234
// end ;
18210: PPOPN 1
18212: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18213: LD_EXP 19
18217: PUSH
18218: LD_EXP 67
18222: AND
18223: IFFALSE 18335
18225: GO 18227
18227: DISABLE
18228: LD_INT 0
18230: PPUSH
18231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18232: LD_ADDR_VAR 0 2
18236: PUSH
18237: LD_INT 22
18239: PUSH
18240: LD_OWVAR 2
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 2
18251: PUSH
18252: LD_INT 30
18254: PUSH
18255: LD_INT 27
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 30
18264: PUSH
18265: LD_INT 26
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 30
18274: PUSH
18275: LD_INT 28
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PPUSH
18292: CALL_OW 69
18296: ST_TO_ADDR
// if not tmp then
18297: LD_VAR 0 2
18301: NOT
18302: IFFALSE 18306
// exit ;
18304: GO 18335
// for i in tmp do
18306: LD_ADDR_VAR 0 1
18310: PUSH
18311: LD_VAR 0 2
18315: PUSH
18316: FOR_IN
18317: IFFALSE 18333
// SetLives ( i , 1 ) ;
18319: LD_VAR 0 1
18323: PPUSH
18324: LD_INT 1
18326: PPUSH
18327: CALL_OW 234
18331: GO 18316
18333: POP
18334: POP
// end ;
18335: PPOPN 2
18337: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18338: LD_EXP 19
18342: PUSH
18343: LD_EXP 68
18347: AND
18348: IFFALSE 18635
18350: GO 18352
18352: DISABLE
18353: LD_INT 0
18355: PPUSH
18356: PPUSH
18357: PPUSH
// begin i := rand ( 1 , 7 ) ;
18358: LD_ADDR_VAR 0 1
18362: PUSH
18363: LD_INT 1
18365: PPUSH
18366: LD_INT 7
18368: PPUSH
18369: CALL_OW 12
18373: ST_TO_ADDR
// case i of 1 :
18374: LD_VAR 0 1
18378: PUSH
18379: LD_INT 1
18381: DOUBLE
18382: EQUAL
18383: IFTRUE 18387
18385: GO 18397
18387: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18388: LD_STRING earthquake(getX(game), 0, 32)
18390: PPUSH
18391: CALL_OW 559
18395: GO 18635
18397: LD_INT 2
18399: DOUBLE
18400: EQUAL
18401: IFTRUE 18405
18403: GO 18419
18405: POP
// begin ToLua ( displayStucuk(); ) ;
18406: LD_STRING displayStucuk();
18408: PPUSH
18409: CALL_OW 559
// ResetFog ;
18413: CALL_OW 335
// end ; 3 :
18417: GO 18635
18419: LD_INT 3
18421: DOUBLE
18422: EQUAL
18423: IFTRUE 18427
18425: GO 18531
18427: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18428: LD_ADDR_VAR 0 2
18432: PUSH
18433: LD_INT 22
18435: PUSH
18436: LD_OWVAR 2
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 25
18447: PUSH
18448: LD_INT 1
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PPUSH
18459: CALL_OW 69
18463: ST_TO_ADDR
// if not tmp then
18464: LD_VAR 0 2
18468: NOT
18469: IFFALSE 18473
// exit ;
18471: GO 18635
// un := tmp [ rand ( 1 , tmp ) ] ;
18473: LD_ADDR_VAR 0 3
18477: PUSH
18478: LD_VAR 0 2
18482: PUSH
18483: LD_INT 1
18485: PPUSH
18486: LD_VAR 0 2
18490: PPUSH
18491: CALL_OW 12
18495: ARRAY
18496: ST_TO_ADDR
// if Crawls ( un ) then
18497: LD_VAR 0 3
18501: PPUSH
18502: CALL_OW 318
18506: IFFALSE 18517
// ComWalk ( un ) ;
18508: LD_VAR 0 3
18512: PPUSH
18513: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18517: LD_VAR 0 3
18521: PPUSH
18522: LD_INT 8
18524: PPUSH
18525: CALL_OW 336
// end ; 4 :
18529: GO 18635
18531: LD_INT 4
18533: DOUBLE
18534: EQUAL
18535: IFTRUE 18539
18537: GO 18613
18539: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18540: LD_ADDR_VAR 0 2
18544: PUSH
18545: LD_INT 22
18547: PUSH
18548: LD_OWVAR 2
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 30
18559: PUSH
18560: LD_INT 29
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PPUSH
18571: CALL_OW 69
18575: ST_TO_ADDR
// if not tmp then
18576: LD_VAR 0 2
18580: NOT
18581: IFFALSE 18585
// exit ;
18583: GO 18635
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18585: LD_VAR 0 2
18589: PUSH
18590: LD_INT 1
18592: ARRAY
18593: PPUSH
18594: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18598: LD_VAR 0 2
18602: PUSH
18603: LD_INT 1
18605: ARRAY
18606: PPUSH
18607: CALL_OW 65
// end ; 5 .. 7 :
18611: GO 18635
18613: LD_INT 5
18615: DOUBLE
18616: GREATEREQUAL
18617: IFFALSE 18625
18619: LD_INT 7
18621: DOUBLE
18622: LESSEQUAL
18623: IFTRUE 18627
18625: GO 18634
18627: POP
// StreamSibBomb ; end ;
18628: CALL 14872 0 0
18632: GO 18635
18634: POP
// end ;
18635: PPOPN 3
18637: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18638: LD_EXP 19
18642: PUSH
18643: LD_EXP 69
18647: AND
18648: IFFALSE 18804
18650: GO 18652
18652: DISABLE
18653: LD_INT 0
18655: PPUSH
18656: PPUSH
18657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18658: LD_ADDR_VAR 0 2
18662: PUSH
18663: LD_INT 81
18665: PUSH
18666: LD_OWVAR 2
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: LD_INT 2
18677: PUSH
18678: LD_INT 21
18680: PUSH
18681: LD_INT 1
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: LD_INT 21
18690: PUSH
18691: LD_INT 2
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PPUSH
18707: CALL_OW 69
18711: ST_TO_ADDR
// if not tmp then
18712: LD_VAR 0 2
18716: NOT
18717: IFFALSE 18721
// exit ;
18719: GO 18804
// p := 0 ;
18721: LD_ADDR_VAR 0 3
18725: PUSH
18726: LD_INT 0
18728: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18729: LD_INT 35
18731: PPUSH
18732: CALL_OW 67
// p := p + 1 ;
18736: LD_ADDR_VAR 0 3
18740: PUSH
18741: LD_VAR 0 3
18745: PUSH
18746: LD_INT 1
18748: PLUS
18749: ST_TO_ADDR
// for i in tmp do
18750: LD_ADDR_VAR 0 1
18754: PUSH
18755: LD_VAR 0 2
18759: PUSH
18760: FOR_IN
18761: IFFALSE 18792
// if GetLives ( i ) < 1000 then
18763: LD_VAR 0 1
18767: PPUSH
18768: CALL_OW 256
18772: PUSH
18773: LD_INT 1000
18775: LESS
18776: IFFALSE 18790
// SetLives ( i , 1000 ) ;
18778: LD_VAR 0 1
18782: PPUSH
18783: LD_INT 1000
18785: PPUSH
18786: CALL_OW 234
18790: GO 18760
18792: POP
18793: POP
// until p > 20 ;
18794: LD_VAR 0 3
18798: PUSH
18799: LD_INT 20
18801: GREATER
18802: IFFALSE 18729
// end ;
18804: PPOPN 3
18806: END
// every 0 0$1 trigger StreamModeActive and sTime do
18807: LD_EXP 19
18811: PUSH
18812: LD_EXP 70
18816: AND
18817: IFFALSE 18852
18819: GO 18821
18821: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18822: LD_INT 28
18824: PPUSH
18825: LD_OWVAR 2
18829: PPUSH
18830: LD_INT 2
18832: PPUSH
18833: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18837: LD_INT 30
18839: PPUSH
18840: LD_OWVAR 2
18844: PPUSH
18845: LD_INT 2
18847: PPUSH
18848: CALL_OW 322
// end ;
18852: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18853: LD_EXP 19
18857: PUSH
18858: LD_EXP 71
18862: AND
18863: IFFALSE 18984
18865: GO 18867
18867: DISABLE
18868: LD_INT 0
18870: PPUSH
18871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18872: LD_ADDR_VAR 0 2
18876: PUSH
18877: LD_INT 22
18879: PUSH
18880: LD_OWVAR 2
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 21
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 3
18901: PUSH
18902: LD_INT 23
18904: PUSH
18905: LD_INT 0
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: LIST
18920: PPUSH
18921: CALL_OW 69
18925: ST_TO_ADDR
// if not tmp then
18926: LD_VAR 0 2
18930: NOT
18931: IFFALSE 18935
// exit ;
18933: GO 18984
// for i in tmp do
18935: LD_ADDR_VAR 0 1
18939: PUSH
18940: LD_VAR 0 2
18944: PUSH
18945: FOR_IN
18946: IFFALSE 18982
// begin if Crawls ( i ) then
18948: LD_VAR 0 1
18952: PPUSH
18953: CALL_OW 318
18957: IFFALSE 18968
// ComWalk ( i ) ;
18959: LD_VAR 0 1
18963: PPUSH
18964: CALL_OW 138
// SetClass ( i , 2 ) ;
18968: LD_VAR 0 1
18972: PPUSH
18973: LD_INT 2
18975: PPUSH
18976: CALL_OW 336
// end ;
18980: GO 18945
18982: POP
18983: POP
// end ;
18984: PPOPN 2
18986: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18987: LD_EXP 19
18991: PUSH
18992: LD_EXP 72
18996: AND
18997: IFFALSE 19285
18999: GO 19001
19001: DISABLE
19002: LD_INT 0
19004: PPUSH
19005: PPUSH
19006: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19007: LD_OWVAR 2
19011: PPUSH
19012: LD_INT 9
19014: PPUSH
19015: LD_INT 1
19017: PPUSH
19018: LD_INT 1
19020: PPUSH
19021: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19025: LD_INT 9
19027: PPUSH
19028: LD_OWVAR 2
19032: PPUSH
19033: CALL_OW 343
// uc_side := 9 ;
19037: LD_ADDR_OWVAR 20
19041: PUSH
19042: LD_INT 9
19044: ST_TO_ADDR
// uc_nation := 2 ;
19045: LD_ADDR_OWVAR 21
19049: PUSH
19050: LD_INT 2
19052: ST_TO_ADDR
// hc_name := Dark Warrior ;
19053: LD_ADDR_OWVAR 26
19057: PUSH
19058: LD_STRING Dark Warrior
19060: ST_TO_ADDR
// hc_gallery :=  ;
19061: LD_ADDR_OWVAR 33
19065: PUSH
19066: LD_STRING 
19068: ST_TO_ADDR
// hc_noskilllimit := true ;
19069: LD_ADDR_OWVAR 76
19073: PUSH
19074: LD_INT 1
19076: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19077: LD_ADDR_OWVAR 31
19081: PUSH
19082: LD_INT 30
19084: PUSH
19085: LD_INT 30
19087: PUSH
19088: LD_INT 30
19090: PUSH
19091: LD_INT 30
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: ST_TO_ADDR
// un := CreateHuman ;
19100: LD_ADDR_VAR 0 3
19104: PUSH
19105: CALL_OW 44
19109: ST_TO_ADDR
// hc_noskilllimit := false ;
19110: LD_ADDR_OWVAR 76
19114: PUSH
19115: LD_INT 0
19117: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19118: LD_VAR 0 3
19122: PPUSH
19123: LD_INT 1
19125: PPUSH
19126: CALL_OW 51
// ToLua ( playRanger() ) ;
19130: LD_STRING playRanger()
19132: PPUSH
19133: CALL_OW 559
// p := 0 ;
19137: LD_ADDR_VAR 0 2
19141: PUSH
19142: LD_INT 0
19144: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19145: LD_INT 35
19147: PPUSH
19148: CALL_OW 67
// p := p + 1 ;
19152: LD_ADDR_VAR 0 2
19156: PUSH
19157: LD_VAR 0 2
19161: PUSH
19162: LD_INT 1
19164: PLUS
19165: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19166: LD_VAR 0 3
19170: PPUSH
19171: CALL_OW 256
19175: PUSH
19176: LD_INT 1000
19178: LESS
19179: IFFALSE 19193
// SetLives ( un , 1000 ) ;
19181: LD_VAR 0 3
19185: PPUSH
19186: LD_INT 1000
19188: PPUSH
19189: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19193: LD_VAR 0 3
19197: PPUSH
19198: LD_INT 81
19200: PUSH
19201: LD_OWVAR 2
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 91
19212: PUSH
19213: LD_VAR 0 3
19217: PUSH
19218: LD_INT 30
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: LIST
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PPUSH
19230: CALL_OW 69
19234: PPUSH
19235: LD_VAR 0 3
19239: PPUSH
19240: CALL_OW 74
19244: PPUSH
19245: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19249: LD_VAR 0 2
19253: PUSH
19254: LD_INT 80
19256: GREATER
19257: PUSH
19258: LD_VAR 0 3
19262: PPUSH
19263: CALL_OW 301
19267: OR
19268: IFFALSE 19145
// if un then
19270: LD_VAR 0 3
19274: IFFALSE 19285
// RemoveUnit ( un ) ;
19276: LD_VAR 0 3
19280: PPUSH
19281: CALL_OW 64
// end ;
19285: PPOPN 3
19287: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19288: LD_EXP 73
19292: IFFALSE 19408
19294: GO 19296
19296: DISABLE
19297: LD_INT 0
19299: PPUSH
19300: PPUSH
19301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19302: LD_ADDR_VAR 0 2
19306: PUSH
19307: LD_INT 81
19309: PUSH
19310: LD_OWVAR 2
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: LD_INT 21
19321: PUSH
19322: LD_INT 1
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PPUSH
19333: CALL_OW 69
19337: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19338: LD_STRING playComputer()
19340: PPUSH
19341: CALL_OW 559
// if not tmp then
19345: LD_VAR 0 2
19349: NOT
19350: IFFALSE 19354
// exit ;
19352: GO 19408
// for i in tmp do
19354: LD_ADDR_VAR 0 1
19358: PUSH
19359: LD_VAR 0 2
19363: PUSH
19364: FOR_IN
19365: IFFALSE 19406
// for j := 1 to 4 do
19367: LD_ADDR_VAR 0 3
19371: PUSH
19372: DOUBLE
19373: LD_INT 1
19375: DEC
19376: ST_TO_ADDR
19377: LD_INT 4
19379: PUSH
19380: FOR_TO
19381: IFFALSE 19402
// SetSkill ( i , j , 10 ) ;
19383: LD_VAR 0 1
19387: PPUSH
19388: LD_VAR 0 3
19392: PPUSH
19393: LD_INT 10
19395: PPUSH
19396: CALL_OW 237
19400: GO 19380
19402: POP
19403: POP
19404: GO 19364
19406: POP
19407: POP
// end ;
19408: PPOPN 3
19410: END
// every 0 0$1 trigger s30 do var i , tmp ;
19411: LD_EXP 74
19415: IFFALSE 19484
19417: GO 19419
19419: DISABLE
19420: LD_INT 0
19422: PPUSH
19423: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19424: LD_ADDR_VAR 0 2
19428: PUSH
19429: LD_INT 22
19431: PUSH
19432: LD_OWVAR 2
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PPUSH
19441: CALL_OW 69
19445: ST_TO_ADDR
// if not tmp then
19446: LD_VAR 0 2
19450: NOT
19451: IFFALSE 19455
// exit ;
19453: GO 19484
// for i in tmp do
19455: LD_ADDR_VAR 0 1
19459: PUSH
19460: LD_VAR 0 2
19464: PUSH
19465: FOR_IN
19466: IFFALSE 19482
// SetLives ( i , 300 ) ;
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_INT 300
19475: PPUSH
19476: CALL_OW 234
19480: GO 19465
19482: POP
19483: POP
// end ;
19484: PPOPN 2
19486: END
// every 0 0$1 trigger s60 do var i , tmp ;
19487: LD_EXP 75
19491: IFFALSE 19560
19493: GO 19495
19495: DISABLE
19496: LD_INT 0
19498: PPUSH
19499: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19500: LD_ADDR_VAR 0 2
19504: PUSH
19505: LD_INT 22
19507: PUSH
19508: LD_OWVAR 2
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PPUSH
19517: CALL_OW 69
19521: ST_TO_ADDR
// if not tmp then
19522: LD_VAR 0 2
19526: NOT
19527: IFFALSE 19531
// exit ;
19529: GO 19560
// for i in tmp do
19531: LD_ADDR_VAR 0 1
19535: PUSH
19536: LD_VAR 0 2
19540: PUSH
19541: FOR_IN
19542: IFFALSE 19558
// SetLives ( i , 600 ) ;
19544: LD_VAR 0 1
19548: PPUSH
19549: LD_INT 600
19551: PPUSH
19552: CALL_OW 234
19556: GO 19541
19558: POP
19559: POP
// end ;
19560: PPOPN 2
19562: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19563: LD_INT 0
19565: PPUSH
// case cmd of 301 :
19566: LD_VAR 0 1
19570: PUSH
19571: LD_INT 301
19573: DOUBLE
19574: EQUAL
19575: IFTRUE 19579
19577: GO 19611
19579: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19580: LD_VAR 0 6
19584: PPUSH
19585: LD_VAR 0 7
19589: PPUSH
19590: LD_VAR 0 8
19594: PPUSH
19595: LD_VAR 0 4
19599: PPUSH
19600: LD_VAR 0 5
19604: PPUSH
19605: CALL 20812 0 5
19609: GO 19732
19611: LD_INT 302
19613: DOUBLE
19614: EQUAL
19615: IFTRUE 19619
19617: GO 19656
19619: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19620: LD_VAR 0 6
19624: PPUSH
19625: LD_VAR 0 7
19629: PPUSH
19630: LD_VAR 0 8
19634: PPUSH
19635: LD_VAR 0 9
19639: PPUSH
19640: LD_VAR 0 4
19644: PPUSH
19645: LD_VAR 0 5
19649: PPUSH
19650: CALL 20903 0 6
19654: GO 19732
19656: LD_INT 303
19658: DOUBLE
19659: EQUAL
19660: IFTRUE 19664
19662: GO 19701
19664: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19665: LD_VAR 0 6
19669: PPUSH
19670: LD_VAR 0 7
19674: PPUSH
19675: LD_VAR 0 8
19679: PPUSH
19680: LD_VAR 0 9
19684: PPUSH
19685: LD_VAR 0 4
19689: PPUSH
19690: LD_VAR 0 5
19694: PPUSH
19695: CALL 19737 0 6
19699: GO 19732
19701: LD_INT 304
19703: DOUBLE
19704: EQUAL
19705: IFTRUE 19709
19707: GO 19731
19709: POP
// hHackTeleport ( unit , x , y ) ; end ;
19710: LD_VAR 0 2
19714: PPUSH
19715: LD_VAR 0 4
19719: PPUSH
19720: LD_VAR 0 5
19724: PPUSH
19725: CALL 21496 0 3
19729: GO 19732
19731: POP
// end ;
19732: LD_VAR 0 12
19736: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19737: LD_INT 0
19739: PPUSH
19740: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19741: LD_VAR 0 1
19745: PUSH
19746: LD_INT 1
19748: LESS
19749: PUSH
19750: LD_VAR 0 1
19754: PUSH
19755: LD_INT 3
19757: GREATER
19758: OR
19759: PUSH
19760: LD_VAR 0 5
19764: PPUSH
19765: LD_VAR 0 6
19769: PPUSH
19770: CALL_OW 428
19774: OR
19775: IFFALSE 19779
// exit ;
19777: GO 20499
// uc_side := your_side ;
19779: LD_ADDR_OWVAR 20
19783: PUSH
19784: LD_OWVAR 2
19788: ST_TO_ADDR
// uc_nation := nation ;
19789: LD_ADDR_OWVAR 21
19793: PUSH
19794: LD_VAR 0 1
19798: ST_TO_ADDR
// bc_level = 1 ;
19799: LD_ADDR_OWVAR 43
19803: PUSH
19804: LD_INT 1
19806: ST_TO_ADDR
// case btype of 1 :
19807: LD_VAR 0 2
19811: PUSH
19812: LD_INT 1
19814: DOUBLE
19815: EQUAL
19816: IFTRUE 19820
19818: GO 19831
19820: POP
// bc_type := b_depot ; 2 :
19821: LD_ADDR_OWVAR 42
19825: PUSH
19826: LD_INT 0
19828: ST_TO_ADDR
19829: GO 20443
19831: LD_INT 2
19833: DOUBLE
19834: EQUAL
19835: IFTRUE 19839
19837: GO 19850
19839: POP
// bc_type := b_warehouse ; 3 :
19840: LD_ADDR_OWVAR 42
19844: PUSH
19845: LD_INT 1
19847: ST_TO_ADDR
19848: GO 20443
19850: LD_INT 3
19852: DOUBLE
19853: EQUAL
19854: IFTRUE 19858
19856: GO 19869
19858: POP
// bc_type := b_lab ; 4 .. 9 :
19859: LD_ADDR_OWVAR 42
19863: PUSH
19864: LD_INT 6
19866: ST_TO_ADDR
19867: GO 20443
19869: LD_INT 4
19871: DOUBLE
19872: GREATEREQUAL
19873: IFFALSE 19881
19875: LD_INT 9
19877: DOUBLE
19878: LESSEQUAL
19879: IFTRUE 19883
19881: GO 19935
19883: POP
// begin bc_type := b_lab_half ;
19884: LD_ADDR_OWVAR 42
19888: PUSH
19889: LD_INT 7
19891: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19892: LD_ADDR_OWVAR 44
19896: PUSH
19897: LD_INT 10
19899: PUSH
19900: LD_INT 11
19902: PUSH
19903: LD_INT 12
19905: PUSH
19906: LD_INT 15
19908: PUSH
19909: LD_INT 14
19911: PUSH
19912: LD_INT 13
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: PUSH
19923: LD_VAR 0 2
19927: PUSH
19928: LD_INT 3
19930: MINUS
19931: ARRAY
19932: ST_TO_ADDR
// end ; 10 .. 13 :
19933: GO 20443
19935: LD_INT 10
19937: DOUBLE
19938: GREATEREQUAL
19939: IFFALSE 19947
19941: LD_INT 13
19943: DOUBLE
19944: LESSEQUAL
19945: IFTRUE 19949
19947: GO 20026
19949: POP
// begin bc_type := b_lab_full ;
19950: LD_ADDR_OWVAR 42
19954: PUSH
19955: LD_INT 8
19957: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19958: LD_ADDR_OWVAR 44
19962: PUSH
19963: LD_INT 10
19965: PUSH
19966: LD_INT 12
19968: PUSH
19969: LD_INT 14
19971: PUSH
19972: LD_INT 13
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: PUSH
19981: LD_VAR 0 2
19985: PUSH
19986: LD_INT 9
19988: MINUS
19989: ARRAY
19990: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19991: LD_ADDR_OWVAR 45
19995: PUSH
19996: LD_INT 11
19998: PUSH
19999: LD_INT 15
20001: PUSH
20002: LD_INT 12
20004: PUSH
20005: LD_INT 15
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: PUSH
20014: LD_VAR 0 2
20018: PUSH
20019: LD_INT 9
20021: MINUS
20022: ARRAY
20023: ST_TO_ADDR
// end ; 14 :
20024: GO 20443
20026: LD_INT 14
20028: DOUBLE
20029: EQUAL
20030: IFTRUE 20034
20032: GO 20045
20034: POP
// bc_type := b_workshop ; 15 :
20035: LD_ADDR_OWVAR 42
20039: PUSH
20040: LD_INT 2
20042: ST_TO_ADDR
20043: GO 20443
20045: LD_INT 15
20047: DOUBLE
20048: EQUAL
20049: IFTRUE 20053
20051: GO 20064
20053: POP
// bc_type := b_factory ; 16 :
20054: LD_ADDR_OWVAR 42
20058: PUSH
20059: LD_INT 3
20061: ST_TO_ADDR
20062: GO 20443
20064: LD_INT 16
20066: DOUBLE
20067: EQUAL
20068: IFTRUE 20072
20070: GO 20083
20072: POP
// bc_type := b_ext_gun ; 17 :
20073: LD_ADDR_OWVAR 42
20077: PUSH
20078: LD_INT 17
20080: ST_TO_ADDR
20081: GO 20443
20083: LD_INT 17
20085: DOUBLE
20086: EQUAL
20087: IFTRUE 20091
20089: GO 20119
20091: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20092: LD_ADDR_OWVAR 42
20096: PUSH
20097: LD_INT 19
20099: PUSH
20100: LD_INT 23
20102: PUSH
20103: LD_INT 19
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: LIST
20110: PUSH
20111: LD_VAR 0 1
20115: ARRAY
20116: ST_TO_ADDR
20117: GO 20443
20119: LD_INT 18
20121: DOUBLE
20122: EQUAL
20123: IFTRUE 20127
20125: GO 20138
20127: POP
// bc_type := b_ext_radar ; 19 :
20128: LD_ADDR_OWVAR 42
20132: PUSH
20133: LD_INT 20
20135: ST_TO_ADDR
20136: GO 20443
20138: LD_INT 19
20140: DOUBLE
20141: EQUAL
20142: IFTRUE 20146
20144: GO 20157
20146: POP
// bc_type := b_ext_radio ; 20 :
20147: LD_ADDR_OWVAR 42
20151: PUSH
20152: LD_INT 22
20154: ST_TO_ADDR
20155: GO 20443
20157: LD_INT 20
20159: DOUBLE
20160: EQUAL
20161: IFTRUE 20165
20163: GO 20176
20165: POP
// bc_type := b_ext_siberium ; 21 :
20166: LD_ADDR_OWVAR 42
20170: PUSH
20171: LD_INT 21
20173: ST_TO_ADDR
20174: GO 20443
20176: LD_INT 21
20178: DOUBLE
20179: EQUAL
20180: IFTRUE 20184
20182: GO 20195
20184: POP
// bc_type := b_ext_computer ; 22 :
20185: LD_ADDR_OWVAR 42
20189: PUSH
20190: LD_INT 24
20192: ST_TO_ADDR
20193: GO 20443
20195: LD_INT 22
20197: DOUBLE
20198: EQUAL
20199: IFTRUE 20203
20201: GO 20214
20203: POP
// bc_type := b_ext_track ; 23 :
20204: LD_ADDR_OWVAR 42
20208: PUSH
20209: LD_INT 16
20211: ST_TO_ADDR
20212: GO 20443
20214: LD_INT 23
20216: DOUBLE
20217: EQUAL
20218: IFTRUE 20222
20220: GO 20233
20222: POP
// bc_type := b_ext_laser ; 24 :
20223: LD_ADDR_OWVAR 42
20227: PUSH
20228: LD_INT 25
20230: ST_TO_ADDR
20231: GO 20443
20233: LD_INT 24
20235: DOUBLE
20236: EQUAL
20237: IFTRUE 20241
20239: GO 20252
20241: POP
// bc_type := b_control_tower ; 25 :
20242: LD_ADDR_OWVAR 42
20246: PUSH
20247: LD_INT 36
20249: ST_TO_ADDR
20250: GO 20443
20252: LD_INT 25
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20271
20260: POP
// bc_type := b_breastwork ; 26 :
20261: LD_ADDR_OWVAR 42
20265: PUSH
20266: LD_INT 31
20268: ST_TO_ADDR
20269: GO 20443
20271: LD_INT 26
20273: DOUBLE
20274: EQUAL
20275: IFTRUE 20279
20277: GO 20290
20279: POP
// bc_type := b_bunker ; 27 :
20280: LD_ADDR_OWVAR 42
20284: PUSH
20285: LD_INT 32
20287: ST_TO_ADDR
20288: GO 20443
20290: LD_INT 27
20292: DOUBLE
20293: EQUAL
20294: IFTRUE 20298
20296: GO 20309
20298: POP
// bc_type := b_turret ; 28 :
20299: LD_ADDR_OWVAR 42
20303: PUSH
20304: LD_INT 33
20306: ST_TO_ADDR
20307: GO 20443
20309: LD_INT 28
20311: DOUBLE
20312: EQUAL
20313: IFTRUE 20317
20315: GO 20328
20317: POP
// bc_type := b_armoury ; 29 :
20318: LD_ADDR_OWVAR 42
20322: PUSH
20323: LD_INT 4
20325: ST_TO_ADDR
20326: GO 20443
20328: LD_INT 29
20330: DOUBLE
20331: EQUAL
20332: IFTRUE 20336
20334: GO 20347
20336: POP
// bc_type := b_barracks ; 30 :
20337: LD_ADDR_OWVAR 42
20341: PUSH
20342: LD_INT 5
20344: ST_TO_ADDR
20345: GO 20443
20347: LD_INT 30
20349: DOUBLE
20350: EQUAL
20351: IFTRUE 20355
20353: GO 20366
20355: POP
// bc_type := b_solar_power ; 31 :
20356: LD_ADDR_OWVAR 42
20360: PUSH
20361: LD_INT 27
20363: ST_TO_ADDR
20364: GO 20443
20366: LD_INT 31
20368: DOUBLE
20369: EQUAL
20370: IFTRUE 20374
20372: GO 20385
20374: POP
// bc_type := b_oil_power ; 32 :
20375: LD_ADDR_OWVAR 42
20379: PUSH
20380: LD_INT 26
20382: ST_TO_ADDR
20383: GO 20443
20385: LD_INT 32
20387: DOUBLE
20388: EQUAL
20389: IFTRUE 20393
20391: GO 20404
20393: POP
// bc_type := b_siberite_power ; 33 :
20394: LD_ADDR_OWVAR 42
20398: PUSH
20399: LD_INT 28
20401: ST_TO_ADDR
20402: GO 20443
20404: LD_INT 33
20406: DOUBLE
20407: EQUAL
20408: IFTRUE 20412
20410: GO 20423
20412: POP
// bc_type := b_oil_mine ; 34 :
20413: LD_ADDR_OWVAR 42
20417: PUSH
20418: LD_INT 29
20420: ST_TO_ADDR
20421: GO 20443
20423: LD_INT 34
20425: DOUBLE
20426: EQUAL
20427: IFTRUE 20431
20429: GO 20442
20431: POP
// bc_type := b_siberite_mine ; end ;
20432: LD_ADDR_OWVAR 42
20436: PUSH
20437: LD_INT 30
20439: ST_TO_ADDR
20440: GO 20443
20442: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20443: LD_ADDR_VAR 0 8
20447: PUSH
20448: LD_VAR 0 5
20452: PPUSH
20453: LD_VAR 0 6
20457: PPUSH
20458: LD_VAR 0 3
20462: PPUSH
20463: CALL_OW 47
20467: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20468: LD_OWVAR 42
20472: PUSH
20473: LD_INT 32
20475: PUSH
20476: LD_INT 33
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: IN
20483: IFFALSE 20499
// PlaceWeaponTurret ( b , weapon ) ;
20485: LD_VAR 0 8
20489: PPUSH
20490: LD_VAR 0 4
20494: PPUSH
20495: CALL_OW 431
// end ;
20499: LD_VAR 0 7
20503: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20504: LD_INT 0
20506: PPUSH
20507: PPUSH
20508: PPUSH
20509: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20510: LD_ADDR_VAR 0 4
20514: PUSH
20515: LD_INT 22
20517: PUSH
20518: LD_OWVAR 2
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 2
20529: PUSH
20530: LD_INT 30
20532: PUSH
20533: LD_INT 0
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 30
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: LIST
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PPUSH
20559: CALL_OW 69
20563: ST_TO_ADDR
// if not tmp then
20564: LD_VAR 0 4
20568: NOT
20569: IFFALSE 20573
// exit ;
20571: GO 20632
// for i in tmp do
20573: LD_ADDR_VAR 0 2
20577: PUSH
20578: LD_VAR 0 4
20582: PUSH
20583: FOR_IN
20584: IFFALSE 20630
// for j = 1 to 3 do
20586: LD_ADDR_VAR 0 3
20590: PUSH
20591: DOUBLE
20592: LD_INT 1
20594: DEC
20595: ST_TO_ADDR
20596: LD_INT 3
20598: PUSH
20599: FOR_TO
20600: IFFALSE 20626
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20602: LD_VAR 0 2
20606: PPUSH
20607: CALL_OW 274
20611: PPUSH
20612: LD_VAR 0 3
20616: PPUSH
20617: LD_INT 99999
20619: PPUSH
20620: CALL_OW 277
20624: GO 20599
20626: POP
20627: POP
20628: GO 20583
20630: POP
20631: POP
// end ;
20632: LD_VAR 0 1
20636: RET
// export function hHackSetLevel10 ; var i , j ; begin
20637: LD_INT 0
20639: PPUSH
20640: PPUSH
20641: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20642: LD_ADDR_VAR 0 2
20646: PUSH
20647: LD_INT 21
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PPUSH
20657: CALL_OW 69
20661: PUSH
20662: FOR_IN
20663: IFFALSE 20715
// if IsSelected ( i ) then
20665: LD_VAR 0 2
20669: PPUSH
20670: CALL_OW 306
20674: IFFALSE 20713
// begin for j := 1 to 4 do
20676: LD_ADDR_VAR 0 3
20680: PUSH
20681: DOUBLE
20682: LD_INT 1
20684: DEC
20685: ST_TO_ADDR
20686: LD_INT 4
20688: PUSH
20689: FOR_TO
20690: IFFALSE 20711
// SetSkill ( i , j , 10 ) ;
20692: LD_VAR 0 2
20696: PPUSH
20697: LD_VAR 0 3
20701: PPUSH
20702: LD_INT 10
20704: PPUSH
20705: CALL_OW 237
20709: GO 20689
20711: POP
20712: POP
// end ;
20713: GO 20662
20715: POP
20716: POP
// end ;
20717: LD_VAR 0 1
20721: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20722: LD_INT 0
20724: PPUSH
20725: PPUSH
20726: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20727: LD_ADDR_VAR 0 2
20731: PUSH
20732: LD_INT 22
20734: PUSH
20735: LD_OWVAR 2
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 21
20746: PUSH
20747: LD_INT 1
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PPUSH
20758: CALL_OW 69
20762: PUSH
20763: FOR_IN
20764: IFFALSE 20805
// begin for j := 1 to 4 do
20766: LD_ADDR_VAR 0 3
20770: PUSH
20771: DOUBLE
20772: LD_INT 1
20774: DEC
20775: ST_TO_ADDR
20776: LD_INT 4
20778: PUSH
20779: FOR_TO
20780: IFFALSE 20801
// SetSkill ( i , j , 10 ) ;
20782: LD_VAR 0 2
20786: PPUSH
20787: LD_VAR 0 3
20791: PPUSH
20792: LD_INT 10
20794: PPUSH
20795: CALL_OW 237
20799: GO 20779
20801: POP
20802: POP
// end ;
20803: GO 20763
20805: POP
20806: POP
// end ;
20807: LD_VAR 0 1
20811: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20812: LD_INT 0
20814: PPUSH
// uc_side := your_side ;
20815: LD_ADDR_OWVAR 20
20819: PUSH
20820: LD_OWVAR 2
20824: ST_TO_ADDR
// uc_nation := nation ;
20825: LD_ADDR_OWVAR 21
20829: PUSH
20830: LD_VAR 0 1
20834: ST_TO_ADDR
// InitHc ;
20835: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20839: LD_INT 0
20841: PPUSH
20842: LD_VAR 0 2
20846: PPUSH
20847: LD_VAR 0 3
20851: PPUSH
20852: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20856: LD_VAR 0 4
20860: PPUSH
20861: LD_VAR 0 5
20865: PPUSH
20866: CALL_OW 428
20870: PUSH
20871: LD_INT 0
20873: EQUAL
20874: IFFALSE 20898
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20876: CALL_OW 44
20880: PPUSH
20881: LD_VAR 0 4
20885: PPUSH
20886: LD_VAR 0 5
20890: PPUSH
20891: LD_INT 1
20893: PPUSH
20894: CALL_OW 48
// end ;
20898: LD_VAR 0 6
20902: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20903: LD_INT 0
20905: PPUSH
20906: PPUSH
// uc_side := your_side ;
20907: LD_ADDR_OWVAR 20
20911: PUSH
20912: LD_OWVAR 2
20916: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20917: LD_VAR 0 1
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: LD_INT 2
20927: PUSH
20928: LD_INT 3
20930: PUSH
20931: LD_INT 4
20933: PUSH
20934: LD_INT 5
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: IN
20944: IFFALSE 20956
// uc_nation := nation_american else
20946: LD_ADDR_OWVAR 21
20950: PUSH
20951: LD_INT 1
20953: ST_TO_ADDR
20954: GO 20999
// if chassis in [ 11 , 12 , 13 , 14 ] then
20956: LD_VAR 0 1
20960: PUSH
20961: LD_INT 11
20963: PUSH
20964: LD_INT 12
20966: PUSH
20967: LD_INT 13
20969: PUSH
20970: LD_INT 14
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: IN
20979: IFFALSE 20991
// uc_nation := nation_arabian else
20981: LD_ADDR_OWVAR 21
20985: PUSH
20986: LD_INT 2
20988: ST_TO_ADDR
20989: GO 20999
// uc_nation := nation_russian ;
20991: LD_ADDR_OWVAR 21
20995: PUSH
20996: LD_INT 3
20998: ST_TO_ADDR
// vc_chassis := chassis ;
20999: LD_ADDR_OWVAR 37
21003: PUSH
21004: LD_VAR 0 1
21008: ST_TO_ADDR
// vc_engine := engine ;
21009: LD_ADDR_OWVAR 39
21013: PUSH
21014: LD_VAR 0 2
21018: ST_TO_ADDR
// vc_control := control ;
21019: LD_ADDR_OWVAR 38
21023: PUSH
21024: LD_VAR 0 3
21028: ST_TO_ADDR
// vc_weapon := weapon ;
21029: LD_ADDR_OWVAR 40
21033: PUSH
21034: LD_VAR 0 4
21038: ST_TO_ADDR
// un := CreateVehicle ;
21039: LD_ADDR_VAR 0 8
21043: PUSH
21044: CALL_OW 45
21048: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21049: LD_VAR 0 8
21053: PPUSH
21054: LD_INT 0
21056: PPUSH
21057: LD_INT 5
21059: PPUSH
21060: CALL_OW 12
21064: PPUSH
21065: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21069: LD_VAR 0 8
21073: PPUSH
21074: LD_VAR 0 5
21078: PPUSH
21079: LD_VAR 0 6
21083: PPUSH
21084: LD_INT 1
21086: PPUSH
21087: CALL_OW 48
// end ;
21091: LD_VAR 0 7
21095: RET
// export hInvincible ; every 1 do
21096: GO 21098
21098: DISABLE
// hInvincible := [ ] ;
21099: LD_ADDR_EXP 76
21103: PUSH
21104: EMPTY
21105: ST_TO_ADDR
21106: END
// every 10 do var i ;
21107: GO 21109
21109: DISABLE
21110: LD_INT 0
21112: PPUSH
// begin enable ;
21113: ENABLE
// if not hInvincible then
21114: LD_EXP 76
21118: NOT
21119: IFFALSE 21123
// exit ;
21121: GO 21167
// for i in hInvincible do
21123: LD_ADDR_VAR 0 1
21127: PUSH
21128: LD_EXP 76
21132: PUSH
21133: FOR_IN
21134: IFFALSE 21165
// if GetLives ( i ) < 1000 then
21136: LD_VAR 0 1
21140: PPUSH
21141: CALL_OW 256
21145: PUSH
21146: LD_INT 1000
21148: LESS
21149: IFFALSE 21163
// SetLives ( i , 1000 ) ;
21151: LD_VAR 0 1
21155: PPUSH
21156: LD_INT 1000
21158: PPUSH
21159: CALL_OW 234
21163: GO 21133
21165: POP
21166: POP
// end ;
21167: PPOPN 1
21169: END
// export function hHackInvincible ; var i ; begin
21170: LD_INT 0
21172: PPUSH
21173: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21174: LD_ADDR_VAR 0 2
21178: PUSH
21179: LD_INT 2
21181: PUSH
21182: LD_INT 21
21184: PUSH
21185: LD_INT 1
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 21
21194: PUSH
21195: LD_INT 2
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: LIST
21206: PPUSH
21207: CALL_OW 69
21211: PUSH
21212: FOR_IN
21213: IFFALSE 21274
// if IsSelected ( i ) then
21215: LD_VAR 0 2
21219: PPUSH
21220: CALL_OW 306
21224: IFFALSE 21272
// begin if i in hInvincible then
21226: LD_VAR 0 2
21230: PUSH
21231: LD_EXP 76
21235: IN
21236: IFFALSE 21256
// hInvincible := hInvincible diff i else
21238: LD_ADDR_EXP 76
21242: PUSH
21243: LD_EXP 76
21247: PUSH
21248: LD_VAR 0 2
21252: DIFF
21253: ST_TO_ADDR
21254: GO 21272
// hInvincible := hInvincible union i ;
21256: LD_ADDR_EXP 76
21260: PUSH
21261: LD_EXP 76
21265: PUSH
21266: LD_VAR 0 2
21270: UNION
21271: ST_TO_ADDR
// end ;
21272: GO 21212
21274: POP
21275: POP
// end ;
21276: LD_VAR 0 1
21280: RET
// export function hHackInvisible ; var i , j ; begin
21281: LD_INT 0
21283: PPUSH
21284: PPUSH
21285: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21286: LD_ADDR_VAR 0 2
21290: PUSH
21291: LD_INT 21
21293: PUSH
21294: LD_INT 1
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PPUSH
21301: CALL_OW 69
21305: PUSH
21306: FOR_IN
21307: IFFALSE 21331
// if IsSelected ( i ) then
21309: LD_VAR 0 2
21313: PPUSH
21314: CALL_OW 306
21318: IFFALSE 21329
// ComForceInvisible ( i ) ;
21320: LD_VAR 0 2
21324: PPUSH
21325: CALL_OW 496
21329: GO 21306
21331: POP
21332: POP
// end ;
21333: LD_VAR 0 1
21337: RET
// export function hHackChangeYourSide ; begin
21338: LD_INT 0
21340: PPUSH
// if your_side = 8 then
21341: LD_OWVAR 2
21345: PUSH
21346: LD_INT 8
21348: EQUAL
21349: IFFALSE 21361
// your_side := 0 else
21351: LD_ADDR_OWVAR 2
21355: PUSH
21356: LD_INT 0
21358: ST_TO_ADDR
21359: GO 21375
// your_side := your_side + 1 ;
21361: LD_ADDR_OWVAR 2
21365: PUSH
21366: LD_OWVAR 2
21370: PUSH
21371: LD_INT 1
21373: PLUS
21374: ST_TO_ADDR
// end ;
21375: LD_VAR 0 1
21379: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21380: LD_INT 0
21382: PPUSH
21383: PPUSH
21384: PPUSH
// for i in all_units do
21385: LD_ADDR_VAR 0 2
21389: PUSH
21390: LD_OWVAR 3
21394: PUSH
21395: FOR_IN
21396: IFFALSE 21474
// if IsSelected ( i ) then
21398: LD_VAR 0 2
21402: PPUSH
21403: CALL_OW 306
21407: IFFALSE 21472
// begin j := GetSide ( i ) ;
21409: LD_ADDR_VAR 0 3
21413: PUSH
21414: LD_VAR 0 2
21418: PPUSH
21419: CALL_OW 255
21423: ST_TO_ADDR
// if j = 8 then
21424: LD_VAR 0 3
21428: PUSH
21429: LD_INT 8
21431: EQUAL
21432: IFFALSE 21444
// j := 0 else
21434: LD_ADDR_VAR 0 3
21438: PUSH
21439: LD_INT 0
21441: ST_TO_ADDR
21442: GO 21458
// j := j + 1 ;
21444: LD_ADDR_VAR 0 3
21448: PUSH
21449: LD_VAR 0 3
21453: PUSH
21454: LD_INT 1
21456: PLUS
21457: ST_TO_ADDR
// SetSide ( i , j ) ;
21458: LD_VAR 0 2
21462: PPUSH
21463: LD_VAR 0 3
21467: PPUSH
21468: CALL_OW 235
// end ;
21472: GO 21395
21474: POP
21475: POP
// end ;
21476: LD_VAR 0 1
21480: RET
// export function hHackFog ; begin
21481: LD_INT 0
21483: PPUSH
// FogOff ( true ) ;
21484: LD_INT 1
21486: PPUSH
21487: CALL_OW 344
// end ;
21491: LD_VAR 0 1
21495: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21496: LD_INT 0
21498: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21499: LD_VAR 0 1
21503: PPUSH
21504: LD_VAR 0 2
21508: PPUSH
21509: LD_VAR 0 3
21513: PPUSH
21514: LD_INT 1
21516: PPUSH
21517: LD_INT 1
21519: PPUSH
21520: CALL_OW 483
// CenterOnXY ( x , y ) ;
21524: LD_VAR 0 2
21528: PPUSH
21529: LD_VAR 0 3
21533: PPUSH
21534: CALL_OW 84
// end ;
21538: LD_VAR 0 4
21542: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21543: LD_INT 0
21545: PPUSH
21546: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21547: LD_VAR 0 1
21551: NOT
21552: PUSH
21553: LD_VAR 0 2
21557: PPUSH
21558: LD_VAR 0 3
21562: PPUSH
21563: CALL_OW 488
21567: NOT
21568: OR
21569: PUSH
21570: LD_VAR 0 1
21574: PPUSH
21575: CALL_OW 266
21579: PUSH
21580: LD_INT 3
21582: NONEQUAL
21583: PUSH
21584: LD_VAR 0 1
21588: PPUSH
21589: CALL_OW 247
21593: PUSH
21594: LD_INT 1
21596: EQUAL
21597: NOT
21598: AND
21599: OR
21600: IFFALSE 21604
// exit ;
21602: GO 21753
// if GetType ( factory ) = unit_human then
21604: LD_VAR 0 1
21608: PPUSH
21609: CALL_OW 247
21613: PUSH
21614: LD_INT 1
21616: EQUAL
21617: IFFALSE 21634
// factory := IsInUnit ( factory ) ;
21619: LD_ADDR_VAR 0 1
21623: PUSH
21624: LD_VAR 0 1
21628: PPUSH
21629: CALL_OW 310
21633: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21634: LD_VAR 0 1
21638: PPUSH
21639: CALL_OW 266
21643: PUSH
21644: LD_INT 3
21646: NONEQUAL
21647: IFFALSE 21651
// exit ;
21649: GO 21753
// if HexInfo ( x , y ) = factory then
21651: LD_VAR 0 2
21655: PPUSH
21656: LD_VAR 0 3
21660: PPUSH
21661: CALL_OW 428
21665: PUSH
21666: LD_VAR 0 1
21670: EQUAL
21671: IFFALSE 21698
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21673: LD_ADDR_EXP 77
21677: PUSH
21678: LD_EXP 77
21682: PPUSH
21683: LD_VAR 0 1
21687: PPUSH
21688: LD_INT 0
21690: PPUSH
21691: CALL_OW 1
21695: ST_TO_ADDR
21696: GO 21749
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21698: LD_ADDR_EXP 77
21702: PUSH
21703: LD_EXP 77
21707: PPUSH
21708: LD_VAR 0 1
21712: PPUSH
21713: LD_VAR 0 1
21717: PPUSH
21718: CALL_OW 255
21722: PUSH
21723: LD_VAR 0 1
21727: PUSH
21728: LD_VAR 0 2
21732: PUSH
21733: LD_VAR 0 3
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: PPUSH
21744: CALL_OW 1
21748: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21749: CALL 21758 0 0
// end ;
21753: LD_VAR 0 4
21757: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21758: LD_INT 0
21760: PPUSH
21761: PPUSH
21762: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21763: LD_STRING resetFactoryWaypoint();
21765: PPUSH
21766: CALL_OW 559
// if factoryWaypoints then
21770: LD_EXP 77
21774: IFFALSE 21900
// begin list := PrepareArray ( factoryWaypoints ) ;
21776: LD_ADDR_VAR 0 3
21780: PUSH
21781: LD_EXP 77
21785: PPUSH
21786: CALL 68369 0 1
21790: ST_TO_ADDR
// for i := 1 to list do
21791: LD_ADDR_VAR 0 2
21795: PUSH
21796: DOUBLE
21797: LD_INT 1
21799: DEC
21800: ST_TO_ADDR
21801: LD_VAR 0 3
21805: PUSH
21806: FOR_TO
21807: IFFALSE 21898
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21809: LD_STRING setFactoryWaypointXY(
21811: PUSH
21812: LD_VAR 0 3
21816: PUSH
21817: LD_VAR 0 2
21821: ARRAY
21822: PUSH
21823: LD_INT 1
21825: ARRAY
21826: STR
21827: PUSH
21828: LD_STRING ,
21830: STR
21831: PUSH
21832: LD_VAR 0 3
21836: PUSH
21837: LD_VAR 0 2
21841: ARRAY
21842: PUSH
21843: LD_INT 2
21845: ARRAY
21846: STR
21847: PUSH
21848: LD_STRING ,
21850: STR
21851: PUSH
21852: LD_VAR 0 3
21856: PUSH
21857: LD_VAR 0 2
21861: ARRAY
21862: PUSH
21863: LD_INT 3
21865: ARRAY
21866: STR
21867: PUSH
21868: LD_STRING ,
21870: STR
21871: PUSH
21872: LD_VAR 0 3
21876: PUSH
21877: LD_VAR 0 2
21881: ARRAY
21882: PUSH
21883: LD_INT 4
21885: ARRAY
21886: STR
21887: PUSH
21888: LD_STRING )
21890: STR
21891: PPUSH
21892: CALL_OW 559
21896: GO 21806
21898: POP
21899: POP
// end ; end ;
21900: LD_VAR 0 1
21904: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21905: LD_INT 0
21907: PPUSH
// if HexInfo ( x , y ) = warehouse then
21908: LD_VAR 0 2
21912: PPUSH
21913: LD_VAR 0 3
21917: PPUSH
21918: CALL_OW 428
21922: PUSH
21923: LD_VAR 0 1
21927: EQUAL
21928: IFFALSE 21955
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21930: LD_ADDR_EXP 78
21934: PUSH
21935: LD_EXP 78
21939: PPUSH
21940: LD_VAR 0 1
21944: PPUSH
21945: LD_INT 0
21947: PPUSH
21948: CALL_OW 1
21952: ST_TO_ADDR
21953: GO 22006
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21955: LD_ADDR_EXP 78
21959: PUSH
21960: LD_EXP 78
21964: PPUSH
21965: LD_VAR 0 1
21969: PPUSH
21970: LD_VAR 0 1
21974: PPUSH
21975: CALL_OW 255
21979: PUSH
21980: LD_VAR 0 1
21984: PUSH
21985: LD_VAR 0 2
21989: PUSH
21990: LD_VAR 0 3
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: PPUSH
22001: CALL_OW 1
22005: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22006: CALL 22015 0 0
// end ;
22010: LD_VAR 0 4
22014: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22015: LD_INT 0
22017: PPUSH
22018: PPUSH
22019: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22020: LD_STRING resetWarehouseGatheringPoints();
22022: PPUSH
22023: CALL_OW 559
// if warehouseGatheringPoints then
22027: LD_EXP 78
22031: IFFALSE 22157
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22033: LD_ADDR_VAR 0 3
22037: PUSH
22038: LD_EXP 78
22042: PPUSH
22043: CALL 68369 0 1
22047: ST_TO_ADDR
// for i := 1 to list do
22048: LD_ADDR_VAR 0 2
22052: PUSH
22053: DOUBLE
22054: LD_INT 1
22056: DEC
22057: ST_TO_ADDR
22058: LD_VAR 0 3
22062: PUSH
22063: FOR_TO
22064: IFFALSE 22155
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22066: LD_STRING setWarehouseGatheringPointXY(
22068: PUSH
22069: LD_VAR 0 3
22073: PUSH
22074: LD_VAR 0 2
22078: ARRAY
22079: PUSH
22080: LD_INT 1
22082: ARRAY
22083: STR
22084: PUSH
22085: LD_STRING ,
22087: STR
22088: PUSH
22089: LD_VAR 0 3
22093: PUSH
22094: LD_VAR 0 2
22098: ARRAY
22099: PUSH
22100: LD_INT 2
22102: ARRAY
22103: STR
22104: PUSH
22105: LD_STRING ,
22107: STR
22108: PUSH
22109: LD_VAR 0 3
22113: PUSH
22114: LD_VAR 0 2
22118: ARRAY
22119: PUSH
22120: LD_INT 3
22122: ARRAY
22123: STR
22124: PUSH
22125: LD_STRING ,
22127: STR
22128: PUSH
22129: LD_VAR 0 3
22133: PUSH
22134: LD_VAR 0 2
22138: ARRAY
22139: PUSH
22140: LD_INT 4
22142: ARRAY
22143: STR
22144: PUSH
22145: LD_STRING )
22147: STR
22148: PPUSH
22149: CALL_OW 559
22153: GO 22063
22155: POP
22156: POP
// end ; end ;
22157: LD_VAR 0 1
22161: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22162: LD_EXP 78
22166: IFFALSE 22851
22168: GO 22170
22170: DISABLE
22171: LD_INT 0
22173: PPUSH
22174: PPUSH
22175: PPUSH
22176: PPUSH
22177: PPUSH
22178: PPUSH
22179: PPUSH
22180: PPUSH
22181: PPUSH
// begin enable ;
22182: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22183: LD_ADDR_VAR 0 3
22187: PUSH
22188: LD_EXP 78
22192: PPUSH
22193: CALL 68369 0 1
22197: ST_TO_ADDR
// if not list then
22198: LD_VAR 0 3
22202: NOT
22203: IFFALSE 22207
// exit ;
22205: GO 22851
// for i := 1 to list do
22207: LD_ADDR_VAR 0 1
22211: PUSH
22212: DOUBLE
22213: LD_INT 1
22215: DEC
22216: ST_TO_ADDR
22217: LD_VAR 0 3
22221: PUSH
22222: FOR_TO
22223: IFFALSE 22849
// begin depot := list [ i ] [ 2 ] ;
22225: LD_ADDR_VAR 0 8
22229: PUSH
22230: LD_VAR 0 3
22234: PUSH
22235: LD_VAR 0 1
22239: ARRAY
22240: PUSH
22241: LD_INT 2
22243: ARRAY
22244: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22245: LD_ADDR_VAR 0 5
22249: PUSH
22250: LD_VAR 0 3
22254: PUSH
22255: LD_VAR 0 1
22259: ARRAY
22260: PUSH
22261: LD_INT 1
22263: ARRAY
22264: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22265: LD_VAR 0 8
22269: PPUSH
22270: CALL_OW 301
22274: PUSH
22275: LD_VAR 0 5
22279: PUSH
22280: LD_VAR 0 8
22284: PPUSH
22285: CALL_OW 255
22289: NONEQUAL
22290: OR
22291: IFFALSE 22320
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22293: LD_ADDR_EXP 78
22297: PUSH
22298: LD_EXP 78
22302: PPUSH
22303: LD_VAR 0 8
22307: PPUSH
22308: LD_INT 0
22310: PPUSH
22311: CALL_OW 1
22315: ST_TO_ADDR
// exit ;
22316: POP
22317: POP
22318: GO 22851
// end ; x := list [ i ] [ 3 ] ;
22320: LD_ADDR_VAR 0 6
22324: PUSH
22325: LD_VAR 0 3
22329: PUSH
22330: LD_VAR 0 1
22334: ARRAY
22335: PUSH
22336: LD_INT 3
22338: ARRAY
22339: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22340: LD_ADDR_VAR 0 7
22344: PUSH
22345: LD_VAR 0 3
22349: PUSH
22350: LD_VAR 0 1
22354: ARRAY
22355: PUSH
22356: LD_INT 4
22358: ARRAY
22359: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22360: LD_ADDR_VAR 0 9
22364: PUSH
22365: LD_VAR 0 6
22369: PPUSH
22370: LD_VAR 0 7
22374: PPUSH
22375: LD_INT 16
22377: PPUSH
22378: CALL 66957 0 3
22382: ST_TO_ADDR
// if not cratesNearbyPoint then
22383: LD_VAR 0 9
22387: NOT
22388: IFFALSE 22394
// exit ;
22390: POP
22391: POP
22392: GO 22851
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22394: LD_ADDR_VAR 0 4
22398: PUSH
22399: LD_INT 22
22401: PUSH
22402: LD_VAR 0 5
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 3
22413: PUSH
22414: LD_INT 60
22416: PUSH
22417: EMPTY
22418: LIST
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 91
22426: PUSH
22427: LD_VAR 0 8
22431: PUSH
22432: LD_INT 6
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 2
22442: PUSH
22443: LD_INT 25
22445: PUSH
22446: LD_INT 2
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 25
22455: PUSH
22456: LD_INT 16
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: PPUSH
22474: CALL_OW 69
22478: PUSH
22479: LD_VAR 0 8
22483: PPUSH
22484: CALL_OW 313
22488: PPUSH
22489: LD_INT 3
22491: PUSH
22492: LD_INT 60
22494: PUSH
22495: EMPTY
22496: LIST
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 2
22504: PUSH
22505: LD_INT 25
22507: PUSH
22508: LD_INT 2
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 25
22517: PUSH
22518: LD_INT 16
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: LIST
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PPUSH
22534: CALL_OW 72
22538: UNION
22539: ST_TO_ADDR
// if tmp then
22540: LD_VAR 0 4
22544: IFFALSE 22624
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22546: LD_ADDR_VAR 0 4
22550: PUSH
22551: LD_VAR 0 4
22555: PPUSH
22556: LD_INT 3
22558: PPUSH
22559: CALL 64926 0 2
22563: ST_TO_ADDR
// for j in tmp do
22564: LD_ADDR_VAR 0 2
22568: PUSH
22569: LD_VAR 0 4
22573: PUSH
22574: FOR_IN
22575: IFFALSE 22618
// begin if IsInUnit ( j ) then
22577: LD_VAR 0 2
22581: PPUSH
22582: CALL_OW 310
22586: IFFALSE 22597
// ComExit ( j ) ;
22588: LD_VAR 0 2
22592: PPUSH
22593: CALL 65009 0 1
// AddComCollect ( j , x , y ) ;
22597: LD_VAR 0 2
22601: PPUSH
22602: LD_VAR 0 6
22606: PPUSH
22607: LD_VAR 0 7
22611: PPUSH
22612: CALL_OW 177
// end ;
22616: GO 22574
22618: POP
22619: POP
// exit ;
22620: POP
22621: POP
22622: GO 22851
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22624: LD_ADDR_VAR 0 4
22628: PUSH
22629: LD_INT 22
22631: PUSH
22632: LD_VAR 0 5
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 91
22643: PUSH
22644: LD_VAR 0 8
22648: PUSH
22649: LD_INT 8
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 2
22659: PUSH
22660: LD_INT 34
22662: PUSH
22663: LD_INT 12
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 34
22672: PUSH
22673: LD_INT 51
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 34
22682: PUSH
22683: LD_INT 32
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 34
22692: PUSH
22693: LD_INT 89
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: PPUSH
22712: CALL_OW 69
22716: ST_TO_ADDR
// if tmp then
22717: LD_VAR 0 4
22721: IFFALSE 22847
// begin for j in tmp do
22723: LD_ADDR_VAR 0 2
22727: PUSH
22728: LD_VAR 0 4
22732: PUSH
22733: FOR_IN
22734: IFFALSE 22845
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22736: LD_VAR 0 2
22740: PPUSH
22741: CALL_OW 262
22745: PUSH
22746: LD_INT 3
22748: EQUAL
22749: PUSH
22750: LD_VAR 0 2
22754: PPUSH
22755: CALL_OW 261
22759: PUSH
22760: LD_INT 20
22762: GREATER
22763: OR
22764: PUSH
22765: LD_VAR 0 2
22769: PPUSH
22770: CALL_OW 314
22774: NOT
22775: AND
22776: PUSH
22777: LD_VAR 0 2
22781: PPUSH
22782: CALL_OW 263
22786: PUSH
22787: LD_INT 1
22789: NONEQUAL
22790: PUSH
22791: LD_VAR 0 2
22795: PPUSH
22796: CALL_OW 311
22800: OR
22801: AND
22802: IFFALSE 22843
// begin ComCollect ( j , x , y ) ;
22804: LD_VAR 0 2
22808: PPUSH
22809: LD_VAR 0 6
22813: PPUSH
22814: LD_VAR 0 7
22818: PPUSH
22819: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22823: LD_VAR 0 2
22827: PPUSH
22828: LD_VAR 0 8
22832: PPUSH
22833: CALL_OW 172
// exit ;
22837: POP
22838: POP
22839: POP
22840: POP
22841: GO 22851
// end ;
22843: GO 22733
22845: POP
22846: POP
// end ; end ;
22847: GO 22222
22849: POP
22850: POP
// end ; end_of_file
22851: PPOPN 9
22853: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22854: LD_INT 0
22856: PPUSH
22857: PPUSH
22858: PPUSH
22859: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22860: LD_VAR 0 1
22864: PPUSH
22865: CALL_OW 264
22869: PUSH
22870: LD_INT 91
22872: EQUAL
22873: IFFALSE 22945
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22875: LD_INT 68
22877: PPUSH
22878: LD_VAR 0 1
22882: PPUSH
22883: CALL_OW 255
22887: PPUSH
22888: CALL_OW 321
22892: PUSH
22893: LD_INT 2
22895: EQUAL
22896: IFFALSE 22908
// eff := 70 else
22898: LD_ADDR_VAR 0 4
22902: PUSH
22903: LD_INT 70
22905: ST_TO_ADDR
22906: GO 22916
// eff := 30 ;
22908: LD_ADDR_VAR 0 4
22912: PUSH
22913: LD_INT 30
22915: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22916: LD_VAR 0 1
22920: PPUSH
22921: CALL_OW 250
22925: PPUSH
22926: LD_VAR 0 1
22930: PPUSH
22931: CALL_OW 251
22935: PPUSH
22936: LD_VAR 0 4
22940: PPUSH
22941: CALL_OW 495
// end ; end ;
22945: LD_VAR 0 2
22949: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22950: LD_INT 0
22952: PPUSH
// end ;
22953: LD_VAR 0 4
22957: RET
// export function SOS_Command ( cmd ) ; begin
22958: LD_INT 0
22960: PPUSH
// end ;
22961: LD_VAR 0 2
22965: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22966: LD_INT 0
22968: PPUSH
// end ;
22969: LD_VAR 0 6
22973: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22974: LD_INT 0
22976: PPUSH
22977: PPUSH
// if not vehicle or not factory then
22978: LD_VAR 0 1
22982: NOT
22983: PUSH
22984: LD_VAR 0 2
22988: NOT
22989: OR
22990: IFFALSE 22994
// exit ;
22992: GO 23225
// if factoryWaypoints >= factory then
22994: LD_EXP 77
22998: PUSH
22999: LD_VAR 0 2
23003: GREATEREQUAL
23004: IFFALSE 23225
// if factoryWaypoints [ factory ] then
23006: LD_EXP 77
23010: PUSH
23011: LD_VAR 0 2
23015: ARRAY
23016: IFFALSE 23225
// begin if GetControl ( vehicle ) = control_manual then
23018: LD_VAR 0 1
23022: PPUSH
23023: CALL_OW 263
23027: PUSH
23028: LD_INT 1
23030: EQUAL
23031: IFFALSE 23112
// begin driver := IsDrivenBy ( vehicle ) ;
23033: LD_ADDR_VAR 0 4
23037: PUSH
23038: LD_VAR 0 1
23042: PPUSH
23043: CALL_OW 311
23047: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23048: LD_VAR 0 4
23052: PPUSH
23053: LD_EXP 77
23057: PUSH
23058: LD_VAR 0 2
23062: ARRAY
23063: PUSH
23064: LD_INT 3
23066: ARRAY
23067: PPUSH
23068: LD_EXP 77
23072: PUSH
23073: LD_VAR 0 2
23077: ARRAY
23078: PUSH
23079: LD_INT 4
23081: ARRAY
23082: PPUSH
23083: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23087: LD_VAR 0 4
23091: PPUSH
23092: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23096: LD_VAR 0 4
23100: PPUSH
23101: LD_VAR 0 2
23105: PPUSH
23106: CALL_OW 180
// end else
23110: GO 23225
// if GetControl ( vehicle ) = control_remote then
23112: LD_VAR 0 1
23116: PPUSH
23117: CALL_OW 263
23121: PUSH
23122: LD_INT 2
23124: EQUAL
23125: IFFALSE 23186
// begin wait ( 0 0$2 ) ;
23127: LD_INT 70
23129: PPUSH
23130: CALL_OW 67
// if Connect ( vehicle ) then
23134: LD_VAR 0 1
23138: PPUSH
23139: CALL 35249 0 1
23143: IFFALSE 23184
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23145: LD_VAR 0 1
23149: PPUSH
23150: LD_EXP 77
23154: PUSH
23155: LD_VAR 0 2
23159: ARRAY
23160: PUSH
23161: LD_INT 3
23163: ARRAY
23164: PPUSH
23165: LD_EXP 77
23169: PUSH
23170: LD_VAR 0 2
23174: ARRAY
23175: PUSH
23176: LD_INT 4
23178: ARRAY
23179: PPUSH
23180: CALL_OW 171
// end else
23184: GO 23225
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23186: LD_VAR 0 1
23190: PPUSH
23191: LD_EXP 77
23195: PUSH
23196: LD_VAR 0 2
23200: ARRAY
23201: PUSH
23202: LD_INT 3
23204: ARRAY
23205: PPUSH
23206: LD_EXP 77
23210: PUSH
23211: LD_VAR 0 2
23215: ARRAY
23216: PUSH
23217: LD_INT 4
23219: ARRAY
23220: PPUSH
23221: CALL_OW 171
// end ; end ;
23225: LD_VAR 0 3
23229: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23230: LD_INT 0
23232: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23233: LD_VAR 0 1
23237: PUSH
23238: LD_INT 250
23240: EQUAL
23241: PUSH
23242: LD_VAR 0 2
23246: PPUSH
23247: CALL_OW 264
23251: PUSH
23252: LD_INT 81
23254: EQUAL
23255: AND
23256: IFFALSE 23277
// MinerPlaceMine ( unit , x , y ) ;
23258: LD_VAR 0 2
23262: PPUSH
23263: LD_VAR 0 4
23267: PPUSH
23268: LD_VAR 0 5
23272: PPUSH
23273: CALL 25662 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23277: LD_VAR 0 1
23281: PUSH
23282: LD_INT 251
23284: EQUAL
23285: PUSH
23286: LD_VAR 0 2
23290: PPUSH
23291: CALL_OW 264
23295: PUSH
23296: LD_INT 81
23298: EQUAL
23299: AND
23300: IFFALSE 23321
// MinerDetonateMine ( unit , x , y ) ;
23302: LD_VAR 0 2
23306: PPUSH
23307: LD_VAR 0 4
23311: PPUSH
23312: LD_VAR 0 5
23316: PPUSH
23317: CALL 25937 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23321: LD_VAR 0 1
23325: PUSH
23326: LD_INT 252
23328: EQUAL
23329: PUSH
23330: LD_VAR 0 2
23334: PPUSH
23335: CALL_OW 264
23339: PUSH
23340: LD_INT 81
23342: EQUAL
23343: AND
23344: IFFALSE 23365
// MinerCreateMinefield ( unit , x , y ) ;
23346: LD_VAR 0 2
23350: PPUSH
23351: LD_VAR 0 4
23355: PPUSH
23356: LD_VAR 0 5
23360: PPUSH
23361: CALL 26354 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23365: LD_VAR 0 1
23369: PUSH
23370: LD_INT 253
23372: EQUAL
23373: PUSH
23374: LD_VAR 0 2
23378: PPUSH
23379: CALL_OW 257
23383: PUSH
23384: LD_INT 5
23386: EQUAL
23387: AND
23388: IFFALSE 23409
// ComBinocular ( unit , x , y ) ;
23390: LD_VAR 0 2
23394: PPUSH
23395: LD_VAR 0 4
23399: PPUSH
23400: LD_VAR 0 5
23404: PPUSH
23405: CALL 26723 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23409: LD_VAR 0 1
23413: PUSH
23414: LD_INT 254
23416: EQUAL
23417: PUSH
23418: LD_VAR 0 2
23422: PPUSH
23423: CALL_OW 264
23427: PUSH
23428: LD_INT 99
23430: EQUAL
23431: AND
23432: PUSH
23433: LD_VAR 0 3
23437: PPUSH
23438: CALL_OW 263
23442: PUSH
23443: LD_INT 3
23445: EQUAL
23446: AND
23447: IFFALSE 23463
// HackDestroyVehicle ( unit , selectedUnit ) ;
23449: LD_VAR 0 2
23453: PPUSH
23454: LD_VAR 0 3
23458: PPUSH
23459: CALL 25026 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23463: LD_VAR 0 1
23467: PUSH
23468: LD_INT 255
23470: EQUAL
23471: PUSH
23472: LD_VAR 0 2
23476: PPUSH
23477: CALL_OW 264
23481: PUSH
23482: LD_INT 14
23484: PUSH
23485: LD_INT 53
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: IN
23492: AND
23493: PUSH
23494: LD_VAR 0 4
23498: PPUSH
23499: LD_VAR 0 5
23503: PPUSH
23504: CALL_OW 488
23508: AND
23509: IFFALSE 23533
// CutTreeXYR ( unit , x , y , 12 ) ;
23511: LD_VAR 0 2
23515: PPUSH
23516: LD_VAR 0 4
23520: PPUSH
23521: LD_VAR 0 5
23525: PPUSH
23526: LD_INT 12
23528: PPUSH
23529: CALL 23596 0 4
// if cmd = 256 then
23533: LD_VAR 0 1
23537: PUSH
23538: LD_INT 256
23540: EQUAL
23541: IFFALSE 23562
// SetFactoryWaypoint ( unit , x , y ) ;
23543: LD_VAR 0 2
23547: PPUSH
23548: LD_VAR 0 4
23552: PPUSH
23553: LD_VAR 0 5
23557: PPUSH
23558: CALL 21543 0 3
// if cmd = 257 then
23562: LD_VAR 0 1
23566: PUSH
23567: LD_INT 257
23569: EQUAL
23570: IFFALSE 23591
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23572: LD_VAR 0 2
23576: PPUSH
23577: LD_VAR 0 4
23581: PPUSH
23582: LD_VAR 0 5
23586: PPUSH
23587: CALL 21905 0 3
// end ;
23591: LD_VAR 0 6
23595: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23596: LD_INT 0
23598: PPUSH
23599: PPUSH
23600: PPUSH
23601: PPUSH
23602: PPUSH
23603: PPUSH
23604: PPUSH
23605: PPUSH
23606: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23607: LD_VAR 0 1
23611: NOT
23612: PUSH
23613: LD_VAR 0 2
23617: PPUSH
23618: LD_VAR 0 3
23622: PPUSH
23623: CALL_OW 488
23627: NOT
23628: OR
23629: PUSH
23630: LD_VAR 0 4
23634: NOT
23635: OR
23636: IFFALSE 23640
// exit ;
23638: GO 23980
// list := [ ] ;
23640: LD_ADDR_VAR 0 13
23644: PUSH
23645: EMPTY
23646: ST_TO_ADDR
// if x - r < 0 then
23647: LD_VAR 0 2
23651: PUSH
23652: LD_VAR 0 4
23656: MINUS
23657: PUSH
23658: LD_INT 0
23660: LESS
23661: IFFALSE 23673
// min_x := 0 else
23663: LD_ADDR_VAR 0 7
23667: PUSH
23668: LD_INT 0
23670: ST_TO_ADDR
23671: GO 23689
// min_x := x - r ;
23673: LD_ADDR_VAR 0 7
23677: PUSH
23678: LD_VAR 0 2
23682: PUSH
23683: LD_VAR 0 4
23687: MINUS
23688: ST_TO_ADDR
// if y - r < 0 then
23689: LD_VAR 0 3
23693: PUSH
23694: LD_VAR 0 4
23698: MINUS
23699: PUSH
23700: LD_INT 0
23702: LESS
23703: IFFALSE 23715
// min_y := 0 else
23705: LD_ADDR_VAR 0 8
23709: PUSH
23710: LD_INT 0
23712: ST_TO_ADDR
23713: GO 23731
// min_y := y - r ;
23715: LD_ADDR_VAR 0 8
23719: PUSH
23720: LD_VAR 0 3
23724: PUSH
23725: LD_VAR 0 4
23729: MINUS
23730: ST_TO_ADDR
// max_x := x + r ;
23731: LD_ADDR_VAR 0 9
23735: PUSH
23736: LD_VAR 0 2
23740: PUSH
23741: LD_VAR 0 4
23745: PLUS
23746: ST_TO_ADDR
// max_y := y + r ;
23747: LD_ADDR_VAR 0 10
23751: PUSH
23752: LD_VAR 0 3
23756: PUSH
23757: LD_VAR 0 4
23761: PLUS
23762: ST_TO_ADDR
// for _x = min_x to max_x do
23763: LD_ADDR_VAR 0 11
23767: PUSH
23768: DOUBLE
23769: LD_VAR 0 7
23773: DEC
23774: ST_TO_ADDR
23775: LD_VAR 0 9
23779: PUSH
23780: FOR_TO
23781: IFFALSE 23898
// for _y = min_y to max_y do
23783: LD_ADDR_VAR 0 12
23787: PUSH
23788: DOUBLE
23789: LD_VAR 0 8
23793: DEC
23794: ST_TO_ADDR
23795: LD_VAR 0 10
23799: PUSH
23800: FOR_TO
23801: IFFALSE 23894
// begin if not ValidHex ( _x , _y ) then
23803: LD_VAR 0 11
23807: PPUSH
23808: LD_VAR 0 12
23812: PPUSH
23813: CALL_OW 488
23817: NOT
23818: IFFALSE 23822
// continue ;
23820: GO 23800
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23822: LD_VAR 0 11
23826: PPUSH
23827: LD_VAR 0 12
23831: PPUSH
23832: CALL_OW 351
23836: PUSH
23837: LD_VAR 0 11
23841: PPUSH
23842: LD_VAR 0 12
23846: PPUSH
23847: CALL_OW 554
23851: AND
23852: IFFALSE 23892
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23854: LD_ADDR_VAR 0 13
23858: PUSH
23859: LD_VAR 0 13
23863: PPUSH
23864: LD_VAR 0 13
23868: PUSH
23869: LD_INT 1
23871: PLUS
23872: PPUSH
23873: LD_VAR 0 11
23877: PUSH
23878: LD_VAR 0 12
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PPUSH
23887: CALL_OW 2
23891: ST_TO_ADDR
// end ;
23892: GO 23800
23894: POP
23895: POP
23896: GO 23780
23898: POP
23899: POP
// if not list then
23900: LD_VAR 0 13
23904: NOT
23905: IFFALSE 23909
// exit ;
23907: GO 23980
// for i in list do
23909: LD_ADDR_VAR 0 6
23913: PUSH
23914: LD_VAR 0 13
23918: PUSH
23919: FOR_IN
23920: IFFALSE 23978
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23922: LD_VAR 0 1
23926: PPUSH
23927: LD_STRING M
23929: PUSH
23930: LD_VAR 0 6
23934: PUSH
23935: LD_INT 1
23937: ARRAY
23938: PUSH
23939: LD_VAR 0 6
23943: PUSH
23944: LD_INT 2
23946: ARRAY
23947: PUSH
23948: LD_INT 0
23950: PUSH
23951: LD_INT 0
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: PUSH
23969: EMPTY
23970: LIST
23971: PPUSH
23972: CALL_OW 447
23976: GO 23919
23978: POP
23979: POP
// end ;
23980: LD_VAR 0 5
23984: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23985: LD_EXP 80
23989: NOT
23990: IFFALSE 24040
23992: GO 23994
23994: DISABLE
// begin initHack := true ;
23995: LD_ADDR_EXP 80
23999: PUSH
24000: LD_INT 1
24002: ST_TO_ADDR
// hackTanks := [ ] ;
24003: LD_ADDR_EXP 81
24007: PUSH
24008: EMPTY
24009: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24010: LD_ADDR_EXP 82
24014: PUSH
24015: EMPTY
24016: ST_TO_ADDR
// hackLimit := 3 ;
24017: LD_ADDR_EXP 83
24021: PUSH
24022: LD_INT 3
24024: ST_TO_ADDR
// hackDist := 12 ;
24025: LD_ADDR_EXP 84
24029: PUSH
24030: LD_INT 12
24032: ST_TO_ADDR
// hackCounter := [ ] ;
24033: LD_ADDR_EXP 85
24037: PUSH
24038: EMPTY
24039: ST_TO_ADDR
// end ;
24040: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24041: LD_EXP 80
24045: PUSH
24046: LD_INT 34
24048: PUSH
24049: LD_INT 99
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PPUSH
24056: CALL_OW 69
24060: AND
24061: IFFALSE 24314
24063: GO 24065
24065: DISABLE
24066: LD_INT 0
24068: PPUSH
24069: PPUSH
// begin enable ;
24070: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24071: LD_ADDR_VAR 0 1
24075: PUSH
24076: LD_INT 34
24078: PUSH
24079: LD_INT 99
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PPUSH
24086: CALL_OW 69
24090: PUSH
24091: FOR_IN
24092: IFFALSE 24312
// begin if not i in hackTanks then
24094: LD_VAR 0 1
24098: PUSH
24099: LD_EXP 81
24103: IN
24104: NOT
24105: IFFALSE 24188
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24107: LD_ADDR_EXP 81
24111: PUSH
24112: LD_EXP 81
24116: PPUSH
24117: LD_EXP 81
24121: PUSH
24122: LD_INT 1
24124: PLUS
24125: PPUSH
24126: LD_VAR 0 1
24130: PPUSH
24131: CALL_OW 1
24135: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24136: LD_ADDR_EXP 82
24140: PUSH
24141: LD_EXP 82
24145: PPUSH
24146: LD_EXP 82
24150: PUSH
24151: LD_INT 1
24153: PLUS
24154: PPUSH
24155: EMPTY
24156: PPUSH
24157: CALL_OW 1
24161: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24162: LD_ADDR_EXP 85
24166: PUSH
24167: LD_EXP 85
24171: PPUSH
24172: LD_EXP 85
24176: PUSH
24177: LD_INT 1
24179: PLUS
24180: PPUSH
24181: EMPTY
24182: PPUSH
24183: CALL_OW 1
24187: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24188: LD_VAR 0 1
24192: PPUSH
24193: CALL_OW 302
24197: NOT
24198: IFFALSE 24211
// begin HackUnlinkAll ( i ) ;
24200: LD_VAR 0 1
24204: PPUSH
24205: CALL 24317 0 1
// continue ;
24209: GO 24091
// end ; HackCheckCapturedStatus ( i ) ;
24211: LD_VAR 0 1
24215: PPUSH
24216: CALL 24760 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24220: LD_ADDR_VAR 0 2
24224: PUSH
24225: LD_INT 81
24227: PUSH
24228: LD_VAR 0 1
24232: PPUSH
24233: CALL_OW 255
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 33
24244: PUSH
24245: LD_INT 3
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 91
24254: PUSH
24255: LD_VAR 0 1
24259: PUSH
24260: LD_EXP 84
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 50
24272: PUSH
24273: EMPTY
24274: LIST
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: PPUSH
24282: CALL_OW 69
24286: ST_TO_ADDR
// if not tmp then
24287: LD_VAR 0 2
24291: NOT
24292: IFFALSE 24296
// continue ;
24294: GO 24091
// HackLink ( i , tmp ) ;
24296: LD_VAR 0 1
24300: PPUSH
24301: LD_VAR 0 2
24305: PPUSH
24306: CALL 24453 0 2
// end ;
24310: GO 24091
24312: POP
24313: POP
// end ;
24314: PPOPN 2
24316: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24317: LD_INT 0
24319: PPUSH
24320: PPUSH
24321: PPUSH
// if not hack in hackTanks then
24322: LD_VAR 0 1
24326: PUSH
24327: LD_EXP 81
24331: IN
24332: NOT
24333: IFFALSE 24337
// exit ;
24335: GO 24448
// index := GetElementIndex ( hackTanks , hack ) ;
24337: LD_ADDR_VAR 0 4
24341: PUSH
24342: LD_EXP 81
24346: PPUSH
24347: LD_VAR 0 1
24351: PPUSH
24352: CALL 32065 0 2
24356: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24357: LD_EXP 82
24361: PUSH
24362: LD_VAR 0 4
24366: ARRAY
24367: IFFALSE 24448
// begin for i in hackTanksCaptured [ index ] do
24369: LD_ADDR_VAR 0 3
24373: PUSH
24374: LD_EXP 82
24378: PUSH
24379: LD_VAR 0 4
24383: ARRAY
24384: PUSH
24385: FOR_IN
24386: IFFALSE 24412
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24388: LD_VAR 0 3
24392: PUSH
24393: LD_INT 1
24395: ARRAY
24396: PPUSH
24397: LD_VAR 0 3
24401: PUSH
24402: LD_INT 2
24404: ARRAY
24405: PPUSH
24406: CALL_OW 235
24410: GO 24385
24412: POP
24413: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24414: LD_ADDR_EXP 82
24418: PUSH
24419: LD_EXP 82
24423: PPUSH
24424: LD_VAR 0 4
24428: PPUSH
24429: EMPTY
24430: PPUSH
24431: CALL_OW 1
24435: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24436: LD_VAR 0 1
24440: PPUSH
24441: LD_INT 0
24443: PPUSH
24444: CALL_OW 505
// end ; end ;
24448: LD_VAR 0 2
24452: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24453: LD_INT 0
24455: PPUSH
24456: PPUSH
24457: PPUSH
// if not hack in hackTanks or not vehicles then
24458: LD_VAR 0 1
24462: PUSH
24463: LD_EXP 81
24467: IN
24468: NOT
24469: PUSH
24470: LD_VAR 0 2
24474: NOT
24475: OR
24476: IFFALSE 24480
// exit ;
24478: GO 24755
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24480: LD_ADDR_VAR 0 2
24484: PUSH
24485: LD_VAR 0 1
24489: PPUSH
24490: LD_VAR 0 2
24494: PPUSH
24495: LD_INT 1
24497: PPUSH
24498: LD_INT 1
24500: PPUSH
24501: CALL 32715 0 4
24505: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24506: LD_ADDR_VAR 0 5
24510: PUSH
24511: LD_EXP 81
24515: PPUSH
24516: LD_VAR 0 1
24520: PPUSH
24521: CALL 32065 0 2
24525: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24526: LD_EXP 82
24530: PUSH
24531: LD_VAR 0 5
24535: ARRAY
24536: PUSH
24537: LD_EXP 83
24541: LESS
24542: IFFALSE 24731
// begin for i := 1 to vehicles do
24544: LD_ADDR_VAR 0 4
24548: PUSH
24549: DOUBLE
24550: LD_INT 1
24552: DEC
24553: ST_TO_ADDR
24554: LD_VAR 0 2
24558: PUSH
24559: FOR_TO
24560: IFFALSE 24729
// begin if hackTanksCaptured [ index ] = hackLimit then
24562: LD_EXP 82
24566: PUSH
24567: LD_VAR 0 5
24571: ARRAY
24572: PUSH
24573: LD_EXP 83
24577: EQUAL
24578: IFFALSE 24582
// break ;
24580: GO 24729
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24582: LD_ADDR_EXP 85
24586: PUSH
24587: LD_EXP 85
24591: PPUSH
24592: LD_VAR 0 5
24596: PPUSH
24597: LD_EXP 85
24601: PUSH
24602: LD_VAR 0 5
24606: ARRAY
24607: PUSH
24608: LD_INT 1
24610: PLUS
24611: PPUSH
24612: CALL_OW 1
24616: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24617: LD_ADDR_EXP 82
24621: PUSH
24622: LD_EXP 82
24626: PPUSH
24627: LD_VAR 0 5
24631: PUSH
24632: LD_EXP 82
24636: PUSH
24637: LD_VAR 0 5
24641: ARRAY
24642: PUSH
24643: LD_INT 1
24645: PLUS
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PPUSH
24651: LD_VAR 0 2
24655: PUSH
24656: LD_VAR 0 4
24660: ARRAY
24661: PUSH
24662: LD_VAR 0 2
24666: PUSH
24667: LD_VAR 0 4
24671: ARRAY
24672: PPUSH
24673: CALL_OW 255
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PPUSH
24682: CALL 32280 0 3
24686: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24687: LD_VAR 0 2
24691: PUSH
24692: LD_VAR 0 4
24696: ARRAY
24697: PPUSH
24698: LD_VAR 0 1
24702: PPUSH
24703: CALL_OW 255
24707: PPUSH
24708: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24712: LD_VAR 0 2
24716: PUSH
24717: LD_VAR 0 4
24721: ARRAY
24722: PPUSH
24723: CALL_OW 141
// end ;
24727: GO 24559
24729: POP
24730: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_EXP 82
24740: PUSH
24741: LD_VAR 0 5
24745: ARRAY
24746: PUSH
24747: LD_INT 0
24749: PLUS
24750: PPUSH
24751: CALL_OW 505
// end ;
24755: LD_VAR 0 3
24759: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24760: LD_INT 0
24762: PPUSH
24763: PPUSH
24764: PPUSH
24765: PPUSH
// if not hack in hackTanks then
24766: LD_VAR 0 1
24770: PUSH
24771: LD_EXP 81
24775: IN
24776: NOT
24777: IFFALSE 24781
// exit ;
24779: GO 25021
// index := GetElementIndex ( hackTanks , hack ) ;
24781: LD_ADDR_VAR 0 4
24785: PUSH
24786: LD_EXP 81
24790: PPUSH
24791: LD_VAR 0 1
24795: PPUSH
24796: CALL 32065 0 2
24800: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24801: LD_ADDR_VAR 0 3
24805: PUSH
24806: DOUBLE
24807: LD_EXP 82
24811: PUSH
24812: LD_VAR 0 4
24816: ARRAY
24817: INC
24818: ST_TO_ADDR
24819: LD_INT 1
24821: PUSH
24822: FOR_DOWNTO
24823: IFFALSE 24995
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24825: LD_ADDR_VAR 0 5
24829: PUSH
24830: LD_EXP 82
24834: PUSH
24835: LD_VAR 0 4
24839: ARRAY
24840: PUSH
24841: LD_VAR 0 3
24845: ARRAY
24846: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24847: LD_VAR 0 5
24851: PUSH
24852: LD_INT 1
24854: ARRAY
24855: PPUSH
24856: CALL_OW 302
24860: NOT
24861: PUSH
24862: LD_VAR 0 5
24866: PUSH
24867: LD_INT 1
24869: ARRAY
24870: PPUSH
24871: CALL_OW 255
24875: PUSH
24876: LD_VAR 0 1
24880: PPUSH
24881: CALL_OW 255
24885: NONEQUAL
24886: OR
24887: IFFALSE 24993
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24889: LD_VAR 0 5
24893: PUSH
24894: LD_INT 1
24896: ARRAY
24897: PPUSH
24898: CALL_OW 305
24902: PUSH
24903: LD_VAR 0 5
24907: PUSH
24908: LD_INT 1
24910: ARRAY
24911: PPUSH
24912: CALL_OW 255
24916: PUSH
24917: LD_VAR 0 1
24921: PPUSH
24922: CALL_OW 255
24926: EQUAL
24927: AND
24928: IFFALSE 24952
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24930: LD_VAR 0 5
24934: PUSH
24935: LD_INT 1
24937: ARRAY
24938: PPUSH
24939: LD_VAR 0 5
24943: PUSH
24944: LD_INT 2
24946: ARRAY
24947: PPUSH
24948: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24952: LD_ADDR_EXP 82
24956: PUSH
24957: LD_EXP 82
24961: PPUSH
24962: LD_VAR 0 4
24966: PPUSH
24967: LD_EXP 82
24971: PUSH
24972: LD_VAR 0 4
24976: ARRAY
24977: PPUSH
24978: LD_VAR 0 3
24982: PPUSH
24983: CALL_OW 3
24987: PPUSH
24988: CALL_OW 1
24992: ST_TO_ADDR
// end ; end ;
24993: GO 24822
24995: POP
24996: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24997: LD_VAR 0 1
25001: PPUSH
25002: LD_EXP 82
25006: PUSH
25007: LD_VAR 0 4
25011: ARRAY
25012: PUSH
25013: LD_INT 0
25015: PLUS
25016: PPUSH
25017: CALL_OW 505
// end ;
25021: LD_VAR 0 2
25025: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25026: LD_INT 0
25028: PPUSH
25029: PPUSH
25030: PPUSH
25031: PPUSH
// if not hack in hackTanks then
25032: LD_VAR 0 1
25036: PUSH
25037: LD_EXP 81
25041: IN
25042: NOT
25043: IFFALSE 25047
// exit ;
25045: GO 25132
// index := GetElementIndex ( hackTanks , hack ) ;
25047: LD_ADDR_VAR 0 5
25051: PUSH
25052: LD_EXP 81
25056: PPUSH
25057: LD_VAR 0 1
25061: PPUSH
25062: CALL 32065 0 2
25066: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25067: LD_ADDR_VAR 0 4
25071: PUSH
25072: DOUBLE
25073: LD_INT 1
25075: DEC
25076: ST_TO_ADDR
25077: LD_EXP 82
25081: PUSH
25082: LD_VAR 0 5
25086: ARRAY
25087: PUSH
25088: FOR_TO
25089: IFFALSE 25130
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25091: LD_EXP 82
25095: PUSH
25096: LD_VAR 0 5
25100: ARRAY
25101: PUSH
25102: LD_VAR 0 4
25106: ARRAY
25107: PUSH
25108: LD_INT 1
25110: ARRAY
25111: PUSH
25112: LD_VAR 0 2
25116: EQUAL
25117: IFFALSE 25128
// KillUnit ( vehicle ) ;
25119: LD_VAR 0 2
25123: PPUSH
25124: CALL_OW 66
25128: GO 25088
25130: POP
25131: POP
// end ;
25132: LD_VAR 0 3
25136: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25137: LD_EXP 86
25141: NOT
25142: IFFALSE 25177
25144: GO 25146
25146: DISABLE
// begin initMiner := true ;
25147: LD_ADDR_EXP 86
25151: PUSH
25152: LD_INT 1
25154: ST_TO_ADDR
// minersList := [ ] ;
25155: LD_ADDR_EXP 87
25159: PUSH
25160: EMPTY
25161: ST_TO_ADDR
// minerMinesList := [ ] ;
25162: LD_ADDR_EXP 88
25166: PUSH
25167: EMPTY
25168: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25169: LD_ADDR_EXP 89
25173: PUSH
25174: LD_INT 5
25176: ST_TO_ADDR
// end ;
25177: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25178: LD_EXP 86
25182: PUSH
25183: LD_INT 34
25185: PUSH
25186: LD_INT 81
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PPUSH
25193: CALL_OW 69
25197: AND
25198: IFFALSE 25659
25200: GO 25202
25202: DISABLE
25203: LD_INT 0
25205: PPUSH
25206: PPUSH
25207: PPUSH
25208: PPUSH
// begin enable ;
25209: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25210: LD_ADDR_VAR 0 1
25214: PUSH
25215: LD_INT 34
25217: PUSH
25218: LD_INT 81
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PPUSH
25225: CALL_OW 69
25229: PUSH
25230: FOR_IN
25231: IFFALSE 25303
// begin if not i in minersList then
25233: LD_VAR 0 1
25237: PUSH
25238: LD_EXP 87
25242: IN
25243: NOT
25244: IFFALSE 25301
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25246: LD_ADDR_EXP 87
25250: PUSH
25251: LD_EXP 87
25255: PPUSH
25256: LD_EXP 87
25260: PUSH
25261: LD_INT 1
25263: PLUS
25264: PPUSH
25265: LD_VAR 0 1
25269: PPUSH
25270: CALL_OW 1
25274: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25275: LD_ADDR_EXP 88
25279: PUSH
25280: LD_EXP 88
25284: PPUSH
25285: LD_EXP 88
25289: PUSH
25290: LD_INT 1
25292: PLUS
25293: PPUSH
25294: EMPTY
25295: PPUSH
25296: CALL_OW 1
25300: ST_TO_ADDR
// end end ;
25301: GO 25230
25303: POP
25304: POP
// for i := minerMinesList downto 1 do
25305: LD_ADDR_VAR 0 1
25309: PUSH
25310: DOUBLE
25311: LD_EXP 88
25315: INC
25316: ST_TO_ADDR
25317: LD_INT 1
25319: PUSH
25320: FOR_DOWNTO
25321: IFFALSE 25657
// begin if IsLive ( minersList [ i ] ) then
25323: LD_EXP 87
25327: PUSH
25328: LD_VAR 0 1
25332: ARRAY
25333: PPUSH
25334: CALL_OW 300
25338: IFFALSE 25366
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25340: LD_EXP 87
25344: PUSH
25345: LD_VAR 0 1
25349: ARRAY
25350: PPUSH
25351: LD_EXP 88
25355: PUSH
25356: LD_VAR 0 1
25360: ARRAY
25361: PPUSH
25362: CALL_OW 505
// if not minerMinesList [ i ] then
25366: LD_EXP 88
25370: PUSH
25371: LD_VAR 0 1
25375: ARRAY
25376: NOT
25377: IFFALSE 25381
// continue ;
25379: GO 25320
// for j := minerMinesList [ i ] downto 1 do
25381: LD_ADDR_VAR 0 2
25385: PUSH
25386: DOUBLE
25387: LD_EXP 88
25391: PUSH
25392: LD_VAR 0 1
25396: ARRAY
25397: INC
25398: ST_TO_ADDR
25399: LD_INT 1
25401: PUSH
25402: FOR_DOWNTO
25403: IFFALSE 25653
// begin side := GetSide ( minersList [ i ] ) ;
25405: LD_ADDR_VAR 0 3
25409: PUSH
25410: LD_EXP 87
25414: PUSH
25415: LD_VAR 0 1
25419: ARRAY
25420: PPUSH
25421: CALL_OW 255
25425: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25426: LD_ADDR_VAR 0 4
25430: PUSH
25431: LD_EXP 88
25435: PUSH
25436: LD_VAR 0 1
25440: ARRAY
25441: PUSH
25442: LD_VAR 0 2
25446: ARRAY
25447: PUSH
25448: LD_INT 1
25450: ARRAY
25451: PPUSH
25452: LD_EXP 88
25456: PUSH
25457: LD_VAR 0 1
25461: ARRAY
25462: PUSH
25463: LD_VAR 0 2
25467: ARRAY
25468: PUSH
25469: LD_INT 2
25471: ARRAY
25472: PPUSH
25473: CALL_OW 428
25477: ST_TO_ADDR
// if not tmp then
25478: LD_VAR 0 4
25482: NOT
25483: IFFALSE 25487
// continue ;
25485: GO 25402
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25487: LD_VAR 0 4
25491: PUSH
25492: LD_INT 81
25494: PUSH
25495: LD_VAR 0 3
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PPUSH
25504: CALL_OW 69
25508: IN
25509: PUSH
25510: LD_EXP 88
25514: PUSH
25515: LD_VAR 0 1
25519: ARRAY
25520: PUSH
25521: LD_VAR 0 2
25525: ARRAY
25526: PUSH
25527: LD_INT 1
25529: ARRAY
25530: PPUSH
25531: LD_EXP 88
25535: PUSH
25536: LD_VAR 0 1
25540: ARRAY
25541: PUSH
25542: LD_VAR 0 2
25546: ARRAY
25547: PUSH
25548: LD_INT 2
25550: ARRAY
25551: PPUSH
25552: CALL_OW 458
25556: AND
25557: IFFALSE 25651
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25559: LD_EXP 88
25563: PUSH
25564: LD_VAR 0 1
25568: ARRAY
25569: PUSH
25570: LD_VAR 0 2
25574: ARRAY
25575: PUSH
25576: LD_INT 1
25578: ARRAY
25579: PPUSH
25580: LD_EXP 88
25584: PUSH
25585: LD_VAR 0 1
25589: ARRAY
25590: PUSH
25591: LD_VAR 0 2
25595: ARRAY
25596: PUSH
25597: LD_INT 2
25599: ARRAY
25600: PPUSH
25601: LD_VAR 0 3
25605: PPUSH
25606: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25610: LD_ADDR_EXP 88
25614: PUSH
25615: LD_EXP 88
25619: PPUSH
25620: LD_VAR 0 1
25624: PPUSH
25625: LD_EXP 88
25629: PUSH
25630: LD_VAR 0 1
25634: ARRAY
25635: PPUSH
25636: LD_VAR 0 2
25640: PPUSH
25641: CALL_OW 3
25645: PPUSH
25646: CALL_OW 1
25650: ST_TO_ADDR
// end ; end ;
25651: GO 25402
25653: POP
25654: POP
// end ;
25655: GO 25320
25657: POP
25658: POP
// end ;
25659: PPOPN 4
25661: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25662: LD_INT 0
25664: PPUSH
25665: PPUSH
// result := false ;
25666: LD_ADDR_VAR 0 4
25670: PUSH
25671: LD_INT 0
25673: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25674: LD_VAR 0 1
25678: PPUSH
25679: CALL_OW 264
25683: PUSH
25684: LD_INT 81
25686: EQUAL
25687: NOT
25688: IFFALSE 25692
// exit ;
25690: GO 25932
// index := GetElementIndex ( minersList , unit ) ;
25692: LD_ADDR_VAR 0 5
25696: PUSH
25697: LD_EXP 87
25701: PPUSH
25702: LD_VAR 0 1
25706: PPUSH
25707: CALL 32065 0 2
25711: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25712: LD_EXP 88
25716: PUSH
25717: LD_VAR 0 5
25721: ARRAY
25722: PUSH
25723: LD_EXP 89
25727: GREATEREQUAL
25728: IFFALSE 25732
// exit ;
25730: GO 25932
// ComMoveXY ( unit , x , y ) ;
25732: LD_VAR 0 1
25736: PPUSH
25737: LD_VAR 0 2
25741: PPUSH
25742: LD_VAR 0 3
25746: PPUSH
25747: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25751: LD_INT 35
25753: PPUSH
25754: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25758: LD_VAR 0 1
25762: PPUSH
25763: LD_VAR 0 2
25767: PPUSH
25768: LD_VAR 0 3
25772: PPUSH
25773: CALL 63420 0 3
25777: NOT
25778: PUSH
25779: LD_VAR 0 1
25783: PPUSH
25784: CALL_OW 314
25788: AND
25789: IFFALSE 25793
// exit ;
25791: GO 25932
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25793: LD_VAR 0 2
25797: PPUSH
25798: LD_VAR 0 3
25802: PPUSH
25803: CALL_OW 428
25807: PUSH
25808: LD_VAR 0 1
25812: EQUAL
25813: PUSH
25814: LD_VAR 0 1
25818: PPUSH
25819: CALL_OW 314
25823: NOT
25824: AND
25825: IFFALSE 25751
// PlaySoundXY ( x , y , PlantMine ) ;
25827: LD_VAR 0 2
25831: PPUSH
25832: LD_VAR 0 3
25836: PPUSH
25837: LD_STRING PlantMine
25839: PPUSH
25840: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25844: LD_VAR 0 2
25848: PPUSH
25849: LD_VAR 0 3
25853: PPUSH
25854: LD_VAR 0 1
25858: PPUSH
25859: CALL_OW 255
25863: PPUSH
25864: LD_INT 0
25866: PPUSH
25867: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25871: LD_ADDR_EXP 88
25875: PUSH
25876: LD_EXP 88
25880: PPUSH
25881: LD_VAR 0 5
25885: PUSH
25886: LD_EXP 88
25890: PUSH
25891: LD_VAR 0 5
25895: ARRAY
25896: PUSH
25897: LD_INT 1
25899: PLUS
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PPUSH
25905: LD_VAR 0 2
25909: PUSH
25910: LD_VAR 0 3
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PPUSH
25919: CALL 32280 0 3
25923: ST_TO_ADDR
// result := true ;
25924: LD_ADDR_VAR 0 4
25928: PUSH
25929: LD_INT 1
25931: ST_TO_ADDR
// end ;
25932: LD_VAR 0 4
25936: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25937: LD_INT 0
25939: PPUSH
25940: PPUSH
25941: PPUSH
// if not unit in minersList then
25942: LD_VAR 0 1
25946: PUSH
25947: LD_EXP 87
25951: IN
25952: NOT
25953: IFFALSE 25957
// exit ;
25955: GO 26349
// index := GetElementIndex ( minersList , unit ) ;
25957: LD_ADDR_VAR 0 6
25961: PUSH
25962: LD_EXP 87
25966: PPUSH
25967: LD_VAR 0 1
25971: PPUSH
25972: CALL 32065 0 2
25976: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25977: LD_ADDR_VAR 0 5
25981: PUSH
25982: DOUBLE
25983: LD_EXP 88
25987: PUSH
25988: LD_VAR 0 6
25992: ARRAY
25993: INC
25994: ST_TO_ADDR
25995: LD_INT 1
25997: PUSH
25998: FOR_DOWNTO
25999: IFFALSE 26160
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26001: LD_EXP 88
26005: PUSH
26006: LD_VAR 0 6
26010: ARRAY
26011: PUSH
26012: LD_VAR 0 5
26016: ARRAY
26017: PUSH
26018: LD_INT 1
26020: ARRAY
26021: PUSH
26022: LD_VAR 0 2
26026: EQUAL
26027: PUSH
26028: LD_EXP 88
26032: PUSH
26033: LD_VAR 0 6
26037: ARRAY
26038: PUSH
26039: LD_VAR 0 5
26043: ARRAY
26044: PUSH
26045: LD_INT 2
26047: ARRAY
26048: PUSH
26049: LD_VAR 0 3
26053: EQUAL
26054: AND
26055: IFFALSE 26158
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26057: LD_EXP 88
26061: PUSH
26062: LD_VAR 0 6
26066: ARRAY
26067: PUSH
26068: LD_VAR 0 5
26072: ARRAY
26073: PUSH
26074: LD_INT 1
26076: ARRAY
26077: PPUSH
26078: LD_EXP 88
26082: PUSH
26083: LD_VAR 0 6
26087: ARRAY
26088: PUSH
26089: LD_VAR 0 5
26093: ARRAY
26094: PUSH
26095: LD_INT 2
26097: ARRAY
26098: PPUSH
26099: LD_VAR 0 1
26103: PPUSH
26104: CALL_OW 255
26108: PPUSH
26109: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26113: LD_ADDR_EXP 88
26117: PUSH
26118: LD_EXP 88
26122: PPUSH
26123: LD_VAR 0 6
26127: PPUSH
26128: LD_EXP 88
26132: PUSH
26133: LD_VAR 0 6
26137: ARRAY
26138: PPUSH
26139: LD_VAR 0 5
26143: PPUSH
26144: CALL_OW 3
26148: PPUSH
26149: CALL_OW 1
26153: ST_TO_ADDR
// exit ;
26154: POP
26155: POP
26156: GO 26349
// end ; end ;
26158: GO 25998
26160: POP
26161: POP
// for i := minerMinesList [ index ] downto 1 do
26162: LD_ADDR_VAR 0 5
26166: PUSH
26167: DOUBLE
26168: LD_EXP 88
26172: PUSH
26173: LD_VAR 0 6
26177: ARRAY
26178: INC
26179: ST_TO_ADDR
26180: LD_INT 1
26182: PUSH
26183: FOR_DOWNTO
26184: IFFALSE 26347
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26186: LD_EXP 88
26190: PUSH
26191: LD_VAR 0 6
26195: ARRAY
26196: PUSH
26197: LD_VAR 0 5
26201: ARRAY
26202: PUSH
26203: LD_INT 1
26205: ARRAY
26206: PPUSH
26207: LD_EXP 88
26211: PUSH
26212: LD_VAR 0 6
26216: ARRAY
26217: PUSH
26218: LD_VAR 0 5
26222: ARRAY
26223: PUSH
26224: LD_INT 2
26226: ARRAY
26227: PPUSH
26228: LD_VAR 0 2
26232: PPUSH
26233: LD_VAR 0 3
26237: PPUSH
26238: CALL_OW 298
26242: PUSH
26243: LD_INT 6
26245: LESS
26246: IFFALSE 26345
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26248: LD_EXP 88
26252: PUSH
26253: LD_VAR 0 6
26257: ARRAY
26258: PUSH
26259: LD_VAR 0 5
26263: ARRAY
26264: PUSH
26265: LD_INT 1
26267: ARRAY
26268: PPUSH
26269: LD_EXP 88
26273: PUSH
26274: LD_VAR 0 6
26278: ARRAY
26279: PUSH
26280: LD_VAR 0 5
26284: ARRAY
26285: PUSH
26286: LD_INT 2
26288: ARRAY
26289: PPUSH
26290: LD_VAR 0 1
26294: PPUSH
26295: CALL_OW 255
26299: PPUSH
26300: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26304: LD_ADDR_EXP 88
26308: PUSH
26309: LD_EXP 88
26313: PPUSH
26314: LD_VAR 0 6
26318: PPUSH
26319: LD_EXP 88
26323: PUSH
26324: LD_VAR 0 6
26328: ARRAY
26329: PPUSH
26330: LD_VAR 0 5
26334: PPUSH
26335: CALL_OW 3
26339: PPUSH
26340: CALL_OW 1
26344: ST_TO_ADDR
// end ; end ;
26345: GO 26183
26347: POP
26348: POP
// end ;
26349: LD_VAR 0 4
26353: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26354: LD_INT 0
26356: PPUSH
26357: PPUSH
26358: PPUSH
26359: PPUSH
26360: PPUSH
26361: PPUSH
26362: PPUSH
26363: PPUSH
26364: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26365: LD_VAR 0 1
26369: PPUSH
26370: CALL_OW 264
26374: PUSH
26375: LD_INT 81
26377: EQUAL
26378: NOT
26379: PUSH
26380: LD_VAR 0 1
26384: PUSH
26385: LD_EXP 87
26389: IN
26390: NOT
26391: OR
26392: IFFALSE 26396
// exit ;
26394: GO 26718
// index := GetElementIndex ( minersList , unit ) ;
26396: LD_ADDR_VAR 0 6
26400: PUSH
26401: LD_EXP 87
26405: PPUSH
26406: LD_VAR 0 1
26410: PPUSH
26411: CALL 32065 0 2
26415: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26416: LD_ADDR_VAR 0 8
26420: PUSH
26421: LD_EXP 89
26425: PUSH
26426: LD_EXP 88
26430: PUSH
26431: LD_VAR 0 6
26435: ARRAY
26436: MINUS
26437: ST_TO_ADDR
// if not minesFreeAmount then
26438: LD_VAR 0 8
26442: NOT
26443: IFFALSE 26447
// exit ;
26445: GO 26718
// tmp := [ ] ;
26447: LD_ADDR_VAR 0 7
26451: PUSH
26452: EMPTY
26453: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26454: LD_ADDR_VAR 0 5
26458: PUSH
26459: DOUBLE
26460: LD_INT 1
26462: DEC
26463: ST_TO_ADDR
26464: LD_VAR 0 8
26468: PUSH
26469: FOR_TO
26470: IFFALSE 26665
// begin _d := rand ( 0 , 5 ) ;
26472: LD_ADDR_VAR 0 11
26476: PUSH
26477: LD_INT 0
26479: PPUSH
26480: LD_INT 5
26482: PPUSH
26483: CALL_OW 12
26487: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26488: LD_ADDR_VAR 0 12
26492: PUSH
26493: LD_INT 2
26495: PPUSH
26496: LD_INT 6
26498: PPUSH
26499: CALL_OW 12
26503: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26504: LD_ADDR_VAR 0 9
26508: PUSH
26509: LD_VAR 0 2
26513: PPUSH
26514: LD_VAR 0 11
26518: PPUSH
26519: LD_VAR 0 12
26523: PPUSH
26524: CALL_OW 272
26528: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26529: LD_ADDR_VAR 0 10
26533: PUSH
26534: LD_VAR 0 3
26538: PPUSH
26539: LD_VAR 0 11
26543: PPUSH
26544: LD_VAR 0 12
26548: PPUSH
26549: CALL_OW 273
26553: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26554: LD_VAR 0 9
26558: PPUSH
26559: LD_VAR 0 10
26563: PPUSH
26564: CALL_OW 488
26568: PUSH
26569: LD_VAR 0 9
26573: PUSH
26574: LD_VAR 0 10
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_VAR 0 7
26587: IN
26588: NOT
26589: AND
26590: PUSH
26591: LD_VAR 0 9
26595: PPUSH
26596: LD_VAR 0 10
26600: PPUSH
26601: CALL_OW 458
26605: NOT
26606: AND
26607: IFFALSE 26649
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26609: LD_ADDR_VAR 0 7
26613: PUSH
26614: LD_VAR 0 7
26618: PPUSH
26619: LD_VAR 0 7
26623: PUSH
26624: LD_INT 1
26626: PLUS
26627: PPUSH
26628: LD_VAR 0 9
26632: PUSH
26633: LD_VAR 0 10
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PPUSH
26642: CALL_OW 1
26646: ST_TO_ADDR
26647: GO 26663
// i := i - 1 ;
26649: LD_ADDR_VAR 0 5
26653: PUSH
26654: LD_VAR 0 5
26658: PUSH
26659: LD_INT 1
26661: MINUS
26662: ST_TO_ADDR
// end ;
26663: GO 26469
26665: POP
26666: POP
// for i in tmp do
26667: LD_ADDR_VAR 0 5
26671: PUSH
26672: LD_VAR 0 7
26676: PUSH
26677: FOR_IN
26678: IFFALSE 26716
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26680: LD_VAR 0 1
26684: PPUSH
26685: LD_VAR 0 5
26689: PUSH
26690: LD_INT 1
26692: ARRAY
26693: PPUSH
26694: LD_VAR 0 5
26698: PUSH
26699: LD_INT 2
26701: ARRAY
26702: PPUSH
26703: CALL 25662 0 3
26707: NOT
26708: IFFALSE 26714
// exit ;
26710: POP
26711: POP
26712: GO 26718
26714: GO 26677
26716: POP
26717: POP
// end ;
26718: LD_VAR 0 4
26722: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26723: LD_INT 0
26725: PPUSH
26726: PPUSH
26727: PPUSH
26728: PPUSH
26729: PPUSH
26730: PPUSH
26731: PPUSH
// if not GetClass ( unit ) = class_sniper then
26732: LD_VAR 0 1
26736: PPUSH
26737: CALL_OW 257
26741: PUSH
26742: LD_INT 5
26744: EQUAL
26745: NOT
26746: IFFALSE 26750
// exit ;
26748: GO 27138
// dist := 8 ;
26750: LD_ADDR_VAR 0 5
26754: PUSH
26755: LD_INT 8
26757: ST_TO_ADDR
// viewRange := 12 ;
26758: LD_ADDR_VAR 0 7
26762: PUSH
26763: LD_INT 12
26765: ST_TO_ADDR
// side := GetSide ( unit ) ;
26766: LD_ADDR_VAR 0 6
26770: PUSH
26771: LD_VAR 0 1
26775: PPUSH
26776: CALL_OW 255
26780: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26781: LD_INT 61
26783: PPUSH
26784: LD_VAR 0 6
26788: PPUSH
26789: CALL_OW 321
26793: PUSH
26794: LD_INT 2
26796: EQUAL
26797: IFFALSE 26807
// viewRange := 16 ;
26799: LD_ADDR_VAR 0 7
26803: PUSH
26804: LD_INT 16
26806: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26807: LD_VAR 0 1
26811: PPUSH
26812: LD_VAR 0 2
26816: PPUSH
26817: LD_VAR 0 3
26821: PPUSH
26822: CALL_OW 297
26826: PUSH
26827: LD_VAR 0 5
26831: GREATER
26832: IFFALSE 26911
// begin ComMoveXY ( unit , x , y ) ;
26834: LD_VAR 0 1
26838: PPUSH
26839: LD_VAR 0 2
26843: PPUSH
26844: LD_VAR 0 3
26848: PPUSH
26849: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26853: LD_INT 35
26855: PPUSH
26856: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26860: LD_VAR 0 1
26864: PPUSH
26865: LD_VAR 0 2
26869: PPUSH
26870: LD_VAR 0 3
26874: PPUSH
26875: CALL 63420 0 3
26879: NOT
26880: IFFALSE 26884
// exit ;
26882: GO 27138
// until GetDistUnitXY ( unit , x , y ) < dist ;
26884: LD_VAR 0 1
26888: PPUSH
26889: LD_VAR 0 2
26893: PPUSH
26894: LD_VAR 0 3
26898: PPUSH
26899: CALL_OW 297
26903: PUSH
26904: LD_VAR 0 5
26908: LESS
26909: IFFALSE 26853
// end ; ComTurnXY ( unit , x , y ) ;
26911: LD_VAR 0 1
26915: PPUSH
26916: LD_VAR 0 2
26920: PPUSH
26921: LD_VAR 0 3
26925: PPUSH
26926: CALL_OW 118
// wait ( 5 ) ;
26930: LD_INT 5
26932: PPUSH
26933: CALL_OW 67
// _d := GetDir ( unit ) ;
26937: LD_ADDR_VAR 0 10
26941: PUSH
26942: LD_VAR 0 1
26946: PPUSH
26947: CALL_OW 254
26951: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26952: LD_ADDR_VAR 0 8
26956: PUSH
26957: LD_VAR 0 1
26961: PPUSH
26962: CALL_OW 250
26966: PPUSH
26967: LD_VAR 0 10
26971: PPUSH
26972: LD_VAR 0 5
26976: PPUSH
26977: CALL_OW 272
26981: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26982: LD_ADDR_VAR 0 9
26986: PUSH
26987: LD_VAR 0 1
26991: PPUSH
26992: CALL_OW 251
26996: PPUSH
26997: LD_VAR 0 10
27001: PPUSH
27002: LD_VAR 0 5
27006: PPUSH
27007: CALL_OW 273
27011: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27012: LD_VAR 0 8
27016: PPUSH
27017: LD_VAR 0 9
27021: PPUSH
27022: CALL_OW 488
27026: NOT
27027: IFFALSE 27031
// exit ;
27029: GO 27138
// ComAnimCustom ( unit , 1 ) ;
27031: LD_VAR 0 1
27035: PPUSH
27036: LD_INT 1
27038: PPUSH
27039: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27043: LD_VAR 0 8
27047: PPUSH
27048: LD_VAR 0 9
27052: PPUSH
27053: LD_VAR 0 6
27057: PPUSH
27058: LD_VAR 0 7
27062: PPUSH
27063: CALL_OW 330
// repeat wait ( 1 ) ;
27067: LD_INT 1
27069: PPUSH
27070: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27074: LD_VAR 0 1
27078: PPUSH
27079: CALL_OW 316
27083: PUSH
27084: LD_VAR 0 1
27088: PPUSH
27089: CALL_OW 314
27093: OR
27094: PUSH
27095: LD_VAR 0 1
27099: PPUSH
27100: CALL_OW 302
27104: NOT
27105: OR
27106: PUSH
27107: LD_VAR 0 1
27111: PPUSH
27112: CALL_OW 301
27116: OR
27117: IFFALSE 27067
// RemoveSeeing ( _x , _y , side ) ;
27119: LD_VAR 0 8
27123: PPUSH
27124: LD_VAR 0 9
27128: PPUSH
27129: LD_VAR 0 6
27133: PPUSH
27134: CALL_OW 331
// end ; end_of_file
27138: LD_VAR 0 4
27142: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27143: LD_INT 0
27145: PPUSH
27146: PPUSH
// if exist_mode then
27147: LD_VAR 0 2
27151: IFFALSE 27176
// unit := CreateCharacter ( prefix & ident ) else
27153: LD_ADDR_VAR 0 5
27157: PUSH
27158: LD_VAR 0 3
27162: PUSH
27163: LD_VAR 0 1
27167: STR
27168: PPUSH
27169: CALL_OW 34
27173: ST_TO_ADDR
27174: GO 27191
// unit := NewCharacter ( ident ) ;
27176: LD_ADDR_VAR 0 5
27180: PUSH
27181: LD_VAR 0 1
27185: PPUSH
27186: CALL_OW 25
27190: ST_TO_ADDR
// result := unit ;
27191: LD_ADDR_VAR 0 4
27195: PUSH
27196: LD_VAR 0 5
27200: ST_TO_ADDR
// end ;
27201: LD_VAR 0 4
27205: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27206: LD_INT 0
27208: PPUSH
27209: PPUSH
// if not side or not nation then
27210: LD_VAR 0 1
27214: NOT
27215: PUSH
27216: LD_VAR 0 2
27220: NOT
27221: OR
27222: IFFALSE 27226
// exit ;
27224: GO 27994
// case nation of nation_american :
27226: LD_VAR 0 2
27230: PUSH
27231: LD_INT 1
27233: DOUBLE
27234: EQUAL
27235: IFTRUE 27239
27237: GO 27453
27239: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27240: LD_ADDR_VAR 0 4
27244: PUSH
27245: LD_INT 35
27247: PUSH
27248: LD_INT 45
27250: PUSH
27251: LD_INT 46
27253: PUSH
27254: LD_INT 47
27256: PUSH
27257: LD_INT 82
27259: PUSH
27260: LD_INT 83
27262: PUSH
27263: LD_INT 84
27265: PUSH
27266: LD_INT 85
27268: PUSH
27269: LD_INT 86
27271: PUSH
27272: LD_INT 1
27274: PUSH
27275: LD_INT 2
27277: PUSH
27278: LD_INT 6
27280: PUSH
27281: LD_INT 15
27283: PUSH
27284: LD_INT 16
27286: PUSH
27287: LD_INT 7
27289: PUSH
27290: LD_INT 12
27292: PUSH
27293: LD_INT 13
27295: PUSH
27296: LD_INT 10
27298: PUSH
27299: LD_INT 14
27301: PUSH
27302: LD_INT 20
27304: PUSH
27305: LD_INT 21
27307: PUSH
27308: LD_INT 22
27310: PUSH
27311: LD_INT 25
27313: PUSH
27314: LD_INT 32
27316: PUSH
27317: LD_INT 27
27319: PUSH
27320: LD_INT 36
27322: PUSH
27323: LD_INT 69
27325: PUSH
27326: LD_INT 39
27328: PUSH
27329: LD_INT 34
27331: PUSH
27332: LD_INT 40
27334: PUSH
27335: LD_INT 48
27337: PUSH
27338: LD_INT 49
27340: PUSH
27341: LD_INT 50
27343: PUSH
27344: LD_INT 51
27346: PUSH
27347: LD_INT 52
27349: PUSH
27350: LD_INT 53
27352: PUSH
27353: LD_INT 54
27355: PUSH
27356: LD_INT 55
27358: PUSH
27359: LD_INT 56
27361: PUSH
27362: LD_INT 57
27364: PUSH
27365: LD_INT 58
27367: PUSH
27368: LD_INT 59
27370: PUSH
27371: LD_INT 60
27373: PUSH
27374: LD_INT 61
27376: PUSH
27377: LD_INT 62
27379: PUSH
27380: LD_INT 80
27382: PUSH
27383: LD_INT 82
27385: PUSH
27386: LD_INT 83
27388: PUSH
27389: LD_INT 84
27391: PUSH
27392: LD_INT 85
27394: PUSH
27395: LD_INT 86
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: ST_TO_ADDR
27451: GO 27918
27453: LD_INT 2
27455: DOUBLE
27456: EQUAL
27457: IFTRUE 27461
27459: GO 27687
27461: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27462: LD_ADDR_VAR 0 4
27466: PUSH
27467: LD_INT 35
27469: PUSH
27470: LD_INT 45
27472: PUSH
27473: LD_INT 46
27475: PUSH
27476: LD_INT 47
27478: PUSH
27479: LD_INT 82
27481: PUSH
27482: LD_INT 83
27484: PUSH
27485: LD_INT 84
27487: PUSH
27488: LD_INT 85
27490: PUSH
27491: LD_INT 87
27493: PUSH
27494: LD_INT 70
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: LD_INT 11
27502: PUSH
27503: LD_INT 3
27505: PUSH
27506: LD_INT 4
27508: PUSH
27509: LD_INT 5
27511: PUSH
27512: LD_INT 6
27514: PUSH
27515: LD_INT 15
27517: PUSH
27518: LD_INT 18
27520: PUSH
27521: LD_INT 7
27523: PUSH
27524: LD_INT 17
27526: PUSH
27527: LD_INT 8
27529: PUSH
27530: LD_INT 20
27532: PUSH
27533: LD_INT 21
27535: PUSH
27536: LD_INT 22
27538: PUSH
27539: LD_INT 72
27541: PUSH
27542: LD_INT 26
27544: PUSH
27545: LD_INT 69
27547: PUSH
27548: LD_INT 39
27550: PUSH
27551: LD_INT 40
27553: PUSH
27554: LD_INT 41
27556: PUSH
27557: LD_INT 42
27559: PUSH
27560: LD_INT 43
27562: PUSH
27563: LD_INT 48
27565: PUSH
27566: LD_INT 49
27568: PUSH
27569: LD_INT 50
27571: PUSH
27572: LD_INT 51
27574: PUSH
27575: LD_INT 52
27577: PUSH
27578: LD_INT 53
27580: PUSH
27581: LD_INT 54
27583: PUSH
27584: LD_INT 55
27586: PUSH
27587: LD_INT 56
27589: PUSH
27590: LD_INT 60
27592: PUSH
27593: LD_INT 61
27595: PUSH
27596: LD_INT 62
27598: PUSH
27599: LD_INT 66
27601: PUSH
27602: LD_INT 67
27604: PUSH
27605: LD_INT 68
27607: PUSH
27608: LD_INT 81
27610: PUSH
27611: LD_INT 82
27613: PUSH
27614: LD_INT 83
27616: PUSH
27617: LD_INT 84
27619: PUSH
27620: LD_INT 85
27622: PUSH
27623: LD_INT 87
27625: PUSH
27626: LD_INT 88
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: ST_TO_ADDR
27685: GO 27918
27687: LD_INT 3
27689: DOUBLE
27690: EQUAL
27691: IFTRUE 27695
27693: GO 27917
27695: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27696: LD_ADDR_VAR 0 4
27700: PUSH
27701: LD_INT 46
27703: PUSH
27704: LD_INT 47
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: LD_INT 2
27712: PUSH
27713: LD_INT 82
27715: PUSH
27716: LD_INT 83
27718: PUSH
27719: LD_INT 84
27721: PUSH
27722: LD_INT 85
27724: PUSH
27725: LD_INT 86
27727: PUSH
27728: LD_INT 11
27730: PUSH
27731: LD_INT 9
27733: PUSH
27734: LD_INT 20
27736: PUSH
27737: LD_INT 19
27739: PUSH
27740: LD_INT 21
27742: PUSH
27743: LD_INT 24
27745: PUSH
27746: LD_INT 22
27748: PUSH
27749: LD_INT 25
27751: PUSH
27752: LD_INT 28
27754: PUSH
27755: LD_INT 29
27757: PUSH
27758: LD_INT 30
27760: PUSH
27761: LD_INT 31
27763: PUSH
27764: LD_INT 37
27766: PUSH
27767: LD_INT 38
27769: PUSH
27770: LD_INT 32
27772: PUSH
27773: LD_INT 27
27775: PUSH
27776: LD_INT 33
27778: PUSH
27779: LD_INT 69
27781: PUSH
27782: LD_INT 39
27784: PUSH
27785: LD_INT 34
27787: PUSH
27788: LD_INT 40
27790: PUSH
27791: LD_INT 71
27793: PUSH
27794: LD_INT 23
27796: PUSH
27797: LD_INT 44
27799: PUSH
27800: LD_INT 48
27802: PUSH
27803: LD_INT 49
27805: PUSH
27806: LD_INT 50
27808: PUSH
27809: LD_INT 51
27811: PUSH
27812: LD_INT 52
27814: PUSH
27815: LD_INT 53
27817: PUSH
27818: LD_INT 54
27820: PUSH
27821: LD_INT 55
27823: PUSH
27824: LD_INT 56
27826: PUSH
27827: LD_INT 57
27829: PUSH
27830: LD_INT 58
27832: PUSH
27833: LD_INT 59
27835: PUSH
27836: LD_INT 63
27838: PUSH
27839: LD_INT 64
27841: PUSH
27842: LD_INT 65
27844: PUSH
27845: LD_INT 82
27847: PUSH
27848: LD_INT 83
27850: PUSH
27851: LD_INT 84
27853: PUSH
27854: LD_INT 85
27856: PUSH
27857: LD_INT 86
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: ST_TO_ADDR
27915: GO 27918
27917: POP
// if state > - 1 and state < 3 then
27918: LD_VAR 0 3
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: GREATER
27927: PUSH
27928: LD_VAR 0 3
27932: PUSH
27933: LD_INT 3
27935: LESS
27936: AND
27937: IFFALSE 27994
// for i in result do
27939: LD_ADDR_VAR 0 5
27943: PUSH
27944: LD_VAR 0 4
27948: PUSH
27949: FOR_IN
27950: IFFALSE 27992
// if GetTech ( i , side ) <> state then
27952: LD_VAR 0 5
27956: PPUSH
27957: LD_VAR 0 1
27961: PPUSH
27962: CALL_OW 321
27966: PUSH
27967: LD_VAR 0 3
27971: NONEQUAL
27972: IFFALSE 27990
// result := result diff i ;
27974: LD_ADDR_VAR 0 4
27978: PUSH
27979: LD_VAR 0 4
27983: PUSH
27984: LD_VAR 0 5
27988: DIFF
27989: ST_TO_ADDR
27990: GO 27949
27992: POP
27993: POP
// end ;
27994: LD_VAR 0 4
27998: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27999: LD_INT 0
28001: PPUSH
28002: PPUSH
28003: PPUSH
// result := true ;
28004: LD_ADDR_VAR 0 3
28008: PUSH
28009: LD_INT 1
28011: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28012: LD_ADDR_VAR 0 5
28016: PUSH
28017: LD_VAR 0 2
28021: PPUSH
28022: CALL_OW 480
28026: ST_TO_ADDR
// if not tmp then
28027: LD_VAR 0 5
28031: NOT
28032: IFFALSE 28036
// exit ;
28034: GO 28085
// for i in tmp do
28036: LD_ADDR_VAR 0 4
28040: PUSH
28041: LD_VAR 0 5
28045: PUSH
28046: FOR_IN
28047: IFFALSE 28083
// if GetTech ( i , side ) <> state_researched then
28049: LD_VAR 0 4
28053: PPUSH
28054: LD_VAR 0 1
28058: PPUSH
28059: CALL_OW 321
28063: PUSH
28064: LD_INT 2
28066: NONEQUAL
28067: IFFALSE 28081
// begin result := false ;
28069: LD_ADDR_VAR 0 3
28073: PUSH
28074: LD_INT 0
28076: ST_TO_ADDR
// exit ;
28077: POP
28078: POP
28079: GO 28085
// end ;
28081: GO 28046
28083: POP
28084: POP
// end ;
28085: LD_VAR 0 3
28089: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28090: LD_INT 0
28092: PPUSH
28093: PPUSH
28094: PPUSH
28095: PPUSH
28096: PPUSH
28097: PPUSH
28098: PPUSH
28099: PPUSH
28100: PPUSH
28101: PPUSH
28102: PPUSH
28103: PPUSH
28104: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28105: LD_VAR 0 1
28109: NOT
28110: PUSH
28111: LD_VAR 0 1
28115: PPUSH
28116: CALL_OW 257
28120: PUSH
28121: LD_INT 9
28123: NONEQUAL
28124: OR
28125: IFFALSE 28129
// exit ;
28127: GO 28702
// side := GetSide ( unit ) ;
28129: LD_ADDR_VAR 0 9
28133: PUSH
28134: LD_VAR 0 1
28138: PPUSH
28139: CALL_OW 255
28143: ST_TO_ADDR
// tech_space := tech_spacanom ;
28144: LD_ADDR_VAR 0 12
28148: PUSH
28149: LD_INT 29
28151: ST_TO_ADDR
// tech_time := tech_taurad ;
28152: LD_ADDR_VAR 0 13
28156: PUSH
28157: LD_INT 28
28159: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28160: LD_ADDR_VAR 0 11
28164: PUSH
28165: LD_VAR 0 1
28169: PPUSH
28170: CALL_OW 310
28174: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28175: LD_VAR 0 11
28179: PPUSH
28180: CALL_OW 247
28184: PUSH
28185: LD_INT 2
28187: EQUAL
28188: IFFALSE 28192
// exit ;
28190: GO 28702
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28192: LD_ADDR_VAR 0 8
28196: PUSH
28197: LD_INT 81
28199: PUSH
28200: LD_VAR 0 9
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 3
28211: PUSH
28212: LD_INT 21
28214: PUSH
28215: LD_INT 3
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PPUSH
28230: CALL_OW 69
28234: ST_TO_ADDR
// if not tmp then
28235: LD_VAR 0 8
28239: NOT
28240: IFFALSE 28244
// exit ;
28242: GO 28702
// if in_unit then
28244: LD_VAR 0 11
28248: IFFALSE 28272
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28250: LD_ADDR_VAR 0 10
28254: PUSH
28255: LD_VAR 0 8
28259: PPUSH
28260: LD_VAR 0 11
28264: PPUSH
28265: CALL_OW 74
28269: ST_TO_ADDR
28270: GO 28292
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28272: LD_ADDR_VAR 0 10
28276: PUSH
28277: LD_VAR 0 8
28281: PPUSH
28282: LD_VAR 0 1
28286: PPUSH
28287: CALL_OW 74
28291: ST_TO_ADDR
// if not enemy then
28292: LD_VAR 0 10
28296: NOT
28297: IFFALSE 28301
// exit ;
28299: GO 28702
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28301: LD_VAR 0 11
28305: PUSH
28306: LD_VAR 0 11
28310: PPUSH
28311: LD_VAR 0 10
28315: PPUSH
28316: CALL_OW 296
28320: PUSH
28321: LD_INT 13
28323: GREATER
28324: AND
28325: PUSH
28326: LD_VAR 0 1
28330: PPUSH
28331: LD_VAR 0 10
28335: PPUSH
28336: CALL_OW 296
28340: PUSH
28341: LD_INT 12
28343: GREATER
28344: OR
28345: IFFALSE 28349
// exit ;
28347: GO 28702
// missile := [ 1 ] ;
28349: LD_ADDR_VAR 0 14
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: EMPTY
28358: LIST
28359: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28360: LD_VAR 0 9
28364: PPUSH
28365: LD_VAR 0 12
28369: PPUSH
28370: CALL_OW 325
28374: IFFALSE 28403
// missile := Replace ( missile , missile + 1 , 2 ) ;
28376: LD_ADDR_VAR 0 14
28380: PUSH
28381: LD_VAR 0 14
28385: PPUSH
28386: LD_VAR 0 14
28390: PUSH
28391: LD_INT 1
28393: PLUS
28394: PPUSH
28395: LD_INT 2
28397: PPUSH
28398: CALL_OW 1
28402: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28403: LD_VAR 0 9
28407: PPUSH
28408: LD_VAR 0 13
28412: PPUSH
28413: CALL_OW 325
28417: PUSH
28418: LD_VAR 0 10
28422: PPUSH
28423: CALL_OW 255
28427: PPUSH
28428: LD_VAR 0 13
28432: PPUSH
28433: CALL_OW 325
28437: NOT
28438: AND
28439: IFFALSE 28468
// missile := Replace ( missile , missile + 1 , 3 ) ;
28441: LD_ADDR_VAR 0 14
28445: PUSH
28446: LD_VAR 0 14
28450: PPUSH
28451: LD_VAR 0 14
28455: PUSH
28456: LD_INT 1
28458: PLUS
28459: PPUSH
28460: LD_INT 3
28462: PPUSH
28463: CALL_OW 1
28467: ST_TO_ADDR
// if missile < 2 then
28468: LD_VAR 0 14
28472: PUSH
28473: LD_INT 2
28475: LESS
28476: IFFALSE 28480
// exit ;
28478: GO 28702
// x := GetX ( enemy ) ;
28480: LD_ADDR_VAR 0 4
28484: PUSH
28485: LD_VAR 0 10
28489: PPUSH
28490: CALL_OW 250
28494: ST_TO_ADDR
// y := GetY ( enemy ) ;
28495: LD_ADDR_VAR 0 5
28499: PUSH
28500: LD_VAR 0 10
28504: PPUSH
28505: CALL_OW 251
28509: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28510: LD_ADDR_VAR 0 6
28514: PUSH
28515: LD_VAR 0 4
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: PPUSH
28524: LD_INT 1
28526: PPUSH
28527: CALL_OW 12
28531: PLUS
28532: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28533: LD_ADDR_VAR 0 7
28537: PUSH
28538: LD_VAR 0 5
28542: PUSH
28543: LD_INT 1
28545: NEG
28546: PPUSH
28547: LD_INT 1
28549: PPUSH
28550: CALL_OW 12
28554: PLUS
28555: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28556: LD_VAR 0 6
28560: PPUSH
28561: LD_VAR 0 7
28565: PPUSH
28566: CALL_OW 488
28570: NOT
28571: IFFALSE 28593
// begin _x := x ;
28573: LD_ADDR_VAR 0 6
28577: PUSH
28578: LD_VAR 0 4
28582: ST_TO_ADDR
// _y := y ;
28583: LD_ADDR_VAR 0 7
28587: PUSH
28588: LD_VAR 0 5
28592: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28593: LD_ADDR_VAR 0 3
28597: PUSH
28598: LD_INT 1
28600: PPUSH
28601: LD_VAR 0 14
28605: PPUSH
28606: CALL_OW 12
28610: ST_TO_ADDR
// case i of 1 :
28611: LD_VAR 0 3
28615: PUSH
28616: LD_INT 1
28618: DOUBLE
28619: EQUAL
28620: IFTRUE 28624
28622: GO 28641
28624: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28625: LD_VAR 0 1
28629: PPUSH
28630: LD_VAR 0 10
28634: PPUSH
28635: CALL_OW 115
28639: GO 28702
28641: LD_INT 2
28643: DOUBLE
28644: EQUAL
28645: IFTRUE 28649
28647: GO 28671
28649: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28650: LD_VAR 0 1
28654: PPUSH
28655: LD_VAR 0 6
28659: PPUSH
28660: LD_VAR 0 7
28664: PPUSH
28665: CALL_OW 153
28669: GO 28702
28671: LD_INT 3
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28701
28679: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28680: LD_VAR 0 1
28684: PPUSH
28685: LD_VAR 0 6
28689: PPUSH
28690: LD_VAR 0 7
28694: PPUSH
28695: CALL_OW 154
28699: GO 28702
28701: POP
// end ;
28702: LD_VAR 0 2
28706: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28707: LD_INT 0
28709: PPUSH
28710: PPUSH
28711: PPUSH
28712: PPUSH
28713: PPUSH
28714: PPUSH
// if not unit or not building then
28715: LD_VAR 0 1
28719: NOT
28720: PUSH
28721: LD_VAR 0 2
28725: NOT
28726: OR
28727: IFFALSE 28731
// exit ;
28729: GO 28889
// x := GetX ( building ) ;
28731: LD_ADDR_VAR 0 5
28735: PUSH
28736: LD_VAR 0 2
28740: PPUSH
28741: CALL_OW 250
28745: ST_TO_ADDR
// y := GetY ( building ) ;
28746: LD_ADDR_VAR 0 6
28750: PUSH
28751: LD_VAR 0 2
28755: PPUSH
28756: CALL_OW 251
28760: ST_TO_ADDR
// for i = 0 to 5 do
28761: LD_ADDR_VAR 0 4
28765: PUSH
28766: DOUBLE
28767: LD_INT 0
28769: DEC
28770: ST_TO_ADDR
28771: LD_INT 5
28773: PUSH
28774: FOR_TO
28775: IFFALSE 28887
// begin _x := ShiftX ( x , i , 3 ) ;
28777: LD_ADDR_VAR 0 7
28781: PUSH
28782: LD_VAR 0 5
28786: PPUSH
28787: LD_VAR 0 4
28791: PPUSH
28792: LD_INT 3
28794: PPUSH
28795: CALL_OW 272
28799: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28800: LD_ADDR_VAR 0 8
28804: PUSH
28805: LD_VAR 0 6
28809: PPUSH
28810: LD_VAR 0 4
28814: PPUSH
28815: LD_INT 3
28817: PPUSH
28818: CALL_OW 273
28822: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28823: LD_VAR 0 7
28827: PPUSH
28828: LD_VAR 0 8
28832: PPUSH
28833: CALL_OW 488
28837: NOT
28838: IFFALSE 28842
// continue ;
28840: GO 28774
// if HexInfo ( _x , _y ) = 0 then
28842: LD_VAR 0 7
28846: PPUSH
28847: LD_VAR 0 8
28851: PPUSH
28852: CALL_OW 428
28856: PUSH
28857: LD_INT 0
28859: EQUAL
28860: IFFALSE 28885
// begin ComMoveXY ( unit , _x , _y ) ;
28862: LD_VAR 0 1
28866: PPUSH
28867: LD_VAR 0 7
28871: PPUSH
28872: LD_VAR 0 8
28876: PPUSH
28877: CALL_OW 111
// exit ;
28881: POP
28882: POP
28883: GO 28889
// end ; end ;
28885: GO 28774
28887: POP
28888: POP
// end ;
28889: LD_VAR 0 3
28893: RET
// export function ScanBase ( side , base_area ) ; begin
28894: LD_INT 0
28896: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28897: LD_ADDR_VAR 0 3
28901: PUSH
28902: LD_VAR 0 2
28906: PPUSH
28907: LD_INT 81
28909: PUSH
28910: LD_VAR 0 1
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PPUSH
28919: CALL_OW 70
28923: ST_TO_ADDR
// end ;
28924: LD_VAR 0 3
28928: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28929: LD_INT 0
28931: PPUSH
28932: PPUSH
28933: PPUSH
28934: PPUSH
// result := false ;
28935: LD_ADDR_VAR 0 2
28939: PUSH
28940: LD_INT 0
28942: ST_TO_ADDR
// side := GetSide ( unit ) ;
28943: LD_ADDR_VAR 0 3
28947: PUSH
28948: LD_VAR 0 1
28952: PPUSH
28953: CALL_OW 255
28957: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28958: LD_ADDR_VAR 0 4
28962: PUSH
28963: LD_VAR 0 1
28967: PPUSH
28968: CALL_OW 248
28972: ST_TO_ADDR
// case nat of 1 :
28973: LD_VAR 0 4
28977: PUSH
28978: LD_INT 1
28980: DOUBLE
28981: EQUAL
28982: IFTRUE 28986
28984: GO 28997
28986: POP
// tech := tech_lassight ; 2 :
28987: LD_ADDR_VAR 0 5
28991: PUSH
28992: LD_INT 12
28994: ST_TO_ADDR
28995: GO 29036
28997: LD_INT 2
28999: DOUBLE
29000: EQUAL
29001: IFTRUE 29005
29003: GO 29016
29005: POP
// tech := tech_mortar ; 3 :
29006: LD_ADDR_VAR 0 5
29010: PUSH
29011: LD_INT 41
29013: ST_TO_ADDR
29014: GO 29036
29016: LD_INT 3
29018: DOUBLE
29019: EQUAL
29020: IFTRUE 29024
29022: GO 29035
29024: POP
// tech := tech_bazooka ; end ;
29025: LD_ADDR_VAR 0 5
29029: PUSH
29030: LD_INT 44
29032: ST_TO_ADDR
29033: GO 29036
29035: POP
// if Researched ( side , tech ) then
29036: LD_VAR 0 3
29040: PPUSH
29041: LD_VAR 0 5
29045: PPUSH
29046: CALL_OW 325
29050: IFFALSE 29077
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29052: LD_ADDR_VAR 0 2
29056: PUSH
29057: LD_INT 5
29059: PUSH
29060: LD_INT 8
29062: PUSH
29063: LD_INT 9
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: LIST
29070: PUSH
29071: LD_VAR 0 4
29075: ARRAY
29076: ST_TO_ADDR
// end ;
29077: LD_VAR 0 2
29081: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29082: LD_INT 0
29084: PPUSH
29085: PPUSH
29086: PPUSH
// if not mines then
29087: LD_VAR 0 2
29091: NOT
29092: IFFALSE 29096
// exit ;
29094: GO 29240
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29096: LD_ADDR_VAR 0 5
29100: PUSH
29101: LD_INT 81
29103: PUSH
29104: LD_VAR 0 1
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 3
29115: PUSH
29116: LD_INT 21
29118: PUSH
29119: LD_INT 3
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PPUSH
29134: CALL_OW 69
29138: ST_TO_ADDR
// for i in mines do
29139: LD_ADDR_VAR 0 4
29143: PUSH
29144: LD_VAR 0 2
29148: PUSH
29149: FOR_IN
29150: IFFALSE 29238
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29152: LD_VAR 0 4
29156: PUSH
29157: LD_INT 1
29159: ARRAY
29160: PPUSH
29161: LD_VAR 0 4
29165: PUSH
29166: LD_INT 2
29168: ARRAY
29169: PPUSH
29170: CALL_OW 458
29174: NOT
29175: IFFALSE 29179
// continue ;
29177: GO 29149
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29179: LD_VAR 0 4
29183: PUSH
29184: LD_INT 1
29186: ARRAY
29187: PPUSH
29188: LD_VAR 0 4
29192: PUSH
29193: LD_INT 2
29195: ARRAY
29196: PPUSH
29197: CALL_OW 428
29201: PUSH
29202: LD_VAR 0 5
29206: IN
29207: IFFALSE 29236
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29209: LD_VAR 0 4
29213: PUSH
29214: LD_INT 1
29216: ARRAY
29217: PPUSH
29218: LD_VAR 0 4
29222: PUSH
29223: LD_INT 2
29225: ARRAY
29226: PPUSH
29227: LD_VAR 0 1
29231: PPUSH
29232: CALL_OW 456
// end ;
29236: GO 29149
29238: POP
29239: POP
// end ;
29240: LD_VAR 0 3
29244: RET
// export function Count ( array ) ; var i ; begin
29245: LD_INT 0
29247: PPUSH
29248: PPUSH
// result := 0 ;
29249: LD_ADDR_VAR 0 2
29253: PUSH
29254: LD_INT 0
29256: ST_TO_ADDR
// for i in array do
29257: LD_ADDR_VAR 0 3
29261: PUSH
29262: LD_VAR 0 1
29266: PUSH
29267: FOR_IN
29268: IFFALSE 29292
// if i then
29270: LD_VAR 0 3
29274: IFFALSE 29290
// result := result + 1 ;
29276: LD_ADDR_VAR 0 2
29280: PUSH
29281: LD_VAR 0 2
29285: PUSH
29286: LD_INT 1
29288: PLUS
29289: ST_TO_ADDR
29290: GO 29267
29292: POP
29293: POP
// end ;
29294: LD_VAR 0 2
29298: RET
// export function IsEmpty ( building ) ; begin
29299: LD_INT 0
29301: PPUSH
// if not building then
29302: LD_VAR 0 1
29306: NOT
29307: IFFALSE 29311
// exit ;
29309: GO 29354
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29311: LD_ADDR_VAR 0 2
29315: PUSH
29316: LD_VAR 0 1
29320: PUSH
29321: LD_INT 22
29323: PUSH
29324: LD_VAR 0 1
29328: PPUSH
29329: CALL_OW 255
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 58
29340: PUSH
29341: EMPTY
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PPUSH
29348: CALL_OW 69
29352: IN
29353: ST_TO_ADDR
// end ;
29354: LD_VAR 0 2
29358: RET
// export function IsNotFull ( building ) ; var places ; begin
29359: LD_INT 0
29361: PPUSH
29362: PPUSH
// if not building then
29363: LD_VAR 0 1
29367: NOT
29368: IFFALSE 29372
// exit ;
29370: GO 29543
// result := false ;
29372: LD_ADDR_VAR 0 2
29376: PUSH
29377: LD_INT 0
29379: ST_TO_ADDR
// places := 0 ;
29380: LD_ADDR_VAR 0 3
29384: PUSH
29385: LD_INT 0
29387: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
29388: LD_VAR 0 1
29392: PPUSH
29393: CALL_OW 266
29397: PUSH
29398: LD_INT 0
29400: DOUBLE
29401: EQUAL
29402: IFTRUE 29460
29404: LD_INT 1
29406: DOUBLE
29407: EQUAL
29408: IFTRUE 29460
29410: LD_INT 6
29412: DOUBLE
29413: EQUAL
29414: IFTRUE 29460
29416: LD_INT 7
29418: DOUBLE
29419: EQUAL
29420: IFTRUE 29460
29422: LD_INT 8
29424: DOUBLE
29425: EQUAL
29426: IFTRUE 29460
29428: LD_INT 4
29430: DOUBLE
29431: EQUAL
29432: IFTRUE 29460
29434: LD_INT 5
29436: DOUBLE
29437: EQUAL
29438: IFTRUE 29460
29440: LD_INT 2
29442: DOUBLE
29443: EQUAL
29444: IFTRUE 29460
29446: LD_INT 3
29448: DOUBLE
29449: EQUAL
29450: IFTRUE 29460
29452: LD_INT 35
29454: DOUBLE
29455: EQUAL
29456: IFTRUE 29460
29458: GO 29471
29460: POP
// places := 6 ; b_bunker , b_breastwork :
29461: LD_ADDR_VAR 0 3
29465: PUSH
29466: LD_INT 6
29468: ST_TO_ADDR
29469: GO 29516
29471: LD_INT 32
29473: DOUBLE
29474: EQUAL
29475: IFTRUE 29485
29477: LD_INT 31
29479: DOUBLE
29480: EQUAL
29481: IFTRUE 29485
29483: GO 29496
29485: POP
// places := 1 ; b_control_tower :
29486: LD_ADDR_VAR 0 3
29490: PUSH
29491: LD_INT 1
29493: ST_TO_ADDR
29494: GO 29516
29496: LD_INT 36
29498: DOUBLE
29499: EQUAL
29500: IFTRUE 29504
29502: GO 29515
29504: POP
// places := 3 ; end ;
29505: LD_ADDR_VAR 0 3
29509: PUSH
29510: LD_INT 3
29512: ST_TO_ADDR
29513: GO 29516
29515: POP
// if places then
29516: LD_VAR 0 3
29520: IFFALSE 29543
// result := UnitsInside ( building ) < places ;
29522: LD_ADDR_VAR 0 2
29526: PUSH
29527: LD_VAR 0 1
29531: PPUSH
29532: CALL_OW 313
29536: PUSH
29537: LD_VAR 0 3
29541: LESS
29542: ST_TO_ADDR
// end ;
29543: LD_VAR 0 2
29547: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29548: LD_INT 0
29550: PPUSH
29551: PPUSH
29552: PPUSH
29553: PPUSH
// tmp := [ ] ;
29554: LD_ADDR_VAR 0 3
29558: PUSH
29559: EMPTY
29560: ST_TO_ADDR
// list := [ ] ;
29561: LD_ADDR_VAR 0 5
29565: PUSH
29566: EMPTY
29567: ST_TO_ADDR
// for i = 16 to 25 do
29568: LD_ADDR_VAR 0 4
29572: PUSH
29573: DOUBLE
29574: LD_INT 16
29576: DEC
29577: ST_TO_ADDR
29578: LD_INT 25
29580: PUSH
29581: FOR_TO
29582: IFFALSE 29655
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29584: LD_ADDR_VAR 0 3
29588: PUSH
29589: LD_VAR 0 3
29593: PUSH
29594: LD_INT 22
29596: PUSH
29597: LD_VAR 0 1
29601: PPUSH
29602: CALL_OW 255
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 91
29613: PUSH
29614: LD_VAR 0 1
29618: PUSH
29619: LD_INT 6
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 30
29629: PUSH
29630: LD_VAR 0 4
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: PPUSH
29647: CALL_OW 69
29651: ADD
29652: ST_TO_ADDR
29653: GO 29581
29655: POP
29656: POP
// for i = 1 to tmp do
29657: LD_ADDR_VAR 0 4
29661: PUSH
29662: DOUBLE
29663: LD_INT 1
29665: DEC
29666: ST_TO_ADDR
29667: LD_VAR 0 3
29671: PUSH
29672: FOR_TO
29673: IFFALSE 29761
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29675: LD_ADDR_VAR 0 5
29679: PUSH
29680: LD_VAR 0 5
29684: PUSH
29685: LD_VAR 0 3
29689: PUSH
29690: LD_VAR 0 4
29694: ARRAY
29695: PPUSH
29696: CALL_OW 266
29700: PUSH
29701: LD_VAR 0 3
29705: PUSH
29706: LD_VAR 0 4
29710: ARRAY
29711: PPUSH
29712: CALL_OW 250
29716: PUSH
29717: LD_VAR 0 3
29721: PUSH
29722: LD_VAR 0 4
29726: ARRAY
29727: PPUSH
29728: CALL_OW 251
29732: PUSH
29733: LD_VAR 0 3
29737: PUSH
29738: LD_VAR 0 4
29742: ARRAY
29743: PPUSH
29744: CALL_OW 254
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: PUSH
29755: EMPTY
29756: LIST
29757: ADD
29758: ST_TO_ADDR
29759: GO 29672
29761: POP
29762: POP
// result := list ;
29763: LD_ADDR_VAR 0 2
29767: PUSH
29768: LD_VAR 0 5
29772: ST_TO_ADDR
// end ;
29773: LD_VAR 0 2
29777: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29778: LD_INT 0
29780: PPUSH
29781: PPUSH
29782: PPUSH
29783: PPUSH
29784: PPUSH
29785: PPUSH
29786: PPUSH
// if not factory then
29787: LD_VAR 0 1
29791: NOT
29792: IFFALSE 29796
// exit ;
29794: GO 30389
// if control = control_apeman then
29796: LD_VAR 0 4
29800: PUSH
29801: LD_INT 5
29803: EQUAL
29804: IFFALSE 29913
// begin tmp := UnitsInside ( factory ) ;
29806: LD_ADDR_VAR 0 8
29810: PUSH
29811: LD_VAR 0 1
29815: PPUSH
29816: CALL_OW 313
29820: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29821: LD_VAR 0 8
29825: PPUSH
29826: LD_INT 25
29828: PUSH
29829: LD_INT 12
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PPUSH
29836: CALL_OW 72
29840: NOT
29841: IFFALSE 29851
// control := control_manual ;
29843: LD_ADDR_VAR 0 4
29847: PUSH
29848: LD_INT 1
29850: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29851: LD_ADDR_VAR 0 8
29855: PUSH
29856: LD_VAR 0 1
29860: PPUSH
29861: CALL 29548 0 1
29865: ST_TO_ADDR
// if tmp then
29866: LD_VAR 0 8
29870: IFFALSE 29913
// begin for i in tmp do
29872: LD_ADDR_VAR 0 7
29876: PUSH
29877: LD_VAR 0 8
29881: PUSH
29882: FOR_IN
29883: IFFALSE 29911
// if i [ 1 ] = b_ext_radio then
29885: LD_VAR 0 7
29889: PUSH
29890: LD_INT 1
29892: ARRAY
29893: PUSH
29894: LD_INT 22
29896: EQUAL
29897: IFFALSE 29909
// begin control := control_remote ;
29899: LD_ADDR_VAR 0 4
29903: PUSH
29904: LD_INT 2
29906: ST_TO_ADDR
// break ;
29907: GO 29911
// end ;
29909: GO 29882
29911: POP
29912: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29913: LD_VAR 0 1
29917: PPUSH
29918: LD_VAR 0 2
29922: PPUSH
29923: LD_VAR 0 3
29927: PPUSH
29928: LD_VAR 0 4
29932: PPUSH
29933: LD_VAR 0 5
29937: PPUSH
29938: CALL_OW 448
29942: IFFALSE 29977
// begin result := [ chassis , engine , control , weapon ] ;
29944: LD_ADDR_VAR 0 6
29948: PUSH
29949: LD_VAR 0 2
29953: PUSH
29954: LD_VAR 0 3
29958: PUSH
29959: LD_VAR 0 4
29963: PUSH
29964: LD_VAR 0 5
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: ST_TO_ADDR
// exit ;
29975: GO 30389
// end ; _chassis := AvailableChassisList ( factory ) ;
29977: LD_ADDR_VAR 0 9
29981: PUSH
29982: LD_VAR 0 1
29986: PPUSH
29987: CALL_OW 475
29991: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29992: LD_ADDR_VAR 0 11
29996: PUSH
29997: LD_VAR 0 1
30001: PPUSH
30002: CALL_OW 476
30006: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30007: LD_ADDR_VAR 0 12
30011: PUSH
30012: LD_VAR 0 1
30016: PPUSH
30017: CALL_OW 477
30021: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30022: LD_ADDR_VAR 0 10
30026: PUSH
30027: LD_VAR 0 1
30031: PPUSH
30032: CALL_OW 478
30036: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30037: LD_VAR 0 9
30041: NOT
30042: PUSH
30043: LD_VAR 0 11
30047: NOT
30048: OR
30049: PUSH
30050: LD_VAR 0 12
30054: NOT
30055: OR
30056: PUSH
30057: LD_VAR 0 10
30061: NOT
30062: OR
30063: IFFALSE 30098
// begin result := [ chassis , engine , control , weapon ] ;
30065: LD_ADDR_VAR 0 6
30069: PUSH
30070: LD_VAR 0 2
30074: PUSH
30075: LD_VAR 0 3
30079: PUSH
30080: LD_VAR 0 4
30084: PUSH
30085: LD_VAR 0 5
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: ST_TO_ADDR
// exit ;
30096: GO 30389
// end ; if not chassis in _chassis then
30098: LD_VAR 0 2
30102: PUSH
30103: LD_VAR 0 9
30107: IN
30108: NOT
30109: IFFALSE 30135
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30111: LD_ADDR_VAR 0 2
30115: PUSH
30116: LD_VAR 0 9
30120: PUSH
30121: LD_INT 1
30123: PPUSH
30124: LD_VAR 0 9
30128: PPUSH
30129: CALL_OW 12
30133: ARRAY
30134: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30135: LD_VAR 0 2
30139: PPUSH
30140: LD_VAR 0 3
30144: PPUSH
30145: CALL 30394 0 2
30149: NOT
30150: IFFALSE 30209
// repeat engine := _engine [ 1 ] ;
30152: LD_ADDR_VAR 0 3
30156: PUSH
30157: LD_VAR 0 11
30161: PUSH
30162: LD_INT 1
30164: ARRAY
30165: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30166: LD_ADDR_VAR 0 11
30170: PUSH
30171: LD_VAR 0 11
30175: PPUSH
30176: LD_INT 1
30178: PPUSH
30179: CALL_OW 3
30183: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30184: LD_VAR 0 2
30188: PPUSH
30189: LD_VAR 0 3
30193: PPUSH
30194: CALL 30394 0 2
30198: PUSH
30199: LD_VAR 0 11
30203: PUSH
30204: EMPTY
30205: EQUAL
30206: OR
30207: IFFALSE 30152
// if not control in _control then
30209: LD_VAR 0 4
30213: PUSH
30214: LD_VAR 0 12
30218: IN
30219: NOT
30220: IFFALSE 30246
// control := _control [ rand ( 1 , _control ) ] ;
30222: LD_ADDR_VAR 0 4
30226: PUSH
30227: LD_VAR 0 12
30231: PUSH
30232: LD_INT 1
30234: PPUSH
30235: LD_VAR 0 12
30239: PPUSH
30240: CALL_OW 12
30244: ARRAY
30245: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30246: LD_VAR 0 2
30250: PPUSH
30251: LD_VAR 0 5
30255: PPUSH
30256: CALL 30614 0 2
30260: NOT
30261: IFFALSE 30320
// repeat weapon := _weapon [ 1 ] ;
30263: LD_ADDR_VAR 0 5
30267: PUSH
30268: LD_VAR 0 10
30272: PUSH
30273: LD_INT 1
30275: ARRAY
30276: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30277: LD_ADDR_VAR 0 10
30281: PUSH
30282: LD_VAR 0 10
30286: PPUSH
30287: LD_INT 1
30289: PPUSH
30290: CALL_OW 3
30294: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30295: LD_VAR 0 2
30299: PPUSH
30300: LD_VAR 0 5
30304: PPUSH
30305: CALL 30614 0 2
30309: PUSH
30310: LD_VAR 0 10
30314: PUSH
30315: EMPTY
30316: EQUAL
30317: OR
30318: IFFALSE 30263
// result := [ ] ;
30320: LD_ADDR_VAR 0 6
30324: PUSH
30325: EMPTY
30326: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30327: LD_VAR 0 1
30331: PPUSH
30332: LD_VAR 0 2
30336: PPUSH
30337: LD_VAR 0 3
30341: PPUSH
30342: LD_VAR 0 4
30346: PPUSH
30347: LD_VAR 0 5
30351: PPUSH
30352: CALL_OW 448
30356: IFFALSE 30389
// result := [ chassis , engine , control , weapon ] ;
30358: LD_ADDR_VAR 0 6
30362: PUSH
30363: LD_VAR 0 2
30367: PUSH
30368: LD_VAR 0 3
30372: PUSH
30373: LD_VAR 0 4
30377: PUSH
30378: LD_VAR 0 5
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: ST_TO_ADDR
// end ;
30389: LD_VAR 0 6
30393: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30394: LD_INT 0
30396: PPUSH
// if not chassis or not engine then
30397: LD_VAR 0 1
30401: NOT
30402: PUSH
30403: LD_VAR 0 2
30407: NOT
30408: OR
30409: IFFALSE 30413
// exit ;
30411: GO 30609
// case engine of engine_solar :
30413: LD_VAR 0 2
30417: PUSH
30418: LD_INT 2
30420: DOUBLE
30421: EQUAL
30422: IFTRUE 30426
30424: GO 30464
30426: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30427: LD_ADDR_VAR 0 3
30431: PUSH
30432: LD_INT 11
30434: PUSH
30435: LD_INT 12
30437: PUSH
30438: LD_INT 13
30440: PUSH
30441: LD_INT 14
30443: PUSH
30444: LD_INT 1
30446: PUSH
30447: LD_INT 2
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: ST_TO_ADDR
30462: GO 30593
30464: LD_INT 1
30466: DOUBLE
30467: EQUAL
30468: IFTRUE 30472
30470: GO 30534
30472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30473: LD_ADDR_VAR 0 3
30477: PUSH
30478: LD_INT 11
30480: PUSH
30481: LD_INT 12
30483: PUSH
30484: LD_INT 13
30486: PUSH
30487: LD_INT 14
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: LD_INT 2
30495: PUSH
30496: LD_INT 3
30498: PUSH
30499: LD_INT 4
30501: PUSH
30502: LD_INT 5
30504: PUSH
30505: LD_INT 21
30507: PUSH
30508: LD_INT 23
30510: PUSH
30511: LD_INT 22
30513: PUSH
30514: LD_INT 24
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: ST_TO_ADDR
30532: GO 30593
30534: LD_INT 3
30536: DOUBLE
30537: EQUAL
30538: IFTRUE 30542
30540: GO 30592
30542: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30543: LD_ADDR_VAR 0 3
30547: PUSH
30548: LD_INT 13
30550: PUSH
30551: LD_INT 14
30553: PUSH
30554: LD_INT 2
30556: PUSH
30557: LD_INT 3
30559: PUSH
30560: LD_INT 4
30562: PUSH
30563: LD_INT 5
30565: PUSH
30566: LD_INT 21
30568: PUSH
30569: LD_INT 22
30571: PUSH
30572: LD_INT 23
30574: PUSH
30575: LD_INT 24
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: ST_TO_ADDR
30590: GO 30593
30592: POP
// result := ( chassis in result ) ;
30593: LD_ADDR_VAR 0 3
30597: PUSH
30598: LD_VAR 0 1
30602: PUSH
30603: LD_VAR 0 3
30607: IN
30608: ST_TO_ADDR
// end ;
30609: LD_VAR 0 3
30613: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30614: LD_INT 0
30616: PPUSH
// if not chassis or not weapon then
30617: LD_VAR 0 1
30621: NOT
30622: PUSH
30623: LD_VAR 0 2
30627: NOT
30628: OR
30629: IFFALSE 30633
// exit ;
30631: GO 31693
// case weapon of us_machine_gun :
30633: LD_VAR 0 2
30637: PUSH
30638: LD_INT 2
30640: DOUBLE
30641: EQUAL
30642: IFTRUE 30646
30644: GO 30676
30646: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30647: LD_ADDR_VAR 0 3
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: LD_INT 2
30657: PUSH
30658: LD_INT 3
30660: PUSH
30661: LD_INT 4
30663: PUSH
30664: LD_INT 5
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: ST_TO_ADDR
30674: GO 31677
30676: LD_INT 3
30678: DOUBLE
30679: EQUAL
30680: IFTRUE 30684
30682: GO 30714
30684: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30685: LD_ADDR_VAR 0 3
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 2
30695: PUSH
30696: LD_INT 3
30698: PUSH
30699: LD_INT 4
30701: PUSH
30702: LD_INT 5
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: ST_TO_ADDR
30712: GO 31677
30714: LD_INT 11
30716: DOUBLE
30717: EQUAL
30718: IFTRUE 30722
30720: GO 30752
30722: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30723: LD_ADDR_VAR 0 3
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 2
30733: PUSH
30734: LD_INT 3
30736: PUSH
30737: LD_INT 4
30739: PUSH
30740: LD_INT 5
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: ST_TO_ADDR
30750: GO 31677
30752: LD_INT 4
30754: DOUBLE
30755: EQUAL
30756: IFTRUE 30760
30758: GO 30786
30760: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30761: LD_ADDR_VAR 0 3
30765: PUSH
30766: LD_INT 2
30768: PUSH
30769: LD_INT 3
30771: PUSH
30772: LD_INT 4
30774: PUSH
30775: LD_INT 5
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: ST_TO_ADDR
30784: GO 31677
30786: LD_INT 5
30788: DOUBLE
30789: EQUAL
30790: IFTRUE 30794
30792: GO 30820
30794: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30795: LD_ADDR_VAR 0 3
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: LD_INT 3
30805: PUSH
30806: LD_INT 4
30808: PUSH
30809: LD_INT 5
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: ST_TO_ADDR
30818: GO 31677
30820: LD_INT 9
30822: DOUBLE
30823: EQUAL
30824: IFTRUE 30828
30826: GO 30854
30828: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30829: LD_ADDR_VAR 0 3
30833: PUSH
30834: LD_INT 2
30836: PUSH
30837: LD_INT 3
30839: PUSH
30840: LD_INT 4
30842: PUSH
30843: LD_INT 5
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: ST_TO_ADDR
30852: GO 31677
30854: LD_INT 7
30856: DOUBLE
30857: EQUAL
30858: IFTRUE 30862
30860: GO 30888
30862: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30863: LD_ADDR_VAR 0 3
30867: PUSH
30868: LD_INT 2
30870: PUSH
30871: LD_INT 3
30873: PUSH
30874: LD_INT 4
30876: PUSH
30877: LD_INT 5
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: ST_TO_ADDR
30886: GO 31677
30888: LD_INT 12
30890: DOUBLE
30891: EQUAL
30892: IFTRUE 30896
30894: GO 30922
30896: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30897: LD_ADDR_VAR 0 3
30901: PUSH
30902: LD_INT 2
30904: PUSH
30905: LD_INT 3
30907: PUSH
30908: LD_INT 4
30910: PUSH
30911: LD_INT 5
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: ST_TO_ADDR
30920: GO 31677
30922: LD_INT 13
30924: DOUBLE
30925: EQUAL
30926: IFTRUE 30930
30928: GO 30956
30930: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30931: LD_ADDR_VAR 0 3
30935: PUSH
30936: LD_INT 2
30938: PUSH
30939: LD_INT 3
30941: PUSH
30942: LD_INT 4
30944: PUSH
30945: LD_INT 5
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: ST_TO_ADDR
30954: GO 31677
30956: LD_INT 14
30958: DOUBLE
30959: EQUAL
30960: IFTRUE 30964
30962: GO 30982
30964: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30965: LD_ADDR_VAR 0 3
30969: PUSH
30970: LD_INT 4
30972: PUSH
30973: LD_INT 5
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: ST_TO_ADDR
30980: GO 31677
30982: LD_INT 6
30984: DOUBLE
30985: EQUAL
30986: IFTRUE 30990
30988: GO 31008
30990: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30991: LD_ADDR_VAR 0 3
30995: PUSH
30996: LD_INT 4
30998: PUSH
30999: LD_INT 5
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: ST_TO_ADDR
31006: GO 31677
31008: LD_INT 10
31010: DOUBLE
31011: EQUAL
31012: IFTRUE 31016
31014: GO 31034
31016: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31017: LD_ADDR_VAR 0 3
31021: PUSH
31022: LD_INT 4
31024: PUSH
31025: LD_INT 5
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: ST_TO_ADDR
31032: GO 31677
31034: LD_INT 22
31036: DOUBLE
31037: EQUAL
31038: IFTRUE 31042
31040: GO 31068
31042: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31043: LD_ADDR_VAR 0 3
31047: PUSH
31048: LD_INT 11
31050: PUSH
31051: LD_INT 12
31053: PUSH
31054: LD_INT 13
31056: PUSH
31057: LD_INT 14
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: ST_TO_ADDR
31066: GO 31677
31068: LD_INT 23
31070: DOUBLE
31071: EQUAL
31072: IFTRUE 31076
31074: GO 31102
31076: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31077: LD_ADDR_VAR 0 3
31081: PUSH
31082: LD_INT 11
31084: PUSH
31085: LD_INT 12
31087: PUSH
31088: LD_INT 13
31090: PUSH
31091: LD_INT 14
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: ST_TO_ADDR
31100: GO 31677
31102: LD_INT 24
31104: DOUBLE
31105: EQUAL
31106: IFTRUE 31110
31108: GO 31136
31110: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31111: LD_ADDR_VAR 0 3
31115: PUSH
31116: LD_INT 11
31118: PUSH
31119: LD_INT 12
31121: PUSH
31122: LD_INT 13
31124: PUSH
31125: LD_INT 14
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: ST_TO_ADDR
31134: GO 31677
31136: LD_INT 30
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31144
31142: GO 31170
31144: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31145: LD_ADDR_VAR 0 3
31149: PUSH
31150: LD_INT 11
31152: PUSH
31153: LD_INT 12
31155: PUSH
31156: LD_INT 13
31158: PUSH
31159: LD_INT 14
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: ST_TO_ADDR
31168: GO 31677
31170: LD_INT 25
31172: DOUBLE
31173: EQUAL
31174: IFTRUE 31178
31176: GO 31196
31178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31179: LD_ADDR_VAR 0 3
31183: PUSH
31184: LD_INT 13
31186: PUSH
31187: LD_INT 14
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: ST_TO_ADDR
31194: GO 31677
31196: LD_INT 27
31198: DOUBLE
31199: EQUAL
31200: IFTRUE 31204
31202: GO 31222
31204: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31205: LD_ADDR_VAR 0 3
31209: PUSH
31210: LD_INT 13
31212: PUSH
31213: LD_INT 14
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: ST_TO_ADDR
31220: GO 31677
31222: LD_INT 92
31224: DOUBLE
31225: EQUAL
31226: IFTRUE 31230
31228: GO 31256
31230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31231: LD_ADDR_VAR 0 3
31235: PUSH
31236: LD_INT 11
31238: PUSH
31239: LD_INT 12
31241: PUSH
31242: LD_INT 13
31244: PUSH
31245: LD_INT 14
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: ST_TO_ADDR
31254: GO 31677
31256: LD_INT 28
31258: DOUBLE
31259: EQUAL
31260: IFTRUE 31264
31262: GO 31282
31264: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31265: LD_ADDR_VAR 0 3
31269: PUSH
31270: LD_INT 13
31272: PUSH
31273: LD_INT 14
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: ST_TO_ADDR
31280: GO 31677
31282: LD_INT 29
31284: DOUBLE
31285: EQUAL
31286: IFTRUE 31290
31288: GO 31308
31290: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31291: LD_ADDR_VAR 0 3
31295: PUSH
31296: LD_INT 13
31298: PUSH
31299: LD_INT 14
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: ST_TO_ADDR
31306: GO 31677
31308: LD_INT 31
31310: DOUBLE
31311: EQUAL
31312: IFTRUE 31316
31314: GO 31334
31316: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31317: LD_ADDR_VAR 0 3
31321: PUSH
31322: LD_INT 13
31324: PUSH
31325: LD_INT 14
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: ST_TO_ADDR
31332: GO 31677
31334: LD_INT 26
31336: DOUBLE
31337: EQUAL
31338: IFTRUE 31342
31340: GO 31360
31342: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31343: LD_ADDR_VAR 0 3
31347: PUSH
31348: LD_INT 13
31350: PUSH
31351: LD_INT 14
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: ST_TO_ADDR
31358: GO 31677
31360: LD_INT 42
31362: DOUBLE
31363: EQUAL
31364: IFTRUE 31368
31366: GO 31394
31368: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31369: LD_ADDR_VAR 0 3
31373: PUSH
31374: LD_INT 21
31376: PUSH
31377: LD_INT 22
31379: PUSH
31380: LD_INT 23
31382: PUSH
31383: LD_INT 24
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
31392: GO 31677
31394: LD_INT 43
31396: DOUBLE
31397: EQUAL
31398: IFTRUE 31402
31400: GO 31428
31402: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31403: LD_ADDR_VAR 0 3
31407: PUSH
31408: LD_INT 21
31410: PUSH
31411: LD_INT 22
31413: PUSH
31414: LD_INT 23
31416: PUSH
31417: LD_INT 24
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: ST_TO_ADDR
31426: GO 31677
31428: LD_INT 44
31430: DOUBLE
31431: EQUAL
31432: IFTRUE 31436
31434: GO 31462
31436: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31437: LD_ADDR_VAR 0 3
31441: PUSH
31442: LD_INT 21
31444: PUSH
31445: LD_INT 22
31447: PUSH
31448: LD_INT 23
31450: PUSH
31451: LD_INT 24
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: ST_TO_ADDR
31460: GO 31677
31462: LD_INT 45
31464: DOUBLE
31465: EQUAL
31466: IFTRUE 31470
31468: GO 31496
31470: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31471: LD_ADDR_VAR 0 3
31475: PUSH
31476: LD_INT 21
31478: PUSH
31479: LD_INT 22
31481: PUSH
31482: LD_INT 23
31484: PUSH
31485: LD_INT 24
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: ST_TO_ADDR
31494: GO 31677
31496: LD_INT 49
31498: DOUBLE
31499: EQUAL
31500: IFTRUE 31504
31502: GO 31530
31504: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31505: LD_ADDR_VAR 0 3
31509: PUSH
31510: LD_INT 21
31512: PUSH
31513: LD_INT 22
31515: PUSH
31516: LD_INT 23
31518: PUSH
31519: LD_INT 24
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: ST_TO_ADDR
31528: GO 31677
31530: LD_INT 51
31532: DOUBLE
31533: EQUAL
31534: IFTRUE 31538
31536: GO 31564
31538: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31539: LD_ADDR_VAR 0 3
31543: PUSH
31544: LD_INT 21
31546: PUSH
31547: LD_INT 22
31549: PUSH
31550: LD_INT 23
31552: PUSH
31553: LD_INT 24
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: ST_TO_ADDR
31562: GO 31677
31564: LD_INT 52
31566: DOUBLE
31567: EQUAL
31568: IFTRUE 31572
31570: GO 31598
31572: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31573: LD_ADDR_VAR 0 3
31577: PUSH
31578: LD_INT 21
31580: PUSH
31581: LD_INT 22
31583: PUSH
31584: LD_INT 23
31586: PUSH
31587: LD_INT 24
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: ST_TO_ADDR
31596: GO 31677
31598: LD_INT 53
31600: DOUBLE
31601: EQUAL
31602: IFTRUE 31606
31604: GO 31624
31606: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31607: LD_ADDR_VAR 0 3
31611: PUSH
31612: LD_INT 23
31614: PUSH
31615: LD_INT 24
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: ST_TO_ADDR
31622: GO 31677
31624: LD_INT 46
31626: DOUBLE
31627: EQUAL
31628: IFTRUE 31632
31630: GO 31650
31632: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31633: LD_ADDR_VAR 0 3
31637: PUSH
31638: LD_INT 23
31640: PUSH
31641: LD_INT 24
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: ST_TO_ADDR
31648: GO 31677
31650: LD_INT 47
31652: DOUBLE
31653: EQUAL
31654: IFTRUE 31658
31656: GO 31676
31658: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31659: LD_ADDR_VAR 0 3
31663: PUSH
31664: LD_INT 23
31666: PUSH
31667: LD_INT 24
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: ST_TO_ADDR
31674: GO 31677
31676: POP
// result := ( chassis in result ) ;
31677: LD_ADDR_VAR 0 3
31681: PUSH
31682: LD_VAR 0 1
31686: PUSH
31687: LD_VAR 0 3
31691: IN
31692: ST_TO_ADDR
// end ;
31693: LD_VAR 0 3
31697: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31698: LD_INT 0
31700: PPUSH
31701: PPUSH
31702: PPUSH
31703: PPUSH
31704: PPUSH
31705: PPUSH
31706: PPUSH
// result := array ;
31707: LD_ADDR_VAR 0 5
31711: PUSH
31712: LD_VAR 0 1
31716: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31717: LD_VAR 0 1
31721: NOT
31722: PUSH
31723: LD_VAR 0 2
31727: NOT
31728: OR
31729: PUSH
31730: LD_VAR 0 3
31734: NOT
31735: OR
31736: PUSH
31737: LD_VAR 0 2
31741: PUSH
31742: LD_VAR 0 1
31746: GREATER
31747: OR
31748: PUSH
31749: LD_VAR 0 3
31753: PUSH
31754: LD_VAR 0 1
31758: GREATER
31759: OR
31760: IFFALSE 31764
// exit ;
31762: GO 32060
// if direction then
31764: LD_VAR 0 4
31768: IFFALSE 31832
// begin d := 1 ;
31770: LD_ADDR_VAR 0 9
31774: PUSH
31775: LD_INT 1
31777: ST_TO_ADDR
// if i_from > i_to then
31778: LD_VAR 0 2
31782: PUSH
31783: LD_VAR 0 3
31787: GREATER
31788: IFFALSE 31814
// length := ( array - i_from ) + i_to else
31790: LD_ADDR_VAR 0 11
31794: PUSH
31795: LD_VAR 0 1
31799: PUSH
31800: LD_VAR 0 2
31804: MINUS
31805: PUSH
31806: LD_VAR 0 3
31810: PLUS
31811: ST_TO_ADDR
31812: GO 31830
// length := i_to - i_from ;
31814: LD_ADDR_VAR 0 11
31818: PUSH
31819: LD_VAR 0 3
31823: PUSH
31824: LD_VAR 0 2
31828: MINUS
31829: ST_TO_ADDR
// end else
31830: GO 31893
// begin d := - 1 ;
31832: LD_ADDR_VAR 0 9
31836: PUSH
31837: LD_INT 1
31839: NEG
31840: ST_TO_ADDR
// if i_from > i_to then
31841: LD_VAR 0 2
31845: PUSH
31846: LD_VAR 0 3
31850: GREATER
31851: IFFALSE 31871
// length := i_from - i_to else
31853: LD_ADDR_VAR 0 11
31857: PUSH
31858: LD_VAR 0 2
31862: PUSH
31863: LD_VAR 0 3
31867: MINUS
31868: ST_TO_ADDR
31869: GO 31893
// length := ( array - i_to ) + i_from ;
31871: LD_ADDR_VAR 0 11
31875: PUSH
31876: LD_VAR 0 1
31880: PUSH
31881: LD_VAR 0 3
31885: MINUS
31886: PUSH
31887: LD_VAR 0 2
31891: PLUS
31892: ST_TO_ADDR
// end ; if not length then
31893: LD_VAR 0 11
31897: NOT
31898: IFFALSE 31902
// exit ;
31900: GO 32060
// tmp := array ;
31902: LD_ADDR_VAR 0 10
31906: PUSH
31907: LD_VAR 0 1
31911: ST_TO_ADDR
// for i = 1 to length do
31912: LD_ADDR_VAR 0 6
31916: PUSH
31917: DOUBLE
31918: LD_INT 1
31920: DEC
31921: ST_TO_ADDR
31922: LD_VAR 0 11
31926: PUSH
31927: FOR_TO
31928: IFFALSE 32048
// begin for j = 1 to array do
31930: LD_ADDR_VAR 0 7
31934: PUSH
31935: DOUBLE
31936: LD_INT 1
31938: DEC
31939: ST_TO_ADDR
31940: LD_VAR 0 1
31944: PUSH
31945: FOR_TO
31946: IFFALSE 32034
// begin k := j + d ;
31948: LD_ADDR_VAR 0 8
31952: PUSH
31953: LD_VAR 0 7
31957: PUSH
31958: LD_VAR 0 9
31962: PLUS
31963: ST_TO_ADDR
// if k > array then
31964: LD_VAR 0 8
31968: PUSH
31969: LD_VAR 0 1
31973: GREATER
31974: IFFALSE 31984
// k := 1 ;
31976: LD_ADDR_VAR 0 8
31980: PUSH
31981: LD_INT 1
31983: ST_TO_ADDR
// if not k then
31984: LD_VAR 0 8
31988: NOT
31989: IFFALSE 32001
// k := array ;
31991: LD_ADDR_VAR 0 8
31995: PUSH
31996: LD_VAR 0 1
32000: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32001: LD_ADDR_VAR 0 10
32005: PUSH
32006: LD_VAR 0 10
32010: PPUSH
32011: LD_VAR 0 8
32015: PPUSH
32016: LD_VAR 0 1
32020: PUSH
32021: LD_VAR 0 7
32025: ARRAY
32026: PPUSH
32027: CALL_OW 1
32031: ST_TO_ADDR
// end ;
32032: GO 31945
32034: POP
32035: POP
// array := tmp ;
32036: LD_ADDR_VAR 0 1
32040: PUSH
32041: LD_VAR 0 10
32045: ST_TO_ADDR
// end ;
32046: GO 31927
32048: POP
32049: POP
// result := array ;
32050: LD_ADDR_VAR 0 5
32054: PUSH
32055: LD_VAR 0 1
32059: ST_TO_ADDR
// end ;
32060: LD_VAR 0 5
32064: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32065: LD_INT 0
32067: PPUSH
32068: PPUSH
// result := 0 ;
32069: LD_ADDR_VAR 0 3
32073: PUSH
32074: LD_INT 0
32076: ST_TO_ADDR
// if not array or not value in array then
32077: LD_VAR 0 1
32081: NOT
32082: PUSH
32083: LD_VAR 0 2
32087: PUSH
32088: LD_VAR 0 1
32092: IN
32093: NOT
32094: OR
32095: IFFALSE 32099
// exit ;
32097: GO 32153
// for i = 1 to array do
32099: LD_ADDR_VAR 0 4
32103: PUSH
32104: DOUBLE
32105: LD_INT 1
32107: DEC
32108: ST_TO_ADDR
32109: LD_VAR 0 1
32113: PUSH
32114: FOR_TO
32115: IFFALSE 32151
// if value = array [ i ] then
32117: LD_VAR 0 2
32121: PUSH
32122: LD_VAR 0 1
32126: PUSH
32127: LD_VAR 0 4
32131: ARRAY
32132: EQUAL
32133: IFFALSE 32149
// begin result := i ;
32135: LD_ADDR_VAR 0 3
32139: PUSH
32140: LD_VAR 0 4
32144: ST_TO_ADDR
// exit ;
32145: POP
32146: POP
32147: GO 32153
// end ;
32149: GO 32114
32151: POP
32152: POP
// end ;
32153: LD_VAR 0 3
32157: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32158: LD_INT 0
32160: PPUSH
// vc_chassis := chassis ;
32161: LD_ADDR_OWVAR 37
32165: PUSH
32166: LD_VAR 0 1
32170: ST_TO_ADDR
// vc_engine := engine ;
32171: LD_ADDR_OWVAR 39
32175: PUSH
32176: LD_VAR 0 2
32180: ST_TO_ADDR
// vc_control := control ;
32181: LD_ADDR_OWVAR 38
32185: PUSH
32186: LD_VAR 0 3
32190: ST_TO_ADDR
// vc_weapon := weapon ;
32191: LD_ADDR_OWVAR 40
32195: PUSH
32196: LD_VAR 0 4
32200: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32201: LD_ADDR_OWVAR 41
32205: PUSH
32206: LD_VAR 0 5
32210: ST_TO_ADDR
// end ;
32211: LD_VAR 0 6
32215: RET
// export function WantPlant ( unit ) ; var task ; begin
32216: LD_INT 0
32218: PPUSH
32219: PPUSH
// result := false ;
32220: LD_ADDR_VAR 0 2
32224: PUSH
32225: LD_INT 0
32227: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32228: LD_ADDR_VAR 0 3
32232: PUSH
32233: LD_VAR 0 1
32237: PPUSH
32238: CALL_OW 437
32242: ST_TO_ADDR
// if task then
32243: LD_VAR 0 3
32247: IFFALSE 32275
// if task [ 1 ] [ 1 ] = p then
32249: LD_VAR 0 3
32253: PUSH
32254: LD_INT 1
32256: ARRAY
32257: PUSH
32258: LD_INT 1
32260: ARRAY
32261: PUSH
32262: LD_STRING p
32264: EQUAL
32265: IFFALSE 32275
// result := true ;
32267: LD_ADDR_VAR 0 2
32271: PUSH
32272: LD_INT 1
32274: ST_TO_ADDR
// end ;
32275: LD_VAR 0 2
32279: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32280: LD_INT 0
32282: PPUSH
32283: PPUSH
32284: PPUSH
32285: PPUSH
// if pos < 1 then
32286: LD_VAR 0 2
32290: PUSH
32291: LD_INT 1
32293: LESS
32294: IFFALSE 32298
// exit ;
32296: GO 32601
// if pos = 1 then
32298: LD_VAR 0 2
32302: PUSH
32303: LD_INT 1
32305: EQUAL
32306: IFFALSE 32339
// result := Replace ( arr , pos [ 1 ] , value ) else
32308: LD_ADDR_VAR 0 4
32312: PUSH
32313: LD_VAR 0 1
32317: PPUSH
32318: LD_VAR 0 2
32322: PUSH
32323: LD_INT 1
32325: ARRAY
32326: PPUSH
32327: LD_VAR 0 3
32331: PPUSH
32332: CALL_OW 1
32336: ST_TO_ADDR
32337: GO 32601
// begin tmp := arr ;
32339: LD_ADDR_VAR 0 6
32343: PUSH
32344: LD_VAR 0 1
32348: ST_TO_ADDR
// s_arr := [ tmp ] ;
32349: LD_ADDR_VAR 0 7
32353: PUSH
32354: LD_VAR 0 6
32358: PUSH
32359: EMPTY
32360: LIST
32361: ST_TO_ADDR
// for i = 1 to pos - 1 do
32362: LD_ADDR_VAR 0 5
32366: PUSH
32367: DOUBLE
32368: LD_INT 1
32370: DEC
32371: ST_TO_ADDR
32372: LD_VAR 0 2
32376: PUSH
32377: LD_INT 1
32379: MINUS
32380: PUSH
32381: FOR_TO
32382: IFFALSE 32427
// begin tmp := tmp [ pos [ i ] ] ;
32384: LD_ADDR_VAR 0 6
32388: PUSH
32389: LD_VAR 0 6
32393: PUSH
32394: LD_VAR 0 2
32398: PUSH
32399: LD_VAR 0 5
32403: ARRAY
32404: ARRAY
32405: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32406: LD_ADDR_VAR 0 7
32410: PUSH
32411: LD_VAR 0 7
32415: PUSH
32416: LD_VAR 0 6
32420: PUSH
32421: EMPTY
32422: LIST
32423: ADD
32424: ST_TO_ADDR
// end ;
32425: GO 32381
32427: POP
32428: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32429: LD_ADDR_VAR 0 6
32433: PUSH
32434: LD_VAR 0 6
32438: PPUSH
32439: LD_VAR 0 2
32443: PUSH
32444: LD_VAR 0 2
32448: ARRAY
32449: PPUSH
32450: LD_VAR 0 3
32454: PPUSH
32455: CALL_OW 1
32459: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32460: LD_ADDR_VAR 0 7
32464: PUSH
32465: LD_VAR 0 7
32469: PPUSH
32470: LD_VAR 0 7
32474: PPUSH
32475: LD_VAR 0 6
32479: PPUSH
32480: CALL_OW 1
32484: ST_TO_ADDR
// for i = s_arr downto 2 do
32485: LD_ADDR_VAR 0 5
32489: PUSH
32490: DOUBLE
32491: LD_VAR 0 7
32495: INC
32496: ST_TO_ADDR
32497: LD_INT 2
32499: PUSH
32500: FOR_DOWNTO
32501: IFFALSE 32585
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32503: LD_ADDR_VAR 0 6
32507: PUSH
32508: LD_VAR 0 7
32512: PUSH
32513: LD_VAR 0 5
32517: PUSH
32518: LD_INT 1
32520: MINUS
32521: ARRAY
32522: PPUSH
32523: LD_VAR 0 2
32527: PUSH
32528: LD_VAR 0 5
32532: PUSH
32533: LD_INT 1
32535: MINUS
32536: ARRAY
32537: PPUSH
32538: LD_VAR 0 7
32542: PUSH
32543: LD_VAR 0 5
32547: ARRAY
32548: PPUSH
32549: CALL_OW 1
32553: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32554: LD_ADDR_VAR 0 7
32558: PUSH
32559: LD_VAR 0 7
32563: PPUSH
32564: LD_VAR 0 5
32568: PUSH
32569: LD_INT 1
32571: MINUS
32572: PPUSH
32573: LD_VAR 0 6
32577: PPUSH
32578: CALL_OW 1
32582: ST_TO_ADDR
// end ;
32583: GO 32500
32585: POP
32586: POP
// result := s_arr [ 1 ] ;
32587: LD_ADDR_VAR 0 4
32591: PUSH
32592: LD_VAR 0 7
32596: PUSH
32597: LD_INT 1
32599: ARRAY
32600: ST_TO_ADDR
// end ; end ;
32601: LD_VAR 0 4
32605: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32606: LD_INT 0
32608: PPUSH
32609: PPUSH
// if not list then
32610: LD_VAR 0 1
32614: NOT
32615: IFFALSE 32619
// exit ;
32617: GO 32710
// i := list [ pos1 ] ;
32619: LD_ADDR_VAR 0 5
32623: PUSH
32624: LD_VAR 0 1
32628: PUSH
32629: LD_VAR 0 2
32633: ARRAY
32634: ST_TO_ADDR
// if not i then
32635: LD_VAR 0 5
32639: NOT
32640: IFFALSE 32644
// exit ;
32642: GO 32710
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32644: LD_ADDR_VAR 0 1
32648: PUSH
32649: LD_VAR 0 1
32653: PPUSH
32654: LD_VAR 0 2
32658: PPUSH
32659: LD_VAR 0 1
32663: PUSH
32664: LD_VAR 0 3
32668: ARRAY
32669: PPUSH
32670: CALL_OW 1
32674: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32675: LD_ADDR_VAR 0 1
32679: PUSH
32680: LD_VAR 0 1
32684: PPUSH
32685: LD_VAR 0 3
32689: PPUSH
32690: LD_VAR 0 5
32694: PPUSH
32695: CALL_OW 1
32699: ST_TO_ADDR
// result := list ;
32700: LD_ADDR_VAR 0 4
32704: PUSH
32705: LD_VAR 0 1
32709: ST_TO_ADDR
// end ;
32710: LD_VAR 0 4
32714: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32715: LD_INT 0
32717: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32718: LD_ADDR_VAR 0 5
32722: PUSH
32723: LD_VAR 0 1
32727: PPUSH
32728: CALL_OW 250
32732: PPUSH
32733: LD_VAR 0 1
32737: PPUSH
32738: CALL_OW 251
32742: PPUSH
32743: LD_VAR 0 2
32747: PPUSH
32748: LD_VAR 0 3
32752: PPUSH
32753: LD_VAR 0 4
32757: PPUSH
32758: CALL 32768 0 5
32762: ST_TO_ADDR
// end ;
32763: LD_VAR 0 5
32767: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32768: LD_INT 0
32770: PPUSH
32771: PPUSH
32772: PPUSH
32773: PPUSH
// if not list then
32774: LD_VAR 0 3
32778: NOT
32779: IFFALSE 32783
// exit ;
32781: GO 33171
// result := [ ] ;
32783: LD_ADDR_VAR 0 6
32787: PUSH
32788: EMPTY
32789: ST_TO_ADDR
// for i in list do
32790: LD_ADDR_VAR 0 7
32794: PUSH
32795: LD_VAR 0 3
32799: PUSH
32800: FOR_IN
32801: IFFALSE 33003
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32803: LD_ADDR_VAR 0 9
32807: PUSH
32808: LD_VAR 0 7
32812: PPUSH
32813: LD_VAR 0 1
32817: PPUSH
32818: LD_VAR 0 2
32822: PPUSH
32823: CALL_OW 297
32827: ST_TO_ADDR
// if not result then
32828: LD_VAR 0 6
32832: NOT
32833: IFFALSE 32859
// result := [ [ i , tmp ] ] else
32835: LD_ADDR_VAR 0 6
32839: PUSH
32840: LD_VAR 0 7
32844: PUSH
32845: LD_VAR 0 9
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: EMPTY
32855: LIST
32856: ST_TO_ADDR
32857: GO 33001
// begin if result [ result ] [ 2 ] < tmp then
32859: LD_VAR 0 6
32863: PUSH
32864: LD_VAR 0 6
32868: ARRAY
32869: PUSH
32870: LD_INT 2
32872: ARRAY
32873: PUSH
32874: LD_VAR 0 9
32878: LESS
32879: IFFALSE 32921
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32881: LD_ADDR_VAR 0 6
32885: PUSH
32886: LD_VAR 0 6
32890: PPUSH
32891: LD_VAR 0 6
32895: PUSH
32896: LD_INT 1
32898: PLUS
32899: PPUSH
32900: LD_VAR 0 7
32904: PUSH
32905: LD_VAR 0 9
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PPUSH
32914: CALL_OW 2
32918: ST_TO_ADDR
32919: GO 33001
// for j = 1 to result do
32921: LD_ADDR_VAR 0 8
32925: PUSH
32926: DOUBLE
32927: LD_INT 1
32929: DEC
32930: ST_TO_ADDR
32931: LD_VAR 0 6
32935: PUSH
32936: FOR_TO
32937: IFFALSE 32999
// begin if tmp < result [ j ] [ 2 ] then
32939: LD_VAR 0 9
32943: PUSH
32944: LD_VAR 0 6
32948: PUSH
32949: LD_VAR 0 8
32953: ARRAY
32954: PUSH
32955: LD_INT 2
32957: ARRAY
32958: LESS
32959: IFFALSE 32997
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32961: LD_ADDR_VAR 0 6
32965: PUSH
32966: LD_VAR 0 6
32970: PPUSH
32971: LD_VAR 0 8
32975: PPUSH
32976: LD_VAR 0 7
32980: PUSH
32981: LD_VAR 0 9
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PPUSH
32990: CALL_OW 2
32994: ST_TO_ADDR
// break ;
32995: GO 32999
// end ; end ;
32997: GO 32936
32999: POP
33000: POP
// end ; end ;
33001: GO 32800
33003: POP
33004: POP
// if result and not asc then
33005: LD_VAR 0 6
33009: PUSH
33010: LD_VAR 0 4
33014: NOT
33015: AND
33016: IFFALSE 33091
// begin tmp := result ;
33018: LD_ADDR_VAR 0 9
33022: PUSH
33023: LD_VAR 0 6
33027: ST_TO_ADDR
// for i = tmp downto 1 do
33028: LD_ADDR_VAR 0 7
33032: PUSH
33033: DOUBLE
33034: LD_VAR 0 9
33038: INC
33039: ST_TO_ADDR
33040: LD_INT 1
33042: PUSH
33043: FOR_DOWNTO
33044: IFFALSE 33089
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33046: LD_ADDR_VAR 0 6
33050: PUSH
33051: LD_VAR 0 6
33055: PPUSH
33056: LD_VAR 0 9
33060: PUSH
33061: LD_VAR 0 7
33065: MINUS
33066: PUSH
33067: LD_INT 1
33069: PLUS
33070: PPUSH
33071: LD_VAR 0 9
33075: PUSH
33076: LD_VAR 0 7
33080: ARRAY
33081: PPUSH
33082: CALL_OW 1
33086: ST_TO_ADDR
33087: GO 33043
33089: POP
33090: POP
// end ; tmp := [ ] ;
33091: LD_ADDR_VAR 0 9
33095: PUSH
33096: EMPTY
33097: ST_TO_ADDR
// if mode then
33098: LD_VAR 0 5
33102: IFFALSE 33171
// begin for i = 1 to result do
33104: LD_ADDR_VAR 0 7
33108: PUSH
33109: DOUBLE
33110: LD_INT 1
33112: DEC
33113: ST_TO_ADDR
33114: LD_VAR 0 6
33118: PUSH
33119: FOR_TO
33120: IFFALSE 33159
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33122: LD_ADDR_VAR 0 9
33126: PUSH
33127: LD_VAR 0 9
33131: PPUSH
33132: LD_VAR 0 7
33136: PPUSH
33137: LD_VAR 0 6
33141: PUSH
33142: LD_VAR 0 7
33146: ARRAY
33147: PUSH
33148: LD_INT 1
33150: ARRAY
33151: PPUSH
33152: CALL_OW 1
33156: ST_TO_ADDR
33157: GO 33119
33159: POP
33160: POP
// result := tmp ;
33161: LD_ADDR_VAR 0 6
33165: PUSH
33166: LD_VAR 0 9
33170: ST_TO_ADDR
// end ; end ;
33171: LD_VAR 0 6
33175: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33176: LD_INT 0
33178: PPUSH
33179: PPUSH
33180: PPUSH
33181: PPUSH
33182: PPUSH
33183: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33184: LD_ADDR_VAR 0 5
33188: PUSH
33189: LD_INT 0
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: EMPTY
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: ST_TO_ADDR
// if not x or not y then
33206: LD_VAR 0 2
33210: NOT
33211: PUSH
33212: LD_VAR 0 3
33216: NOT
33217: OR
33218: IFFALSE 33222
// exit ;
33220: GO 34872
// if not range then
33222: LD_VAR 0 4
33226: NOT
33227: IFFALSE 33237
// range := 10 ;
33229: LD_ADDR_VAR 0 4
33233: PUSH
33234: LD_INT 10
33236: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33237: LD_ADDR_VAR 0 8
33241: PUSH
33242: LD_INT 81
33244: PUSH
33245: LD_VAR 0 1
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 92
33256: PUSH
33257: LD_VAR 0 2
33261: PUSH
33262: LD_VAR 0 3
33266: PUSH
33267: LD_VAR 0 4
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 3
33280: PUSH
33281: LD_INT 21
33283: PUSH
33284: LD_INT 3
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: LIST
33299: PPUSH
33300: CALL_OW 69
33304: ST_TO_ADDR
// if not tmp then
33305: LD_VAR 0 8
33309: NOT
33310: IFFALSE 33314
// exit ;
33312: GO 34872
// for i in tmp do
33314: LD_ADDR_VAR 0 6
33318: PUSH
33319: LD_VAR 0 8
33323: PUSH
33324: FOR_IN
33325: IFFALSE 34847
// begin points := [ 0 , 0 , 0 ] ;
33327: LD_ADDR_VAR 0 9
33331: PUSH
33332: LD_INT 0
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: LIST
33345: ST_TO_ADDR
// bpoints := 1 ;
33346: LD_ADDR_VAR 0 10
33350: PUSH
33351: LD_INT 1
33353: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33354: LD_VAR 0 6
33358: PPUSH
33359: CALL_OW 247
33363: PUSH
33364: LD_INT 1
33366: DOUBLE
33367: EQUAL
33368: IFTRUE 33372
33370: GO 33950
33372: POP
// begin if GetClass ( i ) = 1 then
33373: LD_VAR 0 6
33377: PPUSH
33378: CALL_OW 257
33382: PUSH
33383: LD_INT 1
33385: EQUAL
33386: IFFALSE 33407
// points := [ 10 , 5 , 3 ] ;
33388: LD_ADDR_VAR 0 9
33392: PUSH
33393: LD_INT 10
33395: PUSH
33396: LD_INT 5
33398: PUSH
33399: LD_INT 3
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: LIST
33406: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33407: LD_VAR 0 6
33411: PPUSH
33412: CALL_OW 257
33416: PUSH
33417: LD_INT 2
33419: PUSH
33420: LD_INT 3
33422: PUSH
33423: LD_INT 4
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: LIST
33430: IN
33431: IFFALSE 33452
// points := [ 3 , 2 , 1 ] ;
33433: LD_ADDR_VAR 0 9
33437: PUSH
33438: LD_INT 3
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: LIST
33451: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33452: LD_VAR 0 6
33456: PPUSH
33457: CALL_OW 257
33461: PUSH
33462: LD_INT 5
33464: EQUAL
33465: IFFALSE 33486
// points := [ 130 , 5 , 2 ] ;
33467: LD_ADDR_VAR 0 9
33471: PUSH
33472: LD_INT 130
33474: PUSH
33475: LD_INT 5
33477: PUSH
33478: LD_INT 2
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: LIST
33485: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33486: LD_VAR 0 6
33490: PPUSH
33491: CALL_OW 257
33495: PUSH
33496: LD_INT 8
33498: EQUAL
33499: IFFALSE 33520
// points := [ 35 , 35 , 30 ] ;
33501: LD_ADDR_VAR 0 9
33505: PUSH
33506: LD_INT 35
33508: PUSH
33509: LD_INT 35
33511: PUSH
33512: LD_INT 30
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: LIST
33519: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33520: LD_VAR 0 6
33524: PPUSH
33525: CALL_OW 257
33529: PUSH
33530: LD_INT 9
33532: EQUAL
33533: IFFALSE 33554
// points := [ 20 , 55 , 40 ] ;
33535: LD_ADDR_VAR 0 9
33539: PUSH
33540: LD_INT 20
33542: PUSH
33543: LD_INT 55
33545: PUSH
33546: LD_INT 40
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33554: LD_VAR 0 6
33558: PPUSH
33559: CALL_OW 257
33563: PUSH
33564: LD_INT 12
33566: PUSH
33567: LD_INT 16
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: IN
33574: IFFALSE 33595
// points := [ 5 , 3 , 2 ] ;
33576: LD_ADDR_VAR 0 9
33580: PUSH
33581: LD_INT 5
33583: PUSH
33584: LD_INT 3
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: LIST
33594: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33595: LD_VAR 0 6
33599: PPUSH
33600: CALL_OW 257
33604: PUSH
33605: LD_INT 17
33607: EQUAL
33608: IFFALSE 33629
// points := [ 100 , 50 , 75 ] ;
33610: LD_ADDR_VAR 0 9
33614: PUSH
33615: LD_INT 100
33617: PUSH
33618: LD_INT 50
33620: PUSH
33621: LD_INT 75
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: LIST
33628: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33629: LD_VAR 0 6
33633: PPUSH
33634: CALL_OW 257
33638: PUSH
33639: LD_INT 15
33641: EQUAL
33642: IFFALSE 33663
// points := [ 10 , 5 , 3 ] ;
33644: LD_ADDR_VAR 0 9
33648: PUSH
33649: LD_INT 10
33651: PUSH
33652: LD_INT 5
33654: PUSH
33655: LD_INT 3
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: LIST
33662: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33663: LD_VAR 0 6
33667: PPUSH
33668: CALL_OW 257
33672: PUSH
33673: LD_INT 14
33675: EQUAL
33676: IFFALSE 33697
// points := [ 10 , 0 , 0 ] ;
33678: LD_ADDR_VAR 0 9
33682: PUSH
33683: LD_INT 10
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33697: LD_VAR 0 6
33701: PPUSH
33702: CALL_OW 257
33706: PUSH
33707: LD_INT 11
33709: EQUAL
33710: IFFALSE 33731
// points := [ 30 , 10 , 5 ] ;
33712: LD_ADDR_VAR 0 9
33716: PUSH
33717: LD_INT 30
33719: PUSH
33720: LD_INT 10
33722: PUSH
33723: LD_INT 5
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: LIST
33730: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33731: LD_VAR 0 1
33735: PPUSH
33736: LD_INT 5
33738: PPUSH
33739: CALL_OW 321
33743: PUSH
33744: LD_INT 2
33746: EQUAL
33747: IFFALSE 33764
// bpoints := bpoints * 1.8 ;
33749: LD_ADDR_VAR 0 10
33753: PUSH
33754: LD_VAR 0 10
33758: PUSH
33759: LD_REAL  1.80000000000000E+0000
33762: MUL
33763: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33764: LD_VAR 0 6
33768: PPUSH
33769: CALL_OW 257
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: LD_INT 3
33782: PUSH
33783: LD_INT 4
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: IN
33792: PUSH
33793: LD_VAR 0 1
33797: PPUSH
33798: LD_INT 51
33800: PPUSH
33801: CALL_OW 321
33805: PUSH
33806: LD_INT 2
33808: EQUAL
33809: AND
33810: IFFALSE 33827
// bpoints := bpoints * 1.2 ;
33812: LD_ADDR_VAR 0 10
33816: PUSH
33817: LD_VAR 0 10
33821: PUSH
33822: LD_REAL  1.20000000000000E+0000
33825: MUL
33826: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33827: LD_VAR 0 6
33831: PPUSH
33832: CALL_OW 257
33836: PUSH
33837: LD_INT 5
33839: PUSH
33840: LD_INT 7
33842: PUSH
33843: LD_INT 9
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: IN
33851: PUSH
33852: LD_VAR 0 1
33856: PPUSH
33857: LD_INT 52
33859: PPUSH
33860: CALL_OW 321
33864: PUSH
33865: LD_INT 2
33867: EQUAL
33868: AND
33869: IFFALSE 33886
// bpoints := bpoints * 1.5 ;
33871: LD_ADDR_VAR 0 10
33875: PUSH
33876: LD_VAR 0 10
33880: PUSH
33881: LD_REAL  1.50000000000000E+0000
33884: MUL
33885: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33886: LD_VAR 0 1
33890: PPUSH
33891: LD_INT 66
33893: PPUSH
33894: CALL_OW 321
33898: PUSH
33899: LD_INT 2
33901: EQUAL
33902: IFFALSE 33919
// bpoints := bpoints * 1.1 ;
33904: LD_ADDR_VAR 0 10
33908: PUSH
33909: LD_VAR 0 10
33913: PUSH
33914: LD_REAL  1.10000000000000E+0000
33917: MUL
33918: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33919: LD_ADDR_VAR 0 10
33923: PUSH
33924: LD_VAR 0 10
33928: PUSH
33929: LD_VAR 0 6
33933: PPUSH
33934: LD_INT 1
33936: PPUSH
33937: CALL_OW 259
33941: PUSH
33942: LD_REAL  1.15000000000000E+0000
33945: MUL
33946: MUL
33947: ST_TO_ADDR
// end ; unit_vehicle :
33948: GO 34776
33950: LD_INT 2
33952: DOUBLE
33953: EQUAL
33954: IFTRUE 33958
33956: GO 34764
33958: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33959: LD_VAR 0 6
33963: PPUSH
33964: CALL_OW 264
33968: PUSH
33969: LD_INT 2
33971: PUSH
33972: LD_INT 42
33974: PUSH
33975: LD_INT 24
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: LIST
33982: IN
33983: IFFALSE 34004
// points := [ 25 , 5 , 3 ] ;
33985: LD_ADDR_VAR 0 9
33989: PUSH
33990: LD_INT 25
33992: PUSH
33993: LD_INT 5
33995: PUSH
33996: LD_INT 3
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34004: LD_VAR 0 6
34008: PPUSH
34009: CALL_OW 264
34013: PUSH
34014: LD_INT 4
34016: PUSH
34017: LD_INT 43
34019: PUSH
34020: LD_INT 25
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: LIST
34027: IN
34028: IFFALSE 34049
// points := [ 40 , 15 , 5 ] ;
34030: LD_ADDR_VAR 0 9
34034: PUSH
34035: LD_INT 40
34037: PUSH
34038: LD_INT 15
34040: PUSH
34041: LD_INT 5
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: LIST
34048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34049: LD_VAR 0 6
34053: PPUSH
34054: CALL_OW 264
34058: PUSH
34059: LD_INT 3
34061: PUSH
34062: LD_INT 23
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: IN
34069: IFFALSE 34090
// points := [ 7 , 25 , 8 ] ;
34071: LD_ADDR_VAR 0 9
34075: PUSH
34076: LD_INT 7
34078: PUSH
34079: LD_INT 25
34081: PUSH
34082: LD_INT 8
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34090: LD_VAR 0 6
34094: PPUSH
34095: CALL_OW 264
34099: PUSH
34100: LD_INT 5
34102: PUSH
34103: LD_INT 27
34105: PUSH
34106: LD_INT 44
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: LIST
34113: IN
34114: IFFALSE 34135
// points := [ 14 , 50 , 16 ] ;
34116: LD_ADDR_VAR 0 9
34120: PUSH
34121: LD_INT 14
34123: PUSH
34124: LD_INT 50
34126: PUSH
34127: LD_INT 16
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: LIST
34134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34135: LD_VAR 0 6
34139: PPUSH
34140: CALL_OW 264
34144: PUSH
34145: LD_INT 6
34147: PUSH
34148: LD_INT 46
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: IN
34155: IFFALSE 34176
// points := [ 32 , 120 , 70 ] ;
34157: LD_ADDR_VAR 0 9
34161: PUSH
34162: LD_INT 32
34164: PUSH
34165: LD_INT 120
34167: PUSH
34168: LD_INT 70
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: LIST
34175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34176: LD_VAR 0 6
34180: PPUSH
34181: CALL_OW 264
34185: PUSH
34186: LD_INT 7
34188: PUSH
34189: LD_INT 28
34191: PUSH
34192: LD_INT 45
34194: PUSH
34195: LD_INT 92
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: IN
34204: IFFALSE 34225
// points := [ 35 , 20 , 45 ] ;
34206: LD_ADDR_VAR 0 9
34210: PUSH
34211: LD_INT 35
34213: PUSH
34214: LD_INT 20
34216: PUSH
34217: LD_INT 45
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: LIST
34224: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34225: LD_VAR 0 6
34229: PPUSH
34230: CALL_OW 264
34234: PUSH
34235: LD_INT 47
34237: PUSH
34238: EMPTY
34239: LIST
34240: IN
34241: IFFALSE 34262
// points := [ 67 , 45 , 75 ] ;
34243: LD_ADDR_VAR 0 9
34247: PUSH
34248: LD_INT 67
34250: PUSH
34251: LD_INT 45
34253: PUSH
34254: LD_INT 75
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34262: LD_VAR 0 6
34266: PPUSH
34267: CALL_OW 264
34271: PUSH
34272: LD_INT 26
34274: PUSH
34275: EMPTY
34276: LIST
34277: IN
34278: IFFALSE 34299
// points := [ 120 , 30 , 80 ] ;
34280: LD_ADDR_VAR 0 9
34284: PUSH
34285: LD_INT 120
34287: PUSH
34288: LD_INT 30
34290: PUSH
34291: LD_INT 80
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: LIST
34298: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34299: LD_VAR 0 6
34303: PPUSH
34304: CALL_OW 264
34308: PUSH
34309: LD_INT 22
34311: PUSH
34312: EMPTY
34313: LIST
34314: IN
34315: IFFALSE 34336
// points := [ 40 , 1 , 1 ] ;
34317: LD_ADDR_VAR 0 9
34321: PUSH
34322: LD_INT 40
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: LIST
34335: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34336: LD_VAR 0 6
34340: PPUSH
34341: CALL_OW 264
34345: PUSH
34346: LD_INT 29
34348: PUSH
34349: EMPTY
34350: LIST
34351: IN
34352: IFFALSE 34373
// points := [ 70 , 200 , 400 ] ;
34354: LD_ADDR_VAR 0 9
34358: PUSH
34359: LD_INT 70
34361: PUSH
34362: LD_INT 200
34364: PUSH
34365: LD_INT 400
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: LIST
34372: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34373: LD_VAR 0 6
34377: PPUSH
34378: CALL_OW 264
34382: PUSH
34383: LD_INT 14
34385: PUSH
34386: LD_INT 53
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: IN
34393: IFFALSE 34414
// points := [ 40 , 10 , 20 ] ;
34395: LD_ADDR_VAR 0 9
34399: PUSH
34400: LD_INT 40
34402: PUSH
34403: LD_INT 10
34405: PUSH
34406: LD_INT 20
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: LIST
34413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34414: LD_VAR 0 6
34418: PPUSH
34419: CALL_OW 264
34423: PUSH
34424: LD_INT 9
34426: PUSH
34427: EMPTY
34428: LIST
34429: IN
34430: IFFALSE 34451
// points := [ 5 , 70 , 20 ] ;
34432: LD_ADDR_VAR 0 9
34436: PUSH
34437: LD_INT 5
34439: PUSH
34440: LD_INT 70
34442: PUSH
34443: LD_INT 20
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: LIST
34450: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34451: LD_VAR 0 6
34455: PPUSH
34456: CALL_OW 264
34460: PUSH
34461: LD_INT 10
34463: PUSH
34464: EMPTY
34465: LIST
34466: IN
34467: IFFALSE 34488
// points := [ 35 , 110 , 70 ] ;
34469: LD_ADDR_VAR 0 9
34473: PUSH
34474: LD_INT 35
34476: PUSH
34477: LD_INT 110
34479: PUSH
34480: LD_INT 70
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34488: LD_VAR 0 6
34492: PPUSH
34493: CALL_OW 265
34497: PUSH
34498: LD_INT 25
34500: EQUAL
34501: IFFALSE 34522
// points := [ 80 , 65 , 100 ] ;
34503: LD_ADDR_VAR 0 9
34507: PUSH
34508: LD_INT 80
34510: PUSH
34511: LD_INT 65
34513: PUSH
34514: LD_INT 100
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: LIST
34521: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34522: LD_VAR 0 6
34526: PPUSH
34527: CALL_OW 263
34531: PUSH
34532: LD_INT 1
34534: EQUAL
34535: IFFALSE 34570
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34537: LD_ADDR_VAR 0 10
34541: PUSH
34542: LD_VAR 0 10
34546: PUSH
34547: LD_VAR 0 6
34551: PPUSH
34552: CALL_OW 311
34556: PPUSH
34557: LD_INT 3
34559: PPUSH
34560: CALL_OW 259
34564: PUSH
34565: LD_INT 4
34567: MUL
34568: MUL
34569: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34570: LD_VAR 0 6
34574: PPUSH
34575: CALL_OW 263
34579: PUSH
34580: LD_INT 2
34582: EQUAL
34583: IFFALSE 34634
// begin j := IsControledBy ( i ) ;
34585: LD_ADDR_VAR 0 7
34589: PUSH
34590: LD_VAR 0 6
34594: PPUSH
34595: CALL_OW 312
34599: ST_TO_ADDR
// if j then
34600: LD_VAR 0 7
34604: IFFALSE 34634
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34606: LD_ADDR_VAR 0 10
34610: PUSH
34611: LD_VAR 0 10
34615: PUSH
34616: LD_VAR 0 7
34620: PPUSH
34621: LD_INT 3
34623: PPUSH
34624: CALL_OW 259
34628: PUSH
34629: LD_INT 3
34631: MUL
34632: MUL
34633: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34634: LD_VAR 0 6
34638: PPUSH
34639: CALL_OW 264
34643: PUSH
34644: LD_INT 5
34646: PUSH
34647: LD_INT 6
34649: PUSH
34650: LD_INT 46
34652: PUSH
34653: LD_INT 44
34655: PUSH
34656: LD_INT 47
34658: PUSH
34659: LD_INT 45
34661: PUSH
34662: LD_INT 28
34664: PUSH
34665: LD_INT 7
34667: PUSH
34668: LD_INT 27
34670: PUSH
34671: LD_INT 29
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: IN
34686: PUSH
34687: LD_VAR 0 1
34691: PPUSH
34692: LD_INT 52
34694: PPUSH
34695: CALL_OW 321
34699: PUSH
34700: LD_INT 2
34702: EQUAL
34703: AND
34704: IFFALSE 34721
// bpoints := bpoints * 1.2 ;
34706: LD_ADDR_VAR 0 10
34710: PUSH
34711: LD_VAR 0 10
34715: PUSH
34716: LD_REAL  1.20000000000000E+0000
34719: MUL
34720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34721: LD_VAR 0 6
34725: PPUSH
34726: CALL_OW 264
34730: PUSH
34731: LD_INT 6
34733: PUSH
34734: LD_INT 46
34736: PUSH
34737: LD_INT 47
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: LIST
34744: IN
34745: IFFALSE 34762
// bpoints := bpoints * 1.2 ;
34747: LD_ADDR_VAR 0 10
34751: PUSH
34752: LD_VAR 0 10
34756: PUSH
34757: LD_REAL  1.20000000000000E+0000
34760: MUL
34761: ST_TO_ADDR
// end ; unit_building :
34762: GO 34776
34764: LD_INT 3
34766: DOUBLE
34767: EQUAL
34768: IFTRUE 34772
34770: GO 34775
34772: POP
// ; end ;
34773: GO 34776
34775: POP
// for j = 1 to 3 do
34776: LD_ADDR_VAR 0 7
34780: PUSH
34781: DOUBLE
34782: LD_INT 1
34784: DEC
34785: ST_TO_ADDR
34786: LD_INT 3
34788: PUSH
34789: FOR_TO
34790: IFFALSE 34843
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34792: LD_ADDR_VAR 0 5
34796: PUSH
34797: LD_VAR 0 5
34801: PPUSH
34802: LD_VAR 0 7
34806: PPUSH
34807: LD_VAR 0 5
34811: PUSH
34812: LD_VAR 0 7
34816: ARRAY
34817: PUSH
34818: LD_VAR 0 9
34822: PUSH
34823: LD_VAR 0 7
34827: ARRAY
34828: PUSH
34829: LD_VAR 0 10
34833: MUL
34834: PLUS
34835: PPUSH
34836: CALL_OW 1
34840: ST_TO_ADDR
34841: GO 34789
34843: POP
34844: POP
// end ;
34845: GO 33324
34847: POP
34848: POP
// result := Replace ( result , 4 , tmp ) ;
34849: LD_ADDR_VAR 0 5
34853: PUSH
34854: LD_VAR 0 5
34858: PPUSH
34859: LD_INT 4
34861: PPUSH
34862: LD_VAR 0 8
34866: PPUSH
34867: CALL_OW 1
34871: ST_TO_ADDR
// end ;
34872: LD_VAR 0 5
34876: RET
// export function DangerAtRange ( unit , range ) ; begin
34877: LD_INT 0
34879: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34880: LD_ADDR_VAR 0 3
34884: PUSH
34885: LD_VAR 0 1
34889: PPUSH
34890: CALL_OW 255
34894: PPUSH
34895: LD_VAR 0 1
34899: PPUSH
34900: CALL_OW 250
34904: PPUSH
34905: LD_VAR 0 1
34909: PPUSH
34910: CALL_OW 251
34914: PPUSH
34915: LD_VAR 0 2
34919: PPUSH
34920: CALL 33176 0 4
34924: ST_TO_ADDR
// end ;
34925: LD_VAR 0 3
34929: RET
// export function DangerInArea ( side , area ) ; begin
34930: LD_INT 0
34932: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34933: LD_ADDR_VAR 0 3
34937: PUSH
34938: LD_VAR 0 2
34942: PPUSH
34943: LD_INT 81
34945: PUSH
34946: LD_VAR 0 1
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PPUSH
34955: CALL_OW 70
34959: ST_TO_ADDR
// end ;
34960: LD_VAR 0 3
34964: RET
// export function IsExtension ( b ) ; begin
34965: LD_INT 0
34967: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34968: LD_ADDR_VAR 0 2
34972: PUSH
34973: LD_VAR 0 1
34977: PUSH
34978: LD_INT 23
34980: PUSH
34981: LD_INT 20
34983: PUSH
34984: LD_INT 22
34986: PUSH
34987: LD_INT 17
34989: PUSH
34990: LD_INT 24
34992: PUSH
34993: LD_INT 21
34995: PUSH
34996: LD_INT 19
34998: PUSH
34999: LD_INT 16
35001: PUSH
35002: LD_INT 25
35004: PUSH
35005: LD_INT 18
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: IN
35020: ST_TO_ADDR
// end ;
35021: LD_VAR 0 2
35025: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35026: LD_INT 0
35028: PPUSH
35029: PPUSH
35030: PPUSH
// result := [ ] ;
35031: LD_ADDR_VAR 0 4
35035: PUSH
35036: EMPTY
35037: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35038: LD_ADDR_VAR 0 5
35042: PUSH
35043: LD_VAR 0 2
35047: PPUSH
35048: LD_INT 21
35050: PUSH
35051: LD_INT 3
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PPUSH
35058: CALL_OW 70
35062: ST_TO_ADDR
// if not tmp then
35063: LD_VAR 0 5
35067: NOT
35068: IFFALSE 35072
// exit ;
35070: GO 35136
// if checkLink then
35072: LD_VAR 0 3
35076: IFFALSE 35126
// begin for i in tmp do
35078: LD_ADDR_VAR 0 6
35082: PUSH
35083: LD_VAR 0 5
35087: PUSH
35088: FOR_IN
35089: IFFALSE 35124
// if GetBase ( i ) <> base then
35091: LD_VAR 0 6
35095: PPUSH
35096: CALL_OW 274
35100: PUSH
35101: LD_VAR 0 1
35105: NONEQUAL
35106: IFFALSE 35122
// ComLinkToBase ( base , i ) ;
35108: LD_VAR 0 1
35112: PPUSH
35113: LD_VAR 0 6
35117: PPUSH
35118: CALL_OW 169
35122: GO 35088
35124: POP
35125: POP
// end ; result := tmp ;
35126: LD_ADDR_VAR 0 4
35130: PUSH
35131: LD_VAR 0 5
35135: ST_TO_ADDR
// end ;
35136: LD_VAR 0 4
35140: RET
// export function ComComplete ( units , b ) ; var i ; begin
35141: LD_INT 0
35143: PPUSH
35144: PPUSH
// if not units then
35145: LD_VAR 0 1
35149: NOT
35150: IFFALSE 35154
// exit ;
35152: GO 35244
// for i in units do
35154: LD_ADDR_VAR 0 4
35158: PUSH
35159: LD_VAR 0 1
35163: PUSH
35164: FOR_IN
35165: IFFALSE 35242
// if BuildingStatus ( b ) = bs_build then
35167: LD_VAR 0 2
35171: PPUSH
35172: CALL_OW 461
35176: PUSH
35177: LD_INT 1
35179: EQUAL
35180: IFFALSE 35240
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35182: LD_VAR 0 4
35186: PPUSH
35187: LD_STRING h
35189: PUSH
35190: LD_VAR 0 2
35194: PPUSH
35195: CALL_OW 250
35199: PUSH
35200: LD_VAR 0 2
35204: PPUSH
35205: CALL_OW 251
35209: PUSH
35210: LD_VAR 0 2
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: LD_INT 0
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: PUSH
35233: EMPTY
35234: LIST
35235: PPUSH
35236: CALL_OW 446
35240: GO 35164
35242: POP
35243: POP
// end ;
35244: LD_VAR 0 3
35248: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35249: LD_INT 0
35251: PPUSH
35252: PPUSH
35253: PPUSH
35254: PPUSH
35255: PPUSH
35256: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35257: LD_VAR 0 1
35261: NOT
35262: PUSH
35263: LD_VAR 0 1
35267: PPUSH
35268: CALL_OW 263
35272: PUSH
35273: LD_INT 2
35275: NONEQUAL
35276: OR
35277: IFFALSE 35281
// exit ;
35279: GO 35597
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35281: LD_ADDR_VAR 0 6
35285: PUSH
35286: LD_INT 22
35288: PUSH
35289: LD_VAR 0 1
35293: PPUSH
35294: CALL_OW 255
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 2
35305: PUSH
35306: LD_INT 30
35308: PUSH
35309: LD_INT 36
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 34
35318: PUSH
35319: LD_INT 31
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: LIST
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PPUSH
35335: CALL_OW 69
35339: ST_TO_ADDR
// if not tmp then
35340: LD_VAR 0 6
35344: NOT
35345: IFFALSE 35349
// exit ;
35347: GO 35597
// result := [ ] ;
35349: LD_ADDR_VAR 0 2
35353: PUSH
35354: EMPTY
35355: ST_TO_ADDR
// for i in tmp do
35356: LD_ADDR_VAR 0 3
35360: PUSH
35361: LD_VAR 0 6
35365: PUSH
35366: FOR_IN
35367: IFFALSE 35438
// begin t := UnitsInside ( i ) ;
35369: LD_ADDR_VAR 0 4
35373: PUSH
35374: LD_VAR 0 3
35378: PPUSH
35379: CALL_OW 313
35383: ST_TO_ADDR
// if t then
35384: LD_VAR 0 4
35388: IFFALSE 35436
// for j in t do
35390: LD_ADDR_VAR 0 7
35394: PUSH
35395: LD_VAR 0 4
35399: PUSH
35400: FOR_IN
35401: IFFALSE 35434
// result := Replace ( result , result + 1 , j ) ;
35403: LD_ADDR_VAR 0 2
35407: PUSH
35408: LD_VAR 0 2
35412: PPUSH
35413: LD_VAR 0 2
35417: PUSH
35418: LD_INT 1
35420: PLUS
35421: PPUSH
35422: LD_VAR 0 7
35426: PPUSH
35427: CALL_OW 1
35431: ST_TO_ADDR
35432: GO 35400
35434: POP
35435: POP
// end ;
35436: GO 35366
35438: POP
35439: POP
// if not result then
35440: LD_VAR 0 2
35444: NOT
35445: IFFALSE 35449
// exit ;
35447: GO 35597
// mech := result [ 1 ] ;
35449: LD_ADDR_VAR 0 5
35453: PUSH
35454: LD_VAR 0 2
35458: PUSH
35459: LD_INT 1
35461: ARRAY
35462: ST_TO_ADDR
// if result > 1 then
35463: LD_VAR 0 2
35467: PUSH
35468: LD_INT 1
35470: GREATER
35471: IFFALSE 35583
// begin for i = 2 to result do
35473: LD_ADDR_VAR 0 3
35477: PUSH
35478: DOUBLE
35479: LD_INT 2
35481: DEC
35482: ST_TO_ADDR
35483: LD_VAR 0 2
35487: PUSH
35488: FOR_TO
35489: IFFALSE 35581
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35491: LD_ADDR_VAR 0 4
35495: PUSH
35496: LD_VAR 0 2
35500: PUSH
35501: LD_VAR 0 3
35505: ARRAY
35506: PPUSH
35507: LD_INT 3
35509: PPUSH
35510: CALL_OW 259
35514: PUSH
35515: LD_VAR 0 2
35519: PUSH
35520: LD_VAR 0 3
35524: ARRAY
35525: PPUSH
35526: CALL_OW 432
35530: MINUS
35531: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35532: LD_VAR 0 4
35536: PUSH
35537: LD_VAR 0 5
35541: PPUSH
35542: LD_INT 3
35544: PPUSH
35545: CALL_OW 259
35549: PUSH
35550: LD_VAR 0 5
35554: PPUSH
35555: CALL_OW 432
35559: MINUS
35560: GREATEREQUAL
35561: IFFALSE 35579
// mech := result [ i ] ;
35563: LD_ADDR_VAR 0 5
35567: PUSH
35568: LD_VAR 0 2
35572: PUSH
35573: LD_VAR 0 3
35577: ARRAY
35578: ST_TO_ADDR
// end ;
35579: GO 35488
35581: POP
35582: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35583: LD_VAR 0 1
35587: PPUSH
35588: LD_VAR 0 5
35592: PPUSH
35593: CALL_OW 135
// end ;
35597: LD_VAR 0 2
35601: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35602: LD_INT 0
35604: PPUSH
35605: PPUSH
35606: PPUSH
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
35611: PPUSH
35612: PPUSH
35613: PPUSH
35614: PPUSH
35615: PPUSH
35616: PPUSH
// result := [ ] ;
35617: LD_ADDR_VAR 0 7
35621: PUSH
35622: EMPTY
35623: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35624: LD_VAR 0 1
35628: PPUSH
35629: CALL_OW 266
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: IN
35644: NOT
35645: IFFALSE 35649
// exit ;
35647: GO 37283
// if name then
35649: LD_VAR 0 3
35653: IFFALSE 35669
// SetBName ( base_dep , name ) ;
35655: LD_VAR 0 1
35659: PPUSH
35660: LD_VAR 0 3
35664: PPUSH
35665: CALL_OW 500
// base := GetBase ( base_dep ) ;
35669: LD_ADDR_VAR 0 15
35673: PUSH
35674: LD_VAR 0 1
35678: PPUSH
35679: CALL_OW 274
35683: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35684: LD_ADDR_VAR 0 16
35688: PUSH
35689: LD_VAR 0 1
35693: PPUSH
35694: CALL_OW 255
35698: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35699: LD_ADDR_VAR 0 17
35703: PUSH
35704: LD_VAR 0 1
35708: PPUSH
35709: CALL_OW 248
35713: ST_TO_ADDR
// if sources then
35714: LD_VAR 0 5
35718: IFFALSE 35765
// for i = 1 to 3 do
35720: LD_ADDR_VAR 0 8
35724: PUSH
35725: DOUBLE
35726: LD_INT 1
35728: DEC
35729: ST_TO_ADDR
35730: LD_INT 3
35732: PUSH
35733: FOR_TO
35734: IFFALSE 35763
// AddResourceType ( base , i , sources [ i ] ) ;
35736: LD_VAR 0 15
35740: PPUSH
35741: LD_VAR 0 8
35745: PPUSH
35746: LD_VAR 0 5
35750: PUSH
35751: LD_VAR 0 8
35755: ARRAY
35756: PPUSH
35757: CALL_OW 276
35761: GO 35733
35763: POP
35764: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35765: LD_ADDR_VAR 0 18
35769: PUSH
35770: LD_VAR 0 15
35774: PPUSH
35775: LD_VAR 0 2
35779: PPUSH
35780: LD_INT 1
35782: PPUSH
35783: CALL 35026 0 3
35787: ST_TO_ADDR
// InitHc ;
35788: CALL_OW 19
// InitUc ;
35792: CALL_OW 18
// uc_side := side ;
35796: LD_ADDR_OWVAR 20
35800: PUSH
35801: LD_VAR 0 16
35805: ST_TO_ADDR
// uc_nation := nation ;
35806: LD_ADDR_OWVAR 21
35810: PUSH
35811: LD_VAR 0 17
35815: ST_TO_ADDR
// if buildings then
35816: LD_VAR 0 18
35820: IFFALSE 37142
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35822: LD_ADDR_VAR 0 19
35826: PUSH
35827: LD_VAR 0 18
35831: PPUSH
35832: LD_INT 2
35834: PUSH
35835: LD_INT 30
35837: PUSH
35838: LD_INT 29
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 30
35847: PUSH
35848: LD_INT 30
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: PPUSH
35860: CALL_OW 72
35864: ST_TO_ADDR
// if tmp then
35865: LD_VAR 0 19
35869: IFFALSE 35917
// for i in tmp do
35871: LD_ADDR_VAR 0 8
35875: PUSH
35876: LD_VAR 0 19
35880: PUSH
35881: FOR_IN
35882: IFFALSE 35915
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35884: LD_VAR 0 8
35888: PPUSH
35889: CALL_OW 250
35893: PPUSH
35894: LD_VAR 0 8
35898: PPUSH
35899: CALL_OW 251
35903: PPUSH
35904: LD_VAR 0 16
35908: PPUSH
35909: CALL_OW 441
35913: GO 35881
35915: POP
35916: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35917: LD_VAR 0 18
35921: PPUSH
35922: LD_INT 2
35924: PUSH
35925: LD_INT 30
35927: PUSH
35928: LD_INT 32
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 30
35937: PUSH
35938: LD_INT 33
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: PPUSH
35950: CALL_OW 72
35954: IFFALSE 36042
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35956: LD_ADDR_VAR 0 8
35960: PUSH
35961: LD_VAR 0 18
35965: PPUSH
35966: LD_INT 2
35968: PUSH
35969: LD_INT 30
35971: PUSH
35972: LD_INT 32
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 30
35981: PUSH
35982: LD_INT 33
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: PPUSH
35994: CALL_OW 72
35998: PUSH
35999: FOR_IN
36000: IFFALSE 36040
// begin if not GetBWeapon ( i ) then
36002: LD_VAR 0 8
36006: PPUSH
36007: CALL_OW 269
36011: NOT
36012: IFFALSE 36038
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36014: LD_VAR 0 8
36018: PPUSH
36019: LD_VAR 0 8
36023: PPUSH
36024: LD_VAR 0 2
36028: PPUSH
36029: CALL 37288 0 2
36033: PPUSH
36034: CALL_OW 431
// end ;
36038: GO 35999
36040: POP
36041: POP
// end ; for i = 1 to personel do
36042: LD_ADDR_VAR 0 8
36046: PUSH
36047: DOUBLE
36048: LD_INT 1
36050: DEC
36051: ST_TO_ADDR
36052: LD_VAR 0 6
36056: PUSH
36057: FOR_TO
36058: IFFALSE 37122
// begin if i > 4 then
36060: LD_VAR 0 8
36064: PUSH
36065: LD_INT 4
36067: GREATER
36068: IFFALSE 36072
// break ;
36070: GO 37122
// case i of 1 :
36072: LD_VAR 0 8
36076: PUSH
36077: LD_INT 1
36079: DOUBLE
36080: EQUAL
36081: IFTRUE 36085
36083: GO 36165
36085: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36086: LD_ADDR_VAR 0 12
36090: PUSH
36091: LD_VAR 0 18
36095: PPUSH
36096: LD_INT 22
36098: PUSH
36099: LD_VAR 0 16
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 58
36110: PUSH
36111: EMPTY
36112: LIST
36113: PUSH
36114: LD_INT 2
36116: PUSH
36117: LD_INT 30
36119: PUSH
36120: LD_INT 32
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 30
36129: PUSH
36130: LD_INT 4
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 30
36139: PUSH
36140: LD_INT 5
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: PPUSH
36158: CALL_OW 72
36162: ST_TO_ADDR
36163: GO 36387
36165: LD_INT 2
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36173
36171: GO 36235
36173: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36174: LD_ADDR_VAR 0 12
36178: PUSH
36179: LD_VAR 0 18
36183: PPUSH
36184: LD_INT 22
36186: PUSH
36187: LD_VAR 0 16
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 2
36198: PUSH
36199: LD_INT 30
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 30
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PPUSH
36228: CALL_OW 72
36232: ST_TO_ADDR
36233: GO 36387
36235: LD_INT 3
36237: DOUBLE
36238: EQUAL
36239: IFTRUE 36243
36241: GO 36305
36243: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36244: LD_ADDR_VAR 0 12
36248: PUSH
36249: LD_VAR 0 18
36253: PPUSH
36254: LD_INT 22
36256: PUSH
36257: LD_VAR 0 16
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 2
36268: PUSH
36269: LD_INT 30
36271: PUSH
36272: LD_INT 2
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 30
36281: PUSH
36282: LD_INT 3
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: LIST
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PPUSH
36298: CALL_OW 72
36302: ST_TO_ADDR
36303: GO 36387
36305: LD_INT 4
36307: DOUBLE
36308: EQUAL
36309: IFTRUE 36313
36311: GO 36386
36313: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36314: LD_ADDR_VAR 0 12
36318: PUSH
36319: LD_VAR 0 18
36323: PPUSH
36324: LD_INT 22
36326: PUSH
36327: LD_VAR 0 16
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: LD_INT 30
36341: PUSH
36342: LD_INT 6
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 30
36351: PUSH
36352: LD_INT 7
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 30
36361: PUSH
36362: LD_INT 8
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PPUSH
36379: CALL_OW 72
36383: ST_TO_ADDR
36384: GO 36387
36386: POP
// if i = 1 then
36387: LD_VAR 0 8
36391: PUSH
36392: LD_INT 1
36394: EQUAL
36395: IFFALSE 36506
// begin tmp := [ ] ;
36397: LD_ADDR_VAR 0 19
36401: PUSH
36402: EMPTY
36403: ST_TO_ADDR
// for j in f do
36404: LD_ADDR_VAR 0 9
36408: PUSH
36409: LD_VAR 0 12
36413: PUSH
36414: FOR_IN
36415: IFFALSE 36488
// if GetBType ( j ) = b_bunker then
36417: LD_VAR 0 9
36421: PPUSH
36422: CALL_OW 266
36426: PUSH
36427: LD_INT 32
36429: EQUAL
36430: IFFALSE 36457
// tmp := Insert ( tmp , 1 , j ) else
36432: LD_ADDR_VAR 0 19
36436: PUSH
36437: LD_VAR 0 19
36441: PPUSH
36442: LD_INT 1
36444: PPUSH
36445: LD_VAR 0 9
36449: PPUSH
36450: CALL_OW 2
36454: ST_TO_ADDR
36455: GO 36486
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36457: LD_ADDR_VAR 0 19
36461: PUSH
36462: LD_VAR 0 19
36466: PPUSH
36467: LD_VAR 0 19
36471: PUSH
36472: LD_INT 1
36474: PLUS
36475: PPUSH
36476: LD_VAR 0 9
36480: PPUSH
36481: CALL_OW 2
36485: ST_TO_ADDR
36486: GO 36414
36488: POP
36489: POP
// if tmp then
36490: LD_VAR 0 19
36494: IFFALSE 36506
// f := tmp ;
36496: LD_ADDR_VAR 0 12
36500: PUSH
36501: LD_VAR 0 19
36505: ST_TO_ADDR
// end ; x := personel [ i ] ;
36506: LD_ADDR_VAR 0 13
36510: PUSH
36511: LD_VAR 0 6
36515: PUSH
36516: LD_VAR 0 8
36520: ARRAY
36521: ST_TO_ADDR
// if x = - 1 then
36522: LD_VAR 0 13
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: EQUAL
36531: IFFALSE 36740
// begin for j in f do
36533: LD_ADDR_VAR 0 9
36537: PUSH
36538: LD_VAR 0 12
36542: PUSH
36543: FOR_IN
36544: IFFALSE 36736
// repeat InitHc ;
36546: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36550: LD_VAR 0 9
36554: PPUSH
36555: CALL_OW 266
36559: PUSH
36560: LD_INT 5
36562: EQUAL
36563: IFFALSE 36633
// begin if UnitsInside ( j ) < 3 then
36565: LD_VAR 0 9
36569: PPUSH
36570: CALL_OW 313
36574: PUSH
36575: LD_INT 3
36577: LESS
36578: IFFALSE 36614
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36580: LD_INT 0
36582: PPUSH
36583: LD_INT 5
36585: PUSH
36586: LD_INT 8
36588: PUSH
36589: LD_INT 9
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: PUSH
36597: LD_VAR 0 17
36601: ARRAY
36602: PPUSH
36603: LD_VAR 0 4
36607: PPUSH
36608: CALL_OW 380
36612: GO 36631
// PrepareHuman ( false , i , skill ) ;
36614: LD_INT 0
36616: PPUSH
36617: LD_VAR 0 8
36621: PPUSH
36622: LD_VAR 0 4
36626: PPUSH
36627: CALL_OW 380
// end else
36631: GO 36650
// PrepareHuman ( false , i , skill ) ;
36633: LD_INT 0
36635: PPUSH
36636: LD_VAR 0 8
36640: PPUSH
36641: LD_VAR 0 4
36645: PPUSH
36646: CALL_OW 380
// un := CreateHuman ;
36650: LD_ADDR_VAR 0 14
36654: PUSH
36655: CALL_OW 44
36659: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36660: LD_ADDR_VAR 0 7
36664: PUSH
36665: LD_VAR 0 7
36669: PPUSH
36670: LD_INT 1
36672: PPUSH
36673: LD_VAR 0 14
36677: PPUSH
36678: CALL_OW 2
36682: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36683: LD_VAR 0 14
36687: PPUSH
36688: LD_VAR 0 9
36692: PPUSH
36693: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36697: LD_VAR 0 9
36701: PPUSH
36702: CALL_OW 313
36706: PUSH
36707: LD_INT 6
36709: EQUAL
36710: PUSH
36711: LD_VAR 0 9
36715: PPUSH
36716: CALL_OW 266
36720: PUSH
36721: LD_INT 32
36723: PUSH
36724: LD_INT 31
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: IN
36731: OR
36732: IFFALSE 36546
36734: GO 36543
36736: POP
36737: POP
// end else
36738: GO 37120
// for j = 1 to x do
36740: LD_ADDR_VAR 0 9
36744: PUSH
36745: DOUBLE
36746: LD_INT 1
36748: DEC
36749: ST_TO_ADDR
36750: LD_VAR 0 13
36754: PUSH
36755: FOR_TO
36756: IFFALSE 37118
// begin InitHc ;
36758: CALL_OW 19
// if not f then
36762: LD_VAR 0 12
36766: NOT
36767: IFFALSE 36856
// begin PrepareHuman ( false , i , skill ) ;
36769: LD_INT 0
36771: PPUSH
36772: LD_VAR 0 8
36776: PPUSH
36777: LD_VAR 0 4
36781: PPUSH
36782: CALL_OW 380
// un := CreateHuman ;
36786: LD_ADDR_VAR 0 14
36790: PUSH
36791: CALL_OW 44
36795: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36796: LD_ADDR_VAR 0 7
36800: PUSH
36801: LD_VAR 0 7
36805: PPUSH
36806: LD_INT 1
36808: PPUSH
36809: LD_VAR 0 14
36813: PPUSH
36814: CALL_OW 2
36818: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36819: LD_VAR 0 14
36823: PPUSH
36824: LD_VAR 0 1
36828: PPUSH
36829: CALL_OW 250
36833: PPUSH
36834: LD_VAR 0 1
36838: PPUSH
36839: CALL_OW 251
36843: PPUSH
36844: LD_INT 10
36846: PPUSH
36847: LD_INT 0
36849: PPUSH
36850: CALL_OW 50
// continue ;
36854: GO 36755
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36856: LD_VAR 0 12
36860: PUSH
36861: LD_INT 1
36863: ARRAY
36864: PPUSH
36865: CALL_OW 313
36869: PUSH
36870: LD_VAR 0 12
36874: PUSH
36875: LD_INT 1
36877: ARRAY
36878: PPUSH
36879: CALL_OW 266
36883: PUSH
36884: LD_INT 32
36886: PUSH
36887: LD_INT 31
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: IN
36894: AND
36895: PUSH
36896: LD_VAR 0 12
36900: PUSH
36901: LD_INT 1
36903: ARRAY
36904: PPUSH
36905: CALL_OW 313
36909: PUSH
36910: LD_INT 6
36912: EQUAL
36913: OR
36914: IFFALSE 36934
// f := Delete ( f , 1 ) ;
36916: LD_ADDR_VAR 0 12
36920: PUSH
36921: LD_VAR 0 12
36925: PPUSH
36926: LD_INT 1
36928: PPUSH
36929: CALL_OW 3
36933: ST_TO_ADDR
// if not f then
36934: LD_VAR 0 12
36938: NOT
36939: IFFALSE 36957
// begin x := x + 2 ;
36941: LD_ADDR_VAR 0 13
36945: PUSH
36946: LD_VAR 0 13
36950: PUSH
36951: LD_INT 2
36953: PLUS
36954: ST_TO_ADDR
// continue ;
36955: GO 36755
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36957: LD_VAR 0 12
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: PPUSH
36966: CALL_OW 266
36970: PUSH
36971: LD_INT 5
36973: EQUAL
36974: IFFALSE 37048
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36976: LD_VAR 0 12
36980: PUSH
36981: LD_INT 1
36983: ARRAY
36984: PPUSH
36985: CALL_OW 313
36989: PUSH
36990: LD_INT 3
36992: LESS
36993: IFFALSE 37029
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36995: LD_INT 0
36997: PPUSH
36998: LD_INT 5
37000: PUSH
37001: LD_INT 8
37003: PUSH
37004: LD_INT 9
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: LIST
37011: PUSH
37012: LD_VAR 0 17
37016: ARRAY
37017: PPUSH
37018: LD_VAR 0 4
37022: PPUSH
37023: CALL_OW 380
37027: GO 37046
// PrepareHuman ( false , i , skill ) ;
37029: LD_INT 0
37031: PPUSH
37032: LD_VAR 0 8
37036: PPUSH
37037: LD_VAR 0 4
37041: PPUSH
37042: CALL_OW 380
// end else
37046: GO 37065
// PrepareHuman ( false , i , skill ) ;
37048: LD_INT 0
37050: PPUSH
37051: LD_VAR 0 8
37055: PPUSH
37056: LD_VAR 0 4
37060: PPUSH
37061: CALL_OW 380
// un := CreateHuman ;
37065: LD_ADDR_VAR 0 14
37069: PUSH
37070: CALL_OW 44
37074: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37075: LD_ADDR_VAR 0 7
37079: PUSH
37080: LD_VAR 0 7
37084: PPUSH
37085: LD_INT 1
37087: PPUSH
37088: LD_VAR 0 14
37092: PPUSH
37093: CALL_OW 2
37097: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37098: LD_VAR 0 14
37102: PPUSH
37103: LD_VAR 0 12
37107: PUSH
37108: LD_INT 1
37110: ARRAY
37111: PPUSH
37112: CALL_OW 52
// end ;
37116: GO 36755
37118: POP
37119: POP
// end ;
37120: GO 36057
37122: POP
37123: POP
// result := result ^ buildings ;
37124: LD_ADDR_VAR 0 7
37128: PUSH
37129: LD_VAR 0 7
37133: PUSH
37134: LD_VAR 0 18
37138: ADD
37139: ST_TO_ADDR
// end else
37140: GO 37283
// begin for i = 1 to personel do
37142: LD_ADDR_VAR 0 8
37146: PUSH
37147: DOUBLE
37148: LD_INT 1
37150: DEC
37151: ST_TO_ADDR
37152: LD_VAR 0 6
37156: PUSH
37157: FOR_TO
37158: IFFALSE 37281
// begin if i > 4 then
37160: LD_VAR 0 8
37164: PUSH
37165: LD_INT 4
37167: GREATER
37168: IFFALSE 37172
// break ;
37170: GO 37281
// x := personel [ i ] ;
37172: LD_ADDR_VAR 0 13
37176: PUSH
37177: LD_VAR 0 6
37181: PUSH
37182: LD_VAR 0 8
37186: ARRAY
37187: ST_TO_ADDR
// if x = - 1 then
37188: LD_VAR 0 13
37192: PUSH
37193: LD_INT 1
37195: NEG
37196: EQUAL
37197: IFFALSE 37201
// continue ;
37199: GO 37157
// PrepareHuman ( false , i , skill ) ;
37201: LD_INT 0
37203: PPUSH
37204: LD_VAR 0 8
37208: PPUSH
37209: LD_VAR 0 4
37213: PPUSH
37214: CALL_OW 380
// un := CreateHuman ;
37218: LD_ADDR_VAR 0 14
37222: PUSH
37223: CALL_OW 44
37227: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37228: LD_VAR 0 14
37232: PPUSH
37233: LD_VAR 0 1
37237: PPUSH
37238: CALL_OW 250
37242: PPUSH
37243: LD_VAR 0 1
37247: PPUSH
37248: CALL_OW 251
37252: PPUSH
37253: LD_INT 10
37255: PPUSH
37256: LD_INT 0
37258: PPUSH
37259: CALL_OW 50
// result := result ^ un ;
37263: LD_ADDR_VAR 0 7
37267: PUSH
37268: LD_VAR 0 7
37272: PUSH
37273: LD_VAR 0 14
37277: ADD
37278: ST_TO_ADDR
// end ;
37279: GO 37157
37281: POP
37282: POP
// end ; end ;
37283: LD_VAR 0 7
37287: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37288: LD_INT 0
37290: PPUSH
37291: PPUSH
37292: PPUSH
37293: PPUSH
37294: PPUSH
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
37300: PPUSH
37301: PPUSH
37302: PPUSH
37303: PPUSH
37304: PPUSH
37305: PPUSH
// result := false ;
37306: LD_ADDR_VAR 0 3
37310: PUSH
37311: LD_INT 0
37313: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37314: LD_VAR 0 1
37318: NOT
37319: PUSH
37320: LD_VAR 0 1
37324: PPUSH
37325: CALL_OW 266
37329: PUSH
37330: LD_INT 32
37332: PUSH
37333: LD_INT 33
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: IN
37340: NOT
37341: OR
37342: IFFALSE 37346
// exit ;
37344: GO 38455
// nat := GetNation ( tower ) ;
37346: LD_ADDR_VAR 0 12
37350: PUSH
37351: LD_VAR 0 1
37355: PPUSH
37356: CALL_OW 248
37360: ST_TO_ADDR
// side := GetSide ( tower ) ;
37361: LD_ADDR_VAR 0 16
37365: PUSH
37366: LD_VAR 0 1
37370: PPUSH
37371: CALL_OW 255
37375: ST_TO_ADDR
// x := GetX ( tower ) ;
37376: LD_ADDR_VAR 0 10
37380: PUSH
37381: LD_VAR 0 1
37385: PPUSH
37386: CALL_OW 250
37390: ST_TO_ADDR
// y := GetY ( tower ) ;
37391: LD_ADDR_VAR 0 11
37395: PUSH
37396: LD_VAR 0 1
37400: PPUSH
37401: CALL_OW 251
37405: ST_TO_ADDR
// if not x or not y then
37406: LD_VAR 0 10
37410: NOT
37411: PUSH
37412: LD_VAR 0 11
37416: NOT
37417: OR
37418: IFFALSE 37422
// exit ;
37420: GO 38455
// weapon := 0 ;
37422: LD_ADDR_VAR 0 18
37426: PUSH
37427: LD_INT 0
37429: ST_TO_ADDR
// fac_list := [ ] ;
37430: LD_ADDR_VAR 0 17
37434: PUSH
37435: EMPTY
37436: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37437: LD_ADDR_VAR 0 6
37441: PUSH
37442: LD_VAR 0 1
37446: PPUSH
37447: CALL_OW 274
37451: PPUSH
37452: LD_VAR 0 2
37456: PPUSH
37457: LD_INT 0
37459: PPUSH
37460: CALL 35026 0 3
37464: PPUSH
37465: LD_INT 30
37467: PUSH
37468: LD_INT 3
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PPUSH
37475: CALL_OW 72
37479: ST_TO_ADDR
// if not factories then
37480: LD_VAR 0 6
37484: NOT
37485: IFFALSE 37489
// exit ;
37487: GO 38455
// for i in factories do
37489: LD_ADDR_VAR 0 8
37493: PUSH
37494: LD_VAR 0 6
37498: PUSH
37499: FOR_IN
37500: IFFALSE 37525
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37502: LD_ADDR_VAR 0 17
37506: PUSH
37507: LD_VAR 0 17
37511: PUSH
37512: LD_VAR 0 8
37516: PPUSH
37517: CALL_OW 478
37521: UNION
37522: ST_TO_ADDR
37523: GO 37499
37525: POP
37526: POP
// if not fac_list then
37527: LD_VAR 0 17
37531: NOT
37532: IFFALSE 37536
// exit ;
37534: GO 38455
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37536: LD_ADDR_VAR 0 5
37540: PUSH
37541: LD_INT 4
37543: PUSH
37544: LD_INT 5
37546: PUSH
37547: LD_INT 9
37549: PUSH
37550: LD_INT 10
37552: PUSH
37553: LD_INT 6
37555: PUSH
37556: LD_INT 7
37558: PUSH
37559: LD_INT 11
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 27
37573: PUSH
37574: LD_INT 28
37576: PUSH
37577: LD_INT 26
37579: PUSH
37580: LD_INT 30
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 43
37591: PUSH
37592: LD_INT 44
37594: PUSH
37595: LD_INT 46
37597: PUSH
37598: LD_INT 45
37600: PUSH
37601: LD_INT 47
37603: PUSH
37604: LD_INT 49
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: LIST
37619: PUSH
37620: LD_VAR 0 12
37624: ARRAY
37625: ST_TO_ADDR
// list := list isect fac_list ;
37626: LD_ADDR_VAR 0 5
37630: PUSH
37631: LD_VAR 0 5
37635: PUSH
37636: LD_VAR 0 17
37640: ISECT
37641: ST_TO_ADDR
// if not list then
37642: LD_VAR 0 5
37646: NOT
37647: IFFALSE 37651
// exit ;
37649: GO 38455
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37651: LD_VAR 0 12
37655: PUSH
37656: LD_INT 3
37658: EQUAL
37659: PUSH
37660: LD_INT 49
37662: PUSH
37663: LD_VAR 0 5
37667: IN
37668: AND
37669: PUSH
37670: LD_INT 31
37672: PPUSH
37673: LD_VAR 0 16
37677: PPUSH
37678: CALL_OW 321
37682: PUSH
37683: LD_INT 2
37685: EQUAL
37686: AND
37687: IFFALSE 37747
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37689: LD_INT 22
37691: PUSH
37692: LD_VAR 0 16
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 35
37703: PUSH
37704: LD_INT 49
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 91
37713: PUSH
37714: LD_VAR 0 1
37718: PUSH
37719: LD_INT 10
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: LIST
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: LIST
37731: PPUSH
37732: CALL_OW 69
37736: NOT
37737: IFFALSE 37747
// weapon := ru_time_lapser ;
37739: LD_ADDR_VAR 0 18
37743: PUSH
37744: LD_INT 49
37746: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37747: LD_VAR 0 12
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 2
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: IN
37762: PUSH
37763: LD_INT 11
37765: PUSH
37766: LD_VAR 0 5
37770: IN
37771: PUSH
37772: LD_INT 30
37774: PUSH
37775: LD_VAR 0 5
37779: IN
37780: OR
37781: AND
37782: PUSH
37783: LD_INT 6
37785: PPUSH
37786: LD_VAR 0 16
37790: PPUSH
37791: CALL_OW 321
37795: PUSH
37796: LD_INT 2
37798: EQUAL
37799: AND
37800: IFFALSE 37965
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37802: LD_INT 22
37804: PUSH
37805: LD_VAR 0 16
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: PUSH
37817: LD_INT 35
37819: PUSH
37820: LD_INT 11
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 35
37829: PUSH
37830: LD_INT 30
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 91
37844: PUSH
37845: LD_VAR 0 1
37849: PUSH
37850: LD_INT 18
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: LIST
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: PPUSH
37863: CALL_OW 69
37867: NOT
37868: PUSH
37869: LD_INT 22
37871: PUSH
37872: LD_VAR 0 16
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 2
37883: PUSH
37884: LD_INT 30
37886: PUSH
37887: LD_INT 32
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 30
37896: PUSH
37897: LD_INT 33
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 91
37911: PUSH
37912: LD_VAR 0 1
37916: PUSH
37917: LD_INT 12
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: LIST
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: LIST
37929: PUSH
37930: EMPTY
37931: LIST
37932: PPUSH
37933: CALL_OW 69
37937: PUSH
37938: LD_INT 2
37940: GREATER
37941: AND
37942: IFFALSE 37965
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37944: LD_ADDR_VAR 0 18
37948: PUSH
37949: LD_INT 11
37951: PUSH
37952: LD_INT 30
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_VAR 0 12
37963: ARRAY
37964: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37965: LD_VAR 0 18
37969: NOT
37970: PUSH
37971: LD_INT 40
37973: PPUSH
37974: LD_VAR 0 16
37978: PPUSH
37979: CALL_OW 321
37983: PUSH
37984: LD_INT 2
37986: EQUAL
37987: AND
37988: PUSH
37989: LD_INT 7
37991: PUSH
37992: LD_VAR 0 5
37996: IN
37997: PUSH
37998: LD_INT 28
38000: PUSH
38001: LD_VAR 0 5
38005: IN
38006: OR
38007: PUSH
38008: LD_INT 45
38010: PUSH
38011: LD_VAR 0 5
38015: IN
38016: OR
38017: AND
38018: IFFALSE 38272
// begin hex := GetHexInfo ( x , y ) ;
38020: LD_ADDR_VAR 0 4
38024: PUSH
38025: LD_VAR 0 10
38029: PPUSH
38030: LD_VAR 0 11
38034: PPUSH
38035: CALL_OW 546
38039: ST_TO_ADDR
// if hex [ 1 ] then
38040: LD_VAR 0 4
38044: PUSH
38045: LD_INT 1
38047: ARRAY
38048: IFFALSE 38052
// exit ;
38050: GO 38455
// height := hex [ 2 ] ;
38052: LD_ADDR_VAR 0 15
38056: PUSH
38057: LD_VAR 0 4
38061: PUSH
38062: LD_INT 2
38064: ARRAY
38065: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38066: LD_ADDR_VAR 0 14
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 3
38079: PUSH
38080: LD_INT 5
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: ST_TO_ADDR
// for i in tmp do
38089: LD_ADDR_VAR 0 8
38093: PUSH
38094: LD_VAR 0 14
38098: PUSH
38099: FOR_IN
38100: IFFALSE 38270
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38102: LD_ADDR_VAR 0 9
38106: PUSH
38107: LD_VAR 0 10
38111: PPUSH
38112: LD_VAR 0 8
38116: PPUSH
38117: LD_INT 5
38119: PPUSH
38120: CALL_OW 272
38124: PUSH
38125: LD_VAR 0 11
38129: PPUSH
38130: LD_VAR 0 8
38134: PPUSH
38135: LD_INT 5
38137: PPUSH
38138: CALL_OW 273
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38147: LD_VAR 0 9
38151: PUSH
38152: LD_INT 1
38154: ARRAY
38155: PPUSH
38156: LD_VAR 0 9
38160: PUSH
38161: LD_INT 2
38163: ARRAY
38164: PPUSH
38165: CALL_OW 488
38169: IFFALSE 38268
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38171: LD_ADDR_VAR 0 4
38175: PUSH
38176: LD_VAR 0 9
38180: PUSH
38181: LD_INT 1
38183: ARRAY
38184: PPUSH
38185: LD_VAR 0 9
38189: PUSH
38190: LD_INT 2
38192: ARRAY
38193: PPUSH
38194: CALL_OW 546
38198: ST_TO_ADDR
// if hex [ 1 ] then
38199: LD_VAR 0 4
38203: PUSH
38204: LD_INT 1
38206: ARRAY
38207: IFFALSE 38211
// continue ;
38209: GO 38099
// h := hex [ 2 ] ;
38211: LD_ADDR_VAR 0 13
38215: PUSH
38216: LD_VAR 0 4
38220: PUSH
38221: LD_INT 2
38223: ARRAY
38224: ST_TO_ADDR
// if h + 7 < height then
38225: LD_VAR 0 13
38229: PUSH
38230: LD_INT 7
38232: PLUS
38233: PUSH
38234: LD_VAR 0 15
38238: LESS
38239: IFFALSE 38268
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38241: LD_ADDR_VAR 0 18
38245: PUSH
38246: LD_INT 7
38248: PUSH
38249: LD_INT 28
38251: PUSH
38252: LD_INT 45
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: LIST
38259: PUSH
38260: LD_VAR 0 12
38264: ARRAY
38265: ST_TO_ADDR
// break ;
38266: GO 38270
// end ; end ; end ;
38268: GO 38099
38270: POP
38271: POP
// end ; if not weapon then
38272: LD_VAR 0 18
38276: NOT
38277: IFFALSE 38337
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38279: LD_ADDR_VAR 0 5
38283: PUSH
38284: LD_VAR 0 5
38288: PUSH
38289: LD_INT 11
38291: PUSH
38292: LD_INT 30
38294: PUSH
38295: LD_INT 49
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: LIST
38302: DIFF
38303: ST_TO_ADDR
// if not list then
38304: LD_VAR 0 5
38308: NOT
38309: IFFALSE 38313
// exit ;
38311: GO 38455
// weapon := list [ rand ( 1 , list ) ] ;
38313: LD_ADDR_VAR 0 18
38317: PUSH
38318: LD_VAR 0 5
38322: PUSH
38323: LD_INT 1
38325: PPUSH
38326: LD_VAR 0 5
38330: PPUSH
38331: CALL_OW 12
38335: ARRAY
38336: ST_TO_ADDR
// end ; if weapon then
38337: LD_VAR 0 18
38341: IFFALSE 38455
// begin tmp := CostOfWeapon ( weapon ) ;
38343: LD_ADDR_VAR 0 14
38347: PUSH
38348: LD_VAR 0 18
38352: PPUSH
38353: CALL_OW 451
38357: ST_TO_ADDR
// j := GetBase ( tower ) ;
38358: LD_ADDR_VAR 0 9
38362: PUSH
38363: LD_VAR 0 1
38367: PPUSH
38368: CALL_OW 274
38372: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38373: LD_VAR 0 9
38377: PPUSH
38378: LD_INT 1
38380: PPUSH
38381: CALL_OW 275
38385: PUSH
38386: LD_VAR 0 14
38390: PUSH
38391: LD_INT 1
38393: ARRAY
38394: GREATEREQUAL
38395: PUSH
38396: LD_VAR 0 9
38400: PPUSH
38401: LD_INT 2
38403: PPUSH
38404: CALL_OW 275
38408: PUSH
38409: LD_VAR 0 14
38413: PUSH
38414: LD_INT 2
38416: ARRAY
38417: GREATEREQUAL
38418: AND
38419: PUSH
38420: LD_VAR 0 9
38424: PPUSH
38425: LD_INT 3
38427: PPUSH
38428: CALL_OW 275
38432: PUSH
38433: LD_VAR 0 14
38437: PUSH
38438: LD_INT 3
38440: ARRAY
38441: GREATEREQUAL
38442: AND
38443: IFFALSE 38455
// result := weapon ;
38445: LD_ADDR_VAR 0 3
38449: PUSH
38450: LD_VAR 0 18
38454: ST_TO_ADDR
// end ; end ;
38455: LD_VAR 0 3
38459: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38460: LD_INT 0
38462: PPUSH
38463: PPUSH
// result := true ;
38464: LD_ADDR_VAR 0 3
38468: PUSH
38469: LD_INT 1
38471: ST_TO_ADDR
// if array1 = array2 then
38472: LD_VAR 0 1
38476: PUSH
38477: LD_VAR 0 2
38481: EQUAL
38482: IFFALSE 38542
// begin for i = 1 to array1 do
38484: LD_ADDR_VAR 0 4
38488: PUSH
38489: DOUBLE
38490: LD_INT 1
38492: DEC
38493: ST_TO_ADDR
38494: LD_VAR 0 1
38498: PUSH
38499: FOR_TO
38500: IFFALSE 38538
// if array1 [ i ] <> array2 [ i ] then
38502: LD_VAR 0 1
38506: PUSH
38507: LD_VAR 0 4
38511: ARRAY
38512: PUSH
38513: LD_VAR 0 2
38517: PUSH
38518: LD_VAR 0 4
38522: ARRAY
38523: NONEQUAL
38524: IFFALSE 38536
// begin result := false ;
38526: LD_ADDR_VAR 0 3
38530: PUSH
38531: LD_INT 0
38533: ST_TO_ADDR
// break ;
38534: GO 38538
// end ;
38536: GO 38499
38538: POP
38539: POP
// end else
38540: GO 38550
// result := false ;
38542: LD_ADDR_VAR 0 3
38546: PUSH
38547: LD_INT 0
38549: ST_TO_ADDR
// end ;
38550: LD_VAR 0 3
38554: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38555: LD_INT 0
38557: PPUSH
38558: PPUSH
// if not array1 or not array2 then
38559: LD_VAR 0 1
38563: NOT
38564: PUSH
38565: LD_VAR 0 2
38569: NOT
38570: OR
38571: IFFALSE 38575
// exit ;
38573: GO 38639
// result := true ;
38575: LD_ADDR_VAR 0 3
38579: PUSH
38580: LD_INT 1
38582: ST_TO_ADDR
// for i = 1 to array1 do
38583: LD_ADDR_VAR 0 4
38587: PUSH
38588: DOUBLE
38589: LD_INT 1
38591: DEC
38592: ST_TO_ADDR
38593: LD_VAR 0 1
38597: PUSH
38598: FOR_TO
38599: IFFALSE 38637
// if array1 [ i ] <> array2 [ i ] then
38601: LD_VAR 0 1
38605: PUSH
38606: LD_VAR 0 4
38610: ARRAY
38611: PUSH
38612: LD_VAR 0 2
38616: PUSH
38617: LD_VAR 0 4
38621: ARRAY
38622: NONEQUAL
38623: IFFALSE 38635
// begin result := false ;
38625: LD_ADDR_VAR 0 3
38629: PUSH
38630: LD_INT 0
38632: ST_TO_ADDR
// break ;
38633: GO 38637
// end ;
38635: GO 38598
38637: POP
38638: POP
// end ;
38639: LD_VAR 0 3
38643: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38644: LD_INT 0
38646: PPUSH
38647: PPUSH
38648: PPUSH
// pom := GetBase ( fac ) ;
38649: LD_ADDR_VAR 0 5
38653: PUSH
38654: LD_VAR 0 1
38658: PPUSH
38659: CALL_OW 274
38663: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38664: LD_ADDR_VAR 0 4
38668: PUSH
38669: LD_VAR 0 2
38673: PUSH
38674: LD_INT 1
38676: ARRAY
38677: PPUSH
38678: LD_VAR 0 2
38682: PUSH
38683: LD_INT 2
38685: ARRAY
38686: PPUSH
38687: LD_VAR 0 2
38691: PUSH
38692: LD_INT 3
38694: ARRAY
38695: PPUSH
38696: LD_VAR 0 2
38700: PUSH
38701: LD_INT 4
38703: ARRAY
38704: PPUSH
38705: CALL_OW 449
38709: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38710: LD_ADDR_VAR 0 3
38714: PUSH
38715: LD_VAR 0 5
38719: PPUSH
38720: LD_INT 1
38722: PPUSH
38723: CALL_OW 275
38727: PUSH
38728: LD_VAR 0 4
38732: PUSH
38733: LD_INT 1
38735: ARRAY
38736: GREATEREQUAL
38737: PUSH
38738: LD_VAR 0 5
38742: PPUSH
38743: LD_INT 2
38745: PPUSH
38746: CALL_OW 275
38750: PUSH
38751: LD_VAR 0 4
38755: PUSH
38756: LD_INT 2
38758: ARRAY
38759: GREATEREQUAL
38760: AND
38761: PUSH
38762: LD_VAR 0 5
38766: PPUSH
38767: LD_INT 3
38769: PPUSH
38770: CALL_OW 275
38774: PUSH
38775: LD_VAR 0 4
38779: PUSH
38780: LD_INT 3
38782: ARRAY
38783: GREATEREQUAL
38784: AND
38785: ST_TO_ADDR
// end ;
38786: LD_VAR 0 3
38790: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38791: LD_INT 0
38793: PPUSH
38794: PPUSH
38795: PPUSH
38796: PPUSH
// pom := GetBase ( building ) ;
38797: LD_ADDR_VAR 0 3
38801: PUSH
38802: LD_VAR 0 1
38806: PPUSH
38807: CALL_OW 274
38811: ST_TO_ADDR
// if not pom then
38812: LD_VAR 0 3
38816: NOT
38817: IFFALSE 38821
// exit ;
38819: GO 38991
// btype := GetBType ( building ) ;
38821: LD_ADDR_VAR 0 5
38825: PUSH
38826: LD_VAR 0 1
38830: PPUSH
38831: CALL_OW 266
38835: ST_TO_ADDR
// if btype = b_armoury then
38836: LD_VAR 0 5
38840: PUSH
38841: LD_INT 4
38843: EQUAL
38844: IFFALSE 38854
// btype := b_barracks ;
38846: LD_ADDR_VAR 0 5
38850: PUSH
38851: LD_INT 5
38853: ST_TO_ADDR
// if btype = b_depot then
38854: LD_VAR 0 5
38858: PUSH
38859: LD_INT 0
38861: EQUAL
38862: IFFALSE 38872
// btype := b_warehouse ;
38864: LD_ADDR_VAR 0 5
38868: PUSH
38869: LD_INT 1
38871: ST_TO_ADDR
// if btype = b_workshop then
38872: LD_VAR 0 5
38876: PUSH
38877: LD_INT 2
38879: EQUAL
38880: IFFALSE 38890
// btype := b_factory ;
38882: LD_ADDR_VAR 0 5
38886: PUSH
38887: LD_INT 3
38889: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38890: LD_ADDR_VAR 0 4
38894: PUSH
38895: LD_VAR 0 5
38899: PPUSH
38900: LD_VAR 0 1
38904: PPUSH
38905: CALL_OW 248
38909: PPUSH
38910: CALL_OW 450
38914: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38915: LD_ADDR_VAR 0 2
38919: PUSH
38920: LD_VAR 0 3
38924: PPUSH
38925: LD_INT 1
38927: PPUSH
38928: CALL_OW 275
38932: PUSH
38933: LD_VAR 0 4
38937: PUSH
38938: LD_INT 1
38940: ARRAY
38941: GREATEREQUAL
38942: PUSH
38943: LD_VAR 0 3
38947: PPUSH
38948: LD_INT 2
38950: PPUSH
38951: CALL_OW 275
38955: PUSH
38956: LD_VAR 0 4
38960: PUSH
38961: LD_INT 2
38963: ARRAY
38964: GREATEREQUAL
38965: AND
38966: PUSH
38967: LD_VAR 0 3
38971: PPUSH
38972: LD_INT 3
38974: PPUSH
38975: CALL_OW 275
38979: PUSH
38980: LD_VAR 0 4
38984: PUSH
38985: LD_INT 3
38987: ARRAY
38988: GREATEREQUAL
38989: AND
38990: ST_TO_ADDR
// end ;
38991: LD_VAR 0 2
38995: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38996: LD_INT 0
38998: PPUSH
38999: PPUSH
39000: PPUSH
// pom := GetBase ( building ) ;
39001: LD_ADDR_VAR 0 4
39005: PUSH
39006: LD_VAR 0 1
39010: PPUSH
39011: CALL_OW 274
39015: ST_TO_ADDR
// if not pom then
39016: LD_VAR 0 4
39020: NOT
39021: IFFALSE 39025
// exit ;
39023: GO 39126
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39025: LD_ADDR_VAR 0 5
39029: PUSH
39030: LD_VAR 0 2
39034: PPUSH
39035: LD_VAR 0 1
39039: PPUSH
39040: CALL_OW 248
39044: PPUSH
39045: CALL_OW 450
39049: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39050: LD_ADDR_VAR 0 3
39054: PUSH
39055: LD_VAR 0 4
39059: PPUSH
39060: LD_INT 1
39062: PPUSH
39063: CALL_OW 275
39067: PUSH
39068: LD_VAR 0 5
39072: PUSH
39073: LD_INT 1
39075: ARRAY
39076: GREATEREQUAL
39077: PUSH
39078: LD_VAR 0 4
39082: PPUSH
39083: LD_INT 2
39085: PPUSH
39086: CALL_OW 275
39090: PUSH
39091: LD_VAR 0 5
39095: PUSH
39096: LD_INT 2
39098: ARRAY
39099: GREATEREQUAL
39100: AND
39101: PUSH
39102: LD_VAR 0 4
39106: PPUSH
39107: LD_INT 3
39109: PPUSH
39110: CALL_OW 275
39114: PUSH
39115: LD_VAR 0 5
39119: PUSH
39120: LD_INT 3
39122: ARRAY
39123: GREATEREQUAL
39124: AND
39125: ST_TO_ADDR
// end ;
39126: LD_VAR 0 3
39130: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39131: LD_INT 0
39133: PPUSH
39134: PPUSH
39135: PPUSH
39136: PPUSH
39137: PPUSH
39138: PPUSH
39139: PPUSH
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
// result := false ;
39144: LD_ADDR_VAR 0 8
39148: PUSH
39149: LD_INT 0
39151: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39152: LD_VAR 0 5
39156: NOT
39157: PUSH
39158: LD_VAR 0 1
39162: NOT
39163: OR
39164: PUSH
39165: LD_VAR 0 2
39169: NOT
39170: OR
39171: PUSH
39172: LD_VAR 0 3
39176: NOT
39177: OR
39178: IFFALSE 39182
// exit ;
39180: GO 39996
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39182: LD_ADDR_VAR 0 14
39186: PUSH
39187: LD_VAR 0 1
39191: PPUSH
39192: LD_VAR 0 2
39196: PPUSH
39197: LD_VAR 0 3
39201: PPUSH
39202: LD_VAR 0 4
39206: PPUSH
39207: LD_VAR 0 5
39211: PUSH
39212: LD_INT 1
39214: ARRAY
39215: PPUSH
39216: CALL_OW 248
39220: PPUSH
39221: LD_INT 0
39223: PPUSH
39224: CALL 41229 0 6
39228: ST_TO_ADDR
// if not hexes then
39229: LD_VAR 0 14
39233: NOT
39234: IFFALSE 39238
// exit ;
39236: GO 39996
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39238: LD_ADDR_VAR 0 17
39242: PUSH
39243: LD_VAR 0 5
39247: PPUSH
39248: LD_INT 22
39250: PUSH
39251: LD_VAR 0 13
39255: PPUSH
39256: CALL_OW 255
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 2
39267: PUSH
39268: LD_INT 30
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 30
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: LIST
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PPUSH
39297: CALL_OW 72
39301: ST_TO_ADDR
// for i = 1 to hexes do
39302: LD_ADDR_VAR 0 9
39306: PUSH
39307: DOUBLE
39308: LD_INT 1
39310: DEC
39311: ST_TO_ADDR
39312: LD_VAR 0 14
39316: PUSH
39317: FOR_TO
39318: IFFALSE 39994
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39320: LD_ADDR_VAR 0 13
39324: PUSH
39325: LD_VAR 0 14
39329: PUSH
39330: LD_VAR 0 9
39334: ARRAY
39335: PUSH
39336: LD_INT 1
39338: ARRAY
39339: PPUSH
39340: LD_VAR 0 14
39344: PUSH
39345: LD_VAR 0 9
39349: ARRAY
39350: PUSH
39351: LD_INT 2
39353: ARRAY
39354: PPUSH
39355: CALL_OW 428
39359: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39360: LD_VAR 0 14
39364: PUSH
39365: LD_VAR 0 9
39369: ARRAY
39370: PUSH
39371: LD_INT 1
39373: ARRAY
39374: PPUSH
39375: LD_VAR 0 14
39379: PUSH
39380: LD_VAR 0 9
39384: ARRAY
39385: PUSH
39386: LD_INT 2
39388: ARRAY
39389: PPUSH
39390: CALL_OW 351
39394: PUSH
39395: LD_VAR 0 14
39399: PUSH
39400: LD_VAR 0 9
39404: ARRAY
39405: PUSH
39406: LD_INT 1
39408: ARRAY
39409: PPUSH
39410: LD_VAR 0 14
39414: PUSH
39415: LD_VAR 0 9
39419: ARRAY
39420: PUSH
39421: LD_INT 2
39423: ARRAY
39424: PPUSH
39425: CALL_OW 488
39429: NOT
39430: OR
39431: PUSH
39432: LD_VAR 0 13
39436: PPUSH
39437: CALL_OW 247
39441: PUSH
39442: LD_INT 3
39444: EQUAL
39445: OR
39446: IFFALSE 39452
// exit ;
39448: POP
39449: POP
39450: GO 39996
// if not tmp then
39452: LD_VAR 0 13
39456: NOT
39457: IFFALSE 39461
// continue ;
39459: GO 39317
// result := true ;
39461: LD_ADDR_VAR 0 8
39465: PUSH
39466: LD_INT 1
39468: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39469: LD_VAR 0 6
39473: PUSH
39474: LD_VAR 0 13
39478: PPUSH
39479: CALL_OW 247
39483: PUSH
39484: LD_INT 2
39486: EQUAL
39487: AND
39488: PUSH
39489: LD_VAR 0 13
39493: PPUSH
39494: CALL_OW 263
39498: PUSH
39499: LD_INT 1
39501: EQUAL
39502: AND
39503: IFFALSE 39667
// begin if IsDrivenBy ( tmp ) then
39505: LD_VAR 0 13
39509: PPUSH
39510: CALL_OW 311
39514: IFFALSE 39518
// continue ;
39516: GO 39317
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39518: LD_VAR 0 6
39522: PPUSH
39523: LD_INT 3
39525: PUSH
39526: LD_INT 60
39528: PUSH
39529: EMPTY
39530: LIST
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 3
39538: PUSH
39539: LD_INT 55
39541: PUSH
39542: EMPTY
39543: LIST
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PPUSH
39553: CALL_OW 72
39557: IFFALSE 39665
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39559: LD_ADDR_VAR 0 18
39563: PUSH
39564: LD_VAR 0 6
39568: PPUSH
39569: LD_INT 3
39571: PUSH
39572: LD_INT 60
39574: PUSH
39575: EMPTY
39576: LIST
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 3
39584: PUSH
39585: LD_INT 55
39587: PUSH
39588: EMPTY
39589: LIST
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PPUSH
39599: CALL_OW 72
39603: PUSH
39604: LD_INT 1
39606: ARRAY
39607: ST_TO_ADDR
// if IsInUnit ( driver ) then
39608: LD_VAR 0 18
39612: PPUSH
39613: CALL_OW 310
39617: IFFALSE 39628
// ComExit ( driver ) ;
39619: LD_VAR 0 18
39623: PPUSH
39624: CALL 65009 0 1
// AddComEnterUnit ( driver , tmp ) ;
39628: LD_VAR 0 18
39632: PPUSH
39633: LD_VAR 0 13
39637: PPUSH
39638: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39642: LD_VAR 0 18
39646: PPUSH
39647: LD_VAR 0 7
39651: PPUSH
39652: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39656: LD_VAR 0 18
39660: PPUSH
39661: CALL_OW 181
// end ; continue ;
39665: GO 39317
// end ; if not cleaners or not tmp in cleaners then
39667: LD_VAR 0 6
39671: NOT
39672: PUSH
39673: LD_VAR 0 13
39677: PUSH
39678: LD_VAR 0 6
39682: IN
39683: NOT
39684: OR
39685: IFFALSE 39992
// begin if dep then
39687: LD_VAR 0 17
39691: IFFALSE 39827
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39693: LD_ADDR_VAR 0 16
39697: PUSH
39698: LD_VAR 0 17
39702: PUSH
39703: LD_INT 1
39705: ARRAY
39706: PPUSH
39707: CALL_OW 250
39711: PPUSH
39712: LD_VAR 0 17
39716: PUSH
39717: LD_INT 1
39719: ARRAY
39720: PPUSH
39721: CALL_OW 254
39725: PPUSH
39726: LD_INT 5
39728: PPUSH
39729: CALL_OW 272
39733: PUSH
39734: LD_VAR 0 17
39738: PUSH
39739: LD_INT 1
39741: ARRAY
39742: PPUSH
39743: CALL_OW 251
39747: PPUSH
39748: LD_VAR 0 17
39752: PUSH
39753: LD_INT 1
39755: ARRAY
39756: PPUSH
39757: CALL_OW 254
39761: PPUSH
39762: LD_INT 5
39764: PPUSH
39765: CALL_OW 273
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39774: LD_VAR 0 16
39778: PUSH
39779: LD_INT 1
39781: ARRAY
39782: PPUSH
39783: LD_VAR 0 16
39787: PUSH
39788: LD_INT 2
39790: ARRAY
39791: PPUSH
39792: CALL_OW 488
39796: IFFALSE 39827
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39798: LD_VAR 0 13
39802: PPUSH
39803: LD_VAR 0 16
39807: PUSH
39808: LD_INT 1
39810: ARRAY
39811: PPUSH
39812: LD_VAR 0 16
39816: PUSH
39817: LD_INT 2
39819: ARRAY
39820: PPUSH
39821: CALL_OW 111
// continue ;
39825: GO 39317
// end ; end ; r := GetDir ( tmp ) ;
39827: LD_ADDR_VAR 0 15
39831: PUSH
39832: LD_VAR 0 13
39836: PPUSH
39837: CALL_OW 254
39841: ST_TO_ADDR
// if r = 5 then
39842: LD_VAR 0 15
39846: PUSH
39847: LD_INT 5
39849: EQUAL
39850: IFFALSE 39860
// r := 0 ;
39852: LD_ADDR_VAR 0 15
39856: PUSH
39857: LD_INT 0
39859: ST_TO_ADDR
// for j = r to 5 do
39860: LD_ADDR_VAR 0 10
39864: PUSH
39865: DOUBLE
39866: LD_VAR 0 15
39870: DEC
39871: ST_TO_ADDR
39872: LD_INT 5
39874: PUSH
39875: FOR_TO
39876: IFFALSE 39990
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39878: LD_ADDR_VAR 0 11
39882: PUSH
39883: LD_VAR 0 13
39887: PPUSH
39888: CALL_OW 250
39892: PPUSH
39893: LD_VAR 0 10
39897: PPUSH
39898: LD_INT 2
39900: PPUSH
39901: CALL_OW 272
39905: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39906: LD_ADDR_VAR 0 12
39910: PUSH
39911: LD_VAR 0 13
39915: PPUSH
39916: CALL_OW 251
39920: PPUSH
39921: LD_VAR 0 10
39925: PPUSH
39926: LD_INT 2
39928: PPUSH
39929: CALL_OW 273
39933: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39934: LD_VAR 0 11
39938: PPUSH
39939: LD_VAR 0 12
39943: PPUSH
39944: CALL_OW 488
39948: PUSH
39949: LD_VAR 0 11
39953: PPUSH
39954: LD_VAR 0 12
39958: PPUSH
39959: CALL_OW 428
39963: NOT
39964: AND
39965: IFFALSE 39988
// begin ComMoveXY ( tmp , _x , _y ) ;
39967: LD_VAR 0 13
39971: PPUSH
39972: LD_VAR 0 11
39976: PPUSH
39977: LD_VAR 0 12
39981: PPUSH
39982: CALL_OW 111
// break ;
39986: GO 39990
// end ; end ;
39988: GO 39875
39990: POP
39991: POP
// end ; end ;
39992: GO 39317
39994: POP
39995: POP
// end ;
39996: LD_VAR 0 8
40000: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40001: LD_INT 0
40003: PPUSH
// result := true ;
40004: LD_ADDR_VAR 0 3
40008: PUSH
40009: LD_INT 1
40011: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40012: LD_VAR 0 2
40016: PUSH
40017: LD_INT 24
40019: DOUBLE
40020: EQUAL
40021: IFTRUE 40031
40023: LD_INT 33
40025: DOUBLE
40026: EQUAL
40027: IFTRUE 40031
40029: GO 40056
40031: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40032: LD_ADDR_VAR 0 3
40036: PUSH
40037: LD_INT 32
40039: PPUSH
40040: LD_VAR 0 1
40044: PPUSH
40045: CALL_OW 321
40049: PUSH
40050: LD_INT 2
40052: EQUAL
40053: ST_TO_ADDR
40054: GO 40372
40056: LD_INT 20
40058: DOUBLE
40059: EQUAL
40060: IFTRUE 40064
40062: GO 40089
40064: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40065: LD_ADDR_VAR 0 3
40069: PUSH
40070: LD_INT 6
40072: PPUSH
40073: LD_VAR 0 1
40077: PPUSH
40078: CALL_OW 321
40082: PUSH
40083: LD_INT 2
40085: EQUAL
40086: ST_TO_ADDR
40087: GO 40372
40089: LD_INT 22
40091: DOUBLE
40092: EQUAL
40093: IFTRUE 40103
40095: LD_INT 36
40097: DOUBLE
40098: EQUAL
40099: IFTRUE 40103
40101: GO 40128
40103: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40104: LD_ADDR_VAR 0 3
40108: PUSH
40109: LD_INT 15
40111: PPUSH
40112: LD_VAR 0 1
40116: PPUSH
40117: CALL_OW 321
40121: PUSH
40122: LD_INT 2
40124: EQUAL
40125: ST_TO_ADDR
40126: GO 40372
40128: LD_INT 30
40130: DOUBLE
40131: EQUAL
40132: IFTRUE 40136
40134: GO 40161
40136: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40137: LD_ADDR_VAR 0 3
40141: PUSH
40142: LD_INT 20
40144: PPUSH
40145: LD_VAR 0 1
40149: PPUSH
40150: CALL_OW 321
40154: PUSH
40155: LD_INT 2
40157: EQUAL
40158: ST_TO_ADDR
40159: GO 40372
40161: LD_INT 28
40163: DOUBLE
40164: EQUAL
40165: IFTRUE 40175
40167: LD_INT 21
40169: DOUBLE
40170: EQUAL
40171: IFTRUE 40175
40173: GO 40200
40175: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40176: LD_ADDR_VAR 0 3
40180: PUSH
40181: LD_INT 21
40183: PPUSH
40184: LD_VAR 0 1
40188: PPUSH
40189: CALL_OW 321
40193: PUSH
40194: LD_INT 2
40196: EQUAL
40197: ST_TO_ADDR
40198: GO 40372
40200: LD_INT 16
40202: DOUBLE
40203: EQUAL
40204: IFTRUE 40208
40206: GO 40233
40208: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40209: LD_ADDR_VAR 0 3
40213: PUSH
40214: LD_INT 84
40216: PPUSH
40217: LD_VAR 0 1
40221: PPUSH
40222: CALL_OW 321
40226: PUSH
40227: LD_INT 2
40229: EQUAL
40230: ST_TO_ADDR
40231: GO 40372
40233: LD_INT 19
40235: DOUBLE
40236: EQUAL
40237: IFTRUE 40247
40239: LD_INT 23
40241: DOUBLE
40242: EQUAL
40243: IFTRUE 40247
40245: GO 40272
40247: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40248: LD_ADDR_VAR 0 3
40252: PUSH
40253: LD_INT 83
40255: PPUSH
40256: LD_VAR 0 1
40260: PPUSH
40261: CALL_OW 321
40265: PUSH
40266: LD_INT 2
40268: EQUAL
40269: ST_TO_ADDR
40270: GO 40372
40272: LD_INT 17
40274: DOUBLE
40275: EQUAL
40276: IFTRUE 40280
40278: GO 40305
40280: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40281: LD_ADDR_VAR 0 3
40285: PUSH
40286: LD_INT 39
40288: PPUSH
40289: LD_VAR 0 1
40293: PPUSH
40294: CALL_OW 321
40298: PUSH
40299: LD_INT 2
40301: EQUAL
40302: ST_TO_ADDR
40303: GO 40372
40305: LD_INT 18
40307: DOUBLE
40308: EQUAL
40309: IFTRUE 40313
40311: GO 40338
40313: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40314: LD_ADDR_VAR 0 3
40318: PUSH
40319: LD_INT 40
40321: PPUSH
40322: LD_VAR 0 1
40326: PPUSH
40327: CALL_OW 321
40331: PUSH
40332: LD_INT 2
40334: EQUAL
40335: ST_TO_ADDR
40336: GO 40372
40338: LD_INT 27
40340: DOUBLE
40341: EQUAL
40342: IFTRUE 40346
40344: GO 40371
40346: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40347: LD_ADDR_VAR 0 3
40351: PUSH
40352: LD_INT 35
40354: PPUSH
40355: LD_VAR 0 1
40359: PPUSH
40360: CALL_OW 321
40364: PUSH
40365: LD_INT 2
40367: EQUAL
40368: ST_TO_ADDR
40369: GO 40372
40371: POP
// end ;
40372: LD_VAR 0 3
40376: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40377: LD_INT 0
40379: PPUSH
40380: PPUSH
40381: PPUSH
40382: PPUSH
40383: PPUSH
40384: PPUSH
40385: PPUSH
40386: PPUSH
40387: PPUSH
40388: PPUSH
40389: PPUSH
// result := false ;
40390: LD_ADDR_VAR 0 6
40394: PUSH
40395: LD_INT 0
40397: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40398: LD_VAR 0 1
40402: NOT
40403: PUSH
40404: LD_VAR 0 1
40408: PPUSH
40409: CALL_OW 266
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: IN
40424: NOT
40425: OR
40426: PUSH
40427: LD_VAR 0 2
40431: NOT
40432: OR
40433: PUSH
40434: LD_VAR 0 5
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: LD_INT 2
40447: PUSH
40448: LD_INT 3
40450: PUSH
40451: LD_INT 4
40453: PUSH
40454: LD_INT 5
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: IN
40465: NOT
40466: OR
40467: PUSH
40468: LD_VAR 0 3
40472: PPUSH
40473: LD_VAR 0 4
40477: PPUSH
40478: CALL_OW 488
40482: NOT
40483: OR
40484: IFFALSE 40488
// exit ;
40486: GO 41224
// side := GetSide ( depot ) ;
40488: LD_ADDR_VAR 0 9
40492: PUSH
40493: LD_VAR 0 1
40497: PPUSH
40498: CALL_OW 255
40502: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40503: LD_VAR 0 9
40507: PPUSH
40508: LD_VAR 0 2
40512: PPUSH
40513: CALL 40001 0 2
40517: NOT
40518: IFFALSE 40522
// exit ;
40520: GO 41224
// pom := GetBase ( depot ) ;
40522: LD_ADDR_VAR 0 10
40526: PUSH
40527: LD_VAR 0 1
40531: PPUSH
40532: CALL_OW 274
40536: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40537: LD_ADDR_VAR 0 11
40541: PUSH
40542: LD_VAR 0 2
40546: PPUSH
40547: LD_VAR 0 1
40551: PPUSH
40552: CALL_OW 248
40556: PPUSH
40557: CALL_OW 450
40561: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40562: LD_VAR 0 10
40566: PPUSH
40567: LD_INT 1
40569: PPUSH
40570: CALL_OW 275
40574: PUSH
40575: LD_VAR 0 11
40579: PUSH
40580: LD_INT 1
40582: ARRAY
40583: GREATEREQUAL
40584: PUSH
40585: LD_VAR 0 10
40589: PPUSH
40590: LD_INT 2
40592: PPUSH
40593: CALL_OW 275
40597: PUSH
40598: LD_VAR 0 11
40602: PUSH
40603: LD_INT 2
40605: ARRAY
40606: GREATEREQUAL
40607: AND
40608: PUSH
40609: LD_VAR 0 10
40613: PPUSH
40614: LD_INT 3
40616: PPUSH
40617: CALL_OW 275
40621: PUSH
40622: LD_VAR 0 11
40626: PUSH
40627: LD_INT 3
40629: ARRAY
40630: GREATEREQUAL
40631: AND
40632: NOT
40633: IFFALSE 40637
// exit ;
40635: GO 41224
// if GetBType ( depot ) = b_depot then
40637: LD_VAR 0 1
40641: PPUSH
40642: CALL_OW 266
40646: PUSH
40647: LD_INT 0
40649: EQUAL
40650: IFFALSE 40662
// dist := 28 else
40652: LD_ADDR_VAR 0 14
40656: PUSH
40657: LD_INT 28
40659: ST_TO_ADDR
40660: GO 40670
// dist := 36 ;
40662: LD_ADDR_VAR 0 14
40666: PUSH
40667: LD_INT 36
40669: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40670: LD_VAR 0 1
40674: PPUSH
40675: LD_VAR 0 3
40679: PPUSH
40680: LD_VAR 0 4
40684: PPUSH
40685: CALL_OW 297
40689: PUSH
40690: LD_VAR 0 14
40694: GREATER
40695: IFFALSE 40699
// exit ;
40697: GO 41224
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40699: LD_ADDR_VAR 0 12
40703: PUSH
40704: LD_VAR 0 2
40708: PPUSH
40709: LD_VAR 0 3
40713: PPUSH
40714: LD_VAR 0 4
40718: PPUSH
40719: LD_VAR 0 5
40723: PPUSH
40724: LD_VAR 0 1
40728: PPUSH
40729: CALL_OW 248
40733: PPUSH
40734: LD_INT 0
40736: PPUSH
40737: CALL 41229 0 6
40741: ST_TO_ADDR
// if not hexes then
40742: LD_VAR 0 12
40746: NOT
40747: IFFALSE 40751
// exit ;
40749: GO 41224
// hex := GetHexInfo ( x , y ) ;
40751: LD_ADDR_VAR 0 15
40755: PUSH
40756: LD_VAR 0 3
40760: PPUSH
40761: LD_VAR 0 4
40765: PPUSH
40766: CALL_OW 546
40770: ST_TO_ADDR
// if hex [ 1 ] then
40771: LD_VAR 0 15
40775: PUSH
40776: LD_INT 1
40778: ARRAY
40779: IFFALSE 40783
// exit ;
40781: GO 41224
// height := hex [ 2 ] ;
40783: LD_ADDR_VAR 0 13
40787: PUSH
40788: LD_VAR 0 15
40792: PUSH
40793: LD_INT 2
40795: ARRAY
40796: ST_TO_ADDR
// for i = 1 to hexes do
40797: LD_ADDR_VAR 0 7
40801: PUSH
40802: DOUBLE
40803: LD_INT 1
40805: DEC
40806: ST_TO_ADDR
40807: LD_VAR 0 12
40811: PUSH
40812: FOR_TO
40813: IFFALSE 41143
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40815: LD_VAR 0 12
40819: PUSH
40820: LD_VAR 0 7
40824: ARRAY
40825: PUSH
40826: LD_INT 1
40828: ARRAY
40829: PPUSH
40830: LD_VAR 0 12
40834: PUSH
40835: LD_VAR 0 7
40839: ARRAY
40840: PUSH
40841: LD_INT 2
40843: ARRAY
40844: PPUSH
40845: CALL_OW 488
40849: NOT
40850: PUSH
40851: LD_VAR 0 12
40855: PUSH
40856: LD_VAR 0 7
40860: ARRAY
40861: PUSH
40862: LD_INT 1
40864: ARRAY
40865: PPUSH
40866: LD_VAR 0 12
40870: PUSH
40871: LD_VAR 0 7
40875: ARRAY
40876: PUSH
40877: LD_INT 2
40879: ARRAY
40880: PPUSH
40881: CALL_OW 428
40885: PUSH
40886: LD_INT 0
40888: GREATER
40889: OR
40890: PUSH
40891: LD_VAR 0 12
40895: PUSH
40896: LD_VAR 0 7
40900: ARRAY
40901: PUSH
40902: LD_INT 1
40904: ARRAY
40905: PPUSH
40906: LD_VAR 0 12
40910: PUSH
40911: LD_VAR 0 7
40915: ARRAY
40916: PUSH
40917: LD_INT 2
40919: ARRAY
40920: PPUSH
40921: CALL_OW 351
40925: OR
40926: IFFALSE 40932
// exit ;
40928: POP
40929: POP
40930: GO 41224
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40932: LD_ADDR_VAR 0 8
40936: PUSH
40937: LD_VAR 0 12
40941: PUSH
40942: LD_VAR 0 7
40946: ARRAY
40947: PUSH
40948: LD_INT 1
40950: ARRAY
40951: PPUSH
40952: LD_VAR 0 12
40956: PUSH
40957: LD_VAR 0 7
40961: ARRAY
40962: PUSH
40963: LD_INT 2
40965: ARRAY
40966: PPUSH
40967: CALL_OW 546
40971: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40972: LD_VAR 0 8
40976: PUSH
40977: LD_INT 1
40979: ARRAY
40980: PUSH
40981: LD_VAR 0 8
40985: PUSH
40986: LD_INT 2
40988: ARRAY
40989: PUSH
40990: LD_VAR 0 13
40994: PUSH
40995: LD_INT 2
40997: PLUS
40998: GREATER
40999: OR
41000: PUSH
41001: LD_VAR 0 8
41005: PUSH
41006: LD_INT 2
41008: ARRAY
41009: PUSH
41010: LD_VAR 0 13
41014: PUSH
41015: LD_INT 2
41017: MINUS
41018: LESS
41019: OR
41020: PUSH
41021: LD_VAR 0 8
41025: PUSH
41026: LD_INT 3
41028: ARRAY
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 8
41035: PUSH
41036: LD_INT 9
41038: PUSH
41039: LD_INT 10
41041: PUSH
41042: LD_INT 11
41044: PUSH
41045: LD_INT 12
41047: PUSH
41048: LD_INT 13
41050: PUSH
41051: LD_INT 16
41053: PUSH
41054: LD_INT 17
41056: PUSH
41057: LD_INT 18
41059: PUSH
41060: LD_INT 19
41062: PUSH
41063: LD_INT 20
41065: PUSH
41066: LD_INT 21
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: IN
41084: NOT
41085: OR
41086: PUSH
41087: LD_VAR 0 8
41091: PUSH
41092: LD_INT 5
41094: ARRAY
41095: NOT
41096: OR
41097: PUSH
41098: LD_VAR 0 8
41102: PUSH
41103: LD_INT 6
41105: ARRAY
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: LD_INT 7
41115: PUSH
41116: LD_INT 9
41118: PUSH
41119: LD_INT 10
41121: PUSH
41122: LD_INT 11
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: IN
41133: NOT
41134: OR
41135: IFFALSE 41141
// exit ;
41137: POP
41138: POP
41139: GO 41224
// end ;
41141: GO 40812
41143: POP
41144: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41145: LD_VAR 0 9
41149: PPUSH
41150: LD_VAR 0 3
41154: PPUSH
41155: LD_VAR 0 4
41159: PPUSH
41160: LD_INT 20
41162: PPUSH
41163: CALL 33176 0 4
41167: PUSH
41168: LD_INT 4
41170: ARRAY
41171: IFFALSE 41175
// exit ;
41173: GO 41224
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41175: LD_VAR 0 2
41179: PUSH
41180: LD_INT 29
41182: PUSH
41183: LD_INT 30
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: IN
41190: PUSH
41191: LD_VAR 0 3
41195: PPUSH
41196: LD_VAR 0 4
41200: PPUSH
41201: LD_VAR 0 9
41205: PPUSH
41206: CALL_OW 440
41210: NOT
41211: AND
41212: IFFALSE 41216
// exit ;
41214: GO 41224
// result := true ;
41216: LD_ADDR_VAR 0 6
41220: PUSH
41221: LD_INT 1
41223: ST_TO_ADDR
// end ;
41224: LD_VAR 0 6
41228: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41229: LD_INT 0
41231: PPUSH
41232: PPUSH
41233: PPUSH
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
41239: PPUSH
41240: PPUSH
41241: PPUSH
41242: PPUSH
41243: PPUSH
41244: PPUSH
41245: PPUSH
41246: PPUSH
41247: PPUSH
41248: PPUSH
41249: PPUSH
41250: PPUSH
41251: PPUSH
41252: PPUSH
41253: PPUSH
41254: PPUSH
41255: PPUSH
41256: PPUSH
41257: PPUSH
41258: PPUSH
41259: PPUSH
41260: PPUSH
41261: PPUSH
41262: PPUSH
41263: PPUSH
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
41269: PPUSH
41270: PPUSH
41271: PPUSH
41272: PPUSH
41273: PPUSH
41274: PPUSH
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
41279: PPUSH
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
// result = [ ] ;
41289: LD_ADDR_VAR 0 7
41293: PUSH
41294: EMPTY
41295: ST_TO_ADDR
// temp_list = [ ] ;
41296: LD_ADDR_VAR 0 9
41300: PUSH
41301: EMPTY
41302: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41303: LD_VAR 0 4
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: LD_INT 3
41319: PUSH
41320: LD_INT 4
41322: PUSH
41323: LD_INT 5
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: IN
41334: NOT
41335: PUSH
41336: LD_VAR 0 1
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: IN
41351: PUSH
41352: LD_VAR 0 5
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: LD_INT 3
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: LIST
41370: IN
41371: NOT
41372: AND
41373: OR
41374: IFFALSE 41378
// exit ;
41376: GO 59769
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41378: LD_VAR 0 1
41382: PUSH
41383: LD_INT 6
41385: PUSH
41386: LD_INT 7
41388: PUSH
41389: LD_INT 8
41391: PUSH
41392: LD_INT 13
41394: PUSH
41395: LD_INT 12
41397: PUSH
41398: LD_INT 15
41400: PUSH
41401: LD_INT 11
41403: PUSH
41404: LD_INT 14
41406: PUSH
41407: LD_INT 10
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: IN
41421: IFFALSE 41431
// btype = b_lab ;
41423: LD_ADDR_VAR 0 1
41427: PUSH
41428: LD_INT 6
41430: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41431: LD_VAR 0 6
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 2
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: LIST
41449: IN
41450: NOT
41451: PUSH
41452: LD_VAR 0 1
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: LD_INT 3
41468: PUSH
41469: LD_INT 6
41471: PUSH
41472: LD_INT 36
41474: PUSH
41475: LD_INT 4
41477: PUSH
41478: LD_INT 5
41480: PUSH
41481: LD_INT 31
41483: PUSH
41484: LD_INT 32
41486: PUSH
41487: LD_INT 33
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: IN
41503: NOT
41504: PUSH
41505: LD_VAR 0 6
41509: PUSH
41510: LD_INT 1
41512: EQUAL
41513: AND
41514: OR
41515: PUSH
41516: LD_VAR 0 1
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: LD_INT 3
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: IN
41531: NOT
41532: PUSH
41533: LD_VAR 0 6
41537: PUSH
41538: LD_INT 2
41540: EQUAL
41541: AND
41542: OR
41543: IFFALSE 41553
// mode = 0 ;
41545: LD_ADDR_VAR 0 6
41549: PUSH
41550: LD_INT 0
41552: ST_TO_ADDR
// case mode of 0 :
41553: LD_VAR 0 6
41557: PUSH
41558: LD_INT 0
41560: DOUBLE
41561: EQUAL
41562: IFTRUE 41566
41564: GO 53019
41566: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41567: LD_ADDR_VAR 0 11
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 0
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: LD_INT 3
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 3
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41760: LD_ADDR_VAR 0 12
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: LD_INT 0
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 2
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 2
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: NEG
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: NEG
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 2
41894: NEG
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 2
41906: NEG
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 3
41917: NEG
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 3
41928: NEG
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41956: LD_ADDR_VAR 0 13
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 0
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: NEG
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 2
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 2
42079: NEG
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 2
42091: NEG
42092: PUSH
42093: LD_INT 2
42095: NEG
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 2
42103: NEG
42104: PUSH
42105: LD_INT 3
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 3
42115: NEG
42116: PUSH
42117: LD_INT 2
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 3
42127: NEG
42128: PUSH
42129: LD_INT 3
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42155: LD_ADDR_VAR 0 14
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: LD_INT 2
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: LD_INT 2
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: LD_INT 3
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 3
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 2
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42351: LD_ADDR_VAR 0 15
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 1
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 3
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 3
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42544: LD_ADDR_VAR 0 16
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 2
42637: PUSH
42638: LD_INT 1
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 2
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 2
42679: NEG
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 3
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 3
42701: PUSH
42702: LD_INT 3
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: LD_INT 3
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42737: LD_ADDR_VAR 0 17
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: NEG
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: LD_INT 2
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 2
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: LD_INT 2
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: NEG
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: NEG
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: LD_INT 2
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42967: LD_ADDR_VAR 0 18
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 1
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 0
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: LD_INT 1
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: LD_INT 2
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: LD_INT 2
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: LD_INT 2
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43197: LD_ADDR_VAR 0 19
43201: PUSH
43202: LD_INT 0
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: LD_INT 2
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: LD_INT 2
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43427: LD_ADDR_VAR 0 20
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 1
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 0
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: NEG
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: NEG
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43657: LD_ADDR_VAR 0 21
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: LD_INT 1
43730: NEG
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: LD_INT 2
43742: NEG
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 2
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43887: LD_ADDR_VAR 0 22
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 0
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 0
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: LD_INT 2
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 2
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 2
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 2
44074: NEG
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: LD_INT 2
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44117: LD_ADDR_VAR 0 23
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 0
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: LD_INT 0
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: LD_INT 2
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 2
44328: NEG
44329: PUSH
44330: LD_INT 3
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: LD_INT 3
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 2
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: LD_INT 1
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44397: LD_ADDR_VAR 0 24
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: NEG
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 3
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 3
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44673: LD_ADDR_VAR 0 25
44677: PUSH
44678: LD_INT 0
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 0
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 2
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 2
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 2
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: LD_INT 2
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 3
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 3
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 3
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 3
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44947: LD_ADDR_VAR 0 26
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 2
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 2
45082: PUSH
45083: LD_INT 2
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: LD_INT 2
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: LD_INT 2
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: LD_INT 3
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 3
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45223: LD_ADDR_VAR 0 27
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 2
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: LD_INT 2
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: LD_INT 2
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 3
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 3
45468: NEG
45469: PUSH
45470: LD_INT 2
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45503: LD_ADDR_VAR 0 28
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: LD_INT 2
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 2
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: LD_INT 3
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: LD_INT 3
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 3
45738: NEG
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 3
45750: NEG
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45785: LD_ADDR_VAR 0 29
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: LD_INT 2
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: LD_INT 2
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: NEG
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: LD_INT 3
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 3
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 3
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 3
46029: NEG
46030: PUSH
46031: LD_INT 2
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46064: LD_ADDR_VAR 0 30
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 3
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 3
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 3
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 3
46307: NEG
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46342: LD_ADDR_VAR 0 31
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 2
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: LD_INT 3
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 3
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: LD_INT 3
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 3
46585: NEG
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46620: LD_ADDR_VAR 0 32
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: LD_INT 2
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 3
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 3
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: LD_INT 3
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 3
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46898: LD_ADDR_VAR 0 33
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: NEG
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 2
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 2
47064: NEG
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: LD_INT 2
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: LD_INT 3
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 3
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: LD_INT 3
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 3
47142: NEG
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47177: LD_ADDR_VAR 0 34
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: LD_INT 2
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: LD_INT 3
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 3
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 2
47401: PUSH
47402: LD_INT 3
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 3
47422: NEG
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47457: LD_ADDR_VAR 0 35
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: NEG
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47569: LD_ADDR_VAR 0 36
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47681: LD_ADDR_VAR 0 37
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47793: LD_ADDR_VAR 0 38
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 2
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47905: LD_ADDR_VAR 0 39
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 1
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 2
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48017: LD_ADDR_VAR 0 40
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48129: LD_ADDR_VAR 0 41
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: LD_INT 1
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: LD_INT 3
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 3
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 3
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 3
48372: PUSH
48373: LD_INT 3
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: LD_INT 3
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 3
48403: NEG
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 3
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 3
48426: NEG
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 3
48438: NEG
48439: PUSH
48440: LD_INT 3
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48479: LD_ADDR_VAR 0 42
48483: PUSH
48484: LD_INT 0
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 1
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: LD_INT 2
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 2
48657: NEG
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: LD_INT 3
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: LD_INT 3
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 3
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 3
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 3
48725: PUSH
48726: LD_INT 3
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 3
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 3
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: LD_INT 3
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 3
48776: NEG
48777: PUSH
48778: LD_INT 2
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 3
48788: NEG
48789: PUSH
48790: LD_INT 3
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48829: LD_ADDR_VAR 0 43
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 2
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 3
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 3
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 2
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 3
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 3
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 3
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 2
49114: NEG
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 3
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49177: LD_ADDR_VAR 0 44
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 2
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: NEG
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: LD_INT 3
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 2
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 3
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 3
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 3
49420: PUSH
49421: LD_INT 3
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: LD_INT 3
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 3
49451: NEG
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 3
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 3
49474: NEG
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 3
49486: NEG
49487: PUSH
49488: LD_INT 3
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49527: LD_ADDR_VAR 0 45
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: NEG
49706: PUSH
49707: LD_INT 2
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: NEG
49718: PUSH
49719: LD_INT 3
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: LD_INT 3
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 3
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 3
49763: PUSH
49764: LD_INT 2
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: PUSH
49774: LD_INT 3
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 3
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: LD_INT 3
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 3
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 3
49824: NEG
49825: PUSH
49826: LD_INT 2
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 3
49836: NEG
49837: PUSH
49838: LD_INT 3
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49877: LD_ADDR_VAR 0 46
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 2
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: NEG
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 3
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 3
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 2
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 2
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 3
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 3
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 3
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 3
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 2
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 3
50173: NEG
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 3
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50225: LD_ADDR_VAR 0 47
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: LD_INT 2
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: LD_INT 2
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 2
50352: NEG
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50376: LD_ADDR_VAR 0 48
50380: PUSH
50381: LD_INT 0
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 2
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 2
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50523: LD_ADDR_VAR 0 49
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50667: LD_ADDR_VAR 0 50
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: LD_INT 2
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50811: LD_ADDR_VAR 0 51
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 2
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: LD_INT 2
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: LD_INT 1
50938: NEG
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50958: LD_ADDR_VAR 0 52
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 2
51073: NEG
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: NEG
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51109: LD_ADDR_VAR 0 53
51113: PUSH
51114: LD_INT 0
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 1
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: LD_INT 1
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: LD_INT 2
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: LD_INT 2
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51339: LD_ADDR_VAR 0 54
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 0
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 0
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51569: LD_ADDR_VAR 0 55
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 2
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 2
51704: PUSH
51705: LD_INT 2
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 2
51768: NEG
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51799: LD_ADDR_VAR 0 56
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: LD_INT 0
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 0
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 2
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: NEG
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52029: LD_ADDR_VAR 0 57
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: NEG
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52259: LD_ADDR_VAR 0 58
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: LD_INT 0
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: NEG
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 2
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 2
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: PUSH
52405: LD_INT 2
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 1
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52489: LD_ADDR_VAR 0 59
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52577: LD_ADDR_VAR 0 60
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52665: LD_ADDR_VAR 0 61
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: NEG
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52753: LD_ADDR_VAR 0 62
52757: PUSH
52758: LD_INT 0
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 0
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52841: LD_ADDR_VAR 0 63
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52929: LD_ADDR_VAR 0 64
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 0
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: ST_TO_ADDR
// end ; 1 :
53017: GO 58914
53019: LD_INT 1
53021: DOUBLE
53022: EQUAL
53023: IFTRUE 53027
53025: GO 55650
53027: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53028: LD_ADDR_VAR 0 11
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 3
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53072: LD_ADDR_VAR 0 12
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 3
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 3
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: LIST
53112: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53113: LD_ADDR_VAR 0 13
53117: PUSH
53118: LD_INT 3
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 3
53130: PUSH
53131: LD_INT 3
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: LD_INT 3
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: LIST
53152: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53153: LD_ADDR_VAR 0 14
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: LD_INT 3
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 3
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: LIST
53193: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53194: LD_ADDR_VAR 0 15
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: LD_INT 1
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 3
53212: NEG
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 3
53223: NEG
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: LIST
53237: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53238: LD_ADDR_VAR 0 16
53242: PUSH
53243: LD_INT 2
53245: NEG
53246: PUSH
53247: LD_INT 3
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 3
53257: NEG
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 3
53269: NEG
53270: PUSH
53271: LD_INT 3
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: LIST
53283: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53284: LD_ADDR_VAR 0 17
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: LD_INT 3
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 3
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: LIST
53327: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53328: LD_ADDR_VAR 0 18
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 3
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 3
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: LIST
53368: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53369: LD_ADDR_VAR 0 19
53373: PUSH
53374: LD_INT 3
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 3
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: LD_INT 3
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: LIST
53408: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53409: LD_ADDR_VAR 0 20
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: LD_INT 3
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53450: LD_ADDR_VAR 0 21
53454: PUSH
53455: LD_INT 2
53457: NEG
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 3
53468: NEG
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 3
53479: NEG
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: LIST
53493: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53494: LD_ADDR_VAR 0 22
53498: PUSH
53499: LD_INT 2
53501: NEG
53502: PUSH
53503: LD_INT 3
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 3
53513: NEG
53514: PUSH
53515: LD_INT 2
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 3
53525: NEG
53526: PUSH
53527: LD_INT 3
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: LIST
53539: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53540: LD_ADDR_VAR 0 23
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 3
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 4
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 3
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: LIST
53583: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53584: LD_ADDR_VAR 0 24
53588: PUSH
53589: LD_INT 3
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 3
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 4
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: LIST
53624: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53625: LD_ADDR_VAR 0 25
53629: PUSH
53630: LD_INT 3
53632: PUSH
53633: LD_INT 3
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 4
53642: PUSH
53643: LD_INT 3
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: LD_INT 4
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: LIST
53664: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53665: LD_ADDR_VAR 0 26
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 3
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 4
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: NEG
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: LIST
53705: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53706: LD_ADDR_VAR 0 27
53710: PUSH
53711: LD_INT 3
53713: NEG
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 3
53724: NEG
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 4
53735: NEG
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: LIST
53749: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53750: LD_ADDR_VAR 0 28
53754: PUSH
53755: LD_INT 3
53757: NEG
53758: PUSH
53759: LD_INT 3
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 3
53769: NEG
53770: PUSH
53771: LD_INT 4
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 4
53781: NEG
53782: PUSH
53783: LD_INT 3
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: LIST
53795: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53796: LD_ADDR_VAR 0 29
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: LD_INT 3
53818: NEG
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 4
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 4
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 5
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 5
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 1
53894: PUSH
53895: LD_INT 4
53897: NEG
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 6
53909: NEG
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 6
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 5
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53951: LD_ADDR_VAR 0 30
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 1
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 3
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 3
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 3
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 4
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 4
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 4
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 5
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 5
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 5
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 6
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 6
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54094: LD_ADDR_VAR 0 31
54098: PUSH
54099: LD_INT 3
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 3
54111: PUSH
54112: LD_INT 3
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 2
54121: PUSH
54122: LD_INT 3
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 4
54131: PUSH
54132: LD_INT 3
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 4
54141: PUSH
54142: LD_INT 4
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 3
54151: PUSH
54152: LD_INT 4
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 5
54161: PUSH
54162: LD_INT 4
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 5
54171: PUSH
54172: LD_INT 5
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 4
54181: PUSH
54182: LD_INT 5
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 6
54191: PUSH
54192: LD_INT 5
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 6
54201: PUSH
54202: LD_INT 6
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 5
54211: PUSH
54212: LD_INT 6
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54233: LD_ADDR_VAR 0 32
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 3
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 3
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: LD_INT 4
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 4
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 3
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 5
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 5
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 4
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 6
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 6
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 5
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54376: LD_ADDR_VAR 0 33
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 3
54394: NEG
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 3
54405: NEG
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 3
54417: NEG
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 4
54428: NEG
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 4
54439: NEG
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 4
54451: NEG
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 5
54462: NEG
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 5
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 5
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 6
54496: NEG
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 6
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54531: LD_ADDR_VAR 0 34
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 3
54550: NEG
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 3
54562: NEG
54563: PUSH
54564: LD_INT 3
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 3
54574: NEG
54575: PUSH
54576: LD_INT 4
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 4
54586: NEG
54587: PUSH
54588: LD_INT 3
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 4
54598: NEG
54599: PUSH
54600: LD_INT 4
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 4
54610: NEG
54611: PUSH
54612: LD_INT 5
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 5
54622: NEG
54623: PUSH
54624: LD_INT 4
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 5
54634: NEG
54635: PUSH
54636: LD_INT 5
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 5
54646: NEG
54647: PUSH
54648: LD_INT 6
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 6
54658: NEG
54659: PUSH
54660: LD_INT 5
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 6
54670: NEG
54671: PUSH
54672: LD_INT 6
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54694: LD_ADDR_VAR 0 41
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 2
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: LD_INT 3
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 2
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54738: LD_ADDR_VAR 0 42
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 3
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: LIST
54778: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54779: LD_ADDR_VAR 0 43
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 2
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 3
54796: PUSH
54797: LD_INT 2
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 3
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: LIST
54818: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54819: LD_ADDR_VAR 0 44
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: LD_INT 3
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: LIST
54859: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54860: LD_ADDR_VAR 0 45
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: LIST
54903: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54904: LD_ADDR_VAR 0 46
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: LD_INT 2
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 2
54923: NEG
54924: PUSH
54925: LD_INT 3
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: LD_INT 2
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: LIST
54949: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54950: LD_ADDR_VAR 0 47
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: LD_INT 3
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 3
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54983: LD_ADDR_VAR 0 48
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55014: LD_ADDR_VAR 0 49
55018: PUSH
55019: LD_INT 3
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 3
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55043: LD_ADDR_VAR 0 50
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: LD_INT 3
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 3
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55072: LD_ADDR_VAR 0 51
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55103: LD_ADDR_VAR 0 52
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 3
55122: NEG
55123: PUSH
55124: LD_INT 2
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55136: LD_ADDR_VAR 0 53
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: LD_INT 3
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 3
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: LIST
55179: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55180: LD_ADDR_VAR 0 54
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 3
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55221: LD_ADDR_VAR 0 55
55225: PUSH
55226: LD_INT 3
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 3
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 2
55248: PUSH
55249: LD_INT 3
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: LIST
55260: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55261: LD_ADDR_VAR 0 56
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 3
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: NEG
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: LIST
55301: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55302: LD_ADDR_VAR 0 57
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: NEG
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 3
55331: NEG
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: LIST
55345: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55346: LD_ADDR_VAR 0 58
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: LD_INT 3
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 3
55365: NEG
55366: PUSH
55367: LD_INT 2
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 3
55377: NEG
55378: PUSH
55379: LD_INT 3
55381: NEG
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: LIST
55391: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55392: LD_ADDR_VAR 0 59
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 2
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 1
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: LIST
55435: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55436: LD_ADDR_VAR 0 60
55440: PUSH
55441: LD_INT 1
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 2
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: PUSH
55465: LD_INT 1
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: LIST
55476: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55477: LD_ADDR_VAR 0 61
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 1
55504: PUSH
55505: LD_INT 2
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: LIST
55516: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55517: LD_ADDR_VAR 0 62
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55558: LD_ADDR_VAR 0 63
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: LIST
55601: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55602: LD_ADDR_VAR 0 64
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: LIST
55647: ST_TO_ADDR
// end ; 2 :
55648: GO 58914
55650: LD_INT 2
55652: DOUBLE
55653: EQUAL
55654: IFTRUE 55658
55656: GO 58913
55658: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55659: LD_ADDR_VAR 0 29
55663: PUSH
55664: LD_INT 4
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 4
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 5
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 5
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 4
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 3
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 3
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 3
55738: PUSH
55739: LD_INT 2
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 5
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 3
55759: PUSH
55760: LD_INT 3
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 3
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 4
55779: PUSH
55780: LD_INT 3
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 4
55789: PUSH
55790: LD_INT 4
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 3
55799: PUSH
55800: LD_INT 4
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 2
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 2
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 4
55829: PUSH
55830: LD_INT 2
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: LD_INT 4
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 4
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: LD_INT 3
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 4
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: LD_INT 5
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 0
55889: PUSH
55890: LD_INT 5
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 4
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: NEG
55911: PUSH
55912: LD_INT 3
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 2
55921: PUSH
55922: LD_INT 5
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: LD_INT 3
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 3
55942: NEG
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: NEG
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 3
55987: NEG
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 4
55998: NEG
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 4
56009: NEG
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 4
56021: NEG
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 4
56044: NEG
56045: PUSH
56046: LD_INT 4
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 4
56056: NEG
56057: PUSH
56058: LD_INT 5
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: LD_INT 4
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 3
56080: NEG
56081: PUSH
56082: LD_INT 3
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 4
56092: NEG
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 5
56104: NEG
56105: PUSH
56106: LD_INT 4
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 5
56116: NEG
56117: PUSH
56118: LD_INT 5
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 3
56128: NEG
56129: PUSH
56130: LD_INT 5
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 5
56140: NEG
56141: PUSH
56142: LD_INT 3
56144: NEG
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56197: LD_ADDR_VAR 0 30
56201: PUSH
56202: LD_INT 4
56204: PUSH
56205: LD_INT 4
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 4
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 5
56224: PUSH
56225: LD_INT 4
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 5
56234: PUSH
56235: LD_INT 5
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 4
56244: PUSH
56245: LD_INT 5
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: PUSH
56255: LD_INT 4
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 3
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 5
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 3
56284: PUSH
56285: LD_INT 5
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: LD_INT 3
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 4
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 4
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 3
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: LD_INT 2
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: LD_INT 4
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 2
56376: NEG
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 4
56387: NEG
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 4
56398: NEG
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 3
56410: NEG
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 3
56421: NEG
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 4
56432: NEG
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 5
56443: NEG
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 5
56454: NEG
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 5
56466: NEG
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 3
56478: NEG
56479: PUSH
56480: LD_INT 2
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: LD_INT 3
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 3
56501: NEG
56502: PUSH
56503: LD_INT 4
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: LD_INT 3
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 3
56537: NEG
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 4
56549: NEG
56550: PUSH
56551: LD_INT 3
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 4
56561: NEG
56562: PUSH
56563: LD_INT 4
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 2
56573: NEG
56574: PUSH
56575: LD_INT 4
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 4
56585: NEG
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: LD_INT 4
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 5
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 4
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: LD_INT 3
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 3
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: LD_INT 4
56656: NEG
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 5
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: LD_INT 3
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 2
56687: NEG
56688: PUSH
56689: LD_INT 5
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56744: LD_ADDR_VAR 0 31
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 4
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 3
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 4
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: LD_INT 5
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 5
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: LD_INT 4
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: LD_INT 3
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: LD_INT 5
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: NEG
56834: PUSH
56835: LD_INT 3
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 3
56844: NEG
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 3
56855: NEG
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 2
56867: NEG
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: NEG
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 3
56889: NEG
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 4
56900: NEG
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 4
56911: NEG
56912: PUSH
56913: LD_INT 1
56915: NEG
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 4
56923: NEG
56924: PUSH
56925: LD_INT 2
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 4
56946: NEG
56947: PUSH
56948: LD_INT 4
56950: NEG
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 4
56958: NEG
56959: PUSH
56960: LD_INT 5
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 3
56970: NEG
56971: PUSH
56972: LD_INT 4
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 3
56982: NEG
56983: PUSH
56984: LD_INT 3
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 4
56994: NEG
56995: PUSH
56996: LD_INT 3
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 5
57006: NEG
57007: PUSH
57008: LD_INT 4
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 5
57018: NEG
57019: PUSH
57020: LD_INT 5
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 3
57030: NEG
57031: PUSH
57032: LD_INT 5
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 5
57042: NEG
57043: PUSH
57044: LD_INT 3
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 3
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 4
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: LD_INT 2
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 2
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 3
57113: NEG
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 4
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: NEG
57145: PUSH
57146: LD_INT 4
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 4
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 4
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 5
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 5
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 4
57197: PUSH
57198: LD_INT 1
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 3
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 3
57217: PUSH
57218: LD_INT 1
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 3
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 5
57239: PUSH
57240: LD_INT 2
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57294: LD_ADDR_VAR 0 32
57298: PUSH
57299: LD_INT 4
57301: NEG
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 4
57312: NEG
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 3
57335: NEG
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 4
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 5
57357: NEG
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 5
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 5
57380: NEG
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 3
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 3
57403: NEG
57404: PUSH
57405: LD_INT 3
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: LD_INT 4
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 3
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: LD_INT 2
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 4
57463: NEG
57464: PUSH
57465: LD_INT 3
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 4
57475: NEG
57476: PUSH
57477: LD_INT 4
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: LD_INT 4
57491: NEG
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 4
57499: NEG
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: LD_INT 4
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 5
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 4
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: LD_INT 3
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 3
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 4
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: NEG
57579: PUSH
57580: LD_INT 5
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: LD_INT 3
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: LD_INT 5
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 3
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 4
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 4
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: LD_INT 2
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 4
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 4
57706: PUSH
57707: LD_INT 4
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 4
57716: PUSH
57717: LD_INT 3
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 5
57726: PUSH
57727: LD_INT 4
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 5
57736: PUSH
57737: LD_INT 5
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 4
57746: PUSH
57747: LD_INT 5
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 3
57756: PUSH
57757: LD_INT 4
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: LD_INT 3
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 5
57776: PUSH
57777: LD_INT 3
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 3
57786: PUSH
57787: LD_INT 5
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57841: LD_ADDR_VAR 0 33
57845: PUSH
57846: LD_INT 4
57848: NEG
57849: PUSH
57850: LD_INT 4
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 4
57860: NEG
57861: PUSH
57862: LD_INT 5
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 3
57872: NEG
57873: PUSH
57874: LD_INT 4
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: NEG
57885: PUSH
57886: LD_INT 3
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 4
57896: NEG
57897: PUSH
57898: LD_INT 3
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 5
57908: NEG
57909: PUSH
57910: LD_INT 4
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 5
57920: NEG
57921: PUSH
57922: LD_INT 5
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: NEG
57933: PUSH
57934: LD_INT 5
57936: NEG
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 5
57944: NEG
57945: PUSH
57946: LD_INT 3
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 0
57956: PUSH
57957: LD_INT 3
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: LD_INT 4
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 3
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: LD_INT 2
58003: NEG
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 3
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: LD_INT 4
58027: NEG
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 2
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: LD_INT 4
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 4
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 4
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 5
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 5
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 4
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 3
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 5
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 3
58151: PUSH
58152: LD_INT 3
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 4
58171: PUSH
58172: LD_INT 3
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 4
58181: PUSH
58182: LD_INT 4
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: LD_INT 4
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 2
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: LD_INT 2
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 4
58221: PUSH
58222: LD_INT 2
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 2
58231: PUSH
58232: LD_INT 4
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: LD_INT 4
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: LD_INT 3
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: LD_INT 4
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 5
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 5
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: LD_INT 4
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: LD_INT 3
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: LD_INT 5
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 2
58323: NEG
58324: PUSH
58325: LD_INT 3
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58379: LD_ADDR_VAR 0 34
58383: PUSH
58384: LD_INT 0
58386: PUSH
58387: LD_INT 4
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: LD_INT 5
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: LD_INT 4
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 3
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: LD_INT 3
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: LD_INT 4
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: LD_INT 5
58457: NEG
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 2
58465: PUSH
58466: LD_INT 3
58468: NEG
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 2
58476: NEG
58477: PUSH
58478: LD_INT 5
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 3
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 4
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 4
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 3
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 2
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 4
58571: PUSH
58572: LD_INT 2
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 4
58581: PUSH
58582: LD_INT 4
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 4
58591: PUSH
58592: LD_INT 3
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 5
58601: PUSH
58602: LD_INT 4
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 5
58611: PUSH
58612: LD_INT 5
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 4
58621: PUSH
58622: LD_INT 5
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 3
58631: PUSH
58632: LD_INT 4
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: LD_INT 3
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 5
58651: PUSH
58652: LD_INT 3
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 3
58661: PUSH
58662: LD_INT 5
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 3
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: LD_INT 3
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 4
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 4
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: NEG
58722: PUSH
58723: LD_INT 3
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: NEG
58733: PUSH
58734: LD_INT 2
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: LD_INT 4
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: LD_INT 2
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 4
58764: NEG
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 4
58775: NEG
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 3
58787: NEG
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 3
58798: NEG
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 4
58809: NEG
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 5
58820: NEG
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 5
58831: NEG
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 5
58843: NEG
58844: PUSH
58845: LD_INT 2
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: ST_TO_ADDR
// end ; end ;
58911: GO 58914
58913: POP
// case btype of b_depot , b_warehouse :
58914: LD_VAR 0 1
58918: PUSH
58919: LD_INT 0
58921: DOUBLE
58922: EQUAL
58923: IFTRUE 58933
58925: LD_INT 1
58927: DOUBLE
58928: EQUAL
58929: IFTRUE 58933
58931: GO 59134
58933: POP
// case nation of nation_american :
58934: LD_VAR 0 5
58938: PUSH
58939: LD_INT 1
58941: DOUBLE
58942: EQUAL
58943: IFTRUE 58947
58945: GO 59003
58947: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58948: LD_ADDR_VAR 0 9
58952: PUSH
58953: LD_VAR 0 11
58957: PUSH
58958: LD_VAR 0 12
58962: PUSH
58963: LD_VAR 0 13
58967: PUSH
58968: LD_VAR 0 14
58972: PUSH
58973: LD_VAR 0 15
58977: PUSH
58978: LD_VAR 0 16
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: PUSH
58991: LD_VAR 0 4
58995: PUSH
58996: LD_INT 1
58998: PLUS
58999: ARRAY
59000: ST_TO_ADDR
59001: GO 59132
59003: LD_INT 2
59005: DOUBLE
59006: EQUAL
59007: IFTRUE 59011
59009: GO 59067
59011: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59012: LD_ADDR_VAR 0 9
59016: PUSH
59017: LD_VAR 0 17
59021: PUSH
59022: LD_VAR 0 18
59026: PUSH
59027: LD_VAR 0 19
59031: PUSH
59032: LD_VAR 0 20
59036: PUSH
59037: LD_VAR 0 21
59041: PUSH
59042: LD_VAR 0 22
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: PUSH
59055: LD_VAR 0 4
59059: PUSH
59060: LD_INT 1
59062: PLUS
59063: ARRAY
59064: ST_TO_ADDR
59065: GO 59132
59067: LD_INT 3
59069: DOUBLE
59070: EQUAL
59071: IFTRUE 59075
59073: GO 59131
59075: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59076: LD_ADDR_VAR 0 9
59080: PUSH
59081: LD_VAR 0 23
59085: PUSH
59086: LD_VAR 0 24
59090: PUSH
59091: LD_VAR 0 25
59095: PUSH
59096: LD_VAR 0 26
59100: PUSH
59101: LD_VAR 0 27
59105: PUSH
59106: LD_VAR 0 28
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: PUSH
59119: LD_VAR 0 4
59123: PUSH
59124: LD_INT 1
59126: PLUS
59127: ARRAY
59128: ST_TO_ADDR
59129: GO 59132
59131: POP
59132: GO 59687
59134: LD_INT 2
59136: DOUBLE
59137: EQUAL
59138: IFTRUE 59148
59140: LD_INT 3
59142: DOUBLE
59143: EQUAL
59144: IFTRUE 59148
59146: GO 59204
59148: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59149: LD_ADDR_VAR 0 9
59153: PUSH
59154: LD_VAR 0 29
59158: PUSH
59159: LD_VAR 0 30
59163: PUSH
59164: LD_VAR 0 31
59168: PUSH
59169: LD_VAR 0 32
59173: PUSH
59174: LD_VAR 0 33
59178: PUSH
59179: LD_VAR 0 34
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: PUSH
59192: LD_VAR 0 4
59196: PUSH
59197: LD_INT 1
59199: PLUS
59200: ARRAY
59201: ST_TO_ADDR
59202: GO 59687
59204: LD_INT 16
59206: DOUBLE
59207: EQUAL
59208: IFTRUE 59266
59210: LD_INT 17
59212: DOUBLE
59213: EQUAL
59214: IFTRUE 59266
59216: LD_INT 18
59218: DOUBLE
59219: EQUAL
59220: IFTRUE 59266
59222: LD_INT 19
59224: DOUBLE
59225: EQUAL
59226: IFTRUE 59266
59228: LD_INT 22
59230: DOUBLE
59231: EQUAL
59232: IFTRUE 59266
59234: LD_INT 20
59236: DOUBLE
59237: EQUAL
59238: IFTRUE 59266
59240: LD_INT 21
59242: DOUBLE
59243: EQUAL
59244: IFTRUE 59266
59246: LD_INT 23
59248: DOUBLE
59249: EQUAL
59250: IFTRUE 59266
59252: LD_INT 24
59254: DOUBLE
59255: EQUAL
59256: IFTRUE 59266
59258: LD_INT 25
59260: DOUBLE
59261: EQUAL
59262: IFTRUE 59266
59264: GO 59322
59266: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59267: LD_ADDR_VAR 0 9
59271: PUSH
59272: LD_VAR 0 35
59276: PUSH
59277: LD_VAR 0 36
59281: PUSH
59282: LD_VAR 0 37
59286: PUSH
59287: LD_VAR 0 38
59291: PUSH
59292: LD_VAR 0 39
59296: PUSH
59297: LD_VAR 0 40
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: PUSH
59310: LD_VAR 0 4
59314: PUSH
59315: LD_INT 1
59317: PLUS
59318: ARRAY
59319: ST_TO_ADDR
59320: GO 59687
59322: LD_INT 6
59324: DOUBLE
59325: EQUAL
59326: IFTRUE 59378
59328: LD_INT 7
59330: DOUBLE
59331: EQUAL
59332: IFTRUE 59378
59334: LD_INT 8
59336: DOUBLE
59337: EQUAL
59338: IFTRUE 59378
59340: LD_INT 13
59342: DOUBLE
59343: EQUAL
59344: IFTRUE 59378
59346: LD_INT 12
59348: DOUBLE
59349: EQUAL
59350: IFTRUE 59378
59352: LD_INT 15
59354: DOUBLE
59355: EQUAL
59356: IFTRUE 59378
59358: LD_INT 11
59360: DOUBLE
59361: EQUAL
59362: IFTRUE 59378
59364: LD_INT 14
59366: DOUBLE
59367: EQUAL
59368: IFTRUE 59378
59370: LD_INT 10
59372: DOUBLE
59373: EQUAL
59374: IFTRUE 59378
59376: GO 59434
59378: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59379: LD_ADDR_VAR 0 9
59383: PUSH
59384: LD_VAR 0 41
59388: PUSH
59389: LD_VAR 0 42
59393: PUSH
59394: LD_VAR 0 43
59398: PUSH
59399: LD_VAR 0 44
59403: PUSH
59404: LD_VAR 0 45
59408: PUSH
59409: LD_VAR 0 46
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: PUSH
59422: LD_VAR 0 4
59426: PUSH
59427: LD_INT 1
59429: PLUS
59430: ARRAY
59431: ST_TO_ADDR
59432: GO 59687
59434: LD_INT 36
59436: DOUBLE
59437: EQUAL
59438: IFTRUE 59442
59440: GO 59498
59442: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59443: LD_ADDR_VAR 0 9
59447: PUSH
59448: LD_VAR 0 47
59452: PUSH
59453: LD_VAR 0 48
59457: PUSH
59458: LD_VAR 0 49
59462: PUSH
59463: LD_VAR 0 50
59467: PUSH
59468: LD_VAR 0 51
59472: PUSH
59473: LD_VAR 0 52
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: PUSH
59486: LD_VAR 0 4
59490: PUSH
59491: LD_INT 1
59493: PLUS
59494: ARRAY
59495: ST_TO_ADDR
59496: GO 59687
59498: LD_INT 4
59500: DOUBLE
59501: EQUAL
59502: IFTRUE 59524
59504: LD_INT 5
59506: DOUBLE
59507: EQUAL
59508: IFTRUE 59524
59510: LD_INT 34
59512: DOUBLE
59513: EQUAL
59514: IFTRUE 59524
59516: LD_INT 37
59518: DOUBLE
59519: EQUAL
59520: IFTRUE 59524
59522: GO 59580
59524: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59525: LD_ADDR_VAR 0 9
59529: PUSH
59530: LD_VAR 0 53
59534: PUSH
59535: LD_VAR 0 54
59539: PUSH
59540: LD_VAR 0 55
59544: PUSH
59545: LD_VAR 0 56
59549: PUSH
59550: LD_VAR 0 57
59554: PUSH
59555: LD_VAR 0 58
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: PUSH
59568: LD_VAR 0 4
59572: PUSH
59573: LD_INT 1
59575: PLUS
59576: ARRAY
59577: ST_TO_ADDR
59578: GO 59687
59580: LD_INT 31
59582: DOUBLE
59583: EQUAL
59584: IFTRUE 59630
59586: LD_INT 32
59588: DOUBLE
59589: EQUAL
59590: IFTRUE 59630
59592: LD_INT 33
59594: DOUBLE
59595: EQUAL
59596: IFTRUE 59630
59598: LD_INT 27
59600: DOUBLE
59601: EQUAL
59602: IFTRUE 59630
59604: LD_INT 26
59606: DOUBLE
59607: EQUAL
59608: IFTRUE 59630
59610: LD_INT 28
59612: DOUBLE
59613: EQUAL
59614: IFTRUE 59630
59616: LD_INT 29
59618: DOUBLE
59619: EQUAL
59620: IFTRUE 59630
59622: LD_INT 30
59624: DOUBLE
59625: EQUAL
59626: IFTRUE 59630
59628: GO 59686
59630: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59631: LD_ADDR_VAR 0 9
59635: PUSH
59636: LD_VAR 0 59
59640: PUSH
59641: LD_VAR 0 60
59645: PUSH
59646: LD_VAR 0 61
59650: PUSH
59651: LD_VAR 0 62
59655: PUSH
59656: LD_VAR 0 63
59660: PUSH
59661: LD_VAR 0 64
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: PUSH
59674: LD_VAR 0 4
59678: PUSH
59679: LD_INT 1
59681: PLUS
59682: ARRAY
59683: ST_TO_ADDR
59684: GO 59687
59686: POP
// temp_list2 = [ ] ;
59687: LD_ADDR_VAR 0 10
59691: PUSH
59692: EMPTY
59693: ST_TO_ADDR
// for i in temp_list do
59694: LD_ADDR_VAR 0 8
59698: PUSH
59699: LD_VAR 0 9
59703: PUSH
59704: FOR_IN
59705: IFFALSE 59757
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59707: LD_ADDR_VAR 0 10
59711: PUSH
59712: LD_VAR 0 10
59716: PUSH
59717: LD_VAR 0 8
59721: PUSH
59722: LD_INT 1
59724: ARRAY
59725: PUSH
59726: LD_VAR 0 2
59730: PLUS
59731: PUSH
59732: LD_VAR 0 8
59736: PUSH
59737: LD_INT 2
59739: ARRAY
59740: PUSH
59741: LD_VAR 0 3
59745: PLUS
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: EMPTY
59752: LIST
59753: ADD
59754: ST_TO_ADDR
59755: GO 59704
59757: POP
59758: POP
// result = temp_list2 ;
59759: LD_ADDR_VAR 0 7
59763: PUSH
59764: LD_VAR 0 10
59768: ST_TO_ADDR
// end ;
59769: LD_VAR 0 7
59773: RET
// export function EnemyInRange ( unit , dist ) ; begin
59774: LD_INT 0
59776: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59777: LD_ADDR_VAR 0 3
59781: PUSH
59782: LD_VAR 0 1
59786: PPUSH
59787: CALL_OW 255
59791: PPUSH
59792: LD_VAR 0 1
59796: PPUSH
59797: CALL_OW 250
59801: PPUSH
59802: LD_VAR 0 1
59806: PPUSH
59807: CALL_OW 251
59811: PPUSH
59812: LD_VAR 0 2
59816: PPUSH
59817: CALL 33176 0 4
59821: PUSH
59822: LD_INT 4
59824: ARRAY
59825: ST_TO_ADDR
// end ;
59826: LD_VAR 0 3
59830: RET
// export function PlayerSeeMe ( unit ) ; begin
59831: LD_INT 0
59833: PPUSH
// result := See ( your_side , unit ) ;
59834: LD_ADDR_VAR 0 2
59838: PUSH
59839: LD_OWVAR 2
59843: PPUSH
59844: LD_VAR 0 1
59848: PPUSH
59849: CALL_OW 292
59853: ST_TO_ADDR
// end ;
59854: LD_VAR 0 2
59858: RET
// export function ReverseDir ( unit ) ; begin
59859: LD_INT 0
59861: PPUSH
// if not unit then
59862: LD_VAR 0 1
59866: NOT
59867: IFFALSE 59871
// exit ;
59869: GO 59894
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59871: LD_ADDR_VAR 0 2
59875: PUSH
59876: LD_VAR 0 1
59880: PPUSH
59881: CALL_OW 254
59885: PUSH
59886: LD_INT 3
59888: PLUS
59889: PUSH
59890: LD_INT 6
59892: MOD
59893: ST_TO_ADDR
// end ;
59894: LD_VAR 0 2
59898: RET
// export function ReverseArray ( array ) ; var i ; begin
59899: LD_INT 0
59901: PPUSH
59902: PPUSH
// if not array then
59903: LD_VAR 0 1
59907: NOT
59908: IFFALSE 59912
// exit ;
59910: GO 59967
// result := [ ] ;
59912: LD_ADDR_VAR 0 2
59916: PUSH
59917: EMPTY
59918: ST_TO_ADDR
// for i := array downto 1 do
59919: LD_ADDR_VAR 0 3
59923: PUSH
59924: DOUBLE
59925: LD_VAR 0 1
59929: INC
59930: ST_TO_ADDR
59931: LD_INT 1
59933: PUSH
59934: FOR_DOWNTO
59935: IFFALSE 59965
// result := Join ( result , array [ i ] ) ;
59937: LD_ADDR_VAR 0 2
59941: PUSH
59942: LD_VAR 0 2
59946: PPUSH
59947: LD_VAR 0 1
59951: PUSH
59952: LD_VAR 0 3
59956: ARRAY
59957: PPUSH
59958: CALL 64611 0 2
59962: ST_TO_ADDR
59963: GO 59934
59965: POP
59966: POP
// end ;
59967: LD_VAR 0 2
59971: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59972: LD_INT 0
59974: PPUSH
59975: PPUSH
59976: PPUSH
59977: PPUSH
59978: PPUSH
59979: PPUSH
// if not unit or not hexes then
59980: LD_VAR 0 1
59984: NOT
59985: PUSH
59986: LD_VAR 0 2
59990: NOT
59991: OR
59992: IFFALSE 59996
// exit ;
59994: GO 60119
// dist := 9999 ;
59996: LD_ADDR_VAR 0 5
60000: PUSH
60001: LD_INT 9999
60003: ST_TO_ADDR
// for i = 1 to hexes do
60004: LD_ADDR_VAR 0 4
60008: PUSH
60009: DOUBLE
60010: LD_INT 1
60012: DEC
60013: ST_TO_ADDR
60014: LD_VAR 0 2
60018: PUSH
60019: FOR_TO
60020: IFFALSE 60107
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60022: LD_ADDR_VAR 0 6
60026: PUSH
60027: LD_VAR 0 1
60031: PPUSH
60032: LD_VAR 0 2
60036: PUSH
60037: LD_VAR 0 4
60041: ARRAY
60042: PUSH
60043: LD_INT 1
60045: ARRAY
60046: PPUSH
60047: LD_VAR 0 2
60051: PUSH
60052: LD_VAR 0 4
60056: ARRAY
60057: PUSH
60058: LD_INT 2
60060: ARRAY
60061: PPUSH
60062: CALL_OW 297
60066: ST_TO_ADDR
// if tdist < dist then
60067: LD_VAR 0 6
60071: PUSH
60072: LD_VAR 0 5
60076: LESS
60077: IFFALSE 60105
// begin hex := hexes [ i ] ;
60079: LD_ADDR_VAR 0 8
60083: PUSH
60084: LD_VAR 0 2
60088: PUSH
60089: LD_VAR 0 4
60093: ARRAY
60094: ST_TO_ADDR
// dist := tdist ;
60095: LD_ADDR_VAR 0 5
60099: PUSH
60100: LD_VAR 0 6
60104: ST_TO_ADDR
// end ; end ;
60105: GO 60019
60107: POP
60108: POP
// result := hex ;
60109: LD_ADDR_VAR 0 3
60113: PUSH
60114: LD_VAR 0 8
60118: ST_TO_ADDR
// end ;
60119: LD_VAR 0 3
60123: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60124: LD_INT 0
60126: PPUSH
60127: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60128: LD_VAR 0 1
60132: NOT
60133: PUSH
60134: LD_VAR 0 1
60138: PUSH
60139: LD_INT 21
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 23
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PPUSH
60163: CALL_OW 69
60167: IN
60168: NOT
60169: OR
60170: IFFALSE 60174
// exit ;
60172: GO 60221
// for i = 1 to 3 do
60174: LD_ADDR_VAR 0 3
60178: PUSH
60179: DOUBLE
60180: LD_INT 1
60182: DEC
60183: ST_TO_ADDR
60184: LD_INT 3
60186: PUSH
60187: FOR_TO
60188: IFFALSE 60219
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60190: LD_VAR 0 1
60194: PPUSH
60195: CALL_OW 250
60199: PPUSH
60200: LD_VAR 0 1
60204: PPUSH
60205: CALL_OW 251
60209: PPUSH
60210: LD_INT 1
60212: PPUSH
60213: CALL_OW 453
60217: GO 60187
60219: POP
60220: POP
// end ;
60221: LD_VAR 0 2
60225: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60226: LD_INT 0
60228: PPUSH
60229: PPUSH
60230: PPUSH
60231: PPUSH
60232: PPUSH
60233: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60234: LD_VAR 0 1
60238: NOT
60239: PUSH
60240: LD_VAR 0 2
60244: NOT
60245: OR
60246: PUSH
60247: LD_VAR 0 1
60251: PPUSH
60252: CALL_OW 314
60256: OR
60257: IFFALSE 60261
// exit ;
60259: GO 60728
// if GetLives ( i ) < 250 then
60261: LD_VAR 0 4
60265: PPUSH
60266: CALL_OW 256
60270: PUSH
60271: LD_INT 250
60273: LESS
60274: IFFALSE 60287
// begin ComAutodestruct ( i ) ;
60276: LD_VAR 0 4
60280: PPUSH
60281: CALL 60124 0 1
// exit ;
60285: GO 60728
// end ; x := GetX ( enemy_unit ) ;
60287: LD_ADDR_VAR 0 7
60291: PUSH
60292: LD_VAR 0 2
60296: PPUSH
60297: CALL_OW 250
60301: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60302: LD_ADDR_VAR 0 8
60306: PUSH
60307: LD_VAR 0 2
60311: PPUSH
60312: CALL_OW 251
60316: ST_TO_ADDR
// if not x or not y then
60317: LD_VAR 0 7
60321: NOT
60322: PUSH
60323: LD_VAR 0 8
60327: NOT
60328: OR
60329: IFFALSE 60333
// exit ;
60331: GO 60728
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60333: LD_ADDR_VAR 0 6
60337: PUSH
60338: LD_VAR 0 7
60342: PPUSH
60343: LD_INT 0
60345: PPUSH
60346: LD_INT 4
60348: PPUSH
60349: CALL_OW 272
60353: PUSH
60354: LD_VAR 0 8
60358: PPUSH
60359: LD_INT 0
60361: PPUSH
60362: LD_INT 4
60364: PPUSH
60365: CALL_OW 273
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_VAR 0 7
60378: PPUSH
60379: LD_INT 1
60381: PPUSH
60382: LD_INT 4
60384: PPUSH
60385: CALL_OW 272
60389: PUSH
60390: LD_VAR 0 8
60394: PPUSH
60395: LD_INT 1
60397: PPUSH
60398: LD_INT 4
60400: PPUSH
60401: CALL_OW 273
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_VAR 0 7
60414: PPUSH
60415: LD_INT 2
60417: PPUSH
60418: LD_INT 4
60420: PPUSH
60421: CALL_OW 272
60425: PUSH
60426: LD_VAR 0 8
60430: PPUSH
60431: LD_INT 2
60433: PPUSH
60434: LD_INT 4
60436: PPUSH
60437: CALL_OW 273
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_VAR 0 7
60450: PPUSH
60451: LD_INT 3
60453: PPUSH
60454: LD_INT 4
60456: PPUSH
60457: CALL_OW 272
60461: PUSH
60462: LD_VAR 0 8
60466: PPUSH
60467: LD_INT 3
60469: PPUSH
60470: LD_INT 4
60472: PPUSH
60473: CALL_OW 273
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_VAR 0 7
60486: PPUSH
60487: LD_INT 4
60489: PPUSH
60490: LD_INT 4
60492: PPUSH
60493: CALL_OW 272
60497: PUSH
60498: LD_VAR 0 8
60502: PPUSH
60503: LD_INT 4
60505: PPUSH
60506: LD_INT 4
60508: PPUSH
60509: CALL_OW 273
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_VAR 0 7
60522: PPUSH
60523: LD_INT 5
60525: PPUSH
60526: LD_INT 4
60528: PPUSH
60529: CALL_OW 272
60533: PUSH
60534: LD_VAR 0 8
60538: PPUSH
60539: LD_INT 5
60541: PPUSH
60542: LD_INT 4
60544: PPUSH
60545: CALL_OW 273
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: ST_TO_ADDR
// for i = tmp downto 1 do
60562: LD_ADDR_VAR 0 4
60566: PUSH
60567: DOUBLE
60568: LD_VAR 0 6
60572: INC
60573: ST_TO_ADDR
60574: LD_INT 1
60576: PUSH
60577: FOR_DOWNTO
60578: IFFALSE 60679
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60580: LD_VAR 0 6
60584: PUSH
60585: LD_VAR 0 4
60589: ARRAY
60590: PUSH
60591: LD_INT 1
60593: ARRAY
60594: PPUSH
60595: LD_VAR 0 6
60599: PUSH
60600: LD_VAR 0 4
60604: ARRAY
60605: PUSH
60606: LD_INT 2
60608: ARRAY
60609: PPUSH
60610: CALL_OW 488
60614: NOT
60615: PUSH
60616: LD_VAR 0 6
60620: PUSH
60621: LD_VAR 0 4
60625: ARRAY
60626: PUSH
60627: LD_INT 1
60629: ARRAY
60630: PPUSH
60631: LD_VAR 0 6
60635: PUSH
60636: LD_VAR 0 4
60640: ARRAY
60641: PUSH
60642: LD_INT 2
60644: ARRAY
60645: PPUSH
60646: CALL_OW 428
60650: PUSH
60651: LD_INT 0
60653: NONEQUAL
60654: OR
60655: IFFALSE 60677
// tmp := Delete ( tmp , i ) ;
60657: LD_ADDR_VAR 0 6
60661: PUSH
60662: LD_VAR 0 6
60666: PPUSH
60667: LD_VAR 0 4
60671: PPUSH
60672: CALL_OW 3
60676: ST_TO_ADDR
60677: GO 60577
60679: POP
60680: POP
// j := GetClosestHex ( unit , tmp ) ;
60681: LD_ADDR_VAR 0 5
60685: PUSH
60686: LD_VAR 0 1
60690: PPUSH
60691: LD_VAR 0 6
60695: PPUSH
60696: CALL 59972 0 2
60700: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60701: LD_VAR 0 1
60705: PPUSH
60706: LD_VAR 0 5
60710: PUSH
60711: LD_INT 1
60713: ARRAY
60714: PPUSH
60715: LD_VAR 0 5
60719: PUSH
60720: LD_INT 2
60722: ARRAY
60723: PPUSH
60724: CALL_OW 111
// end ;
60728: LD_VAR 0 3
60732: RET
// export function PrepareApemanSoldier ( ) ; begin
60733: LD_INT 0
60735: PPUSH
// uc_nation := 0 ;
60736: LD_ADDR_OWVAR 21
60740: PUSH
60741: LD_INT 0
60743: ST_TO_ADDR
// hc_sex := sex_male ;
60744: LD_ADDR_OWVAR 27
60748: PUSH
60749: LD_INT 1
60751: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60752: LD_ADDR_OWVAR 28
60756: PUSH
60757: LD_INT 15
60759: ST_TO_ADDR
// hc_gallery :=  ;
60760: LD_ADDR_OWVAR 33
60764: PUSH
60765: LD_STRING 
60767: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60768: LD_ADDR_OWVAR 31
60772: PUSH
60773: LD_INT 0
60775: PPUSH
60776: LD_INT 3
60778: PPUSH
60779: CALL_OW 12
60783: PUSH
60784: LD_INT 0
60786: PPUSH
60787: LD_INT 3
60789: PPUSH
60790: CALL_OW 12
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: LD_INT 0
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: ST_TO_ADDR
// end ;
60807: LD_VAR 0 1
60811: RET
// export function PrepareApemanEngineer ( ) ; begin
60812: LD_INT 0
60814: PPUSH
// uc_nation := 0 ;
60815: LD_ADDR_OWVAR 21
60819: PUSH
60820: LD_INT 0
60822: ST_TO_ADDR
// hc_sex := sex_male ;
60823: LD_ADDR_OWVAR 27
60827: PUSH
60828: LD_INT 1
60830: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60831: LD_ADDR_OWVAR 28
60835: PUSH
60836: LD_INT 16
60838: ST_TO_ADDR
// hc_gallery :=  ;
60839: LD_ADDR_OWVAR 33
60843: PUSH
60844: LD_STRING 
60846: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60847: LD_ADDR_OWVAR 31
60851: PUSH
60852: LD_INT 0
60854: PPUSH
60855: LD_INT 3
60857: PPUSH
60858: CALL_OW 12
60862: PUSH
60863: LD_INT 0
60865: PPUSH
60866: LD_INT 3
60868: PPUSH
60869: CALL_OW 12
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 0
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: ST_TO_ADDR
// end ;
60886: LD_VAR 0 1
60890: RET
// export function PrepareApeman ( agressivity ) ; begin
60891: LD_INT 0
60893: PPUSH
// uc_side := 0 ;
60894: LD_ADDR_OWVAR 20
60898: PUSH
60899: LD_INT 0
60901: ST_TO_ADDR
// uc_nation := 0 ;
60902: LD_ADDR_OWVAR 21
60906: PUSH
60907: LD_INT 0
60909: ST_TO_ADDR
// hc_sex := sex_male ;
60910: LD_ADDR_OWVAR 27
60914: PUSH
60915: LD_INT 1
60917: ST_TO_ADDR
// hc_class := class_apeman ;
60918: LD_ADDR_OWVAR 28
60922: PUSH
60923: LD_INT 12
60925: ST_TO_ADDR
// hc_gallery :=  ;
60926: LD_ADDR_OWVAR 33
60930: PUSH
60931: LD_STRING 
60933: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60934: LD_ADDR_OWVAR 35
60938: PUSH
60939: LD_VAR 0 1
60943: NEG
60944: PPUSH
60945: LD_VAR 0 1
60949: PPUSH
60950: CALL_OW 12
60954: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60955: LD_ADDR_OWVAR 31
60959: PUSH
60960: LD_INT 0
60962: PPUSH
60963: LD_INT 3
60965: PPUSH
60966: CALL_OW 12
60970: PUSH
60971: LD_INT 0
60973: PPUSH
60974: LD_INT 3
60976: PPUSH
60977: CALL_OW 12
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: LD_INT 0
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: ST_TO_ADDR
// end ;
60994: LD_VAR 0 2
60998: RET
// export function PrepareTiger ( agressivity ) ; begin
60999: LD_INT 0
61001: PPUSH
// uc_side := 0 ;
61002: LD_ADDR_OWVAR 20
61006: PUSH
61007: LD_INT 0
61009: ST_TO_ADDR
// uc_nation := 0 ;
61010: LD_ADDR_OWVAR 21
61014: PUSH
61015: LD_INT 0
61017: ST_TO_ADDR
// hc_class := class_tiger ;
61018: LD_ADDR_OWVAR 28
61022: PUSH
61023: LD_INT 14
61025: ST_TO_ADDR
// hc_gallery :=  ;
61026: LD_ADDR_OWVAR 33
61030: PUSH
61031: LD_STRING 
61033: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61034: LD_ADDR_OWVAR 35
61038: PUSH
61039: LD_VAR 0 1
61043: NEG
61044: PPUSH
61045: LD_VAR 0 1
61049: PPUSH
61050: CALL_OW 12
61054: ST_TO_ADDR
// end ;
61055: LD_VAR 0 2
61059: RET
// export function PrepareEnchidna ( ) ; begin
61060: LD_INT 0
61062: PPUSH
// uc_side := 0 ;
61063: LD_ADDR_OWVAR 20
61067: PUSH
61068: LD_INT 0
61070: ST_TO_ADDR
// uc_nation := 0 ;
61071: LD_ADDR_OWVAR 21
61075: PUSH
61076: LD_INT 0
61078: ST_TO_ADDR
// hc_class := class_baggie ;
61079: LD_ADDR_OWVAR 28
61083: PUSH
61084: LD_INT 13
61086: ST_TO_ADDR
// hc_gallery :=  ;
61087: LD_ADDR_OWVAR 33
61091: PUSH
61092: LD_STRING 
61094: ST_TO_ADDR
// end ;
61095: LD_VAR 0 1
61099: RET
// export function PrepareFrog ( ) ; begin
61100: LD_INT 0
61102: PPUSH
// uc_side := 0 ;
61103: LD_ADDR_OWVAR 20
61107: PUSH
61108: LD_INT 0
61110: ST_TO_ADDR
// uc_nation := 0 ;
61111: LD_ADDR_OWVAR 21
61115: PUSH
61116: LD_INT 0
61118: ST_TO_ADDR
// hc_class := class_frog ;
61119: LD_ADDR_OWVAR 28
61123: PUSH
61124: LD_INT 19
61126: ST_TO_ADDR
// hc_gallery :=  ;
61127: LD_ADDR_OWVAR 33
61131: PUSH
61132: LD_STRING 
61134: ST_TO_ADDR
// end ;
61135: LD_VAR 0 1
61139: RET
// export function PrepareFish ( ) ; begin
61140: LD_INT 0
61142: PPUSH
// uc_side := 0 ;
61143: LD_ADDR_OWVAR 20
61147: PUSH
61148: LD_INT 0
61150: ST_TO_ADDR
// uc_nation := 0 ;
61151: LD_ADDR_OWVAR 21
61155: PUSH
61156: LD_INT 0
61158: ST_TO_ADDR
// hc_class := class_fish ;
61159: LD_ADDR_OWVAR 28
61163: PUSH
61164: LD_INT 20
61166: ST_TO_ADDR
// hc_gallery :=  ;
61167: LD_ADDR_OWVAR 33
61171: PUSH
61172: LD_STRING 
61174: ST_TO_ADDR
// end ;
61175: LD_VAR 0 1
61179: RET
// export function PrepareBird ( ) ; begin
61180: LD_INT 0
61182: PPUSH
// uc_side := 0 ;
61183: LD_ADDR_OWVAR 20
61187: PUSH
61188: LD_INT 0
61190: ST_TO_ADDR
// uc_nation := 0 ;
61191: LD_ADDR_OWVAR 21
61195: PUSH
61196: LD_INT 0
61198: ST_TO_ADDR
// hc_class := class_phororhacos ;
61199: LD_ADDR_OWVAR 28
61203: PUSH
61204: LD_INT 18
61206: ST_TO_ADDR
// hc_gallery :=  ;
61207: LD_ADDR_OWVAR 33
61211: PUSH
61212: LD_STRING 
61214: ST_TO_ADDR
// end ;
61215: LD_VAR 0 1
61219: RET
// export function PrepareHorse ( ) ; begin
61220: LD_INT 0
61222: PPUSH
// uc_side := 0 ;
61223: LD_ADDR_OWVAR 20
61227: PUSH
61228: LD_INT 0
61230: ST_TO_ADDR
// uc_nation := 0 ;
61231: LD_ADDR_OWVAR 21
61235: PUSH
61236: LD_INT 0
61238: ST_TO_ADDR
// hc_class := class_horse ;
61239: LD_ADDR_OWVAR 28
61243: PUSH
61244: LD_INT 21
61246: ST_TO_ADDR
// hc_gallery :=  ;
61247: LD_ADDR_OWVAR 33
61251: PUSH
61252: LD_STRING 
61254: ST_TO_ADDR
// end ;
61255: LD_VAR 0 1
61259: RET
// export function PrepareMastodont ( ) ; begin
61260: LD_INT 0
61262: PPUSH
// uc_side := 0 ;
61263: LD_ADDR_OWVAR 20
61267: PUSH
61268: LD_INT 0
61270: ST_TO_ADDR
// uc_nation := 0 ;
61271: LD_ADDR_OWVAR 21
61275: PUSH
61276: LD_INT 0
61278: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61279: LD_ADDR_OWVAR 37
61283: PUSH
61284: LD_INT 31
61286: ST_TO_ADDR
// vc_control := control_rider ;
61287: LD_ADDR_OWVAR 38
61291: PUSH
61292: LD_INT 4
61294: ST_TO_ADDR
// end ;
61295: LD_VAR 0 1
61299: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61300: LD_INT 0
61302: PPUSH
61303: PPUSH
61304: PPUSH
// uc_side = 0 ;
61305: LD_ADDR_OWVAR 20
61309: PUSH
61310: LD_INT 0
61312: ST_TO_ADDR
// uc_nation = 0 ;
61313: LD_ADDR_OWVAR 21
61317: PUSH
61318: LD_INT 0
61320: ST_TO_ADDR
// InitHc_All ( ) ;
61321: CALL_OW 584
// InitVc ;
61325: CALL_OW 20
// if mastodonts then
61329: LD_VAR 0 6
61333: IFFALSE 61400
// for i = 1 to mastodonts do
61335: LD_ADDR_VAR 0 11
61339: PUSH
61340: DOUBLE
61341: LD_INT 1
61343: DEC
61344: ST_TO_ADDR
61345: LD_VAR 0 6
61349: PUSH
61350: FOR_TO
61351: IFFALSE 61398
// begin vc_chassis := 31 ;
61353: LD_ADDR_OWVAR 37
61357: PUSH
61358: LD_INT 31
61360: ST_TO_ADDR
// vc_control := control_rider ;
61361: LD_ADDR_OWVAR 38
61365: PUSH
61366: LD_INT 4
61368: ST_TO_ADDR
// animal := CreateVehicle ;
61369: LD_ADDR_VAR 0 12
61373: PUSH
61374: CALL_OW 45
61378: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61379: LD_VAR 0 12
61383: PPUSH
61384: LD_VAR 0 8
61388: PPUSH
61389: LD_INT 0
61391: PPUSH
61392: CALL 63528 0 3
// end ;
61396: GO 61350
61398: POP
61399: POP
// if horses then
61400: LD_VAR 0 5
61404: IFFALSE 61471
// for i = 1 to horses do
61406: LD_ADDR_VAR 0 11
61410: PUSH
61411: DOUBLE
61412: LD_INT 1
61414: DEC
61415: ST_TO_ADDR
61416: LD_VAR 0 5
61420: PUSH
61421: FOR_TO
61422: IFFALSE 61469
// begin hc_class := 21 ;
61424: LD_ADDR_OWVAR 28
61428: PUSH
61429: LD_INT 21
61431: ST_TO_ADDR
// hc_gallery :=  ;
61432: LD_ADDR_OWVAR 33
61436: PUSH
61437: LD_STRING 
61439: ST_TO_ADDR
// animal := CreateHuman ;
61440: LD_ADDR_VAR 0 12
61444: PUSH
61445: CALL_OW 44
61449: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61450: LD_VAR 0 12
61454: PPUSH
61455: LD_VAR 0 8
61459: PPUSH
61460: LD_INT 0
61462: PPUSH
61463: CALL 63528 0 3
// end ;
61467: GO 61421
61469: POP
61470: POP
// if birds then
61471: LD_VAR 0 1
61475: IFFALSE 61542
// for i = 1 to birds do
61477: LD_ADDR_VAR 0 11
61481: PUSH
61482: DOUBLE
61483: LD_INT 1
61485: DEC
61486: ST_TO_ADDR
61487: LD_VAR 0 1
61491: PUSH
61492: FOR_TO
61493: IFFALSE 61540
// begin hc_class = 18 ;
61495: LD_ADDR_OWVAR 28
61499: PUSH
61500: LD_INT 18
61502: ST_TO_ADDR
// hc_gallery =  ;
61503: LD_ADDR_OWVAR 33
61507: PUSH
61508: LD_STRING 
61510: ST_TO_ADDR
// animal := CreateHuman ;
61511: LD_ADDR_VAR 0 12
61515: PUSH
61516: CALL_OW 44
61520: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61521: LD_VAR 0 12
61525: PPUSH
61526: LD_VAR 0 8
61530: PPUSH
61531: LD_INT 0
61533: PPUSH
61534: CALL 63528 0 3
// end ;
61538: GO 61492
61540: POP
61541: POP
// if tigers then
61542: LD_VAR 0 2
61546: IFFALSE 61630
// for i = 1 to tigers do
61548: LD_ADDR_VAR 0 11
61552: PUSH
61553: DOUBLE
61554: LD_INT 1
61556: DEC
61557: ST_TO_ADDR
61558: LD_VAR 0 2
61562: PUSH
61563: FOR_TO
61564: IFFALSE 61628
// begin hc_class = class_tiger ;
61566: LD_ADDR_OWVAR 28
61570: PUSH
61571: LD_INT 14
61573: ST_TO_ADDR
// hc_gallery =  ;
61574: LD_ADDR_OWVAR 33
61578: PUSH
61579: LD_STRING 
61581: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61582: LD_ADDR_OWVAR 35
61586: PUSH
61587: LD_INT 7
61589: NEG
61590: PPUSH
61591: LD_INT 7
61593: PPUSH
61594: CALL_OW 12
61598: ST_TO_ADDR
// animal := CreateHuman ;
61599: LD_ADDR_VAR 0 12
61603: PUSH
61604: CALL_OW 44
61608: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61609: LD_VAR 0 12
61613: PPUSH
61614: LD_VAR 0 8
61618: PPUSH
61619: LD_INT 0
61621: PPUSH
61622: CALL 63528 0 3
// end ;
61626: GO 61563
61628: POP
61629: POP
// if apemans then
61630: LD_VAR 0 3
61634: IFFALSE 61757
// for i = 1 to apemans do
61636: LD_ADDR_VAR 0 11
61640: PUSH
61641: DOUBLE
61642: LD_INT 1
61644: DEC
61645: ST_TO_ADDR
61646: LD_VAR 0 3
61650: PUSH
61651: FOR_TO
61652: IFFALSE 61755
// begin hc_class = class_apeman ;
61654: LD_ADDR_OWVAR 28
61658: PUSH
61659: LD_INT 12
61661: ST_TO_ADDR
// hc_gallery =  ;
61662: LD_ADDR_OWVAR 33
61666: PUSH
61667: LD_STRING 
61669: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61670: LD_ADDR_OWVAR 35
61674: PUSH
61675: LD_INT 2
61677: NEG
61678: PPUSH
61679: LD_INT 2
61681: PPUSH
61682: CALL_OW 12
61686: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61687: LD_ADDR_OWVAR 31
61691: PUSH
61692: LD_INT 1
61694: PPUSH
61695: LD_INT 3
61697: PPUSH
61698: CALL_OW 12
61702: PUSH
61703: LD_INT 1
61705: PPUSH
61706: LD_INT 3
61708: PPUSH
61709: CALL_OW 12
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: ST_TO_ADDR
// animal := CreateHuman ;
61726: LD_ADDR_VAR 0 12
61730: PUSH
61731: CALL_OW 44
61735: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61736: LD_VAR 0 12
61740: PPUSH
61741: LD_VAR 0 8
61745: PPUSH
61746: LD_INT 0
61748: PPUSH
61749: CALL 63528 0 3
// end ;
61753: GO 61651
61755: POP
61756: POP
// if enchidnas then
61757: LD_VAR 0 4
61761: IFFALSE 61828
// for i = 1 to enchidnas do
61763: LD_ADDR_VAR 0 11
61767: PUSH
61768: DOUBLE
61769: LD_INT 1
61771: DEC
61772: ST_TO_ADDR
61773: LD_VAR 0 4
61777: PUSH
61778: FOR_TO
61779: IFFALSE 61826
// begin hc_class = 13 ;
61781: LD_ADDR_OWVAR 28
61785: PUSH
61786: LD_INT 13
61788: ST_TO_ADDR
// hc_gallery =  ;
61789: LD_ADDR_OWVAR 33
61793: PUSH
61794: LD_STRING 
61796: ST_TO_ADDR
// animal := CreateHuman ;
61797: LD_ADDR_VAR 0 12
61801: PUSH
61802: CALL_OW 44
61806: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61807: LD_VAR 0 12
61811: PPUSH
61812: LD_VAR 0 8
61816: PPUSH
61817: LD_INT 0
61819: PPUSH
61820: CALL 63528 0 3
// end ;
61824: GO 61778
61826: POP
61827: POP
// if fishes then
61828: LD_VAR 0 7
61832: IFFALSE 61899
// for i = 1 to fishes do
61834: LD_ADDR_VAR 0 11
61838: PUSH
61839: DOUBLE
61840: LD_INT 1
61842: DEC
61843: ST_TO_ADDR
61844: LD_VAR 0 7
61848: PUSH
61849: FOR_TO
61850: IFFALSE 61897
// begin hc_class = 20 ;
61852: LD_ADDR_OWVAR 28
61856: PUSH
61857: LD_INT 20
61859: ST_TO_ADDR
// hc_gallery =  ;
61860: LD_ADDR_OWVAR 33
61864: PUSH
61865: LD_STRING 
61867: ST_TO_ADDR
// animal := CreateHuman ;
61868: LD_ADDR_VAR 0 12
61872: PUSH
61873: CALL_OW 44
61877: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61878: LD_VAR 0 12
61882: PPUSH
61883: LD_VAR 0 9
61887: PPUSH
61888: LD_INT 0
61890: PPUSH
61891: CALL 63528 0 3
// end ;
61895: GO 61849
61897: POP
61898: POP
// end ;
61899: LD_VAR 0 10
61903: RET
// export function WantHeal ( sci , unit ) ; begin
61904: LD_INT 0
61906: PPUSH
// if GetTaskList ( sci ) > 0 then
61907: LD_VAR 0 1
61911: PPUSH
61912: CALL_OW 437
61916: PUSH
61917: LD_INT 0
61919: GREATER
61920: IFFALSE 61990
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61922: LD_VAR 0 1
61926: PPUSH
61927: CALL_OW 437
61931: PUSH
61932: LD_INT 1
61934: ARRAY
61935: PUSH
61936: LD_INT 1
61938: ARRAY
61939: PUSH
61940: LD_STRING l
61942: EQUAL
61943: PUSH
61944: LD_VAR 0 1
61948: PPUSH
61949: CALL_OW 437
61953: PUSH
61954: LD_INT 1
61956: ARRAY
61957: PUSH
61958: LD_INT 4
61960: ARRAY
61961: PUSH
61962: LD_VAR 0 2
61966: EQUAL
61967: AND
61968: IFFALSE 61980
// result := true else
61970: LD_ADDR_VAR 0 3
61974: PUSH
61975: LD_INT 1
61977: ST_TO_ADDR
61978: GO 61988
// result := false ;
61980: LD_ADDR_VAR 0 3
61984: PUSH
61985: LD_INT 0
61987: ST_TO_ADDR
// end else
61988: GO 61998
// result := false ;
61990: LD_ADDR_VAR 0 3
61994: PUSH
61995: LD_INT 0
61997: ST_TO_ADDR
// end ;
61998: LD_VAR 0 3
62002: RET
// export function HealTarget ( sci ) ; begin
62003: LD_INT 0
62005: PPUSH
// if not sci then
62006: LD_VAR 0 1
62010: NOT
62011: IFFALSE 62015
// exit ;
62013: GO 62080
// result := 0 ;
62015: LD_ADDR_VAR 0 2
62019: PUSH
62020: LD_INT 0
62022: ST_TO_ADDR
// if GetTaskList ( sci ) then
62023: LD_VAR 0 1
62027: PPUSH
62028: CALL_OW 437
62032: IFFALSE 62080
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62034: LD_VAR 0 1
62038: PPUSH
62039: CALL_OW 437
62043: PUSH
62044: LD_INT 1
62046: ARRAY
62047: PUSH
62048: LD_INT 1
62050: ARRAY
62051: PUSH
62052: LD_STRING l
62054: EQUAL
62055: IFFALSE 62080
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62057: LD_ADDR_VAR 0 2
62061: PUSH
62062: LD_VAR 0 1
62066: PPUSH
62067: CALL_OW 437
62071: PUSH
62072: LD_INT 1
62074: ARRAY
62075: PUSH
62076: LD_INT 4
62078: ARRAY
62079: ST_TO_ADDR
// end ;
62080: LD_VAR 0 2
62084: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62085: LD_INT 0
62087: PPUSH
62088: PPUSH
62089: PPUSH
62090: PPUSH
// if not base_units then
62091: LD_VAR 0 1
62095: NOT
62096: IFFALSE 62100
// exit ;
62098: GO 62187
// result := false ;
62100: LD_ADDR_VAR 0 2
62104: PUSH
62105: LD_INT 0
62107: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62108: LD_ADDR_VAR 0 5
62112: PUSH
62113: LD_VAR 0 1
62117: PPUSH
62118: LD_INT 21
62120: PUSH
62121: LD_INT 3
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PPUSH
62128: CALL_OW 72
62132: ST_TO_ADDR
// if not tmp then
62133: LD_VAR 0 5
62137: NOT
62138: IFFALSE 62142
// exit ;
62140: GO 62187
// for i in tmp do
62142: LD_ADDR_VAR 0 3
62146: PUSH
62147: LD_VAR 0 5
62151: PUSH
62152: FOR_IN
62153: IFFALSE 62185
// begin result := EnemyInRange ( i , 22 ) ;
62155: LD_ADDR_VAR 0 2
62159: PUSH
62160: LD_VAR 0 3
62164: PPUSH
62165: LD_INT 22
62167: PPUSH
62168: CALL 59774 0 2
62172: ST_TO_ADDR
// if result then
62173: LD_VAR 0 2
62177: IFFALSE 62183
// exit ;
62179: POP
62180: POP
62181: GO 62187
// end ;
62183: GO 62152
62185: POP
62186: POP
// end ;
62187: LD_VAR 0 2
62191: RET
// export function FilterByTag ( units , tag ) ; begin
62192: LD_INT 0
62194: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62195: LD_ADDR_VAR 0 3
62199: PUSH
62200: LD_VAR 0 1
62204: PPUSH
62205: LD_INT 120
62207: PUSH
62208: LD_VAR 0 2
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PPUSH
62217: CALL_OW 72
62221: ST_TO_ADDR
// end ;
62222: LD_VAR 0 3
62226: RET
// export function IsDriver ( un ) ; begin
62227: LD_INT 0
62229: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62230: LD_ADDR_VAR 0 2
62234: PUSH
62235: LD_VAR 0 1
62239: PUSH
62240: LD_INT 55
62242: PUSH
62243: EMPTY
62244: LIST
62245: PPUSH
62246: CALL_OW 69
62250: IN
62251: ST_TO_ADDR
// end ;
62252: LD_VAR 0 2
62256: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62257: LD_INT 0
62259: PPUSH
62260: PPUSH
// list := [ ] ;
62261: LD_ADDR_VAR 0 5
62265: PUSH
62266: EMPTY
62267: ST_TO_ADDR
// case d of 0 :
62268: LD_VAR 0 3
62272: PUSH
62273: LD_INT 0
62275: DOUBLE
62276: EQUAL
62277: IFTRUE 62281
62279: GO 62414
62281: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62282: LD_ADDR_VAR 0 5
62286: PUSH
62287: LD_VAR 0 1
62291: PUSH
62292: LD_INT 4
62294: MINUS
62295: PUSH
62296: LD_VAR 0 2
62300: PUSH
62301: LD_INT 4
62303: MINUS
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: LIST
62312: PUSH
62313: LD_VAR 0 1
62317: PUSH
62318: LD_INT 3
62320: MINUS
62321: PUSH
62322: LD_VAR 0 2
62326: PUSH
62327: LD_INT 1
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: PUSH
62335: LD_VAR 0 1
62339: PUSH
62340: LD_INT 4
62342: PLUS
62343: PUSH
62344: LD_VAR 0 2
62348: PUSH
62349: LD_INT 4
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: LIST
62356: PUSH
62357: LD_VAR 0 1
62361: PUSH
62362: LD_INT 3
62364: PLUS
62365: PUSH
62366: LD_VAR 0 2
62370: PUSH
62371: LD_INT 3
62373: PLUS
62374: PUSH
62375: LD_INT 5
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: LIST
62382: PUSH
62383: LD_VAR 0 1
62387: PUSH
62388: LD_VAR 0 2
62392: PUSH
62393: LD_INT 4
62395: PLUS
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: LIST
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: ST_TO_ADDR
// end ; 1 :
62412: GO 63112
62414: LD_INT 1
62416: DOUBLE
62417: EQUAL
62418: IFTRUE 62422
62420: GO 62555
62422: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62423: LD_ADDR_VAR 0 5
62427: PUSH
62428: LD_VAR 0 1
62432: PUSH
62433: LD_VAR 0 2
62437: PUSH
62438: LD_INT 4
62440: MINUS
62441: PUSH
62442: LD_INT 3
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: LIST
62449: PUSH
62450: LD_VAR 0 1
62454: PUSH
62455: LD_INT 3
62457: MINUS
62458: PUSH
62459: LD_VAR 0 2
62463: PUSH
62464: LD_INT 3
62466: MINUS
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: LIST
62475: PUSH
62476: LD_VAR 0 1
62480: PUSH
62481: LD_INT 4
62483: MINUS
62484: PUSH
62485: LD_VAR 0 2
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: LIST
62497: PUSH
62498: LD_VAR 0 1
62502: PUSH
62503: LD_VAR 0 2
62507: PUSH
62508: LD_INT 3
62510: PLUS
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: LIST
62519: PUSH
62520: LD_VAR 0 1
62524: PUSH
62525: LD_INT 4
62527: PLUS
62528: PUSH
62529: LD_VAR 0 2
62533: PUSH
62534: LD_INT 4
62536: PLUS
62537: PUSH
62538: LD_INT 5
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: LIST
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: ST_TO_ADDR
// end ; 2 :
62553: GO 63112
62555: LD_INT 2
62557: DOUBLE
62558: EQUAL
62559: IFTRUE 62563
62561: GO 62692
62563: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62564: LD_ADDR_VAR 0 5
62568: PUSH
62569: LD_VAR 0 1
62573: PUSH
62574: LD_VAR 0 2
62578: PUSH
62579: LD_INT 3
62581: MINUS
62582: PUSH
62583: LD_INT 3
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: LIST
62590: PUSH
62591: LD_VAR 0 1
62595: PUSH
62596: LD_INT 4
62598: PLUS
62599: PUSH
62600: LD_VAR 0 2
62604: PUSH
62605: LD_INT 4
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: LIST
62612: PUSH
62613: LD_VAR 0 1
62617: PUSH
62618: LD_VAR 0 2
62622: PUSH
62623: LD_INT 4
62625: PLUS
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: LIST
62634: PUSH
62635: LD_VAR 0 1
62639: PUSH
62640: LD_INT 3
62642: MINUS
62643: PUSH
62644: LD_VAR 0 2
62648: PUSH
62649: LD_INT 1
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: LIST
62656: PUSH
62657: LD_VAR 0 1
62661: PUSH
62662: LD_INT 4
62664: MINUS
62665: PUSH
62666: LD_VAR 0 2
62670: PUSH
62671: LD_INT 4
62673: MINUS
62674: PUSH
62675: LD_INT 2
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: ST_TO_ADDR
// end ; 3 :
62690: GO 63112
62692: LD_INT 3
62694: DOUBLE
62695: EQUAL
62696: IFTRUE 62700
62698: GO 62833
62700: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62701: LD_ADDR_VAR 0 5
62705: PUSH
62706: LD_VAR 0 1
62710: PUSH
62711: LD_INT 3
62713: PLUS
62714: PUSH
62715: LD_VAR 0 2
62719: PUSH
62720: LD_INT 4
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: LIST
62727: PUSH
62728: LD_VAR 0 1
62732: PUSH
62733: LD_INT 4
62735: PLUS
62736: PUSH
62737: LD_VAR 0 2
62741: PUSH
62742: LD_INT 4
62744: PLUS
62745: PUSH
62746: LD_INT 5
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: LIST
62753: PUSH
62754: LD_VAR 0 1
62758: PUSH
62759: LD_INT 4
62761: MINUS
62762: PUSH
62763: LD_VAR 0 2
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: LIST
62775: PUSH
62776: LD_VAR 0 1
62780: PUSH
62781: LD_VAR 0 2
62785: PUSH
62786: LD_INT 4
62788: MINUS
62789: PUSH
62790: LD_INT 3
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: LIST
62797: PUSH
62798: LD_VAR 0 1
62802: PUSH
62803: LD_INT 3
62805: MINUS
62806: PUSH
62807: LD_VAR 0 2
62811: PUSH
62812: LD_INT 3
62814: MINUS
62815: PUSH
62816: LD_INT 2
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: LIST
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: ST_TO_ADDR
// end ; 4 :
62831: GO 63112
62833: LD_INT 4
62835: DOUBLE
62836: EQUAL
62837: IFTRUE 62841
62839: GO 62974
62841: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62842: LD_ADDR_VAR 0 5
62846: PUSH
62847: LD_VAR 0 1
62851: PUSH
62852: LD_VAR 0 2
62856: PUSH
62857: LD_INT 4
62859: PLUS
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: LIST
62868: PUSH
62869: LD_VAR 0 1
62873: PUSH
62874: LD_INT 3
62876: PLUS
62877: PUSH
62878: LD_VAR 0 2
62882: PUSH
62883: LD_INT 3
62885: PLUS
62886: PUSH
62887: LD_INT 5
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: LIST
62894: PUSH
62895: LD_VAR 0 1
62899: PUSH
62900: LD_INT 4
62902: PLUS
62903: PUSH
62904: LD_VAR 0 2
62908: PUSH
62909: LD_INT 4
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: LIST
62916: PUSH
62917: LD_VAR 0 1
62921: PUSH
62922: LD_VAR 0 2
62926: PUSH
62927: LD_INT 3
62929: MINUS
62930: PUSH
62931: LD_INT 3
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: LIST
62938: PUSH
62939: LD_VAR 0 1
62943: PUSH
62944: LD_INT 4
62946: MINUS
62947: PUSH
62948: LD_VAR 0 2
62952: PUSH
62953: LD_INT 4
62955: MINUS
62956: PUSH
62957: LD_INT 2
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: LIST
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: ST_TO_ADDR
// end ; 5 :
62972: GO 63112
62974: LD_INT 5
62976: DOUBLE
62977: EQUAL
62978: IFTRUE 62982
62980: GO 63111
62982: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62983: LD_ADDR_VAR 0 5
62987: PUSH
62988: LD_VAR 0 1
62992: PUSH
62993: LD_INT 4
62995: MINUS
62996: PUSH
62997: LD_VAR 0 2
63001: PUSH
63002: LD_INT 1
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: LIST
63009: PUSH
63010: LD_VAR 0 1
63014: PUSH
63015: LD_VAR 0 2
63019: PUSH
63020: LD_INT 4
63022: MINUS
63023: PUSH
63024: LD_INT 3
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: LIST
63031: PUSH
63032: LD_VAR 0 1
63036: PUSH
63037: LD_INT 4
63039: PLUS
63040: PUSH
63041: LD_VAR 0 2
63045: PUSH
63046: LD_INT 4
63048: PLUS
63049: PUSH
63050: LD_INT 5
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: LIST
63057: PUSH
63058: LD_VAR 0 1
63062: PUSH
63063: LD_INT 3
63065: PLUS
63066: PUSH
63067: LD_VAR 0 2
63071: PUSH
63072: LD_INT 4
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: LIST
63079: PUSH
63080: LD_VAR 0 1
63084: PUSH
63085: LD_VAR 0 2
63089: PUSH
63090: LD_INT 3
63092: PLUS
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: LIST
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: ST_TO_ADDR
// end ; end ;
63109: GO 63112
63111: POP
// result := list ;
63112: LD_ADDR_VAR 0 4
63116: PUSH
63117: LD_VAR 0 5
63121: ST_TO_ADDR
// end ;
63122: LD_VAR 0 4
63126: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63127: LD_INT 0
63129: PPUSH
63130: PPUSH
63131: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63132: LD_VAR 0 1
63136: NOT
63137: PUSH
63138: LD_VAR 0 2
63142: PUSH
63143: LD_INT 1
63145: PUSH
63146: LD_INT 2
63148: PUSH
63149: LD_INT 3
63151: PUSH
63152: LD_INT 4
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: IN
63161: NOT
63162: OR
63163: IFFALSE 63167
// exit ;
63165: GO 63250
// tmp := [ ] ;
63167: LD_ADDR_VAR 0 5
63171: PUSH
63172: EMPTY
63173: ST_TO_ADDR
// for i in units do
63174: LD_ADDR_VAR 0 4
63178: PUSH
63179: LD_VAR 0 1
63183: PUSH
63184: FOR_IN
63185: IFFALSE 63219
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63187: LD_ADDR_VAR 0 5
63191: PUSH
63192: LD_VAR 0 5
63196: PPUSH
63197: LD_VAR 0 4
63201: PPUSH
63202: LD_VAR 0 2
63206: PPUSH
63207: CALL_OW 259
63211: PPUSH
63212: CALL 64611 0 2
63216: ST_TO_ADDR
63217: GO 63184
63219: POP
63220: POP
// if not tmp then
63221: LD_VAR 0 5
63225: NOT
63226: IFFALSE 63230
// exit ;
63228: GO 63250
// result := SortListByListDesc ( units , tmp ) ;
63230: LD_ADDR_VAR 0 3
63234: PUSH
63235: LD_VAR 0 1
63239: PPUSH
63240: LD_VAR 0 5
63244: PPUSH
63245: CALL_OW 77
63249: ST_TO_ADDR
// end ;
63250: LD_VAR 0 3
63254: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63255: LD_INT 0
63257: PPUSH
63258: PPUSH
63259: PPUSH
// result := false ;
63260: LD_ADDR_VAR 0 3
63264: PUSH
63265: LD_INT 0
63267: ST_TO_ADDR
// if not building then
63268: LD_VAR 0 2
63272: NOT
63273: IFFALSE 63277
// exit ;
63275: GO 63415
// x := GetX ( building ) ;
63277: LD_ADDR_VAR 0 4
63281: PUSH
63282: LD_VAR 0 2
63286: PPUSH
63287: CALL_OW 250
63291: ST_TO_ADDR
// y := GetY ( building ) ;
63292: LD_ADDR_VAR 0 5
63296: PUSH
63297: LD_VAR 0 2
63301: PPUSH
63302: CALL_OW 251
63306: ST_TO_ADDR
// if not x or not y then
63307: LD_VAR 0 4
63311: NOT
63312: PUSH
63313: LD_VAR 0 5
63317: NOT
63318: OR
63319: IFFALSE 63323
// exit ;
63321: GO 63415
// if GetTaskList ( unit ) then
63323: LD_VAR 0 1
63327: PPUSH
63328: CALL_OW 437
63332: IFFALSE 63415
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63334: LD_STRING e
63336: PUSH
63337: LD_VAR 0 1
63341: PPUSH
63342: CALL_OW 437
63346: PUSH
63347: LD_INT 1
63349: ARRAY
63350: PUSH
63351: LD_INT 1
63353: ARRAY
63354: EQUAL
63355: PUSH
63356: LD_VAR 0 4
63360: PUSH
63361: LD_VAR 0 1
63365: PPUSH
63366: CALL_OW 437
63370: PUSH
63371: LD_INT 1
63373: ARRAY
63374: PUSH
63375: LD_INT 2
63377: ARRAY
63378: EQUAL
63379: AND
63380: PUSH
63381: LD_VAR 0 5
63385: PUSH
63386: LD_VAR 0 1
63390: PPUSH
63391: CALL_OW 437
63395: PUSH
63396: LD_INT 1
63398: ARRAY
63399: PUSH
63400: LD_INT 3
63402: ARRAY
63403: EQUAL
63404: AND
63405: IFFALSE 63415
// result := true end ;
63407: LD_ADDR_VAR 0 3
63411: PUSH
63412: LD_INT 1
63414: ST_TO_ADDR
// end ;
63415: LD_VAR 0 3
63419: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63420: LD_INT 0
63422: PPUSH
// result := false ;
63423: LD_ADDR_VAR 0 4
63427: PUSH
63428: LD_INT 0
63430: ST_TO_ADDR
// if GetTaskList ( unit ) then
63431: LD_VAR 0 1
63435: PPUSH
63436: CALL_OW 437
63440: IFFALSE 63523
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63442: LD_STRING M
63444: PUSH
63445: LD_VAR 0 1
63449: PPUSH
63450: CALL_OW 437
63454: PUSH
63455: LD_INT 1
63457: ARRAY
63458: PUSH
63459: LD_INT 1
63461: ARRAY
63462: EQUAL
63463: PUSH
63464: LD_VAR 0 2
63468: PUSH
63469: LD_VAR 0 1
63473: PPUSH
63474: CALL_OW 437
63478: PUSH
63479: LD_INT 1
63481: ARRAY
63482: PUSH
63483: LD_INT 2
63485: ARRAY
63486: EQUAL
63487: AND
63488: PUSH
63489: LD_VAR 0 3
63493: PUSH
63494: LD_VAR 0 1
63498: PPUSH
63499: CALL_OW 437
63503: PUSH
63504: LD_INT 1
63506: ARRAY
63507: PUSH
63508: LD_INT 3
63510: ARRAY
63511: EQUAL
63512: AND
63513: IFFALSE 63523
// result := true ;
63515: LD_ADDR_VAR 0 4
63519: PUSH
63520: LD_INT 1
63522: ST_TO_ADDR
// end ; end ;
63523: LD_VAR 0 4
63527: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63528: LD_INT 0
63530: PPUSH
63531: PPUSH
63532: PPUSH
63533: PPUSH
// if not unit or not area then
63534: LD_VAR 0 1
63538: NOT
63539: PUSH
63540: LD_VAR 0 2
63544: NOT
63545: OR
63546: IFFALSE 63550
// exit ;
63548: GO 63714
// tmp := AreaToList ( area , i ) ;
63550: LD_ADDR_VAR 0 6
63554: PUSH
63555: LD_VAR 0 2
63559: PPUSH
63560: LD_VAR 0 5
63564: PPUSH
63565: CALL_OW 517
63569: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63570: LD_ADDR_VAR 0 5
63574: PUSH
63575: DOUBLE
63576: LD_INT 1
63578: DEC
63579: ST_TO_ADDR
63580: LD_VAR 0 6
63584: PUSH
63585: LD_INT 1
63587: ARRAY
63588: PUSH
63589: FOR_TO
63590: IFFALSE 63712
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63592: LD_ADDR_VAR 0 7
63596: PUSH
63597: LD_VAR 0 6
63601: PUSH
63602: LD_INT 1
63604: ARRAY
63605: PUSH
63606: LD_VAR 0 5
63610: ARRAY
63611: PUSH
63612: LD_VAR 0 6
63616: PUSH
63617: LD_INT 2
63619: ARRAY
63620: PUSH
63621: LD_VAR 0 5
63625: ARRAY
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63631: LD_VAR 0 7
63635: PUSH
63636: LD_INT 1
63638: ARRAY
63639: PPUSH
63640: LD_VAR 0 7
63644: PUSH
63645: LD_INT 2
63647: ARRAY
63648: PPUSH
63649: CALL_OW 428
63653: PUSH
63654: LD_INT 0
63656: EQUAL
63657: IFFALSE 63710
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63659: LD_VAR 0 1
63663: PPUSH
63664: LD_VAR 0 7
63668: PUSH
63669: LD_INT 1
63671: ARRAY
63672: PPUSH
63673: LD_VAR 0 7
63677: PUSH
63678: LD_INT 2
63680: ARRAY
63681: PPUSH
63682: LD_VAR 0 3
63686: PPUSH
63687: CALL_OW 48
// result := IsPlaced ( unit ) ;
63691: LD_ADDR_VAR 0 4
63695: PUSH
63696: LD_VAR 0 1
63700: PPUSH
63701: CALL_OW 305
63705: ST_TO_ADDR
// exit ;
63706: POP
63707: POP
63708: GO 63714
// end ; end ;
63710: GO 63589
63712: POP
63713: POP
// end ;
63714: LD_VAR 0 4
63718: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63719: LD_INT 0
63721: PPUSH
63722: PPUSH
63723: PPUSH
// if not side or side > 8 then
63724: LD_VAR 0 1
63728: NOT
63729: PUSH
63730: LD_VAR 0 1
63734: PUSH
63735: LD_INT 8
63737: GREATER
63738: OR
63739: IFFALSE 63743
// exit ;
63741: GO 63930
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63743: LD_ADDR_VAR 0 4
63747: PUSH
63748: LD_INT 22
63750: PUSH
63751: LD_VAR 0 1
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 21
63762: PUSH
63763: LD_INT 3
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PPUSH
63774: CALL_OW 69
63778: ST_TO_ADDR
// if not tmp then
63779: LD_VAR 0 4
63783: NOT
63784: IFFALSE 63788
// exit ;
63786: GO 63930
// enable_addtolog := true ;
63788: LD_ADDR_OWVAR 81
63792: PUSH
63793: LD_INT 1
63795: ST_TO_ADDR
// AddToLog ( [ ) ;
63796: LD_STRING [
63798: PPUSH
63799: CALL_OW 561
// for i in tmp do
63803: LD_ADDR_VAR 0 3
63807: PUSH
63808: LD_VAR 0 4
63812: PUSH
63813: FOR_IN
63814: IFFALSE 63921
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63816: LD_STRING [
63818: PUSH
63819: LD_VAR 0 3
63823: PPUSH
63824: CALL_OW 266
63828: STR
63829: PUSH
63830: LD_STRING , 
63832: STR
63833: PUSH
63834: LD_VAR 0 3
63838: PPUSH
63839: CALL_OW 250
63843: STR
63844: PUSH
63845: LD_STRING , 
63847: STR
63848: PUSH
63849: LD_VAR 0 3
63853: PPUSH
63854: CALL_OW 251
63858: STR
63859: PUSH
63860: LD_STRING , 
63862: STR
63863: PUSH
63864: LD_VAR 0 3
63868: PPUSH
63869: CALL_OW 254
63873: STR
63874: PUSH
63875: LD_STRING , 
63877: STR
63878: PUSH
63879: LD_VAR 0 3
63883: PPUSH
63884: LD_INT 1
63886: PPUSH
63887: CALL_OW 268
63891: STR
63892: PUSH
63893: LD_STRING , 
63895: STR
63896: PUSH
63897: LD_VAR 0 3
63901: PPUSH
63902: LD_INT 2
63904: PPUSH
63905: CALL_OW 268
63909: STR
63910: PUSH
63911: LD_STRING ],
63913: STR
63914: PPUSH
63915: CALL_OW 561
// end ;
63919: GO 63813
63921: POP
63922: POP
// AddToLog ( ]; ) ;
63923: LD_STRING ];
63925: PPUSH
63926: CALL_OW 561
// end ;
63930: LD_VAR 0 2
63934: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63935: LD_INT 0
63937: PPUSH
63938: PPUSH
63939: PPUSH
63940: PPUSH
63941: PPUSH
// if not area or not rate or not max then
63942: LD_VAR 0 1
63946: NOT
63947: PUSH
63948: LD_VAR 0 2
63952: NOT
63953: OR
63954: PUSH
63955: LD_VAR 0 4
63959: NOT
63960: OR
63961: IFFALSE 63965
// exit ;
63963: GO 64154
// while 1 do
63965: LD_INT 1
63967: IFFALSE 64154
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63969: LD_ADDR_VAR 0 9
63973: PUSH
63974: LD_VAR 0 1
63978: PPUSH
63979: LD_INT 1
63981: PPUSH
63982: CALL_OW 287
63986: PUSH
63987: LD_INT 10
63989: MUL
63990: ST_TO_ADDR
// r := rate / 10 ;
63991: LD_ADDR_VAR 0 7
63995: PUSH
63996: LD_VAR 0 2
64000: PUSH
64001: LD_INT 10
64003: DIVREAL
64004: ST_TO_ADDR
// time := 1 1$00 ;
64005: LD_ADDR_VAR 0 8
64009: PUSH
64010: LD_INT 2100
64012: ST_TO_ADDR
// if amount < min then
64013: LD_VAR 0 9
64017: PUSH
64018: LD_VAR 0 3
64022: LESS
64023: IFFALSE 64041
// r := r * 2 else
64025: LD_ADDR_VAR 0 7
64029: PUSH
64030: LD_VAR 0 7
64034: PUSH
64035: LD_INT 2
64037: MUL
64038: ST_TO_ADDR
64039: GO 64067
// if amount > max then
64041: LD_VAR 0 9
64045: PUSH
64046: LD_VAR 0 4
64050: GREATER
64051: IFFALSE 64067
// r := r / 2 ;
64053: LD_ADDR_VAR 0 7
64057: PUSH
64058: LD_VAR 0 7
64062: PUSH
64063: LD_INT 2
64065: DIVREAL
64066: ST_TO_ADDR
// time := time / r ;
64067: LD_ADDR_VAR 0 8
64071: PUSH
64072: LD_VAR 0 8
64076: PUSH
64077: LD_VAR 0 7
64081: DIVREAL
64082: ST_TO_ADDR
// if time < 0 then
64083: LD_VAR 0 8
64087: PUSH
64088: LD_INT 0
64090: LESS
64091: IFFALSE 64108
// time := time * - 1 ;
64093: LD_ADDR_VAR 0 8
64097: PUSH
64098: LD_VAR 0 8
64102: PUSH
64103: LD_INT 1
64105: NEG
64106: MUL
64107: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64108: LD_VAR 0 8
64112: PUSH
64113: LD_INT 35
64115: PPUSH
64116: LD_INT 875
64118: PPUSH
64119: CALL_OW 12
64123: PLUS
64124: PPUSH
64125: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64129: LD_INT 1
64131: PPUSH
64132: LD_INT 5
64134: PPUSH
64135: CALL_OW 12
64139: PPUSH
64140: LD_VAR 0 1
64144: PPUSH
64145: LD_INT 1
64147: PPUSH
64148: CALL_OW 55
// end ;
64152: GO 63965
// end ;
64154: LD_VAR 0 5
64158: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64159: LD_INT 0
64161: PPUSH
64162: PPUSH
64163: PPUSH
64164: PPUSH
64165: PPUSH
64166: PPUSH
64167: PPUSH
64168: PPUSH
// if not turrets or not factories then
64169: LD_VAR 0 1
64173: NOT
64174: PUSH
64175: LD_VAR 0 2
64179: NOT
64180: OR
64181: IFFALSE 64185
// exit ;
64183: GO 64492
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64185: LD_ADDR_VAR 0 10
64189: PUSH
64190: LD_INT 5
64192: PUSH
64193: LD_INT 6
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 2
64202: PUSH
64203: LD_INT 4
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 3
64212: PUSH
64213: LD_INT 5
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 24
64227: PUSH
64228: LD_INT 25
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 23
64237: PUSH
64238: LD_INT 27
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 42
64251: PUSH
64252: LD_INT 43
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 44
64261: PUSH
64262: LD_INT 46
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 45
64271: PUSH
64272: LD_INT 47
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: LIST
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: LIST
64288: ST_TO_ADDR
// result := [ ] ;
64289: LD_ADDR_VAR 0 3
64293: PUSH
64294: EMPTY
64295: ST_TO_ADDR
// for i in turrets do
64296: LD_ADDR_VAR 0 4
64300: PUSH
64301: LD_VAR 0 1
64305: PUSH
64306: FOR_IN
64307: IFFALSE 64490
// begin nat := GetNation ( i ) ;
64309: LD_ADDR_VAR 0 7
64313: PUSH
64314: LD_VAR 0 4
64318: PPUSH
64319: CALL_OW 248
64323: ST_TO_ADDR
// weapon := 0 ;
64324: LD_ADDR_VAR 0 8
64328: PUSH
64329: LD_INT 0
64331: ST_TO_ADDR
// if not nat then
64332: LD_VAR 0 7
64336: NOT
64337: IFFALSE 64341
// continue ;
64339: GO 64306
// for j in list [ nat ] do
64341: LD_ADDR_VAR 0 5
64345: PUSH
64346: LD_VAR 0 10
64350: PUSH
64351: LD_VAR 0 7
64355: ARRAY
64356: PUSH
64357: FOR_IN
64358: IFFALSE 64399
// if GetBWeapon ( i ) = j [ 1 ] then
64360: LD_VAR 0 4
64364: PPUSH
64365: CALL_OW 269
64369: PUSH
64370: LD_VAR 0 5
64374: PUSH
64375: LD_INT 1
64377: ARRAY
64378: EQUAL
64379: IFFALSE 64397
// begin weapon := j [ 2 ] ;
64381: LD_ADDR_VAR 0 8
64385: PUSH
64386: LD_VAR 0 5
64390: PUSH
64391: LD_INT 2
64393: ARRAY
64394: ST_TO_ADDR
// break ;
64395: GO 64399
// end ;
64397: GO 64357
64399: POP
64400: POP
// if not weapon then
64401: LD_VAR 0 8
64405: NOT
64406: IFFALSE 64410
// continue ;
64408: GO 64306
// for k in factories do
64410: LD_ADDR_VAR 0 6
64414: PUSH
64415: LD_VAR 0 2
64419: PUSH
64420: FOR_IN
64421: IFFALSE 64486
// begin weapons := AvailableWeaponList ( k ) ;
64423: LD_ADDR_VAR 0 9
64427: PUSH
64428: LD_VAR 0 6
64432: PPUSH
64433: CALL_OW 478
64437: ST_TO_ADDR
// if not weapons then
64438: LD_VAR 0 9
64442: NOT
64443: IFFALSE 64447
// continue ;
64445: GO 64420
// if weapon in weapons then
64447: LD_VAR 0 8
64451: PUSH
64452: LD_VAR 0 9
64456: IN
64457: IFFALSE 64484
// begin result := [ i , weapon ] ;
64459: LD_ADDR_VAR 0 3
64463: PUSH
64464: LD_VAR 0 4
64468: PUSH
64469: LD_VAR 0 8
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: ST_TO_ADDR
// exit ;
64478: POP
64479: POP
64480: POP
64481: POP
64482: GO 64492
// end ; end ;
64484: GO 64420
64486: POP
64487: POP
// end ;
64488: GO 64306
64490: POP
64491: POP
// end ;
64492: LD_VAR 0 3
64496: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64497: LD_INT 0
64499: PPUSH
// if not side or side > 8 then
64500: LD_VAR 0 3
64504: NOT
64505: PUSH
64506: LD_VAR 0 3
64510: PUSH
64511: LD_INT 8
64513: GREATER
64514: OR
64515: IFFALSE 64519
// exit ;
64517: GO 64578
// if not range then
64519: LD_VAR 0 4
64523: NOT
64524: IFFALSE 64535
// range := - 12 ;
64526: LD_ADDR_VAR 0 4
64530: PUSH
64531: LD_INT 12
64533: NEG
64534: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64535: LD_VAR 0 1
64539: PPUSH
64540: LD_VAR 0 2
64544: PPUSH
64545: LD_VAR 0 3
64549: PPUSH
64550: LD_VAR 0 4
64554: PPUSH
64555: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64559: LD_VAR 0 1
64563: PPUSH
64564: LD_VAR 0 2
64568: PPUSH
64569: LD_VAR 0 3
64573: PPUSH
64574: CALL_OW 331
// end ;
64578: LD_VAR 0 5
64582: RET
// export function Video ( mode ) ; begin
64583: LD_INT 0
64585: PPUSH
// ingame_video = mode ;
64586: LD_ADDR_OWVAR 52
64590: PUSH
64591: LD_VAR 0 1
64595: ST_TO_ADDR
// interface_hidden = mode ;
64596: LD_ADDR_OWVAR 54
64600: PUSH
64601: LD_VAR 0 1
64605: ST_TO_ADDR
// end ;
64606: LD_VAR 0 2
64610: RET
// export function Join ( array , element ) ; begin
64611: LD_INT 0
64613: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64614: LD_ADDR_VAR 0 3
64618: PUSH
64619: LD_VAR 0 1
64623: PPUSH
64624: LD_VAR 0 1
64628: PUSH
64629: LD_INT 1
64631: PLUS
64632: PPUSH
64633: LD_VAR 0 2
64637: PPUSH
64638: CALL_OW 1
64642: ST_TO_ADDR
// end ;
64643: LD_VAR 0 3
64647: RET
// export function JoinUnion ( array , element ) ; begin
64648: LD_INT 0
64650: PPUSH
// result := array union element ;
64651: LD_ADDR_VAR 0 3
64655: PUSH
64656: LD_VAR 0 1
64660: PUSH
64661: LD_VAR 0 2
64665: UNION
64666: ST_TO_ADDR
// end ;
64667: LD_VAR 0 3
64671: RET
// export function GetBehemoths ( side ) ; begin
64672: LD_INT 0
64674: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64675: LD_ADDR_VAR 0 2
64679: PUSH
64680: LD_INT 22
64682: PUSH
64683: LD_VAR 0 1
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 31
64694: PUSH
64695: LD_INT 25
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PPUSH
64706: CALL_OW 69
64710: ST_TO_ADDR
// end ;
64711: LD_VAR 0 2
64715: RET
// export function Shuffle ( array ) ; var i , index ; begin
64716: LD_INT 0
64718: PPUSH
64719: PPUSH
64720: PPUSH
// result := [ ] ;
64721: LD_ADDR_VAR 0 2
64725: PUSH
64726: EMPTY
64727: ST_TO_ADDR
// if not array then
64728: LD_VAR 0 1
64732: NOT
64733: IFFALSE 64737
// exit ;
64735: GO 64836
// Randomize ;
64737: CALL_OW 10
// for i = array downto 1 do
64741: LD_ADDR_VAR 0 3
64745: PUSH
64746: DOUBLE
64747: LD_VAR 0 1
64751: INC
64752: ST_TO_ADDR
64753: LD_INT 1
64755: PUSH
64756: FOR_DOWNTO
64757: IFFALSE 64834
// begin index := rand ( 1 , array ) ;
64759: LD_ADDR_VAR 0 4
64763: PUSH
64764: LD_INT 1
64766: PPUSH
64767: LD_VAR 0 1
64771: PPUSH
64772: CALL_OW 12
64776: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64777: LD_ADDR_VAR 0 2
64781: PUSH
64782: LD_VAR 0 2
64786: PPUSH
64787: LD_VAR 0 2
64791: PUSH
64792: LD_INT 1
64794: PLUS
64795: PPUSH
64796: LD_VAR 0 1
64800: PUSH
64801: LD_VAR 0 4
64805: ARRAY
64806: PPUSH
64807: CALL_OW 2
64811: ST_TO_ADDR
// array := Delete ( array , index ) ;
64812: LD_ADDR_VAR 0 1
64816: PUSH
64817: LD_VAR 0 1
64821: PPUSH
64822: LD_VAR 0 4
64826: PPUSH
64827: CALL_OW 3
64831: ST_TO_ADDR
// end ;
64832: GO 64756
64834: POP
64835: POP
// end ;
64836: LD_VAR 0 2
64840: RET
// export function GetBaseMaterials ( base ) ; begin
64841: LD_INT 0
64843: PPUSH
// result := [ 0 , 0 , 0 ] ;
64844: LD_ADDR_VAR 0 2
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: LIST
64862: ST_TO_ADDR
// if not base then
64863: LD_VAR 0 1
64867: NOT
64868: IFFALSE 64872
// exit ;
64870: GO 64921
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64872: LD_ADDR_VAR 0 2
64876: PUSH
64877: LD_VAR 0 1
64881: PPUSH
64882: LD_INT 1
64884: PPUSH
64885: CALL_OW 275
64889: PUSH
64890: LD_VAR 0 1
64894: PPUSH
64895: LD_INT 2
64897: PPUSH
64898: CALL_OW 275
64902: PUSH
64903: LD_VAR 0 1
64907: PPUSH
64908: LD_INT 3
64910: PPUSH
64911: CALL_OW 275
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: ST_TO_ADDR
// end ;
64921: LD_VAR 0 2
64925: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64926: LD_INT 0
64928: PPUSH
64929: PPUSH
// result := array ;
64930: LD_ADDR_VAR 0 3
64934: PUSH
64935: LD_VAR 0 1
64939: ST_TO_ADDR
// if size >= result then
64940: LD_VAR 0 2
64944: PUSH
64945: LD_VAR 0 3
64949: GREATEREQUAL
64950: IFFALSE 64954
// exit ;
64952: GO 65004
// if size then
64954: LD_VAR 0 2
64958: IFFALSE 65004
// for i := array downto size do
64960: LD_ADDR_VAR 0 4
64964: PUSH
64965: DOUBLE
64966: LD_VAR 0 1
64970: INC
64971: ST_TO_ADDR
64972: LD_VAR 0 2
64976: PUSH
64977: FOR_DOWNTO
64978: IFFALSE 65002
// result := Delete ( result , result ) ;
64980: LD_ADDR_VAR 0 3
64984: PUSH
64985: LD_VAR 0 3
64989: PPUSH
64990: LD_VAR 0 3
64994: PPUSH
64995: CALL_OW 3
64999: ST_TO_ADDR
65000: GO 64977
65002: POP
65003: POP
// end ;
65004: LD_VAR 0 3
65008: RET
// export function ComExit ( unit ) ; var tmp ; begin
65009: LD_INT 0
65011: PPUSH
65012: PPUSH
// if not IsInUnit ( unit ) then
65013: LD_VAR 0 1
65017: PPUSH
65018: CALL_OW 310
65022: NOT
65023: IFFALSE 65027
// exit ;
65025: GO 65087
// tmp := IsInUnit ( unit ) ;
65027: LD_ADDR_VAR 0 3
65031: PUSH
65032: LD_VAR 0 1
65036: PPUSH
65037: CALL_OW 310
65041: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65042: LD_VAR 0 3
65046: PPUSH
65047: CALL_OW 247
65051: PUSH
65052: LD_INT 2
65054: EQUAL
65055: IFFALSE 65068
// ComExitVehicle ( unit ) else
65057: LD_VAR 0 1
65061: PPUSH
65062: CALL_OW 121
65066: GO 65077
// ComExitBuilding ( unit ) ;
65068: LD_VAR 0 1
65072: PPUSH
65073: CALL_OW 122
// result := tmp ;
65077: LD_ADDR_VAR 0 2
65081: PUSH
65082: LD_VAR 0 3
65086: ST_TO_ADDR
// end ;
65087: LD_VAR 0 2
65091: RET
// export function ComExitAll ( units ) ; var i ; begin
65092: LD_INT 0
65094: PPUSH
65095: PPUSH
// if not units then
65096: LD_VAR 0 1
65100: NOT
65101: IFFALSE 65105
// exit ;
65103: GO 65131
// for i in units do
65105: LD_ADDR_VAR 0 3
65109: PUSH
65110: LD_VAR 0 1
65114: PUSH
65115: FOR_IN
65116: IFFALSE 65129
// ComExit ( i ) ;
65118: LD_VAR 0 3
65122: PPUSH
65123: CALL 65009 0 1
65127: GO 65115
65129: POP
65130: POP
// end ;
65131: LD_VAR 0 2
65135: RET
// export function ResetHc ; begin
65136: LD_INT 0
65138: PPUSH
// InitHc ;
65139: CALL_OW 19
// hc_importance := 0 ;
65143: LD_ADDR_OWVAR 32
65147: PUSH
65148: LD_INT 0
65150: ST_TO_ADDR
// end ;
65151: LD_VAR 0 1
65155: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65156: LD_INT 0
65158: PPUSH
65159: PPUSH
65160: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65161: LD_ADDR_VAR 0 6
65165: PUSH
65166: LD_VAR 0 1
65170: PUSH
65171: LD_VAR 0 3
65175: PLUS
65176: PUSH
65177: LD_INT 2
65179: DIV
65180: ST_TO_ADDR
// if _x < 0 then
65181: LD_VAR 0 6
65185: PUSH
65186: LD_INT 0
65188: LESS
65189: IFFALSE 65206
// _x := _x * - 1 ;
65191: LD_ADDR_VAR 0 6
65195: PUSH
65196: LD_VAR 0 6
65200: PUSH
65201: LD_INT 1
65203: NEG
65204: MUL
65205: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65206: LD_ADDR_VAR 0 7
65210: PUSH
65211: LD_VAR 0 2
65215: PUSH
65216: LD_VAR 0 4
65220: PLUS
65221: PUSH
65222: LD_INT 2
65224: DIV
65225: ST_TO_ADDR
// if _y < 0 then
65226: LD_VAR 0 7
65230: PUSH
65231: LD_INT 0
65233: LESS
65234: IFFALSE 65251
// _y := _y * - 1 ;
65236: LD_ADDR_VAR 0 7
65240: PUSH
65241: LD_VAR 0 7
65245: PUSH
65246: LD_INT 1
65248: NEG
65249: MUL
65250: ST_TO_ADDR
// result := [ _x , _y ] ;
65251: LD_ADDR_VAR 0 5
65255: PUSH
65256: LD_VAR 0 6
65260: PUSH
65261: LD_VAR 0 7
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: ST_TO_ADDR
// end ;
65270: LD_VAR 0 5
65274: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65275: LD_INT 0
65277: PPUSH
65278: PPUSH
65279: PPUSH
65280: PPUSH
// task := GetTaskList ( unit ) ;
65281: LD_ADDR_VAR 0 7
65285: PUSH
65286: LD_VAR 0 1
65290: PPUSH
65291: CALL_OW 437
65295: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65296: LD_VAR 0 7
65300: NOT
65301: PUSH
65302: LD_VAR 0 1
65306: PPUSH
65307: LD_VAR 0 2
65311: PPUSH
65312: CALL_OW 308
65316: NOT
65317: AND
65318: IFFALSE 65322
// exit ;
65320: GO 65440
// if IsInArea ( unit , area ) then
65322: LD_VAR 0 1
65326: PPUSH
65327: LD_VAR 0 2
65331: PPUSH
65332: CALL_OW 308
65336: IFFALSE 65354
// begin ComMoveToArea ( unit , goAway ) ;
65338: LD_VAR 0 1
65342: PPUSH
65343: LD_VAR 0 3
65347: PPUSH
65348: CALL_OW 113
// exit ;
65352: GO 65440
// end ; if task [ 1 ] [ 1 ] <> M then
65354: LD_VAR 0 7
65358: PUSH
65359: LD_INT 1
65361: ARRAY
65362: PUSH
65363: LD_INT 1
65365: ARRAY
65366: PUSH
65367: LD_STRING M
65369: NONEQUAL
65370: IFFALSE 65374
// exit ;
65372: GO 65440
// x := task [ 1 ] [ 2 ] ;
65374: LD_ADDR_VAR 0 5
65378: PUSH
65379: LD_VAR 0 7
65383: PUSH
65384: LD_INT 1
65386: ARRAY
65387: PUSH
65388: LD_INT 2
65390: ARRAY
65391: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65392: LD_ADDR_VAR 0 6
65396: PUSH
65397: LD_VAR 0 7
65401: PUSH
65402: LD_INT 1
65404: ARRAY
65405: PUSH
65406: LD_INT 3
65408: ARRAY
65409: ST_TO_ADDR
// if InArea ( x , y , area ) then
65410: LD_VAR 0 5
65414: PPUSH
65415: LD_VAR 0 6
65419: PPUSH
65420: LD_VAR 0 2
65424: PPUSH
65425: CALL_OW 309
65429: IFFALSE 65440
// ComStop ( unit ) ;
65431: LD_VAR 0 1
65435: PPUSH
65436: CALL_OW 141
// end ;
65440: LD_VAR 0 4
65444: RET
// export function Abs ( value ) ; begin
65445: LD_INT 0
65447: PPUSH
// result := value ;
65448: LD_ADDR_VAR 0 2
65452: PUSH
65453: LD_VAR 0 1
65457: ST_TO_ADDR
// if value < 0 then
65458: LD_VAR 0 1
65462: PUSH
65463: LD_INT 0
65465: LESS
65466: IFFALSE 65483
// result := value * - 1 ;
65468: LD_ADDR_VAR 0 2
65472: PUSH
65473: LD_VAR 0 1
65477: PUSH
65478: LD_INT 1
65480: NEG
65481: MUL
65482: ST_TO_ADDR
// end ;
65483: LD_VAR 0 2
65487: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65488: LD_INT 0
65490: PPUSH
65491: PPUSH
65492: PPUSH
65493: PPUSH
65494: PPUSH
65495: PPUSH
65496: PPUSH
65497: PPUSH
// if not unit or not building then
65498: LD_VAR 0 1
65502: NOT
65503: PUSH
65504: LD_VAR 0 2
65508: NOT
65509: OR
65510: IFFALSE 65514
// exit ;
65512: GO 65740
// x := GetX ( building ) ;
65514: LD_ADDR_VAR 0 4
65518: PUSH
65519: LD_VAR 0 2
65523: PPUSH
65524: CALL_OW 250
65528: ST_TO_ADDR
// y := GetY ( building ) ;
65529: LD_ADDR_VAR 0 6
65533: PUSH
65534: LD_VAR 0 2
65538: PPUSH
65539: CALL_OW 251
65543: ST_TO_ADDR
// d := GetDir ( building ) ;
65544: LD_ADDR_VAR 0 8
65548: PUSH
65549: LD_VAR 0 2
65553: PPUSH
65554: CALL_OW 254
65558: ST_TO_ADDR
// r := 4 ;
65559: LD_ADDR_VAR 0 9
65563: PUSH
65564: LD_INT 4
65566: ST_TO_ADDR
// for i := 1 to 5 do
65567: LD_ADDR_VAR 0 10
65571: PUSH
65572: DOUBLE
65573: LD_INT 1
65575: DEC
65576: ST_TO_ADDR
65577: LD_INT 5
65579: PUSH
65580: FOR_TO
65581: IFFALSE 65738
// begin _x := ShiftX ( x , d , r + i ) ;
65583: LD_ADDR_VAR 0 5
65587: PUSH
65588: LD_VAR 0 4
65592: PPUSH
65593: LD_VAR 0 8
65597: PPUSH
65598: LD_VAR 0 9
65602: PUSH
65603: LD_VAR 0 10
65607: PLUS
65608: PPUSH
65609: CALL_OW 272
65613: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65614: LD_ADDR_VAR 0 7
65618: PUSH
65619: LD_VAR 0 6
65623: PPUSH
65624: LD_VAR 0 8
65628: PPUSH
65629: LD_VAR 0 9
65633: PUSH
65634: LD_VAR 0 10
65638: PLUS
65639: PPUSH
65640: CALL_OW 273
65644: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65645: LD_VAR 0 5
65649: PPUSH
65650: LD_VAR 0 7
65654: PPUSH
65655: CALL_OW 488
65659: PUSH
65660: LD_VAR 0 5
65664: PPUSH
65665: LD_VAR 0 7
65669: PPUSH
65670: CALL_OW 428
65674: PPUSH
65675: CALL_OW 247
65679: PUSH
65680: LD_INT 3
65682: PUSH
65683: LD_INT 2
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: IN
65690: NOT
65691: AND
65692: IFFALSE 65736
// begin ComMoveXY ( unit , _x , _y ) ;
65694: LD_VAR 0 1
65698: PPUSH
65699: LD_VAR 0 5
65703: PPUSH
65704: LD_VAR 0 7
65708: PPUSH
65709: CALL_OW 111
// result := [ _x , _y ] ;
65713: LD_ADDR_VAR 0 3
65717: PUSH
65718: LD_VAR 0 5
65722: PUSH
65723: LD_VAR 0 7
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: ST_TO_ADDR
// exit ;
65732: POP
65733: POP
65734: GO 65740
// end ; end ;
65736: GO 65580
65738: POP
65739: POP
// end ;
65740: LD_VAR 0 3
65744: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65745: LD_INT 0
65747: PPUSH
65748: PPUSH
65749: PPUSH
// result := 0 ;
65750: LD_ADDR_VAR 0 3
65754: PUSH
65755: LD_INT 0
65757: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65758: LD_VAR 0 1
65762: PUSH
65763: LD_INT 0
65765: LESS
65766: PUSH
65767: LD_VAR 0 1
65771: PUSH
65772: LD_INT 8
65774: GREATER
65775: OR
65776: PUSH
65777: LD_VAR 0 2
65781: PUSH
65782: LD_INT 0
65784: LESS
65785: OR
65786: PUSH
65787: LD_VAR 0 2
65791: PUSH
65792: LD_INT 8
65794: GREATER
65795: OR
65796: IFFALSE 65800
// exit ;
65798: GO 65875
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65800: LD_ADDR_VAR 0 4
65804: PUSH
65805: LD_INT 22
65807: PUSH
65808: LD_VAR 0 2
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PPUSH
65817: CALL_OW 69
65821: PUSH
65822: FOR_IN
65823: IFFALSE 65873
// begin un := UnitShoot ( i ) ;
65825: LD_ADDR_VAR 0 5
65829: PUSH
65830: LD_VAR 0 4
65834: PPUSH
65835: CALL_OW 504
65839: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65840: LD_VAR 0 5
65844: PPUSH
65845: CALL_OW 255
65849: PUSH
65850: LD_VAR 0 1
65854: EQUAL
65855: IFFALSE 65871
// begin result := un ;
65857: LD_ADDR_VAR 0 3
65861: PUSH
65862: LD_VAR 0 5
65866: ST_TO_ADDR
// exit ;
65867: POP
65868: POP
65869: GO 65875
// end ; end ;
65871: GO 65822
65873: POP
65874: POP
// end ;
65875: LD_VAR 0 3
65879: RET
// export function GetCargoBay ( units ) ; begin
65880: LD_INT 0
65882: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65883: LD_ADDR_VAR 0 2
65887: PUSH
65888: LD_VAR 0 1
65892: PPUSH
65893: LD_INT 2
65895: PUSH
65896: LD_INT 34
65898: PUSH
65899: LD_INT 12
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 34
65908: PUSH
65909: LD_INT 51
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 34
65918: PUSH
65919: LD_INT 32
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 34
65928: PUSH
65929: LD_INT 89
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: PPUSH
65943: CALL_OW 72
65947: ST_TO_ADDR
// end ;
65948: LD_VAR 0 2
65952: RET
// export function Negate ( value ) ; begin
65953: LD_INT 0
65955: PPUSH
// result := not value ;
65956: LD_ADDR_VAR 0 2
65960: PUSH
65961: LD_VAR 0 1
65965: NOT
65966: ST_TO_ADDR
// end ;
65967: LD_VAR 0 2
65971: RET
// export function Inc ( value ) ; begin
65972: LD_INT 0
65974: PPUSH
// result := value + 1 ;
65975: LD_ADDR_VAR 0 2
65979: PUSH
65980: LD_VAR 0 1
65984: PUSH
65985: LD_INT 1
65987: PLUS
65988: ST_TO_ADDR
// end ;
65989: LD_VAR 0 2
65993: RET
// export function Dec ( value ) ; begin
65994: LD_INT 0
65996: PPUSH
// result := value - 1 ;
65997: LD_ADDR_VAR 0 2
66001: PUSH
66002: LD_VAR 0 1
66006: PUSH
66007: LD_INT 1
66009: MINUS
66010: ST_TO_ADDR
// end ;
66011: LD_VAR 0 2
66015: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66016: LD_INT 0
66018: PPUSH
66019: PPUSH
66020: PPUSH
66021: PPUSH
66022: PPUSH
66023: PPUSH
66024: PPUSH
66025: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66026: LD_VAR 0 1
66030: PPUSH
66031: LD_VAR 0 2
66035: PPUSH
66036: CALL_OW 488
66040: NOT
66041: PUSH
66042: LD_VAR 0 3
66046: PPUSH
66047: LD_VAR 0 4
66051: PPUSH
66052: CALL_OW 488
66056: NOT
66057: OR
66058: IFFALSE 66071
// begin result := - 1 ;
66060: LD_ADDR_VAR 0 5
66064: PUSH
66065: LD_INT 1
66067: NEG
66068: ST_TO_ADDR
// exit ;
66069: GO 66306
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66071: LD_ADDR_VAR 0 12
66075: PUSH
66076: LD_VAR 0 1
66080: PPUSH
66081: LD_VAR 0 2
66085: PPUSH
66086: LD_VAR 0 3
66090: PPUSH
66091: LD_VAR 0 4
66095: PPUSH
66096: CALL 65156 0 4
66100: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66101: LD_ADDR_VAR 0 11
66105: PUSH
66106: LD_VAR 0 1
66110: PPUSH
66111: LD_VAR 0 2
66115: PPUSH
66116: LD_VAR 0 12
66120: PUSH
66121: LD_INT 1
66123: ARRAY
66124: PPUSH
66125: LD_VAR 0 12
66129: PUSH
66130: LD_INT 2
66132: ARRAY
66133: PPUSH
66134: CALL_OW 298
66138: ST_TO_ADDR
// distance := 9999 ;
66139: LD_ADDR_VAR 0 10
66143: PUSH
66144: LD_INT 9999
66146: ST_TO_ADDR
// for i := 0 to 5 do
66147: LD_ADDR_VAR 0 6
66151: PUSH
66152: DOUBLE
66153: LD_INT 0
66155: DEC
66156: ST_TO_ADDR
66157: LD_INT 5
66159: PUSH
66160: FOR_TO
66161: IFFALSE 66304
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66163: LD_ADDR_VAR 0 7
66167: PUSH
66168: LD_VAR 0 1
66172: PPUSH
66173: LD_VAR 0 6
66177: PPUSH
66178: LD_VAR 0 11
66182: PPUSH
66183: CALL_OW 272
66187: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66188: LD_ADDR_VAR 0 8
66192: PUSH
66193: LD_VAR 0 2
66197: PPUSH
66198: LD_VAR 0 6
66202: PPUSH
66203: LD_VAR 0 11
66207: PPUSH
66208: CALL_OW 273
66212: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66213: LD_VAR 0 7
66217: PPUSH
66218: LD_VAR 0 8
66222: PPUSH
66223: CALL_OW 488
66227: NOT
66228: IFFALSE 66232
// continue ;
66230: GO 66160
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66232: LD_ADDR_VAR 0 9
66236: PUSH
66237: LD_VAR 0 12
66241: PUSH
66242: LD_INT 1
66244: ARRAY
66245: PPUSH
66246: LD_VAR 0 12
66250: PUSH
66251: LD_INT 2
66253: ARRAY
66254: PPUSH
66255: LD_VAR 0 7
66259: PPUSH
66260: LD_VAR 0 8
66264: PPUSH
66265: CALL_OW 298
66269: ST_TO_ADDR
// if tmp < distance then
66270: LD_VAR 0 9
66274: PUSH
66275: LD_VAR 0 10
66279: LESS
66280: IFFALSE 66302
// begin result := i ;
66282: LD_ADDR_VAR 0 5
66286: PUSH
66287: LD_VAR 0 6
66291: ST_TO_ADDR
// distance := tmp ;
66292: LD_ADDR_VAR 0 10
66296: PUSH
66297: LD_VAR 0 9
66301: ST_TO_ADDR
// end ; end ;
66302: GO 66160
66304: POP
66305: POP
// end ;
66306: LD_VAR 0 5
66310: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66311: LD_INT 0
66313: PPUSH
66314: PPUSH
// if not driver or not IsInUnit ( driver ) then
66315: LD_VAR 0 1
66319: NOT
66320: PUSH
66321: LD_VAR 0 1
66325: PPUSH
66326: CALL_OW 310
66330: NOT
66331: OR
66332: IFFALSE 66336
// exit ;
66334: GO 66426
// vehicle := IsInUnit ( driver ) ;
66336: LD_ADDR_VAR 0 3
66340: PUSH
66341: LD_VAR 0 1
66345: PPUSH
66346: CALL_OW 310
66350: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66351: LD_VAR 0 1
66355: PPUSH
66356: LD_STRING \
66358: PUSH
66359: LD_INT 0
66361: PUSH
66362: LD_INT 0
66364: PUSH
66365: LD_INT 0
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: LD_INT 0
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: PUSH
66386: LD_STRING E
66388: PUSH
66389: LD_INT 0
66391: PUSH
66392: LD_INT 0
66394: PUSH
66395: LD_VAR 0 3
66399: PUSH
66400: LD_INT 0
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: LD_INT 0
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PPUSH
66422: CALL_OW 446
// end ;
66426: LD_VAR 0 2
66430: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66431: LD_INT 0
66433: PPUSH
66434: PPUSH
// if not driver or not IsInUnit ( driver ) then
66435: LD_VAR 0 1
66439: NOT
66440: PUSH
66441: LD_VAR 0 1
66445: PPUSH
66446: CALL_OW 310
66450: NOT
66451: OR
66452: IFFALSE 66456
// exit ;
66454: GO 66546
// vehicle := IsInUnit ( driver ) ;
66456: LD_ADDR_VAR 0 3
66460: PUSH
66461: LD_VAR 0 1
66465: PPUSH
66466: CALL_OW 310
66470: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66471: LD_VAR 0 1
66475: PPUSH
66476: LD_STRING \
66478: PUSH
66479: LD_INT 0
66481: PUSH
66482: LD_INT 0
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: LD_INT 0
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: PUSH
66506: LD_STRING E
66508: PUSH
66509: LD_INT 0
66511: PUSH
66512: LD_INT 0
66514: PUSH
66515: LD_VAR 0 3
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: LD_INT 0
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PPUSH
66542: CALL_OW 447
// end ;
66546: LD_VAR 0 2
66550: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66551: LD_INT 0
66553: PPUSH
66554: PPUSH
66555: PPUSH
// tmp := [ ] ;
66556: LD_ADDR_VAR 0 5
66560: PUSH
66561: EMPTY
66562: ST_TO_ADDR
// for i in units do
66563: LD_ADDR_VAR 0 4
66567: PUSH
66568: LD_VAR 0 1
66572: PUSH
66573: FOR_IN
66574: IFFALSE 66612
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66576: LD_ADDR_VAR 0 5
66580: PUSH
66581: LD_VAR 0 5
66585: PPUSH
66586: LD_VAR 0 5
66590: PUSH
66591: LD_INT 1
66593: PLUS
66594: PPUSH
66595: LD_VAR 0 4
66599: PPUSH
66600: CALL_OW 256
66604: PPUSH
66605: CALL_OW 2
66609: ST_TO_ADDR
66610: GO 66573
66612: POP
66613: POP
// if not tmp then
66614: LD_VAR 0 5
66618: NOT
66619: IFFALSE 66623
// exit ;
66621: GO 66671
// if asc then
66623: LD_VAR 0 2
66627: IFFALSE 66651
// result := SortListByListAsc ( units , tmp ) else
66629: LD_ADDR_VAR 0 3
66633: PUSH
66634: LD_VAR 0 1
66638: PPUSH
66639: LD_VAR 0 5
66643: PPUSH
66644: CALL_OW 76
66648: ST_TO_ADDR
66649: GO 66671
// result := SortListByListDesc ( units , tmp ) ;
66651: LD_ADDR_VAR 0 3
66655: PUSH
66656: LD_VAR 0 1
66660: PPUSH
66661: LD_VAR 0 5
66665: PPUSH
66666: CALL_OW 77
66670: ST_TO_ADDR
// end ;
66671: LD_VAR 0 3
66675: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66676: LD_INT 0
66678: PPUSH
66679: PPUSH
// task := GetTaskList ( mech ) ;
66680: LD_ADDR_VAR 0 4
66684: PUSH
66685: LD_VAR 0 1
66689: PPUSH
66690: CALL_OW 437
66694: ST_TO_ADDR
// if not task then
66695: LD_VAR 0 4
66699: NOT
66700: IFFALSE 66704
// exit ;
66702: GO 66746
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66704: LD_ADDR_VAR 0 3
66708: PUSH
66709: LD_VAR 0 4
66713: PUSH
66714: LD_INT 1
66716: ARRAY
66717: PUSH
66718: LD_INT 1
66720: ARRAY
66721: PUSH
66722: LD_STRING r
66724: EQUAL
66725: PUSH
66726: LD_VAR 0 4
66730: PUSH
66731: LD_INT 1
66733: ARRAY
66734: PUSH
66735: LD_INT 4
66737: ARRAY
66738: PUSH
66739: LD_VAR 0 2
66743: EQUAL
66744: AND
66745: ST_TO_ADDR
// end ;
66746: LD_VAR 0 3
66750: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66751: LD_INT 0
66753: PPUSH
// SetDir ( unit , d ) ;
66754: LD_VAR 0 1
66758: PPUSH
66759: LD_VAR 0 4
66763: PPUSH
66764: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66768: LD_VAR 0 1
66772: PPUSH
66773: LD_VAR 0 2
66777: PPUSH
66778: LD_VAR 0 3
66782: PPUSH
66783: LD_VAR 0 5
66787: PPUSH
66788: CALL_OW 48
// end ;
66792: LD_VAR 0 6
66796: RET
// export function ToNaturalNumber ( number ) ; begin
66797: LD_INT 0
66799: PPUSH
// result := number div 1 ;
66800: LD_ADDR_VAR 0 2
66804: PUSH
66805: LD_VAR 0 1
66809: PUSH
66810: LD_INT 1
66812: DIV
66813: ST_TO_ADDR
// if number < 0 then
66814: LD_VAR 0 1
66818: PUSH
66819: LD_INT 0
66821: LESS
66822: IFFALSE 66832
// result := 0 ;
66824: LD_ADDR_VAR 0 2
66828: PUSH
66829: LD_INT 0
66831: ST_TO_ADDR
// end ;
66832: LD_VAR 0 2
66836: RET
// export function SortByClass ( units , class ) ; var un ; begin
66837: LD_INT 0
66839: PPUSH
66840: PPUSH
// if not units or not class then
66841: LD_VAR 0 1
66845: NOT
66846: PUSH
66847: LD_VAR 0 2
66851: NOT
66852: OR
66853: IFFALSE 66857
// exit ;
66855: GO 66952
// result := [ ] ;
66857: LD_ADDR_VAR 0 3
66861: PUSH
66862: EMPTY
66863: ST_TO_ADDR
// for un in units do
66864: LD_ADDR_VAR 0 4
66868: PUSH
66869: LD_VAR 0 1
66873: PUSH
66874: FOR_IN
66875: IFFALSE 66950
// if GetClass ( un ) = class then
66877: LD_VAR 0 4
66881: PPUSH
66882: CALL_OW 257
66886: PUSH
66887: LD_VAR 0 2
66891: EQUAL
66892: IFFALSE 66919
// result := Insert ( result , 1 , un ) else
66894: LD_ADDR_VAR 0 3
66898: PUSH
66899: LD_VAR 0 3
66903: PPUSH
66904: LD_INT 1
66906: PPUSH
66907: LD_VAR 0 4
66911: PPUSH
66912: CALL_OW 2
66916: ST_TO_ADDR
66917: GO 66948
// result := Replace ( result , result + 1 , un ) ;
66919: LD_ADDR_VAR 0 3
66923: PUSH
66924: LD_VAR 0 3
66928: PPUSH
66929: LD_VAR 0 3
66933: PUSH
66934: LD_INT 1
66936: PLUS
66937: PPUSH
66938: LD_VAR 0 4
66942: PPUSH
66943: CALL_OW 1
66947: ST_TO_ADDR
66948: GO 66874
66950: POP
66951: POP
// end ;
66952: LD_VAR 0 3
66956: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66957: LD_INT 0
66959: PPUSH
66960: PPUSH
66961: PPUSH
66962: PPUSH
66963: PPUSH
66964: PPUSH
66965: PPUSH
// result := [ ] ;
66966: LD_ADDR_VAR 0 4
66970: PUSH
66971: EMPTY
66972: ST_TO_ADDR
// if x - r < 0 then
66973: LD_VAR 0 1
66977: PUSH
66978: LD_VAR 0 3
66982: MINUS
66983: PUSH
66984: LD_INT 0
66986: LESS
66987: IFFALSE 66999
// min_x := 0 else
66989: LD_ADDR_VAR 0 8
66993: PUSH
66994: LD_INT 0
66996: ST_TO_ADDR
66997: GO 67015
// min_x := x - r ;
66999: LD_ADDR_VAR 0 8
67003: PUSH
67004: LD_VAR 0 1
67008: PUSH
67009: LD_VAR 0 3
67013: MINUS
67014: ST_TO_ADDR
// if y - r < 0 then
67015: LD_VAR 0 2
67019: PUSH
67020: LD_VAR 0 3
67024: MINUS
67025: PUSH
67026: LD_INT 0
67028: LESS
67029: IFFALSE 67041
// min_y := 0 else
67031: LD_ADDR_VAR 0 7
67035: PUSH
67036: LD_INT 0
67038: ST_TO_ADDR
67039: GO 67057
// min_y := y - r ;
67041: LD_ADDR_VAR 0 7
67045: PUSH
67046: LD_VAR 0 2
67050: PUSH
67051: LD_VAR 0 3
67055: MINUS
67056: ST_TO_ADDR
// max_x := x + r ;
67057: LD_ADDR_VAR 0 9
67061: PUSH
67062: LD_VAR 0 1
67066: PUSH
67067: LD_VAR 0 3
67071: PLUS
67072: ST_TO_ADDR
// max_y := y + r ;
67073: LD_ADDR_VAR 0 10
67077: PUSH
67078: LD_VAR 0 2
67082: PUSH
67083: LD_VAR 0 3
67087: PLUS
67088: ST_TO_ADDR
// for _x = min_x to max_x do
67089: LD_ADDR_VAR 0 5
67093: PUSH
67094: DOUBLE
67095: LD_VAR 0 8
67099: DEC
67100: ST_TO_ADDR
67101: LD_VAR 0 9
67105: PUSH
67106: FOR_TO
67107: IFFALSE 67208
// for _y = min_y to max_y do
67109: LD_ADDR_VAR 0 6
67113: PUSH
67114: DOUBLE
67115: LD_VAR 0 7
67119: DEC
67120: ST_TO_ADDR
67121: LD_VAR 0 10
67125: PUSH
67126: FOR_TO
67127: IFFALSE 67204
// begin if not ValidHex ( _x , _y ) then
67129: LD_VAR 0 5
67133: PPUSH
67134: LD_VAR 0 6
67138: PPUSH
67139: CALL_OW 488
67143: NOT
67144: IFFALSE 67148
// continue ;
67146: GO 67126
// if GetResourceTypeXY ( _x , _y ) then
67148: LD_VAR 0 5
67152: PPUSH
67153: LD_VAR 0 6
67157: PPUSH
67158: CALL_OW 283
67162: IFFALSE 67202
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67164: LD_ADDR_VAR 0 4
67168: PUSH
67169: LD_VAR 0 4
67173: PPUSH
67174: LD_VAR 0 4
67178: PUSH
67179: LD_INT 1
67181: PLUS
67182: PPUSH
67183: LD_VAR 0 5
67187: PUSH
67188: LD_VAR 0 6
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PPUSH
67197: CALL_OW 1
67201: ST_TO_ADDR
// end ;
67202: GO 67126
67204: POP
67205: POP
67206: GO 67106
67208: POP
67209: POP
// end ;
67210: LD_VAR 0 4
67214: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67215: LD_INT 0
67217: PPUSH
67218: PPUSH
67219: PPUSH
67220: PPUSH
67221: PPUSH
67222: PPUSH
67223: PPUSH
67224: PPUSH
// if not units then
67225: LD_VAR 0 1
67229: NOT
67230: IFFALSE 67234
// exit ;
67232: GO 67758
// result := UnitFilter ( units , [ f_ok ] ) ;
67234: LD_ADDR_VAR 0 3
67238: PUSH
67239: LD_VAR 0 1
67243: PPUSH
67244: LD_INT 50
67246: PUSH
67247: EMPTY
67248: LIST
67249: PPUSH
67250: CALL_OW 72
67254: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67255: LD_ADDR_VAR 0 8
67259: PUSH
67260: LD_VAR 0 1
67264: PUSH
67265: LD_INT 1
67267: ARRAY
67268: PPUSH
67269: CALL_OW 255
67273: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67274: LD_ADDR_VAR 0 10
67278: PUSH
67279: LD_INT 29
67281: PUSH
67282: LD_INT 91
67284: PUSH
67285: LD_INT 49
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: LIST
67292: ST_TO_ADDR
// if not result then
67293: LD_VAR 0 3
67297: NOT
67298: IFFALSE 67302
// exit ;
67300: GO 67758
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67302: LD_ADDR_VAR 0 5
67306: PUSH
67307: LD_INT 81
67309: PUSH
67310: LD_VAR 0 8
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PPUSH
67319: CALL_OW 69
67323: ST_TO_ADDR
// for i in result do
67324: LD_ADDR_VAR 0 4
67328: PUSH
67329: LD_VAR 0 3
67333: PUSH
67334: FOR_IN
67335: IFFALSE 67756
// begin tag := GetTag ( i ) + 1 ;
67337: LD_ADDR_VAR 0 9
67341: PUSH
67342: LD_VAR 0 4
67346: PPUSH
67347: CALL_OW 110
67351: PUSH
67352: LD_INT 1
67354: PLUS
67355: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67356: LD_ADDR_VAR 0 7
67360: PUSH
67361: LD_VAR 0 4
67365: PPUSH
67366: CALL_OW 250
67370: PPUSH
67371: LD_VAR 0 4
67375: PPUSH
67376: CALL_OW 251
67380: PPUSH
67381: LD_INT 6
67383: PPUSH
67384: CALL 66957 0 3
67388: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67389: LD_VAR 0 4
67393: PPUSH
67394: CALL_OW 247
67398: PUSH
67399: LD_INT 2
67401: EQUAL
67402: PUSH
67403: LD_VAR 0 7
67407: AND
67408: PUSH
67409: LD_VAR 0 4
67413: PPUSH
67414: CALL_OW 264
67418: PUSH
67419: LD_VAR 0 10
67423: IN
67424: NOT
67425: AND
67426: IFFALSE 67465
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67428: LD_VAR 0 4
67432: PPUSH
67433: LD_VAR 0 7
67437: PUSH
67438: LD_INT 1
67440: ARRAY
67441: PUSH
67442: LD_INT 1
67444: ARRAY
67445: PPUSH
67446: LD_VAR 0 7
67450: PUSH
67451: LD_INT 1
67453: ARRAY
67454: PUSH
67455: LD_INT 2
67457: ARRAY
67458: PPUSH
67459: CALL_OW 116
67463: GO 67754
// if path > tag then
67465: LD_VAR 0 2
67469: PUSH
67470: LD_VAR 0 9
67474: GREATER
67475: IFFALSE 67683
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67477: LD_ADDR_VAR 0 6
67481: PUSH
67482: LD_VAR 0 5
67486: PPUSH
67487: LD_INT 91
67489: PUSH
67490: LD_VAR 0 4
67494: PUSH
67495: LD_INT 8
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: LIST
67502: PPUSH
67503: CALL_OW 72
67507: ST_TO_ADDR
// if nearEnemy then
67508: LD_VAR 0 6
67512: IFFALSE 67581
// begin if GetWeapon ( i ) = ru_time_lapser then
67514: LD_VAR 0 4
67518: PPUSH
67519: CALL_OW 264
67523: PUSH
67524: LD_INT 49
67526: EQUAL
67527: IFFALSE 67555
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67529: LD_VAR 0 4
67533: PPUSH
67534: LD_VAR 0 6
67538: PPUSH
67539: LD_VAR 0 4
67543: PPUSH
67544: CALL_OW 74
67548: PPUSH
67549: CALL_OW 112
67553: GO 67579
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67555: LD_VAR 0 4
67559: PPUSH
67560: LD_VAR 0 6
67564: PPUSH
67565: LD_VAR 0 4
67569: PPUSH
67570: CALL_OW 74
67574: PPUSH
67575: CALL_OW 115
// end else
67579: GO 67681
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67581: LD_VAR 0 4
67585: PPUSH
67586: LD_VAR 0 2
67590: PUSH
67591: LD_VAR 0 9
67595: ARRAY
67596: PUSH
67597: LD_INT 1
67599: ARRAY
67600: PPUSH
67601: LD_VAR 0 2
67605: PUSH
67606: LD_VAR 0 9
67610: ARRAY
67611: PUSH
67612: LD_INT 2
67614: ARRAY
67615: PPUSH
67616: CALL_OW 297
67620: PUSH
67621: LD_INT 6
67623: GREATER
67624: IFFALSE 67667
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67626: LD_VAR 0 4
67630: PPUSH
67631: LD_VAR 0 2
67635: PUSH
67636: LD_VAR 0 9
67640: ARRAY
67641: PUSH
67642: LD_INT 1
67644: ARRAY
67645: PPUSH
67646: LD_VAR 0 2
67650: PUSH
67651: LD_VAR 0 9
67655: ARRAY
67656: PUSH
67657: LD_INT 2
67659: ARRAY
67660: PPUSH
67661: CALL_OW 114
67665: GO 67681
// SetTag ( i , tag ) ;
67667: LD_VAR 0 4
67671: PPUSH
67672: LD_VAR 0 9
67676: PPUSH
67677: CALL_OW 109
// end else
67681: GO 67754
// if enemy then
67683: LD_VAR 0 5
67687: IFFALSE 67754
// begin if GetWeapon ( i ) = ru_time_lapser then
67689: LD_VAR 0 4
67693: PPUSH
67694: CALL_OW 264
67698: PUSH
67699: LD_INT 49
67701: EQUAL
67702: IFFALSE 67730
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67704: LD_VAR 0 4
67708: PPUSH
67709: LD_VAR 0 5
67713: PPUSH
67714: LD_VAR 0 4
67718: PPUSH
67719: CALL_OW 74
67723: PPUSH
67724: CALL_OW 112
67728: GO 67754
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67730: LD_VAR 0 4
67734: PPUSH
67735: LD_VAR 0 5
67739: PPUSH
67740: LD_VAR 0 4
67744: PPUSH
67745: CALL_OW 74
67749: PPUSH
67750: CALL_OW 115
// end ; end ;
67754: GO 67334
67756: POP
67757: POP
// end ;
67758: LD_VAR 0 3
67762: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67763: LD_INT 0
67765: PPUSH
67766: PPUSH
67767: PPUSH
// if not unit or IsInUnit ( unit ) then
67768: LD_VAR 0 1
67772: NOT
67773: PUSH
67774: LD_VAR 0 1
67778: PPUSH
67779: CALL_OW 310
67783: OR
67784: IFFALSE 67788
// exit ;
67786: GO 67879
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67788: LD_ADDR_VAR 0 4
67792: PUSH
67793: LD_VAR 0 1
67797: PPUSH
67798: CALL_OW 250
67802: PPUSH
67803: LD_VAR 0 2
67807: PPUSH
67808: LD_INT 1
67810: PPUSH
67811: CALL_OW 272
67815: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67816: LD_ADDR_VAR 0 5
67820: PUSH
67821: LD_VAR 0 1
67825: PPUSH
67826: CALL_OW 251
67830: PPUSH
67831: LD_VAR 0 2
67835: PPUSH
67836: LD_INT 1
67838: PPUSH
67839: CALL_OW 273
67843: ST_TO_ADDR
// if ValidHex ( x , y ) then
67844: LD_VAR 0 4
67848: PPUSH
67849: LD_VAR 0 5
67853: PPUSH
67854: CALL_OW 488
67858: IFFALSE 67879
// ComTurnXY ( unit , x , y ) ;
67860: LD_VAR 0 1
67864: PPUSH
67865: LD_VAR 0 4
67869: PPUSH
67870: LD_VAR 0 5
67874: PPUSH
67875: CALL_OW 118
// end ;
67879: LD_VAR 0 3
67883: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67884: LD_INT 0
67886: PPUSH
67887: PPUSH
// result := false ;
67888: LD_ADDR_VAR 0 3
67892: PUSH
67893: LD_INT 0
67895: ST_TO_ADDR
// if not units then
67896: LD_VAR 0 2
67900: NOT
67901: IFFALSE 67905
// exit ;
67903: GO 67950
// for i in units do
67905: LD_ADDR_VAR 0 4
67909: PUSH
67910: LD_VAR 0 2
67914: PUSH
67915: FOR_IN
67916: IFFALSE 67948
// if See ( side , i ) then
67918: LD_VAR 0 1
67922: PPUSH
67923: LD_VAR 0 4
67927: PPUSH
67928: CALL_OW 292
67932: IFFALSE 67946
// begin result := true ;
67934: LD_ADDR_VAR 0 3
67938: PUSH
67939: LD_INT 1
67941: ST_TO_ADDR
// exit ;
67942: POP
67943: POP
67944: GO 67950
// end ;
67946: GO 67915
67948: POP
67949: POP
// end ;
67950: LD_VAR 0 3
67954: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67955: LD_INT 0
67957: PPUSH
67958: PPUSH
67959: PPUSH
67960: PPUSH
// if not unit or not points then
67961: LD_VAR 0 1
67965: NOT
67966: PUSH
67967: LD_VAR 0 2
67971: NOT
67972: OR
67973: IFFALSE 67977
// exit ;
67975: GO 68067
// dist := 99999 ;
67977: LD_ADDR_VAR 0 5
67981: PUSH
67982: LD_INT 99999
67984: ST_TO_ADDR
// for i in points do
67985: LD_ADDR_VAR 0 4
67989: PUSH
67990: LD_VAR 0 2
67994: PUSH
67995: FOR_IN
67996: IFFALSE 68065
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67998: LD_ADDR_VAR 0 6
68002: PUSH
68003: LD_VAR 0 1
68007: PPUSH
68008: LD_VAR 0 4
68012: PUSH
68013: LD_INT 1
68015: ARRAY
68016: PPUSH
68017: LD_VAR 0 4
68021: PUSH
68022: LD_INT 2
68024: ARRAY
68025: PPUSH
68026: CALL_OW 297
68030: ST_TO_ADDR
// if tmpDist < dist then
68031: LD_VAR 0 6
68035: PUSH
68036: LD_VAR 0 5
68040: LESS
68041: IFFALSE 68063
// begin result := i ;
68043: LD_ADDR_VAR 0 3
68047: PUSH
68048: LD_VAR 0 4
68052: ST_TO_ADDR
// dist := tmpDist ;
68053: LD_ADDR_VAR 0 5
68057: PUSH
68058: LD_VAR 0 6
68062: ST_TO_ADDR
// end ; end ;
68063: GO 67995
68065: POP
68066: POP
// end ;
68067: LD_VAR 0 3
68071: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68072: LD_INT 0
68074: PPUSH
// uc_side := side ;
68075: LD_ADDR_OWVAR 20
68079: PUSH
68080: LD_VAR 0 1
68084: ST_TO_ADDR
// uc_nation := 3 ;
68085: LD_ADDR_OWVAR 21
68089: PUSH
68090: LD_INT 3
68092: ST_TO_ADDR
// vc_chassis := 25 ;
68093: LD_ADDR_OWVAR 37
68097: PUSH
68098: LD_INT 25
68100: ST_TO_ADDR
// vc_engine := engine_siberite ;
68101: LD_ADDR_OWVAR 39
68105: PUSH
68106: LD_INT 3
68108: ST_TO_ADDR
// vc_control := control_computer ;
68109: LD_ADDR_OWVAR 38
68113: PUSH
68114: LD_INT 3
68116: ST_TO_ADDR
// vc_weapon := 59 ;
68117: LD_ADDR_OWVAR 40
68121: PUSH
68122: LD_INT 59
68124: ST_TO_ADDR
// result := CreateVehicle ;
68125: LD_ADDR_VAR 0 5
68129: PUSH
68130: CALL_OW 45
68134: ST_TO_ADDR
// SetDir ( result , d ) ;
68135: LD_VAR 0 5
68139: PPUSH
68140: LD_VAR 0 4
68144: PPUSH
68145: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68149: LD_VAR 0 5
68153: PPUSH
68154: LD_VAR 0 2
68158: PPUSH
68159: LD_VAR 0 3
68163: PPUSH
68164: LD_INT 0
68166: PPUSH
68167: CALL_OW 48
// end ;
68171: LD_VAR 0 5
68175: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68176: LD_INT 0
68178: PPUSH
68179: PPUSH
68180: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68181: LD_ADDR_VAR 0 2
68185: PUSH
68186: LD_INT 0
68188: PUSH
68189: LD_INT 0
68191: PUSH
68192: LD_INT 0
68194: PUSH
68195: LD_INT 0
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68204: LD_VAR 0 1
68208: NOT
68209: PUSH
68210: LD_VAR 0 1
68214: PPUSH
68215: CALL_OW 264
68219: PUSH
68220: LD_INT 12
68222: PUSH
68223: LD_INT 51
68225: PUSH
68226: LD_INT 32
68228: PUSH
68229: LD_INT 89
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: IN
68238: NOT
68239: OR
68240: IFFALSE 68244
// exit ;
68242: GO 68342
// for i := 1 to 3 do
68244: LD_ADDR_VAR 0 3
68248: PUSH
68249: DOUBLE
68250: LD_INT 1
68252: DEC
68253: ST_TO_ADDR
68254: LD_INT 3
68256: PUSH
68257: FOR_TO
68258: IFFALSE 68340
// begin tmp := GetCargo ( cargo , i ) ;
68260: LD_ADDR_VAR 0 4
68264: PUSH
68265: LD_VAR 0 1
68269: PPUSH
68270: LD_VAR 0 3
68274: PPUSH
68275: CALL_OW 289
68279: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68280: LD_ADDR_VAR 0 2
68284: PUSH
68285: LD_VAR 0 2
68289: PPUSH
68290: LD_VAR 0 3
68294: PPUSH
68295: LD_VAR 0 4
68299: PPUSH
68300: CALL_OW 1
68304: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68305: LD_ADDR_VAR 0 2
68309: PUSH
68310: LD_VAR 0 2
68314: PPUSH
68315: LD_INT 4
68317: PPUSH
68318: LD_VAR 0 2
68322: PUSH
68323: LD_INT 4
68325: ARRAY
68326: PUSH
68327: LD_VAR 0 4
68331: PLUS
68332: PPUSH
68333: CALL_OW 1
68337: ST_TO_ADDR
// end ;
68338: GO 68257
68340: POP
68341: POP
// end ;
68342: LD_VAR 0 2
68346: RET
// export function Length ( array ) ; begin
68347: LD_INT 0
68349: PPUSH
// result := array + 0 ;
68350: LD_ADDR_VAR 0 2
68354: PUSH
68355: LD_VAR 0 1
68359: PUSH
68360: LD_INT 0
68362: PLUS
68363: ST_TO_ADDR
// end ;
68364: LD_VAR 0 2
68368: RET
// export function PrepareArray ( array ) ; begin
68369: LD_INT 0
68371: PPUSH
// result := array diff 0 ;
68372: LD_ADDR_VAR 0 2
68376: PUSH
68377: LD_VAR 0 1
68381: PUSH
68382: LD_INT 0
68384: DIFF
68385: ST_TO_ADDR
// if not result [ 1 ] then
68386: LD_VAR 0 2
68390: PUSH
68391: LD_INT 1
68393: ARRAY
68394: NOT
68395: IFFALSE 68415
// result := Delete ( result , 1 ) ;
68397: LD_ADDR_VAR 0 2
68401: PUSH
68402: LD_VAR 0 2
68406: PPUSH
68407: LD_INT 1
68409: PPUSH
68410: CALL_OW 3
68414: ST_TO_ADDR
// end ;
68415: LD_VAR 0 2
68419: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68420: LD_INT 0
68422: PPUSH
68423: PPUSH
68424: PPUSH
68425: PPUSH
// sibRocketRange := 25 ;
68426: LD_ADDR_VAR 0 6
68430: PUSH
68431: LD_INT 25
68433: ST_TO_ADDR
// result := false ;
68434: LD_ADDR_VAR 0 4
68438: PUSH
68439: LD_INT 0
68441: ST_TO_ADDR
// for i := 0 to 5 do
68442: LD_ADDR_VAR 0 5
68446: PUSH
68447: DOUBLE
68448: LD_INT 0
68450: DEC
68451: ST_TO_ADDR
68452: LD_INT 5
68454: PUSH
68455: FOR_TO
68456: IFFALSE 68523
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68458: LD_VAR 0 1
68462: PPUSH
68463: LD_VAR 0 5
68467: PPUSH
68468: LD_VAR 0 6
68472: PPUSH
68473: CALL_OW 272
68477: PPUSH
68478: LD_VAR 0 2
68482: PPUSH
68483: LD_VAR 0 5
68487: PPUSH
68488: LD_VAR 0 6
68492: PPUSH
68493: CALL_OW 273
68497: PPUSH
68498: LD_VAR 0 3
68502: PPUSH
68503: CALL_OW 309
68507: IFFALSE 68521
// begin result := true ;
68509: LD_ADDR_VAR 0 4
68513: PUSH
68514: LD_INT 1
68516: ST_TO_ADDR
// exit ;
68517: POP
68518: POP
68519: GO 68525
// end ;
68521: GO 68455
68523: POP
68524: POP
// end ;
68525: LD_VAR 0 4
68529: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68530: LD_INT 0
68532: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68533: LD_VAR 0 1
68537: PPUSH
68538: LD_VAR 0 2
68542: PPUSH
68543: LD_INT 0
68545: PPUSH
68546: LD_INT 0
68548: PPUSH
68549: LD_INT 1
68551: PPUSH
68552: LD_INT 0
68554: PPUSH
68555: CALL_OW 587
// end ; end_of_file
68559: LD_VAR 0 3
68563: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68564: LD_VAR 0 1
68568: PUSH
68569: LD_INT 200
68571: DOUBLE
68572: GREATEREQUAL
68573: IFFALSE 68581
68575: LD_INT 299
68577: DOUBLE
68578: LESSEQUAL
68579: IFTRUE 68583
68581: GO 68615
68583: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68584: LD_VAR 0 1
68588: PPUSH
68589: LD_VAR 0 2
68593: PPUSH
68594: LD_VAR 0 3
68598: PPUSH
68599: LD_VAR 0 4
68603: PPUSH
68604: LD_VAR 0 5
68608: PPUSH
68609: CALL 23230 0 5
68613: GO 68692
68615: LD_INT 300
68617: DOUBLE
68618: GREATEREQUAL
68619: IFFALSE 68627
68621: LD_INT 399
68623: DOUBLE
68624: LESSEQUAL
68625: IFTRUE 68629
68627: GO 68691
68629: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68630: LD_VAR 0 1
68634: PPUSH
68635: LD_VAR 0 2
68639: PPUSH
68640: LD_VAR 0 3
68644: PPUSH
68645: LD_VAR 0 4
68649: PPUSH
68650: LD_VAR 0 5
68654: PPUSH
68655: LD_VAR 0 6
68659: PPUSH
68660: LD_VAR 0 7
68664: PPUSH
68665: LD_VAR 0 8
68669: PPUSH
68670: LD_VAR 0 9
68674: PPUSH
68675: LD_VAR 0 10
68679: PPUSH
68680: LD_VAR 0 11
68684: PPUSH
68685: CALL 19563 0 11
68689: GO 68692
68691: POP
// end ;
68692: PPOPN 11
68694: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68695: LD_VAR 0 1
68699: PPUSH
68700: LD_VAR 0 2
68704: PPUSH
68705: LD_VAR 0 3
68709: PPUSH
68710: LD_VAR 0 4
68714: PPUSH
68715: LD_VAR 0 5
68719: PPUSH
68720: CALL 22966 0 5
// end ; end_of_file
68724: PPOPN 5
68726: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68727: LD_VAR 0 1
68731: PPUSH
68732: LD_VAR 0 2
68736: PPUSH
68737: LD_VAR 0 3
68741: PPUSH
68742: LD_VAR 0 4
68746: PPUSH
68747: LD_VAR 0 5
68751: PPUSH
68752: LD_VAR 0 6
68756: PPUSH
68757: CALL 7183 0 6
// end ;
68761: PPOPN 6
68763: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68764: LD_INT 0
68766: PPUSH
// begin if not units then
68767: LD_VAR 0 1
68771: NOT
68772: IFFALSE 68776
// exit ;
68774: GO 68776
// end ;
68776: PPOPN 7
68778: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68779: CALL 7077 0 0
// end ;
68783: PPOPN 1
68785: END
