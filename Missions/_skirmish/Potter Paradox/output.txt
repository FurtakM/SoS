// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 21 0 0
// PrepareLegion ;
   8: CALL 181 0 0
// PrepareAllies ;
  12: CALL 2172 0 0
// Action ;
  16: CALL 4314 0 0
// end ;
  20: END
// function InitGame ; begin
  21: LD_INT 0
  23: PPUSH
// RandomizeAll ;
  24: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// if not Difficulty then
  41: LD_OWVAR 67
  45: NOT
  46: IFFALSE 56
// Difficulty := 2 ;
  48: LD_ADDR_OWVAR 67
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// InitVariables ;
  56: CALL 69 0 0
// SetDiplomacy ;
  60: CALL 133 0 0
// end ; end_of_file
  64: LD_VAR 0 1
  68: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// points := 0 ;
  72: LD_ADDR_EXP 8
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// alert := false ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// game_over := false ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// wave_time := 0 0$00 ;
  96: LD_ADDR_EXP 9
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// bonus_active := false ;
 104: LD_ADDR_EXP 11
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ignore_wave := false ;
 112: LD_ADDR_EXP 13
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// bonus_num := 0 ;
 120: LD_ADDR_EXP 12
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// end ;
 128: LD_VAR 0 1
 132: RET
// export function SetDiplomacy ; begin
 133: LD_INT 0
 135: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 136: LD_INT 92
 138: PPUSH
 139: LD_INT 48
 141: PPUSH
 142: LD_INT 8
 144: PPUSH
 145: LD_INT 32796
 147: NEG
 148: PPUSH
 149: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 153: LD_INT 92
 155: PPUSH
 156: LD_INT 48
 158: PPUSH
 159: LD_INT 8
 161: PPUSH
 162: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 166: LD_INT 5
 168: PPUSH
 169: LD_INT 8
 171: PPUSH
 172: CALL_OW 343
// end ; end_of_file
 176: LD_VAR 0 1
 180: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 181: LD_INT 0
 183: PPUSH
 184: PPUSH
 185: PPUSH
 186: PPUSH
 187: PPUSH
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
 197: PPUSH
 198: PPUSH
 199: PPUSH
 200: PPUSH
// uc_side := 2 ;
 201: LD_ADDR_OWVAR 20
 205: PUSH
 206: LD_INT 2
 208: ST_TO_ADDR
// uc_nation := nation_arabian ;
 209: LD_ADDR_OWVAR 21
 213: PUSH
 214: LD_INT 2
 216: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: LD_INT 6
 225: PPUSH
 226: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 230: LD_ADDR_OWVAR 26
 234: PUSH
 235: LD_STRING Nicolas Vervecken
 237: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 238: LD_ADDR_OWVAR 33
 242: PUSH
 243: LD_STRING SecondCharsGal
 245: ST_TO_ADDR
// hc_face_number := 3 ;
 246: LD_ADDR_OWVAR 34
 250: PUSH
 251: LD_INT 3
 253: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 254: LD_ADDR_OWVAR 29
 258: PUSH
 259: LD_INT 11
 261: PUSH
 262: LD_INT 10
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// Vervecken := CreateHuman ;
 269: LD_ADDR_EXP 10
 273: PUSH
 274: CALL_OW 44
 278: ST_TO_ADDR
// InitHc ;
 279: CALL_OW 19
// uc_side := 8 ;
 283: LD_ADDR_OWVAR 20
 287: PUSH
 288: LD_INT 8
 290: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 291: LD_INT 23
 293: PPUSH
 294: CALL_OW 274
 298: PPUSH
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 4000
 304: PUSH
 305: LD_INT 2500
 307: PUSH
 308: LD_INT 1250
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: LIST
 315: PUSH
 316: LD_OWVAR 67
 320: ARRAY
 321: PPUSH
 322: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 326: LD_INT 23
 328: PPUSH
 329: CALL_OW 274
 333: PPUSH
 334: LD_INT 2
 336: PPUSH
 337: LD_INT 300
 339: PPUSH
 340: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 344: LD_INT 23
 346: PPUSH
 347: CALL_OW 274
 351: PPUSH
 352: LD_INT 3
 354: PPUSH
 355: LD_INT 100
 357: PUSH
 358: LD_INT 50
 360: PUSH
 361: LD_INT 30
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: PUSH
 369: LD_OWVAR 67
 373: ARRAY
 374: PPUSH
 375: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 379: LD_ADDR_VAR 0 14
 383: PUSH
 384: LD_INT 23
 386: PPUSH
 387: CALL_OW 250
 391: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 392: LD_ADDR_VAR 0 15
 396: PUSH
 397: LD_INT 23
 399: PPUSH
 400: CALL_OW 251
 404: ST_TO_ADDR
// team := [ ] ;
 405: LD_ADDR_VAR 0 7
 409: PUSH
 410: EMPTY
 411: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 412: LD_ADDR_VAR 0 8
 416: PUSH
 417: LD_INT 9
 419: PUSH
 420: LD_INT 8
 422: PUSH
 423: LD_INT 7
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: LIST
 430: PUSH
 431: LD_OWVAR 67
 435: ARRAY
 436: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 437: LD_ADDR_VAR 0 9
 441: PUSH
 442: LD_INT 11
 444: PUSH
 445: LD_INT 9
 447: PUSH
 448: LD_INT 8
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: LD_OWVAR 67
 460: ARRAY
 461: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 462: LD_ADDR_VAR 0 10
 466: PUSH
 467: LD_INT 3
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: LD_INT 2
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: PUSH
 481: LD_OWVAR 67
 485: ARRAY
 486: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 487: LD_ADDR_VAR 0 11
 491: PUSH
 492: LD_INT 5
 494: PUSH
 495: LD_INT 4
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 512: LD_ADDR_VAR 0 12
 516: PUSH
 517: LD_INT 3
 519: PUSH
 520: LD_INT 2
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_OWVAR 67
 535: ARRAY
 536: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 537: LD_ADDR_VAR 0 13
 541: PUSH
 542: LD_INT 6
 544: PUSH
 545: LD_INT 5
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: LIST
 555: PUSH
 556: LD_OWVAR 67
 560: ARRAY
 561: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 562: LD_ADDR_VAR 0 18
 566: PUSH
 567: LD_INT 13
 569: PUSH
 570: LD_INT 1
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 26
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 14
 587: PUSH
 588: LD_INT 3
 590: PUSH
 591: LD_INT 1
 593: PUSH
 594: LD_INT 25
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 14
 605: PUSH
 606: LD_INT 3
 608: PUSH
 609: LD_INT 5
 611: PUSH
 612: LD_INT 32
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 14
 623: PUSH
 624: LD_INT 3
 626: PUSH
 627: LD_INT 1
 629: PUSH
 630: LD_INT 31
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 14
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: LD_INT 24
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: PUSH
 657: LD_INT 14
 659: PUSH
 660: LD_INT 3
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 25
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 13
 677: PUSH
 678: LD_INT 3
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: LD_INT 24
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 18
 716: PUSH
 717: LD_OWVAR 67
 721: MINUS
 722: PUSH
 723: LD_INT 1
 725: PLUS
 726: PUSH
 727: FOR_TO
 728: IFFALSE 857
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 730: LD_ADDR_OWVAR 37
 734: PUSH
 735: LD_VAR 0 18
 739: PUSH
 740: LD_VAR 0 2
 744: ARRAY
 745: PUSH
 746: LD_INT 1
 748: ARRAY
 749: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 750: LD_ADDR_OWVAR 39
 754: PUSH
 755: LD_VAR 0 18
 759: PUSH
 760: LD_VAR 0 2
 764: ARRAY
 765: PUSH
 766: LD_INT 2
 768: ARRAY
 769: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 770: LD_ADDR_OWVAR 38
 774: PUSH
 775: LD_VAR 0 18
 779: PUSH
 780: LD_VAR 0 2
 784: ARRAY
 785: PUSH
 786: LD_INT 3
 788: ARRAY
 789: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 790: LD_ADDR_OWVAR 40
 794: PUSH
 795: LD_VAR 0 18
 799: PUSH
 800: LD_VAR 0 2
 804: ARRAY
 805: PUSH
 806: LD_INT 4
 808: ARRAY
 809: ST_TO_ADDR
// un := CreateVehicle ;
 810: LD_ADDR_VAR 0 6
 814: PUSH
 815: CALL_OW 45
 819: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 820: LD_VAR 0 6
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: LD_INT 5
 830: PPUSH
 831: CALL_OW 12
 835: PPUSH
 836: CALL_OW 233
// PlaceUnitArea ( un , parking , false ) ;
 840: LD_VAR 0 6
 844: PPUSH
 845: LD_INT 7
 847: PPUSH
 848: LD_INT 0
 850: PPUSH
 851: CALL_OW 49
// end ;
 855: GO 727
 857: POP
 858: POP
// for i = 1 to ape_num do
 859: LD_ADDR_VAR 0 2
 863: PUSH
 864: DOUBLE
 865: LD_INT 1
 867: DEC
 868: ST_TO_ADDR
 869: LD_VAR 0 13
 873: PUSH
 874: FOR_TO
 875: IFFALSE 942
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 877: LD_INT 0
 879: PPUSH
 880: LD_INT 16
 882: PUSH
 883: LD_INT 15
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 1
 892: PPUSH
 893: LD_INT 2
 895: PPUSH
 896: CALL_OW 12
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 8
 906: PPUSH
 907: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 911: LD_ADDR_VAR 0 7
 915: PUSH
 916: LD_VAR 0 7
 920: PPUSH
 921: LD_VAR 0 7
 925: PUSH
 926: LD_INT 1
 928: PLUS
 929: PPUSH
 930: CALL_OW 44
 934: PPUSH
 935: CALL_OW 2
 939: ST_TO_ADDR
// end ;
 940: GO 874
 942: POP
 943: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 1
 949: PPUSH
 950: LD_VAR 0 8
 954: PPUSH
 955: CALL_OW 380
// l1 := CreateHuman ;
 959: LD_ADDR_EXP 2
 963: PUSH
 964: CALL_OW 44
 968: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
 969: LD_EXP 2
 973: PPUSH
 974: LD_INT 23
 976: PPUSH
 977: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
 981: LD_INT 1
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_VAR 0 8
 991: PPUSH
 992: CALL_OW 380
// l2 := CreateHuman ;
 996: LD_ADDR_EXP 3
1000: PUSH
1001: CALL_OW 44
1005: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1006: LD_EXP 3
1010: PPUSH
1011: LD_INT 23
1013: PPUSH
1014: CALL_OW 52
// for class = 1 to 4 do
1018: LD_ADDR_VAR 0 4
1022: PUSH
1023: DOUBLE
1024: LD_INT 1
1026: DEC
1027: ST_TO_ADDR
1028: LD_INT 4
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1131
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: DOUBLE
1040: LD_INT 1
1042: DEC
1043: ST_TO_ADDR
1044: LD_VAR 0 9
1048: PUSH
1049: LD_VAR 0 10
1053: PUSH
1054: LD_VAR 0 11
1058: PUSH
1059: LD_VAR 0 12
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: PUSH
1070: LD_VAR 0 4
1074: ARRAY
1075: PUSH
1076: FOR_TO
1077: IFFALSE 1127
// begin PrepareHuman ( false , class , skill ) ;
1079: LD_INT 0
1081: PPUSH
1082: LD_VAR 0 4
1086: PPUSH
1087: LD_VAR 0 8
1091: PPUSH
1092: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1096: LD_ADDR_VAR 0 7
1100: PUSH
1101: LD_VAR 0 7
1105: PPUSH
1106: LD_VAR 0 7
1110: PUSH
1111: LD_INT 1
1113: PLUS
1114: PPUSH
1115: CALL_OW 44
1119: PPUSH
1120: CALL_OW 2
1124: ST_TO_ADDR
// end ;
1125: GO 1076
1127: POP
1128: POP
1129: GO 1031
1131: POP
1132: POP
// for i in team do
1133: LD_ADDR_VAR 0 2
1137: PUSH
1138: LD_VAR 0 7
1142: PUSH
1143: FOR_IN
1144: IFFALSE 1620
// begin b := 0 ;
1146: LD_ADDR_VAR 0 5
1150: PUSH
1151: LD_INT 0
1153: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1154: LD_VAR 0 2
1158: PPUSH
1159: CALL_OW 257
1163: PUSH
1164: LD_INT 1
1166: DOUBLE
1167: EQUAL
1168: IFTRUE 1172
1170: GO 1279
1172: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_OWVAR 20
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 2
1192: PUSH
1193: LD_INT 30
1195: PUSH
1196: LD_INT 32
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 30
1205: PUSH
1206: LD_INT 31
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: PUSH
1218: LD_INT 58
1220: PUSH
1221: EMPTY
1222: LIST
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: PPUSH
1229: CALL_OW 69
1233: ST_TO_ADDR
// if not b then
1234: LD_VAR 0 5
1238: NOT
1239: IFFALSE 1277
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1241: LD_ADDR_VAR 0 5
1245: PUSH
1246: LD_INT 22
1248: PUSH
1249: LD_OWVAR 20
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 30
1260: PUSH
1261: LD_INT 5
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: PPUSH
1272: CALL_OW 69
1276: ST_TO_ADDR
// end ; class_engineer :
1277: GO 1518
1279: LD_INT 2
1281: DOUBLE
1282: EQUAL
1283: IFTRUE 1287
1285: GO 1326
1287: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1288: LD_ADDR_VAR 0 5
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_OWVAR 20
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 30
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PPUSH
1319: CALL_OW 69
1323: ST_TO_ADDR
1324: GO 1518
1326: LD_INT 3
1328: DOUBLE
1329: EQUAL
1330: IFTRUE 1334
1332: GO 1423
1334: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1335: LD_ADDR_VAR 0 5
1339: PUSH
1340: LD_INT 22
1342: PUSH
1343: LD_OWVAR 20
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 21
1354: PUSH
1355: LD_INT 2
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 58
1364: PUSH
1365: EMPTY
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: LIST
1372: PPUSH
1373: CALL_OW 69
1377: ST_TO_ADDR
// if not b then
1378: LD_VAR 0 5
1382: NOT
1383: IFFALSE 1421
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1385: LD_ADDR_VAR 0 5
1389: PUSH
1390: LD_INT 22
1392: PUSH
1393: LD_OWVAR 20
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: LD_INT 30
1404: PUSH
1405: LD_INT 3
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PPUSH
1416: CALL_OW 69
1420: ST_TO_ADDR
// end ; class_scientistic :
1421: GO 1518
1423: LD_INT 4
1425: DOUBLE
1426: EQUAL
1427: IFTRUE 1431
1429: GO 1470
1431: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1432: LD_ADDR_VAR 0 5
1436: PUSH
1437: LD_INT 22
1439: PUSH
1440: LD_OWVAR 20
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 30
1451: PUSH
1452: LD_INT 8
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PPUSH
1463: CALL_OW 69
1467: ST_TO_ADDR
// end ; class_apeman_soldier :
1468: GO 1518
1470: LD_INT 15
1472: DOUBLE
1473: EQUAL
1474: IFTRUE 1478
1476: GO 1517
1478: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1479: LD_ADDR_VAR 0 5
1483: PUSH
1484: LD_INT 22
1486: PUSH
1487: LD_OWVAR 20
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 30
1498: PUSH
1499: LD_INT 5
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PPUSH
1510: CALL_OW 69
1514: ST_TO_ADDR
1515: GO 1518
1517: POP
// if b then
1518: LD_VAR 0 5
1522: IFFALSE 1593
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1524: LD_VAR 0 5
1528: PUSH
1529: LD_INT 1
1531: ARRAY
1532: PPUSH
1533: CALL_OW 266
1537: PUSH
1538: LD_INT 31
1540: EQUAL
1541: IFFALSE 1563
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1543: LD_VAR 0 2
1547: PPUSH
1548: LD_VAR 0 5
1552: PUSH
1553: LD_INT 1
1555: ARRAY
1556: PPUSH
1557: CALL 5028 0 2
1561: GO 1591
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1563: LD_VAR 0 2
1567: PPUSH
1568: LD_VAR 0 5
1572: PUSH
1573: LD_INT 1
1575: PPUSH
1576: LD_VAR 0 5
1580: PPUSH
1581: CALL_OW 12
1585: ARRAY
1586: PPUSH
1587: CALL_OW 52
1591: GO 1618
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1593: LD_VAR 0 2
1597: PPUSH
1598: LD_VAR 0 14
1602: PPUSH
1603: LD_VAR 0 15
1607: PPUSH
1608: LD_INT 15
1610: PPUSH
1611: LD_INT 0
1613: PPUSH
1614: CALL_OW 50
// end ;
1618: GO 1143
1620: POP
1621: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1622: LD_ADDR_VAR 0 16
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 3
1632: PUSH
1633: LD_INT 2
1635: PUSH
1636: LD_INT 1
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: PUSH
1644: LD_OWVAR 67
1648: ARRAY
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 25
1656: PUSH
1657: LD_INT 5
1659: PUSH
1660: LD_INT 4
1662: PUSH
1663: LD_INT 3
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_OWVAR 67
1675: ARRAY
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 24
1683: PUSH
1684: LD_INT 5
1686: PUSH
1687: LD_INT 5
1689: PUSH
1690: LD_INT 4
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_OWVAR 67
1702: ARRAY
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 30
1710: PUSH
1711: LD_INT 2
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: LD_INT 1
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_OWVAR 67
1729: ARRAY
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1741: LD_ADDR_VAR 0 2
1745: PUSH
1746: LD_INT 22
1748: PUSH
1749: LD_OWVAR 20
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 30
1760: PUSH
1761: LD_INT 32
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: PPUSH
1772: CALL_OW 69
1776: PUSH
1777: FOR_IN
1778: IFFALSE 1951
// begin if weapons then
1780: LD_VAR 0 16
1784: IFFALSE 1908
// begin k := rand ( 1 , weapons ) ;
1786: LD_ADDR_VAR 0 3
1790: PUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_VAR 0 16
1798: PPUSH
1799: CALL_OW 12
1803: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1804: LD_ADDR_VAR 0 17
1808: PUSH
1809: LD_VAR 0 16
1813: PUSH
1814: LD_VAR 0 3
1818: ARRAY
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1824: LD_ADDR_VAR 0 16
1828: PUSH
1829: LD_VAR 0 16
1833: PPUSH
1834: LD_VAR 0 3
1838: PPUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_VAR 0 16
1846: PUSH
1847: LD_VAR 0 3
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: ARRAY
1856: PUSH
1857: LD_INT 1
1859: MINUS
1860: PPUSH
1861: CALL 5120 0 4
1865: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1866: LD_VAR 0 16
1870: PUSH
1871: LD_VAR 0 3
1875: ARRAY
1876: PUSH
1877: LD_INT 2
1879: ARRAY
1880: PUSH
1881: LD_INT 0
1883: EQUAL
1884: IFFALSE 1906
// weapons := Delete ( weapons , k ) ;
1886: LD_ADDR_VAR 0 16
1890: PUSH
1891: LD_VAR 0 16
1895: PPUSH
1896: LD_VAR 0 3
1900: PPUSH
1901: CALL_OW 3
1905: ST_TO_ADDR
// end else
1906: GO 1935
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1908: LD_ADDR_VAR 0 17
1912: PUSH
1913: LD_INT 27
1915: PUSH
1916: LD_INT 23
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 1
1925: PPUSH
1926: LD_INT 2
1928: PPUSH
1929: CALL_OW 12
1933: ARRAY
1934: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1935: LD_VAR 0 2
1939: PPUSH
1940: LD_VAR 0 17
1944: PPUSH
1945: CALL_OW 431
// end ;
1949: GO 1777
1951: POP
1952: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 1
1958: PPUSH
1959: LD_VAR 0 8
1963: PUSH
1964: LD_INT 1
1966: PLUS
1967: PPUSH
1968: CALL_OW 380
// hc_gallery := potter ;
1972: LD_ADDR_OWVAR 33
1976: PUSH
1977: LD_STRING potter
1979: ST_TO_ADDR
// hc_face_number := 1 ;
1980: LD_ADDR_OWVAR 34
1984: PUSH
1985: LD_INT 1
1987: ST_TO_ADDR
// hc_importance := 100 ;
1988: LD_ADDR_OWVAR 32
1992: PUSH
1993: LD_INT 100
1995: ST_TO_ADDR
// hc_name := Mike Gerste ;
1996: LD_ADDR_OWVAR 26
2000: PUSH
2001: LD_STRING Mike Gerste
2003: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2004: LD_ADDR_OWVAR 29
2008: PUSH
2009: LD_INT 10
2011: PUSH
2012: LD_INT 11
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: ST_TO_ADDR
// legion_commander := CreateHuman ;
2019: LD_ADDR_EXP 1
2023: PUSH
2024: CALL_OW 44
2028: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2029: LD_EXP 1
2033: PPUSH
2034: LD_INT 23
2036: PPUSH
2037: CALL_OW 52
// uc_side := 5 ;
2041: LD_ADDR_OWVAR 20
2045: PUSH
2046: LD_INT 5
2048: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2049: LD_INT 1
2051: PPUSH
2052: LD_INT 4
2054: PPUSH
2055: LD_VAR 0 8
2059: PPUSH
2060: CALL_OW 380
// hc_gallery := potter ;
2064: LD_ADDR_OWVAR 33
2068: PUSH
2069: LD_STRING potter
2071: ST_TO_ADDR
// hc_face_number := 2 ;
2072: LD_ADDR_OWVAR 34
2076: PUSH
2077: LD_INT 2
2079: ST_TO_ADDR
// hc_importance := 0 ;
2080: LD_ADDR_OWVAR 32
2084: PUSH
2085: LD_INT 0
2087: ST_TO_ADDR
// hc_name := George Potter ;
2088: LD_ADDR_OWVAR 26
2092: PUSH
2093: LD_STRING George Potter
2095: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2096: LD_ADDR_OWVAR 29
2100: PUSH
2101: LD_INT 12
2103: PUSH
2104: LD_INT 9
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: ST_TO_ADDR
// potter := CreateHuman ;
2111: LD_ADDR_EXP 4
2115: PUSH
2116: CALL_OW 44
2120: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2121: LD_EXP 4
2125: PPUSH
2126: LD_INT 4
2128: PPUSH
2129: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2133: LD_EXP 4
2137: PPUSH
2138: LD_INT 103
2140: PPUSH
2141: LD_INT 45
2143: PPUSH
2144: LD_INT 0
2146: PPUSH
2147: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2151: LD_EXP 4
2155: PPUSH
2156: LD_INT 23
2158: PPUSH
2159: CALL_OW 119
// InitHc ( ) ;
2163: CALL_OW 19
// end ; end_of_file
2167: LD_VAR 0 1
2171: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2172: LD_INT 0
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// uc_side := 5 ;
2179: LD_ADDR_OWVAR 20
2183: PUSH
2184: LD_INT 5
2186: ST_TO_ADDR
// uc_nation := nation_arabian ;
2187: LD_ADDR_OWVAR 21
2191: PUSH
2192: LD_INT 2
2194: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2195: LD_ADDR_VAR 0 4
2199: PUSH
2200: LD_INT 22
2202: PUSH
2203: LD_OWVAR 20
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: PUSH
2212: LD_INT 30
2214: PUSH
2215: LD_INT 5
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PPUSH
2226: CALL_OW 69
2230: ST_TO_ADDR
// for i = 1 to 3 do
2231: LD_ADDR_VAR 0 2
2235: PUSH
2236: DOUBLE
2237: LD_INT 1
2239: DEC
2240: ST_TO_ADDR
2241: LD_INT 3
2243: PUSH
2244: FOR_TO
2245: IFFALSE 2283
// begin PrepareHuman ( false , 2 , 6 ) ;
2247: LD_INT 0
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: LD_INT 6
2255: PPUSH
2256: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2260: CALL_OW 44
2264: PPUSH
2265: LD_INT 27
2267: PPUSH
2268: LD_INT 22
2270: PPUSH
2271: LD_INT 5
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: CALL_OW 50
// end ;
2281: GO 2244
2283: POP
2284: POP
// for i = 1 to 3 do
2285: LD_ADDR_VAR 0 2
2289: PUSH
2290: DOUBLE
2291: LD_INT 1
2293: DEC
2294: ST_TO_ADDR
2295: LD_INT 3
2297: PUSH
2298: FOR_TO
2299: IFFALSE 2334
// begin PrepareHuman ( false , 1 , 6 ) ;
2301: LD_INT 0
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 6
2309: PPUSH
2310: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2314: CALL_OW 44
2318: PPUSH
2319: LD_VAR 0 4
2323: PUSH
2324: LD_INT 1
2326: ARRAY
2327: PPUSH
2328: CALL_OW 52
// end ;
2332: GO 2298
2334: POP
2335: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2336: LD_ADDR_VAR 0 2
2340: PUSH
2341: LD_INT 22
2343: PUSH
2344: LD_OWVAR 20
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 2
2355: PUSH
2356: LD_INT 30
2358: PUSH
2359: LD_INT 31
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PUSH
2366: LD_INT 30
2368: PUSH
2369: LD_INT 32
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PPUSH
2385: CALL_OW 69
2389: PUSH
2390: FOR_IN
2391: IFFALSE 2478
// begin PrepareHuman ( false , 1 , 6 ) ;
2393: LD_INT 0
2395: PPUSH
2396: LD_INT 1
2398: PPUSH
2399: LD_INT 6
2401: PPUSH
2402: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2406: CALL_OW 44
2410: PPUSH
2411: LD_VAR 0 2
2415: PPUSH
2416: CALL 5028 0 2
// if GetBType ( i ) = b_bunker then
2420: LD_VAR 0 2
2424: PPUSH
2425: CALL_OW 266
2429: PUSH
2430: LD_INT 32
2432: EQUAL
2433: IFFALSE 2476
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2435: LD_VAR 0 2
2439: PPUSH
2440: LD_INT 27
2442: PUSH
2443: LD_INT 25
2445: PUSH
2446: LD_INT 24
2448: PUSH
2449: LD_INT 28
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: LD_INT 4
2465: MOD
2466: PUSH
2467: LD_INT 1
2469: PLUS
2470: ARRAY
2471: PPUSH
2472: CALL_OW 431
// end ;
2476: GO 2390
2478: POP
2479: POP
// for i = 1 to 3 do
2480: LD_ADDR_VAR 0 2
2484: PUSH
2485: DOUBLE
2486: LD_INT 1
2488: DEC
2489: ST_TO_ADDR
2490: LD_INT 3
2492: PUSH
2493: FOR_TO
2494: IFFALSE 2611
// begin vc_chassis := ar_half_tracked ;
2496: LD_ADDR_OWVAR 37
2500: PUSH
2501: LD_INT 14
2503: ST_TO_ADDR
// vc_engine := engine_solar ;
2504: LD_ADDR_OWVAR 39
2508: PUSH
2509: LD_INT 2
2511: ST_TO_ADDR
// vc_control := control_manual ;
2512: LD_ADDR_OWVAR 38
2516: PUSH
2517: LD_INT 1
2519: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2520: LD_ADDR_OWVAR 40
2524: PUSH
2525: LD_INT 25
2527: PUSH
2528: LD_INT 27
2530: PUSH
2531: LD_INT 26
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: LIST
2538: PUSH
2539: LD_VAR 0 2
2543: ARRAY
2544: ST_TO_ADDR
// un := CreateVehicle ;
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: CALL_OW 45
2554: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_INT 5
2562: PPUSH
2563: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2567: LD_VAR 0 3
2571: PPUSH
2572: LD_INT 8
2574: PPUSH
2575: LD_INT 0
2577: PPUSH
2578: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2582: LD_INT 0
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_INT 7
2590: PPUSH
2591: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2595: CALL_OW 44
2599: PPUSH
2600: LD_VAR 0 3
2604: PPUSH
2605: CALL_OW 52
// end ;
2609: GO 2493
2611: POP
2612: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2613: LD_INT 1
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 6
2621: PPUSH
2622: CALL_OW 380
// al_commander := CreateHuman ;
2626: LD_ADDR_EXP 5
2630: PUSH
2631: CALL_OW 44
2635: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2636: LD_EXP 5
2640: PPUSH
2641: LD_INT 22
2643: PUSH
2644: LD_OWVAR 20
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 30
2655: PUSH
2656: LD_INT 0
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PPUSH
2667: CALL_OW 69
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PPUSH
2676: CALL_OW 52
// InitHc ( ) ;
2680: CALL_OW 19
// end ;
2684: LD_VAR 0 1
2688: RET
// export function ChangeSide ( ) ; var i ; begin
2689: LD_INT 0
2691: PPUSH
2692: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 22
2700: PUSH
2701: LD_INT 5
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 69
2712: PUSH
2713: FOR_IN
2714: IFFALSE 2730
// SetSide ( i , 8 ) ;
2716: LD_VAR 0 2
2720: PPUSH
2721: LD_INT 8
2723: PPUSH
2724: CALL_OW 235
2728: GO 2713
2730: POP
2731: POP
// end ;
2732: LD_VAR 0 1
2736: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2737: LD_INT 22
2739: PUSH
2740: LD_INT 5
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PPUSH
2747: CALL_OW 69
2751: IFFALSE 3265
2753: GO 2755
2755: DISABLE
2756: LD_INT 0
2758: PPUSH
2759: PPUSH
2760: PPUSH
2761: PPUSH
2762: PPUSH
2763: PPUSH
// begin enable ;
2764: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2765: LD_ADDR_VAR 0 2
2769: PUSH
2770: LD_INT 22
2772: PUSH
2773: LD_INT 5
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: LD_INT 2
2782: PUSH
2783: LD_INT 21
2785: PUSH
2786: LD_INT 1
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 21
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PPUSH
2812: CALL_OW 69
2816: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2817: LD_ADDR_VAR 0 5
2821: PUSH
2822: LD_INT 22
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 30
2834: PUSH
2835: LD_INT 32
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 3
2844: PUSH
2845: LD_INT 24
2847: PUSH
2848: LD_INT 1000
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: LIST
2863: PPUSH
2864: CALL_OW 69
2868: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2869: LD_ADDR_VAR 0 6
2873: PUSH
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_INT 3
2881: PUSH
2882: LD_INT 54
2884: PUSH
2885: EMPTY
2886: LIST
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 25
2894: PUSH
2895: LD_INT 3
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 72
2910: ST_TO_ADDR
// if not list then
2911: LD_VAR 0 2
2915: NOT
2916: IFFALSE 2920
// exit ;
2918: GO 3265
// for i in list do
2920: LD_ADDR_VAR 0 1
2924: PUSH
2925: LD_VAR 0 2
2929: PUSH
2930: FOR_IN
2931: IFFALSE 3263
// begin if b then
2933: LD_VAR 0 5
2937: IFFALSE 3016
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2939: LD_ADDR_VAR 0 4
2943: PUSH
2944: LD_VAR 0 2
2948: PPUSH
2949: LD_INT 25
2951: PUSH
2952: LD_INT 2
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 72
2963: PUSH
2964: FOR_IN
2965: IFFALSE 3014
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
2967: LD_VAR 0 4
2971: PPUSH
2972: CALL_OW 314
2976: NOT
2977: PUSH
2978: LD_VAR 0 1
2982: PPUSH
2983: CALL_OW 110
2987: PUSH
2988: LD_INT 7
2990: NONEQUAL
2991: AND
2992: IFFALSE 3012
// ComRepairBuilding ( j , b [ 1 ] ) ;
2994: LD_VAR 0 4
2998: PPUSH
2999: LD_VAR 0 5
3003: PUSH
3004: LD_INT 1
3006: ARRAY
3007: PPUSH
3008: CALL_OW 130
3012: GO 2964
3014: POP
3015: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3016: LD_VAR 0 1
3020: PPUSH
3021: CALL_OW 256
3025: PUSH
3026: LD_INT 500
3028: LESS
3029: PUSH
3030: LD_VAR 0 1
3034: PPUSH
3035: CALL_OW 110
3039: PUSH
3040: LD_INT 7
3042: EQUAL
3043: NOT
3044: AND
3045: IFFALSE 3095
// begin ComMoveToArea ( i , guard_hill ) ;
3047: LD_VAR 0 1
3051: PPUSH
3052: LD_INT 11
3054: PPUSH
3055: CALL_OW 113
// SetTag ( i , 7 ) ;
3059: LD_VAR 0 1
3063: PPUSH
3064: LD_INT 7
3066: PPUSH
3067: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3071: LD_VAR 0 1
3075: PPUSH
3076: CALL_OW 247
3080: PUSH
3081: LD_INT 2
3083: EQUAL
3084: IFFALSE 3095
// begin AddComExitVehicle ( i ) ;
3086: LD_VAR 0 1
3090: PPUSH
3091: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3095: LD_VAR 0 1
3099: PPUSH
3100: CALL_OW 256
3104: PUSH
3105: LD_INT 1000
3107: EQUAL
3108: PUSH
3109: LD_VAR 0 1
3113: PPUSH
3114: CALL_OW 110
3118: PUSH
3119: LD_INT 7
3121: EQUAL
3122: AND
3123: PUSH
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 310
3133: NOT
3134: AND
3135: PUSH
3136: LD_VAR 0 6
3140: AND
3141: IFFALSE 3169
// begin SetTag ( i , 0 ) ;
3143: LD_VAR 0 1
3147: PPUSH
3148: LD_INT 0
3150: PPUSH
3151: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3155: LD_VAR 0 6
3159: PPUSH
3160: LD_VAR 0 1
3164: PPUSH
3165: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3169: LD_VAR 0 1
3173: PPUSH
3174: CALL_OW 247
3178: PUSH
3179: LD_INT 2
3181: EQUAL
3182: PUSH
3183: LD_VAR 0 1
3187: PPUSH
3188: CALL_OW 110
3192: PUSH
3193: LD_INT 7
3195: NONEQUAL
3196: AND
3197: PUSH
3198: LD_VAR 0 1
3202: PPUSH
3203: CALL_OW 314
3207: NOT
3208: AND
3209: IFFALSE 3261
// if FilterAllUnits ( [ f_side , 7 ] ) then
3211: LD_INT 22
3213: PUSH
3214: LD_INT 7
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PPUSH
3221: CALL_OW 69
3225: IFFALSE 3261
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3227: LD_VAR 0 1
3231: PPUSH
3232: LD_INT 22
3234: PUSH
3235: LD_INT 7
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: PPUSH
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 74
3256: PPUSH
3257: CALL_OW 115
// end ;
3261: GO 2930
3263: POP
3264: POP
// end ; end_of_file
3265: PPOPN 6
3267: END
// export function Game ; var i , val , areas , wave ; begin
3268: LD_INT 0
3270: PPUSH
3271: PPUSH
3272: PPUSH
3273: PPUSH
3274: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3275: LD_ADDR_VAR 0 4
3279: PUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 2
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: LD_INT 4
3291: PUSH
3292: LD_INT 5
3294: PUSH
3295: LD_INT 6
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: ST_TO_ADDR
// val := [ 10 , 20 , 30 ] [ Difficulty ] ;
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: LD_INT 10
3313: PUSH
3314: LD_INT 20
3316: PUSH
3317: LD_INT 30
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: PUSH
3325: LD_OWVAR 67
3329: ARRAY
3330: ST_TO_ADDR
// wave := 1 ;
3331: LD_ADDR_VAR 0 5
3335: PUSH
3336: LD_INT 1
3338: ST_TO_ADDR
// while ( game_over = false ) do
3339: LD_EXP 7
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3511
// begin repeat begin Wait ( 0 0$01 ) ;
3349: LD_INT 35
3351: PPUSH
3352: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3356: LD_ADDR_EXP 9
3360: PUSH
3361: LD_EXP 9
3365: PUSH
3366: LD_INT 35
3368: PLUS
3369: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3370: LD_INT 22
3372: PUSH
3373: LD_INT 7
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PPUSH
3380: CALL_OW 69
3384: PUSH
3385: LD_INT 10
3387: LESS
3388: PUSH
3389: LD_EXP 9
3393: PUSH
3394: LD_INT 21000
3396: GREATEREQUAL
3397: OR
3398: IFFALSE 3349
// wave_time := 0 0$00 ;
3400: LD_ADDR_EXP 9
3404: PUSH
3405: LD_INT 0
3407: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3408: LD_INT 5250
3410: PPUSH
3411: CALL_OW 67
// if not ignore_wave then
3415: LD_EXP 13
3419: NOT
3420: IFFALSE 3501
// begin for i = 1 to wave do
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: DOUBLE
3428: LD_INT 1
3430: DEC
3431: ST_TO_ADDR
3432: LD_VAR 0 5
3436: PUSH
3437: FOR_TO
3438: IFFALSE 3483
// begin SpawnPotter ( val * i , areas [ i mod 6 + 1 ] ) ;
3440: LD_VAR 0 3
3444: PUSH
3445: LD_VAR 0 2
3449: MUL
3450: PPUSH
3451: LD_VAR 0 4
3455: PUSH
3456: LD_VAR 0 2
3460: PUSH
3461: LD_INT 6
3463: MOD
3464: PUSH
3465: LD_INT 1
3467: PLUS
3468: ARRAY
3469: PPUSH
3470: CALL 3516 0 2
// Wait ( 0 0$10 ) ;
3474: LD_INT 350
3476: PPUSH
3477: CALL_OW 67
// end ;
3481: GO 3437
3483: POP
3484: POP
// wave := wave + 1 ;
3485: LD_ADDR_VAR 0 5
3489: PUSH
3490: LD_VAR 0 5
3494: PUSH
3495: LD_INT 1
3497: PLUS
3498: ST_TO_ADDR
// end else
3499: GO 3509
// ignore_wave := false ;
3501: LD_ADDR_EXP 13
3505: PUSH
3506: LD_INT 0
3508: ST_TO_ADDR
// end ;
3509: GO 3339
// end ;
3511: LD_VAR 0 1
3515: RET
// export function SpawnPotter ( val , area ) ; var i , un , class ; begin
3516: LD_INT 0
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
// uc_side := 7 ;
3522: LD_ADDR_OWVAR 20
3526: PUSH
3527: LD_INT 7
3529: ST_TO_ADDR
// uc_nation := 2 ;
3530: LD_ADDR_OWVAR 21
3534: PUSH
3535: LD_INT 2
3537: ST_TO_ADDR
// InitHc ( ) ;
3538: CALL_OW 19
// hc_gallery :=  ;
3542: LD_ADDR_OWVAR 33
3546: PUSH
3547: LD_STRING 
3549: ST_TO_ADDR
// hc_importance := 0 ;
3550: LD_ADDR_OWVAR 32
3554: PUSH
3555: LD_INT 0
3557: ST_TO_ADDR
// hc_name :=  ;
3558: LD_ADDR_OWVAR 26
3562: PUSH
3563: LD_STRING 
3565: ST_TO_ADDR
// hc_attr := [ 10 + ( tick div 10 10$00 ) , 10 + ( tick div 10 10$00 ) ] ;
3566: LD_ADDR_OWVAR 29
3570: PUSH
3571: LD_INT 10
3573: PUSH
3574: LD_OWVAR 1
3578: PUSH
3579: LD_INT 21000
3581: DIV
3582: PLUS
3583: PUSH
3584: LD_INT 10
3586: PUSH
3587: LD_OWVAR 1
3591: PUSH
3592: LD_INT 21000
3594: DIV
3595: PLUS
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: ST_TO_ADDR
// for i = 1 to val do
3601: LD_ADDR_VAR 0 4
3605: PUSH
3606: DOUBLE
3607: LD_INT 1
3609: DEC
3610: ST_TO_ADDR
3611: LD_VAR 0 1
3615: PUSH
3616: FOR_TO
3617: IFFALSE 3824
// begin if i mod 9 = 0 then
3619: LD_VAR 0 4
3623: PUSH
3624: LD_INT 9
3626: MOD
3627: PUSH
3628: LD_INT 0
3630: EQUAL
3631: IFFALSE 3643
// class := class_apeman_kamikaze else
3633: LD_ADDR_VAR 0 6
3637: PUSH
3638: LD_INT 17
3640: ST_TO_ADDR
3641: GO 3675
// if i mod 4 = 0 then
3643: LD_VAR 0 4
3647: PUSH
3648: LD_INT 4
3650: MOD
3651: PUSH
3652: LD_INT 0
3654: EQUAL
3655: IFFALSE 3667
// class := class_apeman_soldier else
3657: LD_ADDR_VAR 0 6
3661: PUSH
3662: LD_INT 15
3664: ST_TO_ADDR
3665: GO 3675
// class := class_apeman ;
3667: LD_ADDR_VAR 0 6
3671: PUSH
3672: LD_INT 12
3674: ST_TO_ADDR
// if i mod 33 = 0 then
3675: LD_VAR 0 4
3679: PUSH
3680: LD_INT 33
3682: MOD
3683: PUSH
3684: LD_INT 0
3686: EQUAL
3687: IFFALSE 3756
// begin vc_chassis := ar_half_tracked ;
3689: LD_ADDR_OWVAR 37
3693: PUSH
3694: LD_INT 14
3696: ST_TO_ADDR
// vc_control := control_apeman ;
3697: LD_ADDR_OWVAR 38
3701: PUSH
3702: LD_INT 5
3704: ST_TO_ADDR
// vc_engine := engine_combustion ;
3705: LD_ADDR_OWVAR 39
3709: PUSH
3710: LD_INT 1
3712: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ rand ( 1 , 2 ) ] ;
3713: LD_ADDR_OWVAR 40
3717: PUSH
3718: LD_INT 28
3720: PUSH
3721: LD_INT 27
3723: PUSH
3724: LD_INT 29
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: PUSH
3732: LD_INT 1
3734: PPUSH
3735: LD_INT 2
3737: PPUSH
3738: CALL_OW 12
3742: ARRAY
3743: ST_TO_ADDR
// un := CreateVehicle ;
3744: LD_ADDR_VAR 0 5
3748: PUSH
3749: CALL_OW 45
3753: ST_TO_ADDR
// end else
3754: GO 3781
// begin PrepareHuman ( sex_male , class , 10 ) ;
3756: LD_INT 1
3758: PPUSH
3759: LD_VAR 0 6
3763: PPUSH
3764: LD_INT 10
3766: PPUSH
3767: CALL_OW 380
// un := CreateHuman ;
3771: LD_ADDR_VAR 0 5
3775: PUSH
3776: CALL_OW 44
3780: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3781: LD_VAR 0 5
3785: PPUSH
3786: LD_VAR 0 2
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3798: LD_VAR 0 5
3802: PPUSH
3803: CALL_OW 250
3807: PPUSH
3808: LD_VAR 0 5
3812: PPUSH
3813: CALL_OW 251
3817: PPUSH
3818: CALL_OW 494
// end ;
3822: GO 3616
3824: POP
3825: POP
// end ;
3826: LD_VAR 0 3
3830: RET
// every 0 0$0.3 trigger alert and not game_over do var i , list , enemy ;
3831: LD_EXP 6
3835: PUSH
3836: LD_EXP 7
3840: NOT
3841: AND
3842: IFFALSE 4128
3844: GO 3846
3846: DISABLE
3847: LD_INT 0
3849: PPUSH
3850: PPUSH
3851: PPUSH
// begin enable ;
3852: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 7
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// if not list then
3873: LD_VAR 0 2
3877: NOT
3878: IFFALSE 3882
// exit ;
3880: GO 4128
// for i in list do
3882: LD_ADDR_VAR 0 1
3886: PUSH
3887: LD_VAR 0 2
3891: PUSH
3892: FOR_IN
3893: IFFALSE 4126
// begin enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 15 ] ] ) ;
3895: LD_ADDR_VAR 0 3
3899: PUSH
3900: LD_INT 81
3902: PUSH
3903: LD_INT 7
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 92
3912: PUSH
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 250
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: CALL_OW 251
3932: PUSH
3933: LD_INT 15
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PPUSH
3946: CALL_OW 69
3950: ST_TO_ADDR
// if not enemy then
3951: LD_VAR 0 3
3955: NOT
3956: IFFALSE 4014
// enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 30 ] ] ) ;
3958: LD_ADDR_VAR 0 3
3962: PUSH
3963: LD_INT 81
3965: PUSH
3966: LD_INT 7
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: LD_INT 92
3975: PUSH
3976: LD_VAR 0 1
3980: PPUSH
3981: CALL_OW 250
3985: PUSH
3986: LD_VAR 0 1
3990: PPUSH
3991: CALL_OW 251
3995: PUSH
3996: LD_INT 30
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PPUSH
4009: CALL_OW 69
4013: ST_TO_ADDR
// if not enemy then
4014: LD_VAR 0 3
4018: NOT
4019: IFFALSE 4077
// enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 50 ] ] ) ;
4021: LD_ADDR_VAR 0 3
4025: PUSH
4026: LD_INT 81
4028: PUSH
4029: LD_INT 7
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 92
4038: PUSH
4039: LD_VAR 0 1
4043: PPUSH
4044: CALL_OW 250
4048: PUSH
4049: LD_VAR 0 1
4053: PPUSH
4054: CALL_OW 251
4058: PUSH
4059: LD_INT 50
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 69
4076: ST_TO_ADDR
// if not enemy then
4077: LD_VAR 0 3
4081: NOT
4082: IFFALSE 4104
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
4084: LD_ADDR_VAR 0 3
4088: PUSH
4089: LD_INT 81
4091: PUSH
4092: LD_INT 7
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PPUSH
4099: CALL_OW 69
4103: ST_TO_ADDR
// if enemy then
4104: LD_VAR 0 3
4108: IFFALSE 4124
// Attack ( i , enemy ) ;
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_VAR 0 3
4119: PPUSH
4120: CALL 4131 0 2
// end ;
4124: GO 3892
4126: POP
4127: POP
// end ;
4128: PPOPN 3
4130: END
// function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
4131: LD_INT 0
4133: PPUSH
4134: PPUSH
4135: PPUSH
// if not unit then
4136: LD_VAR 0 1
4140: NOT
4141: IFFALSE 4145
// exit ;
4143: GO 4309
// targets_list := [ ] ;
4145: LD_ADDR_VAR 0 5
4149: PUSH
4150: EMPTY
4151: ST_TO_ADDR
// targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
4152: LD_ADDR_VAR 0 5
4156: PUSH
4157: LD_VAR 0 2
4161: PPUSH
4162: LD_INT 21
4164: PUSH
4165: LD_INT 1
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 3
4174: PUSH
4175: LD_INT 54
4177: PUSH
4178: EMPTY
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PPUSH
4189: CALL_OW 72
4193: PUSH
4194: LD_VAR 0 2
4198: PPUSH
4199: LD_INT 21
4201: PUSH
4202: LD_INT 2
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PPUSH
4209: CALL_OW 72
4213: PUSH
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_INT 21
4221: PUSH
4222: LD_INT 3
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: LD_INT 3
4231: PUSH
4232: LD_INT 58
4234: PUSH
4235: EMPTY
4236: LIST
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PPUSH
4246: CALL_OW 72
4250: PUSH
4251: LD_VAR 0 2
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: ST_TO_ADDR
// for target in targets_list do
4262: LD_ADDR_VAR 0 4
4266: PUSH
4267: LD_VAR 0 5
4271: PUSH
4272: FOR_IN
4273: IFFALSE 4307
// begin if target then
4275: LD_VAR 0 4
4279: IFFALSE 4305
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
4281: LD_VAR 0 1
4285: PPUSH
4286: LD_VAR 0 4
4290: PPUSH
4291: LD_VAR 0 1
4295: PPUSH
4296: CALL_OW 74
4300: PPUSH
4301: CALL_OW 115
// end ;
4305: GO 4272
4307: POP
4308: POP
// end ; end_of_file
4309: LD_VAR 0 3
4313: RET
// export function Action ; begin
4314: LD_INT 0
4316: PPUSH
// InGameOn ;
4317: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4321: LD_INT 23
4323: PPUSH
4324: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4328: LD_EXP 1
4332: PPUSH
4333: LD_STRING DL-1
4335: PPUSH
4336: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4340: LD_EXP 2
4344: PPUSH
4345: LD_STRING DA-1
4347: PPUSH
4348: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4352: LD_EXP 3
4356: PPUSH
4357: LD_STRING DA-2
4359: PPUSH
4360: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4364: LD_EXP 1
4368: PPUSH
4369: LD_STRING DL-2
4371: PPUSH
4372: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4376: LD_EXP 3
4380: PPUSH
4381: LD_STRING DA-3
4383: PPUSH
4384: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4388: LD_EXP 1
4392: PPUSH
4393: LD_STRING DL-3
4395: PPUSH
4396: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4400: LD_EXP 2
4404: PPUSH
4405: LD_STRING DA-4
4407: PPUSH
4408: CALL_OW 88
// if not dialogue_skipped then
4412: LD_OWVAR 59
4416: NOT
4417: IFFALSE 4502
// begin Wait ( 0 0$01 ) ;
4419: LD_INT 35
4421: PPUSH
4422: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4426: LD_EXP 2
4430: PUSH
4431: LD_EXP 3
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4444: LD_EXP 2
4448: PPUSH
4449: LD_INT 107
4451: PPUSH
4452: LD_INT 53
4454: PPUSH
4455: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4459: LD_EXP 3
4463: PPUSH
4464: LD_INT 108
4466: PPUSH
4467: LD_INT 53
4469: PPUSH
4470: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4474: LD_EXP 2
4478: PPUSH
4479: LD_EXP 4
4483: PPUSH
4484: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4488: LD_EXP 3
4492: PPUSH
4493: LD_EXP 4
4497: PPUSH
4498: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4502: LD_INT 35
4504: PPUSH
4505: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4509: LD_EXP 2
4513: PPUSH
4514: LD_INT 107
4516: PPUSH
4517: LD_INT 53
4519: PPUSH
4520: CALL_OW 307
4524: PUSH
4525: LD_OWVAR 59
4529: OR
4530: IFFALSE 4502
// if not dialogue_skipped then
4532: LD_OWVAR 59
4536: NOT
4537: IFFALSE 4638
// begin ComTurnUnit ( potter , l1 ) ;
4539: LD_EXP 4
4543: PPUSH
4544: LD_EXP 2
4548: PPUSH
4549: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4553: LD_INT 10
4555: PPUSH
4556: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4560: LD_EXP 4
4564: PPUSH
4565: LD_INT 108
4567: PPUSH
4568: LD_INT 1
4570: PPUSH
4571: LD_INT 0
4573: PPUSH
4574: LD_INT 0
4576: PPUSH
4577: CALL_OW 483
// Wait ( 0 0$01 ) ;
4581: LD_INT 35
4583: PPUSH
4584: CALL_OW 67
// RemoveUnit ( potter ) ;
4588: LD_EXP 4
4592: PPUSH
4593: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4597: LD_EXP 2
4601: PPUSH
4602: LD_STRING DA-5
4604: PPUSH
4605: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4609: LD_EXP 3
4613: PPUSH
4614: LD_STRING DA-6
4616: PPUSH
4617: CALL_OW 88
// Wait ( 0 0$02 ) ;
4621: LD_INT 70
4623: PPUSH
4624: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4628: LD_INT 25
4630: PPUSH
4631: LD_INT 19
4633: PPUSH
4634: CALL_OW 84
// end ; SpawnPotter ( 30 , north_west_1 ) ;
4638: LD_INT 30
4640: PPUSH
4641: LD_INT 1
4643: PPUSH
4644: CALL 3516 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4648: LD_EXP 5
4652: PPUSH
4653: LD_STRING DLa-1
4655: PPUSH
4656: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4660: LD_EXP 1
4664: PPUSH
4665: LD_STRING DL-5
4667: PPUSH
4668: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4672: LD_INT 23
4674: PPUSH
4675: CALL_OW 87
// InGameOff ;
4679: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4683: LD_STRING C1
4685: PPUSH
4686: CALL_OW 337
// alert := true ;
4690: LD_ADDR_EXP 6
4694: PUSH
4695: LD_INT 1
4697: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4698: LD_EXP 5
4702: PPUSH
4703: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4707: LD_EXP 5
4711: PPUSH
4712: LD_INT 11
4714: PPUSH
4715: CALL_OW 173
// Wait ( 0 0$30 ) ;
4719: LD_INT 1050
4721: PPUSH
4722: CALL_OW 67
// SpawnPotter ( 20 , north_4 ) ;
4726: LD_INT 20
4728: PPUSH
4729: LD_INT 4
4731: PPUSH
4732: CALL 3516 0 2
// Wait ( 0 0$35 ) ;
4736: LD_INT 1225
4738: PPUSH
4739: CALL_OW 67
// SpawnPotter ( 20 , east_5 ) ;
4743: LD_INT 20
4745: PPUSH
4746: LD_INT 5
4748: PPUSH
4749: CALL 3516 0 2
// Wait ( 0 0$03 ) ;
4753: LD_INT 105
4755: PPUSH
4756: CALL_OW 67
// Game ;
4760: CALL 3268 0 0
// end ;
4764: LD_VAR 0 1
4768: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 500 do var tmp , i ;
4769: LD_INT 22
4771: PUSH
4772: LD_INT 7
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 69
4783: PUSH
4784: LD_INT 0
4786: EQUAL
4787: PUSH
4788: LD_EXP 8
4792: PUSH
4793: LD_INT 500
4795: GREATEREQUAL
4796: AND
4797: IFFALSE 5025
4799: GO 4801
4801: DISABLE
4802: LD_INT 0
4804: PPUSH
4805: PPUSH
// begin DialogueOn ;
4806: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4810: LD_EXP 10
4814: PPUSH
4815: LD_STRING DVr-1
4817: PPUSH
4818: CALL_OW 94
// DialogueOff ;
4822: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4826: LD_STRING QBonusInfo
4828: PPUSH
4829: CALL_OW 97
4833: PUSH
4834: LD_INT 1
4836: DOUBLE
4837: EQUAL
4838: IFTRUE 4842
4840: GO 4853
4842: POP
// bonus_active := true ; end ;
4843: LD_ADDR_EXP 11
4847: PUSH
4848: LD_INT 1
4850: ST_TO_ADDR
4851: GO 4854
4853: POP
// bonus_num := 4 ;
4854: LD_ADDR_EXP 12
4858: PUSH
4859: LD_INT 4
4861: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_mid , art_instant , main_base ) ;
4862: LD_OWVAR 2
4866: PPUSH
4867: LD_INT 2
4869: PPUSH
4870: LD_INT 2
4872: PPUSH
4873: LD_INT 23
4875: PPUSH
4876: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_INT 500
4887: PUSH
4888: LD_INT 3500
4890: PUSH
4891: LD_INT 5750
4893: PUSH
4894: LD_INT 10000
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4903: LD_INT 10500
4905: PUSH
4906: LD_INT 12600
4908: PUSH
4909: LD_INT 14700
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: PUSH
4917: LD_OWVAR 67
4921: ARRAY
4922: PPUSH
4923: CALL_OW 67
// for i = 1 to tmp do
4927: LD_ADDR_VAR 0 2
4931: PUSH
4932: DOUBLE
4933: LD_INT 1
4935: DEC
4936: ST_TO_ADDR
4937: LD_VAR 0 1
4941: PUSH
4942: FOR_TO
4943: IFFALSE 4975
// if points >= tmp [ i ] then
4945: LD_EXP 8
4949: PUSH
4950: LD_VAR 0 1
4954: PUSH
4955: LD_VAR 0 2
4959: ARRAY
4960: GREATEREQUAL
4961: IFFALSE 4973
// bonus_num := i ;
4963: LD_ADDR_EXP 12
4967: PUSH
4968: LD_VAR 0 2
4972: ST_TO_ADDR
4973: GO 4942
4975: POP
4976: POP
// case Query ( QBonusInfo ) of 1 :
4977: LD_STRING QBonusInfo
4979: PPUSH
4980: CALL_OW 97
4984: PUSH
4985: LD_INT 1
4987: DOUBLE
4988: EQUAL
4989: IFTRUE 4993
4991: GO 5014
4993: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4994: LD_OWVAR 2
4998: PPUSH
4999: LD_INT 12
5001: PPUSH
5002: LD_INT 2
5004: PPUSH
5005: LD_INT 23
5007: PPUSH
5008: CALL_OW 468
5012: GO 5015
5014: POP
// until points >= 15000 ;
5015: LD_EXP 8
5019: PUSH
5020: LD_INT 15000
5022: GREATEREQUAL
5023: IFFALSE 4903
// end ; end_of_file
5025: PPOPN 2
5027: END
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
5028: LD_INT 0
5030: PPUSH
5031: PPUSH
// dir := GetDir ( b ) ;
5032: LD_ADDR_VAR 0 4
5036: PUSH
5037: LD_VAR 0 2
5041: PPUSH
5042: CALL_OW 254
5046: ST_TO_ADDR
// if dir < 3 then
5047: LD_VAR 0 4
5051: PUSH
5052: LD_INT 3
5054: LESS
5055: IFFALSE 5073
// dir := dir + 3 else
5057: LD_ADDR_VAR 0 4
5061: PUSH
5062: LD_VAR 0 4
5066: PUSH
5067: LD_INT 3
5069: PLUS
5070: ST_TO_ADDR
5071: GO 5087
// dir := dir - 3 ;
5073: LD_ADDR_VAR 0 4
5077: PUSH
5078: LD_VAR 0 4
5082: PUSH
5083: LD_INT 3
5085: MINUS
5086: ST_TO_ADDR
// SetDir ( un , dir ) ;
5087: LD_VAR 0 1
5091: PPUSH
5092: LD_VAR 0 4
5096: PPUSH
5097: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5101: LD_VAR 0 1
5105: PPUSH
5106: LD_VAR 0 2
5110: PPUSH
5111: CALL_OW 52
// end ;
5115: LD_VAR 0 3
5119: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
5120: LD_INT 0
5122: PPUSH
5123: PPUSH
5124: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
5125: LD_ADDR_VAR 0 7
5129: PUSH
5130: LD_VAR 0 1
5134: PUSH
5135: LD_VAR 0 2
5139: ARRAY
5140: PPUSH
5141: LD_VAR 0 3
5145: PPUSH
5146: LD_VAR 0 4
5150: PPUSH
5151: CALL_OW 1
5155: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
5156: LD_ADDR_VAR 0 1
5160: PUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: LD_VAR 0 2
5170: PPUSH
5171: LD_VAR 0 7
5175: PPUSH
5176: CALL_OW 1
5180: ST_TO_ADDR
// result := tab ;
5181: LD_ADDR_VAR 0 5
5185: PUSH
5186: LD_VAR 0 1
5190: ST_TO_ADDR
// end ;
5191: LD_VAR 0 5
5195: RET
// export function IsDriver ( unit ) ; begin
5196: LD_INT 0
5198: PPUSH
// if unit in FilterAllUnits ( [ f_driving ] ) then
5199: LD_VAR 0 1
5203: PUSH
5204: LD_INT 55
5206: PUSH
5207: EMPTY
5208: LIST
5209: PPUSH
5210: CALL_OW 69
5214: IN
5215: IFFALSE 5234
// result := IsInUnit ( unit ) else
5217: LD_ADDR_VAR 0 2
5221: PUSH
5222: LD_VAR 0 1
5226: PPUSH
5227: CALL_OW 310
5231: ST_TO_ADDR
5232: GO 5242
// result := false ;
5234: LD_ADDR_VAR 0 2
5238: PUSH
5239: LD_INT 0
5241: ST_TO_ADDR
// end ;
5242: LD_VAR 0 2
5246: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5247: LD_INT 0
5249: PPUSH
5250: PPUSH
5251: PPUSH
// if not GetControl ( veh ) = control_manual then
5252: LD_VAR 0 1
5256: PPUSH
5257: CALL_OW 263
5261: PUSH
5262: LD_INT 1
5264: EQUAL
5265: NOT
5266: IFFALSE 5278
// result := false else
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_INT 0
5275: ST_TO_ADDR
5276: GO 5423
// if veh in FilterAllUnits ( [ f_empty ] ) then
5278: LD_VAR 0 1
5282: PUSH
5283: LD_INT 58
5285: PUSH
5286: EMPTY
5287: LIST
5288: PPUSH
5289: CALL_OW 69
5293: IN
5294: IFFALSE 5306
// result := false else
5296: LD_ADDR_VAR 0 2
5300: PUSH
5301: LD_INT 0
5303: ST_TO_ADDR
5304: GO 5423
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5306: LD_ADDR_VAR 0 4
5310: PUSH
5311: LD_INT 22
5313: PUSH
5314: LD_VAR 0 1
5318: PPUSH
5319: CALL_OW 255
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 55
5330: PUSH
5331: EMPTY
5332: LIST
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PPUSH
5338: CALL_OW 69
5342: ST_TO_ADDR
// if not filter then
5343: LD_VAR 0 4
5347: NOT
5348: IFFALSE 5360
// result := false else
5350: LD_ADDR_VAR 0 2
5354: PUSH
5355: LD_INT 0
5357: ST_TO_ADDR
5358: GO 5423
// for i = 1 to filter do
5360: LD_ADDR_VAR 0 3
5364: PUSH
5365: DOUBLE
5366: LD_INT 1
5368: DEC
5369: ST_TO_ADDR
5370: LD_VAR 0 4
5374: PUSH
5375: FOR_TO
5376: IFFALSE 5421
// if IsDriver ( filter [ i ] ) = veh then
5378: LD_VAR 0 4
5382: PUSH
5383: LD_VAR 0 3
5387: ARRAY
5388: PPUSH
5389: CALL 5196 0 1
5393: PUSH
5394: LD_VAR 0 1
5398: EQUAL
5399: IFFALSE 5419
// begin result := filter [ i ] ;
5401: LD_ADDR_VAR 0 2
5405: PUSH
5406: LD_VAR 0 4
5410: PUSH
5411: LD_VAR 0 3
5415: ARRAY
5416: ST_TO_ADDR
// break ;
5417: GO 5421
// end ;
5419: GO 5375
5421: POP
5422: POP
// end ; end ; end_of_file
5423: LD_VAR 0 2
5427: RET
// on UnitDestroyed ( un ) do begin if un in [ legion_commander , main_base ] then
5428: LD_VAR 0 1
5432: PUSH
5433: LD_EXP 1
5437: PUSH
5438: LD_INT 23
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: IN
5445: IFFALSE 5455
// game_over := true ;
5447: LD_ADDR_EXP 7
5451: PUSH
5452: LD_INT 1
5454: ST_TO_ADDR
// if un = al_commander then
5455: LD_VAR 0 1
5459: PUSH
5460: LD_EXP 5
5464: EQUAL
5465: IFFALSE 5471
// ChangeSide ( ) ;
5467: CALL 2689 0 0
// if GetSide ( un ) = 7 then
5471: LD_VAR 0 1
5475: PPUSH
5476: CALL_OW 255
5480: PUSH
5481: LD_INT 7
5483: EQUAL
5484: IFFALSE 5602
// begin if GetClass ( un ) = class_apeman then
5486: LD_VAR 0 1
5490: PPUSH
5491: CALL_OW 257
5495: PUSH
5496: LD_INT 12
5498: EQUAL
5499: IFFALSE 5515
// points := points + 6 ;
5501: LD_ADDR_EXP 8
5505: PUSH
5506: LD_EXP 8
5510: PUSH
5511: LD_INT 6
5513: PLUS
5514: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5515: LD_VAR 0 1
5519: PPUSH
5520: CALL_OW 257
5524: PUSH
5525: LD_INT 17
5527: EQUAL
5528: IFFALSE 5544
// points := points + 11 ;
5530: LD_ADDR_EXP 8
5534: PUSH
5535: LD_EXP 8
5539: PUSH
5540: LD_INT 11
5542: PLUS
5543: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 257
5553: PUSH
5554: LD_INT 15
5556: EQUAL
5557: IFFALSE 5573
// points := points + 14 ;
5559: LD_ADDR_EXP 8
5563: PUSH
5564: LD_EXP 8
5568: PUSH
5569: LD_INT 14
5571: PLUS
5572: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5573: LD_VAR 0 1
5577: PPUSH
5578: CALL_OW 247
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: IFFALSE 5602
// points := points + 50 ;
5588: LD_ADDR_EXP 8
5592: PUSH
5593: LD_EXP 8
5597: PUSH
5598: LD_INT 50
5600: PLUS
5601: ST_TO_ADDR
// end ; end ;
5602: PPOPN 1
5604: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5605: LD_EXP 5
5609: PPUSH
5610: CALL_OW 256
5614: PUSH
5615: LD_INT 1000
5617: LESS
5618: IFFALSE 5650
5620: GO 5622
5622: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5623: LD_EXP 5
5627: PPUSH
5628: CALL_OW 504
5632: PPUSH
5633: CALL_OW 255
5637: PUSH
5638: LD_INT 8
5640: EQUAL
5641: IFFALSE 5650
// YouLost (  ) ;
5643: LD_STRING 
5645: PPUSH
5646: CALL_OW 104
5650: END
// on EnterBuilding ( b , un ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] and GetClass ( un ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze ] then
5651: LD_VAR 0 1
5655: PPUSH
5656: CALL_OW 266
5660: PUSH
5661: LD_INT 0
5663: PUSH
5664: LD_INT 1
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: IN
5671: PUSH
5672: LD_VAR 0 2
5676: PPUSH
5677: CALL_OW 257
5681: PUSH
5682: LD_INT 12
5684: PUSH
5685: LD_INT 15
5687: PUSH
5688: LD_INT 17
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: LIST
5695: IN
5696: AND
5697: IFFALSE 5718
// begin wait ( 0 0$0.3 ) ;
5699: LD_INT 10
5701: PPUSH
5702: CALL_OW 67
// SetClass ( un , class_apeman_engineer ) ;
5706: LD_VAR 0 2
5710: PPUSH
5711: LD_INT 16
5713: PPUSH
5714: CALL_OW 336
// end ; end ;
5718: PPOPN 2
5720: END
// on DialogueSkipped ( value ) do var i ;
5721: LD_INT 0
5723: PPUSH
// begin RemoveUnit ( potter ) ;
5724: LD_EXP 4
5728: PPUSH
5729: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5733: LD_EXP 2
5737: PUSH
5738: LD_EXP 3
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 122
// Wait ( 1 ) ;
5751: LD_INT 1
5753: PPUSH
5754: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5758: LD_EXP 2
5762: PPUSH
5763: LD_INT 107
5765: PPUSH
5766: LD_INT 53
5768: PPUSH
5769: LD_INT 0
5771: PPUSH
5772: LD_INT 0
5774: PPUSH
5775: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5779: LD_EXP 3
5783: PPUSH
5784: LD_INT 108
5786: PPUSH
5787: LD_INT 53
5789: PPUSH
5790: LD_INT 0
5792: PPUSH
5793: LD_INT 0
5795: PPUSH
5796: CALL_OW 483
// Wait ( 1 ) ;
5800: LD_INT 1
5802: PPUSH
5803: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5807: LD_EXP 2
5811: PUSH
5812: LD_EXP 3
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PPUSH
5821: LD_INT 108
5823: PPUSH
5824: LD_INT 1
5826: PPUSH
5827: CALL_OW 118
// end ;
5831: PPOPN 2
5833: END
// on ArtifactUsed ( side , button , p3 , p4 ) do var bonus , off , units , crates , tmp , i ;
5834: LD_INT 0
5836: PPUSH
5837: PPUSH
5838: PPUSH
5839: PPUSH
5840: PPUSH
5841: PPUSH
// begin DialogueOn ;
5842: CALL_OW 6
// uc_side := 8 ;
5846: LD_ADDR_OWVAR 20
5850: PUSH
5851: LD_INT 8
5853: ST_TO_ADDR
// uc_nation := 2 ;
5854: LD_ADDR_OWVAR 21
5858: PUSH
5859: LD_INT 2
5861: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5862: LD_ADDR_VAR 0 5
5866: PUSH
5867: LD_STRING QBonus
5869: PUSH
5870: LD_EXP 12
5874: STR
5875: ST_TO_ADDR
// off := true ;
5876: LD_ADDR_VAR 0 6
5880: PUSH
5881: LD_INT 1
5883: ST_TO_ADDR
// units := [ ] ;
5884: LD_ADDR_VAR 0 7
5888: PUSH
5889: EMPTY
5890: ST_TO_ADDR
// crates := 0 ;
5891: LD_ADDR_VAR 0 8
5895: PUSH
5896: LD_INT 0
5898: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5899: LD_EXP 10
5903: PPUSH
5904: LD_STRING DVr-2
5906: PPUSH
5907: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
5911: LD_INT 10
5913: PPUSH
5914: CALL_OW 67
// case Query ( bonus ) of 1 :
5918: LD_VAR 0 5
5922: PPUSH
5923: CALL_OW 97
5927: PUSH
5928: LD_INT 1
5930: DOUBLE
5931: EQUAL
5932: IFTRUE 5936
5934: GO 6021
5936: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5937: LD_ADDR_VAR 0 9
5941: PUSH
5942: LD_INT 1
5944: PUSH
5945: LD_INT 2
5947: PUSH
5948: LD_INT 5
5950: PUSH
5951: LD_INT 8
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: PUSH
5960: LD_EXP 12
5964: ARRAY
5965: ST_TO_ADDR
// for i = 1 to tmp do
5966: LD_ADDR_VAR 0 10
5970: PUSH
5971: DOUBLE
5972: LD_INT 1
5974: DEC
5975: ST_TO_ADDR
5976: LD_VAR 0 9
5980: PUSH
5981: FOR_TO
5982: IFFALSE 6017
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5984: LD_INT 0
5986: PPUSH
5987: LD_INT 15
5989: PPUSH
5990: LD_VAR 0 9
5994: PPUSH
5995: CALL_OW 380
// units := units ^ CreateHuman ;
5999: LD_ADDR_VAR 0 7
6003: PUSH
6004: LD_VAR 0 7
6008: PUSH
6009: CALL_OW 44
6013: ADD
6014: ST_TO_ADDR
// end ;
6015: GO 5981
6017: POP
6018: POP
// end ; 2 :
6019: GO 6429
6021: LD_INT 2
6023: DOUBLE
6024: EQUAL
6025: IFTRUE 6029
6027: GO 6061
6029: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
6030: LD_ADDR_VAR 0 8
6034: PUSH
6035: LD_INT 100
6037: PUSH
6038: LD_INT 150
6040: PUSH
6041: LD_INT 350
6043: PUSH
6044: LD_INT 500
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_EXP 12
6057: ARRAY
6058: ST_TO_ADDR
// end ; 3 :
6059: GO 6429
6061: LD_INT 3
6063: DOUBLE
6064: EQUAL
6065: IFTRUE 6069
6067: GO 6409
6069: POP
// begin if bonus_num = 1 then
6070: LD_EXP 12
6074: PUSH
6075: LD_INT 1
6077: EQUAL
6078: IFFALSE 6088
// ignore_wave := true ;
6080: LD_ADDR_EXP 13
6084: PUSH
6085: LD_INT 1
6087: ST_TO_ADDR
// if bonus_num = 2 then
6088: LD_EXP 12
6092: PUSH
6093: LD_INT 2
6095: EQUAL
6096: IFFALSE 6216
// begin for i = 1 to 2 do
6098: LD_ADDR_VAR 0 10
6102: PUSH
6103: DOUBLE
6104: LD_INT 1
6106: DEC
6107: ST_TO_ADDR
6108: LD_INT 2
6110: PUSH
6111: FOR_TO
6112: IFFALSE 6214
// begin uc_nation := nation_arabian ;
6114: LD_ADDR_OWVAR 21
6118: PUSH
6119: LD_INT 2
6121: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6122: LD_ADDR_OWVAR 37
6126: PUSH
6127: LD_INT 14
6129: ST_TO_ADDR
// vc_engine := engine_siberite ;
6130: LD_ADDR_OWVAR 39
6134: PUSH
6135: LD_INT 3
6137: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6138: LD_ADDR_OWVAR 38
6142: PUSH
6143: LD_INT 2
6145: PUSH
6146: LD_INT 5
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 1
6155: PPUSH
6156: LD_INT 2
6158: PPUSH
6159: CALL_OW 12
6163: ARRAY
6164: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6165: LD_ADDR_OWVAR 40
6169: PUSH
6170: LD_INT 28
6172: PUSH
6173: LD_INT 27
6175: PUSH
6176: LD_INT 25
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 1
6186: PPUSH
6187: LD_INT 3
6189: PPUSH
6190: CALL_OW 12
6194: ARRAY
6195: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6196: LD_ADDR_VAR 0 7
6200: PUSH
6201: LD_VAR 0 7
6205: PUSH
6206: CALL_OW 45
6210: ADD
6211: ST_TO_ADDR
// end ;
6212: GO 6111
6214: POP
6215: POP
// end ; if bonus_num = 3 then
6216: LD_EXP 12
6220: PUSH
6221: LD_INT 3
6223: EQUAL
6224: IFFALSE 6348
// begin for i = 1 to 4 do
6226: LD_ADDR_VAR 0 10
6230: PUSH
6231: DOUBLE
6232: LD_INT 1
6234: DEC
6235: ST_TO_ADDR
6236: LD_INT 4
6238: PUSH
6239: FOR_TO
6240: IFFALSE 6346
// begin uc_nation := nation_arabian ;
6242: LD_ADDR_OWVAR 21
6246: PUSH
6247: LD_INT 2
6249: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6250: LD_ADDR_OWVAR 37
6254: PUSH
6255: LD_INT 14
6257: ST_TO_ADDR
// vc_engine := engine_siberite ;
6258: LD_ADDR_OWVAR 39
6262: PUSH
6263: LD_INT 3
6265: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6266: LD_ADDR_OWVAR 38
6270: PUSH
6271: LD_INT 2
6273: PUSH
6274: LD_INT 5
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 1
6283: PPUSH
6284: LD_INT 2
6286: PPUSH
6287: CALL_OW 12
6291: ARRAY
6292: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6293: LD_ADDR_OWVAR 40
6297: PUSH
6298: LD_INT 28
6300: PUSH
6301: LD_INT 27
6303: PUSH
6304: LD_INT 28
6306: PUSH
6307: LD_INT 25
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 1
6318: PPUSH
6319: LD_INT 4
6321: PPUSH
6322: CALL_OW 12
6326: ARRAY
6327: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6328: LD_ADDR_VAR 0 7
6332: PUSH
6333: LD_VAR 0 7
6337: PUSH
6338: CALL_OW 45
6342: ADD
6343: ST_TO_ADDR
// end ;
6344: GO 6239
6346: POP
6347: POP
// end ; if bonus_num = 4 then
6348: LD_EXP 12
6352: PUSH
6353: LD_INT 4
6355: EQUAL
6356: IFFALSE 6407
// for i = 1 to 3 do
6358: LD_ADDR_VAR 0 10
6362: PUSH
6363: DOUBLE
6364: LD_INT 1
6366: DEC
6367: ST_TO_ADDR
6368: LD_INT 3
6370: PUSH
6371: FOR_TO
6372: IFFALSE 6405
// begin PrepareHuman ( false , 3 , 8 ) ;
6374: LD_INT 0
6376: PPUSH
6377: LD_INT 3
6379: PPUSH
6380: LD_INT 8
6382: PPUSH
6383: CALL_OW 380
// units := units ^ CreateHuman ;
6387: LD_ADDR_VAR 0 7
6391: PUSH
6392: LD_VAR 0 7
6396: PUSH
6397: CALL_OW 44
6401: ADD
6402: ST_TO_ADDR
// end ;
6403: GO 6371
6405: POP
6406: POP
// end ; 4 :
6407: GO 6429
6409: LD_INT 4
6411: DOUBLE
6412: EQUAL
6413: IFTRUE 6417
6415: GO 6428
6417: POP
// off := false ; end ;
6418: LD_ADDR_VAR 0 6
6422: PUSH
6423: LD_INT 0
6425: ST_TO_ADDR
6426: GO 6429
6428: POP
// DialogueOff ;
6429: CALL_OW 7
// if not off then
6433: LD_VAR 0 6
6437: NOT
6438: IFFALSE 6444
// exit else
6440: GO 6623
6442: GO 6497
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6444: LD_OWVAR 2
6448: PPUSH
6449: LD_INT 12
6451: PPUSH
6452: LD_INT 0
6454: PPUSH
6455: LD_INT 23
6457: PPUSH
6458: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6462: LD_EXP 10
6466: PPUSH
6467: LD_STRING DVr-3
6469: PUSH
6470: LD_STRING DVr-3a
6472: PUSH
6473: LD_STRING DVr-3b
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 1
6483: PPUSH
6484: LD_INT 3
6486: PPUSH
6487: CALL_OW 12
6491: ARRAY
6492: PPUSH
6493: CALL_OW 94
// end ; if units then
6497: LD_VAR 0 7
6501: IFFALSE 6565
// for i in units do
6503: LD_ADDR_VAR 0 10
6507: PUSH
6508: LD_VAR 0 7
6512: PUSH
6513: FOR_IN
6514: IFFALSE 6563
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6516: LD_VAR 0 10
6520: PPUSH
6521: LD_INT 92
6523: PPUSH
6524: LD_INT 49
6526: PPUSH
6527: LD_INT 20
6529: PPUSH
6530: LD_INT 0
6532: PPUSH
6533: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6537: LD_VAR 0 10
6541: PPUSH
6542: CALL_OW 250
6546: PPUSH
6547: LD_VAR 0 10
6551: PPUSH
6552: CALL_OW 251
6556: PPUSH
6557: CALL_OW 494
// end ;
6561: GO 6513
6563: POP
6564: POP
// if crates then
6565: LD_VAR 0 8
6569: IFFALSE 6623
// for i = 1 to ( crates div 50 ) do
6571: LD_ADDR_VAR 0 10
6575: PUSH
6576: DOUBLE
6577: LD_INT 1
6579: DEC
6580: ST_TO_ADDR
6581: LD_VAR 0 8
6585: PUSH
6586: LD_INT 50
6588: DIV
6589: PUSH
6590: FOR_TO
6591: IFFALSE 6621
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6593: LD_INT 5
6595: PPUSH
6596: LD_INT 92
6598: PPUSH
6599: LD_INT 49
6601: PPUSH
6602: LD_INT 30
6604: PPUSH
6605: LD_INT 1
6607: PPUSH
6608: CALL_OW 56
// wait ( 0 0$02 ) ;
6612: LD_INT 70
6614: PPUSH
6615: CALL_OW 67
// end ;
6619: GO 6590
6621: POP
6622: POP
// end ;
6623: PPOPN 10
6625: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6626: LD_VAR 0 1
6630: PPUSH
6631: LD_VAR 0 2
6635: PPUSH
6636: LD_VAR 0 3
6640: PPUSH
6641: CALL 17564 0 3
// end ;
6645: PPOPN 3
6647: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6648: LD_VAR 0 1
6652: PPUSH
6653: CALL 17662 0 1
// end ; end_of_file
6657: PPOPN 1
6659: END
// every 0 0$01 trigger not game_over do
6660: LD_EXP 7
6664: NOT
6665: IFFALSE 6698
6667: GO 6669
6669: DISABLE
// begin enable ;
6670: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6671: LD_ADDR_OWVAR 47
6675: PUSH
6676: LD_STRING #tick
6678: PUSH
6679: LD_OWVAR 1
6683: PUSH
6684: LD_STRING #points
6686: PUSH
6687: LD_EXP 8
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: ST_TO_ADDR
// end ;
6698: END
// every 0 0$01 trigger game_over do
6699: LD_EXP 7
6703: IFFALSE 6762
6705: GO 6707
6707: DISABLE
// begin Wait ( 0 0$02 ) ;
6708: LD_INT 70
6710: PPUSH
6711: CALL_OW 67
// DialogueOn ;
6715: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6719: LD_ADDR_OWVAR 47
6723: PUSH
6724: LD_STRING #game-points
6726: PUSH
6727: LD_OWVAR 78
6731: PUSH
6732: LD_EXP 8
6736: PUSH
6737: LD_STRING #game-time
6739: PUSH
6740: LD_OWVAR 1
6744: PUSH
6745: LD_STRING #game-difficulty
6747: PUSH
6748: LD_OWVAR 67
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: ST_TO_ADDR
// end ; end_of_file
6762: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
6763: LD_OWVAR 1
6767: PUSH
6768: LD_INT 52500
6770: LESS
6771: IFFALSE 6795
6773: GO 6775
6775: DISABLE
// begin enable ;
6776: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
6777: LD_INT 1
6779: PPUSH
6780: LD_INT 5
6782: PPUSH
6783: CALL_OW 12
6787: PPUSH
6788: LD_INT 1
6790: PPUSH
6791: CALL_OW 57
// end ; end_of_file
6795: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
6796: GO 6798
6798: DISABLE
// begin ru_radar := 98 ;
6799: LD_ADDR_EXP 14
6803: PUSH
6804: LD_INT 98
6806: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
6807: LD_ADDR_EXP 15
6811: PUSH
6812: LD_INT 89
6814: ST_TO_ADDR
// us_hack := 99 ;
6815: LD_ADDR_EXP 16
6819: PUSH
6820: LD_INT 99
6822: ST_TO_ADDR
// us_artillery := 97 ;
6823: LD_ADDR_EXP 17
6827: PUSH
6828: LD_INT 97
6830: ST_TO_ADDR
// ar_bio_bomb := 91 ;
6831: LD_ADDR_EXP 18
6835: PUSH
6836: LD_INT 91
6838: ST_TO_ADDR
// end ; end_of_file end_of_file
6839: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
6840: GO 6842
6842: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
6843: LD_STRING initStreamRollete();
6845: PPUSH
6846: CALL_OW 559
// InitStreamMode ;
6850: CALL 6859 0 0
// DefineStreamItems ( ) ;
6854: CALL 7299 0 0
// end ;
6858: END
// function InitStreamMode ; begin
6859: LD_INT 0
6861: PPUSH
// streamModeActive := false ;
6862: LD_ADDR_EXP 19
6866: PUSH
6867: LD_INT 0
6869: ST_TO_ADDR
// normalCounter := 26 ;
6870: LD_ADDR_EXP 20
6874: PUSH
6875: LD_INT 26
6877: ST_TO_ADDR
// hardcoreCounter := 12 ;
6878: LD_ADDR_EXP 21
6882: PUSH
6883: LD_INT 12
6885: ST_TO_ADDR
// sRocket := false ;
6886: LD_ADDR_EXP 24
6890: PUSH
6891: LD_INT 0
6893: ST_TO_ADDR
// sSpeed := false ;
6894: LD_ADDR_EXP 23
6898: PUSH
6899: LD_INT 0
6901: ST_TO_ADDR
// sEngine := false ;
6902: LD_ADDR_EXP 25
6906: PUSH
6907: LD_INT 0
6909: ST_TO_ADDR
// sSpec := false ;
6910: LD_ADDR_EXP 22
6914: PUSH
6915: LD_INT 0
6917: ST_TO_ADDR
// sLevel := false ;
6918: LD_ADDR_EXP 26
6922: PUSH
6923: LD_INT 0
6925: ST_TO_ADDR
// sArmoury := false ;
6926: LD_ADDR_EXP 27
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// sRadar := false ;
6934: LD_ADDR_EXP 28
6938: PUSH
6939: LD_INT 0
6941: ST_TO_ADDR
// sBunker := false ;
6942: LD_ADDR_EXP 29
6946: PUSH
6947: LD_INT 0
6949: ST_TO_ADDR
// sHack := false ;
6950: LD_ADDR_EXP 30
6954: PUSH
6955: LD_INT 0
6957: ST_TO_ADDR
// sFire := false ;
6958: LD_ADDR_EXP 31
6962: PUSH
6963: LD_INT 0
6965: ST_TO_ADDR
// sRefresh := false ;
6966: LD_ADDR_EXP 32
6970: PUSH
6971: LD_INT 0
6973: ST_TO_ADDR
// sExp := false ;
6974: LD_ADDR_EXP 33
6978: PUSH
6979: LD_INT 0
6981: ST_TO_ADDR
// sDepot := false ;
6982: LD_ADDR_EXP 34
6986: PUSH
6987: LD_INT 0
6989: ST_TO_ADDR
// sFlag := false ;
6990: LD_ADDR_EXP 35
6994: PUSH
6995: LD_INT 0
6997: ST_TO_ADDR
// sKamikadze := false ;
6998: LD_ADDR_EXP 43
7002: PUSH
7003: LD_INT 0
7005: ST_TO_ADDR
// sTroll := false ;
7006: LD_ADDR_EXP 44
7010: PUSH
7011: LD_INT 0
7013: ST_TO_ADDR
// sSlow := false ;
7014: LD_ADDR_EXP 45
7018: PUSH
7019: LD_INT 0
7021: ST_TO_ADDR
// sLack := false ;
7022: LD_ADDR_EXP 46
7026: PUSH
7027: LD_INT 0
7029: ST_TO_ADDR
// sTank := false ;
7030: LD_ADDR_EXP 48
7034: PUSH
7035: LD_INT 0
7037: ST_TO_ADDR
// sRemote := false ;
7038: LD_ADDR_EXP 49
7042: PUSH
7043: LD_INT 0
7045: ST_TO_ADDR
// sPowell := false ;
7046: LD_ADDR_EXP 50
7050: PUSH
7051: LD_INT 0
7053: ST_TO_ADDR
// sTeleport := false ;
7054: LD_ADDR_EXP 53
7058: PUSH
7059: LD_INT 0
7061: ST_TO_ADDR
// sOilTower := false ;
7062: LD_ADDR_EXP 55
7066: PUSH
7067: LD_INT 0
7069: ST_TO_ADDR
// sShovel := false ;
7070: LD_ADDR_EXP 56
7074: PUSH
7075: LD_INT 0
7077: ST_TO_ADDR
// sSheik := false ;
7078: LD_ADDR_EXP 57
7082: PUSH
7083: LD_INT 0
7085: ST_TO_ADDR
// sEarthquake := false ;
7086: LD_ADDR_EXP 59
7090: PUSH
7091: LD_INT 0
7093: ST_TO_ADDR
// sAI := false ;
7094: LD_ADDR_EXP 60
7098: PUSH
7099: LD_INT 0
7101: ST_TO_ADDR
// sCargo := false ;
7102: LD_ADDR_EXP 63
7106: PUSH
7107: LD_INT 0
7109: ST_TO_ADDR
// sDLaser := false ;
7110: LD_ADDR_EXP 64
7114: PUSH
7115: LD_INT 0
7117: ST_TO_ADDR
// sExchange := false ;
7118: LD_ADDR_EXP 65
7122: PUSH
7123: LD_INT 0
7125: ST_TO_ADDR
// sFac := false ;
7126: LD_ADDR_EXP 66
7130: PUSH
7131: LD_INT 0
7133: ST_TO_ADDR
// sPower := false ;
7134: LD_ADDR_EXP 67
7138: PUSH
7139: LD_INT 0
7141: ST_TO_ADDR
// sRandom := false ;
7142: LD_ADDR_EXP 68
7146: PUSH
7147: LD_INT 0
7149: ST_TO_ADDR
// sShield := false ;
7150: LD_ADDR_EXP 69
7154: PUSH
7155: LD_INT 0
7157: ST_TO_ADDR
// sTime := false ;
7158: LD_ADDR_EXP 70
7162: PUSH
7163: LD_INT 0
7165: ST_TO_ADDR
// sTools := false ;
7166: LD_ADDR_EXP 71
7170: PUSH
7171: LD_INT 0
7173: ST_TO_ADDR
// sSold := false ;
7174: LD_ADDR_EXP 36
7178: PUSH
7179: LD_INT 0
7181: ST_TO_ADDR
// sDiff := false ;
7182: LD_ADDR_EXP 37
7186: PUSH
7187: LD_INT 0
7189: ST_TO_ADDR
// sFog := false ;
7190: LD_ADDR_EXP 40
7194: PUSH
7195: LD_INT 0
7197: ST_TO_ADDR
// sReset := false ;
7198: LD_ADDR_EXP 41
7202: PUSH
7203: LD_INT 0
7205: ST_TO_ADDR
// sSun := false ;
7206: LD_ADDR_EXP 42
7210: PUSH
7211: LD_INT 0
7213: ST_TO_ADDR
// sTiger := false ;
7214: LD_ADDR_EXP 38
7218: PUSH
7219: LD_INT 0
7221: ST_TO_ADDR
// sBomb := false ;
7222: LD_ADDR_EXP 39
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// sWound := false ;
7230: LD_ADDR_EXP 47
7234: PUSH
7235: LD_INT 0
7237: ST_TO_ADDR
// sBetray := false ;
7238: LD_ADDR_EXP 51
7242: PUSH
7243: LD_INT 0
7245: ST_TO_ADDR
// sContamin := false ;
7246: LD_ADDR_EXP 52
7250: PUSH
7251: LD_INT 0
7253: ST_TO_ADDR
// sOil := false ;
7254: LD_ADDR_EXP 54
7258: PUSH
7259: LD_INT 0
7261: ST_TO_ADDR
// sStu := false ;
7262: LD_ADDR_EXP 58
7266: PUSH
7267: LD_INT 0
7269: ST_TO_ADDR
// sBazooka := false ;
7270: LD_ADDR_EXP 61
7274: PUSH
7275: LD_INT 0
7277: ST_TO_ADDR
// sMortar := false ;
7278: LD_ADDR_EXP 62
7282: PUSH
7283: LD_INT 0
7285: ST_TO_ADDR
// sRanger := false ;
7286: LD_ADDR_EXP 72
7290: PUSH
7291: LD_INT 0
7293: ST_TO_ADDR
// end ;
7294: LD_VAR 0 1
7298: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
7299: LD_INT 0
7301: PPUSH
7302: PPUSH
7303: PPUSH
7304: PPUSH
7305: PPUSH
// result := [ ] ;
7306: LD_ADDR_VAR 0 1
7310: PUSH
7311: EMPTY
7312: ST_TO_ADDR
// if campaign_id = 1 then
7313: LD_OWVAR 69
7317: PUSH
7318: LD_INT 1
7320: EQUAL
7321: IFFALSE 10269
// begin case mission_number of 1 :
7323: LD_OWVAR 70
7327: PUSH
7328: LD_INT 1
7330: DOUBLE
7331: EQUAL
7332: IFTRUE 7336
7334: GO 7400
7336: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
7337: LD_ADDR_VAR 0 1
7341: PUSH
7342: LD_INT 2
7344: PUSH
7345: LD_INT 4
7347: PUSH
7348: LD_INT 11
7350: PUSH
7351: LD_INT 12
7353: PUSH
7354: LD_INT 15
7356: PUSH
7357: LD_INT 16
7359: PUSH
7360: LD_INT 22
7362: PUSH
7363: LD_INT 23
7365: PUSH
7366: LD_INT 26
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: PUSH
7380: LD_INT 101
7382: PUSH
7383: LD_INT 102
7385: PUSH
7386: LD_INT 106
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: LIST
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: ST_TO_ADDR
7398: GO 10269
7400: LD_INT 2
7402: DOUBLE
7403: EQUAL
7404: IFTRUE 7408
7406: GO 7480
7408: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
7409: LD_ADDR_VAR 0 1
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 4
7419: PUSH
7420: LD_INT 11
7422: PUSH
7423: LD_INT 12
7425: PUSH
7426: LD_INT 15
7428: PUSH
7429: LD_INT 16
7431: PUSH
7432: LD_INT 22
7434: PUSH
7435: LD_INT 23
7437: PUSH
7438: LD_INT 26
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 101
7454: PUSH
7455: LD_INT 102
7457: PUSH
7458: LD_INT 105
7460: PUSH
7461: LD_INT 106
7463: PUSH
7464: LD_INT 108
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: ST_TO_ADDR
7478: GO 10269
7480: LD_INT 3
7482: DOUBLE
7483: EQUAL
7484: IFTRUE 7488
7486: GO 7564
7488: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
7489: LD_ADDR_VAR 0 1
7493: PUSH
7494: LD_INT 2
7496: PUSH
7497: LD_INT 4
7499: PUSH
7500: LD_INT 5
7502: PUSH
7503: LD_INT 11
7505: PUSH
7506: LD_INT 12
7508: PUSH
7509: LD_INT 15
7511: PUSH
7512: LD_INT 16
7514: PUSH
7515: LD_INT 22
7517: PUSH
7518: LD_INT 26
7520: PUSH
7521: LD_INT 36
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: PUSH
7536: LD_INT 101
7538: PUSH
7539: LD_INT 102
7541: PUSH
7542: LD_INT 105
7544: PUSH
7545: LD_INT 106
7547: PUSH
7548: LD_INT 108
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: ST_TO_ADDR
7562: GO 10269
7564: LD_INT 4
7566: DOUBLE
7567: EQUAL
7568: IFTRUE 7572
7570: GO 7656
7572: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
7573: LD_ADDR_VAR 0 1
7577: PUSH
7578: LD_INT 2
7580: PUSH
7581: LD_INT 4
7583: PUSH
7584: LD_INT 5
7586: PUSH
7587: LD_INT 8
7589: PUSH
7590: LD_INT 11
7592: PUSH
7593: LD_INT 12
7595: PUSH
7596: LD_INT 15
7598: PUSH
7599: LD_INT 16
7601: PUSH
7602: LD_INT 22
7604: PUSH
7605: LD_INT 23
7607: PUSH
7608: LD_INT 26
7610: PUSH
7611: LD_INT 36
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 101
7630: PUSH
7631: LD_INT 102
7633: PUSH
7634: LD_INT 105
7636: PUSH
7637: LD_INT 106
7639: PUSH
7640: LD_INT 108
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: ST_TO_ADDR
7654: GO 10269
7656: LD_INT 5
7658: DOUBLE
7659: EQUAL
7660: IFTRUE 7664
7662: GO 7764
7664: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
7665: LD_ADDR_VAR 0 1
7669: PUSH
7670: LD_INT 2
7672: PUSH
7673: LD_INT 4
7675: PUSH
7676: LD_INT 5
7678: PUSH
7679: LD_INT 6
7681: PUSH
7682: LD_INT 8
7684: PUSH
7685: LD_INT 11
7687: PUSH
7688: LD_INT 12
7690: PUSH
7691: LD_INT 15
7693: PUSH
7694: LD_INT 16
7696: PUSH
7697: LD_INT 22
7699: PUSH
7700: LD_INT 23
7702: PUSH
7703: LD_INT 25
7705: PUSH
7706: LD_INT 26
7708: PUSH
7709: LD_INT 36
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 101
7730: PUSH
7731: LD_INT 102
7733: PUSH
7734: LD_INT 105
7736: PUSH
7737: LD_INT 106
7739: PUSH
7740: LD_INT 108
7742: PUSH
7743: LD_INT 109
7745: PUSH
7746: LD_INT 112
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: ST_TO_ADDR
7762: GO 10269
7764: LD_INT 6
7766: DOUBLE
7767: EQUAL
7768: IFTRUE 7772
7770: GO 7892
7772: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
7773: LD_ADDR_VAR 0 1
7777: PUSH
7778: LD_INT 2
7780: PUSH
7781: LD_INT 4
7783: PUSH
7784: LD_INT 5
7786: PUSH
7787: LD_INT 6
7789: PUSH
7790: LD_INT 8
7792: PUSH
7793: LD_INT 11
7795: PUSH
7796: LD_INT 12
7798: PUSH
7799: LD_INT 15
7801: PUSH
7802: LD_INT 16
7804: PUSH
7805: LD_INT 20
7807: PUSH
7808: LD_INT 21
7810: PUSH
7811: LD_INT 22
7813: PUSH
7814: LD_INT 23
7816: PUSH
7817: LD_INT 25
7819: PUSH
7820: LD_INT 26
7822: PUSH
7823: LD_INT 30
7825: PUSH
7826: LD_INT 31
7828: PUSH
7829: LD_INT 32
7831: PUSH
7832: LD_INT 36
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 101
7858: PUSH
7859: LD_INT 102
7861: PUSH
7862: LD_INT 105
7864: PUSH
7865: LD_INT 106
7867: PUSH
7868: LD_INT 108
7870: PUSH
7871: LD_INT 109
7873: PUSH
7874: LD_INT 112
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: ST_TO_ADDR
7890: GO 10269
7892: LD_INT 7
7894: DOUBLE
7895: EQUAL
7896: IFTRUE 7900
7898: GO 8000
7900: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
7901: LD_ADDR_VAR 0 1
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 4
7911: PUSH
7912: LD_INT 5
7914: PUSH
7915: LD_INT 7
7917: PUSH
7918: LD_INT 11
7920: PUSH
7921: LD_INT 12
7923: PUSH
7924: LD_INT 15
7926: PUSH
7927: LD_INT 16
7929: PUSH
7930: LD_INT 20
7932: PUSH
7933: LD_INT 21
7935: PUSH
7936: LD_INT 22
7938: PUSH
7939: LD_INT 23
7941: PUSH
7942: LD_INT 25
7944: PUSH
7945: LD_INT 26
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 101
7966: PUSH
7967: LD_INT 102
7969: PUSH
7970: LD_INT 103
7972: PUSH
7973: LD_INT 105
7975: PUSH
7976: LD_INT 106
7978: PUSH
7979: LD_INT 108
7981: PUSH
7982: LD_INT 112
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: ST_TO_ADDR
7998: GO 10269
8000: LD_INT 8
8002: DOUBLE
8003: EQUAL
8004: IFTRUE 8008
8006: GO 8136
8008: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
8009: LD_ADDR_VAR 0 1
8013: PUSH
8014: LD_INT 2
8016: PUSH
8017: LD_INT 4
8019: PUSH
8020: LD_INT 5
8022: PUSH
8023: LD_INT 6
8025: PUSH
8026: LD_INT 7
8028: PUSH
8029: LD_INT 8
8031: PUSH
8032: LD_INT 11
8034: PUSH
8035: LD_INT 12
8037: PUSH
8038: LD_INT 15
8040: PUSH
8041: LD_INT 16
8043: PUSH
8044: LD_INT 20
8046: PUSH
8047: LD_INT 21
8049: PUSH
8050: LD_INT 22
8052: PUSH
8053: LD_INT 23
8055: PUSH
8056: LD_INT 25
8058: PUSH
8059: LD_INT 26
8061: PUSH
8062: LD_INT 30
8064: PUSH
8065: LD_INT 31
8067: PUSH
8068: LD_INT 32
8070: PUSH
8071: LD_INT 36
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 101
8098: PUSH
8099: LD_INT 102
8101: PUSH
8102: LD_INT 103
8104: PUSH
8105: LD_INT 105
8107: PUSH
8108: LD_INT 106
8110: PUSH
8111: LD_INT 108
8113: PUSH
8114: LD_INT 109
8116: PUSH
8117: LD_INT 112
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: ST_TO_ADDR
8134: GO 10269
8136: LD_INT 9
8138: DOUBLE
8139: EQUAL
8140: IFTRUE 8144
8142: GO 8280
8144: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
8145: LD_ADDR_VAR 0 1
8149: PUSH
8150: LD_INT 2
8152: PUSH
8153: LD_INT 4
8155: PUSH
8156: LD_INT 5
8158: PUSH
8159: LD_INT 6
8161: PUSH
8162: LD_INT 7
8164: PUSH
8165: LD_INT 8
8167: PUSH
8168: LD_INT 11
8170: PUSH
8171: LD_INT 12
8173: PUSH
8174: LD_INT 15
8176: PUSH
8177: LD_INT 16
8179: PUSH
8180: LD_INT 20
8182: PUSH
8183: LD_INT 21
8185: PUSH
8186: LD_INT 22
8188: PUSH
8189: LD_INT 23
8191: PUSH
8192: LD_INT 25
8194: PUSH
8195: LD_INT 26
8197: PUSH
8198: LD_INT 28
8200: PUSH
8201: LD_INT 30
8203: PUSH
8204: LD_INT 31
8206: PUSH
8207: LD_INT 32
8209: PUSH
8210: LD_INT 36
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: LIST
8235: PUSH
8236: LD_INT 101
8238: PUSH
8239: LD_INT 102
8241: PUSH
8242: LD_INT 103
8244: PUSH
8245: LD_INT 105
8247: PUSH
8248: LD_INT 106
8250: PUSH
8251: LD_INT 108
8253: PUSH
8254: LD_INT 109
8256: PUSH
8257: LD_INT 112
8259: PUSH
8260: LD_INT 114
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: PUSH
8274: EMPTY
8275: LIST
8276: LIST
8277: ST_TO_ADDR
8278: GO 10269
8280: LD_INT 10
8282: DOUBLE
8283: EQUAL
8284: IFTRUE 8288
8286: GO 8472
8288: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
8289: LD_ADDR_VAR 0 1
8293: PUSH
8294: LD_INT 2
8296: PUSH
8297: LD_INT 4
8299: PUSH
8300: LD_INT 5
8302: PUSH
8303: LD_INT 6
8305: PUSH
8306: LD_INT 7
8308: PUSH
8309: LD_INT 8
8311: PUSH
8312: LD_INT 9
8314: PUSH
8315: LD_INT 10
8317: PUSH
8318: LD_INT 11
8320: PUSH
8321: LD_INT 12
8323: PUSH
8324: LD_INT 13
8326: PUSH
8327: LD_INT 14
8329: PUSH
8330: LD_INT 15
8332: PUSH
8333: LD_INT 16
8335: PUSH
8336: LD_INT 17
8338: PUSH
8339: LD_INT 18
8341: PUSH
8342: LD_INT 19
8344: PUSH
8345: LD_INT 20
8347: PUSH
8348: LD_INT 21
8350: PUSH
8351: LD_INT 22
8353: PUSH
8354: LD_INT 23
8356: PUSH
8357: LD_INT 24
8359: PUSH
8360: LD_INT 25
8362: PUSH
8363: LD_INT 26
8365: PUSH
8366: LD_INT 28
8368: PUSH
8369: LD_INT 30
8371: PUSH
8372: LD_INT 31
8374: PUSH
8375: LD_INT 32
8377: PUSH
8378: LD_INT 36
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: PUSH
8412: LD_INT 101
8414: PUSH
8415: LD_INT 102
8417: PUSH
8418: LD_INT 103
8420: PUSH
8421: LD_INT 104
8423: PUSH
8424: LD_INT 105
8426: PUSH
8427: LD_INT 106
8429: PUSH
8430: LD_INT 107
8432: PUSH
8433: LD_INT 108
8435: PUSH
8436: LD_INT 109
8438: PUSH
8439: LD_INT 110
8441: PUSH
8442: LD_INT 111
8444: PUSH
8445: LD_INT 112
8447: PUSH
8448: LD_INT 114
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: ST_TO_ADDR
8470: GO 10269
8472: LD_INT 11
8474: DOUBLE
8475: EQUAL
8476: IFTRUE 8480
8478: GO 8672
8480: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
8481: LD_ADDR_VAR 0 1
8485: PUSH
8486: LD_INT 2
8488: PUSH
8489: LD_INT 3
8491: PUSH
8492: LD_INT 4
8494: PUSH
8495: LD_INT 5
8497: PUSH
8498: LD_INT 6
8500: PUSH
8501: LD_INT 7
8503: PUSH
8504: LD_INT 8
8506: PUSH
8507: LD_INT 9
8509: PUSH
8510: LD_INT 10
8512: PUSH
8513: LD_INT 11
8515: PUSH
8516: LD_INT 12
8518: PUSH
8519: LD_INT 13
8521: PUSH
8522: LD_INT 14
8524: PUSH
8525: LD_INT 15
8527: PUSH
8528: LD_INT 16
8530: PUSH
8531: LD_INT 17
8533: PUSH
8534: LD_INT 18
8536: PUSH
8537: LD_INT 19
8539: PUSH
8540: LD_INT 20
8542: PUSH
8543: LD_INT 21
8545: PUSH
8546: LD_INT 22
8548: PUSH
8549: LD_INT 23
8551: PUSH
8552: LD_INT 24
8554: PUSH
8555: LD_INT 25
8557: PUSH
8558: LD_INT 26
8560: PUSH
8561: LD_INT 28
8563: PUSH
8564: LD_INT 30
8566: PUSH
8567: LD_INT 31
8569: PUSH
8570: LD_INT 32
8572: PUSH
8573: LD_INT 34
8575: PUSH
8576: LD_INT 36
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: PUSH
8612: LD_INT 101
8614: PUSH
8615: LD_INT 102
8617: PUSH
8618: LD_INT 103
8620: PUSH
8621: LD_INT 104
8623: PUSH
8624: LD_INT 105
8626: PUSH
8627: LD_INT 106
8629: PUSH
8630: LD_INT 107
8632: PUSH
8633: LD_INT 108
8635: PUSH
8636: LD_INT 109
8638: PUSH
8639: LD_INT 110
8641: PUSH
8642: LD_INT 111
8644: PUSH
8645: LD_INT 112
8647: PUSH
8648: LD_INT 114
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: ST_TO_ADDR
8670: GO 10269
8672: LD_INT 12
8674: DOUBLE
8675: EQUAL
8676: IFTRUE 8680
8678: GO 8888
8680: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
8681: LD_ADDR_VAR 0 1
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: LD_INT 2
8691: PUSH
8692: LD_INT 3
8694: PUSH
8695: LD_INT 4
8697: PUSH
8698: LD_INT 5
8700: PUSH
8701: LD_INT 6
8703: PUSH
8704: LD_INT 7
8706: PUSH
8707: LD_INT 8
8709: PUSH
8710: LD_INT 9
8712: PUSH
8713: LD_INT 10
8715: PUSH
8716: LD_INT 11
8718: PUSH
8719: LD_INT 12
8721: PUSH
8722: LD_INT 13
8724: PUSH
8725: LD_INT 14
8727: PUSH
8728: LD_INT 15
8730: PUSH
8731: LD_INT 16
8733: PUSH
8734: LD_INT 17
8736: PUSH
8737: LD_INT 18
8739: PUSH
8740: LD_INT 19
8742: PUSH
8743: LD_INT 20
8745: PUSH
8746: LD_INT 21
8748: PUSH
8749: LD_INT 22
8751: PUSH
8752: LD_INT 23
8754: PUSH
8755: LD_INT 24
8757: PUSH
8758: LD_INT 25
8760: PUSH
8761: LD_INT 26
8763: PUSH
8764: LD_INT 27
8766: PUSH
8767: LD_INT 28
8769: PUSH
8770: LD_INT 30
8772: PUSH
8773: LD_INT 31
8775: PUSH
8776: LD_INT 32
8778: PUSH
8779: LD_INT 33
8781: PUSH
8782: LD_INT 34
8784: PUSH
8785: LD_INT 36
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 101
8826: PUSH
8827: LD_INT 102
8829: PUSH
8830: LD_INT 103
8832: PUSH
8833: LD_INT 104
8835: PUSH
8836: LD_INT 105
8838: PUSH
8839: LD_INT 106
8841: PUSH
8842: LD_INT 107
8844: PUSH
8845: LD_INT 108
8847: PUSH
8848: LD_INT 109
8850: PUSH
8851: LD_INT 110
8853: PUSH
8854: LD_INT 111
8856: PUSH
8857: LD_INT 112
8859: PUSH
8860: LD_INT 113
8862: PUSH
8863: LD_INT 114
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: ST_TO_ADDR
8886: GO 10269
8888: LD_INT 13
8890: DOUBLE
8891: EQUAL
8892: IFTRUE 8896
8894: GO 9104
8896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
8897: LD_ADDR_VAR 0 1
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: LD_INT 2
8907: PUSH
8908: LD_INT 3
8910: PUSH
8911: LD_INT 4
8913: PUSH
8914: LD_INT 5
8916: PUSH
8917: LD_INT 6
8919: PUSH
8920: LD_INT 7
8922: PUSH
8923: LD_INT 8
8925: PUSH
8926: LD_INT 9
8928: PUSH
8929: LD_INT 10
8931: PUSH
8932: LD_INT 11
8934: PUSH
8935: LD_INT 12
8937: PUSH
8938: LD_INT 13
8940: PUSH
8941: LD_INT 14
8943: PUSH
8944: LD_INT 15
8946: PUSH
8947: LD_INT 16
8949: PUSH
8950: LD_INT 17
8952: PUSH
8953: LD_INT 18
8955: PUSH
8956: LD_INT 19
8958: PUSH
8959: LD_INT 20
8961: PUSH
8962: LD_INT 21
8964: PUSH
8965: LD_INT 22
8967: PUSH
8968: LD_INT 23
8970: PUSH
8971: LD_INT 24
8973: PUSH
8974: LD_INT 25
8976: PUSH
8977: LD_INT 26
8979: PUSH
8980: LD_INT 27
8982: PUSH
8983: LD_INT 28
8985: PUSH
8986: LD_INT 30
8988: PUSH
8989: LD_INT 31
8991: PUSH
8992: LD_INT 32
8994: PUSH
8995: LD_INT 33
8997: PUSH
8998: LD_INT 34
9000: PUSH
9001: LD_INT 36
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 101
9042: PUSH
9043: LD_INT 102
9045: PUSH
9046: LD_INT 103
9048: PUSH
9049: LD_INT 104
9051: PUSH
9052: LD_INT 105
9054: PUSH
9055: LD_INT 106
9057: PUSH
9058: LD_INT 107
9060: PUSH
9061: LD_INT 108
9063: PUSH
9064: LD_INT 109
9066: PUSH
9067: LD_INT 110
9069: PUSH
9070: LD_INT 111
9072: PUSH
9073: LD_INT 112
9075: PUSH
9076: LD_INT 113
9078: PUSH
9079: LD_INT 114
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: ST_TO_ADDR
9102: GO 10269
9104: LD_INT 14
9106: DOUBLE
9107: EQUAL
9108: IFTRUE 9112
9110: GO 9324
9112: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_INT 1
9120: PUSH
9121: LD_INT 2
9123: PUSH
9124: LD_INT 3
9126: PUSH
9127: LD_INT 4
9129: PUSH
9130: LD_INT 5
9132: PUSH
9133: LD_INT 6
9135: PUSH
9136: LD_INT 7
9138: PUSH
9139: LD_INT 8
9141: PUSH
9142: LD_INT 9
9144: PUSH
9145: LD_INT 10
9147: PUSH
9148: LD_INT 11
9150: PUSH
9151: LD_INT 12
9153: PUSH
9154: LD_INT 13
9156: PUSH
9157: LD_INT 14
9159: PUSH
9160: LD_INT 15
9162: PUSH
9163: LD_INT 16
9165: PUSH
9166: LD_INT 17
9168: PUSH
9169: LD_INT 18
9171: PUSH
9172: LD_INT 19
9174: PUSH
9175: LD_INT 20
9177: PUSH
9178: LD_INT 21
9180: PUSH
9181: LD_INT 22
9183: PUSH
9184: LD_INT 23
9186: PUSH
9187: LD_INT 24
9189: PUSH
9190: LD_INT 25
9192: PUSH
9193: LD_INT 26
9195: PUSH
9196: LD_INT 27
9198: PUSH
9199: LD_INT 28
9201: PUSH
9202: LD_INT 29
9204: PUSH
9205: LD_INT 30
9207: PUSH
9208: LD_INT 31
9210: PUSH
9211: LD_INT 32
9213: PUSH
9214: LD_INT 33
9216: PUSH
9217: LD_INT 34
9219: PUSH
9220: LD_INT 36
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 101
9262: PUSH
9263: LD_INT 102
9265: PUSH
9266: LD_INT 103
9268: PUSH
9269: LD_INT 104
9271: PUSH
9272: LD_INT 105
9274: PUSH
9275: LD_INT 106
9277: PUSH
9278: LD_INT 107
9280: PUSH
9281: LD_INT 108
9283: PUSH
9284: LD_INT 109
9286: PUSH
9287: LD_INT 110
9289: PUSH
9290: LD_INT 111
9292: PUSH
9293: LD_INT 112
9295: PUSH
9296: LD_INT 113
9298: PUSH
9299: LD_INT 114
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: ST_TO_ADDR
9322: GO 10269
9324: LD_INT 15
9326: DOUBLE
9327: EQUAL
9328: IFTRUE 9332
9330: GO 9544
9332: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
9333: LD_ADDR_VAR 0 1
9337: PUSH
9338: LD_INT 1
9340: PUSH
9341: LD_INT 2
9343: PUSH
9344: LD_INT 3
9346: PUSH
9347: LD_INT 4
9349: PUSH
9350: LD_INT 5
9352: PUSH
9353: LD_INT 6
9355: PUSH
9356: LD_INT 7
9358: PUSH
9359: LD_INT 8
9361: PUSH
9362: LD_INT 9
9364: PUSH
9365: LD_INT 10
9367: PUSH
9368: LD_INT 11
9370: PUSH
9371: LD_INT 12
9373: PUSH
9374: LD_INT 13
9376: PUSH
9377: LD_INT 14
9379: PUSH
9380: LD_INT 15
9382: PUSH
9383: LD_INT 16
9385: PUSH
9386: LD_INT 17
9388: PUSH
9389: LD_INT 18
9391: PUSH
9392: LD_INT 19
9394: PUSH
9395: LD_INT 20
9397: PUSH
9398: LD_INT 21
9400: PUSH
9401: LD_INT 22
9403: PUSH
9404: LD_INT 23
9406: PUSH
9407: LD_INT 24
9409: PUSH
9410: LD_INT 25
9412: PUSH
9413: LD_INT 26
9415: PUSH
9416: LD_INT 27
9418: PUSH
9419: LD_INT 28
9421: PUSH
9422: LD_INT 29
9424: PUSH
9425: LD_INT 30
9427: PUSH
9428: LD_INT 31
9430: PUSH
9431: LD_INT 32
9433: PUSH
9434: LD_INT 33
9436: PUSH
9437: LD_INT 34
9439: PUSH
9440: LD_INT 36
9442: PUSH
9443: EMPTY
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 101
9482: PUSH
9483: LD_INT 102
9485: PUSH
9486: LD_INT 103
9488: PUSH
9489: LD_INT 104
9491: PUSH
9492: LD_INT 105
9494: PUSH
9495: LD_INT 106
9497: PUSH
9498: LD_INT 107
9500: PUSH
9501: LD_INT 108
9503: PUSH
9504: LD_INT 109
9506: PUSH
9507: LD_INT 110
9509: PUSH
9510: LD_INT 111
9512: PUSH
9513: LD_INT 112
9515: PUSH
9516: LD_INT 113
9518: PUSH
9519: LD_INT 114
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: ST_TO_ADDR
9542: GO 10269
9544: LD_INT 16
9546: DOUBLE
9547: EQUAL
9548: IFTRUE 9552
9550: GO 9676
9552: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
9553: LD_ADDR_VAR 0 1
9557: PUSH
9558: LD_INT 2
9560: PUSH
9561: LD_INT 4
9563: PUSH
9564: LD_INT 5
9566: PUSH
9567: LD_INT 7
9569: PUSH
9570: LD_INT 11
9572: PUSH
9573: LD_INT 12
9575: PUSH
9576: LD_INT 15
9578: PUSH
9579: LD_INT 16
9581: PUSH
9582: LD_INT 20
9584: PUSH
9585: LD_INT 21
9587: PUSH
9588: LD_INT 22
9590: PUSH
9591: LD_INT 23
9593: PUSH
9594: LD_INT 25
9596: PUSH
9597: LD_INT 26
9599: PUSH
9600: LD_INT 30
9602: PUSH
9603: LD_INT 31
9605: PUSH
9606: LD_INT 32
9608: PUSH
9609: LD_INT 33
9611: PUSH
9612: LD_INT 34
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: PUSH
9636: LD_INT 101
9638: PUSH
9639: LD_INT 102
9641: PUSH
9642: LD_INT 103
9644: PUSH
9645: LD_INT 106
9647: PUSH
9648: LD_INT 108
9650: PUSH
9651: LD_INT 112
9653: PUSH
9654: LD_INT 113
9656: PUSH
9657: LD_INT 114
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: ST_TO_ADDR
9674: GO 10269
9676: LD_INT 17
9678: DOUBLE
9679: EQUAL
9680: IFTRUE 9684
9682: GO 9896
9684: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
9685: LD_ADDR_VAR 0 1
9689: PUSH
9690: LD_INT 1
9692: PUSH
9693: LD_INT 2
9695: PUSH
9696: LD_INT 3
9698: PUSH
9699: LD_INT 4
9701: PUSH
9702: LD_INT 5
9704: PUSH
9705: LD_INT 6
9707: PUSH
9708: LD_INT 7
9710: PUSH
9711: LD_INT 8
9713: PUSH
9714: LD_INT 9
9716: PUSH
9717: LD_INT 10
9719: PUSH
9720: LD_INT 11
9722: PUSH
9723: LD_INT 12
9725: PUSH
9726: LD_INT 13
9728: PUSH
9729: LD_INT 14
9731: PUSH
9732: LD_INT 15
9734: PUSH
9735: LD_INT 16
9737: PUSH
9738: LD_INT 17
9740: PUSH
9741: LD_INT 18
9743: PUSH
9744: LD_INT 19
9746: PUSH
9747: LD_INT 20
9749: PUSH
9750: LD_INT 21
9752: PUSH
9753: LD_INT 22
9755: PUSH
9756: LD_INT 23
9758: PUSH
9759: LD_INT 24
9761: PUSH
9762: LD_INT 25
9764: PUSH
9765: LD_INT 26
9767: PUSH
9768: LD_INT 27
9770: PUSH
9771: LD_INT 28
9773: PUSH
9774: LD_INT 29
9776: PUSH
9777: LD_INT 30
9779: PUSH
9780: LD_INT 31
9782: PUSH
9783: LD_INT 32
9785: PUSH
9786: LD_INT 33
9788: PUSH
9789: LD_INT 34
9791: PUSH
9792: LD_INT 36
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 101
9834: PUSH
9835: LD_INT 102
9837: PUSH
9838: LD_INT 103
9840: PUSH
9841: LD_INT 104
9843: PUSH
9844: LD_INT 105
9846: PUSH
9847: LD_INT 106
9849: PUSH
9850: LD_INT 107
9852: PUSH
9853: LD_INT 108
9855: PUSH
9856: LD_INT 109
9858: PUSH
9859: LD_INT 110
9861: PUSH
9862: LD_INT 111
9864: PUSH
9865: LD_INT 112
9867: PUSH
9868: LD_INT 113
9870: PUSH
9871: LD_INT 114
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: ST_TO_ADDR
9894: GO 10269
9896: LD_INT 18
9898: DOUBLE
9899: EQUAL
9900: IFTRUE 9904
9902: GO 10040
9904: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
9905: LD_ADDR_VAR 0 1
9909: PUSH
9910: LD_INT 2
9912: PUSH
9913: LD_INT 4
9915: PUSH
9916: LD_INT 5
9918: PUSH
9919: LD_INT 7
9921: PUSH
9922: LD_INT 11
9924: PUSH
9925: LD_INT 12
9927: PUSH
9928: LD_INT 15
9930: PUSH
9931: LD_INT 16
9933: PUSH
9934: LD_INT 20
9936: PUSH
9937: LD_INT 21
9939: PUSH
9940: LD_INT 22
9942: PUSH
9943: LD_INT 23
9945: PUSH
9946: LD_INT 25
9948: PUSH
9949: LD_INT 26
9951: PUSH
9952: LD_INT 30
9954: PUSH
9955: LD_INT 31
9957: PUSH
9958: LD_INT 32
9960: PUSH
9961: LD_INT 33
9963: PUSH
9964: LD_INT 34
9966: PUSH
9967: LD_INT 35
9969: PUSH
9970: LD_INT 36
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 101
9998: PUSH
9999: LD_INT 102
10001: PUSH
10002: LD_INT 103
10004: PUSH
10005: LD_INT 106
10007: PUSH
10008: LD_INT 108
10010: PUSH
10011: LD_INT 112
10013: PUSH
10014: LD_INT 113
10016: PUSH
10017: LD_INT 114
10019: PUSH
10020: LD_INT 115
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: ST_TO_ADDR
10038: GO 10269
10040: LD_INT 19
10042: DOUBLE
10043: EQUAL
10044: IFTRUE 10048
10046: GO 10268
10048: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
10049: LD_ADDR_VAR 0 1
10053: PUSH
10054: LD_INT 1
10056: PUSH
10057: LD_INT 2
10059: PUSH
10060: LD_INT 3
10062: PUSH
10063: LD_INT 4
10065: PUSH
10066: LD_INT 5
10068: PUSH
10069: LD_INT 6
10071: PUSH
10072: LD_INT 7
10074: PUSH
10075: LD_INT 8
10077: PUSH
10078: LD_INT 9
10080: PUSH
10081: LD_INT 10
10083: PUSH
10084: LD_INT 11
10086: PUSH
10087: LD_INT 12
10089: PUSH
10090: LD_INT 13
10092: PUSH
10093: LD_INT 14
10095: PUSH
10096: LD_INT 15
10098: PUSH
10099: LD_INT 16
10101: PUSH
10102: LD_INT 17
10104: PUSH
10105: LD_INT 18
10107: PUSH
10108: LD_INT 19
10110: PUSH
10111: LD_INT 20
10113: PUSH
10114: LD_INT 21
10116: PUSH
10117: LD_INT 22
10119: PUSH
10120: LD_INT 23
10122: PUSH
10123: LD_INT 24
10125: PUSH
10126: LD_INT 25
10128: PUSH
10129: LD_INT 26
10131: PUSH
10132: LD_INT 27
10134: PUSH
10135: LD_INT 28
10137: PUSH
10138: LD_INT 29
10140: PUSH
10141: LD_INT 30
10143: PUSH
10144: LD_INT 31
10146: PUSH
10147: LD_INT 32
10149: PUSH
10150: LD_INT 33
10152: PUSH
10153: LD_INT 34
10155: PUSH
10156: LD_INT 35
10158: PUSH
10159: LD_INT 36
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 101
10202: PUSH
10203: LD_INT 102
10205: PUSH
10206: LD_INT 103
10208: PUSH
10209: LD_INT 104
10211: PUSH
10212: LD_INT 105
10214: PUSH
10215: LD_INT 106
10217: PUSH
10218: LD_INT 107
10220: PUSH
10221: LD_INT 108
10223: PUSH
10224: LD_INT 109
10226: PUSH
10227: LD_INT 110
10229: PUSH
10230: LD_INT 111
10232: PUSH
10233: LD_INT 112
10235: PUSH
10236: LD_INT 113
10238: PUSH
10239: LD_INT 114
10241: PUSH
10242: LD_INT 115
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: ST_TO_ADDR
10266: GO 10269
10268: POP
// end ; if result then
10269: LD_VAR 0 1
10273: IFFALSE 10562
// begin normal :=  ;
10275: LD_ADDR_VAR 0 3
10279: PUSH
10280: LD_STRING 
10282: ST_TO_ADDR
// hardcore :=  ;
10283: LD_ADDR_VAR 0 4
10287: PUSH
10288: LD_STRING 
10290: ST_TO_ADDR
// for i = 1 to normalCounter do
10291: LD_ADDR_VAR 0 5
10295: PUSH
10296: DOUBLE
10297: LD_INT 1
10299: DEC
10300: ST_TO_ADDR
10301: LD_EXP 20
10305: PUSH
10306: FOR_TO
10307: IFFALSE 10408
// begin tmp := 0 ;
10309: LD_ADDR_VAR 0 2
10313: PUSH
10314: LD_STRING 0
10316: ST_TO_ADDR
// if result [ 1 ] then
10317: LD_VAR 0 1
10321: PUSH
10322: LD_INT 1
10324: ARRAY
10325: IFFALSE 10390
// if result [ 1 ] [ 1 ] = i then
10327: LD_VAR 0 1
10331: PUSH
10332: LD_INT 1
10334: ARRAY
10335: PUSH
10336: LD_INT 1
10338: ARRAY
10339: PUSH
10340: LD_VAR 0 5
10344: EQUAL
10345: IFFALSE 10390
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10347: LD_ADDR_VAR 0 1
10351: PUSH
10352: LD_VAR 0 1
10356: PPUSH
10357: LD_INT 1
10359: PPUSH
10360: LD_VAR 0 1
10364: PUSH
10365: LD_INT 1
10367: ARRAY
10368: PPUSH
10369: LD_INT 1
10371: PPUSH
10372: CALL_OW 3
10376: PPUSH
10377: CALL_OW 1
10381: ST_TO_ADDR
// tmp := 1 ;
10382: LD_ADDR_VAR 0 2
10386: PUSH
10387: LD_STRING 1
10389: ST_TO_ADDR
// end ; normal := normal & tmp ;
10390: LD_ADDR_VAR 0 3
10394: PUSH
10395: LD_VAR 0 3
10399: PUSH
10400: LD_VAR 0 2
10404: STR
10405: ST_TO_ADDR
// end ;
10406: GO 10306
10408: POP
10409: POP
// for i = 1 to hardcoreCounter do
10410: LD_ADDR_VAR 0 5
10414: PUSH
10415: DOUBLE
10416: LD_INT 1
10418: DEC
10419: ST_TO_ADDR
10420: LD_EXP 21
10424: PUSH
10425: FOR_TO
10426: IFFALSE 10531
// begin tmp := 0 ;
10428: LD_ADDR_VAR 0 2
10432: PUSH
10433: LD_STRING 0
10435: ST_TO_ADDR
// if result [ 2 ] then
10436: LD_VAR 0 1
10440: PUSH
10441: LD_INT 2
10443: ARRAY
10444: IFFALSE 10513
// if result [ 2 ] [ 1 ] = 100 + i then
10446: LD_VAR 0 1
10450: PUSH
10451: LD_INT 2
10453: ARRAY
10454: PUSH
10455: LD_INT 1
10457: ARRAY
10458: PUSH
10459: LD_INT 100
10461: PUSH
10462: LD_VAR 0 5
10466: PLUS
10467: EQUAL
10468: IFFALSE 10513
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10470: LD_ADDR_VAR 0 1
10474: PUSH
10475: LD_VAR 0 1
10479: PPUSH
10480: LD_INT 2
10482: PPUSH
10483: LD_VAR 0 1
10487: PUSH
10488: LD_INT 2
10490: ARRAY
10491: PPUSH
10492: LD_INT 1
10494: PPUSH
10495: CALL_OW 3
10499: PPUSH
10500: CALL_OW 1
10504: ST_TO_ADDR
// tmp := 1 ;
10505: LD_ADDR_VAR 0 2
10509: PUSH
10510: LD_STRING 1
10512: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10513: LD_ADDR_VAR 0 4
10517: PUSH
10518: LD_VAR 0 4
10522: PUSH
10523: LD_VAR 0 2
10527: STR
10528: ST_TO_ADDR
// end ;
10529: GO 10425
10531: POP
10532: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
10533: LD_STRING getStreamItemsFromMission("
10535: PUSH
10536: LD_VAR 0 3
10540: STR
10541: PUSH
10542: LD_STRING ","
10544: STR
10545: PUSH
10546: LD_VAR 0 4
10550: STR
10551: PUSH
10552: LD_STRING ")
10554: STR
10555: PPUSH
10556: CALL_OW 559
// end else
10560: GO 10569
// ToLua ( getStreamItemsFromMission("","") ) ;
10562: LD_STRING getStreamItemsFromMission("","")
10564: PPUSH
10565: CALL_OW 559
// end ;
10569: LD_VAR 0 1
10573: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
10574: LD_VAR 0 2
10578: PUSH
10579: LD_INT 100
10581: EQUAL
10582: IFFALSE 11531
// begin if not StreamModeActive then
10584: LD_EXP 19
10588: NOT
10589: IFFALSE 10599
// StreamModeActive := true ;
10591: LD_ADDR_EXP 19
10595: PUSH
10596: LD_INT 1
10598: ST_TO_ADDR
// if p3 = 0 then
10599: LD_VAR 0 3
10603: PUSH
10604: LD_INT 0
10606: EQUAL
10607: IFFALSE 10613
// InitStreamMode ;
10609: CALL 6859 0 0
// if p3 = 1 then
10613: LD_VAR 0 3
10617: PUSH
10618: LD_INT 1
10620: EQUAL
10621: IFFALSE 10631
// sRocket := true ;
10623: LD_ADDR_EXP 24
10627: PUSH
10628: LD_INT 1
10630: ST_TO_ADDR
// if p3 = 2 then
10631: LD_VAR 0 3
10635: PUSH
10636: LD_INT 2
10638: EQUAL
10639: IFFALSE 10649
// sSpeed := true ;
10641: LD_ADDR_EXP 23
10645: PUSH
10646: LD_INT 1
10648: ST_TO_ADDR
// if p3 = 3 then
10649: LD_VAR 0 3
10653: PUSH
10654: LD_INT 3
10656: EQUAL
10657: IFFALSE 10667
// sEngine := true ;
10659: LD_ADDR_EXP 25
10663: PUSH
10664: LD_INT 1
10666: ST_TO_ADDR
// if p3 = 4 then
10667: LD_VAR 0 3
10671: PUSH
10672: LD_INT 4
10674: EQUAL
10675: IFFALSE 10685
// sSpec := true ;
10677: LD_ADDR_EXP 22
10681: PUSH
10682: LD_INT 1
10684: ST_TO_ADDR
// if p3 = 5 then
10685: LD_VAR 0 3
10689: PUSH
10690: LD_INT 5
10692: EQUAL
10693: IFFALSE 10703
// sLevel := true ;
10695: LD_ADDR_EXP 26
10699: PUSH
10700: LD_INT 1
10702: ST_TO_ADDR
// if p3 = 6 then
10703: LD_VAR 0 3
10707: PUSH
10708: LD_INT 6
10710: EQUAL
10711: IFFALSE 10721
// sArmoury := true ;
10713: LD_ADDR_EXP 27
10717: PUSH
10718: LD_INT 1
10720: ST_TO_ADDR
// if p3 = 7 then
10721: LD_VAR 0 3
10725: PUSH
10726: LD_INT 7
10728: EQUAL
10729: IFFALSE 10739
// sRadar := true ;
10731: LD_ADDR_EXP 28
10735: PUSH
10736: LD_INT 1
10738: ST_TO_ADDR
// if p3 = 8 then
10739: LD_VAR 0 3
10743: PUSH
10744: LD_INT 8
10746: EQUAL
10747: IFFALSE 10757
// sBunker := true ;
10749: LD_ADDR_EXP 29
10753: PUSH
10754: LD_INT 1
10756: ST_TO_ADDR
// if p3 = 9 then
10757: LD_VAR 0 3
10761: PUSH
10762: LD_INT 9
10764: EQUAL
10765: IFFALSE 10775
// sHack := true ;
10767: LD_ADDR_EXP 30
10771: PUSH
10772: LD_INT 1
10774: ST_TO_ADDR
// if p3 = 10 then
10775: LD_VAR 0 3
10779: PUSH
10780: LD_INT 10
10782: EQUAL
10783: IFFALSE 10793
// sFire := true ;
10785: LD_ADDR_EXP 31
10789: PUSH
10790: LD_INT 1
10792: ST_TO_ADDR
// if p3 = 11 then
10793: LD_VAR 0 3
10797: PUSH
10798: LD_INT 11
10800: EQUAL
10801: IFFALSE 10811
// sRefresh := true ;
10803: LD_ADDR_EXP 32
10807: PUSH
10808: LD_INT 1
10810: ST_TO_ADDR
// if p3 = 12 then
10811: LD_VAR 0 3
10815: PUSH
10816: LD_INT 12
10818: EQUAL
10819: IFFALSE 10829
// sExp := true ;
10821: LD_ADDR_EXP 33
10825: PUSH
10826: LD_INT 1
10828: ST_TO_ADDR
// if p3 = 13 then
10829: LD_VAR 0 3
10833: PUSH
10834: LD_INT 13
10836: EQUAL
10837: IFFALSE 10847
// sDepot := true ;
10839: LD_ADDR_EXP 34
10843: PUSH
10844: LD_INT 1
10846: ST_TO_ADDR
// if p3 = 14 then
10847: LD_VAR 0 3
10851: PUSH
10852: LD_INT 14
10854: EQUAL
10855: IFFALSE 10865
// sFlag := true ;
10857: LD_ADDR_EXP 35
10861: PUSH
10862: LD_INT 1
10864: ST_TO_ADDR
// if p3 = 15 then
10865: LD_VAR 0 3
10869: PUSH
10870: LD_INT 15
10872: EQUAL
10873: IFFALSE 10883
// sKamikadze := true ;
10875: LD_ADDR_EXP 43
10879: PUSH
10880: LD_INT 1
10882: ST_TO_ADDR
// if p3 = 16 then
10883: LD_VAR 0 3
10887: PUSH
10888: LD_INT 16
10890: EQUAL
10891: IFFALSE 10901
// sTroll := true ;
10893: LD_ADDR_EXP 44
10897: PUSH
10898: LD_INT 1
10900: ST_TO_ADDR
// if p3 = 17 then
10901: LD_VAR 0 3
10905: PUSH
10906: LD_INT 17
10908: EQUAL
10909: IFFALSE 10919
// sSlow := true ;
10911: LD_ADDR_EXP 45
10915: PUSH
10916: LD_INT 1
10918: ST_TO_ADDR
// if p3 = 18 then
10919: LD_VAR 0 3
10923: PUSH
10924: LD_INT 18
10926: EQUAL
10927: IFFALSE 10937
// sLack := true ;
10929: LD_ADDR_EXP 46
10933: PUSH
10934: LD_INT 1
10936: ST_TO_ADDR
// if p3 = 19 then
10937: LD_VAR 0 3
10941: PUSH
10942: LD_INT 19
10944: EQUAL
10945: IFFALSE 10955
// sTank := true ;
10947: LD_ADDR_EXP 48
10951: PUSH
10952: LD_INT 1
10954: ST_TO_ADDR
// if p3 = 20 then
10955: LD_VAR 0 3
10959: PUSH
10960: LD_INT 20
10962: EQUAL
10963: IFFALSE 10973
// sRemote := true ;
10965: LD_ADDR_EXP 49
10969: PUSH
10970: LD_INT 1
10972: ST_TO_ADDR
// if p3 = 21 then
10973: LD_VAR 0 3
10977: PUSH
10978: LD_INT 21
10980: EQUAL
10981: IFFALSE 10991
// sPowell := true ;
10983: LD_ADDR_EXP 50
10987: PUSH
10988: LD_INT 1
10990: ST_TO_ADDR
// if p3 = 22 then
10991: LD_VAR 0 3
10995: PUSH
10996: LD_INT 22
10998: EQUAL
10999: IFFALSE 11009
// sTeleport := true ;
11001: LD_ADDR_EXP 53
11005: PUSH
11006: LD_INT 1
11008: ST_TO_ADDR
// if p3 = 23 then
11009: LD_VAR 0 3
11013: PUSH
11014: LD_INT 23
11016: EQUAL
11017: IFFALSE 11027
// sOilTower := true ;
11019: LD_ADDR_EXP 55
11023: PUSH
11024: LD_INT 1
11026: ST_TO_ADDR
// if p3 = 24 then
11027: LD_VAR 0 3
11031: PUSH
11032: LD_INT 24
11034: EQUAL
11035: IFFALSE 11045
// sShovel := true ;
11037: LD_ADDR_EXP 56
11041: PUSH
11042: LD_INT 1
11044: ST_TO_ADDR
// if p3 = 25 then
11045: LD_VAR 0 3
11049: PUSH
11050: LD_INT 25
11052: EQUAL
11053: IFFALSE 11063
// sSheik := true ;
11055: LD_ADDR_EXP 57
11059: PUSH
11060: LD_INT 1
11062: ST_TO_ADDR
// if p3 = 26 then
11063: LD_VAR 0 3
11067: PUSH
11068: LD_INT 26
11070: EQUAL
11071: IFFALSE 11081
// sEarthquake := true ;
11073: LD_ADDR_EXP 59
11077: PUSH
11078: LD_INT 1
11080: ST_TO_ADDR
// if p3 = 27 then
11081: LD_VAR 0 3
11085: PUSH
11086: LD_INT 27
11088: EQUAL
11089: IFFALSE 11099
// sAI := true ;
11091: LD_ADDR_EXP 60
11095: PUSH
11096: LD_INT 1
11098: ST_TO_ADDR
// if p3 = 28 then
11099: LD_VAR 0 3
11103: PUSH
11104: LD_INT 28
11106: EQUAL
11107: IFFALSE 11117
// sCargo := true ;
11109: LD_ADDR_EXP 63
11113: PUSH
11114: LD_INT 1
11116: ST_TO_ADDR
// if p3 = 29 then
11117: LD_VAR 0 3
11121: PUSH
11122: LD_INT 29
11124: EQUAL
11125: IFFALSE 11135
// sDLaser := true ;
11127: LD_ADDR_EXP 64
11131: PUSH
11132: LD_INT 1
11134: ST_TO_ADDR
// if p3 = 30 then
11135: LD_VAR 0 3
11139: PUSH
11140: LD_INT 30
11142: EQUAL
11143: IFFALSE 11153
// sExchange := true ;
11145: LD_ADDR_EXP 65
11149: PUSH
11150: LD_INT 1
11152: ST_TO_ADDR
// if p3 = 31 then
11153: LD_VAR 0 3
11157: PUSH
11158: LD_INT 31
11160: EQUAL
11161: IFFALSE 11171
// sFac := true ;
11163: LD_ADDR_EXP 66
11167: PUSH
11168: LD_INT 1
11170: ST_TO_ADDR
// if p3 = 32 then
11171: LD_VAR 0 3
11175: PUSH
11176: LD_INT 32
11178: EQUAL
11179: IFFALSE 11189
// sPower := true ;
11181: LD_ADDR_EXP 67
11185: PUSH
11186: LD_INT 1
11188: ST_TO_ADDR
// if p3 = 33 then
11189: LD_VAR 0 3
11193: PUSH
11194: LD_INT 33
11196: EQUAL
11197: IFFALSE 11207
// sRandom := true ;
11199: LD_ADDR_EXP 68
11203: PUSH
11204: LD_INT 1
11206: ST_TO_ADDR
// if p3 = 34 then
11207: LD_VAR 0 3
11211: PUSH
11212: LD_INT 34
11214: EQUAL
11215: IFFALSE 11225
// sShield := true ;
11217: LD_ADDR_EXP 69
11221: PUSH
11222: LD_INT 1
11224: ST_TO_ADDR
// if p3 = 35 then
11225: LD_VAR 0 3
11229: PUSH
11230: LD_INT 35
11232: EQUAL
11233: IFFALSE 11243
// sTime := true ;
11235: LD_ADDR_EXP 70
11239: PUSH
11240: LD_INT 1
11242: ST_TO_ADDR
// if p3 = 36 then
11243: LD_VAR 0 3
11247: PUSH
11248: LD_INT 36
11250: EQUAL
11251: IFFALSE 11261
// sTools := true ;
11253: LD_ADDR_EXP 71
11257: PUSH
11258: LD_INT 1
11260: ST_TO_ADDR
// if p3 = 101 then
11261: LD_VAR 0 3
11265: PUSH
11266: LD_INT 101
11268: EQUAL
11269: IFFALSE 11279
// sSold := true ;
11271: LD_ADDR_EXP 36
11275: PUSH
11276: LD_INT 1
11278: ST_TO_ADDR
// if p3 = 102 then
11279: LD_VAR 0 3
11283: PUSH
11284: LD_INT 102
11286: EQUAL
11287: IFFALSE 11297
// sDiff := true ;
11289: LD_ADDR_EXP 37
11293: PUSH
11294: LD_INT 1
11296: ST_TO_ADDR
// if p3 = 103 then
11297: LD_VAR 0 3
11301: PUSH
11302: LD_INT 103
11304: EQUAL
11305: IFFALSE 11315
// sFog := true ;
11307: LD_ADDR_EXP 40
11311: PUSH
11312: LD_INT 1
11314: ST_TO_ADDR
// if p3 = 104 then
11315: LD_VAR 0 3
11319: PUSH
11320: LD_INT 104
11322: EQUAL
11323: IFFALSE 11333
// sReset := true ;
11325: LD_ADDR_EXP 41
11329: PUSH
11330: LD_INT 1
11332: ST_TO_ADDR
// if p3 = 105 then
11333: LD_VAR 0 3
11337: PUSH
11338: LD_INT 105
11340: EQUAL
11341: IFFALSE 11351
// sSun := true ;
11343: LD_ADDR_EXP 42
11347: PUSH
11348: LD_INT 1
11350: ST_TO_ADDR
// if p3 = 106 then
11351: LD_VAR 0 3
11355: PUSH
11356: LD_INT 106
11358: EQUAL
11359: IFFALSE 11369
// sTiger := true ;
11361: LD_ADDR_EXP 38
11365: PUSH
11366: LD_INT 1
11368: ST_TO_ADDR
// if p3 = 107 then
11369: LD_VAR 0 3
11373: PUSH
11374: LD_INT 107
11376: EQUAL
11377: IFFALSE 11387
// sBomb := true ;
11379: LD_ADDR_EXP 39
11383: PUSH
11384: LD_INT 1
11386: ST_TO_ADDR
// if p3 = 108 then
11387: LD_VAR 0 3
11391: PUSH
11392: LD_INT 108
11394: EQUAL
11395: IFFALSE 11405
// sWound := true ;
11397: LD_ADDR_EXP 47
11401: PUSH
11402: LD_INT 1
11404: ST_TO_ADDR
// if p3 = 109 then
11405: LD_VAR 0 3
11409: PUSH
11410: LD_INT 109
11412: EQUAL
11413: IFFALSE 11423
// sBetray := true ;
11415: LD_ADDR_EXP 51
11419: PUSH
11420: LD_INT 1
11422: ST_TO_ADDR
// if p3 = 110 then
11423: LD_VAR 0 3
11427: PUSH
11428: LD_INT 110
11430: EQUAL
11431: IFFALSE 11441
// sContamin := true ;
11433: LD_ADDR_EXP 52
11437: PUSH
11438: LD_INT 1
11440: ST_TO_ADDR
// if p3 = 111 then
11441: LD_VAR 0 3
11445: PUSH
11446: LD_INT 111
11448: EQUAL
11449: IFFALSE 11459
// sOil := true ;
11451: LD_ADDR_EXP 54
11455: PUSH
11456: LD_INT 1
11458: ST_TO_ADDR
// if p3 = 112 then
11459: LD_VAR 0 3
11463: PUSH
11464: LD_INT 112
11466: EQUAL
11467: IFFALSE 11477
// sStu := true ;
11469: LD_ADDR_EXP 58
11473: PUSH
11474: LD_INT 1
11476: ST_TO_ADDR
// if p3 = 113 then
11477: LD_VAR 0 3
11481: PUSH
11482: LD_INT 113
11484: EQUAL
11485: IFFALSE 11495
// sBazooka := true ;
11487: LD_ADDR_EXP 61
11491: PUSH
11492: LD_INT 1
11494: ST_TO_ADDR
// if p3 = 114 then
11495: LD_VAR 0 3
11499: PUSH
11500: LD_INT 114
11502: EQUAL
11503: IFFALSE 11513
// sMortar := true ;
11505: LD_ADDR_EXP 62
11509: PUSH
11510: LD_INT 1
11512: ST_TO_ADDR
// if p3 = 115 then
11513: LD_VAR 0 3
11517: PUSH
11518: LD_INT 115
11520: EQUAL
11521: IFFALSE 11531
// sRanger := true ;
11523: LD_ADDR_EXP 72
11527: PUSH
11528: LD_INT 1
11530: ST_TO_ADDR
// end ; end ;
11531: PPOPN 6
11533: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11534: LD_EXP 19
11538: PUSH
11539: LD_EXP 24
11543: AND
11544: IFFALSE 11668
11546: GO 11548
11548: DISABLE
11549: LD_INT 0
11551: PPUSH
11552: PPUSH
// begin enable ;
11553: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11554: LD_ADDR_VAR 0 2
11558: PUSH
11559: LD_INT 22
11561: PUSH
11562: LD_OWVAR 2
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 2
11573: PUSH
11574: LD_INT 34
11576: PUSH
11577: LD_INT 7
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: LD_INT 34
11586: PUSH
11587: LD_INT 45
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PUSH
11594: LD_INT 34
11596: PUSH
11597: LD_INT 28
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 34
11606: PUSH
11607: LD_INT 47
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PPUSH
11625: CALL_OW 69
11629: ST_TO_ADDR
// if not tmp then
11630: LD_VAR 0 2
11634: NOT
11635: IFFALSE 11639
// exit ;
11637: GO 11668
// for i in tmp do
11639: LD_ADDR_VAR 0 1
11643: PUSH
11644: LD_VAR 0 2
11648: PUSH
11649: FOR_IN
11650: IFFALSE 11666
// begin SetLives ( i , 0 ) ;
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_INT 0
11659: PPUSH
11660: CALL_OW 234
// end ;
11664: GO 11649
11666: POP
11667: POP
// end ;
11668: PPOPN 2
11670: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11671: LD_EXP 19
11675: PUSH
11676: LD_EXP 25
11680: AND
11681: IFFALSE 11765
11683: GO 11685
11685: DISABLE
11686: LD_INT 0
11688: PPUSH
11689: PPUSH
// begin enable ;
11690: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11691: LD_ADDR_VAR 0 2
11695: PUSH
11696: LD_INT 22
11698: PUSH
11699: LD_OWVAR 2
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 32
11710: PUSH
11711: LD_INT 3
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PPUSH
11722: CALL_OW 69
11726: ST_TO_ADDR
// if not tmp then
11727: LD_VAR 0 2
11731: NOT
11732: IFFALSE 11736
// exit ;
11734: GO 11765
// for i in tmp do
11736: LD_ADDR_VAR 0 1
11740: PUSH
11741: LD_VAR 0 2
11745: PUSH
11746: FOR_IN
11747: IFFALSE 11763
// begin SetLives ( i , 0 ) ;
11749: LD_VAR 0 1
11753: PPUSH
11754: LD_INT 0
11756: PPUSH
11757: CALL_OW 234
// end ;
11761: GO 11746
11763: POP
11764: POP
// end ;
11765: PPOPN 2
11767: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11768: LD_EXP 19
11772: PUSH
11773: LD_EXP 22
11777: AND
11778: IFFALSE 11871
11780: GO 11782
11782: DISABLE
11783: LD_INT 0
11785: PPUSH
// begin enable ;
11786: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11787: LD_ADDR_VAR 0 1
11791: PUSH
11792: LD_INT 22
11794: PUSH
11795: LD_OWVAR 2
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 2
11806: PUSH
11807: LD_INT 25
11809: PUSH
11810: LD_INT 5
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 25
11819: PUSH
11820: LD_INT 9
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: LD_INT 25
11829: PUSH
11830: LD_INT 8
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: PPUSH
11847: CALL_OW 69
11851: PUSH
11852: FOR_IN
11853: IFFALSE 11869
// begin SetClass ( i , 1 ) ;
11855: LD_VAR 0 1
11859: PPUSH
11860: LD_INT 1
11862: PPUSH
11863: CALL_OW 336
// end ;
11867: GO 11852
11869: POP
11870: POP
// end ;
11871: PPOPN 1
11873: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11874: LD_EXP 19
11878: PUSH
11879: LD_EXP 23
11883: AND
11884: PUSH
11885: LD_OWVAR 65
11889: PUSH
11890: LD_INT 7
11892: LESS
11893: AND
11894: IFFALSE 11908
11896: GO 11898
11898: DISABLE
// begin enable ;
11899: ENABLE
// game_speed := 7 ;
11900: LD_ADDR_OWVAR 65
11904: PUSH
11905: LD_INT 7
11907: ST_TO_ADDR
// end ;
11908: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11909: LD_EXP 19
11913: PUSH
11914: LD_EXP 26
11918: AND
11919: IFFALSE 12121
11921: GO 11923
11923: DISABLE
11924: LD_INT 0
11926: PPUSH
11927: PPUSH
11928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11929: LD_ADDR_VAR 0 3
11933: PUSH
11934: LD_INT 81
11936: PUSH
11937: LD_OWVAR 2
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 21
11948: PUSH
11949: LD_INT 1
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PPUSH
11960: CALL_OW 69
11964: ST_TO_ADDR
// if not tmp then
11965: LD_VAR 0 3
11969: NOT
11970: IFFALSE 11974
// exit ;
11972: GO 12121
// if tmp > 5 then
11974: LD_VAR 0 3
11978: PUSH
11979: LD_INT 5
11981: GREATER
11982: IFFALSE 11994
// k := 5 else
11984: LD_ADDR_VAR 0 2
11988: PUSH
11989: LD_INT 5
11991: ST_TO_ADDR
11992: GO 12004
// k := tmp ;
11994: LD_ADDR_VAR 0 2
11998: PUSH
11999: LD_VAR 0 3
12003: ST_TO_ADDR
// for i := 1 to k do
12004: LD_ADDR_VAR 0 1
12008: PUSH
12009: DOUBLE
12010: LD_INT 1
12012: DEC
12013: ST_TO_ADDR
12014: LD_VAR 0 2
12018: PUSH
12019: FOR_TO
12020: IFFALSE 12119
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12022: LD_VAR 0 3
12026: PUSH
12027: LD_VAR 0 1
12031: ARRAY
12032: PPUSH
12033: LD_VAR 0 1
12037: PUSH
12038: LD_INT 4
12040: MOD
12041: PUSH
12042: LD_INT 1
12044: PLUS
12045: PPUSH
12046: CALL_OW 259
12050: PUSH
12051: LD_INT 10
12053: LESS
12054: IFFALSE 12117
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12056: LD_VAR 0 3
12060: PUSH
12061: LD_VAR 0 1
12065: ARRAY
12066: PPUSH
12067: LD_VAR 0 1
12071: PUSH
12072: LD_INT 4
12074: MOD
12075: PUSH
12076: LD_INT 1
12078: PLUS
12079: PPUSH
12080: LD_VAR 0 3
12084: PUSH
12085: LD_VAR 0 1
12089: ARRAY
12090: PPUSH
12091: LD_VAR 0 1
12095: PUSH
12096: LD_INT 4
12098: MOD
12099: PUSH
12100: LD_INT 1
12102: PLUS
12103: PPUSH
12104: CALL_OW 259
12108: PUSH
12109: LD_INT 1
12111: PLUS
12112: PPUSH
12113: CALL_OW 237
12117: GO 12019
12119: POP
12120: POP
// end ;
12121: PPOPN 3
12123: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12124: LD_EXP 19
12128: PUSH
12129: LD_EXP 27
12133: AND
12134: IFFALSE 12154
12136: GO 12138
12138: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12139: LD_INT 4
12141: PPUSH
12142: LD_OWVAR 2
12146: PPUSH
12147: LD_INT 0
12149: PPUSH
12150: CALL_OW 324
12154: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12155: LD_EXP 19
12159: PUSH
12160: LD_EXP 56
12164: AND
12165: IFFALSE 12185
12167: GO 12169
12169: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12170: LD_INT 19
12172: PPUSH
12173: LD_OWVAR 2
12177: PPUSH
12178: LD_INT 0
12180: PPUSH
12181: CALL_OW 324
12185: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12186: LD_EXP 19
12190: PUSH
12191: LD_EXP 28
12195: AND
12196: IFFALSE 12298
12198: GO 12200
12200: DISABLE
12201: LD_INT 0
12203: PPUSH
12204: PPUSH
// begin enable ;
12205: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12206: LD_ADDR_VAR 0 2
12210: PUSH
12211: LD_INT 22
12213: PUSH
12214: LD_OWVAR 2
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: LD_INT 34
12228: PUSH
12229: LD_INT 11
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 34
12238: PUSH
12239: LD_INT 30
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: ST_TO_ADDR
// if not tmp then
12260: LD_VAR 0 2
12264: NOT
12265: IFFALSE 12269
// exit ;
12267: GO 12298
// for i in tmp do
12269: LD_ADDR_VAR 0 1
12273: PUSH
12274: LD_VAR 0 2
12278: PUSH
12279: FOR_IN
12280: IFFALSE 12296
// begin SetLives ( i , 0 ) ;
12282: LD_VAR 0 1
12286: PPUSH
12287: LD_INT 0
12289: PPUSH
12290: CALL_OW 234
// end ;
12294: GO 12279
12296: POP
12297: POP
// end ;
12298: PPOPN 2
12300: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12301: LD_EXP 19
12305: PUSH
12306: LD_EXP 29
12310: AND
12311: IFFALSE 12331
12313: GO 12315
12315: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12316: LD_INT 32
12318: PPUSH
12319: LD_OWVAR 2
12323: PPUSH
12324: LD_INT 0
12326: PPUSH
12327: CALL_OW 324
12331: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12332: LD_EXP 19
12336: PUSH
12337: LD_EXP 30
12341: AND
12342: IFFALSE 12523
12344: GO 12346
12346: DISABLE
12347: LD_INT 0
12349: PPUSH
12350: PPUSH
12351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12352: LD_ADDR_VAR 0 2
12356: PUSH
12357: LD_INT 22
12359: PUSH
12360: LD_OWVAR 2
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 33
12371: PUSH
12372: LD_INT 3
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 69
12387: ST_TO_ADDR
// if not tmp then
12388: LD_VAR 0 2
12392: NOT
12393: IFFALSE 12397
// exit ;
12395: GO 12523
// side := 0 ;
12397: LD_ADDR_VAR 0 3
12401: PUSH
12402: LD_INT 0
12404: ST_TO_ADDR
// for i := 1 to 8 do
12405: LD_ADDR_VAR 0 1
12409: PUSH
12410: DOUBLE
12411: LD_INT 1
12413: DEC
12414: ST_TO_ADDR
12415: LD_INT 8
12417: PUSH
12418: FOR_TO
12419: IFFALSE 12467
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12421: LD_OWVAR 2
12425: PUSH
12426: LD_VAR 0 1
12430: NONEQUAL
12431: PUSH
12432: LD_OWVAR 2
12436: PPUSH
12437: LD_VAR 0 1
12441: PPUSH
12442: CALL_OW 81
12446: PUSH
12447: LD_INT 2
12449: EQUAL
12450: AND
12451: IFFALSE 12465
// begin side := i ;
12453: LD_ADDR_VAR 0 3
12457: PUSH
12458: LD_VAR 0 1
12462: ST_TO_ADDR
// break ;
12463: GO 12467
// end ;
12465: GO 12418
12467: POP
12468: POP
// if not side then
12469: LD_VAR 0 3
12473: NOT
12474: IFFALSE 12478
// exit ;
12476: GO 12523
// for i := 1 to tmp do
12478: LD_ADDR_VAR 0 1
12482: PUSH
12483: DOUBLE
12484: LD_INT 1
12486: DEC
12487: ST_TO_ADDR
12488: LD_VAR 0 2
12492: PUSH
12493: FOR_TO
12494: IFFALSE 12521
// if Prob ( 30 ) then
12496: LD_INT 30
12498: PPUSH
12499: CALL_OW 13
12503: IFFALSE 12519
// SetSide ( i , side ) ;
12505: LD_VAR 0 1
12509: PPUSH
12510: LD_VAR 0 3
12514: PPUSH
12515: CALL_OW 235
12519: GO 12493
12521: POP
12522: POP
// end ;
12523: PPOPN 3
12525: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12526: LD_EXP 19
12530: PUSH
12531: LD_EXP 32
12535: AND
12536: IFFALSE 12655
12538: GO 12540
12540: DISABLE
12541: LD_INT 0
12543: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12544: LD_ADDR_VAR 0 1
12548: PUSH
12549: LD_INT 22
12551: PUSH
12552: LD_OWVAR 2
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 21
12563: PUSH
12564: LD_INT 1
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: LD_INT 3
12573: PUSH
12574: LD_INT 23
12576: PUSH
12577: LD_INT 0
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: LIST
12592: PPUSH
12593: CALL_OW 69
12597: PUSH
12598: FOR_IN
12599: IFFALSE 12653
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12601: LD_VAR 0 1
12605: PPUSH
12606: CALL_OW 257
12610: PUSH
12611: LD_INT 1
12613: PUSH
12614: LD_INT 2
12616: PUSH
12617: LD_INT 3
12619: PUSH
12620: LD_INT 4
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: IN
12629: IFFALSE 12651
// SetClass ( un , rand ( 1 , 4 ) ) ;
12631: LD_VAR 0 1
12635: PPUSH
12636: LD_INT 1
12638: PPUSH
12639: LD_INT 4
12641: PPUSH
12642: CALL_OW 12
12646: PPUSH
12647: CALL_OW 336
12651: GO 12598
12653: POP
12654: POP
// end ;
12655: PPOPN 1
12657: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12658: LD_EXP 19
12662: PUSH
12663: LD_EXP 31
12667: AND
12668: IFFALSE 12747
12670: GO 12672
12672: DISABLE
12673: LD_INT 0
12675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12676: LD_ADDR_VAR 0 1
12680: PUSH
12681: LD_INT 22
12683: PUSH
12684: LD_OWVAR 2
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: LD_INT 21
12695: PUSH
12696: LD_INT 3
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PPUSH
12707: CALL_OW 69
12711: ST_TO_ADDR
// if not tmp then
12712: LD_VAR 0 1
12716: NOT
12717: IFFALSE 12721
// exit ;
12719: GO 12747
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12721: LD_VAR 0 1
12725: PUSH
12726: LD_INT 1
12728: PPUSH
12729: LD_VAR 0 1
12733: PPUSH
12734: CALL_OW 12
12738: ARRAY
12739: PPUSH
12740: LD_INT 100
12742: PPUSH
12743: CALL_OW 234
// end ;
12747: PPOPN 1
12749: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12750: LD_EXP 19
12754: PUSH
12755: LD_EXP 33
12759: AND
12760: IFFALSE 12858
12762: GO 12764
12764: DISABLE
12765: LD_INT 0
12767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12768: LD_ADDR_VAR 0 1
12772: PUSH
12773: LD_INT 22
12775: PUSH
12776: LD_OWVAR 2
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 21
12787: PUSH
12788: LD_INT 1
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PPUSH
12799: CALL_OW 69
12803: ST_TO_ADDR
// if not tmp then
12804: LD_VAR 0 1
12808: NOT
12809: IFFALSE 12813
// exit ;
12811: GO 12858
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12813: LD_VAR 0 1
12817: PUSH
12818: LD_INT 1
12820: PPUSH
12821: LD_VAR 0 1
12825: PPUSH
12826: CALL_OW 12
12830: ARRAY
12831: PPUSH
12832: LD_INT 1
12834: PPUSH
12835: LD_INT 4
12837: PPUSH
12838: CALL_OW 12
12842: PPUSH
12843: LD_INT 3000
12845: PPUSH
12846: LD_INT 9000
12848: PPUSH
12849: CALL_OW 12
12853: PPUSH
12854: CALL_OW 492
// end ;
12858: PPOPN 1
12860: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12861: LD_EXP 19
12865: PUSH
12866: LD_EXP 34
12870: AND
12871: IFFALSE 12891
12873: GO 12875
12875: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12876: LD_INT 1
12878: PPUSH
12879: LD_OWVAR 2
12883: PPUSH
12884: LD_INT 0
12886: PPUSH
12887: CALL_OW 324
12891: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12892: LD_EXP 19
12896: PUSH
12897: LD_EXP 35
12901: AND
12902: IFFALSE 12985
12904: GO 12906
12906: DISABLE
12907: LD_INT 0
12909: PPUSH
12910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12911: LD_ADDR_VAR 0 2
12915: PUSH
12916: LD_INT 22
12918: PUSH
12919: LD_OWVAR 2
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 21
12930: PUSH
12931: LD_INT 3
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PPUSH
12942: CALL_OW 69
12946: ST_TO_ADDR
// if not tmp then
12947: LD_VAR 0 2
12951: NOT
12952: IFFALSE 12956
// exit ;
12954: GO 12985
// for i in tmp do
12956: LD_ADDR_VAR 0 1
12960: PUSH
12961: LD_VAR 0 2
12965: PUSH
12966: FOR_IN
12967: IFFALSE 12983
// SetBLevel ( i , 10 ) ;
12969: LD_VAR 0 1
12973: PPUSH
12974: LD_INT 10
12976: PPUSH
12977: CALL_OW 241
12981: GO 12966
12983: POP
12984: POP
// end ;
12985: PPOPN 2
12987: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12988: LD_EXP 19
12992: PUSH
12993: LD_EXP 36
12997: AND
12998: IFFALSE 13109
13000: GO 13002
13002: DISABLE
13003: LD_INT 0
13005: PPUSH
13006: PPUSH
13007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13008: LD_ADDR_VAR 0 3
13012: PUSH
13013: LD_INT 22
13015: PUSH
13016: LD_OWVAR 2
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 25
13027: PUSH
13028: LD_INT 1
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PPUSH
13039: CALL_OW 69
13043: ST_TO_ADDR
// if not tmp then
13044: LD_VAR 0 3
13048: NOT
13049: IFFALSE 13053
// exit ;
13051: GO 13109
// un := tmp [ rand ( 1 , tmp ) ] ;
13053: LD_ADDR_VAR 0 2
13057: PUSH
13058: LD_VAR 0 3
13062: PUSH
13063: LD_INT 1
13065: PPUSH
13066: LD_VAR 0 3
13070: PPUSH
13071: CALL_OW 12
13075: ARRAY
13076: ST_TO_ADDR
// if Crawls ( un ) then
13077: LD_VAR 0 2
13081: PPUSH
13082: CALL_OW 318
13086: IFFALSE 13097
// ComWalk ( un ) ;
13088: LD_VAR 0 2
13092: PPUSH
13093: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13097: LD_VAR 0 2
13101: PPUSH
13102: LD_INT 5
13104: PPUSH
13105: CALL_OW 336
// end ;
13109: PPOPN 3
13111: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13112: LD_EXP 19
13116: PUSH
13117: LD_EXP 37
13121: AND
13122: PUSH
13123: LD_OWVAR 67
13127: PUSH
13128: LD_INT 3
13130: LESS
13131: AND
13132: IFFALSE 13151
13134: GO 13136
13136: DISABLE
// Difficulty := Difficulty + 1 ;
13137: LD_ADDR_OWVAR 67
13141: PUSH
13142: LD_OWVAR 67
13146: PUSH
13147: LD_INT 1
13149: PLUS
13150: ST_TO_ADDR
13151: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13152: LD_EXP 19
13156: PUSH
13157: LD_EXP 38
13161: AND
13162: IFFALSE 13265
13164: GO 13166
13166: DISABLE
13167: LD_INT 0
13169: PPUSH
// begin for i := 1 to 5 do
13170: LD_ADDR_VAR 0 1
13174: PUSH
13175: DOUBLE
13176: LD_INT 1
13178: DEC
13179: ST_TO_ADDR
13180: LD_INT 5
13182: PUSH
13183: FOR_TO
13184: IFFALSE 13263
// begin uc_nation := nation_nature ;
13186: LD_ADDR_OWVAR 21
13190: PUSH
13191: LD_INT 0
13193: ST_TO_ADDR
// uc_side := 0 ;
13194: LD_ADDR_OWVAR 20
13198: PUSH
13199: LD_INT 0
13201: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13202: LD_ADDR_OWVAR 29
13206: PUSH
13207: LD_INT 12
13209: PUSH
13210: LD_INT 12
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: ST_TO_ADDR
// hc_agressivity := 20 ;
13217: LD_ADDR_OWVAR 35
13221: PUSH
13222: LD_INT 20
13224: ST_TO_ADDR
// hc_class := class_tiger ;
13225: LD_ADDR_OWVAR 28
13229: PUSH
13230: LD_INT 14
13232: ST_TO_ADDR
// hc_gallery :=  ;
13233: LD_ADDR_OWVAR 33
13237: PUSH
13238: LD_STRING 
13240: ST_TO_ADDR
// hc_name :=  ;
13241: LD_ADDR_OWVAR 26
13245: PUSH
13246: LD_STRING 
13248: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13249: CALL_OW 44
13253: PPUSH
13254: LD_INT 0
13256: PPUSH
13257: CALL_OW 51
// end ;
13261: GO 13183
13263: POP
13264: POP
// end ;
13265: PPOPN 1
13267: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13268: LD_EXP 19
13272: PUSH
13273: LD_EXP 39
13277: AND
13278: IFFALSE 13287
13280: GO 13282
13282: DISABLE
// StreamSibBomb ;
13283: CALL 13288 0 0
13287: END
// export function StreamSibBomb ; var i , x , y ; begin
13288: LD_INT 0
13290: PPUSH
13291: PPUSH
13292: PPUSH
13293: PPUSH
// result := false ;
13294: LD_ADDR_VAR 0 1
13298: PUSH
13299: LD_INT 0
13301: ST_TO_ADDR
// for i := 1 to 16 do
13302: LD_ADDR_VAR 0 2
13306: PUSH
13307: DOUBLE
13308: LD_INT 1
13310: DEC
13311: ST_TO_ADDR
13312: LD_INT 16
13314: PUSH
13315: FOR_TO
13316: IFFALSE 13515
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13318: LD_ADDR_VAR 0 3
13322: PUSH
13323: LD_INT 10
13325: PUSH
13326: LD_INT 20
13328: PUSH
13329: LD_INT 30
13331: PUSH
13332: LD_INT 40
13334: PUSH
13335: LD_INT 50
13337: PUSH
13338: LD_INT 60
13340: PUSH
13341: LD_INT 70
13343: PUSH
13344: LD_INT 80
13346: PUSH
13347: LD_INT 90
13349: PUSH
13350: LD_INT 100
13352: PUSH
13353: LD_INT 110
13355: PUSH
13356: LD_INT 120
13358: PUSH
13359: LD_INT 130
13361: PUSH
13362: LD_INT 140
13364: PUSH
13365: LD_INT 150
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 1
13387: PPUSH
13388: LD_INT 15
13390: PPUSH
13391: CALL_OW 12
13395: ARRAY
13396: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13397: LD_ADDR_VAR 0 4
13401: PUSH
13402: LD_INT 10
13404: PUSH
13405: LD_INT 20
13407: PUSH
13408: LD_INT 30
13410: PUSH
13411: LD_INT 40
13413: PUSH
13414: LD_INT 50
13416: PUSH
13417: LD_INT 60
13419: PUSH
13420: LD_INT 70
13422: PUSH
13423: LD_INT 80
13425: PUSH
13426: LD_INT 90
13428: PUSH
13429: LD_INT 100
13431: PUSH
13432: LD_INT 110
13434: PUSH
13435: LD_INT 120
13437: PUSH
13438: LD_INT 130
13440: PUSH
13441: LD_INT 140
13443: PUSH
13444: LD_INT 150
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 1
13466: PPUSH
13467: LD_INT 15
13469: PPUSH
13470: CALL_OW 12
13474: ARRAY
13475: ST_TO_ADDR
// if ValidHex ( x , y ) then
13476: LD_VAR 0 3
13480: PPUSH
13481: LD_VAR 0 4
13485: PPUSH
13486: CALL_OW 488
13490: IFFALSE 13513
// begin result := [ x , y ] ;
13492: LD_ADDR_VAR 0 1
13496: PUSH
13497: LD_VAR 0 3
13501: PUSH
13502: LD_VAR 0 4
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: ST_TO_ADDR
// break ;
13511: GO 13515
// end ; end ;
13513: GO 13315
13515: POP
13516: POP
// if result then
13517: LD_VAR 0 1
13521: IFFALSE 13581
// begin ToLua ( playSibBomb() ) ;
13523: LD_STRING playSibBomb()
13525: PPUSH
13526: CALL_OW 559
// wait ( 0 0$14 ) ;
13530: LD_INT 490
13532: PPUSH
13533: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13537: LD_VAR 0 1
13541: PUSH
13542: LD_INT 1
13544: ARRAY
13545: PPUSH
13546: LD_VAR 0 1
13550: PUSH
13551: LD_INT 2
13553: ARRAY
13554: PPUSH
13555: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13559: LD_VAR 0 1
13563: PUSH
13564: LD_INT 1
13566: ARRAY
13567: PPUSH
13568: LD_VAR 0 1
13572: PUSH
13573: LD_INT 2
13575: ARRAY
13576: PPUSH
13577: CALL_OW 429
// end ; end ;
13581: LD_VAR 0 1
13585: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13586: LD_EXP 19
13590: PUSH
13591: LD_EXP 41
13595: AND
13596: IFFALSE 13608
13598: GO 13600
13600: DISABLE
// YouLost (  ) ;
13601: LD_STRING 
13603: PPUSH
13604: CALL_OW 104
13608: END
// every 0 0$1 trigger StreamModeActive and sFog do
13609: LD_EXP 19
13613: PUSH
13614: LD_EXP 40
13618: AND
13619: IFFALSE 13633
13621: GO 13623
13623: DISABLE
// FogOff ( your_side ) ;
13624: LD_OWVAR 2
13628: PPUSH
13629: CALL_OW 344
13633: END
// every 0 0$1 trigger StreamModeActive and sSun do
13634: LD_EXP 19
13638: PUSH
13639: LD_EXP 42
13643: AND
13644: IFFALSE 13672
13646: GO 13648
13648: DISABLE
// begin solar_recharge_percent := 0 ;
13649: LD_ADDR_OWVAR 79
13653: PUSH
13654: LD_INT 0
13656: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13657: LD_INT 10500
13659: PPUSH
13660: CALL_OW 67
// solar_recharge_percent := 100 ;
13664: LD_ADDR_OWVAR 79
13668: PUSH
13669: LD_INT 100
13671: ST_TO_ADDR
// end ;
13672: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13673: LD_EXP 19
13677: PUSH
13678: LD_EXP 43
13682: AND
13683: IFFALSE 13922
13685: GO 13687
13687: DISABLE
13688: LD_INT 0
13690: PPUSH
13691: PPUSH
13692: PPUSH
// begin tmp := [ ] ;
13693: LD_ADDR_VAR 0 3
13697: PUSH
13698: EMPTY
13699: ST_TO_ADDR
// for i := 1 to 6 do
13700: LD_ADDR_VAR 0 1
13704: PUSH
13705: DOUBLE
13706: LD_INT 1
13708: DEC
13709: ST_TO_ADDR
13710: LD_INT 6
13712: PUSH
13713: FOR_TO
13714: IFFALSE 13819
// begin uc_nation := nation_nature ;
13716: LD_ADDR_OWVAR 21
13720: PUSH
13721: LD_INT 0
13723: ST_TO_ADDR
// uc_side := 0 ;
13724: LD_ADDR_OWVAR 20
13728: PUSH
13729: LD_INT 0
13731: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13732: LD_ADDR_OWVAR 29
13736: PUSH
13737: LD_INT 12
13739: PUSH
13740: LD_INT 12
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: ST_TO_ADDR
// hc_agressivity := 20 ;
13747: LD_ADDR_OWVAR 35
13751: PUSH
13752: LD_INT 20
13754: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13755: LD_ADDR_OWVAR 28
13759: PUSH
13760: LD_INT 17
13762: ST_TO_ADDR
// hc_gallery :=  ;
13763: LD_ADDR_OWVAR 33
13767: PUSH
13768: LD_STRING 
13770: ST_TO_ADDR
// hc_name :=  ;
13771: LD_ADDR_OWVAR 26
13775: PUSH
13776: LD_STRING 
13778: ST_TO_ADDR
// un := CreateHuman ;
13779: LD_ADDR_VAR 0 2
13783: PUSH
13784: CALL_OW 44
13788: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13789: LD_VAR 0 2
13793: PPUSH
13794: LD_INT 1
13796: PPUSH
13797: CALL_OW 51
// tmp := tmp ^ un ;
13801: LD_ADDR_VAR 0 3
13805: PUSH
13806: LD_VAR 0 3
13810: PUSH
13811: LD_VAR 0 2
13815: ADD
13816: ST_TO_ADDR
// end ;
13817: GO 13713
13819: POP
13820: POP
// repeat wait ( 0 0$1 ) ;
13821: LD_INT 35
13823: PPUSH
13824: CALL_OW 67
// for un in tmp do
13828: LD_ADDR_VAR 0 2
13832: PUSH
13833: LD_VAR 0 3
13837: PUSH
13838: FOR_IN
13839: IFFALSE 13913
// begin if IsDead ( un ) then
13841: LD_VAR 0 2
13845: PPUSH
13846: CALL_OW 301
13850: IFFALSE 13870
// begin tmp := tmp diff un ;
13852: LD_ADDR_VAR 0 3
13856: PUSH
13857: LD_VAR 0 3
13861: PUSH
13862: LD_VAR 0 2
13866: DIFF
13867: ST_TO_ADDR
// continue ;
13868: GO 13838
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13870: LD_VAR 0 2
13874: PPUSH
13875: LD_INT 3
13877: PUSH
13878: LD_INT 22
13880: PUSH
13881: LD_INT 0
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PPUSH
13892: CALL_OW 69
13896: PPUSH
13897: LD_VAR 0 2
13901: PPUSH
13902: CALL_OW 74
13906: PPUSH
13907: CALL_OW 115
// end ;
13911: GO 13838
13913: POP
13914: POP
// until not tmp ;
13915: LD_VAR 0 3
13919: NOT
13920: IFFALSE 13821
// end ;
13922: PPOPN 3
13924: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13925: LD_EXP 19
13929: PUSH
13930: LD_EXP 44
13934: AND
13935: IFFALSE 13989
13937: GO 13939
13939: DISABLE
// begin ToLua ( displayTroll(); ) ;
13940: LD_STRING displayTroll();
13942: PPUSH
13943: CALL_OW 559
// wait ( 3 3$00 ) ;
13947: LD_INT 6300
13949: PPUSH
13950: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13954: LD_STRING hideTroll();
13956: PPUSH
13957: CALL_OW 559
// wait ( 1 1$00 ) ;
13961: LD_INT 2100
13963: PPUSH
13964: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13968: LD_STRING displayTroll();
13970: PPUSH
13971: CALL_OW 559
// wait ( 1 1$00 ) ;
13975: LD_INT 2100
13977: PPUSH
13978: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13982: LD_STRING hideTroll();
13984: PPUSH
13985: CALL_OW 559
// end ;
13989: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13990: LD_EXP 19
13994: PUSH
13995: LD_EXP 45
13999: AND
14000: IFFALSE 14063
14002: GO 14004
14004: DISABLE
14005: LD_INT 0
14007: PPUSH
// begin p := 0 ;
14008: LD_ADDR_VAR 0 1
14012: PUSH
14013: LD_INT 0
14015: ST_TO_ADDR
// repeat game_speed := 1 ;
14016: LD_ADDR_OWVAR 65
14020: PUSH
14021: LD_INT 1
14023: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14024: LD_INT 35
14026: PPUSH
14027: CALL_OW 67
// p := p + 1 ;
14031: LD_ADDR_VAR 0 1
14035: PUSH
14036: LD_VAR 0 1
14040: PUSH
14041: LD_INT 1
14043: PLUS
14044: ST_TO_ADDR
// until p >= 60 ;
14045: LD_VAR 0 1
14049: PUSH
14050: LD_INT 60
14052: GREATEREQUAL
14053: IFFALSE 14016
// game_speed := 4 ;
14055: LD_ADDR_OWVAR 65
14059: PUSH
14060: LD_INT 4
14062: ST_TO_ADDR
// end ;
14063: PPOPN 1
14065: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14066: LD_EXP 19
14070: PUSH
14071: LD_EXP 46
14075: AND
14076: IFFALSE 14222
14078: GO 14080
14080: DISABLE
14081: LD_INT 0
14083: PPUSH
14084: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14085: LD_ADDR_VAR 0 1
14089: PUSH
14090: LD_INT 22
14092: PUSH
14093: LD_OWVAR 2
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: LD_INT 2
14104: PUSH
14105: LD_INT 30
14107: PUSH
14108: LD_INT 0
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 30
14117: PUSH
14118: LD_INT 1
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: LIST
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PPUSH
14134: CALL_OW 69
14138: ST_TO_ADDR
// if not depot then
14139: LD_VAR 0 1
14143: NOT
14144: IFFALSE 14148
// exit ;
14146: GO 14222
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14148: LD_ADDR_VAR 0 2
14152: PUSH
14153: LD_VAR 0 1
14157: PUSH
14158: LD_INT 1
14160: PPUSH
14161: LD_VAR 0 1
14165: PPUSH
14166: CALL_OW 12
14170: ARRAY
14171: PPUSH
14172: CALL_OW 274
14176: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14177: LD_VAR 0 2
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: LD_INT 0
14187: PPUSH
14188: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14192: LD_VAR 0 2
14196: PPUSH
14197: LD_INT 2
14199: PPUSH
14200: LD_INT 0
14202: PPUSH
14203: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14207: LD_VAR 0 2
14211: PPUSH
14212: LD_INT 3
14214: PPUSH
14215: LD_INT 0
14217: PPUSH
14218: CALL_OW 277
// end ;
14222: PPOPN 2
14224: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14225: LD_EXP 19
14229: PUSH
14230: LD_EXP 47
14234: AND
14235: IFFALSE 14332
14237: GO 14239
14239: DISABLE
14240: LD_INT 0
14242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14243: LD_ADDR_VAR 0 1
14247: PUSH
14248: LD_INT 22
14250: PUSH
14251: LD_OWVAR 2
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 21
14262: PUSH
14263: LD_INT 1
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 23
14275: PUSH
14276: LD_INT 0
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: LIST
14291: PPUSH
14292: CALL_OW 69
14296: ST_TO_ADDR
// if not tmp then
14297: LD_VAR 0 1
14301: NOT
14302: IFFALSE 14306
// exit ;
14304: GO 14332
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14306: LD_VAR 0 1
14310: PUSH
14311: LD_INT 1
14313: PPUSH
14314: LD_VAR 0 1
14318: PPUSH
14319: CALL_OW 12
14323: ARRAY
14324: PPUSH
14325: LD_INT 200
14327: PPUSH
14328: CALL_OW 234
// end ;
14332: PPOPN 1
14334: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14335: LD_EXP 19
14339: PUSH
14340: LD_EXP 48
14344: AND
14345: IFFALSE 14424
14347: GO 14349
14349: DISABLE
14350: LD_INT 0
14352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14353: LD_ADDR_VAR 0 1
14357: PUSH
14358: LD_INT 22
14360: PUSH
14361: LD_OWVAR 2
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 21
14372: PUSH
14373: LD_INT 2
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PPUSH
14384: CALL_OW 69
14388: ST_TO_ADDR
// if not tmp then
14389: LD_VAR 0 1
14393: NOT
14394: IFFALSE 14398
// exit ;
14396: GO 14424
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14398: LD_VAR 0 1
14402: PUSH
14403: LD_INT 1
14405: PPUSH
14406: LD_VAR 0 1
14410: PPUSH
14411: CALL_OW 12
14415: ARRAY
14416: PPUSH
14417: LD_INT 60
14419: PPUSH
14420: CALL_OW 234
// end ;
14424: PPOPN 1
14426: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14427: LD_EXP 19
14431: PUSH
14432: LD_EXP 49
14436: AND
14437: IFFALSE 14536
14439: GO 14441
14441: DISABLE
14442: LD_INT 0
14444: PPUSH
14445: PPUSH
// begin enable ;
14446: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14447: LD_ADDR_VAR 0 1
14451: PUSH
14452: LD_INT 22
14454: PUSH
14455: LD_OWVAR 2
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 61
14466: PUSH
14467: EMPTY
14468: LIST
14469: PUSH
14470: LD_INT 33
14472: PUSH
14473: LD_INT 2
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: PPUSH
14485: CALL_OW 69
14489: ST_TO_ADDR
// if not tmp then
14490: LD_VAR 0 1
14494: NOT
14495: IFFALSE 14499
// exit ;
14497: GO 14536
// for i in tmp do
14499: LD_ADDR_VAR 0 2
14503: PUSH
14504: LD_VAR 0 1
14508: PUSH
14509: FOR_IN
14510: IFFALSE 14534
// if IsControledBy ( i ) then
14512: LD_VAR 0 2
14516: PPUSH
14517: CALL_OW 312
14521: IFFALSE 14532
// ComUnlink ( i ) ;
14523: LD_VAR 0 2
14527: PPUSH
14528: CALL_OW 136
14532: GO 14509
14534: POP
14535: POP
// end ;
14536: PPOPN 2
14538: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14539: LD_EXP 19
14543: PUSH
14544: LD_EXP 50
14548: AND
14549: IFFALSE 14683
14551: GO 14553
14553: DISABLE
14554: LD_INT 0
14556: PPUSH
14557: PPUSH
// begin ToLua ( displayPowell(); ) ;
14558: LD_STRING displayPowell();
14560: PPUSH
14561: CALL_OW 559
// uc_side := 0 ;
14565: LD_ADDR_OWVAR 20
14569: PUSH
14570: LD_INT 0
14572: ST_TO_ADDR
// uc_nation := 2 ;
14573: LD_ADDR_OWVAR 21
14577: PUSH
14578: LD_INT 2
14580: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14581: LD_ADDR_OWVAR 37
14585: PUSH
14586: LD_INT 14
14588: ST_TO_ADDR
// vc_engine := engine_siberite ;
14589: LD_ADDR_OWVAR 39
14593: PUSH
14594: LD_INT 3
14596: ST_TO_ADDR
// vc_control := control_apeman ;
14597: LD_ADDR_OWVAR 38
14601: PUSH
14602: LD_INT 5
14604: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14605: LD_ADDR_OWVAR 40
14609: PUSH
14610: LD_INT 29
14612: ST_TO_ADDR
// un := CreateVehicle ;
14613: LD_ADDR_VAR 0 2
14617: PUSH
14618: CALL_OW 45
14622: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14623: LD_VAR 0 2
14627: PPUSH
14628: LD_INT 1
14630: PPUSH
14631: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14635: LD_INT 35
14637: PPUSH
14638: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14642: LD_VAR 0 2
14646: PPUSH
14647: LD_OWVAR 3
14651: PUSH
14652: LD_VAR 0 2
14656: DIFF
14657: PPUSH
14658: LD_VAR 0 2
14662: PPUSH
14663: CALL_OW 74
14667: PPUSH
14668: CALL_OW 115
// until IsOk ( un ) ;
14672: LD_VAR 0 2
14676: PPUSH
14677: CALL_OW 302
14681: IFFALSE 14635
// end ;
14683: PPOPN 2
14685: END
// every 0 0$1 trigger StreamModeActive and sStu do
14686: LD_EXP 19
14690: PUSH
14691: LD_EXP 58
14695: AND
14696: IFFALSE 14708
14698: GO 14700
14700: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14701: LD_STRING displayStucuk();
14703: PPUSH
14704: CALL_OW 559
// end ;
14708: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14709: LD_EXP 19
14713: PUSH
14714: LD_EXP 51
14718: AND
14719: IFFALSE 14860
14721: GO 14723
14723: DISABLE
14724: LD_INT 0
14726: PPUSH
14727: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14728: LD_ADDR_VAR 0 2
14732: PUSH
14733: LD_INT 22
14735: PUSH
14736: LD_OWVAR 2
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 21
14747: PUSH
14748: LD_INT 1
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PPUSH
14759: CALL_OW 69
14763: ST_TO_ADDR
// if not tmp then
14764: LD_VAR 0 2
14768: NOT
14769: IFFALSE 14773
// exit ;
14771: GO 14860
// un := tmp [ rand ( 1 , tmp ) ] ;
14773: LD_ADDR_VAR 0 1
14777: PUSH
14778: LD_VAR 0 2
14782: PUSH
14783: LD_INT 1
14785: PPUSH
14786: LD_VAR 0 2
14790: PPUSH
14791: CALL_OW 12
14795: ARRAY
14796: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14797: LD_VAR 0 1
14801: PPUSH
14802: LD_INT 0
14804: PPUSH
14805: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14809: LD_VAR 0 1
14813: PPUSH
14814: LD_OWVAR 3
14818: PUSH
14819: LD_VAR 0 1
14823: DIFF
14824: PPUSH
14825: LD_VAR 0 1
14829: PPUSH
14830: CALL_OW 74
14834: PPUSH
14835: CALL_OW 115
// wait ( 0 0$20 ) ;
14839: LD_INT 700
14841: PPUSH
14842: CALL_OW 67
// SetSide ( un , your_side ) ;
14846: LD_VAR 0 1
14850: PPUSH
14851: LD_OWVAR 2
14855: PPUSH
14856: CALL_OW 235
// end ;
14860: PPOPN 2
14862: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14863: LD_EXP 19
14867: PUSH
14868: LD_EXP 52
14872: AND
14873: IFFALSE 14979
14875: GO 14877
14877: DISABLE
14878: LD_INT 0
14880: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_INT 22
14888: PUSH
14889: LD_OWVAR 2
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: LD_INT 2
14900: PUSH
14901: LD_INT 30
14903: PUSH
14904: LD_INT 0
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 30
14913: PUSH
14914: LD_INT 1
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 69
14934: ST_TO_ADDR
// if not depot then
14935: LD_VAR 0 1
14939: NOT
14940: IFFALSE 14944
// exit ;
14942: GO 14979
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14944: LD_VAR 0 1
14948: PUSH
14949: LD_INT 1
14951: ARRAY
14952: PPUSH
14953: CALL_OW 250
14957: PPUSH
14958: LD_VAR 0 1
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: PPUSH
14967: CALL_OW 251
14971: PPUSH
14972: LD_INT 70
14974: PPUSH
14975: CALL_OW 495
// end ;
14979: PPOPN 1
14981: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14982: LD_EXP 19
14986: PUSH
14987: LD_EXP 53
14991: AND
14992: IFFALSE 15203
14994: GO 14996
14996: DISABLE
14997: LD_INT 0
14999: PPUSH
15000: PPUSH
15001: PPUSH
15002: PPUSH
15003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15004: LD_ADDR_VAR 0 5
15008: PUSH
15009: LD_INT 22
15011: PUSH
15012: LD_OWVAR 2
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 21
15023: PUSH
15024: LD_INT 1
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 69
15039: ST_TO_ADDR
// if not tmp then
15040: LD_VAR 0 5
15044: NOT
15045: IFFALSE 15049
// exit ;
15047: GO 15203
// for i in tmp do
15049: LD_ADDR_VAR 0 1
15053: PUSH
15054: LD_VAR 0 5
15058: PUSH
15059: FOR_IN
15060: IFFALSE 15201
// begin d := rand ( 0 , 5 ) ;
15062: LD_ADDR_VAR 0 4
15066: PUSH
15067: LD_INT 0
15069: PPUSH
15070: LD_INT 5
15072: PPUSH
15073: CALL_OW 12
15077: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15078: LD_ADDR_VAR 0 2
15082: PUSH
15083: LD_VAR 0 1
15087: PPUSH
15088: CALL_OW 250
15092: PPUSH
15093: LD_VAR 0 4
15097: PPUSH
15098: LD_INT 3
15100: PPUSH
15101: LD_INT 12
15103: PPUSH
15104: CALL_OW 12
15108: PPUSH
15109: CALL_OW 272
15113: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15114: LD_ADDR_VAR 0 3
15118: PUSH
15119: LD_VAR 0 1
15123: PPUSH
15124: CALL_OW 251
15128: PPUSH
15129: LD_VAR 0 4
15133: PPUSH
15134: LD_INT 3
15136: PPUSH
15137: LD_INT 12
15139: PPUSH
15140: CALL_OW 12
15144: PPUSH
15145: CALL_OW 273
15149: ST_TO_ADDR
// if ValidHex ( x , y ) then
15150: LD_VAR 0 2
15154: PPUSH
15155: LD_VAR 0 3
15159: PPUSH
15160: CALL_OW 488
15164: IFFALSE 15199
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15166: LD_VAR 0 1
15170: PPUSH
15171: LD_VAR 0 2
15175: PPUSH
15176: LD_VAR 0 3
15180: PPUSH
15181: LD_INT 3
15183: PPUSH
15184: LD_INT 6
15186: PPUSH
15187: CALL_OW 12
15191: PPUSH
15192: LD_INT 1
15194: PPUSH
15195: CALL_OW 483
// end ;
15199: GO 15059
15201: POP
15202: POP
// end ;
15203: PPOPN 5
15205: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15206: LD_EXP 19
15210: PUSH
15211: LD_EXP 54
15215: AND
15216: IFFALSE 15310
15218: GO 15220
15220: DISABLE
15221: LD_INT 0
15223: PPUSH
15224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15225: LD_ADDR_VAR 0 2
15229: PUSH
15230: LD_INT 22
15232: PUSH
15233: LD_OWVAR 2
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: LD_INT 32
15244: PUSH
15245: LD_INT 1
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: LD_INT 21
15254: PUSH
15255: LD_INT 2
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: LIST
15266: PPUSH
15267: CALL_OW 69
15271: ST_TO_ADDR
// if not tmp then
15272: LD_VAR 0 2
15276: NOT
15277: IFFALSE 15281
// exit ;
15279: GO 15310
// for i in tmp do
15281: LD_ADDR_VAR 0 1
15285: PUSH
15286: LD_VAR 0 2
15290: PUSH
15291: FOR_IN
15292: IFFALSE 15308
// SetFuel ( i , 0 ) ;
15294: LD_VAR 0 1
15298: PPUSH
15299: LD_INT 0
15301: PPUSH
15302: CALL_OW 240
15306: GO 15291
15308: POP
15309: POP
// end ;
15310: PPOPN 2
15312: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15313: LD_EXP 19
15317: PUSH
15318: LD_EXP 55
15322: AND
15323: IFFALSE 15389
15325: GO 15327
15327: DISABLE
15328: LD_INT 0
15330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15331: LD_ADDR_VAR 0 1
15335: PUSH
15336: LD_INT 22
15338: PUSH
15339: LD_OWVAR 2
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 30
15350: PUSH
15351: LD_INT 29
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PPUSH
15362: CALL_OW 69
15366: ST_TO_ADDR
// if not tmp then
15367: LD_VAR 0 1
15371: NOT
15372: IFFALSE 15376
// exit ;
15374: GO 15389
// DestroyUnit ( tmp [ 1 ] ) ;
15376: LD_VAR 0 1
15380: PUSH
15381: LD_INT 1
15383: ARRAY
15384: PPUSH
15385: CALL_OW 65
// end ;
15389: PPOPN 1
15391: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15392: LD_EXP 19
15396: PUSH
15397: LD_EXP 57
15401: AND
15402: IFFALSE 15531
15404: GO 15406
15406: DISABLE
15407: LD_INT 0
15409: PPUSH
// begin uc_side := 0 ;
15410: LD_ADDR_OWVAR 20
15414: PUSH
15415: LD_INT 0
15417: ST_TO_ADDR
// uc_nation := nation_arabian ;
15418: LD_ADDR_OWVAR 21
15422: PUSH
15423: LD_INT 2
15425: ST_TO_ADDR
// hc_gallery :=  ;
15426: LD_ADDR_OWVAR 33
15430: PUSH
15431: LD_STRING 
15433: ST_TO_ADDR
// hc_name :=  ;
15434: LD_ADDR_OWVAR 26
15438: PUSH
15439: LD_STRING 
15441: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15442: LD_INT 1
15444: PPUSH
15445: LD_INT 11
15447: PPUSH
15448: LD_INT 10
15450: PPUSH
15451: CALL_OW 380
// un := CreateHuman ;
15455: LD_ADDR_VAR 0 1
15459: PUSH
15460: CALL_OW 44
15464: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15465: LD_VAR 0 1
15469: PPUSH
15470: LD_INT 1
15472: PPUSH
15473: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15477: LD_INT 35
15479: PPUSH
15480: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15484: LD_VAR 0 1
15488: PPUSH
15489: LD_INT 22
15491: PUSH
15492: LD_OWVAR 2
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PPUSH
15501: CALL_OW 69
15505: PPUSH
15506: LD_VAR 0 1
15510: PPUSH
15511: CALL_OW 74
15515: PPUSH
15516: CALL_OW 115
// until IsDead ( un ) ;
15520: LD_VAR 0 1
15524: PPUSH
15525: CALL_OW 301
15529: IFFALSE 15477
// end ;
15531: PPOPN 1
15533: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15534: LD_EXP 19
15538: PUSH
15539: LD_EXP 59
15543: AND
15544: IFFALSE 15556
15546: GO 15548
15548: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15549: LD_STRING earthquake(getX(game), 0, 32)
15551: PPUSH
15552: CALL_OW 559
15556: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15557: LD_EXP 19
15561: PUSH
15562: LD_EXP 60
15566: AND
15567: IFFALSE 15658
15569: GO 15571
15571: DISABLE
15572: LD_INT 0
15574: PPUSH
// begin enable ;
15575: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15576: LD_ADDR_VAR 0 1
15580: PUSH
15581: LD_INT 22
15583: PUSH
15584: LD_OWVAR 2
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 21
15595: PUSH
15596: LD_INT 2
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 33
15605: PUSH
15606: LD_INT 3
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: ST_TO_ADDR
// if not tmp then
15623: LD_VAR 0 1
15627: NOT
15628: IFFALSE 15632
// exit ;
15630: GO 15658
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15632: LD_VAR 0 1
15636: PUSH
15637: LD_INT 1
15639: PPUSH
15640: LD_VAR 0 1
15644: PPUSH
15645: CALL_OW 12
15649: ARRAY
15650: PPUSH
15651: LD_INT 1
15653: PPUSH
15654: CALL_OW 234
// end ;
15658: PPOPN 1
15660: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15661: LD_EXP 19
15665: PUSH
15666: LD_EXP 61
15670: AND
15671: IFFALSE 15812
15673: GO 15675
15675: DISABLE
15676: LD_INT 0
15678: PPUSH
15679: PPUSH
15680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15681: LD_ADDR_VAR 0 3
15685: PUSH
15686: LD_INT 22
15688: PUSH
15689: LD_OWVAR 2
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 25
15700: PUSH
15701: LD_INT 1
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PPUSH
15712: CALL_OW 69
15716: ST_TO_ADDR
// if not tmp then
15717: LD_VAR 0 3
15721: NOT
15722: IFFALSE 15726
// exit ;
15724: GO 15812
// un := tmp [ rand ( 1 , tmp ) ] ;
15726: LD_ADDR_VAR 0 2
15730: PUSH
15731: LD_VAR 0 3
15735: PUSH
15736: LD_INT 1
15738: PPUSH
15739: LD_VAR 0 3
15743: PPUSH
15744: CALL_OW 12
15748: ARRAY
15749: ST_TO_ADDR
// if Crawls ( un ) then
15750: LD_VAR 0 2
15754: PPUSH
15755: CALL_OW 318
15759: IFFALSE 15770
// ComWalk ( un ) ;
15761: LD_VAR 0 2
15765: PPUSH
15766: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15770: LD_VAR 0 2
15774: PPUSH
15775: LD_INT 9
15777: PPUSH
15778: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15782: LD_INT 28
15784: PPUSH
15785: LD_OWVAR 2
15789: PPUSH
15790: LD_INT 2
15792: PPUSH
15793: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15797: LD_INT 29
15799: PPUSH
15800: LD_OWVAR 2
15804: PPUSH
15805: LD_INT 2
15807: PPUSH
15808: CALL_OW 322
// end ;
15812: PPOPN 3
15814: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15815: LD_EXP 19
15819: PUSH
15820: LD_EXP 62
15824: AND
15825: IFFALSE 15936
15827: GO 15829
15829: DISABLE
15830: LD_INT 0
15832: PPUSH
15833: PPUSH
15834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15835: LD_ADDR_VAR 0 3
15839: PUSH
15840: LD_INT 22
15842: PUSH
15843: LD_OWVAR 2
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 25
15854: PUSH
15855: LD_INT 1
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PPUSH
15866: CALL_OW 69
15870: ST_TO_ADDR
// if not tmp then
15871: LD_VAR 0 3
15875: NOT
15876: IFFALSE 15880
// exit ;
15878: GO 15936
// un := tmp [ rand ( 1 , tmp ) ] ;
15880: LD_ADDR_VAR 0 2
15884: PUSH
15885: LD_VAR 0 3
15889: PUSH
15890: LD_INT 1
15892: PPUSH
15893: LD_VAR 0 3
15897: PPUSH
15898: CALL_OW 12
15902: ARRAY
15903: ST_TO_ADDR
// if Crawls ( un ) then
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL_OW 318
15913: IFFALSE 15924
// ComWalk ( un ) ;
15915: LD_VAR 0 2
15919: PPUSH
15920: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15924: LD_VAR 0 2
15928: PPUSH
15929: LD_INT 8
15931: PPUSH
15932: CALL_OW 336
// end ;
15936: PPOPN 3
15938: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15939: LD_EXP 19
15943: PUSH
15944: LD_EXP 63
15948: AND
15949: IFFALSE 16093
15951: GO 15953
15953: DISABLE
15954: LD_INT 0
15956: PPUSH
15957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15958: LD_ADDR_VAR 0 2
15962: PUSH
15963: LD_INT 22
15965: PUSH
15966: LD_OWVAR 2
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 21
15977: PUSH
15978: LD_INT 2
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 2
15987: PUSH
15988: LD_INT 34
15990: PUSH
15991: LD_INT 12
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: PUSH
15998: LD_INT 34
16000: PUSH
16001: LD_INT 51
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 34
16010: PUSH
16011: LD_INT 32
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: LIST
16028: PPUSH
16029: CALL_OW 69
16033: ST_TO_ADDR
// if not tmp then
16034: LD_VAR 0 2
16038: NOT
16039: IFFALSE 16043
// exit ;
16041: GO 16093
// for i in tmp do
16043: LD_ADDR_VAR 0 1
16047: PUSH
16048: LD_VAR 0 2
16052: PUSH
16053: FOR_IN
16054: IFFALSE 16091
// if GetCargo ( i , mat_artifact ) = 0 then
16056: LD_VAR 0 1
16060: PPUSH
16061: LD_INT 4
16063: PPUSH
16064: CALL_OW 289
16068: PUSH
16069: LD_INT 0
16071: EQUAL
16072: IFFALSE 16089
// SetCargo ( i , mat_siberit , 100 ) ;
16074: LD_VAR 0 1
16078: PPUSH
16079: LD_INT 3
16081: PPUSH
16082: LD_INT 100
16084: PPUSH
16085: CALL_OW 290
16089: GO 16053
16091: POP
16092: POP
// end ;
16093: PPOPN 2
16095: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16096: LD_EXP 19
16100: PUSH
16101: LD_EXP 64
16105: AND
16106: IFFALSE 16259
16108: GO 16110
16110: DISABLE
16111: LD_INT 0
16113: PPUSH
16114: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16115: LD_ADDR_VAR 0 2
16119: PUSH
16120: LD_INT 22
16122: PUSH
16123: LD_OWVAR 2
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PPUSH
16132: CALL_OW 69
16136: ST_TO_ADDR
// if not tmp then
16137: LD_VAR 0 2
16141: NOT
16142: IFFALSE 16146
// exit ;
16144: GO 16259
// for i := 1 to 2 do
16146: LD_ADDR_VAR 0 1
16150: PUSH
16151: DOUBLE
16152: LD_INT 1
16154: DEC
16155: ST_TO_ADDR
16156: LD_INT 2
16158: PUSH
16159: FOR_TO
16160: IFFALSE 16257
// begin uc_side := your_side ;
16162: LD_ADDR_OWVAR 20
16166: PUSH
16167: LD_OWVAR 2
16171: ST_TO_ADDR
// uc_nation := nation_american ;
16172: LD_ADDR_OWVAR 21
16176: PUSH
16177: LD_INT 1
16179: ST_TO_ADDR
// vc_chassis := us_morphling ;
16180: LD_ADDR_OWVAR 37
16184: PUSH
16185: LD_INT 5
16187: ST_TO_ADDR
// vc_engine := engine_siberite ;
16188: LD_ADDR_OWVAR 39
16192: PUSH
16193: LD_INT 3
16195: ST_TO_ADDR
// vc_control := control_computer ;
16196: LD_ADDR_OWVAR 38
16200: PUSH
16201: LD_INT 3
16203: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16204: LD_ADDR_OWVAR 40
16208: PUSH
16209: LD_INT 10
16211: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
16212: CALL_OW 45
16216: PPUSH
16217: LD_VAR 0 2
16221: PUSH
16222: LD_INT 1
16224: ARRAY
16225: PPUSH
16226: CALL_OW 250
16230: PPUSH
16231: LD_VAR 0 2
16235: PUSH
16236: LD_INT 1
16238: ARRAY
16239: PPUSH
16240: CALL_OW 251
16244: PPUSH
16245: LD_INT 12
16247: PPUSH
16248: LD_INT 1
16250: PPUSH
16251: CALL_OW 50
// end ;
16255: GO 16159
16257: POP
16258: POP
// end ;
16259: PPOPN 2
16261: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16262: LD_EXP 19
16266: PUSH
16267: LD_EXP 65
16271: AND
16272: IFFALSE 16494
16274: GO 16276
16276: DISABLE
16277: LD_INT 0
16279: PPUSH
16280: PPUSH
16281: PPUSH
16282: PPUSH
16283: PPUSH
16284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16285: LD_ADDR_VAR 0 6
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_OWVAR 2
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 21
16304: PUSH
16305: LD_INT 1
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 3
16314: PUSH
16315: LD_INT 23
16317: PUSH
16318: LD_INT 0
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: LIST
16333: PPUSH
16334: CALL_OW 69
16338: ST_TO_ADDR
// if not tmp then
16339: LD_VAR 0 6
16343: NOT
16344: IFFALSE 16348
// exit ;
16346: GO 16494
// s1 := rand ( 1 , 4 ) ;
16348: LD_ADDR_VAR 0 2
16352: PUSH
16353: LD_INT 1
16355: PPUSH
16356: LD_INT 4
16358: PPUSH
16359: CALL_OW 12
16363: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16364: LD_ADDR_VAR 0 4
16368: PUSH
16369: LD_VAR 0 6
16373: PUSH
16374: LD_INT 1
16376: ARRAY
16377: PPUSH
16378: LD_VAR 0 2
16382: PPUSH
16383: CALL_OW 259
16387: ST_TO_ADDR
// if s1 = 1 then
16388: LD_VAR 0 2
16392: PUSH
16393: LD_INT 1
16395: EQUAL
16396: IFFALSE 16416
// s2 := rand ( 2 , 4 ) else
16398: LD_ADDR_VAR 0 3
16402: PUSH
16403: LD_INT 2
16405: PPUSH
16406: LD_INT 4
16408: PPUSH
16409: CALL_OW 12
16413: ST_TO_ADDR
16414: GO 16424
// s2 := 1 ;
16416: LD_ADDR_VAR 0 3
16420: PUSH
16421: LD_INT 1
16423: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16424: LD_ADDR_VAR 0 5
16428: PUSH
16429: LD_VAR 0 6
16433: PUSH
16434: LD_INT 1
16436: ARRAY
16437: PPUSH
16438: LD_VAR 0 3
16442: PPUSH
16443: CALL_OW 259
16447: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16448: LD_VAR 0 6
16452: PUSH
16453: LD_INT 1
16455: ARRAY
16456: PPUSH
16457: LD_VAR 0 2
16461: PPUSH
16462: LD_VAR 0 5
16466: PPUSH
16467: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16471: LD_VAR 0 6
16475: PUSH
16476: LD_INT 1
16478: ARRAY
16479: PPUSH
16480: LD_VAR 0 3
16484: PPUSH
16485: LD_VAR 0 4
16489: PPUSH
16490: CALL_OW 237
// end ;
16494: PPOPN 6
16496: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16497: LD_EXP 19
16501: PUSH
16502: LD_EXP 66
16506: AND
16507: IFFALSE 16586
16509: GO 16511
16511: DISABLE
16512: LD_INT 0
16514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16515: LD_ADDR_VAR 0 1
16519: PUSH
16520: LD_INT 22
16522: PUSH
16523: LD_OWVAR 2
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 30
16534: PUSH
16535: LD_INT 3
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PPUSH
16546: CALL_OW 69
16550: ST_TO_ADDR
// if not tmp then
16551: LD_VAR 0 1
16555: NOT
16556: IFFALSE 16560
// exit ;
16558: GO 16586
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16560: LD_VAR 0 1
16564: PUSH
16565: LD_INT 1
16567: PPUSH
16568: LD_VAR 0 1
16572: PPUSH
16573: CALL_OW 12
16577: ARRAY
16578: PPUSH
16579: LD_INT 1
16581: PPUSH
16582: CALL_OW 234
// end ;
16586: PPOPN 1
16588: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16589: LD_EXP 19
16593: PUSH
16594: LD_EXP 67
16598: AND
16599: IFFALSE 16711
16601: GO 16603
16603: DISABLE
16604: LD_INT 0
16606: PPUSH
16607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16608: LD_ADDR_VAR 0 2
16612: PUSH
16613: LD_INT 22
16615: PUSH
16616: LD_OWVAR 2
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: PUSH
16625: LD_INT 2
16627: PUSH
16628: LD_INT 30
16630: PUSH
16631: LD_INT 27
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 30
16640: PUSH
16641: LD_INT 26
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 30
16650: PUSH
16651: LD_INT 28
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: EMPTY
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PPUSH
16668: CALL_OW 69
16672: ST_TO_ADDR
// if not tmp then
16673: LD_VAR 0 2
16677: NOT
16678: IFFALSE 16682
// exit ;
16680: GO 16711
// for i in tmp do
16682: LD_ADDR_VAR 0 1
16686: PUSH
16687: LD_VAR 0 2
16691: PUSH
16692: FOR_IN
16693: IFFALSE 16709
// SetLives ( i , 1 ) ;
16695: LD_VAR 0 1
16699: PPUSH
16700: LD_INT 1
16702: PPUSH
16703: CALL_OW 234
16707: GO 16692
16709: POP
16710: POP
// end ;
16711: PPOPN 2
16713: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16714: LD_EXP 19
16718: PUSH
16719: LD_EXP 68
16723: AND
16724: IFFALSE 16994
16726: GO 16728
16728: DISABLE
16729: LD_INT 0
16731: PPUSH
16732: PPUSH
16733: PPUSH
// begin i := rand ( 1 , 7 ) ;
16734: LD_ADDR_VAR 0 1
16738: PUSH
16739: LD_INT 1
16741: PPUSH
16742: LD_INT 7
16744: PPUSH
16745: CALL_OW 12
16749: ST_TO_ADDR
// case i of 1 :
16750: LD_VAR 0 1
16754: PUSH
16755: LD_INT 1
16757: DOUBLE
16758: EQUAL
16759: IFTRUE 16763
16761: GO 16773
16763: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16764: LD_STRING earthquake(getX(game), 0, 32)
16766: PPUSH
16767: CALL_OW 559
16771: GO 16994
16773: LD_INT 2
16775: DOUBLE
16776: EQUAL
16777: IFTRUE 16781
16779: GO 16791
16781: POP
// ToLua ( displayStucuk(); ) ; 3 :
16782: LD_STRING displayStucuk();
16784: PPUSH
16785: CALL_OW 559
16789: GO 16994
16791: LD_INT 3
16793: DOUBLE
16794: EQUAL
16795: IFTRUE 16799
16797: GO 16903
16799: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16800: LD_ADDR_VAR 0 2
16804: PUSH
16805: LD_INT 22
16807: PUSH
16808: LD_OWVAR 2
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 25
16819: PUSH
16820: LD_INT 1
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PPUSH
16831: CALL_OW 69
16835: ST_TO_ADDR
// if not tmp then
16836: LD_VAR 0 2
16840: NOT
16841: IFFALSE 16845
// exit ;
16843: GO 16994
// un := tmp [ rand ( 1 , tmp ) ] ;
16845: LD_ADDR_VAR 0 3
16849: PUSH
16850: LD_VAR 0 2
16854: PUSH
16855: LD_INT 1
16857: PPUSH
16858: LD_VAR 0 2
16862: PPUSH
16863: CALL_OW 12
16867: ARRAY
16868: ST_TO_ADDR
// if Crawls ( un ) then
16869: LD_VAR 0 3
16873: PPUSH
16874: CALL_OW 318
16878: IFFALSE 16889
// ComWalk ( un ) ;
16880: LD_VAR 0 3
16884: PPUSH
16885: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16889: LD_VAR 0 3
16893: PPUSH
16894: LD_INT 8
16896: PPUSH
16897: CALL_OW 336
// end ; 4 :
16901: GO 16994
16903: LD_INT 4
16905: DOUBLE
16906: EQUAL
16907: IFTRUE 16911
16909: GO 16972
16911: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16912: LD_ADDR_VAR 0 2
16916: PUSH
16917: LD_INT 22
16919: PUSH
16920: LD_OWVAR 2
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 30
16931: PUSH
16932: LD_INT 29
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PPUSH
16943: CALL_OW 69
16947: ST_TO_ADDR
// if not tmp then
16948: LD_VAR 0 2
16952: NOT
16953: IFFALSE 16957
// exit ;
16955: GO 16994
// DestroyUnit ( tmp [ 1 ] ) ;
16957: LD_VAR 0 2
16961: PUSH
16962: LD_INT 1
16964: ARRAY
16965: PPUSH
16966: CALL_OW 65
// end ; 5 .. 7 :
16970: GO 16994
16972: LD_INT 5
16974: DOUBLE
16975: GREATEREQUAL
16976: IFFALSE 16984
16978: LD_INT 7
16980: DOUBLE
16981: LESSEQUAL
16982: IFTRUE 16986
16984: GO 16993
16986: POP
// StreamSibBomb ; end ;
16987: CALL 13288 0 0
16991: GO 16994
16993: POP
// end ;
16994: PPOPN 3
16996: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16997: LD_EXP 19
17001: PUSH
17002: LD_EXP 69
17006: AND
17007: IFFALSE 17163
17009: GO 17011
17011: DISABLE
17012: LD_INT 0
17014: PPUSH
17015: PPUSH
17016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17017: LD_ADDR_VAR 0 2
17021: PUSH
17022: LD_INT 81
17024: PUSH
17025: LD_OWVAR 2
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: LD_INT 21
17039: PUSH
17040: LD_INT 1
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 21
17049: PUSH
17050: LD_INT 2
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: LIST
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PPUSH
17066: CALL_OW 69
17070: ST_TO_ADDR
// if not tmp then
17071: LD_VAR 0 2
17075: NOT
17076: IFFALSE 17080
// exit ;
17078: GO 17163
// p := 0 ;
17080: LD_ADDR_VAR 0 3
17084: PUSH
17085: LD_INT 0
17087: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17088: LD_INT 35
17090: PPUSH
17091: CALL_OW 67
// p := p + 1 ;
17095: LD_ADDR_VAR 0 3
17099: PUSH
17100: LD_VAR 0 3
17104: PUSH
17105: LD_INT 1
17107: PLUS
17108: ST_TO_ADDR
// for i in tmp do
17109: LD_ADDR_VAR 0 1
17113: PUSH
17114: LD_VAR 0 2
17118: PUSH
17119: FOR_IN
17120: IFFALSE 17151
// if GetLives ( i ) < 1000 then
17122: LD_VAR 0 1
17126: PPUSH
17127: CALL_OW 256
17131: PUSH
17132: LD_INT 1000
17134: LESS
17135: IFFALSE 17149
// SetLives ( i , 1000 ) ;
17137: LD_VAR 0 1
17141: PPUSH
17142: LD_INT 1000
17144: PPUSH
17145: CALL_OW 234
17149: GO 17119
17151: POP
17152: POP
// until p > 20 ;
17153: LD_VAR 0 3
17157: PUSH
17158: LD_INT 20
17160: GREATER
17161: IFFALSE 17088
// end ;
17163: PPOPN 3
17165: END
// every 0 0$1 trigger StreamModeActive and sTime do
17166: LD_EXP 19
17170: PUSH
17171: LD_EXP 70
17175: AND
17176: IFFALSE 17211
17178: GO 17180
17180: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17181: LD_INT 28
17183: PPUSH
17184: LD_OWVAR 2
17188: PPUSH
17189: LD_INT 2
17191: PPUSH
17192: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17196: LD_INT 30
17198: PPUSH
17199: LD_OWVAR 2
17203: PPUSH
17204: LD_INT 2
17206: PPUSH
17207: CALL_OW 322
// end ;
17211: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17212: LD_EXP 19
17216: PUSH
17217: LD_EXP 71
17221: AND
17222: IFFALSE 17343
17224: GO 17226
17226: DISABLE
17227: LD_INT 0
17229: PPUSH
17230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17231: LD_ADDR_VAR 0 2
17235: PUSH
17236: LD_INT 22
17238: PUSH
17239: LD_OWVAR 2
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 21
17250: PUSH
17251: LD_INT 1
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 3
17260: PUSH
17261: LD_INT 23
17263: PUSH
17264: LD_INT 0
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: LIST
17279: PPUSH
17280: CALL_OW 69
17284: ST_TO_ADDR
// if not tmp then
17285: LD_VAR 0 2
17289: NOT
17290: IFFALSE 17294
// exit ;
17292: GO 17343
// for i in tmp do
17294: LD_ADDR_VAR 0 1
17298: PUSH
17299: LD_VAR 0 2
17303: PUSH
17304: FOR_IN
17305: IFFALSE 17341
// begin if Crawls ( i ) then
17307: LD_VAR 0 1
17311: PPUSH
17312: CALL_OW 318
17316: IFFALSE 17327
// ComWalk ( i ) ;
17318: LD_VAR 0 1
17322: PPUSH
17323: CALL_OW 138
// SetClass ( i , 2 ) ;
17327: LD_VAR 0 1
17331: PPUSH
17332: LD_INT 2
17334: PPUSH
17335: CALL_OW 336
// end ;
17339: GO 17304
17341: POP
17342: POP
// end ;
17343: PPOPN 2
17345: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17346: LD_EXP 19
17350: PUSH
17351: LD_EXP 72
17355: AND
17356: IFFALSE 17561
17358: GO 17360
17360: DISABLE
17361: LD_INT 0
17363: PPUSH
17364: PPUSH
17365: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17366: LD_OWVAR 2
17370: PPUSH
17371: LD_INT 9
17373: PPUSH
17374: LD_INT 1
17376: PPUSH
17377: LD_INT 1
17379: PPUSH
17380: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17384: LD_INT 9
17386: PPUSH
17387: LD_OWVAR 2
17391: PPUSH
17392: CALL_OW 343
// hc_name := Dark Warrior ;
17396: LD_ADDR_OWVAR 26
17400: PUSH
17401: LD_STRING Dark Warrior
17403: ST_TO_ADDR
// hc_gallery :=  ;
17404: LD_ADDR_OWVAR 33
17408: PUSH
17409: LD_STRING 
17411: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
17412: LD_INT 1
17414: PPUSH
17415: LD_INT 1
17417: PPUSH
17418: LD_INT 10
17420: PPUSH
17421: CALL_OW 380
// un := CreateHuman ;
17425: LD_ADDR_VAR 0 3
17429: PUSH
17430: CALL_OW 44
17434: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17435: LD_VAR 0 3
17439: PPUSH
17440: LD_INT 1
17442: PPUSH
17443: CALL_OW 51
// p := 0 ;
17447: LD_ADDR_VAR 0 2
17451: PUSH
17452: LD_INT 0
17454: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17455: LD_INT 35
17457: PPUSH
17458: CALL_OW 67
// if GetLives ( un ) < 1000 then
17462: LD_VAR 0 3
17466: PPUSH
17467: CALL_OW 256
17471: PUSH
17472: LD_INT 1000
17474: LESS
17475: IFFALSE 17489
// SetLives ( un , 1000 ) ;
17477: LD_VAR 0 3
17481: PPUSH
17482: LD_INT 1000
17484: PPUSH
17485: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
17489: LD_VAR 0 3
17493: PPUSH
17494: LD_INT 81
17496: PUSH
17497: LD_OWVAR 2
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PPUSH
17506: CALL_OW 69
17510: PPUSH
17511: LD_VAR 0 3
17515: PPUSH
17516: CALL_OW 74
17520: PPUSH
17521: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17525: LD_VAR 0 2
17529: PUSH
17530: LD_INT 60
17532: GREATER
17533: PUSH
17534: LD_VAR 0 3
17538: PPUSH
17539: CALL_OW 301
17543: OR
17544: IFFALSE 17455
// if un then
17546: LD_VAR 0 3
17550: IFFALSE 17561
// RemoveUnit ( un ) ;
17552: LD_VAR 0 3
17556: PPUSH
17557: CALL_OW 64
// end ; end_of_file
17561: PPOPN 3
17563: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
17564: LD_INT 0
17566: PPUSH
17567: PPUSH
17568: PPUSH
17569: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17570: LD_VAR 0 1
17574: PPUSH
17575: CALL_OW 264
17579: PUSH
17580: LD_EXP 18
17584: EQUAL
17585: IFFALSE 17657
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17587: LD_INT 68
17589: PPUSH
17590: LD_VAR 0 1
17594: PPUSH
17595: CALL_OW 255
17599: PPUSH
17600: CALL_OW 321
17604: PUSH
17605: LD_INT 2
17607: EQUAL
17608: IFFALSE 17620
// eff := 70 else
17610: LD_ADDR_VAR 0 6
17614: PUSH
17615: LD_INT 70
17617: ST_TO_ADDR
17618: GO 17628
// eff := 30 ;
17620: LD_ADDR_VAR 0 6
17624: PUSH
17625: LD_INT 30
17627: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17628: LD_VAR 0 1
17632: PPUSH
17633: CALL_OW 250
17637: PPUSH
17638: LD_VAR 0 1
17642: PPUSH
17643: CALL_OW 251
17647: PPUSH
17648: LD_VAR 0 6
17652: PPUSH
17653: CALL_OW 495
// end ; end ;
17657: LD_VAR 0 4
17661: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
17662: LD_INT 0
17664: PPUSH
17665: PPUSH
17666: PPUSH
17667: PPUSH
17668: PPUSH
17669: PPUSH
// if cmd = 124 then
17670: LD_VAR 0 1
17674: PUSH
17675: LD_INT 124
17677: EQUAL
17678: IFFALSE 17884
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
17680: LD_ADDR_VAR 0 5
17684: PUSH
17685: LD_INT 2
17687: PUSH
17688: LD_INT 34
17690: PUSH
17691: LD_INT 53
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 34
17700: PUSH
17701: LD_INT 14
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: LIST
17712: PPUSH
17713: CALL_OW 69
17717: ST_TO_ADDR
// if not tmp then
17718: LD_VAR 0 5
17722: NOT
17723: IFFALSE 17727
// exit ;
17725: GO 17884
// for i in tmp do
17727: LD_ADDR_VAR 0 3
17731: PUSH
17732: LD_VAR 0 5
17736: PUSH
17737: FOR_IN
17738: IFFALSE 17882
// begin taskList := GetTaskList ( i ) ;
17740: LD_ADDR_VAR 0 6
17744: PUSH
17745: LD_VAR 0 3
17749: PPUSH
17750: CALL_OW 437
17754: ST_TO_ADDR
// if not taskList then
17755: LD_VAR 0 6
17759: NOT
17760: IFFALSE 17764
// continue ;
17762: GO 17737
// for j = 1 to taskList do
17764: LD_ADDR_VAR 0 4
17768: PUSH
17769: DOUBLE
17770: LD_INT 1
17772: DEC
17773: ST_TO_ADDR
17774: LD_VAR 0 6
17778: PUSH
17779: FOR_TO
17780: IFFALSE 17878
// if taskList [ j ] [ 1 ] = | then
17782: LD_VAR 0 6
17786: PUSH
17787: LD_VAR 0 4
17791: ARRAY
17792: PUSH
17793: LD_INT 1
17795: ARRAY
17796: PUSH
17797: LD_STRING |
17799: EQUAL
17800: IFFALSE 17876
// begin _taskList := Delete ( taskList , 1 ) ;
17802: LD_ADDR_VAR 0 7
17806: PUSH
17807: LD_VAR 0 6
17811: PPUSH
17812: LD_INT 1
17814: PPUSH
17815: CALL_OW 3
17819: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
17820: LD_VAR 0 3
17824: PPUSH
17825: LD_VAR 0 7
17829: PPUSH
17830: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
17834: LD_VAR 0 3
17838: PPUSH
17839: LD_VAR 0 6
17843: PUSH
17844: LD_VAR 0 4
17848: ARRAY
17849: PUSH
17850: LD_INT 2
17852: ARRAY
17853: PPUSH
17854: LD_VAR 0 6
17858: PUSH
17859: LD_VAR 0 4
17863: ARRAY
17864: PUSH
17865: LD_INT 3
17867: ARRAY
17868: PPUSH
17869: LD_INT 8
17871: PPUSH
17872: CALL 17889 0 4
// end ;
17876: GO 17779
17878: POP
17879: POP
// end ;
17880: GO 17737
17882: POP
17883: POP
// end ; end ;
17884: LD_VAR 0 2
17888: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17889: LD_INT 0
17891: PPUSH
17892: PPUSH
17893: PPUSH
17894: PPUSH
17895: PPUSH
17896: PPUSH
17897: PPUSH
17898: PPUSH
17899: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17900: LD_VAR 0 1
17904: NOT
17905: PUSH
17906: LD_VAR 0 2
17910: PPUSH
17911: LD_VAR 0 3
17915: PPUSH
17916: CALL_OW 488
17920: NOT
17921: OR
17922: PUSH
17923: LD_VAR 0 4
17927: NOT
17928: OR
17929: IFFALSE 17933
// exit ;
17931: GO 18273
// list := [ ] ;
17933: LD_ADDR_VAR 0 13
17937: PUSH
17938: EMPTY
17939: ST_TO_ADDR
// if x - r < 0 then
17940: LD_VAR 0 2
17944: PUSH
17945: LD_VAR 0 4
17949: MINUS
17950: PUSH
17951: LD_INT 0
17953: LESS
17954: IFFALSE 17966
// min_x := 0 else
17956: LD_ADDR_VAR 0 7
17960: PUSH
17961: LD_INT 0
17963: ST_TO_ADDR
17964: GO 17982
// min_x := x - r ;
17966: LD_ADDR_VAR 0 7
17970: PUSH
17971: LD_VAR 0 2
17975: PUSH
17976: LD_VAR 0 4
17980: MINUS
17981: ST_TO_ADDR
// if y - r < 0 then
17982: LD_VAR 0 3
17986: PUSH
17987: LD_VAR 0 4
17991: MINUS
17992: PUSH
17993: LD_INT 0
17995: LESS
17996: IFFALSE 18008
// min_y := 0 else
17998: LD_ADDR_VAR 0 8
18002: PUSH
18003: LD_INT 0
18005: ST_TO_ADDR
18006: GO 18024
// min_y := y - r ;
18008: LD_ADDR_VAR 0 8
18012: PUSH
18013: LD_VAR 0 3
18017: PUSH
18018: LD_VAR 0 4
18022: MINUS
18023: ST_TO_ADDR
// max_x := x + r ;
18024: LD_ADDR_VAR 0 9
18028: PUSH
18029: LD_VAR 0 2
18033: PUSH
18034: LD_VAR 0 4
18038: PLUS
18039: ST_TO_ADDR
// max_y := y + r ;
18040: LD_ADDR_VAR 0 10
18044: PUSH
18045: LD_VAR 0 3
18049: PUSH
18050: LD_VAR 0 4
18054: PLUS
18055: ST_TO_ADDR
// for _x = min_x to max_x do
18056: LD_ADDR_VAR 0 11
18060: PUSH
18061: DOUBLE
18062: LD_VAR 0 7
18066: DEC
18067: ST_TO_ADDR
18068: LD_VAR 0 9
18072: PUSH
18073: FOR_TO
18074: IFFALSE 18191
// for _y = min_y to max_y do
18076: LD_ADDR_VAR 0 12
18080: PUSH
18081: DOUBLE
18082: LD_VAR 0 8
18086: DEC
18087: ST_TO_ADDR
18088: LD_VAR 0 10
18092: PUSH
18093: FOR_TO
18094: IFFALSE 18187
// begin if not ValidHex ( _x , _y ) then
18096: LD_VAR 0 11
18100: PPUSH
18101: LD_VAR 0 12
18105: PPUSH
18106: CALL_OW 488
18110: NOT
18111: IFFALSE 18115
// continue ;
18113: GO 18093
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18115: LD_VAR 0 11
18119: PPUSH
18120: LD_VAR 0 12
18124: PPUSH
18125: CALL_OW 351
18129: PUSH
18130: LD_VAR 0 11
18134: PPUSH
18135: LD_VAR 0 12
18139: PPUSH
18140: CALL_OW 554
18144: AND
18145: IFFALSE 18185
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18147: LD_ADDR_VAR 0 13
18151: PUSH
18152: LD_VAR 0 13
18156: PPUSH
18157: LD_VAR 0 13
18161: PUSH
18162: LD_INT 1
18164: PLUS
18165: PPUSH
18166: LD_VAR 0 11
18170: PUSH
18171: LD_VAR 0 12
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PPUSH
18180: CALL_OW 2
18184: ST_TO_ADDR
// end ;
18185: GO 18093
18187: POP
18188: POP
18189: GO 18073
18191: POP
18192: POP
// if not list then
18193: LD_VAR 0 13
18197: NOT
18198: IFFALSE 18202
// exit ;
18200: GO 18273
// for i in list do
18202: LD_ADDR_VAR 0 6
18206: PUSH
18207: LD_VAR 0 13
18211: PUSH
18212: FOR_IN
18213: IFFALSE 18271
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18215: LD_VAR 0 1
18219: PPUSH
18220: LD_STRING M
18222: PUSH
18223: LD_VAR 0 6
18227: PUSH
18228: LD_INT 1
18230: ARRAY
18231: PUSH
18232: LD_VAR 0 6
18236: PUSH
18237: LD_INT 2
18239: ARRAY
18240: PUSH
18241: LD_INT 0
18243: PUSH
18244: LD_INT 0
18246: PUSH
18247: LD_INT 0
18249: PUSH
18250: LD_INT 0
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: PUSH
18262: EMPTY
18263: LIST
18264: PPUSH
18265: CALL_OW 447
18269: GO 18212
18271: POP
18272: POP
// end ;
18273: LD_VAR 0 5
18277: RET
