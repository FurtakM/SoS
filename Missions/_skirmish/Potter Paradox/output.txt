// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 21 0 0
// PrepareLegion ;
   8: CALL 230 0 0
// PrepareAllies ;
  12: CALL 2221 0 0
// Action ;
  16: CALL 4045 0 0
// end ;
  20: END
// function InitGame ; begin
  21: LD_INT 0
  23: PPUSH
// RandomizeAll ;
  24: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// if not Difficulty then
  41: LD_OWVAR 67
  45: NOT
  46: IFFALSE 56
// Difficulty := 2 ;
  48: LD_ADDR_OWVAR 67
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// InitVariables ;
  56: CALL 69 0 0
// SetDiplomacy ;
  60: CALL 182 0 0
// end ; end_of_file
  64: LD_VAR 0 1
  68: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , player_res_art , time_res_art , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave , player_artifact_ready , artifact_progress ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// points := 0 ;
  72: LD_ADDR_EXP 10
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// alert := false ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// game_over := false ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// wave_time := 0 0$00 ;
  96: LD_ADDR_EXP 11
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// bonus_active := false ;
 104: LD_ADDR_EXP 13
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ignore_wave := false ;
 112: LD_ADDR_EXP 15
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// player_res_art := false ;
 120: LD_ADDR_EXP 8
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// player_artifact_ready := false ;
 128: LD_ADDR_EXP 16
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// time_res_art := [ 25 25$00 , 32 32$00 , 40 40$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 9
 140: PUSH
 141: LD_INT 52500
 143: PUSH
 144: LD_INT 67200
 146: PUSH
 147: LD_INT 84000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// bonus_num := 0 ;
 161: LD_ADDR_EXP 14
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// artifact_progress := 0 ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// end ;
 177: LD_VAR 0 1
 181: RET
// export function SetDiplomacy ; begin
 182: LD_INT 0
 184: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 185: LD_INT 92
 187: PPUSH
 188: LD_INT 48
 190: PPUSH
 191: LD_INT 8
 193: PPUSH
 194: LD_INT 32796
 196: NEG
 197: PPUSH
 198: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 202: LD_INT 92
 204: PPUSH
 205: LD_INT 48
 207: PPUSH
 208: LD_INT 8
 210: PPUSH
 211: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 215: LD_INT 5
 217: PPUSH
 218: LD_INT 8
 220: PPUSH
 221: CALL_OW 343
// end ; end_of_file
 225: LD_VAR 0 1
 229: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
 247: PPUSH
 248: PPUSH
 249: PPUSH
// uc_side := 2 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 2
 257: ST_TO_ADDR
// uc_nation := nation_arabian ;
 258: LD_ADDR_OWVAR 21
 262: PUSH
 263: LD_INT 2
 265: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: LD_INT 6
 274: PPUSH
 275: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 279: LD_ADDR_OWVAR 26
 283: PUSH
 284: LD_STRING Nicolas Vervecken
 286: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 287: LD_ADDR_OWVAR 33
 291: PUSH
 292: LD_STRING SecondCharsGal
 294: ST_TO_ADDR
// hc_face_number := 3 ;
 295: LD_ADDR_OWVAR 34
 299: PUSH
 300: LD_INT 3
 302: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 303: LD_ADDR_OWVAR 29
 307: PUSH
 308: LD_INT 11
 310: PUSH
 311: LD_INT 10
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: ST_TO_ADDR
// Vervecken := CreateHuman ;
 318: LD_ADDR_EXP 12
 322: PUSH
 323: CALL_OW 44
 327: ST_TO_ADDR
// InitHc ;
 328: CALL_OW 19
// uc_side := 8 ;
 332: LD_ADDR_OWVAR 20
 336: PUSH
 337: LD_INT 8
 339: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 340: LD_INT 23
 342: PPUSH
 343: CALL_OW 274
 347: PPUSH
 348: LD_INT 1
 350: PPUSH
 351: LD_INT 4000
 353: PUSH
 354: LD_INT 2500
 356: PUSH
 357: LD_INT 1250
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_OWVAR 67
 369: ARRAY
 370: PPUSH
 371: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 375: LD_INT 23
 377: PPUSH
 378: CALL_OW 274
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: LD_INT 300
 388: PPUSH
 389: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 393: LD_INT 23
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 3
 403: PPUSH
 404: LD_INT 100
 406: PUSH
 407: LD_INT 50
 409: PUSH
 410: LD_INT 30
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: LIST
 417: PUSH
 418: LD_OWVAR 67
 422: ARRAY
 423: PPUSH
 424: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 428: LD_ADDR_VAR 0 14
 432: PUSH
 433: LD_INT 23
 435: PPUSH
 436: CALL_OW 250
 440: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 441: LD_ADDR_VAR 0 15
 445: PUSH
 446: LD_INT 23
 448: PPUSH
 449: CALL_OW 251
 453: ST_TO_ADDR
// team := [ ] ;
 454: LD_ADDR_VAR 0 7
 458: PUSH
 459: EMPTY
 460: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 461: LD_ADDR_VAR 0 8
 465: PUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: LIST
 479: PUSH
 480: LD_OWVAR 67
 484: ARRAY
 485: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 486: LD_ADDR_VAR 0 9
 490: PUSH
 491: LD_INT 11
 493: PUSH
 494: LD_INT 9
 496: PUSH
 497: LD_INT 8
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_OWVAR 67
 509: ARRAY
 510: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 511: LD_ADDR_VAR 0 10
 515: PUSH
 516: LD_INT 3
 518: PUSH
 519: LD_INT 2
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_OWVAR 67
 534: ARRAY
 535: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 536: LD_ADDR_VAR 0 11
 540: PUSH
 541: LD_INT 5
 543: PUSH
 544: LD_INT 4
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PUSH
 555: LD_OWVAR 67
 559: ARRAY
 560: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 561: LD_ADDR_VAR 0 12
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 13
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 4
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 611: LD_ADDR_VAR 0 18
 615: PUSH
 616: LD_INT 13
 618: PUSH
 619: LD_INT 1
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: LD_INT 26
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 14
 636: PUSH
 637: LD_INT 3
 639: PUSH
 640: LD_INT 1
 642: PUSH
 643: LD_INT 25
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: PUSH
 652: LD_INT 14
 654: PUSH
 655: LD_INT 3
 657: PUSH
 658: LD_INT 5
 660: PUSH
 661: LD_INT 32
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 14
 672: PUSH
 673: LD_INT 3
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: LD_INT 31
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: LD_INT 14
 690: PUSH
 691: LD_INT 3
 693: PUSH
 694: LD_INT 2
 696: PUSH
 697: LD_INT 24
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 14
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 2
 714: PUSH
 715: LD_INT 25
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: PUSH
 724: LD_INT 13
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 24
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_VAR 0 18
 765: PUSH
 766: LD_OWVAR 67
 770: MINUS
 771: PUSH
 772: LD_INT 1
 774: PLUS
 775: PUSH
 776: FOR_TO
 777: IFFALSE 906
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 779: LD_ADDR_OWVAR 37
 783: PUSH
 784: LD_VAR 0 18
 788: PUSH
 789: LD_VAR 0 2
 793: ARRAY
 794: PUSH
 795: LD_INT 1
 797: ARRAY
 798: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 799: LD_ADDR_OWVAR 39
 803: PUSH
 804: LD_VAR 0 18
 808: PUSH
 809: LD_VAR 0 2
 813: ARRAY
 814: PUSH
 815: LD_INT 2
 817: ARRAY
 818: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 819: LD_ADDR_OWVAR 38
 823: PUSH
 824: LD_VAR 0 18
 828: PUSH
 829: LD_VAR 0 2
 833: ARRAY
 834: PUSH
 835: LD_INT 3
 837: ARRAY
 838: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 839: LD_ADDR_OWVAR 40
 843: PUSH
 844: LD_VAR 0 18
 848: PUSH
 849: LD_VAR 0 2
 853: ARRAY
 854: PUSH
 855: LD_INT 4
 857: ARRAY
 858: ST_TO_ADDR
// un := CreateVehicle ;
 859: LD_ADDR_VAR 0 6
 863: PUSH
 864: CALL_OW 45
 868: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 869: LD_VAR 0 6
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: LD_INT 5
 879: PPUSH
 880: CALL_OW 12
 884: PPUSH
 885: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 889: LD_VAR 0 6
 893: PPUSH
 894: LD_INT 7
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 49
// end ;
 904: GO 776
 906: POP
 907: POP
// for i = 1 to ape_num do
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: DOUBLE
 914: LD_INT 1
 916: DEC
 917: ST_TO_ADDR
 918: LD_VAR 0 13
 922: PUSH
 923: FOR_TO
 924: IFFALSE 991
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 926: LD_INT 0
 928: PPUSH
 929: LD_INT 16
 931: PUSH
 932: LD_INT 15
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: CALL_OW 12
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 8
 955: PPUSH
 956: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 960: LD_ADDR_VAR 0 7
 964: PUSH
 965: LD_VAR 0 7
 969: PPUSH
 970: LD_VAR 0 7
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: PPUSH
 979: CALL_OW 44
 983: PPUSH
 984: CALL_OW 2
 988: ST_TO_ADDR
// end ;
 989: GO 923
 991: POP
 992: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 993: LD_INT 1
 995: PPUSH
 996: LD_INT 1
 998: PPUSH
 999: LD_VAR 0 8
1003: PPUSH
1004: CALL_OW 380
// l1 := CreateHuman ;
1008: LD_ADDR_EXP 2
1012: PUSH
1013: CALL_OW 44
1017: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_INT 23
1025: PPUSH
1026: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
1030: LD_INT 1
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_VAR 0 8
1040: PPUSH
1041: CALL_OW 380
// l2 := CreateHuman ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: CALL_OW 44
1054: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1055: LD_EXP 3
1059: PPUSH
1060: LD_INT 23
1062: PPUSH
1063: CALL_OW 52
// for class = 1 to 4 do
1067: LD_ADDR_VAR 0 4
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 4
1079: PUSH
1080: FOR_TO
1081: IFFALSE 1180
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1083: LD_ADDR_VAR 0 2
1087: PUSH
1088: DOUBLE
1089: LD_INT 1
1091: DEC
1092: ST_TO_ADDR
1093: LD_VAR 0 9
1097: PUSH
1098: LD_VAR 0 10
1102: PUSH
1103: LD_VAR 0 11
1107: PUSH
1108: LD_VAR 0 12
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1176
// begin PrepareHuman ( false , class , skill ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_VAR 0 4
1135: PPUSH
1136: LD_VAR 0 8
1140: PPUSH
1141: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1145: LD_ADDR_VAR 0 7
1149: PUSH
1150: LD_VAR 0 7
1154: PPUSH
1155: LD_VAR 0 7
1159: PUSH
1160: LD_INT 1
1162: PLUS
1163: PPUSH
1164: CALL_OW 44
1168: PPUSH
1169: CALL_OW 2
1173: ST_TO_ADDR
// end ;
1174: GO 1125
1176: POP
1177: POP
1178: GO 1080
1180: POP
1181: POP
// for i in team do
1182: LD_ADDR_VAR 0 2
1186: PUSH
1187: LD_VAR 0 7
1191: PUSH
1192: FOR_IN
1193: IFFALSE 1669
// begin b := 0 ;
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 0
1202: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1203: LD_VAR 0 2
1207: PPUSH
1208: CALL_OW 257
1212: PUSH
1213: LD_INT 1
1215: DOUBLE
1216: EQUAL
1217: IFTRUE 1221
1219: GO 1328
1221: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1222: LD_ADDR_VAR 0 5
1226: PUSH
1227: LD_INT 22
1229: PUSH
1230: LD_OWVAR 20
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 30
1254: PUSH
1255: LD_INT 31
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 58
1269: PUSH
1270: EMPTY
1271: LIST
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PPUSH
1278: CALL_OW 69
1282: ST_TO_ADDR
// if not b then
1283: LD_VAR 0 5
1287: NOT
1288: IFFALSE 1326
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1290: LD_ADDR_VAR 0 5
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_OWVAR 20
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 30
1309: PUSH
1310: LD_INT 5
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PPUSH
1321: CALL_OW 69
1325: ST_TO_ADDR
// end ; class_engineer :
1326: GO 1567
1328: LD_INT 2
1330: DOUBLE
1331: EQUAL
1332: IFTRUE 1336
1334: GO 1375
1336: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1337: LD_ADDR_VAR 0 5
1341: PUSH
1342: LD_INT 22
1344: PUSH
1345: LD_OWVAR 20
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: LD_INT 30
1356: PUSH
1357: LD_INT 1
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 69
1372: ST_TO_ADDR
1373: GO 1567
1375: LD_INT 3
1377: DOUBLE
1378: EQUAL
1379: IFTRUE 1383
1381: GO 1472
1383: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1384: LD_ADDR_VAR 0 5
1388: PUSH
1389: LD_INT 22
1391: PUSH
1392: LD_OWVAR 20
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 21
1403: PUSH
1404: LD_INT 2
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: LD_INT 58
1413: PUSH
1414: EMPTY
1415: LIST
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: PPUSH
1422: CALL_OW 69
1426: ST_TO_ADDR
// if not b then
1427: LD_VAR 0 5
1431: NOT
1432: IFFALSE 1470
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1434: LD_ADDR_VAR 0 5
1438: PUSH
1439: LD_INT 22
1441: PUSH
1442: LD_OWVAR 20
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PUSH
1451: LD_INT 30
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PPUSH
1465: CALL_OW 69
1469: ST_TO_ADDR
// end ; class_scientistic :
1470: GO 1567
1472: LD_INT 4
1474: DOUBLE
1475: EQUAL
1476: IFTRUE 1480
1478: GO 1519
1480: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1481: LD_ADDR_VAR 0 5
1485: PUSH
1486: LD_INT 22
1488: PUSH
1489: LD_OWVAR 20
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 30
1500: PUSH
1501: LD_INT 8
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: ST_TO_ADDR
// end ; class_apeman_soldier :
1517: GO 1567
1519: LD_INT 15
1521: DOUBLE
1522: EQUAL
1523: IFTRUE 1527
1525: GO 1566
1527: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1528: LD_ADDR_VAR 0 5
1532: PUSH
1533: LD_INT 22
1535: PUSH
1536: LD_OWVAR 20
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 30
1547: PUSH
1548: LD_INT 5
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PPUSH
1559: CALL_OW 69
1563: ST_TO_ADDR
1564: GO 1567
1566: POP
// if b then
1567: LD_VAR 0 5
1571: IFFALSE 1642
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1573: LD_VAR 0 5
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PPUSH
1582: CALL_OW 266
1586: PUSH
1587: LD_INT 31
1589: EQUAL
1590: IFFALSE 1612
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1592: LD_VAR 0 2
1596: PPUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: PPUSH
1606: CALL 4808 0 2
1610: GO 1640
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_INT 1
1624: PPUSH
1625: LD_VAR 0 5
1629: PPUSH
1630: CALL_OW 12
1634: ARRAY
1635: PPUSH
1636: CALL_OW 52
1640: GO 1667
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_VAR 0 14
1651: PPUSH
1652: LD_VAR 0 15
1656: PPUSH
1657: LD_INT 15
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 50
// end ;
1667: GO 1192
1669: POP
1670: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1671: LD_ADDR_VAR 0 16
1675: PUSH
1676: LD_INT 26
1678: PUSH
1679: LD_INT 3
1681: PUSH
1682: LD_INT 2
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_OWVAR 67
1697: ARRAY
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 25
1705: PUSH
1706: LD_INT 5
1708: PUSH
1709: LD_INT 4
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_OWVAR 67
1724: ARRAY
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 24
1732: PUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 5
1738: PUSH
1739: LD_INT 4
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_OWVAR 67
1751: ARRAY
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 30
1759: PUSH
1760: LD_INT 2
1762: PUSH
1763: LD_INT 1
1765: PUSH
1766: LD_INT 1
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_OWVAR 67
1778: ARRAY
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_INT 22
1797: PUSH
1798: LD_OWVAR 20
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 30
1809: PUSH
1810: LD_INT 32
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PPUSH
1821: CALL_OW 69
1825: PUSH
1826: FOR_IN
1827: IFFALSE 2000
// begin if weapons then
1829: LD_VAR 0 16
1833: IFFALSE 1957
// begin k := rand ( 1 , weapons ) ;
1835: LD_ADDR_VAR 0 3
1839: PUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_VAR 0 16
1847: PPUSH
1848: CALL_OW 12
1852: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1853: LD_ADDR_VAR 0 17
1857: PUSH
1858: LD_VAR 0 16
1862: PUSH
1863: LD_VAR 0 3
1867: ARRAY
1868: PUSH
1869: LD_INT 1
1871: ARRAY
1872: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1873: LD_ADDR_VAR 0 16
1877: PUSH
1878: LD_VAR 0 16
1882: PPUSH
1883: LD_VAR 0 3
1887: PPUSH
1888: LD_INT 2
1890: PPUSH
1891: LD_VAR 0 16
1895: PUSH
1896: LD_VAR 0 3
1900: ARRAY
1901: PUSH
1902: LD_INT 2
1904: ARRAY
1905: PUSH
1906: LD_INT 1
1908: MINUS
1909: PPUSH
1910: CALL 4900 0 4
1914: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1915: LD_VAR 0 16
1919: PUSH
1920: LD_VAR 0 3
1924: ARRAY
1925: PUSH
1926: LD_INT 2
1928: ARRAY
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: IFFALSE 1955
// weapons := Delete ( weapons , k ) ;
1935: LD_ADDR_VAR 0 16
1939: PUSH
1940: LD_VAR 0 16
1944: PPUSH
1945: LD_VAR 0 3
1949: PPUSH
1950: CALL_OW 3
1954: ST_TO_ADDR
// end else
1955: GO 1984
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1957: LD_ADDR_VAR 0 17
1961: PUSH
1962: LD_INT 27
1964: PUSH
1965: LD_INT 23
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 1
1974: PPUSH
1975: LD_INT 2
1977: PPUSH
1978: CALL_OW 12
1982: ARRAY
1983: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1984: LD_VAR 0 2
1988: PPUSH
1989: LD_VAR 0 17
1993: PPUSH
1994: CALL_OW 431
// end ;
1998: GO 1826
2000: POP
2001: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
2002: LD_INT 1
2004: PPUSH
2005: LD_INT 1
2007: PPUSH
2008: LD_VAR 0 8
2012: PUSH
2013: LD_INT 1
2015: PLUS
2016: PPUSH
2017: CALL_OW 380
// hc_gallery := potter ;
2021: LD_ADDR_OWVAR 33
2025: PUSH
2026: LD_STRING potter
2028: ST_TO_ADDR
// hc_face_number := 1 ;
2029: LD_ADDR_OWVAR 34
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// hc_importance := 100 ;
2037: LD_ADDR_OWVAR 32
2041: PUSH
2042: LD_INT 100
2044: ST_TO_ADDR
// hc_name := Mike Gerste ;
2045: LD_ADDR_OWVAR 26
2049: PUSH
2050: LD_STRING Mike Gerste
2052: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2053: LD_ADDR_OWVAR 29
2057: PUSH
2058: LD_INT 10
2060: PUSH
2061: LD_INT 11
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: ST_TO_ADDR
// legion_commander := CreateHuman ;
2068: LD_ADDR_EXP 1
2072: PUSH
2073: CALL_OW 44
2077: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2078: LD_EXP 1
2082: PPUSH
2083: LD_INT 23
2085: PPUSH
2086: CALL_OW 52
// uc_side := 5 ;
2090: LD_ADDR_OWVAR 20
2094: PUSH
2095: LD_INT 5
2097: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2098: LD_INT 1
2100: PPUSH
2101: LD_INT 4
2103: PPUSH
2104: LD_VAR 0 8
2108: PPUSH
2109: CALL_OW 380
// hc_gallery := potter ;
2113: LD_ADDR_OWVAR 33
2117: PUSH
2118: LD_STRING potter
2120: ST_TO_ADDR
// hc_face_number := 2 ;
2121: LD_ADDR_OWVAR 34
2125: PUSH
2126: LD_INT 2
2128: ST_TO_ADDR
// hc_importance := 0 ;
2129: LD_ADDR_OWVAR 32
2133: PUSH
2134: LD_INT 0
2136: ST_TO_ADDR
// hc_name := George Potter ;
2137: LD_ADDR_OWVAR 26
2141: PUSH
2142: LD_STRING George Potter
2144: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2145: LD_ADDR_OWVAR 29
2149: PUSH
2150: LD_INT 12
2152: PUSH
2153: LD_INT 9
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: ST_TO_ADDR
// potter := CreateHuman ;
2160: LD_ADDR_EXP 4
2164: PUSH
2165: CALL_OW 44
2169: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2170: LD_EXP 4
2174: PPUSH
2175: LD_INT 4
2177: PPUSH
2178: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2182: LD_EXP 4
2186: PPUSH
2187: LD_INT 103
2189: PPUSH
2190: LD_INT 45
2192: PPUSH
2193: LD_INT 0
2195: PPUSH
2196: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2200: LD_EXP 4
2204: PPUSH
2205: LD_INT 23
2207: PPUSH
2208: CALL_OW 119
// InitHc ( ) ;
2212: CALL_OW 19
// end ; end_of_file
2216: LD_VAR 0 1
2220: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2221: LD_INT 0
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
2227: PPUSH
// uc_side := 5 ;
2228: LD_ADDR_OWVAR 20
2232: PUSH
2233: LD_INT 5
2235: ST_TO_ADDR
// uc_nation := nation_arabian ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 2
2243: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_OWVAR 20
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 30
2263: PUSH
2264: LD_INT 5
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 69
2279: ST_TO_ADDR
// for i = 1 to 3 do
2280: LD_ADDR_VAR 0 2
2284: PUSH
2285: DOUBLE
2286: LD_INT 1
2288: DEC
2289: ST_TO_ADDR
2290: LD_INT 3
2292: PUSH
2293: FOR_TO
2294: IFFALSE 2332
// begin PrepareHuman ( false , 2 , 6 ) ;
2296: LD_INT 0
2298: PPUSH
2299: LD_INT 2
2301: PPUSH
2302: LD_INT 6
2304: PPUSH
2305: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2309: CALL_OW 44
2313: PPUSH
2314: LD_INT 27
2316: PPUSH
2317: LD_INT 22
2319: PPUSH
2320: LD_INT 5
2322: PPUSH
2323: LD_INT 0
2325: PPUSH
2326: CALL_OW 50
// end ;
2330: GO 2293
2332: POP
2333: POP
// for i = 1 to 3 do
2334: LD_ADDR_VAR 0 2
2338: PUSH
2339: DOUBLE
2340: LD_INT 1
2342: DEC
2343: ST_TO_ADDR
2344: LD_INT 3
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2383
// begin PrepareHuman ( false , 1 , 6 ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_INT 6
2358: PPUSH
2359: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2363: CALL_OW 44
2367: PPUSH
2368: LD_VAR 0 4
2372: PUSH
2373: LD_INT 1
2375: ARRAY
2376: PPUSH
2377: CALL_OW 52
// end ;
2381: GO 2347
2383: POP
2384: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: LD_INT 22
2392: PUSH
2393: LD_OWVAR 20
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PUSH
2402: LD_INT 2
2404: PUSH
2405: LD_INT 30
2407: PUSH
2408: LD_INT 31
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 30
2417: PUSH
2418: LD_INT 32
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2527
// begin PrepareHuman ( false , 1 , 6 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 1
2447: PPUSH
2448: LD_INT 6
2450: PPUSH
2451: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2455: CALL_OW 44
2459: PPUSH
2460: LD_VAR 0 2
2464: PPUSH
2465: CALL 4808 0 2
// if GetBType ( i ) = b_bunker then
2469: LD_VAR 0 2
2473: PPUSH
2474: CALL_OW 266
2478: PUSH
2479: LD_INT 32
2481: EQUAL
2482: IFFALSE 2525
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2484: LD_VAR 0 2
2488: PPUSH
2489: LD_INT 27
2491: PUSH
2492: LD_INT 25
2494: PUSH
2495: LD_INT 24
2497: PUSH
2498: LD_INT 28
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: PUSH
2507: LD_VAR 0 2
2511: PUSH
2512: LD_INT 4
2514: MOD
2515: PUSH
2516: LD_INT 1
2518: PLUS
2519: ARRAY
2520: PPUSH
2521: CALL_OW 431
// end ;
2525: GO 2439
2527: POP
2528: POP
// for i = 1 to 3 do
2529: LD_ADDR_VAR 0 2
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_INT 3
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2660
// begin vc_chassis := ar_half_tracked ;
2545: LD_ADDR_OWVAR 37
2549: PUSH
2550: LD_INT 14
2552: ST_TO_ADDR
// vc_engine := engine_solar ;
2553: LD_ADDR_OWVAR 39
2557: PUSH
2558: LD_INT 2
2560: ST_TO_ADDR
// vc_control := control_manual ;
2561: LD_ADDR_OWVAR 38
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2569: LD_ADDR_OWVAR 40
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 27
2579: PUSH
2580: LD_INT 26
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_VAR 0 2
2592: ARRAY
2593: ST_TO_ADDR
// un := CreateVehicle ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 45
2603: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2616: LD_VAR 0 3
2620: PPUSH
2621: LD_INT 8
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 3
2636: PPUSH
2637: LD_INT 7
2639: PPUSH
2640: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2644: CALL_OW 44
2648: PPUSH
2649: LD_VAR 0 3
2653: PPUSH
2654: CALL_OW 52
// end ;
2658: GO 2542
2660: POP
2661: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: LD_INT 6
2670: PPUSH
2671: CALL_OW 380
// al_commander := CreateHuman ;
2675: LD_ADDR_EXP 5
2679: PUSH
2680: CALL_OW 44
2684: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2685: LD_EXP 5
2689: PPUSH
2690: LD_INT 22
2692: PUSH
2693: LD_OWVAR 20
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 30
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: PUSH
2721: LD_INT 1
2723: ARRAY
2724: PPUSH
2725: CALL_OW 52
// InitHc ( ) ;
2729: CALL_OW 19
// end ;
2733: LD_VAR 0 1
2737: RET
// export function ChangeSide ( ) ; var i ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: LD_INT 22
2749: PUSH
2750: LD_INT 5
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 69
2761: PUSH
2762: FOR_IN
2763: IFFALSE 2779
// SetSide ( i , 8 ) ;
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_INT 8
2772: PPUSH
2773: CALL_OW 235
2777: GO 2762
2779: POP
2780: POP
// end ;
2781: LD_VAR 0 1
2785: RET
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2786: LD_INT 22
2788: PUSH
2789: LD_INT 5
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IFFALSE 3314
2802: GO 2804
2804: DISABLE
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
// begin enable ;
2813: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: LD_INT 22
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 2
2831: PUSH
2832: LD_INT 21
2834: PUSH
2835: LD_INT 1
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 21
2844: PUSH
2845: LD_INT 2
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PPUSH
2861: CALL_OW 69
2865: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2866: LD_ADDR_VAR 0 5
2870: PUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 5
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 30
2883: PUSH
2884: LD_INT 32
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: LD_INT 24
2896: PUSH
2897: LD_INT 1000
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 69
2917: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2918: LD_ADDR_VAR 0 6
2922: PUSH
2923: LD_VAR 0 2
2927: PPUSH
2928: LD_INT 3
2930: PUSH
2931: LD_INT 54
2933: PUSH
2934: EMPTY
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 25
2943: PUSH
2944: LD_INT 3
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PPUSH
2955: CALL_OW 72
2959: ST_TO_ADDR
// if not list then
2960: LD_VAR 0 2
2964: NOT
2965: IFFALSE 2969
// exit ;
2967: GO 3314
// for i in list do
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 2
2978: PUSH
2979: FOR_IN
2980: IFFALSE 3312
// begin if b then
2982: LD_VAR 0 5
2986: IFFALSE 3065
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2988: LD_ADDR_VAR 0 4
2992: PUSH
2993: LD_VAR 0 2
2997: PPUSH
2998: LD_INT 25
3000: PUSH
3001: LD_INT 2
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PPUSH
3008: CALL_OW 72
3012: PUSH
3013: FOR_IN
3014: IFFALSE 3063
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
3016: LD_VAR 0 4
3020: PPUSH
3021: CALL_OW 314
3025: NOT
3026: PUSH
3027: LD_VAR 0 1
3031: PPUSH
3032: CALL_OW 110
3036: PUSH
3037: LD_INT 7
3039: NONEQUAL
3040: AND
3041: IFFALSE 3061
// ComRepairBuilding ( j , b [ 1 ] ) ;
3043: LD_VAR 0 4
3047: PPUSH
3048: LD_VAR 0 5
3052: PUSH
3053: LD_INT 1
3055: ARRAY
3056: PPUSH
3057: CALL_OW 130
3061: GO 3013
3063: POP
3064: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 256
3074: PUSH
3075: LD_INT 500
3077: LESS
3078: PUSH
3079: LD_VAR 0 1
3083: PPUSH
3084: CALL_OW 110
3088: PUSH
3089: LD_INT 7
3091: EQUAL
3092: NOT
3093: AND
3094: IFFALSE 3144
// begin ComMoveToArea ( i , guard_hill ) ;
3096: LD_VAR 0 1
3100: PPUSH
3101: LD_INT 11
3103: PPUSH
3104: CALL_OW 113
// SetTag ( i , 7 ) ;
3108: LD_VAR 0 1
3112: PPUSH
3113: LD_INT 7
3115: PPUSH
3116: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3120: LD_VAR 0 1
3124: PPUSH
3125: CALL_OW 247
3129: PUSH
3130: LD_INT 2
3132: EQUAL
3133: IFFALSE 3144
// begin AddComExitVehicle ( i ) ;
3135: LD_VAR 0 1
3139: PPUSH
3140: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3144: LD_VAR 0 1
3148: PPUSH
3149: CALL_OW 256
3153: PUSH
3154: LD_INT 1000
3156: EQUAL
3157: PUSH
3158: LD_VAR 0 1
3162: PPUSH
3163: CALL_OW 110
3167: PUSH
3168: LD_INT 7
3170: EQUAL
3171: AND
3172: PUSH
3173: LD_VAR 0 1
3177: PPUSH
3178: CALL_OW 310
3182: NOT
3183: AND
3184: PUSH
3185: LD_VAR 0 6
3189: AND
3190: IFFALSE 3218
// begin SetTag ( i , 0 ) ;
3192: LD_VAR 0 1
3196: PPUSH
3197: LD_INT 0
3199: PPUSH
3200: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3204: LD_VAR 0 6
3208: PPUSH
3209: LD_VAR 0 1
3213: PPUSH
3214: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3218: LD_VAR 0 1
3222: PPUSH
3223: CALL_OW 247
3227: PUSH
3228: LD_INT 2
3230: EQUAL
3231: PUSH
3232: LD_VAR 0 1
3236: PPUSH
3237: CALL_OW 110
3241: PUSH
3242: LD_INT 7
3244: NONEQUAL
3245: AND
3246: PUSH
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 314
3256: NOT
3257: AND
3258: IFFALSE 3310
// if FilterAllUnits ( [ f_side , 7 ] ) then
3260: LD_INT 22
3262: PUSH
3263: LD_INT 7
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PPUSH
3270: CALL_OW 69
3274: IFFALSE 3310
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3276: LD_VAR 0 1
3280: PPUSH
3281: LD_INT 22
3283: PUSH
3284: LD_INT 7
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 69
3295: PPUSH
3296: LD_VAR 0 1
3300: PPUSH
3301: CALL_OW 74
3305: PPUSH
3306: CALL_OW 115
// end ;
3310: GO 2979
3312: POP
3313: POP
// end ; end_of_file
3314: PPOPN 6
3316: END
// export function Game ; var i , val , areas , wave ; begin
3317: LD_INT 0
3319: PPUSH
3320: PPUSH
3321: PPUSH
3322: PPUSH
3323: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3324: LD_ADDR_VAR 0 4
3328: PUSH
3329: LD_INT 1
3331: PUSH
3332: LD_INT 2
3334: PUSH
3335: LD_INT 3
3337: PUSH
3338: LD_INT 4
3340: PUSH
3341: LD_INT 5
3343: PUSH
3344: LD_INT 6
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: ST_TO_ADDR
// val := [ 5 , 6 , 7 ] [ Difficulty ] ;
3355: LD_ADDR_VAR 0 3
3359: PUSH
3360: LD_INT 5
3362: PUSH
3363: LD_INT 6
3365: PUSH
3366: LD_INT 7
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: LIST
3373: PUSH
3374: LD_OWVAR 67
3378: ARRAY
3379: ST_TO_ADDR
// wave := 1 ;
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: LD_INT 1
3387: ST_TO_ADDR
// while not game_over do
3388: LD_EXP 7
3392: NOT
3393: IFFALSE 3549
// begin repeat begin Wait ( 0 0$01 ) ;
3395: LD_INT 35
3397: PPUSH
3398: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3402: LD_ADDR_EXP 11
3406: PUSH
3407: LD_EXP 11
3411: PUSH
3412: LD_INT 35
3414: PLUS
3415: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3416: LD_INT 22
3418: PUSH
3419: LD_INT 7
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PPUSH
3426: CALL_OW 69
3430: PUSH
3431: LD_INT 10
3433: LESS
3434: PUSH
3435: LD_EXP 11
3439: PUSH
3440: LD_INT 21000
3442: GREATEREQUAL
3443: OR
3444: IFFALSE 3395
// wave_time := 0 0$00 ;
3446: LD_ADDR_EXP 11
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3454: LD_INT 5250
3456: PPUSH
3457: CALL_OW 67
// if not ignore_wave then
3461: LD_EXP 15
3465: NOT
3466: IFFALSE 3539
// begin for i = 1 to areas do
3468: LD_ADDR_VAR 0 2
3472: PUSH
3473: DOUBLE
3474: LD_INT 1
3476: DEC
3477: ST_TO_ADDR
3478: LD_VAR 0 4
3482: PUSH
3483: FOR_TO
3484: IFFALSE 3521
// begin SpawnPotter ( wave + val , areas [ i ] ) ;
3486: LD_VAR 0 5
3490: PUSH
3491: LD_VAR 0 3
3495: PLUS
3496: PPUSH
3497: LD_VAR 0 4
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PPUSH
3508: CALL 3554 0 2
// Wait ( 0 0$10 ) ;
3512: LD_INT 350
3514: PPUSH
3515: CALL_OW 67
// end ;
3519: GO 3483
3521: POP
3522: POP
// wave := wave + 1 ;
3523: LD_ADDR_VAR 0 5
3527: PUSH
3528: LD_VAR 0 5
3532: PUSH
3533: LD_INT 1
3535: PLUS
3536: ST_TO_ADDR
// end else
3537: GO 3547
// ignore_wave := false ;
3539: LD_ADDR_EXP 15
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// end ;
3547: GO 3388
// end ;
3549: LD_VAR 0 1
3553: RET
// export function SpawnPotter ( val , area ) ; var i , v , un , class ; begin
3554: LD_INT 0
3556: PPUSH
3557: PPUSH
3558: PPUSH
3559: PPUSH
3560: PPUSH
// uc_side := 7 ;
3561: LD_ADDR_OWVAR 20
3565: PUSH
3566: LD_INT 7
3568: ST_TO_ADDR
// uc_nation := 2 ;
3569: LD_ADDR_OWVAR 21
3573: PUSH
3574: LD_INT 2
3576: ST_TO_ADDR
// v := 10 + ( tick div 5 5$00 ) ;
3577: LD_ADDR_VAR 0 5
3581: PUSH
3582: LD_INT 10
3584: PUSH
3585: LD_OWVAR 1
3589: PUSH
3590: LD_INT 10500
3592: DIV
3593: PLUS
3594: ST_TO_ADDR
// if v > 25 then
3595: LD_VAR 0 5
3599: PUSH
3600: LD_INT 25
3602: GREATER
3603: IFFALSE 3613
// v := 25 ;
3605: LD_ADDR_VAR 0 5
3609: PUSH
3610: LD_INT 25
3612: ST_TO_ADDR
// InitHc ( ) ;
3613: CALL_OW 19
// hc_gallery :=  ;
3617: LD_ADDR_OWVAR 33
3621: PUSH
3622: LD_STRING 
3624: ST_TO_ADDR
// hc_importance := 0 ;
3625: LD_ADDR_OWVAR 32
3629: PUSH
3630: LD_INT 0
3632: ST_TO_ADDR
// hc_name :=  ;
3633: LD_ADDR_OWVAR 26
3637: PUSH
3638: LD_STRING 
3640: ST_TO_ADDR
// hc_attr := [ v , v ] ;
3641: LD_ADDR_OWVAR 29
3645: PUSH
3646: LD_VAR 0 5
3650: PUSH
3651: LD_VAR 0 5
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: ST_TO_ADDR
// if val > 35 then
3660: LD_VAR 0 1
3664: PUSH
3665: LD_INT 35
3667: GREATER
3668: IFFALSE 3678
// val := 35 ;
3670: LD_ADDR_VAR 0 1
3674: PUSH
3675: LD_INT 35
3677: ST_TO_ADDR
// for i = 1 to val do
3678: LD_ADDR_VAR 0 4
3682: PUSH
3683: DOUBLE
3684: LD_INT 1
3686: DEC
3687: ST_TO_ADDR
3688: LD_VAR 0 1
3692: PUSH
3693: FOR_TO
3694: IFFALSE 3905
// begin if i mod 9 = 0 then
3696: LD_VAR 0 4
3700: PUSH
3701: LD_INT 9
3703: MOD
3704: PUSH
3705: LD_INT 0
3707: EQUAL
3708: IFFALSE 3720
// class := class_apeman_kamikaze else
3710: LD_ADDR_VAR 0 7
3714: PUSH
3715: LD_INT 17
3717: ST_TO_ADDR
3718: GO 3752
// if i mod 4 = 0 then
3720: LD_VAR 0 4
3724: PUSH
3725: LD_INT 4
3727: MOD
3728: PUSH
3729: LD_INT 0
3731: EQUAL
3732: IFFALSE 3744
// class := class_apeman_soldier else
3734: LD_ADDR_VAR 0 7
3738: PUSH
3739: LD_INT 15
3741: ST_TO_ADDR
3742: GO 3752
// class := class_apeman ;
3744: LD_ADDR_VAR 0 7
3748: PUSH
3749: LD_INT 12
3751: ST_TO_ADDR
// if i mod 6 = 0 then
3752: LD_VAR 0 4
3756: PUSH
3757: LD_INT 6
3759: MOD
3760: PUSH
3761: LD_INT 0
3763: EQUAL
3764: IFFALSE 3837
// begin vc_chassis := ar_half_tracked ;
3766: LD_ADDR_OWVAR 37
3770: PUSH
3771: LD_INT 14
3773: ST_TO_ADDR
// vc_control := control_apeman ;
3774: LD_ADDR_OWVAR 38
3778: PUSH
3779: LD_INT 5
3781: ST_TO_ADDR
// vc_engine := engine_siberite ;
3782: LD_ADDR_OWVAR 39
3786: PUSH
3787: LD_INT 3
3789: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb , ar_bio_bomb ] [ rand ( 1 , 4 ) ] ;
3790: LD_ADDR_OWVAR 40
3794: PUSH
3795: LD_INT 28
3797: PUSH
3798: LD_INT 27
3800: PUSH
3801: LD_INT 29
3803: PUSH
3804: LD_INT 91
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 1
3815: PPUSH
3816: LD_INT 4
3818: PPUSH
3819: CALL_OW 12
3823: ARRAY
3824: ST_TO_ADDR
// un := CreateVehicle ;
3825: LD_ADDR_VAR 0 6
3829: PUSH
3830: CALL_OW 45
3834: ST_TO_ADDR
// end else
3835: GO 3862
// begin PrepareHuman ( sex_male , class , 10 ) ;
3837: LD_INT 1
3839: PPUSH
3840: LD_VAR 0 7
3844: PPUSH
3845: LD_INT 10
3847: PPUSH
3848: CALL_OW 380
// un := CreateHuman ;
3852: LD_ADDR_VAR 0 6
3856: PUSH
3857: CALL_OW 44
3861: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3862: LD_VAR 0 6
3866: PPUSH
3867: LD_VAR 0 2
3871: PPUSH
3872: LD_INT 0
3874: PPUSH
3875: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3879: LD_VAR 0 6
3883: PPUSH
3884: CALL_OW 250
3888: PPUSH
3889: LD_VAR 0 6
3893: PPUSH
3894: CALL_OW 251
3898: PPUSH
3899: CALL_OW 494
// end ;
3903: GO 3693
3905: POP
3906: POP
// end ;
3907: LD_VAR 0 3
3911: RET
// every 0 0$3 trigger alert and not game_over do var i , list , enemy ;
3912: LD_EXP 6
3916: PUSH
3917: LD_EXP 7
3921: NOT
3922: AND
3923: IFFALSE 4042
3925: GO 3927
3927: DISABLE
3928: LD_INT 0
3930: PPUSH
3931: PPUSH
3932: PPUSH
// begin enable ;
3933: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3934: LD_ADDR_VAR 0 2
3938: PUSH
3939: LD_INT 22
3941: PUSH
3942: LD_INT 7
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PPUSH
3949: CALL_OW 69
3953: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
3954: LD_ADDR_VAR 0 3
3958: PUSH
3959: LD_INT 81
3961: PUSH
3962: LD_INT 7
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PPUSH
3969: CALL_OW 69
3973: ST_TO_ADDR
// if not list then
3974: LD_VAR 0 2
3978: NOT
3979: IFFALSE 3983
// exit ;
3981: GO 4042
// for i in list do
3983: LD_ADDR_VAR 0 1
3987: PUSH
3988: LD_VAR 0 2
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4040
// begin if enemy then
3996: LD_VAR 0 3
4000: IFFALSE 4038
// if not HasTask ( i ) then
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 314
4011: NOT
4012: IFFALSE 4038
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4014: LD_VAR 0 1
4018: PPUSH
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: CALL_OW 74
4033: PPUSH
4034: CALL_OW 115
// end ;
4038: GO 3993
4040: POP
4041: POP
// end ; end_of_file
4042: PPOPN 3
4044: END
// export function Action ; begin
4045: LD_INT 0
4047: PPUSH
// InGameOn ;
4048: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4052: LD_INT 23
4054: PPUSH
4055: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4059: LD_EXP 1
4063: PPUSH
4064: LD_STRING DL-1
4066: PPUSH
4067: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4071: LD_EXP 2
4075: PPUSH
4076: LD_STRING DA-1
4078: PPUSH
4079: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4083: LD_EXP 3
4087: PPUSH
4088: LD_STRING DA-2
4090: PPUSH
4091: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4095: LD_EXP 1
4099: PPUSH
4100: LD_STRING DL-2
4102: PPUSH
4103: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4107: LD_EXP 3
4111: PPUSH
4112: LD_STRING DA-3
4114: PPUSH
4115: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4119: LD_EXP 1
4123: PPUSH
4124: LD_STRING DL-3
4126: PPUSH
4127: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4131: LD_EXP 2
4135: PPUSH
4136: LD_STRING DA-4
4138: PPUSH
4139: CALL_OW 88
// if not dialogue_skipped then
4143: LD_OWVAR 59
4147: NOT
4148: IFFALSE 4233
// begin Wait ( 0 0$01 ) ;
4150: LD_INT 35
4152: PPUSH
4153: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4157: LD_EXP 2
4161: PUSH
4162: LD_EXP 3
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: PPUSH
4171: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4175: LD_EXP 2
4179: PPUSH
4180: LD_INT 107
4182: PPUSH
4183: LD_INT 53
4185: PPUSH
4186: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4190: LD_EXP 3
4194: PPUSH
4195: LD_INT 108
4197: PPUSH
4198: LD_INT 53
4200: PPUSH
4201: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4205: LD_EXP 2
4209: PPUSH
4210: LD_EXP 4
4214: PPUSH
4215: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4219: LD_EXP 3
4223: PPUSH
4224: LD_EXP 4
4228: PPUSH
4229: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4233: LD_INT 35
4235: PPUSH
4236: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4240: LD_EXP 2
4244: PPUSH
4245: LD_INT 107
4247: PPUSH
4248: LD_INT 53
4250: PPUSH
4251: CALL_OW 307
4255: PUSH
4256: LD_OWVAR 59
4260: OR
4261: IFFALSE 4233
// if not dialogue_skipped then
4263: LD_OWVAR 59
4267: NOT
4268: IFFALSE 4369
// begin ComTurnUnit ( potter , l1 ) ;
4270: LD_EXP 4
4274: PPUSH
4275: LD_EXP 2
4279: PPUSH
4280: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4284: LD_INT 10
4286: PPUSH
4287: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4291: LD_EXP 4
4295: PPUSH
4296: LD_INT 108
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 0
4304: PPUSH
4305: LD_INT 0
4307: PPUSH
4308: CALL_OW 483
// Wait ( 0 0$01 ) ;
4312: LD_INT 35
4314: PPUSH
4315: CALL_OW 67
// RemoveUnit ( potter ) ;
4319: LD_EXP 4
4323: PPUSH
4324: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4328: LD_EXP 2
4332: PPUSH
4333: LD_STRING DA-5
4335: PPUSH
4336: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4340: LD_EXP 3
4344: PPUSH
4345: LD_STRING DA-6
4347: PPUSH
4348: CALL_OW 88
// Wait ( 0 0$02 ) ;
4352: LD_INT 70
4354: PPUSH
4355: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4359: LD_INT 25
4361: PPUSH
4362: LD_INT 19
4364: PPUSH
4365: CALL_OW 84
// end ; SpawnPotter ( 20 , north_west_1 ) ;
4369: LD_INT 20
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: CALL 3554 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4379: LD_EXP 5
4383: PPUSH
4384: LD_STRING DLa-1
4386: PPUSH
4387: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4391: LD_EXP 1
4395: PPUSH
4396: LD_STRING DL-5
4398: PPUSH
4399: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4403: LD_INT 23
4405: PPUSH
4406: CALL_OW 87
// InGameOff ;
4410: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4414: LD_STRING C1
4416: PPUSH
4417: CALL_OW 337
// alert := true ;
4421: LD_ADDR_EXP 6
4425: PUSH
4426: LD_INT 1
4428: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4429: LD_EXP 5
4433: PPUSH
4434: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4438: LD_EXP 5
4442: PPUSH
4443: LD_INT 11
4445: PPUSH
4446: CALL_OW 173
// Wait ( 0 0$30 ) ;
4450: LD_INT 1050
4452: PPUSH
4453: CALL_OW 67
// SpawnPotter ( 10 , north_4 ) ;
4457: LD_INT 10
4459: PPUSH
4460: LD_INT 4
4462: PPUSH
4463: CALL 3554 0 2
// Wait ( 0 0$35 ) ;
4467: LD_INT 1225
4469: PPUSH
4470: CALL_OW 67
// SpawnPotter ( 10 , east_5 ) ;
4474: LD_INT 10
4476: PPUSH
4477: LD_INT 5
4479: PPUSH
4480: CALL 3554 0 2
// Wait ( 0 0$03 ) ;
4484: LD_INT 105
4486: PPUSH
4487: CALL_OW 67
// Game ;
4491: CALL 3317 0 0
// end ;
4495: LD_VAR 0 1
4499: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 1500 do var tmp , i ;
4500: LD_INT 22
4502: PUSH
4503: LD_INT 7
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PUSH
4515: LD_INT 0
4517: EQUAL
4518: PUSH
4519: LD_EXP 10
4523: PUSH
4524: LD_INT 1500
4526: GREATEREQUAL
4527: AND
4528: IFFALSE 4756
4530: GO 4532
4532: DISABLE
4533: LD_INT 0
4535: PPUSH
4536: PPUSH
// begin DialogueOn ;
4537: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4541: LD_EXP 12
4545: PPUSH
4546: LD_STRING DVr-1
4548: PPUSH
4549: CALL_OW 94
// DialogueOff ;
4553: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4557: LD_STRING QBonusInfo
4559: PPUSH
4560: CALL_OW 97
4564: PUSH
4565: LD_INT 1
4567: DOUBLE
4568: EQUAL
4569: IFTRUE 4573
4571: GO 4584
4573: POP
// bonus_active := true ; end ;
4574: LD_ADDR_EXP 13
4578: PUSH
4579: LD_INT 1
4581: ST_TO_ADDR
4582: GO 4585
4584: POP
// bonus_num := 4 ;
4585: LD_ADDR_EXP 14
4589: PUSH
4590: LD_INT 4
4592: ST_TO_ADDR
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ;
4593: LD_OWVAR 2
4597: PPUSH
4598: LD_INT 12
4600: PPUSH
4601: LD_INT 2
4603: PPUSH
4604: LD_INT 23
4606: PPUSH
4607: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4611: LD_ADDR_VAR 0 1
4615: PUSH
4616: LD_INT 500
4618: PUSH
4619: LD_INT 3500
4621: PUSH
4622: LD_INT 5750
4624: PUSH
4625: LD_INT 10000
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4634: LD_INT 10500
4636: PUSH
4637: LD_INT 12600
4639: PUSH
4640: LD_INT 14700
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: PUSH
4648: LD_OWVAR 67
4652: ARRAY
4653: PPUSH
4654: CALL_OW 67
// for i = 1 to tmp do
4658: LD_ADDR_VAR 0 2
4662: PUSH
4663: DOUBLE
4664: LD_INT 1
4666: DEC
4667: ST_TO_ADDR
4668: LD_VAR 0 1
4672: PUSH
4673: FOR_TO
4674: IFFALSE 4706
// if points >= tmp [ i ] then
4676: LD_EXP 10
4680: PUSH
4681: LD_VAR 0 1
4685: PUSH
4686: LD_VAR 0 2
4690: ARRAY
4691: GREATEREQUAL
4692: IFFALSE 4704
// bonus_num := i ;
4694: LD_ADDR_EXP 14
4698: PUSH
4699: LD_VAR 0 2
4703: ST_TO_ADDR
4704: GO 4673
4706: POP
4707: POP
// case Query ( QBonusInfo ) of 1 :
4708: LD_STRING QBonusInfo
4710: PPUSH
4711: CALL_OW 97
4715: PUSH
4716: LD_INT 1
4718: DOUBLE
4719: EQUAL
4720: IFTRUE 4724
4722: GO 4745
4724: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4725: LD_OWVAR 2
4729: PPUSH
4730: LD_INT 12
4732: PPUSH
4733: LD_INT 2
4735: PPUSH
4736: LD_INT 23
4738: PPUSH
4739: CALL_OW 468
4743: GO 4746
4745: POP
// until points >= 15000 ;
4746: LD_EXP 10
4750: PUSH
4751: LD_INT 15000
4753: GREATEREQUAL
4754: IFFALSE 4634
// end ;
4756: PPOPN 2
4758: END
// export function Win ; begin
4759: LD_INT 0
4761: PPUSH
// AddMedal ( med , 1 ) ;
4762: LD_STRING med
4764: PPUSH
4765: LD_INT 1
4767: PPUSH
4768: CALL_OW 101
// AddMedal ( med , 1 ) ;
4772: LD_STRING med
4774: PPUSH
4775: LD_INT 1
4777: PPUSH
4778: CALL_OW 101
// AddMedal ( med , 1 ) ;
4782: LD_STRING med
4784: PPUSH
4785: LD_INT 1
4787: PPUSH
4788: CALL_OW 101
// GiveMedals ( MAIN ) ;
4792: LD_STRING MAIN
4794: PPUSH
4795: CALL_OW 102
// YouWin ;
4799: CALL_OW 103
// end ; end_of_file
4803: LD_VAR 0 1
4807: RET
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
4808: LD_INT 0
4810: PPUSH
4811: PPUSH
// dir := GetDir ( b ) ;
4812: LD_ADDR_VAR 0 4
4816: PUSH
4817: LD_VAR 0 2
4821: PPUSH
4822: CALL_OW 254
4826: ST_TO_ADDR
// if dir < 3 then
4827: LD_VAR 0 4
4831: PUSH
4832: LD_INT 3
4834: LESS
4835: IFFALSE 4853
// dir := dir + 3 else
4837: LD_ADDR_VAR 0 4
4841: PUSH
4842: LD_VAR 0 4
4846: PUSH
4847: LD_INT 3
4849: PLUS
4850: ST_TO_ADDR
4851: GO 4867
// dir := dir - 3 ;
4853: LD_ADDR_VAR 0 4
4857: PUSH
4858: LD_VAR 0 4
4862: PUSH
4863: LD_INT 3
4865: MINUS
4866: ST_TO_ADDR
// SetDir ( un , dir ) ;
4867: LD_VAR 0 1
4871: PPUSH
4872: LD_VAR 0 4
4876: PPUSH
4877: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4881: LD_VAR 0 1
4885: PPUSH
4886: LD_VAR 0 2
4890: PPUSH
4891: CALL_OW 52
// end ;
4895: LD_VAR 0 3
4899: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
4900: LD_INT 0
4902: PPUSH
4903: PPUSH
4904: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
4905: LD_ADDR_VAR 0 7
4909: PUSH
4910: LD_VAR 0 1
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_VAR 0 4
4930: PPUSH
4931: CALL_OW 1
4935: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
4936: LD_ADDR_VAR 0 1
4940: PUSH
4941: LD_VAR 0 1
4945: PPUSH
4946: LD_VAR 0 2
4950: PPUSH
4951: LD_VAR 0 7
4955: PPUSH
4956: CALL_OW 1
4960: ST_TO_ADDR
// result := tab ;
4961: LD_ADDR_VAR 0 5
4965: PUSH
4966: LD_VAR 0 1
4970: ST_TO_ADDR
// end ;
4971: LD_VAR 0 5
4975: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
4976: LD_INT 0
4978: PPUSH
4979: PPUSH
4980: PPUSH
// if not GetControl ( veh ) = control_manual then
4981: LD_VAR 0 1
4985: PPUSH
4986: CALL_OW 263
4990: PUSH
4991: LD_INT 1
4993: EQUAL
4994: NOT
4995: IFFALSE 5007
// result := false else
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: LD_INT 0
5004: ST_TO_ADDR
5005: GO 5152
// if veh in FilterAllUnits ( [ f_empty ] ) then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 58
5014: PUSH
5015: EMPTY
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: IN
5023: IFFALSE 5035
// result := false else
5025: LD_ADDR_VAR 0 2
5029: PUSH
5030: LD_INT 0
5032: ST_TO_ADDR
5033: GO 5152
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5035: LD_ADDR_VAR 0 4
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_VAR 0 1
5047: PPUSH
5048: CALL_OW 255
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 55
5059: PUSH
5060: EMPTY
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 69
5071: ST_TO_ADDR
// if not filter then
5072: LD_VAR 0 4
5076: NOT
5077: IFFALSE 5089
// result := false else
5079: LD_ADDR_VAR 0 2
5083: PUSH
5084: LD_INT 0
5086: ST_TO_ADDR
5087: GO 5152
// for i = 1 to filter do
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: DOUBLE
5095: LD_INT 1
5097: DEC
5098: ST_TO_ADDR
5099: LD_VAR 0 4
5103: PUSH
5104: FOR_TO
5105: IFFALSE 5150
// if IsDriver ( filter [ i ] ) = veh then
5107: LD_VAR 0 4
5111: PUSH
5112: LD_VAR 0 3
5116: ARRAY
5117: PPUSH
5118: CALL 62891 0 1
5122: PUSH
5123: LD_VAR 0 1
5127: EQUAL
5128: IFFALSE 5148
// begin result := filter [ i ] ;
5130: LD_ADDR_VAR 0 2
5134: PUSH
5135: LD_VAR 0 4
5139: PUSH
5140: LD_VAR 0 3
5144: ARRAY
5145: ST_TO_ADDR
// break ;
5146: GO 5150
// end ;
5148: GO 5104
5150: POP
5151: POP
// end ; end ; end_of_file
5152: LD_VAR 0 2
5156: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: CALL 22857 0 1
// if un = legion_commander then
5166: LD_VAR 0 1
5170: PUSH
5171: LD_EXP 1
5175: EQUAL
5176: IFFALSE 5185
// YouLost ( commanderDied ) ;
5178: LD_STRING commanderDied
5180: PPUSH
5181: CALL_OW 104
// if un in [ legion_commander , main_base ] then
5185: LD_VAR 0 1
5189: PUSH
5190: LD_EXP 1
5194: PUSH
5195: LD_INT 23
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: IN
5202: IFFALSE 5212
// game_over := true ;
5204: LD_ADDR_EXP 7
5208: PUSH
5209: LD_INT 1
5211: ST_TO_ADDR
// if un = al_commander then
5212: LD_VAR 0 1
5216: PUSH
5217: LD_EXP 5
5221: EQUAL
5222: IFFALSE 5228
// ChangeSide ( ) ;
5224: CALL 2738 0 0
// if GetSide ( un ) = 7 then
5228: LD_VAR 0 1
5232: PPUSH
5233: CALL_OW 255
5237: PUSH
5238: LD_INT 7
5240: EQUAL
5241: IFFALSE 5359
// begin if GetClass ( un ) = class_apeman then
5243: LD_VAR 0 1
5247: PPUSH
5248: CALL_OW 257
5252: PUSH
5253: LD_INT 12
5255: EQUAL
5256: IFFALSE 5272
// points := points + 6 ;
5258: LD_ADDR_EXP 10
5262: PUSH
5263: LD_EXP 10
5267: PUSH
5268: LD_INT 6
5270: PLUS
5271: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5272: LD_VAR 0 1
5276: PPUSH
5277: CALL_OW 257
5281: PUSH
5282: LD_INT 17
5284: EQUAL
5285: IFFALSE 5301
// points := points + 11 ;
5287: LD_ADDR_EXP 10
5291: PUSH
5292: LD_EXP 10
5296: PUSH
5297: LD_INT 11
5299: PLUS
5300: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5301: LD_VAR 0 1
5305: PPUSH
5306: CALL_OW 257
5310: PUSH
5311: LD_INT 15
5313: EQUAL
5314: IFFALSE 5330
// points := points + 14 ;
5316: LD_ADDR_EXP 10
5320: PUSH
5321: LD_EXP 10
5325: PUSH
5326: LD_INT 14
5328: PLUS
5329: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5330: LD_VAR 0 1
5334: PPUSH
5335: CALL_OW 247
5339: PUSH
5340: LD_INT 2
5342: EQUAL
5343: IFFALSE 5359
// points := points + 50 ;
5345: LD_ADDR_EXP 10
5349: PUSH
5350: LD_EXP 10
5354: PUSH
5355: LD_INT 50
5357: PLUS
5358: ST_TO_ADDR
// end ; end ;
5359: PPOPN 1
5361: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5362: LD_EXP 5
5366: PPUSH
5367: CALL_OW 256
5371: PUSH
5372: LD_INT 1000
5374: LESS
5375: IFFALSE 5407
5377: GO 5379
5379: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5380: LD_EXP 5
5384: PPUSH
5385: CALL_OW 504
5389: PPUSH
5390: CALL_OW 255
5394: PUSH
5395: LD_INT 8
5397: EQUAL
5398: IFFALSE 5407
// YouLost ( FriendlyFire ) ;
5400: LD_STRING FriendlyFire
5402: PPUSH
5403: CALL_OW 104
5407: END
// on DialogueSkipped ( value ) do var i ;
5408: LD_INT 0
5410: PPUSH
// begin RemoveUnit ( potter ) ;
5411: LD_EXP 4
5415: PPUSH
5416: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5420: LD_EXP 2
5424: PUSH
5425: LD_EXP 3
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PPUSH
5434: CALL_OW 122
// Wait ( 1 ) ;
5438: LD_INT 1
5440: PPUSH
5441: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5445: LD_EXP 2
5449: PPUSH
5450: LD_INT 107
5452: PPUSH
5453: LD_INT 53
5455: PPUSH
5456: LD_INT 0
5458: PPUSH
5459: LD_INT 0
5461: PPUSH
5462: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5466: LD_EXP 3
5470: PPUSH
5471: LD_INT 108
5473: PPUSH
5474: LD_INT 53
5476: PPUSH
5477: LD_INT 0
5479: PPUSH
5480: LD_INT 0
5482: PPUSH
5483: CALL_OW 483
// Wait ( 1 ) ;
5487: LD_INT 1
5489: PPUSH
5490: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5494: LD_EXP 2
5498: PUSH
5499: LD_EXP 3
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PPUSH
5508: LD_INT 108
5510: PPUSH
5511: LD_INT 1
5513: PPUSH
5514: CALL_OW 118
// end ;
5518: PPOPN 2
5520: END
// on ArtifactUsed ( side , icon , p3 , p4 ) do var bonus , off , units , crates , tmp , xy , i , lab ;
5521: LD_INT 0
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
5530: PPUSH
// begin xy := FindArtifact ( 2 ) ;
5531: LD_ADDR_VAR 0 10
5535: PUSH
5536: LD_INT 2
5538: PPUSH
5539: CALL_OW 469
5543: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
5544: LD_ADDR_VAR 0 12
5548: PUSH
5549: LD_INT 22
5551: PUSH
5552: LD_OWVAR 2
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 2
5563: PUSH
5564: LD_INT 30
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: LD_INT 30
5576: PUSH
5577: LD_INT 11
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PPUSH
5593: CALL_OW 69
5597: PPUSH
5598: LD_VAR 0 10
5602: PUSH
5603: LD_INT 1
5605: ARRAY
5606: PPUSH
5607: LD_VAR 0 10
5611: PUSH
5612: LD_INT 2
5614: ARRAY
5615: PPUSH
5616: CALL_OW 73
5620: ST_TO_ADDR
// if icon = art_exp_left then
5621: LD_VAR 0 2
5625: PUSH
5626: LD_INT 1
5628: EQUAL
5629: IFFALSE 5684
// begin SetSpecResearch ( lab , time_res_art , true ) ;
5631: LD_VAR 0 12
5635: PPUSH
5636: LD_EXP 9
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
5648: LD_VAR 0 12
5652: PPUSH
5653: LD_EXP 17
5657: PPUSH
5658: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
5662: LD_OWVAR 2
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 0
5672: PPUSH
5673: LD_VAR 0 12
5677: PPUSH
5678: CALL_OW 468
// end else
5682: GO 6465
// begin DialogueOn ;
5684: CALL_OW 6
// uc_side := 8 ;
5688: LD_ADDR_OWVAR 20
5692: PUSH
5693: LD_INT 8
5695: ST_TO_ADDR
// uc_nation := 2 ;
5696: LD_ADDR_OWVAR 21
5700: PUSH
5701: LD_INT 2
5703: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5704: LD_ADDR_VAR 0 5
5708: PUSH
5709: LD_STRING QBonus
5711: PUSH
5712: LD_EXP 14
5716: STR
5717: ST_TO_ADDR
// off := true ;
5718: LD_ADDR_VAR 0 6
5722: PUSH
5723: LD_INT 1
5725: ST_TO_ADDR
// units := [ ] ;
5726: LD_ADDR_VAR 0 7
5730: PUSH
5731: EMPTY
5732: ST_TO_ADDR
// crates := 0 ;
5733: LD_ADDR_VAR 0 8
5737: PUSH
5738: LD_INT 0
5740: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5741: LD_EXP 12
5745: PPUSH
5746: LD_STRING DVr-2
5748: PPUSH
5749: CALL_OW 94
// wait ( 0 0$1 ) ;
5753: LD_INT 35
5755: PPUSH
5756: CALL_OW 67
// case Query ( bonus ) of 1 :
5760: LD_VAR 0 5
5764: PPUSH
5765: CALL_OW 97
5769: PUSH
5770: LD_INT 1
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5863
5778: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5779: LD_ADDR_VAR 0 9
5783: PUSH
5784: LD_INT 1
5786: PUSH
5787: LD_INT 2
5789: PUSH
5790: LD_INT 5
5792: PUSH
5793: LD_INT 8
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: PUSH
5802: LD_EXP 14
5806: ARRAY
5807: ST_TO_ADDR
// for i = 1 to tmp do
5808: LD_ADDR_VAR 0 11
5812: PUSH
5813: DOUBLE
5814: LD_INT 1
5816: DEC
5817: ST_TO_ADDR
5818: LD_VAR 0 9
5822: PUSH
5823: FOR_TO
5824: IFFALSE 5859
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5826: LD_INT 0
5828: PPUSH
5829: LD_INT 15
5831: PPUSH
5832: LD_VAR 0 9
5836: PPUSH
5837: CALL_OW 380
// units := units ^ CreateHuman ;
5841: LD_ADDR_VAR 0 7
5845: PUSH
5846: LD_VAR 0 7
5850: PUSH
5851: CALL_OW 44
5855: ADD
5856: ST_TO_ADDR
// end ;
5857: GO 5823
5859: POP
5860: POP
// end ; 2 :
5861: GO 6271
5863: LD_INT 2
5865: DOUBLE
5866: EQUAL
5867: IFTRUE 5871
5869: GO 5903
5871: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5872: LD_ADDR_VAR 0 8
5876: PUSH
5877: LD_INT 100
5879: PUSH
5880: LD_INT 150
5882: PUSH
5883: LD_INT 350
5885: PUSH
5886: LD_INT 500
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PUSH
5895: LD_EXP 14
5899: ARRAY
5900: ST_TO_ADDR
// end ; 3 :
5901: GO 6271
5903: LD_INT 3
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 6251
5911: POP
// begin if bonus_num = 1 then
5912: LD_EXP 14
5916: PUSH
5917: LD_INT 1
5919: EQUAL
5920: IFFALSE 5930
// ignore_wave := true ;
5922: LD_ADDR_EXP 15
5926: PUSH
5927: LD_INT 1
5929: ST_TO_ADDR
// if bonus_num = 2 then
5930: LD_EXP 14
5934: PUSH
5935: LD_INT 2
5937: EQUAL
5938: IFFALSE 6058
// begin for i = 1 to 2 do
5940: LD_ADDR_VAR 0 11
5944: PUSH
5945: DOUBLE
5946: LD_INT 1
5948: DEC
5949: ST_TO_ADDR
5950: LD_INT 2
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6056
// begin uc_nation := nation_arabian ;
5956: LD_ADDR_OWVAR 21
5960: PUSH
5961: LD_INT 2
5963: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5964: LD_ADDR_OWVAR 37
5968: PUSH
5969: LD_INT 14
5971: ST_TO_ADDR
// vc_engine := engine_siberite ;
5972: LD_ADDR_OWVAR 39
5976: PUSH
5977: LD_INT 3
5979: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
5980: LD_ADDR_OWVAR 38
5984: PUSH
5985: LD_INT 2
5987: PUSH
5988: LD_INT 5
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: LD_INT 1
5997: PPUSH
5998: LD_INT 2
6000: PPUSH
6001: CALL_OW 12
6005: ARRAY
6006: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6007: LD_ADDR_OWVAR 40
6011: PUSH
6012: LD_INT 28
6014: PUSH
6015: LD_INT 27
6017: PUSH
6018: LD_INT 25
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 1
6028: PPUSH
6029: LD_INT 3
6031: PPUSH
6032: CALL_OW 12
6036: ARRAY
6037: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6038: LD_ADDR_VAR 0 7
6042: PUSH
6043: LD_VAR 0 7
6047: PUSH
6048: CALL_OW 45
6052: ADD
6053: ST_TO_ADDR
// end ;
6054: GO 5953
6056: POP
6057: POP
// end ; if bonus_num = 3 then
6058: LD_EXP 14
6062: PUSH
6063: LD_INT 3
6065: EQUAL
6066: IFFALSE 6190
// begin for i = 1 to 4 do
6068: LD_ADDR_VAR 0 11
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 4
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6188
// begin uc_nation := nation_arabian ;
6084: LD_ADDR_OWVAR 21
6088: PUSH
6089: LD_INT 2
6091: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6092: LD_ADDR_OWVAR 37
6096: PUSH
6097: LD_INT 14
6099: ST_TO_ADDR
// vc_engine := engine_siberite ;
6100: LD_ADDR_OWVAR 39
6104: PUSH
6105: LD_INT 3
6107: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6108: LD_ADDR_OWVAR 38
6112: PUSH
6113: LD_INT 2
6115: PUSH
6116: LD_INT 5
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 1
6125: PPUSH
6126: LD_INT 2
6128: PPUSH
6129: CALL_OW 12
6133: ARRAY
6134: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6135: LD_ADDR_OWVAR 40
6139: PUSH
6140: LD_INT 28
6142: PUSH
6143: LD_INT 27
6145: PUSH
6146: LD_INT 28
6148: PUSH
6149: LD_INT 25
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_INT 4
6163: PPUSH
6164: CALL_OW 12
6168: ARRAY
6169: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6170: LD_ADDR_VAR 0 7
6174: PUSH
6175: LD_VAR 0 7
6179: PUSH
6180: CALL_OW 45
6184: ADD
6185: ST_TO_ADDR
// end ;
6186: GO 6081
6188: POP
6189: POP
// end ; if bonus_num = 4 then
6190: LD_EXP 14
6194: PUSH
6195: LD_INT 4
6197: EQUAL
6198: IFFALSE 6249
// for i = 1 to 3 do
6200: LD_ADDR_VAR 0 11
6204: PUSH
6205: DOUBLE
6206: LD_INT 1
6208: DEC
6209: ST_TO_ADDR
6210: LD_INT 3
6212: PUSH
6213: FOR_TO
6214: IFFALSE 6247
// begin PrepareHuman ( false , 3 , 8 ) ;
6216: LD_INT 0
6218: PPUSH
6219: LD_INT 3
6221: PPUSH
6222: LD_INT 8
6224: PPUSH
6225: CALL_OW 380
// units := units ^ CreateHuman ;
6229: LD_ADDR_VAR 0 7
6233: PUSH
6234: LD_VAR 0 7
6238: PUSH
6239: CALL_OW 44
6243: ADD
6244: ST_TO_ADDR
// end ;
6245: GO 6213
6247: POP
6248: POP
// end ; 4 :
6249: GO 6271
6251: LD_INT 4
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6270
6259: POP
// off := false ; end ;
6260: LD_ADDR_VAR 0 6
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
6268: GO 6271
6270: POP
// DialogueOff ;
6271: CALL_OW 7
// if not off then
6275: LD_VAR 0 6
6279: NOT
6280: IFFALSE 6286
// exit else
6282: GO 6465
6284: GO 6339
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6286: LD_OWVAR 2
6290: PPUSH
6291: LD_INT 12
6293: PPUSH
6294: LD_INT 0
6296: PPUSH
6297: LD_INT 23
6299: PPUSH
6300: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6304: LD_EXP 12
6308: PPUSH
6309: LD_STRING DVr-3
6311: PUSH
6312: LD_STRING DVr-3a
6314: PUSH
6315: LD_STRING DVr-3b
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 1
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: CALL_OW 12
6333: ARRAY
6334: PPUSH
6335: CALL_OW 94
// end ; if units then
6339: LD_VAR 0 7
6343: IFFALSE 6407
// for i in units do
6345: LD_ADDR_VAR 0 11
6349: PUSH
6350: LD_VAR 0 7
6354: PUSH
6355: FOR_IN
6356: IFFALSE 6405
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6358: LD_VAR 0 11
6362: PPUSH
6363: LD_INT 92
6365: PPUSH
6366: LD_INT 49
6368: PPUSH
6369: LD_INT 20
6371: PPUSH
6372: LD_INT 0
6374: PPUSH
6375: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6379: LD_VAR 0 11
6383: PPUSH
6384: CALL_OW 250
6388: PPUSH
6389: LD_VAR 0 11
6393: PPUSH
6394: CALL_OW 251
6398: PPUSH
6399: CALL_OW 494
// end ;
6403: GO 6355
6405: POP
6406: POP
// if crates then
6407: LD_VAR 0 8
6411: IFFALSE 6465
// for i = 1 to ( crates div 50 ) do
6413: LD_ADDR_VAR 0 11
6417: PUSH
6418: DOUBLE
6419: LD_INT 1
6421: DEC
6422: ST_TO_ADDR
6423: LD_VAR 0 8
6427: PUSH
6428: LD_INT 50
6430: DIV
6431: PUSH
6432: FOR_TO
6433: IFFALSE 6463
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6435: LD_INT 5
6437: PPUSH
6438: LD_INT 92
6440: PPUSH
6441: LD_INT 49
6443: PPUSH
6444: LD_INT 30
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 56
// wait ( 0 0$02 ) ;
6454: LD_INT 70
6456: PPUSH
6457: CALL_OW 67
// end ;
6461: GO 6432
6463: POP
6464: POP
// end ; end ;
6465: PPOPN 12
6467: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6468: LD_VAR 0 1
6472: PPUSH
6473: LD_VAR 0 2
6477: PPUSH
6478: LD_VAR 0 3
6482: PPUSH
6483: CALL 22953 0 3
// end ;
6487: PPOPN 3
6489: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6490: LD_VAR 0 1
6494: PPUSH
6495: CALL 22961 0 1
// end ;
6499: PPOPN 1
6501: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL_OW 255
6511: PUSH
6512: LD_OWVAR 2
6516: EQUAL
6517: IFFALSE 6527
// player_res_art := true ;
6519: LD_ADDR_EXP 8
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// end ;
6527: PPOPN 1
6529: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) do var xy , lab ;
6530: LD_INT 22
6532: PUSH
6533: LD_OWVAR 2
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 2
6544: PUSH
6545: LD_INT 30
6547: PUSH
6548: LD_INT 7
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: LD_INT 30
6557: PUSH
6558: LD_INT 8
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 30
6567: PUSH
6568: LD_INT 11
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PPUSH
6585: CALL_OW 69
6589: IFFALSE 6822
6591: GO 6593
6593: DISABLE
6594: LD_INT 0
6596: PPUSH
6597: PPUSH
// begin enable ;
6598: ENABLE
// xy := FindArtifact ( 2 ) ;
6599: LD_ADDR_VAR 0 1
6603: PUSH
6604: LD_INT 2
6606: PPUSH
6607: CALL_OW 469
6611: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
6612: LD_ADDR_VAR 0 2
6616: PUSH
6617: LD_INT 22
6619: PUSH
6620: LD_OWVAR 2
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 2
6631: PUSH
6632: LD_INT 30
6634: PUSH
6635: LD_INT 8
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 30
6644: PUSH
6645: LD_INT 7
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 30
6654: PUSH
6655: LD_INT 11
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PPUSH
6672: CALL_OW 69
6676: PPUSH
6677: LD_VAR 0 1
6681: PUSH
6682: LD_INT 1
6684: ARRAY
6685: PPUSH
6686: LD_VAR 0 1
6690: PUSH
6691: LD_INT 2
6693: ARRAY
6694: PPUSH
6695: CALL_OW 73
6699: ST_TO_ADDR
// if player_artifact_ready = false then
6700: LD_EXP 16
6704: PUSH
6705: LD_INT 0
6707: EQUAL
6708: IFFALSE 6822
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
6710: LD_VAR 0 2
6714: PPUSH
6715: LD_VAR 0 1
6719: PUSH
6720: LD_INT 1
6722: ARRAY
6723: PPUSH
6724: LD_VAR 0 1
6728: PUSH
6729: LD_INT 2
6731: ARRAY
6732: PPUSH
6733: CALL_OW 297
6737: PUSH
6738: LD_INT 6
6740: LESS
6741: IFFALSE 6802
// begin if BuildingStatus ( lab ) = bs_idle then
6743: LD_VAR 0 2
6747: PPUSH
6748: CALL_OW 461
6752: PUSH
6753: LD_INT 2
6755: EQUAL
6756: IFFALSE 6780
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
6758: LD_OWVAR 2
6762: PPUSH
6763: LD_INT 1
6765: PPUSH
6766: LD_INT 2
6768: PPUSH
6769: LD_VAR 0 2
6773: PPUSH
6774: CALL_OW 468
6778: GO 6800
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6780: LD_OWVAR 2
6784: PPUSH
6785: LD_INT 1
6787: PPUSH
6788: LD_INT 1
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 468
// end else
6800: GO 6822
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6802: LD_OWVAR 2
6806: PPUSH
6807: LD_INT 1
6809: PPUSH
6810: LD_INT 1
6812: PPUSH
6813: LD_VAR 0 2
6817: PPUSH
6818: CALL_OW 468
// end ;
6822: PPOPN 2
6824: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6825: LD_VAR 0 1
6829: PPUSH
6830: CALL_OW 255
6834: PUSH
6835: LD_OWVAR 2
6839: EQUAL
6840: IFFALSE 6866
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
6842: LD_OWVAR 2
6846: PPUSH
6847: LD_INT 1
6849: PPUSH
6850: LD_INT 0
6852: PPUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 468
// Win ;
6862: CALL 4759 0 0
// end ; end ;
6866: PPOPN 1
6868: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
6869: LD_ADDR_EXP 17
6873: PUSH
6874: LD_VAR 0 2
6878: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
6879: LD_OWVAR 2
6883: PPUSH
6884: LD_INT 1
6886: PPUSH
6887: LD_INT 2
6889: PPUSH
6890: LD_VAR 0 1
6894: PPUSH
6895: CALL_OW 468
// end ;
6899: PPOPN 2
6901: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6902: LD_VAR 0 1
6906: PPUSH
6907: LD_VAR 0 2
6911: PPUSH
6912: CALL 22977 0 2
// end ; end_of_file
6916: PPOPN 2
6918: END
// every 0 0$01 trigger not game_over do
6919: LD_EXP 7
6923: NOT
6924: IFFALSE 6957
6926: GO 6928
6928: DISABLE
// begin enable ;
6929: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6930: LD_ADDR_OWVAR 47
6934: PUSH
6935: LD_STRING #tick
6937: PUSH
6938: LD_OWVAR 1
6942: PUSH
6943: LD_STRING #points
6945: PUSH
6946: LD_EXP 10
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: ST_TO_ADDR
// end ;
6957: END
// every 0 0$01 trigger game_over do
6958: LD_EXP 7
6962: IFFALSE 7021
6964: GO 6966
6966: DISABLE
// begin Wait ( 0 0$02 ) ;
6967: LD_INT 70
6969: PPUSH
6970: CALL_OW 67
// DialogueOn ;
6974: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6978: LD_ADDR_OWVAR 47
6982: PUSH
6983: LD_STRING #game-points
6985: PUSH
6986: LD_OWVAR 78
6990: PUSH
6991: LD_EXP 10
6995: PUSH
6996: LD_STRING #game-time
6998: PUSH
6999: LD_OWVAR 1
7003: PUSH
7004: LD_STRING #game-difficulty
7006: PUSH
7007: LD_OWVAR 67
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// end ; end_of_file
7021: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
7022: LD_OWVAR 1
7026: PUSH
7027: LD_INT 52500
7029: LESS
7030: IFFALSE 7054
7032: GO 7034
7034: DISABLE
// begin enable ;
7035: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
7036: LD_INT 1
7038: PPUSH
7039: LD_INT 5
7041: PPUSH
7042: CALL_OW 12
7046: PPUSH
7047: LD_INT 1
7049: PPUSH
7050: CALL_OW 57
// end ; end_of_file end_of_file
7054: END
// export globalGameSaveCounter ; every 0 0$1 do
7055: GO 7057
7057: DISABLE
// begin enable ;
7058: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7059: LD_STRING updateTimer(
7061: PUSH
7062: LD_OWVAR 1
7066: STR
7067: PUSH
7068: LD_STRING );
7070: STR
7071: PPUSH
7072: CALL_OW 559
// end ;
7076: END
// every 0 0$1 do
7077: GO 7079
7079: DISABLE
// begin globalGameSaveCounter := 0 ;
7080: LD_ADDR_EXP 18
7084: PUSH
7085: LD_INT 0
7087: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7088: LD_STRING setGameSaveCounter(0)
7090: PPUSH
7091: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7095: LD_STRING initStreamRollete();
7097: PPUSH
7098: CALL_OW 559
// InitStreamMode ;
7102: CALL 8428 0 0
// DefineStreamItems ( false ) ;
7106: LD_INT 0
7108: PPUSH
7109: CALL 8892 0 1
// end ;
7113: END
// export function SOS_MapStart ( ) ; begin
7114: LD_INT 0
7116: PPUSH
// if streamModeActive then
7117: LD_EXP 19
7121: IFFALSE 7130
// DefineStreamItems ( true ) ;
7123: LD_INT 1
7125: PPUSH
7126: CALL 8892 0 1
// UpdateLuaVariables ( ) ;
7130: CALL 7147 0 0
// UpdateFactoryWaypoints ( ) ;
7134: CALL 21761 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7138: CALL 22018 0 0
// end ;
7142: LD_VAR 0 1
7146: RET
// function UpdateLuaVariables ( ) ; begin
7147: LD_INT 0
7149: PPUSH
// if globalGameSaveCounter then
7150: LD_EXP 18
7154: IFFALSE 7188
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7156: LD_ADDR_EXP 18
7160: PUSH
7161: LD_EXP 18
7165: PPUSH
7166: CALL 66648 0 1
7170: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7171: LD_STRING setGameSaveCounter(
7173: PUSH
7174: LD_EXP 18
7178: STR
7179: PUSH
7180: LD_STRING )
7182: STR
7183: PPUSH
7184: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7188: LD_STRING setGameDifficulty(
7190: PUSH
7191: LD_OWVAR 67
7195: STR
7196: PUSH
7197: LD_STRING )
7199: STR
7200: PPUSH
7201: CALL_OW 559
// end ;
7205: LD_VAR 0 1
7209: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7210: LD_INT 0
7212: PPUSH
// if p2 = stream_mode then
7213: LD_VAR 0 2
7217: PUSH
7218: LD_INT 100
7220: EQUAL
7221: IFFALSE 8224
// begin if not StreamModeActive then
7223: LD_EXP 19
7227: NOT
7228: IFFALSE 7238
// StreamModeActive := true ;
7230: LD_ADDR_EXP 19
7234: PUSH
7235: LD_INT 1
7237: ST_TO_ADDR
// if p3 = 0 then
7238: LD_VAR 0 3
7242: PUSH
7243: LD_INT 0
7245: EQUAL
7246: IFFALSE 7252
// InitStreamMode ;
7248: CALL 8428 0 0
// if p3 = 1 then
7252: LD_VAR 0 3
7256: PUSH
7257: LD_INT 1
7259: EQUAL
7260: IFFALSE 7270
// sRocket := true ;
7262: LD_ADDR_EXP 24
7266: PUSH
7267: LD_INT 1
7269: ST_TO_ADDR
// if p3 = 2 then
7270: LD_VAR 0 3
7274: PUSH
7275: LD_INT 2
7277: EQUAL
7278: IFFALSE 7288
// sSpeed := true ;
7280: LD_ADDR_EXP 23
7284: PUSH
7285: LD_INT 1
7287: ST_TO_ADDR
// if p3 = 3 then
7288: LD_VAR 0 3
7292: PUSH
7293: LD_INT 3
7295: EQUAL
7296: IFFALSE 7306
// sEngine := true ;
7298: LD_ADDR_EXP 25
7302: PUSH
7303: LD_INT 1
7305: ST_TO_ADDR
// if p3 = 4 then
7306: LD_VAR 0 3
7310: PUSH
7311: LD_INT 4
7313: EQUAL
7314: IFFALSE 7324
// sSpec := true ;
7316: LD_ADDR_EXP 22
7320: PUSH
7321: LD_INT 1
7323: ST_TO_ADDR
// if p3 = 5 then
7324: LD_VAR 0 3
7328: PUSH
7329: LD_INT 5
7331: EQUAL
7332: IFFALSE 7342
// sLevel := true ;
7334: LD_ADDR_EXP 26
7338: PUSH
7339: LD_INT 1
7341: ST_TO_ADDR
// if p3 = 6 then
7342: LD_VAR 0 3
7346: PUSH
7347: LD_INT 6
7349: EQUAL
7350: IFFALSE 7360
// sArmoury := true ;
7352: LD_ADDR_EXP 27
7356: PUSH
7357: LD_INT 1
7359: ST_TO_ADDR
// if p3 = 7 then
7360: LD_VAR 0 3
7364: PUSH
7365: LD_INT 7
7367: EQUAL
7368: IFFALSE 7378
// sRadar := true ;
7370: LD_ADDR_EXP 28
7374: PUSH
7375: LD_INT 1
7377: ST_TO_ADDR
// if p3 = 8 then
7378: LD_VAR 0 3
7382: PUSH
7383: LD_INT 8
7385: EQUAL
7386: IFFALSE 7396
// sBunker := true ;
7388: LD_ADDR_EXP 29
7392: PUSH
7393: LD_INT 1
7395: ST_TO_ADDR
// if p3 = 9 then
7396: LD_VAR 0 3
7400: PUSH
7401: LD_INT 9
7403: EQUAL
7404: IFFALSE 7414
// sHack := true ;
7406: LD_ADDR_EXP 30
7410: PUSH
7411: LD_INT 1
7413: ST_TO_ADDR
// if p3 = 10 then
7414: LD_VAR 0 3
7418: PUSH
7419: LD_INT 10
7421: EQUAL
7422: IFFALSE 7432
// sFire := true ;
7424: LD_ADDR_EXP 31
7428: PUSH
7429: LD_INT 1
7431: ST_TO_ADDR
// if p3 = 11 then
7432: LD_VAR 0 3
7436: PUSH
7437: LD_INT 11
7439: EQUAL
7440: IFFALSE 7450
// sRefresh := true ;
7442: LD_ADDR_EXP 32
7446: PUSH
7447: LD_INT 1
7449: ST_TO_ADDR
// if p3 = 12 then
7450: LD_VAR 0 3
7454: PUSH
7455: LD_INT 12
7457: EQUAL
7458: IFFALSE 7468
// sExp := true ;
7460: LD_ADDR_EXP 33
7464: PUSH
7465: LD_INT 1
7467: ST_TO_ADDR
// if p3 = 13 then
7468: LD_VAR 0 3
7472: PUSH
7473: LD_INT 13
7475: EQUAL
7476: IFFALSE 7486
// sDepot := true ;
7478: LD_ADDR_EXP 34
7482: PUSH
7483: LD_INT 1
7485: ST_TO_ADDR
// if p3 = 14 then
7486: LD_VAR 0 3
7490: PUSH
7491: LD_INT 14
7493: EQUAL
7494: IFFALSE 7504
// sFlag := true ;
7496: LD_ADDR_EXP 35
7500: PUSH
7501: LD_INT 1
7503: ST_TO_ADDR
// if p3 = 15 then
7504: LD_VAR 0 3
7508: PUSH
7509: LD_INT 15
7511: EQUAL
7512: IFFALSE 7522
// sKamikadze := true ;
7514: LD_ADDR_EXP 43
7518: PUSH
7519: LD_INT 1
7521: ST_TO_ADDR
// if p3 = 16 then
7522: LD_VAR 0 3
7526: PUSH
7527: LD_INT 16
7529: EQUAL
7530: IFFALSE 7540
// sTroll := true ;
7532: LD_ADDR_EXP 44
7536: PUSH
7537: LD_INT 1
7539: ST_TO_ADDR
// if p3 = 17 then
7540: LD_VAR 0 3
7544: PUSH
7545: LD_INT 17
7547: EQUAL
7548: IFFALSE 7558
// sSlow := true ;
7550: LD_ADDR_EXP 45
7554: PUSH
7555: LD_INT 1
7557: ST_TO_ADDR
// if p3 = 18 then
7558: LD_VAR 0 3
7562: PUSH
7563: LD_INT 18
7565: EQUAL
7566: IFFALSE 7576
// sLack := true ;
7568: LD_ADDR_EXP 46
7572: PUSH
7573: LD_INT 1
7575: ST_TO_ADDR
// if p3 = 19 then
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 19
7583: EQUAL
7584: IFFALSE 7594
// sTank := true ;
7586: LD_ADDR_EXP 48
7590: PUSH
7591: LD_INT 1
7593: ST_TO_ADDR
// if p3 = 20 then
7594: LD_VAR 0 3
7598: PUSH
7599: LD_INT 20
7601: EQUAL
7602: IFFALSE 7612
// sRemote := true ;
7604: LD_ADDR_EXP 49
7608: PUSH
7609: LD_INT 1
7611: ST_TO_ADDR
// if p3 = 21 then
7612: LD_VAR 0 3
7616: PUSH
7617: LD_INT 21
7619: EQUAL
7620: IFFALSE 7630
// sPowell := true ;
7622: LD_ADDR_EXP 50
7626: PUSH
7627: LD_INT 1
7629: ST_TO_ADDR
// if p3 = 22 then
7630: LD_VAR 0 3
7634: PUSH
7635: LD_INT 22
7637: EQUAL
7638: IFFALSE 7648
// sTeleport := true ;
7640: LD_ADDR_EXP 53
7644: PUSH
7645: LD_INT 1
7647: ST_TO_ADDR
// if p3 = 23 then
7648: LD_VAR 0 3
7652: PUSH
7653: LD_INT 23
7655: EQUAL
7656: IFFALSE 7666
// sOilTower := true ;
7658: LD_ADDR_EXP 55
7662: PUSH
7663: LD_INT 1
7665: ST_TO_ADDR
// if p3 = 24 then
7666: LD_VAR 0 3
7670: PUSH
7671: LD_INT 24
7673: EQUAL
7674: IFFALSE 7684
// sShovel := true ;
7676: LD_ADDR_EXP 56
7680: PUSH
7681: LD_INT 1
7683: ST_TO_ADDR
// if p3 = 25 then
7684: LD_VAR 0 3
7688: PUSH
7689: LD_INT 25
7691: EQUAL
7692: IFFALSE 7702
// sSheik := true ;
7694: LD_ADDR_EXP 57
7698: PUSH
7699: LD_INT 1
7701: ST_TO_ADDR
// if p3 = 26 then
7702: LD_VAR 0 3
7706: PUSH
7707: LD_INT 26
7709: EQUAL
7710: IFFALSE 7720
// sEarthquake := true ;
7712: LD_ADDR_EXP 59
7716: PUSH
7717: LD_INT 1
7719: ST_TO_ADDR
// if p3 = 27 then
7720: LD_VAR 0 3
7724: PUSH
7725: LD_INT 27
7727: EQUAL
7728: IFFALSE 7738
// sAI := true ;
7730: LD_ADDR_EXP 60
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// if p3 = 28 then
7738: LD_VAR 0 3
7742: PUSH
7743: LD_INT 28
7745: EQUAL
7746: IFFALSE 7756
// sCargo := true ;
7748: LD_ADDR_EXP 63
7752: PUSH
7753: LD_INT 1
7755: ST_TO_ADDR
// if p3 = 29 then
7756: LD_VAR 0 3
7760: PUSH
7761: LD_INT 29
7763: EQUAL
7764: IFFALSE 7774
// sDLaser := true ;
7766: LD_ADDR_EXP 64
7770: PUSH
7771: LD_INT 1
7773: ST_TO_ADDR
// if p3 = 30 then
7774: LD_VAR 0 3
7778: PUSH
7779: LD_INT 30
7781: EQUAL
7782: IFFALSE 7792
// sExchange := true ;
7784: LD_ADDR_EXP 65
7788: PUSH
7789: LD_INT 1
7791: ST_TO_ADDR
// if p3 = 31 then
7792: LD_VAR 0 3
7796: PUSH
7797: LD_INT 31
7799: EQUAL
7800: IFFALSE 7810
// sFac := true ;
7802: LD_ADDR_EXP 66
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// if p3 = 32 then
7810: LD_VAR 0 3
7814: PUSH
7815: LD_INT 32
7817: EQUAL
7818: IFFALSE 7828
// sPower := true ;
7820: LD_ADDR_EXP 67
7824: PUSH
7825: LD_INT 1
7827: ST_TO_ADDR
// if p3 = 33 then
7828: LD_VAR 0 3
7832: PUSH
7833: LD_INT 33
7835: EQUAL
7836: IFFALSE 7846
// sRandom := true ;
7838: LD_ADDR_EXP 68
7842: PUSH
7843: LD_INT 1
7845: ST_TO_ADDR
// if p3 = 34 then
7846: LD_VAR 0 3
7850: PUSH
7851: LD_INT 34
7853: EQUAL
7854: IFFALSE 7864
// sShield := true ;
7856: LD_ADDR_EXP 69
7860: PUSH
7861: LD_INT 1
7863: ST_TO_ADDR
// if p3 = 35 then
7864: LD_VAR 0 3
7868: PUSH
7869: LD_INT 35
7871: EQUAL
7872: IFFALSE 7882
// sTime := true ;
7874: LD_ADDR_EXP 70
7878: PUSH
7879: LD_INT 1
7881: ST_TO_ADDR
// if p3 = 36 then
7882: LD_VAR 0 3
7886: PUSH
7887: LD_INT 36
7889: EQUAL
7890: IFFALSE 7900
// sTools := true ;
7892: LD_ADDR_EXP 71
7896: PUSH
7897: LD_INT 1
7899: ST_TO_ADDR
// if p3 = 101 then
7900: LD_VAR 0 3
7904: PUSH
7905: LD_INT 101
7907: EQUAL
7908: IFFALSE 7918
// sSold := true ;
7910: LD_ADDR_EXP 36
7914: PUSH
7915: LD_INT 1
7917: ST_TO_ADDR
// if p3 = 102 then
7918: LD_VAR 0 3
7922: PUSH
7923: LD_INT 102
7925: EQUAL
7926: IFFALSE 7936
// sDiff := true ;
7928: LD_ADDR_EXP 37
7932: PUSH
7933: LD_INT 1
7935: ST_TO_ADDR
// if p3 = 103 then
7936: LD_VAR 0 3
7940: PUSH
7941: LD_INT 103
7943: EQUAL
7944: IFFALSE 7954
// sFog := true ;
7946: LD_ADDR_EXP 40
7950: PUSH
7951: LD_INT 1
7953: ST_TO_ADDR
// if p3 = 104 then
7954: LD_VAR 0 3
7958: PUSH
7959: LD_INT 104
7961: EQUAL
7962: IFFALSE 7972
// sReset := true ;
7964: LD_ADDR_EXP 41
7968: PUSH
7969: LD_INT 1
7971: ST_TO_ADDR
// if p3 = 105 then
7972: LD_VAR 0 3
7976: PUSH
7977: LD_INT 105
7979: EQUAL
7980: IFFALSE 7990
// sSun := true ;
7982: LD_ADDR_EXP 42
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// if p3 = 106 then
7990: LD_VAR 0 3
7994: PUSH
7995: LD_INT 106
7997: EQUAL
7998: IFFALSE 8008
// sTiger := true ;
8000: LD_ADDR_EXP 38
8004: PUSH
8005: LD_INT 1
8007: ST_TO_ADDR
// if p3 = 107 then
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 107
8015: EQUAL
8016: IFFALSE 8026
// sBomb := true ;
8018: LD_ADDR_EXP 39
8022: PUSH
8023: LD_INT 1
8025: ST_TO_ADDR
// if p3 = 108 then
8026: LD_VAR 0 3
8030: PUSH
8031: LD_INT 108
8033: EQUAL
8034: IFFALSE 8044
// sWound := true ;
8036: LD_ADDR_EXP 47
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// if p3 = 109 then
8044: LD_VAR 0 3
8048: PUSH
8049: LD_INT 109
8051: EQUAL
8052: IFFALSE 8062
// sBetray := true ;
8054: LD_ADDR_EXP 51
8058: PUSH
8059: LD_INT 1
8061: ST_TO_ADDR
// if p3 = 110 then
8062: LD_VAR 0 3
8066: PUSH
8067: LD_INT 110
8069: EQUAL
8070: IFFALSE 8080
// sContamin := true ;
8072: LD_ADDR_EXP 52
8076: PUSH
8077: LD_INT 1
8079: ST_TO_ADDR
// if p3 = 111 then
8080: LD_VAR 0 3
8084: PUSH
8085: LD_INT 111
8087: EQUAL
8088: IFFALSE 8098
// sOil := true ;
8090: LD_ADDR_EXP 54
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// if p3 = 112 then
8098: LD_VAR 0 3
8102: PUSH
8103: LD_INT 112
8105: EQUAL
8106: IFFALSE 8116
// sStu := true ;
8108: LD_ADDR_EXP 58
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// if p3 = 113 then
8116: LD_VAR 0 3
8120: PUSH
8121: LD_INT 113
8123: EQUAL
8124: IFFALSE 8134
// sBazooka := true ;
8126: LD_ADDR_EXP 61
8130: PUSH
8131: LD_INT 1
8133: ST_TO_ADDR
// if p3 = 114 then
8134: LD_VAR 0 3
8138: PUSH
8139: LD_INT 114
8141: EQUAL
8142: IFFALSE 8152
// sMortar := true ;
8144: LD_ADDR_EXP 62
8148: PUSH
8149: LD_INT 1
8151: ST_TO_ADDR
// if p3 = 115 then
8152: LD_VAR 0 3
8156: PUSH
8157: LD_INT 115
8159: EQUAL
8160: IFFALSE 8170
// sRanger := true ;
8162: LD_ADDR_EXP 72
8166: PUSH
8167: LD_INT 1
8169: ST_TO_ADDR
// if p3 = 116 then
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 116
8177: EQUAL
8178: IFFALSE 8188
// sComputer := true ;
8180: LD_ADDR_EXP 73
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
// if p3 = 117 then
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 117
8195: EQUAL
8196: IFFALSE 8206
// s30 := true ;
8198: LD_ADDR_EXP 74
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// if p3 = 118 then
8206: LD_VAR 0 3
8210: PUSH
8211: LD_INT 118
8213: EQUAL
8214: IFFALSE 8224
// s60 := true ;
8216: LD_ADDR_EXP 75
8220: PUSH
8221: LD_INT 1
8223: ST_TO_ADDR
// end ; if p2 = hack_mode then
8224: LD_VAR 0 2
8228: PUSH
8229: LD_INT 101
8231: EQUAL
8232: IFFALSE 8360
// begin case p3 of 1 :
8234: LD_VAR 0 3
8238: PUSH
8239: LD_INT 1
8241: DOUBLE
8242: EQUAL
8243: IFTRUE 8247
8245: GO 8254
8247: POP
// hHackUnlimitedResources ; 2 :
8248: CALL 20507 0 0
8252: GO 8360
8254: LD_INT 2
8256: DOUBLE
8257: EQUAL
8258: IFTRUE 8262
8260: GO 8269
8262: POP
// hHackSetLevel10 ; 3 :
8263: CALL 20640 0 0
8267: GO 8360
8269: LD_INT 3
8271: DOUBLE
8272: EQUAL
8273: IFTRUE 8277
8275: GO 8284
8277: POP
// hHackSetLevel10YourUnits ; 4 :
8278: CALL 20725 0 0
8282: GO 8360
8284: LD_INT 4
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8292
8290: GO 8299
8292: POP
// hHackInvincible ; 5 :
8293: CALL 21173 0 0
8297: GO 8360
8299: LD_INT 5
8301: DOUBLE
8302: EQUAL
8303: IFTRUE 8307
8305: GO 8314
8307: POP
// hHackInvisible ; 6 :
8308: CALL 21284 0 0
8312: GO 8360
8314: LD_INT 6
8316: DOUBLE
8317: EQUAL
8318: IFTRUE 8322
8320: GO 8329
8322: POP
// hHackChangeYourSide ; 7 :
8323: CALL 21341 0 0
8327: GO 8360
8329: LD_INT 7
8331: DOUBLE
8332: EQUAL
8333: IFTRUE 8337
8335: GO 8344
8337: POP
// hHackChangeUnitSide ; 8 :
8338: CALL 21383 0 0
8342: GO 8360
8344: LD_INT 8
8346: DOUBLE
8347: EQUAL
8348: IFTRUE 8352
8350: GO 8359
8352: POP
// hHackFog ; end ;
8353: CALL 21484 0 0
8357: GO 8360
8359: POP
// end ; if p2 = game_save_mode then
8360: LD_VAR 0 2
8364: PUSH
8365: LD_INT 102
8367: EQUAL
8368: IFFALSE 8423
// begin if p3 = 1 then
8370: LD_VAR 0 3
8374: PUSH
8375: LD_INT 1
8377: EQUAL
8378: IFFALSE 8390
// globalGameSaveCounter := p4 ;
8380: LD_ADDR_EXP 18
8384: PUSH
8385: LD_VAR 0 4
8389: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8390: LD_VAR 0 3
8394: PUSH
8395: LD_INT 2
8397: EQUAL
8398: PUSH
8399: LD_EXP 18
8403: AND
8404: IFFALSE 8423
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8406: LD_STRING setGameSaveCounter(
8408: PUSH
8409: LD_EXP 18
8413: STR
8414: PUSH
8415: LD_STRING )
8417: STR
8418: PPUSH
8419: CALL_OW 559
// end ; end ;
8423: LD_VAR 0 7
8427: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8428: LD_INT 0
8430: PPUSH
// streamModeActive := false ;
8431: LD_ADDR_EXP 19
8435: PUSH
8436: LD_INT 0
8438: ST_TO_ADDR
// normalCounter := 36 ;
8439: LD_ADDR_EXP 20
8443: PUSH
8444: LD_INT 36
8446: ST_TO_ADDR
// hardcoreCounter := 18 ;
8447: LD_ADDR_EXP 21
8451: PUSH
8452: LD_INT 18
8454: ST_TO_ADDR
// sRocket := false ;
8455: LD_ADDR_EXP 24
8459: PUSH
8460: LD_INT 0
8462: ST_TO_ADDR
// sSpeed := false ;
8463: LD_ADDR_EXP 23
8467: PUSH
8468: LD_INT 0
8470: ST_TO_ADDR
// sEngine := false ;
8471: LD_ADDR_EXP 25
8475: PUSH
8476: LD_INT 0
8478: ST_TO_ADDR
// sSpec := false ;
8479: LD_ADDR_EXP 22
8483: PUSH
8484: LD_INT 0
8486: ST_TO_ADDR
// sLevel := false ;
8487: LD_ADDR_EXP 26
8491: PUSH
8492: LD_INT 0
8494: ST_TO_ADDR
// sArmoury := false ;
8495: LD_ADDR_EXP 27
8499: PUSH
8500: LD_INT 0
8502: ST_TO_ADDR
// sRadar := false ;
8503: LD_ADDR_EXP 28
8507: PUSH
8508: LD_INT 0
8510: ST_TO_ADDR
// sBunker := false ;
8511: LD_ADDR_EXP 29
8515: PUSH
8516: LD_INT 0
8518: ST_TO_ADDR
// sHack := false ;
8519: LD_ADDR_EXP 30
8523: PUSH
8524: LD_INT 0
8526: ST_TO_ADDR
// sFire := false ;
8527: LD_ADDR_EXP 31
8531: PUSH
8532: LD_INT 0
8534: ST_TO_ADDR
// sRefresh := false ;
8535: LD_ADDR_EXP 32
8539: PUSH
8540: LD_INT 0
8542: ST_TO_ADDR
// sExp := false ;
8543: LD_ADDR_EXP 33
8547: PUSH
8548: LD_INT 0
8550: ST_TO_ADDR
// sDepot := false ;
8551: LD_ADDR_EXP 34
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// sFlag := false ;
8559: LD_ADDR_EXP 35
8563: PUSH
8564: LD_INT 0
8566: ST_TO_ADDR
// sKamikadze := false ;
8567: LD_ADDR_EXP 43
8571: PUSH
8572: LD_INT 0
8574: ST_TO_ADDR
// sTroll := false ;
8575: LD_ADDR_EXP 44
8579: PUSH
8580: LD_INT 0
8582: ST_TO_ADDR
// sSlow := false ;
8583: LD_ADDR_EXP 45
8587: PUSH
8588: LD_INT 0
8590: ST_TO_ADDR
// sLack := false ;
8591: LD_ADDR_EXP 46
8595: PUSH
8596: LD_INT 0
8598: ST_TO_ADDR
// sTank := false ;
8599: LD_ADDR_EXP 48
8603: PUSH
8604: LD_INT 0
8606: ST_TO_ADDR
// sRemote := false ;
8607: LD_ADDR_EXP 49
8611: PUSH
8612: LD_INT 0
8614: ST_TO_ADDR
// sPowell := false ;
8615: LD_ADDR_EXP 50
8619: PUSH
8620: LD_INT 0
8622: ST_TO_ADDR
// sTeleport := false ;
8623: LD_ADDR_EXP 53
8627: PUSH
8628: LD_INT 0
8630: ST_TO_ADDR
// sOilTower := false ;
8631: LD_ADDR_EXP 55
8635: PUSH
8636: LD_INT 0
8638: ST_TO_ADDR
// sShovel := false ;
8639: LD_ADDR_EXP 56
8643: PUSH
8644: LD_INT 0
8646: ST_TO_ADDR
// sSheik := false ;
8647: LD_ADDR_EXP 57
8651: PUSH
8652: LD_INT 0
8654: ST_TO_ADDR
// sEarthquake := false ;
8655: LD_ADDR_EXP 59
8659: PUSH
8660: LD_INT 0
8662: ST_TO_ADDR
// sAI := false ;
8663: LD_ADDR_EXP 60
8667: PUSH
8668: LD_INT 0
8670: ST_TO_ADDR
// sCargo := false ;
8671: LD_ADDR_EXP 63
8675: PUSH
8676: LD_INT 0
8678: ST_TO_ADDR
// sDLaser := false ;
8679: LD_ADDR_EXP 64
8683: PUSH
8684: LD_INT 0
8686: ST_TO_ADDR
// sExchange := false ;
8687: LD_ADDR_EXP 65
8691: PUSH
8692: LD_INT 0
8694: ST_TO_ADDR
// sFac := false ;
8695: LD_ADDR_EXP 66
8699: PUSH
8700: LD_INT 0
8702: ST_TO_ADDR
// sPower := false ;
8703: LD_ADDR_EXP 67
8707: PUSH
8708: LD_INT 0
8710: ST_TO_ADDR
// sRandom := false ;
8711: LD_ADDR_EXP 68
8715: PUSH
8716: LD_INT 0
8718: ST_TO_ADDR
// sShield := false ;
8719: LD_ADDR_EXP 69
8723: PUSH
8724: LD_INT 0
8726: ST_TO_ADDR
// sTime := false ;
8727: LD_ADDR_EXP 70
8731: PUSH
8732: LD_INT 0
8734: ST_TO_ADDR
// sTools := false ;
8735: LD_ADDR_EXP 71
8739: PUSH
8740: LD_INT 0
8742: ST_TO_ADDR
// sSold := false ;
8743: LD_ADDR_EXP 36
8747: PUSH
8748: LD_INT 0
8750: ST_TO_ADDR
// sDiff := false ;
8751: LD_ADDR_EXP 37
8755: PUSH
8756: LD_INT 0
8758: ST_TO_ADDR
// sFog := false ;
8759: LD_ADDR_EXP 40
8763: PUSH
8764: LD_INT 0
8766: ST_TO_ADDR
// sReset := false ;
8767: LD_ADDR_EXP 41
8771: PUSH
8772: LD_INT 0
8774: ST_TO_ADDR
// sSun := false ;
8775: LD_ADDR_EXP 42
8779: PUSH
8780: LD_INT 0
8782: ST_TO_ADDR
// sTiger := false ;
8783: LD_ADDR_EXP 38
8787: PUSH
8788: LD_INT 0
8790: ST_TO_ADDR
// sBomb := false ;
8791: LD_ADDR_EXP 39
8795: PUSH
8796: LD_INT 0
8798: ST_TO_ADDR
// sWound := false ;
8799: LD_ADDR_EXP 47
8803: PUSH
8804: LD_INT 0
8806: ST_TO_ADDR
// sBetray := false ;
8807: LD_ADDR_EXP 51
8811: PUSH
8812: LD_INT 0
8814: ST_TO_ADDR
// sContamin := false ;
8815: LD_ADDR_EXP 52
8819: PUSH
8820: LD_INT 0
8822: ST_TO_ADDR
// sOil := false ;
8823: LD_ADDR_EXP 54
8827: PUSH
8828: LD_INT 0
8830: ST_TO_ADDR
// sStu := false ;
8831: LD_ADDR_EXP 58
8835: PUSH
8836: LD_INT 0
8838: ST_TO_ADDR
// sBazooka := false ;
8839: LD_ADDR_EXP 61
8843: PUSH
8844: LD_INT 0
8846: ST_TO_ADDR
// sMortar := false ;
8847: LD_ADDR_EXP 62
8851: PUSH
8852: LD_INT 0
8854: ST_TO_ADDR
// sRanger := false ;
8855: LD_ADDR_EXP 72
8859: PUSH
8860: LD_INT 0
8862: ST_TO_ADDR
// sComputer := false ;
8863: LD_ADDR_EXP 73
8867: PUSH
8868: LD_INT 0
8870: ST_TO_ADDR
// s30 := false ;
8871: LD_ADDR_EXP 74
8875: PUSH
8876: LD_INT 0
8878: ST_TO_ADDR
// s60 := false ;
8879: LD_ADDR_EXP 75
8883: PUSH
8884: LD_INT 0
8886: ST_TO_ADDR
// end ;
8887: LD_VAR 0 1
8891: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8892: LD_INT 0
8894: PPUSH
8895: PPUSH
8896: PPUSH
8897: PPUSH
8898: PPUSH
8899: PPUSH
8900: PPUSH
// result := [ ] ;
8901: LD_ADDR_VAR 0 2
8905: PUSH
8906: EMPTY
8907: ST_TO_ADDR
// if campaign_id = 1 then
8908: LD_OWVAR 69
8912: PUSH
8913: LD_INT 1
8915: EQUAL
8916: IFFALSE 12082
// begin case mission_number of 1 :
8918: LD_OWVAR 70
8922: PUSH
8923: LD_INT 1
8925: DOUBLE
8926: EQUAL
8927: IFTRUE 8931
8929: GO 9007
8931: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8932: LD_ADDR_VAR 0 2
8936: PUSH
8937: LD_INT 2
8939: PUSH
8940: LD_INT 4
8942: PUSH
8943: LD_INT 11
8945: PUSH
8946: LD_INT 12
8948: PUSH
8949: LD_INT 15
8951: PUSH
8952: LD_INT 16
8954: PUSH
8955: LD_INT 22
8957: PUSH
8958: LD_INT 23
8960: PUSH
8961: LD_INT 26
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 101
8977: PUSH
8978: LD_INT 102
8980: PUSH
8981: LD_INT 106
8983: PUSH
8984: LD_INT 116
8986: PUSH
8987: LD_INT 117
8989: PUSH
8990: LD_INT 118
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: ST_TO_ADDR
9005: GO 12080
9007: LD_INT 2
9009: DOUBLE
9010: EQUAL
9011: IFTRUE 9015
9013: GO 9099
9015: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9016: LD_ADDR_VAR 0 2
9020: PUSH
9021: LD_INT 2
9023: PUSH
9024: LD_INT 4
9026: PUSH
9027: LD_INT 11
9029: PUSH
9030: LD_INT 12
9032: PUSH
9033: LD_INT 15
9035: PUSH
9036: LD_INT 16
9038: PUSH
9039: LD_INT 22
9041: PUSH
9042: LD_INT 23
9044: PUSH
9045: LD_INT 26
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 101
9061: PUSH
9062: LD_INT 102
9064: PUSH
9065: LD_INT 105
9067: PUSH
9068: LD_INT 106
9070: PUSH
9071: LD_INT 108
9073: PUSH
9074: LD_INT 116
9076: PUSH
9077: LD_INT 117
9079: PUSH
9080: LD_INT 118
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: ST_TO_ADDR
9097: GO 12080
9099: LD_INT 3
9101: DOUBLE
9102: EQUAL
9103: IFTRUE 9107
9105: GO 9195
9107: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9108: LD_ADDR_VAR 0 2
9112: PUSH
9113: LD_INT 2
9115: PUSH
9116: LD_INT 4
9118: PUSH
9119: LD_INT 5
9121: PUSH
9122: LD_INT 11
9124: PUSH
9125: LD_INT 12
9127: PUSH
9128: LD_INT 15
9130: PUSH
9131: LD_INT 16
9133: PUSH
9134: LD_INT 22
9136: PUSH
9137: LD_INT 26
9139: PUSH
9140: LD_INT 36
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 101
9157: PUSH
9158: LD_INT 102
9160: PUSH
9161: LD_INT 105
9163: PUSH
9164: LD_INT 106
9166: PUSH
9167: LD_INT 108
9169: PUSH
9170: LD_INT 116
9172: PUSH
9173: LD_INT 117
9175: PUSH
9176: LD_INT 118
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: ST_TO_ADDR
9193: GO 12080
9195: LD_INT 4
9197: DOUBLE
9198: EQUAL
9199: IFTRUE 9203
9201: GO 9299
9203: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9204: LD_ADDR_VAR 0 2
9208: PUSH
9209: LD_INT 2
9211: PUSH
9212: LD_INT 4
9214: PUSH
9215: LD_INT 5
9217: PUSH
9218: LD_INT 8
9220: PUSH
9221: LD_INT 11
9223: PUSH
9224: LD_INT 12
9226: PUSH
9227: LD_INT 15
9229: PUSH
9230: LD_INT 16
9232: PUSH
9233: LD_INT 22
9235: PUSH
9236: LD_INT 23
9238: PUSH
9239: LD_INT 26
9241: PUSH
9242: LD_INT 36
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 101
9261: PUSH
9262: LD_INT 102
9264: PUSH
9265: LD_INT 105
9267: PUSH
9268: LD_INT 106
9270: PUSH
9271: LD_INT 108
9273: PUSH
9274: LD_INT 116
9276: PUSH
9277: LD_INT 117
9279: PUSH
9280: LD_INT 118
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: ST_TO_ADDR
9297: GO 12080
9299: LD_INT 5
9301: DOUBLE
9302: EQUAL
9303: IFTRUE 9307
9305: GO 9419
9307: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9308: LD_ADDR_VAR 0 2
9312: PUSH
9313: LD_INT 2
9315: PUSH
9316: LD_INT 4
9318: PUSH
9319: LD_INT 5
9321: PUSH
9322: LD_INT 6
9324: PUSH
9325: LD_INT 8
9327: PUSH
9328: LD_INT 11
9330: PUSH
9331: LD_INT 12
9333: PUSH
9334: LD_INT 15
9336: PUSH
9337: LD_INT 16
9339: PUSH
9340: LD_INT 22
9342: PUSH
9343: LD_INT 23
9345: PUSH
9346: LD_INT 25
9348: PUSH
9349: LD_INT 26
9351: PUSH
9352: LD_INT 36
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 101
9373: PUSH
9374: LD_INT 102
9376: PUSH
9377: LD_INT 105
9379: PUSH
9380: LD_INT 106
9382: PUSH
9383: LD_INT 108
9385: PUSH
9386: LD_INT 109
9388: PUSH
9389: LD_INT 112
9391: PUSH
9392: LD_INT 116
9394: PUSH
9395: LD_INT 117
9397: PUSH
9398: LD_INT 118
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: ST_TO_ADDR
9417: GO 12080
9419: LD_INT 6
9421: DOUBLE
9422: EQUAL
9423: IFTRUE 9427
9425: GO 9559
9427: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9428: LD_ADDR_VAR 0 2
9432: PUSH
9433: LD_INT 2
9435: PUSH
9436: LD_INT 4
9438: PUSH
9439: LD_INT 5
9441: PUSH
9442: LD_INT 6
9444: PUSH
9445: LD_INT 8
9447: PUSH
9448: LD_INT 11
9450: PUSH
9451: LD_INT 12
9453: PUSH
9454: LD_INT 15
9456: PUSH
9457: LD_INT 16
9459: PUSH
9460: LD_INT 20
9462: PUSH
9463: LD_INT 21
9465: PUSH
9466: LD_INT 22
9468: PUSH
9469: LD_INT 23
9471: PUSH
9472: LD_INT 25
9474: PUSH
9475: LD_INT 26
9477: PUSH
9478: LD_INT 30
9480: PUSH
9481: LD_INT 31
9483: PUSH
9484: LD_INT 32
9486: PUSH
9487: LD_INT 36
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 101
9513: PUSH
9514: LD_INT 102
9516: PUSH
9517: LD_INT 105
9519: PUSH
9520: LD_INT 106
9522: PUSH
9523: LD_INT 108
9525: PUSH
9526: LD_INT 109
9528: PUSH
9529: LD_INT 112
9531: PUSH
9532: LD_INT 116
9534: PUSH
9535: LD_INT 117
9537: PUSH
9538: LD_INT 118
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: ST_TO_ADDR
9557: GO 12080
9559: LD_INT 7
9561: DOUBLE
9562: EQUAL
9563: IFTRUE 9567
9565: GO 9679
9567: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9568: LD_ADDR_VAR 0 2
9572: PUSH
9573: LD_INT 2
9575: PUSH
9576: LD_INT 4
9578: PUSH
9579: LD_INT 5
9581: PUSH
9582: LD_INT 7
9584: PUSH
9585: LD_INT 11
9587: PUSH
9588: LD_INT 12
9590: PUSH
9591: LD_INT 15
9593: PUSH
9594: LD_INT 16
9596: PUSH
9597: LD_INT 20
9599: PUSH
9600: LD_INT 21
9602: PUSH
9603: LD_INT 22
9605: PUSH
9606: LD_INT 23
9608: PUSH
9609: LD_INT 25
9611: PUSH
9612: LD_INT 26
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: PUSH
9631: LD_INT 101
9633: PUSH
9634: LD_INT 102
9636: PUSH
9637: LD_INT 103
9639: PUSH
9640: LD_INT 105
9642: PUSH
9643: LD_INT 106
9645: PUSH
9646: LD_INT 108
9648: PUSH
9649: LD_INT 112
9651: PUSH
9652: LD_INT 116
9654: PUSH
9655: LD_INT 117
9657: PUSH
9658: LD_INT 118
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: ST_TO_ADDR
9677: GO 12080
9679: LD_INT 8
9681: DOUBLE
9682: EQUAL
9683: IFTRUE 9687
9685: GO 9827
9687: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9688: LD_ADDR_VAR 0 2
9692: PUSH
9693: LD_INT 2
9695: PUSH
9696: LD_INT 4
9698: PUSH
9699: LD_INT 5
9701: PUSH
9702: LD_INT 6
9704: PUSH
9705: LD_INT 7
9707: PUSH
9708: LD_INT 8
9710: PUSH
9711: LD_INT 11
9713: PUSH
9714: LD_INT 12
9716: PUSH
9717: LD_INT 15
9719: PUSH
9720: LD_INT 16
9722: PUSH
9723: LD_INT 20
9725: PUSH
9726: LD_INT 21
9728: PUSH
9729: LD_INT 22
9731: PUSH
9732: LD_INT 23
9734: PUSH
9735: LD_INT 25
9737: PUSH
9738: LD_INT 26
9740: PUSH
9741: LD_INT 30
9743: PUSH
9744: LD_INT 31
9746: PUSH
9747: LD_INT 32
9749: PUSH
9750: LD_INT 36
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: PUSH
9775: LD_INT 101
9777: PUSH
9778: LD_INT 102
9780: PUSH
9781: LD_INT 103
9783: PUSH
9784: LD_INT 105
9786: PUSH
9787: LD_INT 106
9789: PUSH
9790: LD_INT 108
9792: PUSH
9793: LD_INT 109
9795: PUSH
9796: LD_INT 112
9798: PUSH
9799: LD_INT 116
9801: PUSH
9802: LD_INT 117
9804: PUSH
9805: LD_INT 118
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: ST_TO_ADDR
9825: GO 12080
9827: LD_INT 9
9829: DOUBLE
9830: EQUAL
9831: IFTRUE 9835
9833: GO 9983
9835: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_INT 2
9843: PUSH
9844: LD_INT 4
9846: PUSH
9847: LD_INT 5
9849: PUSH
9850: LD_INT 6
9852: PUSH
9853: LD_INT 7
9855: PUSH
9856: LD_INT 8
9858: PUSH
9859: LD_INT 11
9861: PUSH
9862: LD_INT 12
9864: PUSH
9865: LD_INT 15
9867: PUSH
9868: LD_INT 16
9870: PUSH
9871: LD_INT 20
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 22
9879: PUSH
9880: LD_INT 23
9882: PUSH
9883: LD_INT 25
9885: PUSH
9886: LD_INT 26
9888: PUSH
9889: LD_INT 28
9891: PUSH
9892: LD_INT 30
9894: PUSH
9895: LD_INT 31
9897: PUSH
9898: LD_INT 32
9900: PUSH
9901: LD_INT 36
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 101
9929: PUSH
9930: LD_INT 102
9932: PUSH
9933: LD_INT 103
9935: PUSH
9936: LD_INT 105
9938: PUSH
9939: LD_INT 106
9941: PUSH
9942: LD_INT 108
9944: PUSH
9945: LD_INT 109
9947: PUSH
9948: LD_INT 112
9950: PUSH
9951: LD_INT 114
9953: PUSH
9954: LD_INT 116
9956: PUSH
9957: LD_INT 117
9959: PUSH
9960: LD_INT 118
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: ST_TO_ADDR
9981: GO 12080
9983: LD_INT 10
9985: DOUBLE
9986: EQUAL
9987: IFTRUE 9991
9989: GO 10187
9991: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9992: LD_ADDR_VAR 0 2
9996: PUSH
9997: LD_INT 2
9999: PUSH
10000: LD_INT 4
10002: PUSH
10003: LD_INT 5
10005: PUSH
10006: LD_INT 6
10008: PUSH
10009: LD_INT 7
10011: PUSH
10012: LD_INT 8
10014: PUSH
10015: LD_INT 9
10017: PUSH
10018: LD_INT 10
10020: PUSH
10021: LD_INT 11
10023: PUSH
10024: LD_INT 12
10026: PUSH
10027: LD_INT 13
10029: PUSH
10030: LD_INT 14
10032: PUSH
10033: LD_INT 15
10035: PUSH
10036: LD_INT 16
10038: PUSH
10039: LD_INT 17
10041: PUSH
10042: LD_INT 18
10044: PUSH
10045: LD_INT 19
10047: PUSH
10048: LD_INT 20
10050: PUSH
10051: LD_INT 21
10053: PUSH
10054: LD_INT 22
10056: PUSH
10057: LD_INT 23
10059: PUSH
10060: LD_INT 24
10062: PUSH
10063: LD_INT 25
10065: PUSH
10066: LD_INT 26
10068: PUSH
10069: LD_INT 28
10071: PUSH
10072: LD_INT 30
10074: PUSH
10075: LD_INT 31
10077: PUSH
10078: LD_INT 32
10080: PUSH
10081: LD_INT 36
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 101
10117: PUSH
10118: LD_INT 102
10120: PUSH
10121: LD_INT 103
10123: PUSH
10124: LD_INT 104
10126: PUSH
10127: LD_INT 105
10129: PUSH
10130: LD_INT 106
10132: PUSH
10133: LD_INT 107
10135: PUSH
10136: LD_INT 108
10138: PUSH
10139: LD_INT 109
10141: PUSH
10142: LD_INT 110
10144: PUSH
10145: LD_INT 111
10147: PUSH
10148: LD_INT 112
10150: PUSH
10151: LD_INT 114
10153: PUSH
10154: LD_INT 116
10156: PUSH
10157: LD_INT 117
10159: PUSH
10160: LD_INT 118
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: ST_TO_ADDR
10185: GO 12080
10187: LD_INT 11
10189: DOUBLE
10190: EQUAL
10191: IFTRUE 10195
10193: GO 10399
10195: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10196: LD_ADDR_VAR 0 2
10200: PUSH
10201: LD_INT 2
10203: PUSH
10204: LD_INT 3
10206: PUSH
10207: LD_INT 4
10209: PUSH
10210: LD_INT 5
10212: PUSH
10213: LD_INT 6
10215: PUSH
10216: LD_INT 7
10218: PUSH
10219: LD_INT 8
10221: PUSH
10222: LD_INT 9
10224: PUSH
10225: LD_INT 10
10227: PUSH
10228: LD_INT 11
10230: PUSH
10231: LD_INT 12
10233: PUSH
10234: LD_INT 13
10236: PUSH
10237: LD_INT 14
10239: PUSH
10240: LD_INT 15
10242: PUSH
10243: LD_INT 16
10245: PUSH
10246: LD_INT 17
10248: PUSH
10249: LD_INT 18
10251: PUSH
10252: LD_INT 19
10254: PUSH
10255: LD_INT 20
10257: PUSH
10258: LD_INT 21
10260: PUSH
10261: LD_INT 22
10263: PUSH
10264: LD_INT 23
10266: PUSH
10267: LD_INT 24
10269: PUSH
10270: LD_INT 25
10272: PUSH
10273: LD_INT 26
10275: PUSH
10276: LD_INT 28
10278: PUSH
10279: LD_INT 30
10281: PUSH
10282: LD_INT 31
10284: PUSH
10285: LD_INT 32
10287: PUSH
10288: LD_INT 34
10290: PUSH
10291: LD_INT 36
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 101
10329: PUSH
10330: LD_INT 102
10332: PUSH
10333: LD_INT 103
10335: PUSH
10336: LD_INT 104
10338: PUSH
10339: LD_INT 105
10341: PUSH
10342: LD_INT 106
10344: PUSH
10345: LD_INT 107
10347: PUSH
10348: LD_INT 108
10350: PUSH
10351: LD_INT 109
10353: PUSH
10354: LD_INT 110
10356: PUSH
10357: LD_INT 111
10359: PUSH
10360: LD_INT 112
10362: PUSH
10363: LD_INT 114
10365: PUSH
10366: LD_INT 116
10368: PUSH
10369: LD_INT 117
10371: PUSH
10372: LD_INT 118
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: ST_TO_ADDR
10397: GO 12080
10399: LD_INT 12
10401: DOUBLE
10402: EQUAL
10403: IFTRUE 10407
10405: GO 10627
10407: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10408: LD_ADDR_VAR 0 2
10412: PUSH
10413: LD_INT 1
10415: PUSH
10416: LD_INT 2
10418: PUSH
10419: LD_INT 3
10421: PUSH
10422: LD_INT 4
10424: PUSH
10425: LD_INT 5
10427: PUSH
10428: LD_INT 6
10430: PUSH
10431: LD_INT 7
10433: PUSH
10434: LD_INT 8
10436: PUSH
10437: LD_INT 9
10439: PUSH
10440: LD_INT 10
10442: PUSH
10443: LD_INT 11
10445: PUSH
10446: LD_INT 12
10448: PUSH
10449: LD_INT 13
10451: PUSH
10452: LD_INT 14
10454: PUSH
10455: LD_INT 15
10457: PUSH
10458: LD_INT 16
10460: PUSH
10461: LD_INT 17
10463: PUSH
10464: LD_INT 18
10466: PUSH
10467: LD_INT 19
10469: PUSH
10470: LD_INT 20
10472: PUSH
10473: LD_INT 21
10475: PUSH
10476: LD_INT 22
10478: PUSH
10479: LD_INT 23
10481: PUSH
10482: LD_INT 24
10484: PUSH
10485: LD_INT 25
10487: PUSH
10488: LD_INT 26
10490: PUSH
10491: LD_INT 27
10493: PUSH
10494: LD_INT 28
10496: PUSH
10497: LD_INT 30
10499: PUSH
10500: LD_INT 31
10502: PUSH
10503: LD_INT 32
10505: PUSH
10506: LD_INT 33
10508: PUSH
10509: LD_INT 34
10511: PUSH
10512: LD_INT 36
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: PUSH
10551: LD_INT 101
10553: PUSH
10554: LD_INT 102
10556: PUSH
10557: LD_INT 103
10559: PUSH
10560: LD_INT 104
10562: PUSH
10563: LD_INT 105
10565: PUSH
10566: LD_INT 106
10568: PUSH
10569: LD_INT 107
10571: PUSH
10572: LD_INT 108
10574: PUSH
10575: LD_INT 109
10577: PUSH
10578: LD_INT 110
10580: PUSH
10581: LD_INT 111
10583: PUSH
10584: LD_INT 112
10586: PUSH
10587: LD_INT 113
10589: PUSH
10590: LD_INT 114
10592: PUSH
10593: LD_INT 116
10595: PUSH
10596: LD_INT 117
10598: PUSH
10599: LD_INT 118
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: ST_TO_ADDR
10625: GO 12080
10627: LD_INT 13
10629: DOUBLE
10630: EQUAL
10631: IFTRUE 10635
10633: GO 10843
10635: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10636: LD_ADDR_VAR 0 2
10640: PUSH
10641: LD_INT 1
10643: PUSH
10644: LD_INT 2
10646: PUSH
10647: LD_INT 3
10649: PUSH
10650: LD_INT 4
10652: PUSH
10653: LD_INT 5
10655: PUSH
10656: LD_INT 8
10658: PUSH
10659: LD_INT 9
10661: PUSH
10662: LD_INT 10
10664: PUSH
10665: LD_INT 11
10667: PUSH
10668: LD_INT 12
10670: PUSH
10671: LD_INT 14
10673: PUSH
10674: LD_INT 15
10676: PUSH
10677: LD_INT 16
10679: PUSH
10680: LD_INT 17
10682: PUSH
10683: LD_INT 18
10685: PUSH
10686: LD_INT 19
10688: PUSH
10689: LD_INT 20
10691: PUSH
10692: LD_INT 21
10694: PUSH
10695: LD_INT 22
10697: PUSH
10698: LD_INT 23
10700: PUSH
10701: LD_INT 24
10703: PUSH
10704: LD_INT 25
10706: PUSH
10707: LD_INT 26
10709: PUSH
10710: LD_INT 27
10712: PUSH
10713: LD_INT 28
10715: PUSH
10716: LD_INT 30
10718: PUSH
10719: LD_INT 31
10721: PUSH
10722: LD_INT 32
10724: PUSH
10725: LD_INT 33
10727: PUSH
10728: LD_INT 34
10730: PUSH
10731: LD_INT 36
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 101
10769: PUSH
10770: LD_INT 102
10772: PUSH
10773: LD_INT 103
10775: PUSH
10776: LD_INT 104
10778: PUSH
10779: LD_INT 105
10781: PUSH
10782: LD_INT 106
10784: PUSH
10785: LD_INT 107
10787: PUSH
10788: LD_INT 108
10790: PUSH
10791: LD_INT 109
10793: PUSH
10794: LD_INT 110
10796: PUSH
10797: LD_INT 111
10799: PUSH
10800: LD_INT 112
10802: PUSH
10803: LD_INT 113
10805: PUSH
10806: LD_INT 114
10808: PUSH
10809: LD_INT 116
10811: PUSH
10812: LD_INT 117
10814: PUSH
10815: LD_INT 118
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: ST_TO_ADDR
10841: GO 12080
10843: LD_INT 14
10845: DOUBLE
10846: EQUAL
10847: IFTRUE 10851
10849: GO 11075
10851: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10852: LD_ADDR_VAR 0 2
10856: PUSH
10857: LD_INT 1
10859: PUSH
10860: LD_INT 2
10862: PUSH
10863: LD_INT 3
10865: PUSH
10866: LD_INT 4
10868: PUSH
10869: LD_INT 5
10871: PUSH
10872: LD_INT 6
10874: PUSH
10875: LD_INT 7
10877: PUSH
10878: LD_INT 8
10880: PUSH
10881: LD_INT 9
10883: PUSH
10884: LD_INT 10
10886: PUSH
10887: LD_INT 11
10889: PUSH
10890: LD_INT 12
10892: PUSH
10893: LD_INT 13
10895: PUSH
10896: LD_INT 14
10898: PUSH
10899: LD_INT 15
10901: PUSH
10902: LD_INT 16
10904: PUSH
10905: LD_INT 17
10907: PUSH
10908: LD_INT 18
10910: PUSH
10911: LD_INT 19
10913: PUSH
10914: LD_INT 20
10916: PUSH
10917: LD_INT 21
10919: PUSH
10920: LD_INT 22
10922: PUSH
10923: LD_INT 23
10925: PUSH
10926: LD_INT 24
10928: PUSH
10929: LD_INT 25
10931: PUSH
10932: LD_INT 26
10934: PUSH
10935: LD_INT 27
10937: PUSH
10938: LD_INT 28
10940: PUSH
10941: LD_INT 29
10943: PUSH
10944: LD_INT 30
10946: PUSH
10947: LD_INT 31
10949: PUSH
10950: LD_INT 32
10952: PUSH
10953: LD_INT 33
10955: PUSH
10956: LD_INT 34
10958: PUSH
10959: LD_INT 36
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 101
11001: PUSH
11002: LD_INT 102
11004: PUSH
11005: LD_INT 103
11007: PUSH
11008: LD_INT 104
11010: PUSH
11011: LD_INT 105
11013: PUSH
11014: LD_INT 106
11016: PUSH
11017: LD_INT 107
11019: PUSH
11020: LD_INT 108
11022: PUSH
11023: LD_INT 109
11025: PUSH
11026: LD_INT 110
11028: PUSH
11029: LD_INT 111
11031: PUSH
11032: LD_INT 112
11034: PUSH
11035: LD_INT 113
11037: PUSH
11038: LD_INT 114
11040: PUSH
11041: LD_INT 116
11043: PUSH
11044: LD_INT 117
11046: PUSH
11047: LD_INT 118
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: ST_TO_ADDR
11073: GO 12080
11075: LD_INT 15
11077: DOUBLE
11078: EQUAL
11079: IFTRUE 11083
11081: GO 11307
11083: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11084: LD_ADDR_VAR 0 2
11088: PUSH
11089: LD_INT 1
11091: PUSH
11092: LD_INT 2
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: LD_INT 4
11100: PUSH
11101: LD_INT 5
11103: PUSH
11104: LD_INT 6
11106: PUSH
11107: LD_INT 7
11109: PUSH
11110: LD_INT 8
11112: PUSH
11113: LD_INT 9
11115: PUSH
11116: LD_INT 10
11118: PUSH
11119: LD_INT 11
11121: PUSH
11122: LD_INT 12
11124: PUSH
11125: LD_INT 13
11127: PUSH
11128: LD_INT 14
11130: PUSH
11131: LD_INT 15
11133: PUSH
11134: LD_INT 16
11136: PUSH
11137: LD_INT 17
11139: PUSH
11140: LD_INT 18
11142: PUSH
11143: LD_INT 19
11145: PUSH
11146: LD_INT 20
11148: PUSH
11149: LD_INT 21
11151: PUSH
11152: LD_INT 22
11154: PUSH
11155: LD_INT 23
11157: PUSH
11158: LD_INT 24
11160: PUSH
11161: LD_INT 25
11163: PUSH
11164: LD_INT 26
11166: PUSH
11167: LD_INT 27
11169: PUSH
11170: LD_INT 28
11172: PUSH
11173: LD_INT 29
11175: PUSH
11176: LD_INT 30
11178: PUSH
11179: LD_INT 31
11181: PUSH
11182: LD_INT 32
11184: PUSH
11185: LD_INT 33
11187: PUSH
11188: LD_INT 34
11190: PUSH
11191: LD_INT 36
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 101
11233: PUSH
11234: LD_INT 102
11236: PUSH
11237: LD_INT 103
11239: PUSH
11240: LD_INT 104
11242: PUSH
11243: LD_INT 105
11245: PUSH
11246: LD_INT 106
11248: PUSH
11249: LD_INT 107
11251: PUSH
11252: LD_INT 108
11254: PUSH
11255: LD_INT 109
11257: PUSH
11258: LD_INT 110
11260: PUSH
11261: LD_INT 111
11263: PUSH
11264: LD_INT 112
11266: PUSH
11267: LD_INT 113
11269: PUSH
11270: LD_INT 114
11272: PUSH
11273: LD_INT 116
11275: PUSH
11276: LD_INT 117
11278: PUSH
11279: LD_INT 118
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: ST_TO_ADDR
11305: GO 12080
11307: LD_INT 16
11309: DOUBLE
11310: EQUAL
11311: IFTRUE 11315
11313: GO 11451
11315: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11316: LD_ADDR_VAR 0 2
11320: PUSH
11321: LD_INT 2
11323: PUSH
11324: LD_INT 4
11326: PUSH
11327: LD_INT 5
11329: PUSH
11330: LD_INT 7
11332: PUSH
11333: LD_INT 11
11335: PUSH
11336: LD_INT 12
11338: PUSH
11339: LD_INT 15
11341: PUSH
11342: LD_INT 16
11344: PUSH
11345: LD_INT 20
11347: PUSH
11348: LD_INT 21
11350: PUSH
11351: LD_INT 22
11353: PUSH
11354: LD_INT 23
11356: PUSH
11357: LD_INT 25
11359: PUSH
11360: LD_INT 26
11362: PUSH
11363: LD_INT 30
11365: PUSH
11366: LD_INT 31
11368: PUSH
11369: LD_INT 32
11371: PUSH
11372: LD_INT 33
11374: PUSH
11375: LD_INT 34
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 101
11401: PUSH
11402: LD_INT 102
11404: PUSH
11405: LD_INT 103
11407: PUSH
11408: LD_INT 106
11410: PUSH
11411: LD_INT 108
11413: PUSH
11414: LD_INT 112
11416: PUSH
11417: LD_INT 113
11419: PUSH
11420: LD_INT 114
11422: PUSH
11423: LD_INT 116
11425: PUSH
11426: LD_INT 117
11428: PUSH
11429: LD_INT 118
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: ST_TO_ADDR
11449: GO 12080
11451: LD_INT 17
11453: DOUBLE
11454: EQUAL
11455: IFTRUE 11459
11457: GO 11683
11459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11460: LD_ADDR_VAR 0 2
11464: PUSH
11465: LD_INT 1
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 4
11476: PUSH
11477: LD_INT 5
11479: PUSH
11480: LD_INT 6
11482: PUSH
11483: LD_INT 7
11485: PUSH
11486: LD_INT 8
11488: PUSH
11489: LD_INT 9
11491: PUSH
11492: LD_INT 10
11494: PUSH
11495: LD_INT 11
11497: PUSH
11498: LD_INT 12
11500: PUSH
11501: LD_INT 13
11503: PUSH
11504: LD_INT 14
11506: PUSH
11507: LD_INT 15
11509: PUSH
11510: LD_INT 16
11512: PUSH
11513: LD_INT 17
11515: PUSH
11516: LD_INT 18
11518: PUSH
11519: LD_INT 19
11521: PUSH
11522: LD_INT 20
11524: PUSH
11525: LD_INT 21
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: LD_INT 23
11533: PUSH
11534: LD_INT 24
11536: PUSH
11537: LD_INT 25
11539: PUSH
11540: LD_INT 26
11542: PUSH
11543: LD_INT 27
11545: PUSH
11546: LD_INT 28
11548: PUSH
11549: LD_INT 29
11551: PUSH
11552: LD_INT 30
11554: PUSH
11555: LD_INT 31
11557: PUSH
11558: LD_INT 32
11560: PUSH
11561: LD_INT 33
11563: PUSH
11564: LD_INT 34
11566: PUSH
11567: LD_INT 36
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 101
11609: PUSH
11610: LD_INT 102
11612: PUSH
11613: LD_INT 103
11615: PUSH
11616: LD_INT 104
11618: PUSH
11619: LD_INT 105
11621: PUSH
11622: LD_INT 106
11624: PUSH
11625: LD_INT 107
11627: PUSH
11628: LD_INT 108
11630: PUSH
11631: LD_INT 109
11633: PUSH
11634: LD_INT 110
11636: PUSH
11637: LD_INT 111
11639: PUSH
11640: LD_INT 112
11642: PUSH
11643: LD_INT 113
11645: PUSH
11646: LD_INT 114
11648: PUSH
11649: LD_INT 116
11651: PUSH
11652: LD_INT 117
11654: PUSH
11655: LD_INT 118
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: ST_TO_ADDR
11681: GO 12080
11683: LD_INT 18
11685: DOUBLE
11686: EQUAL
11687: IFTRUE 11691
11689: GO 11839
11691: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11692: LD_ADDR_VAR 0 2
11696: PUSH
11697: LD_INT 2
11699: PUSH
11700: LD_INT 4
11702: PUSH
11703: LD_INT 5
11705: PUSH
11706: LD_INT 7
11708: PUSH
11709: LD_INT 11
11711: PUSH
11712: LD_INT 12
11714: PUSH
11715: LD_INT 15
11717: PUSH
11718: LD_INT 16
11720: PUSH
11721: LD_INT 20
11723: PUSH
11724: LD_INT 21
11726: PUSH
11727: LD_INT 22
11729: PUSH
11730: LD_INT 23
11732: PUSH
11733: LD_INT 25
11735: PUSH
11736: LD_INT 26
11738: PUSH
11739: LD_INT 30
11741: PUSH
11742: LD_INT 31
11744: PUSH
11745: LD_INT 32
11747: PUSH
11748: LD_INT 33
11750: PUSH
11751: LD_INT 34
11753: PUSH
11754: LD_INT 35
11756: PUSH
11757: LD_INT 36
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 101
11785: PUSH
11786: LD_INT 102
11788: PUSH
11789: LD_INT 103
11791: PUSH
11792: LD_INT 106
11794: PUSH
11795: LD_INT 108
11797: PUSH
11798: LD_INT 112
11800: PUSH
11801: LD_INT 113
11803: PUSH
11804: LD_INT 114
11806: PUSH
11807: LD_INT 115
11809: PUSH
11810: LD_INT 116
11812: PUSH
11813: LD_INT 117
11815: PUSH
11816: LD_INT 118
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: ST_TO_ADDR
11837: GO 12080
11839: LD_INT 19
11841: DOUBLE
11842: EQUAL
11843: IFTRUE 11847
11845: GO 12079
11847: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11848: LD_ADDR_VAR 0 2
11852: PUSH
11853: LD_INT 1
11855: PUSH
11856: LD_INT 2
11858: PUSH
11859: LD_INT 3
11861: PUSH
11862: LD_INT 4
11864: PUSH
11865: LD_INT 5
11867: PUSH
11868: LD_INT 6
11870: PUSH
11871: LD_INT 7
11873: PUSH
11874: LD_INT 8
11876: PUSH
11877: LD_INT 9
11879: PUSH
11880: LD_INT 10
11882: PUSH
11883: LD_INT 11
11885: PUSH
11886: LD_INT 12
11888: PUSH
11889: LD_INT 13
11891: PUSH
11892: LD_INT 14
11894: PUSH
11895: LD_INT 15
11897: PUSH
11898: LD_INT 16
11900: PUSH
11901: LD_INT 17
11903: PUSH
11904: LD_INT 18
11906: PUSH
11907: LD_INT 19
11909: PUSH
11910: LD_INT 20
11912: PUSH
11913: LD_INT 21
11915: PUSH
11916: LD_INT 22
11918: PUSH
11919: LD_INT 23
11921: PUSH
11922: LD_INT 24
11924: PUSH
11925: LD_INT 25
11927: PUSH
11928: LD_INT 26
11930: PUSH
11931: LD_INT 27
11933: PUSH
11934: LD_INT 28
11936: PUSH
11937: LD_INT 29
11939: PUSH
11940: LD_INT 30
11942: PUSH
11943: LD_INT 31
11945: PUSH
11946: LD_INT 32
11948: PUSH
11949: LD_INT 33
11951: PUSH
11952: LD_INT 34
11954: PUSH
11955: LD_INT 35
11957: PUSH
11958: LD_INT 36
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 101
12001: PUSH
12002: LD_INT 102
12004: PUSH
12005: LD_INT 103
12007: PUSH
12008: LD_INT 104
12010: PUSH
12011: LD_INT 105
12013: PUSH
12014: LD_INT 106
12016: PUSH
12017: LD_INT 107
12019: PUSH
12020: LD_INT 108
12022: PUSH
12023: LD_INT 109
12025: PUSH
12026: LD_INT 110
12028: PUSH
12029: LD_INT 111
12031: PUSH
12032: LD_INT 112
12034: PUSH
12035: LD_INT 113
12037: PUSH
12038: LD_INT 114
12040: PUSH
12041: LD_INT 115
12043: PUSH
12044: LD_INT 116
12046: PUSH
12047: LD_INT 117
12049: PUSH
12050: LD_INT 118
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: ST_TO_ADDR
12077: GO 12080
12079: POP
// end else
12080: GO 12311
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12082: LD_ADDR_VAR 0 2
12086: PUSH
12087: LD_INT 1
12089: PUSH
12090: LD_INT 2
12092: PUSH
12093: LD_INT 3
12095: PUSH
12096: LD_INT 4
12098: PUSH
12099: LD_INT 5
12101: PUSH
12102: LD_INT 6
12104: PUSH
12105: LD_INT 7
12107: PUSH
12108: LD_INT 8
12110: PUSH
12111: LD_INT 9
12113: PUSH
12114: LD_INT 10
12116: PUSH
12117: LD_INT 11
12119: PUSH
12120: LD_INT 12
12122: PUSH
12123: LD_INT 13
12125: PUSH
12126: LD_INT 14
12128: PUSH
12129: LD_INT 15
12131: PUSH
12132: LD_INT 16
12134: PUSH
12135: LD_INT 17
12137: PUSH
12138: LD_INT 18
12140: PUSH
12141: LD_INT 19
12143: PUSH
12144: LD_INT 20
12146: PUSH
12147: LD_INT 21
12149: PUSH
12150: LD_INT 22
12152: PUSH
12153: LD_INT 23
12155: PUSH
12156: LD_INT 24
12158: PUSH
12159: LD_INT 25
12161: PUSH
12162: LD_INT 26
12164: PUSH
12165: LD_INT 27
12167: PUSH
12168: LD_INT 28
12170: PUSH
12171: LD_INT 29
12173: PUSH
12174: LD_INT 30
12176: PUSH
12177: LD_INT 31
12179: PUSH
12180: LD_INT 32
12182: PUSH
12183: LD_INT 33
12185: PUSH
12186: LD_INT 34
12188: PUSH
12189: LD_INT 35
12191: PUSH
12192: LD_INT 36
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 101
12235: PUSH
12236: LD_INT 102
12238: PUSH
12239: LD_INT 103
12241: PUSH
12242: LD_INT 104
12244: PUSH
12245: LD_INT 105
12247: PUSH
12248: LD_INT 106
12250: PUSH
12251: LD_INT 107
12253: PUSH
12254: LD_INT 108
12256: PUSH
12257: LD_INT 109
12259: PUSH
12260: LD_INT 110
12262: PUSH
12263: LD_INT 111
12265: PUSH
12266: LD_INT 112
12268: PUSH
12269: LD_INT 113
12271: PUSH
12272: LD_INT 114
12274: PUSH
12275: LD_INT 115
12277: PUSH
12278: LD_INT 116
12280: PUSH
12281: LD_INT 117
12283: PUSH
12284: LD_INT 118
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: ST_TO_ADDR
// if result then
12311: LD_VAR 0 2
12315: IFFALSE 13101
// begin normal :=  ;
12317: LD_ADDR_VAR 0 5
12321: PUSH
12322: LD_STRING 
12324: ST_TO_ADDR
// hardcore :=  ;
12325: LD_ADDR_VAR 0 6
12329: PUSH
12330: LD_STRING 
12332: ST_TO_ADDR
// active :=  ;
12333: LD_ADDR_VAR 0 7
12337: PUSH
12338: LD_STRING 
12340: ST_TO_ADDR
// for i = 1 to normalCounter do
12341: LD_ADDR_VAR 0 8
12345: PUSH
12346: DOUBLE
12347: LD_INT 1
12349: DEC
12350: ST_TO_ADDR
12351: LD_EXP 20
12355: PUSH
12356: FOR_TO
12357: IFFALSE 12458
// begin tmp := 0 ;
12359: LD_ADDR_VAR 0 3
12363: PUSH
12364: LD_STRING 0
12366: ST_TO_ADDR
// if result [ 1 ] then
12367: LD_VAR 0 2
12371: PUSH
12372: LD_INT 1
12374: ARRAY
12375: IFFALSE 12440
// if result [ 1 ] [ 1 ] = i then
12377: LD_VAR 0 2
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: PUSH
12386: LD_INT 1
12388: ARRAY
12389: PUSH
12390: LD_VAR 0 8
12394: EQUAL
12395: IFFALSE 12440
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: LD_VAR 0 2
12406: PPUSH
12407: LD_INT 1
12409: PPUSH
12410: LD_VAR 0 2
12414: PUSH
12415: LD_INT 1
12417: ARRAY
12418: PPUSH
12419: LD_INT 1
12421: PPUSH
12422: CALL_OW 3
12426: PPUSH
12427: CALL_OW 1
12431: ST_TO_ADDR
// tmp := 1 ;
12432: LD_ADDR_VAR 0 3
12436: PUSH
12437: LD_STRING 1
12439: ST_TO_ADDR
// end ; normal := normal & tmp ;
12440: LD_ADDR_VAR 0 5
12444: PUSH
12445: LD_VAR 0 5
12449: PUSH
12450: LD_VAR 0 3
12454: STR
12455: ST_TO_ADDR
// end ;
12456: GO 12356
12458: POP
12459: POP
// for i = 1 to hardcoreCounter do
12460: LD_ADDR_VAR 0 8
12464: PUSH
12465: DOUBLE
12466: LD_INT 1
12468: DEC
12469: ST_TO_ADDR
12470: LD_EXP 21
12474: PUSH
12475: FOR_TO
12476: IFFALSE 12581
// begin tmp := 0 ;
12478: LD_ADDR_VAR 0 3
12482: PUSH
12483: LD_STRING 0
12485: ST_TO_ADDR
// if result [ 2 ] then
12486: LD_VAR 0 2
12490: PUSH
12491: LD_INT 2
12493: ARRAY
12494: IFFALSE 12563
// if result [ 2 ] [ 1 ] = 100 + i then
12496: LD_VAR 0 2
12500: PUSH
12501: LD_INT 2
12503: ARRAY
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PUSH
12509: LD_INT 100
12511: PUSH
12512: LD_VAR 0 8
12516: PLUS
12517: EQUAL
12518: IFFALSE 12563
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12520: LD_ADDR_VAR 0 2
12524: PUSH
12525: LD_VAR 0 2
12529: PPUSH
12530: LD_INT 2
12532: PPUSH
12533: LD_VAR 0 2
12537: PUSH
12538: LD_INT 2
12540: ARRAY
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 3
12549: PPUSH
12550: CALL_OW 1
12554: ST_TO_ADDR
// tmp := 1 ;
12555: LD_ADDR_VAR 0 3
12559: PUSH
12560: LD_STRING 1
12562: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12563: LD_ADDR_VAR 0 6
12567: PUSH
12568: LD_VAR 0 6
12572: PUSH
12573: LD_VAR 0 3
12577: STR
12578: ST_TO_ADDR
// end ;
12579: GO 12475
12581: POP
12582: POP
// if isGameLoad then
12583: LD_VAR 0 1
12587: IFFALSE 13062
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12589: LD_ADDR_VAR 0 4
12593: PUSH
12594: LD_EXP 24
12598: PUSH
12599: LD_EXP 23
12603: PUSH
12604: LD_EXP 25
12608: PUSH
12609: LD_EXP 22
12613: PUSH
12614: LD_EXP 26
12618: PUSH
12619: LD_EXP 27
12623: PUSH
12624: LD_EXP 28
12628: PUSH
12629: LD_EXP 29
12633: PUSH
12634: LD_EXP 30
12638: PUSH
12639: LD_EXP 31
12643: PUSH
12644: LD_EXP 32
12648: PUSH
12649: LD_EXP 33
12653: PUSH
12654: LD_EXP 34
12658: PUSH
12659: LD_EXP 35
12663: PUSH
12664: LD_EXP 43
12668: PUSH
12669: LD_EXP 44
12673: PUSH
12674: LD_EXP 45
12678: PUSH
12679: LD_EXP 46
12683: PUSH
12684: LD_EXP 48
12688: PUSH
12689: LD_EXP 49
12693: PUSH
12694: LD_EXP 50
12698: PUSH
12699: LD_EXP 53
12703: PUSH
12704: LD_EXP 55
12708: PUSH
12709: LD_EXP 56
12713: PUSH
12714: LD_EXP 57
12718: PUSH
12719: LD_EXP 59
12723: PUSH
12724: LD_EXP 60
12728: PUSH
12729: LD_EXP 63
12733: PUSH
12734: LD_EXP 64
12738: PUSH
12739: LD_EXP 65
12743: PUSH
12744: LD_EXP 66
12748: PUSH
12749: LD_EXP 67
12753: PUSH
12754: LD_EXP 68
12758: PUSH
12759: LD_EXP 69
12763: PUSH
12764: LD_EXP 70
12768: PUSH
12769: LD_EXP 71
12773: PUSH
12774: LD_EXP 36
12778: PUSH
12779: LD_EXP 37
12783: PUSH
12784: LD_EXP 40
12788: PUSH
12789: LD_EXP 41
12793: PUSH
12794: LD_EXP 42
12798: PUSH
12799: LD_EXP 38
12803: PUSH
12804: LD_EXP 39
12808: PUSH
12809: LD_EXP 47
12813: PUSH
12814: LD_EXP 51
12818: PUSH
12819: LD_EXP 52
12823: PUSH
12824: LD_EXP 54
12828: PUSH
12829: LD_EXP 58
12833: PUSH
12834: LD_EXP 61
12838: PUSH
12839: LD_EXP 62
12843: PUSH
12844: LD_EXP 72
12848: PUSH
12849: LD_EXP 73
12853: PUSH
12854: LD_EXP 74
12858: PUSH
12859: LD_EXP 75
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: ST_TO_ADDR
// tmp :=  ;
12920: LD_ADDR_VAR 0 3
12924: PUSH
12925: LD_STRING 
12927: ST_TO_ADDR
// for i = 1 to normalCounter do
12928: LD_ADDR_VAR 0 8
12932: PUSH
12933: DOUBLE
12934: LD_INT 1
12936: DEC
12937: ST_TO_ADDR
12938: LD_EXP 20
12942: PUSH
12943: FOR_TO
12944: IFFALSE 12980
// begin if flags [ i ] then
12946: LD_VAR 0 4
12950: PUSH
12951: LD_VAR 0 8
12955: ARRAY
12956: IFFALSE 12978
// tmp := tmp & i & ; ;
12958: LD_ADDR_VAR 0 3
12962: PUSH
12963: LD_VAR 0 3
12967: PUSH
12968: LD_VAR 0 8
12972: STR
12973: PUSH
12974: LD_STRING ;
12976: STR
12977: ST_TO_ADDR
// end ;
12978: GO 12943
12980: POP
12981: POP
// for i = 1 to hardcoreCounter do
12982: LD_ADDR_VAR 0 8
12986: PUSH
12987: DOUBLE
12988: LD_INT 1
12990: DEC
12991: ST_TO_ADDR
12992: LD_EXP 21
12996: PUSH
12997: FOR_TO
12998: IFFALSE 13044
// begin if flags [ normalCounter + i ] then
13000: LD_VAR 0 4
13004: PUSH
13005: LD_EXP 20
13009: PUSH
13010: LD_VAR 0 8
13014: PLUS
13015: ARRAY
13016: IFFALSE 13042
// tmp := tmp & ( 100 + i ) & ; ;
13018: LD_ADDR_VAR 0 3
13022: PUSH
13023: LD_VAR 0 3
13027: PUSH
13028: LD_INT 100
13030: PUSH
13031: LD_VAR 0 8
13035: PLUS
13036: STR
13037: PUSH
13038: LD_STRING ;
13040: STR
13041: ST_TO_ADDR
// end ;
13042: GO 12997
13044: POP
13045: POP
// if tmp then
13046: LD_VAR 0 3
13050: IFFALSE 13062
// active := tmp ;
13052: LD_ADDR_VAR 0 7
13056: PUSH
13057: LD_VAR 0 3
13061: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13062: LD_STRING getStreamItemsFromMission("
13064: PUSH
13065: LD_VAR 0 5
13069: STR
13070: PUSH
13071: LD_STRING ","
13073: STR
13074: PUSH
13075: LD_VAR 0 6
13079: STR
13080: PUSH
13081: LD_STRING ","
13083: STR
13084: PUSH
13085: LD_VAR 0 7
13089: STR
13090: PUSH
13091: LD_STRING ")
13093: STR
13094: PPUSH
13095: CALL_OW 559
// end else
13099: GO 13108
// ToLua ( getStreamItemsFromMission("","","") ) ;
13101: LD_STRING getStreamItemsFromMission("","","")
13103: PPUSH
13104: CALL_OW 559
// end ;
13108: LD_VAR 0 2
13112: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13113: LD_EXP 19
13117: PUSH
13118: LD_EXP 24
13122: AND
13123: IFFALSE 13247
13125: GO 13127
13127: DISABLE
13128: LD_INT 0
13130: PPUSH
13131: PPUSH
// begin enable ;
13132: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13133: LD_ADDR_VAR 0 2
13137: PUSH
13138: LD_INT 22
13140: PUSH
13141: LD_OWVAR 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 2
13152: PUSH
13153: LD_INT 34
13155: PUSH
13156: LD_INT 7
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 34
13165: PUSH
13166: LD_INT 45
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 34
13175: PUSH
13176: LD_INT 28
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 34
13185: PUSH
13186: LD_INT 47
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PPUSH
13204: CALL_OW 69
13208: ST_TO_ADDR
// if not tmp then
13209: LD_VAR 0 2
13213: NOT
13214: IFFALSE 13218
// exit ;
13216: GO 13247
// for i in tmp do
13218: LD_ADDR_VAR 0 1
13222: PUSH
13223: LD_VAR 0 2
13227: PUSH
13228: FOR_IN
13229: IFFALSE 13245
// begin SetLives ( i , 0 ) ;
13231: LD_VAR 0 1
13235: PPUSH
13236: LD_INT 0
13238: PPUSH
13239: CALL_OW 234
// end ;
13243: GO 13228
13245: POP
13246: POP
// end ;
13247: PPOPN 2
13249: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13250: LD_EXP 19
13254: PUSH
13255: LD_EXP 25
13259: AND
13260: IFFALSE 13344
13262: GO 13264
13264: DISABLE
13265: LD_INT 0
13267: PPUSH
13268: PPUSH
// begin enable ;
13269: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13270: LD_ADDR_VAR 0 2
13274: PUSH
13275: LD_INT 22
13277: PUSH
13278: LD_OWVAR 2
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 32
13289: PUSH
13290: LD_INT 3
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 69
13305: ST_TO_ADDR
// if not tmp then
13306: LD_VAR 0 2
13310: NOT
13311: IFFALSE 13315
// exit ;
13313: GO 13344
// for i in tmp do
13315: LD_ADDR_VAR 0 1
13319: PUSH
13320: LD_VAR 0 2
13324: PUSH
13325: FOR_IN
13326: IFFALSE 13342
// begin SetLives ( i , 0 ) ;
13328: LD_VAR 0 1
13332: PPUSH
13333: LD_INT 0
13335: PPUSH
13336: CALL_OW 234
// end ;
13340: GO 13325
13342: POP
13343: POP
// end ;
13344: PPOPN 2
13346: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13347: LD_EXP 19
13351: PUSH
13352: LD_EXP 22
13356: AND
13357: IFFALSE 13450
13359: GO 13361
13361: DISABLE
13362: LD_INT 0
13364: PPUSH
// begin enable ;
13365: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13366: LD_ADDR_VAR 0 1
13370: PUSH
13371: LD_INT 22
13373: PUSH
13374: LD_OWVAR 2
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: LD_INT 25
13388: PUSH
13389: LD_INT 5
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 25
13398: PUSH
13399: LD_INT 9
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 25
13408: PUSH
13409: LD_INT 8
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PPUSH
13426: CALL_OW 69
13430: PUSH
13431: FOR_IN
13432: IFFALSE 13448
// begin SetClass ( i , 1 ) ;
13434: LD_VAR 0 1
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 336
// end ;
13446: GO 13431
13448: POP
13449: POP
// end ;
13450: PPOPN 1
13452: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13453: LD_EXP 19
13457: PUSH
13458: LD_EXP 23
13462: AND
13463: PUSH
13464: LD_OWVAR 65
13468: PUSH
13469: LD_INT 7
13471: LESS
13472: AND
13473: IFFALSE 13487
13475: GO 13477
13477: DISABLE
// begin enable ;
13478: ENABLE
// game_speed := 7 ;
13479: LD_ADDR_OWVAR 65
13483: PUSH
13484: LD_INT 7
13486: ST_TO_ADDR
// end ;
13487: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13488: LD_EXP 19
13492: PUSH
13493: LD_EXP 26
13497: AND
13498: IFFALSE 13700
13500: GO 13502
13502: DISABLE
13503: LD_INT 0
13505: PPUSH
13506: PPUSH
13507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13508: LD_ADDR_VAR 0 3
13512: PUSH
13513: LD_INT 81
13515: PUSH
13516: LD_OWVAR 2
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: LD_INT 21
13527: PUSH
13528: LD_INT 1
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PPUSH
13539: CALL_OW 69
13543: ST_TO_ADDR
// if not tmp then
13544: LD_VAR 0 3
13548: NOT
13549: IFFALSE 13553
// exit ;
13551: GO 13700
// if tmp > 5 then
13553: LD_VAR 0 3
13557: PUSH
13558: LD_INT 5
13560: GREATER
13561: IFFALSE 13573
// k := 5 else
13563: LD_ADDR_VAR 0 2
13567: PUSH
13568: LD_INT 5
13570: ST_TO_ADDR
13571: GO 13583
// k := tmp ;
13573: LD_ADDR_VAR 0 2
13577: PUSH
13578: LD_VAR 0 3
13582: ST_TO_ADDR
// for i := 1 to k do
13583: LD_ADDR_VAR 0 1
13587: PUSH
13588: DOUBLE
13589: LD_INT 1
13591: DEC
13592: ST_TO_ADDR
13593: LD_VAR 0 2
13597: PUSH
13598: FOR_TO
13599: IFFALSE 13698
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13601: LD_VAR 0 3
13605: PUSH
13606: LD_VAR 0 1
13610: ARRAY
13611: PPUSH
13612: LD_VAR 0 1
13616: PUSH
13617: LD_INT 4
13619: MOD
13620: PUSH
13621: LD_INT 1
13623: PLUS
13624: PPUSH
13625: CALL_OW 259
13629: PUSH
13630: LD_INT 10
13632: LESS
13633: IFFALSE 13696
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13635: LD_VAR 0 3
13639: PUSH
13640: LD_VAR 0 1
13644: ARRAY
13645: PPUSH
13646: LD_VAR 0 1
13650: PUSH
13651: LD_INT 4
13653: MOD
13654: PUSH
13655: LD_INT 1
13657: PLUS
13658: PPUSH
13659: LD_VAR 0 3
13663: PUSH
13664: LD_VAR 0 1
13668: ARRAY
13669: PPUSH
13670: LD_VAR 0 1
13674: PUSH
13675: LD_INT 4
13677: MOD
13678: PUSH
13679: LD_INT 1
13681: PLUS
13682: PPUSH
13683: CALL_OW 259
13687: PUSH
13688: LD_INT 1
13690: PLUS
13691: PPUSH
13692: CALL_OW 237
13696: GO 13598
13698: POP
13699: POP
// end ;
13700: PPOPN 3
13702: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13703: LD_EXP 19
13707: PUSH
13708: LD_EXP 27
13712: AND
13713: IFFALSE 13733
13715: GO 13717
13717: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13718: LD_INT 4
13720: PPUSH
13721: LD_OWVAR 2
13725: PPUSH
13726: LD_INT 0
13728: PPUSH
13729: CALL_OW 324
13733: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13734: LD_EXP 19
13738: PUSH
13739: LD_EXP 56
13743: AND
13744: IFFALSE 13764
13746: GO 13748
13748: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13749: LD_INT 19
13751: PPUSH
13752: LD_OWVAR 2
13756: PPUSH
13757: LD_INT 0
13759: PPUSH
13760: CALL_OW 324
13764: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13765: LD_EXP 19
13769: PUSH
13770: LD_EXP 28
13774: AND
13775: IFFALSE 13877
13777: GO 13779
13779: DISABLE
13780: LD_INT 0
13782: PPUSH
13783: PPUSH
// begin enable ;
13784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13785: LD_ADDR_VAR 0 2
13789: PUSH
13790: LD_INT 22
13792: PUSH
13793: LD_OWVAR 2
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 2
13804: PUSH
13805: LD_INT 34
13807: PUSH
13808: LD_INT 11
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PUSH
13815: LD_INT 34
13817: PUSH
13818: LD_INT 30
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PPUSH
13834: CALL_OW 69
13838: ST_TO_ADDR
// if not tmp then
13839: LD_VAR 0 2
13843: NOT
13844: IFFALSE 13848
// exit ;
13846: GO 13877
// for i in tmp do
13848: LD_ADDR_VAR 0 1
13852: PUSH
13853: LD_VAR 0 2
13857: PUSH
13858: FOR_IN
13859: IFFALSE 13875
// begin SetLives ( i , 0 ) ;
13861: LD_VAR 0 1
13865: PPUSH
13866: LD_INT 0
13868: PPUSH
13869: CALL_OW 234
// end ;
13873: GO 13858
13875: POP
13876: POP
// end ;
13877: PPOPN 2
13879: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13880: LD_EXP 19
13884: PUSH
13885: LD_EXP 29
13889: AND
13890: IFFALSE 13910
13892: GO 13894
13894: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13895: LD_INT 32
13897: PPUSH
13898: LD_OWVAR 2
13902: PPUSH
13903: LD_INT 0
13905: PPUSH
13906: CALL_OW 324
13910: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13911: LD_EXP 19
13915: PUSH
13916: LD_EXP 30
13920: AND
13921: IFFALSE 14102
13923: GO 13925
13925: DISABLE
13926: LD_INT 0
13928: PPUSH
13929: PPUSH
13930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13931: LD_ADDR_VAR 0 2
13935: PUSH
13936: LD_INT 22
13938: PUSH
13939: LD_OWVAR 2
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 33
13950: PUSH
13951: LD_INT 3
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PPUSH
13962: CALL_OW 69
13966: ST_TO_ADDR
// if not tmp then
13967: LD_VAR 0 2
13971: NOT
13972: IFFALSE 13976
// exit ;
13974: GO 14102
// side := 0 ;
13976: LD_ADDR_VAR 0 3
13980: PUSH
13981: LD_INT 0
13983: ST_TO_ADDR
// for i := 1 to 8 do
13984: LD_ADDR_VAR 0 1
13988: PUSH
13989: DOUBLE
13990: LD_INT 1
13992: DEC
13993: ST_TO_ADDR
13994: LD_INT 8
13996: PUSH
13997: FOR_TO
13998: IFFALSE 14046
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14000: LD_OWVAR 2
14004: PUSH
14005: LD_VAR 0 1
14009: NONEQUAL
14010: PUSH
14011: LD_OWVAR 2
14015: PPUSH
14016: LD_VAR 0 1
14020: PPUSH
14021: CALL_OW 81
14025: PUSH
14026: LD_INT 2
14028: EQUAL
14029: AND
14030: IFFALSE 14044
// begin side := i ;
14032: LD_ADDR_VAR 0 3
14036: PUSH
14037: LD_VAR 0 1
14041: ST_TO_ADDR
// break ;
14042: GO 14046
// end ;
14044: GO 13997
14046: POP
14047: POP
// if not side then
14048: LD_VAR 0 3
14052: NOT
14053: IFFALSE 14057
// exit ;
14055: GO 14102
// for i := 1 to tmp do
14057: LD_ADDR_VAR 0 1
14061: PUSH
14062: DOUBLE
14063: LD_INT 1
14065: DEC
14066: ST_TO_ADDR
14067: LD_VAR 0 2
14071: PUSH
14072: FOR_TO
14073: IFFALSE 14100
// if Prob ( 60 ) then
14075: LD_INT 60
14077: PPUSH
14078: CALL_OW 13
14082: IFFALSE 14098
// SetSide ( i , side ) ;
14084: LD_VAR 0 1
14088: PPUSH
14089: LD_VAR 0 3
14093: PPUSH
14094: CALL_OW 235
14098: GO 14072
14100: POP
14101: POP
// end ;
14102: PPOPN 3
14104: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14105: LD_EXP 19
14109: PUSH
14110: LD_EXP 32
14114: AND
14115: IFFALSE 14234
14117: GO 14119
14119: DISABLE
14120: LD_INT 0
14122: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14123: LD_ADDR_VAR 0 1
14127: PUSH
14128: LD_INT 22
14130: PUSH
14131: LD_OWVAR 2
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 21
14142: PUSH
14143: LD_INT 1
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: LD_INT 23
14155: PUSH
14156: LD_INT 0
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: PPUSH
14172: CALL_OW 69
14176: PUSH
14177: FOR_IN
14178: IFFALSE 14232
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 257
14189: PUSH
14190: LD_INT 1
14192: PUSH
14193: LD_INT 2
14195: PUSH
14196: LD_INT 3
14198: PUSH
14199: LD_INT 4
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: IN
14208: IFFALSE 14230
// SetClass ( un , rand ( 1 , 4 ) ) ;
14210: LD_VAR 0 1
14214: PPUSH
14215: LD_INT 1
14217: PPUSH
14218: LD_INT 4
14220: PPUSH
14221: CALL_OW 12
14225: PPUSH
14226: CALL_OW 336
14230: GO 14177
14232: POP
14233: POP
// end ;
14234: PPOPN 1
14236: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14237: LD_EXP 19
14241: PUSH
14242: LD_EXP 31
14246: AND
14247: IFFALSE 14326
14249: GO 14251
14251: DISABLE
14252: LD_INT 0
14254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14255: LD_ADDR_VAR 0 1
14259: PUSH
14260: LD_INT 22
14262: PUSH
14263: LD_OWVAR 2
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: LD_INT 21
14274: PUSH
14275: LD_INT 3
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PPUSH
14286: CALL_OW 69
14290: ST_TO_ADDR
// if not tmp then
14291: LD_VAR 0 1
14295: NOT
14296: IFFALSE 14300
// exit ;
14298: GO 14326
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14300: LD_VAR 0 1
14304: PUSH
14305: LD_INT 1
14307: PPUSH
14308: LD_VAR 0 1
14312: PPUSH
14313: CALL_OW 12
14317: ARRAY
14318: PPUSH
14319: LD_INT 100
14321: PPUSH
14322: CALL_OW 234
// end ;
14326: PPOPN 1
14328: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14329: LD_EXP 19
14333: PUSH
14334: LD_EXP 33
14338: AND
14339: IFFALSE 14437
14341: GO 14343
14343: DISABLE
14344: LD_INT 0
14346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14347: LD_ADDR_VAR 0 1
14351: PUSH
14352: LD_INT 22
14354: PUSH
14355: LD_OWVAR 2
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: ST_TO_ADDR
// if not tmp then
14383: LD_VAR 0 1
14387: NOT
14388: IFFALSE 14392
// exit ;
14390: GO 14437
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14392: LD_VAR 0 1
14396: PUSH
14397: LD_INT 1
14399: PPUSH
14400: LD_VAR 0 1
14404: PPUSH
14405: CALL_OW 12
14409: ARRAY
14410: PPUSH
14411: LD_INT 1
14413: PPUSH
14414: LD_INT 4
14416: PPUSH
14417: CALL_OW 12
14421: PPUSH
14422: LD_INT 3000
14424: PPUSH
14425: LD_INT 9000
14427: PPUSH
14428: CALL_OW 12
14432: PPUSH
14433: CALL_OW 492
// end ;
14437: PPOPN 1
14439: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14440: LD_EXP 19
14444: PUSH
14445: LD_EXP 34
14449: AND
14450: IFFALSE 14470
14452: GO 14454
14454: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14455: LD_INT 1
14457: PPUSH
14458: LD_OWVAR 2
14462: PPUSH
14463: LD_INT 0
14465: PPUSH
14466: CALL_OW 324
14470: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14471: LD_EXP 19
14475: PUSH
14476: LD_EXP 35
14480: AND
14481: IFFALSE 14564
14483: GO 14485
14485: DISABLE
14486: LD_INT 0
14488: PPUSH
14489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14490: LD_ADDR_VAR 0 2
14494: PUSH
14495: LD_INT 22
14497: PUSH
14498: LD_OWVAR 2
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 21
14509: PUSH
14510: LD_INT 3
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PPUSH
14521: CALL_OW 69
14525: ST_TO_ADDR
// if not tmp then
14526: LD_VAR 0 2
14530: NOT
14531: IFFALSE 14535
// exit ;
14533: GO 14564
// for i in tmp do
14535: LD_ADDR_VAR 0 1
14539: PUSH
14540: LD_VAR 0 2
14544: PUSH
14545: FOR_IN
14546: IFFALSE 14562
// SetBLevel ( i , 10 ) ;
14548: LD_VAR 0 1
14552: PPUSH
14553: LD_INT 10
14555: PPUSH
14556: CALL_OW 241
14560: GO 14545
14562: POP
14563: POP
// end ;
14564: PPOPN 2
14566: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14567: LD_EXP 19
14571: PUSH
14572: LD_EXP 36
14576: AND
14577: IFFALSE 14688
14579: GO 14581
14581: DISABLE
14582: LD_INT 0
14584: PPUSH
14585: PPUSH
14586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14587: LD_ADDR_VAR 0 3
14591: PUSH
14592: LD_INT 22
14594: PUSH
14595: LD_OWVAR 2
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: LD_INT 25
14606: PUSH
14607: LD_INT 1
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PPUSH
14618: CALL_OW 69
14622: ST_TO_ADDR
// if not tmp then
14623: LD_VAR 0 3
14627: NOT
14628: IFFALSE 14632
// exit ;
14630: GO 14688
// un := tmp [ rand ( 1 , tmp ) ] ;
14632: LD_ADDR_VAR 0 2
14636: PUSH
14637: LD_VAR 0 3
14641: PUSH
14642: LD_INT 1
14644: PPUSH
14645: LD_VAR 0 3
14649: PPUSH
14650: CALL_OW 12
14654: ARRAY
14655: ST_TO_ADDR
// if Crawls ( un ) then
14656: LD_VAR 0 2
14660: PPUSH
14661: CALL_OW 318
14665: IFFALSE 14676
// ComWalk ( un ) ;
14667: LD_VAR 0 2
14671: PPUSH
14672: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14676: LD_VAR 0 2
14680: PPUSH
14681: LD_INT 5
14683: PPUSH
14684: CALL_OW 336
// end ;
14688: PPOPN 3
14690: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14691: LD_EXP 19
14695: PUSH
14696: LD_EXP 37
14700: AND
14701: PUSH
14702: LD_OWVAR 67
14706: PUSH
14707: LD_INT 4
14709: LESS
14710: AND
14711: IFFALSE 14730
14713: GO 14715
14715: DISABLE
// begin Difficulty := Difficulty + 1 ;
14716: LD_ADDR_OWVAR 67
14720: PUSH
14721: LD_OWVAR 67
14725: PUSH
14726: LD_INT 1
14728: PLUS
14729: ST_TO_ADDR
// end ;
14730: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14731: LD_EXP 19
14735: PUSH
14736: LD_EXP 38
14740: AND
14741: IFFALSE 14844
14743: GO 14745
14745: DISABLE
14746: LD_INT 0
14748: PPUSH
// begin for i := 1 to 5 do
14749: LD_ADDR_VAR 0 1
14753: PUSH
14754: DOUBLE
14755: LD_INT 1
14757: DEC
14758: ST_TO_ADDR
14759: LD_INT 5
14761: PUSH
14762: FOR_TO
14763: IFFALSE 14842
// begin uc_nation := nation_nature ;
14765: LD_ADDR_OWVAR 21
14769: PUSH
14770: LD_INT 0
14772: ST_TO_ADDR
// uc_side := 0 ;
14773: LD_ADDR_OWVAR 20
14777: PUSH
14778: LD_INT 0
14780: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14781: LD_ADDR_OWVAR 29
14785: PUSH
14786: LD_INT 12
14788: PUSH
14789: LD_INT 12
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: ST_TO_ADDR
// hc_agressivity := 20 ;
14796: LD_ADDR_OWVAR 35
14800: PUSH
14801: LD_INT 20
14803: ST_TO_ADDR
// hc_class := class_tiger ;
14804: LD_ADDR_OWVAR 28
14808: PUSH
14809: LD_INT 14
14811: ST_TO_ADDR
// hc_gallery :=  ;
14812: LD_ADDR_OWVAR 33
14816: PUSH
14817: LD_STRING 
14819: ST_TO_ADDR
// hc_name :=  ;
14820: LD_ADDR_OWVAR 26
14824: PUSH
14825: LD_STRING 
14827: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14828: CALL_OW 44
14832: PPUSH
14833: LD_INT 0
14835: PPUSH
14836: CALL_OW 51
// end ;
14840: GO 14762
14842: POP
14843: POP
// end ;
14844: PPOPN 1
14846: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14847: LD_EXP 19
14851: PUSH
14852: LD_EXP 39
14856: AND
14857: IFFALSE 14866
14859: GO 14861
14861: DISABLE
// StreamSibBomb ;
14862: CALL 14867 0 0
14866: END
// export function StreamSibBomb ; var i , x , y ; begin
14867: LD_INT 0
14869: PPUSH
14870: PPUSH
14871: PPUSH
14872: PPUSH
// result := false ;
14873: LD_ADDR_VAR 0 1
14877: PUSH
14878: LD_INT 0
14880: ST_TO_ADDR
// for i := 1 to 16 do
14881: LD_ADDR_VAR 0 2
14885: PUSH
14886: DOUBLE
14887: LD_INT 1
14889: DEC
14890: ST_TO_ADDR
14891: LD_INT 16
14893: PUSH
14894: FOR_TO
14895: IFFALSE 15094
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14897: LD_ADDR_VAR 0 3
14901: PUSH
14902: LD_INT 10
14904: PUSH
14905: LD_INT 20
14907: PUSH
14908: LD_INT 30
14910: PUSH
14911: LD_INT 40
14913: PUSH
14914: LD_INT 50
14916: PUSH
14917: LD_INT 60
14919: PUSH
14920: LD_INT 70
14922: PUSH
14923: LD_INT 80
14925: PUSH
14926: LD_INT 90
14928: PUSH
14929: LD_INT 100
14931: PUSH
14932: LD_INT 110
14934: PUSH
14935: LD_INT 120
14937: PUSH
14938: LD_INT 130
14940: PUSH
14941: LD_INT 140
14943: PUSH
14944: LD_INT 150
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: PUSH
14964: LD_INT 1
14966: PPUSH
14967: LD_INT 15
14969: PPUSH
14970: CALL_OW 12
14974: ARRAY
14975: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14976: LD_ADDR_VAR 0 4
14980: PUSH
14981: LD_INT 10
14983: PUSH
14984: LD_INT 20
14986: PUSH
14987: LD_INT 30
14989: PUSH
14990: LD_INT 40
14992: PUSH
14993: LD_INT 50
14995: PUSH
14996: LD_INT 60
14998: PUSH
14999: LD_INT 70
15001: PUSH
15002: LD_INT 80
15004: PUSH
15005: LD_INT 90
15007: PUSH
15008: LD_INT 100
15010: PUSH
15011: LD_INT 110
15013: PUSH
15014: LD_INT 120
15016: PUSH
15017: LD_INT 130
15019: PUSH
15020: LD_INT 140
15022: PUSH
15023: LD_INT 150
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 1
15045: PPUSH
15046: LD_INT 15
15048: PPUSH
15049: CALL_OW 12
15053: ARRAY
15054: ST_TO_ADDR
// if ValidHex ( x , y ) then
15055: LD_VAR 0 3
15059: PPUSH
15060: LD_VAR 0 4
15064: PPUSH
15065: CALL_OW 488
15069: IFFALSE 15092
// begin result := [ x , y ] ;
15071: LD_ADDR_VAR 0 1
15075: PUSH
15076: LD_VAR 0 3
15080: PUSH
15081: LD_VAR 0 4
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: ST_TO_ADDR
// break ;
15090: GO 15094
// end ; end ;
15092: GO 14894
15094: POP
15095: POP
// if result then
15096: LD_VAR 0 1
15100: IFFALSE 15160
// begin ToLua ( playSibBomb() ) ;
15102: LD_STRING playSibBomb()
15104: PPUSH
15105: CALL_OW 559
// wait ( 0 0$14 ) ;
15109: LD_INT 490
15111: PPUSH
15112: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15116: LD_VAR 0 1
15120: PUSH
15121: LD_INT 1
15123: ARRAY
15124: PPUSH
15125: LD_VAR 0 1
15129: PUSH
15130: LD_INT 2
15132: ARRAY
15133: PPUSH
15134: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15138: LD_VAR 0 1
15142: PUSH
15143: LD_INT 1
15145: ARRAY
15146: PPUSH
15147: LD_VAR 0 1
15151: PUSH
15152: LD_INT 2
15154: ARRAY
15155: PPUSH
15156: CALL_OW 429
// end ; end ;
15160: LD_VAR 0 1
15164: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15165: LD_EXP 19
15169: PUSH
15170: LD_EXP 41
15174: AND
15175: IFFALSE 15187
15177: GO 15179
15179: DISABLE
// YouLost (  ) ;
15180: LD_STRING 
15182: PPUSH
15183: CALL_OW 104
15187: END
// every 0 0$1 trigger StreamModeActive and sFog do
15188: LD_EXP 19
15192: PUSH
15193: LD_EXP 40
15197: AND
15198: IFFALSE 15212
15200: GO 15202
15202: DISABLE
// FogOff ( your_side ) ;
15203: LD_OWVAR 2
15207: PPUSH
15208: CALL_OW 344
15212: END
// every 0 0$1 trigger StreamModeActive and sSun do
15213: LD_EXP 19
15217: PUSH
15218: LD_EXP 42
15222: AND
15223: IFFALSE 15251
15225: GO 15227
15227: DISABLE
// begin solar_recharge_percent := 0 ;
15228: LD_ADDR_OWVAR 79
15232: PUSH
15233: LD_INT 0
15235: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15236: LD_INT 10500
15238: PPUSH
15239: CALL_OW 67
// solar_recharge_percent := 100 ;
15243: LD_ADDR_OWVAR 79
15247: PUSH
15248: LD_INT 100
15250: ST_TO_ADDR
// end ;
15251: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15252: LD_EXP 19
15256: PUSH
15257: LD_EXP 43
15261: AND
15262: IFFALSE 15501
15264: GO 15266
15266: DISABLE
15267: LD_INT 0
15269: PPUSH
15270: PPUSH
15271: PPUSH
// begin tmp := [ ] ;
15272: LD_ADDR_VAR 0 3
15276: PUSH
15277: EMPTY
15278: ST_TO_ADDR
// for i := 1 to 6 do
15279: LD_ADDR_VAR 0 1
15283: PUSH
15284: DOUBLE
15285: LD_INT 1
15287: DEC
15288: ST_TO_ADDR
15289: LD_INT 6
15291: PUSH
15292: FOR_TO
15293: IFFALSE 15398
// begin uc_nation := nation_nature ;
15295: LD_ADDR_OWVAR 21
15299: PUSH
15300: LD_INT 0
15302: ST_TO_ADDR
// uc_side := 0 ;
15303: LD_ADDR_OWVAR 20
15307: PUSH
15308: LD_INT 0
15310: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15311: LD_ADDR_OWVAR 29
15315: PUSH
15316: LD_INT 12
15318: PUSH
15319: LD_INT 12
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: ST_TO_ADDR
// hc_agressivity := 20 ;
15326: LD_ADDR_OWVAR 35
15330: PUSH
15331: LD_INT 20
15333: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15334: LD_ADDR_OWVAR 28
15338: PUSH
15339: LD_INT 17
15341: ST_TO_ADDR
// hc_gallery :=  ;
15342: LD_ADDR_OWVAR 33
15346: PUSH
15347: LD_STRING 
15349: ST_TO_ADDR
// hc_name :=  ;
15350: LD_ADDR_OWVAR 26
15354: PUSH
15355: LD_STRING 
15357: ST_TO_ADDR
// un := CreateHuman ;
15358: LD_ADDR_VAR 0 2
15362: PUSH
15363: CALL_OW 44
15367: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15368: LD_VAR 0 2
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 51
// tmp := tmp ^ un ;
15380: LD_ADDR_VAR 0 3
15384: PUSH
15385: LD_VAR 0 3
15389: PUSH
15390: LD_VAR 0 2
15394: ADD
15395: ST_TO_ADDR
// end ;
15396: GO 15292
15398: POP
15399: POP
// repeat wait ( 0 0$1 ) ;
15400: LD_INT 35
15402: PPUSH
15403: CALL_OW 67
// for un in tmp do
15407: LD_ADDR_VAR 0 2
15411: PUSH
15412: LD_VAR 0 3
15416: PUSH
15417: FOR_IN
15418: IFFALSE 15492
// begin if IsDead ( un ) then
15420: LD_VAR 0 2
15424: PPUSH
15425: CALL_OW 301
15429: IFFALSE 15449
// begin tmp := tmp diff un ;
15431: LD_ADDR_VAR 0 3
15435: PUSH
15436: LD_VAR 0 3
15440: PUSH
15441: LD_VAR 0 2
15445: DIFF
15446: ST_TO_ADDR
// continue ;
15447: GO 15417
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15449: LD_VAR 0 2
15453: PPUSH
15454: LD_INT 3
15456: PUSH
15457: LD_INT 22
15459: PUSH
15460: LD_INT 0
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: PPUSH
15476: LD_VAR 0 2
15480: PPUSH
15481: CALL_OW 74
15485: PPUSH
15486: CALL_OW 115
// end ;
15490: GO 15417
15492: POP
15493: POP
// until not tmp ;
15494: LD_VAR 0 3
15498: NOT
15499: IFFALSE 15400
// end ;
15501: PPOPN 3
15503: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15504: LD_EXP 19
15508: PUSH
15509: LD_EXP 44
15513: AND
15514: IFFALSE 15568
15516: GO 15518
15518: DISABLE
// begin ToLua ( displayTroll(); ) ;
15519: LD_STRING displayTroll();
15521: PPUSH
15522: CALL_OW 559
// wait ( 3 3$00 ) ;
15526: LD_INT 6300
15528: PPUSH
15529: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15533: LD_STRING hideTroll();
15535: PPUSH
15536: CALL_OW 559
// wait ( 1 1$00 ) ;
15540: LD_INT 2100
15542: PPUSH
15543: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15547: LD_STRING displayTroll();
15549: PPUSH
15550: CALL_OW 559
// wait ( 1 1$00 ) ;
15554: LD_INT 2100
15556: PPUSH
15557: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15561: LD_STRING hideTroll();
15563: PPUSH
15564: CALL_OW 559
// end ;
15568: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15569: LD_EXP 19
15573: PUSH
15574: LD_EXP 45
15578: AND
15579: IFFALSE 15642
15581: GO 15583
15583: DISABLE
15584: LD_INT 0
15586: PPUSH
// begin p := 0 ;
15587: LD_ADDR_VAR 0 1
15591: PUSH
15592: LD_INT 0
15594: ST_TO_ADDR
// repeat game_speed := 1 ;
15595: LD_ADDR_OWVAR 65
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15603: LD_INT 35
15605: PPUSH
15606: CALL_OW 67
// p := p + 1 ;
15610: LD_ADDR_VAR 0 1
15614: PUSH
15615: LD_VAR 0 1
15619: PUSH
15620: LD_INT 1
15622: PLUS
15623: ST_TO_ADDR
// until p >= 60 ;
15624: LD_VAR 0 1
15628: PUSH
15629: LD_INT 60
15631: GREATEREQUAL
15632: IFFALSE 15595
// game_speed := 4 ;
15634: LD_ADDR_OWVAR 65
15638: PUSH
15639: LD_INT 4
15641: ST_TO_ADDR
// end ;
15642: PPOPN 1
15644: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15645: LD_EXP 19
15649: PUSH
15650: LD_EXP 46
15654: AND
15655: IFFALSE 15801
15657: GO 15659
15659: DISABLE
15660: LD_INT 0
15662: PPUSH
15663: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15664: LD_ADDR_VAR 0 1
15668: PUSH
15669: LD_INT 22
15671: PUSH
15672: LD_OWVAR 2
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 2
15683: PUSH
15684: LD_INT 30
15686: PUSH
15687: LD_INT 0
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 30
15696: PUSH
15697: LD_INT 1
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: LIST
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PPUSH
15713: CALL_OW 69
15717: ST_TO_ADDR
// if not depot then
15718: LD_VAR 0 1
15722: NOT
15723: IFFALSE 15727
// exit ;
15725: GO 15801
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15727: LD_ADDR_VAR 0 2
15731: PUSH
15732: LD_VAR 0 1
15736: PUSH
15737: LD_INT 1
15739: PPUSH
15740: LD_VAR 0 1
15744: PPUSH
15745: CALL_OW 12
15749: ARRAY
15750: PPUSH
15751: CALL_OW 274
15755: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15756: LD_VAR 0 2
15760: PPUSH
15761: LD_INT 1
15763: PPUSH
15764: LD_INT 0
15766: PPUSH
15767: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15771: LD_VAR 0 2
15775: PPUSH
15776: LD_INT 2
15778: PPUSH
15779: LD_INT 0
15781: PPUSH
15782: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15786: LD_VAR 0 2
15790: PPUSH
15791: LD_INT 3
15793: PPUSH
15794: LD_INT 0
15796: PPUSH
15797: CALL_OW 277
// end ;
15801: PPOPN 2
15803: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15804: LD_EXP 19
15808: PUSH
15809: LD_EXP 47
15813: AND
15814: IFFALSE 15911
15816: GO 15818
15818: DISABLE
15819: LD_INT 0
15821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15822: LD_ADDR_VAR 0 1
15826: PUSH
15827: LD_INT 22
15829: PUSH
15830: LD_OWVAR 2
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 21
15841: PUSH
15842: LD_INT 1
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: LD_INT 3
15851: PUSH
15852: LD_INT 23
15854: PUSH
15855: LD_INT 0
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: LIST
15870: PPUSH
15871: CALL_OW 69
15875: ST_TO_ADDR
// if not tmp then
15876: LD_VAR 0 1
15880: NOT
15881: IFFALSE 15885
// exit ;
15883: GO 15911
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15885: LD_VAR 0 1
15889: PUSH
15890: LD_INT 1
15892: PPUSH
15893: LD_VAR 0 1
15897: PPUSH
15898: CALL_OW 12
15902: ARRAY
15903: PPUSH
15904: LD_INT 200
15906: PPUSH
15907: CALL_OW 234
// end ;
15911: PPOPN 1
15913: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15914: LD_EXP 19
15918: PUSH
15919: LD_EXP 48
15923: AND
15924: IFFALSE 16003
15926: GO 15928
15928: DISABLE
15929: LD_INT 0
15931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15932: LD_ADDR_VAR 0 1
15936: PUSH
15937: LD_INT 22
15939: PUSH
15940: LD_OWVAR 2
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 21
15951: PUSH
15952: LD_INT 2
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PPUSH
15963: CALL_OW 69
15967: ST_TO_ADDR
// if not tmp then
15968: LD_VAR 0 1
15972: NOT
15973: IFFALSE 15977
// exit ;
15975: GO 16003
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15977: LD_VAR 0 1
15981: PUSH
15982: LD_INT 1
15984: PPUSH
15985: LD_VAR 0 1
15989: PPUSH
15990: CALL_OW 12
15994: ARRAY
15995: PPUSH
15996: LD_INT 60
15998: PPUSH
15999: CALL_OW 234
// end ;
16003: PPOPN 1
16005: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16006: LD_EXP 19
16010: PUSH
16011: LD_EXP 49
16015: AND
16016: IFFALSE 16115
16018: GO 16020
16020: DISABLE
16021: LD_INT 0
16023: PPUSH
16024: PPUSH
// begin enable ;
16025: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16026: LD_ADDR_VAR 0 1
16030: PUSH
16031: LD_INT 22
16033: PUSH
16034: LD_OWVAR 2
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 61
16045: PUSH
16046: EMPTY
16047: LIST
16048: PUSH
16049: LD_INT 33
16051: PUSH
16052: LD_INT 2
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 69
16068: ST_TO_ADDR
// if not tmp then
16069: LD_VAR 0 1
16073: NOT
16074: IFFALSE 16078
// exit ;
16076: GO 16115
// for i in tmp do
16078: LD_ADDR_VAR 0 2
16082: PUSH
16083: LD_VAR 0 1
16087: PUSH
16088: FOR_IN
16089: IFFALSE 16113
// if IsControledBy ( i ) then
16091: LD_VAR 0 2
16095: PPUSH
16096: CALL_OW 312
16100: IFFALSE 16111
// ComUnlink ( i ) ;
16102: LD_VAR 0 2
16106: PPUSH
16107: CALL_OW 136
16111: GO 16088
16113: POP
16114: POP
// end ;
16115: PPOPN 2
16117: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16118: LD_EXP 19
16122: PUSH
16123: LD_EXP 50
16127: AND
16128: IFFALSE 16268
16130: GO 16132
16132: DISABLE
16133: LD_INT 0
16135: PPUSH
16136: PPUSH
// begin ToLua ( displayPowell(); ) ;
16137: LD_STRING displayPowell();
16139: PPUSH
16140: CALL_OW 559
// uc_side := 0 ;
16144: LD_ADDR_OWVAR 20
16148: PUSH
16149: LD_INT 0
16151: ST_TO_ADDR
// uc_nation := 2 ;
16152: LD_ADDR_OWVAR 21
16156: PUSH
16157: LD_INT 2
16159: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16160: LD_ADDR_OWVAR 37
16164: PUSH
16165: LD_INT 14
16167: ST_TO_ADDR
// vc_engine := engine_siberite ;
16168: LD_ADDR_OWVAR 39
16172: PUSH
16173: LD_INT 3
16175: ST_TO_ADDR
// vc_control := control_apeman ;
16176: LD_ADDR_OWVAR 38
16180: PUSH
16181: LD_INT 5
16183: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16184: LD_ADDR_OWVAR 40
16188: PUSH
16189: LD_INT 29
16191: ST_TO_ADDR
// un := CreateVehicle ;
16192: LD_ADDR_VAR 0 2
16196: PUSH
16197: CALL_OW 45
16201: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16202: LD_VAR 0 2
16206: PPUSH
16207: LD_INT 1
16209: PPUSH
16210: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16214: LD_INT 35
16216: PPUSH
16217: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16221: LD_VAR 0 2
16225: PPUSH
16226: LD_INT 22
16228: PUSH
16229: LD_OWVAR 2
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PPUSH
16238: CALL_OW 69
16242: PPUSH
16243: LD_VAR 0 2
16247: PPUSH
16248: CALL_OW 74
16252: PPUSH
16253: CALL_OW 115
// until IsDead ( un ) ;
16257: LD_VAR 0 2
16261: PPUSH
16262: CALL_OW 301
16266: IFFALSE 16214
// end ;
16268: PPOPN 2
16270: END
// every 0 0$1 trigger StreamModeActive and sStu do
16271: LD_EXP 19
16275: PUSH
16276: LD_EXP 58
16280: AND
16281: IFFALSE 16297
16283: GO 16285
16285: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16286: LD_STRING displayStucuk();
16288: PPUSH
16289: CALL_OW 559
// ResetFog ;
16293: CALL_OW 335
// end ;
16297: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16298: LD_EXP 19
16302: PUSH
16303: LD_EXP 51
16307: AND
16308: IFFALSE 16449
16310: GO 16312
16312: DISABLE
16313: LD_INT 0
16315: PPUSH
16316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16317: LD_ADDR_VAR 0 2
16321: PUSH
16322: LD_INT 22
16324: PUSH
16325: LD_OWVAR 2
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 21
16336: PUSH
16337: LD_INT 1
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PPUSH
16348: CALL_OW 69
16352: ST_TO_ADDR
// if not tmp then
16353: LD_VAR 0 2
16357: NOT
16358: IFFALSE 16362
// exit ;
16360: GO 16449
// un := tmp [ rand ( 1 , tmp ) ] ;
16362: LD_ADDR_VAR 0 1
16366: PUSH
16367: LD_VAR 0 2
16371: PUSH
16372: LD_INT 1
16374: PPUSH
16375: LD_VAR 0 2
16379: PPUSH
16380: CALL_OW 12
16384: ARRAY
16385: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16386: LD_VAR 0 1
16390: PPUSH
16391: LD_INT 0
16393: PPUSH
16394: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16398: LD_VAR 0 1
16402: PPUSH
16403: LD_OWVAR 3
16407: PUSH
16408: LD_VAR 0 1
16412: DIFF
16413: PPUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 74
16423: PPUSH
16424: CALL_OW 115
// wait ( 0 0$20 ) ;
16428: LD_INT 700
16430: PPUSH
16431: CALL_OW 67
// SetSide ( un , your_side ) ;
16435: LD_VAR 0 1
16439: PPUSH
16440: LD_OWVAR 2
16444: PPUSH
16445: CALL_OW 235
// end ;
16449: PPOPN 2
16451: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16452: LD_EXP 19
16456: PUSH
16457: LD_EXP 52
16461: AND
16462: IFFALSE 16568
16464: GO 16466
16466: DISABLE
16467: LD_INT 0
16469: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16470: LD_ADDR_VAR 0 1
16474: PUSH
16475: LD_INT 22
16477: PUSH
16478: LD_OWVAR 2
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 2
16489: PUSH
16490: LD_INT 30
16492: PUSH
16493: LD_INT 0
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 30
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: LIST
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PPUSH
16519: CALL_OW 69
16523: ST_TO_ADDR
// if not depot then
16524: LD_VAR 0 1
16528: NOT
16529: IFFALSE 16533
// exit ;
16531: GO 16568
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16533: LD_VAR 0 1
16537: PUSH
16538: LD_INT 1
16540: ARRAY
16541: PPUSH
16542: CALL_OW 250
16546: PPUSH
16547: LD_VAR 0 1
16551: PUSH
16552: LD_INT 1
16554: ARRAY
16555: PPUSH
16556: CALL_OW 251
16560: PPUSH
16561: LD_INT 70
16563: PPUSH
16564: CALL_OW 495
// end ;
16568: PPOPN 1
16570: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16571: LD_EXP 19
16575: PUSH
16576: LD_EXP 53
16580: AND
16581: IFFALSE 16792
16583: GO 16585
16585: DISABLE
16586: LD_INT 0
16588: PPUSH
16589: PPUSH
16590: PPUSH
16591: PPUSH
16592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16593: LD_ADDR_VAR 0 5
16597: PUSH
16598: LD_INT 22
16600: PUSH
16601: LD_OWVAR 2
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 21
16612: PUSH
16613: LD_INT 1
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PPUSH
16624: CALL_OW 69
16628: ST_TO_ADDR
// if not tmp then
16629: LD_VAR 0 5
16633: NOT
16634: IFFALSE 16638
// exit ;
16636: GO 16792
// for i in tmp do
16638: LD_ADDR_VAR 0 1
16642: PUSH
16643: LD_VAR 0 5
16647: PUSH
16648: FOR_IN
16649: IFFALSE 16790
// begin d := rand ( 0 , 5 ) ;
16651: LD_ADDR_VAR 0 4
16655: PUSH
16656: LD_INT 0
16658: PPUSH
16659: LD_INT 5
16661: PPUSH
16662: CALL_OW 12
16666: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16667: LD_ADDR_VAR 0 2
16671: PUSH
16672: LD_VAR 0 1
16676: PPUSH
16677: CALL_OW 250
16681: PPUSH
16682: LD_VAR 0 4
16686: PPUSH
16687: LD_INT 3
16689: PPUSH
16690: LD_INT 12
16692: PPUSH
16693: CALL_OW 12
16697: PPUSH
16698: CALL_OW 272
16702: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16703: LD_ADDR_VAR 0 3
16707: PUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 251
16717: PPUSH
16718: LD_VAR 0 4
16722: PPUSH
16723: LD_INT 3
16725: PPUSH
16726: LD_INT 12
16728: PPUSH
16729: CALL_OW 12
16733: PPUSH
16734: CALL_OW 273
16738: ST_TO_ADDR
// if ValidHex ( x , y ) then
16739: LD_VAR 0 2
16743: PPUSH
16744: LD_VAR 0 3
16748: PPUSH
16749: CALL_OW 488
16753: IFFALSE 16788
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16755: LD_VAR 0 1
16759: PPUSH
16760: LD_VAR 0 2
16764: PPUSH
16765: LD_VAR 0 3
16769: PPUSH
16770: LD_INT 3
16772: PPUSH
16773: LD_INT 6
16775: PPUSH
16776: CALL_OW 12
16780: PPUSH
16781: LD_INT 1
16783: PPUSH
16784: CALL_OW 483
// end ;
16788: GO 16648
16790: POP
16791: POP
// end ;
16792: PPOPN 5
16794: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16795: LD_EXP 19
16799: PUSH
16800: LD_EXP 54
16804: AND
16805: IFFALSE 16899
16807: GO 16809
16809: DISABLE
16810: LD_INT 0
16812: PPUSH
16813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16814: LD_ADDR_VAR 0 2
16818: PUSH
16819: LD_INT 22
16821: PUSH
16822: LD_OWVAR 2
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 32
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 21
16843: PUSH
16844: LD_INT 2
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: PPUSH
16856: CALL_OW 69
16860: ST_TO_ADDR
// if not tmp then
16861: LD_VAR 0 2
16865: NOT
16866: IFFALSE 16870
// exit ;
16868: GO 16899
// for i in tmp do
16870: LD_ADDR_VAR 0 1
16874: PUSH
16875: LD_VAR 0 2
16879: PUSH
16880: FOR_IN
16881: IFFALSE 16897
// SetFuel ( i , 0 ) ;
16883: LD_VAR 0 1
16887: PPUSH
16888: LD_INT 0
16890: PPUSH
16891: CALL_OW 240
16895: GO 16880
16897: POP
16898: POP
// end ;
16899: PPOPN 2
16901: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16902: LD_EXP 19
16906: PUSH
16907: LD_EXP 55
16911: AND
16912: IFFALSE 16978
16914: GO 16916
16916: DISABLE
16917: LD_INT 0
16919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16920: LD_ADDR_VAR 0 1
16924: PUSH
16925: LD_INT 22
16927: PUSH
16928: LD_OWVAR 2
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 30
16939: PUSH
16940: LD_INT 29
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PPUSH
16951: CALL_OW 69
16955: ST_TO_ADDR
// if not tmp then
16956: LD_VAR 0 1
16960: NOT
16961: IFFALSE 16965
// exit ;
16963: GO 16978
// DestroyUnit ( tmp [ 1 ] ) ;
16965: LD_VAR 0 1
16969: PUSH
16970: LD_INT 1
16972: ARRAY
16973: PPUSH
16974: CALL_OW 65
// end ;
16978: PPOPN 1
16980: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16981: LD_EXP 19
16985: PUSH
16986: LD_EXP 57
16990: AND
16991: IFFALSE 17120
16993: GO 16995
16995: DISABLE
16996: LD_INT 0
16998: PPUSH
// begin uc_side := 0 ;
16999: LD_ADDR_OWVAR 20
17003: PUSH
17004: LD_INT 0
17006: ST_TO_ADDR
// uc_nation := nation_arabian ;
17007: LD_ADDR_OWVAR 21
17011: PUSH
17012: LD_INT 2
17014: ST_TO_ADDR
// hc_gallery :=  ;
17015: LD_ADDR_OWVAR 33
17019: PUSH
17020: LD_STRING 
17022: ST_TO_ADDR
// hc_name :=  ;
17023: LD_ADDR_OWVAR 26
17027: PUSH
17028: LD_STRING 
17030: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17031: LD_INT 1
17033: PPUSH
17034: LD_INT 11
17036: PPUSH
17037: LD_INT 10
17039: PPUSH
17040: CALL_OW 380
// un := CreateHuman ;
17044: LD_ADDR_VAR 0 1
17048: PUSH
17049: CALL_OW 44
17053: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17054: LD_VAR 0 1
17058: PPUSH
17059: LD_INT 1
17061: PPUSH
17062: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17066: LD_INT 35
17068: PPUSH
17069: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17073: LD_VAR 0 1
17077: PPUSH
17078: LD_INT 22
17080: PUSH
17081: LD_OWVAR 2
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PPUSH
17090: CALL_OW 69
17094: PPUSH
17095: LD_VAR 0 1
17099: PPUSH
17100: CALL_OW 74
17104: PPUSH
17105: CALL_OW 115
// until IsDead ( un ) ;
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 301
17118: IFFALSE 17066
// end ;
17120: PPOPN 1
17122: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17123: LD_EXP 19
17127: PUSH
17128: LD_EXP 59
17132: AND
17133: IFFALSE 17145
17135: GO 17137
17137: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17138: LD_STRING earthquake(getX(game), 0, 32)
17140: PPUSH
17141: CALL_OW 559
17145: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17146: LD_EXP 19
17150: PUSH
17151: LD_EXP 60
17155: AND
17156: IFFALSE 17247
17158: GO 17160
17160: DISABLE
17161: LD_INT 0
17163: PPUSH
// begin enable ;
17164: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17165: LD_ADDR_VAR 0 1
17169: PUSH
17170: LD_INT 22
17172: PUSH
17173: LD_OWVAR 2
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 21
17184: PUSH
17185: LD_INT 2
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 33
17194: PUSH
17195: LD_INT 3
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: PPUSH
17207: CALL_OW 69
17211: ST_TO_ADDR
// if not tmp then
17212: LD_VAR 0 1
17216: NOT
17217: IFFALSE 17221
// exit ;
17219: GO 17247
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17221: LD_VAR 0 1
17225: PUSH
17226: LD_INT 1
17228: PPUSH
17229: LD_VAR 0 1
17233: PPUSH
17234: CALL_OW 12
17238: ARRAY
17239: PPUSH
17240: LD_INT 1
17242: PPUSH
17243: CALL_OW 234
// end ;
17247: PPOPN 1
17249: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17250: LD_EXP 19
17254: PUSH
17255: LD_EXP 61
17259: AND
17260: IFFALSE 17401
17262: GO 17264
17264: DISABLE
17265: LD_INT 0
17267: PPUSH
17268: PPUSH
17269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17270: LD_ADDR_VAR 0 3
17274: PUSH
17275: LD_INT 22
17277: PUSH
17278: LD_OWVAR 2
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 25
17289: PUSH
17290: LD_INT 1
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PPUSH
17301: CALL_OW 69
17305: ST_TO_ADDR
// if not tmp then
17306: LD_VAR 0 3
17310: NOT
17311: IFFALSE 17315
// exit ;
17313: GO 17401
// un := tmp [ rand ( 1 , tmp ) ] ;
17315: LD_ADDR_VAR 0 2
17319: PUSH
17320: LD_VAR 0 3
17324: PUSH
17325: LD_INT 1
17327: PPUSH
17328: LD_VAR 0 3
17332: PPUSH
17333: CALL_OW 12
17337: ARRAY
17338: ST_TO_ADDR
// if Crawls ( un ) then
17339: LD_VAR 0 2
17343: PPUSH
17344: CALL_OW 318
17348: IFFALSE 17359
// ComWalk ( un ) ;
17350: LD_VAR 0 2
17354: PPUSH
17355: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17359: LD_VAR 0 2
17363: PPUSH
17364: LD_INT 9
17366: PPUSH
17367: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17371: LD_INT 28
17373: PPUSH
17374: LD_OWVAR 2
17378: PPUSH
17379: LD_INT 2
17381: PPUSH
17382: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17386: LD_INT 29
17388: PPUSH
17389: LD_OWVAR 2
17393: PPUSH
17394: LD_INT 2
17396: PPUSH
17397: CALL_OW 322
// end ;
17401: PPOPN 3
17403: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17404: LD_EXP 19
17408: PUSH
17409: LD_EXP 62
17413: AND
17414: IFFALSE 17525
17416: GO 17418
17418: DISABLE
17419: LD_INT 0
17421: PPUSH
17422: PPUSH
17423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17424: LD_ADDR_VAR 0 3
17428: PUSH
17429: LD_INT 22
17431: PUSH
17432: LD_OWVAR 2
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 25
17443: PUSH
17444: LD_INT 1
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PPUSH
17455: CALL_OW 69
17459: ST_TO_ADDR
// if not tmp then
17460: LD_VAR 0 3
17464: NOT
17465: IFFALSE 17469
// exit ;
17467: GO 17525
// un := tmp [ rand ( 1 , tmp ) ] ;
17469: LD_ADDR_VAR 0 2
17473: PUSH
17474: LD_VAR 0 3
17478: PUSH
17479: LD_INT 1
17481: PPUSH
17482: LD_VAR 0 3
17486: PPUSH
17487: CALL_OW 12
17491: ARRAY
17492: ST_TO_ADDR
// if Crawls ( un ) then
17493: LD_VAR 0 2
17497: PPUSH
17498: CALL_OW 318
17502: IFFALSE 17513
// ComWalk ( un ) ;
17504: LD_VAR 0 2
17508: PPUSH
17509: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17513: LD_VAR 0 2
17517: PPUSH
17518: LD_INT 8
17520: PPUSH
17521: CALL_OW 336
// end ;
17525: PPOPN 3
17527: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17528: LD_EXP 19
17532: PUSH
17533: LD_EXP 63
17537: AND
17538: IFFALSE 17682
17540: GO 17542
17542: DISABLE
17543: LD_INT 0
17545: PPUSH
17546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17547: LD_ADDR_VAR 0 2
17551: PUSH
17552: LD_INT 22
17554: PUSH
17555: LD_OWVAR 2
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 21
17566: PUSH
17567: LD_INT 2
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 2
17576: PUSH
17577: LD_INT 34
17579: PUSH
17580: LD_INT 12
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 34
17589: PUSH
17590: LD_INT 51
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 34
17599: PUSH
17600: LD_INT 32
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: LIST
17617: PPUSH
17618: CALL_OW 69
17622: ST_TO_ADDR
// if not tmp then
17623: LD_VAR 0 2
17627: NOT
17628: IFFALSE 17632
// exit ;
17630: GO 17682
// for i in tmp do
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_VAR 0 2
17641: PUSH
17642: FOR_IN
17643: IFFALSE 17680
// if GetCargo ( i , mat_artifact ) = 0 then
17645: LD_VAR 0 1
17649: PPUSH
17650: LD_INT 4
17652: PPUSH
17653: CALL_OW 289
17657: PUSH
17658: LD_INT 0
17660: EQUAL
17661: IFFALSE 17678
// SetCargo ( i , mat_siberit , 100 ) ;
17663: LD_VAR 0 1
17667: PPUSH
17668: LD_INT 3
17670: PPUSH
17671: LD_INT 100
17673: PPUSH
17674: CALL_OW 290
17678: GO 17642
17680: POP
17681: POP
// end ;
17682: PPOPN 2
17684: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17685: LD_EXP 19
17689: PUSH
17690: LD_EXP 64
17694: AND
17695: IFFALSE 17878
17697: GO 17699
17699: DISABLE
17700: LD_INT 0
17702: PPUSH
17703: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17704: LD_ADDR_VAR 0 2
17708: PUSH
17709: LD_INT 22
17711: PUSH
17712: LD_OWVAR 2
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: ST_TO_ADDR
// if not tmp then
17726: LD_VAR 0 2
17730: NOT
17731: IFFALSE 17735
// exit ;
17733: GO 17878
// for i := 1 to 2 do
17735: LD_ADDR_VAR 0 1
17739: PUSH
17740: DOUBLE
17741: LD_INT 1
17743: DEC
17744: ST_TO_ADDR
17745: LD_INT 2
17747: PUSH
17748: FOR_TO
17749: IFFALSE 17876
// begin uc_side := your_side ;
17751: LD_ADDR_OWVAR 20
17755: PUSH
17756: LD_OWVAR 2
17760: ST_TO_ADDR
// uc_nation := nation_american ;
17761: LD_ADDR_OWVAR 21
17765: PUSH
17766: LD_INT 1
17768: ST_TO_ADDR
// vc_chassis := us_morphling ;
17769: LD_ADDR_OWVAR 37
17773: PUSH
17774: LD_INT 5
17776: ST_TO_ADDR
// vc_engine := engine_siberite ;
17777: LD_ADDR_OWVAR 39
17781: PUSH
17782: LD_INT 3
17784: ST_TO_ADDR
// vc_control := control_computer ;
17785: LD_ADDR_OWVAR 38
17789: PUSH
17790: LD_INT 3
17792: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17793: LD_ADDR_OWVAR 40
17797: PUSH
17798: LD_INT 10
17800: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17801: LD_VAR 0 2
17805: PUSH
17806: LD_INT 1
17808: ARRAY
17809: PPUSH
17810: CALL_OW 310
17814: NOT
17815: IFFALSE 17862
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17817: CALL_OW 45
17821: PPUSH
17822: LD_VAR 0 2
17826: PUSH
17827: LD_INT 1
17829: ARRAY
17830: PPUSH
17831: CALL_OW 250
17835: PPUSH
17836: LD_VAR 0 2
17840: PUSH
17841: LD_INT 1
17843: ARRAY
17844: PPUSH
17845: CALL_OW 251
17849: PPUSH
17850: LD_INT 12
17852: PPUSH
17853: LD_INT 1
17855: PPUSH
17856: CALL_OW 50
17860: GO 17874
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17862: CALL_OW 45
17866: PPUSH
17867: LD_INT 1
17869: PPUSH
17870: CALL_OW 51
// end ;
17874: GO 17748
17876: POP
17877: POP
// end ;
17878: PPOPN 2
17880: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17881: LD_EXP 19
17885: PUSH
17886: LD_EXP 65
17890: AND
17891: IFFALSE 18113
17893: GO 17895
17895: DISABLE
17896: LD_INT 0
17898: PPUSH
17899: PPUSH
17900: PPUSH
17901: PPUSH
17902: PPUSH
17903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17904: LD_ADDR_VAR 0 6
17908: PUSH
17909: LD_INT 22
17911: PUSH
17912: LD_OWVAR 2
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 21
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 3
17933: PUSH
17934: LD_INT 23
17936: PUSH
17937: LD_INT 0
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: PPUSH
17953: CALL_OW 69
17957: ST_TO_ADDR
// if not tmp then
17958: LD_VAR 0 6
17962: NOT
17963: IFFALSE 17967
// exit ;
17965: GO 18113
// s1 := rand ( 1 , 4 ) ;
17967: LD_ADDR_VAR 0 2
17971: PUSH
17972: LD_INT 1
17974: PPUSH
17975: LD_INT 4
17977: PPUSH
17978: CALL_OW 12
17982: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17983: LD_ADDR_VAR 0 4
17987: PUSH
17988: LD_VAR 0 6
17992: PUSH
17993: LD_INT 1
17995: ARRAY
17996: PPUSH
17997: LD_VAR 0 2
18001: PPUSH
18002: CALL_OW 259
18006: ST_TO_ADDR
// if s1 = 1 then
18007: LD_VAR 0 2
18011: PUSH
18012: LD_INT 1
18014: EQUAL
18015: IFFALSE 18035
// s2 := rand ( 2 , 4 ) else
18017: LD_ADDR_VAR 0 3
18021: PUSH
18022: LD_INT 2
18024: PPUSH
18025: LD_INT 4
18027: PPUSH
18028: CALL_OW 12
18032: ST_TO_ADDR
18033: GO 18043
// s2 := 1 ;
18035: LD_ADDR_VAR 0 3
18039: PUSH
18040: LD_INT 1
18042: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18043: LD_ADDR_VAR 0 5
18047: PUSH
18048: LD_VAR 0 6
18052: PUSH
18053: LD_INT 1
18055: ARRAY
18056: PPUSH
18057: LD_VAR 0 3
18061: PPUSH
18062: CALL_OW 259
18066: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18067: LD_VAR 0 6
18071: PUSH
18072: LD_INT 1
18074: ARRAY
18075: PPUSH
18076: LD_VAR 0 2
18080: PPUSH
18081: LD_VAR 0 5
18085: PPUSH
18086: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18090: LD_VAR 0 6
18094: PUSH
18095: LD_INT 1
18097: ARRAY
18098: PPUSH
18099: LD_VAR 0 3
18103: PPUSH
18104: LD_VAR 0 4
18108: PPUSH
18109: CALL_OW 237
// end ;
18113: PPOPN 6
18115: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18116: LD_EXP 19
18120: PUSH
18121: LD_EXP 66
18125: AND
18126: IFFALSE 18205
18128: GO 18130
18130: DISABLE
18131: LD_INT 0
18133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18134: LD_ADDR_VAR 0 1
18138: PUSH
18139: LD_INT 22
18141: PUSH
18142: LD_OWVAR 2
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 30
18153: PUSH
18154: LD_INT 3
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PPUSH
18165: CALL_OW 69
18169: ST_TO_ADDR
// if not tmp then
18170: LD_VAR 0 1
18174: NOT
18175: IFFALSE 18179
// exit ;
18177: GO 18205
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18179: LD_VAR 0 1
18183: PUSH
18184: LD_INT 1
18186: PPUSH
18187: LD_VAR 0 1
18191: PPUSH
18192: CALL_OW 12
18196: ARRAY
18197: PPUSH
18198: LD_INT 1
18200: PPUSH
18201: CALL_OW 234
// end ;
18205: PPOPN 1
18207: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18208: LD_EXP 19
18212: PUSH
18213: LD_EXP 67
18217: AND
18218: IFFALSE 18330
18220: GO 18222
18222: DISABLE
18223: LD_INT 0
18225: PPUSH
18226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18227: LD_ADDR_VAR 0 2
18231: PUSH
18232: LD_INT 22
18234: PUSH
18235: LD_OWVAR 2
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 2
18246: PUSH
18247: LD_INT 30
18249: PUSH
18250: LD_INT 27
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 30
18259: PUSH
18260: LD_INT 26
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 30
18269: PUSH
18270: LD_INT 28
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PPUSH
18287: CALL_OW 69
18291: ST_TO_ADDR
// if not tmp then
18292: LD_VAR 0 2
18296: NOT
18297: IFFALSE 18301
// exit ;
18299: GO 18330
// for i in tmp do
18301: LD_ADDR_VAR 0 1
18305: PUSH
18306: LD_VAR 0 2
18310: PUSH
18311: FOR_IN
18312: IFFALSE 18328
// SetLives ( i , 1 ) ;
18314: LD_VAR 0 1
18318: PPUSH
18319: LD_INT 1
18321: PPUSH
18322: CALL_OW 234
18326: GO 18311
18328: POP
18329: POP
// end ;
18330: PPOPN 2
18332: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18333: LD_EXP 19
18337: PUSH
18338: LD_EXP 68
18342: AND
18343: IFFALSE 18630
18345: GO 18347
18347: DISABLE
18348: LD_INT 0
18350: PPUSH
18351: PPUSH
18352: PPUSH
// begin i := rand ( 1 , 7 ) ;
18353: LD_ADDR_VAR 0 1
18357: PUSH
18358: LD_INT 1
18360: PPUSH
18361: LD_INT 7
18363: PPUSH
18364: CALL_OW 12
18368: ST_TO_ADDR
// case i of 1 :
18369: LD_VAR 0 1
18373: PUSH
18374: LD_INT 1
18376: DOUBLE
18377: EQUAL
18378: IFTRUE 18382
18380: GO 18392
18382: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18383: LD_STRING earthquake(getX(game), 0, 32)
18385: PPUSH
18386: CALL_OW 559
18390: GO 18630
18392: LD_INT 2
18394: DOUBLE
18395: EQUAL
18396: IFTRUE 18400
18398: GO 18414
18400: POP
// begin ToLua ( displayStucuk(); ) ;
18401: LD_STRING displayStucuk();
18403: PPUSH
18404: CALL_OW 559
// ResetFog ;
18408: CALL_OW 335
// end ; 3 :
18412: GO 18630
18414: LD_INT 3
18416: DOUBLE
18417: EQUAL
18418: IFTRUE 18422
18420: GO 18526
18422: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18423: LD_ADDR_VAR 0 2
18427: PUSH
18428: LD_INT 22
18430: PUSH
18431: LD_OWVAR 2
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 25
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PPUSH
18454: CALL_OW 69
18458: ST_TO_ADDR
// if not tmp then
18459: LD_VAR 0 2
18463: NOT
18464: IFFALSE 18468
// exit ;
18466: GO 18630
// un := tmp [ rand ( 1 , tmp ) ] ;
18468: LD_ADDR_VAR 0 3
18472: PUSH
18473: LD_VAR 0 2
18477: PUSH
18478: LD_INT 1
18480: PPUSH
18481: LD_VAR 0 2
18485: PPUSH
18486: CALL_OW 12
18490: ARRAY
18491: ST_TO_ADDR
// if Crawls ( un ) then
18492: LD_VAR 0 3
18496: PPUSH
18497: CALL_OW 318
18501: IFFALSE 18512
// ComWalk ( un ) ;
18503: LD_VAR 0 3
18507: PPUSH
18508: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18512: LD_VAR 0 3
18516: PPUSH
18517: LD_INT 8
18519: PPUSH
18520: CALL_OW 336
// end ; 4 :
18524: GO 18630
18526: LD_INT 4
18528: DOUBLE
18529: EQUAL
18530: IFTRUE 18534
18532: GO 18608
18534: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18535: LD_ADDR_VAR 0 2
18539: PUSH
18540: LD_INT 22
18542: PUSH
18543: LD_OWVAR 2
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 30
18554: PUSH
18555: LD_INT 29
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PPUSH
18566: CALL_OW 69
18570: ST_TO_ADDR
// if not tmp then
18571: LD_VAR 0 2
18575: NOT
18576: IFFALSE 18580
// exit ;
18578: GO 18630
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18580: LD_VAR 0 2
18584: PUSH
18585: LD_INT 1
18587: ARRAY
18588: PPUSH
18589: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18593: LD_VAR 0 2
18597: PUSH
18598: LD_INT 1
18600: ARRAY
18601: PPUSH
18602: CALL_OW 65
// end ; 5 .. 7 :
18606: GO 18630
18608: LD_INT 5
18610: DOUBLE
18611: GREATEREQUAL
18612: IFFALSE 18620
18614: LD_INT 7
18616: DOUBLE
18617: LESSEQUAL
18618: IFTRUE 18622
18620: GO 18629
18622: POP
// StreamSibBomb ; end ;
18623: CALL 14867 0 0
18627: GO 18630
18629: POP
// end ;
18630: PPOPN 3
18632: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18633: LD_EXP 19
18637: PUSH
18638: LD_EXP 69
18642: AND
18643: IFFALSE 18799
18645: GO 18647
18647: DISABLE
18648: LD_INT 0
18650: PPUSH
18651: PPUSH
18652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18653: LD_ADDR_VAR 0 2
18657: PUSH
18658: LD_INT 81
18660: PUSH
18661: LD_OWVAR 2
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: LD_INT 21
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 21
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: LIST
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PPUSH
18702: CALL_OW 69
18706: ST_TO_ADDR
// if not tmp then
18707: LD_VAR 0 2
18711: NOT
18712: IFFALSE 18716
// exit ;
18714: GO 18799
// p := 0 ;
18716: LD_ADDR_VAR 0 3
18720: PUSH
18721: LD_INT 0
18723: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18724: LD_INT 35
18726: PPUSH
18727: CALL_OW 67
// p := p + 1 ;
18731: LD_ADDR_VAR 0 3
18735: PUSH
18736: LD_VAR 0 3
18740: PUSH
18741: LD_INT 1
18743: PLUS
18744: ST_TO_ADDR
// for i in tmp do
18745: LD_ADDR_VAR 0 1
18749: PUSH
18750: LD_VAR 0 2
18754: PUSH
18755: FOR_IN
18756: IFFALSE 18787
// if GetLives ( i ) < 1000 then
18758: LD_VAR 0 1
18762: PPUSH
18763: CALL_OW 256
18767: PUSH
18768: LD_INT 1000
18770: LESS
18771: IFFALSE 18785
// SetLives ( i , 1000 ) ;
18773: LD_VAR 0 1
18777: PPUSH
18778: LD_INT 1000
18780: PPUSH
18781: CALL_OW 234
18785: GO 18755
18787: POP
18788: POP
// until p > 20 ;
18789: LD_VAR 0 3
18793: PUSH
18794: LD_INT 20
18796: GREATER
18797: IFFALSE 18724
// end ;
18799: PPOPN 3
18801: END
// every 0 0$1 trigger StreamModeActive and sTime do
18802: LD_EXP 19
18806: PUSH
18807: LD_EXP 70
18811: AND
18812: IFFALSE 18847
18814: GO 18816
18816: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18817: LD_INT 28
18819: PPUSH
18820: LD_OWVAR 2
18824: PPUSH
18825: LD_INT 2
18827: PPUSH
18828: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18832: LD_INT 30
18834: PPUSH
18835: LD_OWVAR 2
18839: PPUSH
18840: LD_INT 2
18842: PPUSH
18843: CALL_OW 322
// end ;
18847: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18848: LD_EXP 19
18852: PUSH
18853: LD_EXP 71
18857: AND
18858: IFFALSE 18979
18860: GO 18862
18862: DISABLE
18863: LD_INT 0
18865: PPUSH
18866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18867: LD_ADDR_VAR 0 2
18871: PUSH
18872: LD_INT 22
18874: PUSH
18875: LD_OWVAR 2
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 21
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 3
18896: PUSH
18897: LD_INT 23
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: PPUSH
18916: CALL_OW 69
18920: ST_TO_ADDR
// if not tmp then
18921: LD_VAR 0 2
18925: NOT
18926: IFFALSE 18930
// exit ;
18928: GO 18979
// for i in tmp do
18930: LD_ADDR_VAR 0 1
18934: PUSH
18935: LD_VAR 0 2
18939: PUSH
18940: FOR_IN
18941: IFFALSE 18977
// begin if Crawls ( i ) then
18943: LD_VAR 0 1
18947: PPUSH
18948: CALL_OW 318
18952: IFFALSE 18963
// ComWalk ( i ) ;
18954: LD_VAR 0 1
18958: PPUSH
18959: CALL_OW 138
// SetClass ( i , 2 ) ;
18963: LD_VAR 0 1
18967: PPUSH
18968: LD_INT 2
18970: PPUSH
18971: CALL_OW 336
// end ;
18975: GO 18940
18977: POP
18978: POP
// end ;
18979: PPOPN 2
18981: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18982: LD_EXP 19
18986: PUSH
18987: LD_EXP 72
18991: AND
18992: IFFALSE 19280
18994: GO 18996
18996: DISABLE
18997: LD_INT 0
18999: PPUSH
19000: PPUSH
19001: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19002: LD_OWVAR 2
19006: PPUSH
19007: LD_INT 9
19009: PPUSH
19010: LD_INT 1
19012: PPUSH
19013: LD_INT 1
19015: PPUSH
19016: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19020: LD_INT 9
19022: PPUSH
19023: LD_OWVAR 2
19027: PPUSH
19028: CALL_OW 343
// uc_side := 9 ;
19032: LD_ADDR_OWVAR 20
19036: PUSH
19037: LD_INT 9
19039: ST_TO_ADDR
// uc_nation := 2 ;
19040: LD_ADDR_OWVAR 21
19044: PUSH
19045: LD_INT 2
19047: ST_TO_ADDR
// hc_name := Dark Warrior ;
19048: LD_ADDR_OWVAR 26
19052: PUSH
19053: LD_STRING Dark Warrior
19055: ST_TO_ADDR
// hc_gallery :=  ;
19056: LD_ADDR_OWVAR 33
19060: PUSH
19061: LD_STRING 
19063: ST_TO_ADDR
// hc_noskilllimit := true ;
19064: LD_ADDR_OWVAR 76
19068: PUSH
19069: LD_INT 1
19071: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19072: LD_ADDR_OWVAR 31
19076: PUSH
19077: LD_INT 30
19079: PUSH
19080: LD_INT 30
19082: PUSH
19083: LD_INT 30
19085: PUSH
19086: LD_INT 30
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: ST_TO_ADDR
// un := CreateHuman ;
19095: LD_ADDR_VAR 0 3
19099: PUSH
19100: CALL_OW 44
19104: ST_TO_ADDR
// hc_noskilllimit := false ;
19105: LD_ADDR_OWVAR 76
19109: PUSH
19110: LD_INT 0
19112: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19113: LD_VAR 0 3
19117: PPUSH
19118: LD_INT 1
19120: PPUSH
19121: CALL_OW 51
// ToLua ( playRanger() ) ;
19125: LD_STRING playRanger()
19127: PPUSH
19128: CALL_OW 559
// p := 0 ;
19132: LD_ADDR_VAR 0 2
19136: PUSH
19137: LD_INT 0
19139: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19140: LD_INT 35
19142: PPUSH
19143: CALL_OW 67
// p := p + 1 ;
19147: LD_ADDR_VAR 0 2
19151: PUSH
19152: LD_VAR 0 2
19156: PUSH
19157: LD_INT 1
19159: PLUS
19160: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19161: LD_VAR 0 3
19165: PPUSH
19166: CALL_OW 256
19170: PUSH
19171: LD_INT 1000
19173: LESS
19174: IFFALSE 19188
// SetLives ( un , 1000 ) ;
19176: LD_VAR 0 3
19180: PPUSH
19181: LD_INT 1000
19183: PPUSH
19184: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19188: LD_VAR 0 3
19192: PPUSH
19193: LD_INT 81
19195: PUSH
19196: LD_OWVAR 2
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 91
19207: PUSH
19208: LD_VAR 0 3
19212: PUSH
19213: LD_INT 30
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PPUSH
19225: CALL_OW 69
19229: PPUSH
19230: LD_VAR 0 3
19234: PPUSH
19235: CALL_OW 74
19239: PPUSH
19240: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19244: LD_VAR 0 2
19248: PUSH
19249: LD_INT 80
19251: GREATER
19252: PUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL_OW 301
19262: OR
19263: IFFALSE 19140
// if un then
19265: LD_VAR 0 3
19269: IFFALSE 19280
// RemoveUnit ( un ) ;
19271: LD_VAR 0 3
19275: PPUSH
19276: CALL_OW 64
// end ;
19280: PPOPN 3
19282: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19283: LD_EXP 73
19287: IFFALSE 19403
19289: GO 19291
19291: DISABLE
19292: LD_INT 0
19294: PPUSH
19295: PPUSH
19296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19297: LD_ADDR_VAR 0 2
19301: PUSH
19302: LD_INT 81
19304: PUSH
19305: LD_OWVAR 2
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 21
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PPUSH
19328: CALL_OW 69
19332: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19333: LD_STRING playComputer()
19335: PPUSH
19336: CALL_OW 559
// if not tmp then
19340: LD_VAR 0 2
19344: NOT
19345: IFFALSE 19349
// exit ;
19347: GO 19403
// for i in tmp do
19349: LD_ADDR_VAR 0 1
19353: PUSH
19354: LD_VAR 0 2
19358: PUSH
19359: FOR_IN
19360: IFFALSE 19401
// for j := 1 to 4 do
19362: LD_ADDR_VAR 0 3
19366: PUSH
19367: DOUBLE
19368: LD_INT 1
19370: DEC
19371: ST_TO_ADDR
19372: LD_INT 4
19374: PUSH
19375: FOR_TO
19376: IFFALSE 19397
// SetSkill ( i , j , 10 ) ;
19378: LD_VAR 0 1
19382: PPUSH
19383: LD_VAR 0 3
19387: PPUSH
19388: LD_INT 10
19390: PPUSH
19391: CALL_OW 237
19395: GO 19375
19397: POP
19398: POP
19399: GO 19359
19401: POP
19402: POP
// end ;
19403: PPOPN 3
19405: END
// every 0 0$1 trigger s30 do var i , tmp ;
19406: LD_EXP 74
19410: IFFALSE 19479
19412: GO 19414
19414: DISABLE
19415: LD_INT 0
19417: PPUSH
19418: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19419: LD_ADDR_VAR 0 2
19423: PUSH
19424: LD_INT 22
19426: PUSH
19427: LD_OWVAR 2
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PPUSH
19436: CALL_OW 69
19440: ST_TO_ADDR
// if not tmp then
19441: LD_VAR 0 2
19445: NOT
19446: IFFALSE 19450
// exit ;
19448: GO 19479
// for i in tmp do
19450: LD_ADDR_VAR 0 1
19454: PUSH
19455: LD_VAR 0 2
19459: PUSH
19460: FOR_IN
19461: IFFALSE 19477
// SetLives ( i , 300 ) ;
19463: LD_VAR 0 1
19467: PPUSH
19468: LD_INT 300
19470: PPUSH
19471: CALL_OW 234
19475: GO 19460
19477: POP
19478: POP
// end ;
19479: PPOPN 2
19481: END
// every 0 0$1 trigger s60 do var i , tmp ;
19482: LD_EXP 75
19486: IFFALSE 19555
19488: GO 19490
19490: DISABLE
19491: LD_INT 0
19493: PPUSH
19494: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19495: LD_ADDR_VAR 0 2
19499: PUSH
19500: LD_INT 22
19502: PUSH
19503: LD_OWVAR 2
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PPUSH
19512: CALL_OW 69
19516: ST_TO_ADDR
// if not tmp then
19517: LD_VAR 0 2
19521: NOT
19522: IFFALSE 19526
// exit ;
19524: GO 19555
// for i in tmp do
19526: LD_ADDR_VAR 0 1
19530: PUSH
19531: LD_VAR 0 2
19535: PUSH
19536: FOR_IN
19537: IFFALSE 19553
// SetLives ( i , 600 ) ;
19539: LD_VAR 0 1
19543: PPUSH
19544: LD_INT 600
19546: PPUSH
19547: CALL_OW 234
19551: GO 19536
19553: POP
19554: POP
// end ;
19555: PPOPN 2
19557: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19558: LD_INT 0
19560: PPUSH
// case cmd of 301 :
19561: LD_VAR 0 1
19565: PUSH
19566: LD_INT 301
19568: DOUBLE
19569: EQUAL
19570: IFTRUE 19574
19572: GO 19606
19574: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19575: LD_VAR 0 6
19579: PPUSH
19580: LD_VAR 0 7
19584: PPUSH
19585: LD_VAR 0 8
19589: PPUSH
19590: LD_VAR 0 4
19594: PPUSH
19595: LD_VAR 0 5
19599: PPUSH
19600: CALL 20815 0 5
19604: GO 19727
19606: LD_INT 302
19608: DOUBLE
19609: EQUAL
19610: IFTRUE 19614
19612: GO 19651
19614: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19615: LD_VAR 0 6
19619: PPUSH
19620: LD_VAR 0 7
19624: PPUSH
19625: LD_VAR 0 8
19629: PPUSH
19630: LD_VAR 0 9
19634: PPUSH
19635: LD_VAR 0 4
19639: PPUSH
19640: LD_VAR 0 5
19644: PPUSH
19645: CALL 20906 0 6
19649: GO 19727
19651: LD_INT 303
19653: DOUBLE
19654: EQUAL
19655: IFTRUE 19659
19657: GO 19696
19659: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19660: LD_VAR 0 6
19664: PPUSH
19665: LD_VAR 0 7
19669: PPUSH
19670: LD_VAR 0 8
19674: PPUSH
19675: LD_VAR 0 9
19679: PPUSH
19680: LD_VAR 0 4
19684: PPUSH
19685: LD_VAR 0 5
19689: PPUSH
19690: CALL 19732 0 6
19694: GO 19727
19696: LD_INT 304
19698: DOUBLE
19699: EQUAL
19700: IFTRUE 19704
19702: GO 19726
19704: POP
// hHackTeleport ( unit , x , y ) ; end ;
19705: LD_VAR 0 2
19709: PPUSH
19710: LD_VAR 0 4
19714: PPUSH
19715: LD_VAR 0 5
19719: PPUSH
19720: CALL 21499 0 3
19724: GO 19727
19726: POP
// end ;
19727: LD_VAR 0 12
19731: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19732: LD_INT 0
19734: PPUSH
19735: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19736: LD_VAR 0 1
19740: PUSH
19741: LD_INT 1
19743: LESS
19744: PUSH
19745: LD_VAR 0 1
19749: PUSH
19750: LD_INT 3
19752: GREATER
19753: OR
19754: PUSH
19755: LD_VAR 0 5
19759: PPUSH
19760: LD_VAR 0 6
19764: PPUSH
19765: CALL_OW 428
19769: OR
19770: IFFALSE 19774
// exit ;
19772: GO 20502
// uc_side := your_side ;
19774: LD_ADDR_OWVAR 20
19778: PUSH
19779: LD_OWVAR 2
19783: ST_TO_ADDR
// uc_nation := nation ;
19784: LD_ADDR_OWVAR 21
19788: PUSH
19789: LD_VAR 0 1
19793: ST_TO_ADDR
// bc_level = 1 ;
19794: LD_ADDR_OWVAR 43
19798: PUSH
19799: LD_INT 1
19801: ST_TO_ADDR
// case btype of 1 :
19802: LD_VAR 0 2
19806: PUSH
19807: LD_INT 1
19809: DOUBLE
19810: EQUAL
19811: IFTRUE 19815
19813: GO 19826
19815: POP
// bc_type := b_depot ; 2 :
19816: LD_ADDR_OWVAR 42
19820: PUSH
19821: LD_INT 0
19823: ST_TO_ADDR
19824: GO 20446
19826: LD_INT 2
19828: DOUBLE
19829: EQUAL
19830: IFTRUE 19834
19832: GO 19845
19834: POP
// bc_type := b_warehouse ; 3 :
19835: LD_ADDR_OWVAR 42
19839: PUSH
19840: LD_INT 1
19842: ST_TO_ADDR
19843: GO 20446
19845: LD_INT 3
19847: DOUBLE
19848: EQUAL
19849: IFTRUE 19853
19851: GO 19864
19853: POP
// bc_type := b_lab ; 4 .. 9 :
19854: LD_ADDR_OWVAR 42
19858: PUSH
19859: LD_INT 6
19861: ST_TO_ADDR
19862: GO 20446
19864: LD_INT 4
19866: DOUBLE
19867: GREATEREQUAL
19868: IFFALSE 19876
19870: LD_INT 9
19872: DOUBLE
19873: LESSEQUAL
19874: IFTRUE 19878
19876: GO 19938
19878: POP
// begin bc_type := b_lab_half ;
19879: LD_ADDR_OWVAR 42
19883: PUSH
19884: LD_INT 7
19886: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19887: LD_ADDR_OWVAR 44
19891: PUSH
19892: LD_INT 10
19894: PUSH
19895: LD_INT 11
19897: PUSH
19898: LD_INT 12
19900: PUSH
19901: LD_INT 15
19903: PUSH
19904: LD_INT 14
19906: PUSH
19907: LD_INT 13
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: PUSH
19918: LD_VAR 0 2
19922: PUSH
19923: LD_INT 3
19925: MINUS
19926: ARRAY
19927: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
19928: LD_ADDR_OWVAR 45
19932: PUSH
19933: LD_INT 9
19935: ST_TO_ADDR
// end ; 10 .. 13 :
19936: GO 20446
19938: LD_INT 10
19940: DOUBLE
19941: GREATEREQUAL
19942: IFFALSE 19950
19944: LD_INT 13
19946: DOUBLE
19947: LESSEQUAL
19948: IFTRUE 19952
19950: GO 20029
19952: POP
// begin bc_type := b_lab_full ;
19953: LD_ADDR_OWVAR 42
19957: PUSH
19958: LD_INT 8
19960: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19961: LD_ADDR_OWVAR 44
19965: PUSH
19966: LD_INT 10
19968: PUSH
19969: LD_INT 12
19971: PUSH
19972: LD_INT 14
19974: PUSH
19975: LD_INT 13
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: PUSH
19984: LD_VAR 0 2
19988: PUSH
19989: LD_INT 9
19991: MINUS
19992: ARRAY
19993: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19994: LD_ADDR_OWVAR 45
19998: PUSH
19999: LD_INT 11
20001: PUSH
20002: LD_INT 15
20004: PUSH
20005: LD_INT 12
20007: PUSH
20008: LD_INT 15
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: PUSH
20017: LD_VAR 0 2
20021: PUSH
20022: LD_INT 9
20024: MINUS
20025: ARRAY
20026: ST_TO_ADDR
// end ; 14 :
20027: GO 20446
20029: LD_INT 14
20031: DOUBLE
20032: EQUAL
20033: IFTRUE 20037
20035: GO 20048
20037: POP
// bc_type := b_workshop ; 15 :
20038: LD_ADDR_OWVAR 42
20042: PUSH
20043: LD_INT 2
20045: ST_TO_ADDR
20046: GO 20446
20048: LD_INT 15
20050: DOUBLE
20051: EQUAL
20052: IFTRUE 20056
20054: GO 20067
20056: POP
// bc_type := b_factory ; 16 :
20057: LD_ADDR_OWVAR 42
20061: PUSH
20062: LD_INT 3
20064: ST_TO_ADDR
20065: GO 20446
20067: LD_INT 16
20069: DOUBLE
20070: EQUAL
20071: IFTRUE 20075
20073: GO 20086
20075: POP
// bc_type := b_ext_gun ; 17 :
20076: LD_ADDR_OWVAR 42
20080: PUSH
20081: LD_INT 17
20083: ST_TO_ADDR
20084: GO 20446
20086: LD_INT 17
20088: DOUBLE
20089: EQUAL
20090: IFTRUE 20094
20092: GO 20122
20094: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20095: LD_ADDR_OWVAR 42
20099: PUSH
20100: LD_INT 19
20102: PUSH
20103: LD_INT 23
20105: PUSH
20106: LD_INT 19
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: PUSH
20114: LD_VAR 0 1
20118: ARRAY
20119: ST_TO_ADDR
20120: GO 20446
20122: LD_INT 18
20124: DOUBLE
20125: EQUAL
20126: IFTRUE 20130
20128: GO 20141
20130: POP
// bc_type := b_ext_radar ; 19 :
20131: LD_ADDR_OWVAR 42
20135: PUSH
20136: LD_INT 20
20138: ST_TO_ADDR
20139: GO 20446
20141: LD_INT 19
20143: DOUBLE
20144: EQUAL
20145: IFTRUE 20149
20147: GO 20160
20149: POP
// bc_type := b_ext_radio ; 20 :
20150: LD_ADDR_OWVAR 42
20154: PUSH
20155: LD_INT 22
20157: ST_TO_ADDR
20158: GO 20446
20160: LD_INT 20
20162: DOUBLE
20163: EQUAL
20164: IFTRUE 20168
20166: GO 20179
20168: POP
// bc_type := b_ext_siberium ; 21 :
20169: LD_ADDR_OWVAR 42
20173: PUSH
20174: LD_INT 21
20176: ST_TO_ADDR
20177: GO 20446
20179: LD_INT 21
20181: DOUBLE
20182: EQUAL
20183: IFTRUE 20187
20185: GO 20198
20187: POP
// bc_type := b_ext_computer ; 22 :
20188: LD_ADDR_OWVAR 42
20192: PUSH
20193: LD_INT 24
20195: ST_TO_ADDR
20196: GO 20446
20198: LD_INT 22
20200: DOUBLE
20201: EQUAL
20202: IFTRUE 20206
20204: GO 20217
20206: POP
// bc_type := b_ext_track ; 23 :
20207: LD_ADDR_OWVAR 42
20211: PUSH
20212: LD_INT 16
20214: ST_TO_ADDR
20215: GO 20446
20217: LD_INT 23
20219: DOUBLE
20220: EQUAL
20221: IFTRUE 20225
20223: GO 20236
20225: POP
// bc_type := b_ext_laser ; 24 :
20226: LD_ADDR_OWVAR 42
20230: PUSH
20231: LD_INT 25
20233: ST_TO_ADDR
20234: GO 20446
20236: LD_INT 24
20238: DOUBLE
20239: EQUAL
20240: IFTRUE 20244
20242: GO 20255
20244: POP
// bc_type := b_control_tower ; 25 :
20245: LD_ADDR_OWVAR 42
20249: PUSH
20250: LD_INT 36
20252: ST_TO_ADDR
20253: GO 20446
20255: LD_INT 25
20257: DOUBLE
20258: EQUAL
20259: IFTRUE 20263
20261: GO 20274
20263: POP
// bc_type := b_breastwork ; 26 :
20264: LD_ADDR_OWVAR 42
20268: PUSH
20269: LD_INT 31
20271: ST_TO_ADDR
20272: GO 20446
20274: LD_INT 26
20276: DOUBLE
20277: EQUAL
20278: IFTRUE 20282
20280: GO 20293
20282: POP
// bc_type := b_bunker ; 27 :
20283: LD_ADDR_OWVAR 42
20287: PUSH
20288: LD_INT 32
20290: ST_TO_ADDR
20291: GO 20446
20293: LD_INT 27
20295: DOUBLE
20296: EQUAL
20297: IFTRUE 20301
20299: GO 20312
20301: POP
// bc_type := b_turret ; 28 :
20302: LD_ADDR_OWVAR 42
20306: PUSH
20307: LD_INT 33
20309: ST_TO_ADDR
20310: GO 20446
20312: LD_INT 28
20314: DOUBLE
20315: EQUAL
20316: IFTRUE 20320
20318: GO 20331
20320: POP
// bc_type := b_armoury ; 29 :
20321: LD_ADDR_OWVAR 42
20325: PUSH
20326: LD_INT 4
20328: ST_TO_ADDR
20329: GO 20446
20331: LD_INT 29
20333: DOUBLE
20334: EQUAL
20335: IFTRUE 20339
20337: GO 20350
20339: POP
// bc_type := b_barracks ; 30 :
20340: LD_ADDR_OWVAR 42
20344: PUSH
20345: LD_INT 5
20347: ST_TO_ADDR
20348: GO 20446
20350: LD_INT 30
20352: DOUBLE
20353: EQUAL
20354: IFTRUE 20358
20356: GO 20369
20358: POP
// bc_type := b_solar_power ; 31 :
20359: LD_ADDR_OWVAR 42
20363: PUSH
20364: LD_INT 27
20366: ST_TO_ADDR
20367: GO 20446
20369: LD_INT 31
20371: DOUBLE
20372: EQUAL
20373: IFTRUE 20377
20375: GO 20388
20377: POP
// bc_type := b_oil_power ; 32 :
20378: LD_ADDR_OWVAR 42
20382: PUSH
20383: LD_INT 26
20385: ST_TO_ADDR
20386: GO 20446
20388: LD_INT 32
20390: DOUBLE
20391: EQUAL
20392: IFTRUE 20396
20394: GO 20407
20396: POP
// bc_type := b_siberite_power ; 33 :
20397: LD_ADDR_OWVAR 42
20401: PUSH
20402: LD_INT 28
20404: ST_TO_ADDR
20405: GO 20446
20407: LD_INT 33
20409: DOUBLE
20410: EQUAL
20411: IFTRUE 20415
20413: GO 20426
20415: POP
// bc_type := b_oil_mine ; 34 :
20416: LD_ADDR_OWVAR 42
20420: PUSH
20421: LD_INT 29
20423: ST_TO_ADDR
20424: GO 20446
20426: LD_INT 34
20428: DOUBLE
20429: EQUAL
20430: IFTRUE 20434
20432: GO 20445
20434: POP
// bc_type := b_siberite_mine ; end ;
20435: LD_ADDR_OWVAR 42
20439: PUSH
20440: LD_INT 30
20442: ST_TO_ADDR
20443: GO 20446
20445: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20446: LD_ADDR_VAR 0 8
20450: PUSH
20451: LD_VAR 0 5
20455: PPUSH
20456: LD_VAR 0 6
20460: PPUSH
20461: LD_VAR 0 3
20465: PPUSH
20466: CALL_OW 47
20470: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20471: LD_OWVAR 42
20475: PUSH
20476: LD_INT 32
20478: PUSH
20479: LD_INT 33
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: IN
20486: IFFALSE 20502
// PlaceWeaponTurret ( b , weapon ) ;
20488: LD_VAR 0 8
20492: PPUSH
20493: LD_VAR 0 4
20497: PPUSH
20498: CALL_OW 431
// end ;
20502: LD_VAR 0 7
20506: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20507: LD_INT 0
20509: PPUSH
20510: PPUSH
20511: PPUSH
20512: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20513: LD_ADDR_VAR 0 4
20517: PUSH
20518: LD_INT 22
20520: PUSH
20521: LD_OWVAR 2
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 2
20532: PUSH
20533: LD_INT 30
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 30
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: LIST
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PPUSH
20562: CALL_OW 69
20566: ST_TO_ADDR
// if not tmp then
20567: LD_VAR 0 4
20571: NOT
20572: IFFALSE 20576
// exit ;
20574: GO 20635
// for i in tmp do
20576: LD_ADDR_VAR 0 2
20580: PUSH
20581: LD_VAR 0 4
20585: PUSH
20586: FOR_IN
20587: IFFALSE 20633
// for j = 1 to 3 do
20589: LD_ADDR_VAR 0 3
20593: PUSH
20594: DOUBLE
20595: LD_INT 1
20597: DEC
20598: ST_TO_ADDR
20599: LD_INT 3
20601: PUSH
20602: FOR_TO
20603: IFFALSE 20629
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20605: LD_VAR 0 2
20609: PPUSH
20610: CALL_OW 274
20614: PPUSH
20615: LD_VAR 0 3
20619: PPUSH
20620: LD_INT 99999
20622: PPUSH
20623: CALL_OW 277
20627: GO 20602
20629: POP
20630: POP
20631: GO 20586
20633: POP
20634: POP
// end ;
20635: LD_VAR 0 1
20639: RET
// export function hHackSetLevel10 ; var i , j ; begin
20640: LD_INT 0
20642: PPUSH
20643: PPUSH
20644: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20645: LD_ADDR_VAR 0 2
20649: PUSH
20650: LD_INT 21
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PPUSH
20660: CALL_OW 69
20664: PUSH
20665: FOR_IN
20666: IFFALSE 20718
// if IsSelected ( i ) then
20668: LD_VAR 0 2
20672: PPUSH
20673: CALL_OW 306
20677: IFFALSE 20716
// begin for j := 1 to 4 do
20679: LD_ADDR_VAR 0 3
20683: PUSH
20684: DOUBLE
20685: LD_INT 1
20687: DEC
20688: ST_TO_ADDR
20689: LD_INT 4
20691: PUSH
20692: FOR_TO
20693: IFFALSE 20714
// SetSkill ( i , j , 10 ) ;
20695: LD_VAR 0 2
20699: PPUSH
20700: LD_VAR 0 3
20704: PPUSH
20705: LD_INT 10
20707: PPUSH
20708: CALL_OW 237
20712: GO 20692
20714: POP
20715: POP
// end ;
20716: GO 20665
20718: POP
20719: POP
// end ;
20720: LD_VAR 0 1
20724: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20725: LD_INT 0
20727: PPUSH
20728: PPUSH
20729: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20730: LD_ADDR_VAR 0 2
20734: PUSH
20735: LD_INT 22
20737: PUSH
20738: LD_OWVAR 2
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 21
20749: PUSH
20750: LD_INT 1
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: EMPTY
20758: LIST
20759: LIST
20760: PPUSH
20761: CALL_OW 69
20765: PUSH
20766: FOR_IN
20767: IFFALSE 20808
// begin for j := 1 to 4 do
20769: LD_ADDR_VAR 0 3
20773: PUSH
20774: DOUBLE
20775: LD_INT 1
20777: DEC
20778: ST_TO_ADDR
20779: LD_INT 4
20781: PUSH
20782: FOR_TO
20783: IFFALSE 20804
// SetSkill ( i , j , 10 ) ;
20785: LD_VAR 0 2
20789: PPUSH
20790: LD_VAR 0 3
20794: PPUSH
20795: LD_INT 10
20797: PPUSH
20798: CALL_OW 237
20802: GO 20782
20804: POP
20805: POP
// end ;
20806: GO 20766
20808: POP
20809: POP
// end ;
20810: LD_VAR 0 1
20814: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20815: LD_INT 0
20817: PPUSH
// uc_side := your_side ;
20818: LD_ADDR_OWVAR 20
20822: PUSH
20823: LD_OWVAR 2
20827: ST_TO_ADDR
// uc_nation := nation ;
20828: LD_ADDR_OWVAR 21
20832: PUSH
20833: LD_VAR 0 1
20837: ST_TO_ADDR
// InitHc ;
20838: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20842: LD_INT 0
20844: PPUSH
20845: LD_VAR 0 2
20849: PPUSH
20850: LD_VAR 0 3
20854: PPUSH
20855: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20859: LD_VAR 0 4
20863: PPUSH
20864: LD_VAR 0 5
20868: PPUSH
20869: CALL_OW 428
20873: PUSH
20874: LD_INT 0
20876: EQUAL
20877: IFFALSE 20901
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20879: CALL_OW 44
20883: PPUSH
20884: LD_VAR 0 4
20888: PPUSH
20889: LD_VAR 0 5
20893: PPUSH
20894: LD_INT 1
20896: PPUSH
20897: CALL_OW 48
// end ;
20901: LD_VAR 0 6
20905: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20906: LD_INT 0
20908: PPUSH
20909: PPUSH
// uc_side := your_side ;
20910: LD_ADDR_OWVAR 20
20914: PUSH
20915: LD_OWVAR 2
20919: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20920: LD_VAR 0 1
20924: PUSH
20925: LD_INT 1
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: LD_INT 3
20933: PUSH
20934: LD_INT 4
20936: PUSH
20937: LD_INT 5
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: IN
20947: IFFALSE 20959
// uc_nation := nation_american else
20949: LD_ADDR_OWVAR 21
20953: PUSH
20954: LD_INT 1
20956: ST_TO_ADDR
20957: GO 21002
// if chassis in [ 11 , 12 , 13 , 14 ] then
20959: LD_VAR 0 1
20963: PUSH
20964: LD_INT 11
20966: PUSH
20967: LD_INT 12
20969: PUSH
20970: LD_INT 13
20972: PUSH
20973: LD_INT 14
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: IN
20982: IFFALSE 20994
// uc_nation := nation_arabian else
20984: LD_ADDR_OWVAR 21
20988: PUSH
20989: LD_INT 2
20991: ST_TO_ADDR
20992: GO 21002
// uc_nation := nation_russian ;
20994: LD_ADDR_OWVAR 21
20998: PUSH
20999: LD_INT 3
21001: ST_TO_ADDR
// vc_chassis := chassis ;
21002: LD_ADDR_OWVAR 37
21006: PUSH
21007: LD_VAR 0 1
21011: ST_TO_ADDR
// vc_engine := engine ;
21012: LD_ADDR_OWVAR 39
21016: PUSH
21017: LD_VAR 0 2
21021: ST_TO_ADDR
// vc_control := control ;
21022: LD_ADDR_OWVAR 38
21026: PUSH
21027: LD_VAR 0 3
21031: ST_TO_ADDR
// vc_weapon := weapon ;
21032: LD_ADDR_OWVAR 40
21036: PUSH
21037: LD_VAR 0 4
21041: ST_TO_ADDR
// un := CreateVehicle ;
21042: LD_ADDR_VAR 0 8
21046: PUSH
21047: CALL_OW 45
21051: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21052: LD_VAR 0 8
21056: PPUSH
21057: LD_INT 0
21059: PPUSH
21060: LD_INT 5
21062: PPUSH
21063: CALL_OW 12
21067: PPUSH
21068: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21072: LD_VAR 0 8
21076: PPUSH
21077: LD_VAR 0 5
21081: PPUSH
21082: LD_VAR 0 6
21086: PPUSH
21087: LD_INT 1
21089: PPUSH
21090: CALL_OW 48
// end ;
21094: LD_VAR 0 7
21098: RET
// export hInvincible ; every 1 do
21099: GO 21101
21101: DISABLE
// hInvincible := [ ] ;
21102: LD_ADDR_EXP 76
21106: PUSH
21107: EMPTY
21108: ST_TO_ADDR
21109: END
// every 10 do var i ;
21110: GO 21112
21112: DISABLE
21113: LD_INT 0
21115: PPUSH
// begin enable ;
21116: ENABLE
// if not hInvincible then
21117: LD_EXP 76
21121: NOT
21122: IFFALSE 21126
// exit ;
21124: GO 21170
// for i in hInvincible do
21126: LD_ADDR_VAR 0 1
21130: PUSH
21131: LD_EXP 76
21135: PUSH
21136: FOR_IN
21137: IFFALSE 21168
// if GetLives ( i ) < 1000 then
21139: LD_VAR 0 1
21143: PPUSH
21144: CALL_OW 256
21148: PUSH
21149: LD_INT 1000
21151: LESS
21152: IFFALSE 21166
// SetLives ( i , 1000 ) ;
21154: LD_VAR 0 1
21158: PPUSH
21159: LD_INT 1000
21161: PPUSH
21162: CALL_OW 234
21166: GO 21136
21168: POP
21169: POP
// end ;
21170: PPOPN 1
21172: END
// export function hHackInvincible ; var i ; begin
21173: LD_INT 0
21175: PPUSH
21176: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21177: LD_ADDR_VAR 0 2
21181: PUSH
21182: LD_INT 2
21184: PUSH
21185: LD_INT 21
21187: PUSH
21188: LD_INT 1
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 21
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: LIST
21209: PPUSH
21210: CALL_OW 69
21214: PUSH
21215: FOR_IN
21216: IFFALSE 21277
// if IsSelected ( i ) then
21218: LD_VAR 0 2
21222: PPUSH
21223: CALL_OW 306
21227: IFFALSE 21275
// begin if i in hInvincible then
21229: LD_VAR 0 2
21233: PUSH
21234: LD_EXP 76
21238: IN
21239: IFFALSE 21259
// hInvincible := hInvincible diff i else
21241: LD_ADDR_EXP 76
21245: PUSH
21246: LD_EXP 76
21250: PUSH
21251: LD_VAR 0 2
21255: DIFF
21256: ST_TO_ADDR
21257: GO 21275
// hInvincible := hInvincible union i ;
21259: LD_ADDR_EXP 76
21263: PUSH
21264: LD_EXP 76
21268: PUSH
21269: LD_VAR 0 2
21273: UNION
21274: ST_TO_ADDR
// end ;
21275: GO 21215
21277: POP
21278: POP
// end ;
21279: LD_VAR 0 1
21283: RET
// export function hHackInvisible ; var i , j ; begin
21284: LD_INT 0
21286: PPUSH
21287: PPUSH
21288: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: LD_INT 21
21296: PUSH
21297: LD_INT 1
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PPUSH
21304: CALL_OW 69
21308: PUSH
21309: FOR_IN
21310: IFFALSE 21334
// if IsSelected ( i ) then
21312: LD_VAR 0 2
21316: PPUSH
21317: CALL_OW 306
21321: IFFALSE 21332
// ComForceInvisible ( i ) ;
21323: LD_VAR 0 2
21327: PPUSH
21328: CALL_OW 496
21332: GO 21309
21334: POP
21335: POP
// end ;
21336: LD_VAR 0 1
21340: RET
// export function hHackChangeYourSide ; begin
21341: LD_INT 0
21343: PPUSH
// if your_side = 8 then
21344: LD_OWVAR 2
21348: PUSH
21349: LD_INT 8
21351: EQUAL
21352: IFFALSE 21364
// your_side := 0 else
21354: LD_ADDR_OWVAR 2
21358: PUSH
21359: LD_INT 0
21361: ST_TO_ADDR
21362: GO 21378
// your_side := your_side + 1 ;
21364: LD_ADDR_OWVAR 2
21368: PUSH
21369: LD_OWVAR 2
21373: PUSH
21374: LD_INT 1
21376: PLUS
21377: ST_TO_ADDR
// end ;
21378: LD_VAR 0 1
21382: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21383: LD_INT 0
21385: PPUSH
21386: PPUSH
21387: PPUSH
// for i in all_units do
21388: LD_ADDR_VAR 0 2
21392: PUSH
21393: LD_OWVAR 3
21397: PUSH
21398: FOR_IN
21399: IFFALSE 21477
// if IsSelected ( i ) then
21401: LD_VAR 0 2
21405: PPUSH
21406: CALL_OW 306
21410: IFFALSE 21475
// begin j := GetSide ( i ) ;
21412: LD_ADDR_VAR 0 3
21416: PUSH
21417: LD_VAR 0 2
21421: PPUSH
21422: CALL_OW 255
21426: ST_TO_ADDR
// if j = 8 then
21427: LD_VAR 0 3
21431: PUSH
21432: LD_INT 8
21434: EQUAL
21435: IFFALSE 21447
// j := 0 else
21437: LD_ADDR_VAR 0 3
21441: PUSH
21442: LD_INT 0
21444: ST_TO_ADDR
21445: GO 21461
// j := j + 1 ;
21447: LD_ADDR_VAR 0 3
21451: PUSH
21452: LD_VAR 0 3
21456: PUSH
21457: LD_INT 1
21459: PLUS
21460: ST_TO_ADDR
// SetSide ( i , j ) ;
21461: LD_VAR 0 2
21465: PPUSH
21466: LD_VAR 0 3
21470: PPUSH
21471: CALL_OW 235
// end ;
21475: GO 21398
21477: POP
21478: POP
// end ;
21479: LD_VAR 0 1
21483: RET
// export function hHackFog ; begin
21484: LD_INT 0
21486: PPUSH
// FogOff ( true ) ;
21487: LD_INT 1
21489: PPUSH
21490: CALL_OW 344
// end ;
21494: LD_VAR 0 1
21498: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21499: LD_INT 0
21501: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21502: LD_VAR 0 1
21506: PPUSH
21507: LD_VAR 0 2
21511: PPUSH
21512: LD_VAR 0 3
21516: PPUSH
21517: LD_INT 1
21519: PPUSH
21520: LD_INT 1
21522: PPUSH
21523: CALL_OW 483
// CenterOnXY ( x , y ) ;
21527: LD_VAR 0 2
21531: PPUSH
21532: LD_VAR 0 3
21536: PPUSH
21537: CALL_OW 84
// end ;
21541: LD_VAR 0 4
21545: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21546: LD_INT 0
21548: PPUSH
21549: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21550: LD_VAR 0 1
21554: NOT
21555: PUSH
21556: LD_VAR 0 2
21560: PPUSH
21561: LD_VAR 0 3
21565: PPUSH
21566: CALL_OW 488
21570: NOT
21571: OR
21572: PUSH
21573: LD_VAR 0 1
21577: PPUSH
21578: CALL_OW 266
21582: PUSH
21583: LD_INT 3
21585: NONEQUAL
21586: PUSH
21587: LD_VAR 0 1
21591: PPUSH
21592: CALL_OW 247
21596: PUSH
21597: LD_INT 1
21599: EQUAL
21600: NOT
21601: AND
21602: OR
21603: IFFALSE 21607
// exit ;
21605: GO 21756
// if GetType ( factory ) = unit_human then
21607: LD_VAR 0 1
21611: PPUSH
21612: CALL_OW 247
21616: PUSH
21617: LD_INT 1
21619: EQUAL
21620: IFFALSE 21637
// factory := IsInUnit ( factory ) ;
21622: LD_ADDR_VAR 0 1
21626: PUSH
21627: LD_VAR 0 1
21631: PPUSH
21632: CALL_OW 310
21636: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21637: LD_VAR 0 1
21641: PPUSH
21642: CALL_OW 266
21646: PUSH
21647: LD_INT 3
21649: NONEQUAL
21650: IFFALSE 21654
// exit ;
21652: GO 21756
// if HexInfo ( x , y ) = factory then
21654: LD_VAR 0 2
21658: PPUSH
21659: LD_VAR 0 3
21663: PPUSH
21664: CALL_OW 428
21668: PUSH
21669: LD_VAR 0 1
21673: EQUAL
21674: IFFALSE 21701
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21676: LD_ADDR_EXP 77
21680: PUSH
21681: LD_EXP 77
21685: PPUSH
21686: LD_VAR 0 1
21690: PPUSH
21691: LD_INT 0
21693: PPUSH
21694: CALL_OW 1
21698: ST_TO_ADDR
21699: GO 21752
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21701: LD_ADDR_EXP 77
21705: PUSH
21706: LD_EXP 77
21710: PPUSH
21711: LD_VAR 0 1
21715: PPUSH
21716: LD_VAR 0 1
21720: PPUSH
21721: CALL_OW 255
21725: PUSH
21726: LD_VAR 0 1
21730: PUSH
21731: LD_VAR 0 2
21735: PUSH
21736: LD_VAR 0 3
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: PPUSH
21747: CALL_OW 1
21751: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21752: CALL 21761 0 0
// end ;
21756: LD_VAR 0 4
21760: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21761: LD_INT 0
21763: PPUSH
21764: PPUSH
21765: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21766: LD_STRING resetFactoryWaypoint();
21768: PPUSH
21769: CALL_OW 559
// if factoryWaypoints then
21773: LD_EXP 77
21777: IFFALSE 21903
// begin list := PrepareArray ( factoryWaypoints ) ;
21779: LD_ADDR_VAR 0 3
21783: PUSH
21784: LD_EXP 77
21788: PPUSH
21789: CALL 69045 0 1
21793: ST_TO_ADDR
// for i := 1 to list do
21794: LD_ADDR_VAR 0 2
21798: PUSH
21799: DOUBLE
21800: LD_INT 1
21802: DEC
21803: ST_TO_ADDR
21804: LD_VAR 0 3
21808: PUSH
21809: FOR_TO
21810: IFFALSE 21901
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21812: LD_STRING setFactoryWaypointXY(
21814: PUSH
21815: LD_VAR 0 3
21819: PUSH
21820: LD_VAR 0 2
21824: ARRAY
21825: PUSH
21826: LD_INT 1
21828: ARRAY
21829: STR
21830: PUSH
21831: LD_STRING ,
21833: STR
21834: PUSH
21835: LD_VAR 0 3
21839: PUSH
21840: LD_VAR 0 2
21844: ARRAY
21845: PUSH
21846: LD_INT 2
21848: ARRAY
21849: STR
21850: PUSH
21851: LD_STRING ,
21853: STR
21854: PUSH
21855: LD_VAR 0 3
21859: PUSH
21860: LD_VAR 0 2
21864: ARRAY
21865: PUSH
21866: LD_INT 3
21868: ARRAY
21869: STR
21870: PUSH
21871: LD_STRING ,
21873: STR
21874: PUSH
21875: LD_VAR 0 3
21879: PUSH
21880: LD_VAR 0 2
21884: ARRAY
21885: PUSH
21886: LD_INT 4
21888: ARRAY
21889: STR
21890: PUSH
21891: LD_STRING )
21893: STR
21894: PPUSH
21895: CALL_OW 559
21899: GO 21809
21901: POP
21902: POP
// end ; end ;
21903: LD_VAR 0 1
21907: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21908: LD_INT 0
21910: PPUSH
// if HexInfo ( x , y ) = warehouse then
21911: LD_VAR 0 2
21915: PPUSH
21916: LD_VAR 0 3
21920: PPUSH
21921: CALL_OW 428
21925: PUSH
21926: LD_VAR 0 1
21930: EQUAL
21931: IFFALSE 21958
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21933: LD_ADDR_EXP 78
21937: PUSH
21938: LD_EXP 78
21942: PPUSH
21943: LD_VAR 0 1
21947: PPUSH
21948: LD_INT 0
21950: PPUSH
21951: CALL_OW 1
21955: ST_TO_ADDR
21956: GO 22009
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21958: LD_ADDR_EXP 78
21962: PUSH
21963: LD_EXP 78
21967: PPUSH
21968: LD_VAR 0 1
21972: PPUSH
21973: LD_VAR 0 1
21977: PPUSH
21978: CALL_OW 255
21982: PUSH
21983: LD_VAR 0 1
21987: PUSH
21988: LD_VAR 0 2
21992: PUSH
21993: LD_VAR 0 3
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: PPUSH
22004: CALL_OW 1
22008: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22009: CALL 22018 0 0
// end ;
22013: LD_VAR 0 4
22017: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22018: LD_INT 0
22020: PPUSH
22021: PPUSH
22022: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22023: LD_STRING resetWarehouseGatheringPoints();
22025: PPUSH
22026: CALL_OW 559
// if warehouseGatheringPoints then
22030: LD_EXP 78
22034: IFFALSE 22160
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22036: LD_ADDR_VAR 0 3
22040: PUSH
22041: LD_EXP 78
22045: PPUSH
22046: CALL 69045 0 1
22050: ST_TO_ADDR
// for i := 1 to list do
22051: LD_ADDR_VAR 0 2
22055: PUSH
22056: DOUBLE
22057: LD_INT 1
22059: DEC
22060: ST_TO_ADDR
22061: LD_VAR 0 3
22065: PUSH
22066: FOR_TO
22067: IFFALSE 22158
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22069: LD_STRING setWarehouseGatheringPointXY(
22071: PUSH
22072: LD_VAR 0 3
22076: PUSH
22077: LD_VAR 0 2
22081: ARRAY
22082: PUSH
22083: LD_INT 1
22085: ARRAY
22086: STR
22087: PUSH
22088: LD_STRING ,
22090: STR
22091: PUSH
22092: LD_VAR 0 3
22096: PUSH
22097: LD_VAR 0 2
22101: ARRAY
22102: PUSH
22103: LD_INT 2
22105: ARRAY
22106: STR
22107: PUSH
22108: LD_STRING ,
22110: STR
22111: PUSH
22112: LD_VAR 0 3
22116: PUSH
22117: LD_VAR 0 2
22121: ARRAY
22122: PUSH
22123: LD_INT 3
22125: ARRAY
22126: STR
22127: PUSH
22128: LD_STRING ,
22130: STR
22131: PUSH
22132: LD_VAR 0 3
22136: PUSH
22137: LD_VAR 0 2
22141: ARRAY
22142: PUSH
22143: LD_INT 4
22145: ARRAY
22146: STR
22147: PUSH
22148: LD_STRING )
22150: STR
22151: PPUSH
22152: CALL_OW 559
22156: GO 22066
22158: POP
22159: POP
// end ; end ;
22160: LD_VAR 0 1
22164: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22165: LD_EXP 78
22169: IFFALSE 22854
22171: GO 22173
22173: DISABLE
22174: LD_INT 0
22176: PPUSH
22177: PPUSH
22178: PPUSH
22179: PPUSH
22180: PPUSH
22181: PPUSH
22182: PPUSH
22183: PPUSH
22184: PPUSH
// begin enable ;
22185: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22186: LD_ADDR_VAR 0 3
22190: PUSH
22191: LD_EXP 78
22195: PPUSH
22196: CALL 69045 0 1
22200: ST_TO_ADDR
// if not list then
22201: LD_VAR 0 3
22205: NOT
22206: IFFALSE 22210
// exit ;
22208: GO 22854
// for i := 1 to list do
22210: LD_ADDR_VAR 0 1
22214: PUSH
22215: DOUBLE
22216: LD_INT 1
22218: DEC
22219: ST_TO_ADDR
22220: LD_VAR 0 3
22224: PUSH
22225: FOR_TO
22226: IFFALSE 22852
// begin depot := list [ i ] [ 2 ] ;
22228: LD_ADDR_VAR 0 8
22232: PUSH
22233: LD_VAR 0 3
22237: PUSH
22238: LD_VAR 0 1
22242: ARRAY
22243: PUSH
22244: LD_INT 2
22246: ARRAY
22247: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22248: LD_ADDR_VAR 0 5
22252: PUSH
22253: LD_VAR 0 3
22257: PUSH
22258: LD_VAR 0 1
22262: ARRAY
22263: PUSH
22264: LD_INT 1
22266: ARRAY
22267: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22268: LD_VAR 0 8
22272: PPUSH
22273: CALL_OW 301
22277: PUSH
22278: LD_VAR 0 5
22282: PUSH
22283: LD_VAR 0 8
22287: PPUSH
22288: CALL_OW 255
22292: NONEQUAL
22293: OR
22294: IFFALSE 22323
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22296: LD_ADDR_EXP 78
22300: PUSH
22301: LD_EXP 78
22305: PPUSH
22306: LD_VAR 0 8
22310: PPUSH
22311: LD_INT 0
22313: PPUSH
22314: CALL_OW 1
22318: ST_TO_ADDR
// exit ;
22319: POP
22320: POP
22321: GO 22854
// end ; x := list [ i ] [ 3 ] ;
22323: LD_ADDR_VAR 0 6
22327: PUSH
22328: LD_VAR 0 3
22332: PUSH
22333: LD_VAR 0 1
22337: ARRAY
22338: PUSH
22339: LD_INT 3
22341: ARRAY
22342: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22343: LD_ADDR_VAR 0 7
22347: PUSH
22348: LD_VAR 0 3
22352: PUSH
22353: LD_VAR 0 1
22357: ARRAY
22358: PUSH
22359: LD_INT 4
22361: ARRAY
22362: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22363: LD_ADDR_VAR 0 9
22367: PUSH
22368: LD_VAR 0 6
22372: PPUSH
22373: LD_VAR 0 7
22377: PPUSH
22378: LD_INT 16
22380: PPUSH
22381: CALL 67633 0 3
22385: ST_TO_ADDR
// if not cratesNearbyPoint then
22386: LD_VAR 0 9
22390: NOT
22391: IFFALSE 22397
// exit ;
22393: POP
22394: POP
22395: GO 22854
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22397: LD_ADDR_VAR 0 4
22401: PUSH
22402: LD_INT 22
22404: PUSH
22405: LD_VAR 0 5
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 3
22416: PUSH
22417: LD_INT 60
22419: PUSH
22420: EMPTY
22421: LIST
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 91
22429: PUSH
22430: LD_VAR 0 8
22434: PUSH
22435: LD_INT 6
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 2
22445: PUSH
22446: LD_INT 25
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 25
22458: PUSH
22459: LD_INT 16
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: PPUSH
22477: CALL_OW 69
22481: PUSH
22482: LD_VAR 0 8
22486: PPUSH
22487: CALL_OW 313
22491: PPUSH
22492: LD_INT 3
22494: PUSH
22495: LD_INT 60
22497: PUSH
22498: EMPTY
22499: LIST
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 2
22507: PUSH
22508: LD_INT 25
22510: PUSH
22511: LD_INT 2
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 25
22520: PUSH
22521: LD_INT 16
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: LIST
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PPUSH
22537: CALL_OW 72
22541: UNION
22542: ST_TO_ADDR
// if tmp then
22543: LD_VAR 0 4
22547: IFFALSE 22627
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22549: LD_ADDR_VAR 0 4
22553: PUSH
22554: LD_VAR 0 4
22558: PPUSH
22559: LD_INT 3
22561: PPUSH
22562: CALL 65602 0 2
22566: ST_TO_ADDR
// for j in tmp do
22567: LD_ADDR_VAR 0 2
22571: PUSH
22572: LD_VAR 0 4
22576: PUSH
22577: FOR_IN
22578: IFFALSE 22621
// begin if IsInUnit ( j ) then
22580: LD_VAR 0 2
22584: PPUSH
22585: CALL_OW 310
22589: IFFALSE 22600
// ComExit ( j ) ;
22591: LD_VAR 0 2
22595: PPUSH
22596: CALL 65685 0 1
// AddComCollect ( j , x , y ) ;
22600: LD_VAR 0 2
22604: PPUSH
22605: LD_VAR 0 6
22609: PPUSH
22610: LD_VAR 0 7
22614: PPUSH
22615: CALL_OW 177
// end ;
22619: GO 22577
22621: POP
22622: POP
// exit ;
22623: POP
22624: POP
22625: GO 22854
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22627: LD_ADDR_VAR 0 4
22631: PUSH
22632: LD_INT 22
22634: PUSH
22635: LD_VAR 0 5
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 91
22646: PUSH
22647: LD_VAR 0 8
22651: PUSH
22652: LD_INT 8
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 2
22662: PUSH
22663: LD_INT 34
22665: PUSH
22666: LD_INT 12
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 34
22675: PUSH
22676: LD_INT 51
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 34
22685: PUSH
22686: LD_INT 32
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 34
22695: PUSH
22696: LD_INT 89
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: LIST
22714: PPUSH
22715: CALL_OW 69
22719: ST_TO_ADDR
// if tmp then
22720: LD_VAR 0 4
22724: IFFALSE 22850
// begin for j in tmp do
22726: LD_ADDR_VAR 0 2
22730: PUSH
22731: LD_VAR 0 4
22735: PUSH
22736: FOR_IN
22737: IFFALSE 22848
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22739: LD_VAR 0 2
22743: PPUSH
22744: CALL_OW 262
22748: PUSH
22749: LD_INT 3
22751: EQUAL
22752: PUSH
22753: LD_VAR 0 2
22757: PPUSH
22758: CALL_OW 261
22762: PUSH
22763: LD_INT 20
22765: GREATER
22766: OR
22767: PUSH
22768: LD_VAR 0 2
22772: PPUSH
22773: CALL_OW 314
22777: NOT
22778: AND
22779: PUSH
22780: LD_VAR 0 2
22784: PPUSH
22785: CALL_OW 263
22789: PUSH
22790: LD_INT 1
22792: NONEQUAL
22793: PUSH
22794: LD_VAR 0 2
22798: PPUSH
22799: CALL_OW 311
22803: OR
22804: AND
22805: IFFALSE 22846
// begin ComCollect ( j , x , y ) ;
22807: LD_VAR 0 2
22811: PPUSH
22812: LD_VAR 0 6
22816: PPUSH
22817: LD_VAR 0 7
22821: PPUSH
22822: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22826: LD_VAR 0 2
22830: PPUSH
22831: LD_VAR 0 8
22835: PPUSH
22836: CALL_OW 172
// exit ;
22840: POP
22841: POP
22842: POP
22843: POP
22844: GO 22854
// end ;
22846: GO 22736
22848: POP
22849: POP
// end ; end ;
22850: GO 22225
22852: POP
22853: POP
// end ; end_of_file
22854: PPOPN 9
22856: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22857: LD_INT 0
22859: PPUSH
22860: PPUSH
22861: PPUSH
22862: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22863: LD_VAR 0 1
22867: PPUSH
22868: CALL_OW 264
22872: PUSH
22873: LD_INT 91
22875: EQUAL
22876: IFFALSE 22948
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22878: LD_INT 68
22880: PPUSH
22881: LD_VAR 0 1
22885: PPUSH
22886: CALL_OW 255
22890: PPUSH
22891: CALL_OW 321
22895: PUSH
22896: LD_INT 2
22898: EQUAL
22899: IFFALSE 22911
// eff := 70 else
22901: LD_ADDR_VAR 0 4
22905: PUSH
22906: LD_INT 70
22908: ST_TO_ADDR
22909: GO 22919
// eff := 30 ;
22911: LD_ADDR_VAR 0 4
22915: PUSH
22916: LD_INT 30
22918: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22919: LD_VAR 0 1
22923: PPUSH
22924: CALL_OW 250
22928: PPUSH
22929: LD_VAR 0 1
22933: PPUSH
22934: CALL_OW 251
22938: PPUSH
22939: LD_VAR 0 4
22943: PPUSH
22944: CALL_OW 495
// end ; end ;
22948: LD_VAR 0 2
22952: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22953: LD_INT 0
22955: PPUSH
// end ;
22956: LD_VAR 0 4
22960: RET
// export function SOS_Command ( cmd ) ; begin
22961: LD_INT 0
22963: PPUSH
// end ;
22964: LD_VAR 0 2
22968: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22969: LD_INT 0
22971: PPUSH
// end ;
22972: LD_VAR 0 6
22976: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22977: LD_INT 0
22979: PPUSH
22980: PPUSH
// if not vehicle or not factory then
22981: LD_VAR 0 1
22985: NOT
22986: PUSH
22987: LD_VAR 0 2
22991: NOT
22992: OR
22993: IFFALSE 22997
// exit ;
22995: GO 23228
// if factoryWaypoints >= factory then
22997: LD_EXP 77
23001: PUSH
23002: LD_VAR 0 2
23006: GREATEREQUAL
23007: IFFALSE 23228
// if factoryWaypoints [ factory ] then
23009: LD_EXP 77
23013: PUSH
23014: LD_VAR 0 2
23018: ARRAY
23019: IFFALSE 23228
// begin if GetControl ( vehicle ) = control_manual then
23021: LD_VAR 0 1
23025: PPUSH
23026: CALL_OW 263
23030: PUSH
23031: LD_INT 1
23033: EQUAL
23034: IFFALSE 23115
// begin driver := IsDrivenBy ( vehicle ) ;
23036: LD_ADDR_VAR 0 4
23040: PUSH
23041: LD_VAR 0 1
23045: PPUSH
23046: CALL_OW 311
23050: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23051: LD_VAR 0 4
23055: PPUSH
23056: LD_EXP 77
23060: PUSH
23061: LD_VAR 0 2
23065: ARRAY
23066: PUSH
23067: LD_INT 3
23069: ARRAY
23070: PPUSH
23071: LD_EXP 77
23075: PUSH
23076: LD_VAR 0 2
23080: ARRAY
23081: PUSH
23082: LD_INT 4
23084: ARRAY
23085: PPUSH
23086: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23090: LD_VAR 0 4
23094: PPUSH
23095: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23099: LD_VAR 0 4
23103: PPUSH
23104: LD_VAR 0 2
23108: PPUSH
23109: CALL_OW 180
// end else
23113: GO 23228
// if GetControl ( vehicle ) = control_remote then
23115: LD_VAR 0 1
23119: PPUSH
23120: CALL_OW 263
23124: PUSH
23125: LD_INT 2
23127: EQUAL
23128: IFFALSE 23189
// begin wait ( 0 0$2 ) ;
23130: LD_INT 70
23132: PPUSH
23133: CALL_OW 67
// if Connect ( vehicle ) then
23137: LD_VAR 0 1
23141: PPUSH
23142: CALL 35893 0 1
23146: IFFALSE 23187
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23148: LD_VAR 0 1
23152: PPUSH
23153: LD_EXP 77
23157: PUSH
23158: LD_VAR 0 2
23162: ARRAY
23163: PUSH
23164: LD_INT 3
23166: ARRAY
23167: PPUSH
23168: LD_EXP 77
23172: PUSH
23173: LD_VAR 0 2
23177: ARRAY
23178: PUSH
23179: LD_INT 4
23181: ARRAY
23182: PPUSH
23183: CALL_OW 171
// end else
23187: GO 23228
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23189: LD_VAR 0 1
23193: PPUSH
23194: LD_EXP 77
23198: PUSH
23199: LD_VAR 0 2
23203: ARRAY
23204: PUSH
23205: LD_INT 3
23207: ARRAY
23208: PPUSH
23209: LD_EXP 77
23213: PUSH
23214: LD_VAR 0 2
23218: ARRAY
23219: PUSH
23220: LD_INT 4
23222: ARRAY
23223: PPUSH
23224: CALL_OW 171
// end ; end ;
23228: LD_VAR 0 3
23232: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23233: LD_INT 0
23235: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23236: LD_VAR 0 1
23240: PUSH
23241: LD_INT 250
23243: EQUAL
23244: PUSH
23245: LD_VAR 0 2
23249: PPUSH
23250: CALL_OW 264
23254: PUSH
23255: LD_INT 81
23257: EQUAL
23258: AND
23259: IFFALSE 23280
// MinerPlaceMine ( unit , x , y ) ;
23261: LD_VAR 0 2
23265: PPUSH
23266: LD_VAR 0 4
23270: PPUSH
23271: LD_VAR 0 5
23275: PPUSH
23276: CALL 26104 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23280: LD_VAR 0 1
23284: PUSH
23285: LD_INT 251
23287: EQUAL
23288: PUSH
23289: LD_VAR 0 2
23293: PPUSH
23294: CALL_OW 264
23298: PUSH
23299: LD_INT 81
23301: EQUAL
23302: AND
23303: IFFALSE 23324
// MinerDetonateMine ( unit , x , y ) ;
23305: LD_VAR 0 2
23309: PPUSH
23310: LD_VAR 0 4
23314: PPUSH
23315: LD_VAR 0 5
23319: PPUSH
23320: CALL 26379 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23324: LD_VAR 0 1
23328: PUSH
23329: LD_INT 252
23331: EQUAL
23332: PUSH
23333: LD_VAR 0 2
23337: PPUSH
23338: CALL_OW 264
23342: PUSH
23343: LD_INT 81
23345: EQUAL
23346: AND
23347: IFFALSE 23368
// MinerCreateMinefield ( unit , x , y ) ;
23349: LD_VAR 0 2
23353: PPUSH
23354: LD_VAR 0 4
23358: PPUSH
23359: LD_VAR 0 5
23363: PPUSH
23364: CALL 26796 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23368: LD_VAR 0 1
23372: PUSH
23373: LD_INT 253
23375: EQUAL
23376: PUSH
23377: LD_VAR 0 2
23381: PPUSH
23382: CALL_OW 257
23386: PUSH
23387: LD_INT 5
23389: EQUAL
23390: AND
23391: IFFALSE 23412
// ComBinocular ( unit , x , y ) ;
23393: LD_VAR 0 2
23397: PPUSH
23398: LD_VAR 0 4
23402: PPUSH
23403: LD_VAR 0 5
23407: PPUSH
23408: CALL 27165 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23412: LD_VAR 0 1
23416: PUSH
23417: LD_INT 254
23419: EQUAL
23420: PUSH
23421: LD_VAR 0 2
23425: PPUSH
23426: CALL_OW 264
23430: PUSH
23431: LD_INT 99
23433: EQUAL
23434: AND
23435: PUSH
23436: LD_VAR 0 3
23440: PPUSH
23441: CALL_OW 263
23445: PUSH
23446: LD_INT 3
23448: EQUAL
23449: AND
23450: IFFALSE 23466
// HackDestroyVehicle ( unit , selectedUnit ) ;
23452: LD_VAR 0 2
23456: PPUSH
23457: LD_VAR 0 3
23461: PPUSH
23462: CALL 25468 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23466: LD_VAR 0 1
23470: PUSH
23471: LD_INT 255
23473: EQUAL
23474: PUSH
23475: LD_VAR 0 2
23479: PPUSH
23480: CALL_OW 264
23484: PUSH
23485: LD_INT 14
23487: PUSH
23488: LD_INT 53
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: IN
23495: AND
23496: PUSH
23497: LD_VAR 0 4
23501: PPUSH
23502: LD_VAR 0 5
23506: PPUSH
23507: CALL_OW 488
23511: AND
23512: IFFALSE 23536
// CutTreeXYR ( unit , x , y , 12 ) ;
23514: LD_VAR 0 2
23518: PPUSH
23519: LD_VAR 0 4
23523: PPUSH
23524: LD_VAR 0 5
23528: PPUSH
23529: LD_INT 12
23531: PPUSH
23532: CALL 23631 0 4
// if cmd = 256 then
23536: LD_VAR 0 1
23540: PUSH
23541: LD_INT 256
23543: EQUAL
23544: IFFALSE 23565
// SetFactoryWaypoint ( unit , x , y ) ;
23546: LD_VAR 0 2
23550: PPUSH
23551: LD_VAR 0 4
23555: PPUSH
23556: LD_VAR 0 5
23560: PPUSH
23561: CALL 21546 0 3
// if cmd = 257 then
23565: LD_VAR 0 1
23569: PUSH
23570: LD_INT 257
23572: EQUAL
23573: IFFALSE 23594
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23575: LD_VAR 0 2
23579: PPUSH
23580: LD_VAR 0 4
23584: PPUSH
23585: LD_VAR 0 5
23589: PPUSH
23590: CALL 21908 0 3
// if cmd = 258 then
23594: LD_VAR 0 1
23598: PUSH
23599: LD_INT 258
23601: EQUAL
23602: IFFALSE 23626
// BurnTreeXYR ( unit , x , y , 8 ) ;
23604: LD_VAR 0 2
23608: PPUSH
23609: LD_VAR 0 4
23613: PPUSH
23614: LD_VAR 0 5
23618: PPUSH
23619: LD_INT 8
23621: PPUSH
23622: CALL 24025 0 4
// end ;
23626: LD_VAR 0 6
23630: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23631: LD_INT 0
23633: PPUSH
23634: PPUSH
23635: PPUSH
23636: PPUSH
23637: PPUSH
23638: PPUSH
23639: PPUSH
23640: PPUSH
23641: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
23642: LD_VAR 0 1
23646: PPUSH
23647: CALL_OW 302
23651: NOT
23652: PUSH
23653: LD_VAR 0 2
23657: PPUSH
23658: LD_VAR 0 3
23662: PPUSH
23663: CALL_OW 488
23667: NOT
23668: OR
23669: PUSH
23670: LD_VAR 0 4
23674: NOT
23675: OR
23676: IFFALSE 23680
// exit ;
23678: GO 24020
// list := [ ] ;
23680: LD_ADDR_VAR 0 13
23684: PUSH
23685: EMPTY
23686: ST_TO_ADDR
// if x - r < 0 then
23687: LD_VAR 0 2
23691: PUSH
23692: LD_VAR 0 4
23696: MINUS
23697: PUSH
23698: LD_INT 0
23700: LESS
23701: IFFALSE 23713
// min_x := 0 else
23703: LD_ADDR_VAR 0 7
23707: PUSH
23708: LD_INT 0
23710: ST_TO_ADDR
23711: GO 23729
// min_x := x - r ;
23713: LD_ADDR_VAR 0 7
23717: PUSH
23718: LD_VAR 0 2
23722: PUSH
23723: LD_VAR 0 4
23727: MINUS
23728: ST_TO_ADDR
// if y - r < 0 then
23729: LD_VAR 0 3
23733: PUSH
23734: LD_VAR 0 4
23738: MINUS
23739: PUSH
23740: LD_INT 0
23742: LESS
23743: IFFALSE 23755
// min_y := 0 else
23745: LD_ADDR_VAR 0 8
23749: PUSH
23750: LD_INT 0
23752: ST_TO_ADDR
23753: GO 23771
// min_y := y - r ;
23755: LD_ADDR_VAR 0 8
23759: PUSH
23760: LD_VAR 0 3
23764: PUSH
23765: LD_VAR 0 4
23769: MINUS
23770: ST_TO_ADDR
// max_x := x + r ;
23771: LD_ADDR_VAR 0 9
23775: PUSH
23776: LD_VAR 0 2
23780: PUSH
23781: LD_VAR 0 4
23785: PLUS
23786: ST_TO_ADDR
// max_y := y + r ;
23787: LD_ADDR_VAR 0 10
23791: PUSH
23792: LD_VAR 0 3
23796: PUSH
23797: LD_VAR 0 4
23801: PLUS
23802: ST_TO_ADDR
// for _x = min_x to max_x do
23803: LD_ADDR_VAR 0 11
23807: PUSH
23808: DOUBLE
23809: LD_VAR 0 7
23813: DEC
23814: ST_TO_ADDR
23815: LD_VAR 0 9
23819: PUSH
23820: FOR_TO
23821: IFFALSE 23938
// for _y = min_y to max_y do
23823: LD_ADDR_VAR 0 12
23827: PUSH
23828: DOUBLE
23829: LD_VAR 0 8
23833: DEC
23834: ST_TO_ADDR
23835: LD_VAR 0 10
23839: PUSH
23840: FOR_TO
23841: IFFALSE 23934
// begin if not ValidHex ( _x , _y ) then
23843: LD_VAR 0 11
23847: PPUSH
23848: LD_VAR 0 12
23852: PPUSH
23853: CALL_OW 488
23857: NOT
23858: IFFALSE 23862
// continue ;
23860: GO 23840
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23862: LD_VAR 0 11
23866: PPUSH
23867: LD_VAR 0 12
23871: PPUSH
23872: CALL_OW 351
23876: PUSH
23877: LD_VAR 0 11
23881: PPUSH
23882: LD_VAR 0 12
23886: PPUSH
23887: CALL_OW 554
23891: AND
23892: IFFALSE 23932
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23894: LD_ADDR_VAR 0 13
23898: PUSH
23899: LD_VAR 0 13
23903: PPUSH
23904: LD_VAR 0 13
23908: PUSH
23909: LD_INT 1
23911: PLUS
23912: PPUSH
23913: LD_VAR 0 11
23917: PUSH
23918: LD_VAR 0 12
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PPUSH
23927: CALL_OW 2
23931: ST_TO_ADDR
// end ;
23932: GO 23840
23934: POP
23935: POP
23936: GO 23820
23938: POP
23939: POP
// if not list then
23940: LD_VAR 0 13
23944: NOT
23945: IFFALSE 23949
// exit ;
23947: GO 24020
// for i in list do
23949: LD_ADDR_VAR 0 6
23953: PUSH
23954: LD_VAR 0 13
23958: PUSH
23959: FOR_IN
23960: IFFALSE 24018
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23962: LD_VAR 0 1
23966: PPUSH
23967: LD_STRING M
23969: PUSH
23970: LD_VAR 0 6
23974: PUSH
23975: LD_INT 1
23977: ARRAY
23978: PUSH
23979: LD_VAR 0 6
23983: PUSH
23984: LD_INT 2
23986: ARRAY
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: LD_INT 0
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: PUSH
24009: EMPTY
24010: LIST
24011: PPUSH
24012: CALL_OW 447
24016: GO 23959
24018: POP
24019: POP
// end ;
24020: LD_VAR 0 5
24024: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24025: LD_INT 0
24027: PPUSH
24028: PPUSH
24029: PPUSH
24030: PPUSH
24031: PPUSH
24032: PPUSH
24033: PPUSH
24034: PPUSH
24035: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
24036: LD_VAR 0 1
24040: PPUSH
24041: CALL_OW 302
24045: NOT
24046: PUSH
24047: LD_VAR 0 2
24051: PPUSH
24052: LD_VAR 0 3
24056: PPUSH
24057: CALL_OW 488
24061: NOT
24062: OR
24063: PUSH
24064: LD_VAR 0 4
24068: NOT
24069: OR
24070: IFFALSE 24074
// exit ;
24072: GO 24422
// list := [ ] ;
24074: LD_ADDR_VAR 0 13
24078: PUSH
24079: EMPTY
24080: ST_TO_ADDR
// if x - r < 0 then
24081: LD_VAR 0 2
24085: PUSH
24086: LD_VAR 0 4
24090: MINUS
24091: PUSH
24092: LD_INT 0
24094: LESS
24095: IFFALSE 24107
// min_x := 0 else
24097: LD_ADDR_VAR 0 7
24101: PUSH
24102: LD_INT 0
24104: ST_TO_ADDR
24105: GO 24123
// min_x := x - r ;
24107: LD_ADDR_VAR 0 7
24111: PUSH
24112: LD_VAR 0 2
24116: PUSH
24117: LD_VAR 0 4
24121: MINUS
24122: ST_TO_ADDR
// if y - r < 0 then
24123: LD_VAR 0 3
24127: PUSH
24128: LD_VAR 0 4
24132: MINUS
24133: PUSH
24134: LD_INT 0
24136: LESS
24137: IFFALSE 24149
// min_y := 0 else
24139: LD_ADDR_VAR 0 8
24143: PUSH
24144: LD_INT 0
24146: ST_TO_ADDR
24147: GO 24165
// min_y := y - r ;
24149: LD_ADDR_VAR 0 8
24153: PUSH
24154: LD_VAR 0 3
24158: PUSH
24159: LD_VAR 0 4
24163: MINUS
24164: ST_TO_ADDR
// max_x := x + r ;
24165: LD_ADDR_VAR 0 9
24169: PUSH
24170: LD_VAR 0 2
24174: PUSH
24175: LD_VAR 0 4
24179: PLUS
24180: ST_TO_ADDR
// max_y := y + r ;
24181: LD_ADDR_VAR 0 10
24185: PUSH
24186: LD_VAR 0 3
24190: PUSH
24191: LD_VAR 0 4
24195: PLUS
24196: ST_TO_ADDR
// for _x = min_x to max_x do
24197: LD_ADDR_VAR 0 11
24201: PUSH
24202: DOUBLE
24203: LD_VAR 0 7
24207: DEC
24208: ST_TO_ADDR
24209: LD_VAR 0 9
24213: PUSH
24214: FOR_TO
24215: IFFALSE 24332
// for _y = min_y to max_y do
24217: LD_ADDR_VAR 0 12
24221: PUSH
24222: DOUBLE
24223: LD_VAR 0 8
24227: DEC
24228: ST_TO_ADDR
24229: LD_VAR 0 10
24233: PUSH
24234: FOR_TO
24235: IFFALSE 24328
// begin if not ValidHex ( _x , _y ) then
24237: LD_VAR 0 11
24241: PPUSH
24242: LD_VAR 0 12
24246: PPUSH
24247: CALL_OW 488
24251: NOT
24252: IFFALSE 24256
// continue ;
24254: GO 24234
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24256: LD_VAR 0 11
24260: PPUSH
24261: LD_VAR 0 12
24265: PPUSH
24266: CALL_OW 351
24270: PUSH
24271: LD_VAR 0 11
24275: PPUSH
24276: LD_VAR 0 12
24280: PPUSH
24281: CALL_OW 554
24285: AND
24286: IFFALSE 24326
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24288: LD_ADDR_VAR 0 13
24292: PUSH
24293: LD_VAR 0 13
24297: PPUSH
24298: LD_VAR 0 13
24302: PUSH
24303: LD_INT 1
24305: PLUS
24306: PPUSH
24307: LD_VAR 0 11
24311: PUSH
24312: LD_VAR 0 12
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PPUSH
24321: CALL_OW 2
24325: ST_TO_ADDR
// end ;
24326: GO 24234
24328: POP
24329: POP
24330: GO 24214
24332: POP
24333: POP
// if not list then
24334: LD_VAR 0 13
24338: NOT
24339: IFFALSE 24343
// exit ;
24341: GO 24422
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24343: LD_ADDR_VAR 0 13
24347: PUSH
24348: LD_VAR 0 1
24352: PPUSH
24353: LD_VAR 0 13
24357: PPUSH
24358: LD_INT 1
24360: PPUSH
24361: LD_INT 1
24363: PPUSH
24364: CALL 33035 0 4
24368: ST_TO_ADDR
// ComStop ( flame ) ;
24369: LD_VAR 0 1
24373: PPUSH
24374: CALL_OW 141
// for i in list do
24378: LD_ADDR_VAR 0 6
24382: PUSH
24383: LD_VAR 0 13
24387: PUSH
24388: FOR_IN
24389: IFFALSE 24420
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24391: LD_VAR 0 1
24395: PPUSH
24396: LD_VAR 0 6
24400: PUSH
24401: LD_INT 1
24403: ARRAY
24404: PPUSH
24405: LD_VAR 0 6
24409: PUSH
24410: LD_INT 2
24412: ARRAY
24413: PPUSH
24414: CALL_OW 176
24418: GO 24388
24420: POP
24421: POP
// end ;
24422: LD_VAR 0 5
24426: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24427: LD_EXP 80
24431: NOT
24432: IFFALSE 24482
24434: GO 24436
24436: DISABLE
// begin initHack := true ;
24437: LD_ADDR_EXP 80
24441: PUSH
24442: LD_INT 1
24444: ST_TO_ADDR
// hackTanks := [ ] ;
24445: LD_ADDR_EXP 81
24449: PUSH
24450: EMPTY
24451: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24452: LD_ADDR_EXP 82
24456: PUSH
24457: EMPTY
24458: ST_TO_ADDR
// hackLimit := 3 ;
24459: LD_ADDR_EXP 83
24463: PUSH
24464: LD_INT 3
24466: ST_TO_ADDR
// hackDist := 12 ;
24467: LD_ADDR_EXP 84
24471: PUSH
24472: LD_INT 12
24474: ST_TO_ADDR
// hackCounter := [ ] ;
24475: LD_ADDR_EXP 85
24479: PUSH
24480: EMPTY
24481: ST_TO_ADDR
// end ;
24482: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24483: LD_EXP 80
24487: PUSH
24488: LD_INT 34
24490: PUSH
24491: LD_INT 99
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PPUSH
24498: CALL_OW 69
24502: AND
24503: IFFALSE 24756
24505: GO 24507
24507: DISABLE
24508: LD_INT 0
24510: PPUSH
24511: PPUSH
// begin enable ;
24512: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24513: LD_ADDR_VAR 0 1
24517: PUSH
24518: LD_INT 34
24520: PUSH
24521: LD_INT 99
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PPUSH
24528: CALL_OW 69
24532: PUSH
24533: FOR_IN
24534: IFFALSE 24754
// begin if not i in hackTanks then
24536: LD_VAR 0 1
24540: PUSH
24541: LD_EXP 81
24545: IN
24546: NOT
24547: IFFALSE 24630
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24549: LD_ADDR_EXP 81
24553: PUSH
24554: LD_EXP 81
24558: PPUSH
24559: LD_EXP 81
24563: PUSH
24564: LD_INT 1
24566: PLUS
24567: PPUSH
24568: LD_VAR 0 1
24572: PPUSH
24573: CALL_OW 1
24577: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24578: LD_ADDR_EXP 82
24582: PUSH
24583: LD_EXP 82
24587: PPUSH
24588: LD_EXP 82
24592: PUSH
24593: LD_INT 1
24595: PLUS
24596: PPUSH
24597: EMPTY
24598: PPUSH
24599: CALL_OW 1
24603: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24604: LD_ADDR_EXP 85
24608: PUSH
24609: LD_EXP 85
24613: PPUSH
24614: LD_EXP 85
24618: PUSH
24619: LD_INT 1
24621: PLUS
24622: PPUSH
24623: EMPTY
24624: PPUSH
24625: CALL_OW 1
24629: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24630: LD_VAR 0 1
24634: PPUSH
24635: CALL_OW 302
24639: NOT
24640: IFFALSE 24653
// begin HackUnlinkAll ( i ) ;
24642: LD_VAR 0 1
24646: PPUSH
24647: CALL 24759 0 1
// continue ;
24651: GO 24533
// end ; HackCheckCapturedStatus ( i ) ;
24653: LD_VAR 0 1
24657: PPUSH
24658: CALL 25202 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24662: LD_ADDR_VAR 0 2
24666: PUSH
24667: LD_INT 81
24669: PUSH
24670: LD_VAR 0 1
24674: PPUSH
24675: CALL_OW 255
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 33
24686: PUSH
24687: LD_INT 3
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 91
24696: PUSH
24697: LD_VAR 0 1
24701: PUSH
24702: LD_EXP 84
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 50
24714: PUSH
24715: EMPTY
24716: LIST
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: PPUSH
24724: CALL_OW 69
24728: ST_TO_ADDR
// if not tmp then
24729: LD_VAR 0 2
24733: NOT
24734: IFFALSE 24738
// continue ;
24736: GO 24533
// HackLink ( i , tmp ) ;
24738: LD_VAR 0 1
24742: PPUSH
24743: LD_VAR 0 2
24747: PPUSH
24748: CALL 24895 0 2
// end ;
24752: GO 24533
24754: POP
24755: POP
// end ;
24756: PPOPN 2
24758: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24759: LD_INT 0
24761: PPUSH
24762: PPUSH
24763: PPUSH
// if not hack in hackTanks then
24764: LD_VAR 0 1
24768: PUSH
24769: LD_EXP 81
24773: IN
24774: NOT
24775: IFFALSE 24779
// exit ;
24777: GO 24890
// index := GetElementIndex ( hackTanks , hack ) ;
24779: LD_ADDR_VAR 0 4
24783: PUSH
24784: LD_EXP 81
24788: PPUSH
24789: LD_VAR 0 1
24793: PPUSH
24794: CALL 32332 0 2
24798: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24799: LD_EXP 82
24803: PUSH
24804: LD_VAR 0 4
24808: ARRAY
24809: IFFALSE 24890
// begin for i in hackTanksCaptured [ index ] do
24811: LD_ADDR_VAR 0 3
24815: PUSH
24816: LD_EXP 82
24820: PUSH
24821: LD_VAR 0 4
24825: ARRAY
24826: PUSH
24827: FOR_IN
24828: IFFALSE 24854
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24830: LD_VAR 0 3
24834: PUSH
24835: LD_INT 1
24837: ARRAY
24838: PPUSH
24839: LD_VAR 0 3
24843: PUSH
24844: LD_INT 2
24846: ARRAY
24847: PPUSH
24848: CALL_OW 235
24852: GO 24827
24854: POP
24855: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24856: LD_ADDR_EXP 82
24860: PUSH
24861: LD_EXP 82
24865: PPUSH
24866: LD_VAR 0 4
24870: PPUSH
24871: EMPTY
24872: PPUSH
24873: CALL_OW 1
24877: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24878: LD_VAR 0 1
24882: PPUSH
24883: LD_INT 0
24885: PPUSH
24886: CALL_OW 505
// end ; end ;
24890: LD_VAR 0 2
24894: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24895: LD_INT 0
24897: PPUSH
24898: PPUSH
24899: PPUSH
// if not hack in hackTanks or not vehicles then
24900: LD_VAR 0 1
24904: PUSH
24905: LD_EXP 81
24909: IN
24910: NOT
24911: PUSH
24912: LD_VAR 0 2
24916: NOT
24917: OR
24918: IFFALSE 24922
// exit ;
24920: GO 25197
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24922: LD_ADDR_VAR 0 2
24926: PUSH
24927: LD_VAR 0 1
24931: PPUSH
24932: LD_VAR 0 2
24936: PPUSH
24937: LD_INT 1
24939: PPUSH
24940: LD_INT 1
24942: PPUSH
24943: CALL 32982 0 4
24947: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24948: LD_ADDR_VAR 0 5
24952: PUSH
24953: LD_EXP 81
24957: PPUSH
24958: LD_VAR 0 1
24962: PPUSH
24963: CALL 32332 0 2
24967: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24968: LD_EXP 82
24972: PUSH
24973: LD_VAR 0 5
24977: ARRAY
24978: PUSH
24979: LD_EXP 83
24983: LESS
24984: IFFALSE 25173
// begin for i := 1 to vehicles do
24986: LD_ADDR_VAR 0 4
24990: PUSH
24991: DOUBLE
24992: LD_INT 1
24994: DEC
24995: ST_TO_ADDR
24996: LD_VAR 0 2
25000: PUSH
25001: FOR_TO
25002: IFFALSE 25171
// begin if hackTanksCaptured [ index ] = hackLimit then
25004: LD_EXP 82
25008: PUSH
25009: LD_VAR 0 5
25013: ARRAY
25014: PUSH
25015: LD_EXP 83
25019: EQUAL
25020: IFFALSE 25024
// break ;
25022: GO 25171
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25024: LD_ADDR_EXP 85
25028: PUSH
25029: LD_EXP 85
25033: PPUSH
25034: LD_VAR 0 5
25038: PPUSH
25039: LD_EXP 85
25043: PUSH
25044: LD_VAR 0 5
25048: ARRAY
25049: PUSH
25050: LD_INT 1
25052: PLUS
25053: PPUSH
25054: CALL_OW 1
25058: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25059: LD_ADDR_EXP 82
25063: PUSH
25064: LD_EXP 82
25068: PPUSH
25069: LD_VAR 0 5
25073: PUSH
25074: LD_EXP 82
25078: PUSH
25079: LD_VAR 0 5
25083: ARRAY
25084: PUSH
25085: LD_INT 1
25087: PLUS
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PPUSH
25093: LD_VAR 0 2
25097: PUSH
25098: LD_VAR 0 4
25102: ARRAY
25103: PUSH
25104: LD_VAR 0 2
25108: PUSH
25109: LD_VAR 0 4
25113: ARRAY
25114: PPUSH
25115: CALL_OW 255
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PPUSH
25124: CALL 32547 0 3
25128: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25129: LD_VAR 0 2
25133: PUSH
25134: LD_VAR 0 4
25138: ARRAY
25139: PPUSH
25140: LD_VAR 0 1
25144: PPUSH
25145: CALL_OW 255
25149: PPUSH
25150: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25154: LD_VAR 0 2
25158: PUSH
25159: LD_VAR 0 4
25163: ARRAY
25164: PPUSH
25165: CALL_OW 141
// end ;
25169: GO 25001
25171: POP
25172: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25173: LD_VAR 0 1
25177: PPUSH
25178: LD_EXP 82
25182: PUSH
25183: LD_VAR 0 5
25187: ARRAY
25188: PUSH
25189: LD_INT 0
25191: PLUS
25192: PPUSH
25193: CALL_OW 505
// end ;
25197: LD_VAR 0 3
25201: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25202: LD_INT 0
25204: PPUSH
25205: PPUSH
25206: PPUSH
25207: PPUSH
// if not hack in hackTanks then
25208: LD_VAR 0 1
25212: PUSH
25213: LD_EXP 81
25217: IN
25218: NOT
25219: IFFALSE 25223
// exit ;
25221: GO 25463
// index := GetElementIndex ( hackTanks , hack ) ;
25223: LD_ADDR_VAR 0 4
25227: PUSH
25228: LD_EXP 81
25232: PPUSH
25233: LD_VAR 0 1
25237: PPUSH
25238: CALL 32332 0 2
25242: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25243: LD_ADDR_VAR 0 3
25247: PUSH
25248: DOUBLE
25249: LD_EXP 82
25253: PUSH
25254: LD_VAR 0 4
25258: ARRAY
25259: INC
25260: ST_TO_ADDR
25261: LD_INT 1
25263: PUSH
25264: FOR_DOWNTO
25265: IFFALSE 25437
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25267: LD_ADDR_VAR 0 5
25271: PUSH
25272: LD_EXP 82
25276: PUSH
25277: LD_VAR 0 4
25281: ARRAY
25282: PUSH
25283: LD_VAR 0 3
25287: ARRAY
25288: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25289: LD_VAR 0 5
25293: PUSH
25294: LD_INT 1
25296: ARRAY
25297: PPUSH
25298: CALL_OW 302
25302: NOT
25303: PUSH
25304: LD_VAR 0 5
25308: PUSH
25309: LD_INT 1
25311: ARRAY
25312: PPUSH
25313: CALL_OW 255
25317: PUSH
25318: LD_VAR 0 1
25322: PPUSH
25323: CALL_OW 255
25327: NONEQUAL
25328: OR
25329: IFFALSE 25435
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25331: LD_VAR 0 5
25335: PUSH
25336: LD_INT 1
25338: ARRAY
25339: PPUSH
25340: CALL_OW 305
25344: PUSH
25345: LD_VAR 0 5
25349: PUSH
25350: LD_INT 1
25352: ARRAY
25353: PPUSH
25354: CALL_OW 255
25358: PUSH
25359: LD_VAR 0 1
25363: PPUSH
25364: CALL_OW 255
25368: EQUAL
25369: AND
25370: IFFALSE 25394
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25372: LD_VAR 0 5
25376: PUSH
25377: LD_INT 1
25379: ARRAY
25380: PPUSH
25381: LD_VAR 0 5
25385: PUSH
25386: LD_INT 2
25388: ARRAY
25389: PPUSH
25390: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25394: LD_ADDR_EXP 82
25398: PUSH
25399: LD_EXP 82
25403: PPUSH
25404: LD_VAR 0 4
25408: PPUSH
25409: LD_EXP 82
25413: PUSH
25414: LD_VAR 0 4
25418: ARRAY
25419: PPUSH
25420: LD_VAR 0 3
25424: PPUSH
25425: CALL_OW 3
25429: PPUSH
25430: CALL_OW 1
25434: ST_TO_ADDR
// end ; end ;
25435: GO 25264
25437: POP
25438: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25439: LD_VAR 0 1
25443: PPUSH
25444: LD_EXP 82
25448: PUSH
25449: LD_VAR 0 4
25453: ARRAY
25454: PUSH
25455: LD_INT 0
25457: PLUS
25458: PPUSH
25459: CALL_OW 505
// end ;
25463: LD_VAR 0 2
25467: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25468: LD_INT 0
25470: PPUSH
25471: PPUSH
25472: PPUSH
25473: PPUSH
// if not hack in hackTanks then
25474: LD_VAR 0 1
25478: PUSH
25479: LD_EXP 81
25483: IN
25484: NOT
25485: IFFALSE 25489
// exit ;
25487: GO 25574
// index := GetElementIndex ( hackTanks , hack ) ;
25489: LD_ADDR_VAR 0 5
25493: PUSH
25494: LD_EXP 81
25498: PPUSH
25499: LD_VAR 0 1
25503: PPUSH
25504: CALL 32332 0 2
25508: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25509: LD_ADDR_VAR 0 4
25513: PUSH
25514: DOUBLE
25515: LD_INT 1
25517: DEC
25518: ST_TO_ADDR
25519: LD_EXP 82
25523: PUSH
25524: LD_VAR 0 5
25528: ARRAY
25529: PUSH
25530: FOR_TO
25531: IFFALSE 25572
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25533: LD_EXP 82
25537: PUSH
25538: LD_VAR 0 5
25542: ARRAY
25543: PUSH
25544: LD_VAR 0 4
25548: ARRAY
25549: PUSH
25550: LD_INT 1
25552: ARRAY
25553: PUSH
25554: LD_VAR 0 2
25558: EQUAL
25559: IFFALSE 25570
// KillUnit ( vehicle ) ;
25561: LD_VAR 0 2
25565: PPUSH
25566: CALL_OW 66
25570: GO 25530
25572: POP
25573: POP
// end ;
25574: LD_VAR 0 3
25578: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25579: LD_EXP 86
25583: NOT
25584: IFFALSE 25619
25586: GO 25588
25588: DISABLE
// begin initMiner := true ;
25589: LD_ADDR_EXP 86
25593: PUSH
25594: LD_INT 1
25596: ST_TO_ADDR
// minersList := [ ] ;
25597: LD_ADDR_EXP 87
25601: PUSH
25602: EMPTY
25603: ST_TO_ADDR
// minerMinesList := [ ] ;
25604: LD_ADDR_EXP 88
25608: PUSH
25609: EMPTY
25610: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25611: LD_ADDR_EXP 89
25615: PUSH
25616: LD_INT 5
25618: ST_TO_ADDR
// end ;
25619: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25620: LD_EXP 86
25624: PUSH
25625: LD_INT 34
25627: PUSH
25628: LD_INT 81
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PPUSH
25635: CALL_OW 69
25639: AND
25640: IFFALSE 26101
25642: GO 25644
25644: DISABLE
25645: LD_INT 0
25647: PPUSH
25648: PPUSH
25649: PPUSH
25650: PPUSH
// begin enable ;
25651: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25652: LD_ADDR_VAR 0 1
25656: PUSH
25657: LD_INT 34
25659: PUSH
25660: LD_INT 81
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PPUSH
25667: CALL_OW 69
25671: PUSH
25672: FOR_IN
25673: IFFALSE 25745
// begin if not i in minersList then
25675: LD_VAR 0 1
25679: PUSH
25680: LD_EXP 87
25684: IN
25685: NOT
25686: IFFALSE 25743
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25688: LD_ADDR_EXP 87
25692: PUSH
25693: LD_EXP 87
25697: PPUSH
25698: LD_EXP 87
25702: PUSH
25703: LD_INT 1
25705: PLUS
25706: PPUSH
25707: LD_VAR 0 1
25711: PPUSH
25712: CALL_OW 1
25716: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25717: LD_ADDR_EXP 88
25721: PUSH
25722: LD_EXP 88
25726: PPUSH
25727: LD_EXP 88
25731: PUSH
25732: LD_INT 1
25734: PLUS
25735: PPUSH
25736: EMPTY
25737: PPUSH
25738: CALL_OW 1
25742: ST_TO_ADDR
// end end ;
25743: GO 25672
25745: POP
25746: POP
// for i := minerMinesList downto 1 do
25747: LD_ADDR_VAR 0 1
25751: PUSH
25752: DOUBLE
25753: LD_EXP 88
25757: INC
25758: ST_TO_ADDR
25759: LD_INT 1
25761: PUSH
25762: FOR_DOWNTO
25763: IFFALSE 26099
// begin if IsLive ( minersList [ i ] ) then
25765: LD_EXP 87
25769: PUSH
25770: LD_VAR 0 1
25774: ARRAY
25775: PPUSH
25776: CALL_OW 300
25780: IFFALSE 25808
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25782: LD_EXP 87
25786: PUSH
25787: LD_VAR 0 1
25791: ARRAY
25792: PPUSH
25793: LD_EXP 88
25797: PUSH
25798: LD_VAR 0 1
25802: ARRAY
25803: PPUSH
25804: CALL_OW 505
// if not minerMinesList [ i ] then
25808: LD_EXP 88
25812: PUSH
25813: LD_VAR 0 1
25817: ARRAY
25818: NOT
25819: IFFALSE 25823
// continue ;
25821: GO 25762
// for j := minerMinesList [ i ] downto 1 do
25823: LD_ADDR_VAR 0 2
25827: PUSH
25828: DOUBLE
25829: LD_EXP 88
25833: PUSH
25834: LD_VAR 0 1
25838: ARRAY
25839: INC
25840: ST_TO_ADDR
25841: LD_INT 1
25843: PUSH
25844: FOR_DOWNTO
25845: IFFALSE 26095
// begin side := GetSide ( minersList [ i ] ) ;
25847: LD_ADDR_VAR 0 3
25851: PUSH
25852: LD_EXP 87
25856: PUSH
25857: LD_VAR 0 1
25861: ARRAY
25862: PPUSH
25863: CALL_OW 255
25867: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25868: LD_ADDR_VAR 0 4
25872: PUSH
25873: LD_EXP 88
25877: PUSH
25878: LD_VAR 0 1
25882: ARRAY
25883: PUSH
25884: LD_VAR 0 2
25888: ARRAY
25889: PUSH
25890: LD_INT 1
25892: ARRAY
25893: PPUSH
25894: LD_EXP 88
25898: PUSH
25899: LD_VAR 0 1
25903: ARRAY
25904: PUSH
25905: LD_VAR 0 2
25909: ARRAY
25910: PUSH
25911: LD_INT 2
25913: ARRAY
25914: PPUSH
25915: CALL_OW 428
25919: ST_TO_ADDR
// if not tmp then
25920: LD_VAR 0 4
25924: NOT
25925: IFFALSE 25929
// continue ;
25927: GO 25844
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25929: LD_VAR 0 4
25933: PUSH
25934: LD_INT 81
25936: PUSH
25937: LD_VAR 0 3
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PPUSH
25946: CALL_OW 69
25950: IN
25951: PUSH
25952: LD_EXP 88
25956: PUSH
25957: LD_VAR 0 1
25961: ARRAY
25962: PUSH
25963: LD_VAR 0 2
25967: ARRAY
25968: PUSH
25969: LD_INT 1
25971: ARRAY
25972: PPUSH
25973: LD_EXP 88
25977: PUSH
25978: LD_VAR 0 1
25982: ARRAY
25983: PUSH
25984: LD_VAR 0 2
25988: ARRAY
25989: PUSH
25990: LD_INT 2
25992: ARRAY
25993: PPUSH
25994: CALL_OW 458
25998: AND
25999: IFFALSE 26093
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26001: LD_EXP 88
26005: PUSH
26006: LD_VAR 0 1
26010: ARRAY
26011: PUSH
26012: LD_VAR 0 2
26016: ARRAY
26017: PUSH
26018: LD_INT 1
26020: ARRAY
26021: PPUSH
26022: LD_EXP 88
26026: PUSH
26027: LD_VAR 0 1
26031: ARRAY
26032: PUSH
26033: LD_VAR 0 2
26037: ARRAY
26038: PUSH
26039: LD_INT 2
26041: ARRAY
26042: PPUSH
26043: LD_VAR 0 3
26047: PPUSH
26048: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26052: LD_ADDR_EXP 88
26056: PUSH
26057: LD_EXP 88
26061: PPUSH
26062: LD_VAR 0 1
26066: PPUSH
26067: LD_EXP 88
26071: PUSH
26072: LD_VAR 0 1
26076: ARRAY
26077: PPUSH
26078: LD_VAR 0 2
26082: PPUSH
26083: CALL_OW 3
26087: PPUSH
26088: CALL_OW 1
26092: ST_TO_ADDR
// end ; end ;
26093: GO 25844
26095: POP
26096: POP
// end ;
26097: GO 25762
26099: POP
26100: POP
// end ;
26101: PPOPN 4
26103: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26104: LD_INT 0
26106: PPUSH
26107: PPUSH
// result := false ;
26108: LD_ADDR_VAR 0 4
26112: PUSH
26113: LD_INT 0
26115: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26116: LD_VAR 0 1
26120: PPUSH
26121: CALL_OW 264
26125: PUSH
26126: LD_INT 81
26128: EQUAL
26129: NOT
26130: IFFALSE 26134
// exit ;
26132: GO 26374
// index := GetElementIndex ( minersList , unit ) ;
26134: LD_ADDR_VAR 0 5
26138: PUSH
26139: LD_EXP 87
26143: PPUSH
26144: LD_VAR 0 1
26148: PPUSH
26149: CALL 32332 0 2
26153: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26154: LD_EXP 88
26158: PUSH
26159: LD_VAR 0 5
26163: ARRAY
26164: PUSH
26165: LD_EXP 89
26169: GREATEREQUAL
26170: IFFALSE 26174
// exit ;
26172: GO 26374
// ComMoveXY ( unit , x , y ) ;
26174: LD_VAR 0 1
26178: PPUSH
26179: LD_VAR 0 2
26183: PPUSH
26184: LD_VAR 0 3
26188: PPUSH
26189: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26193: LD_INT 35
26195: PPUSH
26196: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26200: LD_VAR 0 1
26204: PPUSH
26205: LD_VAR 0 2
26209: PPUSH
26210: LD_VAR 0 3
26214: PPUSH
26215: CALL 64084 0 3
26219: NOT
26220: PUSH
26221: LD_VAR 0 1
26225: PPUSH
26226: CALL_OW 314
26230: AND
26231: IFFALSE 26235
// exit ;
26233: GO 26374
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26235: LD_VAR 0 2
26239: PPUSH
26240: LD_VAR 0 3
26244: PPUSH
26245: CALL_OW 428
26249: PUSH
26250: LD_VAR 0 1
26254: EQUAL
26255: PUSH
26256: LD_VAR 0 1
26260: PPUSH
26261: CALL_OW 314
26265: NOT
26266: AND
26267: IFFALSE 26193
// PlaySoundXY ( x , y , PlantMine ) ;
26269: LD_VAR 0 2
26273: PPUSH
26274: LD_VAR 0 3
26278: PPUSH
26279: LD_STRING PlantMine
26281: PPUSH
26282: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26286: LD_VAR 0 2
26290: PPUSH
26291: LD_VAR 0 3
26295: PPUSH
26296: LD_VAR 0 1
26300: PPUSH
26301: CALL_OW 255
26305: PPUSH
26306: LD_INT 0
26308: PPUSH
26309: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26313: LD_ADDR_EXP 88
26317: PUSH
26318: LD_EXP 88
26322: PPUSH
26323: LD_VAR 0 5
26327: PUSH
26328: LD_EXP 88
26332: PUSH
26333: LD_VAR 0 5
26337: ARRAY
26338: PUSH
26339: LD_INT 1
26341: PLUS
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PPUSH
26347: LD_VAR 0 2
26351: PUSH
26352: LD_VAR 0 3
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PPUSH
26361: CALL 32547 0 3
26365: ST_TO_ADDR
// result := true ;
26366: LD_ADDR_VAR 0 4
26370: PUSH
26371: LD_INT 1
26373: ST_TO_ADDR
// end ;
26374: LD_VAR 0 4
26378: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26379: LD_INT 0
26381: PPUSH
26382: PPUSH
26383: PPUSH
// if not unit in minersList then
26384: LD_VAR 0 1
26388: PUSH
26389: LD_EXP 87
26393: IN
26394: NOT
26395: IFFALSE 26399
// exit ;
26397: GO 26791
// index := GetElementIndex ( minersList , unit ) ;
26399: LD_ADDR_VAR 0 6
26403: PUSH
26404: LD_EXP 87
26408: PPUSH
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL 32332 0 2
26418: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26419: LD_ADDR_VAR 0 5
26423: PUSH
26424: DOUBLE
26425: LD_EXP 88
26429: PUSH
26430: LD_VAR 0 6
26434: ARRAY
26435: INC
26436: ST_TO_ADDR
26437: LD_INT 1
26439: PUSH
26440: FOR_DOWNTO
26441: IFFALSE 26602
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26443: LD_EXP 88
26447: PUSH
26448: LD_VAR 0 6
26452: ARRAY
26453: PUSH
26454: LD_VAR 0 5
26458: ARRAY
26459: PUSH
26460: LD_INT 1
26462: ARRAY
26463: PUSH
26464: LD_VAR 0 2
26468: EQUAL
26469: PUSH
26470: LD_EXP 88
26474: PUSH
26475: LD_VAR 0 6
26479: ARRAY
26480: PUSH
26481: LD_VAR 0 5
26485: ARRAY
26486: PUSH
26487: LD_INT 2
26489: ARRAY
26490: PUSH
26491: LD_VAR 0 3
26495: EQUAL
26496: AND
26497: IFFALSE 26600
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26499: LD_EXP 88
26503: PUSH
26504: LD_VAR 0 6
26508: ARRAY
26509: PUSH
26510: LD_VAR 0 5
26514: ARRAY
26515: PUSH
26516: LD_INT 1
26518: ARRAY
26519: PPUSH
26520: LD_EXP 88
26524: PUSH
26525: LD_VAR 0 6
26529: ARRAY
26530: PUSH
26531: LD_VAR 0 5
26535: ARRAY
26536: PUSH
26537: LD_INT 2
26539: ARRAY
26540: PPUSH
26541: LD_VAR 0 1
26545: PPUSH
26546: CALL_OW 255
26550: PPUSH
26551: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26555: LD_ADDR_EXP 88
26559: PUSH
26560: LD_EXP 88
26564: PPUSH
26565: LD_VAR 0 6
26569: PPUSH
26570: LD_EXP 88
26574: PUSH
26575: LD_VAR 0 6
26579: ARRAY
26580: PPUSH
26581: LD_VAR 0 5
26585: PPUSH
26586: CALL_OW 3
26590: PPUSH
26591: CALL_OW 1
26595: ST_TO_ADDR
// exit ;
26596: POP
26597: POP
26598: GO 26791
// end ; end ;
26600: GO 26440
26602: POP
26603: POP
// for i := minerMinesList [ index ] downto 1 do
26604: LD_ADDR_VAR 0 5
26608: PUSH
26609: DOUBLE
26610: LD_EXP 88
26614: PUSH
26615: LD_VAR 0 6
26619: ARRAY
26620: INC
26621: ST_TO_ADDR
26622: LD_INT 1
26624: PUSH
26625: FOR_DOWNTO
26626: IFFALSE 26789
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26628: LD_EXP 88
26632: PUSH
26633: LD_VAR 0 6
26637: ARRAY
26638: PUSH
26639: LD_VAR 0 5
26643: ARRAY
26644: PUSH
26645: LD_INT 1
26647: ARRAY
26648: PPUSH
26649: LD_EXP 88
26653: PUSH
26654: LD_VAR 0 6
26658: ARRAY
26659: PUSH
26660: LD_VAR 0 5
26664: ARRAY
26665: PUSH
26666: LD_INT 2
26668: ARRAY
26669: PPUSH
26670: LD_VAR 0 2
26674: PPUSH
26675: LD_VAR 0 3
26679: PPUSH
26680: CALL_OW 298
26684: PUSH
26685: LD_INT 6
26687: LESS
26688: IFFALSE 26787
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26690: LD_EXP 88
26694: PUSH
26695: LD_VAR 0 6
26699: ARRAY
26700: PUSH
26701: LD_VAR 0 5
26705: ARRAY
26706: PUSH
26707: LD_INT 1
26709: ARRAY
26710: PPUSH
26711: LD_EXP 88
26715: PUSH
26716: LD_VAR 0 6
26720: ARRAY
26721: PUSH
26722: LD_VAR 0 5
26726: ARRAY
26727: PUSH
26728: LD_INT 2
26730: ARRAY
26731: PPUSH
26732: LD_VAR 0 1
26736: PPUSH
26737: CALL_OW 255
26741: PPUSH
26742: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26746: LD_ADDR_EXP 88
26750: PUSH
26751: LD_EXP 88
26755: PPUSH
26756: LD_VAR 0 6
26760: PPUSH
26761: LD_EXP 88
26765: PUSH
26766: LD_VAR 0 6
26770: ARRAY
26771: PPUSH
26772: LD_VAR 0 5
26776: PPUSH
26777: CALL_OW 3
26781: PPUSH
26782: CALL_OW 1
26786: ST_TO_ADDR
// end ; end ;
26787: GO 26625
26789: POP
26790: POP
// end ;
26791: LD_VAR 0 4
26795: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26796: LD_INT 0
26798: PPUSH
26799: PPUSH
26800: PPUSH
26801: PPUSH
26802: PPUSH
26803: PPUSH
26804: PPUSH
26805: PPUSH
26806: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26807: LD_VAR 0 1
26811: PPUSH
26812: CALL_OW 264
26816: PUSH
26817: LD_INT 81
26819: EQUAL
26820: NOT
26821: PUSH
26822: LD_VAR 0 1
26826: PUSH
26827: LD_EXP 87
26831: IN
26832: NOT
26833: OR
26834: IFFALSE 26838
// exit ;
26836: GO 27160
// index := GetElementIndex ( minersList , unit ) ;
26838: LD_ADDR_VAR 0 6
26842: PUSH
26843: LD_EXP 87
26847: PPUSH
26848: LD_VAR 0 1
26852: PPUSH
26853: CALL 32332 0 2
26857: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26858: LD_ADDR_VAR 0 8
26862: PUSH
26863: LD_EXP 89
26867: PUSH
26868: LD_EXP 88
26872: PUSH
26873: LD_VAR 0 6
26877: ARRAY
26878: MINUS
26879: ST_TO_ADDR
// if not minesFreeAmount then
26880: LD_VAR 0 8
26884: NOT
26885: IFFALSE 26889
// exit ;
26887: GO 27160
// tmp := [ ] ;
26889: LD_ADDR_VAR 0 7
26893: PUSH
26894: EMPTY
26895: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26896: LD_ADDR_VAR 0 5
26900: PUSH
26901: DOUBLE
26902: LD_INT 1
26904: DEC
26905: ST_TO_ADDR
26906: LD_VAR 0 8
26910: PUSH
26911: FOR_TO
26912: IFFALSE 27107
// begin _d := rand ( 0 , 5 ) ;
26914: LD_ADDR_VAR 0 11
26918: PUSH
26919: LD_INT 0
26921: PPUSH
26922: LD_INT 5
26924: PPUSH
26925: CALL_OW 12
26929: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26930: LD_ADDR_VAR 0 12
26934: PUSH
26935: LD_INT 2
26937: PPUSH
26938: LD_INT 6
26940: PPUSH
26941: CALL_OW 12
26945: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26946: LD_ADDR_VAR 0 9
26950: PUSH
26951: LD_VAR 0 2
26955: PPUSH
26956: LD_VAR 0 11
26960: PPUSH
26961: LD_VAR 0 12
26965: PPUSH
26966: CALL_OW 272
26970: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26971: LD_ADDR_VAR 0 10
26975: PUSH
26976: LD_VAR 0 3
26980: PPUSH
26981: LD_VAR 0 11
26985: PPUSH
26986: LD_VAR 0 12
26990: PPUSH
26991: CALL_OW 273
26995: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26996: LD_VAR 0 9
27000: PPUSH
27001: LD_VAR 0 10
27005: PPUSH
27006: CALL_OW 488
27010: PUSH
27011: LD_VAR 0 9
27015: PUSH
27016: LD_VAR 0 10
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_VAR 0 7
27029: IN
27030: NOT
27031: AND
27032: PUSH
27033: LD_VAR 0 9
27037: PPUSH
27038: LD_VAR 0 10
27042: PPUSH
27043: CALL_OW 458
27047: NOT
27048: AND
27049: IFFALSE 27091
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27051: LD_ADDR_VAR 0 7
27055: PUSH
27056: LD_VAR 0 7
27060: PPUSH
27061: LD_VAR 0 7
27065: PUSH
27066: LD_INT 1
27068: PLUS
27069: PPUSH
27070: LD_VAR 0 9
27074: PUSH
27075: LD_VAR 0 10
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PPUSH
27084: CALL_OW 1
27088: ST_TO_ADDR
27089: GO 27105
// i := i - 1 ;
27091: LD_ADDR_VAR 0 5
27095: PUSH
27096: LD_VAR 0 5
27100: PUSH
27101: LD_INT 1
27103: MINUS
27104: ST_TO_ADDR
// end ;
27105: GO 26911
27107: POP
27108: POP
// for i in tmp do
27109: LD_ADDR_VAR 0 5
27113: PUSH
27114: LD_VAR 0 7
27118: PUSH
27119: FOR_IN
27120: IFFALSE 27158
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27122: LD_VAR 0 1
27126: PPUSH
27127: LD_VAR 0 5
27131: PUSH
27132: LD_INT 1
27134: ARRAY
27135: PPUSH
27136: LD_VAR 0 5
27140: PUSH
27141: LD_INT 2
27143: ARRAY
27144: PPUSH
27145: CALL 26104 0 3
27149: NOT
27150: IFFALSE 27156
// exit ;
27152: POP
27153: POP
27154: GO 27160
27156: GO 27119
27158: POP
27159: POP
// end ;
27160: LD_VAR 0 4
27164: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27165: LD_INT 0
27167: PPUSH
27168: PPUSH
27169: PPUSH
27170: PPUSH
27171: PPUSH
27172: PPUSH
27173: PPUSH
// if not GetClass ( unit ) = class_sniper then
27174: LD_VAR 0 1
27178: PPUSH
27179: CALL_OW 257
27183: PUSH
27184: LD_INT 5
27186: EQUAL
27187: NOT
27188: IFFALSE 27192
// exit ;
27190: GO 27580
// dist := 8 ;
27192: LD_ADDR_VAR 0 5
27196: PUSH
27197: LD_INT 8
27199: ST_TO_ADDR
// viewRange := 12 ;
27200: LD_ADDR_VAR 0 7
27204: PUSH
27205: LD_INT 12
27207: ST_TO_ADDR
// side := GetSide ( unit ) ;
27208: LD_ADDR_VAR 0 6
27212: PUSH
27213: LD_VAR 0 1
27217: PPUSH
27218: CALL_OW 255
27222: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27223: LD_INT 61
27225: PPUSH
27226: LD_VAR 0 6
27230: PPUSH
27231: CALL_OW 321
27235: PUSH
27236: LD_INT 2
27238: EQUAL
27239: IFFALSE 27249
// viewRange := 16 ;
27241: LD_ADDR_VAR 0 7
27245: PUSH
27246: LD_INT 16
27248: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27249: LD_VAR 0 1
27253: PPUSH
27254: LD_VAR 0 2
27258: PPUSH
27259: LD_VAR 0 3
27263: PPUSH
27264: CALL_OW 297
27268: PUSH
27269: LD_VAR 0 5
27273: GREATER
27274: IFFALSE 27353
// begin ComMoveXY ( unit , x , y ) ;
27276: LD_VAR 0 1
27280: PPUSH
27281: LD_VAR 0 2
27285: PPUSH
27286: LD_VAR 0 3
27290: PPUSH
27291: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27295: LD_INT 35
27297: PPUSH
27298: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27302: LD_VAR 0 1
27306: PPUSH
27307: LD_VAR 0 2
27311: PPUSH
27312: LD_VAR 0 3
27316: PPUSH
27317: CALL 64084 0 3
27321: NOT
27322: IFFALSE 27326
// exit ;
27324: GO 27580
// until GetDistUnitXY ( unit , x , y ) < dist ;
27326: LD_VAR 0 1
27330: PPUSH
27331: LD_VAR 0 2
27335: PPUSH
27336: LD_VAR 0 3
27340: PPUSH
27341: CALL_OW 297
27345: PUSH
27346: LD_VAR 0 5
27350: LESS
27351: IFFALSE 27295
// end ; ComTurnXY ( unit , x , y ) ;
27353: LD_VAR 0 1
27357: PPUSH
27358: LD_VAR 0 2
27362: PPUSH
27363: LD_VAR 0 3
27367: PPUSH
27368: CALL_OW 118
// wait ( 5 ) ;
27372: LD_INT 5
27374: PPUSH
27375: CALL_OW 67
// _d := GetDir ( unit ) ;
27379: LD_ADDR_VAR 0 10
27383: PUSH
27384: LD_VAR 0 1
27388: PPUSH
27389: CALL_OW 254
27393: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27394: LD_ADDR_VAR 0 8
27398: PUSH
27399: LD_VAR 0 1
27403: PPUSH
27404: CALL_OW 250
27408: PPUSH
27409: LD_VAR 0 10
27413: PPUSH
27414: LD_VAR 0 5
27418: PPUSH
27419: CALL_OW 272
27423: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27424: LD_ADDR_VAR 0 9
27428: PUSH
27429: LD_VAR 0 1
27433: PPUSH
27434: CALL_OW 251
27438: PPUSH
27439: LD_VAR 0 10
27443: PPUSH
27444: LD_VAR 0 5
27448: PPUSH
27449: CALL_OW 273
27453: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27454: LD_VAR 0 8
27458: PPUSH
27459: LD_VAR 0 9
27463: PPUSH
27464: CALL_OW 488
27468: NOT
27469: IFFALSE 27473
// exit ;
27471: GO 27580
// ComAnimCustom ( unit , 1 ) ;
27473: LD_VAR 0 1
27477: PPUSH
27478: LD_INT 1
27480: PPUSH
27481: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27485: LD_VAR 0 8
27489: PPUSH
27490: LD_VAR 0 9
27494: PPUSH
27495: LD_VAR 0 6
27499: PPUSH
27500: LD_VAR 0 7
27504: PPUSH
27505: CALL_OW 330
// repeat wait ( 1 ) ;
27509: LD_INT 1
27511: PPUSH
27512: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27516: LD_VAR 0 1
27520: PPUSH
27521: CALL_OW 316
27525: PUSH
27526: LD_VAR 0 1
27530: PPUSH
27531: CALL_OW 314
27535: OR
27536: PUSH
27537: LD_VAR 0 1
27541: PPUSH
27542: CALL_OW 302
27546: NOT
27547: OR
27548: PUSH
27549: LD_VAR 0 1
27553: PPUSH
27554: CALL_OW 301
27558: OR
27559: IFFALSE 27509
// RemoveSeeing ( _x , _y , side ) ;
27561: LD_VAR 0 8
27565: PPUSH
27566: LD_VAR 0 9
27570: PPUSH
27571: LD_VAR 0 6
27575: PPUSH
27576: CALL_OW 331
// end ; end_of_file
27580: LD_VAR 0 4
27584: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27585: LD_INT 0
27587: PPUSH
27588: PPUSH
// if exist_mode then
27589: LD_VAR 0 2
27593: IFFALSE 27618
// unit := CreateCharacter ( prefix & ident ) else
27595: LD_ADDR_VAR 0 5
27599: PUSH
27600: LD_VAR 0 3
27604: PUSH
27605: LD_VAR 0 1
27609: STR
27610: PPUSH
27611: CALL_OW 34
27615: ST_TO_ADDR
27616: GO 27633
// unit := NewCharacter ( ident ) ;
27618: LD_ADDR_VAR 0 5
27622: PUSH
27623: LD_VAR 0 1
27627: PPUSH
27628: CALL_OW 25
27632: ST_TO_ADDR
// result := unit ;
27633: LD_ADDR_VAR 0 4
27637: PUSH
27638: LD_VAR 0 5
27642: ST_TO_ADDR
// end ;
27643: LD_VAR 0 4
27647: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27648: LD_INT 0
27650: PPUSH
27651: PPUSH
// if not side or not nation then
27652: LD_VAR 0 1
27656: NOT
27657: PUSH
27658: LD_VAR 0 2
27662: NOT
27663: OR
27664: IFFALSE 27668
// exit ;
27666: GO 28436
// case nation of nation_american :
27668: LD_VAR 0 2
27672: PUSH
27673: LD_INT 1
27675: DOUBLE
27676: EQUAL
27677: IFTRUE 27681
27679: GO 27895
27681: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27682: LD_ADDR_VAR 0 4
27686: PUSH
27687: LD_INT 35
27689: PUSH
27690: LD_INT 45
27692: PUSH
27693: LD_INT 46
27695: PUSH
27696: LD_INT 47
27698: PUSH
27699: LD_INT 82
27701: PUSH
27702: LD_INT 83
27704: PUSH
27705: LD_INT 84
27707: PUSH
27708: LD_INT 85
27710: PUSH
27711: LD_INT 86
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: LD_INT 2
27719: PUSH
27720: LD_INT 6
27722: PUSH
27723: LD_INT 15
27725: PUSH
27726: LD_INT 16
27728: PUSH
27729: LD_INT 7
27731: PUSH
27732: LD_INT 12
27734: PUSH
27735: LD_INT 13
27737: PUSH
27738: LD_INT 10
27740: PUSH
27741: LD_INT 14
27743: PUSH
27744: LD_INT 20
27746: PUSH
27747: LD_INT 21
27749: PUSH
27750: LD_INT 22
27752: PUSH
27753: LD_INT 25
27755: PUSH
27756: LD_INT 32
27758: PUSH
27759: LD_INT 27
27761: PUSH
27762: LD_INT 36
27764: PUSH
27765: LD_INT 69
27767: PUSH
27768: LD_INT 39
27770: PUSH
27771: LD_INT 34
27773: PUSH
27774: LD_INT 40
27776: PUSH
27777: LD_INT 48
27779: PUSH
27780: LD_INT 49
27782: PUSH
27783: LD_INT 50
27785: PUSH
27786: LD_INT 51
27788: PUSH
27789: LD_INT 52
27791: PUSH
27792: LD_INT 53
27794: PUSH
27795: LD_INT 54
27797: PUSH
27798: LD_INT 55
27800: PUSH
27801: LD_INT 56
27803: PUSH
27804: LD_INT 57
27806: PUSH
27807: LD_INT 58
27809: PUSH
27810: LD_INT 59
27812: PUSH
27813: LD_INT 60
27815: PUSH
27816: LD_INT 61
27818: PUSH
27819: LD_INT 62
27821: PUSH
27822: LD_INT 80
27824: PUSH
27825: LD_INT 82
27827: PUSH
27828: LD_INT 83
27830: PUSH
27831: LD_INT 84
27833: PUSH
27834: LD_INT 85
27836: PUSH
27837: LD_INT 86
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: ST_TO_ADDR
27893: GO 28360
27895: LD_INT 2
27897: DOUBLE
27898: EQUAL
27899: IFTRUE 27903
27901: GO 28129
27903: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27904: LD_ADDR_VAR 0 4
27908: PUSH
27909: LD_INT 35
27911: PUSH
27912: LD_INT 45
27914: PUSH
27915: LD_INT 46
27917: PUSH
27918: LD_INT 47
27920: PUSH
27921: LD_INT 82
27923: PUSH
27924: LD_INT 83
27926: PUSH
27927: LD_INT 84
27929: PUSH
27930: LD_INT 85
27932: PUSH
27933: LD_INT 87
27935: PUSH
27936: LD_INT 70
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: LD_INT 11
27944: PUSH
27945: LD_INT 3
27947: PUSH
27948: LD_INT 4
27950: PUSH
27951: LD_INT 5
27953: PUSH
27954: LD_INT 6
27956: PUSH
27957: LD_INT 15
27959: PUSH
27960: LD_INT 18
27962: PUSH
27963: LD_INT 7
27965: PUSH
27966: LD_INT 17
27968: PUSH
27969: LD_INT 8
27971: PUSH
27972: LD_INT 20
27974: PUSH
27975: LD_INT 21
27977: PUSH
27978: LD_INT 22
27980: PUSH
27981: LD_INT 72
27983: PUSH
27984: LD_INT 26
27986: PUSH
27987: LD_INT 69
27989: PUSH
27990: LD_INT 39
27992: PUSH
27993: LD_INT 40
27995: PUSH
27996: LD_INT 41
27998: PUSH
27999: LD_INT 42
28001: PUSH
28002: LD_INT 43
28004: PUSH
28005: LD_INT 48
28007: PUSH
28008: LD_INT 49
28010: PUSH
28011: LD_INT 50
28013: PUSH
28014: LD_INT 51
28016: PUSH
28017: LD_INT 52
28019: PUSH
28020: LD_INT 53
28022: PUSH
28023: LD_INT 54
28025: PUSH
28026: LD_INT 55
28028: PUSH
28029: LD_INT 56
28031: PUSH
28032: LD_INT 60
28034: PUSH
28035: LD_INT 61
28037: PUSH
28038: LD_INT 62
28040: PUSH
28041: LD_INT 66
28043: PUSH
28044: LD_INT 67
28046: PUSH
28047: LD_INT 68
28049: PUSH
28050: LD_INT 81
28052: PUSH
28053: LD_INT 82
28055: PUSH
28056: LD_INT 83
28058: PUSH
28059: LD_INT 84
28061: PUSH
28062: LD_INT 85
28064: PUSH
28065: LD_INT 87
28067: PUSH
28068: LD_INT 88
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: ST_TO_ADDR
28127: GO 28360
28129: LD_INT 3
28131: DOUBLE
28132: EQUAL
28133: IFTRUE 28137
28135: GO 28359
28137: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28138: LD_ADDR_VAR 0 4
28142: PUSH
28143: LD_INT 46
28145: PUSH
28146: LD_INT 47
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: LD_INT 2
28154: PUSH
28155: LD_INT 82
28157: PUSH
28158: LD_INT 83
28160: PUSH
28161: LD_INT 84
28163: PUSH
28164: LD_INT 85
28166: PUSH
28167: LD_INT 86
28169: PUSH
28170: LD_INT 11
28172: PUSH
28173: LD_INT 9
28175: PUSH
28176: LD_INT 20
28178: PUSH
28179: LD_INT 19
28181: PUSH
28182: LD_INT 21
28184: PUSH
28185: LD_INT 24
28187: PUSH
28188: LD_INT 22
28190: PUSH
28191: LD_INT 25
28193: PUSH
28194: LD_INT 28
28196: PUSH
28197: LD_INT 29
28199: PUSH
28200: LD_INT 30
28202: PUSH
28203: LD_INT 31
28205: PUSH
28206: LD_INT 37
28208: PUSH
28209: LD_INT 38
28211: PUSH
28212: LD_INT 32
28214: PUSH
28215: LD_INT 27
28217: PUSH
28218: LD_INT 33
28220: PUSH
28221: LD_INT 69
28223: PUSH
28224: LD_INT 39
28226: PUSH
28227: LD_INT 34
28229: PUSH
28230: LD_INT 40
28232: PUSH
28233: LD_INT 71
28235: PUSH
28236: LD_INT 23
28238: PUSH
28239: LD_INT 44
28241: PUSH
28242: LD_INT 48
28244: PUSH
28245: LD_INT 49
28247: PUSH
28248: LD_INT 50
28250: PUSH
28251: LD_INT 51
28253: PUSH
28254: LD_INT 52
28256: PUSH
28257: LD_INT 53
28259: PUSH
28260: LD_INT 54
28262: PUSH
28263: LD_INT 55
28265: PUSH
28266: LD_INT 56
28268: PUSH
28269: LD_INT 57
28271: PUSH
28272: LD_INT 58
28274: PUSH
28275: LD_INT 59
28277: PUSH
28278: LD_INT 63
28280: PUSH
28281: LD_INT 64
28283: PUSH
28284: LD_INT 65
28286: PUSH
28287: LD_INT 82
28289: PUSH
28290: LD_INT 83
28292: PUSH
28293: LD_INT 84
28295: PUSH
28296: LD_INT 85
28298: PUSH
28299: LD_INT 86
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: ST_TO_ADDR
28357: GO 28360
28359: POP
// if state > - 1 and state < 3 then
28360: LD_VAR 0 3
28364: PUSH
28365: LD_INT 1
28367: NEG
28368: GREATER
28369: PUSH
28370: LD_VAR 0 3
28374: PUSH
28375: LD_INT 3
28377: LESS
28378: AND
28379: IFFALSE 28436
// for i in result do
28381: LD_ADDR_VAR 0 5
28385: PUSH
28386: LD_VAR 0 4
28390: PUSH
28391: FOR_IN
28392: IFFALSE 28434
// if GetTech ( i , side ) <> state then
28394: LD_VAR 0 5
28398: PPUSH
28399: LD_VAR 0 1
28403: PPUSH
28404: CALL_OW 321
28408: PUSH
28409: LD_VAR 0 3
28413: NONEQUAL
28414: IFFALSE 28432
// result := result diff i ;
28416: LD_ADDR_VAR 0 4
28420: PUSH
28421: LD_VAR 0 4
28425: PUSH
28426: LD_VAR 0 5
28430: DIFF
28431: ST_TO_ADDR
28432: GO 28391
28434: POP
28435: POP
// end ;
28436: LD_VAR 0 4
28440: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28441: LD_INT 0
28443: PPUSH
28444: PPUSH
28445: PPUSH
// result := true ;
28446: LD_ADDR_VAR 0 3
28450: PUSH
28451: LD_INT 1
28453: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28454: LD_ADDR_VAR 0 5
28458: PUSH
28459: LD_VAR 0 2
28463: PPUSH
28464: CALL_OW 480
28468: ST_TO_ADDR
// if not tmp then
28469: LD_VAR 0 5
28473: NOT
28474: IFFALSE 28478
// exit ;
28476: GO 28527
// for i in tmp do
28478: LD_ADDR_VAR 0 4
28482: PUSH
28483: LD_VAR 0 5
28487: PUSH
28488: FOR_IN
28489: IFFALSE 28525
// if GetTech ( i , side ) <> state_researched then
28491: LD_VAR 0 4
28495: PPUSH
28496: LD_VAR 0 1
28500: PPUSH
28501: CALL_OW 321
28505: PUSH
28506: LD_INT 2
28508: NONEQUAL
28509: IFFALSE 28523
// begin result := false ;
28511: LD_ADDR_VAR 0 3
28515: PUSH
28516: LD_INT 0
28518: ST_TO_ADDR
// exit ;
28519: POP
28520: POP
28521: GO 28527
// end ;
28523: GO 28488
28525: POP
28526: POP
// end ;
28527: LD_VAR 0 3
28531: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28532: LD_INT 0
28534: PPUSH
28535: PPUSH
28536: PPUSH
28537: PPUSH
28538: PPUSH
28539: PPUSH
28540: PPUSH
28541: PPUSH
28542: PPUSH
28543: PPUSH
28544: PPUSH
28545: PPUSH
28546: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28547: LD_VAR 0 1
28551: NOT
28552: PUSH
28553: LD_VAR 0 1
28557: PPUSH
28558: CALL_OW 257
28562: PUSH
28563: LD_INT 9
28565: NONEQUAL
28566: OR
28567: IFFALSE 28571
// exit ;
28569: GO 29144
// side := GetSide ( unit ) ;
28571: LD_ADDR_VAR 0 9
28575: PUSH
28576: LD_VAR 0 1
28580: PPUSH
28581: CALL_OW 255
28585: ST_TO_ADDR
// tech_space := tech_spacanom ;
28586: LD_ADDR_VAR 0 12
28590: PUSH
28591: LD_INT 29
28593: ST_TO_ADDR
// tech_time := tech_taurad ;
28594: LD_ADDR_VAR 0 13
28598: PUSH
28599: LD_INT 28
28601: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28602: LD_ADDR_VAR 0 11
28606: PUSH
28607: LD_VAR 0 1
28611: PPUSH
28612: CALL_OW 310
28616: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28617: LD_VAR 0 11
28621: PPUSH
28622: CALL_OW 247
28626: PUSH
28627: LD_INT 2
28629: EQUAL
28630: IFFALSE 28634
// exit ;
28632: GO 29144
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28634: LD_ADDR_VAR 0 8
28638: PUSH
28639: LD_INT 81
28641: PUSH
28642: LD_VAR 0 9
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 3
28653: PUSH
28654: LD_INT 21
28656: PUSH
28657: LD_INT 3
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PPUSH
28672: CALL_OW 69
28676: ST_TO_ADDR
// if not tmp then
28677: LD_VAR 0 8
28681: NOT
28682: IFFALSE 28686
// exit ;
28684: GO 29144
// if in_unit then
28686: LD_VAR 0 11
28690: IFFALSE 28714
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28692: LD_ADDR_VAR 0 10
28696: PUSH
28697: LD_VAR 0 8
28701: PPUSH
28702: LD_VAR 0 11
28706: PPUSH
28707: CALL_OW 74
28711: ST_TO_ADDR
28712: GO 28734
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28714: LD_ADDR_VAR 0 10
28718: PUSH
28719: LD_VAR 0 8
28723: PPUSH
28724: LD_VAR 0 1
28728: PPUSH
28729: CALL_OW 74
28733: ST_TO_ADDR
// if not enemy then
28734: LD_VAR 0 10
28738: NOT
28739: IFFALSE 28743
// exit ;
28741: GO 29144
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28743: LD_VAR 0 11
28747: PUSH
28748: LD_VAR 0 11
28752: PPUSH
28753: LD_VAR 0 10
28757: PPUSH
28758: CALL_OW 296
28762: PUSH
28763: LD_INT 13
28765: GREATER
28766: AND
28767: PUSH
28768: LD_VAR 0 1
28772: PPUSH
28773: LD_VAR 0 10
28777: PPUSH
28778: CALL_OW 296
28782: PUSH
28783: LD_INT 12
28785: GREATER
28786: OR
28787: IFFALSE 28791
// exit ;
28789: GO 29144
// missile := [ 1 ] ;
28791: LD_ADDR_VAR 0 14
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28802: LD_VAR 0 9
28806: PPUSH
28807: LD_VAR 0 12
28811: PPUSH
28812: CALL_OW 325
28816: IFFALSE 28845
// missile := Replace ( missile , missile + 1 , 2 ) ;
28818: LD_ADDR_VAR 0 14
28822: PUSH
28823: LD_VAR 0 14
28827: PPUSH
28828: LD_VAR 0 14
28832: PUSH
28833: LD_INT 1
28835: PLUS
28836: PPUSH
28837: LD_INT 2
28839: PPUSH
28840: CALL_OW 1
28844: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28845: LD_VAR 0 9
28849: PPUSH
28850: LD_VAR 0 13
28854: PPUSH
28855: CALL_OW 325
28859: PUSH
28860: LD_VAR 0 10
28864: PPUSH
28865: CALL_OW 255
28869: PPUSH
28870: LD_VAR 0 13
28874: PPUSH
28875: CALL_OW 325
28879: NOT
28880: AND
28881: IFFALSE 28910
// missile := Replace ( missile , missile + 1 , 3 ) ;
28883: LD_ADDR_VAR 0 14
28887: PUSH
28888: LD_VAR 0 14
28892: PPUSH
28893: LD_VAR 0 14
28897: PUSH
28898: LD_INT 1
28900: PLUS
28901: PPUSH
28902: LD_INT 3
28904: PPUSH
28905: CALL_OW 1
28909: ST_TO_ADDR
// if missile < 2 then
28910: LD_VAR 0 14
28914: PUSH
28915: LD_INT 2
28917: LESS
28918: IFFALSE 28922
// exit ;
28920: GO 29144
// x := GetX ( enemy ) ;
28922: LD_ADDR_VAR 0 4
28926: PUSH
28927: LD_VAR 0 10
28931: PPUSH
28932: CALL_OW 250
28936: ST_TO_ADDR
// y := GetY ( enemy ) ;
28937: LD_ADDR_VAR 0 5
28941: PUSH
28942: LD_VAR 0 10
28946: PPUSH
28947: CALL_OW 251
28951: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28952: LD_ADDR_VAR 0 6
28956: PUSH
28957: LD_VAR 0 4
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PPUSH
28966: LD_INT 1
28968: PPUSH
28969: CALL_OW 12
28973: PLUS
28974: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28975: LD_ADDR_VAR 0 7
28979: PUSH
28980: LD_VAR 0 5
28984: PUSH
28985: LD_INT 1
28987: NEG
28988: PPUSH
28989: LD_INT 1
28991: PPUSH
28992: CALL_OW 12
28996: PLUS
28997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28998: LD_VAR 0 6
29002: PPUSH
29003: LD_VAR 0 7
29007: PPUSH
29008: CALL_OW 488
29012: NOT
29013: IFFALSE 29035
// begin _x := x ;
29015: LD_ADDR_VAR 0 6
29019: PUSH
29020: LD_VAR 0 4
29024: ST_TO_ADDR
// _y := y ;
29025: LD_ADDR_VAR 0 7
29029: PUSH
29030: LD_VAR 0 5
29034: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29035: LD_ADDR_VAR 0 3
29039: PUSH
29040: LD_INT 1
29042: PPUSH
29043: LD_VAR 0 14
29047: PPUSH
29048: CALL_OW 12
29052: ST_TO_ADDR
// case i of 1 :
29053: LD_VAR 0 3
29057: PUSH
29058: LD_INT 1
29060: DOUBLE
29061: EQUAL
29062: IFTRUE 29066
29064: GO 29083
29066: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29067: LD_VAR 0 1
29071: PPUSH
29072: LD_VAR 0 10
29076: PPUSH
29077: CALL_OW 115
29081: GO 29144
29083: LD_INT 2
29085: DOUBLE
29086: EQUAL
29087: IFTRUE 29091
29089: GO 29113
29091: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29092: LD_VAR 0 1
29096: PPUSH
29097: LD_VAR 0 6
29101: PPUSH
29102: LD_VAR 0 7
29106: PPUSH
29107: CALL_OW 153
29111: GO 29144
29113: LD_INT 3
29115: DOUBLE
29116: EQUAL
29117: IFTRUE 29121
29119: GO 29143
29121: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29122: LD_VAR 0 1
29126: PPUSH
29127: LD_VAR 0 6
29131: PPUSH
29132: LD_VAR 0 7
29136: PPUSH
29137: CALL_OW 154
29141: GO 29144
29143: POP
// end ;
29144: LD_VAR 0 2
29148: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29149: LD_INT 0
29151: PPUSH
29152: PPUSH
29153: PPUSH
29154: PPUSH
29155: PPUSH
29156: PPUSH
// if not unit or not building then
29157: LD_VAR 0 1
29161: NOT
29162: PUSH
29163: LD_VAR 0 2
29167: NOT
29168: OR
29169: IFFALSE 29173
// exit ;
29171: GO 29331
// x := GetX ( building ) ;
29173: LD_ADDR_VAR 0 5
29177: PUSH
29178: LD_VAR 0 2
29182: PPUSH
29183: CALL_OW 250
29187: ST_TO_ADDR
// y := GetY ( building ) ;
29188: LD_ADDR_VAR 0 6
29192: PUSH
29193: LD_VAR 0 2
29197: PPUSH
29198: CALL_OW 251
29202: ST_TO_ADDR
// for i = 0 to 5 do
29203: LD_ADDR_VAR 0 4
29207: PUSH
29208: DOUBLE
29209: LD_INT 0
29211: DEC
29212: ST_TO_ADDR
29213: LD_INT 5
29215: PUSH
29216: FOR_TO
29217: IFFALSE 29329
// begin _x := ShiftX ( x , i , 3 ) ;
29219: LD_ADDR_VAR 0 7
29223: PUSH
29224: LD_VAR 0 5
29228: PPUSH
29229: LD_VAR 0 4
29233: PPUSH
29234: LD_INT 3
29236: PPUSH
29237: CALL_OW 272
29241: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29242: LD_ADDR_VAR 0 8
29246: PUSH
29247: LD_VAR 0 6
29251: PPUSH
29252: LD_VAR 0 4
29256: PPUSH
29257: LD_INT 3
29259: PPUSH
29260: CALL_OW 273
29264: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29265: LD_VAR 0 7
29269: PPUSH
29270: LD_VAR 0 8
29274: PPUSH
29275: CALL_OW 488
29279: NOT
29280: IFFALSE 29284
// continue ;
29282: GO 29216
// if HexInfo ( _x , _y ) = 0 then
29284: LD_VAR 0 7
29288: PPUSH
29289: LD_VAR 0 8
29293: PPUSH
29294: CALL_OW 428
29298: PUSH
29299: LD_INT 0
29301: EQUAL
29302: IFFALSE 29327
// begin ComMoveXY ( unit , _x , _y ) ;
29304: LD_VAR 0 1
29308: PPUSH
29309: LD_VAR 0 7
29313: PPUSH
29314: LD_VAR 0 8
29318: PPUSH
29319: CALL_OW 111
// exit ;
29323: POP
29324: POP
29325: GO 29331
// end ; end ;
29327: GO 29216
29329: POP
29330: POP
// end ;
29331: LD_VAR 0 3
29335: RET
// export function ScanBase ( side , base_area ) ; begin
29336: LD_INT 0
29338: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29339: LD_ADDR_VAR 0 3
29343: PUSH
29344: LD_VAR 0 2
29348: PPUSH
29349: LD_INT 81
29351: PUSH
29352: LD_VAR 0 1
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PPUSH
29361: CALL_OW 70
29365: ST_TO_ADDR
// end ;
29366: LD_VAR 0 3
29370: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29371: LD_INT 0
29373: PPUSH
29374: PPUSH
29375: PPUSH
29376: PPUSH
// result := false ;
29377: LD_ADDR_VAR 0 2
29381: PUSH
29382: LD_INT 0
29384: ST_TO_ADDR
// side := GetSide ( unit ) ;
29385: LD_ADDR_VAR 0 3
29389: PUSH
29390: LD_VAR 0 1
29394: PPUSH
29395: CALL_OW 255
29399: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29400: LD_ADDR_VAR 0 4
29404: PUSH
29405: LD_VAR 0 1
29409: PPUSH
29410: CALL_OW 248
29414: ST_TO_ADDR
// case nat of 1 :
29415: LD_VAR 0 4
29419: PUSH
29420: LD_INT 1
29422: DOUBLE
29423: EQUAL
29424: IFTRUE 29428
29426: GO 29439
29428: POP
// tech := tech_lassight ; 2 :
29429: LD_ADDR_VAR 0 5
29433: PUSH
29434: LD_INT 12
29436: ST_TO_ADDR
29437: GO 29478
29439: LD_INT 2
29441: DOUBLE
29442: EQUAL
29443: IFTRUE 29447
29445: GO 29458
29447: POP
// tech := tech_mortar ; 3 :
29448: LD_ADDR_VAR 0 5
29452: PUSH
29453: LD_INT 41
29455: ST_TO_ADDR
29456: GO 29478
29458: LD_INT 3
29460: DOUBLE
29461: EQUAL
29462: IFTRUE 29466
29464: GO 29477
29466: POP
// tech := tech_bazooka ; end ;
29467: LD_ADDR_VAR 0 5
29471: PUSH
29472: LD_INT 44
29474: ST_TO_ADDR
29475: GO 29478
29477: POP
// if Researched ( side , tech ) then
29478: LD_VAR 0 3
29482: PPUSH
29483: LD_VAR 0 5
29487: PPUSH
29488: CALL_OW 325
29492: IFFALSE 29519
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29494: LD_ADDR_VAR 0 2
29498: PUSH
29499: LD_INT 5
29501: PUSH
29502: LD_INT 8
29504: PUSH
29505: LD_INT 9
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: PUSH
29513: LD_VAR 0 4
29517: ARRAY
29518: ST_TO_ADDR
// end ;
29519: LD_VAR 0 2
29523: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29524: LD_INT 0
29526: PPUSH
29527: PPUSH
29528: PPUSH
// if not mines then
29529: LD_VAR 0 2
29533: NOT
29534: IFFALSE 29538
// exit ;
29536: GO 29682
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29538: LD_ADDR_VAR 0 5
29542: PUSH
29543: LD_INT 81
29545: PUSH
29546: LD_VAR 0 1
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 3
29557: PUSH
29558: LD_INT 21
29560: PUSH
29561: LD_INT 3
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PPUSH
29576: CALL_OW 69
29580: ST_TO_ADDR
// for i in mines do
29581: LD_ADDR_VAR 0 4
29585: PUSH
29586: LD_VAR 0 2
29590: PUSH
29591: FOR_IN
29592: IFFALSE 29680
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29594: LD_VAR 0 4
29598: PUSH
29599: LD_INT 1
29601: ARRAY
29602: PPUSH
29603: LD_VAR 0 4
29607: PUSH
29608: LD_INT 2
29610: ARRAY
29611: PPUSH
29612: CALL_OW 458
29616: NOT
29617: IFFALSE 29621
// continue ;
29619: GO 29591
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29621: LD_VAR 0 4
29625: PUSH
29626: LD_INT 1
29628: ARRAY
29629: PPUSH
29630: LD_VAR 0 4
29634: PUSH
29635: LD_INT 2
29637: ARRAY
29638: PPUSH
29639: CALL_OW 428
29643: PUSH
29644: LD_VAR 0 5
29648: IN
29649: IFFALSE 29678
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29651: LD_VAR 0 4
29655: PUSH
29656: LD_INT 1
29658: ARRAY
29659: PPUSH
29660: LD_VAR 0 4
29664: PUSH
29665: LD_INT 2
29667: ARRAY
29668: PPUSH
29669: LD_VAR 0 1
29673: PPUSH
29674: CALL_OW 456
// end ;
29678: GO 29591
29680: POP
29681: POP
// end ;
29682: LD_VAR 0 3
29686: RET
// export function Count ( array ) ; begin
29687: LD_INT 0
29689: PPUSH
// result := array + 0 ;
29690: LD_ADDR_VAR 0 2
29694: PUSH
29695: LD_VAR 0 1
29699: PUSH
29700: LD_INT 0
29702: PLUS
29703: ST_TO_ADDR
// end ;
29704: LD_VAR 0 2
29708: RET
// export function IsEmpty ( building ) ; begin
29709: LD_INT 0
29711: PPUSH
// if not building then
29712: LD_VAR 0 1
29716: NOT
29717: IFFALSE 29721
// exit ;
29719: GO 29764
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29721: LD_ADDR_VAR 0 2
29725: PUSH
29726: LD_VAR 0 1
29730: PUSH
29731: LD_INT 22
29733: PUSH
29734: LD_VAR 0 1
29738: PPUSH
29739: CALL_OW 255
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 58
29750: PUSH
29751: EMPTY
29752: LIST
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PPUSH
29758: CALL_OW 69
29762: IN
29763: ST_TO_ADDR
// end ;
29764: LD_VAR 0 2
29768: RET
// export function IsNotFull ( building ) ; var places ; begin
29769: LD_INT 0
29771: PPUSH
29772: PPUSH
// if not building then
29773: LD_VAR 0 1
29777: NOT
29778: IFFALSE 29782
// exit ;
29780: GO 29810
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29782: LD_ADDR_VAR 0 2
29786: PUSH
29787: LD_VAR 0 1
29791: PPUSH
29792: LD_INT 3
29794: PUSH
29795: LD_INT 62
29797: PUSH
29798: EMPTY
29799: LIST
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PPUSH
29805: CALL_OW 72
29809: ST_TO_ADDR
// end ;
29810: LD_VAR 0 2
29814: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29815: LD_INT 0
29817: PPUSH
29818: PPUSH
29819: PPUSH
29820: PPUSH
// tmp := [ ] ;
29821: LD_ADDR_VAR 0 3
29825: PUSH
29826: EMPTY
29827: ST_TO_ADDR
// list := [ ] ;
29828: LD_ADDR_VAR 0 5
29832: PUSH
29833: EMPTY
29834: ST_TO_ADDR
// for i = 16 to 25 do
29835: LD_ADDR_VAR 0 4
29839: PUSH
29840: DOUBLE
29841: LD_INT 16
29843: DEC
29844: ST_TO_ADDR
29845: LD_INT 25
29847: PUSH
29848: FOR_TO
29849: IFFALSE 29922
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29851: LD_ADDR_VAR 0 3
29855: PUSH
29856: LD_VAR 0 3
29860: PUSH
29861: LD_INT 22
29863: PUSH
29864: LD_VAR 0 1
29868: PPUSH
29869: CALL_OW 255
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 91
29880: PUSH
29881: LD_VAR 0 1
29885: PUSH
29886: LD_INT 6
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 30
29896: PUSH
29897: LD_VAR 0 4
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: LIST
29910: PUSH
29911: EMPTY
29912: LIST
29913: PPUSH
29914: CALL_OW 69
29918: ADD
29919: ST_TO_ADDR
29920: GO 29848
29922: POP
29923: POP
// for i = 1 to tmp do
29924: LD_ADDR_VAR 0 4
29928: PUSH
29929: DOUBLE
29930: LD_INT 1
29932: DEC
29933: ST_TO_ADDR
29934: LD_VAR 0 3
29938: PUSH
29939: FOR_TO
29940: IFFALSE 30028
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29942: LD_ADDR_VAR 0 5
29946: PUSH
29947: LD_VAR 0 5
29951: PUSH
29952: LD_VAR 0 3
29956: PUSH
29957: LD_VAR 0 4
29961: ARRAY
29962: PPUSH
29963: CALL_OW 266
29967: PUSH
29968: LD_VAR 0 3
29972: PUSH
29973: LD_VAR 0 4
29977: ARRAY
29978: PPUSH
29979: CALL_OW 250
29983: PUSH
29984: LD_VAR 0 3
29988: PUSH
29989: LD_VAR 0 4
29993: ARRAY
29994: PPUSH
29995: CALL_OW 251
29999: PUSH
30000: LD_VAR 0 3
30004: PUSH
30005: LD_VAR 0 4
30009: ARRAY
30010: PPUSH
30011: CALL_OW 254
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: PUSH
30022: EMPTY
30023: LIST
30024: ADD
30025: ST_TO_ADDR
30026: GO 29939
30028: POP
30029: POP
// result := list ;
30030: LD_ADDR_VAR 0 2
30034: PUSH
30035: LD_VAR 0 5
30039: ST_TO_ADDR
// end ;
30040: LD_VAR 0 2
30044: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30045: LD_INT 0
30047: PPUSH
30048: PPUSH
30049: PPUSH
30050: PPUSH
30051: PPUSH
30052: PPUSH
30053: PPUSH
// if not factory then
30054: LD_VAR 0 1
30058: NOT
30059: IFFALSE 30063
// exit ;
30061: GO 30656
// if control = control_apeman then
30063: LD_VAR 0 4
30067: PUSH
30068: LD_INT 5
30070: EQUAL
30071: IFFALSE 30180
// begin tmp := UnitsInside ( factory ) ;
30073: LD_ADDR_VAR 0 8
30077: PUSH
30078: LD_VAR 0 1
30082: PPUSH
30083: CALL_OW 313
30087: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30088: LD_VAR 0 8
30092: PPUSH
30093: LD_INT 25
30095: PUSH
30096: LD_INT 12
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PPUSH
30103: CALL_OW 72
30107: NOT
30108: IFFALSE 30118
// control := control_manual ;
30110: LD_ADDR_VAR 0 4
30114: PUSH
30115: LD_INT 1
30117: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30118: LD_ADDR_VAR 0 8
30122: PUSH
30123: LD_VAR 0 1
30127: PPUSH
30128: CALL 29815 0 1
30132: ST_TO_ADDR
// if tmp then
30133: LD_VAR 0 8
30137: IFFALSE 30180
// begin for i in tmp do
30139: LD_ADDR_VAR 0 7
30143: PUSH
30144: LD_VAR 0 8
30148: PUSH
30149: FOR_IN
30150: IFFALSE 30178
// if i [ 1 ] = b_ext_radio then
30152: LD_VAR 0 7
30156: PUSH
30157: LD_INT 1
30159: ARRAY
30160: PUSH
30161: LD_INT 22
30163: EQUAL
30164: IFFALSE 30176
// begin control := control_remote ;
30166: LD_ADDR_VAR 0 4
30170: PUSH
30171: LD_INT 2
30173: ST_TO_ADDR
// break ;
30174: GO 30178
// end ;
30176: GO 30149
30178: POP
30179: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30180: LD_VAR 0 1
30184: PPUSH
30185: LD_VAR 0 2
30189: PPUSH
30190: LD_VAR 0 3
30194: PPUSH
30195: LD_VAR 0 4
30199: PPUSH
30200: LD_VAR 0 5
30204: PPUSH
30205: CALL_OW 448
30209: IFFALSE 30244
// begin result := [ chassis , engine , control , weapon ] ;
30211: LD_ADDR_VAR 0 6
30215: PUSH
30216: LD_VAR 0 2
30220: PUSH
30221: LD_VAR 0 3
30225: PUSH
30226: LD_VAR 0 4
30230: PUSH
30231: LD_VAR 0 5
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: ST_TO_ADDR
// exit ;
30242: GO 30656
// end ; _chassis := AvailableChassisList ( factory ) ;
30244: LD_ADDR_VAR 0 9
30248: PUSH
30249: LD_VAR 0 1
30253: PPUSH
30254: CALL_OW 475
30258: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30259: LD_ADDR_VAR 0 11
30263: PUSH
30264: LD_VAR 0 1
30268: PPUSH
30269: CALL_OW 476
30273: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30274: LD_ADDR_VAR 0 12
30278: PUSH
30279: LD_VAR 0 1
30283: PPUSH
30284: CALL_OW 477
30288: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30289: LD_ADDR_VAR 0 10
30293: PUSH
30294: LD_VAR 0 1
30298: PPUSH
30299: CALL_OW 478
30303: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30304: LD_VAR 0 9
30308: NOT
30309: PUSH
30310: LD_VAR 0 11
30314: NOT
30315: OR
30316: PUSH
30317: LD_VAR 0 12
30321: NOT
30322: OR
30323: PUSH
30324: LD_VAR 0 10
30328: NOT
30329: OR
30330: IFFALSE 30365
// begin result := [ chassis , engine , control , weapon ] ;
30332: LD_ADDR_VAR 0 6
30336: PUSH
30337: LD_VAR 0 2
30341: PUSH
30342: LD_VAR 0 3
30346: PUSH
30347: LD_VAR 0 4
30351: PUSH
30352: LD_VAR 0 5
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: ST_TO_ADDR
// exit ;
30363: GO 30656
// end ; if not chassis in _chassis then
30365: LD_VAR 0 2
30369: PUSH
30370: LD_VAR 0 9
30374: IN
30375: NOT
30376: IFFALSE 30402
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30378: LD_ADDR_VAR 0 2
30382: PUSH
30383: LD_VAR 0 9
30387: PUSH
30388: LD_INT 1
30390: PPUSH
30391: LD_VAR 0 9
30395: PPUSH
30396: CALL_OW 12
30400: ARRAY
30401: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30402: LD_VAR 0 2
30406: PPUSH
30407: LD_VAR 0 3
30411: PPUSH
30412: CALL 30661 0 2
30416: NOT
30417: IFFALSE 30476
// repeat engine := _engine [ 1 ] ;
30419: LD_ADDR_VAR 0 3
30423: PUSH
30424: LD_VAR 0 11
30428: PUSH
30429: LD_INT 1
30431: ARRAY
30432: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30433: LD_ADDR_VAR 0 11
30437: PUSH
30438: LD_VAR 0 11
30442: PPUSH
30443: LD_INT 1
30445: PPUSH
30446: CALL_OW 3
30450: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30451: LD_VAR 0 2
30455: PPUSH
30456: LD_VAR 0 3
30460: PPUSH
30461: CALL 30661 0 2
30465: PUSH
30466: LD_VAR 0 11
30470: PUSH
30471: EMPTY
30472: EQUAL
30473: OR
30474: IFFALSE 30419
// if not control in _control then
30476: LD_VAR 0 4
30480: PUSH
30481: LD_VAR 0 12
30485: IN
30486: NOT
30487: IFFALSE 30513
// control := _control [ rand ( 1 , _control ) ] ;
30489: LD_ADDR_VAR 0 4
30493: PUSH
30494: LD_VAR 0 12
30498: PUSH
30499: LD_INT 1
30501: PPUSH
30502: LD_VAR 0 12
30506: PPUSH
30507: CALL_OW 12
30511: ARRAY
30512: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30513: LD_VAR 0 2
30517: PPUSH
30518: LD_VAR 0 5
30522: PPUSH
30523: CALL 30881 0 2
30527: NOT
30528: IFFALSE 30587
// repeat weapon := _weapon [ 1 ] ;
30530: LD_ADDR_VAR 0 5
30534: PUSH
30535: LD_VAR 0 10
30539: PUSH
30540: LD_INT 1
30542: ARRAY
30543: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30544: LD_ADDR_VAR 0 10
30548: PUSH
30549: LD_VAR 0 10
30553: PPUSH
30554: LD_INT 1
30556: PPUSH
30557: CALL_OW 3
30561: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30562: LD_VAR 0 2
30566: PPUSH
30567: LD_VAR 0 5
30571: PPUSH
30572: CALL 30881 0 2
30576: PUSH
30577: LD_VAR 0 10
30581: PUSH
30582: EMPTY
30583: EQUAL
30584: OR
30585: IFFALSE 30530
// result := [ ] ;
30587: LD_ADDR_VAR 0 6
30591: PUSH
30592: EMPTY
30593: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30594: LD_VAR 0 1
30598: PPUSH
30599: LD_VAR 0 2
30603: PPUSH
30604: LD_VAR 0 3
30608: PPUSH
30609: LD_VAR 0 4
30613: PPUSH
30614: LD_VAR 0 5
30618: PPUSH
30619: CALL_OW 448
30623: IFFALSE 30656
// result := [ chassis , engine , control , weapon ] ;
30625: LD_ADDR_VAR 0 6
30629: PUSH
30630: LD_VAR 0 2
30634: PUSH
30635: LD_VAR 0 3
30639: PUSH
30640: LD_VAR 0 4
30644: PUSH
30645: LD_VAR 0 5
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: ST_TO_ADDR
// end ;
30656: LD_VAR 0 6
30660: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30661: LD_INT 0
30663: PPUSH
// if not chassis or not engine then
30664: LD_VAR 0 1
30668: NOT
30669: PUSH
30670: LD_VAR 0 2
30674: NOT
30675: OR
30676: IFFALSE 30680
// exit ;
30678: GO 30876
// case engine of engine_solar :
30680: LD_VAR 0 2
30684: PUSH
30685: LD_INT 2
30687: DOUBLE
30688: EQUAL
30689: IFTRUE 30693
30691: GO 30731
30693: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30694: LD_ADDR_VAR 0 3
30698: PUSH
30699: LD_INT 11
30701: PUSH
30702: LD_INT 12
30704: PUSH
30705: LD_INT 13
30707: PUSH
30708: LD_INT 14
30710: PUSH
30711: LD_INT 1
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: LD_INT 3
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: ST_TO_ADDR
30729: GO 30860
30731: LD_INT 1
30733: DOUBLE
30734: EQUAL
30735: IFTRUE 30739
30737: GO 30801
30739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30740: LD_ADDR_VAR 0 3
30744: PUSH
30745: LD_INT 11
30747: PUSH
30748: LD_INT 12
30750: PUSH
30751: LD_INT 13
30753: PUSH
30754: LD_INT 14
30756: PUSH
30757: LD_INT 1
30759: PUSH
30760: LD_INT 2
30762: PUSH
30763: LD_INT 3
30765: PUSH
30766: LD_INT 4
30768: PUSH
30769: LD_INT 5
30771: PUSH
30772: LD_INT 21
30774: PUSH
30775: LD_INT 23
30777: PUSH
30778: LD_INT 22
30780: PUSH
30781: LD_INT 24
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: ST_TO_ADDR
30799: GO 30860
30801: LD_INT 3
30803: DOUBLE
30804: EQUAL
30805: IFTRUE 30809
30807: GO 30859
30809: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30810: LD_ADDR_VAR 0 3
30814: PUSH
30815: LD_INT 13
30817: PUSH
30818: LD_INT 14
30820: PUSH
30821: LD_INT 2
30823: PUSH
30824: LD_INT 3
30826: PUSH
30827: LD_INT 4
30829: PUSH
30830: LD_INT 5
30832: PUSH
30833: LD_INT 21
30835: PUSH
30836: LD_INT 22
30838: PUSH
30839: LD_INT 23
30841: PUSH
30842: LD_INT 24
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: ST_TO_ADDR
30857: GO 30860
30859: POP
// result := ( chassis in result ) ;
30860: LD_ADDR_VAR 0 3
30864: PUSH
30865: LD_VAR 0 1
30869: PUSH
30870: LD_VAR 0 3
30874: IN
30875: ST_TO_ADDR
// end ;
30876: LD_VAR 0 3
30880: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30881: LD_INT 0
30883: PPUSH
// if not chassis or not weapon then
30884: LD_VAR 0 1
30888: NOT
30889: PUSH
30890: LD_VAR 0 2
30894: NOT
30895: OR
30896: IFFALSE 30900
// exit ;
30898: GO 31960
// case weapon of us_machine_gun :
30900: LD_VAR 0 2
30904: PUSH
30905: LD_INT 2
30907: DOUBLE
30908: EQUAL
30909: IFTRUE 30913
30911: GO 30943
30913: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30914: LD_ADDR_VAR 0 3
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: LD_INT 3
30927: PUSH
30928: LD_INT 4
30930: PUSH
30931: LD_INT 5
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: ST_TO_ADDR
30941: GO 31944
30943: LD_INT 3
30945: DOUBLE
30946: EQUAL
30947: IFTRUE 30951
30949: GO 30981
30951: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30952: LD_ADDR_VAR 0 3
30956: PUSH
30957: LD_INT 1
30959: PUSH
30960: LD_INT 2
30962: PUSH
30963: LD_INT 3
30965: PUSH
30966: LD_INT 4
30968: PUSH
30969: LD_INT 5
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: ST_TO_ADDR
30979: GO 31944
30981: LD_INT 11
30983: DOUBLE
30984: EQUAL
30985: IFTRUE 30989
30987: GO 31019
30989: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30990: LD_ADDR_VAR 0 3
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: LD_INT 3
31003: PUSH
31004: LD_INT 4
31006: PUSH
31007: LD_INT 5
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: ST_TO_ADDR
31017: GO 31944
31019: LD_INT 4
31021: DOUBLE
31022: EQUAL
31023: IFTRUE 31027
31025: GO 31053
31027: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31028: LD_ADDR_VAR 0 3
31032: PUSH
31033: LD_INT 2
31035: PUSH
31036: LD_INT 3
31038: PUSH
31039: LD_INT 4
31041: PUSH
31042: LD_INT 5
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: ST_TO_ADDR
31051: GO 31944
31053: LD_INT 5
31055: DOUBLE
31056: EQUAL
31057: IFTRUE 31061
31059: GO 31087
31061: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31062: LD_ADDR_VAR 0 3
31066: PUSH
31067: LD_INT 2
31069: PUSH
31070: LD_INT 3
31072: PUSH
31073: LD_INT 4
31075: PUSH
31076: LD_INT 5
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: ST_TO_ADDR
31085: GO 31944
31087: LD_INT 9
31089: DOUBLE
31090: EQUAL
31091: IFTRUE 31095
31093: GO 31121
31095: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31096: LD_ADDR_VAR 0 3
31100: PUSH
31101: LD_INT 2
31103: PUSH
31104: LD_INT 3
31106: PUSH
31107: LD_INT 4
31109: PUSH
31110: LD_INT 5
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: ST_TO_ADDR
31119: GO 31944
31121: LD_INT 7
31123: DOUBLE
31124: EQUAL
31125: IFTRUE 31129
31127: GO 31155
31129: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31130: LD_ADDR_VAR 0 3
31134: PUSH
31135: LD_INT 2
31137: PUSH
31138: LD_INT 3
31140: PUSH
31141: LD_INT 4
31143: PUSH
31144: LD_INT 5
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: ST_TO_ADDR
31153: GO 31944
31155: LD_INT 12
31157: DOUBLE
31158: EQUAL
31159: IFTRUE 31163
31161: GO 31189
31163: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31164: LD_ADDR_VAR 0 3
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: LD_INT 3
31174: PUSH
31175: LD_INT 4
31177: PUSH
31178: LD_INT 5
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: ST_TO_ADDR
31187: GO 31944
31189: LD_INT 13
31191: DOUBLE
31192: EQUAL
31193: IFTRUE 31197
31195: GO 31223
31197: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31198: LD_ADDR_VAR 0 3
31202: PUSH
31203: LD_INT 2
31205: PUSH
31206: LD_INT 3
31208: PUSH
31209: LD_INT 4
31211: PUSH
31212: LD_INT 5
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: ST_TO_ADDR
31221: GO 31944
31223: LD_INT 14
31225: DOUBLE
31226: EQUAL
31227: IFTRUE 31231
31229: GO 31249
31231: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31232: LD_ADDR_VAR 0 3
31236: PUSH
31237: LD_INT 4
31239: PUSH
31240: LD_INT 5
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: ST_TO_ADDR
31247: GO 31944
31249: LD_INT 6
31251: DOUBLE
31252: EQUAL
31253: IFTRUE 31257
31255: GO 31275
31257: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31258: LD_ADDR_VAR 0 3
31262: PUSH
31263: LD_INT 4
31265: PUSH
31266: LD_INT 5
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: ST_TO_ADDR
31273: GO 31944
31275: LD_INT 10
31277: DOUBLE
31278: EQUAL
31279: IFTRUE 31283
31281: GO 31301
31283: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31284: LD_ADDR_VAR 0 3
31288: PUSH
31289: LD_INT 4
31291: PUSH
31292: LD_INT 5
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: ST_TO_ADDR
31299: GO 31944
31301: LD_INT 22
31303: DOUBLE
31304: EQUAL
31305: IFTRUE 31309
31307: GO 31335
31309: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31310: LD_ADDR_VAR 0 3
31314: PUSH
31315: LD_INT 11
31317: PUSH
31318: LD_INT 12
31320: PUSH
31321: LD_INT 13
31323: PUSH
31324: LD_INT 14
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: ST_TO_ADDR
31333: GO 31944
31335: LD_INT 23
31337: DOUBLE
31338: EQUAL
31339: IFTRUE 31343
31341: GO 31369
31343: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31344: LD_ADDR_VAR 0 3
31348: PUSH
31349: LD_INT 11
31351: PUSH
31352: LD_INT 12
31354: PUSH
31355: LD_INT 13
31357: PUSH
31358: LD_INT 14
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: ST_TO_ADDR
31367: GO 31944
31369: LD_INT 24
31371: DOUBLE
31372: EQUAL
31373: IFTRUE 31377
31375: GO 31403
31377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31378: LD_ADDR_VAR 0 3
31382: PUSH
31383: LD_INT 11
31385: PUSH
31386: LD_INT 12
31388: PUSH
31389: LD_INT 13
31391: PUSH
31392: LD_INT 14
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: ST_TO_ADDR
31401: GO 31944
31403: LD_INT 30
31405: DOUBLE
31406: EQUAL
31407: IFTRUE 31411
31409: GO 31437
31411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31412: LD_ADDR_VAR 0 3
31416: PUSH
31417: LD_INT 11
31419: PUSH
31420: LD_INT 12
31422: PUSH
31423: LD_INT 13
31425: PUSH
31426: LD_INT 14
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: ST_TO_ADDR
31435: GO 31944
31437: LD_INT 25
31439: DOUBLE
31440: EQUAL
31441: IFTRUE 31445
31443: GO 31463
31445: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31446: LD_ADDR_VAR 0 3
31450: PUSH
31451: LD_INT 13
31453: PUSH
31454: LD_INT 14
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: ST_TO_ADDR
31461: GO 31944
31463: LD_INT 27
31465: DOUBLE
31466: EQUAL
31467: IFTRUE 31471
31469: GO 31489
31471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31472: LD_ADDR_VAR 0 3
31476: PUSH
31477: LD_INT 13
31479: PUSH
31480: LD_INT 14
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: ST_TO_ADDR
31487: GO 31944
31489: LD_INT 92
31491: DOUBLE
31492: EQUAL
31493: IFTRUE 31497
31495: GO 31523
31497: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31498: LD_ADDR_VAR 0 3
31502: PUSH
31503: LD_INT 11
31505: PUSH
31506: LD_INT 12
31508: PUSH
31509: LD_INT 13
31511: PUSH
31512: LD_INT 14
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: ST_TO_ADDR
31521: GO 31944
31523: LD_INT 28
31525: DOUBLE
31526: EQUAL
31527: IFTRUE 31531
31529: GO 31549
31531: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31532: LD_ADDR_VAR 0 3
31536: PUSH
31537: LD_INT 13
31539: PUSH
31540: LD_INT 14
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: ST_TO_ADDR
31547: GO 31944
31549: LD_INT 29
31551: DOUBLE
31552: EQUAL
31553: IFTRUE 31557
31555: GO 31575
31557: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31558: LD_ADDR_VAR 0 3
31562: PUSH
31563: LD_INT 13
31565: PUSH
31566: LD_INT 14
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: ST_TO_ADDR
31573: GO 31944
31575: LD_INT 31
31577: DOUBLE
31578: EQUAL
31579: IFTRUE 31583
31581: GO 31601
31583: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31584: LD_ADDR_VAR 0 3
31588: PUSH
31589: LD_INT 13
31591: PUSH
31592: LD_INT 14
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: ST_TO_ADDR
31599: GO 31944
31601: LD_INT 26
31603: DOUBLE
31604: EQUAL
31605: IFTRUE 31609
31607: GO 31627
31609: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31610: LD_ADDR_VAR 0 3
31614: PUSH
31615: LD_INT 13
31617: PUSH
31618: LD_INT 14
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: ST_TO_ADDR
31625: GO 31944
31627: LD_INT 42
31629: DOUBLE
31630: EQUAL
31631: IFTRUE 31635
31633: GO 31661
31635: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31636: LD_ADDR_VAR 0 3
31640: PUSH
31641: LD_INT 21
31643: PUSH
31644: LD_INT 22
31646: PUSH
31647: LD_INT 23
31649: PUSH
31650: LD_INT 24
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: ST_TO_ADDR
31659: GO 31944
31661: LD_INT 43
31663: DOUBLE
31664: EQUAL
31665: IFTRUE 31669
31667: GO 31695
31669: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31670: LD_ADDR_VAR 0 3
31674: PUSH
31675: LD_INT 21
31677: PUSH
31678: LD_INT 22
31680: PUSH
31681: LD_INT 23
31683: PUSH
31684: LD_INT 24
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: ST_TO_ADDR
31693: GO 31944
31695: LD_INT 44
31697: DOUBLE
31698: EQUAL
31699: IFTRUE 31703
31701: GO 31729
31703: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31704: LD_ADDR_VAR 0 3
31708: PUSH
31709: LD_INT 21
31711: PUSH
31712: LD_INT 22
31714: PUSH
31715: LD_INT 23
31717: PUSH
31718: LD_INT 24
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: ST_TO_ADDR
31727: GO 31944
31729: LD_INT 45
31731: DOUBLE
31732: EQUAL
31733: IFTRUE 31737
31735: GO 31763
31737: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31738: LD_ADDR_VAR 0 3
31742: PUSH
31743: LD_INT 21
31745: PUSH
31746: LD_INT 22
31748: PUSH
31749: LD_INT 23
31751: PUSH
31752: LD_INT 24
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: ST_TO_ADDR
31761: GO 31944
31763: LD_INT 49
31765: DOUBLE
31766: EQUAL
31767: IFTRUE 31771
31769: GO 31797
31771: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31772: LD_ADDR_VAR 0 3
31776: PUSH
31777: LD_INT 21
31779: PUSH
31780: LD_INT 22
31782: PUSH
31783: LD_INT 23
31785: PUSH
31786: LD_INT 24
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: ST_TO_ADDR
31795: GO 31944
31797: LD_INT 51
31799: DOUBLE
31800: EQUAL
31801: IFTRUE 31805
31803: GO 31831
31805: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31806: LD_ADDR_VAR 0 3
31810: PUSH
31811: LD_INT 21
31813: PUSH
31814: LD_INT 22
31816: PUSH
31817: LD_INT 23
31819: PUSH
31820: LD_INT 24
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: ST_TO_ADDR
31829: GO 31944
31831: LD_INT 52
31833: DOUBLE
31834: EQUAL
31835: IFTRUE 31839
31837: GO 31865
31839: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31840: LD_ADDR_VAR 0 3
31844: PUSH
31845: LD_INT 21
31847: PUSH
31848: LD_INT 22
31850: PUSH
31851: LD_INT 23
31853: PUSH
31854: LD_INT 24
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: ST_TO_ADDR
31863: GO 31944
31865: LD_INT 53
31867: DOUBLE
31868: EQUAL
31869: IFTRUE 31873
31871: GO 31891
31873: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31874: LD_ADDR_VAR 0 3
31878: PUSH
31879: LD_INT 23
31881: PUSH
31882: LD_INT 24
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: ST_TO_ADDR
31889: GO 31944
31891: LD_INT 46
31893: DOUBLE
31894: EQUAL
31895: IFTRUE 31899
31897: GO 31917
31899: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31900: LD_ADDR_VAR 0 3
31904: PUSH
31905: LD_INT 23
31907: PUSH
31908: LD_INT 24
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: ST_TO_ADDR
31915: GO 31944
31917: LD_INT 47
31919: DOUBLE
31920: EQUAL
31921: IFTRUE 31925
31923: GO 31943
31925: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31926: LD_ADDR_VAR 0 3
31930: PUSH
31931: LD_INT 23
31933: PUSH
31934: LD_INT 24
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: ST_TO_ADDR
31941: GO 31944
31943: POP
// result := ( chassis in result ) ;
31944: LD_ADDR_VAR 0 3
31948: PUSH
31949: LD_VAR 0 1
31953: PUSH
31954: LD_VAR 0 3
31958: IN
31959: ST_TO_ADDR
// end ;
31960: LD_VAR 0 3
31964: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31965: LD_INT 0
31967: PPUSH
31968: PPUSH
31969: PPUSH
31970: PPUSH
31971: PPUSH
31972: PPUSH
31973: PPUSH
// result := array ;
31974: LD_ADDR_VAR 0 5
31978: PUSH
31979: LD_VAR 0 1
31983: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31984: LD_VAR 0 1
31988: NOT
31989: PUSH
31990: LD_VAR 0 2
31994: NOT
31995: OR
31996: PUSH
31997: LD_VAR 0 3
32001: NOT
32002: OR
32003: PUSH
32004: LD_VAR 0 2
32008: PUSH
32009: LD_VAR 0 1
32013: GREATER
32014: OR
32015: PUSH
32016: LD_VAR 0 3
32020: PUSH
32021: LD_VAR 0 1
32025: GREATER
32026: OR
32027: IFFALSE 32031
// exit ;
32029: GO 32327
// if direction then
32031: LD_VAR 0 4
32035: IFFALSE 32099
// begin d := 1 ;
32037: LD_ADDR_VAR 0 9
32041: PUSH
32042: LD_INT 1
32044: ST_TO_ADDR
// if i_from > i_to then
32045: LD_VAR 0 2
32049: PUSH
32050: LD_VAR 0 3
32054: GREATER
32055: IFFALSE 32081
// length := ( array - i_from ) + i_to else
32057: LD_ADDR_VAR 0 11
32061: PUSH
32062: LD_VAR 0 1
32066: PUSH
32067: LD_VAR 0 2
32071: MINUS
32072: PUSH
32073: LD_VAR 0 3
32077: PLUS
32078: ST_TO_ADDR
32079: GO 32097
// length := i_to - i_from ;
32081: LD_ADDR_VAR 0 11
32085: PUSH
32086: LD_VAR 0 3
32090: PUSH
32091: LD_VAR 0 2
32095: MINUS
32096: ST_TO_ADDR
// end else
32097: GO 32160
// begin d := - 1 ;
32099: LD_ADDR_VAR 0 9
32103: PUSH
32104: LD_INT 1
32106: NEG
32107: ST_TO_ADDR
// if i_from > i_to then
32108: LD_VAR 0 2
32112: PUSH
32113: LD_VAR 0 3
32117: GREATER
32118: IFFALSE 32138
// length := i_from - i_to else
32120: LD_ADDR_VAR 0 11
32124: PUSH
32125: LD_VAR 0 2
32129: PUSH
32130: LD_VAR 0 3
32134: MINUS
32135: ST_TO_ADDR
32136: GO 32160
// length := ( array - i_to ) + i_from ;
32138: LD_ADDR_VAR 0 11
32142: PUSH
32143: LD_VAR 0 1
32147: PUSH
32148: LD_VAR 0 3
32152: MINUS
32153: PUSH
32154: LD_VAR 0 2
32158: PLUS
32159: ST_TO_ADDR
// end ; if not length then
32160: LD_VAR 0 11
32164: NOT
32165: IFFALSE 32169
// exit ;
32167: GO 32327
// tmp := array ;
32169: LD_ADDR_VAR 0 10
32173: PUSH
32174: LD_VAR 0 1
32178: ST_TO_ADDR
// for i = 1 to length do
32179: LD_ADDR_VAR 0 6
32183: PUSH
32184: DOUBLE
32185: LD_INT 1
32187: DEC
32188: ST_TO_ADDR
32189: LD_VAR 0 11
32193: PUSH
32194: FOR_TO
32195: IFFALSE 32315
// begin for j = 1 to array do
32197: LD_ADDR_VAR 0 7
32201: PUSH
32202: DOUBLE
32203: LD_INT 1
32205: DEC
32206: ST_TO_ADDR
32207: LD_VAR 0 1
32211: PUSH
32212: FOR_TO
32213: IFFALSE 32301
// begin k := j + d ;
32215: LD_ADDR_VAR 0 8
32219: PUSH
32220: LD_VAR 0 7
32224: PUSH
32225: LD_VAR 0 9
32229: PLUS
32230: ST_TO_ADDR
// if k > array then
32231: LD_VAR 0 8
32235: PUSH
32236: LD_VAR 0 1
32240: GREATER
32241: IFFALSE 32251
// k := 1 ;
32243: LD_ADDR_VAR 0 8
32247: PUSH
32248: LD_INT 1
32250: ST_TO_ADDR
// if not k then
32251: LD_VAR 0 8
32255: NOT
32256: IFFALSE 32268
// k := array ;
32258: LD_ADDR_VAR 0 8
32262: PUSH
32263: LD_VAR 0 1
32267: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32268: LD_ADDR_VAR 0 10
32272: PUSH
32273: LD_VAR 0 10
32277: PPUSH
32278: LD_VAR 0 8
32282: PPUSH
32283: LD_VAR 0 1
32287: PUSH
32288: LD_VAR 0 7
32292: ARRAY
32293: PPUSH
32294: CALL_OW 1
32298: ST_TO_ADDR
// end ;
32299: GO 32212
32301: POP
32302: POP
// array := tmp ;
32303: LD_ADDR_VAR 0 1
32307: PUSH
32308: LD_VAR 0 10
32312: ST_TO_ADDR
// end ;
32313: GO 32194
32315: POP
32316: POP
// result := array ;
32317: LD_ADDR_VAR 0 5
32321: PUSH
32322: LD_VAR 0 1
32326: ST_TO_ADDR
// end ;
32327: LD_VAR 0 5
32331: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32332: LD_INT 0
32334: PPUSH
32335: PPUSH
// result := 0 ;
32336: LD_ADDR_VAR 0 3
32340: PUSH
32341: LD_INT 0
32343: ST_TO_ADDR
// if not array or not value in array then
32344: LD_VAR 0 1
32348: NOT
32349: PUSH
32350: LD_VAR 0 2
32354: PUSH
32355: LD_VAR 0 1
32359: IN
32360: NOT
32361: OR
32362: IFFALSE 32366
// exit ;
32364: GO 32420
// for i = 1 to array do
32366: LD_ADDR_VAR 0 4
32370: PUSH
32371: DOUBLE
32372: LD_INT 1
32374: DEC
32375: ST_TO_ADDR
32376: LD_VAR 0 1
32380: PUSH
32381: FOR_TO
32382: IFFALSE 32418
// if value = array [ i ] then
32384: LD_VAR 0 2
32388: PUSH
32389: LD_VAR 0 1
32393: PUSH
32394: LD_VAR 0 4
32398: ARRAY
32399: EQUAL
32400: IFFALSE 32416
// begin result := i ;
32402: LD_ADDR_VAR 0 3
32406: PUSH
32407: LD_VAR 0 4
32411: ST_TO_ADDR
// exit ;
32412: POP
32413: POP
32414: GO 32420
// end ;
32416: GO 32381
32418: POP
32419: POP
// end ;
32420: LD_VAR 0 3
32424: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32425: LD_INT 0
32427: PPUSH
// vc_chassis := chassis ;
32428: LD_ADDR_OWVAR 37
32432: PUSH
32433: LD_VAR 0 1
32437: ST_TO_ADDR
// vc_engine := engine ;
32438: LD_ADDR_OWVAR 39
32442: PUSH
32443: LD_VAR 0 2
32447: ST_TO_ADDR
// vc_control := control ;
32448: LD_ADDR_OWVAR 38
32452: PUSH
32453: LD_VAR 0 3
32457: ST_TO_ADDR
// vc_weapon := weapon ;
32458: LD_ADDR_OWVAR 40
32462: PUSH
32463: LD_VAR 0 4
32467: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32468: LD_ADDR_OWVAR 41
32472: PUSH
32473: LD_VAR 0 5
32477: ST_TO_ADDR
// end ;
32478: LD_VAR 0 6
32482: RET
// export function WantPlant ( unit ) ; var task ; begin
32483: LD_INT 0
32485: PPUSH
32486: PPUSH
// result := false ;
32487: LD_ADDR_VAR 0 2
32491: PUSH
32492: LD_INT 0
32494: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32495: LD_ADDR_VAR 0 3
32499: PUSH
32500: LD_VAR 0 1
32504: PPUSH
32505: CALL_OW 437
32509: ST_TO_ADDR
// if task then
32510: LD_VAR 0 3
32514: IFFALSE 32542
// if task [ 1 ] [ 1 ] = p then
32516: LD_VAR 0 3
32520: PUSH
32521: LD_INT 1
32523: ARRAY
32524: PUSH
32525: LD_INT 1
32527: ARRAY
32528: PUSH
32529: LD_STRING p
32531: EQUAL
32532: IFFALSE 32542
// result := true ;
32534: LD_ADDR_VAR 0 2
32538: PUSH
32539: LD_INT 1
32541: ST_TO_ADDR
// end ;
32542: LD_VAR 0 2
32546: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32547: LD_INT 0
32549: PPUSH
32550: PPUSH
32551: PPUSH
32552: PPUSH
// if pos < 1 then
32553: LD_VAR 0 2
32557: PUSH
32558: LD_INT 1
32560: LESS
32561: IFFALSE 32565
// exit ;
32563: GO 32868
// if pos = 1 then
32565: LD_VAR 0 2
32569: PUSH
32570: LD_INT 1
32572: EQUAL
32573: IFFALSE 32606
// result := Replace ( arr , pos [ 1 ] , value ) else
32575: LD_ADDR_VAR 0 4
32579: PUSH
32580: LD_VAR 0 1
32584: PPUSH
32585: LD_VAR 0 2
32589: PUSH
32590: LD_INT 1
32592: ARRAY
32593: PPUSH
32594: LD_VAR 0 3
32598: PPUSH
32599: CALL_OW 1
32603: ST_TO_ADDR
32604: GO 32868
// begin tmp := arr ;
32606: LD_ADDR_VAR 0 6
32610: PUSH
32611: LD_VAR 0 1
32615: ST_TO_ADDR
// s_arr := [ tmp ] ;
32616: LD_ADDR_VAR 0 7
32620: PUSH
32621: LD_VAR 0 6
32625: PUSH
32626: EMPTY
32627: LIST
32628: ST_TO_ADDR
// for i = 1 to pos - 1 do
32629: LD_ADDR_VAR 0 5
32633: PUSH
32634: DOUBLE
32635: LD_INT 1
32637: DEC
32638: ST_TO_ADDR
32639: LD_VAR 0 2
32643: PUSH
32644: LD_INT 1
32646: MINUS
32647: PUSH
32648: FOR_TO
32649: IFFALSE 32694
// begin tmp := tmp [ pos [ i ] ] ;
32651: LD_ADDR_VAR 0 6
32655: PUSH
32656: LD_VAR 0 6
32660: PUSH
32661: LD_VAR 0 2
32665: PUSH
32666: LD_VAR 0 5
32670: ARRAY
32671: ARRAY
32672: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32673: LD_ADDR_VAR 0 7
32677: PUSH
32678: LD_VAR 0 7
32682: PUSH
32683: LD_VAR 0 6
32687: PUSH
32688: EMPTY
32689: LIST
32690: ADD
32691: ST_TO_ADDR
// end ;
32692: GO 32648
32694: POP
32695: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32696: LD_ADDR_VAR 0 6
32700: PUSH
32701: LD_VAR 0 6
32705: PPUSH
32706: LD_VAR 0 2
32710: PUSH
32711: LD_VAR 0 2
32715: ARRAY
32716: PPUSH
32717: LD_VAR 0 3
32721: PPUSH
32722: CALL_OW 1
32726: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32727: LD_ADDR_VAR 0 7
32731: PUSH
32732: LD_VAR 0 7
32736: PPUSH
32737: LD_VAR 0 7
32741: PPUSH
32742: LD_VAR 0 6
32746: PPUSH
32747: CALL_OW 1
32751: ST_TO_ADDR
// for i = s_arr downto 2 do
32752: LD_ADDR_VAR 0 5
32756: PUSH
32757: DOUBLE
32758: LD_VAR 0 7
32762: INC
32763: ST_TO_ADDR
32764: LD_INT 2
32766: PUSH
32767: FOR_DOWNTO
32768: IFFALSE 32852
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32770: LD_ADDR_VAR 0 6
32774: PUSH
32775: LD_VAR 0 7
32779: PUSH
32780: LD_VAR 0 5
32784: PUSH
32785: LD_INT 1
32787: MINUS
32788: ARRAY
32789: PPUSH
32790: LD_VAR 0 2
32794: PUSH
32795: LD_VAR 0 5
32799: PUSH
32800: LD_INT 1
32802: MINUS
32803: ARRAY
32804: PPUSH
32805: LD_VAR 0 7
32809: PUSH
32810: LD_VAR 0 5
32814: ARRAY
32815: PPUSH
32816: CALL_OW 1
32820: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32821: LD_ADDR_VAR 0 7
32825: PUSH
32826: LD_VAR 0 7
32830: PPUSH
32831: LD_VAR 0 5
32835: PUSH
32836: LD_INT 1
32838: MINUS
32839: PPUSH
32840: LD_VAR 0 6
32844: PPUSH
32845: CALL_OW 1
32849: ST_TO_ADDR
// end ;
32850: GO 32767
32852: POP
32853: POP
// result := s_arr [ 1 ] ;
32854: LD_ADDR_VAR 0 4
32858: PUSH
32859: LD_VAR 0 7
32863: PUSH
32864: LD_INT 1
32866: ARRAY
32867: ST_TO_ADDR
// end ; end ;
32868: LD_VAR 0 4
32872: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32873: LD_INT 0
32875: PPUSH
32876: PPUSH
// if not list then
32877: LD_VAR 0 1
32881: NOT
32882: IFFALSE 32886
// exit ;
32884: GO 32977
// i := list [ pos1 ] ;
32886: LD_ADDR_VAR 0 5
32890: PUSH
32891: LD_VAR 0 1
32895: PUSH
32896: LD_VAR 0 2
32900: ARRAY
32901: ST_TO_ADDR
// if not i then
32902: LD_VAR 0 5
32906: NOT
32907: IFFALSE 32911
// exit ;
32909: GO 32977
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32911: LD_ADDR_VAR 0 1
32915: PUSH
32916: LD_VAR 0 1
32920: PPUSH
32921: LD_VAR 0 2
32925: PPUSH
32926: LD_VAR 0 1
32930: PUSH
32931: LD_VAR 0 3
32935: ARRAY
32936: PPUSH
32937: CALL_OW 1
32941: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32942: LD_ADDR_VAR 0 1
32946: PUSH
32947: LD_VAR 0 1
32951: PPUSH
32952: LD_VAR 0 3
32956: PPUSH
32957: LD_VAR 0 5
32961: PPUSH
32962: CALL_OW 1
32966: ST_TO_ADDR
// result := list ;
32967: LD_ADDR_VAR 0 4
32971: PUSH
32972: LD_VAR 0 1
32976: ST_TO_ADDR
// end ;
32977: LD_VAR 0 4
32981: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32982: LD_INT 0
32984: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32985: LD_ADDR_VAR 0 5
32989: PUSH
32990: LD_VAR 0 1
32994: PPUSH
32995: CALL_OW 250
32999: PPUSH
33000: LD_VAR 0 1
33004: PPUSH
33005: CALL_OW 251
33009: PPUSH
33010: LD_VAR 0 2
33014: PPUSH
33015: LD_VAR 0 3
33019: PPUSH
33020: LD_VAR 0 4
33024: PPUSH
33025: CALL 33403 0 5
33029: ST_TO_ADDR
// end ;
33030: LD_VAR 0 5
33034: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33035: LD_INT 0
33037: PPUSH
33038: PPUSH
33039: PPUSH
33040: PPUSH
// if not list or not unit then
33041: LD_VAR 0 2
33045: NOT
33046: PUSH
33047: LD_VAR 0 1
33051: NOT
33052: OR
33053: IFFALSE 33057
// exit ;
33055: GO 33398
// result := [ ] ;
33057: LD_ADDR_VAR 0 5
33061: PUSH
33062: EMPTY
33063: ST_TO_ADDR
// for i in list do
33064: LD_ADDR_VAR 0 6
33068: PUSH
33069: LD_VAR 0 2
33073: PUSH
33074: FOR_IN
33075: IFFALSE 33293
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33077: LD_ADDR_VAR 0 8
33081: PUSH
33082: LD_VAR 0 1
33086: PPUSH
33087: LD_VAR 0 6
33091: PUSH
33092: LD_INT 1
33094: ARRAY
33095: PPUSH
33096: LD_VAR 0 6
33100: PUSH
33101: LD_INT 2
33103: ARRAY
33104: PPUSH
33105: CALL_OW 297
33109: ST_TO_ADDR
// if not Count ( result ) then
33110: LD_VAR 0 5
33114: PPUSH
33115: CALL 29687 0 1
33119: NOT
33120: IFFALSE 33153
// begin result := Join ( result , [ i , tmp ] ) ;
33122: LD_ADDR_VAR 0 5
33126: PUSH
33127: LD_VAR 0 5
33131: PPUSH
33132: LD_VAR 0 6
33136: PUSH
33137: LD_VAR 0 8
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PPUSH
33146: CALL 65287 0 2
33150: ST_TO_ADDR
// continue ;
33151: GO 33074
// end ; if result [ result ] [ 2 ] <= tmp then
33153: LD_VAR 0 5
33157: PUSH
33158: LD_VAR 0 5
33162: ARRAY
33163: PUSH
33164: LD_INT 2
33166: ARRAY
33167: PUSH
33168: LD_VAR 0 8
33172: LESSEQUAL
33173: IFFALSE 33206
// result := Join ( result , [ i , tmp ] ) else
33175: LD_ADDR_VAR 0 5
33179: PUSH
33180: LD_VAR 0 5
33184: PPUSH
33185: LD_VAR 0 6
33189: PUSH
33190: LD_VAR 0 8
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PPUSH
33199: CALL 65287 0 2
33203: ST_TO_ADDR
33204: GO 33291
// begin for j := 1 to Count ( result ) do
33206: LD_ADDR_VAR 0 7
33210: PUSH
33211: DOUBLE
33212: LD_INT 1
33214: DEC
33215: ST_TO_ADDR
33216: LD_VAR 0 5
33220: PPUSH
33221: CALL 29687 0 1
33225: PUSH
33226: FOR_TO
33227: IFFALSE 33289
// begin if tmp < result [ j ] [ 2 ] then
33229: LD_VAR 0 8
33233: PUSH
33234: LD_VAR 0 5
33238: PUSH
33239: LD_VAR 0 7
33243: ARRAY
33244: PUSH
33245: LD_INT 2
33247: ARRAY
33248: LESS
33249: IFFALSE 33287
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33251: LD_ADDR_VAR 0 5
33255: PUSH
33256: LD_VAR 0 5
33260: PPUSH
33261: LD_VAR 0 7
33265: PPUSH
33266: LD_VAR 0 6
33270: PUSH
33271: LD_VAR 0 8
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PPUSH
33280: CALL_OW 2
33284: ST_TO_ADDR
// break ;
33285: GO 33289
// end ; end ;
33287: GO 33226
33289: POP
33290: POP
// end ; end ;
33291: GO 33074
33293: POP
33294: POP
// if result and not asc then
33295: LD_VAR 0 5
33299: PUSH
33300: LD_VAR 0 3
33304: NOT
33305: AND
33306: IFFALSE 33323
// result := ReverseArray ( result ) ;
33308: LD_ADDR_VAR 0 5
33312: PUSH
33313: LD_VAR 0 5
33317: PPUSH
33318: CALL 60563 0 1
33322: ST_TO_ADDR
// tmp := [ ] ;
33323: LD_ADDR_VAR 0 8
33327: PUSH
33328: EMPTY
33329: ST_TO_ADDR
// if mode then
33330: LD_VAR 0 4
33334: IFFALSE 33398
// begin for i := 1 to result do
33336: LD_ADDR_VAR 0 6
33340: PUSH
33341: DOUBLE
33342: LD_INT 1
33344: DEC
33345: ST_TO_ADDR
33346: LD_VAR 0 5
33350: PUSH
33351: FOR_TO
33352: IFFALSE 33386
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33354: LD_ADDR_VAR 0 8
33358: PUSH
33359: LD_VAR 0 8
33363: PPUSH
33364: LD_VAR 0 5
33368: PUSH
33369: LD_VAR 0 6
33373: ARRAY
33374: PUSH
33375: LD_INT 1
33377: ARRAY
33378: PPUSH
33379: CALL 65287 0 2
33383: ST_TO_ADDR
33384: GO 33351
33386: POP
33387: POP
// result := tmp ;
33388: LD_ADDR_VAR 0 5
33392: PUSH
33393: LD_VAR 0 8
33397: ST_TO_ADDR
// end ; end ;
33398: LD_VAR 0 5
33402: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33403: LD_INT 0
33405: PPUSH
33406: PPUSH
33407: PPUSH
33408: PPUSH
// if not list then
33409: LD_VAR 0 3
33413: NOT
33414: IFFALSE 33418
// exit ;
33416: GO 33806
// result := [ ] ;
33418: LD_ADDR_VAR 0 6
33422: PUSH
33423: EMPTY
33424: ST_TO_ADDR
// for i in list do
33425: LD_ADDR_VAR 0 7
33429: PUSH
33430: LD_VAR 0 3
33434: PUSH
33435: FOR_IN
33436: IFFALSE 33638
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33438: LD_ADDR_VAR 0 9
33442: PUSH
33443: LD_VAR 0 7
33447: PPUSH
33448: LD_VAR 0 1
33452: PPUSH
33453: LD_VAR 0 2
33457: PPUSH
33458: CALL_OW 297
33462: ST_TO_ADDR
// if not result then
33463: LD_VAR 0 6
33467: NOT
33468: IFFALSE 33494
// result := [ [ i , tmp ] ] else
33470: LD_ADDR_VAR 0 6
33474: PUSH
33475: LD_VAR 0 7
33479: PUSH
33480: LD_VAR 0 9
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: EMPTY
33490: LIST
33491: ST_TO_ADDR
33492: GO 33636
// begin if result [ result ] [ 2 ] < tmp then
33494: LD_VAR 0 6
33498: PUSH
33499: LD_VAR 0 6
33503: ARRAY
33504: PUSH
33505: LD_INT 2
33507: ARRAY
33508: PUSH
33509: LD_VAR 0 9
33513: LESS
33514: IFFALSE 33556
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33516: LD_ADDR_VAR 0 6
33520: PUSH
33521: LD_VAR 0 6
33525: PPUSH
33526: LD_VAR 0 6
33530: PUSH
33531: LD_INT 1
33533: PLUS
33534: PPUSH
33535: LD_VAR 0 7
33539: PUSH
33540: LD_VAR 0 9
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PPUSH
33549: CALL_OW 2
33553: ST_TO_ADDR
33554: GO 33636
// for j = 1 to result do
33556: LD_ADDR_VAR 0 8
33560: PUSH
33561: DOUBLE
33562: LD_INT 1
33564: DEC
33565: ST_TO_ADDR
33566: LD_VAR 0 6
33570: PUSH
33571: FOR_TO
33572: IFFALSE 33634
// begin if tmp < result [ j ] [ 2 ] then
33574: LD_VAR 0 9
33578: PUSH
33579: LD_VAR 0 6
33583: PUSH
33584: LD_VAR 0 8
33588: ARRAY
33589: PUSH
33590: LD_INT 2
33592: ARRAY
33593: LESS
33594: IFFALSE 33632
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33596: LD_ADDR_VAR 0 6
33600: PUSH
33601: LD_VAR 0 6
33605: PPUSH
33606: LD_VAR 0 8
33610: PPUSH
33611: LD_VAR 0 7
33615: PUSH
33616: LD_VAR 0 9
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PPUSH
33625: CALL_OW 2
33629: ST_TO_ADDR
// break ;
33630: GO 33634
// end ; end ;
33632: GO 33571
33634: POP
33635: POP
// end ; end ;
33636: GO 33435
33638: POP
33639: POP
// if result and not asc then
33640: LD_VAR 0 6
33644: PUSH
33645: LD_VAR 0 4
33649: NOT
33650: AND
33651: IFFALSE 33726
// begin tmp := result ;
33653: LD_ADDR_VAR 0 9
33657: PUSH
33658: LD_VAR 0 6
33662: ST_TO_ADDR
// for i = tmp downto 1 do
33663: LD_ADDR_VAR 0 7
33667: PUSH
33668: DOUBLE
33669: LD_VAR 0 9
33673: INC
33674: ST_TO_ADDR
33675: LD_INT 1
33677: PUSH
33678: FOR_DOWNTO
33679: IFFALSE 33724
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33681: LD_ADDR_VAR 0 6
33685: PUSH
33686: LD_VAR 0 6
33690: PPUSH
33691: LD_VAR 0 9
33695: PUSH
33696: LD_VAR 0 7
33700: MINUS
33701: PUSH
33702: LD_INT 1
33704: PLUS
33705: PPUSH
33706: LD_VAR 0 9
33710: PUSH
33711: LD_VAR 0 7
33715: ARRAY
33716: PPUSH
33717: CALL_OW 1
33721: ST_TO_ADDR
33722: GO 33678
33724: POP
33725: POP
// end ; tmp := [ ] ;
33726: LD_ADDR_VAR 0 9
33730: PUSH
33731: EMPTY
33732: ST_TO_ADDR
// if mode then
33733: LD_VAR 0 5
33737: IFFALSE 33806
// begin for i = 1 to result do
33739: LD_ADDR_VAR 0 7
33743: PUSH
33744: DOUBLE
33745: LD_INT 1
33747: DEC
33748: ST_TO_ADDR
33749: LD_VAR 0 6
33753: PUSH
33754: FOR_TO
33755: IFFALSE 33794
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33757: LD_ADDR_VAR 0 9
33761: PUSH
33762: LD_VAR 0 9
33766: PPUSH
33767: LD_VAR 0 7
33771: PPUSH
33772: LD_VAR 0 6
33776: PUSH
33777: LD_VAR 0 7
33781: ARRAY
33782: PUSH
33783: LD_INT 1
33785: ARRAY
33786: PPUSH
33787: CALL_OW 1
33791: ST_TO_ADDR
33792: GO 33754
33794: POP
33795: POP
// result := tmp ;
33796: LD_ADDR_VAR 0 6
33800: PUSH
33801: LD_VAR 0 9
33805: ST_TO_ADDR
// end ; end ;
33806: LD_VAR 0 6
33810: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33811: LD_INT 0
33813: PPUSH
33814: PPUSH
33815: PPUSH
33816: PPUSH
33817: PPUSH
33818: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33819: LD_ADDR_VAR 0 5
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: EMPTY
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: ST_TO_ADDR
// if not x or not y then
33841: LD_VAR 0 2
33845: NOT
33846: PUSH
33847: LD_VAR 0 3
33851: NOT
33852: OR
33853: IFFALSE 33857
// exit ;
33855: GO 35507
// if not range then
33857: LD_VAR 0 4
33861: NOT
33862: IFFALSE 33872
// range := 10 ;
33864: LD_ADDR_VAR 0 4
33868: PUSH
33869: LD_INT 10
33871: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33872: LD_ADDR_VAR 0 8
33876: PUSH
33877: LD_INT 81
33879: PUSH
33880: LD_VAR 0 1
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 92
33891: PUSH
33892: LD_VAR 0 2
33896: PUSH
33897: LD_VAR 0 3
33901: PUSH
33902: LD_VAR 0 4
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 3
33915: PUSH
33916: LD_INT 21
33918: PUSH
33919: LD_INT 3
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: LIST
33934: PPUSH
33935: CALL_OW 69
33939: ST_TO_ADDR
// if not tmp then
33940: LD_VAR 0 8
33944: NOT
33945: IFFALSE 33949
// exit ;
33947: GO 35507
// for i in tmp do
33949: LD_ADDR_VAR 0 6
33953: PUSH
33954: LD_VAR 0 8
33958: PUSH
33959: FOR_IN
33960: IFFALSE 35482
// begin points := [ 0 , 0 , 0 ] ;
33962: LD_ADDR_VAR 0 9
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: LIST
33980: ST_TO_ADDR
// bpoints := 1 ;
33981: LD_ADDR_VAR 0 10
33985: PUSH
33986: LD_INT 1
33988: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33989: LD_VAR 0 6
33993: PPUSH
33994: CALL_OW 247
33998: PUSH
33999: LD_INT 1
34001: DOUBLE
34002: EQUAL
34003: IFTRUE 34007
34005: GO 34585
34007: POP
// begin if GetClass ( i ) = 1 then
34008: LD_VAR 0 6
34012: PPUSH
34013: CALL_OW 257
34017: PUSH
34018: LD_INT 1
34020: EQUAL
34021: IFFALSE 34042
// points := [ 10 , 5 , 3 ] ;
34023: LD_ADDR_VAR 0 9
34027: PUSH
34028: LD_INT 10
34030: PUSH
34031: LD_INT 5
34033: PUSH
34034: LD_INT 3
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: LIST
34041: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34042: LD_VAR 0 6
34046: PPUSH
34047: CALL_OW 257
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: LD_INT 3
34057: PUSH
34058: LD_INT 4
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: LIST
34065: IN
34066: IFFALSE 34087
// points := [ 3 , 2 , 1 ] ;
34068: LD_ADDR_VAR 0 9
34072: PUSH
34073: LD_INT 3
34075: PUSH
34076: LD_INT 2
34078: PUSH
34079: LD_INT 1
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: LIST
34086: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34087: LD_VAR 0 6
34091: PPUSH
34092: CALL_OW 257
34096: PUSH
34097: LD_INT 5
34099: EQUAL
34100: IFFALSE 34121
// points := [ 130 , 5 , 2 ] ;
34102: LD_ADDR_VAR 0 9
34106: PUSH
34107: LD_INT 130
34109: PUSH
34110: LD_INT 5
34112: PUSH
34113: LD_INT 2
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: LIST
34120: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34121: LD_VAR 0 6
34125: PPUSH
34126: CALL_OW 257
34130: PUSH
34131: LD_INT 8
34133: EQUAL
34134: IFFALSE 34155
// points := [ 35 , 35 , 30 ] ;
34136: LD_ADDR_VAR 0 9
34140: PUSH
34141: LD_INT 35
34143: PUSH
34144: LD_INT 35
34146: PUSH
34147: LD_INT 30
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: LIST
34154: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34155: LD_VAR 0 6
34159: PPUSH
34160: CALL_OW 257
34164: PUSH
34165: LD_INT 9
34167: EQUAL
34168: IFFALSE 34189
// points := [ 20 , 55 , 40 ] ;
34170: LD_ADDR_VAR 0 9
34174: PUSH
34175: LD_INT 20
34177: PUSH
34178: LD_INT 55
34180: PUSH
34181: LD_INT 40
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: LIST
34188: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34189: LD_VAR 0 6
34193: PPUSH
34194: CALL_OW 257
34198: PUSH
34199: LD_INT 12
34201: PUSH
34202: LD_INT 16
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: IN
34209: IFFALSE 34230
// points := [ 5 , 3 , 2 ] ;
34211: LD_ADDR_VAR 0 9
34215: PUSH
34216: LD_INT 5
34218: PUSH
34219: LD_INT 3
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: LIST
34229: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34230: LD_VAR 0 6
34234: PPUSH
34235: CALL_OW 257
34239: PUSH
34240: LD_INT 17
34242: EQUAL
34243: IFFALSE 34264
// points := [ 100 , 50 , 75 ] ;
34245: LD_ADDR_VAR 0 9
34249: PUSH
34250: LD_INT 100
34252: PUSH
34253: LD_INT 50
34255: PUSH
34256: LD_INT 75
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: LIST
34263: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34264: LD_VAR 0 6
34268: PPUSH
34269: CALL_OW 257
34273: PUSH
34274: LD_INT 15
34276: EQUAL
34277: IFFALSE 34298
// points := [ 10 , 5 , 3 ] ;
34279: LD_ADDR_VAR 0 9
34283: PUSH
34284: LD_INT 10
34286: PUSH
34287: LD_INT 5
34289: PUSH
34290: LD_INT 3
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: LIST
34297: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34298: LD_VAR 0 6
34302: PPUSH
34303: CALL_OW 257
34307: PUSH
34308: LD_INT 14
34310: EQUAL
34311: IFFALSE 34332
// points := [ 10 , 0 , 0 ] ;
34313: LD_ADDR_VAR 0 9
34317: PUSH
34318: LD_INT 10
34320: PUSH
34321: LD_INT 0
34323: PUSH
34324: LD_INT 0
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: LIST
34331: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34332: LD_VAR 0 6
34336: PPUSH
34337: CALL_OW 257
34341: PUSH
34342: LD_INT 11
34344: EQUAL
34345: IFFALSE 34366
// points := [ 30 , 10 , 5 ] ;
34347: LD_ADDR_VAR 0 9
34351: PUSH
34352: LD_INT 30
34354: PUSH
34355: LD_INT 10
34357: PUSH
34358: LD_INT 5
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: LIST
34365: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34366: LD_VAR 0 1
34370: PPUSH
34371: LD_INT 5
34373: PPUSH
34374: CALL_OW 321
34378: PUSH
34379: LD_INT 2
34381: EQUAL
34382: IFFALSE 34399
// bpoints := bpoints * 1.8 ;
34384: LD_ADDR_VAR 0 10
34388: PUSH
34389: LD_VAR 0 10
34393: PUSH
34394: LD_REAL  1.80000000000000E+0000
34397: MUL
34398: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34399: LD_VAR 0 6
34403: PPUSH
34404: CALL_OW 257
34408: PUSH
34409: LD_INT 1
34411: PUSH
34412: LD_INT 2
34414: PUSH
34415: LD_INT 3
34417: PUSH
34418: LD_INT 4
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: IN
34427: PUSH
34428: LD_VAR 0 1
34432: PPUSH
34433: LD_INT 51
34435: PPUSH
34436: CALL_OW 321
34440: PUSH
34441: LD_INT 2
34443: EQUAL
34444: AND
34445: IFFALSE 34462
// bpoints := bpoints * 1.2 ;
34447: LD_ADDR_VAR 0 10
34451: PUSH
34452: LD_VAR 0 10
34456: PUSH
34457: LD_REAL  1.20000000000000E+0000
34460: MUL
34461: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34462: LD_VAR 0 6
34466: PPUSH
34467: CALL_OW 257
34471: PUSH
34472: LD_INT 5
34474: PUSH
34475: LD_INT 7
34477: PUSH
34478: LD_INT 9
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: LIST
34485: IN
34486: PUSH
34487: LD_VAR 0 1
34491: PPUSH
34492: LD_INT 52
34494: PPUSH
34495: CALL_OW 321
34499: PUSH
34500: LD_INT 2
34502: EQUAL
34503: AND
34504: IFFALSE 34521
// bpoints := bpoints * 1.5 ;
34506: LD_ADDR_VAR 0 10
34510: PUSH
34511: LD_VAR 0 10
34515: PUSH
34516: LD_REAL  1.50000000000000E+0000
34519: MUL
34520: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34521: LD_VAR 0 1
34525: PPUSH
34526: LD_INT 66
34528: PPUSH
34529: CALL_OW 321
34533: PUSH
34534: LD_INT 2
34536: EQUAL
34537: IFFALSE 34554
// bpoints := bpoints * 1.1 ;
34539: LD_ADDR_VAR 0 10
34543: PUSH
34544: LD_VAR 0 10
34548: PUSH
34549: LD_REAL  1.10000000000000E+0000
34552: MUL
34553: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34554: LD_ADDR_VAR 0 10
34558: PUSH
34559: LD_VAR 0 10
34563: PUSH
34564: LD_VAR 0 6
34568: PPUSH
34569: LD_INT 1
34571: PPUSH
34572: CALL_OW 259
34576: PUSH
34577: LD_REAL  1.15000000000000E+0000
34580: MUL
34581: MUL
34582: ST_TO_ADDR
// end ; unit_vehicle :
34583: GO 35411
34585: LD_INT 2
34587: DOUBLE
34588: EQUAL
34589: IFTRUE 34593
34591: GO 35399
34593: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34594: LD_VAR 0 6
34598: PPUSH
34599: CALL_OW 264
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: LD_INT 42
34609: PUSH
34610: LD_INT 24
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: LIST
34617: IN
34618: IFFALSE 34639
// points := [ 25 , 5 , 3 ] ;
34620: LD_ADDR_VAR 0 9
34624: PUSH
34625: LD_INT 25
34627: PUSH
34628: LD_INT 5
34630: PUSH
34631: LD_INT 3
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34639: LD_VAR 0 6
34643: PPUSH
34644: CALL_OW 264
34648: PUSH
34649: LD_INT 4
34651: PUSH
34652: LD_INT 43
34654: PUSH
34655: LD_INT 25
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: LIST
34662: IN
34663: IFFALSE 34684
// points := [ 40 , 15 , 5 ] ;
34665: LD_ADDR_VAR 0 9
34669: PUSH
34670: LD_INT 40
34672: PUSH
34673: LD_INT 15
34675: PUSH
34676: LD_INT 5
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: LIST
34683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34684: LD_VAR 0 6
34688: PPUSH
34689: CALL_OW 264
34693: PUSH
34694: LD_INT 3
34696: PUSH
34697: LD_INT 23
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: IN
34704: IFFALSE 34725
// points := [ 7 , 25 , 8 ] ;
34706: LD_ADDR_VAR 0 9
34710: PUSH
34711: LD_INT 7
34713: PUSH
34714: LD_INT 25
34716: PUSH
34717: LD_INT 8
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34725: LD_VAR 0 6
34729: PPUSH
34730: CALL_OW 264
34734: PUSH
34735: LD_INT 5
34737: PUSH
34738: LD_INT 27
34740: PUSH
34741: LD_INT 44
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: LIST
34748: IN
34749: IFFALSE 34770
// points := [ 14 , 50 , 16 ] ;
34751: LD_ADDR_VAR 0 9
34755: PUSH
34756: LD_INT 14
34758: PUSH
34759: LD_INT 50
34761: PUSH
34762: LD_INT 16
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34770: LD_VAR 0 6
34774: PPUSH
34775: CALL_OW 264
34779: PUSH
34780: LD_INT 6
34782: PUSH
34783: LD_INT 46
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: IN
34790: IFFALSE 34811
// points := [ 32 , 120 , 70 ] ;
34792: LD_ADDR_VAR 0 9
34796: PUSH
34797: LD_INT 32
34799: PUSH
34800: LD_INT 120
34802: PUSH
34803: LD_INT 70
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: LIST
34810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34811: LD_VAR 0 6
34815: PPUSH
34816: CALL_OW 264
34820: PUSH
34821: LD_INT 7
34823: PUSH
34824: LD_INT 28
34826: PUSH
34827: LD_INT 45
34829: PUSH
34830: LD_INT 92
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: IN
34839: IFFALSE 34860
// points := [ 35 , 20 , 45 ] ;
34841: LD_ADDR_VAR 0 9
34845: PUSH
34846: LD_INT 35
34848: PUSH
34849: LD_INT 20
34851: PUSH
34852: LD_INT 45
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: LIST
34859: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34860: LD_VAR 0 6
34864: PPUSH
34865: CALL_OW 264
34869: PUSH
34870: LD_INT 47
34872: PUSH
34873: EMPTY
34874: LIST
34875: IN
34876: IFFALSE 34897
// points := [ 67 , 45 , 75 ] ;
34878: LD_ADDR_VAR 0 9
34882: PUSH
34883: LD_INT 67
34885: PUSH
34886: LD_INT 45
34888: PUSH
34889: LD_INT 75
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: LIST
34896: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34897: LD_VAR 0 6
34901: PPUSH
34902: CALL_OW 264
34906: PUSH
34907: LD_INT 26
34909: PUSH
34910: EMPTY
34911: LIST
34912: IN
34913: IFFALSE 34934
// points := [ 120 , 30 , 80 ] ;
34915: LD_ADDR_VAR 0 9
34919: PUSH
34920: LD_INT 120
34922: PUSH
34923: LD_INT 30
34925: PUSH
34926: LD_INT 80
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34934: LD_VAR 0 6
34938: PPUSH
34939: CALL_OW 264
34943: PUSH
34944: LD_INT 22
34946: PUSH
34947: EMPTY
34948: LIST
34949: IN
34950: IFFALSE 34971
// points := [ 40 , 1 , 1 ] ;
34952: LD_ADDR_VAR 0 9
34956: PUSH
34957: LD_INT 40
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: LD_INT 1
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: LIST
34970: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34971: LD_VAR 0 6
34975: PPUSH
34976: CALL_OW 264
34980: PUSH
34981: LD_INT 29
34983: PUSH
34984: EMPTY
34985: LIST
34986: IN
34987: IFFALSE 35008
// points := [ 70 , 200 , 400 ] ;
34989: LD_ADDR_VAR 0 9
34993: PUSH
34994: LD_INT 70
34996: PUSH
34997: LD_INT 200
34999: PUSH
35000: LD_INT 400
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35008: LD_VAR 0 6
35012: PPUSH
35013: CALL_OW 264
35017: PUSH
35018: LD_INT 14
35020: PUSH
35021: LD_INT 53
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: IN
35028: IFFALSE 35049
// points := [ 40 , 10 , 20 ] ;
35030: LD_ADDR_VAR 0 9
35034: PUSH
35035: LD_INT 40
35037: PUSH
35038: LD_INT 10
35040: PUSH
35041: LD_INT 20
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: LIST
35048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35049: LD_VAR 0 6
35053: PPUSH
35054: CALL_OW 264
35058: PUSH
35059: LD_INT 9
35061: PUSH
35062: EMPTY
35063: LIST
35064: IN
35065: IFFALSE 35086
// points := [ 5 , 70 , 20 ] ;
35067: LD_ADDR_VAR 0 9
35071: PUSH
35072: LD_INT 5
35074: PUSH
35075: LD_INT 70
35077: PUSH
35078: LD_INT 20
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: LIST
35085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35086: LD_VAR 0 6
35090: PPUSH
35091: CALL_OW 264
35095: PUSH
35096: LD_INT 10
35098: PUSH
35099: EMPTY
35100: LIST
35101: IN
35102: IFFALSE 35123
// points := [ 35 , 110 , 70 ] ;
35104: LD_ADDR_VAR 0 9
35108: PUSH
35109: LD_INT 35
35111: PUSH
35112: LD_INT 110
35114: PUSH
35115: LD_INT 70
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: LIST
35122: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35123: LD_VAR 0 6
35127: PPUSH
35128: CALL_OW 265
35132: PUSH
35133: LD_INT 25
35135: EQUAL
35136: IFFALSE 35157
// points := [ 80 , 65 , 100 ] ;
35138: LD_ADDR_VAR 0 9
35142: PUSH
35143: LD_INT 80
35145: PUSH
35146: LD_INT 65
35148: PUSH
35149: LD_INT 100
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: LIST
35156: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35157: LD_VAR 0 6
35161: PPUSH
35162: CALL_OW 263
35166: PUSH
35167: LD_INT 1
35169: EQUAL
35170: IFFALSE 35205
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35172: LD_ADDR_VAR 0 10
35176: PUSH
35177: LD_VAR 0 10
35181: PUSH
35182: LD_VAR 0 6
35186: PPUSH
35187: CALL_OW 311
35191: PPUSH
35192: LD_INT 3
35194: PPUSH
35195: CALL_OW 259
35199: PUSH
35200: LD_INT 4
35202: MUL
35203: MUL
35204: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35205: LD_VAR 0 6
35209: PPUSH
35210: CALL_OW 263
35214: PUSH
35215: LD_INT 2
35217: EQUAL
35218: IFFALSE 35269
// begin j := IsControledBy ( i ) ;
35220: LD_ADDR_VAR 0 7
35224: PUSH
35225: LD_VAR 0 6
35229: PPUSH
35230: CALL_OW 312
35234: ST_TO_ADDR
// if j then
35235: LD_VAR 0 7
35239: IFFALSE 35269
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35241: LD_ADDR_VAR 0 10
35245: PUSH
35246: LD_VAR 0 10
35250: PUSH
35251: LD_VAR 0 7
35255: PPUSH
35256: LD_INT 3
35258: PPUSH
35259: CALL_OW 259
35263: PUSH
35264: LD_INT 3
35266: MUL
35267: MUL
35268: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35269: LD_VAR 0 6
35273: PPUSH
35274: CALL_OW 264
35278: PUSH
35279: LD_INT 5
35281: PUSH
35282: LD_INT 6
35284: PUSH
35285: LD_INT 46
35287: PUSH
35288: LD_INT 44
35290: PUSH
35291: LD_INT 47
35293: PUSH
35294: LD_INT 45
35296: PUSH
35297: LD_INT 28
35299: PUSH
35300: LD_INT 7
35302: PUSH
35303: LD_INT 27
35305: PUSH
35306: LD_INT 29
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: IN
35321: PUSH
35322: LD_VAR 0 1
35326: PPUSH
35327: LD_INT 52
35329: PPUSH
35330: CALL_OW 321
35334: PUSH
35335: LD_INT 2
35337: EQUAL
35338: AND
35339: IFFALSE 35356
// bpoints := bpoints * 1.2 ;
35341: LD_ADDR_VAR 0 10
35345: PUSH
35346: LD_VAR 0 10
35350: PUSH
35351: LD_REAL  1.20000000000000E+0000
35354: MUL
35355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35356: LD_VAR 0 6
35360: PPUSH
35361: CALL_OW 264
35365: PUSH
35366: LD_INT 6
35368: PUSH
35369: LD_INT 46
35371: PUSH
35372: LD_INT 47
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: LIST
35379: IN
35380: IFFALSE 35397
// bpoints := bpoints * 1.2 ;
35382: LD_ADDR_VAR 0 10
35386: PUSH
35387: LD_VAR 0 10
35391: PUSH
35392: LD_REAL  1.20000000000000E+0000
35395: MUL
35396: ST_TO_ADDR
// end ; unit_building :
35397: GO 35411
35399: LD_INT 3
35401: DOUBLE
35402: EQUAL
35403: IFTRUE 35407
35405: GO 35410
35407: POP
// ; end ;
35408: GO 35411
35410: POP
// for j = 1 to 3 do
35411: LD_ADDR_VAR 0 7
35415: PUSH
35416: DOUBLE
35417: LD_INT 1
35419: DEC
35420: ST_TO_ADDR
35421: LD_INT 3
35423: PUSH
35424: FOR_TO
35425: IFFALSE 35478
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35427: LD_ADDR_VAR 0 5
35431: PUSH
35432: LD_VAR 0 5
35436: PPUSH
35437: LD_VAR 0 7
35441: PPUSH
35442: LD_VAR 0 5
35446: PUSH
35447: LD_VAR 0 7
35451: ARRAY
35452: PUSH
35453: LD_VAR 0 9
35457: PUSH
35458: LD_VAR 0 7
35462: ARRAY
35463: PUSH
35464: LD_VAR 0 10
35468: MUL
35469: PLUS
35470: PPUSH
35471: CALL_OW 1
35475: ST_TO_ADDR
35476: GO 35424
35478: POP
35479: POP
// end ;
35480: GO 33959
35482: POP
35483: POP
// result := Replace ( result , 4 , tmp ) ;
35484: LD_ADDR_VAR 0 5
35488: PUSH
35489: LD_VAR 0 5
35493: PPUSH
35494: LD_INT 4
35496: PPUSH
35497: LD_VAR 0 8
35501: PPUSH
35502: CALL_OW 1
35506: ST_TO_ADDR
// end ;
35507: LD_VAR 0 5
35511: RET
// export function DangerAtRange ( unit , range ) ; begin
35512: LD_INT 0
35514: PPUSH
// if not unit then
35515: LD_VAR 0 1
35519: NOT
35520: IFFALSE 35524
// exit ;
35522: GO 35569
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35524: LD_ADDR_VAR 0 3
35528: PUSH
35529: LD_VAR 0 1
35533: PPUSH
35534: CALL_OW 255
35538: PPUSH
35539: LD_VAR 0 1
35543: PPUSH
35544: CALL_OW 250
35548: PPUSH
35549: LD_VAR 0 1
35553: PPUSH
35554: CALL_OW 251
35558: PPUSH
35559: LD_VAR 0 2
35563: PPUSH
35564: CALL 33811 0 4
35568: ST_TO_ADDR
// end ;
35569: LD_VAR 0 3
35573: RET
// export function DangerInArea ( side , area ) ; begin
35574: LD_INT 0
35576: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35577: LD_ADDR_VAR 0 3
35581: PUSH
35582: LD_VAR 0 2
35586: PPUSH
35587: LD_INT 81
35589: PUSH
35590: LD_VAR 0 1
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PPUSH
35599: CALL_OW 70
35603: ST_TO_ADDR
// end ;
35604: LD_VAR 0 3
35608: RET
// export function IsExtension ( b ) ; begin
35609: LD_INT 0
35611: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35612: LD_ADDR_VAR 0 2
35616: PUSH
35617: LD_VAR 0 1
35621: PUSH
35622: LD_INT 23
35624: PUSH
35625: LD_INT 20
35627: PUSH
35628: LD_INT 22
35630: PUSH
35631: LD_INT 17
35633: PUSH
35634: LD_INT 24
35636: PUSH
35637: LD_INT 21
35639: PUSH
35640: LD_INT 19
35642: PUSH
35643: LD_INT 16
35645: PUSH
35646: LD_INT 25
35648: PUSH
35649: LD_INT 18
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: IN
35664: ST_TO_ADDR
// end ;
35665: LD_VAR 0 2
35669: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35670: LD_INT 0
35672: PPUSH
35673: PPUSH
35674: PPUSH
// result := [ ] ;
35675: LD_ADDR_VAR 0 4
35679: PUSH
35680: EMPTY
35681: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35682: LD_ADDR_VAR 0 5
35686: PUSH
35687: LD_VAR 0 2
35691: PPUSH
35692: LD_INT 21
35694: PUSH
35695: LD_INT 3
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PPUSH
35702: CALL_OW 70
35706: ST_TO_ADDR
// if not tmp then
35707: LD_VAR 0 5
35711: NOT
35712: IFFALSE 35716
// exit ;
35714: GO 35780
// if checkLink then
35716: LD_VAR 0 3
35720: IFFALSE 35770
// begin for i in tmp do
35722: LD_ADDR_VAR 0 6
35726: PUSH
35727: LD_VAR 0 5
35731: PUSH
35732: FOR_IN
35733: IFFALSE 35768
// if GetBase ( i ) <> base then
35735: LD_VAR 0 6
35739: PPUSH
35740: CALL_OW 274
35744: PUSH
35745: LD_VAR 0 1
35749: NONEQUAL
35750: IFFALSE 35766
// ComLinkToBase ( base , i ) ;
35752: LD_VAR 0 1
35756: PPUSH
35757: LD_VAR 0 6
35761: PPUSH
35762: CALL_OW 169
35766: GO 35732
35768: POP
35769: POP
// end ; result := tmp ;
35770: LD_ADDR_VAR 0 4
35774: PUSH
35775: LD_VAR 0 5
35779: ST_TO_ADDR
// end ;
35780: LD_VAR 0 4
35784: RET
// export function ComComplete ( units , b ) ; var i ; begin
35785: LD_INT 0
35787: PPUSH
35788: PPUSH
// if not units then
35789: LD_VAR 0 1
35793: NOT
35794: IFFALSE 35798
// exit ;
35796: GO 35888
// for i in units do
35798: LD_ADDR_VAR 0 4
35802: PUSH
35803: LD_VAR 0 1
35807: PUSH
35808: FOR_IN
35809: IFFALSE 35886
// if BuildingStatus ( b ) = bs_build then
35811: LD_VAR 0 2
35815: PPUSH
35816: CALL_OW 461
35820: PUSH
35821: LD_INT 1
35823: EQUAL
35824: IFFALSE 35884
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35826: LD_VAR 0 4
35830: PPUSH
35831: LD_STRING h
35833: PUSH
35834: LD_VAR 0 2
35838: PPUSH
35839: CALL_OW 250
35843: PUSH
35844: LD_VAR 0 2
35848: PPUSH
35849: CALL_OW 251
35853: PUSH
35854: LD_VAR 0 2
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: LD_INT 0
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: PUSH
35877: EMPTY
35878: LIST
35879: PPUSH
35880: CALL_OW 446
35884: GO 35808
35886: POP
35887: POP
// end ;
35888: LD_VAR 0 3
35892: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35893: LD_INT 0
35895: PPUSH
35896: PPUSH
35897: PPUSH
35898: PPUSH
35899: PPUSH
35900: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35901: LD_VAR 0 1
35905: NOT
35906: PUSH
35907: LD_VAR 0 1
35911: PPUSH
35912: CALL_OW 263
35916: PUSH
35917: LD_INT 2
35919: NONEQUAL
35920: OR
35921: IFFALSE 35925
// exit ;
35923: GO 36241
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35925: LD_ADDR_VAR 0 6
35929: PUSH
35930: LD_INT 22
35932: PUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL_OW 255
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 2
35949: PUSH
35950: LD_INT 30
35952: PUSH
35953: LD_INT 36
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 34
35962: PUSH
35963: LD_INT 31
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PPUSH
35979: CALL_OW 69
35983: ST_TO_ADDR
// if not tmp then
35984: LD_VAR 0 6
35988: NOT
35989: IFFALSE 35993
// exit ;
35991: GO 36241
// result := [ ] ;
35993: LD_ADDR_VAR 0 2
35997: PUSH
35998: EMPTY
35999: ST_TO_ADDR
// for i in tmp do
36000: LD_ADDR_VAR 0 3
36004: PUSH
36005: LD_VAR 0 6
36009: PUSH
36010: FOR_IN
36011: IFFALSE 36082
// begin t := UnitsInside ( i ) ;
36013: LD_ADDR_VAR 0 4
36017: PUSH
36018: LD_VAR 0 3
36022: PPUSH
36023: CALL_OW 313
36027: ST_TO_ADDR
// if t then
36028: LD_VAR 0 4
36032: IFFALSE 36080
// for j in t do
36034: LD_ADDR_VAR 0 7
36038: PUSH
36039: LD_VAR 0 4
36043: PUSH
36044: FOR_IN
36045: IFFALSE 36078
// result := Replace ( result , result + 1 , j ) ;
36047: LD_ADDR_VAR 0 2
36051: PUSH
36052: LD_VAR 0 2
36056: PPUSH
36057: LD_VAR 0 2
36061: PUSH
36062: LD_INT 1
36064: PLUS
36065: PPUSH
36066: LD_VAR 0 7
36070: PPUSH
36071: CALL_OW 1
36075: ST_TO_ADDR
36076: GO 36044
36078: POP
36079: POP
// end ;
36080: GO 36010
36082: POP
36083: POP
// if not result then
36084: LD_VAR 0 2
36088: NOT
36089: IFFALSE 36093
// exit ;
36091: GO 36241
// mech := result [ 1 ] ;
36093: LD_ADDR_VAR 0 5
36097: PUSH
36098: LD_VAR 0 2
36102: PUSH
36103: LD_INT 1
36105: ARRAY
36106: ST_TO_ADDR
// if result > 1 then
36107: LD_VAR 0 2
36111: PUSH
36112: LD_INT 1
36114: GREATER
36115: IFFALSE 36227
// begin for i = 2 to result do
36117: LD_ADDR_VAR 0 3
36121: PUSH
36122: DOUBLE
36123: LD_INT 2
36125: DEC
36126: ST_TO_ADDR
36127: LD_VAR 0 2
36131: PUSH
36132: FOR_TO
36133: IFFALSE 36225
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36135: LD_ADDR_VAR 0 4
36139: PUSH
36140: LD_VAR 0 2
36144: PUSH
36145: LD_VAR 0 3
36149: ARRAY
36150: PPUSH
36151: LD_INT 3
36153: PPUSH
36154: CALL_OW 259
36158: PUSH
36159: LD_VAR 0 2
36163: PUSH
36164: LD_VAR 0 3
36168: ARRAY
36169: PPUSH
36170: CALL_OW 432
36174: MINUS
36175: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36176: LD_VAR 0 4
36180: PUSH
36181: LD_VAR 0 5
36185: PPUSH
36186: LD_INT 3
36188: PPUSH
36189: CALL_OW 259
36193: PUSH
36194: LD_VAR 0 5
36198: PPUSH
36199: CALL_OW 432
36203: MINUS
36204: GREATEREQUAL
36205: IFFALSE 36223
// mech := result [ i ] ;
36207: LD_ADDR_VAR 0 5
36211: PUSH
36212: LD_VAR 0 2
36216: PUSH
36217: LD_VAR 0 3
36221: ARRAY
36222: ST_TO_ADDR
// end ;
36223: GO 36132
36225: POP
36226: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36227: LD_VAR 0 1
36231: PPUSH
36232: LD_VAR 0 5
36236: PPUSH
36237: CALL_OW 135
// end ;
36241: LD_VAR 0 2
36245: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36246: LD_INT 0
36248: PPUSH
36249: PPUSH
36250: PPUSH
36251: PPUSH
36252: PPUSH
36253: PPUSH
36254: PPUSH
36255: PPUSH
36256: PPUSH
36257: PPUSH
36258: PPUSH
36259: PPUSH
36260: PPUSH
// result := [ ] ;
36261: LD_ADDR_VAR 0 7
36265: PUSH
36266: EMPTY
36267: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36268: LD_VAR 0 1
36272: PPUSH
36273: CALL_OW 266
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: IN
36288: NOT
36289: IFFALSE 36293
// exit ;
36291: GO 37927
// if name then
36293: LD_VAR 0 3
36297: IFFALSE 36313
// SetBName ( base_dep , name ) ;
36299: LD_VAR 0 1
36303: PPUSH
36304: LD_VAR 0 3
36308: PPUSH
36309: CALL_OW 500
// base := GetBase ( base_dep ) ;
36313: LD_ADDR_VAR 0 15
36317: PUSH
36318: LD_VAR 0 1
36322: PPUSH
36323: CALL_OW 274
36327: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36328: LD_ADDR_VAR 0 16
36332: PUSH
36333: LD_VAR 0 1
36337: PPUSH
36338: CALL_OW 255
36342: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36343: LD_ADDR_VAR 0 17
36347: PUSH
36348: LD_VAR 0 1
36352: PPUSH
36353: CALL_OW 248
36357: ST_TO_ADDR
// if sources then
36358: LD_VAR 0 5
36362: IFFALSE 36409
// for i = 1 to 3 do
36364: LD_ADDR_VAR 0 8
36368: PUSH
36369: DOUBLE
36370: LD_INT 1
36372: DEC
36373: ST_TO_ADDR
36374: LD_INT 3
36376: PUSH
36377: FOR_TO
36378: IFFALSE 36407
// AddResourceType ( base , i , sources [ i ] ) ;
36380: LD_VAR 0 15
36384: PPUSH
36385: LD_VAR 0 8
36389: PPUSH
36390: LD_VAR 0 5
36394: PUSH
36395: LD_VAR 0 8
36399: ARRAY
36400: PPUSH
36401: CALL_OW 276
36405: GO 36377
36407: POP
36408: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36409: LD_ADDR_VAR 0 18
36413: PUSH
36414: LD_VAR 0 15
36418: PPUSH
36419: LD_VAR 0 2
36423: PPUSH
36424: LD_INT 1
36426: PPUSH
36427: CALL 35670 0 3
36431: ST_TO_ADDR
// InitHc ;
36432: CALL_OW 19
// InitUc ;
36436: CALL_OW 18
// uc_side := side ;
36440: LD_ADDR_OWVAR 20
36444: PUSH
36445: LD_VAR 0 16
36449: ST_TO_ADDR
// uc_nation := nation ;
36450: LD_ADDR_OWVAR 21
36454: PUSH
36455: LD_VAR 0 17
36459: ST_TO_ADDR
// if buildings then
36460: LD_VAR 0 18
36464: IFFALSE 37786
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36466: LD_ADDR_VAR 0 19
36470: PUSH
36471: LD_VAR 0 18
36475: PPUSH
36476: LD_INT 2
36478: PUSH
36479: LD_INT 30
36481: PUSH
36482: LD_INT 29
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 30
36491: PUSH
36492: LD_INT 30
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: PPUSH
36504: CALL_OW 72
36508: ST_TO_ADDR
// if tmp then
36509: LD_VAR 0 19
36513: IFFALSE 36561
// for i in tmp do
36515: LD_ADDR_VAR 0 8
36519: PUSH
36520: LD_VAR 0 19
36524: PUSH
36525: FOR_IN
36526: IFFALSE 36559
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36528: LD_VAR 0 8
36532: PPUSH
36533: CALL_OW 250
36537: PPUSH
36538: LD_VAR 0 8
36542: PPUSH
36543: CALL_OW 251
36547: PPUSH
36548: LD_VAR 0 16
36552: PPUSH
36553: CALL_OW 441
36557: GO 36525
36559: POP
36560: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36561: LD_VAR 0 18
36565: PPUSH
36566: LD_INT 2
36568: PUSH
36569: LD_INT 30
36571: PUSH
36572: LD_INT 32
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 30
36581: PUSH
36582: LD_INT 33
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: PPUSH
36594: CALL_OW 72
36598: IFFALSE 36686
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36600: LD_ADDR_VAR 0 8
36604: PUSH
36605: LD_VAR 0 18
36609: PPUSH
36610: LD_INT 2
36612: PUSH
36613: LD_INT 30
36615: PUSH
36616: LD_INT 32
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 30
36625: PUSH
36626: LD_INT 33
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: PPUSH
36638: CALL_OW 72
36642: PUSH
36643: FOR_IN
36644: IFFALSE 36684
// begin if not GetBWeapon ( i ) then
36646: LD_VAR 0 8
36650: PPUSH
36651: CALL_OW 269
36655: NOT
36656: IFFALSE 36682
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36658: LD_VAR 0 8
36662: PPUSH
36663: LD_VAR 0 8
36667: PPUSH
36668: LD_VAR 0 2
36672: PPUSH
36673: CALL 37932 0 2
36677: PPUSH
36678: CALL_OW 431
// end ;
36682: GO 36643
36684: POP
36685: POP
// end ; for i = 1 to personel do
36686: LD_ADDR_VAR 0 8
36690: PUSH
36691: DOUBLE
36692: LD_INT 1
36694: DEC
36695: ST_TO_ADDR
36696: LD_VAR 0 6
36700: PUSH
36701: FOR_TO
36702: IFFALSE 37766
// begin if i > 4 then
36704: LD_VAR 0 8
36708: PUSH
36709: LD_INT 4
36711: GREATER
36712: IFFALSE 36716
// break ;
36714: GO 37766
// case i of 1 :
36716: LD_VAR 0 8
36720: PUSH
36721: LD_INT 1
36723: DOUBLE
36724: EQUAL
36725: IFTRUE 36729
36727: GO 36809
36729: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36730: LD_ADDR_VAR 0 12
36734: PUSH
36735: LD_VAR 0 18
36739: PPUSH
36740: LD_INT 22
36742: PUSH
36743: LD_VAR 0 16
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 58
36754: PUSH
36755: EMPTY
36756: LIST
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: LD_INT 30
36763: PUSH
36764: LD_INT 32
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 30
36773: PUSH
36774: LD_INT 4
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 30
36783: PUSH
36784: LD_INT 5
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: LIST
36801: PPUSH
36802: CALL_OW 72
36806: ST_TO_ADDR
36807: GO 37031
36809: LD_INT 2
36811: DOUBLE
36812: EQUAL
36813: IFTRUE 36817
36815: GO 36879
36817: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36818: LD_ADDR_VAR 0 12
36822: PUSH
36823: LD_VAR 0 18
36827: PPUSH
36828: LD_INT 22
36830: PUSH
36831: LD_VAR 0 16
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 2
36842: PUSH
36843: LD_INT 30
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 30
36855: PUSH
36856: LD_INT 1
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: LIST
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PPUSH
36872: CALL_OW 72
36876: ST_TO_ADDR
36877: GO 37031
36879: LD_INT 3
36881: DOUBLE
36882: EQUAL
36883: IFTRUE 36887
36885: GO 36949
36887: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36888: LD_ADDR_VAR 0 12
36892: PUSH
36893: LD_VAR 0 18
36897: PPUSH
36898: LD_INT 22
36900: PUSH
36901: LD_VAR 0 16
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 2
36912: PUSH
36913: LD_INT 30
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 30
36925: PUSH
36926: LD_INT 3
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: LIST
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PPUSH
36942: CALL_OW 72
36946: ST_TO_ADDR
36947: GO 37031
36949: LD_INT 4
36951: DOUBLE
36952: EQUAL
36953: IFTRUE 36957
36955: GO 37030
36957: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36958: LD_ADDR_VAR 0 12
36962: PUSH
36963: LD_VAR 0 18
36967: PPUSH
36968: LD_INT 22
36970: PUSH
36971: LD_VAR 0 16
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: LD_INT 30
36985: PUSH
36986: LD_INT 6
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 30
36995: PUSH
36996: LD_INT 7
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 30
37005: PUSH
37006: LD_INT 8
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PPUSH
37023: CALL_OW 72
37027: ST_TO_ADDR
37028: GO 37031
37030: POP
// if i = 1 then
37031: LD_VAR 0 8
37035: PUSH
37036: LD_INT 1
37038: EQUAL
37039: IFFALSE 37150
// begin tmp := [ ] ;
37041: LD_ADDR_VAR 0 19
37045: PUSH
37046: EMPTY
37047: ST_TO_ADDR
// for j in f do
37048: LD_ADDR_VAR 0 9
37052: PUSH
37053: LD_VAR 0 12
37057: PUSH
37058: FOR_IN
37059: IFFALSE 37132
// if GetBType ( j ) = b_bunker then
37061: LD_VAR 0 9
37065: PPUSH
37066: CALL_OW 266
37070: PUSH
37071: LD_INT 32
37073: EQUAL
37074: IFFALSE 37101
// tmp := Insert ( tmp , 1 , j ) else
37076: LD_ADDR_VAR 0 19
37080: PUSH
37081: LD_VAR 0 19
37085: PPUSH
37086: LD_INT 1
37088: PPUSH
37089: LD_VAR 0 9
37093: PPUSH
37094: CALL_OW 2
37098: ST_TO_ADDR
37099: GO 37130
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37101: LD_ADDR_VAR 0 19
37105: PUSH
37106: LD_VAR 0 19
37110: PPUSH
37111: LD_VAR 0 19
37115: PUSH
37116: LD_INT 1
37118: PLUS
37119: PPUSH
37120: LD_VAR 0 9
37124: PPUSH
37125: CALL_OW 2
37129: ST_TO_ADDR
37130: GO 37058
37132: POP
37133: POP
// if tmp then
37134: LD_VAR 0 19
37138: IFFALSE 37150
// f := tmp ;
37140: LD_ADDR_VAR 0 12
37144: PUSH
37145: LD_VAR 0 19
37149: ST_TO_ADDR
// end ; x := personel [ i ] ;
37150: LD_ADDR_VAR 0 13
37154: PUSH
37155: LD_VAR 0 6
37159: PUSH
37160: LD_VAR 0 8
37164: ARRAY
37165: ST_TO_ADDR
// if x = - 1 then
37166: LD_VAR 0 13
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: EQUAL
37175: IFFALSE 37384
// begin for j in f do
37177: LD_ADDR_VAR 0 9
37181: PUSH
37182: LD_VAR 0 12
37186: PUSH
37187: FOR_IN
37188: IFFALSE 37380
// repeat InitHc ;
37190: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37194: LD_VAR 0 9
37198: PPUSH
37199: CALL_OW 266
37203: PUSH
37204: LD_INT 5
37206: EQUAL
37207: IFFALSE 37277
// begin if UnitsInside ( j ) < 3 then
37209: LD_VAR 0 9
37213: PPUSH
37214: CALL_OW 313
37218: PUSH
37219: LD_INT 3
37221: LESS
37222: IFFALSE 37258
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37224: LD_INT 0
37226: PPUSH
37227: LD_INT 5
37229: PUSH
37230: LD_INT 8
37232: PUSH
37233: LD_INT 9
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: LIST
37240: PUSH
37241: LD_VAR 0 17
37245: ARRAY
37246: PPUSH
37247: LD_VAR 0 4
37251: PPUSH
37252: CALL_OW 380
37256: GO 37275
// PrepareHuman ( false , i , skill ) ;
37258: LD_INT 0
37260: PPUSH
37261: LD_VAR 0 8
37265: PPUSH
37266: LD_VAR 0 4
37270: PPUSH
37271: CALL_OW 380
// end else
37275: GO 37294
// PrepareHuman ( false , i , skill ) ;
37277: LD_INT 0
37279: PPUSH
37280: LD_VAR 0 8
37284: PPUSH
37285: LD_VAR 0 4
37289: PPUSH
37290: CALL_OW 380
// un := CreateHuman ;
37294: LD_ADDR_VAR 0 14
37298: PUSH
37299: CALL_OW 44
37303: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37304: LD_ADDR_VAR 0 7
37308: PUSH
37309: LD_VAR 0 7
37313: PPUSH
37314: LD_INT 1
37316: PPUSH
37317: LD_VAR 0 14
37321: PPUSH
37322: CALL_OW 2
37326: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37327: LD_VAR 0 14
37331: PPUSH
37332: LD_VAR 0 9
37336: PPUSH
37337: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37341: LD_VAR 0 9
37345: PPUSH
37346: CALL_OW 313
37350: PUSH
37351: LD_INT 6
37353: EQUAL
37354: PUSH
37355: LD_VAR 0 9
37359: PPUSH
37360: CALL_OW 266
37364: PUSH
37365: LD_INT 32
37367: PUSH
37368: LD_INT 31
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: IN
37375: OR
37376: IFFALSE 37190
37378: GO 37187
37380: POP
37381: POP
// end else
37382: GO 37764
// for j = 1 to x do
37384: LD_ADDR_VAR 0 9
37388: PUSH
37389: DOUBLE
37390: LD_INT 1
37392: DEC
37393: ST_TO_ADDR
37394: LD_VAR 0 13
37398: PUSH
37399: FOR_TO
37400: IFFALSE 37762
// begin InitHc ;
37402: CALL_OW 19
// if not f then
37406: LD_VAR 0 12
37410: NOT
37411: IFFALSE 37500
// begin PrepareHuman ( false , i , skill ) ;
37413: LD_INT 0
37415: PPUSH
37416: LD_VAR 0 8
37420: PPUSH
37421: LD_VAR 0 4
37425: PPUSH
37426: CALL_OW 380
// un := CreateHuman ;
37430: LD_ADDR_VAR 0 14
37434: PUSH
37435: CALL_OW 44
37439: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37440: LD_ADDR_VAR 0 7
37444: PUSH
37445: LD_VAR 0 7
37449: PPUSH
37450: LD_INT 1
37452: PPUSH
37453: LD_VAR 0 14
37457: PPUSH
37458: CALL_OW 2
37462: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37463: LD_VAR 0 14
37467: PPUSH
37468: LD_VAR 0 1
37472: PPUSH
37473: CALL_OW 250
37477: PPUSH
37478: LD_VAR 0 1
37482: PPUSH
37483: CALL_OW 251
37487: PPUSH
37488: LD_INT 10
37490: PPUSH
37491: LD_INT 0
37493: PPUSH
37494: CALL_OW 50
// continue ;
37498: GO 37399
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37500: LD_VAR 0 12
37504: PUSH
37505: LD_INT 1
37507: ARRAY
37508: PPUSH
37509: CALL_OW 313
37513: PUSH
37514: LD_VAR 0 12
37518: PUSH
37519: LD_INT 1
37521: ARRAY
37522: PPUSH
37523: CALL_OW 266
37527: PUSH
37528: LD_INT 32
37530: PUSH
37531: LD_INT 31
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: IN
37538: AND
37539: PUSH
37540: LD_VAR 0 12
37544: PUSH
37545: LD_INT 1
37547: ARRAY
37548: PPUSH
37549: CALL_OW 313
37553: PUSH
37554: LD_INT 6
37556: EQUAL
37557: OR
37558: IFFALSE 37578
// f := Delete ( f , 1 ) ;
37560: LD_ADDR_VAR 0 12
37564: PUSH
37565: LD_VAR 0 12
37569: PPUSH
37570: LD_INT 1
37572: PPUSH
37573: CALL_OW 3
37577: ST_TO_ADDR
// if not f then
37578: LD_VAR 0 12
37582: NOT
37583: IFFALSE 37601
// begin x := x + 2 ;
37585: LD_ADDR_VAR 0 13
37589: PUSH
37590: LD_VAR 0 13
37594: PUSH
37595: LD_INT 2
37597: PLUS
37598: ST_TO_ADDR
// continue ;
37599: GO 37399
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37601: LD_VAR 0 12
37605: PUSH
37606: LD_INT 1
37608: ARRAY
37609: PPUSH
37610: CALL_OW 266
37614: PUSH
37615: LD_INT 5
37617: EQUAL
37618: IFFALSE 37692
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37620: LD_VAR 0 12
37624: PUSH
37625: LD_INT 1
37627: ARRAY
37628: PPUSH
37629: CALL_OW 313
37633: PUSH
37634: LD_INT 3
37636: LESS
37637: IFFALSE 37673
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37639: LD_INT 0
37641: PPUSH
37642: LD_INT 5
37644: PUSH
37645: LD_INT 8
37647: PUSH
37648: LD_INT 9
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: LIST
37655: PUSH
37656: LD_VAR 0 17
37660: ARRAY
37661: PPUSH
37662: LD_VAR 0 4
37666: PPUSH
37667: CALL_OW 380
37671: GO 37690
// PrepareHuman ( false , i , skill ) ;
37673: LD_INT 0
37675: PPUSH
37676: LD_VAR 0 8
37680: PPUSH
37681: LD_VAR 0 4
37685: PPUSH
37686: CALL_OW 380
// end else
37690: GO 37709
// PrepareHuman ( false , i , skill ) ;
37692: LD_INT 0
37694: PPUSH
37695: LD_VAR 0 8
37699: PPUSH
37700: LD_VAR 0 4
37704: PPUSH
37705: CALL_OW 380
// un := CreateHuman ;
37709: LD_ADDR_VAR 0 14
37713: PUSH
37714: CALL_OW 44
37718: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37719: LD_ADDR_VAR 0 7
37723: PUSH
37724: LD_VAR 0 7
37728: PPUSH
37729: LD_INT 1
37731: PPUSH
37732: LD_VAR 0 14
37736: PPUSH
37737: CALL_OW 2
37741: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37742: LD_VAR 0 14
37746: PPUSH
37747: LD_VAR 0 12
37751: PUSH
37752: LD_INT 1
37754: ARRAY
37755: PPUSH
37756: CALL_OW 52
// end ;
37760: GO 37399
37762: POP
37763: POP
// end ;
37764: GO 36701
37766: POP
37767: POP
// result := result ^ buildings ;
37768: LD_ADDR_VAR 0 7
37772: PUSH
37773: LD_VAR 0 7
37777: PUSH
37778: LD_VAR 0 18
37782: ADD
37783: ST_TO_ADDR
// end else
37784: GO 37927
// begin for i = 1 to personel do
37786: LD_ADDR_VAR 0 8
37790: PUSH
37791: DOUBLE
37792: LD_INT 1
37794: DEC
37795: ST_TO_ADDR
37796: LD_VAR 0 6
37800: PUSH
37801: FOR_TO
37802: IFFALSE 37925
// begin if i > 4 then
37804: LD_VAR 0 8
37808: PUSH
37809: LD_INT 4
37811: GREATER
37812: IFFALSE 37816
// break ;
37814: GO 37925
// x := personel [ i ] ;
37816: LD_ADDR_VAR 0 13
37820: PUSH
37821: LD_VAR 0 6
37825: PUSH
37826: LD_VAR 0 8
37830: ARRAY
37831: ST_TO_ADDR
// if x = - 1 then
37832: LD_VAR 0 13
37836: PUSH
37837: LD_INT 1
37839: NEG
37840: EQUAL
37841: IFFALSE 37845
// continue ;
37843: GO 37801
// PrepareHuman ( false , i , skill ) ;
37845: LD_INT 0
37847: PPUSH
37848: LD_VAR 0 8
37852: PPUSH
37853: LD_VAR 0 4
37857: PPUSH
37858: CALL_OW 380
// un := CreateHuman ;
37862: LD_ADDR_VAR 0 14
37866: PUSH
37867: CALL_OW 44
37871: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37872: LD_VAR 0 14
37876: PPUSH
37877: LD_VAR 0 1
37881: PPUSH
37882: CALL_OW 250
37886: PPUSH
37887: LD_VAR 0 1
37891: PPUSH
37892: CALL_OW 251
37896: PPUSH
37897: LD_INT 10
37899: PPUSH
37900: LD_INT 0
37902: PPUSH
37903: CALL_OW 50
// result := result ^ un ;
37907: LD_ADDR_VAR 0 7
37911: PUSH
37912: LD_VAR 0 7
37916: PUSH
37917: LD_VAR 0 14
37921: ADD
37922: ST_TO_ADDR
// end ;
37923: GO 37801
37925: POP
37926: POP
// end ; end ;
37927: LD_VAR 0 7
37931: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37932: LD_INT 0
37934: PPUSH
37935: PPUSH
37936: PPUSH
37937: PPUSH
37938: PPUSH
37939: PPUSH
37940: PPUSH
37941: PPUSH
37942: PPUSH
37943: PPUSH
37944: PPUSH
37945: PPUSH
37946: PPUSH
37947: PPUSH
37948: PPUSH
37949: PPUSH
// result := false ;
37950: LD_ADDR_VAR 0 3
37954: PUSH
37955: LD_INT 0
37957: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37958: LD_VAR 0 1
37962: NOT
37963: PUSH
37964: LD_VAR 0 1
37968: PPUSH
37969: CALL_OW 266
37973: PUSH
37974: LD_INT 32
37976: PUSH
37977: LD_INT 33
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: IN
37984: NOT
37985: OR
37986: IFFALSE 37990
// exit ;
37988: GO 39099
// nat := GetNation ( tower ) ;
37990: LD_ADDR_VAR 0 12
37994: PUSH
37995: LD_VAR 0 1
37999: PPUSH
38000: CALL_OW 248
38004: ST_TO_ADDR
// side := GetSide ( tower ) ;
38005: LD_ADDR_VAR 0 16
38009: PUSH
38010: LD_VAR 0 1
38014: PPUSH
38015: CALL_OW 255
38019: ST_TO_ADDR
// x := GetX ( tower ) ;
38020: LD_ADDR_VAR 0 10
38024: PUSH
38025: LD_VAR 0 1
38029: PPUSH
38030: CALL_OW 250
38034: ST_TO_ADDR
// y := GetY ( tower ) ;
38035: LD_ADDR_VAR 0 11
38039: PUSH
38040: LD_VAR 0 1
38044: PPUSH
38045: CALL_OW 251
38049: ST_TO_ADDR
// if not x or not y then
38050: LD_VAR 0 10
38054: NOT
38055: PUSH
38056: LD_VAR 0 11
38060: NOT
38061: OR
38062: IFFALSE 38066
// exit ;
38064: GO 39099
// weapon := 0 ;
38066: LD_ADDR_VAR 0 18
38070: PUSH
38071: LD_INT 0
38073: ST_TO_ADDR
// fac_list := [ ] ;
38074: LD_ADDR_VAR 0 17
38078: PUSH
38079: EMPTY
38080: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38081: LD_ADDR_VAR 0 6
38085: PUSH
38086: LD_VAR 0 1
38090: PPUSH
38091: CALL_OW 274
38095: PPUSH
38096: LD_VAR 0 2
38100: PPUSH
38101: LD_INT 0
38103: PPUSH
38104: CALL 35670 0 3
38108: PPUSH
38109: LD_INT 30
38111: PUSH
38112: LD_INT 3
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PPUSH
38119: CALL_OW 72
38123: ST_TO_ADDR
// if not factories then
38124: LD_VAR 0 6
38128: NOT
38129: IFFALSE 38133
// exit ;
38131: GO 39099
// for i in factories do
38133: LD_ADDR_VAR 0 8
38137: PUSH
38138: LD_VAR 0 6
38142: PUSH
38143: FOR_IN
38144: IFFALSE 38169
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38146: LD_ADDR_VAR 0 17
38150: PUSH
38151: LD_VAR 0 17
38155: PUSH
38156: LD_VAR 0 8
38160: PPUSH
38161: CALL_OW 478
38165: UNION
38166: ST_TO_ADDR
38167: GO 38143
38169: POP
38170: POP
// if not fac_list then
38171: LD_VAR 0 17
38175: NOT
38176: IFFALSE 38180
// exit ;
38178: GO 39099
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38180: LD_ADDR_VAR 0 5
38184: PUSH
38185: LD_INT 4
38187: PUSH
38188: LD_INT 5
38190: PUSH
38191: LD_INT 9
38193: PUSH
38194: LD_INT 10
38196: PUSH
38197: LD_INT 6
38199: PUSH
38200: LD_INT 7
38202: PUSH
38203: LD_INT 11
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 27
38217: PUSH
38218: LD_INT 28
38220: PUSH
38221: LD_INT 26
38223: PUSH
38224: LD_INT 30
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 43
38235: PUSH
38236: LD_INT 44
38238: PUSH
38239: LD_INT 46
38241: PUSH
38242: LD_INT 45
38244: PUSH
38245: LD_INT 47
38247: PUSH
38248: LD_INT 49
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: LIST
38263: PUSH
38264: LD_VAR 0 12
38268: ARRAY
38269: ST_TO_ADDR
// list := list isect fac_list ;
38270: LD_ADDR_VAR 0 5
38274: PUSH
38275: LD_VAR 0 5
38279: PUSH
38280: LD_VAR 0 17
38284: ISECT
38285: ST_TO_ADDR
// if not list then
38286: LD_VAR 0 5
38290: NOT
38291: IFFALSE 38295
// exit ;
38293: GO 39099
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38295: LD_VAR 0 12
38299: PUSH
38300: LD_INT 3
38302: EQUAL
38303: PUSH
38304: LD_INT 49
38306: PUSH
38307: LD_VAR 0 5
38311: IN
38312: AND
38313: PUSH
38314: LD_INT 31
38316: PPUSH
38317: LD_VAR 0 16
38321: PPUSH
38322: CALL_OW 321
38326: PUSH
38327: LD_INT 2
38329: EQUAL
38330: AND
38331: IFFALSE 38391
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38333: LD_INT 22
38335: PUSH
38336: LD_VAR 0 16
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 35
38347: PUSH
38348: LD_INT 49
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 91
38357: PUSH
38358: LD_VAR 0 1
38362: PUSH
38363: LD_INT 10
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: LIST
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: LIST
38375: PPUSH
38376: CALL_OW 69
38380: NOT
38381: IFFALSE 38391
// weapon := ru_time_lapser ;
38383: LD_ADDR_VAR 0 18
38387: PUSH
38388: LD_INT 49
38390: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38391: LD_VAR 0 12
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: LD_INT 2
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: IN
38406: PUSH
38407: LD_INT 11
38409: PUSH
38410: LD_VAR 0 5
38414: IN
38415: PUSH
38416: LD_INT 30
38418: PUSH
38419: LD_VAR 0 5
38423: IN
38424: OR
38425: AND
38426: PUSH
38427: LD_INT 6
38429: PPUSH
38430: LD_VAR 0 16
38434: PPUSH
38435: CALL_OW 321
38439: PUSH
38440: LD_INT 2
38442: EQUAL
38443: AND
38444: IFFALSE 38609
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38446: LD_INT 22
38448: PUSH
38449: LD_VAR 0 16
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 2
38460: PUSH
38461: LD_INT 35
38463: PUSH
38464: LD_INT 11
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 35
38473: PUSH
38474: LD_INT 30
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 91
38488: PUSH
38489: LD_VAR 0 1
38493: PUSH
38494: LD_INT 18
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: LIST
38506: PPUSH
38507: CALL_OW 69
38511: NOT
38512: PUSH
38513: LD_INT 22
38515: PUSH
38516: LD_VAR 0 16
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: LD_INT 30
38530: PUSH
38531: LD_INT 32
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 30
38540: PUSH
38541: LD_INT 33
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 91
38555: PUSH
38556: LD_VAR 0 1
38560: PUSH
38561: LD_INT 12
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: LIST
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: LIST
38573: PUSH
38574: EMPTY
38575: LIST
38576: PPUSH
38577: CALL_OW 69
38581: PUSH
38582: LD_INT 2
38584: GREATER
38585: AND
38586: IFFALSE 38609
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38588: LD_ADDR_VAR 0 18
38592: PUSH
38593: LD_INT 11
38595: PUSH
38596: LD_INT 30
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_VAR 0 12
38607: ARRAY
38608: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38609: LD_VAR 0 18
38613: NOT
38614: PUSH
38615: LD_INT 40
38617: PPUSH
38618: LD_VAR 0 16
38622: PPUSH
38623: CALL_OW 321
38627: PUSH
38628: LD_INT 2
38630: EQUAL
38631: AND
38632: PUSH
38633: LD_INT 7
38635: PUSH
38636: LD_VAR 0 5
38640: IN
38641: PUSH
38642: LD_INT 28
38644: PUSH
38645: LD_VAR 0 5
38649: IN
38650: OR
38651: PUSH
38652: LD_INT 45
38654: PUSH
38655: LD_VAR 0 5
38659: IN
38660: OR
38661: AND
38662: IFFALSE 38916
// begin hex := GetHexInfo ( x , y ) ;
38664: LD_ADDR_VAR 0 4
38668: PUSH
38669: LD_VAR 0 10
38673: PPUSH
38674: LD_VAR 0 11
38678: PPUSH
38679: CALL_OW 546
38683: ST_TO_ADDR
// if hex [ 1 ] then
38684: LD_VAR 0 4
38688: PUSH
38689: LD_INT 1
38691: ARRAY
38692: IFFALSE 38696
// exit ;
38694: GO 39099
// height := hex [ 2 ] ;
38696: LD_ADDR_VAR 0 15
38700: PUSH
38701: LD_VAR 0 4
38705: PUSH
38706: LD_INT 2
38708: ARRAY
38709: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38710: LD_ADDR_VAR 0 14
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: LD_INT 3
38723: PUSH
38724: LD_INT 5
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: ST_TO_ADDR
// for i in tmp do
38733: LD_ADDR_VAR 0 8
38737: PUSH
38738: LD_VAR 0 14
38742: PUSH
38743: FOR_IN
38744: IFFALSE 38914
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38746: LD_ADDR_VAR 0 9
38750: PUSH
38751: LD_VAR 0 10
38755: PPUSH
38756: LD_VAR 0 8
38760: PPUSH
38761: LD_INT 5
38763: PPUSH
38764: CALL_OW 272
38768: PUSH
38769: LD_VAR 0 11
38773: PPUSH
38774: LD_VAR 0 8
38778: PPUSH
38779: LD_INT 5
38781: PPUSH
38782: CALL_OW 273
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38791: LD_VAR 0 9
38795: PUSH
38796: LD_INT 1
38798: ARRAY
38799: PPUSH
38800: LD_VAR 0 9
38804: PUSH
38805: LD_INT 2
38807: ARRAY
38808: PPUSH
38809: CALL_OW 488
38813: IFFALSE 38912
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38815: LD_ADDR_VAR 0 4
38819: PUSH
38820: LD_VAR 0 9
38824: PUSH
38825: LD_INT 1
38827: ARRAY
38828: PPUSH
38829: LD_VAR 0 9
38833: PUSH
38834: LD_INT 2
38836: ARRAY
38837: PPUSH
38838: CALL_OW 546
38842: ST_TO_ADDR
// if hex [ 1 ] then
38843: LD_VAR 0 4
38847: PUSH
38848: LD_INT 1
38850: ARRAY
38851: IFFALSE 38855
// continue ;
38853: GO 38743
// h := hex [ 2 ] ;
38855: LD_ADDR_VAR 0 13
38859: PUSH
38860: LD_VAR 0 4
38864: PUSH
38865: LD_INT 2
38867: ARRAY
38868: ST_TO_ADDR
// if h + 7 < height then
38869: LD_VAR 0 13
38873: PUSH
38874: LD_INT 7
38876: PLUS
38877: PUSH
38878: LD_VAR 0 15
38882: LESS
38883: IFFALSE 38912
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38885: LD_ADDR_VAR 0 18
38889: PUSH
38890: LD_INT 7
38892: PUSH
38893: LD_INT 28
38895: PUSH
38896: LD_INT 45
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: LIST
38903: PUSH
38904: LD_VAR 0 12
38908: ARRAY
38909: ST_TO_ADDR
// break ;
38910: GO 38914
// end ; end ; end ;
38912: GO 38743
38914: POP
38915: POP
// end ; if not weapon then
38916: LD_VAR 0 18
38920: NOT
38921: IFFALSE 38981
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38923: LD_ADDR_VAR 0 5
38927: PUSH
38928: LD_VAR 0 5
38932: PUSH
38933: LD_INT 11
38935: PUSH
38936: LD_INT 30
38938: PUSH
38939: LD_INT 49
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: LIST
38946: DIFF
38947: ST_TO_ADDR
// if not list then
38948: LD_VAR 0 5
38952: NOT
38953: IFFALSE 38957
// exit ;
38955: GO 39099
// weapon := list [ rand ( 1 , list ) ] ;
38957: LD_ADDR_VAR 0 18
38961: PUSH
38962: LD_VAR 0 5
38966: PUSH
38967: LD_INT 1
38969: PPUSH
38970: LD_VAR 0 5
38974: PPUSH
38975: CALL_OW 12
38979: ARRAY
38980: ST_TO_ADDR
// end ; if weapon then
38981: LD_VAR 0 18
38985: IFFALSE 39099
// begin tmp := CostOfWeapon ( weapon ) ;
38987: LD_ADDR_VAR 0 14
38991: PUSH
38992: LD_VAR 0 18
38996: PPUSH
38997: CALL_OW 451
39001: ST_TO_ADDR
// j := GetBase ( tower ) ;
39002: LD_ADDR_VAR 0 9
39006: PUSH
39007: LD_VAR 0 1
39011: PPUSH
39012: CALL_OW 274
39016: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39017: LD_VAR 0 9
39021: PPUSH
39022: LD_INT 1
39024: PPUSH
39025: CALL_OW 275
39029: PUSH
39030: LD_VAR 0 14
39034: PUSH
39035: LD_INT 1
39037: ARRAY
39038: GREATEREQUAL
39039: PUSH
39040: LD_VAR 0 9
39044: PPUSH
39045: LD_INT 2
39047: PPUSH
39048: CALL_OW 275
39052: PUSH
39053: LD_VAR 0 14
39057: PUSH
39058: LD_INT 2
39060: ARRAY
39061: GREATEREQUAL
39062: AND
39063: PUSH
39064: LD_VAR 0 9
39068: PPUSH
39069: LD_INT 3
39071: PPUSH
39072: CALL_OW 275
39076: PUSH
39077: LD_VAR 0 14
39081: PUSH
39082: LD_INT 3
39084: ARRAY
39085: GREATEREQUAL
39086: AND
39087: IFFALSE 39099
// result := weapon ;
39089: LD_ADDR_VAR 0 3
39093: PUSH
39094: LD_VAR 0 18
39098: ST_TO_ADDR
// end ; end ;
39099: LD_VAR 0 3
39103: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39104: LD_INT 0
39106: PPUSH
39107: PPUSH
// result := true ;
39108: LD_ADDR_VAR 0 3
39112: PUSH
39113: LD_INT 1
39115: ST_TO_ADDR
// if array1 = array2 then
39116: LD_VAR 0 1
39120: PUSH
39121: LD_VAR 0 2
39125: EQUAL
39126: IFFALSE 39186
// begin for i = 1 to array1 do
39128: LD_ADDR_VAR 0 4
39132: PUSH
39133: DOUBLE
39134: LD_INT 1
39136: DEC
39137: ST_TO_ADDR
39138: LD_VAR 0 1
39142: PUSH
39143: FOR_TO
39144: IFFALSE 39182
// if array1 [ i ] <> array2 [ i ] then
39146: LD_VAR 0 1
39150: PUSH
39151: LD_VAR 0 4
39155: ARRAY
39156: PUSH
39157: LD_VAR 0 2
39161: PUSH
39162: LD_VAR 0 4
39166: ARRAY
39167: NONEQUAL
39168: IFFALSE 39180
// begin result := false ;
39170: LD_ADDR_VAR 0 3
39174: PUSH
39175: LD_INT 0
39177: ST_TO_ADDR
// break ;
39178: GO 39182
// end ;
39180: GO 39143
39182: POP
39183: POP
// end else
39184: GO 39194
// result := false ;
39186: LD_ADDR_VAR 0 3
39190: PUSH
39191: LD_INT 0
39193: ST_TO_ADDR
// end ;
39194: LD_VAR 0 3
39198: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39199: LD_INT 0
39201: PPUSH
39202: PPUSH
// if not array1 or not array2 then
39203: LD_VAR 0 1
39207: NOT
39208: PUSH
39209: LD_VAR 0 2
39213: NOT
39214: OR
39215: IFFALSE 39219
// exit ;
39217: GO 39283
// result := true ;
39219: LD_ADDR_VAR 0 3
39223: PUSH
39224: LD_INT 1
39226: ST_TO_ADDR
// for i = 1 to array1 do
39227: LD_ADDR_VAR 0 4
39231: PUSH
39232: DOUBLE
39233: LD_INT 1
39235: DEC
39236: ST_TO_ADDR
39237: LD_VAR 0 1
39241: PUSH
39242: FOR_TO
39243: IFFALSE 39281
// if array1 [ i ] <> array2 [ i ] then
39245: LD_VAR 0 1
39249: PUSH
39250: LD_VAR 0 4
39254: ARRAY
39255: PUSH
39256: LD_VAR 0 2
39260: PUSH
39261: LD_VAR 0 4
39265: ARRAY
39266: NONEQUAL
39267: IFFALSE 39279
// begin result := false ;
39269: LD_ADDR_VAR 0 3
39273: PUSH
39274: LD_INT 0
39276: ST_TO_ADDR
// break ;
39277: GO 39281
// end ;
39279: GO 39242
39281: POP
39282: POP
// end ;
39283: LD_VAR 0 3
39287: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39288: LD_INT 0
39290: PPUSH
39291: PPUSH
39292: PPUSH
// pom := GetBase ( fac ) ;
39293: LD_ADDR_VAR 0 5
39297: PUSH
39298: LD_VAR 0 1
39302: PPUSH
39303: CALL_OW 274
39307: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39308: LD_ADDR_VAR 0 4
39312: PUSH
39313: LD_VAR 0 2
39317: PUSH
39318: LD_INT 1
39320: ARRAY
39321: PPUSH
39322: LD_VAR 0 2
39326: PUSH
39327: LD_INT 2
39329: ARRAY
39330: PPUSH
39331: LD_VAR 0 2
39335: PUSH
39336: LD_INT 3
39338: ARRAY
39339: PPUSH
39340: LD_VAR 0 2
39344: PUSH
39345: LD_INT 4
39347: ARRAY
39348: PPUSH
39349: CALL_OW 449
39353: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39354: LD_ADDR_VAR 0 3
39358: PUSH
39359: LD_VAR 0 5
39363: PPUSH
39364: LD_INT 1
39366: PPUSH
39367: CALL_OW 275
39371: PUSH
39372: LD_VAR 0 4
39376: PUSH
39377: LD_INT 1
39379: ARRAY
39380: GREATEREQUAL
39381: PUSH
39382: LD_VAR 0 5
39386: PPUSH
39387: LD_INT 2
39389: PPUSH
39390: CALL_OW 275
39394: PUSH
39395: LD_VAR 0 4
39399: PUSH
39400: LD_INT 2
39402: ARRAY
39403: GREATEREQUAL
39404: AND
39405: PUSH
39406: LD_VAR 0 5
39410: PPUSH
39411: LD_INT 3
39413: PPUSH
39414: CALL_OW 275
39418: PUSH
39419: LD_VAR 0 4
39423: PUSH
39424: LD_INT 3
39426: ARRAY
39427: GREATEREQUAL
39428: AND
39429: ST_TO_ADDR
// end ;
39430: LD_VAR 0 3
39434: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39435: LD_INT 0
39437: PPUSH
39438: PPUSH
39439: PPUSH
39440: PPUSH
// pom := GetBase ( building ) ;
39441: LD_ADDR_VAR 0 3
39445: PUSH
39446: LD_VAR 0 1
39450: PPUSH
39451: CALL_OW 274
39455: ST_TO_ADDR
// if not pom then
39456: LD_VAR 0 3
39460: NOT
39461: IFFALSE 39465
// exit ;
39463: GO 39635
// btype := GetBType ( building ) ;
39465: LD_ADDR_VAR 0 5
39469: PUSH
39470: LD_VAR 0 1
39474: PPUSH
39475: CALL_OW 266
39479: ST_TO_ADDR
// if btype = b_armoury then
39480: LD_VAR 0 5
39484: PUSH
39485: LD_INT 4
39487: EQUAL
39488: IFFALSE 39498
// btype := b_barracks ;
39490: LD_ADDR_VAR 0 5
39494: PUSH
39495: LD_INT 5
39497: ST_TO_ADDR
// if btype = b_depot then
39498: LD_VAR 0 5
39502: PUSH
39503: LD_INT 0
39505: EQUAL
39506: IFFALSE 39516
// btype := b_warehouse ;
39508: LD_ADDR_VAR 0 5
39512: PUSH
39513: LD_INT 1
39515: ST_TO_ADDR
// if btype = b_workshop then
39516: LD_VAR 0 5
39520: PUSH
39521: LD_INT 2
39523: EQUAL
39524: IFFALSE 39534
// btype := b_factory ;
39526: LD_ADDR_VAR 0 5
39530: PUSH
39531: LD_INT 3
39533: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39534: LD_ADDR_VAR 0 4
39538: PUSH
39539: LD_VAR 0 5
39543: PPUSH
39544: LD_VAR 0 1
39548: PPUSH
39549: CALL_OW 248
39553: PPUSH
39554: CALL_OW 450
39558: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39559: LD_ADDR_VAR 0 2
39563: PUSH
39564: LD_VAR 0 3
39568: PPUSH
39569: LD_INT 1
39571: PPUSH
39572: CALL_OW 275
39576: PUSH
39577: LD_VAR 0 4
39581: PUSH
39582: LD_INT 1
39584: ARRAY
39585: GREATEREQUAL
39586: PUSH
39587: LD_VAR 0 3
39591: PPUSH
39592: LD_INT 2
39594: PPUSH
39595: CALL_OW 275
39599: PUSH
39600: LD_VAR 0 4
39604: PUSH
39605: LD_INT 2
39607: ARRAY
39608: GREATEREQUAL
39609: AND
39610: PUSH
39611: LD_VAR 0 3
39615: PPUSH
39616: LD_INT 3
39618: PPUSH
39619: CALL_OW 275
39623: PUSH
39624: LD_VAR 0 4
39628: PUSH
39629: LD_INT 3
39631: ARRAY
39632: GREATEREQUAL
39633: AND
39634: ST_TO_ADDR
// end ;
39635: LD_VAR 0 2
39639: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39640: LD_INT 0
39642: PPUSH
39643: PPUSH
39644: PPUSH
// pom := GetBase ( building ) ;
39645: LD_ADDR_VAR 0 4
39649: PUSH
39650: LD_VAR 0 1
39654: PPUSH
39655: CALL_OW 274
39659: ST_TO_ADDR
// if not pom then
39660: LD_VAR 0 4
39664: NOT
39665: IFFALSE 39669
// exit ;
39667: GO 39770
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39669: LD_ADDR_VAR 0 5
39673: PUSH
39674: LD_VAR 0 2
39678: PPUSH
39679: LD_VAR 0 1
39683: PPUSH
39684: CALL_OW 248
39688: PPUSH
39689: CALL_OW 450
39693: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39694: LD_ADDR_VAR 0 3
39698: PUSH
39699: LD_VAR 0 4
39703: PPUSH
39704: LD_INT 1
39706: PPUSH
39707: CALL_OW 275
39711: PUSH
39712: LD_VAR 0 5
39716: PUSH
39717: LD_INT 1
39719: ARRAY
39720: GREATEREQUAL
39721: PUSH
39722: LD_VAR 0 4
39726: PPUSH
39727: LD_INT 2
39729: PPUSH
39730: CALL_OW 275
39734: PUSH
39735: LD_VAR 0 5
39739: PUSH
39740: LD_INT 2
39742: ARRAY
39743: GREATEREQUAL
39744: AND
39745: PUSH
39746: LD_VAR 0 4
39750: PPUSH
39751: LD_INT 3
39753: PPUSH
39754: CALL_OW 275
39758: PUSH
39759: LD_VAR 0 5
39763: PUSH
39764: LD_INT 3
39766: ARRAY
39767: GREATEREQUAL
39768: AND
39769: ST_TO_ADDR
// end ;
39770: LD_VAR 0 3
39774: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39775: LD_INT 0
39777: PPUSH
39778: PPUSH
39779: PPUSH
39780: PPUSH
39781: PPUSH
39782: PPUSH
39783: PPUSH
39784: PPUSH
39785: PPUSH
39786: PPUSH
39787: PPUSH
// result := false ;
39788: LD_ADDR_VAR 0 8
39792: PUSH
39793: LD_INT 0
39795: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39796: LD_VAR 0 5
39800: NOT
39801: PUSH
39802: LD_VAR 0 1
39806: NOT
39807: OR
39808: PUSH
39809: LD_VAR 0 2
39813: NOT
39814: OR
39815: PUSH
39816: LD_VAR 0 3
39820: NOT
39821: OR
39822: IFFALSE 39826
// exit ;
39824: GO 40640
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39826: LD_ADDR_VAR 0 14
39830: PUSH
39831: LD_VAR 0 1
39835: PPUSH
39836: LD_VAR 0 2
39840: PPUSH
39841: LD_VAR 0 3
39845: PPUSH
39846: LD_VAR 0 4
39850: PPUSH
39851: LD_VAR 0 5
39855: PUSH
39856: LD_INT 1
39858: ARRAY
39859: PPUSH
39860: CALL_OW 248
39864: PPUSH
39865: LD_INT 0
39867: PPUSH
39868: CALL 41893 0 6
39872: ST_TO_ADDR
// if not hexes then
39873: LD_VAR 0 14
39877: NOT
39878: IFFALSE 39882
// exit ;
39880: GO 40640
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39882: LD_ADDR_VAR 0 17
39886: PUSH
39887: LD_VAR 0 5
39891: PPUSH
39892: LD_INT 22
39894: PUSH
39895: LD_VAR 0 13
39899: PPUSH
39900: CALL_OW 255
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: LD_INT 30
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 30
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PPUSH
39941: CALL_OW 72
39945: ST_TO_ADDR
// for i = 1 to hexes do
39946: LD_ADDR_VAR 0 9
39950: PUSH
39951: DOUBLE
39952: LD_INT 1
39954: DEC
39955: ST_TO_ADDR
39956: LD_VAR 0 14
39960: PUSH
39961: FOR_TO
39962: IFFALSE 40638
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39964: LD_ADDR_VAR 0 13
39968: PUSH
39969: LD_VAR 0 14
39973: PUSH
39974: LD_VAR 0 9
39978: ARRAY
39979: PUSH
39980: LD_INT 1
39982: ARRAY
39983: PPUSH
39984: LD_VAR 0 14
39988: PUSH
39989: LD_VAR 0 9
39993: ARRAY
39994: PUSH
39995: LD_INT 2
39997: ARRAY
39998: PPUSH
39999: CALL_OW 428
40003: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40004: LD_VAR 0 14
40008: PUSH
40009: LD_VAR 0 9
40013: ARRAY
40014: PUSH
40015: LD_INT 1
40017: ARRAY
40018: PPUSH
40019: LD_VAR 0 14
40023: PUSH
40024: LD_VAR 0 9
40028: ARRAY
40029: PUSH
40030: LD_INT 2
40032: ARRAY
40033: PPUSH
40034: CALL_OW 351
40038: PUSH
40039: LD_VAR 0 14
40043: PUSH
40044: LD_VAR 0 9
40048: ARRAY
40049: PUSH
40050: LD_INT 1
40052: ARRAY
40053: PPUSH
40054: LD_VAR 0 14
40058: PUSH
40059: LD_VAR 0 9
40063: ARRAY
40064: PUSH
40065: LD_INT 2
40067: ARRAY
40068: PPUSH
40069: CALL_OW 488
40073: NOT
40074: OR
40075: PUSH
40076: LD_VAR 0 13
40080: PPUSH
40081: CALL_OW 247
40085: PUSH
40086: LD_INT 3
40088: EQUAL
40089: OR
40090: IFFALSE 40096
// exit ;
40092: POP
40093: POP
40094: GO 40640
// if not tmp then
40096: LD_VAR 0 13
40100: NOT
40101: IFFALSE 40105
// continue ;
40103: GO 39961
// result := true ;
40105: LD_ADDR_VAR 0 8
40109: PUSH
40110: LD_INT 1
40112: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40113: LD_VAR 0 6
40117: PUSH
40118: LD_VAR 0 13
40122: PPUSH
40123: CALL_OW 247
40127: PUSH
40128: LD_INT 2
40130: EQUAL
40131: AND
40132: PUSH
40133: LD_VAR 0 13
40137: PPUSH
40138: CALL_OW 263
40142: PUSH
40143: LD_INT 1
40145: EQUAL
40146: AND
40147: IFFALSE 40311
// begin if IsDrivenBy ( tmp ) then
40149: LD_VAR 0 13
40153: PPUSH
40154: CALL_OW 311
40158: IFFALSE 40162
// continue ;
40160: GO 39961
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40162: LD_VAR 0 6
40166: PPUSH
40167: LD_INT 3
40169: PUSH
40170: LD_INT 60
40172: PUSH
40173: EMPTY
40174: LIST
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 3
40182: PUSH
40183: LD_INT 55
40185: PUSH
40186: EMPTY
40187: LIST
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PPUSH
40197: CALL_OW 72
40201: IFFALSE 40309
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40203: LD_ADDR_VAR 0 18
40207: PUSH
40208: LD_VAR 0 6
40212: PPUSH
40213: LD_INT 3
40215: PUSH
40216: LD_INT 60
40218: PUSH
40219: EMPTY
40220: LIST
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 3
40228: PUSH
40229: LD_INT 55
40231: PUSH
40232: EMPTY
40233: LIST
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PPUSH
40243: CALL_OW 72
40247: PUSH
40248: LD_INT 1
40250: ARRAY
40251: ST_TO_ADDR
// if IsInUnit ( driver ) then
40252: LD_VAR 0 18
40256: PPUSH
40257: CALL_OW 310
40261: IFFALSE 40272
// ComExit ( driver ) ;
40263: LD_VAR 0 18
40267: PPUSH
40268: CALL 65685 0 1
// AddComEnterUnit ( driver , tmp ) ;
40272: LD_VAR 0 18
40276: PPUSH
40277: LD_VAR 0 13
40281: PPUSH
40282: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40286: LD_VAR 0 18
40290: PPUSH
40291: LD_VAR 0 7
40295: PPUSH
40296: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40300: LD_VAR 0 18
40304: PPUSH
40305: CALL_OW 181
// end ; continue ;
40309: GO 39961
// end ; if not cleaners or not tmp in cleaners then
40311: LD_VAR 0 6
40315: NOT
40316: PUSH
40317: LD_VAR 0 13
40321: PUSH
40322: LD_VAR 0 6
40326: IN
40327: NOT
40328: OR
40329: IFFALSE 40636
// begin if dep then
40331: LD_VAR 0 17
40335: IFFALSE 40471
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40337: LD_ADDR_VAR 0 16
40341: PUSH
40342: LD_VAR 0 17
40346: PUSH
40347: LD_INT 1
40349: ARRAY
40350: PPUSH
40351: CALL_OW 250
40355: PPUSH
40356: LD_VAR 0 17
40360: PUSH
40361: LD_INT 1
40363: ARRAY
40364: PPUSH
40365: CALL_OW 254
40369: PPUSH
40370: LD_INT 5
40372: PPUSH
40373: CALL_OW 272
40377: PUSH
40378: LD_VAR 0 17
40382: PUSH
40383: LD_INT 1
40385: ARRAY
40386: PPUSH
40387: CALL_OW 251
40391: PPUSH
40392: LD_VAR 0 17
40396: PUSH
40397: LD_INT 1
40399: ARRAY
40400: PPUSH
40401: CALL_OW 254
40405: PPUSH
40406: LD_INT 5
40408: PPUSH
40409: CALL_OW 273
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40418: LD_VAR 0 16
40422: PUSH
40423: LD_INT 1
40425: ARRAY
40426: PPUSH
40427: LD_VAR 0 16
40431: PUSH
40432: LD_INT 2
40434: ARRAY
40435: PPUSH
40436: CALL_OW 488
40440: IFFALSE 40471
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40442: LD_VAR 0 13
40446: PPUSH
40447: LD_VAR 0 16
40451: PUSH
40452: LD_INT 1
40454: ARRAY
40455: PPUSH
40456: LD_VAR 0 16
40460: PUSH
40461: LD_INT 2
40463: ARRAY
40464: PPUSH
40465: CALL_OW 111
// continue ;
40469: GO 39961
// end ; end ; r := GetDir ( tmp ) ;
40471: LD_ADDR_VAR 0 15
40475: PUSH
40476: LD_VAR 0 13
40480: PPUSH
40481: CALL_OW 254
40485: ST_TO_ADDR
// if r = 5 then
40486: LD_VAR 0 15
40490: PUSH
40491: LD_INT 5
40493: EQUAL
40494: IFFALSE 40504
// r := 0 ;
40496: LD_ADDR_VAR 0 15
40500: PUSH
40501: LD_INT 0
40503: ST_TO_ADDR
// for j = r to 5 do
40504: LD_ADDR_VAR 0 10
40508: PUSH
40509: DOUBLE
40510: LD_VAR 0 15
40514: DEC
40515: ST_TO_ADDR
40516: LD_INT 5
40518: PUSH
40519: FOR_TO
40520: IFFALSE 40634
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40522: LD_ADDR_VAR 0 11
40526: PUSH
40527: LD_VAR 0 13
40531: PPUSH
40532: CALL_OW 250
40536: PPUSH
40537: LD_VAR 0 10
40541: PPUSH
40542: LD_INT 2
40544: PPUSH
40545: CALL_OW 272
40549: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40550: LD_ADDR_VAR 0 12
40554: PUSH
40555: LD_VAR 0 13
40559: PPUSH
40560: CALL_OW 251
40564: PPUSH
40565: LD_VAR 0 10
40569: PPUSH
40570: LD_INT 2
40572: PPUSH
40573: CALL_OW 273
40577: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40578: LD_VAR 0 11
40582: PPUSH
40583: LD_VAR 0 12
40587: PPUSH
40588: CALL_OW 488
40592: PUSH
40593: LD_VAR 0 11
40597: PPUSH
40598: LD_VAR 0 12
40602: PPUSH
40603: CALL_OW 428
40607: NOT
40608: AND
40609: IFFALSE 40632
// begin ComMoveXY ( tmp , _x , _y ) ;
40611: LD_VAR 0 13
40615: PPUSH
40616: LD_VAR 0 11
40620: PPUSH
40621: LD_VAR 0 12
40625: PPUSH
40626: CALL_OW 111
// break ;
40630: GO 40634
// end ; end ;
40632: GO 40519
40634: POP
40635: POP
// end ; end ;
40636: GO 39961
40638: POP
40639: POP
// end ;
40640: LD_VAR 0 8
40644: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40645: LD_INT 0
40647: PPUSH
// result := true ;
40648: LD_ADDR_VAR 0 3
40652: PUSH
40653: LD_INT 1
40655: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40656: LD_VAR 0 2
40660: PUSH
40661: LD_INT 24
40663: DOUBLE
40664: EQUAL
40665: IFTRUE 40675
40667: LD_INT 33
40669: DOUBLE
40670: EQUAL
40671: IFTRUE 40675
40673: GO 40700
40675: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40676: LD_ADDR_VAR 0 3
40680: PUSH
40681: LD_INT 32
40683: PPUSH
40684: LD_VAR 0 1
40688: PPUSH
40689: CALL_OW 321
40693: PUSH
40694: LD_INT 2
40696: EQUAL
40697: ST_TO_ADDR
40698: GO 41016
40700: LD_INT 20
40702: DOUBLE
40703: EQUAL
40704: IFTRUE 40708
40706: GO 40733
40708: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40709: LD_ADDR_VAR 0 3
40713: PUSH
40714: LD_INT 6
40716: PPUSH
40717: LD_VAR 0 1
40721: PPUSH
40722: CALL_OW 321
40726: PUSH
40727: LD_INT 2
40729: EQUAL
40730: ST_TO_ADDR
40731: GO 41016
40733: LD_INT 22
40735: DOUBLE
40736: EQUAL
40737: IFTRUE 40747
40739: LD_INT 36
40741: DOUBLE
40742: EQUAL
40743: IFTRUE 40747
40745: GO 40772
40747: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40748: LD_ADDR_VAR 0 3
40752: PUSH
40753: LD_INT 15
40755: PPUSH
40756: LD_VAR 0 1
40760: PPUSH
40761: CALL_OW 321
40765: PUSH
40766: LD_INT 2
40768: EQUAL
40769: ST_TO_ADDR
40770: GO 41016
40772: LD_INT 30
40774: DOUBLE
40775: EQUAL
40776: IFTRUE 40780
40778: GO 40805
40780: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40781: LD_ADDR_VAR 0 3
40785: PUSH
40786: LD_INT 20
40788: PPUSH
40789: LD_VAR 0 1
40793: PPUSH
40794: CALL_OW 321
40798: PUSH
40799: LD_INT 2
40801: EQUAL
40802: ST_TO_ADDR
40803: GO 41016
40805: LD_INT 28
40807: DOUBLE
40808: EQUAL
40809: IFTRUE 40819
40811: LD_INT 21
40813: DOUBLE
40814: EQUAL
40815: IFTRUE 40819
40817: GO 40844
40819: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40820: LD_ADDR_VAR 0 3
40824: PUSH
40825: LD_INT 21
40827: PPUSH
40828: LD_VAR 0 1
40832: PPUSH
40833: CALL_OW 321
40837: PUSH
40838: LD_INT 2
40840: EQUAL
40841: ST_TO_ADDR
40842: GO 41016
40844: LD_INT 16
40846: DOUBLE
40847: EQUAL
40848: IFTRUE 40852
40850: GO 40877
40852: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40853: LD_ADDR_VAR 0 3
40857: PUSH
40858: LD_INT 84
40860: PPUSH
40861: LD_VAR 0 1
40865: PPUSH
40866: CALL_OW 321
40870: PUSH
40871: LD_INT 2
40873: EQUAL
40874: ST_TO_ADDR
40875: GO 41016
40877: LD_INT 19
40879: DOUBLE
40880: EQUAL
40881: IFTRUE 40891
40883: LD_INT 23
40885: DOUBLE
40886: EQUAL
40887: IFTRUE 40891
40889: GO 40916
40891: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40892: LD_ADDR_VAR 0 3
40896: PUSH
40897: LD_INT 83
40899: PPUSH
40900: LD_VAR 0 1
40904: PPUSH
40905: CALL_OW 321
40909: PUSH
40910: LD_INT 2
40912: EQUAL
40913: ST_TO_ADDR
40914: GO 41016
40916: LD_INT 17
40918: DOUBLE
40919: EQUAL
40920: IFTRUE 40924
40922: GO 40949
40924: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40925: LD_ADDR_VAR 0 3
40929: PUSH
40930: LD_INT 39
40932: PPUSH
40933: LD_VAR 0 1
40937: PPUSH
40938: CALL_OW 321
40942: PUSH
40943: LD_INT 2
40945: EQUAL
40946: ST_TO_ADDR
40947: GO 41016
40949: LD_INT 18
40951: DOUBLE
40952: EQUAL
40953: IFTRUE 40957
40955: GO 40982
40957: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40958: LD_ADDR_VAR 0 3
40962: PUSH
40963: LD_INT 40
40965: PPUSH
40966: LD_VAR 0 1
40970: PPUSH
40971: CALL_OW 321
40975: PUSH
40976: LD_INT 2
40978: EQUAL
40979: ST_TO_ADDR
40980: GO 41016
40982: LD_INT 27
40984: DOUBLE
40985: EQUAL
40986: IFTRUE 40990
40988: GO 41015
40990: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40991: LD_ADDR_VAR 0 3
40995: PUSH
40996: LD_INT 35
40998: PPUSH
40999: LD_VAR 0 1
41003: PPUSH
41004: CALL_OW 321
41008: PUSH
41009: LD_INT 2
41011: EQUAL
41012: ST_TO_ADDR
41013: GO 41016
41015: POP
// end ;
41016: LD_VAR 0 3
41020: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41021: LD_INT 0
41023: PPUSH
41024: PPUSH
41025: PPUSH
41026: PPUSH
41027: PPUSH
41028: PPUSH
41029: PPUSH
41030: PPUSH
41031: PPUSH
41032: PPUSH
41033: PPUSH
// result := false ;
41034: LD_ADDR_VAR 0 6
41038: PUSH
41039: LD_INT 0
41041: ST_TO_ADDR
// if btype = b_depot then
41042: LD_VAR 0 2
41046: PUSH
41047: LD_INT 0
41049: EQUAL
41050: IFFALSE 41062
// begin result := true ;
41052: LD_ADDR_VAR 0 6
41056: PUSH
41057: LD_INT 1
41059: ST_TO_ADDR
// exit ;
41060: GO 41888
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41062: LD_VAR 0 1
41066: NOT
41067: PUSH
41068: LD_VAR 0 1
41072: PPUSH
41073: CALL_OW 266
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: IN
41088: NOT
41089: OR
41090: PUSH
41091: LD_VAR 0 2
41095: NOT
41096: OR
41097: PUSH
41098: LD_VAR 0 5
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: LD_INT 2
41111: PUSH
41112: LD_INT 3
41114: PUSH
41115: LD_INT 4
41117: PUSH
41118: LD_INT 5
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: IN
41129: NOT
41130: OR
41131: PUSH
41132: LD_VAR 0 3
41136: PPUSH
41137: LD_VAR 0 4
41141: PPUSH
41142: CALL_OW 488
41146: NOT
41147: OR
41148: IFFALSE 41152
// exit ;
41150: GO 41888
// side := GetSide ( depot ) ;
41152: LD_ADDR_VAR 0 9
41156: PUSH
41157: LD_VAR 0 1
41161: PPUSH
41162: CALL_OW 255
41166: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41167: LD_VAR 0 9
41171: PPUSH
41172: LD_VAR 0 2
41176: PPUSH
41177: CALL 40645 0 2
41181: NOT
41182: IFFALSE 41186
// exit ;
41184: GO 41888
// pom := GetBase ( depot ) ;
41186: LD_ADDR_VAR 0 10
41190: PUSH
41191: LD_VAR 0 1
41195: PPUSH
41196: CALL_OW 274
41200: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41201: LD_ADDR_VAR 0 11
41205: PUSH
41206: LD_VAR 0 2
41210: PPUSH
41211: LD_VAR 0 1
41215: PPUSH
41216: CALL_OW 248
41220: PPUSH
41221: CALL_OW 450
41225: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41226: LD_VAR 0 10
41230: PPUSH
41231: LD_INT 1
41233: PPUSH
41234: CALL_OW 275
41238: PUSH
41239: LD_VAR 0 11
41243: PUSH
41244: LD_INT 1
41246: ARRAY
41247: GREATEREQUAL
41248: PUSH
41249: LD_VAR 0 10
41253: PPUSH
41254: LD_INT 2
41256: PPUSH
41257: CALL_OW 275
41261: PUSH
41262: LD_VAR 0 11
41266: PUSH
41267: LD_INT 2
41269: ARRAY
41270: GREATEREQUAL
41271: AND
41272: PUSH
41273: LD_VAR 0 10
41277: PPUSH
41278: LD_INT 3
41280: PPUSH
41281: CALL_OW 275
41285: PUSH
41286: LD_VAR 0 11
41290: PUSH
41291: LD_INT 3
41293: ARRAY
41294: GREATEREQUAL
41295: AND
41296: NOT
41297: IFFALSE 41301
// exit ;
41299: GO 41888
// if GetBType ( depot ) = b_depot then
41301: LD_VAR 0 1
41305: PPUSH
41306: CALL_OW 266
41310: PUSH
41311: LD_INT 0
41313: EQUAL
41314: IFFALSE 41326
// dist := 28 else
41316: LD_ADDR_VAR 0 14
41320: PUSH
41321: LD_INT 28
41323: ST_TO_ADDR
41324: GO 41334
// dist := 36 ;
41326: LD_ADDR_VAR 0 14
41330: PUSH
41331: LD_INT 36
41333: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41334: LD_VAR 0 1
41338: PPUSH
41339: LD_VAR 0 3
41343: PPUSH
41344: LD_VAR 0 4
41348: PPUSH
41349: CALL_OW 297
41353: PUSH
41354: LD_VAR 0 14
41358: GREATER
41359: IFFALSE 41363
// exit ;
41361: GO 41888
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41363: LD_ADDR_VAR 0 12
41367: PUSH
41368: LD_VAR 0 2
41372: PPUSH
41373: LD_VAR 0 3
41377: PPUSH
41378: LD_VAR 0 4
41382: PPUSH
41383: LD_VAR 0 5
41387: PPUSH
41388: LD_VAR 0 1
41392: PPUSH
41393: CALL_OW 248
41397: PPUSH
41398: LD_INT 0
41400: PPUSH
41401: CALL 41893 0 6
41405: ST_TO_ADDR
// if not hexes then
41406: LD_VAR 0 12
41410: NOT
41411: IFFALSE 41415
// exit ;
41413: GO 41888
// hex := GetHexInfo ( x , y ) ;
41415: LD_ADDR_VAR 0 15
41419: PUSH
41420: LD_VAR 0 3
41424: PPUSH
41425: LD_VAR 0 4
41429: PPUSH
41430: CALL_OW 546
41434: ST_TO_ADDR
// if hex [ 1 ] then
41435: LD_VAR 0 15
41439: PUSH
41440: LD_INT 1
41442: ARRAY
41443: IFFALSE 41447
// exit ;
41445: GO 41888
// height := hex [ 2 ] ;
41447: LD_ADDR_VAR 0 13
41451: PUSH
41452: LD_VAR 0 15
41456: PUSH
41457: LD_INT 2
41459: ARRAY
41460: ST_TO_ADDR
// for i = 1 to hexes do
41461: LD_ADDR_VAR 0 7
41465: PUSH
41466: DOUBLE
41467: LD_INT 1
41469: DEC
41470: ST_TO_ADDR
41471: LD_VAR 0 12
41475: PUSH
41476: FOR_TO
41477: IFFALSE 41807
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41479: LD_VAR 0 12
41483: PUSH
41484: LD_VAR 0 7
41488: ARRAY
41489: PUSH
41490: LD_INT 1
41492: ARRAY
41493: PPUSH
41494: LD_VAR 0 12
41498: PUSH
41499: LD_VAR 0 7
41503: ARRAY
41504: PUSH
41505: LD_INT 2
41507: ARRAY
41508: PPUSH
41509: CALL_OW 488
41513: NOT
41514: PUSH
41515: LD_VAR 0 12
41519: PUSH
41520: LD_VAR 0 7
41524: ARRAY
41525: PUSH
41526: LD_INT 1
41528: ARRAY
41529: PPUSH
41530: LD_VAR 0 12
41534: PUSH
41535: LD_VAR 0 7
41539: ARRAY
41540: PUSH
41541: LD_INT 2
41543: ARRAY
41544: PPUSH
41545: CALL_OW 428
41549: PUSH
41550: LD_INT 0
41552: GREATER
41553: OR
41554: PUSH
41555: LD_VAR 0 12
41559: PUSH
41560: LD_VAR 0 7
41564: ARRAY
41565: PUSH
41566: LD_INT 1
41568: ARRAY
41569: PPUSH
41570: LD_VAR 0 12
41574: PUSH
41575: LD_VAR 0 7
41579: ARRAY
41580: PUSH
41581: LD_INT 2
41583: ARRAY
41584: PPUSH
41585: CALL_OW 351
41589: OR
41590: IFFALSE 41596
// exit ;
41592: POP
41593: POP
41594: GO 41888
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41596: LD_ADDR_VAR 0 8
41600: PUSH
41601: LD_VAR 0 12
41605: PUSH
41606: LD_VAR 0 7
41610: ARRAY
41611: PUSH
41612: LD_INT 1
41614: ARRAY
41615: PPUSH
41616: LD_VAR 0 12
41620: PUSH
41621: LD_VAR 0 7
41625: ARRAY
41626: PUSH
41627: LD_INT 2
41629: ARRAY
41630: PPUSH
41631: CALL_OW 546
41635: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41636: LD_VAR 0 8
41640: PUSH
41641: LD_INT 1
41643: ARRAY
41644: PUSH
41645: LD_VAR 0 8
41649: PUSH
41650: LD_INT 2
41652: ARRAY
41653: PUSH
41654: LD_VAR 0 13
41658: PUSH
41659: LD_INT 2
41661: PLUS
41662: GREATER
41663: OR
41664: PUSH
41665: LD_VAR 0 8
41669: PUSH
41670: LD_INT 2
41672: ARRAY
41673: PUSH
41674: LD_VAR 0 13
41678: PUSH
41679: LD_INT 2
41681: MINUS
41682: LESS
41683: OR
41684: PUSH
41685: LD_VAR 0 8
41689: PUSH
41690: LD_INT 3
41692: ARRAY
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 8
41699: PUSH
41700: LD_INT 9
41702: PUSH
41703: LD_INT 10
41705: PUSH
41706: LD_INT 11
41708: PUSH
41709: LD_INT 12
41711: PUSH
41712: LD_INT 13
41714: PUSH
41715: LD_INT 16
41717: PUSH
41718: LD_INT 17
41720: PUSH
41721: LD_INT 18
41723: PUSH
41724: LD_INT 19
41726: PUSH
41727: LD_INT 20
41729: PUSH
41730: LD_INT 21
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: IN
41748: NOT
41749: OR
41750: PUSH
41751: LD_VAR 0 8
41755: PUSH
41756: LD_INT 5
41758: ARRAY
41759: NOT
41760: OR
41761: PUSH
41762: LD_VAR 0 8
41766: PUSH
41767: LD_INT 6
41769: ARRAY
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: LD_INT 2
41776: PUSH
41777: LD_INT 7
41779: PUSH
41780: LD_INT 9
41782: PUSH
41783: LD_INT 10
41785: PUSH
41786: LD_INT 11
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: IN
41797: NOT
41798: OR
41799: IFFALSE 41805
// exit ;
41801: POP
41802: POP
41803: GO 41888
// end ;
41805: GO 41476
41807: POP
41808: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41809: LD_VAR 0 9
41813: PPUSH
41814: LD_VAR 0 3
41818: PPUSH
41819: LD_VAR 0 4
41823: PPUSH
41824: LD_INT 20
41826: PPUSH
41827: CALL 33811 0 4
41831: PUSH
41832: LD_INT 4
41834: ARRAY
41835: IFFALSE 41839
// exit ;
41837: GO 41888
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41839: LD_VAR 0 2
41843: PUSH
41844: LD_INT 29
41846: PUSH
41847: LD_INT 30
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: IN
41854: PUSH
41855: LD_VAR 0 3
41859: PPUSH
41860: LD_VAR 0 4
41864: PPUSH
41865: LD_VAR 0 9
41869: PPUSH
41870: CALL_OW 440
41874: NOT
41875: AND
41876: IFFALSE 41880
// exit ;
41878: GO 41888
// result := true ;
41880: LD_ADDR_VAR 0 6
41884: PUSH
41885: LD_INT 1
41887: ST_TO_ADDR
// end ;
41888: LD_VAR 0 6
41892: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41893: LD_INT 0
41895: PPUSH
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
41907: PPUSH
41908: PPUSH
41909: PPUSH
41910: PPUSH
41911: PPUSH
41912: PPUSH
41913: PPUSH
41914: PPUSH
41915: PPUSH
41916: PPUSH
41917: PPUSH
41918: PPUSH
41919: PPUSH
41920: PPUSH
41921: PPUSH
41922: PPUSH
41923: PPUSH
41924: PPUSH
41925: PPUSH
41926: PPUSH
41927: PPUSH
41928: PPUSH
41929: PPUSH
41930: PPUSH
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
41935: PPUSH
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
41946: PPUSH
41947: PPUSH
41948: PPUSH
41949: PPUSH
41950: PPUSH
41951: PPUSH
41952: PPUSH
// result = [ ] ;
41953: LD_ADDR_VAR 0 7
41957: PUSH
41958: EMPTY
41959: ST_TO_ADDR
// temp_list = [ ] ;
41960: LD_ADDR_VAR 0 9
41964: PUSH
41965: EMPTY
41966: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41967: LD_VAR 0 4
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: LD_INT 2
41980: PUSH
41981: LD_INT 3
41983: PUSH
41984: LD_INT 4
41986: PUSH
41987: LD_INT 5
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: IN
41998: NOT
41999: PUSH
42000: LD_VAR 0 1
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: IN
42015: PUSH
42016: LD_VAR 0 5
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: LD_INT 2
42026: PUSH
42027: LD_INT 3
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: IN
42035: NOT
42036: AND
42037: OR
42038: IFFALSE 42042
// exit ;
42040: GO 60433
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42042: LD_VAR 0 1
42046: PUSH
42047: LD_INT 6
42049: PUSH
42050: LD_INT 7
42052: PUSH
42053: LD_INT 8
42055: PUSH
42056: LD_INT 13
42058: PUSH
42059: LD_INT 12
42061: PUSH
42062: LD_INT 15
42064: PUSH
42065: LD_INT 11
42067: PUSH
42068: LD_INT 14
42070: PUSH
42071: LD_INT 10
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: IN
42085: IFFALSE 42095
// btype = b_lab ;
42087: LD_ADDR_VAR 0 1
42091: PUSH
42092: LD_INT 6
42094: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42095: LD_VAR 0 6
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: LD_INT 1
42105: PUSH
42106: LD_INT 2
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: LIST
42113: IN
42114: NOT
42115: PUSH
42116: LD_VAR 0 1
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: LD_INT 2
42129: PUSH
42130: LD_INT 3
42132: PUSH
42133: LD_INT 6
42135: PUSH
42136: LD_INT 36
42138: PUSH
42139: LD_INT 4
42141: PUSH
42142: LD_INT 5
42144: PUSH
42145: LD_INT 31
42147: PUSH
42148: LD_INT 32
42150: PUSH
42151: LD_INT 33
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: IN
42167: NOT
42168: PUSH
42169: LD_VAR 0 6
42173: PUSH
42174: LD_INT 1
42176: EQUAL
42177: AND
42178: OR
42179: PUSH
42180: LD_VAR 0 1
42184: PUSH
42185: LD_INT 2
42187: PUSH
42188: LD_INT 3
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: IN
42195: NOT
42196: PUSH
42197: LD_VAR 0 6
42201: PUSH
42202: LD_INT 2
42204: EQUAL
42205: AND
42206: OR
42207: IFFALSE 42217
// mode = 0 ;
42209: LD_ADDR_VAR 0 6
42213: PUSH
42214: LD_INT 0
42216: ST_TO_ADDR
// case mode of 0 :
42217: LD_VAR 0 6
42221: PUSH
42222: LD_INT 0
42224: DOUBLE
42225: EQUAL
42226: IFTRUE 42230
42228: GO 53683
42230: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42231: LD_ADDR_VAR 0 11
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: LD_INT 1
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: LD_INT 0
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: NEG
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: LD_INT 2
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: LD_INT 1
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 2
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: LD_INT 1
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 3
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 3
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42424: LD_ADDR_VAR 0 12
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: NEG
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: NEG
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: LD_INT 1
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 2
42570: NEG
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 3
42581: NEG
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: NEG
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42620: LD_ADDR_VAR 0 13
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: LD_INT 2
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: LD_INT 2
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 2
42767: NEG
42768: PUSH
42769: LD_INT 3
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 3
42779: NEG
42780: PUSH
42781: LD_INT 2
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 3
42791: NEG
42792: PUSH
42793: LD_INT 3
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42819: LD_ADDR_VAR 0 14
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: LD_INT 2
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: LD_INT 2
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 1
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: LD_INT 3
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: LD_INT 3
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 2
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43015: LD_ADDR_VAR 0 15
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: LD_INT 1
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 2
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 2
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 2
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 3
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 3
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43208: LD_ADDR_VAR 0 16
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 0
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 2
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 2
43343: NEG
43344: PUSH
43345: LD_INT 2
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 3
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 3
43365: PUSH
43366: LD_INT 3
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 2
43375: PUSH
43376: LD_INT 3
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43401: LD_ADDR_VAR 0 17
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 0
43449: PUSH
43450: LD_INT 1
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: LD_INT 2
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 2
43497: NEG
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 2
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: LD_INT 2
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 1
43566: NEG
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 2
43577: NEG
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: LD_INT 2
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43631: LD_ADDR_VAR 0 18
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: LD_INT 2
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 2
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: LD_INT 1
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: LD_INT 2
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 2
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: LD_INT 0
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 2
43818: NEG
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: NEG
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43861: LD_ADDR_VAR 0 19
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: LD_INT 1
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 2
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 2
44037: NEG
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 2
44048: NEG
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44091: LD_ADDR_VAR 0 20
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: LD_INT 0
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: NEG
44173: PUSH
44174: LD_INT 2
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 2
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: LD_INT 2
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: NEG
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 2
44278: NEG
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 2
44290: NEG
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44321: LD_ADDR_VAR 0 21
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 2
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 2
44436: PUSH
44437: LD_INT 0
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 2
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 2
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: NEG
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 2
44508: NEG
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44551: LD_ADDR_VAR 0 22
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 0
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: NEG
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 2
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44781: LD_ADDR_VAR 0 23
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 1
44801: NEG
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 1
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 2
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: NEG
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: LD_INT 3
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 3
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45061: LD_ADDR_VAR 0 24
45065: PUSH
45066: LD_INT 0
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: NEG
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 2
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 2
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 2
45237: NEG
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 2
45248: NEG
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 3
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 3
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45337: LD_ADDR_VAR 0 25
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: LD_INT 1
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: LD_INT 1
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 2
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: NEG
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: NEG
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 3
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 3
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: LD_INT 3
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: LD_INT 3
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45611: LD_ADDR_VAR 0 26
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 2
45810: NEG
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: LD_INT 3
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 3
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 2
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45887: LD_ADDR_VAR 0 27
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 3
46120: NEG
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 3
46132: NEG
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46167: LD_ADDR_VAR 0 28
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: NEG
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: NEG
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: LD_INT 3
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: LD_INT 3
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 3
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 3
46414: NEG
46415: PUSH
46416: LD_INT 2
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46449: LD_ADDR_VAR 0 29
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: LD_INT 1
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: LD_INT 2
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 2
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: LD_INT 2
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: LD_INT 2
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: LD_INT 3
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 3
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 3
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: LD_INT 2
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 3
46693: NEG
46694: PUSH
46695: LD_INT 2
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46728: LD_ADDR_VAR 0 30
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: LD_INT 2
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 2
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: LD_INT 3
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 3
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: LD_INT 3
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 3
46971: NEG
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47006: LD_ADDR_VAR 0 31
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 1
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: LD_INT 2
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 2
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 2
47171: NEG
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 2
47183: NEG
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: LD_INT 3
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 3
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 3
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 1
47238: NEG
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 3
47249: NEG
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47284: LD_ADDR_VAR 0 32
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: LD_INT 1
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 2
47450: NEG
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: LD_INT 3
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 3
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: LD_INT 3
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 3
47527: NEG
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47562: LD_ADDR_VAR 0 33
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 0
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: LD_INT 2
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: LD_INT 3
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 3
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 3
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 2
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 3
47806: NEG
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47841: LD_ADDR_VAR 0 34
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 0
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: LD_INT 3
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: LD_INT 2
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 3
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: LD_INT 3
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 3
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48121: LD_ADDR_VAR 0 35
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48233: LD_ADDR_VAR 0 36
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 2
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48345: LD_ADDR_VAR 0 37
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: NEG
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48457: LD_ADDR_VAR 0 38
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48569: LD_ADDR_VAR 0 39
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 2
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48681: LD_ADDR_VAR 0 40
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 0
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48793: LD_ADDR_VAR 0 41
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: NEG
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: LD_INT 3
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 3
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 3
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 3
49026: PUSH
49027: LD_INT 2
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 3
49036: PUSH
49037: LD_INT 3
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: PUSH
49047: LD_INT 3
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: NEG
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 3
49067: NEG
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 3
49090: NEG
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 3
49102: NEG
49103: PUSH
49104: LD_INT 3
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49143: LD_ADDR_VAR 0 42
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: LD_INT 3
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: LD_INT 3
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: LD_INT 3
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: LD_INT 2
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 3
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 3
49389: PUSH
49390: LD_INT 3
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: LD_INT 3
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 3
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 3
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 3
49440: NEG
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 3
49452: NEG
49453: PUSH
49454: LD_INT 3
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49493: LD_ADDR_VAR 0 43
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 2
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: NEG
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: LD_INT 3
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 3
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 3
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 3
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 3
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 3
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 2
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 3
49789: NEG
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 3
49800: NEG
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49841: LD_ADDR_VAR 0 44
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 2
50019: NEG
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: NEG
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 2
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 3
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 3
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 3
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 3
50084: PUSH
50085: LD_INT 3
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 3
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 3
50115: NEG
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 3
50126: NEG
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 3
50138: NEG
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 3
50150: NEG
50151: PUSH
50152: LD_INT 3
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50191: LD_ADDR_VAR 0 45
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: LD_INT 2
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 2
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: LD_INT 2
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: LD_INT 3
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 3
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 3
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 2
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 3
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 3
50437: PUSH
50438: LD_INT 3
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: PUSH
50448: LD_INT 3
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: LD_INT 3
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 3
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 3
50488: NEG
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 3
50500: NEG
50501: PUSH
50502: LD_INT 3
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50541: LD_ADDR_VAR 0 46
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 2
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 2
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 3
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 3
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 2
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 3
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 3
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: LD_INT 3
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 2
50826: NEG
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 3
50837: NEG
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 3
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50889: LD_ADDR_VAR 0 47
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: LD_INT 2
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 2
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 2
51016: NEG
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51040: LD_ADDR_VAR 0 48
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 2
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51187: LD_ADDR_VAR 0 49
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: LD_INT 2
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51331: LD_ADDR_VAR 0 50
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51475: LD_ADDR_VAR 0 51
51479: PUSH
51480: LD_INT 0
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: LD_INT 2
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 2
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51622: LD_ADDR_VAR 0 52
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 2
51707: NEG
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51773: LD_ADDR_VAR 0 53
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: LD_INT 2
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: LD_INT 1
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: LD_INT 2
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52003: LD_ADDR_VAR 0 54
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 1
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 0
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 2
52118: PUSH
52119: LD_INT 0
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 0
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: NEG
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 2
52179: NEG
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 2
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52233: LD_ADDR_VAR 0 55
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 2
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52463: LD_ADDR_VAR 0 56
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 1
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: LD_INT 2
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 2
52639: NEG
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52693: LD_ADDR_VAR 0 57
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 2
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52923: LD_ADDR_VAR 0 58
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 2
53110: NEG
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53153: LD_ADDR_VAR 0 59
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 0
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 1
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53241: LD_ADDR_VAR 0 60
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53329: LD_ADDR_VAR 0 61
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53417: LD_ADDR_VAR 0 62
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53505: LD_ADDR_VAR 0 63
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53593: LD_ADDR_VAR 0 64
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: ST_TO_ADDR
// end ; 1 :
53681: GO 59578
53683: LD_INT 1
53685: DOUBLE
53686: EQUAL
53687: IFTRUE 53691
53689: GO 56314
53691: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53692: LD_ADDR_VAR 0 11
53696: PUSH
53697: LD_INT 1
53699: NEG
53700: PUSH
53701: LD_INT 3
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 3
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: LIST
53735: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53736: LD_ADDR_VAR 0 12
53740: PUSH
53741: LD_INT 2
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 3
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 3
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: LIST
53776: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53777: LD_ADDR_VAR 0 13
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 3
53794: PUSH
53795: LD_INT 3
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: LD_INT 3
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53817: LD_ADDR_VAR 0 14
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: LD_INT 3
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 2
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: LIST
53857: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53858: LD_ADDR_VAR 0 15
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 3
53876: NEG
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: LIST
53901: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53902: LD_ADDR_VAR 0 16
53906: PUSH
53907: LD_INT 2
53909: NEG
53910: PUSH
53911: LD_INT 3
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 3
53921: NEG
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 3
53933: NEG
53934: PUSH
53935: LD_INT 3
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: LIST
53947: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53948: LD_ADDR_VAR 0 17
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: LD_INT 3
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 3
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: LIST
53991: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53992: LD_ADDR_VAR 0 18
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 3
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 3
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54033: LD_ADDR_VAR 0 19
54037: PUSH
54038: LD_INT 3
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 3
54050: PUSH
54051: LD_INT 3
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 2
54060: PUSH
54061: LD_INT 3
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: LIST
54072: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54073: LD_ADDR_VAR 0 20
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: LD_INT 3
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: LIST
54113: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54114: LD_ADDR_VAR 0 21
54118: PUSH
54119: LD_INT 2
54121: NEG
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 3
54132: NEG
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 3
54143: NEG
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54158: LD_ADDR_VAR 0 22
54162: PUSH
54163: LD_INT 2
54165: NEG
54166: PUSH
54167: LD_INT 3
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 3
54177: NEG
54178: PUSH
54179: LD_INT 2
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 3
54189: NEG
54190: PUSH
54191: LD_INT 3
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: LIST
54203: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54204: LD_ADDR_VAR 0 23
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: LD_INT 3
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 4
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 3
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: LIST
54247: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54248: LD_ADDR_VAR 0 24
54252: PUSH
54253: LD_INT 3
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 3
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 4
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: LIST
54288: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54289: LD_ADDR_VAR 0 25
54293: PUSH
54294: LD_INT 3
54296: PUSH
54297: LD_INT 3
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 4
54306: PUSH
54307: LD_INT 3
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 3
54316: PUSH
54317: LD_INT 4
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: LIST
54328: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54329: LD_ADDR_VAR 0 26
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 3
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: LD_INT 4
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: LIST
54369: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54370: LD_ADDR_VAR 0 27
54374: PUSH
54375: LD_INT 3
54377: NEG
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 3
54388: NEG
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 4
54399: NEG
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: LIST
54413: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54414: LD_ADDR_VAR 0 28
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: LD_INT 3
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 3
54433: NEG
54434: PUSH
54435: LD_INT 4
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 4
54445: NEG
54446: PUSH
54447: LD_INT 3
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: LIST
54459: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54460: LD_ADDR_VAR 0 29
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 3
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: LD_INT 3
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 2
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 4
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 4
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 3
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 5
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 5
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: PUSH
54559: LD_INT 4
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 6
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 6
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: LD_INT 5
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54615: LD_ADDR_VAR 0 30
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 3
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 3
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 4
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 4
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 4
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 5
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 5
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 5
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 6
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 6
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54758: LD_ADDR_VAR 0 31
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 3
54775: PUSH
54776: LD_INT 3
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: LD_INT 3
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 4
54795: PUSH
54796: LD_INT 3
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 4
54805: PUSH
54806: LD_INT 4
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 3
54815: PUSH
54816: LD_INT 4
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 5
54825: PUSH
54826: LD_INT 4
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 5
54835: PUSH
54836: LD_INT 5
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 4
54845: PUSH
54846: LD_INT 5
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 6
54855: PUSH
54856: LD_INT 5
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 6
54865: PUSH
54866: LD_INT 6
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 5
54875: PUSH
54876: LD_INT 6
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54897: LD_ADDR_VAR 0 32
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 3
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 3
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: LD_INT 4
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 4
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: LD_INT 3
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: LD_INT 5
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 0
54976: PUSH
54977: LD_INT 5
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: LD_INT 4
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 1
54997: PUSH
54998: LD_INT 6
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 6
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 5
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55040: LD_ADDR_VAR 0 33
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 3
55058: NEG
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 3
55069: NEG
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 3
55081: NEG
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 4
55092: NEG
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 4
55103: NEG
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 4
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 5
55126: NEG
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 5
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 5
55149: NEG
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 6
55160: NEG
55161: PUSH
55162: LD_INT 0
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 6
55171: NEG
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55195: LD_ADDR_VAR 0 34
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: LD_INT 3
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 3
55214: NEG
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 3
55238: NEG
55239: PUSH
55240: LD_INT 4
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 4
55250: NEG
55251: PUSH
55252: LD_INT 3
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 4
55262: NEG
55263: PUSH
55264: LD_INT 4
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 4
55274: NEG
55275: PUSH
55276: LD_INT 5
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 5
55286: NEG
55287: PUSH
55288: LD_INT 4
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 5
55298: NEG
55299: PUSH
55300: LD_INT 5
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 5
55310: NEG
55311: PUSH
55312: LD_INT 6
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 6
55322: NEG
55323: PUSH
55324: LD_INT 5
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 6
55334: NEG
55335: PUSH
55336: LD_INT 6
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55358: LD_ADDR_VAR 0 41
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 2
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: LD_INT 3
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: LD_INT 2
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: LIST
55401: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55402: LD_ADDR_VAR 0 42
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 3
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: LIST
55442: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55443: LD_ADDR_VAR 0 43
55447: PUSH
55448: LD_INT 2
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 3
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: LIST
55482: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55483: LD_ADDR_VAR 0 44
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: NEG
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: LIST
55523: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55524: LD_ADDR_VAR 0 45
55528: PUSH
55529: LD_INT 2
55531: NEG
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 3
55553: NEG
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: LIST
55567: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55568: LD_ADDR_VAR 0 46
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: LD_INT 2
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: LD_INT 3
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55614: LD_ADDR_VAR 0 47
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: LD_INT 3
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: LD_INT 3
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55647: LD_ADDR_VAR 0 48
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: LD_INT 2
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55678: LD_ADDR_VAR 0 49
55682: PUSH
55683: LD_INT 3
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 3
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55707: LD_ADDR_VAR 0 50
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: LD_INT 3
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 3
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55736: LD_ADDR_VAR 0 51
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55767: LD_ADDR_VAR 0 52
55771: PUSH
55772: LD_INT 3
55774: NEG
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 3
55786: NEG
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55800: LD_ADDR_VAR 0 53
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: LD_INT 3
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 3
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: LIST
55843: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55844: LD_ADDR_VAR 0 54
55848: PUSH
55849: LD_INT 2
55851: PUSH
55852: LD_INT 1
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 3
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 3
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: LIST
55884: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55885: LD_ADDR_VAR 0 55
55889: PUSH
55890: LD_INT 3
55892: PUSH
55893: LD_INT 2
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 3
55902: PUSH
55903: LD_INT 3
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: PUSH
55913: LD_INT 3
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: LIST
55924: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55925: LD_ADDR_VAR 0 56
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: LD_INT 3
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 3
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: LIST
55965: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55966: LD_ADDR_VAR 0 57
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 3
55984: NEG
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 3
55995: NEG
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: LIST
56009: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56010: LD_ADDR_VAR 0 58
56014: PUSH
56015: LD_INT 2
56017: NEG
56018: PUSH
56019: LD_INT 3
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 3
56029: NEG
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 3
56041: NEG
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56056: LD_ADDR_VAR 0 59
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 2
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: LIST
56099: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56100: LD_ADDR_VAR 0 60
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: LIST
56140: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56141: LD_ADDR_VAR 0 61
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: LD_INT 2
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: LD_INT 2
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: LIST
56180: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56181: LD_ADDR_VAR 0 62
56185: PUSH
56186: LD_INT 1
56188: PUSH
56189: LD_INT 2
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 0
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: NEG
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: LIST
56221: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56222: LD_ADDR_VAR 0 63
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 2
56240: NEG
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: LIST
56265: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56266: LD_ADDR_VAR 0 64
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 2
56285: NEG
56286: PUSH
56287: LD_INT 1
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 2
56297: NEG
56298: PUSH
56299: LD_INT 2
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: ST_TO_ADDR
// end ; 2 :
56312: GO 59578
56314: LD_INT 2
56316: DOUBLE
56317: EQUAL
56318: IFTRUE 56322
56320: GO 59577
56322: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56323: LD_ADDR_VAR 0 29
56327: PUSH
56328: LD_INT 4
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 4
56340: PUSH
56341: LD_INT 1
56343: NEG
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 5
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 5
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 4
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 3
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 3
56391: PUSH
56392: LD_INT 1
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 3
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 5
56413: PUSH
56414: LD_INT 2
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 3
56423: PUSH
56424: LD_INT 3
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 3
56433: PUSH
56434: LD_INT 2
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 4
56443: PUSH
56444: LD_INT 3
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 4
56453: PUSH
56454: LD_INT 4
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 3
56463: PUSH
56464: LD_INT 4
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 4
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 4
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 4
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 3
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 4
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: LD_INT 5
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: LD_INT 5
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: LD_INT 4
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 3
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: LD_INT 5
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: LD_INT 3
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 3
56606: NEG
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 3
56617: NEG
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: NEG
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 4
56662: NEG
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 4
56673: NEG
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 4
56685: NEG
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 2
56697: NEG
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 4
56708: NEG
56709: PUSH
56710: LD_INT 4
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 4
56720: NEG
56721: PUSH
56722: LD_INT 5
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 3
56732: NEG
56733: PUSH
56734: LD_INT 4
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: LD_INT 3
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 4
56756: NEG
56757: PUSH
56758: LD_INT 3
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 5
56768: NEG
56769: PUSH
56770: LD_INT 4
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 5
56780: NEG
56781: PUSH
56782: LD_INT 5
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 3
56792: NEG
56793: PUSH
56794: LD_INT 5
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 5
56804: NEG
56805: PUSH
56806: LD_INT 3
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56861: LD_ADDR_VAR 0 30
56865: PUSH
56866: LD_INT 4
56868: PUSH
56869: LD_INT 4
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 4
56878: PUSH
56879: LD_INT 3
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 5
56888: PUSH
56889: LD_INT 4
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 5
56898: PUSH
56899: LD_INT 5
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 4
56908: PUSH
56909: LD_INT 5
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 3
56918: PUSH
56919: LD_INT 4
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: LD_INT 3
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 5
56938: PUSH
56939: LD_INT 3
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 3
56948: PUSH
56949: LD_INT 5
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: LD_INT 3
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: LD_INT 4
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 4
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: LD_INT 3
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 2
57030: PUSH
57031: LD_INT 4
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: LD_INT 2
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 4
57051: NEG
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 4
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 3
57074: NEG
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 3
57085: NEG
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 4
57096: NEG
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 5
57107: NEG
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 5
57118: NEG
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 5
57130: NEG
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 3
57142: NEG
57143: PUSH
57144: LD_INT 2
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 3
57153: NEG
57154: PUSH
57155: LD_INT 3
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 3
57165: NEG
57166: PUSH
57167: LD_INT 4
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: LD_INT 3
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 3
57201: NEG
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 4
57213: NEG
57214: PUSH
57215: LD_INT 3
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 4
57225: NEG
57226: PUSH
57227: LD_INT 4
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 2
57237: NEG
57238: PUSH
57239: LD_INT 4
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 4
57249: NEG
57250: PUSH
57251: LD_INT 2
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: LD_INT 4
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 0
57272: PUSH
57273: LD_INT 5
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: LD_INT 4
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: LD_INT 3
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: LD_INT 4
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: NEG
57329: PUSH
57330: LD_INT 5
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: LD_INT 3
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 2
57351: NEG
57352: PUSH
57353: LD_INT 5
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57408: LD_ADDR_VAR 0 31
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: LD_INT 4
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 0
57425: PUSH
57426: LD_INT 3
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 4
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 5
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 5
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: LD_INT 4
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 1
57476: NEG
57477: PUSH
57478: LD_INT 3
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 2
57487: PUSH
57488: LD_INT 5
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 2
57531: NEG
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 2
57542: NEG
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 3
57553: NEG
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 4
57564: NEG
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 4
57575: NEG
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 4
57587: NEG
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 2
57599: NEG
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 4
57610: NEG
57611: PUSH
57612: LD_INT 4
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 4
57622: NEG
57623: PUSH
57624: LD_INT 5
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: LD_INT 4
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 3
57646: NEG
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 4
57658: NEG
57659: PUSH
57660: LD_INT 3
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 5
57670: NEG
57671: PUSH
57672: LD_INT 4
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 5
57682: NEG
57683: PUSH
57684: LD_INT 5
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: LD_INT 5
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 5
57706: NEG
57707: PUSH
57708: LD_INT 3
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: LD_INT 3
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: LD_INT 4
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: LD_INT 3
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: LD_INT 2
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 3
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: LD_INT 4
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 2
57797: PUSH
57798: LD_INT 2
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: LD_INT 4
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 4
57820: PUSH
57821: LD_INT 0
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 4
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 5
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 5
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 4
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 3
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 3
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 3
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 5
57903: PUSH
57904: LD_INT 2
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57958: LD_ADDR_VAR 0 32
57962: PUSH
57963: LD_INT 4
57965: NEG
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 4
57976: NEG
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 3
57988: NEG
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 3
57999: NEG
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 4
58010: NEG
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 5
58021: NEG
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 5
58032: NEG
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 5
58044: NEG
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 3
58056: NEG
58057: PUSH
58058: LD_INT 2
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 3
58067: NEG
58068: PUSH
58069: LD_INT 3
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 3
58079: NEG
58080: PUSH
58081: LD_INT 4
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 2
58103: NEG
58104: PUSH
58105: LD_INT 2
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 4
58127: NEG
58128: PUSH
58129: LD_INT 3
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 4
58139: NEG
58140: PUSH
58141: LD_INT 4
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: LD_INT 4
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 4
58163: NEG
58164: PUSH
58165: LD_INT 2
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: LD_INT 4
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 0
58186: PUSH
58187: LD_INT 5
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: PUSH
58198: LD_INT 4
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 3
58211: NEG
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: NEG
58231: PUSH
58232: LD_INT 4
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: NEG
58243: PUSH
58244: LD_INT 5
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 2
58254: PUSH
58255: LD_INT 3
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: LD_INT 5
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 3
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 3
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 4
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 4
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 3
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 2
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 2
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 4
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 4
58370: PUSH
58371: LD_INT 4
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 4
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 5
58390: PUSH
58391: LD_INT 4
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 5
58400: PUSH
58401: LD_INT 5
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 4
58410: PUSH
58411: LD_INT 5
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 3
58420: PUSH
58421: LD_INT 4
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 3
58430: PUSH
58431: LD_INT 3
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 5
58440: PUSH
58441: LD_INT 3
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 3
58450: PUSH
58451: LD_INT 5
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58505: LD_ADDR_VAR 0 33
58509: PUSH
58510: LD_INT 4
58512: NEG
58513: PUSH
58514: LD_INT 4
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 4
58524: NEG
58525: PUSH
58526: LD_INT 5
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: NEG
58537: PUSH
58538: LD_INT 4
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 3
58548: NEG
58549: PUSH
58550: LD_INT 3
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 4
58560: NEG
58561: PUSH
58562: LD_INT 3
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 5
58572: NEG
58573: PUSH
58574: LD_INT 4
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 5
58584: NEG
58585: PUSH
58586: LD_INT 5
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 3
58596: NEG
58597: PUSH
58598: LD_INT 5
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 5
58608: NEG
58609: PUSH
58610: LD_INT 3
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 3
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: LD_INT 4
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: LD_INT 3
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: LD_INT 2
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: PUSH
58677: LD_INT 3
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: LD_INT 4
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: LD_INT 2
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 2
58710: NEG
58711: PUSH
58712: LD_INT 4
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 4
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 4
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 5
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 5
58753: PUSH
58754: LD_INT 1
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 4
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 3
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 3
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 5
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 3
58815: PUSH
58816: LD_INT 3
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 3
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 4
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 4
58845: PUSH
58846: LD_INT 4
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 3
58855: PUSH
58856: LD_INT 4
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 2
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 4
58885: PUSH
58886: LD_INT 2
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 2
58895: PUSH
58896: LD_INT 4
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 4
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: LD_INT 3
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: LD_INT 4
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: LD_INT 5
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: LD_INT 5
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: NEG
58956: PUSH
58957: LD_INT 4
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: LD_INT 3
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: LD_INT 5
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: LD_INT 3
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59043: LD_ADDR_VAR 0 34
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 4
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 5
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: LD_INT 4
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 3
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 4
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 5
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: LD_INT 3
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: LD_INT 5
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 4
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 4
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 3
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 2
59224: PUSH
59225: LD_INT 2
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 4
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 4
59245: PUSH
59246: LD_INT 4
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 4
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 5
59265: PUSH
59266: LD_INT 4
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 5
59275: PUSH
59276: LD_INT 5
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 4
59285: PUSH
59286: LD_INT 5
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: LD_INT 4
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 3
59305: PUSH
59306: LD_INT 3
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 5
59315: PUSH
59316: LD_INT 3
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 3
59325: PUSH
59326: LD_INT 5
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: LD_INT 2
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: LD_INT 3
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: PUSH
59366: LD_INT 4
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 4
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: LD_INT 3
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: PUSH
59408: LD_INT 4
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 4
59428: NEG
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 4
59439: NEG
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 3
59451: NEG
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 3
59462: NEG
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 4
59473: NEG
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 5
59484: NEG
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 5
59495: NEG
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 5
59507: NEG
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 3
59519: NEG
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: ST_TO_ADDR
// end ; end ;
59575: GO 59578
59577: POP
// case btype of b_depot , b_warehouse :
59578: LD_VAR 0 1
59582: PUSH
59583: LD_INT 0
59585: DOUBLE
59586: EQUAL
59587: IFTRUE 59597
59589: LD_INT 1
59591: DOUBLE
59592: EQUAL
59593: IFTRUE 59597
59595: GO 59798
59597: POP
// case nation of nation_american :
59598: LD_VAR 0 5
59602: PUSH
59603: LD_INT 1
59605: DOUBLE
59606: EQUAL
59607: IFTRUE 59611
59609: GO 59667
59611: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59612: LD_ADDR_VAR 0 9
59616: PUSH
59617: LD_VAR 0 11
59621: PUSH
59622: LD_VAR 0 12
59626: PUSH
59627: LD_VAR 0 13
59631: PUSH
59632: LD_VAR 0 14
59636: PUSH
59637: LD_VAR 0 15
59641: PUSH
59642: LD_VAR 0 16
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: PUSH
59655: LD_VAR 0 4
59659: PUSH
59660: LD_INT 1
59662: PLUS
59663: ARRAY
59664: ST_TO_ADDR
59665: GO 59796
59667: LD_INT 2
59669: DOUBLE
59670: EQUAL
59671: IFTRUE 59675
59673: GO 59731
59675: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59676: LD_ADDR_VAR 0 9
59680: PUSH
59681: LD_VAR 0 17
59685: PUSH
59686: LD_VAR 0 18
59690: PUSH
59691: LD_VAR 0 19
59695: PUSH
59696: LD_VAR 0 20
59700: PUSH
59701: LD_VAR 0 21
59705: PUSH
59706: LD_VAR 0 22
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: PUSH
59719: LD_VAR 0 4
59723: PUSH
59724: LD_INT 1
59726: PLUS
59727: ARRAY
59728: ST_TO_ADDR
59729: GO 59796
59731: LD_INT 3
59733: DOUBLE
59734: EQUAL
59735: IFTRUE 59739
59737: GO 59795
59739: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59740: LD_ADDR_VAR 0 9
59744: PUSH
59745: LD_VAR 0 23
59749: PUSH
59750: LD_VAR 0 24
59754: PUSH
59755: LD_VAR 0 25
59759: PUSH
59760: LD_VAR 0 26
59764: PUSH
59765: LD_VAR 0 27
59769: PUSH
59770: LD_VAR 0 28
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: PUSH
59783: LD_VAR 0 4
59787: PUSH
59788: LD_INT 1
59790: PLUS
59791: ARRAY
59792: ST_TO_ADDR
59793: GO 59796
59795: POP
59796: GO 60351
59798: LD_INT 2
59800: DOUBLE
59801: EQUAL
59802: IFTRUE 59812
59804: LD_INT 3
59806: DOUBLE
59807: EQUAL
59808: IFTRUE 59812
59810: GO 59868
59812: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59813: LD_ADDR_VAR 0 9
59817: PUSH
59818: LD_VAR 0 29
59822: PUSH
59823: LD_VAR 0 30
59827: PUSH
59828: LD_VAR 0 31
59832: PUSH
59833: LD_VAR 0 32
59837: PUSH
59838: LD_VAR 0 33
59842: PUSH
59843: LD_VAR 0 34
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: PUSH
59856: LD_VAR 0 4
59860: PUSH
59861: LD_INT 1
59863: PLUS
59864: ARRAY
59865: ST_TO_ADDR
59866: GO 60351
59868: LD_INT 16
59870: DOUBLE
59871: EQUAL
59872: IFTRUE 59930
59874: LD_INT 17
59876: DOUBLE
59877: EQUAL
59878: IFTRUE 59930
59880: LD_INT 18
59882: DOUBLE
59883: EQUAL
59884: IFTRUE 59930
59886: LD_INT 19
59888: DOUBLE
59889: EQUAL
59890: IFTRUE 59930
59892: LD_INT 22
59894: DOUBLE
59895: EQUAL
59896: IFTRUE 59930
59898: LD_INT 20
59900: DOUBLE
59901: EQUAL
59902: IFTRUE 59930
59904: LD_INT 21
59906: DOUBLE
59907: EQUAL
59908: IFTRUE 59930
59910: LD_INT 23
59912: DOUBLE
59913: EQUAL
59914: IFTRUE 59930
59916: LD_INT 24
59918: DOUBLE
59919: EQUAL
59920: IFTRUE 59930
59922: LD_INT 25
59924: DOUBLE
59925: EQUAL
59926: IFTRUE 59930
59928: GO 59986
59930: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59931: LD_ADDR_VAR 0 9
59935: PUSH
59936: LD_VAR 0 35
59940: PUSH
59941: LD_VAR 0 36
59945: PUSH
59946: LD_VAR 0 37
59950: PUSH
59951: LD_VAR 0 38
59955: PUSH
59956: LD_VAR 0 39
59960: PUSH
59961: LD_VAR 0 40
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: PUSH
59974: LD_VAR 0 4
59978: PUSH
59979: LD_INT 1
59981: PLUS
59982: ARRAY
59983: ST_TO_ADDR
59984: GO 60351
59986: LD_INT 6
59988: DOUBLE
59989: EQUAL
59990: IFTRUE 60042
59992: LD_INT 7
59994: DOUBLE
59995: EQUAL
59996: IFTRUE 60042
59998: LD_INT 8
60000: DOUBLE
60001: EQUAL
60002: IFTRUE 60042
60004: LD_INT 13
60006: DOUBLE
60007: EQUAL
60008: IFTRUE 60042
60010: LD_INT 12
60012: DOUBLE
60013: EQUAL
60014: IFTRUE 60042
60016: LD_INT 15
60018: DOUBLE
60019: EQUAL
60020: IFTRUE 60042
60022: LD_INT 11
60024: DOUBLE
60025: EQUAL
60026: IFTRUE 60042
60028: LD_INT 14
60030: DOUBLE
60031: EQUAL
60032: IFTRUE 60042
60034: LD_INT 10
60036: DOUBLE
60037: EQUAL
60038: IFTRUE 60042
60040: GO 60098
60042: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60043: LD_ADDR_VAR 0 9
60047: PUSH
60048: LD_VAR 0 41
60052: PUSH
60053: LD_VAR 0 42
60057: PUSH
60058: LD_VAR 0 43
60062: PUSH
60063: LD_VAR 0 44
60067: PUSH
60068: LD_VAR 0 45
60072: PUSH
60073: LD_VAR 0 46
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: PUSH
60086: LD_VAR 0 4
60090: PUSH
60091: LD_INT 1
60093: PLUS
60094: ARRAY
60095: ST_TO_ADDR
60096: GO 60351
60098: LD_INT 36
60100: DOUBLE
60101: EQUAL
60102: IFTRUE 60106
60104: GO 60162
60106: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60107: LD_ADDR_VAR 0 9
60111: PUSH
60112: LD_VAR 0 47
60116: PUSH
60117: LD_VAR 0 48
60121: PUSH
60122: LD_VAR 0 49
60126: PUSH
60127: LD_VAR 0 50
60131: PUSH
60132: LD_VAR 0 51
60136: PUSH
60137: LD_VAR 0 52
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: PUSH
60150: LD_VAR 0 4
60154: PUSH
60155: LD_INT 1
60157: PLUS
60158: ARRAY
60159: ST_TO_ADDR
60160: GO 60351
60162: LD_INT 4
60164: DOUBLE
60165: EQUAL
60166: IFTRUE 60188
60168: LD_INT 5
60170: DOUBLE
60171: EQUAL
60172: IFTRUE 60188
60174: LD_INT 34
60176: DOUBLE
60177: EQUAL
60178: IFTRUE 60188
60180: LD_INT 37
60182: DOUBLE
60183: EQUAL
60184: IFTRUE 60188
60186: GO 60244
60188: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60189: LD_ADDR_VAR 0 9
60193: PUSH
60194: LD_VAR 0 53
60198: PUSH
60199: LD_VAR 0 54
60203: PUSH
60204: LD_VAR 0 55
60208: PUSH
60209: LD_VAR 0 56
60213: PUSH
60214: LD_VAR 0 57
60218: PUSH
60219: LD_VAR 0 58
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: PUSH
60232: LD_VAR 0 4
60236: PUSH
60237: LD_INT 1
60239: PLUS
60240: ARRAY
60241: ST_TO_ADDR
60242: GO 60351
60244: LD_INT 31
60246: DOUBLE
60247: EQUAL
60248: IFTRUE 60294
60250: LD_INT 32
60252: DOUBLE
60253: EQUAL
60254: IFTRUE 60294
60256: LD_INT 33
60258: DOUBLE
60259: EQUAL
60260: IFTRUE 60294
60262: LD_INT 27
60264: DOUBLE
60265: EQUAL
60266: IFTRUE 60294
60268: LD_INT 26
60270: DOUBLE
60271: EQUAL
60272: IFTRUE 60294
60274: LD_INT 28
60276: DOUBLE
60277: EQUAL
60278: IFTRUE 60294
60280: LD_INT 29
60282: DOUBLE
60283: EQUAL
60284: IFTRUE 60294
60286: LD_INT 30
60288: DOUBLE
60289: EQUAL
60290: IFTRUE 60294
60292: GO 60350
60294: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60295: LD_ADDR_VAR 0 9
60299: PUSH
60300: LD_VAR 0 59
60304: PUSH
60305: LD_VAR 0 60
60309: PUSH
60310: LD_VAR 0 61
60314: PUSH
60315: LD_VAR 0 62
60319: PUSH
60320: LD_VAR 0 63
60324: PUSH
60325: LD_VAR 0 64
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: PUSH
60338: LD_VAR 0 4
60342: PUSH
60343: LD_INT 1
60345: PLUS
60346: ARRAY
60347: ST_TO_ADDR
60348: GO 60351
60350: POP
// temp_list2 = [ ] ;
60351: LD_ADDR_VAR 0 10
60355: PUSH
60356: EMPTY
60357: ST_TO_ADDR
// for i in temp_list do
60358: LD_ADDR_VAR 0 8
60362: PUSH
60363: LD_VAR 0 9
60367: PUSH
60368: FOR_IN
60369: IFFALSE 60421
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60371: LD_ADDR_VAR 0 10
60375: PUSH
60376: LD_VAR 0 10
60380: PUSH
60381: LD_VAR 0 8
60385: PUSH
60386: LD_INT 1
60388: ARRAY
60389: PUSH
60390: LD_VAR 0 2
60394: PLUS
60395: PUSH
60396: LD_VAR 0 8
60400: PUSH
60401: LD_INT 2
60403: ARRAY
60404: PUSH
60405: LD_VAR 0 3
60409: PLUS
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: EMPTY
60416: LIST
60417: ADD
60418: ST_TO_ADDR
60419: GO 60368
60421: POP
60422: POP
// result = temp_list2 ;
60423: LD_ADDR_VAR 0 7
60427: PUSH
60428: LD_VAR 0 10
60432: ST_TO_ADDR
// end ;
60433: LD_VAR 0 7
60437: RET
// export function EnemyInRange ( unit , dist ) ; begin
60438: LD_INT 0
60440: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60441: LD_ADDR_VAR 0 3
60445: PUSH
60446: LD_VAR 0 1
60450: PPUSH
60451: CALL_OW 255
60455: PPUSH
60456: LD_VAR 0 1
60460: PPUSH
60461: CALL_OW 250
60465: PPUSH
60466: LD_VAR 0 1
60470: PPUSH
60471: CALL_OW 251
60475: PPUSH
60476: LD_VAR 0 2
60480: PPUSH
60481: CALL 33811 0 4
60485: PUSH
60486: LD_INT 4
60488: ARRAY
60489: ST_TO_ADDR
// end ;
60490: LD_VAR 0 3
60494: RET
// export function PlayerSeeMe ( unit ) ; begin
60495: LD_INT 0
60497: PPUSH
// result := See ( your_side , unit ) ;
60498: LD_ADDR_VAR 0 2
60502: PUSH
60503: LD_OWVAR 2
60507: PPUSH
60508: LD_VAR 0 1
60512: PPUSH
60513: CALL_OW 292
60517: ST_TO_ADDR
// end ;
60518: LD_VAR 0 2
60522: RET
// export function ReverseDir ( unit ) ; begin
60523: LD_INT 0
60525: PPUSH
// if not unit then
60526: LD_VAR 0 1
60530: NOT
60531: IFFALSE 60535
// exit ;
60533: GO 60558
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60535: LD_ADDR_VAR 0 2
60539: PUSH
60540: LD_VAR 0 1
60544: PPUSH
60545: CALL_OW 254
60549: PUSH
60550: LD_INT 3
60552: PLUS
60553: PUSH
60554: LD_INT 6
60556: MOD
60557: ST_TO_ADDR
// end ;
60558: LD_VAR 0 2
60562: RET
// export function ReverseArray ( array ) ; var i ; begin
60563: LD_INT 0
60565: PPUSH
60566: PPUSH
// if not array then
60567: LD_VAR 0 1
60571: NOT
60572: IFFALSE 60576
// exit ;
60574: GO 60631
// result := [ ] ;
60576: LD_ADDR_VAR 0 2
60580: PUSH
60581: EMPTY
60582: ST_TO_ADDR
// for i := array downto 1 do
60583: LD_ADDR_VAR 0 3
60587: PUSH
60588: DOUBLE
60589: LD_VAR 0 1
60593: INC
60594: ST_TO_ADDR
60595: LD_INT 1
60597: PUSH
60598: FOR_DOWNTO
60599: IFFALSE 60629
// result := Join ( result , array [ i ] ) ;
60601: LD_ADDR_VAR 0 2
60605: PUSH
60606: LD_VAR 0 2
60610: PPUSH
60611: LD_VAR 0 1
60615: PUSH
60616: LD_VAR 0 3
60620: ARRAY
60621: PPUSH
60622: CALL 65287 0 2
60626: ST_TO_ADDR
60627: GO 60598
60629: POP
60630: POP
// end ;
60631: LD_VAR 0 2
60635: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60636: LD_INT 0
60638: PPUSH
60639: PPUSH
60640: PPUSH
60641: PPUSH
60642: PPUSH
60643: PPUSH
// if not unit or not hexes then
60644: LD_VAR 0 1
60648: NOT
60649: PUSH
60650: LD_VAR 0 2
60654: NOT
60655: OR
60656: IFFALSE 60660
// exit ;
60658: GO 60783
// dist := 9999 ;
60660: LD_ADDR_VAR 0 5
60664: PUSH
60665: LD_INT 9999
60667: ST_TO_ADDR
// for i = 1 to hexes do
60668: LD_ADDR_VAR 0 4
60672: PUSH
60673: DOUBLE
60674: LD_INT 1
60676: DEC
60677: ST_TO_ADDR
60678: LD_VAR 0 2
60682: PUSH
60683: FOR_TO
60684: IFFALSE 60771
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60686: LD_ADDR_VAR 0 6
60690: PUSH
60691: LD_VAR 0 1
60695: PPUSH
60696: LD_VAR 0 2
60700: PUSH
60701: LD_VAR 0 4
60705: ARRAY
60706: PUSH
60707: LD_INT 1
60709: ARRAY
60710: PPUSH
60711: LD_VAR 0 2
60715: PUSH
60716: LD_VAR 0 4
60720: ARRAY
60721: PUSH
60722: LD_INT 2
60724: ARRAY
60725: PPUSH
60726: CALL_OW 297
60730: ST_TO_ADDR
// if tdist < dist then
60731: LD_VAR 0 6
60735: PUSH
60736: LD_VAR 0 5
60740: LESS
60741: IFFALSE 60769
// begin hex := hexes [ i ] ;
60743: LD_ADDR_VAR 0 8
60747: PUSH
60748: LD_VAR 0 2
60752: PUSH
60753: LD_VAR 0 4
60757: ARRAY
60758: ST_TO_ADDR
// dist := tdist ;
60759: LD_ADDR_VAR 0 5
60763: PUSH
60764: LD_VAR 0 6
60768: ST_TO_ADDR
// end ; end ;
60769: GO 60683
60771: POP
60772: POP
// result := hex ;
60773: LD_ADDR_VAR 0 3
60777: PUSH
60778: LD_VAR 0 8
60782: ST_TO_ADDR
// end ;
60783: LD_VAR 0 3
60787: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60788: LD_INT 0
60790: PPUSH
60791: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60792: LD_VAR 0 1
60796: NOT
60797: PUSH
60798: LD_VAR 0 1
60802: PUSH
60803: LD_INT 21
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 23
60815: PUSH
60816: LD_INT 2
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PPUSH
60827: CALL_OW 69
60831: IN
60832: NOT
60833: OR
60834: IFFALSE 60838
// exit ;
60836: GO 60885
// for i = 1 to 3 do
60838: LD_ADDR_VAR 0 3
60842: PUSH
60843: DOUBLE
60844: LD_INT 1
60846: DEC
60847: ST_TO_ADDR
60848: LD_INT 3
60850: PUSH
60851: FOR_TO
60852: IFFALSE 60883
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60854: LD_VAR 0 1
60858: PPUSH
60859: CALL_OW 250
60863: PPUSH
60864: LD_VAR 0 1
60868: PPUSH
60869: CALL_OW 251
60873: PPUSH
60874: LD_INT 1
60876: PPUSH
60877: CALL_OW 453
60881: GO 60851
60883: POP
60884: POP
// end ;
60885: LD_VAR 0 2
60889: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60890: LD_INT 0
60892: PPUSH
60893: PPUSH
60894: PPUSH
60895: PPUSH
60896: PPUSH
60897: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60898: LD_VAR 0 1
60902: NOT
60903: PUSH
60904: LD_VAR 0 2
60908: NOT
60909: OR
60910: PUSH
60911: LD_VAR 0 1
60915: PPUSH
60916: CALL_OW 314
60920: OR
60921: IFFALSE 60925
// exit ;
60923: GO 61392
// if GetLives ( i ) < 250 then
60925: LD_VAR 0 4
60929: PPUSH
60930: CALL_OW 256
60934: PUSH
60935: LD_INT 250
60937: LESS
60938: IFFALSE 60951
// begin ComAutodestruct ( i ) ;
60940: LD_VAR 0 4
60944: PPUSH
60945: CALL 60788 0 1
// exit ;
60949: GO 61392
// end ; x := GetX ( enemy_unit ) ;
60951: LD_ADDR_VAR 0 7
60955: PUSH
60956: LD_VAR 0 2
60960: PPUSH
60961: CALL_OW 250
60965: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60966: LD_ADDR_VAR 0 8
60970: PUSH
60971: LD_VAR 0 2
60975: PPUSH
60976: CALL_OW 251
60980: ST_TO_ADDR
// if not x or not y then
60981: LD_VAR 0 7
60985: NOT
60986: PUSH
60987: LD_VAR 0 8
60991: NOT
60992: OR
60993: IFFALSE 60997
// exit ;
60995: GO 61392
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60997: LD_ADDR_VAR 0 6
61001: PUSH
61002: LD_VAR 0 7
61006: PPUSH
61007: LD_INT 0
61009: PPUSH
61010: LD_INT 4
61012: PPUSH
61013: CALL_OW 272
61017: PUSH
61018: LD_VAR 0 8
61022: PPUSH
61023: LD_INT 0
61025: PPUSH
61026: LD_INT 4
61028: PPUSH
61029: CALL_OW 273
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_VAR 0 7
61042: PPUSH
61043: LD_INT 1
61045: PPUSH
61046: LD_INT 4
61048: PPUSH
61049: CALL_OW 272
61053: PUSH
61054: LD_VAR 0 8
61058: PPUSH
61059: LD_INT 1
61061: PPUSH
61062: LD_INT 4
61064: PPUSH
61065: CALL_OW 273
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_VAR 0 7
61078: PPUSH
61079: LD_INT 2
61081: PPUSH
61082: LD_INT 4
61084: PPUSH
61085: CALL_OW 272
61089: PUSH
61090: LD_VAR 0 8
61094: PPUSH
61095: LD_INT 2
61097: PPUSH
61098: LD_INT 4
61100: PPUSH
61101: CALL_OW 273
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_VAR 0 7
61114: PPUSH
61115: LD_INT 3
61117: PPUSH
61118: LD_INT 4
61120: PPUSH
61121: CALL_OW 272
61125: PUSH
61126: LD_VAR 0 8
61130: PPUSH
61131: LD_INT 3
61133: PPUSH
61134: LD_INT 4
61136: PPUSH
61137: CALL_OW 273
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_VAR 0 7
61150: PPUSH
61151: LD_INT 4
61153: PPUSH
61154: LD_INT 4
61156: PPUSH
61157: CALL_OW 272
61161: PUSH
61162: LD_VAR 0 8
61166: PPUSH
61167: LD_INT 4
61169: PPUSH
61170: LD_INT 4
61172: PPUSH
61173: CALL_OW 273
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_VAR 0 7
61186: PPUSH
61187: LD_INT 5
61189: PPUSH
61190: LD_INT 4
61192: PPUSH
61193: CALL_OW 272
61197: PUSH
61198: LD_VAR 0 8
61202: PPUSH
61203: LD_INT 5
61205: PPUSH
61206: LD_INT 4
61208: PPUSH
61209: CALL_OW 273
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: ST_TO_ADDR
// for i = tmp downto 1 do
61226: LD_ADDR_VAR 0 4
61230: PUSH
61231: DOUBLE
61232: LD_VAR 0 6
61236: INC
61237: ST_TO_ADDR
61238: LD_INT 1
61240: PUSH
61241: FOR_DOWNTO
61242: IFFALSE 61343
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61244: LD_VAR 0 6
61248: PUSH
61249: LD_VAR 0 4
61253: ARRAY
61254: PUSH
61255: LD_INT 1
61257: ARRAY
61258: PPUSH
61259: LD_VAR 0 6
61263: PUSH
61264: LD_VAR 0 4
61268: ARRAY
61269: PUSH
61270: LD_INT 2
61272: ARRAY
61273: PPUSH
61274: CALL_OW 488
61278: NOT
61279: PUSH
61280: LD_VAR 0 6
61284: PUSH
61285: LD_VAR 0 4
61289: ARRAY
61290: PUSH
61291: LD_INT 1
61293: ARRAY
61294: PPUSH
61295: LD_VAR 0 6
61299: PUSH
61300: LD_VAR 0 4
61304: ARRAY
61305: PUSH
61306: LD_INT 2
61308: ARRAY
61309: PPUSH
61310: CALL_OW 428
61314: PUSH
61315: LD_INT 0
61317: NONEQUAL
61318: OR
61319: IFFALSE 61341
// tmp := Delete ( tmp , i ) ;
61321: LD_ADDR_VAR 0 6
61325: PUSH
61326: LD_VAR 0 6
61330: PPUSH
61331: LD_VAR 0 4
61335: PPUSH
61336: CALL_OW 3
61340: ST_TO_ADDR
61341: GO 61241
61343: POP
61344: POP
// j := GetClosestHex ( unit , tmp ) ;
61345: LD_ADDR_VAR 0 5
61349: PUSH
61350: LD_VAR 0 1
61354: PPUSH
61355: LD_VAR 0 6
61359: PPUSH
61360: CALL 60636 0 2
61364: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61365: LD_VAR 0 1
61369: PPUSH
61370: LD_VAR 0 5
61374: PUSH
61375: LD_INT 1
61377: ARRAY
61378: PPUSH
61379: LD_VAR 0 5
61383: PUSH
61384: LD_INT 2
61386: ARRAY
61387: PPUSH
61388: CALL_OW 111
// end ;
61392: LD_VAR 0 3
61396: RET
// export function PrepareApemanSoldier ( ) ; begin
61397: LD_INT 0
61399: PPUSH
// uc_nation := 0 ;
61400: LD_ADDR_OWVAR 21
61404: PUSH
61405: LD_INT 0
61407: ST_TO_ADDR
// hc_sex := sex_male ;
61408: LD_ADDR_OWVAR 27
61412: PUSH
61413: LD_INT 1
61415: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61416: LD_ADDR_OWVAR 28
61420: PUSH
61421: LD_INT 15
61423: ST_TO_ADDR
// hc_gallery :=  ;
61424: LD_ADDR_OWVAR 33
61428: PUSH
61429: LD_STRING 
61431: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61432: LD_ADDR_OWVAR 31
61436: PUSH
61437: LD_INT 0
61439: PPUSH
61440: LD_INT 3
61442: PPUSH
61443: CALL_OW 12
61447: PUSH
61448: LD_INT 0
61450: PPUSH
61451: LD_INT 3
61453: PPUSH
61454: CALL_OW 12
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: ST_TO_ADDR
// end ;
61471: LD_VAR 0 1
61475: RET
// export function PrepareApemanEngineer ( ) ; begin
61476: LD_INT 0
61478: PPUSH
// uc_nation := 0 ;
61479: LD_ADDR_OWVAR 21
61483: PUSH
61484: LD_INT 0
61486: ST_TO_ADDR
// hc_sex := sex_male ;
61487: LD_ADDR_OWVAR 27
61491: PUSH
61492: LD_INT 1
61494: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61495: LD_ADDR_OWVAR 28
61499: PUSH
61500: LD_INT 16
61502: ST_TO_ADDR
// hc_gallery :=  ;
61503: LD_ADDR_OWVAR 33
61507: PUSH
61508: LD_STRING 
61510: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61511: LD_ADDR_OWVAR 31
61515: PUSH
61516: LD_INT 0
61518: PPUSH
61519: LD_INT 3
61521: PPUSH
61522: CALL_OW 12
61526: PUSH
61527: LD_INT 0
61529: PPUSH
61530: LD_INT 3
61532: PPUSH
61533: CALL_OW 12
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: ST_TO_ADDR
// end ;
61550: LD_VAR 0 1
61554: RET
// export function PrepareApeman ( agressivity ) ; begin
61555: LD_INT 0
61557: PPUSH
// uc_side := 0 ;
61558: LD_ADDR_OWVAR 20
61562: PUSH
61563: LD_INT 0
61565: ST_TO_ADDR
// uc_nation := 0 ;
61566: LD_ADDR_OWVAR 21
61570: PUSH
61571: LD_INT 0
61573: ST_TO_ADDR
// hc_sex := sex_male ;
61574: LD_ADDR_OWVAR 27
61578: PUSH
61579: LD_INT 1
61581: ST_TO_ADDR
// hc_class := class_apeman ;
61582: LD_ADDR_OWVAR 28
61586: PUSH
61587: LD_INT 12
61589: ST_TO_ADDR
// hc_gallery :=  ;
61590: LD_ADDR_OWVAR 33
61594: PUSH
61595: LD_STRING 
61597: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61598: LD_ADDR_OWVAR 35
61602: PUSH
61603: LD_VAR 0 1
61607: NEG
61608: PPUSH
61609: LD_VAR 0 1
61613: PPUSH
61614: CALL_OW 12
61618: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61619: LD_ADDR_OWVAR 31
61623: PUSH
61624: LD_INT 0
61626: PPUSH
61627: LD_INT 3
61629: PPUSH
61630: CALL_OW 12
61634: PUSH
61635: LD_INT 0
61637: PPUSH
61638: LD_INT 3
61640: PPUSH
61641: CALL_OW 12
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: ST_TO_ADDR
// end ;
61658: LD_VAR 0 2
61662: RET
// export function PrepareTiger ( agressivity ) ; begin
61663: LD_INT 0
61665: PPUSH
// uc_side := 0 ;
61666: LD_ADDR_OWVAR 20
61670: PUSH
61671: LD_INT 0
61673: ST_TO_ADDR
// uc_nation := 0 ;
61674: LD_ADDR_OWVAR 21
61678: PUSH
61679: LD_INT 0
61681: ST_TO_ADDR
// hc_class := class_tiger ;
61682: LD_ADDR_OWVAR 28
61686: PUSH
61687: LD_INT 14
61689: ST_TO_ADDR
// hc_gallery :=  ;
61690: LD_ADDR_OWVAR 33
61694: PUSH
61695: LD_STRING 
61697: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61698: LD_ADDR_OWVAR 35
61702: PUSH
61703: LD_VAR 0 1
61707: NEG
61708: PPUSH
61709: LD_VAR 0 1
61713: PPUSH
61714: CALL_OW 12
61718: ST_TO_ADDR
// end ;
61719: LD_VAR 0 2
61723: RET
// export function PrepareEnchidna ( ) ; begin
61724: LD_INT 0
61726: PPUSH
// uc_side := 0 ;
61727: LD_ADDR_OWVAR 20
61731: PUSH
61732: LD_INT 0
61734: ST_TO_ADDR
// uc_nation := 0 ;
61735: LD_ADDR_OWVAR 21
61739: PUSH
61740: LD_INT 0
61742: ST_TO_ADDR
// hc_class := class_baggie ;
61743: LD_ADDR_OWVAR 28
61747: PUSH
61748: LD_INT 13
61750: ST_TO_ADDR
// hc_gallery :=  ;
61751: LD_ADDR_OWVAR 33
61755: PUSH
61756: LD_STRING 
61758: ST_TO_ADDR
// end ;
61759: LD_VAR 0 1
61763: RET
// export function PrepareFrog ( ) ; begin
61764: LD_INT 0
61766: PPUSH
// uc_side := 0 ;
61767: LD_ADDR_OWVAR 20
61771: PUSH
61772: LD_INT 0
61774: ST_TO_ADDR
// uc_nation := 0 ;
61775: LD_ADDR_OWVAR 21
61779: PUSH
61780: LD_INT 0
61782: ST_TO_ADDR
// hc_class := class_frog ;
61783: LD_ADDR_OWVAR 28
61787: PUSH
61788: LD_INT 19
61790: ST_TO_ADDR
// hc_gallery :=  ;
61791: LD_ADDR_OWVAR 33
61795: PUSH
61796: LD_STRING 
61798: ST_TO_ADDR
// end ;
61799: LD_VAR 0 1
61803: RET
// export function PrepareFish ( ) ; begin
61804: LD_INT 0
61806: PPUSH
// uc_side := 0 ;
61807: LD_ADDR_OWVAR 20
61811: PUSH
61812: LD_INT 0
61814: ST_TO_ADDR
// uc_nation := 0 ;
61815: LD_ADDR_OWVAR 21
61819: PUSH
61820: LD_INT 0
61822: ST_TO_ADDR
// hc_class := class_fish ;
61823: LD_ADDR_OWVAR 28
61827: PUSH
61828: LD_INT 20
61830: ST_TO_ADDR
// hc_gallery :=  ;
61831: LD_ADDR_OWVAR 33
61835: PUSH
61836: LD_STRING 
61838: ST_TO_ADDR
// end ;
61839: LD_VAR 0 1
61843: RET
// export function PrepareBird ( ) ; begin
61844: LD_INT 0
61846: PPUSH
// uc_side := 0 ;
61847: LD_ADDR_OWVAR 20
61851: PUSH
61852: LD_INT 0
61854: ST_TO_ADDR
// uc_nation := 0 ;
61855: LD_ADDR_OWVAR 21
61859: PUSH
61860: LD_INT 0
61862: ST_TO_ADDR
// hc_class := class_phororhacos ;
61863: LD_ADDR_OWVAR 28
61867: PUSH
61868: LD_INT 18
61870: ST_TO_ADDR
// hc_gallery :=  ;
61871: LD_ADDR_OWVAR 33
61875: PUSH
61876: LD_STRING 
61878: ST_TO_ADDR
// end ;
61879: LD_VAR 0 1
61883: RET
// export function PrepareHorse ( ) ; begin
61884: LD_INT 0
61886: PPUSH
// uc_side := 0 ;
61887: LD_ADDR_OWVAR 20
61891: PUSH
61892: LD_INT 0
61894: ST_TO_ADDR
// uc_nation := 0 ;
61895: LD_ADDR_OWVAR 21
61899: PUSH
61900: LD_INT 0
61902: ST_TO_ADDR
// hc_class := class_horse ;
61903: LD_ADDR_OWVAR 28
61907: PUSH
61908: LD_INT 21
61910: ST_TO_ADDR
// hc_gallery :=  ;
61911: LD_ADDR_OWVAR 33
61915: PUSH
61916: LD_STRING 
61918: ST_TO_ADDR
// end ;
61919: LD_VAR 0 1
61923: RET
// export function PrepareMastodont ( ) ; begin
61924: LD_INT 0
61926: PPUSH
// uc_side := 0 ;
61927: LD_ADDR_OWVAR 20
61931: PUSH
61932: LD_INT 0
61934: ST_TO_ADDR
// uc_nation := 0 ;
61935: LD_ADDR_OWVAR 21
61939: PUSH
61940: LD_INT 0
61942: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61943: LD_ADDR_OWVAR 37
61947: PUSH
61948: LD_INT 31
61950: ST_TO_ADDR
// vc_control := control_rider ;
61951: LD_ADDR_OWVAR 38
61955: PUSH
61956: LD_INT 4
61958: ST_TO_ADDR
// end ;
61959: LD_VAR 0 1
61963: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61964: LD_INT 0
61966: PPUSH
61967: PPUSH
61968: PPUSH
// uc_side = 0 ;
61969: LD_ADDR_OWVAR 20
61973: PUSH
61974: LD_INT 0
61976: ST_TO_ADDR
// uc_nation = 0 ;
61977: LD_ADDR_OWVAR 21
61981: PUSH
61982: LD_INT 0
61984: ST_TO_ADDR
// InitHc_All ( ) ;
61985: CALL_OW 584
// InitVc ;
61989: CALL_OW 20
// if mastodonts then
61993: LD_VAR 0 6
61997: IFFALSE 62064
// for i = 1 to mastodonts do
61999: LD_ADDR_VAR 0 11
62003: PUSH
62004: DOUBLE
62005: LD_INT 1
62007: DEC
62008: ST_TO_ADDR
62009: LD_VAR 0 6
62013: PUSH
62014: FOR_TO
62015: IFFALSE 62062
// begin vc_chassis := 31 ;
62017: LD_ADDR_OWVAR 37
62021: PUSH
62022: LD_INT 31
62024: ST_TO_ADDR
// vc_control := control_rider ;
62025: LD_ADDR_OWVAR 38
62029: PUSH
62030: LD_INT 4
62032: ST_TO_ADDR
// animal := CreateVehicle ;
62033: LD_ADDR_VAR 0 12
62037: PUSH
62038: CALL_OW 45
62042: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62043: LD_VAR 0 12
62047: PPUSH
62048: LD_VAR 0 8
62052: PPUSH
62053: LD_INT 0
62055: PPUSH
62056: CALL 64192 0 3
// end ;
62060: GO 62014
62062: POP
62063: POP
// if horses then
62064: LD_VAR 0 5
62068: IFFALSE 62135
// for i = 1 to horses do
62070: LD_ADDR_VAR 0 11
62074: PUSH
62075: DOUBLE
62076: LD_INT 1
62078: DEC
62079: ST_TO_ADDR
62080: LD_VAR 0 5
62084: PUSH
62085: FOR_TO
62086: IFFALSE 62133
// begin hc_class := 21 ;
62088: LD_ADDR_OWVAR 28
62092: PUSH
62093: LD_INT 21
62095: ST_TO_ADDR
// hc_gallery :=  ;
62096: LD_ADDR_OWVAR 33
62100: PUSH
62101: LD_STRING 
62103: ST_TO_ADDR
// animal := CreateHuman ;
62104: LD_ADDR_VAR 0 12
62108: PUSH
62109: CALL_OW 44
62113: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62114: LD_VAR 0 12
62118: PPUSH
62119: LD_VAR 0 8
62123: PPUSH
62124: LD_INT 0
62126: PPUSH
62127: CALL 64192 0 3
// end ;
62131: GO 62085
62133: POP
62134: POP
// if birds then
62135: LD_VAR 0 1
62139: IFFALSE 62206
// for i = 1 to birds do
62141: LD_ADDR_VAR 0 11
62145: PUSH
62146: DOUBLE
62147: LD_INT 1
62149: DEC
62150: ST_TO_ADDR
62151: LD_VAR 0 1
62155: PUSH
62156: FOR_TO
62157: IFFALSE 62204
// begin hc_class := 18 ;
62159: LD_ADDR_OWVAR 28
62163: PUSH
62164: LD_INT 18
62166: ST_TO_ADDR
// hc_gallery =  ;
62167: LD_ADDR_OWVAR 33
62171: PUSH
62172: LD_STRING 
62174: ST_TO_ADDR
// animal := CreateHuman ;
62175: LD_ADDR_VAR 0 12
62179: PUSH
62180: CALL_OW 44
62184: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62185: LD_VAR 0 12
62189: PPUSH
62190: LD_VAR 0 8
62194: PPUSH
62195: LD_INT 0
62197: PPUSH
62198: CALL 64192 0 3
// end ;
62202: GO 62156
62204: POP
62205: POP
// if tigers then
62206: LD_VAR 0 2
62210: IFFALSE 62294
// for i = 1 to tigers do
62212: LD_ADDR_VAR 0 11
62216: PUSH
62217: DOUBLE
62218: LD_INT 1
62220: DEC
62221: ST_TO_ADDR
62222: LD_VAR 0 2
62226: PUSH
62227: FOR_TO
62228: IFFALSE 62292
// begin hc_class = class_tiger ;
62230: LD_ADDR_OWVAR 28
62234: PUSH
62235: LD_INT 14
62237: ST_TO_ADDR
// hc_gallery =  ;
62238: LD_ADDR_OWVAR 33
62242: PUSH
62243: LD_STRING 
62245: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62246: LD_ADDR_OWVAR 35
62250: PUSH
62251: LD_INT 7
62253: NEG
62254: PPUSH
62255: LD_INT 7
62257: PPUSH
62258: CALL_OW 12
62262: ST_TO_ADDR
// animal := CreateHuman ;
62263: LD_ADDR_VAR 0 12
62267: PUSH
62268: CALL_OW 44
62272: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62273: LD_VAR 0 12
62277: PPUSH
62278: LD_VAR 0 8
62282: PPUSH
62283: LD_INT 0
62285: PPUSH
62286: CALL 64192 0 3
// end ;
62290: GO 62227
62292: POP
62293: POP
// if apemans then
62294: LD_VAR 0 3
62298: IFFALSE 62421
// for i = 1 to apemans do
62300: LD_ADDR_VAR 0 11
62304: PUSH
62305: DOUBLE
62306: LD_INT 1
62308: DEC
62309: ST_TO_ADDR
62310: LD_VAR 0 3
62314: PUSH
62315: FOR_TO
62316: IFFALSE 62419
// begin hc_class = class_apeman ;
62318: LD_ADDR_OWVAR 28
62322: PUSH
62323: LD_INT 12
62325: ST_TO_ADDR
// hc_gallery =  ;
62326: LD_ADDR_OWVAR 33
62330: PUSH
62331: LD_STRING 
62333: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62334: LD_ADDR_OWVAR 35
62338: PUSH
62339: LD_INT 2
62341: NEG
62342: PPUSH
62343: LD_INT 2
62345: PPUSH
62346: CALL_OW 12
62350: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62351: LD_ADDR_OWVAR 31
62355: PUSH
62356: LD_INT 1
62358: PPUSH
62359: LD_INT 3
62361: PPUSH
62362: CALL_OW 12
62366: PUSH
62367: LD_INT 1
62369: PPUSH
62370: LD_INT 3
62372: PPUSH
62373: CALL_OW 12
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: ST_TO_ADDR
// animal := CreateHuman ;
62390: LD_ADDR_VAR 0 12
62394: PUSH
62395: CALL_OW 44
62399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62400: LD_VAR 0 12
62404: PPUSH
62405: LD_VAR 0 8
62409: PPUSH
62410: LD_INT 0
62412: PPUSH
62413: CALL 64192 0 3
// end ;
62417: GO 62315
62419: POP
62420: POP
// if enchidnas then
62421: LD_VAR 0 4
62425: IFFALSE 62492
// for i = 1 to enchidnas do
62427: LD_ADDR_VAR 0 11
62431: PUSH
62432: DOUBLE
62433: LD_INT 1
62435: DEC
62436: ST_TO_ADDR
62437: LD_VAR 0 4
62441: PUSH
62442: FOR_TO
62443: IFFALSE 62490
// begin hc_class = 13 ;
62445: LD_ADDR_OWVAR 28
62449: PUSH
62450: LD_INT 13
62452: ST_TO_ADDR
// hc_gallery =  ;
62453: LD_ADDR_OWVAR 33
62457: PUSH
62458: LD_STRING 
62460: ST_TO_ADDR
// animal := CreateHuman ;
62461: LD_ADDR_VAR 0 12
62465: PUSH
62466: CALL_OW 44
62470: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62471: LD_VAR 0 12
62475: PPUSH
62476: LD_VAR 0 8
62480: PPUSH
62481: LD_INT 0
62483: PPUSH
62484: CALL 64192 0 3
// end ;
62488: GO 62442
62490: POP
62491: POP
// if fishes then
62492: LD_VAR 0 7
62496: IFFALSE 62563
// for i = 1 to fishes do
62498: LD_ADDR_VAR 0 11
62502: PUSH
62503: DOUBLE
62504: LD_INT 1
62506: DEC
62507: ST_TO_ADDR
62508: LD_VAR 0 7
62512: PUSH
62513: FOR_TO
62514: IFFALSE 62561
// begin hc_class = 20 ;
62516: LD_ADDR_OWVAR 28
62520: PUSH
62521: LD_INT 20
62523: ST_TO_ADDR
// hc_gallery =  ;
62524: LD_ADDR_OWVAR 33
62528: PUSH
62529: LD_STRING 
62531: ST_TO_ADDR
// animal := CreateHuman ;
62532: LD_ADDR_VAR 0 12
62536: PUSH
62537: CALL_OW 44
62541: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62542: LD_VAR 0 12
62546: PPUSH
62547: LD_VAR 0 9
62551: PPUSH
62552: LD_INT 0
62554: PPUSH
62555: CALL 64192 0 3
// end ;
62559: GO 62513
62561: POP
62562: POP
// end ;
62563: LD_VAR 0 10
62567: RET
// export function WantHeal ( sci , unit ) ; begin
62568: LD_INT 0
62570: PPUSH
// if GetTaskList ( sci ) > 0 then
62571: LD_VAR 0 1
62575: PPUSH
62576: CALL_OW 437
62580: PUSH
62581: LD_INT 0
62583: GREATER
62584: IFFALSE 62654
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62586: LD_VAR 0 1
62590: PPUSH
62591: CALL_OW 437
62595: PUSH
62596: LD_INT 1
62598: ARRAY
62599: PUSH
62600: LD_INT 1
62602: ARRAY
62603: PUSH
62604: LD_STRING l
62606: EQUAL
62607: PUSH
62608: LD_VAR 0 1
62612: PPUSH
62613: CALL_OW 437
62617: PUSH
62618: LD_INT 1
62620: ARRAY
62621: PUSH
62622: LD_INT 4
62624: ARRAY
62625: PUSH
62626: LD_VAR 0 2
62630: EQUAL
62631: AND
62632: IFFALSE 62644
// result := true else
62634: LD_ADDR_VAR 0 3
62638: PUSH
62639: LD_INT 1
62641: ST_TO_ADDR
62642: GO 62652
// result := false ;
62644: LD_ADDR_VAR 0 3
62648: PUSH
62649: LD_INT 0
62651: ST_TO_ADDR
// end else
62652: GO 62662
// result := false ;
62654: LD_ADDR_VAR 0 3
62658: PUSH
62659: LD_INT 0
62661: ST_TO_ADDR
// end ;
62662: LD_VAR 0 3
62666: RET
// export function HealTarget ( sci ) ; begin
62667: LD_INT 0
62669: PPUSH
// if not sci then
62670: LD_VAR 0 1
62674: NOT
62675: IFFALSE 62679
// exit ;
62677: GO 62744
// result := 0 ;
62679: LD_ADDR_VAR 0 2
62683: PUSH
62684: LD_INT 0
62686: ST_TO_ADDR
// if GetTaskList ( sci ) then
62687: LD_VAR 0 1
62691: PPUSH
62692: CALL_OW 437
62696: IFFALSE 62744
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62698: LD_VAR 0 1
62702: PPUSH
62703: CALL_OW 437
62707: PUSH
62708: LD_INT 1
62710: ARRAY
62711: PUSH
62712: LD_INT 1
62714: ARRAY
62715: PUSH
62716: LD_STRING l
62718: EQUAL
62719: IFFALSE 62744
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62721: LD_ADDR_VAR 0 2
62725: PUSH
62726: LD_VAR 0 1
62730: PPUSH
62731: CALL_OW 437
62735: PUSH
62736: LD_INT 1
62738: ARRAY
62739: PUSH
62740: LD_INT 4
62742: ARRAY
62743: ST_TO_ADDR
// end ;
62744: LD_VAR 0 2
62748: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62749: LD_INT 0
62751: PPUSH
62752: PPUSH
62753: PPUSH
62754: PPUSH
// if not base_units then
62755: LD_VAR 0 1
62759: NOT
62760: IFFALSE 62764
// exit ;
62762: GO 62851
// result := false ;
62764: LD_ADDR_VAR 0 2
62768: PUSH
62769: LD_INT 0
62771: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62772: LD_ADDR_VAR 0 5
62776: PUSH
62777: LD_VAR 0 1
62781: PPUSH
62782: LD_INT 21
62784: PUSH
62785: LD_INT 3
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PPUSH
62792: CALL_OW 72
62796: ST_TO_ADDR
// if not tmp then
62797: LD_VAR 0 5
62801: NOT
62802: IFFALSE 62806
// exit ;
62804: GO 62851
// for i in tmp do
62806: LD_ADDR_VAR 0 3
62810: PUSH
62811: LD_VAR 0 5
62815: PUSH
62816: FOR_IN
62817: IFFALSE 62849
// begin result := EnemyInRange ( i , 22 ) ;
62819: LD_ADDR_VAR 0 2
62823: PUSH
62824: LD_VAR 0 3
62828: PPUSH
62829: LD_INT 22
62831: PPUSH
62832: CALL 60438 0 2
62836: ST_TO_ADDR
// if result then
62837: LD_VAR 0 2
62841: IFFALSE 62847
// exit ;
62843: POP
62844: POP
62845: GO 62851
// end ;
62847: GO 62816
62849: POP
62850: POP
// end ;
62851: LD_VAR 0 2
62855: RET
// export function FilterByTag ( units , tag ) ; begin
62856: LD_INT 0
62858: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62859: LD_ADDR_VAR 0 3
62863: PUSH
62864: LD_VAR 0 1
62868: PPUSH
62869: LD_INT 120
62871: PUSH
62872: LD_VAR 0 2
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PPUSH
62881: CALL_OW 72
62885: ST_TO_ADDR
// end ;
62886: LD_VAR 0 3
62890: RET
// export function IsDriver ( un ) ; begin
62891: LD_INT 0
62893: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62894: LD_ADDR_VAR 0 2
62898: PUSH
62899: LD_VAR 0 1
62903: PUSH
62904: LD_INT 55
62906: PUSH
62907: EMPTY
62908: LIST
62909: PPUSH
62910: CALL_OW 69
62914: IN
62915: ST_TO_ADDR
// end ;
62916: LD_VAR 0 2
62920: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62921: LD_INT 0
62923: PPUSH
62924: PPUSH
// list := [ ] ;
62925: LD_ADDR_VAR 0 5
62929: PUSH
62930: EMPTY
62931: ST_TO_ADDR
// case d of 0 :
62932: LD_VAR 0 3
62936: PUSH
62937: LD_INT 0
62939: DOUBLE
62940: EQUAL
62941: IFTRUE 62945
62943: GO 63078
62945: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62946: LD_ADDR_VAR 0 5
62950: PUSH
62951: LD_VAR 0 1
62955: PUSH
62956: LD_INT 4
62958: MINUS
62959: PUSH
62960: LD_VAR 0 2
62964: PUSH
62965: LD_INT 4
62967: MINUS
62968: PUSH
62969: LD_INT 2
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: LIST
62976: PUSH
62977: LD_VAR 0 1
62981: PUSH
62982: LD_INT 3
62984: MINUS
62985: PUSH
62986: LD_VAR 0 2
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: PUSH
62999: LD_VAR 0 1
63003: PUSH
63004: LD_INT 4
63006: PLUS
63007: PUSH
63008: LD_VAR 0 2
63012: PUSH
63013: LD_INT 4
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: LIST
63020: PUSH
63021: LD_VAR 0 1
63025: PUSH
63026: LD_INT 3
63028: PLUS
63029: PUSH
63030: LD_VAR 0 2
63034: PUSH
63035: LD_INT 3
63037: PLUS
63038: PUSH
63039: LD_INT 5
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: LIST
63046: PUSH
63047: LD_VAR 0 1
63051: PUSH
63052: LD_VAR 0 2
63056: PUSH
63057: LD_INT 4
63059: PLUS
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: LIST
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: ST_TO_ADDR
// end ; 1 :
63076: GO 63776
63078: LD_INT 1
63080: DOUBLE
63081: EQUAL
63082: IFTRUE 63086
63084: GO 63219
63086: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63087: LD_ADDR_VAR 0 5
63091: PUSH
63092: LD_VAR 0 1
63096: PUSH
63097: LD_VAR 0 2
63101: PUSH
63102: LD_INT 4
63104: MINUS
63105: PUSH
63106: LD_INT 3
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: LIST
63113: PUSH
63114: LD_VAR 0 1
63118: PUSH
63119: LD_INT 3
63121: MINUS
63122: PUSH
63123: LD_VAR 0 2
63127: PUSH
63128: LD_INT 3
63130: MINUS
63131: PUSH
63132: LD_INT 2
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: LIST
63139: PUSH
63140: LD_VAR 0 1
63144: PUSH
63145: LD_INT 4
63147: MINUS
63148: PUSH
63149: LD_VAR 0 2
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: LIST
63161: PUSH
63162: LD_VAR 0 1
63166: PUSH
63167: LD_VAR 0 2
63171: PUSH
63172: LD_INT 3
63174: PLUS
63175: PUSH
63176: LD_INT 0
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: LIST
63183: PUSH
63184: LD_VAR 0 1
63188: PUSH
63189: LD_INT 4
63191: PLUS
63192: PUSH
63193: LD_VAR 0 2
63197: PUSH
63198: LD_INT 4
63200: PLUS
63201: PUSH
63202: LD_INT 5
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: LIST
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: ST_TO_ADDR
// end ; 2 :
63217: GO 63776
63219: LD_INT 2
63221: DOUBLE
63222: EQUAL
63223: IFTRUE 63227
63225: GO 63356
63227: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63228: LD_ADDR_VAR 0 5
63232: PUSH
63233: LD_VAR 0 1
63237: PUSH
63238: LD_VAR 0 2
63242: PUSH
63243: LD_INT 3
63245: MINUS
63246: PUSH
63247: LD_INT 3
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: LIST
63254: PUSH
63255: LD_VAR 0 1
63259: PUSH
63260: LD_INT 4
63262: PLUS
63263: PUSH
63264: LD_VAR 0 2
63268: PUSH
63269: LD_INT 4
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: LIST
63276: PUSH
63277: LD_VAR 0 1
63281: PUSH
63282: LD_VAR 0 2
63286: PUSH
63287: LD_INT 4
63289: PLUS
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: LIST
63298: PUSH
63299: LD_VAR 0 1
63303: PUSH
63304: LD_INT 3
63306: MINUS
63307: PUSH
63308: LD_VAR 0 2
63312: PUSH
63313: LD_INT 1
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: LIST
63320: PUSH
63321: LD_VAR 0 1
63325: PUSH
63326: LD_INT 4
63328: MINUS
63329: PUSH
63330: LD_VAR 0 2
63334: PUSH
63335: LD_INT 4
63337: MINUS
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: LIST
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: ST_TO_ADDR
// end ; 3 :
63354: GO 63776
63356: LD_INT 3
63358: DOUBLE
63359: EQUAL
63360: IFTRUE 63364
63362: GO 63497
63364: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63365: LD_ADDR_VAR 0 5
63369: PUSH
63370: LD_VAR 0 1
63374: PUSH
63375: LD_INT 3
63377: PLUS
63378: PUSH
63379: LD_VAR 0 2
63383: PUSH
63384: LD_INT 4
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: LIST
63391: PUSH
63392: LD_VAR 0 1
63396: PUSH
63397: LD_INT 4
63399: PLUS
63400: PUSH
63401: LD_VAR 0 2
63405: PUSH
63406: LD_INT 4
63408: PLUS
63409: PUSH
63410: LD_INT 5
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: LIST
63417: PUSH
63418: LD_VAR 0 1
63422: PUSH
63423: LD_INT 4
63425: MINUS
63426: PUSH
63427: LD_VAR 0 2
63431: PUSH
63432: LD_INT 1
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: LIST
63439: PUSH
63440: LD_VAR 0 1
63444: PUSH
63445: LD_VAR 0 2
63449: PUSH
63450: LD_INT 4
63452: MINUS
63453: PUSH
63454: LD_INT 3
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: LIST
63461: PUSH
63462: LD_VAR 0 1
63466: PUSH
63467: LD_INT 3
63469: MINUS
63470: PUSH
63471: LD_VAR 0 2
63475: PUSH
63476: LD_INT 3
63478: MINUS
63479: PUSH
63480: LD_INT 2
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: LIST
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: ST_TO_ADDR
// end ; 4 :
63495: GO 63776
63497: LD_INT 4
63499: DOUBLE
63500: EQUAL
63501: IFTRUE 63505
63503: GO 63638
63505: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63506: LD_ADDR_VAR 0 5
63510: PUSH
63511: LD_VAR 0 1
63515: PUSH
63516: LD_VAR 0 2
63520: PUSH
63521: LD_INT 4
63523: PLUS
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: LIST
63532: PUSH
63533: LD_VAR 0 1
63537: PUSH
63538: LD_INT 3
63540: PLUS
63541: PUSH
63542: LD_VAR 0 2
63546: PUSH
63547: LD_INT 3
63549: PLUS
63550: PUSH
63551: LD_INT 5
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: LIST
63558: PUSH
63559: LD_VAR 0 1
63563: PUSH
63564: LD_INT 4
63566: PLUS
63567: PUSH
63568: LD_VAR 0 2
63572: PUSH
63573: LD_INT 4
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: LIST
63580: PUSH
63581: LD_VAR 0 1
63585: PUSH
63586: LD_VAR 0 2
63590: PUSH
63591: LD_INT 3
63593: MINUS
63594: PUSH
63595: LD_INT 3
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: LIST
63602: PUSH
63603: LD_VAR 0 1
63607: PUSH
63608: LD_INT 4
63610: MINUS
63611: PUSH
63612: LD_VAR 0 2
63616: PUSH
63617: LD_INT 4
63619: MINUS
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: LIST
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: ST_TO_ADDR
// end ; 5 :
63636: GO 63776
63638: LD_INT 5
63640: DOUBLE
63641: EQUAL
63642: IFTRUE 63646
63644: GO 63775
63646: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63647: LD_ADDR_VAR 0 5
63651: PUSH
63652: LD_VAR 0 1
63656: PUSH
63657: LD_INT 4
63659: MINUS
63660: PUSH
63661: LD_VAR 0 2
63665: PUSH
63666: LD_INT 1
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: LIST
63673: PUSH
63674: LD_VAR 0 1
63678: PUSH
63679: LD_VAR 0 2
63683: PUSH
63684: LD_INT 4
63686: MINUS
63687: PUSH
63688: LD_INT 3
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: LIST
63695: PUSH
63696: LD_VAR 0 1
63700: PUSH
63701: LD_INT 4
63703: PLUS
63704: PUSH
63705: LD_VAR 0 2
63709: PUSH
63710: LD_INT 4
63712: PLUS
63713: PUSH
63714: LD_INT 5
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: LIST
63721: PUSH
63722: LD_VAR 0 1
63726: PUSH
63727: LD_INT 3
63729: PLUS
63730: PUSH
63731: LD_VAR 0 2
63735: PUSH
63736: LD_INT 4
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: LIST
63743: PUSH
63744: LD_VAR 0 1
63748: PUSH
63749: LD_VAR 0 2
63753: PUSH
63754: LD_INT 3
63756: PLUS
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: LIST
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: ST_TO_ADDR
// end ; end ;
63773: GO 63776
63775: POP
// result := list ;
63776: LD_ADDR_VAR 0 4
63780: PUSH
63781: LD_VAR 0 5
63785: ST_TO_ADDR
// end ;
63786: LD_VAR 0 4
63790: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63791: LD_INT 0
63793: PPUSH
63794: PPUSH
63795: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63796: LD_VAR 0 1
63800: NOT
63801: PUSH
63802: LD_VAR 0 2
63806: PUSH
63807: LD_INT 1
63809: PUSH
63810: LD_INT 2
63812: PUSH
63813: LD_INT 3
63815: PUSH
63816: LD_INT 4
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: IN
63825: NOT
63826: OR
63827: IFFALSE 63831
// exit ;
63829: GO 63914
// tmp := [ ] ;
63831: LD_ADDR_VAR 0 5
63835: PUSH
63836: EMPTY
63837: ST_TO_ADDR
// for i in units do
63838: LD_ADDR_VAR 0 4
63842: PUSH
63843: LD_VAR 0 1
63847: PUSH
63848: FOR_IN
63849: IFFALSE 63883
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63851: LD_ADDR_VAR 0 5
63855: PUSH
63856: LD_VAR 0 5
63860: PPUSH
63861: LD_VAR 0 4
63865: PPUSH
63866: LD_VAR 0 2
63870: PPUSH
63871: CALL_OW 259
63875: PPUSH
63876: CALL 65287 0 2
63880: ST_TO_ADDR
63881: GO 63848
63883: POP
63884: POP
// if not tmp then
63885: LD_VAR 0 5
63889: NOT
63890: IFFALSE 63894
// exit ;
63892: GO 63914
// result := SortListByListDesc ( units , tmp ) ;
63894: LD_ADDR_VAR 0 3
63898: PUSH
63899: LD_VAR 0 1
63903: PPUSH
63904: LD_VAR 0 5
63908: PPUSH
63909: CALL_OW 77
63913: ST_TO_ADDR
// end ;
63914: LD_VAR 0 3
63918: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63919: LD_INT 0
63921: PPUSH
63922: PPUSH
63923: PPUSH
// result := false ;
63924: LD_ADDR_VAR 0 3
63928: PUSH
63929: LD_INT 0
63931: ST_TO_ADDR
// if not building then
63932: LD_VAR 0 2
63936: NOT
63937: IFFALSE 63941
// exit ;
63939: GO 64079
// x := GetX ( building ) ;
63941: LD_ADDR_VAR 0 4
63945: PUSH
63946: LD_VAR 0 2
63950: PPUSH
63951: CALL_OW 250
63955: ST_TO_ADDR
// y := GetY ( building ) ;
63956: LD_ADDR_VAR 0 5
63960: PUSH
63961: LD_VAR 0 2
63965: PPUSH
63966: CALL_OW 251
63970: ST_TO_ADDR
// if not x or not y then
63971: LD_VAR 0 4
63975: NOT
63976: PUSH
63977: LD_VAR 0 5
63981: NOT
63982: OR
63983: IFFALSE 63987
// exit ;
63985: GO 64079
// if GetTaskList ( unit ) then
63987: LD_VAR 0 1
63991: PPUSH
63992: CALL_OW 437
63996: IFFALSE 64079
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63998: LD_STRING e
64000: PUSH
64001: LD_VAR 0 1
64005: PPUSH
64006: CALL_OW 437
64010: PUSH
64011: LD_INT 1
64013: ARRAY
64014: PUSH
64015: LD_INT 1
64017: ARRAY
64018: EQUAL
64019: PUSH
64020: LD_VAR 0 4
64024: PUSH
64025: LD_VAR 0 1
64029: PPUSH
64030: CALL_OW 437
64034: PUSH
64035: LD_INT 1
64037: ARRAY
64038: PUSH
64039: LD_INT 2
64041: ARRAY
64042: EQUAL
64043: AND
64044: PUSH
64045: LD_VAR 0 5
64049: PUSH
64050: LD_VAR 0 1
64054: PPUSH
64055: CALL_OW 437
64059: PUSH
64060: LD_INT 1
64062: ARRAY
64063: PUSH
64064: LD_INT 3
64066: ARRAY
64067: EQUAL
64068: AND
64069: IFFALSE 64079
// result := true end ;
64071: LD_ADDR_VAR 0 3
64075: PUSH
64076: LD_INT 1
64078: ST_TO_ADDR
// end ;
64079: LD_VAR 0 3
64083: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64084: LD_INT 0
64086: PPUSH
// result := false ;
64087: LD_ADDR_VAR 0 4
64091: PUSH
64092: LD_INT 0
64094: ST_TO_ADDR
// if GetTaskList ( unit ) then
64095: LD_VAR 0 1
64099: PPUSH
64100: CALL_OW 437
64104: IFFALSE 64187
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64106: LD_STRING M
64108: PUSH
64109: LD_VAR 0 1
64113: PPUSH
64114: CALL_OW 437
64118: PUSH
64119: LD_INT 1
64121: ARRAY
64122: PUSH
64123: LD_INT 1
64125: ARRAY
64126: EQUAL
64127: PUSH
64128: LD_VAR 0 2
64132: PUSH
64133: LD_VAR 0 1
64137: PPUSH
64138: CALL_OW 437
64142: PUSH
64143: LD_INT 1
64145: ARRAY
64146: PUSH
64147: LD_INT 2
64149: ARRAY
64150: EQUAL
64151: AND
64152: PUSH
64153: LD_VAR 0 3
64157: PUSH
64158: LD_VAR 0 1
64162: PPUSH
64163: CALL_OW 437
64167: PUSH
64168: LD_INT 1
64170: ARRAY
64171: PUSH
64172: LD_INT 3
64174: ARRAY
64175: EQUAL
64176: AND
64177: IFFALSE 64187
// result := true ;
64179: LD_ADDR_VAR 0 4
64183: PUSH
64184: LD_INT 1
64186: ST_TO_ADDR
// end ; end ;
64187: LD_VAR 0 4
64191: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64192: LD_INT 0
64194: PPUSH
64195: PPUSH
64196: PPUSH
64197: PPUSH
// if not unit or not area then
64198: LD_VAR 0 1
64202: NOT
64203: PUSH
64204: LD_VAR 0 2
64208: NOT
64209: OR
64210: IFFALSE 64214
// exit ;
64212: GO 64390
// tmp := AreaToList ( area , i ) ;
64214: LD_ADDR_VAR 0 6
64218: PUSH
64219: LD_VAR 0 2
64223: PPUSH
64224: LD_VAR 0 5
64228: PPUSH
64229: CALL_OW 517
64233: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64234: LD_ADDR_VAR 0 5
64238: PUSH
64239: DOUBLE
64240: LD_INT 1
64242: DEC
64243: ST_TO_ADDR
64244: LD_VAR 0 6
64248: PUSH
64249: LD_INT 1
64251: ARRAY
64252: PUSH
64253: FOR_TO
64254: IFFALSE 64388
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64256: LD_ADDR_VAR 0 7
64260: PUSH
64261: LD_VAR 0 6
64265: PUSH
64266: LD_INT 1
64268: ARRAY
64269: PUSH
64270: LD_VAR 0 5
64274: ARRAY
64275: PUSH
64276: LD_VAR 0 6
64280: PUSH
64281: LD_INT 2
64283: ARRAY
64284: PUSH
64285: LD_VAR 0 5
64289: ARRAY
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64295: LD_INT 92
64297: PUSH
64298: LD_VAR 0 7
64302: PUSH
64303: LD_INT 1
64305: ARRAY
64306: PUSH
64307: LD_VAR 0 7
64311: PUSH
64312: LD_INT 2
64314: ARRAY
64315: PUSH
64316: LD_INT 2
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: PPUSH
64325: CALL_OW 69
64329: PUSH
64330: LD_INT 0
64332: EQUAL
64333: IFFALSE 64386
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64335: LD_VAR 0 1
64339: PPUSH
64340: LD_VAR 0 7
64344: PUSH
64345: LD_INT 1
64347: ARRAY
64348: PPUSH
64349: LD_VAR 0 7
64353: PUSH
64354: LD_INT 2
64356: ARRAY
64357: PPUSH
64358: LD_VAR 0 3
64362: PPUSH
64363: CALL_OW 48
// result := IsPlaced ( unit ) ;
64367: LD_ADDR_VAR 0 4
64371: PUSH
64372: LD_VAR 0 1
64376: PPUSH
64377: CALL_OW 305
64381: ST_TO_ADDR
// exit ;
64382: POP
64383: POP
64384: GO 64390
// end ; end ;
64386: GO 64253
64388: POP
64389: POP
// end ;
64390: LD_VAR 0 4
64394: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64395: LD_INT 0
64397: PPUSH
64398: PPUSH
64399: PPUSH
// if not side or side > 8 then
64400: LD_VAR 0 1
64404: NOT
64405: PUSH
64406: LD_VAR 0 1
64410: PUSH
64411: LD_INT 8
64413: GREATER
64414: OR
64415: IFFALSE 64419
// exit ;
64417: GO 64606
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64419: LD_ADDR_VAR 0 4
64423: PUSH
64424: LD_INT 22
64426: PUSH
64427: LD_VAR 0 1
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 21
64438: PUSH
64439: LD_INT 3
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PPUSH
64450: CALL_OW 69
64454: ST_TO_ADDR
// if not tmp then
64455: LD_VAR 0 4
64459: NOT
64460: IFFALSE 64464
// exit ;
64462: GO 64606
// enable_addtolog := true ;
64464: LD_ADDR_OWVAR 81
64468: PUSH
64469: LD_INT 1
64471: ST_TO_ADDR
// AddToLog ( [ ) ;
64472: LD_STRING [
64474: PPUSH
64475: CALL_OW 561
// for i in tmp do
64479: LD_ADDR_VAR 0 3
64483: PUSH
64484: LD_VAR 0 4
64488: PUSH
64489: FOR_IN
64490: IFFALSE 64597
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64492: LD_STRING [
64494: PUSH
64495: LD_VAR 0 3
64499: PPUSH
64500: CALL_OW 266
64504: STR
64505: PUSH
64506: LD_STRING , 
64508: STR
64509: PUSH
64510: LD_VAR 0 3
64514: PPUSH
64515: CALL_OW 250
64519: STR
64520: PUSH
64521: LD_STRING , 
64523: STR
64524: PUSH
64525: LD_VAR 0 3
64529: PPUSH
64530: CALL_OW 251
64534: STR
64535: PUSH
64536: LD_STRING , 
64538: STR
64539: PUSH
64540: LD_VAR 0 3
64544: PPUSH
64545: CALL_OW 254
64549: STR
64550: PUSH
64551: LD_STRING , 
64553: STR
64554: PUSH
64555: LD_VAR 0 3
64559: PPUSH
64560: LD_INT 1
64562: PPUSH
64563: CALL_OW 268
64567: STR
64568: PUSH
64569: LD_STRING , 
64571: STR
64572: PUSH
64573: LD_VAR 0 3
64577: PPUSH
64578: LD_INT 2
64580: PPUSH
64581: CALL_OW 268
64585: STR
64586: PUSH
64587: LD_STRING ],
64589: STR
64590: PPUSH
64591: CALL_OW 561
// end ;
64595: GO 64489
64597: POP
64598: POP
// AddToLog ( ]; ) ;
64599: LD_STRING ];
64601: PPUSH
64602: CALL_OW 561
// end ;
64606: LD_VAR 0 2
64610: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64611: LD_INT 0
64613: PPUSH
64614: PPUSH
64615: PPUSH
64616: PPUSH
64617: PPUSH
// if not area or not rate or not max then
64618: LD_VAR 0 1
64622: NOT
64623: PUSH
64624: LD_VAR 0 2
64628: NOT
64629: OR
64630: PUSH
64631: LD_VAR 0 4
64635: NOT
64636: OR
64637: IFFALSE 64641
// exit ;
64639: GO 64830
// while 1 do
64641: LD_INT 1
64643: IFFALSE 64830
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64645: LD_ADDR_VAR 0 9
64649: PUSH
64650: LD_VAR 0 1
64654: PPUSH
64655: LD_INT 1
64657: PPUSH
64658: CALL_OW 287
64662: PUSH
64663: LD_INT 10
64665: MUL
64666: ST_TO_ADDR
// r := rate / 10 ;
64667: LD_ADDR_VAR 0 7
64671: PUSH
64672: LD_VAR 0 2
64676: PUSH
64677: LD_INT 10
64679: DIVREAL
64680: ST_TO_ADDR
// time := 1 1$00 ;
64681: LD_ADDR_VAR 0 8
64685: PUSH
64686: LD_INT 2100
64688: ST_TO_ADDR
// if amount < min then
64689: LD_VAR 0 9
64693: PUSH
64694: LD_VAR 0 3
64698: LESS
64699: IFFALSE 64717
// r := r * 2 else
64701: LD_ADDR_VAR 0 7
64705: PUSH
64706: LD_VAR 0 7
64710: PUSH
64711: LD_INT 2
64713: MUL
64714: ST_TO_ADDR
64715: GO 64743
// if amount > max then
64717: LD_VAR 0 9
64721: PUSH
64722: LD_VAR 0 4
64726: GREATER
64727: IFFALSE 64743
// r := r / 2 ;
64729: LD_ADDR_VAR 0 7
64733: PUSH
64734: LD_VAR 0 7
64738: PUSH
64739: LD_INT 2
64741: DIVREAL
64742: ST_TO_ADDR
// time := time / r ;
64743: LD_ADDR_VAR 0 8
64747: PUSH
64748: LD_VAR 0 8
64752: PUSH
64753: LD_VAR 0 7
64757: DIVREAL
64758: ST_TO_ADDR
// if time < 0 then
64759: LD_VAR 0 8
64763: PUSH
64764: LD_INT 0
64766: LESS
64767: IFFALSE 64784
// time := time * - 1 ;
64769: LD_ADDR_VAR 0 8
64773: PUSH
64774: LD_VAR 0 8
64778: PUSH
64779: LD_INT 1
64781: NEG
64782: MUL
64783: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64784: LD_VAR 0 8
64788: PUSH
64789: LD_INT 35
64791: PPUSH
64792: LD_INT 875
64794: PPUSH
64795: CALL_OW 12
64799: PLUS
64800: PPUSH
64801: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64805: LD_INT 1
64807: PPUSH
64808: LD_INT 5
64810: PPUSH
64811: CALL_OW 12
64815: PPUSH
64816: LD_VAR 0 1
64820: PPUSH
64821: LD_INT 1
64823: PPUSH
64824: CALL_OW 55
// end ;
64828: GO 64641
// end ;
64830: LD_VAR 0 5
64834: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64835: LD_INT 0
64837: PPUSH
64838: PPUSH
64839: PPUSH
64840: PPUSH
64841: PPUSH
64842: PPUSH
64843: PPUSH
64844: PPUSH
// if not turrets or not factories then
64845: LD_VAR 0 1
64849: NOT
64850: PUSH
64851: LD_VAR 0 2
64855: NOT
64856: OR
64857: IFFALSE 64861
// exit ;
64859: GO 65168
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64861: LD_ADDR_VAR 0 10
64865: PUSH
64866: LD_INT 5
64868: PUSH
64869: LD_INT 6
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 2
64878: PUSH
64879: LD_INT 4
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 3
64888: PUSH
64889: LD_INT 5
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 24
64903: PUSH
64904: LD_INT 25
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 23
64913: PUSH
64914: LD_INT 27
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 42
64927: PUSH
64928: LD_INT 43
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 44
64937: PUSH
64938: LD_INT 46
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 45
64947: PUSH
64948: LD_INT 47
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: LIST
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: LIST
64964: ST_TO_ADDR
// result := [ ] ;
64965: LD_ADDR_VAR 0 3
64969: PUSH
64970: EMPTY
64971: ST_TO_ADDR
// for i in turrets do
64972: LD_ADDR_VAR 0 4
64976: PUSH
64977: LD_VAR 0 1
64981: PUSH
64982: FOR_IN
64983: IFFALSE 65166
// begin nat := GetNation ( i ) ;
64985: LD_ADDR_VAR 0 7
64989: PUSH
64990: LD_VAR 0 4
64994: PPUSH
64995: CALL_OW 248
64999: ST_TO_ADDR
// weapon := 0 ;
65000: LD_ADDR_VAR 0 8
65004: PUSH
65005: LD_INT 0
65007: ST_TO_ADDR
// if not nat then
65008: LD_VAR 0 7
65012: NOT
65013: IFFALSE 65017
// continue ;
65015: GO 64982
// for j in list [ nat ] do
65017: LD_ADDR_VAR 0 5
65021: PUSH
65022: LD_VAR 0 10
65026: PUSH
65027: LD_VAR 0 7
65031: ARRAY
65032: PUSH
65033: FOR_IN
65034: IFFALSE 65075
// if GetBWeapon ( i ) = j [ 1 ] then
65036: LD_VAR 0 4
65040: PPUSH
65041: CALL_OW 269
65045: PUSH
65046: LD_VAR 0 5
65050: PUSH
65051: LD_INT 1
65053: ARRAY
65054: EQUAL
65055: IFFALSE 65073
// begin weapon := j [ 2 ] ;
65057: LD_ADDR_VAR 0 8
65061: PUSH
65062: LD_VAR 0 5
65066: PUSH
65067: LD_INT 2
65069: ARRAY
65070: ST_TO_ADDR
// break ;
65071: GO 65075
// end ;
65073: GO 65033
65075: POP
65076: POP
// if not weapon then
65077: LD_VAR 0 8
65081: NOT
65082: IFFALSE 65086
// continue ;
65084: GO 64982
// for k in factories do
65086: LD_ADDR_VAR 0 6
65090: PUSH
65091: LD_VAR 0 2
65095: PUSH
65096: FOR_IN
65097: IFFALSE 65162
// begin weapons := AvailableWeaponList ( k ) ;
65099: LD_ADDR_VAR 0 9
65103: PUSH
65104: LD_VAR 0 6
65108: PPUSH
65109: CALL_OW 478
65113: ST_TO_ADDR
// if not weapons then
65114: LD_VAR 0 9
65118: NOT
65119: IFFALSE 65123
// continue ;
65121: GO 65096
// if weapon in weapons then
65123: LD_VAR 0 8
65127: PUSH
65128: LD_VAR 0 9
65132: IN
65133: IFFALSE 65160
// begin result := [ i , weapon ] ;
65135: LD_ADDR_VAR 0 3
65139: PUSH
65140: LD_VAR 0 4
65144: PUSH
65145: LD_VAR 0 8
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: ST_TO_ADDR
// exit ;
65154: POP
65155: POP
65156: POP
65157: POP
65158: GO 65168
// end ; end ;
65160: GO 65096
65162: POP
65163: POP
// end ;
65164: GO 64982
65166: POP
65167: POP
// end ;
65168: LD_VAR 0 3
65172: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65173: LD_INT 0
65175: PPUSH
// if not side or side > 8 then
65176: LD_VAR 0 3
65180: NOT
65181: PUSH
65182: LD_VAR 0 3
65186: PUSH
65187: LD_INT 8
65189: GREATER
65190: OR
65191: IFFALSE 65195
// exit ;
65193: GO 65254
// if not range then
65195: LD_VAR 0 4
65199: NOT
65200: IFFALSE 65211
// range := - 12 ;
65202: LD_ADDR_VAR 0 4
65206: PUSH
65207: LD_INT 12
65209: NEG
65210: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65211: LD_VAR 0 1
65215: PPUSH
65216: LD_VAR 0 2
65220: PPUSH
65221: LD_VAR 0 3
65225: PPUSH
65226: LD_VAR 0 4
65230: PPUSH
65231: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65235: LD_VAR 0 1
65239: PPUSH
65240: LD_VAR 0 2
65244: PPUSH
65245: LD_VAR 0 3
65249: PPUSH
65250: CALL_OW 331
// end ;
65254: LD_VAR 0 5
65258: RET
// export function Video ( mode ) ; begin
65259: LD_INT 0
65261: PPUSH
// ingame_video = mode ;
65262: LD_ADDR_OWVAR 52
65266: PUSH
65267: LD_VAR 0 1
65271: ST_TO_ADDR
// interface_hidden = mode ;
65272: LD_ADDR_OWVAR 54
65276: PUSH
65277: LD_VAR 0 1
65281: ST_TO_ADDR
// end ;
65282: LD_VAR 0 2
65286: RET
// export function Join ( array , element ) ; begin
65287: LD_INT 0
65289: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65290: LD_ADDR_VAR 0 3
65294: PUSH
65295: LD_VAR 0 1
65299: PPUSH
65300: LD_VAR 0 1
65304: PUSH
65305: LD_INT 1
65307: PLUS
65308: PPUSH
65309: LD_VAR 0 2
65313: PPUSH
65314: CALL_OW 1
65318: ST_TO_ADDR
// end ;
65319: LD_VAR 0 3
65323: RET
// export function JoinUnion ( array , element ) ; begin
65324: LD_INT 0
65326: PPUSH
// result := array union element ;
65327: LD_ADDR_VAR 0 3
65331: PUSH
65332: LD_VAR 0 1
65336: PUSH
65337: LD_VAR 0 2
65341: UNION
65342: ST_TO_ADDR
// end ;
65343: LD_VAR 0 3
65347: RET
// export function GetBehemoths ( side ) ; begin
65348: LD_INT 0
65350: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65351: LD_ADDR_VAR 0 2
65355: PUSH
65356: LD_INT 22
65358: PUSH
65359: LD_VAR 0 1
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 31
65370: PUSH
65371: LD_INT 25
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PPUSH
65382: CALL_OW 69
65386: ST_TO_ADDR
// end ;
65387: LD_VAR 0 2
65391: RET
// export function Shuffle ( array ) ; var i , index ; begin
65392: LD_INT 0
65394: PPUSH
65395: PPUSH
65396: PPUSH
// result := [ ] ;
65397: LD_ADDR_VAR 0 2
65401: PUSH
65402: EMPTY
65403: ST_TO_ADDR
// if not array then
65404: LD_VAR 0 1
65408: NOT
65409: IFFALSE 65413
// exit ;
65411: GO 65512
// Randomize ;
65413: CALL_OW 10
// for i = array downto 1 do
65417: LD_ADDR_VAR 0 3
65421: PUSH
65422: DOUBLE
65423: LD_VAR 0 1
65427: INC
65428: ST_TO_ADDR
65429: LD_INT 1
65431: PUSH
65432: FOR_DOWNTO
65433: IFFALSE 65510
// begin index := rand ( 1 , array ) ;
65435: LD_ADDR_VAR 0 4
65439: PUSH
65440: LD_INT 1
65442: PPUSH
65443: LD_VAR 0 1
65447: PPUSH
65448: CALL_OW 12
65452: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65453: LD_ADDR_VAR 0 2
65457: PUSH
65458: LD_VAR 0 2
65462: PPUSH
65463: LD_VAR 0 2
65467: PUSH
65468: LD_INT 1
65470: PLUS
65471: PPUSH
65472: LD_VAR 0 1
65476: PUSH
65477: LD_VAR 0 4
65481: ARRAY
65482: PPUSH
65483: CALL_OW 2
65487: ST_TO_ADDR
// array := Delete ( array , index ) ;
65488: LD_ADDR_VAR 0 1
65492: PUSH
65493: LD_VAR 0 1
65497: PPUSH
65498: LD_VAR 0 4
65502: PPUSH
65503: CALL_OW 3
65507: ST_TO_ADDR
// end ;
65508: GO 65432
65510: POP
65511: POP
// end ;
65512: LD_VAR 0 2
65516: RET
// export function GetBaseMaterials ( base ) ; begin
65517: LD_INT 0
65519: PPUSH
// result := [ 0 , 0 , 0 ] ;
65520: LD_ADDR_VAR 0 2
65524: PUSH
65525: LD_INT 0
65527: PUSH
65528: LD_INT 0
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: LIST
65538: ST_TO_ADDR
// if not base then
65539: LD_VAR 0 1
65543: NOT
65544: IFFALSE 65548
// exit ;
65546: GO 65597
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65548: LD_ADDR_VAR 0 2
65552: PUSH
65553: LD_VAR 0 1
65557: PPUSH
65558: LD_INT 1
65560: PPUSH
65561: CALL_OW 275
65565: PUSH
65566: LD_VAR 0 1
65570: PPUSH
65571: LD_INT 2
65573: PPUSH
65574: CALL_OW 275
65578: PUSH
65579: LD_VAR 0 1
65583: PPUSH
65584: LD_INT 3
65586: PPUSH
65587: CALL_OW 275
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: LIST
65596: ST_TO_ADDR
// end ;
65597: LD_VAR 0 2
65601: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65602: LD_INT 0
65604: PPUSH
65605: PPUSH
// result := array ;
65606: LD_ADDR_VAR 0 3
65610: PUSH
65611: LD_VAR 0 1
65615: ST_TO_ADDR
// if size >= result then
65616: LD_VAR 0 2
65620: PUSH
65621: LD_VAR 0 3
65625: GREATEREQUAL
65626: IFFALSE 65630
// exit ;
65628: GO 65680
// if size then
65630: LD_VAR 0 2
65634: IFFALSE 65680
// for i := array downto size do
65636: LD_ADDR_VAR 0 4
65640: PUSH
65641: DOUBLE
65642: LD_VAR 0 1
65646: INC
65647: ST_TO_ADDR
65648: LD_VAR 0 2
65652: PUSH
65653: FOR_DOWNTO
65654: IFFALSE 65678
// result := Delete ( result , result ) ;
65656: LD_ADDR_VAR 0 3
65660: PUSH
65661: LD_VAR 0 3
65665: PPUSH
65666: LD_VAR 0 3
65670: PPUSH
65671: CALL_OW 3
65675: ST_TO_ADDR
65676: GO 65653
65678: POP
65679: POP
// end ;
65680: LD_VAR 0 3
65684: RET
// export function ComExit ( unit ) ; var tmp ; begin
65685: LD_INT 0
65687: PPUSH
65688: PPUSH
// if not IsInUnit ( unit ) then
65689: LD_VAR 0 1
65693: PPUSH
65694: CALL_OW 310
65698: NOT
65699: IFFALSE 65703
// exit ;
65701: GO 65763
// tmp := IsInUnit ( unit ) ;
65703: LD_ADDR_VAR 0 3
65707: PUSH
65708: LD_VAR 0 1
65712: PPUSH
65713: CALL_OW 310
65717: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65718: LD_VAR 0 3
65722: PPUSH
65723: CALL_OW 247
65727: PUSH
65728: LD_INT 2
65730: EQUAL
65731: IFFALSE 65744
// ComExitVehicle ( unit ) else
65733: LD_VAR 0 1
65737: PPUSH
65738: CALL_OW 121
65742: GO 65753
// ComExitBuilding ( unit ) ;
65744: LD_VAR 0 1
65748: PPUSH
65749: CALL_OW 122
// result := tmp ;
65753: LD_ADDR_VAR 0 2
65757: PUSH
65758: LD_VAR 0 3
65762: ST_TO_ADDR
// end ;
65763: LD_VAR 0 2
65767: RET
// export function ComExitAll ( units ) ; var i ; begin
65768: LD_INT 0
65770: PPUSH
65771: PPUSH
// if not units then
65772: LD_VAR 0 1
65776: NOT
65777: IFFALSE 65781
// exit ;
65779: GO 65807
// for i in units do
65781: LD_ADDR_VAR 0 3
65785: PUSH
65786: LD_VAR 0 1
65790: PUSH
65791: FOR_IN
65792: IFFALSE 65805
// ComExit ( i ) ;
65794: LD_VAR 0 3
65798: PPUSH
65799: CALL 65685 0 1
65803: GO 65791
65805: POP
65806: POP
// end ;
65807: LD_VAR 0 2
65811: RET
// export function ResetHc ; begin
65812: LD_INT 0
65814: PPUSH
// InitHc ;
65815: CALL_OW 19
// hc_importance := 0 ;
65819: LD_ADDR_OWVAR 32
65823: PUSH
65824: LD_INT 0
65826: ST_TO_ADDR
// end ;
65827: LD_VAR 0 1
65831: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65832: LD_INT 0
65834: PPUSH
65835: PPUSH
65836: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65837: LD_ADDR_VAR 0 6
65841: PUSH
65842: LD_VAR 0 1
65846: PUSH
65847: LD_VAR 0 3
65851: PLUS
65852: PUSH
65853: LD_INT 2
65855: DIV
65856: ST_TO_ADDR
// if _x < 0 then
65857: LD_VAR 0 6
65861: PUSH
65862: LD_INT 0
65864: LESS
65865: IFFALSE 65882
// _x := _x * - 1 ;
65867: LD_ADDR_VAR 0 6
65871: PUSH
65872: LD_VAR 0 6
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: MUL
65881: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65882: LD_ADDR_VAR 0 7
65886: PUSH
65887: LD_VAR 0 2
65891: PUSH
65892: LD_VAR 0 4
65896: PLUS
65897: PUSH
65898: LD_INT 2
65900: DIV
65901: ST_TO_ADDR
// if _y < 0 then
65902: LD_VAR 0 7
65906: PUSH
65907: LD_INT 0
65909: LESS
65910: IFFALSE 65927
// _y := _y * - 1 ;
65912: LD_ADDR_VAR 0 7
65916: PUSH
65917: LD_VAR 0 7
65921: PUSH
65922: LD_INT 1
65924: NEG
65925: MUL
65926: ST_TO_ADDR
// result := [ _x , _y ] ;
65927: LD_ADDR_VAR 0 5
65931: PUSH
65932: LD_VAR 0 6
65936: PUSH
65937: LD_VAR 0 7
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: ST_TO_ADDR
// end ;
65946: LD_VAR 0 5
65950: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65951: LD_INT 0
65953: PPUSH
65954: PPUSH
65955: PPUSH
65956: PPUSH
// task := GetTaskList ( unit ) ;
65957: LD_ADDR_VAR 0 7
65961: PUSH
65962: LD_VAR 0 1
65966: PPUSH
65967: CALL_OW 437
65971: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65972: LD_VAR 0 7
65976: NOT
65977: PUSH
65978: LD_VAR 0 1
65982: PPUSH
65983: LD_VAR 0 2
65987: PPUSH
65988: CALL_OW 308
65992: NOT
65993: AND
65994: IFFALSE 65998
// exit ;
65996: GO 66116
// if IsInArea ( unit , area ) then
65998: LD_VAR 0 1
66002: PPUSH
66003: LD_VAR 0 2
66007: PPUSH
66008: CALL_OW 308
66012: IFFALSE 66030
// begin ComMoveToArea ( unit , goAway ) ;
66014: LD_VAR 0 1
66018: PPUSH
66019: LD_VAR 0 3
66023: PPUSH
66024: CALL_OW 113
// exit ;
66028: GO 66116
// end ; if task [ 1 ] [ 1 ] <> M then
66030: LD_VAR 0 7
66034: PUSH
66035: LD_INT 1
66037: ARRAY
66038: PUSH
66039: LD_INT 1
66041: ARRAY
66042: PUSH
66043: LD_STRING M
66045: NONEQUAL
66046: IFFALSE 66050
// exit ;
66048: GO 66116
// x := task [ 1 ] [ 2 ] ;
66050: LD_ADDR_VAR 0 5
66054: PUSH
66055: LD_VAR 0 7
66059: PUSH
66060: LD_INT 1
66062: ARRAY
66063: PUSH
66064: LD_INT 2
66066: ARRAY
66067: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66068: LD_ADDR_VAR 0 6
66072: PUSH
66073: LD_VAR 0 7
66077: PUSH
66078: LD_INT 1
66080: ARRAY
66081: PUSH
66082: LD_INT 3
66084: ARRAY
66085: ST_TO_ADDR
// if InArea ( x , y , area ) then
66086: LD_VAR 0 5
66090: PPUSH
66091: LD_VAR 0 6
66095: PPUSH
66096: LD_VAR 0 2
66100: PPUSH
66101: CALL_OW 309
66105: IFFALSE 66116
// ComStop ( unit ) ;
66107: LD_VAR 0 1
66111: PPUSH
66112: CALL_OW 141
// end ;
66116: LD_VAR 0 4
66120: RET
// export function Abs ( value ) ; begin
66121: LD_INT 0
66123: PPUSH
// result := value ;
66124: LD_ADDR_VAR 0 2
66128: PUSH
66129: LD_VAR 0 1
66133: ST_TO_ADDR
// if value < 0 then
66134: LD_VAR 0 1
66138: PUSH
66139: LD_INT 0
66141: LESS
66142: IFFALSE 66159
// result := value * - 1 ;
66144: LD_ADDR_VAR 0 2
66148: PUSH
66149: LD_VAR 0 1
66153: PUSH
66154: LD_INT 1
66156: NEG
66157: MUL
66158: ST_TO_ADDR
// end ;
66159: LD_VAR 0 2
66163: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66164: LD_INT 0
66166: PPUSH
66167: PPUSH
66168: PPUSH
66169: PPUSH
66170: PPUSH
66171: PPUSH
66172: PPUSH
66173: PPUSH
// if not unit or not building then
66174: LD_VAR 0 1
66178: NOT
66179: PUSH
66180: LD_VAR 0 2
66184: NOT
66185: OR
66186: IFFALSE 66190
// exit ;
66188: GO 66416
// x := GetX ( building ) ;
66190: LD_ADDR_VAR 0 4
66194: PUSH
66195: LD_VAR 0 2
66199: PPUSH
66200: CALL_OW 250
66204: ST_TO_ADDR
// y := GetY ( building ) ;
66205: LD_ADDR_VAR 0 6
66209: PUSH
66210: LD_VAR 0 2
66214: PPUSH
66215: CALL_OW 251
66219: ST_TO_ADDR
// d := GetDir ( building ) ;
66220: LD_ADDR_VAR 0 8
66224: PUSH
66225: LD_VAR 0 2
66229: PPUSH
66230: CALL_OW 254
66234: ST_TO_ADDR
// r := 4 ;
66235: LD_ADDR_VAR 0 9
66239: PUSH
66240: LD_INT 4
66242: ST_TO_ADDR
// for i := 1 to 5 do
66243: LD_ADDR_VAR 0 10
66247: PUSH
66248: DOUBLE
66249: LD_INT 1
66251: DEC
66252: ST_TO_ADDR
66253: LD_INT 5
66255: PUSH
66256: FOR_TO
66257: IFFALSE 66414
// begin _x := ShiftX ( x , d , r + i ) ;
66259: LD_ADDR_VAR 0 5
66263: PUSH
66264: LD_VAR 0 4
66268: PPUSH
66269: LD_VAR 0 8
66273: PPUSH
66274: LD_VAR 0 9
66278: PUSH
66279: LD_VAR 0 10
66283: PLUS
66284: PPUSH
66285: CALL_OW 272
66289: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66290: LD_ADDR_VAR 0 7
66294: PUSH
66295: LD_VAR 0 6
66299: PPUSH
66300: LD_VAR 0 8
66304: PPUSH
66305: LD_VAR 0 9
66309: PUSH
66310: LD_VAR 0 10
66314: PLUS
66315: PPUSH
66316: CALL_OW 273
66320: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66321: LD_VAR 0 5
66325: PPUSH
66326: LD_VAR 0 7
66330: PPUSH
66331: CALL_OW 488
66335: PUSH
66336: LD_VAR 0 5
66340: PPUSH
66341: LD_VAR 0 7
66345: PPUSH
66346: CALL_OW 428
66350: PPUSH
66351: CALL_OW 247
66355: PUSH
66356: LD_INT 3
66358: PUSH
66359: LD_INT 2
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: IN
66366: NOT
66367: AND
66368: IFFALSE 66412
// begin ComMoveXY ( unit , _x , _y ) ;
66370: LD_VAR 0 1
66374: PPUSH
66375: LD_VAR 0 5
66379: PPUSH
66380: LD_VAR 0 7
66384: PPUSH
66385: CALL_OW 111
// result := [ _x , _y ] ;
66389: LD_ADDR_VAR 0 3
66393: PUSH
66394: LD_VAR 0 5
66398: PUSH
66399: LD_VAR 0 7
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: ST_TO_ADDR
// exit ;
66408: POP
66409: POP
66410: GO 66416
// end ; end ;
66412: GO 66256
66414: POP
66415: POP
// end ;
66416: LD_VAR 0 3
66420: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66421: LD_INT 0
66423: PPUSH
66424: PPUSH
66425: PPUSH
// result := 0 ;
66426: LD_ADDR_VAR 0 3
66430: PUSH
66431: LD_INT 0
66433: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66434: LD_VAR 0 1
66438: PUSH
66439: LD_INT 0
66441: LESS
66442: PUSH
66443: LD_VAR 0 1
66447: PUSH
66448: LD_INT 8
66450: GREATER
66451: OR
66452: PUSH
66453: LD_VAR 0 2
66457: PUSH
66458: LD_INT 0
66460: LESS
66461: OR
66462: PUSH
66463: LD_VAR 0 2
66467: PUSH
66468: LD_INT 8
66470: GREATER
66471: OR
66472: IFFALSE 66476
// exit ;
66474: GO 66551
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66476: LD_ADDR_VAR 0 4
66480: PUSH
66481: LD_INT 22
66483: PUSH
66484: LD_VAR 0 2
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PPUSH
66493: CALL_OW 69
66497: PUSH
66498: FOR_IN
66499: IFFALSE 66549
// begin un := UnitShoot ( i ) ;
66501: LD_ADDR_VAR 0 5
66505: PUSH
66506: LD_VAR 0 4
66510: PPUSH
66511: CALL_OW 504
66515: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66516: LD_VAR 0 5
66520: PPUSH
66521: CALL_OW 255
66525: PUSH
66526: LD_VAR 0 1
66530: EQUAL
66531: IFFALSE 66547
// begin result := un ;
66533: LD_ADDR_VAR 0 3
66537: PUSH
66538: LD_VAR 0 5
66542: ST_TO_ADDR
// exit ;
66543: POP
66544: POP
66545: GO 66551
// end ; end ;
66547: GO 66498
66549: POP
66550: POP
// end ;
66551: LD_VAR 0 3
66555: RET
// export function GetCargoBay ( units ) ; begin
66556: LD_INT 0
66558: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66559: LD_ADDR_VAR 0 2
66563: PUSH
66564: LD_VAR 0 1
66568: PPUSH
66569: LD_INT 2
66571: PUSH
66572: LD_INT 34
66574: PUSH
66575: LD_INT 12
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 34
66584: PUSH
66585: LD_INT 51
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 34
66594: PUSH
66595: LD_INT 32
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 34
66604: PUSH
66605: LD_INT 89
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: PPUSH
66619: CALL_OW 72
66623: ST_TO_ADDR
// end ;
66624: LD_VAR 0 2
66628: RET
// export function Negate ( value ) ; begin
66629: LD_INT 0
66631: PPUSH
// result := not value ;
66632: LD_ADDR_VAR 0 2
66636: PUSH
66637: LD_VAR 0 1
66641: NOT
66642: ST_TO_ADDR
// end ;
66643: LD_VAR 0 2
66647: RET
// export function Inc ( value ) ; begin
66648: LD_INT 0
66650: PPUSH
// result := value + 1 ;
66651: LD_ADDR_VAR 0 2
66655: PUSH
66656: LD_VAR 0 1
66660: PUSH
66661: LD_INT 1
66663: PLUS
66664: ST_TO_ADDR
// end ;
66665: LD_VAR 0 2
66669: RET
// export function Dec ( value ) ; begin
66670: LD_INT 0
66672: PPUSH
// result := value - 1 ;
66673: LD_ADDR_VAR 0 2
66677: PUSH
66678: LD_VAR 0 1
66682: PUSH
66683: LD_INT 1
66685: MINUS
66686: ST_TO_ADDR
// end ;
66687: LD_VAR 0 2
66691: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66692: LD_INT 0
66694: PPUSH
66695: PPUSH
66696: PPUSH
66697: PPUSH
66698: PPUSH
66699: PPUSH
66700: PPUSH
66701: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66702: LD_VAR 0 1
66706: PPUSH
66707: LD_VAR 0 2
66711: PPUSH
66712: CALL_OW 488
66716: NOT
66717: PUSH
66718: LD_VAR 0 3
66722: PPUSH
66723: LD_VAR 0 4
66727: PPUSH
66728: CALL_OW 488
66732: NOT
66733: OR
66734: IFFALSE 66747
// begin result := - 1 ;
66736: LD_ADDR_VAR 0 5
66740: PUSH
66741: LD_INT 1
66743: NEG
66744: ST_TO_ADDR
// exit ;
66745: GO 66982
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66747: LD_ADDR_VAR 0 12
66751: PUSH
66752: LD_VAR 0 1
66756: PPUSH
66757: LD_VAR 0 2
66761: PPUSH
66762: LD_VAR 0 3
66766: PPUSH
66767: LD_VAR 0 4
66771: PPUSH
66772: CALL 65832 0 4
66776: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66777: LD_ADDR_VAR 0 11
66781: PUSH
66782: LD_VAR 0 1
66786: PPUSH
66787: LD_VAR 0 2
66791: PPUSH
66792: LD_VAR 0 12
66796: PUSH
66797: LD_INT 1
66799: ARRAY
66800: PPUSH
66801: LD_VAR 0 12
66805: PUSH
66806: LD_INT 2
66808: ARRAY
66809: PPUSH
66810: CALL_OW 298
66814: ST_TO_ADDR
// distance := 9999 ;
66815: LD_ADDR_VAR 0 10
66819: PUSH
66820: LD_INT 9999
66822: ST_TO_ADDR
// for i := 0 to 5 do
66823: LD_ADDR_VAR 0 6
66827: PUSH
66828: DOUBLE
66829: LD_INT 0
66831: DEC
66832: ST_TO_ADDR
66833: LD_INT 5
66835: PUSH
66836: FOR_TO
66837: IFFALSE 66980
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66839: LD_ADDR_VAR 0 7
66843: PUSH
66844: LD_VAR 0 1
66848: PPUSH
66849: LD_VAR 0 6
66853: PPUSH
66854: LD_VAR 0 11
66858: PPUSH
66859: CALL_OW 272
66863: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66864: LD_ADDR_VAR 0 8
66868: PUSH
66869: LD_VAR 0 2
66873: PPUSH
66874: LD_VAR 0 6
66878: PPUSH
66879: LD_VAR 0 11
66883: PPUSH
66884: CALL_OW 273
66888: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66889: LD_VAR 0 7
66893: PPUSH
66894: LD_VAR 0 8
66898: PPUSH
66899: CALL_OW 488
66903: NOT
66904: IFFALSE 66908
// continue ;
66906: GO 66836
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66908: LD_ADDR_VAR 0 9
66912: PUSH
66913: LD_VAR 0 12
66917: PUSH
66918: LD_INT 1
66920: ARRAY
66921: PPUSH
66922: LD_VAR 0 12
66926: PUSH
66927: LD_INT 2
66929: ARRAY
66930: PPUSH
66931: LD_VAR 0 7
66935: PPUSH
66936: LD_VAR 0 8
66940: PPUSH
66941: CALL_OW 298
66945: ST_TO_ADDR
// if tmp < distance then
66946: LD_VAR 0 9
66950: PUSH
66951: LD_VAR 0 10
66955: LESS
66956: IFFALSE 66978
// begin result := i ;
66958: LD_ADDR_VAR 0 5
66962: PUSH
66963: LD_VAR 0 6
66967: ST_TO_ADDR
// distance := tmp ;
66968: LD_ADDR_VAR 0 10
66972: PUSH
66973: LD_VAR 0 9
66977: ST_TO_ADDR
// end ; end ;
66978: GO 66836
66980: POP
66981: POP
// end ;
66982: LD_VAR 0 5
66986: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66987: LD_INT 0
66989: PPUSH
66990: PPUSH
// if not driver or not IsInUnit ( driver ) then
66991: LD_VAR 0 1
66995: NOT
66996: PUSH
66997: LD_VAR 0 1
67001: PPUSH
67002: CALL_OW 310
67006: NOT
67007: OR
67008: IFFALSE 67012
// exit ;
67010: GO 67102
// vehicle := IsInUnit ( driver ) ;
67012: LD_ADDR_VAR 0 3
67016: PUSH
67017: LD_VAR 0 1
67021: PPUSH
67022: CALL_OW 310
67026: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67027: LD_VAR 0 1
67031: PPUSH
67032: LD_STRING \
67034: PUSH
67035: LD_INT 0
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: LD_INT 0
67043: PUSH
67044: LD_INT 0
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: LD_INT 0
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: PUSH
67062: LD_STRING E
67064: PUSH
67065: LD_INT 0
67067: PUSH
67068: LD_INT 0
67070: PUSH
67071: LD_VAR 0 3
67075: PUSH
67076: LD_INT 0
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: LD_INT 0
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PPUSH
67098: CALL_OW 446
// end ;
67102: LD_VAR 0 2
67106: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67107: LD_INT 0
67109: PPUSH
67110: PPUSH
// if not driver or not IsInUnit ( driver ) then
67111: LD_VAR 0 1
67115: NOT
67116: PUSH
67117: LD_VAR 0 1
67121: PPUSH
67122: CALL_OW 310
67126: NOT
67127: OR
67128: IFFALSE 67132
// exit ;
67130: GO 67222
// vehicle := IsInUnit ( driver ) ;
67132: LD_ADDR_VAR 0 3
67136: PUSH
67137: LD_VAR 0 1
67141: PPUSH
67142: CALL_OW 310
67146: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67147: LD_VAR 0 1
67151: PPUSH
67152: LD_STRING \
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: LD_INT 0
67160: PUSH
67161: LD_INT 0
67163: PUSH
67164: LD_INT 0
67166: PUSH
67167: LD_INT 0
67169: PUSH
67170: LD_INT 0
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: PUSH
67182: LD_STRING E
67184: PUSH
67185: LD_INT 0
67187: PUSH
67188: LD_INT 0
67190: PUSH
67191: LD_VAR 0 3
67195: PUSH
67196: LD_INT 0
67198: PUSH
67199: LD_INT 0
67201: PUSH
67202: LD_INT 0
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PPUSH
67218: CALL_OW 447
// end ;
67222: LD_VAR 0 2
67226: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67227: LD_INT 0
67229: PPUSH
67230: PPUSH
67231: PPUSH
// tmp := [ ] ;
67232: LD_ADDR_VAR 0 5
67236: PUSH
67237: EMPTY
67238: ST_TO_ADDR
// for i in units do
67239: LD_ADDR_VAR 0 4
67243: PUSH
67244: LD_VAR 0 1
67248: PUSH
67249: FOR_IN
67250: IFFALSE 67288
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67252: LD_ADDR_VAR 0 5
67256: PUSH
67257: LD_VAR 0 5
67261: PPUSH
67262: LD_VAR 0 5
67266: PUSH
67267: LD_INT 1
67269: PLUS
67270: PPUSH
67271: LD_VAR 0 4
67275: PPUSH
67276: CALL_OW 256
67280: PPUSH
67281: CALL_OW 2
67285: ST_TO_ADDR
67286: GO 67249
67288: POP
67289: POP
// if not tmp then
67290: LD_VAR 0 5
67294: NOT
67295: IFFALSE 67299
// exit ;
67297: GO 67347
// if asc then
67299: LD_VAR 0 2
67303: IFFALSE 67327
// result := SortListByListAsc ( units , tmp ) else
67305: LD_ADDR_VAR 0 3
67309: PUSH
67310: LD_VAR 0 1
67314: PPUSH
67315: LD_VAR 0 5
67319: PPUSH
67320: CALL_OW 76
67324: ST_TO_ADDR
67325: GO 67347
// result := SortListByListDesc ( units , tmp ) ;
67327: LD_ADDR_VAR 0 3
67331: PUSH
67332: LD_VAR 0 1
67336: PPUSH
67337: LD_VAR 0 5
67341: PPUSH
67342: CALL_OW 77
67346: ST_TO_ADDR
// end ;
67347: LD_VAR 0 3
67351: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67352: LD_INT 0
67354: PPUSH
67355: PPUSH
// task := GetTaskList ( mech ) ;
67356: LD_ADDR_VAR 0 4
67360: PUSH
67361: LD_VAR 0 1
67365: PPUSH
67366: CALL_OW 437
67370: ST_TO_ADDR
// if not task then
67371: LD_VAR 0 4
67375: NOT
67376: IFFALSE 67380
// exit ;
67378: GO 67422
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67380: LD_ADDR_VAR 0 3
67384: PUSH
67385: LD_VAR 0 4
67389: PUSH
67390: LD_INT 1
67392: ARRAY
67393: PUSH
67394: LD_INT 1
67396: ARRAY
67397: PUSH
67398: LD_STRING r
67400: EQUAL
67401: PUSH
67402: LD_VAR 0 4
67406: PUSH
67407: LD_INT 1
67409: ARRAY
67410: PUSH
67411: LD_INT 4
67413: ARRAY
67414: PUSH
67415: LD_VAR 0 2
67419: EQUAL
67420: AND
67421: ST_TO_ADDR
// end ;
67422: LD_VAR 0 3
67426: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67427: LD_INT 0
67429: PPUSH
// SetDir ( unit , d ) ;
67430: LD_VAR 0 1
67434: PPUSH
67435: LD_VAR 0 4
67439: PPUSH
67440: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67444: LD_VAR 0 1
67448: PPUSH
67449: LD_VAR 0 2
67453: PPUSH
67454: LD_VAR 0 3
67458: PPUSH
67459: LD_VAR 0 5
67463: PPUSH
67464: CALL_OW 48
// end ;
67468: LD_VAR 0 6
67472: RET
// export function ToNaturalNumber ( number ) ; begin
67473: LD_INT 0
67475: PPUSH
// result := number div 1 ;
67476: LD_ADDR_VAR 0 2
67480: PUSH
67481: LD_VAR 0 1
67485: PUSH
67486: LD_INT 1
67488: DIV
67489: ST_TO_ADDR
// if number < 0 then
67490: LD_VAR 0 1
67494: PUSH
67495: LD_INT 0
67497: LESS
67498: IFFALSE 67508
// result := 0 ;
67500: LD_ADDR_VAR 0 2
67504: PUSH
67505: LD_INT 0
67507: ST_TO_ADDR
// end ;
67508: LD_VAR 0 2
67512: RET
// export function SortByClass ( units , class ) ; var un ; begin
67513: LD_INT 0
67515: PPUSH
67516: PPUSH
// if not units or not class then
67517: LD_VAR 0 1
67521: NOT
67522: PUSH
67523: LD_VAR 0 2
67527: NOT
67528: OR
67529: IFFALSE 67533
// exit ;
67531: GO 67628
// result := [ ] ;
67533: LD_ADDR_VAR 0 3
67537: PUSH
67538: EMPTY
67539: ST_TO_ADDR
// for un in units do
67540: LD_ADDR_VAR 0 4
67544: PUSH
67545: LD_VAR 0 1
67549: PUSH
67550: FOR_IN
67551: IFFALSE 67626
// if GetClass ( un ) = class then
67553: LD_VAR 0 4
67557: PPUSH
67558: CALL_OW 257
67562: PUSH
67563: LD_VAR 0 2
67567: EQUAL
67568: IFFALSE 67595
// result := Insert ( result , 1 , un ) else
67570: LD_ADDR_VAR 0 3
67574: PUSH
67575: LD_VAR 0 3
67579: PPUSH
67580: LD_INT 1
67582: PPUSH
67583: LD_VAR 0 4
67587: PPUSH
67588: CALL_OW 2
67592: ST_TO_ADDR
67593: GO 67624
// result := Replace ( result , result + 1 , un ) ;
67595: LD_ADDR_VAR 0 3
67599: PUSH
67600: LD_VAR 0 3
67604: PPUSH
67605: LD_VAR 0 3
67609: PUSH
67610: LD_INT 1
67612: PLUS
67613: PPUSH
67614: LD_VAR 0 4
67618: PPUSH
67619: CALL_OW 1
67623: ST_TO_ADDR
67624: GO 67550
67626: POP
67627: POP
// end ;
67628: LD_VAR 0 3
67632: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67633: LD_INT 0
67635: PPUSH
67636: PPUSH
67637: PPUSH
67638: PPUSH
67639: PPUSH
67640: PPUSH
67641: PPUSH
// result := [ ] ;
67642: LD_ADDR_VAR 0 4
67646: PUSH
67647: EMPTY
67648: ST_TO_ADDR
// if x - r < 0 then
67649: LD_VAR 0 1
67653: PUSH
67654: LD_VAR 0 3
67658: MINUS
67659: PUSH
67660: LD_INT 0
67662: LESS
67663: IFFALSE 67675
// min_x := 0 else
67665: LD_ADDR_VAR 0 8
67669: PUSH
67670: LD_INT 0
67672: ST_TO_ADDR
67673: GO 67691
// min_x := x - r ;
67675: LD_ADDR_VAR 0 8
67679: PUSH
67680: LD_VAR 0 1
67684: PUSH
67685: LD_VAR 0 3
67689: MINUS
67690: ST_TO_ADDR
// if y - r < 0 then
67691: LD_VAR 0 2
67695: PUSH
67696: LD_VAR 0 3
67700: MINUS
67701: PUSH
67702: LD_INT 0
67704: LESS
67705: IFFALSE 67717
// min_y := 0 else
67707: LD_ADDR_VAR 0 7
67711: PUSH
67712: LD_INT 0
67714: ST_TO_ADDR
67715: GO 67733
// min_y := y - r ;
67717: LD_ADDR_VAR 0 7
67721: PUSH
67722: LD_VAR 0 2
67726: PUSH
67727: LD_VAR 0 3
67731: MINUS
67732: ST_TO_ADDR
// max_x := x + r ;
67733: LD_ADDR_VAR 0 9
67737: PUSH
67738: LD_VAR 0 1
67742: PUSH
67743: LD_VAR 0 3
67747: PLUS
67748: ST_TO_ADDR
// max_y := y + r ;
67749: LD_ADDR_VAR 0 10
67753: PUSH
67754: LD_VAR 0 2
67758: PUSH
67759: LD_VAR 0 3
67763: PLUS
67764: ST_TO_ADDR
// for _x = min_x to max_x do
67765: LD_ADDR_VAR 0 5
67769: PUSH
67770: DOUBLE
67771: LD_VAR 0 8
67775: DEC
67776: ST_TO_ADDR
67777: LD_VAR 0 9
67781: PUSH
67782: FOR_TO
67783: IFFALSE 67884
// for _y = min_y to max_y do
67785: LD_ADDR_VAR 0 6
67789: PUSH
67790: DOUBLE
67791: LD_VAR 0 7
67795: DEC
67796: ST_TO_ADDR
67797: LD_VAR 0 10
67801: PUSH
67802: FOR_TO
67803: IFFALSE 67880
// begin if not ValidHex ( _x , _y ) then
67805: LD_VAR 0 5
67809: PPUSH
67810: LD_VAR 0 6
67814: PPUSH
67815: CALL_OW 488
67819: NOT
67820: IFFALSE 67824
// continue ;
67822: GO 67802
// if GetResourceTypeXY ( _x , _y ) then
67824: LD_VAR 0 5
67828: PPUSH
67829: LD_VAR 0 6
67833: PPUSH
67834: CALL_OW 283
67838: IFFALSE 67878
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67840: LD_ADDR_VAR 0 4
67844: PUSH
67845: LD_VAR 0 4
67849: PPUSH
67850: LD_VAR 0 4
67854: PUSH
67855: LD_INT 1
67857: PLUS
67858: PPUSH
67859: LD_VAR 0 5
67863: PUSH
67864: LD_VAR 0 6
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PPUSH
67873: CALL_OW 1
67877: ST_TO_ADDR
// end ;
67878: GO 67802
67880: POP
67881: POP
67882: GO 67782
67884: POP
67885: POP
// end ;
67886: LD_VAR 0 4
67890: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67891: LD_INT 0
67893: PPUSH
67894: PPUSH
67895: PPUSH
67896: PPUSH
67897: PPUSH
67898: PPUSH
67899: PPUSH
67900: PPUSH
// if not units then
67901: LD_VAR 0 1
67905: NOT
67906: IFFALSE 67910
// exit ;
67908: GO 68434
// result := UnitFilter ( units , [ f_ok ] ) ;
67910: LD_ADDR_VAR 0 3
67914: PUSH
67915: LD_VAR 0 1
67919: PPUSH
67920: LD_INT 50
67922: PUSH
67923: EMPTY
67924: LIST
67925: PPUSH
67926: CALL_OW 72
67930: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67931: LD_ADDR_VAR 0 8
67935: PUSH
67936: LD_VAR 0 1
67940: PUSH
67941: LD_INT 1
67943: ARRAY
67944: PPUSH
67945: CALL_OW 255
67949: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67950: LD_ADDR_VAR 0 10
67954: PUSH
67955: LD_INT 29
67957: PUSH
67958: LD_INT 91
67960: PUSH
67961: LD_INT 49
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: LIST
67968: ST_TO_ADDR
// if not result then
67969: LD_VAR 0 3
67973: NOT
67974: IFFALSE 67978
// exit ;
67976: GO 68434
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67978: LD_ADDR_VAR 0 5
67982: PUSH
67983: LD_INT 81
67985: PUSH
67986: LD_VAR 0 8
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PPUSH
67995: CALL_OW 69
67999: ST_TO_ADDR
// for i in result do
68000: LD_ADDR_VAR 0 4
68004: PUSH
68005: LD_VAR 0 3
68009: PUSH
68010: FOR_IN
68011: IFFALSE 68432
// begin tag := GetTag ( i ) + 1 ;
68013: LD_ADDR_VAR 0 9
68017: PUSH
68018: LD_VAR 0 4
68022: PPUSH
68023: CALL_OW 110
68027: PUSH
68028: LD_INT 1
68030: PLUS
68031: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68032: LD_ADDR_VAR 0 7
68036: PUSH
68037: LD_VAR 0 4
68041: PPUSH
68042: CALL_OW 250
68046: PPUSH
68047: LD_VAR 0 4
68051: PPUSH
68052: CALL_OW 251
68056: PPUSH
68057: LD_INT 6
68059: PPUSH
68060: CALL 67633 0 3
68064: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68065: LD_VAR 0 4
68069: PPUSH
68070: CALL_OW 247
68074: PUSH
68075: LD_INT 2
68077: EQUAL
68078: PUSH
68079: LD_VAR 0 7
68083: AND
68084: PUSH
68085: LD_VAR 0 4
68089: PPUSH
68090: CALL_OW 264
68094: PUSH
68095: LD_VAR 0 10
68099: IN
68100: NOT
68101: AND
68102: IFFALSE 68141
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68104: LD_VAR 0 4
68108: PPUSH
68109: LD_VAR 0 7
68113: PUSH
68114: LD_INT 1
68116: ARRAY
68117: PUSH
68118: LD_INT 1
68120: ARRAY
68121: PPUSH
68122: LD_VAR 0 7
68126: PUSH
68127: LD_INT 1
68129: ARRAY
68130: PUSH
68131: LD_INT 2
68133: ARRAY
68134: PPUSH
68135: CALL_OW 116
68139: GO 68430
// if path > tag then
68141: LD_VAR 0 2
68145: PUSH
68146: LD_VAR 0 9
68150: GREATER
68151: IFFALSE 68359
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68153: LD_ADDR_VAR 0 6
68157: PUSH
68158: LD_VAR 0 5
68162: PPUSH
68163: LD_INT 91
68165: PUSH
68166: LD_VAR 0 4
68170: PUSH
68171: LD_INT 8
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: LIST
68178: PPUSH
68179: CALL_OW 72
68183: ST_TO_ADDR
// if nearEnemy then
68184: LD_VAR 0 6
68188: IFFALSE 68257
// begin if GetWeapon ( i ) = ru_time_lapser then
68190: LD_VAR 0 4
68194: PPUSH
68195: CALL_OW 264
68199: PUSH
68200: LD_INT 49
68202: EQUAL
68203: IFFALSE 68231
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68205: LD_VAR 0 4
68209: PPUSH
68210: LD_VAR 0 6
68214: PPUSH
68215: LD_VAR 0 4
68219: PPUSH
68220: CALL_OW 74
68224: PPUSH
68225: CALL_OW 112
68229: GO 68255
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68231: LD_VAR 0 4
68235: PPUSH
68236: LD_VAR 0 6
68240: PPUSH
68241: LD_VAR 0 4
68245: PPUSH
68246: CALL_OW 74
68250: PPUSH
68251: CALL 69359 0 2
// end else
68255: GO 68357
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68257: LD_VAR 0 4
68261: PPUSH
68262: LD_VAR 0 2
68266: PUSH
68267: LD_VAR 0 9
68271: ARRAY
68272: PUSH
68273: LD_INT 1
68275: ARRAY
68276: PPUSH
68277: LD_VAR 0 2
68281: PUSH
68282: LD_VAR 0 9
68286: ARRAY
68287: PUSH
68288: LD_INT 2
68290: ARRAY
68291: PPUSH
68292: CALL_OW 297
68296: PUSH
68297: LD_INT 6
68299: GREATER
68300: IFFALSE 68343
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68302: LD_VAR 0 4
68306: PPUSH
68307: LD_VAR 0 2
68311: PUSH
68312: LD_VAR 0 9
68316: ARRAY
68317: PUSH
68318: LD_INT 1
68320: ARRAY
68321: PPUSH
68322: LD_VAR 0 2
68326: PUSH
68327: LD_VAR 0 9
68331: ARRAY
68332: PUSH
68333: LD_INT 2
68335: ARRAY
68336: PPUSH
68337: CALL_OW 114
68341: GO 68357
// SetTag ( i , tag ) ;
68343: LD_VAR 0 4
68347: PPUSH
68348: LD_VAR 0 9
68352: PPUSH
68353: CALL_OW 109
// end else
68357: GO 68430
// if enemy then
68359: LD_VAR 0 5
68363: IFFALSE 68430
// begin if GetWeapon ( i ) = ru_time_lapser then
68365: LD_VAR 0 4
68369: PPUSH
68370: CALL_OW 264
68374: PUSH
68375: LD_INT 49
68377: EQUAL
68378: IFFALSE 68406
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68380: LD_VAR 0 4
68384: PPUSH
68385: LD_VAR 0 5
68389: PPUSH
68390: LD_VAR 0 4
68394: PPUSH
68395: CALL_OW 74
68399: PPUSH
68400: CALL_OW 112
68404: GO 68430
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68406: LD_VAR 0 4
68410: PPUSH
68411: LD_VAR 0 5
68415: PPUSH
68416: LD_VAR 0 4
68420: PPUSH
68421: CALL_OW 74
68425: PPUSH
68426: CALL 69359 0 2
// end ; end ;
68430: GO 68010
68432: POP
68433: POP
// end ;
68434: LD_VAR 0 3
68438: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68439: LD_INT 0
68441: PPUSH
68442: PPUSH
68443: PPUSH
// if not unit or IsInUnit ( unit ) then
68444: LD_VAR 0 1
68448: NOT
68449: PUSH
68450: LD_VAR 0 1
68454: PPUSH
68455: CALL_OW 310
68459: OR
68460: IFFALSE 68464
// exit ;
68462: GO 68555
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68464: LD_ADDR_VAR 0 4
68468: PUSH
68469: LD_VAR 0 1
68473: PPUSH
68474: CALL_OW 250
68478: PPUSH
68479: LD_VAR 0 2
68483: PPUSH
68484: LD_INT 1
68486: PPUSH
68487: CALL_OW 272
68491: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68492: LD_ADDR_VAR 0 5
68496: PUSH
68497: LD_VAR 0 1
68501: PPUSH
68502: CALL_OW 251
68506: PPUSH
68507: LD_VAR 0 2
68511: PPUSH
68512: LD_INT 1
68514: PPUSH
68515: CALL_OW 273
68519: ST_TO_ADDR
// if ValidHex ( x , y ) then
68520: LD_VAR 0 4
68524: PPUSH
68525: LD_VAR 0 5
68529: PPUSH
68530: CALL_OW 488
68534: IFFALSE 68555
// ComTurnXY ( unit , x , y ) ;
68536: LD_VAR 0 1
68540: PPUSH
68541: LD_VAR 0 4
68545: PPUSH
68546: LD_VAR 0 5
68550: PPUSH
68551: CALL_OW 118
// end ;
68555: LD_VAR 0 3
68559: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68560: LD_INT 0
68562: PPUSH
68563: PPUSH
// result := false ;
68564: LD_ADDR_VAR 0 3
68568: PUSH
68569: LD_INT 0
68571: ST_TO_ADDR
// if not units then
68572: LD_VAR 0 2
68576: NOT
68577: IFFALSE 68581
// exit ;
68579: GO 68626
// for i in units do
68581: LD_ADDR_VAR 0 4
68585: PUSH
68586: LD_VAR 0 2
68590: PUSH
68591: FOR_IN
68592: IFFALSE 68624
// if See ( side , i ) then
68594: LD_VAR 0 1
68598: PPUSH
68599: LD_VAR 0 4
68603: PPUSH
68604: CALL_OW 292
68608: IFFALSE 68622
// begin result := true ;
68610: LD_ADDR_VAR 0 3
68614: PUSH
68615: LD_INT 1
68617: ST_TO_ADDR
// exit ;
68618: POP
68619: POP
68620: GO 68626
// end ;
68622: GO 68591
68624: POP
68625: POP
// end ;
68626: LD_VAR 0 3
68630: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68631: LD_INT 0
68633: PPUSH
68634: PPUSH
68635: PPUSH
68636: PPUSH
// if not unit or not points then
68637: LD_VAR 0 1
68641: NOT
68642: PUSH
68643: LD_VAR 0 2
68647: NOT
68648: OR
68649: IFFALSE 68653
// exit ;
68651: GO 68743
// dist := 99999 ;
68653: LD_ADDR_VAR 0 5
68657: PUSH
68658: LD_INT 99999
68660: ST_TO_ADDR
// for i in points do
68661: LD_ADDR_VAR 0 4
68665: PUSH
68666: LD_VAR 0 2
68670: PUSH
68671: FOR_IN
68672: IFFALSE 68741
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68674: LD_ADDR_VAR 0 6
68678: PUSH
68679: LD_VAR 0 1
68683: PPUSH
68684: LD_VAR 0 4
68688: PUSH
68689: LD_INT 1
68691: ARRAY
68692: PPUSH
68693: LD_VAR 0 4
68697: PUSH
68698: LD_INT 2
68700: ARRAY
68701: PPUSH
68702: CALL_OW 297
68706: ST_TO_ADDR
// if tmpDist < dist then
68707: LD_VAR 0 6
68711: PUSH
68712: LD_VAR 0 5
68716: LESS
68717: IFFALSE 68739
// begin result := i ;
68719: LD_ADDR_VAR 0 3
68723: PUSH
68724: LD_VAR 0 4
68728: ST_TO_ADDR
// dist := tmpDist ;
68729: LD_ADDR_VAR 0 5
68733: PUSH
68734: LD_VAR 0 6
68738: ST_TO_ADDR
// end ; end ;
68739: GO 68671
68741: POP
68742: POP
// end ;
68743: LD_VAR 0 3
68747: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68748: LD_INT 0
68750: PPUSH
// uc_side := side ;
68751: LD_ADDR_OWVAR 20
68755: PUSH
68756: LD_VAR 0 1
68760: ST_TO_ADDR
// uc_nation := 3 ;
68761: LD_ADDR_OWVAR 21
68765: PUSH
68766: LD_INT 3
68768: ST_TO_ADDR
// vc_chassis := 25 ;
68769: LD_ADDR_OWVAR 37
68773: PUSH
68774: LD_INT 25
68776: ST_TO_ADDR
// vc_engine := engine_siberite ;
68777: LD_ADDR_OWVAR 39
68781: PUSH
68782: LD_INT 3
68784: ST_TO_ADDR
// vc_control := control_computer ;
68785: LD_ADDR_OWVAR 38
68789: PUSH
68790: LD_INT 3
68792: ST_TO_ADDR
// vc_weapon := 59 ;
68793: LD_ADDR_OWVAR 40
68797: PUSH
68798: LD_INT 59
68800: ST_TO_ADDR
// result := CreateVehicle ;
68801: LD_ADDR_VAR 0 5
68805: PUSH
68806: CALL_OW 45
68810: ST_TO_ADDR
// SetDir ( result , d ) ;
68811: LD_VAR 0 5
68815: PPUSH
68816: LD_VAR 0 4
68820: PPUSH
68821: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68825: LD_VAR 0 5
68829: PPUSH
68830: LD_VAR 0 2
68834: PPUSH
68835: LD_VAR 0 3
68839: PPUSH
68840: LD_INT 0
68842: PPUSH
68843: CALL_OW 48
// end ;
68847: LD_VAR 0 5
68851: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68852: LD_INT 0
68854: PPUSH
68855: PPUSH
68856: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68857: LD_ADDR_VAR 0 2
68861: PUSH
68862: LD_INT 0
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: LD_INT 0
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68880: LD_VAR 0 1
68884: NOT
68885: PUSH
68886: LD_VAR 0 1
68890: PPUSH
68891: CALL_OW 264
68895: PUSH
68896: LD_INT 12
68898: PUSH
68899: LD_INT 51
68901: PUSH
68902: LD_INT 32
68904: PUSH
68905: LD_INT 89
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: IN
68914: NOT
68915: OR
68916: IFFALSE 68920
// exit ;
68918: GO 69018
// for i := 1 to 3 do
68920: LD_ADDR_VAR 0 3
68924: PUSH
68925: DOUBLE
68926: LD_INT 1
68928: DEC
68929: ST_TO_ADDR
68930: LD_INT 3
68932: PUSH
68933: FOR_TO
68934: IFFALSE 69016
// begin tmp := GetCargo ( cargo , i ) ;
68936: LD_ADDR_VAR 0 4
68940: PUSH
68941: LD_VAR 0 1
68945: PPUSH
68946: LD_VAR 0 3
68950: PPUSH
68951: CALL_OW 289
68955: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68956: LD_ADDR_VAR 0 2
68960: PUSH
68961: LD_VAR 0 2
68965: PPUSH
68966: LD_VAR 0 3
68970: PPUSH
68971: LD_VAR 0 4
68975: PPUSH
68976: CALL_OW 1
68980: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68981: LD_ADDR_VAR 0 2
68985: PUSH
68986: LD_VAR 0 2
68990: PPUSH
68991: LD_INT 4
68993: PPUSH
68994: LD_VAR 0 2
68998: PUSH
68999: LD_INT 4
69001: ARRAY
69002: PUSH
69003: LD_VAR 0 4
69007: PLUS
69008: PPUSH
69009: CALL_OW 1
69013: ST_TO_ADDR
// end ;
69014: GO 68933
69016: POP
69017: POP
// end ;
69018: LD_VAR 0 2
69022: RET
// export function Length ( array ) ; begin
69023: LD_INT 0
69025: PPUSH
// result := array + 0 ;
69026: LD_ADDR_VAR 0 2
69030: PUSH
69031: LD_VAR 0 1
69035: PUSH
69036: LD_INT 0
69038: PLUS
69039: ST_TO_ADDR
// end ;
69040: LD_VAR 0 2
69044: RET
// export function PrepareArray ( array ) ; begin
69045: LD_INT 0
69047: PPUSH
// result := array diff 0 ;
69048: LD_ADDR_VAR 0 2
69052: PUSH
69053: LD_VAR 0 1
69057: PUSH
69058: LD_INT 0
69060: DIFF
69061: ST_TO_ADDR
// if not result [ 1 ] then
69062: LD_VAR 0 2
69066: PUSH
69067: LD_INT 1
69069: ARRAY
69070: NOT
69071: IFFALSE 69091
// result := Delete ( result , 1 ) ;
69073: LD_ADDR_VAR 0 2
69077: PUSH
69078: LD_VAR 0 2
69082: PPUSH
69083: LD_INT 1
69085: PPUSH
69086: CALL_OW 3
69090: ST_TO_ADDR
// end ;
69091: LD_VAR 0 2
69095: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69096: LD_INT 0
69098: PPUSH
69099: PPUSH
69100: PPUSH
69101: PPUSH
// sibRocketRange := 25 ;
69102: LD_ADDR_VAR 0 6
69106: PUSH
69107: LD_INT 25
69109: ST_TO_ADDR
// result := false ;
69110: LD_ADDR_VAR 0 4
69114: PUSH
69115: LD_INT 0
69117: ST_TO_ADDR
// for i := 0 to 5 do
69118: LD_ADDR_VAR 0 5
69122: PUSH
69123: DOUBLE
69124: LD_INT 0
69126: DEC
69127: ST_TO_ADDR
69128: LD_INT 5
69130: PUSH
69131: FOR_TO
69132: IFFALSE 69199
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69134: LD_VAR 0 1
69138: PPUSH
69139: LD_VAR 0 5
69143: PPUSH
69144: LD_VAR 0 6
69148: PPUSH
69149: CALL_OW 272
69153: PPUSH
69154: LD_VAR 0 2
69158: PPUSH
69159: LD_VAR 0 5
69163: PPUSH
69164: LD_VAR 0 6
69168: PPUSH
69169: CALL_OW 273
69173: PPUSH
69174: LD_VAR 0 3
69178: PPUSH
69179: CALL_OW 309
69183: IFFALSE 69197
// begin result := true ;
69185: LD_ADDR_VAR 0 4
69189: PUSH
69190: LD_INT 1
69192: ST_TO_ADDR
// exit ;
69193: POP
69194: POP
69195: GO 69201
// end ;
69197: GO 69131
69199: POP
69200: POP
// end ;
69201: LD_VAR 0 4
69205: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69206: LD_INT 0
69208: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69209: LD_VAR 0 1
69213: PPUSH
69214: LD_VAR 0 2
69218: PPUSH
69219: LD_INT 0
69221: PPUSH
69222: LD_INT 0
69224: PPUSH
69225: LD_INT 1
69227: PPUSH
69228: LD_INT 0
69230: PPUSH
69231: CALL_OW 587
// end ;
69235: LD_VAR 0 3
69239: RET
// export function CenterOnNow ( unit ) ; begin
69240: LD_INT 0
69242: PPUSH
// result := IsInUnit ( unit ) ;
69243: LD_ADDR_VAR 0 2
69247: PUSH
69248: LD_VAR 0 1
69252: PPUSH
69253: CALL_OW 310
69257: ST_TO_ADDR
// if not result then
69258: LD_VAR 0 2
69262: NOT
69263: IFFALSE 69275
// result := unit ;
69265: LD_ADDR_VAR 0 2
69269: PUSH
69270: LD_VAR 0 1
69274: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69275: LD_VAR 0 1
69279: PPUSH
69280: CALL_OW 87
// end ;
69284: LD_VAR 0 2
69288: RET
// export function ComMoveHex ( unit , hex ) ; begin
69289: LD_INT 0
69291: PPUSH
// if not hex then
69292: LD_VAR 0 2
69296: NOT
69297: IFFALSE 69301
// exit ;
69299: GO 69354
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69301: LD_VAR 0 2
69305: PUSH
69306: LD_INT 1
69308: ARRAY
69309: PPUSH
69310: LD_VAR 0 2
69314: PUSH
69315: LD_INT 2
69317: ARRAY
69318: PPUSH
69319: CALL_OW 428
69323: IFFALSE 69327
// exit ;
69325: GO 69354
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69327: LD_VAR 0 1
69331: PPUSH
69332: LD_VAR 0 2
69336: PUSH
69337: LD_INT 1
69339: ARRAY
69340: PPUSH
69341: LD_VAR 0 2
69345: PUSH
69346: LD_INT 2
69348: ARRAY
69349: PPUSH
69350: CALL_OW 111
// end ;
69354: LD_VAR 0 3
69358: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69359: LD_INT 0
69361: PPUSH
69362: PPUSH
69363: PPUSH
// if not unit or not enemy then
69364: LD_VAR 0 1
69368: NOT
69369: PUSH
69370: LD_VAR 0 2
69374: NOT
69375: OR
69376: IFFALSE 69380
// exit ;
69378: GO 69504
// x := GetX ( enemy ) ;
69380: LD_ADDR_VAR 0 4
69384: PUSH
69385: LD_VAR 0 2
69389: PPUSH
69390: CALL_OW 250
69394: ST_TO_ADDR
// y := GetY ( enemy ) ;
69395: LD_ADDR_VAR 0 5
69399: PUSH
69400: LD_VAR 0 2
69404: PPUSH
69405: CALL_OW 251
69409: ST_TO_ADDR
// if ValidHex ( x , y ) then
69410: LD_VAR 0 4
69414: PPUSH
69415: LD_VAR 0 5
69419: PPUSH
69420: CALL_OW 488
69424: IFFALSE 69504
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
69426: LD_VAR 0 2
69430: PPUSH
69431: CALL_OW 247
69435: PUSH
69436: LD_INT 3
69438: PUSH
69439: LD_INT 2
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: IN
69446: PUSH
69447: LD_VAR 0 1
69451: PPUSH
69452: CALL_OW 255
69456: PPUSH
69457: LD_VAR 0 2
69461: PPUSH
69462: CALL_OW 292
69466: AND
69467: IFFALSE 69485
// ComAttackUnit ( unit , enemy ) else
69469: LD_VAR 0 1
69473: PPUSH
69474: LD_VAR 0 2
69478: PPUSH
69479: CALL_OW 115
69483: GO 69504
// ComAgressiveMove ( unit , x , y ) ;
69485: LD_VAR 0 1
69489: PPUSH
69490: LD_VAR 0 4
69494: PPUSH
69495: LD_VAR 0 5
69499: PPUSH
69500: CALL_OW 114
// end ; end_of_file
69504: LD_VAR 0 3
69508: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69509: LD_VAR 0 1
69513: PUSH
69514: LD_INT 200
69516: DOUBLE
69517: GREATEREQUAL
69518: IFFALSE 69526
69520: LD_INT 299
69522: DOUBLE
69523: LESSEQUAL
69524: IFTRUE 69528
69526: GO 69560
69528: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69529: LD_VAR 0 1
69533: PPUSH
69534: LD_VAR 0 2
69538: PPUSH
69539: LD_VAR 0 3
69543: PPUSH
69544: LD_VAR 0 4
69548: PPUSH
69549: LD_VAR 0 5
69553: PPUSH
69554: CALL 23233 0 5
69558: GO 69637
69560: LD_INT 300
69562: DOUBLE
69563: GREATEREQUAL
69564: IFFALSE 69572
69566: LD_INT 399
69568: DOUBLE
69569: LESSEQUAL
69570: IFTRUE 69574
69572: GO 69636
69574: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69575: LD_VAR 0 1
69579: PPUSH
69580: LD_VAR 0 2
69584: PPUSH
69585: LD_VAR 0 3
69589: PPUSH
69590: LD_VAR 0 4
69594: PPUSH
69595: LD_VAR 0 5
69599: PPUSH
69600: LD_VAR 0 6
69604: PPUSH
69605: LD_VAR 0 7
69609: PPUSH
69610: LD_VAR 0 8
69614: PPUSH
69615: LD_VAR 0 9
69619: PPUSH
69620: LD_VAR 0 10
69624: PPUSH
69625: LD_VAR 0 11
69629: PPUSH
69630: CALL 19558 0 11
69634: GO 69637
69636: POP
// end ;
69637: PPOPN 11
69639: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69640: LD_VAR 0 1
69644: PPUSH
69645: LD_VAR 0 2
69649: PPUSH
69650: LD_VAR 0 3
69654: PPUSH
69655: LD_VAR 0 4
69659: PPUSH
69660: LD_VAR 0 5
69664: PPUSH
69665: CALL 22969 0 5
// end ; end_of_file
69669: PPOPN 5
69671: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69672: LD_VAR 0 1
69676: PPUSH
69677: LD_VAR 0 2
69681: PPUSH
69682: LD_VAR 0 3
69686: PPUSH
69687: LD_VAR 0 4
69691: PPUSH
69692: LD_VAR 0 5
69696: PPUSH
69697: LD_VAR 0 6
69701: PPUSH
69702: CALL 7210 0 6
// end ;
69706: PPOPN 6
69708: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69709: LD_INT 0
69711: PPUSH
// begin if not units then
69712: LD_VAR 0 1
69716: NOT
69717: IFFALSE 69721
// exit ;
69719: GO 69721
// end ;
69721: PPOPN 7
69723: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69724: CALL 7114 0 0
// end ;
69728: PPOPN 1
69730: END
