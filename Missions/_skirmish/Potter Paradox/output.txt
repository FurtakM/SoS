// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 25 0 0
// InitGlobalVariables ;
   8: CALL 7044 0 0
// PrepareLegion ;
  12: CALL 234 0 0
// PrepareAllies ;
  16: CALL 2225 0 0
// Action ;
  20: CALL 4051 0 0
// end ;
  24: END
// function InitGame ; begin
  25: LD_INT 0
  27: PPUSH
// RandomizeAll ;
  28: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  32: LD_ADDR_OWVAR 67
  36: PUSH
  37: LD_INT 0
  39: PPUSH
  40: CALL_OW 426
  44: ST_TO_ADDR
// if not Difficulty then
  45: LD_OWVAR 67
  49: NOT
  50: IFFALSE 60
// Difficulty := 2 ;
  52: LD_ADDR_OWVAR 67
  56: PUSH
  57: LD_INT 2
  59: ST_TO_ADDR
// InitVariables ;
  60: CALL 73 0 0
// SetDiplomacy ;
  64: CALL 186 0 0
// end ; end_of_file
  68: LD_VAR 0 1
  72: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , player_res_art , time_res_art , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave , player_artifact_ready , artifact_progress ; export function InitVariables ; begin
  73: LD_INT 0
  75: PPUSH
// points := 0 ;
  76: LD_ADDR_EXP 10
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// alert := false ;
  84: LD_ADDR_EXP 6
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// game_over := false ;
  92: LD_ADDR_EXP 7
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// wave_time := 0 0$00 ;
 100: LD_ADDR_EXP 11
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// bonus_active := false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// ignore_wave := false ;
 116: LD_ADDR_EXP 15
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// player_res_art := false ;
 124: LD_ADDR_EXP 8
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// player_artifact_ready := false ;
 132: LD_ADDR_EXP 16
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// time_res_art := [ 25 25$00 , 32 32$00 , 40 40$00 ] [ Difficulty ] ;
 140: LD_ADDR_EXP 9
 144: PUSH
 145: LD_INT 52500
 147: PUSH
 148: LD_INT 67200
 150: PUSH
 151: LD_INT 84000
 153: PUSH
 154: EMPTY
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// bonus_num := 0 ;
 165: LD_ADDR_EXP 14
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// artifact_progress := 0 ;
 173: LD_ADDR_EXP 17
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// export function SetDiplomacy ; begin
 186: LD_INT 0
 188: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 189: LD_INT 92
 191: PPUSH
 192: LD_INT 48
 194: PPUSH
 195: LD_INT 8
 197: PPUSH
 198: LD_INT 32796
 200: NEG
 201: PPUSH
 202: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 206: LD_INT 92
 208: PPUSH
 209: LD_INT 48
 211: PPUSH
 212: LD_INT 8
 214: PPUSH
 215: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 219: LD_INT 5
 221: PPUSH
 222: LD_INT 8
 224: PPUSH
 225: CALL_OW 343
// end ; end_of_file
 229: LD_VAR 0 1
 233: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 234: LD_INT 0
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
 247: PPUSH
 248: PPUSH
 249: PPUSH
 250: PPUSH
 251: PPUSH
 252: PPUSH
 253: PPUSH
// uc_side := 2 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 2
 261: ST_TO_ADDR
// uc_nation := nation_arabian ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 2
 269: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 270: LD_INT 1
 272: PPUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 6
 278: PPUSH
 279: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 283: LD_ADDR_OWVAR 26
 287: PUSH
 288: LD_STRING Nicolas Vervecken
 290: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 291: LD_ADDR_OWVAR 33
 295: PUSH
 296: LD_STRING SecondCharsGal
 298: ST_TO_ADDR
// hc_face_number := 3 ;
 299: LD_ADDR_OWVAR 34
 303: PUSH
 304: LD_INT 3
 306: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 307: LD_ADDR_OWVAR 29
 311: PUSH
 312: LD_INT 11
 314: PUSH
 315: LD_INT 10
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: ST_TO_ADDR
// Vervecken := CreateHuman ;
 322: LD_ADDR_EXP 12
 326: PUSH
 327: CALL_OW 44
 331: ST_TO_ADDR
// InitHc ;
 332: CALL_OW 19
// uc_side := 8 ;
 336: LD_ADDR_OWVAR 20
 340: PUSH
 341: LD_INT 8
 343: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 344: LD_INT 23
 346: PPUSH
 347: CALL_OW 274
 351: PPUSH
 352: LD_INT 1
 354: PPUSH
 355: LD_INT 4000
 357: PUSH
 358: LD_INT 2500
 360: PUSH
 361: LD_INT 1250
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: PUSH
 369: LD_OWVAR 67
 373: ARRAY
 374: PPUSH
 375: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 379: LD_INT 23
 381: PPUSH
 382: CALL_OW 274
 386: PPUSH
 387: LD_INT 2
 389: PPUSH
 390: LD_INT 300
 392: PPUSH
 393: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 397: LD_INT 23
 399: PPUSH
 400: CALL_OW 274
 404: PPUSH
 405: LD_INT 3
 407: PPUSH
 408: LD_INT 100
 410: PUSH
 411: LD_INT 50
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: PPUSH
 428: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 432: LD_ADDR_VAR 0 14
 436: PUSH
 437: LD_INT 23
 439: PPUSH
 440: CALL_OW 250
 444: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 445: LD_ADDR_VAR 0 15
 449: PUSH
 450: LD_INT 23
 452: PPUSH
 453: CALL_OW 251
 457: ST_TO_ADDR
// team := [ ] ;
 458: LD_ADDR_VAR 0 7
 462: PUSH
 463: EMPTY
 464: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 465: LD_ADDR_VAR 0 8
 469: PUSH
 470: LD_INT 9
 472: PUSH
 473: LD_INT 8
 475: PUSH
 476: LD_INT 7
 478: PUSH
 479: EMPTY
 480: LIST
 481: LIST
 482: LIST
 483: PUSH
 484: LD_OWVAR 67
 488: ARRAY
 489: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 490: LD_ADDR_VAR 0 9
 494: PUSH
 495: LD_INT 11
 497: PUSH
 498: LD_INT 9
 500: PUSH
 501: LD_INT 8
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: PUSH
 509: LD_OWVAR 67
 513: ARRAY
 514: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 515: LD_ADDR_VAR 0 10
 519: PUSH
 520: LD_INT 3
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: LD_INT 2
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: LD_OWVAR 67
 538: ARRAY
 539: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 540: LD_ADDR_VAR 0 11
 544: PUSH
 545: LD_INT 5
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: LD_INT 3
 553: PUSH
 554: EMPTY
 555: LIST
 556: LIST
 557: LIST
 558: PUSH
 559: LD_OWVAR 67
 563: ARRAY
 564: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 565: LD_ADDR_VAR 0 12
 569: PUSH
 570: LD_INT 3
 572: PUSH
 573: LD_INT 2
 575: PUSH
 576: LD_INT 2
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: PUSH
 584: LD_OWVAR 67
 588: ARRAY
 589: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 590: LD_ADDR_VAR 0 13
 594: PUSH
 595: LD_INT 6
 597: PUSH
 598: LD_INT 5
 600: PUSH
 601: LD_INT 4
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: LIST
 608: PUSH
 609: LD_OWVAR 67
 613: ARRAY
 614: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 615: LD_ADDR_VAR 0 18
 619: PUSH
 620: LD_INT 13
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: LD_INT 26
 631: PUSH
 632: EMPTY
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 14
 640: PUSH
 641: LD_INT 3
 643: PUSH
 644: LD_INT 1
 646: PUSH
 647: LD_INT 25
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: PUSH
 656: LD_INT 14
 658: PUSH
 659: LD_INT 3
 661: PUSH
 662: LD_INT 5
 664: PUSH
 665: LD_INT 32
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 14
 676: PUSH
 677: LD_INT 3
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: LD_INT 31
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: LD_INT 14
 694: PUSH
 695: LD_INT 3
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 24
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: PUSH
 710: LD_INT 14
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 25
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 13
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 24
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 755: LD_ADDR_VAR 0 2
 759: PUSH
 760: DOUBLE
 761: LD_INT 1
 763: DEC
 764: ST_TO_ADDR
 765: LD_VAR 0 18
 769: PUSH
 770: LD_OWVAR 67
 774: MINUS
 775: PUSH
 776: LD_INT 1
 778: PLUS
 779: PUSH
 780: FOR_TO
 781: IFFALSE 910
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 783: LD_ADDR_OWVAR 37
 787: PUSH
 788: LD_VAR 0 18
 792: PUSH
 793: LD_VAR 0 2
 797: ARRAY
 798: PUSH
 799: LD_INT 1
 801: ARRAY
 802: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 803: LD_ADDR_OWVAR 39
 807: PUSH
 808: LD_VAR 0 18
 812: PUSH
 813: LD_VAR 0 2
 817: ARRAY
 818: PUSH
 819: LD_INT 2
 821: ARRAY
 822: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 823: LD_ADDR_OWVAR 38
 827: PUSH
 828: LD_VAR 0 18
 832: PUSH
 833: LD_VAR 0 2
 837: ARRAY
 838: PUSH
 839: LD_INT 3
 841: ARRAY
 842: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 843: LD_ADDR_OWVAR 40
 847: PUSH
 848: LD_VAR 0 18
 852: PUSH
 853: LD_VAR 0 2
 857: ARRAY
 858: PUSH
 859: LD_INT 4
 861: ARRAY
 862: ST_TO_ADDR
// un := CreateVehicle ;
 863: LD_ADDR_VAR 0 6
 867: PUSH
 868: CALL_OW 45
 872: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 873: LD_VAR 0 6
 877: PPUSH
 878: LD_INT 0
 880: PPUSH
 881: LD_INT 5
 883: PPUSH
 884: CALL_OW 12
 888: PPUSH
 889: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 893: LD_VAR 0 6
 897: PPUSH
 898: LD_INT 7
 900: PPUSH
 901: LD_INT 0
 903: PPUSH
 904: CALL_OW 49
// end ;
 908: GO 780
 910: POP
 911: POP
// for i = 1 to ape_num do
 912: LD_ADDR_VAR 0 2
 916: PUSH
 917: DOUBLE
 918: LD_INT 1
 920: DEC
 921: ST_TO_ADDR
 922: LD_VAR 0 13
 926: PUSH
 927: FOR_TO
 928: IFFALSE 995
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 930: LD_INT 0
 932: PPUSH
 933: LD_INT 16
 935: PUSH
 936: LD_INT 15
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PUSH
 943: LD_INT 1
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: CALL_OW 12
 953: ARRAY
 954: PPUSH
 955: LD_VAR 0 8
 959: PPUSH
 960: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 964: LD_ADDR_VAR 0 7
 968: PUSH
 969: LD_VAR 0 7
 973: PPUSH
 974: LD_VAR 0 7
 978: PUSH
 979: LD_INT 1
 981: PLUS
 982: PPUSH
 983: CALL_OW 44
 987: PPUSH
 988: CALL_OW 2
 992: ST_TO_ADDR
// end ;
 993: GO 927
 995: POP
 996: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 997: LD_INT 1
 999: PPUSH
1000: LD_INT 1
1002: PPUSH
1003: LD_VAR 0 8
1007: PPUSH
1008: CALL_OW 380
// l1 := CreateHuman ;
1012: LD_ADDR_EXP 2
1016: PUSH
1017: CALL_OW 44
1021: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
1022: LD_EXP 2
1026: PPUSH
1027: LD_INT 23
1029: PPUSH
1030: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
1034: LD_INT 1
1036: PPUSH
1037: LD_INT 1
1039: PPUSH
1040: LD_VAR 0 8
1044: PPUSH
1045: CALL_OW 380
// l2 := CreateHuman ;
1049: LD_ADDR_EXP 3
1053: PUSH
1054: CALL_OW 44
1058: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1059: LD_EXP 3
1063: PPUSH
1064: LD_INT 23
1066: PPUSH
1067: CALL_OW 52
// for class = 1 to 4 do
1071: LD_ADDR_VAR 0 4
1075: PUSH
1076: DOUBLE
1077: LD_INT 1
1079: DEC
1080: ST_TO_ADDR
1081: LD_INT 4
1083: PUSH
1084: FOR_TO
1085: IFFALSE 1184
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1087: LD_ADDR_VAR 0 2
1091: PUSH
1092: DOUBLE
1093: LD_INT 1
1095: DEC
1096: ST_TO_ADDR
1097: LD_VAR 0 9
1101: PUSH
1102: LD_VAR 0 10
1106: PUSH
1107: LD_VAR 0 11
1111: PUSH
1112: LD_VAR 0 12
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: LIST
1122: PUSH
1123: LD_VAR 0 4
1127: ARRAY
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1180
// begin PrepareHuman ( false , class , skill ) ;
1132: LD_INT 0
1134: PPUSH
1135: LD_VAR 0 4
1139: PPUSH
1140: LD_VAR 0 8
1144: PPUSH
1145: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1149: LD_ADDR_VAR 0 7
1153: PUSH
1154: LD_VAR 0 7
1158: PPUSH
1159: LD_VAR 0 7
1163: PUSH
1164: LD_INT 1
1166: PLUS
1167: PPUSH
1168: CALL_OW 44
1172: PPUSH
1173: CALL_OW 2
1177: ST_TO_ADDR
// end ;
1178: GO 1129
1180: POP
1181: POP
1182: GO 1084
1184: POP
1185: POP
// for i in team do
1186: LD_ADDR_VAR 0 2
1190: PUSH
1191: LD_VAR 0 7
1195: PUSH
1196: FOR_IN
1197: IFFALSE 1673
// begin b := 0 ;
1199: LD_ADDR_VAR 0 5
1203: PUSH
1204: LD_INT 0
1206: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1207: LD_VAR 0 2
1211: PPUSH
1212: CALL_OW 257
1216: PUSH
1217: LD_INT 1
1219: DOUBLE
1220: EQUAL
1221: IFTRUE 1225
1223: GO 1332
1225: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1226: LD_ADDR_VAR 0 5
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_OWVAR 20
1238: PUSH
1239: EMPTY
1240: LIST
1241: LIST
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 30
1248: PUSH
1249: LD_INT 32
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PUSH
1256: LD_INT 30
1258: PUSH
1259: LD_INT 31
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 58
1273: PUSH
1274: EMPTY
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// if not b then
1287: LD_VAR 0 5
1291: NOT
1292: IFFALSE 1330
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1294: LD_ADDR_VAR 0 5
1298: PUSH
1299: LD_INT 22
1301: PUSH
1302: LD_OWVAR 20
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 30
1313: PUSH
1314: LD_INT 5
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: PPUSH
1325: CALL_OW 69
1329: ST_TO_ADDR
// end ; class_engineer :
1330: GO 1571
1332: LD_INT 2
1334: DOUBLE
1335: EQUAL
1336: IFTRUE 1340
1338: GO 1379
1340: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1341: LD_ADDR_VAR 0 5
1345: PUSH
1346: LD_INT 22
1348: PUSH
1349: LD_OWVAR 20
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 30
1360: PUSH
1361: LD_INT 1
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 69
1376: ST_TO_ADDR
1377: GO 1571
1379: LD_INT 3
1381: DOUBLE
1382: EQUAL
1383: IFTRUE 1387
1385: GO 1476
1387: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1388: LD_ADDR_VAR 0 5
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: LD_OWVAR 20
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 21
1407: PUSH
1408: LD_INT 2
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: PUSH
1415: LD_INT 58
1417: PUSH
1418: EMPTY
1419: LIST
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: PPUSH
1426: CALL_OW 69
1430: ST_TO_ADDR
// if not b then
1431: LD_VAR 0 5
1435: NOT
1436: IFFALSE 1474
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1438: LD_ADDR_VAR 0 5
1442: PUSH
1443: LD_INT 22
1445: PUSH
1446: LD_OWVAR 20
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 30
1457: PUSH
1458: LD_INT 3
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PPUSH
1469: CALL_OW 69
1473: ST_TO_ADDR
// end ; class_scientistic :
1474: GO 1571
1476: LD_INT 4
1478: DOUBLE
1479: EQUAL
1480: IFTRUE 1484
1482: GO 1523
1484: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1485: LD_ADDR_VAR 0 5
1489: PUSH
1490: LD_INT 22
1492: PUSH
1493: LD_OWVAR 20
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 30
1504: PUSH
1505: LD_INT 8
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PPUSH
1516: CALL_OW 69
1520: ST_TO_ADDR
// end ; class_apeman_soldier :
1521: GO 1571
1523: LD_INT 15
1525: DOUBLE
1526: EQUAL
1527: IFTRUE 1531
1529: GO 1570
1531: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1532: LD_ADDR_VAR 0 5
1536: PUSH
1537: LD_INT 22
1539: PUSH
1540: LD_OWVAR 20
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 30
1551: PUSH
1552: LD_INT 5
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PPUSH
1563: CALL_OW 69
1567: ST_TO_ADDR
1568: GO 1571
1570: POP
// if b then
1571: LD_VAR 0 5
1575: IFFALSE 1646
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1577: LD_VAR 0 5
1581: PUSH
1582: LD_INT 1
1584: ARRAY
1585: PPUSH
1586: CALL_OW 266
1590: PUSH
1591: LD_INT 31
1593: EQUAL
1594: IFFALSE 1616
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1596: LD_VAR 0 2
1600: PPUSH
1601: LD_VAR 0 5
1605: PUSH
1606: LD_INT 1
1608: ARRAY
1609: PPUSH
1610: CALL 4814 0 2
1614: GO 1644
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1616: LD_VAR 0 2
1620: PPUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_INT 1
1628: PPUSH
1629: LD_VAR 0 5
1633: PPUSH
1634: CALL_OW 12
1638: ARRAY
1639: PPUSH
1640: CALL_OW 52
1644: GO 1671
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1646: LD_VAR 0 2
1650: PPUSH
1651: LD_VAR 0 14
1655: PPUSH
1656: LD_VAR 0 15
1660: PPUSH
1661: LD_INT 15
1663: PPUSH
1664: LD_INT 0
1666: PPUSH
1667: CALL_OW 50
// end ;
1671: GO 1196
1673: POP
1674: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1675: LD_ADDR_VAR 0 16
1679: PUSH
1680: LD_INT 26
1682: PUSH
1683: LD_INT 3
1685: PUSH
1686: LD_INT 2
1688: PUSH
1689: LD_INT 1
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: PUSH
1697: LD_OWVAR 67
1701: ARRAY
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 5
1712: PUSH
1713: LD_INT 4
1715: PUSH
1716: LD_INT 3
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_OWVAR 67
1728: ARRAY
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 24
1736: PUSH
1737: LD_INT 5
1739: PUSH
1740: LD_INT 5
1742: PUSH
1743: LD_INT 4
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: LIST
1750: PUSH
1751: LD_OWVAR 67
1755: ARRAY
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: LD_INT 30
1763: PUSH
1764: LD_INT 2
1766: PUSH
1767: LD_INT 1
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: PUSH
1778: LD_OWVAR 67
1782: ARRAY
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1794: LD_ADDR_VAR 0 2
1798: PUSH
1799: LD_INT 22
1801: PUSH
1802: LD_OWVAR 20
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PUSH
1811: LD_INT 30
1813: PUSH
1814: LD_INT 32
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PPUSH
1825: CALL_OW 69
1829: PUSH
1830: FOR_IN
1831: IFFALSE 2004
// begin if weapons then
1833: LD_VAR 0 16
1837: IFFALSE 1961
// begin k := rand ( 1 , weapons ) ;
1839: LD_ADDR_VAR 0 3
1843: PUSH
1844: LD_INT 1
1846: PPUSH
1847: LD_VAR 0 16
1851: PPUSH
1852: CALL_OW 12
1856: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1857: LD_ADDR_VAR 0 17
1861: PUSH
1862: LD_VAR 0 16
1866: PUSH
1867: LD_VAR 0 3
1871: ARRAY
1872: PUSH
1873: LD_INT 1
1875: ARRAY
1876: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1877: LD_ADDR_VAR 0 16
1881: PUSH
1882: LD_VAR 0 16
1886: PPUSH
1887: LD_VAR 0 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: LD_VAR 0 16
1899: PUSH
1900: LD_VAR 0 3
1904: ARRAY
1905: PUSH
1906: LD_INT 2
1908: ARRAY
1909: PUSH
1910: LD_INT 1
1912: MINUS
1913: PPUSH
1914: CALL 4906 0 4
1918: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1919: LD_VAR 0 16
1923: PUSH
1924: LD_VAR 0 3
1928: ARRAY
1929: PUSH
1930: LD_INT 2
1932: ARRAY
1933: PUSH
1934: LD_INT 0
1936: EQUAL
1937: IFFALSE 1959
// weapons := Delete ( weapons , k ) ;
1939: LD_ADDR_VAR 0 16
1943: PUSH
1944: LD_VAR 0 16
1948: PPUSH
1949: LD_VAR 0 3
1953: PPUSH
1954: CALL_OW 3
1958: ST_TO_ADDR
// end else
1959: GO 1988
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1961: LD_ADDR_VAR 0 17
1965: PUSH
1966: LD_INT 27
1968: PUSH
1969: LD_INT 23
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: CALL_OW 12
1986: ARRAY
1987: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: LD_VAR 0 17
1997: PPUSH
1998: CALL_OW 431
// end ;
2002: GO 1830
2004: POP
2005: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_VAR 0 8
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: CALL_OW 380
// hc_gallery := potter ;
2025: LD_ADDR_OWVAR 33
2029: PUSH
2030: LD_STRING potter
2032: ST_TO_ADDR
// hc_face_number := 1 ;
2033: LD_ADDR_OWVAR 34
2037: PUSH
2038: LD_INT 1
2040: ST_TO_ADDR
// hc_importance := 100 ;
2041: LD_ADDR_OWVAR 32
2045: PUSH
2046: LD_INT 100
2048: ST_TO_ADDR
// hc_name := Mike Gerste ;
2049: LD_ADDR_OWVAR 26
2053: PUSH
2054: LD_STRING Mike Gerste
2056: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2057: LD_ADDR_OWVAR 29
2061: PUSH
2062: LD_INT 10
2064: PUSH
2065: LD_INT 11
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: ST_TO_ADDR
// legion_commander := CreateHuman ;
2072: LD_ADDR_EXP 1
2076: PUSH
2077: CALL_OW 44
2081: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2082: LD_EXP 1
2086: PPUSH
2087: LD_INT 23
2089: PPUSH
2090: CALL_OW 52
// uc_side := 5 ;
2094: LD_ADDR_OWVAR 20
2098: PUSH
2099: LD_INT 5
2101: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2102: LD_INT 1
2104: PPUSH
2105: LD_INT 4
2107: PPUSH
2108: LD_VAR 0 8
2112: PPUSH
2113: CALL_OW 380
// hc_gallery := potter ;
2117: LD_ADDR_OWVAR 33
2121: PUSH
2122: LD_STRING potter
2124: ST_TO_ADDR
// hc_face_number := 2 ;
2125: LD_ADDR_OWVAR 34
2129: PUSH
2130: LD_INT 2
2132: ST_TO_ADDR
// hc_importance := 0 ;
2133: LD_ADDR_OWVAR 32
2137: PUSH
2138: LD_INT 0
2140: ST_TO_ADDR
// hc_name := George Potter ;
2141: LD_ADDR_OWVAR 26
2145: PUSH
2146: LD_STRING George Potter
2148: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2149: LD_ADDR_OWVAR 29
2153: PUSH
2154: LD_INT 12
2156: PUSH
2157: LD_INT 9
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: ST_TO_ADDR
// potter := CreateHuman ;
2164: LD_ADDR_EXP 4
2168: PUSH
2169: CALL_OW 44
2173: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2174: LD_EXP 4
2178: PPUSH
2179: LD_INT 4
2181: PPUSH
2182: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2186: LD_EXP 4
2190: PPUSH
2191: LD_INT 103
2193: PPUSH
2194: LD_INT 45
2196: PPUSH
2197: LD_INT 0
2199: PPUSH
2200: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2204: LD_EXP 4
2208: PPUSH
2209: LD_INT 23
2211: PPUSH
2212: CALL_OW 119
// InitHc ( ) ;
2216: CALL_OW 19
// end ; end_of_file
2220: LD_VAR 0 1
2224: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
// uc_side := 5 ;
2232: LD_ADDR_OWVAR 20
2236: PUSH
2237: LD_INT 5
2239: ST_TO_ADDR
// uc_nation := nation_arabian ;
2240: LD_ADDR_OWVAR 21
2244: PUSH
2245: LD_INT 2
2247: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2248: LD_ADDR_VAR 0 4
2252: PUSH
2253: LD_INT 22
2255: PUSH
2256: LD_OWVAR 20
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 30
2267: PUSH
2268: LD_INT 5
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: PPUSH
2279: CALL_OW 69
2283: ST_TO_ADDR
// for i = 1 to 3 do
2284: LD_ADDR_VAR 0 2
2288: PUSH
2289: DOUBLE
2290: LD_INT 1
2292: DEC
2293: ST_TO_ADDR
2294: LD_INT 3
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2336
// begin PrepareHuman ( false , 2 , 6 ) ;
2300: LD_INT 0
2302: PPUSH
2303: LD_INT 2
2305: PPUSH
2306: LD_INT 6
2308: PPUSH
2309: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2313: CALL_OW 44
2317: PPUSH
2318: LD_INT 27
2320: PPUSH
2321: LD_INT 22
2323: PPUSH
2324: LD_INT 5
2326: PPUSH
2327: LD_INT 0
2329: PPUSH
2330: CALL_OW 50
// end ;
2334: GO 2297
2336: POP
2337: POP
// for i = 1 to 3 do
2338: LD_ADDR_VAR 0 2
2342: PUSH
2343: DOUBLE
2344: LD_INT 1
2346: DEC
2347: ST_TO_ADDR
2348: LD_INT 3
2350: PUSH
2351: FOR_TO
2352: IFFALSE 2387
// begin PrepareHuman ( false , 1 , 6 ) ;
2354: LD_INT 0
2356: PPUSH
2357: LD_INT 1
2359: PPUSH
2360: LD_INT 6
2362: PPUSH
2363: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2367: CALL_OW 44
2371: PPUSH
2372: LD_VAR 0 4
2376: PUSH
2377: LD_INT 1
2379: ARRAY
2380: PPUSH
2381: CALL_OW 52
// end ;
2385: GO 2351
2387: POP
2388: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2389: LD_ADDR_VAR 0 2
2393: PUSH
2394: LD_INT 22
2396: PUSH
2397: LD_OWVAR 20
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 2
2408: PUSH
2409: LD_INT 30
2411: PUSH
2412: LD_INT 31
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: PUSH
2419: LD_INT 30
2421: PUSH
2422: LD_INT 32
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PPUSH
2438: CALL_OW 69
2442: PUSH
2443: FOR_IN
2444: IFFALSE 2531
// begin PrepareHuman ( false , 1 , 6 ) ;
2446: LD_INT 0
2448: PPUSH
2449: LD_INT 1
2451: PPUSH
2452: LD_INT 6
2454: PPUSH
2455: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2459: CALL_OW 44
2463: PPUSH
2464: LD_VAR 0 2
2468: PPUSH
2469: CALL 4814 0 2
// if GetBType ( i ) = b_bunker then
2473: LD_VAR 0 2
2477: PPUSH
2478: CALL_OW 266
2482: PUSH
2483: LD_INT 32
2485: EQUAL
2486: IFFALSE 2529
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2488: LD_VAR 0 2
2492: PPUSH
2493: LD_INT 27
2495: PUSH
2496: LD_INT 25
2498: PUSH
2499: LD_INT 24
2501: PUSH
2502: LD_INT 28
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: PUSH
2511: LD_VAR 0 2
2515: PUSH
2516: LD_INT 4
2518: MOD
2519: PUSH
2520: LD_INT 1
2522: PLUS
2523: ARRAY
2524: PPUSH
2525: CALL_OW 431
// end ;
2529: GO 2443
2531: POP
2532: POP
// for i = 1 to 3 do
2533: LD_ADDR_VAR 0 2
2537: PUSH
2538: DOUBLE
2539: LD_INT 1
2541: DEC
2542: ST_TO_ADDR
2543: LD_INT 3
2545: PUSH
2546: FOR_TO
2547: IFFALSE 2664
// begin vc_chassis := ar_half_tracked ;
2549: LD_ADDR_OWVAR 37
2553: PUSH
2554: LD_INT 14
2556: ST_TO_ADDR
// vc_engine := engine_solar ;
2557: LD_ADDR_OWVAR 39
2561: PUSH
2562: LD_INT 2
2564: ST_TO_ADDR
// vc_control := control_manual ;
2565: LD_ADDR_OWVAR 38
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2573: LD_ADDR_OWVAR 40
2577: PUSH
2578: LD_INT 25
2580: PUSH
2581: LD_INT 27
2583: PUSH
2584: LD_INT 26
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: PUSH
2592: LD_VAR 0 2
2596: ARRAY
2597: ST_TO_ADDR
// un := CreateVehicle ;
2598: LD_ADDR_VAR 0 3
2602: PUSH
2603: CALL_OW 45
2607: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2608: LD_VAR 0 3
2612: PPUSH
2613: LD_INT 5
2615: PPUSH
2616: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2620: LD_VAR 0 3
2624: PPUSH
2625: LD_INT 8
2627: PPUSH
2628: LD_INT 0
2630: PPUSH
2631: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2635: LD_INT 0
2637: PPUSH
2638: LD_INT 3
2640: PPUSH
2641: LD_INT 7
2643: PPUSH
2644: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2648: CALL_OW 44
2652: PPUSH
2653: LD_VAR 0 3
2657: PPUSH
2658: CALL_OW 52
// end ;
2662: GO 2546
2664: POP
2665: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2666: LD_INT 1
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: LD_INT 6
2674: PPUSH
2675: CALL_OW 380
// al_commander := CreateHuman ;
2679: LD_ADDR_EXP 5
2683: PUSH
2684: CALL_OW 44
2688: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2689: LD_EXP 5
2693: PPUSH
2694: LD_INT 22
2696: PUSH
2697: LD_OWVAR 20
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: LD_INT 30
2708: PUSH
2709: LD_INT 0
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PPUSH
2720: CALL_OW 69
2724: PUSH
2725: LD_INT 1
2727: ARRAY
2728: PPUSH
2729: CALL_OW 52
// InitHc ( ) ;
2733: CALL_OW 19
// end ;
2737: LD_VAR 0 1
2741: RET
// export function ChangeSide ( ) ; var i ; begin
2742: LD_INT 0
2744: PPUSH
2745: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2746: LD_ADDR_VAR 0 2
2750: PUSH
2751: LD_INT 22
2753: PUSH
2754: LD_INT 5
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PPUSH
2761: CALL_OW 69
2765: PUSH
2766: FOR_IN
2767: IFFALSE 2783
// SetSide ( i , 8 ) ;
2769: LD_VAR 0 2
2773: PPUSH
2774: LD_INT 8
2776: PPUSH
2777: CALL_OW 235
2781: GO 2766
2783: POP
2784: POP
// end ;
2785: LD_VAR 0 1
2789: RET
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2790: LD_INT 22
2792: PUSH
2793: LD_INT 5
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: PPUSH
2800: CALL_OW 69
2804: IFFALSE 3318
2806: GO 2808
2808: DISABLE
2809: LD_INT 0
2811: PPUSH
2812: PPUSH
2813: PPUSH
2814: PPUSH
2815: PPUSH
2816: PPUSH
// begin enable ;
2817: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2818: LD_ADDR_VAR 0 2
2822: PUSH
2823: LD_INT 22
2825: PUSH
2826: LD_INT 5
2828: PUSH
2829: EMPTY
2830: LIST
2831: LIST
2832: PUSH
2833: LD_INT 2
2835: PUSH
2836: LD_INT 21
2838: PUSH
2839: LD_INT 1
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 21
2848: PUSH
2849: LD_INT 2
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: LIST
2860: PUSH
2861: EMPTY
2862: LIST
2863: LIST
2864: PPUSH
2865: CALL_OW 69
2869: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2870: LD_ADDR_VAR 0 5
2874: PUSH
2875: LD_INT 22
2877: PUSH
2878: LD_INT 5
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: PUSH
2885: LD_INT 30
2887: PUSH
2888: LD_INT 32
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: PUSH
2895: LD_INT 3
2897: PUSH
2898: LD_INT 24
2900: PUSH
2901: LD_INT 1000
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: LIST
2916: PPUSH
2917: CALL_OW 69
2921: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2922: LD_ADDR_VAR 0 6
2926: PUSH
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 3
2934: PUSH
2935: LD_INT 54
2937: PUSH
2938: EMPTY
2939: LIST
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: PUSH
2945: LD_INT 25
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 72
2963: ST_TO_ADDR
// if not list then
2964: LD_VAR 0 2
2968: NOT
2969: IFFALSE 2973
// exit ;
2971: GO 3318
// for i in list do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: LD_VAR 0 2
2982: PUSH
2983: FOR_IN
2984: IFFALSE 3316
// begin if b then
2986: LD_VAR 0 5
2990: IFFALSE 3069
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2992: LD_ADDR_VAR 0 4
2996: PUSH
2997: LD_VAR 0 2
3001: PPUSH
3002: LD_INT 25
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PPUSH
3012: CALL_OW 72
3016: PUSH
3017: FOR_IN
3018: IFFALSE 3067
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
3020: LD_VAR 0 4
3024: PPUSH
3025: CALL_OW 314
3029: NOT
3030: PUSH
3031: LD_VAR 0 1
3035: PPUSH
3036: CALL_OW 110
3040: PUSH
3041: LD_INT 7
3043: NONEQUAL
3044: AND
3045: IFFALSE 3065
// ComRepairBuilding ( j , b [ 1 ] ) ;
3047: LD_VAR 0 4
3051: PPUSH
3052: LD_VAR 0 5
3056: PUSH
3057: LD_INT 1
3059: ARRAY
3060: PPUSH
3061: CALL_OW 130
3065: GO 3017
3067: POP
3068: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3069: LD_VAR 0 1
3073: PPUSH
3074: CALL_OW 256
3078: PUSH
3079: LD_INT 500
3081: LESS
3082: PUSH
3083: LD_VAR 0 1
3087: PPUSH
3088: CALL_OW 110
3092: PUSH
3093: LD_INT 7
3095: EQUAL
3096: NOT
3097: AND
3098: IFFALSE 3148
// begin ComMoveToArea ( i , guard_hill ) ;
3100: LD_VAR 0 1
3104: PPUSH
3105: LD_INT 11
3107: PPUSH
3108: CALL_OW 113
// SetTag ( i , 7 ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 7
3119: PPUSH
3120: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 247
3133: PUSH
3134: LD_INT 2
3136: EQUAL
3137: IFFALSE 3148
// begin AddComExitVehicle ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3148: LD_VAR 0 1
3152: PPUSH
3153: CALL_OW 256
3157: PUSH
3158: LD_INT 1000
3160: EQUAL
3161: PUSH
3162: LD_VAR 0 1
3166: PPUSH
3167: CALL_OW 110
3171: PUSH
3172: LD_INT 7
3174: EQUAL
3175: AND
3176: PUSH
3177: LD_VAR 0 1
3181: PPUSH
3182: CALL_OW 310
3186: NOT
3187: AND
3188: PUSH
3189: LD_VAR 0 6
3193: AND
3194: IFFALSE 3222
// begin SetTag ( i , 0 ) ;
3196: LD_VAR 0 1
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3208: LD_VAR 0 6
3212: PPUSH
3213: LD_VAR 0 1
3217: PPUSH
3218: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3222: LD_VAR 0 1
3226: PPUSH
3227: CALL_OW 247
3231: PUSH
3232: LD_INT 2
3234: EQUAL
3235: PUSH
3236: LD_VAR 0 1
3240: PPUSH
3241: CALL_OW 110
3245: PUSH
3246: LD_INT 7
3248: NONEQUAL
3249: AND
3250: PUSH
3251: LD_VAR 0 1
3255: PPUSH
3256: CALL_OW 314
3260: NOT
3261: AND
3262: IFFALSE 3314
// if FilterAllUnits ( [ f_side , 7 ] ) then
3264: LD_INT 22
3266: PUSH
3267: LD_INT 7
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: PPUSH
3274: CALL_OW 69
3278: IFFALSE 3314
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3280: LD_VAR 0 1
3284: PPUSH
3285: LD_INT 22
3287: PUSH
3288: LD_INT 7
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PPUSH
3295: CALL_OW 69
3299: PPUSH
3300: LD_VAR 0 1
3304: PPUSH
3305: CALL_OW 74
3309: PPUSH
3310: CALL_OW 115
// end ;
3314: GO 2983
3316: POP
3317: POP
// end ; end_of_file
3318: PPOPN 6
3320: END
// export function Game ; var i , val , areas , wave ; begin
3321: LD_INT 0
3323: PPUSH
3324: PPUSH
3325: PPUSH
3326: PPUSH
3327: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3328: LD_ADDR_VAR 0 4
3332: PUSH
3333: LD_INT 1
3335: PUSH
3336: LD_INT 2
3338: PUSH
3339: LD_INT 3
3341: PUSH
3342: LD_INT 4
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: LD_INT 6
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: ST_TO_ADDR
// val := [ 5 , 6 , 7 ] [ Difficulty ] ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_INT 5
3366: PUSH
3367: LD_INT 6
3369: PUSH
3370: LD_INT 7
3372: PUSH
3373: EMPTY
3374: LIST
3375: LIST
3376: LIST
3377: PUSH
3378: LD_OWVAR 67
3382: ARRAY
3383: ST_TO_ADDR
// wave := 1 ;
3384: LD_ADDR_VAR 0 5
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// while not game_over do
3392: LD_EXP 7
3396: NOT
3397: IFFALSE 3553
// begin repeat begin Wait ( 0 0$01 ) ;
3399: LD_INT 35
3401: PPUSH
3402: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3406: LD_ADDR_EXP 11
3410: PUSH
3411: LD_EXP 11
3415: PUSH
3416: LD_INT 35
3418: PLUS
3419: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3420: LD_INT 22
3422: PUSH
3423: LD_INT 7
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PPUSH
3430: CALL_OW 69
3434: PUSH
3435: LD_INT 10
3437: LESS
3438: PUSH
3439: LD_EXP 11
3443: PUSH
3444: LD_INT 21000
3446: GREATEREQUAL
3447: OR
3448: IFFALSE 3399
// wave_time := 0 0$00 ;
3450: LD_ADDR_EXP 11
3454: PUSH
3455: LD_INT 0
3457: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3458: LD_INT 5250
3460: PPUSH
3461: CALL_OW 67
// if not ignore_wave then
3465: LD_EXP 15
3469: NOT
3470: IFFALSE 3543
// begin for i = 1 to areas do
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_VAR 0 4
3486: PUSH
3487: FOR_TO
3488: IFFALSE 3525
// begin SpawnPotter ( wave + val , areas [ i ] ) ;
3490: LD_VAR 0 5
3494: PUSH
3495: LD_VAR 0 3
3499: PLUS
3500: PPUSH
3501: LD_VAR 0 4
3505: PUSH
3506: LD_VAR 0 2
3510: ARRAY
3511: PPUSH
3512: CALL 3558 0 2
// Wait ( 0 0$10 ) ;
3516: LD_INT 350
3518: PPUSH
3519: CALL_OW 67
// end ;
3523: GO 3487
3525: POP
3526: POP
// wave := wave + 1 ;
3527: LD_ADDR_VAR 0 5
3531: PUSH
3532: LD_VAR 0 5
3536: PUSH
3537: LD_INT 1
3539: PLUS
3540: ST_TO_ADDR
// end else
3541: GO 3551
// ignore_wave := false ;
3543: LD_ADDR_EXP 15
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// end ;
3551: GO 3392
// end ;
3553: LD_VAR 0 1
3557: RET
// export function SpawnPotter ( val , area ) ; var i , v , un , class ; begin
3558: LD_INT 0
3560: PPUSH
3561: PPUSH
3562: PPUSH
3563: PPUSH
3564: PPUSH
// uc_side := 7 ;
3565: LD_ADDR_OWVAR 20
3569: PUSH
3570: LD_INT 7
3572: ST_TO_ADDR
// uc_nation := 2 ;
3573: LD_ADDR_OWVAR 21
3577: PUSH
3578: LD_INT 2
3580: ST_TO_ADDR
// v := 10 + ( tick div 5 5$00 ) ;
3581: LD_ADDR_VAR 0 5
3585: PUSH
3586: LD_INT 10
3588: PUSH
3589: LD_OWVAR 1
3593: PUSH
3594: LD_INT 10500
3596: DIV
3597: PLUS
3598: ST_TO_ADDR
// if v > 25 then
3599: LD_VAR 0 5
3603: PUSH
3604: LD_INT 25
3606: GREATER
3607: IFFALSE 3617
// v := 25 ;
3609: LD_ADDR_VAR 0 5
3613: PUSH
3614: LD_INT 25
3616: ST_TO_ADDR
// InitHc ( ) ;
3617: CALL_OW 19
// hc_gallery :=  ;
3621: LD_ADDR_OWVAR 33
3625: PUSH
3626: LD_STRING 
3628: ST_TO_ADDR
// hc_importance := 0 ;
3629: LD_ADDR_OWVAR 32
3633: PUSH
3634: LD_INT 0
3636: ST_TO_ADDR
// hc_name :=  ;
3637: LD_ADDR_OWVAR 26
3641: PUSH
3642: LD_STRING 
3644: ST_TO_ADDR
// hc_attr := [ v , v ] ;
3645: LD_ADDR_OWVAR 29
3649: PUSH
3650: LD_VAR 0 5
3654: PUSH
3655: LD_VAR 0 5
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: ST_TO_ADDR
// if val > 35 then
3664: LD_VAR 0 1
3668: PUSH
3669: LD_INT 35
3671: GREATER
3672: IFFALSE 3682
// val := 35 ;
3674: LD_ADDR_VAR 0 1
3678: PUSH
3679: LD_INT 35
3681: ST_TO_ADDR
// for i = 1 to val do
3682: LD_ADDR_VAR 0 4
3686: PUSH
3687: DOUBLE
3688: LD_INT 1
3690: DEC
3691: ST_TO_ADDR
3692: LD_VAR 0 1
3696: PUSH
3697: FOR_TO
3698: IFFALSE 3911
// begin if i mod 9 = 0 then
3700: LD_VAR 0 4
3704: PUSH
3705: LD_INT 9
3707: MOD
3708: PUSH
3709: LD_INT 0
3711: EQUAL
3712: IFFALSE 3724
// class := class_apeman_kamikaze else
3714: LD_ADDR_VAR 0 7
3718: PUSH
3719: LD_INT 17
3721: ST_TO_ADDR
3722: GO 3756
// if i mod 4 = 0 then
3724: LD_VAR 0 4
3728: PUSH
3729: LD_INT 4
3731: MOD
3732: PUSH
3733: LD_INT 0
3735: EQUAL
3736: IFFALSE 3748
// class := class_apeman_soldier else
3738: LD_ADDR_VAR 0 7
3742: PUSH
3743: LD_INT 15
3745: ST_TO_ADDR
3746: GO 3756
// class := class_apeman ;
3748: LD_ADDR_VAR 0 7
3752: PUSH
3753: LD_INT 12
3755: ST_TO_ADDR
// if i mod 6 = 0 then
3756: LD_VAR 0 4
3760: PUSH
3761: LD_INT 6
3763: MOD
3764: PUSH
3765: LD_INT 0
3767: EQUAL
3768: IFFALSE 3843
// begin vc_chassis := ar_half_tracked ;
3770: LD_ADDR_OWVAR 37
3774: PUSH
3775: LD_INT 14
3777: ST_TO_ADDR
// vc_control := control_apeman ;
3778: LD_ADDR_OWVAR 38
3782: PUSH
3783: LD_INT 5
3785: ST_TO_ADDR
// vc_engine := engine_siberite ;
3786: LD_ADDR_OWVAR 39
3790: PUSH
3791: LD_INT 3
3793: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb , ar_bio_bomb ] [ rand ( 1 , 4 ) ] ;
3794: LD_ADDR_OWVAR 40
3798: PUSH
3799: LD_INT 28
3801: PUSH
3802: LD_INT 27
3804: PUSH
3805: LD_INT 29
3807: PUSH
3808: LD_EXP 22
3812: PUSH
3813: EMPTY
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 1
3821: PPUSH
3822: LD_INT 4
3824: PPUSH
3825: CALL_OW 12
3829: ARRAY
3830: ST_TO_ADDR
// un := CreateVehicle ;
3831: LD_ADDR_VAR 0 6
3835: PUSH
3836: CALL_OW 45
3840: ST_TO_ADDR
// end else
3841: GO 3868
// begin PrepareHuman ( sex_male , class , 10 ) ;
3843: LD_INT 1
3845: PPUSH
3846: LD_VAR 0 7
3850: PPUSH
3851: LD_INT 10
3853: PPUSH
3854: CALL_OW 380
// un := CreateHuman ;
3858: LD_ADDR_VAR 0 6
3862: PUSH
3863: CALL_OW 44
3867: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3868: LD_VAR 0 6
3872: PPUSH
3873: LD_VAR 0 2
3877: PPUSH
3878: LD_INT 0
3880: PPUSH
3881: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3885: LD_VAR 0 6
3889: PPUSH
3890: CALL_OW 250
3894: PPUSH
3895: LD_VAR 0 6
3899: PPUSH
3900: CALL_OW 251
3904: PPUSH
3905: CALL_OW 494
// end ;
3909: GO 3697
3911: POP
3912: POP
// end ;
3913: LD_VAR 0 3
3917: RET
// every 0 0$3 trigger alert and not game_over do var i , list , enemy ;
3918: LD_EXP 6
3922: PUSH
3923: LD_EXP 7
3927: NOT
3928: AND
3929: IFFALSE 4048
3931: GO 3933
3933: DISABLE
3934: LD_INT 0
3936: PPUSH
3937: PPUSH
3938: PPUSH
// begin enable ;
3939: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3940: LD_ADDR_VAR 0 2
3944: PUSH
3945: LD_INT 22
3947: PUSH
3948: LD_INT 7
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: PPUSH
3955: CALL_OW 69
3959: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
3960: LD_ADDR_VAR 0 3
3964: PUSH
3965: LD_INT 81
3967: PUSH
3968: LD_INT 7
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: PPUSH
3975: CALL_OW 69
3979: ST_TO_ADDR
// if not list then
3980: LD_VAR 0 2
3984: NOT
3985: IFFALSE 3989
// exit ;
3987: GO 4048
// for i in list do
3989: LD_ADDR_VAR 0 1
3993: PUSH
3994: LD_VAR 0 2
3998: PUSH
3999: FOR_IN
4000: IFFALSE 4046
// begin if enemy then
4002: LD_VAR 0 3
4006: IFFALSE 4044
// if not HasTask ( i ) then
4008: LD_VAR 0 1
4012: PPUSH
4013: CALL_OW 314
4017: NOT
4018: IFFALSE 4044
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4020: LD_VAR 0 1
4024: PPUSH
4025: LD_VAR 0 3
4029: PPUSH
4030: LD_VAR 0 1
4034: PPUSH
4035: CALL_OW 74
4039: PPUSH
4040: CALL_OW 115
// end ;
4044: GO 3999
4046: POP
4047: POP
// end ; end_of_file
4048: PPOPN 3
4050: END
// export function Action ; begin
4051: LD_INT 0
4053: PPUSH
// InGameOn ;
4054: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4058: LD_INT 23
4060: PPUSH
4061: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4065: LD_EXP 1
4069: PPUSH
4070: LD_STRING DL-1
4072: PPUSH
4073: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4077: LD_EXP 2
4081: PPUSH
4082: LD_STRING DA-1
4084: PPUSH
4085: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4089: LD_EXP 3
4093: PPUSH
4094: LD_STRING DA-2
4096: PPUSH
4097: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4101: LD_EXP 1
4105: PPUSH
4106: LD_STRING DL-2
4108: PPUSH
4109: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4113: LD_EXP 3
4117: PPUSH
4118: LD_STRING DA-3
4120: PPUSH
4121: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4125: LD_EXP 1
4129: PPUSH
4130: LD_STRING DL-3
4132: PPUSH
4133: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4137: LD_EXP 2
4141: PPUSH
4142: LD_STRING DA-4
4144: PPUSH
4145: CALL_OW 88
// if not dialogue_skipped then
4149: LD_OWVAR 59
4153: NOT
4154: IFFALSE 4239
// begin Wait ( 0 0$01 ) ;
4156: LD_INT 35
4158: PPUSH
4159: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4163: LD_EXP 2
4167: PUSH
4168: LD_EXP 3
4172: PUSH
4173: EMPTY
4174: LIST
4175: LIST
4176: PPUSH
4177: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4181: LD_EXP 2
4185: PPUSH
4186: LD_INT 107
4188: PPUSH
4189: LD_INT 53
4191: PPUSH
4192: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4196: LD_EXP 3
4200: PPUSH
4201: LD_INT 108
4203: PPUSH
4204: LD_INT 53
4206: PPUSH
4207: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4211: LD_EXP 2
4215: PPUSH
4216: LD_EXP 4
4220: PPUSH
4221: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4225: LD_EXP 3
4229: PPUSH
4230: LD_EXP 4
4234: PPUSH
4235: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4239: LD_INT 35
4241: PPUSH
4242: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4246: LD_EXP 2
4250: PPUSH
4251: LD_INT 107
4253: PPUSH
4254: LD_INT 53
4256: PPUSH
4257: CALL_OW 307
4261: PUSH
4262: LD_OWVAR 59
4266: OR
4267: IFFALSE 4239
// if not dialogue_skipped then
4269: LD_OWVAR 59
4273: NOT
4274: IFFALSE 4375
// begin ComTurnUnit ( potter , l1 ) ;
4276: LD_EXP 4
4280: PPUSH
4281: LD_EXP 2
4285: PPUSH
4286: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4290: LD_INT 10
4292: PPUSH
4293: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4297: LD_EXP 4
4301: PPUSH
4302: LD_INT 108
4304: PPUSH
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 0
4310: PPUSH
4311: LD_INT 0
4313: PPUSH
4314: CALL_OW 483
// Wait ( 0 0$01 ) ;
4318: LD_INT 35
4320: PPUSH
4321: CALL_OW 67
// RemoveUnit ( potter ) ;
4325: LD_EXP 4
4329: PPUSH
4330: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4334: LD_EXP 2
4338: PPUSH
4339: LD_STRING DA-5
4341: PPUSH
4342: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4346: LD_EXP 3
4350: PPUSH
4351: LD_STRING DA-6
4353: PPUSH
4354: CALL_OW 88
// Wait ( 0 0$02 ) ;
4358: LD_INT 70
4360: PPUSH
4361: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4365: LD_INT 25
4367: PPUSH
4368: LD_INT 19
4370: PPUSH
4371: CALL_OW 84
// end ; SpawnPotter ( 20 , north_west_1 ) ;
4375: LD_INT 20
4377: PPUSH
4378: LD_INT 1
4380: PPUSH
4381: CALL 3558 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4385: LD_EXP 5
4389: PPUSH
4390: LD_STRING DLa-1
4392: PPUSH
4393: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4397: LD_EXP 1
4401: PPUSH
4402: LD_STRING DL-5
4404: PPUSH
4405: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4409: LD_INT 23
4411: PPUSH
4412: CALL_OW 87
// InGameOff ;
4416: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4420: LD_STRING C1
4422: PPUSH
4423: CALL_OW 337
// alert := true ;
4427: LD_ADDR_EXP 6
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4435: LD_EXP 5
4439: PPUSH
4440: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4444: LD_EXP 5
4448: PPUSH
4449: LD_INT 11
4451: PPUSH
4452: CALL_OW 173
// Wait ( 0 0$30 ) ;
4456: LD_INT 1050
4458: PPUSH
4459: CALL_OW 67
// SpawnPotter ( 10 , north_4 ) ;
4463: LD_INT 10
4465: PPUSH
4466: LD_INT 4
4468: PPUSH
4469: CALL 3558 0 2
// Wait ( 0 0$35 ) ;
4473: LD_INT 1225
4475: PPUSH
4476: CALL_OW 67
// SpawnPotter ( 10 , east_5 ) ;
4480: LD_INT 10
4482: PPUSH
4483: LD_INT 5
4485: PPUSH
4486: CALL 3558 0 2
// Wait ( 0 0$03 ) ;
4490: LD_INT 105
4492: PPUSH
4493: CALL_OW 67
// Game ;
4497: CALL 3321 0 0
// end ;
4501: LD_VAR 0 1
4505: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 1500 do var tmp , i ;
4506: LD_INT 22
4508: PUSH
4509: LD_INT 7
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: PPUSH
4516: CALL_OW 69
4520: PUSH
4521: LD_INT 0
4523: EQUAL
4524: PUSH
4525: LD_EXP 10
4529: PUSH
4530: LD_INT 1500
4532: GREATEREQUAL
4533: AND
4534: IFFALSE 4762
4536: GO 4538
4538: DISABLE
4539: LD_INT 0
4541: PPUSH
4542: PPUSH
// begin DialogueOn ;
4543: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4547: LD_EXP 12
4551: PPUSH
4552: LD_STRING DVr-1
4554: PPUSH
4555: CALL_OW 94
// DialogueOff ;
4559: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4563: LD_STRING QBonusInfo
4565: PPUSH
4566: CALL_OW 97
4570: PUSH
4571: LD_INT 1
4573: DOUBLE
4574: EQUAL
4575: IFTRUE 4579
4577: GO 4590
4579: POP
// bonus_active := true ; end ;
4580: LD_ADDR_EXP 13
4584: PUSH
4585: LD_INT 1
4587: ST_TO_ADDR
4588: GO 4591
4590: POP
// bonus_num := 4 ;
4591: LD_ADDR_EXP 14
4595: PUSH
4596: LD_INT 4
4598: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_mid , art_instant , main_base ) ;
4599: LD_OWVAR 2
4603: PPUSH
4604: LD_INT 2
4606: PPUSH
4607: LD_INT 2
4609: PPUSH
4610: LD_INT 23
4612: PPUSH
4613: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4617: LD_ADDR_VAR 0 1
4621: PUSH
4622: LD_INT 500
4624: PUSH
4625: LD_INT 3500
4627: PUSH
4628: LD_INT 5750
4630: PUSH
4631: LD_INT 10000
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4640: LD_INT 10500
4642: PUSH
4643: LD_INT 12600
4645: PUSH
4646: LD_INT 14700
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_OWVAR 67
4658: ARRAY
4659: PPUSH
4660: CALL_OW 67
// for i = 1 to tmp do
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_VAR 0 1
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4712
// if points >= tmp [ i ] then
4682: LD_EXP 10
4686: PUSH
4687: LD_VAR 0 1
4691: PUSH
4692: LD_VAR 0 2
4696: ARRAY
4697: GREATEREQUAL
4698: IFFALSE 4710
// bonus_num := i ;
4700: LD_ADDR_EXP 14
4704: PUSH
4705: LD_VAR 0 2
4709: ST_TO_ADDR
4710: GO 4679
4712: POP
4713: POP
// case Query ( QBonusInfo ) of 1 :
4714: LD_STRING QBonusInfo
4716: PPUSH
4717: CALL_OW 97
4721: PUSH
4722: LD_INT 1
4724: DOUBLE
4725: EQUAL
4726: IFTRUE 4730
4728: GO 4751
4730: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4731: LD_OWVAR 2
4735: PPUSH
4736: LD_INT 12
4738: PPUSH
4739: LD_INT 2
4741: PPUSH
4742: LD_INT 23
4744: PPUSH
4745: CALL_OW 468
4749: GO 4752
4751: POP
// until points >= 15000 ;
4752: LD_EXP 10
4756: PUSH
4757: LD_INT 15000
4759: GREATEREQUAL
4760: IFFALSE 4640
// end ;
4762: PPOPN 2
4764: END
// export function Win ; begin
4765: LD_INT 0
4767: PPUSH
// AddMedal ( med , 1 ) ;
4768: LD_STRING med
4770: PPUSH
4771: LD_INT 1
4773: PPUSH
4774: CALL_OW 101
// AddMedal ( med , 1 ) ;
4778: LD_STRING med
4780: PPUSH
4781: LD_INT 1
4783: PPUSH
4784: CALL_OW 101
// AddMedal ( med , 1 ) ;
4788: LD_STRING med
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: CALL_OW 101
// GiveMedals ( MAIN ) ;
4798: LD_STRING MAIN
4800: PPUSH
4801: CALL_OW 102
// YouWin ;
4805: CALL_OW 103
// end ; end_of_file
4809: LD_VAR 0 1
4813: RET
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
4814: LD_INT 0
4816: PPUSH
4817: PPUSH
// dir := GetDir ( b ) ;
4818: LD_ADDR_VAR 0 4
4822: PUSH
4823: LD_VAR 0 2
4827: PPUSH
4828: CALL_OW 254
4832: ST_TO_ADDR
// if dir < 3 then
4833: LD_VAR 0 4
4837: PUSH
4838: LD_INT 3
4840: LESS
4841: IFFALSE 4859
// dir := dir + 3 else
4843: LD_ADDR_VAR 0 4
4847: PUSH
4848: LD_VAR 0 4
4852: PUSH
4853: LD_INT 3
4855: PLUS
4856: ST_TO_ADDR
4857: GO 4873
// dir := dir - 3 ;
4859: LD_ADDR_VAR 0 4
4863: PUSH
4864: LD_VAR 0 4
4868: PUSH
4869: LD_INT 3
4871: MINUS
4872: ST_TO_ADDR
// SetDir ( un , dir ) ;
4873: LD_VAR 0 1
4877: PPUSH
4878: LD_VAR 0 4
4882: PPUSH
4883: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4887: LD_VAR 0 1
4891: PPUSH
4892: LD_VAR 0 2
4896: PPUSH
4897: CALL_OW 52
// end ;
4901: LD_VAR 0 3
4905: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
4906: LD_INT 0
4908: PPUSH
4909: PPUSH
4910: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
4911: LD_ADDR_VAR 0 7
4915: PUSH
4916: LD_VAR 0 1
4920: PUSH
4921: LD_VAR 0 2
4925: ARRAY
4926: PPUSH
4927: LD_VAR 0 3
4931: PPUSH
4932: LD_VAR 0 4
4936: PPUSH
4937: CALL_OW 1
4941: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
4942: LD_ADDR_VAR 0 1
4946: PUSH
4947: LD_VAR 0 1
4951: PPUSH
4952: LD_VAR 0 2
4956: PPUSH
4957: LD_VAR 0 7
4961: PPUSH
4962: CALL_OW 1
4966: ST_TO_ADDR
// result := tab ;
4967: LD_ADDR_VAR 0 5
4971: PUSH
4972: LD_VAR 0 1
4976: ST_TO_ADDR
// end ;
4977: LD_VAR 0 5
4981: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
4982: LD_INT 0
4984: PPUSH
4985: PPUSH
4986: PPUSH
// if not GetControl ( veh ) = control_manual then
4987: LD_VAR 0 1
4991: PPUSH
4992: CALL_OW 263
4996: PUSH
4997: LD_INT 1
4999: EQUAL
5000: NOT
5001: IFFALSE 5013
// result := false else
5003: LD_ADDR_VAR 0 2
5007: PUSH
5008: LD_INT 0
5010: ST_TO_ADDR
5011: GO 5158
// if veh in FilterAllUnits ( [ f_empty ] ) then
5013: LD_VAR 0 1
5017: PUSH
5018: LD_INT 58
5020: PUSH
5021: EMPTY
5022: LIST
5023: PPUSH
5024: CALL_OW 69
5028: IN
5029: IFFALSE 5041
// result := false else
5031: LD_ADDR_VAR 0 2
5035: PUSH
5036: LD_INT 0
5038: ST_TO_ADDR
5039: GO 5158
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5041: LD_ADDR_VAR 0 4
5045: PUSH
5046: LD_INT 22
5048: PUSH
5049: LD_VAR 0 1
5053: PPUSH
5054: CALL_OW 255
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: PUSH
5063: LD_INT 55
5065: PUSH
5066: EMPTY
5067: LIST
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: CALL_OW 69
5077: ST_TO_ADDR
// if not filter then
5078: LD_VAR 0 4
5082: NOT
5083: IFFALSE 5095
// result := false else
5085: LD_ADDR_VAR 0 2
5089: PUSH
5090: LD_INT 0
5092: ST_TO_ADDR
5093: GO 5158
// for i = 1 to filter do
5095: LD_ADDR_VAR 0 3
5099: PUSH
5100: DOUBLE
5101: LD_INT 1
5103: DEC
5104: ST_TO_ADDR
5105: LD_VAR 0 4
5109: PUSH
5110: FOR_TO
5111: IFFALSE 5156
// if IsDriver ( filter [ i ] ) = veh then
5113: LD_VAR 0 4
5117: PUSH
5118: LD_VAR 0 3
5122: ARRAY
5123: PPUSH
5124: CALL 59345 0 1
5128: PUSH
5129: LD_VAR 0 1
5133: EQUAL
5134: IFFALSE 5154
// begin result := filter [ i ] ;
5136: LD_ADDR_VAR 0 2
5140: PUSH
5141: LD_VAR 0 4
5145: PUSH
5146: LD_VAR 0 3
5150: ARRAY
5151: ST_TO_ADDR
// break ;
5152: GO 5156
// end ;
5154: GO 5110
5156: POP
5157: POP
// end ; end ; end_of_file
5158: LD_VAR 0 2
5162: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL 20997 0 1
// if un = legion_commander then
5172: LD_VAR 0 1
5176: PUSH
5177: LD_EXP 1
5181: EQUAL
5182: IFFALSE 5191
// YouLost ( commanderDied ) ;
5184: LD_STRING commanderDied
5186: PPUSH
5187: CALL_OW 104
// if un in [ legion_commander , main_base ] then
5191: LD_VAR 0 1
5195: PUSH
5196: LD_EXP 1
5200: PUSH
5201: LD_INT 23
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: IN
5208: IFFALSE 5218
// game_over := true ;
5210: LD_ADDR_EXP 7
5214: PUSH
5215: LD_INT 1
5217: ST_TO_ADDR
// if un = al_commander then
5218: LD_VAR 0 1
5222: PUSH
5223: LD_EXP 5
5227: EQUAL
5228: IFFALSE 5234
// ChangeSide ( ) ;
5230: CALL 2742 0 0
// if GetSide ( un ) = 7 then
5234: LD_VAR 0 1
5238: PPUSH
5239: CALL_OW 255
5243: PUSH
5244: LD_INT 7
5246: EQUAL
5247: IFFALSE 5365
// begin if GetClass ( un ) = class_apeman then
5249: LD_VAR 0 1
5253: PPUSH
5254: CALL_OW 257
5258: PUSH
5259: LD_INT 12
5261: EQUAL
5262: IFFALSE 5278
// points := points + 6 ;
5264: LD_ADDR_EXP 10
5268: PUSH
5269: LD_EXP 10
5273: PUSH
5274: LD_INT 6
5276: PLUS
5277: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5278: LD_VAR 0 1
5282: PPUSH
5283: CALL_OW 257
5287: PUSH
5288: LD_INT 17
5290: EQUAL
5291: IFFALSE 5307
// points := points + 11 ;
5293: LD_ADDR_EXP 10
5297: PUSH
5298: LD_EXP 10
5302: PUSH
5303: LD_INT 11
5305: PLUS
5306: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5307: LD_VAR 0 1
5311: PPUSH
5312: CALL_OW 257
5316: PUSH
5317: LD_INT 15
5319: EQUAL
5320: IFFALSE 5336
// points := points + 14 ;
5322: LD_ADDR_EXP 10
5326: PUSH
5327: LD_EXP 10
5331: PUSH
5332: LD_INT 14
5334: PLUS
5335: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5336: LD_VAR 0 1
5340: PPUSH
5341: CALL_OW 247
5345: PUSH
5346: LD_INT 2
5348: EQUAL
5349: IFFALSE 5365
// points := points + 50 ;
5351: LD_ADDR_EXP 10
5355: PUSH
5356: LD_EXP 10
5360: PUSH
5361: LD_INT 50
5363: PLUS
5364: ST_TO_ADDR
// end ; end ;
5365: PPOPN 1
5367: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5368: LD_EXP 5
5372: PPUSH
5373: CALL_OW 256
5377: PUSH
5378: LD_INT 1000
5380: LESS
5381: IFFALSE 5413
5383: GO 5385
5385: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5386: LD_EXP 5
5390: PPUSH
5391: CALL_OW 504
5395: PPUSH
5396: CALL_OW 255
5400: PUSH
5401: LD_INT 8
5403: EQUAL
5404: IFFALSE 5413
// YouLost ( FriendlyFire ) ;
5406: LD_STRING FriendlyFire
5408: PPUSH
5409: CALL_OW 104
5413: END
// on DialogueSkipped ( value ) do var i ;
5414: LD_INT 0
5416: PPUSH
// begin RemoveUnit ( potter ) ;
5417: LD_EXP 4
5421: PPUSH
5422: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5426: LD_EXP 2
5430: PUSH
5431: LD_EXP 3
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PPUSH
5440: CALL_OW 122
// Wait ( 1 ) ;
5444: LD_INT 1
5446: PPUSH
5447: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5451: LD_EXP 2
5455: PPUSH
5456: LD_INT 107
5458: PPUSH
5459: LD_INT 53
5461: PPUSH
5462: LD_INT 0
5464: PPUSH
5465: LD_INT 0
5467: PPUSH
5468: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5472: LD_EXP 3
5476: PPUSH
5477: LD_INT 108
5479: PPUSH
5480: LD_INT 53
5482: PPUSH
5483: LD_INT 0
5485: PPUSH
5486: LD_INT 0
5488: PPUSH
5489: CALL_OW 483
// Wait ( 1 ) ;
5493: LD_INT 1
5495: PPUSH
5496: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5500: LD_EXP 2
5504: PUSH
5505: LD_EXP 3
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PPUSH
5514: LD_INT 108
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: CALL_OW 118
// end ;
5524: PPOPN 2
5526: END
// on ArtifactUsed ( side , icon , p3 , p4 ) do var bonus , off , units , crates , tmp , xy , i , lab ;
5527: LD_INT 0
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
5536: PPUSH
// begin xy := FindArtifact ( 2 ) ;
5537: LD_ADDR_VAR 0 10
5541: PUSH
5542: LD_INT 2
5544: PPUSH
5545: CALL_OW 469
5549: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
5550: LD_ADDR_VAR 0 12
5554: PUSH
5555: LD_INT 22
5557: PUSH
5558: LD_OWVAR 2
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: LD_INT 30
5572: PUSH
5573: LD_INT 8
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PUSH
5580: LD_INT 30
5582: PUSH
5583: LD_INT 11
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PPUSH
5599: CALL_OW 69
5603: PPUSH
5604: LD_VAR 0 10
5608: PUSH
5609: LD_INT 1
5611: ARRAY
5612: PPUSH
5613: LD_VAR 0 10
5617: PUSH
5618: LD_INT 2
5620: ARRAY
5621: PPUSH
5622: CALL_OW 73
5626: ST_TO_ADDR
// if icon = art_exp_left then
5627: LD_VAR 0 2
5631: PUSH
5632: LD_INT 1
5634: EQUAL
5635: IFFALSE 5690
// begin SetSpecResearch ( lab , time_res_art , true ) ;
5637: LD_VAR 0 12
5641: PPUSH
5642: LD_EXP 9
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
5654: LD_VAR 0 12
5658: PPUSH
5659: LD_EXP 17
5663: PPUSH
5664: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
5668: LD_OWVAR 2
5672: PPUSH
5673: LD_INT 1
5675: PPUSH
5676: LD_INT 0
5678: PPUSH
5679: LD_VAR 0 12
5683: PPUSH
5684: CALL_OW 468
// end else
5688: GO 6471
// begin DialogueOn ;
5690: CALL_OW 6
// uc_side := 8 ;
5694: LD_ADDR_OWVAR 20
5698: PUSH
5699: LD_INT 8
5701: ST_TO_ADDR
// uc_nation := 2 ;
5702: LD_ADDR_OWVAR 21
5706: PUSH
5707: LD_INT 2
5709: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5710: LD_ADDR_VAR 0 5
5714: PUSH
5715: LD_STRING QBonus
5717: PUSH
5718: LD_EXP 14
5722: STR
5723: ST_TO_ADDR
// off := true ;
5724: LD_ADDR_VAR 0 6
5728: PUSH
5729: LD_INT 1
5731: ST_TO_ADDR
// units := [ ] ;
5732: LD_ADDR_VAR 0 7
5736: PUSH
5737: EMPTY
5738: ST_TO_ADDR
// crates := 0 ;
5739: LD_ADDR_VAR 0 8
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5747: LD_EXP 12
5751: PPUSH
5752: LD_STRING DVr-2
5754: PPUSH
5755: CALL_OW 94
// wait ( 0 0$1 ) ;
5759: LD_INT 35
5761: PPUSH
5762: CALL_OW 67
// case Query ( bonus ) of 1 :
5766: LD_VAR 0 5
5770: PPUSH
5771: CALL_OW 97
5775: PUSH
5776: LD_INT 1
5778: DOUBLE
5779: EQUAL
5780: IFTRUE 5784
5782: GO 5869
5784: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5785: LD_ADDR_VAR 0 9
5789: PUSH
5790: LD_INT 1
5792: PUSH
5793: LD_INT 2
5795: PUSH
5796: LD_INT 5
5798: PUSH
5799: LD_INT 8
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: PUSH
5808: LD_EXP 14
5812: ARRAY
5813: ST_TO_ADDR
// for i = 1 to tmp do
5814: LD_ADDR_VAR 0 11
5818: PUSH
5819: DOUBLE
5820: LD_INT 1
5822: DEC
5823: ST_TO_ADDR
5824: LD_VAR 0 9
5828: PUSH
5829: FOR_TO
5830: IFFALSE 5865
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5832: LD_INT 0
5834: PPUSH
5835: LD_INT 15
5837: PPUSH
5838: LD_VAR 0 9
5842: PPUSH
5843: CALL_OW 380
// units := units ^ CreateHuman ;
5847: LD_ADDR_VAR 0 7
5851: PUSH
5852: LD_VAR 0 7
5856: PUSH
5857: CALL_OW 44
5861: ADD
5862: ST_TO_ADDR
// end ;
5863: GO 5829
5865: POP
5866: POP
// end ; 2 :
5867: GO 6277
5869: LD_INT 2
5871: DOUBLE
5872: EQUAL
5873: IFTRUE 5877
5875: GO 5909
5877: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5878: LD_ADDR_VAR 0 8
5882: PUSH
5883: LD_INT 100
5885: PUSH
5886: LD_INT 150
5888: PUSH
5889: LD_INT 350
5891: PUSH
5892: LD_INT 500
5894: PUSH
5895: EMPTY
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: PUSH
5901: LD_EXP 14
5905: ARRAY
5906: ST_TO_ADDR
// end ; 3 :
5907: GO 6277
5909: LD_INT 3
5911: DOUBLE
5912: EQUAL
5913: IFTRUE 5917
5915: GO 6257
5917: POP
// begin if bonus_num = 1 then
5918: LD_EXP 14
5922: PUSH
5923: LD_INT 1
5925: EQUAL
5926: IFFALSE 5936
// ignore_wave := true ;
5928: LD_ADDR_EXP 15
5932: PUSH
5933: LD_INT 1
5935: ST_TO_ADDR
// if bonus_num = 2 then
5936: LD_EXP 14
5940: PUSH
5941: LD_INT 2
5943: EQUAL
5944: IFFALSE 6064
// begin for i = 1 to 2 do
5946: LD_ADDR_VAR 0 11
5950: PUSH
5951: DOUBLE
5952: LD_INT 1
5954: DEC
5955: ST_TO_ADDR
5956: LD_INT 2
5958: PUSH
5959: FOR_TO
5960: IFFALSE 6062
// begin uc_nation := nation_arabian ;
5962: LD_ADDR_OWVAR 21
5966: PUSH
5967: LD_INT 2
5969: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5970: LD_ADDR_OWVAR 37
5974: PUSH
5975: LD_INT 14
5977: ST_TO_ADDR
// vc_engine := engine_siberite ;
5978: LD_ADDR_OWVAR 39
5982: PUSH
5983: LD_INT 3
5985: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
5986: LD_ADDR_OWVAR 38
5990: PUSH
5991: LD_INT 2
5993: PUSH
5994: LD_INT 5
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 1
6003: PPUSH
6004: LD_INT 2
6006: PPUSH
6007: CALL_OW 12
6011: ARRAY
6012: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6013: LD_ADDR_OWVAR 40
6017: PUSH
6018: LD_INT 28
6020: PUSH
6021: LD_INT 27
6023: PUSH
6024: LD_INT 25
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: PUSH
6032: LD_INT 1
6034: PPUSH
6035: LD_INT 3
6037: PPUSH
6038: CALL_OW 12
6042: ARRAY
6043: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6044: LD_ADDR_VAR 0 7
6048: PUSH
6049: LD_VAR 0 7
6053: PUSH
6054: CALL_OW 45
6058: ADD
6059: ST_TO_ADDR
// end ;
6060: GO 5959
6062: POP
6063: POP
// end ; if bonus_num = 3 then
6064: LD_EXP 14
6068: PUSH
6069: LD_INT 3
6071: EQUAL
6072: IFFALSE 6196
// begin for i = 1 to 4 do
6074: LD_ADDR_VAR 0 11
6078: PUSH
6079: DOUBLE
6080: LD_INT 1
6082: DEC
6083: ST_TO_ADDR
6084: LD_INT 4
6086: PUSH
6087: FOR_TO
6088: IFFALSE 6194
// begin uc_nation := nation_arabian ;
6090: LD_ADDR_OWVAR 21
6094: PUSH
6095: LD_INT 2
6097: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6098: LD_ADDR_OWVAR 37
6102: PUSH
6103: LD_INT 14
6105: ST_TO_ADDR
// vc_engine := engine_siberite ;
6106: LD_ADDR_OWVAR 39
6110: PUSH
6111: LD_INT 3
6113: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6114: LD_ADDR_OWVAR 38
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: LD_INT 5
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 1
6131: PPUSH
6132: LD_INT 2
6134: PPUSH
6135: CALL_OW 12
6139: ARRAY
6140: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6141: LD_ADDR_OWVAR 40
6145: PUSH
6146: LD_INT 28
6148: PUSH
6149: LD_INT 27
6151: PUSH
6152: LD_INT 28
6154: PUSH
6155: LD_INT 25
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 1
6166: PPUSH
6167: LD_INT 4
6169: PPUSH
6170: CALL_OW 12
6174: ARRAY
6175: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6176: LD_ADDR_VAR 0 7
6180: PUSH
6181: LD_VAR 0 7
6185: PUSH
6186: CALL_OW 45
6190: ADD
6191: ST_TO_ADDR
// end ;
6192: GO 6087
6194: POP
6195: POP
// end ; if bonus_num = 4 then
6196: LD_EXP 14
6200: PUSH
6201: LD_INT 4
6203: EQUAL
6204: IFFALSE 6255
// for i = 1 to 3 do
6206: LD_ADDR_VAR 0 11
6210: PUSH
6211: DOUBLE
6212: LD_INT 1
6214: DEC
6215: ST_TO_ADDR
6216: LD_INT 3
6218: PUSH
6219: FOR_TO
6220: IFFALSE 6253
// begin PrepareHuman ( false , 3 , 8 ) ;
6222: LD_INT 0
6224: PPUSH
6225: LD_INT 3
6227: PPUSH
6228: LD_INT 8
6230: PPUSH
6231: CALL_OW 380
// units := units ^ CreateHuman ;
6235: LD_ADDR_VAR 0 7
6239: PUSH
6240: LD_VAR 0 7
6244: PUSH
6245: CALL_OW 44
6249: ADD
6250: ST_TO_ADDR
// end ;
6251: GO 6219
6253: POP
6254: POP
// end ; 4 :
6255: GO 6277
6257: LD_INT 4
6259: DOUBLE
6260: EQUAL
6261: IFTRUE 6265
6263: GO 6276
6265: POP
// off := false ; end ;
6266: LD_ADDR_VAR 0 6
6270: PUSH
6271: LD_INT 0
6273: ST_TO_ADDR
6274: GO 6277
6276: POP
// DialogueOff ;
6277: CALL_OW 7
// if not off then
6281: LD_VAR 0 6
6285: NOT
6286: IFFALSE 6292
// exit else
6288: GO 6471
6290: GO 6345
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6292: LD_OWVAR 2
6296: PPUSH
6297: LD_INT 12
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: LD_INT 23
6305: PPUSH
6306: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6310: LD_EXP 12
6314: PPUSH
6315: LD_STRING DVr-3
6317: PUSH
6318: LD_STRING DVr-3a
6320: PUSH
6321: LD_STRING DVr-3b
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 1
6331: PPUSH
6332: LD_INT 3
6334: PPUSH
6335: CALL_OW 12
6339: ARRAY
6340: PPUSH
6341: CALL_OW 94
// end ; if units then
6345: LD_VAR 0 7
6349: IFFALSE 6413
// for i in units do
6351: LD_ADDR_VAR 0 11
6355: PUSH
6356: LD_VAR 0 7
6360: PUSH
6361: FOR_IN
6362: IFFALSE 6411
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6364: LD_VAR 0 11
6368: PPUSH
6369: LD_INT 92
6371: PPUSH
6372: LD_INT 49
6374: PPUSH
6375: LD_INT 20
6377: PPUSH
6378: LD_INT 0
6380: PPUSH
6381: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6385: LD_VAR 0 11
6389: PPUSH
6390: CALL_OW 250
6394: PPUSH
6395: LD_VAR 0 11
6399: PPUSH
6400: CALL_OW 251
6404: PPUSH
6405: CALL_OW 494
// end ;
6409: GO 6361
6411: POP
6412: POP
// if crates then
6413: LD_VAR 0 8
6417: IFFALSE 6471
// for i = 1 to ( crates div 50 ) do
6419: LD_ADDR_VAR 0 11
6423: PUSH
6424: DOUBLE
6425: LD_INT 1
6427: DEC
6428: ST_TO_ADDR
6429: LD_VAR 0 8
6433: PUSH
6434: LD_INT 50
6436: DIV
6437: PUSH
6438: FOR_TO
6439: IFFALSE 6469
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6441: LD_INT 5
6443: PPUSH
6444: LD_INT 92
6446: PPUSH
6447: LD_INT 49
6449: PPUSH
6450: LD_INT 30
6452: PPUSH
6453: LD_INT 1
6455: PPUSH
6456: CALL_OW 56
// wait ( 0 0$02 ) ;
6460: LD_INT 70
6462: PPUSH
6463: CALL_OW 67
// end ;
6467: GO 6438
6469: POP
6470: POP
// end ; end ;
6471: PPOPN 12
6473: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: LD_VAR 0 2
6483: PPUSH
6484: LD_VAR 0 3
6488: PPUSH
6489: CALL 21095 0 3
// end ;
6493: PPOPN 3
6495: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6496: LD_VAR 0 1
6500: PPUSH
6501: CALL 21103 0 1
// end ;
6505: PPOPN 1
6507: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6508: LD_VAR 0 1
6512: PPUSH
6513: CALL_OW 255
6517: PUSH
6518: LD_OWVAR 2
6522: EQUAL
6523: IFFALSE 6533
// player_res_art := true ;
6525: LD_ADDR_EXP 8
6529: PUSH
6530: LD_INT 1
6532: ST_TO_ADDR
// end ;
6533: PPOPN 1
6535: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) do var xy , lab ;
6536: LD_INT 22
6538: PUSH
6539: LD_OWVAR 2
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 2
6550: PUSH
6551: LD_INT 30
6553: PUSH
6554: LD_INT 7
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 30
6563: PUSH
6564: LD_INT 8
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 30
6573: PUSH
6574: LD_INT 11
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PPUSH
6591: CALL_OW 69
6595: IFFALSE 6828
6597: GO 6599
6599: DISABLE
6600: LD_INT 0
6602: PPUSH
6603: PPUSH
// begin enable ;
6604: ENABLE
// xy := FindArtifact ( 2 ) ;
6605: LD_ADDR_VAR 0 1
6609: PUSH
6610: LD_INT 2
6612: PPUSH
6613: CALL_OW 469
6617: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
6618: LD_ADDR_VAR 0 2
6622: PUSH
6623: LD_INT 22
6625: PUSH
6626: LD_OWVAR 2
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 2
6637: PUSH
6638: LD_INT 30
6640: PUSH
6641: LD_INT 8
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: LD_INT 30
6650: PUSH
6651: LD_INT 7
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 30
6660: PUSH
6661: LD_INT 11
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 69
6682: PPUSH
6683: LD_VAR 0 1
6687: PUSH
6688: LD_INT 1
6690: ARRAY
6691: PPUSH
6692: LD_VAR 0 1
6696: PUSH
6697: LD_INT 2
6699: ARRAY
6700: PPUSH
6701: CALL_OW 73
6705: ST_TO_ADDR
// if player_artifact_ready = false then
6706: LD_EXP 16
6710: PUSH
6711: LD_INT 0
6713: EQUAL
6714: IFFALSE 6828
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
6716: LD_VAR 0 2
6720: PPUSH
6721: LD_VAR 0 1
6725: PUSH
6726: LD_INT 1
6728: ARRAY
6729: PPUSH
6730: LD_VAR 0 1
6734: PUSH
6735: LD_INT 2
6737: ARRAY
6738: PPUSH
6739: CALL_OW 297
6743: PUSH
6744: LD_INT 6
6746: LESS
6747: IFFALSE 6808
// begin if BuildingStatus ( lab ) = bs_idle then
6749: LD_VAR 0 2
6753: PPUSH
6754: CALL_OW 461
6758: PUSH
6759: LD_INT 2
6761: EQUAL
6762: IFFALSE 6786
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
6764: LD_OWVAR 2
6768: PPUSH
6769: LD_INT 1
6771: PPUSH
6772: LD_INT 2
6774: PPUSH
6775: LD_VAR 0 2
6779: PPUSH
6780: CALL_OW 468
6784: GO 6806
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6786: LD_OWVAR 2
6790: PPUSH
6791: LD_INT 1
6793: PPUSH
6794: LD_INT 1
6796: PPUSH
6797: LD_VAR 0 2
6801: PPUSH
6802: CALL_OW 468
// end else
6806: GO 6828
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6808: LD_OWVAR 2
6812: PPUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 1
6818: PPUSH
6819: LD_VAR 0 2
6823: PPUSH
6824: CALL_OW 468
// end ;
6828: PPOPN 2
6830: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6831: LD_VAR 0 1
6835: PPUSH
6836: CALL_OW 255
6840: PUSH
6841: LD_OWVAR 2
6845: EQUAL
6846: IFFALSE 6872
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
6848: LD_OWVAR 2
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: LD_INT 0
6858: PPUSH
6859: LD_VAR 0 1
6863: PPUSH
6864: CALL_OW 468
// Win ;
6868: CALL 4765 0 0
// end ; end ;
6872: PPOPN 1
6874: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
6875: LD_ADDR_EXP 17
6879: PUSH
6880: LD_VAR 0 2
6884: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
6885: LD_OWVAR 2
6889: PPUSH
6890: LD_INT 1
6892: PPUSH
6893: LD_INT 2
6895: PPUSH
6896: LD_VAR 0 1
6900: PPUSH
6901: CALL_OW 468
// end ; end_of_file
6905: PPOPN 2
6907: END
// every 0 0$01 trigger not game_over do
6908: LD_EXP 7
6912: NOT
6913: IFFALSE 6946
6915: GO 6917
6917: DISABLE
// begin enable ;
6918: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6919: LD_ADDR_OWVAR 47
6923: PUSH
6924: LD_STRING #tick
6926: PUSH
6927: LD_OWVAR 1
6931: PUSH
6932: LD_STRING #points
6934: PUSH
6935: LD_EXP 10
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: ST_TO_ADDR
// end ;
6946: END
// every 0 0$01 trigger game_over do
6947: LD_EXP 7
6951: IFFALSE 7010
6953: GO 6955
6955: DISABLE
// begin Wait ( 0 0$02 ) ;
6956: LD_INT 70
6958: PPUSH
6959: CALL_OW 67
// DialogueOn ;
6963: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6967: LD_ADDR_OWVAR 47
6971: PUSH
6972: LD_STRING #game-points
6974: PUSH
6975: LD_OWVAR 78
6979: PUSH
6980: LD_EXP 10
6984: PUSH
6985: LD_STRING #game-time
6987: PUSH
6988: LD_OWVAR 1
6992: PUSH
6993: LD_STRING #game-difficulty
6995: PUSH
6996: LD_OWVAR 67
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: ST_TO_ADDR
// end ; end_of_file
7010: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
7011: LD_OWVAR 1
7015: PUSH
7016: LD_INT 52500
7018: LESS
7019: IFFALSE 7043
7021: GO 7023
7023: DISABLE
// begin enable ;
7024: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
7025: LD_INT 1
7027: PPUSH
7028: LD_INT 5
7030: PPUSH
7031: CALL_OW 12
7035: PPUSH
7036: LD_INT 1
7038: PPUSH
7039: CALL_OW 57
// end ; end_of_file
7043: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7044: LD_INT 0
7046: PPUSH
// ar_miner := 81 ;
7047: LD_ADDR_EXP 25
7051: PUSH
7052: LD_INT 81
7054: ST_TO_ADDR
// ar_crane := 88 ;
7055: LD_ADDR_EXP 24
7059: PUSH
7060: LD_INT 88
7062: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7063: LD_ADDR_EXP 19
7067: PUSH
7068: LD_INT 89
7070: ST_TO_ADDR
// us_hack := 99 ;
7071: LD_ADDR_EXP 20
7075: PUSH
7076: LD_INT 99
7078: ST_TO_ADDR
// us_artillery := 97 ;
7079: LD_ADDR_EXP 21
7083: PUSH
7084: LD_INT 97
7086: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7087: LD_ADDR_EXP 22
7091: PUSH
7092: LD_INT 91
7094: ST_TO_ADDR
// ar_mortar := 92 ;
7095: LD_ADDR_EXP 23
7099: PUSH
7100: LD_INT 92
7102: ST_TO_ADDR
// ru_radar := 98 ;
7103: LD_ADDR_EXP 18
7107: PUSH
7108: LD_INT 98
7110: ST_TO_ADDR
// tech_Artillery := 80 ;
7111: LD_ADDR_EXP 26
7115: PUSH
7116: LD_INT 80
7118: ST_TO_ADDR
// tech_RadMat := 81 ;
7119: LD_ADDR_EXP 27
7123: PUSH
7124: LD_INT 81
7126: ST_TO_ADDR
// tech_BasicTools := 82 ;
7127: LD_ADDR_EXP 28
7131: PUSH
7132: LD_INT 82
7134: ST_TO_ADDR
// tech_Cargo := 83 ;
7135: LD_ADDR_EXP 29
7139: PUSH
7140: LD_INT 83
7142: ST_TO_ADDR
// tech_Track := 84 ;
7143: LD_ADDR_EXP 30
7147: PUSH
7148: LD_INT 84
7150: ST_TO_ADDR
// tech_Crane := 85 ;
7151: LD_ADDR_EXP 31
7155: PUSH
7156: LD_INT 85
7158: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7159: LD_ADDR_EXP 32
7163: PUSH
7164: LD_INT 86
7166: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7167: LD_ADDR_EXP 33
7171: PUSH
7172: LD_INT 87
7174: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
7175: LD_ADDR_EXP 34
7179: PUSH
7180: LD_INT 88
7182: ST_TO_ADDR
// class_mastodont := 31 ;
7183: LD_ADDR_EXP 35
7187: PUSH
7188: LD_INT 31
7190: ST_TO_ADDR
// class_horse := 21 ;
7191: LD_ADDR_EXP 36
7195: PUSH
7196: LD_INT 21
7198: ST_TO_ADDR
// end ;
7199: LD_VAR 0 1
7203: RET
// every 1 do
7204: GO 7206
7206: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7207: CALL 7044 0 0
7211: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7212: LD_INT 0
7214: PPUSH
// if p2 = 100 then
7215: LD_VAR 0 2
7219: PUSH
7220: LD_INT 100
7222: EQUAL
7223: IFFALSE 8226
// begin if not StreamModeActive then
7225: LD_EXP 37
7229: NOT
7230: IFFALSE 7240
// StreamModeActive := true ;
7232: LD_ADDR_EXP 37
7236: PUSH
7237: LD_INT 1
7239: ST_TO_ADDR
// if p3 = 0 then
7240: LD_VAR 0 3
7244: PUSH
7245: LD_INT 0
7247: EQUAL
7248: IFFALSE 7254
// InitStreamMode ;
7250: CALL 8386 0 0
// if p3 = 1 then
7254: LD_VAR 0 3
7258: PUSH
7259: LD_INT 1
7261: EQUAL
7262: IFFALSE 7272
// sRocket := true ;
7264: LD_ADDR_EXP 42
7268: PUSH
7269: LD_INT 1
7271: ST_TO_ADDR
// if p3 = 2 then
7272: LD_VAR 0 3
7276: PUSH
7277: LD_INT 2
7279: EQUAL
7280: IFFALSE 7290
// sSpeed := true ;
7282: LD_ADDR_EXP 41
7286: PUSH
7287: LD_INT 1
7289: ST_TO_ADDR
// if p3 = 3 then
7290: LD_VAR 0 3
7294: PUSH
7295: LD_INT 3
7297: EQUAL
7298: IFFALSE 7308
// sEngine := true ;
7300: LD_ADDR_EXP 43
7304: PUSH
7305: LD_INT 1
7307: ST_TO_ADDR
// if p3 = 4 then
7308: LD_VAR 0 3
7312: PUSH
7313: LD_INT 4
7315: EQUAL
7316: IFFALSE 7326
// sSpec := true ;
7318: LD_ADDR_EXP 40
7322: PUSH
7323: LD_INT 1
7325: ST_TO_ADDR
// if p3 = 5 then
7326: LD_VAR 0 3
7330: PUSH
7331: LD_INT 5
7333: EQUAL
7334: IFFALSE 7344
// sLevel := true ;
7336: LD_ADDR_EXP 44
7340: PUSH
7341: LD_INT 1
7343: ST_TO_ADDR
// if p3 = 6 then
7344: LD_VAR 0 3
7348: PUSH
7349: LD_INT 6
7351: EQUAL
7352: IFFALSE 7362
// sArmoury := true ;
7354: LD_ADDR_EXP 45
7358: PUSH
7359: LD_INT 1
7361: ST_TO_ADDR
// if p3 = 7 then
7362: LD_VAR 0 3
7366: PUSH
7367: LD_INT 7
7369: EQUAL
7370: IFFALSE 7380
// sRadar := true ;
7372: LD_ADDR_EXP 46
7376: PUSH
7377: LD_INT 1
7379: ST_TO_ADDR
// if p3 = 8 then
7380: LD_VAR 0 3
7384: PUSH
7385: LD_INT 8
7387: EQUAL
7388: IFFALSE 7398
// sBunker := true ;
7390: LD_ADDR_EXP 47
7394: PUSH
7395: LD_INT 1
7397: ST_TO_ADDR
// if p3 = 9 then
7398: LD_VAR 0 3
7402: PUSH
7403: LD_INT 9
7405: EQUAL
7406: IFFALSE 7416
// sHack := true ;
7408: LD_ADDR_EXP 48
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
// if p3 = 10 then
7416: LD_VAR 0 3
7420: PUSH
7421: LD_INT 10
7423: EQUAL
7424: IFFALSE 7434
// sFire := true ;
7426: LD_ADDR_EXP 49
7430: PUSH
7431: LD_INT 1
7433: ST_TO_ADDR
// if p3 = 11 then
7434: LD_VAR 0 3
7438: PUSH
7439: LD_INT 11
7441: EQUAL
7442: IFFALSE 7452
// sRefresh := true ;
7444: LD_ADDR_EXP 50
7448: PUSH
7449: LD_INT 1
7451: ST_TO_ADDR
// if p3 = 12 then
7452: LD_VAR 0 3
7456: PUSH
7457: LD_INT 12
7459: EQUAL
7460: IFFALSE 7470
// sExp := true ;
7462: LD_ADDR_EXP 51
7466: PUSH
7467: LD_INT 1
7469: ST_TO_ADDR
// if p3 = 13 then
7470: LD_VAR 0 3
7474: PUSH
7475: LD_INT 13
7477: EQUAL
7478: IFFALSE 7488
// sDepot := true ;
7480: LD_ADDR_EXP 52
7484: PUSH
7485: LD_INT 1
7487: ST_TO_ADDR
// if p3 = 14 then
7488: LD_VAR 0 3
7492: PUSH
7493: LD_INT 14
7495: EQUAL
7496: IFFALSE 7506
// sFlag := true ;
7498: LD_ADDR_EXP 53
7502: PUSH
7503: LD_INT 1
7505: ST_TO_ADDR
// if p3 = 15 then
7506: LD_VAR 0 3
7510: PUSH
7511: LD_INT 15
7513: EQUAL
7514: IFFALSE 7524
// sKamikadze := true ;
7516: LD_ADDR_EXP 61
7520: PUSH
7521: LD_INT 1
7523: ST_TO_ADDR
// if p3 = 16 then
7524: LD_VAR 0 3
7528: PUSH
7529: LD_INT 16
7531: EQUAL
7532: IFFALSE 7542
// sTroll := true ;
7534: LD_ADDR_EXP 62
7538: PUSH
7539: LD_INT 1
7541: ST_TO_ADDR
// if p3 = 17 then
7542: LD_VAR 0 3
7546: PUSH
7547: LD_INT 17
7549: EQUAL
7550: IFFALSE 7560
// sSlow := true ;
7552: LD_ADDR_EXP 63
7556: PUSH
7557: LD_INT 1
7559: ST_TO_ADDR
// if p3 = 18 then
7560: LD_VAR 0 3
7564: PUSH
7565: LD_INT 18
7567: EQUAL
7568: IFFALSE 7578
// sLack := true ;
7570: LD_ADDR_EXP 64
7574: PUSH
7575: LD_INT 1
7577: ST_TO_ADDR
// if p3 = 19 then
7578: LD_VAR 0 3
7582: PUSH
7583: LD_INT 19
7585: EQUAL
7586: IFFALSE 7596
// sTank := true ;
7588: LD_ADDR_EXP 66
7592: PUSH
7593: LD_INT 1
7595: ST_TO_ADDR
// if p3 = 20 then
7596: LD_VAR 0 3
7600: PUSH
7601: LD_INT 20
7603: EQUAL
7604: IFFALSE 7614
// sRemote := true ;
7606: LD_ADDR_EXP 67
7610: PUSH
7611: LD_INT 1
7613: ST_TO_ADDR
// if p3 = 21 then
7614: LD_VAR 0 3
7618: PUSH
7619: LD_INT 21
7621: EQUAL
7622: IFFALSE 7632
// sPowell := true ;
7624: LD_ADDR_EXP 68
7628: PUSH
7629: LD_INT 1
7631: ST_TO_ADDR
// if p3 = 22 then
7632: LD_VAR 0 3
7636: PUSH
7637: LD_INT 22
7639: EQUAL
7640: IFFALSE 7650
// sTeleport := true ;
7642: LD_ADDR_EXP 71
7646: PUSH
7647: LD_INT 1
7649: ST_TO_ADDR
// if p3 = 23 then
7650: LD_VAR 0 3
7654: PUSH
7655: LD_INT 23
7657: EQUAL
7658: IFFALSE 7668
// sOilTower := true ;
7660: LD_ADDR_EXP 73
7664: PUSH
7665: LD_INT 1
7667: ST_TO_ADDR
// if p3 = 24 then
7668: LD_VAR 0 3
7672: PUSH
7673: LD_INT 24
7675: EQUAL
7676: IFFALSE 7686
// sShovel := true ;
7678: LD_ADDR_EXP 74
7682: PUSH
7683: LD_INT 1
7685: ST_TO_ADDR
// if p3 = 25 then
7686: LD_VAR 0 3
7690: PUSH
7691: LD_INT 25
7693: EQUAL
7694: IFFALSE 7704
// sSheik := true ;
7696: LD_ADDR_EXP 75
7700: PUSH
7701: LD_INT 1
7703: ST_TO_ADDR
// if p3 = 26 then
7704: LD_VAR 0 3
7708: PUSH
7709: LD_INT 26
7711: EQUAL
7712: IFFALSE 7722
// sEarthquake := true ;
7714: LD_ADDR_EXP 77
7718: PUSH
7719: LD_INT 1
7721: ST_TO_ADDR
// if p3 = 27 then
7722: LD_VAR 0 3
7726: PUSH
7727: LD_INT 27
7729: EQUAL
7730: IFFALSE 7740
// sAI := true ;
7732: LD_ADDR_EXP 78
7736: PUSH
7737: LD_INT 1
7739: ST_TO_ADDR
// if p3 = 28 then
7740: LD_VAR 0 3
7744: PUSH
7745: LD_INT 28
7747: EQUAL
7748: IFFALSE 7758
// sCargo := true ;
7750: LD_ADDR_EXP 81
7754: PUSH
7755: LD_INT 1
7757: ST_TO_ADDR
// if p3 = 29 then
7758: LD_VAR 0 3
7762: PUSH
7763: LD_INT 29
7765: EQUAL
7766: IFFALSE 7776
// sDLaser := true ;
7768: LD_ADDR_EXP 82
7772: PUSH
7773: LD_INT 1
7775: ST_TO_ADDR
// if p3 = 30 then
7776: LD_VAR 0 3
7780: PUSH
7781: LD_INT 30
7783: EQUAL
7784: IFFALSE 7794
// sExchange := true ;
7786: LD_ADDR_EXP 83
7790: PUSH
7791: LD_INT 1
7793: ST_TO_ADDR
// if p3 = 31 then
7794: LD_VAR 0 3
7798: PUSH
7799: LD_INT 31
7801: EQUAL
7802: IFFALSE 7812
// sFac := true ;
7804: LD_ADDR_EXP 84
7808: PUSH
7809: LD_INT 1
7811: ST_TO_ADDR
// if p3 = 32 then
7812: LD_VAR 0 3
7816: PUSH
7817: LD_INT 32
7819: EQUAL
7820: IFFALSE 7830
// sPower := true ;
7822: LD_ADDR_EXP 85
7826: PUSH
7827: LD_INT 1
7829: ST_TO_ADDR
// if p3 = 33 then
7830: LD_VAR 0 3
7834: PUSH
7835: LD_INT 33
7837: EQUAL
7838: IFFALSE 7848
// sRandom := true ;
7840: LD_ADDR_EXP 86
7844: PUSH
7845: LD_INT 1
7847: ST_TO_ADDR
// if p3 = 34 then
7848: LD_VAR 0 3
7852: PUSH
7853: LD_INT 34
7855: EQUAL
7856: IFFALSE 7866
// sShield := true ;
7858: LD_ADDR_EXP 87
7862: PUSH
7863: LD_INT 1
7865: ST_TO_ADDR
// if p3 = 35 then
7866: LD_VAR 0 3
7870: PUSH
7871: LD_INT 35
7873: EQUAL
7874: IFFALSE 7884
// sTime := true ;
7876: LD_ADDR_EXP 88
7880: PUSH
7881: LD_INT 1
7883: ST_TO_ADDR
// if p3 = 36 then
7884: LD_VAR 0 3
7888: PUSH
7889: LD_INT 36
7891: EQUAL
7892: IFFALSE 7902
// sTools := true ;
7894: LD_ADDR_EXP 89
7898: PUSH
7899: LD_INT 1
7901: ST_TO_ADDR
// if p3 = 101 then
7902: LD_VAR 0 3
7906: PUSH
7907: LD_INT 101
7909: EQUAL
7910: IFFALSE 7920
// sSold := true ;
7912: LD_ADDR_EXP 54
7916: PUSH
7917: LD_INT 1
7919: ST_TO_ADDR
// if p3 = 102 then
7920: LD_VAR 0 3
7924: PUSH
7925: LD_INT 102
7927: EQUAL
7928: IFFALSE 7938
// sDiff := true ;
7930: LD_ADDR_EXP 55
7934: PUSH
7935: LD_INT 1
7937: ST_TO_ADDR
// if p3 = 103 then
7938: LD_VAR 0 3
7942: PUSH
7943: LD_INT 103
7945: EQUAL
7946: IFFALSE 7956
// sFog := true ;
7948: LD_ADDR_EXP 58
7952: PUSH
7953: LD_INT 1
7955: ST_TO_ADDR
// if p3 = 104 then
7956: LD_VAR 0 3
7960: PUSH
7961: LD_INT 104
7963: EQUAL
7964: IFFALSE 7974
// sReset := true ;
7966: LD_ADDR_EXP 59
7970: PUSH
7971: LD_INT 1
7973: ST_TO_ADDR
// if p3 = 105 then
7974: LD_VAR 0 3
7978: PUSH
7979: LD_INT 105
7981: EQUAL
7982: IFFALSE 7992
// sSun := true ;
7984: LD_ADDR_EXP 60
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// if p3 = 106 then
7992: LD_VAR 0 3
7996: PUSH
7997: LD_INT 106
7999: EQUAL
8000: IFFALSE 8010
// sTiger := true ;
8002: LD_ADDR_EXP 56
8006: PUSH
8007: LD_INT 1
8009: ST_TO_ADDR
// if p3 = 107 then
8010: LD_VAR 0 3
8014: PUSH
8015: LD_INT 107
8017: EQUAL
8018: IFFALSE 8028
// sBomb := true ;
8020: LD_ADDR_EXP 57
8024: PUSH
8025: LD_INT 1
8027: ST_TO_ADDR
// if p3 = 108 then
8028: LD_VAR 0 3
8032: PUSH
8033: LD_INT 108
8035: EQUAL
8036: IFFALSE 8046
// sWound := true ;
8038: LD_ADDR_EXP 65
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// if p3 = 109 then
8046: LD_VAR 0 3
8050: PUSH
8051: LD_INT 109
8053: EQUAL
8054: IFFALSE 8064
// sBetray := true ;
8056: LD_ADDR_EXP 69
8060: PUSH
8061: LD_INT 1
8063: ST_TO_ADDR
// if p3 = 110 then
8064: LD_VAR 0 3
8068: PUSH
8069: LD_INT 110
8071: EQUAL
8072: IFFALSE 8082
// sContamin := true ;
8074: LD_ADDR_EXP 70
8078: PUSH
8079: LD_INT 1
8081: ST_TO_ADDR
// if p3 = 111 then
8082: LD_VAR 0 3
8086: PUSH
8087: LD_INT 111
8089: EQUAL
8090: IFFALSE 8100
// sOil := true ;
8092: LD_ADDR_EXP 72
8096: PUSH
8097: LD_INT 1
8099: ST_TO_ADDR
// if p3 = 112 then
8100: LD_VAR 0 3
8104: PUSH
8105: LD_INT 112
8107: EQUAL
8108: IFFALSE 8118
// sStu := true ;
8110: LD_ADDR_EXP 76
8114: PUSH
8115: LD_INT 1
8117: ST_TO_ADDR
// if p3 = 113 then
8118: LD_VAR 0 3
8122: PUSH
8123: LD_INT 113
8125: EQUAL
8126: IFFALSE 8136
// sBazooka := true ;
8128: LD_ADDR_EXP 79
8132: PUSH
8133: LD_INT 1
8135: ST_TO_ADDR
// if p3 = 114 then
8136: LD_VAR 0 3
8140: PUSH
8141: LD_INT 114
8143: EQUAL
8144: IFFALSE 8154
// sMortar := true ;
8146: LD_ADDR_EXP 80
8150: PUSH
8151: LD_INT 1
8153: ST_TO_ADDR
// if p3 = 115 then
8154: LD_VAR 0 3
8158: PUSH
8159: LD_INT 115
8161: EQUAL
8162: IFFALSE 8172
// sRanger := true ;
8164: LD_ADDR_EXP 90
8168: PUSH
8169: LD_INT 1
8171: ST_TO_ADDR
// if p3 = 116 then
8172: LD_VAR 0 3
8176: PUSH
8177: LD_INT 116
8179: EQUAL
8180: IFFALSE 8190
// sComputer := true ;
8182: LD_ADDR_EXP 91
8186: PUSH
8187: LD_INT 1
8189: ST_TO_ADDR
// if p3 = 117 then
8190: LD_VAR 0 3
8194: PUSH
8195: LD_INT 117
8197: EQUAL
8198: IFFALSE 8208
// s30 := true ;
8200: LD_ADDR_EXP 92
8204: PUSH
8205: LD_INT 1
8207: ST_TO_ADDR
// if p3 = 118 then
8208: LD_VAR 0 3
8212: PUSH
8213: LD_INT 118
8215: EQUAL
8216: IFFALSE 8226
// s60 := true ;
8218: LD_ADDR_EXP 93
8222: PUSH
8223: LD_INT 1
8225: ST_TO_ADDR
// end ; if p2 = 101 then
8226: LD_VAR 0 2
8230: PUSH
8231: LD_INT 101
8233: EQUAL
8234: IFFALSE 8362
// begin case p3 of 1 :
8236: LD_VAR 0 3
8240: PUSH
8241: LD_INT 1
8243: DOUBLE
8244: EQUAL
8245: IFTRUE 8249
8247: GO 8256
8249: POP
// hHackUnlimitedResources ; 2 :
8250: CALL 19958 0 0
8254: GO 8362
8256: LD_INT 2
8258: DOUBLE
8259: EQUAL
8260: IFTRUE 8264
8262: GO 8271
8264: POP
// hHackSetLevel10 ; 3 :
8265: CALL 20091 0 0
8269: GO 8362
8271: LD_INT 3
8273: DOUBLE
8274: EQUAL
8275: IFTRUE 8279
8277: GO 8286
8279: POP
// hHackSetLevel10YourUnits ; 4 :
8280: CALL 20176 0 0
8284: GO 8362
8286: LD_INT 4
8288: DOUBLE
8289: EQUAL
8290: IFTRUE 8294
8292: GO 8301
8294: POP
// hHackInvincible ; 5 :
8295: CALL 20624 0 0
8299: GO 8362
8301: LD_INT 5
8303: DOUBLE
8304: EQUAL
8305: IFTRUE 8309
8307: GO 8316
8309: POP
// hHackInvisible ; 6 :
8310: CALL 20735 0 0
8314: GO 8362
8316: LD_INT 6
8318: DOUBLE
8319: EQUAL
8320: IFTRUE 8324
8322: GO 8331
8324: POP
// hHackChangeYourSide ; 7 :
8325: CALL 20792 0 0
8329: GO 8362
8331: LD_INT 7
8333: DOUBLE
8334: EQUAL
8335: IFTRUE 8339
8337: GO 8346
8339: POP
// hHackChangeUnitSide ; 8 :
8340: CALL 20834 0 0
8344: GO 8362
8346: LD_INT 8
8348: DOUBLE
8349: EQUAL
8350: IFTRUE 8354
8352: GO 8361
8354: POP
// hHackFog ; end ;
8355: CALL 20935 0 0
8359: GO 8362
8361: POP
// end ; end ;
8362: LD_VAR 0 7
8366: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8367: GO 8369
8369: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8370: LD_STRING initStreamRollete();
8372: PPUSH
8373: CALL_OW 559
// InitStreamMode ;
8377: CALL 8386 0 0
// DefineStreamItems ( ) ;
8381: CALL 8850 0 0
// end ;
8385: END
// function InitStreamMode ; begin
8386: LD_INT 0
8388: PPUSH
// streamModeActive := false ;
8389: LD_ADDR_EXP 37
8393: PUSH
8394: LD_INT 0
8396: ST_TO_ADDR
// normalCounter := 36 ;
8397: LD_ADDR_EXP 38
8401: PUSH
8402: LD_INT 36
8404: ST_TO_ADDR
// hardcoreCounter := 16 ;
8405: LD_ADDR_EXP 39
8409: PUSH
8410: LD_INT 16
8412: ST_TO_ADDR
// sRocket := false ;
8413: LD_ADDR_EXP 42
8417: PUSH
8418: LD_INT 0
8420: ST_TO_ADDR
// sSpeed := false ;
8421: LD_ADDR_EXP 41
8425: PUSH
8426: LD_INT 0
8428: ST_TO_ADDR
// sEngine := false ;
8429: LD_ADDR_EXP 43
8433: PUSH
8434: LD_INT 0
8436: ST_TO_ADDR
// sSpec := false ;
8437: LD_ADDR_EXP 40
8441: PUSH
8442: LD_INT 0
8444: ST_TO_ADDR
// sLevel := false ;
8445: LD_ADDR_EXP 44
8449: PUSH
8450: LD_INT 0
8452: ST_TO_ADDR
// sArmoury := false ;
8453: LD_ADDR_EXP 45
8457: PUSH
8458: LD_INT 0
8460: ST_TO_ADDR
// sRadar := false ;
8461: LD_ADDR_EXP 46
8465: PUSH
8466: LD_INT 0
8468: ST_TO_ADDR
// sBunker := false ;
8469: LD_ADDR_EXP 47
8473: PUSH
8474: LD_INT 0
8476: ST_TO_ADDR
// sHack := false ;
8477: LD_ADDR_EXP 48
8481: PUSH
8482: LD_INT 0
8484: ST_TO_ADDR
// sFire := false ;
8485: LD_ADDR_EXP 49
8489: PUSH
8490: LD_INT 0
8492: ST_TO_ADDR
// sRefresh := false ;
8493: LD_ADDR_EXP 50
8497: PUSH
8498: LD_INT 0
8500: ST_TO_ADDR
// sExp := false ;
8501: LD_ADDR_EXP 51
8505: PUSH
8506: LD_INT 0
8508: ST_TO_ADDR
// sDepot := false ;
8509: LD_ADDR_EXP 52
8513: PUSH
8514: LD_INT 0
8516: ST_TO_ADDR
// sFlag := false ;
8517: LD_ADDR_EXP 53
8521: PUSH
8522: LD_INT 0
8524: ST_TO_ADDR
// sKamikadze := false ;
8525: LD_ADDR_EXP 61
8529: PUSH
8530: LD_INT 0
8532: ST_TO_ADDR
// sTroll := false ;
8533: LD_ADDR_EXP 62
8537: PUSH
8538: LD_INT 0
8540: ST_TO_ADDR
// sSlow := false ;
8541: LD_ADDR_EXP 63
8545: PUSH
8546: LD_INT 0
8548: ST_TO_ADDR
// sLack := false ;
8549: LD_ADDR_EXP 64
8553: PUSH
8554: LD_INT 0
8556: ST_TO_ADDR
// sTank := false ;
8557: LD_ADDR_EXP 66
8561: PUSH
8562: LD_INT 0
8564: ST_TO_ADDR
// sRemote := false ;
8565: LD_ADDR_EXP 67
8569: PUSH
8570: LD_INT 0
8572: ST_TO_ADDR
// sPowell := false ;
8573: LD_ADDR_EXP 68
8577: PUSH
8578: LD_INT 0
8580: ST_TO_ADDR
// sTeleport := false ;
8581: LD_ADDR_EXP 71
8585: PUSH
8586: LD_INT 0
8588: ST_TO_ADDR
// sOilTower := false ;
8589: LD_ADDR_EXP 73
8593: PUSH
8594: LD_INT 0
8596: ST_TO_ADDR
// sShovel := false ;
8597: LD_ADDR_EXP 74
8601: PUSH
8602: LD_INT 0
8604: ST_TO_ADDR
// sSheik := false ;
8605: LD_ADDR_EXP 75
8609: PUSH
8610: LD_INT 0
8612: ST_TO_ADDR
// sEarthquake := false ;
8613: LD_ADDR_EXP 77
8617: PUSH
8618: LD_INT 0
8620: ST_TO_ADDR
// sAI := false ;
8621: LD_ADDR_EXP 78
8625: PUSH
8626: LD_INT 0
8628: ST_TO_ADDR
// sCargo := false ;
8629: LD_ADDR_EXP 81
8633: PUSH
8634: LD_INT 0
8636: ST_TO_ADDR
// sDLaser := false ;
8637: LD_ADDR_EXP 82
8641: PUSH
8642: LD_INT 0
8644: ST_TO_ADDR
// sExchange := false ;
8645: LD_ADDR_EXP 83
8649: PUSH
8650: LD_INT 0
8652: ST_TO_ADDR
// sFac := false ;
8653: LD_ADDR_EXP 84
8657: PUSH
8658: LD_INT 0
8660: ST_TO_ADDR
// sPower := false ;
8661: LD_ADDR_EXP 85
8665: PUSH
8666: LD_INT 0
8668: ST_TO_ADDR
// sRandom := false ;
8669: LD_ADDR_EXP 86
8673: PUSH
8674: LD_INT 0
8676: ST_TO_ADDR
// sShield := false ;
8677: LD_ADDR_EXP 87
8681: PUSH
8682: LD_INT 0
8684: ST_TO_ADDR
// sTime := false ;
8685: LD_ADDR_EXP 88
8689: PUSH
8690: LD_INT 0
8692: ST_TO_ADDR
// sTools := false ;
8693: LD_ADDR_EXP 89
8697: PUSH
8698: LD_INT 0
8700: ST_TO_ADDR
// sSold := false ;
8701: LD_ADDR_EXP 54
8705: PUSH
8706: LD_INT 0
8708: ST_TO_ADDR
// sDiff := false ;
8709: LD_ADDR_EXP 55
8713: PUSH
8714: LD_INT 0
8716: ST_TO_ADDR
// sFog := false ;
8717: LD_ADDR_EXP 58
8721: PUSH
8722: LD_INT 0
8724: ST_TO_ADDR
// sReset := false ;
8725: LD_ADDR_EXP 59
8729: PUSH
8730: LD_INT 0
8732: ST_TO_ADDR
// sSun := false ;
8733: LD_ADDR_EXP 60
8737: PUSH
8738: LD_INT 0
8740: ST_TO_ADDR
// sTiger := false ;
8741: LD_ADDR_EXP 56
8745: PUSH
8746: LD_INT 0
8748: ST_TO_ADDR
// sBomb := false ;
8749: LD_ADDR_EXP 57
8753: PUSH
8754: LD_INT 0
8756: ST_TO_ADDR
// sWound := false ;
8757: LD_ADDR_EXP 65
8761: PUSH
8762: LD_INT 0
8764: ST_TO_ADDR
// sBetray := false ;
8765: LD_ADDR_EXP 69
8769: PUSH
8770: LD_INT 0
8772: ST_TO_ADDR
// sContamin := false ;
8773: LD_ADDR_EXP 70
8777: PUSH
8778: LD_INT 0
8780: ST_TO_ADDR
// sOil := false ;
8781: LD_ADDR_EXP 72
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// sStu := false ;
8789: LD_ADDR_EXP 76
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// sBazooka := false ;
8797: LD_ADDR_EXP 79
8801: PUSH
8802: LD_INT 0
8804: ST_TO_ADDR
// sMortar := false ;
8805: LD_ADDR_EXP 80
8809: PUSH
8810: LD_INT 0
8812: ST_TO_ADDR
// sRanger := false ;
8813: LD_ADDR_EXP 90
8817: PUSH
8818: LD_INT 0
8820: ST_TO_ADDR
// sComputer := false ;
8821: LD_ADDR_EXP 91
8825: PUSH
8826: LD_INT 0
8828: ST_TO_ADDR
// s30 := false ;
8829: LD_ADDR_EXP 92
8833: PUSH
8834: LD_INT 0
8836: ST_TO_ADDR
// s60 := false ;
8837: LD_ADDR_EXP 93
8841: PUSH
8842: LD_INT 0
8844: ST_TO_ADDR
// end ;
8845: LD_VAR 0 1
8849: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8850: LD_INT 0
8852: PPUSH
8853: PPUSH
8854: PPUSH
8855: PPUSH
8856: PPUSH
// result := [ ] ;
8857: LD_ADDR_VAR 0 1
8861: PUSH
8862: EMPTY
8863: ST_TO_ADDR
// if campaign_id = 1 then
8864: LD_OWVAR 69
8868: PUSH
8869: LD_INT 1
8871: EQUAL
8872: IFFALSE 12038
// begin case mission_number of 1 :
8874: LD_OWVAR 70
8878: PUSH
8879: LD_INT 1
8881: DOUBLE
8882: EQUAL
8883: IFTRUE 8887
8885: GO 8963
8887: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8888: LD_ADDR_VAR 0 1
8892: PUSH
8893: LD_INT 2
8895: PUSH
8896: LD_INT 4
8898: PUSH
8899: LD_INT 11
8901: PUSH
8902: LD_INT 12
8904: PUSH
8905: LD_INT 15
8907: PUSH
8908: LD_INT 16
8910: PUSH
8911: LD_INT 22
8913: PUSH
8914: LD_INT 23
8916: PUSH
8917: LD_INT 26
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 101
8933: PUSH
8934: LD_INT 102
8936: PUSH
8937: LD_INT 106
8939: PUSH
8940: LD_INT 116
8942: PUSH
8943: LD_INT 117
8945: PUSH
8946: LD_INT 118
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: ST_TO_ADDR
8961: GO 12036
8963: LD_INT 2
8965: DOUBLE
8966: EQUAL
8967: IFTRUE 8971
8969: GO 9055
8971: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
8972: LD_ADDR_VAR 0 1
8976: PUSH
8977: LD_INT 2
8979: PUSH
8980: LD_INT 4
8982: PUSH
8983: LD_INT 11
8985: PUSH
8986: LD_INT 12
8988: PUSH
8989: LD_INT 15
8991: PUSH
8992: LD_INT 16
8994: PUSH
8995: LD_INT 22
8997: PUSH
8998: LD_INT 23
9000: PUSH
9001: LD_INT 26
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: PUSH
9015: LD_INT 101
9017: PUSH
9018: LD_INT 102
9020: PUSH
9021: LD_INT 105
9023: PUSH
9024: LD_INT 106
9026: PUSH
9027: LD_INT 108
9029: PUSH
9030: LD_INT 116
9032: PUSH
9033: LD_INT 117
9035: PUSH
9036: LD_INT 118
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: ST_TO_ADDR
9053: GO 12036
9055: LD_INT 3
9057: DOUBLE
9058: EQUAL
9059: IFTRUE 9063
9061: GO 9151
9063: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9064: LD_ADDR_VAR 0 1
9068: PUSH
9069: LD_INT 2
9071: PUSH
9072: LD_INT 4
9074: PUSH
9075: LD_INT 5
9077: PUSH
9078: LD_INT 11
9080: PUSH
9081: LD_INT 12
9083: PUSH
9084: LD_INT 15
9086: PUSH
9087: LD_INT 16
9089: PUSH
9090: LD_INT 22
9092: PUSH
9093: LD_INT 26
9095: PUSH
9096: LD_INT 36
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: PUSH
9111: LD_INT 101
9113: PUSH
9114: LD_INT 102
9116: PUSH
9117: LD_INT 105
9119: PUSH
9120: LD_INT 106
9122: PUSH
9123: LD_INT 108
9125: PUSH
9126: LD_INT 116
9128: PUSH
9129: LD_INT 117
9131: PUSH
9132: LD_INT 118
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: ST_TO_ADDR
9149: GO 12036
9151: LD_INT 4
9153: DOUBLE
9154: EQUAL
9155: IFTRUE 9159
9157: GO 9255
9159: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9160: LD_ADDR_VAR 0 1
9164: PUSH
9165: LD_INT 2
9167: PUSH
9168: LD_INT 4
9170: PUSH
9171: LD_INT 5
9173: PUSH
9174: LD_INT 8
9176: PUSH
9177: LD_INT 11
9179: PUSH
9180: LD_INT 12
9182: PUSH
9183: LD_INT 15
9185: PUSH
9186: LD_INT 16
9188: PUSH
9189: LD_INT 22
9191: PUSH
9192: LD_INT 23
9194: PUSH
9195: LD_INT 26
9197: PUSH
9198: LD_INT 36
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: PUSH
9215: LD_INT 101
9217: PUSH
9218: LD_INT 102
9220: PUSH
9221: LD_INT 105
9223: PUSH
9224: LD_INT 106
9226: PUSH
9227: LD_INT 108
9229: PUSH
9230: LD_INT 116
9232: PUSH
9233: LD_INT 117
9235: PUSH
9236: LD_INT 118
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: ST_TO_ADDR
9253: GO 12036
9255: LD_INT 5
9257: DOUBLE
9258: EQUAL
9259: IFTRUE 9263
9261: GO 9375
9263: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9264: LD_ADDR_VAR 0 1
9268: PUSH
9269: LD_INT 2
9271: PUSH
9272: LD_INT 4
9274: PUSH
9275: LD_INT 5
9277: PUSH
9278: LD_INT 6
9280: PUSH
9281: LD_INT 8
9283: PUSH
9284: LD_INT 11
9286: PUSH
9287: LD_INT 12
9289: PUSH
9290: LD_INT 15
9292: PUSH
9293: LD_INT 16
9295: PUSH
9296: LD_INT 22
9298: PUSH
9299: LD_INT 23
9301: PUSH
9302: LD_INT 25
9304: PUSH
9305: LD_INT 26
9307: PUSH
9308: LD_INT 36
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: PUSH
9327: LD_INT 101
9329: PUSH
9330: LD_INT 102
9332: PUSH
9333: LD_INT 105
9335: PUSH
9336: LD_INT 106
9338: PUSH
9339: LD_INT 108
9341: PUSH
9342: LD_INT 109
9344: PUSH
9345: LD_INT 112
9347: PUSH
9348: LD_INT 116
9350: PUSH
9351: LD_INT 117
9353: PUSH
9354: LD_INT 118
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: ST_TO_ADDR
9373: GO 12036
9375: LD_INT 6
9377: DOUBLE
9378: EQUAL
9379: IFTRUE 9383
9381: GO 9515
9383: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9384: LD_ADDR_VAR 0 1
9388: PUSH
9389: LD_INT 2
9391: PUSH
9392: LD_INT 4
9394: PUSH
9395: LD_INT 5
9397: PUSH
9398: LD_INT 6
9400: PUSH
9401: LD_INT 8
9403: PUSH
9404: LD_INT 11
9406: PUSH
9407: LD_INT 12
9409: PUSH
9410: LD_INT 15
9412: PUSH
9413: LD_INT 16
9415: PUSH
9416: LD_INT 20
9418: PUSH
9419: LD_INT 21
9421: PUSH
9422: LD_INT 22
9424: PUSH
9425: LD_INT 23
9427: PUSH
9428: LD_INT 25
9430: PUSH
9431: LD_INT 26
9433: PUSH
9434: LD_INT 30
9436: PUSH
9437: LD_INT 31
9439: PUSH
9440: LD_INT 32
9442: PUSH
9443: LD_INT 36
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 101
9469: PUSH
9470: LD_INT 102
9472: PUSH
9473: LD_INT 105
9475: PUSH
9476: LD_INT 106
9478: PUSH
9479: LD_INT 108
9481: PUSH
9482: LD_INT 109
9484: PUSH
9485: LD_INT 112
9487: PUSH
9488: LD_INT 116
9490: PUSH
9491: LD_INT 117
9493: PUSH
9494: LD_INT 118
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: ST_TO_ADDR
9513: GO 12036
9515: LD_INT 7
9517: DOUBLE
9518: EQUAL
9519: IFTRUE 9523
9521: GO 9635
9523: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9524: LD_ADDR_VAR 0 1
9528: PUSH
9529: LD_INT 2
9531: PUSH
9532: LD_INT 4
9534: PUSH
9535: LD_INT 5
9537: PUSH
9538: LD_INT 7
9540: PUSH
9541: LD_INT 11
9543: PUSH
9544: LD_INT 12
9546: PUSH
9547: LD_INT 15
9549: PUSH
9550: LD_INT 16
9552: PUSH
9553: LD_INT 20
9555: PUSH
9556: LD_INT 21
9558: PUSH
9559: LD_INT 22
9561: PUSH
9562: LD_INT 23
9564: PUSH
9565: LD_INT 25
9567: PUSH
9568: LD_INT 26
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 101
9589: PUSH
9590: LD_INT 102
9592: PUSH
9593: LD_INT 103
9595: PUSH
9596: LD_INT 105
9598: PUSH
9599: LD_INT 106
9601: PUSH
9602: LD_INT 108
9604: PUSH
9605: LD_INT 112
9607: PUSH
9608: LD_INT 116
9610: PUSH
9611: LD_INT 117
9613: PUSH
9614: LD_INT 118
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: ST_TO_ADDR
9633: GO 12036
9635: LD_INT 8
9637: DOUBLE
9638: EQUAL
9639: IFTRUE 9643
9641: GO 9783
9643: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9644: LD_ADDR_VAR 0 1
9648: PUSH
9649: LD_INT 2
9651: PUSH
9652: LD_INT 4
9654: PUSH
9655: LD_INT 5
9657: PUSH
9658: LD_INT 6
9660: PUSH
9661: LD_INT 7
9663: PUSH
9664: LD_INT 8
9666: PUSH
9667: LD_INT 11
9669: PUSH
9670: LD_INT 12
9672: PUSH
9673: LD_INT 15
9675: PUSH
9676: LD_INT 16
9678: PUSH
9679: LD_INT 20
9681: PUSH
9682: LD_INT 21
9684: PUSH
9685: LD_INT 22
9687: PUSH
9688: LD_INT 23
9690: PUSH
9691: LD_INT 25
9693: PUSH
9694: LD_INT 26
9696: PUSH
9697: LD_INT 30
9699: PUSH
9700: LD_INT 31
9702: PUSH
9703: LD_INT 32
9705: PUSH
9706: LD_INT 36
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 101
9733: PUSH
9734: LD_INT 102
9736: PUSH
9737: LD_INT 103
9739: PUSH
9740: LD_INT 105
9742: PUSH
9743: LD_INT 106
9745: PUSH
9746: LD_INT 108
9748: PUSH
9749: LD_INT 109
9751: PUSH
9752: LD_INT 112
9754: PUSH
9755: LD_INT 116
9757: PUSH
9758: LD_INT 117
9760: PUSH
9761: LD_INT 118
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: ST_TO_ADDR
9781: GO 12036
9783: LD_INT 9
9785: DOUBLE
9786: EQUAL
9787: IFTRUE 9791
9789: GO 9939
9791: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9792: LD_ADDR_VAR 0 1
9796: PUSH
9797: LD_INT 2
9799: PUSH
9800: LD_INT 4
9802: PUSH
9803: LD_INT 5
9805: PUSH
9806: LD_INT 6
9808: PUSH
9809: LD_INT 7
9811: PUSH
9812: LD_INT 8
9814: PUSH
9815: LD_INT 11
9817: PUSH
9818: LD_INT 12
9820: PUSH
9821: LD_INT 15
9823: PUSH
9824: LD_INT 16
9826: PUSH
9827: LD_INT 20
9829: PUSH
9830: LD_INT 21
9832: PUSH
9833: LD_INT 22
9835: PUSH
9836: LD_INT 23
9838: PUSH
9839: LD_INT 25
9841: PUSH
9842: LD_INT 26
9844: PUSH
9845: LD_INT 28
9847: PUSH
9848: LD_INT 30
9850: PUSH
9851: LD_INT 31
9853: PUSH
9854: LD_INT 32
9856: PUSH
9857: LD_INT 36
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 101
9885: PUSH
9886: LD_INT 102
9888: PUSH
9889: LD_INT 103
9891: PUSH
9892: LD_INT 105
9894: PUSH
9895: LD_INT 106
9897: PUSH
9898: LD_INT 108
9900: PUSH
9901: LD_INT 109
9903: PUSH
9904: LD_INT 112
9906: PUSH
9907: LD_INT 114
9909: PUSH
9910: LD_INT 116
9912: PUSH
9913: LD_INT 117
9915: PUSH
9916: LD_INT 118
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: ST_TO_ADDR
9937: GO 12036
9939: LD_INT 10
9941: DOUBLE
9942: EQUAL
9943: IFTRUE 9947
9945: GO 10143
9947: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9948: LD_ADDR_VAR 0 1
9952: PUSH
9953: LD_INT 2
9955: PUSH
9956: LD_INT 4
9958: PUSH
9959: LD_INT 5
9961: PUSH
9962: LD_INT 6
9964: PUSH
9965: LD_INT 7
9967: PUSH
9968: LD_INT 8
9970: PUSH
9971: LD_INT 9
9973: PUSH
9974: LD_INT 10
9976: PUSH
9977: LD_INT 11
9979: PUSH
9980: LD_INT 12
9982: PUSH
9983: LD_INT 13
9985: PUSH
9986: LD_INT 14
9988: PUSH
9989: LD_INT 15
9991: PUSH
9992: LD_INT 16
9994: PUSH
9995: LD_INT 17
9997: PUSH
9998: LD_INT 18
10000: PUSH
10001: LD_INT 19
10003: PUSH
10004: LD_INT 20
10006: PUSH
10007: LD_INT 21
10009: PUSH
10010: LD_INT 22
10012: PUSH
10013: LD_INT 23
10015: PUSH
10016: LD_INT 24
10018: PUSH
10019: LD_INT 25
10021: PUSH
10022: LD_INT 26
10024: PUSH
10025: LD_INT 28
10027: PUSH
10028: LD_INT 30
10030: PUSH
10031: LD_INT 31
10033: PUSH
10034: LD_INT 32
10036: PUSH
10037: LD_INT 36
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: PUSH
10071: LD_INT 101
10073: PUSH
10074: LD_INT 102
10076: PUSH
10077: LD_INT 103
10079: PUSH
10080: LD_INT 104
10082: PUSH
10083: LD_INT 105
10085: PUSH
10086: LD_INT 106
10088: PUSH
10089: LD_INT 107
10091: PUSH
10092: LD_INT 108
10094: PUSH
10095: LD_INT 109
10097: PUSH
10098: LD_INT 110
10100: PUSH
10101: LD_INT 111
10103: PUSH
10104: LD_INT 112
10106: PUSH
10107: LD_INT 114
10109: PUSH
10110: LD_INT 116
10112: PUSH
10113: LD_INT 117
10115: PUSH
10116: LD_INT 118
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: ST_TO_ADDR
10141: GO 12036
10143: LD_INT 11
10145: DOUBLE
10146: EQUAL
10147: IFTRUE 10151
10149: GO 10355
10151: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10152: LD_ADDR_VAR 0 1
10156: PUSH
10157: LD_INT 2
10159: PUSH
10160: LD_INT 3
10162: PUSH
10163: LD_INT 4
10165: PUSH
10166: LD_INT 5
10168: PUSH
10169: LD_INT 6
10171: PUSH
10172: LD_INT 7
10174: PUSH
10175: LD_INT 8
10177: PUSH
10178: LD_INT 9
10180: PUSH
10181: LD_INT 10
10183: PUSH
10184: LD_INT 11
10186: PUSH
10187: LD_INT 12
10189: PUSH
10190: LD_INT 13
10192: PUSH
10193: LD_INT 14
10195: PUSH
10196: LD_INT 15
10198: PUSH
10199: LD_INT 16
10201: PUSH
10202: LD_INT 17
10204: PUSH
10205: LD_INT 18
10207: PUSH
10208: LD_INT 19
10210: PUSH
10211: LD_INT 20
10213: PUSH
10214: LD_INT 21
10216: PUSH
10217: LD_INT 22
10219: PUSH
10220: LD_INT 23
10222: PUSH
10223: LD_INT 24
10225: PUSH
10226: LD_INT 25
10228: PUSH
10229: LD_INT 26
10231: PUSH
10232: LD_INT 28
10234: PUSH
10235: LD_INT 30
10237: PUSH
10238: LD_INT 31
10240: PUSH
10241: LD_INT 32
10243: PUSH
10244: LD_INT 34
10246: PUSH
10247: LD_INT 36
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 101
10285: PUSH
10286: LD_INT 102
10288: PUSH
10289: LD_INT 103
10291: PUSH
10292: LD_INT 104
10294: PUSH
10295: LD_INT 105
10297: PUSH
10298: LD_INT 106
10300: PUSH
10301: LD_INT 107
10303: PUSH
10304: LD_INT 108
10306: PUSH
10307: LD_INT 109
10309: PUSH
10310: LD_INT 110
10312: PUSH
10313: LD_INT 111
10315: PUSH
10316: LD_INT 112
10318: PUSH
10319: LD_INT 114
10321: PUSH
10322: LD_INT 116
10324: PUSH
10325: LD_INT 117
10327: PUSH
10328: LD_INT 118
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: ST_TO_ADDR
10353: GO 12036
10355: LD_INT 12
10357: DOUBLE
10358: EQUAL
10359: IFTRUE 10363
10361: GO 10583
10363: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10364: LD_ADDR_VAR 0 1
10368: PUSH
10369: LD_INT 1
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 4
10380: PUSH
10381: LD_INT 5
10383: PUSH
10384: LD_INT 6
10386: PUSH
10387: LD_INT 7
10389: PUSH
10390: LD_INT 8
10392: PUSH
10393: LD_INT 9
10395: PUSH
10396: LD_INT 10
10398: PUSH
10399: LD_INT 11
10401: PUSH
10402: LD_INT 12
10404: PUSH
10405: LD_INT 13
10407: PUSH
10408: LD_INT 14
10410: PUSH
10411: LD_INT 15
10413: PUSH
10414: LD_INT 16
10416: PUSH
10417: LD_INT 17
10419: PUSH
10420: LD_INT 18
10422: PUSH
10423: LD_INT 19
10425: PUSH
10426: LD_INT 20
10428: PUSH
10429: LD_INT 21
10431: PUSH
10432: LD_INT 22
10434: PUSH
10435: LD_INT 23
10437: PUSH
10438: LD_INT 24
10440: PUSH
10441: LD_INT 25
10443: PUSH
10444: LD_INT 26
10446: PUSH
10447: LD_INT 27
10449: PUSH
10450: LD_INT 28
10452: PUSH
10453: LD_INT 30
10455: PUSH
10456: LD_INT 31
10458: PUSH
10459: LD_INT 32
10461: PUSH
10462: LD_INT 33
10464: PUSH
10465: LD_INT 34
10467: PUSH
10468: LD_INT 36
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 101
10509: PUSH
10510: LD_INT 102
10512: PUSH
10513: LD_INT 103
10515: PUSH
10516: LD_INT 104
10518: PUSH
10519: LD_INT 105
10521: PUSH
10522: LD_INT 106
10524: PUSH
10525: LD_INT 107
10527: PUSH
10528: LD_INT 108
10530: PUSH
10531: LD_INT 109
10533: PUSH
10534: LD_INT 110
10536: PUSH
10537: LD_INT 111
10539: PUSH
10540: LD_INT 112
10542: PUSH
10543: LD_INT 113
10545: PUSH
10546: LD_INT 114
10548: PUSH
10549: LD_INT 116
10551: PUSH
10552: LD_INT 117
10554: PUSH
10555: LD_INT 118
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: ST_TO_ADDR
10581: GO 12036
10583: LD_INT 13
10585: DOUBLE
10586: EQUAL
10587: IFTRUE 10591
10589: GO 10799
10591: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10592: LD_ADDR_VAR 0 1
10596: PUSH
10597: LD_INT 1
10599: PUSH
10600: LD_INT 2
10602: PUSH
10603: LD_INT 3
10605: PUSH
10606: LD_INT 4
10608: PUSH
10609: LD_INT 5
10611: PUSH
10612: LD_INT 8
10614: PUSH
10615: LD_INT 9
10617: PUSH
10618: LD_INT 10
10620: PUSH
10621: LD_INT 11
10623: PUSH
10624: LD_INT 12
10626: PUSH
10627: LD_INT 14
10629: PUSH
10630: LD_INT 15
10632: PUSH
10633: LD_INT 16
10635: PUSH
10636: LD_INT 17
10638: PUSH
10639: LD_INT 18
10641: PUSH
10642: LD_INT 19
10644: PUSH
10645: LD_INT 20
10647: PUSH
10648: LD_INT 21
10650: PUSH
10651: LD_INT 22
10653: PUSH
10654: LD_INT 23
10656: PUSH
10657: LD_INT 24
10659: PUSH
10660: LD_INT 25
10662: PUSH
10663: LD_INT 26
10665: PUSH
10666: LD_INT 27
10668: PUSH
10669: LD_INT 28
10671: PUSH
10672: LD_INT 30
10674: PUSH
10675: LD_INT 31
10677: PUSH
10678: LD_INT 32
10680: PUSH
10681: LD_INT 33
10683: PUSH
10684: LD_INT 34
10686: PUSH
10687: LD_INT 36
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 101
10725: PUSH
10726: LD_INT 102
10728: PUSH
10729: LD_INT 103
10731: PUSH
10732: LD_INT 104
10734: PUSH
10735: LD_INT 105
10737: PUSH
10738: LD_INT 106
10740: PUSH
10741: LD_INT 107
10743: PUSH
10744: LD_INT 108
10746: PUSH
10747: LD_INT 109
10749: PUSH
10750: LD_INT 110
10752: PUSH
10753: LD_INT 111
10755: PUSH
10756: LD_INT 112
10758: PUSH
10759: LD_INT 113
10761: PUSH
10762: LD_INT 114
10764: PUSH
10765: LD_INT 116
10767: PUSH
10768: LD_INT 117
10770: PUSH
10771: LD_INT 118
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: ST_TO_ADDR
10797: GO 12036
10799: LD_INT 14
10801: DOUBLE
10802: EQUAL
10803: IFTRUE 10807
10805: GO 11031
10807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10808: LD_ADDR_VAR 0 1
10812: PUSH
10813: LD_INT 1
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: LD_INT 3
10821: PUSH
10822: LD_INT 4
10824: PUSH
10825: LD_INT 5
10827: PUSH
10828: LD_INT 6
10830: PUSH
10831: LD_INT 7
10833: PUSH
10834: LD_INT 8
10836: PUSH
10837: LD_INT 9
10839: PUSH
10840: LD_INT 10
10842: PUSH
10843: LD_INT 11
10845: PUSH
10846: LD_INT 12
10848: PUSH
10849: LD_INT 13
10851: PUSH
10852: LD_INT 14
10854: PUSH
10855: LD_INT 15
10857: PUSH
10858: LD_INT 16
10860: PUSH
10861: LD_INT 17
10863: PUSH
10864: LD_INT 18
10866: PUSH
10867: LD_INT 19
10869: PUSH
10870: LD_INT 20
10872: PUSH
10873: LD_INT 21
10875: PUSH
10876: LD_INT 22
10878: PUSH
10879: LD_INT 23
10881: PUSH
10882: LD_INT 24
10884: PUSH
10885: LD_INT 25
10887: PUSH
10888: LD_INT 26
10890: PUSH
10891: LD_INT 27
10893: PUSH
10894: LD_INT 28
10896: PUSH
10897: LD_INT 29
10899: PUSH
10900: LD_INT 30
10902: PUSH
10903: LD_INT 31
10905: PUSH
10906: LD_INT 32
10908: PUSH
10909: LD_INT 33
10911: PUSH
10912: LD_INT 34
10914: PUSH
10915: LD_INT 36
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: PUSH
10955: LD_INT 101
10957: PUSH
10958: LD_INT 102
10960: PUSH
10961: LD_INT 103
10963: PUSH
10964: LD_INT 104
10966: PUSH
10967: LD_INT 105
10969: PUSH
10970: LD_INT 106
10972: PUSH
10973: LD_INT 107
10975: PUSH
10976: LD_INT 108
10978: PUSH
10979: LD_INT 109
10981: PUSH
10982: LD_INT 110
10984: PUSH
10985: LD_INT 111
10987: PUSH
10988: LD_INT 112
10990: PUSH
10991: LD_INT 113
10993: PUSH
10994: LD_INT 114
10996: PUSH
10997: LD_INT 116
10999: PUSH
11000: LD_INT 117
11002: PUSH
11003: LD_INT 118
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: ST_TO_ADDR
11029: GO 12036
11031: LD_INT 15
11033: DOUBLE
11034: EQUAL
11035: IFTRUE 11039
11037: GO 11263
11039: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11040: LD_ADDR_VAR 0 1
11044: PUSH
11045: LD_INT 1
11047: PUSH
11048: LD_INT 2
11050: PUSH
11051: LD_INT 3
11053: PUSH
11054: LD_INT 4
11056: PUSH
11057: LD_INT 5
11059: PUSH
11060: LD_INT 6
11062: PUSH
11063: LD_INT 7
11065: PUSH
11066: LD_INT 8
11068: PUSH
11069: LD_INT 9
11071: PUSH
11072: LD_INT 10
11074: PUSH
11075: LD_INT 11
11077: PUSH
11078: LD_INT 12
11080: PUSH
11081: LD_INT 13
11083: PUSH
11084: LD_INT 14
11086: PUSH
11087: LD_INT 15
11089: PUSH
11090: LD_INT 16
11092: PUSH
11093: LD_INT 17
11095: PUSH
11096: LD_INT 18
11098: PUSH
11099: LD_INT 19
11101: PUSH
11102: LD_INT 20
11104: PUSH
11105: LD_INT 21
11107: PUSH
11108: LD_INT 22
11110: PUSH
11111: LD_INT 23
11113: PUSH
11114: LD_INT 24
11116: PUSH
11117: LD_INT 25
11119: PUSH
11120: LD_INT 26
11122: PUSH
11123: LD_INT 27
11125: PUSH
11126: LD_INT 28
11128: PUSH
11129: LD_INT 29
11131: PUSH
11132: LD_INT 30
11134: PUSH
11135: LD_INT 31
11137: PUSH
11138: LD_INT 32
11140: PUSH
11141: LD_INT 33
11143: PUSH
11144: LD_INT 34
11146: PUSH
11147: LD_INT 36
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 101
11189: PUSH
11190: LD_INT 102
11192: PUSH
11193: LD_INT 103
11195: PUSH
11196: LD_INT 104
11198: PUSH
11199: LD_INT 105
11201: PUSH
11202: LD_INT 106
11204: PUSH
11205: LD_INT 107
11207: PUSH
11208: LD_INT 108
11210: PUSH
11211: LD_INT 109
11213: PUSH
11214: LD_INT 110
11216: PUSH
11217: LD_INT 111
11219: PUSH
11220: LD_INT 112
11222: PUSH
11223: LD_INT 113
11225: PUSH
11226: LD_INT 114
11228: PUSH
11229: LD_INT 116
11231: PUSH
11232: LD_INT 117
11234: PUSH
11235: LD_INT 118
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: ST_TO_ADDR
11261: GO 12036
11263: LD_INT 16
11265: DOUBLE
11266: EQUAL
11267: IFTRUE 11271
11269: GO 11407
11271: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11272: LD_ADDR_VAR 0 1
11276: PUSH
11277: LD_INT 2
11279: PUSH
11280: LD_INT 4
11282: PUSH
11283: LD_INT 5
11285: PUSH
11286: LD_INT 7
11288: PUSH
11289: LD_INT 11
11291: PUSH
11292: LD_INT 12
11294: PUSH
11295: LD_INT 15
11297: PUSH
11298: LD_INT 16
11300: PUSH
11301: LD_INT 20
11303: PUSH
11304: LD_INT 21
11306: PUSH
11307: LD_INT 22
11309: PUSH
11310: LD_INT 23
11312: PUSH
11313: LD_INT 25
11315: PUSH
11316: LD_INT 26
11318: PUSH
11319: LD_INT 30
11321: PUSH
11322: LD_INT 31
11324: PUSH
11325: LD_INT 32
11327: PUSH
11328: LD_INT 33
11330: PUSH
11331: LD_INT 34
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 101
11357: PUSH
11358: LD_INT 102
11360: PUSH
11361: LD_INT 103
11363: PUSH
11364: LD_INT 106
11366: PUSH
11367: LD_INT 108
11369: PUSH
11370: LD_INT 112
11372: PUSH
11373: LD_INT 113
11375: PUSH
11376: LD_INT 114
11378: PUSH
11379: LD_INT 116
11381: PUSH
11382: LD_INT 117
11384: PUSH
11385: LD_INT 118
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: ST_TO_ADDR
11405: GO 12036
11407: LD_INT 17
11409: DOUBLE
11410: EQUAL
11411: IFTRUE 11415
11413: GO 11639
11415: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11416: LD_ADDR_VAR 0 1
11420: PUSH
11421: LD_INT 1
11423: PUSH
11424: LD_INT 2
11426: PUSH
11427: LD_INT 3
11429: PUSH
11430: LD_INT 4
11432: PUSH
11433: LD_INT 5
11435: PUSH
11436: LD_INT 6
11438: PUSH
11439: LD_INT 7
11441: PUSH
11442: LD_INT 8
11444: PUSH
11445: LD_INT 9
11447: PUSH
11448: LD_INT 10
11450: PUSH
11451: LD_INT 11
11453: PUSH
11454: LD_INT 12
11456: PUSH
11457: LD_INT 13
11459: PUSH
11460: LD_INT 14
11462: PUSH
11463: LD_INT 15
11465: PUSH
11466: LD_INT 16
11468: PUSH
11469: LD_INT 17
11471: PUSH
11472: LD_INT 18
11474: PUSH
11475: LD_INT 19
11477: PUSH
11478: LD_INT 20
11480: PUSH
11481: LD_INT 21
11483: PUSH
11484: LD_INT 22
11486: PUSH
11487: LD_INT 23
11489: PUSH
11490: LD_INT 24
11492: PUSH
11493: LD_INT 25
11495: PUSH
11496: LD_INT 26
11498: PUSH
11499: LD_INT 27
11501: PUSH
11502: LD_INT 28
11504: PUSH
11505: LD_INT 29
11507: PUSH
11508: LD_INT 30
11510: PUSH
11511: LD_INT 31
11513: PUSH
11514: LD_INT 32
11516: PUSH
11517: LD_INT 33
11519: PUSH
11520: LD_INT 34
11522: PUSH
11523: LD_INT 36
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 101
11565: PUSH
11566: LD_INT 102
11568: PUSH
11569: LD_INT 103
11571: PUSH
11572: LD_INT 104
11574: PUSH
11575: LD_INT 105
11577: PUSH
11578: LD_INT 106
11580: PUSH
11581: LD_INT 107
11583: PUSH
11584: LD_INT 108
11586: PUSH
11587: LD_INT 109
11589: PUSH
11590: LD_INT 110
11592: PUSH
11593: LD_INT 111
11595: PUSH
11596: LD_INT 112
11598: PUSH
11599: LD_INT 113
11601: PUSH
11602: LD_INT 114
11604: PUSH
11605: LD_INT 116
11607: PUSH
11608: LD_INT 117
11610: PUSH
11611: LD_INT 118
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: ST_TO_ADDR
11637: GO 12036
11639: LD_INT 18
11641: DOUBLE
11642: EQUAL
11643: IFTRUE 11647
11645: GO 11795
11647: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11648: LD_ADDR_VAR 0 1
11652: PUSH
11653: LD_INT 2
11655: PUSH
11656: LD_INT 4
11658: PUSH
11659: LD_INT 5
11661: PUSH
11662: LD_INT 7
11664: PUSH
11665: LD_INT 11
11667: PUSH
11668: LD_INT 12
11670: PUSH
11671: LD_INT 15
11673: PUSH
11674: LD_INT 16
11676: PUSH
11677: LD_INT 20
11679: PUSH
11680: LD_INT 21
11682: PUSH
11683: LD_INT 22
11685: PUSH
11686: LD_INT 23
11688: PUSH
11689: LD_INT 25
11691: PUSH
11692: LD_INT 26
11694: PUSH
11695: LD_INT 30
11697: PUSH
11698: LD_INT 31
11700: PUSH
11701: LD_INT 32
11703: PUSH
11704: LD_INT 33
11706: PUSH
11707: LD_INT 34
11709: PUSH
11710: LD_INT 35
11712: PUSH
11713: LD_INT 36
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: PUSH
11739: LD_INT 101
11741: PUSH
11742: LD_INT 102
11744: PUSH
11745: LD_INT 103
11747: PUSH
11748: LD_INT 106
11750: PUSH
11751: LD_INT 108
11753: PUSH
11754: LD_INT 112
11756: PUSH
11757: LD_INT 113
11759: PUSH
11760: LD_INT 114
11762: PUSH
11763: LD_INT 115
11765: PUSH
11766: LD_INT 116
11768: PUSH
11769: LD_INT 117
11771: PUSH
11772: LD_INT 118
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: ST_TO_ADDR
11793: GO 12036
11795: LD_INT 19
11797: DOUBLE
11798: EQUAL
11799: IFTRUE 11803
11801: GO 12035
11803: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11804: LD_ADDR_VAR 0 1
11808: PUSH
11809: LD_INT 1
11811: PUSH
11812: LD_INT 2
11814: PUSH
11815: LD_INT 3
11817: PUSH
11818: LD_INT 4
11820: PUSH
11821: LD_INT 5
11823: PUSH
11824: LD_INT 6
11826: PUSH
11827: LD_INT 7
11829: PUSH
11830: LD_INT 8
11832: PUSH
11833: LD_INT 9
11835: PUSH
11836: LD_INT 10
11838: PUSH
11839: LD_INT 11
11841: PUSH
11842: LD_INT 12
11844: PUSH
11845: LD_INT 13
11847: PUSH
11848: LD_INT 14
11850: PUSH
11851: LD_INT 15
11853: PUSH
11854: LD_INT 16
11856: PUSH
11857: LD_INT 17
11859: PUSH
11860: LD_INT 18
11862: PUSH
11863: LD_INT 19
11865: PUSH
11866: LD_INT 20
11868: PUSH
11869: LD_INT 21
11871: PUSH
11872: LD_INT 22
11874: PUSH
11875: LD_INT 23
11877: PUSH
11878: LD_INT 24
11880: PUSH
11881: LD_INT 25
11883: PUSH
11884: LD_INT 26
11886: PUSH
11887: LD_INT 27
11889: PUSH
11890: LD_INT 28
11892: PUSH
11893: LD_INT 29
11895: PUSH
11896: LD_INT 30
11898: PUSH
11899: LD_INT 31
11901: PUSH
11902: LD_INT 32
11904: PUSH
11905: LD_INT 33
11907: PUSH
11908: LD_INT 34
11910: PUSH
11911: LD_INT 35
11913: PUSH
11914: LD_INT 36
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 101
11957: PUSH
11958: LD_INT 102
11960: PUSH
11961: LD_INT 103
11963: PUSH
11964: LD_INT 104
11966: PUSH
11967: LD_INT 105
11969: PUSH
11970: LD_INT 106
11972: PUSH
11973: LD_INT 107
11975: PUSH
11976: LD_INT 108
11978: PUSH
11979: LD_INT 109
11981: PUSH
11982: LD_INT 110
11984: PUSH
11985: LD_INT 111
11987: PUSH
11988: LD_INT 112
11990: PUSH
11991: LD_INT 113
11993: PUSH
11994: LD_INT 114
11996: PUSH
11997: LD_INT 115
11999: PUSH
12000: LD_INT 116
12002: PUSH
12003: LD_INT 117
12005: PUSH
12006: LD_INT 118
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: ST_TO_ADDR
12033: GO 12036
12035: POP
// end else
12036: GO 12267
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12038: LD_ADDR_VAR 0 1
12042: PUSH
12043: LD_INT 1
12045: PUSH
12046: LD_INT 2
12048: PUSH
12049: LD_INT 3
12051: PUSH
12052: LD_INT 4
12054: PUSH
12055: LD_INT 5
12057: PUSH
12058: LD_INT 6
12060: PUSH
12061: LD_INT 7
12063: PUSH
12064: LD_INT 8
12066: PUSH
12067: LD_INT 9
12069: PUSH
12070: LD_INT 10
12072: PUSH
12073: LD_INT 11
12075: PUSH
12076: LD_INT 12
12078: PUSH
12079: LD_INT 13
12081: PUSH
12082: LD_INT 14
12084: PUSH
12085: LD_INT 15
12087: PUSH
12088: LD_INT 16
12090: PUSH
12091: LD_INT 17
12093: PUSH
12094: LD_INT 18
12096: PUSH
12097: LD_INT 19
12099: PUSH
12100: LD_INT 20
12102: PUSH
12103: LD_INT 21
12105: PUSH
12106: LD_INT 22
12108: PUSH
12109: LD_INT 23
12111: PUSH
12112: LD_INT 24
12114: PUSH
12115: LD_INT 25
12117: PUSH
12118: LD_INT 26
12120: PUSH
12121: LD_INT 27
12123: PUSH
12124: LD_INT 28
12126: PUSH
12127: LD_INT 29
12129: PUSH
12130: LD_INT 30
12132: PUSH
12133: LD_INT 31
12135: PUSH
12136: LD_INT 32
12138: PUSH
12139: LD_INT 33
12141: PUSH
12142: LD_INT 34
12144: PUSH
12145: LD_INT 35
12147: PUSH
12148: LD_INT 36
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 101
12191: PUSH
12192: LD_INT 102
12194: PUSH
12195: LD_INT 103
12197: PUSH
12198: LD_INT 104
12200: PUSH
12201: LD_INT 105
12203: PUSH
12204: LD_INT 106
12206: PUSH
12207: LD_INT 107
12209: PUSH
12210: LD_INT 108
12212: PUSH
12213: LD_INT 109
12215: PUSH
12216: LD_INT 110
12218: PUSH
12219: LD_INT 111
12221: PUSH
12222: LD_INT 112
12224: PUSH
12225: LD_INT 113
12227: PUSH
12228: LD_INT 114
12230: PUSH
12231: LD_INT 115
12233: PUSH
12234: LD_INT 116
12236: PUSH
12237: LD_INT 117
12239: PUSH
12240: LD_INT 118
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: ST_TO_ADDR
// if result then
12267: LD_VAR 0 1
12271: IFFALSE 12560
// begin normal :=  ;
12273: LD_ADDR_VAR 0 3
12277: PUSH
12278: LD_STRING 
12280: ST_TO_ADDR
// hardcore :=  ;
12281: LD_ADDR_VAR 0 4
12285: PUSH
12286: LD_STRING 
12288: ST_TO_ADDR
// for i = 1 to normalCounter do
12289: LD_ADDR_VAR 0 5
12293: PUSH
12294: DOUBLE
12295: LD_INT 1
12297: DEC
12298: ST_TO_ADDR
12299: LD_EXP 38
12303: PUSH
12304: FOR_TO
12305: IFFALSE 12406
// begin tmp := 0 ;
12307: LD_ADDR_VAR 0 2
12311: PUSH
12312: LD_STRING 0
12314: ST_TO_ADDR
// if result [ 1 ] then
12315: LD_VAR 0 1
12319: PUSH
12320: LD_INT 1
12322: ARRAY
12323: IFFALSE 12388
// if result [ 1 ] [ 1 ] = i then
12325: LD_VAR 0 1
12329: PUSH
12330: LD_INT 1
12332: ARRAY
12333: PUSH
12334: LD_INT 1
12336: ARRAY
12337: PUSH
12338: LD_VAR 0 5
12342: EQUAL
12343: IFFALSE 12388
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12345: LD_ADDR_VAR 0 1
12349: PUSH
12350: LD_VAR 0 1
12354: PPUSH
12355: LD_INT 1
12357: PPUSH
12358: LD_VAR 0 1
12362: PUSH
12363: LD_INT 1
12365: ARRAY
12366: PPUSH
12367: LD_INT 1
12369: PPUSH
12370: CALL_OW 3
12374: PPUSH
12375: CALL_OW 1
12379: ST_TO_ADDR
// tmp := 1 ;
12380: LD_ADDR_VAR 0 2
12384: PUSH
12385: LD_STRING 1
12387: ST_TO_ADDR
// end ; normal := normal & tmp ;
12388: LD_ADDR_VAR 0 3
12392: PUSH
12393: LD_VAR 0 3
12397: PUSH
12398: LD_VAR 0 2
12402: STR
12403: ST_TO_ADDR
// end ;
12404: GO 12304
12406: POP
12407: POP
// for i = 1 to hardcoreCounter do
12408: LD_ADDR_VAR 0 5
12412: PUSH
12413: DOUBLE
12414: LD_INT 1
12416: DEC
12417: ST_TO_ADDR
12418: LD_EXP 39
12422: PUSH
12423: FOR_TO
12424: IFFALSE 12529
// begin tmp := 0 ;
12426: LD_ADDR_VAR 0 2
12430: PUSH
12431: LD_STRING 0
12433: ST_TO_ADDR
// if result [ 2 ] then
12434: LD_VAR 0 1
12438: PUSH
12439: LD_INT 2
12441: ARRAY
12442: IFFALSE 12511
// if result [ 2 ] [ 1 ] = 100 + i then
12444: LD_VAR 0 1
12448: PUSH
12449: LD_INT 2
12451: ARRAY
12452: PUSH
12453: LD_INT 1
12455: ARRAY
12456: PUSH
12457: LD_INT 100
12459: PUSH
12460: LD_VAR 0 5
12464: PLUS
12465: EQUAL
12466: IFFALSE 12511
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12468: LD_ADDR_VAR 0 1
12472: PUSH
12473: LD_VAR 0 1
12477: PPUSH
12478: LD_INT 2
12480: PPUSH
12481: LD_VAR 0 1
12485: PUSH
12486: LD_INT 2
12488: ARRAY
12489: PPUSH
12490: LD_INT 1
12492: PPUSH
12493: CALL_OW 3
12497: PPUSH
12498: CALL_OW 1
12502: ST_TO_ADDR
// tmp := 1 ;
12503: LD_ADDR_VAR 0 2
12507: PUSH
12508: LD_STRING 1
12510: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12511: LD_ADDR_VAR 0 4
12515: PUSH
12516: LD_VAR 0 4
12520: PUSH
12521: LD_VAR 0 2
12525: STR
12526: ST_TO_ADDR
// end ;
12527: GO 12423
12529: POP
12530: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12531: LD_STRING getStreamItemsFromMission("
12533: PUSH
12534: LD_VAR 0 3
12538: STR
12539: PUSH
12540: LD_STRING ","
12542: STR
12543: PUSH
12544: LD_VAR 0 4
12548: STR
12549: PUSH
12550: LD_STRING ")
12552: STR
12553: PPUSH
12554: CALL_OW 559
// end else
12558: GO 12567
// ToLua ( getStreamItemsFromMission("","") ) ;
12560: LD_STRING getStreamItemsFromMission("","")
12562: PPUSH
12563: CALL_OW 559
// end ;
12567: LD_VAR 0 1
12571: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12572: LD_EXP 37
12576: PUSH
12577: LD_EXP 42
12581: AND
12582: IFFALSE 12706
12584: GO 12586
12586: DISABLE
12587: LD_INT 0
12589: PPUSH
12590: PPUSH
// begin enable ;
12591: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12592: LD_ADDR_VAR 0 2
12596: PUSH
12597: LD_INT 22
12599: PUSH
12600: LD_OWVAR 2
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: LD_INT 34
12614: PUSH
12615: LD_INT 7
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 34
12624: PUSH
12625: LD_INT 45
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 34
12634: PUSH
12635: LD_INT 28
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 34
12644: PUSH
12645: LD_INT 47
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PPUSH
12663: CALL_OW 69
12667: ST_TO_ADDR
// if not tmp then
12668: LD_VAR 0 2
12672: NOT
12673: IFFALSE 12677
// exit ;
12675: GO 12706
// for i in tmp do
12677: LD_ADDR_VAR 0 1
12681: PUSH
12682: LD_VAR 0 2
12686: PUSH
12687: FOR_IN
12688: IFFALSE 12704
// begin SetLives ( i , 0 ) ;
12690: LD_VAR 0 1
12694: PPUSH
12695: LD_INT 0
12697: PPUSH
12698: CALL_OW 234
// end ;
12702: GO 12687
12704: POP
12705: POP
// end ;
12706: PPOPN 2
12708: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12709: LD_EXP 37
12713: PUSH
12714: LD_EXP 43
12718: AND
12719: IFFALSE 12803
12721: GO 12723
12723: DISABLE
12724: LD_INT 0
12726: PPUSH
12727: PPUSH
// begin enable ;
12728: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12729: LD_ADDR_VAR 0 2
12733: PUSH
12734: LD_INT 22
12736: PUSH
12737: LD_OWVAR 2
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 32
12748: PUSH
12749: LD_INT 3
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PPUSH
12760: CALL_OW 69
12764: ST_TO_ADDR
// if not tmp then
12765: LD_VAR 0 2
12769: NOT
12770: IFFALSE 12774
// exit ;
12772: GO 12803
// for i in tmp do
12774: LD_ADDR_VAR 0 1
12778: PUSH
12779: LD_VAR 0 2
12783: PUSH
12784: FOR_IN
12785: IFFALSE 12801
// begin SetLives ( i , 0 ) ;
12787: LD_VAR 0 1
12791: PPUSH
12792: LD_INT 0
12794: PPUSH
12795: CALL_OW 234
// end ;
12799: GO 12784
12801: POP
12802: POP
// end ;
12803: PPOPN 2
12805: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12806: LD_EXP 37
12810: PUSH
12811: LD_EXP 40
12815: AND
12816: IFFALSE 12909
12818: GO 12820
12820: DISABLE
12821: LD_INT 0
12823: PPUSH
// begin enable ;
12824: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12825: LD_ADDR_VAR 0 1
12829: PUSH
12830: LD_INT 22
12832: PUSH
12833: LD_OWVAR 2
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 2
12844: PUSH
12845: LD_INT 25
12847: PUSH
12848: LD_INT 5
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: LD_INT 25
12857: PUSH
12858: LD_INT 9
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 25
12867: PUSH
12868: LD_INT 8
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PPUSH
12885: CALL_OW 69
12889: PUSH
12890: FOR_IN
12891: IFFALSE 12907
// begin SetClass ( i , 1 ) ;
12893: LD_VAR 0 1
12897: PPUSH
12898: LD_INT 1
12900: PPUSH
12901: CALL_OW 336
// end ;
12905: GO 12890
12907: POP
12908: POP
// end ;
12909: PPOPN 1
12911: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12912: LD_EXP 37
12916: PUSH
12917: LD_EXP 41
12921: AND
12922: PUSH
12923: LD_OWVAR 65
12927: PUSH
12928: LD_INT 7
12930: LESS
12931: AND
12932: IFFALSE 12946
12934: GO 12936
12936: DISABLE
// begin enable ;
12937: ENABLE
// game_speed := 7 ;
12938: LD_ADDR_OWVAR 65
12942: PUSH
12943: LD_INT 7
12945: ST_TO_ADDR
// end ;
12946: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12947: LD_EXP 37
12951: PUSH
12952: LD_EXP 44
12956: AND
12957: IFFALSE 13159
12959: GO 12961
12961: DISABLE
12962: LD_INT 0
12964: PPUSH
12965: PPUSH
12966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12967: LD_ADDR_VAR 0 3
12971: PUSH
12972: LD_INT 81
12974: PUSH
12975: LD_OWVAR 2
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: LD_INT 21
12986: PUSH
12987: LD_INT 1
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PPUSH
12998: CALL_OW 69
13002: ST_TO_ADDR
// if not tmp then
13003: LD_VAR 0 3
13007: NOT
13008: IFFALSE 13012
// exit ;
13010: GO 13159
// if tmp > 5 then
13012: LD_VAR 0 3
13016: PUSH
13017: LD_INT 5
13019: GREATER
13020: IFFALSE 13032
// k := 5 else
13022: LD_ADDR_VAR 0 2
13026: PUSH
13027: LD_INT 5
13029: ST_TO_ADDR
13030: GO 13042
// k := tmp ;
13032: LD_ADDR_VAR 0 2
13036: PUSH
13037: LD_VAR 0 3
13041: ST_TO_ADDR
// for i := 1 to k do
13042: LD_ADDR_VAR 0 1
13046: PUSH
13047: DOUBLE
13048: LD_INT 1
13050: DEC
13051: ST_TO_ADDR
13052: LD_VAR 0 2
13056: PUSH
13057: FOR_TO
13058: IFFALSE 13157
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13060: LD_VAR 0 3
13064: PUSH
13065: LD_VAR 0 1
13069: ARRAY
13070: PPUSH
13071: LD_VAR 0 1
13075: PUSH
13076: LD_INT 4
13078: MOD
13079: PUSH
13080: LD_INT 1
13082: PLUS
13083: PPUSH
13084: CALL_OW 259
13088: PUSH
13089: LD_INT 10
13091: LESS
13092: IFFALSE 13155
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13094: LD_VAR 0 3
13098: PUSH
13099: LD_VAR 0 1
13103: ARRAY
13104: PPUSH
13105: LD_VAR 0 1
13109: PUSH
13110: LD_INT 4
13112: MOD
13113: PUSH
13114: LD_INT 1
13116: PLUS
13117: PPUSH
13118: LD_VAR 0 3
13122: PUSH
13123: LD_VAR 0 1
13127: ARRAY
13128: PPUSH
13129: LD_VAR 0 1
13133: PUSH
13134: LD_INT 4
13136: MOD
13137: PUSH
13138: LD_INT 1
13140: PLUS
13141: PPUSH
13142: CALL_OW 259
13146: PUSH
13147: LD_INT 1
13149: PLUS
13150: PPUSH
13151: CALL_OW 237
13155: GO 13057
13157: POP
13158: POP
// end ;
13159: PPOPN 3
13161: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13162: LD_EXP 37
13166: PUSH
13167: LD_EXP 45
13171: AND
13172: IFFALSE 13192
13174: GO 13176
13176: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13177: LD_INT 4
13179: PPUSH
13180: LD_OWVAR 2
13184: PPUSH
13185: LD_INT 0
13187: PPUSH
13188: CALL_OW 324
13192: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13193: LD_EXP 37
13197: PUSH
13198: LD_EXP 74
13202: AND
13203: IFFALSE 13223
13205: GO 13207
13207: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13208: LD_INT 19
13210: PPUSH
13211: LD_OWVAR 2
13215: PPUSH
13216: LD_INT 0
13218: PPUSH
13219: CALL_OW 324
13223: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13224: LD_EXP 37
13228: PUSH
13229: LD_EXP 46
13233: AND
13234: IFFALSE 13336
13236: GO 13238
13238: DISABLE
13239: LD_INT 0
13241: PPUSH
13242: PPUSH
// begin enable ;
13243: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13244: LD_ADDR_VAR 0 2
13248: PUSH
13249: LD_INT 22
13251: PUSH
13252: LD_OWVAR 2
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 2
13263: PUSH
13264: LD_INT 34
13266: PUSH
13267: LD_INT 11
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 34
13276: PUSH
13277: LD_INT 30
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PPUSH
13293: CALL_OW 69
13297: ST_TO_ADDR
// if not tmp then
13298: LD_VAR 0 2
13302: NOT
13303: IFFALSE 13307
// exit ;
13305: GO 13336
// for i in tmp do
13307: LD_ADDR_VAR 0 1
13311: PUSH
13312: LD_VAR 0 2
13316: PUSH
13317: FOR_IN
13318: IFFALSE 13334
// begin SetLives ( i , 0 ) ;
13320: LD_VAR 0 1
13324: PPUSH
13325: LD_INT 0
13327: PPUSH
13328: CALL_OW 234
// end ;
13332: GO 13317
13334: POP
13335: POP
// end ;
13336: PPOPN 2
13338: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13339: LD_EXP 37
13343: PUSH
13344: LD_EXP 47
13348: AND
13349: IFFALSE 13369
13351: GO 13353
13353: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13354: LD_INT 32
13356: PPUSH
13357: LD_OWVAR 2
13361: PPUSH
13362: LD_INT 0
13364: PPUSH
13365: CALL_OW 324
13369: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13370: LD_EXP 37
13374: PUSH
13375: LD_EXP 48
13379: AND
13380: IFFALSE 13561
13382: GO 13384
13384: DISABLE
13385: LD_INT 0
13387: PPUSH
13388: PPUSH
13389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13390: LD_ADDR_VAR 0 2
13394: PUSH
13395: LD_INT 22
13397: PUSH
13398: LD_OWVAR 2
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 33
13409: PUSH
13410: LD_INT 3
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PPUSH
13421: CALL_OW 69
13425: ST_TO_ADDR
// if not tmp then
13426: LD_VAR 0 2
13430: NOT
13431: IFFALSE 13435
// exit ;
13433: GO 13561
// side := 0 ;
13435: LD_ADDR_VAR 0 3
13439: PUSH
13440: LD_INT 0
13442: ST_TO_ADDR
// for i := 1 to 8 do
13443: LD_ADDR_VAR 0 1
13447: PUSH
13448: DOUBLE
13449: LD_INT 1
13451: DEC
13452: ST_TO_ADDR
13453: LD_INT 8
13455: PUSH
13456: FOR_TO
13457: IFFALSE 13505
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13459: LD_OWVAR 2
13463: PUSH
13464: LD_VAR 0 1
13468: NONEQUAL
13469: PUSH
13470: LD_OWVAR 2
13474: PPUSH
13475: LD_VAR 0 1
13479: PPUSH
13480: CALL_OW 81
13484: PUSH
13485: LD_INT 2
13487: EQUAL
13488: AND
13489: IFFALSE 13503
// begin side := i ;
13491: LD_ADDR_VAR 0 3
13495: PUSH
13496: LD_VAR 0 1
13500: ST_TO_ADDR
// break ;
13501: GO 13505
// end ;
13503: GO 13456
13505: POP
13506: POP
// if not side then
13507: LD_VAR 0 3
13511: NOT
13512: IFFALSE 13516
// exit ;
13514: GO 13561
// for i := 1 to tmp do
13516: LD_ADDR_VAR 0 1
13520: PUSH
13521: DOUBLE
13522: LD_INT 1
13524: DEC
13525: ST_TO_ADDR
13526: LD_VAR 0 2
13530: PUSH
13531: FOR_TO
13532: IFFALSE 13559
// if Prob ( 60 ) then
13534: LD_INT 60
13536: PPUSH
13537: CALL_OW 13
13541: IFFALSE 13557
// SetSide ( i , side ) ;
13543: LD_VAR 0 1
13547: PPUSH
13548: LD_VAR 0 3
13552: PPUSH
13553: CALL_OW 235
13557: GO 13531
13559: POP
13560: POP
// end ;
13561: PPOPN 3
13563: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13564: LD_EXP 37
13568: PUSH
13569: LD_EXP 50
13573: AND
13574: IFFALSE 13693
13576: GO 13578
13578: DISABLE
13579: LD_INT 0
13581: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13582: LD_ADDR_VAR 0 1
13586: PUSH
13587: LD_INT 22
13589: PUSH
13590: LD_OWVAR 2
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PUSH
13599: LD_INT 21
13601: PUSH
13602: LD_INT 1
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: PUSH
13609: LD_INT 3
13611: PUSH
13612: LD_INT 23
13614: PUSH
13615: LD_INT 0
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: LIST
13630: PPUSH
13631: CALL_OW 69
13635: PUSH
13636: FOR_IN
13637: IFFALSE 13691
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13639: LD_VAR 0 1
13643: PPUSH
13644: CALL_OW 257
13648: PUSH
13649: LD_INT 1
13651: PUSH
13652: LD_INT 2
13654: PUSH
13655: LD_INT 3
13657: PUSH
13658: LD_INT 4
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: IN
13667: IFFALSE 13689
// SetClass ( un , rand ( 1 , 4 ) ) ;
13669: LD_VAR 0 1
13673: PPUSH
13674: LD_INT 1
13676: PPUSH
13677: LD_INT 4
13679: PPUSH
13680: CALL_OW 12
13684: PPUSH
13685: CALL_OW 336
13689: GO 13636
13691: POP
13692: POP
// end ;
13693: PPOPN 1
13695: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13696: LD_EXP 37
13700: PUSH
13701: LD_EXP 49
13705: AND
13706: IFFALSE 13785
13708: GO 13710
13710: DISABLE
13711: LD_INT 0
13713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13714: LD_ADDR_VAR 0 1
13718: PUSH
13719: LD_INT 22
13721: PUSH
13722: LD_OWVAR 2
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: LD_INT 21
13733: PUSH
13734: LD_INT 3
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PPUSH
13745: CALL_OW 69
13749: ST_TO_ADDR
// if not tmp then
13750: LD_VAR 0 1
13754: NOT
13755: IFFALSE 13759
// exit ;
13757: GO 13785
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13759: LD_VAR 0 1
13763: PUSH
13764: LD_INT 1
13766: PPUSH
13767: LD_VAR 0 1
13771: PPUSH
13772: CALL_OW 12
13776: ARRAY
13777: PPUSH
13778: LD_INT 100
13780: PPUSH
13781: CALL_OW 234
// end ;
13785: PPOPN 1
13787: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13788: LD_EXP 37
13792: PUSH
13793: LD_EXP 51
13797: AND
13798: IFFALSE 13896
13800: GO 13802
13802: DISABLE
13803: LD_INT 0
13805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13806: LD_ADDR_VAR 0 1
13810: PUSH
13811: LD_INT 22
13813: PUSH
13814: LD_OWVAR 2
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 21
13825: PUSH
13826: LD_INT 1
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PPUSH
13837: CALL_OW 69
13841: ST_TO_ADDR
// if not tmp then
13842: LD_VAR 0 1
13846: NOT
13847: IFFALSE 13851
// exit ;
13849: GO 13896
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13851: LD_VAR 0 1
13855: PUSH
13856: LD_INT 1
13858: PPUSH
13859: LD_VAR 0 1
13863: PPUSH
13864: CALL_OW 12
13868: ARRAY
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: LD_INT 4
13875: PPUSH
13876: CALL_OW 12
13880: PPUSH
13881: LD_INT 3000
13883: PPUSH
13884: LD_INT 9000
13886: PPUSH
13887: CALL_OW 12
13891: PPUSH
13892: CALL_OW 492
// end ;
13896: PPOPN 1
13898: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13899: LD_EXP 37
13903: PUSH
13904: LD_EXP 52
13908: AND
13909: IFFALSE 13929
13911: GO 13913
13913: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13914: LD_INT 1
13916: PPUSH
13917: LD_OWVAR 2
13921: PPUSH
13922: LD_INT 0
13924: PPUSH
13925: CALL_OW 324
13929: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13930: LD_EXP 37
13934: PUSH
13935: LD_EXP 53
13939: AND
13940: IFFALSE 14023
13942: GO 13944
13944: DISABLE
13945: LD_INT 0
13947: PPUSH
13948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13949: LD_ADDR_VAR 0 2
13953: PUSH
13954: LD_INT 22
13956: PUSH
13957: LD_OWVAR 2
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: PUSH
13966: LD_INT 21
13968: PUSH
13969: LD_INT 3
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PPUSH
13980: CALL_OW 69
13984: ST_TO_ADDR
// if not tmp then
13985: LD_VAR 0 2
13989: NOT
13990: IFFALSE 13994
// exit ;
13992: GO 14023
// for i in tmp do
13994: LD_ADDR_VAR 0 1
13998: PUSH
13999: LD_VAR 0 2
14003: PUSH
14004: FOR_IN
14005: IFFALSE 14021
// SetBLevel ( i , 10 ) ;
14007: LD_VAR 0 1
14011: PPUSH
14012: LD_INT 10
14014: PPUSH
14015: CALL_OW 241
14019: GO 14004
14021: POP
14022: POP
// end ;
14023: PPOPN 2
14025: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14026: LD_EXP 37
14030: PUSH
14031: LD_EXP 54
14035: AND
14036: IFFALSE 14147
14038: GO 14040
14040: DISABLE
14041: LD_INT 0
14043: PPUSH
14044: PPUSH
14045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14046: LD_ADDR_VAR 0 3
14050: PUSH
14051: LD_INT 22
14053: PUSH
14054: LD_OWVAR 2
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PUSH
14063: LD_INT 25
14065: PUSH
14066: LD_INT 1
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PPUSH
14077: CALL_OW 69
14081: ST_TO_ADDR
// if not tmp then
14082: LD_VAR 0 3
14086: NOT
14087: IFFALSE 14091
// exit ;
14089: GO 14147
// un := tmp [ rand ( 1 , tmp ) ] ;
14091: LD_ADDR_VAR 0 2
14095: PUSH
14096: LD_VAR 0 3
14100: PUSH
14101: LD_INT 1
14103: PPUSH
14104: LD_VAR 0 3
14108: PPUSH
14109: CALL_OW 12
14113: ARRAY
14114: ST_TO_ADDR
// if Crawls ( un ) then
14115: LD_VAR 0 2
14119: PPUSH
14120: CALL_OW 318
14124: IFFALSE 14135
// ComWalk ( un ) ;
14126: LD_VAR 0 2
14130: PPUSH
14131: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14135: LD_VAR 0 2
14139: PPUSH
14140: LD_INT 5
14142: PPUSH
14143: CALL_OW 336
// end ;
14147: PPOPN 3
14149: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14150: LD_EXP 37
14154: PUSH
14155: LD_EXP 55
14159: AND
14160: PUSH
14161: LD_OWVAR 67
14165: PUSH
14166: LD_INT 4
14168: LESS
14169: AND
14170: IFFALSE 14189
14172: GO 14174
14174: DISABLE
// begin Difficulty := Difficulty + 1 ;
14175: LD_ADDR_OWVAR 67
14179: PUSH
14180: LD_OWVAR 67
14184: PUSH
14185: LD_INT 1
14187: PLUS
14188: ST_TO_ADDR
// end ;
14189: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14190: LD_EXP 37
14194: PUSH
14195: LD_EXP 56
14199: AND
14200: IFFALSE 14303
14202: GO 14204
14204: DISABLE
14205: LD_INT 0
14207: PPUSH
// begin for i := 1 to 5 do
14208: LD_ADDR_VAR 0 1
14212: PUSH
14213: DOUBLE
14214: LD_INT 1
14216: DEC
14217: ST_TO_ADDR
14218: LD_INT 5
14220: PUSH
14221: FOR_TO
14222: IFFALSE 14301
// begin uc_nation := nation_nature ;
14224: LD_ADDR_OWVAR 21
14228: PUSH
14229: LD_INT 0
14231: ST_TO_ADDR
// uc_side := 0 ;
14232: LD_ADDR_OWVAR 20
14236: PUSH
14237: LD_INT 0
14239: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14240: LD_ADDR_OWVAR 29
14244: PUSH
14245: LD_INT 12
14247: PUSH
14248: LD_INT 12
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: ST_TO_ADDR
// hc_agressivity := 20 ;
14255: LD_ADDR_OWVAR 35
14259: PUSH
14260: LD_INT 20
14262: ST_TO_ADDR
// hc_class := class_tiger ;
14263: LD_ADDR_OWVAR 28
14267: PUSH
14268: LD_INT 14
14270: ST_TO_ADDR
// hc_gallery :=  ;
14271: LD_ADDR_OWVAR 33
14275: PUSH
14276: LD_STRING 
14278: ST_TO_ADDR
// hc_name :=  ;
14279: LD_ADDR_OWVAR 26
14283: PUSH
14284: LD_STRING 
14286: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14287: CALL_OW 44
14291: PPUSH
14292: LD_INT 0
14294: PPUSH
14295: CALL_OW 51
// end ;
14299: GO 14221
14301: POP
14302: POP
// end ;
14303: PPOPN 1
14305: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14306: LD_EXP 37
14310: PUSH
14311: LD_EXP 57
14315: AND
14316: IFFALSE 14325
14318: GO 14320
14320: DISABLE
// StreamSibBomb ;
14321: CALL 14326 0 0
14325: END
// export function StreamSibBomb ; var i , x , y ; begin
14326: LD_INT 0
14328: PPUSH
14329: PPUSH
14330: PPUSH
14331: PPUSH
// result := false ;
14332: LD_ADDR_VAR 0 1
14336: PUSH
14337: LD_INT 0
14339: ST_TO_ADDR
// for i := 1 to 16 do
14340: LD_ADDR_VAR 0 2
14344: PUSH
14345: DOUBLE
14346: LD_INT 1
14348: DEC
14349: ST_TO_ADDR
14350: LD_INT 16
14352: PUSH
14353: FOR_TO
14354: IFFALSE 14553
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14356: LD_ADDR_VAR 0 3
14360: PUSH
14361: LD_INT 10
14363: PUSH
14364: LD_INT 20
14366: PUSH
14367: LD_INT 30
14369: PUSH
14370: LD_INT 40
14372: PUSH
14373: LD_INT 50
14375: PUSH
14376: LD_INT 60
14378: PUSH
14379: LD_INT 70
14381: PUSH
14382: LD_INT 80
14384: PUSH
14385: LD_INT 90
14387: PUSH
14388: LD_INT 100
14390: PUSH
14391: LD_INT 110
14393: PUSH
14394: LD_INT 120
14396: PUSH
14397: LD_INT 130
14399: PUSH
14400: LD_INT 140
14402: PUSH
14403: LD_INT 150
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: PUSH
14423: LD_INT 1
14425: PPUSH
14426: LD_INT 15
14428: PPUSH
14429: CALL_OW 12
14433: ARRAY
14434: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14435: LD_ADDR_VAR 0 4
14439: PUSH
14440: LD_INT 10
14442: PUSH
14443: LD_INT 20
14445: PUSH
14446: LD_INT 30
14448: PUSH
14449: LD_INT 40
14451: PUSH
14452: LD_INT 50
14454: PUSH
14455: LD_INT 60
14457: PUSH
14458: LD_INT 70
14460: PUSH
14461: LD_INT 80
14463: PUSH
14464: LD_INT 90
14466: PUSH
14467: LD_INT 100
14469: PUSH
14470: LD_INT 110
14472: PUSH
14473: LD_INT 120
14475: PUSH
14476: LD_INT 130
14478: PUSH
14479: LD_INT 140
14481: PUSH
14482: LD_INT 150
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: PUSH
14502: LD_INT 1
14504: PPUSH
14505: LD_INT 15
14507: PPUSH
14508: CALL_OW 12
14512: ARRAY
14513: ST_TO_ADDR
// if ValidHex ( x , y ) then
14514: LD_VAR 0 3
14518: PPUSH
14519: LD_VAR 0 4
14523: PPUSH
14524: CALL_OW 488
14528: IFFALSE 14551
// begin result := [ x , y ] ;
14530: LD_ADDR_VAR 0 1
14534: PUSH
14535: LD_VAR 0 3
14539: PUSH
14540: LD_VAR 0 4
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: ST_TO_ADDR
// break ;
14549: GO 14553
// end ; end ;
14551: GO 14353
14553: POP
14554: POP
// if result then
14555: LD_VAR 0 1
14559: IFFALSE 14619
// begin ToLua ( playSibBomb() ) ;
14561: LD_STRING playSibBomb()
14563: PPUSH
14564: CALL_OW 559
// wait ( 0 0$14 ) ;
14568: LD_INT 490
14570: PPUSH
14571: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14575: LD_VAR 0 1
14579: PUSH
14580: LD_INT 1
14582: ARRAY
14583: PPUSH
14584: LD_VAR 0 1
14588: PUSH
14589: LD_INT 2
14591: ARRAY
14592: PPUSH
14593: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14597: LD_VAR 0 1
14601: PUSH
14602: LD_INT 1
14604: ARRAY
14605: PPUSH
14606: LD_VAR 0 1
14610: PUSH
14611: LD_INT 2
14613: ARRAY
14614: PPUSH
14615: CALL_OW 429
// end ; end ;
14619: LD_VAR 0 1
14623: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14624: LD_EXP 37
14628: PUSH
14629: LD_EXP 59
14633: AND
14634: IFFALSE 14646
14636: GO 14638
14638: DISABLE
// YouLost (  ) ;
14639: LD_STRING 
14641: PPUSH
14642: CALL_OW 104
14646: END
// every 0 0$1 trigger StreamModeActive and sFog do
14647: LD_EXP 37
14651: PUSH
14652: LD_EXP 58
14656: AND
14657: IFFALSE 14671
14659: GO 14661
14661: DISABLE
// FogOff ( your_side ) ;
14662: LD_OWVAR 2
14666: PPUSH
14667: CALL_OW 344
14671: END
// every 0 0$1 trigger StreamModeActive and sSun do
14672: LD_EXP 37
14676: PUSH
14677: LD_EXP 60
14681: AND
14682: IFFALSE 14710
14684: GO 14686
14686: DISABLE
// begin solar_recharge_percent := 0 ;
14687: LD_ADDR_OWVAR 79
14691: PUSH
14692: LD_INT 0
14694: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14695: LD_INT 10500
14697: PPUSH
14698: CALL_OW 67
// solar_recharge_percent := 100 ;
14702: LD_ADDR_OWVAR 79
14706: PUSH
14707: LD_INT 100
14709: ST_TO_ADDR
// end ;
14710: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14711: LD_EXP 37
14715: PUSH
14716: LD_EXP 61
14720: AND
14721: IFFALSE 14960
14723: GO 14725
14725: DISABLE
14726: LD_INT 0
14728: PPUSH
14729: PPUSH
14730: PPUSH
// begin tmp := [ ] ;
14731: LD_ADDR_VAR 0 3
14735: PUSH
14736: EMPTY
14737: ST_TO_ADDR
// for i := 1 to 6 do
14738: LD_ADDR_VAR 0 1
14742: PUSH
14743: DOUBLE
14744: LD_INT 1
14746: DEC
14747: ST_TO_ADDR
14748: LD_INT 6
14750: PUSH
14751: FOR_TO
14752: IFFALSE 14857
// begin uc_nation := nation_nature ;
14754: LD_ADDR_OWVAR 21
14758: PUSH
14759: LD_INT 0
14761: ST_TO_ADDR
// uc_side := 0 ;
14762: LD_ADDR_OWVAR 20
14766: PUSH
14767: LD_INT 0
14769: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14770: LD_ADDR_OWVAR 29
14774: PUSH
14775: LD_INT 12
14777: PUSH
14778: LD_INT 12
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: ST_TO_ADDR
// hc_agressivity := 20 ;
14785: LD_ADDR_OWVAR 35
14789: PUSH
14790: LD_INT 20
14792: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14793: LD_ADDR_OWVAR 28
14797: PUSH
14798: LD_INT 17
14800: ST_TO_ADDR
// hc_gallery :=  ;
14801: LD_ADDR_OWVAR 33
14805: PUSH
14806: LD_STRING 
14808: ST_TO_ADDR
// hc_name :=  ;
14809: LD_ADDR_OWVAR 26
14813: PUSH
14814: LD_STRING 
14816: ST_TO_ADDR
// un := CreateHuman ;
14817: LD_ADDR_VAR 0 2
14821: PUSH
14822: CALL_OW 44
14826: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14827: LD_VAR 0 2
14831: PPUSH
14832: LD_INT 1
14834: PPUSH
14835: CALL_OW 51
// tmp := tmp ^ un ;
14839: LD_ADDR_VAR 0 3
14843: PUSH
14844: LD_VAR 0 3
14848: PUSH
14849: LD_VAR 0 2
14853: ADD
14854: ST_TO_ADDR
// end ;
14855: GO 14751
14857: POP
14858: POP
// repeat wait ( 0 0$1 ) ;
14859: LD_INT 35
14861: PPUSH
14862: CALL_OW 67
// for un in tmp do
14866: LD_ADDR_VAR 0 2
14870: PUSH
14871: LD_VAR 0 3
14875: PUSH
14876: FOR_IN
14877: IFFALSE 14951
// begin if IsDead ( un ) then
14879: LD_VAR 0 2
14883: PPUSH
14884: CALL_OW 301
14888: IFFALSE 14908
// begin tmp := tmp diff un ;
14890: LD_ADDR_VAR 0 3
14894: PUSH
14895: LD_VAR 0 3
14899: PUSH
14900: LD_VAR 0 2
14904: DIFF
14905: ST_TO_ADDR
// continue ;
14906: GO 14876
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14908: LD_VAR 0 2
14912: PPUSH
14913: LD_INT 3
14915: PUSH
14916: LD_INT 22
14918: PUSH
14919: LD_INT 0
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 69
14934: PPUSH
14935: LD_VAR 0 2
14939: PPUSH
14940: CALL_OW 74
14944: PPUSH
14945: CALL_OW 115
// end ;
14949: GO 14876
14951: POP
14952: POP
// until not tmp ;
14953: LD_VAR 0 3
14957: NOT
14958: IFFALSE 14859
// end ;
14960: PPOPN 3
14962: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14963: LD_EXP 37
14967: PUSH
14968: LD_EXP 62
14972: AND
14973: IFFALSE 15027
14975: GO 14977
14977: DISABLE
// begin ToLua ( displayTroll(); ) ;
14978: LD_STRING displayTroll();
14980: PPUSH
14981: CALL_OW 559
// wait ( 3 3$00 ) ;
14985: LD_INT 6300
14987: PPUSH
14988: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14992: LD_STRING hideTroll();
14994: PPUSH
14995: CALL_OW 559
// wait ( 1 1$00 ) ;
14999: LD_INT 2100
15001: PPUSH
15002: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15006: LD_STRING displayTroll();
15008: PPUSH
15009: CALL_OW 559
// wait ( 1 1$00 ) ;
15013: LD_INT 2100
15015: PPUSH
15016: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15020: LD_STRING hideTroll();
15022: PPUSH
15023: CALL_OW 559
// end ;
15027: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15028: LD_EXP 37
15032: PUSH
15033: LD_EXP 63
15037: AND
15038: IFFALSE 15101
15040: GO 15042
15042: DISABLE
15043: LD_INT 0
15045: PPUSH
// begin p := 0 ;
15046: LD_ADDR_VAR 0 1
15050: PUSH
15051: LD_INT 0
15053: ST_TO_ADDR
// repeat game_speed := 1 ;
15054: LD_ADDR_OWVAR 65
15058: PUSH
15059: LD_INT 1
15061: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15062: LD_INT 35
15064: PPUSH
15065: CALL_OW 67
// p := p + 1 ;
15069: LD_ADDR_VAR 0 1
15073: PUSH
15074: LD_VAR 0 1
15078: PUSH
15079: LD_INT 1
15081: PLUS
15082: ST_TO_ADDR
// until p >= 60 ;
15083: LD_VAR 0 1
15087: PUSH
15088: LD_INT 60
15090: GREATEREQUAL
15091: IFFALSE 15054
// game_speed := 4 ;
15093: LD_ADDR_OWVAR 65
15097: PUSH
15098: LD_INT 4
15100: ST_TO_ADDR
// end ;
15101: PPOPN 1
15103: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15104: LD_EXP 37
15108: PUSH
15109: LD_EXP 64
15113: AND
15114: IFFALSE 15260
15116: GO 15118
15118: DISABLE
15119: LD_INT 0
15121: PPUSH
15122: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15123: LD_ADDR_VAR 0 1
15127: PUSH
15128: LD_INT 22
15130: PUSH
15131: LD_OWVAR 2
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: LD_INT 2
15142: PUSH
15143: LD_INT 30
15145: PUSH
15146: LD_INT 0
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 30
15155: PUSH
15156: LD_INT 1
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: LIST
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PPUSH
15172: CALL_OW 69
15176: ST_TO_ADDR
// if not depot then
15177: LD_VAR 0 1
15181: NOT
15182: IFFALSE 15186
// exit ;
15184: GO 15260
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15186: LD_ADDR_VAR 0 2
15190: PUSH
15191: LD_VAR 0 1
15195: PUSH
15196: LD_INT 1
15198: PPUSH
15199: LD_VAR 0 1
15203: PPUSH
15204: CALL_OW 12
15208: ARRAY
15209: PPUSH
15210: CALL_OW 274
15214: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15215: LD_VAR 0 2
15219: PPUSH
15220: LD_INT 1
15222: PPUSH
15223: LD_INT 0
15225: PPUSH
15226: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15230: LD_VAR 0 2
15234: PPUSH
15235: LD_INT 2
15237: PPUSH
15238: LD_INT 0
15240: PPUSH
15241: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15245: LD_VAR 0 2
15249: PPUSH
15250: LD_INT 3
15252: PPUSH
15253: LD_INT 0
15255: PPUSH
15256: CALL_OW 277
// end ;
15260: PPOPN 2
15262: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15263: LD_EXP 37
15267: PUSH
15268: LD_EXP 65
15272: AND
15273: IFFALSE 15370
15275: GO 15277
15277: DISABLE
15278: LD_INT 0
15280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15281: LD_ADDR_VAR 0 1
15285: PUSH
15286: LD_INT 22
15288: PUSH
15289: LD_OWVAR 2
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 21
15300: PUSH
15301: LD_INT 1
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: LD_INT 23
15313: PUSH
15314: LD_INT 0
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: PPUSH
15330: CALL_OW 69
15334: ST_TO_ADDR
// if not tmp then
15335: LD_VAR 0 1
15339: NOT
15340: IFFALSE 15344
// exit ;
15342: GO 15370
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15344: LD_VAR 0 1
15348: PUSH
15349: LD_INT 1
15351: PPUSH
15352: LD_VAR 0 1
15356: PPUSH
15357: CALL_OW 12
15361: ARRAY
15362: PPUSH
15363: LD_INT 200
15365: PPUSH
15366: CALL_OW 234
// end ;
15370: PPOPN 1
15372: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15373: LD_EXP 37
15377: PUSH
15378: LD_EXP 66
15382: AND
15383: IFFALSE 15462
15385: GO 15387
15387: DISABLE
15388: LD_INT 0
15390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15391: LD_ADDR_VAR 0 1
15395: PUSH
15396: LD_INT 22
15398: PUSH
15399: LD_OWVAR 2
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: LD_INT 21
15410: PUSH
15411: LD_INT 2
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: PPUSH
15422: CALL_OW 69
15426: ST_TO_ADDR
// if not tmp then
15427: LD_VAR 0 1
15431: NOT
15432: IFFALSE 15436
// exit ;
15434: GO 15462
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15436: LD_VAR 0 1
15440: PUSH
15441: LD_INT 1
15443: PPUSH
15444: LD_VAR 0 1
15448: PPUSH
15449: CALL_OW 12
15453: ARRAY
15454: PPUSH
15455: LD_INT 60
15457: PPUSH
15458: CALL_OW 234
// end ;
15462: PPOPN 1
15464: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15465: LD_EXP 37
15469: PUSH
15470: LD_EXP 67
15474: AND
15475: IFFALSE 15574
15477: GO 15479
15479: DISABLE
15480: LD_INT 0
15482: PPUSH
15483: PPUSH
// begin enable ;
15484: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15485: LD_ADDR_VAR 0 1
15489: PUSH
15490: LD_INT 22
15492: PUSH
15493: LD_OWVAR 2
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 61
15504: PUSH
15505: EMPTY
15506: LIST
15507: PUSH
15508: LD_INT 33
15510: PUSH
15511: LD_INT 2
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: LIST
15522: PPUSH
15523: CALL_OW 69
15527: ST_TO_ADDR
// if not tmp then
15528: LD_VAR 0 1
15532: NOT
15533: IFFALSE 15537
// exit ;
15535: GO 15574
// for i in tmp do
15537: LD_ADDR_VAR 0 2
15541: PUSH
15542: LD_VAR 0 1
15546: PUSH
15547: FOR_IN
15548: IFFALSE 15572
// if IsControledBy ( i ) then
15550: LD_VAR 0 2
15554: PPUSH
15555: CALL_OW 312
15559: IFFALSE 15570
// ComUnlink ( i ) ;
15561: LD_VAR 0 2
15565: PPUSH
15566: CALL_OW 136
15570: GO 15547
15572: POP
15573: POP
// end ;
15574: PPOPN 2
15576: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15577: LD_EXP 37
15581: PUSH
15582: LD_EXP 68
15586: AND
15587: IFFALSE 15727
15589: GO 15591
15591: DISABLE
15592: LD_INT 0
15594: PPUSH
15595: PPUSH
// begin ToLua ( displayPowell(); ) ;
15596: LD_STRING displayPowell();
15598: PPUSH
15599: CALL_OW 559
// uc_side := 0 ;
15603: LD_ADDR_OWVAR 20
15607: PUSH
15608: LD_INT 0
15610: ST_TO_ADDR
// uc_nation := 2 ;
15611: LD_ADDR_OWVAR 21
15615: PUSH
15616: LD_INT 2
15618: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15619: LD_ADDR_OWVAR 37
15623: PUSH
15624: LD_INT 14
15626: ST_TO_ADDR
// vc_engine := engine_siberite ;
15627: LD_ADDR_OWVAR 39
15631: PUSH
15632: LD_INT 3
15634: ST_TO_ADDR
// vc_control := control_apeman ;
15635: LD_ADDR_OWVAR 38
15639: PUSH
15640: LD_INT 5
15642: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15643: LD_ADDR_OWVAR 40
15647: PUSH
15648: LD_INT 29
15650: ST_TO_ADDR
// un := CreateVehicle ;
15651: LD_ADDR_VAR 0 2
15655: PUSH
15656: CALL_OW 45
15660: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15661: LD_VAR 0 2
15665: PPUSH
15666: LD_INT 1
15668: PPUSH
15669: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15673: LD_INT 35
15675: PPUSH
15676: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15680: LD_VAR 0 2
15684: PPUSH
15685: LD_INT 22
15687: PUSH
15688: LD_OWVAR 2
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PPUSH
15697: CALL_OW 69
15701: PPUSH
15702: LD_VAR 0 2
15706: PPUSH
15707: CALL_OW 74
15711: PPUSH
15712: CALL_OW 115
// until IsDead ( un ) ;
15716: LD_VAR 0 2
15720: PPUSH
15721: CALL_OW 301
15725: IFFALSE 15673
// end ;
15727: PPOPN 2
15729: END
// every 0 0$1 trigger StreamModeActive and sStu do
15730: LD_EXP 37
15734: PUSH
15735: LD_EXP 76
15739: AND
15740: IFFALSE 15756
15742: GO 15744
15744: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15745: LD_STRING displayStucuk();
15747: PPUSH
15748: CALL_OW 559
// ResetFog ;
15752: CALL_OW 335
// end ;
15756: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15757: LD_EXP 37
15761: PUSH
15762: LD_EXP 69
15766: AND
15767: IFFALSE 15908
15769: GO 15771
15771: DISABLE
15772: LD_INT 0
15774: PPUSH
15775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15776: LD_ADDR_VAR 0 2
15780: PUSH
15781: LD_INT 22
15783: PUSH
15784: LD_OWVAR 2
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 21
15795: PUSH
15796: LD_INT 1
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PPUSH
15807: CALL_OW 69
15811: ST_TO_ADDR
// if not tmp then
15812: LD_VAR 0 2
15816: NOT
15817: IFFALSE 15821
// exit ;
15819: GO 15908
// un := tmp [ rand ( 1 , tmp ) ] ;
15821: LD_ADDR_VAR 0 1
15825: PUSH
15826: LD_VAR 0 2
15830: PUSH
15831: LD_INT 1
15833: PPUSH
15834: LD_VAR 0 2
15838: PPUSH
15839: CALL_OW 12
15843: ARRAY
15844: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15845: LD_VAR 0 1
15849: PPUSH
15850: LD_INT 0
15852: PPUSH
15853: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15857: LD_VAR 0 1
15861: PPUSH
15862: LD_OWVAR 3
15866: PUSH
15867: LD_VAR 0 1
15871: DIFF
15872: PPUSH
15873: LD_VAR 0 1
15877: PPUSH
15878: CALL_OW 74
15882: PPUSH
15883: CALL_OW 115
// wait ( 0 0$20 ) ;
15887: LD_INT 700
15889: PPUSH
15890: CALL_OW 67
// SetSide ( un , your_side ) ;
15894: LD_VAR 0 1
15898: PPUSH
15899: LD_OWVAR 2
15903: PPUSH
15904: CALL_OW 235
// end ;
15908: PPOPN 2
15910: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15911: LD_EXP 37
15915: PUSH
15916: LD_EXP 70
15920: AND
15921: IFFALSE 16027
15923: GO 15925
15925: DISABLE
15926: LD_INT 0
15928: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15929: LD_ADDR_VAR 0 1
15933: PUSH
15934: LD_INT 22
15936: PUSH
15937: LD_OWVAR 2
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: LD_INT 30
15951: PUSH
15952: LD_INT 0
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 30
15961: PUSH
15962: LD_INT 1
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PPUSH
15978: CALL_OW 69
15982: ST_TO_ADDR
// if not depot then
15983: LD_VAR 0 1
15987: NOT
15988: IFFALSE 15992
// exit ;
15990: GO 16027
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15992: LD_VAR 0 1
15996: PUSH
15997: LD_INT 1
15999: ARRAY
16000: PPUSH
16001: CALL_OW 250
16005: PPUSH
16006: LD_VAR 0 1
16010: PUSH
16011: LD_INT 1
16013: ARRAY
16014: PPUSH
16015: CALL_OW 251
16019: PPUSH
16020: LD_INT 70
16022: PPUSH
16023: CALL_OW 495
// end ;
16027: PPOPN 1
16029: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16030: LD_EXP 37
16034: PUSH
16035: LD_EXP 71
16039: AND
16040: IFFALSE 16251
16042: GO 16044
16044: DISABLE
16045: LD_INT 0
16047: PPUSH
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16052: LD_ADDR_VAR 0 5
16056: PUSH
16057: LD_INT 22
16059: PUSH
16060: LD_OWVAR 2
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 21
16071: PUSH
16072: LD_INT 1
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PPUSH
16083: CALL_OW 69
16087: ST_TO_ADDR
// if not tmp then
16088: LD_VAR 0 5
16092: NOT
16093: IFFALSE 16097
// exit ;
16095: GO 16251
// for i in tmp do
16097: LD_ADDR_VAR 0 1
16101: PUSH
16102: LD_VAR 0 5
16106: PUSH
16107: FOR_IN
16108: IFFALSE 16249
// begin d := rand ( 0 , 5 ) ;
16110: LD_ADDR_VAR 0 4
16114: PUSH
16115: LD_INT 0
16117: PPUSH
16118: LD_INT 5
16120: PPUSH
16121: CALL_OW 12
16125: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16126: LD_ADDR_VAR 0 2
16130: PUSH
16131: LD_VAR 0 1
16135: PPUSH
16136: CALL_OW 250
16140: PPUSH
16141: LD_VAR 0 4
16145: PPUSH
16146: LD_INT 3
16148: PPUSH
16149: LD_INT 12
16151: PPUSH
16152: CALL_OW 12
16156: PPUSH
16157: CALL_OW 272
16161: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16162: LD_ADDR_VAR 0 3
16166: PUSH
16167: LD_VAR 0 1
16171: PPUSH
16172: CALL_OW 251
16176: PPUSH
16177: LD_VAR 0 4
16181: PPUSH
16182: LD_INT 3
16184: PPUSH
16185: LD_INT 12
16187: PPUSH
16188: CALL_OW 12
16192: PPUSH
16193: CALL_OW 273
16197: ST_TO_ADDR
// if ValidHex ( x , y ) then
16198: LD_VAR 0 2
16202: PPUSH
16203: LD_VAR 0 3
16207: PPUSH
16208: CALL_OW 488
16212: IFFALSE 16247
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16214: LD_VAR 0 1
16218: PPUSH
16219: LD_VAR 0 2
16223: PPUSH
16224: LD_VAR 0 3
16228: PPUSH
16229: LD_INT 3
16231: PPUSH
16232: LD_INT 6
16234: PPUSH
16235: CALL_OW 12
16239: PPUSH
16240: LD_INT 1
16242: PPUSH
16243: CALL_OW 483
// end ;
16247: GO 16107
16249: POP
16250: POP
// end ;
16251: PPOPN 5
16253: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16254: LD_EXP 37
16258: PUSH
16259: LD_EXP 72
16263: AND
16264: IFFALSE 16358
16266: GO 16268
16268: DISABLE
16269: LD_INT 0
16271: PPUSH
16272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16273: LD_ADDR_VAR 0 2
16277: PUSH
16278: LD_INT 22
16280: PUSH
16281: LD_OWVAR 2
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 32
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 21
16302: PUSH
16303: LD_INT 2
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: PPUSH
16315: CALL_OW 69
16319: ST_TO_ADDR
// if not tmp then
16320: LD_VAR 0 2
16324: NOT
16325: IFFALSE 16329
// exit ;
16327: GO 16358
// for i in tmp do
16329: LD_ADDR_VAR 0 1
16333: PUSH
16334: LD_VAR 0 2
16338: PUSH
16339: FOR_IN
16340: IFFALSE 16356
// SetFuel ( i , 0 ) ;
16342: LD_VAR 0 1
16346: PPUSH
16347: LD_INT 0
16349: PPUSH
16350: CALL_OW 240
16354: GO 16339
16356: POP
16357: POP
// end ;
16358: PPOPN 2
16360: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16361: LD_EXP 37
16365: PUSH
16366: LD_EXP 73
16370: AND
16371: IFFALSE 16437
16373: GO 16375
16375: DISABLE
16376: LD_INT 0
16378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16379: LD_ADDR_VAR 0 1
16383: PUSH
16384: LD_INT 22
16386: PUSH
16387: LD_OWVAR 2
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 30
16398: PUSH
16399: LD_INT 29
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PPUSH
16410: CALL_OW 69
16414: ST_TO_ADDR
// if not tmp then
16415: LD_VAR 0 1
16419: NOT
16420: IFFALSE 16424
// exit ;
16422: GO 16437
// DestroyUnit ( tmp [ 1 ] ) ;
16424: LD_VAR 0 1
16428: PUSH
16429: LD_INT 1
16431: ARRAY
16432: PPUSH
16433: CALL_OW 65
// end ;
16437: PPOPN 1
16439: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16440: LD_EXP 37
16444: PUSH
16445: LD_EXP 75
16449: AND
16450: IFFALSE 16579
16452: GO 16454
16454: DISABLE
16455: LD_INT 0
16457: PPUSH
// begin uc_side := 0 ;
16458: LD_ADDR_OWVAR 20
16462: PUSH
16463: LD_INT 0
16465: ST_TO_ADDR
// uc_nation := nation_arabian ;
16466: LD_ADDR_OWVAR 21
16470: PUSH
16471: LD_INT 2
16473: ST_TO_ADDR
// hc_gallery :=  ;
16474: LD_ADDR_OWVAR 33
16478: PUSH
16479: LD_STRING 
16481: ST_TO_ADDR
// hc_name :=  ;
16482: LD_ADDR_OWVAR 26
16486: PUSH
16487: LD_STRING 
16489: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16490: LD_INT 1
16492: PPUSH
16493: LD_INT 11
16495: PPUSH
16496: LD_INT 10
16498: PPUSH
16499: CALL_OW 380
// un := CreateHuman ;
16503: LD_ADDR_VAR 0 1
16507: PUSH
16508: CALL_OW 44
16512: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16513: LD_VAR 0 1
16517: PPUSH
16518: LD_INT 1
16520: PPUSH
16521: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16525: LD_INT 35
16527: PPUSH
16528: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16532: LD_VAR 0 1
16536: PPUSH
16537: LD_INT 22
16539: PUSH
16540: LD_OWVAR 2
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 69
16553: PPUSH
16554: LD_VAR 0 1
16558: PPUSH
16559: CALL_OW 74
16563: PPUSH
16564: CALL_OW 115
// until IsDead ( un ) ;
16568: LD_VAR 0 1
16572: PPUSH
16573: CALL_OW 301
16577: IFFALSE 16525
// end ;
16579: PPOPN 1
16581: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16582: LD_EXP 37
16586: PUSH
16587: LD_EXP 77
16591: AND
16592: IFFALSE 16604
16594: GO 16596
16596: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16597: LD_STRING earthquake(getX(game), 0, 32)
16599: PPUSH
16600: CALL_OW 559
16604: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16605: LD_EXP 37
16609: PUSH
16610: LD_EXP 78
16614: AND
16615: IFFALSE 16706
16617: GO 16619
16619: DISABLE
16620: LD_INT 0
16622: PPUSH
// begin enable ;
16623: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16624: LD_ADDR_VAR 0 1
16628: PUSH
16629: LD_INT 22
16631: PUSH
16632: LD_OWVAR 2
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 21
16643: PUSH
16644: LD_INT 2
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 33
16653: PUSH
16654: LD_INT 3
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: LIST
16665: PPUSH
16666: CALL_OW 69
16670: ST_TO_ADDR
// if not tmp then
16671: LD_VAR 0 1
16675: NOT
16676: IFFALSE 16680
// exit ;
16678: GO 16706
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16680: LD_VAR 0 1
16684: PUSH
16685: LD_INT 1
16687: PPUSH
16688: LD_VAR 0 1
16692: PPUSH
16693: CALL_OW 12
16697: ARRAY
16698: PPUSH
16699: LD_INT 1
16701: PPUSH
16702: CALL_OW 234
// end ;
16706: PPOPN 1
16708: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16709: LD_EXP 37
16713: PUSH
16714: LD_EXP 79
16718: AND
16719: IFFALSE 16860
16721: GO 16723
16723: DISABLE
16724: LD_INT 0
16726: PPUSH
16727: PPUSH
16728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16729: LD_ADDR_VAR 0 3
16733: PUSH
16734: LD_INT 22
16736: PUSH
16737: LD_OWVAR 2
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 25
16748: PUSH
16749: LD_INT 1
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PPUSH
16760: CALL_OW 69
16764: ST_TO_ADDR
// if not tmp then
16765: LD_VAR 0 3
16769: NOT
16770: IFFALSE 16774
// exit ;
16772: GO 16860
// un := tmp [ rand ( 1 , tmp ) ] ;
16774: LD_ADDR_VAR 0 2
16778: PUSH
16779: LD_VAR 0 3
16783: PUSH
16784: LD_INT 1
16786: PPUSH
16787: LD_VAR 0 3
16791: PPUSH
16792: CALL_OW 12
16796: ARRAY
16797: ST_TO_ADDR
// if Crawls ( un ) then
16798: LD_VAR 0 2
16802: PPUSH
16803: CALL_OW 318
16807: IFFALSE 16818
// ComWalk ( un ) ;
16809: LD_VAR 0 2
16813: PPUSH
16814: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16818: LD_VAR 0 2
16822: PPUSH
16823: LD_INT 9
16825: PPUSH
16826: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16830: LD_INT 28
16832: PPUSH
16833: LD_OWVAR 2
16837: PPUSH
16838: LD_INT 2
16840: PPUSH
16841: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16845: LD_INT 29
16847: PPUSH
16848: LD_OWVAR 2
16852: PPUSH
16853: LD_INT 2
16855: PPUSH
16856: CALL_OW 322
// end ;
16860: PPOPN 3
16862: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16863: LD_EXP 37
16867: PUSH
16868: LD_EXP 80
16872: AND
16873: IFFALSE 16984
16875: GO 16877
16877: DISABLE
16878: LD_INT 0
16880: PPUSH
16881: PPUSH
16882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16883: LD_ADDR_VAR 0 3
16887: PUSH
16888: LD_INT 22
16890: PUSH
16891: LD_OWVAR 2
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 25
16902: PUSH
16903: LD_INT 1
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PPUSH
16914: CALL_OW 69
16918: ST_TO_ADDR
// if not tmp then
16919: LD_VAR 0 3
16923: NOT
16924: IFFALSE 16928
// exit ;
16926: GO 16984
// un := tmp [ rand ( 1 , tmp ) ] ;
16928: LD_ADDR_VAR 0 2
16932: PUSH
16933: LD_VAR 0 3
16937: PUSH
16938: LD_INT 1
16940: PPUSH
16941: LD_VAR 0 3
16945: PPUSH
16946: CALL_OW 12
16950: ARRAY
16951: ST_TO_ADDR
// if Crawls ( un ) then
16952: LD_VAR 0 2
16956: PPUSH
16957: CALL_OW 318
16961: IFFALSE 16972
// ComWalk ( un ) ;
16963: LD_VAR 0 2
16967: PPUSH
16968: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16972: LD_VAR 0 2
16976: PPUSH
16977: LD_INT 8
16979: PPUSH
16980: CALL_OW 336
// end ;
16984: PPOPN 3
16986: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16987: LD_EXP 37
16991: PUSH
16992: LD_EXP 81
16996: AND
16997: IFFALSE 17141
16999: GO 17001
17001: DISABLE
17002: LD_INT 0
17004: PPUSH
17005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17006: LD_ADDR_VAR 0 2
17010: PUSH
17011: LD_INT 22
17013: PUSH
17014: LD_OWVAR 2
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 21
17025: PUSH
17026: LD_INT 2
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 2
17035: PUSH
17036: LD_INT 34
17038: PUSH
17039: LD_INT 12
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 34
17048: PUSH
17049: LD_INT 51
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 34
17058: PUSH
17059: LD_INT 32
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: LIST
17076: PPUSH
17077: CALL_OW 69
17081: ST_TO_ADDR
// if not tmp then
17082: LD_VAR 0 2
17086: NOT
17087: IFFALSE 17091
// exit ;
17089: GO 17141
// for i in tmp do
17091: LD_ADDR_VAR 0 1
17095: PUSH
17096: LD_VAR 0 2
17100: PUSH
17101: FOR_IN
17102: IFFALSE 17139
// if GetCargo ( i , mat_artifact ) = 0 then
17104: LD_VAR 0 1
17108: PPUSH
17109: LD_INT 4
17111: PPUSH
17112: CALL_OW 289
17116: PUSH
17117: LD_INT 0
17119: EQUAL
17120: IFFALSE 17137
// SetCargo ( i , mat_siberit , 100 ) ;
17122: LD_VAR 0 1
17126: PPUSH
17127: LD_INT 3
17129: PPUSH
17130: LD_INT 100
17132: PPUSH
17133: CALL_OW 290
17137: GO 17101
17139: POP
17140: POP
// end ;
17141: PPOPN 2
17143: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17144: LD_EXP 37
17148: PUSH
17149: LD_EXP 82
17153: AND
17154: IFFALSE 17337
17156: GO 17158
17158: DISABLE
17159: LD_INT 0
17161: PPUSH
17162: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17163: LD_ADDR_VAR 0 2
17167: PUSH
17168: LD_INT 22
17170: PUSH
17171: LD_OWVAR 2
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PPUSH
17180: CALL_OW 69
17184: ST_TO_ADDR
// if not tmp then
17185: LD_VAR 0 2
17189: NOT
17190: IFFALSE 17194
// exit ;
17192: GO 17337
// for i := 1 to 2 do
17194: LD_ADDR_VAR 0 1
17198: PUSH
17199: DOUBLE
17200: LD_INT 1
17202: DEC
17203: ST_TO_ADDR
17204: LD_INT 2
17206: PUSH
17207: FOR_TO
17208: IFFALSE 17335
// begin uc_side := your_side ;
17210: LD_ADDR_OWVAR 20
17214: PUSH
17215: LD_OWVAR 2
17219: ST_TO_ADDR
// uc_nation := nation_american ;
17220: LD_ADDR_OWVAR 21
17224: PUSH
17225: LD_INT 1
17227: ST_TO_ADDR
// vc_chassis := us_morphling ;
17228: LD_ADDR_OWVAR 37
17232: PUSH
17233: LD_INT 5
17235: ST_TO_ADDR
// vc_engine := engine_siberite ;
17236: LD_ADDR_OWVAR 39
17240: PUSH
17241: LD_INT 3
17243: ST_TO_ADDR
// vc_control := control_computer ;
17244: LD_ADDR_OWVAR 38
17248: PUSH
17249: LD_INT 3
17251: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17252: LD_ADDR_OWVAR 40
17256: PUSH
17257: LD_INT 10
17259: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17260: LD_VAR 0 2
17264: PUSH
17265: LD_INT 1
17267: ARRAY
17268: PPUSH
17269: CALL_OW 310
17273: NOT
17274: IFFALSE 17321
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17276: CALL_OW 45
17280: PPUSH
17281: LD_VAR 0 2
17285: PUSH
17286: LD_INT 1
17288: ARRAY
17289: PPUSH
17290: CALL_OW 250
17294: PPUSH
17295: LD_VAR 0 2
17299: PUSH
17300: LD_INT 1
17302: ARRAY
17303: PPUSH
17304: CALL_OW 251
17308: PPUSH
17309: LD_INT 12
17311: PPUSH
17312: LD_INT 1
17314: PPUSH
17315: CALL_OW 50
17319: GO 17333
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17321: CALL_OW 45
17325: PPUSH
17326: LD_INT 1
17328: PPUSH
17329: CALL_OW 51
// end ;
17333: GO 17207
17335: POP
17336: POP
// end ;
17337: PPOPN 2
17339: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17340: LD_EXP 37
17344: PUSH
17345: LD_EXP 83
17349: AND
17350: IFFALSE 17572
17352: GO 17354
17354: DISABLE
17355: LD_INT 0
17357: PPUSH
17358: PPUSH
17359: PPUSH
17360: PPUSH
17361: PPUSH
17362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17363: LD_ADDR_VAR 0 6
17367: PUSH
17368: LD_INT 22
17370: PUSH
17371: LD_OWVAR 2
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 21
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 3
17392: PUSH
17393: LD_INT 23
17395: PUSH
17396: LD_INT 0
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: LIST
17411: PPUSH
17412: CALL_OW 69
17416: ST_TO_ADDR
// if not tmp then
17417: LD_VAR 0 6
17421: NOT
17422: IFFALSE 17426
// exit ;
17424: GO 17572
// s1 := rand ( 1 , 4 ) ;
17426: LD_ADDR_VAR 0 2
17430: PUSH
17431: LD_INT 1
17433: PPUSH
17434: LD_INT 4
17436: PPUSH
17437: CALL_OW 12
17441: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17442: LD_ADDR_VAR 0 4
17446: PUSH
17447: LD_VAR 0 6
17451: PUSH
17452: LD_INT 1
17454: ARRAY
17455: PPUSH
17456: LD_VAR 0 2
17460: PPUSH
17461: CALL_OW 259
17465: ST_TO_ADDR
// if s1 = 1 then
17466: LD_VAR 0 2
17470: PUSH
17471: LD_INT 1
17473: EQUAL
17474: IFFALSE 17494
// s2 := rand ( 2 , 4 ) else
17476: LD_ADDR_VAR 0 3
17480: PUSH
17481: LD_INT 2
17483: PPUSH
17484: LD_INT 4
17486: PPUSH
17487: CALL_OW 12
17491: ST_TO_ADDR
17492: GO 17502
// s2 := 1 ;
17494: LD_ADDR_VAR 0 3
17498: PUSH
17499: LD_INT 1
17501: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17502: LD_ADDR_VAR 0 5
17506: PUSH
17507: LD_VAR 0 6
17511: PUSH
17512: LD_INT 1
17514: ARRAY
17515: PPUSH
17516: LD_VAR 0 3
17520: PPUSH
17521: CALL_OW 259
17525: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17526: LD_VAR 0 6
17530: PUSH
17531: LD_INT 1
17533: ARRAY
17534: PPUSH
17535: LD_VAR 0 2
17539: PPUSH
17540: LD_VAR 0 5
17544: PPUSH
17545: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17549: LD_VAR 0 6
17553: PUSH
17554: LD_INT 1
17556: ARRAY
17557: PPUSH
17558: LD_VAR 0 3
17562: PPUSH
17563: LD_VAR 0 4
17567: PPUSH
17568: CALL_OW 237
// end ;
17572: PPOPN 6
17574: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17575: LD_EXP 37
17579: PUSH
17580: LD_EXP 84
17584: AND
17585: IFFALSE 17664
17587: GO 17589
17589: DISABLE
17590: LD_INT 0
17592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_INT 22
17600: PUSH
17601: LD_OWVAR 2
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 30
17612: PUSH
17613: LD_INT 3
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PPUSH
17624: CALL_OW 69
17628: ST_TO_ADDR
// if not tmp then
17629: LD_VAR 0 1
17633: NOT
17634: IFFALSE 17638
// exit ;
17636: GO 17664
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17638: LD_VAR 0 1
17642: PUSH
17643: LD_INT 1
17645: PPUSH
17646: LD_VAR 0 1
17650: PPUSH
17651: CALL_OW 12
17655: ARRAY
17656: PPUSH
17657: LD_INT 1
17659: PPUSH
17660: CALL_OW 234
// end ;
17664: PPOPN 1
17666: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17667: LD_EXP 37
17671: PUSH
17672: LD_EXP 85
17676: AND
17677: IFFALSE 17789
17679: GO 17681
17681: DISABLE
17682: LD_INT 0
17684: PPUSH
17685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17686: LD_ADDR_VAR 0 2
17690: PUSH
17691: LD_INT 22
17693: PUSH
17694: LD_OWVAR 2
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 2
17705: PUSH
17706: LD_INT 30
17708: PUSH
17709: LD_INT 27
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 30
17718: PUSH
17719: LD_INT 26
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 30
17728: PUSH
17729: LD_INT 28
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PPUSH
17746: CALL_OW 69
17750: ST_TO_ADDR
// if not tmp then
17751: LD_VAR 0 2
17755: NOT
17756: IFFALSE 17760
// exit ;
17758: GO 17789
// for i in tmp do
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_VAR 0 2
17769: PUSH
17770: FOR_IN
17771: IFFALSE 17787
// SetLives ( i , 1 ) ;
17773: LD_VAR 0 1
17777: PPUSH
17778: LD_INT 1
17780: PPUSH
17781: CALL_OW 234
17785: GO 17770
17787: POP
17788: POP
// end ;
17789: PPOPN 2
17791: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17792: LD_EXP 37
17796: PUSH
17797: LD_EXP 86
17801: AND
17802: IFFALSE 18089
17804: GO 17806
17806: DISABLE
17807: LD_INT 0
17809: PPUSH
17810: PPUSH
17811: PPUSH
// begin i := rand ( 1 , 7 ) ;
17812: LD_ADDR_VAR 0 1
17816: PUSH
17817: LD_INT 1
17819: PPUSH
17820: LD_INT 7
17822: PPUSH
17823: CALL_OW 12
17827: ST_TO_ADDR
// case i of 1 :
17828: LD_VAR 0 1
17832: PUSH
17833: LD_INT 1
17835: DOUBLE
17836: EQUAL
17837: IFTRUE 17841
17839: GO 17851
17841: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17842: LD_STRING earthquake(getX(game), 0, 32)
17844: PPUSH
17845: CALL_OW 559
17849: GO 18089
17851: LD_INT 2
17853: DOUBLE
17854: EQUAL
17855: IFTRUE 17859
17857: GO 17873
17859: POP
// begin ToLua ( displayStucuk(); ) ;
17860: LD_STRING displayStucuk();
17862: PPUSH
17863: CALL_OW 559
// ResetFog ;
17867: CALL_OW 335
// end ; 3 :
17871: GO 18089
17873: LD_INT 3
17875: DOUBLE
17876: EQUAL
17877: IFTRUE 17881
17879: GO 17985
17881: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17882: LD_ADDR_VAR 0 2
17886: PUSH
17887: LD_INT 22
17889: PUSH
17890: LD_OWVAR 2
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 25
17901: PUSH
17902: LD_INT 1
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PPUSH
17913: CALL_OW 69
17917: ST_TO_ADDR
// if not tmp then
17918: LD_VAR 0 2
17922: NOT
17923: IFFALSE 17927
// exit ;
17925: GO 18089
// un := tmp [ rand ( 1 , tmp ) ] ;
17927: LD_ADDR_VAR 0 3
17931: PUSH
17932: LD_VAR 0 2
17936: PUSH
17937: LD_INT 1
17939: PPUSH
17940: LD_VAR 0 2
17944: PPUSH
17945: CALL_OW 12
17949: ARRAY
17950: ST_TO_ADDR
// if Crawls ( un ) then
17951: LD_VAR 0 3
17955: PPUSH
17956: CALL_OW 318
17960: IFFALSE 17971
// ComWalk ( un ) ;
17962: LD_VAR 0 3
17966: PPUSH
17967: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17971: LD_VAR 0 3
17975: PPUSH
17976: LD_INT 8
17978: PPUSH
17979: CALL_OW 336
// end ; 4 :
17983: GO 18089
17985: LD_INT 4
17987: DOUBLE
17988: EQUAL
17989: IFTRUE 17993
17991: GO 18067
17993: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17994: LD_ADDR_VAR 0 2
17998: PUSH
17999: LD_INT 22
18001: PUSH
18002: LD_OWVAR 2
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 30
18013: PUSH
18014: LD_INT 29
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PPUSH
18025: CALL_OW 69
18029: ST_TO_ADDR
// if not tmp then
18030: LD_VAR 0 2
18034: NOT
18035: IFFALSE 18039
// exit ;
18037: GO 18089
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18039: LD_VAR 0 2
18043: PUSH
18044: LD_INT 1
18046: ARRAY
18047: PPUSH
18048: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18052: LD_VAR 0 2
18056: PUSH
18057: LD_INT 1
18059: ARRAY
18060: PPUSH
18061: CALL_OW 65
// end ; 5 .. 7 :
18065: GO 18089
18067: LD_INT 5
18069: DOUBLE
18070: GREATEREQUAL
18071: IFFALSE 18079
18073: LD_INT 7
18075: DOUBLE
18076: LESSEQUAL
18077: IFTRUE 18081
18079: GO 18088
18081: POP
// StreamSibBomb ; end ;
18082: CALL 14326 0 0
18086: GO 18089
18088: POP
// end ;
18089: PPOPN 3
18091: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18092: LD_EXP 37
18096: PUSH
18097: LD_EXP 87
18101: AND
18102: IFFALSE 18258
18104: GO 18106
18106: DISABLE
18107: LD_INT 0
18109: PPUSH
18110: PPUSH
18111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18112: LD_ADDR_VAR 0 2
18116: PUSH
18117: LD_INT 81
18119: PUSH
18120: LD_OWVAR 2
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 2
18131: PUSH
18132: LD_INT 21
18134: PUSH
18135: LD_INT 1
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 21
18144: PUSH
18145: LD_INT 2
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: LIST
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PPUSH
18161: CALL_OW 69
18165: ST_TO_ADDR
// if not tmp then
18166: LD_VAR 0 2
18170: NOT
18171: IFFALSE 18175
// exit ;
18173: GO 18258
// p := 0 ;
18175: LD_ADDR_VAR 0 3
18179: PUSH
18180: LD_INT 0
18182: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18183: LD_INT 35
18185: PPUSH
18186: CALL_OW 67
// p := p + 1 ;
18190: LD_ADDR_VAR 0 3
18194: PUSH
18195: LD_VAR 0 3
18199: PUSH
18200: LD_INT 1
18202: PLUS
18203: ST_TO_ADDR
// for i in tmp do
18204: LD_ADDR_VAR 0 1
18208: PUSH
18209: LD_VAR 0 2
18213: PUSH
18214: FOR_IN
18215: IFFALSE 18246
// if GetLives ( i ) < 1000 then
18217: LD_VAR 0 1
18221: PPUSH
18222: CALL_OW 256
18226: PUSH
18227: LD_INT 1000
18229: LESS
18230: IFFALSE 18244
// SetLives ( i , 1000 ) ;
18232: LD_VAR 0 1
18236: PPUSH
18237: LD_INT 1000
18239: PPUSH
18240: CALL_OW 234
18244: GO 18214
18246: POP
18247: POP
// until p > 20 ;
18248: LD_VAR 0 3
18252: PUSH
18253: LD_INT 20
18255: GREATER
18256: IFFALSE 18183
// end ;
18258: PPOPN 3
18260: END
// every 0 0$1 trigger StreamModeActive and sTime do
18261: LD_EXP 37
18265: PUSH
18266: LD_EXP 88
18270: AND
18271: IFFALSE 18306
18273: GO 18275
18275: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18276: LD_INT 28
18278: PPUSH
18279: LD_OWVAR 2
18283: PPUSH
18284: LD_INT 2
18286: PPUSH
18287: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18291: LD_INT 30
18293: PPUSH
18294: LD_OWVAR 2
18298: PPUSH
18299: LD_INT 2
18301: PPUSH
18302: CALL_OW 322
// end ;
18306: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18307: LD_EXP 37
18311: PUSH
18312: LD_EXP 89
18316: AND
18317: IFFALSE 18438
18319: GO 18321
18321: DISABLE
18322: LD_INT 0
18324: PPUSH
18325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18326: LD_ADDR_VAR 0 2
18330: PUSH
18331: LD_INT 22
18333: PUSH
18334: LD_OWVAR 2
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 21
18345: PUSH
18346: LD_INT 1
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 3
18355: PUSH
18356: LD_INT 23
18358: PUSH
18359: LD_INT 0
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: LIST
18374: PPUSH
18375: CALL_OW 69
18379: ST_TO_ADDR
// if not tmp then
18380: LD_VAR 0 2
18384: NOT
18385: IFFALSE 18389
// exit ;
18387: GO 18438
// for i in tmp do
18389: LD_ADDR_VAR 0 1
18393: PUSH
18394: LD_VAR 0 2
18398: PUSH
18399: FOR_IN
18400: IFFALSE 18436
// begin if Crawls ( i ) then
18402: LD_VAR 0 1
18406: PPUSH
18407: CALL_OW 318
18411: IFFALSE 18422
// ComWalk ( i ) ;
18413: LD_VAR 0 1
18417: PPUSH
18418: CALL_OW 138
// SetClass ( i , 2 ) ;
18422: LD_VAR 0 1
18426: PPUSH
18427: LD_INT 2
18429: PPUSH
18430: CALL_OW 336
// end ;
18434: GO 18399
18436: POP
18437: POP
// end ;
18438: PPOPN 2
18440: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18441: LD_EXP 37
18445: PUSH
18446: LD_EXP 90
18450: AND
18451: IFFALSE 18739
18453: GO 18455
18455: DISABLE
18456: LD_INT 0
18458: PPUSH
18459: PPUSH
18460: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18461: LD_OWVAR 2
18465: PPUSH
18466: LD_INT 9
18468: PPUSH
18469: LD_INT 1
18471: PPUSH
18472: LD_INT 1
18474: PPUSH
18475: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18479: LD_INT 9
18481: PPUSH
18482: LD_OWVAR 2
18486: PPUSH
18487: CALL_OW 343
// uc_side := 9 ;
18491: LD_ADDR_OWVAR 20
18495: PUSH
18496: LD_INT 9
18498: ST_TO_ADDR
// uc_nation := 2 ;
18499: LD_ADDR_OWVAR 21
18503: PUSH
18504: LD_INT 2
18506: ST_TO_ADDR
// hc_name := Dark Warrior ;
18507: LD_ADDR_OWVAR 26
18511: PUSH
18512: LD_STRING Dark Warrior
18514: ST_TO_ADDR
// hc_gallery :=  ;
18515: LD_ADDR_OWVAR 33
18519: PUSH
18520: LD_STRING 
18522: ST_TO_ADDR
// hc_noskilllimit := true ;
18523: LD_ADDR_OWVAR 76
18527: PUSH
18528: LD_INT 1
18530: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18531: LD_ADDR_OWVAR 31
18535: PUSH
18536: LD_INT 30
18538: PUSH
18539: LD_INT 30
18541: PUSH
18542: LD_INT 30
18544: PUSH
18545: LD_INT 30
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: ST_TO_ADDR
// un := CreateHuman ;
18554: LD_ADDR_VAR 0 3
18558: PUSH
18559: CALL_OW 44
18563: ST_TO_ADDR
// hc_noskilllimit := false ;
18564: LD_ADDR_OWVAR 76
18568: PUSH
18569: LD_INT 0
18571: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18572: LD_VAR 0 3
18576: PPUSH
18577: LD_INT 1
18579: PPUSH
18580: CALL_OW 51
// ToLua ( playRanger() ) ;
18584: LD_STRING playRanger()
18586: PPUSH
18587: CALL_OW 559
// p := 0 ;
18591: LD_ADDR_VAR 0 2
18595: PUSH
18596: LD_INT 0
18598: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18599: LD_INT 35
18601: PPUSH
18602: CALL_OW 67
// p := p + 1 ;
18606: LD_ADDR_VAR 0 2
18610: PUSH
18611: LD_VAR 0 2
18615: PUSH
18616: LD_INT 1
18618: PLUS
18619: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18620: LD_VAR 0 3
18624: PPUSH
18625: CALL_OW 256
18629: PUSH
18630: LD_INT 1000
18632: LESS
18633: IFFALSE 18647
// SetLives ( un , 1000 ) ;
18635: LD_VAR 0 3
18639: PPUSH
18640: LD_INT 1000
18642: PPUSH
18643: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18647: LD_VAR 0 3
18651: PPUSH
18652: LD_INT 81
18654: PUSH
18655: LD_OWVAR 2
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 91
18666: PUSH
18667: LD_VAR 0 3
18671: PUSH
18672: LD_INT 30
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: LIST
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PPUSH
18684: CALL_OW 69
18688: PPUSH
18689: LD_VAR 0 3
18693: PPUSH
18694: CALL_OW 74
18698: PPUSH
18699: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18703: LD_VAR 0 2
18707: PUSH
18708: LD_INT 80
18710: GREATER
18711: PUSH
18712: LD_VAR 0 3
18716: PPUSH
18717: CALL_OW 301
18721: OR
18722: IFFALSE 18599
// if un then
18724: LD_VAR 0 3
18728: IFFALSE 18739
// RemoveUnit ( un ) ;
18730: LD_VAR 0 3
18734: PPUSH
18735: CALL_OW 64
// end ;
18739: PPOPN 3
18741: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18742: LD_EXP 91
18746: IFFALSE 18862
18748: GO 18750
18750: DISABLE
18751: LD_INT 0
18753: PPUSH
18754: PPUSH
18755: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18756: LD_ADDR_VAR 0 2
18760: PUSH
18761: LD_INT 81
18763: PUSH
18764: LD_OWVAR 2
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 21
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PPUSH
18787: CALL_OW 69
18791: ST_TO_ADDR
// if not tmp then
18792: LD_VAR 0 2
18796: NOT
18797: IFFALSE 18801
// exit ;
18799: GO 18862
// ToLua ( playComputer() ) ;
18801: LD_STRING playComputer()
18803: PPUSH
18804: CALL_OW 559
// for i in tmp do
18808: LD_ADDR_VAR 0 1
18812: PUSH
18813: LD_VAR 0 2
18817: PUSH
18818: FOR_IN
18819: IFFALSE 18860
// for j := 1 to 4 do
18821: LD_ADDR_VAR 0 3
18825: PUSH
18826: DOUBLE
18827: LD_INT 1
18829: DEC
18830: ST_TO_ADDR
18831: LD_INT 4
18833: PUSH
18834: FOR_TO
18835: IFFALSE 18856
// SetSkill ( i , j , 10 ) ;
18837: LD_VAR 0 1
18841: PPUSH
18842: LD_VAR 0 3
18846: PPUSH
18847: LD_INT 10
18849: PPUSH
18850: CALL_OW 237
18854: GO 18834
18856: POP
18857: POP
18858: GO 18818
18860: POP
18861: POP
// end ;
18862: PPOPN 3
18864: END
// every 0 0$1 trigger s30 do var i , tmp ;
18865: LD_EXP 92
18869: IFFALSE 18938
18871: GO 18873
18873: DISABLE
18874: LD_INT 0
18876: PPUSH
18877: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18878: LD_ADDR_VAR 0 2
18882: PUSH
18883: LD_INT 22
18885: PUSH
18886: LD_OWVAR 2
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PPUSH
18895: CALL_OW 69
18899: ST_TO_ADDR
// if not tmp then
18900: LD_VAR 0 2
18904: NOT
18905: IFFALSE 18909
// exit ;
18907: GO 18938
// for i in tmp do
18909: LD_ADDR_VAR 0 1
18913: PUSH
18914: LD_VAR 0 2
18918: PUSH
18919: FOR_IN
18920: IFFALSE 18936
// SetLives ( i , 300 ) ;
18922: LD_VAR 0 1
18926: PPUSH
18927: LD_INT 300
18929: PPUSH
18930: CALL_OW 234
18934: GO 18919
18936: POP
18937: POP
// end ;
18938: PPOPN 2
18940: END
// every 0 0$1 trigger s60 do var i , tmp ;
18941: LD_EXP 93
18945: IFFALSE 19014
18947: GO 18949
18949: DISABLE
18950: LD_INT 0
18952: PPUSH
18953: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18954: LD_ADDR_VAR 0 2
18958: PUSH
18959: LD_INT 22
18961: PUSH
18962: LD_OWVAR 2
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PPUSH
18971: CALL_OW 69
18975: ST_TO_ADDR
// if not tmp then
18976: LD_VAR 0 2
18980: NOT
18981: IFFALSE 18985
// exit ;
18983: GO 19014
// for i in tmp do
18985: LD_ADDR_VAR 0 1
18989: PUSH
18990: LD_VAR 0 2
18994: PUSH
18995: FOR_IN
18996: IFFALSE 19012
// SetLives ( i , 600 ) ;
18998: LD_VAR 0 1
19002: PPUSH
19003: LD_INT 600
19005: PPUSH
19006: CALL_OW 234
19010: GO 18995
19012: POP
19013: POP
// end ;
19014: PPOPN 2
19016: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19017: LD_INT 0
19019: PPUSH
// case cmd of 301 :
19020: LD_VAR 0 1
19024: PUSH
19025: LD_INT 301
19027: DOUBLE
19028: EQUAL
19029: IFTRUE 19033
19031: GO 19065
19033: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19034: LD_VAR 0 6
19038: PPUSH
19039: LD_VAR 0 7
19043: PPUSH
19044: LD_VAR 0 8
19048: PPUSH
19049: LD_VAR 0 4
19053: PPUSH
19054: LD_VAR 0 5
19058: PPUSH
19059: CALL 20266 0 5
19063: GO 19186
19065: LD_INT 302
19067: DOUBLE
19068: EQUAL
19069: IFTRUE 19073
19071: GO 19110
19073: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19074: LD_VAR 0 6
19078: PPUSH
19079: LD_VAR 0 7
19083: PPUSH
19084: LD_VAR 0 8
19088: PPUSH
19089: LD_VAR 0 9
19093: PPUSH
19094: LD_VAR 0 4
19098: PPUSH
19099: LD_VAR 0 5
19103: PPUSH
19104: CALL 20357 0 6
19108: GO 19186
19110: LD_INT 303
19112: DOUBLE
19113: EQUAL
19114: IFTRUE 19118
19116: GO 19155
19118: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19119: LD_VAR 0 6
19123: PPUSH
19124: LD_VAR 0 7
19128: PPUSH
19129: LD_VAR 0 8
19133: PPUSH
19134: LD_VAR 0 9
19138: PPUSH
19139: LD_VAR 0 4
19143: PPUSH
19144: LD_VAR 0 5
19148: PPUSH
19149: CALL 19191 0 6
19153: GO 19186
19155: LD_INT 304
19157: DOUBLE
19158: EQUAL
19159: IFTRUE 19163
19161: GO 19185
19163: POP
// hHackTeleport ( unit , x , y ) ; end ;
19164: LD_VAR 0 2
19168: PPUSH
19169: LD_VAR 0 4
19173: PPUSH
19174: LD_VAR 0 5
19178: PPUSH
19179: CALL 20950 0 3
19183: GO 19186
19185: POP
// end ;
19186: LD_VAR 0 12
19190: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19191: LD_INT 0
19193: PPUSH
19194: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19195: LD_VAR 0 1
19199: PUSH
19200: LD_INT 1
19202: LESS
19203: PUSH
19204: LD_VAR 0 1
19208: PUSH
19209: LD_INT 3
19211: GREATER
19212: OR
19213: PUSH
19214: LD_VAR 0 5
19218: PPUSH
19219: LD_VAR 0 6
19223: PPUSH
19224: CALL_OW 428
19228: OR
19229: IFFALSE 19233
// exit ;
19231: GO 19953
// uc_side := your_side ;
19233: LD_ADDR_OWVAR 20
19237: PUSH
19238: LD_OWVAR 2
19242: ST_TO_ADDR
// uc_nation := nation ;
19243: LD_ADDR_OWVAR 21
19247: PUSH
19248: LD_VAR 0 1
19252: ST_TO_ADDR
// bc_level = 1 ;
19253: LD_ADDR_OWVAR 43
19257: PUSH
19258: LD_INT 1
19260: ST_TO_ADDR
// case btype of 1 :
19261: LD_VAR 0 2
19265: PUSH
19266: LD_INT 1
19268: DOUBLE
19269: EQUAL
19270: IFTRUE 19274
19272: GO 19285
19274: POP
// bc_type := b_depot ; 2 :
19275: LD_ADDR_OWVAR 42
19279: PUSH
19280: LD_INT 0
19282: ST_TO_ADDR
19283: GO 19897
19285: LD_INT 2
19287: DOUBLE
19288: EQUAL
19289: IFTRUE 19293
19291: GO 19304
19293: POP
// bc_type := b_warehouse ; 3 :
19294: LD_ADDR_OWVAR 42
19298: PUSH
19299: LD_INT 1
19301: ST_TO_ADDR
19302: GO 19897
19304: LD_INT 3
19306: DOUBLE
19307: EQUAL
19308: IFTRUE 19312
19310: GO 19323
19312: POP
// bc_type := b_lab ; 4 .. 9 :
19313: LD_ADDR_OWVAR 42
19317: PUSH
19318: LD_INT 6
19320: ST_TO_ADDR
19321: GO 19897
19323: LD_INT 4
19325: DOUBLE
19326: GREATEREQUAL
19327: IFFALSE 19335
19329: LD_INT 9
19331: DOUBLE
19332: LESSEQUAL
19333: IFTRUE 19337
19335: GO 19389
19337: POP
// begin bc_type := b_lab_half ;
19338: LD_ADDR_OWVAR 42
19342: PUSH
19343: LD_INT 7
19345: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19346: LD_ADDR_OWVAR 44
19350: PUSH
19351: LD_INT 10
19353: PUSH
19354: LD_INT 11
19356: PUSH
19357: LD_INT 12
19359: PUSH
19360: LD_INT 15
19362: PUSH
19363: LD_INT 14
19365: PUSH
19366: LD_INT 13
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: PUSH
19377: LD_VAR 0 2
19381: PUSH
19382: LD_INT 3
19384: MINUS
19385: ARRAY
19386: ST_TO_ADDR
// end ; 10 .. 13 :
19387: GO 19897
19389: LD_INT 10
19391: DOUBLE
19392: GREATEREQUAL
19393: IFFALSE 19401
19395: LD_INT 13
19397: DOUBLE
19398: LESSEQUAL
19399: IFTRUE 19403
19401: GO 19480
19403: POP
// begin bc_type := b_lab_full ;
19404: LD_ADDR_OWVAR 42
19408: PUSH
19409: LD_INT 8
19411: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19412: LD_ADDR_OWVAR 44
19416: PUSH
19417: LD_INT 10
19419: PUSH
19420: LD_INT 12
19422: PUSH
19423: LD_INT 14
19425: PUSH
19426: LD_INT 13
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: PUSH
19435: LD_VAR 0 2
19439: PUSH
19440: LD_INT 9
19442: MINUS
19443: ARRAY
19444: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19445: LD_ADDR_OWVAR 45
19449: PUSH
19450: LD_INT 11
19452: PUSH
19453: LD_INT 15
19455: PUSH
19456: LD_INT 12
19458: PUSH
19459: LD_INT 15
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: PUSH
19468: LD_VAR 0 2
19472: PUSH
19473: LD_INT 9
19475: MINUS
19476: ARRAY
19477: ST_TO_ADDR
// end ; 14 :
19478: GO 19897
19480: LD_INT 14
19482: DOUBLE
19483: EQUAL
19484: IFTRUE 19488
19486: GO 19499
19488: POP
// bc_type := b_workshop ; 15 :
19489: LD_ADDR_OWVAR 42
19493: PUSH
19494: LD_INT 2
19496: ST_TO_ADDR
19497: GO 19897
19499: LD_INT 15
19501: DOUBLE
19502: EQUAL
19503: IFTRUE 19507
19505: GO 19518
19507: POP
// bc_type := b_factory ; 16 :
19508: LD_ADDR_OWVAR 42
19512: PUSH
19513: LD_INT 3
19515: ST_TO_ADDR
19516: GO 19897
19518: LD_INT 16
19520: DOUBLE
19521: EQUAL
19522: IFTRUE 19526
19524: GO 19537
19526: POP
// bc_type := b_ext_gun ; 17 :
19527: LD_ADDR_OWVAR 42
19531: PUSH
19532: LD_INT 17
19534: ST_TO_ADDR
19535: GO 19897
19537: LD_INT 17
19539: DOUBLE
19540: EQUAL
19541: IFTRUE 19545
19543: GO 19573
19545: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19546: LD_ADDR_OWVAR 42
19550: PUSH
19551: LD_INT 19
19553: PUSH
19554: LD_INT 23
19556: PUSH
19557: LD_INT 19
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: LIST
19564: PUSH
19565: LD_VAR 0 1
19569: ARRAY
19570: ST_TO_ADDR
19571: GO 19897
19573: LD_INT 18
19575: DOUBLE
19576: EQUAL
19577: IFTRUE 19581
19579: GO 19592
19581: POP
// bc_type := b_ext_radar ; 19 :
19582: LD_ADDR_OWVAR 42
19586: PUSH
19587: LD_INT 20
19589: ST_TO_ADDR
19590: GO 19897
19592: LD_INT 19
19594: DOUBLE
19595: EQUAL
19596: IFTRUE 19600
19598: GO 19611
19600: POP
// bc_type := b_ext_radio ; 20 :
19601: LD_ADDR_OWVAR 42
19605: PUSH
19606: LD_INT 22
19608: ST_TO_ADDR
19609: GO 19897
19611: LD_INT 20
19613: DOUBLE
19614: EQUAL
19615: IFTRUE 19619
19617: GO 19630
19619: POP
// bc_type := b_ext_siberium ; 21 :
19620: LD_ADDR_OWVAR 42
19624: PUSH
19625: LD_INT 21
19627: ST_TO_ADDR
19628: GO 19897
19630: LD_INT 21
19632: DOUBLE
19633: EQUAL
19634: IFTRUE 19638
19636: GO 19649
19638: POP
// bc_type := b_ext_computer ; 22 :
19639: LD_ADDR_OWVAR 42
19643: PUSH
19644: LD_INT 24
19646: ST_TO_ADDR
19647: GO 19897
19649: LD_INT 22
19651: DOUBLE
19652: EQUAL
19653: IFTRUE 19657
19655: GO 19668
19657: POP
// bc_type := b_ext_track ; 23 :
19658: LD_ADDR_OWVAR 42
19662: PUSH
19663: LD_INT 16
19665: ST_TO_ADDR
19666: GO 19897
19668: LD_INT 23
19670: DOUBLE
19671: EQUAL
19672: IFTRUE 19676
19674: GO 19687
19676: POP
// bc_type := b_ext_laser ; 24 :
19677: LD_ADDR_OWVAR 42
19681: PUSH
19682: LD_INT 25
19684: ST_TO_ADDR
19685: GO 19897
19687: LD_INT 24
19689: DOUBLE
19690: EQUAL
19691: IFTRUE 19695
19693: GO 19706
19695: POP
// bc_type := b_control_tower ; 25 :
19696: LD_ADDR_OWVAR 42
19700: PUSH
19701: LD_INT 36
19703: ST_TO_ADDR
19704: GO 19897
19706: LD_INT 25
19708: DOUBLE
19709: EQUAL
19710: IFTRUE 19714
19712: GO 19725
19714: POP
// bc_type := b_breastwork ; 26 :
19715: LD_ADDR_OWVAR 42
19719: PUSH
19720: LD_INT 31
19722: ST_TO_ADDR
19723: GO 19897
19725: LD_INT 26
19727: DOUBLE
19728: EQUAL
19729: IFTRUE 19733
19731: GO 19744
19733: POP
// bc_type := b_bunker ; 27 :
19734: LD_ADDR_OWVAR 42
19738: PUSH
19739: LD_INT 32
19741: ST_TO_ADDR
19742: GO 19897
19744: LD_INT 27
19746: DOUBLE
19747: EQUAL
19748: IFTRUE 19752
19750: GO 19763
19752: POP
// bc_type := b_turret ; 28 :
19753: LD_ADDR_OWVAR 42
19757: PUSH
19758: LD_INT 33
19760: ST_TO_ADDR
19761: GO 19897
19763: LD_INT 28
19765: DOUBLE
19766: EQUAL
19767: IFTRUE 19771
19769: GO 19782
19771: POP
// bc_type := b_armoury ; 29 :
19772: LD_ADDR_OWVAR 42
19776: PUSH
19777: LD_INT 4
19779: ST_TO_ADDR
19780: GO 19897
19782: LD_INT 29
19784: DOUBLE
19785: EQUAL
19786: IFTRUE 19790
19788: GO 19801
19790: POP
// bc_type := b_barracks ; 30 :
19791: LD_ADDR_OWVAR 42
19795: PUSH
19796: LD_INT 5
19798: ST_TO_ADDR
19799: GO 19897
19801: LD_INT 30
19803: DOUBLE
19804: EQUAL
19805: IFTRUE 19809
19807: GO 19820
19809: POP
// bc_type := b_solar_power ; 31 :
19810: LD_ADDR_OWVAR 42
19814: PUSH
19815: LD_INT 27
19817: ST_TO_ADDR
19818: GO 19897
19820: LD_INT 31
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 19839
19828: POP
// bc_type := b_oil_power ; 32 :
19829: LD_ADDR_OWVAR 42
19833: PUSH
19834: LD_INT 26
19836: ST_TO_ADDR
19837: GO 19897
19839: LD_INT 32
19841: DOUBLE
19842: EQUAL
19843: IFTRUE 19847
19845: GO 19858
19847: POP
// bc_type := b_siberite_power ; 33 :
19848: LD_ADDR_OWVAR 42
19852: PUSH
19853: LD_INT 28
19855: ST_TO_ADDR
19856: GO 19897
19858: LD_INT 33
19860: DOUBLE
19861: EQUAL
19862: IFTRUE 19866
19864: GO 19877
19866: POP
// bc_type := b_oil_mine ; 34 :
19867: LD_ADDR_OWVAR 42
19871: PUSH
19872: LD_INT 29
19874: ST_TO_ADDR
19875: GO 19897
19877: LD_INT 34
19879: DOUBLE
19880: EQUAL
19881: IFTRUE 19885
19883: GO 19896
19885: POP
// bc_type := b_siberite_mine ; end ;
19886: LD_ADDR_OWVAR 42
19890: PUSH
19891: LD_INT 30
19893: ST_TO_ADDR
19894: GO 19897
19896: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19897: LD_ADDR_VAR 0 8
19901: PUSH
19902: LD_VAR 0 5
19906: PPUSH
19907: LD_VAR 0 6
19911: PPUSH
19912: LD_VAR 0 3
19916: PPUSH
19917: CALL_OW 47
19921: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19922: LD_OWVAR 42
19926: PUSH
19927: LD_INT 32
19929: PUSH
19930: LD_INT 33
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: IN
19937: IFFALSE 19953
// PlaceWeaponTurret ( b , weapon ) ;
19939: LD_VAR 0 8
19943: PPUSH
19944: LD_VAR 0 4
19948: PPUSH
19949: CALL_OW 431
// end ;
19953: LD_VAR 0 7
19957: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19958: LD_INT 0
19960: PPUSH
19961: PPUSH
19962: PPUSH
19963: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19964: LD_ADDR_VAR 0 4
19968: PUSH
19969: LD_INT 22
19971: PUSH
19972: LD_OWVAR 2
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 2
19983: PUSH
19984: LD_INT 30
19986: PUSH
19987: LD_INT 0
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 30
19996: PUSH
19997: LD_INT 1
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PPUSH
20013: CALL_OW 69
20017: ST_TO_ADDR
// if not tmp then
20018: LD_VAR 0 4
20022: NOT
20023: IFFALSE 20027
// exit ;
20025: GO 20086
// for i in tmp do
20027: LD_ADDR_VAR 0 2
20031: PUSH
20032: LD_VAR 0 4
20036: PUSH
20037: FOR_IN
20038: IFFALSE 20084
// for j = 1 to 3 do
20040: LD_ADDR_VAR 0 3
20044: PUSH
20045: DOUBLE
20046: LD_INT 1
20048: DEC
20049: ST_TO_ADDR
20050: LD_INT 3
20052: PUSH
20053: FOR_TO
20054: IFFALSE 20080
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20056: LD_VAR 0 2
20060: PPUSH
20061: CALL_OW 274
20065: PPUSH
20066: LD_VAR 0 3
20070: PPUSH
20071: LD_INT 99999
20073: PPUSH
20074: CALL_OW 277
20078: GO 20053
20080: POP
20081: POP
20082: GO 20037
20084: POP
20085: POP
// end ;
20086: LD_VAR 0 1
20090: RET
// export function hHackSetLevel10 ; var i , j ; begin
20091: LD_INT 0
20093: PPUSH
20094: PPUSH
20095: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20096: LD_ADDR_VAR 0 2
20100: PUSH
20101: LD_INT 21
20103: PUSH
20104: LD_INT 1
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PPUSH
20111: CALL_OW 69
20115: PUSH
20116: FOR_IN
20117: IFFALSE 20169
// if IsSelected ( i ) then
20119: LD_VAR 0 2
20123: PPUSH
20124: CALL_OW 306
20128: IFFALSE 20167
// begin for j := 1 to 4 do
20130: LD_ADDR_VAR 0 3
20134: PUSH
20135: DOUBLE
20136: LD_INT 1
20138: DEC
20139: ST_TO_ADDR
20140: LD_INT 4
20142: PUSH
20143: FOR_TO
20144: IFFALSE 20165
// SetSkill ( i , j , 10 ) ;
20146: LD_VAR 0 2
20150: PPUSH
20151: LD_VAR 0 3
20155: PPUSH
20156: LD_INT 10
20158: PPUSH
20159: CALL_OW 237
20163: GO 20143
20165: POP
20166: POP
// end ;
20167: GO 20116
20169: POP
20170: POP
// end ;
20171: LD_VAR 0 1
20175: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20176: LD_INT 0
20178: PPUSH
20179: PPUSH
20180: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20181: LD_ADDR_VAR 0 2
20185: PUSH
20186: LD_INT 22
20188: PUSH
20189: LD_OWVAR 2
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 21
20200: PUSH
20201: LD_INT 1
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PPUSH
20212: CALL_OW 69
20216: PUSH
20217: FOR_IN
20218: IFFALSE 20259
// begin for j := 1 to 4 do
20220: LD_ADDR_VAR 0 3
20224: PUSH
20225: DOUBLE
20226: LD_INT 1
20228: DEC
20229: ST_TO_ADDR
20230: LD_INT 4
20232: PUSH
20233: FOR_TO
20234: IFFALSE 20255
// SetSkill ( i , j , 10 ) ;
20236: LD_VAR 0 2
20240: PPUSH
20241: LD_VAR 0 3
20245: PPUSH
20246: LD_INT 10
20248: PPUSH
20249: CALL_OW 237
20253: GO 20233
20255: POP
20256: POP
// end ;
20257: GO 20217
20259: POP
20260: POP
// end ;
20261: LD_VAR 0 1
20265: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20266: LD_INT 0
20268: PPUSH
// uc_side := your_side ;
20269: LD_ADDR_OWVAR 20
20273: PUSH
20274: LD_OWVAR 2
20278: ST_TO_ADDR
// uc_nation := nation ;
20279: LD_ADDR_OWVAR 21
20283: PUSH
20284: LD_VAR 0 1
20288: ST_TO_ADDR
// InitHc ;
20289: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20293: LD_INT 0
20295: PPUSH
20296: LD_VAR 0 2
20300: PPUSH
20301: LD_VAR 0 3
20305: PPUSH
20306: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20310: LD_VAR 0 4
20314: PPUSH
20315: LD_VAR 0 5
20319: PPUSH
20320: CALL_OW 428
20324: PUSH
20325: LD_INT 0
20327: EQUAL
20328: IFFALSE 20352
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20330: CALL_OW 44
20334: PPUSH
20335: LD_VAR 0 4
20339: PPUSH
20340: LD_VAR 0 5
20344: PPUSH
20345: LD_INT 1
20347: PPUSH
20348: CALL_OW 48
// end ;
20352: LD_VAR 0 6
20356: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20357: LD_INT 0
20359: PPUSH
20360: PPUSH
// uc_side := your_side ;
20361: LD_ADDR_OWVAR 20
20365: PUSH
20366: LD_OWVAR 2
20370: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20371: LD_VAR 0 1
20375: PUSH
20376: LD_INT 1
20378: PUSH
20379: LD_INT 2
20381: PUSH
20382: LD_INT 3
20384: PUSH
20385: LD_INT 4
20387: PUSH
20388: LD_INT 5
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: IN
20398: IFFALSE 20410
// uc_nation := nation_american else
20400: LD_ADDR_OWVAR 21
20404: PUSH
20405: LD_INT 1
20407: ST_TO_ADDR
20408: GO 20453
// if chassis in [ 11 , 12 , 13 , 14 ] then
20410: LD_VAR 0 1
20414: PUSH
20415: LD_INT 11
20417: PUSH
20418: LD_INT 12
20420: PUSH
20421: LD_INT 13
20423: PUSH
20424: LD_INT 14
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: IN
20433: IFFALSE 20445
// uc_nation := nation_arabian else
20435: LD_ADDR_OWVAR 21
20439: PUSH
20440: LD_INT 2
20442: ST_TO_ADDR
20443: GO 20453
// uc_nation := nation_russian ;
20445: LD_ADDR_OWVAR 21
20449: PUSH
20450: LD_INT 3
20452: ST_TO_ADDR
// vc_chassis := chassis ;
20453: LD_ADDR_OWVAR 37
20457: PUSH
20458: LD_VAR 0 1
20462: ST_TO_ADDR
// vc_engine := engine ;
20463: LD_ADDR_OWVAR 39
20467: PUSH
20468: LD_VAR 0 2
20472: ST_TO_ADDR
// vc_control := control ;
20473: LD_ADDR_OWVAR 38
20477: PUSH
20478: LD_VAR 0 3
20482: ST_TO_ADDR
// vc_weapon := weapon ;
20483: LD_ADDR_OWVAR 40
20487: PUSH
20488: LD_VAR 0 4
20492: ST_TO_ADDR
// un := CreateVehicle ;
20493: LD_ADDR_VAR 0 8
20497: PUSH
20498: CALL_OW 45
20502: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20503: LD_VAR 0 8
20507: PPUSH
20508: LD_INT 0
20510: PPUSH
20511: LD_INT 5
20513: PPUSH
20514: CALL_OW 12
20518: PPUSH
20519: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20523: LD_VAR 0 8
20527: PPUSH
20528: LD_VAR 0 5
20532: PPUSH
20533: LD_VAR 0 6
20537: PPUSH
20538: LD_INT 1
20540: PPUSH
20541: CALL_OW 48
// end ;
20545: LD_VAR 0 7
20549: RET
// export hInvincible ; every 1 do
20550: GO 20552
20552: DISABLE
// hInvincible := [ ] ;
20553: LD_ADDR_EXP 94
20557: PUSH
20558: EMPTY
20559: ST_TO_ADDR
20560: END
// every 10 do var i ;
20561: GO 20563
20563: DISABLE
20564: LD_INT 0
20566: PPUSH
// begin enable ;
20567: ENABLE
// if not hInvincible then
20568: LD_EXP 94
20572: NOT
20573: IFFALSE 20577
// exit ;
20575: GO 20621
// for i in hInvincible do
20577: LD_ADDR_VAR 0 1
20581: PUSH
20582: LD_EXP 94
20586: PUSH
20587: FOR_IN
20588: IFFALSE 20619
// if GetLives ( i ) < 1000 then
20590: LD_VAR 0 1
20594: PPUSH
20595: CALL_OW 256
20599: PUSH
20600: LD_INT 1000
20602: LESS
20603: IFFALSE 20617
// SetLives ( i , 1000 ) ;
20605: LD_VAR 0 1
20609: PPUSH
20610: LD_INT 1000
20612: PPUSH
20613: CALL_OW 234
20617: GO 20587
20619: POP
20620: POP
// end ;
20621: PPOPN 1
20623: END
// export function hHackInvincible ; var i ; begin
20624: LD_INT 0
20626: PPUSH
20627: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20628: LD_ADDR_VAR 0 2
20632: PUSH
20633: LD_INT 2
20635: PUSH
20636: LD_INT 21
20638: PUSH
20639: LD_INT 1
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: PUSH
20646: LD_INT 21
20648: PUSH
20649: LD_INT 2
20651: PUSH
20652: EMPTY
20653: LIST
20654: LIST
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: LIST
20660: PPUSH
20661: CALL_OW 69
20665: PUSH
20666: FOR_IN
20667: IFFALSE 20728
// if IsSelected ( i ) then
20669: LD_VAR 0 2
20673: PPUSH
20674: CALL_OW 306
20678: IFFALSE 20726
// begin if i in hInvincible then
20680: LD_VAR 0 2
20684: PUSH
20685: LD_EXP 94
20689: IN
20690: IFFALSE 20710
// hInvincible := hInvincible diff i else
20692: LD_ADDR_EXP 94
20696: PUSH
20697: LD_EXP 94
20701: PUSH
20702: LD_VAR 0 2
20706: DIFF
20707: ST_TO_ADDR
20708: GO 20726
// hInvincible := hInvincible union i ;
20710: LD_ADDR_EXP 94
20714: PUSH
20715: LD_EXP 94
20719: PUSH
20720: LD_VAR 0 2
20724: UNION
20725: ST_TO_ADDR
// end ;
20726: GO 20666
20728: POP
20729: POP
// end ;
20730: LD_VAR 0 1
20734: RET
// export function hHackInvisible ; var i , j ; begin
20735: LD_INT 0
20737: PPUSH
20738: PPUSH
20739: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20740: LD_ADDR_VAR 0 2
20744: PUSH
20745: LD_INT 21
20747: PUSH
20748: LD_INT 1
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PPUSH
20755: CALL_OW 69
20759: PUSH
20760: FOR_IN
20761: IFFALSE 20785
// if IsSelected ( i ) then
20763: LD_VAR 0 2
20767: PPUSH
20768: CALL_OW 306
20772: IFFALSE 20783
// ComForceInvisible ( i ) ;
20774: LD_VAR 0 2
20778: PPUSH
20779: CALL_OW 496
20783: GO 20760
20785: POP
20786: POP
// end ;
20787: LD_VAR 0 1
20791: RET
// export function hHackChangeYourSide ; begin
20792: LD_INT 0
20794: PPUSH
// if your_side = 8 then
20795: LD_OWVAR 2
20799: PUSH
20800: LD_INT 8
20802: EQUAL
20803: IFFALSE 20815
// your_side := 0 else
20805: LD_ADDR_OWVAR 2
20809: PUSH
20810: LD_INT 0
20812: ST_TO_ADDR
20813: GO 20829
// your_side := your_side + 1 ;
20815: LD_ADDR_OWVAR 2
20819: PUSH
20820: LD_OWVAR 2
20824: PUSH
20825: LD_INT 1
20827: PLUS
20828: ST_TO_ADDR
// end ;
20829: LD_VAR 0 1
20833: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20834: LD_INT 0
20836: PPUSH
20837: PPUSH
20838: PPUSH
// for i in all_units do
20839: LD_ADDR_VAR 0 2
20843: PUSH
20844: LD_OWVAR 3
20848: PUSH
20849: FOR_IN
20850: IFFALSE 20928
// if IsSelected ( i ) then
20852: LD_VAR 0 2
20856: PPUSH
20857: CALL_OW 306
20861: IFFALSE 20926
// begin j := GetSide ( i ) ;
20863: LD_ADDR_VAR 0 3
20867: PUSH
20868: LD_VAR 0 2
20872: PPUSH
20873: CALL_OW 255
20877: ST_TO_ADDR
// if j = 8 then
20878: LD_VAR 0 3
20882: PUSH
20883: LD_INT 8
20885: EQUAL
20886: IFFALSE 20898
// j := 0 else
20888: LD_ADDR_VAR 0 3
20892: PUSH
20893: LD_INT 0
20895: ST_TO_ADDR
20896: GO 20912
// j := j + 1 ;
20898: LD_ADDR_VAR 0 3
20902: PUSH
20903: LD_VAR 0 3
20907: PUSH
20908: LD_INT 1
20910: PLUS
20911: ST_TO_ADDR
// SetSide ( i , j ) ;
20912: LD_VAR 0 2
20916: PPUSH
20917: LD_VAR 0 3
20921: PPUSH
20922: CALL_OW 235
// end ;
20926: GO 20849
20928: POP
20929: POP
// end ;
20930: LD_VAR 0 1
20934: RET
// export function hHackFog ; begin
20935: LD_INT 0
20937: PPUSH
// FogOff ( true ) ;
20938: LD_INT 1
20940: PPUSH
20941: CALL_OW 344
// end ;
20945: LD_VAR 0 1
20949: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20950: LD_INT 0
20952: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20953: LD_VAR 0 1
20957: PPUSH
20958: LD_VAR 0 2
20962: PPUSH
20963: LD_VAR 0 3
20967: PPUSH
20968: LD_INT 1
20970: PPUSH
20971: LD_INT 1
20973: PPUSH
20974: CALL_OW 483
// CenterOnXY ( x , y ) ;
20978: LD_VAR 0 2
20982: PPUSH
20983: LD_VAR 0 3
20987: PPUSH
20988: CALL_OW 84
// end ; end_of_file
20992: LD_VAR 0 4
20996: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20997: LD_INT 0
20999: PPUSH
21000: PPUSH
21001: PPUSH
21002: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21003: LD_VAR 0 1
21007: PPUSH
21008: CALL_OW 264
21012: PUSH
21013: LD_EXP 22
21017: EQUAL
21018: IFFALSE 21090
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21020: LD_INT 68
21022: PPUSH
21023: LD_VAR 0 1
21027: PPUSH
21028: CALL_OW 255
21032: PPUSH
21033: CALL_OW 321
21037: PUSH
21038: LD_INT 2
21040: EQUAL
21041: IFFALSE 21053
// eff := 70 else
21043: LD_ADDR_VAR 0 4
21047: PUSH
21048: LD_INT 70
21050: ST_TO_ADDR
21051: GO 21061
// eff := 30 ;
21053: LD_ADDR_VAR 0 4
21057: PUSH
21058: LD_INT 30
21060: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21061: LD_VAR 0 1
21065: PPUSH
21066: CALL_OW 250
21070: PPUSH
21071: LD_VAR 0 1
21075: PPUSH
21076: CALL_OW 251
21080: PPUSH
21081: LD_VAR 0 4
21085: PPUSH
21086: CALL_OW 495
// end ; end ;
21090: LD_VAR 0 2
21094: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21095: LD_INT 0
21097: PPUSH
// end ;
21098: LD_VAR 0 4
21102: RET
// export function SOS_Command ( cmd ) ; begin
21103: LD_INT 0
21105: PPUSH
// end ;
21106: LD_VAR 0 2
21110: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21111: LD_INT 0
21113: PPUSH
// end ;
21114: LD_VAR 0 6
21118: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21119: LD_INT 0
21121: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21122: LD_VAR 0 1
21126: PUSH
21127: LD_INT 250
21129: EQUAL
21130: PUSH
21131: LD_VAR 0 2
21135: PPUSH
21136: CALL_OW 264
21140: PUSH
21141: LD_EXP 25
21145: EQUAL
21146: AND
21147: IFFALSE 21168
// MinerPlaceMine ( unit , x , y ) ;
21149: LD_VAR 0 2
21153: PPUSH
21154: LD_VAR 0 4
21158: PPUSH
21159: LD_VAR 0 5
21163: PPUSH
21164: CALL 23517 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21168: LD_VAR 0 1
21172: PUSH
21173: LD_INT 251
21175: EQUAL
21176: PUSH
21177: LD_VAR 0 2
21181: PPUSH
21182: CALL_OW 264
21186: PUSH
21187: LD_EXP 25
21191: EQUAL
21192: AND
21193: IFFALSE 21214
// MinerDetonateMine ( unit , x , y ) ;
21195: LD_VAR 0 2
21199: PPUSH
21200: LD_VAR 0 4
21204: PPUSH
21205: LD_VAR 0 5
21209: PPUSH
21210: CALL 23794 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21214: LD_VAR 0 1
21218: PUSH
21219: LD_INT 252
21221: EQUAL
21222: PUSH
21223: LD_VAR 0 2
21227: PPUSH
21228: CALL_OW 264
21232: PUSH
21233: LD_EXP 25
21237: EQUAL
21238: AND
21239: IFFALSE 21260
// MinerCreateMinefield ( unit , x , y ) ;
21241: LD_VAR 0 2
21245: PPUSH
21246: LD_VAR 0 4
21250: PPUSH
21251: LD_VAR 0 5
21255: PPUSH
21256: CALL 24211 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21260: LD_VAR 0 1
21264: PUSH
21265: LD_INT 253
21267: EQUAL
21268: PUSH
21269: LD_VAR 0 2
21273: PPUSH
21274: CALL_OW 257
21278: PUSH
21279: LD_INT 5
21281: EQUAL
21282: AND
21283: IFFALSE 21304
// ComBinocular ( unit , x , y ) ;
21285: LD_VAR 0 2
21289: PPUSH
21290: LD_VAR 0 4
21294: PPUSH
21295: LD_VAR 0 5
21299: PPUSH
21300: CALL 24582 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21304: LD_VAR 0 1
21308: PUSH
21309: LD_INT 254
21311: EQUAL
21312: PUSH
21313: LD_VAR 0 2
21317: PPUSH
21318: CALL_OW 264
21322: PUSH
21323: LD_EXP 20
21327: EQUAL
21328: AND
21329: PUSH
21330: LD_VAR 0 3
21334: PPUSH
21335: CALL_OW 263
21339: PUSH
21340: LD_INT 3
21342: EQUAL
21343: AND
21344: IFFALSE 21360
// HackDestroyVehicle ( unit , selectedUnit ) ;
21346: LD_VAR 0 2
21350: PPUSH
21351: LD_VAR 0 3
21355: PPUSH
21356: CALL 22877 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21360: LD_VAR 0 1
21364: PUSH
21365: LD_INT 255
21367: EQUAL
21368: PUSH
21369: LD_VAR 0 2
21373: PPUSH
21374: CALL_OW 264
21378: PUSH
21379: LD_INT 14
21381: PUSH
21382: LD_INT 53
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: IN
21389: AND
21390: PUSH
21391: LD_VAR 0 4
21395: PPUSH
21396: LD_VAR 0 5
21400: PPUSH
21401: CALL_OW 488
21405: AND
21406: IFFALSE 21430
// CutTreeXYR ( unit , x , y , 12 ) ;
21408: LD_VAR 0 2
21412: PPUSH
21413: LD_VAR 0 4
21417: PPUSH
21418: LD_VAR 0 5
21422: PPUSH
21423: LD_INT 12
21425: PPUSH
21426: CALL 21443 0 4
// end ;
21430: LD_VAR 0 6
21434: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
21435: LD_INT 0
21437: PPUSH
// end ;
21438: LD_VAR 0 4
21442: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21443: LD_INT 0
21445: PPUSH
21446: PPUSH
21447: PPUSH
21448: PPUSH
21449: PPUSH
21450: PPUSH
21451: PPUSH
21452: PPUSH
21453: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21454: LD_VAR 0 1
21458: NOT
21459: PUSH
21460: LD_VAR 0 2
21464: PPUSH
21465: LD_VAR 0 3
21469: PPUSH
21470: CALL_OW 488
21474: NOT
21475: OR
21476: PUSH
21477: LD_VAR 0 4
21481: NOT
21482: OR
21483: IFFALSE 21487
// exit ;
21485: GO 21827
// list := [ ] ;
21487: LD_ADDR_VAR 0 13
21491: PUSH
21492: EMPTY
21493: ST_TO_ADDR
// if x - r < 0 then
21494: LD_VAR 0 2
21498: PUSH
21499: LD_VAR 0 4
21503: MINUS
21504: PUSH
21505: LD_INT 0
21507: LESS
21508: IFFALSE 21520
// min_x := 0 else
21510: LD_ADDR_VAR 0 7
21514: PUSH
21515: LD_INT 0
21517: ST_TO_ADDR
21518: GO 21536
// min_x := x - r ;
21520: LD_ADDR_VAR 0 7
21524: PUSH
21525: LD_VAR 0 2
21529: PUSH
21530: LD_VAR 0 4
21534: MINUS
21535: ST_TO_ADDR
// if y - r < 0 then
21536: LD_VAR 0 3
21540: PUSH
21541: LD_VAR 0 4
21545: MINUS
21546: PUSH
21547: LD_INT 0
21549: LESS
21550: IFFALSE 21562
// min_y := 0 else
21552: LD_ADDR_VAR 0 8
21556: PUSH
21557: LD_INT 0
21559: ST_TO_ADDR
21560: GO 21578
// min_y := y - r ;
21562: LD_ADDR_VAR 0 8
21566: PUSH
21567: LD_VAR 0 3
21571: PUSH
21572: LD_VAR 0 4
21576: MINUS
21577: ST_TO_ADDR
// max_x := x + r ;
21578: LD_ADDR_VAR 0 9
21582: PUSH
21583: LD_VAR 0 2
21587: PUSH
21588: LD_VAR 0 4
21592: PLUS
21593: ST_TO_ADDR
// max_y := y + r ;
21594: LD_ADDR_VAR 0 10
21598: PUSH
21599: LD_VAR 0 3
21603: PUSH
21604: LD_VAR 0 4
21608: PLUS
21609: ST_TO_ADDR
// for _x = min_x to max_x do
21610: LD_ADDR_VAR 0 11
21614: PUSH
21615: DOUBLE
21616: LD_VAR 0 7
21620: DEC
21621: ST_TO_ADDR
21622: LD_VAR 0 9
21626: PUSH
21627: FOR_TO
21628: IFFALSE 21745
// for _y = min_y to max_y do
21630: LD_ADDR_VAR 0 12
21634: PUSH
21635: DOUBLE
21636: LD_VAR 0 8
21640: DEC
21641: ST_TO_ADDR
21642: LD_VAR 0 10
21646: PUSH
21647: FOR_TO
21648: IFFALSE 21741
// begin if not ValidHex ( _x , _y ) then
21650: LD_VAR 0 11
21654: PPUSH
21655: LD_VAR 0 12
21659: PPUSH
21660: CALL_OW 488
21664: NOT
21665: IFFALSE 21669
// continue ;
21667: GO 21647
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21669: LD_VAR 0 11
21673: PPUSH
21674: LD_VAR 0 12
21678: PPUSH
21679: CALL_OW 351
21683: PUSH
21684: LD_VAR 0 11
21688: PPUSH
21689: LD_VAR 0 12
21693: PPUSH
21694: CALL_OW 554
21698: AND
21699: IFFALSE 21739
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21701: LD_ADDR_VAR 0 13
21705: PUSH
21706: LD_VAR 0 13
21710: PPUSH
21711: LD_VAR 0 13
21715: PUSH
21716: LD_INT 1
21718: PLUS
21719: PPUSH
21720: LD_VAR 0 11
21724: PUSH
21725: LD_VAR 0 12
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PPUSH
21734: CALL_OW 2
21738: ST_TO_ADDR
// end ;
21739: GO 21647
21741: POP
21742: POP
21743: GO 21627
21745: POP
21746: POP
// if not list then
21747: LD_VAR 0 13
21751: NOT
21752: IFFALSE 21756
// exit ;
21754: GO 21827
// for i in list do
21756: LD_ADDR_VAR 0 6
21760: PUSH
21761: LD_VAR 0 13
21765: PUSH
21766: FOR_IN
21767: IFFALSE 21825
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21769: LD_VAR 0 1
21773: PPUSH
21774: LD_STRING M
21776: PUSH
21777: LD_VAR 0 6
21781: PUSH
21782: LD_INT 1
21784: ARRAY
21785: PUSH
21786: LD_VAR 0 6
21790: PUSH
21791: LD_INT 2
21793: ARRAY
21794: PUSH
21795: LD_INT 0
21797: PUSH
21798: LD_INT 0
21800: PUSH
21801: LD_INT 0
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: PUSH
21816: EMPTY
21817: LIST
21818: PPUSH
21819: CALL_OW 447
21823: GO 21766
21825: POP
21826: POP
// end ;
21827: LD_VAR 0 5
21831: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21832: LD_EXP 97
21836: NOT
21837: IFFALSE 21887
21839: GO 21841
21841: DISABLE
// begin initHack := true ;
21842: LD_ADDR_EXP 97
21846: PUSH
21847: LD_INT 1
21849: ST_TO_ADDR
// hackTanks := [ ] ;
21850: LD_ADDR_EXP 98
21854: PUSH
21855: EMPTY
21856: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21857: LD_ADDR_EXP 99
21861: PUSH
21862: EMPTY
21863: ST_TO_ADDR
// hackLimit := 3 ;
21864: LD_ADDR_EXP 100
21868: PUSH
21869: LD_INT 3
21871: ST_TO_ADDR
// hackDist := 12 ;
21872: LD_ADDR_EXP 101
21876: PUSH
21877: LD_INT 12
21879: ST_TO_ADDR
// hackCounter := [ ] ;
21880: LD_ADDR_EXP 102
21884: PUSH
21885: EMPTY
21886: ST_TO_ADDR
// end ;
21887: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21888: LD_EXP 97
21892: PUSH
21893: LD_INT 34
21895: PUSH
21896: LD_EXP 20
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PPUSH
21905: CALL_OW 69
21909: AND
21910: IFFALSE 22165
21912: GO 21914
21914: DISABLE
21915: LD_INT 0
21917: PPUSH
21918: PPUSH
// begin enable ;
21919: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21920: LD_ADDR_VAR 0 1
21924: PUSH
21925: LD_INT 34
21927: PUSH
21928: LD_EXP 20
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PPUSH
21937: CALL_OW 69
21941: PUSH
21942: FOR_IN
21943: IFFALSE 22163
// begin if not i in hackTanks then
21945: LD_VAR 0 1
21949: PUSH
21950: LD_EXP 98
21954: IN
21955: NOT
21956: IFFALSE 22039
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21958: LD_ADDR_EXP 98
21962: PUSH
21963: LD_EXP 98
21967: PPUSH
21968: LD_EXP 98
21972: PUSH
21973: LD_INT 1
21975: PLUS
21976: PPUSH
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 1
21986: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21987: LD_ADDR_EXP 99
21991: PUSH
21992: LD_EXP 99
21996: PPUSH
21997: LD_EXP 99
22001: PUSH
22002: LD_INT 1
22004: PLUS
22005: PPUSH
22006: EMPTY
22007: PPUSH
22008: CALL_OW 1
22012: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22013: LD_ADDR_EXP 102
22017: PUSH
22018: LD_EXP 102
22022: PPUSH
22023: LD_EXP 102
22027: PUSH
22028: LD_INT 1
22030: PLUS
22031: PPUSH
22032: EMPTY
22033: PPUSH
22034: CALL_OW 1
22038: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22039: LD_VAR 0 1
22043: PPUSH
22044: CALL_OW 302
22048: NOT
22049: IFFALSE 22062
// begin HackUnlinkAll ( i ) ;
22051: LD_VAR 0 1
22055: PPUSH
22056: CALL 22168 0 1
// continue ;
22060: GO 21942
// end ; HackCheckCapturedStatus ( i ) ;
22062: LD_VAR 0 1
22066: PPUSH
22067: CALL 22611 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22071: LD_ADDR_VAR 0 2
22075: PUSH
22076: LD_INT 81
22078: PUSH
22079: LD_VAR 0 1
22083: PPUSH
22084: CALL_OW 255
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 33
22095: PUSH
22096: LD_INT 3
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 91
22105: PUSH
22106: LD_VAR 0 1
22110: PUSH
22111: LD_EXP 101
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 50
22123: PUSH
22124: EMPTY
22125: LIST
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: PPUSH
22133: CALL_OW 69
22137: ST_TO_ADDR
// if not tmp then
22138: LD_VAR 0 2
22142: NOT
22143: IFFALSE 22147
// continue ;
22145: GO 21942
// HackLink ( i , tmp ) ;
22147: LD_VAR 0 1
22151: PPUSH
22152: LD_VAR 0 2
22156: PPUSH
22157: CALL 22304 0 2
// end ;
22161: GO 21942
22163: POP
22164: POP
// end ;
22165: PPOPN 2
22167: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22168: LD_INT 0
22170: PPUSH
22171: PPUSH
22172: PPUSH
// if not hack in hackTanks then
22173: LD_VAR 0 1
22177: PUSH
22178: LD_EXP 98
22182: IN
22183: NOT
22184: IFFALSE 22188
// exit ;
22186: GO 22299
// index := GetElementIndex ( hackTanks , hack ) ;
22188: LD_ADDR_VAR 0 4
22192: PUSH
22193: LD_EXP 98
22197: PPUSH
22198: LD_VAR 0 1
22202: PPUSH
22203: CALL 29773 0 2
22207: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22208: LD_EXP 99
22212: PUSH
22213: LD_VAR 0 4
22217: ARRAY
22218: IFFALSE 22299
// begin for i in hackTanksCaptured [ index ] do
22220: LD_ADDR_VAR 0 3
22224: PUSH
22225: LD_EXP 99
22229: PUSH
22230: LD_VAR 0 4
22234: ARRAY
22235: PUSH
22236: FOR_IN
22237: IFFALSE 22263
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22239: LD_VAR 0 3
22243: PUSH
22244: LD_INT 1
22246: ARRAY
22247: PPUSH
22248: LD_VAR 0 3
22252: PUSH
22253: LD_INT 2
22255: ARRAY
22256: PPUSH
22257: CALL_OW 235
22261: GO 22236
22263: POP
22264: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22265: LD_ADDR_EXP 99
22269: PUSH
22270: LD_EXP 99
22274: PPUSH
22275: LD_VAR 0 4
22279: PPUSH
22280: EMPTY
22281: PPUSH
22282: CALL_OW 1
22286: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22287: LD_VAR 0 1
22291: PPUSH
22292: LD_INT 0
22294: PPUSH
22295: CALL_OW 505
// end ; end ;
22299: LD_VAR 0 2
22303: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22304: LD_INT 0
22306: PPUSH
22307: PPUSH
22308: PPUSH
// if not hack in hackTanks or not vehicles then
22309: LD_VAR 0 1
22313: PUSH
22314: LD_EXP 98
22318: IN
22319: NOT
22320: PUSH
22321: LD_VAR 0 2
22325: NOT
22326: OR
22327: IFFALSE 22331
// exit ;
22329: GO 22606
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22331: LD_ADDR_VAR 0 2
22335: PUSH
22336: LD_VAR 0 1
22340: PPUSH
22341: LD_VAR 0 2
22345: PPUSH
22346: LD_INT 1
22348: PPUSH
22349: LD_INT 1
22351: PPUSH
22352: CALL 30423 0 4
22356: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22357: LD_ADDR_VAR 0 5
22361: PUSH
22362: LD_EXP 98
22366: PPUSH
22367: LD_VAR 0 1
22371: PPUSH
22372: CALL 29773 0 2
22376: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22377: LD_EXP 99
22381: PUSH
22382: LD_VAR 0 5
22386: ARRAY
22387: PUSH
22388: LD_EXP 100
22392: LESS
22393: IFFALSE 22582
// begin for i := 1 to vehicles do
22395: LD_ADDR_VAR 0 4
22399: PUSH
22400: DOUBLE
22401: LD_INT 1
22403: DEC
22404: ST_TO_ADDR
22405: LD_VAR 0 2
22409: PUSH
22410: FOR_TO
22411: IFFALSE 22580
// begin if hackTanksCaptured [ index ] = hackLimit then
22413: LD_EXP 99
22417: PUSH
22418: LD_VAR 0 5
22422: ARRAY
22423: PUSH
22424: LD_EXP 100
22428: EQUAL
22429: IFFALSE 22433
// break ;
22431: GO 22580
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22433: LD_ADDR_EXP 102
22437: PUSH
22438: LD_EXP 102
22442: PPUSH
22443: LD_VAR 0 5
22447: PPUSH
22448: LD_EXP 102
22452: PUSH
22453: LD_VAR 0 5
22457: ARRAY
22458: PUSH
22459: LD_INT 1
22461: PLUS
22462: PPUSH
22463: CALL_OW 1
22467: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22468: LD_ADDR_EXP 99
22472: PUSH
22473: LD_EXP 99
22477: PPUSH
22478: LD_VAR 0 5
22482: PUSH
22483: LD_EXP 99
22487: PUSH
22488: LD_VAR 0 5
22492: ARRAY
22493: PUSH
22494: LD_INT 1
22496: PLUS
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PPUSH
22502: LD_VAR 0 2
22506: PUSH
22507: LD_VAR 0 4
22511: ARRAY
22512: PUSH
22513: LD_VAR 0 2
22517: PUSH
22518: LD_VAR 0 4
22522: ARRAY
22523: PPUSH
22524: CALL_OW 255
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PPUSH
22533: CALL 29988 0 3
22537: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22538: LD_VAR 0 2
22542: PUSH
22543: LD_VAR 0 4
22547: ARRAY
22548: PPUSH
22549: LD_VAR 0 1
22553: PPUSH
22554: CALL_OW 255
22558: PPUSH
22559: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22563: LD_VAR 0 2
22567: PUSH
22568: LD_VAR 0 4
22572: ARRAY
22573: PPUSH
22574: CALL_OW 141
// end ;
22578: GO 22410
22580: POP
22581: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22582: LD_VAR 0 1
22586: PPUSH
22587: LD_EXP 99
22591: PUSH
22592: LD_VAR 0 5
22596: ARRAY
22597: PUSH
22598: LD_INT 0
22600: PLUS
22601: PPUSH
22602: CALL_OW 505
// end ;
22606: LD_VAR 0 3
22610: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22611: LD_INT 0
22613: PPUSH
22614: PPUSH
22615: PPUSH
22616: PPUSH
// if not hack in hackTanks then
22617: LD_VAR 0 1
22621: PUSH
22622: LD_EXP 98
22626: IN
22627: NOT
22628: IFFALSE 22632
// exit ;
22630: GO 22872
// index := GetElementIndex ( hackTanks , hack ) ;
22632: LD_ADDR_VAR 0 4
22636: PUSH
22637: LD_EXP 98
22641: PPUSH
22642: LD_VAR 0 1
22646: PPUSH
22647: CALL 29773 0 2
22651: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22652: LD_ADDR_VAR 0 3
22656: PUSH
22657: DOUBLE
22658: LD_EXP 99
22662: PUSH
22663: LD_VAR 0 4
22667: ARRAY
22668: INC
22669: ST_TO_ADDR
22670: LD_INT 1
22672: PUSH
22673: FOR_DOWNTO
22674: IFFALSE 22846
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22676: LD_ADDR_VAR 0 5
22680: PUSH
22681: LD_EXP 99
22685: PUSH
22686: LD_VAR 0 4
22690: ARRAY
22691: PUSH
22692: LD_VAR 0 3
22696: ARRAY
22697: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22698: LD_VAR 0 5
22702: PUSH
22703: LD_INT 1
22705: ARRAY
22706: PPUSH
22707: CALL_OW 302
22711: NOT
22712: PUSH
22713: LD_VAR 0 5
22717: PUSH
22718: LD_INT 1
22720: ARRAY
22721: PPUSH
22722: CALL_OW 255
22726: PUSH
22727: LD_VAR 0 1
22731: PPUSH
22732: CALL_OW 255
22736: NONEQUAL
22737: OR
22738: IFFALSE 22844
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22740: LD_VAR 0 5
22744: PUSH
22745: LD_INT 1
22747: ARRAY
22748: PPUSH
22749: CALL_OW 305
22753: PUSH
22754: LD_VAR 0 5
22758: PUSH
22759: LD_INT 1
22761: ARRAY
22762: PPUSH
22763: CALL_OW 255
22767: PUSH
22768: LD_VAR 0 1
22772: PPUSH
22773: CALL_OW 255
22777: EQUAL
22778: AND
22779: IFFALSE 22803
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22781: LD_VAR 0 5
22785: PUSH
22786: LD_INT 1
22788: ARRAY
22789: PPUSH
22790: LD_VAR 0 5
22794: PUSH
22795: LD_INT 2
22797: ARRAY
22798: PPUSH
22799: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22803: LD_ADDR_EXP 99
22807: PUSH
22808: LD_EXP 99
22812: PPUSH
22813: LD_VAR 0 4
22817: PPUSH
22818: LD_EXP 99
22822: PUSH
22823: LD_VAR 0 4
22827: ARRAY
22828: PPUSH
22829: LD_VAR 0 3
22833: PPUSH
22834: CALL_OW 3
22838: PPUSH
22839: CALL_OW 1
22843: ST_TO_ADDR
// end ; end ;
22844: GO 22673
22846: POP
22847: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22848: LD_VAR 0 1
22852: PPUSH
22853: LD_EXP 99
22857: PUSH
22858: LD_VAR 0 4
22862: ARRAY
22863: PUSH
22864: LD_INT 0
22866: PLUS
22867: PPUSH
22868: CALL_OW 505
// end ;
22872: LD_VAR 0 2
22876: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22877: LD_INT 0
22879: PPUSH
22880: PPUSH
22881: PPUSH
22882: PPUSH
// if not hack in hackTanks then
22883: LD_VAR 0 1
22887: PUSH
22888: LD_EXP 98
22892: IN
22893: NOT
22894: IFFALSE 22898
// exit ;
22896: GO 22983
// index := GetElementIndex ( hackTanks , hack ) ;
22898: LD_ADDR_VAR 0 5
22902: PUSH
22903: LD_EXP 98
22907: PPUSH
22908: LD_VAR 0 1
22912: PPUSH
22913: CALL 29773 0 2
22917: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22918: LD_ADDR_VAR 0 4
22922: PUSH
22923: DOUBLE
22924: LD_INT 1
22926: DEC
22927: ST_TO_ADDR
22928: LD_EXP 99
22932: PUSH
22933: LD_VAR 0 5
22937: ARRAY
22938: PUSH
22939: FOR_TO
22940: IFFALSE 22981
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22942: LD_EXP 99
22946: PUSH
22947: LD_VAR 0 5
22951: ARRAY
22952: PUSH
22953: LD_VAR 0 4
22957: ARRAY
22958: PUSH
22959: LD_INT 1
22961: ARRAY
22962: PUSH
22963: LD_VAR 0 2
22967: EQUAL
22968: IFFALSE 22979
// KillUnit ( vehicle ) ;
22970: LD_VAR 0 2
22974: PPUSH
22975: CALL_OW 66
22979: GO 22939
22981: POP
22982: POP
// end ;
22983: LD_VAR 0 3
22987: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22988: LD_EXP 103
22992: NOT
22993: IFFALSE 23028
22995: GO 22997
22997: DISABLE
// begin initMiner := true ;
22998: LD_ADDR_EXP 103
23002: PUSH
23003: LD_INT 1
23005: ST_TO_ADDR
// minersList := [ ] ;
23006: LD_ADDR_EXP 104
23010: PUSH
23011: EMPTY
23012: ST_TO_ADDR
// minerMinesList := [ ] ;
23013: LD_ADDR_EXP 105
23017: PUSH
23018: EMPTY
23019: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23020: LD_ADDR_EXP 106
23024: PUSH
23025: LD_INT 5
23027: ST_TO_ADDR
// end ;
23028: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23029: LD_EXP 103
23033: PUSH
23034: LD_INT 34
23036: PUSH
23037: LD_EXP 25
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PPUSH
23046: CALL_OW 69
23050: AND
23051: IFFALSE 23514
23053: GO 23055
23055: DISABLE
23056: LD_INT 0
23058: PPUSH
23059: PPUSH
23060: PPUSH
23061: PPUSH
// begin enable ;
23062: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23063: LD_ADDR_VAR 0 1
23067: PUSH
23068: LD_INT 34
23070: PUSH
23071: LD_EXP 25
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PPUSH
23080: CALL_OW 69
23084: PUSH
23085: FOR_IN
23086: IFFALSE 23158
// begin if not i in minersList then
23088: LD_VAR 0 1
23092: PUSH
23093: LD_EXP 104
23097: IN
23098: NOT
23099: IFFALSE 23156
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23101: LD_ADDR_EXP 104
23105: PUSH
23106: LD_EXP 104
23110: PPUSH
23111: LD_EXP 104
23115: PUSH
23116: LD_INT 1
23118: PLUS
23119: PPUSH
23120: LD_VAR 0 1
23124: PPUSH
23125: CALL_OW 1
23129: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23130: LD_ADDR_EXP 105
23134: PUSH
23135: LD_EXP 105
23139: PPUSH
23140: LD_EXP 105
23144: PUSH
23145: LD_INT 1
23147: PLUS
23148: PPUSH
23149: EMPTY
23150: PPUSH
23151: CALL_OW 1
23155: ST_TO_ADDR
// end end ;
23156: GO 23085
23158: POP
23159: POP
// for i := minerMinesList downto 1 do
23160: LD_ADDR_VAR 0 1
23164: PUSH
23165: DOUBLE
23166: LD_EXP 105
23170: INC
23171: ST_TO_ADDR
23172: LD_INT 1
23174: PUSH
23175: FOR_DOWNTO
23176: IFFALSE 23512
// begin if IsLive ( minersList [ i ] ) then
23178: LD_EXP 104
23182: PUSH
23183: LD_VAR 0 1
23187: ARRAY
23188: PPUSH
23189: CALL_OW 300
23193: IFFALSE 23221
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23195: LD_EXP 104
23199: PUSH
23200: LD_VAR 0 1
23204: ARRAY
23205: PPUSH
23206: LD_EXP 105
23210: PUSH
23211: LD_VAR 0 1
23215: ARRAY
23216: PPUSH
23217: CALL_OW 505
// if not minerMinesList [ i ] then
23221: LD_EXP 105
23225: PUSH
23226: LD_VAR 0 1
23230: ARRAY
23231: NOT
23232: IFFALSE 23236
// continue ;
23234: GO 23175
// for j := minerMinesList [ i ] downto 1 do
23236: LD_ADDR_VAR 0 2
23240: PUSH
23241: DOUBLE
23242: LD_EXP 105
23246: PUSH
23247: LD_VAR 0 1
23251: ARRAY
23252: INC
23253: ST_TO_ADDR
23254: LD_INT 1
23256: PUSH
23257: FOR_DOWNTO
23258: IFFALSE 23508
// begin side := GetSide ( minersList [ i ] ) ;
23260: LD_ADDR_VAR 0 3
23264: PUSH
23265: LD_EXP 104
23269: PUSH
23270: LD_VAR 0 1
23274: ARRAY
23275: PPUSH
23276: CALL_OW 255
23280: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23281: LD_ADDR_VAR 0 4
23285: PUSH
23286: LD_EXP 105
23290: PUSH
23291: LD_VAR 0 1
23295: ARRAY
23296: PUSH
23297: LD_VAR 0 2
23301: ARRAY
23302: PUSH
23303: LD_INT 1
23305: ARRAY
23306: PPUSH
23307: LD_EXP 105
23311: PUSH
23312: LD_VAR 0 1
23316: ARRAY
23317: PUSH
23318: LD_VAR 0 2
23322: ARRAY
23323: PUSH
23324: LD_INT 2
23326: ARRAY
23327: PPUSH
23328: CALL_OW 428
23332: ST_TO_ADDR
// if not tmp then
23333: LD_VAR 0 4
23337: NOT
23338: IFFALSE 23342
// continue ;
23340: GO 23257
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23342: LD_VAR 0 4
23346: PUSH
23347: LD_INT 81
23349: PUSH
23350: LD_VAR 0 3
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PPUSH
23359: CALL_OW 69
23363: IN
23364: PUSH
23365: LD_EXP 105
23369: PUSH
23370: LD_VAR 0 1
23374: ARRAY
23375: PUSH
23376: LD_VAR 0 2
23380: ARRAY
23381: PUSH
23382: LD_INT 1
23384: ARRAY
23385: PPUSH
23386: LD_EXP 105
23390: PUSH
23391: LD_VAR 0 1
23395: ARRAY
23396: PUSH
23397: LD_VAR 0 2
23401: ARRAY
23402: PUSH
23403: LD_INT 2
23405: ARRAY
23406: PPUSH
23407: CALL_OW 458
23411: AND
23412: IFFALSE 23506
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23414: LD_EXP 105
23418: PUSH
23419: LD_VAR 0 1
23423: ARRAY
23424: PUSH
23425: LD_VAR 0 2
23429: ARRAY
23430: PUSH
23431: LD_INT 1
23433: ARRAY
23434: PPUSH
23435: LD_EXP 105
23439: PUSH
23440: LD_VAR 0 1
23444: ARRAY
23445: PUSH
23446: LD_VAR 0 2
23450: ARRAY
23451: PUSH
23452: LD_INT 2
23454: ARRAY
23455: PPUSH
23456: LD_VAR 0 3
23460: PPUSH
23461: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23465: LD_ADDR_EXP 105
23469: PUSH
23470: LD_EXP 105
23474: PPUSH
23475: LD_VAR 0 1
23479: PPUSH
23480: LD_EXP 105
23484: PUSH
23485: LD_VAR 0 1
23489: ARRAY
23490: PPUSH
23491: LD_VAR 0 2
23495: PPUSH
23496: CALL_OW 3
23500: PPUSH
23501: CALL_OW 1
23505: ST_TO_ADDR
// end ; end ;
23506: GO 23257
23508: POP
23509: POP
// end ;
23510: GO 23175
23512: POP
23513: POP
// end ;
23514: PPOPN 4
23516: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23517: LD_INT 0
23519: PPUSH
23520: PPUSH
// result := false ;
23521: LD_ADDR_VAR 0 4
23525: PUSH
23526: LD_INT 0
23528: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23529: LD_VAR 0 1
23533: PPUSH
23534: CALL_OW 264
23538: PUSH
23539: LD_EXP 25
23543: EQUAL
23544: NOT
23545: IFFALSE 23549
// exit ;
23547: GO 23789
// index := GetElementIndex ( minersList , unit ) ;
23549: LD_ADDR_VAR 0 5
23553: PUSH
23554: LD_EXP 104
23558: PPUSH
23559: LD_VAR 0 1
23563: PPUSH
23564: CALL 29773 0 2
23568: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23569: LD_EXP 105
23573: PUSH
23574: LD_VAR 0 5
23578: ARRAY
23579: PUSH
23580: LD_EXP 106
23584: GREATEREQUAL
23585: IFFALSE 23589
// exit ;
23587: GO 23789
// ComMoveXY ( unit , x , y ) ;
23589: LD_VAR 0 1
23593: PPUSH
23594: LD_VAR 0 2
23598: PPUSH
23599: LD_VAR 0 3
23603: PPUSH
23604: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23608: LD_INT 35
23610: PPUSH
23611: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23615: LD_VAR 0 1
23619: PPUSH
23620: LD_VAR 0 2
23624: PPUSH
23625: LD_VAR 0 3
23629: PPUSH
23630: CALL 60545 0 3
23634: NOT
23635: PUSH
23636: LD_VAR 0 1
23640: PPUSH
23641: CALL_OW 314
23645: AND
23646: IFFALSE 23650
// exit ;
23648: GO 23789
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23650: LD_VAR 0 2
23654: PPUSH
23655: LD_VAR 0 3
23659: PPUSH
23660: CALL_OW 428
23664: PUSH
23665: LD_VAR 0 1
23669: EQUAL
23670: PUSH
23671: LD_VAR 0 1
23675: PPUSH
23676: CALL_OW 314
23680: NOT
23681: AND
23682: IFFALSE 23608
// PlaySoundXY ( x , y , PlantMine ) ;
23684: LD_VAR 0 2
23688: PPUSH
23689: LD_VAR 0 3
23693: PPUSH
23694: LD_STRING PlantMine
23696: PPUSH
23697: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23701: LD_VAR 0 2
23705: PPUSH
23706: LD_VAR 0 3
23710: PPUSH
23711: LD_VAR 0 1
23715: PPUSH
23716: CALL_OW 255
23720: PPUSH
23721: LD_INT 0
23723: PPUSH
23724: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23728: LD_ADDR_EXP 105
23732: PUSH
23733: LD_EXP 105
23737: PPUSH
23738: LD_VAR 0 5
23742: PUSH
23743: LD_EXP 105
23747: PUSH
23748: LD_VAR 0 5
23752: ARRAY
23753: PUSH
23754: LD_INT 1
23756: PLUS
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PPUSH
23762: LD_VAR 0 2
23766: PUSH
23767: LD_VAR 0 3
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PPUSH
23776: CALL 29988 0 3
23780: ST_TO_ADDR
// result := true ;
23781: LD_ADDR_VAR 0 4
23785: PUSH
23786: LD_INT 1
23788: ST_TO_ADDR
// end ;
23789: LD_VAR 0 4
23793: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23794: LD_INT 0
23796: PPUSH
23797: PPUSH
23798: PPUSH
// if not unit in minersList then
23799: LD_VAR 0 1
23803: PUSH
23804: LD_EXP 104
23808: IN
23809: NOT
23810: IFFALSE 23814
// exit ;
23812: GO 24206
// index := GetElementIndex ( minersList , unit ) ;
23814: LD_ADDR_VAR 0 6
23818: PUSH
23819: LD_EXP 104
23823: PPUSH
23824: LD_VAR 0 1
23828: PPUSH
23829: CALL 29773 0 2
23833: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23834: LD_ADDR_VAR 0 5
23838: PUSH
23839: DOUBLE
23840: LD_EXP 105
23844: PUSH
23845: LD_VAR 0 6
23849: ARRAY
23850: INC
23851: ST_TO_ADDR
23852: LD_INT 1
23854: PUSH
23855: FOR_DOWNTO
23856: IFFALSE 24017
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23858: LD_EXP 105
23862: PUSH
23863: LD_VAR 0 6
23867: ARRAY
23868: PUSH
23869: LD_VAR 0 5
23873: ARRAY
23874: PUSH
23875: LD_INT 1
23877: ARRAY
23878: PUSH
23879: LD_VAR 0 2
23883: EQUAL
23884: PUSH
23885: LD_EXP 105
23889: PUSH
23890: LD_VAR 0 6
23894: ARRAY
23895: PUSH
23896: LD_VAR 0 5
23900: ARRAY
23901: PUSH
23902: LD_INT 2
23904: ARRAY
23905: PUSH
23906: LD_VAR 0 3
23910: EQUAL
23911: AND
23912: IFFALSE 24015
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23914: LD_EXP 105
23918: PUSH
23919: LD_VAR 0 6
23923: ARRAY
23924: PUSH
23925: LD_VAR 0 5
23929: ARRAY
23930: PUSH
23931: LD_INT 1
23933: ARRAY
23934: PPUSH
23935: LD_EXP 105
23939: PUSH
23940: LD_VAR 0 6
23944: ARRAY
23945: PUSH
23946: LD_VAR 0 5
23950: ARRAY
23951: PUSH
23952: LD_INT 2
23954: ARRAY
23955: PPUSH
23956: LD_VAR 0 1
23960: PPUSH
23961: CALL_OW 255
23965: PPUSH
23966: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23970: LD_ADDR_EXP 105
23974: PUSH
23975: LD_EXP 105
23979: PPUSH
23980: LD_VAR 0 6
23984: PPUSH
23985: LD_EXP 105
23989: PUSH
23990: LD_VAR 0 6
23994: ARRAY
23995: PPUSH
23996: LD_VAR 0 5
24000: PPUSH
24001: CALL_OW 3
24005: PPUSH
24006: CALL_OW 1
24010: ST_TO_ADDR
// exit ;
24011: POP
24012: POP
24013: GO 24206
// end ; end ;
24015: GO 23855
24017: POP
24018: POP
// for i := minerMinesList [ index ] downto 1 do
24019: LD_ADDR_VAR 0 5
24023: PUSH
24024: DOUBLE
24025: LD_EXP 105
24029: PUSH
24030: LD_VAR 0 6
24034: ARRAY
24035: INC
24036: ST_TO_ADDR
24037: LD_INT 1
24039: PUSH
24040: FOR_DOWNTO
24041: IFFALSE 24204
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24043: LD_EXP 105
24047: PUSH
24048: LD_VAR 0 6
24052: ARRAY
24053: PUSH
24054: LD_VAR 0 5
24058: ARRAY
24059: PUSH
24060: LD_INT 1
24062: ARRAY
24063: PPUSH
24064: LD_EXP 105
24068: PUSH
24069: LD_VAR 0 6
24073: ARRAY
24074: PUSH
24075: LD_VAR 0 5
24079: ARRAY
24080: PUSH
24081: LD_INT 2
24083: ARRAY
24084: PPUSH
24085: LD_VAR 0 2
24089: PPUSH
24090: LD_VAR 0 3
24094: PPUSH
24095: CALL_OW 298
24099: PUSH
24100: LD_INT 6
24102: LESS
24103: IFFALSE 24202
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24105: LD_EXP 105
24109: PUSH
24110: LD_VAR 0 6
24114: ARRAY
24115: PUSH
24116: LD_VAR 0 5
24120: ARRAY
24121: PUSH
24122: LD_INT 1
24124: ARRAY
24125: PPUSH
24126: LD_EXP 105
24130: PUSH
24131: LD_VAR 0 6
24135: ARRAY
24136: PUSH
24137: LD_VAR 0 5
24141: ARRAY
24142: PUSH
24143: LD_INT 2
24145: ARRAY
24146: PPUSH
24147: LD_VAR 0 1
24151: PPUSH
24152: CALL_OW 255
24156: PPUSH
24157: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24161: LD_ADDR_EXP 105
24165: PUSH
24166: LD_EXP 105
24170: PPUSH
24171: LD_VAR 0 6
24175: PPUSH
24176: LD_EXP 105
24180: PUSH
24181: LD_VAR 0 6
24185: ARRAY
24186: PPUSH
24187: LD_VAR 0 5
24191: PPUSH
24192: CALL_OW 3
24196: PPUSH
24197: CALL_OW 1
24201: ST_TO_ADDR
// end ; end ;
24202: GO 24040
24204: POP
24205: POP
// end ;
24206: LD_VAR 0 4
24210: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24211: LD_INT 0
24213: PPUSH
24214: PPUSH
24215: PPUSH
24216: PPUSH
24217: PPUSH
24218: PPUSH
24219: PPUSH
24220: PPUSH
24221: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24222: LD_VAR 0 1
24226: PPUSH
24227: CALL_OW 264
24231: PUSH
24232: LD_EXP 25
24236: EQUAL
24237: NOT
24238: PUSH
24239: LD_VAR 0 1
24243: PUSH
24244: LD_EXP 104
24248: IN
24249: NOT
24250: OR
24251: IFFALSE 24255
// exit ;
24253: GO 24577
// index := GetElementIndex ( minersList , unit ) ;
24255: LD_ADDR_VAR 0 6
24259: PUSH
24260: LD_EXP 104
24264: PPUSH
24265: LD_VAR 0 1
24269: PPUSH
24270: CALL 29773 0 2
24274: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24275: LD_ADDR_VAR 0 8
24279: PUSH
24280: LD_EXP 106
24284: PUSH
24285: LD_EXP 105
24289: PUSH
24290: LD_VAR 0 6
24294: ARRAY
24295: MINUS
24296: ST_TO_ADDR
// if not minesFreeAmount then
24297: LD_VAR 0 8
24301: NOT
24302: IFFALSE 24306
// exit ;
24304: GO 24577
// tmp := [ ] ;
24306: LD_ADDR_VAR 0 7
24310: PUSH
24311: EMPTY
24312: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24313: LD_ADDR_VAR 0 5
24317: PUSH
24318: DOUBLE
24319: LD_INT 1
24321: DEC
24322: ST_TO_ADDR
24323: LD_VAR 0 8
24327: PUSH
24328: FOR_TO
24329: IFFALSE 24524
// begin _d := rand ( 0 , 5 ) ;
24331: LD_ADDR_VAR 0 11
24335: PUSH
24336: LD_INT 0
24338: PPUSH
24339: LD_INT 5
24341: PPUSH
24342: CALL_OW 12
24346: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24347: LD_ADDR_VAR 0 12
24351: PUSH
24352: LD_INT 2
24354: PPUSH
24355: LD_INT 6
24357: PPUSH
24358: CALL_OW 12
24362: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24363: LD_ADDR_VAR 0 9
24367: PUSH
24368: LD_VAR 0 2
24372: PPUSH
24373: LD_VAR 0 11
24377: PPUSH
24378: LD_VAR 0 12
24382: PPUSH
24383: CALL_OW 272
24387: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24388: LD_ADDR_VAR 0 10
24392: PUSH
24393: LD_VAR 0 3
24397: PPUSH
24398: LD_VAR 0 11
24402: PPUSH
24403: LD_VAR 0 12
24407: PPUSH
24408: CALL_OW 273
24412: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24413: LD_VAR 0 9
24417: PPUSH
24418: LD_VAR 0 10
24422: PPUSH
24423: CALL_OW 488
24427: PUSH
24428: LD_VAR 0 9
24432: PUSH
24433: LD_VAR 0 10
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_VAR 0 7
24446: IN
24447: NOT
24448: AND
24449: PUSH
24450: LD_VAR 0 9
24454: PPUSH
24455: LD_VAR 0 10
24459: PPUSH
24460: CALL_OW 458
24464: NOT
24465: AND
24466: IFFALSE 24508
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24468: LD_ADDR_VAR 0 7
24472: PUSH
24473: LD_VAR 0 7
24477: PPUSH
24478: LD_VAR 0 7
24482: PUSH
24483: LD_INT 1
24485: PLUS
24486: PPUSH
24487: LD_VAR 0 9
24491: PUSH
24492: LD_VAR 0 10
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PPUSH
24501: CALL_OW 1
24505: ST_TO_ADDR
24506: GO 24522
// i := i - 1 ;
24508: LD_ADDR_VAR 0 5
24512: PUSH
24513: LD_VAR 0 5
24517: PUSH
24518: LD_INT 1
24520: MINUS
24521: ST_TO_ADDR
// end ;
24522: GO 24328
24524: POP
24525: POP
// for i in tmp do
24526: LD_ADDR_VAR 0 5
24530: PUSH
24531: LD_VAR 0 7
24535: PUSH
24536: FOR_IN
24537: IFFALSE 24575
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24539: LD_VAR 0 1
24543: PPUSH
24544: LD_VAR 0 5
24548: PUSH
24549: LD_INT 1
24551: ARRAY
24552: PPUSH
24553: LD_VAR 0 5
24557: PUSH
24558: LD_INT 2
24560: ARRAY
24561: PPUSH
24562: CALL 23517 0 3
24566: NOT
24567: IFFALSE 24573
// exit ;
24569: POP
24570: POP
24571: GO 24577
24573: GO 24536
24575: POP
24576: POP
// end ;
24577: LD_VAR 0 4
24581: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24582: LD_INT 0
24584: PPUSH
24585: PPUSH
24586: PPUSH
24587: PPUSH
24588: PPUSH
24589: PPUSH
24590: PPUSH
// if not GetClass ( unit ) = class_sniper then
24591: LD_VAR 0 1
24595: PPUSH
24596: CALL_OW 257
24600: PUSH
24601: LD_INT 5
24603: EQUAL
24604: NOT
24605: IFFALSE 24609
// exit ;
24607: GO 24997
// dist := 8 ;
24609: LD_ADDR_VAR 0 5
24613: PUSH
24614: LD_INT 8
24616: ST_TO_ADDR
// viewRange := 12 ;
24617: LD_ADDR_VAR 0 7
24621: PUSH
24622: LD_INT 12
24624: ST_TO_ADDR
// side := GetSide ( unit ) ;
24625: LD_ADDR_VAR 0 6
24629: PUSH
24630: LD_VAR 0 1
24634: PPUSH
24635: CALL_OW 255
24639: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24640: LD_INT 61
24642: PPUSH
24643: LD_VAR 0 6
24647: PPUSH
24648: CALL_OW 321
24652: PUSH
24653: LD_INT 2
24655: EQUAL
24656: IFFALSE 24666
// viewRange := 16 ;
24658: LD_ADDR_VAR 0 7
24662: PUSH
24663: LD_INT 16
24665: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24666: LD_VAR 0 1
24670: PPUSH
24671: LD_VAR 0 2
24675: PPUSH
24676: LD_VAR 0 3
24680: PPUSH
24681: CALL_OW 297
24685: PUSH
24686: LD_VAR 0 5
24690: GREATER
24691: IFFALSE 24770
// begin ComMoveXY ( unit , x , y ) ;
24693: LD_VAR 0 1
24697: PPUSH
24698: LD_VAR 0 2
24702: PPUSH
24703: LD_VAR 0 3
24707: PPUSH
24708: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24712: LD_INT 35
24714: PPUSH
24715: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24719: LD_VAR 0 1
24723: PPUSH
24724: LD_VAR 0 2
24728: PPUSH
24729: LD_VAR 0 3
24733: PPUSH
24734: CALL 60545 0 3
24738: NOT
24739: IFFALSE 24743
// exit ;
24741: GO 24997
// until GetDistUnitXY ( unit , x , y ) < dist ;
24743: LD_VAR 0 1
24747: PPUSH
24748: LD_VAR 0 2
24752: PPUSH
24753: LD_VAR 0 3
24757: PPUSH
24758: CALL_OW 297
24762: PUSH
24763: LD_VAR 0 5
24767: LESS
24768: IFFALSE 24712
// end ; ComTurnXY ( unit , x , y ) ;
24770: LD_VAR 0 1
24774: PPUSH
24775: LD_VAR 0 2
24779: PPUSH
24780: LD_VAR 0 3
24784: PPUSH
24785: CALL_OW 118
// wait ( 5 ) ;
24789: LD_INT 5
24791: PPUSH
24792: CALL_OW 67
// _d := GetDir ( unit ) ;
24796: LD_ADDR_VAR 0 10
24800: PUSH
24801: LD_VAR 0 1
24805: PPUSH
24806: CALL_OW 254
24810: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24811: LD_ADDR_VAR 0 8
24815: PUSH
24816: LD_VAR 0 1
24820: PPUSH
24821: CALL_OW 250
24825: PPUSH
24826: LD_VAR 0 10
24830: PPUSH
24831: LD_VAR 0 5
24835: PPUSH
24836: CALL_OW 272
24840: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24841: LD_ADDR_VAR 0 9
24845: PUSH
24846: LD_VAR 0 1
24850: PPUSH
24851: CALL_OW 251
24855: PPUSH
24856: LD_VAR 0 10
24860: PPUSH
24861: LD_VAR 0 5
24865: PPUSH
24866: CALL_OW 273
24870: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24871: LD_VAR 0 8
24875: PPUSH
24876: LD_VAR 0 9
24880: PPUSH
24881: CALL_OW 488
24885: NOT
24886: IFFALSE 24890
// exit ;
24888: GO 24997
// ComAnimCustom ( unit , 1 ) ;
24890: LD_VAR 0 1
24894: PPUSH
24895: LD_INT 1
24897: PPUSH
24898: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24902: LD_VAR 0 8
24906: PPUSH
24907: LD_VAR 0 9
24911: PPUSH
24912: LD_VAR 0 6
24916: PPUSH
24917: LD_VAR 0 7
24921: PPUSH
24922: CALL_OW 330
// repeat wait ( 1 ) ;
24926: LD_INT 1
24928: PPUSH
24929: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24933: LD_VAR 0 1
24937: PPUSH
24938: CALL_OW 316
24942: PUSH
24943: LD_VAR 0 1
24947: PPUSH
24948: CALL_OW 314
24952: OR
24953: PUSH
24954: LD_VAR 0 1
24958: PPUSH
24959: CALL_OW 302
24963: NOT
24964: OR
24965: PUSH
24966: LD_VAR 0 1
24970: PPUSH
24971: CALL_OW 301
24975: OR
24976: IFFALSE 24926
// RemoveSeeing ( _x , _y , side ) ;
24978: LD_VAR 0 8
24982: PPUSH
24983: LD_VAR 0 9
24987: PPUSH
24988: LD_VAR 0 6
24992: PPUSH
24993: CALL_OW 331
// end ; end_of_file
24997: LD_VAR 0 4
25001: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25002: LD_INT 0
25004: PPUSH
25005: PPUSH
// if exist_mode then
25006: LD_VAR 0 2
25010: IFFALSE 25035
// unit := CreateCharacter ( prefix & ident ) else
25012: LD_ADDR_VAR 0 5
25016: PUSH
25017: LD_VAR 0 3
25021: PUSH
25022: LD_VAR 0 1
25026: STR
25027: PPUSH
25028: CALL_OW 34
25032: ST_TO_ADDR
25033: GO 25050
// unit := NewCharacter ( ident ) ;
25035: LD_ADDR_VAR 0 5
25039: PUSH
25040: LD_VAR 0 1
25044: PPUSH
25045: CALL_OW 25
25049: ST_TO_ADDR
// result := unit ;
25050: LD_ADDR_VAR 0 4
25054: PUSH
25055: LD_VAR 0 5
25059: ST_TO_ADDR
// end ;
25060: LD_VAR 0 4
25064: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25065: LD_INT 0
25067: PPUSH
25068: PPUSH
// if not side or not nation then
25069: LD_VAR 0 1
25073: NOT
25074: PUSH
25075: LD_VAR 0 2
25079: NOT
25080: OR
25081: IFFALSE 25085
// exit ;
25083: GO 25853
// case nation of nation_american :
25085: LD_VAR 0 2
25089: PUSH
25090: LD_INT 1
25092: DOUBLE
25093: EQUAL
25094: IFTRUE 25098
25096: GO 25312
25098: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25099: LD_ADDR_VAR 0 4
25103: PUSH
25104: LD_INT 35
25106: PUSH
25107: LD_INT 45
25109: PUSH
25110: LD_INT 46
25112: PUSH
25113: LD_INT 47
25115: PUSH
25116: LD_INT 82
25118: PUSH
25119: LD_INT 83
25121: PUSH
25122: LD_INT 84
25124: PUSH
25125: LD_INT 85
25127: PUSH
25128: LD_INT 86
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: LD_INT 2
25136: PUSH
25137: LD_INT 6
25139: PUSH
25140: LD_INT 15
25142: PUSH
25143: LD_INT 16
25145: PUSH
25146: LD_INT 7
25148: PUSH
25149: LD_INT 12
25151: PUSH
25152: LD_INT 13
25154: PUSH
25155: LD_INT 10
25157: PUSH
25158: LD_INT 14
25160: PUSH
25161: LD_INT 20
25163: PUSH
25164: LD_INT 21
25166: PUSH
25167: LD_INT 22
25169: PUSH
25170: LD_INT 25
25172: PUSH
25173: LD_INT 32
25175: PUSH
25176: LD_INT 27
25178: PUSH
25179: LD_INT 36
25181: PUSH
25182: LD_INT 69
25184: PUSH
25185: LD_INT 39
25187: PUSH
25188: LD_INT 34
25190: PUSH
25191: LD_INT 40
25193: PUSH
25194: LD_INT 48
25196: PUSH
25197: LD_INT 49
25199: PUSH
25200: LD_INT 50
25202: PUSH
25203: LD_INT 51
25205: PUSH
25206: LD_INT 52
25208: PUSH
25209: LD_INT 53
25211: PUSH
25212: LD_INT 54
25214: PUSH
25215: LD_INT 55
25217: PUSH
25218: LD_INT 56
25220: PUSH
25221: LD_INT 57
25223: PUSH
25224: LD_INT 58
25226: PUSH
25227: LD_INT 59
25229: PUSH
25230: LD_INT 60
25232: PUSH
25233: LD_INT 61
25235: PUSH
25236: LD_INT 62
25238: PUSH
25239: LD_INT 80
25241: PUSH
25242: LD_INT 82
25244: PUSH
25245: LD_INT 83
25247: PUSH
25248: LD_INT 84
25250: PUSH
25251: LD_INT 85
25253: PUSH
25254: LD_INT 86
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: ST_TO_ADDR
25310: GO 25777
25312: LD_INT 2
25314: DOUBLE
25315: EQUAL
25316: IFTRUE 25320
25318: GO 25546
25320: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25321: LD_ADDR_VAR 0 4
25325: PUSH
25326: LD_INT 35
25328: PUSH
25329: LD_INT 45
25331: PUSH
25332: LD_INT 46
25334: PUSH
25335: LD_INT 47
25337: PUSH
25338: LD_INT 82
25340: PUSH
25341: LD_INT 83
25343: PUSH
25344: LD_INT 84
25346: PUSH
25347: LD_INT 85
25349: PUSH
25350: LD_INT 87
25352: PUSH
25353: LD_INT 70
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: LD_INT 11
25361: PUSH
25362: LD_INT 3
25364: PUSH
25365: LD_INT 4
25367: PUSH
25368: LD_INT 5
25370: PUSH
25371: LD_INT 6
25373: PUSH
25374: LD_INT 15
25376: PUSH
25377: LD_INT 18
25379: PUSH
25380: LD_INT 7
25382: PUSH
25383: LD_INT 17
25385: PUSH
25386: LD_INT 8
25388: PUSH
25389: LD_INT 20
25391: PUSH
25392: LD_INT 21
25394: PUSH
25395: LD_INT 22
25397: PUSH
25398: LD_INT 72
25400: PUSH
25401: LD_INT 26
25403: PUSH
25404: LD_INT 69
25406: PUSH
25407: LD_INT 39
25409: PUSH
25410: LD_INT 40
25412: PUSH
25413: LD_INT 41
25415: PUSH
25416: LD_INT 42
25418: PUSH
25419: LD_INT 43
25421: PUSH
25422: LD_INT 48
25424: PUSH
25425: LD_INT 49
25427: PUSH
25428: LD_INT 50
25430: PUSH
25431: LD_INT 51
25433: PUSH
25434: LD_INT 52
25436: PUSH
25437: LD_INT 53
25439: PUSH
25440: LD_INT 54
25442: PUSH
25443: LD_INT 55
25445: PUSH
25446: LD_INT 56
25448: PUSH
25449: LD_INT 60
25451: PUSH
25452: LD_INT 61
25454: PUSH
25455: LD_INT 62
25457: PUSH
25458: LD_INT 66
25460: PUSH
25461: LD_INT 67
25463: PUSH
25464: LD_INT 68
25466: PUSH
25467: LD_INT 81
25469: PUSH
25470: LD_INT 82
25472: PUSH
25473: LD_INT 83
25475: PUSH
25476: LD_INT 84
25478: PUSH
25479: LD_INT 85
25481: PUSH
25482: LD_INT 87
25484: PUSH
25485: LD_INT 88
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: ST_TO_ADDR
25544: GO 25777
25546: LD_INT 3
25548: DOUBLE
25549: EQUAL
25550: IFTRUE 25554
25552: GO 25776
25554: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25555: LD_ADDR_VAR 0 4
25559: PUSH
25560: LD_INT 46
25562: PUSH
25563: LD_INT 47
25565: PUSH
25566: LD_INT 1
25568: PUSH
25569: LD_INT 2
25571: PUSH
25572: LD_INT 82
25574: PUSH
25575: LD_INT 83
25577: PUSH
25578: LD_INT 84
25580: PUSH
25581: LD_INT 85
25583: PUSH
25584: LD_INT 86
25586: PUSH
25587: LD_INT 11
25589: PUSH
25590: LD_INT 9
25592: PUSH
25593: LD_INT 20
25595: PUSH
25596: LD_INT 19
25598: PUSH
25599: LD_INT 21
25601: PUSH
25602: LD_INT 24
25604: PUSH
25605: LD_INT 22
25607: PUSH
25608: LD_INT 25
25610: PUSH
25611: LD_INT 28
25613: PUSH
25614: LD_INT 29
25616: PUSH
25617: LD_INT 30
25619: PUSH
25620: LD_INT 31
25622: PUSH
25623: LD_INT 37
25625: PUSH
25626: LD_INT 38
25628: PUSH
25629: LD_INT 32
25631: PUSH
25632: LD_INT 27
25634: PUSH
25635: LD_INT 33
25637: PUSH
25638: LD_INT 69
25640: PUSH
25641: LD_INT 39
25643: PUSH
25644: LD_INT 34
25646: PUSH
25647: LD_INT 40
25649: PUSH
25650: LD_INT 71
25652: PUSH
25653: LD_INT 23
25655: PUSH
25656: LD_INT 44
25658: PUSH
25659: LD_INT 48
25661: PUSH
25662: LD_INT 49
25664: PUSH
25665: LD_INT 50
25667: PUSH
25668: LD_INT 51
25670: PUSH
25671: LD_INT 52
25673: PUSH
25674: LD_INT 53
25676: PUSH
25677: LD_INT 54
25679: PUSH
25680: LD_INT 55
25682: PUSH
25683: LD_INT 56
25685: PUSH
25686: LD_INT 57
25688: PUSH
25689: LD_INT 58
25691: PUSH
25692: LD_INT 59
25694: PUSH
25695: LD_INT 63
25697: PUSH
25698: LD_INT 64
25700: PUSH
25701: LD_INT 65
25703: PUSH
25704: LD_INT 82
25706: PUSH
25707: LD_INT 83
25709: PUSH
25710: LD_INT 84
25712: PUSH
25713: LD_INT 85
25715: PUSH
25716: LD_INT 86
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: ST_TO_ADDR
25774: GO 25777
25776: POP
// if state > - 1 and state < 3 then
25777: LD_VAR 0 3
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: GREATER
25786: PUSH
25787: LD_VAR 0 3
25791: PUSH
25792: LD_INT 3
25794: LESS
25795: AND
25796: IFFALSE 25853
// for i in result do
25798: LD_ADDR_VAR 0 5
25802: PUSH
25803: LD_VAR 0 4
25807: PUSH
25808: FOR_IN
25809: IFFALSE 25851
// if GetTech ( i , side ) <> state then
25811: LD_VAR 0 5
25815: PPUSH
25816: LD_VAR 0 1
25820: PPUSH
25821: CALL_OW 321
25825: PUSH
25826: LD_VAR 0 3
25830: NONEQUAL
25831: IFFALSE 25849
// result := result diff i ;
25833: LD_ADDR_VAR 0 4
25837: PUSH
25838: LD_VAR 0 4
25842: PUSH
25843: LD_VAR 0 5
25847: DIFF
25848: ST_TO_ADDR
25849: GO 25808
25851: POP
25852: POP
// end ;
25853: LD_VAR 0 4
25857: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25858: LD_INT 0
25860: PPUSH
25861: PPUSH
25862: PPUSH
// result := true ;
25863: LD_ADDR_VAR 0 3
25867: PUSH
25868: LD_INT 1
25870: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25871: LD_ADDR_VAR 0 5
25875: PUSH
25876: LD_VAR 0 2
25880: PPUSH
25881: CALL_OW 480
25885: ST_TO_ADDR
// if not tmp then
25886: LD_VAR 0 5
25890: NOT
25891: IFFALSE 25895
// exit ;
25893: GO 25944
// for i in tmp do
25895: LD_ADDR_VAR 0 4
25899: PUSH
25900: LD_VAR 0 5
25904: PUSH
25905: FOR_IN
25906: IFFALSE 25942
// if GetTech ( i , side ) <> state_researched then
25908: LD_VAR 0 4
25912: PPUSH
25913: LD_VAR 0 1
25917: PPUSH
25918: CALL_OW 321
25922: PUSH
25923: LD_INT 2
25925: NONEQUAL
25926: IFFALSE 25940
// begin result := false ;
25928: LD_ADDR_VAR 0 3
25932: PUSH
25933: LD_INT 0
25935: ST_TO_ADDR
// exit ;
25936: POP
25937: POP
25938: GO 25944
// end ;
25940: GO 25905
25942: POP
25943: POP
// end ;
25944: LD_VAR 0 3
25948: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25949: LD_INT 0
25951: PPUSH
25952: PPUSH
25953: PPUSH
25954: PPUSH
25955: PPUSH
25956: PPUSH
25957: PPUSH
25958: PPUSH
25959: PPUSH
25960: PPUSH
25961: PPUSH
25962: PPUSH
25963: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25964: LD_VAR 0 1
25968: NOT
25969: PUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: CALL_OW 257
25979: PUSH
25980: LD_INT 9
25982: NONEQUAL
25983: OR
25984: IFFALSE 25988
// exit ;
25986: GO 26561
// side := GetSide ( unit ) ;
25988: LD_ADDR_VAR 0 9
25992: PUSH
25993: LD_VAR 0 1
25997: PPUSH
25998: CALL_OW 255
26002: ST_TO_ADDR
// tech_space := tech_spacanom ;
26003: LD_ADDR_VAR 0 12
26007: PUSH
26008: LD_INT 29
26010: ST_TO_ADDR
// tech_time := tech_taurad ;
26011: LD_ADDR_VAR 0 13
26015: PUSH
26016: LD_INT 28
26018: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26019: LD_ADDR_VAR 0 11
26023: PUSH
26024: LD_VAR 0 1
26028: PPUSH
26029: CALL_OW 310
26033: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26034: LD_VAR 0 11
26038: PPUSH
26039: CALL_OW 247
26043: PUSH
26044: LD_INT 2
26046: EQUAL
26047: IFFALSE 26051
// exit ;
26049: GO 26561
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26051: LD_ADDR_VAR 0 8
26055: PUSH
26056: LD_INT 81
26058: PUSH
26059: LD_VAR 0 9
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 3
26070: PUSH
26071: LD_INT 21
26073: PUSH
26074: LD_INT 3
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PPUSH
26089: CALL_OW 69
26093: ST_TO_ADDR
// if not tmp then
26094: LD_VAR 0 8
26098: NOT
26099: IFFALSE 26103
// exit ;
26101: GO 26561
// if in_unit then
26103: LD_VAR 0 11
26107: IFFALSE 26131
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26109: LD_ADDR_VAR 0 10
26113: PUSH
26114: LD_VAR 0 8
26118: PPUSH
26119: LD_VAR 0 11
26123: PPUSH
26124: CALL_OW 74
26128: ST_TO_ADDR
26129: GO 26151
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26131: LD_ADDR_VAR 0 10
26135: PUSH
26136: LD_VAR 0 8
26140: PPUSH
26141: LD_VAR 0 1
26145: PPUSH
26146: CALL_OW 74
26150: ST_TO_ADDR
// if not enemy then
26151: LD_VAR 0 10
26155: NOT
26156: IFFALSE 26160
// exit ;
26158: GO 26561
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26160: LD_VAR 0 11
26164: PUSH
26165: LD_VAR 0 11
26169: PPUSH
26170: LD_VAR 0 10
26174: PPUSH
26175: CALL_OW 296
26179: PUSH
26180: LD_INT 13
26182: GREATER
26183: AND
26184: PUSH
26185: LD_VAR 0 1
26189: PPUSH
26190: LD_VAR 0 10
26194: PPUSH
26195: CALL_OW 296
26199: PUSH
26200: LD_INT 12
26202: GREATER
26203: OR
26204: IFFALSE 26208
// exit ;
26206: GO 26561
// missile := [ 1 ] ;
26208: LD_ADDR_VAR 0 14
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: EMPTY
26217: LIST
26218: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26219: LD_VAR 0 9
26223: PPUSH
26224: LD_VAR 0 12
26228: PPUSH
26229: CALL_OW 325
26233: IFFALSE 26262
// missile := Insert ( missile , missile + 1 , 2 ) ;
26235: LD_ADDR_VAR 0 14
26239: PUSH
26240: LD_VAR 0 14
26244: PPUSH
26245: LD_VAR 0 14
26249: PUSH
26250: LD_INT 1
26252: PLUS
26253: PPUSH
26254: LD_INT 2
26256: PPUSH
26257: CALL_OW 2
26261: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26262: LD_VAR 0 9
26266: PPUSH
26267: LD_VAR 0 13
26271: PPUSH
26272: CALL_OW 325
26276: PUSH
26277: LD_VAR 0 10
26281: PPUSH
26282: CALL_OW 255
26286: PPUSH
26287: LD_VAR 0 13
26291: PPUSH
26292: CALL_OW 325
26296: NOT
26297: AND
26298: IFFALSE 26327
// missile := Insert ( missile , missile + 1 , 3 ) ;
26300: LD_ADDR_VAR 0 14
26304: PUSH
26305: LD_VAR 0 14
26309: PPUSH
26310: LD_VAR 0 14
26314: PUSH
26315: LD_INT 1
26317: PLUS
26318: PPUSH
26319: LD_INT 3
26321: PPUSH
26322: CALL_OW 2
26326: ST_TO_ADDR
// if missile < 2 then
26327: LD_VAR 0 14
26331: PUSH
26332: LD_INT 2
26334: LESS
26335: IFFALSE 26339
// exit ;
26337: GO 26561
// x := GetX ( enemy ) ;
26339: LD_ADDR_VAR 0 4
26343: PUSH
26344: LD_VAR 0 10
26348: PPUSH
26349: CALL_OW 250
26353: ST_TO_ADDR
// y := GetY ( enemy ) ;
26354: LD_ADDR_VAR 0 5
26358: PUSH
26359: LD_VAR 0 10
26363: PPUSH
26364: CALL_OW 251
26368: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26369: LD_ADDR_VAR 0 6
26373: PUSH
26374: LD_VAR 0 4
26378: PUSH
26379: LD_INT 1
26381: NEG
26382: PPUSH
26383: LD_INT 1
26385: PPUSH
26386: CALL_OW 12
26390: PLUS
26391: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26392: LD_ADDR_VAR 0 7
26396: PUSH
26397: LD_VAR 0 5
26401: PUSH
26402: LD_INT 1
26404: NEG
26405: PPUSH
26406: LD_INT 1
26408: PPUSH
26409: CALL_OW 12
26413: PLUS
26414: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26415: LD_VAR 0 6
26419: PPUSH
26420: LD_VAR 0 7
26424: PPUSH
26425: CALL_OW 488
26429: NOT
26430: IFFALSE 26452
// begin _x := x ;
26432: LD_ADDR_VAR 0 6
26436: PUSH
26437: LD_VAR 0 4
26441: ST_TO_ADDR
// _y := y ;
26442: LD_ADDR_VAR 0 7
26446: PUSH
26447: LD_VAR 0 5
26451: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26452: LD_ADDR_VAR 0 3
26456: PUSH
26457: LD_INT 1
26459: PPUSH
26460: LD_VAR 0 14
26464: PPUSH
26465: CALL_OW 12
26469: ST_TO_ADDR
// case i of 1 :
26470: LD_VAR 0 3
26474: PUSH
26475: LD_INT 1
26477: DOUBLE
26478: EQUAL
26479: IFTRUE 26483
26481: GO 26500
26483: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26484: LD_VAR 0 1
26488: PPUSH
26489: LD_VAR 0 10
26493: PPUSH
26494: CALL_OW 115
26498: GO 26561
26500: LD_INT 2
26502: DOUBLE
26503: EQUAL
26504: IFTRUE 26508
26506: GO 26530
26508: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26509: LD_VAR 0 1
26513: PPUSH
26514: LD_VAR 0 6
26518: PPUSH
26519: LD_VAR 0 7
26523: PPUSH
26524: CALL_OW 153
26528: GO 26561
26530: LD_INT 3
26532: DOUBLE
26533: EQUAL
26534: IFTRUE 26538
26536: GO 26560
26538: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26539: LD_VAR 0 1
26543: PPUSH
26544: LD_VAR 0 6
26548: PPUSH
26549: LD_VAR 0 7
26553: PPUSH
26554: CALL_OW 154
26558: GO 26561
26560: POP
// end ;
26561: LD_VAR 0 2
26565: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26566: LD_INT 0
26568: PPUSH
26569: PPUSH
26570: PPUSH
26571: PPUSH
26572: PPUSH
26573: PPUSH
// if not unit or not building then
26574: LD_VAR 0 1
26578: NOT
26579: PUSH
26580: LD_VAR 0 2
26584: NOT
26585: OR
26586: IFFALSE 26590
// exit ;
26588: GO 26748
// x := GetX ( building ) ;
26590: LD_ADDR_VAR 0 5
26594: PUSH
26595: LD_VAR 0 2
26599: PPUSH
26600: CALL_OW 250
26604: ST_TO_ADDR
// y := GetY ( building ) ;
26605: LD_ADDR_VAR 0 6
26609: PUSH
26610: LD_VAR 0 2
26614: PPUSH
26615: CALL_OW 251
26619: ST_TO_ADDR
// for i = 0 to 5 do
26620: LD_ADDR_VAR 0 4
26624: PUSH
26625: DOUBLE
26626: LD_INT 0
26628: DEC
26629: ST_TO_ADDR
26630: LD_INT 5
26632: PUSH
26633: FOR_TO
26634: IFFALSE 26746
// begin _x := ShiftX ( x , i , 3 ) ;
26636: LD_ADDR_VAR 0 7
26640: PUSH
26641: LD_VAR 0 5
26645: PPUSH
26646: LD_VAR 0 4
26650: PPUSH
26651: LD_INT 3
26653: PPUSH
26654: CALL_OW 272
26658: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26659: LD_ADDR_VAR 0 8
26663: PUSH
26664: LD_VAR 0 6
26668: PPUSH
26669: LD_VAR 0 4
26673: PPUSH
26674: LD_INT 3
26676: PPUSH
26677: CALL_OW 273
26681: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26682: LD_VAR 0 7
26686: PPUSH
26687: LD_VAR 0 8
26691: PPUSH
26692: CALL_OW 488
26696: NOT
26697: IFFALSE 26701
// continue ;
26699: GO 26633
// if HexInfo ( _x , _y ) = 0 then
26701: LD_VAR 0 7
26705: PPUSH
26706: LD_VAR 0 8
26710: PPUSH
26711: CALL_OW 428
26715: PUSH
26716: LD_INT 0
26718: EQUAL
26719: IFFALSE 26744
// begin ComMoveXY ( unit , _x , _y ) ;
26721: LD_VAR 0 1
26725: PPUSH
26726: LD_VAR 0 7
26730: PPUSH
26731: LD_VAR 0 8
26735: PPUSH
26736: CALL_OW 111
// exit ;
26740: POP
26741: POP
26742: GO 26748
// end ; end ;
26744: GO 26633
26746: POP
26747: POP
// end ;
26748: LD_VAR 0 3
26752: RET
// export function ScanBase ( side , base_area ) ; begin
26753: LD_INT 0
26755: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26756: LD_ADDR_VAR 0 3
26760: PUSH
26761: LD_VAR 0 2
26765: PPUSH
26766: LD_INT 81
26768: PUSH
26769: LD_VAR 0 1
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PPUSH
26778: CALL_OW 70
26782: ST_TO_ADDR
// end ;
26783: LD_VAR 0 3
26787: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26788: LD_INT 0
26790: PPUSH
26791: PPUSH
26792: PPUSH
26793: PPUSH
// result := false ;
26794: LD_ADDR_VAR 0 2
26798: PUSH
26799: LD_INT 0
26801: ST_TO_ADDR
// side := GetSide ( unit ) ;
26802: LD_ADDR_VAR 0 3
26806: PUSH
26807: LD_VAR 0 1
26811: PPUSH
26812: CALL_OW 255
26816: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26817: LD_ADDR_VAR 0 4
26821: PUSH
26822: LD_VAR 0 1
26826: PPUSH
26827: CALL_OW 248
26831: ST_TO_ADDR
// case nat of 1 :
26832: LD_VAR 0 4
26836: PUSH
26837: LD_INT 1
26839: DOUBLE
26840: EQUAL
26841: IFTRUE 26845
26843: GO 26856
26845: POP
// tech := tech_lassight ; 2 :
26846: LD_ADDR_VAR 0 5
26850: PUSH
26851: LD_INT 12
26853: ST_TO_ADDR
26854: GO 26895
26856: LD_INT 2
26858: DOUBLE
26859: EQUAL
26860: IFTRUE 26864
26862: GO 26875
26864: POP
// tech := tech_mortar ; 3 :
26865: LD_ADDR_VAR 0 5
26869: PUSH
26870: LD_INT 41
26872: ST_TO_ADDR
26873: GO 26895
26875: LD_INT 3
26877: DOUBLE
26878: EQUAL
26879: IFTRUE 26883
26881: GO 26894
26883: POP
// tech := tech_bazooka ; end ;
26884: LD_ADDR_VAR 0 5
26888: PUSH
26889: LD_INT 44
26891: ST_TO_ADDR
26892: GO 26895
26894: POP
// if Researched ( side , tech ) then
26895: LD_VAR 0 3
26899: PPUSH
26900: LD_VAR 0 5
26904: PPUSH
26905: CALL_OW 325
26909: IFFALSE 26936
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26911: LD_ADDR_VAR 0 2
26915: PUSH
26916: LD_INT 5
26918: PUSH
26919: LD_INT 8
26921: PUSH
26922: LD_INT 9
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: LIST
26929: PUSH
26930: LD_VAR 0 4
26934: ARRAY
26935: ST_TO_ADDR
// end ;
26936: LD_VAR 0 2
26940: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26941: LD_INT 0
26943: PPUSH
26944: PPUSH
26945: PPUSH
// if not mines then
26946: LD_VAR 0 2
26950: NOT
26951: IFFALSE 26955
// exit ;
26953: GO 27099
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26955: LD_ADDR_VAR 0 5
26959: PUSH
26960: LD_INT 81
26962: PUSH
26963: LD_VAR 0 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 3
26974: PUSH
26975: LD_INT 21
26977: PUSH
26978: LD_INT 3
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PPUSH
26993: CALL_OW 69
26997: ST_TO_ADDR
// for i in mines do
26998: LD_ADDR_VAR 0 4
27002: PUSH
27003: LD_VAR 0 2
27007: PUSH
27008: FOR_IN
27009: IFFALSE 27097
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27011: LD_VAR 0 4
27015: PUSH
27016: LD_INT 1
27018: ARRAY
27019: PPUSH
27020: LD_VAR 0 4
27024: PUSH
27025: LD_INT 2
27027: ARRAY
27028: PPUSH
27029: CALL_OW 458
27033: NOT
27034: IFFALSE 27038
// continue ;
27036: GO 27008
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27038: LD_VAR 0 4
27042: PUSH
27043: LD_INT 1
27045: ARRAY
27046: PPUSH
27047: LD_VAR 0 4
27051: PUSH
27052: LD_INT 2
27054: ARRAY
27055: PPUSH
27056: CALL_OW 428
27060: PUSH
27061: LD_VAR 0 5
27065: IN
27066: IFFALSE 27095
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27068: LD_VAR 0 4
27072: PUSH
27073: LD_INT 1
27075: ARRAY
27076: PPUSH
27077: LD_VAR 0 4
27081: PUSH
27082: LD_INT 2
27084: ARRAY
27085: PPUSH
27086: LD_VAR 0 1
27090: PPUSH
27091: CALL_OW 456
// end ;
27095: GO 27008
27097: POP
27098: POP
// end ;
27099: LD_VAR 0 3
27103: RET
// export function Count ( array ) ; var i ; begin
27104: LD_INT 0
27106: PPUSH
27107: PPUSH
// result := 0 ;
27108: LD_ADDR_VAR 0 2
27112: PUSH
27113: LD_INT 0
27115: ST_TO_ADDR
// for i in array do
27116: LD_ADDR_VAR 0 3
27120: PUSH
27121: LD_VAR 0 1
27125: PUSH
27126: FOR_IN
27127: IFFALSE 27151
// if i then
27129: LD_VAR 0 3
27133: IFFALSE 27149
// result := result + 1 ;
27135: LD_ADDR_VAR 0 2
27139: PUSH
27140: LD_VAR 0 2
27144: PUSH
27145: LD_INT 1
27147: PLUS
27148: ST_TO_ADDR
27149: GO 27126
27151: POP
27152: POP
// end ;
27153: LD_VAR 0 2
27157: RET
// export function IsEmpty ( building ) ; begin
27158: LD_INT 0
27160: PPUSH
// if not building then
27161: LD_VAR 0 1
27165: NOT
27166: IFFALSE 27170
// exit ;
27168: GO 27213
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27170: LD_ADDR_VAR 0 2
27174: PUSH
27175: LD_VAR 0 1
27179: PUSH
27180: LD_INT 22
27182: PUSH
27183: LD_VAR 0 1
27187: PPUSH
27188: CALL_OW 255
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 58
27199: PUSH
27200: EMPTY
27201: LIST
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PPUSH
27207: CALL_OW 69
27211: IN
27212: ST_TO_ADDR
// end ;
27213: LD_VAR 0 2
27217: RET
// export function IsNotFull ( building ) ; begin
27218: LD_INT 0
27220: PPUSH
// if not building then
27221: LD_VAR 0 1
27225: NOT
27226: IFFALSE 27230
// exit ;
27228: GO 27249
// result := UnitsInside ( building ) < 6 ;
27230: LD_ADDR_VAR 0 2
27234: PUSH
27235: LD_VAR 0 1
27239: PPUSH
27240: CALL_OW 313
27244: PUSH
27245: LD_INT 6
27247: LESS
27248: ST_TO_ADDR
// end ;
27249: LD_VAR 0 2
27253: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27254: LD_INT 0
27256: PPUSH
27257: PPUSH
27258: PPUSH
27259: PPUSH
// tmp := [ ] ;
27260: LD_ADDR_VAR 0 3
27264: PUSH
27265: EMPTY
27266: ST_TO_ADDR
// list := [ ] ;
27267: LD_ADDR_VAR 0 5
27271: PUSH
27272: EMPTY
27273: ST_TO_ADDR
// for i = 16 to 25 do
27274: LD_ADDR_VAR 0 4
27278: PUSH
27279: DOUBLE
27280: LD_INT 16
27282: DEC
27283: ST_TO_ADDR
27284: LD_INT 25
27286: PUSH
27287: FOR_TO
27288: IFFALSE 27361
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27290: LD_ADDR_VAR 0 3
27294: PUSH
27295: LD_VAR 0 3
27299: PUSH
27300: LD_INT 22
27302: PUSH
27303: LD_VAR 0 1
27307: PPUSH
27308: CALL_OW 255
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 91
27319: PUSH
27320: LD_VAR 0 1
27324: PUSH
27325: LD_INT 6
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 30
27335: PUSH
27336: LD_VAR 0 4
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: LIST
27349: PUSH
27350: EMPTY
27351: LIST
27352: PPUSH
27353: CALL_OW 69
27357: ADD
27358: ST_TO_ADDR
27359: GO 27287
27361: POP
27362: POP
// for i = 1 to tmp do
27363: LD_ADDR_VAR 0 4
27367: PUSH
27368: DOUBLE
27369: LD_INT 1
27371: DEC
27372: ST_TO_ADDR
27373: LD_VAR 0 3
27377: PUSH
27378: FOR_TO
27379: IFFALSE 27467
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27381: LD_ADDR_VAR 0 5
27385: PUSH
27386: LD_VAR 0 5
27390: PUSH
27391: LD_VAR 0 3
27395: PUSH
27396: LD_VAR 0 4
27400: ARRAY
27401: PPUSH
27402: CALL_OW 266
27406: PUSH
27407: LD_VAR 0 3
27411: PUSH
27412: LD_VAR 0 4
27416: ARRAY
27417: PPUSH
27418: CALL_OW 250
27422: PUSH
27423: LD_VAR 0 3
27427: PUSH
27428: LD_VAR 0 4
27432: ARRAY
27433: PPUSH
27434: CALL_OW 251
27438: PUSH
27439: LD_VAR 0 3
27443: PUSH
27444: LD_VAR 0 4
27448: ARRAY
27449: PPUSH
27450: CALL_OW 254
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: PUSH
27461: EMPTY
27462: LIST
27463: ADD
27464: ST_TO_ADDR
27465: GO 27378
27467: POP
27468: POP
// result := list ;
27469: LD_ADDR_VAR 0 2
27473: PUSH
27474: LD_VAR 0 5
27478: ST_TO_ADDR
// end ;
27479: LD_VAR 0 2
27483: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27484: LD_INT 0
27486: PPUSH
27487: PPUSH
27488: PPUSH
27489: PPUSH
27490: PPUSH
27491: PPUSH
27492: PPUSH
// if not factory then
27493: LD_VAR 0 1
27497: NOT
27498: IFFALSE 27502
// exit ;
27500: GO 28095
// if control = control_apeman then
27502: LD_VAR 0 4
27506: PUSH
27507: LD_INT 5
27509: EQUAL
27510: IFFALSE 27619
// begin tmp := UnitsInside ( factory ) ;
27512: LD_ADDR_VAR 0 8
27516: PUSH
27517: LD_VAR 0 1
27521: PPUSH
27522: CALL_OW 313
27526: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27527: LD_VAR 0 8
27531: PPUSH
27532: LD_INT 25
27534: PUSH
27535: LD_INT 12
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PPUSH
27542: CALL_OW 72
27546: NOT
27547: IFFALSE 27557
// control := control_manual ;
27549: LD_ADDR_VAR 0 4
27553: PUSH
27554: LD_INT 1
27556: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27557: LD_ADDR_VAR 0 8
27561: PUSH
27562: LD_VAR 0 1
27566: PPUSH
27567: CALL 27254 0 1
27571: ST_TO_ADDR
// if tmp then
27572: LD_VAR 0 8
27576: IFFALSE 27619
// begin for i in tmp do
27578: LD_ADDR_VAR 0 7
27582: PUSH
27583: LD_VAR 0 8
27587: PUSH
27588: FOR_IN
27589: IFFALSE 27617
// if i [ 1 ] = b_ext_radio then
27591: LD_VAR 0 7
27595: PUSH
27596: LD_INT 1
27598: ARRAY
27599: PUSH
27600: LD_INT 22
27602: EQUAL
27603: IFFALSE 27615
// begin control := control_remote ;
27605: LD_ADDR_VAR 0 4
27609: PUSH
27610: LD_INT 2
27612: ST_TO_ADDR
// break ;
27613: GO 27617
// end ;
27615: GO 27588
27617: POP
27618: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27619: LD_VAR 0 1
27623: PPUSH
27624: LD_VAR 0 2
27628: PPUSH
27629: LD_VAR 0 3
27633: PPUSH
27634: LD_VAR 0 4
27638: PPUSH
27639: LD_VAR 0 5
27643: PPUSH
27644: CALL_OW 448
27648: IFFALSE 27683
// begin result := [ chassis , engine , control , weapon ] ;
27650: LD_ADDR_VAR 0 6
27654: PUSH
27655: LD_VAR 0 2
27659: PUSH
27660: LD_VAR 0 3
27664: PUSH
27665: LD_VAR 0 4
27669: PUSH
27670: LD_VAR 0 5
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: ST_TO_ADDR
// exit ;
27681: GO 28095
// end ; _chassis := AvailableChassisList ( factory ) ;
27683: LD_ADDR_VAR 0 9
27687: PUSH
27688: LD_VAR 0 1
27692: PPUSH
27693: CALL_OW 475
27697: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27698: LD_ADDR_VAR 0 11
27702: PUSH
27703: LD_VAR 0 1
27707: PPUSH
27708: CALL_OW 476
27712: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27713: LD_ADDR_VAR 0 12
27717: PUSH
27718: LD_VAR 0 1
27722: PPUSH
27723: CALL_OW 477
27727: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27728: LD_ADDR_VAR 0 10
27732: PUSH
27733: LD_VAR 0 1
27737: PPUSH
27738: CALL_OW 478
27742: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27743: LD_VAR 0 9
27747: NOT
27748: PUSH
27749: LD_VAR 0 11
27753: NOT
27754: OR
27755: PUSH
27756: LD_VAR 0 12
27760: NOT
27761: OR
27762: PUSH
27763: LD_VAR 0 10
27767: NOT
27768: OR
27769: IFFALSE 27804
// begin result := [ chassis , engine , control , weapon ] ;
27771: LD_ADDR_VAR 0 6
27775: PUSH
27776: LD_VAR 0 2
27780: PUSH
27781: LD_VAR 0 3
27785: PUSH
27786: LD_VAR 0 4
27790: PUSH
27791: LD_VAR 0 5
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: ST_TO_ADDR
// exit ;
27802: GO 28095
// end ; if not chassis in _chassis then
27804: LD_VAR 0 2
27808: PUSH
27809: LD_VAR 0 9
27813: IN
27814: NOT
27815: IFFALSE 27841
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27817: LD_ADDR_VAR 0 2
27821: PUSH
27822: LD_VAR 0 9
27826: PUSH
27827: LD_INT 1
27829: PPUSH
27830: LD_VAR 0 9
27834: PPUSH
27835: CALL_OW 12
27839: ARRAY
27840: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27841: LD_VAR 0 2
27845: PPUSH
27846: LD_VAR 0 3
27850: PPUSH
27851: CALL 28100 0 2
27855: NOT
27856: IFFALSE 27915
// repeat engine := _engine [ 1 ] ;
27858: LD_ADDR_VAR 0 3
27862: PUSH
27863: LD_VAR 0 11
27867: PUSH
27868: LD_INT 1
27870: ARRAY
27871: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27872: LD_ADDR_VAR 0 11
27876: PUSH
27877: LD_VAR 0 11
27881: PPUSH
27882: LD_INT 1
27884: PPUSH
27885: CALL_OW 3
27889: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27890: LD_VAR 0 2
27894: PPUSH
27895: LD_VAR 0 3
27899: PPUSH
27900: CALL 28100 0 2
27904: PUSH
27905: LD_VAR 0 11
27909: PUSH
27910: EMPTY
27911: EQUAL
27912: OR
27913: IFFALSE 27858
// if not control in _control then
27915: LD_VAR 0 4
27919: PUSH
27920: LD_VAR 0 12
27924: IN
27925: NOT
27926: IFFALSE 27952
// control := _control [ rand ( 1 , _control ) ] ;
27928: LD_ADDR_VAR 0 4
27932: PUSH
27933: LD_VAR 0 12
27937: PUSH
27938: LD_INT 1
27940: PPUSH
27941: LD_VAR 0 12
27945: PPUSH
27946: CALL_OW 12
27950: ARRAY
27951: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27952: LD_VAR 0 2
27956: PPUSH
27957: LD_VAR 0 5
27961: PPUSH
27962: CALL 28320 0 2
27966: NOT
27967: IFFALSE 28026
// repeat weapon := _weapon [ 1 ] ;
27969: LD_ADDR_VAR 0 5
27973: PUSH
27974: LD_VAR 0 10
27978: PUSH
27979: LD_INT 1
27981: ARRAY
27982: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27983: LD_ADDR_VAR 0 10
27987: PUSH
27988: LD_VAR 0 10
27992: PPUSH
27993: LD_INT 1
27995: PPUSH
27996: CALL_OW 3
28000: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28001: LD_VAR 0 2
28005: PPUSH
28006: LD_VAR 0 5
28010: PPUSH
28011: CALL 28320 0 2
28015: PUSH
28016: LD_VAR 0 10
28020: PUSH
28021: EMPTY
28022: EQUAL
28023: OR
28024: IFFALSE 27969
// result := [ ] ;
28026: LD_ADDR_VAR 0 6
28030: PUSH
28031: EMPTY
28032: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28033: LD_VAR 0 1
28037: PPUSH
28038: LD_VAR 0 2
28042: PPUSH
28043: LD_VAR 0 3
28047: PPUSH
28048: LD_VAR 0 4
28052: PPUSH
28053: LD_VAR 0 5
28057: PPUSH
28058: CALL_OW 448
28062: IFFALSE 28095
// result := [ chassis , engine , control , weapon ] ;
28064: LD_ADDR_VAR 0 6
28068: PUSH
28069: LD_VAR 0 2
28073: PUSH
28074: LD_VAR 0 3
28078: PUSH
28079: LD_VAR 0 4
28083: PUSH
28084: LD_VAR 0 5
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: ST_TO_ADDR
// end ;
28095: LD_VAR 0 6
28099: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28100: LD_INT 0
28102: PPUSH
// if not chassis or not engine then
28103: LD_VAR 0 1
28107: NOT
28108: PUSH
28109: LD_VAR 0 2
28113: NOT
28114: OR
28115: IFFALSE 28119
// exit ;
28117: GO 28315
// case engine of engine_solar :
28119: LD_VAR 0 2
28123: PUSH
28124: LD_INT 2
28126: DOUBLE
28127: EQUAL
28128: IFTRUE 28132
28130: GO 28170
28132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28133: LD_ADDR_VAR 0 3
28137: PUSH
28138: LD_INT 11
28140: PUSH
28141: LD_INT 12
28143: PUSH
28144: LD_INT 13
28146: PUSH
28147: LD_INT 14
28149: PUSH
28150: LD_INT 1
28152: PUSH
28153: LD_INT 2
28155: PUSH
28156: LD_INT 3
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: ST_TO_ADDR
28168: GO 28299
28170: LD_INT 1
28172: DOUBLE
28173: EQUAL
28174: IFTRUE 28178
28176: GO 28240
28178: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28179: LD_ADDR_VAR 0 3
28183: PUSH
28184: LD_INT 11
28186: PUSH
28187: LD_INT 12
28189: PUSH
28190: LD_INT 13
28192: PUSH
28193: LD_INT 14
28195: PUSH
28196: LD_INT 1
28198: PUSH
28199: LD_INT 2
28201: PUSH
28202: LD_INT 3
28204: PUSH
28205: LD_INT 4
28207: PUSH
28208: LD_INT 5
28210: PUSH
28211: LD_INT 21
28213: PUSH
28214: LD_INT 23
28216: PUSH
28217: LD_INT 22
28219: PUSH
28220: LD_INT 24
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: ST_TO_ADDR
28238: GO 28299
28240: LD_INT 3
28242: DOUBLE
28243: EQUAL
28244: IFTRUE 28248
28246: GO 28298
28248: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28249: LD_ADDR_VAR 0 3
28253: PUSH
28254: LD_INT 13
28256: PUSH
28257: LD_INT 14
28259: PUSH
28260: LD_INT 2
28262: PUSH
28263: LD_INT 3
28265: PUSH
28266: LD_INT 4
28268: PUSH
28269: LD_INT 5
28271: PUSH
28272: LD_INT 21
28274: PUSH
28275: LD_INT 22
28277: PUSH
28278: LD_INT 23
28280: PUSH
28281: LD_INT 24
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: ST_TO_ADDR
28296: GO 28299
28298: POP
// result := ( chassis in result ) ;
28299: LD_ADDR_VAR 0 3
28303: PUSH
28304: LD_VAR 0 1
28308: PUSH
28309: LD_VAR 0 3
28313: IN
28314: ST_TO_ADDR
// end ;
28315: LD_VAR 0 3
28319: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28320: LD_INT 0
28322: PPUSH
// if not chassis or not weapon then
28323: LD_VAR 0 1
28327: NOT
28328: PUSH
28329: LD_VAR 0 2
28333: NOT
28334: OR
28335: IFFALSE 28339
// exit ;
28337: GO 29401
// case weapon of us_machine_gun :
28339: LD_VAR 0 2
28343: PUSH
28344: LD_INT 2
28346: DOUBLE
28347: EQUAL
28348: IFTRUE 28352
28350: GO 28382
28352: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28353: LD_ADDR_VAR 0 3
28357: PUSH
28358: LD_INT 1
28360: PUSH
28361: LD_INT 2
28363: PUSH
28364: LD_INT 3
28366: PUSH
28367: LD_INT 4
28369: PUSH
28370: LD_INT 5
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: ST_TO_ADDR
28380: GO 29385
28382: LD_INT 3
28384: DOUBLE
28385: EQUAL
28386: IFTRUE 28390
28388: GO 28420
28390: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28391: LD_ADDR_VAR 0 3
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: LD_INT 2
28401: PUSH
28402: LD_INT 3
28404: PUSH
28405: LD_INT 4
28407: PUSH
28408: LD_INT 5
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: ST_TO_ADDR
28418: GO 29385
28420: LD_INT 11
28422: DOUBLE
28423: EQUAL
28424: IFTRUE 28428
28426: GO 28458
28428: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28429: LD_ADDR_VAR 0 3
28433: PUSH
28434: LD_INT 1
28436: PUSH
28437: LD_INT 2
28439: PUSH
28440: LD_INT 3
28442: PUSH
28443: LD_INT 4
28445: PUSH
28446: LD_INT 5
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: ST_TO_ADDR
28456: GO 29385
28458: LD_INT 4
28460: DOUBLE
28461: EQUAL
28462: IFTRUE 28466
28464: GO 28492
28466: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28467: LD_ADDR_VAR 0 3
28471: PUSH
28472: LD_INT 2
28474: PUSH
28475: LD_INT 3
28477: PUSH
28478: LD_INT 4
28480: PUSH
28481: LD_INT 5
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: ST_TO_ADDR
28490: GO 29385
28492: LD_INT 5
28494: DOUBLE
28495: EQUAL
28496: IFTRUE 28500
28498: GO 28526
28500: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28501: LD_ADDR_VAR 0 3
28505: PUSH
28506: LD_INT 2
28508: PUSH
28509: LD_INT 3
28511: PUSH
28512: LD_INT 4
28514: PUSH
28515: LD_INT 5
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: ST_TO_ADDR
28524: GO 29385
28526: LD_INT 9
28528: DOUBLE
28529: EQUAL
28530: IFTRUE 28534
28532: GO 28560
28534: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28535: LD_ADDR_VAR 0 3
28539: PUSH
28540: LD_INT 2
28542: PUSH
28543: LD_INT 3
28545: PUSH
28546: LD_INT 4
28548: PUSH
28549: LD_INT 5
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: ST_TO_ADDR
28558: GO 29385
28560: LD_INT 7
28562: DOUBLE
28563: EQUAL
28564: IFTRUE 28568
28566: GO 28594
28568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28569: LD_ADDR_VAR 0 3
28573: PUSH
28574: LD_INT 2
28576: PUSH
28577: LD_INT 3
28579: PUSH
28580: LD_INT 4
28582: PUSH
28583: LD_INT 5
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: ST_TO_ADDR
28592: GO 29385
28594: LD_INT 12
28596: DOUBLE
28597: EQUAL
28598: IFTRUE 28602
28600: GO 28628
28602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28603: LD_ADDR_VAR 0 3
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: LD_INT 3
28613: PUSH
28614: LD_INT 4
28616: PUSH
28617: LD_INT 5
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: ST_TO_ADDR
28626: GO 29385
28628: LD_INT 13
28630: DOUBLE
28631: EQUAL
28632: IFTRUE 28636
28634: GO 28662
28636: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28637: LD_ADDR_VAR 0 3
28641: PUSH
28642: LD_INT 2
28644: PUSH
28645: LD_INT 3
28647: PUSH
28648: LD_INT 4
28650: PUSH
28651: LD_INT 5
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: ST_TO_ADDR
28660: GO 29385
28662: LD_INT 14
28664: DOUBLE
28665: EQUAL
28666: IFTRUE 28670
28668: GO 28688
28670: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28671: LD_ADDR_VAR 0 3
28675: PUSH
28676: LD_INT 4
28678: PUSH
28679: LD_INT 5
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: ST_TO_ADDR
28686: GO 29385
28688: LD_INT 6
28690: DOUBLE
28691: EQUAL
28692: IFTRUE 28696
28694: GO 28714
28696: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28697: LD_ADDR_VAR 0 3
28701: PUSH
28702: LD_INT 4
28704: PUSH
28705: LD_INT 5
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: ST_TO_ADDR
28712: GO 29385
28714: LD_INT 10
28716: DOUBLE
28717: EQUAL
28718: IFTRUE 28722
28720: GO 28740
28722: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28723: LD_ADDR_VAR 0 3
28727: PUSH
28728: LD_INT 4
28730: PUSH
28731: LD_INT 5
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: ST_TO_ADDR
28738: GO 29385
28740: LD_INT 22
28742: DOUBLE
28743: EQUAL
28744: IFTRUE 28748
28746: GO 28774
28748: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28749: LD_ADDR_VAR 0 3
28753: PUSH
28754: LD_INT 11
28756: PUSH
28757: LD_INT 12
28759: PUSH
28760: LD_INT 13
28762: PUSH
28763: LD_INT 14
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: ST_TO_ADDR
28772: GO 29385
28774: LD_INT 23
28776: DOUBLE
28777: EQUAL
28778: IFTRUE 28782
28780: GO 28808
28782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28783: LD_ADDR_VAR 0 3
28787: PUSH
28788: LD_INT 11
28790: PUSH
28791: LD_INT 12
28793: PUSH
28794: LD_INT 13
28796: PUSH
28797: LD_INT 14
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: ST_TO_ADDR
28806: GO 29385
28808: LD_INT 24
28810: DOUBLE
28811: EQUAL
28812: IFTRUE 28816
28814: GO 28842
28816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28817: LD_ADDR_VAR 0 3
28821: PUSH
28822: LD_INT 11
28824: PUSH
28825: LD_INT 12
28827: PUSH
28828: LD_INT 13
28830: PUSH
28831: LD_INT 14
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: ST_TO_ADDR
28840: GO 29385
28842: LD_INT 30
28844: DOUBLE
28845: EQUAL
28846: IFTRUE 28850
28848: GO 28876
28850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28851: LD_ADDR_VAR 0 3
28855: PUSH
28856: LD_INT 11
28858: PUSH
28859: LD_INT 12
28861: PUSH
28862: LD_INT 13
28864: PUSH
28865: LD_INT 14
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: ST_TO_ADDR
28874: GO 29385
28876: LD_INT 25
28878: DOUBLE
28879: EQUAL
28880: IFTRUE 28884
28882: GO 28902
28884: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28885: LD_ADDR_VAR 0 3
28889: PUSH
28890: LD_INT 13
28892: PUSH
28893: LD_INT 14
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: ST_TO_ADDR
28900: GO 29385
28902: LD_INT 27
28904: DOUBLE
28905: EQUAL
28906: IFTRUE 28910
28908: GO 28928
28910: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28911: LD_ADDR_VAR 0 3
28915: PUSH
28916: LD_INT 13
28918: PUSH
28919: LD_INT 14
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: ST_TO_ADDR
28926: GO 29385
28928: LD_EXP 23
28932: DOUBLE
28933: EQUAL
28934: IFTRUE 28938
28936: GO 28964
28938: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28939: LD_ADDR_VAR 0 3
28943: PUSH
28944: LD_INT 11
28946: PUSH
28947: LD_INT 12
28949: PUSH
28950: LD_INT 13
28952: PUSH
28953: LD_INT 14
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: ST_TO_ADDR
28962: GO 29385
28964: LD_INT 28
28966: DOUBLE
28967: EQUAL
28968: IFTRUE 28972
28970: GO 28990
28972: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28973: LD_ADDR_VAR 0 3
28977: PUSH
28978: LD_INT 13
28980: PUSH
28981: LD_INT 14
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: ST_TO_ADDR
28988: GO 29385
28990: LD_INT 29
28992: DOUBLE
28993: EQUAL
28994: IFTRUE 28998
28996: GO 29016
28998: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28999: LD_ADDR_VAR 0 3
29003: PUSH
29004: LD_INT 13
29006: PUSH
29007: LD_INT 14
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: ST_TO_ADDR
29014: GO 29385
29016: LD_INT 31
29018: DOUBLE
29019: EQUAL
29020: IFTRUE 29024
29022: GO 29042
29024: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29025: LD_ADDR_VAR 0 3
29029: PUSH
29030: LD_INT 13
29032: PUSH
29033: LD_INT 14
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: ST_TO_ADDR
29040: GO 29385
29042: LD_INT 26
29044: DOUBLE
29045: EQUAL
29046: IFTRUE 29050
29048: GO 29068
29050: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29051: LD_ADDR_VAR 0 3
29055: PUSH
29056: LD_INT 13
29058: PUSH
29059: LD_INT 14
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: ST_TO_ADDR
29066: GO 29385
29068: LD_INT 42
29070: DOUBLE
29071: EQUAL
29072: IFTRUE 29076
29074: GO 29102
29076: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29077: LD_ADDR_VAR 0 3
29081: PUSH
29082: LD_INT 21
29084: PUSH
29085: LD_INT 22
29087: PUSH
29088: LD_INT 23
29090: PUSH
29091: LD_INT 24
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: ST_TO_ADDR
29100: GO 29385
29102: LD_INT 43
29104: DOUBLE
29105: EQUAL
29106: IFTRUE 29110
29108: GO 29136
29110: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29111: LD_ADDR_VAR 0 3
29115: PUSH
29116: LD_INT 21
29118: PUSH
29119: LD_INT 22
29121: PUSH
29122: LD_INT 23
29124: PUSH
29125: LD_INT 24
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: ST_TO_ADDR
29134: GO 29385
29136: LD_INT 44
29138: DOUBLE
29139: EQUAL
29140: IFTRUE 29144
29142: GO 29170
29144: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29145: LD_ADDR_VAR 0 3
29149: PUSH
29150: LD_INT 21
29152: PUSH
29153: LD_INT 22
29155: PUSH
29156: LD_INT 23
29158: PUSH
29159: LD_INT 24
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: ST_TO_ADDR
29168: GO 29385
29170: LD_INT 45
29172: DOUBLE
29173: EQUAL
29174: IFTRUE 29178
29176: GO 29204
29178: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29179: LD_ADDR_VAR 0 3
29183: PUSH
29184: LD_INT 21
29186: PUSH
29187: LD_INT 22
29189: PUSH
29190: LD_INT 23
29192: PUSH
29193: LD_INT 24
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: ST_TO_ADDR
29202: GO 29385
29204: LD_INT 49
29206: DOUBLE
29207: EQUAL
29208: IFTRUE 29212
29210: GO 29238
29212: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29213: LD_ADDR_VAR 0 3
29217: PUSH
29218: LD_INT 21
29220: PUSH
29221: LD_INT 22
29223: PUSH
29224: LD_INT 23
29226: PUSH
29227: LD_INT 24
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: ST_TO_ADDR
29236: GO 29385
29238: LD_INT 51
29240: DOUBLE
29241: EQUAL
29242: IFTRUE 29246
29244: GO 29272
29246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29247: LD_ADDR_VAR 0 3
29251: PUSH
29252: LD_INT 21
29254: PUSH
29255: LD_INT 22
29257: PUSH
29258: LD_INT 23
29260: PUSH
29261: LD_INT 24
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: ST_TO_ADDR
29270: GO 29385
29272: LD_INT 52
29274: DOUBLE
29275: EQUAL
29276: IFTRUE 29280
29278: GO 29306
29280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29281: LD_ADDR_VAR 0 3
29285: PUSH
29286: LD_INT 21
29288: PUSH
29289: LD_INT 22
29291: PUSH
29292: LD_INT 23
29294: PUSH
29295: LD_INT 24
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: ST_TO_ADDR
29304: GO 29385
29306: LD_INT 53
29308: DOUBLE
29309: EQUAL
29310: IFTRUE 29314
29312: GO 29332
29314: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29315: LD_ADDR_VAR 0 3
29319: PUSH
29320: LD_INT 23
29322: PUSH
29323: LD_INT 24
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: ST_TO_ADDR
29330: GO 29385
29332: LD_INT 46
29334: DOUBLE
29335: EQUAL
29336: IFTRUE 29340
29338: GO 29358
29340: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29341: LD_ADDR_VAR 0 3
29345: PUSH
29346: LD_INT 23
29348: PUSH
29349: LD_INT 24
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: ST_TO_ADDR
29356: GO 29385
29358: LD_INT 47
29360: DOUBLE
29361: EQUAL
29362: IFTRUE 29366
29364: GO 29384
29366: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29367: LD_ADDR_VAR 0 3
29371: PUSH
29372: LD_INT 23
29374: PUSH
29375: LD_INT 24
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: ST_TO_ADDR
29382: GO 29385
29384: POP
// result := ( chassis in result ) ;
29385: LD_ADDR_VAR 0 3
29389: PUSH
29390: LD_VAR 0 1
29394: PUSH
29395: LD_VAR 0 3
29399: IN
29400: ST_TO_ADDR
// end ;
29401: LD_VAR 0 3
29405: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29406: LD_INT 0
29408: PPUSH
29409: PPUSH
29410: PPUSH
29411: PPUSH
29412: PPUSH
29413: PPUSH
29414: PPUSH
// result := array ;
29415: LD_ADDR_VAR 0 5
29419: PUSH
29420: LD_VAR 0 1
29424: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29425: LD_VAR 0 1
29429: NOT
29430: PUSH
29431: LD_VAR 0 2
29435: NOT
29436: OR
29437: PUSH
29438: LD_VAR 0 3
29442: NOT
29443: OR
29444: PUSH
29445: LD_VAR 0 2
29449: PUSH
29450: LD_VAR 0 1
29454: GREATER
29455: OR
29456: PUSH
29457: LD_VAR 0 3
29461: PUSH
29462: LD_VAR 0 1
29466: GREATER
29467: OR
29468: IFFALSE 29472
// exit ;
29470: GO 29768
// if direction then
29472: LD_VAR 0 4
29476: IFFALSE 29540
// begin d := 1 ;
29478: LD_ADDR_VAR 0 9
29482: PUSH
29483: LD_INT 1
29485: ST_TO_ADDR
// if i_from > i_to then
29486: LD_VAR 0 2
29490: PUSH
29491: LD_VAR 0 3
29495: GREATER
29496: IFFALSE 29522
// length := ( array - i_from ) + i_to else
29498: LD_ADDR_VAR 0 11
29502: PUSH
29503: LD_VAR 0 1
29507: PUSH
29508: LD_VAR 0 2
29512: MINUS
29513: PUSH
29514: LD_VAR 0 3
29518: PLUS
29519: ST_TO_ADDR
29520: GO 29538
// length := i_to - i_from ;
29522: LD_ADDR_VAR 0 11
29526: PUSH
29527: LD_VAR 0 3
29531: PUSH
29532: LD_VAR 0 2
29536: MINUS
29537: ST_TO_ADDR
// end else
29538: GO 29601
// begin d := - 1 ;
29540: LD_ADDR_VAR 0 9
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: ST_TO_ADDR
// if i_from > i_to then
29549: LD_VAR 0 2
29553: PUSH
29554: LD_VAR 0 3
29558: GREATER
29559: IFFALSE 29579
// length := i_from - i_to else
29561: LD_ADDR_VAR 0 11
29565: PUSH
29566: LD_VAR 0 2
29570: PUSH
29571: LD_VAR 0 3
29575: MINUS
29576: ST_TO_ADDR
29577: GO 29601
// length := ( array - i_to ) + i_from ;
29579: LD_ADDR_VAR 0 11
29583: PUSH
29584: LD_VAR 0 1
29588: PUSH
29589: LD_VAR 0 3
29593: MINUS
29594: PUSH
29595: LD_VAR 0 2
29599: PLUS
29600: ST_TO_ADDR
// end ; if not length then
29601: LD_VAR 0 11
29605: NOT
29606: IFFALSE 29610
// exit ;
29608: GO 29768
// tmp := array ;
29610: LD_ADDR_VAR 0 10
29614: PUSH
29615: LD_VAR 0 1
29619: ST_TO_ADDR
// for i = 1 to length do
29620: LD_ADDR_VAR 0 6
29624: PUSH
29625: DOUBLE
29626: LD_INT 1
29628: DEC
29629: ST_TO_ADDR
29630: LD_VAR 0 11
29634: PUSH
29635: FOR_TO
29636: IFFALSE 29756
// begin for j = 1 to array do
29638: LD_ADDR_VAR 0 7
29642: PUSH
29643: DOUBLE
29644: LD_INT 1
29646: DEC
29647: ST_TO_ADDR
29648: LD_VAR 0 1
29652: PUSH
29653: FOR_TO
29654: IFFALSE 29742
// begin k := j + d ;
29656: LD_ADDR_VAR 0 8
29660: PUSH
29661: LD_VAR 0 7
29665: PUSH
29666: LD_VAR 0 9
29670: PLUS
29671: ST_TO_ADDR
// if k > array then
29672: LD_VAR 0 8
29676: PUSH
29677: LD_VAR 0 1
29681: GREATER
29682: IFFALSE 29692
// k := 1 ;
29684: LD_ADDR_VAR 0 8
29688: PUSH
29689: LD_INT 1
29691: ST_TO_ADDR
// if not k then
29692: LD_VAR 0 8
29696: NOT
29697: IFFALSE 29709
// k := array ;
29699: LD_ADDR_VAR 0 8
29703: PUSH
29704: LD_VAR 0 1
29708: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29709: LD_ADDR_VAR 0 10
29713: PUSH
29714: LD_VAR 0 10
29718: PPUSH
29719: LD_VAR 0 8
29723: PPUSH
29724: LD_VAR 0 1
29728: PUSH
29729: LD_VAR 0 7
29733: ARRAY
29734: PPUSH
29735: CALL_OW 1
29739: ST_TO_ADDR
// end ;
29740: GO 29653
29742: POP
29743: POP
// array := tmp ;
29744: LD_ADDR_VAR 0 1
29748: PUSH
29749: LD_VAR 0 10
29753: ST_TO_ADDR
// end ;
29754: GO 29635
29756: POP
29757: POP
// result := array ;
29758: LD_ADDR_VAR 0 5
29762: PUSH
29763: LD_VAR 0 1
29767: ST_TO_ADDR
// end ;
29768: LD_VAR 0 5
29772: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29773: LD_INT 0
29775: PPUSH
29776: PPUSH
// result := 0 ;
29777: LD_ADDR_VAR 0 3
29781: PUSH
29782: LD_INT 0
29784: ST_TO_ADDR
// if not array or not value in array then
29785: LD_VAR 0 1
29789: NOT
29790: PUSH
29791: LD_VAR 0 2
29795: PUSH
29796: LD_VAR 0 1
29800: IN
29801: NOT
29802: OR
29803: IFFALSE 29807
// exit ;
29805: GO 29861
// for i = 1 to array do
29807: LD_ADDR_VAR 0 4
29811: PUSH
29812: DOUBLE
29813: LD_INT 1
29815: DEC
29816: ST_TO_ADDR
29817: LD_VAR 0 1
29821: PUSH
29822: FOR_TO
29823: IFFALSE 29859
// if value = array [ i ] then
29825: LD_VAR 0 2
29829: PUSH
29830: LD_VAR 0 1
29834: PUSH
29835: LD_VAR 0 4
29839: ARRAY
29840: EQUAL
29841: IFFALSE 29857
// begin result := i ;
29843: LD_ADDR_VAR 0 3
29847: PUSH
29848: LD_VAR 0 4
29852: ST_TO_ADDR
// exit ;
29853: POP
29854: POP
29855: GO 29861
// end ;
29857: GO 29822
29859: POP
29860: POP
// end ;
29861: LD_VAR 0 3
29865: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29866: LD_INT 0
29868: PPUSH
// vc_chassis := chassis ;
29869: LD_ADDR_OWVAR 37
29873: PUSH
29874: LD_VAR 0 1
29878: ST_TO_ADDR
// vc_engine := engine ;
29879: LD_ADDR_OWVAR 39
29883: PUSH
29884: LD_VAR 0 2
29888: ST_TO_ADDR
// vc_control := control ;
29889: LD_ADDR_OWVAR 38
29893: PUSH
29894: LD_VAR 0 3
29898: ST_TO_ADDR
// vc_weapon := weapon ;
29899: LD_ADDR_OWVAR 40
29903: PUSH
29904: LD_VAR 0 4
29908: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29909: LD_ADDR_OWVAR 41
29913: PUSH
29914: LD_VAR 0 5
29918: ST_TO_ADDR
// end ;
29919: LD_VAR 0 6
29923: RET
// export function WantPlant ( unit ) ; var task ; begin
29924: LD_INT 0
29926: PPUSH
29927: PPUSH
// result := false ;
29928: LD_ADDR_VAR 0 2
29932: PUSH
29933: LD_INT 0
29935: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29936: LD_ADDR_VAR 0 3
29940: PUSH
29941: LD_VAR 0 1
29945: PPUSH
29946: CALL_OW 437
29950: ST_TO_ADDR
// if task then
29951: LD_VAR 0 3
29955: IFFALSE 29983
// if task [ 1 ] [ 1 ] = p then
29957: LD_VAR 0 3
29961: PUSH
29962: LD_INT 1
29964: ARRAY
29965: PUSH
29966: LD_INT 1
29968: ARRAY
29969: PUSH
29970: LD_STRING p
29972: EQUAL
29973: IFFALSE 29983
// result := true ;
29975: LD_ADDR_VAR 0 2
29979: PUSH
29980: LD_INT 1
29982: ST_TO_ADDR
// end ;
29983: LD_VAR 0 2
29987: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29988: LD_INT 0
29990: PPUSH
29991: PPUSH
29992: PPUSH
29993: PPUSH
// if pos < 1 then
29994: LD_VAR 0 2
29998: PUSH
29999: LD_INT 1
30001: LESS
30002: IFFALSE 30006
// exit ;
30004: GO 30309
// if pos = 1 then
30006: LD_VAR 0 2
30010: PUSH
30011: LD_INT 1
30013: EQUAL
30014: IFFALSE 30047
// result := Replace ( arr , pos [ 1 ] , value ) else
30016: LD_ADDR_VAR 0 4
30020: PUSH
30021: LD_VAR 0 1
30025: PPUSH
30026: LD_VAR 0 2
30030: PUSH
30031: LD_INT 1
30033: ARRAY
30034: PPUSH
30035: LD_VAR 0 3
30039: PPUSH
30040: CALL_OW 1
30044: ST_TO_ADDR
30045: GO 30309
// begin tmp := arr ;
30047: LD_ADDR_VAR 0 6
30051: PUSH
30052: LD_VAR 0 1
30056: ST_TO_ADDR
// s_arr := [ tmp ] ;
30057: LD_ADDR_VAR 0 7
30061: PUSH
30062: LD_VAR 0 6
30066: PUSH
30067: EMPTY
30068: LIST
30069: ST_TO_ADDR
// for i = 1 to pos - 1 do
30070: LD_ADDR_VAR 0 5
30074: PUSH
30075: DOUBLE
30076: LD_INT 1
30078: DEC
30079: ST_TO_ADDR
30080: LD_VAR 0 2
30084: PUSH
30085: LD_INT 1
30087: MINUS
30088: PUSH
30089: FOR_TO
30090: IFFALSE 30135
// begin tmp := tmp [ pos [ i ] ] ;
30092: LD_ADDR_VAR 0 6
30096: PUSH
30097: LD_VAR 0 6
30101: PUSH
30102: LD_VAR 0 2
30106: PUSH
30107: LD_VAR 0 5
30111: ARRAY
30112: ARRAY
30113: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30114: LD_ADDR_VAR 0 7
30118: PUSH
30119: LD_VAR 0 7
30123: PUSH
30124: LD_VAR 0 6
30128: PUSH
30129: EMPTY
30130: LIST
30131: ADD
30132: ST_TO_ADDR
// end ;
30133: GO 30089
30135: POP
30136: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30137: LD_ADDR_VAR 0 6
30141: PUSH
30142: LD_VAR 0 6
30146: PPUSH
30147: LD_VAR 0 2
30151: PUSH
30152: LD_VAR 0 2
30156: ARRAY
30157: PPUSH
30158: LD_VAR 0 3
30162: PPUSH
30163: CALL_OW 1
30167: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30168: LD_ADDR_VAR 0 7
30172: PUSH
30173: LD_VAR 0 7
30177: PPUSH
30178: LD_VAR 0 7
30182: PPUSH
30183: LD_VAR 0 6
30187: PPUSH
30188: CALL_OW 1
30192: ST_TO_ADDR
// for i = s_arr downto 2 do
30193: LD_ADDR_VAR 0 5
30197: PUSH
30198: DOUBLE
30199: LD_VAR 0 7
30203: INC
30204: ST_TO_ADDR
30205: LD_INT 2
30207: PUSH
30208: FOR_DOWNTO
30209: IFFALSE 30293
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30211: LD_ADDR_VAR 0 6
30215: PUSH
30216: LD_VAR 0 7
30220: PUSH
30221: LD_VAR 0 5
30225: PUSH
30226: LD_INT 1
30228: MINUS
30229: ARRAY
30230: PPUSH
30231: LD_VAR 0 2
30235: PUSH
30236: LD_VAR 0 5
30240: PUSH
30241: LD_INT 1
30243: MINUS
30244: ARRAY
30245: PPUSH
30246: LD_VAR 0 7
30250: PUSH
30251: LD_VAR 0 5
30255: ARRAY
30256: PPUSH
30257: CALL_OW 1
30261: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30262: LD_ADDR_VAR 0 7
30266: PUSH
30267: LD_VAR 0 7
30271: PPUSH
30272: LD_VAR 0 5
30276: PUSH
30277: LD_INT 1
30279: MINUS
30280: PPUSH
30281: LD_VAR 0 6
30285: PPUSH
30286: CALL_OW 1
30290: ST_TO_ADDR
// end ;
30291: GO 30208
30293: POP
30294: POP
// result := s_arr [ 1 ] ;
30295: LD_ADDR_VAR 0 4
30299: PUSH
30300: LD_VAR 0 7
30304: PUSH
30305: LD_INT 1
30307: ARRAY
30308: ST_TO_ADDR
// end ; end ;
30309: LD_VAR 0 4
30313: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30314: LD_INT 0
30316: PPUSH
30317: PPUSH
// if not list then
30318: LD_VAR 0 1
30322: NOT
30323: IFFALSE 30327
// exit ;
30325: GO 30418
// i := list [ pos1 ] ;
30327: LD_ADDR_VAR 0 5
30331: PUSH
30332: LD_VAR 0 1
30336: PUSH
30337: LD_VAR 0 2
30341: ARRAY
30342: ST_TO_ADDR
// if not i then
30343: LD_VAR 0 5
30347: NOT
30348: IFFALSE 30352
// exit ;
30350: GO 30418
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30352: LD_ADDR_VAR 0 1
30356: PUSH
30357: LD_VAR 0 1
30361: PPUSH
30362: LD_VAR 0 2
30366: PPUSH
30367: LD_VAR 0 1
30371: PUSH
30372: LD_VAR 0 3
30376: ARRAY
30377: PPUSH
30378: CALL_OW 1
30382: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30383: LD_ADDR_VAR 0 1
30387: PUSH
30388: LD_VAR 0 1
30392: PPUSH
30393: LD_VAR 0 3
30397: PPUSH
30398: LD_VAR 0 5
30402: PPUSH
30403: CALL_OW 1
30407: ST_TO_ADDR
// result := list ;
30408: LD_ADDR_VAR 0 4
30412: PUSH
30413: LD_VAR 0 1
30417: ST_TO_ADDR
// end ;
30418: LD_VAR 0 4
30422: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30423: LD_INT 0
30425: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30426: LD_ADDR_VAR 0 5
30430: PUSH
30431: LD_VAR 0 1
30435: PPUSH
30436: CALL_OW 250
30440: PPUSH
30441: LD_VAR 0 1
30445: PPUSH
30446: CALL_OW 251
30450: PPUSH
30451: LD_VAR 0 2
30455: PPUSH
30456: LD_VAR 0 3
30460: PPUSH
30461: LD_VAR 0 4
30465: PPUSH
30466: CALL 30476 0 5
30470: ST_TO_ADDR
// end ;
30471: LD_VAR 0 5
30475: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30476: LD_INT 0
30478: PPUSH
30479: PPUSH
30480: PPUSH
30481: PPUSH
// if not list then
30482: LD_VAR 0 3
30486: NOT
30487: IFFALSE 30491
// exit ;
30489: GO 30879
// result := [ ] ;
30491: LD_ADDR_VAR 0 6
30495: PUSH
30496: EMPTY
30497: ST_TO_ADDR
// for i in list do
30498: LD_ADDR_VAR 0 7
30502: PUSH
30503: LD_VAR 0 3
30507: PUSH
30508: FOR_IN
30509: IFFALSE 30711
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30511: LD_ADDR_VAR 0 9
30515: PUSH
30516: LD_VAR 0 7
30520: PPUSH
30521: LD_VAR 0 1
30525: PPUSH
30526: LD_VAR 0 2
30530: PPUSH
30531: CALL_OW 297
30535: ST_TO_ADDR
// if not result then
30536: LD_VAR 0 6
30540: NOT
30541: IFFALSE 30567
// result := [ [ i , tmp ] ] else
30543: LD_ADDR_VAR 0 6
30547: PUSH
30548: LD_VAR 0 7
30552: PUSH
30553: LD_VAR 0 9
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: EMPTY
30563: LIST
30564: ST_TO_ADDR
30565: GO 30709
// begin if result [ result ] [ 2 ] < tmp then
30567: LD_VAR 0 6
30571: PUSH
30572: LD_VAR 0 6
30576: ARRAY
30577: PUSH
30578: LD_INT 2
30580: ARRAY
30581: PUSH
30582: LD_VAR 0 9
30586: LESS
30587: IFFALSE 30629
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30589: LD_ADDR_VAR 0 6
30593: PUSH
30594: LD_VAR 0 6
30598: PPUSH
30599: LD_VAR 0 6
30603: PUSH
30604: LD_INT 1
30606: PLUS
30607: PPUSH
30608: LD_VAR 0 7
30612: PUSH
30613: LD_VAR 0 9
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: PPUSH
30622: CALL_OW 2
30626: ST_TO_ADDR
30627: GO 30709
// for j = 1 to result do
30629: LD_ADDR_VAR 0 8
30633: PUSH
30634: DOUBLE
30635: LD_INT 1
30637: DEC
30638: ST_TO_ADDR
30639: LD_VAR 0 6
30643: PUSH
30644: FOR_TO
30645: IFFALSE 30707
// begin if tmp < result [ j ] [ 2 ] then
30647: LD_VAR 0 9
30651: PUSH
30652: LD_VAR 0 6
30656: PUSH
30657: LD_VAR 0 8
30661: ARRAY
30662: PUSH
30663: LD_INT 2
30665: ARRAY
30666: LESS
30667: IFFALSE 30705
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30669: LD_ADDR_VAR 0 6
30673: PUSH
30674: LD_VAR 0 6
30678: PPUSH
30679: LD_VAR 0 8
30683: PPUSH
30684: LD_VAR 0 7
30688: PUSH
30689: LD_VAR 0 9
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PPUSH
30698: CALL_OW 2
30702: ST_TO_ADDR
// break ;
30703: GO 30707
// end ; end ;
30705: GO 30644
30707: POP
30708: POP
// end ; end ;
30709: GO 30508
30711: POP
30712: POP
// if result and not asc then
30713: LD_VAR 0 6
30717: PUSH
30718: LD_VAR 0 4
30722: NOT
30723: AND
30724: IFFALSE 30799
// begin tmp := result ;
30726: LD_ADDR_VAR 0 9
30730: PUSH
30731: LD_VAR 0 6
30735: ST_TO_ADDR
// for i = tmp downto 1 do
30736: LD_ADDR_VAR 0 7
30740: PUSH
30741: DOUBLE
30742: LD_VAR 0 9
30746: INC
30747: ST_TO_ADDR
30748: LD_INT 1
30750: PUSH
30751: FOR_DOWNTO
30752: IFFALSE 30797
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30754: LD_ADDR_VAR 0 6
30758: PUSH
30759: LD_VAR 0 6
30763: PPUSH
30764: LD_VAR 0 9
30768: PUSH
30769: LD_VAR 0 7
30773: MINUS
30774: PUSH
30775: LD_INT 1
30777: PLUS
30778: PPUSH
30779: LD_VAR 0 9
30783: PUSH
30784: LD_VAR 0 7
30788: ARRAY
30789: PPUSH
30790: CALL_OW 1
30794: ST_TO_ADDR
30795: GO 30751
30797: POP
30798: POP
// end ; tmp := [ ] ;
30799: LD_ADDR_VAR 0 9
30803: PUSH
30804: EMPTY
30805: ST_TO_ADDR
// if mode then
30806: LD_VAR 0 5
30810: IFFALSE 30879
// begin for i = 1 to result do
30812: LD_ADDR_VAR 0 7
30816: PUSH
30817: DOUBLE
30818: LD_INT 1
30820: DEC
30821: ST_TO_ADDR
30822: LD_VAR 0 6
30826: PUSH
30827: FOR_TO
30828: IFFALSE 30867
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30830: LD_ADDR_VAR 0 9
30834: PUSH
30835: LD_VAR 0 9
30839: PPUSH
30840: LD_VAR 0 7
30844: PPUSH
30845: LD_VAR 0 6
30849: PUSH
30850: LD_VAR 0 7
30854: ARRAY
30855: PUSH
30856: LD_INT 1
30858: ARRAY
30859: PPUSH
30860: CALL_OW 1
30864: ST_TO_ADDR
30865: GO 30827
30867: POP
30868: POP
// result := tmp ;
30869: LD_ADDR_VAR 0 6
30873: PUSH
30874: LD_VAR 0 9
30878: ST_TO_ADDR
// end ; end ;
30879: LD_VAR 0 6
30883: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30884: LD_INT 0
30886: PPUSH
30887: PPUSH
30888: PPUSH
30889: PPUSH
30890: PPUSH
30891: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30892: LD_ADDR_VAR 0 5
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: EMPTY
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: ST_TO_ADDR
// if not x or not y then
30914: LD_VAR 0 2
30918: NOT
30919: PUSH
30920: LD_VAR 0 3
30924: NOT
30925: OR
30926: IFFALSE 30930
// exit ;
30928: GO 32582
// if not range then
30930: LD_VAR 0 4
30934: NOT
30935: IFFALSE 30945
// range := 10 ;
30937: LD_ADDR_VAR 0 4
30941: PUSH
30942: LD_INT 10
30944: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30945: LD_ADDR_VAR 0 8
30949: PUSH
30950: LD_INT 81
30952: PUSH
30953: LD_VAR 0 1
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 92
30964: PUSH
30965: LD_VAR 0 2
30969: PUSH
30970: LD_VAR 0 3
30974: PUSH
30975: LD_VAR 0 4
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 3
30988: PUSH
30989: LD_INT 21
30991: PUSH
30992: LD_INT 3
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: LIST
31007: PPUSH
31008: CALL_OW 69
31012: ST_TO_ADDR
// if not tmp then
31013: LD_VAR 0 8
31017: NOT
31018: IFFALSE 31022
// exit ;
31020: GO 32582
// for i in tmp do
31022: LD_ADDR_VAR 0 6
31026: PUSH
31027: LD_VAR 0 8
31031: PUSH
31032: FOR_IN
31033: IFFALSE 32557
// begin points := [ 0 , 0 , 0 ] ;
31035: LD_ADDR_VAR 0 9
31039: PUSH
31040: LD_INT 0
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: LIST
31053: ST_TO_ADDR
// bpoints := 1 ;
31054: LD_ADDR_VAR 0 10
31058: PUSH
31059: LD_INT 1
31061: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31062: LD_VAR 0 6
31066: PPUSH
31067: CALL_OW 247
31071: PUSH
31072: LD_INT 1
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31658
31080: POP
// begin if GetClass ( i ) = 1 then
31081: LD_VAR 0 6
31085: PPUSH
31086: CALL_OW 257
31090: PUSH
31091: LD_INT 1
31093: EQUAL
31094: IFFALSE 31115
// points := [ 10 , 5 , 3 ] ;
31096: LD_ADDR_VAR 0 9
31100: PUSH
31101: LD_INT 10
31103: PUSH
31104: LD_INT 5
31106: PUSH
31107: LD_INT 3
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31115: LD_VAR 0 6
31119: PPUSH
31120: CALL_OW 257
31124: PUSH
31125: LD_INT 2
31127: PUSH
31128: LD_INT 3
31130: PUSH
31131: LD_INT 4
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: LIST
31138: IN
31139: IFFALSE 31160
// points := [ 3 , 2 , 1 ] ;
31141: LD_ADDR_VAR 0 9
31145: PUSH
31146: LD_INT 3
31148: PUSH
31149: LD_INT 2
31151: PUSH
31152: LD_INT 1
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: LIST
31159: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31160: LD_VAR 0 6
31164: PPUSH
31165: CALL_OW 257
31169: PUSH
31170: LD_INT 5
31172: EQUAL
31173: IFFALSE 31194
// points := [ 130 , 5 , 2 ] ;
31175: LD_ADDR_VAR 0 9
31179: PUSH
31180: LD_INT 130
31182: PUSH
31183: LD_INT 5
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: LIST
31193: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31194: LD_VAR 0 6
31198: PPUSH
31199: CALL_OW 257
31203: PUSH
31204: LD_INT 8
31206: EQUAL
31207: IFFALSE 31228
// points := [ 35 , 35 , 30 ] ;
31209: LD_ADDR_VAR 0 9
31213: PUSH
31214: LD_INT 35
31216: PUSH
31217: LD_INT 35
31219: PUSH
31220: LD_INT 30
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: LIST
31227: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31228: LD_VAR 0 6
31232: PPUSH
31233: CALL_OW 257
31237: PUSH
31238: LD_INT 9
31240: EQUAL
31241: IFFALSE 31262
// points := [ 20 , 55 , 40 ] ;
31243: LD_ADDR_VAR 0 9
31247: PUSH
31248: LD_INT 20
31250: PUSH
31251: LD_INT 55
31253: PUSH
31254: LD_INT 40
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: LIST
31261: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31262: LD_VAR 0 6
31266: PPUSH
31267: CALL_OW 257
31271: PUSH
31272: LD_INT 12
31274: PUSH
31275: LD_INT 16
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: IN
31282: IFFALSE 31303
// points := [ 5 , 3 , 2 ] ;
31284: LD_ADDR_VAR 0 9
31288: PUSH
31289: LD_INT 5
31291: PUSH
31292: LD_INT 3
31294: PUSH
31295: LD_INT 2
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: LIST
31302: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31303: LD_VAR 0 6
31307: PPUSH
31308: CALL_OW 257
31312: PUSH
31313: LD_INT 17
31315: EQUAL
31316: IFFALSE 31337
// points := [ 100 , 50 , 75 ] ;
31318: LD_ADDR_VAR 0 9
31322: PUSH
31323: LD_INT 100
31325: PUSH
31326: LD_INT 50
31328: PUSH
31329: LD_INT 75
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: LIST
31336: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31337: LD_VAR 0 6
31341: PPUSH
31342: CALL_OW 257
31346: PUSH
31347: LD_INT 15
31349: EQUAL
31350: IFFALSE 31371
// points := [ 10 , 5 , 3 ] ;
31352: LD_ADDR_VAR 0 9
31356: PUSH
31357: LD_INT 10
31359: PUSH
31360: LD_INT 5
31362: PUSH
31363: LD_INT 3
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31371: LD_VAR 0 6
31375: PPUSH
31376: CALL_OW 257
31380: PUSH
31381: LD_INT 14
31383: EQUAL
31384: IFFALSE 31405
// points := [ 10 , 0 , 0 ] ;
31386: LD_ADDR_VAR 0 9
31390: PUSH
31391: LD_INT 10
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31405: LD_VAR 0 6
31409: PPUSH
31410: CALL_OW 257
31414: PUSH
31415: LD_INT 11
31417: EQUAL
31418: IFFALSE 31439
// points := [ 30 , 10 , 5 ] ;
31420: LD_ADDR_VAR 0 9
31424: PUSH
31425: LD_INT 30
31427: PUSH
31428: LD_INT 10
31430: PUSH
31431: LD_INT 5
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: LIST
31438: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31439: LD_VAR 0 1
31443: PPUSH
31444: LD_INT 5
31446: PPUSH
31447: CALL_OW 321
31451: PUSH
31452: LD_INT 2
31454: EQUAL
31455: IFFALSE 31472
// bpoints := bpoints * 1.8 ;
31457: LD_ADDR_VAR 0 10
31461: PUSH
31462: LD_VAR 0 10
31466: PUSH
31467: LD_REAL  1.80000000000000E+0000
31470: MUL
31471: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31472: LD_VAR 0 6
31476: PPUSH
31477: CALL_OW 257
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: LD_INT 2
31487: PUSH
31488: LD_INT 3
31490: PUSH
31491: LD_INT 4
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: IN
31500: PUSH
31501: LD_VAR 0 1
31505: PPUSH
31506: LD_INT 51
31508: PPUSH
31509: CALL_OW 321
31513: PUSH
31514: LD_INT 2
31516: EQUAL
31517: AND
31518: IFFALSE 31535
// bpoints := bpoints * 1.2 ;
31520: LD_ADDR_VAR 0 10
31524: PUSH
31525: LD_VAR 0 10
31529: PUSH
31530: LD_REAL  1.20000000000000E+0000
31533: MUL
31534: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31535: LD_VAR 0 6
31539: PPUSH
31540: CALL_OW 257
31544: PUSH
31545: LD_INT 5
31547: PUSH
31548: LD_INT 7
31550: PUSH
31551: LD_INT 9
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: IN
31559: PUSH
31560: LD_VAR 0 1
31564: PPUSH
31565: LD_INT 52
31567: PPUSH
31568: CALL_OW 321
31572: PUSH
31573: LD_INT 2
31575: EQUAL
31576: AND
31577: IFFALSE 31594
// bpoints := bpoints * 1.5 ;
31579: LD_ADDR_VAR 0 10
31583: PUSH
31584: LD_VAR 0 10
31588: PUSH
31589: LD_REAL  1.50000000000000E+0000
31592: MUL
31593: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31594: LD_VAR 0 1
31598: PPUSH
31599: LD_INT 66
31601: PPUSH
31602: CALL_OW 321
31606: PUSH
31607: LD_INT 2
31609: EQUAL
31610: IFFALSE 31627
// bpoints := bpoints * 1.1 ;
31612: LD_ADDR_VAR 0 10
31616: PUSH
31617: LD_VAR 0 10
31621: PUSH
31622: LD_REAL  1.10000000000000E+0000
31625: MUL
31626: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31627: LD_ADDR_VAR 0 10
31631: PUSH
31632: LD_VAR 0 10
31636: PUSH
31637: LD_VAR 0 6
31641: PPUSH
31642: LD_INT 1
31644: PPUSH
31645: CALL_OW 259
31649: PUSH
31650: LD_REAL  1.15000000000000E+0000
31653: MUL
31654: MUL
31655: ST_TO_ADDR
// end ; unit_vehicle :
31656: GO 32486
31658: LD_INT 2
31660: DOUBLE
31661: EQUAL
31662: IFTRUE 31666
31664: GO 32474
31666: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31667: LD_VAR 0 6
31671: PPUSH
31672: CALL_OW 264
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: LD_INT 42
31682: PUSH
31683: LD_INT 24
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: LIST
31690: IN
31691: IFFALSE 31712
// points := [ 25 , 5 , 3 ] ;
31693: LD_ADDR_VAR 0 9
31697: PUSH
31698: LD_INT 25
31700: PUSH
31701: LD_INT 5
31703: PUSH
31704: LD_INT 3
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31712: LD_VAR 0 6
31716: PPUSH
31717: CALL_OW 264
31721: PUSH
31722: LD_INT 4
31724: PUSH
31725: LD_INT 43
31727: PUSH
31728: LD_INT 25
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: LIST
31735: IN
31736: IFFALSE 31757
// points := [ 40 , 15 , 5 ] ;
31738: LD_ADDR_VAR 0 9
31742: PUSH
31743: LD_INT 40
31745: PUSH
31746: LD_INT 15
31748: PUSH
31749: LD_INT 5
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: LIST
31756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31757: LD_VAR 0 6
31761: PPUSH
31762: CALL_OW 264
31766: PUSH
31767: LD_INT 3
31769: PUSH
31770: LD_INT 23
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: IN
31777: IFFALSE 31798
// points := [ 7 , 25 , 8 ] ;
31779: LD_ADDR_VAR 0 9
31783: PUSH
31784: LD_INT 7
31786: PUSH
31787: LD_INT 25
31789: PUSH
31790: LD_INT 8
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: LIST
31797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31798: LD_VAR 0 6
31802: PPUSH
31803: CALL_OW 264
31807: PUSH
31808: LD_INT 5
31810: PUSH
31811: LD_INT 27
31813: PUSH
31814: LD_INT 44
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: LIST
31821: IN
31822: IFFALSE 31843
// points := [ 14 , 50 , 16 ] ;
31824: LD_ADDR_VAR 0 9
31828: PUSH
31829: LD_INT 14
31831: PUSH
31832: LD_INT 50
31834: PUSH
31835: LD_INT 16
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: LIST
31842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31843: LD_VAR 0 6
31847: PPUSH
31848: CALL_OW 264
31852: PUSH
31853: LD_INT 6
31855: PUSH
31856: LD_INT 46
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: IN
31863: IFFALSE 31884
// points := [ 32 , 120 , 70 ] ;
31865: LD_ADDR_VAR 0 9
31869: PUSH
31870: LD_INT 32
31872: PUSH
31873: LD_INT 120
31875: PUSH
31876: LD_INT 70
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31884: LD_VAR 0 6
31888: PPUSH
31889: CALL_OW 264
31893: PUSH
31894: LD_INT 7
31896: PUSH
31897: LD_INT 28
31899: PUSH
31900: LD_INT 45
31902: PUSH
31903: LD_EXP 23
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: IN
31914: IFFALSE 31935
// points := [ 35 , 20 , 45 ] ;
31916: LD_ADDR_VAR 0 9
31920: PUSH
31921: LD_INT 35
31923: PUSH
31924: LD_INT 20
31926: PUSH
31927: LD_INT 45
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: LIST
31934: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31935: LD_VAR 0 6
31939: PPUSH
31940: CALL_OW 264
31944: PUSH
31945: LD_INT 47
31947: PUSH
31948: EMPTY
31949: LIST
31950: IN
31951: IFFALSE 31972
// points := [ 67 , 45 , 75 ] ;
31953: LD_ADDR_VAR 0 9
31957: PUSH
31958: LD_INT 67
31960: PUSH
31961: LD_INT 45
31963: PUSH
31964: LD_INT 75
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: LIST
31971: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31972: LD_VAR 0 6
31976: PPUSH
31977: CALL_OW 264
31981: PUSH
31982: LD_INT 26
31984: PUSH
31985: EMPTY
31986: LIST
31987: IN
31988: IFFALSE 32009
// points := [ 120 , 30 , 80 ] ;
31990: LD_ADDR_VAR 0 9
31994: PUSH
31995: LD_INT 120
31997: PUSH
31998: LD_INT 30
32000: PUSH
32001: LD_INT 80
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32009: LD_VAR 0 6
32013: PPUSH
32014: CALL_OW 264
32018: PUSH
32019: LD_INT 22
32021: PUSH
32022: EMPTY
32023: LIST
32024: IN
32025: IFFALSE 32046
// points := [ 40 , 1 , 1 ] ;
32027: LD_ADDR_VAR 0 9
32031: PUSH
32032: LD_INT 40
32034: PUSH
32035: LD_INT 1
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: LIST
32045: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32046: LD_VAR 0 6
32050: PPUSH
32051: CALL_OW 264
32055: PUSH
32056: LD_INT 29
32058: PUSH
32059: EMPTY
32060: LIST
32061: IN
32062: IFFALSE 32083
// points := [ 70 , 200 , 400 ] ;
32064: LD_ADDR_VAR 0 9
32068: PUSH
32069: LD_INT 70
32071: PUSH
32072: LD_INT 200
32074: PUSH
32075: LD_INT 400
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32083: LD_VAR 0 6
32087: PPUSH
32088: CALL_OW 264
32092: PUSH
32093: LD_INT 14
32095: PUSH
32096: LD_INT 53
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: IN
32103: IFFALSE 32124
// points := [ 40 , 10 , 20 ] ;
32105: LD_ADDR_VAR 0 9
32109: PUSH
32110: LD_INT 40
32112: PUSH
32113: LD_INT 10
32115: PUSH
32116: LD_INT 20
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: LIST
32123: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32124: LD_VAR 0 6
32128: PPUSH
32129: CALL_OW 264
32133: PUSH
32134: LD_INT 9
32136: PUSH
32137: EMPTY
32138: LIST
32139: IN
32140: IFFALSE 32161
// points := [ 5 , 70 , 20 ] ;
32142: LD_ADDR_VAR 0 9
32146: PUSH
32147: LD_INT 5
32149: PUSH
32150: LD_INT 70
32152: PUSH
32153: LD_INT 20
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: LIST
32160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32161: LD_VAR 0 6
32165: PPUSH
32166: CALL_OW 264
32170: PUSH
32171: LD_INT 10
32173: PUSH
32174: EMPTY
32175: LIST
32176: IN
32177: IFFALSE 32198
// points := [ 35 , 110 , 70 ] ;
32179: LD_ADDR_VAR 0 9
32183: PUSH
32184: LD_INT 35
32186: PUSH
32187: LD_INT 110
32189: PUSH
32190: LD_INT 70
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: LIST
32197: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32198: LD_VAR 0 6
32202: PPUSH
32203: CALL_OW 265
32207: PUSH
32208: LD_INT 25
32210: EQUAL
32211: IFFALSE 32232
// points := [ 80 , 65 , 100 ] ;
32213: LD_ADDR_VAR 0 9
32217: PUSH
32218: LD_INT 80
32220: PUSH
32221: LD_INT 65
32223: PUSH
32224: LD_INT 100
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: LIST
32231: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32232: LD_VAR 0 6
32236: PPUSH
32237: CALL_OW 263
32241: PUSH
32242: LD_INT 1
32244: EQUAL
32245: IFFALSE 32280
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32247: LD_ADDR_VAR 0 10
32251: PUSH
32252: LD_VAR 0 10
32256: PUSH
32257: LD_VAR 0 6
32261: PPUSH
32262: CALL_OW 311
32266: PPUSH
32267: LD_INT 3
32269: PPUSH
32270: CALL_OW 259
32274: PUSH
32275: LD_INT 4
32277: MUL
32278: MUL
32279: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32280: LD_VAR 0 6
32284: PPUSH
32285: CALL_OW 263
32289: PUSH
32290: LD_INT 2
32292: EQUAL
32293: IFFALSE 32344
// begin j := IsControledBy ( i ) ;
32295: LD_ADDR_VAR 0 7
32299: PUSH
32300: LD_VAR 0 6
32304: PPUSH
32305: CALL_OW 312
32309: ST_TO_ADDR
// if j then
32310: LD_VAR 0 7
32314: IFFALSE 32344
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32316: LD_ADDR_VAR 0 10
32320: PUSH
32321: LD_VAR 0 10
32325: PUSH
32326: LD_VAR 0 7
32330: PPUSH
32331: LD_INT 3
32333: PPUSH
32334: CALL_OW 259
32338: PUSH
32339: LD_INT 3
32341: MUL
32342: MUL
32343: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32344: LD_VAR 0 6
32348: PPUSH
32349: CALL_OW 264
32353: PUSH
32354: LD_INT 5
32356: PUSH
32357: LD_INT 6
32359: PUSH
32360: LD_INT 46
32362: PUSH
32363: LD_INT 44
32365: PUSH
32366: LD_INT 47
32368: PUSH
32369: LD_INT 45
32371: PUSH
32372: LD_INT 28
32374: PUSH
32375: LD_INT 7
32377: PUSH
32378: LD_INT 27
32380: PUSH
32381: LD_INT 29
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: IN
32396: PUSH
32397: LD_VAR 0 1
32401: PPUSH
32402: LD_INT 52
32404: PPUSH
32405: CALL_OW 321
32409: PUSH
32410: LD_INT 2
32412: EQUAL
32413: AND
32414: IFFALSE 32431
// bpoints := bpoints * 1.2 ;
32416: LD_ADDR_VAR 0 10
32420: PUSH
32421: LD_VAR 0 10
32425: PUSH
32426: LD_REAL  1.20000000000000E+0000
32429: MUL
32430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32431: LD_VAR 0 6
32435: PPUSH
32436: CALL_OW 264
32440: PUSH
32441: LD_INT 6
32443: PUSH
32444: LD_INT 46
32446: PUSH
32447: LD_INT 47
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: LIST
32454: IN
32455: IFFALSE 32472
// bpoints := bpoints * 1.2 ;
32457: LD_ADDR_VAR 0 10
32461: PUSH
32462: LD_VAR 0 10
32466: PUSH
32467: LD_REAL  1.20000000000000E+0000
32470: MUL
32471: ST_TO_ADDR
// end ; unit_building :
32472: GO 32486
32474: LD_INT 3
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32485
32482: POP
// ; end ;
32483: GO 32486
32485: POP
// for j = 1 to 3 do
32486: LD_ADDR_VAR 0 7
32490: PUSH
32491: DOUBLE
32492: LD_INT 1
32494: DEC
32495: ST_TO_ADDR
32496: LD_INT 3
32498: PUSH
32499: FOR_TO
32500: IFFALSE 32553
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32502: LD_ADDR_VAR 0 5
32506: PUSH
32507: LD_VAR 0 5
32511: PPUSH
32512: LD_VAR 0 7
32516: PPUSH
32517: LD_VAR 0 5
32521: PUSH
32522: LD_VAR 0 7
32526: ARRAY
32527: PUSH
32528: LD_VAR 0 9
32532: PUSH
32533: LD_VAR 0 7
32537: ARRAY
32538: PUSH
32539: LD_VAR 0 10
32543: MUL
32544: PLUS
32545: PPUSH
32546: CALL_OW 1
32550: ST_TO_ADDR
32551: GO 32499
32553: POP
32554: POP
// end ;
32555: GO 31032
32557: POP
32558: POP
// result := Replace ( result , 4 , tmp ) ;
32559: LD_ADDR_VAR 0 5
32563: PUSH
32564: LD_VAR 0 5
32568: PPUSH
32569: LD_INT 4
32571: PPUSH
32572: LD_VAR 0 8
32576: PPUSH
32577: CALL_OW 1
32581: ST_TO_ADDR
// end ;
32582: LD_VAR 0 5
32586: RET
// export function DangerAtRange ( unit , range ) ; begin
32587: LD_INT 0
32589: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32590: LD_ADDR_VAR 0 3
32594: PUSH
32595: LD_VAR 0 1
32599: PPUSH
32600: CALL_OW 255
32604: PPUSH
32605: LD_VAR 0 1
32609: PPUSH
32610: CALL_OW 250
32614: PPUSH
32615: LD_VAR 0 1
32619: PPUSH
32620: CALL_OW 251
32624: PPUSH
32625: LD_VAR 0 2
32629: PPUSH
32630: CALL 30884 0 4
32634: ST_TO_ADDR
// end ;
32635: LD_VAR 0 3
32639: RET
// export function DangerInArea ( side , area ) ; begin
32640: LD_INT 0
32642: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32643: LD_ADDR_VAR 0 3
32647: PUSH
32648: LD_VAR 0 2
32652: PPUSH
32653: LD_INT 81
32655: PUSH
32656: LD_VAR 0 1
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PPUSH
32665: CALL_OW 70
32669: ST_TO_ADDR
// end ;
32670: LD_VAR 0 3
32674: RET
// export function IsExtension ( b ) ; begin
32675: LD_INT 0
32677: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32678: LD_ADDR_VAR 0 2
32682: PUSH
32683: LD_VAR 0 1
32687: PUSH
32688: LD_INT 23
32690: PUSH
32691: LD_INT 20
32693: PUSH
32694: LD_INT 22
32696: PUSH
32697: LD_INT 17
32699: PUSH
32700: LD_INT 24
32702: PUSH
32703: LD_INT 21
32705: PUSH
32706: LD_INT 19
32708: PUSH
32709: LD_INT 16
32711: PUSH
32712: LD_INT 25
32714: PUSH
32715: LD_INT 18
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: IN
32730: ST_TO_ADDR
// end ;
32731: LD_VAR 0 2
32735: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32736: LD_INT 0
32738: PPUSH
32739: PPUSH
32740: PPUSH
// result := [ ] ;
32741: LD_ADDR_VAR 0 4
32745: PUSH
32746: EMPTY
32747: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32748: LD_ADDR_VAR 0 5
32752: PUSH
32753: LD_VAR 0 2
32757: PPUSH
32758: LD_INT 21
32760: PUSH
32761: LD_INT 3
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PPUSH
32768: CALL_OW 70
32772: ST_TO_ADDR
// if not tmp then
32773: LD_VAR 0 5
32777: NOT
32778: IFFALSE 32782
// exit ;
32780: GO 32846
// if checkLink then
32782: LD_VAR 0 3
32786: IFFALSE 32836
// begin for i in tmp do
32788: LD_ADDR_VAR 0 6
32792: PUSH
32793: LD_VAR 0 5
32797: PUSH
32798: FOR_IN
32799: IFFALSE 32834
// if GetBase ( i ) <> base then
32801: LD_VAR 0 6
32805: PPUSH
32806: CALL_OW 274
32810: PUSH
32811: LD_VAR 0 1
32815: NONEQUAL
32816: IFFALSE 32832
// ComLinkToBase ( base , i ) ;
32818: LD_VAR 0 1
32822: PPUSH
32823: LD_VAR 0 6
32827: PPUSH
32828: CALL_OW 169
32832: GO 32798
32834: POP
32835: POP
// end ; result := tmp ;
32836: LD_ADDR_VAR 0 4
32840: PUSH
32841: LD_VAR 0 5
32845: ST_TO_ADDR
// end ;
32846: LD_VAR 0 4
32850: RET
// export function ComComplete ( units , b ) ; var i ; begin
32851: LD_INT 0
32853: PPUSH
32854: PPUSH
// if not units then
32855: LD_VAR 0 1
32859: NOT
32860: IFFALSE 32864
// exit ;
32862: GO 32954
// for i in units do
32864: LD_ADDR_VAR 0 4
32868: PUSH
32869: LD_VAR 0 1
32873: PUSH
32874: FOR_IN
32875: IFFALSE 32952
// if BuildingStatus ( b ) = bs_build then
32877: LD_VAR 0 2
32881: PPUSH
32882: CALL_OW 461
32886: PUSH
32887: LD_INT 1
32889: EQUAL
32890: IFFALSE 32950
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32892: LD_VAR 0 4
32896: PPUSH
32897: LD_STRING h
32899: PUSH
32900: LD_VAR 0 2
32904: PPUSH
32905: CALL_OW 250
32909: PUSH
32910: LD_VAR 0 2
32914: PPUSH
32915: CALL_OW 251
32919: PUSH
32920: LD_VAR 0 2
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: PUSH
32943: EMPTY
32944: LIST
32945: PPUSH
32946: CALL_OW 446
32950: GO 32874
32952: POP
32953: POP
// end ;
32954: LD_VAR 0 3
32958: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32959: LD_INT 0
32961: PPUSH
32962: PPUSH
32963: PPUSH
32964: PPUSH
32965: PPUSH
32966: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32967: LD_VAR 0 1
32971: NOT
32972: PUSH
32973: LD_VAR 0 1
32977: PPUSH
32978: CALL_OW 263
32982: PUSH
32983: LD_INT 2
32985: NONEQUAL
32986: OR
32987: IFFALSE 32991
// exit ;
32989: GO 33307
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32991: LD_ADDR_VAR 0 6
32995: PUSH
32996: LD_INT 22
32998: PUSH
32999: LD_VAR 0 1
33003: PPUSH
33004: CALL_OW 255
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: LD_INT 30
33018: PUSH
33019: LD_INT 36
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 34
33028: PUSH
33029: LD_INT 31
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: LIST
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PPUSH
33045: CALL_OW 69
33049: ST_TO_ADDR
// if not tmp then
33050: LD_VAR 0 6
33054: NOT
33055: IFFALSE 33059
// exit ;
33057: GO 33307
// result := [ ] ;
33059: LD_ADDR_VAR 0 2
33063: PUSH
33064: EMPTY
33065: ST_TO_ADDR
// for i in tmp do
33066: LD_ADDR_VAR 0 3
33070: PUSH
33071: LD_VAR 0 6
33075: PUSH
33076: FOR_IN
33077: IFFALSE 33148
// begin t := UnitsInside ( i ) ;
33079: LD_ADDR_VAR 0 4
33083: PUSH
33084: LD_VAR 0 3
33088: PPUSH
33089: CALL_OW 313
33093: ST_TO_ADDR
// if t then
33094: LD_VAR 0 4
33098: IFFALSE 33146
// for j in t do
33100: LD_ADDR_VAR 0 7
33104: PUSH
33105: LD_VAR 0 4
33109: PUSH
33110: FOR_IN
33111: IFFALSE 33144
// result := Replace ( result , result + 1 , j ) ;
33113: LD_ADDR_VAR 0 2
33117: PUSH
33118: LD_VAR 0 2
33122: PPUSH
33123: LD_VAR 0 2
33127: PUSH
33128: LD_INT 1
33130: PLUS
33131: PPUSH
33132: LD_VAR 0 7
33136: PPUSH
33137: CALL_OW 1
33141: ST_TO_ADDR
33142: GO 33110
33144: POP
33145: POP
// end ;
33146: GO 33076
33148: POP
33149: POP
// if not result then
33150: LD_VAR 0 2
33154: NOT
33155: IFFALSE 33159
// exit ;
33157: GO 33307
// mech := result [ 1 ] ;
33159: LD_ADDR_VAR 0 5
33163: PUSH
33164: LD_VAR 0 2
33168: PUSH
33169: LD_INT 1
33171: ARRAY
33172: ST_TO_ADDR
// if result > 1 then
33173: LD_VAR 0 2
33177: PUSH
33178: LD_INT 1
33180: GREATER
33181: IFFALSE 33293
// begin for i = 2 to result do
33183: LD_ADDR_VAR 0 3
33187: PUSH
33188: DOUBLE
33189: LD_INT 2
33191: DEC
33192: ST_TO_ADDR
33193: LD_VAR 0 2
33197: PUSH
33198: FOR_TO
33199: IFFALSE 33291
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33201: LD_ADDR_VAR 0 4
33205: PUSH
33206: LD_VAR 0 2
33210: PUSH
33211: LD_VAR 0 3
33215: ARRAY
33216: PPUSH
33217: LD_INT 3
33219: PPUSH
33220: CALL_OW 259
33224: PUSH
33225: LD_VAR 0 2
33229: PUSH
33230: LD_VAR 0 3
33234: ARRAY
33235: PPUSH
33236: CALL_OW 432
33240: MINUS
33241: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33242: LD_VAR 0 4
33246: PUSH
33247: LD_VAR 0 5
33251: PPUSH
33252: LD_INT 3
33254: PPUSH
33255: CALL_OW 259
33259: PUSH
33260: LD_VAR 0 5
33264: PPUSH
33265: CALL_OW 432
33269: MINUS
33270: GREATEREQUAL
33271: IFFALSE 33289
// mech := result [ i ] ;
33273: LD_ADDR_VAR 0 5
33277: PUSH
33278: LD_VAR 0 2
33282: PUSH
33283: LD_VAR 0 3
33287: ARRAY
33288: ST_TO_ADDR
// end ;
33289: GO 33198
33291: POP
33292: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33293: LD_VAR 0 1
33297: PPUSH
33298: LD_VAR 0 5
33302: PPUSH
33303: CALL_OW 135
// end ;
33307: LD_VAR 0 2
33311: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33312: LD_INT 0
33314: PPUSH
33315: PPUSH
33316: PPUSH
33317: PPUSH
33318: PPUSH
33319: PPUSH
33320: PPUSH
33321: PPUSH
33322: PPUSH
33323: PPUSH
33324: PPUSH
33325: PPUSH
33326: PPUSH
// result := [ ] ;
33327: LD_ADDR_VAR 0 7
33331: PUSH
33332: EMPTY
33333: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33334: LD_VAR 0 1
33338: PPUSH
33339: CALL_OW 266
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: IN
33354: NOT
33355: IFFALSE 33359
// exit ;
33357: GO 34993
// if name then
33359: LD_VAR 0 3
33363: IFFALSE 33379
// SetBName ( base_dep , name ) ;
33365: LD_VAR 0 1
33369: PPUSH
33370: LD_VAR 0 3
33374: PPUSH
33375: CALL_OW 500
// base := GetBase ( base_dep ) ;
33379: LD_ADDR_VAR 0 15
33383: PUSH
33384: LD_VAR 0 1
33388: PPUSH
33389: CALL_OW 274
33393: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33394: LD_ADDR_VAR 0 16
33398: PUSH
33399: LD_VAR 0 1
33403: PPUSH
33404: CALL_OW 255
33408: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33409: LD_ADDR_VAR 0 17
33413: PUSH
33414: LD_VAR 0 1
33418: PPUSH
33419: CALL_OW 248
33423: ST_TO_ADDR
// if sources then
33424: LD_VAR 0 5
33428: IFFALSE 33475
// for i = 1 to 3 do
33430: LD_ADDR_VAR 0 8
33434: PUSH
33435: DOUBLE
33436: LD_INT 1
33438: DEC
33439: ST_TO_ADDR
33440: LD_INT 3
33442: PUSH
33443: FOR_TO
33444: IFFALSE 33473
// AddResourceType ( base , i , sources [ i ] ) ;
33446: LD_VAR 0 15
33450: PPUSH
33451: LD_VAR 0 8
33455: PPUSH
33456: LD_VAR 0 5
33460: PUSH
33461: LD_VAR 0 8
33465: ARRAY
33466: PPUSH
33467: CALL_OW 276
33471: GO 33443
33473: POP
33474: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33475: LD_ADDR_VAR 0 18
33479: PUSH
33480: LD_VAR 0 15
33484: PPUSH
33485: LD_VAR 0 2
33489: PPUSH
33490: LD_INT 1
33492: PPUSH
33493: CALL 32736 0 3
33497: ST_TO_ADDR
// InitHc ;
33498: CALL_OW 19
// InitUc ;
33502: CALL_OW 18
// uc_side := side ;
33506: LD_ADDR_OWVAR 20
33510: PUSH
33511: LD_VAR 0 16
33515: ST_TO_ADDR
// uc_nation := nation ;
33516: LD_ADDR_OWVAR 21
33520: PUSH
33521: LD_VAR 0 17
33525: ST_TO_ADDR
// if buildings then
33526: LD_VAR 0 18
33530: IFFALSE 34852
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33532: LD_ADDR_VAR 0 19
33536: PUSH
33537: LD_VAR 0 18
33541: PPUSH
33542: LD_INT 2
33544: PUSH
33545: LD_INT 30
33547: PUSH
33548: LD_INT 29
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 30
33557: PUSH
33558: LD_INT 30
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: PPUSH
33570: CALL_OW 72
33574: ST_TO_ADDR
// if tmp then
33575: LD_VAR 0 19
33579: IFFALSE 33627
// for i in tmp do
33581: LD_ADDR_VAR 0 8
33585: PUSH
33586: LD_VAR 0 19
33590: PUSH
33591: FOR_IN
33592: IFFALSE 33625
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33594: LD_VAR 0 8
33598: PPUSH
33599: CALL_OW 250
33603: PPUSH
33604: LD_VAR 0 8
33608: PPUSH
33609: CALL_OW 251
33613: PPUSH
33614: LD_VAR 0 16
33618: PPUSH
33619: CALL_OW 441
33623: GO 33591
33625: POP
33626: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33627: LD_VAR 0 18
33631: PPUSH
33632: LD_INT 2
33634: PUSH
33635: LD_INT 30
33637: PUSH
33638: LD_INT 32
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 30
33647: PUSH
33648: LD_INT 33
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: LIST
33659: PPUSH
33660: CALL_OW 72
33664: IFFALSE 33752
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33666: LD_ADDR_VAR 0 8
33670: PUSH
33671: LD_VAR 0 18
33675: PPUSH
33676: LD_INT 2
33678: PUSH
33679: LD_INT 30
33681: PUSH
33682: LD_INT 32
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 30
33691: PUSH
33692: LD_INT 33
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: LIST
33703: PPUSH
33704: CALL_OW 72
33708: PUSH
33709: FOR_IN
33710: IFFALSE 33750
// begin if not GetBWeapon ( i ) then
33712: LD_VAR 0 8
33716: PPUSH
33717: CALL_OW 269
33721: NOT
33722: IFFALSE 33748
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33724: LD_VAR 0 8
33728: PPUSH
33729: LD_VAR 0 8
33733: PPUSH
33734: LD_VAR 0 2
33738: PPUSH
33739: CALL 34998 0 2
33743: PPUSH
33744: CALL_OW 431
// end ;
33748: GO 33709
33750: POP
33751: POP
// end ; for i = 1 to personel do
33752: LD_ADDR_VAR 0 8
33756: PUSH
33757: DOUBLE
33758: LD_INT 1
33760: DEC
33761: ST_TO_ADDR
33762: LD_VAR 0 6
33766: PUSH
33767: FOR_TO
33768: IFFALSE 34832
// begin if i > 4 then
33770: LD_VAR 0 8
33774: PUSH
33775: LD_INT 4
33777: GREATER
33778: IFFALSE 33782
// break ;
33780: GO 34832
// case i of 1 :
33782: LD_VAR 0 8
33786: PUSH
33787: LD_INT 1
33789: DOUBLE
33790: EQUAL
33791: IFTRUE 33795
33793: GO 33875
33795: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33796: LD_ADDR_VAR 0 12
33800: PUSH
33801: LD_VAR 0 18
33805: PPUSH
33806: LD_INT 22
33808: PUSH
33809: LD_VAR 0 16
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 58
33820: PUSH
33821: EMPTY
33822: LIST
33823: PUSH
33824: LD_INT 2
33826: PUSH
33827: LD_INT 30
33829: PUSH
33830: LD_INT 32
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 30
33839: PUSH
33840: LD_INT 4
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 30
33849: PUSH
33850: LD_INT 5
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: LIST
33867: PPUSH
33868: CALL_OW 72
33872: ST_TO_ADDR
33873: GO 34097
33875: LD_INT 2
33877: DOUBLE
33878: EQUAL
33879: IFTRUE 33883
33881: GO 33945
33883: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33884: LD_ADDR_VAR 0 12
33888: PUSH
33889: LD_VAR 0 18
33893: PPUSH
33894: LD_INT 22
33896: PUSH
33897: LD_VAR 0 16
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 2
33908: PUSH
33909: LD_INT 30
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 30
33921: PUSH
33922: LD_INT 1
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: LIST
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PPUSH
33938: CALL_OW 72
33942: ST_TO_ADDR
33943: GO 34097
33945: LD_INT 3
33947: DOUBLE
33948: EQUAL
33949: IFTRUE 33953
33951: GO 34015
33953: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33954: LD_ADDR_VAR 0 12
33958: PUSH
33959: LD_VAR 0 18
33963: PPUSH
33964: LD_INT 22
33966: PUSH
33967: LD_VAR 0 16
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 2
33978: PUSH
33979: LD_INT 30
33981: PUSH
33982: LD_INT 2
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 30
33991: PUSH
33992: LD_INT 3
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: LIST
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PPUSH
34008: CALL_OW 72
34012: ST_TO_ADDR
34013: GO 34097
34015: LD_INT 4
34017: DOUBLE
34018: EQUAL
34019: IFTRUE 34023
34021: GO 34096
34023: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34024: LD_ADDR_VAR 0 12
34028: PUSH
34029: LD_VAR 0 18
34033: PPUSH
34034: LD_INT 22
34036: PUSH
34037: LD_VAR 0 16
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 2
34048: PUSH
34049: LD_INT 30
34051: PUSH
34052: LD_INT 6
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 30
34061: PUSH
34062: LD_INT 7
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 30
34071: PUSH
34072: LD_INT 8
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PPUSH
34089: CALL_OW 72
34093: ST_TO_ADDR
34094: GO 34097
34096: POP
// if i = 1 then
34097: LD_VAR 0 8
34101: PUSH
34102: LD_INT 1
34104: EQUAL
34105: IFFALSE 34216
// begin tmp := [ ] ;
34107: LD_ADDR_VAR 0 19
34111: PUSH
34112: EMPTY
34113: ST_TO_ADDR
// for j in f do
34114: LD_ADDR_VAR 0 9
34118: PUSH
34119: LD_VAR 0 12
34123: PUSH
34124: FOR_IN
34125: IFFALSE 34198
// if GetBType ( j ) = b_bunker then
34127: LD_VAR 0 9
34131: PPUSH
34132: CALL_OW 266
34136: PUSH
34137: LD_INT 32
34139: EQUAL
34140: IFFALSE 34167
// tmp := Insert ( tmp , 1 , j ) else
34142: LD_ADDR_VAR 0 19
34146: PUSH
34147: LD_VAR 0 19
34151: PPUSH
34152: LD_INT 1
34154: PPUSH
34155: LD_VAR 0 9
34159: PPUSH
34160: CALL_OW 2
34164: ST_TO_ADDR
34165: GO 34196
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34167: LD_ADDR_VAR 0 19
34171: PUSH
34172: LD_VAR 0 19
34176: PPUSH
34177: LD_VAR 0 19
34181: PUSH
34182: LD_INT 1
34184: PLUS
34185: PPUSH
34186: LD_VAR 0 9
34190: PPUSH
34191: CALL_OW 2
34195: ST_TO_ADDR
34196: GO 34124
34198: POP
34199: POP
// if tmp then
34200: LD_VAR 0 19
34204: IFFALSE 34216
// f := tmp ;
34206: LD_ADDR_VAR 0 12
34210: PUSH
34211: LD_VAR 0 19
34215: ST_TO_ADDR
// end ; x := personel [ i ] ;
34216: LD_ADDR_VAR 0 13
34220: PUSH
34221: LD_VAR 0 6
34225: PUSH
34226: LD_VAR 0 8
34230: ARRAY
34231: ST_TO_ADDR
// if x = - 1 then
34232: LD_VAR 0 13
34236: PUSH
34237: LD_INT 1
34239: NEG
34240: EQUAL
34241: IFFALSE 34450
// begin for j in f do
34243: LD_ADDR_VAR 0 9
34247: PUSH
34248: LD_VAR 0 12
34252: PUSH
34253: FOR_IN
34254: IFFALSE 34446
// repeat InitHc ;
34256: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34260: LD_VAR 0 9
34264: PPUSH
34265: CALL_OW 266
34269: PUSH
34270: LD_INT 5
34272: EQUAL
34273: IFFALSE 34343
// begin if UnitsInside ( j ) < 3 then
34275: LD_VAR 0 9
34279: PPUSH
34280: CALL_OW 313
34284: PUSH
34285: LD_INT 3
34287: LESS
34288: IFFALSE 34324
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34290: LD_INT 0
34292: PPUSH
34293: LD_INT 5
34295: PUSH
34296: LD_INT 8
34298: PUSH
34299: LD_INT 9
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: LIST
34306: PUSH
34307: LD_VAR 0 17
34311: ARRAY
34312: PPUSH
34313: LD_VAR 0 4
34317: PPUSH
34318: CALL_OW 380
34322: GO 34341
// PrepareHuman ( false , i , skill ) ;
34324: LD_INT 0
34326: PPUSH
34327: LD_VAR 0 8
34331: PPUSH
34332: LD_VAR 0 4
34336: PPUSH
34337: CALL_OW 380
// end else
34341: GO 34360
// PrepareHuman ( false , i , skill ) ;
34343: LD_INT 0
34345: PPUSH
34346: LD_VAR 0 8
34350: PPUSH
34351: LD_VAR 0 4
34355: PPUSH
34356: CALL_OW 380
// un := CreateHuman ;
34360: LD_ADDR_VAR 0 14
34364: PUSH
34365: CALL_OW 44
34369: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34370: LD_ADDR_VAR 0 7
34374: PUSH
34375: LD_VAR 0 7
34379: PPUSH
34380: LD_INT 1
34382: PPUSH
34383: LD_VAR 0 14
34387: PPUSH
34388: CALL_OW 2
34392: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34393: LD_VAR 0 14
34397: PPUSH
34398: LD_VAR 0 9
34402: PPUSH
34403: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34407: LD_VAR 0 9
34411: PPUSH
34412: CALL_OW 313
34416: PUSH
34417: LD_INT 6
34419: EQUAL
34420: PUSH
34421: LD_VAR 0 9
34425: PPUSH
34426: CALL_OW 266
34430: PUSH
34431: LD_INT 32
34433: PUSH
34434: LD_INT 31
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: IN
34441: OR
34442: IFFALSE 34256
34444: GO 34253
34446: POP
34447: POP
// end else
34448: GO 34830
// for j = 1 to x do
34450: LD_ADDR_VAR 0 9
34454: PUSH
34455: DOUBLE
34456: LD_INT 1
34458: DEC
34459: ST_TO_ADDR
34460: LD_VAR 0 13
34464: PUSH
34465: FOR_TO
34466: IFFALSE 34828
// begin InitHc ;
34468: CALL_OW 19
// if not f then
34472: LD_VAR 0 12
34476: NOT
34477: IFFALSE 34566
// begin PrepareHuman ( false , i , skill ) ;
34479: LD_INT 0
34481: PPUSH
34482: LD_VAR 0 8
34486: PPUSH
34487: LD_VAR 0 4
34491: PPUSH
34492: CALL_OW 380
// un := CreateHuman ;
34496: LD_ADDR_VAR 0 14
34500: PUSH
34501: CALL_OW 44
34505: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34506: LD_ADDR_VAR 0 7
34510: PUSH
34511: LD_VAR 0 7
34515: PPUSH
34516: LD_INT 1
34518: PPUSH
34519: LD_VAR 0 14
34523: PPUSH
34524: CALL_OW 2
34528: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34529: LD_VAR 0 14
34533: PPUSH
34534: LD_VAR 0 1
34538: PPUSH
34539: CALL_OW 250
34543: PPUSH
34544: LD_VAR 0 1
34548: PPUSH
34549: CALL_OW 251
34553: PPUSH
34554: LD_INT 10
34556: PPUSH
34557: LD_INT 0
34559: PPUSH
34560: CALL_OW 50
// continue ;
34564: GO 34465
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34566: LD_VAR 0 12
34570: PUSH
34571: LD_INT 1
34573: ARRAY
34574: PPUSH
34575: CALL_OW 313
34579: PUSH
34580: LD_VAR 0 12
34584: PUSH
34585: LD_INT 1
34587: ARRAY
34588: PPUSH
34589: CALL_OW 266
34593: PUSH
34594: LD_INT 32
34596: PUSH
34597: LD_INT 31
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: IN
34604: AND
34605: PUSH
34606: LD_VAR 0 12
34610: PUSH
34611: LD_INT 1
34613: ARRAY
34614: PPUSH
34615: CALL_OW 313
34619: PUSH
34620: LD_INT 6
34622: EQUAL
34623: OR
34624: IFFALSE 34644
// f := Delete ( f , 1 ) ;
34626: LD_ADDR_VAR 0 12
34630: PUSH
34631: LD_VAR 0 12
34635: PPUSH
34636: LD_INT 1
34638: PPUSH
34639: CALL_OW 3
34643: ST_TO_ADDR
// if not f then
34644: LD_VAR 0 12
34648: NOT
34649: IFFALSE 34667
// begin x := x + 2 ;
34651: LD_ADDR_VAR 0 13
34655: PUSH
34656: LD_VAR 0 13
34660: PUSH
34661: LD_INT 2
34663: PLUS
34664: ST_TO_ADDR
// continue ;
34665: GO 34465
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34667: LD_VAR 0 12
34671: PUSH
34672: LD_INT 1
34674: ARRAY
34675: PPUSH
34676: CALL_OW 266
34680: PUSH
34681: LD_INT 5
34683: EQUAL
34684: IFFALSE 34758
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34686: LD_VAR 0 12
34690: PUSH
34691: LD_INT 1
34693: ARRAY
34694: PPUSH
34695: CALL_OW 313
34699: PUSH
34700: LD_INT 3
34702: LESS
34703: IFFALSE 34739
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34705: LD_INT 0
34707: PPUSH
34708: LD_INT 5
34710: PUSH
34711: LD_INT 8
34713: PUSH
34714: LD_INT 9
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: LIST
34721: PUSH
34722: LD_VAR 0 17
34726: ARRAY
34727: PPUSH
34728: LD_VAR 0 4
34732: PPUSH
34733: CALL_OW 380
34737: GO 34756
// PrepareHuman ( false , i , skill ) ;
34739: LD_INT 0
34741: PPUSH
34742: LD_VAR 0 8
34746: PPUSH
34747: LD_VAR 0 4
34751: PPUSH
34752: CALL_OW 380
// end else
34756: GO 34775
// PrepareHuman ( false , i , skill ) ;
34758: LD_INT 0
34760: PPUSH
34761: LD_VAR 0 8
34765: PPUSH
34766: LD_VAR 0 4
34770: PPUSH
34771: CALL_OW 380
// un := CreateHuman ;
34775: LD_ADDR_VAR 0 14
34779: PUSH
34780: CALL_OW 44
34784: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34785: LD_ADDR_VAR 0 7
34789: PUSH
34790: LD_VAR 0 7
34794: PPUSH
34795: LD_INT 1
34797: PPUSH
34798: LD_VAR 0 14
34802: PPUSH
34803: CALL_OW 2
34807: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34808: LD_VAR 0 14
34812: PPUSH
34813: LD_VAR 0 12
34817: PUSH
34818: LD_INT 1
34820: ARRAY
34821: PPUSH
34822: CALL_OW 52
// end ;
34826: GO 34465
34828: POP
34829: POP
// end ;
34830: GO 33767
34832: POP
34833: POP
// result := result ^ buildings ;
34834: LD_ADDR_VAR 0 7
34838: PUSH
34839: LD_VAR 0 7
34843: PUSH
34844: LD_VAR 0 18
34848: ADD
34849: ST_TO_ADDR
// end else
34850: GO 34993
// begin for i = 1 to personel do
34852: LD_ADDR_VAR 0 8
34856: PUSH
34857: DOUBLE
34858: LD_INT 1
34860: DEC
34861: ST_TO_ADDR
34862: LD_VAR 0 6
34866: PUSH
34867: FOR_TO
34868: IFFALSE 34991
// begin if i > 4 then
34870: LD_VAR 0 8
34874: PUSH
34875: LD_INT 4
34877: GREATER
34878: IFFALSE 34882
// break ;
34880: GO 34991
// x := personel [ i ] ;
34882: LD_ADDR_VAR 0 13
34886: PUSH
34887: LD_VAR 0 6
34891: PUSH
34892: LD_VAR 0 8
34896: ARRAY
34897: ST_TO_ADDR
// if x = - 1 then
34898: LD_VAR 0 13
34902: PUSH
34903: LD_INT 1
34905: NEG
34906: EQUAL
34907: IFFALSE 34911
// continue ;
34909: GO 34867
// PrepareHuman ( false , i , skill ) ;
34911: LD_INT 0
34913: PPUSH
34914: LD_VAR 0 8
34918: PPUSH
34919: LD_VAR 0 4
34923: PPUSH
34924: CALL_OW 380
// un := CreateHuman ;
34928: LD_ADDR_VAR 0 14
34932: PUSH
34933: CALL_OW 44
34937: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34938: LD_VAR 0 14
34942: PPUSH
34943: LD_VAR 0 1
34947: PPUSH
34948: CALL_OW 250
34952: PPUSH
34953: LD_VAR 0 1
34957: PPUSH
34958: CALL_OW 251
34962: PPUSH
34963: LD_INT 10
34965: PPUSH
34966: LD_INT 0
34968: PPUSH
34969: CALL_OW 50
// result := result ^ un ;
34973: LD_ADDR_VAR 0 7
34977: PUSH
34978: LD_VAR 0 7
34982: PUSH
34983: LD_VAR 0 14
34987: ADD
34988: ST_TO_ADDR
// end ;
34989: GO 34867
34991: POP
34992: POP
// end ; end ;
34993: LD_VAR 0 7
34997: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34998: LD_INT 0
35000: PPUSH
35001: PPUSH
35002: PPUSH
35003: PPUSH
35004: PPUSH
35005: PPUSH
35006: PPUSH
35007: PPUSH
35008: PPUSH
35009: PPUSH
35010: PPUSH
35011: PPUSH
35012: PPUSH
35013: PPUSH
35014: PPUSH
35015: PPUSH
// result := false ;
35016: LD_ADDR_VAR 0 3
35020: PUSH
35021: LD_INT 0
35023: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35024: LD_VAR 0 1
35028: NOT
35029: PUSH
35030: LD_VAR 0 1
35034: PPUSH
35035: CALL_OW 266
35039: PUSH
35040: LD_INT 32
35042: PUSH
35043: LD_INT 33
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: IN
35050: NOT
35051: OR
35052: IFFALSE 35056
// exit ;
35054: GO 36165
// nat := GetNation ( tower ) ;
35056: LD_ADDR_VAR 0 12
35060: PUSH
35061: LD_VAR 0 1
35065: PPUSH
35066: CALL_OW 248
35070: ST_TO_ADDR
// side := GetSide ( tower ) ;
35071: LD_ADDR_VAR 0 16
35075: PUSH
35076: LD_VAR 0 1
35080: PPUSH
35081: CALL_OW 255
35085: ST_TO_ADDR
// x := GetX ( tower ) ;
35086: LD_ADDR_VAR 0 10
35090: PUSH
35091: LD_VAR 0 1
35095: PPUSH
35096: CALL_OW 250
35100: ST_TO_ADDR
// y := GetY ( tower ) ;
35101: LD_ADDR_VAR 0 11
35105: PUSH
35106: LD_VAR 0 1
35110: PPUSH
35111: CALL_OW 251
35115: ST_TO_ADDR
// if not x or not y then
35116: LD_VAR 0 10
35120: NOT
35121: PUSH
35122: LD_VAR 0 11
35126: NOT
35127: OR
35128: IFFALSE 35132
// exit ;
35130: GO 36165
// weapon := 0 ;
35132: LD_ADDR_VAR 0 18
35136: PUSH
35137: LD_INT 0
35139: ST_TO_ADDR
// fac_list := [ ] ;
35140: LD_ADDR_VAR 0 17
35144: PUSH
35145: EMPTY
35146: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35147: LD_ADDR_VAR 0 6
35151: PUSH
35152: LD_VAR 0 1
35156: PPUSH
35157: CALL_OW 274
35161: PPUSH
35162: LD_VAR 0 2
35166: PPUSH
35167: LD_INT 0
35169: PPUSH
35170: CALL 32736 0 3
35174: PPUSH
35175: LD_INT 30
35177: PUSH
35178: LD_INT 3
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PPUSH
35185: CALL_OW 72
35189: ST_TO_ADDR
// if not factories then
35190: LD_VAR 0 6
35194: NOT
35195: IFFALSE 35199
// exit ;
35197: GO 36165
// for i in factories do
35199: LD_ADDR_VAR 0 8
35203: PUSH
35204: LD_VAR 0 6
35208: PUSH
35209: FOR_IN
35210: IFFALSE 35235
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35212: LD_ADDR_VAR 0 17
35216: PUSH
35217: LD_VAR 0 17
35221: PUSH
35222: LD_VAR 0 8
35226: PPUSH
35227: CALL_OW 478
35231: UNION
35232: ST_TO_ADDR
35233: GO 35209
35235: POP
35236: POP
// if not fac_list then
35237: LD_VAR 0 17
35241: NOT
35242: IFFALSE 35246
// exit ;
35244: GO 36165
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35246: LD_ADDR_VAR 0 5
35250: PUSH
35251: LD_INT 4
35253: PUSH
35254: LD_INT 5
35256: PUSH
35257: LD_INT 9
35259: PUSH
35260: LD_INT 10
35262: PUSH
35263: LD_INT 6
35265: PUSH
35266: LD_INT 7
35268: PUSH
35269: LD_INT 11
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 27
35283: PUSH
35284: LD_INT 28
35286: PUSH
35287: LD_INT 26
35289: PUSH
35290: LD_INT 30
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: PUSH
35299: LD_INT 43
35301: PUSH
35302: LD_INT 44
35304: PUSH
35305: LD_INT 46
35307: PUSH
35308: LD_INT 45
35310: PUSH
35311: LD_INT 47
35313: PUSH
35314: LD_INT 49
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: PUSH
35330: LD_VAR 0 12
35334: ARRAY
35335: ST_TO_ADDR
// list := list isect fac_list ;
35336: LD_ADDR_VAR 0 5
35340: PUSH
35341: LD_VAR 0 5
35345: PUSH
35346: LD_VAR 0 17
35350: ISECT
35351: ST_TO_ADDR
// if not list then
35352: LD_VAR 0 5
35356: NOT
35357: IFFALSE 35361
// exit ;
35359: GO 36165
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35361: LD_VAR 0 12
35365: PUSH
35366: LD_INT 3
35368: EQUAL
35369: PUSH
35370: LD_INT 49
35372: PUSH
35373: LD_VAR 0 5
35377: IN
35378: AND
35379: PUSH
35380: LD_INT 31
35382: PPUSH
35383: LD_VAR 0 16
35387: PPUSH
35388: CALL_OW 321
35392: PUSH
35393: LD_INT 2
35395: EQUAL
35396: AND
35397: IFFALSE 35457
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35399: LD_INT 22
35401: PUSH
35402: LD_VAR 0 16
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 35
35413: PUSH
35414: LD_INT 49
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 91
35423: PUSH
35424: LD_VAR 0 1
35428: PUSH
35429: LD_INT 10
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: LIST
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: PPUSH
35442: CALL_OW 69
35446: NOT
35447: IFFALSE 35457
// weapon := ru_time_lapser ;
35449: LD_ADDR_VAR 0 18
35453: PUSH
35454: LD_INT 49
35456: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35457: LD_VAR 0 12
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: LD_INT 2
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: IN
35472: PUSH
35473: LD_INT 11
35475: PUSH
35476: LD_VAR 0 5
35480: IN
35481: PUSH
35482: LD_INT 30
35484: PUSH
35485: LD_VAR 0 5
35489: IN
35490: OR
35491: AND
35492: PUSH
35493: LD_INT 6
35495: PPUSH
35496: LD_VAR 0 16
35500: PPUSH
35501: CALL_OW 321
35505: PUSH
35506: LD_INT 2
35508: EQUAL
35509: AND
35510: IFFALSE 35675
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35512: LD_INT 22
35514: PUSH
35515: LD_VAR 0 16
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: LD_INT 35
35529: PUSH
35530: LD_INT 11
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 35
35539: PUSH
35540: LD_INT 30
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 91
35554: PUSH
35555: LD_VAR 0 1
35559: PUSH
35560: LD_INT 18
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: LIST
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: LIST
35572: PPUSH
35573: CALL_OW 69
35577: NOT
35578: PUSH
35579: LD_INT 22
35581: PUSH
35582: LD_VAR 0 16
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 2
35593: PUSH
35594: LD_INT 30
35596: PUSH
35597: LD_INT 32
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 30
35606: PUSH
35607: LD_INT 33
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 91
35621: PUSH
35622: LD_VAR 0 1
35626: PUSH
35627: LD_INT 12
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: LIST
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: LIST
35639: PUSH
35640: EMPTY
35641: LIST
35642: PPUSH
35643: CALL_OW 69
35647: PUSH
35648: LD_INT 2
35650: GREATER
35651: AND
35652: IFFALSE 35675
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35654: LD_ADDR_VAR 0 18
35658: PUSH
35659: LD_INT 11
35661: PUSH
35662: LD_INT 30
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_VAR 0 12
35673: ARRAY
35674: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35675: LD_VAR 0 18
35679: NOT
35680: PUSH
35681: LD_INT 40
35683: PPUSH
35684: LD_VAR 0 16
35688: PPUSH
35689: CALL_OW 321
35693: PUSH
35694: LD_INT 2
35696: EQUAL
35697: AND
35698: PUSH
35699: LD_INT 7
35701: PUSH
35702: LD_VAR 0 5
35706: IN
35707: PUSH
35708: LD_INT 28
35710: PUSH
35711: LD_VAR 0 5
35715: IN
35716: OR
35717: PUSH
35718: LD_INT 45
35720: PUSH
35721: LD_VAR 0 5
35725: IN
35726: OR
35727: AND
35728: IFFALSE 35982
// begin hex := GetHexInfo ( x , y ) ;
35730: LD_ADDR_VAR 0 4
35734: PUSH
35735: LD_VAR 0 10
35739: PPUSH
35740: LD_VAR 0 11
35744: PPUSH
35745: CALL_OW 546
35749: ST_TO_ADDR
// if hex [ 1 ] then
35750: LD_VAR 0 4
35754: PUSH
35755: LD_INT 1
35757: ARRAY
35758: IFFALSE 35762
// exit ;
35760: GO 36165
// height := hex [ 2 ] ;
35762: LD_ADDR_VAR 0 15
35766: PUSH
35767: LD_VAR 0 4
35771: PUSH
35772: LD_INT 2
35774: ARRAY
35775: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35776: LD_ADDR_VAR 0 14
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: LD_INT 3
35789: PUSH
35790: LD_INT 5
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: ST_TO_ADDR
// for i in tmp do
35799: LD_ADDR_VAR 0 8
35803: PUSH
35804: LD_VAR 0 14
35808: PUSH
35809: FOR_IN
35810: IFFALSE 35980
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35812: LD_ADDR_VAR 0 9
35816: PUSH
35817: LD_VAR 0 10
35821: PPUSH
35822: LD_VAR 0 8
35826: PPUSH
35827: LD_INT 5
35829: PPUSH
35830: CALL_OW 272
35834: PUSH
35835: LD_VAR 0 11
35839: PPUSH
35840: LD_VAR 0 8
35844: PPUSH
35845: LD_INT 5
35847: PPUSH
35848: CALL_OW 273
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35857: LD_VAR 0 9
35861: PUSH
35862: LD_INT 1
35864: ARRAY
35865: PPUSH
35866: LD_VAR 0 9
35870: PUSH
35871: LD_INT 2
35873: ARRAY
35874: PPUSH
35875: CALL_OW 488
35879: IFFALSE 35978
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35881: LD_ADDR_VAR 0 4
35885: PUSH
35886: LD_VAR 0 9
35890: PUSH
35891: LD_INT 1
35893: ARRAY
35894: PPUSH
35895: LD_VAR 0 9
35899: PUSH
35900: LD_INT 2
35902: ARRAY
35903: PPUSH
35904: CALL_OW 546
35908: ST_TO_ADDR
// if hex [ 1 ] then
35909: LD_VAR 0 4
35913: PUSH
35914: LD_INT 1
35916: ARRAY
35917: IFFALSE 35921
// continue ;
35919: GO 35809
// h := hex [ 2 ] ;
35921: LD_ADDR_VAR 0 13
35925: PUSH
35926: LD_VAR 0 4
35930: PUSH
35931: LD_INT 2
35933: ARRAY
35934: ST_TO_ADDR
// if h + 7 < height then
35935: LD_VAR 0 13
35939: PUSH
35940: LD_INT 7
35942: PLUS
35943: PUSH
35944: LD_VAR 0 15
35948: LESS
35949: IFFALSE 35978
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35951: LD_ADDR_VAR 0 18
35955: PUSH
35956: LD_INT 7
35958: PUSH
35959: LD_INT 28
35961: PUSH
35962: LD_INT 45
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: LIST
35969: PUSH
35970: LD_VAR 0 12
35974: ARRAY
35975: ST_TO_ADDR
// break ;
35976: GO 35980
// end ; end ; end ;
35978: GO 35809
35980: POP
35981: POP
// end ; if not weapon then
35982: LD_VAR 0 18
35986: NOT
35987: IFFALSE 36047
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35989: LD_ADDR_VAR 0 5
35993: PUSH
35994: LD_VAR 0 5
35998: PUSH
35999: LD_INT 11
36001: PUSH
36002: LD_INT 30
36004: PUSH
36005: LD_INT 49
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: LIST
36012: DIFF
36013: ST_TO_ADDR
// if not list then
36014: LD_VAR 0 5
36018: NOT
36019: IFFALSE 36023
// exit ;
36021: GO 36165
// weapon := list [ rand ( 1 , list ) ] ;
36023: LD_ADDR_VAR 0 18
36027: PUSH
36028: LD_VAR 0 5
36032: PUSH
36033: LD_INT 1
36035: PPUSH
36036: LD_VAR 0 5
36040: PPUSH
36041: CALL_OW 12
36045: ARRAY
36046: ST_TO_ADDR
// end ; if weapon then
36047: LD_VAR 0 18
36051: IFFALSE 36165
// begin tmp := CostOfWeapon ( weapon ) ;
36053: LD_ADDR_VAR 0 14
36057: PUSH
36058: LD_VAR 0 18
36062: PPUSH
36063: CALL_OW 451
36067: ST_TO_ADDR
// j := GetBase ( tower ) ;
36068: LD_ADDR_VAR 0 9
36072: PUSH
36073: LD_VAR 0 1
36077: PPUSH
36078: CALL_OW 274
36082: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36083: LD_VAR 0 9
36087: PPUSH
36088: LD_INT 1
36090: PPUSH
36091: CALL_OW 275
36095: PUSH
36096: LD_VAR 0 14
36100: PUSH
36101: LD_INT 1
36103: ARRAY
36104: GREATEREQUAL
36105: PUSH
36106: LD_VAR 0 9
36110: PPUSH
36111: LD_INT 2
36113: PPUSH
36114: CALL_OW 275
36118: PUSH
36119: LD_VAR 0 14
36123: PUSH
36124: LD_INT 2
36126: ARRAY
36127: GREATEREQUAL
36128: AND
36129: PUSH
36130: LD_VAR 0 9
36134: PPUSH
36135: LD_INT 3
36137: PPUSH
36138: CALL_OW 275
36142: PUSH
36143: LD_VAR 0 14
36147: PUSH
36148: LD_INT 3
36150: ARRAY
36151: GREATEREQUAL
36152: AND
36153: IFFALSE 36165
// result := weapon ;
36155: LD_ADDR_VAR 0 3
36159: PUSH
36160: LD_VAR 0 18
36164: ST_TO_ADDR
// end ; end ;
36165: LD_VAR 0 3
36169: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36170: LD_INT 0
36172: PPUSH
36173: PPUSH
// result := true ;
36174: LD_ADDR_VAR 0 3
36178: PUSH
36179: LD_INT 1
36181: ST_TO_ADDR
// if array1 = array2 then
36182: LD_VAR 0 1
36186: PUSH
36187: LD_VAR 0 2
36191: EQUAL
36192: IFFALSE 36252
// begin for i = 1 to array1 do
36194: LD_ADDR_VAR 0 4
36198: PUSH
36199: DOUBLE
36200: LD_INT 1
36202: DEC
36203: ST_TO_ADDR
36204: LD_VAR 0 1
36208: PUSH
36209: FOR_TO
36210: IFFALSE 36248
// if array1 [ i ] <> array2 [ i ] then
36212: LD_VAR 0 1
36216: PUSH
36217: LD_VAR 0 4
36221: ARRAY
36222: PUSH
36223: LD_VAR 0 2
36227: PUSH
36228: LD_VAR 0 4
36232: ARRAY
36233: NONEQUAL
36234: IFFALSE 36246
// begin result := false ;
36236: LD_ADDR_VAR 0 3
36240: PUSH
36241: LD_INT 0
36243: ST_TO_ADDR
// break ;
36244: GO 36248
// end ;
36246: GO 36209
36248: POP
36249: POP
// end else
36250: GO 36260
// result := false ;
36252: LD_ADDR_VAR 0 3
36256: PUSH
36257: LD_INT 0
36259: ST_TO_ADDR
// end ;
36260: LD_VAR 0 3
36264: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36265: LD_INT 0
36267: PPUSH
36268: PPUSH
// if not array1 or not array2 then
36269: LD_VAR 0 1
36273: NOT
36274: PUSH
36275: LD_VAR 0 2
36279: NOT
36280: OR
36281: IFFALSE 36285
// exit ;
36283: GO 36349
// result := true ;
36285: LD_ADDR_VAR 0 3
36289: PUSH
36290: LD_INT 1
36292: ST_TO_ADDR
// for i = 1 to array1 do
36293: LD_ADDR_VAR 0 4
36297: PUSH
36298: DOUBLE
36299: LD_INT 1
36301: DEC
36302: ST_TO_ADDR
36303: LD_VAR 0 1
36307: PUSH
36308: FOR_TO
36309: IFFALSE 36347
// if array1 [ i ] <> array2 [ i ] then
36311: LD_VAR 0 1
36315: PUSH
36316: LD_VAR 0 4
36320: ARRAY
36321: PUSH
36322: LD_VAR 0 2
36326: PUSH
36327: LD_VAR 0 4
36331: ARRAY
36332: NONEQUAL
36333: IFFALSE 36345
// begin result := false ;
36335: LD_ADDR_VAR 0 3
36339: PUSH
36340: LD_INT 0
36342: ST_TO_ADDR
// break ;
36343: GO 36347
// end ;
36345: GO 36308
36347: POP
36348: POP
// end ;
36349: LD_VAR 0 3
36353: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36354: LD_INT 0
36356: PPUSH
36357: PPUSH
36358: PPUSH
// pom := GetBase ( fac ) ;
36359: LD_ADDR_VAR 0 5
36363: PUSH
36364: LD_VAR 0 1
36368: PPUSH
36369: CALL_OW 274
36373: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36374: LD_ADDR_VAR 0 4
36378: PUSH
36379: LD_VAR 0 2
36383: PUSH
36384: LD_INT 1
36386: ARRAY
36387: PPUSH
36388: LD_VAR 0 2
36392: PUSH
36393: LD_INT 2
36395: ARRAY
36396: PPUSH
36397: LD_VAR 0 2
36401: PUSH
36402: LD_INT 3
36404: ARRAY
36405: PPUSH
36406: LD_VAR 0 2
36410: PUSH
36411: LD_INT 4
36413: ARRAY
36414: PPUSH
36415: CALL_OW 449
36419: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36420: LD_ADDR_VAR 0 3
36424: PUSH
36425: LD_VAR 0 5
36429: PPUSH
36430: LD_INT 1
36432: PPUSH
36433: CALL_OW 275
36437: PUSH
36438: LD_VAR 0 4
36442: PUSH
36443: LD_INT 1
36445: ARRAY
36446: GREATEREQUAL
36447: PUSH
36448: LD_VAR 0 5
36452: PPUSH
36453: LD_INT 2
36455: PPUSH
36456: CALL_OW 275
36460: PUSH
36461: LD_VAR 0 4
36465: PUSH
36466: LD_INT 2
36468: ARRAY
36469: GREATEREQUAL
36470: AND
36471: PUSH
36472: LD_VAR 0 5
36476: PPUSH
36477: LD_INT 3
36479: PPUSH
36480: CALL_OW 275
36484: PUSH
36485: LD_VAR 0 4
36489: PUSH
36490: LD_INT 3
36492: ARRAY
36493: GREATEREQUAL
36494: AND
36495: ST_TO_ADDR
// end ;
36496: LD_VAR 0 3
36500: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36501: LD_INT 0
36503: PPUSH
36504: PPUSH
36505: PPUSH
36506: PPUSH
// pom := GetBase ( building ) ;
36507: LD_ADDR_VAR 0 3
36511: PUSH
36512: LD_VAR 0 1
36516: PPUSH
36517: CALL_OW 274
36521: ST_TO_ADDR
// if not pom then
36522: LD_VAR 0 3
36526: NOT
36527: IFFALSE 36531
// exit ;
36529: GO 36701
// btype := GetBType ( building ) ;
36531: LD_ADDR_VAR 0 5
36535: PUSH
36536: LD_VAR 0 1
36540: PPUSH
36541: CALL_OW 266
36545: ST_TO_ADDR
// if btype = b_armoury then
36546: LD_VAR 0 5
36550: PUSH
36551: LD_INT 4
36553: EQUAL
36554: IFFALSE 36564
// btype := b_barracks ;
36556: LD_ADDR_VAR 0 5
36560: PUSH
36561: LD_INT 5
36563: ST_TO_ADDR
// if btype = b_depot then
36564: LD_VAR 0 5
36568: PUSH
36569: LD_INT 0
36571: EQUAL
36572: IFFALSE 36582
// btype := b_warehouse ;
36574: LD_ADDR_VAR 0 5
36578: PUSH
36579: LD_INT 1
36581: ST_TO_ADDR
// if btype = b_workshop then
36582: LD_VAR 0 5
36586: PUSH
36587: LD_INT 2
36589: EQUAL
36590: IFFALSE 36600
// btype := b_factory ;
36592: LD_ADDR_VAR 0 5
36596: PUSH
36597: LD_INT 3
36599: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36600: LD_ADDR_VAR 0 4
36604: PUSH
36605: LD_VAR 0 5
36609: PPUSH
36610: LD_VAR 0 1
36614: PPUSH
36615: CALL_OW 248
36619: PPUSH
36620: CALL_OW 450
36624: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36625: LD_ADDR_VAR 0 2
36629: PUSH
36630: LD_VAR 0 3
36634: PPUSH
36635: LD_INT 1
36637: PPUSH
36638: CALL_OW 275
36642: PUSH
36643: LD_VAR 0 4
36647: PUSH
36648: LD_INT 1
36650: ARRAY
36651: GREATEREQUAL
36652: PUSH
36653: LD_VAR 0 3
36657: PPUSH
36658: LD_INT 2
36660: PPUSH
36661: CALL_OW 275
36665: PUSH
36666: LD_VAR 0 4
36670: PUSH
36671: LD_INT 2
36673: ARRAY
36674: GREATEREQUAL
36675: AND
36676: PUSH
36677: LD_VAR 0 3
36681: PPUSH
36682: LD_INT 3
36684: PPUSH
36685: CALL_OW 275
36689: PUSH
36690: LD_VAR 0 4
36694: PUSH
36695: LD_INT 3
36697: ARRAY
36698: GREATEREQUAL
36699: AND
36700: ST_TO_ADDR
// end ;
36701: LD_VAR 0 2
36705: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36706: LD_INT 0
36708: PPUSH
36709: PPUSH
36710: PPUSH
// pom := GetBase ( building ) ;
36711: LD_ADDR_VAR 0 4
36715: PUSH
36716: LD_VAR 0 1
36720: PPUSH
36721: CALL_OW 274
36725: ST_TO_ADDR
// if not pom then
36726: LD_VAR 0 4
36730: NOT
36731: IFFALSE 36735
// exit ;
36733: GO 36836
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36735: LD_ADDR_VAR 0 5
36739: PUSH
36740: LD_VAR 0 2
36744: PPUSH
36745: LD_VAR 0 1
36749: PPUSH
36750: CALL_OW 248
36754: PPUSH
36755: CALL_OW 450
36759: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36760: LD_ADDR_VAR 0 3
36764: PUSH
36765: LD_VAR 0 4
36769: PPUSH
36770: LD_INT 1
36772: PPUSH
36773: CALL_OW 275
36777: PUSH
36778: LD_VAR 0 5
36782: PUSH
36783: LD_INT 1
36785: ARRAY
36786: GREATEREQUAL
36787: PUSH
36788: LD_VAR 0 4
36792: PPUSH
36793: LD_INT 2
36795: PPUSH
36796: CALL_OW 275
36800: PUSH
36801: LD_VAR 0 5
36805: PUSH
36806: LD_INT 2
36808: ARRAY
36809: GREATEREQUAL
36810: AND
36811: PUSH
36812: LD_VAR 0 4
36816: PPUSH
36817: LD_INT 3
36819: PPUSH
36820: CALL_OW 275
36824: PUSH
36825: LD_VAR 0 5
36829: PUSH
36830: LD_INT 3
36832: ARRAY
36833: GREATEREQUAL
36834: AND
36835: ST_TO_ADDR
// end ;
36836: LD_VAR 0 3
36840: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36841: LD_INT 0
36843: PPUSH
36844: PPUSH
36845: PPUSH
36846: PPUSH
36847: PPUSH
36848: PPUSH
36849: PPUSH
36850: PPUSH
36851: PPUSH
36852: PPUSH
36853: PPUSH
// result := false ;
36854: LD_ADDR_VAR 0 8
36858: PUSH
36859: LD_INT 0
36861: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36862: LD_VAR 0 5
36866: NOT
36867: PUSH
36868: LD_VAR 0 1
36872: NOT
36873: OR
36874: PUSH
36875: LD_VAR 0 2
36879: NOT
36880: OR
36881: PUSH
36882: LD_VAR 0 3
36886: NOT
36887: OR
36888: IFFALSE 36892
// exit ;
36890: GO 37706
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36892: LD_ADDR_VAR 0 14
36896: PUSH
36897: LD_VAR 0 1
36901: PPUSH
36902: LD_VAR 0 2
36906: PPUSH
36907: LD_VAR 0 3
36911: PPUSH
36912: LD_VAR 0 4
36916: PPUSH
36917: LD_VAR 0 5
36921: PUSH
36922: LD_INT 1
36924: ARRAY
36925: PPUSH
36926: CALL_OW 248
36930: PPUSH
36931: LD_INT 0
36933: PPUSH
36934: CALL 38943 0 6
36938: ST_TO_ADDR
// if not hexes then
36939: LD_VAR 0 14
36943: NOT
36944: IFFALSE 36948
// exit ;
36946: GO 37706
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36948: LD_ADDR_VAR 0 17
36952: PUSH
36953: LD_VAR 0 5
36957: PPUSH
36958: LD_INT 22
36960: PUSH
36961: LD_VAR 0 13
36965: PPUSH
36966: CALL_OW 255
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 2
36977: PUSH
36978: LD_INT 30
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 30
36990: PUSH
36991: LD_INT 1
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PPUSH
37007: CALL_OW 72
37011: ST_TO_ADDR
// for i = 1 to hexes do
37012: LD_ADDR_VAR 0 9
37016: PUSH
37017: DOUBLE
37018: LD_INT 1
37020: DEC
37021: ST_TO_ADDR
37022: LD_VAR 0 14
37026: PUSH
37027: FOR_TO
37028: IFFALSE 37704
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37030: LD_ADDR_VAR 0 13
37034: PUSH
37035: LD_VAR 0 14
37039: PUSH
37040: LD_VAR 0 9
37044: ARRAY
37045: PUSH
37046: LD_INT 1
37048: ARRAY
37049: PPUSH
37050: LD_VAR 0 14
37054: PUSH
37055: LD_VAR 0 9
37059: ARRAY
37060: PUSH
37061: LD_INT 2
37063: ARRAY
37064: PPUSH
37065: CALL_OW 428
37069: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37070: LD_VAR 0 14
37074: PUSH
37075: LD_VAR 0 9
37079: ARRAY
37080: PUSH
37081: LD_INT 1
37083: ARRAY
37084: PPUSH
37085: LD_VAR 0 14
37089: PUSH
37090: LD_VAR 0 9
37094: ARRAY
37095: PUSH
37096: LD_INT 2
37098: ARRAY
37099: PPUSH
37100: CALL_OW 351
37104: PUSH
37105: LD_VAR 0 14
37109: PUSH
37110: LD_VAR 0 9
37114: ARRAY
37115: PUSH
37116: LD_INT 1
37118: ARRAY
37119: PPUSH
37120: LD_VAR 0 14
37124: PUSH
37125: LD_VAR 0 9
37129: ARRAY
37130: PUSH
37131: LD_INT 2
37133: ARRAY
37134: PPUSH
37135: CALL_OW 488
37139: NOT
37140: OR
37141: PUSH
37142: LD_VAR 0 13
37146: PPUSH
37147: CALL_OW 247
37151: PUSH
37152: LD_INT 3
37154: EQUAL
37155: OR
37156: IFFALSE 37162
// exit ;
37158: POP
37159: POP
37160: GO 37706
// if not tmp then
37162: LD_VAR 0 13
37166: NOT
37167: IFFALSE 37171
// continue ;
37169: GO 37027
// result := true ;
37171: LD_ADDR_VAR 0 8
37175: PUSH
37176: LD_INT 1
37178: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37179: LD_VAR 0 6
37183: PUSH
37184: LD_VAR 0 13
37188: PPUSH
37189: CALL_OW 247
37193: PUSH
37194: LD_INT 2
37196: EQUAL
37197: AND
37198: PUSH
37199: LD_VAR 0 13
37203: PPUSH
37204: CALL_OW 263
37208: PUSH
37209: LD_INT 1
37211: EQUAL
37212: AND
37213: IFFALSE 37377
// begin if IsDrivenBy ( tmp ) then
37215: LD_VAR 0 13
37219: PPUSH
37220: CALL_OW 311
37224: IFFALSE 37228
// continue ;
37226: GO 37027
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37228: LD_VAR 0 6
37232: PPUSH
37233: LD_INT 3
37235: PUSH
37236: LD_INT 60
37238: PUSH
37239: EMPTY
37240: LIST
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 3
37248: PUSH
37249: LD_INT 55
37251: PUSH
37252: EMPTY
37253: LIST
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PPUSH
37263: CALL_OW 72
37267: IFFALSE 37375
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37269: LD_ADDR_VAR 0 18
37273: PUSH
37274: LD_VAR 0 6
37278: PPUSH
37279: LD_INT 3
37281: PUSH
37282: LD_INT 60
37284: PUSH
37285: EMPTY
37286: LIST
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 3
37294: PUSH
37295: LD_INT 55
37297: PUSH
37298: EMPTY
37299: LIST
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PPUSH
37309: CALL_OW 72
37313: PUSH
37314: LD_INT 1
37316: ARRAY
37317: ST_TO_ADDR
// if IsInUnit ( driver ) then
37318: LD_VAR 0 18
37322: PPUSH
37323: CALL_OW 310
37327: IFFALSE 37338
// ComExit ( driver ) ;
37329: LD_VAR 0 18
37333: PPUSH
37334: CALL 62127 0 1
// AddComEnterUnit ( driver , tmp ) ;
37338: LD_VAR 0 18
37342: PPUSH
37343: LD_VAR 0 13
37347: PPUSH
37348: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37352: LD_VAR 0 18
37356: PPUSH
37357: LD_VAR 0 7
37361: PPUSH
37362: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37366: LD_VAR 0 18
37370: PPUSH
37371: CALL_OW 181
// end ; continue ;
37375: GO 37027
// end ; if not cleaners or not tmp in cleaners then
37377: LD_VAR 0 6
37381: NOT
37382: PUSH
37383: LD_VAR 0 13
37387: PUSH
37388: LD_VAR 0 6
37392: IN
37393: NOT
37394: OR
37395: IFFALSE 37702
// begin if dep then
37397: LD_VAR 0 17
37401: IFFALSE 37537
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37403: LD_ADDR_VAR 0 16
37407: PUSH
37408: LD_VAR 0 17
37412: PUSH
37413: LD_INT 1
37415: ARRAY
37416: PPUSH
37417: CALL_OW 250
37421: PPUSH
37422: LD_VAR 0 17
37426: PUSH
37427: LD_INT 1
37429: ARRAY
37430: PPUSH
37431: CALL_OW 254
37435: PPUSH
37436: LD_INT 5
37438: PPUSH
37439: CALL_OW 272
37443: PUSH
37444: LD_VAR 0 17
37448: PUSH
37449: LD_INT 1
37451: ARRAY
37452: PPUSH
37453: CALL_OW 251
37457: PPUSH
37458: LD_VAR 0 17
37462: PUSH
37463: LD_INT 1
37465: ARRAY
37466: PPUSH
37467: CALL_OW 254
37471: PPUSH
37472: LD_INT 5
37474: PPUSH
37475: CALL_OW 273
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37484: LD_VAR 0 16
37488: PUSH
37489: LD_INT 1
37491: ARRAY
37492: PPUSH
37493: LD_VAR 0 16
37497: PUSH
37498: LD_INT 2
37500: ARRAY
37501: PPUSH
37502: CALL_OW 488
37506: IFFALSE 37537
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37508: LD_VAR 0 13
37512: PPUSH
37513: LD_VAR 0 16
37517: PUSH
37518: LD_INT 1
37520: ARRAY
37521: PPUSH
37522: LD_VAR 0 16
37526: PUSH
37527: LD_INT 2
37529: ARRAY
37530: PPUSH
37531: CALL_OW 111
// continue ;
37535: GO 37027
// end ; end ; r := GetDir ( tmp ) ;
37537: LD_ADDR_VAR 0 15
37541: PUSH
37542: LD_VAR 0 13
37546: PPUSH
37547: CALL_OW 254
37551: ST_TO_ADDR
// if r = 5 then
37552: LD_VAR 0 15
37556: PUSH
37557: LD_INT 5
37559: EQUAL
37560: IFFALSE 37570
// r := 0 ;
37562: LD_ADDR_VAR 0 15
37566: PUSH
37567: LD_INT 0
37569: ST_TO_ADDR
// for j = r to 5 do
37570: LD_ADDR_VAR 0 10
37574: PUSH
37575: DOUBLE
37576: LD_VAR 0 15
37580: DEC
37581: ST_TO_ADDR
37582: LD_INT 5
37584: PUSH
37585: FOR_TO
37586: IFFALSE 37700
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37588: LD_ADDR_VAR 0 11
37592: PUSH
37593: LD_VAR 0 13
37597: PPUSH
37598: CALL_OW 250
37602: PPUSH
37603: LD_VAR 0 10
37607: PPUSH
37608: LD_INT 2
37610: PPUSH
37611: CALL_OW 272
37615: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37616: LD_ADDR_VAR 0 12
37620: PUSH
37621: LD_VAR 0 13
37625: PPUSH
37626: CALL_OW 251
37630: PPUSH
37631: LD_VAR 0 10
37635: PPUSH
37636: LD_INT 2
37638: PPUSH
37639: CALL_OW 273
37643: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37644: LD_VAR 0 11
37648: PPUSH
37649: LD_VAR 0 12
37653: PPUSH
37654: CALL_OW 488
37658: PUSH
37659: LD_VAR 0 11
37663: PPUSH
37664: LD_VAR 0 12
37668: PPUSH
37669: CALL_OW 428
37673: NOT
37674: AND
37675: IFFALSE 37698
// begin ComMoveXY ( tmp , _x , _y ) ;
37677: LD_VAR 0 13
37681: PPUSH
37682: LD_VAR 0 11
37686: PPUSH
37687: LD_VAR 0 12
37691: PPUSH
37692: CALL_OW 111
// break ;
37696: GO 37700
// end ; end ;
37698: GO 37585
37700: POP
37701: POP
// end ; end ;
37702: GO 37027
37704: POP
37705: POP
// end ;
37706: LD_VAR 0 8
37710: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37711: LD_INT 0
37713: PPUSH
// result := true ;
37714: LD_ADDR_VAR 0 3
37718: PUSH
37719: LD_INT 1
37721: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37722: LD_VAR 0 2
37726: PUSH
37727: LD_INT 24
37729: DOUBLE
37730: EQUAL
37731: IFTRUE 37741
37733: LD_INT 33
37735: DOUBLE
37736: EQUAL
37737: IFTRUE 37741
37739: GO 37766
37741: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37742: LD_ADDR_VAR 0 3
37746: PUSH
37747: LD_INT 32
37749: PPUSH
37750: LD_VAR 0 1
37754: PPUSH
37755: CALL_OW 321
37759: PUSH
37760: LD_INT 2
37762: EQUAL
37763: ST_TO_ADDR
37764: GO 38086
37766: LD_INT 20
37768: DOUBLE
37769: EQUAL
37770: IFTRUE 37774
37772: GO 37799
37774: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37775: LD_ADDR_VAR 0 3
37779: PUSH
37780: LD_INT 6
37782: PPUSH
37783: LD_VAR 0 1
37787: PPUSH
37788: CALL_OW 321
37792: PUSH
37793: LD_INT 2
37795: EQUAL
37796: ST_TO_ADDR
37797: GO 38086
37799: LD_INT 22
37801: DOUBLE
37802: EQUAL
37803: IFTRUE 37813
37805: LD_INT 36
37807: DOUBLE
37808: EQUAL
37809: IFTRUE 37813
37811: GO 37838
37813: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37814: LD_ADDR_VAR 0 3
37818: PUSH
37819: LD_INT 15
37821: PPUSH
37822: LD_VAR 0 1
37826: PPUSH
37827: CALL_OW 321
37831: PUSH
37832: LD_INT 2
37834: EQUAL
37835: ST_TO_ADDR
37836: GO 38086
37838: LD_INT 30
37840: DOUBLE
37841: EQUAL
37842: IFTRUE 37846
37844: GO 37871
37846: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37847: LD_ADDR_VAR 0 3
37851: PUSH
37852: LD_INT 20
37854: PPUSH
37855: LD_VAR 0 1
37859: PPUSH
37860: CALL_OW 321
37864: PUSH
37865: LD_INT 2
37867: EQUAL
37868: ST_TO_ADDR
37869: GO 38086
37871: LD_INT 28
37873: DOUBLE
37874: EQUAL
37875: IFTRUE 37885
37877: LD_INT 21
37879: DOUBLE
37880: EQUAL
37881: IFTRUE 37885
37883: GO 37910
37885: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37886: LD_ADDR_VAR 0 3
37890: PUSH
37891: LD_INT 21
37893: PPUSH
37894: LD_VAR 0 1
37898: PPUSH
37899: CALL_OW 321
37903: PUSH
37904: LD_INT 2
37906: EQUAL
37907: ST_TO_ADDR
37908: GO 38086
37910: LD_INT 16
37912: DOUBLE
37913: EQUAL
37914: IFTRUE 37918
37916: GO 37945
37918: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37919: LD_ADDR_VAR 0 3
37923: PUSH
37924: LD_EXP 30
37928: PPUSH
37929: LD_VAR 0 1
37933: PPUSH
37934: CALL_OW 321
37938: PUSH
37939: LD_INT 2
37941: EQUAL
37942: ST_TO_ADDR
37943: GO 38086
37945: LD_INT 19
37947: DOUBLE
37948: EQUAL
37949: IFTRUE 37959
37951: LD_INT 23
37953: DOUBLE
37954: EQUAL
37955: IFTRUE 37959
37957: GO 37986
37959: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37960: LD_ADDR_VAR 0 3
37964: PUSH
37965: LD_EXP 29
37969: PPUSH
37970: LD_VAR 0 1
37974: PPUSH
37975: CALL_OW 321
37979: PUSH
37980: LD_INT 2
37982: EQUAL
37983: ST_TO_ADDR
37984: GO 38086
37986: LD_INT 17
37988: DOUBLE
37989: EQUAL
37990: IFTRUE 37994
37992: GO 38019
37994: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37995: LD_ADDR_VAR 0 3
37999: PUSH
38000: LD_INT 39
38002: PPUSH
38003: LD_VAR 0 1
38007: PPUSH
38008: CALL_OW 321
38012: PUSH
38013: LD_INT 2
38015: EQUAL
38016: ST_TO_ADDR
38017: GO 38086
38019: LD_INT 18
38021: DOUBLE
38022: EQUAL
38023: IFTRUE 38027
38025: GO 38052
38027: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38028: LD_ADDR_VAR 0 3
38032: PUSH
38033: LD_INT 40
38035: PPUSH
38036: LD_VAR 0 1
38040: PPUSH
38041: CALL_OW 321
38045: PUSH
38046: LD_INT 2
38048: EQUAL
38049: ST_TO_ADDR
38050: GO 38086
38052: LD_INT 27
38054: DOUBLE
38055: EQUAL
38056: IFTRUE 38060
38058: GO 38085
38060: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38061: LD_ADDR_VAR 0 3
38065: PUSH
38066: LD_INT 35
38068: PPUSH
38069: LD_VAR 0 1
38073: PPUSH
38074: CALL_OW 321
38078: PUSH
38079: LD_INT 2
38081: EQUAL
38082: ST_TO_ADDR
38083: GO 38086
38085: POP
// end ;
38086: LD_VAR 0 3
38090: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38091: LD_INT 0
38093: PPUSH
38094: PPUSH
38095: PPUSH
38096: PPUSH
38097: PPUSH
38098: PPUSH
38099: PPUSH
38100: PPUSH
38101: PPUSH
38102: PPUSH
38103: PPUSH
// result := false ;
38104: LD_ADDR_VAR 0 6
38108: PUSH
38109: LD_INT 0
38111: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38112: LD_VAR 0 1
38116: NOT
38117: PUSH
38118: LD_VAR 0 1
38122: PPUSH
38123: CALL_OW 266
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: IN
38138: NOT
38139: OR
38140: PUSH
38141: LD_VAR 0 2
38145: NOT
38146: OR
38147: PUSH
38148: LD_VAR 0 5
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: LD_INT 4
38167: PUSH
38168: LD_INT 5
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: IN
38179: NOT
38180: OR
38181: PUSH
38182: LD_VAR 0 3
38186: PPUSH
38187: LD_VAR 0 4
38191: PPUSH
38192: CALL_OW 488
38196: NOT
38197: OR
38198: IFFALSE 38202
// exit ;
38200: GO 38938
// side := GetSide ( depot ) ;
38202: LD_ADDR_VAR 0 9
38206: PUSH
38207: LD_VAR 0 1
38211: PPUSH
38212: CALL_OW 255
38216: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38217: LD_VAR 0 9
38221: PPUSH
38222: LD_VAR 0 2
38226: PPUSH
38227: CALL 37711 0 2
38231: NOT
38232: IFFALSE 38236
// exit ;
38234: GO 38938
// pom := GetBase ( depot ) ;
38236: LD_ADDR_VAR 0 10
38240: PUSH
38241: LD_VAR 0 1
38245: PPUSH
38246: CALL_OW 274
38250: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38251: LD_ADDR_VAR 0 11
38255: PUSH
38256: LD_VAR 0 2
38260: PPUSH
38261: LD_VAR 0 1
38265: PPUSH
38266: CALL_OW 248
38270: PPUSH
38271: CALL_OW 450
38275: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38276: LD_VAR 0 10
38280: PPUSH
38281: LD_INT 1
38283: PPUSH
38284: CALL_OW 275
38288: PUSH
38289: LD_VAR 0 11
38293: PUSH
38294: LD_INT 1
38296: ARRAY
38297: GREATEREQUAL
38298: PUSH
38299: LD_VAR 0 10
38303: PPUSH
38304: LD_INT 2
38306: PPUSH
38307: CALL_OW 275
38311: PUSH
38312: LD_VAR 0 11
38316: PUSH
38317: LD_INT 2
38319: ARRAY
38320: GREATEREQUAL
38321: AND
38322: PUSH
38323: LD_VAR 0 10
38327: PPUSH
38328: LD_INT 3
38330: PPUSH
38331: CALL_OW 275
38335: PUSH
38336: LD_VAR 0 11
38340: PUSH
38341: LD_INT 3
38343: ARRAY
38344: GREATEREQUAL
38345: AND
38346: NOT
38347: IFFALSE 38351
// exit ;
38349: GO 38938
// if GetBType ( depot ) = b_depot then
38351: LD_VAR 0 1
38355: PPUSH
38356: CALL_OW 266
38360: PUSH
38361: LD_INT 0
38363: EQUAL
38364: IFFALSE 38376
// dist := 28 else
38366: LD_ADDR_VAR 0 14
38370: PUSH
38371: LD_INT 28
38373: ST_TO_ADDR
38374: GO 38384
// dist := 36 ;
38376: LD_ADDR_VAR 0 14
38380: PUSH
38381: LD_INT 36
38383: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38384: LD_VAR 0 1
38388: PPUSH
38389: LD_VAR 0 3
38393: PPUSH
38394: LD_VAR 0 4
38398: PPUSH
38399: CALL_OW 297
38403: PUSH
38404: LD_VAR 0 14
38408: GREATER
38409: IFFALSE 38413
// exit ;
38411: GO 38938
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38413: LD_ADDR_VAR 0 12
38417: PUSH
38418: LD_VAR 0 2
38422: PPUSH
38423: LD_VAR 0 3
38427: PPUSH
38428: LD_VAR 0 4
38432: PPUSH
38433: LD_VAR 0 5
38437: PPUSH
38438: LD_VAR 0 1
38442: PPUSH
38443: CALL_OW 248
38447: PPUSH
38448: LD_INT 0
38450: PPUSH
38451: CALL 38943 0 6
38455: ST_TO_ADDR
// if not hexes then
38456: LD_VAR 0 12
38460: NOT
38461: IFFALSE 38465
// exit ;
38463: GO 38938
// hex := GetHexInfo ( x , y ) ;
38465: LD_ADDR_VAR 0 15
38469: PUSH
38470: LD_VAR 0 3
38474: PPUSH
38475: LD_VAR 0 4
38479: PPUSH
38480: CALL_OW 546
38484: ST_TO_ADDR
// if hex [ 1 ] then
38485: LD_VAR 0 15
38489: PUSH
38490: LD_INT 1
38492: ARRAY
38493: IFFALSE 38497
// exit ;
38495: GO 38938
// height := hex [ 2 ] ;
38497: LD_ADDR_VAR 0 13
38501: PUSH
38502: LD_VAR 0 15
38506: PUSH
38507: LD_INT 2
38509: ARRAY
38510: ST_TO_ADDR
// for i = 1 to hexes do
38511: LD_ADDR_VAR 0 7
38515: PUSH
38516: DOUBLE
38517: LD_INT 1
38519: DEC
38520: ST_TO_ADDR
38521: LD_VAR 0 12
38525: PUSH
38526: FOR_TO
38527: IFFALSE 38857
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38529: LD_VAR 0 12
38533: PUSH
38534: LD_VAR 0 7
38538: ARRAY
38539: PUSH
38540: LD_INT 1
38542: ARRAY
38543: PPUSH
38544: LD_VAR 0 12
38548: PUSH
38549: LD_VAR 0 7
38553: ARRAY
38554: PUSH
38555: LD_INT 2
38557: ARRAY
38558: PPUSH
38559: CALL_OW 488
38563: NOT
38564: PUSH
38565: LD_VAR 0 12
38569: PUSH
38570: LD_VAR 0 7
38574: ARRAY
38575: PUSH
38576: LD_INT 1
38578: ARRAY
38579: PPUSH
38580: LD_VAR 0 12
38584: PUSH
38585: LD_VAR 0 7
38589: ARRAY
38590: PUSH
38591: LD_INT 2
38593: ARRAY
38594: PPUSH
38595: CALL_OW 428
38599: PUSH
38600: LD_INT 0
38602: GREATER
38603: OR
38604: PUSH
38605: LD_VAR 0 12
38609: PUSH
38610: LD_VAR 0 7
38614: ARRAY
38615: PUSH
38616: LD_INT 1
38618: ARRAY
38619: PPUSH
38620: LD_VAR 0 12
38624: PUSH
38625: LD_VAR 0 7
38629: ARRAY
38630: PUSH
38631: LD_INT 2
38633: ARRAY
38634: PPUSH
38635: CALL_OW 351
38639: OR
38640: IFFALSE 38646
// exit ;
38642: POP
38643: POP
38644: GO 38938
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38646: LD_ADDR_VAR 0 8
38650: PUSH
38651: LD_VAR 0 12
38655: PUSH
38656: LD_VAR 0 7
38660: ARRAY
38661: PUSH
38662: LD_INT 1
38664: ARRAY
38665: PPUSH
38666: LD_VAR 0 12
38670: PUSH
38671: LD_VAR 0 7
38675: ARRAY
38676: PUSH
38677: LD_INT 2
38679: ARRAY
38680: PPUSH
38681: CALL_OW 546
38685: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38686: LD_VAR 0 8
38690: PUSH
38691: LD_INT 1
38693: ARRAY
38694: PUSH
38695: LD_VAR 0 8
38699: PUSH
38700: LD_INT 2
38702: ARRAY
38703: PUSH
38704: LD_VAR 0 13
38708: PUSH
38709: LD_INT 2
38711: PLUS
38712: GREATER
38713: OR
38714: PUSH
38715: LD_VAR 0 8
38719: PUSH
38720: LD_INT 2
38722: ARRAY
38723: PUSH
38724: LD_VAR 0 13
38728: PUSH
38729: LD_INT 2
38731: MINUS
38732: LESS
38733: OR
38734: PUSH
38735: LD_VAR 0 8
38739: PUSH
38740: LD_INT 3
38742: ARRAY
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: LD_INT 8
38749: PUSH
38750: LD_INT 9
38752: PUSH
38753: LD_INT 10
38755: PUSH
38756: LD_INT 11
38758: PUSH
38759: LD_INT 12
38761: PUSH
38762: LD_INT 13
38764: PUSH
38765: LD_INT 16
38767: PUSH
38768: LD_INT 17
38770: PUSH
38771: LD_INT 18
38773: PUSH
38774: LD_INT 19
38776: PUSH
38777: LD_INT 20
38779: PUSH
38780: LD_INT 21
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: IN
38798: NOT
38799: OR
38800: PUSH
38801: LD_VAR 0 8
38805: PUSH
38806: LD_INT 5
38808: ARRAY
38809: NOT
38810: OR
38811: PUSH
38812: LD_VAR 0 8
38816: PUSH
38817: LD_INT 6
38819: ARRAY
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: LD_INT 7
38829: PUSH
38830: LD_INT 9
38832: PUSH
38833: LD_INT 10
38835: PUSH
38836: LD_INT 11
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: IN
38847: NOT
38848: OR
38849: IFFALSE 38855
// exit ;
38851: POP
38852: POP
38853: GO 38938
// end ;
38855: GO 38526
38857: POP
38858: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38859: LD_VAR 0 9
38863: PPUSH
38864: LD_VAR 0 3
38868: PPUSH
38869: LD_VAR 0 4
38873: PPUSH
38874: LD_INT 20
38876: PPUSH
38877: CALL 30884 0 4
38881: PUSH
38882: LD_INT 4
38884: ARRAY
38885: IFFALSE 38889
// exit ;
38887: GO 38938
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38889: LD_VAR 0 2
38893: PUSH
38894: LD_INT 29
38896: PUSH
38897: LD_INT 30
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: IN
38904: PUSH
38905: LD_VAR 0 3
38909: PPUSH
38910: LD_VAR 0 4
38914: PPUSH
38915: LD_VAR 0 9
38919: PPUSH
38920: CALL_OW 440
38924: NOT
38925: AND
38926: IFFALSE 38930
// exit ;
38928: GO 38938
// result := true ;
38930: LD_ADDR_VAR 0 6
38934: PUSH
38935: LD_INT 1
38937: ST_TO_ADDR
// end ;
38938: LD_VAR 0 6
38942: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38943: LD_INT 0
38945: PPUSH
38946: PPUSH
38947: PPUSH
38948: PPUSH
38949: PPUSH
38950: PPUSH
38951: PPUSH
38952: PPUSH
38953: PPUSH
38954: PPUSH
38955: PPUSH
38956: PPUSH
38957: PPUSH
38958: PPUSH
38959: PPUSH
38960: PPUSH
38961: PPUSH
38962: PPUSH
38963: PPUSH
38964: PPUSH
38965: PPUSH
38966: PPUSH
38967: PPUSH
38968: PPUSH
38969: PPUSH
38970: PPUSH
38971: PPUSH
38972: PPUSH
38973: PPUSH
38974: PPUSH
38975: PPUSH
38976: PPUSH
38977: PPUSH
38978: PPUSH
38979: PPUSH
38980: PPUSH
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
38987: PPUSH
38988: PPUSH
38989: PPUSH
38990: PPUSH
38991: PPUSH
38992: PPUSH
38993: PPUSH
38994: PPUSH
38995: PPUSH
38996: PPUSH
38997: PPUSH
38998: PPUSH
38999: PPUSH
39000: PPUSH
39001: PPUSH
39002: PPUSH
// result = [ ] ;
39003: LD_ADDR_VAR 0 7
39007: PUSH
39008: EMPTY
39009: ST_TO_ADDR
// temp_list = [ ] ;
39010: LD_ADDR_VAR 0 9
39014: PUSH
39015: EMPTY
39016: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39017: LD_VAR 0 4
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 3
39033: PUSH
39034: LD_INT 4
39036: PUSH
39037: LD_INT 5
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: IN
39048: NOT
39049: PUSH
39050: LD_VAR 0 1
39054: PUSH
39055: LD_INT 0
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: IN
39065: PUSH
39066: LD_VAR 0 5
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: LD_INT 2
39076: PUSH
39077: LD_INT 3
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: LIST
39084: IN
39085: NOT
39086: AND
39087: OR
39088: IFFALSE 39092
// exit ;
39090: GO 57483
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39092: LD_VAR 0 1
39096: PUSH
39097: LD_INT 6
39099: PUSH
39100: LD_INT 7
39102: PUSH
39103: LD_INT 8
39105: PUSH
39106: LD_INT 13
39108: PUSH
39109: LD_INT 12
39111: PUSH
39112: LD_INT 15
39114: PUSH
39115: LD_INT 11
39117: PUSH
39118: LD_INT 14
39120: PUSH
39121: LD_INT 10
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: IN
39135: IFFALSE 39145
// btype = b_lab ;
39137: LD_ADDR_VAR 0 1
39141: PUSH
39142: LD_INT 6
39144: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39145: LD_VAR 0 6
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: LD_INT 2
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: LIST
39163: IN
39164: NOT
39165: PUSH
39166: LD_VAR 0 1
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: LD_INT 3
39182: PUSH
39183: LD_INT 6
39185: PUSH
39186: LD_INT 36
39188: PUSH
39189: LD_INT 4
39191: PUSH
39192: LD_INT 5
39194: PUSH
39195: LD_INT 31
39197: PUSH
39198: LD_INT 32
39200: PUSH
39201: LD_INT 33
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: IN
39217: NOT
39218: PUSH
39219: LD_VAR 0 6
39223: PUSH
39224: LD_INT 1
39226: EQUAL
39227: AND
39228: OR
39229: PUSH
39230: LD_VAR 0 1
39234: PUSH
39235: LD_INT 2
39237: PUSH
39238: LD_INT 3
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: IN
39245: NOT
39246: PUSH
39247: LD_VAR 0 6
39251: PUSH
39252: LD_INT 2
39254: EQUAL
39255: AND
39256: OR
39257: IFFALSE 39267
// mode = 0 ;
39259: LD_ADDR_VAR 0 6
39263: PUSH
39264: LD_INT 0
39266: ST_TO_ADDR
// case mode of 0 :
39267: LD_VAR 0 6
39271: PUSH
39272: LD_INT 0
39274: DOUBLE
39275: EQUAL
39276: IFTRUE 39280
39278: GO 50733
39280: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39281: LD_ADDR_VAR 0 11
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: PUSH
39397: LD_INT 2
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 1
39416: NEG
39417: PUSH
39418: LD_INT 1
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: PUSH
39428: LD_INT 3
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 0
39437: PUSH
39438: LD_INT 3
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: LD_INT 2
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39474: LD_ADDR_VAR 0 12
39478: PUSH
39479: LD_INT 0
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: LD_INT 1
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 2
39597: NEG
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 2
39608: NEG
39609: PUSH
39610: LD_INT 1
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 2
39620: NEG
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 3
39631: NEG
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 3
39642: NEG
39643: PUSH
39644: LD_INT 1
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39670: LD_ADDR_VAR 0 13
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: LD_INT 1
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: LD_INT 2
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 2
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 2
39773: PUSH
39774: LD_INT 2
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: LD_INT 2
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 2
39793: NEG
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: LD_INT 2
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: LD_INT 3
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 3
39829: NEG
39830: PUSH
39831: LD_INT 2
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 3
39841: NEG
39842: PUSH
39843: LD_INT 3
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39869: LD_ADDR_VAR 0 14
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 0
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: LD_INT 1
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: NEG
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: LD_INT 1
39942: NEG
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: NEG
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: LD_INT 2
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: LD_INT 3
40019: NEG
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 3
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 1
40038: PUSH
40039: LD_INT 2
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40065: LD_ADDR_VAR 0 15
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 0
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: LD_INT 1
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 1
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: NEG
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 2
40188: NEG
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 3
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 3
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40258: LD_ADDR_VAR 0 16
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: LD_INT 2
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: NEG
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: LD_INT 2
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 3
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 3
40415: PUSH
40416: LD_INT 3
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: PUSH
40426: LD_INT 3
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40451: LD_ADDR_VAR 0 17
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: LD_INT 2
40536: NEG
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 0
40544: PUSH
40545: LD_INT 2
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 2
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: LD_INT 2
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 1
40616: NEG
40617: PUSH
40618: LD_INT 1
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 2
40627: NEG
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 2
40638: NEG
40639: PUSH
40640: LD_INT 1
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 2
40650: NEG
40651: PUSH
40652: LD_INT 2
40654: NEG
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40681: LD_ADDR_VAR 0 18
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 0
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 1
40750: NEG
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: LD_INT 2
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 2
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 2
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: LD_INT 2
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 2
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 1
40846: NEG
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 2
40857: NEG
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 2
40868: NEG
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 2
40880: NEG
40881: PUSH
40882: LD_INT 2
40884: NEG
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40911: LD_ADDR_VAR 0 19
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 0
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: LD_INT 2
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: LD_INT 2
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: LD_INT 1
41018: NEG
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 2
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 2
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 2
41087: NEG
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 2
41098: NEG
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41141: LD_ADDR_VAR 0 20
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 0
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 1
41210: NEG
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: LD_INT 2
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: LD_INT 2
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: LD_INT 1
41248: NEG
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 2
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 2
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 1
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 1
41306: NEG
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 2
41317: NEG
41318: PUSH
41319: LD_INT 0
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 2
41340: NEG
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41371: LD_ADDR_VAR 0 21
41375: PUSH
41376: LD_INT 0
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 1
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: NEG
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: NEG
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: LD_INT 2
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: LD_INT 2
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 2
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 2
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 2
41558: NEG
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 2
41570: NEG
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41601: LD_ADDR_VAR 0 22
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 1
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: NEG
41660: PUSH
41661: LD_INT 0
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: LD_INT 2
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: LD_INT 2
41697: NEG
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 2
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: NEG
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 2
41777: NEG
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 2
41788: NEG
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 2
41800: NEG
41801: PUSH
41802: LD_INT 2
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41831: LD_ADDR_VAR 0 23
41835: PUSH
41836: LD_INT 0
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 0
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: LD_INT 2
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 2
42007: NEG
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 2
42030: NEG
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 2
42042: NEG
42043: PUSH
42044: LD_INT 3
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: NEG
42055: PUSH
42056: LD_INT 3
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: LD_INT 2
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 2
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42111: LD_ADDR_VAR 0 24
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: LD_INT 2
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 2
42298: NEG
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 2
42310: NEG
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 2
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 3
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 3
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42387: LD_ADDR_VAR 0 25
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 0
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: LD_INT 1
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: NEG
42469: PUSH
42470: LD_INT 2
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 0
42480: PUSH
42481: LD_INT 2
42483: NEG
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: LD_INT 1
42494: NEG
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 2
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 2
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 2
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 2
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: LD_INT 2
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: NEG
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 2
42574: NEG
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 2
42586: NEG
42587: PUSH
42588: LD_INT 2
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 3
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 3
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: LD_INT 3
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: LD_INT 3
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42661: LD_ADDR_VAR 0 26
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: LD_INT 1
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 2
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 2
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 2
42837: NEG
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 2
42848: NEG
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 2
42860: NEG
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 2
42872: PUSH
42873: LD_INT 3
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 3
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42937: LD_ADDR_VAR 0 27
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: LD_INT 2
43022: NEG
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: LD_INT 2
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 2
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 2
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: LD_INT 2
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: LD_INT 2
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: LD_INT 1
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 2
43113: NEG
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 2
43136: NEG
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 3
43170: NEG
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 3
43182: NEG
43183: PUSH
43184: LD_INT 2
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43217: LD_ADDR_VAR 0 28
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: LD_INT 2
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: LD_INT 1
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 2
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: LD_INT 2
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: LD_INT 1
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 2
43393: NEG
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 2
43404: NEG
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 2
43416: NEG
43417: PUSH
43418: LD_INT 2
43420: NEG
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 2
43428: NEG
43429: PUSH
43430: LD_INT 3
43432: NEG
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: LD_INT 3
43444: NEG
43445: PUSH
43446: EMPTY
43447: LIST
43448: LIST
43449: PUSH
43450: LD_INT 3
43452: NEG
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 3
43464: NEG
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43499: LD_ADDR_VAR 0 29
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 0
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: LD_INT 2
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 2
43677: NEG
43678: PUSH
43679: LD_INT 2
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 2
43689: NEG
43690: PUSH
43691: LD_INT 3
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 3
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 3
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 3
43743: NEG
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43778: LD_ADDR_VAR 0 30
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: LD_INT 0
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: LD_INT 2
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: LD_INT 2
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: LD_INT 1
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: LD_INT 3
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: LD_INT 2
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 3
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: LD_INT 3
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 3
44021: NEG
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44056: LD_ADDR_VAR 0 31
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: LD_INT 2
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 2
44245: NEG
44246: PUSH
44247: LD_INT 3
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: LD_INT 1
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 3
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: LD_INT 3
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 3
44299: NEG
44300: PUSH
44301: LD_INT 2
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44334: LD_ADDR_VAR 0 32
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 0
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 2
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 2
44511: NEG
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: NEG
44524: PUSH
44525: LD_INT 3
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 3
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: LD_INT 3
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 3
44577: NEG
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44612: LD_ADDR_VAR 0 33
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: LD_INT 2
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: LD_INT 2
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: LD_INT 0
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: NEG
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: NEG
44803: PUSH
44804: LD_INT 3
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 3
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: LD_INT 3
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 3
44856: NEG
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44891: LD_ADDR_VAR 0 34
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 2
45047: NEG
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 3
45086: NEG
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 3
45105: PUSH
45106: LD_INT 2
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 2
45115: PUSH
45116: LD_INT 3
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 3
45136: NEG
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45171: LD_ADDR_VAR 0 35
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: NEG
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45283: LD_ADDR_VAR 0 36
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: NEG
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45395: LD_ADDR_VAR 0 37
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45507: LD_ADDR_VAR 0 38
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45619: LD_ADDR_VAR 0 39
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: NEG
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45731: LD_ADDR_VAR 0 40
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: PUSH
45770: LD_INT 1
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45843: LD_ADDR_VAR 0 41
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: PUSH
45968: LD_INT 2
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 2
46021: NEG
46022: PUSH
46023: LD_INT 2
46025: NEG
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: NEG
46034: PUSH
46035: LD_INT 3
46037: NEG
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 3
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 3
46076: PUSH
46077: LD_INT 2
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 3
46086: PUSH
46087: LD_INT 3
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: LD_INT 3
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 2
46106: NEG
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 3
46128: NEG
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 3
46140: NEG
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 3
46152: NEG
46153: PUSH
46154: LD_INT 3
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46193: LD_ADDR_VAR 0 42
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 1
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 2
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: LD_INT 2
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: LD_INT 3
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: LD_INT 3
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 3
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 3
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 3
46439: PUSH
46440: LD_INT 3
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: LD_INT 3
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: LD_INT 3
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 3
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 3
46490: NEG
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 3
46502: NEG
46503: PUSH
46504: LD_INT 3
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46543: LD_ADDR_VAR 0 43
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: NEG
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 2
46709: NEG
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 2
46720: NEG
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: LD_INT 3
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 3
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 2
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 3
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 3
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: LD_INT 3
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 3
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: NEG
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 3
46839: NEG
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 3
46850: NEG
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46891: LD_ADDR_VAR 0 44
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: NEG
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: LD_INT 2
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 3
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 3
47104: PUSH
47105: LD_INT 0
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 3
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 3
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 3
47134: PUSH
47135: LD_INT 3
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: LD_INT 3
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 3
47165: NEG
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: NEG
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 3
47188: NEG
47189: PUSH
47190: LD_INT 2
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 3
47200: NEG
47201: PUSH
47202: LD_INT 3
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47241: LD_ADDR_VAR 0 45
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: LD_INT 2
47419: NEG
47420: PUSH
47421: LD_INT 2
47423: NEG
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: LD_INT 3
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: LD_INT 3
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 3
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: LD_INT 2
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 3
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 3
47487: PUSH
47488: LD_INT 3
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 2
47497: PUSH
47498: LD_INT 3
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: LD_INT 3
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 3
47538: NEG
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 3
47550: NEG
47551: PUSH
47552: LD_INT 3
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47591: LD_ADDR_VAR 0 46
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 2
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 2
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 0
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 3
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 3
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 2
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 2
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 3
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 3
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 3
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 3
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 3
47887: NEG
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 3
47898: NEG
47899: PUSH
47900: LD_INT 1
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47939: LD_ADDR_VAR 0 47
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: NEG
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48090: LD_ADDR_VAR 0 48
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 2
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48237: LD_ADDR_VAR 0 49
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: LD_INT 0
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 2
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48381: LD_ADDR_VAR 0 50
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 0
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: LD_INT 0
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 2
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48525: LD_ADDR_VAR 0 51
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 1
48583: NEG
48584: PUSH
48585: LD_INT 0
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48672: LD_ADDR_VAR 0 52
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: LD_INT 2
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48823: LD_ADDR_VAR 0 53
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 2
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 2
48999: NEG
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49053: LD_ADDR_VAR 0 54
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 2
49138: NEG
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 2
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49283: LD_ADDR_VAR 0 55
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: LD_INT 1
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 0
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: LD_INT 2
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49513: LD_ADDR_VAR 0 56
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: LD_INT 2
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: LD_INT 1
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 2
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: LD_INT 2
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49743: LD_ADDR_VAR 0 57
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: LD_INT 2
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 0
49836: PUSH
49837: LD_INT 2
49839: NEG
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: PUSH
49848: LD_INT 1
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 2
49878: PUSH
49879: LD_INT 2
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 0
49898: PUSH
49899: LD_INT 2
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: LD_INT 1
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: NEG
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49973: LD_ADDR_VAR 0 58
49977: PUSH
49978: LD_INT 0
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 2
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: LD_INT 2
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 2
50172: NEG
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50203: LD_ADDR_VAR 0 59
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50291: LD_ADDR_VAR 0 60
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50379: LD_ADDR_VAR 0 61
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50467: LD_ADDR_VAR 0 62
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50555: LD_ADDR_VAR 0 63
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50643: LD_ADDR_VAR 0 64
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: ST_TO_ADDR
// end ; 1 :
50731: GO 56628
50733: LD_INT 1
50735: DOUBLE
50736: EQUAL
50737: IFTRUE 50741
50739: GO 53364
50741: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50742: LD_ADDR_VAR 0 11
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: LD_INT 3
50753: NEG
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: LIST
50785: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50786: LD_ADDR_VAR 0 12
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 3
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 3
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: LIST
50826: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50827: LD_ADDR_VAR 0 13
50831: PUSH
50832: LD_INT 3
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 3
50844: PUSH
50845: LD_INT 3
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: LD_INT 3
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: LIST
50866: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50867: LD_ADDR_VAR 0 14
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 3
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 3
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: LIST
50907: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50908: LD_ADDR_VAR 0 15
50912: PUSH
50913: LD_INT 2
50915: NEG
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 3
50926: NEG
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 3
50937: NEG
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: LIST
50951: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50952: LD_ADDR_VAR 0 16
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: LD_INT 3
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 3
50971: NEG
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 3
50983: NEG
50984: PUSH
50985: LD_INT 3
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: LIST
50997: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50998: LD_ADDR_VAR 0 17
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: LD_INT 3
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 3
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: LIST
51041: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51042: LD_ADDR_VAR 0 18
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 3
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 3
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: LIST
51082: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51083: LD_ADDR_VAR 0 19
51087: PUSH
51088: LD_INT 3
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 3
51100: PUSH
51101: LD_INT 3
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: PUSH
51111: LD_INT 3
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51123: LD_ADDR_VAR 0 20
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: LD_INT 3
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 3
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: LD_INT 2
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: LIST
51163: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51164: LD_ADDR_VAR 0 21
51168: PUSH
51169: LD_INT 2
51171: NEG
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 3
51182: NEG
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 3
51193: NEG
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: LIST
51207: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51208: LD_ADDR_VAR 0 22
51212: PUSH
51213: LD_INT 2
51215: NEG
51216: PUSH
51217: LD_INT 3
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 3
51227: NEG
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 3
51239: NEG
51240: PUSH
51241: LD_INT 3
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: LIST
51253: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51254: LD_ADDR_VAR 0 23
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: LD_INT 3
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 4
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: LIST
51297: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51298: LD_ADDR_VAR 0 24
51302: PUSH
51303: LD_INT 3
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 3
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 4
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: LIST
51338: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51339: LD_ADDR_VAR 0 25
51343: PUSH
51344: LD_INT 3
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 4
51356: PUSH
51357: LD_INT 3
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 3
51366: PUSH
51367: LD_INT 4
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: LIST
51378: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51379: LD_ADDR_VAR 0 26
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: LD_INT 3
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 4
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 3
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: LIST
51419: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51420: LD_ADDR_VAR 0 27
51424: PUSH
51425: LD_INT 3
51427: NEG
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 3
51438: NEG
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 4
51449: NEG
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51464: LD_ADDR_VAR 0 28
51468: PUSH
51469: LD_INT 3
51471: NEG
51472: PUSH
51473: LD_INT 3
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 3
51483: NEG
51484: PUSH
51485: LD_INT 4
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 4
51495: NEG
51496: PUSH
51497: LD_INT 3
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51510: LD_ADDR_VAR 0 29
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 3
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: LD_INT 3
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: LD_INT 4
51555: NEG
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 4
51566: NEG
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: LD_INT 3
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 5
51589: NEG
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: LD_INT 5
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: LD_INT 4
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: LD_INT 6
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: LD_INT 6
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: LD_INT 5
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51665: LD_ADDR_VAR 0 30
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 1
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 3
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 3
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 4
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 4
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 4
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 5
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 5
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 5
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 6
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 6
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51808: LD_ADDR_VAR 0 31
51812: PUSH
51813: LD_INT 3
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 3
51825: PUSH
51826: LD_INT 3
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: LD_INT 3
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 4
51845: PUSH
51846: LD_INT 3
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 4
51855: PUSH
51856: LD_INT 4
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 3
51865: PUSH
51866: LD_INT 4
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 5
51875: PUSH
51876: LD_INT 4
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 5
51885: PUSH
51886: LD_INT 5
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 4
51895: PUSH
51896: LD_INT 5
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 6
51905: PUSH
51906: LD_INT 5
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 6
51915: PUSH
51916: LD_INT 6
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 5
51925: PUSH
51926: LD_INT 6
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51947: LD_ADDR_VAR 0 32
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: LD_INT 3
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: LD_INT 3
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: LD_INT 4
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 4
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 3
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 5
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 0
52026: PUSH
52027: LD_INT 5
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 4
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 6
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: LD_INT 6
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 5
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52090: LD_ADDR_VAR 0 33
52094: PUSH
52095: LD_INT 2
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 3
52108: NEG
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 3
52119: NEG
52120: PUSH
52121: LD_INT 1
52123: NEG
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 3
52131: NEG
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 4
52142: NEG
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 4
52153: NEG
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 4
52165: NEG
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 5
52176: NEG
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 5
52187: NEG
52188: PUSH
52189: LD_INT 1
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 5
52199: NEG
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 6
52210: NEG
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 6
52221: NEG
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52245: LD_ADDR_VAR 0 34
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: LD_INT 3
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 3
52264: NEG
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 3
52276: NEG
52277: PUSH
52278: LD_INT 3
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 3
52288: NEG
52289: PUSH
52290: LD_INT 4
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 4
52300: NEG
52301: PUSH
52302: LD_INT 3
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 4
52312: NEG
52313: PUSH
52314: LD_INT 4
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 4
52324: NEG
52325: PUSH
52326: LD_INT 5
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 5
52336: NEG
52337: PUSH
52338: LD_INT 4
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 5
52348: NEG
52349: PUSH
52350: LD_INT 5
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 5
52360: NEG
52361: PUSH
52362: LD_INT 6
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 6
52372: NEG
52373: PUSH
52374: LD_INT 5
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 6
52384: NEG
52385: PUSH
52386: LD_INT 6
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52408: LD_ADDR_VAR 0 41
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 3
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: LIST
52451: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52452: LD_ADDR_VAR 0 42
52456: PUSH
52457: LD_INT 2
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: LIST
52492: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52493: LD_ADDR_VAR 0 43
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 3
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: LD_INT 3
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: LIST
52532: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52533: LD_ADDR_VAR 0 44
52537: PUSH
52538: LD_INT 0
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 3
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: LD_INT 2
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: LIST
52573: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52574: LD_ADDR_VAR 0 45
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: NEG
52593: PUSH
52594: LD_INT 1
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 3
52603: NEG
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: LIST
52617: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52618: LD_ADDR_VAR 0 46
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: LD_INT 3
52641: NEG
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 3
52649: NEG
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: LIST
52663: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52664: LD_ADDR_VAR 0 47
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: LD_INT 3
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 3
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52697: LD_ADDR_VAR 0 48
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: LD_INT 2
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52728: LD_ADDR_VAR 0 49
52732: PUSH
52733: LD_INT 3
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 3
52745: PUSH
52746: LD_INT 2
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52757: LD_ADDR_VAR 0 50
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: LD_INT 3
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: LD_INT 3
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52786: LD_ADDR_VAR 0 51
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 2
52804: NEG
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52817: LD_ADDR_VAR 0 52
52821: PUSH
52822: LD_INT 3
52824: NEG
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 3
52836: NEG
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52850: LD_ADDR_VAR 0 53
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: LD_INT 3
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: LD_INT 3
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: LIST
52893: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52894: LD_ADDR_VAR 0 54
52898: PUSH
52899: LD_INT 2
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 3
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 3
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52935: LD_ADDR_VAR 0 55
52939: PUSH
52940: LD_INT 3
52942: PUSH
52943: LD_INT 2
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: LD_INT 3
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: LD_INT 3
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: LIST
52974: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52975: LD_ADDR_VAR 0 56
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: LD_INT 3
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: LD_INT 3
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: LD_INT 2
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: LIST
53015: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53016: LD_ADDR_VAR 0 57
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 3
53034: NEG
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 3
53045: NEG
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: LIST
53059: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53060: LD_ADDR_VAR 0 58
53064: PUSH
53065: LD_INT 2
53067: NEG
53068: PUSH
53069: LD_INT 3
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 3
53079: NEG
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 3
53091: NEG
53092: PUSH
53093: LD_INT 3
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53106: LD_ADDR_VAR 0 59
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: LIST
53149: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53150: LD_ADDR_VAR 0 60
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: LIST
53190: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53191: LD_ADDR_VAR 0 61
53195: PUSH
53196: LD_INT 2
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 2
53208: PUSH
53209: LD_INT 2
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 2
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: LIST
53230: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53231: LD_ADDR_VAR 0 62
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: LD_INT 2
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: LD_INT 2
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: LIST
53271: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53272: LD_ADDR_VAR 0 63
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 2
53290: NEG
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: LIST
53315: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53316: LD_ADDR_VAR 0 64
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 2
53335: NEG
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: LIST
53361: ST_TO_ADDR
// end ; 2 :
53362: GO 56628
53364: LD_INT 2
53366: DOUBLE
53367: EQUAL
53368: IFTRUE 53372
53370: GO 56627
53372: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53373: LD_ADDR_VAR 0 29
53377: PUSH
53378: LD_INT 4
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 4
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 5
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 5
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 4
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 3
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 3
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 5
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 3
53473: PUSH
53474: LD_INT 3
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 3
53483: PUSH
53484: LD_INT 2
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 4
53493: PUSH
53494: LD_INT 3
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 4
53503: PUSH
53504: LD_INT 4
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 3
53513: PUSH
53514: LD_INT 4
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: LD_INT 3
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 4
53543: PUSH
53544: LD_INT 2
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: LD_INT 4
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 4
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: LD_INT 3
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: LD_INT 4
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 5
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 5
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 4
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 3
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: LD_INT 5
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 2
53645: NEG
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 3
53656: NEG
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 3
53667: NEG
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 3
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 4
53712: NEG
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 4
53723: NEG
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 4
53735: NEG
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 4
53758: NEG
53759: PUSH
53760: LD_INT 4
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 4
53770: NEG
53771: PUSH
53772: LD_INT 5
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 3
53782: NEG
53783: PUSH
53784: LD_INT 4
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 3
53794: NEG
53795: PUSH
53796: LD_INT 3
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 4
53806: NEG
53807: PUSH
53808: LD_INT 3
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 5
53818: NEG
53819: PUSH
53820: LD_INT 4
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 5
53830: NEG
53831: PUSH
53832: LD_INT 5
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 3
53842: NEG
53843: PUSH
53844: LD_INT 5
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 5
53854: NEG
53855: PUSH
53856: LD_INT 3
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53911: LD_ADDR_VAR 0 30
53915: PUSH
53916: LD_INT 4
53918: PUSH
53919: LD_INT 4
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 4
53928: PUSH
53929: LD_INT 3
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 5
53938: PUSH
53939: LD_INT 4
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 5
53948: PUSH
53949: LD_INT 5
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 4
53958: PUSH
53959: LD_INT 5
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 3
53968: PUSH
53969: LD_INT 4
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 3
53978: PUSH
53979: LD_INT 3
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 5
53988: PUSH
53989: LD_INT 3
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 3
53998: PUSH
53999: LD_INT 5
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: LD_INT 3
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 2
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: LD_INT 3
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: LD_INT 4
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 4
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: LD_INT 3
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 2
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 2
54080: PUSH
54081: LD_INT 4
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 4
54101: NEG
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 4
54112: NEG
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 3
54124: NEG
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 4
54146: NEG
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 5
54157: NEG
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 5
54168: NEG
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 5
54180: NEG
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: NEG
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: NEG
54204: PUSH
54205: LD_INT 3
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 3
54215: NEG
54216: PUSH
54217: LD_INT 4
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: LD_INT 3
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 3
54251: NEG
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 4
54263: NEG
54264: PUSH
54265: LD_INT 3
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 4
54275: NEG
54276: PUSH
54277: LD_INT 4
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: LD_INT 4
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 4
54299: NEG
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: LD_INT 4
54314: NEG
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 5
54325: NEG
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 4
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: LD_INT 3
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 3
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: LD_INT 4
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 5
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: LD_INT 3
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: LD_INT 5
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54458: LD_ADDR_VAR 0 31
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: LD_INT 4
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: LD_INT 3
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 4
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 1
54495: PUSH
54496: LD_INT 5
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 5
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 4
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: LD_INT 3
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: LD_INT 5
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 3
54558: NEG
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 3
54569: NEG
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 3
54603: NEG
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 4
54614: NEG
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 4
54625: NEG
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 4
54637: NEG
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 4
54660: NEG
54661: PUSH
54662: LD_INT 4
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 4
54672: NEG
54673: PUSH
54674: LD_INT 5
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 3
54684: NEG
54685: PUSH
54686: LD_INT 4
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 3
54696: NEG
54697: PUSH
54698: LD_INT 3
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 4
54708: NEG
54709: PUSH
54710: LD_INT 3
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 5
54720: NEG
54721: PUSH
54722: LD_INT 4
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 5
54732: NEG
54733: PUSH
54734: LD_INT 5
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 3
54744: NEG
54745: PUSH
54746: LD_INT 5
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 5
54756: NEG
54757: PUSH
54758: LD_INT 3
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: LD_INT 3
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: LD_INT 4
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: LD_INT 3
54793: NEG
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 2
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: NEG
54824: PUSH
54825: LD_INT 3
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: LD_INT 4
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 2
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: NEG
54859: PUSH
54860: LD_INT 4
54862: NEG
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 4
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 4
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 5
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 5
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 4
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 3
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 3
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 3
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 5
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55008: LD_ADDR_VAR 0 32
55012: PUSH
55013: LD_INT 4
55015: NEG
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 4
55026: NEG
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 3
55038: NEG
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 3
55049: NEG
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 4
55060: NEG
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 5
55071: NEG
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 5
55082: NEG
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 5
55094: NEG
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 3
55106: NEG
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: LD_INT 3
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 3
55129: NEG
55130: PUSH
55131: LD_INT 4
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: LD_INT 2
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 3
55165: NEG
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 4
55177: NEG
55178: PUSH
55179: LD_INT 3
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 4
55189: NEG
55190: PUSH
55191: LD_INT 4
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: LD_INT 4
55205: NEG
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 4
55213: NEG
55214: PUSH
55215: LD_INT 2
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 4
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 5
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: LD_INT 4
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 3
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: LD_INT 3
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: LD_INT 4
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: LD_INT 5
55296: NEG
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: LD_INT 3
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: LD_INT 5
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 3
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 3
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 4
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 4
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 3
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 4
55410: PUSH
55411: LD_INT 2
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 4
55420: PUSH
55421: LD_INT 4
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 4
55430: PUSH
55431: LD_INT 3
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 5
55440: PUSH
55441: LD_INT 4
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 5
55450: PUSH
55451: LD_INT 5
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 4
55460: PUSH
55461: LD_INT 5
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 3
55470: PUSH
55471: LD_INT 4
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 3
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 5
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 3
55500: PUSH
55501: LD_INT 5
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55555: LD_ADDR_VAR 0 33
55559: PUSH
55560: LD_INT 4
55562: NEG
55563: PUSH
55564: LD_INT 4
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 4
55574: NEG
55575: PUSH
55576: LD_INT 5
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 3
55586: NEG
55587: PUSH
55588: LD_INT 4
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 3
55598: NEG
55599: PUSH
55600: LD_INT 3
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 4
55610: NEG
55611: PUSH
55612: LD_INT 3
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 5
55622: NEG
55623: PUSH
55624: LD_INT 4
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 5
55634: NEG
55635: PUSH
55636: LD_INT 5
55638: NEG
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 3
55646: NEG
55647: PUSH
55648: LD_INT 5
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 5
55658: NEG
55659: PUSH
55660: LD_INT 3
55662: NEG
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 4
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 3
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: LD_INT 2
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: LD_INT 3
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 4
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 2
55760: NEG
55761: PUSH
55762: LD_INT 4
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 4
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 4
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 5
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 5
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 4
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 3
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 3
55833: PUSH
55834: LD_INT 1
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 3
55844: PUSH
55845: LD_INT 2
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 5
55855: PUSH
55856: LD_INT 2
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 3
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 3
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 4
55885: PUSH
55886: LD_INT 3
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 4
55895: PUSH
55896: LD_INT 4
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 3
55905: PUSH
55906: LD_INT 4
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: LD_INT 3
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 4
55935: PUSH
55936: LD_INT 2
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: LD_INT 4
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 4
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 3
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: LD_INT 4
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: LD_INT 5
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 5
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: LD_INT 4
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 1
56016: NEG
56017: PUSH
56018: LD_INT 3
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: LD_INT 5
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 3
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56093: LD_ADDR_VAR 0 34
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 4
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 5
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: LD_INT 4
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 1
56133: PUSH
56134: LD_INT 3
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 0
56144: PUSH
56145: LD_INT 3
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 4
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: NEG
56168: PUSH
56169: LD_INT 5
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 2
56179: PUSH
56180: LD_INT 3
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: LD_INT 5
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 3
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 4
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 4
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 3
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 4
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 4
56295: PUSH
56296: LD_INT 4
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 4
56305: PUSH
56306: LD_INT 3
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 5
56315: PUSH
56316: LD_INT 4
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 5
56325: PUSH
56326: LD_INT 5
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 4
56335: PUSH
56336: LD_INT 5
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 3
56345: PUSH
56346: LD_INT 4
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 3
56355: PUSH
56356: LD_INT 3
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 5
56365: PUSH
56366: LD_INT 3
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 3
56375: PUSH
56376: LD_INT 5
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 3
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: PUSH
56406: LD_INT 3
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 4
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: LD_INT 4
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: LD_INT 3
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: LD_INT 4
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 2
56467: NEG
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 4
56478: NEG
56479: PUSH
56480: LD_INT 0
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 4
56489: NEG
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 3
56501: NEG
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 3
56512: NEG
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 4
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 5
56534: NEG
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 5
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 5
56557: NEG
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 3
56569: NEG
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: ST_TO_ADDR
// end ; end ;
56625: GO 56628
56627: POP
// case btype of b_depot , b_warehouse :
56628: LD_VAR 0 1
56632: PUSH
56633: LD_INT 0
56635: DOUBLE
56636: EQUAL
56637: IFTRUE 56647
56639: LD_INT 1
56641: DOUBLE
56642: EQUAL
56643: IFTRUE 56647
56645: GO 56848
56647: POP
// case nation of nation_american :
56648: LD_VAR 0 5
56652: PUSH
56653: LD_INT 1
56655: DOUBLE
56656: EQUAL
56657: IFTRUE 56661
56659: GO 56717
56661: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56662: LD_ADDR_VAR 0 9
56666: PUSH
56667: LD_VAR 0 11
56671: PUSH
56672: LD_VAR 0 12
56676: PUSH
56677: LD_VAR 0 13
56681: PUSH
56682: LD_VAR 0 14
56686: PUSH
56687: LD_VAR 0 15
56691: PUSH
56692: LD_VAR 0 16
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: PUSH
56705: LD_VAR 0 4
56709: PUSH
56710: LD_INT 1
56712: PLUS
56713: ARRAY
56714: ST_TO_ADDR
56715: GO 56846
56717: LD_INT 2
56719: DOUBLE
56720: EQUAL
56721: IFTRUE 56725
56723: GO 56781
56725: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56726: LD_ADDR_VAR 0 9
56730: PUSH
56731: LD_VAR 0 17
56735: PUSH
56736: LD_VAR 0 18
56740: PUSH
56741: LD_VAR 0 19
56745: PUSH
56746: LD_VAR 0 20
56750: PUSH
56751: LD_VAR 0 21
56755: PUSH
56756: LD_VAR 0 22
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: PUSH
56769: LD_VAR 0 4
56773: PUSH
56774: LD_INT 1
56776: PLUS
56777: ARRAY
56778: ST_TO_ADDR
56779: GO 56846
56781: LD_INT 3
56783: DOUBLE
56784: EQUAL
56785: IFTRUE 56789
56787: GO 56845
56789: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56790: LD_ADDR_VAR 0 9
56794: PUSH
56795: LD_VAR 0 23
56799: PUSH
56800: LD_VAR 0 24
56804: PUSH
56805: LD_VAR 0 25
56809: PUSH
56810: LD_VAR 0 26
56814: PUSH
56815: LD_VAR 0 27
56819: PUSH
56820: LD_VAR 0 28
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: PUSH
56833: LD_VAR 0 4
56837: PUSH
56838: LD_INT 1
56840: PLUS
56841: ARRAY
56842: ST_TO_ADDR
56843: GO 56846
56845: POP
56846: GO 57401
56848: LD_INT 2
56850: DOUBLE
56851: EQUAL
56852: IFTRUE 56862
56854: LD_INT 3
56856: DOUBLE
56857: EQUAL
56858: IFTRUE 56862
56860: GO 56918
56862: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56863: LD_ADDR_VAR 0 9
56867: PUSH
56868: LD_VAR 0 29
56872: PUSH
56873: LD_VAR 0 30
56877: PUSH
56878: LD_VAR 0 31
56882: PUSH
56883: LD_VAR 0 32
56887: PUSH
56888: LD_VAR 0 33
56892: PUSH
56893: LD_VAR 0 34
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: PUSH
56906: LD_VAR 0 4
56910: PUSH
56911: LD_INT 1
56913: PLUS
56914: ARRAY
56915: ST_TO_ADDR
56916: GO 57401
56918: LD_INT 16
56920: DOUBLE
56921: EQUAL
56922: IFTRUE 56980
56924: LD_INT 17
56926: DOUBLE
56927: EQUAL
56928: IFTRUE 56980
56930: LD_INT 18
56932: DOUBLE
56933: EQUAL
56934: IFTRUE 56980
56936: LD_INT 19
56938: DOUBLE
56939: EQUAL
56940: IFTRUE 56980
56942: LD_INT 22
56944: DOUBLE
56945: EQUAL
56946: IFTRUE 56980
56948: LD_INT 20
56950: DOUBLE
56951: EQUAL
56952: IFTRUE 56980
56954: LD_INT 21
56956: DOUBLE
56957: EQUAL
56958: IFTRUE 56980
56960: LD_INT 23
56962: DOUBLE
56963: EQUAL
56964: IFTRUE 56980
56966: LD_INT 24
56968: DOUBLE
56969: EQUAL
56970: IFTRUE 56980
56972: LD_INT 25
56974: DOUBLE
56975: EQUAL
56976: IFTRUE 56980
56978: GO 57036
56980: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56981: LD_ADDR_VAR 0 9
56985: PUSH
56986: LD_VAR 0 35
56990: PUSH
56991: LD_VAR 0 36
56995: PUSH
56996: LD_VAR 0 37
57000: PUSH
57001: LD_VAR 0 38
57005: PUSH
57006: LD_VAR 0 39
57010: PUSH
57011: LD_VAR 0 40
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: PUSH
57024: LD_VAR 0 4
57028: PUSH
57029: LD_INT 1
57031: PLUS
57032: ARRAY
57033: ST_TO_ADDR
57034: GO 57401
57036: LD_INT 6
57038: DOUBLE
57039: EQUAL
57040: IFTRUE 57092
57042: LD_INT 7
57044: DOUBLE
57045: EQUAL
57046: IFTRUE 57092
57048: LD_INT 8
57050: DOUBLE
57051: EQUAL
57052: IFTRUE 57092
57054: LD_INT 13
57056: DOUBLE
57057: EQUAL
57058: IFTRUE 57092
57060: LD_INT 12
57062: DOUBLE
57063: EQUAL
57064: IFTRUE 57092
57066: LD_INT 15
57068: DOUBLE
57069: EQUAL
57070: IFTRUE 57092
57072: LD_INT 11
57074: DOUBLE
57075: EQUAL
57076: IFTRUE 57092
57078: LD_INT 14
57080: DOUBLE
57081: EQUAL
57082: IFTRUE 57092
57084: LD_INT 10
57086: DOUBLE
57087: EQUAL
57088: IFTRUE 57092
57090: GO 57148
57092: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57093: LD_ADDR_VAR 0 9
57097: PUSH
57098: LD_VAR 0 41
57102: PUSH
57103: LD_VAR 0 42
57107: PUSH
57108: LD_VAR 0 43
57112: PUSH
57113: LD_VAR 0 44
57117: PUSH
57118: LD_VAR 0 45
57122: PUSH
57123: LD_VAR 0 46
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: PUSH
57136: LD_VAR 0 4
57140: PUSH
57141: LD_INT 1
57143: PLUS
57144: ARRAY
57145: ST_TO_ADDR
57146: GO 57401
57148: LD_INT 36
57150: DOUBLE
57151: EQUAL
57152: IFTRUE 57156
57154: GO 57212
57156: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57157: LD_ADDR_VAR 0 9
57161: PUSH
57162: LD_VAR 0 47
57166: PUSH
57167: LD_VAR 0 48
57171: PUSH
57172: LD_VAR 0 49
57176: PUSH
57177: LD_VAR 0 50
57181: PUSH
57182: LD_VAR 0 51
57186: PUSH
57187: LD_VAR 0 52
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: PUSH
57200: LD_VAR 0 4
57204: PUSH
57205: LD_INT 1
57207: PLUS
57208: ARRAY
57209: ST_TO_ADDR
57210: GO 57401
57212: LD_INT 4
57214: DOUBLE
57215: EQUAL
57216: IFTRUE 57238
57218: LD_INT 5
57220: DOUBLE
57221: EQUAL
57222: IFTRUE 57238
57224: LD_INT 34
57226: DOUBLE
57227: EQUAL
57228: IFTRUE 57238
57230: LD_INT 37
57232: DOUBLE
57233: EQUAL
57234: IFTRUE 57238
57236: GO 57294
57238: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57239: LD_ADDR_VAR 0 9
57243: PUSH
57244: LD_VAR 0 53
57248: PUSH
57249: LD_VAR 0 54
57253: PUSH
57254: LD_VAR 0 55
57258: PUSH
57259: LD_VAR 0 56
57263: PUSH
57264: LD_VAR 0 57
57268: PUSH
57269: LD_VAR 0 58
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: PUSH
57282: LD_VAR 0 4
57286: PUSH
57287: LD_INT 1
57289: PLUS
57290: ARRAY
57291: ST_TO_ADDR
57292: GO 57401
57294: LD_INT 31
57296: DOUBLE
57297: EQUAL
57298: IFTRUE 57344
57300: LD_INT 32
57302: DOUBLE
57303: EQUAL
57304: IFTRUE 57344
57306: LD_INT 33
57308: DOUBLE
57309: EQUAL
57310: IFTRUE 57344
57312: LD_INT 27
57314: DOUBLE
57315: EQUAL
57316: IFTRUE 57344
57318: LD_INT 26
57320: DOUBLE
57321: EQUAL
57322: IFTRUE 57344
57324: LD_INT 28
57326: DOUBLE
57327: EQUAL
57328: IFTRUE 57344
57330: LD_INT 29
57332: DOUBLE
57333: EQUAL
57334: IFTRUE 57344
57336: LD_INT 30
57338: DOUBLE
57339: EQUAL
57340: IFTRUE 57344
57342: GO 57400
57344: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57345: LD_ADDR_VAR 0 9
57349: PUSH
57350: LD_VAR 0 59
57354: PUSH
57355: LD_VAR 0 60
57359: PUSH
57360: LD_VAR 0 61
57364: PUSH
57365: LD_VAR 0 62
57369: PUSH
57370: LD_VAR 0 63
57374: PUSH
57375: LD_VAR 0 64
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: PUSH
57388: LD_VAR 0 4
57392: PUSH
57393: LD_INT 1
57395: PLUS
57396: ARRAY
57397: ST_TO_ADDR
57398: GO 57401
57400: POP
// temp_list2 = [ ] ;
57401: LD_ADDR_VAR 0 10
57405: PUSH
57406: EMPTY
57407: ST_TO_ADDR
// for i in temp_list do
57408: LD_ADDR_VAR 0 8
57412: PUSH
57413: LD_VAR 0 9
57417: PUSH
57418: FOR_IN
57419: IFFALSE 57471
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57421: LD_ADDR_VAR 0 10
57425: PUSH
57426: LD_VAR 0 10
57430: PUSH
57431: LD_VAR 0 8
57435: PUSH
57436: LD_INT 1
57438: ARRAY
57439: PUSH
57440: LD_VAR 0 2
57444: PLUS
57445: PUSH
57446: LD_VAR 0 8
57450: PUSH
57451: LD_INT 2
57453: ARRAY
57454: PUSH
57455: LD_VAR 0 3
57459: PLUS
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: EMPTY
57466: LIST
57467: ADD
57468: ST_TO_ADDR
57469: GO 57418
57471: POP
57472: POP
// result = temp_list2 ;
57473: LD_ADDR_VAR 0 7
57477: PUSH
57478: LD_VAR 0 10
57482: ST_TO_ADDR
// end ;
57483: LD_VAR 0 7
57487: RET
// export function EnemyInRange ( unit , dist ) ; begin
57488: LD_INT 0
57490: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57491: LD_ADDR_VAR 0 3
57495: PUSH
57496: LD_VAR 0 1
57500: PPUSH
57501: CALL_OW 255
57505: PPUSH
57506: LD_VAR 0 1
57510: PPUSH
57511: CALL_OW 250
57515: PPUSH
57516: LD_VAR 0 1
57520: PPUSH
57521: CALL_OW 251
57525: PPUSH
57526: LD_VAR 0 2
57530: PPUSH
57531: CALL 30884 0 4
57535: PUSH
57536: LD_INT 4
57538: ARRAY
57539: ST_TO_ADDR
// end ;
57540: LD_VAR 0 3
57544: RET
// export function PlayerSeeMe ( unit ) ; begin
57545: LD_INT 0
57547: PPUSH
// result := See ( your_side , unit ) ;
57548: LD_ADDR_VAR 0 2
57552: PUSH
57553: LD_OWVAR 2
57557: PPUSH
57558: LD_VAR 0 1
57562: PPUSH
57563: CALL_OW 292
57567: ST_TO_ADDR
// end ;
57568: LD_VAR 0 2
57572: RET
// export function ReverseDir ( unit ) ; begin
57573: LD_INT 0
57575: PPUSH
// if not unit then
57576: LD_VAR 0 1
57580: NOT
57581: IFFALSE 57585
// exit ;
57583: GO 57608
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57585: LD_ADDR_VAR 0 2
57589: PUSH
57590: LD_VAR 0 1
57594: PPUSH
57595: CALL_OW 254
57599: PUSH
57600: LD_INT 3
57602: PLUS
57603: PUSH
57604: LD_INT 6
57606: MOD
57607: ST_TO_ADDR
// end ;
57608: LD_VAR 0 2
57612: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57613: LD_INT 0
57615: PPUSH
57616: PPUSH
57617: PPUSH
57618: PPUSH
57619: PPUSH
// if not hexes then
57620: LD_VAR 0 2
57624: NOT
57625: IFFALSE 57629
// exit ;
57627: GO 57777
// dist := 9999 ;
57629: LD_ADDR_VAR 0 5
57633: PUSH
57634: LD_INT 9999
57636: ST_TO_ADDR
// for i = 1 to hexes do
57637: LD_ADDR_VAR 0 4
57641: PUSH
57642: DOUBLE
57643: LD_INT 1
57645: DEC
57646: ST_TO_ADDR
57647: LD_VAR 0 2
57651: PUSH
57652: FOR_TO
57653: IFFALSE 57765
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57655: LD_VAR 0 1
57659: PPUSH
57660: LD_VAR 0 2
57664: PUSH
57665: LD_VAR 0 4
57669: ARRAY
57670: PUSH
57671: LD_INT 1
57673: ARRAY
57674: PPUSH
57675: LD_VAR 0 2
57679: PUSH
57680: LD_VAR 0 4
57684: ARRAY
57685: PUSH
57686: LD_INT 2
57688: ARRAY
57689: PPUSH
57690: CALL_OW 297
57694: PUSH
57695: LD_VAR 0 5
57699: LESS
57700: IFFALSE 57763
// begin hex := hexes [ i ] ;
57702: LD_ADDR_VAR 0 7
57706: PUSH
57707: LD_VAR 0 2
57711: PUSH
57712: LD_VAR 0 4
57716: ARRAY
57717: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57718: LD_ADDR_VAR 0 5
57722: PUSH
57723: LD_VAR 0 1
57727: PPUSH
57728: LD_VAR 0 2
57732: PUSH
57733: LD_VAR 0 4
57737: ARRAY
57738: PUSH
57739: LD_INT 1
57741: ARRAY
57742: PPUSH
57743: LD_VAR 0 2
57747: PUSH
57748: LD_VAR 0 4
57752: ARRAY
57753: PUSH
57754: LD_INT 2
57756: ARRAY
57757: PPUSH
57758: CALL_OW 297
57762: ST_TO_ADDR
// end ; end ;
57763: GO 57652
57765: POP
57766: POP
// result := hex ;
57767: LD_ADDR_VAR 0 3
57771: PUSH
57772: LD_VAR 0 7
57776: ST_TO_ADDR
// end ;
57777: LD_VAR 0 3
57781: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57782: LD_INT 0
57784: PPUSH
57785: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57786: LD_VAR 0 1
57790: NOT
57791: PUSH
57792: LD_VAR 0 1
57796: PUSH
57797: LD_INT 21
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 23
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PPUSH
57821: CALL_OW 69
57825: IN
57826: NOT
57827: OR
57828: IFFALSE 57832
// exit ;
57830: GO 57879
// for i = 1 to 3 do
57832: LD_ADDR_VAR 0 3
57836: PUSH
57837: DOUBLE
57838: LD_INT 1
57840: DEC
57841: ST_TO_ADDR
57842: LD_INT 3
57844: PUSH
57845: FOR_TO
57846: IFFALSE 57877
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57848: LD_VAR 0 1
57852: PPUSH
57853: CALL_OW 250
57857: PPUSH
57858: LD_VAR 0 1
57862: PPUSH
57863: CALL_OW 251
57867: PPUSH
57868: LD_INT 1
57870: PPUSH
57871: CALL_OW 453
57875: GO 57845
57877: POP
57878: POP
// end ;
57879: LD_VAR 0 2
57883: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57884: LD_INT 0
57886: PPUSH
57887: PPUSH
57888: PPUSH
57889: PPUSH
57890: PPUSH
57891: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57892: LD_VAR 0 1
57896: NOT
57897: PUSH
57898: LD_VAR 0 2
57902: NOT
57903: OR
57904: PUSH
57905: LD_VAR 0 1
57909: PPUSH
57910: CALL_OW 314
57914: OR
57915: IFFALSE 57919
// exit ;
57917: GO 58360
// x := GetX ( enemy_unit ) ;
57919: LD_ADDR_VAR 0 7
57923: PUSH
57924: LD_VAR 0 2
57928: PPUSH
57929: CALL_OW 250
57933: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57934: LD_ADDR_VAR 0 8
57938: PUSH
57939: LD_VAR 0 2
57943: PPUSH
57944: CALL_OW 251
57948: ST_TO_ADDR
// if not x or not y then
57949: LD_VAR 0 7
57953: NOT
57954: PUSH
57955: LD_VAR 0 8
57959: NOT
57960: OR
57961: IFFALSE 57965
// exit ;
57963: GO 58360
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57965: LD_ADDR_VAR 0 6
57969: PUSH
57970: LD_VAR 0 7
57974: PPUSH
57975: LD_INT 0
57977: PPUSH
57978: LD_INT 4
57980: PPUSH
57981: CALL_OW 272
57985: PUSH
57986: LD_VAR 0 8
57990: PPUSH
57991: LD_INT 0
57993: PPUSH
57994: LD_INT 4
57996: PPUSH
57997: CALL_OW 273
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_VAR 0 7
58010: PPUSH
58011: LD_INT 1
58013: PPUSH
58014: LD_INT 4
58016: PPUSH
58017: CALL_OW 272
58021: PUSH
58022: LD_VAR 0 8
58026: PPUSH
58027: LD_INT 1
58029: PPUSH
58030: LD_INT 4
58032: PPUSH
58033: CALL_OW 273
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_VAR 0 7
58046: PPUSH
58047: LD_INT 2
58049: PPUSH
58050: LD_INT 4
58052: PPUSH
58053: CALL_OW 272
58057: PUSH
58058: LD_VAR 0 8
58062: PPUSH
58063: LD_INT 2
58065: PPUSH
58066: LD_INT 4
58068: PPUSH
58069: CALL_OW 273
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_VAR 0 7
58082: PPUSH
58083: LD_INT 3
58085: PPUSH
58086: LD_INT 4
58088: PPUSH
58089: CALL_OW 272
58093: PUSH
58094: LD_VAR 0 8
58098: PPUSH
58099: LD_INT 3
58101: PPUSH
58102: LD_INT 4
58104: PPUSH
58105: CALL_OW 273
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_VAR 0 7
58118: PPUSH
58119: LD_INT 4
58121: PPUSH
58122: LD_INT 4
58124: PPUSH
58125: CALL_OW 272
58129: PUSH
58130: LD_VAR 0 8
58134: PPUSH
58135: LD_INT 4
58137: PPUSH
58138: LD_INT 4
58140: PPUSH
58141: CALL_OW 273
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_VAR 0 7
58154: PPUSH
58155: LD_INT 5
58157: PPUSH
58158: LD_INT 4
58160: PPUSH
58161: CALL_OW 272
58165: PUSH
58166: LD_VAR 0 8
58170: PPUSH
58171: LD_INT 5
58173: PPUSH
58174: LD_INT 4
58176: PPUSH
58177: CALL_OW 273
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: ST_TO_ADDR
// for i = tmp downto 1 do
58194: LD_ADDR_VAR 0 4
58198: PUSH
58199: DOUBLE
58200: LD_VAR 0 6
58204: INC
58205: ST_TO_ADDR
58206: LD_INT 1
58208: PUSH
58209: FOR_DOWNTO
58210: IFFALSE 58311
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58212: LD_VAR 0 6
58216: PUSH
58217: LD_VAR 0 4
58221: ARRAY
58222: PUSH
58223: LD_INT 1
58225: ARRAY
58226: PPUSH
58227: LD_VAR 0 6
58231: PUSH
58232: LD_VAR 0 4
58236: ARRAY
58237: PUSH
58238: LD_INT 2
58240: ARRAY
58241: PPUSH
58242: CALL_OW 488
58246: NOT
58247: PUSH
58248: LD_VAR 0 6
58252: PUSH
58253: LD_VAR 0 4
58257: ARRAY
58258: PUSH
58259: LD_INT 1
58261: ARRAY
58262: PPUSH
58263: LD_VAR 0 6
58267: PUSH
58268: LD_VAR 0 4
58272: ARRAY
58273: PUSH
58274: LD_INT 2
58276: ARRAY
58277: PPUSH
58278: CALL_OW 428
58282: PUSH
58283: LD_INT 0
58285: NONEQUAL
58286: OR
58287: IFFALSE 58309
// tmp := Delete ( tmp , i ) ;
58289: LD_ADDR_VAR 0 6
58293: PUSH
58294: LD_VAR 0 6
58298: PPUSH
58299: LD_VAR 0 4
58303: PPUSH
58304: CALL_OW 3
58308: ST_TO_ADDR
58309: GO 58209
58311: POP
58312: POP
// j := GetClosestHex ( unit , tmp ) ;
58313: LD_ADDR_VAR 0 5
58317: PUSH
58318: LD_VAR 0 1
58322: PPUSH
58323: LD_VAR 0 6
58327: PPUSH
58328: CALL 57613 0 2
58332: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58333: LD_VAR 0 1
58337: PPUSH
58338: LD_VAR 0 5
58342: PUSH
58343: LD_INT 1
58345: ARRAY
58346: PPUSH
58347: LD_VAR 0 5
58351: PUSH
58352: LD_INT 2
58354: ARRAY
58355: PPUSH
58356: CALL_OW 111
// end ;
58360: LD_VAR 0 3
58364: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58365: LD_INT 0
58367: PPUSH
58368: PPUSH
58369: PPUSH
// uc_side = 0 ;
58370: LD_ADDR_OWVAR 20
58374: PUSH
58375: LD_INT 0
58377: ST_TO_ADDR
// uc_nation = 0 ;
58378: LD_ADDR_OWVAR 21
58382: PUSH
58383: LD_INT 0
58385: ST_TO_ADDR
// InitHc_All ( ) ;
58386: CALL_OW 584
// InitVc ;
58390: CALL_OW 20
// if mastodonts then
58394: LD_VAR 0 6
58398: IFFALSE 58465
// for i = 1 to mastodonts do
58400: LD_ADDR_VAR 0 11
58404: PUSH
58405: DOUBLE
58406: LD_INT 1
58408: DEC
58409: ST_TO_ADDR
58410: LD_VAR 0 6
58414: PUSH
58415: FOR_TO
58416: IFFALSE 58463
// begin vc_chassis := 31 ;
58418: LD_ADDR_OWVAR 37
58422: PUSH
58423: LD_INT 31
58425: ST_TO_ADDR
// vc_control := control_rider ;
58426: LD_ADDR_OWVAR 38
58430: PUSH
58431: LD_INT 4
58433: ST_TO_ADDR
// animal := CreateVehicle ;
58434: LD_ADDR_VAR 0 12
58438: PUSH
58439: CALL_OW 45
58443: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58444: LD_VAR 0 12
58448: PPUSH
58449: LD_VAR 0 8
58453: PPUSH
58454: LD_INT 0
58456: PPUSH
58457: CALL 60653 0 3
// end ;
58461: GO 58415
58463: POP
58464: POP
// if horses then
58465: LD_VAR 0 5
58469: IFFALSE 58536
// for i = 1 to horses do
58471: LD_ADDR_VAR 0 11
58475: PUSH
58476: DOUBLE
58477: LD_INT 1
58479: DEC
58480: ST_TO_ADDR
58481: LD_VAR 0 5
58485: PUSH
58486: FOR_TO
58487: IFFALSE 58534
// begin hc_class := 21 ;
58489: LD_ADDR_OWVAR 28
58493: PUSH
58494: LD_INT 21
58496: ST_TO_ADDR
// hc_gallery :=  ;
58497: LD_ADDR_OWVAR 33
58501: PUSH
58502: LD_STRING 
58504: ST_TO_ADDR
// animal := CreateHuman ;
58505: LD_ADDR_VAR 0 12
58509: PUSH
58510: CALL_OW 44
58514: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58515: LD_VAR 0 12
58519: PPUSH
58520: LD_VAR 0 8
58524: PPUSH
58525: LD_INT 0
58527: PPUSH
58528: CALL 60653 0 3
// end ;
58532: GO 58486
58534: POP
58535: POP
// if birds then
58536: LD_VAR 0 1
58540: IFFALSE 58607
// for i = 1 to birds do
58542: LD_ADDR_VAR 0 11
58546: PUSH
58547: DOUBLE
58548: LD_INT 1
58550: DEC
58551: ST_TO_ADDR
58552: LD_VAR 0 1
58556: PUSH
58557: FOR_TO
58558: IFFALSE 58605
// begin hc_class = 18 ;
58560: LD_ADDR_OWVAR 28
58564: PUSH
58565: LD_INT 18
58567: ST_TO_ADDR
// hc_gallery =  ;
58568: LD_ADDR_OWVAR 33
58572: PUSH
58573: LD_STRING 
58575: ST_TO_ADDR
// animal := CreateHuman ;
58576: LD_ADDR_VAR 0 12
58580: PUSH
58581: CALL_OW 44
58585: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58586: LD_VAR 0 12
58590: PPUSH
58591: LD_VAR 0 8
58595: PPUSH
58596: LD_INT 0
58598: PPUSH
58599: CALL 60653 0 3
// end ;
58603: GO 58557
58605: POP
58606: POP
// if tigers then
58607: LD_VAR 0 2
58611: IFFALSE 58695
// for i = 1 to tigers do
58613: LD_ADDR_VAR 0 11
58617: PUSH
58618: DOUBLE
58619: LD_INT 1
58621: DEC
58622: ST_TO_ADDR
58623: LD_VAR 0 2
58627: PUSH
58628: FOR_TO
58629: IFFALSE 58693
// begin hc_class = class_tiger ;
58631: LD_ADDR_OWVAR 28
58635: PUSH
58636: LD_INT 14
58638: ST_TO_ADDR
// hc_gallery =  ;
58639: LD_ADDR_OWVAR 33
58643: PUSH
58644: LD_STRING 
58646: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58647: LD_ADDR_OWVAR 35
58651: PUSH
58652: LD_INT 7
58654: NEG
58655: PPUSH
58656: LD_INT 7
58658: PPUSH
58659: CALL_OW 12
58663: ST_TO_ADDR
// animal := CreateHuman ;
58664: LD_ADDR_VAR 0 12
58668: PUSH
58669: CALL_OW 44
58673: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58674: LD_VAR 0 12
58678: PPUSH
58679: LD_VAR 0 8
58683: PPUSH
58684: LD_INT 0
58686: PPUSH
58687: CALL 60653 0 3
// end ;
58691: GO 58628
58693: POP
58694: POP
// if apemans then
58695: LD_VAR 0 3
58699: IFFALSE 58822
// for i = 1 to apemans do
58701: LD_ADDR_VAR 0 11
58705: PUSH
58706: DOUBLE
58707: LD_INT 1
58709: DEC
58710: ST_TO_ADDR
58711: LD_VAR 0 3
58715: PUSH
58716: FOR_TO
58717: IFFALSE 58820
// begin hc_class = class_apeman ;
58719: LD_ADDR_OWVAR 28
58723: PUSH
58724: LD_INT 12
58726: ST_TO_ADDR
// hc_gallery =  ;
58727: LD_ADDR_OWVAR 33
58731: PUSH
58732: LD_STRING 
58734: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58735: LD_ADDR_OWVAR 35
58739: PUSH
58740: LD_INT 2
58742: NEG
58743: PPUSH
58744: LD_INT 2
58746: PPUSH
58747: CALL_OW 12
58751: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58752: LD_ADDR_OWVAR 31
58756: PUSH
58757: LD_INT 1
58759: PPUSH
58760: LD_INT 3
58762: PPUSH
58763: CALL_OW 12
58767: PUSH
58768: LD_INT 1
58770: PPUSH
58771: LD_INT 3
58773: PPUSH
58774: CALL_OW 12
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: ST_TO_ADDR
// animal := CreateHuman ;
58791: LD_ADDR_VAR 0 12
58795: PUSH
58796: CALL_OW 44
58800: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58801: LD_VAR 0 12
58805: PPUSH
58806: LD_VAR 0 8
58810: PPUSH
58811: LD_INT 0
58813: PPUSH
58814: CALL 60653 0 3
// end ;
58818: GO 58716
58820: POP
58821: POP
// if enchidnas then
58822: LD_VAR 0 4
58826: IFFALSE 58893
// for i = 1 to enchidnas do
58828: LD_ADDR_VAR 0 11
58832: PUSH
58833: DOUBLE
58834: LD_INT 1
58836: DEC
58837: ST_TO_ADDR
58838: LD_VAR 0 4
58842: PUSH
58843: FOR_TO
58844: IFFALSE 58891
// begin hc_class = 13 ;
58846: LD_ADDR_OWVAR 28
58850: PUSH
58851: LD_INT 13
58853: ST_TO_ADDR
// hc_gallery =  ;
58854: LD_ADDR_OWVAR 33
58858: PUSH
58859: LD_STRING 
58861: ST_TO_ADDR
// animal := CreateHuman ;
58862: LD_ADDR_VAR 0 12
58866: PUSH
58867: CALL_OW 44
58871: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58872: LD_VAR 0 12
58876: PPUSH
58877: LD_VAR 0 8
58881: PPUSH
58882: LD_INT 0
58884: PPUSH
58885: CALL 60653 0 3
// end ;
58889: GO 58843
58891: POP
58892: POP
// if fishes then
58893: LD_VAR 0 7
58897: IFFALSE 58964
// for i = 1 to fishes do
58899: LD_ADDR_VAR 0 11
58903: PUSH
58904: DOUBLE
58905: LD_INT 1
58907: DEC
58908: ST_TO_ADDR
58909: LD_VAR 0 7
58913: PUSH
58914: FOR_TO
58915: IFFALSE 58962
// begin hc_class = 20 ;
58917: LD_ADDR_OWVAR 28
58921: PUSH
58922: LD_INT 20
58924: ST_TO_ADDR
// hc_gallery =  ;
58925: LD_ADDR_OWVAR 33
58929: PUSH
58930: LD_STRING 
58932: ST_TO_ADDR
// animal := CreateHuman ;
58933: LD_ADDR_VAR 0 12
58937: PUSH
58938: CALL_OW 44
58942: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58943: LD_VAR 0 12
58947: PPUSH
58948: LD_VAR 0 9
58952: PPUSH
58953: LD_INT 0
58955: PPUSH
58956: CALL 60653 0 3
// end ;
58960: GO 58914
58962: POP
58963: POP
// end ;
58964: LD_VAR 0 10
58968: RET
// export function WantHeal ( sci , unit ) ; begin
58969: LD_INT 0
58971: PPUSH
// if GetTaskList ( sci ) > 0 then
58972: LD_VAR 0 1
58976: PPUSH
58977: CALL_OW 437
58981: PUSH
58982: LD_INT 0
58984: GREATER
58985: IFFALSE 59055
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58987: LD_VAR 0 1
58991: PPUSH
58992: CALL_OW 437
58996: PUSH
58997: LD_INT 1
58999: ARRAY
59000: PUSH
59001: LD_INT 1
59003: ARRAY
59004: PUSH
59005: LD_STRING l
59007: EQUAL
59008: PUSH
59009: LD_VAR 0 1
59013: PPUSH
59014: CALL_OW 437
59018: PUSH
59019: LD_INT 1
59021: ARRAY
59022: PUSH
59023: LD_INT 4
59025: ARRAY
59026: PUSH
59027: LD_VAR 0 2
59031: EQUAL
59032: AND
59033: IFFALSE 59045
// result := true else
59035: LD_ADDR_VAR 0 3
59039: PUSH
59040: LD_INT 1
59042: ST_TO_ADDR
59043: GO 59053
// result := false ;
59045: LD_ADDR_VAR 0 3
59049: PUSH
59050: LD_INT 0
59052: ST_TO_ADDR
// end else
59053: GO 59063
// result := false ;
59055: LD_ADDR_VAR 0 3
59059: PUSH
59060: LD_INT 0
59062: ST_TO_ADDR
// end ;
59063: LD_VAR 0 3
59067: RET
// export function HealTarget ( sci ) ; begin
59068: LD_INT 0
59070: PPUSH
// if not sci then
59071: LD_VAR 0 1
59075: NOT
59076: IFFALSE 59080
// exit ;
59078: GO 59145
// result := 0 ;
59080: LD_ADDR_VAR 0 2
59084: PUSH
59085: LD_INT 0
59087: ST_TO_ADDR
// if GetTaskList ( sci ) then
59088: LD_VAR 0 1
59092: PPUSH
59093: CALL_OW 437
59097: IFFALSE 59145
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59099: LD_VAR 0 1
59103: PPUSH
59104: CALL_OW 437
59108: PUSH
59109: LD_INT 1
59111: ARRAY
59112: PUSH
59113: LD_INT 1
59115: ARRAY
59116: PUSH
59117: LD_STRING l
59119: EQUAL
59120: IFFALSE 59145
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59122: LD_ADDR_VAR 0 2
59126: PUSH
59127: LD_VAR 0 1
59131: PPUSH
59132: CALL_OW 437
59136: PUSH
59137: LD_INT 1
59139: ARRAY
59140: PUSH
59141: LD_INT 4
59143: ARRAY
59144: ST_TO_ADDR
// end ;
59145: LD_VAR 0 2
59149: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59150: LD_INT 0
59152: PPUSH
59153: PPUSH
59154: PPUSH
59155: PPUSH
// if not base_units then
59156: LD_VAR 0 1
59160: NOT
59161: IFFALSE 59165
// exit ;
59163: GO 59252
// result := false ;
59165: LD_ADDR_VAR 0 2
59169: PUSH
59170: LD_INT 0
59172: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59173: LD_ADDR_VAR 0 5
59177: PUSH
59178: LD_VAR 0 1
59182: PPUSH
59183: LD_INT 21
59185: PUSH
59186: LD_INT 3
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PPUSH
59193: CALL_OW 72
59197: ST_TO_ADDR
// if not tmp then
59198: LD_VAR 0 5
59202: NOT
59203: IFFALSE 59207
// exit ;
59205: GO 59252
// for i in tmp do
59207: LD_ADDR_VAR 0 3
59211: PUSH
59212: LD_VAR 0 5
59216: PUSH
59217: FOR_IN
59218: IFFALSE 59250
// begin result := EnemyInRange ( i , 22 ) ;
59220: LD_ADDR_VAR 0 2
59224: PUSH
59225: LD_VAR 0 3
59229: PPUSH
59230: LD_INT 22
59232: PPUSH
59233: CALL 57488 0 2
59237: ST_TO_ADDR
// if result then
59238: LD_VAR 0 2
59242: IFFALSE 59248
// exit ;
59244: POP
59245: POP
59246: GO 59252
// end ;
59248: GO 59217
59250: POP
59251: POP
// end ;
59252: LD_VAR 0 2
59256: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59257: LD_INT 0
59259: PPUSH
59260: PPUSH
// if not units then
59261: LD_VAR 0 1
59265: NOT
59266: IFFALSE 59270
// exit ;
59268: GO 59340
// result := [ ] ;
59270: LD_ADDR_VAR 0 3
59274: PUSH
59275: EMPTY
59276: ST_TO_ADDR
// for i in units do
59277: LD_ADDR_VAR 0 4
59281: PUSH
59282: LD_VAR 0 1
59286: PUSH
59287: FOR_IN
59288: IFFALSE 59338
// if GetTag ( i ) = tag then
59290: LD_VAR 0 4
59294: PPUSH
59295: CALL_OW 110
59299: PUSH
59300: LD_VAR 0 2
59304: EQUAL
59305: IFFALSE 59336
// result := Replace ( result , result + 1 , i ) ;
59307: LD_ADDR_VAR 0 3
59311: PUSH
59312: LD_VAR 0 3
59316: PPUSH
59317: LD_VAR 0 3
59321: PUSH
59322: LD_INT 1
59324: PLUS
59325: PPUSH
59326: LD_VAR 0 4
59330: PPUSH
59331: CALL_OW 1
59335: ST_TO_ADDR
59336: GO 59287
59338: POP
59339: POP
// end ;
59340: LD_VAR 0 3
59344: RET
// export function IsDriver ( un ) ; begin
59345: LD_INT 0
59347: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59348: LD_ADDR_VAR 0 2
59352: PUSH
59353: LD_VAR 0 1
59357: PUSH
59358: LD_INT 55
59360: PUSH
59361: EMPTY
59362: LIST
59363: PPUSH
59364: CALL_OW 69
59368: IN
59369: ST_TO_ADDR
// end ;
59370: LD_VAR 0 2
59374: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59375: LD_INT 0
59377: PPUSH
59378: PPUSH
// list := [ ] ;
59379: LD_ADDR_VAR 0 5
59383: PUSH
59384: EMPTY
59385: ST_TO_ADDR
// case d of 0 :
59386: LD_VAR 0 3
59390: PUSH
59391: LD_INT 0
59393: DOUBLE
59394: EQUAL
59395: IFTRUE 59399
59397: GO 59532
59399: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59400: LD_ADDR_VAR 0 5
59404: PUSH
59405: LD_VAR 0 1
59409: PUSH
59410: LD_INT 4
59412: MINUS
59413: PUSH
59414: LD_VAR 0 2
59418: PUSH
59419: LD_INT 4
59421: MINUS
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: PUSH
59431: LD_VAR 0 1
59435: PUSH
59436: LD_INT 3
59438: MINUS
59439: PUSH
59440: LD_VAR 0 2
59444: PUSH
59445: LD_INT 1
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: LIST
59452: PUSH
59453: LD_VAR 0 1
59457: PUSH
59458: LD_INT 4
59460: PLUS
59461: PUSH
59462: LD_VAR 0 2
59466: PUSH
59467: LD_INT 4
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: LIST
59474: PUSH
59475: LD_VAR 0 1
59479: PUSH
59480: LD_INT 3
59482: PLUS
59483: PUSH
59484: LD_VAR 0 2
59488: PUSH
59489: LD_INT 3
59491: PLUS
59492: PUSH
59493: LD_INT 5
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: LIST
59500: PUSH
59501: LD_VAR 0 1
59505: PUSH
59506: LD_VAR 0 2
59510: PUSH
59511: LD_INT 4
59513: PLUS
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: LIST
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: ST_TO_ADDR
// end ; 1 :
59530: GO 60230
59532: LD_INT 1
59534: DOUBLE
59535: EQUAL
59536: IFTRUE 59540
59538: GO 59673
59540: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59541: LD_ADDR_VAR 0 5
59545: PUSH
59546: LD_VAR 0 1
59550: PUSH
59551: LD_VAR 0 2
59555: PUSH
59556: LD_INT 4
59558: MINUS
59559: PUSH
59560: LD_INT 3
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: LIST
59567: PUSH
59568: LD_VAR 0 1
59572: PUSH
59573: LD_INT 3
59575: MINUS
59576: PUSH
59577: LD_VAR 0 2
59581: PUSH
59582: LD_INT 3
59584: MINUS
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: LIST
59593: PUSH
59594: LD_VAR 0 1
59598: PUSH
59599: LD_INT 4
59601: MINUS
59602: PUSH
59603: LD_VAR 0 2
59607: PUSH
59608: LD_INT 1
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: LIST
59615: PUSH
59616: LD_VAR 0 1
59620: PUSH
59621: LD_VAR 0 2
59625: PUSH
59626: LD_INT 3
59628: PLUS
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: PUSH
59638: LD_VAR 0 1
59642: PUSH
59643: LD_INT 4
59645: PLUS
59646: PUSH
59647: LD_VAR 0 2
59651: PUSH
59652: LD_INT 4
59654: PLUS
59655: PUSH
59656: LD_INT 5
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: LIST
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: ST_TO_ADDR
// end ; 2 :
59671: GO 60230
59673: LD_INT 2
59675: DOUBLE
59676: EQUAL
59677: IFTRUE 59681
59679: GO 59810
59681: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59682: LD_ADDR_VAR 0 5
59686: PUSH
59687: LD_VAR 0 1
59691: PUSH
59692: LD_VAR 0 2
59696: PUSH
59697: LD_INT 3
59699: MINUS
59700: PUSH
59701: LD_INT 3
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: LIST
59708: PUSH
59709: LD_VAR 0 1
59713: PUSH
59714: LD_INT 4
59716: PLUS
59717: PUSH
59718: LD_VAR 0 2
59722: PUSH
59723: LD_INT 4
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: LIST
59730: PUSH
59731: LD_VAR 0 1
59735: PUSH
59736: LD_VAR 0 2
59740: PUSH
59741: LD_INT 4
59743: PLUS
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: LIST
59752: PUSH
59753: LD_VAR 0 1
59757: PUSH
59758: LD_INT 3
59760: MINUS
59761: PUSH
59762: LD_VAR 0 2
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: LIST
59774: PUSH
59775: LD_VAR 0 1
59779: PUSH
59780: LD_INT 4
59782: MINUS
59783: PUSH
59784: LD_VAR 0 2
59788: PUSH
59789: LD_INT 4
59791: MINUS
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: LIST
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: ST_TO_ADDR
// end ; 3 :
59808: GO 60230
59810: LD_INT 3
59812: DOUBLE
59813: EQUAL
59814: IFTRUE 59818
59816: GO 59951
59818: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59819: LD_ADDR_VAR 0 5
59823: PUSH
59824: LD_VAR 0 1
59828: PUSH
59829: LD_INT 3
59831: PLUS
59832: PUSH
59833: LD_VAR 0 2
59837: PUSH
59838: LD_INT 4
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: LIST
59845: PUSH
59846: LD_VAR 0 1
59850: PUSH
59851: LD_INT 4
59853: PLUS
59854: PUSH
59855: LD_VAR 0 2
59859: PUSH
59860: LD_INT 4
59862: PLUS
59863: PUSH
59864: LD_INT 5
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: LIST
59871: PUSH
59872: LD_VAR 0 1
59876: PUSH
59877: LD_INT 4
59879: MINUS
59880: PUSH
59881: LD_VAR 0 2
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: LIST
59893: PUSH
59894: LD_VAR 0 1
59898: PUSH
59899: LD_VAR 0 2
59903: PUSH
59904: LD_INT 4
59906: MINUS
59907: PUSH
59908: LD_INT 3
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: LIST
59915: PUSH
59916: LD_VAR 0 1
59920: PUSH
59921: LD_INT 3
59923: MINUS
59924: PUSH
59925: LD_VAR 0 2
59929: PUSH
59930: LD_INT 3
59932: MINUS
59933: PUSH
59934: LD_INT 2
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: LIST
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: ST_TO_ADDR
// end ; 4 :
59949: GO 60230
59951: LD_INT 4
59953: DOUBLE
59954: EQUAL
59955: IFTRUE 59959
59957: GO 60092
59959: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59960: LD_ADDR_VAR 0 5
59964: PUSH
59965: LD_VAR 0 1
59969: PUSH
59970: LD_VAR 0 2
59974: PUSH
59975: LD_INT 4
59977: PLUS
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: LIST
59986: PUSH
59987: LD_VAR 0 1
59991: PUSH
59992: LD_INT 3
59994: PLUS
59995: PUSH
59996: LD_VAR 0 2
60000: PUSH
60001: LD_INT 3
60003: PLUS
60004: PUSH
60005: LD_INT 5
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: LIST
60012: PUSH
60013: LD_VAR 0 1
60017: PUSH
60018: LD_INT 4
60020: PLUS
60021: PUSH
60022: LD_VAR 0 2
60026: PUSH
60027: LD_INT 4
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: LIST
60034: PUSH
60035: LD_VAR 0 1
60039: PUSH
60040: LD_VAR 0 2
60044: PUSH
60045: LD_INT 3
60047: MINUS
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: LIST
60056: PUSH
60057: LD_VAR 0 1
60061: PUSH
60062: LD_INT 4
60064: MINUS
60065: PUSH
60066: LD_VAR 0 2
60070: PUSH
60071: LD_INT 4
60073: MINUS
60074: PUSH
60075: LD_INT 2
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: LIST
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: ST_TO_ADDR
// end ; 5 :
60090: GO 60230
60092: LD_INT 5
60094: DOUBLE
60095: EQUAL
60096: IFTRUE 60100
60098: GO 60229
60100: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60101: LD_ADDR_VAR 0 5
60105: PUSH
60106: LD_VAR 0 1
60110: PUSH
60111: LD_INT 4
60113: MINUS
60114: PUSH
60115: LD_VAR 0 2
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: LIST
60127: PUSH
60128: LD_VAR 0 1
60132: PUSH
60133: LD_VAR 0 2
60137: PUSH
60138: LD_INT 4
60140: MINUS
60141: PUSH
60142: LD_INT 3
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: LIST
60149: PUSH
60150: LD_VAR 0 1
60154: PUSH
60155: LD_INT 4
60157: PLUS
60158: PUSH
60159: LD_VAR 0 2
60163: PUSH
60164: LD_INT 4
60166: PLUS
60167: PUSH
60168: LD_INT 5
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: LIST
60175: PUSH
60176: LD_VAR 0 1
60180: PUSH
60181: LD_INT 3
60183: PLUS
60184: PUSH
60185: LD_VAR 0 2
60189: PUSH
60190: LD_INT 4
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: LIST
60197: PUSH
60198: LD_VAR 0 1
60202: PUSH
60203: LD_VAR 0 2
60207: PUSH
60208: LD_INT 3
60210: PLUS
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: LIST
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: ST_TO_ADDR
// end ; end ;
60227: GO 60230
60229: POP
// result := list ;
60230: LD_ADDR_VAR 0 4
60234: PUSH
60235: LD_VAR 0 5
60239: ST_TO_ADDR
// end ;
60240: LD_VAR 0 4
60244: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60245: LD_INT 0
60247: PPUSH
60248: PPUSH
60249: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60250: LD_VAR 0 1
60254: NOT
60255: PUSH
60256: LD_VAR 0 2
60260: PUSH
60261: LD_INT 1
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: LD_INT 3
60269: PUSH
60270: LD_INT 4
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: IN
60279: NOT
60280: OR
60281: IFFALSE 60285
// exit ;
60283: GO 60377
// tmp := [ ] ;
60285: LD_ADDR_VAR 0 5
60289: PUSH
60290: EMPTY
60291: ST_TO_ADDR
// for i in units do
60292: LD_ADDR_VAR 0 4
60296: PUSH
60297: LD_VAR 0 1
60301: PUSH
60302: FOR_IN
60303: IFFALSE 60346
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60305: LD_ADDR_VAR 0 5
60309: PUSH
60310: LD_VAR 0 5
60314: PPUSH
60315: LD_VAR 0 5
60319: PUSH
60320: LD_INT 1
60322: PLUS
60323: PPUSH
60324: LD_VAR 0 4
60328: PPUSH
60329: LD_VAR 0 2
60333: PPUSH
60334: CALL_OW 259
60338: PPUSH
60339: CALL_OW 2
60343: ST_TO_ADDR
60344: GO 60302
60346: POP
60347: POP
// if not tmp then
60348: LD_VAR 0 5
60352: NOT
60353: IFFALSE 60357
// exit ;
60355: GO 60377
// result := SortListByListDesc ( units , tmp ) ;
60357: LD_ADDR_VAR 0 3
60361: PUSH
60362: LD_VAR 0 1
60366: PPUSH
60367: LD_VAR 0 5
60371: PPUSH
60372: CALL_OW 77
60376: ST_TO_ADDR
// end ;
60377: LD_VAR 0 3
60381: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60382: LD_INT 0
60384: PPUSH
60385: PPUSH
60386: PPUSH
// result := false ;
60387: LD_ADDR_VAR 0 3
60391: PUSH
60392: LD_INT 0
60394: ST_TO_ADDR
// x := GetX ( building ) ;
60395: LD_ADDR_VAR 0 4
60399: PUSH
60400: LD_VAR 0 2
60404: PPUSH
60405: CALL_OW 250
60409: ST_TO_ADDR
// y := GetY ( building ) ;
60410: LD_ADDR_VAR 0 5
60414: PUSH
60415: LD_VAR 0 2
60419: PPUSH
60420: CALL_OW 251
60424: ST_TO_ADDR
// if not building or not x or not y then
60425: LD_VAR 0 2
60429: NOT
60430: PUSH
60431: LD_VAR 0 4
60435: NOT
60436: OR
60437: PUSH
60438: LD_VAR 0 5
60442: NOT
60443: OR
60444: IFFALSE 60448
// exit ;
60446: GO 60540
// if GetTaskList ( unit ) then
60448: LD_VAR 0 1
60452: PPUSH
60453: CALL_OW 437
60457: IFFALSE 60540
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60459: LD_STRING e
60461: PUSH
60462: LD_VAR 0 1
60466: PPUSH
60467: CALL_OW 437
60471: PUSH
60472: LD_INT 1
60474: ARRAY
60475: PUSH
60476: LD_INT 1
60478: ARRAY
60479: EQUAL
60480: PUSH
60481: LD_VAR 0 4
60485: PUSH
60486: LD_VAR 0 1
60490: PPUSH
60491: CALL_OW 437
60495: PUSH
60496: LD_INT 1
60498: ARRAY
60499: PUSH
60500: LD_INT 2
60502: ARRAY
60503: EQUAL
60504: AND
60505: PUSH
60506: LD_VAR 0 5
60510: PUSH
60511: LD_VAR 0 1
60515: PPUSH
60516: CALL_OW 437
60520: PUSH
60521: LD_INT 1
60523: ARRAY
60524: PUSH
60525: LD_INT 3
60527: ARRAY
60528: EQUAL
60529: AND
60530: IFFALSE 60540
// result := true end ;
60532: LD_ADDR_VAR 0 3
60536: PUSH
60537: LD_INT 1
60539: ST_TO_ADDR
// end ;
60540: LD_VAR 0 3
60544: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60545: LD_INT 0
60547: PPUSH
// result := false ;
60548: LD_ADDR_VAR 0 4
60552: PUSH
60553: LD_INT 0
60555: ST_TO_ADDR
// if GetTaskList ( unit ) then
60556: LD_VAR 0 1
60560: PPUSH
60561: CALL_OW 437
60565: IFFALSE 60648
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60567: LD_STRING M
60569: PUSH
60570: LD_VAR 0 1
60574: PPUSH
60575: CALL_OW 437
60579: PUSH
60580: LD_INT 1
60582: ARRAY
60583: PUSH
60584: LD_INT 1
60586: ARRAY
60587: EQUAL
60588: PUSH
60589: LD_VAR 0 2
60593: PUSH
60594: LD_VAR 0 1
60598: PPUSH
60599: CALL_OW 437
60603: PUSH
60604: LD_INT 1
60606: ARRAY
60607: PUSH
60608: LD_INT 2
60610: ARRAY
60611: EQUAL
60612: AND
60613: PUSH
60614: LD_VAR 0 3
60618: PUSH
60619: LD_VAR 0 1
60623: PPUSH
60624: CALL_OW 437
60628: PUSH
60629: LD_INT 1
60631: ARRAY
60632: PUSH
60633: LD_INT 3
60635: ARRAY
60636: EQUAL
60637: AND
60638: IFFALSE 60648
// result := true ;
60640: LD_ADDR_VAR 0 4
60644: PUSH
60645: LD_INT 1
60647: ST_TO_ADDR
// end ; end ;
60648: LD_VAR 0 4
60652: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60653: LD_INT 0
60655: PPUSH
60656: PPUSH
60657: PPUSH
60658: PPUSH
// if not unit or not area then
60659: LD_VAR 0 1
60663: NOT
60664: PUSH
60665: LD_VAR 0 2
60669: NOT
60670: OR
60671: IFFALSE 60675
// exit ;
60673: GO 60839
// tmp := AreaToList ( area , i ) ;
60675: LD_ADDR_VAR 0 6
60679: PUSH
60680: LD_VAR 0 2
60684: PPUSH
60685: LD_VAR 0 5
60689: PPUSH
60690: CALL_OW 517
60694: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60695: LD_ADDR_VAR 0 5
60699: PUSH
60700: DOUBLE
60701: LD_INT 1
60703: DEC
60704: ST_TO_ADDR
60705: LD_VAR 0 6
60709: PUSH
60710: LD_INT 1
60712: ARRAY
60713: PUSH
60714: FOR_TO
60715: IFFALSE 60837
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60717: LD_ADDR_VAR 0 7
60721: PUSH
60722: LD_VAR 0 6
60726: PUSH
60727: LD_INT 1
60729: ARRAY
60730: PUSH
60731: LD_VAR 0 5
60735: ARRAY
60736: PUSH
60737: LD_VAR 0 6
60741: PUSH
60742: LD_INT 2
60744: ARRAY
60745: PUSH
60746: LD_VAR 0 5
60750: ARRAY
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60756: LD_VAR 0 7
60760: PUSH
60761: LD_INT 1
60763: ARRAY
60764: PPUSH
60765: LD_VAR 0 7
60769: PUSH
60770: LD_INT 2
60772: ARRAY
60773: PPUSH
60774: CALL_OW 428
60778: PUSH
60779: LD_INT 0
60781: EQUAL
60782: IFFALSE 60835
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60784: LD_VAR 0 1
60788: PPUSH
60789: LD_VAR 0 7
60793: PUSH
60794: LD_INT 1
60796: ARRAY
60797: PPUSH
60798: LD_VAR 0 7
60802: PUSH
60803: LD_INT 2
60805: ARRAY
60806: PPUSH
60807: LD_VAR 0 3
60811: PPUSH
60812: CALL_OW 48
// result := IsPlaced ( unit ) ;
60816: LD_ADDR_VAR 0 4
60820: PUSH
60821: LD_VAR 0 1
60825: PPUSH
60826: CALL_OW 305
60830: ST_TO_ADDR
// exit ;
60831: POP
60832: POP
60833: GO 60839
// end ; end ;
60835: GO 60714
60837: POP
60838: POP
// end ;
60839: LD_VAR 0 4
60843: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60844: LD_INT 0
60846: PPUSH
60847: PPUSH
60848: PPUSH
// if not side or side > 8 then
60849: LD_VAR 0 1
60853: NOT
60854: PUSH
60855: LD_VAR 0 1
60859: PUSH
60860: LD_INT 8
60862: GREATER
60863: OR
60864: IFFALSE 60868
// exit ;
60866: GO 61055
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60868: LD_ADDR_VAR 0 4
60872: PUSH
60873: LD_INT 22
60875: PUSH
60876: LD_VAR 0 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 21
60887: PUSH
60888: LD_INT 3
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PPUSH
60899: CALL_OW 69
60903: ST_TO_ADDR
// if not tmp then
60904: LD_VAR 0 4
60908: NOT
60909: IFFALSE 60913
// exit ;
60911: GO 61055
// enable_addtolog := true ;
60913: LD_ADDR_OWVAR 81
60917: PUSH
60918: LD_INT 1
60920: ST_TO_ADDR
// AddToLog ( [ ) ;
60921: LD_STRING [
60923: PPUSH
60924: CALL_OW 561
// for i in tmp do
60928: LD_ADDR_VAR 0 3
60932: PUSH
60933: LD_VAR 0 4
60937: PUSH
60938: FOR_IN
60939: IFFALSE 61046
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60941: LD_STRING [
60943: PUSH
60944: LD_VAR 0 3
60948: PPUSH
60949: CALL_OW 266
60953: STR
60954: PUSH
60955: LD_STRING , 
60957: STR
60958: PUSH
60959: LD_VAR 0 3
60963: PPUSH
60964: CALL_OW 250
60968: STR
60969: PUSH
60970: LD_STRING , 
60972: STR
60973: PUSH
60974: LD_VAR 0 3
60978: PPUSH
60979: CALL_OW 251
60983: STR
60984: PUSH
60985: LD_STRING , 
60987: STR
60988: PUSH
60989: LD_VAR 0 3
60993: PPUSH
60994: CALL_OW 254
60998: STR
60999: PUSH
61000: LD_STRING , 
61002: STR
61003: PUSH
61004: LD_VAR 0 3
61008: PPUSH
61009: LD_INT 1
61011: PPUSH
61012: CALL_OW 268
61016: STR
61017: PUSH
61018: LD_STRING , 
61020: STR
61021: PUSH
61022: LD_VAR 0 3
61026: PPUSH
61027: LD_INT 2
61029: PPUSH
61030: CALL_OW 268
61034: STR
61035: PUSH
61036: LD_STRING ],
61038: STR
61039: PPUSH
61040: CALL_OW 561
// end ;
61044: GO 60938
61046: POP
61047: POP
// AddToLog ( ]; ) ;
61048: LD_STRING ];
61050: PPUSH
61051: CALL_OW 561
// end ;
61055: LD_VAR 0 2
61059: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61060: LD_INT 0
61062: PPUSH
61063: PPUSH
61064: PPUSH
61065: PPUSH
61066: PPUSH
// if not area or not rate or not max then
61067: LD_VAR 0 1
61071: NOT
61072: PUSH
61073: LD_VAR 0 2
61077: NOT
61078: OR
61079: PUSH
61080: LD_VAR 0 4
61084: NOT
61085: OR
61086: IFFALSE 61090
// exit ;
61088: GO 61282
// while 1 do
61090: LD_INT 1
61092: IFFALSE 61282
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61094: LD_ADDR_VAR 0 9
61098: PUSH
61099: LD_VAR 0 1
61103: PPUSH
61104: LD_INT 1
61106: PPUSH
61107: CALL_OW 287
61111: PUSH
61112: LD_INT 10
61114: MUL
61115: ST_TO_ADDR
// r := rate / 10 ;
61116: LD_ADDR_VAR 0 7
61120: PUSH
61121: LD_VAR 0 2
61125: PUSH
61126: LD_INT 10
61128: DIVREAL
61129: ST_TO_ADDR
// time := 1 1$00 ;
61130: LD_ADDR_VAR 0 8
61134: PUSH
61135: LD_INT 2100
61137: ST_TO_ADDR
// if amount < min then
61138: LD_VAR 0 9
61142: PUSH
61143: LD_VAR 0 3
61147: LESS
61148: IFFALSE 61166
// r := r * 2 else
61150: LD_ADDR_VAR 0 7
61154: PUSH
61155: LD_VAR 0 7
61159: PUSH
61160: LD_INT 2
61162: MUL
61163: ST_TO_ADDR
61164: GO 61192
// if amount > max then
61166: LD_VAR 0 9
61170: PUSH
61171: LD_VAR 0 4
61175: GREATER
61176: IFFALSE 61192
// r := r / 2 ;
61178: LD_ADDR_VAR 0 7
61182: PUSH
61183: LD_VAR 0 7
61187: PUSH
61188: LD_INT 2
61190: DIVREAL
61191: ST_TO_ADDR
// time := time / r ;
61192: LD_ADDR_VAR 0 8
61196: PUSH
61197: LD_VAR 0 8
61201: PUSH
61202: LD_VAR 0 7
61206: DIVREAL
61207: ST_TO_ADDR
// if time < 0 then
61208: LD_VAR 0 8
61212: PUSH
61213: LD_INT 0
61215: LESS
61216: IFFALSE 61233
// time := time * - 1 ;
61218: LD_ADDR_VAR 0 8
61222: PUSH
61223: LD_VAR 0 8
61227: PUSH
61228: LD_INT 1
61230: NEG
61231: MUL
61232: ST_TO_ADDR
// wait ( time ) ;
61233: LD_VAR 0 8
61237: PPUSH
61238: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61242: LD_INT 35
61244: PPUSH
61245: LD_INT 875
61247: PPUSH
61248: CALL_OW 12
61252: PPUSH
61253: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61257: LD_INT 1
61259: PPUSH
61260: LD_INT 5
61262: PPUSH
61263: CALL_OW 12
61267: PPUSH
61268: LD_VAR 0 1
61272: PPUSH
61273: LD_INT 1
61275: PPUSH
61276: CALL_OW 55
// end ;
61280: GO 61090
// end ;
61282: LD_VAR 0 5
61286: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61287: LD_INT 0
61289: PPUSH
61290: PPUSH
61291: PPUSH
61292: PPUSH
61293: PPUSH
61294: PPUSH
61295: PPUSH
61296: PPUSH
// if not turrets or not factories then
61297: LD_VAR 0 1
61301: NOT
61302: PUSH
61303: LD_VAR 0 2
61307: NOT
61308: OR
61309: IFFALSE 61313
// exit ;
61311: GO 61620
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61313: LD_ADDR_VAR 0 10
61317: PUSH
61318: LD_INT 5
61320: PUSH
61321: LD_INT 6
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: LD_INT 4
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 3
61340: PUSH
61341: LD_INT 5
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 24
61355: PUSH
61356: LD_INT 25
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 23
61365: PUSH
61366: LD_INT 27
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 42
61379: PUSH
61380: LD_INT 43
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 44
61389: PUSH
61390: LD_INT 46
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 45
61399: PUSH
61400: LD_INT 47
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: LIST
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: LIST
61416: ST_TO_ADDR
// result := [ ] ;
61417: LD_ADDR_VAR 0 3
61421: PUSH
61422: EMPTY
61423: ST_TO_ADDR
// for i in turrets do
61424: LD_ADDR_VAR 0 4
61428: PUSH
61429: LD_VAR 0 1
61433: PUSH
61434: FOR_IN
61435: IFFALSE 61618
// begin nat := GetNation ( i ) ;
61437: LD_ADDR_VAR 0 7
61441: PUSH
61442: LD_VAR 0 4
61446: PPUSH
61447: CALL_OW 248
61451: ST_TO_ADDR
// weapon := 0 ;
61452: LD_ADDR_VAR 0 8
61456: PUSH
61457: LD_INT 0
61459: ST_TO_ADDR
// if not nat then
61460: LD_VAR 0 7
61464: NOT
61465: IFFALSE 61469
// continue ;
61467: GO 61434
// for j in list [ nat ] do
61469: LD_ADDR_VAR 0 5
61473: PUSH
61474: LD_VAR 0 10
61478: PUSH
61479: LD_VAR 0 7
61483: ARRAY
61484: PUSH
61485: FOR_IN
61486: IFFALSE 61527
// if GetBWeapon ( i ) = j [ 1 ] then
61488: LD_VAR 0 4
61492: PPUSH
61493: CALL_OW 269
61497: PUSH
61498: LD_VAR 0 5
61502: PUSH
61503: LD_INT 1
61505: ARRAY
61506: EQUAL
61507: IFFALSE 61525
// begin weapon := j [ 2 ] ;
61509: LD_ADDR_VAR 0 8
61513: PUSH
61514: LD_VAR 0 5
61518: PUSH
61519: LD_INT 2
61521: ARRAY
61522: ST_TO_ADDR
// break ;
61523: GO 61527
// end ;
61525: GO 61485
61527: POP
61528: POP
// if not weapon then
61529: LD_VAR 0 8
61533: NOT
61534: IFFALSE 61538
// continue ;
61536: GO 61434
// for k in factories do
61538: LD_ADDR_VAR 0 6
61542: PUSH
61543: LD_VAR 0 2
61547: PUSH
61548: FOR_IN
61549: IFFALSE 61614
// begin weapons := AvailableWeaponList ( k ) ;
61551: LD_ADDR_VAR 0 9
61555: PUSH
61556: LD_VAR 0 6
61560: PPUSH
61561: CALL_OW 478
61565: ST_TO_ADDR
// if not weapons then
61566: LD_VAR 0 9
61570: NOT
61571: IFFALSE 61575
// continue ;
61573: GO 61548
// if weapon in weapons then
61575: LD_VAR 0 8
61579: PUSH
61580: LD_VAR 0 9
61584: IN
61585: IFFALSE 61612
// begin result := [ i , weapon ] ;
61587: LD_ADDR_VAR 0 3
61591: PUSH
61592: LD_VAR 0 4
61596: PUSH
61597: LD_VAR 0 8
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: ST_TO_ADDR
// exit ;
61606: POP
61607: POP
61608: POP
61609: POP
61610: GO 61620
// end ; end ;
61612: GO 61548
61614: POP
61615: POP
// end ;
61616: GO 61434
61618: POP
61619: POP
// end ;
61620: LD_VAR 0 3
61624: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61625: LD_INT 0
61627: PPUSH
// if not side or side > 8 then
61628: LD_VAR 0 3
61632: NOT
61633: PUSH
61634: LD_VAR 0 3
61638: PUSH
61639: LD_INT 8
61641: GREATER
61642: OR
61643: IFFALSE 61647
// exit ;
61645: GO 61706
// if not range then
61647: LD_VAR 0 4
61651: NOT
61652: IFFALSE 61663
// range := - 12 ;
61654: LD_ADDR_VAR 0 4
61658: PUSH
61659: LD_INT 12
61661: NEG
61662: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61663: LD_VAR 0 1
61667: PPUSH
61668: LD_VAR 0 2
61672: PPUSH
61673: LD_VAR 0 3
61677: PPUSH
61678: LD_VAR 0 4
61682: PPUSH
61683: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61687: LD_VAR 0 1
61691: PPUSH
61692: LD_VAR 0 2
61696: PPUSH
61697: LD_VAR 0 3
61701: PPUSH
61702: CALL_OW 331
// end ;
61706: LD_VAR 0 5
61710: RET
// export function Video ( mode ) ; begin
61711: LD_INT 0
61713: PPUSH
// ingame_video = mode ;
61714: LD_ADDR_OWVAR 52
61718: PUSH
61719: LD_VAR 0 1
61723: ST_TO_ADDR
// interface_hidden = mode ;
61724: LD_ADDR_OWVAR 54
61728: PUSH
61729: LD_VAR 0 1
61733: ST_TO_ADDR
// end ;
61734: LD_VAR 0 2
61738: RET
// export function Join ( array , element ) ; begin
61739: LD_INT 0
61741: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61742: LD_ADDR_VAR 0 3
61746: PUSH
61747: LD_VAR 0 1
61751: PPUSH
61752: LD_VAR 0 1
61756: PUSH
61757: LD_INT 1
61759: PLUS
61760: PPUSH
61761: LD_VAR 0 2
61765: PPUSH
61766: CALL_OW 1
61770: ST_TO_ADDR
// end ;
61771: LD_VAR 0 3
61775: RET
// export function JoinUnion ( array , element ) ; begin
61776: LD_INT 0
61778: PPUSH
// result := array union element ;
61779: LD_ADDR_VAR 0 3
61783: PUSH
61784: LD_VAR 0 1
61788: PUSH
61789: LD_VAR 0 2
61793: UNION
61794: ST_TO_ADDR
// end ;
61795: LD_VAR 0 3
61799: RET
// export function GetBehemoths ( side ) ; begin
61800: LD_INT 0
61802: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61803: LD_ADDR_VAR 0 2
61807: PUSH
61808: LD_INT 22
61810: PUSH
61811: LD_VAR 0 1
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 31
61822: PUSH
61823: LD_INT 25
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PPUSH
61834: CALL_OW 69
61838: ST_TO_ADDR
// end ;
61839: LD_VAR 0 2
61843: RET
// export function Shuffle ( array ) ; var i , index ; begin
61844: LD_INT 0
61846: PPUSH
61847: PPUSH
61848: PPUSH
// result := [ ] ;
61849: LD_ADDR_VAR 0 2
61853: PUSH
61854: EMPTY
61855: ST_TO_ADDR
// if not array then
61856: LD_VAR 0 1
61860: NOT
61861: IFFALSE 61865
// exit ;
61863: GO 61964
// Randomize ;
61865: CALL_OW 10
// for i = array downto 1 do
61869: LD_ADDR_VAR 0 3
61873: PUSH
61874: DOUBLE
61875: LD_VAR 0 1
61879: INC
61880: ST_TO_ADDR
61881: LD_INT 1
61883: PUSH
61884: FOR_DOWNTO
61885: IFFALSE 61962
// begin index := rand ( 1 , array ) ;
61887: LD_ADDR_VAR 0 4
61891: PUSH
61892: LD_INT 1
61894: PPUSH
61895: LD_VAR 0 1
61899: PPUSH
61900: CALL_OW 12
61904: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61905: LD_ADDR_VAR 0 2
61909: PUSH
61910: LD_VAR 0 2
61914: PPUSH
61915: LD_VAR 0 2
61919: PUSH
61920: LD_INT 1
61922: PLUS
61923: PPUSH
61924: LD_VAR 0 1
61928: PUSH
61929: LD_VAR 0 4
61933: ARRAY
61934: PPUSH
61935: CALL_OW 2
61939: ST_TO_ADDR
// array := Delete ( array , index ) ;
61940: LD_ADDR_VAR 0 1
61944: PUSH
61945: LD_VAR 0 1
61949: PPUSH
61950: LD_VAR 0 4
61954: PPUSH
61955: CALL_OW 3
61959: ST_TO_ADDR
// end ;
61960: GO 61884
61962: POP
61963: POP
// end ;
61964: LD_VAR 0 2
61968: RET
// export function GetBaseMaterials ( base ) ; begin
61969: LD_INT 0
61971: PPUSH
// result := [ 0 , 0 , 0 ] ;
61972: LD_ADDR_VAR 0 2
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: LIST
61990: ST_TO_ADDR
// if not base then
61991: LD_VAR 0 1
61995: NOT
61996: IFFALSE 62000
// exit ;
61998: GO 62049
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62000: LD_ADDR_VAR 0 2
62004: PUSH
62005: LD_VAR 0 1
62009: PPUSH
62010: LD_INT 1
62012: PPUSH
62013: CALL_OW 275
62017: PUSH
62018: LD_VAR 0 1
62022: PPUSH
62023: LD_INT 2
62025: PPUSH
62026: CALL_OW 275
62030: PUSH
62031: LD_VAR 0 1
62035: PPUSH
62036: LD_INT 3
62038: PPUSH
62039: CALL_OW 275
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: LIST
62048: ST_TO_ADDR
// end ;
62049: LD_VAR 0 2
62053: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62054: LD_INT 0
62056: PPUSH
62057: PPUSH
// result := array ;
62058: LD_ADDR_VAR 0 3
62062: PUSH
62063: LD_VAR 0 1
62067: ST_TO_ADDR
// if size > 0 then
62068: LD_VAR 0 2
62072: PUSH
62073: LD_INT 0
62075: GREATER
62076: IFFALSE 62122
// for i := array downto size do
62078: LD_ADDR_VAR 0 4
62082: PUSH
62083: DOUBLE
62084: LD_VAR 0 1
62088: INC
62089: ST_TO_ADDR
62090: LD_VAR 0 2
62094: PUSH
62095: FOR_DOWNTO
62096: IFFALSE 62120
// result := Delete ( result , result ) ;
62098: LD_ADDR_VAR 0 3
62102: PUSH
62103: LD_VAR 0 3
62107: PPUSH
62108: LD_VAR 0 3
62112: PPUSH
62113: CALL_OW 3
62117: ST_TO_ADDR
62118: GO 62095
62120: POP
62121: POP
// end ;
62122: LD_VAR 0 3
62126: RET
// export function ComExit ( unit ) ; var tmp ; begin
62127: LD_INT 0
62129: PPUSH
62130: PPUSH
// if not IsInUnit ( unit ) then
62131: LD_VAR 0 1
62135: PPUSH
62136: CALL_OW 310
62140: NOT
62141: IFFALSE 62145
// exit ;
62143: GO 62205
// tmp := IsInUnit ( unit ) ;
62145: LD_ADDR_VAR 0 3
62149: PUSH
62150: LD_VAR 0 1
62154: PPUSH
62155: CALL_OW 310
62159: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62160: LD_VAR 0 3
62164: PPUSH
62165: CALL_OW 247
62169: PUSH
62170: LD_INT 2
62172: EQUAL
62173: IFFALSE 62186
// ComExitVehicle ( unit ) else
62175: LD_VAR 0 1
62179: PPUSH
62180: CALL_OW 121
62184: GO 62195
// ComExitBuilding ( unit ) ;
62186: LD_VAR 0 1
62190: PPUSH
62191: CALL_OW 122
// result := tmp ;
62195: LD_ADDR_VAR 0 2
62199: PUSH
62200: LD_VAR 0 3
62204: ST_TO_ADDR
// end ;
62205: LD_VAR 0 2
62209: RET
// export function ComExitAll ( units ) ; var i ; begin
62210: LD_INT 0
62212: PPUSH
62213: PPUSH
// if not units then
62214: LD_VAR 0 1
62218: NOT
62219: IFFALSE 62223
// exit ;
62221: GO 62249
// for i in units do
62223: LD_ADDR_VAR 0 3
62227: PUSH
62228: LD_VAR 0 1
62232: PUSH
62233: FOR_IN
62234: IFFALSE 62247
// ComExit ( i ) ;
62236: LD_VAR 0 3
62240: PPUSH
62241: CALL 62127 0 1
62245: GO 62233
62247: POP
62248: POP
// end ;
62249: LD_VAR 0 2
62253: RET
// export function ResetHc ; begin
62254: LD_INT 0
62256: PPUSH
// InitHc ;
62257: CALL_OW 19
// hc_importance := 0 ;
62261: LD_ADDR_OWVAR 32
62265: PUSH
62266: LD_INT 0
62268: ST_TO_ADDR
// end ;
62269: LD_VAR 0 1
62273: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62274: LD_INT 0
62276: PPUSH
62277: PPUSH
62278: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62279: LD_ADDR_VAR 0 6
62283: PUSH
62284: LD_VAR 0 1
62288: PUSH
62289: LD_VAR 0 3
62293: PLUS
62294: PUSH
62295: LD_INT 2
62297: DIV
62298: ST_TO_ADDR
// if _x < 0 then
62299: LD_VAR 0 6
62303: PUSH
62304: LD_INT 0
62306: LESS
62307: IFFALSE 62324
// _x := _x * - 1 ;
62309: LD_ADDR_VAR 0 6
62313: PUSH
62314: LD_VAR 0 6
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: MUL
62323: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62324: LD_ADDR_VAR 0 7
62328: PUSH
62329: LD_VAR 0 2
62333: PUSH
62334: LD_VAR 0 4
62338: PLUS
62339: PUSH
62340: LD_INT 2
62342: DIV
62343: ST_TO_ADDR
// if _y < 0 then
62344: LD_VAR 0 7
62348: PUSH
62349: LD_INT 0
62351: LESS
62352: IFFALSE 62369
// _y := _y * - 1 ;
62354: LD_ADDR_VAR 0 7
62358: PUSH
62359: LD_VAR 0 7
62363: PUSH
62364: LD_INT 1
62366: NEG
62367: MUL
62368: ST_TO_ADDR
// result := [ _x , _y ] ;
62369: LD_ADDR_VAR 0 5
62373: PUSH
62374: LD_VAR 0 6
62378: PUSH
62379: LD_VAR 0 7
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: ST_TO_ADDR
// end ;
62388: LD_VAR 0 5
62392: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62393: LD_INT 0
62395: PPUSH
62396: PPUSH
62397: PPUSH
62398: PPUSH
// task := GetTaskList ( unit ) ;
62399: LD_ADDR_VAR 0 7
62403: PUSH
62404: LD_VAR 0 1
62408: PPUSH
62409: CALL_OW 437
62413: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62414: LD_VAR 0 7
62418: NOT
62419: PUSH
62420: LD_VAR 0 1
62424: PPUSH
62425: LD_VAR 0 2
62429: PPUSH
62430: CALL_OW 308
62434: NOT
62435: AND
62436: IFFALSE 62440
// exit ;
62438: GO 62558
// if IsInArea ( unit , area ) then
62440: LD_VAR 0 1
62444: PPUSH
62445: LD_VAR 0 2
62449: PPUSH
62450: CALL_OW 308
62454: IFFALSE 62472
// begin ComMoveToArea ( unit , goAway ) ;
62456: LD_VAR 0 1
62460: PPUSH
62461: LD_VAR 0 3
62465: PPUSH
62466: CALL_OW 113
// exit ;
62470: GO 62558
// end ; if task [ 1 ] [ 1 ] <> M then
62472: LD_VAR 0 7
62476: PUSH
62477: LD_INT 1
62479: ARRAY
62480: PUSH
62481: LD_INT 1
62483: ARRAY
62484: PUSH
62485: LD_STRING M
62487: NONEQUAL
62488: IFFALSE 62492
// exit ;
62490: GO 62558
// x := task [ 1 ] [ 2 ] ;
62492: LD_ADDR_VAR 0 5
62496: PUSH
62497: LD_VAR 0 7
62501: PUSH
62502: LD_INT 1
62504: ARRAY
62505: PUSH
62506: LD_INT 2
62508: ARRAY
62509: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62510: LD_ADDR_VAR 0 6
62514: PUSH
62515: LD_VAR 0 7
62519: PUSH
62520: LD_INT 1
62522: ARRAY
62523: PUSH
62524: LD_INT 3
62526: ARRAY
62527: ST_TO_ADDR
// if InArea ( x , y , area ) then
62528: LD_VAR 0 5
62532: PPUSH
62533: LD_VAR 0 6
62537: PPUSH
62538: LD_VAR 0 2
62542: PPUSH
62543: CALL_OW 309
62547: IFFALSE 62558
// ComStop ( unit ) ;
62549: LD_VAR 0 1
62553: PPUSH
62554: CALL_OW 141
// end ;
62558: LD_VAR 0 4
62562: RET
// export function Abs ( value ) ; begin
62563: LD_INT 0
62565: PPUSH
// result := value ;
62566: LD_ADDR_VAR 0 2
62570: PUSH
62571: LD_VAR 0 1
62575: ST_TO_ADDR
// if value < 0 then
62576: LD_VAR 0 1
62580: PUSH
62581: LD_INT 0
62583: LESS
62584: IFFALSE 62601
// result := value * - 1 ;
62586: LD_ADDR_VAR 0 2
62590: PUSH
62591: LD_VAR 0 1
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: MUL
62600: ST_TO_ADDR
// end ;
62601: LD_VAR 0 2
62605: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62606: LD_INT 0
62608: PPUSH
62609: PPUSH
62610: PPUSH
62611: PPUSH
62612: PPUSH
62613: PPUSH
62614: PPUSH
62615: PPUSH
// if not unit or not building then
62616: LD_VAR 0 1
62620: NOT
62621: PUSH
62622: LD_VAR 0 2
62626: NOT
62627: OR
62628: IFFALSE 62632
// exit ;
62630: GO 62858
// x := GetX ( building ) ;
62632: LD_ADDR_VAR 0 4
62636: PUSH
62637: LD_VAR 0 2
62641: PPUSH
62642: CALL_OW 250
62646: ST_TO_ADDR
// y := GetY ( building ) ;
62647: LD_ADDR_VAR 0 6
62651: PUSH
62652: LD_VAR 0 2
62656: PPUSH
62657: CALL_OW 251
62661: ST_TO_ADDR
// d := GetDir ( building ) ;
62662: LD_ADDR_VAR 0 8
62666: PUSH
62667: LD_VAR 0 2
62671: PPUSH
62672: CALL_OW 254
62676: ST_TO_ADDR
// r := 4 ;
62677: LD_ADDR_VAR 0 9
62681: PUSH
62682: LD_INT 4
62684: ST_TO_ADDR
// for i := 1 to 5 do
62685: LD_ADDR_VAR 0 10
62689: PUSH
62690: DOUBLE
62691: LD_INT 1
62693: DEC
62694: ST_TO_ADDR
62695: LD_INT 5
62697: PUSH
62698: FOR_TO
62699: IFFALSE 62856
// begin _x := ShiftX ( x , d , r + i ) ;
62701: LD_ADDR_VAR 0 5
62705: PUSH
62706: LD_VAR 0 4
62710: PPUSH
62711: LD_VAR 0 8
62715: PPUSH
62716: LD_VAR 0 9
62720: PUSH
62721: LD_VAR 0 10
62725: PLUS
62726: PPUSH
62727: CALL_OW 272
62731: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62732: LD_ADDR_VAR 0 7
62736: PUSH
62737: LD_VAR 0 6
62741: PPUSH
62742: LD_VAR 0 8
62746: PPUSH
62747: LD_VAR 0 9
62751: PUSH
62752: LD_VAR 0 10
62756: PLUS
62757: PPUSH
62758: CALL_OW 273
62762: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62763: LD_VAR 0 5
62767: PPUSH
62768: LD_VAR 0 7
62772: PPUSH
62773: CALL_OW 488
62777: PUSH
62778: LD_VAR 0 5
62782: PPUSH
62783: LD_VAR 0 7
62787: PPUSH
62788: CALL_OW 428
62792: PPUSH
62793: CALL_OW 247
62797: PUSH
62798: LD_INT 3
62800: PUSH
62801: LD_INT 2
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: IN
62808: NOT
62809: AND
62810: IFFALSE 62854
// begin ComMoveXY ( unit , _x , _y ) ;
62812: LD_VAR 0 1
62816: PPUSH
62817: LD_VAR 0 5
62821: PPUSH
62822: LD_VAR 0 7
62826: PPUSH
62827: CALL_OW 111
// result := [ _x , _y ] ;
62831: LD_ADDR_VAR 0 3
62835: PUSH
62836: LD_VAR 0 5
62840: PUSH
62841: LD_VAR 0 7
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: ST_TO_ADDR
// exit ;
62850: POP
62851: POP
62852: GO 62858
// end ; end ;
62854: GO 62698
62856: POP
62857: POP
// end ;
62858: LD_VAR 0 3
62862: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62863: LD_INT 0
62865: PPUSH
62866: PPUSH
62867: PPUSH
// result := 0 ;
62868: LD_ADDR_VAR 0 3
62872: PUSH
62873: LD_INT 0
62875: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62876: LD_VAR 0 1
62880: PUSH
62881: LD_INT 0
62883: LESS
62884: PUSH
62885: LD_VAR 0 1
62889: PUSH
62890: LD_INT 8
62892: GREATER
62893: OR
62894: PUSH
62895: LD_VAR 0 2
62899: PUSH
62900: LD_INT 0
62902: LESS
62903: OR
62904: PUSH
62905: LD_VAR 0 2
62909: PUSH
62910: LD_INT 8
62912: GREATER
62913: OR
62914: IFFALSE 62918
// exit ;
62916: GO 62993
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62918: LD_ADDR_VAR 0 4
62922: PUSH
62923: LD_INT 22
62925: PUSH
62926: LD_VAR 0 2
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PPUSH
62935: CALL_OW 69
62939: PUSH
62940: FOR_IN
62941: IFFALSE 62991
// begin un := UnitShoot ( i ) ;
62943: LD_ADDR_VAR 0 5
62947: PUSH
62948: LD_VAR 0 4
62952: PPUSH
62953: CALL_OW 504
62957: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62958: LD_VAR 0 5
62962: PPUSH
62963: CALL_OW 255
62967: PUSH
62968: LD_VAR 0 1
62972: EQUAL
62973: IFFALSE 62989
// begin result := un ;
62975: LD_ADDR_VAR 0 3
62979: PUSH
62980: LD_VAR 0 5
62984: ST_TO_ADDR
// exit ;
62985: POP
62986: POP
62987: GO 62993
// end ; end ;
62989: GO 62940
62991: POP
62992: POP
// end ;
62993: LD_VAR 0 3
62997: RET
// export function GetCargoBay ( units ) ; begin
62998: LD_INT 0
63000: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63001: LD_ADDR_VAR 0 2
63005: PUSH
63006: LD_VAR 0 1
63010: PPUSH
63011: LD_INT 2
63013: PUSH
63014: LD_INT 34
63016: PUSH
63017: LD_INT 12
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 34
63026: PUSH
63027: LD_INT 51
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 34
63036: PUSH
63037: LD_INT 32
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 34
63046: PUSH
63047: LD_EXP 19
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: PPUSH
63063: CALL_OW 72
63067: ST_TO_ADDR
// end ;
63068: LD_VAR 0 2
63072: RET
// export function Negate ( value ) ; begin
63073: LD_INT 0
63075: PPUSH
// result := not value ;
63076: LD_ADDR_VAR 0 2
63080: PUSH
63081: LD_VAR 0 1
63085: NOT
63086: ST_TO_ADDR
// end ;
63087: LD_VAR 0 2
63091: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
63092: LD_INT 0
63094: PPUSH
// if x1 = x2 then
63095: LD_VAR 0 1
63099: PUSH
63100: LD_VAR 0 3
63104: EQUAL
63105: IFFALSE 63139
// begin if y1 > y2 then
63107: LD_VAR 0 2
63111: PUSH
63112: LD_VAR 0 4
63116: GREATER
63117: IFFALSE 63129
// result := 0 else
63119: LD_ADDR_VAR 0 5
63123: PUSH
63124: LD_INT 0
63126: ST_TO_ADDR
63127: GO 63137
// result := 3 ;
63129: LD_ADDR_VAR 0 5
63133: PUSH
63134: LD_INT 3
63136: ST_TO_ADDR
// exit ;
63137: GO 63225
// end ; if y1 = y2 then
63139: LD_VAR 0 2
63143: PUSH
63144: LD_VAR 0 4
63148: EQUAL
63149: IFFALSE 63183
// begin if x1 > x2 then
63151: LD_VAR 0 1
63155: PUSH
63156: LD_VAR 0 3
63160: GREATER
63161: IFFALSE 63173
// result := 1 else
63163: LD_ADDR_VAR 0 5
63167: PUSH
63168: LD_INT 1
63170: ST_TO_ADDR
63171: GO 63181
// result := 4 ;
63173: LD_ADDR_VAR 0 5
63177: PUSH
63178: LD_INT 4
63180: ST_TO_ADDR
// exit ;
63181: GO 63225
// end ; if x1 > x2 and y1 > y2 then
63183: LD_VAR 0 1
63187: PUSH
63188: LD_VAR 0 3
63192: GREATER
63193: PUSH
63194: LD_VAR 0 2
63198: PUSH
63199: LD_VAR 0 4
63203: GREATER
63204: AND
63205: IFFALSE 63217
// result := 2 else
63207: LD_ADDR_VAR 0 5
63211: PUSH
63212: LD_INT 2
63214: ST_TO_ADDR
63215: GO 63225
// result := 5 ;
63217: LD_ADDR_VAR 0 5
63221: PUSH
63222: LD_INT 5
63224: ST_TO_ADDR
// end ;
63225: LD_VAR 0 5
63229: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63230: LD_INT 0
63232: PPUSH
63233: PPUSH
// if not driver or not IsInUnit ( driver ) then
63234: LD_VAR 0 1
63238: NOT
63239: PUSH
63240: LD_VAR 0 1
63244: PPUSH
63245: CALL_OW 310
63249: NOT
63250: OR
63251: IFFALSE 63255
// exit ;
63253: GO 63345
// vehicle := IsInUnit ( driver ) ;
63255: LD_ADDR_VAR 0 3
63259: PUSH
63260: LD_VAR 0 1
63264: PPUSH
63265: CALL_OW 310
63269: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63270: LD_VAR 0 1
63274: PPUSH
63275: LD_STRING \
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: LD_INT 0
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: PUSH
63305: LD_STRING E
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: LD_VAR 0 3
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: LD_INT 0
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PPUSH
63341: CALL_OW 446
// end ;
63345: LD_VAR 0 2
63349: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63350: LD_INT 0
63352: PPUSH
63353: PPUSH
// if not driver or not IsInUnit ( driver ) then
63354: LD_VAR 0 1
63358: NOT
63359: PUSH
63360: LD_VAR 0 1
63364: PPUSH
63365: CALL_OW 310
63369: NOT
63370: OR
63371: IFFALSE 63375
// exit ;
63373: GO 63465
// vehicle := IsInUnit ( driver ) ;
63375: LD_ADDR_VAR 0 3
63379: PUSH
63380: LD_VAR 0 1
63384: PPUSH
63385: CALL_OW 310
63389: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63390: LD_VAR 0 1
63394: PPUSH
63395: LD_STRING \
63397: PUSH
63398: LD_INT 0
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: LD_INT 0
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: PUSH
63425: LD_STRING E
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: LD_VAR 0 3
63438: PUSH
63439: LD_INT 0
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PPUSH
63461: CALL_OW 447
// end ;
63465: LD_VAR 0 2
63469: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63470: LD_INT 0
63472: PPUSH
63473: PPUSH
63474: PPUSH
// tmp := [ ] ;
63475: LD_ADDR_VAR 0 5
63479: PUSH
63480: EMPTY
63481: ST_TO_ADDR
// for i in units do
63482: LD_ADDR_VAR 0 4
63486: PUSH
63487: LD_VAR 0 1
63491: PUSH
63492: FOR_IN
63493: IFFALSE 63531
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63495: LD_ADDR_VAR 0 5
63499: PUSH
63500: LD_VAR 0 5
63504: PPUSH
63505: LD_VAR 0 5
63509: PUSH
63510: LD_INT 1
63512: PLUS
63513: PPUSH
63514: LD_VAR 0 4
63518: PPUSH
63519: CALL_OW 256
63523: PPUSH
63524: CALL_OW 2
63528: ST_TO_ADDR
63529: GO 63492
63531: POP
63532: POP
// if not tmp then
63533: LD_VAR 0 5
63537: NOT
63538: IFFALSE 63542
// exit ;
63540: GO 63590
// if asc then
63542: LD_VAR 0 2
63546: IFFALSE 63570
// result := SortListByListAsc ( units , tmp ) else
63548: LD_ADDR_VAR 0 3
63552: PUSH
63553: LD_VAR 0 1
63557: PPUSH
63558: LD_VAR 0 5
63562: PPUSH
63563: CALL_OW 76
63567: ST_TO_ADDR
63568: GO 63590
// result := SortListByListDesc ( units , tmp ) ;
63570: LD_ADDR_VAR 0 3
63574: PUSH
63575: LD_VAR 0 1
63579: PPUSH
63580: LD_VAR 0 5
63584: PPUSH
63585: CALL_OW 77
63589: ST_TO_ADDR
// end ;
63590: LD_VAR 0 3
63594: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63595: LD_INT 0
63597: PPUSH
63598: PPUSH
// task := GetTaskList ( mech ) ;
63599: LD_ADDR_VAR 0 4
63603: PUSH
63604: LD_VAR 0 1
63608: PPUSH
63609: CALL_OW 437
63613: ST_TO_ADDR
// if not task then
63614: LD_VAR 0 4
63618: NOT
63619: IFFALSE 63623
// exit ;
63621: GO 63665
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63623: LD_ADDR_VAR 0 3
63627: PUSH
63628: LD_VAR 0 4
63632: PUSH
63633: LD_INT 1
63635: ARRAY
63636: PUSH
63637: LD_INT 1
63639: ARRAY
63640: PUSH
63641: LD_STRING r
63643: EQUAL
63644: PUSH
63645: LD_VAR 0 4
63649: PUSH
63650: LD_INT 1
63652: ARRAY
63653: PUSH
63654: LD_INT 4
63656: ARRAY
63657: PUSH
63658: LD_VAR 0 2
63662: EQUAL
63663: AND
63664: ST_TO_ADDR
// end ;
63665: LD_VAR 0 3
63669: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63670: LD_INT 0
63672: PPUSH
// SetDir ( unit , d ) ;
63673: LD_VAR 0 1
63677: PPUSH
63678: LD_VAR 0 4
63682: PPUSH
63683: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63687: LD_VAR 0 1
63691: PPUSH
63692: LD_VAR 0 2
63696: PPUSH
63697: LD_VAR 0 3
63701: PPUSH
63702: LD_VAR 0 5
63706: PPUSH
63707: CALL_OW 48
// end ;
63711: LD_VAR 0 6
63715: RET
// export function ToNaturalNumber ( number ) ; begin
63716: LD_INT 0
63718: PPUSH
// result := number div 1 ;
63719: LD_ADDR_VAR 0 2
63723: PUSH
63724: LD_VAR 0 1
63728: PUSH
63729: LD_INT 1
63731: DIV
63732: ST_TO_ADDR
// if number < 0 then
63733: LD_VAR 0 1
63737: PUSH
63738: LD_INT 0
63740: LESS
63741: IFFALSE 63751
// result := 0 ;
63743: LD_ADDR_VAR 0 2
63747: PUSH
63748: LD_INT 0
63750: ST_TO_ADDR
// end ;
63751: LD_VAR 0 2
63755: RET
// export function SortByClass ( units , class ) ; var un ; begin
63756: LD_INT 0
63758: PPUSH
63759: PPUSH
// if not units or not class then
63760: LD_VAR 0 1
63764: NOT
63765: PUSH
63766: LD_VAR 0 2
63770: NOT
63771: OR
63772: IFFALSE 63776
// exit ;
63774: GO 63871
// result := [ ] ;
63776: LD_ADDR_VAR 0 3
63780: PUSH
63781: EMPTY
63782: ST_TO_ADDR
// for un in units do
63783: LD_ADDR_VAR 0 4
63787: PUSH
63788: LD_VAR 0 1
63792: PUSH
63793: FOR_IN
63794: IFFALSE 63869
// if GetClass ( un ) = class then
63796: LD_VAR 0 4
63800: PPUSH
63801: CALL_OW 257
63805: PUSH
63806: LD_VAR 0 2
63810: EQUAL
63811: IFFALSE 63838
// result := Insert ( result , 1 , un ) else
63813: LD_ADDR_VAR 0 3
63817: PUSH
63818: LD_VAR 0 3
63822: PPUSH
63823: LD_INT 1
63825: PPUSH
63826: LD_VAR 0 4
63830: PPUSH
63831: CALL_OW 2
63835: ST_TO_ADDR
63836: GO 63867
// result := Replace ( result , result + 1 , un ) ;
63838: LD_ADDR_VAR 0 3
63842: PUSH
63843: LD_VAR 0 3
63847: PPUSH
63848: LD_VAR 0 3
63852: PUSH
63853: LD_INT 1
63855: PLUS
63856: PPUSH
63857: LD_VAR 0 4
63861: PPUSH
63862: CALL_OW 1
63866: ST_TO_ADDR
63867: GO 63793
63869: POP
63870: POP
// end ;
63871: LD_VAR 0 3
63875: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63876: LD_INT 0
63878: PPUSH
63879: PPUSH
63880: PPUSH
63881: PPUSH
63882: PPUSH
63883: PPUSH
63884: PPUSH
// result := [ ] ;
63885: LD_ADDR_VAR 0 4
63889: PUSH
63890: EMPTY
63891: ST_TO_ADDR
// if x - r < 0 then
63892: LD_VAR 0 1
63896: PUSH
63897: LD_VAR 0 3
63901: MINUS
63902: PUSH
63903: LD_INT 0
63905: LESS
63906: IFFALSE 63918
// min_x := 0 else
63908: LD_ADDR_VAR 0 8
63912: PUSH
63913: LD_INT 0
63915: ST_TO_ADDR
63916: GO 63934
// min_x := x - r ;
63918: LD_ADDR_VAR 0 8
63922: PUSH
63923: LD_VAR 0 1
63927: PUSH
63928: LD_VAR 0 3
63932: MINUS
63933: ST_TO_ADDR
// if y - r < 0 then
63934: LD_VAR 0 2
63938: PUSH
63939: LD_VAR 0 3
63943: MINUS
63944: PUSH
63945: LD_INT 0
63947: LESS
63948: IFFALSE 63960
// min_y := 0 else
63950: LD_ADDR_VAR 0 7
63954: PUSH
63955: LD_INT 0
63957: ST_TO_ADDR
63958: GO 63976
// min_y := y - r ;
63960: LD_ADDR_VAR 0 7
63964: PUSH
63965: LD_VAR 0 2
63969: PUSH
63970: LD_VAR 0 3
63974: MINUS
63975: ST_TO_ADDR
// max_x := x + r ;
63976: LD_ADDR_VAR 0 9
63980: PUSH
63981: LD_VAR 0 1
63985: PUSH
63986: LD_VAR 0 3
63990: PLUS
63991: ST_TO_ADDR
// max_y := y + r ;
63992: LD_ADDR_VAR 0 10
63996: PUSH
63997: LD_VAR 0 2
64001: PUSH
64002: LD_VAR 0 3
64006: PLUS
64007: ST_TO_ADDR
// for _x = min_x to max_x do
64008: LD_ADDR_VAR 0 5
64012: PUSH
64013: DOUBLE
64014: LD_VAR 0 8
64018: DEC
64019: ST_TO_ADDR
64020: LD_VAR 0 9
64024: PUSH
64025: FOR_TO
64026: IFFALSE 64127
// for _y = min_y to max_y do
64028: LD_ADDR_VAR 0 6
64032: PUSH
64033: DOUBLE
64034: LD_VAR 0 7
64038: DEC
64039: ST_TO_ADDR
64040: LD_VAR 0 10
64044: PUSH
64045: FOR_TO
64046: IFFALSE 64123
// begin if not ValidHex ( _x , _y ) then
64048: LD_VAR 0 5
64052: PPUSH
64053: LD_VAR 0 6
64057: PPUSH
64058: CALL_OW 488
64062: NOT
64063: IFFALSE 64067
// continue ;
64065: GO 64045
// if GetResourceTypeXY ( _x , _y ) then
64067: LD_VAR 0 5
64071: PPUSH
64072: LD_VAR 0 6
64076: PPUSH
64077: CALL_OW 283
64081: IFFALSE 64121
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64083: LD_ADDR_VAR 0 4
64087: PUSH
64088: LD_VAR 0 4
64092: PPUSH
64093: LD_VAR 0 4
64097: PUSH
64098: LD_INT 1
64100: PLUS
64101: PPUSH
64102: LD_VAR 0 5
64106: PUSH
64107: LD_VAR 0 6
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PPUSH
64116: CALL_OW 1
64120: ST_TO_ADDR
// end ;
64121: GO 64045
64123: POP
64124: POP
64125: GO 64025
64127: POP
64128: POP
// end ;
64129: LD_VAR 0 4
64133: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
64134: LD_INT 0
64136: PPUSH
64137: PPUSH
64138: PPUSH
64139: PPUSH
64140: PPUSH
64141: PPUSH
// if not units then
64142: LD_VAR 0 1
64146: NOT
64147: IFFALSE 64151
// exit ;
64149: GO 64552
// result := UnitFilter ( units , [ f_ok ] ) ;
64151: LD_ADDR_VAR 0 3
64155: PUSH
64156: LD_VAR 0 1
64160: PPUSH
64161: LD_INT 50
64163: PUSH
64164: EMPTY
64165: LIST
64166: PPUSH
64167: CALL_OW 72
64171: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64172: LD_ADDR_VAR 0 7
64176: PUSH
64177: LD_VAR 0 1
64181: PUSH
64182: LD_INT 1
64184: ARRAY
64185: PPUSH
64186: CALL_OW 255
64190: ST_TO_ADDR
// if not result then
64191: LD_VAR 0 3
64195: NOT
64196: IFFALSE 64200
// exit ;
64198: GO 64552
// for i in result do
64200: LD_ADDR_VAR 0 4
64204: PUSH
64205: LD_VAR 0 3
64209: PUSH
64210: FOR_IN
64211: IFFALSE 64550
// begin tag := GetTag ( i ) + 1 ;
64213: LD_ADDR_VAR 0 8
64217: PUSH
64218: LD_VAR 0 4
64222: PPUSH
64223: CALL_OW 110
64227: PUSH
64228: LD_INT 1
64230: PLUS
64231: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64232: LD_ADDR_VAR 0 6
64236: PUSH
64237: LD_VAR 0 4
64241: PPUSH
64242: CALL_OW 250
64246: PPUSH
64247: LD_VAR 0 4
64251: PPUSH
64252: CALL_OW 251
64256: PPUSH
64257: LD_INT 6
64259: PPUSH
64260: CALL 63876 0 3
64264: ST_TO_ADDR
// if cr then
64265: LD_VAR 0 6
64269: IFFALSE 64308
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64271: LD_VAR 0 4
64275: PPUSH
64276: LD_VAR 0 6
64280: PUSH
64281: LD_INT 1
64283: ARRAY
64284: PUSH
64285: LD_INT 1
64287: ARRAY
64288: PPUSH
64289: LD_VAR 0 6
64293: PUSH
64294: LD_INT 1
64296: ARRAY
64297: PUSH
64298: LD_INT 2
64300: ARRAY
64301: PPUSH
64302: CALL_OW 116
64306: GO 64548
// if path > tag then
64308: LD_VAR 0 2
64312: PUSH
64313: LD_VAR 0 8
64317: GREATER
64318: IFFALSE 64496
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
64320: LD_ADDR_VAR 0 5
64324: PUSH
64325: LD_INT 81
64327: PUSH
64328: LD_VAR 0 7
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 91
64339: PUSH
64340: LD_VAR 0 4
64344: PUSH
64345: LD_INT 12
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: LIST
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PPUSH
64357: CALL_OW 69
64361: ST_TO_ADDR
// if enemy then
64362: LD_VAR 0 5
64366: IFFALSE 64394
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64368: LD_VAR 0 4
64372: PPUSH
64373: LD_VAR 0 5
64377: PPUSH
64378: LD_VAR 0 4
64382: PPUSH
64383: CALL_OW 74
64387: PPUSH
64388: CALL_OW 115
64392: GO 64494
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64394: LD_VAR 0 4
64398: PPUSH
64399: LD_VAR 0 2
64403: PUSH
64404: LD_VAR 0 8
64408: ARRAY
64409: PUSH
64410: LD_INT 1
64412: ARRAY
64413: PPUSH
64414: LD_VAR 0 2
64418: PUSH
64419: LD_VAR 0 8
64423: ARRAY
64424: PUSH
64425: LD_INT 2
64427: ARRAY
64428: PPUSH
64429: CALL_OW 297
64433: PUSH
64434: LD_INT 6
64436: GREATER
64437: IFFALSE 64480
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64439: LD_VAR 0 4
64443: PPUSH
64444: LD_VAR 0 2
64448: PUSH
64449: LD_VAR 0 8
64453: ARRAY
64454: PUSH
64455: LD_INT 1
64457: ARRAY
64458: PPUSH
64459: LD_VAR 0 2
64463: PUSH
64464: LD_VAR 0 8
64468: ARRAY
64469: PUSH
64470: LD_INT 2
64472: ARRAY
64473: PPUSH
64474: CALL_OW 114
64478: GO 64494
// SetTag ( i , tag ) ;
64480: LD_VAR 0 4
64484: PPUSH
64485: LD_VAR 0 8
64489: PPUSH
64490: CALL_OW 109
// end else
64494: GO 64548
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64496: LD_ADDR_VAR 0 5
64500: PUSH
64501: LD_INT 81
64503: PUSH
64504: LD_VAR 0 7
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PPUSH
64513: CALL_OW 69
64517: ST_TO_ADDR
// if enemy then
64518: LD_VAR 0 5
64522: IFFALSE 64548
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64524: LD_VAR 0 4
64528: PPUSH
64529: LD_VAR 0 5
64533: PPUSH
64534: LD_VAR 0 4
64538: PPUSH
64539: CALL_OW 74
64543: PPUSH
64544: CALL_OW 115
// end ; end ;
64548: GO 64210
64550: POP
64551: POP
// end ; end_of_file
64552: LD_VAR 0 3
64556: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64557: LD_VAR 0 1
64561: PUSH
64562: LD_INT 200
64564: DOUBLE
64565: GREATEREQUAL
64566: IFFALSE 64574
64568: LD_INT 299
64570: DOUBLE
64571: LESSEQUAL
64572: IFTRUE 64576
64574: GO 64608
64576: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64577: LD_VAR 0 1
64581: PPUSH
64582: LD_VAR 0 2
64586: PPUSH
64587: LD_VAR 0 3
64591: PPUSH
64592: LD_VAR 0 4
64596: PPUSH
64597: LD_VAR 0 5
64601: PPUSH
64602: CALL 21119 0 5
64606: GO 64685
64608: LD_INT 300
64610: DOUBLE
64611: GREATEREQUAL
64612: IFFALSE 64620
64614: LD_INT 399
64616: DOUBLE
64617: LESSEQUAL
64618: IFTRUE 64622
64620: GO 64684
64622: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64623: LD_VAR 0 1
64627: PPUSH
64628: LD_VAR 0 2
64632: PPUSH
64633: LD_VAR 0 3
64637: PPUSH
64638: LD_VAR 0 4
64642: PPUSH
64643: LD_VAR 0 5
64647: PPUSH
64648: LD_VAR 0 6
64652: PPUSH
64653: LD_VAR 0 7
64657: PPUSH
64658: LD_VAR 0 8
64662: PPUSH
64663: LD_VAR 0 9
64667: PPUSH
64668: LD_VAR 0 10
64672: PPUSH
64673: LD_VAR 0 11
64677: PPUSH
64678: CALL 19017 0 11
64682: GO 64685
64684: POP
// end ;
64685: PPOPN 11
64687: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64688: LD_VAR 0 1
64692: PPUSH
64693: LD_VAR 0 2
64697: PPUSH
64698: LD_VAR 0 3
64702: PPUSH
64703: LD_VAR 0 4
64707: PPUSH
64708: LD_VAR 0 5
64712: PPUSH
64713: CALL 21111 0 5
// end ; end_of_file
64717: PPOPN 5
64719: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64720: LD_VAR 0 1
64724: PPUSH
64725: LD_VAR 0 2
64729: PPUSH
64730: LD_VAR 0 3
64734: PPUSH
64735: LD_VAR 0 4
64739: PPUSH
64740: LD_VAR 0 5
64744: PPUSH
64745: LD_VAR 0 6
64749: PPUSH
64750: CALL 7212 0 6
// end ;
64754: PPOPN 6
64756: END
