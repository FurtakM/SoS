// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 21 0 0
// PrepareLegion ;
   8: CALL 181 0 0
// PrepareAllies ;
  12: CALL 2172 0 0
// Action ;
  16: CALL 4314 0 0
// end ;
  20: END
// function InitGame ; begin
  21: LD_INT 0
  23: PPUSH
// RandomizeAll ;
  24: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// if not Difficulty then
  41: LD_OWVAR 67
  45: NOT
  46: IFFALSE 56
// Difficulty := 2 ;
  48: LD_ADDR_OWVAR 67
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// InitVariables ;
  56: CALL 69 0 0
// SetDiplomacy ;
  60: CALL 133 0 0
// end ; end_of_file
  64: LD_VAR 0 1
  68: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// points := 0 ;
  72: LD_ADDR_EXP 8
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// alert := false ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// game_over := false ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// wave_time := 0 0$00 ;
  96: LD_ADDR_EXP 9
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// bonus_active := false ;
 104: LD_ADDR_EXP 11
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ignore_wave := false ;
 112: LD_ADDR_EXP 13
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// bonus_num := 0 ;
 120: LD_ADDR_EXP 12
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// end ;
 128: LD_VAR 0 1
 132: RET
// export function SetDiplomacy ; begin
 133: LD_INT 0
 135: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 136: LD_INT 92
 138: PPUSH
 139: LD_INT 48
 141: PPUSH
 142: LD_INT 8
 144: PPUSH
 145: LD_INT 32796
 147: NEG
 148: PPUSH
 149: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 153: LD_INT 92
 155: PPUSH
 156: LD_INT 48
 158: PPUSH
 159: LD_INT 8
 161: PPUSH
 162: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 166: LD_INT 5
 168: PPUSH
 169: LD_INT 8
 171: PPUSH
 172: CALL_OW 343
// end ; end_of_file
 176: LD_VAR 0 1
 180: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 181: LD_INT 0
 183: PPUSH
 184: PPUSH
 185: PPUSH
 186: PPUSH
 187: PPUSH
 188: PPUSH
 189: PPUSH
 190: PPUSH
 191: PPUSH
 192: PPUSH
 193: PPUSH
 194: PPUSH
 195: PPUSH
 196: PPUSH
 197: PPUSH
 198: PPUSH
 199: PPUSH
 200: PPUSH
// uc_side := 2 ;
 201: LD_ADDR_OWVAR 20
 205: PUSH
 206: LD_INT 2
 208: ST_TO_ADDR
// uc_nation := nation_arabian ;
 209: LD_ADDR_OWVAR 21
 213: PUSH
 214: LD_INT 2
 216: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: LD_INT 6
 225: PPUSH
 226: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 230: LD_ADDR_OWVAR 26
 234: PUSH
 235: LD_STRING Nicolas Vervecken
 237: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 238: LD_ADDR_OWVAR 33
 242: PUSH
 243: LD_STRING SecondCharsGal
 245: ST_TO_ADDR
// hc_face_number := 3 ;
 246: LD_ADDR_OWVAR 34
 250: PUSH
 251: LD_INT 3
 253: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 254: LD_ADDR_OWVAR 29
 258: PUSH
 259: LD_INT 11
 261: PUSH
 262: LD_INT 10
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: ST_TO_ADDR
// Vervecken := CreateHuman ;
 269: LD_ADDR_EXP 10
 273: PUSH
 274: CALL_OW 44
 278: ST_TO_ADDR
// InitHc ;
 279: CALL_OW 19
// uc_side := 8 ;
 283: LD_ADDR_OWVAR 20
 287: PUSH
 288: LD_INT 8
 290: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 291: LD_INT 23
 293: PPUSH
 294: CALL_OW 274
 298: PPUSH
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 4000
 304: PUSH
 305: LD_INT 2500
 307: PUSH
 308: LD_INT 1250
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: LIST
 315: PUSH
 316: LD_OWVAR 67
 320: ARRAY
 321: PPUSH
 322: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 326: LD_INT 23
 328: PPUSH
 329: CALL_OW 274
 333: PPUSH
 334: LD_INT 2
 336: PPUSH
 337: LD_INT 300
 339: PPUSH
 340: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 344: LD_INT 23
 346: PPUSH
 347: CALL_OW 274
 351: PPUSH
 352: LD_INT 3
 354: PPUSH
 355: LD_INT 100
 357: PUSH
 358: LD_INT 50
 360: PUSH
 361: LD_INT 30
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: LIST
 368: PUSH
 369: LD_OWVAR 67
 373: ARRAY
 374: PPUSH
 375: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 379: LD_ADDR_VAR 0 14
 383: PUSH
 384: LD_INT 23
 386: PPUSH
 387: CALL_OW 250
 391: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 392: LD_ADDR_VAR 0 15
 396: PUSH
 397: LD_INT 23
 399: PPUSH
 400: CALL_OW 251
 404: ST_TO_ADDR
// team := [ ] ;
 405: LD_ADDR_VAR 0 7
 409: PUSH
 410: EMPTY
 411: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 412: LD_ADDR_VAR 0 8
 416: PUSH
 417: LD_INT 9
 419: PUSH
 420: LD_INT 8
 422: PUSH
 423: LD_INT 7
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: LIST
 430: PUSH
 431: LD_OWVAR 67
 435: ARRAY
 436: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 437: LD_ADDR_VAR 0 9
 441: PUSH
 442: LD_INT 11
 444: PUSH
 445: LD_INT 9
 447: PUSH
 448: LD_INT 8
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: PUSH
 456: LD_OWVAR 67
 460: ARRAY
 461: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 462: LD_ADDR_VAR 0 10
 466: PUSH
 467: LD_INT 3
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: LD_INT 2
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: PUSH
 481: LD_OWVAR 67
 485: ARRAY
 486: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 487: LD_ADDR_VAR 0 11
 491: PUSH
 492: LD_INT 5
 494: PUSH
 495: LD_INT 4
 497: PUSH
 498: LD_INT 3
 500: PUSH
 501: EMPTY
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 512: LD_ADDR_VAR 0 12
 516: PUSH
 517: LD_INT 3
 519: PUSH
 520: LD_INT 2
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: LIST
 530: PUSH
 531: LD_OWVAR 67
 535: ARRAY
 536: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 537: LD_ADDR_VAR 0 13
 541: PUSH
 542: LD_INT 6
 544: PUSH
 545: LD_INT 5
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: LIST
 555: PUSH
 556: LD_OWVAR 67
 560: ARRAY
 561: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 562: LD_ADDR_VAR 0 18
 566: PUSH
 567: LD_INT 13
 569: PUSH
 570: LD_INT 1
 572: PUSH
 573: LD_INT 1
 575: PUSH
 576: LD_INT 26
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 14
 587: PUSH
 588: LD_INT 3
 590: PUSH
 591: LD_INT 1
 593: PUSH
 594: LD_INT 25
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 14
 605: PUSH
 606: LD_INT 3
 608: PUSH
 609: LD_INT 5
 611: PUSH
 612: LD_INT 32
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 14
 623: PUSH
 624: LD_INT 3
 626: PUSH
 627: LD_INT 1
 629: PUSH
 630: LD_INT 31
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 14
 641: PUSH
 642: LD_INT 3
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: LD_INT 24
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: PUSH
 657: LD_INT 14
 659: PUSH
 660: LD_INT 3
 662: PUSH
 663: LD_INT 2
 665: PUSH
 666: LD_INT 25
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 13
 677: PUSH
 678: LD_INT 3
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: LD_INT 24
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 18
 716: PUSH
 717: LD_OWVAR 67
 721: MINUS
 722: PUSH
 723: LD_INT 1
 725: PLUS
 726: PUSH
 727: FOR_TO
 728: IFFALSE 857
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 730: LD_ADDR_OWVAR 37
 734: PUSH
 735: LD_VAR 0 18
 739: PUSH
 740: LD_VAR 0 2
 744: ARRAY
 745: PUSH
 746: LD_INT 1
 748: ARRAY
 749: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 750: LD_ADDR_OWVAR 39
 754: PUSH
 755: LD_VAR 0 18
 759: PUSH
 760: LD_VAR 0 2
 764: ARRAY
 765: PUSH
 766: LD_INT 2
 768: ARRAY
 769: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 770: LD_ADDR_OWVAR 38
 774: PUSH
 775: LD_VAR 0 18
 779: PUSH
 780: LD_VAR 0 2
 784: ARRAY
 785: PUSH
 786: LD_INT 3
 788: ARRAY
 789: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 790: LD_ADDR_OWVAR 40
 794: PUSH
 795: LD_VAR 0 18
 799: PUSH
 800: LD_VAR 0 2
 804: ARRAY
 805: PUSH
 806: LD_INT 4
 808: ARRAY
 809: ST_TO_ADDR
// un := CreateVehicle ;
 810: LD_ADDR_VAR 0 6
 814: PUSH
 815: CALL_OW 45
 819: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 820: LD_VAR 0 6
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: LD_INT 5
 830: PPUSH
 831: CALL_OW 12
 835: PPUSH
 836: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 840: LD_VAR 0 6
 844: PPUSH
 845: LD_INT 7
 847: PPUSH
 848: LD_INT 0
 850: PPUSH
 851: CALL_OW 49
// end ;
 855: GO 727
 857: POP
 858: POP
// for i = 1 to ape_num do
 859: LD_ADDR_VAR 0 2
 863: PUSH
 864: DOUBLE
 865: LD_INT 1
 867: DEC
 868: ST_TO_ADDR
 869: LD_VAR 0 13
 873: PUSH
 874: FOR_TO
 875: IFFALSE 942
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 877: LD_INT 0
 879: PPUSH
 880: LD_INT 16
 882: PUSH
 883: LD_INT 15
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 1
 892: PPUSH
 893: LD_INT 2
 895: PPUSH
 896: CALL_OW 12
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 8
 906: PPUSH
 907: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 911: LD_ADDR_VAR 0 7
 915: PUSH
 916: LD_VAR 0 7
 920: PPUSH
 921: LD_VAR 0 7
 925: PUSH
 926: LD_INT 1
 928: PLUS
 929: PPUSH
 930: CALL_OW 44
 934: PPUSH
 935: CALL_OW 2
 939: ST_TO_ADDR
// end ;
 940: GO 874
 942: POP
 943: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 1
 949: PPUSH
 950: LD_VAR 0 8
 954: PPUSH
 955: CALL_OW 380
// l1 := CreateHuman ;
 959: LD_ADDR_EXP 2
 963: PUSH
 964: CALL_OW 44
 968: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
 969: LD_EXP 2
 973: PPUSH
 974: LD_INT 23
 976: PPUSH
 977: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
 981: LD_INT 1
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_VAR 0 8
 991: PPUSH
 992: CALL_OW 380
// l2 := CreateHuman ;
 996: LD_ADDR_EXP 3
1000: PUSH
1001: CALL_OW 44
1005: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1006: LD_EXP 3
1010: PPUSH
1011: LD_INT 23
1013: PPUSH
1014: CALL_OW 52
// for class = 1 to 4 do
1018: LD_ADDR_VAR 0 4
1022: PUSH
1023: DOUBLE
1024: LD_INT 1
1026: DEC
1027: ST_TO_ADDR
1028: LD_INT 4
1030: PUSH
1031: FOR_TO
1032: IFFALSE 1131
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1034: LD_ADDR_VAR 0 2
1038: PUSH
1039: DOUBLE
1040: LD_INT 1
1042: DEC
1043: ST_TO_ADDR
1044: LD_VAR 0 9
1048: PUSH
1049: LD_VAR 0 10
1053: PUSH
1054: LD_VAR 0 11
1058: PUSH
1059: LD_VAR 0 12
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: PUSH
1070: LD_VAR 0 4
1074: ARRAY
1075: PUSH
1076: FOR_TO
1077: IFFALSE 1127
// begin PrepareHuman ( false , class , skill ) ;
1079: LD_INT 0
1081: PPUSH
1082: LD_VAR 0 4
1086: PPUSH
1087: LD_VAR 0 8
1091: PPUSH
1092: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1096: LD_ADDR_VAR 0 7
1100: PUSH
1101: LD_VAR 0 7
1105: PPUSH
1106: LD_VAR 0 7
1110: PUSH
1111: LD_INT 1
1113: PLUS
1114: PPUSH
1115: CALL_OW 44
1119: PPUSH
1120: CALL_OW 2
1124: ST_TO_ADDR
// end ;
1125: GO 1076
1127: POP
1128: POP
1129: GO 1031
1131: POP
1132: POP
// for i in team do
1133: LD_ADDR_VAR 0 2
1137: PUSH
1138: LD_VAR 0 7
1142: PUSH
1143: FOR_IN
1144: IFFALSE 1620
// begin b := 0 ;
1146: LD_ADDR_VAR 0 5
1150: PUSH
1151: LD_INT 0
1153: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1154: LD_VAR 0 2
1158: PPUSH
1159: CALL_OW 257
1163: PUSH
1164: LD_INT 1
1166: DOUBLE
1167: EQUAL
1168: IFTRUE 1172
1170: GO 1279
1172: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1173: LD_ADDR_VAR 0 5
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_OWVAR 20
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 2
1192: PUSH
1193: LD_INT 30
1195: PUSH
1196: LD_INT 32
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 30
1205: PUSH
1206: LD_INT 31
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: PUSH
1218: LD_INT 58
1220: PUSH
1221: EMPTY
1222: LIST
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: LIST
1228: PPUSH
1229: CALL_OW 69
1233: ST_TO_ADDR
// if not b then
1234: LD_VAR 0 5
1238: NOT
1239: IFFALSE 1277
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1241: LD_ADDR_VAR 0 5
1245: PUSH
1246: LD_INT 22
1248: PUSH
1249: LD_OWVAR 20
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 30
1260: PUSH
1261: LD_INT 5
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: PPUSH
1272: CALL_OW 69
1276: ST_TO_ADDR
// end ; class_engineer :
1277: GO 1518
1279: LD_INT 2
1281: DOUBLE
1282: EQUAL
1283: IFTRUE 1287
1285: GO 1326
1287: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1288: LD_ADDR_VAR 0 5
1292: PUSH
1293: LD_INT 22
1295: PUSH
1296: LD_OWVAR 20
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 30
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PPUSH
1319: CALL_OW 69
1323: ST_TO_ADDR
1324: GO 1518
1326: LD_INT 3
1328: DOUBLE
1329: EQUAL
1330: IFTRUE 1334
1332: GO 1423
1334: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1335: LD_ADDR_VAR 0 5
1339: PUSH
1340: LD_INT 22
1342: PUSH
1343: LD_OWVAR 20
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 21
1354: PUSH
1355: LD_INT 2
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 58
1364: PUSH
1365: EMPTY
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: LIST
1372: PPUSH
1373: CALL_OW 69
1377: ST_TO_ADDR
// if not b then
1378: LD_VAR 0 5
1382: NOT
1383: IFFALSE 1421
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1385: LD_ADDR_VAR 0 5
1389: PUSH
1390: LD_INT 22
1392: PUSH
1393: LD_OWVAR 20
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: LD_INT 30
1404: PUSH
1405: LD_INT 3
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PPUSH
1416: CALL_OW 69
1420: ST_TO_ADDR
// end ; class_scientistic :
1421: GO 1518
1423: LD_INT 4
1425: DOUBLE
1426: EQUAL
1427: IFTRUE 1431
1429: GO 1470
1431: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1432: LD_ADDR_VAR 0 5
1436: PUSH
1437: LD_INT 22
1439: PUSH
1440: LD_OWVAR 20
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 30
1451: PUSH
1452: LD_INT 8
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PPUSH
1463: CALL_OW 69
1467: ST_TO_ADDR
// end ; class_apeman_soldier :
1468: GO 1518
1470: LD_INT 15
1472: DOUBLE
1473: EQUAL
1474: IFTRUE 1478
1476: GO 1517
1478: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1479: LD_ADDR_VAR 0 5
1483: PUSH
1484: LD_INT 22
1486: PUSH
1487: LD_OWVAR 20
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 30
1498: PUSH
1499: LD_INT 5
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PPUSH
1510: CALL_OW 69
1514: ST_TO_ADDR
1515: GO 1518
1517: POP
// if b then
1518: LD_VAR 0 5
1522: IFFALSE 1593
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1524: LD_VAR 0 5
1528: PUSH
1529: LD_INT 1
1531: ARRAY
1532: PPUSH
1533: CALL_OW 266
1537: PUSH
1538: LD_INT 31
1540: EQUAL
1541: IFFALSE 1563
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1543: LD_VAR 0 2
1547: PPUSH
1548: LD_VAR 0 5
1552: PUSH
1553: LD_INT 1
1555: ARRAY
1556: PPUSH
1557: CALL 5028 0 2
1561: GO 1591
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1563: LD_VAR 0 2
1567: PPUSH
1568: LD_VAR 0 5
1572: PUSH
1573: LD_INT 1
1575: PPUSH
1576: LD_VAR 0 5
1580: PPUSH
1581: CALL_OW 12
1585: ARRAY
1586: PPUSH
1587: CALL_OW 52
1591: GO 1618
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1593: LD_VAR 0 2
1597: PPUSH
1598: LD_VAR 0 14
1602: PPUSH
1603: LD_VAR 0 15
1607: PPUSH
1608: LD_INT 15
1610: PPUSH
1611: LD_INT 0
1613: PPUSH
1614: CALL_OW 50
// end ;
1618: GO 1143
1620: POP
1621: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1622: LD_ADDR_VAR 0 16
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 3
1632: PUSH
1633: LD_INT 2
1635: PUSH
1636: LD_INT 1
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: PUSH
1644: LD_OWVAR 67
1648: ARRAY
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 25
1656: PUSH
1657: LD_INT 5
1659: PUSH
1660: LD_INT 4
1662: PUSH
1663: LD_INT 3
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_OWVAR 67
1675: ARRAY
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: PUSH
1681: LD_INT 24
1683: PUSH
1684: LD_INT 5
1686: PUSH
1687: LD_INT 5
1689: PUSH
1690: LD_INT 4
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_OWVAR 67
1702: ARRAY
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 30
1710: PUSH
1711: LD_INT 2
1713: PUSH
1714: LD_INT 1
1716: PUSH
1717: LD_INT 1
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: LIST
1724: PUSH
1725: LD_OWVAR 67
1729: ARRAY
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1741: LD_ADDR_VAR 0 2
1745: PUSH
1746: LD_INT 22
1748: PUSH
1749: LD_OWVAR 20
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 30
1760: PUSH
1761: LD_INT 32
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: PPUSH
1772: CALL_OW 69
1776: PUSH
1777: FOR_IN
1778: IFFALSE 1951
// begin if weapons then
1780: LD_VAR 0 16
1784: IFFALSE 1908
// begin k := rand ( 1 , weapons ) ;
1786: LD_ADDR_VAR 0 3
1790: PUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_VAR 0 16
1798: PPUSH
1799: CALL_OW 12
1803: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1804: LD_ADDR_VAR 0 17
1808: PUSH
1809: LD_VAR 0 16
1813: PUSH
1814: LD_VAR 0 3
1818: ARRAY
1819: PUSH
1820: LD_INT 1
1822: ARRAY
1823: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1824: LD_ADDR_VAR 0 16
1828: PUSH
1829: LD_VAR 0 16
1833: PPUSH
1834: LD_VAR 0 3
1838: PPUSH
1839: LD_INT 2
1841: PPUSH
1842: LD_VAR 0 16
1846: PUSH
1847: LD_VAR 0 3
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: ARRAY
1856: PUSH
1857: LD_INT 1
1859: MINUS
1860: PPUSH
1861: CALL 5120 0 4
1865: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1866: LD_VAR 0 16
1870: PUSH
1871: LD_VAR 0 3
1875: ARRAY
1876: PUSH
1877: LD_INT 2
1879: ARRAY
1880: PUSH
1881: LD_INT 0
1883: EQUAL
1884: IFFALSE 1906
// weapons := Delete ( weapons , k ) ;
1886: LD_ADDR_VAR 0 16
1890: PUSH
1891: LD_VAR 0 16
1895: PPUSH
1896: LD_VAR 0 3
1900: PPUSH
1901: CALL_OW 3
1905: ST_TO_ADDR
// end else
1906: GO 1935
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1908: LD_ADDR_VAR 0 17
1912: PUSH
1913: LD_INT 27
1915: PUSH
1916: LD_INT 23
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 1
1925: PPUSH
1926: LD_INT 2
1928: PPUSH
1929: CALL_OW 12
1933: ARRAY
1934: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1935: LD_VAR 0 2
1939: PPUSH
1940: LD_VAR 0 17
1944: PPUSH
1945: CALL_OW 431
// end ;
1949: GO 1777
1951: POP
1952: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
1953: LD_INT 1
1955: PPUSH
1956: LD_INT 1
1958: PPUSH
1959: LD_VAR 0 8
1963: PUSH
1964: LD_INT 1
1966: PLUS
1967: PPUSH
1968: CALL_OW 380
// hc_gallery := potter ;
1972: LD_ADDR_OWVAR 33
1976: PUSH
1977: LD_STRING potter
1979: ST_TO_ADDR
// hc_face_number := 1 ;
1980: LD_ADDR_OWVAR 34
1984: PUSH
1985: LD_INT 1
1987: ST_TO_ADDR
// hc_importance := 100 ;
1988: LD_ADDR_OWVAR 32
1992: PUSH
1993: LD_INT 100
1995: ST_TO_ADDR
// hc_name := Mike Gerste ;
1996: LD_ADDR_OWVAR 26
2000: PUSH
2001: LD_STRING Mike Gerste
2003: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2004: LD_ADDR_OWVAR 29
2008: PUSH
2009: LD_INT 10
2011: PUSH
2012: LD_INT 11
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: ST_TO_ADDR
// legion_commander := CreateHuman ;
2019: LD_ADDR_EXP 1
2023: PUSH
2024: CALL_OW 44
2028: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2029: LD_EXP 1
2033: PPUSH
2034: LD_INT 23
2036: PPUSH
2037: CALL_OW 52
// uc_side := 5 ;
2041: LD_ADDR_OWVAR 20
2045: PUSH
2046: LD_INT 5
2048: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2049: LD_INT 1
2051: PPUSH
2052: LD_INT 4
2054: PPUSH
2055: LD_VAR 0 8
2059: PPUSH
2060: CALL_OW 380
// hc_gallery := potter ;
2064: LD_ADDR_OWVAR 33
2068: PUSH
2069: LD_STRING potter
2071: ST_TO_ADDR
// hc_face_number := 2 ;
2072: LD_ADDR_OWVAR 34
2076: PUSH
2077: LD_INT 2
2079: ST_TO_ADDR
// hc_importance := 0 ;
2080: LD_ADDR_OWVAR 32
2084: PUSH
2085: LD_INT 0
2087: ST_TO_ADDR
// hc_name := George Potter ;
2088: LD_ADDR_OWVAR 26
2092: PUSH
2093: LD_STRING George Potter
2095: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2096: LD_ADDR_OWVAR 29
2100: PUSH
2101: LD_INT 12
2103: PUSH
2104: LD_INT 9
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: ST_TO_ADDR
// potter := CreateHuman ;
2111: LD_ADDR_EXP 4
2115: PUSH
2116: CALL_OW 44
2120: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2121: LD_EXP 4
2125: PPUSH
2126: LD_INT 4
2128: PPUSH
2129: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2133: LD_EXP 4
2137: PPUSH
2138: LD_INT 103
2140: PPUSH
2141: LD_INT 45
2143: PPUSH
2144: LD_INT 0
2146: PPUSH
2147: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2151: LD_EXP 4
2155: PPUSH
2156: LD_INT 23
2158: PPUSH
2159: CALL_OW 119
// InitHc ( ) ;
2163: CALL_OW 19
// end ; end_of_file
2167: LD_VAR 0 1
2171: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2172: LD_INT 0
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
2178: PPUSH
// uc_side := 5 ;
2179: LD_ADDR_OWVAR 20
2183: PUSH
2184: LD_INT 5
2186: ST_TO_ADDR
// uc_nation := nation_arabian ;
2187: LD_ADDR_OWVAR 21
2191: PUSH
2192: LD_INT 2
2194: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2195: LD_ADDR_VAR 0 4
2199: PUSH
2200: LD_INT 22
2202: PUSH
2203: LD_OWVAR 20
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: PUSH
2212: LD_INT 30
2214: PUSH
2215: LD_INT 5
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PPUSH
2226: CALL_OW 69
2230: ST_TO_ADDR
// for i = 1 to 3 do
2231: LD_ADDR_VAR 0 2
2235: PUSH
2236: DOUBLE
2237: LD_INT 1
2239: DEC
2240: ST_TO_ADDR
2241: LD_INT 3
2243: PUSH
2244: FOR_TO
2245: IFFALSE 2283
// begin PrepareHuman ( false , 2 , 6 ) ;
2247: LD_INT 0
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: LD_INT 6
2255: PPUSH
2256: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2260: CALL_OW 44
2264: PPUSH
2265: LD_INT 27
2267: PPUSH
2268: LD_INT 22
2270: PPUSH
2271: LD_INT 5
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: CALL_OW 50
// end ;
2281: GO 2244
2283: POP
2284: POP
// for i = 1 to 3 do
2285: LD_ADDR_VAR 0 2
2289: PUSH
2290: DOUBLE
2291: LD_INT 1
2293: DEC
2294: ST_TO_ADDR
2295: LD_INT 3
2297: PUSH
2298: FOR_TO
2299: IFFALSE 2334
// begin PrepareHuman ( false , 1 , 6 ) ;
2301: LD_INT 0
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 6
2309: PPUSH
2310: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2314: CALL_OW 44
2318: PPUSH
2319: LD_VAR 0 4
2323: PUSH
2324: LD_INT 1
2326: ARRAY
2327: PPUSH
2328: CALL_OW 52
// end ;
2332: GO 2298
2334: POP
2335: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2336: LD_ADDR_VAR 0 2
2340: PUSH
2341: LD_INT 22
2343: PUSH
2344: LD_OWVAR 20
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 2
2355: PUSH
2356: LD_INT 30
2358: PUSH
2359: LD_INT 31
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PUSH
2366: LD_INT 30
2368: PUSH
2369: LD_INT 32
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PPUSH
2385: CALL_OW 69
2389: PUSH
2390: FOR_IN
2391: IFFALSE 2478
// begin PrepareHuman ( false , 1 , 6 ) ;
2393: LD_INT 0
2395: PPUSH
2396: LD_INT 1
2398: PPUSH
2399: LD_INT 6
2401: PPUSH
2402: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2406: CALL_OW 44
2410: PPUSH
2411: LD_VAR 0 2
2415: PPUSH
2416: CALL 5028 0 2
// if GetBType ( i ) = b_bunker then
2420: LD_VAR 0 2
2424: PPUSH
2425: CALL_OW 266
2429: PUSH
2430: LD_INT 32
2432: EQUAL
2433: IFFALSE 2476
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2435: LD_VAR 0 2
2439: PPUSH
2440: LD_INT 27
2442: PUSH
2443: LD_INT 25
2445: PUSH
2446: LD_INT 24
2448: PUSH
2449: LD_INT 28
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: LD_INT 4
2465: MOD
2466: PUSH
2467: LD_INT 1
2469: PLUS
2470: ARRAY
2471: PPUSH
2472: CALL_OW 431
// end ;
2476: GO 2390
2478: POP
2479: POP
// for i = 1 to 3 do
2480: LD_ADDR_VAR 0 2
2484: PUSH
2485: DOUBLE
2486: LD_INT 1
2488: DEC
2489: ST_TO_ADDR
2490: LD_INT 3
2492: PUSH
2493: FOR_TO
2494: IFFALSE 2611
// begin vc_chassis := ar_half_tracked ;
2496: LD_ADDR_OWVAR 37
2500: PUSH
2501: LD_INT 14
2503: ST_TO_ADDR
// vc_engine := engine_solar ;
2504: LD_ADDR_OWVAR 39
2508: PUSH
2509: LD_INT 2
2511: ST_TO_ADDR
// vc_control := control_manual ;
2512: LD_ADDR_OWVAR 38
2516: PUSH
2517: LD_INT 1
2519: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2520: LD_ADDR_OWVAR 40
2524: PUSH
2525: LD_INT 25
2527: PUSH
2528: LD_INT 27
2530: PUSH
2531: LD_INT 26
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: LIST
2538: PUSH
2539: LD_VAR 0 2
2543: ARRAY
2544: ST_TO_ADDR
// un := CreateVehicle ;
2545: LD_ADDR_VAR 0 3
2549: PUSH
2550: CALL_OW 45
2554: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2555: LD_VAR 0 3
2559: PPUSH
2560: LD_INT 5
2562: PPUSH
2563: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2567: LD_VAR 0 3
2571: PPUSH
2572: LD_INT 8
2574: PPUSH
2575: LD_INT 0
2577: PPUSH
2578: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2582: LD_INT 0
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_INT 7
2590: PPUSH
2591: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2595: CALL_OW 44
2599: PPUSH
2600: LD_VAR 0 3
2604: PPUSH
2605: CALL_OW 52
// end ;
2609: GO 2493
2611: POP
2612: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2613: LD_INT 1
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 6
2621: PPUSH
2622: CALL_OW 380
// al_commander := CreateHuman ;
2626: LD_ADDR_EXP 5
2630: PUSH
2631: CALL_OW 44
2635: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2636: LD_EXP 5
2640: PPUSH
2641: LD_INT 22
2643: PUSH
2644: LD_OWVAR 20
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 30
2655: PUSH
2656: LD_INT 0
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PPUSH
2667: CALL_OW 69
2671: PUSH
2672: LD_INT 1
2674: ARRAY
2675: PPUSH
2676: CALL_OW 52
// InitHc ( ) ;
2680: CALL_OW 19
// end ;
2684: LD_VAR 0 1
2688: RET
// export function ChangeSide ( ) ; var i ; begin
2689: LD_INT 0
2691: PPUSH
2692: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_INT 22
2700: PUSH
2701: LD_INT 5
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 69
2712: PUSH
2713: FOR_IN
2714: IFFALSE 2730
// SetSide ( i , 8 ) ;
2716: LD_VAR 0 2
2720: PPUSH
2721: LD_INT 8
2723: PPUSH
2724: CALL_OW 235
2728: GO 2713
2730: POP
2731: POP
// end ;
2732: LD_VAR 0 1
2736: RET
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2737: LD_INT 22
2739: PUSH
2740: LD_INT 5
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PPUSH
2747: CALL_OW 69
2751: IFFALSE 3265
2753: GO 2755
2755: DISABLE
2756: LD_INT 0
2758: PPUSH
2759: PPUSH
2760: PPUSH
2761: PPUSH
2762: PPUSH
2763: PPUSH
// begin enable ;
2764: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2765: LD_ADDR_VAR 0 2
2769: PUSH
2770: LD_INT 22
2772: PUSH
2773: LD_INT 5
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: LD_INT 2
2782: PUSH
2783: LD_INT 21
2785: PUSH
2786: LD_INT 1
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 21
2795: PUSH
2796: LD_INT 2
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: PPUSH
2812: CALL_OW 69
2816: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2817: LD_ADDR_VAR 0 5
2821: PUSH
2822: LD_INT 22
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: LD_INT 30
2834: PUSH
2835: LD_INT 32
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 3
2844: PUSH
2845: LD_INT 24
2847: PUSH
2848: LD_INT 1000
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: PUSH
2859: EMPTY
2860: LIST
2861: LIST
2862: LIST
2863: PPUSH
2864: CALL_OW 69
2868: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2869: LD_ADDR_VAR 0 6
2873: PUSH
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_INT 3
2881: PUSH
2882: LD_INT 54
2884: PUSH
2885: EMPTY
2886: LIST
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: PUSH
2892: LD_INT 25
2894: PUSH
2895: LD_INT 3
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PPUSH
2906: CALL_OW 72
2910: ST_TO_ADDR
// if not list then
2911: LD_VAR 0 2
2915: NOT
2916: IFFALSE 2920
// exit ;
2918: GO 3265
// for i in list do
2920: LD_ADDR_VAR 0 1
2924: PUSH
2925: LD_VAR 0 2
2929: PUSH
2930: FOR_IN
2931: IFFALSE 3263
// begin if b then
2933: LD_VAR 0 5
2937: IFFALSE 3016
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2939: LD_ADDR_VAR 0 4
2943: PUSH
2944: LD_VAR 0 2
2948: PPUSH
2949: LD_INT 25
2951: PUSH
2952: LD_INT 2
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 72
2963: PUSH
2964: FOR_IN
2965: IFFALSE 3014
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
2967: LD_VAR 0 4
2971: PPUSH
2972: CALL_OW 314
2976: NOT
2977: PUSH
2978: LD_VAR 0 1
2982: PPUSH
2983: CALL_OW 110
2987: PUSH
2988: LD_INT 7
2990: NONEQUAL
2991: AND
2992: IFFALSE 3012
// ComRepairBuilding ( j , b [ 1 ] ) ;
2994: LD_VAR 0 4
2998: PPUSH
2999: LD_VAR 0 5
3003: PUSH
3004: LD_INT 1
3006: ARRAY
3007: PPUSH
3008: CALL_OW 130
3012: GO 2964
3014: POP
3015: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3016: LD_VAR 0 1
3020: PPUSH
3021: CALL_OW 256
3025: PUSH
3026: LD_INT 500
3028: LESS
3029: PUSH
3030: LD_VAR 0 1
3034: PPUSH
3035: CALL_OW 110
3039: PUSH
3040: LD_INT 7
3042: EQUAL
3043: NOT
3044: AND
3045: IFFALSE 3095
// begin ComMoveToArea ( i , guard_hill ) ;
3047: LD_VAR 0 1
3051: PPUSH
3052: LD_INT 11
3054: PPUSH
3055: CALL_OW 113
// SetTag ( i , 7 ) ;
3059: LD_VAR 0 1
3063: PPUSH
3064: LD_INT 7
3066: PPUSH
3067: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3071: LD_VAR 0 1
3075: PPUSH
3076: CALL_OW 247
3080: PUSH
3081: LD_INT 2
3083: EQUAL
3084: IFFALSE 3095
// begin AddComExitVehicle ( i ) ;
3086: LD_VAR 0 1
3090: PPUSH
3091: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3095: LD_VAR 0 1
3099: PPUSH
3100: CALL_OW 256
3104: PUSH
3105: LD_INT 1000
3107: EQUAL
3108: PUSH
3109: LD_VAR 0 1
3113: PPUSH
3114: CALL_OW 110
3118: PUSH
3119: LD_INT 7
3121: EQUAL
3122: AND
3123: PUSH
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 310
3133: NOT
3134: AND
3135: PUSH
3136: LD_VAR 0 6
3140: AND
3141: IFFALSE 3169
// begin SetTag ( i , 0 ) ;
3143: LD_VAR 0 1
3147: PPUSH
3148: LD_INT 0
3150: PPUSH
3151: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3155: LD_VAR 0 6
3159: PPUSH
3160: LD_VAR 0 1
3164: PPUSH
3165: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3169: LD_VAR 0 1
3173: PPUSH
3174: CALL_OW 247
3178: PUSH
3179: LD_INT 2
3181: EQUAL
3182: PUSH
3183: LD_VAR 0 1
3187: PPUSH
3188: CALL_OW 110
3192: PUSH
3193: LD_INT 7
3195: NONEQUAL
3196: AND
3197: PUSH
3198: LD_VAR 0 1
3202: PPUSH
3203: CALL_OW 314
3207: NOT
3208: AND
3209: IFFALSE 3261
// if FilterAllUnits ( [ f_side , 7 ] ) then
3211: LD_INT 22
3213: PUSH
3214: LD_INT 7
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PPUSH
3221: CALL_OW 69
3225: IFFALSE 3261
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3227: LD_VAR 0 1
3231: PPUSH
3232: LD_INT 22
3234: PUSH
3235: LD_INT 7
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: PPUSH
3242: CALL_OW 69
3246: PPUSH
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 74
3256: PPUSH
3257: CALL_OW 115
// end ;
3261: GO 2930
3263: POP
3264: POP
// end ; end_of_file
3265: PPOPN 6
3267: END
// export function Game ; var i , val , areas , wave ; begin
3268: LD_INT 0
3270: PPUSH
3271: PPUSH
3272: PPUSH
3273: PPUSH
3274: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3275: LD_ADDR_VAR 0 4
3279: PUSH
3280: LD_INT 1
3282: PUSH
3283: LD_INT 2
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: LD_INT 4
3291: PUSH
3292: LD_INT 5
3294: PUSH
3295: LD_INT 6
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: ST_TO_ADDR
// val := [ 10 , 20 , 30 ] [ Difficulty ] ;
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: LD_INT 10
3313: PUSH
3314: LD_INT 20
3316: PUSH
3317: LD_INT 30
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: PUSH
3325: LD_OWVAR 67
3329: ARRAY
3330: ST_TO_ADDR
// wave := 1 ;
3331: LD_ADDR_VAR 0 5
3335: PUSH
3336: LD_INT 1
3338: ST_TO_ADDR
// while ( game_over = false ) do
3339: LD_EXP 7
3343: PUSH
3344: LD_INT 0
3346: EQUAL
3347: IFFALSE 3511
// begin repeat begin Wait ( 0 0$01 ) ;
3349: LD_INT 35
3351: PPUSH
3352: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3356: LD_ADDR_EXP 9
3360: PUSH
3361: LD_EXP 9
3365: PUSH
3366: LD_INT 35
3368: PLUS
3369: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3370: LD_INT 22
3372: PUSH
3373: LD_INT 7
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PPUSH
3380: CALL_OW 69
3384: PUSH
3385: LD_INT 10
3387: LESS
3388: PUSH
3389: LD_EXP 9
3393: PUSH
3394: LD_INT 21000
3396: GREATEREQUAL
3397: OR
3398: IFFALSE 3349
// wave_time := 0 0$00 ;
3400: LD_ADDR_EXP 9
3404: PUSH
3405: LD_INT 0
3407: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3408: LD_INT 5250
3410: PPUSH
3411: CALL_OW 67
// if not ignore_wave then
3415: LD_EXP 13
3419: NOT
3420: IFFALSE 3501
// begin for i = 1 to wave do
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: DOUBLE
3428: LD_INT 1
3430: DEC
3431: ST_TO_ADDR
3432: LD_VAR 0 5
3436: PUSH
3437: FOR_TO
3438: IFFALSE 3483
// begin SpawnPotter ( val * i , areas [ i mod 6 + 1 ] ) ;
3440: LD_VAR 0 3
3444: PUSH
3445: LD_VAR 0 2
3449: MUL
3450: PPUSH
3451: LD_VAR 0 4
3455: PUSH
3456: LD_VAR 0 2
3460: PUSH
3461: LD_INT 6
3463: MOD
3464: PUSH
3465: LD_INT 1
3467: PLUS
3468: ARRAY
3469: PPUSH
3470: CALL 3516 0 2
// Wait ( 0 0$10 ) ;
3474: LD_INT 350
3476: PPUSH
3477: CALL_OW 67
// end ;
3481: GO 3437
3483: POP
3484: POP
// wave := wave + 1 ;
3485: LD_ADDR_VAR 0 5
3489: PUSH
3490: LD_VAR 0 5
3494: PUSH
3495: LD_INT 1
3497: PLUS
3498: ST_TO_ADDR
// end else
3499: GO 3509
// ignore_wave := false ;
3501: LD_ADDR_EXP 13
3505: PUSH
3506: LD_INT 0
3508: ST_TO_ADDR
// end ;
3509: GO 3339
// end ;
3511: LD_VAR 0 1
3515: RET
// export function SpawnPotter ( val , area ) ; var i , un , class ; begin
3516: LD_INT 0
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
// uc_side := 7 ;
3522: LD_ADDR_OWVAR 20
3526: PUSH
3527: LD_INT 7
3529: ST_TO_ADDR
// uc_nation := 2 ;
3530: LD_ADDR_OWVAR 21
3534: PUSH
3535: LD_INT 2
3537: ST_TO_ADDR
// InitHc ( ) ;
3538: CALL_OW 19
// hc_gallery :=  ;
3542: LD_ADDR_OWVAR 33
3546: PUSH
3547: LD_STRING 
3549: ST_TO_ADDR
// hc_importance := 0 ;
3550: LD_ADDR_OWVAR 32
3554: PUSH
3555: LD_INT 0
3557: ST_TO_ADDR
// hc_name :=  ;
3558: LD_ADDR_OWVAR 26
3562: PUSH
3563: LD_STRING 
3565: ST_TO_ADDR
// hc_attr := [ 10 + ( tick div 10 10$00 ) , 10 + ( tick div 10 10$00 ) ] ;
3566: LD_ADDR_OWVAR 29
3570: PUSH
3571: LD_INT 10
3573: PUSH
3574: LD_OWVAR 1
3578: PUSH
3579: LD_INT 21000
3581: DIV
3582: PLUS
3583: PUSH
3584: LD_INT 10
3586: PUSH
3587: LD_OWVAR 1
3591: PUSH
3592: LD_INT 21000
3594: DIV
3595: PLUS
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: ST_TO_ADDR
// for i = 1 to val do
3601: LD_ADDR_VAR 0 4
3605: PUSH
3606: DOUBLE
3607: LD_INT 1
3609: DEC
3610: ST_TO_ADDR
3611: LD_VAR 0 1
3615: PUSH
3616: FOR_TO
3617: IFFALSE 3824
// begin if i mod 9 = 0 then
3619: LD_VAR 0 4
3623: PUSH
3624: LD_INT 9
3626: MOD
3627: PUSH
3628: LD_INT 0
3630: EQUAL
3631: IFFALSE 3643
// class := class_apeman_kamikaze else
3633: LD_ADDR_VAR 0 6
3637: PUSH
3638: LD_INT 17
3640: ST_TO_ADDR
3641: GO 3675
// if i mod 4 = 0 then
3643: LD_VAR 0 4
3647: PUSH
3648: LD_INT 4
3650: MOD
3651: PUSH
3652: LD_INT 0
3654: EQUAL
3655: IFFALSE 3667
// class := class_apeman_soldier else
3657: LD_ADDR_VAR 0 6
3661: PUSH
3662: LD_INT 15
3664: ST_TO_ADDR
3665: GO 3675
// class := class_apeman ;
3667: LD_ADDR_VAR 0 6
3671: PUSH
3672: LD_INT 12
3674: ST_TO_ADDR
// if i mod 33 = 0 then
3675: LD_VAR 0 4
3679: PUSH
3680: LD_INT 33
3682: MOD
3683: PUSH
3684: LD_INT 0
3686: EQUAL
3687: IFFALSE 3756
// begin vc_chassis := ar_half_tracked ;
3689: LD_ADDR_OWVAR 37
3693: PUSH
3694: LD_INT 14
3696: ST_TO_ADDR
// vc_control := control_apeman ;
3697: LD_ADDR_OWVAR 38
3701: PUSH
3702: LD_INT 5
3704: ST_TO_ADDR
// vc_engine := engine_combustion ;
3705: LD_ADDR_OWVAR 39
3709: PUSH
3710: LD_INT 1
3712: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] [ rand ( 1 , 2 ) ] ;
3713: LD_ADDR_OWVAR 40
3717: PUSH
3718: LD_INT 28
3720: PUSH
3721: LD_INT 27
3723: PUSH
3724: LD_INT 29
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: PUSH
3732: LD_INT 1
3734: PPUSH
3735: LD_INT 2
3737: PPUSH
3738: CALL_OW 12
3742: ARRAY
3743: ST_TO_ADDR
// un := CreateVehicle ;
3744: LD_ADDR_VAR 0 5
3748: PUSH
3749: CALL_OW 45
3753: ST_TO_ADDR
// end else
3754: GO 3781
// begin PrepareHuman ( sex_male , class , 10 ) ;
3756: LD_INT 1
3758: PPUSH
3759: LD_VAR 0 6
3763: PPUSH
3764: LD_INT 10
3766: PPUSH
3767: CALL_OW 380
// un := CreateHuman ;
3771: LD_ADDR_VAR 0 5
3775: PUSH
3776: CALL_OW 44
3780: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3781: LD_VAR 0 5
3785: PPUSH
3786: LD_VAR 0 2
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3798: LD_VAR 0 5
3802: PPUSH
3803: CALL_OW 250
3807: PPUSH
3808: LD_VAR 0 5
3812: PPUSH
3813: CALL_OW 251
3817: PPUSH
3818: CALL_OW 494
// end ;
3822: GO 3616
3824: POP
3825: POP
// end ;
3826: LD_VAR 0 3
3830: RET
// every 0 0$0.3 trigger alert and not game_over do var i , list , enemy ;
3831: LD_EXP 6
3835: PUSH
3836: LD_EXP 7
3840: NOT
3841: AND
3842: IFFALSE 4128
3844: GO 3846
3846: DISABLE
3847: LD_INT 0
3849: PPUSH
3850: PPUSH
3851: PPUSH
// begin enable ;
3852: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 22
3860: PUSH
3861: LD_INT 7
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// if not list then
3873: LD_VAR 0 2
3877: NOT
3878: IFFALSE 3882
// exit ;
3880: GO 4128
// for i in list do
3882: LD_ADDR_VAR 0 1
3886: PUSH
3887: LD_VAR 0 2
3891: PUSH
3892: FOR_IN
3893: IFFALSE 4126
// begin enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 15 ] ] ) ;
3895: LD_ADDR_VAR 0 3
3899: PUSH
3900: LD_INT 81
3902: PUSH
3903: LD_INT 7
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 92
3912: PUSH
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 250
3922: PUSH
3923: LD_VAR 0 1
3927: PPUSH
3928: CALL_OW 251
3932: PUSH
3933: LD_INT 15
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: PPUSH
3946: CALL_OW 69
3950: ST_TO_ADDR
// if not enemy then
3951: LD_VAR 0 3
3955: NOT
3956: IFFALSE 4014
// enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 30 ] ] ) ;
3958: LD_ADDR_VAR 0 3
3962: PUSH
3963: LD_INT 81
3965: PUSH
3966: LD_INT 7
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: LD_INT 92
3975: PUSH
3976: LD_VAR 0 1
3980: PPUSH
3981: CALL_OW 250
3985: PUSH
3986: LD_VAR 0 1
3990: PPUSH
3991: CALL_OW 251
3995: PUSH
3996: LD_INT 30
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PPUSH
4009: CALL_OW 69
4013: ST_TO_ADDR
// if not enemy then
4014: LD_VAR 0 3
4018: NOT
4019: IFFALSE 4077
// enemy := FilterAllUnits ( [ [ f_enemy , 7 ] , [ f_distxy , GetX ( i ) , GetY ( i ) , 50 ] ] ) ;
4021: LD_ADDR_VAR 0 3
4025: PUSH
4026: LD_INT 81
4028: PUSH
4029: LD_INT 7
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 92
4038: PUSH
4039: LD_VAR 0 1
4043: PPUSH
4044: CALL_OW 250
4048: PUSH
4049: LD_VAR 0 1
4053: PPUSH
4054: CALL_OW 251
4058: PUSH
4059: LD_INT 50
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 69
4076: ST_TO_ADDR
// if not enemy then
4077: LD_VAR 0 3
4081: NOT
4082: IFFALSE 4104
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
4084: LD_ADDR_VAR 0 3
4088: PUSH
4089: LD_INT 81
4091: PUSH
4092: LD_INT 7
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PPUSH
4099: CALL_OW 69
4103: ST_TO_ADDR
// if enemy then
4104: LD_VAR 0 3
4108: IFFALSE 4124
// Attack ( i , enemy ) ;
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_VAR 0 3
4119: PPUSH
4120: CALL 4131 0 2
// end ;
4124: GO 3892
4126: POP
4127: POP
// end ;
4128: PPOPN 3
4130: END
// function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
4131: LD_INT 0
4133: PPUSH
4134: PPUSH
4135: PPUSH
// if not unit then
4136: LD_VAR 0 1
4140: NOT
4141: IFFALSE 4145
// exit ;
4143: GO 4309
// targets_list := [ ] ;
4145: LD_ADDR_VAR 0 5
4149: PUSH
4150: EMPTY
4151: ST_TO_ADDR
// targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
4152: LD_ADDR_VAR 0 5
4156: PUSH
4157: LD_VAR 0 2
4161: PPUSH
4162: LD_INT 21
4164: PUSH
4165: LD_INT 1
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 3
4174: PUSH
4175: LD_INT 54
4177: PUSH
4178: EMPTY
4179: LIST
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PPUSH
4189: CALL_OW 72
4193: PUSH
4194: LD_VAR 0 2
4198: PPUSH
4199: LD_INT 21
4201: PUSH
4202: LD_INT 2
4204: PUSH
4205: EMPTY
4206: LIST
4207: LIST
4208: PPUSH
4209: CALL_OW 72
4213: PUSH
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_INT 21
4221: PUSH
4222: LD_INT 3
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: LD_INT 3
4231: PUSH
4232: LD_INT 58
4234: PUSH
4235: EMPTY
4236: LIST
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PPUSH
4246: CALL_OW 72
4250: PUSH
4251: LD_VAR 0 2
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: ST_TO_ADDR
// for target in targets_list do
4262: LD_ADDR_VAR 0 4
4266: PUSH
4267: LD_VAR 0 5
4271: PUSH
4272: FOR_IN
4273: IFFALSE 4307
// begin if target then
4275: LD_VAR 0 4
4279: IFFALSE 4305
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
4281: LD_VAR 0 1
4285: PPUSH
4286: LD_VAR 0 4
4290: PPUSH
4291: LD_VAR 0 1
4295: PPUSH
4296: CALL_OW 74
4300: PPUSH
4301: CALL_OW 115
// end ;
4305: GO 4272
4307: POP
4308: POP
// end ; end_of_file
4309: LD_VAR 0 3
4313: RET
// export function Action ; begin
4314: LD_INT 0
4316: PPUSH
// InGameOn ;
4317: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4321: LD_INT 23
4323: PPUSH
4324: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4328: LD_EXP 1
4332: PPUSH
4333: LD_STRING DL-1
4335: PPUSH
4336: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4340: LD_EXP 2
4344: PPUSH
4345: LD_STRING DA-1
4347: PPUSH
4348: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4352: LD_EXP 3
4356: PPUSH
4357: LD_STRING DA-2
4359: PPUSH
4360: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4364: LD_EXP 1
4368: PPUSH
4369: LD_STRING DL-2
4371: PPUSH
4372: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4376: LD_EXP 3
4380: PPUSH
4381: LD_STRING DA-3
4383: PPUSH
4384: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4388: LD_EXP 1
4392: PPUSH
4393: LD_STRING DL-3
4395: PPUSH
4396: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4400: LD_EXP 2
4404: PPUSH
4405: LD_STRING DA-4
4407: PPUSH
4408: CALL_OW 88
// if not dialogue_skipped then
4412: LD_OWVAR 59
4416: NOT
4417: IFFALSE 4502
// begin Wait ( 0 0$01 ) ;
4419: LD_INT 35
4421: PPUSH
4422: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4426: LD_EXP 2
4430: PUSH
4431: LD_EXP 3
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PPUSH
4440: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4444: LD_EXP 2
4448: PPUSH
4449: LD_INT 107
4451: PPUSH
4452: LD_INT 53
4454: PPUSH
4455: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4459: LD_EXP 3
4463: PPUSH
4464: LD_INT 108
4466: PPUSH
4467: LD_INT 53
4469: PPUSH
4470: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4474: LD_EXP 2
4478: PPUSH
4479: LD_EXP 4
4483: PPUSH
4484: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4488: LD_EXP 3
4492: PPUSH
4493: LD_EXP 4
4497: PPUSH
4498: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4502: LD_INT 35
4504: PPUSH
4505: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4509: LD_EXP 2
4513: PPUSH
4514: LD_INT 107
4516: PPUSH
4517: LD_INT 53
4519: PPUSH
4520: CALL_OW 307
4524: PUSH
4525: LD_OWVAR 59
4529: OR
4530: IFFALSE 4502
// if not dialogue_skipped then
4532: LD_OWVAR 59
4536: NOT
4537: IFFALSE 4638
// begin ComTurnUnit ( potter , l1 ) ;
4539: LD_EXP 4
4543: PPUSH
4544: LD_EXP 2
4548: PPUSH
4549: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4553: LD_INT 10
4555: PPUSH
4556: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4560: LD_EXP 4
4564: PPUSH
4565: LD_INT 108
4567: PPUSH
4568: LD_INT 1
4570: PPUSH
4571: LD_INT 0
4573: PPUSH
4574: LD_INT 0
4576: PPUSH
4577: CALL_OW 483
// Wait ( 0 0$01 ) ;
4581: LD_INT 35
4583: PPUSH
4584: CALL_OW 67
// RemoveUnit ( potter ) ;
4588: LD_EXP 4
4592: PPUSH
4593: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4597: LD_EXP 2
4601: PPUSH
4602: LD_STRING DA-5
4604: PPUSH
4605: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4609: LD_EXP 3
4613: PPUSH
4614: LD_STRING DA-6
4616: PPUSH
4617: CALL_OW 88
// Wait ( 0 0$02 ) ;
4621: LD_INT 70
4623: PPUSH
4624: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4628: LD_INT 25
4630: PPUSH
4631: LD_INT 19
4633: PPUSH
4634: CALL_OW 84
// end ; SpawnPotter ( 30 , north_west_1 ) ;
4638: LD_INT 30
4640: PPUSH
4641: LD_INT 1
4643: PPUSH
4644: CALL 3516 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4648: LD_EXP 5
4652: PPUSH
4653: LD_STRING DLa-1
4655: PPUSH
4656: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4660: LD_EXP 1
4664: PPUSH
4665: LD_STRING DL-5
4667: PPUSH
4668: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4672: LD_INT 23
4674: PPUSH
4675: CALL_OW 87
// InGameOff ;
4679: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4683: LD_STRING C1
4685: PPUSH
4686: CALL_OW 337
// alert := true ;
4690: LD_ADDR_EXP 6
4694: PUSH
4695: LD_INT 1
4697: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4698: LD_EXP 5
4702: PPUSH
4703: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4707: LD_EXP 5
4711: PPUSH
4712: LD_INT 11
4714: PPUSH
4715: CALL_OW 173
// Wait ( 0 0$30 ) ;
4719: LD_INT 1050
4721: PPUSH
4722: CALL_OW 67
// SpawnPotter ( 20 , north_4 ) ;
4726: LD_INT 20
4728: PPUSH
4729: LD_INT 4
4731: PPUSH
4732: CALL 3516 0 2
// Wait ( 0 0$35 ) ;
4736: LD_INT 1225
4738: PPUSH
4739: CALL_OW 67
// SpawnPotter ( 20 , east_5 ) ;
4743: LD_INT 20
4745: PPUSH
4746: LD_INT 5
4748: PPUSH
4749: CALL 3516 0 2
// Wait ( 0 0$03 ) ;
4753: LD_INT 105
4755: PPUSH
4756: CALL_OW 67
// Game ;
4760: CALL 3268 0 0
// end ;
4764: LD_VAR 0 1
4768: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 500 do var tmp , i ;
4769: LD_INT 22
4771: PUSH
4772: LD_INT 7
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PPUSH
4779: CALL_OW 69
4783: PUSH
4784: LD_INT 0
4786: EQUAL
4787: PUSH
4788: LD_EXP 8
4792: PUSH
4793: LD_INT 500
4795: GREATEREQUAL
4796: AND
4797: IFFALSE 5025
4799: GO 4801
4801: DISABLE
4802: LD_INT 0
4804: PPUSH
4805: PPUSH
// begin DialogueOn ;
4806: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4810: LD_EXP 10
4814: PPUSH
4815: LD_STRING DVr-1
4817: PPUSH
4818: CALL_OW 94
// DialogueOff ;
4822: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4826: LD_STRING QBonusInfo
4828: PPUSH
4829: CALL_OW 97
4833: PUSH
4834: LD_INT 1
4836: DOUBLE
4837: EQUAL
4838: IFTRUE 4842
4840: GO 4853
4842: POP
// bonus_active := true ; end ;
4843: LD_ADDR_EXP 11
4847: PUSH
4848: LD_INT 1
4850: ST_TO_ADDR
4851: GO 4854
4853: POP
// bonus_num := 4 ;
4854: LD_ADDR_EXP 12
4858: PUSH
4859: LD_INT 4
4861: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_mid , art_instant , main_base ) ;
4862: LD_OWVAR 2
4866: PPUSH
4867: LD_INT 2
4869: PPUSH
4870: LD_INT 2
4872: PPUSH
4873: LD_INT 23
4875: PPUSH
4876: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4880: LD_ADDR_VAR 0 1
4884: PUSH
4885: LD_INT 500
4887: PUSH
4888: LD_INT 3500
4890: PUSH
4891: LD_INT 5750
4893: PUSH
4894: LD_INT 10000
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4903: LD_INT 10500
4905: PUSH
4906: LD_INT 12600
4908: PUSH
4909: LD_INT 14700
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: PUSH
4917: LD_OWVAR 67
4921: ARRAY
4922: PPUSH
4923: CALL_OW 67
// for i = 1 to tmp do
4927: LD_ADDR_VAR 0 2
4931: PUSH
4932: DOUBLE
4933: LD_INT 1
4935: DEC
4936: ST_TO_ADDR
4937: LD_VAR 0 1
4941: PUSH
4942: FOR_TO
4943: IFFALSE 4975
// if points >= tmp [ i ] then
4945: LD_EXP 8
4949: PUSH
4950: LD_VAR 0 1
4954: PUSH
4955: LD_VAR 0 2
4959: ARRAY
4960: GREATEREQUAL
4961: IFFALSE 4973
// bonus_num := i ;
4963: LD_ADDR_EXP 12
4967: PUSH
4968: LD_VAR 0 2
4972: ST_TO_ADDR
4973: GO 4942
4975: POP
4976: POP
// case Query ( QBonusInfo ) of 1 :
4977: LD_STRING QBonusInfo
4979: PPUSH
4980: CALL_OW 97
4984: PUSH
4985: LD_INT 1
4987: DOUBLE
4988: EQUAL
4989: IFTRUE 4993
4991: GO 5014
4993: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4994: LD_OWVAR 2
4998: PPUSH
4999: LD_INT 12
5001: PPUSH
5002: LD_INT 2
5004: PPUSH
5005: LD_INT 23
5007: PPUSH
5008: CALL_OW 468
5012: GO 5015
5014: POP
// until points >= 15000 ;
5015: LD_EXP 8
5019: PUSH
5020: LD_INT 15000
5022: GREATEREQUAL
5023: IFFALSE 4903
// end ; end_of_file
5025: PPOPN 2
5027: END
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
5028: LD_INT 0
5030: PPUSH
5031: PPUSH
// dir := GetDir ( b ) ;
5032: LD_ADDR_VAR 0 4
5036: PUSH
5037: LD_VAR 0 2
5041: PPUSH
5042: CALL_OW 254
5046: ST_TO_ADDR
// if dir < 3 then
5047: LD_VAR 0 4
5051: PUSH
5052: LD_INT 3
5054: LESS
5055: IFFALSE 5073
// dir := dir + 3 else
5057: LD_ADDR_VAR 0 4
5061: PUSH
5062: LD_VAR 0 4
5066: PUSH
5067: LD_INT 3
5069: PLUS
5070: ST_TO_ADDR
5071: GO 5087
// dir := dir - 3 ;
5073: LD_ADDR_VAR 0 4
5077: PUSH
5078: LD_VAR 0 4
5082: PUSH
5083: LD_INT 3
5085: MINUS
5086: ST_TO_ADDR
// SetDir ( un , dir ) ;
5087: LD_VAR 0 1
5091: PPUSH
5092: LD_VAR 0 4
5096: PPUSH
5097: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5101: LD_VAR 0 1
5105: PPUSH
5106: LD_VAR 0 2
5110: PPUSH
5111: CALL_OW 52
// end ;
5115: LD_VAR 0 3
5119: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
5120: LD_INT 0
5122: PPUSH
5123: PPUSH
5124: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
5125: LD_ADDR_VAR 0 7
5129: PUSH
5130: LD_VAR 0 1
5134: PUSH
5135: LD_VAR 0 2
5139: ARRAY
5140: PPUSH
5141: LD_VAR 0 3
5145: PPUSH
5146: LD_VAR 0 4
5150: PPUSH
5151: CALL_OW 1
5155: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
5156: LD_ADDR_VAR 0 1
5160: PUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: LD_VAR 0 2
5170: PPUSH
5171: LD_VAR 0 7
5175: PPUSH
5176: CALL_OW 1
5180: ST_TO_ADDR
// result := tab ;
5181: LD_ADDR_VAR 0 5
5185: PUSH
5186: LD_VAR 0 1
5190: ST_TO_ADDR
// end ;
5191: LD_VAR 0 5
5195: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
5196: LD_INT 0
5198: PPUSH
5199: PPUSH
5200: PPUSH
// if not GetControl ( veh ) = control_manual then
5201: LD_VAR 0 1
5205: PPUSH
5206: CALL_OW 263
5210: PUSH
5211: LD_INT 1
5213: EQUAL
5214: NOT
5215: IFFALSE 5227
// result := false else
5217: LD_ADDR_VAR 0 2
5221: PUSH
5222: LD_INT 0
5224: ST_TO_ADDR
5225: GO 5372
// if veh in FilterAllUnits ( [ f_empty ] ) then
5227: LD_VAR 0 1
5231: PUSH
5232: LD_INT 58
5234: PUSH
5235: EMPTY
5236: LIST
5237: PPUSH
5238: CALL_OW 69
5242: IN
5243: IFFALSE 5255
// result := false else
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_INT 0
5252: ST_TO_ADDR
5253: GO 5372
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5255: LD_ADDR_VAR 0 4
5259: PUSH
5260: LD_INT 22
5262: PUSH
5263: LD_VAR 0 1
5267: PPUSH
5268: CALL_OW 255
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 55
5279: PUSH
5280: EMPTY
5281: LIST
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PPUSH
5287: CALL_OW 69
5291: ST_TO_ADDR
// if not filter then
5292: LD_VAR 0 4
5296: NOT
5297: IFFALSE 5309
// result := false else
5299: LD_ADDR_VAR 0 2
5303: PUSH
5304: LD_INT 0
5306: ST_TO_ADDR
5307: GO 5372
// for i = 1 to filter do
5309: LD_ADDR_VAR 0 3
5313: PUSH
5314: DOUBLE
5315: LD_INT 1
5317: DEC
5318: ST_TO_ADDR
5319: LD_VAR 0 4
5323: PUSH
5324: FOR_TO
5325: IFFALSE 5370
// if IsDriver ( filter [ i ] ) = veh then
5327: LD_VAR 0 4
5331: PUSH
5332: LD_VAR 0 3
5336: ARRAY
5337: PPUSH
5338: CALL 57938 0 1
5342: PUSH
5343: LD_VAR 0 1
5347: EQUAL
5348: IFFALSE 5368
// begin result := filter [ i ] ;
5350: LD_ADDR_VAR 0 2
5354: PUSH
5355: LD_VAR 0 4
5359: PUSH
5360: LD_VAR 0 3
5364: ARRAY
5365: ST_TO_ADDR
// break ;
5366: GO 5370
// end ;
5368: GO 5324
5370: POP
5371: POP
// end ; end ; end_of_file
5372: LD_VAR 0 2
5376: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5377: LD_VAR 0 1
5381: PPUSH
5382: CALL 19995 0 1
// if un in [ legion_commander , main_base ] then
5386: LD_VAR 0 1
5390: PUSH
5391: LD_EXP 1
5395: PUSH
5396: LD_INT 23
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: IN
5403: IFFALSE 5413
// game_over := true ;
5405: LD_ADDR_EXP 7
5409: PUSH
5410: LD_INT 1
5412: ST_TO_ADDR
// if un = al_commander then
5413: LD_VAR 0 1
5417: PUSH
5418: LD_EXP 5
5422: EQUAL
5423: IFFALSE 5429
// ChangeSide ( ) ;
5425: CALL 2689 0 0
// if GetSide ( un ) = 7 then
5429: LD_VAR 0 1
5433: PPUSH
5434: CALL_OW 255
5438: PUSH
5439: LD_INT 7
5441: EQUAL
5442: IFFALSE 5560
// begin if GetClass ( un ) = class_apeman then
5444: LD_VAR 0 1
5448: PPUSH
5449: CALL_OW 257
5453: PUSH
5454: LD_INT 12
5456: EQUAL
5457: IFFALSE 5473
// points := points + 6 ;
5459: LD_ADDR_EXP 8
5463: PUSH
5464: LD_EXP 8
5468: PUSH
5469: LD_INT 6
5471: PLUS
5472: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5473: LD_VAR 0 1
5477: PPUSH
5478: CALL_OW 257
5482: PUSH
5483: LD_INT 17
5485: EQUAL
5486: IFFALSE 5502
// points := points + 11 ;
5488: LD_ADDR_EXP 8
5492: PUSH
5493: LD_EXP 8
5497: PUSH
5498: LD_INT 11
5500: PLUS
5501: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 257
5511: PUSH
5512: LD_INT 15
5514: EQUAL
5515: IFFALSE 5531
// points := points + 14 ;
5517: LD_ADDR_EXP 8
5521: PUSH
5522: LD_EXP 8
5526: PUSH
5527: LD_INT 14
5529: PLUS
5530: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5531: LD_VAR 0 1
5535: PPUSH
5536: CALL_OW 247
5540: PUSH
5541: LD_INT 2
5543: EQUAL
5544: IFFALSE 5560
// points := points + 50 ;
5546: LD_ADDR_EXP 8
5550: PUSH
5551: LD_EXP 8
5555: PUSH
5556: LD_INT 50
5558: PLUS
5559: ST_TO_ADDR
// end ; end ;
5560: PPOPN 1
5562: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5563: LD_EXP 5
5567: PPUSH
5568: CALL_OW 256
5572: PUSH
5573: LD_INT 1000
5575: LESS
5576: IFFALSE 5608
5578: GO 5580
5580: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5581: LD_EXP 5
5585: PPUSH
5586: CALL_OW 504
5590: PPUSH
5591: CALL_OW 255
5595: PUSH
5596: LD_INT 8
5598: EQUAL
5599: IFFALSE 5608
// YouLost (  ) ;
5601: LD_STRING 
5603: PPUSH
5604: CALL_OW 104
5608: END
// on DialogueSkipped ( value ) do var i ;
5609: LD_INT 0
5611: PPUSH
// begin RemoveUnit ( potter ) ;
5612: LD_EXP 4
5616: PPUSH
5617: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5621: LD_EXP 2
5625: PUSH
5626: LD_EXP 3
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 122
// Wait ( 1 ) ;
5639: LD_INT 1
5641: PPUSH
5642: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5646: LD_EXP 2
5650: PPUSH
5651: LD_INT 107
5653: PPUSH
5654: LD_INT 53
5656: PPUSH
5657: LD_INT 0
5659: PPUSH
5660: LD_INT 0
5662: PPUSH
5663: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5667: LD_EXP 3
5671: PPUSH
5672: LD_INT 108
5674: PPUSH
5675: LD_INT 53
5677: PPUSH
5678: LD_INT 0
5680: PPUSH
5681: LD_INT 0
5683: PPUSH
5684: CALL_OW 483
// Wait ( 1 ) ;
5688: LD_INT 1
5690: PPUSH
5691: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5695: LD_EXP 2
5699: PUSH
5700: LD_EXP 3
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PPUSH
5709: LD_INT 108
5711: PPUSH
5712: LD_INT 1
5714: PPUSH
5715: CALL_OW 118
// end ;
5719: PPOPN 2
5721: END
// on ArtifactUsed ( side , button , p3 , p4 ) do var bonus , off , units , crates , tmp , i ;
5722: LD_INT 0
5724: PPUSH
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
5729: PPUSH
// begin DialogueOn ;
5730: CALL_OW 6
// uc_side := 8 ;
5734: LD_ADDR_OWVAR 20
5738: PUSH
5739: LD_INT 8
5741: ST_TO_ADDR
// uc_nation := 2 ;
5742: LD_ADDR_OWVAR 21
5746: PUSH
5747: LD_INT 2
5749: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5750: LD_ADDR_VAR 0 5
5754: PUSH
5755: LD_STRING QBonus
5757: PUSH
5758: LD_EXP 12
5762: STR
5763: ST_TO_ADDR
// off := true ;
5764: LD_ADDR_VAR 0 6
5768: PUSH
5769: LD_INT 1
5771: ST_TO_ADDR
// units := [ ] ;
5772: LD_ADDR_VAR 0 7
5776: PUSH
5777: EMPTY
5778: ST_TO_ADDR
// crates := 0 ;
5779: LD_ADDR_VAR 0 8
5783: PUSH
5784: LD_INT 0
5786: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5787: LD_EXP 10
5791: PPUSH
5792: LD_STRING DVr-2
5794: PPUSH
5795: CALL_OW 94
// Wait ( 0 0$0.3 ) ;
5799: LD_INT 10
5801: PPUSH
5802: CALL_OW 67
// case Query ( bonus ) of 1 :
5806: LD_VAR 0 5
5810: PPUSH
5811: CALL_OW 97
5815: PUSH
5816: LD_INT 1
5818: DOUBLE
5819: EQUAL
5820: IFTRUE 5824
5822: GO 5909
5824: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5825: LD_ADDR_VAR 0 9
5829: PUSH
5830: LD_INT 1
5832: PUSH
5833: LD_INT 2
5835: PUSH
5836: LD_INT 5
5838: PUSH
5839: LD_INT 8
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: PUSH
5848: LD_EXP 12
5852: ARRAY
5853: ST_TO_ADDR
// for i = 1 to tmp do
5854: LD_ADDR_VAR 0 10
5858: PUSH
5859: DOUBLE
5860: LD_INT 1
5862: DEC
5863: ST_TO_ADDR
5864: LD_VAR 0 9
5868: PUSH
5869: FOR_TO
5870: IFFALSE 5905
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5872: LD_INT 0
5874: PPUSH
5875: LD_INT 15
5877: PPUSH
5878: LD_VAR 0 9
5882: PPUSH
5883: CALL_OW 380
// units := units ^ CreateHuman ;
5887: LD_ADDR_VAR 0 7
5891: PUSH
5892: LD_VAR 0 7
5896: PUSH
5897: CALL_OW 44
5901: ADD
5902: ST_TO_ADDR
// end ;
5903: GO 5869
5905: POP
5906: POP
// end ; 2 :
5907: GO 6317
5909: LD_INT 2
5911: DOUBLE
5912: EQUAL
5913: IFTRUE 5917
5915: GO 5949
5917: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5918: LD_ADDR_VAR 0 8
5922: PUSH
5923: LD_INT 100
5925: PUSH
5926: LD_INT 150
5928: PUSH
5929: LD_INT 350
5931: PUSH
5932: LD_INT 500
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: PUSH
5941: LD_EXP 12
5945: ARRAY
5946: ST_TO_ADDR
// end ; 3 :
5947: GO 6317
5949: LD_INT 3
5951: DOUBLE
5952: EQUAL
5953: IFTRUE 5957
5955: GO 6297
5957: POP
// begin if bonus_num = 1 then
5958: LD_EXP 12
5962: PUSH
5963: LD_INT 1
5965: EQUAL
5966: IFFALSE 5976
// ignore_wave := true ;
5968: LD_ADDR_EXP 13
5972: PUSH
5973: LD_INT 1
5975: ST_TO_ADDR
// if bonus_num = 2 then
5976: LD_EXP 12
5980: PUSH
5981: LD_INT 2
5983: EQUAL
5984: IFFALSE 6104
// begin for i = 1 to 2 do
5986: LD_ADDR_VAR 0 10
5990: PUSH
5991: DOUBLE
5992: LD_INT 1
5994: DEC
5995: ST_TO_ADDR
5996: LD_INT 2
5998: PUSH
5999: FOR_TO
6000: IFFALSE 6102
// begin uc_nation := nation_arabian ;
6002: LD_ADDR_OWVAR 21
6006: PUSH
6007: LD_INT 2
6009: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6010: LD_ADDR_OWVAR 37
6014: PUSH
6015: LD_INT 14
6017: ST_TO_ADDR
// vc_engine := engine_siberite ;
6018: LD_ADDR_OWVAR 39
6022: PUSH
6023: LD_INT 3
6025: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6026: LD_ADDR_OWVAR 38
6030: PUSH
6031: LD_INT 2
6033: PUSH
6034: LD_INT 5
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: PUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_INT 2
6046: PPUSH
6047: CALL_OW 12
6051: ARRAY
6052: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6053: LD_ADDR_OWVAR 40
6057: PUSH
6058: LD_INT 28
6060: PUSH
6061: LD_INT 27
6063: PUSH
6064: LD_INT 25
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 1
6074: PPUSH
6075: LD_INT 3
6077: PPUSH
6078: CALL_OW 12
6082: ARRAY
6083: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6084: LD_ADDR_VAR 0 7
6088: PUSH
6089: LD_VAR 0 7
6093: PUSH
6094: CALL_OW 45
6098: ADD
6099: ST_TO_ADDR
// end ;
6100: GO 5999
6102: POP
6103: POP
// end ; if bonus_num = 3 then
6104: LD_EXP 12
6108: PUSH
6109: LD_INT 3
6111: EQUAL
6112: IFFALSE 6236
// begin for i = 1 to 4 do
6114: LD_ADDR_VAR 0 10
6118: PUSH
6119: DOUBLE
6120: LD_INT 1
6122: DEC
6123: ST_TO_ADDR
6124: LD_INT 4
6126: PUSH
6127: FOR_TO
6128: IFFALSE 6234
// begin uc_nation := nation_arabian ;
6130: LD_ADDR_OWVAR 21
6134: PUSH
6135: LD_INT 2
6137: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6138: LD_ADDR_OWVAR 37
6142: PUSH
6143: LD_INT 14
6145: ST_TO_ADDR
// vc_engine := engine_siberite ;
6146: LD_ADDR_OWVAR 39
6150: PUSH
6151: LD_INT 3
6153: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6154: LD_ADDR_OWVAR 38
6158: PUSH
6159: LD_INT 2
6161: PUSH
6162: LD_INT 5
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 1
6171: PPUSH
6172: LD_INT 2
6174: PPUSH
6175: CALL_OW 12
6179: ARRAY
6180: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6181: LD_ADDR_OWVAR 40
6185: PUSH
6186: LD_INT 28
6188: PUSH
6189: LD_INT 27
6191: PUSH
6192: LD_INT 28
6194: PUSH
6195: LD_INT 25
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 1
6206: PPUSH
6207: LD_INT 4
6209: PPUSH
6210: CALL_OW 12
6214: ARRAY
6215: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6216: LD_ADDR_VAR 0 7
6220: PUSH
6221: LD_VAR 0 7
6225: PUSH
6226: CALL_OW 45
6230: ADD
6231: ST_TO_ADDR
// end ;
6232: GO 6127
6234: POP
6235: POP
// end ; if bonus_num = 4 then
6236: LD_EXP 12
6240: PUSH
6241: LD_INT 4
6243: EQUAL
6244: IFFALSE 6295
// for i = 1 to 3 do
6246: LD_ADDR_VAR 0 10
6250: PUSH
6251: DOUBLE
6252: LD_INT 1
6254: DEC
6255: ST_TO_ADDR
6256: LD_INT 3
6258: PUSH
6259: FOR_TO
6260: IFFALSE 6293
// begin PrepareHuman ( false , 3 , 8 ) ;
6262: LD_INT 0
6264: PPUSH
6265: LD_INT 3
6267: PPUSH
6268: LD_INT 8
6270: PPUSH
6271: CALL_OW 380
// units := units ^ CreateHuman ;
6275: LD_ADDR_VAR 0 7
6279: PUSH
6280: LD_VAR 0 7
6284: PUSH
6285: CALL_OW 44
6289: ADD
6290: ST_TO_ADDR
// end ;
6291: GO 6259
6293: POP
6294: POP
// end ; 4 :
6295: GO 6317
6297: LD_INT 4
6299: DOUBLE
6300: EQUAL
6301: IFTRUE 6305
6303: GO 6316
6305: POP
// off := false ; end ;
6306: LD_ADDR_VAR 0 6
6310: PUSH
6311: LD_INT 0
6313: ST_TO_ADDR
6314: GO 6317
6316: POP
// DialogueOff ;
6317: CALL_OW 7
// if not off then
6321: LD_VAR 0 6
6325: NOT
6326: IFFALSE 6332
// exit else
6328: GO 6511
6330: GO 6385
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6332: LD_OWVAR 2
6336: PPUSH
6337: LD_INT 12
6339: PPUSH
6340: LD_INT 0
6342: PPUSH
6343: LD_INT 23
6345: PPUSH
6346: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6350: LD_EXP 10
6354: PPUSH
6355: LD_STRING DVr-3
6357: PUSH
6358: LD_STRING DVr-3a
6360: PUSH
6361: LD_STRING DVr-3b
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: LIST
6368: PUSH
6369: LD_INT 1
6371: PPUSH
6372: LD_INT 3
6374: PPUSH
6375: CALL_OW 12
6379: ARRAY
6380: PPUSH
6381: CALL_OW 94
// end ; if units then
6385: LD_VAR 0 7
6389: IFFALSE 6453
// for i in units do
6391: LD_ADDR_VAR 0 10
6395: PUSH
6396: LD_VAR 0 7
6400: PUSH
6401: FOR_IN
6402: IFFALSE 6451
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6404: LD_VAR 0 10
6408: PPUSH
6409: LD_INT 92
6411: PPUSH
6412: LD_INT 49
6414: PPUSH
6415: LD_INT 20
6417: PPUSH
6418: LD_INT 0
6420: PPUSH
6421: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6425: LD_VAR 0 10
6429: PPUSH
6430: CALL_OW 250
6434: PPUSH
6435: LD_VAR 0 10
6439: PPUSH
6440: CALL_OW 251
6444: PPUSH
6445: CALL_OW 494
// end ;
6449: GO 6401
6451: POP
6452: POP
// if crates then
6453: LD_VAR 0 8
6457: IFFALSE 6511
// for i = 1 to ( crates div 50 ) do
6459: LD_ADDR_VAR 0 10
6463: PUSH
6464: DOUBLE
6465: LD_INT 1
6467: DEC
6468: ST_TO_ADDR
6469: LD_VAR 0 8
6473: PUSH
6474: LD_INT 50
6476: DIV
6477: PUSH
6478: FOR_TO
6479: IFFALSE 6509
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6481: LD_INT 5
6483: PPUSH
6484: LD_INT 92
6486: PPUSH
6487: LD_INT 49
6489: PPUSH
6490: LD_INT 30
6492: PPUSH
6493: LD_INT 1
6495: PPUSH
6496: CALL_OW 56
// wait ( 0 0$02 ) ;
6500: LD_INT 70
6502: PPUSH
6503: CALL_OW 67
// end ;
6507: GO 6478
6509: POP
6510: POP
// end ;
6511: PPOPN 10
6513: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6514: LD_VAR 0 1
6518: PPUSH
6519: LD_VAR 0 2
6523: PPUSH
6524: LD_VAR 0 3
6528: PPUSH
6529: CALL 20093 0 3
// end ;
6533: PPOPN 3
6535: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL 20101 0 1
// end ; end_of_file
6545: PPOPN 1
6547: END
// every 0 0$01 trigger not game_over do
6548: LD_EXP 7
6552: NOT
6553: IFFALSE 6586
6555: GO 6557
6557: DISABLE
// begin enable ;
6558: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6559: LD_ADDR_OWVAR 47
6563: PUSH
6564: LD_STRING #tick
6566: PUSH
6567: LD_OWVAR 1
6571: PUSH
6572: LD_STRING #points
6574: PUSH
6575: LD_EXP 8
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: ST_TO_ADDR
// end ;
6586: END
// every 0 0$01 trigger game_over do
6587: LD_EXP 7
6591: IFFALSE 6650
6593: GO 6595
6595: DISABLE
// begin Wait ( 0 0$02 ) ;
6596: LD_INT 70
6598: PPUSH
6599: CALL_OW 67
// DialogueOn ;
6603: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6607: LD_ADDR_OWVAR 47
6611: PUSH
6612: LD_STRING #game-points
6614: PUSH
6615: LD_OWVAR 78
6619: PUSH
6620: LD_EXP 8
6624: PUSH
6625: LD_STRING #game-time
6627: PUSH
6628: LD_OWVAR 1
6632: PUSH
6633: LD_STRING #game-difficulty
6635: PUSH
6636: LD_OWVAR 67
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: ST_TO_ADDR
// end ; end_of_file
6650: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
6651: LD_OWVAR 1
6655: PUSH
6656: LD_INT 52500
6658: LESS
6659: IFFALSE 6683
6661: GO 6663
6663: DISABLE
// begin enable ;
6664: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
6665: LD_INT 1
6667: PPUSH
6668: LD_INT 5
6670: PPUSH
6671: CALL_OW 12
6675: PPUSH
6676: LD_INT 1
6678: PPUSH
6679: CALL_OW 57
// end ; end_of_file
6683: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
6684: LD_INT 0
6686: PPUSH
// ar_miner := 81 ;
6687: LD_ADDR_EXP 21
6691: PUSH
6692: LD_INT 81
6694: ST_TO_ADDR
// ar_crane := 88 ;
6695: LD_ADDR_EXP 20
6699: PUSH
6700: LD_INT 88
6702: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
6703: LD_ADDR_EXP 15
6707: PUSH
6708: LD_INT 89
6710: ST_TO_ADDR
// us_hack := 99 ;
6711: LD_ADDR_EXP 16
6715: PUSH
6716: LD_INT 99
6718: ST_TO_ADDR
// us_artillery := 97 ;
6719: LD_ADDR_EXP 17
6723: PUSH
6724: LD_INT 97
6726: ST_TO_ADDR
// ar_bio_bomb := 91 ;
6727: LD_ADDR_EXP 18
6731: PUSH
6732: LD_INT 91
6734: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
6735: LD_ADDR_EXP 19
6739: PUSH
6740: LD_INT 92
6742: ST_TO_ADDR
// ru_radar := 98 ;
6743: LD_ADDR_EXP 14
6747: PUSH
6748: LD_INT 98
6750: ST_TO_ADDR
// tech_Artillery := 80 ;
6751: LD_ADDR_EXP 22
6755: PUSH
6756: LD_INT 80
6758: ST_TO_ADDR
// tech_RadMat := 81 ;
6759: LD_ADDR_EXP 23
6763: PUSH
6764: LD_INT 81
6766: ST_TO_ADDR
// tech_BasicTools := 82 ;
6767: LD_ADDR_EXP 24
6771: PUSH
6772: LD_INT 82
6774: ST_TO_ADDR
// tech_Cargo := 83 ;
6775: LD_ADDR_EXP 25
6779: PUSH
6780: LD_INT 83
6782: ST_TO_ADDR
// tech_Track := 84 ;
6783: LD_ADDR_EXP 26
6787: PUSH
6788: LD_INT 84
6790: ST_TO_ADDR
// tech_Crane := 85 ;
6791: LD_ADDR_EXP 27
6795: PUSH
6796: LD_INT 85
6798: ST_TO_ADDR
// tech_Bulldozer := 86 ;
6799: LD_ADDR_EXP 28
6803: PUSH
6804: LD_INT 86
6806: ST_TO_ADDR
// tech_Hovercraft := 87 ;
6807: LD_ADDR_EXP 29
6811: PUSH
6812: LD_INT 87
6814: ST_TO_ADDR
// end ;
6815: LD_VAR 0 1
6819: RET
// every 1 do
6820: GO 6822
6822: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
6823: CALL 6684 0 0
6827: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
6828: LD_VAR 0 2
6832: PUSH
6833: LD_INT 100
6835: EQUAL
6836: IFFALSE 7785
// begin if not StreamModeActive then
6838: LD_EXP 30
6842: NOT
6843: IFFALSE 6853
// StreamModeActive := true ;
6845: LD_ADDR_EXP 30
6849: PUSH
6850: LD_INT 1
6852: ST_TO_ADDR
// if p3 = 0 then
6853: LD_VAR 0 3
6857: PUSH
6858: LD_INT 0
6860: EQUAL
6861: IFFALSE 6867
// InitStreamMode ;
6863: CALL 7943 0 0
// if p3 = 1 then
6867: LD_VAR 0 3
6871: PUSH
6872: LD_INT 1
6874: EQUAL
6875: IFFALSE 6885
// sRocket := true ;
6877: LD_ADDR_EXP 35
6881: PUSH
6882: LD_INT 1
6884: ST_TO_ADDR
// if p3 = 2 then
6885: LD_VAR 0 3
6889: PUSH
6890: LD_INT 2
6892: EQUAL
6893: IFFALSE 6903
// sSpeed := true ;
6895: LD_ADDR_EXP 34
6899: PUSH
6900: LD_INT 1
6902: ST_TO_ADDR
// if p3 = 3 then
6903: LD_VAR 0 3
6907: PUSH
6908: LD_INT 3
6910: EQUAL
6911: IFFALSE 6921
// sEngine := true ;
6913: LD_ADDR_EXP 36
6917: PUSH
6918: LD_INT 1
6920: ST_TO_ADDR
// if p3 = 4 then
6921: LD_VAR 0 3
6925: PUSH
6926: LD_INT 4
6928: EQUAL
6929: IFFALSE 6939
// sSpec := true ;
6931: LD_ADDR_EXP 33
6935: PUSH
6936: LD_INT 1
6938: ST_TO_ADDR
// if p3 = 5 then
6939: LD_VAR 0 3
6943: PUSH
6944: LD_INT 5
6946: EQUAL
6947: IFFALSE 6957
// sLevel := true ;
6949: LD_ADDR_EXP 37
6953: PUSH
6954: LD_INT 1
6956: ST_TO_ADDR
// if p3 = 6 then
6957: LD_VAR 0 3
6961: PUSH
6962: LD_INT 6
6964: EQUAL
6965: IFFALSE 6975
// sArmoury := true ;
6967: LD_ADDR_EXP 38
6971: PUSH
6972: LD_INT 1
6974: ST_TO_ADDR
// if p3 = 7 then
6975: LD_VAR 0 3
6979: PUSH
6980: LD_INT 7
6982: EQUAL
6983: IFFALSE 6993
// sRadar := true ;
6985: LD_ADDR_EXP 39
6989: PUSH
6990: LD_INT 1
6992: ST_TO_ADDR
// if p3 = 8 then
6993: LD_VAR 0 3
6997: PUSH
6998: LD_INT 8
7000: EQUAL
7001: IFFALSE 7011
// sBunker := true ;
7003: LD_ADDR_EXP 40
7007: PUSH
7008: LD_INT 1
7010: ST_TO_ADDR
// if p3 = 9 then
7011: LD_VAR 0 3
7015: PUSH
7016: LD_INT 9
7018: EQUAL
7019: IFFALSE 7029
// sHack := true ;
7021: LD_ADDR_EXP 41
7025: PUSH
7026: LD_INT 1
7028: ST_TO_ADDR
// if p3 = 10 then
7029: LD_VAR 0 3
7033: PUSH
7034: LD_INT 10
7036: EQUAL
7037: IFFALSE 7047
// sFire := true ;
7039: LD_ADDR_EXP 42
7043: PUSH
7044: LD_INT 1
7046: ST_TO_ADDR
// if p3 = 11 then
7047: LD_VAR 0 3
7051: PUSH
7052: LD_INT 11
7054: EQUAL
7055: IFFALSE 7065
// sRefresh := true ;
7057: LD_ADDR_EXP 43
7061: PUSH
7062: LD_INT 1
7064: ST_TO_ADDR
// if p3 = 12 then
7065: LD_VAR 0 3
7069: PUSH
7070: LD_INT 12
7072: EQUAL
7073: IFFALSE 7083
// sExp := true ;
7075: LD_ADDR_EXP 44
7079: PUSH
7080: LD_INT 1
7082: ST_TO_ADDR
// if p3 = 13 then
7083: LD_VAR 0 3
7087: PUSH
7088: LD_INT 13
7090: EQUAL
7091: IFFALSE 7101
// sDepot := true ;
7093: LD_ADDR_EXP 45
7097: PUSH
7098: LD_INT 1
7100: ST_TO_ADDR
// if p3 = 14 then
7101: LD_VAR 0 3
7105: PUSH
7106: LD_INT 14
7108: EQUAL
7109: IFFALSE 7119
// sFlag := true ;
7111: LD_ADDR_EXP 46
7115: PUSH
7116: LD_INT 1
7118: ST_TO_ADDR
// if p3 = 15 then
7119: LD_VAR 0 3
7123: PUSH
7124: LD_INT 15
7126: EQUAL
7127: IFFALSE 7137
// sKamikadze := true ;
7129: LD_ADDR_EXP 54
7133: PUSH
7134: LD_INT 1
7136: ST_TO_ADDR
// if p3 = 16 then
7137: LD_VAR 0 3
7141: PUSH
7142: LD_INT 16
7144: EQUAL
7145: IFFALSE 7155
// sTroll := true ;
7147: LD_ADDR_EXP 55
7151: PUSH
7152: LD_INT 1
7154: ST_TO_ADDR
// if p3 = 17 then
7155: LD_VAR 0 3
7159: PUSH
7160: LD_INT 17
7162: EQUAL
7163: IFFALSE 7173
// sSlow := true ;
7165: LD_ADDR_EXP 56
7169: PUSH
7170: LD_INT 1
7172: ST_TO_ADDR
// if p3 = 18 then
7173: LD_VAR 0 3
7177: PUSH
7178: LD_INT 18
7180: EQUAL
7181: IFFALSE 7191
// sLack := true ;
7183: LD_ADDR_EXP 57
7187: PUSH
7188: LD_INT 1
7190: ST_TO_ADDR
// if p3 = 19 then
7191: LD_VAR 0 3
7195: PUSH
7196: LD_INT 19
7198: EQUAL
7199: IFFALSE 7209
// sTank := true ;
7201: LD_ADDR_EXP 59
7205: PUSH
7206: LD_INT 1
7208: ST_TO_ADDR
// if p3 = 20 then
7209: LD_VAR 0 3
7213: PUSH
7214: LD_INT 20
7216: EQUAL
7217: IFFALSE 7227
// sRemote := true ;
7219: LD_ADDR_EXP 60
7223: PUSH
7224: LD_INT 1
7226: ST_TO_ADDR
// if p3 = 21 then
7227: LD_VAR 0 3
7231: PUSH
7232: LD_INT 21
7234: EQUAL
7235: IFFALSE 7245
// sPowell := true ;
7237: LD_ADDR_EXP 61
7241: PUSH
7242: LD_INT 1
7244: ST_TO_ADDR
// if p3 = 22 then
7245: LD_VAR 0 3
7249: PUSH
7250: LD_INT 22
7252: EQUAL
7253: IFFALSE 7263
// sTeleport := true ;
7255: LD_ADDR_EXP 64
7259: PUSH
7260: LD_INT 1
7262: ST_TO_ADDR
// if p3 = 23 then
7263: LD_VAR 0 3
7267: PUSH
7268: LD_INT 23
7270: EQUAL
7271: IFFALSE 7281
// sOilTower := true ;
7273: LD_ADDR_EXP 66
7277: PUSH
7278: LD_INT 1
7280: ST_TO_ADDR
// if p3 = 24 then
7281: LD_VAR 0 3
7285: PUSH
7286: LD_INT 24
7288: EQUAL
7289: IFFALSE 7299
// sShovel := true ;
7291: LD_ADDR_EXP 67
7295: PUSH
7296: LD_INT 1
7298: ST_TO_ADDR
// if p3 = 25 then
7299: LD_VAR 0 3
7303: PUSH
7304: LD_INT 25
7306: EQUAL
7307: IFFALSE 7317
// sSheik := true ;
7309: LD_ADDR_EXP 68
7313: PUSH
7314: LD_INT 1
7316: ST_TO_ADDR
// if p3 = 26 then
7317: LD_VAR 0 3
7321: PUSH
7322: LD_INT 26
7324: EQUAL
7325: IFFALSE 7335
// sEarthquake := true ;
7327: LD_ADDR_EXP 70
7331: PUSH
7332: LD_INT 1
7334: ST_TO_ADDR
// if p3 = 27 then
7335: LD_VAR 0 3
7339: PUSH
7340: LD_INT 27
7342: EQUAL
7343: IFFALSE 7353
// sAI := true ;
7345: LD_ADDR_EXP 71
7349: PUSH
7350: LD_INT 1
7352: ST_TO_ADDR
// if p3 = 28 then
7353: LD_VAR 0 3
7357: PUSH
7358: LD_INT 28
7360: EQUAL
7361: IFFALSE 7371
// sCargo := true ;
7363: LD_ADDR_EXP 74
7367: PUSH
7368: LD_INT 1
7370: ST_TO_ADDR
// if p3 = 29 then
7371: LD_VAR 0 3
7375: PUSH
7376: LD_INT 29
7378: EQUAL
7379: IFFALSE 7389
// sDLaser := true ;
7381: LD_ADDR_EXP 75
7385: PUSH
7386: LD_INT 1
7388: ST_TO_ADDR
// if p3 = 30 then
7389: LD_VAR 0 3
7393: PUSH
7394: LD_INT 30
7396: EQUAL
7397: IFFALSE 7407
// sExchange := true ;
7399: LD_ADDR_EXP 76
7403: PUSH
7404: LD_INT 1
7406: ST_TO_ADDR
// if p3 = 31 then
7407: LD_VAR 0 3
7411: PUSH
7412: LD_INT 31
7414: EQUAL
7415: IFFALSE 7425
// sFac := true ;
7417: LD_ADDR_EXP 77
7421: PUSH
7422: LD_INT 1
7424: ST_TO_ADDR
// if p3 = 32 then
7425: LD_VAR 0 3
7429: PUSH
7430: LD_INT 32
7432: EQUAL
7433: IFFALSE 7443
// sPower := true ;
7435: LD_ADDR_EXP 78
7439: PUSH
7440: LD_INT 1
7442: ST_TO_ADDR
// if p3 = 33 then
7443: LD_VAR 0 3
7447: PUSH
7448: LD_INT 33
7450: EQUAL
7451: IFFALSE 7461
// sRandom := true ;
7453: LD_ADDR_EXP 79
7457: PUSH
7458: LD_INT 1
7460: ST_TO_ADDR
// if p3 = 34 then
7461: LD_VAR 0 3
7465: PUSH
7466: LD_INT 34
7468: EQUAL
7469: IFFALSE 7479
// sShield := true ;
7471: LD_ADDR_EXP 80
7475: PUSH
7476: LD_INT 1
7478: ST_TO_ADDR
// if p3 = 35 then
7479: LD_VAR 0 3
7483: PUSH
7484: LD_INT 35
7486: EQUAL
7487: IFFALSE 7497
// sTime := true ;
7489: LD_ADDR_EXP 81
7493: PUSH
7494: LD_INT 1
7496: ST_TO_ADDR
// if p3 = 36 then
7497: LD_VAR 0 3
7501: PUSH
7502: LD_INT 36
7504: EQUAL
7505: IFFALSE 7515
// sTools := true ;
7507: LD_ADDR_EXP 82
7511: PUSH
7512: LD_INT 1
7514: ST_TO_ADDR
// if p3 = 101 then
7515: LD_VAR 0 3
7519: PUSH
7520: LD_INT 101
7522: EQUAL
7523: IFFALSE 7533
// sSold := true ;
7525: LD_ADDR_EXP 47
7529: PUSH
7530: LD_INT 1
7532: ST_TO_ADDR
// if p3 = 102 then
7533: LD_VAR 0 3
7537: PUSH
7538: LD_INT 102
7540: EQUAL
7541: IFFALSE 7551
// sDiff := true ;
7543: LD_ADDR_EXP 48
7547: PUSH
7548: LD_INT 1
7550: ST_TO_ADDR
// if p3 = 103 then
7551: LD_VAR 0 3
7555: PUSH
7556: LD_INT 103
7558: EQUAL
7559: IFFALSE 7569
// sFog := true ;
7561: LD_ADDR_EXP 51
7565: PUSH
7566: LD_INT 1
7568: ST_TO_ADDR
// if p3 = 104 then
7569: LD_VAR 0 3
7573: PUSH
7574: LD_INT 104
7576: EQUAL
7577: IFFALSE 7587
// sReset := true ;
7579: LD_ADDR_EXP 52
7583: PUSH
7584: LD_INT 1
7586: ST_TO_ADDR
// if p3 = 105 then
7587: LD_VAR 0 3
7591: PUSH
7592: LD_INT 105
7594: EQUAL
7595: IFFALSE 7605
// sSun := true ;
7597: LD_ADDR_EXP 53
7601: PUSH
7602: LD_INT 1
7604: ST_TO_ADDR
// if p3 = 106 then
7605: LD_VAR 0 3
7609: PUSH
7610: LD_INT 106
7612: EQUAL
7613: IFFALSE 7623
// sTiger := true ;
7615: LD_ADDR_EXP 49
7619: PUSH
7620: LD_INT 1
7622: ST_TO_ADDR
// if p3 = 107 then
7623: LD_VAR 0 3
7627: PUSH
7628: LD_INT 107
7630: EQUAL
7631: IFFALSE 7641
// sBomb := true ;
7633: LD_ADDR_EXP 50
7637: PUSH
7638: LD_INT 1
7640: ST_TO_ADDR
// if p3 = 108 then
7641: LD_VAR 0 3
7645: PUSH
7646: LD_INT 108
7648: EQUAL
7649: IFFALSE 7659
// sWound := true ;
7651: LD_ADDR_EXP 58
7655: PUSH
7656: LD_INT 1
7658: ST_TO_ADDR
// if p3 = 109 then
7659: LD_VAR 0 3
7663: PUSH
7664: LD_INT 109
7666: EQUAL
7667: IFFALSE 7677
// sBetray := true ;
7669: LD_ADDR_EXP 62
7673: PUSH
7674: LD_INT 1
7676: ST_TO_ADDR
// if p3 = 110 then
7677: LD_VAR 0 3
7681: PUSH
7682: LD_INT 110
7684: EQUAL
7685: IFFALSE 7695
// sContamin := true ;
7687: LD_ADDR_EXP 63
7691: PUSH
7692: LD_INT 1
7694: ST_TO_ADDR
// if p3 = 111 then
7695: LD_VAR 0 3
7699: PUSH
7700: LD_INT 111
7702: EQUAL
7703: IFFALSE 7713
// sOil := true ;
7705: LD_ADDR_EXP 65
7709: PUSH
7710: LD_INT 1
7712: ST_TO_ADDR
// if p3 = 112 then
7713: LD_VAR 0 3
7717: PUSH
7718: LD_INT 112
7720: EQUAL
7721: IFFALSE 7731
// sStu := true ;
7723: LD_ADDR_EXP 69
7727: PUSH
7728: LD_INT 1
7730: ST_TO_ADDR
// if p3 = 113 then
7731: LD_VAR 0 3
7735: PUSH
7736: LD_INT 113
7738: EQUAL
7739: IFFALSE 7749
// sBazooka := true ;
7741: LD_ADDR_EXP 72
7745: PUSH
7746: LD_INT 1
7748: ST_TO_ADDR
// if p3 = 114 then
7749: LD_VAR 0 3
7753: PUSH
7754: LD_INT 114
7756: EQUAL
7757: IFFALSE 7767
// sMortar := true ;
7759: LD_ADDR_EXP 73
7763: PUSH
7764: LD_INT 1
7766: ST_TO_ADDR
// if p3 = 115 then
7767: LD_VAR 0 3
7771: PUSH
7772: LD_INT 115
7774: EQUAL
7775: IFFALSE 7785
// sRanger := true ;
7777: LD_ADDR_EXP 83
7781: PUSH
7782: LD_INT 1
7784: ST_TO_ADDR
// end ; if p2 = 101 then
7785: LD_VAR 0 2
7789: PUSH
7790: LD_INT 101
7792: EQUAL
7793: IFFALSE 7921
// begin case p3 of 1 :
7795: LD_VAR 0 3
7799: PUSH
7800: LD_INT 1
7802: DOUBLE
7803: EQUAL
7804: IFTRUE 7808
7806: GO 7815
7808: POP
// hHackUnlimitedResources ; 2 :
7809: CALL 18956 0 0
7813: GO 7921
7815: LD_INT 2
7817: DOUBLE
7818: EQUAL
7819: IFTRUE 7823
7821: GO 7830
7823: POP
// hHackSetLevel10 ; 3 :
7824: CALL 19089 0 0
7828: GO 7921
7830: LD_INT 3
7832: DOUBLE
7833: EQUAL
7834: IFTRUE 7838
7836: GO 7845
7838: POP
// hHackSetLevel10YourUnits ; 4 :
7839: CALL 19174 0 0
7843: GO 7921
7845: LD_INT 4
7847: DOUBLE
7848: EQUAL
7849: IFTRUE 7853
7851: GO 7860
7853: POP
// hHackInvincible ; 5 :
7854: CALL 19622 0 0
7858: GO 7921
7860: LD_INT 5
7862: DOUBLE
7863: EQUAL
7864: IFTRUE 7868
7866: GO 7875
7868: POP
// hHackInvisible ; 6 :
7869: CALL 19733 0 0
7873: GO 7921
7875: LD_INT 6
7877: DOUBLE
7878: EQUAL
7879: IFTRUE 7883
7881: GO 7890
7883: POP
// hHackChangeYourSide ; 7 :
7884: CALL 19790 0 0
7888: GO 7921
7890: LD_INT 7
7892: DOUBLE
7893: EQUAL
7894: IFTRUE 7898
7896: GO 7905
7898: POP
// hHackChangeUnitSide ; 8 :
7899: CALL 19832 0 0
7903: GO 7921
7905: LD_INT 8
7907: DOUBLE
7908: EQUAL
7909: IFTRUE 7913
7911: GO 7920
7913: POP
// hHackFog ; end ;
7914: CALL 19933 0 0
7918: GO 7921
7920: POP
// end ; end ;
7921: PPOPN 6
7923: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7924: GO 7926
7926: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7927: LD_STRING initStreamRollete();
7929: PPUSH
7930: CALL_OW 559
// InitStreamMode ;
7934: CALL 7943 0 0
// DefineStreamItems ( ) ;
7938: CALL 8383 0 0
// end ;
7942: END
// function InitStreamMode ; begin
7943: LD_INT 0
7945: PPUSH
// streamModeActive := false ;
7946: LD_ADDR_EXP 30
7950: PUSH
7951: LD_INT 0
7953: ST_TO_ADDR
// normalCounter := 36 ;
7954: LD_ADDR_EXP 31
7958: PUSH
7959: LD_INT 36
7961: ST_TO_ADDR
// hardcoreCounter := 16 ;
7962: LD_ADDR_EXP 32
7966: PUSH
7967: LD_INT 16
7969: ST_TO_ADDR
// sRocket := false ;
7970: LD_ADDR_EXP 35
7974: PUSH
7975: LD_INT 0
7977: ST_TO_ADDR
// sSpeed := false ;
7978: LD_ADDR_EXP 34
7982: PUSH
7983: LD_INT 0
7985: ST_TO_ADDR
// sEngine := false ;
7986: LD_ADDR_EXP 36
7990: PUSH
7991: LD_INT 0
7993: ST_TO_ADDR
// sSpec := false ;
7994: LD_ADDR_EXP 33
7998: PUSH
7999: LD_INT 0
8001: ST_TO_ADDR
// sLevel := false ;
8002: LD_ADDR_EXP 37
8006: PUSH
8007: LD_INT 0
8009: ST_TO_ADDR
// sArmoury := false ;
8010: LD_ADDR_EXP 38
8014: PUSH
8015: LD_INT 0
8017: ST_TO_ADDR
// sRadar := false ;
8018: LD_ADDR_EXP 39
8022: PUSH
8023: LD_INT 0
8025: ST_TO_ADDR
// sBunker := false ;
8026: LD_ADDR_EXP 40
8030: PUSH
8031: LD_INT 0
8033: ST_TO_ADDR
// sHack := false ;
8034: LD_ADDR_EXP 41
8038: PUSH
8039: LD_INT 0
8041: ST_TO_ADDR
// sFire := false ;
8042: LD_ADDR_EXP 42
8046: PUSH
8047: LD_INT 0
8049: ST_TO_ADDR
// sRefresh := false ;
8050: LD_ADDR_EXP 43
8054: PUSH
8055: LD_INT 0
8057: ST_TO_ADDR
// sExp := false ;
8058: LD_ADDR_EXP 44
8062: PUSH
8063: LD_INT 0
8065: ST_TO_ADDR
// sDepot := false ;
8066: LD_ADDR_EXP 45
8070: PUSH
8071: LD_INT 0
8073: ST_TO_ADDR
// sFlag := false ;
8074: LD_ADDR_EXP 46
8078: PUSH
8079: LD_INT 0
8081: ST_TO_ADDR
// sKamikadze := false ;
8082: LD_ADDR_EXP 54
8086: PUSH
8087: LD_INT 0
8089: ST_TO_ADDR
// sTroll := false ;
8090: LD_ADDR_EXP 55
8094: PUSH
8095: LD_INT 0
8097: ST_TO_ADDR
// sSlow := false ;
8098: LD_ADDR_EXP 56
8102: PUSH
8103: LD_INT 0
8105: ST_TO_ADDR
// sLack := false ;
8106: LD_ADDR_EXP 57
8110: PUSH
8111: LD_INT 0
8113: ST_TO_ADDR
// sTank := false ;
8114: LD_ADDR_EXP 59
8118: PUSH
8119: LD_INT 0
8121: ST_TO_ADDR
// sRemote := false ;
8122: LD_ADDR_EXP 60
8126: PUSH
8127: LD_INT 0
8129: ST_TO_ADDR
// sPowell := false ;
8130: LD_ADDR_EXP 61
8134: PUSH
8135: LD_INT 0
8137: ST_TO_ADDR
// sTeleport := false ;
8138: LD_ADDR_EXP 64
8142: PUSH
8143: LD_INT 0
8145: ST_TO_ADDR
// sOilTower := false ;
8146: LD_ADDR_EXP 66
8150: PUSH
8151: LD_INT 0
8153: ST_TO_ADDR
// sShovel := false ;
8154: LD_ADDR_EXP 67
8158: PUSH
8159: LD_INT 0
8161: ST_TO_ADDR
// sSheik := false ;
8162: LD_ADDR_EXP 68
8166: PUSH
8167: LD_INT 0
8169: ST_TO_ADDR
// sEarthquake := false ;
8170: LD_ADDR_EXP 70
8174: PUSH
8175: LD_INT 0
8177: ST_TO_ADDR
// sAI := false ;
8178: LD_ADDR_EXP 71
8182: PUSH
8183: LD_INT 0
8185: ST_TO_ADDR
// sCargo := false ;
8186: LD_ADDR_EXP 74
8190: PUSH
8191: LD_INT 0
8193: ST_TO_ADDR
// sDLaser := false ;
8194: LD_ADDR_EXP 75
8198: PUSH
8199: LD_INT 0
8201: ST_TO_ADDR
// sExchange := false ;
8202: LD_ADDR_EXP 76
8206: PUSH
8207: LD_INT 0
8209: ST_TO_ADDR
// sFac := false ;
8210: LD_ADDR_EXP 77
8214: PUSH
8215: LD_INT 0
8217: ST_TO_ADDR
// sPower := false ;
8218: LD_ADDR_EXP 78
8222: PUSH
8223: LD_INT 0
8225: ST_TO_ADDR
// sRandom := false ;
8226: LD_ADDR_EXP 79
8230: PUSH
8231: LD_INT 0
8233: ST_TO_ADDR
// sShield := false ;
8234: LD_ADDR_EXP 80
8238: PUSH
8239: LD_INT 0
8241: ST_TO_ADDR
// sTime := false ;
8242: LD_ADDR_EXP 81
8246: PUSH
8247: LD_INT 0
8249: ST_TO_ADDR
// sTools := false ;
8250: LD_ADDR_EXP 82
8254: PUSH
8255: LD_INT 0
8257: ST_TO_ADDR
// sSold := false ;
8258: LD_ADDR_EXP 47
8262: PUSH
8263: LD_INT 0
8265: ST_TO_ADDR
// sDiff := false ;
8266: LD_ADDR_EXP 48
8270: PUSH
8271: LD_INT 0
8273: ST_TO_ADDR
// sFog := false ;
8274: LD_ADDR_EXP 51
8278: PUSH
8279: LD_INT 0
8281: ST_TO_ADDR
// sReset := false ;
8282: LD_ADDR_EXP 52
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// sSun := false ;
8290: LD_ADDR_EXP 53
8294: PUSH
8295: LD_INT 0
8297: ST_TO_ADDR
// sTiger := false ;
8298: LD_ADDR_EXP 49
8302: PUSH
8303: LD_INT 0
8305: ST_TO_ADDR
// sBomb := false ;
8306: LD_ADDR_EXP 50
8310: PUSH
8311: LD_INT 0
8313: ST_TO_ADDR
// sWound := false ;
8314: LD_ADDR_EXP 58
8318: PUSH
8319: LD_INT 0
8321: ST_TO_ADDR
// sBetray := false ;
8322: LD_ADDR_EXP 62
8326: PUSH
8327: LD_INT 0
8329: ST_TO_ADDR
// sContamin := false ;
8330: LD_ADDR_EXP 63
8334: PUSH
8335: LD_INT 0
8337: ST_TO_ADDR
// sOil := false ;
8338: LD_ADDR_EXP 65
8342: PUSH
8343: LD_INT 0
8345: ST_TO_ADDR
// sStu := false ;
8346: LD_ADDR_EXP 69
8350: PUSH
8351: LD_INT 0
8353: ST_TO_ADDR
// sBazooka := false ;
8354: LD_ADDR_EXP 72
8358: PUSH
8359: LD_INT 0
8361: ST_TO_ADDR
// sMortar := false ;
8362: LD_ADDR_EXP 73
8366: PUSH
8367: LD_INT 0
8369: ST_TO_ADDR
// sRanger := false ;
8370: LD_ADDR_EXP 83
8374: PUSH
8375: LD_INT 0
8377: ST_TO_ADDR
// end ;
8378: LD_VAR 0 1
8382: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8383: LD_INT 0
8385: PPUSH
8386: PPUSH
8387: PPUSH
8388: PPUSH
8389: PPUSH
// result := [ ] ;
8390: LD_ADDR_VAR 0 1
8394: PUSH
8395: EMPTY
8396: ST_TO_ADDR
// if campaign_id = 1 then
8397: LD_OWVAR 69
8401: PUSH
8402: LD_INT 1
8404: EQUAL
8405: IFFALSE 11343
// begin case mission_number of 1 :
8407: LD_OWVAR 70
8411: PUSH
8412: LD_INT 1
8414: DOUBLE
8415: EQUAL
8416: IFTRUE 8420
8418: GO 8484
8420: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8421: LD_ADDR_VAR 0 1
8425: PUSH
8426: LD_INT 2
8428: PUSH
8429: LD_INT 4
8431: PUSH
8432: LD_INT 11
8434: PUSH
8435: LD_INT 12
8437: PUSH
8438: LD_INT 15
8440: PUSH
8441: LD_INT 16
8443: PUSH
8444: LD_INT 22
8446: PUSH
8447: LD_INT 23
8449: PUSH
8450: LD_INT 26
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 101
8466: PUSH
8467: LD_INT 102
8469: PUSH
8470: LD_INT 106
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: ST_TO_ADDR
8482: GO 11341
8484: LD_INT 2
8486: DOUBLE
8487: EQUAL
8488: IFTRUE 8492
8490: GO 8564
8492: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8493: LD_ADDR_VAR 0 1
8497: PUSH
8498: LD_INT 2
8500: PUSH
8501: LD_INT 4
8503: PUSH
8504: LD_INT 11
8506: PUSH
8507: LD_INT 12
8509: PUSH
8510: LD_INT 15
8512: PUSH
8513: LD_INT 16
8515: PUSH
8516: LD_INT 22
8518: PUSH
8519: LD_INT 23
8521: PUSH
8522: LD_INT 26
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: PUSH
8536: LD_INT 101
8538: PUSH
8539: LD_INT 102
8541: PUSH
8542: LD_INT 105
8544: PUSH
8545: LD_INT 106
8547: PUSH
8548: LD_INT 108
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: ST_TO_ADDR
8562: GO 11341
8564: LD_INT 3
8566: DOUBLE
8567: EQUAL
8568: IFTRUE 8572
8570: GO 8648
8572: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8573: LD_ADDR_VAR 0 1
8577: PUSH
8578: LD_INT 2
8580: PUSH
8581: LD_INT 4
8583: PUSH
8584: LD_INT 5
8586: PUSH
8587: LD_INT 11
8589: PUSH
8590: LD_INT 12
8592: PUSH
8593: LD_INT 15
8595: PUSH
8596: LD_INT 16
8598: PUSH
8599: LD_INT 22
8601: PUSH
8602: LD_INT 26
8604: PUSH
8605: LD_INT 36
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: PUSH
8620: LD_INT 101
8622: PUSH
8623: LD_INT 102
8625: PUSH
8626: LD_INT 105
8628: PUSH
8629: LD_INT 106
8631: PUSH
8632: LD_INT 108
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: ST_TO_ADDR
8646: GO 11341
8648: LD_INT 4
8650: DOUBLE
8651: EQUAL
8652: IFTRUE 8656
8654: GO 8740
8656: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8657: LD_ADDR_VAR 0 1
8661: PUSH
8662: LD_INT 2
8664: PUSH
8665: LD_INT 4
8667: PUSH
8668: LD_INT 5
8670: PUSH
8671: LD_INT 8
8673: PUSH
8674: LD_INT 11
8676: PUSH
8677: LD_INT 12
8679: PUSH
8680: LD_INT 15
8682: PUSH
8683: LD_INT 16
8685: PUSH
8686: LD_INT 22
8688: PUSH
8689: LD_INT 23
8691: PUSH
8692: LD_INT 26
8694: PUSH
8695: LD_INT 36
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: PUSH
8712: LD_INT 101
8714: PUSH
8715: LD_INT 102
8717: PUSH
8718: LD_INT 105
8720: PUSH
8721: LD_INT 106
8723: PUSH
8724: LD_INT 108
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: ST_TO_ADDR
8738: GO 11341
8740: LD_INT 5
8742: DOUBLE
8743: EQUAL
8744: IFTRUE 8748
8746: GO 8848
8748: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8749: LD_ADDR_VAR 0 1
8753: PUSH
8754: LD_INT 2
8756: PUSH
8757: LD_INT 4
8759: PUSH
8760: LD_INT 5
8762: PUSH
8763: LD_INT 6
8765: PUSH
8766: LD_INT 8
8768: PUSH
8769: LD_INT 11
8771: PUSH
8772: LD_INT 12
8774: PUSH
8775: LD_INT 15
8777: PUSH
8778: LD_INT 16
8780: PUSH
8781: LD_INT 22
8783: PUSH
8784: LD_INT 23
8786: PUSH
8787: LD_INT 25
8789: PUSH
8790: LD_INT 26
8792: PUSH
8793: LD_INT 36
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 101
8814: PUSH
8815: LD_INT 102
8817: PUSH
8818: LD_INT 105
8820: PUSH
8821: LD_INT 106
8823: PUSH
8824: LD_INT 108
8826: PUSH
8827: LD_INT 109
8829: PUSH
8830: LD_INT 112
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: ST_TO_ADDR
8846: GO 11341
8848: LD_INT 6
8850: DOUBLE
8851: EQUAL
8852: IFTRUE 8856
8854: GO 8976
8856: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8857: LD_ADDR_VAR 0 1
8861: PUSH
8862: LD_INT 2
8864: PUSH
8865: LD_INT 4
8867: PUSH
8868: LD_INT 5
8870: PUSH
8871: LD_INT 6
8873: PUSH
8874: LD_INT 8
8876: PUSH
8877: LD_INT 11
8879: PUSH
8880: LD_INT 12
8882: PUSH
8883: LD_INT 15
8885: PUSH
8886: LD_INT 16
8888: PUSH
8889: LD_INT 20
8891: PUSH
8892: LD_INT 21
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_INT 23
8900: PUSH
8901: LD_INT 25
8903: PUSH
8904: LD_INT 26
8906: PUSH
8907: LD_INT 30
8909: PUSH
8910: LD_INT 31
8912: PUSH
8913: LD_INT 32
8915: PUSH
8916: LD_INT 36
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 101
8942: PUSH
8943: LD_INT 102
8945: PUSH
8946: LD_INT 105
8948: PUSH
8949: LD_INT 106
8951: PUSH
8952: LD_INT 108
8954: PUSH
8955: LD_INT 109
8957: PUSH
8958: LD_INT 112
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: ST_TO_ADDR
8974: GO 11341
8976: LD_INT 7
8978: DOUBLE
8979: EQUAL
8980: IFTRUE 8984
8982: GO 9084
8984: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
8985: LD_ADDR_VAR 0 1
8989: PUSH
8990: LD_INT 2
8992: PUSH
8993: LD_INT 4
8995: PUSH
8996: LD_INT 5
8998: PUSH
8999: LD_INT 7
9001: PUSH
9002: LD_INT 11
9004: PUSH
9005: LD_INT 12
9007: PUSH
9008: LD_INT 15
9010: PUSH
9011: LD_INT 16
9013: PUSH
9014: LD_INT 20
9016: PUSH
9017: LD_INT 21
9019: PUSH
9020: LD_INT 22
9022: PUSH
9023: LD_INT 23
9025: PUSH
9026: LD_INT 25
9028: PUSH
9029: LD_INT 26
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: PUSH
9048: LD_INT 101
9050: PUSH
9051: LD_INT 102
9053: PUSH
9054: LD_INT 103
9056: PUSH
9057: LD_INT 105
9059: PUSH
9060: LD_INT 106
9062: PUSH
9063: LD_INT 108
9065: PUSH
9066: LD_INT 112
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: ST_TO_ADDR
9082: GO 11341
9084: LD_INT 8
9086: DOUBLE
9087: EQUAL
9088: IFTRUE 9092
9090: GO 9220
9092: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9093: LD_ADDR_VAR 0 1
9097: PUSH
9098: LD_INT 2
9100: PUSH
9101: LD_INT 4
9103: PUSH
9104: LD_INT 5
9106: PUSH
9107: LD_INT 6
9109: PUSH
9110: LD_INT 7
9112: PUSH
9113: LD_INT 8
9115: PUSH
9116: LD_INT 11
9118: PUSH
9119: LD_INT 12
9121: PUSH
9122: LD_INT 15
9124: PUSH
9125: LD_INT 16
9127: PUSH
9128: LD_INT 20
9130: PUSH
9131: LD_INT 21
9133: PUSH
9134: LD_INT 22
9136: PUSH
9137: LD_INT 23
9139: PUSH
9140: LD_INT 25
9142: PUSH
9143: LD_INT 26
9145: PUSH
9146: LD_INT 30
9148: PUSH
9149: LD_INT 31
9151: PUSH
9152: LD_INT 32
9154: PUSH
9155: LD_INT 36
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: PUSH
9180: LD_INT 101
9182: PUSH
9183: LD_INT 102
9185: PUSH
9186: LD_INT 103
9188: PUSH
9189: LD_INT 105
9191: PUSH
9192: LD_INT 106
9194: PUSH
9195: LD_INT 108
9197: PUSH
9198: LD_INT 109
9200: PUSH
9201: LD_INT 112
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: ST_TO_ADDR
9218: GO 11341
9220: LD_INT 9
9222: DOUBLE
9223: EQUAL
9224: IFTRUE 9228
9226: GO 9364
9228: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9229: LD_ADDR_VAR 0 1
9233: PUSH
9234: LD_INT 2
9236: PUSH
9237: LD_INT 4
9239: PUSH
9240: LD_INT 5
9242: PUSH
9243: LD_INT 6
9245: PUSH
9246: LD_INT 7
9248: PUSH
9249: LD_INT 8
9251: PUSH
9252: LD_INT 11
9254: PUSH
9255: LD_INT 12
9257: PUSH
9258: LD_INT 15
9260: PUSH
9261: LD_INT 16
9263: PUSH
9264: LD_INT 20
9266: PUSH
9267: LD_INT 21
9269: PUSH
9270: LD_INT 22
9272: PUSH
9273: LD_INT 23
9275: PUSH
9276: LD_INT 25
9278: PUSH
9279: LD_INT 26
9281: PUSH
9282: LD_INT 28
9284: PUSH
9285: LD_INT 30
9287: PUSH
9288: LD_INT 31
9290: PUSH
9291: LD_INT 32
9293: PUSH
9294: LD_INT 36
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 101
9322: PUSH
9323: LD_INT 102
9325: PUSH
9326: LD_INT 103
9328: PUSH
9329: LD_INT 105
9331: PUSH
9332: LD_INT 106
9334: PUSH
9335: LD_INT 108
9337: PUSH
9338: LD_INT 109
9340: PUSH
9341: LD_INT 112
9343: PUSH
9344: LD_INT 114
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: ST_TO_ADDR
9362: GO 11341
9364: LD_INT 10
9366: DOUBLE
9367: EQUAL
9368: IFTRUE 9372
9370: GO 9556
9372: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9373: LD_ADDR_VAR 0 1
9377: PUSH
9378: LD_INT 2
9380: PUSH
9381: LD_INT 4
9383: PUSH
9384: LD_INT 5
9386: PUSH
9387: LD_INT 6
9389: PUSH
9390: LD_INT 7
9392: PUSH
9393: LD_INT 8
9395: PUSH
9396: LD_INT 9
9398: PUSH
9399: LD_INT 10
9401: PUSH
9402: LD_INT 11
9404: PUSH
9405: LD_INT 12
9407: PUSH
9408: LD_INT 13
9410: PUSH
9411: LD_INT 14
9413: PUSH
9414: LD_INT 15
9416: PUSH
9417: LD_INT 16
9419: PUSH
9420: LD_INT 17
9422: PUSH
9423: LD_INT 18
9425: PUSH
9426: LD_INT 19
9428: PUSH
9429: LD_INT 20
9431: PUSH
9432: LD_INT 21
9434: PUSH
9435: LD_INT 22
9437: PUSH
9438: LD_INT 23
9440: PUSH
9441: LD_INT 24
9443: PUSH
9444: LD_INT 25
9446: PUSH
9447: LD_INT 26
9449: PUSH
9450: LD_INT 28
9452: PUSH
9453: LD_INT 30
9455: PUSH
9456: LD_INT 31
9458: PUSH
9459: LD_INT 32
9461: PUSH
9462: LD_INT 36
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: PUSH
9496: LD_INT 101
9498: PUSH
9499: LD_INT 102
9501: PUSH
9502: LD_INT 103
9504: PUSH
9505: LD_INT 104
9507: PUSH
9508: LD_INT 105
9510: PUSH
9511: LD_INT 106
9513: PUSH
9514: LD_INT 107
9516: PUSH
9517: LD_INT 108
9519: PUSH
9520: LD_INT 109
9522: PUSH
9523: LD_INT 110
9525: PUSH
9526: LD_INT 111
9528: PUSH
9529: LD_INT 112
9531: PUSH
9532: LD_INT 114
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: ST_TO_ADDR
9554: GO 11341
9556: LD_INT 11
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9756
9564: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9565: LD_ADDR_VAR 0 1
9569: PUSH
9570: LD_INT 2
9572: PUSH
9573: LD_INT 3
9575: PUSH
9576: LD_INT 4
9578: PUSH
9579: LD_INT 5
9581: PUSH
9582: LD_INT 6
9584: PUSH
9585: LD_INT 7
9587: PUSH
9588: LD_INT 8
9590: PUSH
9591: LD_INT 9
9593: PUSH
9594: LD_INT 10
9596: PUSH
9597: LD_INT 11
9599: PUSH
9600: LD_INT 12
9602: PUSH
9603: LD_INT 13
9605: PUSH
9606: LD_INT 14
9608: PUSH
9609: LD_INT 15
9611: PUSH
9612: LD_INT 16
9614: PUSH
9615: LD_INT 17
9617: PUSH
9618: LD_INT 18
9620: PUSH
9621: LD_INT 19
9623: PUSH
9624: LD_INT 20
9626: PUSH
9627: LD_INT 21
9629: PUSH
9630: LD_INT 22
9632: PUSH
9633: LD_INT 23
9635: PUSH
9636: LD_INT 24
9638: PUSH
9639: LD_INT 25
9641: PUSH
9642: LD_INT 26
9644: PUSH
9645: LD_INT 28
9647: PUSH
9648: LD_INT 30
9650: PUSH
9651: LD_INT 31
9653: PUSH
9654: LD_INT 32
9656: PUSH
9657: LD_INT 34
9659: PUSH
9660: LD_INT 36
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: PUSH
9696: LD_INT 101
9698: PUSH
9699: LD_INT 102
9701: PUSH
9702: LD_INT 103
9704: PUSH
9705: LD_INT 104
9707: PUSH
9708: LD_INT 105
9710: PUSH
9711: LD_INT 106
9713: PUSH
9714: LD_INT 107
9716: PUSH
9717: LD_INT 108
9719: PUSH
9720: LD_INT 109
9722: PUSH
9723: LD_INT 110
9725: PUSH
9726: LD_INT 111
9728: PUSH
9729: LD_INT 112
9731: PUSH
9732: LD_INT 114
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: ST_TO_ADDR
9754: GO 11341
9756: LD_INT 12
9758: DOUBLE
9759: EQUAL
9760: IFTRUE 9764
9762: GO 9972
9764: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9765: LD_ADDR_VAR 0 1
9769: PUSH
9770: LD_INT 1
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: LD_INT 3
9778: PUSH
9779: LD_INT 4
9781: PUSH
9782: LD_INT 5
9784: PUSH
9785: LD_INT 6
9787: PUSH
9788: LD_INT 7
9790: PUSH
9791: LD_INT 8
9793: PUSH
9794: LD_INT 9
9796: PUSH
9797: LD_INT 10
9799: PUSH
9800: LD_INT 11
9802: PUSH
9803: LD_INT 12
9805: PUSH
9806: LD_INT 13
9808: PUSH
9809: LD_INT 14
9811: PUSH
9812: LD_INT 15
9814: PUSH
9815: LD_INT 16
9817: PUSH
9818: LD_INT 17
9820: PUSH
9821: LD_INT 18
9823: PUSH
9824: LD_INT 19
9826: PUSH
9827: LD_INT 20
9829: PUSH
9830: LD_INT 21
9832: PUSH
9833: LD_INT 22
9835: PUSH
9836: LD_INT 23
9838: PUSH
9839: LD_INT 24
9841: PUSH
9842: LD_INT 25
9844: PUSH
9845: LD_INT 26
9847: PUSH
9848: LD_INT 27
9850: PUSH
9851: LD_INT 28
9853: PUSH
9854: LD_INT 30
9856: PUSH
9857: LD_INT 31
9859: PUSH
9860: LD_INT 32
9862: PUSH
9863: LD_INT 33
9865: PUSH
9866: LD_INT 34
9868: PUSH
9869: LD_INT 36
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 101
9910: PUSH
9911: LD_INT 102
9913: PUSH
9914: LD_INT 103
9916: PUSH
9917: LD_INT 104
9919: PUSH
9920: LD_INT 105
9922: PUSH
9923: LD_INT 106
9925: PUSH
9926: LD_INT 107
9928: PUSH
9929: LD_INT 108
9931: PUSH
9932: LD_INT 109
9934: PUSH
9935: LD_INT 110
9937: PUSH
9938: LD_INT 111
9940: PUSH
9941: LD_INT 112
9943: PUSH
9944: LD_INT 113
9946: PUSH
9947: LD_INT 114
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: ST_TO_ADDR
9970: GO 11341
9972: LD_INT 13
9974: DOUBLE
9975: EQUAL
9976: IFTRUE 9980
9978: GO 10176
9980: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
9981: LD_ADDR_VAR 0 1
9985: PUSH
9986: LD_INT 1
9988: PUSH
9989: LD_INT 2
9991: PUSH
9992: LD_INT 3
9994: PUSH
9995: LD_INT 4
9997: PUSH
9998: LD_INT 5
10000: PUSH
10001: LD_INT 8
10003: PUSH
10004: LD_INT 9
10006: PUSH
10007: LD_INT 10
10009: PUSH
10010: LD_INT 11
10012: PUSH
10013: LD_INT 12
10015: PUSH
10016: LD_INT 14
10018: PUSH
10019: LD_INT 15
10021: PUSH
10022: LD_INT 16
10024: PUSH
10025: LD_INT 17
10027: PUSH
10028: LD_INT 18
10030: PUSH
10031: LD_INT 19
10033: PUSH
10034: LD_INT 20
10036: PUSH
10037: LD_INT 21
10039: PUSH
10040: LD_INT 22
10042: PUSH
10043: LD_INT 23
10045: PUSH
10046: LD_INT 24
10048: PUSH
10049: LD_INT 25
10051: PUSH
10052: LD_INT 26
10054: PUSH
10055: LD_INT 27
10057: PUSH
10058: LD_INT 28
10060: PUSH
10061: LD_INT 30
10063: PUSH
10064: LD_INT 31
10066: PUSH
10067: LD_INT 32
10069: PUSH
10070: LD_INT 33
10072: PUSH
10073: LD_INT 34
10075: PUSH
10076: LD_INT 36
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: PUSH
10112: LD_INT 101
10114: PUSH
10115: LD_INT 102
10117: PUSH
10118: LD_INT 103
10120: PUSH
10121: LD_INT 104
10123: PUSH
10124: LD_INT 105
10126: PUSH
10127: LD_INT 106
10129: PUSH
10130: LD_INT 107
10132: PUSH
10133: LD_INT 108
10135: PUSH
10136: LD_INT 109
10138: PUSH
10139: LD_INT 110
10141: PUSH
10142: LD_INT 111
10144: PUSH
10145: LD_INT 112
10147: PUSH
10148: LD_INT 113
10150: PUSH
10151: LD_INT 114
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: ST_TO_ADDR
10174: GO 11341
10176: LD_INT 14
10178: DOUBLE
10179: EQUAL
10180: IFTRUE 10184
10182: GO 10396
10184: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10185: LD_ADDR_VAR 0 1
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: LD_INT 2
10195: PUSH
10196: LD_INT 3
10198: PUSH
10199: LD_INT 4
10201: PUSH
10202: LD_INT 5
10204: PUSH
10205: LD_INT 6
10207: PUSH
10208: LD_INT 7
10210: PUSH
10211: LD_INT 8
10213: PUSH
10214: LD_INT 9
10216: PUSH
10217: LD_INT 10
10219: PUSH
10220: LD_INT 11
10222: PUSH
10223: LD_INT 12
10225: PUSH
10226: LD_INT 13
10228: PUSH
10229: LD_INT 14
10231: PUSH
10232: LD_INT 15
10234: PUSH
10235: LD_INT 16
10237: PUSH
10238: LD_INT 17
10240: PUSH
10241: LD_INT 18
10243: PUSH
10244: LD_INT 19
10246: PUSH
10247: LD_INT 20
10249: PUSH
10250: LD_INT 21
10252: PUSH
10253: LD_INT 22
10255: PUSH
10256: LD_INT 23
10258: PUSH
10259: LD_INT 24
10261: PUSH
10262: LD_INT 25
10264: PUSH
10265: LD_INT 26
10267: PUSH
10268: LD_INT 27
10270: PUSH
10271: LD_INT 28
10273: PUSH
10274: LD_INT 29
10276: PUSH
10277: LD_INT 30
10279: PUSH
10280: LD_INT 31
10282: PUSH
10283: LD_INT 32
10285: PUSH
10286: LD_INT 33
10288: PUSH
10289: LD_INT 34
10291: PUSH
10292: LD_INT 36
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: PUSH
10332: LD_INT 101
10334: PUSH
10335: LD_INT 102
10337: PUSH
10338: LD_INT 103
10340: PUSH
10341: LD_INT 104
10343: PUSH
10344: LD_INT 105
10346: PUSH
10347: LD_INT 106
10349: PUSH
10350: LD_INT 107
10352: PUSH
10353: LD_INT 108
10355: PUSH
10356: LD_INT 109
10358: PUSH
10359: LD_INT 110
10361: PUSH
10362: LD_INT 111
10364: PUSH
10365: LD_INT 112
10367: PUSH
10368: LD_INT 113
10370: PUSH
10371: LD_INT 114
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: ST_TO_ADDR
10394: GO 11341
10396: LD_INT 15
10398: DOUBLE
10399: EQUAL
10400: IFTRUE 10404
10402: GO 10616
10404: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10405: LD_ADDR_VAR 0 1
10409: PUSH
10410: LD_INT 1
10412: PUSH
10413: LD_INT 2
10415: PUSH
10416: LD_INT 3
10418: PUSH
10419: LD_INT 4
10421: PUSH
10422: LD_INT 5
10424: PUSH
10425: LD_INT 6
10427: PUSH
10428: LD_INT 7
10430: PUSH
10431: LD_INT 8
10433: PUSH
10434: LD_INT 9
10436: PUSH
10437: LD_INT 10
10439: PUSH
10440: LD_INT 11
10442: PUSH
10443: LD_INT 12
10445: PUSH
10446: LD_INT 13
10448: PUSH
10449: LD_INT 14
10451: PUSH
10452: LD_INT 15
10454: PUSH
10455: LD_INT 16
10457: PUSH
10458: LD_INT 17
10460: PUSH
10461: LD_INT 18
10463: PUSH
10464: LD_INT 19
10466: PUSH
10467: LD_INT 20
10469: PUSH
10470: LD_INT 21
10472: PUSH
10473: LD_INT 22
10475: PUSH
10476: LD_INT 23
10478: PUSH
10479: LD_INT 24
10481: PUSH
10482: LD_INT 25
10484: PUSH
10485: LD_INT 26
10487: PUSH
10488: LD_INT 27
10490: PUSH
10491: LD_INT 28
10493: PUSH
10494: LD_INT 29
10496: PUSH
10497: LD_INT 30
10499: PUSH
10500: LD_INT 31
10502: PUSH
10503: LD_INT 32
10505: PUSH
10506: LD_INT 33
10508: PUSH
10509: LD_INT 34
10511: PUSH
10512: LD_INT 36
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: PUSH
10552: LD_INT 101
10554: PUSH
10555: LD_INT 102
10557: PUSH
10558: LD_INT 103
10560: PUSH
10561: LD_INT 104
10563: PUSH
10564: LD_INT 105
10566: PUSH
10567: LD_INT 106
10569: PUSH
10570: LD_INT 107
10572: PUSH
10573: LD_INT 108
10575: PUSH
10576: LD_INT 109
10578: PUSH
10579: LD_INT 110
10581: PUSH
10582: LD_INT 111
10584: PUSH
10585: LD_INT 112
10587: PUSH
10588: LD_INT 113
10590: PUSH
10591: LD_INT 114
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: ST_TO_ADDR
10614: GO 11341
10616: LD_INT 16
10618: DOUBLE
10619: EQUAL
10620: IFTRUE 10624
10622: GO 10748
10624: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10625: LD_ADDR_VAR 0 1
10629: PUSH
10630: LD_INT 2
10632: PUSH
10633: LD_INT 4
10635: PUSH
10636: LD_INT 5
10638: PUSH
10639: LD_INT 7
10641: PUSH
10642: LD_INT 11
10644: PUSH
10645: LD_INT 12
10647: PUSH
10648: LD_INT 15
10650: PUSH
10651: LD_INT 16
10653: PUSH
10654: LD_INT 20
10656: PUSH
10657: LD_INT 21
10659: PUSH
10660: LD_INT 22
10662: PUSH
10663: LD_INT 23
10665: PUSH
10666: LD_INT 25
10668: PUSH
10669: LD_INT 26
10671: PUSH
10672: LD_INT 30
10674: PUSH
10675: LD_INT 31
10677: PUSH
10678: LD_INT 32
10680: PUSH
10681: LD_INT 33
10683: PUSH
10684: LD_INT 34
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 101
10710: PUSH
10711: LD_INT 102
10713: PUSH
10714: LD_INT 103
10716: PUSH
10717: LD_INT 106
10719: PUSH
10720: LD_INT 108
10722: PUSH
10723: LD_INT 112
10725: PUSH
10726: LD_INT 113
10728: PUSH
10729: LD_INT 114
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: ST_TO_ADDR
10746: GO 11341
10748: LD_INT 17
10750: DOUBLE
10751: EQUAL
10752: IFTRUE 10756
10754: GO 10968
10756: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10757: LD_ADDR_VAR 0 1
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: LD_INT 2
10767: PUSH
10768: LD_INT 3
10770: PUSH
10771: LD_INT 4
10773: PUSH
10774: LD_INT 5
10776: PUSH
10777: LD_INT 6
10779: PUSH
10780: LD_INT 7
10782: PUSH
10783: LD_INT 8
10785: PUSH
10786: LD_INT 9
10788: PUSH
10789: LD_INT 10
10791: PUSH
10792: LD_INT 11
10794: PUSH
10795: LD_INT 12
10797: PUSH
10798: LD_INT 13
10800: PUSH
10801: LD_INT 14
10803: PUSH
10804: LD_INT 15
10806: PUSH
10807: LD_INT 16
10809: PUSH
10810: LD_INT 17
10812: PUSH
10813: LD_INT 18
10815: PUSH
10816: LD_INT 19
10818: PUSH
10819: LD_INT 20
10821: PUSH
10822: LD_INT 21
10824: PUSH
10825: LD_INT 22
10827: PUSH
10828: LD_INT 23
10830: PUSH
10831: LD_INT 24
10833: PUSH
10834: LD_INT 25
10836: PUSH
10837: LD_INT 26
10839: PUSH
10840: LD_INT 27
10842: PUSH
10843: LD_INT 28
10845: PUSH
10846: LD_INT 29
10848: PUSH
10849: LD_INT 30
10851: PUSH
10852: LD_INT 31
10854: PUSH
10855: LD_INT 32
10857: PUSH
10858: LD_INT 33
10860: PUSH
10861: LD_INT 34
10863: PUSH
10864: LD_INT 36
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: PUSH
10904: LD_INT 101
10906: PUSH
10907: LD_INT 102
10909: PUSH
10910: LD_INT 103
10912: PUSH
10913: LD_INT 104
10915: PUSH
10916: LD_INT 105
10918: PUSH
10919: LD_INT 106
10921: PUSH
10922: LD_INT 107
10924: PUSH
10925: LD_INT 108
10927: PUSH
10928: LD_INT 109
10930: PUSH
10931: LD_INT 110
10933: PUSH
10934: LD_INT 111
10936: PUSH
10937: LD_INT 112
10939: PUSH
10940: LD_INT 113
10942: PUSH
10943: LD_INT 114
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: ST_TO_ADDR
10966: GO 11341
10968: LD_INT 18
10970: DOUBLE
10971: EQUAL
10972: IFTRUE 10976
10974: GO 11112
10976: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
10977: LD_ADDR_VAR 0 1
10981: PUSH
10982: LD_INT 2
10984: PUSH
10985: LD_INT 4
10987: PUSH
10988: LD_INT 5
10990: PUSH
10991: LD_INT 7
10993: PUSH
10994: LD_INT 11
10996: PUSH
10997: LD_INT 12
10999: PUSH
11000: LD_INT 15
11002: PUSH
11003: LD_INT 16
11005: PUSH
11006: LD_INT 20
11008: PUSH
11009: LD_INT 21
11011: PUSH
11012: LD_INT 22
11014: PUSH
11015: LD_INT 23
11017: PUSH
11018: LD_INT 25
11020: PUSH
11021: LD_INT 26
11023: PUSH
11024: LD_INT 30
11026: PUSH
11027: LD_INT 31
11029: PUSH
11030: LD_INT 32
11032: PUSH
11033: LD_INT 33
11035: PUSH
11036: LD_INT 34
11038: PUSH
11039: LD_INT 35
11041: PUSH
11042: LD_INT 36
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 101
11070: PUSH
11071: LD_INT 102
11073: PUSH
11074: LD_INT 103
11076: PUSH
11077: LD_INT 106
11079: PUSH
11080: LD_INT 108
11082: PUSH
11083: LD_INT 112
11085: PUSH
11086: LD_INT 113
11088: PUSH
11089: LD_INT 114
11091: PUSH
11092: LD_INT 115
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: ST_TO_ADDR
11110: GO 11341
11112: LD_INT 19
11114: DOUBLE
11115: EQUAL
11116: IFTRUE 11120
11118: GO 11340
11120: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11121: LD_ADDR_VAR 0 1
11125: PUSH
11126: LD_INT 1
11128: PUSH
11129: LD_INT 2
11131: PUSH
11132: LD_INT 3
11134: PUSH
11135: LD_INT 4
11137: PUSH
11138: LD_INT 5
11140: PUSH
11141: LD_INT 6
11143: PUSH
11144: LD_INT 7
11146: PUSH
11147: LD_INT 8
11149: PUSH
11150: LD_INT 9
11152: PUSH
11153: LD_INT 10
11155: PUSH
11156: LD_INT 11
11158: PUSH
11159: LD_INT 12
11161: PUSH
11162: LD_INT 13
11164: PUSH
11165: LD_INT 14
11167: PUSH
11168: LD_INT 15
11170: PUSH
11171: LD_INT 16
11173: PUSH
11174: LD_INT 17
11176: PUSH
11177: LD_INT 18
11179: PUSH
11180: LD_INT 19
11182: PUSH
11183: LD_INT 20
11185: PUSH
11186: LD_INT 21
11188: PUSH
11189: LD_INT 22
11191: PUSH
11192: LD_INT 23
11194: PUSH
11195: LD_INT 24
11197: PUSH
11198: LD_INT 25
11200: PUSH
11201: LD_INT 26
11203: PUSH
11204: LD_INT 27
11206: PUSH
11207: LD_INT 28
11209: PUSH
11210: LD_INT 29
11212: PUSH
11213: LD_INT 30
11215: PUSH
11216: LD_INT 31
11218: PUSH
11219: LD_INT 32
11221: PUSH
11222: LD_INT 33
11224: PUSH
11225: LD_INT 34
11227: PUSH
11228: LD_INT 35
11230: PUSH
11231: LD_INT 36
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: PUSH
11272: LD_INT 101
11274: PUSH
11275: LD_INT 102
11277: PUSH
11278: LD_INT 103
11280: PUSH
11281: LD_INT 104
11283: PUSH
11284: LD_INT 105
11286: PUSH
11287: LD_INT 106
11289: PUSH
11290: LD_INT 107
11292: PUSH
11293: LD_INT 108
11295: PUSH
11296: LD_INT 109
11298: PUSH
11299: LD_INT 110
11301: PUSH
11302: LD_INT 111
11304: PUSH
11305: LD_INT 112
11307: PUSH
11308: LD_INT 113
11310: PUSH
11311: LD_INT 114
11313: PUSH
11314: LD_INT 115
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: ST_TO_ADDR
11338: GO 11341
11340: POP
// end else
11341: GO 11560
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11343: LD_ADDR_VAR 0 1
11347: PUSH
11348: LD_INT 1
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: LD_INT 3
11356: PUSH
11357: LD_INT 4
11359: PUSH
11360: LD_INT 5
11362: PUSH
11363: LD_INT 6
11365: PUSH
11366: LD_INT 7
11368: PUSH
11369: LD_INT 8
11371: PUSH
11372: LD_INT 9
11374: PUSH
11375: LD_INT 10
11377: PUSH
11378: LD_INT 11
11380: PUSH
11381: LD_INT 12
11383: PUSH
11384: LD_INT 13
11386: PUSH
11387: LD_INT 14
11389: PUSH
11390: LD_INT 15
11392: PUSH
11393: LD_INT 16
11395: PUSH
11396: LD_INT 17
11398: PUSH
11399: LD_INT 18
11401: PUSH
11402: LD_INT 19
11404: PUSH
11405: LD_INT 20
11407: PUSH
11408: LD_INT 21
11410: PUSH
11411: LD_INT 22
11413: PUSH
11414: LD_INT 23
11416: PUSH
11417: LD_INT 24
11419: PUSH
11420: LD_INT 25
11422: PUSH
11423: LD_INT 26
11425: PUSH
11426: LD_INT 27
11428: PUSH
11429: LD_INT 28
11431: PUSH
11432: LD_INT 29
11434: PUSH
11435: LD_INT 30
11437: PUSH
11438: LD_INT 31
11440: PUSH
11441: LD_INT 32
11443: PUSH
11444: LD_INT 33
11446: PUSH
11447: LD_INT 34
11449: PUSH
11450: LD_INT 35
11452: PUSH
11453: LD_INT 36
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 101
11496: PUSH
11497: LD_INT 102
11499: PUSH
11500: LD_INT 103
11502: PUSH
11503: LD_INT 104
11505: PUSH
11506: LD_INT 105
11508: PUSH
11509: LD_INT 106
11511: PUSH
11512: LD_INT 107
11514: PUSH
11515: LD_INT 108
11517: PUSH
11518: LD_INT 109
11520: PUSH
11521: LD_INT 110
11523: PUSH
11524: LD_INT 111
11526: PUSH
11527: LD_INT 112
11529: PUSH
11530: LD_INT 113
11532: PUSH
11533: LD_INT 114
11535: PUSH
11536: LD_INT 115
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: EMPTY
11557: LIST
11558: LIST
11559: ST_TO_ADDR
// if result then
11560: LD_VAR 0 1
11564: IFFALSE 11853
// begin normal :=  ;
11566: LD_ADDR_VAR 0 3
11570: PUSH
11571: LD_STRING 
11573: ST_TO_ADDR
// hardcore :=  ;
11574: LD_ADDR_VAR 0 4
11578: PUSH
11579: LD_STRING 
11581: ST_TO_ADDR
// for i = 1 to normalCounter do
11582: LD_ADDR_VAR 0 5
11586: PUSH
11587: DOUBLE
11588: LD_INT 1
11590: DEC
11591: ST_TO_ADDR
11592: LD_EXP 31
11596: PUSH
11597: FOR_TO
11598: IFFALSE 11699
// begin tmp := 0 ;
11600: LD_ADDR_VAR 0 2
11604: PUSH
11605: LD_STRING 0
11607: ST_TO_ADDR
// if result [ 1 ] then
11608: LD_VAR 0 1
11612: PUSH
11613: LD_INT 1
11615: ARRAY
11616: IFFALSE 11681
// if result [ 1 ] [ 1 ] = i then
11618: LD_VAR 0 1
11622: PUSH
11623: LD_INT 1
11625: ARRAY
11626: PUSH
11627: LD_INT 1
11629: ARRAY
11630: PUSH
11631: LD_VAR 0 5
11635: EQUAL
11636: IFFALSE 11681
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11638: LD_ADDR_VAR 0 1
11642: PUSH
11643: LD_VAR 0 1
11647: PPUSH
11648: LD_INT 1
11650: PPUSH
11651: LD_VAR 0 1
11655: PUSH
11656: LD_INT 1
11658: ARRAY
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: CALL_OW 3
11667: PPUSH
11668: CALL_OW 1
11672: ST_TO_ADDR
// tmp := 1 ;
11673: LD_ADDR_VAR 0 2
11677: PUSH
11678: LD_STRING 1
11680: ST_TO_ADDR
// end ; normal := normal & tmp ;
11681: LD_ADDR_VAR 0 3
11685: PUSH
11686: LD_VAR 0 3
11690: PUSH
11691: LD_VAR 0 2
11695: STR
11696: ST_TO_ADDR
// end ;
11697: GO 11597
11699: POP
11700: POP
// for i = 1 to hardcoreCounter do
11701: LD_ADDR_VAR 0 5
11705: PUSH
11706: DOUBLE
11707: LD_INT 1
11709: DEC
11710: ST_TO_ADDR
11711: LD_EXP 32
11715: PUSH
11716: FOR_TO
11717: IFFALSE 11822
// begin tmp := 0 ;
11719: LD_ADDR_VAR 0 2
11723: PUSH
11724: LD_STRING 0
11726: ST_TO_ADDR
// if result [ 2 ] then
11727: LD_VAR 0 1
11731: PUSH
11732: LD_INT 2
11734: ARRAY
11735: IFFALSE 11804
// if result [ 2 ] [ 1 ] = 100 + i then
11737: LD_VAR 0 1
11741: PUSH
11742: LD_INT 2
11744: ARRAY
11745: PUSH
11746: LD_INT 1
11748: ARRAY
11749: PUSH
11750: LD_INT 100
11752: PUSH
11753: LD_VAR 0 5
11757: PLUS
11758: EQUAL
11759: IFFALSE 11804
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11761: LD_ADDR_VAR 0 1
11765: PUSH
11766: LD_VAR 0 1
11770: PPUSH
11771: LD_INT 2
11773: PPUSH
11774: LD_VAR 0 1
11778: PUSH
11779: LD_INT 2
11781: ARRAY
11782: PPUSH
11783: LD_INT 1
11785: PPUSH
11786: CALL_OW 3
11790: PPUSH
11791: CALL_OW 1
11795: ST_TO_ADDR
// tmp := 1 ;
11796: LD_ADDR_VAR 0 2
11800: PUSH
11801: LD_STRING 1
11803: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11804: LD_ADDR_VAR 0 4
11808: PUSH
11809: LD_VAR 0 4
11813: PUSH
11814: LD_VAR 0 2
11818: STR
11819: ST_TO_ADDR
// end ;
11820: GO 11716
11822: POP
11823: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11824: LD_STRING getStreamItemsFromMission("
11826: PUSH
11827: LD_VAR 0 3
11831: STR
11832: PUSH
11833: LD_STRING ","
11835: STR
11836: PUSH
11837: LD_VAR 0 4
11841: STR
11842: PUSH
11843: LD_STRING ")
11845: STR
11846: PPUSH
11847: CALL_OW 559
// end else
11851: GO 11860
// ToLua ( getStreamItemsFromMission("","") ) ;
11853: LD_STRING getStreamItemsFromMission("","")
11855: PPUSH
11856: CALL_OW 559
// end ;
11860: LD_VAR 0 1
11864: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11865: LD_EXP 30
11869: PUSH
11870: LD_EXP 35
11874: AND
11875: IFFALSE 11999
11877: GO 11879
11879: DISABLE
11880: LD_INT 0
11882: PPUSH
11883: PPUSH
// begin enable ;
11884: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11885: LD_ADDR_VAR 0 2
11889: PUSH
11890: LD_INT 22
11892: PUSH
11893: LD_OWVAR 2
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: LD_INT 2
11904: PUSH
11905: LD_INT 34
11907: PUSH
11908: LD_INT 7
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 34
11917: PUSH
11918: LD_INT 45
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 34
11927: PUSH
11928: LD_INT 28
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 34
11937: PUSH
11938: LD_INT 47
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PPUSH
11956: CALL_OW 69
11960: ST_TO_ADDR
// if not tmp then
11961: LD_VAR 0 2
11965: NOT
11966: IFFALSE 11970
// exit ;
11968: GO 11999
// for i in tmp do
11970: LD_ADDR_VAR 0 1
11974: PUSH
11975: LD_VAR 0 2
11979: PUSH
11980: FOR_IN
11981: IFFALSE 11997
// begin SetLives ( i , 0 ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: LD_INT 0
11990: PPUSH
11991: CALL_OW 234
// end ;
11995: GO 11980
11997: POP
11998: POP
// end ;
11999: PPOPN 2
12001: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12002: LD_EXP 30
12006: PUSH
12007: LD_EXP 36
12011: AND
12012: IFFALSE 12096
12014: GO 12016
12016: DISABLE
12017: LD_INT 0
12019: PPUSH
12020: PPUSH
// begin enable ;
12021: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12022: LD_ADDR_VAR 0 2
12026: PUSH
12027: LD_INT 22
12029: PUSH
12030: LD_OWVAR 2
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 32
12041: PUSH
12042: LD_INT 3
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 69
12057: ST_TO_ADDR
// if not tmp then
12058: LD_VAR 0 2
12062: NOT
12063: IFFALSE 12067
// exit ;
12065: GO 12096
// for i in tmp do
12067: LD_ADDR_VAR 0 1
12071: PUSH
12072: LD_VAR 0 2
12076: PUSH
12077: FOR_IN
12078: IFFALSE 12094
// begin SetLives ( i , 0 ) ;
12080: LD_VAR 0 1
12084: PPUSH
12085: LD_INT 0
12087: PPUSH
12088: CALL_OW 234
// end ;
12092: GO 12077
12094: POP
12095: POP
// end ;
12096: PPOPN 2
12098: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12099: LD_EXP 30
12103: PUSH
12104: LD_EXP 33
12108: AND
12109: IFFALSE 12202
12111: GO 12113
12113: DISABLE
12114: LD_INT 0
12116: PPUSH
// begin enable ;
12117: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12118: LD_ADDR_VAR 0 1
12122: PUSH
12123: LD_INT 22
12125: PUSH
12126: LD_OWVAR 2
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 2
12137: PUSH
12138: LD_INT 25
12140: PUSH
12141: LD_INT 5
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: LD_INT 25
12150: PUSH
12151: LD_INT 9
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 25
12160: PUSH
12161: LD_INT 8
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PPUSH
12178: CALL_OW 69
12182: PUSH
12183: FOR_IN
12184: IFFALSE 12200
// begin SetClass ( i , 1 ) ;
12186: LD_VAR 0 1
12190: PPUSH
12191: LD_INT 1
12193: PPUSH
12194: CALL_OW 336
// end ;
12198: GO 12183
12200: POP
12201: POP
// end ;
12202: PPOPN 1
12204: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12205: LD_EXP 30
12209: PUSH
12210: LD_EXP 34
12214: AND
12215: PUSH
12216: LD_OWVAR 65
12220: PUSH
12221: LD_INT 7
12223: LESS
12224: AND
12225: IFFALSE 12239
12227: GO 12229
12229: DISABLE
// begin enable ;
12230: ENABLE
// game_speed := 7 ;
12231: LD_ADDR_OWVAR 65
12235: PUSH
12236: LD_INT 7
12238: ST_TO_ADDR
// end ;
12239: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12240: LD_EXP 30
12244: PUSH
12245: LD_EXP 37
12249: AND
12250: IFFALSE 12452
12252: GO 12254
12254: DISABLE
12255: LD_INT 0
12257: PPUSH
12258: PPUSH
12259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_INT 81
12267: PUSH
12268: LD_OWVAR 2
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 21
12279: PUSH
12280: LD_INT 1
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PPUSH
12291: CALL_OW 69
12295: ST_TO_ADDR
// if not tmp then
12296: LD_VAR 0 3
12300: NOT
12301: IFFALSE 12305
// exit ;
12303: GO 12452
// if tmp > 5 then
12305: LD_VAR 0 3
12309: PUSH
12310: LD_INT 5
12312: GREATER
12313: IFFALSE 12325
// k := 5 else
12315: LD_ADDR_VAR 0 2
12319: PUSH
12320: LD_INT 5
12322: ST_TO_ADDR
12323: GO 12335
// k := tmp ;
12325: LD_ADDR_VAR 0 2
12329: PUSH
12330: LD_VAR 0 3
12334: ST_TO_ADDR
// for i := 1 to k do
12335: LD_ADDR_VAR 0 1
12339: PUSH
12340: DOUBLE
12341: LD_INT 1
12343: DEC
12344: ST_TO_ADDR
12345: LD_VAR 0 2
12349: PUSH
12350: FOR_TO
12351: IFFALSE 12450
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12353: LD_VAR 0 3
12357: PUSH
12358: LD_VAR 0 1
12362: ARRAY
12363: PPUSH
12364: LD_VAR 0 1
12368: PUSH
12369: LD_INT 4
12371: MOD
12372: PUSH
12373: LD_INT 1
12375: PLUS
12376: PPUSH
12377: CALL_OW 259
12381: PUSH
12382: LD_INT 10
12384: LESS
12385: IFFALSE 12448
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12387: LD_VAR 0 3
12391: PUSH
12392: LD_VAR 0 1
12396: ARRAY
12397: PPUSH
12398: LD_VAR 0 1
12402: PUSH
12403: LD_INT 4
12405: MOD
12406: PUSH
12407: LD_INT 1
12409: PLUS
12410: PPUSH
12411: LD_VAR 0 3
12415: PUSH
12416: LD_VAR 0 1
12420: ARRAY
12421: PPUSH
12422: LD_VAR 0 1
12426: PUSH
12427: LD_INT 4
12429: MOD
12430: PUSH
12431: LD_INT 1
12433: PLUS
12434: PPUSH
12435: CALL_OW 259
12439: PUSH
12440: LD_INT 1
12442: PLUS
12443: PPUSH
12444: CALL_OW 237
12448: GO 12350
12450: POP
12451: POP
// end ;
12452: PPOPN 3
12454: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12455: LD_EXP 30
12459: PUSH
12460: LD_EXP 38
12464: AND
12465: IFFALSE 12485
12467: GO 12469
12469: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12470: LD_INT 4
12472: PPUSH
12473: LD_OWVAR 2
12477: PPUSH
12478: LD_INT 0
12480: PPUSH
12481: CALL_OW 324
12485: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12486: LD_EXP 30
12490: PUSH
12491: LD_EXP 67
12495: AND
12496: IFFALSE 12516
12498: GO 12500
12500: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12501: LD_INT 19
12503: PPUSH
12504: LD_OWVAR 2
12508: PPUSH
12509: LD_INT 0
12511: PPUSH
12512: CALL_OW 324
12516: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12517: LD_EXP 30
12521: PUSH
12522: LD_EXP 39
12526: AND
12527: IFFALSE 12629
12529: GO 12531
12531: DISABLE
12532: LD_INT 0
12534: PPUSH
12535: PPUSH
// begin enable ;
12536: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12537: LD_ADDR_VAR 0 2
12541: PUSH
12542: LD_INT 22
12544: PUSH
12545: LD_OWVAR 2
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 2
12556: PUSH
12557: LD_INT 34
12559: PUSH
12560: LD_INT 11
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PUSH
12567: LD_INT 34
12569: PUSH
12570: LD_INT 30
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PPUSH
12586: CALL_OW 69
12590: ST_TO_ADDR
// if not tmp then
12591: LD_VAR 0 2
12595: NOT
12596: IFFALSE 12600
// exit ;
12598: GO 12629
// for i in tmp do
12600: LD_ADDR_VAR 0 1
12604: PUSH
12605: LD_VAR 0 2
12609: PUSH
12610: FOR_IN
12611: IFFALSE 12627
// begin SetLives ( i , 0 ) ;
12613: LD_VAR 0 1
12617: PPUSH
12618: LD_INT 0
12620: PPUSH
12621: CALL_OW 234
// end ;
12625: GO 12610
12627: POP
12628: POP
// end ;
12629: PPOPN 2
12631: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12632: LD_EXP 30
12636: PUSH
12637: LD_EXP 40
12641: AND
12642: IFFALSE 12662
12644: GO 12646
12646: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12647: LD_INT 32
12649: PPUSH
12650: LD_OWVAR 2
12654: PPUSH
12655: LD_INT 0
12657: PPUSH
12658: CALL_OW 324
12662: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12663: LD_EXP 30
12667: PUSH
12668: LD_EXP 41
12672: AND
12673: IFFALSE 12854
12675: GO 12677
12677: DISABLE
12678: LD_INT 0
12680: PPUSH
12681: PPUSH
12682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12683: LD_ADDR_VAR 0 2
12687: PUSH
12688: LD_INT 22
12690: PUSH
12691: LD_OWVAR 2
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 33
12702: PUSH
12703: LD_INT 3
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PPUSH
12714: CALL_OW 69
12718: ST_TO_ADDR
// if not tmp then
12719: LD_VAR 0 2
12723: NOT
12724: IFFALSE 12728
// exit ;
12726: GO 12854
// side := 0 ;
12728: LD_ADDR_VAR 0 3
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// for i := 1 to 8 do
12736: LD_ADDR_VAR 0 1
12740: PUSH
12741: DOUBLE
12742: LD_INT 1
12744: DEC
12745: ST_TO_ADDR
12746: LD_INT 8
12748: PUSH
12749: FOR_TO
12750: IFFALSE 12798
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12752: LD_OWVAR 2
12756: PUSH
12757: LD_VAR 0 1
12761: NONEQUAL
12762: PUSH
12763: LD_OWVAR 2
12767: PPUSH
12768: LD_VAR 0 1
12772: PPUSH
12773: CALL_OW 81
12777: PUSH
12778: LD_INT 2
12780: EQUAL
12781: AND
12782: IFFALSE 12796
// begin side := i ;
12784: LD_ADDR_VAR 0 3
12788: PUSH
12789: LD_VAR 0 1
12793: ST_TO_ADDR
// break ;
12794: GO 12798
// end ;
12796: GO 12749
12798: POP
12799: POP
// if not side then
12800: LD_VAR 0 3
12804: NOT
12805: IFFALSE 12809
// exit ;
12807: GO 12854
// for i := 1 to tmp do
12809: LD_ADDR_VAR 0 1
12813: PUSH
12814: DOUBLE
12815: LD_INT 1
12817: DEC
12818: ST_TO_ADDR
12819: LD_VAR 0 2
12823: PUSH
12824: FOR_TO
12825: IFFALSE 12852
// if Prob ( 60 ) then
12827: LD_INT 60
12829: PPUSH
12830: CALL_OW 13
12834: IFFALSE 12850
// SetSide ( i , side ) ;
12836: LD_VAR 0 1
12840: PPUSH
12841: LD_VAR 0 3
12845: PPUSH
12846: CALL_OW 235
12850: GO 12824
12852: POP
12853: POP
// end ;
12854: PPOPN 3
12856: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12857: LD_EXP 30
12861: PUSH
12862: LD_EXP 43
12866: AND
12867: IFFALSE 12986
12869: GO 12871
12871: DISABLE
12872: LD_INT 0
12874: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12875: LD_ADDR_VAR 0 1
12879: PUSH
12880: LD_INT 22
12882: PUSH
12883: LD_OWVAR 2
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 21
12894: PUSH
12895: LD_INT 1
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 3
12904: PUSH
12905: LD_INT 23
12907: PUSH
12908: LD_INT 0
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: LIST
12923: PPUSH
12924: CALL_OW 69
12928: PUSH
12929: FOR_IN
12930: IFFALSE 12984
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12932: LD_VAR 0 1
12936: PPUSH
12937: CALL_OW 257
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: LD_INT 2
12947: PUSH
12948: LD_INT 3
12950: PUSH
12951: LD_INT 4
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: IN
12960: IFFALSE 12982
// SetClass ( un , rand ( 1 , 4 ) ) ;
12962: LD_VAR 0 1
12966: PPUSH
12967: LD_INT 1
12969: PPUSH
12970: LD_INT 4
12972: PPUSH
12973: CALL_OW 12
12977: PPUSH
12978: CALL_OW 336
12982: GO 12929
12984: POP
12985: POP
// end ;
12986: PPOPN 1
12988: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12989: LD_EXP 30
12993: PUSH
12994: LD_EXP 42
12998: AND
12999: IFFALSE 13078
13001: GO 13003
13003: DISABLE
13004: LD_INT 0
13006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13007: LD_ADDR_VAR 0 1
13011: PUSH
13012: LD_INT 22
13014: PUSH
13015: LD_OWVAR 2
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 21
13026: PUSH
13027: LD_INT 3
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PPUSH
13038: CALL_OW 69
13042: ST_TO_ADDR
// if not tmp then
13043: LD_VAR 0 1
13047: NOT
13048: IFFALSE 13052
// exit ;
13050: GO 13078
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13052: LD_VAR 0 1
13056: PUSH
13057: LD_INT 1
13059: PPUSH
13060: LD_VAR 0 1
13064: PPUSH
13065: CALL_OW 12
13069: ARRAY
13070: PPUSH
13071: LD_INT 100
13073: PPUSH
13074: CALL_OW 234
// end ;
13078: PPOPN 1
13080: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13081: LD_EXP 30
13085: PUSH
13086: LD_EXP 44
13090: AND
13091: IFFALSE 13189
13093: GO 13095
13095: DISABLE
13096: LD_INT 0
13098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13099: LD_ADDR_VAR 0 1
13103: PUSH
13104: LD_INT 22
13106: PUSH
13107: LD_OWVAR 2
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 21
13118: PUSH
13119: LD_INT 1
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: ST_TO_ADDR
// if not tmp then
13135: LD_VAR 0 1
13139: NOT
13140: IFFALSE 13144
// exit ;
13142: GO 13189
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13144: LD_VAR 0 1
13148: PUSH
13149: LD_INT 1
13151: PPUSH
13152: LD_VAR 0 1
13156: PPUSH
13157: CALL_OW 12
13161: ARRAY
13162: PPUSH
13163: LD_INT 1
13165: PPUSH
13166: LD_INT 4
13168: PPUSH
13169: CALL_OW 12
13173: PPUSH
13174: LD_INT 3000
13176: PPUSH
13177: LD_INT 9000
13179: PPUSH
13180: CALL_OW 12
13184: PPUSH
13185: CALL_OW 492
// end ;
13189: PPOPN 1
13191: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13192: LD_EXP 30
13196: PUSH
13197: LD_EXP 45
13201: AND
13202: IFFALSE 13222
13204: GO 13206
13206: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13207: LD_INT 1
13209: PPUSH
13210: LD_OWVAR 2
13214: PPUSH
13215: LD_INT 0
13217: PPUSH
13218: CALL_OW 324
13222: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13223: LD_EXP 30
13227: PUSH
13228: LD_EXP 46
13232: AND
13233: IFFALSE 13316
13235: GO 13237
13237: DISABLE
13238: LD_INT 0
13240: PPUSH
13241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13242: LD_ADDR_VAR 0 2
13246: PUSH
13247: LD_INT 22
13249: PUSH
13250: LD_OWVAR 2
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 21
13261: PUSH
13262: LD_INT 3
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PPUSH
13273: CALL_OW 69
13277: ST_TO_ADDR
// if not tmp then
13278: LD_VAR 0 2
13282: NOT
13283: IFFALSE 13287
// exit ;
13285: GO 13316
// for i in tmp do
13287: LD_ADDR_VAR 0 1
13291: PUSH
13292: LD_VAR 0 2
13296: PUSH
13297: FOR_IN
13298: IFFALSE 13314
// SetBLevel ( i , 10 ) ;
13300: LD_VAR 0 1
13304: PPUSH
13305: LD_INT 10
13307: PPUSH
13308: CALL_OW 241
13312: GO 13297
13314: POP
13315: POP
// end ;
13316: PPOPN 2
13318: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13319: LD_EXP 30
13323: PUSH
13324: LD_EXP 47
13328: AND
13329: IFFALSE 13440
13331: GO 13333
13333: DISABLE
13334: LD_INT 0
13336: PPUSH
13337: PPUSH
13338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13339: LD_ADDR_VAR 0 3
13343: PUSH
13344: LD_INT 22
13346: PUSH
13347: LD_OWVAR 2
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 25
13358: PUSH
13359: LD_INT 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PPUSH
13370: CALL_OW 69
13374: ST_TO_ADDR
// if not tmp then
13375: LD_VAR 0 3
13379: NOT
13380: IFFALSE 13384
// exit ;
13382: GO 13440
// un := tmp [ rand ( 1 , tmp ) ] ;
13384: LD_ADDR_VAR 0 2
13388: PUSH
13389: LD_VAR 0 3
13393: PUSH
13394: LD_INT 1
13396: PPUSH
13397: LD_VAR 0 3
13401: PPUSH
13402: CALL_OW 12
13406: ARRAY
13407: ST_TO_ADDR
// if Crawls ( un ) then
13408: LD_VAR 0 2
13412: PPUSH
13413: CALL_OW 318
13417: IFFALSE 13428
// ComWalk ( un ) ;
13419: LD_VAR 0 2
13423: PPUSH
13424: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13428: LD_VAR 0 2
13432: PPUSH
13433: LD_INT 5
13435: PPUSH
13436: CALL_OW 336
// end ;
13440: PPOPN 3
13442: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13443: LD_EXP 30
13447: PUSH
13448: LD_EXP 48
13452: AND
13453: PUSH
13454: LD_OWVAR 67
13458: PUSH
13459: LD_INT 3
13461: LESS
13462: AND
13463: IFFALSE 13482
13465: GO 13467
13467: DISABLE
// Difficulty := Difficulty + 1 ;
13468: LD_ADDR_OWVAR 67
13472: PUSH
13473: LD_OWVAR 67
13477: PUSH
13478: LD_INT 1
13480: PLUS
13481: ST_TO_ADDR
13482: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13483: LD_EXP 30
13487: PUSH
13488: LD_EXP 49
13492: AND
13493: IFFALSE 13596
13495: GO 13497
13497: DISABLE
13498: LD_INT 0
13500: PPUSH
// begin for i := 1 to 5 do
13501: LD_ADDR_VAR 0 1
13505: PUSH
13506: DOUBLE
13507: LD_INT 1
13509: DEC
13510: ST_TO_ADDR
13511: LD_INT 5
13513: PUSH
13514: FOR_TO
13515: IFFALSE 13594
// begin uc_nation := nation_nature ;
13517: LD_ADDR_OWVAR 21
13521: PUSH
13522: LD_INT 0
13524: ST_TO_ADDR
// uc_side := 0 ;
13525: LD_ADDR_OWVAR 20
13529: PUSH
13530: LD_INT 0
13532: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13533: LD_ADDR_OWVAR 29
13537: PUSH
13538: LD_INT 12
13540: PUSH
13541: LD_INT 12
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: ST_TO_ADDR
// hc_agressivity := 20 ;
13548: LD_ADDR_OWVAR 35
13552: PUSH
13553: LD_INT 20
13555: ST_TO_ADDR
// hc_class := class_tiger ;
13556: LD_ADDR_OWVAR 28
13560: PUSH
13561: LD_INT 14
13563: ST_TO_ADDR
// hc_gallery :=  ;
13564: LD_ADDR_OWVAR 33
13568: PUSH
13569: LD_STRING 
13571: ST_TO_ADDR
// hc_name :=  ;
13572: LD_ADDR_OWVAR 26
13576: PUSH
13577: LD_STRING 
13579: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13580: CALL_OW 44
13584: PPUSH
13585: LD_INT 0
13587: PPUSH
13588: CALL_OW 51
// end ;
13592: GO 13514
13594: POP
13595: POP
// end ;
13596: PPOPN 1
13598: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13599: LD_EXP 30
13603: PUSH
13604: LD_EXP 50
13608: AND
13609: IFFALSE 13618
13611: GO 13613
13613: DISABLE
// StreamSibBomb ;
13614: CALL 13619 0 0
13618: END
// export function StreamSibBomb ; var i , x , y ; begin
13619: LD_INT 0
13621: PPUSH
13622: PPUSH
13623: PPUSH
13624: PPUSH
// result := false ;
13625: LD_ADDR_VAR 0 1
13629: PUSH
13630: LD_INT 0
13632: ST_TO_ADDR
// for i := 1 to 16 do
13633: LD_ADDR_VAR 0 2
13637: PUSH
13638: DOUBLE
13639: LD_INT 1
13641: DEC
13642: ST_TO_ADDR
13643: LD_INT 16
13645: PUSH
13646: FOR_TO
13647: IFFALSE 13846
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13649: LD_ADDR_VAR 0 3
13653: PUSH
13654: LD_INT 10
13656: PUSH
13657: LD_INT 20
13659: PUSH
13660: LD_INT 30
13662: PUSH
13663: LD_INT 40
13665: PUSH
13666: LD_INT 50
13668: PUSH
13669: LD_INT 60
13671: PUSH
13672: LD_INT 70
13674: PUSH
13675: LD_INT 80
13677: PUSH
13678: LD_INT 90
13680: PUSH
13681: LD_INT 100
13683: PUSH
13684: LD_INT 110
13686: PUSH
13687: LD_INT 120
13689: PUSH
13690: LD_INT 130
13692: PUSH
13693: LD_INT 140
13695: PUSH
13696: LD_INT 150
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 1
13718: PPUSH
13719: LD_INT 15
13721: PPUSH
13722: CALL_OW 12
13726: ARRAY
13727: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13728: LD_ADDR_VAR 0 4
13732: PUSH
13733: LD_INT 10
13735: PUSH
13736: LD_INT 20
13738: PUSH
13739: LD_INT 30
13741: PUSH
13742: LD_INT 40
13744: PUSH
13745: LD_INT 50
13747: PUSH
13748: LD_INT 60
13750: PUSH
13751: LD_INT 70
13753: PUSH
13754: LD_INT 80
13756: PUSH
13757: LD_INT 90
13759: PUSH
13760: LD_INT 100
13762: PUSH
13763: LD_INT 110
13765: PUSH
13766: LD_INT 120
13768: PUSH
13769: LD_INT 130
13771: PUSH
13772: LD_INT 140
13774: PUSH
13775: LD_INT 150
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: PUSH
13795: LD_INT 1
13797: PPUSH
13798: LD_INT 15
13800: PPUSH
13801: CALL_OW 12
13805: ARRAY
13806: ST_TO_ADDR
// if ValidHex ( x , y ) then
13807: LD_VAR 0 3
13811: PPUSH
13812: LD_VAR 0 4
13816: PPUSH
13817: CALL_OW 488
13821: IFFALSE 13844
// begin result := [ x , y ] ;
13823: LD_ADDR_VAR 0 1
13827: PUSH
13828: LD_VAR 0 3
13832: PUSH
13833: LD_VAR 0 4
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: ST_TO_ADDR
// break ;
13842: GO 13846
// end ; end ;
13844: GO 13646
13846: POP
13847: POP
// if result then
13848: LD_VAR 0 1
13852: IFFALSE 13912
// begin ToLua ( playSibBomb() ) ;
13854: LD_STRING playSibBomb()
13856: PPUSH
13857: CALL_OW 559
// wait ( 0 0$14 ) ;
13861: LD_INT 490
13863: PPUSH
13864: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13868: LD_VAR 0 1
13872: PUSH
13873: LD_INT 1
13875: ARRAY
13876: PPUSH
13877: LD_VAR 0 1
13881: PUSH
13882: LD_INT 2
13884: ARRAY
13885: PPUSH
13886: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13890: LD_VAR 0 1
13894: PUSH
13895: LD_INT 1
13897: ARRAY
13898: PPUSH
13899: LD_VAR 0 1
13903: PUSH
13904: LD_INT 2
13906: ARRAY
13907: PPUSH
13908: CALL_OW 429
// end ; end ;
13912: LD_VAR 0 1
13916: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13917: LD_EXP 30
13921: PUSH
13922: LD_EXP 52
13926: AND
13927: IFFALSE 13939
13929: GO 13931
13931: DISABLE
// YouLost (  ) ;
13932: LD_STRING 
13934: PPUSH
13935: CALL_OW 104
13939: END
// every 0 0$1 trigger StreamModeActive and sFog do
13940: LD_EXP 30
13944: PUSH
13945: LD_EXP 51
13949: AND
13950: IFFALSE 13964
13952: GO 13954
13954: DISABLE
// FogOff ( your_side ) ;
13955: LD_OWVAR 2
13959: PPUSH
13960: CALL_OW 344
13964: END
// every 0 0$1 trigger StreamModeActive and sSun do
13965: LD_EXP 30
13969: PUSH
13970: LD_EXP 53
13974: AND
13975: IFFALSE 14003
13977: GO 13979
13979: DISABLE
// begin solar_recharge_percent := 0 ;
13980: LD_ADDR_OWVAR 79
13984: PUSH
13985: LD_INT 0
13987: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13988: LD_INT 10500
13990: PPUSH
13991: CALL_OW 67
// solar_recharge_percent := 100 ;
13995: LD_ADDR_OWVAR 79
13999: PUSH
14000: LD_INT 100
14002: ST_TO_ADDR
// end ;
14003: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14004: LD_EXP 30
14008: PUSH
14009: LD_EXP 54
14013: AND
14014: IFFALSE 14253
14016: GO 14018
14018: DISABLE
14019: LD_INT 0
14021: PPUSH
14022: PPUSH
14023: PPUSH
// begin tmp := [ ] ;
14024: LD_ADDR_VAR 0 3
14028: PUSH
14029: EMPTY
14030: ST_TO_ADDR
// for i := 1 to 6 do
14031: LD_ADDR_VAR 0 1
14035: PUSH
14036: DOUBLE
14037: LD_INT 1
14039: DEC
14040: ST_TO_ADDR
14041: LD_INT 6
14043: PUSH
14044: FOR_TO
14045: IFFALSE 14150
// begin uc_nation := nation_nature ;
14047: LD_ADDR_OWVAR 21
14051: PUSH
14052: LD_INT 0
14054: ST_TO_ADDR
// uc_side := 0 ;
14055: LD_ADDR_OWVAR 20
14059: PUSH
14060: LD_INT 0
14062: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14063: LD_ADDR_OWVAR 29
14067: PUSH
14068: LD_INT 12
14070: PUSH
14071: LD_INT 12
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: ST_TO_ADDR
// hc_agressivity := 20 ;
14078: LD_ADDR_OWVAR 35
14082: PUSH
14083: LD_INT 20
14085: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14086: LD_ADDR_OWVAR 28
14090: PUSH
14091: LD_INT 17
14093: ST_TO_ADDR
// hc_gallery :=  ;
14094: LD_ADDR_OWVAR 33
14098: PUSH
14099: LD_STRING 
14101: ST_TO_ADDR
// hc_name :=  ;
14102: LD_ADDR_OWVAR 26
14106: PUSH
14107: LD_STRING 
14109: ST_TO_ADDR
// un := CreateHuman ;
14110: LD_ADDR_VAR 0 2
14114: PUSH
14115: CALL_OW 44
14119: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14120: LD_VAR 0 2
14124: PPUSH
14125: LD_INT 1
14127: PPUSH
14128: CALL_OW 51
// tmp := tmp ^ un ;
14132: LD_ADDR_VAR 0 3
14136: PUSH
14137: LD_VAR 0 3
14141: PUSH
14142: LD_VAR 0 2
14146: ADD
14147: ST_TO_ADDR
// end ;
14148: GO 14044
14150: POP
14151: POP
// repeat wait ( 0 0$1 ) ;
14152: LD_INT 35
14154: PPUSH
14155: CALL_OW 67
// for un in tmp do
14159: LD_ADDR_VAR 0 2
14163: PUSH
14164: LD_VAR 0 3
14168: PUSH
14169: FOR_IN
14170: IFFALSE 14244
// begin if IsDead ( un ) then
14172: LD_VAR 0 2
14176: PPUSH
14177: CALL_OW 301
14181: IFFALSE 14201
// begin tmp := tmp diff un ;
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: LD_VAR 0 3
14192: PUSH
14193: LD_VAR 0 2
14197: DIFF
14198: ST_TO_ADDR
// continue ;
14199: GO 14169
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14201: LD_VAR 0 2
14205: PPUSH
14206: LD_INT 3
14208: PUSH
14209: LD_INT 22
14211: PUSH
14212: LD_INT 0
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 69
14227: PPUSH
14228: LD_VAR 0 2
14232: PPUSH
14233: CALL_OW 74
14237: PPUSH
14238: CALL_OW 115
// end ;
14242: GO 14169
14244: POP
14245: POP
// until not tmp ;
14246: LD_VAR 0 3
14250: NOT
14251: IFFALSE 14152
// end ;
14253: PPOPN 3
14255: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14256: LD_EXP 30
14260: PUSH
14261: LD_EXP 55
14265: AND
14266: IFFALSE 14320
14268: GO 14270
14270: DISABLE
// begin ToLua ( displayTroll(); ) ;
14271: LD_STRING displayTroll();
14273: PPUSH
14274: CALL_OW 559
// wait ( 3 3$00 ) ;
14278: LD_INT 6300
14280: PPUSH
14281: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14285: LD_STRING hideTroll();
14287: PPUSH
14288: CALL_OW 559
// wait ( 1 1$00 ) ;
14292: LD_INT 2100
14294: PPUSH
14295: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14299: LD_STRING displayTroll();
14301: PPUSH
14302: CALL_OW 559
// wait ( 1 1$00 ) ;
14306: LD_INT 2100
14308: PPUSH
14309: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14313: LD_STRING hideTroll();
14315: PPUSH
14316: CALL_OW 559
// end ;
14320: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14321: LD_EXP 30
14325: PUSH
14326: LD_EXP 56
14330: AND
14331: IFFALSE 14394
14333: GO 14335
14335: DISABLE
14336: LD_INT 0
14338: PPUSH
// begin p := 0 ;
14339: LD_ADDR_VAR 0 1
14343: PUSH
14344: LD_INT 0
14346: ST_TO_ADDR
// repeat game_speed := 1 ;
14347: LD_ADDR_OWVAR 65
14351: PUSH
14352: LD_INT 1
14354: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14355: LD_INT 35
14357: PPUSH
14358: CALL_OW 67
// p := p + 1 ;
14362: LD_ADDR_VAR 0 1
14366: PUSH
14367: LD_VAR 0 1
14371: PUSH
14372: LD_INT 1
14374: PLUS
14375: ST_TO_ADDR
// until p >= 60 ;
14376: LD_VAR 0 1
14380: PUSH
14381: LD_INT 60
14383: GREATEREQUAL
14384: IFFALSE 14347
// game_speed := 4 ;
14386: LD_ADDR_OWVAR 65
14390: PUSH
14391: LD_INT 4
14393: ST_TO_ADDR
// end ;
14394: PPOPN 1
14396: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14397: LD_EXP 30
14401: PUSH
14402: LD_EXP 57
14406: AND
14407: IFFALSE 14553
14409: GO 14411
14411: DISABLE
14412: LD_INT 0
14414: PPUSH
14415: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14416: LD_ADDR_VAR 0 1
14420: PUSH
14421: LD_INT 22
14423: PUSH
14424: LD_OWVAR 2
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 2
14435: PUSH
14436: LD_INT 30
14438: PUSH
14439: LD_INT 0
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: LD_INT 30
14448: PUSH
14449: LD_INT 1
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: LIST
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PPUSH
14465: CALL_OW 69
14469: ST_TO_ADDR
// if not depot then
14470: LD_VAR 0 1
14474: NOT
14475: IFFALSE 14479
// exit ;
14477: GO 14553
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14479: LD_ADDR_VAR 0 2
14483: PUSH
14484: LD_VAR 0 1
14488: PUSH
14489: LD_INT 1
14491: PPUSH
14492: LD_VAR 0 1
14496: PPUSH
14497: CALL_OW 12
14501: ARRAY
14502: PPUSH
14503: CALL_OW 274
14507: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14508: LD_VAR 0 2
14512: PPUSH
14513: LD_INT 1
14515: PPUSH
14516: LD_INT 0
14518: PPUSH
14519: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14523: LD_VAR 0 2
14527: PPUSH
14528: LD_INT 2
14530: PPUSH
14531: LD_INT 0
14533: PPUSH
14534: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14538: LD_VAR 0 2
14542: PPUSH
14543: LD_INT 3
14545: PPUSH
14546: LD_INT 0
14548: PPUSH
14549: CALL_OW 277
// end ;
14553: PPOPN 2
14555: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14556: LD_EXP 30
14560: PUSH
14561: LD_EXP 58
14565: AND
14566: IFFALSE 14663
14568: GO 14570
14570: DISABLE
14571: LD_INT 0
14573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14574: LD_ADDR_VAR 0 1
14578: PUSH
14579: LD_INT 22
14581: PUSH
14582: LD_OWVAR 2
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: PUSH
14591: LD_INT 21
14593: PUSH
14594: LD_INT 1
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PUSH
14601: LD_INT 3
14603: PUSH
14604: LD_INT 23
14606: PUSH
14607: LD_INT 0
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: PPUSH
14623: CALL_OW 69
14627: ST_TO_ADDR
// if not tmp then
14628: LD_VAR 0 1
14632: NOT
14633: IFFALSE 14637
// exit ;
14635: GO 14663
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14637: LD_VAR 0 1
14641: PUSH
14642: LD_INT 1
14644: PPUSH
14645: LD_VAR 0 1
14649: PPUSH
14650: CALL_OW 12
14654: ARRAY
14655: PPUSH
14656: LD_INT 200
14658: PPUSH
14659: CALL_OW 234
// end ;
14663: PPOPN 1
14665: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14666: LD_EXP 30
14670: PUSH
14671: LD_EXP 59
14675: AND
14676: IFFALSE 14755
14678: GO 14680
14680: DISABLE
14681: LD_INT 0
14683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14684: LD_ADDR_VAR 0 1
14688: PUSH
14689: LD_INT 22
14691: PUSH
14692: LD_OWVAR 2
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 21
14703: PUSH
14704: LD_INT 2
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 69
14719: ST_TO_ADDR
// if not tmp then
14720: LD_VAR 0 1
14724: NOT
14725: IFFALSE 14729
// exit ;
14727: GO 14755
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14729: LD_VAR 0 1
14733: PUSH
14734: LD_INT 1
14736: PPUSH
14737: LD_VAR 0 1
14741: PPUSH
14742: CALL_OW 12
14746: ARRAY
14747: PPUSH
14748: LD_INT 60
14750: PPUSH
14751: CALL_OW 234
// end ;
14755: PPOPN 1
14757: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14758: LD_EXP 30
14762: PUSH
14763: LD_EXP 60
14767: AND
14768: IFFALSE 14867
14770: GO 14772
14772: DISABLE
14773: LD_INT 0
14775: PPUSH
14776: PPUSH
// begin enable ;
14777: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14778: LD_ADDR_VAR 0 1
14782: PUSH
14783: LD_INT 22
14785: PUSH
14786: LD_OWVAR 2
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 61
14797: PUSH
14798: EMPTY
14799: LIST
14800: PUSH
14801: LD_INT 33
14803: PUSH
14804: LD_INT 2
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: PPUSH
14816: CALL_OW 69
14820: ST_TO_ADDR
// if not tmp then
14821: LD_VAR 0 1
14825: NOT
14826: IFFALSE 14830
// exit ;
14828: GO 14867
// for i in tmp do
14830: LD_ADDR_VAR 0 2
14834: PUSH
14835: LD_VAR 0 1
14839: PUSH
14840: FOR_IN
14841: IFFALSE 14865
// if IsControledBy ( i ) then
14843: LD_VAR 0 2
14847: PPUSH
14848: CALL_OW 312
14852: IFFALSE 14863
// ComUnlink ( i ) ;
14854: LD_VAR 0 2
14858: PPUSH
14859: CALL_OW 136
14863: GO 14840
14865: POP
14866: POP
// end ;
14867: PPOPN 2
14869: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14870: LD_EXP 30
14874: PUSH
14875: LD_EXP 61
14879: AND
14880: IFFALSE 15020
14882: GO 14884
14884: DISABLE
14885: LD_INT 0
14887: PPUSH
14888: PPUSH
// begin ToLua ( displayPowell(); ) ;
14889: LD_STRING displayPowell();
14891: PPUSH
14892: CALL_OW 559
// uc_side := 0 ;
14896: LD_ADDR_OWVAR 20
14900: PUSH
14901: LD_INT 0
14903: ST_TO_ADDR
// uc_nation := 2 ;
14904: LD_ADDR_OWVAR 21
14908: PUSH
14909: LD_INT 2
14911: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14912: LD_ADDR_OWVAR 37
14916: PUSH
14917: LD_INT 14
14919: ST_TO_ADDR
// vc_engine := engine_siberite ;
14920: LD_ADDR_OWVAR 39
14924: PUSH
14925: LD_INT 3
14927: ST_TO_ADDR
// vc_control := control_apeman ;
14928: LD_ADDR_OWVAR 38
14932: PUSH
14933: LD_INT 5
14935: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14936: LD_ADDR_OWVAR 40
14940: PUSH
14941: LD_INT 29
14943: ST_TO_ADDR
// un := CreateVehicle ;
14944: LD_ADDR_VAR 0 2
14948: PUSH
14949: CALL_OW 45
14953: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14954: LD_VAR 0 2
14958: PPUSH
14959: LD_INT 1
14961: PPUSH
14962: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14966: LD_INT 35
14968: PPUSH
14969: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14973: LD_VAR 0 2
14977: PPUSH
14978: LD_INT 22
14980: PUSH
14981: LD_OWVAR 2
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PPUSH
14990: CALL_OW 69
14994: PPUSH
14995: LD_VAR 0 2
14999: PPUSH
15000: CALL_OW 74
15004: PPUSH
15005: CALL_OW 115
// until IsDead ( un ) ;
15009: LD_VAR 0 2
15013: PPUSH
15014: CALL_OW 301
15018: IFFALSE 14966
// end ;
15020: PPOPN 2
15022: END
// every 0 0$1 trigger StreamModeActive and sStu do
15023: LD_EXP 30
15027: PUSH
15028: LD_EXP 69
15032: AND
15033: IFFALSE 15049
15035: GO 15037
15037: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15038: LD_STRING displayStucuk();
15040: PPUSH
15041: CALL_OW 559
// ResetFog ;
15045: CALL_OW 335
// end ;
15049: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15050: LD_EXP 30
15054: PUSH
15055: LD_EXP 62
15059: AND
15060: IFFALSE 15201
15062: GO 15064
15064: DISABLE
15065: LD_INT 0
15067: PPUSH
15068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15069: LD_ADDR_VAR 0 2
15073: PUSH
15074: LD_INT 22
15076: PUSH
15077: LD_OWVAR 2
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 21
15088: PUSH
15089: LD_INT 1
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PPUSH
15100: CALL_OW 69
15104: ST_TO_ADDR
// if not tmp then
15105: LD_VAR 0 2
15109: NOT
15110: IFFALSE 15114
// exit ;
15112: GO 15201
// un := tmp [ rand ( 1 , tmp ) ] ;
15114: LD_ADDR_VAR 0 1
15118: PUSH
15119: LD_VAR 0 2
15123: PUSH
15124: LD_INT 1
15126: PPUSH
15127: LD_VAR 0 2
15131: PPUSH
15132: CALL_OW 12
15136: ARRAY
15137: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15138: LD_VAR 0 1
15142: PPUSH
15143: LD_INT 0
15145: PPUSH
15146: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15150: LD_VAR 0 1
15154: PPUSH
15155: LD_OWVAR 3
15159: PUSH
15160: LD_VAR 0 1
15164: DIFF
15165: PPUSH
15166: LD_VAR 0 1
15170: PPUSH
15171: CALL_OW 74
15175: PPUSH
15176: CALL_OW 115
// wait ( 0 0$20 ) ;
15180: LD_INT 700
15182: PPUSH
15183: CALL_OW 67
// SetSide ( un , your_side ) ;
15187: LD_VAR 0 1
15191: PPUSH
15192: LD_OWVAR 2
15196: PPUSH
15197: CALL_OW 235
// end ;
15201: PPOPN 2
15203: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15204: LD_EXP 30
15208: PUSH
15209: LD_EXP 63
15213: AND
15214: IFFALSE 15320
15216: GO 15218
15218: DISABLE
15219: LD_INT 0
15221: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15222: LD_ADDR_VAR 0 1
15226: PUSH
15227: LD_INT 22
15229: PUSH
15230: LD_OWVAR 2
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: LD_INT 2
15241: PUSH
15242: LD_INT 30
15244: PUSH
15245: LD_INT 0
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: LD_INT 30
15254: PUSH
15255: LD_INT 1
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: LIST
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PPUSH
15271: CALL_OW 69
15275: ST_TO_ADDR
// if not depot then
15276: LD_VAR 0 1
15280: NOT
15281: IFFALSE 15285
// exit ;
15283: GO 15320
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15285: LD_VAR 0 1
15289: PUSH
15290: LD_INT 1
15292: ARRAY
15293: PPUSH
15294: CALL_OW 250
15298: PPUSH
15299: LD_VAR 0 1
15303: PUSH
15304: LD_INT 1
15306: ARRAY
15307: PPUSH
15308: CALL_OW 251
15312: PPUSH
15313: LD_INT 70
15315: PPUSH
15316: CALL_OW 495
// end ;
15320: PPOPN 1
15322: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15323: LD_EXP 30
15327: PUSH
15328: LD_EXP 64
15332: AND
15333: IFFALSE 15544
15335: GO 15337
15337: DISABLE
15338: LD_INT 0
15340: PPUSH
15341: PPUSH
15342: PPUSH
15343: PPUSH
15344: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15345: LD_ADDR_VAR 0 5
15349: PUSH
15350: LD_INT 22
15352: PUSH
15353: LD_OWVAR 2
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 21
15364: PUSH
15365: LD_INT 1
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PPUSH
15376: CALL_OW 69
15380: ST_TO_ADDR
// if not tmp then
15381: LD_VAR 0 5
15385: NOT
15386: IFFALSE 15390
// exit ;
15388: GO 15544
// for i in tmp do
15390: LD_ADDR_VAR 0 1
15394: PUSH
15395: LD_VAR 0 5
15399: PUSH
15400: FOR_IN
15401: IFFALSE 15542
// begin d := rand ( 0 , 5 ) ;
15403: LD_ADDR_VAR 0 4
15407: PUSH
15408: LD_INT 0
15410: PPUSH
15411: LD_INT 5
15413: PPUSH
15414: CALL_OW 12
15418: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15419: LD_ADDR_VAR 0 2
15423: PUSH
15424: LD_VAR 0 1
15428: PPUSH
15429: CALL_OW 250
15433: PPUSH
15434: LD_VAR 0 4
15438: PPUSH
15439: LD_INT 3
15441: PPUSH
15442: LD_INT 12
15444: PPUSH
15445: CALL_OW 12
15449: PPUSH
15450: CALL_OW 272
15454: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15455: LD_ADDR_VAR 0 3
15459: PUSH
15460: LD_VAR 0 1
15464: PPUSH
15465: CALL_OW 251
15469: PPUSH
15470: LD_VAR 0 4
15474: PPUSH
15475: LD_INT 3
15477: PPUSH
15478: LD_INT 12
15480: PPUSH
15481: CALL_OW 12
15485: PPUSH
15486: CALL_OW 273
15490: ST_TO_ADDR
// if ValidHex ( x , y ) then
15491: LD_VAR 0 2
15495: PPUSH
15496: LD_VAR 0 3
15500: PPUSH
15501: CALL_OW 488
15505: IFFALSE 15540
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15507: LD_VAR 0 1
15511: PPUSH
15512: LD_VAR 0 2
15516: PPUSH
15517: LD_VAR 0 3
15521: PPUSH
15522: LD_INT 3
15524: PPUSH
15525: LD_INT 6
15527: PPUSH
15528: CALL_OW 12
15532: PPUSH
15533: LD_INT 1
15535: PPUSH
15536: CALL_OW 483
// end ;
15540: GO 15400
15542: POP
15543: POP
// end ;
15544: PPOPN 5
15546: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15547: LD_EXP 30
15551: PUSH
15552: LD_EXP 65
15556: AND
15557: IFFALSE 15651
15559: GO 15561
15561: DISABLE
15562: LD_INT 0
15564: PPUSH
15565: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15566: LD_ADDR_VAR 0 2
15570: PUSH
15571: LD_INT 22
15573: PUSH
15574: LD_OWVAR 2
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 32
15585: PUSH
15586: LD_INT 1
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 21
15595: PUSH
15596: LD_INT 2
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: LIST
15607: PPUSH
15608: CALL_OW 69
15612: ST_TO_ADDR
// if not tmp then
15613: LD_VAR 0 2
15617: NOT
15618: IFFALSE 15622
// exit ;
15620: GO 15651
// for i in tmp do
15622: LD_ADDR_VAR 0 1
15626: PUSH
15627: LD_VAR 0 2
15631: PUSH
15632: FOR_IN
15633: IFFALSE 15649
// SetFuel ( i , 0 ) ;
15635: LD_VAR 0 1
15639: PPUSH
15640: LD_INT 0
15642: PPUSH
15643: CALL_OW 240
15647: GO 15632
15649: POP
15650: POP
// end ;
15651: PPOPN 2
15653: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15654: LD_EXP 30
15658: PUSH
15659: LD_EXP 66
15663: AND
15664: IFFALSE 15730
15666: GO 15668
15668: DISABLE
15669: LD_INT 0
15671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15672: LD_ADDR_VAR 0 1
15676: PUSH
15677: LD_INT 22
15679: PUSH
15680: LD_OWVAR 2
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 30
15691: PUSH
15692: LD_INT 29
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PPUSH
15703: CALL_OW 69
15707: ST_TO_ADDR
// if not tmp then
15708: LD_VAR 0 1
15712: NOT
15713: IFFALSE 15717
// exit ;
15715: GO 15730
// DestroyUnit ( tmp [ 1 ] ) ;
15717: LD_VAR 0 1
15721: PUSH
15722: LD_INT 1
15724: ARRAY
15725: PPUSH
15726: CALL_OW 65
// end ;
15730: PPOPN 1
15732: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15733: LD_EXP 30
15737: PUSH
15738: LD_EXP 68
15742: AND
15743: IFFALSE 15872
15745: GO 15747
15747: DISABLE
15748: LD_INT 0
15750: PPUSH
// begin uc_side := 0 ;
15751: LD_ADDR_OWVAR 20
15755: PUSH
15756: LD_INT 0
15758: ST_TO_ADDR
// uc_nation := nation_arabian ;
15759: LD_ADDR_OWVAR 21
15763: PUSH
15764: LD_INT 2
15766: ST_TO_ADDR
// hc_gallery :=  ;
15767: LD_ADDR_OWVAR 33
15771: PUSH
15772: LD_STRING 
15774: ST_TO_ADDR
// hc_name :=  ;
15775: LD_ADDR_OWVAR 26
15779: PUSH
15780: LD_STRING 
15782: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15783: LD_INT 1
15785: PPUSH
15786: LD_INT 11
15788: PPUSH
15789: LD_INT 10
15791: PPUSH
15792: CALL_OW 380
// un := CreateHuman ;
15796: LD_ADDR_VAR 0 1
15800: PUSH
15801: CALL_OW 44
15805: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15806: LD_VAR 0 1
15810: PPUSH
15811: LD_INT 1
15813: PPUSH
15814: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15818: LD_INT 35
15820: PPUSH
15821: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15825: LD_VAR 0 1
15829: PPUSH
15830: LD_INT 22
15832: PUSH
15833: LD_OWVAR 2
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PPUSH
15842: CALL_OW 69
15846: PPUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL_OW 74
15856: PPUSH
15857: CALL_OW 115
// until IsDead ( un ) ;
15861: LD_VAR 0 1
15865: PPUSH
15866: CALL_OW 301
15870: IFFALSE 15818
// end ;
15872: PPOPN 1
15874: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15875: LD_EXP 30
15879: PUSH
15880: LD_EXP 70
15884: AND
15885: IFFALSE 15897
15887: GO 15889
15889: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15890: LD_STRING earthquake(getX(game), 0, 32)
15892: PPUSH
15893: CALL_OW 559
15897: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15898: LD_EXP 30
15902: PUSH
15903: LD_EXP 71
15907: AND
15908: IFFALSE 15999
15910: GO 15912
15912: DISABLE
15913: LD_INT 0
15915: PPUSH
// begin enable ;
15916: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15917: LD_ADDR_VAR 0 1
15921: PUSH
15922: LD_INT 22
15924: PUSH
15925: LD_OWVAR 2
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 21
15936: PUSH
15937: LD_INT 2
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 33
15946: PUSH
15947: LD_INT 3
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: LIST
15958: PPUSH
15959: CALL_OW 69
15963: ST_TO_ADDR
// if not tmp then
15964: LD_VAR 0 1
15968: NOT
15969: IFFALSE 15973
// exit ;
15971: GO 15999
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15973: LD_VAR 0 1
15977: PUSH
15978: LD_INT 1
15980: PPUSH
15981: LD_VAR 0 1
15985: PPUSH
15986: CALL_OW 12
15990: ARRAY
15991: PPUSH
15992: LD_INT 1
15994: PPUSH
15995: CALL_OW 234
// end ;
15999: PPOPN 1
16001: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16002: LD_EXP 30
16006: PUSH
16007: LD_EXP 72
16011: AND
16012: IFFALSE 16153
16014: GO 16016
16016: DISABLE
16017: LD_INT 0
16019: PPUSH
16020: PPUSH
16021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16022: LD_ADDR_VAR 0 3
16026: PUSH
16027: LD_INT 22
16029: PUSH
16030: LD_OWVAR 2
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 25
16041: PUSH
16042: LD_INT 1
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PPUSH
16053: CALL_OW 69
16057: ST_TO_ADDR
// if not tmp then
16058: LD_VAR 0 3
16062: NOT
16063: IFFALSE 16067
// exit ;
16065: GO 16153
// un := tmp [ rand ( 1 , tmp ) ] ;
16067: LD_ADDR_VAR 0 2
16071: PUSH
16072: LD_VAR 0 3
16076: PUSH
16077: LD_INT 1
16079: PPUSH
16080: LD_VAR 0 3
16084: PPUSH
16085: CALL_OW 12
16089: ARRAY
16090: ST_TO_ADDR
// if Crawls ( un ) then
16091: LD_VAR 0 2
16095: PPUSH
16096: CALL_OW 318
16100: IFFALSE 16111
// ComWalk ( un ) ;
16102: LD_VAR 0 2
16106: PPUSH
16107: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16111: LD_VAR 0 2
16115: PPUSH
16116: LD_INT 9
16118: PPUSH
16119: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16123: LD_INT 28
16125: PPUSH
16126: LD_OWVAR 2
16130: PPUSH
16131: LD_INT 2
16133: PPUSH
16134: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16138: LD_INT 29
16140: PPUSH
16141: LD_OWVAR 2
16145: PPUSH
16146: LD_INT 2
16148: PPUSH
16149: CALL_OW 322
// end ;
16153: PPOPN 3
16155: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16156: LD_EXP 30
16160: PUSH
16161: LD_EXP 73
16165: AND
16166: IFFALSE 16277
16168: GO 16170
16170: DISABLE
16171: LD_INT 0
16173: PPUSH
16174: PPUSH
16175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16176: LD_ADDR_VAR 0 3
16180: PUSH
16181: LD_INT 22
16183: PUSH
16184: LD_OWVAR 2
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: LD_INT 25
16195: PUSH
16196: LD_INT 1
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PPUSH
16207: CALL_OW 69
16211: ST_TO_ADDR
// if not tmp then
16212: LD_VAR 0 3
16216: NOT
16217: IFFALSE 16221
// exit ;
16219: GO 16277
// un := tmp [ rand ( 1 , tmp ) ] ;
16221: LD_ADDR_VAR 0 2
16225: PUSH
16226: LD_VAR 0 3
16230: PUSH
16231: LD_INT 1
16233: PPUSH
16234: LD_VAR 0 3
16238: PPUSH
16239: CALL_OW 12
16243: ARRAY
16244: ST_TO_ADDR
// if Crawls ( un ) then
16245: LD_VAR 0 2
16249: PPUSH
16250: CALL_OW 318
16254: IFFALSE 16265
// ComWalk ( un ) ;
16256: LD_VAR 0 2
16260: PPUSH
16261: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16265: LD_VAR 0 2
16269: PPUSH
16270: LD_INT 8
16272: PPUSH
16273: CALL_OW 336
// end ;
16277: PPOPN 3
16279: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16280: LD_EXP 30
16284: PUSH
16285: LD_EXP 74
16289: AND
16290: IFFALSE 16434
16292: GO 16294
16294: DISABLE
16295: LD_INT 0
16297: PPUSH
16298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16299: LD_ADDR_VAR 0 2
16303: PUSH
16304: LD_INT 22
16306: PUSH
16307: LD_OWVAR 2
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 21
16318: PUSH
16319: LD_INT 2
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: LD_INT 2
16328: PUSH
16329: LD_INT 34
16331: PUSH
16332: LD_INT 12
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 34
16341: PUSH
16342: LD_INT 51
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 34
16351: PUSH
16352: LD_INT 32
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: LIST
16369: PPUSH
16370: CALL_OW 69
16374: ST_TO_ADDR
// if not tmp then
16375: LD_VAR 0 2
16379: NOT
16380: IFFALSE 16384
// exit ;
16382: GO 16434
// for i in tmp do
16384: LD_ADDR_VAR 0 1
16388: PUSH
16389: LD_VAR 0 2
16393: PUSH
16394: FOR_IN
16395: IFFALSE 16432
// if GetCargo ( i , mat_artifact ) = 0 then
16397: LD_VAR 0 1
16401: PPUSH
16402: LD_INT 4
16404: PPUSH
16405: CALL_OW 289
16409: PUSH
16410: LD_INT 0
16412: EQUAL
16413: IFFALSE 16430
// SetCargo ( i , mat_siberit , 100 ) ;
16415: LD_VAR 0 1
16419: PPUSH
16420: LD_INT 3
16422: PPUSH
16423: LD_INT 100
16425: PPUSH
16426: CALL_OW 290
16430: GO 16394
16432: POP
16433: POP
// end ;
16434: PPOPN 2
16436: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16437: LD_EXP 30
16441: PUSH
16442: LD_EXP 75
16446: AND
16447: IFFALSE 16630
16449: GO 16451
16451: DISABLE
16452: LD_INT 0
16454: PPUSH
16455: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16456: LD_ADDR_VAR 0 2
16460: PUSH
16461: LD_INT 22
16463: PUSH
16464: LD_OWVAR 2
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PPUSH
16473: CALL_OW 69
16477: ST_TO_ADDR
// if not tmp then
16478: LD_VAR 0 2
16482: NOT
16483: IFFALSE 16487
// exit ;
16485: GO 16630
// for i := 1 to 2 do
16487: LD_ADDR_VAR 0 1
16491: PUSH
16492: DOUBLE
16493: LD_INT 1
16495: DEC
16496: ST_TO_ADDR
16497: LD_INT 2
16499: PUSH
16500: FOR_TO
16501: IFFALSE 16628
// begin uc_side := your_side ;
16503: LD_ADDR_OWVAR 20
16507: PUSH
16508: LD_OWVAR 2
16512: ST_TO_ADDR
// uc_nation := nation_american ;
16513: LD_ADDR_OWVAR 21
16517: PUSH
16518: LD_INT 1
16520: ST_TO_ADDR
// vc_chassis := us_morphling ;
16521: LD_ADDR_OWVAR 37
16525: PUSH
16526: LD_INT 5
16528: ST_TO_ADDR
// vc_engine := engine_siberite ;
16529: LD_ADDR_OWVAR 39
16533: PUSH
16534: LD_INT 3
16536: ST_TO_ADDR
// vc_control := control_computer ;
16537: LD_ADDR_OWVAR 38
16541: PUSH
16542: LD_INT 3
16544: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16545: LD_ADDR_OWVAR 40
16549: PUSH
16550: LD_INT 10
16552: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16553: LD_VAR 0 2
16557: PUSH
16558: LD_INT 1
16560: ARRAY
16561: PPUSH
16562: CALL_OW 310
16566: NOT
16567: IFFALSE 16614
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16569: CALL_OW 45
16573: PPUSH
16574: LD_VAR 0 2
16578: PUSH
16579: LD_INT 1
16581: ARRAY
16582: PPUSH
16583: CALL_OW 250
16587: PPUSH
16588: LD_VAR 0 2
16592: PUSH
16593: LD_INT 1
16595: ARRAY
16596: PPUSH
16597: CALL_OW 251
16601: PPUSH
16602: LD_INT 12
16604: PPUSH
16605: LD_INT 1
16607: PPUSH
16608: CALL_OW 50
16612: GO 16626
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16614: CALL_OW 45
16618: PPUSH
16619: LD_INT 1
16621: PPUSH
16622: CALL_OW 51
// end ;
16626: GO 16500
16628: POP
16629: POP
// end ;
16630: PPOPN 2
16632: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16633: LD_EXP 30
16637: PUSH
16638: LD_EXP 76
16642: AND
16643: IFFALSE 16865
16645: GO 16647
16647: DISABLE
16648: LD_INT 0
16650: PPUSH
16651: PPUSH
16652: PPUSH
16653: PPUSH
16654: PPUSH
16655: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16656: LD_ADDR_VAR 0 6
16660: PUSH
16661: LD_INT 22
16663: PUSH
16664: LD_OWVAR 2
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: LD_INT 21
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 3
16685: PUSH
16686: LD_INT 23
16688: PUSH
16689: LD_INT 0
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL_OW 69
16709: ST_TO_ADDR
// if not tmp then
16710: LD_VAR 0 6
16714: NOT
16715: IFFALSE 16719
// exit ;
16717: GO 16865
// s1 := rand ( 1 , 4 ) ;
16719: LD_ADDR_VAR 0 2
16723: PUSH
16724: LD_INT 1
16726: PPUSH
16727: LD_INT 4
16729: PPUSH
16730: CALL_OW 12
16734: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16735: LD_ADDR_VAR 0 4
16739: PUSH
16740: LD_VAR 0 6
16744: PUSH
16745: LD_INT 1
16747: ARRAY
16748: PPUSH
16749: LD_VAR 0 2
16753: PPUSH
16754: CALL_OW 259
16758: ST_TO_ADDR
// if s1 = 1 then
16759: LD_VAR 0 2
16763: PUSH
16764: LD_INT 1
16766: EQUAL
16767: IFFALSE 16787
// s2 := rand ( 2 , 4 ) else
16769: LD_ADDR_VAR 0 3
16773: PUSH
16774: LD_INT 2
16776: PPUSH
16777: LD_INT 4
16779: PPUSH
16780: CALL_OW 12
16784: ST_TO_ADDR
16785: GO 16795
// s2 := 1 ;
16787: LD_ADDR_VAR 0 3
16791: PUSH
16792: LD_INT 1
16794: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16795: LD_ADDR_VAR 0 5
16799: PUSH
16800: LD_VAR 0 6
16804: PUSH
16805: LD_INT 1
16807: ARRAY
16808: PPUSH
16809: LD_VAR 0 3
16813: PPUSH
16814: CALL_OW 259
16818: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16819: LD_VAR 0 6
16823: PUSH
16824: LD_INT 1
16826: ARRAY
16827: PPUSH
16828: LD_VAR 0 2
16832: PPUSH
16833: LD_VAR 0 5
16837: PPUSH
16838: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16842: LD_VAR 0 6
16846: PUSH
16847: LD_INT 1
16849: ARRAY
16850: PPUSH
16851: LD_VAR 0 3
16855: PPUSH
16856: LD_VAR 0 4
16860: PPUSH
16861: CALL_OW 237
// end ;
16865: PPOPN 6
16867: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16868: LD_EXP 30
16872: PUSH
16873: LD_EXP 77
16877: AND
16878: IFFALSE 16957
16880: GO 16882
16882: DISABLE
16883: LD_INT 0
16885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16886: LD_ADDR_VAR 0 1
16890: PUSH
16891: LD_INT 22
16893: PUSH
16894: LD_OWVAR 2
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 30
16905: PUSH
16906: LD_INT 3
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PPUSH
16917: CALL_OW 69
16921: ST_TO_ADDR
// if not tmp then
16922: LD_VAR 0 1
16926: NOT
16927: IFFALSE 16931
// exit ;
16929: GO 16957
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16931: LD_VAR 0 1
16935: PUSH
16936: LD_INT 1
16938: PPUSH
16939: LD_VAR 0 1
16943: PPUSH
16944: CALL_OW 12
16948: ARRAY
16949: PPUSH
16950: LD_INT 1
16952: PPUSH
16953: CALL_OW 234
// end ;
16957: PPOPN 1
16959: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16960: LD_EXP 30
16964: PUSH
16965: LD_EXP 78
16969: AND
16970: IFFALSE 17082
16972: GO 16974
16974: DISABLE
16975: LD_INT 0
16977: PPUSH
16978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16979: LD_ADDR_VAR 0 2
16983: PUSH
16984: LD_INT 22
16986: PUSH
16987: LD_OWVAR 2
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 2
16998: PUSH
16999: LD_INT 30
17001: PUSH
17002: LD_INT 27
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 30
17011: PUSH
17012: LD_INT 26
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 30
17021: PUSH
17022: LD_INT 28
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: ST_TO_ADDR
// if not tmp then
17044: LD_VAR 0 2
17048: NOT
17049: IFFALSE 17053
// exit ;
17051: GO 17082
// for i in tmp do
17053: LD_ADDR_VAR 0 1
17057: PUSH
17058: LD_VAR 0 2
17062: PUSH
17063: FOR_IN
17064: IFFALSE 17080
// SetLives ( i , 1 ) ;
17066: LD_VAR 0 1
17070: PPUSH
17071: LD_INT 1
17073: PPUSH
17074: CALL_OW 234
17078: GO 17063
17080: POP
17081: POP
// end ;
17082: PPOPN 2
17084: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17085: LD_EXP 30
17089: PUSH
17090: LD_EXP 79
17094: AND
17095: IFFALSE 17369
17097: GO 17099
17099: DISABLE
17100: LD_INT 0
17102: PPUSH
17103: PPUSH
17104: PPUSH
// begin i := rand ( 1 , 7 ) ;
17105: LD_ADDR_VAR 0 1
17109: PUSH
17110: LD_INT 1
17112: PPUSH
17113: LD_INT 7
17115: PPUSH
17116: CALL_OW 12
17120: ST_TO_ADDR
// case i of 1 :
17121: LD_VAR 0 1
17125: PUSH
17126: LD_INT 1
17128: DOUBLE
17129: EQUAL
17130: IFTRUE 17134
17132: GO 17144
17134: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17135: LD_STRING earthquake(getX(game), 0, 32)
17137: PPUSH
17138: CALL_OW 559
17142: GO 17369
17144: LD_INT 2
17146: DOUBLE
17147: EQUAL
17148: IFTRUE 17152
17150: GO 17166
17152: POP
// begin ToLua ( displayStucuk(); ) ;
17153: LD_STRING displayStucuk();
17155: PPUSH
17156: CALL_OW 559
// ResetFog ;
17160: CALL_OW 335
// end ; 3 :
17164: GO 17369
17166: LD_INT 3
17168: DOUBLE
17169: EQUAL
17170: IFTRUE 17174
17172: GO 17278
17174: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17175: LD_ADDR_VAR 0 2
17179: PUSH
17180: LD_INT 22
17182: PUSH
17183: LD_OWVAR 2
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 25
17194: PUSH
17195: LD_INT 1
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PPUSH
17206: CALL_OW 69
17210: ST_TO_ADDR
// if not tmp then
17211: LD_VAR 0 2
17215: NOT
17216: IFFALSE 17220
// exit ;
17218: GO 17369
// un := tmp [ rand ( 1 , tmp ) ] ;
17220: LD_ADDR_VAR 0 3
17224: PUSH
17225: LD_VAR 0 2
17229: PUSH
17230: LD_INT 1
17232: PPUSH
17233: LD_VAR 0 2
17237: PPUSH
17238: CALL_OW 12
17242: ARRAY
17243: ST_TO_ADDR
// if Crawls ( un ) then
17244: LD_VAR 0 3
17248: PPUSH
17249: CALL_OW 318
17253: IFFALSE 17264
// ComWalk ( un ) ;
17255: LD_VAR 0 3
17259: PPUSH
17260: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17264: LD_VAR 0 3
17268: PPUSH
17269: LD_INT 8
17271: PPUSH
17272: CALL_OW 336
// end ; 4 :
17276: GO 17369
17278: LD_INT 4
17280: DOUBLE
17281: EQUAL
17282: IFTRUE 17286
17284: GO 17347
17286: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17287: LD_ADDR_VAR 0 2
17291: PUSH
17292: LD_INT 22
17294: PUSH
17295: LD_OWVAR 2
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 30
17306: PUSH
17307: LD_INT 29
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PPUSH
17318: CALL_OW 69
17322: ST_TO_ADDR
// if not tmp then
17323: LD_VAR 0 2
17327: NOT
17328: IFFALSE 17332
// exit ;
17330: GO 17369
// DestroyUnit ( tmp [ 1 ] ) ;
17332: LD_VAR 0 2
17336: PUSH
17337: LD_INT 1
17339: ARRAY
17340: PPUSH
17341: CALL_OW 65
// end ; 5 .. 7 :
17345: GO 17369
17347: LD_INT 5
17349: DOUBLE
17350: GREATEREQUAL
17351: IFFALSE 17359
17353: LD_INT 7
17355: DOUBLE
17356: LESSEQUAL
17357: IFTRUE 17361
17359: GO 17368
17361: POP
// StreamSibBomb ; end ;
17362: CALL 13619 0 0
17366: GO 17369
17368: POP
// end ;
17369: PPOPN 3
17371: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17372: LD_EXP 30
17376: PUSH
17377: LD_EXP 80
17381: AND
17382: IFFALSE 17538
17384: GO 17386
17386: DISABLE
17387: LD_INT 0
17389: PPUSH
17390: PPUSH
17391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17392: LD_ADDR_VAR 0 2
17396: PUSH
17397: LD_INT 81
17399: PUSH
17400: LD_OWVAR 2
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 2
17411: PUSH
17412: LD_INT 21
17414: PUSH
17415: LD_INT 1
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 21
17424: PUSH
17425: LD_INT 2
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PPUSH
17441: CALL_OW 69
17445: ST_TO_ADDR
// if not tmp then
17446: LD_VAR 0 2
17450: NOT
17451: IFFALSE 17455
// exit ;
17453: GO 17538
// p := 0 ;
17455: LD_ADDR_VAR 0 3
17459: PUSH
17460: LD_INT 0
17462: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17463: LD_INT 35
17465: PPUSH
17466: CALL_OW 67
// p := p + 1 ;
17470: LD_ADDR_VAR 0 3
17474: PUSH
17475: LD_VAR 0 3
17479: PUSH
17480: LD_INT 1
17482: PLUS
17483: ST_TO_ADDR
// for i in tmp do
17484: LD_ADDR_VAR 0 1
17488: PUSH
17489: LD_VAR 0 2
17493: PUSH
17494: FOR_IN
17495: IFFALSE 17526
// if GetLives ( i ) < 1000 then
17497: LD_VAR 0 1
17501: PPUSH
17502: CALL_OW 256
17506: PUSH
17507: LD_INT 1000
17509: LESS
17510: IFFALSE 17524
// SetLives ( i , 1000 ) ;
17512: LD_VAR 0 1
17516: PPUSH
17517: LD_INT 1000
17519: PPUSH
17520: CALL_OW 234
17524: GO 17494
17526: POP
17527: POP
// until p > 20 ;
17528: LD_VAR 0 3
17532: PUSH
17533: LD_INT 20
17535: GREATER
17536: IFFALSE 17463
// end ;
17538: PPOPN 3
17540: END
// every 0 0$1 trigger StreamModeActive and sTime do
17541: LD_EXP 30
17545: PUSH
17546: LD_EXP 81
17550: AND
17551: IFFALSE 17586
17553: GO 17555
17555: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17556: LD_INT 28
17558: PPUSH
17559: LD_OWVAR 2
17563: PPUSH
17564: LD_INT 2
17566: PPUSH
17567: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17571: LD_INT 30
17573: PPUSH
17574: LD_OWVAR 2
17578: PPUSH
17579: LD_INT 2
17581: PPUSH
17582: CALL_OW 322
// end ;
17586: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17587: LD_EXP 30
17591: PUSH
17592: LD_EXP 82
17596: AND
17597: IFFALSE 17718
17599: GO 17601
17601: DISABLE
17602: LD_INT 0
17604: PPUSH
17605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17606: LD_ADDR_VAR 0 2
17610: PUSH
17611: LD_INT 22
17613: PUSH
17614: LD_OWVAR 2
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 21
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 3
17635: PUSH
17636: LD_INT 23
17638: PUSH
17639: LD_INT 0
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: PPUSH
17655: CALL_OW 69
17659: ST_TO_ADDR
// if not tmp then
17660: LD_VAR 0 2
17664: NOT
17665: IFFALSE 17669
// exit ;
17667: GO 17718
// for i in tmp do
17669: LD_ADDR_VAR 0 1
17673: PUSH
17674: LD_VAR 0 2
17678: PUSH
17679: FOR_IN
17680: IFFALSE 17716
// begin if Crawls ( i ) then
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 318
17691: IFFALSE 17702
// ComWalk ( i ) ;
17693: LD_VAR 0 1
17697: PPUSH
17698: CALL_OW 138
// SetClass ( i , 2 ) ;
17702: LD_VAR 0 1
17706: PPUSH
17707: LD_INT 2
17709: PPUSH
17710: CALL_OW 336
// end ;
17714: GO 17679
17716: POP
17717: POP
// end ;
17718: PPOPN 2
17720: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17721: LD_EXP 30
17725: PUSH
17726: LD_EXP 83
17730: AND
17731: IFFALSE 18012
17733: GO 17735
17735: DISABLE
17736: LD_INT 0
17738: PPUSH
17739: PPUSH
17740: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17741: LD_OWVAR 2
17745: PPUSH
17746: LD_INT 9
17748: PPUSH
17749: LD_INT 1
17751: PPUSH
17752: LD_INT 1
17754: PPUSH
17755: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17759: LD_INT 9
17761: PPUSH
17762: LD_OWVAR 2
17766: PPUSH
17767: CALL_OW 343
// uc_side := 9 ;
17771: LD_ADDR_OWVAR 20
17775: PUSH
17776: LD_INT 9
17778: ST_TO_ADDR
// uc_nation := 2 ;
17779: LD_ADDR_OWVAR 21
17783: PUSH
17784: LD_INT 2
17786: ST_TO_ADDR
// hc_name := Dark Warrior ;
17787: LD_ADDR_OWVAR 26
17791: PUSH
17792: LD_STRING Dark Warrior
17794: ST_TO_ADDR
// hc_gallery :=  ;
17795: LD_ADDR_OWVAR 33
17799: PUSH
17800: LD_STRING 
17802: ST_TO_ADDR
// hc_noskilllimit := true ;
17803: LD_ADDR_OWVAR 76
17807: PUSH
17808: LD_INT 1
17810: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17811: LD_ADDR_OWVAR 31
17815: PUSH
17816: LD_INT 30
17818: PUSH
17819: LD_INT 30
17821: PUSH
17822: LD_INT 30
17824: PUSH
17825: LD_INT 30
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: ST_TO_ADDR
// un := CreateHuman ;
17834: LD_ADDR_VAR 0 3
17838: PUSH
17839: CALL_OW 44
17843: ST_TO_ADDR
// hc_noskilllimit := false ;
17844: LD_ADDR_OWVAR 76
17848: PUSH
17849: LD_INT 0
17851: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17852: LD_VAR 0 3
17856: PPUSH
17857: LD_INT 1
17859: PPUSH
17860: CALL_OW 51
// p := 0 ;
17864: LD_ADDR_VAR 0 2
17868: PUSH
17869: LD_INT 0
17871: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17872: LD_INT 35
17874: PPUSH
17875: CALL_OW 67
// p := p + 1 ;
17879: LD_ADDR_VAR 0 2
17883: PUSH
17884: LD_VAR 0 2
17888: PUSH
17889: LD_INT 1
17891: PLUS
17892: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17893: LD_VAR 0 3
17897: PPUSH
17898: CALL_OW 256
17902: PUSH
17903: LD_INT 1000
17905: LESS
17906: IFFALSE 17920
// SetLives ( un , 1000 ) ;
17908: LD_VAR 0 3
17912: PPUSH
17913: LD_INT 1000
17915: PPUSH
17916: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17920: LD_VAR 0 3
17924: PPUSH
17925: LD_INT 81
17927: PUSH
17928: LD_OWVAR 2
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 91
17939: PUSH
17940: LD_VAR 0 3
17944: PUSH
17945: LD_INT 30
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PPUSH
17957: CALL_OW 69
17961: PPUSH
17962: LD_VAR 0 3
17966: PPUSH
17967: CALL_OW 74
17971: PPUSH
17972: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
17976: LD_VAR 0 2
17980: PUSH
17981: LD_INT 60
17983: GREATER
17984: PUSH
17985: LD_VAR 0 3
17989: PPUSH
17990: CALL_OW 301
17994: OR
17995: IFFALSE 17872
// if un then
17997: LD_VAR 0 3
18001: IFFALSE 18012
// RemoveUnit ( un ) ;
18003: LD_VAR 0 3
18007: PPUSH
18008: CALL_OW 64
// end ;
18012: PPOPN 3
18014: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18015: LD_INT 0
18017: PPUSH
// case cmd of 301 :
18018: LD_VAR 0 1
18022: PUSH
18023: LD_INT 301
18025: DOUBLE
18026: EQUAL
18027: IFTRUE 18031
18029: GO 18063
18031: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18032: LD_VAR 0 6
18036: PPUSH
18037: LD_VAR 0 7
18041: PPUSH
18042: LD_VAR 0 8
18046: PPUSH
18047: LD_VAR 0 4
18051: PPUSH
18052: LD_VAR 0 5
18056: PPUSH
18057: CALL 19264 0 5
18061: GO 18184
18063: LD_INT 302
18065: DOUBLE
18066: EQUAL
18067: IFTRUE 18071
18069: GO 18108
18071: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18072: LD_VAR 0 6
18076: PPUSH
18077: LD_VAR 0 7
18081: PPUSH
18082: LD_VAR 0 8
18086: PPUSH
18087: LD_VAR 0 9
18091: PPUSH
18092: LD_VAR 0 4
18096: PPUSH
18097: LD_VAR 0 5
18101: PPUSH
18102: CALL 19355 0 6
18106: GO 18184
18108: LD_INT 303
18110: DOUBLE
18111: EQUAL
18112: IFTRUE 18116
18114: GO 18153
18116: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18117: LD_VAR 0 6
18121: PPUSH
18122: LD_VAR 0 7
18126: PPUSH
18127: LD_VAR 0 8
18131: PPUSH
18132: LD_VAR 0 9
18136: PPUSH
18137: LD_VAR 0 4
18141: PPUSH
18142: LD_VAR 0 5
18146: PPUSH
18147: CALL 18189 0 6
18151: GO 18184
18153: LD_INT 304
18155: DOUBLE
18156: EQUAL
18157: IFTRUE 18161
18159: GO 18183
18161: POP
// hHackTeleport ( unit , x , y ) ; end ;
18162: LD_VAR 0 2
18166: PPUSH
18167: LD_VAR 0 4
18171: PPUSH
18172: LD_VAR 0 5
18176: PPUSH
18177: CALL 19948 0 3
18181: GO 18184
18183: POP
// end ;
18184: LD_VAR 0 12
18188: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18189: LD_INT 0
18191: PPUSH
18192: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18193: LD_VAR 0 1
18197: PUSH
18198: LD_INT 1
18200: LESS
18201: PUSH
18202: LD_VAR 0 1
18206: PUSH
18207: LD_INT 3
18209: GREATER
18210: OR
18211: PUSH
18212: LD_VAR 0 5
18216: PPUSH
18217: LD_VAR 0 6
18221: PPUSH
18222: CALL_OW 428
18226: OR
18227: IFFALSE 18231
// exit ;
18229: GO 18951
// uc_side := your_side ;
18231: LD_ADDR_OWVAR 20
18235: PUSH
18236: LD_OWVAR 2
18240: ST_TO_ADDR
// uc_nation := nation ;
18241: LD_ADDR_OWVAR 21
18245: PUSH
18246: LD_VAR 0 1
18250: ST_TO_ADDR
// bc_level = 1 ;
18251: LD_ADDR_OWVAR 43
18255: PUSH
18256: LD_INT 1
18258: ST_TO_ADDR
// case btype of 1 :
18259: LD_VAR 0 2
18263: PUSH
18264: LD_INT 1
18266: DOUBLE
18267: EQUAL
18268: IFTRUE 18272
18270: GO 18283
18272: POP
// bc_type := b_depot ; 2 :
18273: LD_ADDR_OWVAR 42
18277: PUSH
18278: LD_INT 0
18280: ST_TO_ADDR
18281: GO 18895
18283: LD_INT 2
18285: DOUBLE
18286: EQUAL
18287: IFTRUE 18291
18289: GO 18302
18291: POP
// bc_type := b_warehouse ; 3 :
18292: LD_ADDR_OWVAR 42
18296: PUSH
18297: LD_INT 1
18299: ST_TO_ADDR
18300: GO 18895
18302: LD_INT 3
18304: DOUBLE
18305: EQUAL
18306: IFTRUE 18310
18308: GO 18321
18310: POP
// bc_type := b_lab ; 4 .. 9 :
18311: LD_ADDR_OWVAR 42
18315: PUSH
18316: LD_INT 6
18318: ST_TO_ADDR
18319: GO 18895
18321: LD_INT 4
18323: DOUBLE
18324: GREATEREQUAL
18325: IFFALSE 18333
18327: LD_INT 9
18329: DOUBLE
18330: LESSEQUAL
18331: IFTRUE 18335
18333: GO 18387
18335: POP
// begin bc_type := b_lab_half ;
18336: LD_ADDR_OWVAR 42
18340: PUSH
18341: LD_INT 7
18343: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18344: LD_ADDR_OWVAR 44
18348: PUSH
18349: LD_INT 10
18351: PUSH
18352: LD_INT 11
18354: PUSH
18355: LD_INT 12
18357: PUSH
18358: LD_INT 15
18360: PUSH
18361: LD_INT 14
18363: PUSH
18364: LD_INT 13
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: PUSH
18375: LD_VAR 0 2
18379: PUSH
18380: LD_INT 3
18382: MINUS
18383: ARRAY
18384: ST_TO_ADDR
// end ; 10 .. 13 :
18385: GO 18895
18387: LD_INT 10
18389: DOUBLE
18390: GREATEREQUAL
18391: IFFALSE 18399
18393: LD_INT 13
18395: DOUBLE
18396: LESSEQUAL
18397: IFTRUE 18401
18399: GO 18478
18401: POP
// begin bc_type := b_lab_full ;
18402: LD_ADDR_OWVAR 42
18406: PUSH
18407: LD_INT 8
18409: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18410: LD_ADDR_OWVAR 44
18414: PUSH
18415: LD_INT 10
18417: PUSH
18418: LD_INT 12
18420: PUSH
18421: LD_INT 14
18423: PUSH
18424: LD_INT 13
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: PUSH
18433: LD_VAR 0 2
18437: PUSH
18438: LD_INT 9
18440: MINUS
18441: ARRAY
18442: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18443: LD_ADDR_OWVAR 45
18447: PUSH
18448: LD_INT 11
18450: PUSH
18451: LD_INT 15
18453: PUSH
18454: LD_INT 12
18456: PUSH
18457: LD_INT 15
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: PUSH
18466: LD_VAR 0 2
18470: PUSH
18471: LD_INT 9
18473: MINUS
18474: ARRAY
18475: ST_TO_ADDR
// end ; 14 :
18476: GO 18895
18478: LD_INT 14
18480: DOUBLE
18481: EQUAL
18482: IFTRUE 18486
18484: GO 18497
18486: POP
// bc_type := b_workshop ; 15 :
18487: LD_ADDR_OWVAR 42
18491: PUSH
18492: LD_INT 2
18494: ST_TO_ADDR
18495: GO 18895
18497: LD_INT 15
18499: DOUBLE
18500: EQUAL
18501: IFTRUE 18505
18503: GO 18516
18505: POP
// bc_type := b_factory ; 16 :
18506: LD_ADDR_OWVAR 42
18510: PUSH
18511: LD_INT 3
18513: ST_TO_ADDR
18514: GO 18895
18516: LD_INT 16
18518: DOUBLE
18519: EQUAL
18520: IFTRUE 18524
18522: GO 18535
18524: POP
// bc_type := b_ext_gun ; 17 :
18525: LD_ADDR_OWVAR 42
18529: PUSH
18530: LD_INT 17
18532: ST_TO_ADDR
18533: GO 18895
18535: LD_INT 17
18537: DOUBLE
18538: EQUAL
18539: IFTRUE 18543
18541: GO 18571
18543: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18544: LD_ADDR_OWVAR 42
18548: PUSH
18549: LD_INT 19
18551: PUSH
18552: LD_INT 23
18554: PUSH
18555: LD_INT 19
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: LIST
18562: PUSH
18563: LD_VAR 0 1
18567: ARRAY
18568: ST_TO_ADDR
18569: GO 18895
18571: LD_INT 18
18573: DOUBLE
18574: EQUAL
18575: IFTRUE 18579
18577: GO 18590
18579: POP
// bc_type := b_ext_radar ; 19 :
18580: LD_ADDR_OWVAR 42
18584: PUSH
18585: LD_INT 20
18587: ST_TO_ADDR
18588: GO 18895
18590: LD_INT 19
18592: DOUBLE
18593: EQUAL
18594: IFTRUE 18598
18596: GO 18609
18598: POP
// bc_type := b_ext_radio ; 20 :
18599: LD_ADDR_OWVAR 42
18603: PUSH
18604: LD_INT 22
18606: ST_TO_ADDR
18607: GO 18895
18609: LD_INT 20
18611: DOUBLE
18612: EQUAL
18613: IFTRUE 18617
18615: GO 18628
18617: POP
// bc_type := b_ext_siberium ; 21 :
18618: LD_ADDR_OWVAR 42
18622: PUSH
18623: LD_INT 21
18625: ST_TO_ADDR
18626: GO 18895
18628: LD_INT 21
18630: DOUBLE
18631: EQUAL
18632: IFTRUE 18636
18634: GO 18647
18636: POP
// bc_type := b_ext_computer ; 22 :
18637: LD_ADDR_OWVAR 42
18641: PUSH
18642: LD_INT 24
18644: ST_TO_ADDR
18645: GO 18895
18647: LD_INT 22
18649: DOUBLE
18650: EQUAL
18651: IFTRUE 18655
18653: GO 18666
18655: POP
// bc_type := b_ext_track ; 23 :
18656: LD_ADDR_OWVAR 42
18660: PUSH
18661: LD_INT 16
18663: ST_TO_ADDR
18664: GO 18895
18666: LD_INT 23
18668: DOUBLE
18669: EQUAL
18670: IFTRUE 18674
18672: GO 18685
18674: POP
// bc_type := b_ext_laser ; 24 :
18675: LD_ADDR_OWVAR 42
18679: PUSH
18680: LD_INT 25
18682: ST_TO_ADDR
18683: GO 18895
18685: LD_INT 24
18687: DOUBLE
18688: EQUAL
18689: IFTRUE 18693
18691: GO 18704
18693: POP
// bc_type := b_control_tower ; 25 :
18694: LD_ADDR_OWVAR 42
18698: PUSH
18699: LD_INT 36
18701: ST_TO_ADDR
18702: GO 18895
18704: LD_INT 25
18706: DOUBLE
18707: EQUAL
18708: IFTRUE 18712
18710: GO 18723
18712: POP
// bc_type := b_breastwork ; 26 :
18713: LD_ADDR_OWVAR 42
18717: PUSH
18718: LD_INT 31
18720: ST_TO_ADDR
18721: GO 18895
18723: LD_INT 26
18725: DOUBLE
18726: EQUAL
18727: IFTRUE 18731
18729: GO 18742
18731: POP
// bc_type := b_bunker ; 27 :
18732: LD_ADDR_OWVAR 42
18736: PUSH
18737: LD_INT 32
18739: ST_TO_ADDR
18740: GO 18895
18742: LD_INT 27
18744: DOUBLE
18745: EQUAL
18746: IFTRUE 18750
18748: GO 18761
18750: POP
// bc_type := b_turret ; 28 :
18751: LD_ADDR_OWVAR 42
18755: PUSH
18756: LD_INT 33
18758: ST_TO_ADDR
18759: GO 18895
18761: LD_INT 28
18763: DOUBLE
18764: EQUAL
18765: IFTRUE 18769
18767: GO 18780
18769: POP
// bc_type := b_armoury ; 29 :
18770: LD_ADDR_OWVAR 42
18774: PUSH
18775: LD_INT 4
18777: ST_TO_ADDR
18778: GO 18895
18780: LD_INT 29
18782: DOUBLE
18783: EQUAL
18784: IFTRUE 18788
18786: GO 18799
18788: POP
// bc_type := b_barracks ; 30 :
18789: LD_ADDR_OWVAR 42
18793: PUSH
18794: LD_INT 5
18796: ST_TO_ADDR
18797: GO 18895
18799: LD_INT 30
18801: DOUBLE
18802: EQUAL
18803: IFTRUE 18807
18805: GO 18818
18807: POP
// bc_type := b_solar_power ; 31 :
18808: LD_ADDR_OWVAR 42
18812: PUSH
18813: LD_INT 27
18815: ST_TO_ADDR
18816: GO 18895
18818: LD_INT 31
18820: DOUBLE
18821: EQUAL
18822: IFTRUE 18826
18824: GO 18837
18826: POP
// bc_type := b_oil_power ; 32 :
18827: LD_ADDR_OWVAR 42
18831: PUSH
18832: LD_INT 26
18834: ST_TO_ADDR
18835: GO 18895
18837: LD_INT 32
18839: DOUBLE
18840: EQUAL
18841: IFTRUE 18845
18843: GO 18856
18845: POP
// bc_type := b_siberite_power ; 33 :
18846: LD_ADDR_OWVAR 42
18850: PUSH
18851: LD_INT 28
18853: ST_TO_ADDR
18854: GO 18895
18856: LD_INT 33
18858: DOUBLE
18859: EQUAL
18860: IFTRUE 18864
18862: GO 18875
18864: POP
// bc_type := b_oil_mine ; 34 :
18865: LD_ADDR_OWVAR 42
18869: PUSH
18870: LD_INT 29
18872: ST_TO_ADDR
18873: GO 18895
18875: LD_INT 34
18877: DOUBLE
18878: EQUAL
18879: IFTRUE 18883
18881: GO 18894
18883: POP
// bc_type := b_siberite_mine ; end ;
18884: LD_ADDR_OWVAR 42
18888: PUSH
18889: LD_INT 30
18891: ST_TO_ADDR
18892: GO 18895
18894: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18895: LD_ADDR_VAR 0 8
18899: PUSH
18900: LD_VAR 0 5
18904: PPUSH
18905: LD_VAR 0 6
18909: PPUSH
18910: LD_VAR 0 3
18914: PPUSH
18915: CALL_OW 47
18919: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18920: LD_OWVAR 42
18924: PUSH
18925: LD_INT 32
18927: PUSH
18928: LD_INT 33
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: IN
18935: IFFALSE 18951
// PlaceWeaponTurret ( b , weapon ) ;
18937: LD_VAR 0 8
18941: PPUSH
18942: LD_VAR 0 4
18946: PPUSH
18947: CALL_OW 431
// end ;
18951: LD_VAR 0 7
18955: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18956: LD_INT 0
18958: PPUSH
18959: PPUSH
18960: PPUSH
18961: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18962: LD_ADDR_VAR 0 4
18966: PUSH
18967: LD_INT 22
18969: PUSH
18970: LD_OWVAR 2
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 2
18981: PUSH
18982: LD_INT 30
18984: PUSH
18985: LD_INT 0
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 30
18994: PUSH
18995: LD_INT 1
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: LIST
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PPUSH
19011: CALL_OW 69
19015: ST_TO_ADDR
// if not tmp then
19016: LD_VAR 0 4
19020: NOT
19021: IFFALSE 19025
// exit ;
19023: GO 19084
// for i in tmp do
19025: LD_ADDR_VAR 0 2
19029: PUSH
19030: LD_VAR 0 4
19034: PUSH
19035: FOR_IN
19036: IFFALSE 19082
// for j = 1 to 3 do
19038: LD_ADDR_VAR 0 3
19042: PUSH
19043: DOUBLE
19044: LD_INT 1
19046: DEC
19047: ST_TO_ADDR
19048: LD_INT 3
19050: PUSH
19051: FOR_TO
19052: IFFALSE 19078
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19054: LD_VAR 0 2
19058: PPUSH
19059: CALL_OW 274
19063: PPUSH
19064: LD_VAR 0 3
19068: PPUSH
19069: LD_INT 99999
19071: PPUSH
19072: CALL_OW 277
19076: GO 19051
19078: POP
19079: POP
19080: GO 19035
19082: POP
19083: POP
// end ;
19084: LD_VAR 0 1
19088: RET
// export function hHackSetLevel10 ; var i , j ; begin
19089: LD_INT 0
19091: PPUSH
19092: PPUSH
19093: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19094: LD_ADDR_VAR 0 2
19098: PUSH
19099: LD_INT 21
19101: PUSH
19102: LD_INT 1
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PPUSH
19109: CALL_OW 69
19113: PUSH
19114: FOR_IN
19115: IFFALSE 19167
// if IsSelected ( i ) then
19117: LD_VAR 0 2
19121: PPUSH
19122: CALL_OW 306
19126: IFFALSE 19165
// begin for j := 1 to 4 do
19128: LD_ADDR_VAR 0 3
19132: PUSH
19133: DOUBLE
19134: LD_INT 1
19136: DEC
19137: ST_TO_ADDR
19138: LD_INT 4
19140: PUSH
19141: FOR_TO
19142: IFFALSE 19163
// SetSkill ( i , j , 10 ) ;
19144: LD_VAR 0 2
19148: PPUSH
19149: LD_VAR 0 3
19153: PPUSH
19154: LD_INT 10
19156: PPUSH
19157: CALL_OW 237
19161: GO 19141
19163: POP
19164: POP
// end ;
19165: GO 19114
19167: POP
19168: POP
// end ;
19169: LD_VAR 0 1
19173: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19174: LD_INT 0
19176: PPUSH
19177: PPUSH
19178: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19179: LD_ADDR_VAR 0 2
19183: PUSH
19184: LD_INT 22
19186: PUSH
19187: LD_OWVAR 2
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 21
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PPUSH
19210: CALL_OW 69
19214: PUSH
19215: FOR_IN
19216: IFFALSE 19257
// begin for j := 1 to 4 do
19218: LD_ADDR_VAR 0 3
19222: PUSH
19223: DOUBLE
19224: LD_INT 1
19226: DEC
19227: ST_TO_ADDR
19228: LD_INT 4
19230: PUSH
19231: FOR_TO
19232: IFFALSE 19253
// SetSkill ( i , j , 10 ) ;
19234: LD_VAR 0 2
19238: PPUSH
19239: LD_VAR 0 3
19243: PPUSH
19244: LD_INT 10
19246: PPUSH
19247: CALL_OW 237
19251: GO 19231
19253: POP
19254: POP
// end ;
19255: GO 19215
19257: POP
19258: POP
// end ;
19259: LD_VAR 0 1
19263: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19264: LD_INT 0
19266: PPUSH
// uc_side := your_side ;
19267: LD_ADDR_OWVAR 20
19271: PUSH
19272: LD_OWVAR 2
19276: ST_TO_ADDR
// uc_nation := nation ;
19277: LD_ADDR_OWVAR 21
19281: PUSH
19282: LD_VAR 0 1
19286: ST_TO_ADDR
// InitHc ;
19287: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19291: LD_INT 0
19293: PPUSH
19294: LD_VAR 0 2
19298: PPUSH
19299: LD_VAR 0 3
19303: PPUSH
19304: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19308: LD_VAR 0 4
19312: PPUSH
19313: LD_VAR 0 5
19317: PPUSH
19318: CALL_OW 428
19322: PUSH
19323: LD_INT 0
19325: EQUAL
19326: IFFALSE 19350
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19328: CALL_OW 44
19332: PPUSH
19333: LD_VAR 0 4
19337: PPUSH
19338: LD_VAR 0 5
19342: PPUSH
19343: LD_INT 1
19345: PPUSH
19346: CALL_OW 48
// end ;
19350: LD_VAR 0 6
19354: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19355: LD_INT 0
19357: PPUSH
19358: PPUSH
// uc_side := your_side ;
19359: LD_ADDR_OWVAR 20
19363: PUSH
19364: LD_OWVAR 2
19368: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19369: LD_VAR 0 1
19373: PUSH
19374: LD_INT 1
19376: PUSH
19377: LD_INT 2
19379: PUSH
19380: LD_INT 3
19382: PUSH
19383: LD_INT 4
19385: PUSH
19386: LD_INT 5
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: IN
19396: IFFALSE 19408
// uc_nation := nation_american else
19398: LD_ADDR_OWVAR 21
19402: PUSH
19403: LD_INT 1
19405: ST_TO_ADDR
19406: GO 19451
// if chassis in [ 11 , 12 , 13 , 14 ] then
19408: LD_VAR 0 1
19412: PUSH
19413: LD_INT 11
19415: PUSH
19416: LD_INT 12
19418: PUSH
19419: LD_INT 13
19421: PUSH
19422: LD_INT 14
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: IN
19431: IFFALSE 19443
// uc_nation := nation_arabian else
19433: LD_ADDR_OWVAR 21
19437: PUSH
19438: LD_INT 2
19440: ST_TO_ADDR
19441: GO 19451
// uc_nation := nation_russian ;
19443: LD_ADDR_OWVAR 21
19447: PUSH
19448: LD_INT 3
19450: ST_TO_ADDR
// vc_chassis := chassis ;
19451: LD_ADDR_OWVAR 37
19455: PUSH
19456: LD_VAR 0 1
19460: ST_TO_ADDR
// vc_engine := engine ;
19461: LD_ADDR_OWVAR 39
19465: PUSH
19466: LD_VAR 0 2
19470: ST_TO_ADDR
// vc_control := control ;
19471: LD_ADDR_OWVAR 38
19475: PUSH
19476: LD_VAR 0 3
19480: ST_TO_ADDR
// vc_weapon := weapon ;
19481: LD_ADDR_OWVAR 40
19485: PUSH
19486: LD_VAR 0 4
19490: ST_TO_ADDR
// un := CreateVehicle ;
19491: LD_ADDR_VAR 0 8
19495: PUSH
19496: CALL_OW 45
19500: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19501: LD_VAR 0 8
19505: PPUSH
19506: LD_INT 0
19508: PPUSH
19509: LD_INT 5
19511: PPUSH
19512: CALL_OW 12
19516: PPUSH
19517: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19521: LD_VAR 0 8
19525: PPUSH
19526: LD_VAR 0 5
19530: PPUSH
19531: LD_VAR 0 6
19535: PPUSH
19536: LD_INT 1
19538: PPUSH
19539: CALL_OW 48
// end ;
19543: LD_VAR 0 7
19547: RET
// export hInvincible ; every 1 do
19548: GO 19550
19550: DISABLE
// hInvincible := [ ] ;
19551: LD_ADDR_EXP 84
19555: PUSH
19556: EMPTY
19557: ST_TO_ADDR
19558: END
// every 10 do var i ;
19559: GO 19561
19561: DISABLE
19562: LD_INT 0
19564: PPUSH
// begin enable ;
19565: ENABLE
// if not hInvincible then
19566: LD_EXP 84
19570: NOT
19571: IFFALSE 19575
// exit ;
19573: GO 19619
// for i in hInvincible do
19575: LD_ADDR_VAR 0 1
19579: PUSH
19580: LD_EXP 84
19584: PUSH
19585: FOR_IN
19586: IFFALSE 19617
// if GetLives ( i ) < 1000 then
19588: LD_VAR 0 1
19592: PPUSH
19593: CALL_OW 256
19597: PUSH
19598: LD_INT 1000
19600: LESS
19601: IFFALSE 19615
// SetLives ( i , 1000 ) ;
19603: LD_VAR 0 1
19607: PPUSH
19608: LD_INT 1000
19610: PPUSH
19611: CALL_OW 234
19615: GO 19585
19617: POP
19618: POP
// end ;
19619: PPOPN 1
19621: END
// export function hHackInvincible ; var i ; begin
19622: LD_INT 0
19624: PPUSH
19625: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19626: LD_ADDR_VAR 0 2
19630: PUSH
19631: LD_INT 2
19633: PUSH
19634: LD_INT 21
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 21
19646: PUSH
19647: LD_INT 2
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: LIST
19658: PPUSH
19659: CALL_OW 69
19663: PUSH
19664: FOR_IN
19665: IFFALSE 19726
// if IsSelected ( i ) then
19667: LD_VAR 0 2
19671: PPUSH
19672: CALL_OW 306
19676: IFFALSE 19724
// begin if i in hInvincible then
19678: LD_VAR 0 2
19682: PUSH
19683: LD_EXP 84
19687: IN
19688: IFFALSE 19708
// hInvincible := hInvincible diff i else
19690: LD_ADDR_EXP 84
19694: PUSH
19695: LD_EXP 84
19699: PUSH
19700: LD_VAR 0 2
19704: DIFF
19705: ST_TO_ADDR
19706: GO 19724
// hInvincible := hInvincible union i ;
19708: LD_ADDR_EXP 84
19712: PUSH
19713: LD_EXP 84
19717: PUSH
19718: LD_VAR 0 2
19722: UNION
19723: ST_TO_ADDR
// end ;
19724: GO 19664
19726: POP
19727: POP
// end ;
19728: LD_VAR 0 1
19732: RET
// export function hHackInvisible ; var i , j ; begin
19733: LD_INT 0
19735: PPUSH
19736: PPUSH
19737: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19738: LD_ADDR_VAR 0 2
19742: PUSH
19743: LD_INT 21
19745: PUSH
19746: LD_INT 1
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PPUSH
19753: CALL_OW 69
19757: PUSH
19758: FOR_IN
19759: IFFALSE 19783
// if IsSelected ( i ) then
19761: LD_VAR 0 2
19765: PPUSH
19766: CALL_OW 306
19770: IFFALSE 19781
// ComForceInvisible ( i ) ;
19772: LD_VAR 0 2
19776: PPUSH
19777: CALL_OW 496
19781: GO 19758
19783: POP
19784: POP
// end ;
19785: LD_VAR 0 1
19789: RET
// export function hHackChangeYourSide ; begin
19790: LD_INT 0
19792: PPUSH
// if your_side = 8 then
19793: LD_OWVAR 2
19797: PUSH
19798: LD_INT 8
19800: EQUAL
19801: IFFALSE 19813
// your_side := 0 else
19803: LD_ADDR_OWVAR 2
19807: PUSH
19808: LD_INT 0
19810: ST_TO_ADDR
19811: GO 19827
// your_side := your_side + 1 ;
19813: LD_ADDR_OWVAR 2
19817: PUSH
19818: LD_OWVAR 2
19822: PUSH
19823: LD_INT 1
19825: PLUS
19826: ST_TO_ADDR
// end ;
19827: LD_VAR 0 1
19831: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19832: LD_INT 0
19834: PPUSH
19835: PPUSH
19836: PPUSH
// for i in all_units do
19837: LD_ADDR_VAR 0 2
19841: PUSH
19842: LD_OWVAR 3
19846: PUSH
19847: FOR_IN
19848: IFFALSE 19926
// if IsSelected ( i ) then
19850: LD_VAR 0 2
19854: PPUSH
19855: CALL_OW 306
19859: IFFALSE 19924
// begin j := GetSide ( i ) ;
19861: LD_ADDR_VAR 0 3
19865: PUSH
19866: LD_VAR 0 2
19870: PPUSH
19871: CALL_OW 255
19875: ST_TO_ADDR
// if j = 8 then
19876: LD_VAR 0 3
19880: PUSH
19881: LD_INT 8
19883: EQUAL
19884: IFFALSE 19896
// j := 0 else
19886: LD_ADDR_VAR 0 3
19890: PUSH
19891: LD_INT 0
19893: ST_TO_ADDR
19894: GO 19910
// j := j + 1 ;
19896: LD_ADDR_VAR 0 3
19900: PUSH
19901: LD_VAR 0 3
19905: PUSH
19906: LD_INT 1
19908: PLUS
19909: ST_TO_ADDR
// SetSide ( i , j ) ;
19910: LD_VAR 0 2
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: CALL_OW 235
// end ;
19924: GO 19847
19926: POP
19927: POP
// end ;
19928: LD_VAR 0 1
19932: RET
// export function hHackFog ; begin
19933: LD_INT 0
19935: PPUSH
// FogOff ( true ) ;
19936: LD_INT 1
19938: PPUSH
19939: CALL_OW 344
// end ;
19943: LD_VAR 0 1
19947: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19948: LD_INT 0
19950: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19951: LD_VAR 0 1
19955: PPUSH
19956: LD_VAR 0 2
19960: PPUSH
19961: LD_VAR 0 3
19965: PPUSH
19966: LD_INT 1
19968: PPUSH
19969: LD_INT 1
19971: PPUSH
19972: CALL_OW 483
// CenterOnXY ( x , y ) ;
19976: LD_VAR 0 2
19980: PPUSH
19981: LD_VAR 0 3
19985: PPUSH
19986: CALL_OW 84
// end ; end_of_file
19990: LD_VAR 0 4
19994: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19995: LD_INT 0
19997: PPUSH
19998: PPUSH
19999: PPUSH
20000: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20001: LD_VAR 0 1
20005: PPUSH
20006: CALL_OW 264
20010: PUSH
20011: LD_EXP 18
20015: EQUAL
20016: IFFALSE 20088
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20018: LD_INT 68
20020: PPUSH
20021: LD_VAR 0 1
20025: PPUSH
20026: CALL_OW 255
20030: PPUSH
20031: CALL_OW 321
20035: PUSH
20036: LD_INT 2
20038: EQUAL
20039: IFFALSE 20051
// eff := 70 else
20041: LD_ADDR_VAR 0 4
20045: PUSH
20046: LD_INT 70
20048: ST_TO_ADDR
20049: GO 20059
// eff := 30 ;
20051: LD_ADDR_VAR 0 4
20055: PUSH
20056: LD_INT 30
20058: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20059: LD_VAR 0 1
20063: PPUSH
20064: CALL_OW 250
20068: PPUSH
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL_OW 251
20078: PPUSH
20079: LD_VAR 0 4
20083: PPUSH
20084: CALL_OW 495
// end ; end ;
20088: LD_VAR 0 2
20092: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20093: LD_INT 0
20095: PPUSH
// end ;
20096: LD_VAR 0 4
20100: RET
// export function SOS_Command ( cmd ) ; begin
20101: LD_INT 0
20103: PPUSH
// end ;
20104: LD_VAR 0 2
20108: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20109: LD_INT 0
20111: PPUSH
// if cmd = 121 then
20112: LD_VAR 0 1
20116: PUSH
20117: LD_INT 121
20119: EQUAL
20120: IFFALSE 20122
// end ;
20122: LD_VAR 0 6
20126: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20127: LD_INT 0
20129: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20130: LD_VAR 0 1
20134: PUSH
20135: LD_INT 250
20137: EQUAL
20138: PUSH
20139: LD_VAR 0 2
20143: PPUSH
20144: CALL_OW 264
20148: PUSH
20149: LD_EXP 21
20153: EQUAL
20154: AND
20155: IFFALSE 20176
// MinerPlaceMine ( unit , x , y ) ;
20157: LD_VAR 0 2
20161: PPUSH
20162: LD_VAR 0 4
20166: PPUSH
20167: LD_VAR 0 5
20171: PPUSH
20172: CALL 22525 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20176: LD_VAR 0 1
20180: PUSH
20181: LD_INT 251
20183: EQUAL
20184: PUSH
20185: LD_VAR 0 2
20189: PPUSH
20190: CALL_OW 264
20194: PUSH
20195: LD_EXP 21
20199: EQUAL
20200: AND
20201: IFFALSE 20222
// MinerDetonateMine ( unit , x , y ) ;
20203: LD_VAR 0 2
20207: PPUSH
20208: LD_VAR 0 4
20212: PPUSH
20213: LD_VAR 0 5
20217: PPUSH
20218: CALL 22802 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20222: LD_VAR 0 1
20226: PUSH
20227: LD_INT 252
20229: EQUAL
20230: PUSH
20231: LD_VAR 0 2
20235: PPUSH
20236: CALL_OW 264
20240: PUSH
20241: LD_EXP 21
20245: EQUAL
20246: AND
20247: IFFALSE 20268
// MinerCreateMinefield ( unit , x , y ) ;
20249: LD_VAR 0 2
20253: PPUSH
20254: LD_VAR 0 4
20258: PPUSH
20259: LD_VAR 0 5
20263: PPUSH
20264: CALL 23219 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20268: LD_VAR 0 1
20272: PUSH
20273: LD_INT 253
20275: EQUAL
20276: PUSH
20277: LD_VAR 0 2
20281: PPUSH
20282: CALL_OW 257
20286: PUSH
20287: LD_INT 5
20289: EQUAL
20290: AND
20291: IFFALSE 20312
// ComBinocular ( unit , x , y ) ;
20293: LD_VAR 0 2
20297: PPUSH
20298: LD_VAR 0 4
20302: PPUSH
20303: LD_VAR 0 5
20307: PPUSH
20308: CALL 23590 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20312: LD_VAR 0 1
20316: PUSH
20317: LD_INT 254
20319: EQUAL
20320: PUSH
20321: LD_VAR 0 2
20325: PPUSH
20326: CALL_OW 264
20330: PUSH
20331: LD_EXP 16
20335: EQUAL
20336: AND
20337: PUSH
20338: LD_VAR 0 3
20342: PPUSH
20343: CALL_OW 263
20347: PUSH
20348: LD_INT 3
20350: EQUAL
20351: AND
20352: IFFALSE 20368
// HackDestroyVehicle ( unit , selectedUnit ) ;
20354: LD_VAR 0 2
20358: PPUSH
20359: LD_VAR 0 3
20363: PPUSH
20364: CALL 21885 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20368: LD_VAR 0 1
20372: PUSH
20373: LD_INT 255
20375: EQUAL
20376: PUSH
20377: LD_VAR 0 2
20381: PPUSH
20382: CALL_OW 264
20386: PUSH
20387: LD_INT 14
20389: PUSH
20390: LD_INT 53
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: IN
20397: AND
20398: PUSH
20399: LD_VAR 0 4
20403: PPUSH
20404: LD_VAR 0 5
20408: PPUSH
20409: CALL_OW 488
20413: AND
20414: IFFALSE 20438
// CutTreeXYR ( unit , x , y , 12 ) ;
20416: LD_VAR 0 2
20420: PPUSH
20421: LD_VAR 0 4
20425: PPUSH
20426: LD_VAR 0 5
20430: PPUSH
20431: LD_INT 12
20433: PPUSH
20434: CALL 20451 0 4
// end ;
20438: LD_VAR 0 6
20442: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
20443: LD_INT 0
20445: PPUSH
// end ;
20446: LD_VAR 0 4
20450: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20451: LD_INT 0
20453: PPUSH
20454: PPUSH
20455: PPUSH
20456: PPUSH
20457: PPUSH
20458: PPUSH
20459: PPUSH
20460: PPUSH
20461: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20462: LD_VAR 0 1
20466: NOT
20467: PUSH
20468: LD_VAR 0 2
20472: PPUSH
20473: LD_VAR 0 3
20477: PPUSH
20478: CALL_OW 488
20482: NOT
20483: OR
20484: PUSH
20485: LD_VAR 0 4
20489: NOT
20490: OR
20491: IFFALSE 20495
// exit ;
20493: GO 20835
// list := [ ] ;
20495: LD_ADDR_VAR 0 13
20499: PUSH
20500: EMPTY
20501: ST_TO_ADDR
// if x - r < 0 then
20502: LD_VAR 0 2
20506: PUSH
20507: LD_VAR 0 4
20511: MINUS
20512: PUSH
20513: LD_INT 0
20515: LESS
20516: IFFALSE 20528
// min_x := 0 else
20518: LD_ADDR_VAR 0 7
20522: PUSH
20523: LD_INT 0
20525: ST_TO_ADDR
20526: GO 20544
// min_x := x - r ;
20528: LD_ADDR_VAR 0 7
20532: PUSH
20533: LD_VAR 0 2
20537: PUSH
20538: LD_VAR 0 4
20542: MINUS
20543: ST_TO_ADDR
// if y - r < 0 then
20544: LD_VAR 0 3
20548: PUSH
20549: LD_VAR 0 4
20553: MINUS
20554: PUSH
20555: LD_INT 0
20557: LESS
20558: IFFALSE 20570
// min_y := 0 else
20560: LD_ADDR_VAR 0 8
20564: PUSH
20565: LD_INT 0
20567: ST_TO_ADDR
20568: GO 20586
// min_y := y - r ;
20570: LD_ADDR_VAR 0 8
20574: PUSH
20575: LD_VAR 0 3
20579: PUSH
20580: LD_VAR 0 4
20584: MINUS
20585: ST_TO_ADDR
// max_x := x + r ;
20586: LD_ADDR_VAR 0 9
20590: PUSH
20591: LD_VAR 0 2
20595: PUSH
20596: LD_VAR 0 4
20600: PLUS
20601: ST_TO_ADDR
// max_y := y + r ;
20602: LD_ADDR_VAR 0 10
20606: PUSH
20607: LD_VAR 0 3
20611: PUSH
20612: LD_VAR 0 4
20616: PLUS
20617: ST_TO_ADDR
// for _x = min_x to max_x do
20618: LD_ADDR_VAR 0 11
20622: PUSH
20623: DOUBLE
20624: LD_VAR 0 7
20628: DEC
20629: ST_TO_ADDR
20630: LD_VAR 0 9
20634: PUSH
20635: FOR_TO
20636: IFFALSE 20753
// for _y = min_y to max_y do
20638: LD_ADDR_VAR 0 12
20642: PUSH
20643: DOUBLE
20644: LD_VAR 0 8
20648: DEC
20649: ST_TO_ADDR
20650: LD_VAR 0 10
20654: PUSH
20655: FOR_TO
20656: IFFALSE 20749
// begin if not ValidHex ( _x , _y ) then
20658: LD_VAR 0 11
20662: PPUSH
20663: LD_VAR 0 12
20667: PPUSH
20668: CALL_OW 488
20672: NOT
20673: IFFALSE 20677
// continue ;
20675: GO 20655
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20677: LD_VAR 0 11
20681: PPUSH
20682: LD_VAR 0 12
20686: PPUSH
20687: CALL_OW 351
20691: PUSH
20692: LD_VAR 0 11
20696: PPUSH
20697: LD_VAR 0 12
20701: PPUSH
20702: CALL_OW 554
20706: AND
20707: IFFALSE 20747
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20709: LD_ADDR_VAR 0 13
20713: PUSH
20714: LD_VAR 0 13
20718: PPUSH
20719: LD_VAR 0 13
20723: PUSH
20724: LD_INT 1
20726: PLUS
20727: PPUSH
20728: LD_VAR 0 11
20732: PUSH
20733: LD_VAR 0 12
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PPUSH
20742: CALL_OW 2
20746: ST_TO_ADDR
// end ;
20747: GO 20655
20749: POP
20750: POP
20751: GO 20635
20753: POP
20754: POP
// if not list then
20755: LD_VAR 0 13
20759: NOT
20760: IFFALSE 20764
// exit ;
20762: GO 20835
// for i in list do
20764: LD_ADDR_VAR 0 6
20768: PUSH
20769: LD_VAR 0 13
20773: PUSH
20774: FOR_IN
20775: IFFALSE 20833
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20777: LD_VAR 0 1
20781: PPUSH
20782: LD_STRING M
20784: PUSH
20785: LD_VAR 0 6
20789: PUSH
20790: LD_INT 1
20792: ARRAY
20793: PUSH
20794: LD_VAR 0 6
20798: PUSH
20799: LD_INT 2
20801: ARRAY
20802: PUSH
20803: LD_INT 0
20805: PUSH
20806: LD_INT 0
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: LD_INT 0
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: PUSH
20824: EMPTY
20825: LIST
20826: PPUSH
20827: CALL_OW 447
20831: GO 20774
20833: POP
20834: POP
// end ;
20835: LD_VAR 0 5
20839: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20840: LD_EXP 87
20844: NOT
20845: IFFALSE 20895
20847: GO 20849
20849: DISABLE
// begin initHack := true ;
20850: LD_ADDR_EXP 87
20854: PUSH
20855: LD_INT 1
20857: ST_TO_ADDR
// hackTanks := [ ] ;
20858: LD_ADDR_EXP 88
20862: PUSH
20863: EMPTY
20864: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20865: LD_ADDR_EXP 89
20869: PUSH
20870: EMPTY
20871: ST_TO_ADDR
// hackLimit := 3 ;
20872: LD_ADDR_EXP 90
20876: PUSH
20877: LD_INT 3
20879: ST_TO_ADDR
// hackDist := 12 ;
20880: LD_ADDR_EXP 91
20884: PUSH
20885: LD_INT 12
20887: ST_TO_ADDR
// hackCounter := [ ] ;
20888: LD_ADDR_EXP 92
20892: PUSH
20893: EMPTY
20894: ST_TO_ADDR
// end ;
20895: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20896: LD_EXP 87
20900: PUSH
20901: LD_INT 34
20903: PUSH
20904: LD_EXP 16
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PPUSH
20913: CALL_OW 69
20917: AND
20918: IFFALSE 21173
20920: GO 20922
20922: DISABLE
20923: LD_INT 0
20925: PPUSH
20926: PPUSH
// begin enable ;
20927: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20928: LD_ADDR_VAR 0 1
20932: PUSH
20933: LD_INT 34
20935: PUSH
20936: LD_EXP 16
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PPUSH
20945: CALL_OW 69
20949: PUSH
20950: FOR_IN
20951: IFFALSE 21171
// begin if not i in hackTanks then
20953: LD_VAR 0 1
20957: PUSH
20958: LD_EXP 88
20962: IN
20963: NOT
20964: IFFALSE 21047
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20966: LD_ADDR_EXP 88
20970: PUSH
20971: LD_EXP 88
20975: PPUSH
20976: LD_EXP 88
20980: PUSH
20981: LD_INT 1
20983: PLUS
20984: PPUSH
20985: LD_VAR 0 1
20989: PPUSH
20990: CALL_OW 1
20994: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20995: LD_ADDR_EXP 89
20999: PUSH
21000: LD_EXP 89
21004: PPUSH
21005: LD_EXP 89
21009: PUSH
21010: LD_INT 1
21012: PLUS
21013: PPUSH
21014: EMPTY
21015: PPUSH
21016: CALL_OW 1
21020: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21021: LD_ADDR_EXP 92
21025: PUSH
21026: LD_EXP 92
21030: PPUSH
21031: LD_EXP 92
21035: PUSH
21036: LD_INT 1
21038: PLUS
21039: PPUSH
21040: EMPTY
21041: PPUSH
21042: CALL_OW 1
21046: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21047: LD_VAR 0 1
21051: PPUSH
21052: CALL_OW 302
21056: NOT
21057: IFFALSE 21070
// begin HackUnlinkAll ( i ) ;
21059: LD_VAR 0 1
21063: PPUSH
21064: CALL 21176 0 1
// continue ;
21068: GO 20950
// end ; HackCheckCapturedStatus ( i ) ;
21070: LD_VAR 0 1
21074: PPUSH
21075: CALL 21619 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21079: LD_ADDR_VAR 0 2
21083: PUSH
21084: LD_INT 81
21086: PUSH
21087: LD_VAR 0 1
21091: PPUSH
21092: CALL_OW 255
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 33
21103: PUSH
21104: LD_INT 3
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 91
21113: PUSH
21114: LD_VAR 0 1
21118: PUSH
21119: LD_EXP 91
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 50
21131: PUSH
21132: EMPTY
21133: LIST
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: PPUSH
21141: CALL_OW 69
21145: ST_TO_ADDR
// if not tmp then
21146: LD_VAR 0 2
21150: NOT
21151: IFFALSE 21155
// continue ;
21153: GO 20950
// HackLink ( i , tmp ) ;
21155: LD_VAR 0 1
21159: PPUSH
21160: LD_VAR 0 2
21164: PPUSH
21165: CALL 21312 0 2
// end ;
21169: GO 20950
21171: POP
21172: POP
// end ;
21173: PPOPN 2
21175: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21176: LD_INT 0
21178: PPUSH
21179: PPUSH
21180: PPUSH
// if not hack in hackTanks then
21181: LD_VAR 0 1
21185: PUSH
21186: LD_EXP 88
21190: IN
21191: NOT
21192: IFFALSE 21196
// exit ;
21194: GO 21307
// index := GetElementIndex ( hackTanks , hack ) ;
21196: LD_ADDR_VAR 0 4
21200: PUSH
21201: LD_EXP 88
21205: PPUSH
21206: LD_VAR 0 1
21210: PPUSH
21211: CALL 28741 0 2
21215: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21216: LD_EXP 89
21220: PUSH
21221: LD_VAR 0 4
21225: ARRAY
21226: IFFALSE 21307
// begin for i in hackTanksCaptured [ index ] do
21228: LD_ADDR_VAR 0 3
21232: PUSH
21233: LD_EXP 89
21237: PUSH
21238: LD_VAR 0 4
21242: ARRAY
21243: PUSH
21244: FOR_IN
21245: IFFALSE 21271
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21247: LD_VAR 0 3
21251: PUSH
21252: LD_INT 1
21254: ARRAY
21255: PPUSH
21256: LD_VAR 0 3
21260: PUSH
21261: LD_INT 2
21263: ARRAY
21264: PPUSH
21265: CALL_OW 235
21269: GO 21244
21271: POP
21272: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21273: LD_ADDR_EXP 89
21277: PUSH
21278: LD_EXP 89
21282: PPUSH
21283: LD_VAR 0 4
21287: PPUSH
21288: EMPTY
21289: PPUSH
21290: CALL_OW 1
21294: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21295: LD_VAR 0 1
21299: PPUSH
21300: LD_INT 0
21302: PPUSH
21303: CALL_OW 505
// end ; end ;
21307: LD_VAR 0 2
21311: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21312: LD_INT 0
21314: PPUSH
21315: PPUSH
21316: PPUSH
// if not hack in hackTanks or not vehicles then
21317: LD_VAR 0 1
21321: PUSH
21322: LD_EXP 88
21326: IN
21327: NOT
21328: PUSH
21329: LD_VAR 0 2
21333: NOT
21334: OR
21335: IFFALSE 21339
// exit ;
21337: GO 21614
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21339: LD_ADDR_VAR 0 2
21343: PUSH
21344: LD_VAR 0 1
21348: PPUSH
21349: LD_VAR 0 2
21353: PPUSH
21354: LD_INT 1
21356: PPUSH
21357: LD_INT 1
21359: PPUSH
21360: CALL 29391 0 4
21364: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21365: LD_ADDR_VAR 0 5
21369: PUSH
21370: LD_EXP 88
21374: PPUSH
21375: LD_VAR 0 1
21379: PPUSH
21380: CALL 28741 0 2
21384: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21385: LD_EXP 89
21389: PUSH
21390: LD_VAR 0 5
21394: ARRAY
21395: PUSH
21396: LD_EXP 90
21400: LESS
21401: IFFALSE 21590
// begin for i := 1 to vehicles do
21403: LD_ADDR_VAR 0 4
21407: PUSH
21408: DOUBLE
21409: LD_INT 1
21411: DEC
21412: ST_TO_ADDR
21413: LD_VAR 0 2
21417: PUSH
21418: FOR_TO
21419: IFFALSE 21588
// begin if hackTanksCaptured [ index ] = hackLimit then
21421: LD_EXP 89
21425: PUSH
21426: LD_VAR 0 5
21430: ARRAY
21431: PUSH
21432: LD_EXP 90
21436: EQUAL
21437: IFFALSE 21441
// break ;
21439: GO 21588
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21441: LD_ADDR_EXP 92
21445: PUSH
21446: LD_EXP 92
21450: PPUSH
21451: LD_VAR 0 5
21455: PPUSH
21456: LD_EXP 92
21460: PUSH
21461: LD_VAR 0 5
21465: ARRAY
21466: PUSH
21467: LD_INT 1
21469: PLUS
21470: PPUSH
21471: CALL_OW 1
21475: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21476: LD_ADDR_EXP 89
21480: PUSH
21481: LD_EXP 89
21485: PPUSH
21486: LD_VAR 0 5
21490: PUSH
21491: LD_EXP 89
21495: PUSH
21496: LD_VAR 0 5
21500: ARRAY
21501: PUSH
21502: LD_INT 1
21504: PLUS
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PPUSH
21510: LD_VAR 0 2
21514: PUSH
21515: LD_VAR 0 4
21519: ARRAY
21520: PUSH
21521: LD_VAR 0 2
21525: PUSH
21526: LD_VAR 0 4
21530: ARRAY
21531: PPUSH
21532: CALL_OW 255
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PPUSH
21541: CALL 28956 0 3
21545: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21546: LD_VAR 0 2
21550: PUSH
21551: LD_VAR 0 4
21555: ARRAY
21556: PPUSH
21557: LD_VAR 0 1
21561: PPUSH
21562: CALL_OW 255
21566: PPUSH
21567: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21571: LD_VAR 0 2
21575: PUSH
21576: LD_VAR 0 4
21580: ARRAY
21581: PPUSH
21582: CALL_OW 141
// end ;
21586: GO 21418
21588: POP
21589: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21590: LD_VAR 0 1
21594: PPUSH
21595: LD_EXP 89
21599: PUSH
21600: LD_VAR 0 5
21604: ARRAY
21605: PUSH
21606: LD_INT 0
21608: PLUS
21609: PPUSH
21610: CALL_OW 505
// end ;
21614: LD_VAR 0 3
21618: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21619: LD_INT 0
21621: PPUSH
21622: PPUSH
21623: PPUSH
21624: PPUSH
// if not hack in hackTanks then
21625: LD_VAR 0 1
21629: PUSH
21630: LD_EXP 88
21634: IN
21635: NOT
21636: IFFALSE 21640
// exit ;
21638: GO 21880
// index := GetElementIndex ( hackTanks , hack ) ;
21640: LD_ADDR_VAR 0 4
21644: PUSH
21645: LD_EXP 88
21649: PPUSH
21650: LD_VAR 0 1
21654: PPUSH
21655: CALL 28741 0 2
21659: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21660: LD_ADDR_VAR 0 3
21664: PUSH
21665: DOUBLE
21666: LD_EXP 89
21670: PUSH
21671: LD_VAR 0 4
21675: ARRAY
21676: INC
21677: ST_TO_ADDR
21678: LD_INT 1
21680: PUSH
21681: FOR_DOWNTO
21682: IFFALSE 21854
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21684: LD_ADDR_VAR 0 5
21688: PUSH
21689: LD_EXP 89
21693: PUSH
21694: LD_VAR 0 4
21698: ARRAY
21699: PUSH
21700: LD_VAR 0 3
21704: ARRAY
21705: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21706: LD_VAR 0 5
21710: PUSH
21711: LD_INT 1
21713: ARRAY
21714: PPUSH
21715: CALL_OW 302
21719: NOT
21720: PUSH
21721: LD_VAR 0 5
21725: PUSH
21726: LD_INT 1
21728: ARRAY
21729: PPUSH
21730: CALL_OW 255
21734: PUSH
21735: LD_VAR 0 1
21739: PPUSH
21740: CALL_OW 255
21744: NONEQUAL
21745: OR
21746: IFFALSE 21852
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21748: LD_VAR 0 5
21752: PUSH
21753: LD_INT 1
21755: ARRAY
21756: PPUSH
21757: CALL_OW 305
21761: PUSH
21762: LD_VAR 0 5
21766: PUSH
21767: LD_INT 1
21769: ARRAY
21770: PPUSH
21771: CALL_OW 255
21775: PUSH
21776: LD_VAR 0 1
21780: PPUSH
21781: CALL_OW 255
21785: EQUAL
21786: AND
21787: IFFALSE 21811
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21789: LD_VAR 0 5
21793: PUSH
21794: LD_INT 1
21796: ARRAY
21797: PPUSH
21798: LD_VAR 0 5
21802: PUSH
21803: LD_INT 2
21805: ARRAY
21806: PPUSH
21807: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21811: LD_ADDR_EXP 89
21815: PUSH
21816: LD_EXP 89
21820: PPUSH
21821: LD_VAR 0 4
21825: PPUSH
21826: LD_EXP 89
21830: PUSH
21831: LD_VAR 0 4
21835: ARRAY
21836: PPUSH
21837: LD_VAR 0 3
21841: PPUSH
21842: CALL_OW 3
21846: PPUSH
21847: CALL_OW 1
21851: ST_TO_ADDR
// end ; end ;
21852: GO 21681
21854: POP
21855: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21856: LD_VAR 0 1
21860: PPUSH
21861: LD_EXP 89
21865: PUSH
21866: LD_VAR 0 4
21870: ARRAY
21871: PUSH
21872: LD_INT 0
21874: PLUS
21875: PPUSH
21876: CALL_OW 505
// end ;
21880: LD_VAR 0 2
21884: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21885: LD_INT 0
21887: PPUSH
21888: PPUSH
21889: PPUSH
21890: PPUSH
// if not hack in hackTanks then
21891: LD_VAR 0 1
21895: PUSH
21896: LD_EXP 88
21900: IN
21901: NOT
21902: IFFALSE 21906
// exit ;
21904: GO 21991
// index := GetElementIndex ( hackTanks , hack ) ;
21906: LD_ADDR_VAR 0 5
21910: PUSH
21911: LD_EXP 88
21915: PPUSH
21916: LD_VAR 0 1
21920: PPUSH
21921: CALL 28741 0 2
21925: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21926: LD_ADDR_VAR 0 4
21930: PUSH
21931: DOUBLE
21932: LD_INT 1
21934: DEC
21935: ST_TO_ADDR
21936: LD_EXP 89
21940: PUSH
21941: LD_VAR 0 5
21945: ARRAY
21946: PUSH
21947: FOR_TO
21948: IFFALSE 21989
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21950: LD_EXP 89
21954: PUSH
21955: LD_VAR 0 5
21959: ARRAY
21960: PUSH
21961: LD_VAR 0 4
21965: ARRAY
21966: PUSH
21967: LD_INT 1
21969: ARRAY
21970: PUSH
21971: LD_VAR 0 2
21975: EQUAL
21976: IFFALSE 21987
// KillUnit ( vehicle ) ;
21978: LD_VAR 0 2
21982: PPUSH
21983: CALL_OW 66
21987: GO 21947
21989: POP
21990: POP
// end ;
21991: LD_VAR 0 3
21995: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21996: LD_EXP 93
22000: NOT
22001: IFFALSE 22036
22003: GO 22005
22005: DISABLE
// begin initMiner := true ;
22006: LD_ADDR_EXP 93
22010: PUSH
22011: LD_INT 1
22013: ST_TO_ADDR
// minersList := [ ] ;
22014: LD_ADDR_EXP 94
22018: PUSH
22019: EMPTY
22020: ST_TO_ADDR
// minerMinesList := [ ] ;
22021: LD_ADDR_EXP 95
22025: PUSH
22026: EMPTY
22027: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22028: LD_ADDR_EXP 96
22032: PUSH
22033: LD_INT 5
22035: ST_TO_ADDR
// end ;
22036: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22037: LD_EXP 93
22041: PUSH
22042: LD_INT 34
22044: PUSH
22045: LD_EXP 21
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PPUSH
22054: CALL_OW 69
22058: AND
22059: IFFALSE 22522
22061: GO 22063
22063: DISABLE
22064: LD_INT 0
22066: PPUSH
22067: PPUSH
22068: PPUSH
22069: PPUSH
// begin enable ;
22070: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22071: LD_ADDR_VAR 0 1
22075: PUSH
22076: LD_INT 34
22078: PUSH
22079: LD_EXP 21
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PPUSH
22088: CALL_OW 69
22092: PUSH
22093: FOR_IN
22094: IFFALSE 22166
// begin if not i in minersList then
22096: LD_VAR 0 1
22100: PUSH
22101: LD_EXP 94
22105: IN
22106: NOT
22107: IFFALSE 22164
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22109: LD_ADDR_EXP 94
22113: PUSH
22114: LD_EXP 94
22118: PPUSH
22119: LD_EXP 94
22123: PUSH
22124: LD_INT 1
22126: PLUS
22127: PPUSH
22128: LD_VAR 0 1
22132: PPUSH
22133: CALL_OW 1
22137: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22138: LD_ADDR_EXP 95
22142: PUSH
22143: LD_EXP 95
22147: PPUSH
22148: LD_EXP 95
22152: PUSH
22153: LD_INT 1
22155: PLUS
22156: PPUSH
22157: EMPTY
22158: PPUSH
22159: CALL_OW 1
22163: ST_TO_ADDR
// end end ;
22164: GO 22093
22166: POP
22167: POP
// for i := minerMinesList downto 1 do
22168: LD_ADDR_VAR 0 1
22172: PUSH
22173: DOUBLE
22174: LD_EXP 95
22178: INC
22179: ST_TO_ADDR
22180: LD_INT 1
22182: PUSH
22183: FOR_DOWNTO
22184: IFFALSE 22520
// begin if IsLive ( minersList [ i ] ) then
22186: LD_EXP 94
22190: PUSH
22191: LD_VAR 0 1
22195: ARRAY
22196: PPUSH
22197: CALL_OW 300
22201: IFFALSE 22229
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22203: LD_EXP 94
22207: PUSH
22208: LD_VAR 0 1
22212: ARRAY
22213: PPUSH
22214: LD_EXP 95
22218: PUSH
22219: LD_VAR 0 1
22223: ARRAY
22224: PPUSH
22225: CALL_OW 505
// if not minerMinesList [ i ] then
22229: LD_EXP 95
22233: PUSH
22234: LD_VAR 0 1
22238: ARRAY
22239: NOT
22240: IFFALSE 22244
// continue ;
22242: GO 22183
// for j := minerMinesList [ i ] downto 1 do
22244: LD_ADDR_VAR 0 2
22248: PUSH
22249: DOUBLE
22250: LD_EXP 95
22254: PUSH
22255: LD_VAR 0 1
22259: ARRAY
22260: INC
22261: ST_TO_ADDR
22262: LD_INT 1
22264: PUSH
22265: FOR_DOWNTO
22266: IFFALSE 22516
// begin side := GetSide ( minersList [ i ] ) ;
22268: LD_ADDR_VAR 0 3
22272: PUSH
22273: LD_EXP 94
22277: PUSH
22278: LD_VAR 0 1
22282: ARRAY
22283: PPUSH
22284: CALL_OW 255
22288: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22289: LD_ADDR_VAR 0 4
22293: PUSH
22294: LD_EXP 95
22298: PUSH
22299: LD_VAR 0 1
22303: ARRAY
22304: PUSH
22305: LD_VAR 0 2
22309: ARRAY
22310: PUSH
22311: LD_INT 1
22313: ARRAY
22314: PPUSH
22315: LD_EXP 95
22319: PUSH
22320: LD_VAR 0 1
22324: ARRAY
22325: PUSH
22326: LD_VAR 0 2
22330: ARRAY
22331: PUSH
22332: LD_INT 2
22334: ARRAY
22335: PPUSH
22336: CALL_OW 428
22340: ST_TO_ADDR
// if not tmp then
22341: LD_VAR 0 4
22345: NOT
22346: IFFALSE 22350
// continue ;
22348: GO 22265
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22350: LD_VAR 0 4
22354: PUSH
22355: LD_INT 81
22357: PUSH
22358: LD_VAR 0 3
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PPUSH
22367: CALL_OW 69
22371: IN
22372: PUSH
22373: LD_EXP 95
22377: PUSH
22378: LD_VAR 0 1
22382: ARRAY
22383: PUSH
22384: LD_VAR 0 2
22388: ARRAY
22389: PUSH
22390: LD_INT 1
22392: ARRAY
22393: PPUSH
22394: LD_EXP 95
22398: PUSH
22399: LD_VAR 0 1
22403: ARRAY
22404: PUSH
22405: LD_VAR 0 2
22409: ARRAY
22410: PUSH
22411: LD_INT 2
22413: ARRAY
22414: PPUSH
22415: CALL_OW 458
22419: AND
22420: IFFALSE 22514
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22422: LD_EXP 95
22426: PUSH
22427: LD_VAR 0 1
22431: ARRAY
22432: PUSH
22433: LD_VAR 0 2
22437: ARRAY
22438: PUSH
22439: LD_INT 1
22441: ARRAY
22442: PPUSH
22443: LD_EXP 95
22447: PUSH
22448: LD_VAR 0 1
22452: ARRAY
22453: PUSH
22454: LD_VAR 0 2
22458: ARRAY
22459: PUSH
22460: LD_INT 2
22462: ARRAY
22463: PPUSH
22464: LD_VAR 0 3
22468: PPUSH
22469: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22473: LD_ADDR_EXP 95
22477: PUSH
22478: LD_EXP 95
22482: PPUSH
22483: LD_VAR 0 1
22487: PPUSH
22488: LD_EXP 95
22492: PUSH
22493: LD_VAR 0 1
22497: ARRAY
22498: PPUSH
22499: LD_VAR 0 2
22503: PPUSH
22504: CALL_OW 3
22508: PPUSH
22509: CALL_OW 1
22513: ST_TO_ADDR
// end ; end ;
22514: GO 22265
22516: POP
22517: POP
// end ;
22518: GO 22183
22520: POP
22521: POP
// end ;
22522: PPOPN 4
22524: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22525: LD_INT 0
22527: PPUSH
22528: PPUSH
// result := false ;
22529: LD_ADDR_VAR 0 4
22533: PUSH
22534: LD_INT 0
22536: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22537: LD_VAR 0 1
22541: PPUSH
22542: CALL_OW 264
22546: PUSH
22547: LD_EXP 21
22551: EQUAL
22552: NOT
22553: IFFALSE 22557
// exit ;
22555: GO 22797
// index := GetElementIndex ( minersList , unit ) ;
22557: LD_ADDR_VAR 0 5
22561: PUSH
22562: LD_EXP 94
22566: PPUSH
22567: LD_VAR 0 1
22571: PPUSH
22572: CALL 28741 0 2
22576: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22577: LD_EXP 95
22581: PUSH
22582: LD_VAR 0 5
22586: ARRAY
22587: PUSH
22588: LD_EXP 96
22592: GREATEREQUAL
22593: IFFALSE 22597
// exit ;
22595: GO 22797
// ComMoveXY ( unit , x , y ) ;
22597: LD_VAR 0 1
22601: PPUSH
22602: LD_VAR 0 2
22606: PPUSH
22607: LD_VAR 0 3
22611: PPUSH
22612: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22616: LD_INT 35
22618: PPUSH
22619: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22623: LD_VAR 0 1
22627: PPUSH
22628: LD_VAR 0 2
22632: PPUSH
22633: LD_VAR 0 3
22637: PPUSH
22638: CALL 59138 0 3
22642: NOT
22643: PUSH
22644: LD_VAR 0 1
22648: PPUSH
22649: CALL_OW 314
22653: AND
22654: IFFALSE 22658
// exit ;
22656: GO 22797
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22658: LD_VAR 0 2
22662: PPUSH
22663: LD_VAR 0 3
22667: PPUSH
22668: CALL_OW 428
22672: PUSH
22673: LD_VAR 0 1
22677: EQUAL
22678: PUSH
22679: LD_VAR 0 1
22683: PPUSH
22684: CALL_OW 314
22688: NOT
22689: AND
22690: IFFALSE 22616
// PlaySoundXY ( x , y , PlantMine ) ;
22692: LD_VAR 0 2
22696: PPUSH
22697: LD_VAR 0 3
22701: PPUSH
22702: LD_STRING PlantMine
22704: PPUSH
22705: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22709: LD_VAR 0 2
22713: PPUSH
22714: LD_VAR 0 3
22718: PPUSH
22719: LD_VAR 0 1
22723: PPUSH
22724: CALL_OW 255
22728: PPUSH
22729: LD_INT 0
22731: PPUSH
22732: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22736: LD_ADDR_EXP 95
22740: PUSH
22741: LD_EXP 95
22745: PPUSH
22746: LD_VAR 0 5
22750: PUSH
22751: LD_EXP 95
22755: PUSH
22756: LD_VAR 0 5
22760: ARRAY
22761: PUSH
22762: LD_INT 1
22764: PLUS
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PPUSH
22770: LD_VAR 0 2
22774: PUSH
22775: LD_VAR 0 3
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PPUSH
22784: CALL 28956 0 3
22788: ST_TO_ADDR
// result := true ;
22789: LD_ADDR_VAR 0 4
22793: PUSH
22794: LD_INT 1
22796: ST_TO_ADDR
// end ;
22797: LD_VAR 0 4
22801: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22802: LD_INT 0
22804: PPUSH
22805: PPUSH
22806: PPUSH
// if not unit in minersList then
22807: LD_VAR 0 1
22811: PUSH
22812: LD_EXP 94
22816: IN
22817: NOT
22818: IFFALSE 22822
// exit ;
22820: GO 23214
// index := GetElementIndex ( minersList , unit ) ;
22822: LD_ADDR_VAR 0 6
22826: PUSH
22827: LD_EXP 94
22831: PPUSH
22832: LD_VAR 0 1
22836: PPUSH
22837: CALL 28741 0 2
22841: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22842: LD_ADDR_VAR 0 5
22846: PUSH
22847: DOUBLE
22848: LD_EXP 95
22852: PUSH
22853: LD_VAR 0 6
22857: ARRAY
22858: INC
22859: ST_TO_ADDR
22860: LD_INT 1
22862: PUSH
22863: FOR_DOWNTO
22864: IFFALSE 23025
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22866: LD_EXP 95
22870: PUSH
22871: LD_VAR 0 6
22875: ARRAY
22876: PUSH
22877: LD_VAR 0 5
22881: ARRAY
22882: PUSH
22883: LD_INT 1
22885: ARRAY
22886: PUSH
22887: LD_VAR 0 2
22891: EQUAL
22892: PUSH
22893: LD_EXP 95
22897: PUSH
22898: LD_VAR 0 6
22902: ARRAY
22903: PUSH
22904: LD_VAR 0 5
22908: ARRAY
22909: PUSH
22910: LD_INT 2
22912: ARRAY
22913: PUSH
22914: LD_VAR 0 3
22918: EQUAL
22919: AND
22920: IFFALSE 23023
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22922: LD_EXP 95
22926: PUSH
22927: LD_VAR 0 6
22931: ARRAY
22932: PUSH
22933: LD_VAR 0 5
22937: ARRAY
22938: PUSH
22939: LD_INT 1
22941: ARRAY
22942: PPUSH
22943: LD_EXP 95
22947: PUSH
22948: LD_VAR 0 6
22952: ARRAY
22953: PUSH
22954: LD_VAR 0 5
22958: ARRAY
22959: PUSH
22960: LD_INT 2
22962: ARRAY
22963: PPUSH
22964: LD_VAR 0 1
22968: PPUSH
22969: CALL_OW 255
22973: PPUSH
22974: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22978: LD_ADDR_EXP 95
22982: PUSH
22983: LD_EXP 95
22987: PPUSH
22988: LD_VAR 0 6
22992: PPUSH
22993: LD_EXP 95
22997: PUSH
22998: LD_VAR 0 6
23002: ARRAY
23003: PPUSH
23004: LD_VAR 0 5
23008: PPUSH
23009: CALL_OW 3
23013: PPUSH
23014: CALL_OW 1
23018: ST_TO_ADDR
// exit ;
23019: POP
23020: POP
23021: GO 23214
// end ; end ;
23023: GO 22863
23025: POP
23026: POP
// for i := minerMinesList [ index ] downto 1 do
23027: LD_ADDR_VAR 0 5
23031: PUSH
23032: DOUBLE
23033: LD_EXP 95
23037: PUSH
23038: LD_VAR 0 6
23042: ARRAY
23043: INC
23044: ST_TO_ADDR
23045: LD_INT 1
23047: PUSH
23048: FOR_DOWNTO
23049: IFFALSE 23212
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23051: LD_EXP 95
23055: PUSH
23056: LD_VAR 0 6
23060: ARRAY
23061: PUSH
23062: LD_VAR 0 5
23066: ARRAY
23067: PUSH
23068: LD_INT 1
23070: ARRAY
23071: PPUSH
23072: LD_EXP 95
23076: PUSH
23077: LD_VAR 0 6
23081: ARRAY
23082: PUSH
23083: LD_VAR 0 5
23087: ARRAY
23088: PUSH
23089: LD_INT 2
23091: ARRAY
23092: PPUSH
23093: LD_VAR 0 2
23097: PPUSH
23098: LD_VAR 0 3
23102: PPUSH
23103: CALL_OW 298
23107: PUSH
23108: LD_INT 6
23110: LESS
23111: IFFALSE 23210
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23113: LD_EXP 95
23117: PUSH
23118: LD_VAR 0 6
23122: ARRAY
23123: PUSH
23124: LD_VAR 0 5
23128: ARRAY
23129: PUSH
23130: LD_INT 1
23132: ARRAY
23133: PPUSH
23134: LD_EXP 95
23138: PUSH
23139: LD_VAR 0 6
23143: ARRAY
23144: PUSH
23145: LD_VAR 0 5
23149: ARRAY
23150: PUSH
23151: LD_INT 2
23153: ARRAY
23154: PPUSH
23155: LD_VAR 0 1
23159: PPUSH
23160: CALL_OW 255
23164: PPUSH
23165: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23169: LD_ADDR_EXP 95
23173: PUSH
23174: LD_EXP 95
23178: PPUSH
23179: LD_VAR 0 6
23183: PPUSH
23184: LD_EXP 95
23188: PUSH
23189: LD_VAR 0 6
23193: ARRAY
23194: PPUSH
23195: LD_VAR 0 5
23199: PPUSH
23200: CALL_OW 3
23204: PPUSH
23205: CALL_OW 1
23209: ST_TO_ADDR
// end ; end ;
23210: GO 23048
23212: POP
23213: POP
// end ;
23214: LD_VAR 0 4
23218: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23219: LD_INT 0
23221: PPUSH
23222: PPUSH
23223: PPUSH
23224: PPUSH
23225: PPUSH
23226: PPUSH
23227: PPUSH
23228: PPUSH
23229: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23230: LD_VAR 0 1
23234: PPUSH
23235: CALL_OW 264
23239: PUSH
23240: LD_EXP 21
23244: EQUAL
23245: NOT
23246: PUSH
23247: LD_VAR 0 1
23251: PUSH
23252: LD_EXP 94
23256: IN
23257: NOT
23258: OR
23259: IFFALSE 23263
// exit ;
23261: GO 23585
// index := GetElementIndex ( minersList , unit ) ;
23263: LD_ADDR_VAR 0 6
23267: PUSH
23268: LD_EXP 94
23272: PPUSH
23273: LD_VAR 0 1
23277: PPUSH
23278: CALL 28741 0 2
23282: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23283: LD_ADDR_VAR 0 8
23287: PUSH
23288: LD_EXP 96
23292: PUSH
23293: LD_EXP 95
23297: PUSH
23298: LD_VAR 0 6
23302: ARRAY
23303: MINUS
23304: ST_TO_ADDR
// if not minesFreeAmount then
23305: LD_VAR 0 8
23309: NOT
23310: IFFALSE 23314
// exit ;
23312: GO 23585
// tmp := [ ] ;
23314: LD_ADDR_VAR 0 7
23318: PUSH
23319: EMPTY
23320: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23321: LD_ADDR_VAR 0 5
23325: PUSH
23326: DOUBLE
23327: LD_INT 1
23329: DEC
23330: ST_TO_ADDR
23331: LD_VAR 0 8
23335: PUSH
23336: FOR_TO
23337: IFFALSE 23532
// begin _d := rand ( 0 , 5 ) ;
23339: LD_ADDR_VAR 0 11
23343: PUSH
23344: LD_INT 0
23346: PPUSH
23347: LD_INT 5
23349: PPUSH
23350: CALL_OW 12
23354: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23355: LD_ADDR_VAR 0 12
23359: PUSH
23360: LD_INT 2
23362: PPUSH
23363: LD_INT 6
23365: PPUSH
23366: CALL_OW 12
23370: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23371: LD_ADDR_VAR 0 9
23375: PUSH
23376: LD_VAR 0 2
23380: PPUSH
23381: LD_VAR 0 11
23385: PPUSH
23386: LD_VAR 0 12
23390: PPUSH
23391: CALL_OW 272
23395: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23396: LD_ADDR_VAR 0 10
23400: PUSH
23401: LD_VAR 0 3
23405: PPUSH
23406: LD_VAR 0 11
23410: PPUSH
23411: LD_VAR 0 12
23415: PPUSH
23416: CALL_OW 273
23420: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23421: LD_VAR 0 9
23425: PPUSH
23426: LD_VAR 0 10
23430: PPUSH
23431: CALL_OW 488
23435: PUSH
23436: LD_VAR 0 9
23440: PUSH
23441: LD_VAR 0 10
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_VAR 0 7
23454: IN
23455: NOT
23456: AND
23457: PUSH
23458: LD_VAR 0 9
23462: PPUSH
23463: LD_VAR 0 10
23467: PPUSH
23468: CALL_OW 458
23472: NOT
23473: AND
23474: IFFALSE 23516
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23476: LD_ADDR_VAR 0 7
23480: PUSH
23481: LD_VAR 0 7
23485: PPUSH
23486: LD_VAR 0 7
23490: PUSH
23491: LD_INT 1
23493: PLUS
23494: PPUSH
23495: LD_VAR 0 9
23499: PUSH
23500: LD_VAR 0 10
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PPUSH
23509: CALL_OW 1
23513: ST_TO_ADDR
23514: GO 23530
// i := i - 1 ;
23516: LD_ADDR_VAR 0 5
23520: PUSH
23521: LD_VAR 0 5
23525: PUSH
23526: LD_INT 1
23528: MINUS
23529: ST_TO_ADDR
// end ;
23530: GO 23336
23532: POP
23533: POP
// for i in tmp do
23534: LD_ADDR_VAR 0 5
23538: PUSH
23539: LD_VAR 0 7
23543: PUSH
23544: FOR_IN
23545: IFFALSE 23583
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23547: LD_VAR 0 1
23551: PPUSH
23552: LD_VAR 0 5
23556: PUSH
23557: LD_INT 1
23559: ARRAY
23560: PPUSH
23561: LD_VAR 0 5
23565: PUSH
23566: LD_INT 2
23568: ARRAY
23569: PPUSH
23570: CALL 22525 0 3
23574: NOT
23575: IFFALSE 23581
// exit ;
23577: POP
23578: POP
23579: GO 23585
23581: GO 23544
23583: POP
23584: POP
// end ;
23585: LD_VAR 0 4
23589: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23590: LD_INT 0
23592: PPUSH
23593: PPUSH
23594: PPUSH
23595: PPUSH
23596: PPUSH
23597: PPUSH
23598: PPUSH
// if not GetClass ( unit ) = class_sniper then
23599: LD_VAR 0 1
23603: PPUSH
23604: CALL_OW 257
23608: PUSH
23609: LD_INT 5
23611: EQUAL
23612: NOT
23613: IFFALSE 23617
// exit ;
23615: GO 24005
// dist := 8 ;
23617: LD_ADDR_VAR 0 5
23621: PUSH
23622: LD_INT 8
23624: ST_TO_ADDR
// viewRange := 12 ;
23625: LD_ADDR_VAR 0 7
23629: PUSH
23630: LD_INT 12
23632: ST_TO_ADDR
// side := GetSide ( unit ) ;
23633: LD_ADDR_VAR 0 6
23637: PUSH
23638: LD_VAR 0 1
23642: PPUSH
23643: CALL_OW 255
23647: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23648: LD_INT 61
23650: PPUSH
23651: LD_VAR 0 6
23655: PPUSH
23656: CALL_OW 321
23660: PUSH
23661: LD_INT 2
23663: EQUAL
23664: IFFALSE 23674
// viewRange := 16 ;
23666: LD_ADDR_VAR 0 7
23670: PUSH
23671: LD_INT 16
23673: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23674: LD_VAR 0 1
23678: PPUSH
23679: LD_VAR 0 2
23683: PPUSH
23684: LD_VAR 0 3
23688: PPUSH
23689: CALL_OW 297
23693: PUSH
23694: LD_VAR 0 5
23698: GREATER
23699: IFFALSE 23778
// begin ComMoveXY ( unit , x , y ) ;
23701: LD_VAR 0 1
23705: PPUSH
23706: LD_VAR 0 2
23710: PPUSH
23711: LD_VAR 0 3
23715: PPUSH
23716: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23720: LD_INT 35
23722: PPUSH
23723: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23727: LD_VAR 0 1
23731: PPUSH
23732: LD_VAR 0 2
23736: PPUSH
23737: LD_VAR 0 3
23741: PPUSH
23742: CALL 59138 0 3
23746: NOT
23747: IFFALSE 23751
// exit ;
23749: GO 24005
// until GetDistUnitXY ( unit , x , y ) < dist ;
23751: LD_VAR 0 1
23755: PPUSH
23756: LD_VAR 0 2
23760: PPUSH
23761: LD_VAR 0 3
23765: PPUSH
23766: CALL_OW 297
23770: PUSH
23771: LD_VAR 0 5
23775: LESS
23776: IFFALSE 23720
// end ; ComTurnXY ( unit , x , y ) ;
23778: LD_VAR 0 1
23782: PPUSH
23783: LD_VAR 0 2
23787: PPUSH
23788: LD_VAR 0 3
23792: PPUSH
23793: CALL_OW 118
// wait ( 5 ) ;
23797: LD_INT 5
23799: PPUSH
23800: CALL_OW 67
// _d := GetDir ( unit ) ;
23804: LD_ADDR_VAR 0 10
23808: PUSH
23809: LD_VAR 0 1
23813: PPUSH
23814: CALL_OW 254
23818: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
23819: LD_ADDR_VAR 0 8
23823: PUSH
23824: LD_VAR 0 1
23828: PPUSH
23829: CALL_OW 250
23833: PPUSH
23834: LD_VAR 0 10
23838: PPUSH
23839: LD_VAR 0 5
23843: PPUSH
23844: CALL_OW 272
23848: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
23849: LD_ADDR_VAR 0 9
23853: PUSH
23854: LD_VAR 0 1
23858: PPUSH
23859: CALL_OW 251
23863: PPUSH
23864: LD_VAR 0 10
23868: PPUSH
23869: LD_VAR 0 5
23873: PPUSH
23874: CALL_OW 273
23878: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23879: LD_VAR 0 8
23883: PPUSH
23884: LD_VAR 0 9
23888: PPUSH
23889: CALL_OW 488
23893: NOT
23894: IFFALSE 23898
// exit ;
23896: GO 24005
// ComAnimCustom ( unit , 1 ) ;
23898: LD_VAR 0 1
23902: PPUSH
23903: LD_INT 1
23905: PPUSH
23906: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23910: LD_VAR 0 8
23914: PPUSH
23915: LD_VAR 0 9
23919: PPUSH
23920: LD_VAR 0 6
23924: PPUSH
23925: LD_VAR 0 7
23929: PPUSH
23930: CALL_OW 330
// repeat wait ( 1 ) ;
23934: LD_INT 1
23936: PPUSH
23937: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
23941: LD_VAR 0 1
23945: PPUSH
23946: CALL_OW 316
23950: PUSH
23951: LD_VAR 0 1
23955: PPUSH
23956: CALL_OW 314
23960: OR
23961: PUSH
23962: LD_VAR 0 1
23966: PPUSH
23967: CALL_OW 302
23971: NOT
23972: OR
23973: PUSH
23974: LD_VAR 0 1
23978: PPUSH
23979: CALL_OW 301
23983: OR
23984: IFFALSE 23934
// RemoveSeeing ( _x , _y , side ) ;
23986: LD_VAR 0 8
23990: PPUSH
23991: LD_VAR 0 9
23995: PPUSH
23996: LD_VAR 0 6
24000: PPUSH
24001: CALL_OW 331
// end ; end_of_file
24005: LD_VAR 0 4
24009: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24010: LD_INT 0
24012: PPUSH
24013: PPUSH
// if exist_mode then
24014: LD_VAR 0 2
24018: IFFALSE 24043
// unit := CreateCharacter ( prefix & ident ) else
24020: LD_ADDR_VAR 0 5
24024: PUSH
24025: LD_VAR 0 3
24029: PUSH
24030: LD_VAR 0 1
24034: STR
24035: PPUSH
24036: CALL_OW 34
24040: ST_TO_ADDR
24041: GO 24058
// unit := NewCharacter ( ident ) ;
24043: LD_ADDR_VAR 0 5
24047: PUSH
24048: LD_VAR 0 1
24052: PPUSH
24053: CALL_OW 25
24057: ST_TO_ADDR
// result := unit ;
24058: LD_ADDR_VAR 0 4
24062: PUSH
24063: LD_VAR 0 5
24067: ST_TO_ADDR
// end ;
24068: LD_VAR 0 4
24072: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24073: LD_INT 0
24075: PPUSH
24076: PPUSH
// if not side or not nation then
24077: LD_VAR 0 1
24081: NOT
24082: PUSH
24083: LD_VAR 0 2
24087: NOT
24088: OR
24089: IFFALSE 24093
// exit ;
24091: GO 24857
// case nation of nation_american :
24093: LD_VAR 0 2
24097: PUSH
24098: LD_INT 1
24100: DOUBLE
24101: EQUAL
24102: IFTRUE 24106
24104: GO 24320
24106: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24107: LD_ADDR_VAR 0 4
24111: PUSH
24112: LD_INT 35
24114: PUSH
24115: LD_INT 45
24117: PUSH
24118: LD_INT 46
24120: PUSH
24121: LD_INT 47
24123: PUSH
24124: LD_INT 82
24126: PUSH
24127: LD_INT 83
24129: PUSH
24130: LD_INT 84
24132: PUSH
24133: LD_INT 85
24135: PUSH
24136: LD_INT 86
24138: PUSH
24139: LD_INT 1
24141: PUSH
24142: LD_INT 2
24144: PUSH
24145: LD_INT 6
24147: PUSH
24148: LD_INT 15
24150: PUSH
24151: LD_INT 16
24153: PUSH
24154: LD_INT 7
24156: PUSH
24157: LD_INT 12
24159: PUSH
24160: LD_INT 13
24162: PUSH
24163: LD_INT 10
24165: PUSH
24166: LD_INT 14
24168: PUSH
24169: LD_INT 20
24171: PUSH
24172: LD_INT 21
24174: PUSH
24175: LD_INT 22
24177: PUSH
24178: LD_INT 25
24180: PUSH
24181: LD_INT 32
24183: PUSH
24184: LD_INT 27
24186: PUSH
24187: LD_INT 36
24189: PUSH
24190: LD_INT 69
24192: PUSH
24193: LD_INT 39
24195: PUSH
24196: LD_INT 34
24198: PUSH
24199: LD_INT 40
24201: PUSH
24202: LD_INT 48
24204: PUSH
24205: LD_INT 49
24207: PUSH
24208: LD_INT 50
24210: PUSH
24211: LD_INT 51
24213: PUSH
24214: LD_INT 52
24216: PUSH
24217: LD_INT 53
24219: PUSH
24220: LD_INT 54
24222: PUSH
24223: LD_INT 55
24225: PUSH
24226: LD_INT 56
24228: PUSH
24229: LD_INT 57
24231: PUSH
24232: LD_INT 58
24234: PUSH
24235: LD_INT 59
24237: PUSH
24238: LD_INT 60
24240: PUSH
24241: LD_INT 61
24243: PUSH
24244: LD_INT 62
24246: PUSH
24247: LD_INT 80
24249: PUSH
24250: LD_INT 82
24252: PUSH
24253: LD_INT 83
24255: PUSH
24256: LD_INT 84
24258: PUSH
24259: LD_INT 85
24261: PUSH
24262: LD_INT 86
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: ST_TO_ADDR
24318: GO 24781
24320: LD_INT 2
24322: DOUBLE
24323: EQUAL
24324: IFTRUE 24328
24326: GO 24550
24328: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
24329: LD_ADDR_VAR 0 4
24333: PUSH
24334: LD_INT 35
24336: PUSH
24337: LD_INT 45
24339: PUSH
24340: LD_INT 46
24342: PUSH
24343: LD_INT 47
24345: PUSH
24346: LD_INT 82
24348: PUSH
24349: LD_INT 83
24351: PUSH
24352: LD_INT 84
24354: PUSH
24355: LD_INT 85
24357: PUSH
24358: LD_INT 87
24360: PUSH
24361: LD_INT 70
24363: PUSH
24364: LD_INT 1
24366: PUSH
24367: LD_INT 11
24369: PUSH
24370: LD_INT 3
24372: PUSH
24373: LD_INT 4
24375: PUSH
24376: LD_INT 5
24378: PUSH
24379: LD_INT 6
24381: PUSH
24382: LD_INT 15
24384: PUSH
24385: LD_INT 18
24387: PUSH
24388: LD_INT 7
24390: PUSH
24391: LD_INT 17
24393: PUSH
24394: LD_INT 8
24396: PUSH
24397: LD_INT 20
24399: PUSH
24400: LD_INT 21
24402: PUSH
24403: LD_INT 22
24405: PUSH
24406: LD_INT 72
24408: PUSH
24409: LD_INT 26
24411: PUSH
24412: LD_INT 69
24414: PUSH
24415: LD_INT 39
24417: PUSH
24418: LD_INT 40
24420: PUSH
24421: LD_INT 41
24423: PUSH
24424: LD_INT 42
24426: PUSH
24427: LD_INT 43
24429: PUSH
24430: LD_INT 48
24432: PUSH
24433: LD_INT 49
24435: PUSH
24436: LD_INT 50
24438: PUSH
24439: LD_INT 51
24441: PUSH
24442: LD_INT 52
24444: PUSH
24445: LD_INT 53
24447: PUSH
24448: LD_INT 54
24450: PUSH
24451: LD_INT 55
24453: PUSH
24454: LD_INT 56
24456: PUSH
24457: LD_INT 60
24459: PUSH
24460: LD_INT 61
24462: PUSH
24463: LD_INT 62
24465: PUSH
24466: LD_INT 66
24468: PUSH
24469: LD_INT 67
24471: PUSH
24472: LD_INT 68
24474: PUSH
24475: LD_INT 81
24477: PUSH
24478: LD_INT 82
24480: PUSH
24481: LD_INT 83
24483: PUSH
24484: LD_INT 84
24486: PUSH
24487: LD_INT 85
24489: PUSH
24490: LD_INT 87
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: ST_TO_ADDR
24548: GO 24781
24550: LD_INT 3
24552: DOUBLE
24553: EQUAL
24554: IFTRUE 24558
24556: GO 24780
24558: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24559: LD_ADDR_VAR 0 4
24563: PUSH
24564: LD_INT 46
24566: PUSH
24567: LD_INT 47
24569: PUSH
24570: LD_INT 1
24572: PUSH
24573: LD_INT 2
24575: PUSH
24576: LD_INT 82
24578: PUSH
24579: LD_INT 83
24581: PUSH
24582: LD_INT 84
24584: PUSH
24585: LD_INT 85
24587: PUSH
24588: LD_INT 86
24590: PUSH
24591: LD_INT 11
24593: PUSH
24594: LD_INT 9
24596: PUSH
24597: LD_INT 20
24599: PUSH
24600: LD_INT 19
24602: PUSH
24603: LD_INT 21
24605: PUSH
24606: LD_INT 24
24608: PUSH
24609: LD_INT 22
24611: PUSH
24612: LD_INT 25
24614: PUSH
24615: LD_INT 28
24617: PUSH
24618: LD_INT 29
24620: PUSH
24621: LD_INT 30
24623: PUSH
24624: LD_INT 31
24626: PUSH
24627: LD_INT 37
24629: PUSH
24630: LD_INT 38
24632: PUSH
24633: LD_INT 32
24635: PUSH
24636: LD_INT 27
24638: PUSH
24639: LD_INT 33
24641: PUSH
24642: LD_INT 69
24644: PUSH
24645: LD_INT 39
24647: PUSH
24648: LD_INT 34
24650: PUSH
24651: LD_INT 40
24653: PUSH
24654: LD_INT 71
24656: PUSH
24657: LD_INT 23
24659: PUSH
24660: LD_INT 44
24662: PUSH
24663: LD_INT 48
24665: PUSH
24666: LD_INT 49
24668: PUSH
24669: LD_INT 50
24671: PUSH
24672: LD_INT 51
24674: PUSH
24675: LD_INT 52
24677: PUSH
24678: LD_INT 53
24680: PUSH
24681: LD_INT 54
24683: PUSH
24684: LD_INT 55
24686: PUSH
24687: LD_INT 56
24689: PUSH
24690: LD_INT 57
24692: PUSH
24693: LD_INT 58
24695: PUSH
24696: LD_INT 59
24698: PUSH
24699: LD_INT 63
24701: PUSH
24702: LD_INT 64
24704: PUSH
24705: LD_INT 65
24707: PUSH
24708: LD_INT 82
24710: PUSH
24711: LD_INT 83
24713: PUSH
24714: LD_INT 84
24716: PUSH
24717: LD_INT 85
24719: PUSH
24720: LD_INT 86
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: ST_TO_ADDR
24778: GO 24781
24780: POP
// if state > - 1 and state < 3 then
24781: LD_VAR 0 3
24785: PUSH
24786: LD_INT 1
24788: NEG
24789: GREATER
24790: PUSH
24791: LD_VAR 0 3
24795: PUSH
24796: LD_INT 3
24798: LESS
24799: AND
24800: IFFALSE 24857
// for i in result do
24802: LD_ADDR_VAR 0 5
24806: PUSH
24807: LD_VAR 0 4
24811: PUSH
24812: FOR_IN
24813: IFFALSE 24855
// if GetTech ( i , side ) <> state then
24815: LD_VAR 0 5
24819: PPUSH
24820: LD_VAR 0 1
24824: PPUSH
24825: CALL_OW 321
24829: PUSH
24830: LD_VAR 0 3
24834: NONEQUAL
24835: IFFALSE 24853
// result := result diff i ;
24837: LD_ADDR_VAR 0 4
24841: PUSH
24842: LD_VAR 0 4
24846: PUSH
24847: LD_VAR 0 5
24851: DIFF
24852: ST_TO_ADDR
24853: GO 24812
24855: POP
24856: POP
// end ;
24857: LD_VAR 0 4
24861: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24862: LD_INT 0
24864: PPUSH
24865: PPUSH
24866: PPUSH
// result := true ;
24867: LD_ADDR_VAR 0 3
24871: PUSH
24872: LD_INT 1
24874: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24875: LD_ADDR_VAR 0 5
24879: PUSH
24880: LD_VAR 0 2
24884: PPUSH
24885: CALL_OW 480
24889: ST_TO_ADDR
// if not tmp then
24890: LD_VAR 0 5
24894: NOT
24895: IFFALSE 24899
// exit ;
24897: GO 24948
// for i in tmp do
24899: LD_ADDR_VAR 0 4
24903: PUSH
24904: LD_VAR 0 5
24908: PUSH
24909: FOR_IN
24910: IFFALSE 24946
// if GetTech ( i , side ) <> state_researched then
24912: LD_VAR 0 4
24916: PPUSH
24917: LD_VAR 0 1
24921: PPUSH
24922: CALL_OW 321
24926: PUSH
24927: LD_INT 2
24929: NONEQUAL
24930: IFFALSE 24944
// begin result := false ;
24932: LD_ADDR_VAR 0 3
24936: PUSH
24937: LD_INT 0
24939: ST_TO_ADDR
// exit ;
24940: POP
24941: POP
24942: GO 24948
// end ;
24944: GO 24909
24946: POP
24947: POP
// end ;
24948: LD_VAR 0 3
24952: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24953: LD_INT 0
24955: PPUSH
24956: PPUSH
24957: PPUSH
24958: PPUSH
24959: PPUSH
24960: PPUSH
24961: PPUSH
24962: PPUSH
24963: PPUSH
24964: PPUSH
24965: PPUSH
24966: PPUSH
24967: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24968: LD_VAR 0 1
24972: NOT
24973: PUSH
24974: LD_VAR 0 1
24978: PPUSH
24979: CALL_OW 257
24983: PUSH
24984: LD_INT 9
24986: NONEQUAL
24987: OR
24988: IFFALSE 24992
// exit ;
24990: GO 25565
// side := GetSide ( unit ) ;
24992: LD_ADDR_VAR 0 9
24996: PUSH
24997: LD_VAR 0 1
25001: PPUSH
25002: CALL_OW 255
25006: ST_TO_ADDR
// tech_space := tech_spacanom ;
25007: LD_ADDR_VAR 0 12
25011: PUSH
25012: LD_INT 29
25014: ST_TO_ADDR
// tech_time := tech_taurad ;
25015: LD_ADDR_VAR 0 13
25019: PUSH
25020: LD_INT 28
25022: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25023: LD_ADDR_VAR 0 11
25027: PUSH
25028: LD_VAR 0 1
25032: PPUSH
25033: CALL_OW 310
25037: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25038: LD_VAR 0 11
25042: PPUSH
25043: CALL_OW 247
25047: PUSH
25048: LD_INT 2
25050: EQUAL
25051: IFFALSE 25055
// exit ;
25053: GO 25565
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25055: LD_ADDR_VAR 0 8
25059: PUSH
25060: LD_INT 81
25062: PUSH
25063: LD_VAR 0 9
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 3
25074: PUSH
25075: LD_INT 21
25077: PUSH
25078: LD_INT 3
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PPUSH
25093: CALL_OW 69
25097: ST_TO_ADDR
// if not tmp then
25098: LD_VAR 0 8
25102: NOT
25103: IFFALSE 25107
// exit ;
25105: GO 25565
// if in_unit then
25107: LD_VAR 0 11
25111: IFFALSE 25135
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25113: LD_ADDR_VAR 0 10
25117: PUSH
25118: LD_VAR 0 8
25122: PPUSH
25123: LD_VAR 0 11
25127: PPUSH
25128: CALL_OW 74
25132: ST_TO_ADDR
25133: GO 25155
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25135: LD_ADDR_VAR 0 10
25139: PUSH
25140: LD_VAR 0 8
25144: PPUSH
25145: LD_VAR 0 1
25149: PPUSH
25150: CALL_OW 74
25154: ST_TO_ADDR
// if not enemy then
25155: LD_VAR 0 10
25159: NOT
25160: IFFALSE 25164
// exit ;
25162: GO 25565
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25164: LD_VAR 0 11
25168: PUSH
25169: LD_VAR 0 11
25173: PPUSH
25174: LD_VAR 0 10
25178: PPUSH
25179: CALL_OW 296
25183: PUSH
25184: LD_INT 13
25186: GREATER
25187: AND
25188: PUSH
25189: LD_VAR 0 1
25193: PPUSH
25194: LD_VAR 0 10
25198: PPUSH
25199: CALL_OW 296
25203: PUSH
25204: LD_INT 12
25206: GREATER
25207: OR
25208: IFFALSE 25212
// exit ;
25210: GO 25565
// missile := [ 1 ] ;
25212: LD_ADDR_VAR 0 14
25216: PUSH
25217: LD_INT 1
25219: PUSH
25220: EMPTY
25221: LIST
25222: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25223: LD_VAR 0 9
25227: PPUSH
25228: LD_VAR 0 12
25232: PPUSH
25233: CALL_OW 325
25237: IFFALSE 25266
// missile := Insert ( missile , missile + 1 , 2 ) ;
25239: LD_ADDR_VAR 0 14
25243: PUSH
25244: LD_VAR 0 14
25248: PPUSH
25249: LD_VAR 0 14
25253: PUSH
25254: LD_INT 1
25256: PLUS
25257: PPUSH
25258: LD_INT 2
25260: PPUSH
25261: CALL_OW 2
25265: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25266: LD_VAR 0 9
25270: PPUSH
25271: LD_VAR 0 13
25275: PPUSH
25276: CALL_OW 325
25280: PUSH
25281: LD_VAR 0 10
25285: PPUSH
25286: CALL_OW 255
25290: PPUSH
25291: LD_VAR 0 13
25295: PPUSH
25296: CALL_OW 325
25300: NOT
25301: AND
25302: IFFALSE 25331
// missile := Insert ( missile , missile + 1 , 3 ) ;
25304: LD_ADDR_VAR 0 14
25308: PUSH
25309: LD_VAR 0 14
25313: PPUSH
25314: LD_VAR 0 14
25318: PUSH
25319: LD_INT 1
25321: PLUS
25322: PPUSH
25323: LD_INT 3
25325: PPUSH
25326: CALL_OW 2
25330: ST_TO_ADDR
// if missile < 2 then
25331: LD_VAR 0 14
25335: PUSH
25336: LD_INT 2
25338: LESS
25339: IFFALSE 25343
// exit ;
25341: GO 25565
// x := GetX ( enemy ) ;
25343: LD_ADDR_VAR 0 4
25347: PUSH
25348: LD_VAR 0 10
25352: PPUSH
25353: CALL_OW 250
25357: ST_TO_ADDR
// y := GetY ( enemy ) ;
25358: LD_ADDR_VAR 0 5
25362: PUSH
25363: LD_VAR 0 10
25367: PPUSH
25368: CALL_OW 251
25372: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25373: LD_ADDR_VAR 0 6
25377: PUSH
25378: LD_VAR 0 4
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PPUSH
25387: LD_INT 1
25389: PPUSH
25390: CALL_OW 12
25394: PLUS
25395: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25396: LD_ADDR_VAR 0 7
25400: PUSH
25401: LD_VAR 0 5
25405: PUSH
25406: LD_INT 1
25408: NEG
25409: PPUSH
25410: LD_INT 1
25412: PPUSH
25413: CALL_OW 12
25417: PLUS
25418: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25419: LD_VAR 0 6
25423: PPUSH
25424: LD_VAR 0 7
25428: PPUSH
25429: CALL_OW 488
25433: NOT
25434: IFFALSE 25456
// begin _x := x ;
25436: LD_ADDR_VAR 0 6
25440: PUSH
25441: LD_VAR 0 4
25445: ST_TO_ADDR
// _y := y ;
25446: LD_ADDR_VAR 0 7
25450: PUSH
25451: LD_VAR 0 5
25455: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25456: LD_ADDR_VAR 0 3
25460: PUSH
25461: LD_INT 1
25463: PPUSH
25464: LD_VAR 0 14
25468: PPUSH
25469: CALL_OW 12
25473: ST_TO_ADDR
// case i of 1 :
25474: LD_VAR 0 3
25478: PUSH
25479: LD_INT 1
25481: DOUBLE
25482: EQUAL
25483: IFTRUE 25487
25485: GO 25504
25487: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25488: LD_VAR 0 1
25492: PPUSH
25493: LD_VAR 0 10
25497: PPUSH
25498: CALL_OW 115
25502: GO 25565
25504: LD_INT 2
25506: DOUBLE
25507: EQUAL
25508: IFTRUE 25512
25510: GO 25534
25512: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25513: LD_VAR 0 1
25517: PPUSH
25518: LD_VAR 0 6
25522: PPUSH
25523: LD_VAR 0 7
25527: PPUSH
25528: CALL_OW 153
25532: GO 25565
25534: LD_INT 3
25536: DOUBLE
25537: EQUAL
25538: IFTRUE 25542
25540: GO 25564
25542: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25543: LD_VAR 0 1
25547: PPUSH
25548: LD_VAR 0 6
25552: PPUSH
25553: LD_VAR 0 7
25557: PPUSH
25558: CALL_OW 154
25562: GO 25565
25564: POP
// end ;
25565: LD_VAR 0 2
25569: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25570: LD_INT 0
25572: PPUSH
25573: PPUSH
25574: PPUSH
25575: PPUSH
25576: PPUSH
25577: PPUSH
// if not unit or not building then
25578: LD_VAR 0 1
25582: NOT
25583: PUSH
25584: LD_VAR 0 2
25588: NOT
25589: OR
25590: IFFALSE 25594
// exit ;
25592: GO 25752
// x := GetX ( building ) ;
25594: LD_ADDR_VAR 0 5
25598: PUSH
25599: LD_VAR 0 2
25603: PPUSH
25604: CALL_OW 250
25608: ST_TO_ADDR
// y := GetY ( building ) ;
25609: LD_ADDR_VAR 0 6
25613: PUSH
25614: LD_VAR 0 2
25618: PPUSH
25619: CALL_OW 251
25623: ST_TO_ADDR
// for i = 0 to 5 do
25624: LD_ADDR_VAR 0 4
25628: PUSH
25629: DOUBLE
25630: LD_INT 0
25632: DEC
25633: ST_TO_ADDR
25634: LD_INT 5
25636: PUSH
25637: FOR_TO
25638: IFFALSE 25750
// begin _x := ShiftX ( x , i , 3 ) ;
25640: LD_ADDR_VAR 0 7
25644: PUSH
25645: LD_VAR 0 5
25649: PPUSH
25650: LD_VAR 0 4
25654: PPUSH
25655: LD_INT 3
25657: PPUSH
25658: CALL_OW 272
25662: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25663: LD_ADDR_VAR 0 8
25667: PUSH
25668: LD_VAR 0 6
25672: PPUSH
25673: LD_VAR 0 4
25677: PPUSH
25678: LD_INT 3
25680: PPUSH
25681: CALL_OW 273
25685: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25686: LD_VAR 0 7
25690: PPUSH
25691: LD_VAR 0 8
25695: PPUSH
25696: CALL_OW 488
25700: NOT
25701: IFFALSE 25705
// continue ;
25703: GO 25637
// if HexInfo ( _x , _y ) = 0 then
25705: LD_VAR 0 7
25709: PPUSH
25710: LD_VAR 0 8
25714: PPUSH
25715: CALL_OW 428
25719: PUSH
25720: LD_INT 0
25722: EQUAL
25723: IFFALSE 25748
// begin ComMoveXY ( unit , _x , _y ) ;
25725: LD_VAR 0 1
25729: PPUSH
25730: LD_VAR 0 7
25734: PPUSH
25735: LD_VAR 0 8
25739: PPUSH
25740: CALL_OW 111
// exit ;
25744: POP
25745: POP
25746: GO 25752
// end ; end ;
25748: GO 25637
25750: POP
25751: POP
// end ;
25752: LD_VAR 0 3
25756: RET
// export function ScanBase ( side , base_area ) ; begin
25757: LD_INT 0
25759: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25760: LD_ADDR_VAR 0 3
25764: PUSH
25765: LD_VAR 0 2
25769: PPUSH
25770: LD_INT 81
25772: PUSH
25773: LD_VAR 0 1
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PPUSH
25782: CALL_OW 70
25786: ST_TO_ADDR
// end ;
25787: LD_VAR 0 3
25791: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25792: LD_INT 0
25794: PPUSH
25795: PPUSH
25796: PPUSH
25797: PPUSH
// result := false ;
25798: LD_ADDR_VAR 0 2
25802: PUSH
25803: LD_INT 0
25805: ST_TO_ADDR
// side := GetSide ( unit ) ;
25806: LD_ADDR_VAR 0 3
25810: PUSH
25811: LD_VAR 0 1
25815: PPUSH
25816: CALL_OW 255
25820: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25821: LD_ADDR_VAR 0 4
25825: PUSH
25826: LD_VAR 0 1
25830: PPUSH
25831: CALL_OW 248
25835: ST_TO_ADDR
// case nat of 1 :
25836: LD_VAR 0 4
25840: PUSH
25841: LD_INT 1
25843: DOUBLE
25844: EQUAL
25845: IFTRUE 25849
25847: GO 25860
25849: POP
// tech := tech_lassight ; 2 :
25850: LD_ADDR_VAR 0 5
25854: PUSH
25855: LD_INT 12
25857: ST_TO_ADDR
25858: GO 25899
25860: LD_INT 2
25862: DOUBLE
25863: EQUAL
25864: IFTRUE 25868
25866: GO 25879
25868: POP
// tech := tech_mortar ; 3 :
25869: LD_ADDR_VAR 0 5
25873: PUSH
25874: LD_INT 41
25876: ST_TO_ADDR
25877: GO 25899
25879: LD_INT 3
25881: DOUBLE
25882: EQUAL
25883: IFTRUE 25887
25885: GO 25898
25887: POP
// tech := tech_bazooka ; end ;
25888: LD_ADDR_VAR 0 5
25892: PUSH
25893: LD_INT 44
25895: ST_TO_ADDR
25896: GO 25899
25898: POP
// if Researched ( side , tech ) then
25899: LD_VAR 0 3
25903: PPUSH
25904: LD_VAR 0 5
25908: PPUSH
25909: CALL_OW 325
25913: IFFALSE 25940
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25915: LD_ADDR_VAR 0 2
25919: PUSH
25920: LD_INT 5
25922: PUSH
25923: LD_INT 8
25925: PUSH
25926: LD_INT 9
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: PUSH
25934: LD_VAR 0 4
25938: ARRAY
25939: ST_TO_ADDR
// end ;
25940: LD_VAR 0 2
25944: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25945: LD_INT 0
25947: PPUSH
25948: PPUSH
25949: PPUSH
// if not mines then
25950: LD_VAR 0 2
25954: NOT
25955: IFFALSE 25959
// exit ;
25957: GO 26103
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25959: LD_ADDR_VAR 0 5
25963: PUSH
25964: LD_INT 81
25966: PUSH
25967: LD_VAR 0 1
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 3
25978: PUSH
25979: LD_INT 21
25981: PUSH
25982: LD_INT 3
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PPUSH
25997: CALL_OW 69
26001: ST_TO_ADDR
// for i in mines do
26002: LD_ADDR_VAR 0 4
26006: PUSH
26007: LD_VAR 0 2
26011: PUSH
26012: FOR_IN
26013: IFFALSE 26101
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26015: LD_VAR 0 4
26019: PUSH
26020: LD_INT 1
26022: ARRAY
26023: PPUSH
26024: LD_VAR 0 4
26028: PUSH
26029: LD_INT 2
26031: ARRAY
26032: PPUSH
26033: CALL_OW 458
26037: NOT
26038: IFFALSE 26042
// continue ;
26040: GO 26012
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26042: LD_VAR 0 4
26046: PUSH
26047: LD_INT 1
26049: ARRAY
26050: PPUSH
26051: LD_VAR 0 4
26055: PUSH
26056: LD_INT 2
26058: ARRAY
26059: PPUSH
26060: CALL_OW 428
26064: PUSH
26065: LD_VAR 0 5
26069: IN
26070: IFFALSE 26099
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26072: LD_VAR 0 4
26076: PUSH
26077: LD_INT 1
26079: ARRAY
26080: PPUSH
26081: LD_VAR 0 4
26085: PUSH
26086: LD_INT 2
26088: ARRAY
26089: PPUSH
26090: LD_VAR 0 1
26094: PPUSH
26095: CALL_OW 456
// end ;
26099: GO 26012
26101: POP
26102: POP
// end ;
26103: LD_VAR 0 3
26107: RET
// export function Count ( array ) ; var i ; begin
26108: LD_INT 0
26110: PPUSH
26111: PPUSH
// result := 0 ;
26112: LD_ADDR_VAR 0 2
26116: PUSH
26117: LD_INT 0
26119: ST_TO_ADDR
// for i in array do
26120: LD_ADDR_VAR 0 3
26124: PUSH
26125: LD_VAR 0 1
26129: PUSH
26130: FOR_IN
26131: IFFALSE 26155
// if i then
26133: LD_VAR 0 3
26137: IFFALSE 26153
// result := result + 1 ;
26139: LD_ADDR_VAR 0 2
26143: PUSH
26144: LD_VAR 0 2
26148: PUSH
26149: LD_INT 1
26151: PLUS
26152: ST_TO_ADDR
26153: GO 26130
26155: POP
26156: POP
// end ;
26157: LD_VAR 0 2
26161: RET
// export function IsEmpty ( building ) ; begin
26162: LD_INT 0
26164: PPUSH
// if not building then
26165: LD_VAR 0 1
26169: NOT
26170: IFFALSE 26174
// exit ;
26172: GO 26217
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26174: LD_ADDR_VAR 0 2
26178: PUSH
26179: LD_VAR 0 1
26183: PUSH
26184: LD_INT 22
26186: PUSH
26187: LD_VAR 0 1
26191: PPUSH
26192: CALL_OW 255
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 58
26203: PUSH
26204: EMPTY
26205: LIST
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PPUSH
26211: CALL_OW 69
26215: IN
26216: ST_TO_ADDR
// end ;
26217: LD_VAR 0 2
26221: RET
// export function IsNotFull ( building ) ; begin
26222: LD_INT 0
26224: PPUSH
// if not building then
26225: LD_VAR 0 1
26229: NOT
26230: IFFALSE 26234
// exit ;
26232: GO 26253
// result := UnitsInside ( building ) < 6 ;
26234: LD_ADDR_VAR 0 2
26238: PUSH
26239: LD_VAR 0 1
26243: PPUSH
26244: CALL_OW 313
26248: PUSH
26249: LD_INT 6
26251: LESS
26252: ST_TO_ADDR
// end ;
26253: LD_VAR 0 2
26257: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26258: LD_INT 0
26260: PPUSH
26261: PPUSH
26262: PPUSH
26263: PPUSH
// tmp := [ ] ;
26264: LD_ADDR_VAR 0 3
26268: PUSH
26269: EMPTY
26270: ST_TO_ADDR
// list := [ ] ;
26271: LD_ADDR_VAR 0 5
26275: PUSH
26276: EMPTY
26277: ST_TO_ADDR
// for i = 16 to 25 do
26278: LD_ADDR_VAR 0 4
26282: PUSH
26283: DOUBLE
26284: LD_INT 16
26286: DEC
26287: ST_TO_ADDR
26288: LD_INT 25
26290: PUSH
26291: FOR_TO
26292: IFFALSE 26365
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26294: LD_ADDR_VAR 0 3
26298: PUSH
26299: LD_VAR 0 3
26303: PUSH
26304: LD_INT 22
26306: PUSH
26307: LD_VAR 0 1
26311: PPUSH
26312: CALL_OW 255
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 91
26323: PUSH
26324: LD_VAR 0 1
26328: PUSH
26329: LD_INT 6
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 30
26339: PUSH
26340: LD_VAR 0 4
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: LIST
26353: PUSH
26354: EMPTY
26355: LIST
26356: PPUSH
26357: CALL_OW 69
26361: ADD
26362: ST_TO_ADDR
26363: GO 26291
26365: POP
26366: POP
// for i = 1 to tmp do
26367: LD_ADDR_VAR 0 4
26371: PUSH
26372: DOUBLE
26373: LD_INT 1
26375: DEC
26376: ST_TO_ADDR
26377: LD_VAR 0 3
26381: PUSH
26382: FOR_TO
26383: IFFALSE 26471
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26385: LD_ADDR_VAR 0 5
26389: PUSH
26390: LD_VAR 0 5
26394: PUSH
26395: LD_VAR 0 3
26399: PUSH
26400: LD_VAR 0 4
26404: ARRAY
26405: PPUSH
26406: CALL_OW 266
26410: PUSH
26411: LD_VAR 0 3
26415: PUSH
26416: LD_VAR 0 4
26420: ARRAY
26421: PPUSH
26422: CALL_OW 250
26426: PUSH
26427: LD_VAR 0 3
26431: PUSH
26432: LD_VAR 0 4
26436: ARRAY
26437: PPUSH
26438: CALL_OW 251
26442: PUSH
26443: LD_VAR 0 3
26447: PUSH
26448: LD_VAR 0 4
26452: ARRAY
26453: PPUSH
26454: CALL_OW 254
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: PUSH
26465: EMPTY
26466: LIST
26467: ADD
26468: ST_TO_ADDR
26469: GO 26382
26471: POP
26472: POP
// result := list ;
26473: LD_ADDR_VAR 0 2
26477: PUSH
26478: LD_VAR 0 5
26482: ST_TO_ADDR
// end ;
26483: LD_VAR 0 2
26487: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26488: LD_INT 0
26490: PPUSH
26491: PPUSH
26492: PPUSH
26493: PPUSH
26494: PPUSH
26495: PPUSH
26496: PPUSH
// if not factory then
26497: LD_VAR 0 1
26501: NOT
26502: IFFALSE 26506
// exit ;
26504: GO 27099
// if control = control_apeman then
26506: LD_VAR 0 4
26510: PUSH
26511: LD_INT 5
26513: EQUAL
26514: IFFALSE 26623
// begin tmp := UnitsInside ( factory ) ;
26516: LD_ADDR_VAR 0 8
26520: PUSH
26521: LD_VAR 0 1
26525: PPUSH
26526: CALL_OW 313
26530: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26531: LD_VAR 0 8
26535: PPUSH
26536: LD_INT 25
26538: PUSH
26539: LD_INT 12
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PPUSH
26546: CALL_OW 72
26550: NOT
26551: IFFALSE 26561
// control := control_manual ;
26553: LD_ADDR_VAR 0 4
26557: PUSH
26558: LD_INT 1
26560: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26561: LD_ADDR_VAR 0 8
26565: PUSH
26566: LD_VAR 0 1
26570: PPUSH
26571: CALL 26258 0 1
26575: ST_TO_ADDR
// if tmp then
26576: LD_VAR 0 8
26580: IFFALSE 26623
// begin for i in tmp do
26582: LD_ADDR_VAR 0 7
26586: PUSH
26587: LD_VAR 0 8
26591: PUSH
26592: FOR_IN
26593: IFFALSE 26621
// if i [ 1 ] = b_ext_radio then
26595: LD_VAR 0 7
26599: PUSH
26600: LD_INT 1
26602: ARRAY
26603: PUSH
26604: LD_INT 22
26606: EQUAL
26607: IFFALSE 26619
// begin control := control_remote ;
26609: LD_ADDR_VAR 0 4
26613: PUSH
26614: LD_INT 2
26616: ST_TO_ADDR
// break ;
26617: GO 26621
// end ;
26619: GO 26592
26621: POP
26622: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26623: LD_VAR 0 1
26627: PPUSH
26628: LD_VAR 0 2
26632: PPUSH
26633: LD_VAR 0 3
26637: PPUSH
26638: LD_VAR 0 4
26642: PPUSH
26643: LD_VAR 0 5
26647: PPUSH
26648: CALL_OW 448
26652: IFFALSE 26687
// begin result := [ chassis , engine , control , weapon ] ;
26654: LD_ADDR_VAR 0 6
26658: PUSH
26659: LD_VAR 0 2
26663: PUSH
26664: LD_VAR 0 3
26668: PUSH
26669: LD_VAR 0 4
26673: PUSH
26674: LD_VAR 0 5
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: ST_TO_ADDR
// exit ;
26685: GO 27099
// end ; _chassis := AvailableChassisList ( factory ) ;
26687: LD_ADDR_VAR 0 9
26691: PUSH
26692: LD_VAR 0 1
26696: PPUSH
26697: CALL_OW 475
26701: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26702: LD_ADDR_VAR 0 11
26706: PUSH
26707: LD_VAR 0 1
26711: PPUSH
26712: CALL_OW 476
26716: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26717: LD_ADDR_VAR 0 12
26721: PUSH
26722: LD_VAR 0 1
26726: PPUSH
26727: CALL_OW 477
26731: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26732: LD_ADDR_VAR 0 10
26736: PUSH
26737: LD_VAR 0 1
26741: PPUSH
26742: CALL_OW 478
26746: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26747: LD_VAR 0 9
26751: NOT
26752: PUSH
26753: LD_VAR 0 11
26757: NOT
26758: OR
26759: PUSH
26760: LD_VAR 0 12
26764: NOT
26765: OR
26766: PUSH
26767: LD_VAR 0 10
26771: NOT
26772: OR
26773: IFFALSE 26808
// begin result := [ chassis , engine , control , weapon ] ;
26775: LD_ADDR_VAR 0 6
26779: PUSH
26780: LD_VAR 0 2
26784: PUSH
26785: LD_VAR 0 3
26789: PUSH
26790: LD_VAR 0 4
26794: PUSH
26795: LD_VAR 0 5
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: ST_TO_ADDR
// exit ;
26806: GO 27099
// end ; if not chassis in _chassis then
26808: LD_VAR 0 2
26812: PUSH
26813: LD_VAR 0 9
26817: IN
26818: NOT
26819: IFFALSE 26845
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26821: LD_ADDR_VAR 0 2
26825: PUSH
26826: LD_VAR 0 9
26830: PUSH
26831: LD_INT 1
26833: PPUSH
26834: LD_VAR 0 9
26838: PPUSH
26839: CALL_OW 12
26843: ARRAY
26844: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26845: LD_VAR 0 2
26849: PPUSH
26850: LD_VAR 0 3
26854: PPUSH
26855: CALL 27104 0 2
26859: NOT
26860: IFFALSE 26919
// repeat engine := _engine [ 1 ] ;
26862: LD_ADDR_VAR 0 3
26866: PUSH
26867: LD_VAR 0 11
26871: PUSH
26872: LD_INT 1
26874: ARRAY
26875: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26876: LD_ADDR_VAR 0 11
26880: PUSH
26881: LD_VAR 0 11
26885: PPUSH
26886: LD_INT 1
26888: PPUSH
26889: CALL_OW 3
26893: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26894: LD_VAR 0 2
26898: PPUSH
26899: LD_VAR 0 3
26903: PPUSH
26904: CALL 27104 0 2
26908: PUSH
26909: LD_VAR 0 11
26913: PUSH
26914: EMPTY
26915: EQUAL
26916: OR
26917: IFFALSE 26862
// if not control in _control then
26919: LD_VAR 0 4
26923: PUSH
26924: LD_VAR 0 12
26928: IN
26929: NOT
26930: IFFALSE 26956
// control := _control [ rand ( 1 , _control ) ] ;
26932: LD_ADDR_VAR 0 4
26936: PUSH
26937: LD_VAR 0 12
26941: PUSH
26942: LD_INT 1
26944: PPUSH
26945: LD_VAR 0 12
26949: PPUSH
26950: CALL_OW 12
26954: ARRAY
26955: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26956: LD_VAR 0 2
26960: PPUSH
26961: LD_VAR 0 5
26965: PPUSH
26966: CALL 27324 0 2
26970: NOT
26971: IFFALSE 27030
// repeat weapon := _weapon [ 1 ] ;
26973: LD_ADDR_VAR 0 5
26977: PUSH
26978: LD_VAR 0 10
26982: PUSH
26983: LD_INT 1
26985: ARRAY
26986: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26987: LD_ADDR_VAR 0 10
26991: PUSH
26992: LD_VAR 0 10
26996: PPUSH
26997: LD_INT 1
26999: PPUSH
27000: CALL_OW 3
27004: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27005: LD_VAR 0 2
27009: PPUSH
27010: LD_VAR 0 5
27014: PPUSH
27015: CALL 27324 0 2
27019: PUSH
27020: LD_VAR 0 10
27024: PUSH
27025: EMPTY
27026: EQUAL
27027: OR
27028: IFFALSE 26973
// result := [ ] ;
27030: LD_ADDR_VAR 0 6
27034: PUSH
27035: EMPTY
27036: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27037: LD_VAR 0 1
27041: PPUSH
27042: LD_VAR 0 2
27046: PPUSH
27047: LD_VAR 0 3
27051: PPUSH
27052: LD_VAR 0 4
27056: PPUSH
27057: LD_VAR 0 5
27061: PPUSH
27062: CALL_OW 448
27066: IFFALSE 27099
// result := [ chassis , engine , control , weapon ] ;
27068: LD_ADDR_VAR 0 6
27072: PUSH
27073: LD_VAR 0 2
27077: PUSH
27078: LD_VAR 0 3
27082: PUSH
27083: LD_VAR 0 4
27087: PUSH
27088: LD_VAR 0 5
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: ST_TO_ADDR
// end ;
27099: LD_VAR 0 6
27103: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27104: LD_INT 0
27106: PPUSH
// if not chassis or not engine then
27107: LD_VAR 0 1
27111: NOT
27112: PUSH
27113: LD_VAR 0 2
27117: NOT
27118: OR
27119: IFFALSE 27123
// exit ;
27121: GO 27319
// case engine of engine_solar :
27123: LD_VAR 0 2
27127: PUSH
27128: LD_INT 2
27130: DOUBLE
27131: EQUAL
27132: IFTRUE 27136
27134: GO 27174
27136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27137: LD_ADDR_VAR 0 3
27141: PUSH
27142: LD_INT 11
27144: PUSH
27145: LD_INT 12
27147: PUSH
27148: LD_INT 13
27150: PUSH
27151: LD_INT 14
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: LD_INT 2
27159: PUSH
27160: LD_INT 3
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: ST_TO_ADDR
27172: GO 27303
27174: LD_INT 1
27176: DOUBLE
27177: EQUAL
27178: IFTRUE 27182
27180: GO 27244
27182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27183: LD_ADDR_VAR 0 3
27187: PUSH
27188: LD_INT 11
27190: PUSH
27191: LD_INT 12
27193: PUSH
27194: LD_INT 13
27196: PUSH
27197: LD_INT 14
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: LD_INT 3
27208: PUSH
27209: LD_INT 4
27211: PUSH
27212: LD_INT 5
27214: PUSH
27215: LD_INT 21
27217: PUSH
27218: LD_INT 23
27220: PUSH
27221: LD_INT 22
27223: PUSH
27224: LD_INT 24
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: ST_TO_ADDR
27242: GO 27303
27244: LD_INT 3
27246: DOUBLE
27247: EQUAL
27248: IFTRUE 27252
27250: GO 27302
27252: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27253: LD_ADDR_VAR 0 3
27257: PUSH
27258: LD_INT 13
27260: PUSH
27261: LD_INT 14
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: LD_INT 3
27269: PUSH
27270: LD_INT 4
27272: PUSH
27273: LD_INT 5
27275: PUSH
27276: LD_INT 21
27278: PUSH
27279: LD_INT 22
27281: PUSH
27282: LD_INT 23
27284: PUSH
27285: LD_INT 24
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: ST_TO_ADDR
27300: GO 27303
27302: POP
// result := ( chassis in result ) ;
27303: LD_ADDR_VAR 0 3
27307: PUSH
27308: LD_VAR 0 1
27312: PUSH
27313: LD_VAR 0 3
27317: IN
27318: ST_TO_ADDR
// end ;
27319: LD_VAR 0 3
27323: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27324: LD_INT 0
27326: PPUSH
// if not chassis or not weapon then
27327: LD_VAR 0 1
27331: NOT
27332: PUSH
27333: LD_VAR 0 2
27337: NOT
27338: OR
27339: IFFALSE 27343
// exit ;
27341: GO 28369
// case weapon of us_machine_gun :
27343: LD_VAR 0 2
27347: PUSH
27348: LD_INT 2
27350: DOUBLE
27351: EQUAL
27352: IFTRUE 27356
27354: GO 27386
27356: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27357: LD_ADDR_VAR 0 3
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: LD_INT 3
27370: PUSH
27371: LD_INT 4
27373: PUSH
27374: LD_INT 5
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: ST_TO_ADDR
27384: GO 28353
27386: LD_INT 3
27388: DOUBLE
27389: EQUAL
27390: IFTRUE 27394
27392: GO 27424
27394: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27395: LD_ADDR_VAR 0 3
27399: PUSH
27400: LD_INT 1
27402: PUSH
27403: LD_INT 2
27405: PUSH
27406: LD_INT 3
27408: PUSH
27409: LD_INT 4
27411: PUSH
27412: LD_INT 5
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: ST_TO_ADDR
27422: GO 28353
27424: LD_INT 11
27426: DOUBLE
27427: EQUAL
27428: IFTRUE 27432
27430: GO 27462
27432: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27433: LD_ADDR_VAR 0 3
27437: PUSH
27438: LD_INT 1
27440: PUSH
27441: LD_INT 2
27443: PUSH
27444: LD_INT 3
27446: PUSH
27447: LD_INT 4
27449: PUSH
27450: LD_INT 5
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: ST_TO_ADDR
27460: GO 28353
27462: LD_INT 4
27464: DOUBLE
27465: EQUAL
27466: IFTRUE 27470
27468: GO 27496
27470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27471: LD_ADDR_VAR 0 3
27475: PUSH
27476: LD_INT 2
27478: PUSH
27479: LD_INT 3
27481: PUSH
27482: LD_INT 4
27484: PUSH
27485: LD_INT 5
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: ST_TO_ADDR
27494: GO 28353
27496: LD_INT 5
27498: DOUBLE
27499: EQUAL
27500: IFTRUE 27504
27502: GO 27530
27504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27505: LD_ADDR_VAR 0 3
27509: PUSH
27510: LD_INT 2
27512: PUSH
27513: LD_INT 3
27515: PUSH
27516: LD_INT 4
27518: PUSH
27519: LD_INT 5
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: ST_TO_ADDR
27528: GO 28353
27530: LD_INT 9
27532: DOUBLE
27533: EQUAL
27534: IFTRUE 27538
27536: GO 27564
27538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27539: LD_ADDR_VAR 0 3
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: LD_INT 3
27549: PUSH
27550: LD_INT 4
27552: PUSH
27553: LD_INT 5
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: ST_TO_ADDR
27562: GO 28353
27564: LD_INT 7
27566: DOUBLE
27567: EQUAL
27568: IFTRUE 27572
27570: GO 27598
27572: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27573: LD_ADDR_VAR 0 3
27577: PUSH
27578: LD_INT 2
27580: PUSH
27581: LD_INT 3
27583: PUSH
27584: LD_INT 4
27586: PUSH
27587: LD_INT 5
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: ST_TO_ADDR
27596: GO 28353
27598: LD_INT 12
27600: DOUBLE
27601: EQUAL
27602: IFTRUE 27606
27604: GO 27632
27606: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27607: LD_ADDR_VAR 0 3
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: LD_INT 3
27617: PUSH
27618: LD_INT 4
27620: PUSH
27621: LD_INT 5
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: ST_TO_ADDR
27630: GO 28353
27632: LD_INT 13
27634: DOUBLE
27635: EQUAL
27636: IFTRUE 27640
27638: GO 27666
27640: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27641: LD_ADDR_VAR 0 3
27645: PUSH
27646: LD_INT 2
27648: PUSH
27649: LD_INT 3
27651: PUSH
27652: LD_INT 4
27654: PUSH
27655: LD_INT 5
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: ST_TO_ADDR
27664: GO 28353
27666: LD_INT 14
27668: DOUBLE
27669: EQUAL
27670: IFTRUE 27674
27672: GO 27692
27674: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27675: LD_ADDR_VAR 0 3
27679: PUSH
27680: LD_INT 4
27682: PUSH
27683: LD_INT 5
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: ST_TO_ADDR
27690: GO 28353
27692: LD_INT 6
27694: DOUBLE
27695: EQUAL
27696: IFTRUE 27700
27698: GO 27718
27700: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27701: LD_ADDR_VAR 0 3
27705: PUSH
27706: LD_INT 4
27708: PUSH
27709: LD_INT 5
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: ST_TO_ADDR
27716: GO 28353
27718: LD_INT 10
27720: DOUBLE
27721: EQUAL
27722: IFTRUE 27726
27724: GO 27744
27726: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27727: LD_ADDR_VAR 0 3
27731: PUSH
27732: LD_INT 4
27734: PUSH
27735: LD_INT 5
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: ST_TO_ADDR
27742: GO 28353
27744: LD_INT 22
27746: DOUBLE
27747: EQUAL
27748: IFTRUE 27752
27750: GO 27778
27752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27753: LD_ADDR_VAR 0 3
27757: PUSH
27758: LD_INT 11
27760: PUSH
27761: LD_INT 12
27763: PUSH
27764: LD_INT 13
27766: PUSH
27767: LD_INT 14
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: ST_TO_ADDR
27776: GO 28353
27778: LD_INT 23
27780: DOUBLE
27781: EQUAL
27782: IFTRUE 27786
27784: GO 27812
27786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27787: LD_ADDR_VAR 0 3
27791: PUSH
27792: LD_INT 11
27794: PUSH
27795: LD_INT 12
27797: PUSH
27798: LD_INT 13
27800: PUSH
27801: LD_INT 14
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: ST_TO_ADDR
27810: GO 28353
27812: LD_INT 24
27814: DOUBLE
27815: EQUAL
27816: IFTRUE 27820
27818: GO 27846
27820: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27821: LD_ADDR_VAR 0 3
27825: PUSH
27826: LD_INT 11
27828: PUSH
27829: LD_INT 12
27831: PUSH
27832: LD_INT 13
27834: PUSH
27835: LD_INT 14
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: ST_TO_ADDR
27844: GO 28353
27846: LD_INT 30
27848: DOUBLE
27849: EQUAL
27850: IFTRUE 27854
27852: GO 27880
27854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27855: LD_ADDR_VAR 0 3
27859: PUSH
27860: LD_INT 11
27862: PUSH
27863: LD_INT 12
27865: PUSH
27866: LD_INT 13
27868: PUSH
27869: LD_INT 14
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: ST_TO_ADDR
27878: GO 28353
27880: LD_INT 25
27882: DOUBLE
27883: EQUAL
27884: IFTRUE 27888
27886: GO 27906
27888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27889: LD_ADDR_VAR 0 3
27893: PUSH
27894: LD_INT 13
27896: PUSH
27897: LD_INT 14
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: ST_TO_ADDR
27904: GO 28353
27906: LD_INT 27
27908: DOUBLE
27909: EQUAL
27910: IFTRUE 27914
27912: GO 27932
27914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27915: LD_ADDR_VAR 0 3
27919: PUSH
27920: LD_INT 13
27922: PUSH
27923: LD_INT 14
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: ST_TO_ADDR
27930: GO 28353
27932: LD_INT 28
27934: DOUBLE
27935: EQUAL
27936: IFTRUE 27940
27938: GO 27958
27940: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27941: LD_ADDR_VAR 0 3
27945: PUSH
27946: LD_INT 13
27948: PUSH
27949: LD_INT 14
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: ST_TO_ADDR
27956: GO 28353
27958: LD_INT 29
27960: DOUBLE
27961: EQUAL
27962: IFTRUE 27966
27964: GO 27984
27966: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27967: LD_ADDR_VAR 0 3
27971: PUSH
27972: LD_INT 13
27974: PUSH
27975: LD_INT 14
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: ST_TO_ADDR
27982: GO 28353
27984: LD_INT 31
27986: DOUBLE
27987: EQUAL
27988: IFTRUE 27992
27990: GO 28010
27992: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27993: LD_ADDR_VAR 0 3
27997: PUSH
27998: LD_INT 13
28000: PUSH
28001: LD_INT 14
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: ST_TO_ADDR
28008: GO 28353
28010: LD_INT 26
28012: DOUBLE
28013: EQUAL
28014: IFTRUE 28018
28016: GO 28036
28018: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28019: LD_ADDR_VAR 0 3
28023: PUSH
28024: LD_INT 13
28026: PUSH
28027: LD_INT 14
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: ST_TO_ADDR
28034: GO 28353
28036: LD_INT 42
28038: DOUBLE
28039: EQUAL
28040: IFTRUE 28044
28042: GO 28070
28044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28045: LD_ADDR_VAR 0 3
28049: PUSH
28050: LD_INT 21
28052: PUSH
28053: LD_INT 22
28055: PUSH
28056: LD_INT 23
28058: PUSH
28059: LD_INT 24
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: ST_TO_ADDR
28068: GO 28353
28070: LD_INT 43
28072: DOUBLE
28073: EQUAL
28074: IFTRUE 28078
28076: GO 28104
28078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28079: LD_ADDR_VAR 0 3
28083: PUSH
28084: LD_INT 21
28086: PUSH
28087: LD_INT 22
28089: PUSH
28090: LD_INT 23
28092: PUSH
28093: LD_INT 24
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: ST_TO_ADDR
28102: GO 28353
28104: LD_INT 44
28106: DOUBLE
28107: EQUAL
28108: IFTRUE 28112
28110: GO 28138
28112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28113: LD_ADDR_VAR 0 3
28117: PUSH
28118: LD_INT 21
28120: PUSH
28121: LD_INT 22
28123: PUSH
28124: LD_INT 23
28126: PUSH
28127: LD_INT 24
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: ST_TO_ADDR
28136: GO 28353
28138: LD_INT 45
28140: DOUBLE
28141: EQUAL
28142: IFTRUE 28146
28144: GO 28172
28146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28147: LD_ADDR_VAR 0 3
28151: PUSH
28152: LD_INT 21
28154: PUSH
28155: LD_INT 22
28157: PUSH
28158: LD_INT 23
28160: PUSH
28161: LD_INT 24
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: ST_TO_ADDR
28170: GO 28353
28172: LD_INT 49
28174: DOUBLE
28175: EQUAL
28176: IFTRUE 28180
28178: GO 28206
28180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28181: LD_ADDR_VAR 0 3
28185: PUSH
28186: LD_INT 21
28188: PUSH
28189: LD_INT 22
28191: PUSH
28192: LD_INT 23
28194: PUSH
28195: LD_INT 24
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: ST_TO_ADDR
28204: GO 28353
28206: LD_INT 51
28208: DOUBLE
28209: EQUAL
28210: IFTRUE 28214
28212: GO 28240
28214: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28215: LD_ADDR_VAR 0 3
28219: PUSH
28220: LD_INT 21
28222: PUSH
28223: LD_INT 22
28225: PUSH
28226: LD_INT 23
28228: PUSH
28229: LD_INT 24
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: ST_TO_ADDR
28238: GO 28353
28240: LD_INT 52
28242: DOUBLE
28243: EQUAL
28244: IFTRUE 28248
28246: GO 28274
28248: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28249: LD_ADDR_VAR 0 3
28253: PUSH
28254: LD_INT 21
28256: PUSH
28257: LD_INT 22
28259: PUSH
28260: LD_INT 23
28262: PUSH
28263: LD_INT 24
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: ST_TO_ADDR
28272: GO 28353
28274: LD_INT 53
28276: DOUBLE
28277: EQUAL
28278: IFTRUE 28282
28280: GO 28300
28282: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28283: LD_ADDR_VAR 0 3
28287: PUSH
28288: LD_INT 23
28290: PUSH
28291: LD_INT 24
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: ST_TO_ADDR
28298: GO 28353
28300: LD_INT 46
28302: DOUBLE
28303: EQUAL
28304: IFTRUE 28308
28306: GO 28326
28308: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28309: LD_ADDR_VAR 0 3
28313: PUSH
28314: LD_INT 23
28316: PUSH
28317: LD_INT 24
28319: PUSH
28320: EMPTY
28321: LIST
28322: LIST
28323: ST_TO_ADDR
28324: GO 28353
28326: LD_INT 47
28328: DOUBLE
28329: EQUAL
28330: IFTRUE 28334
28332: GO 28352
28334: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28335: LD_ADDR_VAR 0 3
28339: PUSH
28340: LD_INT 23
28342: PUSH
28343: LD_INT 24
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: ST_TO_ADDR
28350: GO 28353
28352: POP
// result := ( chassis in result ) ;
28353: LD_ADDR_VAR 0 3
28357: PUSH
28358: LD_VAR 0 1
28362: PUSH
28363: LD_VAR 0 3
28367: IN
28368: ST_TO_ADDR
// end ;
28369: LD_VAR 0 3
28373: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28374: LD_INT 0
28376: PPUSH
28377: PPUSH
28378: PPUSH
28379: PPUSH
28380: PPUSH
28381: PPUSH
28382: PPUSH
// result := array ;
28383: LD_ADDR_VAR 0 5
28387: PUSH
28388: LD_VAR 0 1
28392: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28393: LD_VAR 0 1
28397: NOT
28398: PUSH
28399: LD_VAR 0 2
28403: NOT
28404: OR
28405: PUSH
28406: LD_VAR 0 3
28410: NOT
28411: OR
28412: PUSH
28413: LD_VAR 0 2
28417: PUSH
28418: LD_VAR 0 1
28422: GREATER
28423: OR
28424: PUSH
28425: LD_VAR 0 3
28429: PUSH
28430: LD_VAR 0 1
28434: GREATER
28435: OR
28436: IFFALSE 28440
// exit ;
28438: GO 28736
// if direction then
28440: LD_VAR 0 4
28444: IFFALSE 28508
// begin d := 1 ;
28446: LD_ADDR_VAR 0 9
28450: PUSH
28451: LD_INT 1
28453: ST_TO_ADDR
// if i_from > i_to then
28454: LD_VAR 0 2
28458: PUSH
28459: LD_VAR 0 3
28463: GREATER
28464: IFFALSE 28490
// length := ( array - i_from ) + i_to else
28466: LD_ADDR_VAR 0 11
28470: PUSH
28471: LD_VAR 0 1
28475: PUSH
28476: LD_VAR 0 2
28480: MINUS
28481: PUSH
28482: LD_VAR 0 3
28486: PLUS
28487: ST_TO_ADDR
28488: GO 28506
// length := i_to - i_from ;
28490: LD_ADDR_VAR 0 11
28494: PUSH
28495: LD_VAR 0 3
28499: PUSH
28500: LD_VAR 0 2
28504: MINUS
28505: ST_TO_ADDR
// end else
28506: GO 28569
// begin d := - 1 ;
28508: LD_ADDR_VAR 0 9
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: ST_TO_ADDR
// if i_from > i_to then
28517: LD_VAR 0 2
28521: PUSH
28522: LD_VAR 0 3
28526: GREATER
28527: IFFALSE 28547
// length := i_from - i_to else
28529: LD_ADDR_VAR 0 11
28533: PUSH
28534: LD_VAR 0 2
28538: PUSH
28539: LD_VAR 0 3
28543: MINUS
28544: ST_TO_ADDR
28545: GO 28569
// length := ( array - i_to ) + i_from ;
28547: LD_ADDR_VAR 0 11
28551: PUSH
28552: LD_VAR 0 1
28556: PUSH
28557: LD_VAR 0 3
28561: MINUS
28562: PUSH
28563: LD_VAR 0 2
28567: PLUS
28568: ST_TO_ADDR
// end ; if not length then
28569: LD_VAR 0 11
28573: NOT
28574: IFFALSE 28578
// exit ;
28576: GO 28736
// tmp := array ;
28578: LD_ADDR_VAR 0 10
28582: PUSH
28583: LD_VAR 0 1
28587: ST_TO_ADDR
// for i = 1 to length do
28588: LD_ADDR_VAR 0 6
28592: PUSH
28593: DOUBLE
28594: LD_INT 1
28596: DEC
28597: ST_TO_ADDR
28598: LD_VAR 0 11
28602: PUSH
28603: FOR_TO
28604: IFFALSE 28724
// begin for j = 1 to array do
28606: LD_ADDR_VAR 0 7
28610: PUSH
28611: DOUBLE
28612: LD_INT 1
28614: DEC
28615: ST_TO_ADDR
28616: LD_VAR 0 1
28620: PUSH
28621: FOR_TO
28622: IFFALSE 28710
// begin k := j + d ;
28624: LD_ADDR_VAR 0 8
28628: PUSH
28629: LD_VAR 0 7
28633: PUSH
28634: LD_VAR 0 9
28638: PLUS
28639: ST_TO_ADDR
// if k > array then
28640: LD_VAR 0 8
28644: PUSH
28645: LD_VAR 0 1
28649: GREATER
28650: IFFALSE 28660
// k := 1 ;
28652: LD_ADDR_VAR 0 8
28656: PUSH
28657: LD_INT 1
28659: ST_TO_ADDR
// if not k then
28660: LD_VAR 0 8
28664: NOT
28665: IFFALSE 28677
// k := array ;
28667: LD_ADDR_VAR 0 8
28671: PUSH
28672: LD_VAR 0 1
28676: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28677: LD_ADDR_VAR 0 10
28681: PUSH
28682: LD_VAR 0 10
28686: PPUSH
28687: LD_VAR 0 8
28691: PPUSH
28692: LD_VAR 0 1
28696: PUSH
28697: LD_VAR 0 7
28701: ARRAY
28702: PPUSH
28703: CALL_OW 1
28707: ST_TO_ADDR
// end ;
28708: GO 28621
28710: POP
28711: POP
// array := tmp ;
28712: LD_ADDR_VAR 0 1
28716: PUSH
28717: LD_VAR 0 10
28721: ST_TO_ADDR
// end ;
28722: GO 28603
28724: POP
28725: POP
// result := array ;
28726: LD_ADDR_VAR 0 5
28730: PUSH
28731: LD_VAR 0 1
28735: ST_TO_ADDR
// end ;
28736: LD_VAR 0 5
28740: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28741: LD_INT 0
28743: PPUSH
28744: PPUSH
// result := 0 ;
28745: LD_ADDR_VAR 0 3
28749: PUSH
28750: LD_INT 0
28752: ST_TO_ADDR
// if not array or not value in array then
28753: LD_VAR 0 1
28757: NOT
28758: PUSH
28759: LD_VAR 0 2
28763: PUSH
28764: LD_VAR 0 1
28768: IN
28769: NOT
28770: OR
28771: IFFALSE 28775
// exit ;
28773: GO 28829
// for i = 1 to array do
28775: LD_ADDR_VAR 0 4
28779: PUSH
28780: DOUBLE
28781: LD_INT 1
28783: DEC
28784: ST_TO_ADDR
28785: LD_VAR 0 1
28789: PUSH
28790: FOR_TO
28791: IFFALSE 28827
// if value = array [ i ] then
28793: LD_VAR 0 2
28797: PUSH
28798: LD_VAR 0 1
28802: PUSH
28803: LD_VAR 0 4
28807: ARRAY
28808: EQUAL
28809: IFFALSE 28825
// begin result := i ;
28811: LD_ADDR_VAR 0 3
28815: PUSH
28816: LD_VAR 0 4
28820: ST_TO_ADDR
// exit ;
28821: POP
28822: POP
28823: GO 28829
// end ;
28825: GO 28790
28827: POP
28828: POP
// end ;
28829: LD_VAR 0 3
28833: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28834: LD_INT 0
28836: PPUSH
// vc_chassis := chassis ;
28837: LD_ADDR_OWVAR 37
28841: PUSH
28842: LD_VAR 0 1
28846: ST_TO_ADDR
// vc_engine := engine ;
28847: LD_ADDR_OWVAR 39
28851: PUSH
28852: LD_VAR 0 2
28856: ST_TO_ADDR
// vc_control := control ;
28857: LD_ADDR_OWVAR 38
28861: PUSH
28862: LD_VAR 0 3
28866: ST_TO_ADDR
// vc_weapon := weapon ;
28867: LD_ADDR_OWVAR 40
28871: PUSH
28872: LD_VAR 0 4
28876: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28877: LD_ADDR_OWVAR 41
28881: PUSH
28882: LD_VAR 0 5
28886: ST_TO_ADDR
// end ;
28887: LD_VAR 0 6
28891: RET
// export function WantPlant ( unit ) ; var task ; begin
28892: LD_INT 0
28894: PPUSH
28895: PPUSH
// result := false ;
28896: LD_ADDR_VAR 0 2
28900: PUSH
28901: LD_INT 0
28903: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28904: LD_ADDR_VAR 0 3
28908: PUSH
28909: LD_VAR 0 1
28913: PPUSH
28914: CALL_OW 437
28918: ST_TO_ADDR
// if task then
28919: LD_VAR 0 3
28923: IFFALSE 28951
// if task [ 1 ] [ 1 ] = p then
28925: LD_VAR 0 3
28929: PUSH
28930: LD_INT 1
28932: ARRAY
28933: PUSH
28934: LD_INT 1
28936: ARRAY
28937: PUSH
28938: LD_STRING p
28940: EQUAL
28941: IFFALSE 28951
// result := true ;
28943: LD_ADDR_VAR 0 2
28947: PUSH
28948: LD_INT 1
28950: ST_TO_ADDR
// end ;
28951: LD_VAR 0 2
28955: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28956: LD_INT 0
28958: PPUSH
28959: PPUSH
28960: PPUSH
28961: PPUSH
// if pos < 1 then
28962: LD_VAR 0 2
28966: PUSH
28967: LD_INT 1
28969: LESS
28970: IFFALSE 28974
// exit ;
28972: GO 29277
// if pos = 1 then
28974: LD_VAR 0 2
28978: PUSH
28979: LD_INT 1
28981: EQUAL
28982: IFFALSE 29015
// result := Replace ( arr , pos [ 1 ] , value ) else
28984: LD_ADDR_VAR 0 4
28988: PUSH
28989: LD_VAR 0 1
28993: PPUSH
28994: LD_VAR 0 2
28998: PUSH
28999: LD_INT 1
29001: ARRAY
29002: PPUSH
29003: LD_VAR 0 3
29007: PPUSH
29008: CALL_OW 1
29012: ST_TO_ADDR
29013: GO 29277
// begin tmp := arr ;
29015: LD_ADDR_VAR 0 6
29019: PUSH
29020: LD_VAR 0 1
29024: ST_TO_ADDR
// s_arr := [ tmp ] ;
29025: LD_ADDR_VAR 0 7
29029: PUSH
29030: LD_VAR 0 6
29034: PUSH
29035: EMPTY
29036: LIST
29037: ST_TO_ADDR
// for i = 1 to pos - 1 do
29038: LD_ADDR_VAR 0 5
29042: PUSH
29043: DOUBLE
29044: LD_INT 1
29046: DEC
29047: ST_TO_ADDR
29048: LD_VAR 0 2
29052: PUSH
29053: LD_INT 1
29055: MINUS
29056: PUSH
29057: FOR_TO
29058: IFFALSE 29103
// begin tmp := tmp [ pos [ i ] ] ;
29060: LD_ADDR_VAR 0 6
29064: PUSH
29065: LD_VAR 0 6
29069: PUSH
29070: LD_VAR 0 2
29074: PUSH
29075: LD_VAR 0 5
29079: ARRAY
29080: ARRAY
29081: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29082: LD_ADDR_VAR 0 7
29086: PUSH
29087: LD_VAR 0 7
29091: PUSH
29092: LD_VAR 0 6
29096: PUSH
29097: EMPTY
29098: LIST
29099: ADD
29100: ST_TO_ADDR
// end ;
29101: GO 29057
29103: POP
29104: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29105: LD_ADDR_VAR 0 6
29109: PUSH
29110: LD_VAR 0 6
29114: PPUSH
29115: LD_VAR 0 2
29119: PUSH
29120: LD_VAR 0 2
29124: ARRAY
29125: PPUSH
29126: LD_VAR 0 3
29130: PPUSH
29131: CALL_OW 1
29135: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29136: LD_ADDR_VAR 0 7
29140: PUSH
29141: LD_VAR 0 7
29145: PPUSH
29146: LD_VAR 0 7
29150: PPUSH
29151: LD_VAR 0 6
29155: PPUSH
29156: CALL_OW 1
29160: ST_TO_ADDR
// for i = s_arr downto 2 do
29161: LD_ADDR_VAR 0 5
29165: PUSH
29166: DOUBLE
29167: LD_VAR 0 7
29171: INC
29172: ST_TO_ADDR
29173: LD_INT 2
29175: PUSH
29176: FOR_DOWNTO
29177: IFFALSE 29261
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29179: LD_ADDR_VAR 0 6
29183: PUSH
29184: LD_VAR 0 7
29188: PUSH
29189: LD_VAR 0 5
29193: PUSH
29194: LD_INT 1
29196: MINUS
29197: ARRAY
29198: PPUSH
29199: LD_VAR 0 2
29203: PUSH
29204: LD_VAR 0 5
29208: PUSH
29209: LD_INT 1
29211: MINUS
29212: ARRAY
29213: PPUSH
29214: LD_VAR 0 7
29218: PUSH
29219: LD_VAR 0 5
29223: ARRAY
29224: PPUSH
29225: CALL_OW 1
29229: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29230: LD_ADDR_VAR 0 7
29234: PUSH
29235: LD_VAR 0 7
29239: PPUSH
29240: LD_VAR 0 5
29244: PUSH
29245: LD_INT 1
29247: MINUS
29248: PPUSH
29249: LD_VAR 0 6
29253: PPUSH
29254: CALL_OW 1
29258: ST_TO_ADDR
// end ;
29259: GO 29176
29261: POP
29262: POP
// result := s_arr [ 1 ] ;
29263: LD_ADDR_VAR 0 4
29267: PUSH
29268: LD_VAR 0 7
29272: PUSH
29273: LD_INT 1
29275: ARRAY
29276: ST_TO_ADDR
// end ; end ;
29277: LD_VAR 0 4
29281: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29282: LD_INT 0
29284: PPUSH
29285: PPUSH
// if not list then
29286: LD_VAR 0 1
29290: NOT
29291: IFFALSE 29295
// exit ;
29293: GO 29386
// i := list [ pos1 ] ;
29295: LD_ADDR_VAR 0 5
29299: PUSH
29300: LD_VAR 0 1
29304: PUSH
29305: LD_VAR 0 2
29309: ARRAY
29310: ST_TO_ADDR
// if not i then
29311: LD_VAR 0 5
29315: NOT
29316: IFFALSE 29320
// exit ;
29318: GO 29386
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29320: LD_ADDR_VAR 0 1
29324: PUSH
29325: LD_VAR 0 1
29329: PPUSH
29330: LD_VAR 0 2
29334: PPUSH
29335: LD_VAR 0 1
29339: PUSH
29340: LD_VAR 0 3
29344: ARRAY
29345: PPUSH
29346: CALL_OW 1
29350: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29351: LD_ADDR_VAR 0 1
29355: PUSH
29356: LD_VAR 0 1
29360: PPUSH
29361: LD_VAR 0 3
29365: PPUSH
29366: LD_VAR 0 5
29370: PPUSH
29371: CALL_OW 1
29375: ST_TO_ADDR
// result := list ;
29376: LD_ADDR_VAR 0 4
29380: PUSH
29381: LD_VAR 0 1
29385: ST_TO_ADDR
// end ;
29386: LD_VAR 0 4
29390: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29391: LD_INT 0
29393: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29394: LD_ADDR_VAR 0 5
29398: PUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL_OW 250
29408: PPUSH
29409: LD_VAR 0 1
29413: PPUSH
29414: CALL_OW 251
29418: PPUSH
29419: LD_VAR 0 2
29423: PPUSH
29424: LD_VAR 0 3
29428: PPUSH
29429: LD_VAR 0 4
29433: PPUSH
29434: CALL 29444 0 5
29438: ST_TO_ADDR
// end ;
29439: LD_VAR 0 5
29443: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29444: LD_INT 0
29446: PPUSH
29447: PPUSH
29448: PPUSH
29449: PPUSH
// if not list then
29450: LD_VAR 0 3
29454: NOT
29455: IFFALSE 29459
// exit ;
29457: GO 29847
// result := [ ] ;
29459: LD_ADDR_VAR 0 6
29463: PUSH
29464: EMPTY
29465: ST_TO_ADDR
// for i in list do
29466: LD_ADDR_VAR 0 7
29470: PUSH
29471: LD_VAR 0 3
29475: PUSH
29476: FOR_IN
29477: IFFALSE 29679
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29479: LD_ADDR_VAR 0 9
29483: PUSH
29484: LD_VAR 0 7
29488: PPUSH
29489: LD_VAR 0 1
29493: PPUSH
29494: LD_VAR 0 2
29498: PPUSH
29499: CALL_OW 297
29503: ST_TO_ADDR
// if not result then
29504: LD_VAR 0 6
29508: NOT
29509: IFFALSE 29535
// result := [ [ i , tmp ] ] else
29511: LD_ADDR_VAR 0 6
29515: PUSH
29516: LD_VAR 0 7
29520: PUSH
29521: LD_VAR 0 9
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: EMPTY
29531: LIST
29532: ST_TO_ADDR
29533: GO 29677
// begin if result [ result ] [ 2 ] < tmp then
29535: LD_VAR 0 6
29539: PUSH
29540: LD_VAR 0 6
29544: ARRAY
29545: PUSH
29546: LD_INT 2
29548: ARRAY
29549: PUSH
29550: LD_VAR 0 9
29554: LESS
29555: IFFALSE 29597
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29557: LD_ADDR_VAR 0 6
29561: PUSH
29562: LD_VAR 0 6
29566: PPUSH
29567: LD_VAR 0 6
29571: PUSH
29572: LD_INT 1
29574: PLUS
29575: PPUSH
29576: LD_VAR 0 7
29580: PUSH
29581: LD_VAR 0 9
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PPUSH
29590: CALL_OW 2
29594: ST_TO_ADDR
29595: GO 29677
// for j = 1 to result do
29597: LD_ADDR_VAR 0 8
29601: PUSH
29602: DOUBLE
29603: LD_INT 1
29605: DEC
29606: ST_TO_ADDR
29607: LD_VAR 0 6
29611: PUSH
29612: FOR_TO
29613: IFFALSE 29675
// begin if tmp < result [ j ] [ 2 ] then
29615: LD_VAR 0 9
29619: PUSH
29620: LD_VAR 0 6
29624: PUSH
29625: LD_VAR 0 8
29629: ARRAY
29630: PUSH
29631: LD_INT 2
29633: ARRAY
29634: LESS
29635: IFFALSE 29673
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29637: LD_ADDR_VAR 0 6
29641: PUSH
29642: LD_VAR 0 6
29646: PPUSH
29647: LD_VAR 0 8
29651: PPUSH
29652: LD_VAR 0 7
29656: PUSH
29657: LD_VAR 0 9
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PPUSH
29666: CALL_OW 2
29670: ST_TO_ADDR
// break ;
29671: GO 29675
// end ; end ;
29673: GO 29612
29675: POP
29676: POP
// end ; end ;
29677: GO 29476
29679: POP
29680: POP
// if result and not asc then
29681: LD_VAR 0 6
29685: PUSH
29686: LD_VAR 0 4
29690: NOT
29691: AND
29692: IFFALSE 29767
// begin tmp := result ;
29694: LD_ADDR_VAR 0 9
29698: PUSH
29699: LD_VAR 0 6
29703: ST_TO_ADDR
// for i = tmp downto 1 do
29704: LD_ADDR_VAR 0 7
29708: PUSH
29709: DOUBLE
29710: LD_VAR 0 9
29714: INC
29715: ST_TO_ADDR
29716: LD_INT 1
29718: PUSH
29719: FOR_DOWNTO
29720: IFFALSE 29765
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29722: LD_ADDR_VAR 0 6
29726: PUSH
29727: LD_VAR 0 6
29731: PPUSH
29732: LD_VAR 0 9
29736: PUSH
29737: LD_VAR 0 7
29741: MINUS
29742: PUSH
29743: LD_INT 1
29745: PLUS
29746: PPUSH
29747: LD_VAR 0 9
29751: PUSH
29752: LD_VAR 0 7
29756: ARRAY
29757: PPUSH
29758: CALL_OW 1
29762: ST_TO_ADDR
29763: GO 29719
29765: POP
29766: POP
// end ; tmp := [ ] ;
29767: LD_ADDR_VAR 0 9
29771: PUSH
29772: EMPTY
29773: ST_TO_ADDR
// if mode then
29774: LD_VAR 0 5
29778: IFFALSE 29847
// begin for i = 1 to result do
29780: LD_ADDR_VAR 0 7
29784: PUSH
29785: DOUBLE
29786: LD_INT 1
29788: DEC
29789: ST_TO_ADDR
29790: LD_VAR 0 6
29794: PUSH
29795: FOR_TO
29796: IFFALSE 29835
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29798: LD_ADDR_VAR 0 9
29802: PUSH
29803: LD_VAR 0 9
29807: PPUSH
29808: LD_VAR 0 7
29812: PPUSH
29813: LD_VAR 0 6
29817: PUSH
29818: LD_VAR 0 7
29822: ARRAY
29823: PUSH
29824: LD_INT 1
29826: ARRAY
29827: PPUSH
29828: CALL_OW 1
29832: ST_TO_ADDR
29833: GO 29795
29835: POP
29836: POP
// result := tmp ;
29837: LD_ADDR_VAR 0 6
29841: PUSH
29842: LD_VAR 0 9
29846: ST_TO_ADDR
// end ; end ;
29847: LD_VAR 0 6
29851: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29852: LD_INT 0
29854: PPUSH
29855: PPUSH
29856: PPUSH
29857: PPUSH
29858: PPUSH
29859: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29860: LD_ADDR_VAR 0 5
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: LD_INT 0
29873: PUSH
29874: EMPTY
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: ST_TO_ADDR
// if not x or not y then
29882: LD_VAR 0 2
29886: NOT
29887: PUSH
29888: LD_VAR 0 3
29892: NOT
29893: OR
29894: IFFALSE 29898
// exit ;
29896: GO 31544
// if not range then
29898: LD_VAR 0 4
29902: NOT
29903: IFFALSE 29913
// range := 10 ;
29905: LD_ADDR_VAR 0 4
29909: PUSH
29910: LD_INT 10
29912: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29913: LD_ADDR_VAR 0 8
29917: PUSH
29918: LD_INT 81
29920: PUSH
29921: LD_VAR 0 1
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 92
29932: PUSH
29933: LD_VAR 0 2
29937: PUSH
29938: LD_VAR 0 3
29942: PUSH
29943: LD_VAR 0 4
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 3
29956: PUSH
29957: LD_INT 21
29959: PUSH
29960: LD_INT 3
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: LIST
29975: PPUSH
29976: CALL_OW 69
29980: ST_TO_ADDR
// if not tmp then
29981: LD_VAR 0 8
29985: NOT
29986: IFFALSE 29990
// exit ;
29988: GO 31544
// for i in tmp do
29990: LD_ADDR_VAR 0 6
29994: PUSH
29995: LD_VAR 0 8
29999: PUSH
30000: FOR_IN
30001: IFFALSE 31519
// begin points := [ 0 , 0 , 0 ] ;
30003: LD_ADDR_VAR 0 9
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: LD_INT 0
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: LIST
30021: ST_TO_ADDR
// bpoints := 1 ;
30022: LD_ADDR_VAR 0 10
30026: PUSH
30027: LD_INT 1
30029: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30030: LD_VAR 0 6
30034: PPUSH
30035: CALL_OW 247
30039: PUSH
30040: LD_INT 1
30042: DOUBLE
30043: EQUAL
30044: IFTRUE 30048
30046: GO 30626
30048: POP
// begin if GetClass ( i ) = 1 then
30049: LD_VAR 0 6
30053: PPUSH
30054: CALL_OW 257
30058: PUSH
30059: LD_INT 1
30061: EQUAL
30062: IFFALSE 30083
// points := [ 10 , 5 , 3 ] ;
30064: LD_ADDR_VAR 0 9
30068: PUSH
30069: LD_INT 10
30071: PUSH
30072: LD_INT 5
30074: PUSH
30075: LD_INT 3
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: LIST
30082: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30083: LD_VAR 0 6
30087: PPUSH
30088: CALL_OW 257
30092: PUSH
30093: LD_INT 2
30095: PUSH
30096: LD_INT 3
30098: PUSH
30099: LD_INT 4
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: LIST
30106: IN
30107: IFFALSE 30128
// points := [ 3 , 2 , 1 ] ;
30109: LD_ADDR_VAR 0 9
30113: PUSH
30114: LD_INT 3
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: LIST
30127: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30128: LD_VAR 0 6
30132: PPUSH
30133: CALL_OW 257
30137: PUSH
30138: LD_INT 5
30140: EQUAL
30141: IFFALSE 30162
// points := [ 130 , 5 , 2 ] ;
30143: LD_ADDR_VAR 0 9
30147: PUSH
30148: LD_INT 130
30150: PUSH
30151: LD_INT 5
30153: PUSH
30154: LD_INT 2
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30162: LD_VAR 0 6
30166: PPUSH
30167: CALL_OW 257
30171: PUSH
30172: LD_INT 8
30174: EQUAL
30175: IFFALSE 30196
// points := [ 35 , 35 , 30 ] ;
30177: LD_ADDR_VAR 0 9
30181: PUSH
30182: LD_INT 35
30184: PUSH
30185: LD_INT 35
30187: PUSH
30188: LD_INT 30
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: LIST
30195: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30196: LD_VAR 0 6
30200: PPUSH
30201: CALL_OW 257
30205: PUSH
30206: LD_INT 9
30208: EQUAL
30209: IFFALSE 30230
// points := [ 20 , 55 , 40 ] ;
30211: LD_ADDR_VAR 0 9
30215: PUSH
30216: LD_INT 20
30218: PUSH
30219: LD_INT 55
30221: PUSH
30222: LD_INT 40
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: LIST
30229: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30230: LD_VAR 0 6
30234: PPUSH
30235: CALL_OW 257
30239: PUSH
30240: LD_INT 12
30242: PUSH
30243: LD_INT 16
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: IN
30250: IFFALSE 30271
// points := [ 5 , 3 , 2 ] ;
30252: LD_ADDR_VAR 0 9
30256: PUSH
30257: LD_INT 5
30259: PUSH
30260: LD_INT 3
30262: PUSH
30263: LD_INT 2
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: LIST
30270: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30271: LD_VAR 0 6
30275: PPUSH
30276: CALL_OW 257
30280: PUSH
30281: LD_INT 17
30283: EQUAL
30284: IFFALSE 30305
// points := [ 100 , 50 , 75 ] ;
30286: LD_ADDR_VAR 0 9
30290: PUSH
30291: LD_INT 100
30293: PUSH
30294: LD_INT 50
30296: PUSH
30297: LD_INT 75
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: LIST
30304: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30305: LD_VAR 0 6
30309: PPUSH
30310: CALL_OW 257
30314: PUSH
30315: LD_INT 15
30317: EQUAL
30318: IFFALSE 30339
// points := [ 10 , 5 , 3 ] ;
30320: LD_ADDR_VAR 0 9
30324: PUSH
30325: LD_INT 10
30327: PUSH
30328: LD_INT 5
30330: PUSH
30331: LD_INT 3
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30339: LD_VAR 0 6
30343: PPUSH
30344: CALL_OW 257
30348: PUSH
30349: LD_INT 14
30351: EQUAL
30352: IFFALSE 30373
// points := [ 10 , 0 , 0 ] ;
30354: LD_ADDR_VAR 0 9
30358: PUSH
30359: LD_INT 10
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: LIST
30372: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30373: LD_VAR 0 6
30377: PPUSH
30378: CALL_OW 257
30382: PUSH
30383: LD_INT 11
30385: EQUAL
30386: IFFALSE 30407
// points := [ 30 , 10 , 5 ] ;
30388: LD_ADDR_VAR 0 9
30392: PUSH
30393: LD_INT 30
30395: PUSH
30396: LD_INT 10
30398: PUSH
30399: LD_INT 5
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30407: LD_VAR 0 1
30411: PPUSH
30412: LD_INT 5
30414: PPUSH
30415: CALL_OW 321
30419: PUSH
30420: LD_INT 2
30422: EQUAL
30423: IFFALSE 30440
// bpoints := bpoints * 1.8 ;
30425: LD_ADDR_VAR 0 10
30429: PUSH
30430: LD_VAR 0 10
30434: PUSH
30435: LD_REAL  1.80000000000000E+0000
30438: MUL
30439: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30440: LD_VAR 0 6
30444: PPUSH
30445: CALL_OW 257
30449: PUSH
30450: LD_INT 1
30452: PUSH
30453: LD_INT 2
30455: PUSH
30456: LD_INT 3
30458: PUSH
30459: LD_INT 4
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: IN
30468: PUSH
30469: LD_VAR 0 1
30473: PPUSH
30474: LD_INT 51
30476: PPUSH
30477: CALL_OW 321
30481: PUSH
30482: LD_INT 2
30484: EQUAL
30485: AND
30486: IFFALSE 30503
// bpoints := bpoints * 1.2 ;
30488: LD_ADDR_VAR 0 10
30492: PUSH
30493: LD_VAR 0 10
30497: PUSH
30498: LD_REAL  1.20000000000000E+0000
30501: MUL
30502: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30503: LD_VAR 0 6
30507: PPUSH
30508: CALL_OW 257
30512: PUSH
30513: LD_INT 5
30515: PUSH
30516: LD_INT 7
30518: PUSH
30519: LD_INT 9
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: IN
30527: PUSH
30528: LD_VAR 0 1
30532: PPUSH
30533: LD_INT 52
30535: PPUSH
30536: CALL_OW 321
30540: PUSH
30541: LD_INT 2
30543: EQUAL
30544: AND
30545: IFFALSE 30562
// bpoints := bpoints * 1.5 ;
30547: LD_ADDR_VAR 0 10
30551: PUSH
30552: LD_VAR 0 10
30556: PUSH
30557: LD_REAL  1.50000000000000E+0000
30560: MUL
30561: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30562: LD_VAR 0 1
30566: PPUSH
30567: LD_INT 66
30569: PPUSH
30570: CALL_OW 321
30574: PUSH
30575: LD_INT 2
30577: EQUAL
30578: IFFALSE 30595
// bpoints := bpoints * 1.1 ;
30580: LD_ADDR_VAR 0 10
30584: PUSH
30585: LD_VAR 0 10
30589: PUSH
30590: LD_REAL  1.10000000000000E+0000
30593: MUL
30594: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30595: LD_ADDR_VAR 0 10
30599: PUSH
30600: LD_VAR 0 10
30604: PUSH
30605: LD_VAR 0 6
30609: PPUSH
30610: LD_INT 1
30612: PPUSH
30613: CALL_OW 259
30617: PUSH
30618: LD_REAL  1.15000000000000E+0000
30621: MUL
30622: MUL
30623: ST_TO_ADDR
// end ; unit_vehicle :
30624: GO 31448
30626: LD_INT 2
30628: DOUBLE
30629: EQUAL
30630: IFTRUE 30634
30632: GO 31436
30634: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30635: LD_VAR 0 6
30639: PPUSH
30640: CALL_OW 264
30644: PUSH
30645: LD_INT 2
30647: PUSH
30648: LD_INT 42
30650: PUSH
30651: LD_INT 24
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: LIST
30658: IN
30659: IFFALSE 30680
// points := [ 25 , 5 , 3 ] ;
30661: LD_ADDR_VAR 0 9
30665: PUSH
30666: LD_INT 25
30668: PUSH
30669: LD_INT 5
30671: PUSH
30672: LD_INT 3
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30680: LD_VAR 0 6
30684: PPUSH
30685: CALL_OW 264
30689: PUSH
30690: LD_INT 4
30692: PUSH
30693: LD_INT 43
30695: PUSH
30696: LD_INT 25
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: LIST
30703: IN
30704: IFFALSE 30725
// points := [ 40 , 15 , 5 ] ;
30706: LD_ADDR_VAR 0 9
30710: PUSH
30711: LD_INT 40
30713: PUSH
30714: LD_INT 15
30716: PUSH
30717: LD_INT 5
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: LIST
30724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30725: LD_VAR 0 6
30729: PPUSH
30730: CALL_OW 264
30734: PUSH
30735: LD_INT 3
30737: PUSH
30738: LD_INT 23
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: IN
30745: IFFALSE 30766
// points := [ 7 , 25 , 8 ] ;
30747: LD_ADDR_VAR 0 9
30751: PUSH
30752: LD_INT 7
30754: PUSH
30755: LD_INT 25
30757: PUSH
30758: LD_INT 8
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30766: LD_VAR 0 6
30770: PPUSH
30771: CALL_OW 264
30775: PUSH
30776: LD_INT 5
30778: PUSH
30779: LD_INT 27
30781: PUSH
30782: LD_INT 44
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: LIST
30789: IN
30790: IFFALSE 30811
// points := [ 14 , 50 , 16 ] ;
30792: LD_ADDR_VAR 0 9
30796: PUSH
30797: LD_INT 14
30799: PUSH
30800: LD_INT 50
30802: PUSH
30803: LD_INT 16
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: LIST
30810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30811: LD_VAR 0 6
30815: PPUSH
30816: CALL_OW 264
30820: PUSH
30821: LD_INT 6
30823: PUSH
30824: LD_INT 46
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: IN
30831: IFFALSE 30852
// points := [ 32 , 120 , 70 ] ;
30833: LD_ADDR_VAR 0 9
30837: PUSH
30838: LD_INT 32
30840: PUSH
30841: LD_INT 120
30843: PUSH
30844: LD_INT 70
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: LIST
30851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
30852: LD_VAR 0 6
30856: PPUSH
30857: CALL_OW 264
30861: PUSH
30862: LD_INT 7
30864: PUSH
30865: LD_INT 28
30867: PUSH
30868: LD_INT 45
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: LIST
30875: IN
30876: IFFALSE 30897
// points := [ 35 , 20 , 45 ] ;
30878: LD_ADDR_VAR 0 9
30882: PUSH
30883: LD_INT 35
30885: PUSH
30886: LD_INT 20
30888: PUSH
30889: LD_INT 45
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: LIST
30896: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30897: LD_VAR 0 6
30901: PPUSH
30902: CALL_OW 264
30906: PUSH
30907: LD_INT 47
30909: PUSH
30910: EMPTY
30911: LIST
30912: IN
30913: IFFALSE 30934
// points := [ 67 , 45 , 75 ] ;
30915: LD_ADDR_VAR 0 9
30919: PUSH
30920: LD_INT 67
30922: PUSH
30923: LD_INT 45
30925: PUSH
30926: LD_INT 75
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: LIST
30933: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30934: LD_VAR 0 6
30938: PPUSH
30939: CALL_OW 264
30943: PUSH
30944: LD_INT 26
30946: PUSH
30947: EMPTY
30948: LIST
30949: IN
30950: IFFALSE 30971
// points := [ 120 , 30 , 80 ] ;
30952: LD_ADDR_VAR 0 9
30956: PUSH
30957: LD_INT 120
30959: PUSH
30960: LD_INT 30
30962: PUSH
30963: LD_INT 80
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: LIST
30970: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30971: LD_VAR 0 6
30975: PPUSH
30976: CALL_OW 264
30980: PUSH
30981: LD_INT 22
30983: PUSH
30984: EMPTY
30985: LIST
30986: IN
30987: IFFALSE 31008
// points := [ 40 , 1 , 1 ] ;
30989: LD_ADDR_VAR 0 9
30993: PUSH
30994: LD_INT 40
30996: PUSH
30997: LD_INT 1
30999: PUSH
31000: LD_INT 1
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: LIST
31007: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31008: LD_VAR 0 6
31012: PPUSH
31013: CALL_OW 264
31017: PUSH
31018: LD_INT 29
31020: PUSH
31021: EMPTY
31022: LIST
31023: IN
31024: IFFALSE 31045
// points := [ 70 , 200 , 400 ] ;
31026: LD_ADDR_VAR 0 9
31030: PUSH
31031: LD_INT 70
31033: PUSH
31034: LD_INT 200
31036: PUSH
31037: LD_INT 400
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: LIST
31044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31045: LD_VAR 0 6
31049: PPUSH
31050: CALL_OW 264
31054: PUSH
31055: LD_INT 14
31057: PUSH
31058: LD_INT 53
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: IN
31065: IFFALSE 31086
// points := [ 40 , 10 , 20 ] ;
31067: LD_ADDR_VAR 0 9
31071: PUSH
31072: LD_INT 40
31074: PUSH
31075: LD_INT 10
31077: PUSH
31078: LD_INT 20
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31086: LD_VAR 0 6
31090: PPUSH
31091: CALL_OW 264
31095: PUSH
31096: LD_INT 9
31098: PUSH
31099: EMPTY
31100: LIST
31101: IN
31102: IFFALSE 31123
// points := [ 5 , 70 , 20 ] ;
31104: LD_ADDR_VAR 0 9
31108: PUSH
31109: LD_INT 5
31111: PUSH
31112: LD_INT 70
31114: PUSH
31115: LD_INT 20
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: LIST
31122: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31123: LD_VAR 0 6
31127: PPUSH
31128: CALL_OW 264
31132: PUSH
31133: LD_INT 10
31135: PUSH
31136: EMPTY
31137: LIST
31138: IN
31139: IFFALSE 31160
// points := [ 35 , 110 , 70 ] ;
31141: LD_ADDR_VAR 0 9
31145: PUSH
31146: LD_INT 35
31148: PUSH
31149: LD_INT 110
31151: PUSH
31152: LD_INT 70
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: LIST
31159: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31160: LD_VAR 0 6
31164: PPUSH
31165: CALL_OW 265
31169: PUSH
31170: LD_INT 25
31172: EQUAL
31173: IFFALSE 31194
// points := [ 80 , 65 , 100 ] ;
31175: LD_ADDR_VAR 0 9
31179: PUSH
31180: LD_INT 80
31182: PUSH
31183: LD_INT 65
31185: PUSH
31186: LD_INT 100
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: LIST
31193: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31194: LD_VAR 0 6
31198: PPUSH
31199: CALL_OW 263
31203: PUSH
31204: LD_INT 1
31206: EQUAL
31207: IFFALSE 31242
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31209: LD_ADDR_VAR 0 10
31213: PUSH
31214: LD_VAR 0 10
31218: PUSH
31219: LD_VAR 0 6
31223: PPUSH
31224: CALL_OW 311
31228: PPUSH
31229: LD_INT 3
31231: PPUSH
31232: CALL_OW 259
31236: PUSH
31237: LD_INT 4
31239: MUL
31240: MUL
31241: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31242: LD_VAR 0 6
31246: PPUSH
31247: CALL_OW 263
31251: PUSH
31252: LD_INT 2
31254: EQUAL
31255: IFFALSE 31306
// begin j := IsControledBy ( i ) ;
31257: LD_ADDR_VAR 0 7
31261: PUSH
31262: LD_VAR 0 6
31266: PPUSH
31267: CALL_OW 312
31271: ST_TO_ADDR
// if j then
31272: LD_VAR 0 7
31276: IFFALSE 31306
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31278: LD_ADDR_VAR 0 10
31282: PUSH
31283: LD_VAR 0 10
31287: PUSH
31288: LD_VAR 0 7
31292: PPUSH
31293: LD_INT 3
31295: PPUSH
31296: CALL_OW 259
31300: PUSH
31301: LD_INT 3
31303: MUL
31304: MUL
31305: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31306: LD_VAR 0 6
31310: PPUSH
31311: CALL_OW 264
31315: PUSH
31316: LD_INT 5
31318: PUSH
31319: LD_INT 6
31321: PUSH
31322: LD_INT 46
31324: PUSH
31325: LD_INT 44
31327: PUSH
31328: LD_INT 47
31330: PUSH
31331: LD_INT 45
31333: PUSH
31334: LD_INT 28
31336: PUSH
31337: LD_INT 7
31339: PUSH
31340: LD_INT 27
31342: PUSH
31343: LD_INT 29
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: IN
31358: PUSH
31359: LD_VAR 0 1
31363: PPUSH
31364: LD_INT 52
31366: PPUSH
31367: CALL_OW 321
31371: PUSH
31372: LD_INT 2
31374: EQUAL
31375: AND
31376: IFFALSE 31393
// bpoints := bpoints * 1.2 ;
31378: LD_ADDR_VAR 0 10
31382: PUSH
31383: LD_VAR 0 10
31387: PUSH
31388: LD_REAL  1.20000000000000E+0000
31391: MUL
31392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31393: LD_VAR 0 6
31397: PPUSH
31398: CALL_OW 264
31402: PUSH
31403: LD_INT 6
31405: PUSH
31406: LD_INT 46
31408: PUSH
31409: LD_INT 47
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: LIST
31416: IN
31417: IFFALSE 31434
// bpoints := bpoints * 1.2 ;
31419: LD_ADDR_VAR 0 10
31423: PUSH
31424: LD_VAR 0 10
31428: PUSH
31429: LD_REAL  1.20000000000000E+0000
31432: MUL
31433: ST_TO_ADDR
// end ; unit_building :
31434: GO 31448
31436: LD_INT 3
31438: DOUBLE
31439: EQUAL
31440: IFTRUE 31444
31442: GO 31447
31444: POP
// ; end ;
31445: GO 31448
31447: POP
// for j = 1 to 3 do
31448: LD_ADDR_VAR 0 7
31452: PUSH
31453: DOUBLE
31454: LD_INT 1
31456: DEC
31457: ST_TO_ADDR
31458: LD_INT 3
31460: PUSH
31461: FOR_TO
31462: IFFALSE 31515
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31464: LD_ADDR_VAR 0 5
31468: PUSH
31469: LD_VAR 0 5
31473: PPUSH
31474: LD_VAR 0 7
31478: PPUSH
31479: LD_VAR 0 5
31483: PUSH
31484: LD_VAR 0 7
31488: ARRAY
31489: PUSH
31490: LD_VAR 0 9
31494: PUSH
31495: LD_VAR 0 7
31499: ARRAY
31500: PUSH
31501: LD_VAR 0 10
31505: MUL
31506: PLUS
31507: PPUSH
31508: CALL_OW 1
31512: ST_TO_ADDR
31513: GO 31461
31515: POP
31516: POP
// end ;
31517: GO 30000
31519: POP
31520: POP
// result := Replace ( result , 4 , tmp ) ;
31521: LD_ADDR_VAR 0 5
31525: PUSH
31526: LD_VAR 0 5
31530: PPUSH
31531: LD_INT 4
31533: PPUSH
31534: LD_VAR 0 8
31538: PPUSH
31539: CALL_OW 1
31543: ST_TO_ADDR
// end ;
31544: LD_VAR 0 5
31548: RET
// export function DangerAtRange ( unit , range ) ; begin
31549: LD_INT 0
31551: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31552: LD_ADDR_VAR 0 3
31556: PUSH
31557: LD_VAR 0 1
31561: PPUSH
31562: CALL_OW 255
31566: PPUSH
31567: LD_VAR 0 1
31571: PPUSH
31572: CALL_OW 250
31576: PPUSH
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 251
31586: PPUSH
31587: LD_VAR 0 2
31591: PPUSH
31592: CALL 29852 0 4
31596: ST_TO_ADDR
// end ;
31597: LD_VAR 0 3
31601: RET
// export function DangerInArea ( side , area ) ; begin
31602: LD_INT 0
31604: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31605: LD_ADDR_VAR 0 3
31609: PUSH
31610: LD_VAR 0 2
31614: PPUSH
31615: LD_INT 81
31617: PUSH
31618: LD_VAR 0 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PPUSH
31627: CALL_OW 70
31631: ST_TO_ADDR
// end ;
31632: LD_VAR 0 3
31636: RET
// export function IsExtension ( b ) ; begin
31637: LD_INT 0
31639: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31640: LD_ADDR_VAR 0 2
31644: PUSH
31645: LD_VAR 0 1
31649: PUSH
31650: LD_INT 23
31652: PUSH
31653: LD_INT 20
31655: PUSH
31656: LD_INT 22
31658: PUSH
31659: LD_INT 17
31661: PUSH
31662: LD_INT 24
31664: PUSH
31665: LD_INT 21
31667: PUSH
31668: LD_INT 19
31670: PUSH
31671: LD_INT 16
31673: PUSH
31674: LD_INT 25
31676: PUSH
31677: LD_INT 18
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: IN
31692: ST_TO_ADDR
// end ;
31693: LD_VAR 0 2
31697: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31698: LD_INT 0
31700: PPUSH
31701: PPUSH
31702: PPUSH
// result := [ ] ;
31703: LD_ADDR_VAR 0 4
31707: PUSH
31708: EMPTY
31709: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31710: LD_ADDR_VAR 0 5
31714: PUSH
31715: LD_VAR 0 2
31719: PPUSH
31720: LD_INT 21
31722: PUSH
31723: LD_INT 3
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PPUSH
31730: CALL_OW 70
31734: ST_TO_ADDR
// if not tmp then
31735: LD_VAR 0 5
31739: NOT
31740: IFFALSE 31744
// exit ;
31742: GO 31808
// if checkLink then
31744: LD_VAR 0 3
31748: IFFALSE 31798
// begin for i in tmp do
31750: LD_ADDR_VAR 0 6
31754: PUSH
31755: LD_VAR 0 5
31759: PUSH
31760: FOR_IN
31761: IFFALSE 31796
// if GetBase ( i ) <> base then
31763: LD_VAR 0 6
31767: PPUSH
31768: CALL_OW 274
31772: PUSH
31773: LD_VAR 0 1
31777: NONEQUAL
31778: IFFALSE 31794
// ComLinkToBase ( base , i ) ;
31780: LD_VAR 0 1
31784: PPUSH
31785: LD_VAR 0 6
31789: PPUSH
31790: CALL_OW 169
31794: GO 31760
31796: POP
31797: POP
// end ; result := tmp ;
31798: LD_ADDR_VAR 0 4
31802: PUSH
31803: LD_VAR 0 5
31807: ST_TO_ADDR
// end ;
31808: LD_VAR 0 4
31812: RET
// export function ComComplete ( units , b ) ; var i ; begin
31813: LD_INT 0
31815: PPUSH
31816: PPUSH
// if not units then
31817: LD_VAR 0 1
31821: NOT
31822: IFFALSE 31826
// exit ;
31824: GO 31916
// for i in units do
31826: LD_ADDR_VAR 0 4
31830: PUSH
31831: LD_VAR 0 1
31835: PUSH
31836: FOR_IN
31837: IFFALSE 31914
// if BuildingStatus ( b ) = bs_build then
31839: LD_VAR 0 2
31843: PPUSH
31844: CALL_OW 461
31848: PUSH
31849: LD_INT 1
31851: EQUAL
31852: IFFALSE 31912
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31854: LD_VAR 0 4
31858: PPUSH
31859: LD_STRING h
31861: PUSH
31862: LD_VAR 0 2
31866: PPUSH
31867: CALL_OW 250
31871: PUSH
31872: LD_VAR 0 2
31876: PPUSH
31877: CALL_OW 251
31881: PUSH
31882: LD_VAR 0 2
31886: PUSH
31887: LD_INT 0
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: PUSH
31905: EMPTY
31906: LIST
31907: PPUSH
31908: CALL_OW 446
31912: GO 31836
31914: POP
31915: POP
// end ;
31916: LD_VAR 0 3
31920: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31921: LD_INT 0
31923: PPUSH
31924: PPUSH
31925: PPUSH
31926: PPUSH
31927: PPUSH
31928: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
31929: LD_VAR 0 1
31933: NOT
31934: PUSH
31935: LD_VAR 0 1
31939: PPUSH
31940: CALL_OW 263
31944: PUSH
31945: LD_INT 2
31947: EQUAL
31948: NOT
31949: OR
31950: IFFALSE 31954
// exit ;
31952: GO 32270
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31954: LD_ADDR_VAR 0 6
31958: PUSH
31959: LD_INT 22
31961: PUSH
31962: LD_VAR 0 1
31966: PPUSH
31967: CALL_OW 255
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 2
31978: PUSH
31979: LD_INT 30
31981: PUSH
31982: LD_INT 36
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 34
31991: PUSH
31992: LD_INT 31
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PPUSH
32008: CALL_OW 69
32012: ST_TO_ADDR
// if not tmp then
32013: LD_VAR 0 6
32017: NOT
32018: IFFALSE 32022
// exit ;
32020: GO 32270
// result := [ ] ;
32022: LD_ADDR_VAR 0 2
32026: PUSH
32027: EMPTY
32028: ST_TO_ADDR
// for i in tmp do
32029: LD_ADDR_VAR 0 3
32033: PUSH
32034: LD_VAR 0 6
32038: PUSH
32039: FOR_IN
32040: IFFALSE 32111
// begin t := UnitsInside ( i ) ;
32042: LD_ADDR_VAR 0 4
32046: PUSH
32047: LD_VAR 0 3
32051: PPUSH
32052: CALL_OW 313
32056: ST_TO_ADDR
// if t then
32057: LD_VAR 0 4
32061: IFFALSE 32109
// for j in t do
32063: LD_ADDR_VAR 0 7
32067: PUSH
32068: LD_VAR 0 4
32072: PUSH
32073: FOR_IN
32074: IFFALSE 32107
// result := Insert ( result , result + 1 , j ) ;
32076: LD_ADDR_VAR 0 2
32080: PUSH
32081: LD_VAR 0 2
32085: PPUSH
32086: LD_VAR 0 2
32090: PUSH
32091: LD_INT 1
32093: PLUS
32094: PPUSH
32095: LD_VAR 0 7
32099: PPUSH
32100: CALL_OW 2
32104: ST_TO_ADDR
32105: GO 32073
32107: POP
32108: POP
// end ;
32109: GO 32039
32111: POP
32112: POP
// if not result then
32113: LD_VAR 0 2
32117: NOT
32118: IFFALSE 32122
// exit ;
32120: GO 32270
// mech := result [ 1 ] ;
32122: LD_ADDR_VAR 0 5
32126: PUSH
32127: LD_VAR 0 2
32131: PUSH
32132: LD_INT 1
32134: ARRAY
32135: ST_TO_ADDR
// if result > 1 then
32136: LD_VAR 0 2
32140: PUSH
32141: LD_INT 1
32143: GREATER
32144: IFFALSE 32256
// for i = 2 to result do
32146: LD_ADDR_VAR 0 3
32150: PUSH
32151: DOUBLE
32152: LD_INT 2
32154: DEC
32155: ST_TO_ADDR
32156: LD_VAR 0 2
32160: PUSH
32161: FOR_TO
32162: IFFALSE 32254
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32164: LD_ADDR_VAR 0 4
32168: PUSH
32169: LD_VAR 0 2
32173: PUSH
32174: LD_VAR 0 3
32178: ARRAY
32179: PPUSH
32180: LD_INT 3
32182: PPUSH
32183: CALL_OW 259
32187: PUSH
32188: LD_VAR 0 2
32192: PUSH
32193: LD_VAR 0 3
32197: ARRAY
32198: PPUSH
32199: CALL_OW 432
32203: MINUS
32204: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32205: LD_VAR 0 4
32209: PUSH
32210: LD_VAR 0 5
32214: PPUSH
32215: LD_INT 3
32217: PPUSH
32218: CALL_OW 259
32222: PUSH
32223: LD_VAR 0 5
32227: PPUSH
32228: CALL_OW 432
32232: MINUS
32233: GREATEREQUAL
32234: IFFALSE 32252
// mech := result [ i ] ;
32236: LD_ADDR_VAR 0 5
32240: PUSH
32241: LD_VAR 0 2
32245: PUSH
32246: LD_VAR 0 3
32250: ARRAY
32251: ST_TO_ADDR
// end ;
32252: GO 32161
32254: POP
32255: POP
// ComLinkTo ( vehicle , mech ) ;
32256: LD_VAR 0 1
32260: PPUSH
32261: LD_VAR 0 5
32265: PPUSH
32266: CALL_OW 135
// end ;
32270: LD_VAR 0 2
32274: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32275: LD_INT 0
32277: PPUSH
32278: PPUSH
32279: PPUSH
32280: PPUSH
32281: PPUSH
32282: PPUSH
32283: PPUSH
32284: PPUSH
32285: PPUSH
32286: PPUSH
32287: PPUSH
32288: PPUSH
32289: PPUSH
// result := [ ] ;
32290: LD_ADDR_VAR 0 7
32294: PUSH
32295: EMPTY
32296: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32297: LD_VAR 0 1
32301: PPUSH
32302: CALL_OW 266
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: IN
32317: NOT
32318: IFFALSE 32322
// exit ;
32320: GO 33956
// if name then
32322: LD_VAR 0 3
32326: IFFALSE 32342
// SetBName ( base_dep , name ) ;
32328: LD_VAR 0 1
32332: PPUSH
32333: LD_VAR 0 3
32337: PPUSH
32338: CALL_OW 500
// base := GetBase ( base_dep ) ;
32342: LD_ADDR_VAR 0 15
32346: PUSH
32347: LD_VAR 0 1
32351: PPUSH
32352: CALL_OW 274
32356: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32357: LD_ADDR_VAR 0 16
32361: PUSH
32362: LD_VAR 0 1
32366: PPUSH
32367: CALL_OW 255
32371: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32372: LD_ADDR_VAR 0 17
32376: PUSH
32377: LD_VAR 0 1
32381: PPUSH
32382: CALL_OW 248
32386: ST_TO_ADDR
// if sources then
32387: LD_VAR 0 5
32391: IFFALSE 32438
// for i = 1 to 3 do
32393: LD_ADDR_VAR 0 8
32397: PUSH
32398: DOUBLE
32399: LD_INT 1
32401: DEC
32402: ST_TO_ADDR
32403: LD_INT 3
32405: PUSH
32406: FOR_TO
32407: IFFALSE 32436
// AddResourceType ( base , i , sources [ i ] ) ;
32409: LD_VAR 0 15
32413: PPUSH
32414: LD_VAR 0 8
32418: PPUSH
32419: LD_VAR 0 5
32423: PUSH
32424: LD_VAR 0 8
32428: ARRAY
32429: PPUSH
32430: CALL_OW 276
32434: GO 32406
32436: POP
32437: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32438: LD_ADDR_VAR 0 18
32442: PUSH
32443: LD_VAR 0 15
32447: PPUSH
32448: LD_VAR 0 2
32452: PPUSH
32453: LD_INT 1
32455: PPUSH
32456: CALL 31698 0 3
32460: ST_TO_ADDR
// InitHc ;
32461: CALL_OW 19
// InitUc ;
32465: CALL_OW 18
// uc_side := side ;
32469: LD_ADDR_OWVAR 20
32473: PUSH
32474: LD_VAR 0 16
32478: ST_TO_ADDR
// uc_nation := nation ;
32479: LD_ADDR_OWVAR 21
32483: PUSH
32484: LD_VAR 0 17
32488: ST_TO_ADDR
// if buildings then
32489: LD_VAR 0 18
32493: IFFALSE 33815
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32495: LD_ADDR_VAR 0 19
32499: PUSH
32500: LD_VAR 0 18
32504: PPUSH
32505: LD_INT 2
32507: PUSH
32508: LD_INT 30
32510: PUSH
32511: LD_INT 29
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 30
32520: PUSH
32521: LD_INT 30
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: LIST
32532: PPUSH
32533: CALL_OW 72
32537: ST_TO_ADDR
// if tmp then
32538: LD_VAR 0 19
32542: IFFALSE 32590
// for i in tmp do
32544: LD_ADDR_VAR 0 8
32548: PUSH
32549: LD_VAR 0 19
32553: PUSH
32554: FOR_IN
32555: IFFALSE 32588
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32557: LD_VAR 0 8
32561: PPUSH
32562: CALL_OW 250
32566: PPUSH
32567: LD_VAR 0 8
32571: PPUSH
32572: CALL_OW 251
32576: PPUSH
32577: LD_VAR 0 16
32581: PPUSH
32582: CALL_OW 441
32586: GO 32554
32588: POP
32589: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32590: LD_VAR 0 18
32594: PPUSH
32595: LD_INT 2
32597: PUSH
32598: LD_INT 30
32600: PUSH
32601: LD_INT 32
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: LD_INT 30
32610: PUSH
32611: LD_INT 33
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: LIST
32622: PPUSH
32623: CALL_OW 72
32627: IFFALSE 32715
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32629: LD_ADDR_VAR 0 8
32633: PUSH
32634: LD_VAR 0 18
32638: PPUSH
32639: LD_INT 2
32641: PUSH
32642: LD_INT 30
32644: PUSH
32645: LD_INT 32
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 30
32654: PUSH
32655: LD_INT 33
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: LIST
32666: PPUSH
32667: CALL_OW 72
32671: PUSH
32672: FOR_IN
32673: IFFALSE 32713
// begin if not GetBWeapon ( i ) then
32675: LD_VAR 0 8
32679: PPUSH
32680: CALL_OW 269
32684: NOT
32685: IFFALSE 32711
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32687: LD_VAR 0 8
32691: PPUSH
32692: LD_VAR 0 8
32696: PPUSH
32697: LD_VAR 0 2
32701: PPUSH
32702: CALL 33961 0 2
32706: PPUSH
32707: CALL_OW 431
// end ;
32711: GO 32672
32713: POP
32714: POP
// end ; for i = 1 to personel do
32715: LD_ADDR_VAR 0 8
32719: PUSH
32720: DOUBLE
32721: LD_INT 1
32723: DEC
32724: ST_TO_ADDR
32725: LD_VAR 0 6
32729: PUSH
32730: FOR_TO
32731: IFFALSE 33795
// begin if i > 4 then
32733: LD_VAR 0 8
32737: PUSH
32738: LD_INT 4
32740: GREATER
32741: IFFALSE 32745
// break ;
32743: GO 33795
// case i of 1 :
32745: LD_VAR 0 8
32749: PUSH
32750: LD_INT 1
32752: DOUBLE
32753: EQUAL
32754: IFTRUE 32758
32756: GO 32838
32758: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32759: LD_ADDR_VAR 0 12
32763: PUSH
32764: LD_VAR 0 18
32768: PPUSH
32769: LD_INT 22
32771: PUSH
32772: LD_VAR 0 16
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 58
32783: PUSH
32784: EMPTY
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 30
32792: PUSH
32793: LD_INT 32
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 30
32802: PUSH
32803: LD_INT 4
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 30
32812: PUSH
32813: LD_INT 5
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: LIST
32830: PPUSH
32831: CALL_OW 72
32835: ST_TO_ADDR
32836: GO 33060
32838: LD_INT 2
32840: DOUBLE
32841: EQUAL
32842: IFTRUE 32846
32844: GO 32908
32846: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32847: LD_ADDR_VAR 0 12
32851: PUSH
32852: LD_VAR 0 18
32856: PPUSH
32857: LD_INT 22
32859: PUSH
32860: LD_VAR 0 16
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 2
32871: PUSH
32872: LD_INT 30
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 30
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: LIST
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PPUSH
32901: CALL_OW 72
32905: ST_TO_ADDR
32906: GO 33060
32908: LD_INT 3
32910: DOUBLE
32911: EQUAL
32912: IFTRUE 32916
32914: GO 32978
32916: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32917: LD_ADDR_VAR 0 12
32921: PUSH
32922: LD_VAR 0 18
32926: PPUSH
32927: LD_INT 22
32929: PUSH
32930: LD_VAR 0 16
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 2
32941: PUSH
32942: LD_INT 30
32944: PUSH
32945: LD_INT 2
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 30
32954: PUSH
32955: LD_INT 3
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: LIST
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PPUSH
32971: CALL_OW 72
32975: ST_TO_ADDR
32976: GO 33060
32978: LD_INT 4
32980: DOUBLE
32981: EQUAL
32982: IFTRUE 32986
32984: GO 33059
32986: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32987: LD_ADDR_VAR 0 12
32991: PUSH
32992: LD_VAR 0 18
32996: PPUSH
32997: LD_INT 22
32999: PUSH
33000: LD_VAR 0 16
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: LD_INT 30
33014: PUSH
33015: LD_INT 6
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 30
33024: PUSH
33025: LD_INT 7
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 30
33034: PUSH
33035: LD_INT 8
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PPUSH
33052: CALL_OW 72
33056: ST_TO_ADDR
33057: GO 33060
33059: POP
// if i = 1 then
33060: LD_VAR 0 8
33064: PUSH
33065: LD_INT 1
33067: EQUAL
33068: IFFALSE 33179
// begin tmp := [ ] ;
33070: LD_ADDR_VAR 0 19
33074: PUSH
33075: EMPTY
33076: ST_TO_ADDR
// for j in f do
33077: LD_ADDR_VAR 0 9
33081: PUSH
33082: LD_VAR 0 12
33086: PUSH
33087: FOR_IN
33088: IFFALSE 33161
// if GetBType ( j ) = b_bunker then
33090: LD_VAR 0 9
33094: PPUSH
33095: CALL_OW 266
33099: PUSH
33100: LD_INT 32
33102: EQUAL
33103: IFFALSE 33130
// tmp := Insert ( tmp , 1 , j ) else
33105: LD_ADDR_VAR 0 19
33109: PUSH
33110: LD_VAR 0 19
33114: PPUSH
33115: LD_INT 1
33117: PPUSH
33118: LD_VAR 0 9
33122: PPUSH
33123: CALL_OW 2
33127: ST_TO_ADDR
33128: GO 33159
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33130: LD_ADDR_VAR 0 19
33134: PUSH
33135: LD_VAR 0 19
33139: PPUSH
33140: LD_VAR 0 19
33144: PUSH
33145: LD_INT 1
33147: PLUS
33148: PPUSH
33149: LD_VAR 0 9
33153: PPUSH
33154: CALL_OW 2
33158: ST_TO_ADDR
33159: GO 33087
33161: POP
33162: POP
// if tmp then
33163: LD_VAR 0 19
33167: IFFALSE 33179
// f := tmp ;
33169: LD_ADDR_VAR 0 12
33173: PUSH
33174: LD_VAR 0 19
33178: ST_TO_ADDR
// end ; x := personel [ i ] ;
33179: LD_ADDR_VAR 0 13
33183: PUSH
33184: LD_VAR 0 6
33188: PUSH
33189: LD_VAR 0 8
33193: ARRAY
33194: ST_TO_ADDR
// if x = - 1 then
33195: LD_VAR 0 13
33199: PUSH
33200: LD_INT 1
33202: NEG
33203: EQUAL
33204: IFFALSE 33413
// begin for j in f do
33206: LD_ADDR_VAR 0 9
33210: PUSH
33211: LD_VAR 0 12
33215: PUSH
33216: FOR_IN
33217: IFFALSE 33409
// repeat InitHc ;
33219: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33223: LD_VAR 0 9
33227: PPUSH
33228: CALL_OW 266
33232: PUSH
33233: LD_INT 5
33235: EQUAL
33236: IFFALSE 33306
// begin if UnitsInside ( j ) < 3 then
33238: LD_VAR 0 9
33242: PPUSH
33243: CALL_OW 313
33247: PUSH
33248: LD_INT 3
33250: LESS
33251: IFFALSE 33287
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33253: LD_INT 0
33255: PPUSH
33256: LD_INT 5
33258: PUSH
33259: LD_INT 8
33261: PUSH
33262: LD_INT 9
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: LIST
33269: PUSH
33270: LD_VAR 0 17
33274: ARRAY
33275: PPUSH
33276: LD_VAR 0 4
33280: PPUSH
33281: CALL_OW 380
33285: GO 33304
// PrepareHuman ( false , i , skill ) ;
33287: LD_INT 0
33289: PPUSH
33290: LD_VAR 0 8
33294: PPUSH
33295: LD_VAR 0 4
33299: PPUSH
33300: CALL_OW 380
// end else
33304: GO 33323
// PrepareHuman ( false , i , skill ) ;
33306: LD_INT 0
33308: PPUSH
33309: LD_VAR 0 8
33313: PPUSH
33314: LD_VAR 0 4
33318: PPUSH
33319: CALL_OW 380
// un := CreateHuman ;
33323: LD_ADDR_VAR 0 14
33327: PUSH
33328: CALL_OW 44
33332: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33333: LD_ADDR_VAR 0 7
33337: PUSH
33338: LD_VAR 0 7
33342: PPUSH
33343: LD_INT 1
33345: PPUSH
33346: LD_VAR 0 14
33350: PPUSH
33351: CALL_OW 2
33355: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33356: LD_VAR 0 14
33360: PPUSH
33361: LD_VAR 0 9
33365: PPUSH
33366: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33370: LD_VAR 0 9
33374: PPUSH
33375: CALL_OW 313
33379: PUSH
33380: LD_INT 6
33382: EQUAL
33383: PUSH
33384: LD_VAR 0 9
33388: PPUSH
33389: CALL_OW 266
33393: PUSH
33394: LD_INT 32
33396: PUSH
33397: LD_INT 31
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: IN
33404: OR
33405: IFFALSE 33219
33407: GO 33216
33409: POP
33410: POP
// end else
33411: GO 33793
// for j = 1 to x do
33413: LD_ADDR_VAR 0 9
33417: PUSH
33418: DOUBLE
33419: LD_INT 1
33421: DEC
33422: ST_TO_ADDR
33423: LD_VAR 0 13
33427: PUSH
33428: FOR_TO
33429: IFFALSE 33791
// begin InitHc ;
33431: CALL_OW 19
// if not f then
33435: LD_VAR 0 12
33439: NOT
33440: IFFALSE 33529
// begin PrepareHuman ( false , i , skill ) ;
33442: LD_INT 0
33444: PPUSH
33445: LD_VAR 0 8
33449: PPUSH
33450: LD_VAR 0 4
33454: PPUSH
33455: CALL_OW 380
// un := CreateHuman ;
33459: LD_ADDR_VAR 0 14
33463: PUSH
33464: CALL_OW 44
33468: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33469: LD_ADDR_VAR 0 7
33473: PUSH
33474: LD_VAR 0 7
33478: PPUSH
33479: LD_INT 1
33481: PPUSH
33482: LD_VAR 0 14
33486: PPUSH
33487: CALL_OW 2
33491: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33492: LD_VAR 0 14
33496: PPUSH
33497: LD_VAR 0 1
33501: PPUSH
33502: CALL_OW 250
33506: PPUSH
33507: LD_VAR 0 1
33511: PPUSH
33512: CALL_OW 251
33516: PPUSH
33517: LD_INT 10
33519: PPUSH
33520: LD_INT 0
33522: PPUSH
33523: CALL_OW 50
// continue ;
33527: GO 33428
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33529: LD_VAR 0 12
33533: PUSH
33534: LD_INT 1
33536: ARRAY
33537: PPUSH
33538: CALL_OW 313
33542: PUSH
33543: LD_VAR 0 12
33547: PUSH
33548: LD_INT 1
33550: ARRAY
33551: PPUSH
33552: CALL_OW 266
33556: PUSH
33557: LD_INT 32
33559: PUSH
33560: LD_INT 31
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: IN
33567: AND
33568: PUSH
33569: LD_VAR 0 12
33573: PUSH
33574: LD_INT 1
33576: ARRAY
33577: PPUSH
33578: CALL_OW 313
33582: PUSH
33583: LD_INT 6
33585: EQUAL
33586: OR
33587: IFFALSE 33607
// f := Delete ( f , 1 ) ;
33589: LD_ADDR_VAR 0 12
33593: PUSH
33594: LD_VAR 0 12
33598: PPUSH
33599: LD_INT 1
33601: PPUSH
33602: CALL_OW 3
33606: ST_TO_ADDR
// if not f then
33607: LD_VAR 0 12
33611: NOT
33612: IFFALSE 33630
// begin x := x + 2 ;
33614: LD_ADDR_VAR 0 13
33618: PUSH
33619: LD_VAR 0 13
33623: PUSH
33624: LD_INT 2
33626: PLUS
33627: ST_TO_ADDR
// continue ;
33628: GO 33428
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33630: LD_VAR 0 12
33634: PUSH
33635: LD_INT 1
33637: ARRAY
33638: PPUSH
33639: CALL_OW 266
33643: PUSH
33644: LD_INT 5
33646: EQUAL
33647: IFFALSE 33721
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33649: LD_VAR 0 12
33653: PUSH
33654: LD_INT 1
33656: ARRAY
33657: PPUSH
33658: CALL_OW 313
33662: PUSH
33663: LD_INT 3
33665: LESS
33666: IFFALSE 33702
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33668: LD_INT 0
33670: PPUSH
33671: LD_INT 5
33673: PUSH
33674: LD_INT 8
33676: PUSH
33677: LD_INT 9
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: LIST
33684: PUSH
33685: LD_VAR 0 17
33689: ARRAY
33690: PPUSH
33691: LD_VAR 0 4
33695: PPUSH
33696: CALL_OW 380
33700: GO 33719
// PrepareHuman ( false , i , skill ) ;
33702: LD_INT 0
33704: PPUSH
33705: LD_VAR 0 8
33709: PPUSH
33710: LD_VAR 0 4
33714: PPUSH
33715: CALL_OW 380
// end else
33719: GO 33738
// PrepareHuman ( false , i , skill ) ;
33721: LD_INT 0
33723: PPUSH
33724: LD_VAR 0 8
33728: PPUSH
33729: LD_VAR 0 4
33733: PPUSH
33734: CALL_OW 380
// un := CreateHuman ;
33738: LD_ADDR_VAR 0 14
33742: PUSH
33743: CALL_OW 44
33747: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33748: LD_ADDR_VAR 0 7
33752: PUSH
33753: LD_VAR 0 7
33757: PPUSH
33758: LD_INT 1
33760: PPUSH
33761: LD_VAR 0 14
33765: PPUSH
33766: CALL_OW 2
33770: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33771: LD_VAR 0 14
33775: PPUSH
33776: LD_VAR 0 12
33780: PUSH
33781: LD_INT 1
33783: ARRAY
33784: PPUSH
33785: CALL_OW 52
// end ;
33789: GO 33428
33791: POP
33792: POP
// end ;
33793: GO 32730
33795: POP
33796: POP
// result := result ^ buildings ;
33797: LD_ADDR_VAR 0 7
33801: PUSH
33802: LD_VAR 0 7
33806: PUSH
33807: LD_VAR 0 18
33811: ADD
33812: ST_TO_ADDR
// end else
33813: GO 33956
// begin for i = 1 to personel do
33815: LD_ADDR_VAR 0 8
33819: PUSH
33820: DOUBLE
33821: LD_INT 1
33823: DEC
33824: ST_TO_ADDR
33825: LD_VAR 0 6
33829: PUSH
33830: FOR_TO
33831: IFFALSE 33954
// begin if i > 4 then
33833: LD_VAR 0 8
33837: PUSH
33838: LD_INT 4
33840: GREATER
33841: IFFALSE 33845
// break ;
33843: GO 33954
// x := personel [ i ] ;
33845: LD_ADDR_VAR 0 13
33849: PUSH
33850: LD_VAR 0 6
33854: PUSH
33855: LD_VAR 0 8
33859: ARRAY
33860: ST_TO_ADDR
// if x = - 1 then
33861: LD_VAR 0 13
33865: PUSH
33866: LD_INT 1
33868: NEG
33869: EQUAL
33870: IFFALSE 33874
// continue ;
33872: GO 33830
// PrepareHuman ( false , i , skill ) ;
33874: LD_INT 0
33876: PPUSH
33877: LD_VAR 0 8
33881: PPUSH
33882: LD_VAR 0 4
33886: PPUSH
33887: CALL_OW 380
// un := CreateHuman ;
33891: LD_ADDR_VAR 0 14
33895: PUSH
33896: CALL_OW 44
33900: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33901: LD_VAR 0 14
33905: PPUSH
33906: LD_VAR 0 1
33910: PPUSH
33911: CALL_OW 250
33915: PPUSH
33916: LD_VAR 0 1
33920: PPUSH
33921: CALL_OW 251
33925: PPUSH
33926: LD_INT 10
33928: PPUSH
33929: LD_INT 0
33931: PPUSH
33932: CALL_OW 50
// result := result ^ un ;
33936: LD_ADDR_VAR 0 7
33940: PUSH
33941: LD_VAR 0 7
33945: PUSH
33946: LD_VAR 0 14
33950: ADD
33951: ST_TO_ADDR
// end ;
33952: GO 33830
33954: POP
33955: POP
// end ; end ;
33956: LD_VAR 0 7
33960: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33961: LD_INT 0
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
33970: PPUSH
33971: PPUSH
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
33977: PPUSH
33978: PPUSH
// result := false ;
33979: LD_ADDR_VAR 0 3
33983: PUSH
33984: LD_INT 0
33986: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33987: LD_VAR 0 1
33991: NOT
33992: PUSH
33993: LD_VAR 0 1
33997: PPUSH
33998: CALL_OW 266
34002: PUSH
34003: LD_INT 32
34005: PUSH
34006: LD_INT 33
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: IN
34013: NOT
34014: OR
34015: IFFALSE 34019
// exit ;
34017: GO 35158
// nat := GetNation ( tower ) ;
34019: LD_ADDR_VAR 0 12
34023: PUSH
34024: LD_VAR 0 1
34028: PPUSH
34029: CALL_OW 248
34033: ST_TO_ADDR
// side := GetSide ( tower ) ;
34034: LD_ADDR_VAR 0 16
34038: PUSH
34039: LD_VAR 0 1
34043: PPUSH
34044: CALL_OW 255
34048: ST_TO_ADDR
// x := GetX ( tower ) ;
34049: LD_ADDR_VAR 0 10
34053: PUSH
34054: LD_VAR 0 1
34058: PPUSH
34059: CALL_OW 250
34063: ST_TO_ADDR
// y := GetY ( tower ) ;
34064: LD_ADDR_VAR 0 11
34068: PUSH
34069: LD_VAR 0 1
34073: PPUSH
34074: CALL_OW 251
34078: ST_TO_ADDR
// if not x or not y then
34079: LD_VAR 0 10
34083: NOT
34084: PUSH
34085: LD_VAR 0 11
34089: NOT
34090: OR
34091: IFFALSE 34095
// exit ;
34093: GO 35158
// weapon := 0 ;
34095: LD_ADDR_VAR 0 18
34099: PUSH
34100: LD_INT 0
34102: ST_TO_ADDR
// fac_list := [ ] ;
34103: LD_ADDR_VAR 0 17
34107: PUSH
34108: EMPTY
34109: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34110: LD_ADDR_VAR 0 6
34114: PUSH
34115: LD_VAR 0 1
34119: PPUSH
34120: CALL_OW 274
34124: PPUSH
34125: LD_VAR 0 2
34129: PPUSH
34130: LD_INT 0
34132: PPUSH
34133: CALL 31698 0 3
34137: PPUSH
34138: LD_INT 30
34140: PUSH
34141: LD_INT 3
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PPUSH
34148: CALL_OW 72
34152: ST_TO_ADDR
// if not factories then
34153: LD_VAR 0 6
34157: NOT
34158: IFFALSE 34162
// exit ;
34160: GO 35158
// for i in factories do
34162: LD_ADDR_VAR 0 8
34166: PUSH
34167: LD_VAR 0 6
34171: PUSH
34172: FOR_IN
34173: IFFALSE 34198
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34175: LD_ADDR_VAR 0 17
34179: PUSH
34180: LD_VAR 0 17
34184: PUSH
34185: LD_VAR 0 8
34189: PPUSH
34190: CALL_OW 478
34194: UNION
34195: ST_TO_ADDR
34196: GO 34172
34198: POP
34199: POP
// if not fac_list then
34200: LD_VAR 0 17
34204: NOT
34205: IFFALSE 34209
// exit ;
34207: GO 35158
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34209: LD_ADDR_VAR 0 5
34213: PUSH
34214: LD_INT 4
34216: PUSH
34217: LD_INT 5
34219: PUSH
34220: LD_INT 9
34222: PUSH
34223: LD_INT 10
34225: PUSH
34226: LD_INT 6
34228: PUSH
34229: LD_INT 7
34231: PUSH
34232: LD_INT 11
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 27
34246: PUSH
34247: LD_INT 28
34249: PUSH
34250: LD_INT 26
34252: PUSH
34253: LD_INT 30
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 43
34264: PUSH
34265: LD_INT 44
34267: PUSH
34268: LD_INT 46
34270: PUSH
34271: LD_INT 45
34273: PUSH
34274: LD_INT 47
34276: PUSH
34277: LD_INT 49
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: LIST
34292: PUSH
34293: LD_VAR 0 12
34297: ARRAY
34298: ST_TO_ADDR
// for i in list do
34299: LD_ADDR_VAR 0 8
34303: PUSH
34304: LD_VAR 0 5
34308: PUSH
34309: FOR_IN
34310: IFFALSE 34343
// if not i in fac_list then
34312: LD_VAR 0 8
34316: PUSH
34317: LD_VAR 0 17
34321: IN
34322: NOT
34323: IFFALSE 34341
// list := list diff i ;
34325: LD_ADDR_VAR 0 5
34329: PUSH
34330: LD_VAR 0 5
34334: PUSH
34335: LD_VAR 0 8
34339: DIFF
34340: ST_TO_ADDR
34341: GO 34309
34343: POP
34344: POP
// if not list then
34345: LD_VAR 0 5
34349: NOT
34350: IFFALSE 34354
// exit ;
34352: GO 35158
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34354: LD_VAR 0 12
34358: PUSH
34359: LD_INT 3
34361: EQUAL
34362: PUSH
34363: LD_INT 49
34365: PUSH
34366: LD_VAR 0 5
34370: IN
34371: AND
34372: PUSH
34373: LD_INT 31
34375: PPUSH
34376: LD_VAR 0 16
34380: PPUSH
34381: CALL_OW 321
34385: PUSH
34386: LD_INT 2
34388: EQUAL
34389: AND
34390: IFFALSE 34450
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34392: LD_INT 22
34394: PUSH
34395: LD_VAR 0 16
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 35
34406: PUSH
34407: LD_INT 49
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 91
34416: PUSH
34417: LD_VAR 0 1
34421: PUSH
34422: LD_INT 10
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: LIST
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: LIST
34434: PPUSH
34435: CALL_OW 69
34439: NOT
34440: IFFALSE 34450
// weapon := ru_time_lapser ;
34442: LD_ADDR_VAR 0 18
34446: PUSH
34447: LD_INT 49
34449: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34450: LD_VAR 0 12
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: LD_INT 2
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: IN
34465: PUSH
34466: LD_INT 11
34468: PUSH
34469: LD_VAR 0 5
34473: IN
34474: PUSH
34475: LD_INT 30
34477: PUSH
34478: LD_VAR 0 5
34482: IN
34483: OR
34484: AND
34485: PUSH
34486: LD_INT 6
34488: PPUSH
34489: LD_VAR 0 16
34493: PPUSH
34494: CALL_OW 321
34498: PUSH
34499: LD_INT 2
34501: EQUAL
34502: AND
34503: IFFALSE 34668
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34505: LD_INT 22
34507: PUSH
34508: LD_VAR 0 16
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 2
34519: PUSH
34520: LD_INT 35
34522: PUSH
34523: LD_INT 11
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 35
34532: PUSH
34533: LD_INT 30
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 91
34547: PUSH
34548: LD_VAR 0 1
34552: PUSH
34553: LD_INT 18
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: LIST
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: PPUSH
34566: CALL_OW 69
34570: NOT
34571: PUSH
34572: LD_INT 22
34574: PUSH
34575: LD_VAR 0 16
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: LD_INT 30
34589: PUSH
34590: LD_INT 32
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 30
34599: PUSH
34600: LD_INT 33
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 91
34614: PUSH
34615: LD_VAR 0 1
34619: PUSH
34620: LD_INT 12
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: LIST
34632: PUSH
34633: EMPTY
34634: LIST
34635: PPUSH
34636: CALL_OW 69
34640: PUSH
34641: LD_INT 2
34643: GREATER
34644: AND
34645: IFFALSE 34668
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34647: LD_ADDR_VAR 0 18
34651: PUSH
34652: LD_INT 11
34654: PUSH
34655: LD_INT 30
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_VAR 0 12
34666: ARRAY
34667: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34668: LD_VAR 0 18
34672: NOT
34673: PUSH
34674: LD_INT 40
34676: PPUSH
34677: LD_VAR 0 16
34681: PPUSH
34682: CALL_OW 321
34686: PUSH
34687: LD_INT 2
34689: EQUAL
34690: AND
34691: PUSH
34692: LD_INT 7
34694: PUSH
34695: LD_VAR 0 5
34699: IN
34700: PUSH
34701: LD_INT 28
34703: PUSH
34704: LD_VAR 0 5
34708: IN
34709: OR
34710: PUSH
34711: LD_INT 45
34713: PUSH
34714: LD_VAR 0 5
34718: IN
34719: OR
34720: AND
34721: IFFALSE 34975
// begin hex := GetHexInfo ( x , y ) ;
34723: LD_ADDR_VAR 0 4
34727: PUSH
34728: LD_VAR 0 10
34732: PPUSH
34733: LD_VAR 0 11
34737: PPUSH
34738: CALL_OW 546
34742: ST_TO_ADDR
// if hex [ 1 ] then
34743: LD_VAR 0 4
34747: PUSH
34748: LD_INT 1
34750: ARRAY
34751: IFFALSE 34755
// exit ;
34753: GO 35158
// height := hex [ 2 ] ;
34755: LD_ADDR_VAR 0 15
34759: PUSH
34760: LD_VAR 0 4
34764: PUSH
34765: LD_INT 2
34767: ARRAY
34768: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34769: LD_ADDR_VAR 0 14
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: LD_INT 2
34779: PUSH
34780: LD_INT 3
34782: PUSH
34783: LD_INT 5
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: ST_TO_ADDR
// for i in tmp do
34792: LD_ADDR_VAR 0 8
34796: PUSH
34797: LD_VAR 0 14
34801: PUSH
34802: FOR_IN
34803: IFFALSE 34973
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34805: LD_ADDR_VAR 0 9
34809: PUSH
34810: LD_VAR 0 10
34814: PPUSH
34815: LD_VAR 0 8
34819: PPUSH
34820: LD_INT 5
34822: PPUSH
34823: CALL_OW 272
34827: PUSH
34828: LD_VAR 0 11
34832: PPUSH
34833: LD_VAR 0 8
34837: PPUSH
34838: LD_INT 5
34840: PPUSH
34841: CALL_OW 273
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34850: LD_VAR 0 9
34854: PUSH
34855: LD_INT 1
34857: ARRAY
34858: PPUSH
34859: LD_VAR 0 9
34863: PUSH
34864: LD_INT 2
34866: ARRAY
34867: PPUSH
34868: CALL_OW 488
34872: IFFALSE 34971
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34874: LD_ADDR_VAR 0 4
34878: PUSH
34879: LD_VAR 0 9
34883: PUSH
34884: LD_INT 1
34886: ARRAY
34887: PPUSH
34888: LD_VAR 0 9
34892: PUSH
34893: LD_INT 2
34895: ARRAY
34896: PPUSH
34897: CALL_OW 546
34901: ST_TO_ADDR
// if hex [ 1 ] then
34902: LD_VAR 0 4
34906: PUSH
34907: LD_INT 1
34909: ARRAY
34910: IFFALSE 34914
// continue ;
34912: GO 34802
// h := hex [ 2 ] ;
34914: LD_ADDR_VAR 0 13
34918: PUSH
34919: LD_VAR 0 4
34923: PUSH
34924: LD_INT 2
34926: ARRAY
34927: ST_TO_ADDR
// if h + 7 < height then
34928: LD_VAR 0 13
34932: PUSH
34933: LD_INT 7
34935: PLUS
34936: PUSH
34937: LD_VAR 0 15
34941: LESS
34942: IFFALSE 34971
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34944: LD_ADDR_VAR 0 18
34948: PUSH
34949: LD_INT 7
34951: PUSH
34952: LD_INT 28
34954: PUSH
34955: LD_INT 45
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: LIST
34962: PUSH
34963: LD_VAR 0 12
34967: ARRAY
34968: ST_TO_ADDR
// break ;
34969: GO 34973
// end ; end ; end ;
34971: GO 34802
34973: POP
34974: POP
// end ; if not weapon then
34975: LD_VAR 0 18
34979: NOT
34980: IFFALSE 35040
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34982: LD_ADDR_VAR 0 5
34986: PUSH
34987: LD_VAR 0 5
34991: PUSH
34992: LD_INT 11
34994: PUSH
34995: LD_INT 30
34997: PUSH
34998: LD_INT 49
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: LIST
35005: DIFF
35006: ST_TO_ADDR
// if not list then
35007: LD_VAR 0 5
35011: NOT
35012: IFFALSE 35016
// exit ;
35014: GO 35158
// weapon := list [ rand ( 1 , list ) ] ;
35016: LD_ADDR_VAR 0 18
35020: PUSH
35021: LD_VAR 0 5
35025: PUSH
35026: LD_INT 1
35028: PPUSH
35029: LD_VAR 0 5
35033: PPUSH
35034: CALL_OW 12
35038: ARRAY
35039: ST_TO_ADDR
// end ; if weapon then
35040: LD_VAR 0 18
35044: IFFALSE 35158
// begin tmp := CostOfWeapon ( weapon ) ;
35046: LD_ADDR_VAR 0 14
35050: PUSH
35051: LD_VAR 0 18
35055: PPUSH
35056: CALL_OW 451
35060: ST_TO_ADDR
// j := GetBase ( tower ) ;
35061: LD_ADDR_VAR 0 9
35065: PUSH
35066: LD_VAR 0 1
35070: PPUSH
35071: CALL_OW 274
35075: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35076: LD_VAR 0 9
35080: PPUSH
35081: LD_INT 1
35083: PPUSH
35084: CALL_OW 275
35088: PUSH
35089: LD_VAR 0 14
35093: PUSH
35094: LD_INT 1
35096: ARRAY
35097: GREATEREQUAL
35098: PUSH
35099: LD_VAR 0 9
35103: PPUSH
35104: LD_INT 2
35106: PPUSH
35107: CALL_OW 275
35111: PUSH
35112: LD_VAR 0 14
35116: PUSH
35117: LD_INT 2
35119: ARRAY
35120: GREATEREQUAL
35121: AND
35122: PUSH
35123: LD_VAR 0 9
35127: PPUSH
35128: LD_INT 3
35130: PPUSH
35131: CALL_OW 275
35135: PUSH
35136: LD_VAR 0 14
35140: PUSH
35141: LD_INT 3
35143: ARRAY
35144: GREATEREQUAL
35145: AND
35146: IFFALSE 35158
// result := weapon ;
35148: LD_ADDR_VAR 0 3
35152: PUSH
35153: LD_VAR 0 18
35157: ST_TO_ADDR
// end ; end ;
35158: LD_VAR 0 3
35162: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35163: LD_INT 0
35165: PPUSH
35166: PPUSH
// result := true ;
35167: LD_ADDR_VAR 0 3
35171: PUSH
35172: LD_INT 1
35174: ST_TO_ADDR
// if array1 = array2 then
35175: LD_VAR 0 1
35179: PUSH
35180: LD_VAR 0 2
35184: EQUAL
35185: IFFALSE 35245
// begin for i = 1 to array1 do
35187: LD_ADDR_VAR 0 4
35191: PUSH
35192: DOUBLE
35193: LD_INT 1
35195: DEC
35196: ST_TO_ADDR
35197: LD_VAR 0 1
35201: PUSH
35202: FOR_TO
35203: IFFALSE 35241
// if array1 [ i ] <> array2 [ i ] then
35205: LD_VAR 0 1
35209: PUSH
35210: LD_VAR 0 4
35214: ARRAY
35215: PUSH
35216: LD_VAR 0 2
35220: PUSH
35221: LD_VAR 0 4
35225: ARRAY
35226: NONEQUAL
35227: IFFALSE 35239
// begin result := false ;
35229: LD_ADDR_VAR 0 3
35233: PUSH
35234: LD_INT 0
35236: ST_TO_ADDR
// break ;
35237: GO 35241
// end ;
35239: GO 35202
35241: POP
35242: POP
// end else
35243: GO 35253
// result := false ;
35245: LD_ADDR_VAR 0 3
35249: PUSH
35250: LD_INT 0
35252: ST_TO_ADDR
// end ;
35253: LD_VAR 0 3
35257: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35258: LD_INT 0
35260: PPUSH
35261: PPUSH
// if not array1 or not array2 then
35262: LD_VAR 0 1
35266: NOT
35267: PUSH
35268: LD_VAR 0 2
35272: NOT
35273: OR
35274: IFFALSE 35278
// exit ;
35276: GO 35342
// result := true ;
35278: LD_ADDR_VAR 0 3
35282: PUSH
35283: LD_INT 1
35285: ST_TO_ADDR
// for i = 1 to array1 do
35286: LD_ADDR_VAR 0 4
35290: PUSH
35291: DOUBLE
35292: LD_INT 1
35294: DEC
35295: ST_TO_ADDR
35296: LD_VAR 0 1
35300: PUSH
35301: FOR_TO
35302: IFFALSE 35340
// if array1 [ i ] <> array2 [ i ] then
35304: LD_VAR 0 1
35308: PUSH
35309: LD_VAR 0 4
35313: ARRAY
35314: PUSH
35315: LD_VAR 0 2
35319: PUSH
35320: LD_VAR 0 4
35324: ARRAY
35325: NONEQUAL
35326: IFFALSE 35338
// begin result := false ;
35328: LD_ADDR_VAR 0 3
35332: PUSH
35333: LD_INT 0
35335: ST_TO_ADDR
// break ;
35336: GO 35340
// end ;
35338: GO 35301
35340: POP
35341: POP
// end ;
35342: LD_VAR 0 3
35346: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35347: LD_INT 0
35349: PPUSH
35350: PPUSH
35351: PPUSH
// pom := GetBase ( fac ) ;
35352: LD_ADDR_VAR 0 5
35356: PUSH
35357: LD_VAR 0 1
35361: PPUSH
35362: CALL_OW 274
35366: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35367: LD_ADDR_VAR 0 4
35371: PUSH
35372: LD_VAR 0 2
35376: PUSH
35377: LD_INT 1
35379: ARRAY
35380: PPUSH
35381: LD_VAR 0 2
35385: PUSH
35386: LD_INT 2
35388: ARRAY
35389: PPUSH
35390: LD_VAR 0 2
35394: PUSH
35395: LD_INT 3
35397: ARRAY
35398: PPUSH
35399: LD_VAR 0 2
35403: PUSH
35404: LD_INT 4
35406: ARRAY
35407: PPUSH
35408: CALL_OW 449
35412: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35413: LD_ADDR_VAR 0 3
35417: PUSH
35418: LD_VAR 0 5
35422: PPUSH
35423: LD_INT 1
35425: PPUSH
35426: CALL_OW 275
35430: PUSH
35431: LD_VAR 0 4
35435: PUSH
35436: LD_INT 1
35438: ARRAY
35439: GREATEREQUAL
35440: PUSH
35441: LD_VAR 0 5
35445: PPUSH
35446: LD_INT 2
35448: PPUSH
35449: CALL_OW 275
35453: PUSH
35454: LD_VAR 0 4
35458: PUSH
35459: LD_INT 2
35461: ARRAY
35462: GREATEREQUAL
35463: AND
35464: PUSH
35465: LD_VAR 0 5
35469: PPUSH
35470: LD_INT 3
35472: PPUSH
35473: CALL_OW 275
35477: PUSH
35478: LD_VAR 0 4
35482: PUSH
35483: LD_INT 3
35485: ARRAY
35486: GREATEREQUAL
35487: AND
35488: ST_TO_ADDR
// end ;
35489: LD_VAR 0 3
35493: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35494: LD_INT 0
35496: PPUSH
35497: PPUSH
35498: PPUSH
35499: PPUSH
// pom := GetBase ( building ) ;
35500: LD_ADDR_VAR 0 3
35504: PUSH
35505: LD_VAR 0 1
35509: PPUSH
35510: CALL_OW 274
35514: ST_TO_ADDR
// if not pom then
35515: LD_VAR 0 3
35519: NOT
35520: IFFALSE 35524
// exit ;
35522: GO 35694
// btype := GetBType ( building ) ;
35524: LD_ADDR_VAR 0 5
35528: PUSH
35529: LD_VAR 0 1
35533: PPUSH
35534: CALL_OW 266
35538: ST_TO_ADDR
// if btype = b_armoury then
35539: LD_VAR 0 5
35543: PUSH
35544: LD_INT 4
35546: EQUAL
35547: IFFALSE 35557
// btype := b_barracks ;
35549: LD_ADDR_VAR 0 5
35553: PUSH
35554: LD_INT 5
35556: ST_TO_ADDR
// if btype = b_depot then
35557: LD_VAR 0 5
35561: PUSH
35562: LD_INT 0
35564: EQUAL
35565: IFFALSE 35575
// btype := b_warehouse ;
35567: LD_ADDR_VAR 0 5
35571: PUSH
35572: LD_INT 1
35574: ST_TO_ADDR
// if btype = b_workshop then
35575: LD_VAR 0 5
35579: PUSH
35580: LD_INT 2
35582: EQUAL
35583: IFFALSE 35593
// btype := b_factory ;
35585: LD_ADDR_VAR 0 5
35589: PUSH
35590: LD_INT 3
35592: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35593: LD_ADDR_VAR 0 4
35597: PUSH
35598: LD_VAR 0 5
35602: PPUSH
35603: LD_VAR 0 1
35607: PPUSH
35608: CALL_OW 248
35612: PPUSH
35613: CALL_OW 450
35617: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35618: LD_ADDR_VAR 0 2
35622: PUSH
35623: LD_VAR 0 3
35627: PPUSH
35628: LD_INT 1
35630: PPUSH
35631: CALL_OW 275
35635: PUSH
35636: LD_VAR 0 4
35640: PUSH
35641: LD_INT 1
35643: ARRAY
35644: GREATEREQUAL
35645: PUSH
35646: LD_VAR 0 3
35650: PPUSH
35651: LD_INT 2
35653: PPUSH
35654: CALL_OW 275
35658: PUSH
35659: LD_VAR 0 4
35663: PUSH
35664: LD_INT 2
35666: ARRAY
35667: GREATEREQUAL
35668: AND
35669: PUSH
35670: LD_VAR 0 3
35674: PPUSH
35675: LD_INT 3
35677: PPUSH
35678: CALL_OW 275
35682: PUSH
35683: LD_VAR 0 4
35687: PUSH
35688: LD_INT 3
35690: ARRAY
35691: GREATEREQUAL
35692: AND
35693: ST_TO_ADDR
// end ;
35694: LD_VAR 0 2
35698: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35699: LD_INT 0
35701: PPUSH
35702: PPUSH
35703: PPUSH
// pom := GetBase ( building ) ;
35704: LD_ADDR_VAR 0 4
35708: PUSH
35709: LD_VAR 0 1
35713: PPUSH
35714: CALL_OW 274
35718: ST_TO_ADDR
// if not pom then
35719: LD_VAR 0 4
35723: NOT
35724: IFFALSE 35728
// exit ;
35726: GO 35829
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35728: LD_ADDR_VAR 0 5
35732: PUSH
35733: LD_VAR 0 2
35737: PPUSH
35738: LD_VAR 0 1
35742: PPUSH
35743: CALL_OW 248
35747: PPUSH
35748: CALL_OW 450
35752: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35753: LD_ADDR_VAR 0 3
35757: PUSH
35758: LD_VAR 0 4
35762: PPUSH
35763: LD_INT 1
35765: PPUSH
35766: CALL_OW 275
35770: PUSH
35771: LD_VAR 0 5
35775: PUSH
35776: LD_INT 1
35778: ARRAY
35779: GREATEREQUAL
35780: PUSH
35781: LD_VAR 0 4
35785: PPUSH
35786: LD_INT 2
35788: PPUSH
35789: CALL_OW 275
35793: PUSH
35794: LD_VAR 0 5
35798: PUSH
35799: LD_INT 2
35801: ARRAY
35802: GREATEREQUAL
35803: AND
35804: PUSH
35805: LD_VAR 0 4
35809: PPUSH
35810: LD_INT 3
35812: PPUSH
35813: CALL_OW 275
35817: PUSH
35818: LD_VAR 0 5
35822: PUSH
35823: LD_INT 3
35825: ARRAY
35826: GREATEREQUAL
35827: AND
35828: ST_TO_ADDR
// end ;
35829: LD_VAR 0 3
35833: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35834: LD_INT 0
35836: PPUSH
35837: PPUSH
35838: PPUSH
35839: PPUSH
35840: PPUSH
35841: PPUSH
35842: PPUSH
35843: PPUSH
35844: PPUSH
35845: PPUSH
35846: PPUSH
// result := false ;
35847: LD_ADDR_VAR 0 8
35851: PUSH
35852: LD_INT 0
35854: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35855: LD_VAR 0 5
35859: NOT
35860: PUSH
35861: LD_VAR 0 1
35865: NOT
35866: OR
35867: PUSH
35868: LD_VAR 0 2
35872: NOT
35873: OR
35874: PUSH
35875: LD_VAR 0 3
35879: NOT
35880: OR
35881: IFFALSE 35885
// exit ;
35883: GO 36699
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35885: LD_ADDR_VAR 0 14
35889: PUSH
35890: LD_VAR 0 1
35894: PPUSH
35895: LD_VAR 0 2
35899: PPUSH
35900: LD_VAR 0 3
35904: PPUSH
35905: LD_VAR 0 4
35909: PPUSH
35910: LD_VAR 0 5
35914: PUSH
35915: LD_INT 1
35917: ARRAY
35918: PPUSH
35919: CALL_OW 248
35923: PPUSH
35924: LD_INT 0
35926: PPUSH
35927: CALL 37536 0 6
35931: ST_TO_ADDR
// if not hexes then
35932: LD_VAR 0 14
35936: NOT
35937: IFFALSE 35941
// exit ;
35939: GO 36699
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35941: LD_ADDR_VAR 0 17
35945: PUSH
35946: LD_VAR 0 5
35950: PPUSH
35951: LD_INT 22
35953: PUSH
35954: LD_VAR 0 13
35958: PPUSH
35959: CALL_OW 255
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 2
35970: PUSH
35971: LD_INT 30
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 30
35983: PUSH
35984: LD_INT 1
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: LIST
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PPUSH
36000: CALL_OW 72
36004: ST_TO_ADDR
// for i = 1 to hexes do
36005: LD_ADDR_VAR 0 9
36009: PUSH
36010: DOUBLE
36011: LD_INT 1
36013: DEC
36014: ST_TO_ADDR
36015: LD_VAR 0 14
36019: PUSH
36020: FOR_TO
36021: IFFALSE 36697
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36023: LD_ADDR_VAR 0 13
36027: PUSH
36028: LD_VAR 0 14
36032: PUSH
36033: LD_VAR 0 9
36037: ARRAY
36038: PUSH
36039: LD_INT 1
36041: ARRAY
36042: PPUSH
36043: LD_VAR 0 14
36047: PUSH
36048: LD_VAR 0 9
36052: ARRAY
36053: PUSH
36054: LD_INT 2
36056: ARRAY
36057: PPUSH
36058: CALL_OW 428
36062: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36063: LD_VAR 0 14
36067: PUSH
36068: LD_VAR 0 9
36072: ARRAY
36073: PUSH
36074: LD_INT 1
36076: ARRAY
36077: PPUSH
36078: LD_VAR 0 14
36082: PUSH
36083: LD_VAR 0 9
36087: ARRAY
36088: PUSH
36089: LD_INT 2
36091: ARRAY
36092: PPUSH
36093: CALL_OW 351
36097: PUSH
36098: LD_VAR 0 14
36102: PUSH
36103: LD_VAR 0 9
36107: ARRAY
36108: PUSH
36109: LD_INT 1
36111: ARRAY
36112: PPUSH
36113: LD_VAR 0 14
36117: PUSH
36118: LD_VAR 0 9
36122: ARRAY
36123: PUSH
36124: LD_INT 2
36126: ARRAY
36127: PPUSH
36128: CALL_OW 488
36132: NOT
36133: OR
36134: PUSH
36135: LD_VAR 0 13
36139: PPUSH
36140: CALL_OW 247
36144: PUSH
36145: LD_INT 3
36147: EQUAL
36148: OR
36149: IFFALSE 36155
// exit ;
36151: POP
36152: POP
36153: GO 36699
// if not tmp then
36155: LD_VAR 0 13
36159: NOT
36160: IFFALSE 36164
// continue ;
36162: GO 36020
// result := true ;
36164: LD_ADDR_VAR 0 8
36168: PUSH
36169: LD_INT 1
36171: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36172: LD_VAR 0 6
36176: PUSH
36177: LD_VAR 0 13
36181: PPUSH
36182: CALL_OW 247
36186: PUSH
36187: LD_INT 2
36189: EQUAL
36190: AND
36191: PUSH
36192: LD_VAR 0 13
36196: PPUSH
36197: CALL_OW 263
36201: PUSH
36202: LD_INT 1
36204: EQUAL
36205: AND
36206: IFFALSE 36370
// begin if IsDrivenBy ( tmp ) then
36208: LD_VAR 0 13
36212: PPUSH
36213: CALL_OW 311
36217: IFFALSE 36221
// continue ;
36219: GO 36020
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36221: LD_VAR 0 6
36225: PPUSH
36226: LD_INT 3
36228: PUSH
36229: LD_INT 60
36231: PUSH
36232: EMPTY
36233: LIST
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 3
36241: PUSH
36242: LD_INT 55
36244: PUSH
36245: EMPTY
36246: LIST
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PPUSH
36256: CALL_OW 72
36260: IFFALSE 36368
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36262: LD_ADDR_VAR 0 18
36266: PUSH
36267: LD_VAR 0 6
36271: PPUSH
36272: LD_INT 3
36274: PUSH
36275: LD_INT 60
36277: PUSH
36278: EMPTY
36279: LIST
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 3
36287: PUSH
36288: LD_INT 55
36290: PUSH
36291: EMPTY
36292: LIST
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PPUSH
36302: CALL_OW 72
36306: PUSH
36307: LD_INT 1
36309: ARRAY
36310: ST_TO_ADDR
// if IsInUnit ( driver ) then
36311: LD_VAR 0 18
36315: PPUSH
36316: CALL_OW 310
36320: IFFALSE 36331
// ComExit ( driver ) ;
36322: LD_VAR 0 18
36326: PPUSH
36327: CALL 60720 0 1
// AddComEnterUnit ( driver , tmp ) ;
36331: LD_VAR 0 18
36335: PPUSH
36336: LD_VAR 0 13
36340: PPUSH
36341: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36345: LD_VAR 0 18
36349: PPUSH
36350: LD_VAR 0 7
36354: PPUSH
36355: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36359: LD_VAR 0 18
36363: PPUSH
36364: CALL_OW 181
// end ; continue ;
36368: GO 36020
// end ; if not cleaners or not tmp in cleaners then
36370: LD_VAR 0 6
36374: NOT
36375: PUSH
36376: LD_VAR 0 13
36380: PUSH
36381: LD_VAR 0 6
36385: IN
36386: NOT
36387: OR
36388: IFFALSE 36695
// begin if dep then
36390: LD_VAR 0 17
36394: IFFALSE 36530
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36396: LD_ADDR_VAR 0 16
36400: PUSH
36401: LD_VAR 0 17
36405: PUSH
36406: LD_INT 1
36408: ARRAY
36409: PPUSH
36410: CALL_OW 250
36414: PPUSH
36415: LD_VAR 0 17
36419: PUSH
36420: LD_INT 1
36422: ARRAY
36423: PPUSH
36424: CALL_OW 254
36428: PPUSH
36429: LD_INT 5
36431: PPUSH
36432: CALL_OW 272
36436: PUSH
36437: LD_VAR 0 17
36441: PUSH
36442: LD_INT 1
36444: ARRAY
36445: PPUSH
36446: CALL_OW 251
36450: PPUSH
36451: LD_VAR 0 17
36455: PUSH
36456: LD_INT 1
36458: ARRAY
36459: PPUSH
36460: CALL_OW 254
36464: PPUSH
36465: LD_INT 5
36467: PPUSH
36468: CALL_OW 273
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36477: LD_VAR 0 16
36481: PUSH
36482: LD_INT 1
36484: ARRAY
36485: PPUSH
36486: LD_VAR 0 16
36490: PUSH
36491: LD_INT 2
36493: ARRAY
36494: PPUSH
36495: CALL_OW 488
36499: IFFALSE 36530
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36501: LD_VAR 0 13
36505: PPUSH
36506: LD_VAR 0 16
36510: PUSH
36511: LD_INT 1
36513: ARRAY
36514: PPUSH
36515: LD_VAR 0 16
36519: PUSH
36520: LD_INT 2
36522: ARRAY
36523: PPUSH
36524: CALL_OW 111
// continue ;
36528: GO 36020
// end ; end ; r := GetDir ( tmp ) ;
36530: LD_ADDR_VAR 0 15
36534: PUSH
36535: LD_VAR 0 13
36539: PPUSH
36540: CALL_OW 254
36544: ST_TO_ADDR
// if r = 5 then
36545: LD_VAR 0 15
36549: PUSH
36550: LD_INT 5
36552: EQUAL
36553: IFFALSE 36563
// r := 0 ;
36555: LD_ADDR_VAR 0 15
36559: PUSH
36560: LD_INT 0
36562: ST_TO_ADDR
// for j = r to 5 do
36563: LD_ADDR_VAR 0 10
36567: PUSH
36568: DOUBLE
36569: LD_VAR 0 15
36573: DEC
36574: ST_TO_ADDR
36575: LD_INT 5
36577: PUSH
36578: FOR_TO
36579: IFFALSE 36693
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36581: LD_ADDR_VAR 0 11
36585: PUSH
36586: LD_VAR 0 13
36590: PPUSH
36591: CALL_OW 250
36595: PPUSH
36596: LD_VAR 0 10
36600: PPUSH
36601: LD_INT 2
36603: PPUSH
36604: CALL_OW 272
36608: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36609: LD_ADDR_VAR 0 12
36613: PUSH
36614: LD_VAR 0 13
36618: PPUSH
36619: CALL_OW 251
36623: PPUSH
36624: LD_VAR 0 10
36628: PPUSH
36629: LD_INT 2
36631: PPUSH
36632: CALL_OW 273
36636: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36637: LD_VAR 0 11
36641: PPUSH
36642: LD_VAR 0 12
36646: PPUSH
36647: CALL_OW 488
36651: PUSH
36652: LD_VAR 0 11
36656: PPUSH
36657: LD_VAR 0 12
36661: PPUSH
36662: CALL_OW 428
36666: NOT
36667: AND
36668: IFFALSE 36691
// begin ComMoveXY ( tmp , _x , _y ) ;
36670: LD_VAR 0 13
36674: PPUSH
36675: LD_VAR 0 11
36679: PPUSH
36680: LD_VAR 0 12
36684: PPUSH
36685: CALL_OW 111
// break ;
36689: GO 36693
// end ; end ;
36691: GO 36578
36693: POP
36694: POP
// end ; end ;
36695: GO 36020
36697: POP
36698: POP
// end ;
36699: LD_VAR 0 8
36703: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
36704: LD_INT 0
36706: PPUSH
36707: PPUSH
36708: PPUSH
36709: PPUSH
36710: PPUSH
36711: PPUSH
36712: PPUSH
36713: PPUSH
36714: PPUSH
36715: PPUSH
// result := false ;
36716: LD_ADDR_VAR 0 6
36720: PUSH
36721: LD_INT 0
36723: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36724: LD_VAR 0 1
36728: NOT
36729: PUSH
36730: LD_VAR 0 1
36734: PPUSH
36735: CALL_OW 266
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: IN
36750: NOT
36751: OR
36752: PUSH
36753: LD_VAR 0 2
36757: NOT
36758: OR
36759: PUSH
36760: LD_VAR 0 5
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 1
36770: PUSH
36771: LD_INT 2
36773: PUSH
36774: LD_INT 3
36776: PUSH
36777: LD_INT 4
36779: PUSH
36780: LD_INT 5
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: IN
36791: NOT
36792: OR
36793: PUSH
36794: LD_VAR 0 3
36798: PPUSH
36799: LD_VAR 0 4
36803: PPUSH
36804: CALL_OW 488
36808: NOT
36809: OR
36810: IFFALSE 36814
// exit ;
36812: GO 37531
// pom := GetBase ( depot ) ;
36814: LD_ADDR_VAR 0 10
36818: PUSH
36819: LD_VAR 0 1
36823: PPUSH
36824: CALL_OW 274
36828: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36829: LD_ADDR_VAR 0 11
36833: PUSH
36834: LD_VAR 0 2
36838: PPUSH
36839: LD_VAR 0 1
36843: PPUSH
36844: CALL_OW 248
36848: PPUSH
36849: CALL_OW 450
36853: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36854: LD_VAR 0 10
36858: PPUSH
36859: LD_INT 1
36861: PPUSH
36862: CALL_OW 275
36866: PUSH
36867: LD_VAR 0 11
36871: PUSH
36872: LD_INT 1
36874: ARRAY
36875: GREATEREQUAL
36876: PUSH
36877: LD_VAR 0 10
36881: PPUSH
36882: LD_INT 2
36884: PPUSH
36885: CALL_OW 275
36889: PUSH
36890: LD_VAR 0 11
36894: PUSH
36895: LD_INT 2
36897: ARRAY
36898: GREATEREQUAL
36899: AND
36900: PUSH
36901: LD_VAR 0 10
36905: PPUSH
36906: LD_INT 3
36908: PPUSH
36909: CALL_OW 275
36913: PUSH
36914: LD_VAR 0 11
36918: PUSH
36919: LD_INT 3
36921: ARRAY
36922: GREATEREQUAL
36923: AND
36924: NOT
36925: IFFALSE 36929
// exit ;
36927: GO 37531
// if GetBType ( depot ) = b_depot then
36929: LD_VAR 0 1
36933: PPUSH
36934: CALL_OW 266
36938: PUSH
36939: LD_INT 0
36941: EQUAL
36942: IFFALSE 36954
// dist := 28 else
36944: LD_ADDR_VAR 0 14
36948: PUSH
36949: LD_INT 28
36951: ST_TO_ADDR
36952: GO 36962
// dist := 36 ;
36954: LD_ADDR_VAR 0 14
36958: PUSH
36959: LD_INT 36
36961: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36962: LD_VAR 0 1
36966: PPUSH
36967: LD_VAR 0 3
36971: PPUSH
36972: LD_VAR 0 4
36976: PPUSH
36977: CALL_OW 297
36981: PUSH
36982: LD_VAR 0 14
36986: GREATER
36987: IFFALSE 36991
// exit ;
36989: GO 37531
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36991: LD_ADDR_VAR 0 12
36995: PUSH
36996: LD_VAR 0 2
37000: PPUSH
37001: LD_VAR 0 3
37005: PPUSH
37006: LD_VAR 0 4
37010: PPUSH
37011: LD_VAR 0 5
37015: PPUSH
37016: LD_VAR 0 1
37020: PPUSH
37021: CALL_OW 248
37025: PPUSH
37026: LD_INT 0
37028: PPUSH
37029: CALL 37536 0 6
37033: ST_TO_ADDR
// if not hexes then
37034: LD_VAR 0 12
37038: NOT
37039: IFFALSE 37043
// exit ;
37041: GO 37531
// hex := GetHexInfo ( x , y ) ;
37043: LD_ADDR_VAR 0 15
37047: PUSH
37048: LD_VAR 0 3
37052: PPUSH
37053: LD_VAR 0 4
37057: PPUSH
37058: CALL_OW 546
37062: ST_TO_ADDR
// if hex [ 1 ] then
37063: LD_VAR 0 15
37067: PUSH
37068: LD_INT 1
37070: ARRAY
37071: IFFALSE 37075
// exit ;
37073: GO 37531
// height := hex [ 2 ] ;
37075: LD_ADDR_VAR 0 13
37079: PUSH
37080: LD_VAR 0 15
37084: PUSH
37085: LD_INT 2
37087: ARRAY
37088: ST_TO_ADDR
// for i = 1 to hexes do
37089: LD_ADDR_VAR 0 7
37093: PUSH
37094: DOUBLE
37095: LD_INT 1
37097: DEC
37098: ST_TO_ADDR
37099: LD_VAR 0 12
37103: PUSH
37104: FOR_TO
37105: IFFALSE 37435
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37107: LD_VAR 0 12
37111: PUSH
37112: LD_VAR 0 7
37116: ARRAY
37117: PUSH
37118: LD_INT 1
37120: ARRAY
37121: PPUSH
37122: LD_VAR 0 12
37126: PUSH
37127: LD_VAR 0 7
37131: ARRAY
37132: PUSH
37133: LD_INT 2
37135: ARRAY
37136: PPUSH
37137: CALL_OW 488
37141: NOT
37142: PUSH
37143: LD_VAR 0 12
37147: PUSH
37148: LD_VAR 0 7
37152: ARRAY
37153: PUSH
37154: LD_INT 1
37156: ARRAY
37157: PPUSH
37158: LD_VAR 0 12
37162: PUSH
37163: LD_VAR 0 7
37167: ARRAY
37168: PUSH
37169: LD_INT 2
37171: ARRAY
37172: PPUSH
37173: CALL_OW 428
37177: PUSH
37178: LD_INT 0
37180: GREATER
37181: OR
37182: PUSH
37183: LD_VAR 0 12
37187: PUSH
37188: LD_VAR 0 7
37192: ARRAY
37193: PUSH
37194: LD_INT 1
37196: ARRAY
37197: PPUSH
37198: LD_VAR 0 12
37202: PUSH
37203: LD_VAR 0 7
37207: ARRAY
37208: PUSH
37209: LD_INT 2
37211: ARRAY
37212: PPUSH
37213: CALL_OW 351
37217: OR
37218: IFFALSE 37224
// exit ;
37220: POP
37221: POP
37222: GO 37531
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37224: LD_ADDR_VAR 0 8
37228: PUSH
37229: LD_VAR 0 12
37233: PUSH
37234: LD_VAR 0 7
37238: ARRAY
37239: PUSH
37240: LD_INT 1
37242: ARRAY
37243: PPUSH
37244: LD_VAR 0 12
37248: PUSH
37249: LD_VAR 0 7
37253: ARRAY
37254: PUSH
37255: LD_INT 2
37257: ARRAY
37258: PPUSH
37259: CALL_OW 546
37263: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37264: LD_VAR 0 8
37268: PUSH
37269: LD_INT 1
37271: ARRAY
37272: PUSH
37273: LD_VAR 0 8
37277: PUSH
37278: LD_INT 2
37280: ARRAY
37281: PUSH
37282: LD_VAR 0 13
37286: PUSH
37287: LD_INT 2
37289: PLUS
37290: GREATER
37291: OR
37292: PUSH
37293: LD_VAR 0 8
37297: PUSH
37298: LD_INT 2
37300: ARRAY
37301: PUSH
37302: LD_VAR 0 13
37306: PUSH
37307: LD_INT 2
37309: MINUS
37310: LESS
37311: OR
37312: PUSH
37313: LD_VAR 0 8
37317: PUSH
37318: LD_INT 3
37320: ARRAY
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: LD_INT 8
37327: PUSH
37328: LD_INT 9
37330: PUSH
37331: LD_INT 10
37333: PUSH
37334: LD_INT 11
37336: PUSH
37337: LD_INT 12
37339: PUSH
37340: LD_INT 13
37342: PUSH
37343: LD_INT 16
37345: PUSH
37346: LD_INT 17
37348: PUSH
37349: LD_INT 18
37351: PUSH
37352: LD_INT 19
37354: PUSH
37355: LD_INT 20
37357: PUSH
37358: LD_INT 21
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: IN
37376: NOT
37377: OR
37378: PUSH
37379: LD_VAR 0 8
37383: PUSH
37384: LD_INT 5
37386: ARRAY
37387: NOT
37388: OR
37389: PUSH
37390: LD_VAR 0 8
37394: PUSH
37395: LD_INT 6
37397: ARRAY
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: LD_INT 2
37404: PUSH
37405: LD_INT 7
37407: PUSH
37408: LD_INT 9
37410: PUSH
37411: LD_INT 10
37413: PUSH
37414: LD_INT 11
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: IN
37425: NOT
37426: OR
37427: IFFALSE 37433
// exit ;
37429: POP
37430: POP
37431: GO 37531
// end ;
37433: GO 37104
37435: POP
37436: POP
// side := GetSide ( depot ) ;
37437: LD_ADDR_VAR 0 9
37441: PUSH
37442: LD_VAR 0 1
37446: PPUSH
37447: CALL_OW 255
37451: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37452: LD_VAR 0 9
37456: PPUSH
37457: LD_VAR 0 3
37461: PPUSH
37462: LD_VAR 0 4
37466: PPUSH
37467: LD_INT 20
37469: PPUSH
37470: CALL 29852 0 4
37474: PUSH
37475: LD_INT 4
37477: ARRAY
37478: IFFALSE 37482
// exit ;
37480: GO 37531
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37482: LD_VAR 0 2
37486: PUSH
37487: LD_INT 29
37489: PUSH
37490: LD_INT 30
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: IN
37497: PUSH
37498: LD_VAR 0 3
37502: PPUSH
37503: LD_VAR 0 4
37507: PPUSH
37508: LD_VAR 0 9
37512: PPUSH
37513: CALL_OW 440
37517: NOT
37518: AND
37519: IFFALSE 37523
// exit ;
37521: GO 37531
// result := true ;
37523: LD_ADDR_VAR 0 6
37527: PUSH
37528: LD_INT 1
37530: ST_TO_ADDR
// end ;
37531: LD_VAR 0 6
37535: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37536: LD_INT 0
37538: PPUSH
37539: PPUSH
37540: PPUSH
37541: PPUSH
37542: PPUSH
37543: PPUSH
37544: PPUSH
37545: PPUSH
37546: PPUSH
37547: PPUSH
37548: PPUSH
37549: PPUSH
37550: PPUSH
37551: PPUSH
37552: PPUSH
37553: PPUSH
37554: PPUSH
37555: PPUSH
37556: PPUSH
37557: PPUSH
37558: PPUSH
37559: PPUSH
37560: PPUSH
37561: PPUSH
37562: PPUSH
37563: PPUSH
37564: PPUSH
37565: PPUSH
37566: PPUSH
37567: PPUSH
37568: PPUSH
37569: PPUSH
37570: PPUSH
37571: PPUSH
37572: PPUSH
37573: PPUSH
37574: PPUSH
37575: PPUSH
37576: PPUSH
37577: PPUSH
37578: PPUSH
37579: PPUSH
37580: PPUSH
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
37588: PPUSH
37589: PPUSH
37590: PPUSH
37591: PPUSH
37592: PPUSH
37593: PPUSH
37594: PPUSH
37595: PPUSH
// result = [ ] ;
37596: LD_ADDR_VAR 0 7
37600: PUSH
37601: EMPTY
37602: ST_TO_ADDR
// temp_list = [ ] ;
37603: LD_ADDR_VAR 0 9
37607: PUSH
37608: EMPTY
37609: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37610: LD_VAR 0 4
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: LD_INT 1
37620: PUSH
37621: LD_INT 2
37623: PUSH
37624: LD_INT 3
37626: PUSH
37627: LD_INT 4
37629: PUSH
37630: LD_INT 5
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: IN
37641: NOT
37642: PUSH
37643: LD_VAR 0 1
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: LD_INT 1
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: IN
37658: PUSH
37659: LD_VAR 0 5
37663: PUSH
37664: LD_INT 1
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: LD_INT 3
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: LIST
37677: IN
37678: NOT
37679: AND
37680: OR
37681: IFFALSE 37685
// exit ;
37683: GO 56076
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37685: LD_VAR 0 1
37689: PUSH
37690: LD_INT 6
37692: PUSH
37693: LD_INT 7
37695: PUSH
37696: LD_INT 8
37698: PUSH
37699: LD_INT 13
37701: PUSH
37702: LD_INT 12
37704: PUSH
37705: LD_INT 15
37707: PUSH
37708: LD_INT 11
37710: PUSH
37711: LD_INT 14
37713: PUSH
37714: LD_INT 10
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: IN
37728: IFFALSE 37738
// btype = b_lab ;
37730: LD_ADDR_VAR 0 1
37734: PUSH
37735: LD_INT 6
37737: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37738: LD_VAR 0 6
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: LD_INT 1
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: LIST
37756: IN
37757: NOT
37758: PUSH
37759: LD_VAR 0 1
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: LD_INT 2
37772: PUSH
37773: LD_INT 3
37775: PUSH
37776: LD_INT 6
37778: PUSH
37779: LD_INT 36
37781: PUSH
37782: LD_INT 4
37784: PUSH
37785: LD_INT 5
37787: PUSH
37788: LD_INT 31
37790: PUSH
37791: LD_INT 32
37793: PUSH
37794: LD_INT 33
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: IN
37810: NOT
37811: PUSH
37812: LD_VAR 0 6
37816: PUSH
37817: LD_INT 1
37819: EQUAL
37820: AND
37821: OR
37822: PUSH
37823: LD_VAR 0 1
37827: PUSH
37828: LD_INT 2
37830: PUSH
37831: LD_INT 3
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: IN
37838: NOT
37839: PUSH
37840: LD_VAR 0 6
37844: PUSH
37845: LD_INT 2
37847: EQUAL
37848: AND
37849: OR
37850: IFFALSE 37860
// mode = 0 ;
37852: LD_ADDR_VAR 0 6
37856: PUSH
37857: LD_INT 0
37859: ST_TO_ADDR
// case mode of 0 :
37860: LD_VAR 0 6
37864: PUSH
37865: LD_INT 0
37867: DOUBLE
37868: EQUAL
37869: IFTRUE 37873
37871: GO 49326
37873: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37874: LD_ADDR_VAR 0 11
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: LD_INT 0
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: LD_INT 1
37932: NEG
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: LD_INT 1
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: LD_INT 2
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: LD_INT 2
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: LD_INT 1
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: LD_INT 3
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: LD_INT 3
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 1
38040: NEG
38041: PUSH
38042: LD_INT 2
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38067: LD_ADDR_VAR 0 12
38071: PUSH
38072: LD_INT 0
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 1
38136: NEG
38137: PUSH
38138: LD_INT 1
38140: NEG
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 2
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 2
38190: NEG
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 2
38201: NEG
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 3
38224: NEG
38225: PUSH
38226: LD_INT 0
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 3
38235: NEG
38236: PUSH
38237: LD_INT 1
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38263: LD_ADDR_VAR 0 13
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: PUSH
38302: LD_INT 1
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: LD_INT 0
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: NEG
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: LD_INT 2
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 2
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 2
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: LD_INT 2
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: LD_INT 2
38402: NEG
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 2
38410: NEG
38411: PUSH
38412: LD_INT 3
38414: NEG
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 3
38422: NEG
38423: PUSH
38424: LD_INT 2
38426: NEG
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 3
38434: NEG
38435: PUSH
38436: LD_INT 3
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38462: LD_ADDR_VAR 0 14
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: LD_INT 0
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: LD_INT 1
38535: NEG
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: LD_INT 2
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 1
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 1
38577: PUSH
38578: LD_INT 2
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 0
38587: PUSH
38588: LD_INT 2
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 1
38597: NEG
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 1
38608: NEG
38609: PUSH
38610: LD_INT 3
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 0
38620: PUSH
38621: LD_INT 3
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 2
38634: NEG
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38658: LD_ADDR_VAR 0 15
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: LD_INT 1
38678: NEG
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: LD_INT 0
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 0
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 1
38716: NEG
38717: PUSH
38718: LD_INT 0
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 2
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 2
38781: NEG
38782: PUSH
38783: LD_INT 0
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: NEG
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 3
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 3
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38851: LD_ADDR_VAR 0 16
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: LD_INT 0
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: LD_INT 1
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 1
38920: NEG
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: LD_INT 2
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 2
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 2
38954: PUSH
38955: LD_INT 2
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 2
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 2
38974: NEG
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: LD_INT 2
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 3
38998: PUSH
38999: LD_INT 2
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 3
39008: PUSH
39009: LD_INT 3
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: LD_INT 3
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39044: LD_ADDR_VAR 0 17
39048: PUSH
39049: LD_INT 0
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: NEG
39114: PUSH
39115: LD_INT 1
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: LD_INT 2
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: LD_INT 2
39140: NEG
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 2
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 2
39231: NEG
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 2
39243: NEG
39244: PUSH
39245: LD_INT 2
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39274: LD_ADDR_VAR 0 18
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 1
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 0
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: NEG
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 1
39355: NEG
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 0
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 2
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 2
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: LD_INT 2
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 2
39450: NEG
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 2
39461: NEG
39462: PUSH
39463: LD_INT 1
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: LD_INT 2
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39504: LD_ADDR_VAR 0 19
39508: PUSH
39509: LD_INT 0
39511: PUSH
39512: LD_INT 0
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 1
39573: NEG
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 2
39639: PUSH
39640: LD_INT 2
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 1
39649: PUSH
39650: LD_INT 2
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: LD_INT 0
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 2
39691: NEG
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: NEG
39704: PUSH
39705: LD_INT 2
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39734: LD_ADDR_VAR 0 20
39738: PUSH
39739: LD_INT 0
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 1
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: NEG
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: LD_INT 2
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 0
39827: PUSH
39828: LD_INT 2
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 1
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 2
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 2
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: NEG
39911: PUSH
39912: LD_INT 0
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 2
39921: NEG
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: LD_INT 2
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39964: LD_ADDR_VAR 0 21
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 1
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 1
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 1
40033: NEG
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: LD_INT 2
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: LD_INT 2
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 2
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 2
40099: PUSH
40100: LD_INT 2
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 2
40140: NEG
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 2
40151: NEG
40152: PUSH
40153: LD_INT 1
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: NEG
40164: PUSH
40165: LD_INT 2
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40194: LD_ADDR_VAR 0 22
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: LD_INT 2
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: LD_INT 1
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 2
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 2
40329: PUSH
40330: LD_INT 2
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: LD_INT 2
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 2
40370: NEG
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: NEG
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: LD_INT 2
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40424: LD_ADDR_VAR 0 23
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 2
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: LD_INT 2
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 2
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: PUSH
40560: LD_INT 2
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: LD_INT 2
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: NEG
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 2
40611: NEG
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 2
40623: NEG
40624: PUSH
40625: LD_INT 2
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: LD_INT 3
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: LD_INT 3
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40704: LD_ADDR_VAR 0 24
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: LD_INT 2
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: LD_INT 2
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: PUSH
40830: LD_INT 1
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 2
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 2
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 2
40880: NEG
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 2
40891: NEG
40892: PUSH
40893: LD_INT 1
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: NEG
40904: PUSH
40905: LD_INT 2
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: LD_INT 2
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 2
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 3
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 3
40947: PUSH
40948: LD_INT 2
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40980: LD_ADDR_VAR 0 25
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: LD_INT 2
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: LD_INT 2
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: LD_INT 2
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: LD_INT 2
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 2
41156: NEG
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 2
41167: NEG
41168: PUSH
41169: LD_INT 1
41171: NEG
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 2
41179: NEG
41180: PUSH
41181: LD_INT 2
41183: NEG
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 3
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 3
41201: PUSH
41202: LD_INT 2
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: LD_INT 3
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: LD_INT 3
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41254: LD_ADDR_VAR 0 26
41258: PUSH
41259: LD_INT 0
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: NEG
41324: PUSH
41325: LD_INT 1
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: LD_INT 2
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: LD_INT 2
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: NEG
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 2
41441: NEG
41442: PUSH
41443: LD_INT 1
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 2
41453: NEG
41454: PUSH
41455: LD_INT 2
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: LD_INT 3
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: PUSH
41476: LD_INT 3
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: LD_INT 2
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 2
41496: NEG
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41530: LD_ADDR_VAR 0 27
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: PUSH
41559: LD_INT 0
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: LD_INT 1
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: NEG
41589: PUSH
41590: LD_INT 0
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: LD_INT 2
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: LD_INT 2
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 2
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 2
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 2
41665: PUSH
41666: LD_INT 2
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: LD_INT 2
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 2
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 2
41717: NEG
41718: PUSH
41719: LD_INT 1
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 2
41729: NEG
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 2
41752: NEG
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 3
41763: NEG
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 3
41775: NEG
41776: PUSH
41777: LD_INT 2
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41810: LD_ADDR_VAR 0 28
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: LD_INT 1
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: LD_INT 2
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: LD_INT 2
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 2
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 2
41986: NEG
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: LD_INT 2
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: NEG
42022: PUSH
42023: LD_INT 3
42025: NEG
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: PUSH
42035: LD_INT 3
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 3
42045: NEG
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 3
42057: NEG
42058: PUSH
42059: LD_INT 2
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42092: LD_ADDR_VAR 0 29
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: LD_INT 1
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: LD_INT 0
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: LD_INT 2
42177: NEG
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 0
42185: PUSH
42186: LD_INT 2
42188: NEG
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: NEG
42271: PUSH
42272: LD_INT 2
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: LD_INT 3
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 3
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 3
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 1
42325: NEG
42326: PUSH
42327: LD_INT 2
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 3
42336: NEG
42337: PUSH
42338: LD_INT 2
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42371: LD_ADDR_VAR 0 30
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 1
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: LD_INT 2
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 1
42478: NEG
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 2
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 2
42506: PUSH
42507: LD_INT 2
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: LD_INT 2
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: LD_INT 1
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 2
42537: NEG
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 2
42548: NEG
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: LD_INT 3
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: LD_INT 2
42575: NEG
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 3
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 2
42603: NEG
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 3
42614: NEG
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42649: LD_ADDR_VAR 0 31
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 1
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: NEG
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: NEG
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: LD_INT 2
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 2
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: LD_INT 2
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: LD_INT 1
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: NEG
42827: PUSH
42828: LD_INT 2
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 2
42838: NEG
42839: PUSH
42840: LD_INT 3
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 3
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: LD_INT 3
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: NEG
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 3
42892: NEG
42893: PUSH
42894: LD_INT 2
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42927: LD_ADDR_VAR 0 32
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: LD_INT 2
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 2
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: LD_INT 2
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: NEG
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: NEG
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: LD_INT 3
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: LD_INT 2
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 3
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: LD_INT 3
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 3
43170: NEG
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43205: LD_ADDR_VAR 0 33
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: LD_INT 2
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: LD_INT 2
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 2
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: NEG
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 2
43360: NEG
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 2
43371: NEG
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: LD_INT 2
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: LD_INT 3
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 3
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: LD_INT 3
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 3
43449: NEG
43450: PUSH
43451: LD_INT 2
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43484: LD_ADDR_VAR 0 34
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: LD_INT 1
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 2
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 2
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 1
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 1
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 2
43640: NEG
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: LD_INT 1
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: LD_INT 3
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: LD_INT 2
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 3
43698: PUSH
43699: LD_INT 2
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: LD_INT 3
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 2
43718: NEG
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 3
43729: NEG
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43764: LD_ADDR_VAR 0 35
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 2
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43876: LD_ADDR_VAR 0 36
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: NEG
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: LD_INT 2
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: LD_INT 2
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43988: LD_ADDR_VAR 0 37
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44100: LD_ADDR_VAR 0 38
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 2
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44212: LD_ADDR_VAR 0 39
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: LD_INT 2
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: PUSH
44306: LD_INT 2
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44324: LD_ADDR_VAR 0 40
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: NEG
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44436: LD_ADDR_VAR 0 41
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 1
44494: NEG
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: NEG
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: NEG
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: LD_INT 3
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 3
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 3
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 3
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 3
44679: PUSH
44680: LD_INT 3
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: LD_INT 3
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 3
44710: NEG
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 3
44721: NEG
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 3
44733: NEG
44734: PUSH
44735: LD_INT 2
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 3
44745: NEG
44746: PUSH
44747: LD_INT 3
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44786: LD_ADDR_VAR 0 42
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: LD_INT 3
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: LD_INT 3
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: LD_INT 3
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: LD_INT 2
45014: NEG
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 3
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 3
45032: PUSH
45033: LD_INT 3
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: LD_INT 3
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 3
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: LD_INT 3
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: LD_INT 2
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 3
45083: NEG
45084: PUSH
45085: LD_INT 2
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 3
45095: NEG
45096: PUSH
45097: LD_INT 3
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45136: LD_ADDR_VAR 0 43
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 2
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 2
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 2
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: LD_INT 2
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: LD_INT 1
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 2
45313: NEG
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: LD_INT 3
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: LD_INT 3
45340: NEG
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 2
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 3
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 3
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: LD_INT 3
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 3
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 3
45432: NEG
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 3
45443: NEG
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45484: LD_ADDR_VAR 0 44
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 1
45542: NEG
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 2
45598: PUSH
45599: LD_INT 1
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: NEG
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: LD_INT 2
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: LD_INT 3
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 3
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 3
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 3
45717: PUSH
45718: LD_INT 2
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 3
45727: PUSH
45728: LD_INT 3
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: LD_INT 3
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 3
45758: NEG
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 3
45769: NEG
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 3
45781: NEG
45782: PUSH
45783: LD_INT 2
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 3
45793: NEG
45794: PUSH
45795: LD_INT 3
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45834: LD_ADDR_VAR 0 45
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: LD_INT 2
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 2
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: PUSH
45960: LD_INT 2
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: LD_INT 2
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 2
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: LD_INT 3
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: LD_INT 3
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: LD_INT 3
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 3
46070: PUSH
46071: LD_INT 2
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 3
46080: PUSH
46081: LD_INT 3
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: LD_INT 3
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: LD_INT 3
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 3
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 3
46131: NEG
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 3
46143: NEG
46144: PUSH
46145: LD_INT 3
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46184: LD_ADDR_VAR 0 46
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 2
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: LD_INT 2
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 2
46361: NEG
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: LD_INT 3
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 3
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 2
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 3
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 3
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: LD_INT 3
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 3
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 3
46480: NEG
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 3
46491: NEG
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46532: LD_ADDR_VAR 0 47
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: NEG
46660: PUSH
46661: LD_INT 2
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46683: LD_ADDR_VAR 0 48
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: LD_INT 1
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: LD_INT 2
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 2
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46830: LD_ADDR_VAR 0 49
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: LD_INT 1
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: LD_INT 2
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46974: LD_ADDR_VAR 0 50
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47118: LD_ADDR_VAR 0 51
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 1
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: LD_INT 1
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: NEG
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: LD_INT 2
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 2
47241: NEG
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47265: LD_ADDR_VAR 0 52
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 2
47369: NEG
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47416: LD_ADDR_VAR 0 53
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: LD_INT 2
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: LD_INT 2
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: LD_INT 2
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: LD_INT 2
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47646: LD_ADDR_VAR 0 54
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 0
47739: PUSH
47740: LD_INT 2
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 2
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 2
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 2
47833: NEG
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: LD_INT 2
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47876: LD_ADDR_VAR 0 55
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: LD_INT 0
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 2
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: NEG
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48106: LD_ADDR_VAR 0 56
48110: PUSH
48111: LD_INT 0
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 2
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: PUSH
48232: LD_INT 1
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 2
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: LD_INT 1
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: NEG
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: LD_INT 2
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48336: LD_ADDR_VAR 0 57
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 2
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 2
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 2
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: LD_INT 2
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: NEG
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: NEG
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48566: LD_ADDR_VAR 0 58
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48796: LD_ADDR_VAR 0 59
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: LD_INT 1
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: LD_INT 1
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 1
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48884: LD_ADDR_VAR 0 60
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48972: LD_ADDR_VAR 0 61
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: LD_INT 1
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49060: LD_ADDR_VAR 0 62
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49148: LD_ADDR_VAR 0 63
49152: PUSH
49153: LD_INT 0
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 1
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49236: LD_ADDR_VAR 0 64
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: ST_TO_ADDR
// end ; 1 :
49324: GO 55221
49326: LD_INT 1
49328: DOUBLE
49329: EQUAL
49330: IFTRUE 49334
49332: GO 51957
49334: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49335: LD_ADDR_VAR 0 11
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 3
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: LD_INT 3
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 2
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: LIST
49378: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49379: LD_ADDR_VAR 0 12
49383: PUSH
49384: LD_INT 2
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 3
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 3
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: LIST
49419: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49420: LD_ADDR_VAR 0 13
49424: PUSH
49425: LD_INT 3
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 3
49437: PUSH
49438: LD_INT 3
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: LD_INT 3
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49460: LD_ADDR_VAR 0 14
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 3
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 3
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: LIST
49500: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49501: LD_ADDR_VAR 0 15
49505: PUSH
49506: LD_INT 2
49508: NEG
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 3
49519: NEG
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 3
49530: NEG
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: LIST
49544: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49545: LD_ADDR_VAR 0 16
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: LD_INT 3
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 3
49564: NEG
49565: PUSH
49566: LD_INT 2
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 3
49576: NEG
49577: PUSH
49578: LD_INT 3
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: LIST
49590: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49591: LD_ADDR_VAR 0 17
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 3
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 3
49613: NEG
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 2
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: LIST
49634: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49635: LD_ADDR_VAR 0 18
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 3
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 3
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: LIST
49675: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49676: LD_ADDR_VAR 0 19
49680: PUSH
49681: LD_INT 3
49683: PUSH
49684: LD_INT 2
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 3
49693: PUSH
49694: LD_INT 3
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: LD_INT 3
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49716: LD_ADDR_VAR 0 20
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: LD_INT 3
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 3
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: LIST
49756: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49757: LD_ADDR_VAR 0 21
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 3
49775: NEG
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49801: LD_ADDR_VAR 0 22
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: LD_INT 3
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 3
49820: NEG
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 3
49832: NEG
49833: PUSH
49834: LD_INT 3
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: LIST
49846: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49847: LD_ADDR_VAR 0 23
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 3
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 4
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: LD_INT 3
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: LIST
49890: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49891: LD_ADDR_VAR 0 24
49895: PUSH
49896: LD_INT 3
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 3
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 4
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: LIST
49931: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49932: LD_ADDR_VAR 0 25
49936: PUSH
49937: LD_INT 3
49939: PUSH
49940: LD_INT 3
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 4
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 3
49959: PUSH
49960: LD_INT 4
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: LIST
49971: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49972: LD_ADDR_VAR 0 26
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: LD_INT 3
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: LD_INT 4
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: LD_INT 3
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: LIST
50012: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50013: LD_ADDR_VAR 0 27
50017: PUSH
50018: LD_INT 3
50020: NEG
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 3
50031: NEG
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 4
50042: NEG
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: LIST
50056: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50057: LD_ADDR_VAR 0 28
50061: PUSH
50062: LD_INT 3
50064: NEG
50065: PUSH
50066: LD_INT 3
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 3
50076: NEG
50077: PUSH
50078: LD_INT 4
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 4
50088: NEG
50089: PUSH
50090: LD_INT 3
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: LIST
50102: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50103: LD_ADDR_VAR 0 29
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: LD_INT 3
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 3
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 4
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: LD_INT 4
50159: NEG
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 3
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: LD_INT 5
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: LD_INT 5
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 4
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 6
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 6
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: LD_INT 5
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50258: LD_ADDR_VAR 0 30
50262: PUSH
50263: LD_INT 2
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 3
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 3
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 3
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 4
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 4
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 4
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 5
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 5
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 5
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 6
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 6
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50401: LD_ADDR_VAR 0 31
50405: PUSH
50406: LD_INT 3
50408: PUSH
50409: LD_INT 2
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 3
50418: PUSH
50419: LD_INT 3
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 2
50428: PUSH
50429: LD_INT 3
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 4
50438: PUSH
50439: LD_INT 3
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 4
50448: PUSH
50449: LD_INT 4
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 3
50458: PUSH
50459: LD_INT 4
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 5
50468: PUSH
50469: LD_INT 4
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 5
50478: PUSH
50479: LD_INT 5
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 4
50488: PUSH
50489: LD_INT 5
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 6
50498: PUSH
50499: LD_INT 5
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 6
50508: PUSH
50509: LD_INT 6
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 5
50518: PUSH
50519: LD_INT 6
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50540: LD_ADDR_VAR 0 32
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: LD_INT 3
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 3
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: LD_INT 2
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 4
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 4
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: LD_INT 3
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 5
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 5
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 4
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 6
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 6
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 5
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50683: LD_ADDR_VAR 0 33
50687: PUSH
50688: LD_INT 2
50690: NEG
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 3
50701: NEG
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: LD_INT 1
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 3
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 4
50735: NEG
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 4
50746: NEG
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 4
50758: NEG
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 5
50769: NEG
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 5
50780: NEG
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 5
50792: NEG
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 6
50803: NEG
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 6
50814: NEG
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50838: LD_ADDR_VAR 0 34
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: LD_INT 3
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 3
50857: NEG
50858: PUSH
50859: LD_INT 2
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: NEG
50870: PUSH
50871: LD_INT 3
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 3
50881: NEG
50882: PUSH
50883: LD_INT 4
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 4
50893: NEG
50894: PUSH
50895: LD_INT 3
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 4
50905: NEG
50906: PUSH
50907: LD_INT 4
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 4
50917: NEG
50918: PUSH
50919: LD_INT 5
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 5
50929: NEG
50930: PUSH
50931: LD_INT 4
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 5
50941: NEG
50942: PUSH
50943: LD_INT 5
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 5
50953: NEG
50954: PUSH
50955: LD_INT 6
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 6
50965: NEG
50966: PUSH
50967: LD_INT 5
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 6
50977: NEG
50978: PUSH
50979: LD_INT 6
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51001: LD_ADDR_VAR 0 41
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: LD_INT 3
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: LIST
51044: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51045: LD_ADDR_VAR 0 42
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 3
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: LIST
51085: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51086: LD_ADDR_VAR 0 43
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: LD_INT 2
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 3
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: LD_INT 3
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: LIST
51125: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51126: LD_ADDR_VAR 0 44
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 2
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: LD_INT 3
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 2
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: LIST
51166: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51167: LD_ADDR_VAR 0 45
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 2
51185: NEG
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 3
51196: NEG
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51211: LD_ADDR_VAR 0 46
51215: PUSH
51216: LD_INT 2
51218: NEG
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 2
51230: NEG
51231: PUSH
51232: LD_INT 3
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 3
51242: NEG
51243: PUSH
51244: LD_INT 2
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: LIST
51256: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51257: LD_ADDR_VAR 0 47
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: LD_INT 3
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: NEG
51277: PUSH
51278: LD_INT 3
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51290: LD_ADDR_VAR 0 48
51294: PUSH
51295: LD_INT 1
51297: PUSH
51298: LD_INT 2
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51321: LD_ADDR_VAR 0 49
51325: PUSH
51326: LD_INT 3
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: LD_INT 2
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51350: LD_ADDR_VAR 0 50
51354: PUSH
51355: LD_INT 2
51357: PUSH
51358: LD_INT 3
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51379: LD_ADDR_VAR 0 51
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: LD_INT 2
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51410: LD_ADDR_VAR 0 52
51414: PUSH
51415: LD_INT 3
51417: NEG
51418: PUSH
51419: LD_INT 1
51421: NEG
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 3
51429: NEG
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51443: LD_ADDR_VAR 0 53
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 3
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 3
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: LIST
51486: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51487: LD_ADDR_VAR 0 54
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 3
51505: PUSH
51506: LD_INT 0
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 3
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: LIST
51527: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51528: LD_ADDR_VAR 0 55
51532: PUSH
51533: LD_INT 3
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 3
51545: PUSH
51546: LD_INT 3
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 2
51555: PUSH
51556: LD_INT 3
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: LIST
51567: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51568: LD_ADDR_VAR 0 56
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: LD_INT 3
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: LD_INT 3
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: LIST
51608: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51609: LD_ADDR_VAR 0 57
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 3
51627: NEG
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 3
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: LIST
51652: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51653: LD_ADDR_VAR 0 58
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: LD_INT 3
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 3
51684: NEG
51685: PUSH
51686: LD_INT 3
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: LIST
51698: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51699: LD_ADDR_VAR 0 59
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: LIST
51742: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51743: LD_ADDR_VAR 0 60
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: LIST
51783: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51784: LD_ADDR_VAR 0 61
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51824: LD_ADDR_VAR 0 62
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: LIST
51864: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51865: LD_ADDR_VAR 0 63
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: LIST
51908: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51909: LD_ADDR_VAR 0 64
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: LIST
51954: ST_TO_ADDR
// end ; 2 :
51955: GO 55221
51957: LD_INT 2
51959: DOUBLE
51960: EQUAL
51961: IFTRUE 51965
51963: GO 55220
51965: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51966: LD_ADDR_VAR 0 29
51970: PUSH
51971: LD_INT 4
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 4
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 5
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 5
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 4
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 3
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 3
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 5
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 3
52066: PUSH
52067: LD_INT 3
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 3
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 4
52086: PUSH
52087: LD_INT 3
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 4
52096: PUSH
52097: LD_INT 4
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 3
52106: PUSH
52107: LD_INT 4
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: LD_INT 3
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 4
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: LD_INT 4
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: LD_INT 4
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 3
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: LD_INT 4
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 1
52186: PUSH
52187: LD_INT 5
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 5
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 4
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: LD_INT 3
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: PUSH
52229: LD_INT 5
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: LD_INT 3
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 3
52249: NEG
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 3
52260: NEG
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: LD_INT 1
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 3
52294: NEG
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 4
52305: NEG
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 4
52316: NEG
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 4
52328: NEG
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 2
52340: NEG
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 4
52351: NEG
52352: PUSH
52353: LD_INT 4
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 4
52363: NEG
52364: PUSH
52365: LD_INT 5
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 3
52375: NEG
52376: PUSH
52377: LD_INT 4
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: NEG
52388: PUSH
52389: LD_INT 3
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 4
52399: NEG
52400: PUSH
52401: LD_INT 3
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 5
52411: NEG
52412: PUSH
52413: LD_INT 4
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 5
52423: NEG
52424: PUSH
52425: LD_INT 5
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 3
52435: NEG
52436: PUSH
52437: LD_INT 5
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 5
52447: NEG
52448: PUSH
52449: LD_INT 3
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52504: LD_ADDR_VAR 0 30
52508: PUSH
52509: LD_INT 4
52511: PUSH
52512: LD_INT 4
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 4
52521: PUSH
52522: LD_INT 3
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 5
52531: PUSH
52532: LD_INT 4
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 5
52541: PUSH
52542: LD_INT 5
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 4
52551: PUSH
52552: LD_INT 5
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: LD_INT 4
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 3
52571: PUSH
52572: LD_INT 3
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 5
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: LD_INT 5
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: LD_INT 3
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 4
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: LD_INT 4
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 1
52651: NEG
52652: PUSH
52653: LD_INT 3
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: PUSH
52664: LD_INT 2
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: LD_INT 4
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 2
52683: NEG
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 4
52694: NEG
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 4
52705: NEG
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 3
52728: NEG
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 4
52739: NEG
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 5
52750: NEG
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 5
52761: NEG
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 5
52773: NEG
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 3
52785: NEG
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 3
52796: NEG
52797: PUSH
52798: LD_INT 3
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 3
52808: NEG
52809: PUSH
52810: LD_INT 4
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: LD_INT 3
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 2
52832: NEG
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 3
52844: NEG
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 4
52856: NEG
52857: PUSH
52858: LD_INT 3
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 4
52868: NEG
52869: PUSH
52870: LD_INT 4
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: NEG
52881: PUSH
52882: LD_INT 4
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 4
52892: NEG
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: LD_INT 4
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: LD_INT 5
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: LD_INT 4
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: LD_INT 3
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 3
52951: NEG
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 4
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 5
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 2
52983: PUSH
52984: LD_INT 3
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: LD_INT 5
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53051: LD_ADDR_VAR 0 31
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 4
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: LD_INT 3
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 4
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: LD_INT 5
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 5
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: LD_INT 4
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: LD_INT 5
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: NEG
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 3
53151: NEG
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 3
53162: NEG
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 3
53196: NEG
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 4
53207: NEG
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 4
53218: NEG
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 4
53230: NEG
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: LD_INT 2
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 4
53253: NEG
53254: PUSH
53255: LD_INT 4
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 4
53265: NEG
53266: PUSH
53267: LD_INT 5
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 3
53277: NEG
53278: PUSH
53279: LD_INT 4
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 3
53289: NEG
53290: PUSH
53291: LD_INT 3
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 4
53301: NEG
53302: PUSH
53303: LD_INT 3
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 5
53313: NEG
53314: PUSH
53315: LD_INT 4
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 5
53325: NEG
53326: PUSH
53327: LD_INT 5
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 3
53337: NEG
53338: PUSH
53339: LD_INT 5
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 5
53349: NEG
53350: PUSH
53351: LD_INT 3
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: LD_INT 3
53364: NEG
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 4
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 2
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 3
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 4
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: LD_INT 4
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 4
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 4
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 5
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 5
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 4
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 3
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 3
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 5
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53601: LD_ADDR_VAR 0 32
53605: PUSH
53606: LD_INT 4
53608: NEG
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 4
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 3
53631: NEG
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 3
53642: NEG
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 4
53653: NEG
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 5
53664: NEG
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 5
53675: NEG
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 5
53687: NEG
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 3
53699: NEG
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 3
53710: NEG
53711: PUSH
53712: LD_INT 3
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: NEG
53723: PUSH
53724: LD_INT 4
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: LD_INT 3
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: NEG
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 3
53758: NEG
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 4
53770: NEG
53771: PUSH
53772: LD_INT 3
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 4
53782: NEG
53783: PUSH
53784: LD_INT 4
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: NEG
53795: PUSH
53796: LD_INT 4
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 4
53806: NEG
53807: PUSH
53808: LD_INT 2
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: LD_INT 4
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 5
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 4
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 3
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 0
53862: PUSH
53863: LD_INT 3
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 4
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 5
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: LD_INT 3
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: LD_INT 5
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 3
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 3
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 4
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 4
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 3
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: LD_INT 1
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 4
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 4
54013: PUSH
54014: LD_INT 4
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 4
54023: PUSH
54024: LD_INT 3
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 5
54033: PUSH
54034: LD_INT 4
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 5
54043: PUSH
54044: LD_INT 5
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 4
54053: PUSH
54054: LD_INT 5
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 3
54063: PUSH
54064: LD_INT 4
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 3
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 5
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: LD_INT 5
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54148: LD_ADDR_VAR 0 33
54152: PUSH
54153: LD_INT 4
54155: NEG
54156: PUSH
54157: LD_INT 4
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 4
54167: NEG
54168: PUSH
54169: LD_INT 5
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 3
54179: NEG
54180: PUSH
54181: LD_INT 4
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 3
54191: NEG
54192: PUSH
54193: LD_INT 3
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 4
54203: NEG
54204: PUSH
54205: LD_INT 3
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 5
54215: NEG
54216: PUSH
54217: LD_INT 4
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 5
54227: NEG
54228: PUSH
54229: LD_INT 5
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 3
54239: NEG
54240: PUSH
54241: LD_INT 5
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 5
54251: NEG
54252: PUSH
54253: LD_INT 3
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: LD_INT 3
54266: NEG
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 4
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: LD_INT 3
54288: NEG
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 3
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 4
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: LD_INT 4
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 4
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 4
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 5
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 5
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 4
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 3
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: LD_INT 1
54429: NEG
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 3
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 5
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 3
54458: PUSH
54459: LD_INT 3
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 3
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 4
54478: PUSH
54479: LD_INT 3
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 4
54488: PUSH
54489: LD_INT 4
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 3
54498: PUSH
54499: LD_INT 4
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: LD_INT 3
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 4
54528: PUSH
54529: LD_INT 2
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: LD_INT 4
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: LD_INT 4
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 3
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: LD_INT 4
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 5
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 5
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: LD_INT 4
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 3
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: LD_INT 5
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 2
54630: NEG
54631: PUSH
54632: LD_INT 3
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54686: LD_ADDR_VAR 0 34
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 4
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 5
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 4
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 3
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 3
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: LD_INT 4
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 5
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: LD_INT 3
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: LD_INT 5
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 4
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 4
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 3
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 2
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 4
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 4
54888: PUSH
54889: LD_INT 4
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 4
54898: PUSH
54899: LD_INT 3
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 5
54908: PUSH
54909: LD_INT 4
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 5
54918: PUSH
54919: LD_INT 5
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 4
54928: PUSH
54929: LD_INT 5
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 3
54938: PUSH
54939: LD_INT 4
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 3
54948: PUSH
54949: LD_INT 3
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 5
54958: PUSH
54959: LD_INT 3
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 3
54968: PUSH
54969: LD_INT 5
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: LD_INT 3
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 3
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 4
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: LD_INT 4
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 3
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: LD_INT 4
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 4
55071: NEG
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 4
55082: NEG
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 3
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 4
55116: NEG
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 5
55127: NEG
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 5
55138: NEG
55139: PUSH
55140: LD_INT 1
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 5
55150: NEG
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 3
55162: NEG
55163: PUSH
55164: LD_INT 2
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: ST_TO_ADDR
// end ; end ;
55218: GO 55221
55220: POP
// case btype of b_depot , b_warehouse :
55221: LD_VAR 0 1
55225: PUSH
55226: LD_INT 0
55228: DOUBLE
55229: EQUAL
55230: IFTRUE 55240
55232: LD_INT 1
55234: DOUBLE
55235: EQUAL
55236: IFTRUE 55240
55238: GO 55441
55240: POP
// case nation of nation_american :
55241: LD_VAR 0 5
55245: PUSH
55246: LD_INT 1
55248: DOUBLE
55249: EQUAL
55250: IFTRUE 55254
55252: GO 55310
55254: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55255: LD_ADDR_VAR 0 9
55259: PUSH
55260: LD_VAR 0 11
55264: PUSH
55265: LD_VAR 0 12
55269: PUSH
55270: LD_VAR 0 13
55274: PUSH
55275: LD_VAR 0 14
55279: PUSH
55280: LD_VAR 0 15
55284: PUSH
55285: LD_VAR 0 16
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: PUSH
55298: LD_VAR 0 4
55302: PUSH
55303: LD_INT 1
55305: PLUS
55306: ARRAY
55307: ST_TO_ADDR
55308: GO 55439
55310: LD_INT 2
55312: DOUBLE
55313: EQUAL
55314: IFTRUE 55318
55316: GO 55374
55318: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55319: LD_ADDR_VAR 0 9
55323: PUSH
55324: LD_VAR 0 17
55328: PUSH
55329: LD_VAR 0 18
55333: PUSH
55334: LD_VAR 0 19
55338: PUSH
55339: LD_VAR 0 20
55343: PUSH
55344: LD_VAR 0 21
55348: PUSH
55349: LD_VAR 0 22
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: PUSH
55362: LD_VAR 0 4
55366: PUSH
55367: LD_INT 1
55369: PLUS
55370: ARRAY
55371: ST_TO_ADDR
55372: GO 55439
55374: LD_INT 3
55376: DOUBLE
55377: EQUAL
55378: IFTRUE 55382
55380: GO 55438
55382: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55383: LD_ADDR_VAR 0 9
55387: PUSH
55388: LD_VAR 0 23
55392: PUSH
55393: LD_VAR 0 24
55397: PUSH
55398: LD_VAR 0 25
55402: PUSH
55403: LD_VAR 0 26
55407: PUSH
55408: LD_VAR 0 27
55412: PUSH
55413: LD_VAR 0 28
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: PUSH
55426: LD_VAR 0 4
55430: PUSH
55431: LD_INT 1
55433: PLUS
55434: ARRAY
55435: ST_TO_ADDR
55436: GO 55439
55438: POP
55439: GO 55994
55441: LD_INT 2
55443: DOUBLE
55444: EQUAL
55445: IFTRUE 55455
55447: LD_INT 3
55449: DOUBLE
55450: EQUAL
55451: IFTRUE 55455
55453: GO 55511
55455: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55456: LD_ADDR_VAR 0 9
55460: PUSH
55461: LD_VAR 0 29
55465: PUSH
55466: LD_VAR 0 30
55470: PUSH
55471: LD_VAR 0 31
55475: PUSH
55476: LD_VAR 0 32
55480: PUSH
55481: LD_VAR 0 33
55485: PUSH
55486: LD_VAR 0 34
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: PUSH
55499: LD_VAR 0 4
55503: PUSH
55504: LD_INT 1
55506: PLUS
55507: ARRAY
55508: ST_TO_ADDR
55509: GO 55994
55511: LD_INT 16
55513: DOUBLE
55514: EQUAL
55515: IFTRUE 55573
55517: LD_INT 17
55519: DOUBLE
55520: EQUAL
55521: IFTRUE 55573
55523: LD_INT 18
55525: DOUBLE
55526: EQUAL
55527: IFTRUE 55573
55529: LD_INT 19
55531: DOUBLE
55532: EQUAL
55533: IFTRUE 55573
55535: LD_INT 22
55537: DOUBLE
55538: EQUAL
55539: IFTRUE 55573
55541: LD_INT 20
55543: DOUBLE
55544: EQUAL
55545: IFTRUE 55573
55547: LD_INT 21
55549: DOUBLE
55550: EQUAL
55551: IFTRUE 55573
55553: LD_INT 23
55555: DOUBLE
55556: EQUAL
55557: IFTRUE 55573
55559: LD_INT 24
55561: DOUBLE
55562: EQUAL
55563: IFTRUE 55573
55565: LD_INT 25
55567: DOUBLE
55568: EQUAL
55569: IFTRUE 55573
55571: GO 55629
55573: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55574: LD_ADDR_VAR 0 9
55578: PUSH
55579: LD_VAR 0 35
55583: PUSH
55584: LD_VAR 0 36
55588: PUSH
55589: LD_VAR 0 37
55593: PUSH
55594: LD_VAR 0 38
55598: PUSH
55599: LD_VAR 0 39
55603: PUSH
55604: LD_VAR 0 40
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: PUSH
55617: LD_VAR 0 4
55621: PUSH
55622: LD_INT 1
55624: PLUS
55625: ARRAY
55626: ST_TO_ADDR
55627: GO 55994
55629: LD_INT 6
55631: DOUBLE
55632: EQUAL
55633: IFTRUE 55685
55635: LD_INT 7
55637: DOUBLE
55638: EQUAL
55639: IFTRUE 55685
55641: LD_INT 8
55643: DOUBLE
55644: EQUAL
55645: IFTRUE 55685
55647: LD_INT 13
55649: DOUBLE
55650: EQUAL
55651: IFTRUE 55685
55653: LD_INT 12
55655: DOUBLE
55656: EQUAL
55657: IFTRUE 55685
55659: LD_INT 15
55661: DOUBLE
55662: EQUAL
55663: IFTRUE 55685
55665: LD_INT 11
55667: DOUBLE
55668: EQUAL
55669: IFTRUE 55685
55671: LD_INT 14
55673: DOUBLE
55674: EQUAL
55675: IFTRUE 55685
55677: LD_INT 10
55679: DOUBLE
55680: EQUAL
55681: IFTRUE 55685
55683: GO 55741
55685: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55686: LD_ADDR_VAR 0 9
55690: PUSH
55691: LD_VAR 0 41
55695: PUSH
55696: LD_VAR 0 42
55700: PUSH
55701: LD_VAR 0 43
55705: PUSH
55706: LD_VAR 0 44
55710: PUSH
55711: LD_VAR 0 45
55715: PUSH
55716: LD_VAR 0 46
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: PUSH
55729: LD_VAR 0 4
55733: PUSH
55734: LD_INT 1
55736: PLUS
55737: ARRAY
55738: ST_TO_ADDR
55739: GO 55994
55741: LD_INT 36
55743: DOUBLE
55744: EQUAL
55745: IFTRUE 55749
55747: GO 55805
55749: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55750: LD_ADDR_VAR 0 9
55754: PUSH
55755: LD_VAR 0 47
55759: PUSH
55760: LD_VAR 0 48
55764: PUSH
55765: LD_VAR 0 49
55769: PUSH
55770: LD_VAR 0 50
55774: PUSH
55775: LD_VAR 0 51
55779: PUSH
55780: LD_VAR 0 52
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: PUSH
55793: LD_VAR 0 4
55797: PUSH
55798: LD_INT 1
55800: PLUS
55801: ARRAY
55802: ST_TO_ADDR
55803: GO 55994
55805: LD_INT 4
55807: DOUBLE
55808: EQUAL
55809: IFTRUE 55831
55811: LD_INT 5
55813: DOUBLE
55814: EQUAL
55815: IFTRUE 55831
55817: LD_INT 34
55819: DOUBLE
55820: EQUAL
55821: IFTRUE 55831
55823: LD_INT 37
55825: DOUBLE
55826: EQUAL
55827: IFTRUE 55831
55829: GO 55887
55831: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55832: LD_ADDR_VAR 0 9
55836: PUSH
55837: LD_VAR 0 53
55841: PUSH
55842: LD_VAR 0 54
55846: PUSH
55847: LD_VAR 0 55
55851: PUSH
55852: LD_VAR 0 56
55856: PUSH
55857: LD_VAR 0 57
55861: PUSH
55862: LD_VAR 0 58
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: PUSH
55875: LD_VAR 0 4
55879: PUSH
55880: LD_INT 1
55882: PLUS
55883: ARRAY
55884: ST_TO_ADDR
55885: GO 55994
55887: LD_INT 31
55889: DOUBLE
55890: EQUAL
55891: IFTRUE 55937
55893: LD_INT 32
55895: DOUBLE
55896: EQUAL
55897: IFTRUE 55937
55899: LD_INT 33
55901: DOUBLE
55902: EQUAL
55903: IFTRUE 55937
55905: LD_INT 27
55907: DOUBLE
55908: EQUAL
55909: IFTRUE 55937
55911: LD_INT 26
55913: DOUBLE
55914: EQUAL
55915: IFTRUE 55937
55917: LD_INT 28
55919: DOUBLE
55920: EQUAL
55921: IFTRUE 55937
55923: LD_INT 29
55925: DOUBLE
55926: EQUAL
55927: IFTRUE 55937
55929: LD_INT 30
55931: DOUBLE
55932: EQUAL
55933: IFTRUE 55937
55935: GO 55993
55937: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55938: LD_ADDR_VAR 0 9
55942: PUSH
55943: LD_VAR 0 59
55947: PUSH
55948: LD_VAR 0 60
55952: PUSH
55953: LD_VAR 0 61
55957: PUSH
55958: LD_VAR 0 62
55962: PUSH
55963: LD_VAR 0 63
55967: PUSH
55968: LD_VAR 0 64
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: PUSH
55981: LD_VAR 0 4
55985: PUSH
55986: LD_INT 1
55988: PLUS
55989: ARRAY
55990: ST_TO_ADDR
55991: GO 55994
55993: POP
// temp_list2 = [ ] ;
55994: LD_ADDR_VAR 0 10
55998: PUSH
55999: EMPTY
56000: ST_TO_ADDR
// for i in temp_list do
56001: LD_ADDR_VAR 0 8
56005: PUSH
56006: LD_VAR 0 9
56010: PUSH
56011: FOR_IN
56012: IFFALSE 56064
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56014: LD_ADDR_VAR 0 10
56018: PUSH
56019: LD_VAR 0 10
56023: PUSH
56024: LD_VAR 0 8
56028: PUSH
56029: LD_INT 1
56031: ARRAY
56032: PUSH
56033: LD_VAR 0 2
56037: PLUS
56038: PUSH
56039: LD_VAR 0 8
56043: PUSH
56044: LD_INT 2
56046: ARRAY
56047: PUSH
56048: LD_VAR 0 3
56052: PLUS
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: EMPTY
56059: LIST
56060: ADD
56061: ST_TO_ADDR
56062: GO 56011
56064: POP
56065: POP
// result = temp_list2 ;
56066: LD_ADDR_VAR 0 7
56070: PUSH
56071: LD_VAR 0 10
56075: ST_TO_ADDR
// end ;
56076: LD_VAR 0 7
56080: RET
// export function EnemyInRange ( unit , dist ) ; begin
56081: LD_INT 0
56083: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56084: LD_ADDR_VAR 0 3
56088: PUSH
56089: LD_VAR 0 1
56093: PPUSH
56094: CALL_OW 255
56098: PPUSH
56099: LD_VAR 0 1
56103: PPUSH
56104: CALL_OW 250
56108: PPUSH
56109: LD_VAR 0 1
56113: PPUSH
56114: CALL_OW 251
56118: PPUSH
56119: LD_VAR 0 2
56123: PPUSH
56124: CALL 29852 0 4
56128: PUSH
56129: LD_INT 4
56131: ARRAY
56132: ST_TO_ADDR
// end ;
56133: LD_VAR 0 3
56137: RET
// export function PlayerSeeMe ( unit ) ; begin
56138: LD_INT 0
56140: PPUSH
// result := See ( your_side , unit ) ;
56141: LD_ADDR_VAR 0 2
56145: PUSH
56146: LD_OWVAR 2
56150: PPUSH
56151: LD_VAR 0 1
56155: PPUSH
56156: CALL_OW 292
56160: ST_TO_ADDR
// end ;
56161: LD_VAR 0 2
56165: RET
// export function ReverseDir ( unit ) ; begin
56166: LD_INT 0
56168: PPUSH
// if not unit then
56169: LD_VAR 0 1
56173: NOT
56174: IFFALSE 56178
// exit ;
56176: GO 56201
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56178: LD_ADDR_VAR 0 2
56182: PUSH
56183: LD_VAR 0 1
56187: PPUSH
56188: CALL_OW 254
56192: PUSH
56193: LD_INT 3
56195: PLUS
56196: PUSH
56197: LD_INT 6
56199: MOD
56200: ST_TO_ADDR
// end ;
56201: LD_VAR 0 2
56205: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56206: LD_INT 0
56208: PPUSH
56209: PPUSH
56210: PPUSH
56211: PPUSH
56212: PPUSH
// if not hexes then
56213: LD_VAR 0 2
56217: NOT
56218: IFFALSE 56222
// exit ;
56220: GO 56370
// dist := 9999 ;
56222: LD_ADDR_VAR 0 5
56226: PUSH
56227: LD_INT 9999
56229: ST_TO_ADDR
// for i = 1 to hexes do
56230: LD_ADDR_VAR 0 4
56234: PUSH
56235: DOUBLE
56236: LD_INT 1
56238: DEC
56239: ST_TO_ADDR
56240: LD_VAR 0 2
56244: PUSH
56245: FOR_TO
56246: IFFALSE 56358
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56248: LD_VAR 0 1
56252: PPUSH
56253: LD_VAR 0 2
56257: PUSH
56258: LD_VAR 0 4
56262: ARRAY
56263: PUSH
56264: LD_INT 1
56266: ARRAY
56267: PPUSH
56268: LD_VAR 0 2
56272: PUSH
56273: LD_VAR 0 4
56277: ARRAY
56278: PUSH
56279: LD_INT 2
56281: ARRAY
56282: PPUSH
56283: CALL_OW 297
56287: PUSH
56288: LD_VAR 0 5
56292: LESS
56293: IFFALSE 56356
// begin hex := hexes [ i ] ;
56295: LD_ADDR_VAR 0 7
56299: PUSH
56300: LD_VAR 0 2
56304: PUSH
56305: LD_VAR 0 4
56309: ARRAY
56310: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56311: LD_ADDR_VAR 0 5
56315: PUSH
56316: LD_VAR 0 1
56320: PPUSH
56321: LD_VAR 0 2
56325: PUSH
56326: LD_VAR 0 4
56330: ARRAY
56331: PUSH
56332: LD_INT 1
56334: ARRAY
56335: PPUSH
56336: LD_VAR 0 2
56340: PUSH
56341: LD_VAR 0 4
56345: ARRAY
56346: PUSH
56347: LD_INT 2
56349: ARRAY
56350: PPUSH
56351: CALL_OW 297
56355: ST_TO_ADDR
// end ; end ;
56356: GO 56245
56358: POP
56359: POP
// result := hex ;
56360: LD_ADDR_VAR 0 3
56364: PUSH
56365: LD_VAR 0 7
56369: ST_TO_ADDR
// end ;
56370: LD_VAR 0 3
56374: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56375: LD_INT 0
56377: PPUSH
56378: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56379: LD_VAR 0 1
56383: NOT
56384: PUSH
56385: LD_VAR 0 1
56389: PUSH
56390: LD_INT 21
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 23
56402: PUSH
56403: LD_INT 2
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PPUSH
56414: CALL_OW 69
56418: IN
56419: NOT
56420: OR
56421: IFFALSE 56425
// exit ;
56423: GO 56472
// for i = 1 to 3 do
56425: LD_ADDR_VAR 0 3
56429: PUSH
56430: DOUBLE
56431: LD_INT 1
56433: DEC
56434: ST_TO_ADDR
56435: LD_INT 3
56437: PUSH
56438: FOR_TO
56439: IFFALSE 56470
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56441: LD_VAR 0 1
56445: PPUSH
56446: CALL_OW 250
56450: PPUSH
56451: LD_VAR 0 1
56455: PPUSH
56456: CALL_OW 251
56460: PPUSH
56461: LD_INT 1
56463: PPUSH
56464: CALL_OW 453
56468: GO 56438
56470: POP
56471: POP
// end ;
56472: LD_VAR 0 2
56476: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56477: LD_INT 0
56479: PPUSH
56480: PPUSH
56481: PPUSH
56482: PPUSH
56483: PPUSH
56484: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56485: LD_VAR 0 1
56489: NOT
56490: PUSH
56491: LD_VAR 0 2
56495: NOT
56496: OR
56497: PUSH
56498: LD_VAR 0 1
56502: PPUSH
56503: CALL_OW 314
56507: OR
56508: IFFALSE 56512
// exit ;
56510: GO 56953
// x := GetX ( enemy_unit ) ;
56512: LD_ADDR_VAR 0 7
56516: PUSH
56517: LD_VAR 0 2
56521: PPUSH
56522: CALL_OW 250
56526: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56527: LD_ADDR_VAR 0 8
56531: PUSH
56532: LD_VAR 0 2
56536: PPUSH
56537: CALL_OW 251
56541: ST_TO_ADDR
// if not x or not y then
56542: LD_VAR 0 7
56546: NOT
56547: PUSH
56548: LD_VAR 0 8
56552: NOT
56553: OR
56554: IFFALSE 56558
// exit ;
56556: GO 56953
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56558: LD_ADDR_VAR 0 6
56562: PUSH
56563: LD_VAR 0 7
56567: PPUSH
56568: LD_INT 0
56570: PPUSH
56571: LD_INT 4
56573: PPUSH
56574: CALL_OW 272
56578: PUSH
56579: LD_VAR 0 8
56583: PPUSH
56584: LD_INT 0
56586: PPUSH
56587: LD_INT 4
56589: PPUSH
56590: CALL_OW 273
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_VAR 0 7
56603: PPUSH
56604: LD_INT 1
56606: PPUSH
56607: LD_INT 4
56609: PPUSH
56610: CALL_OW 272
56614: PUSH
56615: LD_VAR 0 8
56619: PPUSH
56620: LD_INT 1
56622: PPUSH
56623: LD_INT 4
56625: PPUSH
56626: CALL_OW 273
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_VAR 0 7
56639: PPUSH
56640: LD_INT 2
56642: PPUSH
56643: LD_INT 4
56645: PPUSH
56646: CALL_OW 272
56650: PUSH
56651: LD_VAR 0 8
56655: PPUSH
56656: LD_INT 2
56658: PPUSH
56659: LD_INT 4
56661: PPUSH
56662: CALL_OW 273
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_VAR 0 7
56675: PPUSH
56676: LD_INT 3
56678: PPUSH
56679: LD_INT 4
56681: PPUSH
56682: CALL_OW 272
56686: PUSH
56687: LD_VAR 0 8
56691: PPUSH
56692: LD_INT 3
56694: PPUSH
56695: LD_INT 4
56697: PPUSH
56698: CALL_OW 273
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_VAR 0 7
56711: PPUSH
56712: LD_INT 4
56714: PPUSH
56715: LD_INT 4
56717: PPUSH
56718: CALL_OW 272
56722: PUSH
56723: LD_VAR 0 8
56727: PPUSH
56728: LD_INT 4
56730: PPUSH
56731: LD_INT 4
56733: PPUSH
56734: CALL_OW 273
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_VAR 0 7
56747: PPUSH
56748: LD_INT 5
56750: PPUSH
56751: LD_INT 4
56753: PPUSH
56754: CALL_OW 272
56758: PUSH
56759: LD_VAR 0 8
56763: PPUSH
56764: LD_INT 5
56766: PPUSH
56767: LD_INT 4
56769: PPUSH
56770: CALL_OW 273
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: ST_TO_ADDR
// for i = tmp downto 1 do
56787: LD_ADDR_VAR 0 4
56791: PUSH
56792: DOUBLE
56793: LD_VAR 0 6
56797: INC
56798: ST_TO_ADDR
56799: LD_INT 1
56801: PUSH
56802: FOR_DOWNTO
56803: IFFALSE 56904
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56805: LD_VAR 0 6
56809: PUSH
56810: LD_VAR 0 4
56814: ARRAY
56815: PUSH
56816: LD_INT 1
56818: ARRAY
56819: PPUSH
56820: LD_VAR 0 6
56824: PUSH
56825: LD_VAR 0 4
56829: ARRAY
56830: PUSH
56831: LD_INT 2
56833: ARRAY
56834: PPUSH
56835: CALL_OW 488
56839: NOT
56840: PUSH
56841: LD_VAR 0 6
56845: PUSH
56846: LD_VAR 0 4
56850: ARRAY
56851: PUSH
56852: LD_INT 1
56854: ARRAY
56855: PPUSH
56856: LD_VAR 0 6
56860: PUSH
56861: LD_VAR 0 4
56865: ARRAY
56866: PUSH
56867: LD_INT 2
56869: ARRAY
56870: PPUSH
56871: CALL_OW 428
56875: PUSH
56876: LD_INT 0
56878: NONEQUAL
56879: OR
56880: IFFALSE 56902
// tmp := Delete ( tmp , i ) ;
56882: LD_ADDR_VAR 0 6
56886: PUSH
56887: LD_VAR 0 6
56891: PPUSH
56892: LD_VAR 0 4
56896: PPUSH
56897: CALL_OW 3
56901: ST_TO_ADDR
56902: GO 56802
56904: POP
56905: POP
// j := GetClosestHex ( unit , tmp ) ;
56906: LD_ADDR_VAR 0 5
56910: PUSH
56911: LD_VAR 0 1
56915: PPUSH
56916: LD_VAR 0 6
56920: PPUSH
56921: CALL 56206 0 2
56925: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56926: LD_VAR 0 1
56930: PPUSH
56931: LD_VAR 0 5
56935: PUSH
56936: LD_INT 1
56938: ARRAY
56939: PPUSH
56940: LD_VAR 0 5
56944: PUSH
56945: LD_INT 2
56947: ARRAY
56948: PPUSH
56949: CALL_OW 111
// end ;
56953: LD_VAR 0 3
56957: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56958: LD_INT 0
56960: PPUSH
56961: PPUSH
56962: PPUSH
// uc_side = 0 ;
56963: LD_ADDR_OWVAR 20
56967: PUSH
56968: LD_INT 0
56970: ST_TO_ADDR
// uc_nation = 0 ;
56971: LD_ADDR_OWVAR 21
56975: PUSH
56976: LD_INT 0
56978: ST_TO_ADDR
// InitHc_All ( ) ;
56979: CALL_OW 584
// InitVc ;
56983: CALL_OW 20
// if mastodonts then
56987: LD_VAR 0 6
56991: IFFALSE 57058
// for i = 1 to mastodonts do
56993: LD_ADDR_VAR 0 11
56997: PUSH
56998: DOUBLE
56999: LD_INT 1
57001: DEC
57002: ST_TO_ADDR
57003: LD_VAR 0 6
57007: PUSH
57008: FOR_TO
57009: IFFALSE 57056
// begin vc_chassis := 31 ;
57011: LD_ADDR_OWVAR 37
57015: PUSH
57016: LD_INT 31
57018: ST_TO_ADDR
// vc_control := control_rider ;
57019: LD_ADDR_OWVAR 38
57023: PUSH
57024: LD_INT 4
57026: ST_TO_ADDR
// animal := CreateVehicle ;
57027: LD_ADDR_VAR 0 12
57031: PUSH
57032: CALL_OW 45
57036: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57037: LD_VAR 0 12
57041: PPUSH
57042: LD_VAR 0 8
57046: PPUSH
57047: LD_INT 0
57049: PPUSH
57050: CALL 59246 0 3
// end ;
57054: GO 57008
57056: POP
57057: POP
// if horses then
57058: LD_VAR 0 5
57062: IFFALSE 57129
// for i = 1 to horses do
57064: LD_ADDR_VAR 0 11
57068: PUSH
57069: DOUBLE
57070: LD_INT 1
57072: DEC
57073: ST_TO_ADDR
57074: LD_VAR 0 5
57078: PUSH
57079: FOR_TO
57080: IFFALSE 57127
// begin hc_class := 21 ;
57082: LD_ADDR_OWVAR 28
57086: PUSH
57087: LD_INT 21
57089: ST_TO_ADDR
// hc_gallery :=  ;
57090: LD_ADDR_OWVAR 33
57094: PUSH
57095: LD_STRING 
57097: ST_TO_ADDR
// animal := CreateHuman ;
57098: LD_ADDR_VAR 0 12
57102: PUSH
57103: CALL_OW 44
57107: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57108: LD_VAR 0 12
57112: PPUSH
57113: LD_VAR 0 8
57117: PPUSH
57118: LD_INT 0
57120: PPUSH
57121: CALL 59246 0 3
// end ;
57125: GO 57079
57127: POP
57128: POP
// if birds then
57129: LD_VAR 0 1
57133: IFFALSE 57200
// for i = 1 to birds do
57135: LD_ADDR_VAR 0 11
57139: PUSH
57140: DOUBLE
57141: LD_INT 1
57143: DEC
57144: ST_TO_ADDR
57145: LD_VAR 0 1
57149: PUSH
57150: FOR_TO
57151: IFFALSE 57198
// begin hc_class = 18 ;
57153: LD_ADDR_OWVAR 28
57157: PUSH
57158: LD_INT 18
57160: ST_TO_ADDR
// hc_gallery =  ;
57161: LD_ADDR_OWVAR 33
57165: PUSH
57166: LD_STRING 
57168: ST_TO_ADDR
// animal := CreateHuman ;
57169: LD_ADDR_VAR 0 12
57173: PUSH
57174: CALL_OW 44
57178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57179: LD_VAR 0 12
57183: PPUSH
57184: LD_VAR 0 8
57188: PPUSH
57189: LD_INT 0
57191: PPUSH
57192: CALL 59246 0 3
// end ;
57196: GO 57150
57198: POP
57199: POP
// if tigers then
57200: LD_VAR 0 2
57204: IFFALSE 57288
// for i = 1 to tigers do
57206: LD_ADDR_VAR 0 11
57210: PUSH
57211: DOUBLE
57212: LD_INT 1
57214: DEC
57215: ST_TO_ADDR
57216: LD_VAR 0 2
57220: PUSH
57221: FOR_TO
57222: IFFALSE 57286
// begin hc_class = class_tiger ;
57224: LD_ADDR_OWVAR 28
57228: PUSH
57229: LD_INT 14
57231: ST_TO_ADDR
// hc_gallery =  ;
57232: LD_ADDR_OWVAR 33
57236: PUSH
57237: LD_STRING 
57239: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57240: LD_ADDR_OWVAR 35
57244: PUSH
57245: LD_INT 7
57247: NEG
57248: PPUSH
57249: LD_INT 7
57251: PPUSH
57252: CALL_OW 12
57256: ST_TO_ADDR
// animal := CreateHuman ;
57257: LD_ADDR_VAR 0 12
57261: PUSH
57262: CALL_OW 44
57266: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57267: LD_VAR 0 12
57271: PPUSH
57272: LD_VAR 0 8
57276: PPUSH
57277: LD_INT 0
57279: PPUSH
57280: CALL 59246 0 3
// end ;
57284: GO 57221
57286: POP
57287: POP
// if apemans then
57288: LD_VAR 0 3
57292: IFFALSE 57415
// for i = 1 to apemans do
57294: LD_ADDR_VAR 0 11
57298: PUSH
57299: DOUBLE
57300: LD_INT 1
57302: DEC
57303: ST_TO_ADDR
57304: LD_VAR 0 3
57308: PUSH
57309: FOR_TO
57310: IFFALSE 57413
// begin hc_class = class_apeman ;
57312: LD_ADDR_OWVAR 28
57316: PUSH
57317: LD_INT 12
57319: ST_TO_ADDR
// hc_gallery =  ;
57320: LD_ADDR_OWVAR 33
57324: PUSH
57325: LD_STRING 
57327: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
57328: LD_ADDR_OWVAR 35
57332: PUSH
57333: LD_INT 5
57335: NEG
57336: PPUSH
57337: LD_INT 5
57339: PPUSH
57340: CALL_OW 12
57344: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57345: LD_ADDR_OWVAR 31
57349: PUSH
57350: LD_INT 1
57352: PPUSH
57353: LD_INT 3
57355: PPUSH
57356: CALL_OW 12
57360: PUSH
57361: LD_INT 1
57363: PPUSH
57364: LD_INT 3
57366: PPUSH
57367: CALL_OW 12
57371: PUSH
57372: LD_INT 0
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: ST_TO_ADDR
// animal := CreateHuman ;
57384: LD_ADDR_VAR 0 12
57388: PUSH
57389: CALL_OW 44
57393: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57394: LD_VAR 0 12
57398: PPUSH
57399: LD_VAR 0 8
57403: PPUSH
57404: LD_INT 0
57406: PPUSH
57407: CALL 59246 0 3
// end ;
57411: GO 57309
57413: POP
57414: POP
// if enchidnas then
57415: LD_VAR 0 4
57419: IFFALSE 57486
// for i = 1 to enchidnas do
57421: LD_ADDR_VAR 0 11
57425: PUSH
57426: DOUBLE
57427: LD_INT 1
57429: DEC
57430: ST_TO_ADDR
57431: LD_VAR 0 4
57435: PUSH
57436: FOR_TO
57437: IFFALSE 57484
// begin hc_class = 13 ;
57439: LD_ADDR_OWVAR 28
57443: PUSH
57444: LD_INT 13
57446: ST_TO_ADDR
// hc_gallery =  ;
57447: LD_ADDR_OWVAR 33
57451: PUSH
57452: LD_STRING 
57454: ST_TO_ADDR
// animal := CreateHuman ;
57455: LD_ADDR_VAR 0 12
57459: PUSH
57460: CALL_OW 44
57464: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57465: LD_VAR 0 12
57469: PPUSH
57470: LD_VAR 0 8
57474: PPUSH
57475: LD_INT 0
57477: PPUSH
57478: CALL 59246 0 3
// end ;
57482: GO 57436
57484: POP
57485: POP
// if fishes then
57486: LD_VAR 0 7
57490: IFFALSE 57557
// for i = 1 to fishes do
57492: LD_ADDR_VAR 0 11
57496: PUSH
57497: DOUBLE
57498: LD_INT 1
57500: DEC
57501: ST_TO_ADDR
57502: LD_VAR 0 7
57506: PUSH
57507: FOR_TO
57508: IFFALSE 57555
// begin hc_class = 20 ;
57510: LD_ADDR_OWVAR 28
57514: PUSH
57515: LD_INT 20
57517: ST_TO_ADDR
// hc_gallery =  ;
57518: LD_ADDR_OWVAR 33
57522: PUSH
57523: LD_STRING 
57525: ST_TO_ADDR
// animal := CreateHuman ;
57526: LD_ADDR_VAR 0 12
57530: PUSH
57531: CALL_OW 44
57535: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57536: LD_VAR 0 12
57540: PPUSH
57541: LD_VAR 0 9
57545: PPUSH
57546: LD_INT 0
57548: PPUSH
57549: CALL 59246 0 3
// end ;
57553: GO 57507
57555: POP
57556: POP
// end ;
57557: LD_VAR 0 10
57561: RET
// export function WantHeal ( sci , unit ) ; begin
57562: LD_INT 0
57564: PPUSH
// if GetTaskList ( sci ) > 0 then
57565: LD_VAR 0 1
57569: PPUSH
57570: CALL_OW 437
57574: PUSH
57575: LD_INT 0
57577: GREATER
57578: IFFALSE 57648
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57580: LD_VAR 0 1
57584: PPUSH
57585: CALL_OW 437
57589: PUSH
57590: LD_INT 1
57592: ARRAY
57593: PUSH
57594: LD_INT 1
57596: ARRAY
57597: PUSH
57598: LD_STRING l
57600: EQUAL
57601: PUSH
57602: LD_VAR 0 1
57606: PPUSH
57607: CALL_OW 437
57611: PUSH
57612: LD_INT 1
57614: ARRAY
57615: PUSH
57616: LD_INT 4
57618: ARRAY
57619: PUSH
57620: LD_VAR 0 2
57624: EQUAL
57625: AND
57626: IFFALSE 57638
// result := true else
57628: LD_ADDR_VAR 0 3
57632: PUSH
57633: LD_INT 1
57635: ST_TO_ADDR
57636: GO 57646
// result := false ;
57638: LD_ADDR_VAR 0 3
57642: PUSH
57643: LD_INT 0
57645: ST_TO_ADDR
// end else
57646: GO 57656
// result := false ;
57648: LD_ADDR_VAR 0 3
57652: PUSH
57653: LD_INT 0
57655: ST_TO_ADDR
// end ;
57656: LD_VAR 0 3
57660: RET
// export function HealTarget ( sci ) ; begin
57661: LD_INT 0
57663: PPUSH
// if not sci then
57664: LD_VAR 0 1
57668: NOT
57669: IFFALSE 57673
// exit ;
57671: GO 57738
// result := 0 ;
57673: LD_ADDR_VAR 0 2
57677: PUSH
57678: LD_INT 0
57680: ST_TO_ADDR
// if GetTaskList ( sci ) then
57681: LD_VAR 0 1
57685: PPUSH
57686: CALL_OW 437
57690: IFFALSE 57738
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57692: LD_VAR 0 1
57696: PPUSH
57697: CALL_OW 437
57701: PUSH
57702: LD_INT 1
57704: ARRAY
57705: PUSH
57706: LD_INT 1
57708: ARRAY
57709: PUSH
57710: LD_STRING l
57712: EQUAL
57713: IFFALSE 57738
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57715: LD_ADDR_VAR 0 2
57719: PUSH
57720: LD_VAR 0 1
57724: PPUSH
57725: CALL_OW 437
57729: PUSH
57730: LD_INT 1
57732: ARRAY
57733: PUSH
57734: LD_INT 4
57736: ARRAY
57737: ST_TO_ADDR
// end ;
57738: LD_VAR 0 2
57742: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57743: LD_INT 0
57745: PPUSH
57746: PPUSH
57747: PPUSH
57748: PPUSH
// if not base_units then
57749: LD_VAR 0 1
57753: NOT
57754: IFFALSE 57758
// exit ;
57756: GO 57845
// result := false ;
57758: LD_ADDR_VAR 0 2
57762: PUSH
57763: LD_INT 0
57765: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57766: LD_ADDR_VAR 0 5
57770: PUSH
57771: LD_VAR 0 1
57775: PPUSH
57776: LD_INT 21
57778: PUSH
57779: LD_INT 3
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PPUSH
57786: CALL_OW 72
57790: ST_TO_ADDR
// if not tmp then
57791: LD_VAR 0 5
57795: NOT
57796: IFFALSE 57800
// exit ;
57798: GO 57845
// for i in tmp do
57800: LD_ADDR_VAR 0 3
57804: PUSH
57805: LD_VAR 0 5
57809: PUSH
57810: FOR_IN
57811: IFFALSE 57843
// begin result := EnemyInRange ( i , 22 ) ;
57813: LD_ADDR_VAR 0 2
57817: PUSH
57818: LD_VAR 0 3
57822: PPUSH
57823: LD_INT 22
57825: PPUSH
57826: CALL 56081 0 2
57830: ST_TO_ADDR
// if result then
57831: LD_VAR 0 2
57835: IFFALSE 57841
// exit ;
57837: POP
57838: POP
57839: GO 57845
// end ;
57841: GO 57810
57843: POP
57844: POP
// end ;
57845: LD_VAR 0 2
57849: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57850: LD_INT 0
57852: PPUSH
57853: PPUSH
// if not units then
57854: LD_VAR 0 1
57858: NOT
57859: IFFALSE 57863
// exit ;
57861: GO 57933
// result := [ ] ;
57863: LD_ADDR_VAR 0 3
57867: PUSH
57868: EMPTY
57869: ST_TO_ADDR
// for i in units do
57870: LD_ADDR_VAR 0 4
57874: PUSH
57875: LD_VAR 0 1
57879: PUSH
57880: FOR_IN
57881: IFFALSE 57931
// if GetTag ( i ) = tag then
57883: LD_VAR 0 4
57887: PPUSH
57888: CALL_OW 110
57892: PUSH
57893: LD_VAR 0 2
57897: EQUAL
57898: IFFALSE 57929
// result := Insert ( result , result + 1 , i ) ;
57900: LD_ADDR_VAR 0 3
57904: PUSH
57905: LD_VAR 0 3
57909: PPUSH
57910: LD_VAR 0 3
57914: PUSH
57915: LD_INT 1
57917: PLUS
57918: PPUSH
57919: LD_VAR 0 4
57923: PPUSH
57924: CALL_OW 2
57928: ST_TO_ADDR
57929: GO 57880
57931: POP
57932: POP
// end ;
57933: LD_VAR 0 3
57937: RET
// export function IsDriver ( un ) ; begin
57938: LD_INT 0
57940: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57941: LD_ADDR_VAR 0 2
57945: PUSH
57946: LD_VAR 0 1
57950: PUSH
57951: LD_INT 55
57953: PUSH
57954: EMPTY
57955: LIST
57956: PPUSH
57957: CALL_OW 69
57961: IN
57962: ST_TO_ADDR
// end ;
57963: LD_VAR 0 2
57967: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57968: LD_INT 0
57970: PPUSH
57971: PPUSH
// list := [ ] ;
57972: LD_ADDR_VAR 0 5
57976: PUSH
57977: EMPTY
57978: ST_TO_ADDR
// case d of 0 :
57979: LD_VAR 0 3
57983: PUSH
57984: LD_INT 0
57986: DOUBLE
57987: EQUAL
57988: IFTRUE 57992
57990: GO 58125
57992: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57993: LD_ADDR_VAR 0 5
57997: PUSH
57998: LD_VAR 0 1
58002: PUSH
58003: LD_INT 4
58005: MINUS
58006: PUSH
58007: LD_VAR 0 2
58011: PUSH
58012: LD_INT 4
58014: MINUS
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: LIST
58023: PUSH
58024: LD_VAR 0 1
58028: PUSH
58029: LD_INT 3
58031: MINUS
58032: PUSH
58033: LD_VAR 0 2
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: LIST
58045: PUSH
58046: LD_VAR 0 1
58050: PUSH
58051: LD_INT 4
58053: PLUS
58054: PUSH
58055: LD_VAR 0 2
58059: PUSH
58060: LD_INT 4
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: LIST
58067: PUSH
58068: LD_VAR 0 1
58072: PUSH
58073: LD_INT 3
58075: PLUS
58076: PUSH
58077: LD_VAR 0 2
58081: PUSH
58082: LD_INT 3
58084: PLUS
58085: PUSH
58086: LD_INT 5
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: LIST
58093: PUSH
58094: LD_VAR 0 1
58098: PUSH
58099: LD_VAR 0 2
58103: PUSH
58104: LD_INT 4
58106: PLUS
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: LIST
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: ST_TO_ADDR
// end ; 1 :
58123: GO 58823
58125: LD_INT 1
58127: DOUBLE
58128: EQUAL
58129: IFTRUE 58133
58131: GO 58266
58133: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58134: LD_ADDR_VAR 0 5
58138: PUSH
58139: LD_VAR 0 1
58143: PUSH
58144: LD_VAR 0 2
58148: PUSH
58149: LD_INT 4
58151: MINUS
58152: PUSH
58153: LD_INT 3
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: LIST
58160: PUSH
58161: LD_VAR 0 1
58165: PUSH
58166: LD_INT 3
58168: MINUS
58169: PUSH
58170: LD_VAR 0 2
58174: PUSH
58175: LD_INT 3
58177: MINUS
58178: PUSH
58179: LD_INT 2
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: LIST
58186: PUSH
58187: LD_VAR 0 1
58191: PUSH
58192: LD_INT 4
58194: MINUS
58195: PUSH
58196: LD_VAR 0 2
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: PUSH
58209: LD_VAR 0 1
58213: PUSH
58214: LD_VAR 0 2
58218: PUSH
58219: LD_INT 3
58221: PLUS
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: LIST
58230: PUSH
58231: LD_VAR 0 1
58235: PUSH
58236: LD_INT 4
58238: PLUS
58239: PUSH
58240: LD_VAR 0 2
58244: PUSH
58245: LD_INT 4
58247: PLUS
58248: PUSH
58249: LD_INT 5
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: LIST
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: ST_TO_ADDR
// end ; 2 :
58264: GO 58823
58266: LD_INT 2
58268: DOUBLE
58269: EQUAL
58270: IFTRUE 58274
58272: GO 58403
58274: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58275: LD_ADDR_VAR 0 5
58279: PUSH
58280: LD_VAR 0 1
58284: PUSH
58285: LD_VAR 0 2
58289: PUSH
58290: LD_INT 3
58292: MINUS
58293: PUSH
58294: LD_INT 3
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: LIST
58301: PUSH
58302: LD_VAR 0 1
58306: PUSH
58307: LD_INT 4
58309: PLUS
58310: PUSH
58311: LD_VAR 0 2
58315: PUSH
58316: LD_INT 4
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: LIST
58323: PUSH
58324: LD_VAR 0 1
58328: PUSH
58329: LD_VAR 0 2
58333: PUSH
58334: LD_INT 4
58336: PLUS
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: LIST
58345: PUSH
58346: LD_VAR 0 1
58350: PUSH
58351: LD_INT 3
58353: MINUS
58354: PUSH
58355: LD_VAR 0 2
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: LIST
58367: PUSH
58368: LD_VAR 0 1
58372: PUSH
58373: LD_INT 4
58375: MINUS
58376: PUSH
58377: LD_VAR 0 2
58381: PUSH
58382: LD_INT 4
58384: MINUS
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: LIST
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: ST_TO_ADDR
// end ; 3 :
58401: GO 58823
58403: LD_INT 3
58405: DOUBLE
58406: EQUAL
58407: IFTRUE 58411
58409: GO 58544
58411: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58412: LD_ADDR_VAR 0 5
58416: PUSH
58417: LD_VAR 0 1
58421: PUSH
58422: LD_INT 3
58424: PLUS
58425: PUSH
58426: LD_VAR 0 2
58430: PUSH
58431: LD_INT 4
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: LIST
58438: PUSH
58439: LD_VAR 0 1
58443: PUSH
58444: LD_INT 4
58446: PLUS
58447: PUSH
58448: LD_VAR 0 2
58452: PUSH
58453: LD_INT 4
58455: PLUS
58456: PUSH
58457: LD_INT 5
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: LIST
58464: PUSH
58465: LD_VAR 0 1
58469: PUSH
58470: LD_INT 4
58472: MINUS
58473: PUSH
58474: LD_VAR 0 2
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: LIST
58486: PUSH
58487: LD_VAR 0 1
58491: PUSH
58492: LD_VAR 0 2
58496: PUSH
58497: LD_INT 4
58499: MINUS
58500: PUSH
58501: LD_INT 3
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: LIST
58508: PUSH
58509: LD_VAR 0 1
58513: PUSH
58514: LD_INT 3
58516: MINUS
58517: PUSH
58518: LD_VAR 0 2
58522: PUSH
58523: LD_INT 3
58525: MINUS
58526: PUSH
58527: LD_INT 2
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: LIST
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: ST_TO_ADDR
// end ; 4 :
58542: GO 58823
58544: LD_INT 4
58546: DOUBLE
58547: EQUAL
58548: IFTRUE 58552
58550: GO 58685
58552: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58553: LD_ADDR_VAR 0 5
58557: PUSH
58558: LD_VAR 0 1
58562: PUSH
58563: LD_VAR 0 2
58567: PUSH
58568: LD_INT 4
58570: PLUS
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: LIST
58579: PUSH
58580: LD_VAR 0 1
58584: PUSH
58585: LD_INT 3
58587: PLUS
58588: PUSH
58589: LD_VAR 0 2
58593: PUSH
58594: LD_INT 3
58596: PLUS
58597: PUSH
58598: LD_INT 5
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: LIST
58605: PUSH
58606: LD_VAR 0 1
58610: PUSH
58611: LD_INT 4
58613: PLUS
58614: PUSH
58615: LD_VAR 0 2
58619: PUSH
58620: LD_INT 4
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: LIST
58627: PUSH
58628: LD_VAR 0 1
58632: PUSH
58633: LD_VAR 0 2
58637: PUSH
58638: LD_INT 3
58640: MINUS
58641: PUSH
58642: LD_INT 3
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: LIST
58649: PUSH
58650: LD_VAR 0 1
58654: PUSH
58655: LD_INT 4
58657: MINUS
58658: PUSH
58659: LD_VAR 0 2
58663: PUSH
58664: LD_INT 4
58666: MINUS
58667: PUSH
58668: LD_INT 2
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: LIST
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: ST_TO_ADDR
// end ; 5 :
58683: GO 58823
58685: LD_INT 5
58687: DOUBLE
58688: EQUAL
58689: IFTRUE 58693
58691: GO 58822
58693: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58694: LD_ADDR_VAR 0 5
58698: PUSH
58699: LD_VAR 0 1
58703: PUSH
58704: LD_INT 4
58706: MINUS
58707: PUSH
58708: LD_VAR 0 2
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: LIST
58720: PUSH
58721: LD_VAR 0 1
58725: PUSH
58726: LD_VAR 0 2
58730: PUSH
58731: LD_INT 4
58733: MINUS
58734: PUSH
58735: LD_INT 3
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: LIST
58742: PUSH
58743: LD_VAR 0 1
58747: PUSH
58748: LD_INT 4
58750: PLUS
58751: PUSH
58752: LD_VAR 0 2
58756: PUSH
58757: LD_INT 4
58759: PLUS
58760: PUSH
58761: LD_INT 5
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: LIST
58768: PUSH
58769: LD_VAR 0 1
58773: PUSH
58774: LD_INT 3
58776: PLUS
58777: PUSH
58778: LD_VAR 0 2
58782: PUSH
58783: LD_INT 4
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: LIST
58790: PUSH
58791: LD_VAR 0 1
58795: PUSH
58796: LD_VAR 0 2
58800: PUSH
58801: LD_INT 3
58803: PLUS
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: LIST
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: ST_TO_ADDR
// end ; end ;
58820: GO 58823
58822: POP
// result := list ;
58823: LD_ADDR_VAR 0 4
58827: PUSH
58828: LD_VAR 0 5
58832: ST_TO_ADDR
// end ;
58833: LD_VAR 0 4
58837: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58838: LD_INT 0
58840: PPUSH
58841: PPUSH
58842: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58843: LD_VAR 0 1
58847: NOT
58848: PUSH
58849: LD_VAR 0 2
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: LD_INT 4
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: IN
58872: NOT
58873: OR
58874: IFFALSE 58878
// exit ;
58876: GO 58970
// tmp := [ ] ;
58878: LD_ADDR_VAR 0 5
58882: PUSH
58883: EMPTY
58884: ST_TO_ADDR
// for i in units do
58885: LD_ADDR_VAR 0 4
58889: PUSH
58890: LD_VAR 0 1
58894: PUSH
58895: FOR_IN
58896: IFFALSE 58939
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
58898: LD_ADDR_VAR 0 5
58902: PUSH
58903: LD_VAR 0 5
58907: PPUSH
58908: LD_VAR 0 5
58912: PUSH
58913: LD_INT 1
58915: PLUS
58916: PPUSH
58917: LD_VAR 0 4
58921: PPUSH
58922: LD_VAR 0 2
58926: PPUSH
58927: CALL_OW 259
58931: PPUSH
58932: CALL_OW 2
58936: ST_TO_ADDR
58937: GO 58895
58939: POP
58940: POP
// if not tmp then
58941: LD_VAR 0 5
58945: NOT
58946: IFFALSE 58950
// exit ;
58948: GO 58970
// result := SortListByListDesc ( units , tmp ) ;
58950: LD_ADDR_VAR 0 3
58954: PUSH
58955: LD_VAR 0 1
58959: PPUSH
58960: LD_VAR 0 5
58964: PPUSH
58965: CALL_OW 77
58969: ST_TO_ADDR
// end ;
58970: LD_VAR 0 3
58974: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58975: LD_INT 0
58977: PPUSH
58978: PPUSH
58979: PPUSH
// result := false ;
58980: LD_ADDR_VAR 0 3
58984: PUSH
58985: LD_INT 0
58987: ST_TO_ADDR
// x := GetX ( building ) ;
58988: LD_ADDR_VAR 0 4
58992: PUSH
58993: LD_VAR 0 2
58997: PPUSH
58998: CALL_OW 250
59002: ST_TO_ADDR
// y := GetY ( building ) ;
59003: LD_ADDR_VAR 0 5
59007: PUSH
59008: LD_VAR 0 2
59012: PPUSH
59013: CALL_OW 251
59017: ST_TO_ADDR
// if not building or not x or not y then
59018: LD_VAR 0 2
59022: NOT
59023: PUSH
59024: LD_VAR 0 4
59028: NOT
59029: OR
59030: PUSH
59031: LD_VAR 0 5
59035: NOT
59036: OR
59037: IFFALSE 59041
// exit ;
59039: GO 59133
// if GetTaskList ( unit ) then
59041: LD_VAR 0 1
59045: PPUSH
59046: CALL_OW 437
59050: IFFALSE 59133
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59052: LD_STRING e
59054: PUSH
59055: LD_VAR 0 1
59059: PPUSH
59060: CALL_OW 437
59064: PUSH
59065: LD_INT 1
59067: ARRAY
59068: PUSH
59069: LD_INT 1
59071: ARRAY
59072: EQUAL
59073: PUSH
59074: LD_VAR 0 4
59078: PUSH
59079: LD_VAR 0 1
59083: PPUSH
59084: CALL_OW 437
59088: PUSH
59089: LD_INT 1
59091: ARRAY
59092: PUSH
59093: LD_INT 2
59095: ARRAY
59096: EQUAL
59097: AND
59098: PUSH
59099: LD_VAR 0 5
59103: PUSH
59104: LD_VAR 0 1
59108: PPUSH
59109: CALL_OW 437
59113: PUSH
59114: LD_INT 1
59116: ARRAY
59117: PUSH
59118: LD_INT 3
59120: ARRAY
59121: EQUAL
59122: AND
59123: IFFALSE 59133
// result := true end ;
59125: LD_ADDR_VAR 0 3
59129: PUSH
59130: LD_INT 1
59132: ST_TO_ADDR
// end ;
59133: LD_VAR 0 3
59137: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59138: LD_INT 0
59140: PPUSH
// result := false ;
59141: LD_ADDR_VAR 0 4
59145: PUSH
59146: LD_INT 0
59148: ST_TO_ADDR
// if GetTaskList ( unit ) then
59149: LD_VAR 0 1
59153: PPUSH
59154: CALL_OW 437
59158: IFFALSE 59241
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59160: LD_STRING M
59162: PUSH
59163: LD_VAR 0 1
59167: PPUSH
59168: CALL_OW 437
59172: PUSH
59173: LD_INT 1
59175: ARRAY
59176: PUSH
59177: LD_INT 1
59179: ARRAY
59180: EQUAL
59181: PUSH
59182: LD_VAR 0 2
59186: PUSH
59187: LD_VAR 0 1
59191: PPUSH
59192: CALL_OW 437
59196: PUSH
59197: LD_INT 1
59199: ARRAY
59200: PUSH
59201: LD_INT 2
59203: ARRAY
59204: EQUAL
59205: AND
59206: PUSH
59207: LD_VAR 0 3
59211: PUSH
59212: LD_VAR 0 1
59216: PPUSH
59217: CALL_OW 437
59221: PUSH
59222: LD_INT 1
59224: ARRAY
59225: PUSH
59226: LD_INT 3
59228: ARRAY
59229: EQUAL
59230: AND
59231: IFFALSE 59241
// result := true ;
59233: LD_ADDR_VAR 0 4
59237: PUSH
59238: LD_INT 1
59240: ST_TO_ADDR
// end ; end ;
59241: LD_VAR 0 4
59245: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59246: LD_INT 0
59248: PPUSH
59249: PPUSH
59250: PPUSH
59251: PPUSH
// if not unit or not area then
59252: LD_VAR 0 1
59256: NOT
59257: PUSH
59258: LD_VAR 0 2
59262: NOT
59263: OR
59264: IFFALSE 59268
// exit ;
59266: GO 59432
// tmp := AreaToList ( area , i ) ;
59268: LD_ADDR_VAR 0 6
59272: PUSH
59273: LD_VAR 0 2
59277: PPUSH
59278: LD_VAR 0 5
59282: PPUSH
59283: CALL_OW 517
59287: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59288: LD_ADDR_VAR 0 5
59292: PUSH
59293: DOUBLE
59294: LD_INT 1
59296: DEC
59297: ST_TO_ADDR
59298: LD_VAR 0 6
59302: PUSH
59303: LD_INT 1
59305: ARRAY
59306: PUSH
59307: FOR_TO
59308: IFFALSE 59430
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59310: LD_ADDR_VAR 0 7
59314: PUSH
59315: LD_VAR 0 6
59319: PUSH
59320: LD_INT 1
59322: ARRAY
59323: PUSH
59324: LD_VAR 0 5
59328: ARRAY
59329: PUSH
59330: LD_VAR 0 6
59334: PUSH
59335: LD_INT 2
59337: ARRAY
59338: PUSH
59339: LD_VAR 0 5
59343: ARRAY
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59349: LD_VAR 0 7
59353: PUSH
59354: LD_INT 1
59356: ARRAY
59357: PPUSH
59358: LD_VAR 0 7
59362: PUSH
59363: LD_INT 2
59365: ARRAY
59366: PPUSH
59367: CALL_OW 428
59371: PUSH
59372: LD_INT 0
59374: EQUAL
59375: IFFALSE 59428
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59377: LD_VAR 0 1
59381: PPUSH
59382: LD_VAR 0 7
59386: PUSH
59387: LD_INT 1
59389: ARRAY
59390: PPUSH
59391: LD_VAR 0 7
59395: PUSH
59396: LD_INT 2
59398: ARRAY
59399: PPUSH
59400: LD_VAR 0 3
59404: PPUSH
59405: CALL_OW 48
// result := IsPlaced ( unit ) ;
59409: LD_ADDR_VAR 0 4
59413: PUSH
59414: LD_VAR 0 1
59418: PPUSH
59419: CALL_OW 305
59423: ST_TO_ADDR
// exit ;
59424: POP
59425: POP
59426: GO 59432
// end ; end ;
59428: GO 59307
59430: POP
59431: POP
// end ;
59432: LD_VAR 0 4
59436: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59437: LD_INT 0
59439: PPUSH
59440: PPUSH
59441: PPUSH
// if not side or side > 8 then
59442: LD_VAR 0 1
59446: NOT
59447: PUSH
59448: LD_VAR 0 1
59452: PUSH
59453: LD_INT 8
59455: GREATER
59456: OR
59457: IFFALSE 59461
// exit ;
59459: GO 59648
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59461: LD_ADDR_VAR 0 4
59465: PUSH
59466: LD_INT 22
59468: PUSH
59469: LD_VAR 0 1
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 21
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PPUSH
59492: CALL_OW 69
59496: ST_TO_ADDR
// if not tmp then
59497: LD_VAR 0 4
59501: NOT
59502: IFFALSE 59506
// exit ;
59504: GO 59648
// enable_addtolog := true ;
59506: LD_ADDR_OWVAR 81
59510: PUSH
59511: LD_INT 1
59513: ST_TO_ADDR
// AddToLog ( [ ) ;
59514: LD_STRING [
59516: PPUSH
59517: CALL_OW 561
// for i in tmp do
59521: LD_ADDR_VAR 0 3
59525: PUSH
59526: LD_VAR 0 4
59530: PUSH
59531: FOR_IN
59532: IFFALSE 59639
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59534: LD_STRING [
59536: PUSH
59537: LD_VAR 0 3
59541: PPUSH
59542: CALL_OW 266
59546: STR
59547: PUSH
59548: LD_STRING , 
59550: STR
59551: PUSH
59552: LD_VAR 0 3
59556: PPUSH
59557: CALL_OW 250
59561: STR
59562: PUSH
59563: LD_STRING , 
59565: STR
59566: PUSH
59567: LD_VAR 0 3
59571: PPUSH
59572: CALL_OW 251
59576: STR
59577: PUSH
59578: LD_STRING , 
59580: STR
59581: PUSH
59582: LD_VAR 0 3
59586: PPUSH
59587: CALL_OW 254
59591: STR
59592: PUSH
59593: LD_STRING , 
59595: STR
59596: PUSH
59597: LD_VAR 0 3
59601: PPUSH
59602: LD_INT 1
59604: PPUSH
59605: CALL_OW 268
59609: STR
59610: PUSH
59611: LD_STRING , 
59613: STR
59614: PUSH
59615: LD_VAR 0 3
59619: PPUSH
59620: LD_INT 2
59622: PPUSH
59623: CALL_OW 268
59627: STR
59628: PUSH
59629: LD_STRING ],
59631: STR
59632: PPUSH
59633: CALL_OW 561
// end ;
59637: GO 59531
59639: POP
59640: POP
// AddToLog ( ]; ) ;
59641: LD_STRING ];
59643: PPUSH
59644: CALL_OW 561
// end ;
59648: LD_VAR 0 2
59652: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59653: LD_INT 0
59655: PPUSH
59656: PPUSH
59657: PPUSH
59658: PPUSH
59659: PPUSH
// if not area or not rate or not max then
59660: LD_VAR 0 1
59664: NOT
59665: PUSH
59666: LD_VAR 0 2
59670: NOT
59671: OR
59672: PUSH
59673: LD_VAR 0 4
59677: NOT
59678: OR
59679: IFFALSE 59683
// exit ;
59681: GO 59875
// while 1 do
59683: LD_INT 1
59685: IFFALSE 59875
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59687: LD_ADDR_VAR 0 9
59691: PUSH
59692: LD_VAR 0 1
59696: PPUSH
59697: LD_INT 1
59699: PPUSH
59700: CALL_OW 287
59704: PUSH
59705: LD_INT 10
59707: MUL
59708: ST_TO_ADDR
// r := rate / 10 ;
59709: LD_ADDR_VAR 0 7
59713: PUSH
59714: LD_VAR 0 2
59718: PUSH
59719: LD_INT 10
59721: DIVREAL
59722: ST_TO_ADDR
// time := 1 1$00 ;
59723: LD_ADDR_VAR 0 8
59727: PUSH
59728: LD_INT 2100
59730: ST_TO_ADDR
// if amount < min then
59731: LD_VAR 0 9
59735: PUSH
59736: LD_VAR 0 3
59740: LESS
59741: IFFALSE 59759
// r := r * 2 else
59743: LD_ADDR_VAR 0 7
59747: PUSH
59748: LD_VAR 0 7
59752: PUSH
59753: LD_INT 2
59755: MUL
59756: ST_TO_ADDR
59757: GO 59785
// if amount > max then
59759: LD_VAR 0 9
59763: PUSH
59764: LD_VAR 0 4
59768: GREATER
59769: IFFALSE 59785
// r := r / 2 ;
59771: LD_ADDR_VAR 0 7
59775: PUSH
59776: LD_VAR 0 7
59780: PUSH
59781: LD_INT 2
59783: DIVREAL
59784: ST_TO_ADDR
// time := time / r ;
59785: LD_ADDR_VAR 0 8
59789: PUSH
59790: LD_VAR 0 8
59794: PUSH
59795: LD_VAR 0 7
59799: DIVREAL
59800: ST_TO_ADDR
// if time < 0 then
59801: LD_VAR 0 8
59805: PUSH
59806: LD_INT 0
59808: LESS
59809: IFFALSE 59826
// time := time * - 1 ;
59811: LD_ADDR_VAR 0 8
59815: PUSH
59816: LD_VAR 0 8
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: MUL
59825: ST_TO_ADDR
// wait ( time ) ;
59826: LD_VAR 0 8
59830: PPUSH
59831: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59835: LD_INT 35
59837: PPUSH
59838: LD_INT 875
59840: PPUSH
59841: CALL_OW 12
59845: PPUSH
59846: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59850: LD_INT 1
59852: PPUSH
59853: LD_INT 5
59855: PPUSH
59856: CALL_OW 12
59860: PPUSH
59861: LD_VAR 0 1
59865: PPUSH
59866: LD_INT 1
59868: PPUSH
59869: CALL_OW 55
// end ;
59873: GO 59683
// end ;
59875: LD_VAR 0 5
59879: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59880: LD_INT 0
59882: PPUSH
59883: PPUSH
59884: PPUSH
59885: PPUSH
59886: PPUSH
59887: PPUSH
59888: PPUSH
59889: PPUSH
// if not turrets or not factories then
59890: LD_VAR 0 1
59894: NOT
59895: PUSH
59896: LD_VAR 0 2
59900: NOT
59901: OR
59902: IFFALSE 59906
// exit ;
59904: GO 60213
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59906: LD_ADDR_VAR 0 10
59910: PUSH
59911: LD_INT 5
59913: PUSH
59914: LD_INT 6
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: PUSH
59924: LD_INT 4
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 3
59933: PUSH
59934: LD_INT 5
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 24
59948: PUSH
59949: LD_INT 25
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 23
59958: PUSH
59959: LD_INT 27
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 42
59972: PUSH
59973: LD_INT 43
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 44
59982: PUSH
59983: LD_INT 46
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 45
59992: PUSH
59993: LD_INT 47
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: LIST
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: LIST
60009: ST_TO_ADDR
// result := [ ] ;
60010: LD_ADDR_VAR 0 3
60014: PUSH
60015: EMPTY
60016: ST_TO_ADDR
// for i in turrets do
60017: LD_ADDR_VAR 0 4
60021: PUSH
60022: LD_VAR 0 1
60026: PUSH
60027: FOR_IN
60028: IFFALSE 60211
// begin nat := GetNation ( i ) ;
60030: LD_ADDR_VAR 0 7
60034: PUSH
60035: LD_VAR 0 4
60039: PPUSH
60040: CALL_OW 248
60044: ST_TO_ADDR
// weapon := 0 ;
60045: LD_ADDR_VAR 0 8
60049: PUSH
60050: LD_INT 0
60052: ST_TO_ADDR
// if not nat then
60053: LD_VAR 0 7
60057: NOT
60058: IFFALSE 60062
// continue ;
60060: GO 60027
// for j in list [ nat ] do
60062: LD_ADDR_VAR 0 5
60066: PUSH
60067: LD_VAR 0 10
60071: PUSH
60072: LD_VAR 0 7
60076: ARRAY
60077: PUSH
60078: FOR_IN
60079: IFFALSE 60120
// if GetBWeapon ( i ) = j [ 1 ] then
60081: LD_VAR 0 4
60085: PPUSH
60086: CALL_OW 269
60090: PUSH
60091: LD_VAR 0 5
60095: PUSH
60096: LD_INT 1
60098: ARRAY
60099: EQUAL
60100: IFFALSE 60118
// begin weapon := j [ 2 ] ;
60102: LD_ADDR_VAR 0 8
60106: PUSH
60107: LD_VAR 0 5
60111: PUSH
60112: LD_INT 2
60114: ARRAY
60115: ST_TO_ADDR
// break ;
60116: GO 60120
// end ;
60118: GO 60078
60120: POP
60121: POP
// if not weapon then
60122: LD_VAR 0 8
60126: NOT
60127: IFFALSE 60131
// continue ;
60129: GO 60027
// for k in factories do
60131: LD_ADDR_VAR 0 6
60135: PUSH
60136: LD_VAR 0 2
60140: PUSH
60141: FOR_IN
60142: IFFALSE 60207
// begin weapons := AvailableWeaponList ( k ) ;
60144: LD_ADDR_VAR 0 9
60148: PUSH
60149: LD_VAR 0 6
60153: PPUSH
60154: CALL_OW 478
60158: ST_TO_ADDR
// if not weapons then
60159: LD_VAR 0 9
60163: NOT
60164: IFFALSE 60168
// continue ;
60166: GO 60141
// if weapon in weapons then
60168: LD_VAR 0 8
60172: PUSH
60173: LD_VAR 0 9
60177: IN
60178: IFFALSE 60205
// begin result := [ i , weapon ] ;
60180: LD_ADDR_VAR 0 3
60184: PUSH
60185: LD_VAR 0 4
60189: PUSH
60190: LD_VAR 0 8
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: ST_TO_ADDR
// exit ;
60199: POP
60200: POP
60201: POP
60202: POP
60203: GO 60213
// end ; end ;
60205: GO 60141
60207: POP
60208: POP
// end ;
60209: GO 60027
60211: POP
60212: POP
// end ;
60213: LD_VAR 0 3
60217: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60218: LD_INT 0
60220: PPUSH
// if not side or side > 8 then
60221: LD_VAR 0 3
60225: NOT
60226: PUSH
60227: LD_VAR 0 3
60231: PUSH
60232: LD_INT 8
60234: GREATER
60235: OR
60236: IFFALSE 60240
// exit ;
60238: GO 60299
// if not range then
60240: LD_VAR 0 4
60244: NOT
60245: IFFALSE 60256
// range := - 12 ;
60247: LD_ADDR_VAR 0 4
60251: PUSH
60252: LD_INT 12
60254: NEG
60255: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60256: LD_VAR 0 1
60260: PPUSH
60261: LD_VAR 0 2
60265: PPUSH
60266: LD_VAR 0 3
60270: PPUSH
60271: LD_VAR 0 4
60275: PPUSH
60276: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60280: LD_VAR 0 1
60284: PPUSH
60285: LD_VAR 0 2
60289: PPUSH
60290: LD_VAR 0 3
60294: PPUSH
60295: CALL_OW 331
// end ;
60299: LD_VAR 0 5
60303: RET
// export function Video ( mode ) ; begin
60304: LD_INT 0
60306: PPUSH
// ingame_video = mode ;
60307: LD_ADDR_OWVAR 52
60311: PUSH
60312: LD_VAR 0 1
60316: ST_TO_ADDR
// interface_hidden = mode ;
60317: LD_ADDR_OWVAR 54
60321: PUSH
60322: LD_VAR 0 1
60326: ST_TO_ADDR
// end ;
60327: LD_VAR 0 2
60331: RET
// export function Join ( array , element ) ; begin
60332: LD_INT 0
60334: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60335: LD_ADDR_VAR 0 3
60339: PUSH
60340: LD_VAR 0 1
60344: PPUSH
60345: LD_VAR 0 1
60349: PUSH
60350: LD_INT 1
60352: PLUS
60353: PPUSH
60354: LD_VAR 0 2
60358: PPUSH
60359: CALL_OW 1
60363: ST_TO_ADDR
// end ;
60364: LD_VAR 0 3
60368: RET
// export function JoinUnion ( array , element ) ; begin
60369: LD_INT 0
60371: PPUSH
// result := array union element ;
60372: LD_ADDR_VAR 0 3
60376: PUSH
60377: LD_VAR 0 1
60381: PUSH
60382: LD_VAR 0 2
60386: UNION
60387: ST_TO_ADDR
// end ;
60388: LD_VAR 0 3
60392: RET
// export function GetBehemoths ( side ) ; begin
60393: LD_INT 0
60395: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60396: LD_ADDR_VAR 0 2
60400: PUSH
60401: LD_INT 22
60403: PUSH
60404: LD_VAR 0 1
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 31
60415: PUSH
60416: LD_INT 25
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PPUSH
60427: CALL_OW 69
60431: ST_TO_ADDR
// end ;
60432: LD_VAR 0 2
60436: RET
// export function Shuffle ( array ) ; var i , index ; begin
60437: LD_INT 0
60439: PPUSH
60440: PPUSH
60441: PPUSH
// result := [ ] ;
60442: LD_ADDR_VAR 0 2
60446: PUSH
60447: EMPTY
60448: ST_TO_ADDR
// if not array then
60449: LD_VAR 0 1
60453: NOT
60454: IFFALSE 60458
// exit ;
60456: GO 60557
// Randomize ;
60458: CALL_OW 10
// for i = array downto 1 do
60462: LD_ADDR_VAR 0 3
60466: PUSH
60467: DOUBLE
60468: LD_VAR 0 1
60472: INC
60473: ST_TO_ADDR
60474: LD_INT 1
60476: PUSH
60477: FOR_DOWNTO
60478: IFFALSE 60555
// begin index := rand ( 1 , array ) ;
60480: LD_ADDR_VAR 0 4
60484: PUSH
60485: LD_INT 1
60487: PPUSH
60488: LD_VAR 0 1
60492: PPUSH
60493: CALL_OW 12
60497: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60498: LD_ADDR_VAR 0 2
60502: PUSH
60503: LD_VAR 0 2
60507: PPUSH
60508: LD_VAR 0 2
60512: PUSH
60513: LD_INT 1
60515: PLUS
60516: PPUSH
60517: LD_VAR 0 1
60521: PUSH
60522: LD_VAR 0 4
60526: ARRAY
60527: PPUSH
60528: CALL_OW 2
60532: ST_TO_ADDR
// array := Delete ( array , index ) ;
60533: LD_ADDR_VAR 0 1
60537: PUSH
60538: LD_VAR 0 1
60542: PPUSH
60543: LD_VAR 0 4
60547: PPUSH
60548: CALL_OW 3
60552: ST_TO_ADDR
// end ;
60553: GO 60477
60555: POP
60556: POP
// end ;
60557: LD_VAR 0 2
60561: RET
// export function GetBaseMaterials ( base ) ; begin
60562: LD_INT 0
60564: PPUSH
// result := [ 0 , 0 , 0 ] ;
60565: LD_ADDR_VAR 0 2
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: LD_INT 0
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: LIST
60583: ST_TO_ADDR
// if not base then
60584: LD_VAR 0 1
60588: NOT
60589: IFFALSE 60593
// exit ;
60591: GO 60642
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60593: LD_ADDR_VAR 0 2
60597: PUSH
60598: LD_VAR 0 1
60602: PPUSH
60603: LD_INT 1
60605: PPUSH
60606: CALL_OW 275
60610: PUSH
60611: LD_VAR 0 1
60615: PPUSH
60616: LD_INT 2
60618: PPUSH
60619: CALL_OW 275
60623: PUSH
60624: LD_VAR 0 1
60628: PPUSH
60629: LD_INT 3
60631: PPUSH
60632: CALL_OW 275
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: LIST
60641: ST_TO_ADDR
// end ;
60642: LD_VAR 0 2
60646: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60647: LD_INT 0
60649: PPUSH
60650: PPUSH
// result := array ;
60651: LD_ADDR_VAR 0 3
60655: PUSH
60656: LD_VAR 0 1
60660: ST_TO_ADDR
// if size > 0 then
60661: LD_VAR 0 2
60665: PUSH
60666: LD_INT 0
60668: GREATER
60669: IFFALSE 60715
// for i := array downto size do
60671: LD_ADDR_VAR 0 4
60675: PUSH
60676: DOUBLE
60677: LD_VAR 0 1
60681: INC
60682: ST_TO_ADDR
60683: LD_VAR 0 2
60687: PUSH
60688: FOR_DOWNTO
60689: IFFALSE 60713
// result := Delete ( result , result ) ;
60691: LD_ADDR_VAR 0 3
60695: PUSH
60696: LD_VAR 0 3
60700: PPUSH
60701: LD_VAR 0 3
60705: PPUSH
60706: CALL_OW 3
60710: ST_TO_ADDR
60711: GO 60688
60713: POP
60714: POP
// end ;
60715: LD_VAR 0 3
60719: RET
// export function ComExit ( unit ) ; var tmp ; begin
60720: LD_INT 0
60722: PPUSH
60723: PPUSH
// if not IsInUnit ( unit ) then
60724: LD_VAR 0 1
60728: PPUSH
60729: CALL_OW 310
60733: NOT
60734: IFFALSE 60738
// exit ;
60736: GO 60798
// tmp := IsInUnit ( unit ) ;
60738: LD_ADDR_VAR 0 3
60742: PUSH
60743: LD_VAR 0 1
60747: PPUSH
60748: CALL_OW 310
60752: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60753: LD_VAR 0 3
60757: PPUSH
60758: CALL_OW 247
60762: PUSH
60763: LD_INT 2
60765: EQUAL
60766: IFFALSE 60779
// ComExitVehicle ( unit ) else
60768: LD_VAR 0 1
60772: PPUSH
60773: CALL_OW 121
60777: GO 60788
// ComExitBuilding ( unit ) ;
60779: LD_VAR 0 1
60783: PPUSH
60784: CALL_OW 122
// result := tmp ;
60788: LD_ADDR_VAR 0 2
60792: PUSH
60793: LD_VAR 0 3
60797: ST_TO_ADDR
// end ;
60798: LD_VAR 0 2
60802: RET
// export function ComExitAll ( units ) ; var i ; begin
60803: LD_INT 0
60805: PPUSH
60806: PPUSH
// if not units then
60807: LD_VAR 0 1
60811: NOT
60812: IFFALSE 60816
// exit ;
60814: GO 60842
// for i in units do
60816: LD_ADDR_VAR 0 3
60820: PUSH
60821: LD_VAR 0 1
60825: PUSH
60826: FOR_IN
60827: IFFALSE 60840
// ComExit ( i ) ;
60829: LD_VAR 0 3
60833: PPUSH
60834: CALL 60720 0 1
60838: GO 60826
60840: POP
60841: POP
// end ;
60842: LD_VAR 0 2
60846: RET
// export function ResetHc ; begin
60847: LD_INT 0
60849: PPUSH
// InitHc ;
60850: CALL_OW 19
// hc_importance := 0 ;
60854: LD_ADDR_OWVAR 32
60858: PUSH
60859: LD_INT 0
60861: ST_TO_ADDR
// end ;
60862: LD_VAR 0 1
60866: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60867: LD_INT 0
60869: PPUSH
60870: PPUSH
60871: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60872: LD_ADDR_VAR 0 6
60876: PUSH
60877: LD_VAR 0 1
60881: PUSH
60882: LD_VAR 0 3
60886: PLUS
60887: PUSH
60888: LD_INT 2
60890: DIV
60891: ST_TO_ADDR
// if _x < 0 then
60892: LD_VAR 0 6
60896: PUSH
60897: LD_INT 0
60899: LESS
60900: IFFALSE 60917
// _x := _x * - 1 ;
60902: LD_ADDR_VAR 0 6
60906: PUSH
60907: LD_VAR 0 6
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: MUL
60916: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60917: LD_ADDR_VAR 0 7
60921: PUSH
60922: LD_VAR 0 2
60926: PUSH
60927: LD_VAR 0 4
60931: PLUS
60932: PUSH
60933: LD_INT 2
60935: DIV
60936: ST_TO_ADDR
// if _y < 0 then
60937: LD_VAR 0 7
60941: PUSH
60942: LD_INT 0
60944: LESS
60945: IFFALSE 60962
// _y := _y * - 1 ;
60947: LD_ADDR_VAR 0 7
60951: PUSH
60952: LD_VAR 0 7
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: MUL
60961: ST_TO_ADDR
// result := [ _x , _y ] ;
60962: LD_ADDR_VAR 0 5
60966: PUSH
60967: LD_VAR 0 6
60971: PUSH
60972: LD_VAR 0 7
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: ST_TO_ADDR
// end ;
60981: LD_VAR 0 5
60985: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60986: LD_INT 0
60988: PPUSH
60989: PPUSH
60990: PPUSH
60991: PPUSH
// task := GetTaskList ( unit ) ;
60992: LD_ADDR_VAR 0 7
60996: PUSH
60997: LD_VAR 0 1
61001: PPUSH
61002: CALL_OW 437
61006: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61007: LD_VAR 0 7
61011: NOT
61012: PUSH
61013: LD_VAR 0 1
61017: PPUSH
61018: LD_VAR 0 2
61022: PPUSH
61023: CALL_OW 308
61027: NOT
61028: AND
61029: IFFALSE 61033
// exit ;
61031: GO 61151
// if IsInArea ( unit , area ) then
61033: LD_VAR 0 1
61037: PPUSH
61038: LD_VAR 0 2
61042: PPUSH
61043: CALL_OW 308
61047: IFFALSE 61065
// begin ComMoveToArea ( unit , goAway ) ;
61049: LD_VAR 0 1
61053: PPUSH
61054: LD_VAR 0 3
61058: PPUSH
61059: CALL_OW 113
// exit ;
61063: GO 61151
// end ; if task [ 1 ] [ 1 ] <> M then
61065: LD_VAR 0 7
61069: PUSH
61070: LD_INT 1
61072: ARRAY
61073: PUSH
61074: LD_INT 1
61076: ARRAY
61077: PUSH
61078: LD_STRING M
61080: NONEQUAL
61081: IFFALSE 61085
// exit ;
61083: GO 61151
// x := task [ 1 ] [ 2 ] ;
61085: LD_ADDR_VAR 0 5
61089: PUSH
61090: LD_VAR 0 7
61094: PUSH
61095: LD_INT 1
61097: ARRAY
61098: PUSH
61099: LD_INT 2
61101: ARRAY
61102: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61103: LD_ADDR_VAR 0 6
61107: PUSH
61108: LD_VAR 0 7
61112: PUSH
61113: LD_INT 1
61115: ARRAY
61116: PUSH
61117: LD_INT 3
61119: ARRAY
61120: ST_TO_ADDR
// if InArea ( x , y , area ) then
61121: LD_VAR 0 5
61125: PPUSH
61126: LD_VAR 0 6
61130: PPUSH
61131: LD_VAR 0 2
61135: PPUSH
61136: CALL_OW 309
61140: IFFALSE 61151
// ComStop ( unit ) ;
61142: LD_VAR 0 1
61146: PPUSH
61147: CALL_OW 141
// end ;
61151: LD_VAR 0 4
61155: RET
// export function Abs ( value ) ; begin
61156: LD_INT 0
61158: PPUSH
// result := value ;
61159: LD_ADDR_VAR 0 2
61163: PUSH
61164: LD_VAR 0 1
61168: ST_TO_ADDR
// if value < 0 then
61169: LD_VAR 0 1
61173: PUSH
61174: LD_INT 0
61176: LESS
61177: IFFALSE 61194
// result := value * - 1 ;
61179: LD_ADDR_VAR 0 2
61183: PUSH
61184: LD_VAR 0 1
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: MUL
61193: ST_TO_ADDR
// end ;
61194: LD_VAR 0 2
61198: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61199: LD_INT 0
61201: PPUSH
61202: PPUSH
61203: PPUSH
61204: PPUSH
61205: PPUSH
61206: PPUSH
61207: PPUSH
61208: PPUSH
// if not unit or not building then
61209: LD_VAR 0 1
61213: NOT
61214: PUSH
61215: LD_VAR 0 2
61219: NOT
61220: OR
61221: IFFALSE 61225
// exit ;
61223: GO 61451
// x := GetX ( building ) ;
61225: LD_ADDR_VAR 0 4
61229: PUSH
61230: LD_VAR 0 2
61234: PPUSH
61235: CALL_OW 250
61239: ST_TO_ADDR
// y := GetY ( building ) ;
61240: LD_ADDR_VAR 0 6
61244: PUSH
61245: LD_VAR 0 2
61249: PPUSH
61250: CALL_OW 251
61254: ST_TO_ADDR
// d := GetDir ( building ) ;
61255: LD_ADDR_VAR 0 8
61259: PUSH
61260: LD_VAR 0 2
61264: PPUSH
61265: CALL_OW 254
61269: ST_TO_ADDR
// r := 4 ;
61270: LD_ADDR_VAR 0 9
61274: PUSH
61275: LD_INT 4
61277: ST_TO_ADDR
// for i := 1 to 5 do
61278: LD_ADDR_VAR 0 10
61282: PUSH
61283: DOUBLE
61284: LD_INT 1
61286: DEC
61287: ST_TO_ADDR
61288: LD_INT 5
61290: PUSH
61291: FOR_TO
61292: IFFALSE 61449
// begin _x := ShiftX ( x , d , r + i ) ;
61294: LD_ADDR_VAR 0 5
61298: PUSH
61299: LD_VAR 0 4
61303: PPUSH
61304: LD_VAR 0 8
61308: PPUSH
61309: LD_VAR 0 9
61313: PUSH
61314: LD_VAR 0 10
61318: PLUS
61319: PPUSH
61320: CALL_OW 272
61324: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61325: LD_ADDR_VAR 0 7
61329: PUSH
61330: LD_VAR 0 6
61334: PPUSH
61335: LD_VAR 0 8
61339: PPUSH
61340: LD_VAR 0 9
61344: PUSH
61345: LD_VAR 0 10
61349: PLUS
61350: PPUSH
61351: CALL_OW 273
61355: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61356: LD_VAR 0 5
61360: PPUSH
61361: LD_VAR 0 7
61365: PPUSH
61366: CALL_OW 488
61370: PUSH
61371: LD_VAR 0 5
61375: PPUSH
61376: LD_VAR 0 7
61380: PPUSH
61381: CALL_OW 428
61385: PPUSH
61386: CALL_OW 247
61390: PUSH
61391: LD_INT 3
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: IN
61401: NOT
61402: AND
61403: IFFALSE 61447
// begin ComMoveXY ( unit , _x , _y ) ;
61405: LD_VAR 0 1
61409: PPUSH
61410: LD_VAR 0 5
61414: PPUSH
61415: LD_VAR 0 7
61419: PPUSH
61420: CALL_OW 111
// result := [ _x , _y ] ;
61424: LD_ADDR_VAR 0 3
61428: PUSH
61429: LD_VAR 0 5
61433: PUSH
61434: LD_VAR 0 7
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: ST_TO_ADDR
// exit ;
61443: POP
61444: POP
61445: GO 61451
// end ; end ;
61447: GO 61291
61449: POP
61450: POP
// end ;
61451: LD_VAR 0 3
61455: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61456: LD_INT 0
61458: PPUSH
61459: PPUSH
61460: PPUSH
// result := 0 ;
61461: LD_ADDR_VAR 0 3
61465: PUSH
61466: LD_INT 0
61468: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61469: LD_VAR 0 1
61473: PUSH
61474: LD_INT 0
61476: LESS
61477: PUSH
61478: LD_VAR 0 1
61482: PUSH
61483: LD_INT 8
61485: GREATER
61486: OR
61487: PUSH
61488: LD_VAR 0 2
61492: PUSH
61493: LD_INT 0
61495: LESS
61496: OR
61497: PUSH
61498: LD_VAR 0 2
61502: PUSH
61503: LD_INT 8
61505: GREATER
61506: OR
61507: IFFALSE 61511
// exit ;
61509: GO 61586
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61511: LD_ADDR_VAR 0 4
61515: PUSH
61516: LD_INT 22
61518: PUSH
61519: LD_VAR 0 2
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PPUSH
61528: CALL_OW 69
61532: PUSH
61533: FOR_IN
61534: IFFALSE 61584
// begin un := UnitShoot ( i ) ;
61536: LD_ADDR_VAR 0 5
61540: PUSH
61541: LD_VAR 0 4
61545: PPUSH
61546: CALL_OW 504
61550: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61551: LD_VAR 0 5
61555: PPUSH
61556: CALL_OW 255
61560: PUSH
61561: LD_VAR 0 1
61565: EQUAL
61566: IFFALSE 61582
// begin result := un ;
61568: LD_ADDR_VAR 0 3
61572: PUSH
61573: LD_VAR 0 5
61577: ST_TO_ADDR
// exit ;
61578: POP
61579: POP
61580: GO 61586
// end ; end ;
61582: GO 61533
61584: POP
61585: POP
// end ;
61586: LD_VAR 0 3
61590: RET
// export function GetCargoBay ( units ) ; begin
61591: LD_INT 0
61593: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61594: LD_ADDR_VAR 0 2
61598: PUSH
61599: LD_VAR 0 1
61603: PPUSH
61604: LD_INT 2
61606: PUSH
61607: LD_INT 34
61609: PUSH
61610: LD_INT 12
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 34
61619: PUSH
61620: LD_INT 51
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 34
61629: PUSH
61630: LD_INT 32
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 34
61639: PUSH
61640: LD_EXP 15
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: PPUSH
61656: CALL_OW 72
61660: ST_TO_ADDR
// end ;
61661: LD_VAR 0 2
61665: RET
