// starting begin ResetFog ;
   0: CALL_OW 335
// InitGame ;
   4: CALL 21 0 0
// PrepareLegion ;
   8: CALL 230 0 0
// PrepareAllies ;
  12: CALL 2221 0 0
// Action ;
  16: CALL 4045 0 0
// end ;
  20: END
// function InitGame ; begin
  21: LD_INT 0
  23: PPUSH
// RandomizeAll ;
  24: CALL_OW 11
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  28: LD_ADDR_OWVAR 67
  32: PUSH
  33: LD_INT 0
  35: PPUSH
  36: CALL_OW 426
  40: ST_TO_ADDR
// if not Difficulty then
  41: LD_OWVAR 67
  45: NOT
  46: IFFALSE 56
// Difficulty := 2 ;
  48: LD_ADDR_OWVAR 67
  52: PUSH
  53: LD_INT 2
  55: ST_TO_ADDR
// InitVariables ;
  56: CALL 69 0 0
// SetDiplomacy ;
  60: CALL 182 0 0
// end ; end_of_file
  64: LD_VAR 0 1
  68: RET
// export legion_commander , l1 , l2 , potter , al_commander , alert , game_over , player_res_art , time_res_art , points , wave_time , Vervecken , bonus_active , bonus_num , ignore_wave , player_artifact_ready , artifact_progress ; export function InitVariables ; begin
  69: LD_INT 0
  71: PPUSH
// points := 0 ;
  72: LD_ADDR_EXP 10
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// alert := false ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// game_over := false ;
  88: LD_ADDR_EXP 7
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// wave_time := 0 0$00 ;
  96: LD_ADDR_EXP 11
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// bonus_active := false ;
 104: LD_ADDR_EXP 13
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// ignore_wave := false ;
 112: LD_ADDR_EXP 15
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// player_res_art := false ;
 120: LD_ADDR_EXP 8
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// player_artifact_ready := false ;
 128: LD_ADDR_EXP 16
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// time_res_art := [ 25 25$00 , 32 32$00 , 40 40$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 9
 140: PUSH
 141: LD_INT 52500
 143: PUSH
 144: LD_INT 67200
 146: PUSH
 147: LD_INT 84000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// bonus_num := 0 ;
 161: LD_ADDR_EXP 14
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// artifact_progress := 0 ;
 169: LD_ADDR_EXP 17
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// end ;
 177: LD_VAR 0 1
 181: RET
// export function SetDiplomacy ; begin
 182: LD_INT 0
 184: PPUSH
// PlaceSeeing ( 92 , 48 , 8 , - 32796 ) ;
 185: LD_INT 92
 187: PPUSH
 188: LD_INT 48
 190: PPUSH
 191: LD_INT 8
 193: PPUSH
 194: LD_INT 32796
 196: NEG
 197: PPUSH
 198: CALL_OW 330
// RemoveSeeing ( 92 , 48 , 8 ) ;
 202: LD_INT 92
 204: PPUSH
 205: LD_INT 48
 207: PPUSH
 208: LD_INT 8
 210: PPUSH
 211: CALL_OW 331
// ChangeSideFog ( 5 , 8 ) ;
 215: LD_INT 5
 217: PPUSH
 218: LD_INT 8
 220: PPUSH
 221: CALL_OW 343
// end ; end_of_file
 225: LD_VAR 0 1
 229: RET
// export function PrepareLegion ; var i , k , class , b , un , team , skill , sold_num , eng_num , mech_num , sci_num , ape_num , dep_x , dep_y , weapons , weapon , vehicles ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
 247: PPUSH
 248: PPUSH
 249: PPUSH
// uc_side := 2 ;
 250: LD_ADDR_OWVAR 20
 254: PUSH
 255: LD_INT 2
 257: ST_TO_ADDR
// uc_nation := nation_arabian ;
 258: LD_ADDR_OWVAR 21
 262: PUSH
 263: LD_INT 2
 265: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 6 ) ;
 266: LD_INT 1
 268: PPUSH
 269: LD_INT 1
 271: PPUSH
 272: LD_INT 6
 274: PPUSH
 275: CALL_OW 380
// hc_name := Nicolas Vervecken ;
 279: LD_ADDR_OWVAR 26
 283: PUSH
 284: LD_STRING Nicolas Vervecken
 286: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 287: LD_ADDR_OWVAR 33
 291: PUSH
 292: LD_STRING SecondCharsGal
 294: ST_TO_ADDR
// hc_face_number := 3 ;
 295: LD_ADDR_OWVAR 34
 299: PUSH
 300: LD_INT 3
 302: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
 303: LD_ADDR_OWVAR 29
 307: PUSH
 308: LD_INT 11
 310: PUSH
 311: LD_INT 10
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: ST_TO_ADDR
// Vervecken := CreateHuman ;
 318: LD_ADDR_EXP 12
 322: PUSH
 323: CALL_OW 44
 327: ST_TO_ADDR
// InitHc ;
 328: CALL_OW 19
// uc_side := 8 ;
 332: LD_ADDR_OWVAR 20
 336: PUSH
 337: LD_INT 8
 339: ST_TO_ADDR
// SetResourceType ( GetBase ( main_base ) , mat_cans , [ 4000 , 2500 , 1250 ] [ Difficulty ] ) ;
 340: LD_INT 23
 342: PPUSH
 343: CALL_OW 274
 347: PPUSH
 348: LD_INT 1
 350: PPUSH
 351: LD_INT 4000
 353: PUSH
 354: LD_INT 2500
 356: PUSH
 357: LD_INT 1250
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_OWVAR 67
 369: ARRAY
 370: PPUSH
 371: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_oil , 300 ) ;
 375: LD_INT 23
 377: PPUSH
 378: CALL_OW 274
 382: PPUSH
 383: LD_INT 2
 385: PPUSH
 386: LD_INT 300
 388: PPUSH
 389: CALL_OW 277
// SetResourceType ( GetBase ( main_base ) , mat_siberit , [ 100 , 50 , 30 ] [ Difficulty ] ) ;
 393: LD_INT 23
 395: PPUSH
 396: CALL_OW 274
 400: PPUSH
 401: LD_INT 3
 403: PPUSH
 404: LD_INT 100
 406: PUSH
 407: LD_INT 50
 409: PUSH
 410: LD_INT 30
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: LIST
 417: PUSH
 418: LD_OWVAR 67
 422: ARRAY
 423: PPUSH
 424: CALL_OW 277
// dep_x := GetX ( main_base ) ;
 428: LD_ADDR_VAR 0 14
 432: PUSH
 433: LD_INT 23
 435: PPUSH
 436: CALL_OW 250
 440: ST_TO_ADDR
// dep_y := GetY ( main_base ) ;
 441: LD_ADDR_VAR 0 15
 445: PUSH
 446: LD_INT 23
 448: PPUSH
 449: CALL_OW 251
 453: ST_TO_ADDR
// team := [ ] ;
 454: LD_ADDR_VAR 0 7
 458: PUSH
 459: EMPTY
 460: ST_TO_ADDR
// skill := [ 9 , 8 , 7 ] [ Difficulty ] ;
 461: LD_ADDR_VAR 0 8
 465: PUSH
 466: LD_INT 9
 468: PUSH
 469: LD_INT 8
 471: PUSH
 472: LD_INT 7
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: LIST
 479: PUSH
 480: LD_OWVAR 67
 484: ARRAY
 485: ST_TO_ADDR
// sold_num := [ 11 , 9 , 8 ] [ Difficulty ] ;
 486: LD_ADDR_VAR 0 9
 490: PUSH
 491: LD_INT 11
 493: PUSH
 494: LD_INT 9
 496: PUSH
 497: LD_INT 8
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_OWVAR 67
 509: ARRAY
 510: ST_TO_ADDR
// eng_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 511: LD_ADDR_VAR 0 10
 515: PUSH
 516: LD_INT 3
 518: PUSH
 519: LD_INT 2
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_OWVAR 67
 534: ARRAY
 535: ST_TO_ADDR
// mech_num := [ 5 , 4 , 3 ] [ Difficulty ] ;
 536: LD_ADDR_VAR 0 11
 540: PUSH
 541: LD_INT 5
 543: PUSH
 544: LD_INT 4
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PUSH
 555: LD_OWVAR 67
 559: ARRAY
 560: ST_TO_ADDR
// sci_num := [ 3 , 2 , 2 ] [ Difficulty ] ;
 561: LD_ADDR_VAR 0 12
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// ape_num := [ 6 , 5 , 4 ] [ Difficulty ] ;
 586: LD_ADDR_VAR 0 13
 590: PUSH
 591: LD_INT 6
 593: PUSH
 594: LD_INT 5
 596: PUSH
 597: LD_INT 4
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// vehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_siberite , control_manual , ar_gatling_gun ] , [ ar_half_tracked , engine_siberite , control_apeman , ar_cargo_bay ] , [ ar_half_tracked , engine_siberite , control_manual , ar_control_tower ] , [ ar_half_tracked , engine_siberite , control_remote , ar_double_machine_gun ] , [ ar_half_tracked , engine_siberite , control_remote , ar_gatling_gun ] , [ ar_medium_trike , engine_siberite , control_manual , ar_double_machine_gun ] ] ;
 611: LD_ADDR_VAR 0 18
 615: PUSH
 616: LD_INT 13
 618: PUSH
 619: LD_INT 1
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: LD_INT 26
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 14
 636: PUSH
 637: LD_INT 3
 639: PUSH
 640: LD_INT 1
 642: PUSH
 643: LD_INT 25
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: PUSH
 652: LD_INT 14
 654: PUSH
 655: LD_INT 3
 657: PUSH
 658: LD_INT 5
 660: PUSH
 661: LD_INT 32
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 14
 672: PUSH
 673: LD_INT 3
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: LD_INT 31
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: LD_INT 14
 690: PUSH
 691: LD_INT 3
 693: PUSH
 694: LD_INT 2
 696: PUSH
 697: LD_INT 24
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 14
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 2
 714: PUSH
 715: LD_INT 25
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: PUSH
 724: LD_INT 13
 726: PUSH
 727: LD_INT 3
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: LD_INT 24
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: LIST
 749: LIST
 750: ST_TO_ADDR
// for i = 1 to vehicles - Difficulty + 1 do
 751: LD_ADDR_VAR 0 2
 755: PUSH
 756: DOUBLE
 757: LD_INT 1
 759: DEC
 760: ST_TO_ADDR
 761: LD_VAR 0 18
 765: PUSH
 766: LD_OWVAR 67
 770: MINUS
 771: PUSH
 772: LD_INT 1
 774: PLUS
 775: PUSH
 776: FOR_TO
 777: IFFALSE 906
// begin vc_chassis := vehicles [ i ] [ 1 ] ;
 779: LD_ADDR_OWVAR 37
 783: PUSH
 784: LD_VAR 0 18
 788: PUSH
 789: LD_VAR 0 2
 793: ARRAY
 794: PUSH
 795: LD_INT 1
 797: ARRAY
 798: ST_TO_ADDR
// vc_engine := vehicles [ i ] [ 2 ] ;
 799: LD_ADDR_OWVAR 39
 803: PUSH
 804: LD_VAR 0 18
 808: PUSH
 809: LD_VAR 0 2
 813: ARRAY
 814: PUSH
 815: LD_INT 2
 817: ARRAY
 818: ST_TO_ADDR
// vc_control := vehicles [ i ] [ 3 ] ;
 819: LD_ADDR_OWVAR 38
 823: PUSH
 824: LD_VAR 0 18
 828: PUSH
 829: LD_VAR 0 2
 833: ARRAY
 834: PUSH
 835: LD_INT 3
 837: ARRAY
 838: ST_TO_ADDR
// vc_weapon := vehicles [ i ] [ 4 ] ;
 839: LD_ADDR_OWVAR 40
 843: PUSH
 844: LD_VAR 0 18
 848: PUSH
 849: LD_VAR 0 2
 853: ARRAY
 854: PUSH
 855: LD_INT 4
 857: ARRAY
 858: ST_TO_ADDR
// un := CreateVehicle ;
 859: LD_ADDR_VAR 0 6
 863: PUSH
 864: CALL_OW 45
 868: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
 869: LD_VAR 0 6
 873: PPUSH
 874: LD_INT 0
 876: PPUSH
 877: LD_INT 5
 879: PPUSH
 880: CALL_OW 12
 884: PPUSH
 885: CALL_OW 233
// PlaceUnitArea ( un , parking_1 , false ) ;
 889: LD_VAR 0 6
 893: PPUSH
 894: LD_INT 7
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 49
// end ;
 904: GO 776
 906: POP
 907: POP
// for i = 1 to ape_num do
 908: LD_ADDR_VAR 0 2
 912: PUSH
 913: DOUBLE
 914: LD_INT 1
 916: DEC
 917: ST_TO_ADDR
 918: LD_VAR 0 13
 922: PUSH
 923: FOR_TO
 924: IFFALSE 991
// begin PrepareHuman ( false , [ class_apeman_engineer , class_apeman_soldier ] [ rand ( 1 , 2 ) ] , skill ) ;
 926: LD_INT 0
 928: PPUSH
 929: LD_INT 16
 931: PUSH
 932: LD_INT 15
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: LD_INT 1
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: CALL_OW 12
 949: ARRAY
 950: PPUSH
 951: LD_VAR 0 8
 955: PPUSH
 956: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
 960: LD_ADDR_VAR 0 7
 964: PUSH
 965: LD_VAR 0 7
 969: PPUSH
 970: LD_VAR 0 7
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: PPUSH
 979: CALL_OW 44
 983: PPUSH
 984: CALL_OW 2
 988: ST_TO_ADDR
// end ;
 989: GO 923
 991: POP
 992: POP
// PrepareHuman ( sex_male , 1 , skill ) ;
 993: LD_INT 1
 995: PPUSH
 996: LD_INT 1
 998: PPUSH
 999: LD_VAR 0 8
1003: PPUSH
1004: CALL_OW 380
// l1 := CreateHuman ;
1008: LD_ADDR_EXP 2
1012: PUSH
1013: CALL_OW 44
1017: ST_TO_ADDR
// PlaceHumanInUnit ( l1 , main_base ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_INT 23
1025: PPUSH
1026: CALL_OW 52
// PrepareHuman ( sex_male , 1 , skill ) ;
1030: LD_INT 1
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_VAR 0 8
1040: PPUSH
1041: CALL_OW 380
// l2 := CreateHuman ;
1045: LD_ADDR_EXP 3
1049: PUSH
1050: CALL_OW 44
1054: ST_TO_ADDR
// PlaceHumanInUnit ( l2 , main_base ) ;
1055: LD_EXP 3
1059: PPUSH
1060: LD_INT 23
1062: PPUSH
1063: CALL_OW 52
// for class = 1 to 4 do
1067: LD_ADDR_VAR 0 4
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 4
1079: PUSH
1080: FOR_TO
1081: IFFALSE 1180
// for i = 1 to [ sold_num , eng_num , mech_num , sci_num ] [ class ] do
1083: LD_ADDR_VAR 0 2
1087: PUSH
1088: DOUBLE
1089: LD_INT 1
1091: DEC
1092: ST_TO_ADDR
1093: LD_VAR 0 9
1097: PUSH
1098: LD_VAR 0 10
1102: PUSH
1103: LD_VAR 0 11
1107: PUSH
1108: LD_VAR 0 12
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_VAR 0 4
1123: ARRAY
1124: PUSH
1125: FOR_TO
1126: IFFALSE 1176
// begin PrepareHuman ( false , class , skill ) ;
1128: LD_INT 0
1130: PPUSH
1131: LD_VAR 0 4
1135: PPUSH
1136: LD_VAR 0 8
1140: PPUSH
1141: CALL_OW 380
// team := Insert ( team , team + 1 , CreateHuman ) ;
1145: LD_ADDR_VAR 0 7
1149: PUSH
1150: LD_VAR 0 7
1154: PPUSH
1155: LD_VAR 0 7
1159: PUSH
1160: LD_INT 1
1162: PLUS
1163: PPUSH
1164: CALL_OW 44
1168: PPUSH
1169: CALL_OW 2
1173: ST_TO_ADDR
// end ;
1174: GO 1125
1176: POP
1177: POP
1178: GO 1080
1180: POP
1181: POP
// for i in team do
1182: LD_ADDR_VAR 0 2
1186: PUSH
1187: LD_VAR 0 7
1191: PUSH
1192: FOR_IN
1193: IFFALSE 1669
// begin b := 0 ;
1195: LD_ADDR_VAR 0 5
1199: PUSH
1200: LD_INT 0
1202: ST_TO_ADDR
// case GetClass ( i ) of class_soldier :
1203: LD_VAR 0 2
1207: PPUSH
1208: CALL_OW 257
1212: PUSH
1213: LD_INT 1
1215: DOUBLE
1216: EQUAL
1217: IFTRUE 1221
1219: GO 1328
1221: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
1222: LD_ADDR_VAR 0 5
1226: PUSH
1227: LD_INT 22
1229: PUSH
1230: LD_OWVAR 20
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 2
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 30
1254: PUSH
1255: LD_INT 31
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 58
1269: PUSH
1270: EMPTY
1271: LIST
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PPUSH
1278: CALL_OW 69
1282: ST_TO_ADDR
// if not b then
1283: LD_VAR 0 5
1287: NOT
1288: IFFALSE 1326
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
1290: LD_ADDR_VAR 0 5
1294: PUSH
1295: LD_INT 22
1297: PUSH
1298: LD_OWVAR 20
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 30
1309: PUSH
1310: LD_INT 5
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PPUSH
1321: CALL_OW 69
1325: ST_TO_ADDR
// end ; class_engineer :
1326: GO 1567
1328: LD_INT 2
1330: DOUBLE
1331: EQUAL
1332: IFTRUE 1336
1334: GO 1375
1336: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_warehouse ] ] ) ; class_mechanic :
1337: LD_ADDR_VAR 0 5
1341: PUSH
1342: LD_INT 22
1344: PUSH
1345: LD_OWVAR 20
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: LD_INT 30
1356: PUSH
1357: LD_INT 1
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PPUSH
1368: CALL_OW 69
1372: ST_TO_ADDR
1373: GO 1567
1375: LD_INT 3
1377: DOUBLE
1378: EQUAL
1379: IFTRUE 1383
1381: GO 1472
1383: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1384: LD_ADDR_VAR 0 5
1388: PUSH
1389: LD_INT 22
1391: PUSH
1392: LD_OWVAR 20
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 21
1403: PUSH
1404: LD_INT 2
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: LD_INT 58
1413: PUSH
1414: EMPTY
1415: LIST
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: PPUSH
1422: CALL_OW 69
1426: ST_TO_ADDR
// if not b then
1427: LD_VAR 0 5
1431: NOT
1432: IFFALSE 1470
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_factory ] ] ) ;
1434: LD_ADDR_VAR 0 5
1438: PUSH
1439: LD_INT 22
1441: PUSH
1442: LD_OWVAR 20
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PUSH
1451: LD_INT 30
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: EMPTY
1458: LIST
1459: LIST
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PPUSH
1465: CALL_OW 69
1469: ST_TO_ADDR
// end ; class_scientistic :
1470: GO 1567
1472: LD_INT 4
1474: DOUBLE
1475: EQUAL
1476: IFTRUE 1480
1478: GO 1519
1480: POP
// begin b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_lab_full ] ] ) ;
1481: LD_ADDR_VAR 0 5
1485: PUSH
1486: LD_INT 22
1488: PUSH
1489: LD_OWVAR 20
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 30
1500: PUSH
1501: LD_INT 8
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PPUSH
1512: CALL_OW 69
1516: ST_TO_ADDR
// end ; class_apeman_soldier :
1517: GO 1567
1519: LD_INT 15
1521: DOUBLE
1522: EQUAL
1523: IFTRUE 1527
1525: GO 1566
1527: POP
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ; end ;
1528: LD_ADDR_VAR 0 5
1532: PUSH
1533: LD_INT 22
1535: PUSH
1536: LD_OWVAR 20
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 30
1547: PUSH
1548: LD_INT 5
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PPUSH
1559: CALL_OW 69
1563: ST_TO_ADDR
1564: GO 1567
1566: POP
// if b then
1567: LD_VAR 0 5
1571: IFFALSE 1642
// begin if GetBType ( b [ 1 ] ) = b_breastwork then
1573: LD_VAR 0 5
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PPUSH
1582: CALL_OW 266
1586: PUSH
1587: LD_INT 31
1589: EQUAL
1590: IFFALSE 1612
// PlaceHumanInBunker ( i , b [ 1 ] ) else
1592: LD_VAR 0 2
1596: PPUSH
1597: LD_VAR 0 5
1601: PUSH
1602: LD_INT 1
1604: ARRAY
1605: PPUSH
1606: CALL 4808 0 2
1610: GO 1640
// PlaceHumanInUnit ( i , b [ rand ( 1 , b ) ] ) end else
1612: LD_VAR 0 2
1616: PPUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_INT 1
1624: PPUSH
1625: LD_VAR 0 5
1629: PPUSH
1630: CALL_OW 12
1634: ARRAY
1635: PPUSH
1636: CALL_OW 52
1640: GO 1667
// PlaceUnitXYR ( i , dep_x , dep_y , 15 , false ) ;
1642: LD_VAR 0 2
1646: PPUSH
1647: LD_VAR 0 14
1651: PPUSH
1652: LD_VAR 0 15
1656: PPUSH
1657: LD_INT 15
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 50
// end ;
1667: GO 1192
1669: POP
1670: POP
// weapons := [ [ ar_flame_thrower , [ 3 , 2 , 1 ] [ Difficulty ] ] , [ ar_gatling_gun , [ 5 , 4 , 3 ] [ Difficulty ] ] , [ ar_double_machine_gun , [ 5 , 5 , 4 ] [ Difficulty ] ] , [ ar_radar , [ 2 , 1 , 1 ] [ Difficulty ] ] ] ;
1671: LD_ADDR_VAR 0 16
1675: PUSH
1676: LD_INT 26
1678: PUSH
1679: LD_INT 3
1681: PUSH
1682: LD_INT 2
1684: PUSH
1685: LD_INT 1
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_OWVAR 67
1697: ARRAY
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 25
1705: PUSH
1706: LD_INT 5
1708: PUSH
1709: LD_INT 4
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_OWVAR 67
1724: ARRAY
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 24
1732: PUSH
1733: LD_INT 5
1735: PUSH
1736: LD_INT 5
1738: PUSH
1739: LD_INT 4
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: PUSH
1747: LD_OWVAR 67
1751: ARRAY
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 30
1759: PUSH
1760: LD_INT 2
1762: PUSH
1763: LD_INT 1
1765: PUSH
1766: LD_INT 1
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: LIST
1773: PUSH
1774: LD_OWVAR 67
1778: ARRAY
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_bunker ] ] ) do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_INT 22
1797: PUSH
1798: LD_OWVAR 20
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: PUSH
1807: LD_INT 30
1809: PUSH
1810: LD_INT 32
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PPUSH
1821: CALL_OW 69
1825: PUSH
1826: FOR_IN
1827: IFFALSE 2000
// begin if weapons then
1829: LD_VAR 0 16
1833: IFFALSE 1957
// begin k := rand ( 1 , weapons ) ;
1835: LD_ADDR_VAR 0 3
1839: PUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_VAR 0 16
1847: PPUSH
1848: CALL_OW 12
1852: ST_TO_ADDR
// weapon := weapons [ k ] [ 1 ] ;
1853: LD_ADDR_VAR 0 17
1857: PUSH
1858: LD_VAR 0 16
1862: PUSH
1863: LD_VAR 0 3
1867: ARRAY
1868: PUSH
1869: LD_INT 1
1871: ARRAY
1872: ST_TO_ADDR
// weapons := Replace2 ( weapons , k , 2 , weapons [ k ] [ 2 ] - 1 ) ;
1873: LD_ADDR_VAR 0 16
1877: PUSH
1878: LD_VAR 0 16
1882: PPUSH
1883: LD_VAR 0 3
1887: PPUSH
1888: LD_INT 2
1890: PPUSH
1891: LD_VAR 0 16
1895: PUSH
1896: LD_VAR 0 3
1900: ARRAY
1901: PUSH
1902: LD_INT 2
1904: ARRAY
1905: PUSH
1906: LD_INT 1
1908: MINUS
1909: PPUSH
1910: CALL 4900 0 4
1914: ST_TO_ADDR
// if weapons [ k ] [ 2 ] = 0 then
1915: LD_VAR 0 16
1919: PUSH
1920: LD_VAR 0 3
1924: ARRAY
1925: PUSH
1926: LD_INT 2
1928: ARRAY
1929: PUSH
1930: LD_INT 0
1932: EQUAL
1933: IFFALSE 1955
// weapons := Delete ( weapons , k ) ;
1935: LD_ADDR_VAR 0 16
1939: PUSH
1940: LD_VAR 0 16
1944: PPUSH
1945: LD_VAR 0 3
1949: PPUSH
1950: CALL_OW 3
1954: ST_TO_ADDR
// end else
1955: GO 1984
// weapon := [ ar_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] ;
1957: LD_ADDR_VAR 0 17
1961: PUSH
1962: LD_INT 27
1964: PUSH
1965: LD_INT 23
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PUSH
1972: LD_INT 1
1974: PPUSH
1975: LD_INT 2
1977: PPUSH
1978: CALL_OW 12
1982: ARRAY
1983: ST_TO_ADDR
// PlaceWeaponTurret ( i , weapon ) ;
1984: LD_VAR 0 2
1988: PPUSH
1989: LD_VAR 0 17
1993: PPUSH
1994: CALL_OW 431
// end ;
1998: GO 1826
2000: POP
2001: POP
// PrepareHuman ( sex_male , 1 , skill + 1 ) ;
2002: LD_INT 1
2004: PPUSH
2005: LD_INT 1
2007: PPUSH
2008: LD_VAR 0 8
2012: PUSH
2013: LD_INT 1
2015: PLUS
2016: PPUSH
2017: CALL_OW 380
// hc_gallery := potter ;
2021: LD_ADDR_OWVAR 33
2025: PUSH
2026: LD_STRING potter
2028: ST_TO_ADDR
// hc_face_number := 1 ;
2029: LD_ADDR_OWVAR 34
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// hc_importance := 100 ;
2037: LD_ADDR_OWVAR 32
2041: PUSH
2042: LD_INT 100
2044: ST_TO_ADDR
// hc_name := Mike Gerste ;
2045: LD_ADDR_OWVAR 26
2049: PUSH
2050: LD_STRING Mike Gerste
2052: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2053: LD_ADDR_OWVAR 29
2057: PUSH
2058: LD_INT 10
2060: PUSH
2061: LD_INT 11
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: ST_TO_ADDR
// legion_commander := CreateHuman ;
2068: LD_ADDR_EXP 1
2072: PUSH
2073: CALL_OW 44
2077: ST_TO_ADDR
// PlaceHumanInUnit ( legion_commander , main_base ) ;
2078: LD_EXP 1
2082: PPUSH
2083: LD_INT 23
2085: PPUSH
2086: CALL_OW 52
// uc_side := 5 ;
2090: LD_ADDR_OWVAR 20
2094: PUSH
2095: LD_INT 5
2097: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , skill ) ;
2098: LD_INT 1
2100: PPUSH
2101: LD_INT 4
2103: PPUSH
2104: LD_VAR 0 8
2108: PPUSH
2109: CALL_OW 380
// hc_gallery := potter ;
2113: LD_ADDR_OWVAR 33
2117: PUSH
2118: LD_STRING potter
2120: ST_TO_ADDR
// hc_face_number := 2 ;
2121: LD_ADDR_OWVAR 34
2125: PUSH
2126: LD_INT 2
2128: ST_TO_ADDR
// hc_importance := 0 ;
2129: LD_ADDR_OWVAR 32
2133: PUSH
2134: LD_INT 0
2136: ST_TO_ADDR
// hc_name := George Potter ;
2137: LD_ADDR_OWVAR 26
2141: PUSH
2142: LD_STRING George Potter
2144: ST_TO_ADDR
// hc_attr := [ 12 , 9 ] ;
2145: LD_ADDR_OWVAR 29
2149: PUSH
2150: LD_INT 12
2152: PUSH
2153: LD_INT 9
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: ST_TO_ADDR
// potter := CreateHuman ;
2160: LD_ADDR_EXP 4
2164: PUSH
2165: CALL_OW 44
2169: ST_TO_ADDR
// SetDir ( potter , 4 ) ;
2170: LD_EXP 4
2174: PPUSH
2175: LD_INT 4
2177: PPUSH
2178: CALL_OW 233
// PlaceUnitXY ( potter , 103 , 45 , false ) ;
2182: LD_EXP 4
2186: PPUSH
2187: LD_INT 103
2189: PPUSH
2190: LD_INT 45
2192: PPUSH
2193: LD_INT 0
2195: PPUSH
2196: CALL_OW 48
// ComTurnUnit ( potter , main_base ) ;
2200: LD_EXP 4
2204: PPUSH
2205: LD_INT 23
2207: PPUSH
2208: CALL_OW 119
// InitHc ( ) ;
2212: CALL_OW 19
// end ; end_of_file
2216: LD_VAR 0 1
2220: RET
// export function PrepareAllies ; var i , un , b , list ; begin
2221: LD_INT 0
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
2227: PPUSH
// uc_side := 5 ;
2228: LD_ADDR_OWVAR 20
2232: PUSH
2233: LD_INT 5
2235: ST_TO_ADDR
// uc_nation := nation_arabian ;
2236: LD_ADDR_OWVAR 21
2240: PUSH
2241: LD_INT 2
2243: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_barracks ] ] ) ;
2244: LD_ADDR_VAR 0 4
2248: PUSH
2249: LD_INT 22
2251: PUSH
2252: LD_OWVAR 20
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PUSH
2261: LD_INT 30
2263: PUSH
2264: LD_INT 5
2266: PUSH
2267: EMPTY
2268: LIST
2269: LIST
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PPUSH
2275: CALL_OW 69
2279: ST_TO_ADDR
// for i = 1 to 3 do
2280: LD_ADDR_VAR 0 2
2284: PUSH
2285: DOUBLE
2286: LD_INT 1
2288: DEC
2289: ST_TO_ADDR
2290: LD_INT 3
2292: PUSH
2293: FOR_TO
2294: IFFALSE 2332
// begin PrepareHuman ( false , 2 , 6 ) ;
2296: LD_INT 0
2298: PPUSH
2299: LD_INT 2
2301: PPUSH
2302: LD_INT 6
2304: PPUSH
2305: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 27 , 22 , 5 , false ) ;
2309: CALL_OW 44
2313: PPUSH
2314: LD_INT 27
2316: PPUSH
2317: LD_INT 22
2319: PPUSH
2320: LD_INT 5
2322: PPUSH
2323: LD_INT 0
2325: PPUSH
2326: CALL_OW 50
// end ;
2330: GO 2293
2332: POP
2333: POP
// for i = 1 to 3 do
2334: LD_ADDR_VAR 0 2
2338: PUSH
2339: DOUBLE
2340: LD_INT 1
2342: DEC
2343: ST_TO_ADDR
2344: LD_INT 3
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2383
// begin PrepareHuman ( false , 1 , 6 ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_INT 6
2358: PPUSH
2359: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , b [ 1 ] ) ;
2363: CALL_OW 44
2367: PPUSH
2368: LD_VAR 0 4
2372: PUSH
2373: LD_INT 1
2375: ARRAY
2376: PPUSH
2377: CALL_OW 52
// end ;
2381: GO 2347
2383: POP
2384: POP
// for i in FilterAllUnits ( [ [ f_side , uc_side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) do
2385: LD_ADDR_VAR 0 2
2389: PUSH
2390: LD_INT 22
2392: PUSH
2393: LD_OWVAR 20
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PUSH
2402: LD_INT 2
2404: PUSH
2405: LD_INT 30
2407: PUSH
2408: LD_INT 31
2410: PUSH
2411: EMPTY
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 30
2417: PUSH
2418: LD_INT 32
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL_OW 69
2438: PUSH
2439: FOR_IN
2440: IFFALSE 2527
// begin PrepareHuman ( false , 1 , 6 ) ;
2442: LD_INT 0
2444: PPUSH
2445: LD_INT 1
2447: PPUSH
2448: LD_INT 6
2450: PPUSH
2451: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , i ) ;
2455: CALL_OW 44
2459: PPUSH
2460: LD_VAR 0 2
2464: PPUSH
2465: CALL 4808 0 2
// if GetBType ( i ) = b_bunker then
2469: LD_VAR 0 2
2473: PPUSH
2474: CALL_OW 266
2478: PUSH
2479: LD_INT 32
2481: EQUAL
2482: IFFALSE 2525
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_rocket_launcher ] [ i mod 4 + 1 ] ) ;
2484: LD_VAR 0 2
2488: PPUSH
2489: LD_INT 27
2491: PUSH
2492: LD_INT 25
2494: PUSH
2495: LD_INT 24
2497: PUSH
2498: LD_INT 28
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: PUSH
2507: LD_VAR 0 2
2511: PUSH
2512: LD_INT 4
2514: MOD
2515: PUSH
2516: LD_INT 1
2518: PLUS
2519: ARRAY
2520: PPUSH
2521: CALL_OW 431
// end ;
2525: GO 2439
2527: POP
2528: POP
// for i = 1 to 3 do
2529: LD_ADDR_VAR 0 2
2533: PUSH
2534: DOUBLE
2535: LD_INT 1
2537: DEC
2538: ST_TO_ADDR
2539: LD_INT 3
2541: PUSH
2542: FOR_TO
2543: IFFALSE 2660
// begin vc_chassis := ar_half_tracked ;
2545: LD_ADDR_OWVAR 37
2549: PUSH
2550: LD_INT 14
2552: ST_TO_ADDR
// vc_engine := engine_solar ;
2553: LD_ADDR_OWVAR 39
2557: PUSH
2558: LD_INT 2
2560: ST_TO_ADDR
// vc_control := control_manual ;
2561: LD_ADDR_OWVAR 38
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// vc_weapon := [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i ] ;
2569: LD_ADDR_OWVAR 40
2573: PUSH
2574: LD_INT 25
2576: PUSH
2577: LD_INT 27
2579: PUSH
2580: LD_INT 26
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: PUSH
2588: LD_VAR 0 2
2592: ARRAY
2593: ST_TO_ADDR
// un := CreateVehicle ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 45
2603: ST_TO_ADDR
// SetDir ( un , 5 ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 5
2611: PPUSH
2612: CALL_OW 233
// PlaceUnitArea ( un , parking_2 , false ) ;
2616: LD_VAR 0 3
2620: PPUSH
2621: LD_INT 8
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL_OW 49
// PrepareHuman ( false , 3 , 7 ) ;
2631: LD_INT 0
2633: PPUSH
2634: LD_INT 3
2636: PPUSH
2637: LD_INT 7
2639: PPUSH
2640: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
2644: CALL_OW 44
2648: PPUSH
2649: LD_VAR 0 3
2653: PPUSH
2654: CALL_OW 52
// end ;
2658: GO 2542
2660: POP
2661: POP
// PrepareHuman ( sex_male , 1 , 6 ) ;
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: LD_INT 6
2670: PPUSH
2671: CALL_OW 380
// al_commander := CreateHuman ;
2675: LD_ADDR_EXP 5
2679: PUSH
2680: CALL_OW 44
2684: ST_TO_ADDR
// PlaceHumanInUnit ( al_commander , FilterAllUnits ( [ [ f_side , uc_side ] , [ f_btype , b_depot ] ] ) [ 1 ] ) ;
2685: LD_EXP 5
2689: PPUSH
2690: LD_INT 22
2692: PUSH
2693: LD_OWVAR 20
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: LD_INT 30
2704: PUSH
2705: LD_INT 0
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PPUSH
2716: CALL_OW 69
2720: PUSH
2721: LD_INT 1
2723: ARRAY
2724: PPUSH
2725: CALL_OW 52
// InitHc ( ) ;
2729: CALL_OW 19
// end ;
2733: LD_VAR 0 1
2737: RET
// export function ChangeSide ( ) ; var i ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: LD_INT 22
2749: PUSH
2750: LD_INT 5
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 69
2761: PUSH
2762: FOR_IN
2763: IFFALSE 2779
// SetSide ( i , 8 ) ;
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_INT 8
2772: PPUSH
2773: CALL_OW 235
2777: GO 2762
2779: POP
2780: POP
// end ;
2781: LD_VAR 0 1
2785: RET
// every 0 0$03 trigger FilterAllUnits ( [ f_side , 5 ] ) do var i , list , d , j , b , m ;
2786: LD_INT 22
2788: PUSH
2789: LD_INT 5
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: PPUSH
2796: CALL_OW 69
2800: IFFALSE 3314
2802: GO 2804
2804: DISABLE
2805: LD_INT 0
2807: PPUSH
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
2812: PPUSH
// begin enable ;
2813: ENABLE
// list := FilterAllUnits ( [ [ f_side , 5 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: LD_INT 22
2821: PUSH
2822: LD_INT 5
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 2
2831: PUSH
2832: LD_INT 21
2834: PUSH
2835: LD_INT 1
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 21
2844: PUSH
2845: LD_INT 2
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: PPUSH
2861: CALL_OW 69
2865: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
2866: LD_ADDR_VAR 0 5
2870: PUSH
2871: LD_INT 22
2873: PUSH
2874: LD_INT 5
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 30
2883: PUSH
2884: LD_INT 32
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 3
2893: PUSH
2894: LD_INT 24
2896: PUSH
2897: LD_INT 1000
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: LIST
2912: PPUSH
2913: CALL_OW 69
2917: ST_TO_ADDR
// m := UnitFilter ( list , [ [ f_not , [ f_inside ] ] , [ f_class , 3 ] ] ) ;
2918: LD_ADDR_VAR 0 6
2922: PUSH
2923: LD_VAR 0 2
2927: PPUSH
2928: LD_INT 3
2930: PUSH
2931: LD_INT 54
2933: PUSH
2934: EMPTY
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: PUSH
2941: LD_INT 25
2943: PUSH
2944: LD_INT 3
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PPUSH
2955: CALL_OW 72
2959: ST_TO_ADDR
// if not list then
2960: LD_VAR 0 2
2964: NOT
2965: IFFALSE 2969
// exit ;
2967: GO 3314
// for i in list do
2969: LD_ADDR_VAR 0 1
2973: PUSH
2974: LD_VAR 0 2
2978: PUSH
2979: FOR_IN
2980: IFFALSE 3312
// begin if b then
2982: LD_VAR 0 5
2986: IFFALSE 3065
// for j in UnitFilter ( list , [ f_class , 2 ] ) do
2988: LD_ADDR_VAR 0 4
2992: PUSH
2993: LD_VAR 0 2
2997: PPUSH
2998: LD_INT 25
3000: PUSH
3001: LD_INT 2
3003: PUSH
3004: EMPTY
3005: LIST
3006: LIST
3007: PPUSH
3008: CALL_OW 72
3012: PUSH
3013: FOR_IN
3014: IFFALSE 3063
// if not HasTask ( j ) and GetTag ( i ) <> 7 then
3016: LD_VAR 0 4
3020: PPUSH
3021: CALL_OW 314
3025: NOT
3026: PUSH
3027: LD_VAR 0 1
3031: PPUSH
3032: CALL_OW 110
3036: PUSH
3037: LD_INT 7
3039: NONEQUAL
3040: AND
3041: IFFALSE 3061
// ComRepairBuilding ( j , b [ 1 ] ) ;
3043: LD_VAR 0 4
3047: PPUSH
3048: LD_VAR 0 5
3052: PUSH
3053: LD_INT 1
3055: ARRAY
3056: PPUSH
3057: CALL_OW 130
3061: GO 3013
3063: POP
3064: POP
// if GetLives ( i ) < 500 and not GetTag ( i ) = 7 then
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 256
3074: PUSH
3075: LD_INT 500
3077: LESS
3078: PUSH
3079: LD_VAR 0 1
3083: PPUSH
3084: CALL_OW 110
3088: PUSH
3089: LD_INT 7
3091: EQUAL
3092: NOT
3093: AND
3094: IFFALSE 3144
// begin ComMoveToArea ( i , guard_hill ) ;
3096: LD_VAR 0 1
3100: PPUSH
3101: LD_INT 11
3103: PPUSH
3104: CALL_OW 113
// SetTag ( i , 7 ) ;
3108: LD_VAR 0 1
3112: PPUSH
3113: LD_INT 7
3115: PPUSH
3116: CALL_OW 109
// if GetType ( i ) = unit_vehicle then
3120: LD_VAR 0 1
3124: PPUSH
3125: CALL_OW 247
3129: PUSH
3130: LD_INT 2
3132: EQUAL
3133: IFFALSE 3144
// begin AddComExitVehicle ( i ) ;
3135: LD_VAR 0 1
3139: PPUSH
3140: CALL_OW 181
// end ; end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 7 and not IsInUnit ( i ) and m then
3144: LD_VAR 0 1
3148: PPUSH
3149: CALL_OW 256
3153: PUSH
3154: LD_INT 1000
3156: EQUAL
3157: PUSH
3158: LD_VAR 0 1
3162: PPUSH
3163: CALL_OW 110
3167: PUSH
3168: LD_INT 7
3170: EQUAL
3171: AND
3172: PUSH
3173: LD_VAR 0 1
3177: PPUSH
3178: CALL_OW 310
3182: NOT
3183: AND
3184: PUSH
3185: LD_VAR 0 6
3189: AND
3190: IFFALSE 3218
// begin SetTag ( i , 0 ) ;
3192: LD_VAR 0 1
3196: PPUSH
3197: LD_INT 0
3199: PPUSH
3200: CALL_OW 109
// ComEnterUnit ( m , i ) ;
3204: LD_VAR 0 6
3208: PPUSH
3209: LD_VAR 0 1
3213: PPUSH
3214: CALL_OW 120
// end ; if GetType ( i ) = unit_vehicle and GetTag ( i ) <> 7 and not HasTask ( i ) then
3218: LD_VAR 0 1
3222: PPUSH
3223: CALL_OW 247
3227: PUSH
3228: LD_INT 2
3230: EQUAL
3231: PUSH
3232: LD_VAR 0 1
3236: PPUSH
3237: CALL_OW 110
3241: PUSH
3242: LD_INT 7
3244: NONEQUAL
3245: AND
3246: PUSH
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 314
3256: NOT
3257: AND
3258: IFFALSE 3310
// if FilterAllUnits ( [ f_side , 7 ] ) then
3260: LD_INT 22
3262: PUSH
3263: LD_INT 7
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PPUSH
3270: CALL_OW 69
3274: IFFALSE 3310
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
3276: LD_VAR 0 1
3280: PPUSH
3281: LD_INT 22
3283: PUSH
3284: LD_INT 7
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PPUSH
3291: CALL_OW 69
3295: PPUSH
3296: LD_VAR 0 1
3300: PPUSH
3301: CALL_OW 74
3305: PPUSH
3306: CALL_OW 115
// end ;
3310: GO 2979
3312: POP
3313: POP
// end ; end_of_file
3314: PPOPN 6
3316: END
// export function Game ; var i , val , areas , wave ; begin
3317: LD_INT 0
3319: PPUSH
3320: PPUSH
3321: PPUSH
3322: PPUSH
3323: PPUSH
// areas := [ north_west_1 , west_2 , south_west_3 , north_4 , east_5 , south_east_6 ] ;
3324: LD_ADDR_VAR 0 4
3328: PUSH
3329: LD_INT 1
3331: PUSH
3332: LD_INT 2
3334: PUSH
3335: LD_INT 3
3337: PUSH
3338: LD_INT 4
3340: PUSH
3341: LD_INT 5
3343: PUSH
3344: LD_INT 6
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: ST_TO_ADDR
// val := [ 5 , 6 , 7 ] [ Difficulty ] ;
3355: LD_ADDR_VAR 0 3
3359: PUSH
3360: LD_INT 5
3362: PUSH
3363: LD_INT 6
3365: PUSH
3366: LD_INT 7
3368: PUSH
3369: EMPTY
3370: LIST
3371: LIST
3372: LIST
3373: PUSH
3374: LD_OWVAR 67
3378: ARRAY
3379: ST_TO_ADDR
// wave := 1 ;
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: LD_INT 1
3387: ST_TO_ADDR
// while not game_over do
3388: LD_EXP 7
3392: NOT
3393: IFFALSE 3549
// begin repeat begin Wait ( 0 0$01 ) ;
3395: LD_INT 35
3397: PPUSH
3398: CALL_OW 67
// wave_time := wave_time + 0 0$01 ;
3402: LD_ADDR_EXP 11
3406: PUSH
3407: LD_EXP 11
3411: PUSH
3412: LD_INT 35
3414: PLUS
3415: ST_TO_ADDR
// end until FilterAllUnits ( [ f_side , 7 ] ) < 10 or wave_time >= 10 10$00 ;
3416: LD_INT 22
3418: PUSH
3419: LD_INT 7
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: PPUSH
3426: CALL_OW 69
3430: PUSH
3431: LD_INT 10
3433: LESS
3434: PUSH
3435: LD_EXP 11
3439: PUSH
3440: LD_INT 21000
3442: GREATEREQUAL
3443: OR
3444: IFFALSE 3395
// wave_time := 0 0$00 ;
3446: LD_ADDR_EXP 11
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// Wait ( 2 2$30 ) ;
3454: LD_INT 5250
3456: PPUSH
3457: CALL_OW 67
// if not ignore_wave then
3461: LD_EXP 15
3465: NOT
3466: IFFALSE 3539
// begin for i = 1 to areas do
3468: LD_ADDR_VAR 0 2
3472: PUSH
3473: DOUBLE
3474: LD_INT 1
3476: DEC
3477: ST_TO_ADDR
3478: LD_VAR 0 4
3482: PUSH
3483: FOR_TO
3484: IFFALSE 3521
// begin SpawnPotter ( wave + val , areas [ i ] ) ;
3486: LD_VAR 0 5
3490: PUSH
3491: LD_VAR 0 3
3495: PLUS
3496: PPUSH
3497: LD_VAR 0 4
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PPUSH
3508: CALL 3554 0 2
// Wait ( 0 0$10 ) ;
3512: LD_INT 350
3514: PPUSH
3515: CALL_OW 67
// end ;
3519: GO 3483
3521: POP
3522: POP
// wave := wave + 1 ;
3523: LD_ADDR_VAR 0 5
3527: PUSH
3528: LD_VAR 0 5
3532: PUSH
3533: LD_INT 1
3535: PLUS
3536: ST_TO_ADDR
// end else
3537: GO 3547
// ignore_wave := false ;
3539: LD_ADDR_EXP 15
3543: PUSH
3544: LD_INT 0
3546: ST_TO_ADDR
// end ;
3547: GO 3388
// end ;
3549: LD_VAR 0 1
3553: RET
// export function SpawnPotter ( val , area ) ; var i , v , un , class ; begin
3554: LD_INT 0
3556: PPUSH
3557: PPUSH
3558: PPUSH
3559: PPUSH
3560: PPUSH
// uc_side := 7 ;
3561: LD_ADDR_OWVAR 20
3565: PUSH
3566: LD_INT 7
3568: ST_TO_ADDR
// uc_nation := 2 ;
3569: LD_ADDR_OWVAR 21
3573: PUSH
3574: LD_INT 2
3576: ST_TO_ADDR
// v := 10 + ( tick div 5 5$00 ) ;
3577: LD_ADDR_VAR 0 5
3581: PUSH
3582: LD_INT 10
3584: PUSH
3585: LD_OWVAR 1
3589: PUSH
3590: LD_INT 10500
3592: DIV
3593: PLUS
3594: ST_TO_ADDR
// if v > 25 then
3595: LD_VAR 0 5
3599: PUSH
3600: LD_INT 25
3602: GREATER
3603: IFFALSE 3613
// v := 25 ;
3605: LD_ADDR_VAR 0 5
3609: PUSH
3610: LD_INT 25
3612: ST_TO_ADDR
// InitHc ( ) ;
3613: CALL_OW 19
// hc_gallery :=  ;
3617: LD_ADDR_OWVAR 33
3621: PUSH
3622: LD_STRING 
3624: ST_TO_ADDR
// hc_importance := 0 ;
3625: LD_ADDR_OWVAR 32
3629: PUSH
3630: LD_INT 0
3632: ST_TO_ADDR
// hc_name :=  ;
3633: LD_ADDR_OWVAR 26
3637: PUSH
3638: LD_STRING 
3640: ST_TO_ADDR
// hc_attr := [ v , v ] ;
3641: LD_ADDR_OWVAR 29
3645: PUSH
3646: LD_VAR 0 5
3650: PUSH
3651: LD_VAR 0 5
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: ST_TO_ADDR
// if val > 35 then
3660: LD_VAR 0 1
3664: PUSH
3665: LD_INT 35
3667: GREATER
3668: IFFALSE 3678
// val := 35 ;
3670: LD_ADDR_VAR 0 1
3674: PUSH
3675: LD_INT 35
3677: ST_TO_ADDR
// for i = 1 to val do
3678: LD_ADDR_VAR 0 4
3682: PUSH
3683: DOUBLE
3684: LD_INT 1
3686: DEC
3687: ST_TO_ADDR
3688: LD_VAR 0 1
3692: PUSH
3693: FOR_TO
3694: IFFALSE 3905
// begin if i mod 9 = 0 then
3696: LD_VAR 0 4
3700: PUSH
3701: LD_INT 9
3703: MOD
3704: PUSH
3705: LD_INT 0
3707: EQUAL
3708: IFFALSE 3720
// class := class_apeman_kamikaze else
3710: LD_ADDR_VAR 0 7
3714: PUSH
3715: LD_INT 17
3717: ST_TO_ADDR
3718: GO 3752
// if i mod 4 = 0 then
3720: LD_VAR 0 4
3724: PUSH
3725: LD_INT 4
3727: MOD
3728: PUSH
3729: LD_INT 0
3731: EQUAL
3732: IFFALSE 3744
// class := class_apeman_soldier else
3734: LD_ADDR_VAR 0 7
3738: PUSH
3739: LD_INT 15
3741: ST_TO_ADDR
3742: GO 3752
// class := class_apeman ;
3744: LD_ADDR_VAR 0 7
3748: PUSH
3749: LD_INT 12
3751: ST_TO_ADDR
// if i mod 6 = 0 then
3752: LD_VAR 0 4
3756: PUSH
3757: LD_INT 6
3759: MOD
3760: PUSH
3761: LD_INT 0
3763: EQUAL
3764: IFFALSE 3837
// begin vc_chassis := ar_half_tracked ;
3766: LD_ADDR_OWVAR 37
3770: PUSH
3771: LD_INT 14
3773: ST_TO_ADDR
// vc_control := control_apeman ;
3774: LD_ADDR_OWVAR 38
3778: PUSH
3779: LD_INT 5
3781: ST_TO_ADDR
// vc_engine := engine_siberite ;
3782: LD_ADDR_OWVAR 39
3786: PUSH
3787: LD_INT 3
3789: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_selfpropelled_bomb , ar_bio_bomb ] [ rand ( 1 , 4 ) ] ;
3790: LD_ADDR_OWVAR 40
3794: PUSH
3795: LD_INT 28
3797: PUSH
3798: LD_INT 27
3800: PUSH
3801: LD_INT 29
3803: PUSH
3804: LD_INT 91
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_INT 1
3815: PPUSH
3816: LD_INT 4
3818: PPUSH
3819: CALL_OW 12
3823: ARRAY
3824: ST_TO_ADDR
// un := CreateVehicle ;
3825: LD_ADDR_VAR 0 6
3829: PUSH
3830: CALL_OW 45
3834: ST_TO_ADDR
// end else
3835: GO 3862
// begin PrepareHuman ( sex_male , class , 10 ) ;
3837: LD_INT 1
3839: PPUSH
3840: LD_VAR 0 7
3844: PPUSH
3845: LD_INT 10
3847: PPUSH
3848: CALL_OW 380
// un := CreateHuman ;
3852: LD_ADDR_VAR 0 6
3856: PUSH
3857: CALL_OW 44
3861: ST_TO_ADDR
// end ; PlaceUnitArea ( un , area , false ) ;
3862: LD_VAR 0 6
3866: PPUSH
3867: LD_VAR 0 2
3871: PPUSH
3872: LD_INT 0
3874: PPUSH
3875: CALL_OW 49
// EffectTeleport ( GetX ( un ) , GetY ( un ) ) ;
3879: LD_VAR 0 6
3883: PPUSH
3884: CALL_OW 250
3888: PPUSH
3889: LD_VAR 0 6
3893: PPUSH
3894: CALL_OW 251
3898: PPUSH
3899: CALL_OW 494
// end ;
3903: GO 3693
3905: POP
3906: POP
// end ;
3907: LD_VAR 0 3
3911: RET
// every 0 0$3 trigger alert and not game_over do var i , list , enemy ;
3912: LD_EXP 6
3916: PUSH
3917: LD_EXP 7
3921: NOT
3922: AND
3923: IFFALSE 4042
3925: GO 3927
3927: DISABLE
3928: LD_INT 0
3930: PPUSH
3931: PPUSH
3932: PPUSH
// begin enable ;
3933: ENABLE
// list := FilterAllUnits ( [ f_side , 7 ] ) ;
3934: LD_ADDR_VAR 0 2
3938: PUSH
3939: LD_INT 22
3941: PUSH
3942: LD_INT 7
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PPUSH
3949: CALL_OW 69
3953: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , 7 ] ) ;
3954: LD_ADDR_VAR 0 3
3958: PUSH
3959: LD_INT 81
3961: PUSH
3962: LD_INT 7
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PPUSH
3969: CALL_OW 69
3973: ST_TO_ADDR
// if not list then
3974: LD_VAR 0 2
3978: NOT
3979: IFFALSE 3983
// exit ;
3981: GO 4042
// for i in list do
3983: LD_ADDR_VAR 0 1
3987: PUSH
3988: LD_VAR 0 2
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4040
// begin if enemy then
3996: LD_VAR 0 3
4000: IFFALSE 4038
// if not HasTask ( i ) then
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 314
4011: NOT
4012: IFFALSE 4038
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4014: LD_VAR 0 1
4018: PPUSH
4019: LD_VAR 0 3
4023: PPUSH
4024: LD_VAR 0 1
4028: PPUSH
4029: CALL_OW 74
4033: PPUSH
4034: CALL_OW 115
// end ;
4038: GO 3993
4040: POP
4041: POP
// end ; end_of_file
4042: PPOPN 3
4044: END
// export function Action ; begin
4045: LD_INT 0
4047: PPUSH
// InGameOn ;
4048: CALL_OW 8
// CenterNowOnUnits ( main_base ) ;
4052: LD_INT 23
4054: PPUSH
4055: CALL_OW 87
// Say ( legion_commander , DL-1 ) ;
4059: LD_EXP 1
4063: PPUSH
4064: LD_STRING DL-1
4066: PPUSH
4067: CALL_OW 88
// Say ( l1 , DA-1 ) ;
4071: LD_EXP 2
4075: PPUSH
4076: LD_STRING DA-1
4078: PPUSH
4079: CALL_OW 88
// Say ( l2 , DA-2 ) ;
4083: LD_EXP 3
4087: PPUSH
4088: LD_STRING DA-2
4090: PPUSH
4091: CALL_OW 88
// Say ( legion_commander , DL-2 ) ;
4095: LD_EXP 1
4099: PPUSH
4100: LD_STRING DL-2
4102: PPUSH
4103: CALL_OW 88
// Say ( l2 , DA-3 ) ;
4107: LD_EXP 3
4111: PPUSH
4112: LD_STRING DA-3
4114: PPUSH
4115: CALL_OW 88
// Say ( legion_commander , DL-3 ) ;
4119: LD_EXP 1
4123: PPUSH
4124: LD_STRING DL-3
4126: PPUSH
4127: CALL_OW 88
// Say ( l1 , DA-4 ) ;
4131: LD_EXP 2
4135: PPUSH
4136: LD_STRING DA-4
4138: PPUSH
4139: CALL_OW 88
// if not dialogue_skipped then
4143: LD_OWVAR 59
4147: NOT
4148: IFFALSE 4233
// begin Wait ( 0 0$01 ) ;
4150: LD_INT 35
4152: PPUSH
4153: CALL_OW 67
// ComExitBuilding ( [ l1 , l2 ] ) ;
4157: LD_EXP 2
4161: PUSH
4162: LD_EXP 3
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: PPUSH
4171: CALL_OW 122
// AddComMoveXY ( l1 , 107 , 53 ) ;
4175: LD_EXP 2
4179: PPUSH
4180: LD_INT 107
4182: PPUSH
4183: LD_INT 53
4185: PPUSH
4186: CALL_OW 171
// AddComMoveXY ( l2 , 108 , 53 ) ;
4190: LD_EXP 3
4194: PPUSH
4195: LD_INT 108
4197: PPUSH
4198: LD_INT 53
4200: PPUSH
4201: CALL_OW 171
// AddComTurnUnit ( l1 , potter ) ;
4205: LD_EXP 2
4209: PPUSH
4210: LD_EXP 4
4214: PPUSH
4215: CALL_OW 179
// AddComTurnUnit ( l2 , potter ) ;
4219: LD_EXP 3
4223: PPUSH
4224: LD_EXP 4
4228: PPUSH
4229: CALL_OW 179
// end ; repeat Wait ( 0 0$01 ) ;
4233: LD_INT 35
4235: PPUSH
4236: CALL_OW 67
// until IsAt ( l1 , 107 , 53 ) or dialogue_skipped ;
4240: LD_EXP 2
4244: PPUSH
4245: LD_INT 107
4247: PPUSH
4248: LD_INT 53
4250: PPUSH
4251: CALL_OW 307
4255: PUSH
4256: LD_OWVAR 59
4260: OR
4261: IFFALSE 4233
// if not dialogue_skipped then
4263: LD_OWVAR 59
4267: NOT
4268: IFFALSE 4369
// begin ComTurnUnit ( potter , l1 ) ;
4270: LD_EXP 4
4274: PPUSH
4275: LD_EXP 2
4279: PPUSH
4280: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
4284: LD_INT 10
4286: PPUSH
4287: CALL_OW 67
// TeleportUnit ( potter , 108 , 1 , 0 , false ) ;
4291: LD_EXP 4
4295: PPUSH
4296: LD_INT 108
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 0
4304: PPUSH
4305: LD_INT 0
4307: PPUSH
4308: CALL_OW 483
// Wait ( 0 0$01 ) ;
4312: LD_INT 35
4314: PPUSH
4315: CALL_OW 67
// RemoveUnit ( potter ) ;
4319: LD_EXP 4
4323: PPUSH
4324: CALL_OW 64
// Say ( l1 , DA-5 ) ;
4328: LD_EXP 2
4332: PPUSH
4333: LD_STRING DA-5
4335: PPUSH
4336: CALL_OW 88
// Say ( l2 , DA-6 ) ;
4340: LD_EXP 3
4344: PPUSH
4345: LD_STRING DA-6
4347: PPUSH
4348: CALL_OW 88
// Wait ( 0 0$02 ) ;
4352: LD_INT 70
4354: PPUSH
4355: CALL_OW 67
// CenterOnXY ( 25 , 19 ) ;
4359: LD_INT 25
4361: PPUSH
4362: LD_INT 19
4364: PPUSH
4365: CALL_OW 84
// end ; SpawnPotter ( 20 , north_west_1 ) ;
4369: LD_INT 20
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: CALL 3554 0 2
// SayRadio ( al_commander , DLa-1 ) ;
4379: LD_EXP 5
4383: PPUSH
4384: LD_STRING DLa-1
4386: PPUSH
4387: CALL_OW 94
// Say ( legion_commander , DL-5 ) ;
4391: LD_EXP 1
4395: PPUSH
4396: LD_STRING DL-5
4398: PPUSH
4399: CALL_OW 88
// CenterNowOnUnits ( main_base ) ;
4403: LD_INT 23
4405: PPUSH
4406: CALL_OW 87
// InGameOff ;
4410: CALL_OW 9
// ChangeMissionObjectives ( C1 ) ;
4414: LD_STRING C1
4416: PPUSH
4417: CALL_OW 337
// alert := true ;
4421: LD_ADDR_EXP 6
4425: PUSH
4426: LD_INT 1
4428: ST_TO_ADDR
// ComExitBuilding ( al_commander ) ;
4429: LD_EXP 5
4433: PPUSH
4434: CALL_OW 122
// AddComMoveToArea ( al_commander , guard_hill ) ;
4438: LD_EXP 5
4442: PPUSH
4443: LD_INT 11
4445: PPUSH
4446: CALL_OW 173
// Wait ( 0 0$30 ) ;
4450: LD_INT 1050
4452: PPUSH
4453: CALL_OW 67
// SpawnPotter ( 10 , north_4 ) ;
4457: LD_INT 10
4459: PPUSH
4460: LD_INT 4
4462: PPUSH
4463: CALL 3554 0 2
// Wait ( 0 0$35 ) ;
4467: LD_INT 1225
4469: PPUSH
4470: CALL_OW 67
// SpawnPotter ( 10 , east_5 ) ;
4474: LD_INT 10
4476: PPUSH
4477: LD_INT 5
4479: PPUSH
4480: CALL 3554 0 2
// Wait ( 0 0$03 ) ;
4484: LD_INT 105
4486: PPUSH
4487: CALL_OW 67
// Game ;
4491: CALL 3317 0 0
// end ;
4495: LD_VAR 0 1
4499: RET
// every 0 0$10 trigger FilterAllUnits ( [ f_side , 7 ] ) = 0 and points >= 1500 do var tmp , i ;
4500: LD_INT 22
4502: PUSH
4503: LD_INT 7
4505: PUSH
4506: EMPTY
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: PUSH
4515: LD_INT 0
4517: EQUAL
4518: PUSH
4519: LD_EXP 10
4523: PUSH
4524: LD_INT 1500
4526: GREATEREQUAL
4527: AND
4528: IFFALSE 4756
4530: GO 4532
4532: DISABLE
4533: LD_INT 0
4535: PPUSH
4536: PPUSH
// begin DialogueOn ;
4537: CALL_OW 6
// SayRadio ( Vervecken , DVr-1 ) ;
4541: LD_EXP 12
4545: PPUSH
4546: LD_STRING DVr-1
4548: PPUSH
4549: CALL_OW 94
// DialogueOff ;
4553: CALL_OW 7
// case Query ( QBonusInfo ) of 1 :
4557: LD_STRING QBonusInfo
4559: PPUSH
4560: CALL_OW 97
4564: PUSH
4565: LD_INT 1
4567: DOUBLE
4568: EQUAL
4569: IFTRUE 4573
4571: GO 4584
4573: POP
// bonus_active := true ; end ;
4574: LD_ADDR_EXP 13
4578: PUSH
4579: LD_INT 1
4581: ST_TO_ADDR
4582: GO 4585
4584: POP
// bonus_num := 4 ;
4585: LD_ADDR_EXP 14
4589: PUSH
4590: LD_INT 4
4592: ST_TO_ADDR
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ;
4593: LD_OWVAR 2
4597: PPUSH
4598: LD_INT 12
4600: PPUSH
4601: LD_INT 2
4603: PPUSH
4604: LD_INT 23
4606: PPUSH
4607: CALL_OW 468
// tmp := [ 500 , 3500 , 5750 , 10000 ] ;
4611: LD_ADDR_VAR 0 1
4615: PUSH
4616: LD_INT 500
4618: PUSH
4619: LD_INT 3500
4621: PUSH
4622: LD_INT 5750
4624: PUSH
4625: LD_INT 10000
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: ST_TO_ADDR
// repeat wait ( [ 5 5$00 , 6 6$00 , 7 7$00 ] [ Difficulty ] ) ;
4634: LD_INT 10500
4636: PUSH
4637: LD_INT 12600
4639: PUSH
4640: LD_INT 14700
4642: PUSH
4643: EMPTY
4644: LIST
4645: LIST
4646: LIST
4647: PUSH
4648: LD_OWVAR 67
4652: ARRAY
4653: PPUSH
4654: CALL_OW 67
// for i = 1 to tmp do
4658: LD_ADDR_VAR 0 2
4662: PUSH
4663: DOUBLE
4664: LD_INT 1
4666: DEC
4667: ST_TO_ADDR
4668: LD_VAR 0 1
4672: PUSH
4673: FOR_TO
4674: IFFALSE 4706
// if points >= tmp [ i ] then
4676: LD_EXP 10
4680: PUSH
4681: LD_VAR 0 1
4685: PUSH
4686: LD_VAR 0 2
4690: ARRAY
4691: GREATEREQUAL
4692: IFFALSE 4704
// bonus_num := i ;
4694: LD_ADDR_EXP 14
4698: PUSH
4699: LD_VAR 0 2
4703: ST_TO_ADDR
4704: GO 4673
4706: POP
4707: POP
// case Query ( QBonusInfo ) of 1 :
4708: LD_STRING QBonusInfo
4710: PPUSH
4711: CALL_OW 97
4715: PUSH
4716: LD_INT 1
4718: DOUBLE
4719: EQUAL
4720: IFTRUE 4724
4722: GO 4745
4724: POP
// SetArtifactUse ( your_side , art_use_exclamation , art_instant , main_base ) ; end ;
4725: LD_OWVAR 2
4729: PPUSH
4730: LD_INT 12
4732: PPUSH
4733: LD_INT 2
4735: PPUSH
4736: LD_INT 23
4738: PPUSH
4739: CALL_OW 468
4743: GO 4746
4745: POP
// until points >= 15000 ;
4746: LD_EXP 10
4750: PUSH
4751: LD_INT 15000
4753: GREATEREQUAL
4754: IFFALSE 4634
// end ;
4756: PPOPN 2
4758: END
// export function Win ; begin
4759: LD_INT 0
4761: PPUSH
// AddMedal ( med , 1 ) ;
4762: LD_STRING med
4764: PPUSH
4765: LD_INT 1
4767: PPUSH
4768: CALL_OW 101
// AddMedal ( med , 1 ) ;
4772: LD_STRING med
4774: PPUSH
4775: LD_INT 1
4777: PPUSH
4778: CALL_OW 101
// AddMedal ( med , 1 ) ;
4782: LD_STRING med
4784: PPUSH
4785: LD_INT 1
4787: PPUSH
4788: CALL_OW 101
// GiveMedals ( MAIN ) ;
4792: LD_STRING MAIN
4794: PPUSH
4795: CALL_OW 102
// YouWin ;
4799: CALL_OW 103
// end ; end_of_file
4803: LD_VAR 0 1
4807: RET
// export function PlaceHumanInBunker ( un , b ) ; var dir ; begin
4808: LD_INT 0
4810: PPUSH
4811: PPUSH
// dir := GetDir ( b ) ;
4812: LD_ADDR_VAR 0 4
4816: PUSH
4817: LD_VAR 0 2
4821: PPUSH
4822: CALL_OW 254
4826: ST_TO_ADDR
// if dir < 3 then
4827: LD_VAR 0 4
4831: PUSH
4832: LD_INT 3
4834: LESS
4835: IFFALSE 4853
// dir := dir + 3 else
4837: LD_ADDR_VAR 0 4
4841: PUSH
4842: LD_VAR 0 4
4846: PUSH
4847: LD_INT 3
4849: PLUS
4850: ST_TO_ADDR
4851: GO 4867
// dir := dir - 3 ;
4853: LD_ADDR_VAR 0 4
4857: PUSH
4858: LD_VAR 0 4
4862: PUSH
4863: LD_INT 3
4865: MINUS
4866: ST_TO_ADDR
// SetDir ( un , dir ) ;
4867: LD_VAR 0 1
4871: PPUSH
4872: LD_VAR 0 4
4876: PPUSH
4877: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4881: LD_VAR 0 1
4885: PPUSH
4886: LD_VAR 0 2
4890: PPUSH
4891: CALL_OW 52
// end ;
4895: LD_VAR 0 3
4899: RET
// export function Replace2 ( tab , j , k , value ) ; var i , tmp ; begin
4900: LD_INT 0
4902: PPUSH
4903: PPUSH
4904: PPUSH
// tmp := Replace ( tab [ j ] , k , value ) ;
4905: LD_ADDR_VAR 0 7
4909: PUSH
4910: LD_VAR 0 1
4914: PUSH
4915: LD_VAR 0 2
4919: ARRAY
4920: PPUSH
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_VAR 0 4
4930: PPUSH
4931: CALL_OW 1
4935: ST_TO_ADDR
// tab := Replace ( tab , j , tmp ) ;
4936: LD_ADDR_VAR 0 1
4940: PUSH
4941: LD_VAR 0 1
4945: PPUSH
4946: LD_VAR 0 2
4950: PPUSH
4951: LD_VAR 0 7
4955: PPUSH
4956: CALL_OW 1
4960: ST_TO_ADDR
// result := tab ;
4961: LD_ADDR_VAR 0 5
4965: PUSH
4966: LD_VAR 0 1
4970: ST_TO_ADDR
// end ;
4971: LD_VAR 0 5
4975: RET
// export function GetDriver ( veh ) ; var i , filter ; begin
4976: LD_INT 0
4978: PPUSH
4979: PPUSH
4980: PPUSH
// if not GetControl ( veh ) = control_manual then
4981: LD_VAR 0 1
4985: PPUSH
4986: CALL_OW 263
4990: PUSH
4991: LD_INT 1
4993: EQUAL
4994: NOT
4995: IFFALSE 5007
// result := false else
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: LD_INT 0
5004: ST_TO_ADDR
5005: GO 5152
// if veh in FilterAllUnits ( [ f_empty ] ) then
5007: LD_VAR 0 1
5011: PUSH
5012: LD_INT 58
5014: PUSH
5015: EMPTY
5016: LIST
5017: PPUSH
5018: CALL_OW 69
5022: IN
5023: IFFALSE 5035
// result := false else
5025: LD_ADDR_VAR 0 2
5029: PUSH
5030: LD_INT 0
5032: ST_TO_ADDR
5033: GO 5152
// begin filter := FilterAllUnits ( [ [ f_side , GetSide ( veh ) ] , [ f_driving ] ] ) ;
5035: LD_ADDR_VAR 0 4
5039: PUSH
5040: LD_INT 22
5042: PUSH
5043: LD_VAR 0 1
5047: PPUSH
5048: CALL_OW 255
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: LD_INT 55
5059: PUSH
5060: EMPTY
5061: LIST
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 69
5071: ST_TO_ADDR
// if not filter then
5072: LD_VAR 0 4
5076: NOT
5077: IFFALSE 5089
// result := false else
5079: LD_ADDR_VAR 0 2
5083: PUSH
5084: LD_INT 0
5086: ST_TO_ADDR
5087: GO 5152
// for i = 1 to filter do
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: DOUBLE
5095: LD_INT 1
5097: DEC
5098: ST_TO_ADDR
5099: LD_VAR 0 4
5103: PUSH
5104: FOR_TO
5105: IFFALSE 5150
// if IsDriver ( filter [ i ] ) = veh then
5107: LD_VAR 0 4
5111: PUSH
5112: LD_VAR 0 3
5116: ARRAY
5117: PPUSH
5118: CALL 62222 0 1
5122: PUSH
5123: LD_VAR 0 1
5127: EQUAL
5128: IFFALSE 5148
// begin result := filter [ i ] ;
5130: LD_ADDR_VAR 0 2
5134: PUSH
5135: LD_VAR 0 4
5139: PUSH
5140: LD_VAR 0 3
5144: ARRAY
5145: ST_TO_ADDR
// break ;
5146: GO 5150
// end ;
5148: GO 5104
5150: POP
5151: POP
// end ; end ; end_of_file
5152: LD_VAR 0 2
5156: RET
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5157: LD_VAR 0 1
5161: PPUSH
5162: CALL 22849 0 1
// if un = legion_commander then
5166: LD_VAR 0 1
5170: PUSH
5171: LD_EXP 1
5175: EQUAL
5176: IFFALSE 5185
// YouLost ( commanderDied ) ;
5178: LD_STRING commanderDied
5180: PPUSH
5181: CALL_OW 104
// if un in [ legion_commander , main_base ] then
5185: LD_VAR 0 1
5189: PUSH
5190: LD_EXP 1
5194: PUSH
5195: LD_INT 23
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: IN
5202: IFFALSE 5212
// game_over := true ;
5204: LD_ADDR_EXP 7
5208: PUSH
5209: LD_INT 1
5211: ST_TO_ADDR
// if un = al_commander then
5212: LD_VAR 0 1
5216: PUSH
5217: LD_EXP 5
5221: EQUAL
5222: IFFALSE 5228
// ChangeSide ( ) ;
5224: CALL 2738 0 0
// if GetSide ( un ) = 7 then
5228: LD_VAR 0 1
5232: PPUSH
5233: CALL_OW 255
5237: PUSH
5238: LD_INT 7
5240: EQUAL
5241: IFFALSE 5359
// begin if GetClass ( un ) = class_apeman then
5243: LD_VAR 0 1
5247: PPUSH
5248: CALL_OW 257
5252: PUSH
5253: LD_INT 12
5255: EQUAL
5256: IFFALSE 5272
// points := points + 6 ;
5258: LD_ADDR_EXP 10
5262: PUSH
5263: LD_EXP 10
5267: PUSH
5268: LD_INT 6
5270: PLUS
5271: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_kamikaze then
5272: LD_VAR 0 1
5276: PPUSH
5277: CALL_OW 257
5281: PUSH
5282: LD_INT 17
5284: EQUAL
5285: IFFALSE 5301
// points := points + 11 ;
5287: LD_ADDR_EXP 10
5291: PUSH
5292: LD_EXP 10
5296: PUSH
5297: LD_INT 11
5299: PLUS
5300: ST_TO_ADDR
// if GetClass ( un ) = class_apeman_soldier then
5301: LD_VAR 0 1
5305: PPUSH
5306: CALL_OW 257
5310: PUSH
5311: LD_INT 15
5313: EQUAL
5314: IFFALSE 5330
// points := points + 14 ;
5316: LD_ADDR_EXP 10
5320: PUSH
5321: LD_EXP 10
5325: PUSH
5326: LD_INT 14
5328: PLUS
5329: ST_TO_ADDR
// if GetType ( un ) = unit_vehicle then
5330: LD_VAR 0 1
5334: PPUSH
5335: CALL_OW 247
5339: PUSH
5340: LD_INT 2
5342: EQUAL
5343: IFFALSE 5359
// points := points + 50 ;
5345: LD_ADDR_EXP 10
5349: PUSH
5350: LD_EXP 10
5354: PUSH
5355: LD_INT 50
5357: PLUS
5358: ST_TO_ADDR
// end ; end ;
5359: PPOPN 1
5361: END
// every 0 0$01 trigger GetLives ( al_commander ) < 1000 do
5362: LD_EXP 5
5366: PPUSH
5367: CALL_OW 256
5371: PUSH
5372: LD_INT 1000
5374: LESS
5375: IFFALSE 5407
5377: GO 5379
5379: DISABLE
// if GetSide ( UnitShoot ( al_commander ) ) = 8 then
5380: LD_EXP 5
5384: PPUSH
5385: CALL_OW 504
5389: PPUSH
5390: CALL_OW 255
5394: PUSH
5395: LD_INT 8
5397: EQUAL
5398: IFFALSE 5407
// YouLost ( FriendlyFire ) ;
5400: LD_STRING FriendlyFire
5402: PPUSH
5403: CALL_OW 104
5407: END
// on DialogueSkipped ( value ) do var i ;
5408: LD_INT 0
5410: PPUSH
// begin RemoveUnit ( potter ) ;
5411: LD_EXP 4
5415: PPUSH
5416: CALL_OW 64
// ComExitBuilding ( [ l1 , l2 ] ) ;
5420: LD_EXP 2
5424: PUSH
5425: LD_EXP 3
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: PPUSH
5434: CALL_OW 122
// Wait ( 1 ) ;
5438: LD_INT 1
5440: PPUSH
5441: CALL_OW 67
// TeleportUnit ( l1 , 107 , 53 , 0 , false ) ;
5445: LD_EXP 2
5449: PPUSH
5450: LD_INT 107
5452: PPUSH
5453: LD_INT 53
5455: PPUSH
5456: LD_INT 0
5458: PPUSH
5459: LD_INT 0
5461: PPUSH
5462: CALL_OW 483
// TeleportUnit ( l2 , 108 , 53 , 0 , false ) ;
5466: LD_EXP 3
5470: PPUSH
5471: LD_INT 108
5473: PPUSH
5474: LD_INT 53
5476: PPUSH
5477: LD_INT 0
5479: PPUSH
5480: LD_INT 0
5482: PPUSH
5483: CALL_OW 483
// Wait ( 1 ) ;
5487: LD_INT 1
5489: PPUSH
5490: CALL_OW 67
// ComTurnXY ( [ l1 , l2 ] , 108 , 1 ) ;
5494: LD_EXP 2
5498: PUSH
5499: LD_EXP 3
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PPUSH
5508: LD_INT 108
5510: PPUSH
5511: LD_INT 1
5513: PPUSH
5514: CALL_OW 118
// end ;
5518: PPOPN 2
5520: END
// on ArtifactUsed ( side , icon , p3 , p4 ) do var bonus , off , units , crates , tmp , xy , i , lab ;
5521: LD_INT 0
5523: PPUSH
5524: PPUSH
5525: PPUSH
5526: PPUSH
5527: PPUSH
5528: PPUSH
5529: PPUSH
5530: PPUSH
// begin xy := FindArtifact ( 2 ) ;
5531: LD_ADDR_VAR 0 10
5535: PUSH
5536: LD_INT 2
5538: PPUSH
5539: CALL_OW 469
5543: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
5544: LD_ADDR_VAR 0 12
5548: PUSH
5549: LD_INT 22
5551: PUSH
5552: LD_OWVAR 2
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 2
5563: PUSH
5564: LD_INT 30
5566: PUSH
5567: LD_INT 8
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: LD_INT 30
5576: PUSH
5577: LD_INT 11
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: LIST
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: PPUSH
5593: CALL_OW 69
5597: PPUSH
5598: LD_VAR 0 10
5602: PUSH
5603: LD_INT 1
5605: ARRAY
5606: PPUSH
5607: LD_VAR 0 10
5611: PUSH
5612: LD_INT 2
5614: ARRAY
5615: PPUSH
5616: CALL_OW 73
5620: ST_TO_ADDR
// if icon = art_exp_left then
5621: LD_VAR 0 2
5625: PUSH
5626: LD_INT 1
5628: EQUAL
5629: IFFALSE 5684
// begin SetSpecResearch ( lab , time_res_art , true ) ;
5631: LD_VAR 0 12
5635: PPUSH
5636: LD_EXP 9
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: CALL_OW 486
// SetWorkingProgress ( lab , artifact_progress ) ;
5648: LD_VAR 0 12
5652: PPUSH
5653: LD_EXP 17
5657: PPUSH
5658: CALL_OW 329
// SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
5662: LD_OWVAR 2
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 0
5672: PPUSH
5673: LD_VAR 0 12
5677: PPUSH
5678: CALL_OW 468
// end else
5682: GO 6465
// begin DialogueOn ;
5684: CALL_OW 6
// uc_side := 8 ;
5688: LD_ADDR_OWVAR 20
5692: PUSH
5693: LD_INT 8
5695: ST_TO_ADDR
// uc_nation := 2 ;
5696: LD_ADDR_OWVAR 21
5700: PUSH
5701: LD_INT 2
5703: ST_TO_ADDR
// bonus := QBonus & bonus_num ;
5704: LD_ADDR_VAR 0 5
5708: PUSH
5709: LD_STRING QBonus
5711: PUSH
5712: LD_EXP 14
5716: STR
5717: ST_TO_ADDR
// off := true ;
5718: LD_ADDR_VAR 0 6
5722: PUSH
5723: LD_INT 1
5725: ST_TO_ADDR
// units := [ ] ;
5726: LD_ADDR_VAR 0 7
5730: PUSH
5731: EMPTY
5732: ST_TO_ADDR
// crates := 0 ;
5733: LD_ADDR_VAR 0 8
5737: PUSH
5738: LD_INT 0
5740: ST_TO_ADDR
// SayRadio ( Vervecken , DVr-2 ) ;
5741: LD_EXP 12
5745: PPUSH
5746: LD_STRING DVr-2
5748: PPUSH
5749: CALL_OW 94
// wait ( 0 0$1 ) ;
5753: LD_INT 35
5755: PPUSH
5756: CALL_OW 67
// case Query ( bonus ) of 1 :
5760: LD_VAR 0 5
5764: PPUSH
5765: CALL_OW 97
5769: PUSH
5770: LD_INT 1
5772: DOUBLE
5773: EQUAL
5774: IFTRUE 5778
5776: GO 5863
5778: POP
// begin tmp := [ 1 , 2 , 5 , 8 ] [ bonus_num ] ;
5779: LD_ADDR_VAR 0 9
5783: PUSH
5784: LD_INT 1
5786: PUSH
5787: LD_INT 2
5789: PUSH
5790: LD_INT 5
5792: PUSH
5793: LD_INT 8
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: PUSH
5802: LD_EXP 14
5806: ARRAY
5807: ST_TO_ADDR
// for i = 1 to tmp do
5808: LD_ADDR_VAR 0 11
5812: PUSH
5813: DOUBLE
5814: LD_INT 1
5816: DEC
5817: ST_TO_ADDR
5818: LD_VAR 0 9
5822: PUSH
5823: FOR_TO
5824: IFFALSE 5859
// begin PrepareHuman ( false , class_apeman_soldier , tmp ) ;
5826: LD_INT 0
5828: PPUSH
5829: LD_INT 15
5831: PPUSH
5832: LD_VAR 0 9
5836: PPUSH
5837: CALL_OW 380
// units := units ^ CreateHuman ;
5841: LD_ADDR_VAR 0 7
5845: PUSH
5846: LD_VAR 0 7
5850: PUSH
5851: CALL_OW 44
5855: ADD
5856: ST_TO_ADDR
// end ;
5857: GO 5823
5859: POP
5860: POP
// end ; 2 :
5861: GO 6271
5863: LD_INT 2
5865: DOUBLE
5866: EQUAL
5867: IFTRUE 5871
5869: GO 5903
5871: POP
// begin crates := [ 100 , 150 , 350 , 500 ] [ bonus_num ] ;
5872: LD_ADDR_VAR 0 8
5876: PUSH
5877: LD_INT 100
5879: PUSH
5880: LD_INT 150
5882: PUSH
5883: LD_INT 350
5885: PUSH
5886: LD_INT 500
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PUSH
5895: LD_EXP 14
5899: ARRAY
5900: ST_TO_ADDR
// end ; 3 :
5901: GO 6271
5903: LD_INT 3
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 6251
5911: POP
// begin if bonus_num = 1 then
5912: LD_EXP 14
5916: PUSH
5917: LD_INT 1
5919: EQUAL
5920: IFFALSE 5930
// ignore_wave := true ;
5922: LD_ADDR_EXP 15
5926: PUSH
5927: LD_INT 1
5929: ST_TO_ADDR
// if bonus_num = 2 then
5930: LD_EXP 14
5934: PUSH
5935: LD_INT 2
5937: EQUAL
5938: IFFALSE 6058
// begin for i = 1 to 2 do
5940: LD_ADDR_VAR 0 11
5944: PUSH
5945: DOUBLE
5946: LD_INT 1
5948: DEC
5949: ST_TO_ADDR
5950: LD_INT 2
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6056
// begin uc_nation := nation_arabian ;
5956: LD_ADDR_OWVAR 21
5960: PUSH
5961: LD_INT 2
5963: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5964: LD_ADDR_OWVAR 37
5968: PUSH
5969: LD_INT 14
5971: ST_TO_ADDR
// vc_engine := engine_siberite ;
5972: LD_ADDR_OWVAR 39
5976: PUSH
5977: LD_INT 3
5979: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
5980: LD_ADDR_OWVAR 38
5984: PUSH
5985: LD_INT 2
5987: PUSH
5988: LD_INT 5
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: LD_INT 1
5997: PPUSH
5998: LD_INT 2
6000: PPUSH
6001: CALL_OW 12
6005: ARRAY
6006: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_gatling_gun ] [ rand ( 1 , 3 ) ] ;
6007: LD_ADDR_OWVAR 40
6011: PUSH
6012: LD_INT 28
6014: PUSH
6015: LD_INT 27
6017: PUSH
6018: LD_INT 25
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 1
6028: PPUSH
6029: LD_INT 3
6031: PPUSH
6032: CALL_OW 12
6036: ARRAY
6037: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6038: LD_ADDR_VAR 0 7
6042: PUSH
6043: LD_VAR 0 7
6047: PUSH
6048: CALL_OW 45
6052: ADD
6053: ST_TO_ADDR
// end ;
6054: GO 5953
6056: POP
6057: POP
// end ; if bonus_num = 3 then
6058: LD_EXP 14
6062: PUSH
6063: LD_INT 3
6065: EQUAL
6066: IFFALSE 6190
// begin for i = 1 to 4 do
6068: LD_ADDR_VAR 0 11
6072: PUSH
6073: DOUBLE
6074: LD_INT 1
6076: DEC
6077: ST_TO_ADDR
6078: LD_INT 4
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6188
// begin uc_nation := nation_arabian ;
6084: LD_ADDR_OWVAR 21
6088: PUSH
6089: LD_INT 2
6091: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
6092: LD_ADDR_OWVAR 37
6096: PUSH
6097: LD_INT 14
6099: ST_TO_ADDR
// vc_engine := engine_siberite ;
6100: LD_ADDR_OWVAR 39
6104: PUSH
6105: LD_INT 3
6107: ST_TO_ADDR
// vc_control := [ control_remote , control_apeman ] [ rand ( 1 , 2 ) ] ;
6108: LD_ADDR_OWVAR 38
6112: PUSH
6113: LD_INT 2
6115: PUSH
6116: LD_INT 5
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 1
6125: PPUSH
6126: LD_INT 2
6128: PPUSH
6129: CALL_OW 12
6133: ARRAY
6134: ST_TO_ADDR
// vc_weapon := [ ar_rocket_launcher , ar_gun , ar_rocket_launcher , ar_gatling_gun ] [ rand ( 1 , 4 ) ] ;
6135: LD_ADDR_OWVAR 40
6139: PUSH
6140: LD_INT 28
6142: PUSH
6143: LD_INT 27
6145: PUSH
6146: LD_INT 28
6148: PUSH
6149: LD_INT 25
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_INT 4
6163: PPUSH
6164: CALL_OW 12
6168: ARRAY
6169: ST_TO_ADDR
// units := units ^ CreateVehicle ;
6170: LD_ADDR_VAR 0 7
6174: PUSH
6175: LD_VAR 0 7
6179: PUSH
6180: CALL_OW 45
6184: ADD
6185: ST_TO_ADDR
// end ;
6186: GO 6081
6188: POP
6189: POP
// end ; if bonus_num = 4 then
6190: LD_EXP 14
6194: PUSH
6195: LD_INT 4
6197: EQUAL
6198: IFFALSE 6249
// for i = 1 to 3 do
6200: LD_ADDR_VAR 0 11
6204: PUSH
6205: DOUBLE
6206: LD_INT 1
6208: DEC
6209: ST_TO_ADDR
6210: LD_INT 3
6212: PUSH
6213: FOR_TO
6214: IFFALSE 6247
// begin PrepareHuman ( false , 3 , 8 ) ;
6216: LD_INT 0
6218: PPUSH
6219: LD_INT 3
6221: PPUSH
6222: LD_INT 8
6224: PPUSH
6225: CALL_OW 380
// units := units ^ CreateHuman ;
6229: LD_ADDR_VAR 0 7
6233: PUSH
6234: LD_VAR 0 7
6238: PUSH
6239: CALL_OW 44
6243: ADD
6244: ST_TO_ADDR
// end ;
6245: GO 6213
6247: POP
6248: POP
// end ; 4 :
6249: GO 6271
6251: LD_INT 4
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6270
6259: POP
// off := false ; end ;
6260: LD_ADDR_VAR 0 6
6264: PUSH
6265: LD_INT 0
6267: ST_TO_ADDR
6268: GO 6271
6270: POP
// DialogueOff ;
6271: CALL_OW 7
// if not off then
6275: LD_VAR 0 6
6279: NOT
6280: IFFALSE 6286
// exit else
6282: GO 6465
6284: GO 6339
// begin SetArtifactUse ( your_side , art_use_exclamation , art_no , main_base ) ;
6286: LD_OWVAR 2
6290: PPUSH
6291: LD_INT 12
6293: PPUSH
6294: LD_INT 0
6296: PPUSH
6297: LD_INT 23
6299: PPUSH
6300: CALL_OW 468
// SayRadio ( Vervecken , [ DVr-3 , DVr-3a , DVr-3b ] [ rand ( 1 , 3 ) ] ) ;
6304: LD_EXP 12
6308: PPUSH
6309: LD_STRING DVr-3
6311: PUSH
6312: LD_STRING DVr-3a
6314: PUSH
6315: LD_STRING DVr-3b
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 1
6325: PPUSH
6326: LD_INT 3
6328: PPUSH
6329: CALL_OW 12
6333: ARRAY
6334: PPUSH
6335: CALL_OW 94
// end ; if units then
6339: LD_VAR 0 7
6343: IFFALSE 6407
// for i in units do
6345: LD_ADDR_VAR 0 11
6349: PUSH
6350: LD_VAR 0 7
6354: PUSH
6355: FOR_IN
6356: IFFALSE 6405
// begin PlaceUnitXYR ( i , 92 , 49 , 20 , false ) ;
6358: LD_VAR 0 11
6362: PPUSH
6363: LD_INT 92
6365: PPUSH
6366: LD_INT 49
6368: PPUSH
6369: LD_INT 20
6371: PPUSH
6372: LD_INT 0
6374: PPUSH
6375: CALL_OW 50
// EffectTeleport ( GetX ( i ) , GetY ( i ) ) ;
6379: LD_VAR 0 11
6383: PPUSH
6384: CALL_OW 250
6388: PPUSH
6389: LD_VAR 0 11
6393: PPUSH
6394: CALL_OW 251
6398: PPUSH
6399: CALL_OW 494
// end ;
6403: GO 6355
6405: POP
6406: POP
// if crates then
6407: LD_VAR 0 8
6411: IFFALSE 6465
// for i = 1 to ( crates div 50 ) do
6413: LD_ADDR_VAR 0 11
6417: PUSH
6418: DOUBLE
6419: LD_INT 1
6421: DEC
6422: ST_TO_ADDR
6423: LD_VAR 0 8
6427: PUSH
6428: LD_INT 50
6430: DIV
6431: PUSH
6432: FOR_TO
6433: IFFALSE 6463
// begin CreateCratesXYR ( 5 , 92 , 49 , 30 , true ) ;
6435: LD_INT 5
6437: PPUSH
6438: LD_INT 92
6440: PPUSH
6441: LD_INT 49
6443: PPUSH
6444: LD_INT 30
6446: PPUSH
6447: LD_INT 1
6449: PPUSH
6450: CALL_OW 56
// wait ( 0 0$02 ) ;
6454: LD_INT 70
6456: PPUSH
6457: CALL_OW 67
// end ;
6461: GO 6432
6463: POP
6464: POP
// end ; end ;
6465: PPOPN 12
6467: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
6468: LD_VAR 0 1
6472: PPUSH
6473: LD_VAR 0 2
6477: PPUSH
6478: LD_VAR 0 3
6482: PPUSH
6483: CALL 22945 0 3
// end ;
6487: PPOPN 3
6489: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
6490: LD_VAR 0 1
6494: PPUSH
6495: CALL 22953 0 1
// end ;
6499: PPOPN 1
6501: END
// on ArtifactResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6502: LD_VAR 0 1
6506: PPUSH
6507: CALL_OW 255
6511: PUSH
6512: LD_OWVAR 2
6516: EQUAL
6517: IFFALSE 6527
// player_res_art := true ;
6519: LD_ADDR_EXP 8
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// end ;
6527: PPOPN 1
6529: END
// every 0 0$03 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_siberium ] ] ] ) do var xy , lab ;
6530: LD_INT 22
6532: PUSH
6533: LD_OWVAR 2
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: LD_INT 2
6544: PUSH
6545: LD_INT 30
6547: PUSH
6548: LD_INT 7
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: LD_INT 30
6557: PUSH
6558: LD_INT 8
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 30
6567: PUSH
6568: LD_INT 11
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PPUSH
6585: CALL_OW 69
6589: IFFALSE 6822
6591: GO 6593
6593: DISABLE
6594: LD_INT 0
6596: PPUSH
6597: PPUSH
// begin enable ;
6598: ENABLE
// xy := FindArtifact ( 2 ) ;
6599: LD_ADDR_VAR 0 1
6603: PUSH
6604: LD_INT 2
6606: PPUSH
6607: CALL_OW 469
6611: ST_TO_ADDR
// lab := NearestUnitToXY ( FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_siberium ] ] ] ) , xy [ 1 ] , xy [ 2 ] ) ;
6612: LD_ADDR_VAR 0 2
6616: PUSH
6617: LD_INT 22
6619: PUSH
6620: LD_OWVAR 2
6624: PUSH
6625: EMPTY
6626: LIST
6627: LIST
6628: PUSH
6629: LD_INT 2
6631: PUSH
6632: LD_INT 30
6634: PUSH
6635: LD_INT 8
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 30
6644: PUSH
6645: LD_INT 7
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PUSH
6652: LD_INT 30
6654: PUSH
6655: LD_INT 11
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PPUSH
6672: CALL_OW 69
6676: PPUSH
6677: LD_VAR 0 1
6681: PUSH
6682: LD_INT 1
6684: ARRAY
6685: PPUSH
6686: LD_VAR 0 1
6690: PUSH
6691: LD_INT 2
6693: ARRAY
6694: PPUSH
6695: CALL_OW 73
6699: ST_TO_ADDR
// if player_artifact_ready = false then
6700: LD_EXP 16
6704: PUSH
6705: LD_INT 0
6707: EQUAL
6708: IFFALSE 6822
// if GetDistUnitXY ( lab , xy [ 1 ] , xy [ 2 ] ) < 6 then
6710: LD_VAR 0 2
6714: PPUSH
6715: LD_VAR 0 1
6719: PUSH
6720: LD_INT 1
6722: ARRAY
6723: PPUSH
6724: LD_VAR 0 1
6728: PUSH
6729: LD_INT 2
6731: ARRAY
6732: PPUSH
6733: CALL_OW 297
6737: PUSH
6738: LD_INT 6
6740: LESS
6741: IFFALSE 6802
// begin if BuildingStatus ( lab ) = bs_idle then
6743: LD_VAR 0 2
6747: PPUSH
6748: CALL_OW 461
6752: PUSH
6753: LD_INT 2
6755: EQUAL
6756: IFFALSE 6780
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) else
6758: LD_OWVAR 2
6762: PPUSH
6763: LD_INT 1
6765: PPUSH
6766: LD_INT 2
6768: PPUSH
6769: LD_VAR 0 2
6773: PPUSH
6774: CALL_OW 468
6778: GO 6800
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6780: LD_OWVAR 2
6784: PPUSH
6785: LD_INT 1
6787: PPUSH
6788: LD_INT 1
6790: PPUSH
6791: LD_VAR 0 2
6795: PPUSH
6796: CALL_OW 468
// end else
6800: GO 6822
// SetArtifactUse ( your_side , art_exp_left , art_gray , lab ) ;
6802: LD_OWVAR 2
6806: PPUSH
6807: LD_INT 1
6809: PPUSH
6810: LD_INT 1
6812: PPUSH
6813: LD_VAR 0 2
6817: PPUSH
6818: CALL_OW 468
// end ;
6822: PPOPN 2
6824: END
// on SpecResearchComplete ( lab ) do begin if GetSide ( lab ) = your_side then
6825: LD_VAR 0 1
6829: PPUSH
6830: CALL_OW 255
6834: PUSH
6835: LD_OWVAR 2
6839: EQUAL
6840: IFFALSE 6866
// begin SetArtifactUse ( your_side , art_exp_left , art_no , lab ) ;
6842: LD_OWVAR 2
6846: PPUSH
6847: LD_INT 1
6849: PPUSH
6850: LD_INT 0
6852: PPUSH
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 468
// Win ;
6862: CALL 4759 0 0
// end ; end ;
6866: PPOPN 1
6868: END
// on SpecResearchCancel ( lab , progress ) do begin artifact_progress := progress ;
6869: LD_ADDR_EXP 17
6873: PUSH
6874: LD_VAR 0 2
6878: ST_TO_ADDR
// SetArtifactUse ( your_side , art_exp_left , art_instant , lab ) ;
6879: LD_OWVAR 2
6883: PPUSH
6884: LD_INT 1
6886: PPUSH
6887: LD_INT 2
6889: PPUSH
6890: LD_VAR 0 1
6894: PPUSH
6895: CALL_OW 468
// end ;
6899: PPOPN 2
6901: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
6902: LD_VAR 0 1
6906: PPUSH
6907: LD_VAR 0 2
6911: PPUSH
6912: CALL 22969 0 2
// end ; end_of_file
6916: PPOPN 2
6918: END
// every 0 0$01 trigger not game_over do
6919: LD_EXP 7
6923: NOT
6924: IFFALSE 6957
6926: GO 6928
6928: DISABLE
// begin enable ;
6929: ENABLE
// display_strings := [ #tick , tick , #points , points ] ;
6930: LD_ADDR_OWVAR 47
6934: PUSH
6935: LD_STRING #tick
6937: PUSH
6938: LD_OWVAR 1
6942: PUSH
6943: LD_STRING #points
6945: PUSH
6946: LD_EXP 10
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: ST_TO_ADDR
// end ;
6957: END
// every 0 0$01 trigger game_over do
6958: LD_EXP 7
6962: IFFALSE 7021
6964: GO 6966
6966: DISABLE
// begin Wait ( 0 0$02 ) ;
6967: LD_INT 70
6969: PPUSH
6970: CALL_OW 67
// DialogueOn ;
6974: CALL_OW 6
// display_strings := [ #game-points , profile_name , points , #game-time , tick , #game-difficulty , difficulty ] ;
6978: LD_ADDR_OWVAR 47
6982: PUSH
6983: LD_STRING #game-points
6985: PUSH
6986: LD_OWVAR 78
6990: PUSH
6991: LD_EXP 10
6995: PUSH
6996: LD_STRING #game-time
6998: PUSH
6999: LD_OWVAR 1
7003: PUSH
7004: LD_STRING #game-difficulty
7006: PUSH
7007: LD_OWVAR 67
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: ST_TO_ADDR
// end ; end_of_file
7021: END
// every 2 2$10 + 0 0$30 trigger tick < 25 25$00 do
7022: LD_OWVAR 1
7026: PUSH
7027: LD_INT 52500
7029: LESS
7030: IFFALSE 7054
7032: GO 7034
7034: DISABLE
// begin enable ;
7035: ENABLE
// CreateCratesAnywhere ( rand ( 1 , 5 ) , true ) ;
7036: LD_INT 1
7038: PPUSH
7039: LD_INT 5
7041: PPUSH
7042: CALL_OW 12
7046: PPUSH
7047: LD_INT 1
7049: PPUSH
7050: CALL_OW 57
// end ; end_of_file end_of_file
7054: END
// export globalGameSaveCounter ; every 0 0$1 do
7055: GO 7057
7057: DISABLE
// begin enable ;
7058: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7059: LD_STRING updateTimer(
7061: PUSH
7062: LD_OWVAR 1
7066: STR
7067: PUSH
7068: LD_STRING );
7070: STR
7071: PPUSH
7072: CALL_OW 559
// end ;
7076: END
// every 0 0$1 do
7077: GO 7079
7079: DISABLE
// begin globalGameSaveCounter := 0 ;
7080: LD_ADDR_EXP 18
7084: PUSH
7085: LD_INT 0
7087: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7088: LD_STRING setGameSaveCounter(0)
7090: PPUSH
7091: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7095: LD_STRING initStreamRollete();
7097: PPUSH
7098: CALL_OW 559
// InitStreamMode ;
7102: CALL 8428 0 0
// DefineStreamItems ( false ) ;
7106: LD_INT 0
7108: PPUSH
7109: CALL 8892 0 1
// end ;
7113: END
// export function SOS_MapStart ( ) ; begin
7114: LD_INT 0
7116: PPUSH
// if streamModeActive then
7117: LD_EXP 19
7121: IFFALSE 7130
// DefineStreamItems ( true ) ;
7123: LD_INT 1
7125: PPUSH
7126: CALL 8892 0 1
// UpdateLuaVariables ( ) ;
7130: CALL 7147 0 0
// UpdateFactoryWaypoints ( ) ;
7134: CALL 21753 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7138: CALL 22010 0 0
// end ;
7142: LD_VAR 0 1
7146: RET
// function UpdateLuaVariables ( ) ; begin
7147: LD_INT 0
7149: PPUSH
// if globalGameSaveCounter then
7150: LD_EXP 18
7154: IFFALSE 7188
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7156: LD_ADDR_EXP 18
7160: PUSH
7161: LD_EXP 18
7165: PPUSH
7166: CALL 65967 0 1
7170: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7171: LD_STRING setGameSaveCounter(
7173: PUSH
7174: LD_EXP 18
7178: STR
7179: PUSH
7180: LD_STRING )
7182: STR
7183: PPUSH
7184: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7188: LD_STRING setGameDifficulty(
7190: PUSH
7191: LD_OWVAR 67
7195: STR
7196: PUSH
7197: LD_STRING )
7199: STR
7200: PPUSH
7201: CALL_OW 559
// end ;
7205: LD_VAR 0 1
7209: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7210: LD_INT 0
7212: PPUSH
// if p2 = stream_mode then
7213: LD_VAR 0 2
7217: PUSH
7218: LD_INT 100
7220: EQUAL
7221: IFFALSE 8224
// begin if not StreamModeActive then
7223: LD_EXP 19
7227: NOT
7228: IFFALSE 7238
// StreamModeActive := true ;
7230: LD_ADDR_EXP 19
7234: PUSH
7235: LD_INT 1
7237: ST_TO_ADDR
// if p3 = 0 then
7238: LD_VAR 0 3
7242: PUSH
7243: LD_INT 0
7245: EQUAL
7246: IFFALSE 7252
// InitStreamMode ;
7248: CALL 8428 0 0
// if p3 = 1 then
7252: LD_VAR 0 3
7256: PUSH
7257: LD_INT 1
7259: EQUAL
7260: IFFALSE 7270
// sRocket := true ;
7262: LD_ADDR_EXP 24
7266: PUSH
7267: LD_INT 1
7269: ST_TO_ADDR
// if p3 = 2 then
7270: LD_VAR 0 3
7274: PUSH
7275: LD_INT 2
7277: EQUAL
7278: IFFALSE 7288
// sSpeed := true ;
7280: LD_ADDR_EXP 23
7284: PUSH
7285: LD_INT 1
7287: ST_TO_ADDR
// if p3 = 3 then
7288: LD_VAR 0 3
7292: PUSH
7293: LD_INT 3
7295: EQUAL
7296: IFFALSE 7306
// sEngine := true ;
7298: LD_ADDR_EXP 25
7302: PUSH
7303: LD_INT 1
7305: ST_TO_ADDR
// if p3 = 4 then
7306: LD_VAR 0 3
7310: PUSH
7311: LD_INT 4
7313: EQUAL
7314: IFFALSE 7324
// sSpec := true ;
7316: LD_ADDR_EXP 22
7320: PUSH
7321: LD_INT 1
7323: ST_TO_ADDR
// if p3 = 5 then
7324: LD_VAR 0 3
7328: PUSH
7329: LD_INT 5
7331: EQUAL
7332: IFFALSE 7342
// sLevel := true ;
7334: LD_ADDR_EXP 26
7338: PUSH
7339: LD_INT 1
7341: ST_TO_ADDR
// if p3 = 6 then
7342: LD_VAR 0 3
7346: PUSH
7347: LD_INT 6
7349: EQUAL
7350: IFFALSE 7360
// sArmoury := true ;
7352: LD_ADDR_EXP 27
7356: PUSH
7357: LD_INT 1
7359: ST_TO_ADDR
// if p3 = 7 then
7360: LD_VAR 0 3
7364: PUSH
7365: LD_INT 7
7367: EQUAL
7368: IFFALSE 7378
// sRadar := true ;
7370: LD_ADDR_EXP 28
7374: PUSH
7375: LD_INT 1
7377: ST_TO_ADDR
// if p3 = 8 then
7378: LD_VAR 0 3
7382: PUSH
7383: LD_INT 8
7385: EQUAL
7386: IFFALSE 7396
// sBunker := true ;
7388: LD_ADDR_EXP 29
7392: PUSH
7393: LD_INT 1
7395: ST_TO_ADDR
// if p3 = 9 then
7396: LD_VAR 0 3
7400: PUSH
7401: LD_INT 9
7403: EQUAL
7404: IFFALSE 7414
// sHack := true ;
7406: LD_ADDR_EXP 30
7410: PUSH
7411: LD_INT 1
7413: ST_TO_ADDR
// if p3 = 10 then
7414: LD_VAR 0 3
7418: PUSH
7419: LD_INT 10
7421: EQUAL
7422: IFFALSE 7432
// sFire := true ;
7424: LD_ADDR_EXP 31
7428: PUSH
7429: LD_INT 1
7431: ST_TO_ADDR
// if p3 = 11 then
7432: LD_VAR 0 3
7436: PUSH
7437: LD_INT 11
7439: EQUAL
7440: IFFALSE 7450
// sRefresh := true ;
7442: LD_ADDR_EXP 32
7446: PUSH
7447: LD_INT 1
7449: ST_TO_ADDR
// if p3 = 12 then
7450: LD_VAR 0 3
7454: PUSH
7455: LD_INT 12
7457: EQUAL
7458: IFFALSE 7468
// sExp := true ;
7460: LD_ADDR_EXP 33
7464: PUSH
7465: LD_INT 1
7467: ST_TO_ADDR
// if p3 = 13 then
7468: LD_VAR 0 3
7472: PUSH
7473: LD_INT 13
7475: EQUAL
7476: IFFALSE 7486
// sDepot := true ;
7478: LD_ADDR_EXP 34
7482: PUSH
7483: LD_INT 1
7485: ST_TO_ADDR
// if p3 = 14 then
7486: LD_VAR 0 3
7490: PUSH
7491: LD_INT 14
7493: EQUAL
7494: IFFALSE 7504
// sFlag := true ;
7496: LD_ADDR_EXP 35
7500: PUSH
7501: LD_INT 1
7503: ST_TO_ADDR
// if p3 = 15 then
7504: LD_VAR 0 3
7508: PUSH
7509: LD_INT 15
7511: EQUAL
7512: IFFALSE 7522
// sKamikadze := true ;
7514: LD_ADDR_EXP 43
7518: PUSH
7519: LD_INT 1
7521: ST_TO_ADDR
// if p3 = 16 then
7522: LD_VAR 0 3
7526: PUSH
7527: LD_INT 16
7529: EQUAL
7530: IFFALSE 7540
// sTroll := true ;
7532: LD_ADDR_EXP 44
7536: PUSH
7537: LD_INT 1
7539: ST_TO_ADDR
// if p3 = 17 then
7540: LD_VAR 0 3
7544: PUSH
7545: LD_INT 17
7547: EQUAL
7548: IFFALSE 7558
// sSlow := true ;
7550: LD_ADDR_EXP 45
7554: PUSH
7555: LD_INT 1
7557: ST_TO_ADDR
// if p3 = 18 then
7558: LD_VAR 0 3
7562: PUSH
7563: LD_INT 18
7565: EQUAL
7566: IFFALSE 7576
// sLack := true ;
7568: LD_ADDR_EXP 46
7572: PUSH
7573: LD_INT 1
7575: ST_TO_ADDR
// if p3 = 19 then
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 19
7583: EQUAL
7584: IFFALSE 7594
// sTank := true ;
7586: LD_ADDR_EXP 48
7590: PUSH
7591: LD_INT 1
7593: ST_TO_ADDR
// if p3 = 20 then
7594: LD_VAR 0 3
7598: PUSH
7599: LD_INT 20
7601: EQUAL
7602: IFFALSE 7612
// sRemote := true ;
7604: LD_ADDR_EXP 49
7608: PUSH
7609: LD_INT 1
7611: ST_TO_ADDR
// if p3 = 21 then
7612: LD_VAR 0 3
7616: PUSH
7617: LD_INT 21
7619: EQUAL
7620: IFFALSE 7630
// sPowell := true ;
7622: LD_ADDR_EXP 50
7626: PUSH
7627: LD_INT 1
7629: ST_TO_ADDR
// if p3 = 22 then
7630: LD_VAR 0 3
7634: PUSH
7635: LD_INT 22
7637: EQUAL
7638: IFFALSE 7648
// sTeleport := true ;
7640: LD_ADDR_EXP 53
7644: PUSH
7645: LD_INT 1
7647: ST_TO_ADDR
// if p3 = 23 then
7648: LD_VAR 0 3
7652: PUSH
7653: LD_INT 23
7655: EQUAL
7656: IFFALSE 7666
// sOilTower := true ;
7658: LD_ADDR_EXP 55
7662: PUSH
7663: LD_INT 1
7665: ST_TO_ADDR
// if p3 = 24 then
7666: LD_VAR 0 3
7670: PUSH
7671: LD_INT 24
7673: EQUAL
7674: IFFALSE 7684
// sShovel := true ;
7676: LD_ADDR_EXP 56
7680: PUSH
7681: LD_INT 1
7683: ST_TO_ADDR
// if p3 = 25 then
7684: LD_VAR 0 3
7688: PUSH
7689: LD_INT 25
7691: EQUAL
7692: IFFALSE 7702
// sSheik := true ;
7694: LD_ADDR_EXP 57
7698: PUSH
7699: LD_INT 1
7701: ST_TO_ADDR
// if p3 = 26 then
7702: LD_VAR 0 3
7706: PUSH
7707: LD_INT 26
7709: EQUAL
7710: IFFALSE 7720
// sEarthquake := true ;
7712: LD_ADDR_EXP 59
7716: PUSH
7717: LD_INT 1
7719: ST_TO_ADDR
// if p3 = 27 then
7720: LD_VAR 0 3
7724: PUSH
7725: LD_INT 27
7727: EQUAL
7728: IFFALSE 7738
// sAI := true ;
7730: LD_ADDR_EXP 60
7734: PUSH
7735: LD_INT 1
7737: ST_TO_ADDR
// if p3 = 28 then
7738: LD_VAR 0 3
7742: PUSH
7743: LD_INT 28
7745: EQUAL
7746: IFFALSE 7756
// sCargo := true ;
7748: LD_ADDR_EXP 63
7752: PUSH
7753: LD_INT 1
7755: ST_TO_ADDR
// if p3 = 29 then
7756: LD_VAR 0 3
7760: PUSH
7761: LD_INT 29
7763: EQUAL
7764: IFFALSE 7774
// sDLaser := true ;
7766: LD_ADDR_EXP 64
7770: PUSH
7771: LD_INT 1
7773: ST_TO_ADDR
// if p3 = 30 then
7774: LD_VAR 0 3
7778: PUSH
7779: LD_INT 30
7781: EQUAL
7782: IFFALSE 7792
// sExchange := true ;
7784: LD_ADDR_EXP 65
7788: PUSH
7789: LD_INT 1
7791: ST_TO_ADDR
// if p3 = 31 then
7792: LD_VAR 0 3
7796: PUSH
7797: LD_INT 31
7799: EQUAL
7800: IFFALSE 7810
// sFac := true ;
7802: LD_ADDR_EXP 66
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// if p3 = 32 then
7810: LD_VAR 0 3
7814: PUSH
7815: LD_INT 32
7817: EQUAL
7818: IFFALSE 7828
// sPower := true ;
7820: LD_ADDR_EXP 67
7824: PUSH
7825: LD_INT 1
7827: ST_TO_ADDR
// if p3 = 33 then
7828: LD_VAR 0 3
7832: PUSH
7833: LD_INT 33
7835: EQUAL
7836: IFFALSE 7846
// sRandom := true ;
7838: LD_ADDR_EXP 68
7842: PUSH
7843: LD_INT 1
7845: ST_TO_ADDR
// if p3 = 34 then
7846: LD_VAR 0 3
7850: PUSH
7851: LD_INT 34
7853: EQUAL
7854: IFFALSE 7864
// sShield := true ;
7856: LD_ADDR_EXP 69
7860: PUSH
7861: LD_INT 1
7863: ST_TO_ADDR
// if p3 = 35 then
7864: LD_VAR 0 3
7868: PUSH
7869: LD_INT 35
7871: EQUAL
7872: IFFALSE 7882
// sTime := true ;
7874: LD_ADDR_EXP 70
7878: PUSH
7879: LD_INT 1
7881: ST_TO_ADDR
// if p3 = 36 then
7882: LD_VAR 0 3
7886: PUSH
7887: LD_INT 36
7889: EQUAL
7890: IFFALSE 7900
// sTools := true ;
7892: LD_ADDR_EXP 71
7896: PUSH
7897: LD_INT 1
7899: ST_TO_ADDR
// if p3 = 101 then
7900: LD_VAR 0 3
7904: PUSH
7905: LD_INT 101
7907: EQUAL
7908: IFFALSE 7918
// sSold := true ;
7910: LD_ADDR_EXP 36
7914: PUSH
7915: LD_INT 1
7917: ST_TO_ADDR
// if p3 = 102 then
7918: LD_VAR 0 3
7922: PUSH
7923: LD_INT 102
7925: EQUAL
7926: IFFALSE 7936
// sDiff := true ;
7928: LD_ADDR_EXP 37
7932: PUSH
7933: LD_INT 1
7935: ST_TO_ADDR
// if p3 = 103 then
7936: LD_VAR 0 3
7940: PUSH
7941: LD_INT 103
7943: EQUAL
7944: IFFALSE 7954
// sFog := true ;
7946: LD_ADDR_EXP 40
7950: PUSH
7951: LD_INT 1
7953: ST_TO_ADDR
// if p3 = 104 then
7954: LD_VAR 0 3
7958: PUSH
7959: LD_INT 104
7961: EQUAL
7962: IFFALSE 7972
// sReset := true ;
7964: LD_ADDR_EXP 41
7968: PUSH
7969: LD_INT 1
7971: ST_TO_ADDR
// if p3 = 105 then
7972: LD_VAR 0 3
7976: PUSH
7977: LD_INT 105
7979: EQUAL
7980: IFFALSE 7990
// sSun := true ;
7982: LD_ADDR_EXP 42
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// if p3 = 106 then
7990: LD_VAR 0 3
7994: PUSH
7995: LD_INT 106
7997: EQUAL
7998: IFFALSE 8008
// sTiger := true ;
8000: LD_ADDR_EXP 38
8004: PUSH
8005: LD_INT 1
8007: ST_TO_ADDR
// if p3 = 107 then
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 107
8015: EQUAL
8016: IFFALSE 8026
// sBomb := true ;
8018: LD_ADDR_EXP 39
8022: PUSH
8023: LD_INT 1
8025: ST_TO_ADDR
// if p3 = 108 then
8026: LD_VAR 0 3
8030: PUSH
8031: LD_INT 108
8033: EQUAL
8034: IFFALSE 8044
// sWound := true ;
8036: LD_ADDR_EXP 47
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// if p3 = 109 then
8044: LD_VAR 0 3
8048: PUSH
8049: LD_INT 109
8051: EQUAL
8052: IFFALSE 8062
// sBetray := true ;
8054: LD_ADDR_EXP 51
8058: PUSH
8059: LD_INT 1
8061: ST_TO_ADDR
// if p3 = 110 then
8062: LD_VAR 0 3
8066: PUSH
8067: LD_INT 110
8069: EQUAL
8070: IFFALSE 8080
// sContamin := true ;
8072: LD_ADDR_EXP 52
8076: PUSH
8077: LD_INT 1
8079: ST_TO_ADDR
// if p3 = 111 then
8080: LD_VAR 0 3
8084: PUSH
8085: LD_INT 111
8087: EQUAL
8088: IFFALSE 8098
// sOil := true ;
8090: LD_ADDR_EXP 54
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// if p3 = 112 then
8098: LD_VAR 0 3
8102: PUSH
8103: LD_INT 112
8105: EQUAL
8106: IFFALSE 8116
// sStu := true ;
8108: LD_ADDR_EXP 58
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// if p3 = 113 then
8116: LD_VAR 0 3
8120: PUSH
8121: LD_INT 113
8123: EQUAL
8124: IFFALSE 8134
// sBazooka := true ;
8126: LD_ADDR_EXP 61
8130: PUSH
8131: LD_INT 1
8133: ST_TO_ADDR
// if p3 = 114 then
8134: LD_VAR 0 3
8138: PUSH
8139: LD_INT 114
8141: EQUAL
8142: IFFALSE 8152
// sMortar := true ;
8144: LD_ADDR_EXP 62
8148: PUSH
8149: LD_INT 1
8151: ST_TO_ADDR
// if p3 = 115 then
8152: LD_VAR 0 3
8156: PUSH
8157: LD_INT 115
8159: EQUAL
8160: IFFALSE 8170
// sRanger := true ;
8162: LD_ADDR_EXP 72
8166: PUSH
8167: LD_INT 1
8169: ST_TO_ADDR
// if p3 = 116 then
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 116
8177: EQUAL
8178: IFFALSE 8188
// sComputer := true ;
8180: LD_ADDR_EXP 73
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
// if p3 = 117 then
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 117
8195: EQUAL
8196: IFFALSE 8206
// s30 := true ;
8198: LD_ADDR_EXP 74
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// if p3 = 118 then
8206: LD_VAR 0 3
8210: PUSH
8211: LD_INT 118
8213: EQUAL
8214: IFFALSE 8224
// s60 := true ;
8216: LD_ADDR_EXP 75
8220: PUSH
8221: LD_INT 1
8223: ST_TO_ADDR
// end ; if p2 = hack_mode then
8224: LD_VAR 0 2
8228: PUSH
8229: LD_INT 101
8231: EQUAL
8232: IFFALSE 8360
// begin case p3 of 1 :
8234: LD_VAR 0 3
8238: PUSH
8239: LD_INT 1
8241: DOUBLE
8242: EQUAL
8243: IFTRUE 8247
8245: GO 8254
8247: POP
// hHackUnlimitedResources ; 2 :
8248: CALL 20499 0 0
8252: GO 8360
8254: LD_INT 2
8256: DOUBLE
8257: EQUAL
8258: IFTRUE 8262
8260: GO 8269
8262: POP
// hHackSetLevel10 ; 3 :
8263: CALL 20632 0 0
8267: GO 8360
8269: LD_INT 3
8271: DOUBLE
8272: EQUAL
8273: IFTRUE 8277
8275: GO 8284
8277: POP
// hHackSetLevel10YourUnits ; 4 :
8278: CALL 20717 0 0
8282: GO 8360
8284: LD_INT 4
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8292
8290: GO 8299
8292: POP
// hHackInvincible ; 5 :
8293: CALL 21165 0 0
8297: GO 8360
8299: LD_INT 5
8301: DOUBLE
8302: EQUAL
8303: IFTRUE 8307
8305: GO 8314
8307: POP
// hHackInvisible ; 6 :
8308: CALL 21276 0 0
8312: GO 8360
8314: LD_INT 6
8316: DOUBLE
8317: EQUAL
8318: IFTRUE 8322
8320: GO 8329
8322: POP
// hHackChangeYourSide ; 7 :
8323: CALL 21333 0 0
8327: GO 8360
8329: LD_INT 7
8331: DOUBLE
8332: EQUAL
8333: IFTRUE 8337
8335: GO 8344
8337: POP
// hHackChangeUnitSide ; 8 :
8338: CALL 21375 0 0
8342: GO 8360
8344: LD_INT 8
8346: DOUBLE
8347: EQUAL
8348: IFTRUE 8352
8350: GO 8359
8352: POP
// hHackFog ; end ;
8353: CALL 21476 0 0
8357: GO 8360
8359: POP
// end ; if p2 = game_save_mode then
8360: LD_VAR 0 2
8364: PUSH
8365: LD_INT 102
8367: EQUAL
8368: IFFALSE 8423
// begin if p3 = 1 then
8370: LD_VAR 0 3
8374: PUSH
8375: LD_INT 1
8377: EQUAL
8378: IFFALSE 8390
// globalGameSaveCounter := p4 ;
8380: LD_ADDR_EXP 18
8384: PUSH
8385: LD_VAR 0 4
8389: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8390: LD_VAR 0 3
8394: PUSH
8395: LD_INT 2
8397: EQUAL
8398: PUSH
8399: LD_EXP 18
8403: AND
8404: IFFALSE 8423
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8406: LD_STRING setGameSaveCounter(
8408: PUSH
8409: LD_EXP 18
8413: STR
8414: PUSH
8415: LD_STRING )
8417: STR
8418: PPUSH
8419: CALL_OW 559
// end ; end ;
8423: LD_VAR 0 7
8427: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8428: LD_INT 0
8430: PPUSH
// streamModeActive := false ;
8431: LD_ADDR_EXP 19
8435: PUSH
8436: LD_INT 0
8438: ST_TO_ADDR
// normalCounter := 36 ;
8439: LD_ADDR_EXP 20
8443: PUSH
8444: LD_INT 36
8446: ST_TO_ADDR
// hardcoreCounter := 18 ;
8447: LD_ADDR_EXP 21
8451: PUSH
8452: LD_INT 18
8454: ST_TO_ADDR
// sRocket := false ;
8455: LD_ADDR_EXP 24
8459: PUSH
8460: LD_INT 0
8462: ST_TO_ADDR
// sSpeed := false ;
8463: LD_ADDR_EXP 23
8467: PUSH
8468: LD_INT 0
8470: ST_TO_ADDR
// sEngine := false ;
8471: LD_ADDR_EXP 25
8475: PUSH
8476: LD_INT 0
8478: ST_TO_ADDR
// sSpec := false ;
8479: LD_ADDR_EXP 22
8483: PUSH
8484: LD_INT 0
8486: ST_TO_ADDR
// sLevel := false ;
8487: LD_ADDR_EXP 26
8491: PUSH
8492: LD_INT 0
8494: ST_TO_ADDR
// sArmoury := false ;
8495: LD_ADDR_EXP 27
8499: PUSH
8500: LD_INT 0
8502: ST_TO_ADDR
// sRadar := false ;
8503: LD_ADDR_EXP 28
8507: PUSH
8508: LD_INT 0
8510: ST_TO_ADDR
// sBunker := false ;
8511: LD_ADDR_EXP 29
8515: PUSH
8516: LD_INT 0
8518: ST_TO_ADDR
// sHack := false ;
8519: LD_ADDR_EXP 30
8523: PUSH
8524: LD_INT 0
8526: ST_TO_ADDR
// sFire := false ;
8527: LD_ADDR_EXP 31
8531: PUSH
8532: LD_INT 0
8534: ST_TO_ADDR
// sRefresh := false ;
8535: LD_ADDR_EXP 32
8539: PUSH
8540: LD_INT 0
8542: ST_TO_ADDR
// sExp := false ;
8543: LD_ADDR_EXP 33
8547: PUSH
8548: LD_INT 0
8550: ST_TO_ADDR
// sDepot := false ;
8551: LD_ADDR_EXP 34
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// sFlag := false ;
8559: LD_ADDR_EXP 35
8563: PUSH
8564: LD_INT 0
8566: ST_TO_ADDR
// sKamikadze := false ;
8567: LD_ADDR_EXP 43
8571: PUSH
8572: LD_INT 0
8574: ST_TO_ADDR
// sTroll := false ;
8575: LD_ADDR_EXP 44
8579: PUSH
8580: LD_INT 0
8582: ST_TO_ADDR
// sSlow := false ;
8583: LD_ADDR_EXP 45
8587: PUSH
8588: LD_INT 0
8590: ST_TO_ADDR
// sLack := false ;
8591: LD_ADDR_EXP 46
8595: PUSH
8596: LD_INT 0
8598: ST_TO_ADDR
// sTank := false ;
8599: LD_ADDR_EXP 48
8603: PUSH
8604: LD_INT 0
8606: ST_TO_ADDR
// sRemote := false ;
8607: LD_ADDR_EXP 49
8611: PUSH
8612: LD_INT 0
8614: ST_TO_ADDR
// sPowell := false ;
8615: LD_ADDR_EXP 50
8619: PUSH
8620: LD_INT 0
8622: ST_TO_ADDR
// sTeleport := false ;
8623: LD_ADDR_EXP 53
8627: PUSH
8628: LD_INT 0
8630: ST_TO_ADDR
// sOilTower := false ;
8631: LD_ADDR_EXP 55
8635: PUSH
8636: LD_INT 0
8638: ST_TO_ADDR
// sShovel := false ;
8639: LD_ADDR_EXP 56
8643: PUSH
8644: LD_INT 0
8646: ST_TO_ADDR
// sSheik := false ;
8647: LD_ADDR_EXP 57
8651: PUSH
8652: LD_INT 0
8654: ST_TO_ADDR
// sEarthquake := false ;
8655: LD_ADDR_EXP 59
8659: PUSH
8660: LD_INT 0
8662: ST_TO_ADDR
// sAI := false ;
8663: LD_ADDR_EXP 60
8667: PUSH
8668: LD_INT 0
8670: ST_TO_ADDR
// sCargo := false ;
8671: LD_ADDR_EXP 63
8675: PUSH
8676: LD_INT 0
8678: ST_TO_ADDR
// sDLaser := false ;
8679: LD_ADDR_EXP 64
8683: PUSH
8684: LD_INT 0
8686: ST_TO_ADDR
// sExchange := false ;
8687: LD_ADDR_EXP 65
8691: PUSH
8692: LD_INT 0
8694: ST_TO_ADDR
// sFac := false ;
8695: LD_ADDR_EXP 66
8699: PUSH
8700: LD_INT 0
8702: ST_TO_ADDR
// sPower := false ;
8703: LD_ADDR_EXP 67
8707: PUSH
8708: LD_INT 0
8710: ST_TO_ADDR
// sRandom := false ;
8711: LD_ADDR_EXP 68
8715: PUSH
8716: LD_INT 0
8718: ST_TO_ADDR
// sShield := false ;
8719: LD_ADDR_EXP 69
8723: PUSH
8724: LD_INT 0
8726: ST_TO_ADDR
// sTime := false ;
8727: LD_ADDR_EXP 70
8731: PUSH
8732: LD_INT 0
8734: ST_TO_ADDR
// sTools := false ;
8735: LD_ADDR_EXP 71
8739: PUSH
8740: LD_INT 0
8742: ST_TO_ADDR
// sSold := false ;
8743: LD_ADDR_EXP 36
8747: PUSH
8748: LD_INT 0
8750: ST_TO_ADDR
// sDiff := false ;
8751: LD_ADDR_EXP 37
8755: PUSH
8756: LD_INT 0
8758: ST_TO_ADDR
// sFog := false ;
8759: LD_ADDR_EXP 40
8763: PUSH
8764: LD_INT 0
8766: ST_TO_ADDR
// sReset := false ;
8767: LD_ADDR_EXP 41
8771: PUSH
8772: LD_INT 0
8774: ST_TO_ADDR
// sSun := false ;
8775: LD_ADDR_EXP 42
8779: PUSH
8780: LD_INT 0
8782: ST_TO_ADDR
// sTiger := false ;
8783: LD_ADDR_EXP 38
8787: PUSH
8788: LD_INT 0
8790: ST_TO_ADDR
// sBomb := false ;
8791: LD_ADDR_EXP 39
8795: PUSH
8796: LD_INT 0
8798: ST_TO_ADDR
// sWound := false ;
8799: LD_ADDR_EXP 47
8803: PUSH
8804: LD_INT 0
8806: ST_TO_ADDR
// sBetray := false ;
8807: LD_ADDR_EXP 51
8811: PUSH
8812: LD_INT 0
8814: ST_TO_ADDR
// sContamin := false ;
8815: LD_ADDR_EXP 52
8819: PUSH
8820: LD_INT 0
8822: ST_TO_ADDR
// sOil := false ;
8823: LD_ADDR_EXP 54
8827: PUSH
8828: LD_INT 0
8830: ST_TO_ADDR
// sStu := false ;
8831: LD_ADDR_EXP 58
8835: PUSH
8836: LD_INT 0
8838: ST_TO_ADDR
// sBazooka := false ;
8839: LD_ADDR_EXP 61
8843: PUSH
8844: LD_INT 0
8846: ST_TO_ADDR
// sMortar := false ;
8847: LD_ADDR_EXP 62
8851: PUSH
8852: LD_INT 0
8854: ST_TO_ADDR
// sRanger := false ;
8855: LD_ADDR_EXP 72
8859: PUSH
8860: LD_INT 0
8862: ST_TO_ADDR
// sComputer := false ;
8863: LD_ADDR_EXP 73
8867: PUSH
8868: LD_INT 0
8870: ST_TO_ADDR
// s30 := false ;
8871: LD_ADDR_EXP 74
8875: PUSH
8876: LD_INT 0
8878: ST_TO_ADDR
// s60 := false ;
8879: LD_ADDR_EXP 75
8883: PUSH
8884: LD_INT 0
8886: ST_TO_ADDR
// end ;
8887: LD_VAR 0 1
8891: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
8892: LD_INT 0
8894: PPUSH
8895: PPUSH
8896: PPUSH
8897: PPUSH
8898: PPUSH
8899: PPUSH
8900: PPUSH
// result := [ ] ;
8901: LD_ADDR_VAR 0 2
8905: PUSH
8906: EMPTY
8907: ST_TO_ADDR
// if campaign_id = 1 then
8908: LD_OWVAR 69
8912: PUSH
8913: LD_INT 1
8915: EQUAL
8916: IFFALSE 12082
// begin case mission_number of 1 :
8918: LD_OWVAR 70
8922: PUSH
8923: LD_INT 1
8925: DOUBLE
8926: EQUAL
8927: IFTRUE 8931
8929: GO 9007
8931: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
8932: LD_ADDR_VAR 0 2
8936: PUSH
8937: LD_INT 2
8939: PUSH
8940: LD_INT 4
8942: PUSH
8943: LD_INT 11
8945: PUSH
8946: LD_INT 12
8948: PUSH
8949: LD_INT 15
8951: PUSH
8952: LD_INT 16
8954: PUSH
8955: LD_INT 22
8957: PUSH
8958: LD_INT 23
8960: PUSH
8961: LD_INT 26
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 101
8977: PUSH
8978: LD_INT 102
8980: PUSH
8981: LD_INT 106
8983: PUSH
8984: LD_INT 116
8986: PUSH
8987: LD_INT 117
8989: PUSH
8990: LD_INT 118
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: ST_TO_ADDR
9005: GO 12080
9007: LD_INT 2
9009: DOUBLE
9010: EQUAL
9011: IFTRUE 9015
9013: GO 9099
9015: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9016: LD_ADDR_VAR 0 2
9020: PUSH
9021: LD_INT 2
9023: PUSH
9024: LD_INT 4
9026: PUSH
9027: LD_INT 11
9029: PUSH
9030: LD_INT 12
9032: PUSH
9033: LD_INT 15
9035: PUSH
9036: LD_INT 16
9038: PUSH
9039: LD_INT 22
9041: PUSH
9042: LD_INT 23
9044: PUSH
9045: LD_INT 26
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 101
9061: PUSH
9062: LD_INT 102
9064: PUSH
9065: LD_INT 105
9067: PUSH
9068: LD_INT 106
9070: PUSH
9071: LD_INT 108
9073: PUSH
9074: LD_INT 116
9076: PUSH
9077: LD_INT 117
9079: PUSH
9080: LD_INT 118
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: ST_TO_ADDR
9097: GO 12080
9099: LD_INT 3
9101: DOUBLE
9102: EQUAL
9103: IFTRUE 9107
9105: GO 9195
9107: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9108: LD_ADDR_VAR 0 2
9112: PUSH
9113: LD_INT 2
9115: PUSH
9116: LD_INT 4
9118: PUSH
9119: LD_INT 5
9121: PUSH
9122: LD_INT 11
9124: PUSH
9125: LD_INT 12
9127: PUSH
9128: LD_INT 15
9130: PUSH
9131: LD_INT 16
9133: PUSH
9134: LD_INT 22
9136: PUSH
9137: LD_INT 26
9139: PUSH
9140: LD_INT 36
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 101
9157: PUSH
9158: LD_INT 102
9160: PUSH
9161: LD_INT 105
9163: PUSH
9164: LD_INT 106
9166: PUSH
9167: LD_INT 108
9169: PUSH
9170: LD_INT 116
9172: PUSH
9173: LD_INT 117
9175: PUSH
9176: LD_INT 118
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: ST_TO_ADDR
9193: GO 12080
9195: LD_INT 4
9197: DOUBLE
9198: EQUAL
9199: IFTRUE 9203
9201: GO 9299
9203: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9204: LD_ADDR_VAR 0 2
9208: PUSH
9209: LD_INT 2
9211: PUSH
9212: LD_INT 4
9214: PUSH
9215: LD_INT 5
9217: PUSH
9218: LD_INT 8
9220: PUSH
9221: LD_INT 11
9223: PUSH
9224: LD_INT 12
9226: PUSH
9227: LD_INT 15
9229: PUSH
9230: LD_INT 16
9232: PUSH
9233: LD_INT 22
9235: PUSH
9236: LD_INT 23
9238: PUSH
9239: LD_INT 26
9241: PUSH
9242: LD_INT 36
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 101
9261: PUSH
9262: LD_INT 102
9264: PUSH
9265: LD_INT 105
9267: PUSH
9268: LD_INT 106
9270: PUSH
9271: LD_INT 108
9273: PUSH
9274: LD_INT 116
9276: PUSH
9277: LD_INT 117
9279: PUSH
9280: LD_INT 118
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: ST_TO_ADDR
9297: GO 12080
9299: LD_INT 5
9301: DOUBLE
9302: EQUAL
9303: IFTRUE 9307
9305: GO 9419
9307: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9308: LD_ADDR_VAR 0 2
9312: PUSH
9313: LD_INT 2
9315: PUSH
9316: LD_INT 4
9318: PUSH
9319: LD_INT 5
9321: PUSH
9322: LD_INT 6
9324: PUSH
9325: LD_INT 8
9327: PUSH
9328: LD_INT 11
9330: PUSH
9331: LD_INT 12
9333: PUSH
9334: LD_INT 15
9336: PUSH
9337: LD_INT 16
9339: PUSH
9340: LD_INT 22
9342: PUSH
9343: LD_INT 23
9345: PUSH
9346: LD_INT 25
9348: PUSH
9349: LD_INT 26
9351: PUSH
9352: LD_INT 36
9354: PUSH
9355: EMPTY
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 101
9373: PUSH
9374: LD_INT 102
9376: PUSH
9377: LD_INT 105
9379: PUSH
9380: LD_INT 106
9382: PUSH
9383: LD_INT 108
9385: PUSH
9386: LD_INT 109
9388: PUSH
9389: LD_INT 112
9391: PUSH
9392: LD_INT 116
9394: PUSH
9395: LD_INT 117
9397: PUSH
9398: LD_INT 118
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: ST_TO_ADDR
9417: GO 12080
9419: LD_INT 6
9421: DOUBLE
9422: EQUAL
9423: IFTRUE 9427
9425: GO 9559
9427: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9428: LD_ADDR_VAR 0 2
9432: PUSH
9433: LD_INT 2
9435: PUSH
9436: LD_INT 4
9438: PUSH
9439: LD_INT 5
9441: PUSH
9442: LD_INT 6
9444: PUSH
9445: LD_INT 8
9447: PUSH
9448: LD_INT 11
9450: PUSH
9451: LD_INT 12
9453: PUSH
9454: LD_INT 15
9456: PUSH
9457: LD_INT 16
9459: PUSH
9460: LD_INT 20
9462: PUSH
9463: LD_INT 21
9465: PUSH
9466: LD_INT 22
9468: PUSH
9469: LD_INT 23
9471: PUSH
9472: LD_INT 25
9474: PUSH
9475: LD_INT 26
9477: PUSH
9478: LD_INT 30
9480: PUSH
9481: LD_INT 31
9483: PUSH
9484: LD_INT 32
9486: PUSH
9487: LD_INT 36
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 101
9513: PUSH
9514: LD_INT 102
9516: PUSH
9517: LD_INT 105
9519: PUSH
9520: LD_INT 106
9522: PUSH
9523: LD_INT 108
9525: PUSH
9526: LD_INT 109
9528: PUSH
9529: LD_INT 112
9531: PUSH
9532: LD_INT 116
9534: PUSH
9535: LD_INT 117
9537: PUSH
9538: LD_INT 118
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: ST_TO_ADDR
9557: GO 12080
9559: LD_INT 7
9561: DOUBLE
9562: EQUAL
9563: IFTRUE 9567
9565: GO 9679
9567: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9568: LD_ADDR_VAR 0 2
9572: PUSH
9573: LD_INT 2
9575: PUSH
9576: LD_INT 4
9578: PUSH
9579: LD_INT 5
9581: PUSH
9582: LD_INT 7
9584: PUSH
9585: LD_INT 11
9587: PUSH
9588: LD_INT 12
9590: PUSH
9591: LD_INT 15
9593: PUSH
9594: LD_INT 16
9596: PUSH
9597: LD_INT 20
9599: PUSH
9600: LD_INT 21
9602: PUSH
9603: LD_INT 22
9605: PUSH
9606: LD_INT 23
9608: PUSH
9609: LD_INT 25
9611: PUSH
9612: LD_INT 26
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: PUSH
9631: LD_INT 101
9633: PUSH
9634: LD_INT 102
9636: PUSH
9637: LD_INT 103
9639: PUSH
9640: LD_INT 105
9642: PUSH
9643: LD_INT 106
9645: PUSH
9646: LD_INT 108
9648: PUSH
9649: LD_INT 112
9651: PUSH
9652: LD_INT 116
9654: PUSH
9655: LD_INT 117
9657: PUSH
9658: LD_INT 118
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: ST_TO_ADDR
9677: GO 12080
9679: LD_INT 8
9681: DOUBLE
9682: EQUAL
9683: IFTRUE 9687
9685: GO 9827
9687: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9688: LD_ADDR_VAR 0 2
9692: PUSH
9693: LD_INT 2
9695: PUSH
9696: LD_INT 4
9698: PUSH
9699: LD_INT 5
9701: PUSH
9702: LD_INT 6
9704: PUSH
9705: LD_INT 7
9707: PUSH
9708: LD_INT 8
9710: PUSH
9711: LD_INT 11
9713: PUSH
9714: LD_INT 12
9716: PUSH
9717: LD_INT 15
9719: PUSH
9720: LD_INT 16
9722: PUSH
9723: LD_INT 20
9725: PUSH
9726: LD_INT 21
9728: PUSH
9729: LD_INT 22
9731: PUSH
9732: LD_INT 23
9734: PUSH
9735: LD_INT 25
9737: PUSH
9738: LD_INT 26
9740: PUSH
9741: LD_INT 30
9743: PUSH
9744: LD_INT 31
9746: PUSH
9747: LD_INT 32
9749: PUSH
9750: LD_INT 36
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: PUSH
9775: LD_INT 101
9777: PUSH
9778: LD_INT 102
9780: PUSH
9781: LD_INT 103
9783: PUSH
9784: LD_INT 105
9786: PUSH
9787: LD_INT 106
9789: PUSH
9790: LD_INT 108
9792: PUSH
9793: LD_INT 109
9795: PUSH
9796: LD_INT 112
9798: PUSH
9799: LD_INT 116
9801: PUSH
9802: LD_INT 117
9804: PUSH
9805: LD_INT 118
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: ST_TO_ADDR
9825: GO 12080
9827: LD_INT 9
9829: DOUBLE
9830: EQUAL
9831: IFTRUE 9835
9833: GO 9983
9835: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9836: LD_ADDR_VAR 0 2
9840: PUSH
9841: LD_INT 2
9843: PUSH
9844: LD_INT 4
9846: PUSH
9847: LD_INT 5
9849: PUSH
9850: LD_INT 6
9852: PUSH
9853: LD_INT 7
9855: PUSH
9856: LD_INT 8
9858: PUSH
9859: LD_INT 11
9861: PUSH
9862: LD_INT 12
9864: PUSH
9865: LD_INT 15
9867: PUSH
9868: LD_INT 16
9870: PUSH
9871: LD_INT 20
9873: PUSH
9874: LD_INT 21
9876: PUSH
9877: LD_INT 22
9879: PUSH
9880: LD_INT 23
9882: PUSH
9883: LD_INT 25
9885: PUSH
9886: LD_INT 26
9888: PUSH
9889: LD_INT 28
9891: PUSH
9892: LD_INT 30
9894: PUSH
9895: LD_INT 31
9897: PUSH
9898: LD_INT 32
9900: PUSH
9901: LD_INT 36
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 101
9929: PUSH
9930: LD_INT 102
9932: PUSH
9933: LD_INT 103
9935: PUSH
9936: LD_INT 105
9938: PUSH
9939: LD_INT 106
9941: PUSH
9942: LD_INT 108
9944: PUSH
9945: LD_INT 109
9947: PUSH
9948: LD_INT 112
9950: PUSH
9951: LD_INT 114
9953: PUSH
9954: LD_INT 116
9956: PUSH
9957: LD_INT 117
9959: PUSH
9960: LD_INT 118
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: ST_TO_ADDR
9981: GO 12080
9983: LD_INT 10
9985: DOUBLE
9986: EQUAL
9987: IFTRUE 9991
9989: GO 10187
9991: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
9992: LD_ADDR_VAR 0 2
9996: PUSH
9997: LD_INT 2
9999: PUSH
10000: LD_INT 4
10002: PUSH
10003: LD_INT 5
10005: PUSH
10006: LD_INT 6
10008: PUSH
10009: LD_INT 7
10011: PUSH
10012: LD_INT 8
10014: PUSH
10015: LD_INT 9
10017: PUSH
10018: LD_INT 10
10020: PUSH
10021: LD_INT 11
10023: PUSH
10024: LD_INT 12
10026: PUSH
10027: LD_INT 13
10029: PUSH
10030: LD_INT 14
10032: PUSH
10033: LD_INT 15
10035: PUSH
10036: LD_INT 16
10038: PUSH
10039: LD_INT 17
10041: PUSH
10042: LD_INT 18
10044: PUSH
10045: LD_INT 19
10047: PUSH
10048: LD_INT 20
10050: PUSH
10051: LD_INT 21
10053: PUSH
10054: LD_INT 22
10056: PUSH
10057: LD_INT 23
10059: PUSH
10060: LD_INT 24
10062: PUSH
10063: LD_INT 25
10065: PUSH
10066: LD_INT 26
10068: PUSH
10069: LD_INT 28
10071: PUSH
10072: LD_INT 30
10074: PUSH
10075: LD_INT 31
10077: PUSH
10078: LD_INT 32
10080: PUSH
10081: LD_INT 36
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 101
10117: PUSH
10118: LD_INT 102
10120: PUSH
10121: LD_INT 103
10123: PUSH
10124: LD_INT 104
10126: PUSH
10127: LD_INT 105
10129: PUSH
10130: LD_INT 106
10132: PUSH
10133: LD_INT 107
10135: PUSH
10136: LD_INT 108
10138: PUSH
10139: LD_INT 109
10141: PUSH
10142: LD_INT 110
10144: PUSH
10145: LD_INT 111
10147: PUSH
10148: LD_INT 112
10150: PUSH
10151: LD_INT 114
10153: PUSH
10154: LD_INT 116
10156: PUSH
10157: LD_INT 117
10159: PUSH
10160: LD_INT 118
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: ST_TO_ADDR
10185: GO 12080
10187: LD_INT 11
10189: DOUBLE
10190: EQUAL
10191: IFTRUE 10195
10193: GO 10399
10195: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10196: LD_ADDR_VAR 0 2
10200: PUSH
10201: LD_INT 2
10203: PUSH
10204: LD_INT 3
10206: PUSH
10207: LD_INT 4
10209: PUSH
10210: LD_INT 5
10212: PUSH
10213: LD_INT 6
10215: PUSH
10216: LD_INT 7
10218: PUSH
10219: LD_INT 8
10221: PUSH
10222: LD_INT 9
10224: PUSH
10225: LD_INT 10
10227: PUSH
10228: LD_INT 11
10230: PUSH
10231: LD_INT 12
10233: PUSH
10234: LD_INT 13
10236: PUSH
10237: LD_INT 14
10239: PUSH
10240: LD_INT 15
10242: PUSH
10243: LD_INT 16
10245: PUSH
10246: LD_INT 17
10248: PUSH
10249: LD_INT 18
10251: PUSH
10252: LD_INT 19
10254: PUSH
10255: LD_INT 20
10257: PUSH
10258: LD_INT 21
10260: PUSH
10261: LD_INT 22
10263: PUSH
10264: LD_INT 23
10266: PUSH
10267: LD_INT 24
10269: PUSH
10270: LD_INT 25
10272: PUSH
10273: LD_INT 26
10275: PUSH
10276: LD_INT 28
10278: PUSH
10279: LD_INT 30
10281: PUSH
10282: LD_INT 31
10284: PUSH
10285: LD_INT 32
10287: PUSH
10288: LD_INT 34
10290: PUSH
10291: LD_INT 36
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 101
10329: PUSH
10330: LD_INT 102
10332: PUSH
10333: LD_INT 103
10335: PUSH
10336: LD_INT 104
10338: PUSH
10339: LD_INT 105
10341: PUSH
10342: LD_INT 106
10344: PUSH
10345: LD_INT 107
10347: PUSH
10348: LD_INT 108
10350: PUSH
10351: LD_INT 109
10353: PUSH
10354: LD_INT 110
10356: PUSH
10357: LD_INT 111
10359: PUSH
10360: LD_INT 112
10362: PUSH
10363: LD_INT 114
10365: PUSH
10366: LD_INT 116
10368: PUSH
10369: LD_INT 117
10371: PUSH
10372: LD_INT 118
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: ST_TO_ADDR
10397: GO 12080
10399: LD_INT 12
10401: DOUBLE
10402: EQUAL
10403: IFTRUE 10407
10405: GO 10627
10407: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10408: LD_ADDR_VAR 0 2
10412: PUSH
10413: LD_INT 1
10415: PUSH
10416: LD_INT 2
10418: PUSH
10419: LD_INT 3
10421: PUSH
10422: LD_INT 4
10424: PUSH
10425: LD_INT 5
10427: PUSH
10428: LD_INT 6
10430: PUSH
10431: LD_INT 7
10433: PUSH
10434: LD_INT 8
10436: PUSH
10437: LD_INT 9
10439: PUSH
10440: LD_INT 10
10442: PUSH
10443: LD_INT 11
10445: PUSH
10446: LD_INT 12
10448: PUSH
10449: LD_INT 13
10451: PUSH
10452: LD_INT 14
10454: PUSH
10455: LD_INT 15
10457: PUSH
10458: LD_INT 16
10460: PUSH
10461: LD_INT 17
10463: PUSH
10464: LD_INT 18
10466: PUSH
10467: LD_INT 19
10469: PUSH
10470: LD_INT 20
10472: PUSH
10473: LD_INT 21
10475: PUSH
10476: LD_INT 22
10478: PUSH
10479: LD_INT 23
10481: PUSH
10482: LD_INT 24
10484: PUSH
10485: LD_INT 25
10487: PUSH
10488: LD_INT 26
10490: PUSH
10491: LD_INT 27
10493: PUSH
10494: LD_INT 28
10496: PUSH
10497: LD_INT 30
10499: PUSH
10500: LD_INT 31
10502: PUSH
10503: LD_INT 32
10505: PUSH
10506: LD_INT 33
10508: PUSH
10509: LD_INT 34
10511: PUSH
10512: LD_INT 36
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: PUSH
10551: LD_INT 101
10553: PUSH
10554: LD_INT 102
10556: PUSH
10557: LD_INT 103
10559: PUSH
10560: LD_INT 104
10562: PUSH
10563: LD_INT 105
10565: PUSH
10566: LD_INT 106
10568: PUSH
10569: LD_INT 107
10571: PUSH
10572: LD_INT 108
10574: PUSH
10575: LD_INT 109
10577: PUSH
10578: LD_INT 110
10580: PUSH
10581: LD_INT 111
10583: PUSH
10584: LD_INT 112
10586: PUSH
10587: LD_INT 113
10589: PUSH
10590: LD_INT 114
10592: PUSH
10593: LD_INT 116
10595: PUSH
10596: LD_INT 117
10598: PUSH
10599: LD_INT 118
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: ST_TO_ADDR
10625: GO 12080
10627: LD_INT 13
10629: DOUBLE
10630: EQUAL
10631: IFTRUE 10635
10633: GO 10843
10635: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10636: LD_ADDR_VAR 0 2
10640: PUSH
10641: LD_INT 1
10643: PUSH
10644: LD_INT 2
10646: PUSH
10647: LD_INT 3
10649: PUSH
10650: LD_INT 4
10652: PUSH
10653: LD_INT 5
10655: PUSH
10656: LD_INT 8
10658: PUSH
10659: LD_INT 9
10661: PUSH
10662: LD_INT 10
10664: PUSH
10665: LD_INT 11
10667: PUSH
10668: LD_INT 12
10670: PUSH
10671: LD_INT 14
10673: PUSH
10674: LD_INT 15
10676: PUSH
10677: LD_INT 16
10679: PUSH
10680: LD_INT 17
10682: PUSH
10683: LD_INT 18
10685: PUSH
10686: LD_INT 19
10688: PUSH
10689: LD_INT 20
10691: PUSH
10692: LD_INT 21
10694: PUSH
10695: LD_INT 22
10697: PUSH
10698: LD_INT 23
10700: PUSH
10701: LD_INT 24
10703: PUSH
10704: LD_INT 25
10706: PUSH
10707: LD_INT 26
10709: PUSH
10710: LD_INT 27
10712: PUSH
10713: LD_INT 28
10715: PUSH
10716: LD_INT 30
10718: PUSH
10719: LD_INT 31
10721: PUSH
10722: LD_INT 32
10724: PUSH
10725: LD_INT 33
10727: PUSH
10728: LD_INT 34
10730: PUSH
10731: LD_INT 36
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 101
10769: PUSH
10770: LD_INT 102
10772: PUSH
10773: LD_INT 103
10775: PUSH
10776: LD_INT 104
10778: PUSH
10779: LD_INT 105
10781: PUSH
10782: LD_INT 106
10784: PUSH
10785: LD_INT 107
10787: PUSH
10788: LD_INT 108
10790: PUSH
10791: LD_INT 109
10793: PUSH
10794: LD_INT 110
10796: PUSH
10797: LD_INT 111
10799: PUSH
10800: LD_INT 112
10802: PUSH
10803: LD_INT 113
10805: PUSH
10806: LD_INT 114
10808: PUSH
10809: LD_INT 116
10811: PUSH
10812: LD_INT 117
10814: PUSH
10815: LD_INT 118
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: ST_TO_ADDR
10841: GO 12080
10843: LD_INT 14
10845: DOUBLE
10846: EQUAL
10847: IFTRUE 10851
10849: GO 11075
10851: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10852: LD_ADDR_VAR 0 2
10856: PUSH
10857: LD_INT 1
10859: PUSH
10860: LD_INT 2
10862: PUSH
10863: LD_INT 3
10865: PUSH
10866: LD_INT 4
10868: PUSH
10869: LD_INT 5
10871: PUSH
10872: LD_INT 6
10874: PUSH
10875: LD_INT 7
10877: PUSH
10878: LD_INT 8
10880: PUSH
10881: LD_INT 9
10883: PUSH
10884: LD_INT 10
10886: PUSH
10887: LD_INT 11
10889: PUSH
10890: LD_INT 12
10892: PUSH
10893: LD_INT 13
10895: PUSH
10896: LD_INT 14
10898: PUSH
10899: LD_INT 15
10901: PUSH
10902: LD_INT 16
10904: PUSH
10905: LD_INT 17
10907: PUSH
10908: LD_INT 18
10910: PUSH
10911: LD_INT 19
10913: PUSH
10914: LD_INT 20
10916: PUSH
10917: LD_INT 21
10919: PUSH
10920: LD_INT 22
10922: PUSH
10923: LD_INT 23
10925: PUSH
10926: LD_INT 24
10928: PUSH
10929: LD_INT 25
10931: PUSH
10932: LD_INT 26
10934: PUSH
10935: LD_INT 27
10937: PUSH
10938: LD_INT 28
10940: PUSH
10941: LD_INT 29
10943: PUSH
10944: LD_INT 30
10946: PUSH
10947: LD_INT 31
10949: PUSH
10950: LD_INT 32
10952: PUSH
10953: LD_INT 33
10955: PUSH
10956: LD_INT 34
10958: PUSH
10959: LD_INT 36
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 101
11001: PUSH
11002: LD_INT 102
11004: PUSH
11005: LD_INT 103
11007: PUSH
11008: LD_INT 104
11010: PUSH
11011: LD_INT 105
11013: PUSH
11014: LD_INT 106
11016: PUSH
11017: LD_INT 107
11019: PUSH
11020: LD_INT 108
11022: PUSH
11023: LD_INT 109
11025: PUSH
11026: LD_INT 110
11028: PUSH
11029: LD_INT 111
11031: PUSH
11032: LD_INT 112
11034: PUSH
11035: LD_INT 113
11037: PUSH
11038: LD_INT 114
11040: PUSH
11041: LD_INT 116
11043: PUSH
11044: LD_INT 117
11046: PUSH
11047: LD_INT 118
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: ST_TO_ADDR
11073: GO 12080
11075: LD_INT 15
11077: DOUBLE
11078: EQUAL
11079: IFTRUE 11083
11081: GO 11307
11083: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11084: LD_ADDR_VAR 0 2
11088: PUSH
11089: LD_INT 1
11091: PUSH
11092: LD_INT 2
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: LD_INT 4
11100: PUSH
11101: LD_INT 5
11103: PUSH
11104: LD_INT 6
11106: PUSH
11107: LD_INT 7
11109: PUSH
11110: LD_INT 8
11112: PUSH
11113: LD_INT 9
11115: PUSH
11116: LD_INT 10
11118: PUSH
11119: LD_INT 11
11121: PUSH
11122: LD_INT 12
11124: PUSH
11125: LD_INT 13
11127: PUSH
11128: LD_INT 14
11130: PUSH
11131: LD_INT 15
11133: PUSH
11134: LD_INT 16
11136: PUSH
11137: LD_INT 17
11139: PUSH
11140: LD_INT 18
11142: PUSH
11143: LD_INT 19
11145: PUSH
11146: LD_INT 20
11148: PUSH
11149: LD_INT 21
11151: PUSH
11152: LD_INT 22
11154: PUSH
11155: LD_INT 23
11157: PUSH
11158: LD_INT 24
11160: PUSH
11161: LD_INT 25
11163: PUSH
11164: LD_INT 26
11166: PUSH
11167: LD_INT 27
11169: PUSH
11170: LD_INT 28
11172: PUSH
11173: LD_INT 29
11175: PUSH
11176: LD_INT 30
11178: PUSH
11179: LD_INT 31
11181: PUSH
11182: LD_INT 32
11184: PUSH
11185: LD_INT 33
11187: PUSH
11188: LD_INT 34
11190: PUSH
11191: LD_INT 36
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 101
11233: PUSH
11234: LD_INT 102
11236: PUSH
11237: LD_INT 103
11239: PUSH
11240: LD_INT 104
11242: PUSH
11243: LD_INT 105
11245: PUSH
11246: LD_INT 106
11248: PUSH
11249: LD_INT 107
11251: PUSH
11252: LD_INT 108
11254: PUSH
11255: LD_INT 109
11257: PUSH
11258: LD_INT 110
11260: PUSH
11261: LD_INT 111
11263: PUSH
11264: LD_INT 112
11266: PUSH
11267: LD_INT 113
11269: PUSH
11270: LD_INT 114
11272: PUSH
11273: LD_INT 116
11275: PUSH
11276: LD_INT 117
11278: PUSH
11279: LD_INT 118
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: ST_TO_ADDR
11305: GO 12080
11307: LD_INT 16
11309: DOUBLE
11310: EQUAL
11311: IFTRUE 11315
11313: GO 11451
11315: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11316: LD_ADDR_VAR 0 2
11320: PUSH
11321: LD_INT 2
11323: PUSH
11324: LD_INT 4
11326: PUSH
11327: LD_INT 5
11329: PUSH
11330: LD_INT 7
11332: PUSH
11333: LD_INT 11
11335: PUSH
11336: LD_INT 12
11338: PUSH
11339: LD_INT 15
11341: PUSH
11342: LD_INT 16
11344: PUSH
11345: LD_INT 20
11347: PUSH
11348: LD_INT 21
11350: PUSH
11351: LD_INT 22
11353: PUSH
11354: LD_INT 23
11356: PUSH
11357: LD_INT 25
11359: PUSH
11360: LD_INT 26
11362: PUSH
11363: LD_INT 30
11365: PUSH
11366: LD_INT 31
11368: PUSH
11369: LD_INT 32
11371: PUSH
11372: LD_INT 33
11374: PUSH
11375: LD_INT 34
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 101
11401: PUSH
11402: LD_INT 102
11404: PUSH
11405: LD_INT 103
11407: PUSH
11408: LD_INT 106
11410: PUSH
11411: LD_INT 108
11413: PUSH
11414: LD_INT 112
11416: PUSH
11417: LD_INT 113
11419: PUSH
11420: LD_INT 114
11422: PUSH
11423: LD_INT 116
11425: PUSH
11426: LD_INT 117
11428: PUSH
11429: LD_INT 118
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: ST_TO_ADDR
11449: GO 12080
11451: LD_INT 17
11453: DOUBLE
11454: EQUAL
11455: IFTRUE 11459
11457: GO 11683
11459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11460: LD_ADDR_VAR 0 2
11464: PUSH
11465: LD_INT 1
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 4
11476: PUSH
11477: LD_INT 5
11479: PUSH
11480: LD_INT 6
11482: PUSH
11483: LD_INT 7
11485: PUSH
11486: LD_INT 8
11488: PUSH
11489: LD_INT 9
11491: PUSH
11492: LD_INT 10
11494: PUSH
11495: LD_INT 11
11497: PUSH
11498: LD_INT 12
11500: PUSH
11501: LD_INT 13
11503: PUSH
11504: LD_INT 14
11506: PUSH
11507: LD_INT 15
11509: PUSH
11510: LD_INT 16
11512: PUSH
11513: LD_INT 17
11515: PUSH
11516: LD_INT 18
11518: PUSH
11519: LD_INT 19
11521: PUSH
11522: LD_INT 20
11524: PUSH
11525: LD_INT 21
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: LD_INT 23
11533: PUSH
11534: LD_INT 24
11536: PUSH
11537: LD_INT 25
11539: PUSH
11540: LD_INT 26
11542: PUSH
11543: LD_INT 27
11545: PUSH
11546: LD_INT 28
11548: PUSH
11549: LD_INT 29
11551: PUSH
11552: LD_INT 30
11554: PUSH
11555: LD_INT 31
11557: PUSH
11558: LD_INT 32
11560: PUSH
11561: LD_INT 33
11563: PUSH
11564: LD_INT 34
11566: PUSH
11567: LD_INT 36
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 101
11609: PUSH
11610: LD_INT 102
11612: PUSH
11613: LD_INT 103
11615: PUSH
11616: LD_INT 104
11618: PUSH
11619: LD_INT 105
11621: PUSH
11622: LD_INT 106
11624: PUSH
11625: LD_INT 107
11627: PUSH
11628: LD_INT 108
11630: PUSH
11631: LD_INT 109
11633: PUSH
11634: LD_INT 110
11636: PUSH
11637: LD_INT 111
11639: PUSH
11640: LD_INT 112
11642: PUSH
11643: LD_INT 113
11645: PUSH
11646: LD_INT 114
11648: PUSH
11649: LD_INT 116
11651: PUSH
11652: LD_INT 117
11654: PUSH
11655: LD_INT 118
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: ST_TO_ADDR
11681: GO 12080
11683: LD_INT 18
11685: DOUBLE
11686: EQUAL
11687: IFTRUE 11691
11689: GO 11839
11691: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11692: LD_ADDR_VAR 0 2
11696: PUSH
11697: LD_INT 2
11699: PUSH
11700: LD_INT 4
11702: PUSH
11703: LD_INT 5
11705: PUSH
11706: LD_INT 7
11708: PUSH
11709: LD_INT 11
11711: PUSH
11712: LD_INT 12
11714: PUSH
11715: LD_INT 15
11717: PUSH
11718: LD_INT 16
11720: PUSH
11721: LD_INT 20
11723: PUSH
11724: LD_INT 21
11726: PUSH
11727: LD_INT 22
11729: PUSH
11730: LD_INT 23
11732: PUSH
11733: LD_INT 25
11735: PUSH
11736: LD_INT 26
11738: PUSH
11739: LD_INT 30
11741: PUSH
11742: LD_INT 31
11744: PUSH
11745: LD_INT 32
11747: PUSH
11748: LD_INT 33
11750: PUSH
11751: LD_INT 34
11753: PUSH
11754: LD_INT 35
11756: PUSH
11757: LD_INT 36
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 101
11785: PUSH
11786: LD_INT 102
11788: PUSH
11789: LD_INT 103
11791: PUSH
11792: LD_INT 106
11794: PUSH
11795: LD_INT 108
11797: PUSH
11798: LD_INT 112
11800: PUSH
11801: LD_INT 113
11803: PUSH
11804: LD_INT 114
11806: PUSH
11807: LD_INT 115
11809: PUSH
11810: LD_INT 116
11812: PUSH
11813: LD_INT 117
11815: PUSH
11816: LD_INT 118
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: ST_TO_ADDR
11837: GO 12080
11839: LD_INT 19
11841: DOUBLE
11842: EQUAL
11843: IFTRUE 11847
11845: GO 12079
11847: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11848: LD_ADDR_VAR 0 2
11852: PUSH
11853: LD_INT 1
11855: PUSH
11856: LD_INT 2
11858: PUSH
11859: LD_INT 3
11861: PUSH
11862: LD_INT 4
11864: PUSH
11865: LD_INT 5
11867: PUSH
11868: LD_INT 6
11870: PUSH
11871: LD_INT 7
11873: PUSH
11874: LD_INT 8
11876: PUSH
11877: LD_INT 9
11879: PUSH
11880: LD_INT 10
11882: PUSH
11883: LD_INT 11
11885: PUSH
11886: LD_INT 12
11888: PUSH
11889: LD_INT 13
11891: PUSH
11892: LD_INT 14
11894: PUSH
11895: LD_INT 15
11897: PUSH
11898: LD_INT 16
11900: PUSH
11901: LD_INT 17
11903: PUSH
11904: LD_INT 18
11906: PUSH
11907: LD_INT 19
11909: PUSH
11910: LD_INT 20
11912: PUSH
11913: LD_INT 21
11915: PUSH
11916: LD_INT 22
11918: PUSH
11919: LD_INT 23
11921: PUSH
11922: LD_INT 24
11924: PUSH
11925: LD_INT 25
11927: PUSH
11928: LD_INT 26
11930: PUSH
11931: LD_INT 27
11933: PUSH
11934: LD_INT 28
11936: PUSH
11937: LD_INT 29
11939: PUSH
11940: LD_INT 30
11942: PUSH
11943: LD_INT 31
11945: PUSH
11946: LD_INT 32
11948: PUSH
11949: LD_INT 33
11951: PUSH
11952: LD_INT 34
11954: PUSH
11955: LD_INT 35
11957: PUSH
11958: LD_INT 36
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 101
12001: PUSH
12002: LD_INT 102
12004: PUSH
12005: LD_INT 103
12007: PUSH
12008: LD_INT 104
12010: PUSH
12011: LD_INT 105
12013: PUSH
12014: LD_INT 106
12016: PUSH
12017: LD_INT 107
12019: PUSH
12020: LD_INT 108
12022: PUSH
12023: LD_INT 109
12025: PUSH
12026: LD_INT 110
12028: PUSH
12029: LD_INT 111
12031: PUSH
12032: LD_INT 112
12034: PUSH
12035: LD_INT 113
12037: PUSH
12038: LD_INT 114
12040: PUSH
12041: LD_INT 115
12043: PUSH
12044: LD_INT 116
12046: PUSH
12047: LD_INT 117
12049: PUSH
12050: LD_INT 118
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: ST_TO_ADDR
12077: GO 12080
12079: POP
// end else
12080: GO 12311
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12082: LD_ADDR_VAR 0 2
12086: PUSH
12087: LD_INT 1
12089: PUSH
12090: LD_INT 2
12092: PUSH
12093: LD_INT 3
12095: PUSH
12096: LD_INT 4
12098: PUSH
12099: LD_INT 5
12101: PUSH
12102: LD_INT 6
12104: PUSH
12105: LD_INT 7
12107: PUSH
12108: LD_INT 8
12110: PUSH
12111: LD_INT 9
12113: PUSH
12114: LD_INT 10
12116: PUSH
12117: LD_INT 11
12119: PUSH
12120: LD_INT 12
12122: PUSH
12123: LD_INT 13
12125: PUSH
12126: LD_INT 14
12128: PUSH
12129: LD_INT 15
12131: PUSH
12132: LD_INT 16
12134: PUSH
12135: LD_INT 17
12137: PUSH
12138: LD_INT 18
12140: PUSH
12141: LD_INT 19
12143: PUSH
12144: LD_INT 20
12146: PUSH
12147: LD_INT 21
12149: PUSH
12150: LD_INT 22
12152: PUSH
12153: LD_INT 23
12155: PUSH
12156: LD_INT 24
12158: PUSH
12159: LD_INT 25
12161: PUSH
12162: LD_INT 26
12164: PUSH
12165: LD_INT 27
12167: PUSH
12168: LD_INT 28
12170: PUSH
12171: LD_INT 29
12173: PUSH
12174: LD_INT 30
12176: PUSH
12177: LD_INT 31
12179: PUSH
12180: LD_INT 32
12182: PUSH
12183: LD_INT 33
12185: PUSH
12186: LD_INT 34
12188: PUSH
12189: LD_INT 35
12191: PUSH
12192: LD_INT 36
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 101
12235: PUSH
12236: LD_INT 102
12238: PUSH
12239: LD_INT 103
12241: PUSH
12242: LD_INT 104
12244: PUSH
12245: LD_INT 105
12247: PUSH
12248: LD_INT 106
12250: PUSH
12251: LD_INT 107
12253: PUSH
12254: LD_INT 108
12256: PUSH
12257: LD_INT 109
12259: PUSH
12260: LD_INT 110
12262: PUSH
12263: LD_INT 111
12265: PUSH
12266: LD_INT 112
12268: PUSH
12269: LD_INT 113
12271: PUSH
12272: LD_INT 114
12274: PUSH
12275: LD_INT 115
12277: PUSH
12278: LD_INT 116
12280: PUSH
12281: LD_INT 117
12283: PUSH
12284: LD_INT 118
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: ST_TO_ADDR
// if result then
12311: LD_VAR 0 2
12315: IFFALSE 13101
// begin normal :=  ;
12317: LD_ADDR_VAR 0 5
12321: PUSH
12322: LD_STRING 
12324: ST_TO_ADDR
// hardcore :=  ;
12325: LD_ADDR_VAR 0 6
12329: PUSH
12330: LD_STRING 
12332: ST_TO_ADDR
// active :=  ;
12333: LD_ADDR_VAR 0 7
12337: PUSH
12338: LD_STRING 
12340: ST_TO_ADDR
// for i = 1 to normalCounter do
12341: LD_ADDR_VAR 0 8
12345: PUSH
12346: DOUBLE
12347: LD_INT 1
12349: DEC
12350: ST_TO_ADDR
12351: LD_EXP 20
12355: PUSH
12356: FOR_TO
12357: IFFALSE 12458
// begin tmp := 0 ;
12359: LD_ADDR_VAR 0 3
12363: PUSH
12364: LD_STRING 0
12366: ST_TO_ADDR
// if result [ 1 ] then
12367: LD_VAR 0 2
12371: PUSH
12372: LD_INT 1
12374: ARRAY
12375: IFFALSE 12440
// if result [ 1 ] [ 1 ] = i then
12377: LD_VAR 0 2
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: PUSH
12386: LD_INT 1
12388: ARRAY
12389: PUSH
12390: LD_VAR 0 8
12394: EQUAL
12395: IFFALSE 12440
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: LD_VAR 0 2
12406: PPUSH
12407: LD_INT 1
12409: PPUSH
12410: LD_VAR 0 2
12414: PUSH
12415: LD_INT 1
12417: ARRAY
12418: PPUSH
12419: LD_INT 1
12421: PPUSH
12422: CALL_OW 3
12426: PPUSH
12427: CALL_OW 1
12431: ST_TO_ADDR
// tmp := 1 ;
12432: LD_ADDR_VAR 0 3
12436: PUSH
12437: LD_STRING 1
12439: ST_TO_ADDR
// end ; normal := normal & tmp ;
12440: LD_ADDR_VAR 0 5
12444: PUSH
12445: LD_VAR 0 5
12449: PUSH
12450: LD_VAR 0 3
12454: STR
12455: ST_TO_ADDR
// end ;
12456: GO 12356
12458: POP
12459: POP
// for i = 1 to hardcoreCounter do
12460: LD_ADDR_VAR 0 8
12464: PUSH
12465: DOUBLE
12466: LD_INT 1
12468: DEC
12469: ST_TO_ADDR
12470: LD_EXP 21
12474: PUSH
12475: FOR_TO
12476: IFFALSE 12581
// begin tmp := 0 ;
12478: LD_ADDR_VAR 0 3
12482: PUSH
12483: LD_STRING 0
12485: ST_TO_ADDR
// if result [ 2 ] then
12486: LD_VAR 0 2
12490: PUSH
12491: LD_INT 2
12493: ARRAY
12494: IFFALSE 12563
// if result [ 2 ] [ 1 ] = 100 + i then
12496: LD_VAR 0 2
12500: PUSH
12501: LD_INT 2
12503: ARRAY
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PUSH
12509: LD_INT 100
12511: PUSH
12512: LD_VAR 0 8
12516: PLUS
12517: EQUAL
12518: IFFALSE 12563
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12520: LD_ADDR_VAR 0 2
12524: PUSH
12525: LD_VAR 0 2
12529: PPUSH
12530: LD_INT 2
12532: PPUSH
12533: LD_VAR 0 2
12537: PUSH
12538: LD_INT 2
12540: ARRAY
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 3
12549: PPUSH
12550: CALL_OW 1
12554: ST_TO_ADDR
// tmp := 1 ;
12555: LD_ADDR_VAR 0 3
12559: PUSH
12560: LD_STRING 1
12562: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12563: LD_ADDR_VAR 0 6
12567: PUSH
12568: LD_VAR 0 6
12572: PUSH
12573: LD_VAR 0 3
12577: STR
12578: ST_TO_ADDR
// end ;
12579: GO 12475
12581: POP
12582: POP
// if isGameLoad then
12583: LD_VAR 0 1
12587: IFFALSE 13062
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12589: LD_ADDR_VAR 0 4
12593: PUSH
12594: LD_EXP 24
12598: PUSH
12599: LD_EXP 23
12603: PUSH
12604: LD_EXP 25
12608: PUSH
12609: LD_EXP 22
12613: PUSH
12614: LD_EXP 26
12618: PUSH
12619: LD_EXP 27
12623: PUSH
12624: LD_EXP 28
12628: PUSH
12629: LD_EXP 29
12633: PUSH
12634: LD_EXP 30
12638: PUSH
12639: LD_EXP 31
12643: PUSH
12644: LD_EXP 32
12648: PUSH
12649: LD_EXP 33
12653: PUSH
12654: LD_EXP 34
12658: PUSH
12659: LD_EXP 35
12663: PUSH
12664: LD_EXP 43
12668: PUSH
12669: LD_EXP 44
12673: PUSH
12674: LD_EXP 45
12678: PUSH
12679: LD_EXP 46
12683: PUSH
12684: LD_EXP 48
12688: PUSH
12689: LD_EXP 49
12693: PUSH
12694: LD_EXP 50
12698: PUSH
12699: LD_EXP 53
12703: PUSH
12704: LD_EXP 55
12708: PUSH
12709: LD_EXP 56
12713: PUSH
12714: LD_EXP 57
12718: PUSH
12719: LD_EXP 59
12723: PUSH
12724: LD_EXP 60
12728: PUSH
12729: LD_EXP 63
12733: PUSH
12734: LD_EXP 64
12738: PUSH
12739: LD_EXP 65
12743: PUSH
12744: LD_EXP 66
12748: PUSH
12749: LD_EXP 67
12753: PUSH
12754: LD_EXP 68
12758: PUSH
12759: LD_EXP 69
12763: PUSH
12764: LD_EXP 70
12768: PUSH
12769: LD_EXP 71
12773: PUSH
12774: LD_EXP 36
12778: PUSH
12779: LD_EXP 37
12783: PUSH
12784: LD_EXP 40
12788: PUSH
12789: LD_EXP 41
12793: PUSH
12794: LD_EXP 42
12798: PUSH
12799: LD_EXP 38
12803: PUSH
12804: LD_EXP 39
12808: PUSH
12809: LD_EXP 47
12813: PUSH
12814: LD_EXP 51
12818: PUSH
12819: LD_EXP 52
12823: PUSH
12824: LD_EXP 54
12828: PUSH
12829: LD_EXP 58
12833: PUSH
12834: LD_EXP 61
12838: PUSH
12839: LD_EXP 62
12843: PUSH
12844: LD_EXP 72
12848: PUSH
12849: LD_EXP 73
12853: PUSH
12854: LD_EXP 74
12858: PUSH
12859: LD_EXP 75
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: ST_TO_ADDR
// tmp :=  ;
12920: LD_ADDR_VAR 0 3
12924: PUSH
12925: LD_STRING 
12927: ST_TO_ADDR
// for i = 1 to normalCounter do
12928: LD_ADDR_VAR 0 8
12932: PUSH
12933: DOUBLE
12934: LD_INT 1
12936: DEC
12937: ST_TO_ADDR
12938: LD_EXP 20
12942: PUSH
12943: FOR_TO
12944: IFFALSE 12980
// begin if flags [ i ] then
12946: LD_VAR 0 4
12950: PUSH
12951: LD_VAR 0 8
12955: ARRAY
12956: IFFALSE 12978
// tmp := tmp & i & ; ;
12958: LD_ADDR_VAR 0 3
12962: PUSH
12963: LD_VAR 0 3
12967: PUSH
12968: LD_VAR 0 8
12972: STR
12973: PUSH
12974: LD_STRING ;
12976: STR
12977: ST_TO_ADDR
// end ;
12978: GO 12943
12980: POP
12981: POP
// for i = 1 to hardcoreCounter do
12982: LD_ADDR_VAR 0 8
12986: PUSH
12987: DOUBLE
12988: LD_INT 1
12990: DEC
12991: ST_TO_ADDR
12992: LD_EXP 21
12996: PUSH
12997: FOR_TO
12998: IFFALSE 13044
// begin if flags [ normalCounter + i ] then
13000: LD_VAR 0 4
13004: PUSH
13005: LD_EXP 20
13009: PUSH
13010: LD_VAR 0 8
13014: PLUS
13015: ARRAY
13016: IFFALSE 13042
// tmp := tmp & ( 100 + i ) & ; ;
13018: LD_ADDR_VAR 0 3
13022: PUSH
13023: LD_VAR 0 3
13027: PUSH
13028: LD_INT 100
13030: PUSH
13031: LD_VAR 0 8
13035: PLUS
13036: STR
13037: PUSH
13038: LD_STRING ;
13040: STR
13041: ST_TO_ADDR
// end ;
13042: GO 12997
13044: POP
13045: POP
// if tmp then
13046: LD_VAR 0 3
13050: IFFALSE 13062
// active := tmp ;
13052: LD_ADDR_VAR 0 7
13056: PUSH
13057: LD_VAR 0 3
13061: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13062: LD_STRING getStreamItemsFromMission("
13064: PUSH
13065: LD_VAR 0 5
13069: STR
13070: PUSH
13071: LD_STRING ","
13073: STR
13074: PUSH
13075: LD_VAR 0 6
13079: STR
13080: PUSH
13081: LD_STRING ","
13083: STR
13084: PUSH
13085: LD_VAR 0 7
13089: STR
13090: PUSH
13091: LD_STRING ")
13093: STR
13094: PPUSH
13095: CALL_OW 559
// end else
13099: GO 13108
// ToLua ( getStreamItemsFromMission("","","") ) ;
13101: LD_STRING getStreamItemsFromMission("","","")
13103: PPUSH
13104: CALL_OW 559
// end ;
13108: LD_VAR 0 2
13112: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13113: LD_EXP 19
13117: PUSH
13118: LD_EXP 24
13122: AND
13123: IFFALSE 13247
13125: GO 13127
13127: DISABLE
13128: LD_INT 0
13130: PPUSH
13131: PPUSH
// begin enable ;
13132: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13133: LD_ADDR_VAR 0 2
13137: PUSH
13138: LD_INT 22
13140: PUSH
13141: LD_OWVAR 2
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 2
13152: PUSH
13153: LD_INT 34
13155: PUSH
13156: LD_INT 7
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 34
13165: PUSH
13166: LD_INT 45
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 34
13175: PUSH
13176: LD_INT 28
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 34
13185: PUSH
13186: LD_INT 47
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PPUSH
13204: CALL_OW 69
13208: ST_TO_ADDR
// if not tmp then
13209: LD_VAR 0 2
13213: NOT
13214: IFFALSE 13218
// exit ;
13216: GO 13247
// for i in tmp do
13218: LD_ADDR_VAR 0 1
13222: PUSH
13223: LD_VAR 0 2
13227: PUSH
13228: FOR_IN
13229: IFFALSE 13245
// begin SetLives ( i , 0 ) ;
13231: LD_VAR 0 1
13235: PPUSH
13236: LD_INT 0
13238: PPUSH
13239: CALL_OW 234
// end ;
13243: GO 13228
13245: POP
13246: POP
// end ;
13247: PPOPN 2
13249: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13250: LD_EXP 19
13254: PUSH
13255: LD_EXP 25
13259: AND
13260: IFFALSE 13344
13262: GO 13264
13264: DISABLE
13265: LD_INT 0
13267: PPUSH
13268: PPUSH
// begin enable ;
13269: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13270: LD_ADDR_VAR 0 2
13274: PUSH
13275: LD_INT 22
13277: PUSH
13278: LD_OWVAR 2
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 32
13289: PUSH
13290: LD_INT 3
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PPUSH
13301: CALL_OW 69
13305: ST_TO_ADDR
// if not tmp then
13306: LD_VAR 0 2
13310: NOT
13311: IFFALSE 13315
// exit ;
13313: GO 13344
// for i in tmp do
13315: LD_ADDR_VAR 0 1
13319: PUSH
13320: LD_VAR 0 2
13324: PUSH
13325: FOR_IN
13326: IFFALSE 13342
// begin SetLives ( i , 0 ) ;
13328: LD_VAR 0 1
13332: PPUSH
13333: LD_INT 0
13335: PPUSH
13336: CALL_OW 234
// end ;
13340: GO 13325
13342: POP
13343: POP
// end ;
13344: PPOPN 2
13346: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13347: LD_EXP 19
13351: PUSH
13352: LD_EXP 22
13356: AND
13357: IFFALSE 13450
13359: GO 13361
13361: DISABLE
13362: LD_INT 0
13364: PPUSH
// begin enable ;
13365: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13366: LD_ADDR_VAR 0 1
13370: PUSH
13371: LD_INT 22
13373: PUSH
13374: LD_OWVAR 2
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: LD_INT 25
13388: PUSH
13389: LD_INT 5
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 25
13398: PUSH
13399: LD_INT 9
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 25
13408: PUSH
13409: LD_INT 8
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: PPUSH
13426: CALL_OW 69
13430: PUSH
13431: FOR_IN
13432: IFFALSE 13448
// begin SetClass ( i , 1 ) ;
13434: LD_VAR 0 1
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 336
// end ;
13446: GO 13431
13448: POP
13449: POP
// end ;
13450: PPOPN 1
13452: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13453: LD_EXP 19
13457: PUSH
13458: LD_EXP 23
13462: AND
13463: PUSH
13464: LD_OWVAR 65
13468: PUSH
13469: LD_INT 7
13471: LESS
13472: AND
13473: IFFALSE 13487
13475: GO 13477
13477: DISABLE
// begin enable ;
13478: ENABLE
// game_speed := 7 ;
13479: LD_ADDR_OWVAR 65
13483: PUSH
13484: LD_INT 7
13486: ST_TO_ADDR
// end ;
13487: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13488: LD_EXP 19
13492: PUSH
13493: LD_EXP 26
13497: AND
13498: IFFALSE 13700
13500: GO 13502
13502: DISABLE
13503: LD_INT 0
13505: PPUSH
13506: PPUSH
13507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13508: LD_ADDR_VAR 0 3
13512: PUSH
13513: LD_INT 81
13515: PUSH
13516: LD_OWVAR 2
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: LD_INT 21
13527: PUSH
13528: LD_INT 1
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PPUSH
13539: CALL_OW 69
13543: ST_TO_ADDR
// if not tmp then
13544: LD_VAR 0 3
13548: NOT
13549: IFFALSE 13553
// exit ;
13551: GO 13700
// if tmp > 5 then
13553: LD_VAR 0 3
13557: PUSH
13558: LD_INT 5
13560: GREATER
13561: IFFALSE 13573
// k := 5 else
13563: LD_ADDR_VAR 0 2
13567: PUSH
13568: LD_INT 5
13570: ST_TO_ADDR
13571: GO 13583
// k := tmp ;
13573: LD_ADDR_VAR 0 2
13577: PUSH
13578: LD_VAR 0 3
13582: ST_TO_ADDR
// for i := 1 to k do
13583: LD_ADDR_VAR 0 1
13587: PUSH
13588: DOUBLE
13589: LD_INT 1
13591: DEC
13592: ST_TO_ADDR
13593: LD_VAR 0 2
13597: PUSH
13598: FOR_TO
13599: IFFALSE 13698
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13601: LD_VAR 0 3
13605: PUSH
13606: LD_VAR 0 1
13610: ARRAY
13611: PPUSH
13612: LD_VAR 0 1
13616: PUSH
13617: LD_INT 4
13619: MOD
13620: PUSH
13621: LD_INT 1
13623: PLUS
13624: PPUSH
13625: CALL_OW 259
13629: PUSH
13630: LD_INT 10
13632: LESS
13633: IFFALSE 13696
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13635: LD_VAR 0 3
13639: PUSH
13640: LD_VAR 0 1
13644: ARRAY
13645: PPUSH
13646: LD_VAR 0 1
13650: PUSH
13651: LD_INT 4
13653: MOD
13654: PUSH
13655: LD_INT 1
13657: PLUS
13658: PPUSH
13659: LD_VAR 0 3
13663: PUSH
13664: LD_VAR 0 1
13668: ARRAY
13669: PPUSH
13670: LD_VAR 0 1
13674: PUSH
13675: LD_INT 4
13677: MOD
13678: PUSH
13679: LD_INT 1
13681: PLUS
13682: PPUSH
13683: CALL_OW 259
13687: PUSH
13688: LD_INT 1
13690: PLUS
13691: PPUSH
13692: CALL_OW 237
13696: GO 13598
13698: POP
13699: POP
// end ;
13700: PPOPN 3
13702: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13703: LD_EXP 19
13707: PUSH
13708: LD_EXP 27
13712: AND
13713: IFFALSE 13733
13715: GO 13717
13717: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13718: LD_INT 4
13720: PPUSH
13721: LD_OWVAR 2
13725: PPUSH
13726: LD_INT 0
13728: PPUSH
13729: CALL_OW 324
13733: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13734: LD_EXP 19
13738: PUSH
13739: LD_EXP 56
13743: AND
13744: IFFALSE 13764
13746: GO 13748
13748: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13749: LD_INT 19
13751: PPUSH
13752: LD_OWVAR 2
13756: PPUSH
13757: LD_INT 0
13759: PPUSH
13760: CALL_OW 324
13764: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13765: LD_EXP 19
13769: PUSH
13770: LD_EXP 28
13774: AND
13775: IFFALSE 13877
13777: GO 13779
13779: DISABLE
13780: LD_INT 0
13782: PPUSH
13783: PPUSH
// begin enable ;
13784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13785: LD_ADDR_VAR 0 2
13789: PUSH
13790: LD_INT 22
13792: PUSH
13793: LD_OWVAR 2
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 2
13804: PUSH
13805: LD_INT 34
13807: PUSH
13808: LD_INT 11
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PUSH
13815: LD_INT 34
13817: PUSH
13818: LD_INT 30
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PPUSH
13834: CALL_OW 69
13838: ST_TO_ADDR
// if not tmp then
13839: LD_VAR 0 2
13843: NOT
13844: IFFALSE 13848
// exit ;
13846: GO 13877
// for i in tmp do
13848: LD_ADDR_VAR 0 1
13852: PUSH
13853: LD_VAR 0 2
13857: PUSH
13858: FOR_IN
13859: IFFALSE 13875
// begin SetLives ( i , 0 ) ;
13861: LD_VAR 0 1
13865: PPUSH
13866: LD_INT 0
13868: PPUSH
13869: CALL_OW 234
// end ;
13873: GO 13858
13875: POP
13876: POP
// end ;
13877: PPOPN 2
13879: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13880: LD_EXP 19
13884: PUSH
13885: LD_EXP 29
13889: AND
13890: IFFALSE 13910
13892: GO 13894
13894: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13895: LD_INT 32
13897: PPUSH
13898: LD_OWVAR 2
13902: PPUSH
13903: LD_INT 0
13905: PPUSH
13906: CALL_OW 324
13910: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13911: LD_EXP 19
13915: PUSH
13916: LD_EXP 30
13920: AND
13921: IFFALSE 14102
13923: GO 13925
13925: DISABLE
13926: LD_INT 0
13928: PPUSH
13929: PPUSH
13930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13931: LD_ADDR_VAR 0 2
13935: PUSH
13936: LD_INT 22
13938: PUSH
13939: LD_OWVAR 2
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 33
13950: PUSH
13951: LD_INT 3
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PPUSH
13962: CALL_OW 69
13966: ST_TO_ADDR
// if not tmp then
13967: LD_VAR 0 2
13971: NOT
13972: IFFALSE 13976
// exit ;
13974: GO 14102
// side := 0 ;
13976: LD_ADDR_VAR 0 3
13980: PUSH
13981: LD_INT 0
13983: ST_TO_ADDR
// for i := 1 to 8 do
13984: LD_ADDR_VAR 0 1
13988: PUSH
13989: DOUBLE
13990: LD_INT 1
13992: DEC
13993: ST_TO_ADDR
13994: LD_INT 8
13996: PUSH
13997: FOR_TO
13998: IFFALSE 14046
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14000: LD_OWVAR 2
14004: PUSH
14005: LD_VAR 0 1
14009: NONEQUAL
14010: PUSH
14011: LD_OWVAR 2
14015: PPUSH
14016: LD_VAR 0 1
14020: PPUSH
14021: CALL_OW 81
14025: PUSH
14026: LD_INT 2
14028: EQUAL
14029: AND
14030: IFFALSE 14044
// begin side := i ;
14032: LD_ADDR_VAR 0 3
14036: PUSH
14037: LD_VAR 0 1
14041: ST_TO_ADDR
// break ;
14042: GO 14046
// end ;
14044: GO 13997
14046: POP
14047: POP
// if not side then
14048: LD_VAR 0 3
14052: NOT
14053: IFFALSE 14057
// exit ;
14055: GO 14102
// for i := 1 to tmp do
14057: LD_ADDR_VAR 0 1
14061: PUSH
14062: DOUBLE
14063: LD_INT 1
14065: DEC
14066: ST_TO_ADDR
14067: LD_VAR 0 2
14071: PUSH
14072: FOR_TO
14073: IFFALSE 14100
// if Prob ( 60 ) then
14075: LD_INT 60
14077: PPUSH
14078: CALL_OW 13
14082: IFFALSE 14098
// SetSide ( i , side ) ;
14084: LD_VAR 0 1
14088: PPUSH
14089: LD_VAR 0 3
14093: PPUSH
14094: CALL_OW 235
14098: GO 14072
14100: POP
14101: POP
// end ;
14102: PPOPN 3
14104: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14105: LD_EXP 19
14109: PUSH
14110: LD_EXP 32
14114: AND
14115: IFFALSE 14234
14117: GO 14119
14119: DISABLE
14120: LD_INT 0
14122: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14123: LD_ADDR_VAR 0 1
14127: PUSH
14128: LD_INT 22
14130: PUSH
14131: LD_OWVAR 2
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 21
14142: PUSH
14143: LD_INT 1
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: LD_INT 23
14155: PUSH
14156: LD_INT 0
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: PPUSH
14172: CALL_OW 69
14176: PUSH
14177: FOR_IN
14178: IFFALSE 14232
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 257
14189: PUSH
14190: LD_INT 1
14192: PUSH
14193: LD_INT 2
14195: PUSH
14196: LD_INT 3
14198: PUSH
14199: LD_INT 4
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: IN
14208: IFFALSE 14230
// SetClass ( un , rand ( 1 , 4 ) ) ;
14210: LD_VAR 0 1
14214: PPUSH
14215: LD_INT 1
14217: PPUSH
14218: LD_INT 4
14220: PPUSH
14221: CALL_OW 12
14225: PPUSH
14226: CALL_OW 336
14230: GO 14177
14232: POP
14233: POP
// end ;
14234: PPOPN 1
14236: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14237: LD_EXP 19
14241: PUSH
14242: LD_EXP 31
14246: AND
14247: IFFALSE 14326
14249: GO 14251
14251: DISABLE
14252: LD_INT 0
14254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14255: LD_ADDR_VAR 0 1
14259: PUSH
14260: LD_INT 22
14262: PUSH
14263: LD_OWVAR 2
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: LD_INT 21
14274: PUSH
14275: LD_INT 3
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PPUSH
14286: CALL_OW 69
14290: ST_TO_ADDR
// if not tmp then
14291: LD_VAR 0 1
14295: NOT
14296: IFFALSE 14300
// exit ;
14298: GO 14326
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14300: LD_VAR 0 1
14304: PUSH
14305: LD_INT 1
14307: PPUSH
14308: LD_VAR 0 1
14312: PPUSH
14313: CALL_OW 12
14317: ARRAY
14318: PPUSH
14319: LD_INT 100
14321: PPUSH
14322: CALL_OW 234
// end ;
14326: PPOPN 1
14328: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14329: LD_EXP 19
14333: PUSH
14334: LD_EXP 33
14338: AND
14339: IFFALSE 14437
14341: GO 14343
14343: DISABLE
14344: LD_INT 0
14346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14347: LD_ADDR_VAR 0 1
14351: PUSH
14352: LD_INT 22
14354: PUSH
14355: LD_OWVAR 2
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PPUSH
14378: CALL_OW 69
14382: ST_TO_ADDR
// if not tmp then
14383: LD_VAR 0 1
14387: NOT
14388: IFFALSE 14392
// exit ;
14390: GO 14437
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14392: LD_VAR 0 1
14396: PUSH
14397: LD_INT 1
14399: PPUSH
14400: LD_VAR 0 1
14404: PPUSH
14405: CALL_OW 12
14409: ARRAY
14410: PPUSH
14411: LD_INT 1
14413: PPUSH
14414: LD_INT 4
14416: PPUSH
14417: CALL_OW 12
14421: PPUSH
14422: LD_INT 3000
14424: PPUSH
14425: LD_INT 9000
14427: PPUSH
14428: CALL_OW 12
14432: PPUSH
14433: CALL_OW 492
// end ;
14437: PPOPN 1
14439: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14440: LD_EXP 19
14444: PUSH
14445: LD_EXP 34
14449: AND
14450: IFFALSE 14470
14452: GO 14454
14454: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14455: LD_INT 1
14457: PPUSH
14458: LD_OWVAR 2
14462: PPUSH
14463: LD_INT 0
14465: PPUSH
14466: CALL_OW 324
14470: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14471: LD_EXP 19
14475: PUSH
14476: LD_EXP 35
14480: AND
14481: IFFALSE 14564
14483: GO 14485
14485: DISABLE
14486: LD_INT 0
14488: PPUSH
14489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14490: LD_ADDR_VAR 0 2
14494: PUSH
14495: LD_INT 22
14497: PUSH
14498: LD_OWVAR 2
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 21
14509: PUSH
14510: LD_INT 3
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PPUSH
14521: CALL_OW 69
14525: ST_TO_ADDR
// if not tmp then
14526: LD_VAR 0 2
14530: NOT
14531: IFFALSE 14535
// exit ;
14533: GO 14564
// for i in tmp do
14535: LD_ADDR_VAR 0 1
14539: PUSH
14540: LD_VAR 0 2
14544: PUSH
14545: FOR_IN
14546: IFFALSE 14562
// SetBLevel ( i , 10 ) ;
14548: LD_VAR 0 1
14552: PPUSH
14553: LD_INT 10
14555: PPUSH
14556: CALL_OW 241
14560: GO 14545
14562: POP
14563: POP
// end ;
14564: PPOPN 2
14566: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14567: LD_EXP 19
14571: PUSH
14572: LD_EXP 36
14576: AND
14577: IFFALSE 14688
14579: GO 14581
14581: DISABLE
14582: LD_INT 0
14584: PPUSH
14585: PPUSH
14586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14587: LD_ADDR_VAR 0 3
14591: PUSH
14592: LD_INT 22
14594: PUSH
14595: LD_OWVAR 2
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: LD_INT 25
14606: PUSH
14607: LD_INT 1
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PPUSH
14618: CALL_OW 69
14622: ST_TO_ADDR
// if not tmp then
14623: LD_VAR 0 3
14627: NOT
14628: IFFALSE 14632
// exit ;
14630: GO 14688
// un := tmp [ rand ( 1 , tmp ) ] ;
14632: LD_ADDR_VAR 0 2
14636: PUSH
14637: LD_VAR 0 3
14641: PUSH
14642: LD_INT 1
14644: PPUSH
14645: LD_VAR 0 3
14649: PPUSH
14650: CALL_OW 12
14654: ARRAY
14655: ST_TO_ADDR
// if Crawls ( un ) then
14656: LD_VAR 0 2
14660: PPUSH
14661: CALL_OW 318
14665: IFFALSE 14676
// ComWalk ( un ) ;
14667: LD_VAR 0 2
14671: PPUSH
14672: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14676: LD_VAR 0 2
14680: PPUSH
14681: LD_INT 5
14683: PPUSH
14684: CALL_OW 336
// end ;
14688: PPOPN 3
14690: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14691: LD_EXP 19
14695: PUSH
14696: LD_EXP 37
14700: AND
14701: PUSH
14702: LD_OWVAR 67
14706: PUSH
14707: LD_INT 4
14709: LESS
14710: AND
14711: IFFALSE 14730
14713: GO 14715
14715: DISABLE
// begin Difficulty := Difficulty + 1 ;
14716: LD_ADDR_OWVAR 67
14720: PUSH
14721: LD_OWVAR 67
14725: PUSH
14726: LD_INT 1
14728: PLUS
14729: ST_TO_ADDR
// end ;
14730: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14731: LD_EXP 19
14735: PUSH
14736: LD_EXP 38
14740: AND
14741: IFFALSE 14844
14743: GO 14745
14745: DISABLE
14746: LD_INT 0
14748: PPUSH
// begin for i := 1 to 5 do
14749: LD_ADDR_VAR 0 1
14753: PUSH
14754: DOUBLE
14755: LD_INT 1
14757: DEC
14758: ST_TO_ADDR
14759: LD_INT 5
14761: PUSH
14762: FOR_TO
14763: IFFALSE 14842
// begin uc_nation := nation_nature ;
14765: LD_ADDR_OWVAR 21
14769: PUSH
14770: LD_INT 0
14772: ST_TO_ADDR
// uc_side := 0 ;
14773: LD_ADDR_OWVAR 20
14777: PUSH
14778: LD_INT 0
14780: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14781: LD_ADDR_OWVAR 29
14785: PUSH
14786: LD_INT 12
14788: PUSH
14789: LD_INT 12
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: ST_TO_ADDR
// hc_agressivity := 20 ;
14796: LD_ADDR_OWVAR 35
14800: PUSH
14801: LD_INT 20
14803: ST_TO_ADDR
// hc_class := class_tiger ;
14804: LD_ADDR_OWVAR 28
14808: PUSH
14809: LD_INT 14
14811: ST_TO_ADDR
// hc_gallery :=  ;
14812: LD_ADDR_OWVAR 33
14816: PUSH
14817: LD_STRING 
14819: ST_TO_ADDR
// hc_name :=  ;
14820: LD_ADDR_OWVAR 26
14824: PUSH
14825: LD_STRING 
14827: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14828: CALL_OW 44
14832: PPUSH
14833: LD_INT 0
14835: PPUSH
14836: CALL_OW 51
// end ;
14840: GO 14762
14842: POP
14843: POP
// end ;
14844: PPOPN 1
14846: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14847: LD_EXP 19
14851: PUSH
14852: LD_EXP 39
14856: AND
14857: IFFALSE 14866
14859: GO 14861
14861: DISABLE
// StreamSibBomb ;
14862: CALL 14867 0 0
14866: END
// export function StreamSibBomb ; var i , x , y ; begin
14867: LD_INT 0
14869: PPUSH
14870: PPUSH
14871: PPUSH
14872: PPUSH
// result := false ;
14873: LD_ADDR_VAR 0 1
14877: PUSH
14878: LD_INT 0
14880: ST_TO_ADDR
// for i := 1 to 16 do
14881: LD_ADDR_VAR 0 2
14885: PUSH
14886: DOUBLE
14887: LD_INT 1
14889: DEC
14890: ST_TO_ADDR
14891: LD_INT 16
14893: PUSH
14894: FOR_TO
14895: IFFALSE 15094
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14897: LD_ADDR_VAR 0 3
14901: PUSH
14902: LD_INT 10
14904: PUSH
14905: LD_INT 20
14907: PUSH
14908: LD_INT 30
14910: PUSH
14911: LD_INT 40
14913: PUSH
14914: LD_INT 50
14916: PUSH
14917: LD_INT 60
14919: PUSH
14920: LD_INT 70
14922: PUSH
14923: LD_INT 80
14925: PUSH
14926: LD_INT 90
14928: PUSH
14929: LD_INT 100
14931: PUSH
14932: LD_INT 110
14934: PUSH
14935: LD_INT 120
14937: PUSH
14938: LD_INT 130
14940: PUSH
14941: LD_INT 140
14943: PUSH
14944: LD_INT 150
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: PUSH
14964: LD_INT 1
14966: PPUSH
14967: LD_INT 15
14969: PPUSH
14970: CALL_OW 12
14974: ARRAY
14975: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14976: LD_ADDR_VAR 0 4
14980: PUSH
14981: LD_INT 10
14983: PUSH
14984: LD_INT 20
14986: PUSH
14987: LD_INT 30
14989: PUSH
14990: LD_INT 40
14992: PUSH
14993: LD_INT 50
14995: PUSH
14996: LD_INT 60
14998: PUSH
14999: LD_INT 70
15001: PUSH
15002: LD_INT 80
15004: PUSH
15005: LD_INT 90
15007: PUSH
15008: LD_INT 100
15010: PUSH
15011: LD_INT 110
15013: PUSH
15014: LD_INT 120
15016: PUSH
15017: LD_INT 130
15019: PUSH
15020: LD_INT 140
15022: PUSH
15023: LD_INT 150
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 1
15045: PPUSH
15046: LD_INT 15
15048: PPUSH
15049: CALL_OW 12
15053: ARRAY
15054: ST_TO_ADDR
// if ValidHex ( x , y ) then
15055: LD_VAR 0 3
15059: PPUSH
15060: LD_VAR 0 4
15064: PPUSH
15065: CALL_OW 488
15069: IFFALSE 15092
// begin result := [ x , y ] ;
15071: LD_ADDR_VAR 0 1
15075: PUSH
15076: LD_VAR 0 3
15080: PUSH
15081: LD_VAR 0 4
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: ST_TO_ADDR
// break ;
15090: GO 15094
// end ; end ;
15092: GO 14894
15094: POP
15095: POP
// if result then
15096: LD_VAR 0 1
15100: IFFALSE 15160
// begin ToLua ( playSibBomb() ) ;
15102: LD_STRING playSibBomb()
15104: PPUSH
15105: CALL_OW 559
// wait ( 0 0$14 ) ;
15109: LD_INT 490
15111: PPUSH
15112: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15116: LD_VAR 0 1
15120: PUSH
15121: LD_INT 1
15123: ARRAY
15124: PPUSH
15125: LD_VAR 0 1
15129: PUSH
15130: LD_INT 2
15132: ARRAY
15133: PPUSH
15134: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15138: LD_VAR 0 1
15142: PUSH
15143: LD_INT 1
15145: ARRAY
15146: PPUSH
15147: LD_VAR 0 1
15151: PUSH
15152: LD_INT 2
15154: ARRAY
15155: PPUSH
15156: CALL_OW 429
// end ; end ;
15160: LD_VAR 0 1
15164: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15165: LD_EXP 19
15169: PUSH
15170: LD_EXP 41
15174: AND
15175: IFFALSE 15187
15177: GO 15179
15179: DISABLE
// YouLost (  ) ;
15180: LD_STRING 
15182: PPUSH
15183: CALL_OW 104
15187: END
// every 0 0$1 trigger StreamModeActive and sFog do
15188: LD_EXP 19
15192: PUSH
15193: LD_EXP 40
15197: AND
15198: IFFALSE 15212
15200: GO 15202
15202: DISABLE
// FogOff ( your_side ) ;
15203: LD_OWVAR 2
15207: PPUSH
15208: CALL_OW 344
15212: END
// every 0 0$1 trigger StreamModeActive and sSun do
15213: LD_EXP 19
15217: PUSH
15218: LD_EXP 42
15222: AND
15223: IFFALSE 15251
15225: GO 15227
15227: DISABLE
// begin solar_recharge_percent := 0 ;
15228: LD_ADDR_OWVAR 79
15232: PUSH
15233: LD_INT 0
15235: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15236: LD_INT 10500
15238: PPUSH
15239: CALL_OW 67
// solar_recharge_percent := 100 ;
15243: LD_ADDR_OWVAR 79
15247: PUSH
15248: LD_INT 100
15250: ST_TO_ADDR
// end ;
15251: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15252: LD_EXP 19
15256: PUSH
15257: LD_EXP 43
15261: AND
15262: IFFALSE 15501
15264: GO 15266
15266: DISABLE
15267: LD_INT 0
15269: PPUSH
15270: PPUSH
15271: PPUSH
// begin tmp := [ ] ;
15272: LD_ADDR_VAR 0 3
15276: PUSH
15277: EMPTY
15278: ST_TO_ADDR
// for i := 1 to 6 do
15279: LD_ADDR_VAR 0 1
15283: PUSH
15284: DOUBLE
15285: LD_INT 1
15287: DEC
15288: ST_TO_ADDR
15289: LD_INT 6
15291: PUSH
15292: FOR_TO
15293: IFFALSE 15398
// begin uc_nation := nation_nature ;
15295: LD_ADDR_OWVAR 21
15299: PUSH
15300: LD_INT 0
15302: ST_TO_ADDR
// uc_side := 0 ;
15303: LD_ADDR_OWVAR 20
15307: PUSH
15308: LD_INT 0
15310: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15311: LD_ADDR_OWVAR 29
15315: PUSH
15316: LD_INT 12
15318: PUSH
15319: LD_INT 12
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: ST_TO_ADDR
// hc_agressivity := 20 ;
15326: LD_ADDR_OWVAR 35
15330: PUSH
15331: LD_INT 20
15333: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15334: LD_ADDR_OWVAR 28
15338: PUSH
15339: LD_INT 17
15341: ST_TO_ADDR
// hc_gallery :=  ;
15342: LD_ADDR_OWVAR 33
15346: PUSH
15347: LD_STRING 
15349: ST_TO_ADDR
// hc_name :=  ;
15350: LD_ADDR_OWVAR 26
15354: PUSH
15355: LD_STRING 
15357: ST_TO_ADDR
// un := CreateHuman ;
15358: LD_ADDR_VAR 0 2
15362: PUSH
15363: CALL_OW 44
15367: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15368: LD_VAR 0 2
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 51
// tmp := tmp ^ un ;
15380: LD_ADDR_VAR 0 3
15384: PUSH
15385: LD_VAR 0 3
15389: PUSH
15390: LD_VAR 0 2
15394: ADD
15395: ST_TO_ADDR
// end ;
15396: GO 15292
15398: POP
15399: POP
// repeat wait ( 0 0$1 ) ;
15400: LD_INT 35
15402: PPUSH
15403: CALL_OW 67
// for un in tmp do
15407: LD_ADDR_VAR 0 2
15411: PUSH
15412: LD_VAR 0 3
15416: PUSH
15417: FOR_IN
15418: IFFALSE 15492
// begin if IsDead ( un ) then
15420: LD_VAR 0 2
15424: PPUSH
15425: CALL_OW 301
15429: IFFALSE 15449
// begin tmp := tmp diff un ;
15431: LD_ADDR_VAR 0 3
15435: PUSH
15436: LD_VAR 0 3
15440: PUSH
15441: LD_VAR 0 2
15445: DIFF
15446: ST_TO_ADDR
// continue ;
15447: GO 15417
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15449: LD_VAR 0 2
15453: PPUSH
15454: LD_INT 3
15456: PUSH
15457: LD_INT 22
15459: PUSH
15460: LD_INT 0
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: PPUSH
15476: LD_VAR 0 2
15480: PPUSH
15481: CALL_OW 74
15485: PPUSH
15486: CALL_OW 115
// end ;
15490: GO 15417
15492: POP
15493: POP
// until not tmp ;
15494: LD_VAR 0 3
15498: NOT
15499: IFFALSE 15400
// end ;
15501: PPOPN 3
15503: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15504: LD_EXP 19
15508: PUSH
15509: LD_EXP 44
15513: AND
15514: IFFALSE 15568
15516: GO 15518
15518: DISABLE
// begin ToLua ( displayTroll(); ) ;
15519: LD_STRING displayTroll();
15521: PPUSH
15522: CALL_OW 559
// wait ( 3 3$00 ) ;
15526: LD_INT 6300
15528: PPUSH
15529: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15533: LD_STRING hideTroll();
15535: PPUSH
15536: CALL_OW 559
// wait ( 1 1$00 ) ;
15540: LD_INT 2100
15542: PPUSH
15543: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15547: LD_STRING displayTroll();
15549: PPUSH
15550: CALL_OW 559
// wait ( 1 1$00 ) ;
15554: LD_INT 2100
15556: PPUSH
15557: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15561: LD_STRING hideTroll();
15563: PPUSH
15564: CALL_OW 559
// end ;
15568: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15569: LD_EXP 19
15573: PUSH
15574: LD_EXP 45
15578: AND
15579: IFFALSE 15642
15581: GO 15583
15583: DISABLE
15584: LD_INT 0
15586: PPUSH
// begin p := 0 ;
15587: LD_ADDR_VAR 0 1
15591: PUSH
15592: LD_INT 0
15594: ST_TO_ADDR
// repeat game_speed := 1 ;
15595: LD_ADDR_OWVAR 65
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15603: LD_INT 35
15605: PPUSH
15606: CALL_OW 67
// p := p + 1 ;
15610: LD_ADDR_VAR 0 1
15614: PUSH
15615: LD_VAR 0 1
15619: PUSH
15620: LD_INT 1
15622: PLUS
15623: ST_TO_ADDR
// until p >= 60 ;
15624: LD_VAR 0 1
15628: PUSH
15629: LD_INT 60
15631: GREATEREQUAL
15632: IFFALSE 15595
// game_speed := 4 ;
15634: LD_ADDR_OWVAR 65
15638: PUSH
15639: LD_INT 4
15641: ST_TO_ADDR
// end ;
15642: PPOPN 1
15644: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15645: LD_EXP 19
15649: PUSH
15650: LD_EXP 46
15654: AND
15655: IFFALSE 15801
15657: GO 15659
15659: DISABLE
15660: LD_INT 0
15662: PPUSH
15663: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15664: LD_ADDR_VAR 0 1
15668: PUSH
15669: LD_INT 22
15671: PUSH
15672: LD_OWVAR 2
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PUSH
15681: LD_INT 2
15683: PUSH
15684: LD_INT 30
15686: PUSH
15687: LD_INT 0
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: LD_INT 30
15696: PUSH
15697: LD_INT 1
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: LIST
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PPUSH
15713: CALL_OW 69
15717: ST_TO_ADDR
// if not depot then
15718: LD_VAR 0 1
15722: NOT
15723: IFFALSE 15727
// exit ;
15725: GO 15801
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15727: LD_ADDR_VAR 0 2
15731: PUSH
15732: LD_VAR 0 1
15736: PUSH
15737: LD_INT 1
15739: PPUSH
15740: LD_VAR 0 1
15744: PPUSH
15745: CALL_OW 12
15749: ARRAY
15750: PPUSH
15751: CALL_OW 274
15755: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15756: LD_VAR 0 2
15760: PPUSH
15761: LD_INT 1
15763: PPUSH
15764: LD_INT 0
15766: PPUSH
15767: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15771: LD_VAR 0 2
15775: PPUSH
15776: LD_INT 2
15778: PPUSH
15779: LD_INT 0
15781: PPUSH
15782: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15786: LD_VAR 0 2
15790: PPUSH
15791: LD_INT 3
15793: PPUSH
15794: LD_INT 0
15796: PPUSH
15797: CALL_OW 277
// end ;
15801: PPOPN 2
15803: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15804: LD_EXP 19
15808: PUSH
15809: LD_EXP 47
15813: AND
15814: IFFALSE 15911
15816: GO 15818
15818: DISABLE
15819: LD_INT 0
15821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15822: LD_ADDR_VAR 0 1
15826: PUSH
15827: LD_INT 22
15829: PUSH
15830: LD_OWVAR 2
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 21
15841: PUSH
15842: LD_INT 1
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: LD_INT 3
15851: PUSH
15852: LD_INT 23
15854: PUSH
15855: LD_INT 0
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: LIST
15870: PPUSH
15871: CALL_OW 69
15875: ST_TO_ADDR
// if not tmp then
15876: LD_VAR 0 1
15880: NOT
15881: IFFALSE 15885
// exit ;
15883: GO 15911
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15885: LD_VAR 0 1
15889: PUSH
15890: LD_INT 1
15892: PPUSH
15893: LD_VAR 0 1
15897: PPUSH
15898: CALL_OW 12
15902: ARRAY
15903: PPUSH
15904: LD_INT 200
15906: PPUSH
15907: CALL_OW 234
// end ;
15911: PPOPN 1
15913: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15914: LD_EXP 19
15918: PUSH
15919: LD_EXP 48
15923: AND
15924: IFFALSE 16003
15926: GO 15928
15928: DISABLE
15929: LD_INT 0
15931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15932: LD_ADDR_VAR 0 1
15936: PUSH
15937: LD_INT 22
15939: PUSH
15940: LD_OWVAR 2
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 21
15951: PUSH
15952: LD_INT 2
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PPUSH
15963: CALL_OW 69
15967: ST_TO_ADDR
// if not tmp then
15968: LD_VAR 0 1
15972: NOT
15973: IFFALSE 15977
// exit ;
15975: GO 16003
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15977: LD_VAR 0 1
15981: PUSH
15982: LD_INT 1
15984: PPUSH
15985: LD_VAR 0 1
15989: PPUSH
15990: CALL_OW 12
15994: ARRAY
15995: PPUSH
15996: LD_INT 60
15998: PPUSH
15999: CALL_OW 234
// end ;
16003: PPOPN 1
16005: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16006: LD_EXP 19
16010: PUSH
16011: LD_EXP 49
16015: AND
16016: IFFALSE 16115
16018: GO 16020
16020: DISABLE
16021: LD_INT 0
16023: PPUSH
16024: PPUSH
// begin enable ;
16025: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16026: LD_ADDR_VAR 0 1
16030: PUSH
16031: LD_INT 22
16033: PUSH
16034: LD_OWVAR 2
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 61
16045: PUSH
16046: EMPTY
16047: LIST
16048: PUSH
16049: LD_INT 33
16051: PUSH
16052: LD_INT 2
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 69
16068: ST_TO_ADDR
// if not tmp then
16069: LD_VAR 0 1
16073: NOT
16074: IFFALSE 16078
// exit ;
16076: GO 16115
// for i in tmp do
16078: LD_ADDR_VAR 0 2
16082: PUSH
16083: LD_VAR 0 1
16087: PUSH
16088: FOR_IN
16089: IFFALSE 16113
// if IsControledBy ( i ) then
16091: LD_VAR 0 2
16095: PPUSH
16096: CALL_OW 312
16100: IFFALSE 16111
// ComUnlink ( i ) ;
16102: LD_VAR 0 2
16106: PPUSH
16107: CALL_OW 136
16111: GO 16088
16113: POP
16114: POP
// end ;
16115: PPOPN 2
16117: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16118: LD_EXP 19
16122: PUSH
16123: LD_EXP 50
16127: AND
16128: IFFALSE 16268
16130: GO 16132
16132: DISABLE
16133: LD_INT 0
16135: PPUSH
16136: PPUSH
// begin ToLua ( displayPowell(); ) ;
16137: LD_STRING displayPowell();
16139: PPUSH
16140: CALL_OW 559
// uc_side := 0 ;
16144: LD_ADDR_OWVAR 20
16148: PUSH
16149: LD_INT 0
16151: ST_TO_ADDR
// uc_nation := 2 ;
16152: LD_ADDR_OWVAR 21
16156: PUSH
16157: LD_INT 2
16159: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16160: LD_ADDR_OWVAR 37
16164: PUSH
16165: LD_INT 14
16167: ST_TO_ADDR
// vc_engine := engine_siberite ;
16168: LD_ADDR_OWVAR 39
16172: PUSH
16173: LD_INT 3
16175: ST_TO_ADDR
// vc_control := control_apeman ;
16176: LD_ADDR_OWVAR 38
16180: PUSH
16181: LD_INT 5
16183: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16184: LD_ADDR_OWVAR 40
16188: PUSH
16189: LD_INT 29
16191: ST_TO_ADDR
// un := CreateVehicle ;
16192: LD_ADDR_VAR 0 2
16196: PUSH
16197: CALL_OW 45
16201: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16202: LD_VAR 0 2
16206: PPUSH
16207: LD_INT 1
16209: PPUSH
16210: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16214: LD_INT 35
16216: PPUSH
16217: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16221: LD_VAR 0 2
16225: PPUSH
16226: LD_INT 22
16228: PUSH
16229: LD_OWVAR 2
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PPUSH
16238: CALL_OW 69
16242: PPUSH
16243: LD_VAR 0 2
16247: PPUSH
16248: CALL_OW 74
16252: PPUSH
16253: CALL_OW 115
// until IsDead ( un ) ;
16257: LD_VAR 0 2
16261: PPUSH
16262: CALL_OW 301
16266: IFFALSE 16214
// end ;
16268: PPOPN 2
16270: END
// every 0 0$1 trigger StreamModeActive and sStu do
16271: LD_EXP 19
16275: PUSH
16276: LD_EXP 58
16280: AND
16281: IFFALSE 16297
16283: GO 16285
16285: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16286: LD_STRING displayStucuk();
16288: PPUSH
16289: CALL_OW 559
// ResetFog ;
16293: CALL_OW 335
// end ;
16297: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16298: LD_EXP 19
16302: PUSH
16303: LD_EXP 51
16307: AND
16308: IFFALSE 16449
16310: GO 16312
16312: DISABLE
16313: LD_INT 0
16315: PPUSH
16316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16317: LD_ADDR_VAR 0 2
16321: PUSH
16322: LD_INT 22
16324: PUSH
16325: LD_OWVAR 2
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 21
16336: PUSH
16337: LD_INT 1
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PPUSH
16348: CALL_OW 69
16352: ST_TO_ADDR
// if not tmp then
16353: LD_VAR 0 2
16357: NOT
16358: IFFALSE 16362
// exit ;
16360: GO 16449
// un := tmp [ rand ( 1 , tmp ) ] ;
16362: LD_ADDR_VAR 0 1
16366: PUSH
16367: LD_VAR 0 2
16371: PUSH
16372: LD_INT 1
16374: PPUSH
16375: LD_VAR 0 2
16379: PPUSH
16380: CALL_OW 12
16384: ARRAY
16385: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16386: LD_VAR 0 1
16390: PPUSH
16391: LD_INT 0
16393: PPUSH
16394: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16398: LD_VAR 0 1
16402: PPUSH
16403: LD_OWVAR 3
16407: PUSH
16408: LD_VAR 0 1
16412: DIFF
16413: PPUSH
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 74
16423: PPUSH
16424: CALL_OW 115
// wait ( 0 0$20 ) ;
16428: LD_INT 700
16430: PPUSH
16431: CALL_OW 67
// SetSide ( un , your_side ) ;
16435: LD_VAR 0 1
16439: PPUSH
16440: LD_OWVAR 2
16444: PPUSH
16445: CALL_OW 235
// end ;
16449: PPOPN 2
16451: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16452: LD_EXP 19
16456: PUSH
16457: LD_EXP 52
16461: AND
16462: IFFALSE 16568
16464: GO 16466
16466: DISABLE
16467: LD_INT 0
16469: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16470: LD_ADDR_VAR 0 1
16474: PUSH
16475: LD_INT 22
16477: PUSH
16478: LD_OWVAR 2
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 2
16489: PUSH
16490: LD_INT 30
16492: PUSH
16493: LD_INT 0
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 30
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: LIST
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PPUSH
16519: CALL_OW 69
16523: ST_TO_ADDR
// if not depot then
16524: LD_VAR 0 1
16528: NOT
16529: IFFALSE 16533
// exit ;
16531: GO 16568
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16533: LD_VAR 0 1
16537: PUSH
16538: LD_INT 1
16540: ARRAY
16541: PPUSH
16542: CALL_OW 250
16546: PPUSH
16547: LD_VAR 0 1
16551: PUSH
16552: LD_INT 1
16554: ARRAY
16555: PPUSH
16556: CALL_OW 251
16560: PPUSH
16561: LD_INT 70
16563: PPUSH
16564: CALL_OW 495
// end ;
16568: PPOPN 1
16570: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16571: LD_EXP 19
16575: PUSH
16576: LD_EXP 53
16580: AND
16581: IFFALSE 16792
16583: GO 16585
16585: DISABLE
16586: LD_INT 0
16588: PPUSH
16589: PPUSH
16590: PPUSH
16591: PPUSH
16592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16593: LD_ADDR_VAR 0 5
16597: PUSH
16598: LD_INT 22
16600: PUSH
16601: LD_OWVAR 2
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 21
16612: PUSH
16613: LD_INT 1
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PPUSH
16624: CALL_OW 69
16628: ST_TO_ADDR
// if not tmp then
16629: LD_VAR 0 5
16633: NOT
16634: IFFALSE 16638
// exit ;
16636: GO 16792
// for i in tmp do
16638: LD_ADDR_VAR 0 1
16642: PUSH
16643: LD_VAR 0 5
16647: PUSH
16648: FOR_IN
16649: IFFALSE 16790
// begin d := rand ( 0 , 5 ) ;
16651: LD_ADDR_VAR 0 4
16655: PUSH
16656: LD_INT 0
16658: PPUSH
16659: LD_INT 5
16661: PPUSH
16662: CALL_OW 12
16666: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16667: LD_ADDR_VAR 0 2
16671: PUSH
16672: LD_VAR 0 1
16676: PPUSH
16677: CALL_OW 250
16681: PPUSH
16682: LD_VAR 0 4
16686: PPUSH
16687: LD_INT 3
16689: PPUSH
16690: LD_INT 12
16692: PPUSH
16693: CALL_OW 12
16697: PPUSH
16698: CALL_OW 272
16702: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16703: LD_ADDR_VAR 0 3
16707: PUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 251
16717: PPUSH
16718: LD_VAR 0 4
16722: PPUSH
16723: LD_INT 3
16725: PPUSH
16726: LD_INT 12
16728: PPUSH
16729: CALL_OW 12
16733: PPUSH
16734: CALL_OW 273
16738: ST_TO_ADDR
// if ValidHex ( x , y ) then
16739: LD_VAR 0 2
16743: PPUSH
16744: LD_VAR 0 3
16748: PPUSH
16749: CALL_OW 488
16753: IFFALSE 16788
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16755: LD_VAR 0 1
16759: PPUSH
16760: LD_VAR 0 2
16764: PPUSH
16765: LD_VAR 0 3
16769: PPUSH
16770: LD_INT 3
16772: PPUSH
16773: LD_INT 6
16775: PPUSH
16776: CALL_OW 12
16780: PPUSH
16781: LD_INT 1
16783: PPUSH
16784: CALL_OW 483
// end ;
16788: GO 16648
16790: POP
16791: POP
// end ;
16792: PPOPN 5
16794: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16795: LD_EXP 19
16799: PUSH
16800: LD_EXP 54
16804: AND
16805: IFFALSE 16899
16807: GO 16809
16809: DISABLE
16810: LD_INT 0
16812: PPUSH
16813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16814: LD_ADDR_VAR 0 2
16818: PUSH
16819: LD_INT 22
16821: PUSH
16822: LD_OWVAR 2
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 32
16833: PUSH
16834: LD_INT 1
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 21
16843: PUSH
16844: LD_INT 2
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: PPUSH
16856: CALL_OW 69
16860: ST_TO_ADDR
// if not tmp then
16861: LD_VAR 0 2
16865: NOT
16866: IFFALSE 16870
// exit ;
16868: GO 16899
// for i in tmp do
16870: LD_ADDR_VAR 0 1
16874: PUSH
16875: LD_VAR 0 2
16879: PUSH
16880: FOR_IN
16881: IFFALSE 16897
// SetFuel ( i , 0 ) ;
16883: LD_VAR 0 1
16887: PPUSH
16888: LD_INT 0
16890: PPUSH
16891: CALL_OW 240
16895: GO 16880
16897: POP
16898: POP
// end ;
16899: PPOPN 2
16901: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16902: LD_EXP 19
16906: PUSH
16907: LD_EXP 55
16911: AND
16912: IFFALSE 16978
16914: GO 16916
16916: DISABLE
16917: LD_INT 0
16919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16920: LD_ADDR_VAR 0 1
16924: PUSH
16925: LD_INT 22
16927: PUSH
16928: LD_OWVAR 2
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: PUSH
16937: LD_INT 30
16939: PUSH
16940: LD_INT 29
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PPUSH
16951: CALL_OW 69
16955: ST_TO_ADDR
// if not tmp then
16956: LD_VAR 0 1
16960: NOT
16961: IFFALSE 16965
// exit ;
16963: GO 16978
// DestroyUnit ( tmp [ 1 ] ) ;
16965: LD_VAR 0 1
16969: PUSH
16970: LD_INT 1
16972: ARRAY
16973: PPUSH
16974: CALL_OW 65
// end ;
16978: PPOPN 1
16980: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16981: LD_EXP 19
16985: PUSH
16986: LD_EXP 57
16990: AND
16991: IFFALSE 17120
16993: GO 16995
16995: DISABLE
16996: LD_INT 0
16998: PPUSH
// begin uc_side := 0 ;
16999: LD_ADDR_OWVAR 20
17003: PUSH
17004: LD_INT 0
17006: ST_TO_ADDR
// uc_nation := nation_arabian ;
17007: LD_ADDR_OWVAR 21
17011: PUSH
17012: LD_INT 2
17014: ST_TO_ADDR
// hc_gallery :=  ;
17015: LD_ADDR_OWVAR 33
17019: PUSH
17020: LD_STRING 
17022: ST_TO_ADDR
// hc_name :=  ;
17023: LD_ADDR_OWVAR 26
17027: PUSH
17028: LD_STRING 
17030: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17031: LD_INT 1
17033: PPUSH
17034: LD_INT 11
17036: PPUSH
17037: LD_INT 10
17039: PPUSH
17040: CALL_OW 380
// un := CreateHuman ;
17044: LD_ADDR_VAR 0 1
17048: PUSH
17049: CALL_OW 44
17053: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17054: LD_VAR 0 1
17058: PPUSH
17059: LD_INT 1
17061: PPUSH
17062: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17066: LD_INT 35
17068: PPUSH
17069: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17073: LD_VAR 0 1
17077: PPUSH
17078: LD_INT 22
17080: PUSH
17081: LD_OWVAR 2
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PPUSH
17090: CALL_OW 69
17094: PPUSH
17095: LD_VAR 0 1
17099: PPUSH
17100: CALL_OW 74
17104: PPUSH
17105: CALL_OW 115
// until IsDead ( un ) ;
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 301
17118: IFFALSE 17066
// end ;
17120: PPOPN 1
17122: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17123: LD_EXP 19
17127: PUSH
17128: LD_EXP 59
17132: AND
17133: IFFALSE 17145
17135: GO 17137
17137: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17138: LD_STRING earthquake(getX(game), 0, 32)
17140: PPUSH
17141: CALL_OW 559
17145: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17146: LD_EXP 19
17150: PUSH
17151: LD_EXP 60
17155: AND
17156: IFFALSE 17247
17158: GO 17160
17160: DISABLE
17161: LD_INT 0
17163: PPUSH
// begin enable ;
17164: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17165: LD_ADDR_VAR 0 1
17169: PUSH
17170: LD_INT 22
17172: PUSH
17173: LD_OWVAR 2
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 21
17184: PUSH
17185: LD_INT 2
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 33
17194: PUSH
17195: LD_INT 3
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: LIST
17206: PPUSH
17207: CALL_OW 69
17211: ST_TO_ADDR
// if not tmp then
17212: LD_VAR 0 1
17216: NOT
17217: IFFALSE 17221
// exit ;
17219: GO 17247
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17221: LD_VAR 0 1
17225: PUSH
17226: LD_INT 1
17228: PPUSH
17229: LD_VAR 0 1
17233: PPUSH
17234: CALL_OW 12
17238: ARRAY
17239: PPUSH
17240: LD_INT 1
17242: PPUSH
17243: CALL_OW 234
// end ;
17247: PPOPN 1
17249: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17250: LD_EXP 19
17254: PUSH
17255: LD_EXP 61
17259: AND
17260: IFFALSE 17401
17262: GO 17264
17264: DISABLE
17265: LD_INT 0
17267: PPUSH
17268: PPUSH
17269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17270: LD_ADDR_VAR 0 3
17274: PUSH
17275: LD_INT 22
17277: PUSH
17278: LD_OWVAR 2
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 25
17289: PUSH
17290: LD_INT 1
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PPUSH
17301: CALL_OW 69
17305: ST_TO_ADDR
// if not tmp then
17306: LD_VAR 0 3
17310: NOT
17311: IFFALSE 17315
// exit ;
17313: GO 17401
// un := tmp [ rand ( 1 , tmp ) ] ;
17315: LD_ADDR_VAR 0 2
17319: PUSH
17320: LD_VAR 0 3
17324: PUSH
17325: LD_INT 1
17327: PPUSH
17328: LD_VAR 0 3
17332: PPUSH
17333: CALL_OW 12
17337: ARRAY
17338: ST_TO_ADDR
// if Crawls ( un ) then
17339: LD_VAR 0 2
17343: PPUSH
17344: CALL_OW 318
17348: IFFALSE 17359
// ComWalk ( un ) ;
17350: LD_VAR 0 2
17354: PPUSH
17355: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17359: LD_VAR 0 2
17363: PPUSH
17364: LD_INT 9
17366: PPUSH
17367: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17371: LD_INT 28
17373: PPUSH
17374: LD_OWVAR 2
17378: PPUSH
17379: LD_INT 2
17381: PPUSH
17382: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17386: LD_INT 29
17388: PPUSH
17389: LD_OWVAR 2
17393: PPUSH
17394: LD_INT 2
17396: PPUSH
17397: CALL_OW 322
// end ;
17401: PPOPN 3
17403: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17404: LD_EXP 19
17408: PUSH
17409: LD_EXP 62
17413: AND
17414: IFFALSE 17525
17416: GO 17418
17418: DISABLE
17419: LD_INT 0
17421: PPUSH
17422: PPUSH
17423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17424: LD_ADDR_VAR 0 3
17428: PUSH
17429: LD_INT 22
17431: PUSH
17432: LD_OWVAR 2
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 25
17443: PUSH
17444: LD_INT 1
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PPUSH
17455: CALL_OW 69
17459: ST_TO_ADDR
// if not tmp then
17460: LD_VAR 0 3
17464: NOT
17465: IFFALSE 17469
// exit ;
17467: GO 17525
// un := tmp [ rand ( 1 , tmp ) ] ;
17469: LD_ADDR_VAR 0 2
17473: PUSH
17474: LD_VAR 0 3
17478: PUSH
17479: LD_INT 1
17481: PPUSH
17482: LD_VAR 0 3
17486: PPUSH
17487: CALL_OW 12
17491: ARRAY
17492: ST_TO_ADDR
// if Crawls ( un ) then
17493: LD_VAR 0 2
17497: PPUSH
17498: CALL_OW 318
17502: IFFALSE 17513
// ComWalk ( un ) ;
17504: LD_VAR 0 2
17508: PPUSH
17509: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17513: LD_VAR 0 2
17517: PPUSH
17518: LD_INT 8
17520: PPUSH
17521: CALL_OW 336
// end ;
17525: PPOPN 3
17527: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17528: LD_EXP 19
17532: PUSH
17533: LD_EXP 63
17537: AND
17538: IFFALSE 17682
17540: GO 17542
17542: DISABLE
17543: LD_INT 0
17545: PPUSH
17546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17547: LD_ADDR_VAR 0 2
17551: PUSH
17552: LD_INT 22
17554: PUSH
17555: LD_OWVAR 2
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 21
17566: PUSH
17567: LD_INT 2
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: LD_INT 2
17576: PUSH
17577: LD_INT 34
17579: PUSH
17580: LD_INT 12
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 34
17589: PUSH
17590: LD_INT 51
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 34
17599: PUSH
17600: LD_INT 32
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: LIST
17617: PPUSH
17618: CALL_OW 69
17622: ST_TO_ADDR
// if not tmp then
17623: LD_VAR 0 2
17627: NOT
17628: IFFALSE 17632
// exit ;
17630: GO 17682
// for i in tmp do
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_VAR 0 2
17641: PUSH
17642: FOR_IN
17643: IFFALSE 17680
// if GetCargo ( i , mat_artifact ) = 0 then
17645: LD_VAR 0 1
17649: PPUSH
17650: LD_INT 4
17652: PPUSH
17653: CALL_OW 289
17657: PUSH
17658: LD_INT 0
17660: EQUAL
17661: IFFALSE 17678
// SetCargo ( i , mat_siberit , 100 ) ;
17663: LD_VAR 0 1
17667: PPUSH
17668: LD_INT 3
17670: PPUSH
17671: LD_INT 100
17673: PPUSH
17674: CALL_OW 290
17678: GO 17642
17680: POP
17681: POP
// end ;
17682: PPOPN 2
17684: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17685: LD_EXP 19
17689: PUSH
17690: LD_EXP 64
17694: AND
17695: IFFALSE 17878
17697: GO 17699
17699: DISABLE
17700: LD_INT 0
17702: PPUSH
17703: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17704: LD_ADDR_VAR 0 2
17708: PUSH
17709: LD_INT 22
17711: PUSH
17712: LD_OWVAR 2
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: ST_TO_ADDR
// if not tmp then
17726: LD_VAR 0 2
17730: NOT
17731: IFFALSE 17735
// exit ;
17733: GO 17878
// for i := 1 to 2 do
17735: LD_ADDR_VAR 0 1
17739: PUSH
17740: DOUBLE
17741: LD_INT 1
17743: DEC
17744: ST_TO_ADDR
17745: LD_INT 2
17747: PUSH
17748: FOR_TO
17749: IFFALSE 17876
// begin uc_side := your_side ;
17751: LD_ADDR_OWVAR 20
17755: PUSH
17756: LD_OWVAR 2
17760: ST_TO_ADDR
// uc_nation := nation_american ;
17761: LD_ADDR_OWVAR 21
17765: PUSH
17766: LD_INT 1
17768: ST_TO_ADDR
// vc_chassis := us_morphling ;
17769: LD_ADDR_OWVAR 37
17773: PUSH
17774: LD_INT 5
17776: ST_TO_ADDR
// vc_engine := engine_siberite ;
17777: LD_ADDR_OWVAR 39
17781: PUSH
17782: LD_INT 3
17784: ST_TO_ADDR
// vc_control := control_computer ;
17785: LD_ADDR_OWVAR 38
17789: PUSH
17790: LD_INT 3
17792: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17793: LD_ADDR_OWVAR 40
17797: PUSH
17798: LD_INT 10
17800: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17801: LD_VAR 0 2
17805: PUSH
17806: LD_INT 1
17808: ARRAY
17809: PPUSH
17810: CALL_OW 310
17814: NOT
17815: IFFALSE 17862
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17817: CALL_OW 45
17821: PPUSH
17822: LD_VAR 0 2
17826: PUSH
17827: LD_INT 1
17829: ARRAY
17830: PPUSH
17831: CALL_OW 250
17835: PPUSH
17836: LD_VAR 0 2
17840: PUSH
17841: LD_INT 1
17843: ARRAY
17844: PPUSH
17845: CALL_OW 251
17849: PPUSH
17850: LD_INT 12
17852: PPUSH
17853: LD_INT 1
17855: PPUSH
17856: CALL_OW 50
17860: GO 17874
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17862: CALL_OW 45
17866: PPUSH
17867: LD_INT 1
17869: PPUSH
17870: CALL_OW 51
// end ;
17874: GO 17748
17876: POP
17877: POP
// end ;
17878: PPOPN 2
17880: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17881: LD_EXP 19
17885: PUSH
17886: LD_EXP 65
17890: AND
17891: IFFALSE 18113
17893: GO 17895
17895: DISABLE
17896: LD_INT 0
17898: PPUSH
17899: PPUSH
17900: PPUSH
17901: PPUSH
17902: PPUSH
17903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17904: LD_ADDR_VAR 0 6
17908: PUSH
17909: LD_INT 22
17911: PUSH
17912: LD_OWVAR 2
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 21
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 3
17933: PUSH
17934: LD_INT 23
17936: PUSH
17937: LD_INT 0
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: PPUSH
17953: CALL_OW 69
17957: ST_TO_ADDR
// if not tmp then
17958: LD_VAR 0 6
17962: NOT
17963: IFFALSE 17967
// exit ;
17965: GO 18113
// s1 := rand ( 1 , 4 ) ;
17967: LD_ADDR_VAR 0 2
17971: PUSH
17972: LD_INT 1
17974: PPUSH
17975: LD_INT 4
17977: PPUSH
17978: CALL_OW 12
17982: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17983: LD_ADDR_VAR 0 4
17987: PUSH
17988: LD_VAR 0 6
17992: PUSH
17993: LD_INT 1
17995: ARRAY
17996: PPUSH
17997: LD_VAR 0 2
18001: PPUSH
18002: CALL_OW 259
18006: ST_TO_ADDR
// if s1 = 1 then
18007: LD_VAR 0 2
18011: PUSH
18012: LD_INT 1
18014: EQUAL
18015: IFFALSE 18035
// s2 := rand ( 2 , 4 ) else
18017: LD_ADDR_VAR 0 3
18021: PUSH
18022: LD_INT 2
18024: PPUSH
18025: LD_INT 4
18027: PPUSH
18028: CALL_OW 12
18032: ST_TO_ADDR
18033: GO 18043
// s2 := 1 ;
18035: LD_ADDR_VAR 0 3
18039: PUSH
18040: LD_INT 1
18042: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18043: LD_ADDR_VAR 0 5
18047: PUSH
18048: LD_VAR 0 6
18052: PUSH
18053: LD_INT 1
18055: ARRAY
18056: PPUSH
18057: LD_VAR 0 3
18061: PPUSH
18062: CALL_OW 259
18066: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18067: LD_VAR 0 6
18071: PUSH
18072: LD_INT 1
18074: ARRAY
18075: PPUSH
18076: LD_VAR 0 2
18080: PPUSH
18081: LD_VAR 0 5
18085: PPUSH
18086: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18090: LD_VAR 0 6
18094: PUSH
18095: LD_INT 1
18097: ARRAY
18098: PPUSH
18099: LD_VAR 0 3
18103: PPUSH
18104: LD_VAR 0 4
18108: PPUSH
18109: CALL_OW 237
// end ;
18113: PPOPN 6
18115: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18116: LD_EXP 19
18120: PUSH
18121: LD_EXP 66
18125: AND
18126: IFFALSE 18205
18128: GO 18130
18130: DISABLE
18131: LD_INT 0
18133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18134: LD_ADDR_VAR 0 1
18138: PUSH
18139: LD_INT 22
18141: PUSH
18142: LD_OWVAR 2
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 30
18153: PUSH
18154: LD_INT 3
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PPUSH
18165: CALL_OW 69
18169: ST_TO_ADDR
// if not tmp then
18170: LD_VAR 0 1
18174: NOT
18175: IFFALSE 18179
// exit ;
18177: GO 18205
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18179: LD_VAR 0 1
18183: PUSH
18184: LD_INT 1
18186: PPUSH
18187: LD_VAR 0 1
18191: PPUSH
18192: CALL_OW 12
18196: ARRAY
18197: PPUSH
18198: LD_INT 1
18200: PPUSH
18201: CALL_OW 234
// end ;
18205: PPOPN 1
18207: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18208: LD_EXP 19
18212: PUSH
18213: LD_EXP 67
18217: AND
18218: IFFALSE 18330
18220: GO 18222
18222: DISABLE
18223: LD_INT 0
18225: PPUSH
18226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18227: LD_ADDR_VAR 0 2
18231: PUSH
18232: LD_INT 22
18234: PUSH
18235: LD_OWVAR 2
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 2
18246: PUSH
18247: LD_INT 30
18249: PUSH
18250: LD_INT 27
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 30
18259: PUSH
18260: LD_INT 26
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 30
18269: PUSH
18270: LD_INT 28
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PPUSH
18287: CALL_OW 69
18291: ST_TO_ADDR
// if not tmp then
18292: LD_VAR 0 2
18296: NOT
18297: IFFALSE 18301
// exit ;
18299: GO 18330
// for i in tmp do
18301: LD_ADDR_VAR 0 1
18305: PUSH
18306: LD_VAR 0 2
18310: PUSH
18311: FOR_IN
18312: IFFALSE 18328
// SetLives ( i , 1 ) ;
18314: LD_VAR 0 1
18318: PPUSH
18319: LD_INT 1
18321: PPUSH
18322: CALL_OW 234
18326: GO 18311
18328: POP
18329: POP
// end ;
18330: PPOPN 2
18332: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18333: LD_EXP 19
18337: PUSH
18338: LD_EXP 68
18342: AND
18343: IFFALSE 18630
18345: GO 18347
18347: DISABLE
18348: LD_INT 0
18350: PPUSH
18351: PPUSH
18352: PPUSH
// begin i := rand ( 1 , 7 ) ;
18353: LD_ADDR_VAR 0 1
18357: PUSH
18358: LD_INT 1
18360: PPUSH
18361: LD_INT 7
18363: PPUSH
18364: CALL_OW 12
18368: ST_TO_ADDR
// case i of 1 :
18369: LD_VAR 0 1
18373: PUSH
18374: LD_INT 1
18376: DOUBLE
18377: EQUAL
18378: IFTRUE 18382
18380: GO 18392
18382: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18383: LD_STRING earthquake(getX(game), 0, 32)
18385: PPUSH
18386: CALL_OW 559
18390: GO 18630
18392: LD_INT 2
18394: DOUBLE
18395: EQUAL
18396: IFTRUE 18400
18398: GO 18414
18400: POP
// begin ToLua ( displayStucuk(); ) ;
18401: LD_STRING displayStucuk();
18403: PPUSH
18404: CALL_OW 559
// ResetFog ;
18408: CALL_OW 335
// end ; 3 :
18412: GO 18630
18414: LD_INT 3
18416: DOUBLE
18417: EQUAL
18418: IFTRUE 18422
18420: GO 18526
18422: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18423: LD_ADDR_VAR 0 2
18427: PUSH
18428: LD_INT 22
18430: PUSH
18431: LD_OWVAR 2
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 25
18442: PUSH
18443: LD_INT 1
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PPUSH
18454: CALL_OW 69
18458: ST_TO_ADDR
// if not tmp then
18459: LD_VAR 0 2
18463: NOT
18464: IFFALSE 18468
// exit ;
18466: GO 18630
// un := tmp [ rand ( 1 , tmp ) ] ;
18468: LD_ADDR_VAR 0 3
18472: PUSH
18473: LD_VAR 0 2
18477: PUSH
18478: LD_INT 1
18480: PPUSH
18481: LD_VAR 0 2
18485: PPUSH
18486: CALL_OW 12
18490: ARRAY
18491: ST_TO_ADDR
// if Crawls ( un ) then
18492: LD_VAR 0 3
18496: PPUSH
18497: CALL_OW 318
18501: IFFALSE 18512
// ComWalk ( un ) ;
18503: LD_VAR 0 3
18507: PPUSH
18508: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18512: LD_VAR 0 3
18516: PPUSH
18517: LD_INT 8
18519: PPUSH
18520: CALL_OW 336
// end ; 4 :
18524: GO 18630
18526: LD_INT 4
18528: DOUBLE
18529: EQUAL
18530: IFTRUE 18534
18532: GO 18608
18534: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18535: LD_ADDR_VAR 0 2
18539: PUSH
18540: LD_INT 22
18542: PUSH
18543: LD_OWVAR 2
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 30
18554: PUSH
18555: LD_INT 29
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PPUSH
18566: CALL_OW 69
18570: ST_TO_ADDR
// if not tmp then
18571: LD_VAR 0 2
18575: NOT
18576: IFFALSE 18580
// exit ;
18578: GO 18630
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18580: LD_VAR 0 2
18584: PUSH
18585: LD_INT 1
18587: ARRAY
18588: PPUSH
18589: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18593: LD_VAR 0 2
18597: PUSH
18598: LD_INT 1
18600: ARRAY
18601: PPUSH
18602: CALL_OW 65
// end ; 5 .. 7 :
18606: GO 18630
18608: LD_INT 5
18610: DOUBLE
18611: GREATEREQUAL
18612: IFFALSE 18620
18614: LD_INT 7
18616: DOUBLE
18617: LESSEQUAL
18618: IFTRUE 18622
18620: GO 18629
18622: POP
// StreamSibBomb ; end ;
18623: CALL 14867 0 0
18627: GO 18630
18629: POP
// end ;
18630: PPOPN 3
18632: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18633: LD_EXP 19
18637: PUSH
18638: LD_EXP 69
18642: AND
18643: IFFALSE 18799
18645: GO 18647
18647: DISABLE
18648: LD_INT 0
18650: PPUSH
18651: PPUSH
18652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18653: LD_ADDR_VAR 0 2
18657: PUSH
18658: LD_INT 81
18660: PUSH
18661: LD_OWVAR 2
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: LD_INT 21
18675: PUSH
18676: LD_INT 1
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 21
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: LIST
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PPUSH
18702: CALL_OW 69
18706: ST_TO_ADDR
// if not tmp then
18707: LD_VAR 0 2
18711: NOT
18712: IFFALSE 18716
// exit ;
18714: GO 18799
// p := 0 ;
18716: LD_ADDR_VAR 0 3
18720: PUSH
18721: LD_INT 0
18723: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18724: LD_INT 35
18726: PPUSH
18727: CALL_OW 67
// p := p + 1 ;
18731: LD_ADDR_VAR 0 3
18735: PUSH
18736: LD_VAR 0 3
18740: PUSH
18741: LD_INT 1
18743: PLUS
18744: ST_TO_ADDR
// for i in tmp do
18745: LD_ADDR_VAR 0 1
18749: PUSH
18750: LD_VAR 0 2
18754: PUSH
18755: FOR_IN
18756: IFFALSE 18787
// if GetLives ( i ) < 1000 then
18758: LD_VAR 0 1
18762: PPUSH
18763: CALL_OW 256
18767: PUSH
18768: LD_INT 1000
18770: LESS
18771: IFFALSE 18785
// SetLives ( i , 1000 ) ;
18773: LD_VAR 0 1
18777: PPUSH
18778: LD_INT 1000
18780: PPUSH
18781: CALL_OW 234
18785: GO 18755
18787: POP
18788: POP
// until p > 20 ;
18789: LD_VAR 0 3
18793: PUSH
18794: LD_INT 20
18796: GREATER
18797: IFFALSE 18724
// end ;
18799: PPOPN 3
18801: END
// every 0 0$1 trigger StreamModeActive and sTime do
18802: LD_EXP 19
18806: PUSH
18807: LD_EXP 70
18811: AND
18812: IFFALSE 18847
18814: GO 18816
18816: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18817: LD_INT 28
18819: PPUSH
18820: LD_OWVAR 2
18824: PPUSH
18825: LD_INT 2
18827: PPUSH
18828: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18832: LD_INT 30
18834: PPUSH
18835: LD_OWVAR 2
18839: PPUSH
18840: LD_INT 2
18842: PPUSH
18843: CALL_OW 322
// end ;
18847: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18848: LD_EXP 19
18852: PUSH
18853: LD_EXP 71
18857: AND
18858: IFFALSE 18979
18860: GO 18862
18862: DISABLE
18863: LD_INT 0
18865: PPUSH
18866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18867: LD_ADDR_VAR 0 2
18871: PUSH
18872: LD_INT 22
18874: PUSH
18875: LD_OWVAR 2
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 21
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 3
18896: PUSH
18897: LD_INT 23
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: PPUSH
18916: CALL_OW 69
18920: ST_TO_ADDR
// if not tmp then
18921: LD_VAR 0 2
18925: NOT
18926: IFFALSE 18930
// exit ;
18928: GO 18979
// for i in tmp do
18930: LD_ADDR_VAR 0 1
18934: PUSH
18935: LD_VAR 0 2
18939: PUSH
18940: FOR_IN
18941: IFFALSE 18977
// begin if Crawls ( i ) then
18943: LD_VAR 0 1
18947: PPUSH
18948: CALL_OW 318
18952: IFFALSE 18963
// ComWalk ( i ) ;
18954: LD_VAR 0 1
18958: PPUSH
18959: CALL_OW 138
// SetClass ( i , 2 ) ;
18963: LD_VAR 0 1
18967: PPUSH
18968: LD_INT 2
18970: PPUSH
18971: CALL_OW 336
// end ;
18975: GO 18940
18977: POP
18978: POP
// end ;
18979: PPOPN 2
18981: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18982: LD_EXP 19
18986: PUSH
18987: LD_EXP 72
18991: AND
18992: IFFALSE 19280
18994: GO 18996
18996: DISABLE
18997: LD_INT 0
18999: PPUSH
19000: PPUSH
19001: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19002: LD_OWVAR 2
19006: PPUSH
19007: LD_INT 9
19009: PPUSH
19010: LD_INT 1
19012: PPUSH
19013: LD_INT 1
19015: PPUSH
19016: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19020: LD_INT 9
19022: PPUSH
19023: LD_OWVAR 2
19027: PPUSH
19028: CALL_OW 343
// uc_side := 9 ;
19032: LD_ADDR_OWVAR 20
19036: PUSH
19037: LD_INT 9
19039: ST_TO_ADDR
// uc_nation := 2 ;
19040: LD_ADDR_OWVAR 21
19044: PUSH
19045: LD_INT 2
19047: ST_TO_ADDR
// hc_name := Dark Warrior ;
19048: LD_ADDR_OWVAR 26
19052: PUSH
19053: LD_STRING Dark Warrior
19055: ST_TO_ADDR
// hc_gallery :=  ;
19056: LD_ADDR_OWVAR 33
19060: PUSH
19061: LD_STRING 
19063: ST_TO_ADDR
// hc_noskilllimit := true ;
19064: LD_ADDR_OWVAR 76
19068: PUSH
19069: LD_INT 1
19071: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19072: LD_ADDR_OWVAR 31
19076: PUSH
19077: LD_INT 30
19079: PUSH
19080: LD_INT 30
19082: PUSH
19083: LD_INT 30
19085: PUSH
19086: LD_INT 30
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: ST_TO_ADDR
// un := CreateHuman ;
19095: LD_ADDR_VAR 0 3
19099: PUSH
19100: CALL_OW 44
19104: ST_TO_ADDR
// hc_noskilllimit := false ;
19105: LD_ADDR_OWVAR 76
19109: PUSH
19110: LD_INT 0
19112: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19113: LD_VAR 0 3
19117: PPUSH
19118: LD_INT 1
19120: PPUSH
19121: CALL_OW 51
// ToLua ( playRanger() ) ;
19125: LD_STRING playRanger()
19127: PPUSH
19128: CALL_OW 559
// p := 0 ;
19132: LD_ADDR_VAR 0 2
19136: PUSH
19137: LD_INT 0
19139: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19140: LD_INT 35
19142: PPUSH
19143: CALL_OW 67
// p := p + 1 ;
19147: LD_ADDR_VAR 0 2
19151: PUSH
19152: LD_VAR 0 2
19156: PUSH
19157: LD_INT 1
19159: PLUS
19160: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19161: LD_VAR 0 3
19165: PPUSH
19166: CALL_OW 256
19170: PUSH
19171: LD_INT 1000
19173: LESS
19174: IFFALSE 19188
// SetLives ( un , 1000 ) ;
19176: LD_VAR 0 3
19180: PPUSH
19181: LD_INT 1000
19183: PPUSH
19184: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19188: LD_VAR 0 3
19192: PPUSH
19193: LD_INT 81
19195: PUSH
19196: LD_OWVAR 2
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 91
19207: PUSH
19208: LD_VAR 0 3
19212: PUSH
19213: LD_INT 30
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PPUSH
19225: CALL_OW 69
19229: PPUSH
19230: LD_VAR 0 3
19234: PPUSH
19235: CALL_OW 74
19239: PPUSH
19240: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19244: LD_VAR 0 2
19248: PUSH
19249: LD_INT 80
19251: GREATER
19252: PUSH
19253: LD_VAR 0 3
19257: PPUSH
19258: CALL_OW 301
19262: OR
19263: IFFALSE 19140
// if un then
19265: LD_VAR 0 3
19269: IFFALSE 19280
// RemoveUnit ( un ) ;
19271: LD_VAR 0 3
19275: PPUSH
19276: CALL_OW 64
// end ;
19280: PPOPN 3
19282: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19283: LD_EXP 73
19287: IFFALSE 19403
19289: GO 19291
19291: DISABLE
19292: LD_INT 0
19294: PPUSH
19295: PPUSH
19296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19297: LD_ADDR_VAR 0 2
19301: PUSH
19302: LD_INT 81
19304: PUSH
19305: LD_OWVAR 2
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 21
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PPUSH
19328: CALL_OW 69
19332: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19333: LD_STRING playComputer()
19335: PPUSH
19336: CALL_OW 559
// if not tmp then
19340: LD_VAR 0 2
19344: NOT
19345: IFFALSE 19349
// exit ;
19347: GO 19403
// for i in tmp do
19349: LD_ADDR_VAR 0 1
19353: PUSH
19354: LD_VAR 0 2
19358: PUSH
19359: FOR_IN
19360: IFFALSE 19401
// for j := 1 to 4 do
19362: LD_ADDR_VAR 0 3
19366: PUSH
19367: DOUBLE
19368: LD_INT 1
19370: DEC
19371: ST_TO_ADDR
19372: LD_INT 4
19374: PUSH
19375: FOR_TO
19376: IFFALSE 19397
// SetSkill ( i , j , 10 ) ;
19378: LD_VAR 0 1
19382: PPUSH
19383: LD_VAR 0 3
19387: PPUSH
19388: LD_INT 10
19390: PPUSH
19391: CALL_OW 237
19395: GO 19375
19397: POP
19398: POP
19399: GO 19359
19401: POP
19402: POP
// end ;
19403: PPOPN 3
19405: END
// every 0 0$1 trigger s30 do var i , tmp ;
19406: LD_EXP 74
19410: IFFALSE 19479
19412: GO 19414
19414: DISABLE
19415: LD_INT 0
19417: PPUSH
19418: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19419: LD_ADDR_VAR 0 2
19423: PUSH
19424: LD_INT 22
19426: PUSH
19427: LD_OWVAR 2
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PPUSH
19436: CALL_OW 69
19440: ST_TO_ADDR
// if not tmp then
19441: LD_VAR 0 2
19445: NOT
19446: IFFALSE 19450
// exit ;
19448: GO 19479
// for i in tmp do
19450: LD_ADDR_VAR 0 1
19454: PUSH
19455: LD_VAR 0 2
19459: PUSH
19460: FOR_IN
19461: IFFALSE 19477
// SetLives ( i , 300 ) ;
19463: LD_VAR 0 1
19467: PPUSH
19468: LD_INT 300
19470: PPUSH
19471: CALL_OW 234
19475: GO 19460
19477: POP
19478: POP
// end ;
19479: PPOPN 2
19481: END
// every 0 0$1 trigger s60 do var i , tmp ;
19482: LD_EXP 75
19486: IFFALSE 19555
19488: GO 19490
19490: DISABLE
19491: LD_INT 0
19493: PPUSH
19494: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19495: LD_ADDR_VAR 0 2
19499: PUSH
19500: LD_INT 22
19502: PUSH
19503: LD_OWVAR 2
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PPUSH
19512: CALL_OW 69
19516: ST_TO_ADDR
// if not tmp then
19517: LD_VAR 0 2
19521: NOT
19522: IFFALSE 19526
// exit ;
19524: GO 19555
// for i in tmp do
19526: LD_ADDR_VAR 0 1
19530: PUSH
19531: LD_VAR 0 2
19535: PUSH
19536: FOR_IN
19537: IFFALSE 19553
// SetLives ( i , 600 ) ;
19539: LD_VAR 0 1
19543: PPUSH
19544: LD_INT 600
19546: PPUSH
19547: CALL_OW 234
19551: GO 19536
19553: POP
19554: POP
// end ;
19555: PPOPN 2
19557: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19558: LD_INT 0
19560: PPUSH
// case cmd of 301 :
19561: LD_VAR 0 1
19565: PUSH
19566: LD_INT 301
19568: DOUBLE
19569: EQUAL
19570: IFTRUE 19574
19572: GO 19606
19574: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19575: LD_VAR 0 6
19579: PPUSH
19580: LD_VAR 0 7
19584: PPUSH
19585: LD_VAR 0 8
19589: PPUSH
19590: LD_VAR 0 4
19594: PPUSH
19595: LD_VAR 0 5
19599: PPUSH
19600: CALL 20807 0 5
19604: GO 19727
19606: LD_INT 302
19608: DOUBLE
19609: EQUAL
19610: IFTRUE 19614
19612: GO 19651
19614: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19615: LD_VAR 0 6
19619: PPUSH
19620: LD_VAR 0 7
19624: PPUSH
19625: LD_VAR 0 8
19629: PPUSH
19630: LD_VAR 0 9
19634: PPUSH
19635: LD_VAR 0 4
19639: PPUSH
19640: LD_VAR 0 5
19644: PPUSH
19645: CALL 20898 0 6
19649: GO 19727
19651: LD_INT 303
19653: DOUBLE
19654: EQUAL
19655: IFTRUE 19659
19657: GO 19696
19659: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19660: LD_VAR 0 6
19664: PPUSH
19665: LD_VAR 0 7
19669: PPUSH
19670: LD_VAR 0 8
19674: PPUSH
19675: LD_VAR 0 9
19679: PPUSH
19680: LD_VAR 0 4
19684: PPUSH
19685: LD_VAR 0 5
19689: PPUSH
19690: CALL 19732 0 6
19694: GO 19727
19696: LD_INT 304
19698: DOUBLE
19699: EQUAL
19700: IFTRUE 19704
19702: GO 19726
19704: POP
// hHackTeleport ( unit , x , y ) ; end ;
19705: LD_VAR 0 2
19709: PPUSH
19710: LD_VAR 0 4
19714: PPUSH
19715: LD_VAR 0 5
19719: PPUSH
19720: CALL 21491 0 3
19724: GO 19727
19726: POP
// end ;
19727: LD_VAR 0 12
19731: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19732: LD_INT 0
19734: PPUSH
19735: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19736: LD_VAR 0 1
19740: PUSH
19741: LD_INT 1
19743: LESS
19744: PUSH
19745: LD_VAR 0 1
19749: PUSH
19750: LD_INT 3
19752: GREATER
19753: OR
19754: PUSH
19755: LD_VAR 0 5
19759: PPUSH
19760: LD_VAR 0 6
19764: PPUSH
19765: CALL_OW 428
19769: OR
19770: IFFALSE 19774
// exit ;
19772: GO 20494
// uc_side := your_side ;
19774: LD_ADDR_OWVAR 20
19778: PUSH
19779: LD_OWVAR 2
19783: ST_TO_ADDR
// uc_nation := nation ;
19784: LD_ADDR_OWVAR 21
19788: PUSH
19789: LD_VAR 0 1
19793: ST_TO_ADDR
// bc_level = 1 ;
19794: LD_ADDR_OWVAR 43
19798: PUSH
19799: LD_INT 1
19801: ST_TO_ADDR
// case btype of 1 :
19802: LD_VAR 0 2
19806: PUSH
19807: LD_INT 1
19809: DOUBLE
19810: EQUAL
19811: IFTRUE 19815
19813: GO 19826
19815: POP
// bc_type := b_depot ; 2 :
19816: LD_ADDR_OWVAR 42
19820: PUSH
19821: LD_INT 0
19823: ST_TO_ADDR
19824: GO 20438
19826: LD_INT 2
19828: DOUBLE
19829: EQUAL
19830: IFTRUE 19834
19832: GO 19845
19834: POP
// bc_type := b_warehouse ; 3 :
19835: LD_ADDR_OWVAR 42
19839: PUSH
19840: LD_INT 1
19842: ST_TO_ADDR
19843: GO 20438
19845: LD_INT 3
19847: DOUBLE
19848: EQUAL
19849: IFTRUE 19853
19851: GO 19864
19853: POP
// bc_type := b_lab ; 4 .. 9 :
19854: LD_ADDR_OWVAR 42
19858: PUSH
19859: LD_INT 6
19861: ST_TO_ADDR
19862: GO 20438
19864: LD_INT 4
19866: DOUBLE
19867: GREATEREQUAL
19868: IFFALSE 19876
19870: LD_INT 9
19872: DOUBLE
19873: LESSEQUAL
19874: IFTRUE 19878
19876: GO 19930
19878: POP
// begin bc_type := b_lab_half ;
19879: LD_ADDR_OWVAR 42
19883: PUSH
19884: LD_INT 7
19886: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19887: LD_ADDR_OWVAR 44
19891: PUSH
19892: LD_INT 10
19894: PUSH
19895: LD_INT 11
19897: PUSH
19898: LD_INT 12
19900: PUSH
19901: LD_INT 15
19903: PUSH
19904: LD_INT 14
19906: PUSH
19907: LD_INT 13
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: PUSH
19918: LD_VAR 0 2
19922: PUSH
19923: LD_INT 3
19925: MINUS
19926: ARRAY
19927: ST_TO_ADDR
// end ; 10 .. 13 :
19928: GO 20438
19930: LD_INT 10
19932: DOUBLE
19933: GREATEREQUAL
19934: IFFALSE 19942
19936: LD_INT 13
19938: DOUBLE
19939: LESSEQUAL
19940: IFTRUE 19944
19942: GO 20021
19944: POP
// begin bc_type := b_lab_full ;
19945: LD_ADDR_OWVAR 42
19949: PUSH
19950: LD_INT 8
19952: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19953: LD_ADDR_OWVAR 44
19957: PUSH
19958: LD_INT 10
19960: PUSH
19961: LD_INT 12
19963: PUSH
19964: LD_INT 14
19966: PUSH
19967: LD_INT 13
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: PUSH
19976: LD_VAR 0 2
19980: PUSH
19981: LD_INT 9
19983: MINUS
19984: ARRAY
19985: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19986: LD_ADDR_OWVAR 45
19990: PUSH
19991: LD_INT 11
19993: PUSH
19994: LD_INT 15
19996: PUSH
19997: LD_INT 12
19999: PUSH
20000: LD_INT 15
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: PUSH
20009: LD_VAR 0 2
20013: PUSH
20014: LD_INT 9
20016: MINUS
20017: ARRAY
20018: ST_TO_ADDR
// end ; 14 :
20019: GO 20438
20021: LD_INT 14
20023: DOUBLE
20024: EQUAL
20025: IFTRUE 20029
20027: GO 20040
20029: POP
// bc_type := b_workshop ; 15 :
20030: LD_ADDR_OWVAR 42
20034: PUSH
20035: LD_INT 2
20037: ST_TO_ADDR
20038: GO 20438
20040: LD_INT 15
20042: DOUBLE
20043: EQUAL
20044: IFTRUE 20048
20046: GO 20059
20048: POP
// bc_type := b_factory ; 16 :
20049: LD_ADDR_OWVAR 42
20053: PUSH
20054: LD_INT 3
20056: ST_TO_ADDR
20057: GO 20438
20059: LD_INT 16
20061: DOUBLE
20062: EQUAL
20063: IFTRUE 20067
20065: GO 20078
20067: POP
// bc_type := b_ext_gun ; 17 :
20068: LD_ADDR_OWVAR 42
20072: PUSH
20073: LD_INT 17
20075: ST_TO_ADDR
20076: GO 20438
20078: LD_INT 17
20080: DOUBLE
20081: EQUAL
20082: IFTRUE 20086
20084: GO 20114
20086: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20087: LD_ADDR_OWVAR 42
20091: PUSH
20092: LD_INT 19
20094: PUSH
20095: LD_INT 23
20097: PUSH
20098: LD_INT 19
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: PUSH
20106: LD_VAR 0 1
20110: ARRAY
20111: ST_TO_ADDR
20112: GO 20438
20114: LD_INT 18
20116: DOUBLE
20117: EQUAL
20118: IFTRUE 20122
20120: GO 20133
20122: POP
// bc_type := b_ext_radar ; 19 :
20123: LD_ADDR_OWVAR 42
20127: PUSH
20128: LD_INT 20
20130: ST_TO_ADDR
20131: GO 20438
20133: LD_INT 19
20135: DOUBLE
20136: EQUAL
20137: IFTRUE 20141
20139: GO 20152
20141: POP
// bc_type := b_ext_radio ; 20 :
20142: LD_ADDR_OWVAR 42
20146: PUSH
20147: LD_INT 22
20149: ST_TO_ADDR
20150: GO 20438
20152: LD_INT 20
20154: DOUBLE
20155: EQUAL
20156: IFTRUE 20160
20158: GO 20171
20160: POP
// bc_type := b_ext_siberium ; 21 :
20161: LD_ADDR_OWVAR 42
20165: PUSH
20166: LD_INT 21
20168: ST_TO_ADDR
20169: GO 20438
20171: LD_INT 21
20173: DOUBLE
20174: EQUAL
20175: IFTRUE 20179
20177: GO 20190
20179: POP
// bc_type := b_ext_computer ; 22 :
20180: LD_ADDR_OWVAR 42
20184: PUSH
20185: LD_INT 24
20187: ST_TO_ADDR
20188: GO 20438
20190: LD_INT 22
20192: DOUBLE
20193: EQUAL
20194: IFTRUE 20198
20196: GO 20209
20198: POP
// bc_type := b_ext_track ; 23 :
20199: LD_ADDR_OWVAR 42
20203: PUSH
20204: LD_INT 16
20206: ST_TO_ADDR
20207: GO 20438
20209: LD_INT 23
20211: DOUBLE
20212: EQUAL
20213: IFTRUE 20217
20215: GO 20228
20217: POP
// bc_type := b_ext_laser ; 24 :
20218: LD_ADDR_OWVAR 42
20222: PUSH
20223: LD_INT 25
20225: ST_TO_ADDR
20226: GO 20438
20228: LD_INT 24
20230: DOUBLE
20231: EQUAL
20232: IFTRUE 20236
20234: GO 20247
20236: POP
// bc_type := b_control_tower ; 25 :
20237: LD_ADDR_OWVAR 42
20241: PUSH
20242: LD_INT 36
20244: ST_TO_ADDR
20245: GO 20438
20247: LD_INT 25
20249: DOUBLE
20250: EQUAL
20251: IFTRUE 20255
20253: GO 20266
20255: POP
// bc_type := b_breastwork ; 26 :
20256: LD_ADDR_OWVAR 42
20260: PUSH
20261: LD_INT 31
20263: ST_TO_ADDR
20264: GO 20438
20266: LD_INT 26
20268: DOUBLE
20269: EQUAL
20270: IFTRUE 20274
20272: GO 20285
20274: POP
// bc_type := b_bunker ; 27 :
20275: LD_ADDR_OWVAR 42
20279: PUSH
20280: LD_INT 32
20282: ST_TO_ADDR
20283: GO 20438
20285: LD_INT 27
20287: DOUBLE
20288: EQUAL
20289: IFTRUE 20293
20291: GO 20304
20293: POP
// bc_type := b_turret ; 28 :
20294: LD_ADDR_OWVAR 42
20298: PUSH
20299: LD_INT 33
20301: ST_TO_ADDR
20302: GO 20438
20304: LD_INT 28
20306: DOUBLE
20307: EQUAL
20308: IFTRUE 20312
20310: GO 20323
20312: POP
// bc_type := b_armoury ; 29 :
20313: LD_ADDR_OWVAR 42
20317: PUSH
20318: LD_INT 4
20320: ST_TO_ADDR
20321: GO 20438
20323: LD_INT 29
20325: DOUBLE
20326: EQUAL
20327: IFTRUE 20331
20329: GO 20342
20331: POP
// bc_type := b_barracks ; 30 :
20332: LD_ADDR_OWVAR 42
20336: PUSH
20337: LD_INT 5
20339: ST_TO_ADDR
20340: GO 20438
20342: LD_INT 30
20344: DOUBLE
20345: EQUAL
20346: IFTRUE 20350
20348: GO 20361
20350: POP
// bc_type := b_solar_power ; 31 :
20351: LD_ADDR_OWVAR 42
20355: PUSH
20356: LD_INT 27
20358: ST_TO_ADDR
20359: GO 20438
20361: LD_INT 31
20363: DOUBLE
20364: EQUAL
20365: IFTRUE 20369
20367: GO 20380
20369: POP
// bc_type := b_oil_power ; 32 :
20370: LD_ADDR_OWVAR 42
20374: PUSH
20375: LD_INT 26
20377: ST_TO_ADDR
20378: GO 20438
20380: LD_INT 32
20382: DOUBLE
20383: EQUAL
20384: IFTRUE 20388
20386: GO 20399
20388: POP
// bc_type := b_siberite_power ; 33 :
20389: LD_ADDR_OWVAR 42
20393: PUSH
20394: LD_INT 28
20396: ST_TO_ADDR
20397: GO 20438
20399: LD_INT 33
20401: DOUBLE
20402: EQUAL
20403: IFTRUE 20407
20405: GO 20418
20407: POP
// bc_type := b_oil_mine ; 34 :
20408: LD_ADDR_OWVAR 42
20412: PUSH
20413: LD_INT 29
20415: ST_TO_ADDR
20416: GO 20438
20418: LD_INT 34
20420: DOUBLE
20421: EQUAL
20422: IFTRUE 20426
20424: GO 20437
20426: POP
// bc_type := b_siberite_mine ; end ;
20427: LD_ADDR_OWVAR 42
20431: PUSH
20432: LD_INT 30
20434: ST_TO_ADDR
20435: GO 20438
20437: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20438: LD_ADDR_VAR 0 8
20442: PUSH
20443: LD_VAR 0 5
20447: PPUSH
20448: LD_VAR 0 6
20452: PPUSH
20453: LD_VAR 0 3
20457: PPUSH
20458: CALL_OW 47
20462: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20463: LD_OWVAR 42
20467: PUSH
20468: LD_INT 32
20470: PUSH
20471: LD_INT 33
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: IN
20478: IFFALSE 20494
// PlaceWeaponTurret ( b , weapon ) ;
20480: LD_VAR 0 8
20484: PPUSH
20485: LD_VAR 0 4
20489: PPUSH
20490: CALL_OW 431
// end ;
20494: LD_VAR 0 7
20498: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20499: LD_INT 0
20501: PPUSH
20502: PPUSH
20503: PPUSH
20504: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20505: LD_ADDR_VAR 0 4
20509: PUSH
20510: LD_INT 22
20512: PUSH
20513: LD_OWVAR 2
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 2
20524: PUSH
20525: LD_INT 30
20527: PUSH
20528: LD_INT 0
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 30
20537: PUSH
20538: LD_INT 1
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PPUSH
20554: CALL_OW 69
20558: ST_TO_ADDR
// if not tmp then
20559: LD_VAR 0 4
20563: NOT
20564: IFFALSE 20568
// exit ;
20566: GO 20627
// for i in tmp do
20568: LD_ADDR_VAR 0 2
20572: PUSH
20573: LD_VAR 0 4
20577: PUSH
20578: FOR_IN
20579: IFFALSE 20625
// for j = 1 to 3 do
20581: LD_ADDR_VAR 0 3
20585: PUSH
20586: DOUBLE
20587: LD_INT 1
20589: DEC
20590: ST_TO_ADDR
20591: LD_INT 3
20593: PUSH
20594: FOR_TO
20595: IFFALSE 20621
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20597: LD_VAR 0 2
20601: PPUSH
20602: CALL_OW 274
20606: PPUSH
20607: LD_VAR 0 3
20611: PPUSH
20612: LD_INT 99999
20614: PPUSH
20615: CALL_OW 277
20619: GO 20594
20621: POP
20622: POP
20623: GO 20578
20625: POP
20626: POP
// end ;
20627: LD_VAR 0 1
20631: RET
// export function hHackSetLevel10 ; var i , j ; begin
20632: LD_INT 0
20634: PPUSH
20635: PPUSH
20636: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20637: LD_ADDR_VAR 0 2
20641: PUSH
20642: LD_INT 21
20644: PUSH
20645: LD_INT 1
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PPUSH
20652: CALL_OW 69
20656: PUSH
20657: FOR_IN
20658: IFFALSE 20710
// if IsSelected ( i ) then
20660: LD_VAR 0 2
20664: PPUSH
20665: CALL_OW 306
20669: IFFALSE 20708
// begin for j := 1 to 4 do
20671: LD_ADDR_VAR 0 3
20675: PUSH
20676: DOUBLE
20677: LD_INT 1
20679: DEC
20680: ST_TO_ADDR
20681: LD_INT 4
20683: PUSH
20684: FOR_TO
20685: IFFALSE 20706
// SetSkill ( i , j , 10 ) ;
20687: LD_VAR 0 2
20691: PPUSH
20692: LD_VAR 0 3
20696: PPUSH
20697: LD_INT 10
20699: PPUSH
20700: CALL_OW 237
20704: GO 20684
20706: POP
20707: POP
// end ;
20708: GO 20657
20710: POP
20711: POP
// end ;
20712: LD_VAR 0 1
20716: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20717: LD_INT 0
20719: PPUSH
20720: PPUSH
20721: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20722: LD_ADDR_VAR 0 2
20726: PUSH
20727: LD_INT 22
20729: PUSH
20730: LD_OWVAR 2
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 21
20741: PUSH
20742: LD_INT 1
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PPUSH
20753: CALL_OW 69
20757: PUSH
20758: FOR_IN
20759: IFFALSE 20800
// begin for j := 1 to 4 do
20761: LD_ADDR_VAR 0 3
20765: PUSH
20766: DOUBLE
20767: LD_INT 1
20769: DEC
20770: ST_TO_ADDR
20771: LD_INT 4
20773: PUSH
20774: FOR_TO
20775: IFFALSE 20796
// SetSkill ( i , j , 10 ) ;
20777: LD_VAR 0 2
20781: PPUSH
20782: LD_VAR 0 3
20786: PPUSH
20787: LD_INT 10
20789: PPUSH
20790: CALL_OW 237
20794: GO 20774
20796: POP
20797: POP
// end ;
20798: GO 20758
20800: POP
20801: POP
// end ;
20802: LD_VAR 0 1
20806: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20807: LD_INT 0
20809: PPUSH
// uc_side := your_side ;
20810: LD_ADDR_OWVAR 20
20814: PUSH
20815: LD_OWVAR 2
20819: ST_TO_ADDR
// uc_nation := nation ;
20820: LD_ADDR_OWVAR 21
20824: PUSH
20825: LD_VAR 0 1
20829: ST_TO_ADDR
// InitHc ;
20830: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20834: LD_INT 0
20836: PPUSH
20837: LD_VAR 0 2
20841: PPUSH
20842: LD_VAR 0 3
20846: PPUSH
20847: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20851: LD_VAR 0 4
20855: PPUSH
20856: LD_VAR 0 5
20860: PPUSH
20861: CALL_OW 428
20865: PUSH
20866: LD_INT 0
20868: EQUAL
20869: IFFALSE 20893
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20871: CALL_OW 44
20875: PPUSH
20876: LD_VAR 0 4
20880: PPUSH
20881: LD_VAR 0 5
20885: PPUSH
20886: LD_INT 1
20888: PPUSH
20889: CALL_OW 48
// end ;
20893: LD_VAR 0 6
20897: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20898: LD_INT 0
20900: PPUSH
20901: PPUSH
// uc_side := your_side ;
20902: LD_ADDR_OWVAR 20
20906: PUSH
20907: LD_OWVAR 2
20911: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20912: LD_VAR 0 1
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: LD_INT 2
20922: PUSH
20923: LD_INT 3
20925: PUSH
20926: LD_INT 4
20928: PUSH
20929: LD_INT 5
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: IN
20939: IFFALSE 20951
// uc_nation := nation_american else
20941: LD_ADDR_OWVAR 21
20945: PUSH
20946: LD_INT 1
20948: ST_TO_ADDR
20949: GO 20994
// if chassis in [ 11 , 12 , 13 , 14 ] then
20951: LD_VAR 0 1
20955: PUSH
20956: LD_INT 11
20958: PUSH
20959: LD_INT 12
20961: PUSH
20962: LD_INT 13
20964: PUSH
20965: LD_INT 14
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: IN
20974: IFFALSE 20986
// uc_nation := nation_arabian else
20976: LD_ADDR_OWVAR 21
20980: PUSH
20981: LD_INT 2
20983: ST_TO_ADDR
20984: GO 20994
// uc_nation := nation_russian ;
20986: LD_ADDR_OWVAR 21
20990: PUSH
20991: LD_INT 3
20993: ST_TO_ADDR
// vc_chassis := chassis ;
20994: LD_ADDR_OWVAR 37
20998: PUSH
20999: LD_VAR 0 1
21003: ST_TO_ADDR
// vc_engine := engine ;
21004: LD_ADDR_OWVAR 39
21008: PUSH
21009: LD_VAR 0 2
21013: ST_TO_ADDR
// vc_control := control ;
21014: LD_ADDR_OWVAR 38
21018: PUSH
21019: LD_VAR 0 3
21023: ST_TO_ADDR
// vc_weapon := weapon ;
21024: LD_ADDR_OWVAR 40
21028: PUSH
21029: LD_VAR 0 4
21033: ST_TO_ADDR
// un := CreateVehicle ;
21034: LD_ADDR_VAR 0 8
21038: PUSH
21039: CALL_OW 45
21043: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21044: LD_VAR 0 8
21048: PPUSH
21049: LD_INT 0
21051: PPUSH
21052: LD_INT 5
21054: PPUSH
21055: CALL_OW 12
21059: PPUSH
21060: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21064: LD_VAR 0 8
21068: PPUSH
21069: LD_VAR 0 5
21073: PPUSH
21074: LD_VAR 0 6
21078: PPUSH
21079: LD_INT 1
21081: PPUSH
21082: CALL_OW 48
// end ;
21086: LD_VAR 0 7
21090: RET
// export hInvincible ; every 1 do
21091: GO 21093
21093: DISABLE
// hInvincible := [ ] ;
21094: LD_ADDR_EXP 76
21098: PUSH
21099: EMPTY
21100: ST_TO_ADDR
21101: END
// every 10 do var i ;
21102: GO 21104
21104: DISABLE
21105: LD_INT 0
21107: PPUSH
// begin enable ;
21108: ENABLE
// if not hInvincible then
21109: LD_EXP 76
21113: NOT
21114: IFFALSE 21118
// exit ;
21116: GO 21162
// for i in hInvincible do
21118: LD_ADDR_VAR 0 1
21122: PUSH
21123: LD_EXP 76
21127: PUSH
21128: FOR_IN
21129: IFFALSE 21160
// if GetLives ( i ) < 1000 then
21131: LD_VAR 0 1
21135: PPUSH
21136: CALL_OW 256
21140: PUSH
21141: LD_INT 1000
21143: LESS
21144: IFFALSE 21158
// SetLives ( i , 1000 ) ;
21146: LD_VAR 0 1
21150: PPUSH
21151: LD_INT 1000
21153: PPUSH
21154: CALL_OW 234
21158: GO 21128
21160: POP
21161: POP
// end ;
21162: PPOPN 1
21164: END
// export function hHackInvincible ; var i ; begin
21165: LD_INT 0
21167: PPUSH
21168: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21169: LD_ADDR_VAR 0 2
21173: PUSH
21174: LD_INT 2
21176: PUSH
21177: LD_INT 21
21179: PUSH
21180: LD_INT 1
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 21
21189: PUSH
21190: LD_INT 2
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: PPUSH
21202: CALL_OW 69
21206: PUSH
21207: FOR_IN
21208: IFFALSE 21269
// if IsSelected ( i ) then
21210: LD_VAR 0 2
21214: PPUSH
21215: CALL_OW 306
21219: IFFALSE 21267
// begin if i in hInvincible then
21221: LD_VAR 0 2
21225: PUSH
21226: LD_EXP 76
21230: IN
21231: IFFALSE 21251
// hInvincible := hInvincible diff i else
21233: LD_ADDR_EXP 76
21237: PUSH
21238: LD_EXP 76
21242: PUSH
21243: LD_VAR 0 2
21247: DIFF
21248: ST_TO_ADDR
21249: GO 21267
// hInvincible := hInvincible union i ;
21251: LD_ADDR_EXP 76
21255: PUSH
21256: LD_EXP 76
21260: PUSH
21261: LD_VAR 0 2
21265: UNION
21266: ST_TO_ADDR
// end ;
21267: GO 21207
21269: POP
21270: POP
// end ;
21271: LD_VAR 0 1
21275: RET
// export function hHackInvisible ; var i , j ; begin
21276: LD_INT 0
21278: PPUSH
21279: PPUSH
21280: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21281: LD_ADDR_VAR 0 2
21285: PUSH
21286: LD_INT 21
21288: PUSH
21289: LD_INT 1
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PPUSH
21296: CALL_OW 69
21300: PUSH
21301: FOR_IN
21302: IFFALSE 21326
// if IsSelected ( i ) then
21304: LD_VAR 0 2
21308: PPUSH
21309: CALL_OW 306
21313: IFFALSE 21324
// ComForceInvisible ( i ) ;
21315: LD_VAR 0 2
21319: PPUSH
21320: CALL_OW 496
21324: GO 21301
21326: POP
21327: POP
// end ;
21328: LD_VAR 0 1
21332: RET
// export function hHackChangeYourSide ; begin
21333: LD_INT 0
21335: PPUSH
// if your_side = 8 then
21336: LD_OWVAR 2
21340: PUSH
21341: LD_INT 8
21343: EQUAL
21344: IFFALSE 21356
// your_side := 0 else
21346: LD_ADDR_OWVAR 2
21350: PUSH
21351: LD_INT 0
21353: ST_TO_ADDR
21354: GO 21370
// your_side := your_side + 1 ;
21356: LD_ADDR_OWVAR 2
21360: PUSH
21361: LD_OWVAR 2
21365: PUSH
21366: LD_INT 1
21368: PLUS
21369: ST_TO_ADDR
// end ;
21370: LD_VAR 0 1
21374: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21375: LD_INT 0
21377: PPUSH
21378: PPUSH
21379: PPUSH
// for i in all_units do
21380: LD_ADDR_VAR 0 2
21384: PUSH
21385: LD_OWVAR 3
21389: PUSH
21390: FOR_IN
21391: IFFALSE 21469
// if IsSelected ( i ) then
21393: LD_VAR 0 2
21397: PPUSH
21398: CALL_OW 306
21402: IFFALSE 21467
// begin j := GetSide ( i ) ;
21404: LD_ADDR_VAR 0 3
21408: PUSH
21409: LD_VAR 0 2
21413: PPUSH
21414: CALL_OW 255
21418: ST_TO_ADDR
// if j = 8 then
21419: LD_VAR 0 3
21423: PUSH
21424: LD_INT 8
21426: EQUAL
21427: IFFALSE 21439
// j := 0 else
21429: LD_ADDR_VAR 0 3
21433: PUSH
21434: LD_INT 0
21436: ST_TO_ADDR
21437: GO 21453
// j := j + 1 ;
21439: LD_ADDR_VAR 0 3
21443: PUSH
21444: LD_VAR 0 3
21448: PUSH
21449: LD_INT 1
21451: PLUS
21452: ST_TO_ADDR
// SetSide ( i , j ) ;
21453: LD_VAR 0 2
21457: PPUSH
21458: LD_VAR 0 3
21462: PPUSH
21463: CALL_OW 235
// end ;
21467: GO 21390
21469: POP
21470: POP
// end ;
21471: LD_VAR 0 1
21475: RET
// export function hHackFog ; begin
21476: LD_INT 0
21478: PPUSH
// FogOff ( true ) ;
21479: LD_INT 1
21481: PPUSH
21482: CALL_OW 344
// end ;
21486: LD_VAR 0 1
21490: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21491: LD_INT 0
21493: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21494: LD_VAR 0 1
21498: PPUSH
21499: LD_VAR 0 2
21503: PPUSH
21504: LD_VAR 0 3
21508: PPUSH
21509: LD_INT 1
21511: PPUSH
21512: LD_INT 1
21514: PPUSH
21515: CALL_OW 483
// CenterOnXY ( x , y ) ;
21519: LD_VAR 0 2
21523: PPUSH
21524: LD_VAR 0 3
21528: PPUSH
21529: CALL_OW 84
// end ;
21533: LD_VAR 0 4
21537: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21538: LD_INT 0
21540: PPUSH
21541: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21542: LD_VAR 0 1
21546: NOT
21547: PUSH
21548: LD_VAR 0 2
21552: PPUSH
21553: LD_VAR 0 3
21557: PPUSH
21558: CALL_OW 488
21562: NOT
21563: OR
21564: PUSH
21565: LD_VAR 0 1
21569: PPUSH
21570: CALL_OW 266
21574: PUSH
21575: LD_INT 3
21577: NONEQUAL
21578: PUSH
21579: LD_VAR 0 1
21583: PPUSH
21584: CALL_OW 247
21588: PUSH
21589: LD_INT 1
21591: EQUAL
21592: NOT
21593: AND
21594: OR
21595: IFFALSE 21599
// exit ;
21597: GO 21748
// if GetType ( factory ) = unit_human then
21599: LD_VAR 0 1
21603: PPUSH
21604: CALL_OW 247
21608: PUSH
21609: LD_INT 1
21611: EQUAL
21612: IFFALSE 21629
// factory := IsInUnit ( factory ) ;
21614: LD_ADDR_VAR 0 1
21618: PUSH
21619: LD_VAR 0 1
21623: PPUSH
21624: CALL_OW 310
21628: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21629: LD_VAR 0 1
21633: PPUSH
21634: CALL_OW 266
21638: PUSH
21639: LD_INT 3
21641: NONEQUAL
21642: IFFALSE 21646
// exit ;
21644: GO 21748
// if HexInfo ( x , y ) = factory then
21646: LD_VAR 0 2
21650: PPUSH
21651: LD_VAR 0 3
21655: PPUSH
21656: CALL_OW 428
21660: PUSH
21661: LD_VAR 0 1
21665: EQUAL
21666: IFFALSE 21693
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21668: LD_ADDR_EXP 77
21672: PUSH
21673: LD_EXP 77
21677: PPUSH
21678: LD_VAR 0 1
21682: PPUSH
21683: LD_INT 0
21685: PPUSH
21686: CALL_OW 1
21690: ST_TO_ADDR
21691: GO 21744
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21693: LD_ADDR_EXP 77
21697: PUSH
21698: LD_EXP 77
21702: PPUSH
21703: LD_VAR 0 1
21707: PPUSH
21708: LD_VAR 0 1
21712: PPUSH
21713: CALL_OW 255
21717: PUSH
21718: LD_VAR 0 1
21722: PUSH
21723: LD_VAR 0 2
21727: PUSH
21728: LD_VAR 0 3
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: PPUSH
21739: CALL_OW 1
21743: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21744: CALL 21753 0 0
// end ;
21748: LD_VAR 0 4
21752: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21753: LD_INT 0
21755: PPUSH
21756: PPUSH
21757: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21758: LD_STRING resetFactoryWaypoint();
21760: PPUSH
21761: CALL_OW 559
// if factoryWaypoints then
21765: LD_EXP 77
21769: IFFALSE 21895
// begin list := PrepareArray ( factoryWaypoints ) ;
21771: LD_ADDR_VAR 0 3
21775: PUSH
21776: LD_EXP 77
21780: PPUSH
21781: CALL 68364 0 1
21785: ST_TO_ADDR
// for i := 1 to list do
21786: LD_ADDR_VAR 0 2
21790: PUSH
21791: DOUBLE
21792: LD_INT 1
21794: DEC
21795: ST_TO_ADDR
21796: LD_VAR 0 3
21800: PUSH
21801: FOR_TO
21802: IFFALSE 21893
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21804: LD_STRING setFactoryWaypointXY(
21806: PUSH
21807: LD_VAR 0 3
21811: PUSH
21812: LD_VAR 0 2
21816: ARRAY
21817: PUSH
21818: LD_INT 1
21820: ARRAY
21821: STR
21822: PUSH
21823: LD_STRING ,
21825: STR
21826: PUSH
21827: LD_VAR 0 3
21831: PUSH
21832: LD_VAR 0 2
21836: ARRAY
21837: PUSH
21838: LD_INT 2
21840: ARRAY
21841: STR
21842: PUSH
21843: LD_STRING ,
21845: STR
21846: PUSH
21847: LD_VAR 0 3
21851: PUSH
21852: LD_VAR 0 2
21856: ARRAY
21857: PUSH
21858: LD_INT 3
21860: ARRAY
21861: STR
21862: PUSH
21863: LD_STRING ,
21865: STR
21866: PUSH
21867: LD_VAR 0 3
21871: PUSH
21872: LD_VAR 0 2
21876: ARRAY
21877: PUSH
21878: LD_INT 4
21880: ARRAY
21881: STR
21882: PUSH
21883: LD_STRING )
21885: STR
21886: PPUSH
21887: CALL_OW 559
21891: GO 21801
21893: POP
21894: POP
// end ; end ;
21895: LD_VAR 0 1
21899: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
21900: LD_INT 0
21902: PPUSH
// if HexInfo ( x , y ) = warehouse then
21903: LD_VAR 0 2
21907: PPUSH
21908: LD_VAR 0 3
21912: PPUSH
21913: CALL_OW 428
21917: PUSH
21918: LD_VAR 0 1
21922: EQUAL
21923: IFFALSE 21950
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
21925: LD_ADDR_EXP 78
21929: PUSH
21930: LD_EXP 78
21934: PPUSH
21935: LD_VAR 0 1
21939: PPUSH
21940: LD_INT 0
21942: PPUSH
21943: CALL_OW 1
21947: ST_TO_ADDR
21948: GO 22001
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
21950: LD_ADDR_EXP 78
21954: PUSH
21955: LD_EXP 78
21959: PPUSH
21960: LD_VAR 0 1
21964: PPUSH
21965: LD_VAR 0 1
21969: PPUSH
21970: CALL_OW 255
21974: PUSH
21975: LD_VAR 0 1
21979: PUSH
21980: LD_VAR 0 2
21984: PUSH
21985: LD_VAR 0 3
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: PPUSH
21996: CALL_OW 1
22000: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22001: CALL 22010 0 0
// end ;
22005: LD_VAR 0 4
22009: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22010: LD_INT 0
22012: PPUSH
22013: PPUSH
22014: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22015: LD_STRING resetWarehouseGatheringPoints();
22017: PPUSH
22018: CALL_OW 559
// if warehouseGatheringPoints then
22022: LD_EXP 78
22026: IFFALSE 22152
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22028: LD_ADDR_VAR 0 3
22032: PUSH
22033: LD_EXP 78
22037: PPUSH
22038: CALL 68364 0 1
22042: ST_TO_ADDR
// for i := 1 to list do
22043: LD_ADDR_VAR 0 2
22047: PUSH
22048: DOUBLE
22049: LD_INT 1
22051: DEC
22052: ST_TO_ADDR
22053: LD_VAR 0 3
22057: PUSH
22058: FOR_TO
22059: IFFALSE 22150
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22061: LD_STRING setWarehouseGatheringPointXY(
22063: PUSH
22064: LD_VAR 0 3
22068: PUSH
22069: LD_VAR 0 2
22073: ARRAY
22074: PUSH
22075: LD_INT 1
22077: ARRAY
22078: STR
22079: PUSH
22080: LD_STRING ,
22082: STR
22083: PUSH
22084: LD_VAR 0 3
22088: PUSH
22089: LD_VAR 0 2
22093: ARRAY
22094: PUSH
22095: LD_INT 2
22097: ARRAY
22098: STR
22099: PUSH
22100: LD_STRING ,
22102: STR
22103: PUSH
22104: LD_VAR 0 3
22108: PUSH
22109: LD_VAR 0 2
22113: ARRAY
22114: PUSH
22115: LD_INT 3
22117: ARRAY
22118: STR
22119: PUSH
22120: LD_STRING ,
22122: STR
22123: PUSH
22124: LD_VAR 0 3
22128: PUSH
22129: LD_VAR 0 2
22133: ARRAY
22134: PUSH
22135: LD_INT 4
22137: ARRAY
22138: STR
22139: PUSH
22140: LD_STRING )
22142: STR
22143: PPUSH
22144: CALL_OW 559
22148: GO 22058
22150: POP
22151: POP
// end ; end ;
22152: LD_VAR 0 1
22156: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22157: LD_EXP 78
22161: IFFALSE 22846
22163: GO 22165
22165: DISABLE
22166: LD_INT 0
22168: PPUSH
22169: PPUSH
22170: PPUSH
22171: PPUSH
22172: PPUSH
22173: PPUSH
22174: PPUSH
22175: PPUSH
22176: PPUSH
// begin enable ;
22177: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22178: LD_ADDR_VAR 0 3
22182: PUSH
22183: LD_EXP 78
22187: PPUSH
22188: CALL 68364 0 1
22192: ST_TO_ADDR
// if not list then
22193: LD_VAR 0 3
22197: NOT
22198: IFFALSE 22202
// exit ;
22200: GO 22846
// for i := 1 to list do
22202: LD_ADDR_VAR 0 1
22206: PUSH
22207: DOUBLE
22208: LD_INT 1
22210: DEC
22211: ST_TO_ADDR
22212: LD_VAR 0 3
22216: PUSH
22217: FOR_TO
22218: IFFALSE 22844
// begin depot := list [ i ] [ 2 ] ;
22220: LD_ADDR_VAR 0 8
22224: PUSH
22225: LD_VAR 0 3
22229: PUSH
22230: LD_VAR 0 1
22234: ARRAY
22235: PUSH
22236: LD_INT 2
22238: ARRAY
22239: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22240: LD_ADDR_VAR 0 5
22244: PUSH
22245: LD_VAR 0 3
22249: PUSH
22250: LD_VAR 0 1
22254: ARRAY
22255: PUSH
22256: LD_INT 1
22258: ARRAY
22259: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22260: LD_VAR 0 8
22264: PPUSH
22265: CALL_OW 301
22269: PUSH
22270: LD_VAR 0 5
22274: PUSH
22275: LD_VAR 0 8
22279: PPUSH
22280: CALL_OW 255
22284: NONEQUAL
22285: OR
22286: IFFALSE 22315
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22288: LD_ADDR_EXP 78
22292: PUSH
22293: LD_EXP 78
22297: PPUSH
22298: LD_VAR 0 8
22302: PPUSH
22303: LD_INT 0
22305: PPUSH
22306: CALL_OW 1
22310: ST_TO_ADDR
// exit ;
22311: POP
22312: POP
22313: GO 22846
// end ; x := list [ i ] [ 3 ] ;
22315: LD_ADDR_VAR 0 6
22319: PUSH
22320: LD_VAR 0 3
22324: PUSH
22325: LD_VAR 0 1
22329: ARRAY
22330: PUSH
22331: LD_INT 3
22333: ARRAY
22334: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22335: LD_ADDR_VAR 0 7
22339: PUSH
22340: LD_VAR 0 3
22344: PUSH
22345: LD_VAR 0 1
22349: ARRAY
22350: PUSH
22351: LD_INT 4
22353: ARRAY
22354: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22355: LD_ADDR_VAR 0 9
22359: PUSH
22360: LD_VAR 0 6
22364: PPUSH
22365: LD_VAR 0 7
22369: PPUSH
22370: LD_INT 16
22372: PPUSH
22373: CALL 66952 0 3
22377: ST_TO_ADDR
// if not cratesNearbyPoint then
22378: LD_VAR 0 9
22382: NOT
22383: IFFALSE 22389
// exit ;
22385: POP
22386: POP
22387: GO 22846
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22389: LD_ADDR_VAR 0 4
22393: PUSH
22394: LD_INT 22
22396: PUSH
22397: LD_VAR 0 5
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 3
22408: PUSH
22409: LD_INT 60
22411: PUSH
22412: EMPTY
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 91
22421: PUSH
22422: LD_VAR 0 8
22426: PUSH
22427: LD_INT 6
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 2
22437: PUSH
22438: LD_INT 25
22440: PUSH
22441: LD_INT 2
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 25
22450: PUSH
22451: LD_INT 16
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: LIST
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: PPUSH
22469: CALL_OW 69
22473: PUSH
22474: LD_VAR 0 8
22478: PPUSH
22479: CALL_OW 313
22483: PPUSH
22484: LD_INT 3
22486: PUSH
22487: LD_INT 60
22489: PUSH
22490: EMPTY
22491: LIST
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 2
22499: PUSH
22500: LD_INT 25
22502: PUSH
22503: LD_INT 2
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 25
22512: PUSH
22513: LD_INT 16
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: LIST
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PPUSH
22529: CALL_OW 72
22533: UNION
22534: ST_TO_ADDR
// if tmp then
22535: LD_VAR 0 4
22539: IFFALSE 22619
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22541: LD_ADDR_VAR 0 4
22545: PUSH
22546: LD_VAR 0 4
22550: PPUSH
22551: LD_INT 3
22553: PPUSH
22554: CALL 64921 0 2
22558: ST_TO_ADDR
// for j in tmp do
22559: LD_ADDR_VAR 0 2
22563: PUSH
22564: LD_VAR 0 4
22568: PUSH
22569: FOR_IN
22570: IFFALSE 22613
// begin if IsInUnit ( j ) then
22572: LD_VAR 0 2
22576: PPUSH
22577: CALL_OW 310
22581: IFFALSE 22592
// ComExit ( j ) ;
22583: LD_VAR 0 2
22587: PPUSH
22588: CALL 65004 0 1
// AddComCollect ( j , x , y ) ;
22592: LD_VAR 0 2
22596: PPUSH
22597: LD_VAR 0 6
22601: PPUSH
22602: LD_VAR 0 7
22606: PPUSH
22607: CALL_OW 177
// end ;
22611: GO 22569
22613: POP
22614: POP
// exit ;
22615: POP
22616: POP
22617: GO 22846
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22619: LD_ADDR_VAR 0 4
22623: PUSH
22624: LD_INT 22
22626: PUSH
22627: LD_VAR 0 5
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 91
22638: PUSH
22639: LD_VAR 0 8
22643: PUSH
22644: LD_INT 8
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 2
22654: PUSH
22655: LD_INT 34
22657: PUSH
22658: LD_INT 12
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 34
22667: PUSH
22668: LD_INT 51
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 34
22677: PUSH
22678: LD_INT 32
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 34
22687: PUSH
22688: LD_INT 89
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: LIST
22706: PPUSH
22707: CALL_OW 69
22711: ST_TO_ADDR
// if tmp then
22712: LD_VAR 0 4
22716: IFFALSE 22842
// begin for j in tmp do
22718: LD_ADDR_VAR 0 2
22722: PUSH
22723: LD_VAR 0 4
22727: PUSH
22728: FOR_IN
22729: IFFALSE 22840
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22731: LD_VAR 0 2
22735: PPUSH
22736: CALL_OW 262
22740: PUSH
22741: LD_INT 3
22743: EQUAL
22744: PUSH
22745: LD_VAR 0 2
22749: PPUSH
22750: CALL_OW 261
22754: PUSH
22755: LD_INT 20
22757: GREATER
22758: OR
22759: PUSH
22760: LD_VAR 0 2
22764: PPUSH
22765: CALL_OW 314
22769: NOT
22770: AND
22771: PUSH
22772: LD_VAR 0 2
22776: PPUSH
22777: CALL_OW 263
22781: PUSH
22782: LD_INT 1
22784: NONEQUAL
22785: PUSH
22786: LD_VAR 0 2
22790: PPUSH
22791: CALL_OW 311
22795: OR
22796: AND
22797: IFFALSE 22838
// begin ComCollect ( j , x , y ) ;
22799: LD_VAR 0 2
22803: PPUSH
22804: LD_VAR 0 6
22808: PPUSH
22809: LD_VAR 0 7
22813: PPUSH
22814: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
22818: LD_VAR 0 2
22822: PPUSH
22823: LD_VAR 0 8
22827: PPUSH
22828: CALL_OW 172
// exit ;
22832: POP
22833: POP
22834: POP
22835: POP
22836: GO 22846
// end ;
22838: GO 22728
22840: POP
22841: POP
// end ; end ;
22842: GO 22217
22844: POP
22845: POP
// end ; end_of_file
22846: PPOPN 9
22848: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22849: LD_INT 0
22851: PPUSH
22852: PPUSH
22853: PPUSH
22854: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22855: LD_VAR 0 1
22859: PPUSH
22860: CALL_OW 264
22864: PUSH
22865: LD_INT 91
22867: EQUAL
22868: IFFALSE 22940
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22870: LD_INT 68
22872: PPUSH
22873: LD_VAR 0 1
22877: PPUSH
22878: CALL_OW 255
22882: PPUSH
22883: CALL_OW 321
22887: PUSH
22888: LD_INT 2
22890: EQUAL
22891: IFFALSE 22903
// eff := 70 else
22893: LD_ADDR_VAR 0 4
22897: PUSH
22898: LD_INT 70
22900: ST_TO_ADDR
22901: GO 22911
// eff := 30 ;
22903: LD_ADDR_VAR 0 4
22907: PUSH
22908: LD_INT 30
22910: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22911: LD_VAR 0 1
22915: PPUSH
22916: CALL_OW 250
22920: PPUSH
22921: LD_VAR 0 1
22925: PPUSH
22926: CALL_OW 251
22930: PPUSH
22931: LD_VAR 0 4
22935: PPUSH
22936: CALL_OW 495
// end ; end ;
22940: LD_VAR 0 2
22944: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22945: LD_INT 0
22947: PPUSH
// end ;
22948: LD_VAR 0 4
22952: RET
// export function SOS_Command ( cmd ) ; begin
22953: LD_INT 0
22955: PPUSH
// end ;
22956: LD_VAR 0 2
22960: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22961: LD_INT 0
22963: PPUSH
// end ;
22964: LD_VAR 0 6
22968: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22969: LD_INT 0
22971: PPUSH
22972: PPUSH
// if not vehicle or not factory then
22973: LD_VAR 0 1
22977: NOT
22978: PUSH
22979: LD_VAR 0 2
22983: NOT
22984: OR
22985: IFFALSE 22989
// exit ;
22987: GO 23220
// if factoryWaypoints >= factory then
22989: LD_EXP 77
22993: PUSH
22994: LD_VAR 0 2
22998: GREATEREQUAL
22999: IFFALSE 23220
// if factoryWaypoints [ factory ] then
23001: LD_EXP 77
23005: PUSH
23006: LD_VAR 0 2
23010: ARRAY
23011: IFFALSE 23220
// begin if GetControl ( vehicle ) = control_manual then
23013: LD_VAR 0 1
23017: PPUSH
23018: CALL_OW 263
23022: PUSH
23023: LD_INT 1
23025: EQUAL
23026: IFFALSE 23107
// begin driver := IsDrivenBy ( vehicle ) ;
23028: LD_ADDR_VAR 0 4
23032: PUSH
23033: LD_VAR 0 1
23037: PPUSH
23038: CALL_OW 311
23042: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23043: LD_VAR 0 4
23047: PPUSH
23048: LD_EXP 77
23052: PUSH
23053: LD_VAR 0 2
23057: ARRAY
23058: PUSH
23059: LD_INT 3
23061: ARRAY
23062: PPUSH
23063: LD_EXP 77
23067: PUSH
23068: LD_VAR 0 2
23072: ARRAY
23073: PUSH
23074: LD_INT 4
23076: ARRAY
23077: PPUSH
23078: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23082: LD_VAR 0 4
23086: PPUSH
23087: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23091: LD_VAR 0 4
23095: PPUSH
23096: LD_VAR 0 2
23100: PPUSH
23101: CALL_OW 180
// end else
23105: GO 23220
// if GetControl ( vehicle ) = control_remote then
23107: LD_VAR 0 1
23111: PPUSH
23112: CALL_OW 263
23116: PUSH
23117: LD_INT 2
23119: EQUAL
23120: IFFALSE 23181
// begin wait ( 0 0$2 ) ;
23122: LD_INT 70
23124: PPUSH
23125: CALL_OW 67
// if Connect ( vehicle ) then
23129: LD_VAR 0 1
23133: PPUSH
23134: CALL 35244 0 1
23138: IFFALSE 23179
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23140: LD_VAR 0 1
23144: PPUSH
23145: LD_EXP 77
23149: PUSH
23150: LD_VAR 0 2
23154: ARRAY
23155: PUSH
23156: LD_INT 3
23158: ARRAY
23159: PPUSH
23160: LD_EXP 77
23164: PUSH
23165: LD_VAR 0 2
23169: ARRAY
23170: PUSH
23171: LD_INT 4
23173: ARRAY
23174: PPUSH
23175: CALL_OW 171
// end else
23179: GO 23220
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23181: LD_VAR 0 1
23185: PPUSH
23186: LD_EXP 77
23190: PUSH
23191: LD_VAR 0 2
23195: ARRAY
23196: PUSH
23197: LD_INT 3
23199: ARRAY
23200: PPUSH
23201: LD_EXP 77
23205: PUSH
23206: LD_VAR 0 2
23210: ARRAY
23211: PUSH
23212: LD_INT 4
23214: ARRAY
23215: PPUSH
23216: CALL_OW 171
// end ; end ;
23220: LD_VAR 0 3
23224: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23225: LD_INT 0
23227: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23228: LD_VAR 0 1
23232: PUSH
23233: LD_INT 250
23235: EQUAL
23236: PUSH
23237: LD_VAR 0 2
23241: PPUSH
23242: CALL_OW 264
23246: PUSH
23247: LD_INT 81
23249: EQUAL
23250: AND
23251: IFFALSE 23272
// MinerPlaceMine ( unit , x , y ) ;
23253: LD_VAR 0 2
23257: PPUSH
23258: LD_VAR 0 4
23262: PPUSH
23263: LD_VAR 0 5
23267: PPUSH
23268: CALL 25657 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23272: LD_VAR 0 1
23276: PUSH
23277: LD_INT 251
23279: EQUAL
23280: PUSH
23281: LD_VAR 0 2
23285: PPUSH
23286: CALL_OW 264
23290: PUSH
23291: LD_INT 81
23293: EQUAL
23294: AND
23295: IFFALSE 23316
// MinerDetonateMine ( unit , x , y ) ;
23297: LD_VAR 0 2
23301: PPUSH
23302: LD_VAR 0 4
23306: PPUSH
23307: LD_VAR 0 5
23311: PPUSH
23312: CALL 25932 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23316: LD_VAR 0 1
23320: PUSH
23321: LD_INT 252
23323: EQUAL
23324: PUSH
23325: LD_VAR 0 2
23329: PPUSH
23330: CALL_OW 264
23334: PUSH
23335: LD_INT 81
23337: EQUAL
23338: AND
23339: IFFALSE 23360
// MinerCreateMinefield ( unit , x , y ) ;
23341: LD_VAR 0 2
23345: PPUSH
23346: LD_VAR 0 4
23350: PPUSH
23351: LD_VAR 0 5
23355: PPUSH
23356: CALL 26349 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23360: LD_VAR 0 1
23364: PUSH
23365: LD_INT 253
23367: EQUAL
23368: PUSH
23369: LD_VAR 0 2
23373: PPUSH
23374: CALL_OW 257
23378: PUSH
23379: LD_INT 5
23381: EQUAL
23382: AND
23383: IFFALSE 23404
// ComBinocular ( unit , x , y ) ;
23385: LD_VAR 0 2
23389: PPUSH
23390: LD_VAR 0 4
23394: PPUSH
23395: LD_VAR 0 5
23399: PPUSH
23400: CALL 26718 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23404: LD_VAR 0 1
23408: PUSH
23409: LD_INT 254
23411: EQUAL
23412: PUSH
23413: LD_VAR 0 2
23417: PPUSH
23418: CALL_OW 264
23422: PUSH
23423: LD_INT 99
23425: EQUAL
23426: AND
23427: PUSH
23428: LD_VAR 0 3
23432: PPUSH
23433: CALL_OW 263
23437: PUSH
23438: LD_INT 3
23440: EQUAL
23441: AND
23442: IFFALSE 23458
// HackDestroyVehicle ( unit , selectedUnit ) ;
23444: LD_VAR 0 2
23448: PPUSH
23449: LD_VAR 0 3
23453: PPUSH
23454: CALL 25021 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23458: LD_VAR 0 1
23462: PUSH
23463: LD_INT 255
23465: EQUAL
23466: PUSH
23467: LD_VAR 0 2
23471: PPUSH
23472: CALL_OW 264
23476: PUSH
23477: LD_INT 14
23479: PUSH
23480: LD_INT 53
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: IN
23487: AND
23488: PUSH
23489: LD_VAR 0 4
23493: PPUSH
23494: LD_VAR 0 5
23498: PPUSH
23499: CALL_OW 488
23503: AND
23504: IFFALSE 23528
// CutTreeXYR ( unit , x , y , 12 ) ;
23506: LD_VAR 0 2
23510: PPUSH
23511: LD_VAR 0 4
23515: PPUSH
23516: LD_VAR 0 5
23520: PPUSH
23521: LD_INT 12
23523: PPUSH
23524: CALL 23591 0 4
// if cmd = 256 then
23528: LD_VAR 0 1
23532: PUSH
23533: LD_INT 256
23535: EQUAL
23536: IFFALSE 23557
// SetFactoryWaypoint ( unit , x , y ) ;
23538: LD_VAR 0 2
23542: PPUSH
23543: LD_VAR 0 4
23547: PPUSH
23548: LD_VAR 0 5
23552: PPUSH
23553: CALL 21538 0 3
// if cmd = 257 then
23557: LD_VAR 0 1
23561: PUSH
23562: LD_INT 257
23564: EQUAL
23565: IFFALSE 23586
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23567: LD_VAR 0 2
23571: PPUSH
23572: LD_VAR 0 4
23576: PPUSH
23577: LD_VAR 0 5
23581: PPUSH
23582: CALL 21900 0 3
// end ;
23586: LD_VAR 0 6
23590: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23591: LD_INT 0
23593: PPUSH
23594: PPUSH
23595: PPUSH
23596: PPUSH
23597: PPUSH
23598: PPUSH
23599: PPUSH
23600: PPUSH
23601: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23602: LD_VAR 0 1
23606: NOT
23607: PUSH
23608: LD_VAR 0 2
23612: PPUSH
23613: LD_VAR 0 3
23617: PPUSH
23618: CALL_OW 488
23622: NOT
23623: OR
23624: PUSH
23625: LD_VAR 0 4
23629: NOT
23630: OR
23631: IFFALSE 23635
// exit ;
23633: GO 23975
// list := [ ] ;
23635: LD_ADDR_VAR 0 13
23639: PUSH
23640: EMPTY
23641: ST_TO_ADDR
// if x - r < 0 then
23642: LD_VAR 0 2
23646: PUSH
23647: LD_VAR 0 4
23651: MINUS
23652: PUSH
23653: LD_INT 0
23655: LESS
23656: IFFALSE 23668
// min_x := 0 else
23658: LD_ADDR_VAR 0 7
23662: PUSH
23663: LD_INT 0
23665: ST_TO_ADDR
23666: GO 23684
// min_x := x - r ;
23668: LD_ADDR_VAR 0 7
23672: PUSH
23673: LD_VAR 0 2
23677: PUSH
23678: LD_VAR 0 4
23682: MINUS
23683: ST_TO_ADDR
// if y - r < 0 then
23684: LD_VAR 0 3
23688: PUSH
23689: LD_VAR 0 4
23693: MINUS
23694: PUSH
23695: LD_INT 0
23697: LESS
23698: IFFALSE 23710
// min_y := 0 else
23700: LD_ADDR_VAR 0 8
23704: PUSH
23705: LD_INT 0
23707: ST_TO_ADDR
23708: GO 23726
// min_y := y - r ;
23710: LD_ADDR_VAR 0 8
23714: PUSH
23715: LD_VAR 0 3
23719: PUSH
23720: LD_VAR 0 4
23724: MINUS
23725: ST_TO_ADDR
// max_x := x + r ;
23726: LD_ADDR_VAR 0 9
23730: PUSH
23731: LD_VAR 0 2
23735: PUSH
23736: LD_VAR 0 4
23740: PLUS
23741: ST_TO_ADDR
// max_y := y + r ;
23742: LD_ADDR_VAR 0 10
23746: PUSH
23747: LD_VAR 0 3
23751: PUSH
23752: LD_VAR 0 4
23756: PLUS
23757: ST_TO_ADDR
// for _x = min_x to max_x do
23758: LD_ADDR_VAR 0 11
23762: PUSH
23763: DOUBLE
23764: LD_VAR 0 7
23768: DEC
23769: ST_TO_ADDR
23770: LD_VAR 0 9
23774: PUSH
23775: FOR_TO
23776: IFFALSE 23893
// for _y = min_y to max_y do
23778: LD_ADDR_VAR 0 12
23782: PUSH
23783: DOUBLE
23784: LD_VAR 0 8
23788: DEC
23789: ST_TO_ADDR
23790: LD_VAR 0 10
23794: PUSH
23795: FOR_TO
23796: IFFALSE 23889
// begin if not ValidHex ( _x , _y ) then
23798: LD_VAR 0 11
23802: PPUSH
23803: LD_VAR 0 12
23807: PPUSH
23808: CALL_OW 488
23812: NOT
23813: IFFALSE 23817
// continue ;
23815: GO 23795
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23817: LD_VAR 0 11
23821: PPUSH
23822: LD_VAR 0 12
23826: PPUSH
23827: CALL_OW 351
23831: PUSH
23832: LD_VAR 0 11
23836: PPUSH
23837: LD_VAR 0 12
23841: PPUSH
23842: CALL_OW 554
23846: AND
23847: IFFALSE 23887
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23849: LD_ADDR_VAR 0 13
23853: PUSH
23854: LD_VAR 0 13
23858: PPUSH
23859: LD_VAR 0 13
23863: PUSH
23864: LD_INT 1
23866: PLUS
23867: PPUSH
23868: LD_VAR 0 11
23872: PUSH
23873: LD_VAR 0 12
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PPUSH
23882: CALL_OW 2
23886: ST_TO_ADDR
// end ;
23887: GO 23795
23889: POP
23890: POP
23891: GO 23775
23893: POP
23894: POP
// if not list then
23895: LD_VAR 0 13
23899: NOT
23900: IFFALSE 23904
// exit ;
23902: GO 23975
// for i in list do
23904: LD_ADDR_VAR 0 6
23908: PUSH
23909: LD_VAR 0 13
23913: PUSH
23914: FOR_IN
23915: IFFALSE 23973
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23917: LD_VAR 0 1
23921: PPUSH
23922: LD_STRING M
23924: PUSH
23925: LD_VAR 0 6
23929: PUSH
23930: LD_INT 1
23932: ARRAY
23933: PUSH
23934: LD_VAR 0 6
23938: PUSH
23939: LD_INT 2
23941: ARRAY
23942: PUSH
23943: LD_INT 0
23945: PUSH
23946: LD_INT 0
23948: PUSH
23949: LD_INT 0
23951: PUSH
23952: LD_INT 0
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: PUSH
23964: EMPTY
23965: LIST
23966: PPUSH
23967: CALL_OW 447
23971: GO 23914
23973: POP
23974: POP
// end ;
23975: LD_VAR 0 5
23979: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23980: LD_EXP 80
23984: NOT
23985: IFFALSE 24035
23987: GO 23989
23989: DISABLE
// begin initHack := true ;
23990: LD_ADDR_EXP 80
23994: PUSH
23995: LD_INT 1
23997: ST_TO_ADDR
// hackTanks := [ ] ;
23998: LD_ADDR_EXP 81
24002: PUSH
24003: EMPTY
24004: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24005: LD_ADDR_EXP 82
24009: PUSH
24010: EMPTY
24011: ST_TO_ADDR
// hackLimit := 3 ;
24012: LD_ADDR_EXP 83
24016: PUSH
24017: LD_INT 3
24019: ST_TO_ADDR
// hackDist := 12 ;
24020: LD_ADDR_EXP 84
24024: PUSH
24025: LD_INT 12
24027: ST_TO_ADDR
// hackCounter := [ ] ;
24028: LD_ADDR_EXP 85
24032: PUSH
24033: EMPTY
24034: ST_TO_ADDR
// end ;
24035: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24036: LD_EXP 80
24040: PUSH
24041: LD_INT 34
24043: PUSH
24044: LD_INT 99
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PPUSH
24051: CALL_OW 69
24055: AND
24056: IFFALSE 24309
24058: GO 24060
24060: DISABLE
24061: LD_INT 0
24063: PPUSH
24064: PPUSH
// begin enable ;
24065: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24066: LD_ADDR_VAR 0 1
24070: PUSH
24071: LD_INT 34
24073: PUSH
24074: LD_INT 99
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PPUSH
24081: CALL_OW 69
24085: PUSH
24086: FOR_IN
24087: IFFALSE 24307
// begin if not i in hackTanks then
24089: LD_VAR 0 1
24093: PUSH
24094: LD_EXP 81
24098: IN
24099: NOT
24100: IFFALSE 24183
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24102: LD_ADDR_EXP 81
24106: PUSH
24107: LD_EXP 81
24111: PPUSH
24112: LD_EXP 81
24116: PUSH
24117: LD_INT 1
24119: PLUS
24120: PPUSH
24121: LD_VAR 0 1
24125: PPUSH
24126: CALL_OW 1
24130: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24131: LD_ADDR_EXP 82
24135: PUSH
24136: LD_EXP 82
24140: PPUSH
24141: LD_EXP 82
24145: PUSH
24146: LD_INT 1
24148: PLUS
24149: PPUSH
24150: EMPTY
24151: PPUSH
24152: CALL_OW 1
24156: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24157: LD_ADDR_EXP 85
24161: PUSH
24162: LD_EXP 85
24166: PPUSH
24167: LD_EXP 85
24171: PUSH
24172: LD_INT 1
24174: PLUS
24175: PPUSH
24176: EMPTY
24177: PPUSH
24178: CALL_OW 1
24182: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24183: LD_VAR 0 1
24187: PPUSH
24188: CALL_OW 302
24192: NOT
24193: IFFALSE 24206
// begin HackUnlinkAll ( i ) ;
24195: LD_VAR 0 1
24199: PPUSH
24200: CALL 24312 0 1
// continue ;
24204: GO 24086
// end ; HackCheckCapturedStatus ( i ) ;
24206: LD_VAR 0 1
24210: PPUSH
24211: CALL 24755 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24215: LD_ADDR_VAR 0 2
24219: PUSH
24220: LD_INT 81
24222: PUSH
24223: LD_VAR 0 1
24227: PPUSH
24228: CALL_OW 255
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 33
24239: PUSH
24240: LD_INT 3
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 91
24249: PUSH
24250: LD_VAR 0 1
24254: PUSH
24255: LD_EXP 84
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 50
24267: PUSH
24268: EMPTY
24269: LIST
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: PPUSH
24277: CALL_OW 69
24281: ST_TO_ADDR
// if not tmp then
24282: LD_VAR 0 2
24286: NOT
24287: IFFALSE 24291
// continue ;
24289: GO 24086
// HackLink ( i , tmp ) ;
24291: LD_VAR 0 1
24295: PPUSH
24296: LD_VAR 0 2
24300: PPUSH
24301: CALL 24448 0 2
// end ;
24305: GO 24086
24307: POP
24308: POP
// end ;
24309: PPOPN 2
24311: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24312: LD_INT 0
24314: PPUSH
24315: PPUSH
24316: PPUSH
// if not hack in hackTanks then
24317: LD_VAR 0 1
24321: PUSH
24322: LD_EXP 81
24326: IN
24327: NOT
24328: IFFALSE 24332
// exit ;
24330: GO 24443
// index := GetElementIndex ( hackTanks , hack ) ;
24332: LD_ADDR_VAR 0 4
24336: PUSH
24337: LD_EXP 81
24341: PPUSH
24342: LD_VAR 0 1
24346: PPUSH
24347: CALL 32060 0 2
24351: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24352: LD_EXP 82
24356: PUSH
24357: LD_VAR 0 4
24361: ARRAY
24362: IFFALSE 24443
// begin for i in hackTanksCaptured [ index ] do
24364: LD_ADDR_VAR 0 3
24368: PUSH
24369: LD_EXP 82
24373: PUSH
24374: LD_VAR 0 4
24378: ARRAY
24379: PUSH
24380: FOR_IN
24381: IFFALSE 24407
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24383: LD_VAR 0 3
24387: PUSH
24388: LD_INT 1
24390: ARRAY
24391: PPUSH
24392: LD_VAR 0 3
24396: PUSH
24397: LD_INT 2
24399: ARRAY
24400: PPUSH
24401: CALL_OW 235
24405: GO 24380
24407: POP
24408: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24409: LD_ADDR_EXP 82
24413: PUSH
24414: LD_EXP 82
24418: PPUSH
24419: LD_VAR 0 4
24423: PPUSH
24424: EMPTY
24425: PPUSH
24426: CALL_OW 1
24430: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24431: LD_VAR 0 1
24435: PPUSH
24436: LD_INT 0
24438: PPUSH
24439: CALL_OW 505
// end ; end ;
24443: LD_VAR 0 2
24447: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24448: LD_INT 0
24450: PPUSH
24451: PPUSH
24452: PPUSH
// if not hack in hackTanks or not vehicles then
24453: LD_VAR 0 1
24457: PUSH
24458: LD_EXP 81
24462: IN
24463: NOT
24464: PUSH
24465: LD_VAR 0 2
24469: NOT
24470: OR
24471: IFFALSE 24475
// exit ;
24473: GO 24750
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24475: LD_ADDR_VAR 0 2
24479: PUSH
24480: LD_VAR 0 1
24484: PPUSH
24485: LD_VAR 0 2
24489: PPUSH
24490: LD_INT 1
24492: PPUSH
24493: LD_INT 1
24495: PPUSH
24496: CALL 32710 0 4
24500: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24501: LD_ADDR_VAR 0 5
24505: PUSH
24506: LD_EXP 81
24510: PPUSH
24511: LD_VAR 0 1
24515: PPUSH
24516: CALL 32060 0 2
24520: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24521: LD_EXP 82
24525: PUSH
24526: LD_VAR 0 5
24530: ARRAY
24531: PUSH
24532: LD_EXP 83
24536: LESS
24537: IFFALSE 24726
// begin for i := 1 to vehicles do
24539: LD_ADDR_VAR 0 4
24543: PUSH
24544: DOUBLE
24545: LD_INT 1
24547: DEC
24548: ST_TO_ADDR
24549: LD_VAR 0 2
24553: PUSH
24554: FOR_TO
24555: IFFALSE 24724
// begin if hackTanksCaptured [ index ] = hackLimit then
24557: LD_EXP 82
24561: PUSH
24562: LD_VAR 0 5
24566: ARRAY
24567: PUSH
24568: LD_EXP 83
24572: EQUAL
24573: IFFALSE 24577
// break ;
24575: GO 24724
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24577: LD_ADDR_EXP 85
24581: PUSH
24582: LD_EXP 85
24586: PPUSH
24587: LD_VAR 0 5
24591: PPUSH
24592: LD_EXP 85
24596: PUSH
24597: LD_VAR 0 5
24601: ARRAY
24602: PUSH
24603: LD_INT 1
24605: PLUS
24606: PPUSH
24607: CALL_OW 1
24611: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24612: LD_ADDR_EXP 82
24616: PUSH
24617: LD_EXP 82
24621: PPUSH
24622: LD_VAR 0 5
24626: PUSH
24627: LD_EXP 82
24631: PUSH
24632: LD_VAR 0 5
24636: ARRAY
24637: PUSH
24638: LD_INT 1
24640: PLUS
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PPUSH
24646: LD_VAR 0 2
24650: PUSH
24651: LD_VAR 0 4
24655: ARRAY
24656: PUSH
24657: LD_VAR 0 2
24661: PUSH
24662: LD_VAR 0 4
24666: ARRAY
24667: PPUSH
24668: CALL_OW 255
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PPUSH
24677: CALL 32275 0 3
24681: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24682: LD_VAR 0 2
24686: PUSH
24687: LD_VAR 0 4
24691: ARRAY
24692: PPUSH
24693: LD_VAR 0 1
24697: PPUSH
24698: CALL_OW 255
24702: PPUSH
24703: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24707: LD_VAR 0 2
24711: PUSH
24712: LD_VAR 0 4
24716: ARRAY
24717: PPUSH
24718: CALL_OW 141
// end ;
24722: GO 24554
24724: POP
24725: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24726: LD_VAR 0 1
24730: PPUSH
24731: LD_EXP 82
24735: PUSH
24736: LD_VAR 0 5
24740: ARRAY
24741: PUSH
24742: LD_INT 0
24744: PLUS
24745: PPUSH
24746: CALL_OW 505
// end ;
24750: LD_VAR 0 3
24754: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24755: LD_INT 0
24757: PPUSH
24758: PPUSH
24759: PPUSH
24760: PPUSH
// if not hack in hackTanks then
24761: LD_VAR 0 1
24765: PUSH
24766: LD_EXP 81
24770: IN
24771: NOT
24772: IFFALSE 24776
// exit ;
24774: GO 25016
// index := GetElementIndex ( hackTanks , hack ) ;
24776: LD_ADDR_VAR 0 4
24780: PUSH
24781: LD_EXP 81
24785: PPUSH
24786: LD_VAR 0 1
24790: PPUSH
24791: CALL 32060 0 2
24795: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24796: LD_ADDR_VAR 0 3
24800: PUSH
24801: DOUBLE
24802: LD_EXP 82
24806: PUSH
24807: LD_VAR 0 4
24811: ARRAY
24812: INC
24813: ST_TO_ADDR
24814: LD_INT 1
24816: PUSH
24817: FOR_DOWNTO
24818: IFFALSE 24990
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24820: LD_ADDR_VAR 0 5
24824: PUSH
24825: LD_EXP 82
24829: PUSH
24830: LD_VAR 0 4
24834: ARRAY
24835: PUSH
24836: LD_VAR 0 3
24840: ARRAY
24841: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24842: LD_VAR 0 5
24846: PUSH
24847: LD_INT 1
24849: ARRAY
24850: PPUSH
24851: CALL_OW 302
24855: NOT
24856: PUSH
24857: LD_VAR 0 5
24861: PUSH
24862: LD_INT 1
24864: ARRAY
24865: PPUSH
24866: CALL_OW 255
24870: PUSH
24871: LD_VAR 0 1
24875: PPUSH
24876: CALL_OW 255
24880: NONEQUAL
24881: OR
24882: IFFALSE 24988
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24884: LD_VAR 0 5
24888: PUSH
24889: LD_INT 1
24891: ARRAY
24892: PPUSH
24893: CALL_OW 305
24897: PUSH
24898: LD_VAR 0 5
24902: PUSH
24903: LD_INT 1
24905: ARRAY
24906: PPUSH
24907: CALL_OW 255
24911: PUSH
24912: LD_VAR 0 1
24916: PPUSH
24917: CALL_OW 255
24921: EQUAL
24922: AND
24923: IFFALSE 24947
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24925: LD_VAR 0 5
24929: PUSH
24930: LD_INT 1
24932: ARRAY
24933: PPUSH
24934: LD_VAR 0 5
24938: PUSH
24939: LD_INT 2
24941: ARRAY
24942: PPUSH
24943: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24947: LD_ADDR_EXP 82
24951: PUSH
24952: LD_EXP 82
24956: PPUSH
24957: LD_VAR 0 4
24961: PPUSH
24962: LD_EXP 82
24966: PUSH
24967: LD_VAR 0 4
24971: ARRAY
24972: PPUSH
24973: LD_VAR 0 3
24977: PPUSH
24978: CALL_OW 3
24982: PPUSH
24983: CALL_OW 1
24987: ST_TO_ADDR
// end ; end ;
24988: GO 24817
24990: POP
24991: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24992: LD_VAR 0 1
24996: PPUSH
24997: LD_EXP 82
25001: PUSH
25002: LD_VAR 0 4
25006: ARRAY
25007: PUSH
25008: LD_INT 0
25010: PLUS
25011: PPUSH
25012: CALL_OW 505
// end ;
25016: LD_VAR 0 2
25020: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25021: LD_INT 0
25023: PPUSH
25024: PPUSH
25025: PPUSH
25026: PPUSH
// if not hack in hackTanks then
25027: LD_VAR 0 1
25031: PUSH
25032: LD_EXP 81
25036: IN
25037: NOT
25038: IFFALSE 25042
// exit ;
25040: GO 25127
// index := GetElementIndex ( hackTanks , hack ) ;
25042: LD_ADDR_VAR 0 5
25046: PUSH
25047: LD_EXP 81
25051: PPUSH
25052: LD_VAR 0 1
25056: PPUSH
25057: CALL 32060 0 2
25061: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25062: LD_ADDR_VAR 0 4
25066: PUSH
25067: DOUBLE
25068: LD_INT 1
25070: DEC
25071: ST_TO_ADDR
25072: LD_EXP 82
25076: PUSH
25077: LD_VAR 0 5
25081: ARRAY
25082: PUSH
25083: FOR_TO
25084: IFFALSE 25125
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25086: LD_EXP 82
25090: PUSH
25091: LD_VAR 0 5
25095: ARRAY
25096: PUSH
25097: LD_VAR 0 4
25101: ARRAY
25102: PUSH
25103: LD_INT 1
25105: ARRAY
25106: PUSH
25107: LD_VAR 0 2
25111: EQUAL
25112: IFFALSE 25123
// KillUnit ( vehicle ) ;
25114: LD_VAR 0 2
25118: PPUSH
25119: CALL_OW 66
25123: GO 25083
25125: POP
25126: POP
// end ;
25127: LD_VAR 0 3
25131: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25132: LD_EXP 86
25136: NOT
25137: IFFALSE 25172
25139: GO 25141
25141: DISABLE
// begin initMiner := true ;
25142: LD_ADDR_EXP 86
25146: PUSH
25147: LD_INT 1
25149: ST_TO_ADDR
// minersList := [ ] ;
25150: LD_ADDR_EXP 87
25154: PUSH
25155: EMPTY
25156: ST_TO_ADDR
// minerMinesList := [ ] ;
25157: LD_ADDR_EXP 88
25161: PUSH
25162: EMPTY
25163: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25164: LD_ADDR_EXP 89
25168: PUSH
25169: LD_INT 5
25171: ST_TO_ADDR
// end ;
25172: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25173: LD_EXP 86
25177: PUSH
25178: LD_INT 34
25180: PUSH
25181: LD_INT 81
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PPUSH
25188: CALL_OW 69
25192: AND
25193: IFFALSE 25654
25195: GO 25197
25197: DISABLE
25198: LD_INT 0
25200: PPUSH
25201: PPUSH
25202: PPUSH
25203: PPUSH
// begin enable ;
25204: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25205: LD_ADDR_VAR 0 1
25209: PUSH
25210: LD_INT 34
25212: PUSH
25213: LD_INT 81
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PPUSH
25220: CALL_OW 69
25224: PUSH
25225: FOR_IN
25226: IFFALSE 25298
// begin if not i in minersList then
25228: LD_VAR 0 1
25232: PUSH
25233: LD_EXP 87
25237: IN
25238: NOT
25239: IFFALSE 25296
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25241: LD_ADDR_EXP 87
25245: PUSH
25246: LD_EXP 87
25250: PPUSH
25251: LD_EXP 87
25255: PUSH
25256: LD_INT 1
25258: PLUS
25259: PPUSH
25260: LD_VAR 0 1
25264: PPUSH
25265: CALL_OW 1
25269: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25270: LD_ADDR_EXP 88
25274: PUSH
25275: LD_EXP 88
25279: PPUSH
25280: LD_EXP 88
25284: PUSH
25285: LD_INT 1
25287: PLUS
25288: PPUSH
25289: EMPTY
25290: PPUSH
25291: CALL_OW 1
25295: ST_TO_ADDR
// end end ;
25296: GO 25225
25298: POP
25299: POP
// for i := minerMinesList downto 1 do
25300: LD_ADDR_VAR 0 1
25304: PUSH
25305: DOUBLE
25306: LD_EXP 88
25310: INC
25311: ST_TO_ADDR
25312: LD_INT 1
25314: PUSH
25315: FOR_DOWNTO
25316: IFFALSE 25652
// begin if IsLive ( minersList [ i ] ) then
25318: LD_EXP 87
25322: PUSH
25323: LD_VAR 0 1
25327: ARRAY
25328: PPUSH
25329: CALL_OW 300
25333: IFFALSE 25361
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25335: LD_EXP 87
25339: PUSH
25340: LD_VAR 0 1
25344: ARRAY
25345: PPUSH
25346: LD_EXP 88
25350: PUSH
25351: LD_VAR 0 1
25355: ARRAY
25356: PPUSH
25357: CALL_OW 505
// if not minerMinesList [ i ] then
25361: LD_EXP 88
25365: PUSH
25366: LD_VAR 0 1
25370: ARRAY
25371: NOT
25372: IFFALSE 25376
// continue ;
25374: GO 25315
// for j := minerMinesList [ i ] downto 1 do
25376: LD_ADDR_VAR 0 2
25380: PUSH
25381: DOUBLE
25382: LD_EXP 88
25386: PUSH
25387: LD_VAR 0 1
25391: ARRAY
25392: INC
25393: ST_TO_ADDR
25394: LD_INT 1
25396: PUSH
25397: FOR_DOWNTO
25398: IFFALSE 25648
// begin side := GetSide ( minersList [ i ] ) ;
25400: LD_ADDR_VAR 0 3
25404: PUSH
25405: LD_EXP 87
25409: PUSH
25410: LD_VAR 0 1
25414: ARRAY
25415: PPUSH
25416: CALL_OW 255
25420: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25421: LD_ADDR_VAR 0 4
25425: PUSH
25426: LD_EXP 88
25430: PUSH
25431: LD_VAR 0 1
25435: ARRAY
25436: PUSH
25437: LD_VAR 0 2
25441: ARRAY
25442: PUSH
25443: LD_INT 1
25445: ARRAY
25446: PPUSH
25447: LD_EXP 88
25451: PUSH
25452: LD_VAR 0 1
25456: ARRAY
25457: PUSH
25458: LD_VAR 0 2
25462: ARRAY
25463: PUSH
25464: LD_INT 2
25466: ARRAY
25467: PPUSH
25468: CALL_OW 428
25472: ST_TO_ADDR
// if not tmp then
25473: LD_VAR 0 4
25477: NOT
25478: IFFALSE 25482
// continue ;
25480: GO 25397
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25482: LD_VAR 0 4
25486: PUSH
25487: LD_INT 81
25489: PUSH
25490: LD_VAR 0 3
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PPUSH
25499: CALL_OW 69
25503: IN
25504: PUSH
25505: LD_EXP 88
25509: PUSH
25510: LD_VAR 0 1
25514: ARRAY
25515: PUSH
25516: LD_VAR 0 2
25520: ARRAY
25521: PUSH
25522: LD_INT 1
25524: ARRAY
25525: PPUSH
25526: LD_EXP 88
25530: PUSH
25531: LD_VAR 0 1
25535: ARRAY
25536: PUSH
25537: LD_VAR 0 2
25541: ARRAY
25542: PUSH
25543: LD_INT 2
25545: ARRAY
25546: PPUSH
25547: CALL_OW 458
25551: AND
25552: IFFALSE 25646
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25554: LD_EXP 88
25558: PUSH
25559: LD_VAR 0 1
25563: ARRAY
25564: PUSH
25565: LD_VAR 0 2
25569: ARRAY
25570: PUSH
25571: LD_INT 1
25573: ARRAY
25574: PPUSH
25575: LD_EXP 88
25579: PUSH
25580: LD_VAR 0 1
25584: ARRAY
25585: PUSH
25586: LD_VAR 0 2
25590: ARRAY
25591: PUSH
25592: LD_INT 2
25594: ARRAY
25595: PPUSH
25596: LD_VAR 0 3
25600: PPUSH
25601: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25605: LD_ADDR_EXP 88
25609: PUSH
25610: LD_EXP 88
25614: PPUSH
25615: LD_VAR 0 1
25619: PPUSH
25620: LD_EXP 88
25624: PUSH
25625: LD_VAR 0 1
25629: ARRAY
25630: PPUSH
25631: LD_VAR 0 2
25635: PPUSH
25636: CALL_OW 3
25640: PPUSH
25641: CALL_OW 1
25645: ST_TO_ADDR
// end ; end ;
25646: GO 25397
25648: POP
25649: POP
// end ;
25650: GO 25315
25652: POP
25653: POP
// end ;
25654: PPOPN 4
25656: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25657: LD_INT 0
25659: PPUSH
25660: PPUSH
// result := false ;
25661: LD_ADDR_VAR 0 4
25665: PUSH
25666: LD_INT 0
25668: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25669: LD_VAR 0 1
25673: PPUSH
25674: CALL_OW 264
25678: PUSH
25679: LD_INT 81
25681: EQUAL
25682: NOT
25683: IFFALSE 25687
// exit ;
25685: GO 25927
// index := GetElementIndex ( minersList , unit ) ;
25687: LD_ADDR_VAR 0 5
25691: PUSH
25692: LD_EXP 87
25696: PPUSH
25697: LD_VAR 0 1
25701: PPUSH
25702: CALL 32060 0 2
25706: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25707: LD_EXP 88
25711: PUSH
25712: LD_VAR 0 5
25716: ARRAY
25717: PUSH
25718: LD_EXP 89
25722: GREATEREQUAL
25723: IFFALSE 25727
// exit ;
25725: GO 25927
// ComMoveXY ( unit , x , y ) ;
25727: LD_VAR 0 1
25731: PPUSH
25732: LD_VAR 0 2
25736: PPUSH
25737: LD_VAR 0 3
25741: PPUSH
25742: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25746: LD_INT 35
25748: PPUSH
25749: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25753: LD_VAR 0 1
25757: PPUSH
25758: LD_VAR 0 2
25762: PPUSH
25763: LD_VAR 0 3
25767: PPUSH
25768: CALL 63415 0 3
25772: NOT
25773: PUSH
25774: LD_VAR 0 1
25778: PPUSH
25779: CALL_OW 314
25783: AND
25784: IFFALSE 25788
// exit ;
25786: GO 25927
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25788: LD_VAR 0 2
25792: PPUSH
25793: LD_VAR 0 3
25797: PPUSH
25798: CALL_OW 428
25802: PUSH
25803: LD_VAR 0 1
25807: EQUAL
25808: PUSH
25809: LD_VAR 0 1
25813: PPUSH
25814: CALL_OW 314
25818: NOT
25819: AND
25820: IFFALSE 25746
// PlaySoundXY ( x , y , PlantMine ) ;
25822: LD_VAR 0 2
25826: PPUSH
25827: LD_VAR 0 3
25831: PPUSH
25832: LD_STRING PlantMine
25834: PPUSH
25835: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25839: LD_VAR 0 2
25843: PPUSH
25844: LD_VAR 0 3
25848: PPUSH
25849: LD_VAR 0 1
25853: PPUSH
25854: CALL_OW 255
25858: PPUSH
25859: LD_INT 0
25861: PPUSH
25862: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25866: LD_ADDR_EXP 88
25870: PUSH
25871: LD_EXP 88
25875: PPUSH
25876: LD_VAR 0 5
25880: PUSH
25881: LD_EXP 88
25885: PUSH
25886: LD_VAR 0 5
25890: ARRAY
25891: PUSH
25892: LD_INT 1
25894: PLUS
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PPUSH
25900: LD_VAR 0 2
25904: PUSH
25905: LD_VAR 0 3
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PPUSH
25914: CALL 32275 0 3
25918: ST_TO_ADDR
// result := true ;
25919: LD_ADDR_VAR 0 4
25923: PUSH
25924: LD_INT 1
25926: ST_TO_ADDR
// end ;
25927: LD_VAR 0 4
25931: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25932: LD_INT 0
25934: PPUSH
25935: PPUSH
25936: PPUSH
// if not unit in minersList then
25937: LD_VAR 0 1
25941: PUSH
25942: LD_EXP 87
25946: IN
25947: NOT
25948: IFFALSE 25952
// exit ;
25950: GO 26344
// index := GetElementIndex ( minersList , unit ) ;
25952: LD_ADDR_VAR 0 6
25956: PUSH
25957: LD_EXP 87
25961: PPUSH
25962: LD_VAR 0 1
25966: PPUSH
25967: CALL 32060 0 2
25971: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25972: LD_ADDR_VAR 0 5
25976: PUSH
25977: DOUBLE
25978: LD_EXP 88
25982: PUSH
25983: LD_VAR 0 6
25987: ARRAY
25988: INC
25989: ST_TO_ADDR
25990: LD_INT 1
25992: PUSH
25993: FOR_DOWNTO
25994: IFFALSE 26155
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25996: LD_EXP 88
26000: PUSH
26001: LD_VAR 0 6
26005: ARRAY
26006: PUSH
26007: LD_VAR 0 5
26011: ARRAY
26012: PUSH
26013: LD_INT 1
26015: ARRAY
26016: PUSH
26017: LD_VAR 0 2
26021: EQUAL
26022: PUSH
26023: LD_EXP 88
26027: PUSH
26028: LD_VAR 0 6
26032: ARRAY
26033: PUSH
26034: LD_VAR 0 5
26038: ARRAY
26039: PUSH
26040: LD_INT 2
26042: ARRAY
26043: PUSH
26044: LD_VAR 0 3
26048: EQUAL
26049: AND
26050: IFFALSE 26153
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26052: LD_EXP 88
26056: PUSH
26057: LD_VAR 0 6
26061: ARRAY
26062: PUSH
26063: LD_VAR 0 5
26067: ARRAY
26068: PUSH
26069: LD_INT 1
26071: ARRAY
26072: PPUSH
26073: LD_EXP 88
26077: PUSH
26078: LD_VAR 0 6
26082: ARRAY
26083: PUSH
26084: LD_VAR 0 5
26088: ARRAY
26089: PUSH
26090: LD_INT 2
26092: ARRAY
26093: PPUSH
26094: LD_VAR 0 1
26098: PPUSH
26099: CALL_OW 255
26103: PPUSH
26104: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26108: LD_ADDR_EXP 88
26112: PUSH
26113: LD_EXP 88
26117: PPUSH
26118: LD_VAR 0 6
26122: PPUSH
26123: LD_EXP 88
26127: PUSH
26128: LD_VAR 0 6
26132: ARRAY
26133: PPUSH
26134: LD_VAR 0 5
26138: PPUSH
26139: CALL_OW 3
26143: PPUSH
26144: CALL_OW 1
26148: ST_TO_ADDR
// exit ;
26149: POP
26150: POP
26151: GO 26344
// end ; end ;
26153: GO 25993
26155: POP
26156: POP
// for i := minerMinesList [ index ] downto 1 do
26157: LD_ADDR_VAR 0 5
26161: PUSH
26162: DOUBLE
26163: LD_EXP 88
26167: PUSH
26168: LD_VAR 0 6
26172: ARRAY
26173: INC
26174: ST_TO_ADDR
26175: LD_INT 1
26177: PUSH
26178: FOR_DOWNTO
26179: IFFALSE 26342
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26181: LD_EXP 88
26185: PUSH
26186: LD_VAR 0 6
26190: ARRAY
26191: PUSH
26192: LD_VAR 0 5
26196: ARRAY
26197: PUSH
26198: LD_INT 1
26200: ARRAY
26201: PPUSH
26202: LD_EXP 88
26206: PUSH
26207: LD_VAR 0 6
26211: ARRAY
26212: PUSH
26213: LD_VAR 0 5
26217: ARRAY
26218: PUSH
26219: LD_INT 2
26221: ARRAY
26222: PPUSH
26223: LD_VAR 0 2
26227: PPUSH
26228: LD_VAR 0 3
26232: PPUSH
26233: CALL_OW 298
26237: PUSH
26238: LD_INT 6
26240: LESS
26241: IFFALSE 26340
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26243: LD_EXP 88
26247: PUSH
26248: LD_VAR 0 6
26252: ARRAY
26253: PUSH
26254: LD_VAR 0 5
26258: ARRAY
26259: PUSH
26260: LD_INT 1
26262: ARRAY
26263: PPUSH
26264: LD_EXP 88
26268: PUSH
26269: LD_VAR 0 6
26273: ARRAY
26274: PUSH
26275: LD_VAR 0 5
26279: ARRAY
26280: PUSH
26281: LD_INT 2
26283: ARRAY
26284: PPUSH
26285: LD_VAR 0 1
26289: PPUSH
26290: CALL_OW 255
26294: PPUSH
26295: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26299: LD_ADDR_EXP 88
26303: PUSH
26304: LD_EXP 88
26308: PPUSH
26309: LD_VAR 0 6
26313: PPUSH
26314: LD_EXP 88
26318: PUSH
26319: LD_VAR 0 6
26323: ARRAY
26324: PPUSH
26325: LD_VAR 0 5
26329: PPUSH
26330: CALL_OW 3
26334: PPUSH
26335: CALL_OW 1
26339: ST_TO_ADDR
// end ; end ;
26340: GO 26178
26342: POP
26343: POP
// end ;
26344: LD_VAR 0 4
26348: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26349: LD_INT 0
26351: PPUSH
26352: PPUSH
26353: PPUSH
26354: PPUSH
26355: PPUSH
26356: PPUSH
26357: PPUSH
26358: PPUSH
26359: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26360: LD_VAR 0 1
26364: PPUSH
26365: CALL_OW 264
26369: PUSH
26370: LD_INT 81
26372: EQUAL
26373: NOT
26374: PUSH
26375: LD_VAR 0 1
26379: PUSH
26380: LD_EXP 87
26384: IN
26385: NOT
26386: OR
26387: IFFALSE 26391
// exit ;
26389: GO 26713
// index := GetElementIndex ( minersList , unit ) ;
26391: LD_ADDR_VAR 0 6
26395: PUSH
26396: LD_EXP 87
26400: PPUSH
26401: LD_VAR 0 1
26405: PPUSH
26406: CALL 32060 0 2
26410: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26411: LD_ADDR_VAR 0 8
26415: PUSH
26416: LD_EXP 89
26420: PUSH
26421: LD_EXP 88
26425: PUSH
26426: LD_VAR 0 6
26430: ARRAY
26431: MINUS
26432: ST_TO_ADDR
// if not minesFreeAmount then
26433: LD_VAR 0 8
26437: NOT
26438: IFFALSE 26442
// exit ;
26440: GO 26713
// tmp := [ ] ;
26442: LD_ADDR_VAR 0 7
26446: PUSH
26447: EMPTY
26448: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26449: LD_ADDR_VAR 0 5
26453: PUSH
26454: DOUBLE
26455: LD_INT 1
26457: DEC
26458: ST_TO_ADDR
26459: LD_VAR 0 8
26463: PUSH
26464: FOR_TO
26465: IFFALSE 26660
// begin _d := rand ( 0 , 5 ) ;
26467: LD_ADDR_VAR 0 11
26471: PUSH
26472: LD_INT 0
26474: PPUSH
26475: LD_INT 5
26477: PPUSH
26478: CALL_OW 12
26482: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26483: LD_ADDR_VAR 0 12
26487: PUSH
26488: LD_INT 2
26490: PPUSH
26491: LD_INT 6
26493: PPUSH
26494: CALL_OW 12
26498: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26499: LD_ADDR_VAR 0 9
26503: PUSH
26504: LD_VAR 0 2
26508: PPUSH
26509: LD_VAR 0 11
26513: PPUSH
26514: LD_VAR 0 12
26518: PPUSH
26519: CALL_OW 272
26523: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26524: LD_ADDR_VAR 0 10
26528: PUSH
26529: LD_VAR 0 3
26533: PPUSH
26534: LD_VAR 0 11
26538: PPUSH
26539: LD_VAR 0 12
26543: PPUSH
26544: CALL_OW 273
26548: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26549: LD_VAR 0 9
26553: PPUSH
26554: LD_VAR 0 10
26558: PPUSH
26559: CALL_OW 488
26563: PUSH
26564: LD_VAR 0 9
26568: PUSH
26569: LD_VAR 0 10
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_VAR 0 7
26582: IN
26583: NOT
26584: AND
26585: PUSH
26586: LD_VAR 0 9
26590: PPUSH
26591: LD_VAR 0 10
26595: PPUSH
26596: CALL_OW 458
26600: NOT
26601: AND
26602: IFFALSE 26644
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26604: LD_ADDR_VAR 0 7
26608: PUSH
26609: LD_VAR 0 7
26613: PPUSH
26614: LD_VAR 0 7
26618: PUSH
26619: LD_INT 1
26621: PLUS
26622: PPUSH
26623: LD_VAR 0 9
26627: PUSH
26628: LD_VAR 0 10
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PPUSH
26637: CALL_OW 1
26641: ST_TO_ADDR
26642: GO 26658
// i := i - 1 ;
26644: LD_ADDR_VAR 0 5
26648: PUSH
26649: LD_VAR 0 5
26653: PUSH
26654: LD_INT 1
26656: MINUS
26657: ST_TO_ADDR
// end ;
26658: GO 26464
26660: POP
26661: POP
// for i in tmp do
26662: LD_ADDR_VAR 0 5
26666: PUSH
26667: LD_VAR 0 7
26671: PUSH
26672: FOR_IN
26673: IFFALSE 26711
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26675: LD_VAR 0 1
26679: PPUSH
26680: LD_VAR 0 5
26684: PUSH
26685: LD_INT 1
26687: ARRAY
26688: PPUSH
26689: LD_VAR 0 5
26693: PUSH
26694: LD_INT 2
26696: ARRAY
26697: PPUSH
26698: CALL 25657 0 3
26702: NOT
26703: IFFALSE 26709
// exit ;
26705: POP
26706: POP
26707: GO 26713
26709: GO 26672
26711: POP
26712: POP
// end ;
26713: LD_VAR 0 4
26717: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26718: LD_INT 0
26720: PPUSH
26721: PPUSH
26722: PPUSH
26723: PPUSH
26724: PPUSH
26725: PPUSH
26726: PPUSH
// if not GetClass ( unit ) = class_sniper then
26727: LD_VAR 0 1
26731: PPUSH
26732: CALL_OW 257
26736: PUSH
26737: LD_INT 5
26739: EQUAL
26740: NOT
26741: IFFALSE 26745
// exit ;
26743: GO 27133
// dist := 8 ;
26745: LD_ADDR_VAR 0 5
26749: PUSH
26750: LD_INT 8
26752: ST_TO_ADDR
// viewRange := 12 ;
26753: LD_ADDR_VAR 0 7
26757: PUSH
26758: LD_INT 12
26760: ST_TO_ADDR
// side := GetSide ( unit ) ;
26761: LD_ADDR_VAR 0 6
26765: PUSH
26766: LD_VAR 0 1
26770: PPUSH
26771: CALL_OW 255
26775: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26776: LD_INT 61
26778: PPUSH
26779: LD_VAR 0 6
26783: PPUSH
26784: CALL_OW 321
26788: PUSH
26789: LD_INT 2
26791: EQUAL
26792: IFFALSE 26802
// viewRange := 16 ;
26794: LD_ADDR_VAR 0 7
26798: PUSH
26799: LD_INT 16
26801: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26802: LD_VAR 0 1
26806: PPUSH
26807: LD_VAR 0 2
26811: PPUSH
26812: LD_VAR 0 3
26816: PPUSH
26817: CALL_OW 297
26821: PUSH
26822: LD_VAR 0 5
26826: GREATER
26827: IFFALSE 26906
// begin ComMoveXY ( unit , x , y ) ;
26829: LD_VAR 0 1
26833: PPUSH
26834: LD_VAR 0 2
26838: PPUSH
26839: LD_VAR 0 3
26843: PPUSH
26844: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26848: LD_INT 35
26850: PPUSH
26851: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26855: LD_VAR 0 1
26859: PPUSH
26860: LD_VAR 0 2
26864: PPUSH
26865: LD_VAR 0 3
26869: PPUSH
26870: CALL 63415 0 3
26874: NOT
26875: IFFALSE 26879
// exit ;
26877: GO 27133
// until GetDistUnitXY ( unit , x , y ) < dist ;
26879: LD_VAR 0 1
26883: PPUSH
26884: LD_VAR 0 2
26888: PPUSH
26889: LD_VAR 0 3
26893: PPUSH
26894: CALL_OW 297
26898: PUSH
26899: LD_VAR 0 5
26903: LESS
26904: IFFALSE 26848
// end ; ComTurnXY ( unit , x , y ) ;
26906: LD_VAR 0 1
26910: PPUSH
26911: LD_VAR 0 2
26915: PPUSH
26916: LD_VAR 0 3
26920: PPUSH
26921: CALL_OW 118
// wait ( 5 ) ;
26925: LD_INT 5
26927: PPUSH
26928: CALL_OW 67
// _d := GetDir ( unit ) ;
26932: LD_ADDR_VAR 0 10
26936: PUSH
26937: LD_VAR 0 1
26941: PPUSH
26942: CALL_OW 254
26946: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26947: LD_ADDR_VAR 0 8
26951: PUSH
26952: LD_VAR 0 1
26956: PPUSH
26957: CALL_OW 250
26961: PPUSH
26962: LD_VAR 0 10
26966: PPUSH
26967: LD_VAR 0 5
26971: PPUSH
26972: CALL_OW 272
26976: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26977: LD_ADDR_VAR 0 9
26981: PUSH
26982: LD_VAR 0 1
26986: PPUSH
26987: CALL_OW 251
26991: PPUSH
26992: LD_VAR 0 10
26996: PPUSH
26997: LD_VAR 0 5
27001: PPUSH
27002: CALL_OW 273
27006: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27007: LD_VAR 0 8
27011: PPUSH
27012: LD_VAR 0 9
27016: PPUSH
27017: CALL_OW 488
27021: NOT
27022: IFFALSE 27026
// exit ;
27024: GO 27133
// ComAnimCustom ( unit , 1 ) ;
27026: LD_VAR 0 1
27030: PPUSH
27031: LD_INT 1
27033: PPUSH
27034: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27038: LD_VAR 0 8
27042: PPUSH
27043: LD_VAR 0 9
27047: PPUSH
27048: LD_VAR 0 6
27052: PPUSH
27053: LD_VAR 0 7
27057: PPUSH
27058: CALL_OW 330
// repeat wait ( 1 ) ;
27062: LD_INT 1
27064: PPUSH
27065: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27069: LD_VAR 0 1
27073: PPUSH
27074: CALL_OW 316
27078: PUSH
27079: LD_VAR 0 1
27083: PPUSH
27084: CALL_OW 314
27088: OR
27089: PUSH
27090: LD_VAR 0 1
27094: PPUSH
27095: CALL_OW 302
27099: NOT
27100: OR
27101: PUSH
27102: LD_VAR 0 1
27106: PPUSH
27107: CALL_OW 301
27111: OR
27112: IFFALSE 27062
// RemoveSeeing ( _x , _y , side ) ;
27114: LD_VAR 0 8
27118: PPUSH
27119: LD_VAR 0 9
27123: PPUSH
27124: LD_VAR 0 6
27128: PPUSH
27129: CALL_OW 331
// end ; end_of_file
27133: LD_VAR 0 4
27137: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27138: LD_INT 0
27140: PPUSH
27141: PPUSH
// if exist_mode then
27142: LD_VAR 0 2
27146: IFFALSE 27171
// unit := CreateCharacter ( prefix & ident ) else
27148: LD_ADDR_VAR 0 5
27152: PUSH
27153: LD_VAR 0 3
27157: PUSH
27158: LD_VAR 0 1
27162: STR
27163: PPUSH
27164: CALL_OW 34
27168: ST_TO_ADDR
27169: GO 27186
// unit := NewCharacter ( ident ) ;
27171: LD_ADDR_VAR 0 5
27175: PUSH
27176: LD_VAR 0 1
27180: PPUSH
27181: CALL_OW 25
27185: ST_TO_ADDR
// result := unit ;
27186: LD_ADDR_VAR 0 4
27190: PUSH
27191: LD_VAR 0 5
27195: ST_TO_ADDR
// end ;
27196: LD_VAR 0 4
27200: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27201: LD_INT 0
27203: PPUSH
27204: PPUSH
// if not side or not nation then
27205: LD_VAR 0 1
27209: NOT
27210: PUSH
27211: LD_VAR 0 2
27215: NOT
27216: OR
27217: IFFALSE 27221
// exit ;
27219: GO 27989
// case nation of nation_american :
27221: LD_VAR 0 2
27225: PUSH
27226: LD_INT 1
27228: DOUBLE
27229: EQUAL
27230: IFTRUE 27234
27232: GO 27448
27234: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27235: LD_ADDR_VAR 0 4
27239: PUSH
27240: LD_INT 35
27242: PUSH
27243: LD_INT 45
27245: PUSH
27246: LD_INT 46
27248: PUSH
27249: LD_INT 47
27251: PUSH
27252: LD_INT 82
27254: PUSH
27255: LD_INT 83
27257: PUSH
27258: LD_INT 84
27260: PUSH
27261: LD_INT 85
27263: PUSH
27264: LD_INT 86
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: LD_INT 2
27272: PUSH
27273: LD_INT 6
27275: PUSH
27276: LD_INT 15
27278: PUSH
27279: LD_INT 16
27281: PUSH
27282: LD_INT 7
27284: PUSH
27285: LD_INT 12
27287: PUSH
27288: LD_INT 13
27290: PUSH
27291: LD_INT 10
27293: PUSH
27294: LD_INT 14
27296: PUSH
27297: LD_INT 20
27299: PUSH
27300: LD_INT 21
27302: PUSH
27303: LD_INT 22
27305: PUSH
27306: LD_INT 25
27308: PUSH
27309: LD_INT 32
27311: PUSH
27312: LD_INT 27
27314: PUSH
27315: LD_INT 36
27317: PUSH
27318: LD_INT 69
27320: PUSH
27321: LD_INT 39
27323: PUSH
27324: LD_INT 34
27326: PUSH
27327: LD_INT 40
27329: PUSH
27330: LD_INT 48
27332: PUSH
27333: LD_INT 49
27335: PUSH
27336: LD_INT 50
27338: PUSH
27339: LD_INT 51
27341: PUSH
27342: LD_INT 52
27344: PUSH
27345: LD_INT 53
27347: PUSH
27348: LD_INT 54
27350: PUSH
27351: LD_INT 55
27353: PUSH
27354: LD_INT 56
27356: PUSH
27357: LD_INT 57
27359: PUSH
27360: LD_INT 58
27362: PUSH
27363: LD_INT 59
27365: PUSH
27366: LD_INT 60
27368: PUSH
27369: LD_INT 61
27371: PUSH
27372: LD_INT 62
27374: PUSH
27375: LD_INT 80
27377: PUSH
27378: LD_INT 82
27380: PUSH
27381: LD_INT 83
27383: PUSH
27384: LD_INT 84
27386: PUSH
27387: LD_INT 85
27389: PUSH
27390: LD_INT 86
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: ST_TO_ADDR
27446: GO 27913
27448: LD_INT 2
27450: DOUBLE
27451: EQUAL
27452: IFTRUE 27456
27454: GO 27682
27456: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27457: LD_ADDR_VAR 0 4
27461: PUSH
27462: LD_INT 35
27464: PUSH
27465: LD_INT 45
27467: PUSH
27468: LD_INT 46
27470: PUSH
27471: LD_INT 47
27473: PUSH
27474: LD_INT 82
27476: PUSH
27477: LD_INT 83
27479: PUSH
27480: LD_INT 84
27482: PUSH
27483: LD_INT 85
27485: PUSH
27486: LD_INT 87
27488: PUSH
27489: LD_INT 70
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: LD_INT 11
27497: PUSH
27498: LD_INT 3
27500: PUSH
27501: LD_INT 4
27503: PUSH
27504: LD_INT 5
27506: PUSH
27507: LD_INT 6
27509: PUSH
27510: LD_INT 15
27512: PUSH
27513: LD_INT 18
27515: PUSH
27516: LD_INT 7
27518: PUSH
27519: LD_INT 17
27521: PUSH
27522: LD_INT 8
27524: PUSH
27525: LD_INT 20
27527: PUSH
27528: LD_INT 21
27530: PUSH
27531: LD_INT 22
27533: PUSH
27534: LD_INT 72
27536: PUSH
27537: LD_INT 26
27539: PUSH
27540: LD_INT 69
27542: PUSH
27543: LD_INT 39
27545: PUSH
27546: LD_INT 40
27548: PUSH
27549: LD_INT 41
27551: PUSH
27552: LD_INT 42
27554: PUSH
27555: LD_INT 43
27557: PUSH
27558: LD_INT 48
27560: PUSH
27561: LD_INT 49
27563: PUSH
27564: LD_INT 50
27566: PUSH
27567: LD_INT 51
27569: PUSH
27570: LD_INT 52
27572: PUSH
27573: LD_INT 53
27575: PUSH
27576: LD_INT 54
27578: PUSH
27579: LD_INT 55
27581: PUSH
27582: LD_INT 56
27584: PUSH
27585: LD_INT 60
27587: PUSH
27588: LD_INT 61
27590: PUSH
27591: LD_INT 62
27593: PUSH
27594: LD_INT 66
27596: PUSH
27597: LD_INT 67
27599: PUSH
27600: LD_INT 68
27602: PUSH
27603: LD_INT 81
27605: PUSH
27606: LD_INT 82
27608: PUSH
27609: LD_INT 83
27611: PUSH
27612: LD_INT 84
27614: PUSH
27615: LD_INT 85
27617: PUSH
27618: LD_INT 87
27620: PUSH
27621: LD_INT 88
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: ST_TO_ADDR
27680: GO 27913
27682: LD_INT 3
27684: DOUBLE
27685: EQUAL
27686: IFTRUE 27690
27688: GO 27912
27690: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27691: LD_ADDR_VAR 0 4
27695: PUSH
27696: LD_INT 46
27698: PUSH
27699: LD_INT 47
27701: PUSH
27702: LD_INT 1
27704: PUSH
27705: LD_INT 2
27707: PUSH
27708: LD_INT 82
27710: PUSH
27711: LD_INT 83
27713: PUSH
27714: LD_INT 84
27716: PUSH
27717: LD_INT 85
27719: PUSH
27720: LD_INT 86
27722: PUSH
27723: LD_INT 11
27725: PUSH
27726: LD_INT 9
27728: PUSH
27729: LD_INT 20
27731: PUSH
27732: LD_INT 19
27734: PUSH
27735: LD_INT 21
27737: PUSH
27738: LD_INT 24
27740: PUSH
27741: LD_INT 22
27743: PUSH
27744: LD_INT 25
27746: PUSH
27747: LD_INT 28
27749: PUSH
27750: LD_INT 29
27752: PUSH
27753: LD_INT 30
27755: PUSH
27756: LD_INT 31
27758: PUSH
27759: LD_INT 37
27761: PUSH
27762: LD_INT 38
27764: PUSH
27765: LD_INT 32
27767: PUSH
27768: LD_INT 27
27770: PUSH
27771: LD_INT 33
27773: PUSH
27774: LD_INT 69
27776: PUSH
27777: LD_INT 39
27779: PUSH
27780: LD_INT 34
27782: PUSH
27783: LD_INT 40
27785: PUSH
27786: LD_INT 71
27788: PUSH
27789: LD_INT 23
27791: PUSH
27792: LD_INT 44
27794: PUSH
27795: LD_INT 48
27797: PUSH
27798: LD_INT 49
27800: PUSH
27801: LD_INT 50
27803: PUSH
27804: LD_INT 51
27806: PUSH
27807: LD_INT 52
27809: PUSH
27810: LD_INT 53
27812: PUSH
27813: LD_INT 54
27815: PUSH
27816: LD_INT 55
27818: PUSH
27819: LD_INT 56
27821: PUSH
27822: LD_INT 57
27824: PUSH
27825: LD_INT 58
27827: PUSH
27828: LD_INT 59
27830: PUSH
27831: LD_INT 63
27833: PUSH
27834: LD_INT 64
27836: PUSH
27837: LD_INT 65
27839: PUSH
27840: LD_INT 82
27842: PUSH
27843: LD_INT 83
27845: PUSH
27846: LD_INT 84
27848: PUSH
27849: LD_INT 85
27851: PUSH
27852: LD_INT 86
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: ST_TO_ADDR
27910: GO 27913
27912: POP
// if state > - 1 and state < 3 then
27913: LD_VAR 0 3
27917: PUSH
27918: LD_INT 1
27920: NEG
27921: GREATER
27922: PUSH
27923: LD_VAR 0 3
27927: PUSH
27928: LD_INT 3
27930: LESS
27931: AND
27932: IFFALSE 27989
// for i in result do
27934: LD_ADDR_VAR 0 5
27938: PUSH
27939: LD_VAR 0 4
27943: PUSH
27944: FOR_IN
27945: IFFALSE 27987
// if GetTech ( i , side ) <> state then
27947: LD_VAR 0 5
27951: PPUSH
27952: LD_VAR 0 1
27956: PPUSH
27957: CALL_OW 321
27961: PUSH
27962: LD_VAR 0 3
27966: NONEQUAL
27967: IFFALSE 27985
// result := result diff i ;
27969: LD_ADDR_VAR 0 4
27973: PUSH
27974: LD_VAR 0 4
27978: PUSH
27979: LD_VAR 0 5
27983: DIFF
27984: ST_TO_ADDR
27985: GO 27944
27987: POP
27988: POP
// end ;
27989: LD_VAR 0 4
27993: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27994: LD_INT 0
27996: PPUSH
27997: PPUSH
27998: PPUSH
// result := true ;
27999: LD_ADDR_VAR 0 3
28003: PUSH
28004: LD_INT 1
28006: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28007: LD_ADDR_VAR 0 5
28011: PUSH
28012: LD_VAR 0 2
28016: PPUSH
28017: CALL_OW 480
28021: ST_TO_ADDR
// if not tmp then
28022: LD_VAR 0 5
28026: NOT
28027: IFFALSE 28031
// exit ;
28029: GO 28080
// for i in tmp do
28031: LD_ADDR_VAR 0 4
28035: PUSH
28036: LD_VAR 0 5
28040: PUSH
28041: FOR_IN
28042: IFFALSE 28078
// if GetTech ( i , side ) <> state_researched then
28044: LD_VAR 0 4
28048: PPUSH
28049: LD_VAR 0 1
28053: PPUSH
28054: CALL_OW 321
28058: PUSH
28059: LD_INT 2
28061: NONEQUAL
28062: IFFALSE 28076
// begin result := false ;
28064: LD_ADDR_VAR 0 3
28068: PUSH
28069: LD_INT 0
28071: ST_TO_ADDR
// exit ;
28072: POP
28073: POP
28074: GO 28080
// end ;
28076: GO 28041
28078: POP
28079: POP
// end ;
28080: LD_VAR 0 3
28084: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28085: LD_INT 0
28087: PPUSH
28088: PPUSH
28089: PPUSH
28090: PPUSH
28091: PPUSH
28092: PPUSH
28093: PPUSH
28094: PPUSH
28095: PPUSH
28096: PPUSH
28097: PPUSH
28098: PPUSH
28099: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28100: LD_VAR 0 1
28104: NOT
28105: PUSH
28106: LD_VAR 0 1
28110: PPUSH
28111: CALL_OW 257
28115: PUSH
28116: LD_INT 9
28118: NONEQUAL
28119: OR
28120: IFFALSE 28124
// exit ;
28122: GO 28697
// side := GetSide ( unit ) ;
28124: LD_ADDR_VAR 0 9
28128: PUSH
28129: LD_VAR 0 1
28133: PPUSH
28134: CALL_OW 255
28138: ST_TO_ADDR
// tech_space := tech_spacanom ;
28139: LD_ADDR_VAR 0 12
28143: PUSH
28144: LD_INT 29
28146: ST_TO_ADDR
// tech_time := tech_taurad ;
28147: LD_ADDR_VAR 0 13
28151: PUSH
28152: LD_INT 28
28154: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28155: LD_ADDR_VAR 0 11
28159: PUSH
28160: LD_VAR 0 1
28164: PPUSH
28165: CALL_OW 310
28169: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28170: LD_VAR 0 11
28174: PPUSH
28175: CALL_OW 247
28179: PUSH
28180: LD_INT 2
28182: EQUAL
28183: IFFALSE 28187
// exit ;
28185: GO 28697
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28187: LD_ADDR_VAR 0 8
28191: PUSH
28192: LD_INT 81
28194: PUSH
28195: LD_VAR 0 9
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 3
28206: PUSH
28207: LD_INT 21
28209: PUSH
28210: LD_INT 3
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PPUSH
28225: CALL_OW 69
28229: ST_TO_ADDR
// if not tmp then
28230: LD_VAR 0 8
28234: NOT
28235: IFFALSE 28239
// exit ;
28237: GO 28697
// if in_unit then
28239: LD_VAR 0 11
28243: IFFALSE 28267
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28245: LD_ADDR_VAR 0 10
28249: PUSH
28250: LD_VAR 0 8
28254: PPUSH
28255: LD_VAR 0 11
28259: PPUSH
28260: CALL_OW 74
28264: ST_TO_ADDR
28265: GO 28287
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28267: LD_ADDR_VAR 0 10
28271: PUSH
28272: LD_VAR 0 8
28276: PPUSH
28277: LD_VAR 0 1
28281: PPUSH
28282: CALL_OW 74
28286: ST_TO_ADDR
// if not enemy then
28287: LD_VAR 0 10
28291: NOT
28292: IFFALSE 28296
// exit ;
28294: GO 28697
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28296: LD_VAR 0 11
28300: PUSH
28301: LD_VAR 0 11
28305: PPUSH
28306: LD_VAR 0 10
28310: PPUSH
28311: CALL_OW 296
28315: PUSH
28316: LD_INT 13
28318: GREATER
28319: AND
28320: PUSH
28321: LD_VAR 0 1
28325: PPUSH
28326: LD_VAR 0 10
28330: PPUSH
28331: CALL_OW 296
28335: PUSH
28336: LD_INT 12
28338: GREATER
28339: OR
28340: IFFALSE 28344
// exit ;
28342: GO 28697
// missile := [ 1 ] ;
28344: LD_ADDR_VAR 0 14
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: EMPTY
28353: LIST
28354: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28355: LD_VAR 0 9
28359: PPUSH
28360: LD_VAR 0 12
28364: PPUSH
28365: CALL_OW 325
28369: IFFALSE 28398
// missile := Replace ( missile , missile + 1 , 2 ) ;
28371: LD_ADDR_VAR 0 14
28375: PUSH
28376: LD_VAR 0 14
28380: PPUSH
28381: LD_VAR 0 14
28385: PUSH
28386: LD_INT 1
28388: PLUS
28389: PPUSH
28390: LD_INT 2
28392: PPUSH
28393: CALL_OW 1
28397: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28398: LD_VAR 0 9
28402: PPUSH
28403: LD_VAR 0 13
28407: PPUSH
28408: CALL_OW 325
28412: PUSH
28413: LD_VAR 0 10
28417: PPUSH
28418: CALL_OW 255
28422: PPUSH
28423: LD_VAR 0 13
28427: PPUSH
28428: CALL_OW 325
28432: NOT
28433: AND
28434: IFFALSE 28463
// missile := Replace ( missile , missile + 1 , 3 ) ;
28436: LD_ADDR_VAR 0 14
28440: PUSH
28441: LD_VAR 0 14
28445: PPUSH
28446: LD_VAR 0 14
28450: PUSH
28451: LD_INT 1
28453: PLUS
28454: PPUSH
28455: LD_INT 3
28457: PPUSH
28458: CALL_OW 1
28462: ST_TO_ADDR
// if missile < 2 then
28463: LD_VAR 0 14
28467: PUSH
28468: LD_INT 2
28470: LESS
28471: IFFALSE 28475
// exit ;
28473: GO 28697
// x := GetX ( enemy ) ;
28475: LD_ADDR_VAR 0 4
28479: PUSH
28480: LD_VAR 0 10
28484: PPUSH
28485: CALL_OW 250
28489: ST_TO_ADDR
// y := GetY ( enemy ) ;
28490: LD_ADDR_VAR 0 5
28494: PUSH
28495: LD_VAR 0 10
28499: PPUSH
28500: CALL_OW 251
28504: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28505: LD_ADDR_VAR 0 6
28509: PUSH
28510: LD_VAR 0 4
28514: PUSH
28515: LD_INT 1
28517: NEG
28518: PPUSH
28519: LD_INT 1
28521: PPUSH
28522: CALL_OW 12
28526: PLUS
28527: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28528: LD_ADDR_VAR 0 7
28532: PUSH
28533: LD_VAR 0 5
28537: PUSH
28538: LD_INT 1
28540: NEG
28541: PPUSH
28542: LD_INT 1
28544: PPUSH
28545: CALL_OW 12
28549: PLUS
28550: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28551: LD_VAR 0 6
28555: PPUSH
28556: LD_VAR 0 7
28560: PPUSH
28561: CALL_OW 488
28565: NOT
28566: IFFALSE 28588
// begin _x := x ;
28568: LD_ADDR_VAR 0 6
28572: PUSH
28573: LD_VAR 0 4
28577: ST_TO_ADDR
// _y := y ;
28578: LD_ADDR_VAR 0 7
28582: PUSH
28583: LD_VAR 0 5
28587: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28588: LD_ADDR_VAR 0 3
28592: PUSH
28593: LD_INT 1
28595: PPUSH
28596: LD_VAR 0 14
28600: PPUSH
28601: CALL_OW 12
28605: ST_TO_ADDR
// case i of 1 :
28606: LD_VAR 0 3
28610: PUSH
28611: LD_INT 1
28613: DOUBLE
28614: EQUAL
28615: IFTRUE 28619
28617: GO 28636
28619: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28620: LD_VAR 0 1
28624: PPUSH
28625: LD_VAR 0 10
28629: PPUSH
28630: CALL_OW 115
28634: GO 28697
28636: LD_INT 2
28638: DOUBLE
28639: EQUAL
28640: IFTRUE 28644
28642: GO 28666
28644: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28645: LD_VAR 0 1
28649: PPUSH
28650: LD_VAR 0 6
28654: PPUSH
28655: LD_VAR 0 7
28659: PPUSH
28660: CALL_OW 153
28664: GO 28697
28666: LD_INT 3
28668: DOUBLE
28669: EQUAL
28670: IFTRUE 28674
28672: GO 28696
28674: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28675: LD_VAR 0 1
28679: PPUSH
28680: LD_VAR 0 6
28684: PPUSH
28685: LD_VAR 0 7
28689: PPUSH
28690: CALL_OW 154
28694: GO 28697
28696: POP
// end ;
28697: LD_VAR 0 2
28701: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28702: LD_INT 0
28704: PPUSH
28705: PPUSH
28706: PPUSH
28707: PPUSH
28708: PPUSH
28709: PPUSH
// if not unit or not building then
28710: LD_VAR 0 1
28714: NOT
28715: PUSH
28716: LD_VAR 0 2
28720: NOT
28721: OR
28722: IFFALSE 28726
// exit ;
28724: GO 28884
// x := GetX ( building ) ;
28726: LD_ADDR_VAR 0 5
28730: PUSH
28731: LD_VAR 0 2
28735: PPUSH
28736: CALL_OW 250
28740: ST_TO_ADDR
// y := GetY ( building ) ;
28741: LD_ADDR_VAR 0 6
28745: PUSH
28746: LD_VAR 0 2
28750: PPUSH
28751: CALL_OW 251
28755: ST_TO_ADDR
// for i = 0 to 5 do
28756: LD_ADDR_VAR 0 4
28760: PUSH
28761: DOUBLE
28762: LD_INT 0
28764: DEC
28765: ST_TO_ADDR
28766: LD_INT 5
28768: PUSH
28769: FOR_TO
28770: IFFALSE 28882
// begin _x := ShiftX ( x , i , 3 ) ;
28772: LD_ADDR_VAR 0 7
28776: PUSH
28777: LD_VAR 0 5
28781: PPUSH
28782: LD_VAR 0 4
28786: PPUSH
28787: LD_INT 3
28789: PPUSH
28790: CALL_OW 272
28794: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28795: LD_ADDR_VAR 0 8
28799: PUSH
28800: LD_VAR 0 6
28804: PPUSH
28805: LD_VAR 0 4
28809: PPUSH
28810: LD_INT 3
28812: PPUSH
28813: CALL_OW 273
28817: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28818: LD_VAR 0 7
28822: PPUSH
28823: LD_VAR 0 8
28827: PPUSH
28828: CALL_OW 488
28832: NOT
28833: IFFALSE 28837
// continue ;
28835: GO 28769
// if HexInfo ( _x , _y ) = 0 then
28837: LD_VAR 0 7
28841: PPUSH
28842: LD_VAR 0 8
28846: PPUSH
28847: CALL_OW 428
28851: PUSH
28852: LD_INT 0
28854: EQUAL
28855: IFFALSE 28880
// begin ComMoveXY ( unit , _x , _y ) ;
28857: LD_VAR 0 1
28861: PPUSH
28862: LD_VAR 0 7
28866: PPUSH
28867: LD_VAR 0 8
28871: PPUSH
28872: CALL_OW 111
// exit ;
28876: POP
28877: POP
28878: GO 28884
// end ; end ;
28880: GO 28769
28882: POP
28883: POP
// end ;
28884: LD_VAR 0 3
28888: RET
// export function ScanBase ( side , base_area ) ; begin
28889: LD_INT 0
28891: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28892: LD_ADDR_VAR 0 3
28896: PUSH
28897: LD_VAR 0 2
28901: PPUSH
28902: LD_INT 81
28904: PUSH
28905: LD_VAR 0 1
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PPUSH
28914: CALL_OW 70
28918: ST_TO_ADDR
// end ;
28919: LD_VAR 0 3
28923: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28924: LD_INT 0
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
// result := false ;
28930: LD_ADDR_VAR 0 2
28934: PUSH
28935: LD_INT 0
28937: ST_TO_ADDR
// side := GetSide ( unit ) ;
28938: LD_ADDR_VAR 0 3
28942: PUSH
28943: LD_VAR 0 1
28947: PPUSH
28948: CALL_OW 255
28952: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28953: LD_ADDR_VAR 0 4
28957: PUSH
28958: LD_VAR 0 1
28962: PPUSH
28963: CALL_OW 248
28967: ST_TO_ADDR
// case nat of 1 :
28968: LD_VAR 0 4
28972: PUSH
28973: LD_INT 1
28975: DOUBLE
28976: EQUAL
28977: IFTRUE 28981
28979: GO 28992
28981: POP
// tech := tech_lassight ; 2 :
28982: LD_ADDR_VAR 0 5
28986: PUSH
28987: LD_INT 12
28989: ST_TO_ADDR
28990: GO 29031
28992: LD_INT 2
28994: DOUBLE
28995: EQUAL
28996: IFTRUE 29000
28998: GO 29011
29000: POP
// tech := tech_mortar ; 3 :
29001: LD_ADDR_VAR 0 5
29005: PUSH
29006: LD_INT 41
29008: ST_TO_ADDR
29009: GO 29031
29011: LD_INT 3
29013: DOUBLE
29014: EQUAL
29015: IFTRUE 29019
29017: GO 29030
29019: POP
// tech := tech_bazooka ; end ;
29020: LD_ADDR_VAR 0 5
29024: PUSH
29025: LD_INT 44
29027: ST_TO_ADDR
29028: GO 29031
29030: POP
// if Researched ( side , tech ) then
29031: LD_VAR 0 3
29035: PPUSH
29036: LD_VAR 0 5
29040: PPUSH
29041: CALL_OW 325
29045: IFFALSE 29072
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29047: LD_ADDR_VAR 0 2
29051: PUSH
29052: LD_INT 5
29054: PUSH
29055: LD_INT 8
29057: PUSH
29058: LD_INT 9
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: LIST
29065: PUSH
29066: LD_VAR 0 4
29070: ARRAY
29071: ST_TO_ADDR
// end ;
29072: LD_VAR 0 2
29076: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29077: LD_INT 0
29079: PPUSH
29080: PPUSH
29081: PPUSH
// if not mines then
29082: LD_VAR 0 2
29086: NOT
29087: IFFALSE 29091
// exit ;
29089: GO 29235
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29091: LD_ADDR_VAR 0 5
29095: PUSH
29096: LD_INT 81
29098: PUSH
29099: LD_VAR 0 1
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 3
29110: PUSH
29111: LD_INT 21
29113: PUSH
29114: LD_INT 3
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PPUSH
29129: CALL_OW 69
29133: ST_TO_ADDR
// for i in mines do
29134: LD_ADDR_VAR 0 4
29138: PUSH
29139: LD_VAR 0 2
29143: PUSH
29144: FOR_IN
29145: IFFALSE 29233
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29147: LD_VAR 0 4
29151: PUSH
29152: LD_INT 1
29154: ARRAY
29155: PPUSH
29156: LD_VAR 0 4
29160: PUSH
29161: LD_INT 2
29163: ARRAY
29164: PPUSH
29165: CALL_OW 458
29169: NOT
29170: IFFALSE 29174
// continue ;
29172: GO 29144
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29174: LD_VAR 0 4
29178: PUSH
29179: LD_INT 1
29181: ARRAY
29182: PPUSH
29183: LD_VAR 0 4
29187: PUSH
29188: LD_INT 2
29190: ARRAY
29191: PPUSH
29192: CALL_OW 428
29196: PUSH
29197: LD_VAR 0 5
29201: IN
29202: IFFALSE 29231
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29204: LD_VAR 0 4
29208: PUSH
29209: LD_INT 1
29211: ARRAY
29212: PPUSH
29213: LD_VAR 0 4
29217: PUSH
29218: LD_INT 2
29220: ARRAY
29221: PPUSH
29222: LD_VAR 0 1
29226: PPUSH
29227: CALL_OW 456
// end ;
29231: GO 29144
29233: POP
29234: POP
// end ;
29235: LD_VAR 0 3
29239: RET
// export function Count ( array ) ; var i ; begin
29240: LD_INT 0
29242: PPUSH
29243: PPUSH
// result := 0 ;
29244: LD_ADDR_VAR 0 2
29248: PUSH
29249: LD_INT 0
29251: ST_TO_ADDR
// for i in array do
29252: LD_ADDR_VAR 0 3
29256: PUSH
29257: LD_VAR 0 1
29261: PUSH
29262: FOR_IN
29263: IFFALSE 29287
// if i then
29265: LD_VAR 0 3
29269: IFFALSE 29285
// result := result + 1 ;
29271: LD_ADDR_VAR 0 2
29275: PUSH
29276: LD_VAR 0 2
29280: PUSH
29281: LD_INT 1
29283: PLUS
29284: ST_TO_ADDR
29285: GO 29262
29287: POP
29288: POP
// end ;
29289: LD_VAR 0 2
29293: RET
// export function IsEmpty ( building ) ; begin
29294: LD_INT 0
29296: PPUSH
// if not building then
29297: LD_VAR 0 1
29301: NOT
29302: IFFALSE 29306
// exit ;
29304: GO 29349
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29306: LD_ADDR_VAR 0 2
29310: PUSH
29311: LD_VAR 0 1
29315: PUSH
29316: LD_INT 22
29318: PUSH
29319: LD_VAR 0 1
29323: PPUSH
29324: CALL_OW 255
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 58
29335: PUSH
29336: EMPTY
29337: LIST
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PPUSH
29343: CALL_OW 69
29347: IN
29348: ST_TO_ADDR
// end ;
29349: LD_VAR 0 2
29353: RET
// export function IsNotFull ( building ) ; var places ; begin
29354: LD_INT 0
29356: PPUSH
29357: PPUSH
// if not building then
29358: LD_VAR 0 1
29362: NOT
29363: IFFALSE 29367
// exit ;
29365: GO 29538
// result := false ;
29367: LD_ADDR_VAR 0 2
29371: PUSH
29372: LD_INT 0
29374: ST_TO_ADDR
// places := 0 ;
29375: LD_ADDR_VAR 0 3
29379: PUSH
29380: LD_INT 0
29382: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
29383: LD_VAR 0 1
29387: PPUSH
29388: CALL_OW 266
29392: PUSH
29393: LD_INT 0
29395: DOUBLE
29396: EQUAL
29397: IFTRUE 29455
29399: LD_INT 1
29401: DOUBLE
29402: EQUAL
29403: IFTRUE 29455
29405: LD_INT 6
29407: DOUBLE
29408: EQUAL
29409: IFTRUE 29455
29411: LD_INT 7
29413: DOUBLE
29414: EQUAL
29415: IFTRUE 29455
29417: LD_INT 8
29419: DOUBLE
29420: EQUAL
29421: IFTRUE 29455
29423: LD_INT 4
29425: DOUBLE
29426: EQUAL
29427: IFTRUE 29455
29429: LD_INT 5
29431: DOUBLE
29432: EQUAL
29433: IFTRUE 29455
29435: LD_INT 2
29437: DOUBLE
29438: EQUAL
29439: IFTRUE 29455
29441: LD_INT 3
29443: DOUBLE
29444: EQUAL
29445: IFTRUE 29455
29447: LD_INT 35
29449: DOUBLE
29450: EQUAL
29451: IFTRUE 29455
29453: GO 29466
29455: POP
// places := 6 ; b_bunker , b_breastwork :
29456: LD_ADDR_VAR 0 3
29460: PUSH
29461: LD_INT 6
29463: ST_TO_ADDR
29464: GO 29511
29466: LD_INT 32
29468: DOUBLE
29469: EQUAL
29470: IFTRUE 29480
29472: LD_INT 31
29474: DOUBLE
29475: EQUAL
29476: IFTRUE 29480
29478: GO 29491
29480: POP
// places := 1 ; b_control_tower :
29481: LD_ADDR_VAR 0 3
29485: PUSH
29486: LD_INT 1
29488: ST_TO_ADDR
29489: GO 29511
29491: LD_INT 36
29493: DOUBLE
29494: EQUAL
29495: IFTRUE 29499
29497: GO 29510
29499: POP
// places := 3 ; end ;
29500: LD_ADDR_VAR 0 3
29504: PUSH
29505: LD_INT 3
29507: ST_TO_ADDR
29508: GO 29511
29510: POP
// if places then
29511: LD_VAR 0 3
29515: IFFALSE 29538
// result := UnitsInside ( building ) < places ;
29517: LD_ADDR_VAR 0 2
29521: PUSH
29522: LD_VAR 0 1
29526: PPUSH
29527: CALL_OW 313
29531: PUSH
29532: LD_VAR 0 3
29536: LESS
29537: ST_TO_ADDR
// end ;
29538: LD_VAR 0 2
29542: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29543: LD_INT 0
29545: PPUSH
29546: PPUSH
29547: PPUSH
29548: PPUSH
// tmp := [ ] ;
29549: LD_ADDR_VAR 0 3
29553: PUSH
29554: EMPTY
29555: ST_TO_ADDR
// list := [ ] ;
29556: LD_ADDR_VAR 0 5
29560: PUSH
29561: EMPTY
29562: ST_TO_ADDR
// for i = 16 to 25 do
29563: LD_ADDR_VAR 0 4
29567: PUSH
29568: DOUBLE
29569: LD_INT 16
29571: DEC
29572: ST_TO_ADDR
29573: LD_INT 25
29575: PUSH
29576: FOR_TO
29577: IFFALSE 29650
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29579: LD_ADDR_VAR 0 3
29583: PUSH
29584: LD_VAR 0 3
29588: PUSH
29589: LD_INT 22
29591: PUSH
29592: LD_VAR 0 1
29596: PPUSH
29597: CALL_OW 255
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 91
29608: PUSH
29609: LD_VAR 0 1
29613: PUSH
29614: LD_INT 6
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 30
29624: PUSH
29625: LD_VAR 0 4
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: LIST
29638: PUSH
29639: EMPTY
29640: LIST
29641: PPUSH
29642: CALL_OW 69
29646: ADD
29647: ST_TO_ADDR
29648: GO 29576
29650: POP
29651: POP
// for i = 1 to tmp do
29652: LD_ADDR_VAR 0 4
29656: PUSH
29657: DOUBLE
29658: LD_INT 1
29660: DEC
29661: ST_TO_ADDR
29662: LD_VAR 0 3
29666: PUSH
29667: FOR_TO
29668: IFFALSE 29756
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29670: LD_ADDR_VAR 0 5
29674: PUSH
29675: LD_VAR 0 5
29679: PUSH
29680: LD_VAR 0 3
29684: PUSH
29685: LD_VAR 0 4
29689: ARRAY
29690: PPUSH
29691: CALL_OW 266
29695: PUSH
29696: LD_VAR 0 3
29700: PUSH
29701: LD_VAR 0 4
29705: ARRAY
29706: PPUSH
29707: CALL_OW 250
29711: PUSH
29712: LD_VAR 0 3
29716: PUSH
29717: LD_VAR 0 4
29721: ARRAY
29722: PPUSH
29723: CALL_OW 251
29727: PUSH
29728: LD_VAR 0 3
29732: PUSH
29733: LD_VAR 0 4
29737: ARRAY
29738: PPUSH
29739: CALL_OW 254
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: PUSH
29750: EMPTY
29751: LIST
29752: ADD
29753: ST_TO_ADDR
29754: GO 29667
29756: POP
29757: POP
// result := list ;
29758: LD_ADDR_VAR 0 2
29762: PUSH
29763: LD_VAR 0 5
29767: ST_TO_ADDR
// end ;
29768: LD_VAR 0 2
29772: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29773: LD_INT 0
29775: PPUSH
29776: PPUSH
29777: PPUSH
29778: PPUSH
29779: PPUSH
29780: PPUSH
29781: PPUSH
// if not factory then
29782: LD_VAR 0 1
29786: NOT
29787: IFFALSE 29791
// exit ;
29789: GO 30384
// if control = control_apeman then
29791: LD_VAR 0 4
29795: PUSH
29796: LD_INT 5
29798: EQUAL
29799: IFFALSE 29908
// begin tmp := UnitsInside ( factory ) ;
29801: LD_ADDR_VAR 0 8
29805: PUSH
29806: LD_VAR 0 1
29810: PPUSH
29811: CALL_OW 313
29815: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29816: LD_VAR 0 8
29820: PPUSH
29821: LD_INT 25
29823: PUSH
29824: LD_INT 12
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PPUSH
29831: CALL_OW 72
29835: NOT
29836: IFFALSE 29846
// control := control_manual ;
29838: LD_ADDR_VAR 0 4
29842: PUSH
29843: LD_INT 1
29845: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29846: LD_ADDR_VAR 0 8
29850: PUSH
29851: LD_VAR 0 1
29855: PPUSH
29856: CALL 29543 0 1
29860: ST_TO_ADDR
// if tmp then
29861: LD_VAR 0 8
29865: IFFALSE 29908
// begin for i in tmp do
29867: LD_ADDR_VAR 0 7
29871: PUSH
29872: LD_VAR 0 8
29876: PUSH
29877: FOR_IN
29878: IFFALSE 29906
// if i [ 1 ] = b_ext_radio then
29880: LD_VAR 0 7
29884: PUSH
29885: LD_INT 1
29887: ARRAY
29888: PUSH
29889: LD_INT 22
29891: EQUAL
29892: IFFALSE 29904
// begin control := control_remote ;
29894: LD_ADDR_VAR 0 4
29898: PUSH
29899: LD_INT 2
29901: ST_TO_ADDR
// break ;
29902: GO 29906
// end ;
29904: GO 29877
29906: POP
29907: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29908: LD_VAR 0 1
29912: PPUSH
29913: LD_VAR 0 2
29917: PPUSH
29918: LD_VAR 0 3
29922: PPUSH
29923: LD_VAR 0 4
29927: PPUSH
29928: LD_VAR 0 5
29932: PPUSH
29933: CALL_OW 448
29937: IFFALSE 29972
// begin result := [ chassis , engine , control , weapon ] ;
29939: LD_ADDR_VAR 0 6
29943: PUSH
29944: LD_VAR 0 2
29948: PUSH
29949: LD_VAR 0 3
29953: PUSH
29954: LD_VAR 0 4
29958: PUSH
29959: LD_VAR 0 5
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: ST_TO_ADDR
// exit ;
29970: GO 30384
// end ; _chassis := AvailableChassisList ( factory ) ;
29972: LD_ADDR_VAR 0 9
29976: PUSH
29977: LD_VAR 0 1
29981: PPUSH
29982: CALL_OW 475
29986: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29987: LD_ADDR_VAR 0 11
29991: PUSH
29992: LD_VAR 0 1
29996: PPUSH
29997: CALL_OW 476
30001: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30002: LD_ADDR_VAR 0 12
30006: PUSH
30007: LD_VAR 0 1
30011: PPUSH
30012: CALL_OW 477
30016: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30017: LD_ADDR_VAR 0 10
30021: PUSH
30022: LD_VAR 0 1
30026: PPUSH
30027: CALL_OW 478
30031: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30032: LD_VAR 0 9
30036: NOT
30037: PUSH
30038: LD_VAR 0 11
30042: NOT
30043: OR
30044: PUSH
30045: LD_VAR 0 12
30049: NOT
30050: OR
30051: PUSH
30052: LD_VAR 0 10
30056: NOT
30057: OR
30058: IFFALSE 30093
// begin result := [ chassis , engine , control , weapon ] ;
30060: LD_ADDR_VAR 0 6
30064: PUSH
30065: LD_VAR 0 2
30069: PUSH
30070: LD_VAR 0 3
30074: PUSH
30075: LD_VAR 0 4
30079: PUSH
30080: LD_VAR 0 5
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: ST_TO_ADDR
// exit ;
30091: GO 30384
// end ; if not chassis in _chassis then
30093: LD_VAR 0 2
30097: PUSH
30098: LD_VAR 0 9
30102: IN
30103: NOT
30104: IFFALSE 30130
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30106: LD_ADDR_VAR 0 2
30110: PUSH
30111: LD_VAR 0 9
30115: PUSH
30116: LD_INT 1
30118: PPUSH
30119: LD_VAR 0 9
30123: PPUSH
30124: CALL_OW 12
30128: ARRAY
30129: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30130: LD_VAR 0 2
30134: PPUSH
30135: LD_VAR 0 3
30139: PPUSH
30140: CALL 30389 0 2
30144: NOT
30145: IFFALSE 30204
// repeat engine := _engine [ 1 ] ;
30147: LD_ADDR_VAR 0 3
30151: PUSH
30152: LD_VAR 0 11
30156: PUSH
30157: LD_INT 1
30159: ARRAY
30160: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30161: LD_ADDR_VAR 0 11
30165: PUSH
30166: LD_VAR 0 11
30170: PPUSH
30171: LD_INT 1
30173: PPUSH
30174: CALL_OW 3
30178: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30179: LD_VAR 0 2
30183: PPUSH
30184: LD_VAR 0 3
30188: PPUSH
30189: CALL 30389 0 2
30193: PUSH
30194: LD_VAR 0 11
30198: PUSH
30199: EMPTY
30200: EQUAL
30201: OR
30202: IFFALSE 30147
// if not control in _control then
30204: LD_VAR 0 4
30208: PUSH
30209: LD_VAR 0 12
30213: IN
30214: NOT
30215: IFFALSE 30241
// control := _control [ rand ( 1 , _control ) ] ;
30217: LD_ADDR_VAR 0 4
30221: PUSH
30222: LD_VAR 0 12
30226: PUSH
30227: LD_INT 1
30229: PPUSH
30230: LD_VAR 0 12
30234: PPUSH
30235: CALL_OW 12
30239: ARRAY
30240: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30241: LD_VAR 0 2
30245: PPUSH
30246: LD_VAR 0 5
30250: PPUSH
30251: CALL 30609 0 2
30255: NOT
30256: IFFALSE 30315
// repeat weapon := _weapon [ 1 ] ;
30258: LD_ADDR_VAR 0 5
30262: PUSH
30263: LD_VAR 0 10
30267: PUSH
30268: LD_INT 1
30270: ARRAY
30271: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30272: LD_ADDR_VAR 0 10
30276: PUSH
30277: LD_VAR 0 10
30281: PPUSH
30282: LD_INT 1
30284: PPUSH
30285: CALL_OW 3
30289: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30290: LD_VAR 0 2
30294: PPUSH
30295: LD_VAR 0 5
30299: PPUSH
30300: CALL 30609 0 2
30304: PUSH
30305: LD_VAR 0 10
30309: PUSH
30310: EMPTY
30311: EQUAL
30312: OR
30313: IFFALSE 30258
// result := [ ] ;
30315: LD_ADDR_VAR 0 6
30319: PUSH
30320: EMPTY
30321: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30322: LD_VAR 0 1
30326: PPUSH
30327: LD_VAR 0 2
30331: PPUSH
30332: LD_VAR 0 3
30336: PPUSH
30337: LD_VAR 0 4
30341: PPUSH
30342: LD_VAR 0 5
30346: PPUSH
30347: CALL_OW 448
30351: IFFALSE 30384
// result := [ chassis , engine , control , weapon ] ;
30353: LD_ADDR_VAR 0 6
30357: PUSH
30358: LD_VAR 0 2
30362: PUSH
30363: LD_VAR 0 3
30367: PUSH
30368: LD_VAR 0 4
30372: PUSH
30373: LD_VAR 0 5
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: ST_TO_ADDR
// end ;
30384: LD_VAR 0 6
30388: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30389: LD_INT 0
30391: PPUSH
// if not chassis or not engine then
30392: LD_VAR 0 1
30396: NOT
30397: PUSH
30398: LD_VAR 0 2
30402: NOT
30403: OR
30404: IFFALSE 30408
// exit ;
30406: GO 30604
// case engine of engine_solar :
30408: LD_VAR 0 2
30412: PUSH
30413: LD_INT 2
30415: DOUBLE
30416: EQUAL
30417: IFTRUE 30421
30419: GO 30459
30421: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30422: LD_ADDR_VAR 0 3
30426: PUSH
30427: LD_INT 11
30429: PUSH
30430: LD_INT 12
30432: PUSH
30433: LD_INT 13
30435: PUSH
30436: LD_INT 14
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: LD_INT 2
30444: PUSH
30445: LD_INT 3
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: ST_TO_ADDR
30457: GO 30588
30459: LD_INT 1
30461: DOUBLE
30462: EQUAL
30463: IFTRUE 30467
30465: GO 30529
30467: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30468: LD_ADDR_VAR 0 3
30472: PUSH
30473: LD_INT 11
30475: PUSH
30476: LD_INT 12
30478: PUSH
30479: LD_INT 13
30481: PUSH
30482: LD_INT 14
30484: PUSH
30485: LD_INT 1
30487: PUSH
30488: LD_INT 2
30490: PUSH
30491: LD_INT 3
30493: PUSH
30494: LD_INT 4
30496: PUSH
30497: LD_INT 5
30499: PUSH
30500: LD_INT 21
30502: PUSH
30503: LD_INT 23
30505: PUSH
30506: LD_INT 22
30508: PUSH
30509: LD_INT 24
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: ST_TO_ADDR
30527: GO 30588
30529: LD_INT 3
30531: DOUBLE
30532: EQUAL
30533: IFTRUE 30537
30535: GO 30587
30537: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30538: LD_ADDR_VAR 0 3
30542: PUSH
30543: LD_INT 13
30545: PUSH
30546: LD_INT 14
30548: PUSH
30549: LD_INT 2
30551: PUSH
30552: LD_INT 3
30554: PUSH
30555: LD_INT 4
30557: PUSH
30558: LD_INT 5
30560: PUSH
30561: LD_INT 21
30563: PUSH
30564: LD_INT 22
30566: PUSH
30567: LD_INT 23
30569: PUSH
30570: LD_INT 24
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: ST_TO_ADDR
30585: GO 30588
30587: POP
// result := ( chassis in result ) ;
30588: LD_ADDR_VAR 0 3
30592: PUSH
30593: LD_VAR 0 1
30597: PUSH
30598: LD_VAR 0 3
30602: IN
30603: ST_TO_ADDR
// end ;
30604: LD_VAR 0 3
30608: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30609: LD_INT 0
30611: PPUSH
// if not chassis or not weapon then
30612: LD_VAR 0 1
30616: NOT
30617: PUSH
30618: LD_VAR 0 2
30622: NOT
30623: OR
30624: IFFALSE 30628
// exit ;
30626: GO 31688
// case weapon of us_machine_gun :
30628: LD_VAR 0 2
30632: PUSH
30633: LD_INT 2
30635: DOUBLE
30636: EQUAL
30637: IFTRUE 30641
30639: GO 30671
30641: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30642: LD_ADDR_VAR 0 3
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: LD_INT 2
30652: PUSH
30653: LD_INT 3
30655: PUSH
30656: LD_INT 4
30658: PUSH
30659: LD_INT 5
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: ST_TO_ADDR
30669: GO 31672
30671: LD_INT 3
30673: DOUBLE
30674: EQUAL
30675: IFTRUE 30679
30677: GO 30709
30679: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30680: LD_ADDR_VAR 0 3
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: LD_INT 3
30693: PUSH
30694: LD_INT 4
30696: PUSH
30697: LD_INT 5
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: ST_TO_ADDR
30707: GO 31672
30709: LD_INT 11
30711: DOUBLE
30712: EQUAL
30713: IFTRUE 30717
30715: GO 30747
30717: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30718: LD_ADDR_VAR 0 3
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: LD_INT 3
30731: PUSH
30732: LD_INT 4
30734: PUSH
30735: LD_INT 5
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: ST_TO_ADDR
30745: GO 31672
30747: LD_INT 4
30749: DOUBLE
30750: EQUAL
30751: IFTRUE 30755
30753: GO 30781
30755: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30756: LD_ADDR_VAR 0 3
30760: PUSH
30761: LD_INT 2
30763: PUSH
30764: LD_INT 3
30766: PUSH
30767: LD_INT 4
30769: PUSH
30770: LD_INT 5
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: ST_TO_ADDR
30779: GO 31672
30781: LD_INT 5
30783: DOUBLE
30784: EQUAL
30785: IFTRUE 30789
30787: GO 30815
30789: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30790: LD_ADDR_VAR 0 3
30794: PUSH
30795: LD_INT 2
30797: PUSH
30798: LD_INT 3
30800: PUSH
30801: LD_INT 4
30803: PUSH
30804: LD_INT 5
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: ST_TO_ADDR
30813: GO 31672
30815: LD_INT 9
30817: DOUBLE
30818: EQUAL
30819: IFTRUE 30823
30821: GO 30849
30823: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30824: LD_ADDR_VAR 0 3
30828: PUSH
30829: LD_INT 2
30831: PUSH
30832: LD_INT 3
30834: PUSH
30835: LD_INT 4
30837: PUSH
30838: LD_INT 5
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: ST_TO_ADDR
30847: GO 31672
30849: LD_INT 7
30851: DOUBLE
30852: EQUAL
30853: IFTRUE 30857
30855: GO 30883
30857: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30858: LD_ADDR_VAR 0 3
30862: PUSH
30863: LD_INT 2
30865: PUSH
30866: LD_INT 3
30868: PUSH
30869: LD_INT 4
30871: PUSH
30872: LD_INT 5
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: ST_TO_ADDR
30881: GO 31672
30883: LD_INT 12
30885: DOUBLE
30886: EQUAL
30887: IFTRUE 30891
30889: GO 30917
30891: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30892: LD_ADDR_VAR 0 3
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: LD_INT 3
30902: PUSH
30903: LD_INT 4
30905: PUSH
30906: LD_INT 5
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: ST_TO_ADDR
30915: GO 31672
30917: LD_INT 13
30919: DOUBLE
30920: EQUAL
30921: IFTRUE 30925
30923: GO 30951
30925: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30926: LD_ADDR_VAR 0 3
30930: PUSH
30931: LD_INT 2
30933: PUSH
30934: LD_INT 3
30936: PUSH
30937: LD_INT 4
30939: PUSH
30940: LD_INT 5
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: ST_TO_ADDR
30949: GO 31672
30951: LD_INT 14
30953: DOUBLE
30954: EQUAL
30955: IFTRUE 30959
30957: GO 30977
30959: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30960: LD_ADDR_VAR 0 3
30964: PUSH
30965: LD_INT 4
30967: PUSH
30968: LD_INT 5
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: ST_TO_ADDR
30975: GO 31672
30977: LD_INT 6
30979: DOUBLE
30980: EQUAL
30981: IFTRUE 30985
30983: GO 31003
30985: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30986: LD_ADDR_VAR 0 3
30990: PUSH
30991: LD_INT 4
30993: PUSH
30994: LD_INT 5
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: ST_TO_ADDR
31001: GO 31672
31003: LD_INT 10
31005: DOUBLE
31006: EQUAL
31007: IFTRUE 31011
31009: GO 31029
31011: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31012: LD_ADDR_VAR 0 3
31016: PUSH
31017: LD_INT 4
31019: PUSH
31020: LD_INT 5
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: ST_TO_ADDR
31027: GO 31672
31029: LD_INT 22
31031: DOUBLE
31032: EQUAL
31033: IFTRUE 31037
31035: GO 31063
31037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31038: LD_ADDR_VAR 0 3
31042: PUSH
31043: LD_INT 11
31045: PUSH
31046: LD_INT 12
31048: PUSH
31049: LD_INT 13
31051: PUSH
31052: LD_INT 14
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: ST_TO_ADDR
31061: GO 31672
31063: LD_INT 23
31065: DOUBLE
31066: EQUAL
31067: IFTRUE 31071
31069: GO 31097
31071: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31072: LD_ADDR_VAR 0 3
31076: PUSH
31077: LD_INT 11
31079: PUSH
31080: LD_INT 12
31082: PUSH
31083: LD_INT 13
31085: PUSH
31086: LD_INT 14
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: ST_TO_ADDR
31095: GO 31672
31097: LD_INT 24
31099: DOUBLE
31100: EQUAL
31101: IFTRUE 31105
31103: GO 31131
31105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31106: LD_ADDR_VAR 0 3
31110: PUSH
31111: LD_INT 11
31113: PUSH
31114: LD_INT 12
31116: PUSH
31117: LD_INT 13
31119: PUSH
31120: LD_INT 14
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: ST_TO_ADDR
31129: GO 31672
31131: LD_INT 30
31133: DOUBLE
31134: EQUAL
31135: IFTRUE 31139
31137: GO 31165
31139: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31140: LD_ADDR_VAR 0 3
31144: PUSH
31145: LD_INT 11
31147: PUSH
31148: LD_INT 12
31150: PUSH
31151: LD_INT 13
31153: PUSH
31154: LD_INT 14
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: ST_TO_ADDR
31163: GO 31672
31165: LD_INT 25
31167: DOUBLE
31168: EQUAL
31169: IFTRUE 31173
31171: GO 31191
31173: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31174: LD_ADDR_VAR 0 3
31178: PUSH
31179: LD_INT 13
31181: PUSH
31182: LD_INT 14
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: ST_TO_ADDR
31189: GO 31672
31191: LD_INT 27
31193: DOUBLE
31194: EQUAL
31195: IFTRUE 31199
31197: GO 31217
31199: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31200: LD_ADDR_VAR 0 3
31204: PUSH
31205: LD_INT 13
31207: PUSH
31208: LD_INT 14
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: ST_TO_ADDR
31215: GO 31672
31217: LD_INT 92
31219: DOUBLE
31220: EQUAL
31221: IFTRUE 31225
31223: GO 31251
31225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31226: LD_ADDR_VAR 0 3
31230: PUSH
31231: LD_INT 11
31233: PUSH
31234: LD_INT 12
31236: PUSH
31237: LD_INT 13
31239: PUSH
31240: LD_INT 14
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: ST_TO_ADDR
31249: GO 31672
31251: LD_INT 28
31253: DOUBLE
31254: EQUAL
31255: IFTRUE 31259
31257: GO 31277
31259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31260: LD_ADDR_VAR 0 3
31264: PUSH
31265: LD_INT 13
31267: PUSH
31268: LD_INT 14
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: ST_TO_ADDR
31275: GO 31672
31277: LD_INT 29
31279: DOUBLE
31280: EQUAL
31281: IFTRUE 31285
31283: GO 31303
31285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31286: LD_ADDR_VAR 0 3
31290: PUSH
31291: LD_INT 13
31293: PUSH
31294: LD_INT 14
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: ST_TO_ADDR
31301: GO 31672
31303: LD_INT 31
31305: DOUBLE
31306: EQUAL
31307: IFTRUE 31311
31309: GO 31329
31311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31312: LD_ADDR_VAR 0 3
31316: PUSH
31317: LD_INT 13
31319: PUSH
31320: LD_INT 14
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: ST_TO_ADDR
31327: GO 31672
31329: LD_INT 26
31331: DOUBLE
31332: EQUAL
31333: IFTRUE 31337
31335: GO 31355
31337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31338: LD_ADDR_VAR 0 3
31342: PUSH
31343: LD_INT 13
31345: PUSH
31346: LD_INT 14
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: ST_TO_ADDR
31353: GO 31672
31355: LD_INT 42
31357: DOUBLE
31358: EQUAL
31359: IFTRUE 31363
31361: GO 31389
31363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31364: LD_ADDR_VAR 0 3
31368: PUSH
31369: LD_INT 21
31371: PUSH
31372: LD_INT 22
31374: PUSH
31375: LD_INT 23
31377: PUSH
31378: LD_INT 24
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: ST_TO_ADDR
31387: GO 31672
31389: LD_INT 43
31391: DOUBLE
31392: EQUAL
31393: IFTRUE 31397
31395: GO 31423
31397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31398: LD_ADDR_VAR 0 3
31402: PUSH
31403: LD_INT 21
31405: PUSH
31406: LD_INT 22
31408: PUSH
31409: LD_INT 23
31411: PUSH
31412: LD_INT 24
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: ST_TO_ADDR
31421: GO 31672
31423: LD_INT 44
31425: DOUBLE
31426: EQUAL
31427: IFTRUE 31431
31429: GO 31457
31431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31432: LD_ADDR_VAR 0 3
31436: PUSH
31437: LD_INT 21
31439: PUSH
31440: LD_INT 22
31442: PUSH
31443: LD_INT 23
31445: PUSH
31446: LD_INT 24
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: ST_TO_ADDR
31455: GO 31672
31457: LD_INT 45
31459: DOUBLE
31460: EQUAL
31461: IFTRUE 31465
31463: GO 31491
31465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31466: LD_ADDR_VAR 0 3
31470: PUSH
31471: LD_INT 21
31473: PUSH
31474: LD_INT 22
31476: PUSH
31477: LD_INT 23
31479: PUSH
31480: LD_INT 24
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: ST_TO_ADDR
31489: GO 31672
31491: LD_INT 49
31493: DOUBLE
31494: EQUAL
31495: IFTRUE 31499
31497: GO 31525
31499: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31500: LD_ADDR_VAR 0 3
31504: PUSH
31505: LD_INT 21
31507: PUSH
31508: LD_INT 22
31510: PUSH
31511: LD_INT 23
31513: PUSH
31514: LD_INT 24
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: ST_TO_ADDR
31523: GO 31672
31525: LD_INT 51
31527: DOUBLE
31528: EQUAL
31529: IFTRUE 31533
31531: GO 31559
31533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31534: LD_ADDR_VAR 0 3
31538: PUSH
31539: LD_INT 21
31541: PUSH
31542: LD_INT 22
31544: PUSH
31545: LD_INT 23
31547: PUSH
31548: LD_INT 24
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: ST_TO_ADDR
31557: GO 31672
31559: LD_INT 52
31561: DOUBLE
31562: EQUAL
31563: IFTRUE 31567
31565: GO 31593
31567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31568: LD_ADDR_VAR 0 3
31572: PUSH
31573: LD_INT 21
31575: PUSH
31576: LD_INT 22
31578: PUSH
31579: LD_INT 23
31581: PUSH
31582: LD_INT 24
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: ST_TO_ADDR
31591: GO 31672
31593: LD_INT 53
31595: DOUBLE
31596: EQUAL
31597: IFTRUE 31601
31599: GO 31619
31601: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31602: LD_ADDR_VAR 0 3
31606: PUSH
31607: LD_INT 23
31609: PUSH
31610: LD_INT 24
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: ST_TO_ADDR
31617: GO 31672
31619: LD_INT 46
31621: DOUBLE
31622: EQUAL
31623: IFTRUE 31627
31625: GO 31645
31627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31628: LD_ADDR_VAR 0 3
31632: PUSH
31633: LD_INT 23
31635: PUSH
31636: LD_INT 24
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: ST_TO_ADDR
31643: GO 31672
31645: LD_INT 47
31647: DOUBLE
31648: EQUAL
31649: IFTRUE 31653
31651: GO 31671
31653: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31654: LD_ADDR_VAR 0 3
31658: PUSH
31659: LD_INT 23
31661: PUSH
31662: LD_INT 24
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: ST_TO_ADDR
31669: GO 31672
31671: POP
// result := ( chassis in result ) ;
31672: LD_ADDR_VAR 0 3
31676: PUSH
31677: LD_VAR 0 1
31681: PUSH
31682: LD_VAR 0 3
31686: IN
31687: ST_TO_ADDR
// end ;
31688: LD_VAR 0 3
31692: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31693: LD_INT 0
31695: PPUSH
31696: PPUSH
31697: PPUSH
31698: PPUSH
31699: PPUSH
31700: PPUSH
31701: PPUSH
// result := array ;
31702: LD_ADDR_VAR 0 5
31706: PUSH
31707: LD_VAR 0 1
31711: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31712: LD_VAR 0 1
31716: NOT
31717: PUSH
31718: LD_VAR 0 2
31722: NOT
31723: OR
31724: PUSH
31725: LD_VAR 0 3
31729: NOT
31730: OR
31731: PUSH
31732: LD_VAR 0 2
31736: PUSH
31737: LD_VAR 0 1
31741: GREATER
31742: OR
31743: PUSH
31744: LD_VAR 0 3
31748: PUSH
31749: LD_VAR 0 1
31753: GREATER
31754: OR
31755: IFFALSE 31759
// exit ;
31757: GO 32055
// if direction then
31759: LD_VAR 0 4
31763: IFFALSE 31827
// begin d := 1 ;
31765: LD_ADDR_VAR 0 9
31769: PUSH
31770: LD_INT 1
31772: ST_TO_ADDR
// if i_from > i_to then
31773: LD_VAR 0 2
31777: PUSH
31778: LD_VAR 0 3
31782: GREATER
31783: IFFALSE 31809
// length := ( array - i_from ) + i_to else
31785: LD_ADDR_VAR 0 11
31789: PUSH
31790: LD_VAR 0 1
31794: PUSH
31795: LD_VAR 0 2
31799: MINUS
31800: PUSH
31801: LD_VAR 0 3
31805: PLUS
31806: ST_TO_ADDR
31807: GO 31825
// length := i_to - i_from ;
31809: LD_ADDR_VAR 0 11
31813: PUSH
31814: LD_VAR 0 3
31818: PUSH
31819: LD_VAR 0 2
31823: MINUS
31824: ST_TO_ADDR
// end else
31825: GO 31888
// begin d := - 1 ;
31827: LD_ADDR_VAR 0 9
31831: PUSH
31832: LD_INT 1
31834: NEG
31835: ST_TO_ADDR
// if i_from > i_to then
31836: LD_VAR 0 2
31840: PUSH
31841: LD_VAR 0 3
31845: GREATER
31846: IFFALSE 31866
// length := i_from - i_to else
31848: LD_ADDR_VAR 0 11
31852: PUSH
31853: LD_VAR 0 2
31857: PUSH
31858: LD_VAR 0 3
31862: MINUS
31863: ST_TO_ADDR
31864: GO 31888
// length := ( array - i_to ) + i_from ;
31866: LD_ADDR_VAR 0 11
31870: PUSH
31871: LD_VAR 0 1
31875: PUSH
31876: LD_VAR 0 3
31880: MINUS
31881: PUSH
31882: LD_VAR 0 2
31886: PLUS
31887: ST_TO_ADDR
// end ; if not length then
31888: LD_VAR 0 11
31892: NOT
31893: IFFALSE 31897
// exit ;
31895: GO 32055
// tmp := array ;
31897: LD_ADDR_VAR 0 10
31901: PUSH
31902: LD_VAR 0 1
31906: ST_TO_ADDR
// for i = 1 to length do
31907: LD_ADDR_VAR 0 6
31911: PUSH
31912: DOUBLE
31913: LD_INT 1
31915: DEC
31916: ST_TO_ADDR
31917: LD_VAR 0 11
31921: PUSH
31922: FOR_TO
31923: IFFALSE 32043
// begin for j = 1 to array do
31925: LD_ADDR_VAR 0 7
31929: PUSH
31930: DOUBLE
31931: LD_INT 1
31933: DEC
31934: ST_TO_ADDR
31935: LD_VAR 0 1
31939: PUSH
31940: FOR_TO
31941: IFFALSE 32029
// begin k := j + d ;
31943: LD_ADDR_VAR 0 8
31947: PUSH
31948: LD_VAR 0 7
31952: PUSH
31953: LD_VAR 0 9
31957: PLUS
31958: ST_TO_ADDR
// if k > array then
31959: LD_VAR 0 8
31963: PUSH
31964: LD_VAR 0 1
31968: GREATER
31969: IFFALSE 31979
// k := 1 ;
31971: LD_ADDR_VAR 0 8
31975: PUSH
31976: LD_INT 1
31978: ST_TO_ADDR
// if not k then
31979: LD_VAR 0 8
31983: NOT
31984: IFFALSE 31996
// k := array ;
31986: LD_ADDR_VAR 0 8
31990: PUSH
31991: LD_VAR 0 1
31995: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31996: LD_ADDR_VAR 0 10
32000: PUSH
32001: LD_VAR 0 10
32005: PPUSH
32006: LD_VAR 0 8
32010: PPUSH
32011: LD_VAR 0 1
32015: PUSH
32016: LD_VAR 0 7
32020: ARRAY
32021: PPUSH
32022: CALL_OW 1
32026: ST_TO_ADDR
// end ;
32027: GO 31940
32029: POP
32030: POP
// array := tmp ;
32031: LD_ADDR_VAR 0 1
32035: PUSH
32036: LD_VAR 0 10
32040: ST_TO_ADDR
// end ;
32041: GO 31922
32043: POP
32044: POP
// result := array ;
32045: LD_ADDR_VAR 0 5
32049: PUSH
32050: LD_VAR 0 1
32054: ST_TO_ADDR
// end ;
32055: LD_VAR 0 5
32059: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32060: LD_INT 0
32062: PPUSH
32063: PPUSH
// result := 0 ;
32064: LD_ADDR_VAR 0 3
32068: PUSH
32069: LD_INT 0
32071: ST_TO_ADDR
// if not array or not value in array then
32072: LD_VAR 0 1
32076: NOT
32077: PUSH
32078: LD_VAR 0 2
32082: PUSH
32083: LD_VAR 0 1
32087: IN
32088: NOT
32089: OR
32090: IFFALSE 32094
// exit ;
32092: GO 32148
// for i = 1 to array do
32094: LD_ADDR_VAR 0 4
32098: PUSH
32099: DOUBLE
32100: LD_INT 1
32102: DEC
32103: ST_TO_ADDR
32104: LD_VAR 0 1
32108: PUSH
32109: FOR_TO
32110: IFFALSE 32146
// if value = array [ i ] then
32112: LD_VAR 0 2
32116: PUSH
32117: LD_VAR 0 1
32121: PUSH
32122: LD_VAR 0 4
32126: ARRAY
32127: EQUAL
32128: IFFALSE 32144
// begin result := i ;
32130: LD_ADDR_VAR 0 3
32134: PUSH
32135: LD_VAR 0 4
32139: ST_TO_ADDR
// exit ;
32140: POP
32141: POP
32142: GO 32148
// end ;
32144: GO 32109
32146: POP
32147: POP
// end ;
32148: LD_VAR 0 3
32152: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32153: LD_INT 0
32155: PPUSH
// vc_chassis := chassis ;
32156: LD_ADDR_OWVAR 37
32160: PUSH
32161: LD_VAR 0 1
32165: ST_TO_ADDR
// vc_engine := engine ;
32166: LD_ADDR_OWVAR 39
32170: PUSH
32171: LD_VAR 0 2
32175: ST_TO_ADDR
// vc_control := control ;
32176: LD_ADDR_OWVAR 38
32180: PUSH
32181: LD_VAR 0 3
32185: ST_TO_ADDR
// vc_weapon := weapon ;
32186: LD_ADDR_OWVAR 40
32190: PUSH
32191: LD_VAR 0 4
32195: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32196: LD_ADDR_OWVAR 41
32200: PUSH
32201: LD_VAR 0 5
32205: ST_TO_ADDR
// end ;
32206: LD_VAR 0 6
32210: RET
// export function WantPlant ( unit ) ; var task ; begin
32211: LD_INT 0
32213: PPUSH
32214: PPUSH
// result := false ;
32215: LD_ADDR_VAR 0 2
32219: PUSH
32220: LD_INT 0
32222: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32223: LD_ADDR_VAR 0 3
32227: PUSH
32228: LD_VAR 0 1
32232: PPUSH
32233: CALL_OW 437
32237: ST_TO_ADDR
// if task then
32238: LD_VAR 0 3
32242: IFFALSE 32270
// if task [ 1 ] [ 1 ] = p then
32244: LD_VAR 0 3
32248: PUSH
32249: LD_INT 1
32251: ARRAY
32252: PUSH
32253: LD_INT 1
32255: ARRAY
32256: PUSH
32257: LD_STRING p
32259: EQUAL
32260: IFFALSE 32270
// result := true ;
32262: LD_ADDR_VAR 0 2
32266: PUSH
32267: LD_INT 1
32269: ST_TO_ADDR
// end ;
32270: LD_VAR 0 2
32274: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32275: LD_INT 0
32277: PPUSH
32278: PPUSH
32279: PPUSH
32280: PPUSH
// if pos < 1 then
32281: LD_VAR 0 2
32285: PUSH
32286: LD_INT 1
32288: LESS
32289: IFFALSE 32293
// exit ;
32291: GO 32596
// if pos = 1 then
32293: LD_VAR 0 2
32297: PUSH
32298: LD_INT 1
32300: EQUAL
32301: IFFALSE 32334
// result := Replace ( arr , pos [ 1 ] , value ) else
32303: LD_ADDR_VAR 0 4
32307: PUSH
32308: LD_VAR 0 1
32312: PPUSH
32313: LD_VAR 0 2
32317: PUSH
32318: LD_INT 1
32320: ARRAY
32321: PPUSH
32322: LD_VAR 0 3
32326: PPUSH
32327: CALL_OW 1
32331: ST_TO_ADDR
32332: GO 32596
// begin tmp := arr ;
32334: LD_ADDR_VAR 0 6
32338: PUSH
32339: LD_VAR 0 1
32343: ST_TO_ADDR
// s_arr := [ tmp ] ;
32344: LD_ADDR_VAR 0 7
32348: PUSH
32349: LD_VAR 0 6
32353: PUSH
32354: EMPTY
32355: LIST
32356: ST_TO_ADDR
// for i = 1 to pos - 1 do
32357: LD_ADDR_VAR 0 5
32361: PUSH
32362: DOUBLE
32363: LD_INT 1
32365: DEC
32366: ST_TO_ADDR
32367: LD_VAR 0 2
32371: PUSH
32372: LD_INT 1
32374: MINUS
32375: PUSH
32376: FOR_TO
32377: IFFALSE 32422
// begin tmp := tmp [ pos [ i ] ] ;
32379: LD_ADDR_VAR 0 6
32383: PUSH
32384: LD_VAR 0 6
32388: PUSH
32389: LD_VAR 0 2
32393: PUSH
32394: LD_VAR 0 5
32398: ARRAY
32399: ARRAY
32400: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32401: LD_ADDR_VAR 0 7
32405: PUSH
32406: LD_VAR 0 7
32410: PUSH
32411: LD_VAR 0 6
32415: PUSH
32416: EMPTY
32417: LIST
32418: ADD
32419: ST_TO_ADDR
// end ;
32420: GO 32376
32422: POP
32423: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32424: LD_ADDR_VAR 0 6
32428: PUSH
32429: LD_VAR 0 6
32433: PPUSH
32434: LD_VAR 0 2
32438: PUSH
32439: LD_VAR 0 2
32443: ARRAY
32444: PPUSH
32445: LD_VAR 0 3
32449: PPUSH
32450: CALL_OW 1
32454: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32455: LD_ADDR_VAR 0 7
32459: PUSH
32460: LD_VAR 0 7
32464: PPUSH
32465: LD_VAR 0 7
32469: PPUSH
32470: LD_VAR 0 6
32474: PPUSH
32475: CALL_OW 1
32479: ST_TO_ADDR
// for i = s_arr downto 2 do
32480: LD_ADDR_VAR 0 5
32484: PUSH
32485: DOUBLE
32486: LD_VAR 0 7
32490: INC
32491: ST_TO_ADDR
32492: LD_INT 2
32494: PUSH
32495: FOR_DOWNTO
32496: IFFALSE 32580
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32498: LD_ADDR_VAR 0 6
32502: PUSH
32503: LD_VAR 0 7
32507: PUSH
32508: LD_VAR 0 5
32512: PUSH
32513: LD_INT 1
32515: MINUS
32516: ARRAY
32517: PPUSH
32518: LD_VAR 0 2
32522: PUSH
32523: LD_VAR 0 5
32527: PUSH
32528: LD_INT 1
32530: MINUS
32531: ARRAY
32532: PPUSH
32533: LD_VAR 0 7
32537: PUSH
32538: LD_VAR 0 5
32542: ARRAY
32543: PPUSH
32544: CALL_OW 1
32548: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32549: LD_ADDR_VAR 0 7
32553: PUSH
32554: LD_VAR 0 7
32558: PPUSH
32559: LD_VAR 0 5
32563: PUSH
32564: LD_INT 1
32566: MINUS
32567: PPUSH
32568: LD_VAR 0 6
32572: PPUSH
32573: CALL_OW 1
32577: ST_TO_ADDR
// end ;
32578: GO 32495
32580: POP
32581: POP
// result := s_arr [ 1 ] ;
32582: LD_ADDR_VAR 0 4
32586: PUSH
32587: LD_VAR 0 7
32591: PUSH
32592: LD_INT 1
32594: ARRAY
32595: ST_TO_ADDR
// end ; end ;
32596: LD_VAR 0 4
32600: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32601: LD_INT 0
32603: PPUSH
32604: PPUSH
// if not list then
32605: LD_VAR 0 1
32609: NOT
32610: IFFALSE 32614
// exit ;
32612: GO 32705
// i := list [ pos1 ] ;
32614: LD_ADDR_VAR 0 5
32618: PUSH
32619: LD_VAR 0 1
32623: PUSH
32624: LD_VAR 0 2
32628: ARRAY
32629: ST_TO_ADDR
// if not i then
32630: LD_VAR 0 5
32634: NOT
32635: IFFALSE 32639
// exit ;
32637: GO 32705
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32639: LD_ADDR_VAR 0 1
32643: PUSH
32644: LD_VAR 0 1
32648: PPUSH
32649: LD_VAR 0 2
32653: PPUSH
32654: LD_VAR 0 1
32658: PUSH
32659: LD_VAR 0 3
32663: ARRAY
32664: PPUSH
32665: CALL_OW 1
32669: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32670: LD_ADDR_VAR 0 1
32674: PUSH
32675: LD_VAR 0 1
32679: PPUSH
32680: LD_VAR 0 3
32684: PPUSH
32685: LD_VAR 0 5
32689: PPUSH
32690: CALL_OW 1
32694: ST_TO_ADDR
// result := list ;
32695: LD_ADDR_VAR 0 4
32699: PUSH
32700: LD_VAR 0 1
32704: ST_TO_ADDR
// end ;
32705: LD_VAR 0 4
32709: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32710: LD_INT 0
32712: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32713: LD_ADDR_VAR 0 5
32717: PUSH
32718: LD_VAR 0 1
32722: PPUSH
32723: CALL_OW 250
32727: PPUSH
32728: LD_VAR 0 1
32732: PPUSH
32733: CALL_OW 251
32737: PPUSH
32738: LD_VAR 0 2
32742: PPUSH
32743: LD_VAR 0 3
32747: PPUSH
32748: LD_VAR 0 4
32752: PPUSH
32753: CALL 32763 0 5
32757: ST_TO_ADDR
// end ;
32758: LD_VAR 0 5
32762: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32763: LD_INT 0
32765: PPUSH
32766: PPUSH
32767: PPUSH
32768: PPUSH
// if not list then
32769: LD_VAR 0 3
32773: NOT
32774: IFFALSE 32778
// exit ;
32776: GO 33166
// result := [ ] ;
32778: LD_ADDR_VAR 0 6
32782: PUSH
32783: EMPTY
32784: ST_TO_ADDR
// for i in list do
32785: LD_ADDR_VAR 0 7
32789: PUSH
32790: LD_VAR 0 3
32794: PUSH
32795: FOR_IN
32796: IFFALSE 32998
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32798: LD_ADDR_VAR 0 9
32802: PUSH
32803: LD_VAR 0 7
32807: PPUSH
32808: LD_VAR 0 1
32812: PPUSH
32813: LD_VAR 0 2
32817: PPUSH
32818: CALL_OW 297
32822: ST_TO_ADDR
// if not result then
32823: LD_VAR 0 6
32827: NOT
32828: IFFALSE 32854
// result := [ [ i , tmp ] ] else
32830: LD_ADDR_VAR 0 6
32834: PUSH
32835: LD_VAR 0 7
32839: PUSH
32840: LD_VAR 0 9
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: EMPTY
32850: LIST
32851: ST_TO_ADDR
32852: GO 32996
// begin if result [ result ] [ 2 ] < tmp then
32854: LD_VAR 0 6
32858: PUSH
32859: LD_VAR 0 6
32863: ARRAY
32864: PUSH
32865: LD_INT 2
32867: ARRAY
32868: PUSH
32869: LD_VAR 0 9
32873: LESS
32874: IFFALSE 32916
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32876: LD_ADDR_VAR 0 6
32880: PUSH
32881: LD_VAR 0 6
32885: PPUSH
32886: LD_VAR 0 6
32890: PUSH
32891: LD_INT 1
32893: PLUS
32894: PPUSH
32895: LD_VAR 0 7
32899: PUSH
32900: LD_VAR 0 9
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PPUSH
32909: CALL_OW 2
32913: ST_TO_ADDR
32914: GO 32996
// for j = 1 to result do
32916: LD_ADDR_VAR 0 8
32920: PUSH
32921: DOUBLE
32922: LD_INT 1
32924: DEC
32925: ST_TO_ADDR
32926: LD_VAR 0 6
32930: PUSH
32931: FOR_TO
32932: IFFALSE 32994
// begin if tmp < result [ j ] [ 2 ] then
32934: LD_VAR 0 9
32938: PUSH
32939: LD_VAR 0 6
32943: PUSH
32944: LD_VAR 0 8
32948: ARRAY
32949: PUSH
32950: LD_INT 2
32952: ARRAY
32953: LESS
32954: IFFALSE 32992
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32956: LD_ADDR_VAR 0 6
32960: PUSH
32961: LD_VAR 0 6
32965: PPUSH
32966: LD_VAR 0 8
32970: PPUSH
32971: LD_VAR 0 7
32975: PUSH
32976: LD_VAR 0 9
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PPUSH
32985: CALL_OW 2
32989: ST_TO_ADDR
// break ;
32990: GO 32994
// end ; end ;
32992: GO 32931
32994: POP
32995: POP
// end ; end ;
32996: GO 32795
32998: POP
32999: POP
// if result and not asc then
33000: LD_VAR 0 6
33004: PUSH
33005: LD_VAR 0 4
33009: NOT
33010: AND
33011: IFFALSE 33086
// begin tmp := result ;
33013: LD_ADDR_VAR 0 9
33017: PUSH
33018: LD_VAR 0 6
33022: ST_TO_ADDR
// for i = tmp downto 1 do
33023: LD_ADDR_VAR 0 7
33027: PUSH
33028: DOUBLE
33029: LD_VAR 0 9
33033: INC
33034: ST_TO_ADDR
33035: LD_INT 1
33037: PUSH
33038: FOR_DOWNTO
33039: IFFALSE 33084
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33041: LD_ADDR_VAR 0 6
33045: PUSH
33046: LD_VAR 0 6
33050: PPUSH
33051: LD_VAR 0 9
33055: PUSH
33056: LD_VAR 0 7
33060: MINUS
33061: PUSH
33062: LD_INT 1
33064: PLUS
33065: PPUSH
33066: LD_VAR 0 9
33070: PUSH
33071: LD_VAR 0 7
33075: ARRAY
33076: PPUSH
33077: CALL_OW 1
33081: ST_TO_ADDR
33082: GO 33038
33084: POP
33085: POP
// end ; tmp := [ ] ;
33086: LD_ADDR_VAR 0 9
33090: PUSH
33091: EMPTY
33092: ST_TO_ADDR
// if mode then
33093: LD_VAR 0 5
33097: IFFALSE 33166
// begin for i = 1 to result do
33099: LD_ADDR_VAR 0 7
33103: PUSH
33104: DOUBLE
33105: LD_INT 1
33107: DEC
33108: ST_TO_ADDR
33109: LD_VAR 0 6
33113: PUSH
33114: FOR_TO
33115: IFFALSE 33154
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33117: LD_ADDR_VAR 0 9
33121: PUSH
33122: LD_VAR 0 9
33126: PPUSH
33127: LD_VAR 0 7
33131: PPUSH
33132: LD_VAR 0 6
33136: PUSH
33137: LD_VAR 0 7
33141: ARRAY
33142: PUSH
33143: LD_INT 1
33145: ARRAY
33146: PPUSH
33147: CALL_OW 1
33151: ST_TO_ADDR
33152: GO 33114
33154: POP
33155: POP
// result := tmp ;
33156: LD_ADDR_VAR 0 6
33160: PUSH
33161: LD_VAR 0 9
33165: ST_TO_ADDR
// end ; end ;
33166: LD_VAR 0 6
33170: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33171: LD_INT 0
33173: PPUSH
33174: PPUSH
33175: PPUSH
33176: PPUSH
33177: PPUSH
33178: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33179: LD_ADDR_VAR 0 5
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: LD_INT 0
33189: PUSH
33190: LD_INT 0
33192: PUSH
33193: EMPTY
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: ST_TO_ADDR
// if not x or not y then
33201: LD_VAR 0 2
33205: NOT
33206: PUSH
33207: LD_VAR 0 3
33211: NOT
33212: OR
33213: IFFALSE 33217
// exit ;
33215: GO 34867
// if not range then
33217: LD_VAR 0 4
33221: NOT
33222: IFFALSE 33232
// range := 10 ;
33224: LD_ADDR_VAR 0 4
33228: PUSH
33229: LD_INT 10
33231: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33232: LD_ADDR_VAR 0 8
33236: PUSH
33237: LD_INT 81
33239: PUSH
33240: LD_VAR 0 1
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 92
33251: PUSH
33252: LD_VAR 0 2
33256: PUSH
33257: LD_VAR 0 3
33261: PUSH
33262: LD_VAR 0 4
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 3
33275: PUSH
33276: LD_INT 21
33278: PUSH
33279: LD_INT 3
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: LIST
33294: PPUSH
33295: CALL_OW 69
33299: ST_TO_ADDR
// if not tmp then
33300: LD_VAR 0 8
33304: NOT
33305: IFFALSE 33309
// exit ;
33307: GO 34867
// for i in tmp do
33309: LD_ADDR_VAR 0 6
33313: PUSH
33314: LD_VAR 0 8
33318: PUSH
33319: FOR_IN
33320: IFFALSE 34842
// begin points := [ 0 , 0 , 0 ] ;
33322: LD_ADDR_VAR 0 9
33326: PUSH
33327: LD_INT 0
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: LIST
33340: ST_TO_ADDR
// bpoints := 1 ;
33341: LD_ADDR_VAR 0 10
33345: PUSH
33346: LD_INT 1
33348: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33349: LD_VAR 0 6
33353: PPUSH
33354: CALL_OW 247
33358: PUSH
33359: LD_INT 1
33361: DOUBLE
33362: EQUAL
33363: IFTRUE 33367
33365: GO 33945
33367: POP
// begin if GetClass ( i ) = 1 then
33368: LD_VAR 0 6
33372: PPUSH
33373: CALL_OW 257
33377: PUSH
33378: LD_INT 1
33380: EQUAL
33381: IFFALSE 33402
// points := [ 10 , 5 , 3 ] ;
33383: LD_ADDR_VAR 0 9
33387: PUSH
33388: LD_INT 10
33390: PUSH
33391: LD_INT 5
33393: PUSH
33394: LD_INT 3
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: LIST
33401: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33402: LD_VAR 0 6
33406: PPUSH
33407: CALL_OW 257
33411: PUSH
33412: LD_INT 2
33414: PUSH
33415: LD_INT 3
33417: PUSH
33418: LD_INT 4
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: IN
33426: IFFALSE 33447
// points := [ 3 , 2 , 1 ] ;
33428: LD_ADDR_VAR 0 9
33432: PUSH
33433: LD_INT 3
33435: PUSH
33436: LD_INT 2
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: LIST
33446: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33447: LD_VAR 0 6
33451: PPUSH
33452: CALL_OW 257
33456: PUSH
33457: LD_INT 5
33459: EQUAL
33460: IFFALSE 33481
// points := [ 130 , 5 , 2 ] ;
33462: LD_ADDR_VAR 0 9
33466: PUSH
33467: LD_INT 130
33469: PUSH
33470: LD_INT 5
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: LIST
33480: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33481: LD_VAR 0 6
33485: PPUSH
33486: CALL_OW 257
33490: PUSH
33491: LD_INT 8
33493: EQUAL
33494: IFFALSE 33515
// points := [ 35 , 35 , 30 ] ;
33496: LD_ADDR_VAR 0 9
33500: PUSH
33501: LD_INT 35
33503: PUSH
33504: LD_INT 35
33506: PUSH
33507: LD_INT 30
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: LIST
33514: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33515: LD_VAR 0 6
33519: PPUSH
33520: CALL_OW 257
33524: PUSH
33525: LD_INT 9
33527: EQUAL
33528: IFFALSE 33549
// points := [ 20 , 55 , 40 ] ;
33530: LD_ADDR_VAR 0 9
33534: PUSH
33535: LD_INT 20
33537: PUSH
33538: LD_INT 55
33540: PUSH
33541: LD_INT 40
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: LIST
33548: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33549: LD_VAR 0 6
33553: PPUSH
33554: CALL_OW 257
33558: PUSH
33559: LD_INT 12
33561: PUSH
33562: LD_INT 16
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: IN
33569: IFFALSE 33590
// points := [ 5 , 3 , 2 ] ;
33571: LD_ADDR_VAR 0 9
33575: PUSH
33576: LD_INT 5
33578: PUSH
33579: LD_INT 3
33581: PUSH
33582: LD_INT 2
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: LIST
33589: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33590: LD_VAR 0 6
33594: PPUSH
33595: CALL_OW 257
33599: PUSH
33600: LD_INT 17
33602: EQUAL
33603: IFFALSE 33624
// points := [ 100 , 50 , 75 ] ;
33605: LD_ADDR_VAR 0 9
33609: PUSH
33610: LD_INT 100
33612: PUSH
33613: LD_INT 50
33615: PUSH
33616: LD_INT 75
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: LIST
33623: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33624: LD_VAR 0 6
33628: PPUSH
33629: CALL_OW 257
33633: PUSH
33634: LD_INT 15
33636: EQUAL
33637: IFFALSE 33658
// points := [ 10 , 5 , 3 ] ;
33639: LD_ADDR_VAR 0 9
33643: PUSH
33644: LD_INT 10
33646: PUSH
33647: LD_INT 5
33649: PUSH
33650: LD_INT 3
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33658: LD_VAR 0 6
33662: PPUSH
33663: CALL_OW 257
33667: PUSH
33668: LD_INT 14
33670: EQUAL
33671: IFFALSE 33692
// points := [ 10 , 0 , 0 ] ;
33673: LD_ADDR_VAR 0 9
33677: PUSH
33678: LD_INT 10
33680: PUSH
33681: LD_INT 0
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: LIST
33691: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33692: LD_VAR 0 6
33696: PPUSH
33697: CALL_OW 257
33701: PUSH
33702: LD_INT 11
33704: EQUAL
33705: IFFALSE 33726
// points := [ 30 , 10 , 5 ] ;
33707: LD_ADDR_VAR 0 9
33711: PUSH
33712: LD_INT 30
33714: PUSH
33715: LD_INT 10
33717: PUSH
33718: LD_INT 5
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33726: LD_VAR 0 1
33730: PPUSH
33731: LD_INT 5
33733: PPUSH
33734: CALL_OW 321
33738: PUSH
33739: LD_INT 2
33741: EQUAL
33742: IFFALSE 33759
// bpoints := bpoints * 1.8 ;
33744: LD_ADDR_VAR 0 10
33748: PUSH
33749: LD_VAR 0 10
33753: PUSH
33754: LD_REAL  1.80000000000000E+0000
33757: MUL
33758: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33759: LD_VAR 0 6
33763: PPUSH
33764: CALL_OW 257
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: LD_INT 2
33774: PUSH
33775: LD_INT 3
33777: PUSH
33778: LD_INT 4
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: IN
33787: PUSH
33788: LD_VAR 0 1
33792: PPUSH
33793: LD_INT 51
33795: PPUSH
33796: CALL_OW 321
33800: PUSH
33801: LD_INT 2
33803: EQUAL
33804: AND
33805: IFFALSE 33822
// bpoints := bpoints * 1.2 ;
33807: LD_ADDR_VAR 0 10
33811: PUSH
33812: LD_VAR 0 10
33816: PUSH
33817: LD_REAL  1.20000000000000E+0000
33820: MUL
33821: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33822: LD_VAR 0 6
33826: PPUSH
33827: CALL_OW 257
33831: PUSH
33832: LD_INT 5
33834: PUSH
33835: LD_INT 7
33837: PUSH
33838: LD_INT 9
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: LIST
33845: IN
33846: PUSH
33847: LD_VAR 0 1
33851: PPUSH
33852: LD_INT 52
33854: PPUSH
33855: CALL_OW 321
33859: PUSH
33860: LD_INT 2
33862: EQUAL
33863: AND
33864: IFFALSE 33881
// bpoints := bpoints * 1.5 ;
33866: LD_ADDR_VAR 0 10
33870: PUSH
33871: LD_VAR 0 10
33875: PUSH
33876: LD_REAL  1.50000000000000E+0000
33879: MUL
33880: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33881: LD_VAR 0 1
33885: PPUSH
33886: LD_INT 66
33888: PPUSH
33889: CALL_OW 321
33893: PUSH
33894: LD_INT 2
33896: EQUAL
33897: IFFALSE 33914
// bpoints := bpoints * 1.1 ;
33899: LD_ADDR_VAR 0 10
33903: PUSH
33904: LD_VAR 0 10
33908: PUSH
33909: LD_REAL  1.10000000000000E+0000
33912: MUL
33913: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33914: LD_ADDR_VAR 0 10
33918: PUSH
33919: LD_VAR 0 10
33923: PUSH
33924: LD_VAR 0 6
33928: PPUSH
33929: LD_INT 1
33931: PPUSH
33932: CALL_OW 259
33936: PUSH
33937: LD_REAL  1.15000000000000E+0000
33940: MUL
33941: MUL
33942: ST_TO_ADDR
// end ; unit_vehicle :
33943: GO 34771
33945: LD_INT 2
33947: DOUBLE
33948: EQUAL
33949: IFTRUE 33953
33951: GO 34759
33953: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33954: LD_VAR 0 6
33958: PPUSH
33959: CALL_OW 264
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: LD_INT 42
33969: PUSH
33970: LD_INT 24
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: LIST
33977: IN
33978: IFFALSE 33999
// points := [ 25 , 5 , 3 ] ;
33980: LD_ADDR_VAR 0 9
33984: PUSH
33985: LD_INT 25
33987: PUSH
33988: LD_INT 5
33990: PUSH
33991: LD_INT 3
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33999: LD_VAR 0 6
34003: PPUSH
34004: CALL_OW 264
34008: PUSH
34009: LD_INT 4
34011: PUSH
34012: LD_INT 43
34014: PUSH
34015: LD_INT 25
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: LIST
34022: IN
34023: IFFALSE 34044
// points := [ 40 , 15 , 5 ] ;
34025: LD_ADDR_VAR 0 9
34029: PUSH
34030: LD_INT 40
34032: PUSH
34033: LD_INT 15
34035: PUSH
34036: LD_INT 5
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: LIST
34043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34044: LD_VAR 0 6
34048: PPUSH
34049: CALL_OW 264
34053: PUSH
34054: LD_INT 3
34056: PUSH
34057: LD_INT 23
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: IN
34064: IFFALSE 34085
// points := [ 7 , 25 , 8 ] ;
34066: LD_ADDR_VAR 0 9
34070: PUSH
34071: LD_INT 7
34073: PUSH
34074: LD_INT 25
34076: PUSH
34077: LD_INT 8
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34085: LD_VAR 0 6
34089: PPUSH
34090: CALL_OW 264
34094: PUSH
34095: LD_INT 5
34097: PUSH
34098: LD_INT 27
34100: PUSH
34101: LD_INT 44
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: LIST
34108: IN
34109: IFFALSE 34130
// points := [ 14 , 50 , 16 ] ;
34111: LD_ADDR_VAR 0 9
34115: PUSH
34116: LD_INT 14
34118: PUSH
34119: LD_INT 50
34121: PUSH
34122: LD_INT 16
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: LIST
34129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34130: LD_VAR 0 6
34134: PPUSH
34135: CALL_OW 264
34139: PUSH
34140: LD_INT 6
34142: PUSH
34143: LD_INT 46
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: IN
34150: IFFALSE 34171
// points := [ 32 , 120 , 70 ] ;
34152: LD_ADDR_VAR 0 9
34156: PUSH
34157: LD_INT 32
34159: PUSH
34160: LD_INT 120
34162: PUSH
34163: LD_INT 70
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: LIST
34170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34171: LD_VAR 0 6
34175: PPUSH
34176: CALL_OW 264
34180: PUSH
34181: LD_INT 7
34183: PUSH
34184: LD_INT 28
34186: PUSH
34187: LD_INT 45
34189: PUSH
34190: LD_INT 92
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: IN
34199: IFFALSE 34220
// points := [ 35 , 20 , 45 ] ;
34201: LD_ADDR_VAR 0 9
34205: PUSH
34206: LD_INT 35
34208: PUSH
34209: LD_INT 20
34211: PUSH
34212: LD_INT 45
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: LIST
34219: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34220: LD_VAR 0 6
34224: PPUSH
34225: CALL_OW 264
34229: PUSH
34230: LD_INT 47
34232: PUSH
34233: EMPTY
34234: LIST
34235: IN
34236: IFFALSE 34257
// points := [ 67 , 45 , 75 ] ;
34238: LD_ADDR_VAR 0 9
34242: PUSH
34243: LD_INT 67
34245: PUSH
34246: LD_INT 45
34248: PUSH
34249: LD_INT 75
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: LIST
34256: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34257: LD_VAR 0 6
34261: PPUSH
34262: CALL_OW 264
34266: PUSH
34267: LD_INT 26
34269: PUSH
34270: EMPTY
34271: LIST
34272: IN
34273: IFFALSE 34294
// points := [ 120 , 30 , 80 ] ;
34275: LD_ADDR_VAR 0 9
34279: PUSH
34280: LD_INT 120
34282: PUSH
34283: LD_INT 30
34285: PUSH
34286: LD_INT 80
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: LIST
34293: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34294: LD_VAR 0 6
34298: PPUSH
34299: CALL_OW 264
34303: PUSH
34304: LD_INT 22
34306: PUSH
34307: EMPTY
34308: LIST
34309: IN
34310: IFFALSE 34331
// points := [ 40 , 1 , 1 ] ;
34312: LD_ADDR_VAR 0 9
34316: PUSH
34317: LD_INT 40
34319: PUSH
34320: LD_INT 1
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: LIST
34330: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34331: LD_VAR 0 6
34335: PPUSH
34336: CALL_OW 264
34340: PUSH
34341: LD_INT 29
34343: PUSH
34344: EMPTY
34345: LIST
34346: IN
34347: IFFALSE 34368
// points := [ 70 , 200 , 400 ] ;
34349: LD_ADDR_VAR 0 9
34353: PUSH
34354: LD_INT 70
34356: PUSH
34357: LD_INT 200
34359: PUSH
34360: LD_INT 400
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: LIST
34367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34368: LD_VAR 0 6
34372: PPUSH
34373: CALL_OW 264
34377: PUSH
34378: LD_INT 14
34380: PUSH
34381: LD_INT 53
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: IN
34388: IFFALSE 34409
// points := [ 40 , 10 , 20 ] ;
34390: LD_ADDR_VAR 0 9
34394: PUSH
34395: LD_INT 40
34397: PUSH
34398: LD_INT 10
34400: PUSH
34401: LD_INT 20
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: LIST
34408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34409: LD_VAR 0 6
34413: PPUSH
34414: CALL_OW 264
34418: PUSH
34419: LD_INT 9
34421: PUSH
34422: EMPTY
34423: LIST
34424: IN
34425: IFFALSE 34446
// points := [ 5 , 70 , 20 ] ;
34427: LD_ADDR_VAR 0 9
34431: PUSH
34432: LD_INT 5
34434: PUSH
34435: LD_INT 70
34437: PUSH
34438: LD_INT 20
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: LIST
34445: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34446: LD_VAR 0 6
34450: PPUSH
34451: CALL_OW 264
34455: PUSH
34456: LD_INT 10
34458: PUSH
34459: EMPTY
34460: LIST
34461: IN
34462: IFFALSE 34483
// points := [ 35 , 110 , 70 ] ;
34464: LD_ADDR_VAR 0 9
34468: PUSH
34469: LD_INT 35
34471: PUSH
34472: LD_INT 110
34474: PUSH
34475: LD_INT 70
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34483: LD_VAR 0 6
34487: PPUSH
34488: CALL_OW 265
34492: PUSH
34493: LD_INT 25
34495: EQUAL
34496: IFFALSE 34517
// points := [ 80 , 65 , 100 ] ;
34498: LD_ADDR_VAR 0 9
34502: PUSH
34503: LD_INT 80
34505: PUSH
34506: LD_INT 65
34508: PUSH
34509: LD_INT 100
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: LIST
34516: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34517: LD_VAR 0 6
34521: PPUSH
34522: CALL_OW 263
34526: PUSH
34527: LD_INT 1
34529: EQUAL
34530: IFFALSE 34565
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34532: LD_ADDR_VAR 0 10
34536: PUSH
34537: LD_VAR 0 10
34541: PUSH
34542: LD_VAR 0 6
34546: PPUSH
34547: CALL_OW 311
34551: PPUSH
34552: LD_INT 3
34554: PPUSH
34555: CALL_OW 259
34559: PUSH
34560: LD_INT 4
34562: MUL
34563: MUL
34564: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34565: LD_VAR 0 6
34569: PPUSH
34570: CALL_OW 263
34574: PUSH
34575: LD_INT 2
34577: EQUAL
34578: IFFALSE 34629
// begin j := IsControledBy ( i ) ;
34580: LD_ADDR_VAR 0 7
34584: PUSH
34585: LD_VAR 0 6
34589: PPUSH
34590: CALL_OW 312
34594: ST_TO_ADDR
// if j then
34595: LD_VAR 0 7
34599: IFFALSE 34629
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34601: LD_ADDR_VAR 0 10
34605: PUSH
34606: LD_VAR 0 10
34610: PUSH
34611: LD_VAR 0 7
34615: PPUSH
34616: LD_INT 3
34618: PPUSH
34619: CALL_OW 259
34623: PUSH
34624: LD_INT 3
34626: MUL
34627: MUL
34628: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34629: LD_VAR 0 6
34633: PPUSH
34634: CALL_OW 264
34638: PUSH
34639: LD_INT 5
34641: PUSH
34642: LD_INT 6
34644: PUSH
34645: LD_INT 46
34647: PUSH
34648: LD_INT 44
34650: PUSH
34651: LD_INT 47
34653: PUSH
34654: LD_INT 45
34656: PUSH
34657: LD_INT 28
34659: PUSH
34660: LD_INT 7
34662: PUSH
34663: LD_INT 27
34665: PUSH
34666: LD_INT 29
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: IN
34681: PUSH
34682: LD_VAR 0 1
34686: PPUSH
34687: LD_INT 52
34689: PPUSH
34690: CALL_OW 321
34694: PUSH
34695: LD_INT 2
34697: EQUAL
34698: AND
34699: IFFALSE 34716
// bpoints := bpoints * 1.2 ;
34701: LD_ADDR_VAR 0 10
34705: PUSH
34706: LD_VAR 0 10
34710: PUSH
34711: LD_REAL  1.20000000000000E+0000
34714: MUL
34715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34716: LD_VAR 0 6
34720: PPUSH
34721: CALL_OW 264
34725: PUSH
34726: LD_INT 6
34728: PUSH
34729: LD_INT 46
34731: PUSH
34732: LD_INT 47
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: LIST
34739: IN
34740: IFFALSE 34757
// bpoints := bpoints * 1.2 ;
34742: LD_ADDR_VAR 0 10
34746: PUSH
34747: LD_VAR 0 10
34751: PUSH
34752: LD_REAL  1.20000000000000E+0000
34755: MUL
34756: ST_TO_ADDR
// end ; unit_building :
34757: GO 34771
34759: LD_INT 3
34761: DOUBLE
34762: EQUAL
34763: IFTRUE 34767
34765: GO 34770
34767: POP
// ; end ;
34768: GO 34771
34770: POP
// for j = 1 to 3 do
34771: LD_ADDR_VAR 0 7
34775: PUSH
34776: DOUBLE
34777: LD_INT 1
34779: DEC
34780: ST_TO_ADDR
34781: LD_INT 3
34783: PUSH
34784: FOR_TO
34785: IFFALSE 34838
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34787: LD_ADDR_VAR 0 5
34791: PUSH
34792: LD_VAR 0 5
34796: PPUSH
34797: LD_VAR 0 7
34801: PPUSH
34802: LD_VAR 0 5
34806: PUSH
34807: LD_VAR 0 7
34811: ARRAY
34812: PUSH
34813: LD_VAR 0 9
34817: PUSH
34818: LD_VAR 0 7
34822: ARRAY
34823: PUSH
34824: LD_VAR 0 10
34828: MUL
34829: PLUS
34830: PPUSH
34831: CALL_OW 1
34835: ST_TO_ADDR
34836: GO 34784
34838: POP
34839: POP
// end ;
34840: GO 33319
34842: POP
34843: POP
// result := Replace ( result , 4 , tmp ) ;
34844: LD_ADDR_VAR 0 5
34848: PUSH
34849: LD_VAR 0 5
34853: PPUSH
34854: LD_INT 4
34856: PPUSH
34857: LD_VAR 0 8
34861: PPUSH
34862: CALL_OW 1
34866: ST_TO_ADDR
// end ;
34867: LD_VAR 0 5
34871: RET
// export function DangerAtRange ( unit , range ) ; begin
34872: LD_INT 0
34874: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34875: LD_ADDR_VAR 0 3
34879: PUSH
34880: LD_VAR 0 1
34884: PPUSH
34885: CALL_OW 255
34889: PPUSH
34890: LD_VAR 0 1
34894: PPUSH
34895: CALL_OW 250
34899: PPUSH
34900: LD_VAR 0 1
34904: PPUSH
34905: CALL_OW 251
34909: PPUSH
34910: LD_VAR 0 2
34914: PPUSH
34915: CALL 33171 0 4
34919: ST_TO_ADDR
// end ;
34920: LD_VAR 0 3
34924: RET
// export function DangerInArea ( side , area ) ; begin
34925: LD_INT 0
34927: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34928: LD_ADDR_VAR 0 3
34932: PUSH
34933: LD_VAR 0 2
34937: PPUSH
34938: LD_INT 81
34940: PUSH
34941: LD_VAR 0 1
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PPUSH
34950: CALL_OW 70
34954: ST_TO_ADDR
// end ;
34955: LD_VAR 0 3
34959: RET
// export function IsExtension ( b ) ; begin
34960: LD_INT 0
34962: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34963: LD_ADDR_VAR 0 2
34967: PUSH
34968: LD_VAR 0 1
34972: PUSH
34973: LD_INT 23
34975: PUSH
34976: LD_INT 20
34978: PUSH
34979: LD_INT 22
34981: PUSH
34982: LD_INT 17
34984: PUSH
34985: LD_INT 24
34987: PUSH
34988: LD_INT 21
34990: PUSH
34991: LD_INT 19
34993: PUSH
34994: LD_INT 16
34996: PUSH
34997: LD_INT 25
34999: PUSH
35000: LD_INT 18
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: IN
35015: ST_TO_ADDR
// end ;
35016: LD_VAR 0 2
35020: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35021: LD_INT 0
35023: PPUSH
35024: PPUSH
35025: PPUSH
// result := [ ] ;
35026: LD_ADDR_VAR 0 4
35030: PUSH
35031: EMPTY
35032: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35033: LD_ADDR_VAR 0 5
35037: PUSH
35038: LD_VAR 0 2
35042: PPUSH
35043: LD_INT 21
35045: PUSH
35046: LD_INT 3
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PPUSH
35053: CALL_OW 70
35057: ST_TO_ADDR
// if not tmp then
35058: LD_VAR 0 5
35062: NOT
35063: IFFALSE 35067
// exit ;
35065: GO 35131
// if checkLink then
35067: LD_VAR 0 3
35071: IFFALSE 35121
// begin for i in tmp do
35073: LD_ADDR_VAR 0 6
35077: PUSH
35078: LD_VAR 0 5
35082: PUSH
35083: FOR_IN
35084: IFFALSE 35119
// if GetBase ( i ) <> base then
35086: LD_VAR 0 6
35090: PPUSH
35091: CALL_OW 274
35095: PUSH
35096: LD_VAR 0 1
35100: NONEQUAL
35101: IFFALSE 35117
// ComLinkToBase ( base , i ) ;
35103: LD_VAR 0 1
35107: PPUSH
35108: LD_VAR 0 6
35112: PPUSH
35113: CALL_OW 169
35117: GO 35083
35119: POP
35120: POP
// end ; result := tmp ;
35121: LD_ADDR_VAR 0 4
35125: PUSH
35126: LD_VAR 0 5
35130: ST_TO_ADDR
// end ;
35131: LD_VAR 0 4
35135: RET
// export function ComComplete ( units , b ) ; var i ; begin
35136: LD_INT 0
35138: PPUSH
35139: PPUSH
// if not units then
35140: LD_VAR 0 1
35144: NOT
35145: IFFALSE 35149
// exit ;
35147: GO 35239
// for i in units do
35149: LD_ADDR_VAR 0 4
35153: PUSH
35154: LD_VAR 0 1
35158: PUSH
35159: FOR_IN
35160: IFFALSE 35237
// if BuildingStatus ( b ) = bs_build then
35162: LD_VAR 0 2
35166: PPUSH
35167: CALL_OW 461
35171: PUSH
35172: LD_INT 1
35174: EQUAL
35175: IFFALSE 35235
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35177: LD_VAR 0 4
35181: PPUSH
35182: LD_STRING h
35184: PUSH
35185: LD_VAR 0 2
35189: PPUSH
35190: CALL_OW 250
35194: PUSH
35195: LD_VAR 0 2
35199: PPUSH
35200: CALL_OW 251
35204: PUSH
35205: LD_VAR 0 2
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: PUSH
35228: EMPTY
35229: LIST
35230: PPUSH
35231: CALL_OW 446
35235: GO 35159
35237: POP
35238: POP
// end ;
35239: LD_VAR 0 3
35243: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35244: LD_INT 0
35246: PPUSH
35247: PPUSH
35248: PPUSH
35249: PPUSH
35250: PPUSH
35251: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35252: LD_VAR 0 1
35256: NOT
35257: PUSH
35258: LD_VAR 0 1
35262: PPUSH
35263: CALL_OW 263
35267: PUSH
35268: LD_INT 2
35270: NONEQUAL
35271: OR
35272: IFFALSE 35276
// exit ;
35274: GO 35592
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35276: LD_ADDR_VAR 0 6
35280: PUSH
35281: LD_INT 22
35283: PUSH
35284: LD_VAR 0 1
35288: PPUSH
35289: CALL_OW 255
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 2
35300: PUSH
35301: LD_INT 30
35303: PUSH
35304: LD_INT 36
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 34
35313: PUSH
35314: LD_INT 31
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: LIST
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PPUSH
35330: CALL_OW 69
35334: ST_TO_ADDR
// if not tmp then
35335: LD_VAR 0 6
35339: NOT
35340: IFFALSE 35344
// exit ;
35342: GO 35592
// result := [ ] ;
35344: LD_ADDR_VAR 0 2
35348: PUSH
35349: EMPTY
35350: ST_TO_ADDR
// for i in tmp do
35351: LD_ADDR_VAR 0 3
35355: PUSH
35356: LD_VAR 0 6
35360: PUSH
35361: FOR_IN
35362: IFFALSE 35433
// begin t := UnitsInside ( i ) ;
35364: LD_ADDR_VAR 0 4
35368: PUSH
35369: LD_VAR 0 3
35373: PPUSH
35374: CALL_OW 313
35378: ST_TO_ADDR
// if t then
35379: LD_VAR 0 4
35383: IFFALSE 35431
// for j in t do
35385: LD_ADDR_VAR 0 7
35389: PUSH
35390: LD_VAR 0 4
35394: PUSH
35395: FOR_IN
35396: IFFALSE 35429
// result := Replace ( result , result + 1 , j ) ;
35398: LD_ADDR_VAR 0 2
35402: PUSH
35403: LD_VAR 0 2
35407: PPUSH
35408: LD_VAR 0 2
35412: PUSH
35413: LD_INT 1
35415: PLUS
35416: PPUSH
35417: LD_VAR 0 7
35421: PPUSH
35422: CALL_OW 1
35426: ST_TO_ADDR
35427: GO 35395
35429: POP
35430: POP
// end ;
35431: GO 35361
35433: POP
35434: POP
// if not result then
35435: LD_VAR 0 2
35439: NOT
35440: IFFALSE 35444
// exit ;
35442: GO 35592
// mech := result [ 1 ] ;
35444: LD_ADDR_VAR 0 5
35448: PUSH
35449: LD_VAR 0 2
35453: PUSH
35454: LD_INT 1
35456: ARRAY
35457: ST_TO_ADDR
// if result > 1 then
35458: LD_VAR 0 2
35462: PUSH
35463: LD_INT 1
35465: GREATER
35466: IFFALSE 35578
// begin for i = 2 to result do
35468: LD_ADDR_VAR 0 3
35472: PUSH
35473: DOUBLE
35474: LD_INT 2
35476: DEC
35477: ST_TO_ADDR
35478: LD_VAR 0 2
35482: PUSH
35483: FOR_TO
35484: IFFALSE 35576
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35486: LD_ADDR_VAR 0 4
35490: PUSH
35491: LD_VAR 0 2
35495: PUSH
35496: LD_VAR 0 3
35500: ARRAY
35501: PPUSH
35502: LD_INT 3
35504: PPUSH
35505: CALL_OW 259
35509: PUSH
35510: LD_VAR 0 2
35514: PUSH
35515: LD_VAR 0 3
35519: ARRAY
35520: PPUSH
35521: CALL_OW 432
35525: MINUS
35526: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35527: LD_VAR 0 4
35531: PUSH
35532: LD_VAR 0 5
35536: PPUSH
35537: LD_INT 3
35539: PPUSH
35540: CALL_OW 259
35544: PUSH
35545: LD_VAR 0 5
35549: PPUSH
35550: CALL_OW 432
35554: MINUS
35555: GREATEREQUAL
35556: IFFALSE 35574
// mech := result [ i ] ;
35558: LD_ADDR_VAR 0 5
35562: PUSH
35563: LD_VAR 0 2
35567: PUSH
35568: LD_VAR 0 3
35572: ARRAY
35573: ST_TO_ADDR
// end ;
35574: GO 35483
35576: POP
35577: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35578: LD_VAR 0 1
35582: PPUSH
35583: LD_VAR 0 5
35587: PPUSH
35588: CALL_OW 135
// end ;
35592: LD_VAR 0 2
35596: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35597: LD_INT 0
35599: PPUSH
35600: PPUSH
35601: PPUSH
35602: PPUSH
35603: PPUSH
35604: PPUSH
35605: PPUSH
35606: PPUSH
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
35611: PPUSH
// result := [ ] ;
35612: LD_ADDR_VAR 0 7
35616: PUSH
35617: EMPTY
35618: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35619: LD_VAR 0 1
35623: PPUSH
35624: CALL_OW 266
35628: PUSH
35629: LD_INT 0
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: IN
35639: NOT
35640: IFFALSE 35644
// exit ;
35642: GO 37278
// if name then
35644: LD_VAR 0 3
35648: IFFALSE 35664
// SetBName ( base_dep , name ) ;
35650: LD_VAR 0 1
35654: PPUSH
35655: LD_VAR 0 3
35659: PPUSH
35660: CALL_OW 500
// base := GetBase ( base_dep ) ;
35664: LD_ADDR_VAR 0 15
35668: PUSH
35669: LD_VAR 0 1
35673: PPUSH
35674: CALL_OW 274
35678: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35679: LD_ADDR_VAR 0 16
35683: PUSH
35684: LD_VAR 0 1
35688: PPUSH
35689: CALL_OW 255
35693: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35694: LD_ADDR_VAR 0 17
35698: PUSH
35699: LD_VAR 0 1
35703: PPUSH
35704: CALL_OW 248
35708: ST_TO_ADDR
// if sources then
35709: LD_VAR 0 5
35713: IFFALSE 35760
// for i = 1 to 3 do
35715: LD_ADDR_VAR 0 8
35719: PUSH
35720: DOUBLE
35721: LD_INT 1
35723: DEC
35724: ST_TO_ADDR
35725: LD_INT 3
35727: PUSH
35728: FOR_TO
35729: IFFALSE 35758
// AddResourceType ( base , i , sources [ i ] ) ;
35731: LD_VAR 0 15
35735: PPUSH
35736: LD_VAR 0 8
35740: PPUSH
35741: LD_VAR 0 5
35745: PUSH
35746: LD_VAR 0 8
35750: ARRAY
35751: PPUSH
35752: CALL_OW 276
35756: GO 35728
35758: POP
35759: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35760: LD_ADDR_VAR 0 18
35764: PUSH
35765: LD_VAR 0 15
35769: PPUSH
35770: LD_VAR 0 2
35774: PPUSH
35775: LD_INT 1
35777: PPUSH
35778: CALL 35021 0 3
35782: ST_TO_ADDR
// InitHc ;
35783: CALL_OW 19
// InitUc ;
35787: CALL_OW 18
// uc_side := side ;
35791: LD_ADDR_OWVAR 20
35795: PUSH
35796: LD_VAR 0 16
35800: ST_TO_ADDR
// uc_nation := nation ;
35801: LD_ADDR_OWVAR 21
35805: PUSH
35806: LD_VAR 0 17
35810: ST_TO_ADDR
// if buildings then
35811: LD_VAR 0 18
35815: IFFALSE 37137
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35817: LD_ADDR_VAR 0 19
35821: PUSH
35822: LD_VAR 0 18
35826: PPUSH
35827: LD_INT 2
35829: PUSH
35830: LD_INT 30
35832: PUSH
35833: LD_INT 29
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 30
35842: PUSH
35843: LD_INT 30
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: LIST
35854: PPUSH
35855: CALL_OW 72
35859: ST_TO_ADDR
// if tmp then
35860: LD_VAR 0 19
35864: IFFALSE 35912
// for i in tmp do
35866: LD_ADDR_VAR 0 8
35870: PUSH
35871: LD_VAR 0 19
35875: PUSH
35876: FOR_IN
35877: IFFALSE 35910
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35879: LD_VAR 0 8
35883: PPUSH
35884: CALL_OW 250
35888: PPUSH
35889: LD_VAR 0 8
35893: PPUSH
35894: CALL_OW 251
35898: PPUSH
35899: LD_VAR 0 16
35903: PPUSH
35904: CALL_OW 441
35908: GO 35876
35910: POP
35911: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35912: LD_VAR 0 18
35916: PPUSH
35917: LD_INT 2
35919: PUSH
35920: LD_INT 30
35922: PUSH
35923: LD_INT 32
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 30
35932: PUSH
35933: LD_INT 33
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: PPUSH
35945: CALL_OW 72
35949: IFFALSE 36037
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35951: LD_ADDR_VAR 0 8
35955: PUSH
35956: LD_VAR 0 18
35960: PPUSH
35961: LD_INT 2
35963: PUSH
35964: LD_INT 30
35966: PUSH
35967: LD_INT 32
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 30
35976: PUSH
35977: LD_INT 33
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: PPUSH
35989: CALL_OW 72
35993: PUSH
35994: FOR_IN
35995: IFFALSE 36035
// begin if not GetBWeapon ( i ) then
35997: LD_VAR 0 8
36001: PPUSH
36002: CALL_OW 269
36006: NOT
36007: IFFALSE 36033
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36009: LD_VAR 0 8
36013: PPUSH
36014: LD_VAR 0 8
36018: PPUSH
36019: LD_VAR 0 2
36023: PPUSH
36024: CALL 37283 0 2
36028: PPUSH
36029: CALL_OW 431
// end ;
36033: GO 35994
36035: POP
36036: POP
// end ; for i = 1 to personel do
36037: LD_ADDR_VAR 0 8
36041: PUSH
36042: DOUBLE
36043: LD_INT 1
36045: DEC
36046: ST_TO_ADDR
36047: LD_VAR 0 6
36051: PUSH
36052: FOR_TO
36053: IFFALSE 37117
// begin if i > 4 then
36055: LD_VAR 0 8
36059: PUSH
36060: LD_INT 4
36062: GREATER
36063: IFFALSE 36067
// break ;
36065: GO 37117
// case i of 1 :
36067: LD_VAR 0 8
36071: PUSH
36072: LD_INT 1
36074: DOUBLE
36075: EQUAL
36076: IFTRUE 36080
36078: GO 36160
36080: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36081: LD_ADDR_VAR 0 12
36085: PUSH
36086: LD_VAR 0 18
36090: PPUSH
36091: LD_INT 22
36093: PUSH
36094: LD_VAR 0 16
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 58
36105: PUSH
36106: EMPTY
36107: LIST
36108: PUSH
36109: LD_INT 2
36111: PUSH
36112: LD_INT 30
36114: PUSH
36115: LD_INT 32
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 30
36124: PUSH
36125: LD_INT 4
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 30
36134: PUSH
36135: LD_INT 5
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: LIST
36152: PPUSH
36153: CALL_OW 72
36157: ST_TO_ADDR
36158: GO 36382
36160: LD_INT 2
36162: DOUBLE
36163: EQUAL
36164: IFTRUE 36168
36166: GO 36230
36168: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36169: LD_ADDR_VAR 0 12
36173: PUSH
36174: LD_VAR 0 18
36178: PPUSH
36179: LD_INT 22
36181: PUSH
36182: LD_VAR 0 16
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 2
36193: PUSH
36194: LD_INT 30
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 30
36206: PUSH
36207: LD_INT 1
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: LIST
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PPUSH
36223: CALL_OW 72
36227: ST_TO_ADDR
36228: GO 36382
36230: LD_INT 3
36232: DOUBLE
36233: EQUAL
36234: IFTRUE 36238
36236: GO 36300
36238: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36239: LD_ADDR_VAR 0 12
36243: PUSH
36244: LD_VAR 0 18
36248: PPUSH
36249: LD_INT 22
36251: PUSH
36252: LD_VAR 0 16
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 2
36263: PUSH
36264: LD_INT 30
36266: PUSH
36267: LD_INT 2
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 30
36276: PUSH
36277: LD_INT 3
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PPUSH
36293: CALL_OW 72
36297: ST_TO_ADDR
36298: GO 36382
36300: LD_INT 4
36302: DOUBLE
36303: EQUAL
36304: IFTRUE 36308
36306: GO 36381
36308: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36309: LD_ADDR_VAR 0 12
36313: PUSH
36314: LD_VAR 0 18
36318: PPUSH
36319: LD_INT 22
36321: PUSH
36322: LD_VAR 0 16
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 2
36333: PUSH
36334: LD_INT 30
36336: PUSH
36337: LD_INT 6
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 30
36346: PUSH
36347: LD_INT 7
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 30
36356: PUSH
36357: LD_INT 8
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PPUSH
36374: CALL_OW 72
36378: ST_TO_ADDR
36379: GO 36382
36381: POP
// if i = 1 then
36382: LD_VAR 0 8
36386: PUSH
36387: LD_INT 1
36389: EQUAL
36390: IFFALSE 36501
// begin tmp := [ ] ;
36392: LD_ADDR_VAR 0 19
36396: PUSH
36397: EMPTY
36398: ST_TO_ADDR
// for j in f do
36399: LD_ADDR_VAR 0 9
36403: PUSH
36404: LD_VAR 0 12
36408: PUSH
36409: FOR_IN
36410: IFFALSE 36483
// if GetBType ( j ) = b_bunker then
36412: LD_VAR 0 9
36416: PPUSH
36417: CALL_OW 266
36421: PUSH
36422: LD_INT 32
36424: EQUAL
36425: IFFALSE 36452
// tmp := Insert ( tmp , 1 , j ) else
36427: LD_ADDR_VAR 0 19
36431: PUSH
36432: LD_VAR 0 19
36436: PPUSH
36437: LD_INT 1
36439: PPUSH
36440: LD_VAR 0 9
36444: PPUSH
36445: CALL_OW 2
36449: ST_TO_ADDR
36450: GO 36481
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36452: LD_ADDR_VAR 0 19
36456: PUSH
36457: LD_VAR 0 19
36461: PPUSH
36462: LD_VAR 0 19
36466: PUSH
36467: LD_INT 1
36469: PLUS
36470: PPUSH
36471: LD_VAR 0 9
36475: PPUSH
36476: CALL_OW 2
36480: ST_TO_ADDR
36481: GO 36409
36483: POP
36484: POP
// if tmp then
36485: LD_VAR 0 19
36489: IFFALSE 36501
// f := tmp ;
36491: LD_ADDR_VAR 0 12
36495: PUSH
36496: LD_VAR 0 19
36500: ST_TO_ADDR
// end ; x := personel [ i ] ;
36501: LD_ADDR_VAR 0 13
36505: PUSH
36506: LD_VAR 0 6
36510: PUSH
36511: LD_VAR 0 8
36515: ARRAY
36516: ST_TO_ADDR
// if x = - 1 then
36517: LD_VAR 0 13
36521: PUSH
36522: LD_INT 1
36524: NEG
36525: EQUAL
36526: IFFALSE 36735
// begin for j in f do
36528: LD_ADDR_VAR 0 9
36532: PUSH
36533: LD_VAR 0 12
36537: PUSH
36538: FOR_IN
36539: IFFALSE 36731
// repeat InitHc ;
36541: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36545: LD_VAR 0 9
36549: PPUSH
36550: CALL_OW 266
36554: PUSH
36555: LD_INT 5
36557: EQUAL
36558: IFFALSE 36628
// begin if UnitsInside ( j ) < 3 then
36560: LD_VAR 0 9
36564: PPUSH
36565: CALL_OW 313
36569: PUSH
36570: LD_INT 3
36572: LESS
36573: IFFALSE 36609
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36575: LD_INT 0
36577: PPUSH
36578: LD_INT 5
36580: PUSH
36581: LD_INT 8
36583: PUSH
36584: LD_INT 9
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: LIST
36591: PUSH
36592: LD_VAR 0 17
36596: ARRAY
36597: PPUSH
36598: LD_VAR 0 4
36602: PPUSH
36603: CALL_OW 380
36607: GO 36626
// PrepareHuman ( false , i , skill ) ;
36609: LD_INT 0
36611: PPUSH
36612: LD_VAR 0 8
36616: PPUSH
36617: LD_VAR 0 4
36621: PPUSH
36622: CALL_OW 380
// end else
36626: GO 36645
// PrepareHuman ( false , i , skill ) ;
36628: LD_INT 0
36630: PPUSH
36631: LD_VAR 0 8
36635: PPUSH
36636: LD_VAR 0 4
36640: PPUSH
36641: CALL_OW 380
// un := CreateHuman ;
36645: LD_ADDR_VAR 0 14
36649: PUSH
36650: CALL_OW 44
36654: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36655: LD_ADDR_VAR 0 7
36659: PUSH
36660: LD_VAR 0 7
36664: PPUSH
36665: LD_INT 1
36667: PPUSH
36668: LD_VAR 0 14
36672: PPUSH
36673: CALL_OW 2
36677: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36678: LD_VAR 0 14
36682: PPUSH
36683: LD_VAR 0 9
36687: PPUSH
36688: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36692: LD_VAR 0 9
36696: PPUSH
36697: CALL_OW 313
36701: PUSH
36702: LD_INT 6
36704: EQUAL
36705: PUSH
36706: LD_VAR 0 9
36710: PPUSH
36711: CALL_OW 266
36715: PUSH
36716: LD_INT 32
36718: PUSH
36719: LD_INT 31
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: IN
36726: OR
36727: IFFALSE 36541
36729: GO 36538
36731: POP
36732: POP
// end else
36733: GO 37115
// for j = 1 to x do
36735: LD_ADDR_VAR 0 9
36739: PUSH
36740: DOUBLE
36741: LD_INT 1
36743: DEC
36744: ST_TO_ADDR
36745: LD_VAR 0 13
36749: PUSH
36750: FOR_TO
36751: IFFALSE 37113
// begin InitHc ;
36753: CALL_OW 19
// if not f then
36757: LD_VAR 0 12
36761: NOT
36762: IFFALSE 36851
// begin PrepareHuman ( false , i , skill ) ;
36764: LD_INT 0
36766: PPUSH
36767: LD_VAR 0 8
36771: PPUSH
36772: LD_VAR 0 4
36776: PPUSH
36777: CALL_OW 380
// un := CreateHuman ;
36781: LD_ADDR_VAR 0 14
36785: PUSH
36786: CALL_OW 44
36790: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36791: LD_ADDR_VAR 0 7
36795: PUSH
36796: LD_VAR 0 7
36800: PPUSH
36801: LD_INT 1
36803: PPUSH
36804: LD_VAR 0 14
36808: PPUSH
36809: CALL_OW 2
36813: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36814: LD_VAR 0 14
36818: PPUSH
36819: LD_VAR 0 1
36823: PPUSH
36824: CALL_OW 250
36828: PPUSH
36829: LD_VAR 0 1
36833: PPUSH
36834: CALL_OW 251
36838: PPUSH
36839: LD_INT 10
36841: PPUSH
36842: LD_INT 0
36844: PPUSH
36845: CALL_OW 50
// continue ;
36849: GO 36750
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36851: LD_VAR 0 12
36855: PUSH
36856: LD_INT 1
36858: ARRAY
36859: PPUSH
36860: CALL_OW 313
36864: PUSH
36865: LD_VAR 0 12
36869: PUSH
36870: LD_INT 1
36872: ARRAY
36873: PPUSH
36874: CALL_OW 266
36878: PUSH
36879: LD_INT 32
36881: PUSH
36882: LD_INT 31
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: IN
36889: AND
36890: PUSH
36891: LD_VAR 0 12
36895: PUSH
36896: LD_INT 1
36898: ARRAY
36899: PPUSH
36900: CALL_OW 313
36904: PUSH
36905: LD_INT 6
36907: EQUAL
36908: OR
36909: IFFALSE 36929
// f := Delete ( f , 1 ) ;
36911: LD_ADDR_VAR 0 12
36915: PUSH
36916: LD_VAR 0 12
36920: PPUSH
36921: LD_INT 1
36923: PPUSH
36924: CALL_OW 3
36928: ST_TO_ADDR
// if not f then
36929: LD_VAR 0 12
36933: NOT
36934: IFFALSE 36952
// begin x := x + 2 ;
36936: LD_ADDR_VAR 0 13
36940: PUSH
36941: LD_VAR 0 13
36945: PUSH
36946: LD_INT 2
36948: PLUS
36949: ST_TO_ADDR
// continue ;
36950: GO 36750
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36952: LD_VAR 0 12
36956: PUSH
36957: LD_INT 1
36959: ARRAY
36960: PPUSH
36961: CALL_OW 266
36965: PUSH
36966: LD_INT 5
36968: EQUAL
36969: IFFALSE 37043
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36971: LD_VAR 0 12
36975: PUSH
36976: LD_INT 1
36978: ARRAY
36979: PPUSH
36980: CALL_OW 313
36984: PUSH
36985: LD_INT 3
36987: LESS
36988: IFFALSE 37024
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36990: LD_INT 0
36992: PPUSH
36993: LD_INT 5
36995: PUSH
36996: LD_INT 8
36998: PUSH
36999: LD_INT 9
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: PUSH
37007: LD_VAR 0 17
37011: ARRAY
37012: PPUSH
37013: LD_VAR 0 4
37017: PPUSH
37018: CALL_OW 380
37022: GO 37041
// PrepareHuman ( false , i , skill ) ;
37024: LD_INT 0
37026: PPUSH
37027: LD_VAR 0 8
37031: PPUSH
37032: LD_VAR 0 4
37036: PPUSH
37037: CALL_OW 380
// end else
37041: GO 37060
// PrepareHuman ( false , i , skill ) ;
37043: LD_INT 0
37045: PPUSH
37046: LD_VAR 0 8
37050: PPUSH
37051: LD_VAR 0 4
37055: PPUSH
37056: CALL_OW 380
// un := CreateHuman ;
37060: LD_ADDR_VAR 0 14
37064: PUSH
37065: CALL_OW 44
37069: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37070: LD_ADDR_VAR 0 7
37074: PUSH
37075: LD_VAR 0 7
37079: PPUSH
37080: LD_INT 1
37082: PPUSH
37083: LD_VAR 0 14
37087: PPUSH
37088: CALL_OW 2
37092: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37093: LD_VAR 0 14
37097: PPUSH
37098: LD_VAR 0 12
37102: PUSH
37103: LD_INT 1
37105: ARRAY
37106: PPUSH
37107: CALL_OW 52
// end ;
37111: GO 36750
37113: POP
37114: POP
// end ;
37115: GO 36052
37117: POP
37118: POP
// result := result ^ buildings ;
37119: LD_ADDR_VAR 0 7
37123: PUSH
37124: LD_VAR 0 7
37128: PUSH
37129: LD_VAR 0 18
37133: ADD
37134: ST_TO_ADDR
// end else
37135: GO 37278
// begin for i = 1 to personel do
37137: LD_ADDR_VAR 0 8
37141: PUSH
37142: DOUBLE
37143: LD_INT 1
37145: DEC
37146: ST_TO_ADDR
37147: LD_VAR 0 6
37151: PUSH
37152: FOR_TO
37153: IFFALSE 37276
// begin if i > 4 then
37155: LD_VAR 0 8
37159: PUSH
37160: LD_INT 4
37162: GREATER
37163: IFFALSE 37167
// break ;
37165: GO 37276
// x := personel [ i ] ;
37167: LD_ADDR_VAR 0 13
37171: PUSH
37172: LD_VAR 0 6
37176: PUSH
37177: LD_VAR 0 8
37181: ARRAY
37182: ST_TO_ADDR
// if x = - 1 then
37183: LD_VAR 0 13
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: EQUAL
37192: IFFALSE 37196
// continue ;
37194: GO 37152
// PrepareHuman ( false , i , skill ) ;
37196: LD_INT 0
37198: PPUSH
37199: LD_VAR 0 8
37203: PPUSH
37204: LD_VAR 0 4
37208: PPUSH
37209: CALL_OW 380
// un := CreateHuman ;
37213: LD_ADDR_VAR 0 14
37217: PUSH
37218: CALL_OW 44
37222: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37223: LD_VAR 0 14
37227: PPUSH
37228: LD_VAR 0 1
37232: PPUSH
37233: CALL_OW 250
37237: PPUSH
37238: LD_VAR 0 1
37242: PPUSH
37243: CALL_OW 251
37247: PPUSH
37248: LD_INT 10
37250: PPUSH
37251: LD_INT 0
37253: PPUSH
37254: CALL_OW 50
// result := result ^ un ;
37258: LD_ADDR_VAR 0 7
37262: PUSH
37263: LD_VAR 0 7
37267: PUSH
37268: LD_VAR 0 14
37272: ADD
37273: ST_TO_ADDR
// end ;
37274: GO 37152
37276: POP
37277: POP
// end ; end ;
37278: LD_VAR 0 7
37282: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37283: LD_INT 0
37285: PPUSH
37286: PPUSH
37287: PPUSH
37288: PPUSH
37289: PPUSH
37290: PPUSH
37291: PPUSH
37292: PPUSH
37293: PPUSH
37294: PPUSH
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
37300: PPUSH
// result := false ;
37301: LD_ADDR_VAR 0 3
37305: PUSH
37306: LD_INT 0
37308: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37309: LD_VAR 0 1
37313: NOT
37314: PUSH
37315: LD_VAR 0 1
37319: PPUSH
37320: CALL_OW 266
37324: PUSH
37325: LD_INT 32
37327: PUSH
37328: LD_INT 33
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: IN
37335: NOT
37336: OR
37337: IFFALSE 37341
// exit ;
37339: GO 38450
// nat := GetNation ( tower ) ;
37341: LD_ADDR_VAR 0 12
37345: PUSH
37346: LD_VAR 0 1
37350: PPUSH
37351: CALL_OW 248
37355: ST_TO_ADDR
// side := GetSide ( tower ) ;
37356: LD_ADDR_VAR 0 16
37360: PUSH
37361: LD_VAR 0 1
37365: PPUSH
37366: CALL_OW 255
37370: ST_TO_ADDR
// x := GetX ( tower ) ;
37371: LD_ADDR_VAR 0 10
37375: PUSH
37376: LD_VAR 0 1
37380: PPUSH
37381: CALL_OW 250
37385: ST_TO_ADDR
// y := GetY ( tower ) ;
37386: LD_ADDR_VAR 0 11
37390: PUSH
37391: LD_VAR 0 1
37395: PPUSH
37396: CALL_OW 251
37400: ST_TO_ADDR
// if not x or not y then
37401: LD_VAR 0 10
37405: NOT
37406: PUSH
37407: LD_VAR 0 11
37411: NOT
37412: OR
37413: IFFALSE 37417
// exit ;
37415: GO 38450
// weapon := 0 ;
37417: LD_ADDR_VAR 0 18
37421: PUSH
37422: LD_INT 0
37424: ST_TO_ADDR
// fac_list := [ ] ;
37425: LD_ADDR_VAR 0 17
37429: PUSH
37430: EMPTY
37431: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37432: LD_ADDR_VAR 0 6
37436: PUSH
37437: LD_VAR 0 1
37441: PPUSH
37442: CALL_OW 274
37446: PPUSH
37447: LD_VAR 0 2
37451: PPUSH
37452: LD_INT 0
37454: PPUSH
37455: CALL 35021 0 3
37459: PPUSH
37460: LD_INT 30
37462: PUSH
37463: LD_INT 3
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PPUSH
37470: CALL_OW 72
37474: ST_TO_ADDR
// if not factories then
37475: LD_VAR 0 6
37479: NOT
37480: IFFALSE 37484
// exit ;
37482: GO 38450
// for i in factories do
37484: LD_ADDR_VAR 0 8
37488: PUSH
37489: LD_VAR 0 6
37493: PUSH
37494: FOR_IN
37495: IFFALSE 37520
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37497: LD_ADDR_VAR 0 17
37501: PUSH
37502: LD_VAR 0 17
37506: PUSH
37507: LD_VAR 0 8
37511: PPUSH
37512: CALL_OW 478
37516: UNION
37517: ST_TO_ADDR
37518: GO 37494
37520: POP
37521: POP
// if not fac_list then
37522: LD_VAR 0 17
37526: NOT
37527: IFFALSE 37531
// exit ;
37529: GO 38450
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37531: LD_ADDR_VAR 0 5
37535: PUSH
37536: LD_INT 4
37538: PUSH
37539: LD_INT 5
37541: PUSH
37542: LD_INT 9
37544: PUSH
37545: LD_INT 10
37547: PUSH
37548: LD_INT 6
37550: PUSH
37551: LD_INT 7
37553: PUSH
37554: LD_INT 11
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 27
37568: PUSH
37569: LD_INT 28
37571: PUSH
37572: LD_INT 26
37574: PUSH
37575: LD_INT 30
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 43
37586: PUSH
37587: LD_INT 44
37589: PUSH
37590: LD_INT 46
37592: PUSH
37593: LD_INT 45
37595: PUSH
37596: LD_INT 47
37598: PUSH
37599: LD_INT 49
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: LIST
37614: PUSH
37615: LD_VAR 0 12
37619: ARRAY
37620: ST_TO_ADDR
// list := list isect fac_list ;
37621: LD_ADDR_VAR 0 5
37625: PUSH
37626: LD_VAR 0 5
37630: PUSH
37631: LD_VAR 0 17
37635: ISECT
37636: ST_TO_ADDR
// if not list then
37637: LD_VAR 0 5
37641: NOT
37642: IFFALSE 37646
// exit ;
37644: GO 38450
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37646: LD_VAR 0 12
37650: PUSH
37651: LD_INT 3
37653: EQUAL
37654: PUSH
37655: LD_INT 49
37657: PUSH
37658: LD_VAR 0 5
37662: IN
37663: AND
37664: PUSH
37665: LD_INT 31
37667: PPUSH
37668: LD_VAR 0 16
37672: PPUSH
37673: CALL_OW 321
37677: PUSH
37678: LD_INT 2
37680: EQUAL
37681: AND
37682: IFFALSE 37742
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37684: LD_INT 22
37686: PUSH
37687: LD_VAR 0 16
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 35
37698: PUSH
37699: LD_INT 49
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 91
37708: PUSH
37709: LD_VAR 0 1
37713: PUSH
37714: LD_INT 10
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: LIST
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: LIST
37726: PPUSH
37727: CALL_OW 69
37731: NOT
37732: IFFALSE 37742
// weapon := ru_time_lapser ;
37734: LD_ADDR_VAR 0 18
37738: PUSH
37739: LD_INT 49
37741: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37742: LD_VAR 0 12
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: IN
37757: PUSH
37758: LD_INT 11
37760: PUSH
37761: LD_VAR 0 5
37765: IN
37766: PUSH
37767: LD_INT 30
37769: PUSH
37770: LD_VAR 0 5
37774: IN
37775: OR
37776: AND
37777: PUSH
37778: LD_INT 6
37780: PPUSH
37781: LD_VAR 0 16
37785: PPUSH
37786: CALL_OW 321
37790: PUSH
37791: LD_INT 2
37793: EQUAL
37794: AND
37795: IFFALSE 37960
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37797: LD_INT 22
37799: PUSH
37800: LD_VAR 0 16
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 35
37814: PUSH
37815: LD_INT 11
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 35
37824: PUSH
37825: LD_INT 30
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 91
37839: PUSH
37840: LD_VAR 0 1
37844: PUSH
37845: LD_INT 18
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: LIST
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: LIST
37857: PPUSH
37858: CALL_OW 69
37862: NOT
37863: PUSH
37864: LD_INT 22
37866: PUSH
37867: LD_VAR 0 16
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 2
37878: PUSH
37879: LD_INT 30
37881: PUSH
37882: LD_INT 32
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 30
37891: PUSH
37892: LD_INT 33
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 91
37906: PUSH
37907: LD_VAR 0 1
37911: PUSH
37912: LD_INT 12
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: LIST
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: LIST
37924: PUSH
37925: EMPTY
37926: LIST
37927: PPUSH
37928: CALL_OW 69
37932: PUSH
37933: LD_INT 2
37935: GREATER
37936: AND
37937: IFFALSE 37960
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37939: LD_ADDR_VAR 0 18
37943: PUSH
37944: LD_INT 11
37946: PUSH
37947: LD_INT 30
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_VAR 0 12
37958: ARRAY
37959: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37960: LD_VAR 0 18
37964: NOT
37965: PUSH
37966: LD_INT 40
37968: PPUSH
37969: LD_VAR 0 16
37973: PPUSH
37974: CALL_OW 321
37978: PUSH
37979: LD_INT 2
37981: EQUAL
37982: AND
37983: PUSH
37984: LD_INT 7
37986: PUSH
37987: LD_VAR 0 5
37991: IN
37992: PUSH
37993: LD_INT 28
37995: PUSH
37996: LD_VAR 0 5
38000: IN
38001: OR
38002: PUSH
38003: LD_INT 45
38005: PUSH
38006: LD_VAR 0 5
38010: IN
38011: OR
38012: AND
38013: IFFALSE 38267
// begin hex := GetHexInfo ( x , y ) ;
38015: LD_ADDR_VAR 0 4
38019: PUSH
38020: LD_VAR 0 10
38024: PPUSH
38025: LD_VAR 0 11
38029: PPUSH
38030: CALL_OW 546
38034: ST_TO_ADDR
// if hex [ 1 ] then
38035: LD_VAR 0 4
38039: PUSH
38040: LD_INT 1
38042: ARRAY
38043: IFFALSE 38047
// exit ;
38045: GO 38450
// height := hex [ 2 ] ;
38047: LD_ADDR_VAR 0 15
38051: PUSH
38052: LD_VAR 0 4
38056: PUSH
38057: LD_INT 2
38059: ARRAY
38060: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38061: LD_ADDR_VAR 0 14
38065: PUSH
38066: LD_INT 0
38068: PUSH
38069: LD_INT 2
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: LD_INT 5
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: ST_TO_ADDR
// for i in tmp do
38084: LD_ADDR_VAR 0 8
38088: PUSH
38089: LD_VAR 0 14
38093: PUSH
38094: FOR_IN
38095: IFFALSE 38265
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38097: LD_ADDR_VAR 0 9
38101: PUSH
38102: LD_VAR 0 10
38106: PPUSH
38107: LD_VAR 0 8
38111: PPUSH
38112: LD_INT 5
38114: PPUSH
38115: CALL_OW 272
38119: PUSH
38120: LD_VAR 0 11
38124: PPUSH
38125: LD_VAR 0 8
38129: PPUSH
38130: LD_INT 5
38132: PPUSH
38133: CALL_OW 273
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38142: LD_VAR 0 9
38146: PUSH
38147: LD_INT 1
38149: ARRAY
38150: PPUSH
38151: LD_VAR 0 9
38155: PUSH
38156: LD_INT 2
38158: ARRAY
38159: PPUSH
38160: CALL_OW 488
38164: IFFALSE 38263
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38166: LD_ADDR_VAR 0 4
38170: PUSH
38171: LD_VAR 0 9
38175: PUSH
38176: LD_INT 1
38178: ARRAY
38179: PPUSH
38180: LD_VAR 0 9
38184: PUSH
38185: LD_INT 2
38187: ARRAY
38188: PPUSH
38189: CALL_OW 546
38193: ST_TO_ADDR
// if hex [ 1 ] then
38194: LD_VAR 0 4
38198: PUSH
38199: LD_INT 1
38201: ARRAY
38202: IFFALSE 38206
// continue ;
38204: GO 38094
// h := hex [ 2 ] ;
38206: LD_ADDR_VAR 0 13
38210: PUSH
38211: LD_VAR 0 4
38215: PUSH
38216: LD_INT 2
38218: ARRAY
38219: ST_TO_ADDR
// if h + 7 < height then
38220: LD_VAR 0 13
38224: PUSH
38225: LD_INT 7
38227: PLUS
38228: PUSH
38229: LD_VAR 0 15
38233: LESS
38234: IFFALSE 38263
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38236: LD_ADDR_VAR 0 18
38240: PUSH
38241: LD_INT 7
38243: PUSH
38244: LD_INT 28
38246: PUSH
38247: LD_INT 45
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: LIST
38254: PUSH
38255: LD_VAR 0 12
38259: ARRAY
38260: ST_TO_ADDR
// break ;
38261: GO 38265
// end ; end ; end ;
38263: GO 38094
38265: POP
38266: POP
// end ; if not weapon then
38267: LD_VAR 0 18
38271: NOT
38272: IFFALSE 38332
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38274: LD_ADDR_VAR 0 5
38278: PUSH
38279: LD_VAR 0 5
38283: PUSH
38284: LD_INT 11
38286: PUSH
38287: LD_INT 30
38289: PUSH
38290: LD_INT 49
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: LIST
38297: DIFF
38298: ST_TO_ADDR
// if not list then
38299: LD_VAR 0 5
38303: NOT
38304: IFFALSE 38308
// exit ;
38306: GO 38450
// weapon := list [ rand ( 1 , list ) ] ;
38308: LD_ADDR_VAR 0 18
38312: PUSH
38313: LD_VAR 0 5
38317: PUSH
38318: LD_INT 1
38320: PPUSH
38321: LD_VAR 0 5
38325: PPUSH
38326: CALL_OW 12
38330: ARRAY
38331: ST_TO_ADDR
// end ; if weapon then
38332: LD_VAR 0 18
38336: IFFALSE 38450
// begin tmp := CostOfWeapon ( weapon ) ;
38338: LD_ADDR_VAR 0 14
38342: PUSH
38343: LD_VAR 0 18
38347: PPUSH
38348: CALL_OW 451
38352: ST_TO_ADDR
// j := GetBase ( tower ) ;
38353: LD_ADDR_VAR 0 9
38357: PUSH
38358: LD_VAR 0 1
38362: PPUSH
38363: CALL_OW 274
38367: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38368: LD_VAR 0 9
38372: PPUSH
38373: LD_INT 1
38375: PPUSH
38376: CALL_OW 275
38380: PUSH
38381: LD_VAR 0 14
38385: PUSH
38386: LD_INT 1
38388: ARRAY
38389: GREATEREQUAL
38390: PUSH
38391: LD_VAR 0 9
38395: PPUSH
38396: LD_INT 2
38398: PPUSH
38399: CALL_OW 275
38403: PUSH
38404: LD_VAR 0 14
38408: PUSH
38409: LD_INT 2
38411: ARRAY
38412: GREATEREQUAL
38413: AND
38414: PUSH
38415: LD_VAR 0 9
38419: PPUSH
38420: LD_INT 3
38422: PPUSH
38423: CALL_OW 275
38427: PUSH
38428: LD_VAR 0 14
38432: PUSH
38433: LD_INT 3
38435: ARRAY
38436: GREATEREQUAL
38437: AND
38438: IFFALSE 38450
// result := weapon ;
38440: LD_ADDR_VAR 0 3
38444: PUSH
38445: LD_VAR 0 18
38449: ST_TO_ADDR
// end ; end ;
38450: LD_VAR 0 3
38454: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38455: LD_INT 0
38457: PPUSH
38458: PPUSH
// result := true ;
38459: LD_ADDR_VAR 0 3
38463: PUSH
38464: LD_INT 1
38466: ST_TO_ADDR
// if array1 = array2 then
38467: LD_VAR 0 1
38471: PUSH
38472: LD_VAR 0 2
38476: EQUAL
38477: IFFALSE 38537
// begin for i = 1 to array1 do
38479: LD_ADDR_VAR 0 4
38483: PUSH
38484: DOUBLE
38485: LD_INT 1
38487: DEC
38488: ST_TO_ADDR
38489: LD_VAR 0 1
38493: PUSH
38494: FOR_TO
38495: IFFALSE 38533
// if array1 [ i ] <> array2 [ i ] then
38497: LD_VAR 0 1
38501: PUSH
38502: LD_VAR 0 4
38506: ARRAY
38507: PUSH
38508: LD_VAR 0 2
38512: PUSH
38513: LD_VAR 0 4
38517: ARRAY
38518: NONEQUAL
38519: IFFALSE 38531
// begin result := false ;
38521: LD_ADDR_VAR 0 3
38525: PUSH
38526: LD_INT 0
38528: ST_TO_ADDR
// break ;
38529: GO 38533
// end ;
38531: GO 38494
38533: POP
38534: POP
// end else
38535: GO 38545
// result := false ;
38537: LD_ADDR_VAR 0 3
38541: PUSH
38542: LD_INT 0
38544: ST_TO_ADDR
// end ;
38545: LD_VAR 0 3
38549: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38550: LD_INT 0
38552: PPUSH
38553: PPUSH
// if not array1 or not array2 then
38554: LD_VAR 0 1
38558: NOT
38559: PUSH
38560: LD_VAR 0 2
38564: NOT
38565: OR
38566: IFFALSE 38570
// exit ;
38568: GO 38634
// result := true ;
38570: LD_ADDR_VAR 0 3
38574: PUSH
38575: LD_INT 1
38577: ST_TO_ADDR
// for i = 1 to array1 do
38578: LD_ADDR_VAR 0 4
38582: PUSH
38583: DOUBLE
38584: LD_INT 1
38586: DEC
38587: ST_TO_ADDR
38588: LD_VAR 0 1
38592: PUSH
38593: FOR_TO
38594: IFFALSE 38632
// if array1 [ i ] <> array2 [ i ] then
38596: LD_VAR 0 1
38600: PUSH
38601: LD_VAR 0 4
38605: ARRAY
38606: PUSH
38607: LD_VAR 0 2
38611: PUSH
38612: LD_VAR 0 4
38616: ARRAY
38617: NONEQUAL
38618: IFFALSE 38630
// begin result := false ;
38620: LD_ADDR_VAR 0 3
38624: PUSH
38625: LD_INT 0
38627: ST_TO_ADDR
// break ;
38628: GO 38632
// end ;
38630: GO 38593
38632: POP
38633: POP
// end ;
38634: LD_VAR 0 3
38638: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38639: LD_INT 0
38641: PPUSH
38642: PPUSH
38643: PPUSH
// pom := GetBase ( fac ) ;
38644: LD_ADDR_VAR 0 5
38648: PUSH
38649: LD_VAR 0 1
38653: PPUSH
38654: CALL_OW 274
38658: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38659: LD_ADDR_VAR 0 4
38663: PUSH
38664: LD_VAR 0 2
38668: PUSH
38669: LD_INT 1
38671: ARRAY
38672: PPUSH
38673: LD_VAR 0 2
38677: PUSH
38678: LD_INT 2
38680: ARRAY
38681: PPUSH
38682: LD_VAR 0 2
38686: PUSH
38687: LD_INT 3
38689: ARRAY
38690: PPUSH
38691: LD_VAR 0 2
38695: PUSH
38696: LD_INT 4
38698: ARRAY
38699: PPUSH
38700: CALL_OW 449
38704: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38705: LD_ADDR_VAR 0 3
38709: PUSH
38710: LD_VAR 0 5
38714: PPUSH
38715: LD_INT 1
38717: PPUSH
38718: CALL_OW 275
38722: PUSH
38723: LD_VAR 0 4
38727: PUSH
38728: LD_INT 1
38730: ARRAY
38731: GREATEREQUAL
38732: PUSH
38733: LD_VAR 0 5
38737: PPUSH
38738: LD_INT 2
38740: PPUSH
38741: CALL_OW 275
38745: PUSH
38746: LD_VAR 0 4
38750: PUSH
38751: LD_INT 2
38753: ARRAY
38754: GREATEREQUAL
38755: AND
38756: PUSH
38757: LD_VAR 0 5
38761: PPUSH
38762: LD_INT 3
38764: PPUSH
38765: CALL_OW 275
38769: PUSH
38770: LD_VAR 0 4
38774: PUSH
38775: LD_INT 3
38777: ARRAY
38778: GREATEREQUAL
38779: AND
38780: ST_TO_ADDR
// end ;
38781: LD_VAR 0 3
38785: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38786: LD_INT 0
38788: PPUSH
38789: PPUSH
38790: PPUSH
38791: PPUSH
// pom := GetBase ( building ) ;
38792: LD_ADDR_VAR 0 3
38796: PUSH
38797: LD_VAR 0 1
38801: PPUSH
38802: CALL_OW 274
38806: ST_TO_ADDR
// if not pom then
38807: LD_VAR 0 3
38811: NOT
38812: IFFALSE 38816
// exit ;
38814: GO 38986
// btype := GetBType ( building ) ;
38816: LD_ADDR_VAR 0 5
38820: PUSH
38821: LD_VAR 0 1
38825: PPUSH
38826: CALL_OW 266
38830: ST_TO_ADDR
// if btype = b_armoury then
38831: LD_VAR 0 5
38835: PUSH
38836: LD_INT 4
38838: EQUAL
38839: IFFALSE 38849
// btype := b_barracks ;
38841: LD_ADDR_VAR 0 5
38845: PUSH
38846: LD_INT 5
38848: ST_TO_ADDR
// if btype = b_depot then
38849: LD_VAR 0 5
38853: PUSH
38854: LD_INT 0
38856: EQUAL
38857: IFFALSE 38867
// btype := b_warehouse ;
38859: LD_ADDR_VAR 0 5
38863: PUSH
38864: LD_INT 1
38866: ST_TO_ADDR
// if btype = b_workshop then
38867: LD_VAR 0 5
38871: PUSH
38872: LD_INT 2
38874: EQUAL
38875: IFFALSE 38885
// btype := b_factory ;
38877: LD_ADDR_VAR 0 5
38881: PUSH
38882: LD_INT 3
38884: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38885: LD_ADDR_VAR 0 4
38889: PUSH
38890: LD_VAR 0 5
38894: PPUSH
38895: LD_VAR 0 1
38899: PPUSH
38900: CALL_OW 248
38904: PPUSH
38905: CALL_OW 450
38909: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38910: LD_ADDR_VAR 0 2
38914: PUSH
38915: LD_VAR 0 3
38919: PPUSH
38920: LD_INT 1
38922: PPUSH
38923: CALL_OW 275
38927: PUSH
38928: LD_VAR 0 4
38932: PUSH
38933: LD_INT 1
38935: ARRAY
38936: GREATEREQUAL
38937: PUSH
38938: LD_VAR 0 3
38942: PPUSH
38943: LD_INT 2
38945: PPUSH
38946: CALL_OW 275
38950: PUSH
38951: LD_VAR 0 4
38955: PUSH
38956: LD_INT 2
38958: ARRAY
38959: GREATEREQUAL
38960: AND
38961: PUSH
38962: LD_VAR 0 3
38966: PPUSH
38967: LD_INT 3
38969: PPUSH
38970: CALL_OW 275
38974: PUSH
38975: LD_VAR 0 4
38979: PUSH
38980: LD_INT 3
38982: ARRAY
38983: GREATEREQUAL
38984: AND
38985: ST_TO_ADDR
// end ;
38986: LD_VAR 0 2
38990: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38991: LD_INT 0
38993: PPUSH
38994: PPUSH
38995: PPUSH
// pom := GetBase ( building ) ;
38996: LD_ADDR_VAR 0 4
39000: PUSH
39001: LD_VAR 0 1
39005: PPUSH
39006: CALL_OW 274
39010: ST_TO_ADDR
// if not pom then
39011: LD_VAR 0 4
39015: NOT
39016: IFFALSE 39020
// exit ;
39018: GO 39121
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39020: LD_ADDR_VAR 0 5
39024: PUSH
39025: LD_VAR 0 2
39029: PPUSH
39030: LD_VAR 0 1
39034: PPUSH
39035: CALL_OW 248
39039: PPUSH
39040: CALL_OW 450
39044: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39045: LD_ADDR_VAR 0 3
39049: PUSH
39050: LD_VAR 0 4
39054: PPUSH
39055: LD_INT 1
39057: PPUSH
39058: CALL_OW 275
39062: PUSH
39063: LD_VAR 0 5
39067: PUSH
39068: LD_INT 1
39070: ARRAY
39071: GREATEREQUAL
39072: PUSH
39073: LD_VAR 0 4
39077: PPUSH
39078: LD_INT 2
39080: PPUSH
39081: CALL_OW 275
39085: PUSH
39086: LD_VAR 0 5
39090: PUSH
39091: LD_INT 2
39093: ARRAY
39094: GREATEREQUAL
39095: AND
39096: PUSH
39097: LD_VAR 0 4
39101: PPUSH
39102: LD_INT 3
39104: PPUSH
39105: CALL_OW 275
39109: PUSH
39110: LD_VAR 0 5
39114: PUSH
39115: LD_INT 3
39117: ARRAY
39118: GREATEREQUAL
39119: AND
39120: ST_TO_ADDR
// end ;
39121: LD_VAR 0 3
39125: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39126: LD_INT 0
39128: PPUSH
39129: PPUSH
39130: PPUSH
39131: PPUSH
39132: PPUSH
39133: PPUSH
39134: PPUSH
39135: PPUSH
39136: PPUSH
39137: PPUSH
39138: PPUSH
// result := false ;
39139: LD_ADDR_VAR 0 8
39143: PUSH
39144: LD_INT 0
39146: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39147: LD_VAR 0 5
39151: NOT
39152: PUSH
39153: LD_VAR 0 1
39157: NOT
39158: OR
39159: PUSH
39160: LD_VAR 0 2
39164: NOT
39165: OR
39166: PUSH
39167: LD_VAR 0 3
39171: NOT
39172: OR
39173: IFFALSE 39177
// exit ;
39175: GO 39991
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39177: LD_ADDR_VAR 0 14
39181: PUSH
39182: LD_VAR 0 1
39186: PPUSH
39187: LD_VAR 0 2
39191: PPUSH
39192: LD_VAR 0 3
39196: PPUSH
39197: LD_VAR 0 4
39201: PPUSH
39202: LD_VAR 0 5
39206: PUSH
39207: LD_INT 1
39209: ARRAY
39210: PPUSH
39211: CALL_OW 248
39215: PPUSH
39216: LD_INT 0
39218: PPUSH
39219: CALL 41224 0 6
39223: ST_TO_ADDR
// if not hexes then
39224: LD_VAR 0 14
39228: NOT
39229: IFFALSE 39233
// exit ;
39231: GO 39991
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39233: LD_ADDR_VAR 0 17
39237: PUSH
39238: LD_VAR 0 5
39242: PPUSH
39243: LD_INT 22
39245: PUSH
39246: LD_VAR 0 13
39250: PPUSH
39251: CALL_OW 255
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 30
39265: PUSH
39266: LD_INT 0
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 30
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PPUSH
39292: CALL_OW 72
39296: ST_TO_ADDR
// for i = 1 to hexes do
39297: LD_ADDR_VAR 0 9
39301: PUSH
39302: DOUBLE
39303: LD_INT 1
39305: DEC
39306: ST_TO_ADDR
39307: LD_VAR 0 14
39311: PUSH
39312: FOR_TO
39313: IFFALSE 39989
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39315: LD_ADDR_VAR 0 13
39319: PUSH
39320: LD_VAR 0 14
39324: PUSH
39325: LD_VAR 0 9
39329: ARRAY
39330: PUSH
39331: LD_INT 1
39333: ARRAY
39334: PPUSH
39335: LD_VAR 0 14
39339: PUSH
39340: LD_VAR 0 9
39344: ARRAY
39345: PUSH
39346: LD_INT 2
39348: ARRAY
39349: PPUSH
39350: CALL_OW 428
39354: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39355: LD_VAR 0 14
39359: PUSH
39360: LD_VAR 0 9
39364: ARRAY
39365: PUSH
39366: LD_INT 1
39368: ARRAY
39369: PPUSH
39370: LD_VAR 0 14
39374: PUSH
39375: LD_VAR 0 9
39379: ARRAY
39380: PUSH
39381: LD_INT 2
39383: ARRAY
39384: PPUSH
39385: CALL_OW 351
39389: PUSH
39390: LD_VAR 0 14
39394: PUSH
39395: LD_VAR 0 9
39399: ARRAY
39400: PUSH
39401: LD_INT 1
39403: ARRAY
39404: PPUSH
39405: LD_VAR 0 14
39409: PUSH
39410: LD_VAR 0 9
39414: ARRAY
39415: PUSH
39416: LD_INT 2
39418: ARRAY
39419: PPUSH
39420: CALL_OW 488
39424: NOT
39425: OR
39426: PUSH
39427: LD_VAR 0 13
39431: PPUSH
39432: CALL_OW 247
39436: PUSH
39437: LD_INT 3
39439: EQUAL
39440: OR
39441: IFFALSE 39447
// exit ;
39443: POP
39444: POP
39445: GO 39991
// if not tmp then
39447: LD_VAR 0 13
39451: NOT
39452: IFFALSE 39456
// continue ;
39454: GO 39312
// result := true ;
39456: LD_ADDR_VAR 0 8
39460: PUSH
39461: LD_INT 1
39463: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39464: LD_VAR 0 6
39468: PUSH
39469: LD_VAR 0 13
39473: PPUSH
39474: CALL_OW 247
39478: PUSH
39479: LD_INT 2
39481: EQUAL
39482: AND
39483: PUSH
39484: LD_VAR 0 13
39488: PPUSH
39489: CALL_OW 263
39493: PUSH
39494: LD_INT 1
39496: EQUAL
39497: AND
39498: IFFALSE 39662
// begin if IsDrivenBy ( tmp ) then
39500: LD_VAR 0 13
39504: PPUSH
39505: CALL_OW 311
39509: IFFALSE 39513
// continue ;
39511: GO 39312
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39513: LD_VAR 0 6
39517: PPUSH
39518: LD_INT 3
39520: PUSH
39521: LD_INT 60
39523: PUSH
39524: EMPTY
39525: LIST
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 3
39533: PUSH
39534: LD_INT 55
39536: PUSH
39537: EMPTY
39538: LIST
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PPUSH
39548: CALL_OW 72
39552: IFFALSE 39660
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39554: LD_ADDR_VAR 0 18
39558: PUSH
39559: LD_VAR 0 6
39563: PPUSH
39564: LD_INT 3
39566: PUSH
39567: LD_INT 60
39569: PUSH
39570: EMPTY
39571: LIST
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 3
39579: PUSH
39580: LD_INT 55
39582: PUSH
39583: EMPTY
39584: LIST
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PPUSH
39594: CALL_OW 72
39598: PUSH
39599: LD_INT 1
39601: ARRAY
39602: ST_TO_ADDR
// if IsInUnit ( driver ) then
39603: LD_VAR 0 18
39607: PPUSH
39608: CALL_OW 310
39612: IFFALSE 39623
// ComExit ( driver ) ;
39614: LD_VAR 0 18
39618: PPUSH
39619: CALL 65004 0 1
// AddComEnterUnit ( driver , tmp ) ;
39623: LD_VAR 0 18
39627: PPUSH
39628: LD_VAR 0 13
39632: PPUSH
39633: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39637: LD_VAR 0 18
39641: PPUSH
39642: LD_VAR 0 7
39646: PPUSH
39647: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39651: LD_VAR 0 18
39655: PPUSH
39656: CALL_OW 181
// end ; continue ;
39660: GO 39312
// end ; if not cleaners or not tmp in cleaners then
39662: LD_VAR 0 6
39666: NOT
39667: PUSH
39668: LD_VAR 0 13
39672: PUSH
39673: LD_VAR 0 6
39677: IN
39678: NOT
39679: OR
39680: IFFALSE 39987
// begin if dep then
39682: LD_VAR 0 17
39686: IFFALSE 39822
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39688: LD_ADDR_VAR 0 16
39692: PUSH
39693: LD_VAR 0 17
39697: PUSH
39698: LD_INT 1
39700: ARRAY
39701: PPUSH
39702: CALL_OW 250
39706: PPUSH
39707: LD_VAR 0 17
39711: PUSH
39712: LD_INT 1
39714: ARRAY
39715: PPUSH
39716: CALL_OW 254
39720: PPUSH
39721: LD_INT 5
39723: PPUSH
39724: CALL_OW 272
39728: PUSH
39729: LD_VAR 0 17
39733: PUSH
39734: LD_INT 1
39736: ARRAY
39737: PPUSH
39738: CALL_OW 251
39742: PPUSH
39743: LD_VAR 0 17
39747: PUSH
39748: LD_INT 1
39750: ARRAY
39751: PPUSH
39752: CALL_OW 254
39756: PPUSH
39757: LD_INT 5
39759: PPUSH
39760: CALL_OW 273
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39769: LD_VAR 0 16
39773: PUSH
39774: LD_INT 1
39776: ARRAY
39777: PPUSH
39778: LD_VAR 0 16
39782: PUSH
39783: LD_INT 2
39785: ARRAY
39786: PPUSH
39787: CALL_OW 488
39791: IFFALSE 39822
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39793: LD_VAR 0 13
39797: PPUSH
39798: LD_VAR 0 16
39802: PUSH
39803: LD_INT 1
39805: ARRAY
39806: PPUSH
39807: LD_VAR 0 16
39811: PUSH
39812: LD_INT 2
39814: ARRAY
39815: PPUSH
39816: CALL_OW 111
// continue ;
39820: GO 39312
// end ; end ; r := GetDir ( tmp ) ;
39822: LD_ADDR_VAR 0 15
39826: PUSH
39827: LD_VAR 0 13
39831: PPUSH
39832: CALL_OW 254
39836: ST_TO_ADDR
// if r = 5 then
39837: LD_VAR 0 15
39841: PUSH
39842: LD_INT 5
39844: EQUAL
39845: IFFALSE 39855
// r := 0 ;
39847: LD_ADDR_VAR 0 15
39851: PUSH
39852: LD_INT 0
39854: ST_TO_ADDR
// for j = r to 5 do
39855: LD_ADDR_VAR 0 10
39859: PUSH
39860: DOUBLE
39861: LD_VAR 0 15
39865: DEC
39866: ST_TO_ADDR
39867: LD_INT 5
39869: PUSH
39870: FOR_TO
39871: IFFALSE 39985
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39873: LD_ADDR_VAR 0 11
39877: PUSH
39878: LD_VAR 0 13
39882: PPUSH
39883: CALL_OW 250
39887: PPUSH
39888: LD_VAR 0 10
39892: PPUSH
39893: LD_INT 2
39895: PPUSH
39896: CALL_OW 272
39900: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39901: LD_ADDR_VAR 0 12
39905: PUSH
39906: LD_VAR 0 13
39910: PPUSH
39911: CALL_OW 251
39915: PPUSH
39916: LD_VAR 0 10
39920: PPUSH
39921: LD_INT 2
39923: PPUSH
39924: CALL_OW 273
39928: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39929: LD_VAR 0 11
39933: PPUSH
39934: LD_VAR 0 12
39938: PPUSH
39939: CALL_OW 488
39943: PUSH
39944: LD_VAR 0 11
39948: PPUSH
39949: LD_VAR 0 12
39953: PPUSH
39954: CALL_OW 428
39958: NOT
39959: AND
39960: IFFALSE 39983
// begin ComMoveXY ( tmp , _x , _y ) ;
39962: LD_VAR 0 13
39966: PPUSH
39967: LD_VAR 0 11
39971: PPUSH
39972: LD_VAR 0 12
39976: PPUSH
39977: CALL_OW 111
// break ;
39981: GO 39985
// end ; end ;
39983: GO 39870
39985: POP
39986: POP
// end ; end ;
39987: GO 39312
39989: POP
39990: POP
// end ;
39991: LD_VAR 0 8
39995: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39996: LD_INT 0
39998: PPUSH
// result := true ;
39999: LD_ADDR_VAR 0 3
40003: PUSH
40004: LD_INT 1
40006: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40007: LD_VAR 0 2
40011: PUSH
40012: LD_INT 24
40014: DOUBLE
40015: EQUAL
40016: IFTRUE 40026
40018: LD_INT 33
40020: DOUBLE
40021: EQUAL
40022: IFTRUE 40026
40024: GO 40051
40026: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40027: LD_ADDR_VAR 0 3
40031: PUSH
40032: LD_INT 32
40034: PPUSH
40035: LD_VAR 0 1
40039: PPUSH
40040: CALL_OW 321
40044: PUSH
40045: LD_INT 2
40047: EQUAL
40048: ST_TO_ADDR
40049: GO 40367
40051: LD_INT 20
40053: DOUBLE
40054: EQUAL
40055: IFTRUE 40059
40057: GO 40084
40059: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40060: LD_ADDR_VAR 0 3
40064: PUSH
40065: LD_INT 6
40067: PPUSH
40068: LD_VAR 0 1
40072: PPUSH
40073: CALL_OW 321
40077: PUSH
40078: LD_INT 2
40080: EQUAL
40081: ST_TO_ADDR
40082: GO 40367
40084: LD_INT 22
40086: DOUBLE
40087: EQUAL
40088: IFTRUE 40098
40090: LD_INT 36
40092: DOUBLE
40093: EQUAL
40094: IFTRUE 40098
40096: GO 40123
40098: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40099: LD_ADDR_VAR 0 3
40103: PUSH
40104: LD_INT 15
40106: PPUSH
40107: LD_VAR 0 1
40111: PPUSH
40112: CALL_OW 321
40116: PUSH
40117: LD_INT 2
40119: EQUAL
40120: ST_TO_ADDR
40121: GO 40367
40123: LD_INT 30
40125: DOUBLE
40126: EQUAL
40127: IFTRUE 40131
40129: GO 40156
40131: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40132: LD_ADDR_VAR 0 3
40136: PUSH
40137: LD_INT 20
40139: PPUSH
40140: LD_VAR 0 1
40144: PPUSH
40145: CALL_OW 321
40149: PUSH
40150: LD_INT 2
40152: EQUAL
40153: ST_TO_ADDR
40154: GO 40367
40156: LD_INT 28
40158: DOUBLE
40159: EQUAL
40160: IFTRUE 40170
40162: LD_INT 21
40164: DOUBLE
40165: EQUAL
40166: IFTRUE 40170
40168: GO 40195
40170: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40171: LD_ADDR_VAR 0 3
40175: PUSH
40176: LD_INT 21
40178: PPUSH
40179: LD_VAR 0 1
40183: PPUSH
40184: CALL_OW 321
40188: PUSH
40189: LD_INT 2
40191: EQUAL
40192: ST_TO_ADDR
40193: GO 40367
40195: LD_INT 16
40197: DOUBLE
40198: EQUAL
40199: IFTRUE 40203
40201: GO 40228
40203: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40204: LD_ADDR_VAR 0 3
40208: PUSH
40209: LD_INT 84
40211: PPUSH
40212: LD_VAR 0 1
40216: PPUSH
40217: CALL_OW 321
40221: PUSH
40222: LD_INT 2
40224: EQUAL
40225: ST_TO_ADDR
40226: GO 40367
40228: LD_INT 19
40230: DOUBLE
40231: EQUAL
40232: IFTRUE 40242
40234: LD_INT 23
40236: DOUBLE
40237: EQUAL
40238: IFTRUE 40242
40240: GO 40267
40242: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40243: LD_ADDR_VAR 0 3
40247: PUSH
40248: LD_INT 83
40250: PPUSH
40251: LD_VAR 0 1
40255: PPUSH
40256: CALL_OW 321
40260: PUSH
40261: LD_INT 2
40263: EQUAL
40264: ST_TO_ADDR
40265: GO 40367
40267: LD_INT 17
40269: DOUBLE
40270: EQUAL
40271: IFTRUE 40275
40273: GO 40300
40275: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40276: LD_ADDR_VAR 0 3
40280: PUSH
40281: LD_INT 39
40283: PPUSH
40284: LD_VAR 0 1
40288: PPUSH
40289: CALL_OW 321
40293: PUSH
40294: LD_INT 2
40296: EQUAL
40297: ST_TO_ADDR
40298: GO 40367
40300: LD_INT 18
40302: DOUBLE
40303: EQUAL
40304: IFTRUE 40308
40306: GO 40333
40308: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40309: LD_ADDR_VAR 0 3
40313: PUSH
40314: LD_INT 40
40316: PPUSH
40317: LD_VAR 0 1
40321: PPUSH
40322: CALL_OW 321
40326: PUSH
40327: LD_INT 2
40329: EQUAL
40330: ST_TO_ADDR
40331: GO 40367
40333: LD_INT 27
40335: DOUBLE
40336: EQUAL
40337: IFTRUE 40341
40339: GO 40366
40341: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40342: LD_ADDR_VAR 0 3
40346: PUSH
40347: LD_INT 35
40349: PPUSH
40350: LD_VAR 0 1
40354: PPUSH
40355: CALL_OW 321
40359: PUSH
40360: LD_INT 2
40362: EQUAL
40363: ST_TO_ADDR
40364: GO 40367
40366: POP
// end ;
40367: LD_VAR 0 3
40371: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40372: LD_INT 0
40374: PPUSH
40375: PPUSH
40376: PPUSH
40377: PPUSH
40378: PPUSH
40379: PPUSH
40380: PPUSH
40381: PPUSH
40382: PPUSH
40383: PPUSH
40384: PPUSH
// result := false ;
40385: LD_ADDR_VAR 0 6
40389: PUSH
40390: LD_INT 0
40392: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40393: LD_VAR 0 1
40397: NOT
40398: PUSH
40399: LD_VAR 0 1
40403: PPUSH
40404: CALL_OW 266
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: IN
40419: NOT
40420: OR
40421: PUSH
40422: LD_VAR 0 2
40426: NOT
40427: OR
40428: PUSH
40429: LD_VAR 0 5
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: LD_INT 2
40442: PUSH
40443: LD_INT 3
40445: PUSH
40446: LD_INT 4
40448: PUSH
40449: LD_INT 5
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: IN
40460: NOT
40461: OR
40462: PUSH
40463: LD_VAR 0 3
40467: PPUSH
40468: LD_VAR 0 4
40472: PPUSH
40473: CALL_OW 488
40477: NOT
40478: OR
40479: IFFALSE 40483
// exit ;
40481: GO 41219
// side := GetSide ( depot ) ;
40483: LD_ADDR_VAR 0 9
40487: PUSH
40488: LD_VAR 0 1
40492: PPUSH
40493: CALL_OW 255
40497: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40498: LD_VAR 0 9
40502: PPUSH
40503: LD_VAR 0 2
40507: PPUSH
40508: CALL 39996 0 2
40512: NOT
40513: IFFALSE 40517
// exit ;
40515: GO 41219
// pom := GetBase ( depot ) ;
40517: LD_ADDR_VAR 0 10
40521: PUSH
40522: LD_VAR 0 1
40526: PPUSH
40527: CALL_OW 274
40531: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40532: LD_ADDR_VAR 0 11
40536: PUSH
40537: LD_VAR 0 2
40541: PPUSH
40542: LD_VAR 0 1
40546: PPUSH
40547: CALL_OW 248
40551: PPUSH
40552: CALL_OW 450
40556: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40557: LD_VAR 0 10
40561: PPUSH
40562: LD_INT 1
40564: PPUSH
40565: CALL_OW 275
40569: PUSH
40570: LD_VAR 0 11
40574: PUSH
40575: LD_INT 1
40577: ARRAY
40578: GREATEREQUAL
40579: PUSH
40580: LD_VAR 0 10
40584: PPUSH
40585: LD_INT 2
40587: PPUSH
40588: CALL_OW 275
40592: PUSH
40593: LD_VAR 0 11
40597: PUSH
40598: LD_INT 2
40600: ARRAY
40601: GREATEREQUAL
40602: AND
40603: PUSH
40604: LD_VAR 0 10
40608: PPUSH
40609: LD_INT 3
40611: PPUSH
40612: CALL_OW 275
40616: PUSH
40617: LD_VAR 0 11
40621: PUSH
40622: LD_INT 3
40624: ARRAY
40625: GREATEREQUAL
40626: AND
40627: NOT
40628: IFFALSE 40632
// exit ;
40630: GO 41219
// if GetBType ( depot ) = b_depot then
40632: LD_VAR 0 1
40636: PPUSH
40637: CALL_OW 266
40641: PUSH
40642: LD_INT 0
40644: EQUAL
40645: IFFALSE 40657
// dist := 28 else
40647: LD_ADDR_VAR 0 14
40651: PUSH
40652: LD_INT 28
40654: ST_TO_ADDR
40655: GO 40665
// dist := 36 ;
40657: LD_ADDR_VAR 0 14
40661: PUSH
40662: LD_INT 36
40664: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40665: LD_VAR 0 1
40669: PPUSH
40670: LD_VAR 0 3
40674: PPUSH
40675: LD_VAR 0 4
40679: PPUSH
40680: CALL_OW 297
40684: PUSH
40685: LD_VAR 0 14
40689: GREATER
40690: IFFALSE 40694
// exit ;
40692: GO 41219
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40694: LD_ADDR_VAR 0 12
40698: PUSH
40699: LD_VAR 0 2
40703: PPUSH
40704: LD_VAR 0 3
40708: PPUSH
40709: LD_VAR 0 4
40713: PPUSH
40714: LD_VAR 0 5
40718: PPUSH
40719: LD_VAR 0 1
40723: PPUSH
40724: CALL_OW 248
40728: PPUSH
40729: LD_INT 0
40731: PPUSH
40732: CALL 41224 0 6
40736: ST_TO_ADDR
// if not hexes then
40737: LD_VAR 0 12
40741: NOT
40742: IFFALSE 40746
// exit ;
40744: GO 41219
// hex := GetHexInfo ( x , y ) ;
40746: LD_ADDR_VAR 0 15
40750: PUSH
40751: LD_VAR 0 3
40755: PPUSH
40756: LD_VAR 0 4
40760: PPUSH
40761: CALL_OW 546
40765: ST_TO_ADDR
// if hex [ 1 ] then
40766: LD_VAR 0 15
40770: PUSH
40771: LD_INT 1
40773: ARRAY
40774: IFFALSE 40778
// exit ;
40776: GO 41219
// height := hex [ 2 ] ;
40778: LD_ADDR_VAR 0 13
40782: PUSH
40783: LD_VAR 0 15
40787: PUSH
40788: LD_INT 2
40790: ARRAY
40791: ST_TO_ADDR
// for i = 1 to hexes do
40792: LD_ADDR_VAR 0 7
40796: PUSH
40797: DOUBLE
40798: LD_INT 1
40800: DEC
40801: ST_TO_ADDR
40802: LD_VAR 0 12
40806: PUSH
40807: FOR_TO
40808: IFFALSE 41138
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40810: LD_VAR 0 12
40814: PUSH
40815: LD_VAR 0 7
40819: ARRAY
40820: PUSH
40821: LD_INT 1
40823: ARRAY
40824: PPUSH
40825: LD_VAR 0 12
40829: PUSH
40830: LD_VAR 0 7
40834: ARRAY
40835: PUSH
40836: LD_INT 2
40838: ARRAY
40839: PPUSH
40840: CALL_OW 488
40844: NOT
40845: PUSH
40846: LD_VAR 0 12
40850: PUSH
40851: LD_VAR 0 7
40855: ARRAY
40856: PUSH
40857: LD_INT 1
40859: ARRAY
40860: PPUSH
40861: LD_VAR 0 12
40865: PUSH
40866: LD_VAR 0 7
40870: ARRAY
40871: PUSH
40872: LD_INT 2
40874: ARRAY
40875: PPUSH
40876: CALL_OW 428
40880: PUSH
40881: LD_INT 0
40883: GREATER
40884: OR
40885: PUSH
40886: LD_VAR 0 12
40890: PUSH
40891: LD_VAR 0 7
40895: ARRAY
40896: PUSH
40897: LD_INT 1
40899: ARRAY
40900: PPUSH
40901: LD_VAR 0 12
40905: PUSH
40906: LD_VAR 0 7
40910: ARRAY
40911: PUSH
40912: LD_INT 2
40914: ARRAY
40915: PPUSH
40916: CALL_OW 351
40920: OR
40921: IFFALSE 40927
// exit ;
40923: POP
40924: POP
40925: GO 41219
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40927: LD_ADDR_VAR 0 8
40931: PUSH
40932: LD_VAR 0 12
40936: PUSH
40937: LD_VAR 0 7
40941: ARRAY
40942: PUSH
40943: LD_INT 1
40945: ARRAY
40946: PPUSH
40947: LD_VAR 0 12
40951: PUSH
40952: LD_VAR 0 7
40956: ARRAY
40957: PUSH
40958: LD_INT 2
40960: ARRAY
40961: PPUSH
40962: CALL_OW 546
40966: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40967: LD_VAR 0 8
40971: PUSH
40972: LD_INT 1
40974: ARRAY
40975: PUSH
40976: LD_VAR 0 8
40980: PUSH
40981: LD_INT 2
40983: ARRAY
40984: PUSH
40985: LD_VAR 0 13
40989: PUSH
40990: LD_INT 2
40992: PLUS
40993: GREATER
40994: OR
40995: PUSH
40996: LD_VAR 0 8
41000: PUSH
41001: LD_INT 2
41003: ARRAY
41004: PUSH
41005: LD_VAR 0 13
41009: PUSH
41010: LD_INT 2
41012: MINUS
41013: LESS
41014: OR
41015: PUSH
41016: LD_VAR 0 8
41020: PUSH
41021: LD_INT 3
41023: ARRAY
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: LD_INT 8
41030: PUSH
41031: LD_INT 9
41033: PUSH
41034: LD_INT 10
41036: PUSH
41037: LD_INT 11
41039: PUSH
41040: LD_INT 12
41042: PUSH
41043: LD_INT 13
41045: PUSH
41046: LD_INT 16
41048: PUSH
41049: LD_INT 17
41051: PUSH
41052: LD_INT 18
41054: PUSH
41055: LD_INT 19
41057: PUSH
41058: LD_INT 20
41060: PUSH
41061: LD_INT 21
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: IN
41079: NOT
41080: OR
41081: PUSH
41082: LD_VAR 0 8
41086: PUSH
41087: LD_INT 5
41089: ARRAY
41090: NOT
41091: OR
41092: PUSH
41093: LD_VAR 0 8
41097: PUSH
41098: LD_INT 6
41100: ARRAY
41101: PUSH
41102: LD_INT 1
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: LD_INT 7
41110: PUSH
41111: LD_INT 9
41113: PUSH
41114: LD_INT 10
41116: PUSH
41117: LD_INT 11
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: IN
41128: NOT
41129: OR
41130: IFFALSE 41136
// exit ;
41132: POP
41133: POP
41134: GO 41219
// end ;
41136: GO 40807
41138: POP
41139: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41140: LD_VAR 0 9
41144: PPUSH
41145: LD_VAR 0 3
41149: PPUSH
41150: LD_VAR 0 4
41154: PPUSH
41155: LD_INT 20
41157: PPUSH
41158: CALL 33171 0 4
41162: PUSH
41163: LD_INT 4
41165: ARRAY
41166: IFFALSE 41170
// exit ;
41168: GO 41219
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41170: LD_VAR 0 2
41174: PUSH
41175: LD_INT 29
41177: PUSH
41178: LD_INT 30
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: IN
41185: PUSH
41186: LD_VAR 0 3
41190: PPUSH
41191: LD_VAR 0 4
41195: PPUSH
41196: LD_VAR 0 9
41200: PPUSH
41201: CALL_OW 440
41205: NOT
41206: AND
41207: IFFALSE 41211
// exit ;
41209: GO 41219
// result := true ;
41211: LD_ADDR_VAR 0 6
41215: PUSH
41216: LD_INT 1
41218: ST_TO_ADDR
// end ;
41219: LD_VAR 0 6
41223: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41224: LD_INT 0
41226: PPUSH
41227: PPUSH
41228: PPUSH
41229: PPUSH
41230: PPUSH
41231: PPUSH
41232: PPUSH
41233: PPUSH
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
41239: PPUSH
41240: PPUSH
41241: PPUSH
41242: PPUSH
41243: PPUSH
41244: PPUSH
41245: PPUSH
41246: PPUSH
41247: PPUSH
41248: PPUSH
41249: PPUSH
41250: PPUSH
41251: PPUSH
41252: PPUSH
41253: PPUSH
41254: PPUSH
41255: PPUSH
41256: PPUSH
41257: PPUSH
41258: PPUSH
41259: PPUSH
41260: PPUSH
41261: PPUSH
41262: PPUSH
41263: PPUSH
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
41268: PPUSH
41269: PPUSH
41270: PPUSH
41271: PPUSH
41272: PPUSH
41273: PPUSH
41274: PPUSH
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
41279: PPUSH
41280: PPUSH
41281: PPUSH
41282: PPUSH
41283: PPUSH
// result = [ ] ;
41284: LD_ADDR_VAR 0 7
41288: PUSH
41289: EMPTY
41290: ST_TO_ADDR
// temp_list = [ ] ;
41291: LD_ADDR_VAR 0 9
41295: PUSH
41296: EMPTY
41297: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41298: LD_VAR 0 4
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: LD_INT 1
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: LD_INT 3
41314: PUSH
41315: LD_INT 4
41317: PUSH
41318: LD_INT 5
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: IN
41329: NOT
41330: PUSH
41331: LD_VAR 0 1
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 1
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: IN
41346: PUSH
41347: LD_VAR 0 5
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: LD_INT 2
41357: PUSH
41358: LD_INT 3
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: LIST
41365: IN
41366: NOT
41367: AND
41368: OR
41369: IFFALSE 41373
// exit ;
41371: GO 59764
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41373: LD_VAR 0 1
41377: PUSH
41378: LD_INT 6
41380: PUSH
41381: LD_INT 7
41383: PUSH
41384: LD_INT 8
41386: PUSH
41387: LD_INT 13
41389: PUSH
41390: LD_INT 12
41392: PUSH
41393: LD_INT 15
41395: PUSH
41396: LD_INT 11
41398: PUSH
41399: LD_INT 14
41401: PUSH
41402: LD_INT 10
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: IN
41416: IFFALSE 41426
// btype = b_lab ;
41418: LD_ADDR_VAR 0 1
41422: PUSH
41423: LD_INT 6
41425: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41426: LD_VAR 0 6
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: LIST
41444: IN
41445: NOT
41446: PUSH
41447: LD_VAR 0 1
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: LD_INT 3
41463: PUSH
41464: LD_INT 6
41466: PUSH
41467: LD_INT 36
41469: PUSH
41470: LD_INT 4
41472: PUSH
41473: LD_INT 5
41475: PUSH
41476: LD_INT 31
41478: PUSH
41479: LD_INT 32
41481: PUSH
41482: LD_INT 33
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: IN
41498: NOT
41499: PUSH
41500: LD_VAR 0 6
41504: PUSH
41505: LD_INT 1
41507: EQUAL
41508: AND
41509: OR
41510: PUSH
41511: LD_VAR 0 1
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: LD_INT 3
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: IN
41526: NOT
41527: PUSH
41528: LD_VAR 0 6
41532: PUSH
41533: LD_INT 2
41535: EQUAL
41536: AND
41537: OR
41538: IFFALSE 41548
// mode = 0 ;
41540: LD_ADDR_VAR 0 6
41544: PUSH
41545: LD_INT 0
41547: ST_TO_ADDR
// case mode of 0 :
41548: LD_VAR 0 6
41552: PUSH
41553: LD_INT 0
41555: DOUBLE
41556: EQUAL
41557: IFTRUE 41561
41559: GO 53014
41561: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41562: LD_ADDR_VAR 0 11
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 1
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 0
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 1
41620: NEG
41621: PUSH
41622: LD_INT 0
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: LD_INT 1
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: LD_INT 2
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 1
41708: PUSH
41709: LD_INT 3
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: LD_INT 3
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41755: LD_ADDR_VAR 0 12
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 2
41878: NEG
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: NEG
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: NEG
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 3
41912: NEG
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 3
41923: NEG
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41951: LD_ADDR_VAR 0 13
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: LD_INT 2
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 2
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 2
42054: PUSH
42055: LD_INT 2
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: LD_INT 2
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 2
42098: NEG
42099: PUSH
42100: LD_INT 3
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 3
42110: NEG
42111: PUSH
42112: LD_INT 2
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 3
42122: NEG
42123: PUSH
42124: LD_INT 3
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42150: LD_ADDR_VAR 0 14
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: LD_INT 0
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 1
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: PUSH
42189: LD_INT 1
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: LD_INT 2
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: LD_INT 3
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 0
42308: PUSH
42309: LD_INT 3
42311: NEG
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: PUSH
42320: LD_INT 2
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42346: LD_ADDR_VAR 0 15
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: LD_INT 1
42366: NEG
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: PUSH
42385: LD_INT 1
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: NEG
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 1
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 2
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 2
42480: NEG
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 3
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 3
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42539: LD_ADDR_VAR 0 16
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: NEG
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 2
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: NEG
42675: PUSH
42676: LD_INT 2
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 3
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 3
42696: PUSH
42697: LD_INT 3
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: LD_INT 3
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42732: LD_ADDR_VAR 0 17
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: LD_INT 1
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: LD_INT 2
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 2
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: NEG
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: LD_INT 2
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42962: LD_ADDR_VAR 0 18
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: LD_INT 1
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: LD_INT 2
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 2
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: LD_INT 2
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: LD_INT 1
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 2
43161: NEG
43162: PUSH
43163: LD_INT 2
43165: NEG
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43192: LD_ADDR_VAR 0 19
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: LD_INT 1
43265: NEG
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: LD_INT 2
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: LD_INT 2
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 1
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 2
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 2
43327: PUSH
43328: LD_INT 2
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: LD_INT 0
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: LD_INT 1
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: NEG
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43422: LD_ADDR_VAR 0 20
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: LD_INT 1
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 0
43515: PUSH
43516: LD_INT 2
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: LD_INT 1
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 2
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 2
43557: PUSH
43558: LD_INT 2
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 2
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 2
43598: NEG
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: NEG
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: NEG
43622: PUSH
43623: LD_INT 2
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43652: LD_ADDR_VAR 0 21
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 0
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: LD_INT 2
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 2
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: LD_INT 1
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: LD_INT 2
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 2
43839: NEG
43840: PUSH
43841: LD_INT 1
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 2
43851: NEG
43852: PUSH
43853: LD_INT 2
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43882: LD_ADDR_VAR 0 22
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 0
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: LD_INT 2
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 2
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: LD_INT 2
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 2
44069: NEG
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: LD_INT 2
44085: NEG
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44112: LD_ADDR_VAR 0 23
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 2
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: LD_INT 2
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: LD_INT 0
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 2
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: NEG
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: LD_INT 3
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: LD_INT 3
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44392: LD_ADDR_VAR 0 24
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 1
44420: PUSH
44421: LD_INT 0
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 1
44450: NEG
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: LD_INT 2
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 2
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: LD_INT 2
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: LD_INT 2
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: NEG
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: NEG
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: LD_INT 2
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 3
44625: PUSH
44626: LD_INT 1
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 3
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44668: LD_ADDR_VAR 0 25
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: LD_INT 2
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 2
44844: NEG
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 2
44855: NEG
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 3
44889: PUSH
44890: LD_INT 2
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 2
44899: PUSH
44900: LD_INT 3
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 3
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44942: LD_ADDR_VAR 0 26
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 1
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: LD_INT 1
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: PUSH
45078: LD_INT 2
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 2
45118: NEG
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: NEG
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: LD_INT 3
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: LD_INT 3
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45218: LD_ADDR_VAR 0 27
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 1
45429: NEG
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 3
45451: NEG
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: NEG
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45498: LD_ADDR_VAR 0 28
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 2
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 2
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: LD_INT 2
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 2
45685: NEG
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: LD_INT 3
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: LD_INT 3
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 3
45733: NEG
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 3
45745: NEG
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45780: LD_ADDR_VAR 0 29
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: LD_INT 2
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 1
45935: NEG
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: LD_INT 3
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 3
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: LD_INT 3
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: NEG
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 3
46024: NEG
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46059: LD_ADDR_VAR 0 30
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 3
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 3
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 2
46281: PUSH
46282: LD_INT 3
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 2
46291: NEG
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 3
46302: NEG
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46337: LD_ADDR_VAR 0 31
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: NEG
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 2
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: LD_INT 1
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: LD_INT 2
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: LD_INT 3
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 2
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 3
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: LD_INT 3
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 3
46580: NEG
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46615: LD_ADDR_VAR 0 32
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: NEG
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 3
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: PUSH
46817: LD_INT 2
46819: NEG
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 3
46827: PUSH
46828: LD_INT 2
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: LD_INT 3
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 3
46858: NEG
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46893: LD_ADDR_VAR 0 33
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 0
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: NEG
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: NEG
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: NEG
47072: PUSH
47073: LD_INT 2
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: LD_INT 3
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 3
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 3
47137: NEG
47138: PUSH
47139: LD_INT 2
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47172: LD_ADDR_VAR 0 34
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 1
47230: NEG
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 2
47328: NEG
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 2
47339: NEG
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: LD_INT 2
47355: NEG
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: LD_INT 3
47367: NEG
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 3
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: LD_INT 3
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 3
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: NEG
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47452: LD_ADDR_VAR 0 35
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47564: LD_ADDR_VAR 0 36
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: NEG
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: LD_INT 2
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47676: LD_ADDR_VAR 0 37
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 1
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47788: LD_ADDR_VAR 0 38
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 0
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 2
47879: NEG
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47900: LD_ADDR_VAR 0 39
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 0
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 1
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48012: LD_ADDR_VAR 0 40
48016: PUSH
48017: LD_INT 0
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: LD_INT 1
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 1
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48124: LD_ADDR_VAR 0 41
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: NEG
48315: PUSH
48316: LD_INT 3
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 2
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 3
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 3
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 3
48367: PUSH
48368: LD_INT 3
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 2
48377: PUSH
48378: LD_INT 3
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 3
48398: NEG
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 3
48409: NEG
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 3
48421: NEG
48422: PUSH
48423: LD_INT 2
48425: NEG
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 3
48433: NEG
48434: PUSH
48435: LD_INT 3
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48474: LD_ADDR_VAR 0 42
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: LD_INT 1
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: LD_INT 1
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: LD_INT 3
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: LD_INT 3
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 3
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 3
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: LD_INT 3
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: LD_INT 3
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: LD_INT 3
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 3
48771: NEG
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 3
48783: NEG
48784: PUSH
48785: LD_INT 3
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48824: LD_ADDR_VAR 0 43
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 2
48909: NEG
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 3
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: LD_INT 3
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 3
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 3
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: LD_INT 3
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: LD_INT 2
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 3
49120: NEG
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 3
49131: NEG
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49172: LD_ADDR_VAR 0 44
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 1
49253: NEG
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 2
49350: NEG
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: NEG
49363: PUSH
49364: LD_INT 3
49366: NEG
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 2
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 3
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 3
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 3
49415: PUSH
49416: LD_INT 3
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: LD_INT 3
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: NEG
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 3
49446: NEG
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 3
49457: NEG
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 3
49469: NEG
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 3
49481: NEG
49482: PUSH
49483: LD_INT 3
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49522: LD_ADDR_VAR 0 45
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: LD_INT 1
49595: NEG
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: LD_INT 2
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: LD_INT 3
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: LD_INT 3
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 3
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 2
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 3
49758: PUSH
49759: LD_INT 2
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 3
49768: PUSH
49769: LD_INT 3
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: LD_INT 3
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 3
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 3
49819: NEG
49820: PUSH
49821: LD_INT 2
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 3
49831: NEG
49832: PUSH
49833: LD_INT 3
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49872: LD_ADDR_VAR 0 46
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: LD_INT 1
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: LD_INT 2
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 2
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: LD_INT 2
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 2
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 2
50038: NEG
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 3
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 3
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 3
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 3
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: LD_INT 3
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 3
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 3
50168: NEG
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 3
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50220: LD_ADDR_VAR 0 47
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: LD_INT 2
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: LD_INT 2
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50371: LD_ADDR_VAR 0 48
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 1
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 2
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50518: LD_ADDR_VAR 0 49
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: NEG
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50662: LD_ADDR_VAR 0 50
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: NEG
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: PUSH
50754: LD_INT 2
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50806: LD_ADDR_VAR 0 51
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 0
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 2
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50953: LD_ADDR_VAR 0 52
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: LD_INT 2
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 2
51057: NEG
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51104: LD_ADDR_VAR 0 53
51108: PUSH
51109: LD_INT 0
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 0
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: LD_INT 2
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 2
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 2
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 2
51291: NEG
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51334: LD_ADDR_VAR 0 54
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: LD_INT 2
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 2
51533: NEG
51534: PUSH
51535: LD_INT 2
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51564: LD_ADDR_VAR 0 55
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 2
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 2
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 2
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 2
51751: NEG
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51794: LD_ADDR_VAR 0 56
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: LD_INT 2
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: LD_INT 2
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 2
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: NEG
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: NEG
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52024: LD_ADDR_VAR 0 57
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 0
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 1
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: LD_INT 2
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 2
52211: NEG
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 2
52223: NEG
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52254: LD_ADDR_VAR 0 58
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 2
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52484: LD_ADDR_VAR 0 59
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 0
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: LD_INT 1
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52572: LD_ADDR_VAR 0 60
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: LD_INT 1
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52660: LD_ADDR_VAR 0 61
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52748: LD_ADDR_VAR 0 62
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52836: LD_ADDR_VAR 0 63
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52924: LD_ADDR_VAR 0 64
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: ST_TO_ADDR
// end ; 1 :
53012: GO 58909
53014: LD_INT 1
53016: DOUBLE
53017: EQUAL
53018: IFTRUE 53022
53020: GO 55645
53022: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53023: LD_ADDR_VAR 0 11
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: LD_INT 3
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: LD_INT 3
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: LIST
53066: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53067: LD_ADDR_VAR 0 12
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 3
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 3
53095: PUSH
53096: LD_INT 1
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: LIST
53107: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53108: LD_ADDR_VAR 0 13
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: LD_INT 3
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: LD_INT 3
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: LIST
53147: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53148: LD_ADDR_VAR 0 14
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 3
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 3
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: LIST
53188: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53189: LD_ADDR_VAR 0 15
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 3
53207: NEG
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 3
53218: NEG
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: LIST
53232: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53233: LD_ADDR_VAR 0 16
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: LD_INT 3
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 3
53252: NEG
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 3
53264: NEG
53265: PUSH
53266: LD_INT 3
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: LIST
53278: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53279: LD_ADDR_VAR 0 17
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 3
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: LD_INT 3
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: LIST
53322: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53323: LD_ADDR_VAR 0 18
53327: PUSH
53328: LD_INT 2
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 3
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 3
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: LIST
53363: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53364: LD_ADDR_VAR 0 19
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: LD_INT 2
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 3
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: LIST
53403: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53404: LD_ADDR_VAR 0 20
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 3
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: LIST
53444: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53445: LD_ADDR_VAR 0 21
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 3
53463: NEG
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 3
53474: NEG
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53489: LD_ADDR_VAR 0 22
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: LD_INT 3
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 3
53508: NEG
53509: PUSH
53510: LD_INT 2
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: LD_INT 3
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: LIST
53534: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53535: LD_ADDR_VAR 0 23
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 3
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: LD_INT 4
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: LD_INT 3
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: LIST
53578: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53579: LD_ADDR_VAR 0 24
53583: PUSH
53584: LD_INT 3
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 4
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: LIST
53619: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53620: LD_ADDR_VAR 0 25
53624: PUSH
53625: LD_INT 3
53627: PUSH
53628: LD_INT 3
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 4
53637: PUSH
53638: LD_INT 3
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 3
53647: PUSH
53648: LD_INT 4
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53660: LD_ADDR_VAR 0 26
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: LD_INT 3
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: PUSH
53678: LD_INT 4
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: LD_INT 3
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: LIST
53700: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53701: LD_ADDR_VAR 0 27
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 4
53730: NEG
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: LIST
53744: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53745: LD_ADDR_VAR 0 28
53749: PUSH
53750: LD_INT 3
53752: NEG
53753: PUSH
53754: LD_INT 3
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 3
53764: NEG
53765: PUSH
53766: LD_INT 4
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 4
53776: NEG
53777: PUSH
53778: LD_INT 3
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: LIST
53790: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53791: LD_ADDR_VAR 0 29
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: LD_INT 3
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 0
53810: PUSH
53811: LD_INT 3
53813: NEG
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: LD_INT 4
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: LD_INT 4
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: LD_INT 3
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: LD_INT 5
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 5
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 4
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: LD_INT 6
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: LD_INT 6
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 5
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53946: LD_ADDR_VAR 0 30
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 3
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 3
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 3
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 4
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 4
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 4
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 5
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 5
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 5
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 6
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 6
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54089: LD_ADDR_VAR 0 31
54093: PUSH
54094: LD_INT 3
54096: PUSH
54097: LD_INT 2
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: LD_INT 3
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 4
54126: PUSH
54127: LD_INT 3
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 4
54136: PUSH
54137: LD_INT 4
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 3
54146: PUSH
54147: LD_INT 4
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 5
54156: PUSH
54157: LD_INT 4
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 5
54166: PUSH
54167: LD_INT 5
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 4
54176: PUSH
54177: LD_INT 5
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 6
54186: PUSH
54187: LD_INT 5
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 6
54196: PUSH
54197: LD_INT 6
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 5
54206: PUSH
54207: LD_INT 6
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54228: LD_ADDR_VAR 0 32
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: LD_INT 3
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: LD_INT 3
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: LD_INT 4
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: LD_INT 4
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: LD_INT 3
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: LD_INT 5
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 5
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: LD_INT 4
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: LD_INT 6
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 6
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: NEG
54349: PUSH
54350: LD_INT 5
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54371: LD_ADDR_VAR 0 33
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 3
54389: NEG
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 3
54400: NEG
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 3
54412: NEG
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 4
54423: NEG
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 4
54434: NEG
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 4
54446: NEG
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 5
54457: NEG
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 5
54468: NEG
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 5
54480: NEG
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 6
54491: NEG
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 6
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54526: LD_ADDR_VAR 0 34
54530: PUSH
54531: LD_INT 2
54533: NEG
54534: PUSH
54535: LD_INT 3
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 3
54545: NEG
54546: PUSH
54547: LD_INT 2
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 3
54557: NEG
54558: PUSH
54559: LD_INT 3
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 3
54569: NEG
54570: PUSH
54571: LD_INT 4
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 4
54581: NEG
54582: PUSH
54583: LD_INT 3
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 4
54593: NEG
54594: PUSH
54595: LD_INT 4
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 4
54605: NEG
54606: PUSH
54607: LD_INT 5
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 5
54617: NEG
54618: PUSH
54619: LD_INT 4
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 5
54629: NEG
54630: PUSH
54631: LD_INT 5
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 5
54641: NEG
54642: PUSH
54643: LD_INT 6
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 6
54653: NEG
54654: PUSH
54655: LD_INT 5
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 6
54665: NEG
54666: PUSH
54667: LD_INT 6
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54689: LD_ADDR_VAR 0 41
54693: PUSH
54694: LD_INT 0
54696: PUSH
54697: LD_INT 2
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 3
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: LIST
54732: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54733: LD_ADDR_VAR 0 42
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 3
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: LIST
54773: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54774: LD_ADDR_VAR 0 43
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 3
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: LIST
54813: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54814: LD_ADDR_VAR 0 44
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 3
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: LIST
54854: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54855: LD_ADDR_VAR 0 45
54859: PUSH
54860: LD_INT 2
54862: NEG
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 3
54884: NEG
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: LIST
54898: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54899: LD_ADDR_VAR 0 46
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: LD_INT 3
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 3
54930: NEG
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: LIST
54944: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54945: LD_ADDR_VAR 0 47
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: LD_INT 3
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54978: LD_ADDR_VAR 0 48
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: LD_INT 2
54988: NEG
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55009: LD_ADDR_VAR 0 49
55013: PUSH
55014: LD_INT 3
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 3
55026: PUSH
55027: LD_INT 2
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55038: LD_ADDR_VAR 0 50
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: LD_INT 3
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55067: LD_ADDR_VAR 0 51
55071: PUSH
55072: LD_INT 1
55074: NEG
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: NEG
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55098: LD_ADDR_VAR 0 52
55102: PUSH
55103: LD_INT 3
55105: NEG
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55131: LD_ADDR_VAR 0 53
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: LD_INT 3
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 3
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: LIST
55174: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55175: LD_ADDR_VAR 0 54
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 3
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: LIST
55215: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55216: LD_ADDR_VAR 0 55
55220: PUSH
55221: LD_INT 3
55223: PUSH
55224: LD_INT 2
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 3
55233: PUSH
55234: LD_INT 3
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: LIST
55255: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55256: LD_ADDR_VAR 0 56
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: LD_INT 3
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 1
55283: NEG
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: LIST
55296: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55297: LD_ADDR_VAR 0 57
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 3
55315: NEG
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 3
55326: NEG
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: LIST
55340: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55341: LD_ADDR_VAR 0 58
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: LD_INT 3
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 3
55360: NEG
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 3
55372: NEG
55373: PUSH
55374: LD_INT 3
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: LIST
55386: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55387: LD_ADDR_VAR 0 59
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: LD_INT 2
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 2
55409: NEG
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: LIST
55430: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55431: LD_ADDR_VAR 0 60
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: LIST
55471: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55472: LD_ADDR_VAR 0 61
55476: PUSH
55477: LD_INT 2
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: LD_INT 2
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 2
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: LIST
55511: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55512: LD_ADDR_VAR 0 62
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: LIST
55552: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55553: LD_ADDR_VAR 0 63
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: LIST
55596: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55597: LD_ADDR_VAR 0 64
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 2
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 2
55628: NEG
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: LIST
55642: ST_TO_ADDR
// end ; 2 :
55643: GO 58909
55645: LD_INT 2
55647: DOUBLE
55648: EQUAL
55649: IFTRUE 55653
55651: GO 58908
55653: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55654: LD_ADDR_VAR 0 29
55658: PUSH
55659: LD_INT 4
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 4
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 5
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 5
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 4
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 3
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 3
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 5
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 3
55754: PUSH
55755: LD_INT 3
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 3
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 4
55774: PUSH
55775: LD_INT 3
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 4
55784: PUSH
55785: LD_INT 4
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 3
55794: PUSH
55795: LD_INT 4
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: LD_INT 3
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 4
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: LD_INT 4
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: LD_INT 4
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 3
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: LD_INT 4
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 5
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 5
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: LD_INT 4
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 3
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 2
55916: PUSH
55917: LD_INT 5
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: LD_INT 3
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 3
55937: NEG
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 3
55948: NEG
55949: PUSH
55950: LD_INT 1
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: NEG
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 3
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 4
55993: NEG
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 4
56004: NEG
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 4
56016: NEG
56017: PUSH
56018: LD_INT 2
56020: NEG
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 2
56028: NEG
56029: PUSH
56030: LD_INT 2
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 4
56039: NEG
56040: PUSH
56041: LD_INT 4
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 4
56051: NEG
56052: PUSH
56053: LD_INT 5
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 3
56063: NEG
56064: PUSH
56065: LD_INT 4
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 3
56075: NEG
56076: PUSH
56077: LD_INT 3
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 4
56087: NEG
56088: PUSH
56089: LD_INT 3
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 5
56099: NEG
56100: PUSH
56101: LD_INT 4
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 5
56111: NEG
56112: PUSH
56113: LD_INT 5
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 3
56123: NEG
56124: PUSH
56125: LD_INT 5
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 5
56135: NEG
56136: PUSH
56137: LD_INT 3
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56192: LD_ADDR_VAR 0 30
56196: PUSH
56197: LD_INT 4
56199: PUSH
56200: LD_INT 4
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 4
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 5
56219: PUSH
56220: LD_INT 4
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 5
56229: PUSH
56230: LD_INT 5
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 4
56239: PUSH
56240: LD_INT 5
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 3
56249: PUSH
56250: LD_INT 4
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 3
56259: PUSH
56260: LD_INT 3
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 5
56269: PUSH
56270: LD_INT 3
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 3
56279: PUSH
56280: LD_INT 5
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 0
56289: PUSH
56290: LD_INT 3
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 2
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: LD_INT 4
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: LD_INT 4
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 3
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: LD_INT 2
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: PUSH
56362: LD_INT 4
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 2
56371: NEG
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 4
56382: NEG
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 4
56393: NEG
56394: PUSH
56395: LD_INT 1
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 3
56405: NEG
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 3
56416: NEG
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 4
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 5
56438: NEG
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 5
56449: NEG
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 5
56461: NEG
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 3
56473: NEG
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 3
56484: NEG
56485: PUSH
56486: LD_INT 3
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 3
56496: NEG
56497: PUSH
56498: LD_INT 4
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: NEG
56509: PUSH
56510: LD_INT 3
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 2
56520: NEG
56521: PUSH
56522: LD_INT 2
56524: NEG
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 3
56532: NEG
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 4
56544: NEG
56545: PUSH
56546: LD_INT 3
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 4
56556: NEG
56557: PUSH
56558: LD_INT 4
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 2
56568: NEG
56569: PUSH
56570: LD_INT 4
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 4
56580: NEG
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 4
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 5
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: LD_INT 4
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: LD_INT 3
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: LD_INT 4
56651: NEG
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: LD_INT 5
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: LD_INT 3
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: LD_INT 5
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56739: LD_ADDR_VAR 0 31
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 4
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: LD_INT 3
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 4
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 5
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 5
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: LD_INT 4
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: LD_INT 3
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: PUSH
56819: LD_INT 5
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: LD_INT 3
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 3
56839: NEG
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 3
56850: NEG
56851: PUSH
56852: LD_INT 1
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 2
56862: NEG
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 4
56895: NEG
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: LD_INT 4
56906: NEG
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 4
56918: NEG
56919: PUSH
56920: LD_INT 2
56922: NEG
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 4
56941: NEG
56942: PUSH
56943: LD_INT 4
56945: NEG
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 4
56953: NEG
56954: PUSH
56955: LD_INT 5
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: LD_INT 4
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 3
56977: NEG
56978: PUSH
56979: LD_INT 3
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 4
56989: NEG
56990: PUSH
56991: LD_INT 3
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 5
57001: NEG
57002: PUSH
57003: LD_INT 4
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 5
57013: NEG
57014: PUSH
57015: LD_INT 5
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 3
57025: NEG
57026: PUSH
57027: LD_INT 5
57029: NEG
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 5
57037: NEG
57038: PUSH
57039: LD_INT 3
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 0
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: LD_INT 4
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: LD_INT 3
57074: NEG
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: LD_INT 2
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: LD_INT 3
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 1
57116: NEG
57117: PUSH
57118: LD_INT 4
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: LD_INT 4
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 4
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 4
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 5
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 5
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 4
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 3
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 3
57223: PUSH
57224: LD_INT 2
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 5
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57289: LD_ADDR_VAR 0 32
57293: PUSH
57294: LD_INT 4
57296: NEG
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 4
57307: NEG
57308: PUSH
57309: LD_INT 1
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 3
57319: NEG
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 3
57330: NEG
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 4
57341: NEG
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 5
57352: NEG
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 5
57363: NEG
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 5
57375: NEG
57376: PUSH
57377: LD_INT 2
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 3
57387: NEG
57388: PUSH
57389: LD_INT 2
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 3
57398: NEG
57399: PUSH
57400: LD_INT 3
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 3
57410: NEG
57411: PUSH
57412: LD_INT 4
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: LD_INT 3
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 3
57446: NEG
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 4
57458: NEG
57459: PUSH
57460: LD_INT 3
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 4
57470: NEG
57471: PUSH
57472: LD_INT 4
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: LD_INT 4
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 4
57494: NEG
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 4
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 5
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: LD_INT 4
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: LD_INT 3
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: LD_INT 3
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 4
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: LD_INT 5
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: LD_INT 3
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 2
57596: NEG
57597: PUSH
57598: LD_INT 5
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 3
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 3
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 4
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 4
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 3
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: LD_INT 0
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: PUSH
57681: LD_INT 2
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 4
57691: PUSH
57692: LD_INT 2
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 4
57701: PUSH
57702: LD_INT 4
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 4
57711: PUSH
57712: LD_INT 3
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 5
57721: PUSH
57722: LD_INT 4
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 5
57731: PUSH
57732: LD_INT 5
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 4
57741: PUSH
57742: LD_INT 5
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: PUSH
57752: LD_INT 4
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: LD_INT 3
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 5
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 3
57781: PUSH
57782: LD_INT 5
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57836: LD_ADDR_VAR 0 33
57840: PUSH
57841: LD_INT 4
57843: NEG
57844: PUSH
57845: LD_INT 4
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 4
57855: NEG
57856: PUSH
57857: LD_INT 5
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 3
57867: NEG
57868: PUSH
57869: LD_INT 4
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 3
57879: NEG
57880: PUSH
57881: LD_INT 3
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 4
57891: NEG
57892: PUSH
57893: LD_INT 3
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 5
57903: NEG
57904: PUSH
57905: LD_INT 4
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 5
57915: NEG
57916: PUSH
57917: LD_INT 5
57919: NEG
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 3
57927: NEG
57928: PUSH
57929: LD_INT 5
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 5
57939: NEG
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: LD_INT 3
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: LD_INT 4
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: LD_INT 2
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 3
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: LD_INT 4
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: LD_INT 4
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 4
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 4
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 5
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 5
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 4
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 5
58136: PUSH
58137: LD_INT 2
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 4
58166: PUSH
58167: LD_INT 3
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 4
58176: PUSH
58177: LD_INT 4
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: PUSH
58187: LD_INT 4
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: LD_INT 2
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 4
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: LD_INT 4
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 4
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: LD_INT 4
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 5
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: LD_INT 5
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 4
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: LD_INT 5
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58374: LD_ADDR_VAR 0 34
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: LD_INT 4
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: LD_INT 5
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 4
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: LD_INT 3
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: LD_INT 3
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: LD_INT 4
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: LD_INT 5
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: LD_INT 3
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: LD_INT 5
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 3
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 4
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 4
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: LD_INT 1
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: LD_INT 1
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: LD_INT 2
58558: NEG
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 4
58566: PUSH
58567: LD_INT 2
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 4
58576: PUSH
58577: LD_INT 4
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 4
58586: PUSH
58587: LD_INT 3
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 5
58596: PUSH
58597: LD_INT 4
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 5
58606: PUSH
58607: LD_INT 5
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 4
58616: PUSH
58617: LD_INT 5
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: LD_INT 4
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 3
58636: PUSH
58637: LD_INT 3
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 5
58646: PUSH
58647: LD_INT 3
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 3
58656: PUSH
58657: LD_INT 5
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 3
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: LD_INT 3
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 4
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 4
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 3
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: NEG
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: LD_INT 4
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: LD_INT 2
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 4
58759: NEG
58760: PUSH
58761: LD_INT 0
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 4
58770: NEG
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 3
58782: NEG
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 3
58793: NEG
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 4
58804: NEG
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 5
58815: NEG
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 5
58826: NEG
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 5
58838: NEG
58839: PUSH
58840: LD_INT 2
58842: NEG
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 3
58850: NEG
58851: PUSH
58852: LD_INT 2
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: ST_TO_ADDR
// end ; end ;
58906: GO 58909
58908: POP
// case btype of b_depot , b_warehouse :
58909: LD_VAR 0 1
58913: PUSH
58914: LD_INT 0
58916: DOUBLE
58917: EQUAL
58918: IFTRUE 58928
58920: LD_INT 1
58922: DOUBLE
58923: EQUAL
58924: IFTRUE 58928
58926: GO 59129
58928: POP
// case nation of nation_american :
58929: LD_VAR 0 5
58933: PUSH
58934: LD_INT 1
58936: DOUBLE
58937: EQUAL
58938: IFTRUE 58942
58940: GO 58998
58942: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58943: LD_ADDR_VAR 0 9
58947: PUSH
58948: LD_VAR 0 11
58952: PUSH
58953: LD_VAR 0 12
58957: PUSH
58958: LD_VAR 0 13
58962: PUSH
58963: LD_VAR 0 14
58967: PUSH
58968: LD_VAR 0 15
58972: PUSH
58973: LD_VAR 0 16
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: PUSH
58986: LD_VAR 0 4
58990: PUSH
58991: LD_INT 1
58993: PLUS
58994: ARRAY
58995: ST_TO_ADDR
58996: GO 59127
58998: LD_INT 2
59000: DOUBLE
59001: EQUAL
59002: IFTRUE 59006
59004: GO 59062
59006: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59007: LD_ADDR_VAR 0 9
59011: PUSH
59012: LD_VAR 0 17
59016: PUSH
59017: LD_VAR 0 18
59021: PUSH
59022: LD_VAR 0 19
59026: PUSH
59027: LD_VAR 0 20
59031: PUSH
59032: LD_VAR 0 21
59036: PUSH
59037: LD_VAR 0 22
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: PUSH
59050: LD_VAR 0 4
59054: PUSH
59055: LD_INT 1
59057: PLUS
59058: ARRAY
59059: ST_TO_ADDR
59060: GO 59127
59062: LD_INT 3
59064: DOUBLE
59065: EQUAL
59066: IFTRUE 59070
59068: GO 59126
59070: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59071: LD_ADDR_VAR 0 9
59075: PUSH
59076: LD_VAR 0 23
59080: PUSH
59081: LD_VAR 0 24
59085: PUSH
59086: LD_VAR 0 25
59090: PUSH
59091: LD_VAR 0 26
59095: PUSH
59096: LD_VAR 0 27
59100: PUSH
59101: LD_VAR 0 28
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: PUSH
59114: LD_VAR 0 4
59118: PUSH
59119: LD_INT 1
59121: PLUS
59122: ARRAY
59123: ST_TO_ADDR
59124: GO 59127
59126: POP
59127: GO 59682
59129: LD_INT 2
59131: DOUBLE
59132: EQUAL
59133: IFTRUE 59143
59135: LD_INT 3
59137: DOUBLE
59138: EQUAL
59139: IFTRUE 59143
59141: GO 59199
59143: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59144: LD_ADDR_VAR 0 9
59148: PUSH
59149: LD_VAR 0 29
59153: PUSH
59154: LD_VAR 0 30
59158: PUSH
59159: LD_VAR 0 31
59163: PUSH
59164: LD_VAR 0 32
59168: PUSH
59169: LD_VAR 0 33
59173: PUSH
59174: LD_VAR 0 34
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: PUSH
59187: LD_VAR 0 4
59191: PUSH
59192: LD_INT 1
59194: PLUS
59195: ARRAY
59196: ST_TO_ADDR
59197: GO 59682
59199: LD_INT 16
59201: DOUBLE
59202: EQUAL
59203: IFTRUE 59261
59205: LD_INT 17
59207: DOUBLE
59208: EQUAL
59209: IFTRUE 59261
59211: LD_INT 18
59213: DOUBLE
59214: EQUAL
59215: IFTRUE 59261
59217: LD_INT 19
59219: DOUBLE
59220: EQUAL
59221: IFTRUE 59261
59223: LD_INT 22
59225: DOUBLE
59226: EQUAL
59227: IFTRUE 59261
59229: LD_INT 20
59231: DOUBLE
59232: EQUAL
59233: IFTRUE 59261
59235: LD_INT 21
59237: DOUBLE
59238: EQUAL
59239: IFTRUE 59261
59241: LD_INT 23
59243: DOUBLE
59244: EQUAL
59245: IFTRUE 59261
59247: LD_INT 24
59249: DOUBLE
59250: EQUAL
59251: IFTRUE 59261
59253: LD_INT 25
59255: DOUBLE
59256: EQUAL
59257: IFTRUE 59261
59259: GO 59317
59261: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59262: LD_ADDR_VAR 0 9
59266: PUSH
59267: LD_VAR 0 35
59271: PUSH
59272: LD_VAR 0 36
59276: PUSH
59277: LD_VAR 0 37
59281: PUSH
59282: LD_VAR 0 38
59286: PUSH
59287: LD_VAR 0 39
59291: PUSH
59292: LD_VAR 0 40
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: PUSH
59305: LD_VAR 0 4
59309: PUSH
59310: LD_INT 1
59312: PLUS
59313: ARRAY
59314: ST_TO_ADDR
59315: GO 59682
59317: LD_INT 6
59319: DOUBLE
59320: EQUAL
59321: IFTRUE 59373
59323: LD_INT 7
59325: DOUBLE
59326: EQUAL
59327: IFTRUE 59373
59329: LD_INT 8
59331: DOUBLE
59332: EQUAL
59333: IFTRUE 59373
59335: LD_INT 13
59337: DOUBLE
59338: EQUAL
59339: IFTRUE 59373
59341: LD_INT 12
59343: DOUBLE
59344: EQUAL
59345: IFTRUE 59373
59347: LD_INT 15
59349: DOUBLE
59350: EQUAL
59351: IFTRUE 59373
59353: LD_INT 11
59355: DOUBLE
59356: EQUAL
59357: IFTRUE 59373
59359: LD_INT 14
59361: DOUBLE
59362: EQUAL
59363: IFTRUE 59373
59365: LD_INT 10
59367: DOUBLE
59368: EQUAL
59369: IFTRUE 59373
59371: GO 59429
59373: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59374: LD_ADDR_VAR 0 9
59378: PUSH
59379: LD_VAR 0 41
59383: PUSH
59384: LD_VAR 0 42
59388: PUSH
59389: LD_VAR 0 43
59393: PUSH
59394: LD_VAR 0 44
59398: PUSH
59399: LD_VAR 0 45
59403: PUSH
59404: LD_VAR 0 46
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: PUSH
59417: LD_VAR 0 4
59421: PUSH
59422: LD_INT 1
59424: PLUS
59425: ARRAY
59426: ST_TO_ADDR
59427: GO 59682
59429: LD_INT 36
59431: DOUBLE
59432: EQUAL
59433: IFTRUE 59437
59435: GO 59493
59437: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59438: LD_ADDR_VAR 0 9
59442: PUSH
59443: LD_VAR 0 47
59447: PUSH
59448: LD_VAR 0 48
59452: PUSH
59453: LD_VAR 0 49
59457: PUSH
59458: LD_VAR 0 50
59462: PUSH
59463: LD_VAR 0 51
59467: PUSH
59468: LD_VAR 0 52
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: PUSH
59481: LD_VAR 0 4
59485: PUSH
59486: LD_INT 1
59488: PLUS
59489: ARRAY
59490: ST_TO_ADDR
59491: GO 59682
59493: LD_INT 4
59495: DOUBLE
59496: EQUAL
59497: IFTRUE 59519
59499: LD_INT 5
59501: DOUBLE
59502: EQUAL
59503: IFTRUE 59519
59505: LD_INT 34
59507: DOUBLE
59508: EQUAL
59509: IFTRUE 59519
59511: LD_INT 37
59513: DOUBLE
59514: EQUAL
59515: IFTRUE 59519
59517: GO 59575
59519: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59520: LD_ADDR_VAR 0 9
59524: PUSH
59525: LD_VAR 0 53
59529: PUSH
59530: LD_VAR 0 54
59534: PUSH
59535: LD_VAR 0 55
59539: PUSH
59540: LD_VAR 0 56
59544: PUSH
59545: LD_VAR 0 57
59549: PUSH
59550: LD_VAR 0 58
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: PUSH
59563: LD_VAR 0 4
59567: PUSH
59568: LD_INT 1
59570: PLUS
59571: ARRAY
59572: ST_TO_ADDR
59573: GO 59682
59575: LD_INT 31
59577: DOUBLE
59578: EQUAL
59579: IFTRUE 59625
59581: LD_INT 32
59583: DOUBLE
59584: EQUAL
59585: IFTRUE 59625
59587: LD_INT 33
59589: DOUBLE
59590: EQUAL
59591: IFTRUE 59625
59593: LD_INT 27
59595: DOUBLE
59596: EQUAL
59597: IFTRUE 59625
59599: LD_INT 26
59601: DOUBLE
59602: EQUAL
59603: IFTRUE 59625
59605: LD_INT 28
59607: DOUBLE
59608: EQUAL
59609: IFTRUE 59625
59611: LD_INT 29
59613: DOUBLE
59614: EQUAL
59615: IFTRUE 59625
59617: LD_INT 30
59619: DOUBLE
59620: EQUAL
59621: IFTRUE 59625
59623: GO 59681
59625: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59626: LD_ADDR_VAR 0 9
59630: PUSH
59631: LD_VAR 0 59
59635: PUSH
59636: LD_VAR 0 60
59640: PUSH
59641: LD_VAR 0 61
59645: PUSH
59646: LD_VAR 0 62
59650: PUSH
59651: LD_VAR 0 63
59655: PUSH
59656: LD_VAR 0 64
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: PUSH
59669: LD_VAR 0 4
59673: PUSH
59674: LD_INT 1
59676: PLUS
59677: ARRAY
59678: ST_TO_ADDR
59679: GO 59682
59681: POP
// temp_list2 = [ ] ;
59682: LD_ADDR_VAR 0 10
59686: PUSH
59687: EMPTY
59688: ST_TO_ADDR
// for i in temp_list do
59689: LD_ADDR_VAR 0 8
59693: PUSH
59694: LD_VAR 0 9
59698: PUSH
59699: FOR_IN
59700: IFFALSE 59752
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59702: LD_ADDR_VAR 0 10
59706: PUSH
59707: LD_VAR 0 10
59711: PUSH
59712: LD_VAR 0 8
59716: PUSH
59717: LD_INT 1
59719: ARRAY
59720: PUSH
59721: LD_VAR 0 2
59725: PLUS
59726: PUSH
59727: LD_VAR 0 8
59731: PUSH
59732: LD_INT 2
59734: ARRAY
59735: PUSH
59736: LD_VAR 0 3
59740: PLUS
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: EMPTY
59747: LIST
59748: ADD
59749: ST_TO_ADDR
59750: GO 59699
59752: POP
59753: POP
// result = temp_list2 ;
59754: LD_ADDR_VAR 0 7
59758: PUSH
59759: LD_VAR 0 10
59763: ST_TO_ADDR
// end ;
59764: LD_VAR 0 7
59768: RET
// export function EnemyInRange ( unit , dist ) ; begin
59769: LD_INT 0
59771: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59772: LD_ADDR_VAR 0 3
59776: PUSH
59777: LD_VAR 0 1
59781: PPUSH
59782: CALL_OW 255
59786: PPUSH
59787: LD_VAR 0 1
59791: PPUSH
59792: CALL_OW 250
59796: PPUSH
59797: LD_VAR 0 1
59801: PPUSH
59802: CALL_OW 251
59806: PPUSH
59807: LD_VAR 0 2
59811: PPUSH
59812: CALL 33171 0 4
59816: PUSH
59817: LD_INT 4
59819: ARRAY
59820: ST_TO_ADDR
// end ;
59821: LD_VAR 0 3
59825: RET
// export function PlayerSeeMe ( unit ) ; begin
59826: LD_INT 0
59828: PPUSH
// result := See ( your_side , unit ) ;
59829: LD_ADDR_VAR 0 2
59833: PUSH
59834: LD_OWVAR 2
59838: PPUSH
59839: LD_VAR 0 1
59843: PPUSH
59844: CALL_OW 292
59848: ST_TO_ADDR
// end ;
59849: LD_VAR 0 2
59853: RET
// export function ReverseDir ( unit ) ; begin
59854: LD_INT 0
59856: PPUSH
// if not unit then
59857: LD_VAR 0 1
59861: NOT
59862: IFFALSE 59866
// exit ;
59864: GO 59889
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59866: LD_ADDR_VAR 0 2
59870: PUSH
59871: LD_VAR 0 1
59875: PPUSH
59876: CALL_OW 254
59880: PUSH
59881: LD_INT 3
59883: PLUS
59884: PUSH
59885: LD_INT 6
59887: MOD
59888: ST_TO_ADDR
// end ;
59889: LD_VAR 0 2
59893: RET
// export function ReverseArray ( array ) ; var i ; begin
59894: LD_INT 0
59896: PPUSH
59897: PPUSH
// if not array then
59898: LD_VAR 0 1
59902: NOT
59903: IFFALSE 59907
// exit ;
59905: GO 59962
// result := [ ] ;
59907: LD_ADDR_VAR 0 2
59911: PUSH
59912: EMPTY
59913: ST_TO_ADDR
// for i := array downto 1 do
59914: LD_ADDR_VAR 0 3
59918: PUSH
59919: DOUBLE
59920: LD_VAR 0 1
59924: INC
59925: ST_TO_ADDR
59926: LD_INT 1
59928: PUSH
59929: FOR_DOWNTO
59930: IFFALSE 59960
// result := Join ( result , array [ i ] ) ;
59932: LD_ADDR_VAR 0 2
59936: PUSH
59937: LD_VAR 0 2
59941: PPUSH
59942: LD_VAR 0 1
59946: PUSH
59947: LD_VAR 0 3
59951: ARRAY
59952: PPUSH
59953: CALL 64606 0 2
59957: ST_TO_ADDR
59958: GO 59929
59960: POP
59961: POP
// end ;
59962: LD_VAR 0 2
59966: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59967: LD_INT 0
59969: PPUSH
59970: PPUSH
59971: PPUSH
59972: PPUSH
59973: PPUSH
59974: PPUSH
// if not unit or not hexes then
59975: LD_VAR 0 1
59979: NOT
59980: PUSH
59981: LD_VAR 0 2
59985: NOT
59986: OR
59987: IFFALSE 59991
// exit ;
59989: GO 60114
// dist := 9999 ;
59991: LD_ADDR_VAR 0 5
59995: PUSH
59996: LD_INT 9999
59998: ST_TO_ADDR
// for i = 1 to hexes do
59999: LD_ADDR_VAR 0 4
60003: PUSH
60004: DOUBLE
60005: LD_INT 1
60007: DEC
60008: ST_TO_ADDR
60009: LD_VAR 0 2
60013: PUSH
60014: FOR_TO
60015: IFFALSE 60102
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60017: LD_ADDR_VAR 0 6
60021: PUSH
60022: LD_VAR 0 1
60026: PPUSH
60027: LD_VAR 0 2
60031: PUSH
60032: LD_VAR 0 4
60036: ARRAY
60037: PUSH
60038: LD_INT 1
60040: ARRAY
60041: PPUSH
60042: LD_VAR 0 2
60046: PUSH
60047: LD_VAR 0 4
60051: ARRAY
60052: PUSH
60053: LD_INT 2
60055: ARRAY
60056: PPUSH
60057: CALL_OW 297
60061: ST_TO_ADDR
// if tdist < dist then
60062: LD_VAR 0 6
60066: PUSH
60067: LD_VAR 0 5
60071: LESS
60072: IFFALSE 60100
// begin hex := hexes [ i ] ;
60074: LD_ADDR_VAR 0 8
60078: PUSH
60079: LD_VAR 0 2
60083: PUSH
60084: LD_VAR 0 4
60088: ARRAY
60089: ST_TO_ADDR
// dist := tdist ;
60090: LD_ADDR_VAR 0 5
60094: PUSH
60095: LD_VAR 0 6
60099: ST_TO_ADDR
// end ; end ;
60100: GO 60014
60102: POP
60103: POP
// result := hex ;
60104: LD_ADDR_VAR 0 3
60108: PUSH
60109: LD_VAR 0 8
60113: ST_TO_ADDR
// end ;
60114: LD_VAR 0 3
60118: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60119: LD_INT 0
60121: PPUSH
60122: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60123: LD_VAR 0 1
60127: NOT
60128: PUSH
60129: LD_VAR 0 1
60133: PUSH
60134: LD_INT 21
60136: PUSH
60137: LD_INT 2
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 23
60146: PUSH
60147: LD_INT 2
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PPUSH
60158: CALL_OW 69
60162: IN
60163: NOT
60164: OR
60165: IFFALSE 60169
// exit ;
60167: GO 60216
// for i = 1 to 3 do
60169: LD_ADDR_VAR 0 3
60173: PUSH
60174: DOUBLE
60175: LD_INT 1
60177: DEC
60178: ST_TO_ADDR
60179: LD_INT 3
60181: PUSH
60182: FOR_TO
60183: IFFALSE 60214
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60185: LD_VAR 0 1
60189: PPUSH
60190: CALL_OW 250
60194: PPUSH
60195: LD_VAR 0 1
60199: PPUSH
60200: CALL_OW 251
60204: PPUSH
60205: LD_INT 1
60207: PPUSH
60208: CALL_OW 453
60212: GO 60182
60214: POP
60215: POP
// end ;
60216: LD_VAR 0 2
60220: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60221: LD_INT 0
60223: PPUSH
60224: PPUSH
60225: PPUSH
60226: PPUSH
60227: PPUSH
60228: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60229: LD_VAR 0 1
60233: NOT
60234: PUSH
60235: LD_VAR 0 2
60239: NOT
60240: OR
60241: PUSH
60242: LD_VAR 0 1
60246: PPUSH
60247: CALL_OW 314
60251: OR
60252: IFFALSE 60256
// exit ;
60254: GO 60723
// if GetLives ( i ) < 250 then
60256: LD_VAR 0 4
60260: PPUSH
60261: CALL_OW 256
60265: PUSH
60266: LD_INT 250
60268: LESS
60269: IFFALSE 60282
// begin ComAutodestruct ( i ) ;
60271: LD_VAR 0 4
60275: PPUSH
60276: CALL 60119 0 1
// exit ;
60280: GO 60723
// end ; x := GetX ( enemy_unit ) ;
60282: LD_ADDR_VAR 0 7
60286: PUSH
60287: LD_VAR 0 2
60291: PPUSH
60292: CALL_OW 250
60296: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60297: LD_ADDR_VAR 0 8
60301: PUSH
60302: LD_VAR 0 2
60306: PPUSH
60307: CALL_OW 251
60311: ST_TO_ADDR
// if not x or not y then
60312: LD_VAR 0 7
60316: NOT
60317: PUSH
60318: LD_VAR 0 8
60322: NOT
60323: OR
60324: IFFALSE 60328
// exit ;
60326: GO 60723
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60328: LD_ADDR_VAR 0 6
60332: PUSH
60333: LD_VAR 0 7
60337: PPUSH
60338: LD_INT 0
60340: PPUSH
60341: LD_INT 4
60343: PPUSH
60344: CALL_OW 272
60348: PUSH
60349: LD_VAR 0 8
60353: PPUSH
60354: LD_INT 0
60356: PPUSH
60357: LD_INT 4
60359: PPUSH
60360: CALL_OW 273
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_VAR 0 7
60373: PPUSH
60374: LD_INT 1
60376: PPUSH
60377: LD_INT 4
60379: PPUSH
60380: CALL_OW 272
60384: PUSH
60385: LD_VAR 0 8
60389: PPUSH
60390: LD_INT 1
60392: PPUSH
60393: LD_INT 4
60395: PPUSH
60396: CALL_OW 273
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_VAR 0 7
60409: PPUSH
60410: LD_INT 2
60412: PPUSH
60413: LD_INT 4
60415: PPUSH
60416: CALL_OW 272
60420: PUSH
60421: LD_VAR 0 8
60425: PPUSH
60426: LD_INT 2
60428: PPUSH
60429: LD_INT 4
60431: PPUSH
60432: CALL_OW 273
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_VAR 0 7
60445: PPUSH
60446: LD_INT 3
60448: PPUSH
60449: LD_INT 4
60451: PPUSH
60452: CALL_OW 272
60456: PUSH
60457: LD_VAR 0 8
60461: PPUSH
60462: LD_INT 3
60464: PPUSH
60465: LD_INT 4
60467: PPUSH
60468: CALL_OW 273
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_VAR 0 7
60481: PPUSH
60482: LD_INT 4
60484: PPUSH
60485: LD_INT 4
60487: PPUSH
60488: CALL_OW 272
60492: PUSH
60493: LD_VAR 0 8
60497: PPUSH
60498: LD_INT 4
60500: PPUSH
60501: LD_INT 4
60503: PPUSH
60504: CALL_OW 273
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_VAR 0 7
60517: PPUSH
60518: LD_INT 5
60520: PPUSH
60521: LD_INT 4
60523: PPUSH
60524: CALL_OW 272
60528: PUSH
60529: LD_VAR 0 8
60533: PPUSH
60534: LD_INT 5
60536: PPUSH
60537: LD_INT 4
60539: PPUSH
60540: CALL_OW 273
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: ST_TO_ADDR
// for i = tmp downto 1 do
60557: LD_ADDR_VAR 0 4
60561: PUSH
60562: DOUBLE
60563: LD_VAR 0 6
60567: INC
60568: ST_TO_ADDR
60569: LD_INT 1
60571: PUSH
60572: FOR_DOWNTO
60573: IFFALSE 60674
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60575: LD_VAR 0 6
60579: PUSH
60580: LD_VAR 0 4
60584: ARRAY
60585: PUSH
60586: LD_INT 1
60588: ARRAY
60589: PPUSH
60590: LD_VAR 0 6
60594: PUSH
60595: LD_VAR 0 4
60599: ARRAY
60600: PUSH
60601: LD_INT 2
60603: ARRAY
60604: PPUSH
60605: CALL_OW 488
60609: NOT
60610: PUSH
60611: LD_VAR 0 6
60615: PUSH
60616: LD_VAR 0 4
60620: ARRAY
60621: PUSH
60622: LD_INT 1
60624: ARRAY
60625: PPUSH
60626: LD_VAR 0 6
60630: PUSH
60631: LD_VAR 0 4
60635: ARRAY
60636: PUSH
60637: LD_INT 2
60639: ARRAY
60640: PPUSH
60641: CALL_OW 428
60645: PUSH
60646: LD_INT 0
60648: NONEQUAL
60649: OR
60650: IFFALSE 60672
// tmp := Delete ( tmp , i ) ;
60652: LD_ADDR_VAR 0 6
60656: PUSH
60657: LD_VAR 0 6
60661: PPUSH
60662: LD_VAR 0 4
60666: PPUSH
60667: CALL_OW 3
60671: ST_TO_ADDR
60672: GO 60572
60674: POP
60675: POP
// j := GetClosestHex ( unit , tmp ) ;
60676: LD_ADDR_VAR 0 5
60680: PUSH
60681: LD_VAR 0 1
60685: PPUSH
60686: LD_VAR 0 6
60690: PPUSH
60691: CALL 59967 0 2
60695: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60696: LD_VAR 0 1
60700: PPUSH
60701: LD_VAR 0 5
60705: PUSH
60706: LD_INT 1
60708: ARRAY
60709: PPUSH
60710: LD_VAR 0 5
60714: PUSH
60715: LD_INT 2
60717: ARRAY
60718: PPUSH
60719: CALL_OW 111
// end ;
60723: LD_VAR 0 3
60727: RET
// export function PrepareApemanSoldier ( ) ; begin
60728: LD_INT 0
60730: PPUSH
// uc_nation := 0 ;
60731: LD_ADDR_OWVAR 21
60735: PUSH
60736: LD_INT 0
60738: ST_TO_ADDR
// hc_sex := sex_male ;
60739: LD_ADDR_OWVAR 27
60743: PUSH
60744: LD_INT 1
60746: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60747: LD_ADDR_OWVAR 28
60751: PUSH
60752: LD_INT 15
60754: ST_TO_ADDR
// hc_gallery :=  ;
60755: LD_ADDR_OWVAR 33
60759: PUSH
60760: LD_STRING 
60762: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60763: LD_ADDR_OWVAR 31
60767: PUSH
60768: LD_INT 0
60770: PPUSH
60771: LD_INT 3
60773: PPUSH
60774: CALL_OW 12
60778: PUSH
60779: LD_INT 0
60781: PPUSH
60782: LD_INT 3
60784: PPUSH
60785: CALL_OW 12
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: ST_TO_ADDR
// end ;
60802: LD_VAR 0 1
60806: RET
// export function PrepareApemanEngineer ( ) ; begin
60807: LD_INT 0
60809: PPUSH
// uc_nation := 0 ;
60810: LD_ADDR_OWVAR 21
60814: PUSH
60815: LD_INT 0
60817: ST_TO_ADDR
// hc_sex := sex_male ;
60818: LD_ADDR_OWVAR 27
60822: PUSH
60823: LD_INT 1
60825: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60826: LD_ADDR_OWVAR 28
60830: PUSH
60831: LD_INT 16
60833: ST_TO_ADDR
// hc_gallery :=  ;
60834: LD_ADDR_OWVAR 33
60838: PUSH
60839: LD_STRING 
60841: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60842: LD_ADDR_OWVAR 31
60846: PUSH
60847: LD_INT 0
60849: PPUSH
60850: LD_INT 3
60852: PPUSH
60853: CALL_OW 12
60857: PUSH
60858: LD_INT 0
60860: PPUSH
60861: LD_INT 3
60863: PPUSH
60864: CALL_OW 12
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: ST_TO_ADDR
// end ;
60881: LD_VAR 0 1
60885: RET
// export function PrepareApeman ( agressivity ) ; begin
60886: LD_INT 0
60888: PPUSH
// uc_side := 0 ;
60889: LD_ADDR_OWVAR 20
60893: PUSH
60894: LD_INT 0
60896: ST_TO_ADDR
// uc_nation := 0 ;
60897: LD_ADDR_OWVAR 21
60901: PUSH
60902: LD_INT 0
60904: ST_TO_ADDR
// hc_sex := sex_male ;
60905: LD_ADDR_OWVAR 27
60909: PUSH
60910: LD_INT 1
60912: ST_TO_ADDR
// hc_class := class_apeman ;
60913: LD_ADDR_OWVAR 28
60917: PUSH
60918: LD_INT 12
60920: ST_TO_ADDR
// hc_gallery :=  ;
60921: LD_ADDR_OWVAR 33
60925: PUSH
60926: LD_STRING 
60928: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60929: LD_ADDR_OWVAR 35
60933: PUSH
60934: LD_VAR 0 1
60938: NEG
60939: PPUSH
60940: LD_VAR 0 1
60944: PPUSH
60945: CALL_OW 12
60949: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60950: LD_ADDR_OWVAR 31
60954: PUSH
60955: LD_INT 0
60957: PPUSH
60958: LD_INT 3
60960: PPUSH
60961: CALL_OW 12
60965: PUSH
60966: LD_INT 0
60968: PPUSH
60969: LD_INT 3
60971: PPUSH
60972: CALL_OW 12
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: ST_TO_ADDR
// end ;
60989: LD_VAR 0 2
60993: RET
// export function PrepareTiger ( agressivity ) ; begin
60994: LD_INT 0
60996: PPUSH
// uc_side := 0 ;
60997: LD_ADDR_OWVAR 20
61001: PUSH
61002: LD_INT 0
61004: ST_TO_ADDR
// uc_nation := 0 ;
61005: LD_ADDR_OWVAR 21
61009: PUSH
61010: LD_INT 0
61012: ST_TO_ADDR
// hc_class := class_tiger ;
61013: LD_ADDR_OWVAR 28
61017: PUSH
61018: LD_INT 14
61020: ST_TO_ADDR
// hc_gallery :=  ;
61021: LD_ADDR_OWVAR 33
61025: PUSH
61026: LD_STRING 
61028: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61029: LD_ADDR_OWVAR 35
61033: PUSH
61034: LD_VAR 0 1
61038: NEG
61039: PPUSH
61040: LD_VAR 0 1
61044: PPUSH
61045: CALL_OW 12
61049: ST_TO_ADDR
// end ;
61050: LD_VAR 0 2
61054: RET
// export function PrepareEnchidna ( ) ; begin
61055: LD_INT 0
61057: PPUSH
// uc_side := 0 ;
61058: LD_ADDR_OWVAR 20
61062: PUSH
61063: LD_INT 0
61065: ST_TO_ADDR
// uc_nation := 0 ;
61066: LD_ADDR_OWVAR 21
61070: PUSH
61071: LD_INT 0
61073: ST_TO_ADDR
// hc_class := class_baggie ;
61074: LD_ADDR_OWVAR 28
61078: PUSH
61079: LD_INT 13
61081: ST_TO_ADDR
// hc_gallery :=  ;
61082: LD_ADDR_OWVAR 33
61086: PUSH
61087: LD_STRING 
61089: ST_TO_ADDR
// end ;
61090: LD_VAR 0 1
61094: RET
// export function PrepareFrog ( ) ; begin
61095: LD_INT 0
61097: PPUSH
// uc_side := 0 ;
61098: LD_ADDR_OWVAR 20
61102: PUSH
61103: LD_INT 0
61105: ST_TO_ADDR
// uc_nation := 0 ;
61106: LD_ADDR_OWVAR 21
61110: PUSH
61111: LD_INT 0
61113: ST_TO_ADDR
// hc_class := class_frog ;
61114: LD_ADDR_OWVAR 28
61118: PUSH
61119: LD_INT 19
61121: ST_TO_ADDR
// hc_gallery :=  ;
61122: LD_ADDR_OWVAR 33
61126: PUSH
61127: LD_STRING 
61129: ST_TO_ADDR
// end ;
61130: LD_VAR 0 1
61134: RET
// export function PrepareFish ( ) ; begin
61135: LD_INT 0
61137: PPUSH
// uc_side := 0 ;
61138: LD_ADDR_OWVAR 20
61142: PUSH
61143: LD_INT 0
61145: ST_TO_ADDR
// uc_nation := 0 ;
61146: LD_ADDR_OWVAR 21
61150: PUSH
61151: LD_INT 0
61153: ST_TO_ADDR
// hc_class := class_fish ;
61154: LD_ADDR_OWVAR 28
61158: PUSH
61159: LD_INT 20
61161: ST_TO_ADDR
// hc_gallery :=  ;
61162: LD_ADDR_OWVAR 33
61166: PUSH
61167: LD_STRING 
61169: ST_TO_ADDR
// end ;
61170: LD_VAR 0 1
61174: RET
// export function PrepareBird ( ) ; begin
61175: LD_INT 0
61177: PPUSH
// uc_side := 0 ;
61178: LD_ADDR_OWVAR 20
61182: PUSH
61183: LD_INT 0
61185: ST_TO_ADDR
// uc_nation := 0 ;
61186: LD_ADDR_OWVAR 21
61190: PUSH
61191: LD_INT 0
61193: ST_TO_ADDR
// hc_class := class_phororhacos ;
61194: LD_ADDR_OWVAR 28
61198: PUSH
61199: LD_INT 18
61201: ST_TO_ADDR
// hc_gallery :=  ;
61202: LD_ADDR_OWVAR 33
61206: PUSH
61207: LD_STRING 
61209: ST_TO_ADDR
// end ;
61210: LD_VAR 0 1
61214: RET
// export function PrepareHorse ( ) ; begin
61215: LD_INT 0
61217: PPUSH
// uc_side := 0 ;
61218: LD_ADDR_OWVAR 20
61222: PUSH
61223: LD_INT 0
61225: ST_TO_ADDR
// uc_nation := 0 ;
61226: LD_ADDR_OWVAR 21
61230: PUSH
61231: LD_INT 0
61233: ST_TO_ADDR
// hc_class := class_horse ;
61234: LD_ADDR_OWVAR 28
61238: PUSH
61239: LD_INT 21
61241: ST_TO_ADDR
// hc_gallery :=  ;
61242: LD_ADDR_OWVAR 33
61246: PUSH
61247: LD_STRING 
61249: ST_TO_ADDR
// end ;
61250: LD_VAR 0 1
61254: RET
// export function PrepareMastodont ( ) ; begin
61255: LD_INT 0
61257: PPUSH
// uc_side := 0 ;
61258: LD_ADDR_OWVAR 20
61262: PUSH
61263: LD_INT 0
61265: ST_TO_ADDR
// uc_nation := 0 ;
61266: LD_ADDR_OWVAR 21
61270: PUSH
61271: LD_INT 0
61273: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61274: LD_ADDR_OWVAR 37
61278: PUSH
61279: LD_INT 31
61281: ST_TO_ADDR
// vc_control := control_rider ;
61282: LD_ADDR_OWVAR 38
61286: PUSH
61287: LD_INT 4
61289: ST_TO_ADDR
// end ;
61290: LD_VAR 0 1
61294: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61295: LD_INT 0
61297: PPUSH
61298: PPUSH
61299: PPUSH
// uc_side = 0 ;
61300: LD_ADDR_OWVAR 20
61304: PUSH
61305: LD_INT 0
61307: ST_TO_ADDR
// uc_nation = 0 ;
61308: LD_ADDR_OWVAR 21
61312: PUSH
61313: LD_INT 0
61315: ST_TO_ADDR
// InitHc_All ( ) ;
61316: CALL_OW 584
// InitVc ;
61320: CALL_OW 20
// if mastodonts then
61324: LD_VAR 0 6
61328: IFFALSE 61395
// for i = 1 to mastodonts do
61330: LD_ADDR_VAR 0 11
61334: PUSH
61335: DOUBLE
61336: LD_INT 1
61338: DEC
61339: ST_TO_ADDR
61340: LD_VAR 0 6
61344: PUSH
61345: FOR_TO
61346: IFFALSE 61393
// begin vc_chassis := 31 ;
61348: LD_ADDR_OWVAR 37
61352: PUSH
61353: LD_INT 31
61355: ST_TO_ADDR
// vc_control := control_rider ;
61356: LD_ADDR_OWVAR 38
61360: PUSH
61361: LD_INT 4
61363: ST_TO_ADDR
// animal := CreateVehicle ;
61364: LD_ADDR_VAR 0 12
61368: PUSH
61369: CALL_OW 45
61373: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61374: LD_VAR 0 12
61378: PPUSH
61379: LD_VAR 0 8
61383: PPUSH
61384: LD_INT 0
61386: PPUSH
61387: CALL 63523 0 3
// end ;
61391: GO 61345
61393: POP
61394: POP
// if horses then
61395: LD_VAR 0 5
61399: IFFALSE 61466
// for i = 1 to horses do
61401: LD_ADDR_VAR 0 11
61405: PUSH
61406: DOUBLE
61407: LD_INT 1
61409: DEC
61410: ST_TO_ADDR
61411: LD_VAR 0 5
61415: PUSH
61416: FOR_TO
61417: IFFALSE 61464
// begin hc_class := 21 ;
61419: LD_ADDR_OWVAR 28
61423: PUSH
61424: LD_INT 21
61426: ST_TO_ADDR
// hc_gallery :=  ;
61427: LD_ADDR_OWVAR 33
61431: PUSH
61432: LD_STRING 
61434: ST_TO_ADDR
// animal := CreateHuman ;
61435: LD_ADDR_VAR 0 12
61439: PUSH
61440: CALL_OW 44
61444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61445: LD_VAR 0 12
61449: PPUSH
61450: LD_VAR 0 8
61454: PPUSH
61455: LD_INT 0
61457: PPUSH
61458: CALL 63523 0 3
// end ;
61462: GO 61416
61464: POP
61465: POP
// if birds then
61466: LD_VAR 0 1
61470: IFFALSE 61537
// for i = 1 to birds do
61472: LD_ADDR_VAR 0 11
61476: PUSH
61477: DOUBLE
61478: LD_INT 1
61480: DEC
61481: ST_TO_ADDR
61482: LD_VAR 0 1
61486: PUSH
61487: FOR_TO
61488: IFFALSE 61535
// begin hc_class = 18 ;
61490: LD_ADDR_OWVAR 28
61494: PUSH
61495: LD_INT 18
61497: ST_TO_ADDR
// hc_gallery =  ;
61498: LD_ADDR_OWVAR 33
61502: PUSH
61503: LD_STRING 
61505: ST_TO_ADDR
// animal := CreateHuman ;
61506: LD_ADDR_VAR 0 12
61510: PUSH
61511: CALL_OW 44
61515: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61516: LD_VAR 0 12
61520: PPUSH
61521: LD_VAR 0 8
61525: PPUSH
61526: LD_INT 0
61528: PPUSH
61529: CALL 63523 0 3
// end ;
61533: GO 61487
61535: POP
61536: POP
// if tigers then
61537: LD_VAR 0 2
61541: IFFALSE 61625
// for i = 1 to tigers do
61543: LD_ADDR_VAR 0 11
61547: PUSH
61548: DOUBLE
61549: LD_INT 1
61551: DEC
61552: ST_TO_ADDR
61553: LD_VAR 0 2
61557: PUSH
61558: FOR_TO
61559: IFFALSE 61623
// begin hc_class = class_tiger ;
61561: LD_ADDR_OWVAR 28
61565: PUSH
61566: LD_INT 14
61568: ST_TO_ADDR
// hc_gallery =  ;
61569: LD_ADDR_OWVAR 33
61573: PUSH
61574: LD_STRING 
61576: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61577: LD_ADDR_OWVAR 35
61581: PUSH
61582: LD_INT 7
61584: NEG
61585: PPUSH
61586: LD_INT 7
61588: PPUSH
61589: CALL_OW 12
61593: ST_TO_ADDR
// animal := CreateHuman ;
61594: LD_ADDR_VAR 0 12
61598: PUSH
61599: CALL_OW 44
61603: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61604: LD_VAR 0 12
61608: PPUSH
61609: LD_VAR 0 8
61613: PPUSH
61614: LD_INT 0
61616: PPUSH
61617: CALL 63523 0 3
// end ;
61621: GO 61558
61623: POP
61624: POP
// if apemans then
61625: LD_VAR 0 3
61629: IFFALSE 61752
// for i = 1 to apemans do
61631: LD_ADDR_VAR 0 11
61635: PUSH
61636: DOUBLE
61637: LD_INT 1
61639: DEC
61640: ST_TO_ADDR
61641: LD_VAR 0 3
61645: PUSH
61646: FOR_TO
61647: IFFALSE 61750
// begin hc_class = class_apeman ;
61649: LD_ADDR_OWVAR 28
61653: PUSH
61654: LD_INT 12
61656: ST_TO_ADDR
// hc_gallery =  ;
61657: LD_ADDR_OWVAR 33
61661: PUSH
61662: LD_STRING 
61664: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61665: LD_ADDR_OWVAR 35
61669: PUSH
61670: LD_INT 2
61672: NEG
61673: PPUSH
61674: LD_INT 2
61676: PPUSH
61677: CALL_OW 12
61681: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61682: LD_ADDR_OWVAR 31
61686: PUSH
61687: LD_INT 1
61689: PPUSH
61690: LD_INT 3
61692: PPUSH
61693: CALL_OW 12
61697: PUSH
61698: LD_INT 1
61700: PPUSH
61701: LD_INT 3
61703: PPUSH
61704: CALL_OW 12
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: ST_TO_ADDR
// animal := CreateHuman ;
61721: LD_ADDR_VAR 0 12
61725: PUSH
61726: CALL_OW 44
61730: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61731: LD_VAR 0 12
61735: PPUSH
61736: LD_VAR 0 8
61740: PPUSH
61741: LD_INT 0
61743: PPUSH
61744: CALL 63523 0 3
// end ;
61748: GO 61646
61750: POP
61751: POP
// if enchidnas then
61752: LD_VAR 0 4
61756: IFFALSE 61823
// for i = 1 to enchidnas do
61758: LD_ADDR_VAR 0 11
61762: PUSH
61763: DOUBLE
61764: LD_INT 1
61766: DEC
61767: ST_TO_ADDR
61768: LD_VAR 0 4
61772: PUSH
61773: FOR_TO
61774: IFFALSE 61821
// begin hc_class = 13 ;
61776: LD_ADDR_OWVAR 28
61780: PUSH
61781: LD_INT 13
61783: ST_TO_ADDR
// hc_gallery =  ;
61784: LD_ADDR_OWVAR 33
61788: PUSH
61789: LD_STRING 
61791: ST_TO_ADDR
// animal := CreateHuman ;
61792: LD_ADDR_VAR 0 12
61796: PUSH
61797: CALL_OW 44
61801: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61802: LD_VAR 0 12
61806: PPUSH
61807: LD_VAR 0 8
61811: PPUSH
61812: LD_INT 0
61814: PPUSH
61815: CALL 63523 0 3
// end ;
61819: GO 61773
61821: POP
61822: POP
// if fishes then
61823: LD_VAR 0 7
61827: IFFALSE 61894
// for i = 1 to fishes do
61829: LD_ADDR_VAR 0 11
61833: PUSH
61834: DOUBLE
61835: LD_INT 1
61837: DEC
61838: ST_TO_ADDR
61839: LD_VAR 0 7
61843: PUSH
61844: FOR_TO
61845: IFFALSE 61892
// begin hc_class = 20 ;
61847: LD_ADDR_OWVAR 28
61851: PUSH
61852: LD_INT 20
61854: ST_TO_ADDR
// hc_gallery =  ;
61855: LD_ADDR_OWVAR 33
61859: PUSH
61860: LD_STRING 
61862: ST_TO_ADDR
// animal := CreateHuman ;
61863: LD_ADDR_VAR 0 12
61867: PUSH
61868: CALL_OW 44
61872: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61873: LD_VAR 0 12
61877: PPUSH
61878: LD_VAR 0 9
61882: PPUSH
61883: LD_INT 0
61885: PPUSH
61886: CALL 63523 0 3
// end ;
61890: GO 61844
61892: POP
61893: POP
// end ;
61894: LD_VAR 0 10
61898: RET
// export function WantHeal ( sci , unit ) ; begin
61899: LD_INT 0
61901: PPUSH
// if GetTaskList ( sci ) > 0 then
61902: LD_VAR 0 1
61906: PPUSH
61907: CALL_OW 437
61911: PUSH
61912: LD_INT 0
61914: GREATER
61915: IFFALSE 61985
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61917: LD_VAR 0 1
61921: PPUSH
61922: CALL_OW 437
61926: PUSH
61927: LD_INT 1
61929: ARRAY
61930: PUSH
61931: LD_INT 1
61933: ARRAY
61934: PUSH
61935: LD_STRING l
61937: EQUAL
61938: PUSH
61939: LD_VAR 0 1
61943: PPUSH
61944: CALL_OW 437
61948: PUSH
61949: LD_INT 1
61951: ARRAY
61952: PUSH
61953: LD_INT 4
61955: ARRAY
61956: PUSH
61957: LD_VAR 0 2
61961: EQUAL
61962: AND
61963: IFFALSE 61975
// result := true else
61965: LD_ADDR_VAR 0 3
61969: PUSH
61970: LD_INT 1
61972: ST_TO_ADDR
61973: GO 61983
// result := false ;
61975: LD_ADDR_VAR 0 3
61979: PUSH
61980: LD_INT 0
61982: ST_TO_ADDR
// end else
61983: GO 61993
// result := false ;
61985: LD_ADDR_VAR 0 3
61989: PUSH
61990: LD_INT 0
61992: ST_TO_ADDR
// end ;
61993: LD_VAR 0 3
61997: RET
// export function HealTarget ( sci ) ; begin
61998: LD_INT 0
62000: PPUSH
// if not sci then
62001: LD_VAR 0 1
62005: NOT
62006: IFFALSE 62010
// exit ;
62008: GO 62075
// result := 0 ;
62010: LD_ADDR_VAR 0 2
62014: PUSH
62015: LD_INT 0
62017: ST_TO_ADDR
// if GetTaskList ( sci ) then
62018: LD_VAR 0 1
62022: PPUSH
62023: CALL_OW 437
62027: IFFALSE 62075
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62029: LD_VAR 0 1
62033: PPUSH
62034: CALL_OW 437
62038: PUSH
62039: LD_INT 1
62041: ARRAY
62042: PUSH
62043: LD_INT 1
62045: ARRAY
62046: PUSH
62047: LD_STRING l
62049: EQUAL
62050: IFFALSE 62075
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62052: LD_ADDR_VAR 0 2
62056: PUSH
62057: LD_VAR 0 1
62061: PPUSH
62062: CALL_OW 437
62066: PUSH
62067: LD_INT 1
62069: ARRAY
62070: PUSH
62071: LD_INT 4
62073: ARRAY
62074: ST_TO_ADDR
// end ;
62075: LD_VAR 0 2
62079: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62080: LD_INT 0
62082: PPUSH
62083: PPUSH
62084: PPUSH
62085: PPUSH
// if not base_units then
62086: LD_VAR 0 1
62090: NOT
62091: IFFALSE 62095
// exit ;
62093: GO 62182
// result := false ;
62095: LD_ADDR_VAR 0 2
62099: PUSH
62100: LD_INT 0
62102: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62103: LD_ADDR_VAR 0 5
62107: PUSH
62108: LD_VAR 0 1
62112: PPUSH
62113: LD_INT 21
62115: PUSH
62116: LD_INT 3
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PPUSH
62123: CALL_OW 72
62127: ST_TO_ADDR
// if not tmp then
62128: LD_VAR 0 5
62132: NOT
62133: IFFALSE 62137
// exit ;
62135: GO 62182
// for i in tmp do
62137: LD_ADDR_VAR 0 3
62141: PUSH
62142: LD_VAR 0 5
62146: PUSH
62147: FOR_IN
62148: IFFALSE 62180
// begin result := EnemyInRange ( i , 22 ) ;
62150: LD_ADDR_VAR 0 2
62154: PUSH
62155: LD_VAR 0 3
62159: PPUSH
62160: LD_INT 22
62162: PPUSH
62163: CALL 59769 0 2
62167: ST_TO_ADDR
// if result then
62168: LD_VAR 0 2
62172: IFFALSE 62178
// exit ;
62174: POP
62175: POP
62176: GO 62182
// end ;
62178: GO 62147
62180: POP
62181: POP
// end ;
62182: LD_VAR 0 2
62186: RET
// export function FilterByTag ( units , tag ) ; begin
62187: LD_INT 0
62189: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62190: LD_ADDR_VAR 0 3
62194: PUSH
62195: LD_VAR 0 1
62199: PPUSH
62200: LD_INT 120
62202: PUSH
62203: LD_VAR 0 2
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PPUSH
62212: CALL_OW 72
62216: ST_TO_ADDR
// end ;
62217: LD_VAR 0 3
62221: RET
// export function IsDriver ( un ) ; begin
62222: LD_INT 0
62224: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62225: LD_ADDR_VAR 0 2
62229: PUSH
62230: LD_VAR 0 1
62234: PUSH
62235: LD_INT 55
62237: PUSH
62238: EMPTY
62239: LIST
62240: PPUSH
62241: CALL_OW 69
62245: IN
62246: ST_TO_ADDR
// end ;
62247: LD_VAR 0 2
62251: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62252: LD_INT 0
62254: PPUSH
62255: PPUSH
// list := [ ] ;
62256: LD_ADDR_VAR 0 5
62260: PUSH
62261: EMPTY
62262: ST_TO_ADDR
// case d of 0 :
62263: LD_VAR 0 3
62267: PUSH
62268: LD_INT 0
62270: DOUBLE
62271: EQUAL
62272: IFTRUE 62276
62274: GO 62409
62276: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62277: LD_ADDR_VAR 0 5
62281: PUSH
62282: LD_VAR 0 1
62286: PUSH
62287: LD_INT 4
62289: MINUS
62290: PUSH
62291: LD_VAR 0 2
62295: PUSH
62296: LD_INT 4
62298: MINUS
62299: PUSH
62300: LD_INT 2
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: LIST
62307: PUSH
62308: LD_VAR 0 1
62312: PUSH
62313: LD_INT 3
62315: MINUS
62316: PUSH
62317: LD_VAR 0 2
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: LIST
62329: PUSH
62330: LD_VAR 0 1
62334: PUSH
62335: LD_INT 4
62337: PLUS
62338: PUSH
62339: LD_VAR 0 2
62343: PUSH
62344: LD_INT 4
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: LIST
62351: PUSH
62352: LD_VAR 0 1
62356: PUSH
62357: LD_INT 3
62359: PLUS
62360: PUSH
62361: LD_VAR 0 2
62365: PUSH
62366: LD_INT 3
62368: PLUS
62369: PUSH
62370: LD_INT 5
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: LIST
62377: PUSH
62378: LD_VAR 0 1
62382: PUSH
62383: LD_VAR 0 2
62387: PUSH
62388: LD_INT 4
62390: PLUS
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: LIST
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: ST_TO_ADDR
// end ; 1 :
62407: GO 63107
62409: LD_INT 1
62411: DOUBLE
62412: EQUAL
62413: IFTRUE 62417
62415: GO 62550
62417: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62418: LD_ADDR_VAR 0 5
62422: PUSH
62423: LD_VAR 0 1
62427: PUSH
62428: LD_VAR 0 2
62432: PUSH
62433: LD_INT 4
62435: MINUS
62436: PUSH
62437: LD_INT 3
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: LIST
62444: PUSH
62445: LD_VAR 0 1
62449: PUSH
62450: LD_INT 3
62452: MINUS
62453: PUSH
62454: LD_VAR 0 2
62458: PUSH
62459: LD_INT 3
62461: MINUS
62462: PUSH
62463: LD_INT 2
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: LIST
62470: PUSH
62471: LD_VAR 0 1
62475: PUSH
62476: LD_INT 4
62478: MINUS
62479: PUSH
62480: LD_VAR 0 2
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: LIST
62492: PUSH
62493: LD_VAR 0 1
62497: PUSH
62498: LD_VAR 0 2
62502: PUSH
62503: LD_INT 3
62505: PLUS
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: LIST
62514: PUSH
62515: LD_VAR 0 1
62519: PUSH
62520: LD_INT 4
62522: PLUS
62523: PUSH
62524: LD_VAR 0 2
62528: PUSH
62529: LD_INT 4
62531: PLUS
62532: PUSH
62533: LD_INT 5
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: LIST
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: ST_TO_ADDR
// end ; 2 :
62548: GO 63107
62550: LD_INT 2
62552: DOUBLE
62553: EQUAL
62554: IFTRUE 62558
62556: GO 62687
62558: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62559: LD_ADDR_VAR 0 5
62563: PUSH
62564: LD_VAR 0 1
62568: PUSH
62569: LD_VAR 0 2
62573: PUSH
62574: LD_INT 3
62576: MINUS
62577: PUSH
62578: LD_INT 3
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: LIST
62585: PUSH
62586: LD_VAR 0 1
62590: PUSH
62591: LD_INT 4
62593: PLUS
62594: PUSH
62595: LD_VAR 0 2
62599: PUSH
62600: LD_INT 4
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: LIST
62607: PUSH
62608: LD_VAR 0 1
62612: PUSH
62613: LD_VAR 0 2
62617: PUSH
62618: LD_INT 4
62620: PLUS
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: LIST
62629: PUSH
62630: LD_VAR 0 1
62634: PUSH
62635: LD_INT 3
62637: MINUS
62638: PUSH
62639: LD_VAR 0 2
62643: PUSH
62644: LD_INT 1
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: LIST
62651: PUSH
62652: LD_VAR 0 1
62656: PUSH
62657: LD_INT 4
62659: MINUS
62660: PUSH
62661: LD_VAR 0 2
62665: PUSH
62666: LD_INT 4
62668: MINUS
62669: PUSH
62670: LD_INT 2
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: LIST
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: ST_TO_ADDR
// end ; 3 :
62685: GO 63107
62687: LD_INT 3
62689: DOUBLE
62690: EQUAL
62691: IFTRUE 62695
62693: GO 62828
62695: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62696: LD_ADDR_VAR 0 5
62700: PUSH
62701: LD_VAR 0 1
62705: PUSH
62706: LD_INT 3
62708: PLUS
62709: PUSH
62710: LD_VAR 0 2
62714: PUSH
62715: LD_INT 4
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: LIST
62722: PUSH
62723: LD_VAR 0 1
62727: PUSH
62728: LD_INT 4
62730: PLUS
62731: PUSH
62732: LD_VAR 0 2
62736: PUSH
62737: LD_INT 4
62739: PLUS
62740: PUSH
62741: LD_INT 5
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: LIST
62748: PUSH
62749: LD_VAR 0 1
62753: PUSH
62754: LD_INT 4
62756: MINUS
62757: PUSH
62758: LD_VAR 0 2
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: LIST
62770: PUSH
62771: LD_VAR 0 1
62775: PUSH
62776: LD_VAR 0 2
62780: PUSH
62781: LD_INT 4
62783: MINUS
62784: PUSH
62785: LD_INT 3
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: LIST
62792: PUSH
62793: LD_VAR 0 1
62797: PUSH
62798: LD_INT 3
62800: MINUS
62801: PUSH
62802: LD_VAR 0 2
62806: PUSH
62807: LD_INT 3
62809: MINUS
62810: PUSH
62811: LD_INT 2
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: LIST
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: ST_TO_ADDR
// end ; 4 :
62826: GO 63107
62828: LD_INT 4
62830: DOUBLE
62831: EQUAL
62832: IFTRUE 62836
62834: GO 62969
62836: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62837: LD_ADDR_VAR 0 5
62841: PUSH
62842: LD_VAR 0 1
62846: PUSH
62847: LD_VAR 0 2
62851: PUSH
62852: LD_INT 4
62854: PLUS
62855: PUSH
62856: LD_INT 0
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: LIST
62863: PUSH
62864: LD_VAR 0 1
62868: PUSH
62869: LD_INT 3
62871: PLUS
62872: PUSH
62873: LD_VAR 0 2
62877: PUSH
62878: LD_INT 3
62880: PLUS
62881: PUSH
62882: LD_INT 5
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: LIST
62889: PUSH
62890: LD_VAR 0 1
62894: PUSH
62895: LD_INT 4
62897: PLUS
62898: PUSH
62899: LD_VAR 0 2
62903: PUSH
62904: LD_INT 4
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: LIST
62911: PUSH
62912: LD_VAR 0 1
62916: PUSH
62917: LD_VAR 0 2
62921: PUSH
62922: LD_INT 3
62924: MINUS
62925: PUSH
62926: LD_INT 3
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: LIST
62933: PUSH
62934: LD_VAR 0 1
62938: PUSH
62939: LD_INT 4
62941: MINUS
62942: PUSH
62943: LD_VAR 0 2
62947: PUSH
62948: LD_INT 4
62950: MINUS
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: LIST
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: ST_TO_ADDR
// end ; 5 :
62967: GO 63107
62969: LD_INT 5
62971: DOUBLE
62972: EQUAL
62973: IFTRUE 62977
62975: GO 63106
62977: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62978: LD_ADDR_VAR 0 5
62982: PUSH
62983: LD_VAR 0 1
62987: PUSH
62988: LD_INT 4
62990: MINUS
62991: PUSH
62992: LD_VAR 0 2
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: LIST
63004: PUSH
63005: LD_VAR 0 1
63009: PUSH
63010: LD_VAR 0 2
63014: PUSH
63015: LD_INT 4
63017: MINUS
63018: PUSH
63019: LD_INT 3
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: LIST
63026: PUSH
63027: LD_VAR 0 1
63031: PUSH
63032: LD_INT 4
63034: PLUS
63035: PUSH
63036: LD_VAR 0 2
63040: PUSH
63041: LD_INT 4
63043: PLUS
63044: PUSH
63045: LD_INT 5
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: LIST
63052: PUSH
63053: LD_VAR 0 1
63057: PUSH
63058: LD_INT 3
63060: PLUS
63061: PUSH
63062: LD_VAR 0 2
63066: PUSH
63067: LD_INT 4
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: LIST
63074: PUSH
63075: LD_VAR 0 1
63079: PUSH
63080: LD_VAR 0 2
63084: PUSH
63085: LD_INT 3
63087: PLUS
63088: PUSH
63089: LD_INT 0
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: LIST
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: ST_TO_ADDR
// end ; end ;
63104: GO 63107
63106: POP
// result := list ;
63107: LD_ADDR_VAR 0 4
63111: PUSH
63112: LD_VAR 0 5
63116: ST_TO_ADDR
// end ;
63117: LD_VAR 0 4
63121: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63122: LD_INT 0
63124: PPUSH
63125: PPUSH
63126: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63127: LD_VAR 0 1
63131: NOT
63132: PUSH
63133: LD_VAR 0 2
63137: PUSH
63138: LD_INT 1
63140: PUSH
63141: LD_INT 2
63143: PUSH
63144: LD_INT 3
63146: PUSH
63147: LD_INT 4
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: IN
63156: NOT
63157: OR
63158: IFFALSE 63162
// exit ;
63160: GO 63245
// tmp := [ ] ;
63162: LD_ADDR_VAR 0 5
63166: PUSH
63167: EMPTY
63168: ST_TO_ADDR
// for i in units do
63169: LD_ADDR_VAR 0 4
63173: PUSH
63174: LD_VAR 0 1
63178: PUSH
63179: FOR_IN
63180: IFFALSE 63214
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63182: LD_ADDR_VAR 0 5
63186: PUSH
63187: LD_VAR 0 5
63191: PPUSH
63192: LD_VAR 0 4
63196: PPUSH
63197: LD_VAR 0 2
63201: PPUSH
63202: CALL_OW 259
63206: PPUSH
63207: CALL 64606 0 2
63211: ST_TO_ADDR
63212: GO 63179
63214: POP
63215: POP
// if not tmp then
63216: LD_VAR 0 5
63220: NOT
63221: IFFALSE 63225
// exit ;
63223: GO 63245
// result := SortListByListDesc ( units , tmp ) ;
63225: LD_ADDR_VAR 0 3
63229: PUSH
63230: LD_VAR 0 1
63234: PPUSH
63235: LD_VAR 0 5
63239: PPUSH
63240: CALL_OW 77
63244: ST_TO_ADDR
// end ;
63245: LD_VAR 0 3
63249: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63250: LD_INT 0
63252: PPUSH
63253: PPUSH
63254: PPUSH
// result := false ;
63255: LD_ADDR_VAR 0 3
63259: PUSH
63260: LD_INT 0
63262: ST_TO_ADDR
// if not building then
63263: LD_VAR 0 2
63267: NOT
63268: IFFALSE 63272
// exit ;
63270: GO 63410
// x := GetX ( building ) ;
63272: LD_ADDR_VAR 0 4
63276: PUSH
63277: LD_VAR 0 2
63281: PPUSH
63282: CALL_OW 250
63286: ST_TO_ADDR
// y := GetY ( building ) ;
63287: LD_ADDR_VAR 0 5
63291: PUSH
63292: LD_VAR 0 2
63296: PPUSH
63297: CALL_OW 251
63301: ST_TO_ADDR
// if not x or not y then
63302: LD_VAR 0 4
63306: NOT
63307: PUSH
63308: LD_VAR 0 5
63312: NOT
63313: OR
63314: IFFALSE 63318
// exit ;
63316: GO 63410
// if GetTaskList ( unit ) then
63318: LD_VAR 0 1
63322: PPUSH
63323: CALL_OW 437
63327: IFFALSE 63410
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63329: LD_STRING e
63331: PUSH
63332: LD_VAR 0 1
63336: PPUSH
63337: CALL_OW 437
63341: PUSH
63342: LD_INT 1
63344: ARRAY
63345: PUSH
63346: LD_INT 1
63348: ARRAY
63349: EQUAL
63350: PUSH
63351: LD_VAR 0 4
63355: PUSH
63356: LD_VAR 0 1
63360: PPUSH
63361: CALL_OW 437
63365: PUSH
63366: LD_INT 1
63368: ARRAY
63369: PUSH
63370: LD_INT 2
63372: ARRAY
63373: EQUAL
63374: AND
63375: PUSH
63376: LD_VAR 0 5
63380: PUSH
63381: LD_VAR 0 1
63385: PPUSH
63386: CALL_OW 437
63390: PUSH
63391: LD_INT 1
63393: ARRAY
63394: PUSH
63395: LD_INT 3
63397: ARRAY
63398: EQUAL
63399: AND
63400: IFFALSE 63410
// result := true end ;
63402: LD_ADDR_VAR 0 3
63406: PUSH
63407: LD_INT 1
63409: ST_TO_ADDR
// end ;
63410: LD_VAR 0 3
63414: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63415: LD_INT 0
63417: PPUSH
// result := false ;
63418: LD_ADDR_VAR 0 4
63422: PUSH
63423: LD_INT 0
63425: ST_TO_ADDR
// if GetTaskList ( unit ) then
63426: LD_VAR 0 1
63430: PPUSH
63431: CALL_OW 437
63435: IFFALSE 63518
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63437: LD_STRING M
63439: PUSH
63440: LD_VAR 0 1
63444: PPUSH
63445: CALL_OW 437
63449: PUSH
63450: LD_INT 1
63452: ARRAY
63453: PUSH
63454: LD_INT 1
63456: ARRAY
63457: EQUAL
63458: PUSH
63459: LD_VAR 0 2
63463: PUSH
63464: LD_VAR 0 1
63468: PPUSH
63469: CALL_OW 437
63473: PUSH
63474: LD_INT 1
63476: ARRAY
63477: PUSH
63478: LD_INT 2
63480: ARRAY
63481: EQUAL
63482: AND
63483: PUSH
63484: LD_VAR 0 3
63488: PUSH
63489: LD_VAR 0 1
63493: PPUSH
63494: CALL_OW 437
63498: PUSH
63499: LD_INT 1
63501: ARRAY
63502: PUSH
63503: LD_INT 3
63505: ARRAY
63506: EQUAL
63507: AND
63508: IFFALSE 63518
// result := true ;
63510: LD_ADDR_VAR 0 4
63514: PUSH
63515: LD_INT 1
63517: ST_TO_ADDR
// end ; end ;
63518: LD_VAR 0 4
63522: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63523: LD_INT 0
63525: PPUSH
63526: PPUSH
63527: PPUSH
63528: PPUSH
// if not unit or not area then
63529: LD_VAR 0 1
63533: NOT
63534: PUSH
63535: LD_VAR 0 2
63539: NOT
63540: OR
63541: IFFALSE 63545
// exit ;
63543: GO 63709
// tmp := AreaToList ( area , i ) ;
63545: LD_ADDR_VAR 0 6
63549: PUSH
63550: LD_VAR 0 2
63554: PPUSH
63555: LD_VAR 0 5
63559: PPUSH
63560: CALL_OW 517
63564: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63565: LD_ADDR_VAR 0 5
63569: PUSH
63570: DOUBLE
63571: LD_INT 1
63573: DEC
63574: ST_TO_ADDR
63575: LD_VAR 0 6
63579: PUSH
63580: LD_INT 1
63582: ARRAY
63583: PUSH
63584: FOR_TO
63585: IFFALSE 63707
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63587: LD_ADDR_VAR 0 7
63591: PUSH
63592: LD_VAR 0 6
63596: PUSH
63597: LD_INT 1
63599: ARRAY
63600: PUSH
63601: LD_VAR 0 5
63605: ARRAY
63606: PUSH
63607: LD_VAR 0 6
63611: PUSH
63612: LD_INT 2
63614: ARRAY
63615: PUSH
63616: LD_VAR 0 5
63620: ARRAY
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63626: LD_VAR 0 7
63630: PUSH
63631: LD_INT 1
63633: ARRAY
63634: PPUSH
63635: LD_VAR 0 7
63639: PUSH
63640: LD_INT 2
63642: ARRAY
63643: PPUSH
63644: CALL_OW 428
63648: PUSH
63649: LD_INT 0
63651: EQUAL
63652: IFFALSE 63705
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63654: LD_VAR 0 1
63658: PPUSH
63659: LD_VAR 0 7
63663: PUSH
63664: LD_INT 1
63666: ARRAY
63667: PPUSH
63668: LD_VAR 0 7
63672: PUSH
63673: LD_INT 2
63675: ARRAY
63676: PPUSH
63677: LD_VAR 0 3
63681: PPUSH
63682: CALL_OW 48
// result := IsPlaced ( unit ) ;
63686: LD_ADDR_VAR 0 4
63690: PUSH
63691: LD_VAR 0 1
63695: PPUSH
63696: CALL_OW 305
63700: ST_TO_ADDR
// exit ;
63701: POP
63702: POP
63703: GO 63709
// end ; end ;
63705: GO 63584
63707: POP
63708: POP
// end ;
63709: LD_VAR 0 4
63713: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63714: LD_INT 0
63716: PPUSH
63717: PPUSH
63718: PPUSH
// if not side or side > 8 then
63719: LD_VAR 0 1
63723: NOT
63724: PUSH
63725: LD_VAR 0 1
63729: PUSH
63730: LD_INT 8
63732: GREATER
63733: OR
63734: IFFALSE 63738
// exit ;
63736: GO 63925
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63738: LD_ADDR_VAR 0 4
63742: PUSH
63743: LD_INT 22
63745: PUSH
63746: LD_VAR 0 1
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 21
63757: PUSH
63758: LD_INT 3
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PPUSH
63769: CALL_OW 69
63773: ST_TO_ADDR
// if not tmp then
63774: LD_VAR 0 4
63778: NOT
63779: IFFALSE 63783
// exit ;
63781: GO 63925
// enable_addtolog := true ;
63783: LD_ADDR_OWVAR 81
63787: PUSH
63788: LD_INT 1
63790: ST_TO_ADDR
// AddToLog ( [ ) ;
63791: LD_STRING [
63793: PPUSH
63794: CALL_OW 561
// for i in tmp do
63798: LD_ADDR_VAR 0 3
63802: PUSH
63803: LD_VAR 0 4
63807: PUSH
63808: FOR_IN
63809: IFFALSE 63916
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63811: LD_STRING [
63813: PUSH
63814: LD_VAR 0 3
63818: PPUSH
63819: CALL_OW 266
63823: STR
63824: PUSH
63825: LD_STRING , 
63827: STR
63828: PUSH
63829: LD_VAR 0 3
63833: PPUSH
63834: CALL_OW 250
63838: STR
63839: PUSH
63840: LD_STRING , 
63842: STR
63843: PUSH
63844: LD_VAR 0 3
63848: PPUSH
63849: CALL_OW 251
63853: STR
63854: PUSH
63855: LD_STRING , 
63857: STR
63858: PUSH
63859: LD_VAR 0 3
63863: PPUSH
63864: CALL_OW 254
63868: STR
63869: PUSH
63870: LD_STRING , 
63872: STR
63873: PUSH
63874: LD_VAR 0 3
63878: PPUSH
63879: LD_INT 1
63881: PPUSH
63882: CALL_OW 268
63886: STR
63887: PUSH
63888: LD_STRING , 
63890: STR
63891: PUSH
63892: LD_VAR 0 3
63896: PPUSH
63897: LD_INT 2
63899: PPUSH
63900: CALL_OW 268
63904: STR
63905: PUSH
63906: LD_STRING ],
63908: STR
63909: PPUSH
63910: CALL_OW 561
// end ;
63914: GO 63808
63916: POP
63917: POP
// AddToLog ( ]; ) ;
63918: LD_STRING ];
63920: PPUSH
63921: CALL_OW 561
// end ;
63925: LD_VAR 0 2
63929: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63930: LD_INT 0
63932: PPUSH
63933: PPUSH
63934: PPUSH
63935: PPUSH
63936: PPUSH
// if not area or not rate or not max then
63937: LD_VAR 0 1
63941: NOT
63942: PUSH
63943: LD_VAR 0 2
63947: NOT
63948: OR
63949: PUSH
63950: LD_VAR 0 4
63954: NOT
63955: OR
63956: IFFALSE 63960
// exit ;
63958: GO 64149
// while 1 do
63960: LD_INT 1
63962: IFFALSE 64149
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63964: LD_ADDR_VAR 0 9
63968: PUSH
63969: LD_VAR 0 1
63973: PPUSH
63974: LD_INT 1
63976: PPUSH
63977: CALL_OW 287
63981: PUSH
63982: LD_INT 10
63984: MUL
63985: ST_TO_ADDR
// r := rate / 10 ;
63986: LD_ADDR_VAR 0 7
63990: PUSH
63991: LD_VAR 0 2
63995: PUSH
63996: LD_INT 10
63998: DIVREAL
63999: ST_TO_ADDR
// time := 1 1$00 ;
64000: LD_ADDR_VAR 0 8
64004: PUSH
64005: LD_INT 2100
64007: ST_TO_ADDR
// if amount < min then
64008: LD_VAR 0 9
64012: PUSH
64013: LD_VAR 0 3
64017: LESS
64018: IFFALSE 64036
// r := r * 2 else
64020: LD_ADDR_VAR 0 7
64024: PUSH
64025: LD_VAR 0 7
64029: PUSH
64030: LD_INT 2
64032: MUL
64033: ST_TO_ADDR
64034: GO 64062
// if amount > max then
64036: LD_VAR 0 9
64040: PUSH
64041: LD_VAR 0 4
64045: GREATER
64046: IFFALSE 64062
// r := r / 2 ;
64048: LD_ADDR_VAR 0 7
64052: PUSH
64053: LD_VAR 0 7
64057: PUSH
64058: LD_INT 2
64060: DIVREAL
64061: ST_TO_ADDR
// time := time / r ;
64062: LD_ADDR_VAR 0 8
64066: PUSH
64067: LD_VAR 0 8
64071: PUSH
64072: LD_VAR 0 7
64076: DIVREAL
64077: ST_TO_ADDR
// if time < 0 then
64078: LD_VAR 0 8
64082: PUSH
64083: LD_INT 0
64085: LESS
64086: IFFALSE 64103
// time := time * - 1 ;
64088: LD_ADDR_VAR 0 8
64092: PUSH
64093: LD_VAR 0 8
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: MUL
64102: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64103: LD_VAR 0 8
64107: PUSH
64108: LD_INT 35
64110: PPUSH
64111: LD_INT 875
64113: PPUSH
64114: CALL_OW 12
64118: PLUS
64119: PPUSH
64120: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64124: LD_INT 1
64126: PPUSH
64127: LD_INT 5
64129: PPUSH
64130: CALL_OW 12
64134: PPUSH
64135: LD_VAR 0 1
64139: PPUSH
64140: LD_INT 1
64142: PPUSH
64143: CALL_OW 55
// end ;
64147: GO 63960
// end ;
64149: LD_VAR 0 5
64153: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64154: LD_INT 0
64156: PPUSH
64157: PPUSH
64158: PPUSH
64159: PPUSH
64160: PPUSH
64161: PPUSH
64162: PPUSH
64163: PPUSH
// if not turrets or not factories then
64164: LD_VAR 0 1
64168: NOT
64169: PUSH
64170: LD_VAR 0 2
64174: NOT
64175: OR
64176: IFFALSE 64180
// exit ;
64178: GO 64487
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64180: LD_ADDR_VAR 0 10
64184: PUSH
64185: LD_INT 5
64187: PUSH
64188: LD_INT 6
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 2
64197: PUSH
64198: LD_INT 4
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 3
64207: PUSH
64208: LD_INT 5
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 24
64222: PUSH
64223: LD_INT 25
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 23
64232: PUSH
64233: LD_INT 27
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 42
64246: PUSH
64247: LD_INT 43
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 44
64256: PUSH
64257: LD_INT 46
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 45
64266: PUSH
64267: LD_INT 47
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: LIST
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: LIST
64283: ST_TO_ADDR
// result := [ ] ;
64284: LD_ADDR_VAR 0 3
64288: PUSH
64289: EMPTY
64290: ST_TO_ADDR
// for i in turrets do
64291: LD_ADDR_VAR 0 4
64295: PUSH
64296: LD_VAR 0 1
64300: PUSH
64301: FOR_IN
64302: IFFALSE 64485
// begin nat := GetNation ( i ) ;
64304: LD_ADDR_VAR 0 7
64308: PUSH
64309: LD_VAR 0 4
64313: PPUSH
64314: CALL_OW 248
64318: ST_TO_ADDR
// weapon := 0 ;
64319: LD_ADDR_VAR 0 8
64323: PUSH
64324: LD_INT 0
64326: ST_TO_ADDR
// if not nat then
64327: LD_VAR 0 7
64331: NOT
64332: IFFALSE 64336
// continue ;
64334: GO 64301
// for j in list [ nat ] do
64336: LD_ADDR_VAR 0 5
64340: PUSH
64341: LD_VAR 0 10
64345: PUSH
64346: LD_VAR 0 7
64350: ARRAY
64351: PUSH
64352: FOR_IN
64353: IFFALSE 64394
// if GetBWeapon ( i ) = j [ 1 ] then
64355: LD_VAR 0 4
64359: PPUSH
64360: CALL_OW 269
64364: PUSH
64365: LD_VAR 0 5
64369: PUSH
64370: LD_INT 1
64372: ARRAY
64373: EQUAL
64374: IFFALSE 64392
// begin weapon := j [ 2 ] ;
64376: LD_ADDR_VAR 0 8
64380: PUSH
64381: LD_VAR 0 5
64385: PUSH
64386: LD_INT 2
64388: ARRAY
64389: ST_TO_ADDR
// break ;
64390: GO 64394
// end ;
64392: GO 64352
64394: POP
64395: POP
// if not weapon then
64396: LD_VAR 0 8
64400: NOT
64401: IFFALSE 64405
// continue ;
64403: GO 64301
// for k in factories do
64405: LD_ADDR_VAR 0 6
64409: PUSH
64410: LD_VAR 0 2
64414: PUSH
64415: FOR_IN
64416: IFFALSE 64481
// begin weapons := AvailableWeaponList ( k ) ;
64418: LD_ADDR_VAR 0 9
64422: PUSH
64423: LD_VAR 0 6
64427: PPUSH
64428: CALL_OW 478
64432: ST_TO_ADDR
// if not weapons then
64433: LD_VAR 0 9
64437: NOT
64438: IFFALSE 64442
// continue ;
64440: GO 64415
// if weapon in weapons then
64442: LD_VAR 0 8
64446: PUSH
64447: LD_VAR 0 9
64451: IN
64452: IFFALSE 64479
// begin result := [ i , weapon ] ;
64454: LD_ADDR_VAR 0 3
64458: PUSH
64459: LD_VAR 0 4
64463: PUSH
64464: LD_VAR 0 8
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: ST_TO_ADDR
// exit ;
64473: POP
64474: POP
64475: POP
64476: POP
64477: GO 64487
// end ; end ;
64479: GO 64415
64481: POP
64482: POP
// end ;
64483: GO 64301
64485: POP
64486: POP
// end ;
64487: LD_VAR 0 3
64491: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64492: LD_INT 0
64494: PPUSH
// if not side or side > 8 then
64495: LD_VAR 0 3
64499: NOT
64500: PUSH
64501: LD_VAR 0 3
64505: PUSH
64506: LD_INT 8
64508: GREATER
64509: OR
64510: IFFALSE 64514
// exit ;
64512: GO 64573
// if not range then
64514: LD_VAR 0 4
64518: NOT
64519: IFFALSE 64530
// range := - 12 ;
64521: LD_ADDR_VAR 0 4
64525: PUSH
64526: LD_INT 12
64528: NEG
64529: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64530: LD_VAR 0 1
64534: PPUSH
64535: LD_VAR 0 2
64539: PPUSH
64540: LD_VAR 0 3
64544: PPUSH
64545: LD_VAR 0 4
64549: PPUSH
64550: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64554: LD_VAR 0 1
64558: PPUSH
64559: LD_VAR 0 2
64563: PPUSH
64564: LD_VAR 0 3
64568: PPUSH
64569: CALL_OW 331
// end ;
64573: LD_VAR 0 5
64577: RET
// export function Video ( mode ) ; begin
64578: LD_INT 0
64580: PPUSH
// ingame_video = mode ;
64581: LD_ADDR_OWVAR 52
64585: PUSH
64586: LD_VAR 0 1
64590: ST_TO_ADDR
// interface_hidden = mode ;
64591: LD_ADDR_OWVAR 54
64595: PUSH
64596: LD_VAR 0 1
64600: ST_TO_ADDR
// end ;
64601: LD_VAR 0 2
64605: RET
// export function Join ( array , element ) ; begin
64606: LD_INT 0
64608: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64609: LD_ADDR_VAR 0 3
64613: PUSH
64614: LD_VAR 0 1
64618: PPUSH
64619: LD_VAR 0 1
64623: PUSH
64624: LD_INT 1
64626: PLUS
64627: PPUSH
64628: LD_VAR 0 2
64632: PPUSH
64633: CALL_OW 1
64637: ST_TO_ADDR
// end ;
64638: LD_VAR 0 3
64642: RET
// export function JoinUnion ( array , element ) ; begin
64643: LD_INT 0
64645: PPUSH
// result := array union element ;
64646: LD_ADDR_VAR 0 3
64650: PUSH
64651: LD_VAR 0 1
64655: PUSH
64656: LD_VAR 0 2
64660: UNION
64661: ST_TO_ADDR
// end ;
64662: LD_VAR 0 3
64666: RET
// export function GetBehemoths ( side ) ; begin
64667: LD_INT 0
64669: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64670: LD_ADDR_VAR 0 2
64674: PUSH
64675: LD_INT 22
64677: PUSH
64678: LD_VAR 0 1
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 31
64689: PUSH
64690: LD_INT 25
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PPUSH
64701: CALL_OW 69
64705: ST_TO_ADDR
// end ;
64706: LD_VAR 0 2
64710: RET
// export function Shuffle ( array ) ; var i , index ; begin
64711: LD_INT 0
64713: PPUSH
64714: PPUSH
64715: PPUSH
// result := [ ] ;
64716: LD_ADDR_VAR 0 2
64720: PUSH
64721: EMPTY
64722: ST_TO_ADDR
// if not array then
64723: LD_VAR 0 1
64727: NOT
64728: IFFALSE 64732
// exit ;
64730: GO 64831
// Randomize ;
64732: CALL_OW 10
// for i = array downto 1 do
64736: LD_ADDR_VAR 0 3
64740: PUSH
64741: DOUBLE
64742: LD_VAR 0 1
64746: INC
64747: ST_TO_ADDR
64748: LD_INT 1
64750: PUSH
64751: FOR_DOWNTO
64752: IFFALSE 64829
// begin index := rand ( 1 , array ) ;
64754: LD_ADDR_VAR 0 4
64758: PUSH
64759: LD_INT 1
64761: PPUSH
64762: LD_VAR 0 1
64766: PPUSH
64767: CALL_OW 12
64771: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64772: LD_ADDR_VAR 0 2
64776: PUSH
64777: LD_VAR 0 2
64781: PPUSH
64782: LD_VAR 0 2
64786: PUSH
64787: LD_INT 1
64789: PLUS
64790: PPUSH
64791: LD_VAR 0 1
64795: PUSH
64796: LD_VAR 0 4
64800: ARRAY
64801: PPUSH
64802: CALL_OW 2
64806: ST_TO_ADDR
// array := Delete ( array , index ) ;
64807: LD_ADDR_VAR 0 1
64811: PUSH
64812: LD_VAR 0 1
64816: PPUSH
64817: LD_VAR 0 4
64821: PPUSH
64822: CALL_OW 3
64826: ST_TO_ADDR
// end ;
64827: GO 64751
64829: POP
64830: POP
// end ;
64831: LD_VAR 0 2
64835: RET
// export function GetBaseMaterials ( base ) ; begin
64836: LD_INT 0
64838: PPUSH
// result := [ 0 , 0 , 0 ] ;
64839: LD_ADDR_VAR 0 2
64843: PUSH
64844: LD_INT 0
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: LD_INT 0
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: LIST
64857: ST_TO_ADDR
// if not base then
64858: LD_VAR 0 1
64862: NOT
64863: IFFALSE 64867
// exit ;
64865: GO 64916
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64867: LD_ADDR_VAR 0 2
64871: PUSH
64872: LD_VAR 0 1
64876: PPUSH
64877: LD_INT 1
64879: PPUSH
64880: CALL_OW 275
64884: PUSH
64885: LD_VAR 0 1
64889: PPUSH
64890: LD_INT 2
64892: PPUSH
64893: CALL_OW 275
64897: PUSH
64898: LD_VAR 0 1
64902: PPUSH
64903: LD_INT 3
64905: PPUSH
64906: CALL_OW 275
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: LIST
64915: ST_TO_ADDR
// end ;
64916: LD_VAR 0 2
64920: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64921: LD_INT 0
64923: PPUSH
64924: PPUSH
// result := array ;
64925: LD_ADDR_VAR 0 3
64929: PUSH
64930: LD_VAR 0 1
64934: ST_TO_ADDR
// if size >= result then
64935: LD_VAR 0 2
64939: PUSH
64940: LD_VAR 0 3
64944: GREATEREQUAL
64945: IFFALSE 64949
// exit ;
64947: GO 64999
// if size then
64949: LD_VAR 0 2
64953: IFFALSE 64999
// for i := array downto size do
64955: LD_ADDR_VAR 0 4
64959: PUSH
64960: DOUBLE
64961: LD_VAR 0 1
64965: INC
64966: ST_TO_ADDR
64967: LD_VAR 0 2
64971: PUSH
64972: FOR_DOWNTO
64973: IFFALSE 64997
// result := Delete ( result , result ) ;
64975: LD_ADDR_VAR 0 3
64979: PUSH
64980: LD_VAR 0 3
64984: PPUSH
64985: LD_VAR 0 3
64989: PPUSH
64990: CALL_OW 3
64994: ST_TO_ADDR
64995: GO 64972
64997: POP
64998: POP
// end ;
64999: LD_VAR 0 3
65003: RET
// export function ComExit ( unit ) ; var tmp ; begin
65004: LD_INT 0
65006: PPUSH
65007: PPUSH
// if not IsInUnit ( unit ) then
65008: LD_VAR 0 1
65012: PPUSH
65013: CALL_OW 310
65017: NOT
65018: IFFALSE 65022
// exit ;
65020: GO 65082
// tmp := IsInUnit ( unit ) ;
65022: LD_ADDR_VAR 0 3
65026: PUSH
65027: LD_VAR 0 1
65031: PPUSH
65032: CALL_OW 310
65036: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65037: LD_VAR 0 3
65041: PPUSH
65042: CALL_OW 247
65046: PUSH
65047: LD_INT 2
65049: EQUAL
65050: IFFALSE 65063
// ComExitVehicle ( unit ) else
65052: LD_VAR 0 1
65056: PPUSH
65057: CALL_OW 121
65061: GO 65072
// ComExitBuilding ( unit ) ;
65063: LD_VAR 0 1
65067: PPUSH
65068: CALL_OW 122
// result := tmp ;
65072: LD_ADDR_VAR 0 2
65076: PUSH
65077: LD_VAR 0 3
65081: ST_TO_ADDR
// end ;
65082: LD_VAR 0 2
65086: RET
// export function ComExitAll ( units ) ; var i ; begin
65087: LD_INT 0
65089: PPUSH
65090: PPUSH
// if not units then
65091: LD_VAR 0 1
65095: NOT
65096: IFFALSE 65100
// exit ;
65098: GO 65126
// for i in units do
65100: LD_ADDR_VAR 0 3
65104: PUSH
65105: LD_VAR 0 1
65109: PUSH
65110: FOR_IN
65111: IFFALSE 65124
// ComExit ( i ) ;
65113: LD_VAR 0 3
65117: PPUSH
65118: CALL 65004 0 1
65122: GO 65110
65124: POP
65125: POP
// end ;
65126: LD_VAR 0 2
65130: RET
// export function ResetHc ; begin
65131: LD_INT 0
65133: PPUSH
// InitHc ;
65134: CALL_OW 19
// hc_importance := 0 ;
65138: LD_ADDR_OWVAR 32
65142: PUSH
65143: LD_INT 0
65145: ST_TO_ADDR
// end ;
65146: LD_VAR 0 1
65150: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65151: LD_INT 0
65153: PPUSH
65154: PPUSH
65155: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65156: LD_ADDR_VAR 0 6
65160: PUSH
65161: LD_VAR 0 1
65165: PUSH
65166: LD_VAR 0 3
65170: PLUS
65171: PUSH
65172: LD_INT 2
65174: DIV
65175: ST_TO_ADDR
// if _x < 0 then
65176: LD_VAR 0 6
65180: PUSH
65181: LD_INT 0
65183: LESS
65184: IFFALSE 65201
// _x := _x * - 1 ;
65186: LD_ADDR_VAR 0 6
65190: PUSH
65191: LD_VAR 0 6
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: MUL
65200: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65201: LD_ADDR_VAR 0 7
65205: PUSH
65206: LD_VAR 0 2
65210: PUSH
65211: LD_VAR 0 4
65215: PLUS
65216: PUSH
65217: LD_INT 2
65219: DIV
65220: ST_TO_ADDR
// if _y < 0 then
65221: LD_VAR 0 7
65225: PUSH
65226: LD_INT 0
65228: LESS
65229: IFFALSE 65246
// _y := _y * - 1 ;
65231: LD_ADDR_VAR 0 7
65235: PUSH
65236: LD_VAR 0 7
65240: PUSH
65241: LD_INT 1
65243: NEG
65244: MUL
65245: ST_TO_ADDR
// result := [ _x , _y ] ;
65246: LD_ADDR_VAR 0 5
65250: PUSH
65251: LD_VAR 0 6
65255: PUSH
65256: LD_VAR 0 7
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: ST_TO_ADDR
// end ;
65265: LD_VAR 0 5
65269: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65270: LD_INT 0
65272: PPUSH
65273: PPUSH
65274: PPUSH
65275: PPUSH
// task := GetTaskList ( unit ) ;
65276: LD_ADDR_VAR 0 7
65280: PUSH
65281: LD_VAR 0 1
65285: PPUSH
65286: CALL_OW 437
65290: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65291: LD_VAR 0 7
65295: NOT
65296: PUSH
65297: LD_VAR 0 1
65301: PPUSH
65302: LD_VAR 0 2
65306: PPUSH
65307: CALL_OW 308
65311: NOT
65312: AND
65313: IFFALSE 65317
// exit ;
65315: GO 65435
// if IsInArea ( unit , area ) then
65317: LD_VAR 0 1
65321: PPUSH
65322: LD_VAR 0 2
65326: PPUSH
65327: CALL_OW 308
65331: IFFALSE 65349
// begin ComMoveToArea ( unit , goAway ) ;
65333: LD_VAR 0 1
65337: PPUSH
65338: LD_VAR 0 3
65342: PPUSH
65343: CALL_OW 113
// exit ;
65347: GO 65435
// end ; if task [ 1 ] [ 1 ] <> M then
65349: LD_VAR 0 7
65353: PUSH
65354: LD_INT 1
65356: ARRAY
65357: PUSH
65358: LD_INT 1
65360: ARRAY
65361: PUSH
65362: LD_STRING M
65364: NONEQUAL
65365: IFFALSE 65369
// exit ;
65367: GO 65435
// x := task [ 1 ] [ 2 ] ;
65369: LD_ADDR_VAR 0 5
65373: PUSH
65374: LD_VAR 0 7
65378: PUSH
65379: LD_INT 1
65381: ARRAY
65382: PUSH
65383: LD_INT 2
65385: ARRAY
65386: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65387: LD_ADDR_VAR 0 6
65391: PUSH
65392: LD_VAR 0 7
65396: PUSH
65397: LD_INT 1
65399: ARRAY
65400: PUSH
65401: LD_INT 3
65403: ARRAY
65404: ST_TO_ADDR
// if InArea ( x , y , area ) then
65405: LD_VAR 0 5
65409: PPUSH
65410: LD_VAR 0 6
65414: PPUSH
65415: LD_VAR 0 2
65419: PPUSH
65420: CALL_OW 309
65424: IFFALSE 65435
// ComStop ( unit ) ;
65426: LD_VAR 0 1
65430: PPUSH
65431: CALL_OW 141
// end ;
65435: LD_VAR 0 4
65439: RET
// export function Abs ( value ) ; begin
65440: LD_INT 0
65442: PPUSH
// result := value ;
65443: LD_ADDR_VAR 0 2
65447: PUSH
65448: LD_VAR 0 1
65452: ST_TO_ADDR
// if value < 0 then
65453: LD_VAR 0 1
65457: PUSH
65458: LD_INT 0
65460: LESS
65461: IFFALSE 65478
// result := value * - 1 ;
65463: LD_ADDR_VAR 0 2
65467: PUSH
65468: LD_VAR 0 1
65472: PUSH
65473: LD_INT 1
65475: NEG
65476: MUL
65477: ST_TO_ADDR
// end ;
65478: LD_VAR 0 2
65482: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65483: LD_INT 0
65485: PPUSH
65486: PPUSH
65487: PPUSH
65488: PPUSH
65489: PPUSH
65490: PPUSH
65491: PPUSH
65492: PPUSH
// if not unit or not building then
65493: LD_VAR 0 1
65497: NOT
65498: PUSH
65499: LD_VAR 0 2
65503: NOT
65504: OR
65505: IFFALSE 65509
// exit ;
65507: GO 65735
// x := GetX ( building ) ;
65509: LD_ADDR_VAR 0 4
65513: PUSH
65514: LD_VAR 0 2
65518: PPUSH
65519: CALL_OW 250
65523: ST_TO_ADDR
// y := GetY ( building ) ;
65524: LD_ADDR_VAR 0 6
65528: PUSH
65529: LD_VAR 0 2
65533: PPUSH
65534: CALL_OW 251
65538: ST_TO_ADDR
// d := GetDir ( building ) ;
65539: LD_ADDR_VAR 0 8
65543: PUSH
65544: LD_VAR 0 2
65548: PPUSH
65549: CALL_OW 254
65553: ST_TO_ADDR
// r := 4 ;
65554: LD_ADDR_VAR 0 9
65558: PUSH
65559: LD_INT 4
65561: ST_TO_ADDR
// for i := 1 to 5 do
65562: LD_ADDR_VAR 0 10
65566: PUSH
65567: DOUBLE
65568: LD_INT 1
65570: DEC
65571: ST_TO_ADDR
65572: LD_INT 5
65574: PUSH
65575: FOR_TO
65576: IFFALSE 65733
// begin _x := ShiftX ( x , d , r + i ) ;
65578: LD_ADDR_VAR 0 5
65582: PUSH
65583: LD_VAR 0 4
65587: PPUSH
65588: LD_VAR 0 8
65592: PPUSH
65593: LD_VAR 0 9
65597: PUSH
65598: LD_VAR 0 10
65602: PLUS
65603: PPUSH
65604: CALL_OW 272
65608: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65609: LD_ADDR_VAR 0 7
65613: PUSH
65614: LD_VAR 0 6
65618: PPUSH
65619: LD_VAR 0 8
65623: PPUSH
65624: LD_VAR 0 9
65628: PUSH
65629: LD_VAR 0 10
65633: PLUS
65634: PPUSH
65635: CALL_OW 273
65639: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65640: LD_VAR 0 5
65644: PPUSH
65645: LD_VAR 0 7
65649: PPUSH
65650: CALL_OW 488
65654: PUSH
65655: LD_VAR 0 5
65659: PPUSH
65660: LD_VAR 0 7
65664: PPUSH
65665: CALL_OW 428
65669: PPUSH
65670: CALL_OW 247
65674: PUSH
65675: LD_INT 3
65677: PUSH
65678: LD_INT 2
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: IN
65685: NOT
65686: AND
65687: IFFALSE 65731
// begin ComMoveXY ( unit , _x , _y ) ;
65689: LD_VAR 0 1
65693: PPUSH
65694: LD_VAR 0 5
65698: PPUSH
65699: LD_VAR 0 7
65703: PPUSH
65704: CALL_OW 111
// result := [ _x , _y ] ;
65708: LD_ADDR_VAR 0 3
65712: PUSH
65713: LD_VAR 0 5
65717: PUSH
65718: LD_VAR 0 7
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: ST_TO_ADDR
// exit ;
65727: POP
65728: POP
65729: GO 65735
// end ; end ;
65731: GO 65575
65733: POP
65734: POP
// end ;
65735: LD_VAR 0 3
65739: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65740: LD_INT 0
65742: PPUSH
65743: PPUSH
65744: PPUSH
// result := 0 ;
65745: LD_ADDR_VAR 0 3
65749: PUSH
65750: LD_INT 0
65752: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65753: LD_VAR 0 1
65757: PUSH
65758: LD_INT 0
65760: LESS
65761: PUSH
65762: LD_VAR 0 1
65766: PUSH
65767: LD_INT 8
65769: GREATER
65770: OR
65771: PUSH
65772: LD_VAR 0 2
65776: PUSH
65777: LD_INT 0
65779: LESS
65780: OR
65781: PUSH
65782: LD_VAR 0 2
65786: PUSH
65787: LD_INT 8
65789: GREATER
65790: OR
65791: IFFALSE 65795
// exit ;
65793: GO 65870
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65795: LD_ADDR_VAR 0 4
65799: PUSH
65800: LD_INT 22
65802: PUSH
65803: LD_VAR 0 2
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PPUSH
65812: CALL_OW 69
65816: PUSH
65817: FOR_IN
65818: IFFALSE 65868
// begin un := UnitShoot ( i ) ;
65820: LD_ADDR_VAR 0 5
65824: PUSH
65825: LD_VAR 0 4
65829: PPUSH
65830: CALL_OW 504
65834: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65835: LD_VAR 0 5
65839: PPUSH
65840: CALL_OW 255
65844: PUSH
65845: LD_VAR 0 1
65849: EQUAL
65850: IFFALSE 65866
// begin result := un ;
65852: LD_ADDR_VAR 0 3
65856: PUSH
65857: LD_VAR 0 5
65861: ST_TO_ADDR
// exit ;
65862: POP
65863: POP
65864: GO 65870
// end ; end ;
65866: GO 65817
65868: POP
65869: POP
// end ;
65870: LD_VAR 0 3
65874: RET
// export function GetCargoBay ( units ) ; begin
65875: LD_INT 0
65877: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65878: LD_ADDR_VAR 0 2
65882: PUSH
65883: LD_VAR 0 1
65887: PPUSH
65888: LD_INT 2
65890: PUSH
65891: LD_INT 34
65893: PUSH
65894: LD_INT 12
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 34
65903: PUSH
65904: LD_INT 51
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 34
65913: PUSH
65914: LD_INT 32
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 34
65923: PUSH
65924: LD_INT 89
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: PPUSH
65938: CALL_OW 72
65942: ST_TO_ADDR
// end ;
65943: LD_VAR 0 2
65947: RET
// export function Negate ( value ) ; begin
65948: LD_INT 0
65950: PPUSH
// result := not value ;
65951: LD_ADDR_VAR 0 2
65955: PUSH
65956: LD_VAR 0 1
65960: NOT
65961: ST_TO_ADDR
// end ;
65962: LD_VAR 0 2
65966: RET
// export function Inc ( value ) ; begin
65967: LD_INT 0
65969: PPUSH
// result := value + 1 ;
65970: LD_ADDR_VAR 0 2
65974: PUSH
65975: LD_VAR 0 1
65979: PUSH
65980: LD_INT 1
65982: PLUS
65983: ST_TO_ADDR
// end ;
65984: LD_VAR 0 2
65988: RET
// export function Dec ( value ) ; begin
65989: LD_INT 0
65991: PPUSH
// result := value - 1 ;
65992: LD_ADDR_VAR 0 2
65996: PUSH
65997: LD_VAR 0 1
66001: PUSH
66002: LD_INT 1
66004: MINUS
66005: ST_TO_ADDR
// end ;
66006: LD_VAR 0 2
66010: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66011: LD_INT 0
66013: PPUSH
66014: PPUSH
66015: PPUSH
66016: PPUSH
66017: PPUSH
66018: PPUSH
66019: PPUSH
66020: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66021: LD_VAR 0 1
66025: PPUSH
66026: LD_VAR 0 2
66030: PPUSH
66031: CALL_OW 488
66035: NOT
66036: PUSH
66037: LD_VAR 0 3
66041: PPUSH
66042: LD_VAR 0 4
66046: PPUSH
66047: CALL_OW 488
66051: NOT
66052: OR
66053: IFFALSE 66066
// begin result := - 1 ;
66055: LD_ADDR_VAR 0 5
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: ST_TO_ADDR
// exit ;
66064: GO 66301
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66066: LD_ADDR_VAR 0 12
66070: PUSH
66071: LD_VAR 0 1
66075: PPUSH
66076: LD_VAR 0 2
66080: PPUSH
66081: LD_VAR 0 3
66085: PPUSH
66086: LD_VAR 0 4
66090: PPUSH
66091: CALL 65151 0 4
66095: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66096: LD_ADDR_VAR 0 11
66100: PUSH
66101: LD_VAR 0 1
66105: PPUSH
66106: LD_VAR 0 2
66110: PPUSH
66111: LD_VAR 0 12
66115: PUSH
66116: LD_INT 1
66118: ARRAY
66119: PPUSH
66120: LD_VAR 0 12
66124: PUSH
66125: LD_INT 2
66127: ARRAY
66128: PPUSH
66129: CALL_OW 298
66133: ST_TO_ADDR
// distance := 9999 ;
66134: LD_ADDR_VAR 0 10
66138: PUSH
66139: LD_INT 9999
66141: ST_TO_ADDR
// for i := 0 to 5 do
66142: LD_ADDR_VAR 0 6
66146: PUSH
66147: DOUBLE
66148: LD_INT 0
66150: DEC
66151: ST_TO_ADDR
66152: LD_INT 5
66154: PUSH
66155: FOR_TO
66156: IFFALSE 66299
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66158: LD_ADDR_VAR 0 7
66162: PUSH
66163: LD_VAR 0 1
66167: PPUSH
66168: LD_VAR 0 6
66172: PPUSH
66173: LD_VAR 0 11
66177: PPUSH
66178: CALL_OW 272
66182: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66183: LD_ADDR_VAR 0 8
66187: PUSH
66188: LD_VAR 0 2
66192: PPUSH
66193: LD_VAR 0 6
66197: PPUSH
66198: LD_VAR 0 11
66202: PPUSH
66203: CALL_OW 273
66207: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66208: LD_VAR 0 7
66212: PPUSH
66213: LD_VAR 0 8
66217: PPUSH
66218: CALL_OW 488
66222: NOT
66223: IFFALSE 66227
// continue ;
66225: GO 66155
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66227: LD_ADDR_VAR 0 9
66231: PUSH
66232: LD_VAR 0 12
66236: PUSH
66237: LD_INT 1
66239: ARRAY
66240: PPUSH
66241: LD_VAR 0 12
66245: PUSH
66246: LD_INT 2
66248: ARRAY
66249: PPUSH
66250: LD_VAR 0 7
66254: PPUSH
66255: LD_VAR 0 8
66259: PPUSH
66260: CALL_OW 298
66264: ST_TO_ADDR
// if tmp < distance then
66265: LD_VAR 0 9
66269: PUSH
66270: LD_VAR 0 10
66274: LESS
66275: IFFALSE 66297
// begin result := i ;
66277: LD_ADDR_VAR 0 5
66281: PUSH
66282: LD_VAR 0 6
66286: ST_TO_ADDR
// distance := tmp ;
66287: LD_ADDR_VAR 0 10
66291: PUSH
66292: LD_VAR 0 9
66296: ST_TO_ADDR
// end ; end ;
66297: GO 66155
66299: POP
66300: POP
// end ;
66301: LD_VAR 0 5
66305: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66306: LD_INT 0
66308: PPUSH
66309: PPUSH
// if not driver or not IsInUnit ( driver ) then
66310: LD_VAR 0 1
66314: NOT
66315: PUSH
66316: LD_VAR 0 1
66320: PPUSH
66321: CALL_OW 310
66325: NOT
66326: OR
66327: IFFALSE 66331
// exit ;
66329: GO 66421
// vehicle := IsInUnit ( driver ) ;
66331: LD_ADDR_VAR 0 3
66335: PUSH
66336: LD_VAR 0 1
66340: PPUSH
66341: CALL_OW 310
66345: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66346: LD_VAR 0 1
66350: PPUSH
66351: LD_STRING \
66353: PUSH
66354: LD_INT 0
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: LD_INT 0
66365: PUSH
66366: LD_INT 0
66368: PUSH
66369: LD_INT 0
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: PUSH
66381: LD_STRING E
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 0
66389: PUSH
66390: LD_VAR 0 3
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: LD_INT 0
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: LIST
66411: LIST
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PPUSH
66417: CALL_OW 446
// end ;
66421: LD_VAR 0 2
66425: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66426: LD_INT 0
66428: PPUSH
66429: PPUSH
// if not driver or not IsInUnit ( driver ) then
66430: LD_VAR 0 1
66434: NOT
66435: PUSH
66436: LD_VAR 0 1
66440: PPUSH
66441: CALL_OW 310
66445: NOT
66446: OR
66447: IFFALSE 66451
// exit ;
66449: GO 66541
// vehicle := IsInUnit ( driver ) ;
66451: LD_ADDR_VAR 0 3
66455: PUSH
66456: LD_VAR 0 1
66460: PPUSH
66461: CALL_OW 310
66465: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66466: LD_VAR 0 1
66470: PPUSH
66471: LD_STRING \
66473: PUSH
66474: LD_INT 0
66476: PUSH
66477: LD_INT 0
66479: PUSH
66480: LD_INT 0
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: LD_INT 0
66488: PUSH
66489: LD_INT 0
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: PUSH
66501: LD_STRING E
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: LD_INT 0
66509: PUSH
66510: LD_VAR 0 3
66514: PUSH
66515: LD_INT 0
66517: PUSH
66518: LD_INT 0
66520: PUSH
66521: LD_INT 0
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PPUSH
66537: CALL_OW 447
// end ;
66541: LD_VAR 0 2
66545: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66546: LD_INT 0
66548: PPUSH
66549: PPUSH
66550: PPUSH
// tmp := [ ] ;
66551: LD_ADDR_VAR 0 5
66555: PUSH
66556: EMPTY
66557: ST_TO_ADDR
// for i in units do
66558: LD_ADDR_VAR 0 4
66562: PUSH
66563: LD_VAR 0 1
66567: PUSH
66568: FOR_IN
66569: IFFALSE 66607
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66571: LD_ADDR_VAR 0 5
66575: PUSH
66576: LD_VAR 0 5
66580: PPUSH
66581: LD_VAR 0 5
66585: PUSH
66586: LD_INT 1
66588: PLUS
66589: PPUSH
66590: LD_VAR 0 4
66594: PPUSH
66595: CALL_OW 256
66599: PPUSH
66600: CALL_OW 2
66604: ST_TO_ADDR
66605: GO 66568
66607: POP
66608: POP
// if not tmp then
66609: LD_VAR 0 5
66613: NOT
66614: IFFALSE 66618
// exit ;
66616: GO 66666
// if asc then
66618: LD_VAR 0 2
66622: IFFALSE 66646
// result := SortListByListAsc ( units , tmp ) else
66624: LD_ADDR_VAR 0 3
66628: PUSH
66629: LD_VAR 0 1
66633: PPUSH
66634: LD_VAR 0 5
66638: PPUSH
66639: CALL_OW 76
66643: ST_TO_ADDR
66644: GO 66666
// result := SortListByListDesc ( units , tmp ) ;
66646: LD_ADDR_VAR 0 3
66650: PUSH
66651: LD_VAR 0 1
66655: PPUSH
66656: LD_VAR 0 5
66660: PPUSH
66661: CALL_OW 77
66665: ST_TO_ADDR
// end ;
66666: LD_VAR 0 3
66670: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66671: LD_INT 0
66673: PPUSH
66674: PPUSH
// task := GetTaskList ( mech ) ;
66675: LD_ADDR_VAR 0 4
66679: PUSH
66680: LD_VAR 0 1
66684: PPUSH
66685: CALL_OW 437
66689: ST_TO_ADDR
// if not task then
66690: LD_VAR 0 4
66694: NOT
66695: IFFALSE 66699
// exit ;
66697: GO 66741
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66699: LD_ADDR_VAR 0 3
66703: PUSH
66704: LD_VAR 0 4
66708: PUSH
66709: LD_INT 1
66711: ARRAY
66712: PUSH
66713: LD_INT 1
66715: ARRAY
66716: PUSH
66717: LD_STRING r
66719: EQUAL
66720: PUSH
66721: LD_VAR 0 4
66725: PUSH
66726: LD_INT 1
66728: ARRAY
66729: PUSH
66730: LD_INT 4
66732: ARRAY
66733: PUSH
66734: LD_VAR 0 2
66738: EQUAL
66739: AND
66740: ST_TO_ADDR
// end ;
66741: LD_VAR 0 3
66745: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66746: LD_INT 0
66748: PPUSH
// SetDir ( unit , d ) ;
66749: LD_VAR 0 1
66753: PPUSH
66754: LD_VAR 0 4
66758: PPUSH
66759: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66763: LD_VAR 0 1
66767: PPUSH
66768: LD_VAR 0 2
66772: PPUSH
66773: LD_VAR 0 3
66777: PPUSH
66778: LD_VAR 0 5
66782: PPUSH
66783: CALL_OW 48
// end ;
66787: LD_VAR 0 6
66791: RET
// export function ToNaturalNumber ( number ) ; begin
66792: LD_INT 0
66794: PPUSH
// result := number div 1 ;
66795: LD_ADDR_VAR 0 2
66799: PUSH
66800: LD_VAR 0 1
66804: PUSH
66805: LD_INT 1
66807: DIV
66808: ST_TO_ADDR
// if number < 0 then
66809: LD_VAR 0 1
66813: PUSH
66814: LD_INT 0
66816: LESS
66817: IFFALSE 66827
// result := 0 ;
66819: LD_ADDR_VAR 0 2
66823: PUSH
66824: LD_INT 0
66826: ST_TO_ADDR
// end ;
66827: LD_VAR 0 2
66831: RET
// export function SortByClass ( units , class ) ; var un ; begin
66832: LD_INT 0
66834: PPUSH
66835: PPUSH
// if not units or not class then
66836: LD_VAR 0 1
66840: NOT
66841: PUSH
66842: LD_VAR 0 2
66846: NOT
66847: OR
66848: IFFALSE 66852
// exit ;
66850: GO 66947
// result := [ ] ;
66852: LD_ADDR_VAR 0 3
66856: PUSH
66857: EMPTY
66858: ST_TO_ADDR
// for un in units do
66859: LD_ADDR_VAR 0 4
66863: PUSH
66864: LD_VAR 0 1
66868: PUSH
66869: FOR_IN
66870: IFFALSE 66945
// if GetClass ( un ) = class then
66872: LD_VAR 0 4
66876: PPUSH
66877: CALL_OW 257
66881: PUSH
66882: LD_VAR 0 2
66886: EQUAL
66887: IFFALSE 66914
// result := Insert ( result , 1 , un ) else
66889: LD_ADDR_VAR 0 3
66893: PUSH
66894: LD_VAR 0 3
66898: PPUSH
66899: LD_INT 1
66901: PPUSH
66902: LD_VAR 0 4
66906: PPUSH
66907: CALL_OW 2
66911: ST_TO_ADDR
66912: GO 66943
// result := Replace ( result , result + 1 , un ) ;
66914: LD_ADDR_VAR 0 3
66918: PUSH
66919: LD_VAR 0 3
66923: PPUSH
66924: LD_VAR 0 3
66928: PUSH
66929: LD_INT 1
66931: PLUS
66932: PPUSH
66933: LD_VAR 0 4
66937: PPUSH
66938: CALL_OW 1
66942: ST_TO_ADDR
66943: GO 66869
66945: POP
66946: POP
// end ;
66947: LD_VAR 0 3
66951: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66952: LD_INT 0
66954: PPUSH
66955: PPUSH
66956: PPUSH
66957: PPUSH
66958: PPUSH
66959: PPUSH
66960: PPUSH
// result := [ ] ;
66961: LD_ADDR_VAR 0 4
66965: PUSH
66966: EMPTY
66967: ST_TO_ADDR
// if x - r < 0 then
66968: LD_VAR 0 1
66972: PUSH
66973: LD_VAR 0 3
66977: MINUS
66978: PUSH
66979: LD_INT 0
66981: LESS
66982: IFFALSE 66994
// min_x := 0 else
66984: LD_ADDR_VAR 0 8
66988: PUSH
66989: LD_INT 0
66991: ST_TO_ADDR
66992: GO 67010
// min_x := x - r ;
66994: LD_ADDR_VAR 0 8
66998: PUSH
66999: LD_VAR 0 1
67003: PUSH
67004: LD_VAR 0 3
67008: MINUS
67009: ST_TO_ADDR
// if y - r < 0 then
67010: LD_VAR 0 2
67014: PUSH
67015: LD_VAR 0 3
67019: MINUS
67020: PUSH
67021: LD_INT 0
67023: LESS
67024: IFFALSE 67036
// min_y := 0 else
67026: LD_ADDR_VAR 0 7
67030: PUSH
67031: LD_INT 0
67033: ST_TO_ADDR
67034: GO 67052
// min_y := y - r ;
67036: LD_ADDR_VAR 0 7
67040: PUSH
67041: LD_VAR 0 2
67045: PUSH
67046: LD_VAR 0 3
67050: MINUS
67051: ST_TO_ADDR
// max_x := x + r ;
67052: LD_ADDR_VAR 0 9
67056: PUSH
67057: LD_VAR 0 1
67061: PUSH
67062: LD_VAR 0 3
67066: PLUS
67067: ST_TO_ADDR
// max_y := y + r ;
67068: LD_ADDR_VAR 0 10
67072: PUSH
67073: LD_VAR 0 2
67077: PUSH
67078: LD_VAR 0 3
67082: PLUS
67083: ST_TO_ADDR
// for _x = min_x to max_x do
67084: LD_ADDR_VAR 0 5
67088: PUSH
67089: DOUBLE
67090: LD_VAR 0 8
67094: DEC
67095: ST_TO_ADDR
67096: LD_VAR 0 9
67100: PUSH
67101: FOR_TO
67102: IFFALSE 67203
// for _y = min_y to max_y do
67104: LD_ADDR_VAR 0 6
67108: PUSH
67109: DOUBLE
67110: LD_VAR 0 7
67114: DEC
67115: ST_TO_ADDR
67116: LD_VAR 0 10
67120: PUSH
67121: FOR_TO
67122: IFFALSE 67199
// begin if not ValidHex ( _x , _y ) then
67124: LD_VAR 0 5
67128: PPUSH
67129: LD_VAR 0 6
67133: PPUSH
67134: CALL_OW 488
67138: NOT
67139: IFFALSE 67143
// continue ;
67141: GO 67121
// if GetResourceTypeXY ( _x , _y ) then
67143: LD_VAR 0 5
67147: PPUSH
67148: LD_VAR 0 6
67152: PPUSH
67153: CALL_OW 283
67157: IFFALSE 67197
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67159: LD_ADDR_VAR 0 4
67163: PUSH
67164: LD_VAR 0 4
67168: PPUSH
67169: LD_VAR 0 4
67173: PUSH
67174: LD_INT 1
67176: PLUS
67177: PPUSH
67178: LD_VAR 0 5
67182: PUSH
67183: LD_VAR 0 6
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PPUSH
67192: CALL_OW 1
67196: ST_TO_ADDR
// end ;
67197: GO 67121
67199: POP
67200: POP
67201: GO 67101
67203: POP
67204: POP
// end ;
67205: LD_VAR 0 4
67209: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67210: LD_INT 0
67212: PPUSH
67213: PPUSH
67214: PPUSH
67215: PPUSH
67216: PPUSH
67217: PPUSH
67218: PPUSH
67219: PPUSH
// if not units then
67220: LD_VAR 0 1
67224: NOT
67225: IFFALSE 67229
// exit ;
67227: GO 67753
// result := UnitFilter ( units , [ f_ok ] ) ;
67229: LD_ADDR_VAR 0 3
67233: PUSH
67234: LD_VAR 0 1
67238: PPUSH
67239: LD_INT 50
67241: PUSH
67242: EMPTY
67243: LIST
67244: PPUSH
67245: CALL_OW 72
67249: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67250: LD_ADDR_VAR 0 8
67254: PUSH
67255: LD_VAR 0 1
67259: PUSH
67260: LD_INT 1
67262: ARRAY
67263: PPUSH
67264: CALL_OW 255
67268: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67269: LD_ADDR_VAR 0 10
67273: PUSH
67274: LD_INT 29
67276: PUSH
67277: LD_INT 91
67279: PUSH
67280: LD_INT 49
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: LIST
67287: ST_TO_ADDR
// if not result then
67288: LD_VAR 0 3
67292: NOT
67293: IFFALSE 67297
// exit ;
67295: GO 67753
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67297: LD_ADDR_VAR 0 5
67301: PUSH
67302: LD_INT 81
67304: PUSH
67305: LD_VAR 0 8
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PPUSH
67314: CALL_OW 69
67318: ST_TO_ADDR
// for i in result do
67319: LD_ADDR_VAR 0 4
67323: PUSH
67324: LD_VAR 0 3
67328: PUSH
67329: FOR_IN
67330: IFFALSE 67751
// begin tag := GetTag ( i ) + 1 ;
67332: LD_ADDR_VAR 0 9
67336: PUSH
67337: LD_VAR 0 4
67341: PPUSH
67342: CALL_OW 110
67346: PUSH
67347: LD_INT 1
67349: PLUS
67350: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67351: LD_ADDR_VAR 0 7
67355: PUSH
67356: LD_VAR 0 4
67360: PPUSH
67361: CALL_OW 250
67365: PPUSH
67366: LD_VAR 0 4
67370: PPUSH
67371: CALL_OW 251
67375: PPUSH
67376: LD_INT 6
67378: PPUSH
67379: CALL 66952 0 3
67383: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67384: LD_VAR 0 4
67388: PPUSH
67389: CALL_OW 247
67393: PUSH
67394: LD_INT 2
67396: EQUAL
67397: PUSH
67398: LD_VAR 0 7
67402: AND
67403: PUSH
67404: LD_VAR 0 4
67408: PPUSH
67409: CALL_OW 264
67413: PUSH
67414: LD_VAR 0 10
67418: IN
67419: NOT
67420: AND
67421: IFFALSE 67460
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67423: LD_VAR 0 4
67427: PPUSH
67428: LD_VAR 0 7
67432: PUSH
67433: LD_INT 1
67435: ARRAY
67436: PUSH
67437: LD_INT 1
67439: ARRAY
67440: PPUSH
67441: LD_VAR 0 7
67445: PUSH
67446: LD_INT 1
67448: ARRAY
67449: PUSH
67450: LD_INT 2
67452: ARRAY
67453: PPUSH
67454: CALL_OW 116
67458: GO 67749
// if path > tag then
67460: LD_VAR 0 2
67464: PUSH
67465: LD_VAR 0 9
67469: GREATER
67470: IFFALSE 67678
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67472: LD_ADDR_VAR 0 6
67476: PUSH
67477: LD_VAR 0 5
67481: PPUSH
67482: LD_INT 91
67484: PUSH
67485: LD_VAR 0 4
67489: PUSH
67490: LD_INT 8
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: LIST
67497: PPUSH
67498: CALL_OW 72
67502: ST_TO_ADDR
// if nearEnemy then
67503: LD_VAR 0 6
67507: IFFALSE 67576
// begin if GetWeapon ( i ) = ru_time_lapser then
67509: LD_VAR 0 4
67513: PPUSH
67514: CALL_OW 264
67518: PUSH
67519: LD_INT 49
67521: EQUAL
67522: IFFALSE 67550
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67524: LD_VAR 0 4
67528: PPUSH
67529: LD_VAR 0 6
67533: PPUSH
67534: LD_VAR 0 4
67538: PPUSH
67539: CALL_OW 74
67543: PPUSH
67544: CALL_OW 112
67548: GO 67574
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67550: LD_VAR 0 4
67554: PPUSH
67555: LD_VAR 0 6
67559: PPUSH
67560: LD_VAR 0 4
67564: PPUSH
67565: CALL_OW 74
67569: PPUSH
67570: CALL_OW 115
// end else
67574: GO 67676
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67576: LD_VAR 0 4
67580: PPUSH
67581: LD_VAR 0 2
67585: PUSH
67586: LD_VAR 0 9
67590: ARRAY
67591: PUSH
67592: LD_INT 1
67594: ARRAY
67595: PPUSH
67596: LD_VAR 0 2
67600: PUSH
67601: LD_VAR 0 9
67605: ARRAY
67606: PUSH
67607: LD_INT 2
67609: ARRAY
67610: PPUSH
67611: CALL_OW 297
67615: PUSH
67616: LD_INT 6
67618: GREATER
67619: IFFALSE 67662
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67621: LD_VAR 0 4
67625: PPUSH
67626: LD_VAR 0 2
67630: PUSH
67631: LD_VAR 0 9
67635: ARRAY
67636: PUSH
67637: LD_INT 1
67639: ARRAY
67640: PPUSH
67641: LD_VAR 0 2
67645: PUSH
67646: LD_VAR 0 9
67650: ARRAY
67651: PUSH
67652: LD_INT 2
67654: ARRAY
67655: PPUSH
67656: CALL_OW 114
67660: GO 67676
// SetTag ( i , tag ) ;
67662: LD_VAR 0 4
67666: PPUSH
67667: LD_VAR 0 9
67671: PPUSH
67672: CALL_OW 109
// end else
67676: GO 67749
// if enemy then
67678: LD_VAR 0 5
67682: IFFALSE 67749
// begin if GetWeapon ( i ) = ru_time_lapser then
67684: LD_VAR 0 4
67688: PPUSH
67689: CALL_OW 264
67693: PUSH
67694: LD_INT 49
67696: EQUAL
67697: IFFALSE 67725
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67699: LD_VAR 0 4
67703: PPUSH
67704: LD_VAR 0 5
67708: PPUSH
67709: LD_VAR 0 4
67713: PPUSH
67714: CALL_OW 74
67718: PPUSH
67719: CALL_OW 112
67723: GO 67749
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67725: LD_VAR 0 4
67729: PPUSH
67730: LD_VAR 0 5
67734: PPUSH
67735: LD_VAR 0 4
67739: PPUSH
67740: CALL_OW 74
67744: PPUSH
67745: CALL_OW 115
// end ; end ;
67749: GO 67329
67751: POP
67752: POP
// end ;
67753: LD_VAR 0 3
67757: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67758: LD_INT 0
67760: PPUSH
67761: PPUSH
67762: PPUSH
// if not unit or IsInUnit ( unit ) then
67763: LD_VAR 0 1
67767: NOT
67768: PUSH
67769: LD_VAR 0 1
67773: PPUSH
67774: CALL_OW 310
67778: OR
67779: IFFALSE 67783
// exit ;
67781: GO 67874
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67783: LD_ADDR_VAR 0 4
67787: PUSH
67788: LD_VAR 0 1
67792: PPUSH
67793: CALL_OW 250
67797: PPUSH
67798: LD_VAR 0 2
67802: PPUSH
67803: LD_INT 1
67805: PPUSH
67806: CALL_OW 272
67810: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67811: LD_ADDR_VAR 0 5
67815: PUSH
67816: LD_VAR 0 1
67820: PPUSH
67821: CALL_OW 251
67825: PPUSH
67826: LD_VAR 0 2
67830: PPUSH
67831: LD_INT 1
67833: PPUSH
67834: CALL_OW 273
67838: ST_TO_ADDR
// if ValidHex ( x , y ) then
67839: LD_VAR 0 4
67843: PPUSH
67844: LD_VAR 0 5
67848: PPUSH
67849: CALL_OW 488
67853: IFFALSE 67874
// ComTurnXY ( unit , x , y ) ;
67855: LD_VAR 0 1
67859: PPUSH
67860: LD_VAR 0 4
67864: PPUSH
67865: LD_VAR 0 5
67869: PPUSH
67870: CALL_OW 118
// end ;
67874: LD_VAR 0 3
67878: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67879: LD_INT 0
67881: PPUSH
67882: PPUSH
// result := false ;
67883: LD_ADDR_VAR 0 3
67887: PUSH
67888: LD_INT 0
67890: ST_TO_ADDR
// if not units then
67891: LD_VAR 0 2
67895: NOT
67896: IFFALSE 67900
// exit ;
67898: GO 67945
// for i in units do
67900: LD_ADDR_VAR 0 4
67904: PUSH
67905: LD_VAR 0 2
67909: PUSH
67910: FOR_IN
67911: IFFALSE 67943
// if See ( side , i ) then
67913: LD_VAR 0 1
67917: PPUSH
67918: LD_VAR 0 4
67922: PPUSH
67923: CALL_OW 292
67927: IFFALSE 67941
// begin result := true ;
67929: LD_ADDR_VAR 0 3
67933: PUSH
67934: LD_INT 1
67936: ST_TO_ADDR
// exit ;
67937: POP
67938: POP
67939: GO 67945
// end ;
67941: GO 67910
67943: POP
67944: POP
// end ;
67945: LD_VAR 0 3
67949: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67950: LD_INT 0
67952: PPUSH
67953: PPUSH
67954: PPUSH
67955: PPUSH
// if not unit or not points then
67956: LD_VAR 0 1
67960: NOT
67961: PUSH
67962: LD_VAR 0 2
67966: NOT
67967: OR
67968: IFFALSE 67972
// exit ;
67970: GO 68062
// dist := 99999 ;
67972: LD_ADDR_VAR 0 5
67976: PUSH
67977: LD_INT 99999
67979: ST_TO_ADDR
// for i in points do
67980: LD_ADDR_VAR 0 4
67984: PUSH
67985: LD_VAR 0 2
67989: PUSH
67990: FOR_IN
67991: IFFALSE 68060
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67993: LD_ADDR_VAR 0 6
67997: PUSH
67998: LD_VAR 0 1
68002: PPUSH
68003: LD_VAR 0 4
68007: PUSH
68008: LD_INT 1
68010: ARRAY
68011: PPUSH
68012: LD_VAR 0 4
68016: PUSH
68017: LD_INT 2
68019: ARRAY
68020: PPUSH
68021: CALL_OW 297
68025: ST_TO_ADDR
// if tmpDist < dist then
68026: LD_VAR 0 6
68030: PUSH
68031: LD_VAR 0 5
68035: LESS
68036: IFFALSE 68058
// begin result := i ;
68038: LD_ADDR_VAR 0 3
68042: PUSH
68043: LD_VAR 0 4
68047: ST_TO_ADDR
// dist := tmpDist ;
68048: LD_ADDR_VAR 0 5
68052: PUSH
68053: LD_VAR 0 6
68057: ST_TO_ADDR
// end ; end ;
68058: GO 67990
68060: POP
68061: POP
// end ;
68062: LD_VAR 0 3
68066: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68067: LD_INT 0
68069: PPUSH
// uc_side := side ;
68070: LD_ADDR_OWVAR 20
68074: PUSH
68075: LD_VAR 0 1
68079: ST_TO_ADDR
// uc_nation := 3 ;
68080: LD_ADDR_OWVAR 21
68084: PUSH
68085: LD_INT 3
68087: ST_TO_ADDR
// vc_chassis := 25 ;
68088: LD_ADDR_OWVAR 37
68092: PUSH
68093: LD_INT 25
68095: ST_TO_ADDR
// vc_engine := engine_siberite ;
68096: LD_ADDR_OWVAR 39
68100: PUSH
68101: LD_INT 3
68103: ST_TO_ADDR
// vc_control := control_computer ;
68104: LD_ADDR_OWVAR 38
68108: PUSH
68109: LD_INT 3
68111: ST_TO_ADDR
// vc_weapon := 59 ;
68112: LD_ADDR_OWVAR 40
68116: PUSH
68117: LD_INT 59
68119: ST_TO_ADDR
// result := CreateVehicle ;
68120: LD_ADDR_VAR 0 5
68124: PUSH
68125: CALL_OW 45
68129: ST_TO_ADDR
// SetDir ( result , d ) ;
68130: LD_VAR 0 5
68134: PPUSH
68135: LD_VAR 0 4
68139: PPUSH
68140: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68144: LD_VAR 0 5
68148: PPUSH
68149: LD_VAR 0 2
68153: PPUSH
68154: LD_VAR 0 3
68158: PPUSH
68159: LD_INT 0
68161: PPUSH
68162: CALL_OW 48
// end ;
68166: LD_VAR 0 5
68170: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68171: LD_INT 0
68173: PPUSH
68174: PPUSH
68175: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68176: LD_ADDR_VAR 0 2
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: LD_INT 0
68186: PUSH
68187: LD_INT 0
68189: PUSH
68190: LD_INT 0
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68199: LD_VAR 0 1
68203: NOT
68204: PUSH
68205: LD_VAR 0 1
68209: PPUSH
68210: CALL_OW 264
68214: PUSH
68215: LD_INT 12
68217: PUSH
68218: LD_INT 51
68220: PUSH
68221: LD_INT 32
68223: PUSH
68224: LD_INT 89
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: IN
68233: NOT
68234: OR
68235: IFFALSE 68239
// exit ;
68237: GO 68337
// for i := 1 to 3 do
68239: LD_ADDR_VAR 0 3
68243: PUSH
68244: DOUBLE
68245: LD_INT 1
68247: DEC
68248: ST_TO_ADDR
68249: LD_INT 3
68251: PUSH
68252: FOR_TO
68253: IFFALSE 68335
// begin tmp := GetCargo ( cargo , i ) ;
68255: LD_ADDR_VAR 0 4
68259: PUSH
68260: LD_VAR 0 1
68264: PPUSH
68265: LD_VAR 0 3
68269: PPUSH
68270: CALL_OW 289
68274: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68275: LD_ADDR_VAR 0 2
68279: PUSH
68280: LD_VAR 0 2
68284: PPUSH
68285: LD_VAR 0 3
68289: PPUSH
68290: LD_VAR 0 4
68294: PPUSH
68295: CALL_OW 1
68299: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68300: LD_ADDR_VAR 0 2
68304: PUSH
68305: LD_VAR 0 2
68309: PPUSH
68310: LD_INT 4
68312: PPUSH
68313: LD_VAR 0 2
68317: PUSH
68318: LD_INT 4
68320: ARRAY
68321: PUSH
68322: LD_VAR 0 4
68326: PLUS
68327: PPUSH
68328: CALL_OW 1
68332: ST_TO_ADDR
// end ;
68333: GO 68252
68335: POP
68336: POP
// end ;
68337: LD_VAR 0 2
68341: RET
// export function Length ( array ) ; begin
68342: LD_INT 0
68344: PPUSH
// result := array + 0 ;
68345: LD_ADDR_VAR 0 2
68349: PUSH
68350: LD_VAR 0 1
68354: PUSH
68355: LD_INT 0
68357: PLUS
68358: ST_TO_ADDR
// end ;
68359: LD_VAR 0 2
68363: RET
// export function PrepareArray ( array ) ; begin
68364: LD_INT 0
68366: PPUSH
// result := array diff 0 ;
68367: LD_ADDR_VAR 0 2
68371: PUSH
68372: LD_VAR 0 1
68376: PUSH
68377: LD_INT 0
68379: DIFF
68380: ST_TO_ADDR
// if not result [ 1 ] then
68381: LD_VAR 0 2
68385: PUSH
68386: LD_INT 1
68388: ARRAY
68389: NOT
68390: IFFALSE 68410
// result := Delete ( result , 1 ) ;
68392: LD_ADDR_VAR 0 2
68396: PUSH
68397: LD_VAR 0 2
68401: PPUSH
68402: LD_INT 1
68404: PPUSH
68405: CALL_OW 3
68409: ST_TO_ADDR
// end ;
68410: LD_VAR 0 2
68414: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68415: LD_INT 0
68417: PPUSH
68418: PPUSH
68419: PPUSH
68420: PPUSH
// sibRocketRange := 25 ;
68421: LD_ADDR_VAR 0 6
68425: PUSH
68426: LD_INT 25
68428: ST_TO_ADDR
// result := false ;
68429: LD_ADDR_VAR 0 4
68433: PUSH
68434: LD_INT 0
68436: ST_TO_ADDR
// for i := 0 to 5 do
68437: LD_ADDR_VAR 0 5
68441: PUSH
68442: DOUBLE
68443: LD_INT 0
68445: DEC
68446: ST_TO_ADDR
68447: LD_INT 5
68449: PUSH
68450: FOR_TO
68451: IFFALSE 68518
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68453: LD_VAR 0 1
68457: PPUSH
68458: LD_VAR 0 5
68462: PPUSH
68463: LD_VAR 0 6
68467: PPUSH
68468: CALL_OW 272
68472: PPUSH
68473: LD_VAR 0 2
68477: PPUSH
68478: LD_VAR 0 5
68482: PPUSH
68483: LD_VAR 0 6
68487: PPUSH
68488: CALL_OW 273
68492: PPUSH
68493: LD_VAR 0 3
68497: PPUSH
68498: CALL_OW 309
68502: IFFALSE 68516
// begin result := true ;
68504: LD_ADDR_VAR 0 4
68508: PUSH
68509: LD_INT 1
68511: ST_TO_ADDR
// exit ;
68512: POP
68513: POP
68514: GO 68520
// end ;
68516: GO 68450
68518: POP
68519: POP
// end ;
68520: LD_VAR 0 4
68524: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68525: LD_INT 0
68527: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68528: LD_VAR 0 1
68532: PPUSH
68533: LD_VAR 0 2
68537: PPUSH
68538: LD_INT 0
68540: PPUSH
68541: LD_INT 0
68543: PPUSH
68544: LD_INT 1
68546: PPUSH
68547: LD_INT 0
68549: PPUSH
68550: CALL_OW 587
// end ; end_of_file
68554: LD_VAR 0 3
68558: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68559: LD_VAR 0 1
68563: PUSH
68564: LD_INT 200
68566: DOUBLE
68567: GREATEREQUAL
68568: IFFALSE 68576
68570: LD_INT 299
68572: DOUBLE
68573: LESSEQUAL
68574: IFTRUE 68578
68576: GO 68610
68578: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68579: LD_VAR 0 1
68583: PPUSH
68584: LD_VAR 0 2
68588: PPUSH
68589: LD_VAR 0 3
68593: PPUSH
68594: LD_VAR 0 4
68598: PPUSH
68599: LD_VAR 0 5
68603: PPUSH
68604: CALL 23225 0 5
68608: GO 68687
68610: LD_INT 300
68612: DOUBLE
68613: GREATEREQUAL
68614: IFFALSE 68622
68616: LD_INT 399
68618: DOUBLE
68619: LESSEQUAL
68620: IFTRUE 68624
68622: GO 68686
68624: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68625: LD_VAR 0 1
68629: PPUSH
68630: LD_VAR 0 2
68634: PPUSH
68635: LD_VAR 0 3
68639: PPUSH
68640: LD_VAR 0 4
68644: PPUSH
68645: LD_VAR 0 5
68649: PPUSH
68650: LD_VAR 0 6
68654: PPUSH
68655: LD_VAR 0 7
68659: PPUSH
68660: LD_VAR 0 8
68664: PPUSH
68665: LD_VAR 0 9
68669: PPUSH
68670: LD_VAR 0 10
68674: PPUSH
68675: LD_VAR 0 11
68679: PPUSH
68680: CALL 19558 0 11
68684: GO 68687
68686: POP
// end ;
68687: PPOPN 11
68689: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68690: LD_VAR 0 1
68694: PPUSH
68695: LD_VAR 0 2
68699: PPUSH
68700: LD_VAR 0 3
68704: PPUSH
68705: LD_VAR 0 4
68709: PPUSH
68710: LD_VAR 0 5
68714: PPUSH
68715: CALL 22961 0 5
// end ; end_of_file
68719: PPOPN 5
68721: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68722: LD_VAR 0 1
68726: PPUSH
68727: LD_VAR 0 2
68731: PPUSH
68732: LD_VAR 0 3
68736: PPUSH
68737: LD_VAR 0 4
68741: PPUSH
68742: LD_VAR 0 5
68746: PPUSH
68747: LD_VAR 0 6
68751: PPUSH
68752: CALL 7210 0 6
// end ;
68756: PPOPN 6
68758: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68759: LD_INT 0
68761: PPUSH
// begin if not units then
68762: LD_VAR 0 1
68766: NOT
68767: IFFALSE 68771
// exit ;
68769: GO 68771
// end ;
68771: PPOPN 7
68773: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68774: CALL 7114 0 0
// end ;
68778: PPOPN 1
68780: END
